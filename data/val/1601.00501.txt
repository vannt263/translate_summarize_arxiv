{
  "article_text": [
    "the idea of _ knowledge compilation _ is to deal with the intractability of certain computational tasks on a knowledge base by compiling it into a different data structure where the tasks are feasible .",
    "the choice of the target data structure involves an unavoidable trade - off between succinctness and tractability .",
    "darwiche and marquis @xcite systematically investigated this trade - off in the fundamental case where the knowledge bases are boolean functions and the data structures are classes of boolean circuits ( _ representation languages _ ) .    in their setting , _",
    "decomposable negation normal forms ( dnnfs ) _ and _ ordered binary decision diagrams ( obdds ) _ arise as benchmark languages for succinctness and tractability respectively @xcite . on the one hand ,",
    "dnnfs are exponentially more succinct than obdds ; moreover , in contrast to obdds , they implement efficiently conjunctive normal forms of small treewidth @xcite .",
    "on the other hand , the vast applicability of obdds in verification and synthesis relies on the tractability of equivalence testing ( speeded up by canonicity ) and boolean combinations , which dnnfs lack @xcite .",
    "this gap between dnnfs ( succinct but hard ) and obdds ( verbose but tractable ) led to the quest for intermediate languages exponentially more succinct than , but essentially as tractable as , obdds .    introduced by darwiche @xcite , _ sentential decision diagrams ( sdds ) _ are a most prominent candidate to narrow the gap between dnnfs and obdds .",
    "they are designed by strengthening the decomposability property @xcite and further imposing a very strong form of determinism @xcite .",
    "the resulting language can implement decisions of the form @xmath0 where @xmath1 and @xmath2 are disjoint sets of variables nicely structured by an underlying _ variable tree _ , and the subcircuits @xmath3 , called _ primes _ , s are called _",
    "subs_. ] implement an exhaustive case distinction into exclusive and consistent cases .",
    "partition the set of assignments of @xmath1 to @xmath4 into @xmath5 nonempty blocks ; see section  [ sect : back ] . ]",
    "binary ( or shannon ) decisions in obdds boil down to very special sentential decisions having the form @xmath6 where the variable @xmath7 is not in the variable set @xmath2 .",
    "indeed , sdds properly contain obdds , and hence are at least as succinct as obdds , while preserving tractability of all key tasks that are tractable on obdds .",
    "for this reason , they have been used in a variety of applications in artificial intelligence and probabilistic reasoning , as reported , for instance , by @xcite .",
    "not only sdds are as tractable as obdds , but they also tend to be more succinct than obdds in practice ; in fact , knowledge compilers often produce much smaller sdds than obdds by heuristically leveraging the additional flexibility of variable trees in sdds with respect to variable orderings in obdds @xcite .",
    "nonetheless , the basic theoretical question about the relative succinctness of obdds and sdds has been open since darwiche introduced sdds @xcite :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ are sdds exponentially more succinct than obdds ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the results in the literature did not even exclude the possibility for obdds to polynomially simulate sdds @xcite , until recently razgon proved a quasipolynomial separation @xcite .",
    "the above question stands , though , as for instance obdds could still quasipolynomially simulate sdds .",
    "[ [ contribution . ] ] contribution .",
    "+ + + + + + + + + + + + +    we prove in this article that sdds are exponentially more succinct than obdds .",
    "thus , in particular , obdds can not quasipolynomially simulate sdds .",
    "more precisely , _ we construct an infinite family of boolean functions such that every member of the family has polynomial compressed sdd size but exponential obdd size _ ( theorem  [ th : exp - sep ] ) . _ compressed _ sdds contain obdds , and are regarded as a natural sdd class because of their _ canonicity _ : two compressed sdds computing the same function are syntactically equal up to syntactic manipulations preserving polynomial size @xcite .",
    "the restriction to compressed sdds makes our result stronger , because general sdds are believed ( despite not known ) to be exponentially more succinct than compressed sdds @xcite .",
    "we separate compressed sdds and obdds by a function , which we call the _ generalized hidden weighted bit _ function because , indeed , it contains the _ hidden weighted bit _ function ( hwb ) as a subfunction .",
    "hwb is perhaps the simplest function known to be hard on obdds @xcite : it computes the subsets of @xmath8 having size @xmath9 and containing the number @xmath9 , for @xmath10 .",
    "it turns out that hwb itself has small ( uncompressed ) sdds ( theorem  [ th : sdd - size ] ) , which immediately separates sdds and obdds .",
    "the construction , a slight variation of which gives the compressed case ( lemma  [ lemma : sdd - size ] and lemma  [ lemma : obdd - size ] ) , is based on the following two observations .",
    "the first observation is that hwb can be expressed as a sentential decision of the form ( [ eq : sent - dec - intro ] ) by distinguishing the following primes :    * for @xmath10 , the subsets of size @xmath9 containing the number @xmath9 ( each of these @xmath11 primes is taken by hwb , so their subs will be equivalent to @xmath12 ) ; * the empty subset , and the subsets of size @xmath9 not containing the number @xmath9 for @xmath13 ( none of these @xmath11 primes is taken by hwb , so their subs will be equivalent to @xmath14 ) .",
    "the second observation is that each of the above primes has small obdd size under any variable ordering ( proposition  [ prop : obdd - pi ] ) . with these two observations",
    "it is fairly straightforward to implement the hidden weighted bit function by a small ( uncompressed ) sdd ( theorem  [ th : sdd - size ] ) .",
    "a direct inspection of our construction allows to straightforwardly derive some facts about compression previously observed in the literature @xcite , namely that the sdd size may increase exponentially either by compressing sdds over fixed variable trees , or by conditioning ( unboundedly many variables ) over fixed variable trees ( see section  [ sect : disc ] ) .",
    "[ [ organization . ] ] organization .",
    "+ + + + + + + + + + + + +    the article is organized as follows . in section",
    "[ sect : back ] we present the technical background , culminating in the quasipolynomial separation of sdds and obdds proved by razgon ( theorem  [ th : raz ] ) . in section  [",
    "sect : main ] , we separate ( uncompressed ) sdds and obdds by the hidden weighted bit function ( theorem  [ th : sdd - size ] ) and then modify the construction to separate compressed sdds and obdds ( theorem  [ th : exp - sep ] ) .",
    "we discuss our results in section  [ sect : disc ] .",
    "we collect background notions and facts from the literature @xcite .    [ [ structured - deterministic - nnfs . ] ] structured deterministic nnfs .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let @xmath1 be a finite set of variables .",
    "let @xmath15 be a boolean circuit on input variables @xmath1 , built using fanin @xmath16 constant gates ( labelled by @xmath14 or @xmath12 ) , fanin @xmath17 negation gates ( labelled by @xmath18 ) , and unbounded fanin disjunction and conjunction gates ( labelled by @xmath19 and @xmath20 ) .",
    "the unique sink node ( outdegree @xmath16 ) in the underlying directed acyclic graph ( dag ) of @xmath15 is called the output gate of @xmath15 ; source nodes ( indegree @xmath16 ) are called input gates , and are labelled by constants or variables in @xmath1 ; in particular , @xmath15 is allowed to not read some of the variables in @xmath1 , see figure  [ fig : struct ] ( left ) .",
    "a boolean circuit @xmath15 on variables @xmath1 is in _ negation normal form _ , in short an _ nnf _",
    ", if the gates labelled by @xmath18 have wires only from input gates . without loss of generality we assume that nnfs have input gates labelled by constants or literals on variables in @xmath1 ( and no internal gates labelled by @xmath18 ) .    as usual , an nnf @xmath15 on input variables",
    "@xmath1 computes a boolean function @xmath21 ; in this case we also write @xmath22 . two nnfs @xmath15 and @xmath23 on the same input variables are equivalent if they compute the same boolean function",
    "; again we write @xmath24 .",
    "the _ size _ of an nnf @xmath15 , in symbols @xmath25 , is the number of arcs in its underlying dag .",
    "let @xmath26 be a boolean function and let @xmath27 be a class of nnfs .",
    "the _ size of @xmath26 relative to @xmath27 _ ( or , in short , the _",
    "@xmath27 size of @xmath26 _ ) , denoted by @xmath28 , is equal to the minimum over the sizes of all circuits in @xmath27 computing @xmath26 : @xmath29    let @xmath15 be an nnf on input variables @xmath1 , and let @xmath30 be a gate of @xmath15 .",
    "we denote by @xmath31 the subcircuit of @xmath15 having @xmath30 as its output gate , that is , the circuit whose underlying dag is the subgraph of the underlying dag of @xmath15 induced by the nodes having a directed path to @xmath30 ( labelled as in @xmath15 ) .",
    "an nnf @xmath15 on input variables @xmath1 is _ deterministic _ if , for every @xmath19-gate @xmath30 in @xmath15 , say of the form @xmath32 , it holds that @xmath33 for all @xmath34 , where we formally regard @xmath35 , @xmath36 , and @xmath14 as nnfs on input variables @xmath1 .",
    "we denote by @xmath37 the class of all deterministic nnfs .",
    "let @xmath2 be a finite nonempty set of variables .",
    "a _ variable tree _ ( in short , a _ vtree _ ) for the variable set @xmath2 is a rooted , full , ordered , binary tree @xmath38 whose leaves correspond bijectively to @xmath2 ; indeed , we identify each leaf in @xmath38 with the variable in @xmath2 it corresponds to .",
    "let @xmath39 be an internal node of the vtree @xmath38 .",
    "we let @xmath40 and @xmath41 denote respectively the left and right child of @xmath39 , and @xmath42 denote the subtree of @xmath38 rooted at @xmath39 . we also let @xmath43 denote ( the variables corresponding to ) the leaves of @xmath44 ;",
    "clearly @xmath44 is a vtree for the variable set @xmath45 .",
    "let @xmath15 be an nnf on input variables @xmath1 , and let @xmath38 be a vtree for the variable set @xmath2 .",
    "we say that @xmath15 _ respects @xmath38 _ if the following holds .",
    "first , every @xmath20-gate @xmath30 in @xmath15 has fanin exactly @xmath46 .",
    "second , let @xmath30 be an @xmath20-gate in @xmath15 having wires from gates @xmath47 and @xmath48 .",
    "then there exists an internal node @xmath39 in @xmath38 such that the input gates of the subcircuit @xmath49 mention only variables in @xmath50 and the input gates of the subcircuit @xmath51 mention only variables in @xmath52 . in this case",
    ", we also say that @xmath30 respects @xmath39 .",
    "note that , in particular , the sets of variables mentioned by @xmath49 and @xmath51 are disjoint ; it follows that @xmath15 is decomposable @xcite .",
    "also note that , by definition , if an nnf reading all the variables in a set @xmath1 is structured by a vtree for the variable set @xmath2 , then @xmath53 and the inclusion can be strict ; see figure  [ fig : struct ] .",
    "this feature is crucial in our construction ( see , for instance , the proof of theorem  [ th : sdd - size ] ) .",
    "a _ structured nnf _ is an nnf respecting some vtree .",
    "see figure  [ fig : struct ] .",
    "we denote by @xmath54 the class of all structured nnfs .",
    "( 0,0 ) on the left ( in the underlying dag , the edges are oriented upwards ) , respecting the vtree for the variable set @xmath55 on the right .",
    "the left subtree is a vtree for the variable set @xmath56 , and the right subtree is a vtree for the variable set @xmath57 .",
    "the @xmath20-gate in the circuit respects the root of the vtree.,title=\"fig : \" ]    # 1#2#3#4#5 @font    ( 4111,2018)(8858,-429 ) ( 9805,344)(0,0)[lb ] ( 12323,1019)(0,0)[lb ] ( 11830,-331)(0,0)[lb ] ( 9384,793)(0,0)[lb ] ( 8922,333)(0,0)[lb ] ( 10930,569)(0,0)[lb ] ( 11380,119)(0,0)[lb ] ( 12730,-331)(0,0)[lb ]    [ [ sdds - and - obdds . ] ] sdds and obdds .",
    "+ + + + + + + + + + + + + + +    a _ sentential decision diagram ( sdd ) @xmath15 respecting a vtree @xmath38 _ is defined inductively as follows .",
    "* @xmath15 is a single gate labelled by a literal on a variable @xmath7 , and @xmath7 is in the variable set of @xmath38 . * @xmath15 is a single gate labelled by a constant , and @xmath38 is any vtree . *",
    "@xmath15 is formed by an output gate @xmath30 labelled by @xmath19 , with @xmath58 wires from gates @xmath59 labelled by @xmath20 , where each @xmath60 has wires from two gates @xmath61 and @xmath62 , that is , @xmath63 such that for some internal node @xmath39 of @xmath38 the following holds ( @xmath64 ) : + * ( s1 ) * : :    @xmath65 is an sdd respecting a subtree of    @xmath50 . * ( s2 ) * : :    @xmath66 is an sdd respecting a subtree of    @xmath52 . * ( s3 ) * : :    @xmath67 . *",
    "( s4 ) * : :    @xmath68    ( @xmath69 ) . * ( s5 ) * : :    @xmath70 .    in the equivalences in ( s3)-(s5 )",
    ", we formally regard the @xmath65 s , @xmath14 and @xmath12 as nnfs on variables @xmath71 . in words , conditions ( s3)-(s5 )",
    "say that the @xmath65 s define a partition of @xmath72 into @xmath5 nonempty blocks , where the @xmath9th block contains exactly the models of @xmath65 ( @xmath64 ) .",
    "an sdd is an sdd respecting some vtree .",
    "we let @xmath73 denote the class of all sdds .",
    "an sdd @xmath15 is called _ compressed _ if the following holds .",
    "let @xmath74 be an @xmath19-gate of @xmath15 , so that @xmath75 specified as in ( [ eq : or - node ] ) relative to some node @xmath76 in @xmath38 .",
    "then    * ( c ) * : :    @xmath77    ( @xmath78 ) ,    where we formally regard @xmath79 as an nnf on variables @xmath80 for @xmath81 .",
    "we let @xmath82 denote the class of all compressed sdds .",
    "an _ ordered binary decision diagram ( obdd ) _ is a compressed sdd respecting a _ right - linear _",
    "vtree @xmath38 ( that is , where each left child is a leaf ) ; see figure  [ fig : right - linear - tree ] .",
    "we let @xmath83 denote the class of all obdds .",
    "( 0,0).,title=\"fig : \" ]    # 1#2#3#4#5 @font    ( 2086,1568)(10883,-429 ) ( 11830,-331)(0,0)[lb ] ( 10930,569)(0,0)[lb ] ( 11380,119)(0,0)[lb ] ( 12730,-331)(0,0)[lb ]    let @xmath15 be an obdd respecting a vtree @xmath38 , and let @xmath84 be the variable ordering induced by a left first traversal of @xmath38 ; in this case , we also say that @xmath15 respects @xmath85 . for an ordering @xmath85 of a set of variables , we let @xmath86 denote the class of all obdds respecting @xmath85 .",
    "[ [ quasipolynomial - separation . ] ] quasipolynomial separation .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + +    it follows from the definitions that @xmath87 which raises the natural question how obdds and sdds are related in succinctness ; indeed , the quest for the relative succinctness of obdds and sdds has been an open problem in knowledge compilation since darwiche introduced sdds @xcite .",
    "recently , razgon ( * ? ? ?",
    "* corollary  3 ) has established a _ quasipolynomial separation _ of obdds from compressed sdds .",
    "[ th : raz ] there exists an unbounded arity class of boolean functions @xmath88 such that every arity @xmath11 function @xmath89 has @xmath82 size in @xmath90 and @xmath83 size in @xmath91 .",
    "we remark that the restriction to compressed sdds in the above statement is nontrivial ; to the best of our knowledge , compressed sdds might be exponentially more succinct than uncompressed sdds @xcite ; see also the discussion in section  [ sect : disc ] .",
    "the quasipolynomial separation stated in theorem  [ th : raz ] implies that obdds do not simulate sdds in polynomial size , but leaves open the possibility for obdds to simulate sdds in quasipolynomial size . in this section",
    "we exclude this possibility by establishing an _ exponential separation _ of obdds from compressed sdds .",
    "[ [ hidden - weighted - bit . ] ] hidden weighted bit .",
    "+ + + + + + + + + + + + + + + + + + + +    the separation is obtained by ( a variant of ) the _ hidden weighted bit _",
    "function @xmath92 that is the boolean function on @xmath11 inputs @xmath93 such that , for all assignments @xmath94 , it holds that @xmath26 is a model of @xmath95 if and only if @xmath96 and @xmath97 ( @xmath98 ) .",
    "it is well known that the hidden weighted bit function has exponential obdd size @xcite .",
    "[ th : bryant ] the @xmath83 size of @xmath95 is @xmath99 .    intuitively , a model of @xmath95 is a subsets of @xmath8 of size @xmath9 containing the number @xmath9 , for @xmath10 .",
    "for instance , @xmath100 , because the set @xmath101 has size @xmath17 and contains the number @xmath17 , and @xmath102 , because the set @xmath103 has size @xmath17 but does not contain the number @xmath17 .",
    "the simple but crucial observation underlying our construction is that the models of @xmath95 can be decided arguing by cases , as follows : if @xmath104 is a subset of @xmath8 of size @xmath9 , then @xmath104 is a model of @xmath95 if and only if @xmath105 ( @xmath10 ) . with this insight",
    "it is not hard to setup an exhaustive and exclusive case distinction equivalent to @xmath95 ; the key observation is that each individual case in the distinction is computable by a small obdd with respect to any variable ordering .",
    "we formalize the above intuition .",
    "for @xmath106 , let @xmath107 be the boolean function on @xmath11 inputs @xmath93 such that , for all assignments @xmath94 , it holds that @xmath26 is a model of @xmath108 if and only if @xmath96 .",
    "hence @xmath108 computes the subsets of @xmath8 of size @xmath9 ( @xmath109 ) .",
    "let now @xmath110 be the family of @xmath111 boolean functions , each over the variables @xmath112 , defined as follows :    * @xmath113 * @xmath114    and for @xmath13 let    * @xmath115 * @xmath116    see figure  [ fig : ein - proj ] for an illustration .",
    "each function in @xmath117 computes a family of subsets of @xmath8 .",
    "namely , @xmath118 computes the empty subset , @xmath119 computes @xmath8 , @xmath120 computes the subsets of @xmath8 of size @xmath9 not containing the number @xmath9 , and @xmath121 computes the subsets of @xmath8 of size @xmath9 containing the number @xmath9 ( @xmath13 ) .",
    "it is readily observed that the members of @xmath117 partition the powerset of @xmath8 in nonempty blocks .",
    "formally ,    [ fact : part ] let @xmath117 be as in ( [ eq : family - p ] ) , and let @xmath122 with @xmath123 .",
    "* @xmath124 .",
    "* @xmath125 . * @xmath126 .",
    "we now establish the key property , that each member of @xmath117 is computable by a small obdd with respect to any variable ordering .",
    "first consider the functions @xmath108 .",
    "an obdd computing @xmath108 with respect to the variable ordering @xmath84 is displayed in figure  [ fig : ein - obdd ] for the case @xmath127 and @xmath128 .",
    "generalizing the construction , we have that an obdd @xmath15 computing @xmath108 and respecting @xmath85 has at most @xmath129 decision nodes , each contributing @xmath130 wires in the circuit ; hence @xmath15 has size @xmath131 .    since @xmath108 is symmetric ( * ? ? ?",
    "* definition  2.3.2 and lemma  4.7.1 ) , the following holds .",
    "[ prop : obdd - ein ] let @xmath85 be an ordering of @xmath93 .",
    "the @xmath86 size of @xmath108 is @xmath131 .",
    "( 0,0 ) respecting the variable ordering @xmath132 , drawn ( in an unreduced form ) using the graphical conventions for decision diagrams @xcite .",
    "each decision node generates @xmath130 wires in the circuit ; for instance , the decision node @xmath39 generates a @xmath130-wire subcircuit isomorphic to @xmath133.,title=\"fig : \" ]    # 1#2#3#4#5 @font    ( 3886,2086)(9533,-879 ) ( 11380,1019)(0,0)[lb ] ( 10930,569)(0,0)[lb ] ( 11830,569)(0,0)[lb ] ( 11380,119)(0,0)[lb ] ( 10480,119)(0,0)[lb ] ( 12280,119)(0,0)[lb ] ( 12730,-331)(0,0)[lb ] ( 10030,-331)(0,0)[lb ] ( 9600,-789)(0,0)[lb ] ( 12300,-789)(0,0)[lb ] ( 13200,-789)(0,0)[lb ] ( 10930,-331)(0,0)[lb ] ( 11830,-331)(0,0)[lb ] ( 10500,-789)(0,0)[lb ] ( 11400,-800)(0,0)[lb ] ( 10750,-288)(0,0)[lb ]    it follows that every @xmath134 has a small obdd with respect to every variable ordering .",
    "[ prop : obdd - pi ] let @xmath85 be an ordering of @xmath93 and let @xmath134 , where @xmath117 is as in ( [ eq : family - p ] ) .",
    "the @xmath86 size of @xmath135 is @xmath131 .    for @xmath118 and @xmath119",
    "the statement follows directly from proposition  [ prop : obdd - ein ] .",
    "for @xmath13 we have that @xmath115 and @xmath116 .",
    "recall that if @xmath26 and @xmath136 are boolean functions on @xmath1 , and @xmath137 is any ordering of @xmath1 , then ( * ? ? ?",
    "* theorem  3.3.6 ) : @xmath138    regarding the literals @xmath139 and @xmath140 as boolean functions on @xmath112 whose @xmath86 size is constant ( @xmath130 wires ) , the statement follows from ( [ eq : conj - quadr ] ) and proposition  [ prop : obdd - ein ] .",
    "( 0,0 ) respecting the variable ordering @xmath132.,title=\"fig : \" ]    # 1#2#3#4#5 @font    ( 2986,2086)(9533,-879 ) ( 11380,1019)(0,0)[lb ] ( 10930,569)(0,0)[lb ] ( 11830,569)(0,0)[lb ] ( 11380,119)(0,0)[lb ] ( 10480,119)(0,0)[lb ] ( 10030,-331)(0,0)[lb ] ( 9600,-789)(0,0)[lb ] ( 12300,-789)(0,0)[lb ] ( 12300,111)(0,0)[lb ] ( 10930,-331)(0,0)[lb ] ( 11830,-331)(0,0)[lb ] ( 10500,-789)(0,0)[lb ] ( 11400,-800)(0,0)[lb ]    [ [ sdds - vs - obdds . ] ] sdds vs obdds .",
    "+ + + + + + + + + + + + + +    we now prove that the hidden weighted bit function has small ( uncompressed ) sdd size ; a slight modification of the construction , described later , gives the compressed case .",
    "the key observation is that , by the definition of @xmath117 , the hidden weighted bit function @xmath95 is equivalent to @xmath141 because the latter is equivalent to @xmath142 which is in turn equivalent to @xmath95 . using the form ( [ eq : sdd - hwb - form ] ) , it is easy to build an sdd computing @xmath95 and respecting a vtree for @xmath143 like the one on the right in figure  [ fig : struct ] ; upon implementing the @xmath144 s and @xmath145 s by obdds , the construction has polynomial size by proposition  [ prop : obdd - pi ] .",
    "note that the sdd is not compressed because @xmath14 and @xmath12 are reused @xmath11 times .",
    "the details follow .",
    "[ th : sdd - size ] the @xmath73 size of @xmath95 is @xmath90 .",
    "we first define an nnf @xmath15 on input variables @xmath146 computing ( [ eq : sdd - hwb - form ] ) as follows .",
    "the output gate of @xmath15 is a fanin @xmath111 @xmath19-gate , with wires from @xmath111 fanin @xmath46 @xmath20-gates @xmath147 , @xmath148 , and @xmath149 for @xmath13 and @xmath150 .",
    "let @xmath151 and @xmath152 be the two gates wiring @xmath147 , let @xmath153 and @xmath154 be the two gates wiring @xmath148 , and for @xmath13 and @xmath150 let @xmath155 and @xmath156 be the two gates wiring @xmath149 .",
    "let @xmath85 be any ordering of @xmath93 .",
    "all the subcircuits of @xmath15 rooted at @xmath151 , @xmath152 , @xmath153 , @xmath154 , @xmath155 , and @xmath156 ( @xmath13 , @xmath150 ) are obdds respecting the ordering @xmath85 .",
    "moreover :    * @xmath65 computes @xmath144 for @xmath157 ; * @xmath158 computes @xmath145 for @xmath13 , @xmath150 ; * @xmath159 and @xmath160 compute @xmath14 for @xmath13 ; * @xmath161 and @xmath162 compute @xmath12 for @xmath13 .",
    "we prove that @xmath15 is an sdd respecting a suitable vtree @xmath38 for the variable set @xmath163 .",
    "roughly , @xmath38 is a right - linear vtree with the exception of the variable @xmath164 ; see the diagram on the right in figure  [ fig : struct ] for the case @xmath127 and @xmath165 .",
    "formally , @xmath38 is defined as follows .",
    "let @xmath39 be the root of @xmath38 .",
    "the left subtree @xmath166 of @xmath38 is a right - linear vtree for @xmath112 such that the variable ordering induced by its left first traversal is @xmath85 .",
    "similarly , the right subtree @xmath167 of @xmath38 is a vtree for @xmath57 .",
    "we check that @xmath15 is an sdd respecting @xmath38 .    *",
    "the subcircuits @xmath168 , @xmath169 , and @xmath158 are obdds respecting @xmath85 , and hence sdds respecting @xmath170 ( @xmath13 , @xmath150 ) .",
    "this settles ( s1 ) . *",
    "the subcircuits @xmath159 , @xmath161 , and @xmath171 are input gates labelled by a constant , and hence sdds respecting @xmath172 ( @xmath13 , @xmath150 ) .",
    "this settles ( s2 ) .",
    "note how the construction crucially exploits the special position of @xmath164 in the vtree @xmath38 , while the circuit @xmath15 does not even read @xmath164 .",
    "the partitioning properties ( s3)-(s5 ) follow by construction and fact  [ fact : part ] .",
    "therefore , @xmath15 is an sdd respecting @xmath38 .",
    "it remains to check that @xmath15 has size cubic in @xmath11 .",
    "by construction , @xmath15 contains the @xmath111 subcircuits @xmath168 , @xmath169 , and @xmath158 for @xmath13 and @xmath150 ; each has size @xmath131 by proposition  [ prop : obdd - pi ] hence , altogether , they contribute @xmath90 wires in @xmath15",
    ". there remain @xmath173 wires entering the output gate and the gates @xmath174 .    combining theorem  [ th : bryant ] and theorem  [ th : sdd - size ]",
    ", we conclude that obdds and sdds are exponentially separated by the hidden weighted bit function .    [",
    "[ compressed - sdds - vs - obdds . ] ] compressed sdds vs obdds .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + +    a slight variant of the previous construction gives an exponential separation of obdds and compressed sdds .",
    "let @xmath175 be fresh variables .",
    "the boolean function @xmath176 of the variables @xmath177 , called _ generalized hidden weighted bit _ function , is defined by @xmath178    notice that the form ( [ eq : fn ] ) is exactly as the form ( [ eq : sdd - hwb - form ] ) , except that the @xmath11 copies of @xmath14 and the @xmath11 copies of @xmath12 are replaced by the @xmath111 pairwise nonequivalent formulas @xmath179 , @xmath180 , @xmath181 , and @xmath182 ( @xmath13 ) , so that ( [ eq : fn ] ) has indeed a compressed sdd implementation .",
    "the details follow .",
    "[ lemma : sdd - size ] the @xmath82 size of @xmath176 is @xmath90 .",
    "we construct an nnf @xmath15 on input variables @xmath183 computing ( [ eq : fn ] ) along the lines of theorem  [ th : sdd - size ] .",
    "the only modification is that @xmath159 is an input gate labelled @xmath179 , @xmath161 is an input gate labelled @xmath180 , @xmath160 is an input gate labelled @xmath182 , and @xmath162 is an input gate labelled @xmath181 ( @xmath13 ) .",
    "we claim that @xmath15 is a compressed sdd respecting a vtree @xmath38 for the variable set @xmath1 built exactly as in theorem  [ th : sdd - size ] except that the right subtree @xmath167 of @xmath38 is a right - linear vtree for @xmath184 such that the variable ordering induced by its left first traversal is @xmath137 .",
    "see figure  [ fig : vt - sdd ] for the case @xmath127 , @xmath185 , and @xmath186 .    to check that @xmath15 is a compressed sdd respecting @xmath38 , notice that the subcircuits @xmath168 and @xmath158 are obdds respecting @xmath85 , and hence compressed sdds respecting @xmath170 ( @xmath10 , @xmath150 ) , and the subcircuits @xmath159 and @xmath171 are obdds respecting @xmath137 , and hence compressed sdds respecting @xmath172 ( @xmath10 , @xmath150 ) .",
    "moreover , it is easily verified that the output gate of @xmath15 is compressed as by condition ( c ) .",
    "hence @xmath15 is compressed .",
    "the rest of the proof is identical to that of theorem  [ th : sdd - size ] .",
    "( 0,0 ) in the proof of lemma  [ lemma : sdd - size].,title=\"fig : \" ]    # 1#2#3#4#5 @font    ( 3886,2468)(10883,-429 ) ( 11830,-331)(0,0)[lb ] ( 10930,569)(0,0)[lb ] ( 11380,119)(0,0)[lb ] ( 12730,-331)(0,0)[lb ] ( 12747,580)(0,0)[lb ] ( 13197,130)(0,0)[lb ] ( 13647,-320)(0,0)[lb ] ( 14547,-320)(0,0)[lb ] ( 12297,1030)(0,0)[lb ]    we now prove that the generalized hidden weighted bit function @xmath176 needs large obdds .",
    "[ lemma : obdd - size ] the @xmath83 size of @xmath176 is @xmath99 .",
    "let @xmath187 be the size of a smallest @xmath83 on variables @xmath183 computing @xmath176 , and let @xmath137 be any ordering of @xmath1 such that @xmath188 .",
    "let @xmath189 be the subfunction of @xmath176 where @xmath175 are replaced by @xmath17 , in symbols : @xmath190    since conditioning ( unboundedly many variables of ) an obdd does not increase its size ( * ? ? ?",
    "* theorem  2.4.1 ) , we have that @xmath191    we now claim that @xmath192 is the hidden weighted bit function on @xmath11 variables . indeed , by construction , @xmath193 which we already observed being equivalent to @xmath95 . therefore @xmath194 by theorem  [ th : bryant ] , and in particular @xmath195 .",
    "by ( [ eq : step-1 ] ) , we are done .",
    "an exponential separation of obdds and compressed sdds follows .",
    "[ th : exp - sep ] there exists an unbounded arity class of boolean functions @xmath88 such that every arity @xmath11 function @xmath89 has @xmath82 size in @xmath90 and @xmath83 size in @xmath99 .",
    "take @xmath196 , where @xmath197 is as in ( [ eq : fn ] ) .",
    "then @xmath197 has compressed @xmath73 size @xmath198 by lemma  [ lemma : sdd - size ] and @xmath83 size @xmath199 by lemma  [ lemma : obdd - size ] .",
    "since @xmath197 has @xmath200 variables , it follows that @xmath197 has @xmath82 size in @xmath90 and @xmath83 size in @xmath99 .",
    "notably , the function class giving the exponential separation is as hard on compressed sdds as the function class giving the quasipolynomial separation ( cubic in both cases , see theorem  [ th : raz ] ) .",
    "we have shown that obdds and sdds are exponentially separated by the hidden weighted bit function , while obdds and compressed sdds are exponentially separated by the generalized hidden weighted bit function , @xmath176 in ( [ eq : fn ] ) , that contains the hidden weighted bit function as a subfunction : @xmath201 separating obdds and sdds by the hidden weighted bit function , instead of by a function designed adhoc , further corroborates the theoretical quality of sdds . as articulated by bollig et al .",
    "@xcite , any useful extension of obdds is expected to implement the hidden weighted bit function efficiently .",
    "the sdd @xmath15 described in the proof of theorem  [ th : sdd - size ] is not compressed , because @xmath14 and @xmath12 are reused @xmath11 times . in view of the canonical construction of an sdd over a vtree ( * ? ? ?",
    "* theorem  3 ) , it is readily observed that compressing @xmath15 with respect to the vtree @xmath38 in the proof of theorem  [ th : sdd - size ] implies finding a small sdd for @xmath95 with respect to the left subtree of @xmath38 , that is , a small obdd for @xmath95 ; but this is impossible by theorem  [ th : bryant ] .",
    "the fact that compressing an sdd over its vtree may increase the size exponentially has been observed already ( * ? ? ?",
    "* theorem  1 ) .",
    "we reiterate the observation here only because our argument is significantly shorter .",
    "we conclude mentioning a nonobvious , and perhaps even unexpected , aspect of our separation result .",
    "an inspection of our construction shows that sdds are already exponentially more succinct than _ general obdds _ even allowing only _ one sentential decision _ ( and possibly many shannon decisions ) ; recall ( [ eq : sdd - hwb - form ] ) and ( [ eq : fn ] ) .",
    "the construction by xue et al .",
    "@xcite already uses _ nested sentential decisions _ even to separate _",
    "obdds over a fixed variable ordering _ from sdds !    [ [ questions . ] ] questions .",
    "+ + + + + + + + + +    we do not know whether the hidden weighted bit function has superpolynomial compressed sdd size for all vtrees ; a positive answer would separate compressed and uncompressed sdds in succinctness and , in view of lemma  [ lemma : sdd - size ] and ( [ eq : fn - proj ] ) , would prove that compressed sdds do not support conditioning ( of unboundedly many variables ) in polynomial size .",
    "in view of theorem  [ th : raz ] , it is natural to ask which sdds are quasipolynomially simulated by obdds .",
    "our separating family shows that sdds with unbounded fanin disjunctions can not be quasipolynomially simulated by obdds . on the other hand",
    ", recent work by darwiche and oztok essentially shows that sdds over binary disjunctions ( fanin @xmath46 ) admit a quasipolynomial simulation by obdds ( * ? ? ?",
    "* theorem  1 ) . in this light",
    ", it is tempting to conjecture that the above criterion is exact , that is , every sdd class over bounded fanin disjunctions does indeed admit a quasipolynomial simulation by obdds .",
    "finally , a natural question arising in the context of the present work is about the relative succinctness of sdds and structured deterministic nnfs ( see ( [ eq : inclusions ] ) ) ; to the best of our knowledge , the question is open . by theorem",
    "[ th : sdd - size ] , at least we now know that the hidden weighted bit function is not a candidate to separate the two classes .",
    "the author thanks igor razgon for generously introducing him to the problem addressed in this article , and an anonymous reviewer for suggesting the comparison with @xcite discussed in the conclusion .",
    "this research was supported by the fwf austrian science fund ( parameterized compilation , p26200 ) .",
    "guy  broek and adnan darwiche . .",
    "in bonet , b. , and koenig , s. , eds . , _ proceedings of the twenty - ninth aaai conference on artificial intelligence , january 25 - 30 , 2015 , austin , texas , usa . _ , 16411648 .",
    "aaai press , 2015 .",
    "arthur choi and adnan darwiche . .",
    "in desjardins , m. , and littman , m.  l. , eds . , _ proceedings of the twenty - seventh aaai conference on artificial intelligence , july 14 - 18 , 2013 , bellevue , washington , usa . _ ,",
    "aaai press , 2013 .",
    "adnan darwiche . .",
    "in walsh , t. , ed . , _ ijcai 2011 , proceedings of the twenty - second international joint conference on artificial intelligence , barcelona , catalonia , spain , july 16 - 22 , 2011 _ , 819826 .",
    "ijcai / aaai , 2011 .",
    "umut oztok and adnan darwiche . .",
    "in schaub , t. ; friedrich , g. ; and osullivan , b. , eds . , _",
    "ecai 2014 , proceedings of the twenty - first european conference on artificial intelligence , 18 - 22 august 2014 , prague , czech republic , august 18 - 22 , 2014 _ , volume 263 of _ frontiers in artificial intelligence and applications _ , 675680 .",
    "ios press , 2014 .",
    "umut oztok and adnan darwiche . .",
    "in yang , q. , and wooldridge , m. , eds . , _ proceedings of the twenty - fourth international joint conference on artificial intelligence , ijcai 2015 , buenos aires , argentina , july 25 - 31 , 2015 _ , 31413148 .",
    "aaai press , 2015 .",
    "knot pipatsrisawat and adnan darwiche . .",
    "in fox , d. , and gomes , c.  p. , eds . , _ proceedings of the twenty - third aaai conference on artificial intelligence , aaai 2008 , chicago , illinois , usa , july 13 - 17 , 2008 _",
    ", 517522 .",
    "aaai press , 2008 .",
    "thammanit pipatsrisawat and adnan darwiche . .",
    "in fox , m. , and poole , d. , eds . , _ proceedings of the twenty - fourth aaai conference on artificial intelligence , aaai 2010 , atlanta , georgia , usa , july 11 - 15 , 2010_. aaai press , 2010 .",
    "igor razgon and justyna petke . .",
    "in jrvisalo , m. , and gelder , a.  v. , eds . ,",
    "_ sat 2015 , proceedings of the sixteenth international conference on theory and applications of satisfiability testing , helsinki , finland , july 8 - 12 , 2013 _ , volume 7962 of _ lecture notes in computer science _",
    ", 335350 .",
    "springer , 2013 .",
    "igor razgon . .",
    "in baral , c. ; giacomo , g.  d. ; and eiter , t. , eds . , _",
    "kr 2014 , proceedings of the fourteenth international conference on principles of knowledge representation and reasoning , vienna , austria , july 20 - 24 , 2014_. aaai press , 2014 .",
    "yexiang xue , arthur choi , and adnan darwiche . in hoffmann , j. , and selman , b. , eds .",
    ", _ proceedings of the twenty - sixth aaai conference on artificial intelligence , july 22 - 26 , 2012 , toronto , ontario , canada . _ aaai press , 2012 ."
  ],
  "abstract_text": [
    "<S> introduced by darwiche @xcite , sentential decision diagrams ( sdds ) are essentially as tractable as ordered binary decision diagrams ( obdds ) , but tend to be more succinct _ in practice_. </S>",
    "<S> this makes sdds a prominent representation language , with many applications in artificial intelligence and knowledge compilation .    </S>",
    "<S> we prove that sdds are more succinct than obdds also _ in theory _ , by constructing a family of boolean functions where each member has polynomial sdd size but exponential obdd size . </S>",
    "<S> this exponential separation improves a quasipolynomial separation recently established by razgon @xcite , and settles an open problem in knowledge compilation @xcite . </S>"
  ]
}