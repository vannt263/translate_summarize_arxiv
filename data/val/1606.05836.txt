{
  "article_text": [
    "universal quantum computers promise to substantially outperform classical computers  @xcite , however , they have been experiencing challenges to build in practice , due to stringent requirement of high - fidelity quantum gate and scalability . for example",
    ", shor s algorithm  @xcite , solving integer factorization problem , is one of the most attractive quantum algorithms because of its potential to crack current mainstream rsa cryptosystem .",
    "an universal quantum computer requires 1025 qubits to factor a 1024-bit number ( @xmath2 )  @xcite , a key size thought to be crackable on classical computers  @xcite .",
    "however , the largest number factored using shor s algorithm is 21 untill now  @xcite .",
    "this motivates the research of specific quantum computation with quantum speedup and more favorable experimental conditions .",
    "boson sampling  @xcite is a specific quantum computation thought to be an outstanding candidate for beating the most powerful classical computer in the near term .",
    "it samples the distribution of bosons coming from a complex interference network . unlike universal quantum computation",
    ", quantum boson sampling seems to be more straightforward , since it only requires identical bosons , linear evolution and measurement . as for classical computers ,",
    "the distribution can be obtained by computing permanents of matrices derived from the unitary transformation matrix of the network  @xcite . however , computing the permanent has been proved as a # p - hard task with classical computers .",
    "the best - known classical algorithm scales exponentially with the size of a matrix .",
    "these motivate a lot of advances in building larger quantum boson sampling machine to outperform classical computers , including principle - of - proof experiments  @xcite , simplified models easy to implement  @xcite , implementation techniques  @xcite , robustness of boson sampling  @xcite , validation of a large scale boson sampling  @xcite , varied models for other quantum states  @xcite , etc .        however , what is the upper - bound of computing the permanent on classical computer ? solving boson sampling problem with @xmath3 bosons on classical computers depends on computing permanents of @xmath4 matrices .",
    "therefore , the upper - bound is strongly related to the condition on which a quantum boson sampling machine will surpass classical computers .    here",
    "we present the test results of computing permanents on tianhe-2  @xcite ( fig .",
    "[ fig : tianhe2 ] ) , the supercomputer which has retained its position as the world s no.1 in top500 supercomputer lists since june 2013 .",
    "the performance of tianhe-2 is comparable with that of several millions of typical personal computers working simultaneously .",
    "we developed , optimized and tested parallel programs of two best - known algorithms , ryser s algorithm and balasubramanian - bax / franklin - glynn s ( bb / fg s ) algorithm . in this paper , we report the speed performance of ryser s algorithm and bb / fg s algorithm in real tests on tianhe-2 supercomputer .",
    "we then show the predicted performance of computing the permanent of a @xmath1 matrix on the full system of tianhe-2 supercomputer .",
    "in addition , we show that ryser s algorithm has an unacceptable accumulating rounding error from the limited word length of classical computers , compared to bb / fg s algorithm .",
    "this implies the result of ryser s algorithm for large - size matrices may be untrustable .",
    "ryser s algorithm is shown in equation   and bb / fg s algorithm in equation  . in the equations",
    ", @xmath5 denotes the permanent of the matrix @xmath6 .",
    "@xmath7 is the element of @xmath6 in the @xmath8th row and @xmath9th column .",
    "@xmath3 is the matrix size .",
    "@xmath10 , where @xmath11 and @xmath12 for @xmath13 .            to test the upper - bound speed of computing permanents classically , we tried exploiting tianhe-2 s computing resources as many as possible ( see section  [ sec : methods ] and appendix  [ app : methodology ] ) .",
    "tianhe-2 has 16,000 compute nodes , and each comprises two intel ivy bridge xeon e5 processors ( cpus ) and three xeon phi coprocessors ( denoted as mics , because they adopt intel many integrated core architecture ) .",
    "ryser s algorithm was tested with only cpus , while bb / fg s algrithm was tested under two types of configurations : with only cpus or with cpus and mics heterogeneously .",
    "we use real tests on small - scale subsystems ( with @xmath16 compute nodes ) to evaluate and optimize our programs .",
    "note that even a small - scale subsystem with 256 nodes still has a predicted linpack performance of 541.8 teraflops and a theoretical peak performance of 848.4 teraflops that may be ranked in the top 160 in top500 s list in nov .",
    "2015 .",
    "the key of gaining speedup from a parallel computer system is to implement the scalable parallel program , which can get more and more performance improvement with the increase of the computing resources . to evaluate the scalability of our programs",
    ", we tested them with different combinations of problem scale and parallel scale . according to the complexity ( @xmath17",
    ", @xmath3 is the matrix size ) , the number of operations almost grows double with the increase of @xmath3 .",
    "execution time grows by 1.95 times in fig .",
    "[ fig : executiontime](a ) , meaning that the additional cost of larger matrix is very small with the increase of problem scale",
    ". meanwhile , execution time decreases with nearly linear speedup ( slopes of 0.54 and 0.59 in fig .",
    "[ fig : executiontime](b ) ) when the parallel scale increases .",
    "ideal slope is @xmath18 , meaning no additional cost .",
    "these suggest our programs have execellent scalability with only small and fixed cost from their serial parts .",
    "rccc + & & + & & * lower bound * & * upper bound * + & @xmath19 & @xmath20 & @xmath21 + * b : * & @xmath22 & @xmath23 & @xmath24 +   + & 284.2 & + * r_square : * & 0.994 & + * adjusted r_square : * & 0.9938 & + * rmse : * & 2.665 & +"
  ],
  "abstract_text": [
    "<S> boson sampling , a specific quantum computation problem , is widely regarded to be one of the most achievable fields in which quantum machine will outperform the most powerful classical computer in the near term , although up to now no upper - bound of how fast the classical computers can compute matrix permanents , core problem of boson sampling , has been reported . here </S>",
    "<S> we test the computing of the matrix permanent on tianhe-2 , a supercomputer retaining its position as the world s no . </S>",
    "<S> 1 system for six times since june 2013 . </S>",
    "<S> we arrived at the time ( about @xmath0 minutes ) to compute the permanent of a @xmath1 matrix in an acceptable precision . </S>",
    "<S> in addition , we have found that ryser s algorithm will produce an unacceptable error with the increase of problem scale , compared to balasubramanian - bax / franklin - glynn s algorithm in the same complexity . </S>",
    "<S> the precision issue suggests carefully check in future research of boson sampling , and comprehensive comparison between quantum computer and classical computer . </S>"
  ]
}