{
  "article_text": [
    "the pairing heap @xcite is a self - adjusting heap that is implemented as a single heap - ordered multi - way tree .",
    "the basic operation on a pairing heap is the linking operation in which two trees are combined by linking the root with the larger key value to the other as its leftmost child .",
    "the following operations are defined for the standard implementation of the pairing heaps :    * _ find - min .",
    "_ return the value at the root of the heap . *",
    "_ create a single - node tree and link it with the tree of the heap . * _ decrease - key .",
    "_ decrease the value of the corresponding node . if this node is not the root , cut its subtree and link the two resulting trees .",
    "_ link the two trees representing the two heaps .",
    "* _ delete - min .",
    "_ remove the root of the heap and return its value .",
    "the resulting trees are then combined to form a single tree . for the standard two - pass variant ,",
    "the linkings are performed in two passes . in the first pass , called the pairing pass , the trees are linked in pairs from left to right ( pairing these trees from right to left achieves the same amortized bounds ) . in the second pass , called the right - to - left incremental - linking pass , the resulting trees are linked in order from right to left , where each tree is linked with the tree resulting from the linkings of the trees to its right . other variants with different _ delete - min _ implementation were given in @xcite .",
    "the original analysis of the pairing heaps @xcite showed an @xmath2 amortized cost for all operations .",
    "another self - adjusting heap that requires @xmath2 amortized cost per operation @xcite is the skew heap .",
    "theoretical results concerning the pairing heaps were later obtained through the years .",
    "stasko and vitter @xcite suggested a variant that achieves @xmath1 amortized cost per _",
    "the bounds for the standard implementation were later improved by iacono @xcite to : @xmath1 per _ inset _ , and zero cost per _",
    "meld_. fredman @xcite showed that @xmath4 amortized comparisons , in the decision - tree model , would be necessary per _ decrease - key _",
    "operation for a family of heaps that generalizes the pairing heaps .",
    "pettie @xcite proved amortized costs of : @xmath2 per _ delete - min _ , and @xmath5 for other operations .",
    "recently , elmasry @xcite introduced a variant that achieves the following amortized bounds : @xmath1 per _ insert _ , @xmath2 per _ delete - min _ , and @xmath0 per _ decrease - key _ and _ meld_. see table [ t1 ] .",
    "[ t1 ]    .previous results for upper bounds on pairing - heap s operations [ cols=\"^,^,^,^,^\",options=\"header \" , ]     several experiments were conducted on the pairing heaps , either comparing its performance with other priority queues @xcite or with some of its variants @xcite .",
    "such experiments illustrate that the pairing heaps are practically efficient and superior to other heaps , including the fibonacci heaps @xcite .    in this paper",
    ", we give a variation of the pairing heaps that achieves the best known bounds for any self - adjusting heap for all operations .",
    "namely , our amortized bounds are : zero cost per _ meld _",
    ", @xmath1 per _ find - min _ and _ insert _ , @xmath2 per _ delete - min _ , and @xmath3 per _ decrease - key_. we describe the data structure in section @xmath6 , prove the time bounds in section @xmath7 , give possible variations in section @xmath8 , and conclude the paper with some remarks .",
    "similar to the standard implementation of the pairing heaps , we implement our variation as a single heap - ordered multi - way tree . since we perform the _ decrease - key _ operations lazily ,",
    "a pointer to the minimum element is maintained .",
    "+ the detailed implementations for various heap operations are as follows :    * _ find - min .",
    "_ return the value of the node pointed to by the minimum pointer . * _ insert .",
    "_ create a single - node tree and link it with the main tree . update the minimum pointer to point to this node if it is the new minimum . *",
    "_ decrease - key .",
    "_ decrease the value of the corresponding node @xmath9 .",
    "update the minimum pointer to point to @xmath9 if it is the new minimum . add @xmath9 to the list of decreased nodes if it is not a root .",
    "we use the following procedure in implementing the upcoming operations :    @xmath10 -_clean - up : _    1 .",
    "perform the following for every node @xmath9 in the list of decreased nodes : cut @xmath9 s subtree and the subtree of the leftmost child of @xmath9 .",
    "glue the subtree of the leftmost child of @xmath9 in place of @xmath9 s subtree , and add the rest of @xmath9 s subtree ( excluding the subtree of @xmath9 s leftmost child that has just been cut ) to the pool of trees to be combined .",
    "see figure [ fig1 ] .",
    "arbitrary divide the trees of the pool into groups of @xmath11 trees each ( except possibly for one smaller group ) . for every group ,",
    "sort the values of the roots of the trees and link the resulting trees in this order such that their roots form a path of nodes in the combined tree ( make every root the leftmost child of the root with the next smaller value ) . link the combined trees with the main tree in any order .",
    "_ call clean - up for the smaller heap .",
    "link the trees of the two heaps .",
    "destroy the smaller heap .",
    "update the minimum pointer to point to the root if it has the minimum of the melded heap . * _ delete - min .",
    "_ call clean - up .",
    "apply the standard two - pass implementation of the pairing heaps @xcite .",
    "make the minimum pointer point to the root of the resulting tree .",
    "we prove the following theorem that implies the claimed time bounds :    starting with an empty heap , consider a sequence of operations @xmath12 .",
    "let @xmath13 is a meld operation@xmath14 , @xmath15 is a find - min or an insert operation@xmath14 , @xmath16 is a decrease - key operation@xmath14 , and @xmath17 is a delete - min operation@xmath14 .",
    "the sequence @xmath18 can be executed on our pairing heaps in @xmath19 , where @xmath20 is the number of elements that are in the heap at operation @xmath21 and will leave the heap while performing @xmath18 .    for the sake of the analysis",
    ", we categorize the nodes as follows .",
    "a node is _ black _ if it will remain in the heap after performing the sequence of operations under consideration , otherwise it is _ white_. a black node whose descendants are all black is called an _ inactive _ node .",
    "let @xmath22 be the number of white descendants of a node @xmath9 , including @xmath9 if it is white .    1 .",
    "_ inactive _ nodes : every node @xmath9 with @xmath23 .",
    "active _ nodes : other nodes .    to bound the cost of the heap operations",
    ", we use a combination of the potential function and the accounting methods @xcite .      consider the link between a node @xmath9 and its parent @xmath24 .",
    "let @xmath25 be the number of white descendants of @xmath24 restricted to the subtrees of the right siblings of @xmath9 , including @xmath24 if it is white .",
    "we use the potential function    @xmath26    despite the fact that the potential on a link may reach @xmath27 , the sum of potentials on a path from a node @xmath28 to any of its descendants telescopes to at most @xmath29 . if the path is the left spine of the subtree of @xmath28 , the sum of potentials telescopes to exactly @xmath29 .      consider the following two cases :    * a white node is inserted in a heap with an _ active _ root . *",
    "two heaps with _ active _ roots are melded .    to fulfill the potential requirements , @xmath30 units are borrowed from the allowable cost for the _ delete - min _ operations that will be performed on the white nodes .",
    "the following lemma illustrates that these debits are enough to cover the above two cases .",
    "[ l1 ] consider the heap at any time during the execution of the sequence of operations @xmath18 .",
    "let @xmath31 is a delete - min operation that will be performed on a node currently in the heap@xmath14 .",
    "the sum of the potentials on the links formed by insert or meld operations is at most @xmath32 , where @xmath20 is the number of elements that are in the heap at operation @xmath21 and will leave the heap while performing @xmath18 .",
    "_ let @xmath33 be a tree representing a heap that has @xmath34 white nodes at this point of time .",
    "let @xmath35 be the set @xmath36 restricted to the operations performed on the nodes of @xmath33 , and @xmath37 be the sum of the potentials on the links of @xmath33 formed by _",
    "insert _ or _",
    "meld _ operations .",
    "we prove by induction the stronger fact that @xmath38 .",
    "since all the white nodes will eventually be deleted , then @xmath39 .",
    "consider an _ insert _",
    "operation , where a white node is linked to @xmath33 resulting in the tree @xmath40 .",
    "the required potential on this link is @xmath41 . by induction ,",
    "consider a _ meld _",
    "operation , where two trees @xmath43 and @xmath44 with _ active _ roots are linked resulting in tree @xmath40 .",
    "assume that @xmath43 and @xmath44 have @xmath45 white nodes , respectively .",
    "the required potential on this link is at most @xmath46 . by induction ,",
    "this follows from the fact that @xmath48 , for any integers @xmath49 .",
    "@xmath50      we maintain the following credits in addition to the potential function :    1 .",
    "_ decrease _ credits : @xmath51 credits for every decreased node since the previous _ clean - up _ is performed .",
    "_ heap _ credits : @xmath52 credits per heap , where @xmath53 is the size of this heap .",
    "active - parent _ credits : @xmath1 credits for every child of an _ active _ node .",
    "active - run _ credits : @xmath1 credits for every _ active _ node with an _ inactive _ right sibling .",
    "next , we analyze the time bounds for our operations .",
    "each operation must maintain the potential function , the credits , and pay for the work it performs .",
    "no potential or credit changes are required .",
    "the actual work of _ find - min _ is @xmath1 .",
    "it follows that the worst - case cost of _ find - min _ is @xmath1 .",
    "if the inserted node is white , extra potential units may be needed .",
    "but , as lemma [ l1 ] illustrates , these units are borrowed from the logarithmic cost per _ delete - min _ , and the _ insert _ operation need not pay for that .",
    "assume that as a result of the _ insert _ operation node @xmath9 is linked to node @xmath54 . if @xmath54 is _ active _ , the _ active - parent _ credits need to be increased by @xmath1 .",
    "if @xmath9 is _ active _ , and the previous leftmost child of @xmath54 was _ inactive _ , the _ active - run _ credits need to be increased by @xmath1 .",
    "since the size of the heap increased by one , the _ heap _ credits need to be increased by @xmath1",
    ". the _ decrease _ credits need to be increased by @xmath55 per decreased node , which still sums up to @xmath1 as indicated by the following proposition .",
    "@xmath56 .",
    "_ for @xmath57 , @xmath58    but @xmath59 , where @xmath60 is the base of the natural logarithm .",
    "@xmath50 + the actual work to link an inserted node with the main tree is @xmath1 .",
    "it follows that the amortized cost of _ insert _ is @xmath1 .",
    "no potential changes are required .",
    "the _ decrease - key _ pays @xmath0 credits for the decreased node .",
    "the actual work it performs is @xmath1 .",
    "it follows that the amortized cost of the _ decrease - key _ operation is @xmath3 .",
    "first , consider the effect of a cut performed on a decreased node @xmath9 :    consider the path of nodes from the root including all the ancestors of @xmath9 followed by the nodes on the left spine of @xmath9 s subtree . since we cut the subtree of @xmath9 and replace it with the subtree of its leftmost child ,",
    "the nodes of the above path remain the same except for @xmath9 .",
    "if all the descendants of @xmath9 are black , possibly excluding the subtree of its leftmost child , then the potentials on all the links do not change as a result of the cut .",
    "otherwise , all the ancestors of @xmath9 before the cut are _",
    "active_. in such case ,",
    "the proof given in @xcitecan be applied , indicating that the sum of the potential on all the links does not increase .    if @xmath9 and both its left and right siblings are _ active _ while its leftmost child is _ inactive _ , then the number of _ active - runs _ increases by one , and @xmath1 credits would be needed and paid for from the released _",
    "decrease _ credits .",
    "second , consider the effect of combining the trees and linking them with the main tree :    the trees of a group are combined by sorting the values in their roots and linking them accordingly in order . since the size of a group is @xmath2 , the actual work done in sorting is paid for from the released _",
    "decrease _ credits ( @xmath3 credits per node ) .",
    "this will result in a new path of links .",
    "since the sum of the potential values on a path telescopes , the increase in potential as a result of combining the trees of a group and then linking this group to the main tree is @xmath2 .",
    "this @xmath2 potential increase is also paid for from the _ decrease _ credits , except for possibly the last group .",
    "( the last group may be a smaller group , and its _ decrease _ credits may not be enough to pay for the increase in potential . )    as a result of a link the number of _ active - runs _ and _ active - parents _ may increase by one , and @xmath1 credits would be needed and again paid for from the _ decrease _ credits .",
    "it follows that the overall amortized cost of the _ clean - up _ procedure is @xmath2 .      as for _ insert",
    "_ , extra potential units may be needed .",
    "but , as lemma [ l1 ] illustrates , these units are borrowed from the logarithmic cost per _ delete - min_.    the cost of the _ clean - up _ performed on the smaller heap is @xmath52 , where @xmath53 is its size . since the size of the combined heap is at most twice the size of the larger heap , the _ heap _ credits for the combined heap need to be incremented by @xmath1 .",
    "similar to _ insert _ , the _ active - parent _ credits and the _ active - run _ credits may need to be increased by @xmath1 . the actual work for meld , other than the _",
    "clean - up _ of the smaller heap , is @xmath1 .",
    "all these costs are paid for from the _ heap _ credits of the smaller heap , before it is destroyed .",
    "it follows that the _ meld _",
    "operation pays nothing ; everything is taken care of by others .",
    "we think about the two - pass pairing as being performed in steps . at the @xmath21-th step ,",
    "the pair of trees that is the @xmath21-th pair from the right among the subtrees of the deleted root are linked , then the resulting tree is linked with the combined tree from the linkings of all the previous steps .",
    "each step will then involve three trees and two links .",
    "let @xmath61 be the tree resulting from the linkings of the previous steps , and let @xmath62 be the number of white nodes in @xmath61 .",
    "let @xmath63 and @xmath64 be the @xmath21-th pair from the right among the subtrees of the deleted root to be linked at the @xmath21-th step , and let @xmath65 and @xmath66 respectively be the number of white nodes in their subtrees .",
    "it follows that @xmath67 .",
    "let @xmath68 denote the tree resulting from the linking of tree @xmath43 to tree @xmath44 as its leftmost subtree .",
    "see figure [ fig2 ] .",
    "we distinguish between four cases , according to the types of the roots of @xmath63 and @xmath64 and who wins the comparison .    1",
    ".   both roots are _ inactive _ : + there was no potential on the two links that were cut , and no potential is either required on the new links .",
    "the actual cost of this step is paid for from the released _ active - parent _ credits , as these two roots were children of an _ active _ parent and at least one of them is not any more .",
    "an _ active _ root is linked to an _ inactive _ root , and @xmath69 : + the potential that was related to the active root before the operation is enough to cover the potential of the new link with @xmath61 . if the leftmost child of the _ inactive _ root was _ inactive _ before the link , the _ active - run _ credits need to be increased by @xmath1 . as for the previous case ,",
    "these possibly - needed extra credits and the actual cost of the step are paid for from the released _ active - parent _ credits .",
    "+ 3 .   1 .",
    "both roots are _ active _ : + the _ active - run _ credits may need to be increased by @xmath1 . + the potential on the two links that are cut at the @xmath21-th step was + @xmath70 + we consider the four possibilities : + 1 .",
    "@xmath71 : + the potential on the new links is @xmath72 the difference in potential is @xmath73 2 .",
    "@xmath74 : + the potential on the new links is @xmath75 the difference in potential is @xmath76 3 .",
    "@xmath77 : + the potential on the new links is @xmath78 the difference in potential is @xmath79 4 .",
    "@xmath80 : + the potential on the new links is @xmath81 the difference in potential is @xmath82 2 .",
    "one root is _ active _ and the other is _ inactive _ , and @xmath83 : + the _ active - run _ credits may need to be increased by @xmath1 .",
    "+ since either @xmath65 or @xmath66 equals zero , we use @xmath84 for the other value . + the potential on the cut links is @xmath85 + the potential on the new links is @xmath86 +",
    "the difference in potential is @xmath87 + - : :    if @xmath88 , then    @xmath89 .",
    "then , for all the    above sub - cases , the change in potential is less than    @xmath90 .",
    "this released potential is used to pay for the    possibly - required increase in the _ active - run _ credits , in addition to    the actual work done at this step .",
    "- : :    if @xmath91 , we call this step a bad step . for    all the above sub - cases ,",
    "the change in potential resulting from all    bad steps is at most @xmath92    ( taking the summation for positive terms only , i.e.    @xmath93 ) . since @xmath94    when @xmath95 , the sum of the changes in potential for all    steps telescopes to @xmath2 .",
    "it remains to account    for the actual work done at the bad steps . since    @xmath67 , a bad step results in    @xmath96",
    "then , the number of bad    steps is @xmath2 .",
    "it follows that the increase in the    _ active - run _ credits and the actual work done at bad steps is    @xmath97 for each _ delete - min _ operation .",
    "an _ inactive _ root is linked to an _ active _ root , and @xmath69 : + the potential that was related to the active root before the operation is enough to cover the potential of the new link with @xmath61 . to cover the actual work done in such step ,",
    "consider the two steps that follow it . if those two steps are of the same type as this step , the number of _ active - runs _ decreases ( at least one _ inactive _ node is taken out of the way of two _ active - runs _ ) and such released credits are used to pay for all three steps ( this is similar to iacono s _ triple - white _ notion in his potential function @xcite ) .",
    "otherwise , one of those two steps will pay for the current step as well .    from the above case analysis",
    ", it follows that the amortized cost of the _ delete - min _ operation is @xmath2 .",
    "the main difference between our implementation and the standard implementation of the pairing heaps is the _ clean - up _ procedure .",
    "we chose to perform the _ clean - up _ before the _ delete - min _ operation , and to apply it to the smaller heap before the _ meld _ operation .",
    "the following variations are as well possible :    * it is possible to periodically perform the _ clean - up _ , once the number of decreased nodes reaches @xmath11 following a _ decrease - key _ operation .",
    "this assures that when the _ clean - up _ is performed prior to _ delete - min _ operations , there will be only @xmath2 decreased nodes ( one group ) . *",
    "it is possible not to call _ clean - up _ prior to _",
    "operations , and to do all the work prior to _ delete - min _ operations instead . * in @xcite",
    ", fredman stated that the cost of @xmath98 pairing - heap operations , including @xmath99 _ delete - min _ operations , is @xmath100 .",
    "this bound implies a constant cost for the _ decrease - key _ operation when @xmath101 , for any constant @xmath102 .",
    "this suggests that , when the number of the decreased nodes is large enough , we perform the _ clean - up _ by cutting each of the affected subtrees and directly linking it with the main tree ( similar to the standard pairing - heaps implementation ) .",
    "we have given a variation of the pairing heaps that achieves the same amortized bounds as fibonacci heaps , except for _ decrease - key _ ( which still matches fredman s lower bound for , what he calls @xcite , a generalized pairing heap ) .",
    "three important open questions are :    * is there a self - adjusting heap that achieves amortized @xmath103 _ decrease - key _ cost ? *",
    "is it possible that the original implementation of the pairing heaps has the same bounds as those we achieve in this paper ? * which heap performs better in practice ?",
    "b. moret and h. shapiro .",
    "_ an empirical assessment of algorithms for constructing a minimum spanning tree . _",
    "dimacs monographs in discrete mathematics and theoretical computer science 15 ( 1994 ) , pp",
    ".  99 - 117 ."
  ],
  "abstract_text": [
    "<S> improving the structure and analysis in @xcite , we give a variation of the pairing heaps that has amortized zero cost per meld ( compared to an @xmath0 in @xcite ) and the same amortized bounds for all other operations . </S>",
    "<S> more precisely , the new pairing heap requires : no cost per meld , @xmath1 per find - min and insert , @xmath2 per delete - min , and @xmath3 per decrease - key . </S>",
    "<S> these bounds are the best known for any self - adjusting heap , and match the lower bound proven by fredman for a family of such heaps . </S>",
    "<S> moreover , our structure is even simpler than that in @xcite .    </S>",
    "<S> .4 in </S>"
  ]
}