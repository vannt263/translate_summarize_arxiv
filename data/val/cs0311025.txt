{
  "article_text": [
    "as computational grids [ 1 ] become more widespread , both the resource pool and the pool of users wishing to use those resources become large and tend to change dynamically . in such an environment ,",
    "the traditional mode of resource sharing , requiring grid users to establish direct relationships with resources they wish to use ( i.e. in the form of user accounts ) , becomes unmanageably complex .",
    "we therefore observe a trend toward defining virtual organizations ( vos ) [ 1 ] allowing users to collaborate across different administrative domains .",
    "credentials issued by such organizations , used in conjunction with resource provider policies , become the basis of sharing in grids . in this model ,",
    "resource providers typically outsource some subset of their policy administration to the vo .",
    "this strategy allows the vo to coordinate policy across resources in different domains forming a consistent policy environment in which its participants can operate .",
    "such an environment requires mechanisms for enabling the vo to specify and enforce vo - specific policies on tasks and resources owned by vo participants .",
    "another developing trend is the need to express and enforce fine - grain policies on the usage of resources and services .",
    "these can no longer be expressed by simple access control ; resource owners and vo administrators may want to specify exactly what fractions or configurations of resource may be used by a given entity . in addition , while some vos are focused on sharing of hardware resources ( e.g. , cpus and storage ) , for others the primary motivation is to coordinate sharing of application services [ 2 ] requiring access to both software and hardware . in these cases",
    "the vo members should not be running arbitrary code but only applications sanctioned by vo policy .",
    "such policies may be dynamic , adapting over time or even changing during application execution , depending on factors such as past and current resource utilization record , a member s role in the vo , deadline - based priorities .    in this paper",
    ", we address the requirements posed by these two trends .",
    "we present a design for service and resource management that enables a vo and resource managers to specify fine - grained service and resource usage policies using vo credentials and allows resources to enforce those policies .",
    "we implement our design as extensions to the globus toolkit version 2 ( gt2 ) resource management mechanism [ 3 ] .",
    "we then consider policy enforcement in the context of two types of policy target : application services and traditional computing resources .",
    "a prototype of this implementation , combined with the akenti authorization system [ 4 ] , was demonstrated at the sc02 conference and is currently being adopted by the national fusion collaboratory [ 2 ] .",
    "this paper is organized as follows . in section 2 ,",
    "we present a use case scenario and concrete requirements guiding our design . in section 3",
    "we define our problem .",
    "we follow this by a discussion of the capabilities of the globus toolkit s resource management ( gram ) [ 3 ] mechanism ( section 4 ) and describe extensions needed to gram to support our architecture ( section 5 ) . in the last three sections , we analyze our solution , present future directions , and conclude the paper .",
    "in a typical vo scenario , a resource provider has reached an agreement with a vo to allow the vo to use some resource allocation .",
    "the resource provider thinks of the allocation in a coarse - grained manner : the provider is concerned about how many resources the vo can use as a whole , not about how allocation is used inside the vo .",
    "the finer - grained specification of resource usage among the vo participants is the responsibility of the vo .",
    "for example , the vo has two primary classifications of its members :    1 .",
    "one group is developing , installing , and debugging the application services used by the vo to perform a scientific computation .",
    "this group may need to run many types of processes ( e.g. , compilers , debuggers , applications services ) in order to debug and deploy the vo application services , but should be consuming small amounts of traditional computing resources ( e.g. , cpu , disk and bandwidth ) in doing so .",
    "2 .   the second group performs analysis using the application services .",
    "this group may need to consume large amounts of resources in order to run simulations related to their research .",
    "thus , the vo may wish to specify finer - grained policies that allow certain users to use more or fewer resources than other users .",
    "these policies may be dynamic and change at any point ( for example , during runtime of an application ) .",
    "in addition to policy on resource utilization , the vo wishes to be able to manage jobs running on vo resources .",
    "for example , users often have long - running computational jobs using vo resources , which the vo often has short - notice high - priority jobs that require immediate access to resources .",
    "this mode of operation requires suspending existing jobs to free up resources , something that normally only the user that submitted the job has the right to do . since going through the user who submitted the original job",
    "may not always be an option , the vo wants to give a group of its members the ability to manage any jobs using vo resources so they can instantiate high - priority jobs on short notice .    supporting this scenario places several requirements on the authorization policy system :    1 .   _",
    "combining policies from different sources_. in outsourcing a portion of the policy administration to the vo , the policy enforcement mechanism on the resource needs to be able to combine policies from two different sources : the resource owner and the vo .",
    "fine - grained control of how resources are used_. for the vo to express the differences between how its user groups are allowed to use resources , the vo needs to be able to express policies regarding a variety of aspects of resource usage , not just grant access .",
    "_ vo - wide management of jobs and resource allocations_. the vo wants to be able to treat jobs as resources themselves that can be managed .",
    "this requirement poses a particular challenge because jobs are dynamic , so static methods of policy management are not effective .",
    "users may also start jobs that should nt be under the domain of the vo ; for example , a user may have allocations on a resource other than those obtained through the vo , and jobs invoked under this alternate allocation should not be subject to vo policy .",
    "4 .   _ fine - grained , dynamic enforcement mechanisms_. in order to support any policies , there must be enforcement mechanisms capable of implementing these policies .",
    "most resources today are capable of policy enforcement at the user level : that is , all jobs run by a given user will have the same policy applied to them .",
    "these mechanisms are typically statically configured through file permissions , quotas and similar mechanisms .",
    "our scenario brings out the requirement that enforcement mechanisms need to handle dynamic , fine - grained policies .",
    "to support the scenario described in the preceding section , we need to provide resource management mechanisms that allow the specification and consistent enforcement of authorization and usage policies that come from both the vo and the resource owner .",
    "in addition to allowing the vo to specify policies on standard computational resources , such as processor time and storage , we need to allow the vo to specify policies on application services that it deploys , as well as long - running computational jobs instantiated by vo members .    in our work we assume the following interaction model :    1 .",
    "a user submits a request , composed of the job s description to initiate a job .",
    "the request is accompanied by the user s grid credentials , which may include the user s personal credentials as well as vo - issued credentials .",
    "this request is evaluated against both local and vo policies by different policy evaluation points ( peps ) , capable of interpreting the vo and the resource management policy respectively , located in the resource management facilities .",
    "if the request is authorized by both peps , it is mapped to a set of local resource credentials ( e.g. , a unix user account ) .",
    "policy enforcement is carried out by local enforcement mechanisms operating based on local credentials .",
    "4 .   during the job execution , a vo",
    "user may make management requests to the job ( e.g. , request information , suspend or resume a job , cancel a job ) .",
    "the globus toolkit provides mechanisms for security , data management and movement , resource monitoring and discovery ( mds ) and resource acquisition and management . in this paper",
    "we are focusing on the functionality of resource acquisition and management , which is implemented by the gram ( grid resource acquisition and management ) system [ 3 ] .",
    "the gram system has two major software components : the gatekeeper and the job manager .",
    "the gatekeeper is responsible for translating grid credentials to local credentials ( e.g. , mapping the user to a local account based on their grid credentials ) and creating a job manager instance to handle the specific job invocation request .",
    "the job manager instance ( jmi ) is a grid service that instantiates and then provides for the ability to manage a job .",
    "figure 1 shows the interaction of these elements ; in this section we explain their roles and limitations .",
    "the gatekeeper is responsible for authenticating the requesting grid user , authorizing their job invocation request and determining the account in which their job should be run .",
    "authentication , performed by the grid security infrastructure [ 5 ] , verifies the validity of the presented grid credentials , the user s possession of those credentials , and the user s grid identity as indicated by those credentials .",
    "authorization is based on the user s grid identity and a policy contained in a configuration file , the gridmapfile , which serves as an access control list .",
    "mapping from the grid identity to a local account is also done with the policy in the gridmapfile , effectively translating the user s grid credential into a local user credential .",
    "finally , the gatekeeper starts up a job manage instance , executing with the user s local credential .",
    "this mode of operation requires the user to have an account on the resource and implements enforcement by privileges of the account .",
    "the jmi parses the user s request , including the job description , and interfaces with the resource s job control system ( e.g. , lsf , pbs ) to initiate the user s job . during the job s execution the jmi monitors its progress and handles job management requests ( e.g. , suspend , stop , query ) from the user .",
    "since the jmi is run under the user s local credential , as defined by the user s account , the operating system and local job control system are able to enforce local policy on the jmi and user job by the policy tied to that account .",
    "the jmi has no authorization on job startup since the gatekeeper has already authorized it .",
    "once the job has been started however , the jmi accepts , authenticates , and authorizes management requests on the job . in gt2 ,",
    "the authorization policy on these management requests is static and simple : the grid identity of the user making the request must match the grid identity of the user who initiated the job .",
    "the current gram architecture has a number of shortcomings when matched against the requirements we laid out in section 2 :    1 .",
    "authorization of user job startup is coarse - grained .",
    "it is based solely on whether a user has an account on a resource .",
    "2 .   authorization on job management is coarse - grained and static . only the user who initiated a job is allowed to manage it .",
    "enforcement is implemented chiefly through the medium of privileges tied to a statically configured local account ( jmi runs under local user credential ) and is therefore useless for enforcing fine - grained policy or dynamic policy coming from sources external to the resource ( such as a vo ) .",
    "4 .   local enforcement depends on the rights attached to the user s account , not the rights presented by the user with a specific request ; in other words , the enforcement vehicle is largely accidental .",
    "a local account must exist for a user ; as described in the introduction , this creates an undue burden on system administrators and users alike .",
    "this burden prevents wide adoption of the network services model in large and dynamically changing communities .",
    "these problems can , and have been , in some measure alleviated by clever setup . for example , the impact of ( 4 ) can be alleviated by mapping a grid identity to several different local accounts with different capabilities .",
    "often , ( 5 ) is handled by working with `` shared accounts '' ( which , however , introduce many security , audit , accounting and other problems ) or by providing a limited implementation of dynamic accounts [ 6,13,14 ] .",
    "in this section we describe extensions to the gt2 grid resource acquisition and management ( gram ) that address the shortcomings described above .",
    "we extended the gram design to allow authorization callouts , evaluating the user s job invocation and management requests in the context of policies defined by the resource owner and vo .",
    "our changes to gram , prototyped using gt2 , are illustrated in figure 2 . in our prototype",
    "we experimented with policies written in plain text files on the resource .",
    "these files included both local resource and vo policies ( in a real system the vo policies would be carried in the vo credentials ) .",
    "this work has recently been tested with the akenti [ 4 ] system , representing the same policies as described here , and is being adopted by the national fusion collaboratory [ 2 ] . in order to show the generality of our approach , we also experimented with the community authorization service ( cas ) [ 7 ] . both of these systems allow for multiple policies sources but have significant differences , in terms of both architecture and programming apis .",
    "gram allows users to start and manage jobs by submitting requests composed of an action , ( e.g. , initiate , cancel , provide status , change priority ) and , in the case of job initiation , a job description .",
    "the job description is formulated in terms of attributes using the resource specification language ( rsl ) [ 3 ] .",
    "rsl consists of attribute value pairs specifying job parameters referring to executable description ( executable name , directory where it is located , etc . ) and resource requirements ( number of cpus to be used , maximum / minimum allowable memory , maximum time a job is allowed to run , etc . ) .",
    "we have designed a simple policy language that allows for policy specification in terms of rsl .",
    "the policy assumes that unless a specific stipulation has been made , an action will not be allowed .",
    "otherwise , a user , or a group of users , is related to a set of assertions .",
    "the rules have the form of user ( or group ) identity separated by a colon from a set of action based assertions that follow the rsl syntax .",
    "to express the rules , we extended the rsl set of attributes with the addition of the following :    1 .",
    "_ this attribute represents what the user wants to do with the job .",
    "currently , it can take values of `` start '' , `` cancel '' , `` information '' , or `` signal '' , where `` signal '' describes a variety of job management actions such as changing priority .",
    "2 .   _ jobowner . _",
    "the jobowner attribute denotes the job initiator and can take values of the distinguished name of a job initiator s grid credential .",
    "it is used mainly to express vo - wide management policy .",
    "_ jobtag . _",
    "the jobtag attribute has been introduced in order to enable the specification of vo - wide job management policies .",
    "a jobtag indicates the job membership in a group of jobs for which policy can be defined .",
    "for example , a set of users with an administrative role in the vo can be granted the right to manage all jobs in a particular group .",
    "a policy may require a vo user to submit a job with a specific jobtag , hence placing it into a group that is manageable by another user ( or group of users ) .",
    "at present , jobtags are statically defined by a policy administrator .",
    "we also added the following values to rsl :    1 .   ",
    "null  to denote a nonempty value 2 .",
    " self  to allow expression of the job initiator s identity in a policy .",
    "these extensions allow the following types of assertions to be expressed in policy :    1 .",
    "the job request is permitted to contain a particular attribute , value , or set of values .",
    "this extension allows one , for example , to limit the maximum number of processors used or to restrict the name of the executable to a specified set .",
    "multiple assertions can be made about the same attribute .",
    "the job request is required to contain a particular attribute , possibly with a particular value or set of values .",
    "for example , the job request must specify a jobtag attribute to allow its management by a vo - defined group of administrators .",
    "the job request is required not to contain a particular attribute .",
    "for example , the job request must not specify a particular queue , which is reserved for high - priority users .",
    "our extensions allow a policy not only to limit the usage of traditional computational resources but also to dictate the executables they are allowed to invoke , allowing a vo to limit resource consumption .",
    "further , by introducing the notion of a jobtag , we are able to express policies allowing users to manage jobs .",
    "the example below illustrates how policy may be expressed .    .... & /o = grid / o = globus / ou = mcs.anl.gov :   ( action = start)(jobtag !",
    "= null )    /o = grid / o = globus / ou = mcs.anl.gov / cn= bo liu : & ( action = start)(executable = test1)(directory =",
    "/sandbox / test)(jobtag = ads)(count<4 ) & ( action = start)(executable = test2)(directory = /sandbox / test)(jobtag = nfc)(count<4 )",
    "/o = grid / o = globusou = mcs.anl.gov / cn= katekeahey : & ( action = start)(executable = transp)(directory = /sandbox",
    "/ test)(jobtag = nfc ) & ( action = cancel)(jobtag = nfc ) ....    the first statement in the policy specifies a requirement for a group of users whose grid identities start with the string `` /o = grid / o = globus / ou = mcs.anl.gov '' .",
    "the requirement is that for job invocations ( where the action is `` start '' ) , the job description must contain a jobtag attribute with some value .",
    "this allows us to later write management policies referring to that jobtag .",
    "the second statement in the policy refers to a specific user , bo liu , and states that she can start jobs only using the `` test1 '' and `` test2 '' executables .",
    "the rules also place constraints on the directory from which the executable can be taken and the jobtag they can be started with .",
    "in addition , a constraint is placed on the number of processors bo liu can use ( @xmath0 ) .",
    "the third statement in the policy gives user kate keahey the right to start jobs using the `` transp '' executable from a specific directory and with a specific jobtag .",
    "it also gives her the right to cancel all the jobs with jobtag `` nfc '' , for example , jobs based on the executable `` test1 '' started by bo liu .",
    "we enforce our policies in gram by creating a policy evaluation point ( pep ) controlling all external access to a resource via gram ; an action is authorized depending on decision yielded by the pep .",
    "policy can be enforced in gram at multiple peps corresponding to different decision domains ; for example , a pep placed in the gatekeeper can allow or disallow access based on the user s grid identity . since our work focuses on job and resource management , we established a pep in the job manager ( jm ) .",
    "the jm parses user job descriptions and can therefore evaluate policy that depends on the nature of the job request in addition to the user s identity .",
    "specifically , our additions consist of the following :    1 .   _",
    "an authorization callout api to integrate the pep with the jm_. the callout passes to the pep authorization module the relevant information , such as the credential of the user requesting a remote job , the credential of the user who originally started the job , the action to be performed ( such as start or cancel a job ) , a unique job identifier , and the job description expressed in rsl .",
    "the pep responds through the callout api with either success or an appropriate authorization error .",
    "this call is made whenever an action needs to be authorized , that is , before creating a job manager request and before calls to cancel , query , and signal a running job .",
    "policy - based authorization for job management_. as discussed in section 4 , each job management request other than job startup is currently authorized by gram so that only the user that started a job is allowed to manage it .",
    "we modified the authorization in gram to enable grid users other than the job initiator to manage the job based on policy with decisions rendered through the authorization callout api .",
    "in addition to changes to the authorization model , this modification also required extensions to the gram client allowing the client to process other identities than that of the client ( specifically , allowing it to recognize the identity of the job originator ) .",
    "rsl parameters_. we extended rsl to add the `` jobtag '' parameter allowing the user to submit a job to a specific job management group .",
    "errors_. we further extended the gram protocol to return authorization errors describing reasons for authorization denial as well as authorization system failures .",
    "for easy integration of third - party authorization solutions , the callout api provides facilities for runtime configurable callouts .",
    "callouts can be configured either through a configuration file or an api call .",
    "configuration consists of specifying an abstract callout name , the path to the dynamic library that implements the callout , and the symbol for the callout in the library .",
    "callouts are invoked through runtime loading of dynamic libraries using gnu libtool s dlopen - like portability library .",
    "arguments to the callout are passed by using the c variable argument list facility .",
    "the insertion of callout points into jm required defining a gram authorization callout type , ( i.e. , an abstract callout type ) , the exact arguments passed to the callout , and a set of errors the callout may return .",
    "these callout points are configured by parsing a global configuration file .",
    "our solution overcame some of the shortcomings outlined in section 4.3 .",
    "however our approach has a number of outstanding issues that we discuss in this section .",
    "a weakness of the gateway approach is that once a gateway authorizes an action ( for example , a job execution ) it is no longer involved in the continuous enforcement of the policy .",
    "gram maps incoming requests to static local accounts to perform this continuous policy enforcement .",
    "this has two consequences : ( 1 ) the local policy enforcement depends on the privileges tied to the account that the user maps to on the local system , rather than to the credential with which the request was made , and ( 2 ) gram s abilities for continuous policy enforcement are limited by local capabilities for policy enforcement .",
    "the first limitation could to some extent , be dealt with by using dynamic accounts [ 6,13,14 ] .",
    "dynamic accounts are accounts created and configured on the fly by a resource management facility .",
    "this enables the resource management system to run jobs on a system for users that do not have an account on that system , and it also enables account configuration relevant to policies for a particular resource management request as opposed to a static user s configuration . to some extent",
    "a dynamic account can be also used as a sandbox on the user s rights ( by modifying user s group membership to control file system access , for example ) .",
    "although work has been done to support fine - grained policy for file access [ 8 ] , unix accounts allow the user to modify only very few configuration parameters , and hence the enforcement implemented in an account is coarse - grained .",
    "a sandbox is an environment that imposes restrictions on resource usage [ 9,15,16 ] .",
    "sandboxing represents a strong enforcement solution , having the resource operating system act as the policy evaluation and enforcement modules , and is complementary to the gateway approach .",
    "however , while the sandboxes provide a solution with relatively high degree of security , they are hard to implement portably and may introduce a performance penalty .      in the gram architecture ,",
    "the job manager runs with the user s local credentials ; this approach makes the job manager less than ideal for policy enforcement .",
    "the reasons are twofold .",
    "first , from the security perspective it is vulnerable to user tampering that could result in changes in policy enforcement .",
    "second , it effectively limits enforcement potential for vo - wide job management .",
    "for example , a user managing a job may cancel a job started by somebody else ( by virtue of the fact that the job manager is running with the job initiator s local credential ) , but the user may not apply higher resource rights to , for example , raise the job s priority .",
    "one possible solution to this problem in the context of the gram architecture would be to locate the policy enforcement point in the gatekeeper .",
    "however , this would increase the vulnerability of the system by placing more complex code into the trusted component of the system , increasing chances for logic errors , buffer overflows , and so forth",
    ".    another possibility would be for policy enforcement to be done by trusted services such as the local operating system .",
    "as discussed earlier , this is difficult today because most operating systems do not have the support for fine - grained policies that we require .",
    "investigation into sandboxing techniques remains an open research issue .",
    "our implementation currently expresses policy in terms of the same resource specification language ( rsl ) that gram uses to describe jobs .",
    "while this allows for easy comparison of a job description with a policy , it is not a standard policy language .",
    "policy administrators are not familiar with rsl , and our initial experiences show that expressing policies in these terms is not natural to this community .",
    "this difficulty is compounded by the fact that the syntax is not be supported by standard policy tools .",
    "we are therefore investigating existing policy languages as a replacement to our rsl - based scheme . with the merging of grid technologies and web service - based technologies in ogsa[10 ] , languages based on xml , such as xacml [ 11 ] and xrml [ 12 ] , are being scrutinized by the grid security community in general and are viable candidates .",
    "our work could be applied to systems similar to the globus toolkit based on its relevance .",
    "for example , legion authorization is implemented by the use of a mayi [ 20 ] method on all legion objects . in the default implementation , this method offers similar functionality as the globus toolkit , with access control lists and static mapping to local accounts .",
    "our work could be integrated with legion in a similar manner as we described here , through the reimplementation of object creation routines ( legion s equivalent of gram ) and the mayi method .",
    "condor s [ 21 ] interface on the other hand , is based more on compute resources than instantiated jobs .",
    "although it also uses access control lists to manage its policy , it does not provide the per - job interface of gram and legion .",
    "this makes our work less relevant to that system .",
    "to address the open issues summarized above , we are developing an architecture building on abstractions and mechanisms defined as part of the open grid services infrastructure ( ogsi ) [ 17 ] .",
    "the key to the policy enforcement questions is the implementation of an abstraction that would allow for dynamic creation and management of a local protection environment ( such as a unix account , a sandbox [ 9,15,16 ] , or a virtual machine [ 18 , 19 ] ) .",
    "such abstraction would not only provide protection but also facilitate resource management ( by enforcing limits on resource usage for a particular user ) and maintain state associated with its owner .",
    "we will call such an abstraction a _ dynamic session_.    the ogsi abstractions of grid service and grid service factory are suitable for this task of implementing such abstraction . representing",
    "a session as a gird service will provide uniform management capabilities across different technologies that could be used to implement sessions .",
    "standardizing session creation alleviates the administrative burden involved in adding users to a vo , and it also allows session creation based on rights granted to a particular user at a specific time . to manage dynamic sessions",
    ", we can leverage the ogsi service data element ( sde ) mechanism in order to make the properties of a session ( such as its termination time ) accessible to the session owner and modifiable by him or her .    in a typical interaction ,",
    "a user requests a session with certain properties ( i.e. , resource requirements ) from a session factory .",
    "the factory authorizes the request and , on success , creates dynamic session service and a local protection environment corresponding to it . as part of the creation process",
    ", policy defining sharing rights for the session is written .",
    "this policy can be modified by authorized entities during the service s lifetime , as can other session properties .",
    "the user can submit against that session , pending conformance with the rights just created .",
    "further , to facilitate management of sessions that do not have to be reused multiple times ( i.e. , do not preserve state between the times when they get used ) , the resource management service can obtain sessions based on credentials presented by the user requesting job submission or credentials of the resource manager itself .",
    "we have described the design and implementation of an authorization system allowing for enforcement of fine - grained policies and vo - wide management of remote jobs . to implement this design , we have proposed changes to the globus toolkit gram design and have designed a policy language suitable for our needs .",
    "we are planning to use the same mechanism to provide pluggable authorization in other components of the globus toolkit .",
    "we are pleased to acknowledge contributions to this work by mary thompson of lbnl .",
    "1 .   foster , i. , c. kesselman , and s. tuecke , the anatomy of the grid : enabling scalable virtual organizations . international journal of high performance computing applications , 2001 .",
    "15(3 ) : p. 200 - 222 . 2 .",
    "keahey , k. , t. fredian , q. peng , d.p .",
    "schissel , m. thompson , i. foster , m. greenwald , and d. mccune , computational grids in action : the national fusion collaboratory .",
    "future generation computing systems ( to ap - pear ) , october 2002 .",
    "18(8 ) : p.",
    "1005 - 1015 . 3 .",
    "czajkowski , k. , i. foster , n. karonis , c. kesselman , s. martin , w. smith , and s. tuecke , a resource management architecture for meta - computing systems , in 4th workshop on job scheduling strategies for parallel processing .",
    "1998 , springer - verlag .",
    "p. 62 - 82 .",
    "4 .   thompson , m. , w. johnston , s. mudumbai , g. hoo , k. jackson , and a. essiari , certificate - based access control for widely distributed resources , in proc .",
    "8th usenix security symposium . 1999 .",
    "butler , r. , d. engert , i. foster , c. kesselman , s. tuecke , j. volmer , and v. welch , design and deployment of a national - scale authentication infrastructure .",
    "ieee computer , 2000 .",
    "33(12 ) : p. 60 - 66 . 6 .",
    "dynamic accounts .",
    "http://www.gridpp.ac.uk / gridmapdir/. 7 .",
    "pearlman , l. , v. welch , i. foster , c. kesselman , and s. tuecke , a community authorization service for group collaboration .",
    "in ieee workshop on policies for distributed systems and networks . 2002 . 8 .",
    "lorch m. and d. kafura , supporting secure ad - hoc user collaboration in grid environments . in proceedings of the 3rd int .",
    "workshop on grid computing - grid 2002 , baltimore , md , usa . 2002 .",
    "chang , f. , a. itzkovitz , and v. karamacheti , user - level resource - constrained sandboxing .",
    "proceedings of the usenix windows systems symposium ( previously usenix - nt ) , 2000 . 10 .",
    "foster , i. , c. kesselman , j. nick , and s. tuecke , the physiology of the grid : an open grid services architecture for distributed sys - tems integration .",
    "open grid service infrastructure wg , global grid forum , 2002 .",
    "11 . oasis extensible access control markup language ( xacml ) committee specification 1.0 ( revision 1 ) .",
    "http://www.oasis-open.org/committees/xacml/docs/s-xacml-specification-1.0-1.doc , 2002 .",
    "hacker , t. and b. athey , a methodology for account management in grid computing environments .",
    "proceedings of the 2nd international workshop on grid computing , 2001 . 14 .",
    "kapadia , n. h. , r. j. figueiredo , and j. fortes . enhancing the scalability and usability of computational grids via logical user accounts and virtual file systems .",
    "in 10th heterogeneous computing workshop . 2001 .",
    "san francisco , california .",
    "bosilca , g. , f. capello , a. djilali , g. fedak , t. hernault and f. magniette , performance evaluation of sandboxing techniqes for peer - to - peer computing . 16 .",
    "goldberg , i. , d. wagner , r. thomas , and e. brewer , a secure environment for untrusted helper applications  confining the wily hacker , in proc . 1996 usenix security symposium .",
    "1996 . 17 .",
    "tuecke , s. , k. czajkowski , i. foster , j. frey , s. graham , and c. kesselman , grid service specification . 2003 : open grid service infrastructure wg , global grid forum . 18 .",
    "vmware : http://www.vmware.com/. 19 .",
    "user mode linux ( uml ) .",
    "http://user - mode - linux.sourceforge.net/. 20 .",
    "humphrey , m. , f. knabe , a. ferrari and a. grimshaw , accountability and control of process creation in metasystems .",
    "2000 network and distributed system security symposium , 2000 . 21 .",
    "`` condor version 6.4.7 manual : security in condor '' , + http://www.cs.wisc.edu/condor/manual/v6.4/3_7security_in.html , 2003 ."
  ],
  "abstract_text": [
    "<S> in this paper we describe our work on enabling fine - grained authorization for resource usage and management . </S>",
    "<S> we address the need of virtual organizations to enforce their own polices in addition to those of the resource owners , in regard to both resource consumption and job management . to implement this design , we propose changes and extensions to the globus toolkit s version 2 resource management mechanism . </S>",
    "<S> we describe the prototype and the policy language that we designed to express fine - grained policies , and we present an analysis of our solution . </S>"
  ]
}