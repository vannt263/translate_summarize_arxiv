{
  "article_text": [
    "idea of network coding over error - free networks , pioneered in @xcite , has been a subject of active current research .",
    "the general idea of linear network coding , where intermediate nodes linearly combine incoming packets , was explored in @xcite .",
    "a simple and effective algebraic formulation of the general network coding problem was introduced in @xcite .",
    "this established a direct connection between a network information flow problem and an algebraic variety over the closure of a finite field .    using the formulations of @xcite ,",
    "the multicast network coding problem , where one source transmits at the same rate to a set of sinks , has been characterized almost completely .",
    "a linear network code exists for the multicast case in a large enough finite field and can be found in polynomial time @xcite .",
    "the insufficiency of linear coding in the non - multicast case has been demonstrated in @xcite .",
    "recent work in @xcite and @xcite has shown the restrictions imposed on the field characteristic for the scalar linear solvability of a general network coding problem .",
    "see @xcite for more non - multicast examples .    in the algebraic view , the network code is seen as a variety specified by a system of polynomial equations in multiple variables taking values from a finite field @xcite@xcite . to derive the equations corresponding to a given network coding problem , edge - to - edge gains are assigned as variables . for every node , the flow on outgoing edges is written down in terms of the flows on the incoming edges using the edge - to - edge gains .",
    "the flow propagates in this manner from the sources to the sinks .",
    "the output from the sink is equated to its demand , and polynomial equations in the edge - to - edge gains are obtained .    in this work ,",
    "we propose a method to derive the equations using path gains as the variables .",
    "the gain on every source to sink path becomes a variable in the proposed formulation . in the method of @xcite ,",
    "the path gain would be a product of several edge - to - edge gain variables .",
    "the advantage of the path gain formulation is that the final equations are only linear and quadratic , as shown in the remainder of this article . because of the low degree and the inherent nature of the scalar linear network coding problem , simplification is readily possible for the system of equations .",
    "we provide an algorithm to compute the equations in the path gain formulation , and demonstrate the efficacy of the path gain approach by illustrative examples . starting with the butterfly network and other interesting small - sized network coding problems , we show that the path gain approach provides results on solvability of the problem . on a larger network ( with 87 nodes and 161 edges ) , we show how the path gain approach continues to provide solutions to some network coding problems .",
    "the path gain formulation is equivalent to the edge - to - edge gain formulation and can be derived from it .",
    "therefore , the work presented in this article is a method to simplify the equations generated by the edge - to - edge gain variable assignment .",
    "while the number of variables in the edge - to - edge formulation is of the order of the number of edges , the number of monomial terms in these variables is exponential in the number of edges .",
    "hence , the polynomial system is of size that can be exponential in the size of the network .",
    "assigning variable names to the paths ( which can be exponential in the size of the network in number ) does not necessarily make the path gain formulation more complex than the edge - to - edge gain formulation as far as solving the equations is concerned .",
    "however , in an actual implementation , the edge - to - edge gains are to be used . to complete the path gain formulation , we provide an algorithm to compute the edge - to - edge gains from the path gains .",
    "though there are several other standard methods to simplify systems of polynomial equations ( such as grbner basis methods ) , many problems in the area of solving systems of polynomial equations ( and in network coding with multiple sources and sinks ) are either np - hard or undecidable . in this light , the path gain formulation appears to be simpler than the edge - to - edge formulation in the sense that simplifications and solutions are easier in several examples ( both small and large ) .",
    "several methods and techniques to study the network coding problem have been introduced by many researchers in this area that has seen intense recent research activity . following the information - theoretic methods in @xcite ,",
    "more information - theoretic methods were used for characterizing network coding for multimessage unicasts in @xcite .",
    "the algebraic formulation in @xcite provided an elegant and powerful method to study network coding .",
    "random network coding @xcite , which is a popular choice in practical implementations , was introduced and studied using algebraic tools .",
    "the linear programming formulation has seen applications in wireless network coding @xcite and optimizing network coding with a cost criterion @xcite .",
    "the combinatorial approach , proposed and developed in @xcite and @xcite , has provided methods for studying the field sizes in network coding problems .    in the context of the prior work cited above",
    ", the path gain formulation for algebraic network coding presents the equivalence between network coding and a maximum - degree-2 system of polynomial equations for the first time .",
    "the equivalence is achieved without introducing any new monomial terms that are not present in the original system .",
    "the equations obtained from the path gain formulation are amenable to considerable simplification in several cases of interest .",
    "hence , the path gain method can provide deterministic solutions to several linear network coding problems .",
    "the method can , in some cases , provide results on solvability .",
    "the primary utility of the method is likely to be in larger examples . as an illustration , for the network ( in fig .",
    "[ isp ] ) with 87 nodes and 161 edges , we present results of solutions to certain network coding problems with multiple sources and sinks in section [ sec : bigger - example ] .",
    "the rest of this article is organized as follows .",
    "we will start with a notational description of the network coding problem in section  [ sec : nwc ] , which also introduces the edge - to - edge gain algebraic formulation of @xcite .",
    "the path gain formulation is presented in section  [ sec : transform ] , where we provide a graph transformation algorithm that is used to represent and compute the equations in a transformed graph . at the end of the section",
    ", we show how the equations derived from path gain variables are amenable to easy simplifications . in section  [ sec : example ] , we illustrate the advantages of the path gain formulation using various example networks drawn from the literature . we also provide results for a large internet service provider ( isp ) network . in section  [ sec : reverse ] , we give an algorithm ( that uses the transformed graph ) to derive the edge - to - edge gains from the path gains . finally , we provide concluding remarks in section [ sec : conclusion ] .",
    "the communication network is modeled as a directed , acyclic multigraph , @xmath0 , where the node set @xmath1 represents the terminals and switches in the network and the edge set @xmath2 represents the communication links .",
    "it is assumed that all communication links are error - free and have unit capacity .      for a given edge @xmath3 ,",
    "we denote : @xmath4    for each node @xmath5 , we define @xmath6    let us further assume the following without loss of generality :    1 .   a node @xmath7 is a source node iff @xmath8 and all source nodes produce exactly one unit of data per unit time . 2 .",
    "a node @xmath7 is a sink node iff @xmath9 and all sink nodes demand exactly one unit of data per unit time .    in cases where a node @xmath7 produces ( demands ) more than one data symbol",
    ", we can add virtual source ( sink ) nodes that produce ( demand ) exactly one data symbol , have exactly one output ( input ) link connecting them to @xmath7 and no input ( output ) links .",
    "then , the set of source and sink nodes is defined as follows : @xmath10 let the sink @xmath11 demand the @xmath12-th source . for every source @xmath13 , a virtual incoming edge @xmath14 is added for notational convenience ( as in the edge - to - edge gain formulation @xcite ) .",
    "let us now assume that we use a finite alphabet @xmath15 .",
    "for each edge @xmath16 , an edge function is then defined as a mapping @xmath17 , where @xmath18 if @xmath19 and @xmath20 otherwise . for a sink @xmath21",
    ", a virtual outgoing edge @xmath22 is added to denote the output . the edge function on this virtual edge , which is a mapping denoted @xmath23 ,",
    "is called the output function of the sink .",
    "the collection of all the edge functions in a given network is defined as a _ network code_. if all the edge functions are linear maps with respect to a field alphabet @xmath15 , then the code is a _ scalar linear code_.    let the data symbol generated at the @xmath24-th source node , @xmath25 , be denoted by @xmath26 .",
    "the data symbol demanded by the @xmath27-th sink node , @xmath28 , is @xmath29 .",
    "the sources and sinks implicitly define a set of connection requirements for the given network @xmath30 .",
    "the connection requirement is met at a sink @xmath11 if the output of the function @xmath31 equals @xmath29 for all inputs .",
    "given a network @xmath30 , the set of source nodes @xmath32 and the set of sink nodes @xmath33 , the network coding problem is to determine all the edge functions such that all the connection requirements are satisfied .",
    "if such a set of edge functions exists , then the network coding problem is _",
    "solvable_. if a set of linear edge functions ( with respect to a finite field @xmath15 ) exists that satisfies all the connection requirements , then the network coding problem is _ scalar - linearly solvable_.    in a scalar linear network coded flow ( over a field @xmath15 ) , the edge function of an edge @xmath16 can be written as @xmath34 , where @xmath35 .",
    "we refer to @xmath34 as either the edge function of @xmath16 or the symbol flowing through @xmath16 and denote it as a vector @xmath36 $ ] .",
    "similarly , the output function at the sink has a vector notation .      solving the scalar linear network coding problem",
    "was formulated as a problem of solving a system of polynomial equations by koetter and mdard in @xcite .",
    "the idea is to construct the linear edge function @xmath37 for an edge @xmath38 recursively as follows : @xmath39 where @xmath40 is an edge - to - edge gain . to start the recursion ,",
    "the edges out of a source node @xmath41 are assigned the unit coding vector with a @xmath42 in the @xmath24-th position .",
    "the edge function for the remaining edges , found using ( [ eq:1 ] ) , become vectors of polynomials in the edge - to - edge gains @xmath40 .",
    "finally , at a sink @xmath11 , the output edge function is equated to the unit vector with a @xmath42 in the @xmath12-th position .",
    "these equations form a polynomial system in the edge - to - edge gains @xmath40 for @xmath43 .",
    "the koetter - mdard algebraic formulation is illustrated for the case of the modified butterfly network shown in fig .",
    "[ fig : bflow ] with two sources and four sinks .",
    "note that the network in fig .",
    "[ fig : bflow ] is identical to the classic butterfly network under our definition of sources and sinks .",
    "the edge functions under the assignment of edge - to - edge gains ( as in @xcite ) are shown in fig .",
    "[ fig : bflow ] .",
    "( 0,0 )    # 1#2#3#4#5 @font    ( 5346,4920)(706,-4531 ) ( 2026,209)(0,0)[lb ] ( 4771,254)(0,0)[lb ] ( 2746,-376)(0,0)[lb ] ( 4051,-376)(0,0)[lb ] ( 2206,-1366)(0,0)[lb ] ( 4591,-1366)(0,0)[lb ] ( 3691,-2536)(0,0)[lb ] ( 5806,-4471)(0,0)[lb ] ( 3826,-4471)(0,0)[lb ] ( 3196,-4471)(0,0)[lb ] ( 1081,-4471)(0,0)[lb ] ( 3061,-1546)(0,0)[lb ] ( 2251,-2671)(0,0)[lb ] ( 721,-3706)(0,0)[lb ] ( 946,-3526)(0,0)[lb ] ( 4096,-3616)(0,0)[lb ] ( 2431,-3301)(0,0)[lb ] ( 2611,-3481)(0,0)[lb ] ( 3556,-3796)(0,0)[lb ] ( 5356,-3616)(0,0)[lb ] ( 4771,-3481)(0,0)[lb ]    the formulation described in @xcite gives the following 8 equations in 10 variables : @xmath44    in this work , we propose methods to simplify the algebraic formulation for the general scalar - linear network coding problem through the use of path gains as opposed to edge - to - edge gains used in @xcite .",
    "as shown in the remainder of the paper , the path gain approach results in considerable simplifications in several cases .",
    "the main idea in the proposed formulation is to use path gains instead of edge - to - edge gains as variables and obtain a system of polynomial equations .",
    "we begin by showing a derivation of the path gain formulation from the edge - to - edge gain formulation .",
    "let the output edge function at the sink @xmath11 demanding source @xmath12 be @xmath45 $ ] . if @xmath46 is a path from the source virtual incoming edge @xmath47 to the sink virtual outgoing edge @xmath48 , the polynomial @xmath49 contains a path gain term @xmath50 .",
    "conversely , each term in the polynomial @xmath49 is the gain along a path from the source edge @xmath51 to the sink edge @xmath52 .    in the proposed formulation , the path gain of a path @xmath53 from a source input virtual edge to a sink output virtual edge",
    "is assigned as a variable denoted @xmath54 .",
    "suppose there are @xmath55 paths , denoted @xmath56 ( @xmath57 ) , from @xmath51 to @xmath52 .",
    "we see that the polynomial @xmath49 can be written as @xmath58 .",
    "the proposed approach can be summarized as follows . equating the output edge function at the sinks to unit vectors , the equations in",
    "the koetter - mdard formulation become linear in the new path gain variables .",
    "we call these conditions as no - interference conditions . however , if two paths overlap in one or more edges , there are inter - relationships between the path gain variables .",
    "these inter - relationships are called edge compatibility conditions , and they turn out to be quadratic in the path gain variables .",
    "a simple description of the edge compatibility conditions is as follows .",
    "if two source - sink paths @xmath59 and @xmath60 overlap in an edge @xmath16 , we see that the relationship @xmath61 needs to be satisfied , since both sides are equal to @xmath62 .",
    "note that @xmath63 and @xmath64 are source - sink paths as well .",
    "however , several of these equations can be combined to produce the necessary set of edge compatibility conditions .",
    "this is described in more detail in the section [ sec : ecc ] .      to work with the path gain formulation for a given network and connection requirements",
    ", we need to determine source - sink paths and assign path gain variables .",
    "then , the no interference conditions and the non - trivial edge compatibility conditions have to be determined . in the remainder of this section , we provide algorithms for performing these tasks . in these algorithms ,",
    "we employ a graph transformation that is very useful in both visualizing the path gain approach and solving for the edge - to - edge gains from the path gains .",
    "an important ingredient in the algorithms is an ordering of the nodes .",
    "every directed acyclic network determines a topological order or sequencing of nodes from sources or sinks or vice versa .",
    "a standard algorithm for finding such a topological ordering of the nodes is given below @xcite for completeness .",
    "[ algo : toposort ] topological sorting + _ input _ : a directed acyclic graph , @xmath0 .    1 .",
    "associate with each node @xmath7 , a value @xmath65 that is initialized to @xmath66 .",
    "2 .   pick a node @xmath7 such that @xmath67 , do * for each edge @xmath68 , + @xmath69 .",
    "* @xmath70 * append @xmath7 to the ordering , @xmath53 .",
    "3 .   if any node has not been added to the ordering yet , go to step 2 .",
    "else terminate .    _ output _ :",
    "@xmath53 , a topological ordering of nodes .",
    "notice that the sinks occur first in the topological ordering .",
    "loosely , the ordering traverses the nodes from sinks to sources .",
    "the final algorithm that takes a network coding problem as input and outputs a set of trees that collect together all source - sink paths is given below :    graph transformation + _ input _ : a directed acyclic graph @xmath0 , set of sources @xmath32 , set of sinks @xmath33 , connection requirements @xmath71 .    1 .",
    "obtain a topological ordering @xmath53 for the graph @xmath0 using algorithm 1 .",
    "let @xmath72 .",
    "3 .   loop through the nodes @xmath5 in the order defined by @xmath53 , do * if @xmath73 , * * for each edge @xmath74 , add a new node @xmath75 to @xmath76 with one output link connecting it to @xmath77 and one input link @xmath78 for each @xmath79 such that @xmath80 . * * delete the old node @xmath7 in @xmath76 .    _ output _ : @xmath81 , a transformed network .",
    "the final transformed network is a set of @xmath82 directed trees @xmath83 such that sink @xmath11 is the root of the @xmath27-th tree .",
    "all leaf nodes in the trees are copies of one of the source nodes .",
    "there is a one - to - one correspondence between the paths from leaf nodes , which are copies of the source @xmath41 , to the root in @xmath84 and the paths from @xmath41 to @xmath11 in the original network .",
    "each node in the transformed network will have exactly one output link and the acyclic property of the graph is maintained by the transformation .",
    "the underlying undirected graph is a set of disjoint trees , because any cycle in it must imply that either the cycle is also present in the directed graph or that one of the nodes in the directed graph has more than one output link .",
    "hence , the equivalent network is made up of a set of directed trees .",
    "the transformation maintains one output link for each node in the original graph that has @xmath85 .",
    "so , the only nodes that will have @xmath9 , and hence be the roots of these trees , are the sink nodes ( which had @xmath9 to start with ) .",
    "hence , each sink would be the root of a directed tree in which all edges are directed towards this root .    also , the number of input links of a copied node in the transformed graph is equal to the number of input links possessed by the original node .",
    "so , the only nodes that will have @xmath86 , and hence be leaf nodes in these trees , are copies of the source nodes ( which had @xmath86 to start with ) .    finally , since all nodes are visited in the topological order from the sinks to the sources , all paths from the sinks to the sources will be part of the final network .",
    "this results in the one - to - one correspondence in the paths .",
    "an example of this transformation applied to the butterfly network ( fig .",
    "[ butterfly]a ) can be seen in fig .",
    "[ butterfly]b .",
    "# 1#2#3#4#5 @font    ( 9245,3339)(-599,-4003 ) ( 5941,-3166)(0,0)[lb ] ( 5941,-2671)(0,0)[lb ] ( 6751,-2761)(0,0)[lb ] ( 7381,-3256)(0,0)[lb ] ( 8011,-3706)(0,0)[lb ] ( 6661,-3526)(0,0)[lb ] ( 5311,-2581)(0,0)[lb ] ( 5311,-3391)(0,0)[lb ] ( 5311,-3931)(0,0)[lb ] ( 2431,-3706)(0,0)[lb ] ( 2431,-3211)(0,0)[lb ] ( 3241,-3301)(0,0)[lb ] ( 3871,-3121)(0,0)[lb ] ( 3286,-2671)(0,0)[lb ] ( 1846,-2581)(0,0)[lb ] ( 1846,-3031)(0,0)[lb ] ( 1846,-3931)(0,0)[lb ] ( 4591,-3031)(0,0)[lb ] ( 271,-1051)(0,0)[lb ] ( 451,-1906)(0,0)[lb ] ( 226,-2491)(0,0)[lb ] ( 856,-2491)(0,0)[lb ] ( -314,-3166)(0,0)[lb ] ( 316,-3166)(0,0)[lb ] ( 631,-3166)(0,0)[lb ] ( 1396,-3166)(0,0)[lb ] ( 811,-1051)(0,0)[lb ] ( -584,-3661)(0,0)[lb ] ( 136,-3616)(0,0)[lb ] ( 901,-3616)(0,0)[lb ] ( 1216,-3616)(0,0)[lb ] ( -134,-1726)(0,0)[lb ] ( 991,-1726)(0,0)[lb ] ( 5851,-1546)(0,0)[lb ] ( 5851,-1051)(0,0)[lb ] ( 6661,-1141)(0,0)[lb ] ( 7291,-1636)(0,0)[lb ] ( 7921,-1501)(0,0)[lb ] ( 6571,-1906)(0,0)[lb ] ( 5311,-871)(0,0)[lb ] ( 5311,-1771)(0,0)[lb ] ( 5311,-2176)(0,0)[lb ] ( 2386,-1996)(0,0)[lb ] ( 2386,-1501)(0,0)[lb ] ( 3196,-1591)(0,0)[lb ] ( 3826,-1411)(0,0)[lb ] ( 4411,-916)(0,0)[lb ] ( 3241,-961)(0,0)[lb ] ( 1801,-871)(0,0)[lb ] ( 1801,-1321)(0,0)[lb ] ( 1801,-2221)(0,0)[lb ] ( 8326,-1276)(0,0)[lb ] ( 4906,-1186)(0,0)[lb ] ( 4771,-3526)(0,0)[lb ] ( 8326,-3526)(0,0)[lb ]    to apply the graph transformation , the topological ordering of the nodes is chosen to be @xmath87 .",
    "nodes 7 , 8 , 9 and 10 are sink nodes , and occur first in the ordering .",
    "nodes 5 and 6 will be replicated 2 times , since they both have 2 output links .",
    "this will result in the replication of the edges @xmath88 , @xmath89 , @xmath90 and @xmath91 .",
    "node 4 will now have 4 output links and will have to be replicated as many times along with edge @xmath92 . similarly , node 3 will also be replicated 4 times along with edges @xmath93 and @xmath94 .",
    "finally , the source nodes 1 and 2 will be replicated 6 times each since they both now have 6 output links .      since there is a one - to - one correspondence between the leaf source nodes in the transformed network and the source - sink paths in the original network , path gain variables are assigned at the leaf source nodes .",
    "the assignment is illustrated in fig .",
    "[ butterfly]b for the butterfly network .",
    "source nodes 1 and 2 are assigned the variable names @xmath95 and @xmath96 , respectively .",
    "the subscripts are chosen tree by tree in the transformed network .",
    "in the tree with root as node 7 , the two copies of source node 1 are assigned variables @xmath97 and @xmath98 , while the single copy of source node 2 is assigned the variable @xmath99 . in the tree with root node 8 ,",
    "the variables are @xmath100 , @xmath101 for the two copies of node 1 , and @xmath102 for the single copy of node 2 .",
    "we continue in this manner to name the scaling variables at the source leaf nodes of the other two trees to get variables @xmath97 , @xmath98 , @xmath103 , @xmath104 and @xmath99 , @xmath102 , @xmath103 , @xmath105 .    once path gain variables are assigned ( from some field ) at the leaf nodes ,",
    "all edge functions are computed in the transformed network assuming that intermediate nodes perform addition only .",
    "the output function at the root ( sink ) is the sum of all incoming edge functions .",
    "for instance , in the tree with root as node 7 in fig .",
    "[ butterfly]b , the edge functions are as follows : for @xmath93 , @xmath106 ; for @xmath94 , @xmath107 ; for @xmath92 and @xmath90 , @xmath108 ; for @xmath88 , @xmath109 ; for @xmath110 , the edge function is @xmath111 .",
    "the output function at sink node 7 is @xmath111 .",
    "similarly , the edge functions can be computed for the other trees .",
    "note that the intermediate nodes perform addition as the entire path gain has been assigned as a variable at the leaf .",
    "because of the equivalence between paths from sources to a sink @xmath11 in the original network and leaf nodes in the tree @xmath84 , we see that the output function calculated in the transformed network is identical to the output function in the koetter - mdard formulation as given in section [ sec : deriv - from - koett ] .",
    "therefore , the no interference conditions are obtained by equating the output function of the root in the transformed network to its demand .    in fig .",
    "[ butterfly]b , the output function at the root nodes 7 , 8 , 9 and 10 are @xmath111 , @xmath112 , @xmath113 and @xmath114 , respectively . for",
    "the symbol at node 7 to be equal to the required @xmath115 , we have @xmath116 and @xmath117 .",
    "other equations are derived similarly .",
    "hence , in the butterfly network of fig . [ butterfly ] , we get the following linear equations :    @xmath118    for completion , we state the general form of the no - interference conditions below . in general , each path gain variable in the transformed network is associated with exactly one source symbol and one sink ( or tree ) .",
    "let us denote the source - sink path gains by @xmath119 where @xmath120 denotes the source , @xmath121 denotes the sink ( or the tree ) , and @xmath122 is an index among all copies of the source node @xmath41 in the tree @xmath84 rooted at @xmath11 .",
    "then , the general form of the `` no interference '' conditions can be written as follows : @xmath123      as explained before , the path gain variables of overlapping paths are related by quadratic edge - compatibility conditions . if multiple copies of an edge are present in the transformed network , then the edge is part of multiple source - sink paths in the original network .",
    "therefore , edge compatibility conditions are indicated by the presence of multiple edges in the transformed network .",
    "the edge functions in the transformed network can be used to write down the edge compatibility conditions .",
    "we first show this for the butterfly network example and later provide the general form .    in our illustrative example of fig .",
    "[ butterfly]b , the edge @xmath92 is copied four times .",
    "since there are @xmath124 ways of choosing two copies among the four , there will be six edge compatibility conditions for @xmath92 .",
    "the symbols on the copies of @xmath92 on the trees with root nodes 7 , 8 , 9 and 10 are @xmath108 , @xmath125 , @xmath126 and @xmath127 , respectively .",
    "hence , in fractional form , we need @xmath128 ( roots 7 and 8) , @xmath129 ( roots 7 and 9 ) , @xmath130 ( roots 7 and 10 ) , @xmath131 ( 8 and 9 ) , @xmath132 ( 8 and 10 ) and @xmath133 ( 9 and 10 ) .    in the degree-2 form , the edge compatibility conditions for the four copies of the edge @xmath92 are listed below : @xmath134 for the butterfly network example , we do not get any other edge compatibility conditions . for edges @xmath90 and @xmath91",
    ", the equations are identical to the ones listed above . also , there are no equations for edges @xmath93 , @xmath94 , @xmath88 and @xmath89 since these edges have scaled versions of the same symbol flowing through them .",
    "we have seen that not all duplicated edges result in distinct compatibility conditions .",
    "in general , edge compatibility equations will be required for each edge @xmath16 in the original network that satisfies the following conditions :    1 .",
    "number of copies of @xmath77 in the transformed network @xmath135 ( or the edge will not be replicated at all ) .",
    "2 .   number of different source nodes having a path to @xmath136 ( since if two copies of @xmath16 carry @xmath109 and @xmath106 , these will be scalar multiples of each other for any value assigned to @xmath137 ) .",
    "3 .   @xmath138 ( or the equations will be same as that for @xmath139 ) .",
    "we now state the general form of the edge - compatibility conditions in terms of nodes of the transformed network . given a node @xmath5 in the original network , the general form of the condition for two copies of @xmath7 , denoted by @xmath140 and @xmath141 in @xmath76 , belonging to the @xmath142-th and @xmath143-th trees , respectively , can be written as follows : @xmath144 where @xmath145 denotes the set of leaf nodes in the @xmath27-th tree that are copies of the source node @xmath41 and have a path to @xmath7 .    a careful study of the general form shows an edge compatibility condition needs to be introduced for every two copies , @xmath146 , of node @xmath147 and for every two sources @xmath148 such that ( a ) @xmath149 , ( b ) @xmath150 set of nodes in the @xmath151-th tree , and ( c ) @xmath152 .    the linear no - interference conditions and the quadratic edge compatibility conditions on the path gains are necessary and sufficient conditions for existence of solutions to the scalar linear network coding problem .",
    "the sufficiency is proved by algorithm [ algo : reverse ] in section [ sec : reverse ] . before describing the sufficiency ,",
    "we show how the linear and quadratic equations in path gains can be simplified in a systematic manner to provide useful results .",
    "the linear equations ( no interference conditions ) possess the special property that each of them involves a mutually exclusive set of variables .",
    "using this property , we can simplify the system of equations in the following two ways :    1 .",
    "it is possible that some of the variables never occur in the non - linear equations ( edge compatibility conditions ) . from",
    ", we can see that @xmath97 is one such variable in the example of the butterfly network .",
    "it can be easily seen that the linear equation involving @xmath97 can be trivially satisfied for any value assigned to the other variables involved in the same linear equation by choosing an appropriate value of @xmath97 ( which does not have any other condition on it ) .",
    "hence , @xmath97 along with the linear equation it occurs in can be removed from the system as trivially solvable .",
    "+ therefore , the first simplification would involve elimination of variables ( and their corresponding linear equations ) that do not occur in any non - linear equation .",
    "2 .   since each linear equation involves a mutually exclusive set of variables , we can eliminate one variable using each linear equation easily . eliminating this variable from the non - linear equations (",
    "note that this does not increase the degree of the system ) might reduce some of them to linear equations which can again be used to eliminate more variables iteratively .    in the case of the butterfly network , after the first step of simplification , we are left with 8 variables , 4 linear equations and 6 non - linear equations .    in the second step of the simplification , after the first round of elimination of variables using the linear equations ( [ butter : ni ] ) in ( [ butter : ec ] ) , we are left with 4 variables : @xmath98 , @xmath101 , @xmath153 and @xmath154 and the 6 equations as shown below .",
    "@xmath155 subsequently , @xmath98 and @xmath154 can also be eliminated , using the linear equations above , leaving just 2 variables and the relation : @xmath156    hence , the network coding problem for the example of the butterfly network has been reduced to solving only one ( non - trivial ) equation given in .",
    "in this section , we provide a few examples to illustrate the usefulness of the path gain approach in deriving the system of polynomial equations corresponding to a network coding problem .",
    "note that several problems in this area of polynomial equations and network coding are np - hard or undecidable , and we do not expect polynomial - time algorithms and exact step - by - step solutions to result from the path gain approach .",
    "our approach is to demonstrate the effectiveness of the path gain method in several examples of varying complexity .    in all examples ,",
    "we provide the number of equations and variables obtained from the edge - to - edge gain formulation . the path gain formulation ( after simplifications )",
    "will result in better numbers in many cases .",
    "however , we point out that this is not a comparison of the two methods , since one is simplified and the other is not .",
    "as we have shown , the path gain method can be seen as a method for simplifying the edge - to - edge gain equations .",
    "other methods for simplifying generic systems of polynomial equations , such as grbner basis methods , are useful in several networks .",
    "also , grbner basis or other methods can be used after the path - gain - based simplifications . however , in many examples , we observe that the path gain formulation appears to provide results on solvability .",
    "this is mainly because the path gain approach provides low degree equations , which are amenable to easy analysis and further simplifications .      for the butterfly network , the relationship between the path gain variables ( shown in fig .",
    "[ butterfly]b ) and the edge - to - edge gains in the koetter - mdard formulation ( fig .",
    "[ fig : bflow ] ) can be written down as follows : @xmath157 ( path : @xmath158 ) , @xmath159 ( path : @xmath160 ) , @xmath161 ( path : @xmath162 ) , @xmath163 ( path : @xmath164 ) , @xmath165 ( path : @xmath166 ) , @xmath167 ( path : @xmath168 ) , @xmath169 ( path : @xmath170 ) , @xmath171 ( path : @xmath172 ) , @xmath173 ( path : @xmath174 ) , @xmath175 ( path : @xmath176 ) , @xmath177 ( path : @xmath178 ) , @xmath179 ( path : @xmath180 ) .",
    "( 0,0 )    # 1#2#3#4#5 @font    ( 9797,2494)(19,-3095 ) ( 451,-1321)(0,0)[lb ] ( 451,-2311)(0,0)[lb ] ( 1486,-2311)(0,0)[lb ] ( 1486,-1276)(0,0)[lb ] ( 3331,-1321)(0,0)[lb ] ( 3331,-2311)(0,0)[lb ] ( 4006,-1546)(0,0)[lb ] ( 5446,-1546)(0,0)[lb ] ( 5446,-2536)(0,0)[lb ] ( 6481,-2536)(0,0)[lb ] ( 5941,-1591)(0,0)[lb ] ( 6661,-1456)(0,0)[lb ] ( 8956,-2311)(0,0)[lb ] ( 9451,-1591)(0,0)[lb ] ( 8281,-1636)(0,0)[lb ] ( 4951,-1006)(0,0)[lb ] ( 5356,-736)(0,0)[lb ] ( 7426,-1321)(0,0)[lb ] ( 7876,-736)(0,0)[lb ] ( 8326,-736)(0,0)[lb ] ( 9091,-736)(0,0)[lb ] ( 8731,-736)(0,0)[lb ] ( 9586,-736)(0,0)[lb ] ( 2971,-736)(0,0)[lb ] ( 2566,-736)(0,0)[lb ] ( 4141,-736)(0,0)[lb ] ( 4591,-736)(0,0)[lb ] ( 3826,-736)(0,0)[lb ] ( 5806,-871)(0,0)[lb ] ( 6211,-781)(0,0)[lb ] ( 6571,-736)(0,0)[lb ] ( 7156,-736)(0,0)[lb ]    the no - interference conditions are easily obtained . for edge compatibility between the paths @xmath168 and the path @xmath170 , we get the equation @xmath181 .",
    "other compatibility conditions can be checked similarly .",
    "the change to path gain variables results in easy simplification of the resulting equations with no increase in degree .",
    "finally , we obtain the simple equation , @xmath182 , which is not obvious even when the substitution is clearly specified .",
    "consider the network shown in fig .",
    "[ fig : char2]a taken from @xcite , where it has been proved to have linear coding solutions only over fields of characteristic 2 .",
    "nodes 1 , 2 and 3 are sources producing @xmath115 , @xmath183 and @xmath184 respectively .",
    "nodes 12 , 13 and 14 are sinks demanding @xmath184 , @xmath115 and @xmath183 respectively .",
    "the trees in the equivalent transformed network are shown in fig .",
    "[ fig : char2]b , c , d .",
    "the set of equations generated by the `` no interference condition '' are : @xmath185    the set of equations generated by the `` edge compatibility condition '' for edges @xmath93 , @xmath94 , @xmath92 and @xmath88 respectively are : @xmath186    using the linear equations to eliminate variables iteratively , we get 9 equations in 6 variables shown below .",
    "l a_2b_3=b_1 ;  a_2=-a_4b_1 ;  a_4b_3=-1 ; + a_2c_4=a_4 ;  c_4=a_4c_2 ;  b_3c_4+c_2=0 ; + b_1c_2+b_3=0 ;  b_1c_4 + 1=0 ;  b_3c_4=c_2    from equations @xmath187 and @xmath188 , we can derive the relation @xmath189 .",
    "substituting @xmath190 in the above system leads to the condition @xmath191 , which is not possible .",
    "hence , we must have @xmath192 , which implies that the system is not solvable in any field with an odd characteristic . also , in characteristic 2 , setting all variables to 1 in the above equations ,",
    "is seen to be a solution .",
    "this example demonstrates that , in practice , working with the equations derived through the path gain formulation can be advantageous .    for this example , the koetter - mdard formulation , as illustrated in @xcite , results in 17 equations in 22 variables .",
    "however , as shown in @xcite , it is possible to derive @xmath192 from these 17 equations using other simplifications .",
    "alternatively , a grbner basis method can also be used to derive @xmath192 .",
    "the path gain approach should be seen as a generic technique for simplification that can be used in arbitrary network coding problems , as shown in the next two examples .",
    "an interesting example of a multicast problem , presented in @xcite , is shown in fig .",
    "[ fig : multex ] .",
    "( 0,0 )    # 1#2#3#4#5 @font    ( 6352,4411)(425,-4400 ) ( 6526,-4036)(0,0)[lb ] ( 3001,-436)(0,0)[b ] ( 4201,-436)(0,0)[b ] ( 3001,-1636)(0,0)[b ] ( 4201,-1636)(0,0)[b ] ( 5401,-1636)(0,0)[b ] ( 5401,-2836)(0,0)[b ] ( 4201,-2836)(0,0)[b ] ( 3001,-2836)(0,0)[b ] ( 3001,-4036)(0,0)[b ] ( 4201,-4036)(0,0)[b ] ( 5401,-4036)(0,0)[b ] ( 1801,-1636)(0,0)[b ] ( 1801,-2836)(0,0)[b ] ( 1801,-4036)(0,0)[b ] ( 601,-4036)(0,0)[b ] ( 3001,-136)(0,0)[b ] ( 4201,-136)(0,0)[b ] ( 601,-4336)(0,0)[b ] ( 1801,-4336)(0,0)[b ] ( 3001,-4336)(0,0)[b ] ( 4201,-4336)(0,0)[b ] ( 5401,-4336)(0,0)[b ] ( 6601,-4336)(0,0)[b ]    the sources are nodes 1 and 2 , and the sinks are nodes 11 - 16 .",
    "this problem does not have a binary solution , as shown in @xcite .    using the edge - to - edge gain formulation ,",
    "we get 24 equations in 32 variables .",
    "the path gain method initially results in 84 equations in 48 variables .",
    "after the simplifications , we obtain 54 equations in 18 variables .",
    "significantly , there are 6 quadratic equations , each of the form @xmath193 .",
    "next , we can show that @xmath194 ( either @xmath195 or @xmath196 ) provides a contradiction in the equations .",
    "hence , we have equations of the form @xmath197 , which can not be solved in the binary field . with some more analysis",
    ", we can find solutions over gf(4 ) .    from this example",
    ", we see that the path gain formulation provides useful simplifications in non - trivial cases . in contrast , grbner basis methods on the edge - to - edge gain equations are not immediately useful in showing linear in - solvability over gf(2 ) .",
    "note that this does not rule out any other simplification of the edge - to - edge equations to obtain the necessary result .",
    "we merely conclude that the path gain method provides a useful simplification .",
    "consider an isp network topology shown in fig .",
    "[ isp ] taken from @xcite .",
    "the network has 87 nodes and 161 edges .",
    "edges are directed from lower - numbered nodes to higher - numbered nodes i.e. in an edge @xmath198 , @xmath199 .",
    "hence , the graph is directed and acyclic .",
    "we assume all links have unit capacity , and use fields of characteristic 2 in our simplification steps .",
    "after directing the graph , the five nodes 1 , 12 , 21 , 51 and 64 were set as sources in the example problems .",
    "sink nodes and demands were chosen at random from among the sources visible from each sink .",
    "the graph is not reduced by this choice of demands , since all nodes are visible from the five chosen sources .    1 .   _",
    "5 sources ( all rate 1 ) , 10 sinks ( all rate 1 ) . _ the edge - to - edge gain formulation gives a system of 44 equations in 30 variables .",
    "the path gain formulation initially results in 44 linear equations and 3 degree-2 equations in 316 variables .",
    "after applying the simplification steps , we are left with only 3 degree-2 equations in 7 variables assuming solution exists in a characteristic 2 field .",
    "in fact , setting all the remaining 7 variables to zero results in a valid solution to the three equations ( some other scaling variables are non - zero ) .",
    "hence , a solution over gf(2 ) is possible .",
    "2 .   _ 5 sources ( one with rate 2 , others rate 1 ) , 11 sinks ( all rate 1 ) . _ the edge - to - edge gain formulation yields a system of 50 equations in 40 variables in this case . in comparison ,",
    "the path gain formulation initially resulted in 50 linear equations and 34 degree-2 equations in 330 variables . but",
    "after applying the simplification steps , we are left with only 13 degree-2 equations in 17 variables assuming solution exists in a characteristic 2 field .",
    "again the all - zero solution is valid for the remaining 17 variables resulting in a network code over gf(2 ) .",
    "3 .   _ 5 sources ( all with rate 2 ) , 8 sinks ( all rate 1 ) . _",
    "the edge - to - edge gain formulation yields a system of 88 equations in 180 variables .",
    "the path gain formulation initially gives 88 linear and 11198 degree-2 equations in 632 variables .",
    "but on applying the simplification steps , assuming characteristic 2 , it turns out that the system is not solvable over characteristic 2 .    to run further examples , we computed the max - flows from the sources ( 1,12,21,51,64 ) to a set of 11 nodes chosen as sinks .",
    "rates below the individual max - flows were assigned to sources and sink demands .",
    "the results are summarized below ( notation : @xmath32 , @xmath33 are source and sink sets .",
    "a source node @xmath13 of rate @xmath200 is shown as @xmath201 source nodes @xmath202 .",
    "the demands of each sink are shown in brackets ) .",
    "1 .   @xmath203 , @xmath204 @xmath205 @xmath206 the path gain formulation yields 1188 equations in 507 variables",
    ". after simplifications , there are 476 equations , but none of them have a constant term .",
    "hence , setting the remaining variables to zero provides a binary solution .",
    "2 .   @xmath207 , @xmath204 @xmath208 @xmath209 .",
    "we obtain 555 variables and 1683 equations . upon simplification , we find that a solution does not exist in characteristic 2",
    "@xmath211 @xmath212 @xmath213 . the path gain formulation yields",
    "578 variables and 12048 equations .",
    "after simplifications , there are 6780 equations , but only five of them have a constant term .",
    "a linear term ( one path gain ) appears in each of these five equations , but does not appear as a linear term in any other equation .",
    "hence , setting this one path gain to 1 and the remaining variables to zero provides a binary solution .",
    "as expected , solutions are not guaranteed even if all demands are within individual max flows .",
    "we see that the number of equations and variables increases steeply in some cases .",
    "however , guessing a binary solution may be feasible .    to obtain another example , we modified the graph of fig .",
    "[ isp ] ( by changing edge connections ) to get a butterfly network as a subgraph when the nodes 62 and 63 demand the sources 1 and 12 . on the modified graph ,",
    "we set @xmath214 , @xmath215 @xmath216 @xmath217 , where the other demands are chosen to be below the individual max flows .",
    "we obtain 1247 equations in 503 variables .",
    "after simplifications , there are no equations with a constant term .",
    "so , setting the remaining variables to zero results in a binary solution .    hence , we see that the path - based formulation of scalar linear network coding appears to yield useful results even over large networks with a few sources and sinks .",
    "this shows the extent of simplification possible in polynomial systems defined by network coding problems .",
    "it has been shown in @xcite that the complexity of grbner basis algorithms depends , among other things , on the maximum degree of the starting basis .",
    "the degrees of the intermediate polynomials computed during grbner basis calculations has been shown to grow up to @xmath218 if the maximum degree of the starting basis is @xmath219 . due to these issues ,",
    "grbner basis algorithms become practically intractable except for small problem instances . in the light of these results ,",
    "the path gain formulation that produces degree-2 equations becomes important in reducing the running complexity of grbner basis algorithms that may be used to solve the network coding problem .",
    "the simplification provided by the path gain approach is summarized in table [ comparison ] for the various examples presented so far .",
    "c|c|c & _ path gain & _ edge gains ( unsimplified ) + _ _    c example +   + butterfly + fig .",
    "[ fig : char2]a + ( * ? ? ? * fig .",
    "5 ) + ( * ? ? ?",
    "3 ) + ( * ? ? ?",
    "3 )    &    ccc var.@xmath220 & deg . 2 eqns@xmath220 +   + 4 & 6 + 8 & 15 + 9 & 5 + 27 & 45 + 12 & 30    &    ccc var .",
    "& eqns & deg .",
    "+   + 10 & 8 & 2 + 14 & 9 & 3 + 14 & 4 & 4 + 50 & 32 & 3 + 22 & 17 & 3     +    @xmath220after one iteration of elimination using the linear equations    as indicated , we have shown numbers for only one round of linear equation simplification .",
    "it can be seen that , apart from having a maximum degree of only 2 , the number of variables is also lesser in many cases enabling use of methods such as @xcite for solving the system .",
    "the number of variables and equations from the edge - to - edge gain formulation are of the order of the number of edges in the network . however , the number of monomial terms possible using the edge - to - edge gain variables is exponential in the number of edges . in a large network ,",
    "depending on the number of paths from sources to sinks , a large number of monomial terms occur in the system of polynomial equations . because of the large number of variables and larger number of terms",
    ", there is no obvious method to simplify the equations other than running standard routines for grbner basis .",
    "the path gain approach is beneficial in providing results on solvability in some examples and in reducing the complexity of grbner basis methods in most cases .",
    "while the path gain variables are useful for solving the system of polynomial equations , the implementation of network coding is through edge - to - edge gains .",
    "we now describe an algorithm to obtain a network code for the original network from the path gain variables in the transformed network .",
    "note that this completes the proof of the sufficiency of edge compatibility conditions .",
    "first , we will briefly describe the algorithm and then present a notational version of the same .",
    "a solution to the system of polynomial equations in the path gain formulation consists of a set of values assigned to the path gain variables at the leaf source nodes in the transformed network such that the no interference conditions as well as the edge compatibility conditions are satisfied .",
    "the algorithm to construct a network code from such a solution consists of propagating the values of these coefficients from the source nodes to the sink nodes through the transformed network .",
    "we compute two vectors for every edge @xmath16 of the graph @xmath0 .",
    "the first vector @xmath221 $ ] represents the edge function or symbol @xmath222 sent over edge @xmath16 .",
    "suppose @xmath16 is replicated @xmath223 times to obtain edges @xmath224 , @xmath225 in the transformed graph @xmath81 .",
    "the second vector @xmath226 $ ] is such that the edge function on @xmath227 is @xmath228 .",
    "note that such a scaling property is guaranteed for all copies of an edge by the compatibility conditions .",
    "once the vectors @xmath37 are computed for all @xmath229 , the network code in @xmath30 is completely known .",
    "suppose @xmath230 and @xmath231 are known for all the incoming edges @xmath232 for a node @xmath147 .",
    "the vectors @xmath37 and @xmath233 can be computed for the outgoing edges @xmath234 as illustrated for a sample case in fig .",
    "[ fig : reverse ] .",
    "( 0,0 )    # 1#2#3#4#5 @font    ( 7677,3420)(586,-3196 ) ( 1201,-211)(0,0)[lb ] ( 1876,-211)(0,0)[lb ] ( 2476,-211)(0,0)[lb ] ( 1576,-661)(0,0)[lb ] ( 1951,-661)(0,0)[lb ] ( 2326,-661)(0,0)[lb ] ( 2176,-1336)(0,0)[lb ] ( 2176,-1711)(0,0)[lb ] ( 1576,-1711)(0,0)[lb ] ( 601,-2236)(0,0)[lb ] ( 1126,-2461)(0,0)[lb ] ( 2101,-2236)(0,0)[lb ] ( 2626,-2461)(0,0)[lb ] ( 5551,-2311)(0,0)[lb ] ( 3976,-2311)(0,0)[lb ] ( 4726,-811)(0,0)[lb ] ( 4426,-586)(0,0)[lb ] ( 3451,-286)(0,0)[lb ] ( 6976,-736)(0,0)[lb ] ( 5476,-736)(0,0)[lb ] ( 4201,-286)(0,0)[lb ] ( 4876,-286)(0,0)[lb ] ( 5476,-286)(0,0)[lb ] ( 6001,-286)(0,0)[lb ] ( 6601,-286)(0,0)[lb ] ( 6151,-586)(0,0)[lb ] ( 6451,-811)(0,0)[lb ] ( 7651,-586)(0,0)[lb ] ( 7951,-811)(0,0)[lb ] ( 7876,-1261)(0,0)[lb ] ( 6376,-1261)(0,0)[lb ] ( 4651,-1261)(0,0)[lb ] ( 4426,-1711)(0,0)[lb ] ( 6151,-1711)(0,0)[lb ] ( 7651,-1711)(0,0)[lb ] ( 1726,-2911)(0,0)[lb ] ( 5551,-3136)(0,0)[lb ] ( 3826 , 89)(0,0)[lb ] ( 7426,-2311)(0,0)[lb ] ( 7876,-2536)(0,0)[lb ] ( 6976,-286)(0,0)[lb ] ( 7576,-286)(0,0)[lb ] ( 8176,-286)(0,0)[lb ] ( 3751,-736)(0,0)[lb ] ( 4426,-2536)(0,0)[lb ] ( 5251,-2536)(0,0)[lb ] ( 5551 , 89)(0,0)[lb ] ( 4801,-2836)(0,0)[lb ] ( 7501,-2836)(0,0)[lb ] ( 7126 , 89)(0,0)[lb ]    in the figure , a node @xmath147 with @xmath235 and @xmath236 is replicated thrice into @xmath237 , @xmath238 and @xmath239 in @xmath240 .",
    "the incoming and outgoing links are assumed to be replicated as shown in the transformed network .",
    "for instance , the edge @xmath93 is replicated thrice as @xmath241 , @xmath242 and @xmath243 .",
    "we suppose that there are three source nodes @xmath244 , and @xmath245 $ ] .",
    "this results in edge functions @xmath246 for @xmath247 .",
    "we assume that the scaling vectors @xmath248 are as shown in the figure .    using the edge functions and scaling factors on the incoming edges ,",
    "the edge function of the copies of @xmath249 are computed first .",
    "for instance , the edge function of @xmath250 is computed as @xmath251 .",
    "then , the edge function for the outgoing links of @xmath237 , @xmath238 and @xmath239 in @xmath240 are computed by simple addition . as shown in the figure",
    ", the symbols sent on @xmath252 and @xmath253 will be scalar multiples .",
    "we then assign the symbol on @xmath88 in @xmath30 to be the symbol on @xmath252 given by @xmath254 ( assumed nonzero ) .",
    "then , @xmath255 and @xmath256 are assigned suitably .    in this manner , all the nodes are processed in a suitable order to compute the network code for the original graph from the path gains on the transformed graph .",
    "we now introduce some notation to describe the algorithm formally .",
    "consider the given network @xmath0 and the equivalent transformed network @xmath81 .",
    "then , for each node @xmath147 , let us define the set of network coding coefficients as @xmath257 i.e. if @xmath258 is the symbol received on the link @xmath232 , the symbol sent on @xmath234 is @xmath259 .",
    "nodes and edges get replicated during the transformation from @xmath30 to @xmath240 .",
    "we define some sets to hold information about the replicated nodes and edges . for @xmath147 ( @xmath260 ) and @xmath261 , define : @xmath262 the sets @xmath263 and @xmath264 hold nodes and edges in @xmath240 that are copies of @xmath7 and @xmath16 , respectively .",
    "two such useful sets are ( 1 ) @xmath265 that contains copies of @xmath77 , and ( 2 ) @xmath266 that contains copies of @xmath267",
    ". the set @xmath268 contains copies of an edge @xmath78 that connect to a copy of @xmath16 .",
    "clearly , @xmath268 is non - empty only when @xmath232 and @xmath234 for some node @xmath7 .    for each @xmath269 in the original graph @xmath30",
    ", there is a one - to - one correspondence between @xmath270 and @xmath271 given by @xmath272 in the transformed graph @xmath240 .",
    "thus , we have the equality @xmath273 .",
    "this is because the incoming edges are duplicated everytime a node is duplicated .",
    "so , for @xmath274 ( two incoming edges of one node ) , we will have @xmath275 and the sets @xmath270 and @xmath276 will be ordered such that @xmath277 .    for each @xmath234 , define the set @xmath278 to be the subset of @xmath263 that contains nodes whose outgoing edge is a copy of @xmath16 in @xmath240 . note that @xmath279 .",
    "let the vector @xmath221 $ ] represent the edge function @xmath222 sent over edge @xmath229 in the final linear network code in @xmath30 .",
    "since the edge compatibility conditions are satisfied , the edge function on each copy of @xmath16 in @xmath264 will be a scalar multiple of @xmath37 .",
    "for @xmath280 , let the edge function on @xmath281 be @xmath282 .",
    "we collect the multiplying factors @xmath283 , @xmath280 into a vector @xmath284 $ ] . the correspondence between @xmath264 and @xmath265 results in a one - to - one correspondence between elements of the sets @xmath265 and @xmath233 given by @xmath285 for @xmath280 .",
    "we define sub - vectors @xmath286 $ ] collecting the multiplying factors on copies of @xmath78 that connect to copies of @xmath16 . for a fixed @xmath234 and @xmath287 with @xmath288 , the sets @xmath289 and @xmath290 will be in one - to - one correspondence and ordered so that @xmath291 .",
    "so , we have @xmath292 .    in fig .",
    "[ fig : reverse ] , for instance , we have @xmath293 , @xmath294 and @xmath295 . also , @xmath296 and @xmath297 .",
    "similarily , @xmath298 and @xmath299 .",
    "the scaling vector @xmath300 $ ] with @xmath301 $ ] and @xmath302 $ ] .",
    "similarily , @xmath303 $ ] with @xmath304 $ ] and @xmath305 $ ] .",
    "note that all one - to - one correspondences are being preserved in the ordering of coordinates in the scaling vectors .",
    "_ flow matrices at a vertex : _ for a vertex @xmath7 , incoming edge @xmath232 and outgoing edge @xmath234 , a rank - one flow matrix @xmath306 is defined as @xmath307 .",
    "the matrix @xmath306 is of dimension @xmath308 , and the @xmath309-th element @xmath310 ( letting @xmath311 ) is the coding coefficient of the @xmath27-th source symbol flowing in the @xmath24-th copy of edge @xmath78 in @xmath268 .",
    "we readily see that each row of @xmath306 is the coding vector in a copy of edge @xmath78 in @xmath240 .    in fig .",
    "[ fig : reverse ] , for instance , we have @xmath312=\\begin{bmatrix}a_1\\\\b_1\\end{bmatrix}[\\alpha_{11}\\;\\alpha_{12}\\;\\alpha_{13}]$ ] and @xmath313[\\alpha_{11}\\;\\alpha_{12}\\;\\alpha_{13}]$ ] . in terms of path gain variables ,",
    "@xmath314 is equal to the sum of the path gain variables for all paths starting from ( some copy of ) the @xmath27-th source and using the @xmath24-th copy of edge @xmath78 in @xmath268 .",
    "let @xmath315 .",
    "for @xmath234 , let @xmath316 ( for all @xmath317 ) , and let @xmath318 with @xmath319 independent of @xmath317 .",
    "the @xmath320-th row of the flow matrix @xmath321 contains the flow in the edge @xmath322 incident on the node @xmath323 for @xmath324 .",
    "therefore , the sum @xmath325 is a @xmath326 matrix whose @xmath320-th row is equal to the sum of all incoming flows into node @xmath323 . by flow conservation ,",
    "the outgoing flow on the single outgoing edge from node @xmath323 is equal to the @xmath320-th row of @xmath327 for @xmath328 .",
    "so , the rows of @xmath327 contain the flows in the @xmath329 copies of the edge @xmath16 in @xmath240 , and the edge compatibility condition ensures that the matrix @xmath327 is a rank - one matrix .",
    "the vectors @xmath37 and @xmath233 are initialized for an outgoing link @xmath16 from the source node as follows .",
    "for the @xmath24-th source node @xmath330 and @xmath331 , @xmath332 $ ] .",
    "for @xmath280 , the coordinate @xmath283 of @xmath233 is equal to the value of the scaling variable at the source leaf node @xmath333 .",
    "[ algo : reverse ] deriving the network code + _ input _ : a directed acyclic network @xmath0 , an equivalent transformed network @xmath81 , a topological ordering of nodes @xmath53 ( from algorithm [ algo : toposort ] ) and a solution to the derived system of polynomial equations .    for each node , @xmath7 in the reverse topological ordering , @xmath334 , of @xmath53 , if @xmath335 , do    1 .",
    "get @xmath336 from @xmath337 .",
    "2 .   for each edge",
    "@xmath234 1 .",
    "get @xmath338 from @xmath231 as defined above @xmath339 .",
    "2 .   @xmath340 .",
    "@xmath341 , is a matrix such that each row corresponds to the symbol flowing through a copy of edge @xmath16 in @xmath240 .",
    "4 .   @xmath342",
    "any non - zero row ( say , @xmath24 ) of @xmath327 , or the zero row if @xmath327 is the zero matrix . this is the symbol that will actually flow through @xmath16 in @xmath30 . 5 .",
    "@xmath343 , where @xmath24 is the row selected in the previous step .",
    "this is the set of network coding coefficients of node @xmath7 corresponding to output link @xmath16 . 6 .",
    "@xmath344 or @xmath345 if @xmath346 .",
    "the decoding coefficients at a sink node @xmath11 are given by the set @xmath347 .",
    "note that all the matrices in this set have only one element since there is only one copy of each sink node ( and and all its input links ) in @xmath240 .",
    "+ _ output _ : the set of all network coding coefficients , @xmath348 , for the given network .    in the above algorithm",
    ", nodes are travered in the reverse of the topological order obtained from algorithm [ algo : toposort ] . at a node @xmath7 ,",
    "the vectors @xmath349 and @xmath233 are computed for @xmath234 using @xmath230 and @xmath231 for @xmath232 .",
    "the reverse topological order ensures that @xmath230 and @xmath231 are known for @xmath232 before node @xmath7 is visited .",
    "we will now present an example of this algorithm applied to a sample solution for the modified butterfly network ( fig .",
    "[ butterfly ] ) .",
    "consider the following solution for the system over @xmath350 , @xmath351 .",
    "@xmath352    one reverse topological order of edges is @xmath353 .",
    "nodes 1,2 are source nodes .",
    "so , we have @xmath354 $ ] , @xmath355 $ ] and from the solution above , we have @xmath356 $ ] , @xmath357 $ ] , @xmath358 $ ] , @xmath359 $ ] .",
    "then , beginning with the iteration for the non - source non - sink nodes as described in the algorithm above , we will first process node 3 - we know @xmath360 for both its input links , @xmath361",
    ". there are 4 copies of this node as shown in fig .",
    "[ butterfly]b and all 4 copies have copies of edge @xmath92 as their only output links .",
    "hence , @xmath362 and @xmath363 . after computing @xmath364 , @xmath365",
    ", we arrive at : @xmath366    now , let @xmath367 $ ] , the second row of @xmath368 .",
    "hence , we have @xmath369 , the network coding coefficients at node 3 .",
    "also , @xmath370 $ ] .",
    "next , we will move to node 4 which has two output links , @xmath371 .",
    "hence , we have @xmath372 , \\mathbf{c}_{e_3,e_7}=[\\alpha ^2\\ 0]$ ] .",
    "we can then compute @xmath373 and then arrive at : @xmath374    now we can choose @xmath375 $ ] , the second row of @xmath376 and @xmath377 $ ] , the first row of @xmath378 . then , the network coding coefficients for node 4 are @xmath379 . completing the last step of the iteration , we get @xmath380 , \\mathbf{c}_{e_7}=[1\\ 0]$ ] .",
    "now we come to node 5 . for the output link @xmath110",
    ", we have @xmath381 , \\mathbf{c}_{e_6,e_8}=[0]$ ] and for @xmath382 , we have @xmath383 , \\mathbf{c}_{e_6,e_9}=[1]$ ]",
    ". then we get : @xmath384,\\;\\;f_{e_9}=[0\\ 1]\\ ] ]    so , @xmath385 $ ] and @xmath386 $ ] , the only rows of the respective matrices . then",
    ", the network coding coefficients for node 5 are : @xmath387    also , @xmath388 $ ] .",
    "similarly , the network coding coefficients for node 6 can also be computed so that sinks 9 , 10 receive the required symbols .",
    "in this work , we have used path gains as variables to arrive at an algebraic formulation for the scalar linear network coding problem .",
    "this provides a useful simplification of the edge - to - edge gain formulation proposed in @xcite , as illustrated by both small and large - sized examples .",
    "given a network coding problem , we have given algorithms to construct an equivalent transformed network and arrive at a system of polynomial equations ( of maximum degree 2 ) in terms of path gains . after solving for the path gains , we have provided an algorithm to compute the edge - to - edge gains , which can be used in implementing the network code .    each monomial term occuring in a general system of polynomial equations",
    "can be assigned a new variable to obtain linear equations along with consistency conditions involving the new variables . however , in a general polynomial system , the consistency conditions are not guaranteed to be degree-2 equations without introducing additional monomial terms not present in the original system . through this work , we have shown that the polynomial system representing a scalar network coding problem reduces to only degree-2 consistency conditions .",
    "we thank the anonymous reviewers and the editor for their comments and suggestions that resulted in several significant improvements in the presentation and content of this article .                                        nicolas courtois , alexander klimov , jacques patarin , and adi shamir , `` efficient algorithms for solving overdefined systems of multivariate polynomial equations '' , in _ lec .",
    "notes in comp .",
    "_ eurocrypt , 2000 , pp .",
    "392407 .",
    "abhay t. subramanian obtained his bachelor s and master s degrees in electrical engineering from the indian institute of technology ( iit ) madras , chennai , india in 2008 .",
    "he is currently a doctoral student at the department of management science and engineering in stanford university , ca , usa . his current research interests are in the areas of applied probability , stochastic processes , optimization , statistics , algorithms , learning and mathematical finance .",
    "andrew thangaraj received his bachelor s degree in electrical engineering from the indian institute of technology ( iit ) madras , chennai , india in 1998 and a phd in electrical engineering from the georgia institute of technology , atlanta , usa in 2003 .",
    "he was a post - doctoral researcher at the gtl - cnrs telecom lab at georgia tech lorraine , metz , france from august 2003 to may 2004 . from june 2004 , he is with the department of electrical engineering , iit madras , where he is currently an associate professor .",
    "his research interests are in the areas of information theory , coding and information - theoretic aspects of cryptography ."
  ],
  "abstract_text": [
    "<S> in the algebraic view , the solution to a network coding problem is seen as a variety specified by a system of polynomial equations typically derived by using edge - to - edge gains as variables . </S>",
    "<S> the output from each sink is equated to its demand to obtain polynomial equations . in this work , </S>",
    "<S> we propose a method to derive the polynomial equations using source - to - sink path gains as the variables . in the path gain formulation , we show that linear and quadratic equations suffice ; therefore , network coding becomes equivalent to a system of polynomial equations of maximum degree 2 . </S>",
    "<S> we present algorithms for generating the equations in the path gains and for converting path gain solutions to edge - to - edge gain solutions . because of the low degree </S>",
    "<S> , simplification is readily possible for the system of equations obtained using path gains . using small - sized network coding problems , </S>",
    "<S> we show that the path gain approach results in simpler equations and determines solvability of the problem in certain cases . on a larger network ( with 87 nodes and 161 edges ) </S>",
    "<S> , we show how the path gain approach continues to provide deterministic solutions to some network coding problems .    algebraic network coding , network coding , scalar linear network coding . </S>"
  ]
}