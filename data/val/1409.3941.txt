{
  "article_text": [
    "the concept of templates was introduced in a linear setting .",
    "they answered to the computational issue of the polyhedra domain , that is , the number of faces and the number of vertices both explode when performing the code analysis .",
    "recently , generalizations of linear templates appeared , such as quadratic lyapunov functions as nonlinear templates .",
    "nevertheless , no precise characterization of the templates to use have been developed for program analysis purpose .",
    "indeed , depending on the property to show , prefixing a template basis without any rules can lead to unuseful information on the programs .",
    "for instance , suppose that we want to show that the values taken by the variables of the program are bounded .",
    "then , it is natural to use intervals or norm functions as templates .",
    "unfortunately , these functions are not sufficient to show the desired property . in the context of linear systems in optimal control",
    ", it is well known that lyapunov functions provide useful templates to bound the variable values .",
    "this result can be extended to polynomial systems using polynomial lyapunov functions .",
    "the crucial notion behind is that these polynomial functions allow to define sublevel sets which are invariant by the dynamics -in our case , the dynamics being the loop body . in static analysis",
    ", lyapunov functions provide inductive invariants , which are precisely the results of computation while using template abstract domains .",
    "[ [ related - works . ] ] related works .",
    "+ + + + + + + + + + + + + +    template domains were introduced by sankaranarayanan et al .",
    "@xcite , see also  @xcite .",
    "the latter authors only considered a finite set of linear templates and did not provide an automatic method to generate templates .",
    "linear template domains were generalized to nonlinear quadratic cases by adj et al . in  @xcite , where the authors used in practice quadratic lyapunov templates for affine arithmetic programs .",
    "these templates are again not automatically generated .",
    "roux et al .",
    "@xcite provide an automatic method to compute floating - point certified lyapunov functions of perturbed affine loop body updates .",
    "they use lyapunov functions with squares of coordinate functions as quadratic template bases in case of single loop programs written in affine arithmetic .",
    "the extension proposed in  @xcite relies on combining polynomial templates with sum - of - squares ( sos ) techniques to certify nonlinear inequalities .",
    "proving polynomial inequalities is already np - hard and boils down to show that the infimum of a given polynomial is positive .",
    "however , one can obtain lower bounds of the infimum by solving a hierarchy of moment - sos relaxations , introduced by lasserre in  @xcite .",
    "recent advances in sos optimization allowed to extensively apply these relaxations to various fields , including parametric polynomial optimization , optimal control , combinatorial optimization , _ etc . _ ( see e.g.  @xcite for more details ) . in the context of hybrid systems ,",
    "certified inductive invariants can be computed by using sos approximations of parametric polynomial optimization problems  @xcite . in  @xcite",
    ", the authors develop an sos - based methodology to certify that the trajectories of hybrid systems avoid an unsafe region . recently , ahmadi et al .",
    "@xcite investigate necessary or sufficient conditions for sos - convex lyapunov functions to stabilize switched systems , either in the linear case or when the switched system is the convex hull of a finite number of nonlinear criteria .    in a static analysis context ,",
    "polynomial invariants appear in  @xcite , where invariants are given by polynomial inequalities ( of bounded degree ) but the method relies on a reduction to linear inequalities ( the polyhedra domain ) .",
    "template polyhedra domains allow to analyze reachability for polynomial systems : in  @xcite , the authors propose a method that computes linear templates to improve the accuracy of reachable set approximations , whereas the procedure in  @xcite relies on bernstein polynomials and linear programming , with linear templates being fixed in advance .",
    "bernstein polynomials also appear in  @xcite as template polynomials but there are not generated automatically . in  @xcite ,",
    "the authors use smt - based techniques to automatically generate templates which are defined as formulas built with arbitrary logical structures and predicate conjunctions .",
    "other reductions to systems of polynomial _ equalities _",
    "( by contrast with polynomial inequalities , as we consider here ) were studied in @xcite and more recently in  @xcite .    [ [ contribution - and - methodology . ] ] contribution and methodology .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in this paper , we generate polynomial templates by combining the approach of sos approximations extensively used in control theory with template abstract domains originally introduced in static analysis .",
    "we focus on analyzing programs composed of a single loop with polynomial conditional branches in the loop body and polynomial assignments . for such programs ,",
    "our method consists in computing certificates which yield sufficient conditions that a given property holds .",
    "we introduce the notion of _ well - representative _ templates with respect to this property . computing inductive invariant and polynomial templates",
    "boils down to solving a system of functional inequalities . for computational purpose ,",
    "we strengthen this system as follows :    1 .",
    "we impose that the functions involved in each inequality of the system belong to a convex cone @xmath0 included in the set of nonnegative functions .",
    "this allows in turn to define the stronger notion of _ @xmath0 well - representative _ templates .",
    "2 .   instantiating @xmath0 to the cone of sos polynomials leads to consider a hierarchy of sos programs , parametrized by the degrees of the polynomial templates .",
    "while solving the hierarchy , we extract polynomial template bases and feasible invariant bounds together with ( sos - based ) certificates that the desired property holds .",
    "the potential of the method is demonstrated on several `` toy '' nonlinear programs , defined with medium - size polynomial conditionals / assignments , involving at most 4 variables and of degree up to 3 .",
    "numerical experiments illustrate the hardness of program analysis in this context , as simple nonlinear examples can already yield unexpected behaviors .",
    "[ [ organization - of - the - paper . ] ] organization of the paper .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    the paper is organized as follows . in section",
    "[ sem - functional ] , we present the programs that we want to analyze and their representation as constrained piecewise discrete - time dynamical system .",
    "next , we recall the collecting semantics that we use and finally remind some required background about abstract semantics for generalized template domains .",
    "section  [ template - generation ] contains the main contribution of the paper , namely the definition of well representative templates and how to generate such templates in practice using sos programming .",
    "section  [ bench ] provides practical computation examples for program analysis .",
    "in this section , we describe the programs which are considered in this paper .",
    "next , we explain how to analyze them through their representation as discrete - time dynamical systems .",
    "then , we give details about the special properties which can be inferred on such programs . finally , we recall mandatory results for abstract template domains that are used in the sequel of the paper .      in this paper , we are interested in analyzing computer science programs .",
    "we focus on programs composed of a single loop with a possibly complicated switch - case type loop body .",
    "this loop is supposed to be written as a nested sequence of _ if _ statements .",
    "moreover we suppose that the analyzed programs are written in static single assignment ( ssa ) form , that is each variable is initialized at most once .",
    "we denote by @xmath1 the vector of the program variables . finally , we consider assignments of variables using only _ parallel assignments _ @xmath2 .",
    "tests are either weak inequalities @xmath3 or strict inequalities @xmath4 .",
    "we assume that assignments are functions from @xmath5 to @xmath5 and test functions are functions from @xmath5 to @xmath6 . in the program syntax",
    ", the notation @xmath7 will be either @xmath8 or @xmath9 .",
    "the form of the analyzed program is described in figure  [ programstyle ] .        .... x $ \\in$ $ \\xin$ ; while ( $ r_1 ^ 0$(x)$\\ll$0 and ... and $ r_{n_0}^0$(x)$\\ll$0 ) {    if($r_1 ^ 1$(x)$\\ll$0 ) {        $ \\vdots$       if($r_{n_1}^1$(x)$\\ll$0 ) {          x = $ t^1$(x ) ;       }          else {          $ \\vdots$          if($r_{n_i}^i$(x)$\\ll$0 ) {             x = $ t^i$(x ) ;             }          }    else {        $ \\vdots$    }   } ....",
    "+    as depicted in figure  [ programstyle ] , an update @xmath10 of the @xmath11-th condition branch is executed if and only if the conjunction of tests @xmath12 holds .",
    "the variable @xmath13 is updated by @xmath14 if the current value of @xmath13 belongs to @xmath15 .",
    "consequently , we interpret programs as _ constrained piecewise discrete - time dynamical systems _ ( cpds for short ) .",
    "the term _ piecewise _ means that there exists a partition @xmath16 of @xmath5 such that for all @xmath17 , the dynamics of the system is represented by the following relation , for @xmath18 : @xmath19 we assume that the initial condition @xmath20 belongs to some compact set @xmath21 . for the program , @xmath21 is the set where the variables are supposed to be initialized in . since the test entry for",
    "the loop condition can be nontrivial , we add the term _ constrained _ and @xmath22 denotes the set representing the conjunctions of tests for the loop condition .",
    "the iterates of the cpds are constrained to live in @xmath22 : if for some step @xmath18 , @xmath23 then the cpds is stopped at this iterate with the terminal value @xmath24 .",
    "we define a partition as a family of nonempty sets such that : @xmath25 from equation  , for all @xmath26 there exists a unique @xmath27 such that @xmath28 .",
    "a set @xmath29 can contain both strict and weak inequalities and characterizes the set of the @xmath30 conjunctions of tests functions @xmath31 .",
    "let @xmath32 stands for the vector of tests functions associated to the set @xmath29 .",
    "moreover , for @xmath29 , we denote by @xmath33 ( resp .",
    "@xmath34 ) the part of @xmath35 corresponding to strict ( resp .",
    "weak ) inequalities .",
    "finally , we obtain the representation of the set @xmath29 given by equation  : @xmath36 we insist on the notation : @xmath37 ( resp .",
    "@xmath38 ) means that for all coordinates @xmath39 , @xmath38 ( resp .",
    "@xmath40 ) .",
    "we suppose that the sets @xmath21 and @xmath22 also admits the representation given by equation   and we denote by @xmath41 the vector of tests functions @xmath42 and by @xmath43 the vector of tests functions @xmath44 .",
    "we also decompose @xmath41 and @xmath43 as strict and weak inequality parts denoted respectively by @xmath45 , @xmath46 , @xmath47 and @xmath48 .",
    "to sum up , we give a formal definition of cpds .",
    "[ pwsdef ] a constrained piecewise discrete - time dynamical system ( cpds ) is the quadruple @xmath49 with :    * @xmath50 is the compact of the possible initial conditions ; * @xmath51 is the set of the constraints which must be respected by the state variable ; * @xmath52 is a partition as defined in equation  ; * @xmath53 is the family of the functions from @xmath5 to @xmath5 , w.r.t .",
    "the partition @xmath54 satisfying equation  .",
    "from now on , we associate a cpds representation to each program of the form described at figure  [ programstyle ] . since a program admits several cpds representations , we choose one of them , but this arbitrary choice does not change the results provided in this paper . in the sequel , we will often refer to the running example described in example  [ running ] .    [ running ]",
    "the program below involves four variables and contains an infinite loop with a conditional branch in the loop body .",
    "the update of each branch is polynomial .",
    "the parameters @xmath55 ( resp .",
    "@xmath56 ) are given parameters . during the analysis",
    ", we only keep the variables @xmath57 and @xmath58 since @xmath59 and @xmath60 are just memories .    c    .... $ x_1 , x_2\\in [ a_1 , a_2 ] \\times [ b_1 , b_2]$ ; $ oldx_1 $ = $ x_1 $ ; $ oldx_2 $ = $ x_2 $ ; while ( -1 < = 0 ) {    if ( $ oldx_1$^2 + $ oldx_2$^2 < = 1 ) {         $ oldx_1 $ = $ x_1 $ ;        $ oldx_2 $ = $ x_2 $ ;        $ x_1 $ = $ c_{11}$ * $ oldx_1$^2 + $ c_{11}$ * $ oldx_2$^3 ;        $ x_2 $ = $ c_{21}$ * $ oldx_1$^3 + $ c_{22}$ * $ oldx_2$^2 ;    }    else {        $ oldx_1 $ = $ x_1 $ ;        $ oldx_2 $ = $ x_2 $ ;        $ x_1 $ = $ d_{11}$ * $ oldx_1$^3 + $ d_{12}$ * $ oldx_2$^2 ;        $ x_2 $ = $ d_{21}$ * $ oldx_1$^2 +",
    "$ d_{22}$ * $ oldx_2$^2 ;    }   } ....    its constrained piecewise discrete - time dynamical system representation corresponds to the quadruple @xmath61 , where the set of initial conditions is : @xmath62 \\times [ b_1 , b_2 ] \\,,\\ ] ] the set @xmath22 in which the variable @xmath63 lies is : @xmath64 the partition verifying equation   is : @xmath65 and the functions relative to the partition @xmath66 are : @xmath67      the main goal of the paper is to decide automatically if a given property holds for the analyzed program .",
    "we are interested in numerical properties and more precisely in properties on the values taken by the @xmath68-uplet of the variables of the program .",
    "hence , in our point - of - view , a property is just the membership of some set @xmath69 . in particular , we study properties which are valid after an arbitrary number of loop iterates .",
    "such properties are called _ loop invariants _ of the program .",
    "formally , we use the cpds representation of a given program and we say that @xmath70 is a loop invariant of this program if : @xmath71 where @xmath24 is defined at equation   as the state variable at step @xmath18 of the cpds representation of the program .",
    "now , let us consider a program of the form described in figure  [ programstyle ] and let us denote by @xmath72 the cpds representation of this program .",
    "the set @xmath73 of _ reachable values _ is the set of all possible values taken by the state variable along the running of @xmath72 .",
    "we define @xmath73 as follows : @xmath74 to prove that a set @xmath70 is a loop invariant of the program is equivalent to prove that @xmath75 .",
    "we can rewrite @xmath73 by introducing auxiliary variables @xmath76 ,",
    "@xmath27 : @xmath77 let us denote by @xmath78 the set of subsets of @xmath5 and introduce the map @xmath79 defined by : @xmath80 we equip @xmath81 with the partial order of inclusion and @xmath82 by the standard component - wise partial order . the infimum is understood in this sense i.e. as the greatest lower bound with respect to this order .",
    "the smallest fixed point problem is : @xmath83 it is well - known from tarski s theorem that the solution of this problem exists , is unique and in this case , it corresponds to @xmath84 where @xmath85 are defined in equation  .",
    "tarski s theorem also states that @xmath84 is the smallest solution of the following problem : @xmath86    we warn the reader that the construction of @xmath87 is completely determined by the data of the cpds @xmath72 .",
    "but for the sake of conciseness , we do not make it explicit on the notations .",
    "note also that the map @xmath87 corresponds to a standard transfer function ( or collecting semantics functional ) applied to the cpds representation of a program .",
    "since @xmath88 , the transfer function @xmath87 associated to the cpds of example  [ running ] is given by : @xmath89    to prove that a subset @xmath70 is a loop invariant , it suffices to show that @xmath90 satisfies @xmath91 .",
    "nevertheless , @xmath87 is still not computable and we use abstract interpretation  @xcite to provide safe over - approximations of @xmath87 .",
    "next , we use generalized abstract template domains as abstract domains and we construct a safe over - approximation of @xmath87 using a galois connection . in this paper , we consider invariants defined from properties which are encoded with sublevel sets of given functions . a loop invariant is supposed to be the union of sublevel sets of a given function from @xmath5 to @xmath6 .",
    "[ funproperty ] given a function @xmath92 from @xmath5 to @xmath6 , we define the sublevel property @xmath93 as follows : @xmath94    1 .",
    "let @xmath92 be a norm on @xmath5 , then @xmath93 is the property `` the values taken by the variables are bounded '' .",
    "2 .   let @xmath95 , then @xmath93 is the property `` the values taken by the variable @xmath96 are bounded from above '' .",
    "3 .   we can ensure that the set of possible values taken by the program variables avoids an unsafe region with a fixed level sublevel property .",
    "for example , if the property to show consists in proving that the square norm of the variable is still greater than 1 , we can set @xmath97 and restrict the sublevel sets to those for which @xmath98 .",
    "a sublevel property is called _ sublevel invariant _ when this property is a loop invariant .",
    "we describe how to construct template bases , so that we can prove that a sublevel property is a sublevel invariant .",
    "the concept of generalized templates was introduced in  @xcite .",
    "let @xmath99 stands for the set of functions from @xmath5 to @xmath6 .",
    "[ templatedef ] a generalized template @xmath100 is a function from @xmath5 to @xmath6 over the vector of variables @xmath1 .",
    "templates can be viewed as implicit functional relations on variables to prove certain properties on the analyzed program .",
    "we denote by @xmath101 the set of templates .",
    "first , we suppose that @xmath101 is given by some oracle and say that @xmath101 forms a template basis . here , we recall the required background about generalized templates ( see  @xcite for more details ) .      we replace the classical concrete semantics by meaning of sublevel sets i.e. we have a functional representation of numerical invariants through the functions of @xmath101 . an invariant is determined as the intersection of sublevel sets . the problem is thus reduced to find optimal level sets on each template @xmath100 .",
    "let @xmath102 stands for the set of functions from @xmath101 to @xmath103 .",
    "[ concretisation ] for @xmath104 , we associate the @xmath101-sublevel set @xmath105 given by : @xmath106    in convex analysis , a closed convex set can be represented by its support function i.e. the supremum of linear forms on the set ( e.g.  @xcite ) . here",
    ", we use the generalization by moreau  @xcite ( see also  @xcite ) which consists in replacing the linear forms by the functions @xmath107 .    [ ppsupport ] to @xmath108 , we associate the abstract support function denoted by @xmath109 and defined by : @xmath110    let @xmath111 and @xmath112 be two ordered sets equipped respectively by the order @xmath113 and @xmath114 .",
    "let @xmath115 be a map from @xmath111 to @xmath112 and @xmath116 be a map from @xmath112 to @xmath111 .",
    "we say that the pair @xmath117 defines a galois connection between @xmath111 and @xmath112 if and only if @xmath115 and @xmath116 are monotonic and the equivalence @xmath118 holds for all @xmath119 and all @xmath120 .",
    "we equip @xmath102 with the partial order of real - valued functions i.e. @xmath121 . the set @xmath78 is equipped with the inclusion order .",
    "[ galois ] the pair of maps @xmath122 and @xmath123 defines a galois connection between @xmath102 and the set of subsets of @xmath5 .    in the terminology of abstract interpretation , @xmath124 is the abstraction function , and @xmath125 is the concretisation function .",
    "the galois connection result provides the correctness of the semantics .",
    "we also remind the following property :    @xmath126      now , we are interested in closed elements ( in term of galois connection ) , called @xmath101-convex elements .",
    "[ abstractconvexity ] let @xmath104 , we say that @xmath127 is a @xmath101-convex function if @xmath128 .",
    "a set @xmath108 is a @xmath101-convex set if @xmath129 .",
    "we respectively denote by @xmath130 and @xmath131 the set of @xmath101-convex functions of @xmath102 and the set of @xmath101-convex sets of @xmath5 .",
    "the family of functions @xmath130 is ordered by the partial order of real - valued functions .",
    "the family of sets @xmath131 is ordered by the inclusion order .",
    "galois connection allows to construct lattice operations on @xmath101-convex elements .",
    "let @xmath132 and @xmath127 be in @xmath102 .",
    "we denote by @xmath133 and @xmath134 the functions defined respectively by , @xmath135 and @xmath136 .",
    "we equip @xmath130 with the join operator @xmath137 and the meet operator @xmath138 .",
    "similarly , we equip @xmath131 with the join operator @xmath139 and the meet operator @xmath140 .",
    "the next theorem follows readily from the fact that the pair of @xmath141 and @xmath142 defines a galois connection ( see e.g.  @xcite ) .    [ lattice ] the complete lattices @xmath143 and @xmath144 are isomorphic .",
    "since the pair of maps @xmath122 and @xmath123 is a galois connection ( proposition  [ galois ] ) , we can construct abstract semantics functional from this pair and the map @xmath87 defined at equation  .",
    "we obtain a map @xmath145 from @xmath146 to itself defined for @xmath147 and @xmath107 by : @xmath148 since @xmath87 is conditioned by the data of the cpds @xmath72 , it is also the case for @xmath145 . as a corollary of theorem  [ lattice ] ,",
    "the best abstraction of @xmath73 in the lattice @xmath130 is the smallest fixed point of equation  .",
    "@xmath149 the infimum is understood in the sense of the order of the component - wise order of the complete lattice @xmath146 .",
    "using tarski s theorem , the solution of equation   exists and is unique and is usually called the abstract semantics .",
    "this latter solution is optimal but any feasible solution could provide an answer to decide whether a sublevel property is an invariant of the program .",
    "[ feasibleinvariantbound ] the function @xmath150 is a feasible invariant bound w.r.t . to the cpds @xmath151 iff it exists @xmath152 such that : @xmath153 in the sequel , we denote by @xmath154 the set of feasible invariant bounds .    from the definition of feasible invariant bound , we state the following proposition .",
    "[ basicresults ] let us consider a cpds @xmath151 .",
    "the following statements are true :    1 .",
    "let @xmath155 be a solution of problem  , then @xmath156 is the smallest feasible invariant bound w.r.t .",
    "@xmath72 ; 2 .   for all @xmath157 , @xmath158 .",
    "for a given program represented by the cpds @xmath72 , we recall that an invariant @xmath69 is to said be an _ inductive invariant _ of this program if for all @xmath18 , the implication @xmath159 holds for the state variable @xmath24 . next , for a given function @xmath150 , we give a simple condition in term of inductive invariants ( up to test functions ) for @xmath127 to be a feasible invariant bound .",
    "[ inductive ] let us consider the cpds @xmath151 and @xmath150 .",
    "suppose that : @xmath160 then @xmath157 .    from the definition of the @xmath124 operator and proposition  [ galois ] , conjunction   holds with @xmath161 for all @xmath27 .",
    "we recalled that abstract template domains produce invariants , i.e. @xmath101-sublevel sets of feasible invariant bounds .",
    "it is not surprising since abstract template domains are abstract domains .",
    "the main issue is that @xmath101 is supposed to be given .",
    "the question is which templates basis @xmath101 can produce a nontrivial ( strictly smaller that @xmath5 ) feasible invariant bound ?",
    "this question can be refined when we want to show that some sublevel property is an invariant : which templates basis can ensure that the sublevel property is an invariant of the program ?",
    "we propose an answer by considering equation   as a system of equations , where unknowns are the template basis @xmath101 and @xmath150 . given a sublevel @xmath93 , we also impose that @xmath127 and @xmath101 satisfy @xmath162 .",
    "this latter constraint leads to the computation of a level @xmath163 for which @xmath164 is an invariant of the program .",
    "here , we describe how to certify that a sublevel property is a loop invariant using sum - of - squares ( sos ) approximations . in section  [ general ] ,",
    "we provide a formal definition of the set of template bases that we shall use to the latter certification .",
    "then we describe how to construct template bases so that we can prove sublevel properties ( section  [ simplemethods ] ) . in the end , we explain how to compute such bases in practice , by solving a hierarchy of sos programs ( section  [ sos ] ) .",
    "[ boundwellrepre ] let @xmath93 be a sublevel property and @xmath165 be a cpds .",
    "the template basis @xmath101 is well - representative w.r.t . @xmath72 and @xmath93 iff there exists @xmath157 such that @xmath162 .    in the sequel",
    ", we fix a cpds @xmath165 and a sublevel property @xmath93 .",
    "well - representative template bases explicit the sets of implicit functional relations on the program variables , needed to prove that a sublevel property is an invariant .",
    "next , we define a cone structure to strengthen the notion of well - representative bases",
    ".    [ convexcones ] a non - empty subset @xmath0 of @xmath166 is a convex cone containing the scalars iff :    1 .   for all @xmath167 , for all @xmath168 , @xmath169 ; 2 .   for all",
    "@xmath170 , @xmath171 ; 3 .   for all @xmath172 , @xmath173 ;    in the sequel , we write @xmath174 instead of @xmath173 , for each @xmath175 . for a convex cone containing the scalars @xmath0",
    ", @xmath176 stands for the set of vectors of @xmath177 elements of @xmath178 and @xmath179 stands for the set of tableaux of @xmath180 elements of @xmath0 . for @xmath181 ,",
    "we denote the `` row m '' of @xmath182 by @xmath183 and the `` column j '' of @xmath182 by @xmath184 .",
    "thus @xmath185 refers to the @xmath186 element of the tableau @xmath182 .",
    "we derive a stronger notion of well - representative template bases , namely @xmath0 well - representative template bases this notion is more restrictive , as a @xmath0 well - representative template basis deals with a system of inequalities instead of conjunctions of implications .",
    "[ kwell ] a finite template basis @xmath187 is a @xmath0 well - representative template basis w.r.t . @xmath72 and @xmath93 iff there exist @xmath188 , @xmath189 , @xmath190 and for all @xmath27 , there exist @xmath191 , @xmath192 , @xmath193 such that :    1 .",
    "initial condition satisfiability : @xmath194 , @xmath195 2 .",
    "`` local '' branch satisfiability : @xmath194 , @xmath196 : @xmath197 3 .",
    "property satisfiability : @xmath198    for the sake of presentation , let us define for all @xmath199 , for all @xmath27 : @xmath200    [ strongex ] consider example  [ running ] .",
    "we are interested in proving the boundedness of the values taken by the variables of the program . for @xmath63 , let consider @xmath201 . recall that @xmath202 \\times [ b_1 , b_2],\\   x^0={{\\mathbb r}^d},\\ x^1=\\{x\\in{\\mathbb r}^2\\mid x_1 ^ 2+x_2 ^ 2\\leq 1\\},\\quad x^2=\\{x\\in{\\mathbb r}^2\\mid -x_1 ^ 2-x_2 ^ 2",
    "< -1\\ } $ ] , @xmath203 and @xmath204 .",
    "let @xmath205 and @xmath206 be a singleton template basis . then @xmath206 is @xmath0 well - representative w.r.t .",
    "the cpds @xmath61 and @xmath93 iff there exists @xmath207 , @xmath208 , @xmath209 , @xmath210 and @xmath211 such that : @xmath212 \\times [ b_1 , b_2 ] } p(y )",
    "\\,,\\\\ \\forall x\\in{\\mathbb r}^2,\\ w-\\lambda^1(x ) ( w - p(x))-p(t^1(x ) ) + \\gamma^1(x)(\\norm{x}_2 ^ 2 - 1)\\geq 0 \\ , ,",
    "\\\\ \\forall x\\in{\\mathbb r}^2,\\ w-\\lambda^2(x ) ( w - p(x))-p(t^2(x ) ) + \\gamma^2(x)(1-\\norm{x}_2 ^ 2)\\geq 0 \\ , , \\\\ \\forall x\\in{\\mathbb r}^2,\\ \\alpha -\\norm{x}_2 ^ 2 -\\nu(x ) ( w - p(x))\\geq 0 \\ , .",
    "\\end{array } \\right.\\ ] ]    note that generating inductive invariants is well known to yield undesirable nonlinear optimization problems ( e.g. bilinearity , as in  @xcite ) . here",
    "nonlinearity is avoided by fixing the parameters @xmath213 and @xmath214 to 1 , so that the two last inequalities of definition  [ kwell ] become linear in the variables @xmath215 , @xmath216 , @xmath163 and the parameters @xmath217 .",
    "the next lemma states that @xmath0 well - representative templates bases are well - representative template bases . this result is an application of s - lemma with `` nonnegative functions multipliers '' .    [ funslemma ] let @xmath218 and @xmath219 .",
    "if there exists @xmath220 such that @xmath221 then @xmath222    assuming that the inequality   holds for some @xmath220 , we obtain @xmath223 .",
    "the positivity of @xmath224 yields the desired result .",
    "[ soswell ] assume that a finite template basis @xmath101 is @xmath0 well - representative w.r.t . @xmath72 and @xmath93 .",
    "then @xmath101 is well - representative w.r.t . @xmath72 and @xmath93 .",
    "@xmath187 is @xmath0 well - representative .",
    "then there exists @xmath188 , @xmath189 and @xmath190 and for all @xmath27 , @xmath191 , @xmath225 , @xmath226 such that , for all @xmath227 , for all @xmath27 , @xmath228 , @xmath229 ( @xmath228 and @xmath230 defined at equation  ) and @xmath231 .",
    "we set , for all @xmath227 , @xmath232 . from proposition",
    "[ galois ] , @xmath233 for all @xmath227 is equivalent to @xmath234 and @xmath235 for all @xmath227 and for all @xmath27 imply respectively , by lemma  [ funslemma ] for all @xmath27 , @xmath236 .",
    "taking @xmath237 , we have from equation  , @xmath238 and @xmath239 . by proposition",
    "[ inductive ] , @xmath240 .",
    "finally @xmath229 implies that @xmath241 by lemma  [ funslemma ] .    this proof exhibits a feasible invariant bound which is given by the variable @xmath127 of the system of inequalities in definition  [ kwell ] .      in this subsection",
    ", we discuss how to simply construct @xmath0 well - representative template bases .",
    "[ onlyone ] let @xmath206 be a @xmath0 well - representative template basis w.r.t .",
    "@xmath72 and @xmath93 and @xmath242 be a finite subset of @xmath99 @xmath243 for all @xmath244 , @xmath245 , for all @xmath27 , @xmath246",
    ". then @xmath247 is a @xmath0 well - representative template basis w.r.t .",
    "@xmath72 and @xmath93 .",
    "suppose that @xmath206 is @xmath0 well - representative w.r.t .",
    "@xmath93 . by definition ,",
    "there exists @xmath207 , @xmath189 and @xmath248 and for all @xmath27 , @xmath249 , @xmath250 , @xmath251 , @xmath248 such that the functions for all @xmath27 , @xmath252 , @xmath230 belong to @xmath0 ( @xmath253 and @xmath230 defined at equation  ) and @xmath254 .",
    "let us take @xmath255 such that @xmath245 .",
    "it follows that @xmath256 and thus : @xmath257 .",
    "now let @xmath27 , since @xmath258 then there exists @xmath167 such that @xmath259 for all @xmath260 , we have @xmath261 for all @xmath260 .",
    "since @xmath0 is closed under addition then @xmath262 .",
    "now @xmath263 implies that @xmath264 .",
    "it follows that @xmath265 is @xmath0 well - representative w.r.t . @xmath72 and @xmath93 by taking @xmath266 , @xmath189 , @xmath267 and for all @xmath27 , @xmath268 , @xmath269 ( following the order of the parameters of definition  [ kwell ] ) .",
    "we conclude by induction on the elements @xmath255 .",
    "[ lyapunov ] let us consider the following program :    c    .... x $ \\in$ $ \\xin$ ; while ( -1<=0 ) {     x = $ a$x ; } ....    where @xmath21 is a bounded set , @xmath270 is a @xmath271 matrix .",
    "its cpds representation is @xmath272 .",
    "suppose there exists a symmetric matrix @xmath70 such that : @xmath273 where @xmath274 for two symmetric matrices means that @xmath275 for all @xmath13 and @xmath276 is the identity matrix .",
    "let @xmath277 and let us denote by @xmath278 the @xmath271 matrix such that @xmath279 if @xmath280 and 0 otherwise .",
    "remark that @xmath281 for all @xmath277 .",
    "let @xmath282 .",
    "then @xmath283 is a @xmath0 well - representative template basis w.r.t . @xmath284 and @xmath285 .",
    "we write @xmath286 ( since @xmath21 is bounded and @xmath287 is continuous ) .",
    "we have to exhibit @xmath288 and @xmath289 such that : @xmath290 , @xmath291 and @xmath292 . taking @xmath293 and @xmath294 , the latter inequalities become @xmath295 and @xmath296 .",
    "so @xmath297 .",
    "thus , @xmath298 is a @xmath0 well - representative template basis w.r.t . @xmath284 and @xmath285 .",
    "now @xmath299 implies that @xmath300 and then @xmath301 . for all @xmath277 , for all @xmath260 , @xmath302 . by proposition  [ onlyone ] , a @xmath0 well - representative template basis w.r.t . @xmath284 and @xmath285 .",
    "this example shows that the quadratic forms ( lyapunov functions for discrete - time linear systems ) @xmath287 for @xmath70 satisfying equation   combined with @xmath303 are used in the setting of quadratic templates .",
    "another possibility consists in constructing a @xmath0 well - representative template basis w.r.t .",
    "@xmath72 and @xmath93 from a vector of templates @xmath304 such that for all @xmath305 , @xmath306 is a @xmath0 well - representative templates w.r.t . @xmath72 and @xmath93 ( proposition  [ twowell ] ) .",
    "[ twowell ] let @xmath206 and @xmath242 two @xmath0 well - representative template bases w.r.t .",
    "@xmath72 and @xmath93",
    ". then @xmath307 is a @xmath0 well - representative template basis w.r.t . @xmath72 and @xmath93 .    by induction",
    ", it suffices to prove the result for @xmath308 .",
    "we write @xmath309 and @xmath310 . by definition , for @xmath311 , there exist @xmath312 , @xmath313 , @xmath190 and for all @xmath27 @xmath314 such that @xmath315 ( @xmath228 and @xmath230 defined at equation  ) and @xmath316 .",
    "it follows that @xmath265 is @xmath0 well - representative w.r.t .",
    "@xmath72 and @xmath93 by taking @xmath317 , @xmath318 , ( @xmath319 and for all @xmath27 , @xmath320 , @xmath321 ( following the order of the parameters in definition  [ kwell ] )",
    ". to conclude , we use the fact that @xmath0 is closed under nonnegative scalar multiplications .",
    "let @xmath322 $ ] stands for the set of @xmath68-variate polynomials and @xmath323 $ ] be its subspace of polynomials of degree at most @xmath324 .",
    "we instantiate @xmath325 by the cone of sum - of - squares ( sos ) , that is @xmath326 : = \\bigl\\{\\,\\sum_i q_i^2 , \\ , \\text { with } q_i \\in { \\mathbb r}[x ] \\bigr\\}$ ] . in the sequel",
    ", we assume that the data of the cpds representation @xmath72 of some analyzed program are polynomials , that is for all @xmath327 , @xmath328 $ ] , for all @xmath327 , @xmath329 $ ] , for all @xmath27 , @xmath330 $ ] and for all @xmath331 , @xmath332 $ ] .",
    "we look for a single polynomial template @xmath333 $ ] ( @xmath334 ) such that the basis @xmath206 is @xmath335 $ ] well - representative w.r.t . @xmath72 and @xmath93 ,",
    "thus satisfies the three conditions of definition  [ kwell ] .",
    "one way to strengthen the three conditions of definition  [ kwell ] is to take @xmath336 , for all @xmath27 , @xmath337 , then to consider the following _ hierarchy _ of sos constraints , parametrized by the integer @xmath338 : @xmath339 \\enspace , w \\in { \\mathbb r}\\enspace , \\\\",
    "\\sigma_0 \\in \\sigma[x ] \\enspace , \\ \\deg \\sigma_0 \\leq 2 m \\enspace , \\\\ \\forall\\ , j = 1 , \\dots , n_{\\mathrm{in}}\\enspace , \\",
    "\\sigma_j \\in \\sigma[x ] \\enspace , \\",
    "\\deg ( \\sigma_j g_j ) \\leq 2 m   \\enspace , \\\\ \\\\",
    "\\forall\\ , i\\in{\\mathcal{i}}\\enspace , \\",
    "\\sigma^i\\in \\sigma[x]\\enspace , \\",
    "\\deg ( \\sigma^i ) \\leq 2 m \\deg t^i \\enspace,\\\\ \\forall\\ , i\\in{\\mathcal{i}}\\enspace , \\",
    "\\forall\\ , j=1,\\ldots , n_i \\enspace,\\ \\mu_j^i\\in\\sigma[x]\\enspace , \\ \\deg ( \\mu_j^i r_j^i )   \\leq 2 m \\deg t^i \\enspace , \\\\ \\forall\\ , i\\in{\\mathcal{i}}\\enspace , \\",
    "\\forall\\ , j=1,\\ldots , n_0\\enspace , \\",
    "\\gamma^i\\in \\sigma[x]\\enspace , \\",
    "\\deg ( \\gamma_j^i r_j^0 )   \\leq 2 m \\deg t^i   \\enspace , \\\\ \\\\",
    "\\psi \\in \\sigma[x ] \\enspace,\\ \\deg ( \\psi ) \\leq 2 m   \\enspace .\\\\",
    "\\end{array } \\right.\\ ] ] for an integer @xmath338 , we denote by @xmath340 the set of constraints on the decision variables @xmath341 and @xmath115 depicted at equation  .    as objective function",
    ", we choose to minimize @xmath127 .",
    "the intuition behind this choice is that @xmath127 is enforced to be equal to @xmath163 which defines the level for which @xmath342 is an invariant of the program associated to the cpds @xmath72 .",
    "when @xmath92 is the norm , a minimal value @xmath127 ( and thus @xmath163 ) would be the smallest computable bound on the norm of the state variable @xmath24 .",
    "thus we synthetize a polynomial template of degree at most @xmath343 by solving the following minimization problem : @xmath344    hence , computing the polynomial template @xmath333 $ ] boils down to solving an sos minimization problem . from an optimal solution of program",
    ", one can extract the polynomials @xmath345 $ ] and for all @xmath27 , the polynomials @xmath346 $ ] , which are called _",
    "sos certificates_. in practice , one can use the matlab toolbox yalmip @xcite , which includes a high - level parser for nonlinear optimization and has a built - in module for such sos calculations .",
    "yalmip reduces sos programming to semidefinite programming ( sdp ) ( see e.g.  @xcite for more details about sdp ) , which in turn can be handled with efficient sdp solvers , such as mosek  @xcite . in our setting the choice @xmath347 avoids numerical issues while solving sdp programs .",
    "[ [ computational - considerations ] ] computational considerations + + + + + + + + + + + + + + + + + + + + + + + + + + + +    define @xmath348 . at step @xmath338 of this hierarchy ,",
    "the number of sdp variables is proportional to @xmath349 and the number of sdp constraints is proportional to @xmath350 .",
    "thus , one expects tractable approximations when the number @xmath68 of variables ( resp .",
    "the degree @xmath324 of the template @xmath100 ) is small .",
    "however , one can handle bigger instances of problem   by taking into account the system properties .",
    "for instance one could exploit sparsity as in  @xcite by considering the variable sparsity correlation pattern of the polynomials @xmath351 and @xmath92 .",
    "recall that @xmath73 is the set of possible values taken by the cpds @xmath72 , which are also the possible values taken by the variables of the program represented by @xmath72 .",
    "[ outer ] assume that step @xmath338 of problem   yields a feasible solution and denote by @xmath352 $ ] ( resp .",
    "@xmath353 ) the polynomial template ( resp .",
    "the upper bound of @xmath354 over @xmath21 ) associated to this solution .",
    "let @xmath355 and thus @xmath356",
    ". then @xmath357 and @xmath358 .    as a consequence of the first equality constraint of problem",
    ", one has @xmath359 .",
    "then , the finite template basis @xmath360 is @xmath335 $ ] well - representative w.r.t . @xmath72 and @xmath93 . by theorem  [ soswell ] , this basis is well - representative w.r.t . @xmath72 and @xmath93 . in the proof of theorem  [ soswell ]",
    ", we also proved that @xmath240 and @xmath361 .",
    "thus from the second statement of proposition  [ basicresults ] , @xmath357 and @xmath93 is sublevel invariant .",
    "the next corollary follows directly from proposition  [ twowell ] and proposition  [ outer ] .",
    "[ outerbasis ] given some integers @xmath177 and @xmath338 , assume that steps @xmath362 of problem   yield respective feasible polynomial solutions @xmath363 .",
    "then , @xmath364 is a @xmath335 $ ] well - representative template basis w.r.t . @xmath72 and @xmath93 .",
    "here , we perform some numerical experiments while solving problem   ( given in section  [ sos ] ) on several examples . in section  [ benchbound ] , we verify that the program of example  [ running ] satisfies some boundedness property .",
    "we also provide examples involving higher dimensional cases .",
    "then , section  [ benchsafe ] focuses on checking that the set of variable values avoids an unsafe region .",
    "numerical experiments are performed on an intel core i5 cpu ( @xmath365ghz ) with yalmip being interfaced with the sdp solver mosek . for the sake of simplicity , we write @xmath366 instead of @xmath355.[bench ]      [ ex : test ] following example  [ running ] , we consider the constrained piecewise discrete - time dynamical system @xmath367 with @xmath368 \\times [ 0 , 0.2 ] $ ] , @xmath369 with @xmath370 , @xmath371 with @xmath372 , @xmath373 with @xmath374 and @xmath375 , @xmath376 .",
    "we are interested in proving the boundedness property which a sublevel property @xmath93 with @xmath377 .    here",
    "we illustrate the method by instantiating the program of example  [ running ] with the following input : @xmath378 , @xmath379 , @xmath380 , @xmath381 , @xmath382 , @xmath383 , @xmath384 , @xmath385 and @xmath386 .",
    "we represent the possible initial values taken by the program variables @xmath387 by picking uniformly @xmath388 points @xmath389 inside the box @xmath368 \\times [ 0 , 0.2]$ ] ( see the corresponding square of dots on figure  [ fig : test ] ) .",
    "the other dots are obtained after successive updates of each point @xmath390 by the program of example  [ running ] .",
    "the sets of dots in figure  [ fig : test ] are obtained with @xmath391 and six successive iterations .    at step @xmath392 , program   already yields a feasible solution , from which one can extract the polynomial template @xmath393 and @xmath394 .",
    "the sos certificates extracted from this solution guarantee the boundedness property , that is @xmath395 .",
    "figure  [ fig : test ] displays in light gray outer approximations of the set of possible values @xmath396 taken by the program of example  [ ex : test ] as follows : ( a ) the degree six sublevel set @xmath397 , ( b ) the degree eight sublevel set @xmath398 and ( c ) the degree ten sublevel set @xmath399 . the outer approximation @xmath397 is coarse as it contains the box @xmath400 ^ 2 $ ] .",
    "however , solving problem   at higher steps yields tighter outer approximations of @xmath73 together with more precise bounds @xmath401 and @xmath402 .",
    "finally , @xmath403 is a @xmath335 $ ] well - representative template basis w.r.t . to @xmath72 and @xmath285 for the program of example  [ ex : test ] .",
    "we also succeeded to certify that the same property holds for higher dimensional programs , described in example  [ ex : test3 ] ( @xmath404 ) and example  [ ex : test4 ] ( @xmath405 ) .",
    "[ ex : test3 ] here we consider @xmath368 \\times [ 0 , 0.2]^2 $ ] , @xmath370 , @xmath406 , @xmath374 , @xmath407 , @xmath408 and @xmath377 .",
    "[ ex : test4 ] here we consider @xmath368 \\times [ 0 , 0.2]^3 $ ] , @xmath370 , @xmath406 , @xmath374 , @xmath409 , @xmath410 and @xmath377 .",
    "table  [ table : bench ] reports several data obtained while solving problem   at step @xmath338 , ( @xmath411 ) , either for example  [ ex : test ] , example  [ ex : test3 ] or example  [ ex : test4 ] .",
    "each instance of problem   is recast as an sdp program , involving a total number of `` nb .",
    "vars '' sdp variables , with an sdp matrix of size `` mat .",
    "we indicate the cpu time required to compute the optimal solution of each sdp program with mosek .",
    "the symbol `` @xmath412 '' means that the corresponding sos program could not be solved within one day of computation .",
    "these benchmarks illustrate the computational considerations mentioned in section  [ sos ] as it takes more cpu time to analyze higher dimensional programs .",
    "note that it is not possible to solve problem   at step @xmath413 for example  [ ex : test4 ] .",
    "a possible workaround to limit this computational blow - up would be to exploit the sparsity of the system .",
    ".comparison of timing results for example  [ ex : test ] ,  [ ex : test3 ] and  [ ex : test4 ] [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]     [ table : bench ]      here we consider the program given in example  [ ex : test4 ] .",
    "one is interested in showing that the set @xmath396 of possible values taken by the variables of this program does not meet the ball @xmath414 of center @xmath415 and radius @xmath416 .",
    "[ ex : testout ] let consider the cpds @xmath367 with @xmath417 \\times [ 0.5 , 0.7 ] $ ] , @xmath369 with @xmath370 , @xmath371 with @xmath418 , @xmath419 with @xmath374 and @xmath420 , @xmath421 . with @xmath422 ,",
    "one has @xmath423 and one shall prove that @xmath424 .",
    "note that @xmath92 is not a norm , by contrast with the previous examples .",
    "at steps @xmath425 , program   yields feasible solutions with nonnegative bounds @xmath426 .",
    "hence , it does not allow to certify that @xmath427 is empty .",
    "this is illustrated in both figure  [ fig : testout ] ( a ) and figure  [ fig : testout ] ( b ) , where the light grey region does not avoid the ball @xmath414 .",
    "however , solving the sos feasibility program at step @xmath428 yields a negative bound @xmath402 together with a certificate that @xmath73 avoids the ball @xmath414 ( see figure  [ fig : testout ] ( c ) ) .",
    "finally , @xmath429 is a single polynomial template basis w.r.t . @xmath72 and @xmath93 with the restriction that @xmath430 for some @xmath431 for the program of example  [ ex : testout ] .",
    "in this paper , we give a formal framework to relate the template generation problem to the property to prove on analyzed program : well - representative templates .",
    "we proposed a practical method to compute well - representative template bases in the case of polynomial arithmetic using sum - of - squares programming .",
    "this method is able to handle non trivial examples , as illustrated through the numerical experiments .",
    "topics of further investigation include refining the invariant bounds generated for a specific sublevel property , by applying the policy iteration algorithm .",
    "such a refinement would be of particular interest if one can not decide whether the set of variables values avoids an unsafe region when the feasible invariant bound yields a negative value for @xmath163 .",
    "for the case of boundedness property , it would allow to decrease the value of the bounds on the variables .",
    "finally , our method could be generalized to a larger class of programs , involving semialgebraic or transcendental assignments , by using the same polynomial reduction techniques as in  @xcite ."
  ],
  "abstract_text": [
    "<S> template abstract domains allow to express more interesting properties than classical abstract domains . </S>",
    "<S> however , template generation is a challenging problem when one uses template abstract domains for program analysis . in this paper </S>",
    "<S> , we relate template generation with the program properties that we want to prove . </S>",
    "<S> we focus on one - loop programs with nested conditional branches . </S>",
    "<S> we formally define the notion of well - representative template basis with respect to such programs and a given property . </S>",
    "<S> the definition relies on the fact that template abstract domains produce inductive invariants . </S>",
    "<S> we show that these invariants can be obtained by solving certain systems of functional inequalities . </S>",
    "<S> then , such systems can be strengthened using a hierarchy of sum - of - squares ( sos ) problems when we consider programs written in polynomial arithmetic . </S>",
    "<S> each step of the sos hierarchy can possibly provide a solution which in turn yields an invariant together with a certificate that the desired property holds . </S>",
    "<S> the interest of this approach is illustrated on nontrivial program examples in polynomial arithmetic .    </S>",
    "<S> # 1    # 1#2#1,#2 </S>"
  ]
}