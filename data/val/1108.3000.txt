{
  "article_text": [
    "a simplicial arrangement is a finite set @xmath7 of hyperplanes in @xmath8 such that the connected components of @xmath9 are simplicial cones ( compare ( * ? ? ?",
    "* def .  5.14 ) ) . for @xmath10",
    ", it may be visualized as a triangulation of the plane by lines ( for example fig .  [ a25 ] ) .",
    "the classification of simplicial arrangements is still an open problem .",
    "there is an impressive catalogue @xcite of the known simplicial arrangements in dimension three : the many sporadic cases are probably the main reason why a classification appears to be so difficult .    but let us assume that we have some theorem stating that a given catalogue is complete",
    ". then it would be desirable to find a short proof .",
    "however , it is possible that a shortest proof of such a theorem is very long , so long that it would take several thousand pages to print it . in such a situation",
    "we nowadays take advantage of a computer : if the proof consists of a case - by - case analysis , i.e.  we have to comb through a large tree with branches mostly leading to contradictions , then a computer is exactly the right tool to use .    in a previous work @xcite ,",
    "together with heckenberger we have classified the large class of _ crystallographic arrangements _ ( see @xcite for a definition ) .",
    "the method used there is an algorithm which enumerates them all .",
    "this algorithm terminates because it exploits several strong theorems .",
    "but still , a computer has to check billions of branches of the enumerating tree .",
    "we do not claim that a short proof does not exist , but any other proof would need to address the large number of sporadic arrangements arising here",
    ".    the algorithm we propose does not have polynomial runtime in the number of lines of the arrangement .",
    "however , since it is conjectured that the largest sporadic simplicial arrangement has @xmath11 lines , one idea for a classification could be to determine all the simplicial arrangement with up to @xmath11 lines , and then prove in some other way that any simplicial arrangement with more than @xmath11 lines belongs to one of the infinite series . with this plan in mind , we are talking about algorithms with constant runtime , and thus we `` only '' need to make this constant small enough .",
    "we should also note here that although we concentrate on the case of dimension three ( or the projective plane ) , i believe that one can deduce a complete classification for all dimensions based upon a classification in dimension three .",
    "this was the case for the crystallographic arrangements mentioned above , see @xcite .",
    "the most important result of our computation is :    we have a complete list of all simplicial arrangements in the real projective plane with at most @xmath0 lines .",
    "we achieve this by enumerating wiring diagrams ( or allowable sequences ) and using the correspondence of goodman and pollack to arrangements of pseudolines . as a byproduct ,",
    "we find further examples of simplicial arrangements ( of pseudolines ) disproving the following two conjectures :    ( ( * ? ? ?",
    "2 ) ) up to isomorphism , there are only @xmath12 simplicial unstretchable arrangements of @xmath13 or @xmath5 pseudolines .",
    "( @xcite or ( * ? ? ?",
    "3 ) ) there are no simplicial arrangements of straight lines besides the three infinite families and @xmath14 sporadic arrangements listed in @xcite .",
    "we further obtain a proof for :    ( ( * ? ? ? * conj .  1 ) , @xcite or @xcite ) all simplicial arrangements with at most @xmath6 pseudolines are stretchable .",
    "the new arrangements have @xmath1 , @xmath2 , @xmath3 and @xmath4 lines and are all contained in the largest one with @xmath4 lines , see fig.[a25 ] . to obtain the smaller arrangements , remove the thicker lines .    in view of the ( to my eyes ) bizarre structure of the hasse diagram ,",
    "[ hassediag ] or ( * ? ? ?",
    "* fig .  4 ) , and considering the great amount of computations needed for our result",
    ", it is very impressive that grnbaum missed only four arrangements .",
    "notice that there are a few connections missing in ( * ? ? ?",
    "4 ) ; in particular it turns out that the arrangement @xmath15 is not maximal but contained in the arrangement @xmath16 .",
    "we reproduce the table @xcite here ( up to @xmath0 lines ) because of the new arrangements and because of a new column containing the automorphism groups of the arrangements .",
    "this article is organized as follows : we first review some properties of wirings in general .",
    "after several preparations we then give an algorithm to enumerate simplicial wirings .",
    "finally , we discuss stretchability and summarize the results .",
    "( 400,400)(100,200 ) ( 483.279413355678638377155548610,480.054085717084338934572008031 ) ( 130.503014223155076370906651531,293.836108715985595420223336931 ) ( 483.279413366770748824747498223,319.945914308310436083902262571 ) ( 130.503014233221380939685096682,506.163891300085860340335525427 ) ( 489.736659610102759919933612666,336.754446796632413360022129111 ) ( 110.263340389897240080066387334,336.754446796632413360022129111 ) ( 445.954063266690261424521593589,536.738478183512692236918153419 ) ( 142.115774818872439595591226237,277.229598685371212288294142057 ) ( 499.968941388255175537018828007,396.475446118929904989386784716 ) ( 100.031058611744824462981171993,396.475446118929904989386784716 ) ( 500.000000000000000000000000000,400.000000000000000000000000000 ) ( 100.000000000000000000000000000,400.000000000000000000000000000 ) ( 412.292242319575928957559574424,565.500611221957850490508954421 ) ( 177.908477497051516354885389898,241.590214529177446918065556730 ) ( 460.513064322353212583522693744,280.687149971815272993458539764 ) ( 157.049756033705141617363954623,539.875758264170923619199083957 ) ( 100.558059476087039337223223320,414.930249832335867314618844439 ) ( 1,0)398.883881047825921325553553360 ( 445.954063246347847139173955770,263.261521794773902285703895248 ) ( 142.115774800608038833929810232,522.770401291140546798449617421 ) ( 471.134416669537106401377383759,296.496321653879082232897979214 ) ( 117.993254917023979504547325809,482.906843772396643963738598479 ) ( 460.513064322353212583522693744,519.312850028184727006541460236 ) ( 157.049756033705141617363954623,260.124241735829076380800916043 ) ( 484.441096960441932830799310458,322.659960227390252484334427667 ) ( 116.588784385253314218725956535,479.751651937253948704511175819 ) ( 303.338505347899997175593871336,200.027865986177856364144395549 ) ( 0,1)399.944268027644287271711208902 ( 426.334971743568835670986142977,244.953313758237116378416192356 ) ( 192.229050979468058777861179225,568.479739278092145968955224612 ) ( 471.134416683226558598751035871,503.503678323486587720988154081 ) ( 117.993254927989283280041109110,317.093156203531045984840639524 ) ( 338.299787310127281517364357395,596.298564161837447847100721414 ) ( 338.299787310127281517364357395,203.701435838162552152899278586 ) ( 100.558059476087039337223223320,385.069750167664132685381155561 ) ( 1,0)398.883881047825921325553553360 ( 489.736659610102759919933612666,463.245553203367586639977870889 ) ( 110.263340389897240080066387334,463.245553203367586639977870889 ) ( 499.968941388255175537018828007,403.524553881070095010613215284 ) ( 100.031058611744824462981171993,403.524553881070095010613215284 ) ( 268.377223398316206680011064556,597.484176581314990174384610437 ) ( 268.377223398316206680011064556,202.515823418685009825615389563 ) ( 412.292242345792395890047456540,234.499388795830034619472747994 ) ( 177.908477522144746358038505178,558.409785490162713451409036924 ) ( 484.441096956146259179388725696,477.340039782854101704233379992 ) ( 116.588784380823693147337672844,320.248348072933203106675444791 ) ( 426.334971754565657189570080318,555.046686232802465507560496471 ) ( 192.229050991417631305617993376,231.520260714264105428847851383 ) ( 470,560)@xmath17    ( 400,60)(40,310 ) ( 58,305)(58,305)(66,325)(66,325)(74,335)(74,335)(82,345)(82,345)(90,355)(90,355)(98,360)(98,360)(106,370)(106,370)(114,375)(322,375 ) ( 58,310)(58,310)(66,320)(114,320)(122,325)(122,325)(130,335)(130,335)(138,345)(138,345)(146,360)(146,360)(154,370)(322,370 ) ( 58,315)(58,315)(66,315)(178,315)(186,330)(186,330)(194,335)(194,335)(202,355)(202,355)(210,365)(322,365 ) ( 58,320)(58,320)(66,310)(226,310)(234,315)(234,315)(242,325)(242,325)(250,330)(250,330)(258,340)(258,340)(266,350)(266,350)(274,360)(322,360 ) ( 58,325)(58,325)(66,305)(282,305)(290,315)(290,315)(298,335)(298,335)(306,350)(306,350)(314,355)(322,355 ) ( 58,330)(66,330)(74,330)(122,330)(130,330)(170,330)(178,340)(194,340)(202,350)(210,350)(218,355)(266,355)(274,355)(306,355)(314,350)(322,350 ) ( 58,335)(66,335)(74,325)(114,325)(122,320)(178,320)(186,325)(218,325)(226,335)(250,335)(258,335)(274,335)(282,340)(298,340)(306,345)(322,345 ) ( 58,340)(74,340)(82,340)(130,340)(138,340)(162,340)(170,345)(194,345)(202,345)(258,345)(266,345)(298,345)(306,340)(322,340 ) ( 58,345)(74,345)(82,335)(122,335)(130,325)(178,325)(186,320)(234,320)(242,320)(290,320)(298,330)(314,330)(322,335)(322,335 ) ( 58,350)(82,350)(90,350)(138,350)(146,355)(154,355)(162,360)(202,360)(210,360)(266,360)(274,350)(298,350)(306,335)(314,335)(322,330)(322,330 ) ( 58,355)(82,355)(90,345)(130,345)(138,335)(170,335)(178,335)(186,335)(194,330)(218,330)(226,330)(242,330)(250,325)(290,325)(298,325)(322,325 ) ( 58,360)(90,360)(98,355)(138,355)(146,350)(194,350)(202,340)(250,340)(258,330)(290,330)(298,320)(322,320 ) ( 58,365)(98,365)(106,365)(146,365)(154,365)(202,365)(210,355)(210,355)(218,350)(258,350)(266,340)(274,340)(282,335)(290,335)(298,315)(322,315 ) ( 58,370)(98,370)(106,360)(138,360)(146,345)(162,345)(170,340)(170,340)(178,330)(178,330)(186,315)(226,315)(234,310)(282,310)(290,310)(322,310 ) ( 58,375)(106,375)(114,370)(146,370)(154,360)(154,360)(162,355)(194,355)(202,335)(218,335)(226,325)(234,325)(242,315)(282,315)(290,305)(322,305 )    * acknowledgement . *",
    "i would like to thank m.  barakat for many valuable comments on a previous version of the manuscript .",
    "we first recall some definitions ( compare @xcite ) .",
    "[ allowseq ] a sequence @xmath18 of permutations in @xmath19 is an _ allowable sequence _ if    1 .",
    "@xmath20 $ ] , 2 .   @xmath21 $ ] , 3 .",
    "[ allowseq_3 ] for each @xmath22 there are @xmath23 such that @xmath24    we will encode an allowable sequence by the sequence of @xmath25 s and @xmath26 s , i.e. , @xmath27 is uniquely determined by the sequence of pairs",
    "@xmath28 with @xmath29    allowable sequences are in one - to - one correspondence to _ wiring diagrams _",
    "( for example fig .",
    "[ a15_ns ] ) .",
    "these are a very useful representation for arrangements of pseudolines ( for a proof see ( * ? ? ?",
    "2.9 ) or ( * ? ? ?",
    "6.3.3 ) ) :    every arrangement of pseudolines is isomorphic to a wiring diagram arrangement .",
    "it is easy to give an algorithm which computes a wiring for a given arrangement of straight lines , see ( * ? ? ?",
    "2 ) or lemma [ wirbeg ] for more details .    figure [ a15_ns ] shows an example of an _ unstretchable _ wiring , i.e. , the cell decomposition of @xmath30 induced by the wiring is not combinatorially isomorphic to the cell decomposition induced by some arrangement of straight lines .",
    "notice that this example is _ simplicial _ which means that all @xmath31-cells have exactly @xmath32 vertices .",
    "we will see that there is no unstretchable simplicial wiring with less than @xmath13 lines .",
    "our goal is to design an algorithm to enumerate simplicial arrangements , or more generally simplicial arrangements of pseudolines . by the above theorem",
    ", we may enumerate certain wiring diagrams instead . however , there are many different wiring diagrams which yield isomorphic arrangements .",
    "so the most important part will be to recognize symmetries to avoid computations producing no `` new '' wirings .",
    "but let us first look at a naive version of such an algorithm .",
    "let @xmath33 denote the set of allowable sequences in @xmath19 ( equivalently the set of wiring diagrams with @xmath34 rows ) . during the algorithm",
    ", we will successively enlarge a sequence @xmath35 until it becomes an element of @xmath33 .",
    "more precisely , we encode an allowable sequence in construction by the following data .    a _ wiring fragment _ @xmath36 consists of :    * @xmath37 * @xmath38\\in \\{1,\\ldots , n\\}^n$ ] , * @xmath39 , * number of lines @xmath40 going through the last junction in row @xmath41 for @xmath42 : @xmath43 where @xmath44 is maximal with @xmath45 . * for each @xmath41 , the number @xmath46 of finished vertices of the last @xmath31-cell between row @xmath41 and @xmath47 ( let @xmath48 be the number of vertices of the polygon between row @xmath34 and @xmath49 ) , * for each @xmath41 , the number @xmath50 of finished vertices of the first @xmath31-cell between row @xmath41 and @xmath47 ( we define @xmath51 ) , * the maximal @xmath52 such that @xmath53 for all @xmath54 , * the minimal @xmath55 such that @xmath53 for all @xmath56 ,    where @xmath57 and @xmath35 are being interpreted as the beginning of an allowable sequence and have to satisfy the corresponding axioms .",
    "we will call @xmath36 _ complete _ if @xmath58 $ ] . in this case , @xmath36 `` is '' an allowable sequence ( or a wiring ) , and @xmath59",
    ".    the wiring fragment is continuously updated during the algorithm .",
    "note that we will need most variables of the wiring fragment later but mention them already in this section to avoid a second definition .",
    "[ wirfragex ] shows a wiring fragment with the following data :    @xmath60,\\\\ { \\psi}&= & ( ( 1,5),(5,6),(6,8),(8,9),(9,11),(11,13),(13,14),(14,16),\\\\ & & ( 16,17),(17,19),(19,20),(4,6),(6,9),(9,11),(11,14),(14,17),\\\\ & & ( 17,19),(16,17),(8,9),(5,6),(3,5),(5,8),(8,11),(11,12),\\\\ & & ( 12,14),(14,16),(16,18),(10,12),(12,14)),\\\\ s_i&=&0,1,1,1,1,2,2,1,2,2,1,2,1,2,2,1,2,2,1,2,\\\\ v^i_m&=&2,1,2,1,2,1,1,2,1,2,1,2,1,1,2,2,1,1,2,2,\\\\ \\varepsilon^i_m&=&5,5,3,3,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,2,\\\\ d_m & = & 1,\\\\ u_m & = & 17.\\end{aligned}\\ ] ]    ( 400,150)(20,310 ) ( 50,306)@xmath61(58,308)(58,308)(66,340)(66,340)(74,348)(74,348)(82,364)(82,364)(90,372)(90,372)(98,388)(98,388)(106,404)(106,404)(114,412)(114,412)(122,428)(122,428)(130,436)(130,436)(138,452)(138,452)(146,460)(290,460)(290,458)@xmath61 ( 50,314)@xmath62(58,316)(58,316)(66,332)(146,332)(154,348)(154,348)(162,372)(162,372)(170,388)(170,388)(178,412)(178,412)(186,436)(186,436)(194,452)(290,452)(290,450)@xmath62 ( 50,322)@xmath63(58,324)(58,324)(66,324)(218,324)(226,340)(226,340)(234,364)(234,364)(242,388)(242,388)(250,396)(250,396)(258,412)(258,412)(266,428)(266,428)(274,444)(290,444)(290,442)@xmath63 ( 50,330)@xmath64(58,332)(58,332)(66,316)(290,316)(290,314)@xmath64 ( 50,338)@xmath65(58,340)(58,340)(66,308)(290,308)(290,306)@xmath65 ( 50,346)@xmath66(58,348)(66,348)(74,340)(146,340)(154,340)(210,340)(218,348)(226,348)(234,356)(290,356)(290,354)@xmath66 ( 50,354)@xmath67(58,356)(74,356)(82,356)(154,356)(162,364)(202,364)(210,372)(234,372)(242,380)(274,380)(282,396)(282,396)(290,412)(290,412)(290,410)@xmath67 ( 50,362)@xmath68(58,364)(74,364)(82,348)(146,348)(154,332)(218,332)(226,332)(290,332)(290,330)@xmath68 ( 50,370)@xmath69(58,372)(82,372)(90,364)(154,364)(162,356)(226,356)(234,348)(290,348)(290,346)@xmath69 ( 50,378)@xmath70(58,380)(90,380)(98,380)(162,380)(170,380)(234,380)(242,372)(290,372)(290,370)@xmath70 ( 50,386)@xmath71(58,388)(90,388)(98,372)(154,372)(162,348)(210,348)(218,340)(218,340)(226,324)(290,324)(290,322)@xmath71 ( 50,394)@xmath72(58,396)(98,396)(106,396)(170,396)(178,404)(250,404)(258,404)(282,404)(290,404)(290,404)(290,402)@xmath72 ( 50,402)@xmath73(58,404)(98,404)(106,388)(162,388)(170,372)(202,372)(210,364)(226,364)(234,340)(290,340)(290,338)@xmath73 ( 50,410)@xmath6(58,412)(106,412)(114,404)(170,404)(178,396)(242,396)(250,388)(274,388)(282,388)(290,388)(290,386)@xmath6 ( 50,418)@xmath13(58,420)(114,420)(122,420)(178,420)(186,428)(194,428)(202,436)(266,436)(274,436)(290,436)(290,434)@xmath13 ( 50,426)@xmath5(58,428)(114,428)(122,412)(170,412)(178,388)(234,388)(242,364)(290,364)(290,362)@xmath5 ( 50,434)@xmath74(58,436)(122,436)(130,428)(178,428)(186,420)(258,420)(266,420)(290,420)(290,418)@xmath74 ( 50,442)@xmath75(58,444)(130,444)(138,444)(186,444)(194,444)(266,444)(274,428)(290,428)(290,426)@xmath75 ( 50,450)@xmath76(58,452)(130,452)(138,436)(178,436)(186,412)(250,412)(258,396)(274,396)(282,380)(290,380)(290,378)@xmath76 ( 50,458)@xmath77(58,460)(138,460)(146,452)(186,452)(194,436)(194,436)(202,428)(258,428)(266,412)(282,412)(290,396)(290,396)(290,394)@xmath77    calling the following function with an initial `` empty '' wiring fragment @xmath36 will enumerate all wirings with @xmath34 rows :    * enumeratewirings*(@xmath36)[enumeratewirings ]    _ enumerates all allowable sequences in @xmath33_. + * input : * a wiring fragment @xmath36 + * output : * list of completions of the fragment @xmath36 to a wiring +    * . *    if @xmath58 $ ] then return @xmath78 .",
    "@xmath79 .    for all @xmath80",
    "do :    if @xmath81 , then update all the data to a new fragment @xmath82 with @xmath83 , and call @xmath84*enumeratewirings*@xmath85 .",
    "return @xmath86 .",
    "of course , this algorithm will not lead very far . but let @xmath87 be the set of isomorphism classes of arrangements with @xmath34 pseudolines .",
    "we have a surjective map @xmath88 mapping a wiring to an arrangement up to isomorphisms . the most important improvements to our algorithm will be to find a smaller set @xmath89 such that @xmath90 is still surjective .",
    "let @xmath91 be the set of allowable sequences @xmath28 such that for each @xmath92 we have @xmath93 then @xmath90 is surjective .",
    "observe that if @xmath94 , @xmath95 , and either @xmath96 or @xmath97 , then we may interchange @xmath98 and @xmath99 without changing the image under @xmath100 .",
    "moreover , the intervals @xmath101 $ ] and @xmath102 $ ] may intersect in only one point by def .",
    "[ allowseq ] ( [ allowseq_3 ] ) .",
    "this gives a new version of the algorithm :    * enumeratewirings2*(@xmath36)[enumeratewirings2 ]    _ enumerates all allowable sequences in @xmath91_. + * input : * a wiring fragment @xmath36 + * output : * list of completions of the fragment @xmath36 +    * .",
    "*    if @xmath58 $ ] , then return @xmath78 .",
    "@xmath79 .    for all @xmath103",
    "do :    if @xmath104 , then update all the data to a new fragment @xmath82 with @xmath105 , and call @xmath84*enumeratewirings2*@xmath85 .    for all @xmath106",
    "do :    if @xmath81 , then update all the data to a new fragment @xmath82 with @xmath83 , and call @xmath84*enumeratewirings2*@xmath85 .    return @xmath86 .",
    "further , we may reduce the symmetries by requiring a certain beginning :    [ wirbeg ] let @xmath107 be the set of allowable sequences @xmath28 such that there exists an @xmath108 with @xmath109 for @xmath110 .",
    "then @xmath111 is surjective .",
    "this holds by ( * ? ? ?",
    "* lemma 2.4 ) .",
    "we sketch here a construction : for a given arrangement @xmath112 , choose a line @xmath113 . modifying this line slightly we may assume that we have a line @xmath114 on which no vertex of the arrangement lies . after the choice of a line at infinity , we rotate the line @xmath114 and pass each vertex exactly once . by choosing a line @xmath114 close enough to @xmath115 ,",
    "we ensure that the vertices on @xmath115 are passed first .",
    "so we call * enumeratewirings2 * with all possible fragments @xmath36 with @xmath108 junctions as in lemma [ wirbeg ] instead of the empty fragment . moreover , these fragments are uniquely determined by the sequences @xmath116 considering that the procedure in the proof of lemma [ wirbeg ] depends on the choice of a line at infinity and on the orientation , we obtain :    [ wirbeg_dihedral ] it suffices to start the algorithm with one representative of the orbit under the action of the dihedral group @xmath117 on the sequence @xmath118 .",
    "[ goodchoice ] it is quite important to choose a `` good '' representative @xmath119 for the algorithm .",
    "the following is a choice that has proved to be best to average : let @xmath120 . then choose a @xmath121 such that @xmath122 and @xmath123 , or choose a lexicographically greatest @xmath124 , @xmath121 with @xmath122 or @xmath123 .",
    "[ maxjunction ] for a vertex @xmath125 , let @xmath126 be the number of lines incident with @xmath125 . without loss of generality we may assume that the line @xmath115 chosen in lemma [ wirbeg ] contains a vertex @xmath125 with maximal @xmath126 .",
    "this means that we only need to consider junctions of at most @xmath126 lines during the algorithm .",
    "a _ simplicial _ wiring is a wiring in which all @xmath31-cells have exactly @xmath32 vertices .",
    "a _ near pencil _ consists of @xmath127 lines having one point in common and one further line which is not incident with that point .",
    "simplicial wirings are much easier to enumerate than arbitrary wirings because simpliciality gives many break conditions for the algorithm .",
    "the easiest one is given by the following lemma which should be folklore :    [ twosquares ] if a simplicial wiring has two neighboring ordinary vertices ( intersection points where exactly two pseudolines meet ) , then it is a near pencil arrangement .",
    "so since the near pencil arrangements may be ignored without loss of generality , we can stop the enumeration when two neighboring vertices are ordinary .",
    "the following trivial relation has more applications than expected :    [ joinends ] if a simplicial wiring fragment is complete , i.e.  @xmath58 $ ] , then @xmath128 for all @xmath129 .",
    "a further important improvement is :    [ all2 ] if we only enumerate simplicial wirings with alg .",
    "[ enumeratewirings2 ] , then in steps @xmath130 and @xmath131 it suffices to consider new pairs @xmath132 such that @xmath133 and @xmath134 .",
    "otherwise @xmath135 resp .",
    "@xmath136 would get greater than @xmath31 after the next move , contradicting simpliciality .    here",
    "are some more conditions :    [ simpobstr_1 ] in algorithm [ enumeratewirings2 ] , arriving at junction @xmath44 the enumeration will never yield a simplicial wiring if one of the following conditions is satisfied :    1 .",
    "[ lem1 ] @xmath137 and @xmath138 and ( @xmath139 or @xmath140 ) , 2 .",
    "[ lem1b ] @xmath141 and @xmath142 and ( @xmath143 or @xmath144 ) .",
    "notice first that since the last move concerned the lines in the rows @xmath145 , the numbers of finished vertices @xmath146 between the rows @xmath41 and @xmath47 for @xmath147 are all equal to @xmath49 whereas @xmath148 .",
    "now if @xmath138 , then the rows @xmath44 and @xmath149 will not be moved anymore since otherwise @xmath150 which is contradicting the simpliciality .",
    "thus in this case we know that @xmath151 and @xmath152 , hence ( [ lem1 ] ) .",
    "the case ( [ lem1b ] ) is similar .",
    "[ simpobstr_2 ] in algorithm [ enumeratewirings2 ] , arriving at junction @xmath44 the enumeration will never yield a simplicial wiring if one of the following conditions is satisfied :    1 .",
    "there is a @xmath153 with @xmath154 and @xmath155 and @xmath156 , 2 .",
    "there is a @xmath157 with @xmath154 and @xmath158 and @xmath159 and @xmath156 , 3 .",
    "there is a @xmath160 with @xmath154 and @xmath161 and @xmath162 and @xmath156 .",
    "we prove ( 1 ) ; ( 2 ) and ( 3 ) are similar . if @xmath153 and @xmath154 , then either the labels @xmath163 and @xmath164 are at their terminal position in which case @xmath165 , or they are not , but then the cell that these labels will enclose at the end will have at least @xmath31 vertices which implies @xmath166 by lemma [ joinends ] .",
    "[ simpobstr_5 ] in algorithm [ enumeratewirings2 ] , arriving at junction @xmath44 the enumeration will never yield a simplicial wiring if one of the following conditions is satisfied :    1 .",
    "@xmath167 , 2 .",
    "@xmath168 and @xmath169 .    the cells at the end of the rows @xmath170 and",
    "@xmath171 are not finished yet , future change will increase @xmath172 resp .",
    "@xmath173 , contradicting lemma [ joinends ] .",
    "[ simpobstr_4 ] in algorithm [ enumeratewirings2 ] , arriving at junction @xmath44 the enumeration will never yield a simplicial wiring if one of the following conditions is satisfied :    1 .   @xmath174 and @xmath175 , 2 .",
    "@xmath176 and @xmath177 and ( @xmath178 or @xmath179 or @xmath180 or there is a @xmath181 with @xmath182 ) .",
    "\\(1 ) if @xmath174 and @xmath175 then by lemma [ simpobstr_1 ] ( [ lem1b ] ) , the rows @xmath183 and @xmath184 will not change anymore . thus",
    ".  [ enumeratewirings2 ] would only perform moves @xmath185 with @xmath186 from now on .",
    "this would never complete the fragment since @xmath175 .",
    "\\(2 ) if @xmath176 and @xmath177 then the situation is slightly different because alg .  [ enumeratewirings2 ] also jumps past @xmath187 . but",
    "what we know is that the rows @xmath188 and @xmath187 are finished , so all future moves will take place above or below @xmath187 .",
    "this means that the fragment can only be completed if @xmath182 for all @xmath189 and @xmath190 for all @xmath191 , which explains the last part ( these two conditions are equivalent ) .",
    "the other conditions are easy to check .",
    "notice that one has to carefully choose the obstructions in the implementation because some of them do not spare enough time to compensate the time they consume .",
    "for example , the following are apparently not good enough ( we therefore omit the proof ) :    [ simpobstr_7 ] in algorithm [ enumeratewirings2 ] , arriving at junction @xmath44 the enumeration will never yield a simplicial wiring if one of the following conditions is satisfied :    1 .",
    "@xmath192 and @xmath193 , 2 .",
    "@xmath194 and @xmath195 and @xmath196 , 3 .",
    "@xmath197 and @xmath198 and @xmath193 , 4 .",
    "@xmath199 and @xmath200 and @xmath201 and @xmath202 and @xmath203 .",
    "we now give the algorithm for the simplicial case .",
    "it proceeds in two steps :    * compute a list of beginnings as described in lemma [ wirbeg ] and choose best representatives as proposed in lemma [ wirbeg_dihedral ] and rem .",
    "[ goodchoice ] . * for each representative of beginnings , create a wiring fragment @xmath36 .",
    "call `` * enumeratesimplicialwirings * @xmath204 '' defined below , where @xmath205 is the maximum of the @xmath126 for @xmath125 a vertex in @xmath36 ( see rem .",
    "[ maxjunction ] ) .",
    "notice that this step can easily be parallelized .",
    "* enumeratesimplicialwirings*(@xmath36,@xmath205)[enumeratesimplicialwirings ]    _ enumerates simplicial wirings starting by @xmath36 with maximal @xmath206 , at least one from each isomorphism class_. + * input : * a wiring fragment @xmath36 , @xmath207 + * output : * list of completions of the fragment @xmath36 +    * .",
    "*    compute the numbers @xmath208 and @xmath209 for @xmath36 .    if @xmath210 , then if @xmath211 for all @xmath129 return @xmath78 , else return @xmath212 .",
    "check the obstructions of lemma [ simpobstr_1 ] , [ simpobstr_2 ] , [ simpobstr_5 ] , [ simpobstr_4 ] and return @xmath212 if one of them is satisfied .",
    "@xmath79 .    if @xmath213 and @xmath214 then find the greatest @xmath41 with @xmath104 ( see lemma [ all2 ] ) .",
    "+ if @xmath215 , update all the data to a new fragment @xmath82 with @xmath105 , and call @xmath216 use @xmath50 to ensure that lemma [ twosquares ] is satisfied .",
    "if @xmath217 or @xmath218 then return @xmath86 .    for all @xmath219 with @xmath220 do",
    ":    if @xmath81 , @xmath221 and @xmath222 ( see lemma [ all2 ] ) , then update all the data to a new fragment @xmath82 with @xmath83 , and call @xmath216    return @xmath86 .",
    "when the enumeration is complete , one still has to collect the wirings up to isomorphisms .",
    "we use the following observation :    let @xmath112 and @xmath223 be simplicial arrangements",
    ". then @xmath112 and @xmath223 are isomorphic if and only if the graphs given by the corresponding triangulations are isomorphic ( we do not need to require a bijection between the @xmath31-cells preserving the incidence ) .",
    "it suffices to prove that for vertices @xmath224 , @xmath225 , @xmath226 such that @xmath227 , @xmath228 , @xmath229 are edges , the triple @xmath230 is always a @xmath31-cell . but a pseudoline crossing @xmath230 would have to go through two of the three vertices which is impossible .    in other words , we just need to test whether certain graphs are isomorphic . such a test is implemented in most computer algebra systems that include combinatorics and is good enough for our purpose .",
    "we now assume that we have a complete list of simplicial wirings of @xmath34 lines .",
    "a very valuable necessary condition for stretchability is pappus theorem :    let @xmath231 with @xmath232 then @xmath233    we use this theorem in the following way for a wiring @xmath36 ( compare ( * ? ? ?",
    "* thm .  3.1 ) ) : assume that @xmath234 are distinct vertices on one line and @xmath235 are distinct vertices on another line . if there are lines @xmath236 , @xmath237 , @xmath238 , @xmath239 , @xmath240 , @xmath241 in @xmath36 , and exactly two of the intersection points @xmath242 lie on a line of @xmath36 , then stretchability of @xmath36 would contradict pappus theorem .",
    "this is a very expensive test in terms of running time when implemented .",
    "therefore it is not possible to include it into the above algorithm .",
    "however , it turns out that almost all unstretchable simplicial wirings of up to @xmath0 lines do not satisfy pappus theorem .",
    "thus it appears to be the best ( known ) tool to rule out wirings a posteriori .    for the very few remaining simplicial wirings we use ( * ? ? ?",
    "4.4 ) : we compute a grbner basis of the ideal given by the incidence constraints .",
    "this either yields a realization of the wiring as arrangement of straight lines , or it proves that the wiring is unstretchable .",
    "[ cols=\"<,>,>,>,>,>,>,>,>,>,>,>,>,>\",options=\"header \" , ]      anders bjrner , michel las  vergnas , bernd sturmfels , neil white , and gnter  m. ziegler , _ oriented matroids _ , encyclopedia of mathematics and its applications , vol .",
    "46 , cambridge university press , cambridge , 1993 ."
  ],
  "abstract_text": [
    "<S> we compute all isomorphism classes of simplicial arrangements in the real projective plane with up to @xmath0 lines . </S>",
    "<S> it turns out that grnbaums catalogue is complete up to @xmath0 lines except for four new arrangements with @xmath1 , @xmath2 , @xmath3 , @xmath4 lines , respectively . as a byproduct we classify simplicial arrangements of pseudolines with up to @xmath0 lines . </S>",
    "<S> in particular , we disprove grnbaums conjecture about unstretchable arrangements with at most @xmath5 lines , and prove the conjecture that any simplicial arrangement with at most @xmath6 pseudolines is stretchable . </S>"
  ]
}