{
  "article_text": [
    "in computer science , a _ string _ ( or sequence ) @xmath0 of length @xmath1 is defined as a finite sequence of characters from a finite alphabet @xmath2 . a string is a data type used to represent and store information .",
    "words in a specific language , for example , are stored in a computer in terms of strings .",
    "even whole texts may be stored by means of strings .",
    "apart from fields such as information and text processing , strings arise , in particular , in the field of computational biology .",
    "this is because most of the genetic instructions involved in the growth , development , functioning and reproduction of living organisms are stored in _ deoxyribonucleic acid _ ( dna ) and _ ribonucleic acid _ ( rna ) molecules , which are double - stranded ( in the case of dna ) or single - stranded ( in the case of rna ) sequences of nucleotides .",
    "hereby , each nucleotide is composed of a nitrogenous base , a five - carbon sugar ( ribose or deoxyribose ) , and at least one phosphate group .",
    "nucleotides in the context of rna have one of four different nitrogenous bases : guanine ( g ) , uracil ( u ) , adenine ( a ) , and cytosine ( c ) .",
    "therefore , any rna molecule can be represented as a string of symbols from @xmath3 .",
    "such a string is called the _ primary structure _ of an rna molecule",
    ". however , rna molecules generally fold in space , and different nucleotides bind together , for example , by means of hydrogene bonds . in simplified terms",
    ", g can only bind with c and u can only bind with a. en example of the secondary structure of an rna molecule is shown in figure  [ fig : example : a ] .    in computer science terms , the hydrogene bonds of the secondary structure of an rna sequence @xmath0",
    "can be represented by a so - called _ arc annotation set _",
    "@xmath4 , which is an unordered set of pairs of positions of @xmath0 . henceforth , the positions of a string @xmath0 range from 1 to @xmath1 .",
    "each pair @xmath5 is called an _ arc annotation _ ( or simply an arc ) between positions @xmath6 and @xmath7 . as a convention",
    ", it must hold that @xmath8 .",
    "moreover , @xmath6 is called the _ left endpoint _ of arc @xmath9 , and @xmath7 is called the _",
    "right endpoint_. a pair @xmath10 is called an _ arc - annotated sequence _  @xcite .",
    "note that the secondary structure of an rna sequence can be described by an arc - annotated sequence .",
    "for an example see figure  [ fig : example : b ] .",
    "in fact , arc - annotated sequences have been widely used for this purpose ( see , for example ,  @xcite ) .",
    "in particular , arc - annotated sequences have been useful in the context of the structural comparison of rna sequences . an important way of comparing two ( or more ) sequences consists in computing their _ longest common subsequence _ ( lcs ) . given a sequence @xmath0 over a finite alphabet @xmath2 , sequence @xmath11 is called a _ subsequence _ of @xmath0 , if @xmath11 can be produced from @xmath0 by deleting characters .",
    "given a set of input strings @xmath12 , the problem of finding the longest commons subsequence of all input strings is , in general , np - hard  @xcite .",
    "the best techniques available nowadays for solving this problem are based on beam search  @xcite .",
    "the longest common subsequence problem in the context of arc - annotated sequences  the _ longest arc - preserving common subsequence _ ( lapcs ) problem  has first been introduced in  @xcite . in particular ,",
    "in the same works it was shown that the most general case of the problem ( without any restrictions on the arcs ) is np - hard . in the meanwhile , five different variants of the problem ",
    "that is , restrictions of the general problem  have been studied in the related literature , and efficient algorithms were developed for three of these variants .. ] however , as far as we know , only one algorithm that is applicable to the most general case has been proposed so far ( see  @xcite ) . in this work ,",
    "we first phrase the lapcs problem in the form of an integer linear program ( ilp )  @xcite .",
    "then we make use of this ilp in the context of a simple evolutionary algorithm based on _ solution merging _ , where two or more solutions are merged and the best solution in this union is derived by means of an exact technique .",
    "aggarwal et al .",
    "@xcite originally suggested such an approach , labeled _",
    "optimized crossover _ , for the independent set problem .",
    "we provide an extensive experimental comparison of the proposed algorithm in comparison to the heuristic from the literature and to the application of a randomized multi - start heuristic .",
    "the remainder of this paper is structured as follows . in section  [ sec :",
    "lapcs ] , a technical description of the tackled problem is provided . in subsequent sections",
    " see section  [ sec : heuristic ] and section  [ sec : ilp - model]we describe a heuristic from the literature and phrase an ilp model for the tackled problem .",
    "next , the proposed algorithm is outlined in section  [ sec : algorithm ] .",
    "finally , an extensive experimental evaluation on artificial and real problem instances is provided in section  [ sec : experiments ] , and an outlook to future work is given in section  [ sec : conclusions ] .",
    "given two input sequences @xmath0 and @xmath13 , we define the set of possible assignments @xmath14 as the set of all @xmath15where @xmath16 and @xmath17such that @xmath18 = y[j]$ ] . that is @xmath14 consists of all @xmath15 such that the letter at position @xmath19 of @xmath0 is equal to the letter at position @xmath20 of @xmath13 .",
    "a valid common subsequence of the two input sequences @xmath0 and @xmath13 can then be represented by a subset @xmath21 that fullfills the following conditions :    * * common subsequence condition : * for any two assignments @xmath22 ( where @xmath23 ) it must hold that either @xmath24 and @xmath25 or @xmath26 and @xmath27 .    in order to translate such a solution into the corresponding common subsequence",
    ", the assignments in @xmath28 have to ordered from small to large indecees , either according to the first or the second index .",
    "then , the letters corresponding to the assignments must be joined in this order .",
    "+ a solution @xmath28 that fullfills the common subsequence condition is called _ arc - preserving _ if the arcs induced by the solution are preserved :    * * arc preservation condition : * for any two assignments @xmath29 ( where @xmath23 and @xmath24 ) it must hold that @xmath30 .    given two arc - annotated input strings @xmath0 and @xmath13 , the lapcs problem consists in finding a solution @xmath21 that fullfills both the common subsequence and the arc preservation condition and is of maximal cardinality .",
    "note that such a mapping corresponds to the longest arc - preserving common subsequence of @xmath0 and @xmath13 . in",
    "@xcite it was shown that this problem is , in general , np - hard . however , the structure of the arc annotation in the context of rna sequences , for example , is in practise likely to satisfy some constraints . concerning a string @xmath0 ,",
    "the following types of constraints have been considered in the literature :    1 .",
    "no two arcs may share an endpoint .",
    "that is , @xmath31 it must hold that @xmath32 and @xmath33 .",
    "2 .   crossing arcs do not exist .",
    "that is , @xmath31 it must hold that @xmath34 .",
    "3 .   nesting arcs do not exist .",
    "that is , @xmath31 it must hold that @xmath35 .",
    "4 .   no arcs exist .",
    "that is , @xmath36 .    based on these four restrictions concerning the arc annotation ,",
    "input strings are characterized into unlimited ( no constraints ) , crossing ( constraint 1 ) , nested ( constraints 1 and 2 ) , chain ( constraints 1 , 2 , and 3 ) , and plain ( constraint 4 ) .",
    "different versions of the lapcs problem can therefore be denoted as follows : lapcs(@xmath37 ) where each of the two dots must be replaced by the characterization of the arc annotation of the first and the second input string .",
    "for example , in problem lapcs(unlimited , nested ) , the arc annotation of the first input string is characterized as unlimited , and the one of the second one as nested .",
    "it is well known that lapcs(plain , plain ) , for example , can be solved in polynomial time with the dynamic programming algorithm by smith and waterman  @xcite . in this paper , however , we deal with the most general version of the problem , lapcs(unlimited , unlimited ) , which  as mentioned above  was shown to be np - hard . for simplicity reasons we refer to this problem version simply as lapcs",
    "as far as we know , the only heuristic from the literature that is applicable to the most general version of the lapcs problem was described in  @xcite , and works as follows .",
    "first , the dynamic programming algorithm by smith and waterman is applied to input strings @xmath0 and @xmath13 , disregarding the arc annotations .",
    "the result is a mapping @xmath21 that  most probably  violates some of the arc preservation constraints . in order to _",
    "repair _ this invalid solution , the following is done .",
    "first a graph @xmath38 is constructed as follows .",
    "a vertex @xmath39 is introduced for each assignment @xmath40 .",
    "two vertices @xmath39 ( corresponding to an assignment @xmath40 ) and @xmath41 ( corresponding to an assignment @xmath42 with @xmath24 ) are connected by an edge if either @xmath43 or @xmath44 , but not both . in other words ,",
    "two vertices are connected by an edge if they represent a violation of the arc preservation constraints .",
    "note that in order to repair @xmath28 by removing as few assignments from @xmath28 as possible , we can solve the _ maximum independent set _ ( mis )",
    "problem in @xmath38 , and remove all assignments from @xmath28 that correspond to vertices that are not in the optimal solution to the mis problem . in our implmentation",
    "we used cplex 12.6 to solve the mis problem in all cases .",
    "the lapcs problem can be stated in terms of an integer linear program ( ilp ) in the following way . for each @xmath45",
    "is introdcued a binary variable @xmath46 .",
    "the set of all binary variables is denoted by @xmath47 .",
    "we say that two variables @xmath48 ( where @xmath49 ) are _ in conflict _ , if setting both variables to one violates ( 1 ) the common subsequence condition , ( 2 ) the are preservation condition , or both . in technical terms , two variables @xmath48 ( where @xmath49 ) are in conflict , if at least one of the following holds :    1 .",
    "@xmath50 2 .   either @xmath51 or @xmath52 , but not both at the same time .",
    "the lapcs problem can then be rephrased as the problem of selecting a maximal number of non - conflicting variables from @xmath47 . given these notations ,",
    "the ilp is stated as follows .",
    "align & _ z_i , j z z_i , j + & + z_i , j + z_k ,",
    "l & 1 z_i , j = z_k , l , i k [ eqn : const2 ] + z_i , j & \\{0,1 } z_i , j z    hereby , constraints ( [ eqn : const2 ] ) ensure that selected variables are not in conflict .",
    "the proposed hybrid ea , henceforth labelled hyb - ea , is pseudo - coded in algorithm  [ algo : ea ] . in the context of this algorithm ,",
    "valid solutions to the problem are subsets of the complete set @xmath47 of variables introduced in the context of the ilp model .",
    "if a solution @xmath28 contains a variable @xmath46 , this means that the variable must be given value one in order to produce the corresponding solution .",
    "the main loop of the ea is executed while the cpu time limit is not reached .",
    "it consists of the following actions .",
    "first , the best - so - far solution @xmath53 is initialized to @xmath54 .",
    "then , at each iteration , first , the set of variables representing a set of merged solutions is initialized with the best - so - far solution @xmath53 . then",
    ", a number of @xmath55 solutions is probabilistically constructed in function ( @xmath56 , @xmath57 , @xmath47 ) in line 6 of algorithm  [ algo : ea ] .",
    "the variables contained in these solutions are added to @xmath58 .",
    "afterwards , solution merging is applied to @xmath58 , that is , an ilp solver is applied to find the best valid solution that can be built from the variables in @xmath58 ( see function ( @xmath59 , @xmath58 ) in line  9 of algorithm  [ algo : ea ] ) .",
    "parameter @xmath59 is a time limit for the ilp solver . in particular",
    ", the output of this function is the best solution found by the ilp solver within @xmath59 seconds .",
    "note that for applying an ilp solver to @xmath60 , all the appearences of @xmath47 in the ilp model of section  [ sec : ilp - model ] have to be replaced with @xmath58 . in case",
    "@xmath61 is better than the current best - so - far solution @xmath62 , solution @xmath61 is stored as the new best - so - far solution ( line  10 ) .",
    "the output of the algorithm is the best - so - far solution @xmath53 .",
    "+    strings @xmath0 and @xmath13 over alphabet @xmath2 , values for parameters @xmath55 , @xmath56 , @xmath57 , and @xmath59 @xmath63 @xmath64 @xmath65 ( @xmath56 , @xmath57 , @xmath47 ) @xmath66 @xmath67 ( @xmath59 , @xmath58 ) @xmath68 * then * @xmath69 @xmath62    in the following we will describe in detail the remaining component of the algorithm : the probabilistic construction of solutions in function ( @xmath56 , @xmath57 , @xmath47 ) .",
    "first , a common subsequence of @xmath0 and @xmath13 is  without regarding the arc preservation constraints  probabilistically generated as follows .",
    "for this purpose let us first introduce for each letter @xmath70 the subset @xmath71 of variables which correspond to letter @xmath72 .",
    "a solution construction starts with an empty solution @xmath73 , and the first step consists in generating the set of variables @xmath74 that serve as options to be added to @xmath28 .",
    "more specifically , the initial set @xmath75 is generated in order to contain for each letter @xmath70 the variable @xmath76 ( if any ) such that @xmath49 and @xmath77 , @xmath78 .",
    "moreover , options @xmath79 are given a weight value @xmath80 , which is a known greedy function for longest common subsequence problems ( see , for example ,  @xcite ) .",
    "at each construction step , exactly one variable is chosen from @xmath75 and added to @xmath28 .",
    "for doing so , first , a value @xmath81 is chosen uniformly at random from @xmath82 $ ] . in case @xmath83 , where @xmath56 is a parameter of the algorithm , the variable @xmath79 with the smallest weight value is deterministically chosen . otherwise , a candidate list @xmath84 of size @xmath85 containing the options with the lowest weight values",
    "is generated and exactly one variable @xmath86 is then chosen uniformly at random and added to @xmath28 . note that @xmath57 is another parameter of the solution construction process .",
    "finally , the set of options @xmath75 for the next construction step is generated .",
    "being @xmath46 the last variable that was added to @xmath28 , @xmath75 contains for each letter @xmath70 the variable @xmath87 ( if any ) with the lowest weight value @xmath88 calculated as @xmath89 .",
    "the solution construction is finished when the set of options is empty .",
    "however , note that a solution @xmath28 constructed in the way as described above does not necesarrily respect all arc preservation constraints .",
    "therefore , the same _ repair mechanism _ is utilized as in the heuristic from section  [ sec : heuristic ] in order to transform @xmath28 into a valid lapcs solution .",
    "summarizing , the following techniques are included in the experimental evaluation : ( 1 ) the heuristic described in section  [ sec : heuristic ] ( heuristic ) , ( 2 ) the hybrid ea ( hyb - ea ) , and ( 3 ) hyb - ea without the application of solution merging .",
    "this last algorithm  henceforth denoted by ms - heur  is bascially a multi - start heuristic that constructs randomized solutions ( and applies the repair procedure to them ) until it runs out of computation time .",
    "comparing hyb - ea with ms - heur will enable us to measure the contribution of solution merging .",
    "the three above - mentioned algorithms were implemented in ansi c++ using gcc 4.7.3 , without the use of any external libraries .",
    "in addition , the ilp models in the context of hyb - ea were solved with the ilp solver ibm ilog cplex v12.6 in one - threaded mode .",
    "the experimental evaluation has been performed on a cluster of pcs with intel(r ) xeon(r ) cpu 5670 cpus of 12 nuclei of 2933 mhz and at least 40 gigabytes of ram .",
    "note that we also tried to apply cplex to the complete ilp models for each problem instance .",
    "however , the models were too large , even in the case of the smallest problem instances .",
    "the remainder of this section is organized as follows .",
    "first , the set of benchmark instances is described .",
    "second , the tuning experiments that were conducted in order to determine a proper setting for the parameters of hyb - ea are outlined .",
    "finally , an exhaustive experimental evaluation is presented .",
    "two sets of benchmark instances were generated .",
    "the first set , labelled set1 , consists of artificial problem instances .",
    "each of these instances consists of two artifically generated rna strings of length @xmath90 .",
    "the probability of each letter and each position was chosen to be @xmath91 . moreover , for each input string we randomly generated a number of @xmath92 . hereby , it was taken care that all @xmath93 arcs were different .",
    "for each combination of @xmath94 and @xmath93 we randomly generated 30 problem instances .",
    "this makes a total of 900 problem instances .    for the second benchmark set , labelled set2 , we downloaded arc - annotated rna sequences from the rnase p database  @xcite . in total we assembled 10 problem instances ,",
    "whose characteristics are described in table  [ tab : instance - characteristics ] . moreover , the secondary structures of the rna sequences involved in instances real_1 and real_8 are exemplary shown in figure  [ fig : real ] .",
    "the automatic configuration tool  @xcite was used for tuning the parameters of hyb - ea .",
    "the following parameters of hyb - ea were considered for tuning : ( @xmath55 ) the number of solution constructions per iteration ( @xmath56 ) the determinism rate , ( @xmath57 ) the candidate list size , and ( @xmath59 ) the maximum time in seconds allowed for solution merging ( at each call of the solution merging procedure ) .",
    "in particular , hyb - ea was tuned separately for each input string length , which  after initial experiments  seemed to have a greater influence on the behavior of the algorithm than the number of arcs . for each @xmath90",
    "we randomly generated two tuning instances for each of the three values of @xmath93 .",
    "this makes a total of six tuning instances for each @xmath94 . the tuning process for each @xmath94",
    "was given a budget of 1000 runs of hyb - ea , where each run was given a computation time limit of @xmath95 cpu seconds .",
    "finally , the following parameter value ranges were considered concerning the four parameters of hyb - ea :    * @xmath96 * @xmath97 , where a value of @xmath98 means that the selection of the assignment to be added to the partial solution under construction is always done randomly from the candidate list , while a value of @xmath99 means that solution constructions are nearly deterministic . *",
    "@xmath100 * @xmath101 ( in seconds ) .",
    "the tuning runs with produced the configurations of hyb - ea as shown in table  [ tab : parameter - values : hyb - ea ] .",
    "the following trends can be observed .",
    "apart from @xmath102 , the number of solution constructions is always set to five .",
    "this is because the smaller @xmath55 , the smaller is the ilp model that has to be solved by cplex in the context of solution merging at each iteration of the algorithm .",
    "moreover , the smaller the ilp model , the more efficient is cplex in solving such a model .",
    "the values of @xmath56 are consistently between @xmath103 and @xmath104 , whereas the values of @xmath57 are consistently set to two or three .",
    "finally , the settings of @xmath59 seem somewhat erratic . however , this is due to the fact that the application of cplex in solution merging is very efficient and stops , most of times , much below 5 cpu seconds . therefore , it is only of importance that the value of @xmath59 is at least set to 5.0 .",
    "> m1cm|rrrr @xmath94 & @xmath55 & @xmath56 & @xmath57 & @xmath59 + 100 & 10 & 0.3 & 2 & 5.0 + 200 & 5 & 0.7 & 3 & 1.0 + 300 & 5 & 0.7 & 2 & 5.0 + 400 & 5 & 0.7 & 3 & 10.0 + 500 & 5 & 0.3 & 2 & 20.0 + 600 & 5 & 0.7 & 2 & 5.0 + 700 & 5 & 0.5 & 2 & 20.0 + 800 & 5 & 0.7 & 2 & 5.0 + 900 & 5 & 0.5 & 2 & 5.0 + 1000 & 5 & 0.7 & 2 & 5.0 +      the results concerning the artificial problem instances from set1 are presented in table  [ tab : results : artificial ] .",
    "each row provides the results of heuristic , ms - heur and hyb - ea in terms of the average solution quality obtained for the 30 problem instances of the corresponding combination of @xmath94 and @xmath93 .",
    "all techniques were applied exactly once to each problem instance .",
    "the computation time limit used for ms - heur and hyb - ea was @xmath95 cpu seconds .",
    "the column with heading * time * shows the average computation time for the 30 problem instances in the case of heuristic , and the average time at which the best solution of a run was found , in the case of ms - heur and hyb - ea .",
    "the best result of each table row is marked by a lightgrey background .",
    "the following observations can be made :    * heuristic is very fast .",
    "its application to any of the problem instances requires less than one cpu second .",
    "moreover , the results of heuristic are always better than the results of ms - heur .",
    "* hyb - ea is , by far , the best algorithm in the comparison .",
    "it obtains the best result for each combination of @xmath94 and @xmath93 .",
    "in particular , hyb - ea always improves over ms - heur .",
    "this means that the solution merging component is an essential part of hyb - ea .",
    "this is remarkable as the application of cplex to the original problem instances was not viable at all .",
    "nevertheless , in the context of solution merging , mathematical programming plays an important role for the success of the hyb - ea algorithm .    in order to study the magnitude of the improvement of hyb - ea over ms - heur",
    ", we show the percentage improvement of hyb - ea over ms - heur  by means of boxplots  for each combination of @xmath94 and @xmath93 in the three graphics of figure  [ fig : improvement ] .",
    "the x - axis of each graphic ranges from @xmath102 to @xmath105 .",
    "these grapics show , first , that the improvement of hyb - ea over ms - heur is generally around @xmath106 .",
    "moreover , it can be observed that the improvements become bigger with a growing number of arcs .",
    "+     +    in a second set of experiments we applied the three algorithms considered in this work to the set of 10 real problem instances ( set2 ) .",
    "the results are provided in table  [ tab : results : real ] , in the following way .",
    "heuristic was applied exactly once to each problem instance .",
    "the corresponding result can be found in columns with headings * result * and * time*. both ms - heur and hyb - ea are applied 30 times to each problem instance , with a computation time limit of 30 seconds per application . in both cases",
    "we provide the best result obtained over 30 applications ( column * best * ) , the average of the 30 results obtained ( column * avg . * ) , and the average time at which the best solution of each run was found ( column * time * ) .",
    "again , the best result for each of the 10 instances is marked by a lightgrey background .",
    "apart from one case ( real_4 ) , the results are consistent with our observations in the context of the artificial benchmark instances .",
    "in the case of real_4 , outperforms hyb - ea .",
    "this suggest that this problem instance has certain characteristics that are difficult to be discovered by the step - by - step way of constructing solutions as used in hyb - ea",
    ". remember that heuristic , in contrast , uses the dynamic programming algorithm by smith and waterman in order to generate the ( possibly invalid ) initial solution .",
    "in this paper we proposed a simple , hybrid evolutionary algorithm for solving the so - called longest arc - preserving common subsequence problem .",
    "the most important feature of this algorithm is a crossover component based on solution merging . at each iteration ,",
    "the best solution found so far is merged with randomly generated solutions , and a general purpose integer linear programming solver is used to find the best solution within the resulting set of assignments .",
    "the results show that the algorithm is superior to the only existing heuristic from the literature .",
    "moreover , we have shown that the solution merging component is an essential part of the algorithm .    in future work",
    "we will try to replace the probabilistic way of constructing solutions by a probabilistic version of the smith and waterman algorithm . in this way it might be possible to avoid situations such as the one for real - life instance real_4 , where our algorithm was not able to outperform the existing heuristic .",
    "this work was funded by project tin2012 - 37930-c02 - 02 ( spanish ministry for economy and competitiveness , feder funds from the european union ) and project sgr 2014 - 1034 ( agaur , generalitat de catalunya ) .",
    "our experiments have been executed in the high performance computing environment managed by the rdlab at the technical university of barcelona ( ` http://rdlab.cs.upc.edu ` ) and we would like to thank them for their support .",
    "patricia  a. evans . finding common subsequences with arcs and pseudoknots . in maxime crochemore and mike paterson , editors ,",
    "_ proceedings of cpm 1999  10th annual symposium on combinatorial pattern matching _ ,",
    "volume 1645 of _ lecture notes in computer science _ , pages 270280 .",
    "springer berlin heidelberg , 1999 .",
    "k.  huang , c.  yang , and k.  tseng .",
    "fast algorithms for finding the common subsequences of multiple sequences . in _ proceedings of the 2004 international computer symposium _ , pages 10061011 .",
    "ieee press , 2004 ."
  ],
  "abstract_text": [
    "<S> the longest arc - preserving common subsequence problem is an np - hard combinatorial optimization problem from the field of computational biology . </S>",
    "<S> this problem finds applications , in particular , in the comparison of arc - annotated ribonucleic acid ( rna ) sequences . in this work </S>",
    "<S> we propose a simple , hybrid evolutionary algorithm to tackle this problem . </S>",
    "<S> the most important feature of this algorithm concerns a crossover operator based on solution merging . in solution merging , two or more solutions to the problem are merged , and an exact technique is used to find the best solution within this union . </S>",
    "<S> it is experimentally shown that the proposed algorithm outperforms a heuristic from the literature . </S>"
  ]
}