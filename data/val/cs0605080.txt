{
  "article_text": [
    "a key factor to `` overlay networking '' success is that an overlay service can be quickly constructed and easily deployed and upgraded .",
    "in particular , several overlays support multicast - style data dissemination service without requiring the widespread deployment of ip multicast",
    ". however , such application - level multicast may suffer from poor performance , scale and cost problems when the delivery tree construction process ignores the topology and link characteristics of the underlying network .",
    "if an overlay is built in this way , nearby nodes in the overlay network may actually be distant from each others in the underlying network .",
    "recent proposals in multicast overlay construction [ 1 - 10 ] demonstrate the importance of exploiting underlying network topology .",
    "however , we claim that there are barriers for quality of service aspects , namely scalability and efficiency in existing topology - aware overlay multicast protocols :    1 .   although decentralized protocols have been designed to be scalable , by not relying on global knowledge , they often rely on periodic and incremental refinement processes , which induce high overhead . in these protocols such as  @xcite  @xcite  @xcite  @xcite",
    ", nodes maintain their relative positions to the root of the delivery tree .",
    "periodically , each node tries to improve its on - tree position by finding a better parent , i.e. a non - descendant node that provides a lower delay to the root .",
    "therefore , these protocols are generally not scalable to support large multicast groups .",
    "additional overhead is incurred in case of dynamicity of either the overlay membership or the underlying network conditions .",
    "in fact , during overlay growth or membership changes , heavy control overhead is incurred due to periodical structure quality maintenance and partition repairs operations . on the other hand ,",
    "higher frequency control messages is required to map the overlay to varying network characteristics .",
    "users attending a video conferencing session or an event broadcast expect an acceptable quality as soon as they join the multicast session . since a multicast overlay delivery tree is typically studied to minimize the average incurred delay observed by the receivers , we consider that a delivery tree is `` efficient '' if the average incurred delay is less than a threshold value .",
    "however , one would expect that incremental refinements - based approaches incur a long delay before the overlay delivery tree converges to an efficient structure .    in this paper",
    ", we provide a practical solution for large - scale and efficient multicast support .",
    "first , we propose a simple and accurate location - aware process for connecting new members to the overlay network .",
    "the basic idea is to use the nodes in the already constructed overlay to suggest candidate neighbors that are close to a newcomer .",
    "the latter gradually requests the suggested nodes to refine its localization in the underlying network .",
    "this locating process does not use virtual coordinates system embedding nor fixed landmarks measurements , and aims to be accurate and scalable .",
    "second , we build a robust and scalable topology - aware clustered hierarchical overlay on the basis of the locating process .",
    "we propose proactive mechanisms to react to cluster leaders failures , and to smoothly manage overlay topology changes caused by crash scenarios or underlying network changes .",
    "scalability is achieved by drastically reducing the bandwidth requirements for overlay maintenance .",
    "robustness is obtained by mitigating the effect of dynamic environment as most changes are quickly recovered and not seen beyond clustered set of nodes .",
    "the proposed overlay multicast construction scheme , called locate , cluster and conquer ( lcc ) , has been designed to address the aforementioned quality of service issues .",
    "intuitively , running the locating process before that the node joins the overlay , and then clustering nearby nodes should allow to perform fast convergence to an efficient multicast delivery tree .",
    "furthermore , it would reduce management overhead and delivery tree changes imposed due to periodical refinements .",
    "however , these enhancements could be mitigated by the overhead of the locating process .",
    "taking into account these considerations , we evaluated the lcc scheme using two complementary evaluation methods : simulations and experimentations over the planetlab testbed .",
    "results show that lcc has low overhead upon the locating process and during the session .",
    "compared to other initially - randomly and topology - aware approaches , lcc achieves lower convergence time and performs less link adjustments rate . at the same time , it performs well in terms of data distribution efficiency even in large overlays .",
    "the remainder of this paper is structured as follows .",
    "section 2 presents the related work .",
    "section 3 provides an overview of the lcc scheme .",
    "the locating process is detailed in section 4 .",
    "then the clustering mechanism and its different components are presented in section 5 .",
    "experiments and simulations are discussed in section 6 and a comparison with various previous approaches is provided .",
    "finally , section 7 concludes the paper .",
    "there has been tremendous interest in the construction of overlays to provide application - level multicast .",
    "basically , the contributions can be categorized in two classes : overlay - router approach and p2p approach .    in the overlay - router approach such as omni  @xcite and toma  @xcite",
    ", reliable servers are installed across the network to act as application - level multicast routers .",
    "the content is transmitted from the source to a set of receivers on a multicast tree consisting of the overlay servers .",
    "this approach is designed to be scalable since the receivers get the content from the application - level routers , thus alleviating bandwidth demand at the source .",
    "however , it needs dedicated infrastructure deployment and costly servers .",
    "the p2p approach requires no extra resources .",
    "several proposals have been designed to handle small groups .",
    "narada  @xcite , meshtree  @xcite , and hostcast  @xcite are examples of distributed `` mesh - first '' algorithms where nodes arrange themselves into well - connected mesh on top of which a routing protocol is run to derive a delivery tree .",
    "these protocols rely on incremental improvements over time by adding and removing mesh links based on an utility function .",
    "although these protocols offer robustness properties ( thanks to the mesh structure ) , they do not scale to large population , due to excessive overhead resulting from the improvement process .",
    "the objective of lcc is to locate the newcomer prior to joining the overlay and hence process only a few number of refinements during the multicast session .",
    "other `` tree - first '' protocols like zigzag  @xcite and nice  @xcite , are topology - aware clustering - based protocols which are designed to support wide - area size multicast for low bandwidth application",
    ". however , they do not consider individual node fan - out capability .",
    "rather , they bound the overlay fan - out using a ( global ) cluster - size parameter . in particular",
    ", since both protocols only consider latency for cluster leader selection , they may experience problems if the cluster leader has insufficient fan - out .",
    "other proposals exploit the as - level  @xcite or the router - level  @xcite underlying network topology information to build efficient overlay networks . however , these approaches assume some assistance from the ip layer ( routers sending icmp messages , or bgp information access ) , which may be problematic",
    ". lcc does not require any extra assistance from entities that do not belong to the overlay .",
    "landmark clustering is a general concept to construct topology - aware overlays .",
    "ratnasamy et al .",
    "@xcite use such an approach to build a multicast topology - aware can overlay network . prior to joining the overlay network , a newcomer has to measure its distance to each landmark .",
    "the node then orders the landmarks according to its distance measurements .",
    "the main intuition is that nodes with the same landmark ordering , are also quite likely to be close to each other topologically .",
    "an immediate issue with such a landmark - based approach is that it can be rather coarse - grained depending on the number of landmarks used and their distribution .",
    "furthermore , requiring a fixed set of landmarks known by all participating nodes renders this approach unsuitable for dynamic networks .",
    "we have designed a two - level clustered overlay multicast architecture ( lcc ) to provide scalable , efficient and robust multicast distribution service to end users .",
    "basically , the lcc overlay construction is divided into two processes : _ locating _ and _",
    "clustering_.    the * locating process * aims to direct newcomers to the `` nearest '' cluster before they receive data on the delivery tree .",
    "a newcomer initiates the locating process by sending a `` localization_request '' to a randomly selected cluster leader ( denoted by boot node ) . according to its location - information knowledge",
    ", the boot node selects a few cluster leaders ( that we will denote _ the queried nodes _ ) that it considers to be close to the newcomer .",
    "it asks them to probe the newcomer , and gets each queried node s answer .",
    "then , it suggests to the newcomer the possible closest nodes . by iteratively sending `` localization_request '' messages to the closest nodes ( called _ the requested nodes _ in the rest of the paper ) ,",
    "the newcomer is able to gradually locate nodes that are close by .",
    "each requested node uses a selection criterion to limit the number of nodes probing the newcomer , hence minimizing the locating overhead .",
    "the locating process ends by proposing one or more nearby cluster leaders .    by grouping together nodes that are close to a cluster leader",
    ", members are expected to be close to each other , which leads to low overhead of intra - cluster control messages .",
    "the * clustering process * is initiated by every node once the locating process terminates .",
    "on the basis of their locating result , nodes are partitioned into clusters of nodes .",
    "a maximum distance , @xmath0 , defines the interval in which other nodes are considered `` nearby '' .",
    "this interval is called the cluster leader s _ scope _ , and defines the clustering criterion . during the clustering process",
    ", a node decides at which level it will join the overlay . if it creates its own cluster , it joins the `` top - level '' topology and starts an inter - cluster mesh construction .",
    "otherwise , it becomes a cluster member and joins an intra - cluster mesh in order to derive its delivery tree .",
    "since a node could be in more than one cluster leader s scope , it could be member of more than one cluster .",
    "such nodes are called _",
    "edge nodes_. we exploit edge nodes to improve the overlay efficiency .",
    "in fact , the cluster leader is the primary responsible of connecting its cluster to the top - level overlay .",
    "nevertheless , edge nodes are also allowed to join the inter - cluster mesh at the top level .",
    "the main role of edge nodes is to allow ( if fan - out constraints are not violated ) the clusters members to derive their delivery tree considering the edge node as an alternative nearby source connected to the top - level topology .",
    "moreover , these nodes may contribute in the overlay robustness in case of cluster leaders failures .",
    "although edge nodes are attached to several meshes of different clusters , they do not receive the data several times .",
    "in fact , as each edge node derives a unique delivery tree from one of the existing intra - cluster mesh , it is then a child in this particular delivery tree . on the other hand",
    ", it could be a parent in several derived delivery trees in other clusters .",
    "a high level picture of lcc is illustrated in fig .",
    "[ clusters ] .",
    "[ htb ]     note that lcc does not specify a new tree construction protocol ; any existing protocol may be used on top of lcc . in this paper",
    ", we choose to construct the lcc overlay by running the meshtree protocol  @xcite at both the top - level and the intra - cluster level .",
    "meshtree embeds the delivery tree in a degree - bounded mesh containing many low - cost links .",
    "the constructed mesh consists then of two main components : ( i ) a backbone structure , composed of a low - cost tree and connecting nodes that are topologically close together , and ( ii ) additional links to improve the delay properties .",
    "the delivery tree is then derived from the mesh using a path - vector routing protocol .",
    "the `` flat '' meshtree first constructs a randomly connected overlay and relies on periodical adding / deleting links using a set of local rules . unlike this approach ,",
    "the lcc scheme , initially constructs location - aware overlay based on the locating and clustering processes .",
    "top - level nodes then act as particular meshtree nodes , where other clusters represent neighbors in the derived delivery tree ( see fig .",
    "[ clusters ] ) .    in order to construct an overlay spanning tree rooted at the source node @xmath1",
    ", we need to consider the degree constraints . assuming that the media playback rate is @xmath2 and the outgoing access link capacity of any particular node @xmath3 , is @xmath4 , the total number of streams that the node can handle is @xmath5 = [ @xmath6 .",
    "the fan - out value of node @xmath3 represents the maximum number of connections that this node can establish with other nodes .",
    "we assume that each node can estimate its connection type ( eg adsl , 802.11 , etc . ) , relying on system and user specifications . moreover",
    ", lcc can use a history of maximum throughput of the most recent downloads , as an indication of its effective connection speed .",
    "these fan - out estimation techniques are used in order to avoid each node to measure its available bandwidth , which may involve high overhead .",
    "we also define the cluster overall capacity as @xmath7 , where @xmath8 is the number of members in the clusters .",
    "next , we detail both the locating and the clustering lcc processes .",
    "lcc adopts a nodes positioning strategy similar to meridian  @xcite to organize nodes into levels according to a distance metric . typically , the distance between two nodes is the round trip network delay .",
    "each lcc node keeps track of a fixed number of other nodes in its locating system .",
    "a locating system is a set of non overlapping and exponentially increasing levels , represented by intervals @xmath9 , where @xmath10 for @xmath11 and @xmath12 ( see fig .  [ locating ] ) .",
    "[ htb ]     nodes measure the distances to the set of nodes they are aware of , and assign each node a position in the correspondent level of their locating system .",
    "for example if the measured distance @xmath13 satisfies @xmath14 , the node is positioned in the @xmath15 level .",
    "all considered nodes in the locating system are cluster leaders . in the following ,",
    "we describe the locating process operations .",
    "initially , a newcomer , say node @xmath16 , has to contact a global well - known rendezvous point to obtain the identity of a randomly selected boot node , @xmath17 .",
    "node @xmath16 measures the distance from itself to @xmath17 , @xmath18 and assigns @xmath17 a level in its locating system , say level @xmath3 .",
    "if @xmath16 is in @xmath17 s scope , i.e. @xmath19 , the clustering criterion is met and the locating process terminates , and @xmath16 sends a request to join @xmath17 s cluster .",
    "otherwise , @xmath16 sends @xmath17 a `` localization_request '' . upon receiving such request , the requested node @xmath17 simultaneously queries nodes that it considers as nearby to @xmath16 .",
    "these queried nodes have then to report the results back to the requested node .",
    "if a queried node is closer to the newcomer than the requested node , it is considered as a candidate .",
    "a list that identifies the set of candidate nodes is sent by the requested node to the newcomer @xmath16 . among this list",
    ", @xmath16 initiates cluster joining processes with all nodes that meet the clustering criterion . if there are no such nodes in the list , nodes in the candidate list become possible requested nodes , since @xmath16 re - initiates the locating process with each node in this list sorted in increasing distances .",
    "the list is updated at each response from a requested node .",
    "this procedure is repeated until the newcomer finds a cluster leader in its scope .",
    "finally , it is necessary to set a stop criterion to terminate the process within a given time period by repeating the procedure at most @xmath20 times .",
    "if the algorithm ends without satisfying the clustering criterion , @xmath16 creates its own cluster .      during the locating request ,",
    "each requested node has to query a set of nodes .",
    "it then selects among them a list of candidate nodes to send to the newcomer . in this subsection",
    ", we answer the following question : how queried nodes are chosen by the requested node",
    "?    the basic solution would be that the requested node asks all the nodes in the same level than the newcomer and in the adjacent levels , as potential queried nodes . to establish a reference",
    ", we consider this solution that we call the `` non - selective '' locating process .",
    "although it has the advantage of simplicity , this solution may induce high overhead .",
    "in fact , while being in the same or adjacent levels than the newcomer , some queried nodes should not be taken into consideration for probing the newcomer , since they may be not closer to it than the requested node .",
    "we introduce the _ selection criterion _ in order to reduce the number of useless probes during the locating process . basically , the `` selective locating '' consists in querying only specific representative nodes .",
    "nodes that are close enough to a representative node , randomly selected by the requested node , are not queried to measure their distance to @xmath16 : the less queried nodes , the less measurements and control overhead .",
    "closeness is defined by a distance threshold value @xmath21 , which is a function of the distance between the newcomer and the requested node , @xmath13 .",
    "if the newcomer is close to the level frontier or to the requested node , the latter should use a fine - grained selection and a small @xmath21 value should be used . if not , the requested node should use a greater @xmath21 value . in our algorithm , we choose : @xmath22    nodes maintain for each level @xmath3 a square matrix , @xmath23 , representing learned distances of level @xmath3 s nodes to each other , and to nodes in adjacent levels @xmath24 and @xmath25 .",
    "values in @xmath23 are assigned as and when discovered through other nodes locating requests . if a distance is not known , it is set to a value large enough to discard the concerned node from the selection .",
    "each element @xmath26 in @xmath23 corresponds to the distance between nodes @xmath27 and @xmath28 .",
    "the @xmath29 row in @xmath30 represents the learned distances between node @xmath27 and other nodes in level @xmath3 and adjacent levels .",
    "the selection algorithm run by a requested node is presented in algorithm  [ algoselection ]    [ h ] distance list of representative nodes to query @xmath31",
    "@xmath32 @xmath33 @xmath34 @xmath35 @xmath36 @xmath37 @xmath38 @xmath39 return @xmath40    and can be described as follows : each requested node selects a random node , @xmath27 , from level @xmath3 or adjacent levels .",
    "if @xmath26 is less than the threshold value @xmath21 , then node @xmath28 is represented by @xmath27 .",
    "selected nodes are represented by a matrix , say @xmath41 , which is initially equal to @xmath42 . at each iteration of the selection process",
    ", @xmath41 is diminished by the columns of nodes in @xmath42 that can be represented by the selected node @xmath27 .",
    "the selection algorithm terminates when @xmath41 contains only distances of representative nodes .",
    "in this section , we describe the protocol to form and maintain clusters . in this work , we emphasize mechanisms to enhance the overlay qos by increasing scalability and robustness . in particular , we propose a proactive algorithm to manage failures of leaders , and new cluster formation afterwards .",
    "we also propose new mechanisms to smoothly manage cluster topology changes due to leadership or underlying network changes .      in early stage of the overlay formation ,",
    "new clusters are more frequently generated since few nodes exist .",
    "if the locating process ends with no leaders found in the newcomer s scope , the latter creates its proper cluster with a new cluster i d .",
    "it then contacts the closest cluster leaders that the locating process returns , to join the top - level topology .",
    "contacted cluster leaders inform their members by flooding a `` new_cluster '' message .",
    "finally , members verify if they are in the new leader s scope , i.e. if they are potential edge nodes",
    ".      a classical joining operation is initiated by a newcomer detecting cluster leaders in its scope after the locating process terminates .",
    "the newcomer sends simultaneously a `` join_request '' message to all the detected cluster leaders .",
    "the request contains its fan - out value and the set of other clusters it may belong to . upon receiving `` join_notification '' messages , it sends acknowledgement messages mentioning successfully joined clusters .    in lcc",
    ", each top - level node has two types of neighbors : nodes in its own cluster and other top - level nodes .",
    "since a cluster leader has limited available bandwidth , it should carefully set its node degree to maintain a balance between connecting to other top - level nodes for better overall performance and serving as many nodes as possible in its own cluster .",
    "if the cluster overall capacity is @xmath43 1 , the cluster leader accepts the newcomer .",
    "note that the cluster overall capacity is null if all nodes are edge nodes attached to the top - level topology .",
    "so , considering the case where all of these nodes have a fan - out value of 1 , this would lead to a saturated cluster .",
    "this situation can be recovered if the cluster leader requests an edge node to leave other cluster membership to serve a newcomer .",
    "if the newcomer is accepted , the cluster leader randomly assigns it a cluster member to boot into the cluster - level mesh .",
    "the newcomer gets cluster maintenance information from the cluster members .",
    "using `` keep_alive '' messages exchanged by cluster members allows to share cluster state , and to update cluster information .",
    "information about other overlay nodes is obtained using a simple gossip style node discovery technique .",
    "basically , a node , @xmath3 maintains a list of known nodes in the overlay .",
    "periodically , @xmath3 randomly picks a node from the list , say @xmath44 and sends to it a randomly - constructed set of other known members .",
    "node @xmath44 updates its own known nodes list and replies using the same procedure .",
    "this simple informative exchange allows nodes to maintain a minimal view of the overlay membership .",
    "next , we discuss how this knowledge affects the average locating process iterations .",
    "the cluster leader election is based on the value of priority vectors ( @xmath45 ) used to maintain a nodes rank .",
    "basically , a @xmath45 is defined as : @xmath46 , where @xmath47 stands for the node s current perceived latency in the intra - cluster delivery tree , @xmath48 denotes the minimum distance from the node to a known foreign cluster leader , @xmath49 represents how long the node has stayed in the overlay , and @xmath50 is a boolean indicating if the current cluster leader is included in the node s scope .",
    "the priority value is computed as a linear combination of the first 4 components of @xmath45 with decreasing weights .",
    "these priorities are used to sort appropriate eligible nodes .",
    "nodes update periodically their @xmath45 .",
    "each @xmath45 is distributed as part of `` keep_alive '' messages .",
    "when receiving nodes @xmath45 , a node sorts the cluster members with increasing priorities .",
    "in fact , cluster nodes construct a proactive rescue plan , where each node maintains a * local cache * storing shared information .",
    "the local cache consists in a sorted list of nodes that are eligible to become cluster leaders . in a dynamic network environment",
    ", a cluster leader may depart unexpectedly at any time .",
    "if the leader fails , nodes will know it after a period of time as they do no more receive the `` keep_alive '' messages from the leader .",
    "meanwhile , the second node in the list becomes automatically the leader and sends out `` keep_alive '' messages .",
    "if the second also fails , the third one will stand up , etc .",
    "it is important to notice that for stability purposes , eligible nodes that win the leader election at their joining process , are maintained at a second position in the local cache , until their life time in the cluster reaches a greater value .      in this subsection",
    ", we discuss the behavior of lcc in case of cluster members migration outside their cluster due to new cluster election or underlying topology changes .",
    "we distinguish three different clustering states :    * * stabilized state * : where the cluster leader is included in the scope of each member of the cluster . *",
    "* temporary state * : where at least one node have migrated outside its original cluster . * * recovering state * : where during the temporary state , all migrated nodes know about other migrated nodes , and start to evolve towards a stabilized state .",
    "we introduce an algorithm that allows the migrated nodes to collaborate in order to create suitable new clusters after a temporary state .",
    "it is based on the nodes rank in the local cache .",
    "it consists in a recursive procedure , where a potential leader node asks subsequent nodes in the cache to join its cluster , and triggers a recovering procedure for migrated nodes that are not in its scope .",
    "basically , nodes verify at each local cache update operation whether the current cluster leader is in their scope or not .",
    "if not , they mark it as foreign cluster neighbor in their @xmath45 with @xmath51 = 1 . at each",
    "received @xmath45 , a migrated node updates a set of other migrated nodes .",
    "the first ranked migrated node initiates the process by creating a new cluster and by sending a `` recovering_request '' to the next migrated node .",
    "the request contains identities of other nodes that are already in the node s scope .",
    "hence , each node is able , through previous received requests , to determine migrated nodes that can still be leaders ( eligible nodes ) .",
    "if the node is included in the requesting node s scope , it sends a positive _ ack _ to join its cluster and returns to a stabilized state . a node which sends a negative ack , verifies at each request if it has been contacted by all prior ranked eligible nodes in the cache . in this case",
    ", it becomes a cluster leader and initiates its proper recovering procedure by sending requests to next nodes in the local cache .",
    "the recovering algorithm terminates when contacting the last ranked migrated node .",
    "it then informs its `` new '' cluster neighbors along with its previous cluster leader of the cluster split .",
    "finally , it switches to a stabilized state and connects to the top - level topology .",
    "to evaluate and test the lcc scheme , we carried out simulations and planetlab  @xcite experiments . while the goal of simulation studies is to assess the effectiveness of proposed techniques for large scale overlays , the planetlab experiments aim to illustrate the system performance under particular real - world environments .        using the brite internet topology generator  @xcite , we simulated up to @xmath52 nodes networks .",
    "we used a node bandwidth reference model based on the gnutella peer bandwidth distribution observed by saroiu et al .",
    "we modeled the node join using poisson distribution with an average rate of 60 node joins per simulation tick .",
    "the duration distributions were modeled with an exponential distribution of 0.01 as parameter .",
    "we implemented lcc in a c library , and built wrappers for well - known ip - multicast applications ( vic / rat , vlc ) .",
    "we tested the lcc overlay over a set of 212 wide spread planetlab nodes .",
    "the set consists of 90 nodes in u.s , 90 nodes in europe and 32 nodes in asia .",
    "all experiments were conducted over several days in october 2005 . in this paper",
    ", we discuss a representative set of experimental results using `` planetlab1.cs.cornell.edu '' as the data source .",
    "this source generates a 560 kbits / s ( 70 kb / s ) data stream sent to all the other group members .",
    "nodes join the overlay at the average rate of one every 2 seconds .",
    "we remove the top 20% and bottom 20% of the measurement results and take the average of the remaining values . in practice , pings have been conducted using icmp echo messages , and we use 10 consecutive pings for latency measurements .",
    "we evaluate the lcc scheme in terms of ( 1 ) scalability , by studying the control overhead during both data distribution and overlay joining .",
    "we also observe the link adjustment frequency and the locating process resources usage ( time and number of nodes needed to locate a newcomer ) ; ( 2 ) efficiency , by measuring several common metrics that characterize the multicast overlay .",
    "in particular , we measure the average relative delay penalty ( @xmath53 ) which is defined as the average ratio between the overlay delay ( @xmath54 ) and the shortest path delay in the underlying network ( @xmath13 ) from @xmath1 to all other nodes : @xmath55 , where @xmath56 is the number of nodes in the overlay . by considering that the delivery tree `` converges '' or becomes `` efficient '' when the @xmath53 is less than a threshold value ( say 2 )",
    ", we study the convergence time .",
    "then we plot the @xmath53 and the stress on the link ( which represents the number of copies of an identical packet sent over a single link ) , varying the overlay size ; ( 3 ) robustness , by verifying the scheme robustness to leaders failures and its ability to recover in case of crash scenarios ; ( 4 ) locating process accuracy , by experimenting newcomers behavior during the locating process and their ability to locate their closest node in the underlying network , within a large overlay .      in order to compare lcc to initially randomly - connected overlays relying on periodic refinements , we experiment a variant of lcc , disabling the locating process and setting the scope value to zero , thus emulating meshtree behavior .",
    "we call this variant flat meshtree . in our simulations , we also compare lcc to two previously proposed multicast overlay structures : omni  @xcite as an infrastructure - based approach and zigzag  @xcite as a topology - aware hierarchical approach .      in the following , we report both simulation and experimental results .",
    "we ran simulations to evaluate the control traffic overhead in the overlay and analyzed the protocol behavior in large size overlays .",
    "we assumed a basic header size of 40 bytes per ip - packet and we measured the overall control message traffic sent and received by each node throughout a session .",
    "[ protocoloverhead ]    [ htb ]     [ htb ]     shows the average overhead per node when varying the overlay size .",
    "control overhead of lcc is lower than those of flat meshtree and zigzag , and is comparable to omni .",
    "we note that the per node overhead in lcc , for different @xmath0 values , is steady for small overlays .",
    "the maximum value reached for a 512 nodes overlay is 1.10 kbps for lcc with @xmath0 = 100ms , and control messages incur less than 2 kbps message overhead , in a 8000-nodes overlay .",
    "omni nodes obtain lower control overhead . since it is the application - level multicast servers that are in charge of managing the delivery tree , nodes in omni exchange a minimum number of control messages to join the overlay .",
    "we note that the above results include overheads due to network measurement , in particular during the locating process , as we consider these results from the instant the node contacts the rendezvous point .    to evaluate the cost of locating the closest cluster to join , we measured on the planetlab testbed the average control traffic overhead ( in kbps ) generated during overlay joining for both the non - selective and selective locating process .",
    "we observe in fig .",
    "[ overhead ] the importance of the selection criterion during the locating process .",
    "the per node overhead in the selective locating process is reasonably small with about 0.7 kbps for a 212 nodes overlay .",
    "in addition , it increases very slowly with the number of members .",
    "the locating messages are roughly 50% less frequent than those of a non - selective localization .",
    "not selecting nodes boosts the message overhead due to useless measurement operations . in this case , requested nodes would contact all the nodes in the newcomer s level and the adjacent levels .",
    "these queried nodes will also measure their distance to the newcomer , which would incrementally add network overhead .",
    "however , we note that the selective locating process may require more time to locate the newcomer . in fact , by selecting representative nodes , the newcomer may need to contact more requested nodes than the non - selective process as discussed later and shown in fig .",
    "[ hopsknownneighbors ] .",
    "[ labadjustement ] shows the lcc structure stability during membership changes . on the planetlab testbed , we start tracking the link adjustment counts right after the last node joined the overlay .",
    "results are collected at 30-second intervals .",
    "we observe that the link adjustment rate mostly falls below 5 per hour per node for the lcc overlay , whereas it stabilizes at roughly 10 per node per hour for the flat meshtree . to confirm that the lcc efficiency is robust , in case of membership frequent changes and crash scenarios , we inject a simultaneous 20-nodes failure in 7 different sites at the @xmath57 minute and we let them rejoin the overlay at the @xmath58 minute .",
    "we observe that the link adjustment activity for lcc is moderate ( mostly under 5 per hour per node ) during the membership changes . after the @xmath59 minute",
    ", the average link adjustment count falls around 2 per hour per node .",
    "due to randomness in initially connecting newcomers to the clusters , the link adjustment rate of meshtree is maintained at 10 .",
    "this assesses our intuition that non - initially locating schemes may require high control messages for quality maintenance and structure repairs operations .    the simulation results shown in fig .",
    "[ simadjustement ]    [ htb ]     [ htb ]     confirm the planetlab experiments conclusions .",
    "flat meshtree suffers from high adjustment rate , almost more than 20 links change per node per simulation tick . compared to zigzag , the lcc structure has a very low adjustment rate .",
    "this rate is stabilized at less than 5 adjustments per node per tick .",
    "link changes in omni are less frequent than other improvement - based overlay structures .",
    "omni nodes achieve an average link adjustment per node per tick of 12.9 , with a minimum of 0.78 .",
    "nodes in lcc ( @xmath0 = 20 ms ) have an average of 11.4 adjustments per node per tick with a minimum links change of 1.4 .",
    "the refinement - based approaches depend on the choice of a refinement period , say @xmath60 . a small @xmath60 value reduces the convergence time , as more adjustment procedures are processed within a short time , but may induce high overhead .",
    "a large @xmath60 may reduce overhead at the expense of increased convergence time . in the following experiments , we set the improvement period @xmath60 to 30 seconds , for each receiver , and study the convergence time metric which describes the overlay structure evolution in time . fig .",
    "[ convergence ] illustrates the convergence time , showing @xmath53 versus the multicast session time in both simulations ( overlay size = 2000 nodes ) and planetlab testbed .",
    "all nodes join the overlay within the first 100 seconds .",
    "[ htb ]     we observe that in lcc , @xmath53 rapidly decreases to a value less than 2 after the first 400 seconds , i.e. less than 14 improvement rounds per node . for flat meshtree , it takes much more time for @xmath53 to stabilize with almost 1300 seconds .",
    "this shows the importance of pro - actively organizing the overlay , to converge very quickly to an efficient structure .",
    "the zigzag overlay reaches an acceptable @xmath53 value much more quickly than meshtree . although stabilized , this value is more than 2 , which is still inefficient to consider the overlay converged .",
    "the convergence time of zigzag is around 1400 seconds when @xmath53 falls under 2 .",
    "the reason why zigzag does not converge quickly is that during overlay growth , several group merges and splits are imposed to not exceed the maximal group size .",
    "this may induce several improvements rounds , and link adjustments .",
    "the omni server - based structure is not affected by frequent membership changes and converges quickly , similarly to lcc .",
    "we characterize the average incurred delay observed by the receivers in a large populated overlay by observing the @xmath53 variation according to the overlay size in fig .",
    "[ averagerdpcomparisonvaryingoverlaysize ] .",
    "[ htb ]     [ htb ]     in flat meshtree , the @xmath53 increases drastically to more than 4 demonstrating that this protocol does not scale to a few thousands of nodes .",
    "nevertheless , we note that flat meshtree has lower @xmath53 than lcc structures in small groups ( overlay size @xmath61 500 nodes ) .",
    "zigzag maintains a stable @xmath53 value while the overlay size is increasing but suffers relatively poor performance with @xmath62 2.5 in a 3000-nodes overlay . to make it easier to read , we zoom in on a portion of the graph in fig .",
    "[ zoomaveragerdpcomparisonvaryingoverlaysize ] .",
    "we observe that the @xmath53 of lcc is about 60% of zigzag . for @xmath0=50",
    "ms and 100 ms , @xmath53 values of lcc are roughly maintained at values between 1.4 and 2 for large overlays .",
    "omni has almost a constant @xmath53 value ( 1.82 ) and performs on average better than lcc in 12000-nodes overlay .",
    "we also note that in large overlays , for clusters defined with 10 ms as node s scope , @xmath53 increases to reach 3 , as nodes are more likely to be scattered .",
    "larger scopes are more efficient in this case .",
    "[ stressvsticks ]    [ htb ]     shows average physical network stress for each of the overlays , namely omni , zigzag , flat meshtree and lcc ( @xmath63 ) 2000 seconds after the last node joined .",
    "omni and zigzag stress values stabilize between 6.5 and 7 .",
    "the flat meshtree overlay leads to somewhat lower stress than omni and zigzag with stress highly oscillating between 4 and 5 due to random connections established by newcomers .",
    "we note finally that lcc has an impressively low stress , 2 to 3 times less than other overlays , with a steady stress value between 2.5 and 2.8 .",
    "topology information is of paramount importance in this observation , as packets sent through the top - level hierarchy are sent to the cluster leader and in some cases to potential edge nodes .",
    "our clustering process allows then to reduce the amount of redundant flows entering each network , considering clusters as `` local networks '' , and cluster leaders as `` multicast - enabled routers '' .",
    "when a non - leaf node quits , the overlay needs to be reconstructed .",
    "so , it is important that this node s children can quickly locate a new parent to resume the session . in addition",
    ", the recovery process should not result in a fan - out violation in any node . in lcc , to recover from the failure of its neighbor a node has to redirect packet requests from that neighbor to another nearby in its proper cluster .",
    "we compare lcc to the _ grandparent recovery scheme _ studied in  @xcite . in this scheme",
    ", the children of the node which departs try first to attach to their grandparent provided that the latter has enough capacity .",
    "otherwise , they are redirected to its descendants .",
    "we instruct a number of randomly selected nodes in a 5000-nodes overlay to leave the session simultaneously .",
    "then , we observe the recovery time of members , as the average time for an affected node to resume the session . results in fig . [ failurerecovery ]    [ htb ]     show that lcc always yields a smaller recovery time than the tree - based grandparent recovery scheme . on average",
    ", lcc takes 3.85 seconds to recover from failures , which is about 35% less than for the grand - parent recovery scheme .    in fig .",
    "[ recoveryleaderfailure ] ,    [ htb ]     we study the capacity of the lcc overlay to recover from cluster leader failures .",
    "each 10 seconds , a set of randomly selected cluster leaders are instructed to simultaneously leave a 5000-nodes lcc overlay ( @xmath0 = 50 ms ) .",
    "we observe that when 30% of cluster leaders fail simultaneously , the recovery time is almost @xmath61 2 seconds .",
    "lcc is robust thanks to : 1 ) the proactive rescue plan of leaders election and 2 ) the edge nodes connected to the top - level topology , that allows to achieve data in case of leaders data disruption .",
    "to evaluate the behavior of newcomers during the locating process , we observe the average number of requested nodes contacted by a newcomer . fig .",
    "[ hopsknownneighbors ] depicts the average number of requested nodes versus the total number of known cluster leaders in each requested node s locating system .",
    "the figure plots both planetlab results and simulations of 200 newcomers running the selective locating process , once the overlay size reaches respectively 2000 , 3000 and 4000 nodes , resp .",
    "denoted by ov = 2000 , ov = 3000 and ov = 4000 in fig .",
    "[ hopsknownneighbors ] .",
    "[ htb ]     [ htb ]     we expected that the selective locating process needs more requested nodes than the non selective process . indeed , since it queried representative nodes at each iteration , it may be less accurate in one iteration , and hence requires to contact more nodes afterwards .",
    "results show however , that the selection has little impact on the locating efficiency .",
    "the selective locating process performs almost as well as the non - selective process , with a maximum of 13 requested nodes in planetlab experimentations .",
    "moreover , curves are very close when the number of known cluster leaders is large .",
    "we also observe that the locating process scales well to large overlays : in a 4000-nodes overlay , newcomers are located by contacting less than 12 requested nodes that know about only 60 nodes in their locating system .",
    "the distribution of nodes depicted in fig . [ distributionaveragehops ] shows that more than 80% of a 2000-nodes overlay are able to terminate the locating process by contacting less than 15 requested nodes . on average the locating time in the experiment",
    "is very low with a mean locating time of 3.2 seconds , a maximum of 7.2 seconds and minimum of 1.8 seconds .",
    "finally , we note that 98.4% of newcomers are able to connect to their closest cluster upon their arrival .",
    "300 seconds after the last node joins the overlay , 99.3% of nodes are connected to their closest node .",
    "this demonstrates the locating process accuracy , which is one of the reasons for the resulting promising performances of lcc .",
    "in this paper , we proposed a practical solution to enhance different qos aspects of overlays , namely scalability and efficiency .",
    "the overlay construction is initiated by a simple and scalable locating process that allows newcomers , after contacting a few nodes , to locate the closest cluster in the overlay .",
    "the locating process includes a selection algorithm to minimize measurement overhead . on the basis of the locating process",
    ", we proposed an hierarchical topology - aware overlay construction .",
    "we introduced mechanisms to pro - actively deal with leaders failures and underlying topology characteristics changes .",
    "our planetlab and simulations experiments prove that lcc incur low overhead during both localization and data distribution .",
    "compared to other enhancement - based and topology - aware approaches , lcc achieves shorter convergence time and performs less link adjustments rate . at the same time , the scheme is robust to nodes failures and performs well in terms of data distribution efficiency especially in large overlays . in conclusion ,",
    "we believe that lcc is very suitable for large - scale applications such as event broadcast for thousands of attendees . in future works",
    ", we will focus on ways to automatically tune different parameters such as nodes scope and stop criterion , through real - life tests .",
    "we will also investigate techniques to secure the overlay and detect / prevent users from cheating ."
  ],
  "abstract_text": [
    "<S> recent proposals in multicast overlay construction have demonstrated the importance of exploiting underlying network topology . however , these topology - aware proposals often rely on incremental and periodic refinements to improve the system performance . </S>",
    "<S> these approaches are therefore neither scalable , as they induce high communication cost due to refinement overhead , nor efficient because long convergence time is necessary to obtain a stabilized structure . in this paper </S>",
    "<S> , we propose a highly scalable locating algorithm that gradually directs newcomers to their a set of their closest nodes without inducing high overhead . on the basis of this locating process </S>",
    "<S> , we build a robust and scalable topology - aware clustered hierarchical overlay scheme , called lcc . </S>",
    "<S> we conducted both simulations and planetlab experiments to evaluate the performance of lcc . </S>",
    "<S> results show that the locating process entails modest resources in terms of time and bandwidth . </S>",
    "<S> moreover , lcc demonstrates promising performance to support large scale multicast applications . </S>"
  ]
}