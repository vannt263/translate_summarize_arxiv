{
  "article_text": [
    "if a given feynman integral depends on kinematic invariants and masses which essentially differ in scale , a natural idea is to expand it in ratios of small and large parameters . as a result ,",
    "the integral is written as a series of simpler quantities than the original integral itself and it can be substituted by a sufficiently large number of terms of such an expansion . for limits typical of euclidean space ( for example , the off - shell large - momentum limit or the large - mass limit ) ,",
    "one can write down the corresponding asymptotic expansion in terms of a sum over certain subgraphs of a given graph  @xcite . this prescription of expansion by subgraphs has been mathematically proven ( see @xcite and appendix  b.2 of @xcite ) .",
    "moreover , there is an automated tool  @xcite where such an expansion by subgraphs is implemented .    for limits typical of minkowski space ( i.e.  which can not be formulated in euclidean space ) the universal strategy of expansion by regions  @xcite is available .",
    "it consists of the following prescriptions :    * divide the space of the loop momenta into various regions and , in every region , expand the integrand in a taylor series with respect to the parameters that are considered small there . *",
    "integrate the integrand , expanded in the appropriate way in every region , over the _ whole integration domain _ of the loop momenta . *",
    "set to zero any scaleless integral .    as shown in  @xcite ,",
    "this prescription can also be applied to parametric representations of feynman integrals , i.e.  alpha parameters ( or generalized feynman parameters ) integrated from 0 to  @xmath0 , eventually restricted by a delta function .",
    "then the regions are specified by scaling relations between the parameters .",
    "there is no mathematical proof that this prescription is correct in all situations . but",
    "also no examples are known where a proper application of the expansion by regions leads to wrong results .",
    "an indirect proof exists for limits typical of euclidean space because here the strategy of regions is equivalent to the mathematically proven expansion by subgraphs .",
    "a systematic study of the expansion by regions was presented recently in  @xcite .",
    "there it was shown explicitly and illustrated using various one - loop examples that one can start from a decomposition of a given integral into non - intersecting domains and arrive at an expansion by regions in the above sense .",
    "this requires certain conditions on the choice and completeness of the considered regions which were derived in  @xcite .",
    "as pointed out there , the appearance of additional overlap contributions can be avoided by adequate choices of the regions and regularization parameters .",
    "while these findings provide some hints on the proper choice of the regions , it remains a non - trivial task to actually reveal the typical regions for a given limit .",
    "usually , one starts from considering one - loop examples , checks the results against known analytical results , then proceeds in two loops etc .",
    "one can also use the second version @xcite of the code fiesta @xcite to obtain numerically several first terms of a given asymptotic expansion .",
    "recently an algorithm for an automatic search of regions was suggested and implemented on a computer as the open source mathematica code ` asy.m `  @xcite .",
    "the algorithm uses a geometric approach based on finding the convex hull of a set of points determined from a parametric representation of the feynman integral . in this way",
    "all possible sets of scalings for the ( feynman ) parameters are found which lead to non - vanishing ( because non - scaleless ) integrals .",
    "these regions may then be used to expand the parametric integral , or they can be translated into regions for expanding the integral in loop - momentum space .",
    "this code works successfully for a large variety of limits , at least in cases where the function  @xmath1 in the corresponding parametric representation which depends on kinematic invariants and masses is only composed of terms with the same sign .",
    "moreover , it was shown in @xcite that in this case there are no regions except for the ones produced by the code ( all others result in scaleless integrals ) . in particular",
    ", the code asy.m works for sudakov - type limits which are typical of minkowski space .",
    "as it was pointed out in @xcite the code does not reveal potential regions in threshold expansions , and similarly it fails to detect the so - called glauber regions .",
    "our goal in the present paper is to provide an algorithm and the corresponding update asy2.m of the code ` asy.m ` which automatically identifies all regions relevant for a given integral , including potential and glauber regions .",
    "we start in section  [ sec : preliminaries ] by introducing the parametric representations of loop integrals which we use later and by explaining how the contribution of a given region is obtained in the language of such parametric integrals .",
    "then we elaborate our algorithm for revealing potential and glauber regions and explain how the code ` asy2.m ` is applied in such cases .",
    "this is done in section  [ sec : potential ] for an example with a potential region , and section  [ sec : glauber ] deals with the more complicated problem of revealing glauber regions . in both sections [ sec : potential ] and",
    "[ sec : glauber ] , we first formulate simple changes of variables and decompositions of a given feynman integral , using instructive one - loop examples , which lead to integrals where asy2.m is able to detect the relevant regions and print their list in terms of the scalings of the parameters .",
    "then , for both cases , we explain how to use the new features of asy2.m to perform these algorithmic steps automatically .    in the case of section  [ sec : glauber ] with glauber regions , the structure of the regions differs depending on whether the expansion is performed in loop - momentum space or at the level of the parametric integral .",
    "we show in section  [ sec : glauber_l ] how to disentangle and match the various regions arising in this problem by using generic propagator powers , and how asy2.m can be employed to automate such an analysis .",
    "a summary of the new features and the syntax of ` asy2.m ` ( together with a download link ) is provided in section  [ sec : syntax ] . in section  [ sec : conclusion ] we conclude by discussing the mathematical problem of proving the expansion by regions for a simple example which is not related to feynman integrals , but where ` asy2.m ` works successfully .",
    "we are dealing with dimensionally regularized feynman integrals @xmath2 where @xmath3 is the number of loops , the indices @xmath4 are general powers of the propagators , the dimension is @xmath5 and the denominators @xmath6 are given by @xmath7 i.e.  they are quadratic or linear functions of the external momenta @xmath8 and the loop momenta @xmath9 with the usual infinitesimal imaginary part @xmath10 .",
    "monomials in the numerator are taken into account as denominators raised to negative powers .",
    "the alpha representation of  ( [ eqbn - d1 ] ) takes the form @xmath11 where @xmath12 .",
    "the functions @xmath13 and @xmath1 depend polynomially on the alpha parameters  @xmath14 . furthermore , @xmath13 and @xmath1 are homogeneous functions of the alpha parameters with the homogeneity degrees @xmath3 and @xmath15 , respectively .",
    "the function  @xmath1 is linear in the kinematic invariants and/or squared masses which we denote by @xmath16 , while the function  @xmath13 is independent of the @xmath17 .",
    "if ( [ eqbn - d1 ] ) is an integral with standard propagators @xmath18 associated with the lines of a graph , then the functions @xmath13 and @xmath1 are called symanzik polynomials and are given by the well - known formulae in terms of trees and @xmath19-trees . for a general feynman integral of the form  ( [ eqbn - d1 ] ) one can obtain these functions using the simple public code ` uf.m `` from ` uf.m `  @xcite is called with three arguments : the list of loop momenta , the list of denominators of the propagators and a list of replacement rules for all kinematic invariants .",
    "the output is a list with the following entries : the function  @xmath13 , the function  @xmath1 and the number of loops . in order to obtain @xmath13 and @xmath1 with the correct sign",
    ", denominators have to be specified with the opposite sign as in  ( [ denom - d1 ] ) , i.e. corresponding to a negative imaginary part @xmath20 : ` uf[{k1,k2 , ... } , { -e1,-e2 , ... } , { } ] ` . ]",
    "@xcite which is also part of the codes ` asy.m ` and ` asy2.m ` .",
    "if some of the indices  @xmath4 are negative integers , i.e.  they correspond to numerators instead of denominators of the integral  ( [ eqbn - d1 ] ) , the alpha representation  ( [ alpha - d ] ) is to be understood in the limit where these indices tend to their negative integer values .",
    "effectively , the integration over the corresponding parameters  @xmath14 is replaced by differentiating with respect to these parameters and setting them to zero .    closely related to ( [ alpha - d ] )",
    "is the ( generalized ) feynman parametric representation @xmath21 where @xmath22 in the argument of the delta function is an arbitrary non - empty subset of @xmath23 , @xmath24 and the functions @xmath13 and @xmath1 are the same as those in  ( [ alpha - d ] ) with the parameters @xmath14 replaced by @xmath25 .",
    "it is well known that the formula  ( [ alpha - d - mod ] ) holds for any choice of the subset  @xmath22 in the argument of the delta function .",
    "this feature is related to the above - mentioned homogeneity properties of the functions @xmath13 and @xmath1 . ) , ( [ delta_int_hom ] ) and footnote  [ fn : delta_scaling ] ( p.  ) for a general proof . ] if one chooses @xmath26 , the standard feynman parametrization is recovered .",
    "let us suppose that we have to study the asymptotic behaviour in a one - scale limit , i.e.  every mass and kinematic invariant has a certain scaling @xmath27 , @xmath28 , expressed in powers of the small parameter of the problem , @xmath29 .",
    "the strategy of expansion by regions formulated in terms of parametric integrals ( [ alpha - d ] ) or  ( [ alpha - d - mod ] ) @xcite states that the asymptotic expansion in such a limit is given by a sum over regions which are specified by the scalings of the parameters @xmath14 or @xmath25 expressed in powers  @xmath30 of the expansion parameter  @xmath29 .",
    "each region  @xmath31 is labelled by the list @xmath32 of its scaling powers .",
    "the contribution of the region  @xmath31 is obtained by scaling the masses and kinematic invariants according to the given limit as specified above , by substituting @xmath33 , in the integrand of  ( [ alpha - d ] ) or @xmath34 in the integrand of  ( [ alpha - d - mod ] ) and by expanding the integrand in powers of  @xmath29 . here the product of the differentials @xmath35 or @xmath36 provides another factor @xmath37 to the power counting .",
    "explicitly , the contribution of the region  @xmath31 is given by the prefactor in ( [ alpha - d - mod ] ) times @xmath37 times the integral @xmath38 with the integrand expanded in powers of  @xmath29 .",
    "this expansion also involves the argument of the delta function in  ( [ alpha - d - mod - scaled ] ) , such that , under the expansion , certain parameters drop out of the argument of the delta function and are integrated from 0 to  @xmath0 . for this reason",
    "the upper integration limit of all feynman parameters should be kept at infinity and not switched to  @xmath39 even if , before the expansion , their integration is restricted by the delta function .",
    "one may avoid expanding the delta function by choosing the original subset  @xmath22 in  ( [ alpha - d - mod ] ) sufficiently small .",
    "let us write down the leading - order ( lo ) contribution of a given region in a more explicit way .",
    "for the two basic functions in  ( [ integrand ] ) we have @xmath40 where the arguments of the polynomials @xmath13 and @xmath1 on the left - hand side indicate that they are expressed in terms of the scaled parameters @xmath41 and @xmath42 , while their expansion coefficients on the right - hand side are expressed in terms of @xmath25 and @xmath17 .",
    "according to the prescription formulated above , the lo contribution of the region  @xmath31 is represented as @xmath43 in principle , the argument of the delta function in  ( [ alpha - d - mod0 ] ) contains a sum over only those scaled parameters @xmath44 with the minimal scaling power @xmath45 .",
    "but by rescaling @xmath46 , the delta function is transformed into its standard form without powers of  @xmath29 , while the rest of the integral remains invariant due to the homogeneity of the polynomials @xmath47 and @xmath48 . finally , as for the original feynman parametric representation  ( [ alpha - d - mod ] )",
    ", one can choose again an arbitrary non - empty subset  @xmath49 for the sum in the argument of the delta function in  ( [ alpha - d - mod0 ] ) .",
    "the list of scalings @xmath32 of a region is only determined up to adding the same arbitrary real number  @xmath50 to each entry , because the corresponding contribution stays the same under @xmath51 .",
    "in particular , the lo behaviour presented in  ( [ alpha - d - mod0 ] ) is independent of such a shift  @xmath50 , because @xmath52 and @xmath53 , due to the homogeneity properties of @xmath13 and  @xmath1 .",
    "the terms of the expansion come from various regions and can be ordered according to accompanying powers of  @xmath29 . after keeping some first terms of the expansion one can set @xmath54 and",
    "write down the given feynman integral as these selected first terms plus a remainder which vanishes sufficiently fast in the given limit .",
    "it turns out that only a limited number of regions contribute to the expansion because for the rest of the regions one obtains integrals without scale which are set to zero .",
    "it is the subject of this paper and the task of the code asy.m and its updated version asy2.m to find all relevant regions for a given integral .",
    "let us consider the one - loop propagator diagram with two massive lines in the threshold limit , i.e.  when @xmath55 with @xmath56 being the external momentum : @xmath57 where the usual @xmath58 is implied in all the propagators . within the strategy of expansion by regions ,",
    "the hard and the potential regions give contributions to the expansion @xcite .",
    "the previous version of the code asy.m @xcite reported only about the hard region .",
    "the reason for this can be seen in the corresponding parametric representation , @xmath59^{{\\varepsilon}}}\\ ; ,    \\label{prop1_alpha}\\end{aligned}\\ ] ] where the parameters  @xmath60 are integrated from 0 to @xmath0 ( restricted by the delta function ) . as it was pointed out in @xcite , it is the region where @xmath61 ( more precisely ) which causes problems . in other words ,",
    "the polynomial in the square brackets in  ( [ prop1_alpha ] ) ( considered at positive @xmath62 and @xmath63 ) has terms of different sign , such that cancellations occur because of the presence of the negative term @xmath64 .    to reveal the missing potential contribution ,",
    "let us perform a simple trick .",
    "we decompose the integration domain into two subdomains , @xmath65 and @xmath66 .",
    "the two resulting integrals are equal to each other , but such an equality will not generally take place for any integral . in the first domain we turn to new variables by @xmath67 ,",
    "remove the primes at @xmath60 and obtain the integral ( again from 0 to @xmath0 with the usual restrictions via the delta function ) @xmath68^{{\\varepsilon}}}\\;.    \\label{prop1_alpha_1}\\ ] ] the goal of this trick was to make the line @xmath69 ( in the old variables ) the border of an integration domain which turned out to be ( in the new variables ) @xmath70 .",
    "now we can run the code asy2.m . since this is a parametrical integral rather than a feynman integral we use the newly introduced command wilsonexpand [ ] for integrals where all parameters are integrated from 0 to @xmath0 :    .... wilsonexpand[q^2/4*x2 ^ 2 + y*(x1 + x2)^2 ,    x1 + x2 , { x1 , x2 } , { q - > 1 , y - > x } ,    delta - > true ] ....    the first two arguments of ` wilsonexpand [ ] ` are the polynomials @xmath1 and @xmath13 , respectively , as defined in section  [ sec : preliminaries ] .",
    "they can easily be determined from the square brackets in the denominator of the parametric integral  ( [ prop1_alpha_1 ] ) and from the round brackets in the numerator .",
    "the third argument is the list of integration parameters , and the fourth argument specifies the scaling of the kinematic quantities with respect to the small parameter which is labelled by the global symbol  ` x ` . here by ` y - > x ` we tell the code that @xmath63 is the small expansion parameter , and by ` q - > 1 ` we specify that the momentum  @xmath56 scales as @xmath71 .",
    "the option ` delta - > true ` tells ` wilsonexpand [ ] ` that , under the integration , the sum over an arbitrary non - empty subset of the integration parameters is restricted to  1 by a delta function .",
    "note that ` wilsonexpand [ ] ` can only take into account such a delta function if the specific choice of the sum over parameters in the argument of the delta function is irrelevant .",
    "this is the case for the generalized feynman parametric integral  ( [ alpha - d - mod ] ) introduced in section  [ sec : preliminaries ] .",
    "the integrals ( [ prop1_alpha ] ) and  ( [ prop1_alpha_1 ] ) are special cases of  ( [ alpha - d - mod ] ) such that we could e.g.  replace @xmath72 by @xmath73 without changing the value of the integrals .",
    "if , however , a specific form of the delta function is assumed , e.g.  by replacing @xmath74 under the integral , then the option ` delta ` of ` wilsonexpand [ ] ` does not apply ( see section  [ sec : syntax ] for details ) . alternatively , ` wilsonexpand [ ] ` can be used without the option ` delta ` after eliminating one of the integrations , e.g.  via @xmath73 .",
    "the output of the above - mentioned call of ` wilsonexpand [ ] ` is a list of regions specified by the scaling of the parameters  @xmath60 in powers of the small parameter  @xmath63 :    .... { { 0 , 0 } , { 0 , 1/2 } } ....    this specification of a region corresponds to the list of scalings @xmath75 introduced in section  [ sec : preliminaries ] .",
    "the first entry in the output , @xmath76 , refers to the hard region with the scaling @xmath77 , @xmath78 which has already been found by ` asy.m ` .",
    "but now also the region @xmath79 is found with the scaling @xmath77 , @xmath80 which provides the potential contribution .",
    "the contribution of the hard region starts with the order @xmath81 .",
    "every term of the expansion can be evaluated in terms of gamma functions for general  @xmath82 . according to the prescriptions for writing down the contribution of a region formulated in section  [ sec : preliminaries ] , the contribution of the @xmath83-th order expansion of  ( [ prop1_alpha_1 ] ) in the potential region reads @xmath84 only the leading order ( @xmath85 ) , @xmath86 yields a non - vanishing contribution which is evaluated in terms of gamma functions at general @xmath82 . taking into account that we have two identical integrals after our decomposition , we arrive at the following result for the potential contribution which is of order @xmath87 : @xmath88 in agreement with  @xcite .    in fact , such a trick of making manifest squares of some linear combination of the integration parameters was already used in the code fiesta @xcite in order to evaluate numerically feynman integrals at a threshold . using the implementation of this procedure in fiesta it turned out to be possible to automate the above trick for a general feynman integral . in the present version asy2.m",
    ", the user may call the command ` alpharepexpand [ ] ` with the additional option ` preresolve ` enabled which automatically looks for the change of variables described above :    .... alpharepexpand[{k } ,    { k^2 - m^2 , ( k - q)^2 - m^2 } ,    { q^2 - > qq , m^2 - > qq/4 + y } ,    { qq - > 1 , y - > x } ,    preresolve - > true ] ....    as in the previous version of ` asy.m ` , the arguments of ` alpharepexpand [ ] ` are the list of loop momenta , the list of denominators of the loop integral , a list of replacements for the kinematic quantities , and the list of scalings with respect to the small parameter  ` x ` .",
    "the output is a list of entries which indicate for each region the changes of variables , the jacobian of the integral transformation , and the scalings of the new variables :    .... { { { x[1 ] - > y[1 ] + y[2]/2 , x[2 ] - > y[2]/2 } ,     2 , { 0 , -1/2 } } ,   { { x[1 ] - > y[1 ] + y[2]/2 , x[2 ] - > y[2]/2 } ,     2 , { 0 , 0 } } ,   { { x[1 ] - > y[1]/2 , x[2 ] - > y[1]/2 + y[2 ] } ,     2 , { 0 , 0 } } ,   { { x[1 ] - > y[1]/2 , x[2 ] - > y[1]/2 + y[2 ] } ,     2 , { 0 , 1/2 } } } ....    the original feynman parameters are labelled ` x[1 ] ` , ` x[2 ] ` , @xmath89 , while the new parameters are labelled ` y[1 ] ` , ` y[2 ] ` , @xmath89 .",
    "the scaling relations which determine the regions are specified for the new parameters .    as explained in section  [ sec : preliminaries ] , a region remains invariant if all of its scalings are shifted by the same amount , i.e.  if all parameters are rescaled simultaneously .",
    "so the scaling @xmath90 shown above is equivalent to @xmath91 , i.e.  the first new parameter is suppressed by @xmath92 with respect to the second one . for both parts of the integral decomposition",
    "the hard and potential regions are found .",
    "the preresolution algorithm implemented in asy2.m ( and switched on with the option ` preresolve ` ) tries to eliminate factorized combinations of terms in the function @xmath1 which potentially cancel each other , like @xmath93 in the example above .",
    "it checks all pairs of variables ( say , @xmath94 and @xmath63 ) which are part of monomials with opposite sign . for all those pairs",
    "the code tries to build a linear combination @xmath95 of @xmath94 and @xmath63 such that in the variables @xmath94 and @xmath95 or @xmath63 and @xmath95 this monomial disappears .",
    "the code checks whether in the new variables the number of monomials with opposite sign decreases .",
    "for all such pairs the code recursively repeats the initial procedure in the new variables . as a result",
    "it creates a tree of possible bisections and corresponding replacements of variables .",
    "a leaf of this tree is a set of sectors and functions such that one can not decrease the number of monomials with opposite sign any longer .",
    "ideally it means that all monomials now have the same sign .",
    "the code analyzes all leafs and chooses one of those with the minimal number of opposite - sign monomials ( or the minimal number of sectors if the numbers of monomials with opposite sign coincide ) . after finishing with the preresolution",
    ", the code performs the replacements and looks for regions in all those sectors , using the algorithm of the original code ` asy.m ` described in  @xcite .",
    "note that the algorithm can only find the necessary variable transformations if it is able to determine the relative signs of all terms in the polynomial  @xmath1 . as the signs of symbols are unknown to ` asy2.m ` , the substitution rules of the third and fourth arguments of ` alpharepexpand [ ] ` must replace all kinematic quantities by numbers ( integers or fractions of integers ) or powers of the small parameter  ` x ` .",
    "we have checked that the updated version asy2.m works in various examples of the threshold expansion ( considered in  @xcite ) : a triangle , a box , the two - loop propagator diagram ( with the masses @xmath96 ) , a two - loop vertex diagram . because of the decomposition of a given integration domain into subdomains , the number of resulting integrals for various regions increases a little bit .",
    "for example , the ( hard - hard ) region for the two - loop propagator diagram is described by six integrals , the ( potential - ultrasoft ) region is also described by six integrals , etc .",
    "however , the ( potential - hard ) region is described by four integrals with some regions ( with scalings composed of powers 1 , 1/2 and 0 ) , and four more integrals with a set of regions of a different type ( composed of 1 and 0 ) .",
    "let us finally mention that the preresolution algorithm also works for threshold expansions with unequal masses .",
    "returning to the one - loop example  ( [ prop1_integral ] ) , but now with different masses @xmath97 and @xmath98 in the propagators and the expansion parameter defined as @xmath99 , we call :    .... alpharepexpand[{k } ,    { k^2 - m1 ^ 2 , ( k - q)^2 - m2 ^ 2 } ,    { q^2 - > ( m1 + m2)^2 - 4*y } ,    { y - > x , m1 - > 2 , m2 - > 3/2 } ,    preresolve - > true ] ....    we have set the values of the masses to different rational numbers , @xmath100 and @xmath101 ( the actual values are irrelevant ) , thus permitting the preresolution algorithm to know about their sign without assuming any equality or other relation between them . the polynomial  @xmath1 in the parametric representation of the feynman integral reads @xmath102 , and cancellations occur where @xmath103 .",
    "these cancellations are automatically made explicit by adequate changes of variables . the output    .... { { { x[1 ] - > y[1 ] + 3*y[2]/7 ,     x[2 ] - > 4*y[2]/7 } , 7/4 , { 0 , -1/2 } } ,   { { x[1 ] - > y[1 ] + 3*y[2]/7 ,     x[2 ] - > 4*y[2]/7 } , 7/4 , { 0 , 0 } } ,   { { x[1 ] - > 3*y[1]/7 ,     x[2 ] - > 4*y[1]/7 + y[2 ] } , 7/3 , { 0 , 0 } } ,   { { x[1 ] - > 3*y[1]/7 ,     x[2 ] - > 4*y[1]/7 + y[2 ] } , 7/3 , { 0 , 1/2 } } } ....    shows that ` asy2.m ` detects both regions .",
    "the variable transformations are always normalized such that sums of the parameters ( here @xmath104 ) remain invariant .",
    "so , we now have a manifestly lorentz - invariant treatment of threshold expansion and a code that automatically provides the set of relevant regions .",
    "let us consider the one - loop five - point integral in fig .",
    "[ fig : glauber ] , where two initial - state partons both perform a collinear splitting into two partons each with momenta @xmath105 and @xmath106 , respectively . while two partons , one of each pair , collide with a large centre - of - mass energy @xmath107 , the two remaining partons exchange a particle with the small mass  @xmath108 .",
    "we will use the simplified kinematics @xmath109 and @xmath110 with @xmath111 and @xmath112 in the limit @xmath113 : @xmath114    before we search for regions using ` asy.m ` , we notice that this five - point integral is similar to the sudakov form factor example treated in section  6 of  @xcite . from the viewpoint of the convergence of the expansions , the second and third propagators of  ( [ 5pt_integral ] ) are equivalent , and so are the fourth and fifth propagators .",
    "effectively , the five - point integral has only three different types of propagators which are equivalent to the ones of the three - point integral in  @xcite .",
    "so the integral  ( [ 5pt_integral ] ) can be expanded in loop - momentum space employing the regions and convergence domains known from  @xcite ( and using generic propagator powers as analytic regulators where necessary ) :    * a hard region where @xmath115 , * a 1-collinear region where @xmath116 and @xmath117 , * a 2-collinear region where @xmath118 and @xmath119 , * a glauber region where @xmath120 , and the components of  @xmath83 perpendicular to the plane spanned by @xmath121 scale as @xmath122 .",
    "the collinear - plane region mentioned in  @xcite yields only scaleless contributions .",
    "but , in contrast to the three - point integral , the five - point integral has a non - vanishing glauber contribution .",
    "the glauber region even provides the leading contribution scaling as @xmath123 , whereas the collinear contributions start with @xmath124 and the hard contribution starts with @xmath125 .",
    "the five - point integral  ( [ 5pt_integral ] ) can be represented in terms of an integral over feynman parameters , @xmath126^{3+{\\varepsilon } }     } \\ ; ,    \\label{fp_integral}\\end{aligned}\\ ] ] where one can choose the sum in the argument of the delta function in an appropriate way , i.e.  restrict only the sum over a subset of the parameters to 1 and extend the integration over the rest of the parameters to the whole domain @xmath127 .    applying the strategy of expansion by regions in feynman - parameter space and trying to reveal regions relevant to the given limit @xmath113 with the help of the code asy.m @xcite , we call :    .... alpharepexpand[{k } ,    { k^2 - m^2 , k^2 - 2*p*k , k^2 + 2*p*k ,                k^2 - 2*q*k , k^2 + 2*q*k } ,    {",
    "p^2 - > 0 , q^2 - > 0 , p*q - > q^2/2 } ,    { q - > 1 , m^2 - > x } ] ....    the output states the following set of three regions :    .... { { 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 1 , 1 } ,   { 0 , 1 , 1 , 0 , 0 } } ....    as before , the regions are specified by the scaling of the feynman parameters in terms of powers of the small parameter  @xmath128 . for example , for the second region we have @xmath129 , @xmath130 .",
    "the first region is hard ; its contribution starts with @xmath125 .",
    "the second and third regions start with order @xmath124 .",
    "they correspond to the two collinear regions stated for the momentum - space expansion above .",
    "but ` asy.m `",
    "does not find anything corresponding to the glauber region ; in particular , none of the regions found by ` asy.m ` provides the leading @xmath123 contribution .",
    "we notice that , as in the previous section about potential contributions , the polynomial in the square brackets of  ( [ fp_integral ] ) has terms of different sign .",
    "the missing glauber contribution stems from the parameter region where either @xmath131 or @xmath132 .",
    "so let us decompose the parametric integral into four parts corresponding to the domains where the two factors @xmath133 and @xmath134 are either positive or negative and then introduce new variables in such a way that this product takes the form @xmath135 .",
    "for example , in the domain @xmath136 , @xmath137 we change the variables by @xmath138 and by @xmath139 , similarly to our example in the previous section .",
    "however , in the threshold expansion the cancelling terms appeared in squared form such that a transformation between one pair of variables was sufficient . here",
    "two separate factors involve cancellations , which requires a twofold change of variables .    removing the primes from the variables  @xmath60 ,",
    "the parametric integral reads @xmath140 with @xmath141^{3+{\\varepsilon } }     } \\ ; ,    \\label{fp_integral_a}\\end{aligned}\\ ] ] where we have chosen the argument of the delta function as @xmath142 , so that we may also write @xmath143^{3+{\\varepsilon } }     } \\;.",
    "\\label{fp_integral_b}\\end{aligned}\\ ] ] it is sufficient to consider the expansion of @xmath144 and obtain a result for @xmath145 by analytically continuing @xmath146 , taking into account that the dependence on @xmath147 is power - like .",
    "now we can apply asy2.m to the integral  @xmath144 using either the command    .... wilsonexpand[x1*(x1 + x2 + x3 + x4 + x5)*m^2      + x2*x4*q^2 ,    x1 + x2 + x3 + x4 + x5 ,    { x1 , x2 , x3 , x4 , x5 } ,    { q^2 - > 1 , m^2 - > x } , delta - > true ] ....    for integrals  ( [ fp_integral_a ] ) restricted by a delta function ( see section  [ sec : syntax ] ) , yielding the output :    .... { { 0 , 0 , 0 , 0 , 0 } , { 0 , 1 , 0 , 0 , 0 } ,   { 0 , 0 , 0 , 1 , 0 } } ....    or we use the command    .... wilsonexpand[(1 + x2 + x3 + x4 + x5)*m^2      + x2*x4*q^2 ,    1 + x2 + x3 + x4 + x5 ,    { x2 , x3 , x4 , x5 } ,    { q^2 - > 1 , m^2 - > x } ] ....    for integrals  ( [ fp_integral_b ] ) over variables from @xmath148 to @xmath0 without any restriction , and obtain the output :    .... { { 0 , 0 , 0 , 0 } , { 1 , 0 , 0 , 0 } , { 0 , 0 , 1 , 0 } } ....    the two results are equivalent , as @xmath149 is implied in the second case .",
    "so we obtain again three regions .",
    "we will see in a moment that this list of regions is indeed correct and complete .    but",
    "first , let us emphasize that the new preresolution algorithm in ` asy2.m ` is capable of performing the transformation of the integral from ( [ fp_integral ] ) to  ( [ fp_integral_a ] ) automatically :    .... alpharepexpand[{k } ,    { k^2 - m^2 , k^2 - 2*p*k , k^2 + 2*p*k ,                k^2 - 2*q*k , k^2 + 2*q*k } ,    {",
    "p^2 - > 0 , q^2 - > 0 , p*q - > q^2/2 } ,    { q - > 1 , m^2 - > x } ,    preresolve - > true ] ....    the output of this command lists four different variable transformations according to the twofold decomposition described above . for each of the integrals over new parameters ,",
    "the regions @xmath150 , @xmath151 and @xmath152 are found , up to permutations in the order of the parameters from different changes of variables .",
    "the evaluation of the contributions to each region , as found by ` wilsonexpand [ ] ` or ` alpharepexpand [ ] ` ( including the ` preresolve ` option ) , is straightforward .",
    "the first region is the hard one .",
    "the contributions of the second and third regions are not individually regularized by dimensional regularization , as it often happens for sudakov - type limits .",
    "we use an auxiliary analytic regularization by introducing additional powers @xmath153 of the new variables into the integrand of  ( [ fp_integral_b ] ) , taking the limit @xmath154 in the end . the leading - order ( lo )",
    "contribution of the second and third regions to the integral @xmath155 reads @xmath156 this agrees with the leading contribution of the glauber region in the momentum - space expansion .",
    "we have found the leading glauber contribution of order @xmath123 .",
    "but we seem to have lost the two collinear regions with the scalings @xmath157 and @xmath158 found before the change of variables .",
    "in fact , we can evaluate the contributions from these two regions by expanding the integral  ( [ fp_integral_b ] ) .",
    "the resulting integrals are scaleless and regularized by the parameters @xmath159 , so they vanish , and ` asy2.m ` is right in omitting these two regions .",
    "we are also able to solve the integral  ( [ fp_integral_b ] ) including the auxiliary analytic regularization factor @xmath160 in terms of a onefold mellin ",
    "barnes representation : @xmath161 the asymptotic expansion of  @xmath162 in the limit @xmath113 is obtained by taking the residues of the poles of the functions @xmath163 .",
    "the poles of @xmath164 correspond to the hard region , while the poles of the two functions @xmath165 provide the contributions of the second and third regions .",
    "so ` asy2.m ` has found all contributing regions .    in the mellin ",
    "barnes integral  ( [ fp_integral_mb ] ) we can safely take the limit @xmath154 , add up @xmath144 and @xmath145 , and arrive at the mellin ",
    "barnes representation @xmath166 the lo contribution to @xmath155 is obtained from the residue of the single pole at @xmath167 , in agreement with  ( [ fp_lo ] ) .",
    "the next - to - leading - order ( nlo ) contribution stems from the residue of the double pole at @xmath168 and reads @xmath169 this agrees with the nlo contributions of the second and third regions .    at next - to - next - to - leading order ( nnlo ) there is a contribution from the residue of the single pole at @xmath170 which reads @xmath171 and agrees with the nnlo contributions of the second and third regions .",
    "the second nnlo contribution comes from the residue of the single pole at @xmath172 .",
    "it is given by @xmath173 and agrees with the lo contribution of the hard region .",
    "so indeed all contributions to the five - point integral up to nnlo are correctly reproduced by the contributions of the three regions found by ` asy2.m ` after the decomposition of the integral and the change of variables .    when revealing glauber regions for a general diagram , the preresolution algorithm of ` asy2.m ` tries to eliminate monomials with opposite sign in the polynomial  @xmath1 by automatically separating the integration into domains and performing changes of variables .",
    "if the option ` preresolve ` is enabled for ` alpharepexpand [ ] ` , the code warns the user if the elimination of monomials with opposite sign has not been successful , such that possibly not all regions are revealed .",
    "this is the case if some monomials of opposite sign remain in the polynomial  @xmath1 after tries to eliminate them , or if symbols with unknown signs are present in the polynomial .",
    "we are therefore convinced that ` alpharepexpand [ ] ` , with the preresolution enabled , either reveals all relevant regions or issues a warning .    as for the threshold expansion of the previous section , ` asy2.m ` can also treat more complicated kinematical situations , e.g. the five - point integral depicted in fig .",
    "[ fig : glauber ] with @xmath174 and @xmath175 ( retaining @xmath176 and @xmath177 such that @xmath178 and @xmath179 with @xmath180 ) :    .... alpharepexpand[{k } ,    { k^2 - m^2 , k^2 - 2*p1*k , k^2 + 2*p2*k ,                k^2 - 2*q2*k , k^2 + 2*q1*k } ,    { p1 ^ 2 - > 0 , p2 ^ 2 - > 0 , p1*p2 - > 0 ,      q1 ^ 2 - > 0 , q2 ^ 2 - > 0 , q1*q2 - > 0 ,      p1*q1 - > p1*q1/2 , p1*q2 - > p1*q2/2 ,      p2*q1 - > p2*q1/2 , p2*q2 - > p2*q2/2 } ,    { m^2 - > x , p1 - > 1 , p2 - > 3 ,               q1 - > 2 , q2 - > 3/2 } ,    preresolve - > true ] ....",
    "all kinematic invariants are replaced by rational numbers in order to enable the preresolution algorithm to work .",
    "the code correctly decomposes the integral into four pieces and finds the three regions for each of them .",
    "let us finally discuss the reason why , besides the hard region which is always present , the expansion in loop - momentum space requires two collinear regions and one glauber region , whereas the expansion of the parametric integrals  ( [ fp_integral_b ] ) has two regions providing the leading glauber contribution and no further collinear regions .",
    "in fact , the momentum - space expansion is also valid for loop integrals  ( [ 5pt_integral ] ) where each propagator is raised to an arbitrary , even non - integer power . for the decomposition of the parametric integral and the change of variables ,",
    "however , we have assumed the specific form  ( [ 5pt_integral ] ) with each propagator present exactly once . in this case , the loop integrand can be expanded into partial fractions as follows : @xmath181 expanding this product of terms , one obtains twelve three - point integrals , which are well known . because they only depend on @xmath182 , we recognize from the last two factors the structure @xmath183 , where @xmath144 and @xmath145 are related by @xmath184 as before .",
    "the three - point integrals with the massless propagators @xmath185 or @xmath186 only have a hard region . the massive three - point integral with propagator @xmath187",
    "is known to possess a hard and two collinear regions .",
    "its lo and nlo hard contributions are cancelled by the massless three - point integrals , such that the uncancelled hard contributions start with @xmath188 , as for the five - point integral .",
    "the lo collinear contributions of the three - point integrals , enhanced by the @xmath189 prefactor , scale as @xmath123 .",
    "so , in the special case when all propagator powers are equal to  1 , the five - point integral reduces to a linear combination of three - point integrals revealing the same structure of regions as found from the expansion of the parametric integral  ( [ fp_integral_b ] ) .",
    "this picture changes when generic propagator powers are introduced as analytic regulators , which is done in the next section .",
    "in the previous section we have seen different patterns of regions arising when expanding either in loop - momentum space or in parametric space .",
    "the individual contributions can be disentangled more easily when the dependence on the propagator powers is retained . instead of  ( [ 5pt_integral ] ) ,",
    "let us consider the integral @xmath190 where the analytic regularization parameters  @xmath191 make the propagator powers different from the previous case . the asymptotic expansion in loop - momentum space yields contributions from the four regions listed in the beginning of section  [ sec : glauber ] .",
    "the lo hard contribution still scales as @xmath125 , but now the lo 1-collinear contribution scales as @xmath192 , the lo 2-collinear contribution as @xmath193 and the lo glauber contribution as @xmath194 .",
    "so all regions are characterized by a distinct scaling .",
    "when performing the expansion in parametric space for generic  @xmath191 , we are able to disentangle the contributions from each region and match them with the regions obtained in loop - momentum space .    for generic  @xmath195 , the parametric integral corresponding to  ( [ fp_integral ] ) reads @xmath196^{-(3+{\\varepsilon}+{\\lambda}_1+\\ldots+{\\lambda}_5 ) }    \\;.",
    "\\label{fp_integral_l}\\end{aligned}\\ ] ] the change of variables performed in section  [ sec : glauber ] , e.g.  @xmath197 , @xmath198 for @xmath199 , is complicated by the presence of the factors @xmath200 , where parts of the monomials will change into polynomials .",
    "if we want to keep the simple form @xmath201 from the previous section , then we have to require @xmath202 and @xmath203 . under this restriction of the parameters",
    "@xmath191 , the parametric integrals can be written as @xmath204^{3+{\\varepsilon}+{\\lambda}_1 + 2{\\lambda}_2 + 2{\\lambda}_4 }     }    \\;.",
    "\\label{fp_integral_l_a}\\end{aligned}\\ ] ] in order to find the regions for the asymptotic expansion of  ( [ fp_integral_l_a ] ) , we have to provide the additional polynomial factors @xmath205 and @xmath206 to ` wilsonexpand [ ] ` .",
    "we can do this by multiplying the new polynomials to the second argument of the command :    .... wilsonexpand[x1*(x1 + x2 + x3 + x4 + x5)*m^2      + x2*x4*q^2 ,    ( x1 + x2 + x3 + x4 + x5 ) * ( 2*x2 + x3 )      * ( 2*x4 + x5 ) ,    { x1 , x2 , x3 , x4 , x5 } ,    { q^2 - > 1 , m^2 - > x } , delta - > true ] ....    the output of this command reads :    .... { { 0 , 0 , 0 , 1 , 0 } , { 0 , 0 , 0 , 1 , 1 } ,   { 0 , 1 , 0 , 0 , 0 } , { 0 , 1 , 1 , 0 , 0 } ,   { 0 , 0 , 0 , 0 , 0 } } ....    in addition to the regions present in the analysis of section  [ sec : glauber ] , we retrieve the two collinear regions with scalings @xmath157 and @xmath158 .",
    "the updated code ` asy2.m ` is capable of taking into account generic propagator powers automatically when told through the additional option ` genericpowers ` :    .... alpharepexpand[{k } ,    { k^2 - m^2 , k^2 - 2*p*k , k^2 + 2*p*k ,                k^2 - 2*q*k , k^2 + 2*q*k } ,    {",
    "p^2 - > 0 , q^2 - > 0 , p*q - > q^2/2 } ,    { q - > 1 , m^2 - > x } ,    preresolve - > true , genericpowers - > true ] ....    when the option ` genericpowers ` is enabled , the polynomial  @xmath13 obtained from the loop integral is multiplied by the product of all feynman parameters , @xmath207 , before the changes of variables are performed .",
    "some of these additional factors then turn into polynomials through replacements in the preresolution algorithm , while others remain monomials and are therefore irrelevant for the analysis of ` asy2.m ` .",
    "the call of ` alpharepexpand [ ] ` stated above correctly yields all five regions for each of the variable transformations .    for the evaluation of the glauber contributions with scalings @xmath152 and @xmath151 ,",
    "an additional analytic regularization is needed , and we choose to multiply the integrand of  ( [ fp_integral_l_a ] ) by @xmath208 .",
    "( the parameters @xmath209 from section  [ sec : glauber ] are not needed here due to the presence of @xmath210 . )",
    "the two glauber contributions are individually singular in the limit @xmath211 , but this singularity cancels in the sum of the two contributions .    the leading contribution to the integral @xmath155 originates from the sum of the lo glauber contributions .",
    "it reads @xmath212 this agrees with the lo contribution from the one glauber region in the momentum - space expansion of  ( [ 5pt_integral_l ] ) for @xmath202 and @xmath203 . here , in the expansion of the parametric integrals , we have two regions producing the glauber contribution .",
    "this is possible because the contributions from both regions have the same scaling ( for @xmath213 ) , starting with @xmath214 . for @xmath215 ,",
    "the result  ( [ fp_l_lo ] ) reproduces  ( [ fp_lo ] ) .    among the nlo contributions to @xmath155",
    ", we expect nlo glauber contributions and lo collinear contributions",
    ". however , the nlo glauber contributions vanish exactly for general @xmath216 , @xmath217 and @xmath218 , due to non - trivial cancellations between the pieces which contribute to the nlo expansion of  ( [ fp_integral_l_a ] ) for either of the scalings @xmath152 and @xmath151 .",
    "the same happens in loop - momentum space , where the nlo glauber contribution is proportional to @xmath219 , thus vanishing in the case considered here .",
    "so the nlo contribution to @xmath155 is made up entirely from the lo collinear contributions .",
    "the 1-collinear region provides @xmath220 in agreement with the momentum - space expansion .",
    "the 2-collinear contribution is obtained from this by exchanging @xmath221 .",
    "adding the two collinear contributions together and performing the limit @xmath222 , the result  ( [ fp_nlo ] ) is reproduced .",
    "considering finally the nnlo contributions to @xmath155 , we expect nnlo glauber contributions , nlo collinear contributions and a lo hard contribution .",
    "but here the nlo collinear contributions vanish exactly for @xmath202 and @xmath203 , both in loop - momentum space and when expanding the parametric integrals .",
    "so we are left with the nnlo glauber contributions yielding @xmath223 and the lo hard contribution , @xmath224 both consistent between the expansions of the loop integral and of the parametric integrals .",
    "setting all @xmath225 in ( [ fp_l_nnlo_g ] ) and  ( [ fp_l_nnlo_h ] ) , we recover the results from ( [ fp_nnlo_g ] ) and ( [ fp_nnlo_h ] ) , respectively .",
    "we may also evaluate the parametric integral  ( [ fp_integral_l_a ] ) in terms of a onefold mellin ",
    "barnes representation : @xmath226 the relevant regions can easily be determined from the gamma functions in the last two lines .",
    "in particular , the squared gamma function indicates that the expansion of the parametric integrals  @xmath162 requires _ two _ regions for the glauber contribution , both scaling as @xmath214 at leading order .",
    "when combining @xmath201 , one of these gamma functions is cancelled , and we obtain @xmath227 from this representation the contributions to the asymptotic expansion in the limit @xmath113 can be extracted : the hard contributions stem from the residues of the poles at @xmath228 , the 1-  and 2-collinear contributions from @xmath229 and @xmath230 , respectively , the glauber contributions from @xmath231 ( with @xmath232 ) . all lo , nlo and nnlo contributions reported in ( [ fp_l_lo])([fp_l_nnlo_h ] ) are confirmed by the corresponding residue contributions from  ( [ fp_integral_l_mb2 ] ) . in particular",
    ", the structure of the poles in  ( [ fp_integral_l_mb2 ] ) clearly shows that the glauber region does not contribute to the nlo result , and that the collinear contributions are absent at nnlo , as obtained before .",
    "the results reported in this section show that the use of generic propagator powers helps disentangling the glauber and collinear regions from each other , making all regions contribute in the same way to the asymptotic expansion in loop - momentum space and to the expansion of the parametric integrals . keeping the dependence of the contributions and their scalings on the propagator powers also facilitates the identification of regions found by ` asy2.m ` in parametric space for a subsequent expansion at the level of the loop integration .",
    "the updated version of the code , ` asy2.m ` , can be downloaded from the known web site @xcite , where further installation instructions are found .",
    "the ` mathematica ` code is loaded using ` < < asy2.m `",
    ".    the main function ` alpharepexpand [ ] ` identifies all regions which contribute to the asymptotic expansion of a given loop integral :    .... alpharepexpand[{k1 , k2 , ... } ,    { ( k1 + p1)^2 - m1 ^ 2 , ( k2 + p2)^2 - m2 ^ 2 ,      ... } ,    { p1 ^ 2 - > q1 , p2 ^ 2 - > q2 , p1*p2 - > q3 , ... } ,    { m1 ^ 2 - > x , m2 ^ 2 - > x^2 ,      q1 - > 1 , q2 - > 3/2 , ... } ,    options ] ....    the first argument is the list of loop momenta .",
    "the second argument lists the denominators of the propagators .",
    "the third argument contains replacement rules for all kinematic invariants .",
    "in particular , all external momenta appearing in the denominators must be replaced here , otherwise they are not identified correctly as vectors .",
    "the fourth argument sets the scaling of the parameters by replacing all symbols with powers of the expansion parameter , labelled by the global symbol  ` x ` , and rational numbers ( integers or explicit fractions of integers ) .",
    "the output is a list of regions , specified by the scaling ( in powers of the expansion parameter ) of the feynman parameters @xmath233 corresponding to the propagators in the order stated in the second argument .",
    "e.g.  the output    .... { ... , { 0 , 2 , 1 , ... } , ... } ....    indicates that there is a region @xmath234 specified by the scaling @xmath235 , @xmath236 , @xmath237 , @xmath89 of the feynman parameters , where @xmath94 is the small parameter of the problem .",
    "possible options of ` alpharepexpand [ ] ` are :    * ` preresolve - > true ` : try to eliminate cancellations between terms in the parametric representation by decomposing the integral and performing changes of variables .",
    "the output contains for each region a list of three entries , i.e.  a region is e.g.  specified by : + .... { { x[1 ] - > y[1]/2 , x[2 ] - > y[1]/2 + y[2 ] } ,    2 , { 0 , 1/2 } }     .... + the first entry in this list is the transformation between the original feynman parameters ` x[1 ] ` , ` x[2 ] ` , @xmath89 and the new variables ` y[1 ] ` , ` y[2 ] ` , @xmath89 .",
    "the second entry is the jacobian of the integral transformation ( here `` 2 '' , i.e.  @xmath238 ) .",
    "the last entry specifies the region in the usual form with the scalings of the new variables in powers of the small parameter , here @xmath239 , @xmath240 .",
    "+ when the option ` preresolve ` is enabled , the code warns if it fails to eliminate all possible cancellations in the parametric representation .",
    "when no warning is issued , all regions are found . without this option , however , regions occurring at such cancellations will not be revealed . * ` genericpowers - > true ` : take into account generic ( in particular non - integer ) powers of the propagators , e.g.  when these powers are used as analytic regulators . without this option , the preresolution algorithm triggered by the option ` preresolve ` only finds all regions for integrals with propagators raised to positive integer powers . *",
    "` verbose - > true ` : print verbose internal information . * ` scalar - > true ` : permit more complex structures of the denominators by specifying scalar products of momenta via the function ` scalar[k , p ] ` instead of simple products ` k*p ` or ` scalar2[k ] ` instead of ` k^2 ` , e.g. : + .... alpharepexpand[{k } ,    { scalar[k , k ] - m^2 ,      scalar2[k - q ] - m^2 } ,    { scalar2[q ] - > qq , m^2 - > qq/4 + y } ,    { qq - > 1 , y - > x } ,     preresolve - > true , scalar - > true ]     ....    for expanding more general integrals , which need not originate from feynman diagrams , the command ` wilsonexpand [ ] ` may be used :    .... wilsonexpand[f , u , { x1 , x2 , ... } ,    { ... - > x , ... } , options ] ....    traditionally , the first two arguments are the polynomials @xmath1 and @xmath13 , respectively , from the alpha parametric representation  ( [ alpha - d ] ) of the feynman integral or from the feynman parametric representation ( [ alpha - d - mod ] ) ,  ( [ integrand ] ) .",
    "but , more generally , ` wilsonexpand [ ] ` reveals regions for integrals over parameters @xmath233 , integrated from 0 to  @xmath0 each , where all non - trivial polynomials of the parameters  @xmath60 occurring in the integrand are specified either in the first or the second argument .",
    "the third argument of ` wilsonexpand [ ] ` is the list of integration parameters .",
    "the fourth argument specifies the scaling of all quantities with the expansion parameter  ` x ` , in the same way as in the fourth argument of ` alpharepexpand [ ] ` .    the output is a list of regions , specified by the scaling of the integration parameters in powers of the expansion parameter , exactly as described for the output of ` alpharepexpand [ ] ` ( without the ` preresolve ` option ) .",
    "possible options of ` wilsonexpand [ ] ` are :    * ` delta - > true ` : under the integral , the sum over an arbitrary non - empty subset of the integration parameters is restricted to  1 via a delta function .",
    "the specific choice of the sum in this delta function must be irrelevant for the integral , which is the case for the generalized feynman parametric representation  ( [ alpha - d - mod ] ) .",
    "* ` verbose - > true ` : print verbose internal information .",
    "more generally , the option ` delta ` of ` wilsonexpand [ ] ` works correctly for all integrals of the form @xmath241 where the linear combination in the argument of the delta function has no negative and at least one positive coefficient ( @xmath242 and @xmath243 ) , and where the function  @xmath244 scales homogeneously with the parameters  @xmath60 as @xmath245 the degree of homogeneity being equal to minus the number of integration parameters .",
    "it can be shown that for such integrals  ( [ delta_int ] ) the specific choice of the coefficients  @xmath246 is irrelevant . to see this ,",
    "multiply the integrand of  ( [ delta_int ] ) by  1 in the form @xmath247 , where @xmath248 is any of the integration parameters . then , inside the @xmath249-integration , transform the integration variables as @xmath250 , @xmath251 , and use the homogeneity relation  ( [ delta_int_hom ] ) with @xmath252 . finally evaluate the @xmath249-integration first , yielding @xmath253 , independent of the coefficients  @xmath246 , as long as the linear combination is positive .",
    "the integral  ( [ delta_int ] ) is given by @xmath254 .",
    "] the integrand  ( [ integrand ] ) of the feynman parametric representation  ( [ alpha - d - mod ] ) and the integrands of all parametric representations of feynman integrals used in this paper ( without the additional analytic regularization factors @xmath255 ) fulfill the homogeneity condition  ( [ delta_int_hom ] ) , so they do not depend on the specific choice for the arguments of their delta functions .",
    "we have presented an algorithm for identifying all regions which are relevant for the asymptotic expansion of a given loop integral at the level of its parametric representation .",
    "in contrast to the previous version ` asy.m ` of the code , also potential regions and glauber regions are found now .",
    "the necessary decompositions and variable transformations of the integral are automated by the updated ` mathematica ` code ` asy2.m `  @xcite . when the command ` alpharepexpand [ ] ` is used with its option ` preresolve ` enabled , we are convinced that it either reveals all relevant regions or issues a warning . in particular , regions corresponding to cancellations between large positive and negative terms in the parametric representation of the loop integrals ( such as potential and glauber regions ) will now be found .",
    "let us emphasize that to prove expansion by regions at least for some specific limit typical of minkowski space is a natural mathematical problem .",
    "perhaps , this problem is not specifically related to feynman integrals .",
    "let us present an example of a one - dimensional parametric integral , without any relevance to feynman integrals , and show that expansion by regions works successfully . to do this",
    ", we will use asy2.m .",
    "let us consider the integral @xmath256 with @xmath257 a complex parameter , in the limit @xmath258 .",
    "we assume that @xmath257 is in the domain re@xmath259 in order to have an absolute convergence of the integral which then can be continued analytically to the whole complex plane as an analytic function of @xmath257 . running      we obtain the two regions ` { { 1 } , { 0 } } ` .",
    "the leading - order terms from each region can be evaluated analytically in terms of gamma functions at general @xmath257 , with the results @xmath260 and @xmath261 they can be checked easily by deriving the onefold mellin ",
    "barnes representation @xmath262 and evaluating the first terms of the asymptotic expansion in the limit @xmath258 by shifting the contour to the right and taking residues at the poles of the two gamma functions in the integrand .",
    "this work is supported by the deutsche forschungsgemeinschaft sonderforschungsbereich / transregio  9 `` computergesttzte theoretische teilchenphysik '' .",
    "the work of a.s . and v.s .",
    "is also supported by the russian foundation for basic research through grant 11 - 02 - 01196 .",
    "the authors thank m.  beneke and a.  pak for helpful discussions .",
    "chetyrkin , theor .",
    "phys .   * 75 * , 346 ( 1988 ) [ teor .  mat .",
    "* 75 * , 26 ( 1988 ) ] k.g .",
    "chetyrkin , theor .",
    "phys .   * 76 * , 809 ( 1988 ) [ teor .  mat .",
    "76 * , 207 ( 1988 ) ] s.g .",
    "gorishny , nucl .",
    "b * 319 * , 633 ( 1989 ) v.a .",
    "smirnov , commun .",
    "phys .   * 134 * , 109 ( 1990 ) v.a .",
    "smirnov , mod .",
    "lett .  a * 10 * , 1485 ( 1995 ) [ hep - th/9412063 ] v.a .",
    "smirnov , _ applied asymptotic expansions in momenta and masses _ , springer tracts in modern physics 177 ( springer , berlin , 2002 ) t.  seidensticker , hep - ph/9905298 r.  harlander , t.  seidensticker , m.  steinhauser , phys .",
    "b * 426 * , 125 ( 1998 ) [ hep - ph/9712228 ] m.  beneke , v.a .",
    "smirnov , nucl .",
    "b * 522 * , 321 ( 1998 ) [ hep - ph/9711391 ] v.a .",
    "smirnov , e.r .",
    "rakhmetov , theor .",
    "* 120 * , 870 ( 1999 ) [ teor",
    ".  mat .",
    "* 120 * , 64 ( 1999 ) ] [ hep - ph/9812529 ] v.a .",
    "smirnov , phys .",
    "b * 465 * , 226 ( 1999 ) [ hep - ph/9907471 ] b.  jantzen , jhep * 12 * , 076 ( 2011 ) [ arxiv:1111.2589 [ hep - ph ] ] a.v .",
    "smirnov , v.a .",
    "smirnov , m.  tentyukov , comput .",
    "commun .   * 182 * , 790 ( 2011 ) [ arxiv:0912.0158 [ hep - ph ] ] a.v .",
    "smirnov , m.n .",
    "tentyukov , comput .",
    "commun .",
    "* 180 * , 735 ( 2009 ) [ arxiv:0807.4129 [ hep - ph ] ] a.  pak , a.  smirnov , eur .",
    "j.  c * 71 * , 1626 ( 2011 ) [ arxiv:1011.4863 [ hep - ph ] ] a.v .",
    "smirnov , http://science.sander.su/tools-uf.htm"
  ],
  "abstract_text": [
    "<S> when performing asymptotic expansions using the strategy of expansion by regions , it is a non - trivial task to find the relevant regions . </S>",
    "<S> the recently published mathematica code ` asy.m ` automates this task , but it has not been able to detect potential regions in threshold expansions or glauber regions . in this work we present an algorithm and its implementation in the update ` asy2.m ` which also reveals potential and glauber regions automatically . </S>"
  ]
}