{
  "article_text": [
    "the join - idle - queue ( jiq ) algorithm is an approach designed to effectively approximate join - the - shortest - queue ( jsq ) algorithm in large - scale distributed systems . in this setting jobs coming into a system",
    "are sent to one of a group of _ dispatchers _ ; the dispatchers are in turn responsible for sending the job to a _ server _ within a cluster of parallel servers for processing . for the join - the - shortest - queue algorithm",
    ", each of the dispatchers would have to keep up - to - date load information on all of the servers , which could be undesirable because of the required communication .",
    "for the join - idle - queue algorithm , a server informs a dispatcher when it is idle , having completed all of its jobs .",
    "the dispatchers each keep a queue of idle servers , dubbed _",
    "i - queues _ to distinguish them from queues for jobs .",
    "when a job arrives , it sends the job to an idle server from its i - queue , or to a server chosen uniformly at random if its i - queue is empty .",
    "further details on the model are given in section  [ sec : model ] .",
    "the goal of jiq is to provide excellent load balancing ",
    "most jobs are immediately sent to an idle queue  while providing scalability for systems of thousands of servers or larger . in particular , the communication requirements of jiq are low , and importantly the task of determining the load of various servers is not on the critical path when assigning a job . as noted in @xcite , alternative schemes requiring a job to communicate to determine the load of servers on the arrival of the job can increase the overall response time , and hence may not be suitable for many practical systems . on the theoretical side , the two - layer approach of load balancing idle servers among dispatchers to allow jobs to be load balanced among servers provides interesting challenges for analysis .",
    "jiq systems were introduced in @xcite , and analyzed in the large system limit where the number of servers grows to infinity and the ratio between the number of servers and the number of dispatchers is kept fixed .",
    "the analysis presented there , however , assumes that there are only idle processors in the dispatchers i - queues .",
    "this assumption is inaccurate ; indeed , as noted in @xcite , it `` is violated when an idle server receives a random arrival . ''",
    "they argue that idle servers receive such arrivals relatively rarely , and show empirically that their approximation appears accurate ( under sufficiently low arrival rates ) .    here",
    "we provide a more direct mean - field fluid limit approach that provides an accurate analysis of the large system limit without the assumptions of the previous analysis by deriving a family of differential equations that corresponds to the behavior large system limit .",
    "besides yielding a proper analysis of the basic jiq system analyzed in @xcite , this approach allows straightforward analysis of many generalizations .",
    "for example , under high loads , it may be better to have a server be placed on an i - queue when it has one job left ( or , more generally , @xmath0 jobs left ) , rather than waiting for the server to become idle , since it may take some time for the i - queue to present the server with a new job . in @xcite",
    "it is left as an open question to analyze such variations .",
    "we generalize our equations to this setting here , as well as other variations , such as using last - come first - served instead of first - come first - served at the i - queues in order to determine which server to send a job .",
    "( in contrast to the analysis of @xcite , we find once simplifying assumptions are removed , such choices can make a small but noticeable difference . )    finally , in both our theory and our empirical work , we examine some potential pitfalls of jiq systems . in particular , under high load , there can be insufficiently many idle queues available , causing degradations in performance as the dispatchers distribute jobs randomly . even when the expected waiting time remains smaller than alternatives , jiq systems can exhibit significantly higher variance , which may be unsuitable for some workloads . as we show later in the paper , having a server place itself on an i - queue when it has one job left greatly mitigates this problem , and we would recommend this variation when there is any possibility that the system may enter a highly loaded state .",
    "the main limitation of our analysis is that it applies to the setting of exponentially distributed service times and a poisson arrival process .",
    "while generalizations to other service times and arrival processes are theoretically possible by representing them as mixtures of exponentials ( see e.g. @xcite ) , or by considering more general partial differential equations ( see e.g. @xcite ) a more general analysis of jiq for more general service and arrival processes remains an interesting problem .    also , we emphasize that here our goal is to derive the appropriate equations , examine implications for the use of jiq systems and their variations , and demonstrate empirically the accuracy of this approach .",
    "one can also formally prove convergence mathematically , but this is not our main goal .",
    "there appears to be no impediment to utilizing standard techniques for mean field fluid limit analysis of queueing systems ( as in @xcite ) for jiq systems , so we leave this aspect to the inclined reader .",
    "here we follow much of the model and notation of @xcite .",
    "we have a system with @xmath1 servers and @xmath2 dispatchers ( or equivalently i - queues ) , where we fix the ratio @xmath3 and let @xmath4 .",
    "jobs arrive as a poisson process of total rate @xmath5 , where @xmath6 , and are sent to a dispatcher chosen uniformly at random , so at each dispatcher jobs arrive as a poisson process of rate @xmath7 . the service times are exponentially distributed with mean 1 .",
    "each dispatcher has an i - queue , which is an ordered list of servers .",
    "if the i - queue is non - empty , the dispatcher sends the arriving job to a server on the i - queue ; we start by considering the i - queues being governed by the first - come first - served ( fcfs ) discipline . if the i - queue is empty , the dispatcher sends the job to a server chosen uniformly at random .",
    "a server is placed on an i - queue when it finishes all of its jobs ( so its job queue is empty ) and it is not already on an i - queue , so that at any time it is at most on only a single i - queue .",
    "we are assuming here that the dispatcher notes when sending a job whether it was randomly assigned from an empty i - queue , so that a server can track when it is removed from an i - queue , but such an implementation is straightforward .",
    "there are multiple ways in which a server can choose which i - queue to join . in @xcite ,",
    "two natural variations are studied .",
    "first , on each completion a server can join an i - queue chosen uniformly at random ; this is referred to as jiq - random .",
    "alternatively , a server can probe the length of @xmath8 i - queues and choose the one with the smallest number of jobs .",
    "this approach of using a constant number of choices for placement has been studied in many settings , in particular in the context where jobs choose one of a collection of parallel servers for service on arrival , and is referred to as sq@xmath9 .",
    "( the approach is sometimes referred to as the power of two choices , or balanced allocations @xcite .",
    "the variation where jobs arrive to parallel servers and choose one according to sq@xmath9 is often referred to as the `` supermarket model '' @xcite . ) in the context of jiq , this variation is referred to as jiq - sq@xmath9 . using sq@xmath9 to distribute idle servers among i - queues helps ensure that i - queues do not empty , avoiding the need to send incoming jobs to random servers instead of idle ones .",
    "in the equations that follow , we consider the evolution of i - queues and servers .",
    "recall @xmath2 is the numbers of i - queues , @xmath1 the number of servers , and @xmath10 .",
    "as done in @xcite , we consider the regime where @xmath11 is held constant and @xmath1 and @xmath2 are growing to infinity .",
    "we use @xmath12 to represent the number of i - queues with @xmath13 queued servers , and @xmath14 be the corresponding fraction of i - queues with @xmath13 queued servers . for @xmath15 and @xmath16 , we use @xmath17 to represent the number of servers with @xmath13 jobs that are in position @xmath18 in one of the i - queues , and similarly we use @xmath19 to represent the corresponding fraction of servers .",
    "finally , we use @xmath20 to represent the number of servers with @xmath13 jobs that are not currently in an i - queue , and similarly we use @xmath21 to represent the corresponding fraction of servers .    to begin , consider a short time interval @xmath22 , and consider the change in @xmath23 over that time interval .",
    "we use @xmath24 to denote @xmath25 $ ] .",
    "then for suitably short time intervals , we take the probability of an arrival at the i - queues to be @xmath26 and the total probability of a service event at servers to be @xmath27 .",
    "then for @xmath28 , @xmath29 this equation represents that @xmath23 increases when an arrival occurs at a i - queue with @xmath30 servers , and correspondingly decreases when an arrival occurs at a i - queue with @xmath13 servers .",
    "similarly , @xmath23 increases when a server not already queued completes its last job and is placed on a i - queue with @xmath31 servers , and correspondingly decreases when a server not already queued completes its last job and is placed on a i - queue with @xmath31 servers . dividing through by @xmath22 and using @xmath10 yields @xmath32 dividing through by @xmath2 , and considering the fluid limit ,",
    "where we replace the expected change over time with the corresponding differential equation , we find @xmath33    for @xmath34 we have the corresponding equation @xmath35 note that there is no @xmath36 term , since an arrival at an empty i - queue is immediately dispatched to a random server , leaving the i - queue empty .",
    "we now consider the @xmath37 .",
    "we use @xmath38 to denote @xmath39 $ ] , where @xmath18 can include the value @xmath40 . for @xmath41 and @xmath16 , we find @xmath42 the first term , @xmath43 , represents the change in @xmath17 due to the completion of jobs at the servers , changing the number of jobs at the server .",
    "the second term is the probability that a new job arrives to an empty i - queue , and then is sent randomly to a server with either @xmath31 or @xmath13 jobs that is @xmath18th on its i - queue .",
    "the last term represents the change in @xmath17 due to an arrival that reduces the i - queue length at one of the i - queues holding a server that contributes to @xmath17 or @xmath44 .",
    "this equation simplifies in the fluid limit to @xmath45    the case where the number of jobs at the server is 0 is similar : @xmath46 here the term @xmath47 corresponds to servers with one job and not on an i - queue finishing their job and then joining an i - queue with @xmath48 other servers .",
    "finally , we also need to handle servers that are enqueued . for @xmath49 , @xmath50 here the first terms @xmath51 correspond to job completions at servers with @xmath30 or @xmath13 jobs that are not on an i - queue ; the next terms @xmath52 correspond to an arrival at an empty i - queue that lands at a server not on an i - queue ; and the term @xmath53 corresponds to an arrival at an i - queue where the job at the front goes from having @xmath31 jobs to @xmath13 jobs .    similarly , for @xmath54 , @xmath55      an equilibrium distribution for the above system of equations satisfies that all the derivatives equal 0 .",
    "we show how to find the equilibrium distribution ; let us use @xmath56 and @xmath57 for the corresponding values in equilibrium .",
    "our process will be to show that all values @xmath56 can be written in terms of @xmath58 , and then that there is a unique value of @xmath58 that can be found numerically that satisfies equilibrium conditions .",
    "various equilibrium conditions arise from first principles and from the equations above .",
    "for example , in an equilibrium , @xmath59 , since the fraction of idle queues must be @xmath60 .",
    "equations  ( [ eqn : qi1 ] ) and  ( [ eqn : q01 ] ) yield @xmath61 in an equilibrium @xmath62 , since @xmath63 is the total fraction of servers that are not idle .",
    "it follows that @xmath64 .    the final key equation for determining the equilibrium distribution is the following : for @xmath15 and @xmath16 , @xmath65 to see this , consider a server with @xmath13 jobs and @xmath18th in queue at some time @xmath66 .",
    "the last time it chose an i - queue , suppose instead it had chosen an i - queue with length one larger than the one it actually chose , and then consider coupling all subsequent events except for interchanging the events ( arrivals , servers joining ) at these two i - queues . from this coupling , and from the fact that the ratio between the equilibrium probability of consecutive i - queue lengths is constant , we see that the relative probability that this server is @xmath18th in its i - queue instead of @xmath67st is in fact the ratio between the equilibrium probability of consecutive queue lengths , @xmath68 .",
    "we then have @xmath69 hence @xmath70 and @xmath71    from equations  ( [ eqn : s101 ] ) and  ( [ eqn : si01 ] ) , we can now solve for the values @xmath72 .",
    "setting the derivative to 0 in equation  ( [ eqn : s101 ] ) yields @xmath73 similarly , setting the derivative to 0 in equation  ( [ eqn : si01 ] ) yields @xmath74 and inductively we can solve for all @xmath75 in terms of @xmath58 .",
    "equation  ( [ eqn : s0j1 ] ) allows us to find @xmath76 in terms of @xmath58 by looking at when @xmath77 and setting the derivative to 0 : @xmath78 equation  ( [ eqn : s0j1 ] ) then again allows us to find the remaining values of @xmath56 inductively , in terms of @xmath58 .",
    "we have tested these equations by doing a binary search to find the appropriate value of @xmath58 that leads to a solution where the sum of the @xmath56 values equals one , and have found it matches the results found in our empirical evaluation below in section  [ sec : verify ] .",
    "we have not , to this point , been able to prove formally that there is unique fixed point equilibrium to these equations , although our testing of these equations thus far suggests that this is the case .",
    "we have also not yet found a way to express the equilibrium in a convenient form in terms of @xmath63 .      to test the accuracy of our equations , we ran a simulation of the actual queueing system . in our results below ( and throughout the paper ) , we started at an empty state and ran for 10000 units of time , with 10000 servers and 1000 dispatchers , so that @xmath79 .",
    "( we chose @xmath80 as this was the primary setting used in simulations in @xcite . )",
    "we focus on the average time in system for a job for convenience , although our simulations show more generally that our equations also track the load distribution of servers and i - queues accurately as well .",
    "we report the average time for simulations for jobs that complete after time 5000 and before time 10000 ; this gives the system time to reach approximate equilibrium , for suitable comparison .",
    "in reporting the average time in system , we take the average of 1000 trials ; we note the standard deviation over experiments is small .",
    "the results from our family of differential equations are derived from the average server load and little s law .",
    "we started the differential equations with all i - queues empty and all servers with one job initially for convenience .",
    "we used the euler method with a step size of @xmath81 ; experiments with other step sizes led to slightly different results for the average time in system but we found the differences were @xmath82 or less ; we therefore felt the step size was appropriate for presenting results .",
    "finally , we also compare with the results from @xcite .",
    "specifically , for the case of exponentially distributed service times and poisson arrivals , based on their assumptions they derive an analytical expression for the average time in system , given by @xmath83    our results of table  [ tab : table1 ] demonstrate that our fluid limit approach is significantly more accurate , particularly under higher loads , as one might expect given the assumptions use in @xcite . in these experiments ,",
    "the magnitude of our relative error is , in the worst example , about @xmath84 , while for the previous approximation the magnitude of the relative error ranges from roughly @xmath85 to @xmath86 .",
    ".the differential equation method provides accurate estimates of the average time in system for jiq - random at 10000 queues , with relative error of about 0.1% at @xmath87 and smaller relative error for lower rates .",
    "the results are much more accurate than the still quite good approximation derived in @xcite . [ cols=\"^,^,^,^ \" , ]     table  [ tab : table5 ] is not the entire story .",
    "when we look at the maximum load over our simulation , we also see the performance difference clearly , even with an early threshold . for sq@xmath88 , the maximum load at the end time @xmath89 over all of our simulations when @xmath90 is 10 , and when @xmath91 it is 6 . for jiq - random with an early threshold @xmath92 , the maximum load at the end time of our simulation when @xmath87 is always over 20 , and is sometimes over 30 ; when @xmath91 , it is 11 .    we emphasize that under larger values of @xmath11 , which may be suitable for real - world systems , these concerns are lessened , as higher arrival rates are needed for there to be large numbers of empty i - queues .",
    "we have derived fluid limit equations that describe the distributed join - idle - queue process under poisson arrivals and exponentially distributed service times , showing that these systems are amenable to asymptotic analysis .",
    "our methodology allows us to obtain very accurate estimates for reasonably sized finite systems . by examining variations ,",
    "we have shown the generality of this method , and in particular we have analyzed the compelling approach of serving i - queues while still processing one or more jobs . based on its reasonable performance under low loads and its significantly better performance in terms of both expectation and variance under higher loads ,",
    "we recommend strongly that builders of systems that want to use the distributed jiq approach examine the use of an early threshold .    on the theoretical side , for many of the jiq variations we have examined ,",
    "it is worthwhile to consider whether the asymptotic equilibrium distributions have a useful or pleasant form that could aid in rapidly calculating system performance or making comparisons among system .",
    "we leave this for future work .",
    "y. lu , q. xie , g. kliot , a. geller , j. larus , and a. greenberg .",
    "join - idle - queue : a novel load balancing algorithm for dynamically scalable web services .",
    "_ performance evaluation _ , 68(11):1056 - 1071 , 2011 .",
    "m. mitzenmacher , a. richa , and r. sitaraman .",
    "the power of two choices : a survey of techniques and results , in the handbook of randomized computing , edited by p. pardalos , s. rajasekaran , j. reif , and j. rolim .",
    "kluwer academic publishers , 2001 , pp .",
    "255 - 312 .",
    "n. d. vvedenskaya , r. l. dobrushin , and f. i. karpelevich .",
    "queueing system with selection of the shortest of two queues : an asymptotic approach .",
    "_ problems of information transmission _ , 32(1):15 - 27 , 1996 ."
  ],
  "abstract_text": [
    "<S> in the context of load balancing , lu et al . @xcite introduced the distributed join - idle - queue algorithm , where a group of dispatchers distribute jobs to a cluster of parallel servers . </S>",
    "<S> each dispatcher maintains a queue of idle servers ; when a job arrives to a dispatcher , it sends it to a server on its queue , or to a random server if the queue is empty . in turn , </S>",
    "<S> when a server has no jobs , it requests to be placed on the idle queue of a randomly chosen dispatcher .    </S>",
    "<S> although this algorithm was shown to be quite effective , the original asymptotic analysis in @xcite makes simplifying assumptions that become increasingly inaccurate as the system load increases . </S>",
    "<S> further , the analysis does not naturally generalize to interesting variations , such as having a server request to be placed on the idle queue of a dispatcher before it has completed all jobs , which can be beneficial under high loads .    </S>",
    "<S> we provide a new asymptotic analysis of join - idle - queue systems based on mean field fluid limit methods , deriving families of differential equations that describe these systems . </S>",
    "<S> our analysis avoids previous simplifying assumptions , is empirically more accurate , and generalizes naturally to the variation described above , as well as other simple variations . </S>",
    "<S> our theoretical and empirical analyses shed further light on the performance of join - idle - queue , including potential performance pitfalls under high load .    </S>",
    "<S> = 1 </S>"
  ]
}