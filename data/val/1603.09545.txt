{
  "article_text": [
    "the abstract argumentation frameworks ( afs ) introduced by @xcite have garnered increasing attention in the recent past . in his seminal paper , @xcite showed how an abstract notion of argument ( seen as an atomic entity ) and the notion of individual attacks between arguments together could reconstruct several established kr formalisms in argumentative terms . despite the generality of those and many more results in the field that was sparked by that paper , researchers also noticed that the restriction to _ individual attacks _ is often overly limiting , and devised extensions and generalizations of dung s frameworks : directions included generalizing individual attacks to _ collective attacks _",
    "@xcite , leading to so - called s ; others started offering a _ support _ relation between arguments  @xcite , preferences among arguments  @xcite , or attacks on attacks into arbitrary depth @xcite .",
    "this is only the tip of an iceberg , for @xcite .",
    "one of the most recent and most comprehensive generalizations of afs has been presented by @xcite ( and later continued by @xcite ) in the form of _ abstract dialectical frameworks ( adfs)_. these adfs offer any type of link between arguments : individual attacks ( as in afs ) , collective attacks ( as in s ) , and individual and collective support , to name only a few .",
    "this generality is achieved through so - called _ acceptance conditions _ associated to each statement .",
    "roughly , the meaning of relationships between arguments is not fixed in adfs , but is specified by the user for each argument in the form of boolean functions ( acceptance functions ) on the argument s parents .",
    "this paper is about exactly analyzing means of expression for argumentation formalisms .",
    "we use a precise mathematical definition of expressiveness : a set of interpretations is _ realizable _ by a formalism under a semantics if and only if there exists a knowledge base of the formalism whose semantics is exactly the given set of interpretations .",
    "studying realizability in afs has been started by , who analyzed realizability for extension - based semantics , that is , interpretations represented by sets where arguments are either accepted ( in the extension set ) or not accepted ( not in the extension set ) . while their initial work disregarded arguments that are never accepted , there have been continuations where the existence of such `` invisible '' arguments is ruled out @xcite .",
    "@xcite began to analyze realizability for labeling - based semantics of afs , that is , three - valued semantics where arguments can be accepted ( mapped to true ) , rejected ( mapped to false ) or neither ( mapped to unknown ) .",
    "@xcite started to analyze the relative expressiveness of two - valued semantics for adfs ( relative with respect to related formalisms ) .",
    "we treat several formalisms , namely afs , s , and ( b)adfs , while the previous works all used different approaches and techniques .",
    "this is possible because all of these formalisms can be seen as subclasses of adfs that are obtained by suitably restricting the acceptance conditions .",
    "another important feature of our framework is that we uniformly use three - valued interpretations as the underlying model theory .",
    "in particular , this means that arguments can not be `` invisible '' any more since the underlying vocabulary of arguments is always implicit in each interpretation .",
    "technically , we always assume a fixed underlying vocabulary and consider our results parametric in that vocabulary .",
    "in contrast , for example , @xcite presents a construction for realizability that introduces new arguments into the realizing knowledge base ; we do not allow that .",
    "while sometimes the introduction of new arguments can make sense , for example if new information becomes available about a domain or a debate , it is not sensible in general , as these new arguments would be purely technical with an unclear dialectical meaning .",
    "moreover , it would lead to a different notion of realizability , where most of the realizability problems would be significantly easier , if not trivial .",
    "the paper proceeds as follows .",
    "next we introduce our general framework for realizability ; the major novelty is our consistent use of so - called characterization functions , firstly introduced by @xcite , which we adapt to further semantics .",
    "the main workhorse of our approach will be a parametric propagate - and - guess algorithm for deciding whether a given interpretation set is realizable in a formalism under a semantics .",
    "we then analyze the relative expressiveness of the considered formalisms , presenting several new results that we obtained using an implementation of our framework .",
    "we conclude with a discussion .",
    "we make use of standard mathematical concepts like functions and partially ordered sets . for a function",
    "we denote the _ update of @xmath0 with a pair _ by with if , and otherwise . for a function and ,",
    "its preimage is .",
    "a _ partially ordered set _ is a pair @xmath1 with @xmath2 a partial order on @xmath3 .",
    "a partially ordered set @xmath1 is a _ complete lattice _ if and only if every has both a greatest lower bound ( glb ) and a least upper bound ( lub ) .",
    "a partially ordered set @xmath1 is a _ complete meet - semilattice _ iff every non - empty subset has a greatest lower bound ( the _ meet _ ) and every ascending chain has a least upper bound .",
    "[ [ three - valued - interpretations ] ] three - valued interpretations + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let @xmath4 be a fixed finite set of statements .",
    "an _ interpretation _ is a mapping that assigns one of the truth values true ( @xmath5 ) , false ( @xmath6 ) or unknown ( @xmath7 ) to each statement .",
    "an interpretation is _ two - valued _ if , that is , the truth value @xmath7 is not assigned .",
    "two - valued interpretations @xmath8 can be extended to assign truth values to propositional formulas @xmath9 as usual .",
    "the three truth values are partially ordered according to their information content : we have and and no other pair in @xmath10 , which intuitively means that the classical truth values contain more information than the truth value unknown . as usual , we denote by @xmath11 the partial order associated to the strict partial order @xmath10 . the pair @xmath12 forms a complete meet - semilattice with the information meet operation @xmath13 .",
    "this meet can intuitively be interpreted as _ consensus _ and assigns , , and returns @xmath7 otherwise .",
    "the information ordering @xmath11 extends in a straightforward way to interpretations @xmath14 over @xmath4 in that iff for all .",
    "we say for two interpretations @xmath14 that @xmath15 _ extends _",
    "@xmath16 iff .",
    "the set @xmath17of all interpretations over @xmath4 forms a complete meet - semilattice with respect to the information ordering @xmath11 .",
    "the consensus meet operation @xmath13 of this semilattice is given by for all .",
    "the least element of @xmath18 is the valuation mapping all statements to unknown  the least informative interpretation .",
    "[ [ abstract - argumentation - formalisms ] ] abstract argumentation formalisms + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    an _ abstract dialectical framework ( adf ) _ is a tuple where @xmath4 is a set of statements ( representing positions one can take or not take in a debate ) , is a set of links ( representing dependencies between the positions ) , is a collection of functions , one for each statement .",
    "the function @xmath19 is the _ acceptance condition of @xmath20 _ and expresses whether @xmath20 can be accepted , given the acceptance status of its parents .",
    "we usually represent each @xmath19 by a propositional formula over @xmath21 . to specify an acceptance condition ,",
    "then , we take to hold iff @xmath22 is a model for @xmath23 .    @xcite introduced a useful subclass of adfs : an adf is _ bipolar _ iff all links in @xmath24 are supporting or attacking ( or both ) .",
    "a link is _ supporting in @xmath25 _",
    "iff for all , we have that implies .",
    "symmetrically , a link is _ attacking in @xmath25 _",
    "iff for all , we have that implies . if a link is both supporting and attacking then @xmath26 has no actual influence on @xmath20 .",
    "( but the link does not violate bipolarity . )",
    "we write badfs as and mean that @xmath27 contains all supporting links and @xmath28 all attacking links .",
    "the standard semantics of adfs are now defined as follows . for adf @xmath25",
    ", an interpretation is we denote the sets of interpretations that are admissible , complete , preferred , and two - valued models by @xmath29 , @xmath30 , @xmath31 and @xmath32 , respectively .",
    "these definitions are proper generalizations of dung s notions for afs : for an af , where @xmath33 is the attack relation , the _ adf associated to @xmath34 _ is with and for all .",
    "afs inherit their semantics from the definitions for adfs  ( * ? ? ?",
    "* theorems  2  and  4 ) .",
    "in particular , an interpretation is _ stable _ for an af @xmath34 if and only if it is a two - valued model of @xmath35 .",
    "a is a pair where is the ( set ) attack relation .",
    "we define three - valued counterparts of the semantics introduced by @xcite , following the same conventions as in three - valued semantics of afs @xcite and argumentation formalisms in general . given a statement and an interpretation @xmath8 we say that @xmath20 is _ acceptable _ wrt .",
    "@xmath8 if and @xmath20 is _ unacceptable _ wrt .",
    "@xmath8 if .",
    "for an interpretation it holds that    [ [ realizability ] ] realizability + + + + + + + + + + + + +    a set of interpretations is _ realizable _ in a formalism @xmath36 under a semantics @xmath37 if and only if there exists a knowledge base having exactly .",
    "@xcite characterized realizability for adfs under various three - valued semantics .",
    "we will reuse the central notions for capturing the complete semantics in this work .",
    "[ def : comchar ] let @xmath38 be a set of interpretations .",
    "a function is a _ @xmath39-characterization _ of @xmath38 iff : for each we have iff for each :    * implies for all and * implies and for some .    from a function of this kind",
    "we can build a corresponding adf by the following construction . for a function ,",
    "we define @xmath40 as the adf where the acceptance formula for each statement @xmath20 is given by @xmath41 observe that we have iff by definition .",
    "intuitively , the acceptance condition @xmath42 is constructed such that @xmath8 is a model of @xmath42 if and only if we find .    [",
    "prop : comreal ] let be a set of interpretations . ( 1 )  for each adf @xmath25with , there is a @xmath39-characterization @xmath43 for @xmath38 ; ( 2 )  for each @xmath39-characterization for @xmath38 we have .",
    "the main underlying idea of our framework is that all abstract argumentation formalisms introduced in the previous section can be viewed as subclasses of .",
    "this is clear for adfs themselves and for badfs by definition ; for afs and s it is fairly easy to see .",
    "however , knowing that these formalisms can be recast as adfs is not everything . to employ this knowledge for realizability , we must be able to precisely characterize the corresponding subclasses in terms of restricting the adfs acceptance functions .",
    "alas , this is also possible and paves the way for the framework we present in this section .",
    "most importantly , we will make use of the fact that different formalisms and different semantics can be characterized modularly , that is , independently of each other .    towards a uniform account of realizability for adfs under different semantics , we start with a new characterization of realizability for adfs under admissible semantics that is based on a notion similar in spirit to @xmath39-characterizations .",
    "[ def : admchar ] let @xmath38 be a set of interpretations .",
    "a function @xmath44 is an",
    "_ @xmath45-characterization _ of @xmath38 iff : for each @xmath46 we have @xmath47 iff for every @xmath48 :    * @xmath49 implies @xmath50 for all @xmath51_2}\\xspace}$ ] .",
    "note that the only difference to is dropping the second condition related to statements with truth value @xmath52 .",
    "[ prop : admreal ] let be a set of interpretations .",
    "( 1 )  for each adf @xmath25such that , there is an @xmath45-characterization @xmath43 for @xmath38 ; ( 2 )  for each adm - characterization for @xmath38 we have .",
    "\\(1 ) we define the function @xmath53 as @xmath54 for every @xmath55 and @xmath48 where @xmath23 is the acceptance formula of @xmath20 in @xmath56 .",
    "we will show that @xmath43 is an @xmath45-characterization for @xmath57 .",
    "let @xmath8 be an interpretation .",
    "consider the case @xmath58 and @xmath59 for some @xmath48 and some @xmath51_2}\\xspace}$ ] .",
    "from @xmath60 we get @xmath61 . by definition of @xmath43",
    "is follows that @xmath62 .",
    "now assume @xmath63 and consequently @xmath64 .",
    "there must be some @xmath48 such that @xmath65 and @xmath66 .",
    "hence , there is some @xmath51_2}\\xspace}$ ] with @xmath67 and @xmath68 by definition of @xmath43 .",
    "thus , @xmath43 is an @xmath45-characterization ( 2 ) observe that for every two - valued interpretation @xmath15 and every @xmath48 we have @xmath69 .",
    "@xmath70 : let @xmath71 be an interpretation and @xmath48 a statement such that @xmath65 .",
    "let @xmath15 be a two - valued interpretation with @xmath51_2}\\xspace}$ ] .",
    "since @xmath72 we have @xmath73 .",
    "therefore , by our observation it must also hold that @xmath50 .",
    "thus , by definition  [ def : admchar ] , @xmath47 .",
    "@xmath74 : consider an interpretation @xmath8 such that @xmath75 .",
    "we show that @xmath76 . from @xmath75",
    "we get @xmath77 . there must be some @xmath48 such that @xmath65 and @xmath78 .",
    "hence , there is some @xmath51_2}\\xspace}$ ] with @xmath79 and consequently @xmath80 .",
    "thus , by definition  [ def : admchar ] we have @xmath76 .",
    "@xmath81    when listing sets of interpretations in examples , for the sake of readability we represent three - valued interpretations by sequences of truth values , tacitly assuming that the underlying vocabulary is given and has an associated total ordering .",
    "for example , for the vocabulary we represent the interpretation by the sequence  @xmath82 .    [ ex : admchar ] consider the sets and of interpretations over .",
    "the mapping @xmath83 is an @xmath45-characterization for @xmath84 .",
    "thus , the adf @xmath40 has @xmath84 as its admissible interpretations .",
    "for @xmath85 no @xmath45-characterization exists because but the implication of trivially holds for @xmath20 , @xmath26 , and  @xmath86 .",
    "we have seen that the construction @xmath40 for realizing under complete semantics can also be used for realizing a set @xmath38 of interpretations under admissible semantics .",
    "require @xmath0 to be an @xmath45-characterization instead of a @xmath39-characterization for @xmath38 .",
    "note that admissible semantics can be characterized by properties that are easier to check than existence of an @xmath45-characterization .",
    "however , using the same type of characterizations for different semantics allows for a unified approach for checking realizability and constructing a realizing adf in case one exists .    for realizing under the model semantics , we can likewise present an adjusted version of @xmath39-characterizations .",
    "[ def : modchar ] let be a set of interpretations .",
    "a function is a _ @xmath87-characterization _ of @xmath38 if and only if : ( 1 ) @xmath0 is defined on @xmath38 ( that is , ) and ( 2 ) for each , we have iff .    as we can show , there is a one - to - one correspondence between @xmath87-characterizations and adf realizations .",
    "[ prop : modreal ] let be a set of interpretations .",
    "( 1 )  for each adf @xmath25such that , there is a @xmath87-characterization @xmath43 for @xmath38 ; ( 2 )  vice versa , for each @xmath87-characterization for @xmath38 we find .",
    "\\(1 ) let @xmath25be an adf with .",
    "it immediately follows that . to define @xmath43",
    "we can use the construction in the proof of .",
    "it follows directly that for any , we find iff .",
    "thus @xmath43 is a @xmath87-characterization for @xmath38 .",
    "\\(2 ) let and be a @xmath87-characterization of @xmath38 .",
    "for any we have : @xmath88    a related result was given by ( * ? ? ?",
    "* proposition  10 ) .",
    "the characterization we presented here fits into the general framework of this paper and is directly usable for our realizability algorithm .",
    "wrapping up , the next result summarizes how adf realizability can be captured by different types of characterizations for the semantics we considered so far .",
    "[ th : main ] let be a set of interpretations and consider .",
    "there is an adf @xmath25such that if and only if there is a @xmath37-characterization for @xmath38 .",
    "the preferred semantics of an adf @xmath25is closely related to its admissible semantics as , by definition , the preferred interpretations of @xmath25are its @xmath89-maximal admissible interpretations . as a consequence we can also describe preferred realizability in terms of @xmath45-characterizations .",
    "we use the lattice - theoretic standard notation @xmath90 to select the @xmath89-maximal elements of a given set @xmath38 of interpretations .",
    "[ co : prefreal ] let be a set of interpretations .",
    "there is an adf @xmath25with iff there is an @xmath45-characterization for some with and .",
    "our algorithm for deciding realizability is a propagate - and - guess algorithm in the spirit of the dpll algorithm for deciding propositional satisfiability  @xcite .",
    "it is generic with respect to ( 1 ) the formalism @xmath36 and ( 2 ) the semantics @xmath37 for which should be realized . to this end ,",
    "the propagation part of the algorithm is kept exchangeable and will vary depending on formalism and semantics .",
    "roughly , in the propagation step the algorithm uses the desired set @xmath38 of interpretations to derive certain necessary properties of the realizing knowledge base ( line  [ alg : l : propagate ] ) .",
    "this is the essential part of the algorithm : the derivation rules ( _ propagators _ ) used there are based on characterizations of realizability with respect to formalism and semantics .",
    "once propagation of properties has reached a fixed point ( line  [ alg : l : fixed ] ) , the algorithm checks whether the derived information is sufficient to construct a knowledge base .",
    "if so , constructed and returned ( line  [ alg : l : success ] ) .",
    "otherwise ( no more information can be obtained through propagation and there is not enough information to construct a knowledge base yet ) , the algorithm guesses another assignment for the characterization ( line  [ alg : l : guess ] ) and calls itself recursively .",
    "the main data structure that operates on is a set of triples @xmath91 consisting of a two - valued interpretation , an atom and a truth value .",
    "this data structure is intended to represent the @xmath37-characterizations introduced in . there , a @xmath37-characterization is a function from two - valued interpretations to two - valued interpretations . however , as the algorithm builds the @xmath37-characterization step by step and there might not even be a @xmath37-characterization in the end ( because @xmath38 is not realizable ) , we use a set @xmath92 of triples @xmath91 to be able to represent both partial and incoherent states of affairs .",
    "the @xmath37-characterization candidate induced by @xmath92 is partial if we have that for some @xmath8 and @xmath20 , neither nor ; likewise , the candidate is incoherent if for some @xmath8 and @xmath20 , both and .",
    "if @xmath92 is neither partial nor incoherent , it gives rise to a unique @xmath37-characterization that can be used to construct the knowledge base realizing the desired set of interpretations .",
    "the correspondence to the characterization - function is   iff .    in our presentation of the algorithm we focused on its main features , therefore the guessing step ( line  [ alg : l : guess ] )",
    "is completely `` blind '' .",
    "it is possible to use common csp techniques , such as shaving ( removing guessing possibilities that directly lead to inconsistency ) .",
    "finally , we remark that the algorithm can be extended to enumerate all possible realizations of a given interpretation set  by keeping all choice points in the guessing step and thus exhaustively exploring the whole search space .    a formalism @xmath36    a semantics @xmath37 for @xmath36    a set of interpretations    a relation , initially empty    a @xmath93 with @xmath94 or `` no '' if none exists    [ alg : l : propagate ] * set * @xmath95 [ alg : l : setf ] * set * @xmath96 [ alg : l : failure ] * return * `` no '' [ alg :",
    "l : functional ] [ alg : l : success ] @xmath97 [ alg : l : guess ] * choose *  with  ,   @xmath98 @xmath99    in the case where the constructed relation @xmath92 becomes functional at some point , the algorithm returns a realizing knowledge base @xmath97 . for adfs",
    ", this just means that we denote by @xmath0 the @xmath37-characterization represented by @xmath92 and set . for the remaining formalisms we will introduce the respective constructions in later subsections .    given a set @xmath38 of desired interpretations and a partial @xmath37-characterization @xmath92 ,",
    "a propagator @xmath100 derives new triples @xmath101 that must necessarily be part of any total @xmath37-characterization @xmath0 for @xmath38 such that @xmath0 extends @xmath92 . in the following , we present semantics propagators for admissible , complete and two - valued model ( in ( set)af terms stable ) semantics , and formalism propagators for badfs , afs , and s.      these propagators ( cf .",
    "figure  [ fig : semantics - propagators ] ) are directly derived from the properties of @xmath37-characterizations presented in .",
    "while the definitions provide exact conditions to check whether a given function is a @xmath37-characterization , the propagators allow us to derive definite values of partial characterizations that are necessary to fulfill the conditions for being a @xmath37-characterization .    for admissible semantics , the condition for a function @xmath0 to be an @xmath45-characterization of a desired set of interpretations @xmath38 ( cf .",
    "definition  [ def : admchar ] ) can be split into a condition for desired interpretations and two conditions for undesired interpretations .",
    "propagator @xmath102 derives new triples by considering interpretations @xmath103 . here , for all two - valued interpretations @xmath15 that extend @xmath8",
    ", the value @xmath104 has to be in accordance with @xmath8 on @xmath8 s boolean part , that is , the algorithm adds @xmath105 whenever @xmath106 . on the other hand ,",
    "@xmath107 derives new triples for @xmath108 in order to ensure that there is a two - valued interpretation @xmath15 extending @xmath8 where @xmath104 differs from @xmath8 on a boolean value of @xmath8 .",
    "note that while @xmath102 immediately allows us to derive information about @xmath92 for each desired interpretation , propagator @xmath107 is much weaker in the sense that it only derives a triple of @xmath92 if there is no other way to meet the conditions for an undesired interpretation .",
    "special treatment is required for the interpretation @xmath109 that maps all statements to @xmath7 and is admissible for every adf .",
    "this is not captured by @xmath102 and @xmath107 as these deal only with interpretations that have boolean mappings .",
    "thus , propagator @xmath110 serves to check whether .",
    "if this is not the case , the propagator immediately makes the relation @xmath92 incoherent and the algorithm correctly answers `` no '' .    for complete semantics and interpretations ,",
    "propagator @xmath111 derives triples just like in the admissible case .",
    "propagator @xmath112 deals with statements having for which there have to be at least two having and . hence @xmath112 derives triple @xmath113 if for all other we find a triple . for interpretations it must hold that there is some such that ( i ) and for some or ( ii ) but for all , @xmath104 assigns the same boolean truth value @xmath114 to @xmath20 .",
    "now if neither ( i ) nor ( ii ) can be fulfilled by any statement due to the current contents of @xmath92 , propagators @xmath115 and @xmath116 derive triple @xmath117 for if needed for @xmath20 to fulfill ( i ) and @xmath113 for if needed for @xmath20 to fulfill ( ii ) , respectively .",
    "consider the set .",
    "first , we consider a run of @xmath118 . in the first iteration",
    ", propagator ensures that @xmath119 in line  [ alg : l : propagate ] contains @xmath120 , @xmath121 , @xmath122 , and @xmath123 .",
    "based on the latter three tuples and , propagator derives @xmath124 in the second iteration which together with @xmath120 causes the algorithm to return `` no '' . consequently , @xmath125 is not @xmath45-realizable .",
    "a run of @xmath126 on the other hand returns @xmath39-characterization @xmath0 for @xmath125 that maps @xmath127 to @xmath128 , @xmath129 to @xmath130 , @xmath131 and @xmath132 to @xmath131 and all other to @xmath132 .",
    "hence , adf @xmath40 , given by the acceptance conditions has @xmath125 as its complete semantics .",
    "finally , for two - valued model semantics , propagator @xmath133 derives new triples by looking at interpretations . for those , we must find in each @xmath87-characterization @xmath0 by definition .",
    "thus the algorithm adds @xmath134 for each to the partial characterization @xmath92 .",
    "propagator @xmath135 looks at interpretations , for which it must hold that .",
    "thus there must be a statement with , which is exactly what this propagator derives whenever it is clear that there is only one statement candidate left .",
    "this , in turn , is the case whenever all with the opposite truth value @xmath136 and all with can not coherently become the necessary witness any more . the propagator @xmath137 checks whether , that is , the desired set of interpretations consists entirely of two - valued interpretations .",
    "in that case this propagator makes the relation @xmath92 incoherent , following a similar strategy as @xmath110 .",
    "when constructing an adf realizing a given set @xmath38 of interpretations under a semantics @xmath37 , the function @xmath138 makes use of the @xmath37-characterization given by @xmath92 in the following way : @xmath8 is a model of the acceptance condition @xmath23 if and only if we find .",
    "now as bipolar adfs , s and afs are all subclasses of adfs by restricting the acceptance conditions of statements , these restrictions also carry over to the @xmath37-characterizations .",
    "the propagators defined below use structural knowledge on the form of acceptance conditions of the respective formalisms to reduce the search space or to induce incoherence of @xmath92 whenever @xmath38 is not realizable .    [ [ bipolar - adfs ] ] bipolar adfs + + + + + + + + + + + +    for bipolar adfs , we use the fact that each of their links must have at least one polarity , that is , must be supporting or attacking . therefore ,",
    "if a link is not supporting , it must be attacking , and vice versa .",
    "for canonical realization , we obtain the polarities of links , i.e.  the sets @xmath27 and @xmath28 , as defined in .",
    "[ [ afs ] ] afs + + +    to explain the af propagators , we first need some more definitions . on the two classical truth values , we define the truth ordering , whence the operations @xmath139 and @xmath140 with and result . these operations can be lifted pointwise to two - valued interpretations as usual , that is , and .",
    "again , the reflexive version of @xmath141 is denoted by @xmath142 .",
    "the pair @xmath143 of two - valued interpretations ordered by the truth ordering forms a complete lattice with glb @xmath140 and lub @xmath139 .",
    "acceptance conditions of af - based adfs have the form of conjunctions of negative literals . in the complete lattice @xmath143",
    ", the model sets of af acceptance conditions correspond to the lattice - theoretic concept of an _ ideal _ , a subset of @xmath144 that is downward - closed with respect to @xmath142 and upward - closed with respect to @xmath139",
    ". the propagator directly implements these closure properties : application of @xmath145 ensures that when a @xmath37-characterization @xmath92 that is neither incoherent nor partial is found in line  [ alg : l : functional ] of algorithm  [ alg : main ] , then there is , for each , an interpretation @xmath146 such that and for each .",
    "hence @xmath146 is crucial for the acceptance condition , or in af terms the attacks , of @xmath20 and we can define .",
    "[ [ s ] ] s +    the propagator for s , @xmath147 , is a weaker version of that of afs , since we can not presume upward - closure with respect to @xmath139 . in -based",
    "adfs the acceptance formula is in _ conjunctive normal form _ containing only negative literals . by a transformation preserving logical equivalence",
    "we obtain an acceptance condition in _ disjunctive normal form _",
    ", again with only negative literals ; in other words , a _ disjunction _ of af acceptance formulas .",
    "thus , the model set of a acceptance condition is not necessarily an ideal , but a union of ideals .",
    "for the canonical realization we can make use of the fact that , for each , the set is downward - closed with respect to @xmath142 , hence the set of models of is exactly @xmath148 .",
    "the clauses of its corresponding cnf - formula exactly coincide with the sets of arguments attacking @xmath20 in @xmath149 .",
    "in this section we briefly present some results that we have obtained using our implementation .",
    "we first introduce some necessary notation to describe the relative expressiveness of knowledge representation formalisms  @xcite .",
    "for formalisms @xmath150 and @xmath151 with semantics @xmath152 and @xmath153 , we say that @xmath151 under @xmath153 is at least as expressive as @xmath150 under @xmath152 and write if and only if , where is the _ signature of @xmath36 under @xmath37_. as usual , we define iff and .",
    "the following result shows that the expressiveness of the formalisms under consideration is in line with the amount of restrictions they impose on acceptance formulas .",
    "[ thm : eleq : af - setaf - badf - adf ] for any :    \\(1 ) is clear ( by modeling individual attacks via singletons ) . for the witnessing model sets over vocabulary",
    "are @xmath154 and @xmath155 with and . by each pair of arguments of @xmath4 being @xmath5 in at least one model ,",
    "a realizing af can not feature any attack , immediately giving rise to the model @xmath156 .",
    "the respective realizing is given by the attack relation .",
    "( 2 ) it is clear that holds ( all parents are always attacking ) . for the respective counterexamples",
    "can be read off the signatures above : for we find and for we find .",
    "( 3 ) for the result is known  ( * ? ? ?",
    "* theorem  14 ) ; for the remaining semantics the model sets witnessing over vocabulary are @xmath157 a witnessing adf is given by and .",
    "@xmath81    is concerned with the relative expressiveness of the formalisms under consideration , given a certain semantics . considering different semantics",
    "we find that for all formalisms the signatures become incomparable :    [ prop : incomp_signatures ] and for all formalisms and all semantics with .",
    "first , the result for @xmath45 and @xmath39 follows by , but and , but .",
    "moreover , taking into account that the set of preferred interpretations ( resp .",
    "two - valued models ) always forms a @xmath11-antichain while the set of admissible ( resp .",
    "complete ) interpretations never does , the result follows for and . finally , since a may not have any two - valued models and a preferred interpretation is not necessarily two - valued , the result for @xmath158 and @xmath87 follows .",
    "@xmath81    disregarding the possibility of realizing the empty set of interpretations under the two - valued model semantics , we obtain the following relation for adfs .    [ prop : mod_in_prf_adf ] @xmath159 .",
    "consider some with .",
    "clearly and by there is a @xmath87-characterization for @xmath38 , that is , iff .",
    "define such that for all and for all and .",
    "now it holds that @xmath160 is an @xmath45-characterization of . since we get that the adf @xmath25 with acceptance formula @xmath161 for each has whence .",
    "@xmath81    in contrast , this relation does not hold for afs , which was shown for extension - based semantics by  @xcite  and immediately follows for the three - valued case .",
    "we presented a framework for realizability in which afs , s , badfs and general adfs can be treated in a uniform way .",
    "the centerpiece of our approach is an algorithm for deciding realizability of a given interpretation - set in a formalism under a semantics .",
    "the algorithm makes use of so - called propagators , by which it can be adapted to the different formalisms and semantics ."
  ],
  "abstract_text": [
    "<S> realizability for knowledge representation formalisms studies the following question : given a semantics and a set of interpretations , is there a knowledge base whose semantics coincides exactly with the given interpretation set ? </S>",
    "<S> we introduce a general framework for analyzing realizability in abstract dialectical frameworks ( adfs ) and various of its subclasses . in particular </S>",
    "<S> , the framework applies to dung argumentation frameworks , setafs by nielsen and parsons , and bipolar adfs . </S>",
    "<S> we present a uniform characterization method for the admissible , complete , preferred and model / stable semantics . </S>",
    "<S> we employ this method to devise an algorithm that decides realizability for the mentioned formalisms and semantics ; moreover the algorithm allows for constructing a desired knowledge base whenever one exists . </S>",
    "<S> the algorithm is built in a modular way and thus easily extensible to new formalisms and semantics . </S>",
    "<S> we have also implemented our approach in answer set programming , and used the implementation to obtain several novel results on the relative expressiveness of the abovementioned formalisms . </S>"
  ]
}