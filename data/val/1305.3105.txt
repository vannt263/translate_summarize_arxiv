{
  "article_text": [
    "ubiquitous computing aims to create intelligent environments saturating with computing and communication capabilities such that people access ubiquitous applications without knowing underlying technologies .",
    "this intelligence is mainly achieved by context - awareness , which assists ubiquitous applications in adapting to changeable contexts  @xcite .",
    "contexts refer to pieces of information that captures the features of ubiquitous computing environments  @xcite .",
    "the checking of context consistency is fundamental to ubiquitous computing .",
    "for example , a rfid - based system may acquire two different locations of a user at the same time  @xcite .",
    "this kind of context consistency must be checked .",
    "however , contexts are often noisy owing to the unreliable connectivity and resource constraints  @xcite .",
    "moreover , contexts frequently keep evolving with user mobility and situations  @xcite .",
    "therefore , the detection of context consistency is a non - trivial problem .",
    "a variety of schemes for checking context consistency have been proposed . in  @xcite ,",
    "context consistency was specified by ontology assertions such that it could be checked by hidden rules and axioms from ontology . in  @xcite",
    ", context consistency was modeled by tuples and resolved by _ drop - all _ and _ drop - best _ policies without delineating the checking context consistency . in  @xcite , a tree - based checking scheme based on the first - order logic",
    "was reported that checked context consistency by refining consistency trees using partial context constraints . however , most existing schemes are seriously limited by two problems .",
    "one is that they are centralized , which incurs their unscalability in large - scale ubiquitous environments with a huge number of nodes .",
    "the other is that they fall short when counting in temporal relations among context events , since they implicitly assume that contexts being checked belong to the same snapshot .",
    "but this assumption can not be always held in ubiquitous computing environments that are characterized by asynchronous cooperation and schedule .    to remove",
    "the above assumption , ceda  @xcite was proposed .",
    "it mapped the context consistency checking into context event detection , and checked concurrent context events based on the _ happened - before _",
    "however , ceda suffers from three drawbacks , as shown in our previous work  @xcite .",
    "firstly , it checked event detection in a centralized manner , incurring its less effectiveness in large - scale ubiquitous applications .",
    "secondly , it introduced false negative because _ happened - before",
    "_ relation can not accurately capture all event relations .",
    "finally , ceda suffered heavy time and space complexity , which led to its poor performance .    to this end",
    ", we propose in this paper seca  snapshot - based event detection for context consistency checking , which is built on top of time snapshots and logical clocks .",
    "seca detects context consistency in a distributed manner , which enables the checking nodes not to be blocked or become system bottle - necks .",
    "it adopts logical clocks instead of vector clocks to evaluate event relations . to be scalable , seca customizes logical clocks by holding the value part .",
    "thus , it detects event relations that ceda can and can not . theoretical analysis and extensive experimental results show that seca achieves higher detection accuracy than ceda in a more scalable manner .",
    "the main contributions of this paper are three - fold .",
    "* first , seca removes the limitation held by ceda that central - based checking systems are easily to get heavy computing load .",
    "in contrast , seca achieves its function in a fully - distributed manner , which is highly desirable in large - scale mobile ubiquitous computing . *",
    "second , seca is capable of detecting false negative scenarios where ceda fails by introducing the snapshot timestamp . *",
    "finally , seca respectively reduces ceda s complexity of time and space for handling an event from @xmath0 to @xmath1 and from @xmath1 to @xmath2 , where @xmath3 is the number of nodes in ubiquitous network .",
    "the remaining of this paper is structured as follows .",
    "section  [ sec : sca ] presents the design of seca , followed by theoretical analysis .",
    "section  [ sec : experiment ] reports our extensive experimental results .",
    "section  [ sec : conclusion ] concludes the paper with a summary and the future work .",
    "generally , ubiquitous computing environments are modeled as a loosely - coupled distributed system , where physical entities ( e.g. , objects and users ) sense environments , and ubiquitous infrastructures handle sensed data and deliver services to ubiquitous applications . in the following , we start with introducing our system formulation .",
    "suppose @xmath4 , @xmath5 , @xmath6 , @xmath7 be @xmath3 asynchronous processes in a ubiquitous computing environment , @xmath8 be an event set in process @xmath9 , and @xmath10 and @xmath11 be the start and end of an event , respectively . thus the event @xmath8 is modeled as an interval .",
    "note that processes communicate with each other only by means of message - passing , and the communication delay is finite but unbounded .    in this subsection",
    ", we first introduce the concept of snapshot timestamp and its update policy , and then reshape the _ happened - before _",
    "relation with the snapshot timestamp .    * snapshot timestamp . *",
    "it refers to an implementation of the logical clock , where all nodes maintain a logical clock . in the system of snapshot clocks ,",
    "the time domain is denoted as a set of @xmath12dimensional and non - negative integer clocks .",
    "each process @xmath9 maintains a snapshot clock @xmath13|k=1, ... ,n\\}$ ] , where @xmath14 $ ] is the @xmath15th local logical timestamp and describes the logical time progress at @xmath9 .",
    "the process @xmath9 updates its snapshot clock by rules 1 and 2 .    1 .   before sending a message , the process @xmath9 updates its local clock by @xmath16 = s_i[k-1 ] + d ( d > 0),\\ ] ] where the default value of @xmath17 is 1 .",
    "then , the process @xmath9 piggybacks a message @xmath18 with its snapshot clock to the remaining nodes in the same environment .",
    "when receiving a message @xmath19)$ ] from the process @xmath20 , the process @xmath9 gets the snapshot timestamp at a @xmath21 point as : @xmath22 = max(s_i[k ] , s_j[send ] ) , ( 1 \\leq k \\leq n)\\ ] ]    figure  [ fig : snapshot - clock ] illustrates the update policies of our snapshot clock algorithm , where events are represented by the start and end of intervals  i.e. , @xmath10 and @xmath11 .",
    "when the process @xmath23 would like to send a message , it will automatically increment the value of its snapshot clock , and then delivers the message to the processes @xmath4 and @xmath5 .",
    "+    evidently , by comparing timestamps ( i.e. , an array of @xmath24 elements ) , the snapshot clock keeps its property of isomorphism .",
    "the relations between timestamp intervals include two ordering relations represented as @xmath25 and @xmath26 , and one concurrent relation denoted as @xmath27.    [ property : isomorphism ] given two timestamp intervals @xmath28 and @xmath29 ( a timestamp interval may contain a number of logically continuous timestamps ) , the isomorphism of the snapshot clock is given as : @xmath30 \\leq i_q[i ' ] \\nonumber \\\\",
    "i_p < i_q & \\leftrightarrow & i_p \\leq i_q \\textbf{\\ , and \\ , } \\exists i , i ' \\ , i_p[i ] < i_q[i ' ] \\nonumber \\\\          i_p \\parallel i_q & \\leftrightarrow & \\textbf{not \\,}(i_p",
    "< i_q ) \\textbf{\\ , and not \\ , } ( i_q <          i_p ) \\nonumber      \\end{aligned}\\ ] ]    * snapshot - based _ happened - before _",
    "relation .",
    "* let @xmath31 denotes the _ happened - before _",
    "relation , the snapshot timestamps based events in a distributed system satisfy theorem  [ property : snaps-2 ] .",
    "[ property : snaps-2 ] given two events @xmath32 and @xmath33 with respective timestamp intervals @xmath34 and @xmath35 , then : @xmath36    according to the update policies of snapshot clocks , the _ happened - before _",
    "relation is held .",
    "thus , an isomorphism exists between the partially ordered events produced by a distributed computation and their timestamps .",
    "this is a powerful and interesting property of snapshot clocks .",
    "note that the _ happened - before _",
    "relation between these two events is stated as @xmath37 .    in order to easily detect concurrent events",
    ", we propose an event concurrence detection mechanism shown as theorem  [ pro : snap - clock ] .",
    "[ pro : snap - clock ] given two events @xmath32 and @xmath33 in processes @xmath9 and @xmath20 .",
    "assume the event @xmath32 sends a message to the event @xmath33 with its timestamp @xmath38 , then :    @xmath39 @xmath40 ( @xmath41 @xmath25 @xmath38 @xmath26 @xmath42 )     and @xmath33 , where @xmath41 @xmath25 @xmath38 @xmath26 @xmath42 . ]",
    "there is a message from the event @xmath32 to the event @xmath33 .",
    "according to the update policy of snapshot clock , the value of @xmath38 is not less than @xmath43 .",
    "meanwhile , the message is handled by the event @xmath33 , indicating that the value of @xmath38 must be less than @xmath44 .      in this paper",
    ", we propose a seca scheme  snapshot - based event detection for checking asynchronous context consistency in ubiquitous computing .",
    "seca is built on top of the snapshot timestamps , and enables all nodes to detect concurrent context consistency events without central control or a centralized hierarchy . in seca ,",
    "the basis of context consistency detection is theorem  [ pro : snap - clock ] and _ happened - before _",
    "figure  [ fig : concurrent - event ] illustrates the fact that the events @xmath32 and @xmath33 are concurrent , which is checked by theorem  [ pro : snap - clock ] .",
    "the pseudo - code of seca scheme is given as algorithm  [ algorithm : process ] , consisting of three parts : event processing , message processing , and context consistency checking .",
    "the event processing refers to a process that updates its snapshot clock when an event occurs within its life span . to be specific",
    ", the process updates its snapshot clock , the event queue @xmath45 , as well as interval queue @xmath46 by broadcast ( e.g. , seca offers a @xmath47 primitive ) . when events communicate with messages , the processes where the events happen meet two types of message processing  sending and receiving .",
    "the sender is in charge of updating the event queue and interval queue ( see steps 11 - 14 ) . correspondingly , the receiving process modifies its snapshot clock by picking the maximal timestamp value between the snapshot timestamps of the sender and receiver processes ( see steps 15 - 19 ) .",
    "note that the actions of senders and receivers are incorporated together in the pseudo - code .",
    "the third part refers to the context consistency detection . since elements in @xmath48 implicitly satisfy theorem  [ pro : snap - clock ] , we output the event pairs simply by a validation check .",
    "thus far we have presented the design of seca .",
    "however , does seca scheme solve false negative caused in ceda scheme ?",
    "can seca scheme detect context consistency accurately in ubiquitous computing environments ?",
    "we investigate these issues by theoretical analysis in this section .",
    "specially , we will study the false negative , complexity and implementation manner of the proposed scheme .",
    "moreover , in the following section  [ sec : experiment ] , we further evaluate seca by extensive experiments .",
    "given @xmath3 intervals @xmath49 , @xmath50 , @xmath6 , @xmath51 , ceda checks concurrent context consistency events by eq .",
    "[ eq : ceda ] , which is built on top of _ happened - before _",
    "the case of interval overlaps which is characterized by concurrent events shown as fig .",
    "[ fig : ceda - detection ] .",
    "however , for some concurrent events whose intervals are overlapped , the ceda scheme fails to detect them , which is notorious for * false negative * phenomena .",
    "this is because eq .",
    "[ eq : ceda ] can not detect these overlapping intervals although they are mutual across .",
    "@xmath52     +    figure  [ fig : ceda - false - negative ] illustrates three false negative scenarios where ceda scheme fails to check context consistency correctly . in figs .",
    "[ fig : false - negative - a ] ,  [ fig : false - negative - c ] and  [ fig : false - negative - c ] , two events in two respective processes satisfy @xmath53 , @xmath54 , and @xmath55 , respectively .",
    "these two events concurrently take place , but eq .  [ eq : ceda ] are blind of them . on the contrary",
    ", seca is capable of successfully identifying these concurrent context events . as for figs .",
    "[ fig : false - negative - a ] and  [ fig : false - negative - b ] , seca compares the message timestamp of senders with the @xmath10 and @xmath11 of the receivers and then locates the concurrency . note that concurrency in fig .",
    "[ fig : false - negative - c ] is challenging to detect .",
    "this kind of concurrency is mainly caused by message delay .",
    "owing to the space limitation , we only report the experimental results about how message delay affects the seca performance , and omit the part of theoretical analysis .      taking a panoramic view of the seca scheme , it is easy to find that seca does not rely on central control to check context consistency .",
    "all processes involved in a ubiquitous system are equal and check context consistency by snapshot clocks .",
    "every process requires @xmath2 space complexity to maintain snapshot timestamps , and @xmath1 time complexity for every context consistency event detection . considering that many ubiquitous devices are with limited computing and communication capabilities , seca is highly desirable with respect to efficiency and scalability in large - scale mobile ubiquitous environments .    to further evaluate the time and space complexity of the proposed scheme",
    ", we have implemented the detection schemes by physical clocks , vector clocks and snapshot clocks , labeled as pca , ceda and sca schemes , correspondingly .",
    "table  [ tbl : theorectical - comparison ] compares the pca , ceda and sca in terms of clock synchronization , handling the occurrence of an event , detecting overlapped intervals and concurrent events , and false negative . by comparison ,",
    "sca significantly alleviates the time and space complexity concerning event processing and context consistency checking .",
    "meanwhile , sca also cuts off a half possibility of false negative generated in ceda scheme .",
    ".comparison of pca , ceda and sca schemes with respect to checking context consistency events [ cols=\"<,<,<,<\",options=\"header \" , ]      in general , seca scheme can be achieved in a distributed manner , the same as that of _ happened - before _",
    "relation implementation in distributed systems .",
    "this kind of implementation is appropriate to pcs and supercomputers that are equipped with powerful communication and computation capabilities . with respect to the hand - held and embedded devices , e.g. , sensors , rfid , and mobile phones",
    ", the proposed scheme can be reached by agents , e.g. , mobile agents for rfid and mobile phones  @xcite .",
    "we conduct extensive experiments in this section to further evaluate whether seca is appropriate to context - aware applications in asynchronous ubiquitous computing environments .",
    "in particular , this section will evaluate how the detection accuracy of seca is , and whether seca outperforms ceda regarding detection accuracy and computation cost .",
    "a smart building scenario is simulated where users move around .",
    "the duration of users stay in an office follows the exponential distribution . in view of that user location",
    "is regarded as the most important type of contexts in asynchronous ubiquitous computing environments  @xcite , the user location is our focus .",
    "the holistic study environment is equipped with rfid devices and every user carries a rfid tag such that the location context is collected timely .",
    "the rfid data concerning user location is generated with controlled error rates of 10% , 20% , 30% , 40% and 50% by leveraging on the mechanisms provided in the existing literature  @xcite .",
    "a constraint is implanted into the location context that * _ a user can not have two difference locations at the same time_*.      a series of experiments is designed to check the detection accuracy of seca and whether it performs better than ceda .",
    "given that the experiments shed light on detecting concurrent events of user locations , we limit the number of nodes attending for the same contexts from 2 to 20 .",
    "every node runs two detection process instances .",
    "every event has a random life span from 20 milliseconds to 50 milliseconds and every message suffers a random delay between 0.25 to 8 seconds .",
    "all experimental results are gained by pc equipped with windows enterprise 7 ( 32-bit ) , cpu 1.67ghz , and ram 2 gb . the following experiments share the same settings without explicit declaration .",
    "figure  [ fig : performance](a ) illustrates the performance results with tuning the number of nodes from 2 to 20 . both ceda and seca schemes achieve a high level of detection accuracy of context consistency events , showing a slightly downward trend .",
    "this indicates that vector clocks and _ happened - before _",
    "relation is efficient for detecting concurrent context consistency events .",
    "meanwhile , seca scheme acquires a higher level of accuracy than ceda .",
    "this is because seca correctly solves part of cases where ceda gets false negative errors .",
    "several experiments are conducted to investigate how the message delay affects the concurrent event detection of the proposed scheme .    as shown in fig .",
    "[ fig : performance](b ) , detection accuracy of both seca and ceda schemes reduce their accuracy as the increase of message delay . in all experiments , seca achieves a higher level of accuracy than ceda owing to its snapshot - based timestamp checking mechanism .",
    "especially , when the logarithm of the message delay is between -2 and 3 , seca gets a better detection accuracy with less communication overheads .",
    "taking into account the scale of ubiquitous network , we hereby set the value of message delay as 0.25 to 8 milliseconds .",
    "in this paper , we have studied concurrent event detection for checking context consistency in asynchronous ubiquitous environments .",
    "we have proposed the snapshot timestamp and based on it we have put forward the seca scheme , which reduces the time complexity of ceda from @xmath0 to @xmath1 , and the space complexity for handling an event from @xmath1 to @xmath2 , where @xmath3 is the scale of ubiquitous network .",
    "extensive experimental results show that seca is desirable in context - aware applications and outperforms ceda regarding concurrent event detection accuracy , and robustness on message delay and event duration .",
    "currently , seca scheme could be further improved in the following perspectives .",
    "firstly , we need to investigate how seca performs in large - scale ubiquitous computing environments with over ten thousands of participants . secondly , we will study whether and how seca copes with the dynamic changes of processes involved in the concurrent event detection .",
    "finally , we plan to evaluate seca in various scenarios with more types of contexts and consistency constraints .",
    "this work is supported by the national natural science foundation of china ( grant nos .",
    "61103185 , 61100178 , 61003247 and 61073118 ) , the start - up foundation of nanjing normal university ( grant no .",
    "2011119xgq0072 ) , and natural science foundation of the higher education institutions of jiangsu province , china ( grant no .",
    "11kjb520009 ) .",
    "this work is also supported by major program of national natural science foundation of jiangsu province ( grant no .",
    "bk211005 ) .",
    "this research was also partially supported by the national research foundation of korea ( nrf ) grant funded by the korea government ( mest ) ( grant no . 2011 - 0009454 ) .",
    "d.  zhang , h.  huang , c .- f .",
    "lai , x.  liang , q.  zou , and m.  guo , `` survey on context - awareness in ubiquitous media , '' _ multimedia tools and applications _ , pp . 133 , 2012 , 10.1007/s11042 - 011 - 0940 - 9 .",
    "[ online ] .",
    "available : http://dx.doi.org/10.1007/s11042-011-0940-9    y.  huang , x.  ma , j.  cao , x.  tao , and j.  lu , `` concurrent event detection for asynchronous consistency checking of pervasive context , '' _ proc . of the ieee int .",
    "conf . on perv",
    ". comput . and commu .",
    "_ , pp . 19 , 2009 .",
    "d.  zhang , m.  guo , j.  zhou , d.  kang , and j.  cao , `` context reasoning using extended evidence theory in pervasive computing environments , '' _ future generation comp .",
    "_ , vol .  26 , no .  2 , pp .",
    "207216 , 2010 .",
    "d.  zhang , h.  guan , j.  zhou , f.  tang , and m.  guo , `` ishadow : yet another pervasive computing environment , '' in _ ieee international symposium on parallel and distributed processing with applications_.1em plus 0.5em minus 0.4emsydney , nsw , australia : ieee , 2008 , pp . 261268 .",
    "x.  wang , d.  zhang , t.  gu , and h.  pung , `` ontology based context modeling and reasoning using owl , '' in _ _ proc . of the 2nd ieee annual conf .",
    "comput . and commu .",
    "work.__1em plus 0.5em minus 0.4emieee , 2004 , pp .",
    "y.  bu , s.  chen , j.  li , x.  tao , and j.  lu , `` context consistency management using ontology based model , '' in _ current trends in database technology  edbt workshops _",
    "4254.1em plus 0.5em minus 0.4em springer , 2006 , pp",
    ". 741755 .",
    "y.  bu , t.  gu , x.  tao , j.  li , s.  chen , and j.  lu , `` managing quality of context in pervasive computing , '' in _",
    "_ proc . of the 6th .",
    "int . conf . on quality softw.__1em plus",
    "0.5em minus 0.4emieee , oct . 2006 , pp",
    ". 193200 .",
    "d.  zhang , m.  chen , h.  huang , and m.  guo , `` decentralized checking of context inconsistency in pervasive computing environments , '' _ the journal of supercomputing _ , pp . 118 , 2012 , 10.1007/s11227 - 011 - 0661-x .",
    "[ online ] .",
    "available : http://dx.doi.org/10.1007/s11227-011-0661-x"
  ],
  "abstract_text": [
    "<S> context - consistency checking is challenging in the dynamic and uncertain ubiquitous computing environments . </S>",
    "<S> this is because contexts are often noisy owing to unreliable sensing data streams , inaccurate data measurement , fragile connectivity and resource constraints . </S>",
    "<S> one of the state - of - the - art efforts is ceda , which concurrently detects context consistency by exploring the _ happened - before _ </S>",
    "<S> relation among events . however , ceda is seriously limited by several side effects  centralized detection manner that easily gets down the checker process , heavy computing complexity and false negative .    in this paper </S>",
    "<S> , we propose seca : snapshot - based event detection for checking asynchronous context consistency in ubiquitous computing . </S>",
    "<S> seca introduces snapshot - based timestamp to check event relations , which can detect scenarios where ceda fails . </S>",
    "<S> moreover , it simplifies the logical clock instead of adopting the vector clock , and thus significantly reduces both time and space complexity . </S>",
    "<S> empirical studies show that seca outperforms ceda in terms of detection accuracy , scalability , and computing complexity . </S>"
  ]
}