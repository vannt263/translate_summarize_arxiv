{
  "article_text": [
    "deep learning models have achieved remarkable results in computer vision @xcite and speech recognition @xcite in recent years . within natural language processing ,",
    "much of the work with deep learning methods has involved learning word vector representations through neural language models ( bengio et al . , 2003 ; yih et al . , 2011 ; mikolov et al . , 2013 ) and performing composition over the learned word vectors for classification @xcite .",
    "word vectors , wherein words are projected from a sparse , 1-of-@xmath0 encoding ( here @xmath0 is the vocabulary size ) onto a lower dimensional vector space via a hidden layer , are essentially feature extractors that encode semantic features of words in their dimensions . in such dense representations ,",
    "semantically close words are likewise close  in euclidean or cosine distance  in the lower dimensional vector space .",
    "convolutional neural networks ( cnn ) utilize layers with convolving filters that are applied to local features @xcite . originally invented for computer vision , cnn models have subsequently been shown to be effective for nlp and have achieved excellent results in semantic parsing @xcite , search query retrieval @xcite , sentence modeling @xcite , and other traditional nlp tasks @xcite .    in the present work ,",
    "we train a simple cnn with one layer of convolution on top of word vectors obtained from an unsupervised neural language model .",
    "these vectors were trained by mikolov et al . on 100 billion words of google news , and are publicly available .",
    "we initially keep the word vectors static and learn only the other parameters of the model . despite little tuning of hyperparameters",
    ", this simple model achieves excellent results on multiple benchmarks , suggesting that the pre - trained vectors are ` universal ' feature extractors that can be utilized for various classification tasks . learning task - specific vectors through fine - tuning results in further improvements .",
    "we finally describe a simple modification to the architecture to allow for the use of both pre - trained and task - specific vectors by having multiple channels .",
    "our work is philosophically similar to razavian et al . which showed that for image classification , feature extractors obtained from a pre - trained deep learning model perform well on a variety of tasks  including tasks that are very different from the original task for which the feature extractors were trained .",
    "the model architecture , shown in figure 1 , is a slight variant of the cnn architecture of collobert et al . .",
    "let @xmath1 be the @xmath2-dimensional word vector corresponding to the @xmath3-th word in the sentence .",
    "a sentence of length @xmath4 ( padded where necessary ) is represented as        @xmath5    where @xmath6 is the concatenation operator . in general , let @xmath7 refer to the concatenation of words @xmath8 .",
    "a convolution operation involves a _ filter _",
    "@xmath9 , which is applied to a window of @xmath10 words to produce a new feature .",
    "for example , a feature @xmath11 is generated from a window of words @xmath12 by @xmath13 here @xmath14 is a bias term and @xmath15 is a non - linear function such as the hyperbolic tangent .",
    "this filter is applied to each possible window of words in the sentence @xmath16 to produce a _ feature map _ @xmath17,\\ ] ] with @xmath18 .",
    "we then apply a max - over - time pooling operation @xcite over the feature map and take the maximum value @xmath19 as the feature corresponding to this particular filter .",
    "the idea is to capture the most important feature ",
    "one with the highest value  for each feature map .",
    "this pooling scheme naturally deals with variable sentence lengths .",
    "we have described the process by which @xmath20 feature is extracted from @xmath20 filter .",
    "the model uses multiple filters ( with varying window sizes ) to obtain multiple features .",
    "these features form the penultimate layer and are passed to a fully connected softmax layer whose output is the probability distribution over labels .    in one of the model variants , we experiment with having two ` channels ' of word vectors  one that is kept static throughout training and one",
    "that is fine - tuned via backpropagation ( section 3.2 ) . in the multichannel architecture ,",
    "illustrated in figure 1 , each filter is applied to both channels and the results are added to calculate @xmath11 in equation ( 2 ) .",
    "the model is otherwise equivalent to the single channel architecture .",
    "for regularization we employ dropout on the penultimate layer with a constraint on @xmath21-norms of the weight vectors @xcite .",
    "dropout prevents co - adaptation of hidden units by randomly dropping out  i.e . , setting to zero  a proportion @xmath22 of the hidden units during foward - backpropagation .",
    "that is , given the penultimate layer @xmath23 $ ] ( note that here we have @xmath24 filters ) , instead of using @xmath25 for output unit @xmath26 in forward propagation , dropout uses @xmath27 where @xmath28 is the element - wise multiplication operator and @xmath29 is a ` masking ' vector of bernoulli random variables with probability @xmath22 of being 1 .",
    "gradients are backpropagated only through the unmasked units . at test time , the learned weight vectors are scaled by @xmath22 such that @xmath30 , and @xmath31 is used ( without dropout ) to score unseen sentences .",
    "we additionally constrain @xmath21-norms of the weight vectors by rescaling @xmath32 to have @xmath33 whenever @xmath34 after a gradient descent step .",
    "we test our model on various benchmarks .",
    "summary statistics of the datasets are in table 1 .",
    "|| > m0.15 cm | > m0.25 cm | > m0.825 cm | > m0.825 cm | > m0.825 cm | > m0.8",
    "cm * data * & @xmath35 & @xmath36 & @xmath37 & @xmath38 & @xmath39 & _ test _ + mr & @xmath40 & @xmath41 & @xmath42 & @xmath43 & @xmath44 & cv + sst-1 & @xmath45 & @xmath46 & @xmath47 & @xmath48 & @xmath49 & @xmath50 + sst-2 & @xmath40 & @xmath51 & @xmath52 & @xmath53 & @xmath54 & @xmath55 + subj & @xmath40 & @xmath56 & @xmath57 & @xmath58 & @xmath59 & cv + trec & @xmath60 & @xmath61 & @xmath62 & @xmath63 & @xmath64 & @xmath65 + cr & @xmath40 & @xmath51 & @xmath66 & @xmath67 & @xmath68 & cv + mpqa & @xmath40 & @xmath69 & @xmath70 & @xmath71 & @xmath72 & cv +    * * mr * : movie reviews with one sentence per review .",
    "classification involves detecting positive / negative reviews @xcite . * * sst-1 * : stanford sentiment treebank  an extension of mr but with train / dev / test splits provided and fine - grained labels ( very positive , positive , neutral , negative , very negative ) , re - labeled by socher et al . .",
    "* * sst-2 * : same as sst-1 but with neutral reviews removed and binary labels .",
    "* * subj * : subjectivity dataset where the task is to classify a sentence as being subjective or objective @xcite . * * trec * : trec question dataset  task involves classifying a question into 6 question types ( whether the question is about person , location , numeric information , etc . ) @xcite . * * cr * : customer reviews of various products ( cameras , mp3s etc . ) .",
    "task is to predict positive / negative reviews @xcite . * * mpqa * : opinion polarity detection subtask of the mpqa dataset @xcite .",
    "for all datasets we use : rectified linear units , filter windows ( @xmath10 ) of 3 , 4 , 5 with 100 feature maps each , dropout rate ( @xmath22 ) of 0.5 , @xmath21 constraint ( @xmath73 ) of 3 , and mini - batch size of 50 .",
    "these values were chosen via a grid search on the sst-2 dev set .",
    "we do not otherwise perform any dataset - specific tuning other than early stopping on dev sets . for datasets without a standard dev set we randomly select 10% of the training data as the dev set .",
    "training is done through stochastic gradient descent over shuffled mini - batches with the adadelta update rule @xcite .",
    "initializing word vectors with those obtained from an unsupervised neural language model is a popular method to improve performance in the absence of a large supervised training set ( collobert et al .",
    ", 2011 ; socher et al . , 2011 ;",
    "iyyer et al . , 2014 ) .",
    "we use the publicly available ` word2vec ` vectors that were trained on 100 billion words from google news .",
    "the vectors have dimensionality of 300 and were trained using the continuous bag - of - words architecture @xcite .",
    "words not present in the set of pre - trained words are initialized randomly .",
    "> m5.95 cm ||>m0.9cm|>m0.95cm| > m0.95cm| > m0.9cm| > m0.9cm| > m0.9cm| >",
    "m0.9 cm * model * & mr & sst-1 & sst-2 & subj & trec & cr & mpqa + cnn - rand & @xmath74 & @xmath75 & @xmath76 & @xmath77 & @xmath78 & @xmath79 & @xmath80 + cnn - static & @xmath81 & @xmath82 & @xmath83 & @xmath84 & @xmath85 & @xmath86 & @xmath87 + cnn - non - static & @xmath88 & @xmath89 & @xmath90 & @xmath91 & @xmath92 & @xmath93 & @xmath94 + cnn - multichannel & @xmath95 & @xmath96 & @xmath97 & @xmath98 & @xmath99 & @xmath100 & @xmath101 + rae @xcite & @xmath102 & @xmath103 & @xmath104 & @xmath105 & @xmath105 & @xmath105 & @xmath106 + mv - rnn @xcite & @xmath107 & @xmath108 & @xmath109 & @xmath105 & @xmath105 & @xmath105 & @xmath105 + rntn @xcite & @xmath105 & @xmath110 & @xmath111 & @xmath105 & @xmath105 & @xmath105 & @xmath105 + dcnn @xcite & @xmath105 & @xmath112 & @xmath83 & @xmath105 & @xmath84 & @xmath105 & @xmath105 + paragraph - vec @xcite & @xmath105 & @xmath113 & @xmath114 & @xmath105 & @xmath105 & @xmath105 & @xmath105 + ccae @xcite & @xmath115 & @xmath105 & @xmath105 & @xmath105 & @xmath105 & @xmath105 & @xmath90 + sent - parser @xcite & @xmath116 & @xmath105 & @xmath105 & @xmath105 & @xmath105 & @xmath105 & @xmath117 + nbsvm @xcite & @xmath118 & @xmath105 & @xmath105 & @xmath98 & @xmath105 & @xmath119 & @xmath117 + mnb @xcite & @xmath107 & @xmath105 & @xmath105 & @xmath120 & @xmath105 & @xmath121 & @xmath117 + g - dropout @xcite & @xmath107 & @xmath105 & @xmath105 & @xmath91 & @xmath105 & @xmath122 & @xmath123 + f - dropout @xcite & @xmath124 & @xmath105 & @xmath105 & @xmath120 & @xmath105 & @xmath125 & @xmath117 + tree - crf @xcite & @xmath126 & @xmath105 & @xmath105 & @xmath105 & @xmath105 & @xmath127 & @xmath123 + crf - pr @xcite & @xmath105 & @xmath105 & @xmath105 & @xmath105 & @xmath105 & @xmath76 & @xmath105 + svm@xmath128 @xcite & @xmath129 & @xmath105 & @xmath105 & @xmath105 & @xmath130 & @xmath105 & @xmath105 +      we experiment with several variants of the model .    * * cnn - rand * : our baseline model where all words are randomly initialized and then modified during training . * * cnn - static * : a model with pre - trained vectors from ` word2vec ` . all words  including the unknown ones that are randomly initialized  are kept static and only the other parameters of the model are learned . *",
    "* cnn - non - static * : same as above but the pre - trained vectors are fine - tuned for each task . * * cnn - multichannel * : a model with two sets of word vectors .",
    "each set of vectors is treated as a ` channel ' and each filter is applied to both channels , but gradients are backpropagated only through one of the channels .",
    "hence the model is able to fine - tune one set of vectors while keeping the other static .",
    "both channels are initialized with ` word2vec ` .    in order to disentangle the effect of the above variations versus other random factors , we eliminate other sources of randomness  cv - fold assignment , initialization of unknown word vectors , initialization of cnn parameters  by keeping them uniform within each dataset .",
    "results of our models against other methods are listed in table 2 . our baseline model with all randomly initialized words ( cnn - rand )",
    "does not perform well on its own . while we had expected performance gains through the use of pre - trained vectors , we were surprised at the magnitude of the gains .",
    "even a simple model with static vectors ( cnn - static ) performs remarkably well , giving competitive results against the more sophisticated deep learning models that utilize complex pooling schemes @xcite or require parse trees to be computed beforehand @xcite .",
    "these results suggest that the pre - trained vectors are good , ` universal ' feature extractors and can be utilized across datasets .",
    "fine - tuning the pre - trained vectors for each task gives still further improvements ( cnn - non - static ) .",
    "we had initially hoped that the multichannel architecture would prevent overfitting ( by ensuring that the learned vectors do not deviate too far from the original values ) and thus work better than the single channel model , especially on smaller datasets .",
    "the results , however , are mixed , and further work on regularizing the fine - tuning process is warranted .",
    "for instance , instead of using an additional channel for the non - static portion , one could maintain a single channel but employ extra dimensions that are allowed to be modified during training .      as is the case with the single channel non - static model ,",
    "the multichannel model is able to fine - tune the non - static channel to make it more specific to the task - at - hand .",
    "for example , _ good _ is most similar to _ bad _ in ` word2vec ` , presumably because they are ( almost ) syntactically equivalent .",
    "but for vectors in the non - static channel that were fine - tuned on the sst-2 dataset , this is no longer the case ( table 3 ) .",
    "similarly , _",
    "good _ is arguably closer to _ nice _ than it is to _ great _ for expressing sentiment , and this is indeed reflected in the learned vectors .    for",
    "( randomly initialized ) tokens not in the set of pre - trained vectors , fine - tuning allows them to learn more meaningful representations : the network learns that exclamation marks are associated with effusive expressions and that commas are conjunctive ( table 3 ) .",
    ".top 4 neighboring words  based on cosine similarity  for vectors in the static channel ( left ) and fine - tuned vectors in the non - static channel ( right ) from the multichannel model on the sst-2 dataset after training . [ cols=\"^,^,^ \" , ]      we report on some further experiments and observations :    * kalchbrenner et al .",
    "report much worse results with a cnn that has essentially the same architecture as our single channel model .",
    "for example , their max - tdnn ( time delay neural network ) with randomly initialized words obtains @xmath131 on the sst-1 dataset , compared to @xmath132 for our model .",
    "we attribute such discrepancy to our cnn having much more capacity ( multiple filter widths and feature maps ) .",
    "* dropout proved to be such a good regularizer that it was fine to use a larger than necessary network and simply let dropout regularize it .",
    "dropout consistently added 2%4% relative performance .",
    "* when randomly initializing words not in ` word2vec ` , we obtained slight improvements by sampling each dimension from @xmath133 $ ] where @xmath134 was chosen such that the randomly initialized vectors have the same variance as the pre - trained ones",
    ". it would be interesting to see if employing more sophisticated methods to mirror the distribution of pre - trained vectors in the initialization process gives further improvements .",
    "* we briefly experimented with another set of publicly available word vectors trained by collobert et al .",
    "on wikipedia , and found that ` word2vec ` gave far superior performance . it is not clear whether this is due to mikolov et al . s",
    "architecture or the 100 billion word google news dataset .",
    "* adadelta @xcite gave similar results to adagrad @xcite but required fewer epochs .",
    "in the present work we have described a series of experiments with convolutional neural networks built on top of ` word2vec ` . despite little tuning of hyperparameters ,",
    "a simple cnn with one layer of convolution performs remarkably well .",
    "our results add to the well - established evidence that unsupervised pre - training of word vectors is an important ingredient in deep learning for nlp ."
  ],
  "abstract_text": [
    "<S> we report on a series of experiments with convolutional neural networks ( cnn ) trained on top of pre - trained word vectors for sentence - level classification tasks . </S>",
    "<S> we show that a simple cnn with little hyperparameter tuning and static vectors achieves excellent results on multiple benchmarks . </S>",
    "<S> learning task - specific vectors through fine - tuning offers further gains in performance . </S>",
    "<S> we additionally propose a simple modification to the architecture to allow for the use of both task - specific and static vectors . </S>",
    "<S> the cnn models discussed herein improve upon the state of the art on 4 out of 7 tasks , which include sentiment analysis and question classification . </S>"
  ]
}