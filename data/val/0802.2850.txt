{
  "article_text": [
    "the _ matching problem _ is one of the most well - studied in the field of parallel complexity .",
    "attempts to solve this problem have led to the development of a variety of combinatorial , algebraic and probabilistic tools which have applications even outside the field .",
    "since the problem is still open , researchers linger around it in search of new techniques , if not to solve it in its whole generality , then at least under various natural restrictions . in this paper",
    ", we will focus on the deterministic complexity of the _ matching problem _ under its planar restrictions .      a matching in an undirected graph",
    "is a collection of edges which have no endpoint in common .",
    "such a collection of edges is called  independent \" .",
    "see @xcite for an excellent survey on matchings .",
    "the computational question one can ask here is , given a graph , to find a matching of the maximum cardinality .",
    "a perfect matching in a graph is a collection of independent edges which cover all the vertices .",
    "one may ask various computational questions about perfect matchings in graphs . we will consider the following three questions : + _ question 1 : _ ( decision ) is there a perfect matching in a given graph ?",
    "+ _ question 2 : _ ( search ) construct a perfect matching in a graph , if it exists .",
    "+ _ question 3 : _",
    "( uniqueness testing or ) does a given graph have exactly one perfect matching ? + there are polynomial time algorithms for the above graph matching problems and historically people have been interested in studying the parallel complexity of all the three questions above .",
    "the  question for bipartite graphs is deterministically parallelizable @xcite ( i.e. it lies in the complexity class ; see any standard complexity text for a formal definition , say @xcite ) . intuitively ,  is a complexity class consisting of the problems having a parallel algorithm which runs in polylogarithmic time using polynomially many processors which have access to a common memory .",
    "it is the class consisting of so called `` well parallelizable '' problems .",
    "is inside  - problems having a sequential polynomial time algorithm . whether the _",
    "matching problem _ is deterministically parallelizable remains a major open question in parallel complexity .",
    "is matching in  ?",
    "the best we know till now is that _ matching _ is in _ randomized _ .",
    "see for example , @xcite .",
    "several restrictions of the matching problem are known to be in , for example , bipartite planar graphs @xcite , graphs with polynomially bounded number of perfect matchings @xcite etc . whether the search version reduces to the decision version has also not been answered yet .",
    "@xcite one can randomly assign polynomially bounded weights to the edges of a graph so that with high probability the minimum weight perfect matching becomes unique .    using the isolation lemma",
    ", @xcite obtained a simple _ randomized _ algorithm for finding a perfect matching in arbitrary graphs .",
    "allender et al @xcite proved a non - uniform bound for matching problem which allows us to replace the randomization by a polynomial length advice string .",
    "hence , we know that matching is parallelizable with polynomial bit advice .    is a promise class that is characterized by the problem of checking whether a a matrix is singular under the promise that its determinant is either @xmath0 or @xmath1 .",
    "the corresponding non - uniform class /poly is  with a polynomial bit advice .",
    "is inside @xmath3 and inside @xmath4 for all @xmath5 while  ( unambiguous logspace ) is inside ,  ( nondeterministic logspace ) is incomparable with . both  and  are known to lie inside @xmath6    a language is said to be in /poly if for every positive integer @xmath7 there exists an advice string @xmath8 such that :    * length of @xmath8 is polynomially bounded in @xmath7 * once @xmath8 is given , the membership of any input of size @xmath7 can be decided in .",
    "@xcite matching is in /poly .",
    "the situation for planar graphs is interesting because of the fact that counting the number of perfect matchings in planar graph is in  ( @xcite ) whereas constructing one perfect matching is not yet known to be parallelizable .",
    "however , for bipartite planar graphs , people have found  algorithms @xcite .",
    "the isolation lemma crucially uses randomness in order to isolate a minimum weight set in an arbitrary set system .",
    "it is conceivable , however , to exploit some additional structure in the set system to eliminate this randomness .",
    "indeed , recently @xcite building upon a technique from @xcite were able to isolate a directed path in a planar graph by assigning small _ deterministic _ weights to the edges .",
    "the lemma that sits at the heart of that result says that there is a simple deterministic way to assign weights so that each directed cycle ( in a grid graph ) gets a non - zero weight .",
    "this is shown to imply that if two paths get the same weight neither of them is a min - weight path .    motivated by their result we explore the possibility of such an isolation for perfect matchings in planar graphs .",
    "our attempt is to assign weights so that the alternating sum is non - zero for each alternating cycle - here alternating sum is the signed sum of weights where the sign is opposite for successive edges . since alternating cycle result from the super - imposition of two matchings , we are able to isolate a min - weight matching .",
    "therefore , we are able to devise an  algorithm for bipartite planar graphs which is conceptually simple , different from the other known algorithms and tightens its complexity to the smaller class .",
    "the search problem for matching in non - bipartite planar graphs still remains open even though the corresponding decision and counting versions are known to be in .",
    "our algorithm rekindles the hope for solving general planar matching in .",
    "here we describe the technical tools that we need in the rest of the paper .",
    "refer to any standard text ( e.g. @xcite ) for definitions of the complexity classes @xmath3 , @xmath4 , , , @xmath9 . for graph - theoretic concepts , for instance ,",
    "_ planar graph _ , _ outerplanar graph _ , _ spanning trees _ , _ adjacency matrix _ , _ laplacian matrix _ of a graph",
    ", we refer the reader to any standard text in graph theory ( e.g. @xcite ) .",
    "we will view an @xmath10 grid as a graph simply by putting the nodes at the grid points and letting the grid edges act as the edges of the graph .",
    "_ grid graphs _ are simply subgraphs of an @xmath10 grid for some @xmath7 .",
    "see figure  [ gridgraph ] for an example .",
    "we call each unit square of the grid a _ block_.    we call a graph an _ almost grid graph _ if it consists of a grid graph and possibly some additional diagonal edges which all lie in some single row of the grid",
    ". moreover all the diagonal edges are parallel to each other . see figure  [ almostgrid ] .    in this paper we will consider weighted grid graphs where each edge is assigned an integer weight",
    ". +    1 .   given a grid ,",
    "+ \" sign to all the vertical edges and a  - \" sign to all the horizontal edges . 2 .",
    "assign a sign of @xmath11 to the block in the @xmath12 row and @xmath13 column ( adjacent blocks get opposite signs ) .    given a weighted grid graph @xmath14 , the _ circulation _ of a block @xmath15(denoted @xmath16 ) in @xmath14 is the signed sum of weights of the edges of it : @xmath17 .    given a weighted grid graph @xmath14 and a simple cycle",
    "@xmath18 in it , where @xmath19 is , say , the leftmost topmost vertical edge of @xmath20 ; we define the circulation of a cycle @xmath20 as @xmath21    the following lemma plays a crucial role in constructing non - vanishing circulations in grid graphs as will be described in the next section .",
    "_ block decomposition of circulations : _ the absolute value of the circulation of a simple cycle @xmath20 in a grid graph @xmath14 is equal to the signed sum of the circulations of the blocks of the grid which lie in the interior of @xmath22 + @xmath23 [ blockdec ]    consider the summation on the right hand side . the weight of any edge in the _ interior _ of @xmath20 will get cancelled in the summation because that edge will occur in exactly two blocks which are adjacent and hence with opposite signs . now what remains are the boundary edges .",
    "call two boundary edges _ adjacent _ if they appear consecutively on the cycle @xmath20 .",
    "[ claim1 ] adjacent boundary edges get opposite signs in the summation on the right hand side above .",
    "we have to consider two cases , either the adjacent boundary edges lie on adjacent blocks , in which case since adjacent blocks have opposite signs , these edges will also get opposite signs as they are both vertical or horizontal edges .",
    "see figure  [ gridsignweight ] . in the other case ,",
    "when adjacent boundary edges do not lie on adjacent blocks , they lie on two blocks which are diagonally next to each other . in this case",
    ", both blocks will have the same sign but since one edge is vertical and the other is horizontal , the effective sign of the edges will be opposite .",
    "see figure  [ gridsignweight ] .",
    "hence , the adjacent boundary edges will get opposite sign in the summation .",
    "this completes the proof that the right hand side summation is precisely + @xmath24 or - @xmath25    [ cols=\"^,^ \" , ]     we will also have occasion to employ the following lemma and we record it here :    _ temperley s bijection : _ the spanning trees of a planar graph are in one to one correspondence with perfect matchings in a bipartite planar graph .",
    "moreover the correspondence is weight preserving .",
    "this bijection was first observed by temperley around 1967 .",
    "recently @xcite have found a _ generalized temperley bijection _ which gives a one - to - one weight preserving mapping between directed rooted spanning trees or arborescences in a directed planar graph and perfect matchings in an associated bipartite planar graph .",
    "grid graphs have turned out to be useful for solving the reachability question in directed planar graphs , cf .",
    "@xcite . motivated by this fact we explore the possibility of reducing planar matching problem to that of grid graphs .",
    "non - bipartiteness becomes an obstacle here which leaves us with the following observations :    one can convert any bipartite planar graph into a grid graph such that the perfect matchings remain in one - to - one correspondence .",
    "this is described in @xcite .",
    "it follows closely the procedure for embedding a planar graph into a grid , described by @xcite .    though non - bipartiteness is an issue , we can get rid of it to a certain extent , though as expected , not completely .    any planar graph , not necessarily",
    "bipartite , can be converted to an _ almost grid graph _ while maintaining the one to one correspondence between the perfect matchings .",
    "[ almost ]    this procedure is analogous to the previous one except that we can observe that the edges which are causing non bipartiteness can be elongated into a long path and placed in a grid so that only in a single row one needs to use a diagonal edge .",
    "in this section , we will give a simple algorithm for finding a perfect matching in bipartite planar graphs , also improving over its complexity by putting it in .",
    "earlier the best known bound was @xmath26 see for example @xcite . at the core of our algorithm , lies a procedure to deterministically assign the small ( logarithmic bit long ) weights to the edges of a bipartite planar graph , so that the minimum weight perfect matching becomes unique .",
    "a simple observation about non - vanishing circulations in bipartite planar graphs makes it possible to isolate a perfect matching in the graph , which can be further extracted out using an  query .",
    "we are interested in assigning the small weights to the edges of a grid so that any cycle in it will have non - zero circulation .",
    "this weighting scheme is at the heart of the isolation of perfect matchings in grid graphs .",
    "the procedure runs in logspace .",
    "one can assign , in logspace , small ( logarithmic bit ) weights to the edges of a grid so that circulation of any cycle becomes non - zero .",
    "( one weighting scheme which guarantees non - zero circulation for every cycle in the grid is shown in the figure  [ gridsignweight ] . )",
    "[ wt ]    we assign all vertical edges weight @xmath0 and horizontal edge from grid point @xmath27 to @xmath28 is assigned a weight of @xmath29 as shown in figure  [ gridsignweight ] .",
    "thus the circulation of the block with diagonally opposite vertices @xmath27 and @xmath30 is @xmath31 @xmath32 @xmath33    thus , the weighting scheme makes sure that the circulation of any block is either + @xmath1 or - @xmath34 moreover , the circulation of a block is positive if and only if its sign is positive .",
    "now , using the block decomposition of circulations ( lemma [ blockdec ] ) , we have that the circulation of any cycle in absolute value is precisely the number of blocks in the interior of it , and hence is never zero",
    ".      one can think of the procedure of assigning the weights to the edges of bipartite planar graph without having to convert it to a grid graph .",
    "the procedure is as follows :    * * step 1 : * _ make the graph eulerian ( every vertex has an even degree ) : _ add spurious edges to it without disturbing the bipartiteness . * * _ step 1.1 : _ perform an euler traversal on a spanning tree in the dual graph . * * _ step 1.2 : _ while performing the traversal , make sure that when you leave the face , all the vertices in the face , except for the end points of the edge through which we go to the next face , are of even degree . to guarantee this",
    "we can do the following : * * * _ step 1.2 a ) : _ start with one end point say @xmath35 of the edge @xmath36 through which we go to the next face .",
    "visit all the vertices of the face in a cyclic ordering , every time connect an odd degree vertex to the next vertex by a spurious edge . *",
    "* * _ step 1.2 b ) : _ if the next vertex is also of odd degree then go to its next vertex . if the next",
    "vertex is of even degree then we have pushed the oddness one step further . * * * _ step 1.2 c ) : _ continue the same procedure till we remove all the oddness or push it to @xmath37 * * * _ step 1.2 d ) : _ in the process , the graph might become a multi - graph i.e. between two nodes we may have multiple edges , but this can be taken care of by replacing every multi - edge by a path of length @xmath38 the bipartiteness is preserved in the process . * * step 2:*_fix the signs : _ after step 1 , the graph has become eulerian , and hence the dual graph is bipartite . * * _ step 2 a ) _ _ assign alternating signs to adjacent faces : _ form a bipartition of the dual , and fix all the faces in one bipartition to have + sign and the others to have - sign .",
    "any two adjacent faces will have opposite signs . here",
    ", faces will act as blocks . * * _ step 2 b ) _ _ assign alternating signs to adjacent edges of every face : _ consider an auxiliary graph obtained from the bipartite planar graph as follows : every new vertex corresponds to an edge in the graph .",
    "join two new vertices by a new edge iff the corresponding edges in the original graph are adjacent along some face .",
    "now since both the original graph and its dual are bipartite , the auxiliary graph will also be bipartite - hence edges in the two bipartitions get opposite signs ensuring that around every face the signs are alternating . * * step 3 : * _ assign small weights to the edges : _ now make another euler traversal on the dual tree everytime assigning the weight to the dual tree edge through which you traverse to the next face so that the circulation of the face you leave is exactly same as the sign of the face .",
    "all non - tree edges will be assigned zero weight .",
    "it is easy to see that all the weights assigned are small ( logarithmic bit ) .",
    "_ block decomposition of circulations : _ again , the circulation of a cycle will decompose into signed sum of circulations of the faces in the interior of it and since the sign and the circulation for any face is the same , we will have non - vanishing circulations in the graph .",
    "the details are analogous to the case of a grid .",
    "we leave the details to the reader .",
    "the non - vanishing circulations immediately give us the isolation for the perfect matchings .",
    "if all the cycles in a bipartite graph have non - zero circulations , then the minimum weight perfect matching in it is unique .",
    "if not , then we have two minimum weight perfect matchings @xmath39 and @xmath40 which will contain some alternating cycles , and each such cycle is of even length . consider any one such cycle .",
    "since the circulation of an even cycle is nonzero either the part of it which is in @xmath39 is lighter or the part of it which is in @xmath40 is lighter , in either case , we can form another perfect matching which is lighter than the minimum weight perfect matching , which is a contradiction .",
    "thus we have a deterministic way of isolating a perfect matching in bipartite planar graphs , and it is easy to check that the procedure of assigning the weights to the edges works in deterministic logspace .",
    "once we have isolated a perfect matching , one can extract it out easily as follows :    * * step 1 : * construct an @xmath10 matrix @xmath41 associated with a planar graph on @xmath7 vertices as follows : find a _ pfaffian orientation _ ( @xcite ) of the planar graph and put the @xmath27th entry of the matrix @xmath41 to be @xmath42 where @xmath43 is a variable and @xmath44 is the weight of the edge @xmath27 which is directed from @xmath45 to @xmath46 in the pfaffian orientation .",
    "if the edge is directed from @xmath46 to @xmath45 then put @xmath47 as @xmath48 entry of the matrix . *",
    "* step 2 : * if @xmath49 is the weight of the minimum weight perfect matching , then the coefficient of @xmath50 in determinant of @xmath41 will be the number of perfect matchings of weight @xmath51 now , as shown in @xcite this coefficient can be written as a determinant of another matrix . *",
    "* step 3 : * now start querying from @xmath52 to @xmath53 whether the coefficient of @xmath54 is zero or not and the first time you find that it is nonzero ; stop .",
    "the first nonzero value will occur when @xmath55 and it will be @xmath1 since the minimum weight perfect matching is unique . hence , during the process , every time we have a promise that if the determinant is non - zero , it is @xmath34 this procedure gives the weight of the minimum weight perfect matching .",
    "* * step 4 : * now once we know the procedure to find the weight of the minimum weight perfect matching , then one can find out which edges are in the matching by simply deleting the edge and again finding the weight of the minimum weight perfect matching in the remaining graph .",
    "if the edge is in the the isolated minimum weight perfect matching then after its deletion the weight of the new minimum weight perfect matching will increase . otherwise we can conclude that the edge is not in the isolated minimum weight perfect matching .",
    "note that the isolation holds even after deleting an edge from the graph .",
    "[ thm : main ] bipartite planar perfect matching is in .",
    "the logspace procedure in lemma [ wt ] assigns the small weights to the edges of the graph so that the minimum weight perfect matching is unique and the above procedure extracts it out in @xmath56    we obtain the following corollaries .",
    "[ cor1 ]  in bipartite planar graphs is in .    to check whether the graph has unique perfect matching",
    ", one can construct one perfect matching and check that after removing any edge of it there is no other perfect matching .",
    "[ cor2 ] minimum weight perfect matching in planar graphs with polynomially bounded weights is computable in .    one can first scale the polynomially bounded weights by some large multiplicative factor , say @xmath57 and then perturb them using the weighting scheme described above so that some minimum weight matching with original weights remains minimum weight matching with new weights and is unique .",
    "then extraction can be done in .",
    "minimum weight spanning tree in planar graphs is computable in  if the weights are polynomially bounded .",
    "( the same is true for directed rooted spanning trees ( arborescences ) in planar graphs due to generalized temperley s bijection shown in @xcite . )",
    "this follows from temperley s bijection .    restricting the family of planar graphs , yields better upper bounds for matching questions .",
    "notably , we prove that :    [ cor4](of theorem  [ thm : main ] ) perfect matching in outerplanar graphs is in .",
    "[ outerplanar ]    if we have an outerplanar(1-page ) graph on @xmath7 vertices with vertices labelled from @xmath1 to @xmath7 along the spine , then observe that the edges between two odd labelled vertices can not be part of any perfect matching .",
    "this is because the number of vertices below that edge is odd .",
    "similarly edges between two even labelled vertices can not participate in any perfect matching .",
    "hence , by removing such edges we can make the graph bipartite and then we can apply the previous theorem .",
    "we use the lemma below in order to prove the theorem that follows it .",
    "[ lemma : parop ] the parity of the number of perfect matchings in an outerplanar graph can be computed in logspace .    it is not hard to observe that the parity of the determinant of the adjacency matrix of a graph is the same as the parity of number of perfect matchings in it . finding the parity of the adjacency matrix of an outerplanar graph can be reduced to finding the parity of the number of spanning trees in an auxiliary planar graph which is constructed by adding a new vertex and connecting it to all the odd degree vertices of the original graph .",
    "the new graph has all the vertices of even degree .",
    "hence the adjacency matrix of the new graph is the same as its laplacian modulo @xmath58 now the minor obtained by removing the row and the column corresponding to the new vertex , is precisely the adjacency matrix of the original outerplanar graph modulo @xmath58 also the determinant(mod @xmath59 ) of this minor is precisely the parity of the spanning trees in new graph .",
    "as shown in @xcite , the parity of spanning trees modulo @xmath59 in planar graphs can be computed in logspace .",
    "hence , the parity of the determinant of the adjacency matrix of an outerplanar graph can be obtained in logspace which in turn gives the parity of the number of perfect matchings in it .",
    "[ thm : op ]  in outerplanar graphs is in logspace .",
    "if the perfect matching in an outerplanar graph is unique , one can obtain one perfect matching in logspace . for every edge",
    ", one just needs to compute the parity of the number of perfect matchings in the graph with that particular edge removed .",
    "if this parity is @xmath1 then do nt include this edge in the perfect matching , otherwise do .",
    "now we just need to verify that the perfect matching thus constructed is unique .",
    "as seen in corollary  [ outerplanar ] we can assume that the outerplanar graph is bipartite .",
    "now , if we consider an auxiliary directed graph obtained from this outerplanar graph by putting a directed edge starting from a vertex and ending in another vertex after following a matching edge starting at the vertex and then a non - matching edge from there , then , this auxiliary graph will have a directed cycle if and only if the matching we start with is not unique .",
    "it is possible to show that the auxiliary graph is outerplanar .",
    "finally , since the reachability in directed outerplanar graphs is in logspace ( @xcite ) , we have that  in outerplanar graphs is in logspace .",
    "we saw in section [ isolation ] that a perfect matching in bipartite planar graphs can be isolated by assigning small weights to the edges . in this section",
    "we discuss the possibility of generalizing this result in two orthogonal directions . for non - bipartite planar graphs and for bipartite but non - planar graphs .",
    "the motivation is to isolate a perfect matching in a graph by having non - zero circulation on it .",
    "though non - bipartiteness is an issue , we can get rid of it to a certain extent , though as expected , not completely .    perfect matching problem in general planar graphs reduces to that of almost grid graphs .",
    "now it suffices to get a non - vanishing circulations in almost grid graphs to solve planar matching question .",
    "unfortunately we do nt yet know any way of achieving this though we have some observations which might be helpful .",
    "one can have non - zero circulations for all the even cycles in the graph in the figure  [ onerow ] .",
    "( the graph is simply one row of the grid with diagonals . )",
    "observe that any even cycle in such a graph will either fall in the grid or will fall in the grid formed by horizontal edge together with diagonal edges . now",
    ", its easy to assign the weights as shown in the figure  [ onerow ] so that all the horizontal edges get weight @xmath0 while vertical and diagonal edges get weights so that any cycle in vertical or diagonal grid has non - vanishing circulation .    in summary , non - bipartiteness seems to be an issue which is difficult to get around .",
    "hence , we keep the bipartiteness and next we explore the possibility of generalizing our result for non - planar graphs .      instead of looking at two dimensional grid",
    "we now consider three dimensional grids .",
    "the matching problem remains as hard as that for general bipartite graphs in this restriction as well .",
    "one can embed any bipartite graph in a three dimensional grid while preserving matchings .",
    "firstly , one can make the degree of the graph bounded by @xmath38 then one can use the third dimension to make the space for crossings in the graph .",
    "is the perfect matching problem for subgraphs of a three dimensional grid of height @xmath59 ( constant height in general ) in  ?",
    "the deterministic isolation of perfect matching is possible through non - vanishing circulations as seen in section [ isolation ] .",
    "is small ( log bit ) weight non - vanishing circulation possible in every bipartite graph ?",
    "we know that the reachability in directed planar graphs reduces to bipartite planar matching while the reachability in layered grid graphs reduces to the  question in the same @xcite .",
    "note that the isolation step in our algorithm works in logspace . solving the perfect matching question in bipartite planar graphs in logspace might be too strong to expect but at least one can ask the question about which would put layered grid graph reachability in logspace or giving an orthogonal bound for the same .",
    "is bipartite planar  in ?",
    "we saw how to isolate a perfect matching in bipartite planar graph .",
    "the isolation holds for maximum matching in bipartite planar graphs .",
    "however , we do not know how to extract out the maximum weight perfect matching in .",
    "is it possible to extract out the isolated maximum matching in   even for bipartite planar graphs ?",
    "finally , the question of constructing a perfect matching in planar graphs in  still remains open .",
    "we thank meena mahajan for useful discussion and comments on the preprint .",
    "widest - label d. grigoriev and m. karpinski .",
    "the matching problem for bipartite graphs with polynomially bounded permanent is in . in _ proceedings of 28th ieee conference on foundations of computer science , pages 166 - 172 .",
    "_ ieee computer society press , 1987 .",
    "richard karp , eli upfal , avi wigderson .",
    "constructing a perfect matching is in random .",
    "_ combinatorica , 6:35 - 48 _ , 1986 .",
    "gary miller and joseph naor .",
    "flow in planar graphs with multiple sources and sinks .",
    "_ siam journal of computing _ , 24:1002 - 1017 , 1995 .",
    "meena mahajan , kasturi varadarajan . a new  algorithm to find a perfect matching in planar and bounded genus graphs . in _ proceedings of the thirty - second annual acm symposium on theory of computing ( stoc ) _ , pages 351 - 357 , 2000 .",
    "ketan mulmuley , umesh vazirani , vijay vazirani .",
    "matching is as easy as matrix inversion .",
    "_ combinatorica _ , 7(1 ) : 105 - 131 , 1987 .",
    "vijay vazirani .",
    "algorithms for computing the number of perfect matchings in @xmath60free graphs and related problems .",
    "swat 1988 : 233 - 242 heribert vollmer , introduction to circuit complexity - a uniform approach ; texts in theoretical computer science .",
    "an eatcs series .",
    "springer verlag , 1999 ."
  ],
  "abstract_text": [
    "<S> we present a deterministic way of assigning small ( log bit ) weights to the edges of a bipartite planar graph so that the minimum weight perfect matching becomes unique . </S>",
    "<S> the _ isolation lemma _ as described in @xcite achieves the same for general graphs using a randomized weighting scheme , whereas we can do it deterministically when restricted to bipartite planar graphs . as a consequence , </S>",
    "<S> we reduce both decision and construction versions of the matching problem to testing whether a matrix is singular , under the promise that its determinant is @xmath0 or @xmath1 , thus obtaining a highly parallel algorithm for bipartite planar graphs . </S>",
    "<S> this improves the earlier known bounds of non - uniform  by @xcite and @xmath2 by @xcite . </S>",
    "<S> it also rekindles the hope of obtaining a deterministic parallel algorithm for constructing a perfect matching in non - bipartite planar graphs , which has been open for a long time . </S>",
    "<S> our techniques are elementary and simple . </S>"
  ]
}