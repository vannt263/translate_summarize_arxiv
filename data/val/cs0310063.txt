{
  "article_text": [
    "we introduce and study logic programs whose clauses are built of _ monotone cardinality atoms _ ( _ mc - atoms _ ) , that is , expressions of the form @xmath0 , where @xmath1 is a non - negative integer and @xmath2 is a finite set of propositional atoms .",
    "intuitively , @xmath0 is true in an interpretation @xmath3 if at least @xmath1 atoms in @xmath2 are true in @xmath3 .",
    "thus , the intended role for mc - atoms is to represent constraints on lower bounds of cardinalities of sets .",
    "we refer to programs with mc - atoms as _ mca - programs_. we are motivated in this work by the recent emergence and demonstrated effectiveness of logic programming extended with means to model cardinality constraints @xcite , and by the need to develop sound theoretical basis for such formalisms .",
    "in the paper , we develop a theory of mca - programs . in",
    "that we closely follow the development of normal logic programming and lift all its major concepts , techniques and results to the setting of mca - programs",
    ". there is , however , a basic difference .",
    "mc - atoms have , by their very nature , a built - in nondeterminism .",
    "they can be viewed as shorthands for certain disjunctions and , in general , there are many ways to make an mc - atom @xmath0 true .",
    "this nondeterminism has a key consequence .",
    "the one - step provability operator is no longer deterministic , as in normal logic programming , where it maps interpretations to interpretations . in the case of mca - programs ,",
    "the one - step provability operator is nondeterministic .",
    "it assigns to an interpretation @xmath3 a _ set _ of interpretations , each regarded as possible and equally likely outcomes of applying the operator to @xmath3 .",
    "modulo this difference , our theory of mca - programs parallels that of normal logic programs .",
    "first , we introduce _ models _ and _ supported _ models of an mca - program and describe them in terms of the one - step provability operator in much the same way it is done in normal logic programming . to define _ stable _ models we first define the class of _ horn _ mca - programs by disallowing the negation operator in the bodies of clauses .",
    "we show that the nondeterministic one - step provability operator associates with horn mca - programs a notion of a ( nondeterministic ) computation ( the counterpart to the bottom - up computation with normal horn programs ) and a class of _ derivable models _ ( counterparts to the least model of a normal horn program ) . we then lift the notion of the gelfond - lifschitz reduct @xcite to the case of mca - programs and define a stable model of an mca - program as a set of atoms that is a derivable model of the reduct .",
    "a striking aspect of our construction is that all its steps are _ literal _ extensions of the corresponding steps in the original approach .",
    "we show that stable models behave as expected .",
    "they are supported and , in case of horn mca - programs , derivable .",
    "an intended meaning of an mc - atom @xmath4 is that @xmath5 be true .",
    "more formally , @xmath4 is true in an interpretation if and only if @xmath5 is true in that interpretation . that connection implies a natural representation of normal logic programs as mca - programs .",
    "we show that this representation preserves all semantics we discuss in the paper .",
    "it follows that the formalism of mca - programs can be viewed as a direct generalization of normal logic programming .",
    "as we noted , an extension of logic programming with direct ways to model cardinality constraints was first proposed in @xcite .",
    "that work defined a syntax of logic programs with cardinality constraints ( in fact , with more general _ weight constraints _ ) and introduced the notion of a _",
    "stable model_. we will refer to programs in that formalism as _ nss - programs_. one of the results in @xcite showed that nss - programs generalized normal logic programming with the stable - model semantics of gelfond and lifschitz @xcite . however , the notion of the reduct underlying the definition of a stable model given in @xcite is different from that proposed by gelfond and lifschitz @xcite and the precise nature of the relationship between normal logic programs and nss - programs was not clear .",
    "mca - programs explicate this relationship .",
    "we show that the formalism of mca - programs parallels normal logic programming .",
    "in particular , major concepts , results and techniques in normal logic programming have counterparts in the setting of mca - programs .",
    "we also prove that under some simple transformations , nss - programs are equivalent to mca - programs . through this connection",
    ", the theory of normal logic programming can be lifted to the setting of nss - programs leading to new characterizations of stable models of nss - programs .",
    "finally , we show that mca - programs not only provide an overarching framework for both normal logic programs and nss - programs .",
    "they are also useful in investigating disjunctive logic programs . in the paper , we show that logic programming with mc - atoms generalize disjunctive logic programming with the possible - model semantics introduced in @xcite .",
    "let @xmath6 be a set of ( propositional ) _ atoms_. an _ mc - atom over @xmath6 _",
    "( short for a _ monotone cardinality atom over @xmath6 _ ) is any expression of the form @xmath7 , where @xmath1 is a non - negative integer and @xmath8 is a _",
    "finite _ set such that @xmath9 .",
    "we call @xmath2 the _ atom set _ of an mc - atom @xmath10 and denote it by @xmath11",
    ". an intuitive reading of an mc - atom @xmath7 is : _ at least @xmath1 atoms in @xmath2 are true_. the intended meaning of @xmath0 explains the requirement that @xmath12 . clearly , if @xmath13 , it is impossible to have in @xmath2 at least @xmath1 true atoms and the expression @xmath0 is equivalent to a contradiction .",
    "an _ mc - literal _ is an expression of the form @xmath14 or @xmath15 , where @xmath14 is an mc - atom .",
    "mca - clause _",
    "( short for a _ monotone - cardinality - atom clause _ ) is an expression @xmath16 of the form @xmath17 where @xmath18 is an mc - atom and @xmath19 , @xmath20 , are mc - literals .",
    "we call the mc - atom @xmath18 the _ head _ of @xmath16 and denote it by @xmath21 .",
    "we call the set @xmath22 the _ body _ of @xmath16 and denote it by @xmath23 .",
    "an mca - clause is _ horn _ if its body does not contain literals of the form @xmath15 . finally ,",
    "for an mca - clause @xmath16 , we define the _ head set _ of @xmath16 , @xmath24 , by setting @xmath25 .",
    "mca - clauses form _ mca - programs_. we define the _ head set _ of an mca - program @xmath26 , @xmath27 , by @xmath28 ( if @xmath29 , @xmath30 , as well ) .",
    "if all clauses in an mca - program @xmath26 are horn , @xmath26 is a _ horn _ mca - program .",
    "one can give a declarative interpretation to mca - programs in terms of a natural extension of the semantics of propositional logic .",
    "we say that a set @xmath3 of atoms _ satisfies _ an mc - atom @xmath7 if @xmath31 , and @xmath3 _ satisfies _ an mc - literal @xmath32 if it does not satisfy @xmath7 ( that is , if @xmath33 ) .",
    "a set of atoms @xmath3 satisfies an mca - clause ( [ clause ] ) if @xmath3 satisfies @xmath18 whenever @xmath3 satisfies all literals @xmath19 , @xmath20 .",
    "finally , a set of atoms @xmath3 satisfies an mca - program @xmath26 if it satisfies all clauses in @xmath26 .",
    "we often say `` is a model of '' instead of `` satisfies '' .",
    "we use the symbol @xmath34 to denote the satisfaction relation .",
    "the following straightforward property of mc - atoms explains the use of the term `` monotone '' in their name .",
    "[ mono ] let @xmath14 be an mc - atom over a set of atoms @xmath6 .",
    "for every sets @xmath35 , if @xmath36 and @xmath37 then @xmath38 .",
    "mca - clauses also have a procedural interpretation in which they are viewed as derivation rules .",
    "intuitively , if an mca - clause @xmath16 has its body satisfied by some set of atoms @xmath3 , then @xmath16 provides _ support _ for deriving from @xmath3 any set of atoms @xmath39 such that    1 .",
    "@xmath39 consists of atoms mentioned in the head of @xmath16 ( @xmath16 provides no grounds for deriving atoms that do not appear in its head ) 2 .   @xmath39 satisfies the head of @xmath16 ( since @xmath16 `` fires '' , the constraint imposed by its head must hold ) .    clearly , the process of deriving @xmath39 from @xmath3 by means of @xmath16 is _ nondeterministic _ in the sense that , in general , there are several sets that are supported by @xmath16 and @xmath3 .",
    "this notion of nondeterministic derivability extends to programs and leads to the concept of the nondeterministic one - step provability operator .",
    "let @xmath26 be an mca - program and let @xmath40 be a set of atoms .",
    "we set @xmath41 .",
    "we call mca - clauses in @xmath42 , _",
    "@xmath3-applicable_.    let @xmath26 be an mca - program and let @xmath40 .",
    "a set @xmath39 is _ nondeterministically one - step provable _ from @xmath3 by means of @xmath26 , if @xmath43 and @xmath44 , for every mca - clause @xmath16 in @xmath42 .",
    "the _ nondeterministic one - step provability operator _ @xmath45 , is a function from @xmath46 to @xmath47 and such that for every @xmath48 , @xmath49 consists all sets @xmath39 that are nondeterministically one - step provable from @xmath3 by means of @xmath26 .",
    "as we indicate next , for every @xmath40 , @xmath49 is nonempty .",
    "it follows that @xmath45 can be viewed as a formal representation of a _",
    "operator on @xmath46 , which assigns to every subset @xmath3 of @xmath6 a subset of @xmath6 arbitrarily selected from the collection @xmath49 of possible outcomes .",
    "since @xmath49 is nonempty , this nondeterministic operator is well defined .",
    "[ ok ] let @xmath26 be an mca - program and let @xmath40 .",
    "then , @xmath50 .",
    "in particular , @xmath51 .    the operator @xmath45 plays a fundamental role in our research .",
    "it allows us to formalize procedural interpretations of mca - clauses and identify for them matching classes of models that provide the corresponding declarative account .",
    "our first result characterizes models of mca - programs .",
    "this characterization is a generalization of the familiar description of models of normal logic programs as prefixpoints of @xmath52 .",
    "[ model ] let @xmath26 be an mca - program and let @xmath40 .",
    "the set @xmath3 is a model of @xmath26 if and only if there is @xmath53 such that @xmath54 .    a straightforward corollary states that every mca - program has a model .",
    "let @xmath26 be an mca - program .",
    "then , @xmath27 is a model of @xmath26 .    models of mca - programs may contain elements that have no support in a program and the model itself .",
    "for instance , let us consider an mca - program @xmath26 consisting of the clause : @xmath55 , where @xmath56 and @xmath57 are two different atoms .",
    "let @xmath58 .",
    "clearly , @xmath59 is a model of @xmath26 .",
    "however , @xmath59 has no support in @xmath26 and itself .",
    "indeed , @xmath60 and so , @xmath26 and @xmath59 do not provide support for any atom .",
    "similarly , another model of @xmath26 , the set @xmath61 , where @xmath62 is an atom different from @xmath56 and @xmath57 , has no support in @xmath26 and itself .",
    "we have @xmath63 and so , @xmath56 has support in @xmath26 and @xmath64 , but @xmath16 does not .",
    "finally , the set @xmath65 , which is also a model of @xmath26 , _ has support _ in @xmath26 and itself .",
    "indeed , @xmath66 and there is a way to derive @xmath67 from @xmath26 and @xmath67 . we formalize now this discussion in the following definition .",
    "[ supp ] let @xmath26 be an mca - program .",
    "a set of atoms @xmath3 is a _ supported model _ of @xmath26 if @xmath68 .",
    "the use of the term `` model '' is justified . by theorem [ model ] , supported models of @xmath26 are indeed models of @xmath26 , as stated in the following result .    every supported model of an mca - program @xmath26 is a model of @xmath26 .",
    "finally , we have the following characterization of supported models .",
    "[ ch - sup ] let @xmath26 be an mca - program . a set @xmath69 is a supported model of @xmath26 if and only if @xmath3 is a model of @xmath26 and @xmath70 .",
    "to introduce _ stable _ models of mca - programs , we need first to study horn mca - programs . with each horn mca - program @xmath26",
    "one can associate the concept of a _",
    "@xmath26-computation_. namely , a _",
    "@xmath26-computation _ is a sequence @xmath71 such that @xmath72 and , for every non - negative integer @xmath73 ,    1 .",
    "@xmath74 , and 2 .",
    "@xmath75 .    given a computation @xmath76 , we call @xmath77 the _ result _ of the computation @xmath78 and denote it by @xmath79 .    [ head ]",
    "let @xmath26 be a horn mca - program and let @xmath78 be a @xmath26-computation",
    ". then @xmath80 .",
    "if @xmath26 is a horn mca - program then @xmath26-computations exist .",
    "let @xmath3 be a model of @xmath26 .",
    "we define the sequence @xmath81 as follows .",
    "we set @xmath82 and , for every @xmath83 , @xmath84 .",
    "[ comp ] let @xmath26 be a horn mca - program and let @xmath40 be its model .",
    "the sequence @xmath85 is a @xmath26-computation .",
    "we call the @xmath26-computation @xmath85 the _ canonical _ @xmath26-computation for @xmath3 . since every mca - program @xmath26 has models , we obtain the following corollary",
    ".    every horn mca - program has at least one computation .",
    "the results of computations are supported models ( and , thus , also models ) of horn mca - programs .",
    "[ p.model ] let @xmath26 be a horn mca - program and let @xmath78 be a @xmath26-computation .",
    "then , the result of @xmath78 , @xmath79 , is a supported model of @xmath26 .",
    "we use the concept of a computation to identify a certain class of models of horn mca - programs .",
    "let @xmath26 be a horn mca - program .",
    "we say that a set of atoms @xmath3 is a _",
    "derivable model _ of @xmath26 if there exists a @xmath26-computation @xmath78 such that @xmath86 .",
    "derivable models can be obtained as results of their own canonical computations .",
    "let @xmath3 be a derivable model of a horn mca - program @xmath26 .",
    "then @xmath87 .",
    "proposition [ p.model ] and theorem [ comp ] entail several properties of horn mca - programs , their computations and models .",
    "we gather them in the following corollary .",
    "[ p.sum ] let @xmath26 be a horn mca - program . then :    1 .",
    "@xmath26 has at least one derivable model .",
    "2 .   @xmath26 has a largest derivable model .",
    "3 .   every derivable model of @xmath26 is a supported model of @xmath26 .",
    "4 .   for every model @xmath3 of @xmath26",
    "there is a derivable model @xmath39 of @xmath26 such that @xmath54 .",
    "every minimal model of @xmath26 is derivable .",
    "we will now use the results of the two previous sections to introduce and study the class of _ stable _ models of mca - programs .",
    "[ d - stable ] let @xmath26 be an mca - program and let @xmath40 .",
    "the _ reduct _ of @xmath26 with respect to @xmath3 , @xmath88 in symbols , is a horn mca - program obtained from @xmath26 by ( 1 ) removing from @xmath26 every clause containing in the body a literal @xmath15 such that @xmath37 , and ( 2 ) removing all literals of the form @xmath15 from all remaining clauses in @xmath26 .",
    "a set of atoms @xmath3 is a _",
    "stable _ model of @xmath26 if @xmath3 is a derivable model of the reduct @xmath88 .",
    "stable models of an mca - program @xmath26 are indeed models of @xmath26 . thus , the use of the term `` model '' in their name is justified .",
    "in fact , a stronger property holds : stable models of mca - programs are supported .",
    "[ m - stable ] let @xmath26 be an mca - program .",
    "if @xmath40 is a stable model of @xmath26 then @xmath3 is a supported model of @xmath26 .    with the notion of a stable model in hand",
    ", we can strengthen proposition [ p.model ] .",
    "[ der - stb ] let @xmath26 be a horn mca - program .",
    "a set of atoms @xmath40 is a derivable model of @xmath26 if and only if @xmath3 is a stable model of @xmath26 .",
    "we will now describe a procedural characterization of stable models of mca - programs , relying on a notion of a computation related to but different from the one we discussed in section [ horn ] in the context of horn programs .",
    "a difference is that now at each stage in a computation we must make sure that once a clause is applied , it remains applicable at _ any _ stage of the process .",
    "it is not _ a priori _ guaranteed due to the presence of negation in the bodies of general mca - clauses .",
    "a formal definition is as follows .",
    "let @xmath26 be an mca - program .",
    "a sequence @xmath89 is a _",
    "quasi @xmath26-computation _ , if @xmath90 and if for every @xmath91 there is a clause @xmath92 such that    1 .",
    "2 .   there is @xmath94 such that @xmath95 and @xmath96 ( this @xmath2 is what is `` computed '' by applying @xmath97 ) .",
    "3 .   for every @xmath98 and for every",
    "mc - atom @xmath0 occurring negated in @xmath99 , @xmath100 .",
    "we call the set @xmath101 the _ result _ of the quasi @xmath26-computation @xmath102 .",
    "[ sta - comp ] a set of atoms @xmath3 is a stable model of @xmath26 if and only if @xmath3 is a model of @xmath26 and for some quasi @xmath26-computation @xmath102 , @xmath3 is the result of @xmath102 .",
    "theorem [ sta - comp ] states that if we apply clauses _ carefully _ , making sure that at no stage we satisfy an mc - atom appearing negated in clauses applied so far ( including the one selected to apply at the present stage ) and we ever compute a model in this way , then this model is a stable model of @xmath26 .",
    "conversely , every stable model can be obtained as a result of such a _ careful _ computation .",
    "we can extend the language of mca - programs by allowing clauses with the empty head .",
    "namely , we define a _ constraint mca - clause _ to be an expression @xmath16 of the form @xmath103 where @xmath19 , @xmath20 , are mc - literals .",
    "the notion of satisfiability that we introduced for mca - clauses extends to the case of mca - constraints .",
    "a set of atoms @xmath3 _ satisfies _ a constraint @xmath16 if there is a literal @xmath104 such that @xmath105 .",
    "we can now extend the definitions of supported and stable models to the more general class of mca - programs with constraint mca - clauses as follows .",
    "let @xmath26 be an mca - program with constraint mca - clauses .",
    "a set of atoms @xmath3 is a _ supported _ ( _ stable _ ) model of @xmath26 if @xmath3 is a supported ( stable ) model of @xmath106 , where @xmath106 consists of all non - constraint mca - clauses in @xmath26 , and if @xmath3 is a model of all constraint mca - clauses in @xmath26 .",
    "let us observe that several of our earlier results such as proposition [ m - stable ] and theorem [ sta - comp ] lift _ verbatim _ to the case of programs with constraints .",
    "an mc - atom @xmath4 is true in a model @xmath3 if and only if @xmath5 is true in @xmath3 .",
    "thus , intuitively , @xmath4 and @xmath5 are equivalent .",
    "that suggests a way to interpret normal clauses and programs as mca - clauses and mca - programs .",
    "let @xmath107 by @xmath108 we mean the mc - clause @xmath109 ( if all @xmath110 and all @xmath111 are distinct , which we can assume without loss of generality , a simpler translation , @xmath112 , could be used . )",
    "moreover , given a normal program @xmath26 , we set @xmath113 .",
    "this encoding interprets normal logic programs as mca - programs so that basic properties and concepts of normal logic programming can be viewed as special cases of properties and concepts in mca - programming . in the following theorem",
    ", we gather several results establishing appropriate correspondences .",
    "[ lp - mca ] let @xmath26 be a normal logic program and let @xmath3 be a set of atoms .    1 .",
    "@xmath26 is a horn program if and only if @xmath114 is a horn mca - program .",
    "if @xmath26 is a horn program then the least model of @xmath26 is the only derivable model of @xmath114 .",
    "3 .   @xmath115 .",
    "4 .   @xmath116 .",
    "5 .   @xmath3 is a model ( supported model , stable model ) of @xmath26 if and only if @xmath3 is a model ( supported model , stable model ) of @xmath114 .",
    "finally , we identify a class of mca - programs , which offers a most direct generalization of normal logic programming .",
    "[ det ] an mca - clause @xmath16 is _ deterministic _ if @xmath117 , for some atom @xmath5 .",
    "an mca - program is _ deterministic _ if every clause in @xmath26 is deterministic .",
    "the intuition behind the term is clear .",
    "if the head of an mca - clause is of the form @xmath4 , then there is only one possible effect of applying the clause : @xmath5 has to be concluded .",
    "thus , the nondeterminism that arises in the context of arbitrary mc - atoms disappears .",
    "formally , we capture this property in the following result .",
    "[ det1 ] let @xmath26 be a deterministic mca - program .",
    "then , for every set of atoms @xmath3 , @xmath118 , for some set of atoms @xmath39 .    thus , for a deterministic mca - program @xmath26 , the operator @xmath45 is deterministic and , so , can be regarded as an operator with both the domain and codomain @xmath46 .",
    "we will write @xmath119 , to denote it .",
    "models , supported models and stable models of a deterministic mca - program can be introduced in terms of the operator @xmath119 in exactly the same way the corresponding concepts are defined in normal logic programming . in particular",
    ", the algebraic treatment of logic programming developed in @xcite applies literally to deterministic mca - programs and results in a natural and direct extension of normal logic programming .",
    "we will explicitly mention just one result here that will be of importance later in the paper .",
    "[ horn - det ]",
    "let @xmath26 be a deterministic horn program .",
    "then @xmath26 has exactly one derivable model and this model is the least model of @xmath26 .",
    "we will first briefly review the concept of an nss - program @xcite , the semantics of stable models of such programs , as introduced in @xcite , and then relate this formalism to that of mca - programs .",
    "a _ cardinality atom _ ( c - atom , for short ) is an expression of the form @xmath120 , where @xmath8 , and @xmath121 and @xmath1 are integers such that @xmath122 .",
    "we call @xmath2 an _ atom set _ of a c - atom @xmath123 and , as before , we denote it by @xmath11 .",
    "one can eliminate occurrences of negative literals by introducing new atoms .",
    "thus , for this work , we decided to restrict the syntax of nss - programs . ] .",
    "we say that a set of atoms @xmath3 satisfies a c - atom @xmath120 if @xmath124 or @xmath125 , the corresponding inequality is trivially true .",
    "thus , we omit from the notation @xmath1 , if equal to 0 , and @xmath121 , if equal to @xmath126 .    a _ cardinality - atom clause _ ( ca - clause , for short ) is an expression @xmath16 of the form @xmath127 where @xmath14 and @xmath128 , @xmath129 , are c - atoms .",
    "we call @xmath14 the head of @xmath16 and @xmath130 the _ body _ of @xmath16 .",
    "we denote them by @xmath21 and @xmath23 , respectively .",
    "ca - program _ is a collection of ca - clauses .",
    "we say that a set @xmath40 _ satisfies _ a ca - clause @xmath16 if @xmath3 satisfies @xmath21 whenever it satisfies each c - atom in the body of @xmath16 .",
    "we say that @xmath3 satisfies a ca - program @xmath26 if @xmath3 satisfies each ca - clause in @xmath26 .",
    "we write @xmath131 and @xmath132 in these cases , respectively .",
    "we will now recall the concept of a stable model of a ca - program @xcite .",
    "let @xmath26 be an nss - program and let @xmath40 . by the _ nss - reduct _ of @xmath26 with respect to @xmath3 we mean the nss - program obtained by :    1",
    ".   eliminating from @xmath26 every clause @xmath16 such that @xmath133 , for at least one c - atom @xmath134 .",
    "2 .   replacing each remaining ca - clause @xmath135 with all clauses of the form @xmath136 , where @xmath137 .    with some abuse of notation ,",
    "we denote the resulting program by @xmath88 ( the type of the program determines which reduct we have in mind ) .",
    "it is clear that @xmath88 is a deterministic horn mca - program .",
    "thus , it has a least model , @xmath138 .",
    "[ def - nss ]",
    "let @xmath26 be a ca - program .",
    "a set @xmath40 is a _ stable model _ of @xmath26 if @xmath139 and @xmath132 .",
    "we will now show that the formalisms of mca - programs and ca - programs with their corresponding stable - model semantics are equivalent .",
    "we start by describing an encoding of ca - clauses and ca - programs by mca - clauses and mca - programs . to simplify the description of the encoding and",
    "make it uniform , we assume that all bounds are present ( we recall that whenever any of the bounds are missing from the notation , they can be introduced back ) . let @xmath16 be the following ca - clause : @xmath140 we represent this ca - clause by a pair of mca - clauses , @xmath141 and @xmath142 that we define as the following two mca - clauses , respectively : @xmath143 and @xmath144 given a ca - program @xmath26 , we translate it into an mca - program @xmath145    [ ca - mca ] let @xmath26 be a ca - program .",
    "a set of atoms @xmath3 is a stable model of @xmath26 , as defined for ca - programs , if and only if @xmath3 is a stable model of @xmath146 , as defined for mca - programs .",
    "this theorem shows that the formalism of mca - programs is at least as expressive as that of ca - programs .",
    "the converse is true as well : ca - programs are at least as expressive as mca - programs .",
    "let @xmath16 be the following mca - clause : @xmath147 we define @xmath148 as follows . if there is @xmath149 , @xmath129 , such that @xmath150 , we set @xmath151 ( in fact any tautology would do ) . otherwise , we set @xmath152 given an mca - program @xmath26 , we define @xmath153 .",
    "[ mca - ca ] let @xmath26 be an mca - program .",
    "a set of atoms @xmath3 is a stable model of @xmath26 , as defined for mca - programs , if and only if @xmath3 is a stable model of @xmath154 , as defined for ca - programs .",
    "theorems [ ca - mca ] and [ mca - ca ] establish the equivalence of ca - programs and mca - programs with respect to the stable model semantics .",
    "the same translations also preserve the concept of a model .",
    "finally , theorem [ ca - mca ] suggests a way to introduce the notion of a supported model for a ca - program : a set of atoms @xmath3 is defined to be a _ supported _ model of a ca - program @xmath26 if it is a supported model of the mca - program @xmath146 . with this definition , the two translations @xmath155 and @xmath156",
    "also preserve the concept of a supported model .",
    "we also note that this equivalence demonstrates that ca - programs with the semantics of stable models as defined in @xcite can be viewed as a generalization of normal logic programming .",
    "it follows from theorems [ lp - mca ] and [ mca - ca ] that the encoding of normal logic programs as ca - programs , defined as the composition of the translations @xmath157 and @xmath156 , preserves the semantics of models , supported models and stable models ( an alternative proof of this fact , restricted to the case of stable models only was first given in @xcite and served as a motivation for the class of ca - programs and its stable - model semantics ) .",
    "this result is important , as it is not at all evident that the nss - reduct and definition [ def - nss ] generalize the semantics of stable models as defined in @xcite .    given that the formalisms of ca - atoms and mca - atoms are equivalent , it is important to stress what differs them .",
    "the advantage of the formalism of ca - programs is that it does not require the negation operator in the language .",
    "the strength of the formalism of mca - programs lies in the fact that its syntax so closely resembles that of normal logic programs , and that the development of the theory of mca - programs so closely follows that of the normal logic programming .",
    "the formalism of mca - programs also extends an approach to disjunctive logic programming , proposed in @xcite . in that paper",
    ", the authors introduced and investigated a semantics of _ possible models _ for disjunctive logic programs .",
    "we will now show that disjunctive programming with the semantics of possible models is a special case of the logic mca - programs with the semantics of stable models .",
    "let @xmath16 be a disjunctive logic program clause of the form : @xmath158 where all @xmath110 , @xmath111 and @xmath159 are atoms .",
    "we define an mca - clause @xmath160 for a disjunctive logic program @xmath26 , we define @xmath161 .",
    "we have the following theorem .",
    "let @xmath26 be a disjunctive logic program .",
    "a set of atoms @xmath3 is a possible model of @xmath26 if and only if @xmath3 is a stable model of the mca - program @xmath162 .",
    "we also note that there are strong analogies between the approach we propose here and some of the techniques discussed in @xcite .",
    "in particular , @xcite presents a computational procedure for disjunctive programs without negation that is equivalent to our notion of a @xmath26-computation .",
    "we stress however , that the class of mca - programs is more general and that our approach , consistently exploiting properties of an operator @xmath45 , is better aligned with a standard development of normal logic programming .",
    "results of our paper point to a central position of mca - programs among other logic programming formalisms . first , mca - programs form a natural generalization of normal logic programs , with most concepts and techniques closely patterned after their counterparts in normal logic programming .",
    "second , mca - programs with the stable - model semantics generalize disjunctive logic programming with the possible - model semantics of @xcite .",
    "third , mca - programs provide direct means to model cardinality constraints , a feature that has become broadly recognized as essential to computational knowledge representation formalisms .",
    "moreover , it turns out that mca - programs are , in a certain sense that we made precise in the paper , equivalent , to logic programs with cardinality atoms proposed and studied in @xcite .",
    "thus , mca - programs provide a natural link between normal logic programs and the formalism of @xcite , and help explain the nature of this relationship , hidden by the original definitions in @xcite .    in this paper",
    ", we outlined only the rudiments of the theory of mca - programs .",
    "there are several questions that follow from our work and that deserve more attention .",
    "first , our theory can be extended to the case of programs built of _ monotone - weight atoms _ , that is , expressions of the form @xmath163 , where @xmath5 , @xmath164 are non - negative reals and @xmath165 are propositional atoms .",
    "intuitively , such an atom is satisfied by an interpretation ( set of atoms ) @xmath3 if the sum of weights assigned to atoms in @xmath166 is at least @xmath5 .",
    "next , there is a question whether fages lemma @xcite generalizes to mca - programs .",
    "if so , for some classes of programs , one could reduce stable - model computation to satisfiability checking for propositional theories with cardinality atoms @xcite .",
    "that , in turn , might lead to effective computational methods , alternative to direct algorithms such as _ smodels _ @xcite and similar in spirit to the approach of _ cmodels _ @xcite .",
    "another interesting aspect concerns some syntactic modifications and `` normal form representations '' for mca - programs .",
    "for instance , at a cost of introducing new atoms , one can rewrite any mca - program into a _",
    "simple _ mca - program in which every mca - clause contains at most one mca - literal in its body and in which the use of negation is restricted ( but not eliminated ) .",
    "we will present these results in a full version of the paper .",
    "the emergence of a nondeterministic one - step provability operator is particularly intriguing .",
    "it suggests that , as in the case of normal logic programming @xcite , the theory of mca - programs can be developed by algebraic means . for that to happen",
    ", one would need techniques for handling nondeterministic operators on lattices , similar to those presented in the deterministic operators in @xcite .",
    "that approach might ultimately lead to a generalization of the well - founded semantics to the case of mca - programs .",
    "the second author was supported by the academy of finland grant 53695 .",
    "the other two authors were supported by the nsf grants iis-0097278 and iis-0325063 .",
    "m.  denecker , v.  marek , and m.  truszczyski .",
    "approximations , stable operators , well - founded fixpoints and applications in nonmonotonic reasoning . in j.",
    "minker , editor , _ logic - based artificial intelligence _ , pages 127144 .",
    "kluwer academic publishers , 2000 .",
    "m.  denecker , v.  marek , and m.  truszczyski .",
    "ultimate approximations in nonmonotonic knowledge representation systems . in _ principles of knowledge representation and reasoning , proceedings of the eighth international conference ( kr2002 ) _ , pages 177188 .",
    "morgan kaufmann publishers , 2002 .",
    "d.  east and m.  truszczyski .",
    "propositional satisfiability in answer - set programming . in _ proceedings of joint german / austrian conference on artificial intelligence ,",
    "ki2001 _ , volume 2174 , pages 138153 .",
    "lecture notes in artificial intelligence , springer verlag , 2001 .",
    "e.  erdem and v.  lifschitz . tight logic programs .",
    ", 3(4 - 5):499518 , 2003 .",
    "m.  gelfond and v.  lifschitz .",
    "the stable semantics for logic programs . in r.  kowalski and k.",
    "bowen , editors , _ proceedings of the 5th international conference on logic programming _ , pages 10701080 .",
    "mit press , 1988 .",
    "l.  liu and m.  truszczyski .",
    "local - search techniques in propositional logic extended with cardinality atoms . in _ proceedings of the ninth international conference on principles and practice of constraint programming , cp-2003_. lecture notes in computer science , springer verlag , 2003 .",
    "i.  niemel and p.  simons .",
    "extending the smodels system with cardinality and weight constraints . in j.",
    "minker , editor , _ logic - based artificial intelligence _ ,",
    "pages 491521 .",
    "kluwer academic publishers , 2000 .",
    "i.  niemel , p.  simons , and t.  soininen .",
    "stable model semantics of weight constraint rules . in _ proceedings of lpnmr-1999",
    "_ , volume 1730 of _ lecture notes in computer science _ , pages 317331 .",
    "springer - verlag , 1999 ."
  ],
  "abstract_text": [
    "<S> we investigate _ mca - programs _ , that is , logic programs with clauses built of monotone cardinality atoms of the form @xmath0 , where @xmath1 is a non - negative integer and @xmath2 is a finite set of propositional atoms . </S>",
    "<S> we develop a theory of mca - programs . </S>",
    "<S> we demonstrate that the operational concept of the one - step provability operator generalizes to mca - programs , but the generalization involves nondeterminism . </S>",
    "<S> our main results show that the formalism of mca - programs is a common generalization of ( 1 ) normal logic programming with its semantics of models , supported models and stable models , ( 2 ) logic programming with cardinality atoms and with the semantics of stable models , as defined by niemel , simons and soininen , and ( 3 ) of disjunctive logic programming with the _ possible - model _ semantics of sakama and inoue . </S>"
  ]
}