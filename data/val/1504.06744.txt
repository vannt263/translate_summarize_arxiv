{
  "article_text": [
    "two - player games played on graphs are nowadays a well - established model for systems where two antagonistic agents interact .",
    "in particular , they allow one to perform controller synthesis  @xcite , when one of the players models the controller , and the second plays the role of an evil environment .",
    "quantitative generalisations ( played on weighted graphs ) of these models have attracted much attention in the last decades  @xcite as they allow for a finer analysis of those systems .    in this",
    "setting , most results assume that the arena ( i.e. , the graph ) on which the game is played does not change during the game .",
    "there are however many situations where this restriction is not natural , at least from a modelling point of view .",
    "for instance , grner _",
    "@xcite model connectivity problems in _ dynamic _ networks ( i.e. , subject to failure and restoration ) using a variant of _ sabotage games _  a model originally proposed by van benthem @xcite  to model _ reachability problems _ in a network prone to errors .",
    "a sabotage game is played on a directed graph , and starts with a token in an initial vertex .",
    "then , and ( the two players of the game ) play in alternation : moves the token along one edge and is allowed to remove one edge . wins the game if he reaches a target set of vertices . in  @xcite , it is shown that deciding the existence of a winning strategy for is -complete .    in those sabotage games ,",
    "errors are regarded as unrecoverable failures . in practice",
    ", this hypothesis might be too strong .",
    "instead , one might want to model the fact that certain uncontrollable events incur additional costs ( modelling delays , resource usage  ) , and look for strategies that allow one to fulfil the game objective _ at a minimal cost _ , whatever the occurrence of uncontrollable events .",
    "for instance , if the graph models a railway network , the failure of a track will eventually be fixed , and , in the meantime , trains might be slowed down on the faulty portion or diverted , creating delays in the journeys .",
    "it is thus natural to consider _ quantitative _ extensions of sabotage games , where controls the price of the actions in the game .",
    "this is the aim of the present paper .",
    "more precisely , we extend sabotage games in two directions .",
    "first , we consider games played on _ weighted _ graphs .",
    "is allotted an integral budget @xmath2 that he can distribute ( dividing it into integral parts ) on the edges of the graph , thereby setting their weights . at each turn , can change this distribution by moving @xmath3 units of budget from an edge to another edge ( for simplicity , we restrict ourselves to @xmath4 but our results hold for any @xmath3 ) .",
    "second , we relax the inherent finiteness of sabotage games ( all edges will eventually be deleted ) , and consider infinite horizon games ( i.e. , plays are now infinite ) . in this setting , the goal of is to minimise the cost defined by the sequence of weights of edges visited , with respect to some fixed cost function ( @xmath5 , @xmath6 , @xmath7 , @xmath8 , average or discounted - sum ) , while attempts to maximise the same cost .",
    "we call these games _ quantitative sabotage games _",
    "( , for short ) .",
    "let us briefly sketch one potential application of our model , showing that they are useful to perform synthesis in a dynamic environment .",
    "our application is borrowed from suzuki and yamashita  @xcite who have considered the problem of _ motion planning _ of multiple mobile robots that interact in a finite space .",
    "in essence , each robot executes a `` look - compute - move '' cycle and should realise some specification ( that we could specify using ltl , for instance ) . for simplicity , assume that at every observation ( look ) phase , at most one other robot has moved . clearly",
    "every motion phase ( move ) will require different amounts of time and energy depending on the location of the other robots .",
    "we can model the interaction of each individual robot against all others using a where is one robot , is the coalition of all other robots , and the budget is equal to the number of robots minus @xmath9 .",
    "this model allows one to answer meaningful questions such as ` _ _ what is , in the worst case , the average delay the robot incurs because of the dynamics of the system ? _ _ ' , or ` _ _ what is the average amount of additional energy required because of the movements of the other robots ? _",
    "_ ' using appropriate cost functions .    as a second motivational example ,",
    "let us recall the motivation of the original sabotage game : consider a situation in which you need to find your way between two cities within a railway network where a malevolent demon starts cancelling connections ?",
    "this is called the _ real travelling salesman problem _ by benthem  @xcite . however , in real life , railway companies have contracts with infrastructure companies which ensure that failures in the railway network are repaired withing a given amount of time ( e.g. a service - level agreement ) . in this case , it is better to consider delays instead of absolute failures in the network .",
    "further , salesmen do not usually have one single trip in their whole carriers . for modelling purposes",
    ", one can in fact assume they never stop travelling . in this setting , can be used to answer the question : ` _ _ what is , in the worst case , the average delay time incurred by the salesman _",
    "our model can be used to treat the same questions for other networks and not just railway networks .",
    "[ [ related - works - contributions . ] ] related works & contributions .",
    "variations of the original sabotage games have been considered by students of van benthem . in  @xcite ,",
    "the authors have considered changing the _ reachability objective _ of to a _",
    "safety objective _ , and proved it is -complete as well .",
    "they also consider a co - operative variation of the game which , not surprisingly , leads to a lower complexity : -complete . in  @xcite , an asymmetric imperfect information version of the game",
    "is studied  albeit , under the guise of the well - known parlor game _",
    "scotland yard_and shown to be -complete .",
    "we remark that although the latter version of sabotage games already includes some sort of dynamicity in the form of the _ scotland yard _",
    "team moving their pawns on the board , both of these studies still focus on inherently finite versions of the game .",
    "we establish that are -complete in general .",
    "our approach is to prove the result for a very weak problem on , called the _ safety problem _",
    ", that asks whether can avoid _ ad vitam ternam _ edges with non - zero budget on it .",
    "we remark that although the safety problem is related to cops and robbers games  @xcite , we were not able to find -hard variants that reduce easily into our formalism .. ] the general problem being -complete , we consider the case where the budget is fixed instead of left as an input of the problem ( see corollary  [ cor : fixed ] ) .",
    "we also consider restricting the behaviour of and define a variation of our in which is only allowed to choose an initial distribution of weights but has to commit to it once he has fixed it .",
    "we call this the _",
    "static _ version of the game . for both restrictions , we show that tractable algorithms exist for some of the cost functions we consider . a summary of the complexity results we establish in this work is shown in table  [ tbl : summary ] . in section  [ sec : conclusions ] , we comment on several implications of the complexity bounds proved in this work .",
    ".complexity results for quantitative sabotage games [ cols=\"<,^,^,^\",options=\"header \" , ]     [ tbl : summary ]",
    "let us now formally define quantitative sabotage games ( ) .",
    "we start with the definition of the cost functions we will consider , then give the syntax and semantics of .",
    "[ [ cost - functions . ] ] cost functions .    a _ cost function _ @xmath10 associates a real number to a sequence of rationals @xmath11 .",
    "the six classical cost functions that we consider are    * @xmath12 ; * @xmath13 ; * @xmath14 ; * @xmath15 ; * @xmath16 , which stands for the average cost ( also called _",
    "mean - payoff _ in the literature ) ; and * @xmath17 , ( with @xmath18 ) , stands for discounted - sum .    in the following ,",
    "we let @xmath19 .    [ [ syntax . ] ] syntax .    as sketched in the introduction , _ quantitative sabotage games _ are played by and on a directed weighted graph , called the _",
    "arena_. a  play alternates between moving the token along the edges and modifying the weights .",
    "we consider that has a fixed integer budget  @xmath2 that he can distribute on edges , thereby setting their weights ( which must be integer values ) .",
    "formally , for a finite set @xmath20 and a budget @xmath21 , @xmath22 denotes the set of all _ distributions _ of budget @xmath2 on @xmath20 , where a distribution is a function @xmath23 such that @xmath24 ( the last constraint is an inequality since the whole budget need not be distributed on @xmath20 ) .",
    "then , a _ quantitative sabotage game _ is a tuple @xmath25 , where @xmath26 is a directed graph , @xmath27 is the budget of the game , @xmath28 is the initial vertex , @xmath29 is the initial distribution of the budget , and @xmath30 is a cost function . we assume , without loss of generality , that there are no deadlocks in @xmath26 , i.e. , for all @xmath31 , there is @xmath32 such that @xmath33 . in the following ,",
    "we may alternatively write @xmath34 for @xmath22 when @xmath35 is a with set of edges @xmath20 and budget @xmath2 .    [ [ semantics . ] ] semantics .    to define the semantics of a @xmath35",
    ", we first formalise the possible redistributions of the budget by .",
    "we choose to restrict them , reflecting some physical constraints : can move at most one unit of weight in - between two edges . for @xmath36 , we say that @xmath37 is a _ valid redistribution _ from @xmath38 , noted @xmath39 , if and only if there are @xmath40 such that @xmath41 , @xmath42 , and for all other edges @xmath43 , @xmath44 .",
    "then , a _ play _ in a @xmath25 is an infinite sequence @xmath45 alternating vertices @xmath46 and budget distributions @xmath47 such that    @xmath48 ;    @xmath49 ; and    for all @xmath50 : @xmath51 , and @xmath52 .",
    "let @xmath53 denote the set of prefixes of plays ending in a budget distribution , and @xmath54 the set of prefixes of length at least 2 ending in a vertex .",
    "we abuse notations and lift cost functions @xmath30 to plays letting @xmath55 .",
    "a _ strategy _ of is a mapping @xmath56 such that @xmath57 for all @xmath58 .",
    "a strategy of is a mapping @xmath59 such that @xmath60 for all @xmath61 .",
    "we denote by @xmath62 ( respectively , @xmath63 ) the set of all strategies of ( respectively , ) .",
    "a pair of strategies @xmath64 of and defines a unique play @xmath65 such that for all @xmath66 :    @xmath67 ; and    @xmath68 .",
    "[ [ values - and - determinacy . ] ] values and determinacy .",
    "we are interested in computing the best value that each player can guarantee no matter how the other player plays . to reflect this , we define two values of a @xmath35 : the superior value ( modelling the best value for ) as @xmath69 , and the inferior value ( modelling the best value for sabo - teur ) as @xmath70 .",
    "it is folklore to prove that @xmath71 .",
    "indeed , for the previously mentioned cost functions , we can prove that are determined , i.e. , that @xmath72 for all @xmath35 .",
    "this can be formally proved by encoding a @xmath35 into a quantitative two - player game @xmath73 ( whose vertices contain both vertices of @xmath35 and budget distributions ) , and then using classical martin s determinacy theorem  @xcite , as formally done in appendix  [ sec : qgames - sem ] .",
    "@xmath72 is henceforth called the _ value of @xmath35 _ , and denoted by @xmath74 .",
    "# 1    r0.2    \\(1 ) at ( 1,1 ) @xmath9 ; ( 2 ) at ( 1,0 ) @xmath75 ; ( 3 ) at ( 0,0.5 ) @xmath76 ;    \\(1 ) edge ( 2 ) ; ( 2 ) edge[bend right=40 ] ( 1 ) ; ( 2 ) edge ( 3 ) ; ( 3 ) edge ( 1 ) ;    [ [ example . ] ] example .",
    "consider the simple @xmath35 in  [ fig : example ] , where the budget of is @xmath77 , and the cost function is @xmath78 .",
    "we claim that whatever the initial configuration , @xmath79 .",
    "indeed , consider the strategy of that consists in eventually putting all the budget on the edge @xmath80 ( i.e. , letting @xmath81 and @xmath82 for all other edges @xmath83 ) , and then playing as follows : whenever reaches @xmath84 , move one unit of budget from @xmath80 to @xmath85 ; if moves to @xmath86 , move the unit of budget from @xmath85 to @xmath87 ; and when moves back to @xmath88 , move all the budget back on @xmath80 , by consuming one unit either from @xmath85 or from @xmath87 .",
    "let us call this strategy @xmath89 . since we consider the average cost , only the long - term behaviour of is relevant to compute the cost of a play .",
    "so , as soon as has managed to reach a distribution @xmath38 such that @xmath81 , the only choices for each time he visits are either to visit the  cycle , or the  cycle . in the former case ,",
    "traverses @xmath76 edges and pays @xmath90 , hence an average cost of @xmath91 for this cycle . in the latter",
    ", he pays an average of @xmath92 for the cycle .",
    "hence , whatever the strategy @xmath93 of , we have @xmath94 , which proves that @xmath95 .",
    "one can check that the strategy @xmath96 of consisting in always playing the  cycle indeed guarantees cost @xmath75 , proving that @xmath97 .",
    "this proves that the value @xmath74 of the game is @xmath75 .",
    "given a , our main objective is to determine whether can play in such a way that he will ensure a cost at most @xmath98 , no matter how plays , and where @xmath98 is a given threshold .",
    "this amounts to determining whether @xmath99 .",
    "thus , for a cost function @xmath30 , the threshold problem with cost function @xmath30 consists in determining whether @xmath99 , given a @xmath35 with cost function @xmath30 and a non - negative threshold @xmath98 . when @xmath100 , we assume that the discount factor @xmath101 is part of the input . if we want it to be a parameter of the problem ( and not a part of the input ) , we consider @xmath102 . our main contribution is to characterise the complexity of the threshold problem for all the cost functions introduced before , as summarised in the following theorem :    [ thm : exptime ] for cost functions @xmath6 ,",
    "@xmath8 , @xmath78 , @xmath103 and @xmath104 , the threshold problem over is -complete ; for @xmath5 and @xmath7 , it is in .",
    "for all cost functions , the @xmath105 membership is established by using the encoding ( explained in appendix  [ sec : qgames - sem ] ) of a @xmath35 into a classical quantitative two - player game @xmath73 which is played on a weighted graph , whose vertices are the configurations of the sabotage game , i.e. , a tuple containing the current vertex , the last crossed edge and the current weight distribution , and whose weights are in @xmath106 ( describing how much runner pays by moving from one configuration to another ) .",
    "notice that @xmath34 has size at most @xmath107 , since every distribution is a mapping of @xmath108 .",
    "hence , we see that the game @xmath73 has a number of vertices at most exponential with respect to @xmath109 , and polynomial with respect to @xmath2 ( which , being given in binary , can be exponential in the size of the input of the problem ) .",
    "using results from  @xcite , we know that we can compute in pseudo - polynomial time the value of the quantitative game @xmath73 for all the cost functions cited in the theorem : here , pseudo - polynomial means polynomial with respect to the number of vertices and edges of @xmath73 ( which is exponential with respect to @xmath109 ) , and polynomial with respect to the greatest weight in absolute value , here @xmath2 ( which is also exponential with respect to @xmath109 ) .",
    "thus we obtain the exponential time upper bound announced in the theorem .",
    "note that for @xmath104 , pseudo - polynomial also means polynomial in the value of the denominator of @xmath101 . with a discount factor @xmath110 ( not necessarily rational ) , but we ensure that only one turn over two has a non - zero weight , so that we may indeed apply the reasoning of @xcite and their pseudo - polynomial algorithm . ]",
    "when the budget @xmath2 is fixed , i.e. , when it is a parameter of the problem and not one of the inputs , the explanation above can be adapted to prove that the problem is solvable in polynomial time for all but the @xmath104 cost functions . indeed",
    ", we can refine our analysis of the size of @xmath34 .",
    "a budget distribution can also be encoded as a mapping @xmath111 where we consider the budget as a set of indexed pebbles : such a mapping represents the distribution @xmath38 defined by @xmath112 .",
    "this encoding shows that @xmath34 has size at most @xmath113 , which is polynomial in @xmath114 . for the discounted sum",
    ", the role of @xmath101 in the complexity stays the same , causing an @xmath115 and pseudo - polynomial complexity : this blow - up disappears if @xmath101 is a parameter of the problem . in the overall ,",
    "we obtain :    [ cor : fixed ] for cost functions @xmath5 ,",
    "@xmath6 , @xmath7 , @xmath8 , @xmath78 , @xmath104 , and for fixed budget @xmath2 , the threshold problem for is in @xmath0 ; for @xmath103 ( where @xmath101 is an input ) , it is in @xmath116 and can be solved in pseudo - polynomial time .",
    "the rest of this section is devoted to the proof of @xmath105-hardness in theorem  [ thm : exptime ] for cost functions @xmath6 ,",
    "@xmath8 , @xmath78 and @xmath104 ( this implies @xmath105-hardness for @xmath103 too ) .",
    "our gold - standard problem for -hardness is the _ alternating boolean formula _",
    "( abf ) problem , introduced by stockmeyer and chandra in  @xcite .",
    "our proof consists of a sequence of reductions from this problem , as depicted in  [ fig : reductions - dir ] .",
    "first , we show a reduction to the threshold problem for @xmath6 cost function when the threshold is @xmath117 and * the initial distribution is empty * ( i.e. , no budget on any edge ) , on extended with _",
    "safe edges _ and _ final vertices _ ( in order to make the reduction more readable ) .",
    "notice that this problem amounts to determining whether has a strategy to avoid crossing an edge with non - zero budget , therefore we refer to this problem as the _ extended safety problem _ ( @xmath118 ) .",
    "our next step is to encode safe edges and final vertices into ( non - extended ) with gadgets of polynomial size , therefore proving that the _ safety problem _ ( @xmath119 ) is itself -hard : @xmath119 is a special case of the threshold problem @xmath120 with @xmath6 cost function and threshold  0 , for empty initial distributions .",
    "reductions to threshold problems with other cost functions close our discussion to prove their -hardness .",
    "[ [ alternating - boolean - formula . ] ] alternating boolean formula .",
    "we first recall the alternating boolean formula problem ( abf ) introduced as game @xmath121 in  @xcite , which is the -hard problem from which we perform our reductions .",
    "intuitively , an abf is an ( infinite ) game played on a boolean formula whose variables are partitioned into two sets .",
    "each player controls the values of one of the sets of variables .",
    "players take turns changing the value of one of the variables they control .",
    "the objective of the first player ( prover ) is to eventually make the formula true , while the second player ( disprover ) tries to avoid this .",
    "we note that this game closely resembles an infinite horizon version of the more classical qbf problem .",
    "more formally , an abf instance is given by two finite disjoint sets of boolean variables , @xmath122 and @xmath123 , and a cnf formula over @xmath124 .",
    "the game is played by two players called prover and disprover .",
    "they take turns changing the value of at most one of the variables they own ( @xmath122 are the variables of prover , and @xmath123 those of disprover ) .",
    "prover wins if and only if the formula is eventually true",
    ". a configuration of this game is thus a pair @xmath125 where @xmath126 is the current valuation of the variables and @xmath127 indicates which player should play next .",
    "the abf problem consists in , given an abf game and an initial configuration , determining whether disprover has a winning strategy from the initial configuration .",
    "it is shown -complete in  @xcite .",
    "[ exa : abf ] consider the formula @xmath128 where @xmath129 , @xmath130 , @xmath131 and @xmath132 .",
    "let us further consider the partition of the variables into the sets @xmath133 of prover , and @xmath134 of disprover ; and the initial configuration @xmath135 , where @xmath136 ( we denote a valuation by the set of all variables it sets to true ) . clearly , in this initial configuration",
    ", @xmath137 is false since @xmath138 is false . from that configuration",
    ", prover can either set @xmath139 to true , or @xmath2 to false . in the former case , one obtains the configuration @xmath140 , where prover wins , as @xmath137 now evaluates to true . in the latter case , one obtains the configuration @xmath141 .",
    "we claim that , from this configuration , prover can not win the game anymore , i.e. , disprover has a winning strategy that consists in first setting @xmath142 to false , and in , all subsequent rounds , always flipping the value of @xmath143 , whatever prover does .",
    "playing according to this strategy ensures disprover to force visiting only configurations where either @xmath144 or @xmath145 is false .",
    "[ [ extended- . ] ] extended .    to make the encoding of abf instances into easier , we introduce _ extended quantitative sabotage games _ ( with @xmath6 cost function ) .",
    "those games are with @xmath6 cost function , a designated subset @xmath146 of _ final vertices _ and a designated subset @xmath147 of _ safe edges _",
    "( those special vertices and edges are henceforth depicted with double lines ) . @xmath148 and @xmath149 influence the semantics of the game :",
    "can place some budget on final vertices ( which is accounted for in the cost when visits those vertices ) , but can not put budget on safe edges ; and the game stops as soon as visits a final vertex .",
    "we consider the _ extended safety problem _ ( @xmath118 ) , which is to determine whether an extended @xmath35 _ with empty initial distribution _ has value @xmath150 .",
    "since the cost function is @xmath6 , this amounts to checking that has a strategy to reach a final vertex , with no budget assigned to it , without crossing any edge with non - null budget . from now on , we assume @xmath151 , as the problem is trivial otherwise . then :    [ lem : abf - to - extended ] the abf problem is polynomial - time reducible to @xmath118 .",
    "we consider an instance of the abf problem given by boolean variable sets @xmath122 and @xmath123 ( owned by prover and disprover , respectively ) and a cnf formula @xmath137 over @xmath152 .",
    "we construct an extended @xmath153 such that wins in @xmath153 if and only if prover wins in the abf problem .",
    "valuations of the variables in @xmath152 are encoded by budget distributions in @xmath153 . for each variable @xmath154",
    ", @xmath153 has @xmath155 _ final _ vertices associated with @xmath156 , @xmath157 . a budget distribution @xmath38 encodes a valuation in which variable @xmath158 is * true * if and only if @xmath159 and @xmath160 .",
    "then , @xmath153 simulates the abf game as follows .",
    "the duty of is to move the budget distribution in such a way that he respects the encoding of the valuations explained above . to enforce this , we rely on the two gadgets , depicted in  [ gadgetgeq2 ] and  [ check(x ) ] .",
    "they allow to check that respects the encoding and let him lose if he does not .",
    "more precisely , the gadget in  [ gadgetgeq2 ] allows one to check that @xmath161 there is a non - zero budget on at least two vertices from @xmath162 ; and the one in  [ check(x ) ] that @xmath163 there is a non - zero budget on exactly @xmath164 or @xmath165 . to allow to check one of these conditions , we allow him to move to one of the four corner vertices of the corresponding gadget , from where one can easily check can win if and only if the condition is not respected . in our reduction , will be allowed to check condition @xmath161 , for all variables , from all vertices but will be able to check @xmath163 only on some of them , as we will see later .    the remaining of the construction is done in a way to allow and to choose valid re - configurations of @xmath162 for all variables @xmath156 , and make sure that if a player cheats , it allows the other player to win the safety game . if at some point , the formula @xmath137 becomes true , then we allow to enter a final gadget which verifies that the current budget distribution to @xmath166 satisfies @xmath137 .",
    "this last gadget lets choose a clause and then allows to choose a literal , within this clause , which should be true .",
    "it is easy to see that the choice of clause @xmath167 can be done by way of safe edges .",
    "the choice of literal , done by , consists in choosing a suffix of @xmath167 for which the left - most literal holds .",
    "figure  [ fig : exa - abfmain ] shows the @xmath118 which results from applying our construction to the abf formula from example  [ exa : abf ] .",
    "we refer the reader to appendix  [ sec : abf2espr ] for the full reduction , in particular how we can force , before the beginning of the actual game , to start in the initial valuation of the abf game .",
    "( na1 ) at ( 0.59,0 ) @xmath168 ; ( na2 ) at ( 1.76,0 ) @xmath169 ; ( a1 ) at ( 2.81,0 ) @xmath170 ; ( a2 ) at ( 3.74,0 ) @xmath171 ;    ( nb1 ) at ( 4.79,0 ) @xmath172 ; ( nb2 ) at ( 5.97,0 ) @xmath173 ; ( b1 ) at ( 7.03,0 ) @xmath174 ; ( b2 ) at ( 7.97,0 ) @xmath175 ;    ( nc1 ) at ( 9.03,0 ) @xmath176 ; ( nc2 ) at ( 10.19,0 ) @xmath177 ; ( c1 ) at ( 11.24,0 ) @xmath178 ; ( c2 ) at ( 12.18,0 ) @xmath179 ;    ( nd1 ) at ( 13.24,0 ) @xmath180 ; ( nd2 ) at ( 14.43,0 ) @xmath181 ; ( d1 ) at ( 15.51,0 ) @xmath182 ; ( d2 ) at ( 16.47,0 ) @xmath183 ;    ( verif ) at ( 15,5 ) @xmath184 ; at ( verif.south east ) @xmath185 ; ( play ) at ( 5.5,5 ) @xmath186 ; at ( play.south east ) @xmath185 ; ( choose ) at ( 11,5 ) @xmath187 ; at ( choose.south east ) @xmath188 ; ( set2 ) at ( 11,4 ) @xmath189 ; at ( set2.south east ) @xmath185 ; ( set1 ) at ( 10,3 ) @xmath190 ; at ( set1.south east ) @xmath191 ;    ( setna1 ) at ( 1.5,3 ) @xmath192 ; at ( setna1.south east ) @xmath193 ; ( setna2 ) at ( 1.5,2 ) @xmath194 ; at ( setna2.south east ) @xmath185 ; ( seta1 ) at ( 3.5,3 ) @xmath195 ; at ( seta1.south east ) @xmath193 ; ( seta2 ) at ( 3.5,2 ) @xmath196 ; at ( seta2.south east ) @xmath185 ;    ( setnb1 ) at ( 5.5,3 ) @xmath197 ; at ( setnb1.south east ) @xmath198 ; ( setnb2 ) at ( 5.5,2 ) @xmath199 ; at ( setnb2.south east ) @xmath185 ; ( setb1 ) at ( 7.5,3 ) @xmath200 ; at ( setb1.south east ) @xmath198 ; ( setb2 ) at ( 7.5,2 ) @xmath201 ; at ( setb2.south east ) @xmath185 ;    ( cl1 ) at ( 3,-2 ) @xmath138 ; at ( cl1.south east ) @xmath188 ; ( cl2 ) at ( 7,-2 ) @xmath144 ; at ( cl2.south east ) @xmath188 ; ( cl3 ) at ( 11,-2 ) @xmath145 ; at ( cl3.south east ) @xmath188 ; ( cl4 ) at ( 15,-2 ) @xmath202 ; at ( cl4.south east ) @xmath188 ;    ( alpha ) at ( 3.5,5 ) @xmath203 ;    ( choose )  ( play ) ; ( choose )  ( verif ) ;    ( set2 )  ( choose ) ; ( set1 )  ( set2 ) ;    ( play )  ( setna1 ) ; ( play )  ( seta1 ) ; ( play )  ( setnb1 ) ; ( play )  ( setb1 ) ; ( setna1 )  ( setna2 ) ; ( seta1 )  ( seta2 ) ; ( setnb1 )  ( setnb2 ) ; ( setb1 )  ( setb2 ) ; ( setna2 )  ( na1 ) ; ( setna2 )  ( na2 ) ; ( seta2 )  ( a1 ) ; ( seta2 )  ( a2 ) ; ( setnb2 )  ( nb1 ) ; ( setnb2 ) ",
    "( nb2 ) ; ( setb2 )  ( b1 ) ; ( setb2 )  ( b2 ) ;    ( setna2 )  ( 1.5,1 )  ( 10,1 )  ( set1 ) ; ( seta2 )  ( 3.5,1 )  ( 10,1 )  ( set1 ) ; ( setnb2 )  ( 5.5,1 )  ( 10,1 )  ( set1 ) ; ( setb2 ) ",
    "( 7.5,1 ) ",
    "( 10,1 )  ( set1 ) ;    ( verif )  ( 15,3 ) ",
    "( 17,-2.7 ) ",
    "( 3,-2.7 )  ( cl1 ) ; ( verif )  ( 15,3 ) ",
    "( 17,-2.7 ) ",
    "( 7,-2.7 )  ( cl2 ) ; ( verif )  ( 15,3 ) ",
    "( 17,-2.7 ) ",
    "( 11,-2.7 )  ( cl3 ) ; ( verif )  ( 15,3 ) ",
    "( 17,-2.7 ) ",
    "( 15,-2.7 ) ",
    "( cl4 ) ;    ( cl1 )  ( a1.south ) ; ( cl1 )  ( nc1.south ) ;    ( cl2 )  ( c1.south ) ; ( cl2 )  ( d1.south ) ;    ( cl3 )  ( c1.south ) ; ( cl3 )  ( nd1.south ) ;    ( cl4 )  ( b1.south ) ; ( cl4 )  ( nb1.south ) ;    we now explain how to encode safe edges and final vertices into usual , therefore showing the -hardness of the safety problem for .",
    "[ lem : safe - extended - wlog ] the extended safety problem @xmath118 is polynomial - time reducible to a safety problem @xmath119 with budget @xmath75 .",
    "each final vertex @xmath204 in an extended @xmath153 is replaced by the gadget in  [ finalnodes ] , where @xmath205 is a clique of size @xmath206 , hence bigger than the budget of . to encode @xmath207 in @xmath153 ,",
    "now puts one unit of budget on @xmath208 .",
    "if reaches the gadget ( through @xmath209 ) , puts one unit of budget on @xmath210 .",
    "clearly , loses if and only if there was already one unit on @xmath208 ( i.e. , @xmath204 was marked in @xmath211 ) .",
    "each safe edge @xmath212 is replaced by the gadget in  [ safeedges ] . here , we make use of final vertices and disjoint paths so that can not block all paths from @xmath209 to @xmath213 without letting win by visiting a final vertex with zero budget .",
    "both gadgets have polynomial size since we assume that @xmath214 .",
    "as the safety problem is a specific case of the threshold problem for @xmath6 ( where the initial distribution is empty , and threshold is fixed to @xmath117 ) , it follows that @xmath120 and @xmath215 are -hard too .",
    "we note that given a @xmath35 , for all plays @xmath216 in @xmath35 , for all @xmath217 , and for all @xmath218 , @xmath219 if and only if @xmath220 .",
    "this implies the following result , showing that @xmath221 and @xmath222 are also -hard .",
    "[ lem : sup - to - ds ] for any @xmath223 , the threshold problem for @xmath104 and threshold @xmath117 is equivalent to the threshold problem for @xmath6 and threshold @xmath117 .",
    "let us now focus on @xmath8 . to show that @xmath224 is -hard",
    ", we describe a reduction from @xmath119 to @xmath225 as stated in the following lemma .",
    "[ lem : safe - to - limsup ] the safety problem @xmath119 is polynomial - time reducible to the threshold problem for @xmath8 and threshold @xmath117 .",
    "let @xmath226 be an instance of @xmath119 ( with @xmath227 its underlying graph @xmath26 ) .",
    "we build a @xmath35 with cost function @xmath8 such that @xmath228 if and only if wins in @xmath229 .",
    "the idea of the construction is that a play of @xmath35 consists in simulating a potentially infinite sequence of plays of @xmath229 , using appropriate gadgets to ` reset ' the safety game between two successive simulations .",
    "then , repeatedly playing a winning strategy for @xmath229 allows to ensure a @xmath8 of @xmath117 in @xmath35 ; and one can extract a winning strategy for the safety game @xmath229 from any strategy ensuring a @xmath8 of @xmath117 in @xmath35 .",
    "the @xmath35 has budget @xmath230 and is obtained by extending @xmath227 with two gadgets .",
    "note that we are giving more budget than he had in @xmath229 .",
    "however , as we will see in the sequel , at the beginning of every faithful simulation of @xmath229 ( i.e. when moves to @xmath227 ) there will be @xmath231 of it in the second gadget and @xmath2 in the first and during any faithful simulation of @xmath229 only budget from the initial gadget is redistribtued into @xmath227 .",
    "the first gadget is an initial gadget which is visited every time the safety game is ` reset ' .",
    "it allows to stay safe from any weighted edges ( and avoid reaching @xmath227 ) until has placed @xmath2 units of budget on it ( and thus removed them from the @xmath232 ) .",
    "it is depicted in  [ fig : initial - gadget ] , where all @xmath233 are intuitively copies of @xmath234 , and @xmath235 corresponds to the set of all successors of @xmath234 in @xmath227 .",
    "the second gadget allows to leave @xmath227 if ever places more than @xmath2 units of budget on @xmath227 ( and thus removes this budget from the gadgets ) , thereby triggering a ` reset ' of the simulation .",
    "this gadget , depicted in  [ fig : exit - gadget ] , also allows to come back to the initial gadget visiting only edges with zero budget .",
    "the figure shows a sequence of safe transitions ( i.e. several vertices with high out - degree ) which leads back to the copies @xmath233 of the initial vertex .",
    "further , this ` safe path ' takes long enough for to redistribute the budget from @xmath227 to both gadgets .",
    "in order for to stop from always taking this ` safe exit ' from @xmath227 he can place @xmath231 budget in specific edges of this second gadget .",
    "more specifically , he can place a unit of budget on one outgoing edge from each @xmath236 , for @xmath237 , before forcing to enter @xmath227 .    [ [ intuition - behind - the - global - construction . ] ] intuition behind the global construction .",
    "assume that has a winning strategy in @xmath229 .",
    "then , when is in the initial gadget , will play as expected and remove all weights from @xmath227 .",
    "critically , the weights he removes from @xmath227 will go to specific edges in both gadgets described above .",
    "is now forced to play into @xmath227 , and can follow his winning strategy to hit at some point without using more than @xmath2 weights . if attempts to bail out of @xmath238 through the alternative exit , and to head back to the initial gadget , then we make sure he is also hit by .",
    "clearly , this ensures that the @xmath8 value of the game is strictly greater than @xmath117 .",
    "now assume that has a winning strategy in @xmath229 . in this case , if does not remove all weights from @xmath227 , then is allowed to stay in the initial gadget forever or jump to @xmath227 and immediately bail out using the exit gadget . in both cases",
    "he avoids getting hit by .",
    "let us assume plays as expected and thus enters @xmath227 eventually . in this case",
    ", can play his winning strategy , hence avoiding edges with non - zero budget ( with using budget @xmath2 ) .",
    "either he dodges weighted edges forever , or cheats and uses some of his additional budget .",
    "however , in this case he creates an exit for back to the initial gadget , and the same analysis as above applies .",
    "this implies that the value of the game is exactly @xmath117 .    proving the -hardness result for cost function @xmath239is done by noticing that , for threshold @xmath117 , both problems are equivalent .",
    "[ lem : limsup - to - mp ] the threshold problem for @xmath8 and threshold @xmath117 is polynomial - time reducible to the threshold problem for @xmath78 and threshold @xmath117 .",
    "in light of the -completeness of , we study in this section a restriction of the problem , that might be sufficient to model some interesting cases .",
    "the restriction concerns the dynamics of the behaviour of . in a _",
    "static _ , chooses at the beginning a budget distribution ( hence , changing the initial budget distribution ) , and then commits to this distribution during the whole game .",
    "the situation is no longer a reactive two - player game , but rather we ask whether for every possible initial ( and static ) budget distribution , has a nicely behaved strategy .    formally , for a @xmath240 ( we remove the initial budget distribution from the tuple in this section , since it is useless ) and a budget distribution @xmath241 , we denote by @xmath242 the obtained from @xmath35 by taking @xmath38 as initial budget distribution .",
    "furthermore , we define the _ identity strategy _",
    "@xmath243 of in @xmath35 , as the strategy mapping every prefix @xmath244 to the last budget distribution appearing in prefix @xmath216 .",
    "we let @xmath245 , where @xmath246 denotes the unique play defined by the profile @xmath247 in @xmath242 .",
    "notice that this value is equal to @xmath248 , since in @xmath35 , when follows strategy @xmath243 , the quantitative game @xmath73 ( see appendix  [ sec : qgames - sem ] ) is split into independent games , one for each initial distribution @xmath38 , that knows as soon as it starts playing .",
    "the static threshold problem with cost function @xmath30 consists in , given as input a @xmath35 with cost function @xmath30 and a non - negative threshold @xmath98 , determining whether the inequality @xmath249 holds .",
    "we now state the complexity of this new problem .    for cost functions @xmath5 and @xmath7 ,",
    "the static threshold problem over is in  ; for @xmath6 , @xmath8 , @xmath78 , and @xmath103 , it is -complete .",
    "first , we give the intuition behind our polynomial - time algorithm to decide the static threshold problem for cost functions @xmath5 and @xmath7 .",
    "[ lem : poly - inf - linf ] for cost functions @xmath5 and @xmath7 , the static threshold problem over is in .    for @xmath5 ,",
    "we claim that @xmath250 , where @xmath251 is the set of edges reachable from @xmath234 .",
    "indeed once a distribution @xmath38 is chosen , any optimal strategy of will make him reach an edge of @xmath251 that has the minimum weight , thus must distribute evenly its budget over @xmath251 .",
    "a similar argument works for @xmath7 , showing that @xmath252 , where @xmath253 is the set of edges reachable from @xmath234 and contained in a strongly connected component .",
    "then , let us turn to the @xmath254-completeness of the problem for cost functions @xmath6 ,",
    "@xmath8 , @xmath78 , and @xmath103 .",
    "notice that , because of the two possible definitions of @xmath255 explained in the beginning of the section , the complement of the static threshold problem asks whether there exists a budget distribution @xmath38 such that @xmath256 for every strategy @xmath257 of .",
    "thus we show the @xmath258-completeness of the complement of the static threshold problems for the four cost functions .",
    "[ lem : conp - complete ] for cost functions @xmath6 , @xmath8 , @xmath78 , and @xmath103 , the complement of the static threshold problem over is -complete .",
    "for the membership in @xmath258 , we can first guess a budget distribution @xmath38 ( that is of size polynomial ) , and then compute the value of the one - player ( since player @xmath259has no choices anymore ) quantitative game @xmath242 , to check if it is greater than  @xmath98 : computing the value of such a game can be done in polynomial time for the four cost functions we consider ( see  @xcite ) .    for the @xmath258-hardness with cost functions @xmath8 and @xmath78",
    ", we give a reduction from the following problem .",
    "the feedback arc set problem asks , given a directed graph @xmath260 and a threshold @xmath261 , whether there is a set @xmath262 of at most @xmath3 edges of @xmath238 such that @xmath263 is acyclic .",
    "karp showed @xcite that the feedback arc set problem is @xmath258-complete .",
    "let us consider an instance of the feedback arc set problem , given by a directed graph @xmath260 and a natural integer @xmath264 .",
    "wlog , we can add to the graph a vertex @xmath234 , with null in - degree , and , for all vertices @xmath265 , an edge @xmath266 . observe that this does not change the output of the feedback arc set problem as @xmath234 is not included in any cycle .",
    "we then construct a @xmath267 with @xmath268 .",
    "it is not difficult to show that @xmath269 if and only if there exists a set @xmath262 of @xmath3 edges of @xmath238 such that @xmath263 is acyclic .",
    "the result for @xmath6 and @xmath103 is then obtained by a slight modification of the previous proof . in particular , we make use of lemma  [ lem : sup - to - ds ] , once more .",
    "we refer the reader to appendix  [ app : conp ] for the details .",
    "one can see a sabotage game as a system in which a controller tries to evolve while avoiding as much as possible the failures caused by the environment .",
    "the vertices of the graph represent configurations of the system , edges represent the actions , and the budget of the saboteur may represent a finite amount of failures that can simultaneously occur during the execution . in a quantitative reasoning , a failure may be better represented by a quantity describing how much some elements of the system are overloaded , and then how much it would cost , in terms of time or energy , to use them .",
    "following this main motivation , we propose to look at sabotage games as a particular semantics of controllable systems . indeed , while a standard semantics would analyse the feasibility of a requirement in a fully functional system , a _ sabotage semantics _",
    "allows one to analyse systems subject to errors , and to decide , e.g. , whether one can satisfy a boolean constraint while minimising the average number of failures encountered during the execution .",
    "in particular , sabotage games , as introduced in this work , would correspond to the sabotage semantics of a system where the controller must walk in a graph with no particular objective , other than minimising the failures .    from a modelling point of view , graphs  which can be viewed as one - player games with trivial winning conditions  are quite limited . in more realistic models",
    ", we may be interested in modelling systems with uncontrollable actions ( i.e. , two - player games ) , and where the controller has a specific boolean goal to achieve , instead of simply staying in the graph _ ad vitam ternam_. a more realistic goal is usually expressed via a parity condition or ltl formulas . in appendix",
    "[ sec : more - expressive ] , we show that when a reactive system is modelled by a two - player parity game , deciding whether one can ensure the parity condition , while maintaining a cost associated with the sabotage semantics below a given threshold , is not harder than solving sabotage games .",
    "that is , the problem is -complete .",
    "this result is obtained by a reduction to quantitative parity games  @xcite . when the requirement is expressed with an ltl formula instead of a parity condition ,",
    "the problem becomes 2 - -complete , due to an additional exponential blow - up in the size of the input formula .",
    "note , however , that the ltl - reactive synthesis problem itself ( with the standard non - sabotage semantics ) is already 2 - -complete . in this case",
    ", the sabotage semantics does not add to the complexity of the problem , which further shows that our present contributions might have practical applications , albeit the high complexity .",
    "we have conducted a study of systems subject to failure , using the model of _ quantitative sabotage games_. we have shown that under _ dynamic sabotage _ , the threshold problem is -complete for most objective functions , and -complete under _ static sabotage _",
    ", for the same functions ( see table  [ tbl : summary ] for a summary of these results ) .",
    "we have also shown the applicability of our framework to deal with the more general problem of reactive synthesis in systems under failures .",
    "the we have introduced open many questions related to evolving structures . here we have studied the worst - case scenario , i.e. , where the environment is modelled by an antagonistic adversary , but , as considered in @xcite for reachability boolean objectives , one could also look at a probabilistic model , where failures , i.e. , redistributions of weights , are random variables .",
    "another natural extension of this work would be to consider a more realistic setting where the controller ( ) has partial information regarding the weights of .",
    "although the synthesis problem has been widely studied in theory , there are not many tools which implement the known theoretical solutions to decide it .",
    "the is is particularly true for quantitative objectives . recently , however , competitions have been organised to encourage the development of such tools and the standardisation of an input format ( see , e.g. , syntcomp and sygus ) . motivated by the similarities between the abf problem ( solving a safety game described by a logical formula ) and the synthesis problem as solved in those competition ( solving a safety game described by a logical circuit ) , one of our future projects is to show that quantitative extensions of some of the practical tools implemented for the reactive synthesis problem could be used to solve sabotage games .",
    "10    k.  r. apt and e.  grdel . .",
    "cambridge university press , 2011 .",
    "k.  chatterjee , l.  doyen , and t.  a. henzinger .",
    "quantitative languages . , 11(4 ) , 2010 .",
    "k.  chatterjee , t.  a. henzinger , and m.  jurdzinski .",
    "mean - payoff parity games . in _ lics _ , pages 178187 .",
    "ieee , 2005 .",
    "k.  chatterjee , t.  a. henzinger , and n.  piterman .",
    "generalized parity games . in _ fossacs _ , pages 153167 .",
    "springer , 2007 .",
    "a.  ehrenfeucht and j.  mycielski .",
    "positional strategies for mean payoff games . , 8:109113 , 1979 .",
    "a.  s. goldstein and e.  m. reingold .",
    "the complexity of pursuit on a graph .",
    ", 143(1):93  112 , 1995 .",
    "s.  grner , f.  g. radmacher , and w.  thomas .",
    "connectivity games over dynamic networks . , 493:4665 , 2013 .",
    "s.  jacobs , r.  bloem , r.  brenguier , r.  ehlers , t.  hell , r.  knighofer , g.  a. prez , j .- f .",
    "raskin , l.  ryzhyk , o.  sankur , m.  seidl , l.  tentrup , and a.  walker .",
    "the first reactive synthesis competition ( syntcomp 2014 ) .",
    "technical report 1506.08726 , arxiv , 2014 .",
    "m.  jurdziski .",
    "deciding the winner in parity games is in @xmath270 .",
    ", 68(3):119124 , 1998 .",
    "r.  m. karp .",
    "reducibility among combinatorial problems . in _ proceedings of a symposium on the complexity of computer computations _ , pages 85103 , 1972 .",
    "d.  klein , f.  g. radmacher , and w.  thomas .",
    "moving in a network under random failures : a complexity analysis .",
    ", 77(7 - 8):940954 , 2012 .",
    "l.  m. kurzen . .",
    "phd thesis , institute for logic , language and computation , 2011 .",
    "c.  lding and p.  rohde . solving the sabotage game is pspace - hard . in _ mfcs _ ,",
    "volume 2747 of _ lncs _ , pages 531540 .",
    "springer , 2003 .",
    "d.  a. martin .",
    "borel determinacy . , 102(2):363371 , 1975 .",
    "d.  a. martin .",
    "the determinacy of blackwell games . , 63(4):15651581 , 1998 .",
    "a.  pnueli and r.  rosner . on the synthesis of a reactive module . in _ proc .",
    "16th symp .",
    "principles of programming languages _ , pages 179190 .",
    "acm , 1989 .",
    "m.  sevenster . .",
    "phd thesis , institute for logic , language and computation , 2006 .",
    "p.  d. seymour and r.  thomas .",
    "graph searching and a min - max theorem for tree - width .",
    ", 1:2233 , 1993 .",
    "l.  j. stockmeyer and a.  k. chandra .",
    "provably difficult combinatorial games .",
    ", 8(2):151174 , 1979 .    j.  van benthem .",
    "an essay on sabotage and obstruction . in",
    "_ mechanizing mathematical reasoning",
    "_ , volume 2605 of _ lnai _ , pages 268276 .",
    "springer , 2005 .",
    "m.  yamashita and i.  suzuki . characterizing geometric patterns formable by oblivious anonymous mobile robots .",
    ", 411(26 - 28):24332453 , 2010 .",
    "w.  zielonka .",
    "infinite games on finitely coloured graphs with applications to automata on infinite trees . , 200(12):135  183 , 1998 .",
    "u.  zwick and m.  s. paterson .",
    "the complexity of mean payoff games .",
    ", 158:343359 , 1996 .",
    "we observe that the result on safety games is related to the cops and robbers games studied mostly by the graph theoretical community ( see , e.g. ,  @xcite and references therein for a survey ) .",
    "we remark that cops and robbers games are usually defined as played on the vertices of undirected graphs . in",
    "@xcite it was shown that several variants of the cops and robbers game without helicopters and , as usual , played on the vertices of an undirected graph , are -complete .",
    "in contrast , our result implies that the cops and robbers game played on the edges of a graph with @xmath2 cops , one _ helicopter _ and a _ slow robber _ , i.e. , which can traverse at most one edge per turn , is -hard .",
    "a similar version is studied in  @xcite , where they consider helicopters and a _",
    "fast robber_. however , the game is played on the vertices of an undirected graph and the complexity of solving the game is left open in that paper .",
    "it is easy to lift our results to games where weights are placed on vertices and no longer on edges by considering line graphs : in contrast , the other direction from vertices to edges would have been more difficult , and is not currently known for the best of our knowledge .",
    "[ sab2games ]    in this section , we give formal definitions of quantitative two - player games , and show an exponential encoding of into these games .",
    "thereafter , we choose to call @xmath271 and @xmath272 the two players of our games , to distinguish them from and , used in the main part of this article .",
    "a weighted arena is a tuple @xmath273 with @xmath274 a finite set of vertices partitioned into the set @xmath275 of vertices of player @xmath271 and the set @xmath276 of vertices of player @xmath272 , @xmath277 is a set of edges , @xmath278 is a weight function assigning an integer weight to each edge of the arena , and @xmath279 is an initial vertex . given a weight function @xmath280 , we write @xmath281 for the greatest weight in @xmath282 , i.e. , @xmath283 .    intuitively , the two players @xmath271 and @xmath272 move a token along the edges of the graph @xmath26 , starting on vertex @xmath234 .",
    "when the token is on a vertex of @xmath275 , it is @xmath271 that chooses the next vertex , and when on @xmath276 , it is @xmath272 . to allow them to play infinitely , we make the assumption that every vertex @xmath204 has an outgoing edge , i.e. , that there exists @xmath33 .",
    "a strategy for a player is simply a mapping telling him what to play depending on the past . formally , given an arena @xmath284 , a play is an infinite sequence of vertices @xmath285 such that @xmath286 , and @xmath287 for all @xmath50 .",
    "we say that a prefix @xmath288 of a play belongs to @xmath289(respectively , @xmath259 ) if @xmath290 ( respectively , @xmath291 ) . a strategy for player",
    "@xmath292 is a mapping @xmath293 from prefixes of plays belonging to @xmath292 to vertices such that @xmath294 for all prefix @xmath295 belonging to @xmath292 .",
    "the outcomes of a strategy @xmath293 of player @xmath292 are all plays @xmath296 such that for all @xmath288 with @xmath297 , @xmath298 .",
    "we write @xmath299 the set of plays in @xmath238 ( we omit @xmath238 when it is clear from the context ) , @xmath300 the set of outcomes of a strategy @xmath293 , and @xmath301 the only play contained in @xmath302 .",
    "since we are dealing with quantitative game , we use a _ value function _ to map plays to values in @xmath303 .",
    "a quantitative game is a pair @xmath304 consisting of an arena @xmath238 and such a value function @xmath30 .",
    "most standard value functions are defined by using the weights in the weighted arena : equipped of one of the cost functions @xmath305 described in the main part of the article ( @xmath5 , @xmath7 , @xmath6 , @xmath8 , @xmath78 , or @xmath104 for instance ) , we may define a value function @xmath306 by setting @xmath307 for all plays @xmath308 .    in a quantitative game @xmath304 ,",
    "the value of a strategy @xmath309 ( respectively , @xmath310 ) of @xmath271 ( respectively , @xmath272 ) is : @xmath311 to characterise the best value that each player can guarantee no matter what the opponent is doing , we consider the upper value @xmath312 ( the best @xmath271 can hope for ) and lower value @xmath313 ( the best @xmath272 can hope for ) , defined by : @xmath314    in quantitative games , for all the value functions @xmath306 obtained by considering the cost functions @xmath30 used above , upper and lower values coincide : we then let @xmath315 be the value of the game .",
    "we rely on martin s determinacy theorem for blackwell games  @xcite , since all the cost functions considered are borel measurable .      starting from a @xmath316",
    ", we encode it in the quantitative two - player game @xmath317 as follows :    * @xmath318 , @xmath319 : @xmath289vertices represent configurations of @xmath320(i.e . , the vertex of @xmath320currently occupied by , together with the current budget distribution ) , and @xmath259vertices encode the last edge played by in @xmath320 and again the current budget distribution ; * @xmath321 ; * for all @xmath322 and @xmath323 we let @xmath324 and * * @xmath325 if @xmath102 , * * @xmath326 otherwise ; * @xmath327 is the initial configuration ; * if @xmath102 , we let @xmath328 , otherwise @xmath329 .    we claim that @xmath35 and @xmath73 are equivalent , meaning that they have the same value .",
    "the main difference lies in the way costs are computed .",
    "indeed , consider a pair of consecutive moves from both players in the original @xmath35 , i.e. , the traversal of an edge @xmath330 by , followed by a budget redistribution @xmath39 by .",
    "observe that this pair of moves incurs a cost of @xmath331 in the original , but is encoded by the traversal of _ two consecutive edges _ @xmath332 and @xmath333 in @xmath334 that have _ both _",
    "weight @xmath331 ( or weight @xmath331 and then weight @xmath117 for the discounted sum case ) .",
    "observe however that this is not a problem for the cost functions that we are considering .",
    "indeed , @xmath6 , @xmath5 , @xmath8 , and @xmath7 are resistant to stuttering .",
    "the value of the average cost is also consistent , since both the sum of the visited weights _ and _ the length of the paths are doubled in @xmath334 with respect to @xmath35 . for the discounted sum ,",
    "this is taken care of by replacing the original discount factor @xmath101 in @xmath35 by @xmath335 in @xmath334 .",
    "in this section , we fix an instance of the abf problem , i.e. , a cnf formula @xmath137 and an initial configuration @xmath336 . we let @xmath337 be the number of variables in @xmath137 .",
    "we construct an extended @xmath35 such that wins in the extended safety problem over @xmath35 if and only if prover wins the abf game . therefore , will act as prover while will act as disprover . as an example of our construction",
    ", we consider the cnf formula of example  [ exa : abf ] .",
    "recall that in extended , we allow for the use of safe edges , i.e. , edges where can not put budget , and final vertices , i.e. , vertices where the play ends , with the budget placed on this vertex taken into account to compute the cost .",
    "we present step by step the vertices contained in @xmath35 . for every variable @xmath122",
    ", we create @xmath155 final vertices @xmath338 .",
    "we also create another final vertex called @xmath339 . in the following",
    ", we always assume that edges are safe , unless explicitly stated .      for each variable @xmath122 , and each triplet @xmath341 , we create two vertices , @xmath342 and @xmath343 such that in the graph , @xmath344 for all @xmath345 . note that if there is zero budget on the triplet @xmath346 when arrives in @xmath342 , then is sure to reach one of the @xmath347 without visiting edges with non - zero budget ( and hence win the game ) . for all vertices",
    "@xmath204 in the graph ( except those in the initialisation gadget , as we see later ) , all variables @xmath122 and all triplets @xmath346 as described above , we create an edge @xmath348 . if at some point in the game there is a variable @xmath122 such that there are less than @xmath75 vertices in @xmath340 with a budget on them , then is sure to win the game .",
    "this gadget is depicted in  [ gadgetgeq2 ] . in the following , we assume that always place at least 2 units of budget on each @xmath340 .",
    "we also assume that if it is the case , then does not go on a @xmath342 vertex ( indeed he will be sure to lose the play if he does so ) .",
    "always places at least 2 units of budget on each @xmath340 .",
    "we also assume that if it is the case , then does not go on a @xmath342 vertex ( indeed he will be sure to lose the play if he does so ) .",
    "the budget in the game is @xmath349 .",
    "let @xmath204 be a vertex that has an outgoing edge towards @xmath339 .",
    "when leaves @xmath204 , in order for not to lose , there must be one unit of budget on @xmath339 and exactly 2 units of budget on each @xmath340 .",
    "now we present another gadget that allows to force , on some vertices , that @xmath350 either @xmath351 and @xmath352 have one unit of budget each , or @xmath353 and @xmath354 have one unit of budget each . to do so , for each pair @xmath355 , we construct a vertex @xmath292 that has two outgoing edges , @xmath356 and @xmath357 .",
    "let @xmath204 be a vertex that has outgoing edges toward each of those @xmath292 vertices .",
    "when leaves @xmath204 , if property @xmath350 is not fulfilled , then there is a pair @xmath355 with zero budget on it . by going on @xmath292 , ensures to reach one of those vertices without budget , hence to win the game .",
    "we let @xmath358 be the set of all those vertices associated with @xmath122 , and we will describe later which vertices have outgoing edges toward @xmath358 .",
    "this gadget is depicted in  [ check(x ) ] .",
    "when leaves a vertex @xmath204 with an outgoing edge toward @xmath358 , we now assume that has made true property @xmath350 for @xmath122 , so that never goes to @xmath358 ( indeed he will be sure to lose if he does so when @xmath350 is fulfilled ) .",
    "let @xmath204 be a vertex that is connected to @xmath339 and to all vertices of @xmath358 for all @xmath122 ( we let @xmath359 ) .",
    "when leaves @xmath204 , in order for not to lose , there must be one unit of budget on @xmath339 , and one unit of budget either on @xmath351 and @xmath352 , or on @xmath360 and @xmath354 , for all @xmath122 .",
    "we call such a configuration a valid one , and remark that there is an immediate bijection from valid configurations and valuations of the variables of the cnf formula .",
    "we call a _ valid vertex _ a vertex connected to @xmath339 and to @xmath361 .",
    "we add a gadget , at the beginning of the game , forcing to distribute the budget accordingly to the initial valuation @xmath362 of the abf game .",
    "the gadget works as follows : crosses @xmath363 safe edges successively , and then goes on a vertex @xmath204 that has edges towards each vertex of the required initial configuration .",
    "has the time to put the required units of budget on this configuration , and is forced to do so , otherwise would be able to reach a final vertex .",
    "therefore , we are sure that once this gadget is left to start playing the game , the configuration is indeed the required one . from vertex @xmath204 , there is also another safe edge going either to the vertex @xmath186 or to the vertex @xmath190 ( the role of both vertices is explained later ) , depending on whether @xmath364 is disprover or prover , respectively .      from the cnf formula of example  [ exa : abf ]",
    ", we construct the graph depicted in  [ fig : exa - abfmain ] . for the sake of clarity ,",
    "we omit the gadgets introduced above .",
    "double bordered vertices represent final vertices , and double arrows represent safe edges .",
    "as stated above , from all vertices depicted here , gadget of  [ gadgetgeq2 ] is used to check that @xmath340 contains at least budget 2 , for all variables @xmath122 .",
    "the subscript in @xmath365 on vertices depicts an edge from the vertex to the corresponding gadget @xmath361 , or vertex @xmath339 .",
    "the two safe vertices @xmath190 and",
    "@xmath189 describe prover s turn to modify one of its variables .",
    "both vertices have an outgoing edge towards @xmath339 ensuring that one pebble is left on it .",
    "@xmath189 is a valid vertex , and @xmath190 is connected to @xmath358 for all variables @xmath122 belonging to disprover .",
    "finally , there is an edge @xmath366 connecting those two vertices .",
    "let @xmath204 be a valid vertex with an outgoing edge @xmath190 and let @xmath367 be the valuation of variables induced by a valid configuration at the moment leaves  @xmath204 .",
    "if goes to the vertex @xmath190 and then to @xmath189 , let @xmath368 be the valuation induced by the valid configuration at the moment leaves @xmath189 .",
    "we claim that between @xmath368 and @xmath367 , at most one variable of prover has been modified . indeed after has arrived in @xmath190 , can not remove the budget on @xmath339 , and he can not take the budget on some @xmath340 to put it on another @xmath369 , with @xmath370 , as there would be only budget 1 on @xmath340 and would win .",
    "therefore , the only possible move for is to redistribute the budget inside some @xmath340 .",
    "moreover , if @xmath122 belongs to disprover after a move , @xmath340 will not satisfy the property @xmath350 and , since @xmath190 is connected to @xmath358 , would win .",
    "therefore , either does nothing , or he redistributes the budget inside some @xmath340 where @xmath122 belongs to prover . if he has done nothing then after has gone to @xmath189 , by the same reasoning , and by the necessity that at this moment the configuration is valid , one can ensure that again does nothing , in which case we would have @xmath371 .",
    "let us focus on the case where prover has performed some redistribution in @xmath340 .",
    "without loss of generality , assume that when leaving @xmath204 , the budget was placed on @xmath353 and @xmath354 , and after leaving @xmath190 the budget is on @xmath351 and @xmath354 . by the same reasoning , we know that after reaching @xmath189 , can only redistribute the budget inside a @xmath369 where @xmath372 belongs to prover . furthermore ,",
    "if @xmath370 then , when leaving @xmath189 , @xmath340 would not satisfy @xmath350 and the configuration would not be valid .",
    "therefore can either choose to have the budget on @xmath353 and @xmath354 , or on @xmath351 and @xmath352 , therefore between @xmath368 and @xmath367 only the valuation of @xmath122 may have change .",
    "from the vertex @xmath186 , chooses a variable @xmath122 of disprover , and goes either to @xmath373 or to @xmath374 : assume without loss of generality that he goes to @xmath375 .",
    "those two vertices have outgoing edges toward @xmath339 and toward @xmath376 for all @xmath370 .",
    "let @xmath367 be the valuation associated with the valid configuration when leaves @xmath186 .",
    "after arriving in @xmath375 , can only redistribute the budget inside @xmath340 . after arriving in @xmath377 ,",
    "is forced to reach a valid valuation , therefore if he has modified the budget distribution in @xmath340 , he must do it again in order for @xmath340 to satisfy @xmath350 .",
    "furthermore , as @xmath377 has outgoing edges to the two final vertices @xmath353 and @xmath354 , there must be a unit of budget on each of those vertices .",
    "therefore , if we let @xmath368 be the valuation induced by the valid configuration when leaves @xmath377 , @xmath368 must be equal to @xmath367 except possibly for @xmath122 that must now be true .      before explaining the whole behaviour of the game ,",
    "let us describe the verification process .",
    "as @xmath184 is a valid vertex , when leaves this vertex , the configuration is valid : we therefore let @xmath126 be the valuation induced by this configuration .",
    "we show here that , from the moment leaves @xmath184 , has a winning strategy if and only if @xmath126 satisfies the cnf formula .",
    "let us first describe this part of the arena .",
    "@xmath184 has one outgoing safe edge toward each vertex @xmath378 associated with the eponymous clause .",
    "those vertices are connected to @xmath361 .",
    "take a clause @xmath379 .",
    "for each strict suffix of this clause containing at least two atoms , i.e. , for each sub - clause of the form @xmath380 with @xmath381 , create an eponymous vertex .",
    "then @xmath378 has a safe edge toward @xmath382 and a ( non safe ) edge toward the rest of the clause , i.e. , nothing if @xmath383 , @xmath384 if @xmath385 , and the vertex ` @xmath386 ' if @xmath387 .",
    "the same principle applies to the vertex ` @xmath386 ' , etc .",
    "for example , take @xmath388 in the cnf formula  @xmath137 .",
    "the vertex @xmath388 has edges toward @xmath168 and toward the vertex ` @xmath389 ' which is the rest of the clause .",
    "then the vertex ` @xmath389 ' has an edge toward @xmath174 and an edge toward @xmath176 .",
    "assume first that @xmath126 satisfies the formula , and let us see how has a winning strategy .",
    "when reaches a clause @xmath378 , we know that it is true in @xmath126 , i.e. , that one of its atom is true . on the game , this is represented by the fact that one of the atoms @xmath390 has non - zero budget on the two associated vertices @xmath391 and @xmath392 . for example assume that goes to @xmath388 and that @xmath2 is true , i.e. , there is some budget on @xmath174 and @xmath175 . will use the budget on @xmath339 to guide in direction of this atom . in the example , when reaches @xmath388 , will put the budget on @xmath170 , then when will go to ` @xmath393 ' , will move the same unit of budget on @xmath176 , forcing to go to @xmath174 .",
    "however , as there was already some budget on @xmath174 , can not leave ` @xmath393 ' without touching some non - zero budget , and loses the safety game .",
    "on the other hand , assume that @xmath126 does not satisfy the formula and let us see how has a winning strategy .",
    "as the valuation does not satisfy the formula , there exists a clause @xmath378 that is false .",
    "goes to this clause .",
    "as it is false , all the atoms are false , in particular , in the game , for all @xmath390 , there is budget 0 on @xmath391 .",
    "will have the following behaviour .",
    "if , after reaching @xmath378 , has not put some budget on @xmath382 , then he goes there and wins , otherwise he goes to the vertex representing the rest of the formula .",
    "from there , the same reasoning applies : if has not put some budget on @xmath384 , then goes there and wins , otherwise he reaches the next sub - clause . at the end , reaches the vertex ` @xmath394 ' , and whatever does , reaches a final vertex with budget 0 .",
    "when leaves vertex @xmath186 , the configuration is valid ; once he reaches @xmath190 , the configuration is valid again , and the difference with the previous one is that the valuation may have changed for at most one variable . once reaching @xmath187 ,",
    "may also have changed the valuation of one of its variables .",
    "when reaches @xmath187 , can only redistribute the budget on @xmath339 .",
    "one can easily see that he has no interest in changing the valuation by putting some budget in @xmath340 for some variable @xmath122 , as at the next step he must put the budget back on @xmath339 .",
    "however , can either put the free unit of budget on the edge @xmath395 , forcing to go to the verification part on the game , or put it on the edge @xmath396 , forcing to remain in the part of the game where they change the valuation .",
    "if has a winning strategy in the abf game , he will apply it , and once the valuation satisfies the formula , he will force to go to the verification part . on the other hand ,",
    "if the formula is never true , is forced to prevent from going to the verification part ( otherwise would reach a final vertex as seen above ) , and the game will last forever , allowing to win .    consider the formula given in example  [ exa : abf ] , i.e. , @xmath397 where @xmath129 , @xmath130 , @xmath131 and @xmath132 .",
    "the @xmath118 constructed from @xmath137 is given in figure  [ fig : exa - abfmain ] .",
    "notice that besides the variable vertices , there is one extra final vertex , @xmath339 . in this construction , saboteur plays the role of prover , whose variables are @xmath142 and @xmath143 , and runner the one of disprover whose variables are @xmath139 and @xmath2 .",
    "for the sake of clarity , edges pointing towards @xmath339 , as well as the two gadgets of figures  [ gadgetgeq2 ] and  [ check(x ) ] are omitted .",
    "consider that from all vertices but the variable ones , one can check condition @xmath161 for all variables , i.e. , in order not to lose , saboteur maintain a non - zero budget on at least two vertices from @xmath162 for all variable @xmath156 .",
    "furthermore , on the bottom right corner of nodes are written the variables for which one can check condition @xmath163 and whether there is an outgoing edge pointing towards @xmath339 , e.g. , when runner is in vertex @xmath398 , saboteur must ensure that @xmath139 and @xmath2 satisfy condition @xmath163 and that there is a non - zero budget on @xmath339 . in the following , we consider those gadgets as constraints , considering that condition  @xmath161 always holds , and for example that if saboteur is in @xmath398 we are sure that @xmath163 holds in @xmath139 and @xmath2 and that there is a non - zero budget in @xmath339 .",
    "if we let @xmath399 be the number of variables ( here @xmath400 ) , let us set the budget to @xmath401 . in this context",
    ", each @xmath162 contains @xmath75 units of budgets , and the remaining unit can be either on @xmath339 , on the outgoing edge of @xmath402 , or on one of the variable vertices .",
    "the initialisation gadget ensures that after some preliminary steps , runner reaches vertex @xmath403 , and there is one unit on @xmath339 , and for each variable there are exactly two units of budget either on @xmath164 or on @xmath165 , depending on the initial configuration of the abf game .",
    "let us now focus on the upper part of the game .",
    "when runner is on vertex @xmath403 , condition @xmath163 must be satisfied for all vertices , and there must be one unit of budget on @xmath339 , therefore the budget describes a valuation of the variables , e.g. , on @xmath404 either the two units of budget are on @xmath164 in which case we consider that @xmath139 is false , or on @xmath165 in which case @xmath139 is true .",
    "assume that @xmath139 is false , and runner wants to change its valuation .",
    "then , he goes to @xmath405 where saboteur has the possibility to move one unit of budget in @xmath404 , and then he goes to @xmath406 . in this configuration condition",
    "@xmath163 must be satisfied for @xmath139 .",
    "furthermore if the two units of budget are still on @xmath407 , then runner wins by going on @xmath170 , thus saboteur has been force to switch the two weights on @xmath408 .",
    "then , a similar process allows saboteur to modify the valuation of one of its variables , when runner goes through @xmath398 and @xmath409 .",
    "those steps simulate one round of the abf game .    on vertex @xmath402 , saboteur may remove the budget on @xmath339 and put it on one of the outgoing edges of choose , thus he can force runner to go either on @xmath403 or on @xmath184 .",
    "if @xmath403 is chosen , both players will simulate another round of the abf game .",
    "if it is @xmath184 , then runner goes to the lower part of the game .    in this part",
    ", runner chooses a clause and then saboteur can move the unit of budget that were on @xmath339 .",
    "for example , assume that runner chooses @xmath138 . as there were a unit of budget on @xmath170",
    ", saboteur can take the budget of @xmath339 to put in on @xmath176 ensuring to win .",
    "observe that the verification part of the game ensures that saboteur wins if , for each clause , at least one of the atoms is true . indeed",
    "if it is the case , whatever clause is chosen by runner , saboteur will be able , as seen above , to prevent runner to play .",
    "on the other hand , if there is a clause where both atom are false , it means than both outgoing edges point towards empty final vertices , therefore whatever saboteur does on the next step , runner will be able to reach one of them , and thus win the game .",
    "we describe how to transform an extended into a regular .",
    "the transformation rids the original sabotage game of its safe edges and final vertices , and replaces them with corresponding gadgets with the same properties .",
    "final vertices are replaced by the gadget shown in  [ finalnodes ] .",
    "more formally , all edges incident in a final vertex are replaced by edges incident on a copy of the gadget .",
    "@xmath139 is the entry point of the gadget , i.e. , any edge pointing towards the final vertex in the extended would now lead to @xmath139 . vertices @xmath410 and @xmath411 are both connected to @xmath412 , for all @xmath413 , and the @xmath412 s form a clique of size @xmath206 .",
    "it should be clear that , if reaches one of the @xmath412 , then he can ensure that the value of the play , from then onwards , is exactly 0 .",
    "indeed , as there are @xmath206 outgoing edges , at least one of them has no budget on it ; if crosses this edge , he reaches another @xmath414 where the same property holds .",
    "thus , one can easily see that when reaches @xmath139 , he can win if and only if there is no budget on either one of the edges : @xmath415 , @xmath416 .",
    "safe edges can be encoded as follows .",
    "assume that we have a safe edge @xmath417 in the extended . to encode it in a standard ( with final vertices , as we have already seen how to encode them",
    ") , we add @xmath206 vertices @xmath418 , and @xmath206 final vertices @xmath419 .",
    "we remove the edge @xmath417 , and add the edges @xmath420 , @xmath421 and @xmath422 , for all @xmath423 .",
    "the gadget is depicted in  [ safeedges ] .",
    "has a strategy to go from @xmath139 to @xmath142 without crossing an edge with non - zero budget , and forcing to move at most one unit of budget inside the game .",
    "that is to say , we have introduced one additional step to get from @xmath139 to @xmath142 , but we will see that can not move more than one unit of budget on edges outside of the gadget , or he loses . indeed , when leaves @xmath139 , there must exist @xmath424 such that there is no budget on edges @xmath420 , @xmath421 , @xmath422 nor on the final vertex @xmath425 .",
    "if goes to @xmath426 , must take a unit of budget and put it either on @xmath421 or on @xmath425 , otherwise can reach @xmath425 and win .",
    "now , is able to reach @xmath142 , and then can redistribute the budget as he wants .",
    "consider an instance @xmath229 of the safety problem with underlying graph @xmath427 , budget @xmath2 , and a starting vertex @xmath234 .",
    "we build a @xmath428 with graph @xmath429 , initial vertex @xmath430 , budget @xmath431 , and cost function @xmath8 as follows : @xmath432 intuitively , the sub - graph of @xmath433 defined by the vertices @xmath233 and @xmath434 form an initial gadget which ensures that can stay out of @xmath227 without paying , as long as there is some weight assigned to edges from @xmath20 .",
    "we also add an exit gadget consisting of the sub - graph of @xmath433 defined by the @xmath435 vertices .",
    "these allow to exit from @xmath227 if `` cheats '' by assigning more weights to edges from @xmath20 than the original bound @xmath2 .",
    "both gadgets are linked by a `` safe path '' formed by the vertices @xmath436 .",
    "note that we add sufficiently many @xmath436 so that , for , getting from any @xmath437 to any @xmath438 is always possible without traversing a weighted edge .",
    "we prove that wins in @xmath439 if and only if @xmath440 .",
    "assume first wins @xmath439 . in @xmath428",
    ", he has no trouble following a path from @xmath430 through the @xmath441 until he arrives on some @xmath442 with budget distribution @xmath443 such that @xmath444 , for some @xmath445 , since there are @xmath446 vertices at each level of the safe path . on his next turn",
    ", he can then move to such an @xmath447 .",
    "as long as the budget distribution has some budget assigned to some edge of @xmath20 , there exists a vertex @xmath448 or @xmath449 with no budget on either in - edges or out - edges , respectively . in the first case , can go to such such an @xmath448 via @xmath450 without paying anything . in the second case , can get to @xmath430 or @xmath451 via @xmath452 and repeat the process , all without paying .",
    "when the budget distribution has no weight assigned to edges of @xmath20 , can follow his strategy from @xmath439  with the exception that he plays his first move from @xmath447 instead of @xmath234  as long as keeps at most @xmath2 budget units on edges of @xmath20 .",
    "when this is no longer the case , say is on a vertex @xmath453 , with budget distribution @xmath454 , that means there are at most @xmath455 budget units on other edges , hence there is a vertex @xmath452 such that @xmath456",
    ". then moves to @xmath452 . on his next turn",
    ", he can then move to either @xmath430 or @xmath451 , following an edge with no weight on it .",
    "then can restart this strategy .",
    "assume now , that wins @xmath439 .",
    "from the start of the game , will have to traverse one @xmath436 for all @xmath457 from @xmath431 to @xmath9 .",
    "when is on a vertex @xmath436 for @xmath457 between @xmath206 and @xmath431 , puts a budget unit on the edge @xmath458 and leaves it there .",
    "similarly , when is on a vertex @xmath441 for @xmath457 between @xmath9 and @xmath2 , puts a unit of budget back on the edge @xmath459 and leaves it there . when finally reaches some @xmath448 , passes .",
    "then , if goes to @xmath460 or @xmath461 , can assign some budget to @xmath462 or @xmath463 and put it back where it was after s next move , where he will inevitably cross a weighted edge , then wait until gets back to some @xmath448 .",
    "alternatively , from @xmath448 , can move to a vertex in @xmath227 . in this case , follows his strategy from @xmath439 , using budget units assigned to edges of the form @xmath464 when needed , until crosses an edge of @xmath20 with some weight on it or gets to some @xmath452 . in the latter case , can react the same way as if was coming from @xmath448 . in the former case , can start putting some weights on all edges of @xmath20 until gets to some @xmath452 .",
    "if never does , he will pay one at each step , which is enough for .",
    "otherwise , goes to some @xmath452 , then to @xmath430 or @xmath451 , where can restart his strategy .",
    "for @xmath5 , we claim that @xmath250 , where @xmath251 is the set of edges reachable from @xmath234 .",
    "indeed , for a given budget distribution @xmath38 , simply goes towards the edge reachable from @xmath234 with the least budget possible ; therefore , must place _ equal _ budget on each such edge . with a budget @xmath2 , he can ensure @xmath465 on every edge ( some edges may contain a bigger portion of the budget , but some edges will always have at most @xmath465 ) .",
    "hence , deciding the static threshold problem for @xmath5 amounts to computing the set @xmath251 ( can be done in linear time with a depth - first - search algorithm ) , and checking whether @xmath466 .    for @xmath7",
    ", we must refine the study by considering strongly connected components .",
    "precisely , we claim that @xmath252 , where @xmath253 is the set of edges reachable from @xmath234 and contained in a strongly connected component of the graph .",
    "indeed , for a given budget distribution @xmath38 , simply goes towards a cycle reachable from @xmath234 containing an edge with the least budget @xmath467 possible : he will visit infinitely often this edge , ensuring an inferior limit at most @xmath467 .",
    "such a cycle is included in a strongly connected component , and reciprocally , every edge of a strongly connected component is part of a cycle .",
    "hence , must secure _ equal _ budget on each edge of every strongly connected components . then , deciding the static threshold problem for @xmath7 amounts to computing the set @xmath253 ( can be done in linear time , e.g. , with tarjan s algorithm ) , and checking whether @xmath468 .      for the membership in @xmath258",
    ", we can first guess a budget distribution @xmath38 ( that is of size polynomial ) , and then compute the value of the one - player ( since player @xmath259has no choices anymore ) quantitative game @xmath242 , to check if it is greater than  @xmath98 : computing the value of such a game can be done in polynomial time for the four cost functions we consider ( see  @xcite ) .    to prove the @xmath258-hardness for cost functions @xmath8 and @xmath78 , we give a reduction from the following problem .",
    "the feedback arc set problem consists in , given as input a directed graph @xmath469 and a threshold @xmath261 , determining whether there is a set @xmath262 of @xmath3 edges of @xmath238 such that @xmath263 is acyclic .",
    "karp showed in @xcite that the feedback arc set problem is @xmath258-complete .",
    "we now use the feedback arc set problem to prove the results of -hardness of the static threshold problem .",
    "let us consider an instance of the feedback arc set problem , given by a directed graph @xmath260 and a natural integer @xmath264 .",
    "we suppose , without loss of generality , the existence of a vertex @xmath234 , without any in - going edges , and linked with an edge to every other vertex : since @xmath234 is not included in any cycle , the set @xmath262 of the output of the problem has no interest at containing any of the edges added in this way .",
    "we then construct a @xmath267 with @xmath268 .",
    "it is not difficult to show that @xmath269 if and only if there exists a set @xmath262 of @xmath3 edges of @xmath238 such that @xmath263 is acyclic .",
    "indeed , @xmath269 implies that there exists a distribution @xmath470 such that for all strategies @xmath93 of , @xmath471 . noticing that every vertex is reachable from the initial vertex @xmath234 , and considering memoryless strategies of ( such that @xmath246 ends with a simple cycle of the graph )",
    ", we show that every cycle contains at least one edge with a non - zero budget .",
    "the set @xmath472 is then a valid output for the feedback arc set problem . for the reciprocal implication ,",
    "we simply assign a budget @xmath9 to each vertex of the set @xmath262 .",
    "the result for @xmath6 and @xmath103 is then obtained by a slight modification of the previous proof .",
    "let @xmath473 be the obtained from @xmath35 by transforming every edge @xmath266 into a safe edge ( see lemma  [ lem : safe - extended - wlog ] ) .",
    "without loss of generality , we can now assume that @xmath38 never assigns budget to the edges @xmath474 .",
    "we also note that @xmath234 has no in - going edges so that every play in @xmath475 traverses a safe edge at most once .",
    "we claim that @xmath476 if and only if there exists a set @xmath262 of @xmath3 edges of @xmath238 such that @xmath263 is acyclic . indeed , if @xmath477 , considering @xmath472 , it is easy to show that @xmath263 is acyclic : if not , may simply jump from @xmath234 , with a safe edge , to one of the vertices of a cycle of @xmath263 , and then loop in this cycle forever , without visiting any edge with non - zero budget . for the reciprocal implication , again , it suffices to assign a budget @xmath9 to each vertex of @xmath262 .",
    "the result for @xmath104 follows from the same reduction together with lemma  [ lem : sup - to - ds ] .    in the following ,",
    "we suppose , without loss of generality , the existence of a vertex @xmath234 in every instance of the feedback arc set problem , without any in - going edges , and linked with an edge to every other vertex : since @xmath234 is not included in any cycle , the set @xmath262 of the output of the problem has no interest at containing any of the edges added in this way .",
    "[ lem : static - lsup ] for cost functions @xmath8 and @xmath78 , the static threshold problem for is -hard .",
    "we fix an instance of the feedback arc set problem , given by a directed graph @xmath260 and a natural integer @xmath264 .",
    "we then construct a @xmath267 with @xmath234 the vertex connected to every other vertex of @xmath238 , and @xmath268 .",
    "we show that @xmath269 if , and only if , there exists a set @xmath262 of @xmath3 edges of @xmath238 such that @xmath263 is acyclic .",
    "suppose first that there exists such a set @xmath262 of @xmath3 edges such that @xmath263 is acyclic .",
    "then , by considering the distribution @xmath38 of the budget over the @xmath3 edges of @xmath262 , we obtain a game in which every cycle contains at least one edge of @xmath262 , i.e. , every cycle has a positive weight .",
    "for both cost functions , this implies that @xmath269 .",
    "reciprocally , suppose that @xmath269 .",
    "this means that there exist a distribution @xmath470 such that for all strategy @xmath93 of , @xmath471 .",
    "notice that from the initial vertex @xmath234 , all other vertices are reachable in @xmath238 .",
    "hence , considering memoryless strategies of ( such that @xmath246 ends with a simple cycle of the graph ) , this shows that every cycle contains at least one edge with a non - zero budget .",
    "the set @xmath472 is a valid output for the feedback arc set problem .",
    "the result for @xmath6 and @xmath103 is then obtained by a slight modification of the previous proof .    for cost functions @xmath6 and @xmath104 ( for all @xmath18 ) , the static threshold problem for is -hard .    as before",
    ", we fix an instance of the feedback arc set problem , given by a directed graph @xmath260 and a natural integer @xmath264 .",
    "we suppose again that @xmath234 is connected to every other vertex , but has no in - going edge .",
    "let @xmath478 be the obtained from @xmath238 by transforming every edge @xmath266 into a safe edge ( see lemma  [ lem : safe - extended - wlog ] ) .",
    "without loss of generality , we can now assume that @xmath38 never assigns budget to the edges @xmath479 .",
    "we also note that @xmath234 has no in - going edges so that every play in @xmath480 traverses a safe edge at most once .",
    "we now show that @xmath481 if , and only if , there exists a set @xmath482 of @xmath3 edges of @xmath238 such that @xmath483 is acyclic .",
    "assume first that there exists a set @xmath482 of @xmath3 edges of @xmath238 such that @xmath483 is acyclic .",
    "then , using the same argument as in the proof of lemma  [ lem : static - lsup ] , we know that the budget distribution @xmath38 over edges of @xmath482 ensures that every strategy of in @xmath480 visits one of the cycles , each containing an edge with non - zero budget : we obtain @xmath484 .",
    "reciprocally , assume that @xmath484 .",
    "this means that there exists a budget distribution @xmath38 in @xmath480 such that every strategy of in @xmath242 visits an edge with non - zero budget . as claimed before",
    ", we may suppose that @xmath38 does not allocate any budget on edges of @xmath485 .",
    "letting @xmath486 , we claim that @xmath483 is acyclic . indeed ,",
    "if it is not the case , consider a cycle of @xmath483 : then , may simply jump from @xmath234 , with a safe edge , to one of the vertices of the cycle , and then loop in this cycle forever , without visiting any edge with non - zero budget .",
    "this contradicts the fact that @xmath484 .",
    "hence , @xmath482 is a valid output of the feedback arc set problem .",
    "the result for @xmath104 follows from the same reduction together with lemma  [ lem : sup - to - ds ] .",
    "in this section we increase the expressiveness of the definition of sabotage games , and show that the threshold problem for these new games are still in .",
    "the lower bound is immediate since they are extensions of previous problems shown -hard in the rest of the article .",
    "one can see a sabotage game as a system in which a controller tries to evolve while avoiding as much as possible the weights put by saboteur .",
    "the vertices of the graph represent configurations of the system , edges represent the actions , and the budget of the saboteur may represent several problems that can occur during the execution .",
    "for example , it may describe a number of failures that can happen at the same time , or in a much quantitative way , it may represent how much some elements of the systems are overload , and then how much it would cost , in terms of time or energy , to use them .",
    "we propose to look at sabotage as a particular semantics of systems . based on the observation of appendix  [ sab2games ]",
    ", remember that one can define the semantics of a @xmath316 as a quantitative two - player game @xmath73 . if we split the model ( the graph @xmath487 with initial vertex @xmath234 ) , from the sabotage parameters ( budget @xmath488 , initial distribution @xmath29 , and cost function @xmath30 ) , we can define : @xmath489 we have seen that the value of the @xmath490 is identical to the value of the quantitative two - player game @xmath491 .    from a model point of view , graphs  which can be viewed as one - player games with trivial winning conditions  are quite limited . in more realistic models",
    ", we may be interested as modelling systems with uncontrollable actions ( i.e. , as two - player games ) , and where the controller has a specific boolean goal to achieve , instead of simply visiting the graph _ ad vitam ternam_. a more realistic goal is usually expressed via ltl formulas , that can be modelled into qualitative games with parity winning conditions , as we show in the following .      as a complement of the quantitative two - player games defined in appendix  [ sec : qgames - sem ]",
    ", we now focus on _ qualitative _ two - player games games .",
    "consider a weighted arena @xmath273 as before . in the qualitative setting , we are no longer interested in associating a value to each play ( in particular , the weight function @xmath282 is of no use here ) , but simply stating whether a play is winning or not for a player .",
    "formally , a _ winning condition _ is a subset of @xmath492 containing the set of winning plays .",
    "a qualitative game is a pair @xmath493 consisting of an arena @xmath238 and a winning condition @xmath142 .",
    "a play @xmath216 is declared winning for @xmath271 ( respectively , for @xmath272 ) if @xmath494 ( respectively , @xmath495 ) . a strategy @xmath496 of player",
    "@xmath292 is winning for @xmath292 if all plays @xmath497 are winning ; a play / strategy is losing for player @xmath292 otherwise .",
    "we say that player @xmath292 wins ( respectively , loses ) the game if he has ( respectively , does not have ) a winning strategy . here",
    "are some usual winning conditions considered widely in the literature :    * for all @xmath498 or @xmath499 , @xmath500 is the set of plays that contain an occurrence of @xmath148 . * for all @xmath498 or @xmath499 , @xmath501 is the set of plays that do not contain any occurrence of @xmath148 . * for all @xmath498 or @xmath499 , @xmath502 is the set of plays that contain infinitely many occurrences of @xmath148 . * for all @xmath498 or @xmath499 , @xmath503 is the set of plays that contain only finitely many ( possibly none ) occurrences of @xmath148 .",
    "* for all @xmath504 ( such mapping is called a _ colouring function _ ) , @xmath505 is the set of plays @xmath308 such that the greatest colour appearing infinitely often in the sequence @xmath506 is even . given a colouring function @xmath507 , we let @xmath508 be the number of different colours of the vertices , i.e. , @xmath509 . * for all value function @xmath30 , and @xmath510 , @xmath511 is the set of plays @xmath216 such that @xmath512 .          in order to apply a sabotage semantics to qualitative game , where @xmath271 wants to satisfy a condition while minimising a cost",
    ", one must study some mixture between qualitative and quantitative aspects .",
    "we see how one can combine winning conditions and value functions , as introduced in @xcite .",
    "intuitively , in a weighted arena @xmath273 with a winning condition @xmath142 and a value function @xmath30 , @xmath271 could want to satisfy @xmath142 while minimising @xmath30 .",
    "we formalise this by building a new value function , denoted by @xmath513 , and defined by @xmath514 if @xmath495 , and @xmath515 otherwise . the quantitative two - player game @xmath516 now contains the combination of both objectives .",
    "we may finally introduce a sabotage semantics for parity games . instead of deciding whether a player has a winning strategy , which would be a standard semantics , we decide whether he has a winning strategy that guarantees ( or simply avoids in the case of a threshold @xmath117 ) a certain threshold over the quantity of penalties when the game is subject to failures .",
    "formally , given a two - player parity game @xmath517 , a budget @xmath488 , an initial distribution @xmath29 , and a cost function @xmath518 , the _",
    "@xmath519-sabotage semantics of @xmath238 _ is the quantitative game @xmath520 where :    * @xmath521 , and @xmath522 : with respect to the one - player case of appendix  [ sec : qgames - sem ] , we add some vertices to player @xmath259 that has now in charge both the moves of the environment ( uncontrollable actions ) , and redistributions of ; * @xmath523 ; * @xmath524 ; * @xmath525 is the initial configuration ; * @xmath526 .            to prove this theorem , we first establish a crude ( but sufficient ) upper bound on the complexity of solving quantitative games obtained by combining parity winning conditions and the previous cost functions .",
    "we start with the case @xmath533 . in",
    "@xcite it has been shown that one can decide who wins in a qualitative game with a parity condition with a complexity in @xmath534 . in  @xcite , it has been shown that one can compute the value of a quantitative game with an average cost function with a complexity in @xmath535 .",
    "the combination has been studied thoroughly in  @xcite .",
    "there , it has been shown that if one can solve average cost games in @xmath536 and parity games in @xmath537 , then one can solve games @xmath538 with a complexity in @xmath539 . by combining this result with the two above",
    ", we obtain a complexity in @xmath540 .",
    "we then turn to the case @xmath541 .",
    "our proof goes by encoding @xmath30 into a qualitative winning condition , and then using classical results of algorithmic game theory .",
    "observe that deciding the threshold problem in the game @xmath530 amounts to solving the following problem :        notice that @xmath148 is a subset of edges , and not vertices .",
    "however , it is easy to transform the problem into an equivalent problem where @xmath148 is indeed a subset of edges .",
    "informally , it suffices to enrich the vertex set by letting @xmath546 , letting @xmath547 the initial vertex instead of @xmath234 , and replacing each edge @xmath33 by the set of edges in @xmath262 :        now to conclude the proof , we describe two polynomials @xmath554 and @xmath555 such that deciding if @xmath289can win qualitative problem with a winning condition obtained by the intersection of a parity condition and another one from @xmath556 with @xmath557 can be done with a complexity in @xmath558 .",
    "we let @xmath559 the arena on which we play ( the weight function is of no use anymore ) .    for @xmath500 ( respectively , @xmath501 )",
    ", one can construct in polynomial time a parity game @xmath560 such that @xmath561 , @xmath562 , and @xmath289wins in @xmath563 if and only if @xmath289wins in @xmath564 ( respectively , @xmath565 ) . for @xmath501",
    ", we remove for each vertex @xmath566 every outgoing edge in @xmath148 , and add a self loop , colouring them with an odd colour . hence",
    ", if a play reaches such a vertex the play is losing , and otherwise , it is winning if and only if the greatest colour seen infinitely often is even . for @xmath500 , we create two copies of the game . in the first copy ,",
    "every colour is odd , and for every vertex @xmath204 in @xmath148 the outgoing edges are modified to go to the same target but in the second copy . in the second copy",
    ", nothing is changed .",
    "the play start in the first copy . in order to win",
    ", @xmath271 must go to the second copy ( otherwise the colour will always be odd ) , i.e. , must reach a vertex in @xmath148 and then the greatest colour seen infinitely often must be even . as we have seen above parity games",
    "can be solved @xmath567 which concludes the proof for these cases .",
    "for @xmath502 and @xmath503 , there exist two colouring functions @xmath568 and @xmath569 such that : @xmath570 , @xmath571 , and @xmath572 .",
    "indeed , for @xmath566 , simply consider @xmath573 and @xmath574 , and for @xmath575 consider @xmath576 and @xmath577",
    ". therefore solving a game with a winning condition of the form @xmath578 or @xmath579 can be turned into solving a game with a winning condition of the form @xmath580 with @xmath581 .",
    "such games have been studied in  @xcite .",
    "they have shown that they can be solved with a complexity in @xmath582 , which concludes the proof of the proposition .      from a parity game @xmath527 , a budget @xmath2 , an initial distribution @xmath583 , and a threshold @xmath98",
    ", one can construct @xmath584 in exponential time .",
    "proposition  [ solvingquantpar ] shows that we can decide who wins from @xmath585 in this game with a complexity in @xmath586 .",
    "we have @xmath587 and @xmath588 .",
    "furthermore @xmath589 . as @xmath590 and @xmath591",
    ", we have @xmath592 .",
    "since @xmath2 is given in binary , we can suppose that @xmath2 is at most exponential in the size of the input of the problem , which , in summary , shows that we can solve the threshold problem in exponential time .",
    "the linear temporal logic ( ltl ) is a logic whose formulas describe properties of infinite sequences of predicate . more formally , given a game arena @xmath238 , a mapping @xmath593 from vertices to a set of predicate @xmath594 and an ltl formula @xmath595 , the winning condition @xmath596 is the set of plays @xmath597 such that the sequence @xmath598 satisfies @xmath595 .",
    "solving ltl - games , with their standard semantics , is already 2-@xmath105-complete  @xcite .",
    "the 2-@xmath105 membership can be obtained by turning an ltl formula @xmath595 into a parity automaton whose size is doubly exponential in the size of @xmath595 , and solving the parity game obtained by taking the product of the game arena with the automaton .",
    "when applying a sabotage semantics to an ltl game @xmath35 , we obtain a game @xmath73 of size exponential in the initial arena , and whose value function is a combination of a cost function and the ltl formula . by applying the same method as above , using the parity automaton associated with the formula and taking the product of the automaton with @xmath73 , we obtain a game whose size is doubly exponential in the size of @xmath35 , and whose value function is a combination of a cost function and a parity objective . applying the above result , one can show that this game can be solved in 2-@xmath105 with respect to the size of @xmath35 ."
  ],
  "abstract_text": [
    "<S> we study a generalisation of sabotage games , a model of dynamic network games introduced by van benthem  @xcite . </S>",
    "<S> the original definition of the game is inherently finite and therefore does not allow one to model infinite processes . </S>",
    "<S> we propose an extension of the sabotage games in which the first player ( ) traverses an arena with dynamic weights determined by the second player ( ) . in our model of _ quantitative sabotage games _ , is now given a budget that he can distribute amongst the edges of the graph , whilst attempts to minimise the quantity of budget witnessed while completing his task . </S>",
    "<S> we show that , on the one hand , for most of the classical cost functions considered in the literature , the problem of determining if has a strategy to ensure a cost below some threshold is -complete . on the other hand , if the budget of is fixed a priori , then the problem is in @xmath0 for most cost functions . </S>",
    "<S> finally , we show that restricting the dynamics of the game also leads to better complexity .    </S>",
    "<S> [ theorem]proposition [ theorem]claim    # 1@xmath1 </S>"
  ]
}