{
  "article_text": [
    "[ sec : intro ] image processing and analysis are fields of computer science whose objective is to enhance digital images and extract information from them  @xcite .",
    "this allows automatic or semi - automatic identification , classification or characterization of objects and patterns .",
    "some interesting applications are biometry systems ( e.g. fingerprint and iris recognition ) , satellite and microscope image analysis , diagnosis from medical images , and more .",
    "another example is special effect filtering , usually found in image manipulation software such as the gimp  @xcite or photoshop .",
    "a remarkable characteristic of this field is its overwhelming complexity .",
    "many image processing techniques are based on sophisticated mathematical and computational concepts , such as the fourier transform .",
    "all this is combined with deep biological , psychological and probabilistic principles underlying the way animals identify and recognize objects .",
    "this makes implementation a challenging ( frequently tedious ) task , specially with traditional languages such as c or fortran . as a consequence ,",
    "the area had been somewhat limited to a small community of scientists and programming experts .",
    "the difficulties involving the development of software in general and the advances in hardware power gave rise to a quite recent trend in programing  @xcite  prototyping with interpreted , easy - to - use languages , such as python , perl , lua , and tcl / tk . different algorithms and solutions for a given problem",
    "are easily developed and validated using these environments .",
    "when a solution finally works as expected , the final application may be written in a traditional compiled language , such as c. many programmers also embed an interpreter in their final application , to reuse the large amount of functionality available in these environments without having to rewrite it all .    following this trend , the inherent complexity of scientific applications called for specific scripting technologies . among them",
    "is the popular ( and rather expensive ) matlab  @xcite , very widely used in science , engineering , and the industry .",
    "fortunately there are free software alternatives such as octave  @xcite , numerical python  @xcite , and scilab  @xcite  the one we will be talking about in this paper .",
    "features common to all these numerical prototyping environments are convenient matrix manipulation enforced by a suitable language , as well as tools for scientific visualization , debugging , and a great ammount of easy - to - use libraries .",
    "they may be used interactively or programmed from a separate file ( the ` script ' or macro ) . in particular , they enable development of image processing applications with much less burden to the programmer . hence , these tools have in fact been the standard prototyping solutions in the field .",
    "scilab is a free software created at inria ",
    "france for prototyping and numerical processing .",
    "it is much like matlab , and already has a rich set of functionalities .",
    "currently in version 5.4 , scilab have been widely used in unix - like systems .",
    "it has been adopted in many universities and companies around the world . given its features to assist numerical programming , as we just said , it has tremendous potential to be used for image processing , both educationally and as a prototyping language to develop and test solutions .",
    "as far as we know , currently neither octave or python match the richness and plain simplicity of scilab functionality for scientific computing and engineering .",
    "the following listing summarizes scilab s features and how they compare to matlab s :    * * expressive programming language * with similar syntax to matlab s , although not identical .",
    "it presents many sophisticated construct improvements over matlab , having relatively small drawbacks .",
    "moreover , operations are expressed in much the same way they are usually written mathematically , which enforces simplicity and organization . * * elaborate data structures : * polynomial , complex and string matrices , lists , linear systems , records ( tlists ) , and graphs . in these subjects",
    "there are significant improvements over matlab . *",
    "* graphical and scientific visualization library : * 2d , 3d , and animations . even though the graphical package is not as stable as matlab ,",
    "it is useful and complete . it has been continually improved and optimized .",
    "the gui itself has now been written in java , and looks and feels very similar  if not better  than matlab . *",
    "* modular structure : * scilab allows easy interfacing to fortran and c using dynamic linking . * * many sophisticated libraries : * * * * linear algebra * , including sparse matrices . * * * signal processing * with a comprehensive manual ; * * * statistics * * * * scicos * , a dynamic systems modeler and simulator , similar to matlab s simulink . * * * metanet * : graphs and networks , including a graphical editor * * * control * * * * simulation and modeling * : ode solver , etc . * * *",
    "optimization * ( differential and non - differential ) * * * interface with symbolic algebra * packages such as maple * * * interface with tcl / tk * , useful for building gui s * * * lmi optimization * ( linear matrix inequalities ) * * * many contributed libraries : * genetic algorithms , neural networks , plotting enhancements , other numerical methods , and , of course , image processing .",
    "scilab s potential for imaging and its maturity under gnu / linux systems motivated the creation of sip  the scilab image processing toolbox  @xcite .",
    "sip extends scilab with many routines to deal with image files and analyze them .",
    "examples of its main features are :    * * functions to read and write many image formats .",
    "* almost 100 major formats are supported , including jpeg , png , bmp , gif , and tiff  due to the underlying imagemagick library  @xcite . *",
    "* filters : * gaussian blurring , median , laplacian , artistic effects , de - noising by min - max curvature flow . *",
    "* edge detection : * sobel , fourier derivatives , canny . * * geometric transforms : * rotation , zoom , shearing , and general affine . *",
    "* image segmentation : * watersheds , adaptive thresholding . *",
    "* mathematical morphology : * dilation , erosion , thinning , etc . , using state - of - the - art euclidean algorithms for circular structuring elements . * * shape analysis : * perimeter , border tracking , state - of - the - art fast skeletonization with multiscale pruning , curvature , state - of - the - art euclidean distance transforms  @xcite ( including fast distance transforms up to a given distance ) , fractal dimension . *",
    "* enhancement : * histogram equalization , contrast manipulation . * * other operators : * hough transform , noise generation , image display , interferometry operations ( e.g. phase unwrapping ) , etc . *",
    "* it s fast : * heavier operations are implemented in c language , allowing for efficiency .",
    "many operations use state - of - the - art efficient algorithms , some of which are so new or advanced as to be absent in most if not all proprietary image analysis software . * * it s well documented : * every function has a help page containing its reference and a practical example . * * it s free : * general public license ( gpl ) . * * it s easy : * useful for fast programming and experimentation .",
    "all these tools can be easily used interactively or from scilab scripts , even though some would extremely complex to implement from scratch .",
    "thus , a programmer without specialized knowledge may readily experiment with different techniques to solve his particular problem .    in this paper",
    "we show how to use sip / scilab and demonstrate their benefits through a hands - on approach .",
    "the examples will show how complex operations seem approachable under the expressiveness of the environment .",
    "rather than worrying about a single imaging operator , the focus is shifted to the concatenation of various operators into a useful solution .",
    "we start with brief directions on how to install scilab under linux and present a tutorial introduction to it .",
    "we then show how to install sip and use it in three practical problems from image analysis and processing : edge detection , ocr , and separation of overlapping blood cells .",
    "the last two illustrate techniques like noise removal , skeletonization , and object segmentation .",
    "to build a special version of scilab by compiling the sourcecode , the user must have all development packages installed in the system ( gcc and gfortran compilers , and so on ) .",
    "after downloading and unpacking the source tarball , one types the following inside scilab s directory :    ....        $   ./configure        $   make all        $   make install ....    to start scilab :    ....        $ scilab ....    one may enter commands in the scilab window , as shown in the following section .",
    "there is an important add - on toolbox called `` enrico '' which greatly enhances scilab s graphical capabilities .",
    "it is very simple to install , and may be downloaded at : http://www.weizmann.ac.il/  fesegre / scistuff.html    the user must unpack it , start scilab , then type :    .... -- > exec ' /path / to / enrico / builder.sce ' ; ....    this compiles the toolbox .",
    "the user may now load it :    .... -- > exec ' /path / to / enrico / loader.sce ' ; ....    this command may be placed in the `` .scilab '' file to load it automatically whenever one enters scilab . in section  [ sec : blobs ] we show how to render a 3d surface using this toolbox ( see figure  [ fig : cells : dt ] ) .",
    "in this section we present some examples to illustrate the ease of doing programming and calculations with scilab .",
    "we hope to attest its particularly great potential for programming and for developing image analysis solutions .",
    "initially , we use scilab in interactive mode .",
    "commands are typed and executed directly in scilab s shell .",
    "a vector is created like this :    .... -- > a = [ 1 2 3 4 ]   a   =    !    1 .     2 .     3 .     4",
    "....    user commands are typed at the `` ",
    "> ` ' prompt ; scilab s responses have no preceding prompts .",
    "to define a column vector , we use commas :    .... -- > a = [ 1 ; 2 ; 3 ; 4 ]   a   =    !    1 . ! !    2 . ! !    3 . ! !    4 . !",
    "this same vector could have been created using the ` : ' ( colon ) operator :    .... -- > a = 1:4   a   =    !    1 .     2 .     3 .     4 . ! ....",
    "matrices are also very simple to define , as shown below :    .... -- > a = [ 1 2 ; 3 4 ]   a   =    !    1 .     2 .",
    "scilab have convenient operators for naturally manipulating matrices . for instance , to obtain the trasposed matrix of @xmath0 :    .... -- >",
    "b = a '   b   =    !    1 .     3 . ! !",
    "2 .     4 . !",
    "....    in this other example",
    ", we perform matrix multiplication of @xmath0 and @xmath1 :    .... -- > c = a*b   c   =    !    5 .      11 . !",
    "!    11 .     25 . !",
    "scilab also has many functions readily available for usage .",
    "below we calculate the determinant of @xmath2 :    .... -- > d = det(c )",
    "d   =        4 . ....",
    "in addition to the simplicity of operating with arrays , there are many other mathematical functions , as well as visualization facilities .",
    "we will now show this by a simple example about the fourier transform .    as the first step , we create a vector by summing three sampled cosines :    .... -- > a   = 1:32 ;   // an array with 32 elements ( 1 to 32 ) .",
    "-- > c1 = cos(a/10 ) ;   -- > c2 = cos(a/2 ) ; -- > c3 = cos(a/6 ) ; -- > c   = c1 + c2 + c3 ; ....    now we plot the vectors .",
    "we ll use a simple function called ` plot ` for this , together with the command ` subplot ` to divide the graphical window .",
    "the commands below yield figure  [ fig : plotsins ] .    .... -- >",
    "subplot(2,2,1 ) , plot(c1 ) ; -- >",
    "subplot(2,2,2 ) , plot(c2 ) ; -- >",
    "subplot(2,2,3 ) , plot(c3 ) ; -- >",
    "subplot(2,2,4 ) , plot(c ) ; ....    we will now apply the fourier transform to the vector ` c ` , using function ` fft ` from the signal processing toolbox .",
    "notice how simple it is :    .... -- >",
    "hc = fft(c,-1 ) ; ....    observe that the second parameter indicates the sign of the transform s exponent  it s not the inverse transform .",
    "vector ` hc ` is made of complex numbers representing the result of the ` fft ` applied to ` c ` .",
    "to see the results of the transform , lets use ` plot ` .",
    "since a complex vector is composed of real and imaginary parts , we use the functions ` real ` and ` imag ` to return the real and imaginary components of the array .",
    "figure  [ fig : realimag ] shows the plots of the real and imaginary parts of ` hc ` .    .... -- > subplot(1,2,1 ) , plot(real(fftshift(hc ) ) ) ; -- > subplot(1,2,2 ) , plot(imag(fftshift(hc ) ) ) ; ....    to finish this example , we perform the inverse fft and compare the result with the original vector :    .... -- > fc = fft(hc,1 ) ; -- >",
    "subplot(1,2,1 ) , plot(fc ) ; -- >",
    "subplot(1,2,2 ) , plot(c ) ; ....",
    "the previous example shows how scilab is really an easy and powerful for numerical programming and array manipulation",
    ". it would be great to use scilab s power and convenience to process digital images , since any image is an array of pixels . to do this ,",
    "the sip ( scilab image processing toolbox ) was created ( cf . section  [ sec : intro ] ) .",
    "it extends scilab with functions to read and write images stored in almost any popular format ( over 80 ) , including png , jpeg , bmp , and tiff .",
    "sip also provides a rich set of ready - to - use operations for digital image enhancement and analysis , useful for many practical problems .",
    "it is straightforward to install sip under linux .",
    "binary packages are provided for intel pentium and compatible processors . to install them ,",
    "the user first downloads and unpacks the tarball . inside scilab ,",
    "one types :    .... $   exec /path / to / sip / loader.sce ; ....    this loads the toolbox . this command may be placed in the file ` .scilab ` under the user s home directory to automatically load the toolbox whenever scilab is entered .    for non - intel architectures",
    ", sip must be installed from source , which is also necessary to install the latest development version  @xcite .",
    "this requires first installing the dependencies , in this order : imagemagick , animal  @xcite , opencv ( optional ) , and finally sip proper ( cf .",
    "the links section ) .",
    "once downloaded and unpacked , they are installed like this :    imagemagick ( responsible for the file format support ) :    ....        $   ./configure --enable - shared        $   make        $   make install        $   ldconfig ....    the latter command updates the system cache of libraries .",
    "animal ( core c routines ) :    ....        $   ./configure        $   make        $   make install        $   ldconfig ....    sip ( the toolbox proper ) :    ....        $   ./configure        $   make        $   make install ....    sip is by default installed under scilab s directory at `` contrib / sip ` ' . now",
    "the toolbox may be loaded just like the binary version .",
    "alternatively , one may type :    ....        $   make autoload ....    which will write to the file ` .scilab ` and make the toolbox load automatically every time you enter scilab .",
    "more details are found in the file ` install.txt ` included in the sip sourcecode package .     to check if the installation went well , the user steps through sip s demos :    .... $   exec(sipdemo ) ; ....    which shows the basics of image structure and manipulation .",
    "to read an image into a scilab variable , one must type , for example :    .... -- > i m = imread('myimage.png ' ) ; ....    for grayscale or truecolor images . or    .... -- >",
    "[ im , map ] = imread('myimage.png ' ) ; ....    for pseudocolor images .",
    "the file format is automatically detected . from now on the image is in memory , stored as an array of pixels .",
    "we call _ grayscale _ those images represented as a 2d array with values from @xmath3 to @xmath4 @xmath5 . _",
    "truecolor _ images are made of three grayscale images , one for each channel ( red , green and blue ) , represented in a 3d array @xmath6 .",
    "_ pseudocolor _ images , also known as paletted or indexed images , are made of two arrays : index and map .",
    "the map is an @xmath7 array with @xmath8 colors , while the index array is a 2d array whose entries point to a color in the colormap .",
    "further details are in the introductory demo that comes with sip .    to show a truecolor or grayscale .",
    "+    to find the edges , we use the `` edge '' command :    .... -- > b = edge(a,'sobel',0.15 ) ;     -- > imshow(b,2 ) ; ....    the parameters means to find edges using the sobel filter and a threshold at @xmath9 intensity level .",
    "figure  [ fig : edges ] shows the result of this technique .",
    "another common operation with images is rotation and scaling .",
    "the ` mogrify ` command wraps many functionalities from the imagemagick library , and may be used to rotate the image .",
    "we must first put the image in the @xmath3 ",
    "@xmath4 range , because mogrify and other routines such as imwrite assumes 16bit graylevels .",
    "we just multiply the image by @xmath10 , since @xmath11 :    .... -- > a = a*257 ;    // normalizes image to 0 - 65535 range -- > c = mogrify(a , ' -rotate 30 ' ) ;    //",
    "rotates 30 degrees -- > imshow(c , [ ] ) ;   // \"",
    "[ ] \" stands for   rescaled   ....",
    "figure  [ fig : rotated ] shows the color image rotated in 30 degrees clockwise . to rotate the color image ,",
    "the same steps may be repeated to each image channel .",
    "let us now move on to more interesting operations . figure  [ fig : ocr : a ] shows an image of the letter a. to follow this example , the input image can be obtained from the following address :    ` http://siptoolbox.sourceforge.net/tutorial/images/a.png `    read the image with the following commands :    ....   a = imread('a.png ' ) ;   a = im2gray(a ) ;     // converts to grayscale   imshow(a ) ; ....     +   +    let us show a sequence of operations to help the computer recognize this letter . as the input , we have a noisy image , typically obtained from cheap ccd s .",
    "we first gaussian - blur  @xcite the image as to filter out the low - scale noise and leave our letter ` a ' in clear evidence :    ....   b = gsm2d(a,2 ) ;   //",
    "gaussian smoothing with sigma = 2   imshow(b , [ ] ) ;     // the [ ] parameter rescales b to 0 - 1 ....    this is shown in figure  [ fig : ocr : smooth ] .",
    "we may now perform thresholding with ease :    ....   c = im2bw(b,0.8 ) ; //",
    "threshold at the 80% level   imshow(c,2 ) ;     // figure ( c ) ....    as shown in figure  [ fig : ocr : bin ] .",
    "this a much simpler representation for the letter a , with only two intensities",
    ". however , we can make it even simpler .",
    "the width of the letter is of no use to recognize it , so let us filter it out .",
    "we do this using a skeletonization algorithm , which finds a medial line of a given shape . in sip",
    ", there is a novel fast implementation of a useul skeletonization algorithm  @xcite which is extremely easy to use :    ....   c = 1 - c ;           // inverts the image   t = skel(c ) ; ....    the image ` t ' contains skeletons in every level of detail .",
    "we select the level of detail for our application by thresholding this variable :    ....   d = im2bw(t , 0.1 ) ;   // threshold at the 10% level   imshow(d,2 ) ;         // figure ( d ) ....    we now have a thin representation for ` a ' ( figure  [ fig : ocr : skl1 ] ) , but there are unwanted spurs in the image . to filter them out ,",
    "select a higher threshold :    ....   d = im2bw(t,0.5 ) ;    // threshold at the 50% graylevel   imshow(d,2 ) ;         //",
    "figure ( e ) ; ....    this a clear - cut representation for the shape of the letter ` a ' ( figure  [ fig : ocr : skl2 ] ) .",
    "it is now straightforward to make some measures on this shape in order to characterize it , a process called `` feature extraction ''  @xcite .",
    "the computer can recognize the object as a letter a by doing statistics on these measures or by applying techniques from artificial intelligence and machine learning such as neural networks .",
    "some measures useful to characterize the shape is the number of holes , the width - to - height ratio , orientation of the branch points , and more  @xcite .",
    "[ sec : blobs ] another task frequently found when solving practical problems is the automatic separation of overlapping objects .",
    "suppose we have an image of many round or oval objects , such the a microscope image of blood cells .",
    "if we want to count the number of cells , there are problems with cases such as in figure  [ fig : blood ] , with two overlying blood cells .",
    "they must count not as one , but two .",
    "+    the input image is downloadable at :    ` http://siptoolbox.sourceforge.net/tutorial/images/cells.png `    start by reading the image and threshold it :    ....   a = gray_imread('cells.png ' ) ;   // reads in grayscale   imshow(a ) ;   b = im2bw(a , 0.9 ) ;   imshow(b,2 ) ; ....    figure  [ fig : cells : bin ] shows the result .",
    "we now calculate the distance transform of the inverse   = size(d ) ;   figure(2 ) ; // use another window   setcmap ( ) ;         // chose the ' hot ' colormap   set(gcf(),'pixmap',1 ) ;   // double - buffering mode ( faster )   shadesurf2(1:nrows , 1:ncols , d * 200 ) ; // comp .",
    "the surface   xset('wshow ' ) ;   // shows the surface ....    you may click on the button 3d",
    "rot.  to rotate the surface .",
    "the above commands render the distance transform as a surface ( figure  [ fig : cells : dt ] ) .",
    "the higher the surface , the greater the distance of the corresponding pixel to the image background .",
    "note that the peaks of the distance transform are in the middle of each blob .",
    "the idea is to run watershed segmentation  @xcite using those peaks as markers . for this , complement the distance transform so that the peaks become minima :    .... d = 1-d ; ....    apply a slight median filter  @xcite to eliminate spurious minima :    .... dm = mogrify(d,['-median','2 ' ] ) ; ....    force pixels that do nt belong to the objects to be at zero distance :    .... dm = dm . *",
    "b ; ....    and finally perform watershed segmentation :    .... w = watershed(dm ) ; clf ; imshow(w , rand(10,3 ) ) ;   // use 10 colors at most ....    variable w is an image with a unique number for each watershed region .",
    "the imshow with a random colormap displays each region with a unique arbitrary color .",
    "note how the regions were correctly separated by watershed , except for the hardest cases .",
    "we can use this procedure for automatic counting objects in an image with many cells , and it s robust to overlaps .",
    "this is specially useful to deal with bigger images at a large scale .    if the image had many cells , by the same procedure it would be straightforward to count the regions :    ....",
    "n = maxi(w ) - 1 ;    // subtract 1 for background ....",
    "scilab and sip constitute a powerful and easy - to - use environment for rapid development of image processing solutions .",
    "the expressiveness of the scilab interpreted language allows image manipulation in a natural way . together with the sip toolbox , we showed how simple it is to carry out complex operations such as the fft , watershed segmentation , and multiscale skeletonization , in this environment .    as authors of the sip toolbox",
    ", we attest that the free software   model  an open source model  @xcite which is guaranteed to always remain free  has been essential to its development and success .",
    "first of all , the wide visibility of any free software easily sustains its development after once it is born .",
    "the feedback provided by direct contact with users and many co - developers also copes for the stability and usability of the toolbox .",
    "furthermore , all the third - party packages used by sip are open source : external libraries such as imagemagick , animal and opencv , as well as scilab itself .",
    "this provides an excellent development environment , where any bugs in the third - party components may be reported directly to their authors , or even fixed by ourselves without bureaucracy .",
    "in addition , the community benefits a lot .",
    "many scientists have replaced expensive proprietary software even big companies ca nt afford .",
    "they also benefit from the sourcecode of many algorithms , by studying , evaluating and comparing them .",
    "there is a clear demand in the computer vision community for software packages like sip .",
    "currently there is no other free software that provides easy scripting for image analysis together with the advanced techniques available in sip .",
    "the number of supported file formats supersedes many proprietary software , such as matlab . as a consequence ,",
    "many people in universities and some industries have been using sip , specially researchers and image processing students .",
    "the toolbox has reportedly been used in countries such as germany , usa , brazil , greece , and france .                                      p.  soille and l.  vincent , `` watersheds in digital spaces : an efficient algorithm based on imersion simmulations , '' _ ieee trans . on pattern analysis and machine intelligence _",
    ", vol .  13 , no .  6 , pp .",
    "583598 , 1991 ."
  ],
  "abstract_text": [
    "<S> this paper is an overview of image processing and analysis using scilab , a free prototyping environment for numerical calculations similar to matlab . </S>",
    "<S> we demonstrate the capabilities of sip  the scilab image processing toolbox  which extends scilab with many functions to read and write images in over 100 major file formats , including png , jpeg , bmp , and tiff . </S>",
    "<S> it also provides routines for image filtering , edge detection , blurring , segmentation , shape analysis , and image recognition . </S>",
    "<S> basic directions to install scilab and sip are given , and also a mini - tutorial on scilab . </S>",
    "<S> three practical examples of image analysis are presented , in increasing degrees of complexity , showing how advanced image analysis techniques seem uncomplicated in this environment . </S>"
  ]
}