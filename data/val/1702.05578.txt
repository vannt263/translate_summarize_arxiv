{
  "article_text": [
    "equivalence checking is a core issue of system verification .",
    "it asks whether two processes are related by a specific equivalence .",
    "baeten , bergstra and klop  @xcite proved the remarkable result that strong bisimilarity checking is decidable on normed basic process algebra ( bpa ) .",
    "extensive work has been aroused since their seminal paper , dealing with decidability or complexity issues of checking bisimulation equivalence on various infinite - state systems ( @xcite for a survey and @xcite for an updated overview on this topic ) .",
    "bpa is a basic infinite - state system model , and the decidability of weak bisimilarity on bpa is one of the central open problems",
    ".    fu proved branching bisimilarity , a standard refinement of weak bisimilarity , is decidable on normed bpa  @xcite .",
    "fu also showed the decidability of associate regularity checking problem in the same paper , which asks if there exists a finite - state process branching bisimilar to a given normed bpa process .",
    "recently janar and czerwiski improved both decidability results to nexptime @xcite , while he and huang further showed the branching bisimilarity can actually be decided in exptime @xcite .",
    "both equivalence checking and regularity checking w.r.t . branching bisimilarity on bpa are exptime - hard @xcite .",
    "nevertheless , on the _ normed _ subclass of bpa , the lower bounds for both problems w.r.t . branching bisimilarity are much less clear . for weak bisimilarity checking on normed bpa",
    ", there are several lower bound results in the literature .",
    "stbrn first gave a np - hard  @xcite result by reducing from the knapsack problem ; srba then improved it to pspace - hard  @xcite by reducing from qsat ( quantified sat ) ; and the most recent lower bound is exptime - hard proved by mayr  @xcite by a reduction from the accepting problem of alternation linear - bounded automaton",
    ".    we can verify that all these constructions do not work for branching bisimilarity .",
    "the key reason is that they all make use of multiple state - change internal actions in one process to match certain action in the other .",
    "we previously claimed  @xcite that a slight modification on mayr s construction  @xcite is feasible for branching bisimilarity .",
    "however , recently in  @xcite and in a private correspondence with janar , we learned that all these modifications do not work on _ normed _ bpa . the main challenge is to define state - preserving internal action sequence structurally in normed bpa .",
    "the construction becomes tricky under the normedness condition .",
    "for the same reason , it is hard to adapt the previous constructions for np - hard  @xcite and pspace - hard  @xcite results to branching bisimilarity .",
    "it turns out that the lower bound of branching bisimilarity on normed bpa is merely p - hard @xcite . the same happens to regularity checking on normed bpa .",
    "the only lower bound for regularity checking w.r.t .",
    "branching bisimilarity is p - hard  @xcite .",
    "comparatively , it is pspace - hard for the problem w.r.t .",
    "weak bisimilarity  @xcite .    in this paper",
    ", we study the lower bounds of the equivalence and regularity checking problems w.r.t . branching bisimilarity on normed bpa .",
    "our contributions are threefold .    [",
    "cols=\"^,^,^\",options=\"header \" , ]     clearly both @xmath0 and @xmath1 are @xmath2-reg .",
    "consider the branching ( resp .",
    "weak ) bisimulation game starting from @xmath3 .",
    "a round of qsat game on @xmath4 will be simulated by 3 rounds branching ( resp .",
    "weak ) bisimulation games .",
    "suppose in the @xmath5-th round of qsat game , player @xmath6 assign @xmath7 to @xmath8 and then player @xmath9 assign @xmath10 to @xmath11 . then in the branching ( resp .",
    "weak ) bisimulation game , attacker use rule ( 1 ) and ( 2 ) put @xmath12 to the stack in one round ; then in the following two rounds , by defender s forcing ( rule ( 3)(4)(5)(6)(7 ) ) , defender pushes @xmath13 to the stack . in this way , the branching ( resp .",
    "weak ) bisimulation game reaches a configuration in the form @xmath14 after @xmath15 rounds . here",
    "@xmath16 is an assignment that @xmath6 and @xmath9 generates .",
    "it follows from lemma [ lem : rdset_qsat ] and rule ( 8) that if @xmath9 has a w.s .",
    "then defender can use it to guarantee @xmath17 ; otherwise if @xmath6 has a w.s .",
    "then attacker can use it to make sure @xmath18 .",
    "a normed process is not @xmath2-reg if the branching norm of its reachable processes is unbounded .",
    "let us first introduce a directed weighted graph @xmath19 that captures all the ways to increase the branching norm by performing actions .",
    "@xmath20 , where @xmath21 and @xmath22 is a weight function defined as follows . for each edge @xmath23 , if there is some @xmath24 s.t .",
    "@xmath25 then @xmath26 ; otherwise @xmath27 . using the exptime branching bisimilarity checking algorithm from @xcite as a black box",
    ", we can compute @xmath19 in @xmath28 time .",
    "propositionprpexpg[prp : exp_g ] @xmath19 can be constructed in @xmath28 time .",
    "suppose @xmath29 and there is an edge from @xmath30 to @xmath31 with weight @xmath32 , then there is a sequence of actions @xmath33 s.t .",
    "@xmath34 and @xmath35 .",
    "so a path from @xmath30 in the following form in @xmath19 @xmath36 indicates there are @xmath37 , @xmath38 , ",
    "@xmath39 and @xmath40 , @xmath41 ,  , @xmath42 s.t .",
    "@xmath43 can perform the sequence @xmath44 with @xmath29 , @xmath45 and @xmath46 for @xmath47 . now if there exists @xmath48 s.t .",
    "@xmath49 and @xmath50 and @xmath51 , then we call a _ witness path _ of irregularity in @xmath19 for @xmath43 . indeed for any @xmath52 , @xmath43 can reaches @xmath53 by repeating a subsequence of @xmath54 times and we have @xmath55 this implies @xmath43 is not @xmath2-reg .",
    "the following lemma says that each normed @xmath56 that is _ not _ @xmath2-reg can be certified by a witness path in @xmath19 .",
    "lemmalemnonregcha [ lem : non_reg_cha ] a process @xmath57 is not @xmath2-reg iff there exist @xmath58 and a witness path in @xmath19 for @xmath59 .",
    "the proof idea essentially inherits from @xcite .",
    "we omit the detail here . with the help of lemma [ lem : non_reg_cha ] we can prove the following theorem .",
    "theoremthmexpreg [ thm : exp - reg ] regularity checking w.r.t .",
    "@xmath2 on normed bpa is in exptime .",
    "the initial motivation of this paper is to finish the exptime - completeness  @xcite of branching bisimilarity of normed bpa .",
    "the new reduction technique involve the inner structure of bpa w.r.t . branching bisimulation .",
    "the pspace - hard lower bound for regularity checking is a byproduct once we developed the technique . whether it has a pspace algorithm for branching regularity on normed bpa is a natural further question .",
    "we believe the answer is positive .    10    j.  c.  m. baeten , j.  a. bergstra , and j.  w. klop .",
    ". in _ parle parallel architectures and languages europe _ , pages 94111 .",
    "springer , 1987 .",
    "jos balczar , joaquim gabarr , and mikls sntha . .",
    ", 4(1):638648 , 1992 .",
    "[ ] .    wojciech czerwiski and petr janar . .",
    "lics 2015 _ , pages 168179 .",
    "ieee computer society , 2015 .",
    "http://dx.doi.org/10.1109/lics.2015.25 [ ] .",
    "yuxi fu . .",
    "icalp 2013 , part ii _ ,",
    "volume 7966 of _ lncs _ , pages 238249 .",
    "springer - verlag , 2013 .",
    "chaodong he and mingzhang huang . .",
    "in _ lics 2015 _ , pages 180191 .",
    "ieee computer society , 2015 .",
    "http://dx.doi.org/10.1109/lics.2015.26 [ ] .",
    "petr janar . . , 2016",
    ". http://arxiv.org/abs/1602.05151 [ ] .",
    "petr janar and ji srba . . ,",
    "v:126 , 2008 .",
    "stefan kiefer . .",
    ", 113(4):101106 , 2013 .",
    "http://dx.doi.org/10.1016/j.ipl.2012.12.004 [ ] .",
    "antonn kuera and petr janar .",
    "equivalence - checking on infinite - state systems : techniques and results .",
    ", 6(3):227264 , may 2006 .",
    "http://dx.doi.org/10.1017/s1471068406002651 [ ] .",
    "richard mayr . .",
    ", 330(3):553575 , 2005 .",
    "http://dx.doi.org/10.1016/j.tcs.2004.10.008 [ ] .",
    "ji srba . .",
    "4th international workshop on verification of infinite - state systems _ ,",
    "pages 151152 , 2002 .",
    "ji srba . .",
    "in _ annual symposium on theoretical aspects of computer science _ , stacs 02 , pages 535546 .",
    "springer , 2002 .",
    "ji srba . .",
    "in _ international colloquium on automata , languages , and programming _ , icalp 02 , pages 716727 .",
    "springer , 2002 .",
    "ji srba .",
    "complexity of weak bisimilarity and regularity for bpa and bpp .",
    ", 39(1):79  93 , 2003 .",
    "http://dx.doi.org/http://dx.doi.org/10.1016/s1571-0661(05)82505-8 [ ] .",
    "ji srba . .",
    ", 2(201):337350 , 2004 .",
    "updated version at http://users - cs.au.dk / srba / roadmap/.    colin stirling . .",
    "in _ mathematical foundations of computer science 1998_. springer berlin heidelberg , 1998 .",
    "http://dx.doi.org/10.1007/bfb0055763 [ ] .",
    "jitka stbrn . . ,",
    "18:179190 , jan 1998 .",
    "http://dx.doi.org/10.1016/s1571-0661(05)80259-2 [ ] .",
    "wolfgang thomas . .",
    "tapsoft93 : theory and practice of software development _ , pages 559568 .",
    "springer berlin heidelberg , 1993 .",
    "http://dx.doi.org/10.1007/3-540-56610-4_89 [ ] .",
    "suppose @xmath60 and @xmath61 , then there are two transition sequence @xmath62 by lemma [ lem : fu - lemma ] , if we substitute @xmath63 with @xmath64 we will get a transition sequence that lead @xmath65 to @xmath64 with @xmath66 state - change actions .",
    "it follows that @xmath67 .",
    "similarly we have @xmath68 .",
    "it follows that @xmath69 .",
    "1 .   ( `` @xmath70 '' )",
    "we show by induction on @xmath71 that if @xmath72 , then @xmath73 . by congruence",
    "we have @xmath74 . *",
    "it is routine to verity that the relation @xmath76 is a branching bisimulation .",
    "* suppose @xmath77 and @xmath78 .",
    "let @xmath79 .",
    "if @xmath80 , we must have @xmath81 . by the base case and congruence we have @xmath82 .",
    "if @xmath83 , we show that defender has a w.s . in the branching bisimulation game",
    "if attacker play @xmath85 , then defender responds with @xmath86 .",
    "the configuration of the next round will be a pair of syntax identical processes and defender wins .",
    "if attacker play @xmath87 , then defender responds with empty transition and the configuration of the next round is @xmath88 .",
    "defender also wins .",
    "attacker s optimal choice is to play @xmath89 , defender then responds with @xmath90 and the game continues from @xmath91 .",
    "now if attacker chooses to play an action @xmath92 , then defender simply follows the suit the game configuration dose not change .",
    "if attacker chooses to play an action @xmath93 for some @xmath94 and @xmath95 , then after defender responds the game reaches configuration @xmath96 .",
    "attacker s optimal choice is to play the action @xmath97 and after defender responds the game reaches configuration @xmath98 . now by i.h .",
    "we have @xmath99 .",
    "defender has a w.s . afterward .",
    "+ ( `` @xmath100 '' ) clearly @xmath101 and for all @xmath102 we have @xmath103 .",
    "we show that if there is no @xmath104 and @xmath105 s.t . @xmath72 and @xmath106 ,",
    "then attacker has a w.s . in the branching bisimulation game of @xmath107 .",
    "let @xmath108 , then by assumption we have @xmath83 or @xmath109 . if @xmath80 , then it necessary hold that @xmath110 .",
    "we are done as @xmath111 . if @xmath83 , attacker then play @xmath112 .",
    "defender has to responds with @xmath113 and the game configuration becomes @xmath114 .",
    "attacker then play @xmath115 , defender has to responds with @xmath116 and game goes to configuration @xmath117 . if @xmath118 , attacker can repeat this strategy until a configuration of the form @xmath119 is reached ; otherwise a configuration of the form @xmath120 will be reached .",
    "attacker has a w.s . afterward .",
    "2 .   by ( 1 ) , there is @xmath104 and @xmath105 s.t . @xmath121 and @xmath78 .",
    "now suppose otherwise we also have @xmath122 . by ( 1 ) again , there are @xmath123 and @xmath124 s.t . @xmath125 and @xmath126 . contradiction .",
    "it is sufficient to show that @xmath127 then attacker has a w.s . in the weak bisimulation game of @xmath128 . by lemma [ lem : bit_test ]",
    "there is no @xmath104 and @xmath105 s.t . @xmath72 and @xmath106 .",
    "let @xmath108 , then by assumption we have @xmath83 or @xmath109 . if @xmath80 , then it necessary hold that @xmath110 .",
    "we are done as @xmath129 .",
    "if @xmath83 , attacker then play @xmath112 , defender has to responds with @xmath113 and the game configuration becomes @xmath114 .",
    "attacker then play @xmath115 , defender has to responds with @xmath116 and game goes to configuration @xmath117 . if @xmath118 , attacker can repeat this strategy until a configuration of the form @xmath119 is reached ; otherwise a configuration of the form @xmath130 will be reached .",
    "attacker then has a w.s . afterward .",
    "lemma [ lem : forcorrdsetqsat ] was first noticed by fu in @xcite as a simple consequence of computation lemma .",
    "although fu s proof only deals with branching bisimilarity , it can be adapted to weak bisimilarity easily .    by lemma [ lem : forcorrdsetqsat ] and lemma [ lem : bit_test_weak ] @xmath141 iff @xmath142 . as a result",
    "we only need to prove ( 1 ) .",
    "suppose @xmath141 , by lemma [ lem : forcorrdsetqsat ] , for each @xmath143 , @xmath144 . by proposition [ prop : binary_rdset ]",
    ", we have @xmath145 .",
    "it follows that @xmath146 .",
    "now suppose @xmath147 , then @xmath148 . by congruence we have @xmath141 .",
    "given a qsat formular @xmath4 , we construct a normed bpa system @xmath149 and two process @xmath56 and @xmath102 as proposition [ prp : qsat ] dose , then @xmath150 as @xmath56 and @xmath102 are both @xmath2-reg .",
    "we use the construction in the proof of theorem [ srba - thm ] to get another normed bpa system @xmath151 and a process @xmath152 , then          by lemma [ lem : forcorrdsetqsat ] , @xmath156 iff @xmath157 for @xmath158 and @xmath159 iff @xmath160 for @xmath158 . by lemma [ lem : bit_test_weak ] , ( 1 ) and",
    "( 2 ) are equivalent .",
    "we only need to prove ( 1 ) and ( 3 ) are equivalent .",
    "* `` @xmath161 '' . by lemma [ lem : bit_test ]",
    ", @xmath157 implies @xmath162 . by lemma [ lem : forcorrdsetqsat ] and",
    "assumption we have @xmath163 .",
    "* `` @xmath164 '' . as @xmath152 contains @xmath165 , by lemma [ lem : bit_test ] and assumption , for all @xmath158 , @xmath157 .",
    "@xmath156 follows by congruence .",
    "given a normed bpa system @xmath169 , let @xmath170 and @xmath171 be the set of variables that can reach @xmath172 via internal actions alone .",
    "we first construct a tree @xmath173 of size @xmath28 .",
    "the root of the tree is @xmath174 , and each node on @xmath173 is of the form @xmath175 .",
    "@xmath173 is constructed in a bfs way as follows .",
    "we first compute @xmath176 . if there is a node @xmath177 that is unmarked , we add the nodes @xmath178 , @xmath179 ",
    "@xmath180 to @xmath173 as the children of @xmath181 and then mark @xmath175 as `` processed '' .",
    "now for each new added node @xmath182 , if there is some node @xmath183 that has been marked as `` processed '' and @xmath184 , we then mark @xmath182 as a `` leaf '' .",
    "the construction @xmath173 stops if all nodes are marked as either `` processed '' or `` leaf '' .",
    "clearly there are at most @xmath28 number of nodes . and the size of each node is bounded by @xmath28 . by theorem [ thm - hh2015 ]",
    ", we can compute @xmath185 in @xmath186 time for a given process @xmath56 .",
    "it follows that we can construct @xmath173 in @xmath28 time .      1 .",
    "by lemma [ lem : fu - lemma ] , a set @xmath190 has some @xmath56 with @xmath191 iff there is a node @xmath192 for some @xmath102 . as a result , we can let @xmath193 clearly @xmath187 can be computed in @xmath28 time .",
    "2 .   for each @xmath194",
    ", we enumerate all the rules of the form @xmath195 . if there is a @xmath24 with @xmath196",
    ", then we add an edge @xmath197 to @xmath188 with @xmath26 , where @xmath198 and @xmath199 for some @xmath102 . by lemma [ lem : fu - lemma ] , @xmath200 can be read from @xmath173 .",
    "if for all rules of form @xmath195 we have @xmath201 , then we add an edge @xmath202 to @xmath188 with @xmath27 . for each node @xmath203",
    ", we can compute all the edge from @xmath203 with its weight value in @xmath204 time . as a result , @xmath188 and @xmath205",
    "can be computed in @xmath28 time .",
    "let @xmath166 and @xmath206 .",
    "it is easy to verity that if there is a witness path for some @xmath207 , then for any @xmath52 there is some @xmath208 s.t . @xmath209 and @xmath210 .",
    "it follows that @xmath56 is not @xmath2-reg .",
    "now suppose @xmath56 is not @xmath2-reg , then there is some @xmath102 reachable from @xmath56 and @xmath211 , where @xmath212 now let @xmath213 be a transition sequence that @xmath56 reaches @xmath102",
    ". from we can compute a sequence of indices @xmath214 as follows @xmath215 let @xmath216 , by the definition of @xmath217 and @xmath218 , there are @xmath219 , @xmath220 and @xmath221 s.t .",
    "@xmath222 , @xmath223 and @xmath224 for @xmath225 . as a result we can rewrite the subsequence of from @xmath226 to @xmath227 by @xmath228 by definition of @xmath229 we have @xmath230 and by assumption we have @xmath231 , thus @xmath232",
    "on the other hand let @xmath233 for @xmath225 and we have @xmath234 it follows that there are @xmath235 s.t .",
    "@xmath236 , @xmath237 and @xmath238 .",
    "note that the transition sequence of induces the following path in @xmath19 @xmath239 by definition of @xmath19 we have @xmath240 if @xmath241 .",
    "it follows that @xmath242 . by definition of @xmath229 and @xmath243",
    ", we have @xmath244 . as a result",
    "the subpath of that from @xmath245 to @xmath246 is a witness path in @xmath19 for @xmath247 .        1 .",
    "construct @xmath19 .",
    "2 .   compute the set of growing nodes @xmath248 . a node @xmath203 in @xmath187",
    "is a _ growing node _ if there is simple circle of the following form in @xmath19 @xmath249 and @xmath250 . for each @xmath194 we can decide whether @xmath251 as follows .",
    "let @xmath252 be the set of nodes reachable from @xmath203 via a path of total weight @xmath253 .",
    "it is necessary that @xmath254 .",
    "now let @xmath255 clearly @xmath256 and the computation of @xmath257 can done in @xmath258 time . we can verify that @xmath203 is a growing node iff @xmath203 is reachable from some @xmath259 .",
    "3 .   let @xmath260 and @xmath261 for @xmath262 ; and let @xmath263 .",
    "if there is some @xmath5 s.t .",
    "@xmath264 can reach a node in @xmath265 in @xmath19 , then output `` not regular '' ; otherwise output `` regular '' .    by proposition",
    "[ prp : exp_g ] , step ( 1 ) can be done in @xmath28 time . by theorem [ thm - hh2015 ]",
    "computing @xmath266 can be done in @xmath267 time .",
    "the other part of step ( 2 ) and step ( 3 ) only checks reachability properties in @xmath19 , which can be done @xmath268 time .",
    "note @xmath19 is of @xmath28 size . as a result",
    "the whole procedure can be done in @xmath267 time ."
  ],
  "abstract_text": [
    "<S> branching bisimilarity on normed basic process algebra ( bpa ) was claimed to be exptime - hard in previous papers without any explicit proof . </S>",
    "<S> recently it is reminded by janar that the claim is not so dependable . in this paper </S>",
    "<S> , we develop a new complete proof for exptime - hardness of branching bisimilarity on normed bpa . </S>",
    "<S> we also prove the associate regularity problem on normed bpa is pspace - hard and in exptime . </S>",
    "<S> this improves previous p - hard and nexptime result . </S>"
  ]
}