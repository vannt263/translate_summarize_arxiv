{
  "article_text": [
    "this paper studies the complexity of the reachability problem for a class of programs featuring procedures and local / global variables ranging over integers . in general , the reachability problem for this class is undecidable @xcite .",
    "thus , we focus on a special case of the reachability problem which restricts both the class of input programs and the set of executions considered . the class of input programs is restricted by considering that all updates to the integer variables @xmath1 are defined by _",
    "octagonal constraints _ , that are conjunctions of atoms of the form @xmath2 , with @xmath3 , where @xmath4 denote the future values of the program variables .",
    "the reachability problem is restricted by limiting the search to program executions conforming to a regular expression of the form @xmath5 where the @xmath6 s are finite sequences of program statements .",
    "we call this problem _ flat - octagonal reachability _",
    "( fo - reachability , for short ) . concretely , given :    a program @xmath7 with procedures and local / global variables , whose",
    "statements are specified by octagonal constraints , and    a bounded expression @xmath8 , where @xmath6 s are sequences of statements of @xmath7 ,    the fo - reachability problem @xmath9 asks : can @xmath7 run to completion by executing a sequence of program statements @xmath10 ?",
    "studying the complexity of this problem provides the theoretical foundations for implementing efficient decision procedures , of practical interest in areas of software verification , such as bug - finding @xcite , or counterexample - guided abstraction refinement @xcite .",
    "our starting point is the decidability of the fo - reachability problem in the absence of procedures .",
    "recently , the precise complexity of this problem was coined to np - complete @xcite .",
    "however , this result leaves open the problem of dealing with procedures and local variables , let alone when the graph of procedure calls has cycles , such as in the example of fig .",
    "[ fig : running - example ]  ( a ) . pinning down the complexity of the fo - reachability problem in presence of (",
    "possibly recursive ) procedures , with local variables ranging over integers , is the challenge we address here .",
    "the decision procedure we propose in this paper reduces @xmath9 , from a program @xmath7 with arbitrary call graphs , to procedure - less programs as follows :    we apply a source - to - source transformation returning a procedure - less program @xmath11 , with statements also defined by octagonal relations , such that @xmath9 is equivalent to the unrestricted reachability problem for @xmath11 , when no particular bounded expression is supplied .",
    "we compute a bounded expression @xmath12 over the statements of @xmath11 , such that @xmath9 is equivalent to @xmath13 .",
    "the above reduction allows us to conclude that the fo - reachability problem for programs with arbitrary call graphs is decidable and in nexptime .",
    "naturally , the np - hard lower bound @xcite for the fo - reachability problem of procedure - less programs holds in our setting as well . despite our best efforts , we did not close the complexity gap yet .",
    "however we pinned down a natural parameter , called _ index _ , related to programs with arbitrary call graphs , such that , when setting this parameter to a fixed constant ( like @xmath14 in @xmath14-sat ) , the complexity of the resulting fo - reachability problem for programs with arbitrary call graphs becomes np - complete .",
    "indeed , when the index is fixed , the aforementioned reduction computing @xmath13 runs in polynomial time .",
    "then the np decision procedure for the fo - reachability of procedure - less programs @xcite shows the rest .",
    "the index parameter is better understood in the context of formal languages .",
    "the control flow of procedural programs is captured precisely by the language of a context - free grammar .",
    "a @xmath15-index ( @xmath16 ) underapproximation of this language is obtained by filtering out the derivations containing a sentential form with @xmath17 occurrences of nonterminals .",
    "the key to our results is a toolbox of language theoretic constructions of independent interest that enables to reason about the structure of context - free derivations generating words into @xmath18 , that is , words of the form @xmath19 for some integers @xmath20 .",
    "( 0,0 ) ( @xmath21 ) are for the input ( output ) values of @xmath22 and @xmath23 , respectively .",
    "@xmath24 provide extra copies .",
    "@xmath25 stands for @xmath26 , and @xmath27 for @xmath28 .",
    ", title=\"fig : \" ]    # 1#2#3#4#5 @font    ( 9648,6348)(-32,-5851 ) ( 7662,-5144)(0,0)[lb ] ( 3901,-91)(0,0)[b ] ( 9526,-3376)(0,0)[lb ] ( 9526,-3601)(0,0)[lb ] ( 9526,-3826)(0,0)[lb ] ( 9526,-4051)(0,0)[lb ] ( 6128,-3392)(0,0)[lb ] ( 6203,-3167)(0,0)[lb ] ( 4126,-886)(0,0)[lb ] ( 4351,-1636)(0,0)[lb ] ( 4426,-211)(0,0)[lb ] ( 2401,-4186)(0,0)[b ] ( 2401,-5086)(0,0)[b ] ( 4726,-3961)(0,0)[b ] ( 5101,-4636)(0,0)[b ] ( 3901,-5086)(0,0)[b ] ( 5101,-5161)(0,0)[lb ] ( 1801,-3061)(0,0)[b ] ( 444,-3811)(0,0)[b ] ( 1201,-4186)(0,0)[b ] ( 699,-4118)(0,0)[b ] ( 7876,-1936)(0,0)[b ] ( 9601,-2836)(0,0)[b ] ( 9601,-4711)(0,0)[b ] ( 7501,-4711)(0,0)[b ] ( 6744,-3811)(0,0)[b ] ( 4126,-1411)(0,0)[b ] ( 4126,-511)(0,0)[b ] ( 4876,-2161)(0,0)[b ] ( 4876,314)(0,0)[b ] ( 5626,-661)(0,0)[b ] ( 5626,-916)(0,0)[b ] ( 3826,-1786)(0,0)[b ] ( 3976,-2011)(0,0)[b ] ( 3301,-886)(0,0)[b ] ( 3001,-1111)(0,0)[b ] ( 3901,-4186)(0,0)[b ] ( 5401,-4186)(0,0)[b ] ( 8026,-3436)(0,0)[lb ] ( 8026,-3211)(0,0)[lb ] ( 7201,-586)(0,0)[lb ] ( 7201,-886)(0,0)[lb ] ( 7201,-1186)(0,0)[lb ] ( 7201,-1486)(0,0)[lb ] ( 7403,-2829)(0,0)[b ] ( 4501,-2536)(0,0)[b ] ( 1051,-2536)(0,0)[lb ] ( 901,-2506)(0,0)[b ] ( 601,239)(0,0)[lb ] ( 601,-16)(0,0)[lb ] ( 601,-361)(0,0)[lb ] ( 601,-661)(0,0)[lb ] ( 601,-961)(0,0)[lb ] ( 601,-1261)(0,0)[lb ] ( 601,-1861)(0,0)[lb ] ( 601,-2161)(0,0)[lb ] ( 601,-1561)(0,0)[lb ] ( 4951,-1186)(0,0)[lb ] ( 1726,-4261)(0,0)[b ] ( 3226,-3961)(0,0)[b ] ( 1201,-3286)(0,0)[b ] ( 2401,-3286)(0,0)[b ] ( 966,-3526)(0,0)[b ] ( 1785,-3586)(0,0)[b ] ( 2451,-3575)(0,0)[b ] ( 3066,-4896)(0,0)[b ] ( 4954,-4917)(0,0)[b ] ( 4100,-4546)(0,0)[b ] ( 1371,-4726)(0,0)[b ] ( 6477,-4486)(0,0)[b ] ( 6422,-4261)(0,0)[b ] ( 7314,-3821)(0,0)[lb ] ( 7283,-4036)(0,0)[lb ] ( 7454,-2487)(0,0)[lb ] ( 1830,-5720)(0,0)[b ] ( 7265,-5734)(0,0)[b ] ( 7460,-5755)(0,0)[lb ] ( 8010,-2660)(0,0)[lb ] ( 7573,-5374)(0,0)[lb ] ( 7681,-4941)(0,0)[lb ] ( 3901,164)(0,0)[b ]    to properly introduce the reader to our result , we briefly recall the important features of our source - to - source transformation through an illustrative example .",
    "we apply first our program transformation @xcite to the program @xmath7 shown in fig .",
    "[ fig : running - example ] ( a ) .",
    "the call graph of this program consists of a single state @xmath29 with a self - loop .",
    "the output program @xmath11 given fig .",
    "[ fig : running - example ] ( e ) , has no procedures and it can thus be analyzed using any existing intra - procedural tool @xcite .",
    "the relation between the variables @xmath22 and @xmath23 of the input program can be inferred from the analysis of the output program .",
    "for instance , the input - output relation of the program @xmath7 is defined by @xmath30 , which matches the precondition @xmath31 of the program @xmath11 .",
    "consequently , any assertion such as `` _ _ there exists a value @xmath32 such that @xmath33 _ _ '' can be phrased as : `` _ _ there exist values @xmath34 such that @xmath35 reaches its final state _ _ '' .",
    "while the former can be encoded by a reachability problem on @xmath7 , by adding an extra conditional statement , the latter is an equivalent reachability problem for @xmath11 .",
    "for the sake of clarity , we give several representations of the input program @xmath7 that we assume the reader is familiar with including the text of the program in fig .",
    "[ fig : running - example ] ( a ) and the corresponding control flow graph in fig .",
    "[ fig : running - example ] ( b ) . in this paper ,",
    "the formal model we use for programs is based on context - free grammars .",
    "the grammar for @xmath7 is given at fig .",
    "[ fig : running - example ] ( c ) .",
    "the rle of the grammar is to define the set of _ interprocedurally valid _ paths in the control - flow graph of the program @xmath7 .",
    "every edge in the control - flow graph matches one or two symbols from the finite alphabet @xmath36 , where @xmath37 and @xmath38 denote the call and return , respectively .",
    "the set of nonterminals is @xmath39 .",
    "each edge in the graph translates to a production rule in the grammar , labeled @xmath40 to @xmath41 . for instance , the call edge @xmath42 becomes @xmath43 .",
    "the language of the grammar of fig .",
    "[ fig : running - example ] ( c ) ( with axiom @xmath44 ) is the set @xmath45 of interprocedurally valid paths in the control - flow graph .",
    "observe that @xmath46 is included in the language of the regular expression @xmath47 .",
    "our program transformation is based on the observation that the semantics of @xmath7 can be precisely defined on the set of _ derivations _ of the associated grammar . in principle",
    ", one can always represent this set of derivations as a possibly infinite automaton ( fig .",
    "[ fig : running - example ] ( d ) ) , whose states are sequences of nonterminals annotated with priorities ( called ranks ) . ] , and whose transitions are labeled with production rules . each finite path in this automaton , starting from @xmath48 , defines a valid prefix of a derivation . since @xmath49",
    ", luker @xcite shows that it is sufficient to keep a finite sub - automaton , enclosed with a dashed box in fig .",
    "[ fig : running - example ] ( d ) , in which each state consists of a finite number of ranked nonterminals ( in our case at most @xmath50 ) .    finally , we label the edges of this finite automaton with octagonal constraints that capture the semantics of the relations labeling the control - flow graph from fig . [",
    "fig : running - example ] ( b ) .",
    "we give here a brief explanation for the labeling of the finite automaton in fig .",
    "[ fig : running - example ] ( e ) , in other words , the output program @xmath11 ( see @xcite for more details ) .",
    "the idea is to compute , for each production rule @xmath51 , a relation @xmath52 , based on the constraints associated with the symbols occurring in @xmath51 ( labels from fig .",
    "[ fig : running - example ] ( b ) ) .",
    "for instance , in the transition @xmath53 , the auxiliary variables store intermediate results of the computation of @xmath54 as follows : @xmath55\\ ; \\langle\\!\\mathbf{t_2 } \\;[{{\\mathbf { x}}}_j]\\ ; x_1 \\;[{{\\mathbf { x}}}_k]\\ ; \\mathbf{t_2}\\!\\rangle \\;[{{\\mathbf { x}}}_l]\\ ; x_3 \\;[{{\\mathbf { x}}}_o]$ ] . the guard of the transition can be understood by noticing that @xmath37 gives rise to the constraint @xmath56 , @xmath38 to @xmath57 , @xmath58 corresponds to the frame condition of the call , and @xmath59 copies all current values of @xmath60 to the future ones .",
    "it is worth pointing out that the constraints labeling the transitions of the program @xmath11 are necessarily octagonal if the statements of @xmath7 are defined by octagonal constraints .",
    "an intra - procedural analysis of the program @xmath11 in fig .",
    "[ fig : running - example ] ( e ) infers the precondition @xmath61 which coincides with the input / output relation of the recursive program @xmath7 in fig .",
    "[ fig : running - example ] ( a ) , i.e.  @xmath62 .",
    "the original query @xmath63 translates thus into the satisfiability of the formula @xmath64 , which is clearly false .",
    "the paper is organised as follows : basic definitions are given section [ sec : prelim ] , section  [ sec : foreachpb ] defines the fo - reachability problem , section  [ sec : dfkderiv ] presents an alternative program semantics based on derivations and introduces subsets of derivations which are sufficient to decide reachability , section [ sec : bounded - control - sets ] starts with on overview of our decision procedure and our main complexity results and continues with the key steps of our algorithms .",
    "the appendix contains all the missing details .",
    "let @xmath65 be a finite nonempty set of symbols , called an _ alphabet_. we denote by @xmath66 the set of finite words over @xmath65 which includes @xmath67 , the empty word .",
    "the concatenation of two words @xmath68 is denoted by @xmath69 or @xmath70 .",
    "given a word @xmath71 , let @xmath72 denote its length and let @xmath73 with @xmath74 be the @xmath75th symbol of @xmath76 .",
    "given @xmath71 and @xmath77 , we write @xmath78 for the word obtained by deleting from @xmath76 all symbols not in @xmath79 , and sometimes we write @xmath80 for @xmath81 . a _ bounded expression _ @xmath82 over alphabet @xmath65 is a regular expression of the form @xmath0 , where @xmath83 are nonempty words and its size is given by @xmath84 .",
    "we use @xmath82 to denote both the bounded expression and its language .",
    "we call a language @xmath46 _ bounded _ when @xmath85 for some bounded expression @xmath82 .",
    "a _ grammar _ is a tuple @xmath86 where @xmath87 is a finite nonempty set of _ nonterminals _ , @xmath65 is an alphabet of _ terminals _ , such that @xmath88 , and @xmath89 is a finite set of _",
    "productions_. for a production @xmath90 , often conveniently noted @xmath91 , we define its _ size _ as @xmath92 , and @xmath93 defines the size of @xmath94 .",
    "given two words @xmath95 , a production @xmath96 and a position @xmath97 , we define a _ step _",
    "@xmath98 if and only if @xmath99 and @xmath100 .",
    "we omit @xmath101 or @xmath102 above the arrow when clear from the context .",
    "a _ control word _ is a finite word @xmath103 over the alphabet of productions .",
    "step sequence _",
    "@xmath104 is a sequence @xmath105 where @xmath106 .",
    "if @xmath107 is a nonterminal and @xmath108 is a word without nonterminals , we call the step sequence @xmath109 a _ derivation_. when the control word @xmath110 is not important , we write @xmath111 instead of @xmath112 , and we chose to omit the grammar @xmath94 when clear from the context .    given a nonterminal @xmath113 and @xmath114 , i.e.  @xmath115 is either a nonterminal or the empty word , we define the set @xmath116 . the set @xmath117 is called the _ language _ of @xmath94 produced by @xmath118 , and is denoted @xmath119 in the following . for a set @xmath120 of control words ( also called a _",
    "control set _ ) , we denote by @xmath121 the language generated by @xmath94 using only control words from @xmath122 .",
    "we also write @xmath123 for @xmath124 .",
    "let @xmath1 denote a nonempty finite set of integer variables , and @xmath125 .",
    "a _ valuation _ of @xmath1 is a function @xmath126 .",
    "the set of all such valuations is denoted by @xmath127 . a formula @xmath128 is evaluated with respect to two valuations @xmath129 , by replacing each occurrence of @xmath130 with @xmath131 and each occurrence of @xmath132 with @xmath133 .",
    "we write @xmath134 when the formula obtained from these replacements is valid .",
    "a formula @xmath135 _ defines _ a relation @xmath136 whenever for all @xmath137 , we have @xmath138 iff @xmath139 . the composition of two relations @xmath140 defined by formulae @xmath141 and @xmath142 , respectively , is the relation @xmath143 , defined by @xmath144 . for a finite set @xmath145 ,",
    "we denote its cardinality by @xmath146 .",
    "in this section we define formally the class of programs and reachability problems considered . an _ octagonal relation _",
    "@xmath147 is a relation defined by a finite conjunction of constraints of the form @xmath2 , where @xmath148 and @xmath149 .",
    "the set of octagonal relations over the variables in @xmath1 and @xmath4 is denoted as @xmath150 .",
    "the _ size _ of an octagonal relation @xmath151 , denoted @xmath152 is the size of the binary encoding of the smallest octagonal constraint defining @xmath151 .",
    "an _ octagonal program _ is a tuple @xmath153\\!\\!]}}}}$ ] , where @xmath94 is a grammar @xmath86 , @xmath154 is an _ initial _ location , and @xmath155\\!\\ ! ] } } } : l_i(g ) \\rightarrow \\mathrm{oct}({{\\mathbf { x}}},{{\\mathbf { x}}}')$ ] is a mapping of the words produced by the grammar @xmath94 , starting with the initial location @xmath156 , to octagonal relations .",
    "the alphabet @xmath65 contains a symbol @xmath157 for each _ internal _ program statement ( that is not a call to a procedure ) and two symbols @xmath158 for each _ call _ statement @xmath157 .",
    "the grammar @xmath94 has three kinds of productions :    @xmath159 if @xmath157 is a statement leading from @xmath118 to a return location ,    @xmath160 if @xmath157 leads from @xmath118 to @xmath115 , and    @xmath161 if @xmath157 is a call statement , @xmath115 is the initial location of the callee , and @xmath162 is the continuation of the call .    through several program transformations , we may generate another grammar with other kinds of productions .",
    "the only property we need for our results is that every grammar @xmath94 with we deal with has each of its productions @xmath163 satisfying : @xmath164 and @xmath165 where @xmath65 and @xmath87 are the terminals and nonterminals of @xmath94 , respectively .",
    "each edge @xmath157 that is not a call has an associated octagonal relation @xmath166 and each matching pair @xmath167 has an associated _ frame condition _ @xmath168 , which equates the values of the local variables , that are not updated by the call , to their future values .",
    "the size of an octagonal program @xmath169\\!\\!]}}}}$ ] , with @xmath86 , is the sum of the sizes of all octagonal relations labeling the productions of @xmath94 , formally @xmath170 .",
    "for example , the program in fig .",
    "[ fig : running - example ] ( a , b ) is represented by the grammar in fig .",
    "[ fig : running - example ] ( c ) .",
    "the terminals are mapped to octagonal relations as : @xmath171 , @xmath172 , @xmath173 , @xmath174 and @xmath175 .",
    "the frame condition is @xmath176 , as only @xmath23 is updated by the call @xmath177 .",
    "* word - based semantics .",
    "* for each word @xmath178 , each occurrence of a terminal @xmath179 in @xmath76 is matched by an occurrence of @xmath180 , and the matching positions are nested is said to be nested @xcite when no two pairs @xmath181 and @xmath182 cross each other , as in @xmath183 . ] .",
    "the semantics of the word @xmath184\\!\\!]}}}$ ] is an octagonal relation defined inductively on the structure of @xmath76 :    @xmath185\\!\\ ! ] } } } = \\rho_t$ ] ,    @xmath186\\!\\ ! ] } } } = \\rho_t \\circ { { { \\bf [ \\!\\![}}v { { \\bf ] \\!\\!]}}}$ ] , and    @xmath187\\!\\ ! ] } } } =   \\left(\\left(\\rho_{\\langle\\!t } \\circ { { { \\bf [ \\!\\![}}u { { \\bf ] \\!\\ ! ] } } } \\circ \\rho_{t\\!\\rangle}\\right ) \\cap \\phi_t\\right ) \\circ { { { \\bf [ \\!\\![}}v { { \\bf ] \\!\\!]}}}$ ] ,    for all @xmath188 such that @xmath179 and @xmath180 match .",
    "for instance , the semantics of the word @xmath189 , for the grammar @xmath94 given in fig .",
    "[ fig : running - example ] ( c ) , is @xmath184\\!\\ ! ] } } } \\equiv x=1 \\wedge z'=2 $ ] .",
    "observe that this word defines the effect of an execution of the program in fig .",
    "[ fig : running - example ] ( a ) where the function @xmath29 is called twice ",
    "the first call is a top - level call , and the second is a recursive call ( line 3 )",
    ".    * reachability problem . * the semantics of a program @xmath190\\!\\!]}}}}$ ] is defined as @xmath191\\!\\ ! ] } } } = \\bigcup_{w \\in l_i(g ) } { { { \\bf [ \\!\\![}}w { { \\bf ] \\!\\!]}}}$ ] .",
    "consider , in addition , a bounded expression @xmath82 , we define @xmath191\\!\\!]}}}_\\pat = \\bigcup_{w \\in l_i(g ) \\cap \\pat } { { { \\bf [ \\!\\![}}w { { \\bf ] \\!\\!]}}}$ ] .",
    "the problem asking whether @xmath191\\!\\!]}}}_\\pat \\neq \\emptyset$ ] for a pair @xmath192 is called the _ flat - octagonal reachability problem_. we use @xmath193 to denote a particular instance .",
    "in this section , we give an alternate but equivalent program semantics based on derivations .",
    "although simple , the word semantics is defined using a nesting relation that pairs the positions of a word labeled with matching symbols @xmath179 and @xmath180 .",
    "in contrast , the derivation - based semantics just needs the control word .    to define our derivation based semantics ,",
    "we first define structured subsets of derivations namely the depth - first and bounded - index derivations .",
    "the reason is two - fold :    the correctness proof of our program transformation @xcite returning the procedure - less program @xmath11 depends on bounded - index depth - first derivations , and    in the reduction of the @xmath9 problem to that of @xmath13 , the computation of @xmath12 depends on the fact that the control structure of @xmath11 stems from a finite automaton recognizing bounded - index depth - first derivations .    key results for our decision procedure are those of luker @xcite who , intuitively , shows that if @xmath194 then it is sufficient to consider depth - first derivations in which no step contains more than @xmath15 simultaneous occurrences of nonterminals , for some @xmath16 ( theorem [ thm : luker ] ) .",
    "* depth - first derivations .",
    "* it is well - known that a derivation can be associated a unique parse tree .",
    "a derivation is said to be _ depth - first _ if it corresponds to a depth - first traversal of the corresponding parse tree .",
    "more precisely , given a step sequence @xmath195 , and two integers @xmath196 and @xmath75 such that @xmath197 and @xmath198 define @xmath199 to be the index @xmath200 of the first word @xmath201 of the step sequence in which the particular occurrence of @xmath202 appears .",
    "a step sequence is _ depth - first _",
    "@xcite iff for all @xmath196 , @xmath203 : @xmath204 for example , @xmath205 is depth - first , whereas @xmath206 is not .",
    "we have @xmath207 because @xmath208 first appeared at @xmath209 , @xmath210 because @xmath211 first appeared at @xmath212 , @xmath213 and @xmath214 since @xmath215 .",
    "we denote by @xmath216{{\\scriptscriptstyle \\gamma } } } w$ ] a depth - first step sequence and call it depth - first derivation when @xmath107 and @xmath71",
    ".    * depth - first derivation - based semantics . * in previous work @xcite , we defined the semantics of a procedural program based on the control word of the derivation instead of the produced words .",
    "we briefly recall this definition here . given a depth - first derivation @xmath217{{\\scriptscriptstyle \\gamma } } } w$ ] , the relation @xmath218\\!\\ ! ] } } } \\subseteq \\zed^{{{\\mathbf { x } } } } \\times \\zed^{{{\\mathbf { x}}}}$ ] is defined inductively on @xmath110 as follows :    @xmath219\\!\\ ! ] } } } = \\rho_t$ ] ,    @xmath220\\!\\ ! ] } } } = \\rho_t \\circ { { { \\bf [ \\!\\![}}\\gamma ' { { \\bf ] \\!\\!]}}}$ ] where @xmath221{{\\scriptscriptstyle \\gamma ' } } } w'$ ] , and    @xmath222\\!\\ ! ] } } } =         { { { \\bf [ \\!\\![}}(x,\\langle\\!t \\ , y \\ , t\\!\\rangle \\ , z ) \\cdot \\gamma '' \\cdot \\gamma ' { { \\bf ] \\!\\ ! ] } } } =         \\left(\\left(\\rho_{\\langle\\ !",
    "t } \\circ { { { \\bf [ \\!\\![}}\\gamma ' { { \\bf ] \\!\\ ! ] } } } \\circ \\rho_{t\\!\\rangle}\\right )         \\cap \\phi_t\\right ) \\circ { { { \\bf [ \\!\\![}}\\gamma '' { { \\bf ] \\!\\!]}}}$ ] where @xmath221{{\\scriptscriptstyle \\gamma ' } } } w'$ ] and @xmath223{{\\scriptscriptstyle \\gamma '' } } } w''$ ]",
    ".    we showed ( * ? ? ? * lemma 2 ) that , whenever @xmath217{{\\scriptscriptstyle \\gamma } } } w$ ] , we have @xmath184\\!\\!]}}}\\neq\\emptyset$ ] iff @xmath218\\!\\!]}}}\\neq\\emptyset$ ] .",
    "* index - bounded derivations . *",
    "a step @xmath224 is said to be @xmath15-index ( @xmath16 ) iff neither @xmath225 nor @xmath226 contains @xmath17 occurrences of nonterminals , i.e. @xmath227 and @xmath228 .",
    "we denote by @xmath229{{\\scriptscriptstyle \\gamma } } } v$ ] a @xmath15-index step sequence and by @xmath230{{\\scriptscriptstyle \\gamma } } } v$ ] a step sequence which is both depth - first and @xmath15-index .",
    "for @xmath113 , @xmath231 and @xmath16 , we define the @xmath15-_index language _ @xmath232{{\\scriptscriptstyle \\gamma } } } u \\ , y",
    "\\ , v\\}$ ] , the @xmath15-_index depth - first control set _ @xmath233{{\\scriptscriptstyle \\gamma } } } u\\ , y\\ , v\\}$ ] .",
    "we write @xmath234 and @xmath235 when @xmath236 , and drop @xmath94 from the previous notations , when the grammar is clear from the context . for instance , for the grammar in fig .",
    "[ fig : running - example ] ( c ) , we have @xmath237 and @xmath238 .",
    "[ thm : luker ] given a grammar @xmath239 and @xmath240 :    for all @xmath71 , @xmath241{}^ * w $ ] if and only if @xmath242{}^ * w$ ] ;    if @xmath194 for a bounded expression @xmath82 over @xmath65 then @xmath243 where @xmath244 .",
    "the introduction of the notion of index naturally calls for an index dependent semantics and an index dependent reachability problem .",
    "as we will see later , we have tight complexity results when it comes to the index dependent reachability problem .",
    "given @xmath16 , let @xmath191\\!\\!]}}}^{(k ) } = \\bigcup_{w \\in l_i^{(k)}(g ) } { { { \\bf [ \\!\\![}}w { { \\bf ] \\!\\!]}}}$ ] and let @xmath191\\!\\!]}}}^{(k)}_{\\pat } = \\bigcup_{w \\in l_i^{(k)}(g)\\cap\\pat } { { { \\bf [ \\!\\![}}w { { \\bf ] \\!\\!]}}}$ ] .",
    "thus we define , for a constant @xmath15 not part of the input , the problem @xmath245 , which asks whether @xmath191\\!\\!]}}}^{(k)}_\\pat \\neq \\emptyset$ ] .",
    "* finite representations of bounded - index depth - first control sets . *",
    "it is known that the set of @xmath15-index depth - first derivations of a grammar @xmath94 is recognizable by a finite automaton ( * ? ? ?",
    "* lemma  5 ) .",
    "below we give a formal definition of this automaton , that will be used to produce bounded control sets for covering the language of @xmath94 .",
    "moreover , we provide an upper bound on its size , which will be used to prove an upper bound for the time to compute this set ( section [ sec : bounded - control - sets ] ) .",
    "given @xmath16 and a grammar @xmath246 , we define a labeled graph @xmath247 such that its paths defines the set of @xmath15-index depth - first step sequences of @xmath94 .",
    "to define the vertices and edges of this graph , we introduce the notion of ranked words , where the rank plays the same rle as the value @xmath199 defined previously .",
    "the advantage of ranks is that only @xmath15 of them are needed for @xmath15-index depth - first derivations whereas the set of @xmath199 values grows with the length of derivations .",
    "since we restrict ourselves to @xmath15-index depth - first derivations , we thus only need @xmath15 ranks , from @xmath248 to @xmath249 .",
    "the rank based definition of depth - first derivations can be found in appendix  [ app : fsa - dfk ] .    for a @xmath250-dimensional vector @xmath251 , we write @xmath252 for its @xmath75th element ( @xmath253 ) .",
    "a vector @xmath254 is said to be _ contiguous _ if @xmath255 , for some @xmath256 .",
    "given an alphabet @xmath65 define the ranked alphabet @xmath257 to be the set @xmath258 .",
    "a ranked word is a word over a ranked alphabet .",
    "given a word @xmath76 of length @xmath259 and an @xmath259-dimensional vector @xmath260 , the _ ranked word _",
    "@xmath261 is the sequence @xmath262 , in which the @xmath75th element of @xmath263 annotates the @xmath75th symbol of @xmath76 .",
    "we also denote @xmath264 as a shorthand .",
    "let @xmath265 be the following labeled graph , where : @xmath266 is the set of vertices , the edges are labeled by the set @xmath267 of productions of @xmath94 , and the edge relation is defined next .",
    "for all vertices @xmath268 and labels @xmath269 , we have @xmath270 if and only if    @xmath271 for some @xmath272 , where @xmath75 is the maximum rank in @xmath273 , and    @xmath274 , where @xmath275 and @xmath276    we denote by @xmath277 the size ( number of vertices ) of @xmath247 . in the following , we omit the subscript @xmath94 from @xmath247 , when the grammar is clear from the context .",
    "for example , the graph @xmath278 for the grammar from fig .",
    "[ fig : running - example ] ( c ) , is the subgraph of fig .",
    "[ fig : running - example ] ( d ) enclosed in a dashed line .",
    "[ fsa - dfk ] given @xmath279 , and @xmath280 , for each @xmath113 , @xmath231 and @xmath281 , we have @xmath282 if and only if @xmath283 is a path in @xmath247 . moreover , we have @xmath284 .",
    "in this section we describe a decision procedure for the problem @xmath9 where @xmath285\\!\\!]}}}}$ ] is an octagonal program , whose underlying grammar is @xmath86 , and @xmath286 is a bounded expression over @xmath65 .",
    "the procedure follows the roadmap described next .",
    "first , we compute , in time polynomial in the sizes of @xmath7 and @xmath82 , a set of programs @xmath287\\!\\ ! ] } } } } \\}_{i=1}^\\ell$ ] , such that @xmath288 , which implies @xmath191\\!\\!]}}}_\\pat = \\bigcup_{i=1}^\\ell { { { \\bf [ \\!\\![}}\\mathcal{p}_i { { \\bf ] \\!\\!]}}}$ ] .",
    "the grammar @xmath289 is an automata - theoretic product between the grammar @xmath94 and the bounded expression @xmath82 . for space reasons ,",
    "the formal definition of @xmath289 is deferred to appendix [ sec : easy ] , and we refer the reader to example [ ex : bounded - expression1 ] .",
    "deciding @xmath9 reduces thus to deciding several instances @xmath290 of the fo - reachability problem .",
    "[ ex : bounded - expression1 ] let us consider the bounded expression @xmath291 .",
    "consider the grammar @xmath292 with the following productions : @xmath293 , @xmath294 , @xmath295 , @xmath296 , @xmath297 , @xmath298 .",
    "it is easy to check that @xmath299 .",
    "let @xmath300 where @xmath301 , i.e.  we have @xmath302 .",
    "the following productions define a grammar @xmath289 : @xmath303 one can check @xmath304}(g^\\cap ) \\cup l_{[\\textsc{q}_1^{(2 ) } x        \\textsc{q}_1^{(3)}]}(g^\\cap)$ ] .",
    "@xmath305    a bounded expression @xmath8 over alphabet @xmath65 is said to be _",
    "@xmath250-letter - bounded _",
    "( or simply letter - bounded , when @xmath250 is not important ) when @xmath306 , for all @xmath307 . a letter - bounded expression",
    "@xmath308 is _ strict _ if all its symbols are distinct .",
    "a language @xmath309 is ( strict , letter- )  bounded iff @xmath310 , for some ( strict , letter- )  bounded expression @xmath82 .",
    "second , we reduce the problem from @xmath8 to the strict letter - bounded case @xmath311 , by building a grammar @xmath312 , with the same nonterminals as @xmath289 , such that , for each @xmath313    @xmath314 ,    @xmath315 iff @xmath316 , for all @xmath16    [ it : transposition ] from each control set @xmath122 that covers the language @xmath317 for some @xmath16 , one can compute , in polynomial time , a control set @xmath318 that covers the language @xmath319 .    [",
    "ex : bounded - expression2 ] let @xmath320 , @xmath321 and @xmath322 be the homomorphism given by @xmath323 and @xmath324 .",
    "the grammar @xmath312 results from deleting @xmath325 s and @xmath250 s in @xmath326 and replacing @xmath327 in @xmath328 by @xmath329 , @xmath327 in @xmath330 by @xmath331 and @xmath332 by @xmath333 . then , it is easy to check that @xmath334}(g^\\bowtie ) \\cup",
    "l_{[\\textsc{q}_1^{(2 ) } x \\textsc{q}_1^{(3)}]}(g^\\bowtie ) =     \\set{a_1^n \\ , a_2 \\ , a_3^n \\mid n \\in \\nats}$ ] .",
    "@xmath305    third , for the strict letter - bounded grammar @xmath312 , we compute a control set @xmath335 using the result of theorem [ thm : letter - bounded - control - set ] , which yields a set of bounded expressions @xmath336 , such that @xmath337 . by applying the aforementioned transformation ( _ [ it : transposition ] _ ) from @xmath122 to @xmath318 , we obtain that @xmath338 .",
    "theorem [ thm : luker ] allows to effectively compute value @xmath339 such that @xmath340 , for all @xmath313 .",
    "thus we obtain . ]",
    "@xmath341 , for all @xmath313 .",
    "the final step consists in building a finite automaton @xmath342 that recognizes the control set @xmath343 ( lemma [ fsa - dfk ] ) .",
    "this yields a procedure - less program @xmath11 , whose control structure is given by @xmath342 , and whose labels are given by the semantics of control words .",
    "we recall that , for every word @xmath344 there exists a control word @xmath345 such that @xmath184\\!\\!]}}}\\neq\\emptyset$ ] iff @xmath218\\!\\!]}}}\\neq\\emptyset$ ] .",
    "we have thus reduced each of the instances @xmath290 of the fo - reachability problem to a set of instances @xmath346 .",
    "the latter problem , for procedure - less programs , is decidable in nptime @xcite .",
    "next is our main result whose proof is in appendix  [ app : fo - reachability ] .",
    "[ thm : fo - reachability ] let @xmath153\\!\\!]}}}}$ ] be an octagonal program , where @xmath86 is a grammar , and @xmath82 is a bounded expression over @xmath65 .",
    "then the problem @xmath193 is decidable in nexptime , with a np - hard lower bound .",
    "if , moreover , @xmath15 is a constant , @xmath245 is np - complete .",
    "the rest of this section describes the construction of the control sets @xmath347 and gives upper bounds on the time needed for this computation .",
    "we use the following ingredients :    algorithm [ alg : constant - control - set ] for building bounded control sets for @xmath348-letter bounded languages , where @xmath349 is a constant ( in our case , at most @xmath50 ) ( section [ sec : constant - control - set ] ) , and    a decomposition of @xmath15-index depth - first derivations , that distinguishes between a prefix producing a word from the @xmath50-letter bounded expression @xmath350 , and a suffix producing two words included in bounded expressions strictly smaller than @xmath308 ( section [ sec : bounded ] ) .",
    "the decomposition enables the generalization from @xmath348-letter bounded languages where @xmath348 is a constant to arbitrary letter bounded languages .",
    "in particular , the required set of bounded expressions @xmath347 is built inductively over the structure of this decomposition , applying at each step algorithm [ alg : constant - control - set ] which computes bounded control sets for 2-letter bounded languages .",
    "the main algorithm ( algorithm [ alg : bounded - control - set ] ) returns a finite set @xmath347 of bounded expressions @xmath351 .",
    "below we abuse notation and write @xmath352 for @xmath353 .",
    "the time needed to build each bounded expression @xmath354 is @xmath355 and does not depend of @xmath356 , whereas the time needed to build the entire set @xmath347 is @xmath357 .",
    "these arguments come in handy when deriving an upper bound on the ( non - deterministic ) time complexity of the fo - reachability problem for programs with arbitrary call graphs . a non - deterministic version of algorithm [ alg : bounded - control - set ] that choses one set @xmath358 , instead of building the whole set @xmath347",
    ", is used to establish the upper bounds for the @xmath193 and @xmath359 problems in the proof of theorem [ thm : fo - reachability ] .",
    "here we define an algorithm for building bounded control sets that are sufficient for covering a @xmath348-letter bounded language @xmath360 , when @xmath349 is a constant , but the construction can be generalized to any constant @xmath361 . ] , i.e.not part of the input of the algorithm . in the following ,",
    "we consider the labeled graph @xmath362 , whose paths correspond to the @xmath15-index depth - first step sequences of @xmath94 ( lemma  [ fsa - dfk ] ) . recall that the number of vertices in this graph is @xmath363 .    given @xmath364 ,",
    "we denote by @xmath365 the set of paths with source @xmath273 and destination @xmath366 . for a path @xmath367 ,",
    "we denote by @xmath368 the sequence of edge labels on @xmath367 .",
    "a path @xmath367 is a _ cycle _ if its endpoints coincide .",
    "furthermore , the path is said to be an _ elementary cycle _ if it contains no other cycle than itself .",
    "finally , @xmath367 is acyclic if it contains no cycle .",
    "the word _ induced _ by a path in @xmath369 is the sequence of terminal symbols generated by the productions fired along that path .",
    "observe that , since @xmath360 , any word induced by a subpath of some path @xmath370 is necessarily of the form @xmath371 , for some @xmath372 .",
    "algorithm  [ alg : constant - control - set ] describes the effective construction of a bounded expression @xmath122 over the productions of @xmath94 using the sets of elementary cycles of @xmath369 . the crux is to find , for each vertex @xmath273 of @xmath369 , a subset @xmath373 of elementary cycles having @xmath273 at the endpoints , such that the set of words induced by @xmath373 is that of the entire set of elementary cycles having @xmath273 at endpoints .",
    "since the only vertex occurring more than once in an elementary cycle @xmath374 is the endpoint @xmath273 , we have that @xmath375 is at most the number of vertices @xmath376 , and each production rule generates at most @xmath50 terminal symbols , hence no word induced by a elementary cycle is longer than @xmath377 .",
    "the number of words @xmath378 induced by elementary cycles with endpoints @xmath273 is thus bounded by the number of nonnegative solutions of the inequality @xmath379 , which , in turn , is of the order of @xmath355 .",
    "so for each vector @xmath380 such that @xmath381 , it suffices to include in @xmath373 only one elementary cycle inducing the word @xmath382 .",
    "thus it is sufficient to consider sets @xmath373 of cardinality @xmath383 , for all @xmath384 .",
    "lines ( [ ln : h - start][ln : h - end ] ) of algorithm [ alg : constant - control - set ] build a graph @xmath385 with vertices @xmath386 , where @xmath384 is a vertex of @xmath369 and @xmath387 a solution to the above inequality ( line  [ ln : h - start ] ) , hence @xmath385 is a finite and computable graph . there is an edge between two vertices @xmath386 and @xmath388 in @xmath385 if and only if @xmath389 in @xmath369 and @xmath390 for every @xmath200 , that is @xmath391 is the sum of @xmath392 and the number of occurrences of @xmath393 produced by @xmath394 ( which is precisely captured by the word @xmath395 ) ( line [ ln : h - trans ] ) .",
    "the sets @xmath373 are computed by applying the dijkstra s single source shortest path algorithm . ] to the graph @xmath385 ( line [ ln : dijkstra ] ) and retrieving in @xmath373 the paths @xmath396 , such that @xmath397 ( line [ ln : cq ] ) .",
    "for a finite set of words @xmath398 , the function @xmath399 returns the bounded expression @xmath400 .",
    "algorithm [ alg : constant - control - set ] uses this function to build a bounded expression @xmath122 that covers all words induced by paths from @xmath401 .",
    "this construction relies on the following argument : for each @xmath402 , there exists another path @xmath403 , such that their induced words coincide , and , moreover , @xmath404 can be factorizedas @xmath405 , where @xmath406 , @xmath407 and @xmath408 for each @xmath409 are acyclic paths , @xmath410 are elementary cycles with endpoints @xmath411 , respectively , and @xmath412 .",
    "thus we can cover each segment @xmath413 by a bounded expression @xmath414 ( line [ ln : concat - prod ] ) , and each segment @xmath415 by the bounded expression @xmath416 ( line [ ln : concat - cq ] ) , yielding the required expression @xmath122 .",
    "the following lemma proves the correctness of algorithm [ alg : constant - control - set ] and gives an upper bound on its runtime .",
    "[ lem : ginsbook - d ] let @xmath417 be a grammar and @xmath418 is a strict @xmath348-letter - bounded expression over @xmath419 , where @xmath349 is a constant . then , for each @xmath280 there exists a bounded expression @xmath122 over @xmath267 such that , for all @xmath113 and @xmath231 , we have @xmath420 , provided that @xmath421 .",
    "moreover , @xmath122 is computable in time @xmath355 .    a grammar @xmath422 ,    a strict @xmath348-letter - bounded expression @xmath423 over @xmath419 , where @xmath349 is a fixed constant ,    and @xmath280    a bounded expression @xmath122 over @xmath267 such that @xmath424 for all @xmath113 and @xmath231 , such that @xmath425    @xmath426 [ ln : h - start ]    @xmath427    @xmath428 [ ln : h - trans ]    @xmath429[ln : h - end ]    @xmath430    @xmath431 [ ln : dijkstra ]    [ ln : b0-start ]    @xmath432 [ ln : cq ]    @xmath433 [ ln : concat - cq ]    [ ln : b0-end ]    @xmath434 [ ln : c - start ]    @xmath435 [ ln : concat - prod ] [ ln : c - end ]    @xmath436    [ ln : pat - start ] @xmath437 [ ln : pat - end ]    @xmath438 @xmath122      the key to the general case is a lemma decomposing derivations",
    ".    * decomposition lemma . *",
    "our construction of a bounded control set that covers a strict letter - bounded context - free language @xmath439 is by induction on @xmath440 , and is inspired by a decomposition of the derivations in @xmath94 , given by ginsburg ( * ? ? ?",
    "* chapter 5.3 , lemma 5.3.3 ) . because his decomposition is oblivious to the index or the depth - first policy , it is too weak for our needs .",
    "therefore , we give first a stronger decomposition result for @xmath15-index depth - first derivations .    without loss of generality , the decomposition lemma assumes the bounded expression covering @xmath119 to be _ minimal _ : a strict letter - bounded expression @xmath308 is _ minimal _ for a language @xmath46 iff @xmath441 and for every subexpression @xmath442 , resulting from deleting some @xmath443 from @xmath308 , we have @xmath444 .",
    "clearly , each strict letter - bounded language has a unique minimal expression .    basically ,",
    "for every @xmath15-index depth - first derivation with control word @xmath110 , its productions can be rearranged into a @xmath445-index depth - first derivation , consisting of a prefix @xmath446 producing a word in @xmath447 , then a production @xmath448 followed by two control words @xmath449 and @xmath450 that produce words contained within two bounded expressions @xmath451 and @xmath452 , respectively , where @xmath453 ( lemma  [ lem : ginsbook - surgery ] ) .",
    "let us first define the partition @xmath454 of @xmath87 , as follows : @xmath455 naturally , define @xmath456 .",
    "since the bounded expression @xmath457 is , by assumption , minimal for @xmath119 , then @xmath333 occurs in some word of @xmath119 and @xmath458 occurs in some word of @xmath119 .",
    "thus it is always the case that @xmath459 , since @xmath460 .",
    "the partition of nonterminals into @xmath461 and @xmath462 induces a decomposition of the grammar @xmath94 .",
    "first , let @xmath463 , where : @xmath464 then , for each production @xmath465 such that @xmath466 and @xmath467 , we define the grammar @xmath468 , where : @xmath469 the decomposition of derivations is formalized by the following lemma :    [ lem : ginsbook - surgery ] given a grammar @xmath470 , a nonterminal @xmath240 such that @xmath471 for some @xmath472 , and @xmath16 , for every derivation @xmath242{\\gamma}_{\\raisebox{1.5ex}{{\\scriptsize g } } }    w$ ] , there exists a production @xmath473 with @xmath466 , @xmath474 and @xmath475 , and control words @xmath476 , @xmath477 , such that @xmath478 is a permutation of @xmath110 and :    [ item1:ginsbook - surgery ] @xmath479{\\gamma^\\sharp}_{\\raisebox{1.5ex}{{\\scriptsize    $ g^{\\sharp}$ } } } u\\ , x_i\\ , v$ ] is a step sequence in @xmath480 with @xmath481 ;    [ item2:ginsbook - surgery ] @xmath482{\\gamma_{y}}_{\\raisebox{1.5ex}{{\\scriptsize $ g_{i , aybz}$ } } } u_y$ ] and @xmath483{\\gamma_{z}}_{\\raisebox{1.5ex}{{\\scriptsize $ g_{i , aybz}$ } } } u_z$ ] are ( possibly empty ) derivations in @xmath484 ( @xmath485 ) , for some integers @xmath486 , such that @xmath487 and @xmath488 ;    [ item3:ginsbook - surgery ] @xmath479{\\gamma^\\sharp \\ ,      \\mathrm{p } \\ , \\gamma_y \\ , \\gamma_z}_{\\raisebox{1.5ex}{{\\scriptsize g } } } w$ ] if @xmath489{\\gamma_y}_{\\raisebox{1.5ex}{{\\scriptsize $ g_{i , aybz}$ } } } u_y$ ] , and @xmath479{\\gamma^\\sharp \\ ,      \\mathrm{p } \\ , \\gamma_z \\ , \\gamma_y}_{\\raisebox{1.5ex}{{\\scriptsize g } } } w$ ] if @xmath490{\\gamma_z}_{\\raisebox{1.5ex}{{\\scriptsize $ g_{i , aybz}$ } } } u_z$ ] ;    [ item4:ginsbook - surgery ] @xmath491 ;    [ item5:ginsbook - surgery ] @xmath492 if @xmath493 , and @xmath494 if @xmath495 , for some integers @xmath496 , such that @xmath497 .",
    "let us now turn to the general case , in which the size of the strict letter - bounded expression @xmath498 is not constant , i.e. @xmath250 is part of the input of the algorithm .",
    "the output of algorithm  [ alg : bounded - control - set ] is a finite set of bounded expressions @xmath347 such that @xmath499 .",
    "the construction of the set @xmath347 by algorithm  [ alg : bounded - control - set ] ( function ) follows the structure of the decomposition of control words given by lemma [ lem : ginsbook - surgery ] . for every @xmath15-index depth - first derivation with control word @xmath110",
    ", its productions can be rearranged into a @xmath445-index depth - first derivation , consisting of    a prefix @xmath446 producing a word in @xmath447 , then    a _ pivot _ production @xmath500 followed by two words @xmath449 and @xmath450 such that :    @xmath449 and @xmath450 produce words included in two bounded expressions @xmath451 and @xmath501 , respectively , where @xmath453 .",
    "the algorithm follows this decomposition and builds bounded expressions @xmath502 , @xmath503 , and the sets @xmath504 and @xmath505 with the goal of capturing @xmath506 , @xmath500 , @xmath110 and @xmath450 , respectively , for all the control words such as @xmath110 . because @xmath506 produces a word from @xmath447 , the bounded expression @xmath502",
    "is built calling ( line  [ ln : gamma - sharp ] ) .",
    "since @xmath449 and @xmath450 produce words within two sub - expressions of @xmath507 with as many as @xmath508 letters , these cases are handled by two recursive calls to ( lines  [ line : rec - y ] and [ line : rec - z ] ) .",
    "a grammar @xmath422 , a nonterminal @xmath113 , a strict @xmath250-letter - bounded expression @xmath308 over @xmath419 , such that @xmath509 , and @xmath280    a set @xmath347 of bounded expressions over @xmath267 , such that @xmath510    @xmath511 * with * @xmath512    @xmath513 [ ln : minexpr ]    @xmath514    @xmath515 [ ln : partition ]    @xmath516    @xmath517    @xmath518 [ ln : gamma - sharp ]    @xmath519    [ line : for - begin ]    [ line : inclusion ]    @xmath520    @xmath521    @xmath522 [ line : rec - y ]  @xmath523    @xmath524 [ line : rec - z ]  @xmath525    @xmath526 [ line : concatpattg ]    [ line : for - end ]    @xmath527    @xmath528 @xmath529 @xmath530    @xmath94 * with * @xmath531 @xmath532 @xmath533 @xmath534    [ thm : letter - bounded - control - set ] given a grammar @xmath422 , and @xmath113 , such that @xmath535 , where @xmath308 is the minimal strict @xmath250-letter bounded expression for @xmath119 , for each @xmath280 , there exists a finite set of bounded expressions @xmath347 over @xmath267 such that @xmath536 .",
    "moreover , @xmath347 can be constructed in time @xmath357 and each @xmath537 can be constructed in time @xmath355 .",
    "the next lemma shows that the worst - case exponential blowup in the value @xmath15 is unavoidable .",
    "[ lem : optimality ] for every @xmath16 there exists a grammar @xmath86 and @xmath240 such that @xmath538 and every bounded expression @xmath122 , such that @xmath539 has length @xmath540 .",
    "the programs we have studied feature unbounded control ( the call stack ) and unbounded data ( the integer variables ) .",
    "the decidability and complexity of the reachability problem for such programs pose challenging research questions .",
    "a long standing and still open one is the decidability of the reachability problem for programs where variables behave like petri net counters and control paths are taken in a context - free language .",
    "a lower bound exists @xcite but decidability remains open .",
    "atig and ganty @xcite showed decidability when the context - free language is of bounded index .",
    "the complexity of reachability was settled for branching vass by lazic and schmitz @xcite .",
    "when variables updates / guards are given by gap - order constraints , reachability is decidable @xcite .",
    "it is in pspace when the set of control paths is regular @xcite .",
    "more general updates and guard ( like octagons ) immediately leads to undecidability .",
    "this explains the restriction to bounded control sets .",
    "@xcite studied the case of updates / guards of the form @xmath541 .",
    "they show that ltl is np - complete on for bounded regular control sets , hence reachability is in np .",
    "godoy and tiwari @xcite studied the invariant checking problem for a class of procedural programs where all executions conform to a bounded expression , among other restrictions .",
    "10    p.  a. abdulla , m.  f. atig , g.  delzanno , and a.  podelski .",
    "push - down automata with gap - order constraints . in _ fsen@xmath54213 _ ,",
    "volume 8161 of _ lncs _ , page 199216 .",
    "springer , 2013 .",
    "r.  alur and p.  madhusudan .",
    "adding nesting structure to words .",
    ", 56(3):16:116:43 , 2009 .",
    "m.  f. atig and p.  ganty .",
    "approximating petri net reachability along context - free traces . in _ fsttcs@xmath54211 _ ,",
    "volume  13 of _ lipics _ ,",
    "pages 152163 .",
    "schloss dagstuhl , 2011 .",
    "s.  bardin , a.  finkel , j.  leroux , and l.  petrucci .",
    ": fast acceleration of symbolic transition systems . in _ cav@xmath54203 _ ,",
    "volume 2725 of _ lncs _ , pages 118121 .",
    "springer , 2003 .",
    "a.  bouajjani , j.  esparza , a.  finkel , o.  maler , p.  rossmanith , b.  willems , and p.  wolper . an efficient automata approach to some problems on context - free grammars .",
    ", 74:221227 , 2000 .",
    "m.  bozga , r.  iosif , and f.  konen . fast acceleration of ultimately periodic relations . in _ cav@xmath54210 _ ,",
    "volume 6174 of _ lncs _ , pages 227242 .",
    "springer , 2010 .",
    "m.  bozga , r.  iosif , and f.  konen .",
    "safety problems are np - complete for flat integer programs with octagonal loops . in _ vmcai@xmath54214 _ , volume 8318 of _ lncs _ , 2014 .",
    "l.  bozzelli and s.  pinchinat .",
    "verification of gap - order constraint abstractions of counter systems .",
    ", 523:136 , 2014 .",
    "s.  demri , a.  k. dhar , and a.  sangnier .",
    "taming past ltl and flat counter systems . in _ ijcar@xmath54212 _ , volume 7364 of _ lncs _ , page 179193 .",
    "springer , 2012 .",
    "j.  esparza and p.  ganty .",
    "complexity of pattern - based verification for multithreaded programs . in _ popl@xmath54211 _ , pages 499510 .",
    "acm press , 2011 .",
    "p.  ganty , r.  iosif , and f.  konen .",
    "underapproximation of procedure summaries for integer programs . in _ tacas@xmath54213 _ ,",
    "volume 7795 of _ lncs _ , pages 247261 .",
    "springer , 2013 .",
    "s.  ginsburg . .",
    "mcgraw - hill , inc .",
    ", new york , ny , usa , 1966 .",
    "g.  godoy and a.  tiwari .",
    "invariant checking for programs with procedure calls . in _",
    "sas@xmath54209 _ ,",
    "volume 5673 of _ lncs _ , pages 326342 .",
    "springer , 2009 .",
    "h.  hojjat , r.  iosif , f.  konen , v.  kuncak , and p.  rmmer . accelerating interpolants . in _ atva@xmath54212 _ , 2012 .",
    "d.  kroening , m.  lewis , and g.  weissenbacher .",
    "under - approximating loops in c programs for fast counterexample detection . in _ cav@xmath54213 _ , lncs , pages 381396 .",
    "springer , 2013 .",
    "m.  lange and h.  lei . to or not to ?",
    "an efficient yet presentable version of the algorithm .",
    ", 8 , 2008 - 2010 .",
    "r.  lazic .",
    "the reachability problem for vector addition systems with a stack is not elementary .",
    "rp@xmath54212 , 2012 .",
    "r.  lazic and s.  schmitz .",
    "non - elementary complexities for branching vass , mell , and extensions . in _ csl - lics@xmath54214_. acm , 2014 .",
    "a.  w. lin . .",
    "phd thesis , school of informatics , university of edinburgh , august 2010 .",
    "m.  luker . a family of languages having only finite - index grammars . , 39(1):1418 , 1978 .",
    "m.  luker .",
    "control sets on grammars using depth - first derivations .",
    ", 13:349359 , 1980 .",
    "m.  luttenberger and m.  schlund .",
    "an extension of parikh s theorem beyond idempotence . ,",
    "abs/1112.2864 , 2011 .",
    "a.  min . the octagon abstract domain . , 19(1):31100 , 2006 .",
    "m.  minsky . .",
    "prentice - hall , 1967 .",
    "p.  z. revesz .",
    "a closed - form evaluation for datalog queries with integer ( gap)-order constraints .",
    ", 116(1):117  149 , 1993 .",
    "a.  schrijver . .",
    "wiley , 1998 .",
    "the appendix is divided in two parts .",
    "appendix  [ sec : easy ] contains easy results about context - free languages and have been included for the sake of being self - contained .",
    "they are variations of classical constructions so as to take into account index and depth - first policy . to keep proofs concise , we assume that the grammars are in @xmath50-normal form ( @xmath50nf for short ) .",
    "a grammar is in @xmath50nf if all its productions @xmath101 satisfy @xmath543 .",
    "any grammar @xmath94 can be converted into an equivalent @xmath50nf grammar @xmath544 , such that @xmath545 , in time @xmath546 @xcite .",
    "note that @xmath50nf is a special case of the general form we assumed where each production @xmath163 is such that @xmath76 contains at most @xmath50 terminals and @xmath50 nonterminals .",
    "appendix  [ sec : hard ] contains the rest of the proofs about the combinatorial properties of derivations .",
    "it is well - known that the intersection between a context - free and a regular language is context - free .",
    "below we define the grammar that generates the intersection between the language of a given grammar @xmath547 and a regular language given by a bounded expression @xmath548 over @xmath65 where @xmath549 denotes the length of each @xmath6 .",
    "let @xmath550 be the grammar generating the regular language of @xmath82 , where : @xmath551 \\prod^{\\pat } & = & \\set{\\textsc{q}^{(s)}_{i}\\rightarrow ( w_s)_{i}\\ , \\textsc{q}^{(s)}_{i+1}\\mid 1 \\leq   s \\leq   d \\ , \\land \\ , 1 \\leq   i < \\ell_s } \\ ; \\cup\\\\[0.2 cm ] & & \\set{\\textsc{q}^{(s)}_{\\ell_s}\\rightarrow ( w_s)_{\\ell_s}\\ , \\textsc{q}^{(s')}_{1}\\mid 1 \\leq   s \\leq   s ' \\leq   d } \\ ; \\cup\\\\[0.2 cm ] & & \\set{\\textsc{q}_1^{(s)}\\rightarrow \\varepsilon \\mid 1 \\leq   s \\leq   d}\\enspace . \\end{array}\\ ] ] it is routine to check that @xmath552 .",
    "moreover , notice that the number of nonterminals in @xmath292 equals the size of @xmath82 , i.e.  @xmath553 .",
    "[ rem : letter - bounded - complement ] note that when @xmath82 is letter - bounded ( @xmath554 ) , the grammar @xmath555 generating is given by : @xmath556 \\prod_1^{\\pat } & = & \\set{\\textsc{q}^{(s ) } \\rightarrow a_{s ' } \\ , \\textsc{q}^{(s ' ) } \\mid 1 \\leq   s \\leq s ' \\leq   d } \\ ; \\cup\\\\[0.2 cm ] & & \\set{\\textsc{q}^{(s ) } \\rightarrow b\\ , \\textsc{q}_{\\mathit{sink } } \\mid b \\in \\sigma \\setminus \\{a_s , a_{s+1 } , \\ldots , a_d\\ } } \\ ; \\cup\\\\[0.2 cm ] & & \\set{\\textsc{q}^{(s)}\\rightarrow \\varepsilon \\mid 1 \\leq   s \\leq   d}\\ ; \\cup\\\\[0.2 cm ] & & \\set{\\textsc{q}_{\\mathit{sink } } \\rightarrow b\\ , \\textsc{q}_{\\mathit{sink } } \\mid b \\in \\sigma } \\end{array}\\ ] ] is such that @xmath557 .",
    "furthermore , @xmath558 is complete  all terminals can be produced from all nonterminals  and it is deterministic when @xmath82 is strict . then a grammar @xmath559 , such that @xmath560 , can be computed in time @xmath561 , by replacing each production @xmath562 , with @xmath563 .    given @xmath564 , and a grammar @xmath565 in 2nf and @xmath240 , our goal is to define a grammar @xmath566 that produces the language @xmath567 , for some @xmath568 .",
    "the definition of @xmath569 follows :    @xmath570    \\mid x \\in \\vars \\land \\textsc{q}^{(r)}_{s}\\in\\vars^{\\pat}\\land    \\textsc{q}^{(u)}_{v } \\in\\vars^{\\pat}\\land r\\leq u}$ ]    @xmath571 is defined as follows :    for every production @xmath572 where @xmath71 , @xmath571 has a production @xmath573&\\rightarrow w & \\text{if } \\textsc{q}^{(r)}_{s}\\rightarrow^ * w \\ , \\textsc{q}^{(u)}_{v}\\enspace ; \\label{eq : terminalsonly }      \\end{aligned}\\ ] ]    for every production @xmath574 , where @xmath575 , @xmath571 has a production @xmath576&\\rightarrow[\\textsc{q}^{(r)}_{s } y \\textsc{q}^{(u)}_{v } ] \\enspace ; \\label{eq:1var }      \\end{aligned}\\ ] ]    for every production @xmath577 , where @xmath578 and @xmath575 , @xmath571 has a production @xmath576&\\rightarrow a \\ , [ \\textsc{q}^{(x)}_{y } y \\textsc{q}^{(u)}_v ] & \\text{if } \\textsc{q}^{(r)}_{s}\\rightarrow a\\,\\textsc{q}^{(x)}_{y } \\in \\prod^{\\pat}\\enspace ; \\label{eq : gammavar }       \\end{aligned}\\ ] ]    for every production @xmath579 , where @xmath575 and @xmath578 , @xmath571 has a production @xmath576&\\rightarrow [ \\textsc{q}^{(r)}_{s } y \\textsc{q}^{(x)}_{y } ] \\ , a & \\text{if } \\textsc{q}^{(x)}_{y}\\rightarrow a\\,\\textsc{q}^{(u)}_{v } \\in \\prod^{\\pat}\\enspace ; \\label{eq : vargamma }      \\end{aligned}\\ ] ]    for every production @xmath580 , @xmath571 has a production @xmath581 & \\rightarrow [ \\textsc{q}^{(r)}_{s } y \\textsc{q}^{(x)}_y]\\,[\\textsc{q}^{(x)}_y z \\textsc{q}^{(u)}_v ] \\enspace ; \\label{eq:2var }      \\end{aligned}\\ ] ]    @xmath571 has no other production .",
    "let @xmath582 be the function that `` strips '' every nonterminal @xmath583 \\in \\vars^\\cap$ ] of the nonterminals from @xmath584 , i.e.  @xmath585 ) = x$ ] . in the following , we abuse notation and extend the @xmath586 function to symbols from @xmath587 , by defining @xmath588 , for each @xmath578 , and further to words @xmath589 as @xmath590 .",
    "finally , for a production @xmath591 , we define @xmath592 , and for a control word @xmath593 , we write @xmath594 for @xmath595 .",
    "[ lem : intersection ] given a grammar @xmath596 and a grammar @xmath597 generating @xmath82 , for every @xmath240 , @xmath598 , @xmath71 , and every @xmath280 , we have :    [ item : inter - only - if ] for every @xmath593 , @xmath599 \\xrightarrow[\\df{k}]{\\gamma}^ * w$ ] only if @xmath242{\\zeta(\\gamma ) } w$ ] and @xmath600    [ item : inter - if ] for every @xmath601 , @xmath242{\\delta } w$ ] and @xmath602 only if @xmath603 \\xrightarrow[\\df{k}]{\\gamma}^ * w$ ] , for some @xmath604 .",
    "consequently , we have @xmath605}(g^{\\cap})=l_x(g ) \\cap \\pat \\enspace$ ] .",
    "( [ item : inter - only - if ] ) by induction on @xmath606 . for the base case @xmath607@xmath110",
    "is the production @xmath608 { \\xrightarrow{{\\scriptscriptstyle } } } w ) \\in",
    "\\delta^\\cap$ ] with @xmath71by case ( [ eq : terminalsonly ] ) of the definition of @xmath609 , we have @xmath610 and there exists a production @xmath611 . since , moreover , @xmath612    { \\xrightarrow{{\\scriptscriptstyle } } } w ) = ( x { \\xrightarrow{{\\scriptscriptstyle } } } w)$ ] , we have that @xmath613{\\zeta(\\gamma ) } w$ ] in @xmath94 .    for the induction step @xmath614 , we have @xmath615 { \\xrightarrow{{\\scriptscriptstyle } } } \\tau ) \\cdot    \\gamma'$ ] , for some production @xmath616 { \\xrightarrow{{\\scriptscriptstyle } } } \\tau \\in \\delta^\\cap$ ] , and a word @xmath617 of length @xmath618 .",
    "we distinguish four cases , based on the structure of @xmath619 :    if @xmath620 $ ] then @xmath621{\\gamma ' } w$ ] is a derivation of @xmath289 . by the induction hypothesis",
    ", we obtain that @xmath622 and @xmath623{\\zeta(\\gamma ' ) } w$ ] is a derivation of @xmath94 .",
    "but @xmath624case ( [ eq:1var ] ) of the definition of @xmath609hence @xmath625 and @xmath242{\\zeta(\\gamma ) } w$ ] is a derivation of @xmath94 .    if @xmath626 $ ] then @xmath627 and @xmath289 has derivation @xmath628      \\xrightarrow[\\df{k}]{\\gamma ' } w'$ ] . by the induction hypothesis , we obtain @xmath629 and @xmath94 has a derivation @xmath630{\\zeta(\\gamma ' ) } w'$ ] . by the case ( [ eq : gammavar ] ) of the definition of @xmath609",
    ", we have @xmath631 and @xmath632 { \\xrightarrow{{\\scriptscriptstyle } } } \\tau ) = ( x { \\xrightarrow{{\\scriptscriptstyle } } } a y )      \\in \\delta$ ] .",
    "thus @xmath633 and @xmath242{\\zeta(\\gamma ) }      w$ ] , since @xmath634 .",
    "the case @xmath635 \\ , a$ ] is symmetric , using the case ( [ eq : vargamma ] ) of the definition of @xmath609 .",
    "if @xmath636\\ ,        [ \\textsc{q}^{(x)}_y z \\textsc{q}^{(u)}_v]$ ] then , by lemma  [ lem : leibniz ] , there exist words @xmath637 such that @xmath638 and either one of the following applies :    @xmath639 \\xrightarrow[\\df{k-1}]{\\gamma_1 } w_1 $ ] , @xmath640 \\xrightarrow[\\df{k}]{\\gamma_2 } w_2 $ ] and @xmath641 , or    @xmath642 \\xrightarrow[\\df{k}]{\\gamma_1 } w_1 $ ] , @xmath640 \\xrightarrow[\\df{k-1}]{\\gamma_2 } w_2 $ ] and @xmath643 .",
    "we consider the first case only , the second being symmetric .",
    "since @xmath644 and @xmath645 , we apply the induction hypothesis and find out that @xmath646 , @xmath647 , and @xmath94 has derivations @xmath648{\\zeta(\\gamma_1 ) } w_1 $ ] and @xmath649{\\zeta(\\gamma_2 ) } w_2 $ ] .",
    "then @xmath650 where @xmath651 . by case ( [ eq:2var ] ) of the definition of @xmath609",
    ", @xmath652 has a production @xmath653 { \\xrightarrow{{\\scriptscriptstyle } } } \\tau)$ ] . since @xmath654 , then @xmath655 , and @xmath94 has a @xmath15-index depth - first derivation @xmath242{\\zeta(\\gamma ) } w$ ] .",
    "( [ item : inter - if ] ) by induction on @xmath656 . for the base case @xmath657",
    ", we have @xmath658 . by the case ( [ eq : terminalsonly ] ) from the definition of @xmath609 , @xmath289 has a rule @xmath659 { \\xrightarrow{{\\scriptscriptstyle } } } w$ ] and , since , moreover , @xmath660 { \\xrightarrow{{\\scriptscriptstyle } } } w ) = \\delta$ ] , we have @xmath661 { \\xrightarrow{{\\scriptscriptstyle } } } w)$ ] .    for the induction step @xmath662 , we have @xmath663 . we distinguish four cases , based on the structure of @xmath619 :    if @xmath664 , for some @xmath575 , by the induction hypothesis , @xmath289 has a derivation @xmath665 \\xrightarrow[\\df{k}]{\\gamma ' } w$ ] , for some @xmath666 . since @xmath622 by case ( [ eq:1var ] ) of the definition of @xmath609 @xmath289 has a production @xmath667 { \\xrightarrow{{\\scriptscriptstyle } } } [ \\textsc{q}^{(s)}_r y      \\textsc{q}_{v}^{(u)}])$ ] .",
    "we define @xmath668 .",
    "it is immediate to check that @xmath669 .    if @xmath670 , for some @xmath578 and @xmath671 , then @xmath627 .",
    "hence @xmath672 , @xmath673 and @xmath94 has a derivation @xmath674{\\delta ' } w'$ ] . by the induction hypothesis",
    ", @xmath289 has a derivation @xmath675 \\xrightarrow[\\df{k}]{\\gamma ' } w'$ ] , for some @xmath666 . by the case ( [ eq : gammavar ] ) of the definition of @xmath609",
    ", there exists a production @xmath676 { \\xrightarrow{{\\scriptscriptstyle } } } a y )    \\in \\delta^\\cap$ ] .",
    "we define @xmath668 .",
    "it is immediate to check that @xmath677 , hence @xmath678    \\xrightarrow[\\df{k}]{\\gamma } w$ ] .",
    "the case @xmath679 , for some @xmath575 and @xmath680 , is symmetrical .    if @xmath681 , for some @xmath682 , then , by lemma  [ lem : leibniz ] , there exist words @xmath683 such that @xmath684 and either one of the following cases applies :    @xmath648{\\delta_1 } w_1 $ ] , @xmath649{\\delta_2 } w_2 $ ] and @xmath685 , or    @xmath623{\\delta_1 } w_1 $ ] , @xmath686{\\delta_2 } w_2 $ ] and @xmath687 .",
    "moreover , we have @xmath688 and @xmath689 , for some @xmath690 .",
    "we consider the first case only , the second being symmetric .",
    "since @xmath691 and @xmath692 we apply the induction hypothesis and find two control words @xmath693 and @xmath694 such that @xmath289 has derivations @xmath695 \\xrightarrow[\\df{k-1}]{\\gamma_1 } w_1 $ ] and @xmath696 \\xrightarrow[\\df{k}]{\\gamma_2 } w_2 $ ] . by case ( [ eq:2var ] ) of the definition of @xmath609 , @xmath289 has a production @xmath697 { \\xrightarrow{{\\scriptscriptstyle } } } [ \\textsc{q}_{s}^{(r ) }        y \\textsc{q}_{y}^{(x ) } ] [ \\textsc{q}_{y}^{(x ) }        z \\textsc{q}_{v}^{(u)}])$ ] . since @xmath698",
    ", we define @xmath699 .",
    "it is immediate to check that @xmath677 and @xmath700 \\xrightarrow[\\df{k}]{\\gamma } w$ ] .    in the rest of this section , for",
    "a given bounded expression @xmath701 over @xmath65 , we associate the strict @xmath250-letter - bounded expression @xmath498 over an alphabet @xmath419 , disjoint from @xmath65 , i.e.@xmath702 , and a homomorphism @xmath322 mapping as follows : @xmath703 , for all @xmath253 .",
    "the next step is to define a grammar @xmath704 , such that @xmath705 and , for all @xmath706 : @xmath707}(g^{\\cap } ) ) \\cap \\patt =   l_{[\\textsc{q}^{(s)}_{1 } x \\textsc{q}^{(x)}_{1}]}(g^\\bowtie)\\enspace .\\ ] ] the grammar @xmath312 is defined from @xmath289 , by the following modification of the productions from @xmath708 , defined by a function @xmath709 :    @xmath710 \\rightarrow w ) = [ \\textsc{q}^{(r)}_{s } x \\textsc{q}^{(u)}_{v } ] \\rightarrow z$ ] where    if @xmath711 then @xmath712 .    if @xmath713 then we have @xmath714 and we let @xmath715 if @xmath716 else @xmath712 .",
    "if @xmath717 then we have @xmath718 for some @xmath719 .",
    "define the word @xmath720 of length at most @xmath50 such that @xmath721 if @xmath722 ; else @xmath723 and @xmath724 if @xmath716 else @xmath725 .",
    "@xmath726 \\rightarrow b \\ ,      [ \\textsc{q}^{(x)}_{y }",
    "y \\textsc{q}^{(u)}_v ] ) = [ \\textsc{q}^{(r)}_{s } x      \\textsc{q}^{(u)}_v ] \\rightarrow c \\ , [ \\textsc{q}^{(x)}_{y } y      \\textsc{q}^{(u)}_v ] $ ] where @xmath727 if @xmath728 ; else @xmath729 .",
    "@xmath726 \\rightarrow",
    "[ \\textsc{q}^{(r)}_{s } y \\textsc{q}^{(x)}_y]\\ , b ) = [ \\textsc{q}^{(r)}_{s } x      \\textsc{q}^{(u)}_v ] \\rightarrow [ \\textsc{q}^{(r)}_{s } y      \\textsc{q}^{(x)}_y]\\ , c$ ] where @xmath730 if @xmath716 ; else @xmath729 .",
    "@xmath731 otherwise .",
    "let @xmath732 .",
    "in addition , for every control word @xmath733 of length @xmath259 , let @xmath734 .",
    "a consequence of the following proposition is that the inverse relation @xmath735 is a total function .",
    "[ prop : singleton ] for each production @xmath736 , the set @xmath737 is a singleton .    by case split , based on the type of the production @xmath738 .",
    "since @xmath312 is in @xmath50nf we have :    if @xmath739 { \\xrightarrow{{\\scriptscriptstyle } } }    a)$ ] then @xmath740 { \\xrightarrow{{\\scriptscriptstyle } } } w\\}$ ] , where @xmath741 is the shortest step sequence of @xmath292 between @xmath742 and @xmath743 which is unique by @xmath564 and produces @xmath744 .",
    "if @xmath739 { \\xrightarrow{{\\scriptscriptstyle } } }    [ \\textsc{q}_{y}^{(x ) } y \\textsc{q}_{t}^{(z)}])$ ] , then either one of the cases below must hold :    @xmath745 and @xmath746 , for some @xmath747 . in this case",
    "@xmath327 is uniquely determined by @xmath742 and @xmath748 , thus we get @xmath740 { \\xrightarrow{{\\scriptscriptstyle } } } b~[\\textsc{q}_{y}^{(x ) } y        \\textsc{q}_{t}^{(z)}]\\}$ ] .",
    "@xmath749 and @xmath750 , for some @xmath751 . in this case",
    "we get , symmetrically , @xmath752 { \\xrightarrow{{\\scriptscriptstyle } } }        [ \\textsc{q}_{y}^{(x ) } y \\textsc{q}_{t}^{(z)}]~b\\}$ ] .",
    "@xmath745 and @xmath749",
    ". then @xmath753 .",
    "if @xmath739 { \\xrightarrow{{\\scriptscriptstyle } } }    a_r\\ , [ \\textsc{q}_{y}^{(x ) } y \\textsc{q}_{v}^{(u)}])$ ] for some @xmath754 , hence @xmath728 ( respectively , @xmath755 { \\xrightarrow{{\\scriptscriptstyle } } }    [ \\textsc{q}^{(r)}_{s } y \\textsc{q}_{y}^{(x)}]\\ , a_r$ ] hence @xmath716 ) and then the only possibility is @xmath756 { \\xrightarrow{{\\scriptscriptstyle } } } ( w_r)_{\\ell_{r}}\\ ,      [ \\textsc{q}_{y}^{(x ) } y \\textsc{q}_{v}^{(u)}]\\}$ ] ( respectively , @xmath755 { \\xrightarrow{{\\scriptscriptstyle } } }      [ \\textsc{q}^{(r)}_{s } y \\textsc{q}_{y}^{(x)}]\\ , ( w_r)_{\\ell_{r}}$ ] ) .",
    "if @xmath757      \\rightarrow [ \\textsc{q}^{(r)}_{s } y \\textsc{q}^{(u)}_v]\\ ,                [ \\textsc{q}^{(u)}_v z \\textsc{q}^{(x)}_y])$ ] then @xmath758 .",
    "[ lem : interface ] given a grammar @xmath279 and a bounded expression @xmath18 over @xmath65 , for every @xmath113 , every @xmath759 and every @xmath760 , the following hold :    [ item : g - bowtie ] @xmath761}^{(k)}(g^{\\bowtie } ) = h^{-1}(l_{[\\textsc{q}^{(s)}_1      x \\textsc{q}^{(x)}_{1}]}^{(k)}(g^\\cap ) ) \\cap \\patt$ ] ,    [ item : xi ] for each control set @xmath762 , such that @xmath763}}^{(k)}(g^\\bowtie ) \\subseteq",
    "\\hat{l}_{[\\textsc{q}^{(s)}_1      x \\textsc{q}^{(x)}_{1}]}(\\gamma , g^\\bowtie)$ ] , we have @xmath764}}^{(k)}(g^\\cap ) \\subseteq \\hat{l}_{{[\\textsc{q}^{(s)}_1      x \\textsc{q}^{(x)}_{1}]}}(\\iota^{-1}(\\gamma ) , g^\\cap)$ ] ,    [ item : bowtie - xi - complexity ] @xmath765 is computable in time @xmath766 .",
    "we start by proving the following facts :    [ fact : bowtie - letter - bounded ] for all @xmath113 and @xmath759 , we have @xmath767}(g^\\bowtie ) \\subseteq \\patt$ ] .",
    "let @xmath768}(g^\\bowtie)$ ] .",
    "we have @xmath769 \\xrightarrow{\\gamma } \\tilde{w}$ ] is a derivation of @xmath765 for some control word @xmath110 over @xmath770 . by contradiction ,",
    "assume @xmath771 , that is there exist @xmath772 such that @xmath773 and @xmath774 and @xmath775 with @xmath776 .",
    "the definition of @xmath777 shows that there exists @xmath778}(g^{\\cap})$ ] such that @xmath769 \\xrightarrow{\\iota^{-1}(\\gamma ) } w$ ] in @xmath326 , hence that @xmath779 since @xmath767}(g^{\\cap})\\subseteq\\pat$ ] , and finally that @xmath780 .",
    "now , the mapping @xmath777 is defined such that a production in its image produces a @xmath781 when , in the underlying @xmath564 , either control moves forward from @xmath782 to @xmath783 , e.g. @xmath784 \\rightarrow a_r \\ , [ \\textsc{q}^{(u)}_{1 } y \\textsc{q}^{(x)}_y]$ ] or control moves backward form @xmath783 to @xmath782 , e.g. @xmath785 \\rightarrow [ \\textsc{q}^{(x)}_{y } y \\textsc{q}^{(r)}_s]\\ , a_r$ ] .",
    "therefore , by the previous assumption on @xmath786 where @xmath787 occurs before @xmath788 , we have that a production of @xmath789 for some @xmath790 and then a production of @xmath791 for some @xmath792 necessarily occurs in that order in @xmath793 .",
    "but this is a contradiction because @xmath794 and the definition of @xmath564 prohibits control to move from @xmath795 to @xmath796 for any @xmath797 .",
    "[ fact : bowtie - cap ] for all @xmath113 , @xmath759 , @xmath798 , @xmath280 and @xmath799 : @xmath800    \\xrightarrow[(k)]{\\gamma } w_1^{i_1 } \\ldots w_d^{i_d } ~\\mbox{in $ g^\\cap$ }      \\text { if and only if } [ \\textsc{q}^{(s)}_1 x \\textsc{q}^{(x)}_{1 } ]    \\xrightarrow[(k)]{\\iota(\\gamma ) } a_1^{i_1 } \\ldots a_d^{i_d } ~\\mbox{in    $ g^\\bowtie$}\\enspace .\\ ] ]    by induction on @xmath606 , and case analysis on the right - hand side of @xmath801 .",
    "( [ item : g - bowtie ] ) `` @xmath802 '' let @xmath803}^{(k)}(g^\\bowtie)$ ] .",
    "by fact  [ fact : bowtie - letter - bounded ] , we have that @xmath804 . it remains to show that @xmath805}(g^{\\cap}))$ ] , i.e. that @xmath806}(g^{\\cap})$ ] , which follows by fact  [ fact : bowtie - cap ] .",
    "`` @xmath807 '' let @xmath805}^{(k)}(g^{\\cap } ) ) \\cap \\patt$ ] be a word , hence @xmath808 for some @xmath809 .",
    "then @xmath810}^{(k)}(g^{\\cap})$ ] by fact  [ fact : bowtie - cap ] and we are done .",
    "( [ item : xi ] ) let @xmath811}^{(k)}(g^\\cap)$ ] be a word .",
    "then @xmath289 has a derivation @xmath812 \\xrightarrow[(k)]{}^ * w$ ] .",
    "by fact  [ fact : bowtie - cap ] , also @xmath312 has a derivation @xmath813 \\xrightarrow[(k)]{}^ * a_1^{i_1 } \\ldots a_d^{i_d}$ ] . by the hypothesis @xmath814}^{(k)}(g^\\bowtie ) \\subseteq \\hat{l}_{[\\textsc{q}^{(s)}_1 x \\textsc{q}^{(x)}_{1}]}(\\gamma , g^\\bowtie)$ ] , there exists a control word @xmath815 such that @xmath812 \\xrightarrow[]{\\gamma } a_1^{i_1 } \\ldots a_d^{i_d}$ ] in @xmath312 , and by fact  [ fact : bowtie - cap ] , we have @xmath812 \\xrightarrow[]{\\iota^{-1}(\\gamma ) } w_1^{i_1 } \\ldots w_d^{i_d}$ ] in @xmath289 . hence @xmath816}(\\iota^{-1}(\\gamma ) , g^\\cap)$ ] .",
    "( [ item : bowtie - xi - complexity ] ) given that each production @xmath817 is the image of a production @xmath818 via @xmath777 , we have @xmath819 .",
    "hence @xmath820 .",
    "now , each production @xmath821 corresponds to a production @xmath394 of @xmath94 , such that the nonterminals occurring on both sides of @xmath394 are decorated with at most @xmath14 nonterminals from @xmath584 . since @xmath553 , we obtain that , for each production @xmath394 of @xmath94 , @xmath289 has at most @xmath822 productions of size @xmath823 .",
    "hence @xmath824 , and @xmath312 can be constructed in time @xmath825 .",
    "[ rem : letter - bounded - inclusion ] given @xmath826 , @xmath113 , and a strict @xmath250-letter - bounded expression @xmath498 , the check @xmath535 can be decided in time @xmath827 , by building a grammar @xmath559 such that @xmath828 ( see remark  [ rem : letter - bounded - complement ] ) and checking @xmath829 .",
    "a similar argument shows that queries @xmath830 , can be answered in time @xmath831 ( * ? ? ?",
    "* section  5 ) .",
    "[ lem : leibniz ] given @xmath832 and a @xmath15-index depth - first step sequence @xmath833{\\gamma } w$ ] , for two nonterminals @xmath834 , @xmath744 , and @xmath281 .",
    "there exist @xmath835 such that @xmath836 , and @xmath837 such that either one of the following holds :              for some words @xmath683 and control words @xmath837 .",
    "let us consider the first case , the second being symmetric . since @xmath833{\\gamma_1 } w_1\\ , y$ ] is a @xmath15-index step sequence , the sequence @xmath841 obtained by erasing the @xmath115 nonterminal from the last position in all steps of the sequence , is of index @xmath249 , i.e.  @xmath838{\\gamma_1 } w_1 $ ] .",
    "also , since @xmath842{\\gamma_2 } w_1\\ , w_2 $ ] , we obtain @xmath623{\\gamma_2 } w_2 $ ] , by erasing the first @xmath843 symbols in all steps of the sequence . clearly , in this case we have @xmath839 .",
    "first , we formally define the notion of depth - first derivations by annotating symbols occurring in every step with a positive integer called the _",
    "rank_. intuitively , the rank assigns a priority between symbols in a word . for a set @xmath145 of symbols ( e.g. the terminals and nonterminals ) and",
    "a set @xmath844 , we define @xmath845 and call @xmath846 a _ ranked alphabet_. we also sometimes write @xmath847 when @xmath156 is a singleton . a _ ranked word _ ( r - word ) is a word over a ranked alphabet .",
    "given a word @xmath76 of length @xmath259 and an @xmath259-dimensional vector @xmath260 , the _ ranked word _",
    "@xmath261 is the sequence @xmath262 , in which the @xmath75th element of @xmath263 annotates the @xmath75th symbol of @xmath76 .",
    "we also denote @xmath264 as a shorthand .",
    "let @xmath596 be a grammar and @xmath848 be a step , for a vector @xmath849 , we define the _ ranked step _ ( r - step ) @xmath850 if and only if @xmath851 and @xmath852 where each symbol in @xmath76 has rank @xmath853 and @xmath854 is the maximum among the ranks of the nonterminals in @xmath855 , with position @xmath102 omitted is the only non - terminal in @xmath225 , we have @xmath856 . ] . an r - step is said to be _ depth - first _ , denoted @xmath857{{\\scriptscriptstyle } } } v^{\\boldsymbol{\\beta}}$ ] iff the rank of the nonterminal at position @xmath102 where the rule applies is maximal , i.e. @xmath858 . for instance the transition labelled @xmath859 in fig .",
    "[ fig : running - example ] ( d ) is a depth - first r - step .",
    "a r - step sequence is said to be depth - first if all of its r - steps are depth - first .",
    "finally , an unranked step sequence @xmath860 is said to be depth - first , written @xmath861{{\\scriptscriptstyle \\gamma } } } w_n$ ] , iff there exist vectors @xmath862 such that @xmath863{{\\scriptscriptstyle ( \\gamma)_1 } } } w_1^{\\boldsymbol{\\alpha}_1 } \\ldots w_{n-1}^{\\boldsymbol{\\alpha}_{n-1 } }   { \\xrightarrow[{\\scriptscriptstyle \\mathbf{df}}]{{\\scriptscriptstyle ( \\gamma)_{n } } } } w_{n}^{\\boldsymbol{\\alpha}_{n}}$ ] holds .",
    "let @xmath864 be the set of r - words such that when deleting ranked terminals , the resulting word is no longer than @xmath15 and has ranks between @xmath248 and @xmath249 .",
    "it is routine to check that @xmath865 is closed for the relation @xmath866{}$ ] . for a r - word @xmath867 ,",
    "let @xmath868 be the r - word @xmath869 . intuitively , @xmath868 projects out the terminals of @xmath76 , and orders the remaining nonterminals in the increasing order of their ranks . for instance , @xmath870 .",
    "the @xmath871 operator is naturally lifted from r - words to sets of r - words . recall that we define the set @xmath872 of states of @xmath873 as @xmath874 .",
    "it is routine to check that @xmath875 holds .",
    "now let us consider @xmath876 which we defined as follows .",
    "let @xmath268 , @xmath269 we have @xmath270 iff        as @xmath878 , we find that @xmath879 .",
    "furthermore , it is an easy exercise to show that @xmath270 iff there exists @xmath880 such that @xmath881{(x , w ) }   w^{\\boldsymbol{\\eta}}$ ] and @xmath882 .",
    "it follows that , we can equivalently write @xmath883 for the labeled graph the edge relation , is defined as : @xmath884 iff @xmath885{p } w^{\\boldsymbol{\\eta } } \\land v^{\\boldsymbol{\\beta } } = \\age{w^{\\boldsymbol{\\eta}}}$ ] .",
    "`` @xmath886 '' we shall prove the following more general statement .",
    "let @xmath887{\\gamma }    w^{\\boldsymbol{\\beta}}$ ] where @xmath888 be a @xmath15-index depth - first r - step sequence .",
    "by induction on @xmath889 , we show the existence of a path @xmath890 in @xmath369 . for the base case @xmath891 , we have @xmath892 which yields @xmath893 and since @xmath894 the hypothesis shows that @xmath895 , hence that @xmath896 and we are done .",
    "for the induction step @xmath897 , let @xmath898{p }    w^{\\boldsymbol{\\beta } } $ ] be the last step of the sequence , for some @xmath899 , i.e.  @xmath900 with @xmath901 . by the induction hypothesis , @xmath369 has a path @xmath902 .",
    "since @xmath903 and @xmath904{p }    w^{\\boldsymbol{\\beta}}$ ] , we have that @xmath905 by definition of @xmath876 , hence we obtain a path @xmath906 .",
    "`` @xmath907 '' we prove a more general statement .",
    "let @xmath908 be a path in @xmath247 , for some words @xmath909 .",
    "we show by induction on @xmath910 that there exist r - words @xmath911 , such that @xmath912 , @xmath913 , and @xmath887{\\gamma }    w^{\\boldsymbol{\\alpha}}$ ] .",
    "the base case @xmath891 is trivial , because @xmath914 and since @xmath915 then there exists @xmath916 such that @xmath917 and we are done . for the induction step @xmath606 , let @xmath918 , for some production @xmath919 and @xmath920 . by the induction hypothesis ,",
    "there exist r - words @xmath921 such that @xmath922 is a path in @xmath369 , and @xmath887{\\sigma }    v^{\\boldsymbol{\\eta}}$ ] is a @xmath15-index r - step sequence .",
    "the definition of the edge relation in @xmath369 and @xmath923 shows that @xmath924{p }    w^{\\boldsymbol{\\beta}}$ ] for some @xmath925 such that @xmath913 .    for the upper bound on the size of @xmath369 , recall that each vertex of @xmath369 is a ranked word of length at most @xmath15 , consisting of non - terminals only , with ranks in the interval @xmath926 $ ] .",
    "moreover , the productions of @xmath94 do not produce more than @xmath50 nonterminals at a time .",
    "hence , in every vertex of @xmath369 , at most @xmath50 positions carry the same rank .",
    "since the length of each vertex in @xmath872 is at most @xmath15 and , for each @xmath927 $ ] , there are at most @xmath928 choices of nonterminals with rank @xmath75 , we have @xmath929 .      when @xmath930 , because @xmath931 is a strict @xmath348-letter - bounded expression with @xmath348 a fixed constant , for every step sequence @xmath932 , we have @xmath933 .",
    "also remark that @xmath934 for some @xmath935 , hence that @xmath936 for each @xmath937 . for convenience , given @xmath938 ,",
    "we denote @xmath939 .",
    "we recall the definition of the labeled graph @xmath940 whose number of vertices we denote by @xmath941 . due to the form of the productions in @xmath94",
    ", we can safely restrict @xmath872 to r - words with at most @xmath50 nonterminals having the same rank , hence @xmath942 .",
    "we define @xmath943 is the set of elementary cycles with @xmath384 as endpoints .",
    "[ prop : weighted - graph - decomposition ] let @xmath832 be a grammar , @xmath113 be a nonterminal and @xmath944 be a strict @xmath348-letter bounded expression , for some @xmath361 .",
    "for any two vertices @xmath268 of @xmath369 , and any path @xmath945 , there exists a path @xmath946 such that @xmath947 , @xmath948 and @xmath404 is of the form @xmath405 , where @xmath949 , @xmath950 and @xmath951 , for each @xmath952 , are acyclic paths , @xmath953 are cycles , and @xmath954 .",
    "the proof goes along the lines of that of lemma  7.3.2 in lin s phd thesis @xcite .",
    "this proof is carried on graphs labeled with integer tuples , and addition , instead of concatenation .",
    "since the only property of integer tuple addition , used in the proof of ( * ? ? ?",
    "* lemma  7.3.2 ) , is commutativity , it suffices to observe that @xmath948 , whenever @xmath955 is a permutation of @xmath956 .",
    "since @xmath930 where @xmath308 is a strict @xmath348-letter bounded expression , for every @xmath962 the induced word @xmath963 is such that : @xmath964 , i.e.  each production in @xmath267 issues at most @xmath50 symbols from @xmath965 , and each elementary cycle is of length at most @xmath941 .",
    "the nonnegative solutions of the inequation @xmath966 are solutions to the equation @xmath967 , for a nonnegative slack variable @xmath968 . since the number of nonnegative solutions to the latter equation is @xmath969 . ]",
    "is @xmath970 , we have : @xmath971 for each vertex @xmath273 , we are interested in a set @xmath972 such that @xmath973 and , moreover , for each @xmath974 there exists @xmath975 such that @xmath976 when @xmath977 and @xmath978 holds .",
    "for now we assume we have computed such sets @xmath979 ( their effective computation will be described later ) .",
    "we are now ready to define the bounded expression @xmath980 . given a finite set @xmath981 of control words indexed following some total ordering ( e.g.  we assume a total order @xmath982 on @xmath983 , and define @xmath984 in the lexicographical extension of @xmath982 , then extend @xmath985 to a lexicographical order @xmath986 on control words ) , we define the bounded expression : @xmath987 .",
    "let @xmath988 be the set of vertices of @xmath369 , taken in some order .",
    "we define the set @xmath989 of bounded expressions as follows : @xmath990 let us now prove the language inclusion .",
    "it follows from theorem  [ thm : luker ] , that @xmath991 for every @xmath992 , @xmath993 and @xmath16 .",
    "hence we trivially have @xmath994 . for the contrapositive @xmath995 , it suffices to show the following : given a @xmath15-index depth first step sequence @xmath996{\\gamma } u \\ , y \\ , v$ ] , there exists a control word @xmath997 such that @xmath242{\\gamma ' } u'\\ , y\\ , v'$ ] and @xmath998 .    because lemma  [ fsa - dfk ] shows that each path @xmath999 corresponds to a control word @xmath955 such that @xmath242{\\omega(\\pi ) } u\\ , y\\ , v$ ] , and because @xmath1000 where @xmath308 is a strict @xmath348-letter bounded expression , it suffices to show that exists a path @xmath1001 such that @xmath1002 and @xmath1003 .",
    "we apply the result from prop .",
    "[ prop : weighted - graph - decomposition ] which shows that there exists a path @xmath1004 , such that @xmath1005 , @xmath1006 and @xmath374 is of the form @xmath1007 , where @xmath1008 , @xmath1009 , and @xmath1010 for each @xmath952 are acyclic paths , @xmath1011 are cycles , @xmath1012 are vertices , and @xmath954 .",
    "hence we conclude that      for each cycle @xmath1015 , consisting of a concatenation of several elementary cycles @xmath1016 , the cycle @xmath1017 obtained by a lexicographic reordering of @xmath1018 ( based on the lexicographic order of their value in @xmath1019 ) belongs to @xmath1020 , for all @xmath1021 .",
    "second , it is easy to see that the words produced by @xmath415 and @xmath1017 are the same , since the order of productions labeling @xmath415 ( @xmath1017 ) is not important .",
    "let @xmath404 be the path @xmath1022 . by prop .",
    "[ prop : weighted - graph - decomposition ] , we have that @xmath976 .",
    "moreover , @xmath1023 . since @xmath242{\\omega(\\pi ) } u \\ , y \\ , v$ ] and @xmath1024{\\omega(\\pi ' ) } u ' \\ , y \\ , v'$ ] are step sequences of @xmath94 , the previous equality implies @xmath1025 .    concerning the time needed to construct the bounded expression @xmath980 , the main ingredient in the previous , is the definition of the sets of cycles @xmath1026 , such that @xmath1027 and , moreover , for each @xmath974 there exists @xmath975 such that @xmath1028 when @xmath977 and @xmath978 holds .",
    "below we describe the construction of such sets .",
    "first , observe that the number of vertices in this graph is @xmath1036 .",
    "second , it is routine to check ( by induction on the length of a path ) that given a path @xmath1037 for some @xmath1038 we have @xmath1039 . next , for each @xmath878 define the set @xmath1040 of paths of @xmath385 consisting for each @xmath1041 of a single path ( one with the least number of edges ) from @xmath1042 to @xmath1043 . by definition of @xmath1044",
    ", we have that @xmath1045 and , moreover , for each @xmath1046 ( @xmath374 is a path of @xmath369 ) there exists a path @xmath1047 such that @xmath1048 where @xmath1049 and @xmath1050 are the endpoints of @xmath367 .",
    "hence , we define @xmath373 to be the set of cycles in @xmath369 corresponding to the paths in @xmath1051 .",
    "the latter can be computed applying dijkstra s single source shortest path algorithm on @xmath385 , with source vertex @xmath1052 , and assuming that the distance between adjacent vertices is always 1 .",
    "the running time of the dijkstra s algorithm is @xmath1053 . upon termination , one can reconstruct a shortest path @xmath367 from @xmath1052 to each vertex @xmath1054 , and add the corresponding cycle of @xmath369 to @xmath373 .",
    "since there are at most @xmath355 vertices @xmath1054 in @xmath1055 , and building a shortest path for each such vertex takes at most @xmath355 time , we can populate the set @xmath373 in time @xmath355 .",
    "once the sets @xmath373 are built , it remains to compute the bounded expressions @xmath1056 , @xmath1057 and @xmath1058 .",
    "as shown below , they are all computable in time @xmath355 .",
    "algorithm  [ alg : constant - control - set ] gives the construction of @xmath980 .",
    "an upper bound on the time needed for building @xmath980 can be derived by a close analysis of the running time of algorithm  [ alg : constant - control - set ] .",
    "the input to the algorithm is a grammar @xmath94 , a strict @xmath348-letter bounded expression @xmath308 and an integer @xmath280 .",
    "first ( lines  [ ln : h - start][ln : h - end ] ) the algorithm builds the @xmath385 graph , which takes time @xmath355 . the loop on ( lines  [ ln : b0-start][ln : b0-end ] ) computes , for each vertex @xmath384 , and each @xmath348-dimensional vector @xmath1059 , an elementary path from @xmath1042 to @xmath1060 in @xmath385 . for each @xmath273 , this set is kept in a variable @xmath373 ( line  [ ln : cq ] ) .",
    "the variable @xmath1020 at the end of the loop contains the expression @xmath1061 , since both @xmath1062 and @xmath1063 , the loop at ( lines  [ ln : b0-start][ln : b0-end ] ) takes time @xmath355 as well .",
    "the remaining part of the algorithm computes first an over - approximation of @xmath1064 ( lines  [ ln : c - start][ln : c - end ] ) in the variable @xmath1065observe that the algorithm computes @xmath1066 instead of @xmath1064 . finally , the control set @xmath980 with the needed property is produced by @xmath1067 repeated concatenations of the bounded expression @xmath1068 , at lines ( [ ln : pat - start][ln : pat - end ] ) .",
    "since both loops take time at most @xmath1069 , we conclude that algorithm  [ alg : constant - control - set ] runs in time @xmath355 .      a grammar @xmath94 is said to be _ reduced _ for @xmath118 iff @xmath1070 and @xmath1071 , for every @xmath575 , @xmath1072 .",
    "a grammar can be reduced in polynomial time , by eliminating unreachable and unproductive nonterminals ( * ? ? ?",
    "* lemma  1.4.4 ) .",
    "[ item : easyfact1 ] first , no production of @xmath94 has the form @xmath1073 , where @xmath1074 and @xmath226 contains a symbol of @xmath461 . by contradiction ,",
    "assume such a production exists where @xmath1075 is a nonterminal occurring in @xmath226 . because @xmath1076 , @xmath333 occurs in some word of @xmath1077 and @xmath458 occurs in some word of @xmath1078 .",
    "on the other hand , we have that either no word of @xmath1079 contains @xmath333 or no word of @xmath1079 contains @xmath458 , since @xmath1074 . because @xmath94 is reduced , we have @xmath1080 .",
    "we reach a contradiction , since @xmath1081 contains a word in which @xmath333 occurs and a word in which @xmath458 occurs , because @xmath162 occurs in @xmath226 .",
    "[ item : easyfact2 ] define @xmath1082 to be the following proposition : @xmath1083 we show that @xmath1084 holds if @xmath1085 with @xmath1086 . by contradiction , assume that there exists @xmath1087 such that @xmath1088 and @xmath1089 ( a similar argument holds for @xmath226 ) .",
    "then either        because @xmath94 is reduced , we have @xmath1092 . in either case",
    "( a ) or ( b ) , there exists a step sequence @xmath1093 such that @xmath1091 . since @xmath1094",
    ", we have that @xmath1095 , hence that @xmath1096 and finally that @xmath1097 , since @xmath94 is reduced , a contradiction .",
    "[ item : easyfact3 ] for every step sequence @xmath1098 , where @xmath1094 , @xmath22 can not be of the form @xmath1099 where @xmath1100 .",
    "in fact , take the decomposition @xmath1101 and @xmath1102 ( the case @xmath1103 and @xmath1104 yields the same result ) . because @xmath1105 applies",
    ", we find that @xmath1084 holds but @xmath1106 , hence a contradiction .",
    "[ item : easyfact4 ] if @xmath1107 is a step sequence of @xmath94 , for some @xmath1108 , @xmath103 then @xmath1109 is also a step sequence of @xmath480 .",
    "the proof goes by induction on @xmath1110 .",
    "let @xmath1111 . if @xmath1112 then @xmath1113 , @xmath1114 and @xmath1115 , which trivially yields a step sequence of @xmath480 .",
    "for the inductive case , because of @xmath1116 we find that , necessarily , @xmath1117 for some @xmath200 .",
    "we thus can apply the induction hypothesis onto @xmath1118 and conclude that @xmath1119 .",
    "next , since @xmath1120 it can not be the case that @xmath1121 where @xmath1122 and @xmath1123 with @xmath1124 for otherwise @xmath1125 contradicts @xmath1126 ( recall that both @xmath1127 and @xmath1128 belong to @xmath461 ) .",
    "thus we have @xmath1129 , hence @xmath1130 , and finally @xmath1131 .",
    "[ item : easyfact5 ] if @xmath1132 and @xmath1133 , for some @xmath1134 , then there exists @xmath1135 such that @xmath1136 and @xmath1137 .",
    "assume , by contradiction , that there is no such @xmath273 .",
    "then there exist words @xmath1138 and @xmath1139 , two positions @xmath1140 such that @xmath1141 such that @xmath1142 , @xmath1143 . because all @xmath788 are distinct ,",
    "we conclude that @xmath1144 , hence a contradiction .",
    "the derivation @xmath242{\\gamma } w$ ] , where @xmath1145 , has a unique corresponding r - step sequence @xmath1146 .",
    "now , we define a _ parent _ relationship in that step sequence , denoted @xmath1147 , between r - annotated nonterminals : @xmath1148 iff there exists a step in the sequence that rewrites @xmath1149 to @xmath1150 , that is @xmath1151 where @xmath1152 , and @xmath1153 for some @xmath1154 .",
    "let @xmath1155 be the last occurrence , in @xmath110 , of a production with head @xmath1156 .",
    "notice that such an occurrence always exists since @xmath460 and moreover we have that @xmath1157 , @xmath1158 .",
    "in fact , since @xmath110 is a derivation , if @xmath1159 or @xmath1160 then @xmath1161 would clearly not be the last such occurrence .",
    "let @xmath1162 be the sequence of ranked ancestors of @xmath1163 in the r - step sequence , and @xmath1164 ( or , symmetrically @xmath1165 ) , for some @xmath1166 , @xmath1167 , be the productions introducing these nonterminals , for all @xmath1168 .",
    "if @xmath1169 , let @xmath1170 be the subword of @xmath110 corresponding to the derivation @xmath1171 , for some @xmath1172 .",
    "notice that no @xmath1173 has @xmath1174 for ancestor , and that @xmath1171 must be a depth - first derivation because @xmath1175 is . otherwise , if @xmath1176 , let @xmath1177 .",
    "let @xmath1178 .",
    "observe that , since each @xmath1179 is a depth - first derivation , we have @xmath1180 ( or with @xmath1181 and @xmath1174 swapped ) is a depth - first step sequence because @xmath1182 and @xmath1183 have the same rank @xmath327 .",
    "clearly , @xmath446 corresponds to a valid step sequence of @xmath94 which , moreover , is depth first , since whenever @xmath1184 fires , @xmath1185 is the only nonterminal left ( and whose rank is therefore maximal ) .",
    "it follows from @xmath1186 that because @xmath1187 holds and @xmath1188 then @xmath1189 holds ( notice the use of @xmath480 instead of @xmath94 ) .",
    "moreover , the definition of @xmath446 shows that @xmath1189 is a depth - first step sequence and @xmath1190 .",
    "since @xmath1191 is a @xmath15-index derivation , each step sequence @xmath1192 are of index at most @xmath15 .",
    "therefore the index of each step sequence @xmath1193 ( or in reverse order ) is at most @xmath17 .",
    "also , when each @xmath1184 fires , @xmath1185 is the only nonterminal left and so the index of the step is at most @xmath50 . therefore we find that @xmath1194{\\gamma^\\sharp } u \\",
    ", x_{i_p } \\ , v$ ] , and finally that @xmath1195{\\gamma^\\sharp } u\\ ,    x_{i_p}\\ , v$ ] in @xmath480 .",
    "assume that @xmath1196 ( the cases @xmath1197 or @xmath1198 are similar ) .",
    "since @xmath110 of length @xmath259 induces a @xmath15-index depth first derivation , we have that @xmath1199{(\\gamma)_{\\ell_{p}+1 } \\ldots ( \\gamma)_n } u_y\\ , u_z \\in \\mathcal{a}^*$ ] can be split into two derivations of @xmath94 as follows : @xmath1200{\\gamma_{y } } u_y$ ] and @xmath1201{\\gamma_{z } } u_z$ ] such that @xmath1202 and @xmath1203 ( see lem .  [",
    "lem : leibniz ] for a proof ) .",
    "assume @xmath1204 , the other case being symmetric . since the only production in @xmath1205 whose left hand side is a nonterminal from @xmath461 is @xmath1206 , which , moreover , occurs only in the first position ,",
    "we have that @xmath1207 and @xmath1208 , by the definition of @xmath1209 .",
    "it suffices to notice that @xmath1210 results from reordering the productions of @xmath110 and that reordering the productions of @xmath110 result into a step sequence producing the same word @xmath1211 since @xmath1212 where @xmath308 is a strict @xmath250-letter bounded expression . that the resulting derivation has index @xmath15 and is depth - first follow easily from @xmath1213 and @xmath1214 .",
    "given that @xmath1215 we find that @xmath1216 implies @xmath1217 , hence @xmath1218 holds by @xmath1105 and @xmath1219 . by the definition of @xmath1218 , we have : @xmath1220 since @xmath94 is reduced , @xmath1221 and @xmath1222 .",
    "but because @xmath1156 , it must be the case that @xmath1223 and @xmath1224 , otherwise we would contradict the fact that @xmath1225 .    since @xmath1226 and @xmath94 is reduced , we have that @xmath1227 , and thus @xmath1228 .",
    "we consider only the case @xmath1196the cases @xmath1229 or @xmath712 use similar arguments , and are left as an easy exercise .",
    "hence , our proof falls into 4 cases :        @xmath1235 and @xmath1240 .",
    "thus we have @xmath1241 and @xmath1242 . by the fact ( _ [ item : easyfact5 ] ) _ ( with @xmath1238 , @xmath1234 ) there exists @xmath273 , @xmath1243 such that @xmath1244 and @xmath1245 .",
    "next we show @xmath1246 holds .",
    "in fact , assume the inclusions hold for @xmath1247 .",
    "then they also hold for @xmath1248 since @xmath1249 .",
    "a similar reasoning holds when @xmath1250 since @xmath1251 .",
    "@xmath1252 and @xmath1236 .",
    "we first observe that it can not be the case that @xmath1253 contains some word where @xmath458 occurs and @xmath1254 contains some word where @xmath333 occurs for otherwise concatenating those two words shows @xmath1255 .",
    "this leaves us with three cases :            we prove the theorem by induction on @xmath1270 .",
    "if @xmath1271 , we obtain @xmath980 from lemma  [ lem : ginsbook - d ] , and time needed to compute @xmath980 , using algorithm [ alg : constant - control - set ] , is @xmath355 .",
    "moreover , we have @xmath1272",
    ".    for the induction step , assume @xmath472 .",
    "we assume that @xmath94 is reduced for @xmath118 , and that @xmath457 is the minimal bounded expression such that @xmath439 .",
    "consider the partition @xmath1273 and @xmath1274 , defined in the previous . since @xmath94 is reduced for @xmath118 , then @xmath460 .",
    "define @xmath1275    by lemma  [ lem : ginsbook - d ] , for each @xmath1276 , such that @xmath1277 , there exists a bounded expression @xmath1278 such that @xmath1279 .",
    "moreover , by the induction hypothesis , for each @xmath1280 such that @xmath1281 , @xmath1282 and @xmath1283 , and for each @xmath682 such that @xmath1284 and @xmath1285 , there exist two sets @xmath1286 of bounded expressions over @xmath1287 such that @xmath1288 and @xmath1289 .",
    "we extend this notation to @xmath67 , and assume that @xmath1290 .",
    "we define : @xmath1291    first , let us prove that @xmath1292 .",
    "let @xmath1293 be a word , and @xmath1294{{\\scriptscriptstyle \\gamma } } } w$ ] be a @xmath15-index depth first derivation of @xmath76 in @xmath94 .",
    "since @xmath1293 , such a derivation is guaranteed to exist . by lemma  [ lem : ginsbook - surgery ]",
    ", there exists @xmath1295 , and @xmath1296 , @xmath477 , such that @xmath1297 is a permutation of @xmath110 , and :        @xmath1298{{\\scriptscriptstyle \\gamma^\\sharp \\cdot ( x_i , aybz ) \\cdot",
    "\\gamma_y \\cdot \\gamma_z } } } w$ ] is a derivation of @xmath1299 if @xmath1303{{\\scriptscriptstyle \\gamma_y } } } u_y$ ] is a derivation of @xmath1304 ;    @xmath1298{{\\scriptscriptstyle \\gamma^\\sharp \\cdot ( x_i , aybz ) \\cdot",
    "\\gamma_z \\cdot \\gamma_y } } } w$ ] is a derivation of @xmath1299 if @xmath1305{{\\scriptscriptstyle \\gamma_z } } } u_z$ ] is a derivation of @xmath1304 ;          therefore , by the induction hypothesis there exist bounded expressions @xmath1312 and @xmath1313 such that @xmath1314{{\\scriptscriptstyle \\gamma ' } } } u_y$ ] and @xmath1315{{\\scriptscriptstyle \\gamma '' } } } u_z$ ] , for some control words @xmath1316 and @xmath1317 .",
    "if @xmath1306 , by lemma  [ lem : ginsbook - d ] , there exists a control word @xmath1318 such that @xmath1298{{\\scriptscriptstyle \\gamma^\\sharp } } } u \\",
    ", x_i \\ , v$ ] is a @xmath445-index depth first step sequence in @xmath480 .",
    "it follows that : @xmath1319{{\\scriptscriptstyle \\gamma^\\sharp } } } u \\ , x_i \\",
    ", v   { \\xrightarrow[{\\scriptscriptstyle } ] { { \\scriptscriptstyle ( x_i , aybz ) } } } u\\ , a\\ , y\\ , b\\ , z\\ , v { \\xrightarrow[{\\scriptscriptstyle \\df{k_y+2}}]{{\\scriptscriptstyle \\gamma ' } } } u\\ , a\\ , u_y\\ , b\\ , z\\ , v { \\xrightarrow[{\\scriptscriptstyle \\df{k_z+1}}]{{\\scriptscriptstyle \\gamma '' } } } u\\ , a\\ , u_y\\ , b\\ , u_z\\ , v = w\\enspace .\\ ] ] observe that @xmath1320{{\\scriptscriptstyle \\gamma ' } } } u\\ , a\\ , u_y\\ , b\\ , z\\ , v$ ] because @xmath1321 , @xmath1322 and @xmath1323{{\\scriptscriptstyle \\gamma ' } } } u_y$ ] . since @xmath1324 and @xmath1325 , we find that @xmath1326 and @xmath1327 , respectively .",
    "hence the overall index of the foregoing derivation with control word @xmath1328 is at most @xmath17 .",
    "since it is also a depth - first derivation , we finally find that @xmath1329 , i.e.   @xmath1330 .    in the following ,",
    "we address the time complexity of the construction of @xmath347 , and of each bounded expression @xmath537 .",
    "we refer to algorithm  [ alg : bounded - control - set ] in the following .",
    "notice first that both the and functions take time @xmath831 , because emptiness of the intersection between a context - free grammar and a finite automaton of constant size is linear in the size of the grammar  ( * ? ? ?",
    "* section  5 ) .",
    "moreover , the inclusion check on ( line  [ line : inclusion ] ) is possible also in time @xmath831 ( see remark[rem : letter - bounded - inclusion ] ) . by lemma  [ lem : ginsbook - d ]",
    ", a call to @xmath1331 will take time @xmath355 .",
    "lemma  [ lem : ginsbook - surgery ] shows that the sizes of the bounded expression considered at lines  [ line : rec - y ] and [ line : rec - z ] , in a recursive call , sum up to the size of the bounded expression for the current call .",
    "thus the total number of recursive calls is at most @xmath250 .",
    "we thus let @xmath1332 denote the time needed for the top - level call of the function @xmath1333 to complete .",
    "since the loop on ( lines  [ line : for - begin][line : for - end ] ) will be taken at most @xmath1334 times , we obtain : @xmath1335 where @xmath1336 is the time needed for the two recursive calls at lines [ line : rec - y ] and [ line : rec - z ] to complete . because @xmath1337 , we find that @xmath1338 .    finally , the time needed to build each bounded expression @xmath537 can be evaluated by observing that each such expression is uniquely determined by a sequence @xmath901 of productions of @xmath94 that are successively chosen at line [ line : for - begin ] .",
    "let us consider now a slightly modified version of algorithm [ alg : bounded - control - set ] that is guided by a sequence @xmath901 received in input  the function @xmath1339 receives an extra parameter and returns also the suffix of @xmath1340 that remains after processing the first production on @xmath1340 , i.e.  the recursive calls at lines [ line : rec - y ] and [ line : rec - z ] have returned .",
    "since the sum of sizes of the bounded expressions for these recursive calls is at most @xmath1341 , by lemma  [ lem : ginsbook - surgery ] , we obtain that , in total , algorithm [ alg : bounded - control - set ] initiates at most @xmath250 calls to @xmath1342 .",
    "we recall also that the prefix of each call ( before making recursive calls ) takes time @xmath1343 . since @xmath535 , assuming that @xmath308 is minimal , we have @xmath1344 . hence , the time needed to compute a bounded expression @xmath537 is bounded by : @xmath1345        for each @xmath1349 , let @xmath1350 be the production @xmath1351 of @xmath1352 , and let @xmath1353 be @xmath1354 .",
    "it is easy to see that , because the derivation is depth - first , the control word @xmath110 generating @xmath1355 from @xmath1356 is unique .",
    "now suppose that there exists @xmath1357 such that @xmath1358 , for some @xmath1359 .",
    "next we show that , for all @xmath1360 we must have @xmath1361 .",
    "we first make this crucial observation , since the derivation tree is binary and its traversal is depth - first , we have that for every @xmath1350 , every three consecutive occurrences @xmath1362 of @xmath1350@xmath1363implies that there exists a position @xmath200 between @xmath1364 and @xmath1365 such that @xmath1366 .",
    "otherwise that would imply that the derivation tree has a node @xmath1367 with three @xmath1368 children ; or that the tree was not traversed in depth - first .",
    "take an arbitrary @xmath1369 in @xmath122 and let @xmath1370 be the greatest index of a production occurring in @xmath1369 .",
    "the number @xmath1371 of repetitions of @xmath1369 can not be greater than two for otherwise @xmath1372 contradicts the previous fact .",
    "so this concludes that no @xmath1371 can be larger than @xmath50 .",
    "now , since the only string of @xmath1373 has length @xmath1374 and that no rule produces more than one terminal then necessarily @xmath1375 .",
    "so we show that @xmath1376 has to be at least @xmath1377 . by contradiction , suppose @xmath1378 , then since in order to capture @xmath110 no word of @xmath122 can occur more than twice , the longest control word that @xmath122 can capture is @xmath1379 which is shorter than @xmath1380 , hence a contradiction .",
    "the np - hard lower bound is by reduction from the positive integer linear programming ( pilp ) problem , which is known to be np - complete ( * ? ? ?",
    "* corollary 18.1a ) . consider the following instance of pilp , with variables @xmath1381 ranging over positive integers :              let @xmath1393 be a bounded expression .",
    "it is immediate to check that the pilp problem has a solution if and only if @xmath1394 holds .",
    "this settles the np - hard lower bound for the class of fo - reachability problems .",
    "we show next that the class of fo - reachability problems @xmath193 is included in nexptime .",
    "let @xmath190\\!\\!]}}}}$ ] be a given program , where @xmath86 is its underlying grammar , and @xmath18 a bounded expression . by lemma [ lem : intersection ]",
    ", there exists a grammar @xmath1395 such that : @xmath1396}(g^{\\cap } ) = l_i(g ) \\cap \\pat\\enspace.\\ ] ] moreover , we have that @xmath1397 .",
    "let @xmath1398 , { { { \\bf [ \\!\\![}}. { { \\bf ] \\!\\!]}}}}$ ] be a program , for each @xmath1399 .",
    "since the alphabets of @xmath94 and @xmath289 coincide , the mapping of symbols to octagonal relations is the same for @xmath94 and @xmath289 , hence : @xmath1400\\!\\ ! ] } } } = { { { \\bf [ \\!\\![}}\\mathcal{p } { { \\bf ] \\!\\!]}}}_\\pat\\enspace.\\ ] ] then @xmath1401\\!\\!]}}}_\\pat \\neq \\emptyset$ ] if and only if @xmath1402\\!\\ ! ] } } } \\neq \\emptyset$ ] , for some @xmath1399 .",
    "we have reduced the original problem @xmath9 to @xmath1403 reachability problems , of size @xmath1404 each . in the following we fix @xmath759 , focus w.l.o.g on the problem @xmath1405 and we denote by @xmath1406 $ ] in the rest of this proof .",
    "let @xmath1407 be an alphabet disjoint from @xmath65 and @xmath311 be a strict letter - bounded expression , such that @xmath1408 , where @xmath1409 is the homomorphism @xmath1410 , for all @xmath307 .",
    "by lemma [ lem : interface ] there exists a grammar @xmath1411 such that , for every @xmath1412 :        moreover , we have @xmath1416 . since @xmath1417 , by theorem [ thm : letter - bounded - control - set ] , there exists a set @xmath347 of bounded expressions over @xmath1418 such that : @xmath1419 hence , by lemma [ lem : interface ] , we obtain : @xmath1420 we used the fact that @xmath1421 . because @xmath1422 , there exists @xmath1423 such that @xmath1424 as theorem  [ thm : luker ] shows .",
    "hence @xmath1425 as well .",
    "we obtain the following : @xmath1426 thus , @xmath1427 .",
    "assume that @xmath1428 , for some @xmath1429 , and denote @xmath1430 by @xmath1431 .",
    "we have that , for each derivation @xmath479{\\gamma } w$ ] of @xmath289 , @xmath184\\!\\!]}}}=\\emptyset$ ] iff @xmath218\\!\\!]}}}=\\emptyset$ ] ( * ? ? ?",
    "* lemma 2 ) . as a result , @xmath1402\\!\\ ! ] } } } \\neq \\emptyset$ ] iff there exists @xmath1432 and @xmath1433 , such that @xmath218\\!\\!]}}}\\neq\\emptyset$ ] . by theorem [ thm : letter - bounded - control - set ] , each set @xmath1434 can be constructed in time : @xmath1435 we have used the facts @xmath1436 and @xmath1437 .    by lemma [ fsa - dfk ] , there exists a finite automaton @xmath1438 that recognizes the language @xmath1439 .",
    "equivalently , we consider a grammar @xmath1440 , such that @xmath1441 , where @xmath1442 is the ranked nonterminal corresponding to the initial state of @xmath1438 in lemma [ fsa - dfk ] .",
    "let @xmath1443\\!\\!]}}}}$ ] be the program associated with @xmath1440 . if @xmath7 was assumed to be an octagonal program , then so is @xmath11 .",
    "the problem @xmath1405 is thus equivalent to the finite set of problems @xmath1444 , for @xmath1432 .",
    "the size of @xmath1440 is @xmath1445 hence the size of the input to each problem @xmath1444 is @xmath1446 . since @xmath11 is a procedure - less octagonal program , and each such problem can be solved in nptime ( * ? ? ?",
    "* theorem 10 ) , this provides a nexptime decision procedure for the problem @xmath1405 .",
    "we are left with proving that the @xmath9 problem is in np , when @xmath1401\\!\\!]}}}={{{\\bf [ \\!\\![}}p { { \\bf ] \\!\\!]}}}^{(k)}$ ] , for a constant @xmath16 . to this end",
    ", we define a grammar @xmath1447 such that @xmath1448 ( * ? ? ?",
    "* definition 3.1 ) .",
    "using the fact that , for each production @xmath1449 , there are at most two nonterminals in @xmath76 , we establish that @xmath1450 , hence @xmath1451 .",
    "the corresponding program is @xmath1452\\!\\!]}}}}$ ] . by applying the reduction above",
    ", we obtain a set of problems @xmath1453 , each of which of size @xmath1454 .",
    "since @xmath15 is constant , we can solve this problem in nptime , using an np procedure ( * ? ? ?",
    "* theorem 10 ) . since the np - hard lower bound",
    "was proved above , the problem is np - complete ."
  ],
  "abstract_text": [
    "<S> we study programs with integer data , procedure calls and arbitrary call graphs . </S>",
    "<S> we show that , whenever the guards and updates are given by octagonal relations , the reachability problem along control flow paths within some language @xmath0 over program statements is decidable in nexptime . to achieve this upper bound , </S>",
    "<S> we combine a program transformation into the same class of programs but without procedures , with an np - completeness result for the reachability problem of procedure - less programs . besides the program </S>",
    "<S> , the expression @xmath0 is also mapped onto an expression of a similar form but this time over the transformed program statements . </S>",
    "<S> several arguments involving context - free grammars and their generative process enable us to give tight bounds on the size of the resulting expression . the currently existing gap between np - hard and nexptime can be closed to np - complete when a certain parameter of the analysis is assumed to be constant .    </S>",
    "<S> = 1 = 1 </S>"
  ]
}