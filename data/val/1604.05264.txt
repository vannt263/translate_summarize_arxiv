{
  "article_text": [
    "elections are an important way to make decisions , both in human and electronic settings .",
    "arguably the most important class of election systems are the scoring rules .",
    "a scoring rule is defined by , for each number @xmath1 of candidates , a scoring vector @xmath2 .",
    "in addition , we typically want these vectors to be somehow similar .",
    "this is captured nicely by the notion of pure scoring rules from  @xcite where the length-(@xmath3 ) vector is obtained by adding a coefficient in the length-@xmath1 vector .",
    "voters have complete tie - free preferences over the candidates , and a candidate ranked @xmath4th by a voter receives a score of @xmath5 from that voter .",
    "the winners are the candidates with the highest score .",
    "we are interested in determining , for all scoring rules at once , which of them give rise to easy computational problems and which of them lead to hard problems .",
    "theorems of that form are known as dichotomy theorems . for weighted scoring rules ,",
    "in which each voter has a weight @xmath6 and counts as @xmath6 regular voters , there are dichotomy theorems for all standard manipulative actions : manipulation  @xcite , bribery  @xcite , and control  @xcite .",
    "the arguably more natural unweighted case is much harder to analyze ( since in the unweighted case we can only get hardness when the number of candidates is unbounded , whereas in the weighted case hardness already occurs with a fixed number of candidates ; since weighted dichotomy theorems typically look at a fixed number of candidates , the results for the unweighted cases do not at all follow from the results for the weighted cases ) . despite the prevalence of scoring rules",
    ", there are only two dichotomy theorems for the unweighted case , namely for the possible winner problem  @xcite and for the constructive control by adding voters ( ccav ) problem  @xcite .    in this paper ,",
    "we look at bribery and manipulation for unweighted scoring rules , and , since bribery can be viewed as deleting voters followed by a manipulation , we also look at the constructive control by deleting voters ( ccdv ) problem .    for manipulation , we show that for all scoring rules with a constant number of different coefficients , manipulation is in p. this subsumes all known polynomial - time results for unweighted manipulation for scoring rules .",
    "we conjecture that there is no dichotomy theorem for manipulation .    for bribery and ccdv",
    ", we obtain a dichotomy theorem for pure scoring rules .",
    "in particular , we show exactly when these problems are easy ( in p ) and that they are hard ( np - complete ) in all other cases .",
    "interestingly , our characterization is the `` dual '' of the ccav characterization in the following sense : for every scoring rule @xmath7 , the complexity of @xmath7-ccdv ( and of @xmath7-bribery ) is the same as for @xmath8-ccav , where @xmath8 is obtained from @xmath7 by multiplying each entry in a scoring vector by @xmath9 , and reversing the order of the vector .",
    "these results are quite surprising : ccdv has less structure to encode hard problems into it than ccav , but we still obtain the same complexity characterization ( modulo duality ) . on the other hand ,",
    "bribery can be seen as the combination of ccdv and manipulation , but the complexity is the same as for ccdv .",
    "however , in another sense bribery behaves very differently from ccdv : the complexity of bribery changes from polynomial - time solvable to np - complete by small changes in the definition of the problem , while the complexity of the former is much more robust .",
    "the structure of the paper is as follows : in section  [ sect : prelim ] , we introduce relevant definitions , including the specific problems we study in this paper .",
    "in section  [ sect : results : manipulation ] , we state our results on manipulation .",
    "section  [ sect : ccdv bribery dichotomy ] contains our dichotomy result for ccdv and bribery . our individual complexity results for cddv and bribery can be found in sections  [ sect : results : ccdv ] and  [ sect : bribery ] , respectively .",
    "we conclude with open questions in section  [ sect : open questions ] .",
    "all proofs not contained in the main paper can be found in the appendix .",
    "an _ election _ consists of a non - empty , finite set of candidates and a finite set of voters .",
    "each voter is identified with her vote , which is simply a linear order on the set of candidates .",
    "an _ election system _ or _",
    "voting rule _ is a rule that , given an election , determines the set of candidates who are winners of the election according to this rule .",
    "a _ scoring vector _ for @xmath1 candidates is simply a vector @xmath10 of integer coefficients , where @xmath11 for all @xmath12 .",
    "such a vector defines a voting rule for elections with @xmath1 candidates by simply awarding , for each vote in the election , @xmath5 points to the candidate ranked in the @xmath4-th position of this vote , and defining the candidates with the most points to be the winners of the election .",
    "a _ scoring rule _ is an election system that for each number of candidates applies an appropriate scoring vector .",
    "such a system can be described by a _ generator _ , which is a function @xmath7 such that for each @xmath13 , @xmath14 is a scoring vector for @xmath1 candidates .",
    "well - known scoring rules are borda ( using @xmath15 ) , @xmath16-approval ( using @xmath17 ) and @xmath16-veto ( using @xmath18 ) for natural numbers @xmath16 . for readability , we usually identify a generator with the election system it defines .    to capture that the elections for different numbers of candidates should use `` similar '' generators , we use the following notion @xcite : a generator @xmath7 as above is _ pure _ , if for all @xmath19",
    ", the vector @xmath14 can be obtained from the vector @xmath20 by removing one coefficient from the sequence . in  @xcite",
    ", it is shown that the restriction to the set of pure generators with rational numbers covers all generators in a large and reasonable class .",
    "we define standard manipulative actions : manipulation  @xcite , bribery  @xcite , and control  @xcite , for generators .    for a generator @xmath7 , the _ constructive control problem for @xmath7 by deleting voters _ , @xmath7-ccdv , is the following problem : given a set of voters @xmath21 over a set of candidates @xmath22 , a candidate @xmath23 and a number @xmath16 , is there a subset @xmath24 with @xmath25 such that @xmath26 is a winner of the election if the votes in @xmath27 are evaluated using @xmath7 ?    a similar problem , the _ constructive control problem for @xmath7 by adding voters _ , called @xmath7-ccav , asks whether @xmath26 can be made a winner by adding to @xmath21 at most @xmath16 voters from a given set of so - called unregistered voters . in the _ manipulation problem for @xmath7",
    "_ , we are given a set @xmath21 of nonmanipulative voters and a set of manipulators , and we ask whether @xmath26 can be made a winner by setting the votes of the manipulators , with no restriction on how these votes can be chosen .",
    "finally , the _ bribery problem _ for @xmath7 asks whether @xmath26 can be made a winner by replacing up to @xmath16 votes in @xmath21 with the same number of arbitrary votes . clearly , for every polynomial - time uniform generator @xmath7 , the problems @xmath7-ccdv , @xmath7-bribery , and @xmath7-manipulation are in @xmath28 .",
    "two scoring vectors @xmath10 and @xmath29 are _ equivalent _ if they describe the same election system , i.e. , if for any election , they lead to the same winner set .",
    "it is easy to see  @xcite that this is the case if and only if there are numbers @xmath30 and @xmath31 such that for each @xmath4 , @xmath32 . we say that @xmath33 and @xmath34 are",
    "_ ultimately equivalent _ if @xmath35 and @xmath36 are equivalent for all but finitely many @xmath1 .",
    "it is easy to see that in this case , ccdv , bribery , and manipulation have the same complexity for @xmath33 and @xmath34 .    for algorithms",
    ", we need the function @xmath7 is efficiently computable . a generator @xmath7 is polynomial - time uniform if @xmath14 can be computed in polynomial time , given @xmath1 in unary .",
    "( given @xmath1 in binary , polynomial time would not suffice to even write down a sequence of @xmath1 numbers . ) for the remainder of this paper , a generator is always a polynomial - time uniform pure generator with rational coefficients .",
    "our main result on manipulation is the following : every generator @xmath7 for which there is a fixed , finite upper bound on the number of coefficients that are used for any number of candidates has a polynomial - time solvable manipulation problem .",
    "we mention that this result also holds for generators that are not pure ( but still are polynomial - time uniform ) .",
    "we note that the special cases where @xmath7 generates @xmath16-approval or @xmath16-veto were shown in  @xcite .",
    "restatabletheoremtheoremmanp[theorem : man - p ] let @xmath7 be a generator such that there is a constant @xmath37 such that for each number @xmath1 of candidates , at most @xmath37 different coefficients appear in the vector @xmath14 .",
    "then @xmath7-manipulation can be solved in polynomial time .",
    "we give a proof sketch for a simple special case of the theorem , namely generators @xmath7 of the form @xmath38 . with great care , this proof sketch generalizes to the general case .",
    "( sketch ) consider a preferred candidate @xmath26 , a set of candidates @xmath39 , a surplus @xmath40 for each @xmath41 ( i.e. , the value @xmath42 , which can easily be computed from the election instance , as @xmath7 is polynomial - time uniform ) , and a set of @xmath16 manipulators .",
    "clearly , we can assume that all manipulators will vote @xmath26 first .    the obvious greedy approach of having a manipulator rank a candidate with the largest surplus",
    "last wo nt always work : if @xmath43 , @xmath44 , the surplus of @xmath45 is 4 , the surplus of @xmath46 and @xmath47 is 3 , and we have two manipulators , the only successful manipulation is to have the manipulators vote @xmath48 and @xmath49 and so we can not put @xmath45 last .    if there is a successful manipulation , then for all @xmath50 , there are numbers @xmath51 and @xmath52 ( the number of times @xmath53 is ranked next to last / last by a manipulator ) such that :    1 .",
    "@xmath54 , 2 .",
    "@xmath55 , 3 .",
    "@xmath56 , and 4 .",
    "@xmath57 .",
    "we derive an algorithm deciding the condition by dynamic programming . for this",
    ", we define the boolean predicate @xmath58 such that @xmath59 is true if and only if for all @xmath4 , @xmath60 , there exist natural numbers @xmath51 and @xmath52 such that    1 .",
    "@xmath54 , 2 .",
    "@xmath61 , 3 .",
    "@xmath62 , and 4 .",
    "@xmath63 .",
    "it is immediate that if there is a successful manipulation , then @xmath64 is true .",
    "it is not so easy to see that the converse holds .",
    "this is shown by induction on @xmath16 .",
    "it is easy to come up with a simple ad - hoc proof for the simple case we are looking at here , but we will instead describe an approach that generalizes to the general case .    the inductive step uses the following argument",
    ". if @xmath65 is true , let @xmath66 and let @xmath67 .",
    "then the sequence @xmath68 can be shown to fulfill the `` marriage condition , '' which then , by hall s theorem  @xcite , implies that there is a `` traversal , '' i.e. , a sequence of distinct representatives of this sequence of sets which then gives us a vote for one of the manipulators . in this particular case ,",
    "the traversal consists of two distinct candidates @xmath69 such that @xmath70 and @xmath71 .",
    "let one manipulator vote @xmath72 , subtract 1 from @xmath51 and @xmath73 , subtract @xmath74 from @xmath75 , and subtract @xmath76 from from @xmath77 .",
    "it follows from the induction hypothesis that the remaining @xmath16 manipulators can vote to make @xmath26 a winner .    to conclude the proof sketch",
    ", we can show by dynamic programming that @xmath58 is computable in polynomial for unary @xmath78 ( which is sufficient to solve the manipulation problem ) .",
    "this holds since :    1 .",
    "@xmath79 is true if and only if @xmath80 .",
    "2 .   for @xmath81 , @xmath82 if and only if there exist natural numbers @xmath83 and @xmath84 such that : 1 .   @xmath85 , 2 .",
    "@xmath86 , 3 .",
    "@xmath87 , 4 .",
    "@xmath88 , and 5 .",
    "@xmath89    given theorem  [ theorem : man - p ] and the fact that manipulation for borda is np - complete  @xcite , it is natural to ask whether the manipulation problem is np - complete for all remaining generators .",
    "but this is extremely unlikely : though our approach does not give polynomial - time algorithms when the number of coefficients is unbounded , it will give quasipolynomial algorithms when the coefficients are small enough and grow slowly enough .",
    "it is also conceivable that additional cases will be in p. though a general greedy approach seems unlikely ( as manipulation for borda is np - complete ) , a greedy approach for specific cases is still possible .",
    "we conjecture that there is no dichotomy theorem for manipulation for pure scoring rules , with different intermediate ( between p and np - complete ) complexities showing up .",
    "we completely characterize the complexity of @xmath7-ccdv and @xmath7-bribery for every generator @xmath7 . for each generator @xmath7 ,",
    "these two problems are polynomial - time equivalent , and are polynomial - time solvable or np - complete . for the cases where @xmath7 generates @xmath16-approval or @xmath16-veto , the complexity classification",
    "is already stated in  @xcite . for ccdv , the special case where @xmath7 generates @xmath90-approval was shown in  @xcite . for bribery",
    ", the special cases where @xmath7 generates @xmath90-approval or @xmath90-veto were shown in  @xcite .",
    "we also note the existence of an unpublished manuscript that proves np - hardness for bribery for generators of the form @xmath91 , where @xmath76 and @xmath74 are coprimes with @xmath92  @xcite .",
    "restatabletheoremtheoremccdvandbriberydichotomy[theorem : ccdv dichotomy ] let @xmath7 be a pure , polynomial - time uniform generator",
    ". if @xmath7 is ultimately equivalent to one of the following generators , then @xmath7-ccdv and @xmath7-bribery can be solved in polynomial time :    1 .   @xmath93 ( @xmath94-veto ) , 2 .",
    "@xmath95 ( @xmath90-approval ) , 3 .",
    "@xmath96 ( @xmath97-approval ) , 4 .",
    "for some @xmath98 , @xmath99 ( this includes triviality , @xmath90-veto , and @xmath97-veto ) , 5 .",
    ".    otherwise , @xmath7-ccdv and @xmath7-bribery are np - complete .",
    "this dichotomy theorem mirrors the one obtained for ccav in  @xcite ( modulo duality , see below ) . for the relationship of ccdv and ccav",
    ", this implies that the difficulty of implementing `` setup votes '' ( see below ) does not have any influence on the complexity of our decision problems for the class of generators we study .",
    "the below proof of theorem  [ theorem:0 dots 0 -gamma -beta -alpha ccdv ] is an example of a non - trivial implementation of these setup votes .",
    "in particular , our results imply that the complexity of ccdv is `` robust '' in the following sense : the complexity of ccdv does not depend on whether we add a bit to each voter stating whether she can be deleted or not .",
    "this will be made formal below in our discussion of ccdv@xmath101(defined below ) .",
    "the situation is different for bribery : generalizing the bribery problem to allow marking some voters as `` unbribable '' increases the complexity to np - complete for some generators . as an example of this phenomenon",
    ", we state the following result .",
    "( the version of bribery defined here may be of independent interest , but is only used here to highlight the differences between ccdv and bribery . )",
    "[ theorem : bribery with unbribable voters np complete 0 dots 0 -1 -2 ] the variation of the bribery problem for @xmath102 where each voter has a bit that states whether this voter can be bribed or not is np - complete .",
    "in this section we give an overview over our proof of ccdv - part of theorem  [ theorem : ccdv dichotomy ] . in section  [ sect : ccav and ccdv ] , we show that our ccdv polynomial - time cases easily follow from a relationship to ccav , whose complexity was studied in  @xcite .",
    "sections  [ sect : ccdv few coefficients general cases ] and  [ sect : ccdv many coefficients ] then contain our hardness results for ccdv .",
    "ccdv and ccav are closely related as follows : for a generator @xmath7 , let @xmath8 be the generator obtained from @xmath7 by multiplying each coefficient with @xmath9 and reversing the order of the coefficients ( to maintain monotonicity ) . removing a vote in an @xmath7-election",
    "has the same effect as adding the same vote in a @xmath8-election . using this observation",
    ", one can show that @xmath7-ccdv reduces to @xmath8-ccav for all generators @xmath7 .",
    "we mention that a similar relation holds for weighted @xmath16-approval and @xmath16-veto elections  @xcite .",
    "the other direction of this relationship does not follow so easily , as there is an important difference between ccdv and ccav : in ccav , the set of voters is partitioned into a set of _ registered _ voters and a set of _ potential _ voters , where the controller s actions can only influence the potential voters .",
    "this provides the problem with additional structure , as the controller can not modify the registered voters .",
    "we often call these registered votes , which the controller can not influence anymore , _",
    "setup votes _ , as these allow us to set up the scenario of an np - hard problem in hardness proofs .",
    "the ccdv problem does not have a corresponding structure ; here every vote may be ( potentially ) deleted by the controller .",
    "this makes it harder to construct the above - mentioned setup votes : since we can not simply `` forbid '' the controller to delete certain votes , hardness proofs for ccdv need to `` setup '' the relevant scenario with votes that are designed to be `` unattractive '' to delete for the controller .    to obtain ccdv hardness results ,",
    "it is therefore natural to consider the following analog to the ccav problem : ccdv@xmath101is a version of ccdv providing the additional structure that ccav has . in ccdv@xmath101",
    ", the set of votes is partitioned into a set @xmath103 of voters that can not be deleted , and voters @xmath104 that can be deleted . from the above discussion , it follows that the complexities of ccav and ccdv@xmath101are related with the following duality , which , together with the polynomial - time results obtained for ccav in  @xcite immediately implies the polynomial - time ccdv cases of theorem  [ theorem : ccdv dichotomy ] .",
    "restatablepropositionpropccdvstarpolyequivccav[prop : ccdvstar poly equiv ccav ] for every generator @xmath7 , @xmath7-ccdv@xmath101and @xmath8-ccav are polynomially equivalent .    proposition  [ prop : ccdvstar poly equiv ccav ] is not completely trivial , since the reductions must convert election instances maintaining the relative points of the candidates . however , this is done using standard constructions .",
    "from theorem  [ theorem : ccdv dichotomy ] and the results in  @xcite , it follows that @xmath7-ccdv and @xmath7-ccdv@xmath101always have the same complexity .",
    "in fact , our algorithms for ccdv and ccdv@xmath101do not take the structure of the `` registered '' votes into account , but can work with scores for the candidates that do not come from any set of votes . for bribery ,",
    "the situation is quite different , see the above theorem  [ theorem : bribery with unbribable voters np complete 0 dots 0 -1 -2 ] .",
    "all polynomial - time cases for ccdv follow from the above relationship in a straight - forward manner .",
    "this is not surprising , since ccdv in the above - discussed sense has less structure than ccav , and thus easiness results for ccav translate to ( dual ) ccdv .",
    "the interesting part of our dichotomy is the converse : if ccav is np - hard for some generator @xmath7 , then ccdv is hard for @xmath8 as well .",
    "a natural approach for the proof of the dichotomy theorem , suggested by proposition  [ prop : ccdvstar poly equiv ccav ] , is to show that @xmath7-ccdv@xmath101always reduces to @xmath7-ccdv .",
    "while this does in fact follow , proving a generic reduction from @xmath7-ccdv@xmath101to @xmath7-ccdv for all generators @xmath7 seems to be difficult , due to the additional structure provided by ccdv@xmath101 .",
    "our proof of the ccdv part of theorem  [ theorem : ccdv dichotomy ] therefore uses a case distinction to obtain @xmath7-ccdv hardness for each remaining pure , polynomial - time uniform generator @xmath7 .",
    "we note that due to the relationship between ccdv and ccav , all ccav - hardness results in  @xcite easily follow from the results obtained in the current paper .",
    "however , our proofs make use of the results and proofs from  @xcite .      we first consider generators with `` few '' different coefficients , i.e. , generators of the form @xmath105 for rationals @xmath106 . for elections with at least @xmath107 candidates , however @xmath7",
    "is uniquely defined up to ultimate equivalence , which is sufficient for the complexity analysis . ] using equivalence - preserving transformations , we can assume that all @xmath5 are nonnegative integers , and that their greatest common divisor is @xmath90 .",
    "note that a generator of this form is trivially polynomial - time uniform .",
    "a general reduction from @xmath7-ccdv to @xmath7-ccdv@xmath101does not seem feasible , as discussed above .",
    "however , there are cases where hardness of @xmath7-ccdv@xmath101leads to hardness of @xmath7-ccdv with a direct proof . the following two results ( theorems  [ theorem : alpha 0 dots 0 alpha < beta ccdv ] and  [ theorem : alpha 0 dots 0 beta < alpha ccdv ] )",
    "are proven in this way .",
    "restatabletheoremtheoremccdvhardnessalphazweodotsalphasmallerbeta [ theorem : alpha 0 dots 0 alpha < beta ccdv ] let @xmath108 be a generator with @xmath109 .",
    "then @xmath7-ccdv is np - complete .",
    "( sketch ) from  @xcite , we know that @xmath8-ccav is np - complete , proposition  [ prop : ccdvstar poly equiv ccav ] , then implies that @xmath7-ccdv@xmath101is np - complete as well .",
    "we show that @xmath7-ccdv@xmath101reduces to @xmath7-ccdv .",
    "given an instance of @xmath7-ccdv@xmath101 , we convert it into an equivalent instance of @xmath7-ccdv by replacing the undeletable votes @xmath103 with votes that    1 .   [ enum label : setup votes need same relative points ] result in the same relative points as the votes in @xmath103 , and 2 .",
    "are not deleted in a successful ccdv action .",
    "we denote a vote @xmath110 simply as @xmath111 ( the rest is irrelevant ) . with some light preprocessing",
    ", we can assume that no deletable vote has @xmath26 in the first or last position , this allows us to compute the number @xmath112 of points that @xmath26 will have after the delete action .",
    "similarly , we can assume that @xmath113 for some @xmath114 .",
    "satisfying point  [ enum label : setup votes need same relative points ] above boils down to add , for an arbitrary candidate @xmath115 , votes that let @xmath37 gain @xmath76 points against @xmath26 , and which will not be deleted .",
    "this is done as follows : we add dummy candidates @xmath116 ( for a suitably chosen number @xmath117 ) and a single vote @xmath118 , letting @xmath37 gain @xmath76 points relative to @xmath26 . to ensure that the vote @xmath118 can not be removed",
    ", we add votes setting up the scores as follows :    * each @xmath119 for @xmath120 ties with @xmath26 , * the only way to make @xmath119 lose points ( relative to @xmath26 ) is to remove votes @xmath121 , which then lets @xmath122 gain points ( relative to @xmath26 ) .    hence removing the vote @xmath118 , which lets @xmath123 gain @xmath74 points relative to @xmath26 requires the controller to remove votes of the form @xmath124 , which each lets @xmath125 gain @xmath74 points .",
    "this process continues for @xmath119 with @xmath126 .",
    "thus , removing @xmath118 triggers a `` chain '' of additional removals  more than the budget allows .",
    "the numbers of votes needed to setup grows exponentially in the number of steps .",
    "however , since the controller can only remove a polynomial number of votes , we only require logarithmically many steps , yielding a polynomial construction .",
    "constructing the actual set of votes that results in the above scores and satisfies the two points above is nontrivial , the construction is in fact the main technical difficulty in the proof .",
    "the following result is shown similarly , the difference is that instead of logarithmically many steps of an exponentially growing construction , here we apply a simpler linear process .",
    "restatabletheoremtheoremalphazerodotszerobetasmalledalphaccdv[theorem : alpha 0 dots 0 beta < alpha ccdv ] let @xmath108 be a generator with @xmath127 . then @xmath7-ccdv is np - complete .",
    "similarly to the preceding section  [ sect : ccdv hardness : generic ccdvstar reductions ] , the results in this section are proved by a reduction from @xmath7-ccdv@xmath101to @xmath7-ccdv .",
    "however , while the reductions above were `` generic '' ( reducing from an arbitrary ccdv@xmath101-instance ) , we now start with instances of @xmath7-ccdv@xmath101produced by the hardness proof of @xmath7-ccdv@xmath101 . therefore , we do not need to construct `` setup votes '' that implement any possible given set of scores , but only need to achieve exactly the points used in the hardness proof of @xmath8-ccav in  @xcite .    in the following theorem ,",
    "this is a significant advantage , as here the `` setup votes '' grant more points to the preferred candidate than to the remaining candidates .",
    "therefore , it is easy to construct these votes in such a way that the controller has no incentive to delete them .",
    "the proof of the theorem also illustrates the relationship between hardness results for ccav ( as obtained in  @xcite ) , and the hardness results for ccdv and bribery we obtain in the current paper : the proof of theorem  [ theorem:0 dots 0 -gamma -beta -alpha ccdv ] below uses the reduction of the corresponding hardness result for ccav in  @xcite as a starting point , but is technically more involved . we will later re - use parts of the following construction to obtain the corresponding hardness result for bribery as well , in the later theorem  [ theorem:0 dots 0 -gamma -beta -alpha bribery ] .",
    "restatabletheoremtheoremzerodotszerominusgammaminusbetaminusalphaccdv[theorem:0 dots 0 -gamma -beta -alpha ccdv ] let @xmath128 with @xmath129 .",
    "then @xmath7-ccdv is np - complete .    for the proof , we equivalently write @xmath7 as @xmath130 with @xmath131 .",
    "then , @xmath132 . from  @xcite",
    ", it follows that @xmath8-ccav is np - complete , and hence , due to proposition  [ prop : ccdvstar poly equiv ccav ] , it suffices to show that @xmath7-ccdv@xmath101reduces to @xmath7-ccdv .",
    "therefore , let an @xmath7-ccdv@xmath101instance with undeletable votes @xmath103 , deletable votes @xmath104 , preferred candidate @xmath26 , and budget @xmath117 be given . from the proof of proposition  [ prop : ccdvstar poly equiv ccav ] , we can assume that this instance is obtained from the hardness proof of @xmath8-ccav as follows :    * the votes in @xmath104 are exactly the votes available for addition in the ccav instance , with the order of candidates reversed , * the relative points gained by the candidates from the votes in @xmath133 are the same as the points of the candidates in the ccav instance ( before the addition of votes by the controller ) .",
    "the hardness proof of @xmath8-ccav uses a reduction from 3 dm .",
    "3 dm is the following problem : given a multiset @xmath134 with @xmath135 , @xmath136 and @xmath137 pairwise disjoint sets of equal size such that each @xmath138 appears in exactly @xmath94 tuples of @xmath58 , decide whether there is a set @xmath139 with @xmath140 such that each @xmath138 appears in some tuple of @xmath22 ( we also say that @xmath22 _ covers _",
    "@xmath141 ) . from the problem definition",
    ", it follows that @xmath142 .",
    "the condition that each @xmath141 appears in exactly @xmath94 tuples is not standard ; we prove in the appendix remains np - complete .",
    "let @xmath134 be an instance of 3 dm .",
    "following the notation used in  @xcite , we set @xmath143 and @xmath144 .",
    "since @xmath142 in every 3 dm instance , it follows that @xmath145 .",
    "the hardness proof of @xmath8-ccav , translated to the ccdv setting ( i.e. , we present the votes as in the ccdv instance  as reversals of votes from the ccav instance ) , constructs the following situation :    * the candidate set is @xmath146 , * for each @xmath147 , the following votes are available for deletion ( we only list the candidates gaining non - zero points from the vote ) : * * @xmath148 * * @xmath149 * * @xmath150 * * @xmath151 * the relative scores resulting from the registered voters of the ccav instance ( i.e. , the undeletable voters of the ccdv@xmath101instance ) are as follows : * * @xmath152 , * * @xmath153 for each @xmath154 , * * @xmath155 , * * @xmath156 .    from the above votes introduced for the 3dm - elements , the candidates gain the following initial points  recall that each @xmath154 appears in exactly @xmath94 triples from @xmath58 , and , since @xmath157 , and there are @xmath158 votes introduced for every element in @xmath58 , there are exactly @xmath159 deletable votes introduced above :    * @xmath160 , since @xmath26 gains @xmath161 points in each of the @xmath159 votes , * @xmath162 , since @xmath163 gains @xmath164 points in all of the votes introduced for other elements @xmath165 , and gains @xmath166 points in @xmath97 of the votes above , and @xmath167 points in one of the vote , * @xmath168 analogously , * @xmath169 for each @xmath154 , since each @xmath37 appears in exactly @xmath94 triples @xmath163 from @xmath58 .    for each candidate @xmath170 , the undeletable votes from the ccdv@xmath101instance thus let her gain exactly @xmath171 points ( modulo an offset added to the points of all candidates , since the ccav reduction relies on an implementation lemma that only fixes the relative points of each candidate ) .",
    "the scores that the undeletable votes implement are therefore as follows ( recall that @xmath145 ) :    [ cols=\"<,<\",options=\"header \" , ]     since there are only @xmath172 positions available , we have a contradiction .",
    "therefore , it follows that @xmath173 as claimed .",
    "we now consider all votes in @xmath21 having a candidate @xmath174 in the first place .",
    "since such a @xmath37 only needs to lose @xmath175 points against @xmath26 , and there is a vote available ( introduced by the reduction above ) that has a second relevant candidate ( namely @xmath163 with @xmath176 ) in the second position , and these are the only votes introduced whose deletion removes points from both @xmath37 and another relevant candidate , we can without loss of generality assume that each vote in @xmath21 having @xmath174 in the first position has a vote @xmath163 in the second position . in particular , this implies that @xmath177 , therefore @xmath178    from @xmath179 and @xmath180 , we obtain @xmath181 , with @xmath182 , this implies @xmath183 . since we know @xmath184 from the above",
    ", it follows that @xmath185 , and therefore @xmath186 . since @xmath187",
    ", this implies @xmath188    from @xmath179 , we thus get @xmath189 , thus @xmath190 , i.e. , @xmath191 . since @xmath180 , we get @xmath192 , i.e. ,    @xmath193    therefore , we know that @xmath194 , @xmath195 , @xmath196 , @xmath197 , @xmath198 , and @xmath199",
    ". therefore , these candidates together use    @xmath200 relevant positions in @xmath21 .",
    "since the candidates of the form @xmath201 each use at least one relevant position of a vote in @xmath21 , this means that all @xmath172 relevant positions in @xmath21 are used by relevant candidates . in particular",
    ", the controller can not remove any vote that has a dummy candidate in a relevant position , and thus does not remove any of the setup votes .",
    "this concludes the proof .      in this section",
    "we prove theorem  [ theorem : collection of few coefficients ccdv hardness cases ] , the proof is split up into the three distinct types of generators covered by the theorem .",
    "restatabletheoremtheoremccdvhardnessalphaonealphatwozerodotszerominusalphafourminusalphafiveminusalphasix [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] let @xmath105 with @xmath202 .",
    "then @xmath7-ccdv is np - complete .    for the proof , we normalize to @xmath203 and write @xmath7 as @xmath204 with @xmath205 and @xmath206 .",
    "we again reduce from 3 dm .",
    "let @xmath134 be a be 3dm - instance .",
    "we construct an instance of @xmath7-ccdv as follows :    * the candidate set is @xmath207 , where @xmath208 is the preferred candidate , and @xmath104 is a set of dummy candidates , * for each @xmath209 , we add a vote @xmath210 where @xmath211 , and @xmath212 contains the remaining candidates in an arbitrary order ( all of these candidates obtain @xmath164 points from this vote ) .",
    "we call these votes _ 3dm - votes_. * we introduce additional setup - votes ( see below for details ) such that the relative points of the candidates gained from the 3dm - votes and the setup votes are as follows : * * @xmath213 * * @xmath214 for each @xmath215 ( note that @xmath216 ) * * @xmath217 for each @xmath218 ( note that @xmath219 ) , * * @xmath220 for each @xmath221 ( note that @xmath222 ) , * * no dummy candidate @xmath223 can win the election when at most @xmath224 votes are deleted .",
    "we first show that @xmath58 is positive if and only if @xmath26 can be made a winner of the election with deleting at most @xmath224 of the 3dm - votes . in the following , we identify elements of @xmath58 and the corresponding 3dm - votes .",
    "first assume that @xmath58 is a positive instance , i.e. , there is some @xmath139 with @xmath140 such that each @xmath154 appears in exactly one tuple of @xmath22 .",
    "we show that @xmath26 wins the election when exactly the votes in @xmath22 are removed .",
    "since , by construction , the dummy candidates can not win the election , it suffices to show that no candidate @xmath154 beats the preferred candidate @xmath26 .",
    "hence let @xmath37 be such a candidate . since @xmath22 is a cover , exactly one 3dm - vote in which @xmath37 gets a non - zero amount of points",
    "is removed . depending on whether @xmath225 , @xmath226 , or @xmath227 , @xmath37 gains @xmath175 , @xmath228 , or @xmath229 points from this vote .",
    "we make a case distinction .    * if @xmath225 , then @xmath37 loses @xmath175 points . since @xmath230 initially , the final score of @xmath37 is at most @xmath164 , and hence @xmath37 does not beat @xmath26 . *",
    "if @xmath226 , then @xmath37 loses @xmath228 points , i.e. , gains @xmath231 points . since @xmath232 initially , @xmath37 also does not beat @xmath26 . * if @xmath227 , then analogously , @xmath37 gains @xmath233 points ; since @xmath234 , @xmath37 does not beat @xmath26 .    therefore , @xmath26 wins the election as required .    for",
    "the converse , assume that there is a set @xmath22 of at most @xmath224 3dm - votes such that removing @xmath22 makes @xmath26 win the election .",
    "since initially , each candidate @xmath215 beats @xmath26 , each such @xmath235 must lose points relatively to @xmath26 .",
    "the only way for @xmath235 to lose points relative to @xmath26 by removing 3dm - votes is to remove a 3dm - vote that has @xmath235 in the first position .",
    "therefore , @xmath22 contains , for each @xmath215 , a tuple covering @xmath235 . to show that @xmath22 also covers each @xmath221 and each @xmath218",
    ", it suffices , due to cardinality reasons , to show that no such candidate appears in two tuples ( or votes ) from @xmath22 .",
    "first assume that some @xmath218 appears in two votes from @xmath22 .",
    "then @xmath236 gains @xmath237 points .",
    "since the score of @xmath236 is initially more than @xmath238 , this implies that the final score of @xmath236 is more than @xmath164 , hence @xmath236 beats @xmath26 , a contradiction .",
    "analogously , if @xmath221 appears in two votes from @xmath22 , then @xmath170 gains @xmath239 points , beating @xmath26 , we again have a contradiction .",
    "this proves that @xmath58 is a positive instance if and only if @xmath26 can be made a winner by deleting at most @xmath224 of the 3dm - votes .",
    "it remains to show how we can add votes that set up the relative points of the candidates as required above , and which will not be deleted by the controller .",
    "we first compute the points that the candidates obtain from the 3dm - votes ; we denote these points with @xmath240 for a candidate @xmath37 .",
    "* @xmath26 gets @xmath164 points from each 3dm - vote , hence @xmath241 , * each @xmath154 appears in exactly @xmath94 tuples from @xmath22 , and gains @xmath164 points in all other 3dm - votes .",
    "therefore : * * for each @xmath215 , @xmath242 , * * for each @xmath218 , @xmath243 , * * for each @xmath221 , @xmath244",
    ".    therefore , relative to @xmath26 , each @xmath215 must lose @xmath245 points .",
    "we achieve this by adding two votes of the form    @xmath246    where @xmath247",
    "are dummy candidates from @xmath104 , and @xmath212 contains all remaining candidates .",
    "this lets @xmath26 gain @xmath245 points relatively to all candidates in @xmath248 , and hence each @xmath215 beats @xmath26 by exactly @xmath175 points , as required .",
    "however , these votes let @xmath26 also gain points against each candidate in @xmath249 . to get the required relative scores for these candidates , we proceed as follows :    * after adding the votes above , @xmath26 beats each @xmath218 by @xmath250 points . to ensure that @xmath217 ( relative to @xmath26 ) , we add the following votes : * * votes of the form @xmath251 ( with @xmath212 and dummies as previously ) let @xmath236 gain @xmath175 points relative to @xmath26 . *",
    "* votes of the form @xmath252 let @xmath236 lose @xmath231 points relative to @xmath26 .",
    "+ combining these steps allows to adjust the relative score of @xmath236 to lie in the required interval of length @xmath231 . * for @xmath221",
    ", we proceed analogously by adding votes letting @xmath170 gain @xmath175 points and votes removing @xmath233 points , which allow the relative score of @xmath170 to lie in the required interval of length @xmath233 .    to ensure that the dummy candidates can not win the election ,",
    "we use the following construction : for each occurrence of a dummy candidate in one of the above votes , we use a fresh dummy candidate ( who gets @xmath164 points in all other votes )",
    ". then each dummy candidate has at most @xmath175 ( absolute ) points ; the preferred candidate @xmath26 has @xmath245 ( absolute ) points .",
    "therefore , no dummy candidate can beat @xmath26 .    it remains to show that if the ccdv instance is positive , i.e. , if @xmath26 can be made a winner of the election with at most @xmath224 deletions , then @xmath26 can in fact be made a winner with deleting at most @xmath224 3dm - votes . to see this ,",
    "note that each candidate @xmath215 must lose points relative to @xmath26 .",
    "this is only possible by removing votes in which @xmath235 is votes ahead of @xmath26 . by construction",
    ", this is the case only for the 3dm - votes . since in each 3dm - vote , only a single candidate from @xmath137 is voted ahead of @xmath26 , it is necessary to remove at least @xmath224 3dm - votes in order to make @xmath26 win the election . therefore , if @xmath26 is made a winner of the election by removing at most @xmath224 votes , then in fact exactly @xmath224 votes are removed , and each of them is a 3dm - vote .",
    "this concludes the proof .",
    "restatabletheoremtheoremccdvalphaoneaphatwobiggerthanalphathreebiggerthanalphasix [ theorem : ccdv alpha1alpha2>alpha3>alpha6 ] let @xmath253 with @xmath254",
    ". then @xmath7-ccdv is np - complete .",
    "we can write @xmath7 more simply as @xmath255 with @xmath256 .",
    "we proceed very similarly to the proof of theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] ; we again reduce from 3 dm , with an instance given as @xmath134 with @xmath257 , @xmath258 be given , where each @xmath154 appears in exactly @xmath94 tuples of @xmath58 , and the sets @xmath135 , @xmath136 , and @xmath137 are pairwise disjoint .",
    "we construct an instance of @xmath7-ccdv as follows :    for each @xmath209 , we add a vote @xmath259 , where @xmath212 includes all remaining candidates .",
    "we use setup votes to ensure that the relative scores are as follows :    * @xmath213 , * @xmath260 for each @xmath221 , * @xmath261 for each @xmath218 , * @xmath262 for each @xmath215 .",
    "we show that the 3 dm instance is positive if and only if @xmath26 can be made a winner of the election with deleting at most @xmath16 of the 3dm - votes .",
    "we again identify the elements of @xmath58 and the votes obtained from them .",
    "first assume that @xmath139 is a cover with size @xmath16 .",
    "then removing all votes in @xmath22 lets each candidate in @xmath135 lost @xmath76 points , each candidate in @xmath136 loses @xmath74 points , and each candidate in @xmath137 gains @xmath263 points , hence all candidates tie and @xmath26 wins the election .",
    "therefore , it suffices to show that we can in fact construct setup votes achieving the required relative points that will not be deleted by the controller .",
    "this is simpler than the corresponding proof in theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] : since the controller must ensure that each @xmath170 and each @xmath236 loses points relative to @xmath26 , it suffices to achieve the required points with setup votes that each vote at most one candidate from @xmath249 ahead of @xmath26 .",
    "since @xmath264 of these candidates ( that is all of them ) need to lose points against @xmath26 , and removing a 3dm - vote results in @xmath97 of them losing points against @xmath26 , and removing each setup votes allow at most one candidate from @xmath249 to lose points against @xmath26 , the controller can only remove votes that vote two candidates from @xmath249 ahead of @xmath26 , i.e. , the setup votes .",
    "now , it is easy to adjust the scores of every relevant candidate @xmath154 with votes voting @xmath37 in the first , second , or last spot , all other relevant candidates in the @xmath164-point sequence , and dummy candidates in the two remaining positions .    to ensure that the dummy candidates can not win the election , we use essentially the same idea as in the proof of theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] : we use a fresh dummy candidate for each position where one is needed , and then increase the points of each relevant candidate @xmath265 with a vote voting @xmath37 first , dummy candidates in the second and last positions , and all remaining candidates in the @xmath164-points sequence . these votes do not change the relative points of the relevant candidates , and ensure that the dummies can not win the election . due to the same reasoning as above , these votes can not be removed by the controller , hence this concludes the proof .",
    "restatabletheoremtheoremccdvhardnessalphaonebiggeralphathreebiggeralphafour [ theorem : ccdv hardness alpha1 > alpha 3 > alpha 4 ] let @xmath105 with @xmath266 .",
    "then @xmath7-ccdv is np - complete .",
    "we reduce from 3 dm . hence let @xmath134 be a 3dm - instance . due to cardinality reasons",
    ", @xmath58 is positive if and only if there are @xmath224 many elements from @xmath58 which pairwise differ in all components . from @xmath58 ,",
    "we construct an @xmath7-ccdv instance as follows : the set of candidates is @xmath267 , where @xmath268 is a new candidate , and @xmath104 is a set of dummy candidates . for each element @xmath269 in @xmath58",
    ", we introduce a vote    @xmath270    with @xmath223 , and where @xmath212 contains the remaining candidates in an arbitrary order ( all of these candidates receive @xmath271 points from this vote ) .",
    "again , we call these votes _ 3dm - votes_. for a candidate @xmath154 , we define @xmath272 if @xmath273 , respectively .",
    "we now set up the relative points of the candidates as follows :    * @xmath274 , * @xmath275 , * @xmath276 ( note that @xmath277 and hence @xmath278 ) .",
    "( recall that these points are relative to the score of @xmath26 , and hence can be negative ) .",
    "we show below how votes can be added to the election instance such that    * the resulting scores relative to @xmath26 are as indicated above , * to make @xmath26 a winner with deleting at most @xmath224 votes , the controller can only delete votes introduced from the elements in the 3 dm instance ( we will call these 3dm - votes in the sequel ) .",
    "we claim that the 3dm - instance is positive if and only if @xmath26 can be made a winner of the election with deleting at most @xmath224 of the 3dm - votes .",
    "first assume that the instance is positive , and let @xmath139 be a cover with @xmath140 .",
    "then deleting exactly the votes that correspond to the cover changes the scores of the candidates ( relative to @xmath26 ) as follows :    * in each of these votes , @xmath268 gets @xmath175 points and @xmath26 gets @xmath271 points . hence ,",
    "relative to @xmath26 , @xmath268 loses @xmath279 points , and hence ties with @xmath26 . * for each candidate @xmath154 , there are @xmath280 votes in @xmath22 in which @xmath37 gets @xmath271 points , and there is a single vote in which @xmath37 gets @xmath281 points , while @xmath26 gets @xmath271 points in all of these votes .",
    "hence , relative to @xmath26 , each @xmath37 gains @xmath282 points .",
    "since @xmath37 s initial score is at least @xmath282 below @xmath26 , this means that @xmath37 does not beat @xmath26 .",
    "now assume that @xmath26 can be made a winner of the election by removing at most @xmath224 of the 3dm - voters .",
    "since @xmath268 must lose @xmath279 points , and removing each vote lets @xmath268 lose @xmath283 points against @xmath26 ( and @xmath284 ) , it follows that exactly @xmath224 voters must be removed .",
    "let @xmath139 be the set corresponding to the removed voters .",
    "we show that @xmath22 is a cover .",
    "assume indirectly that this is not the case , then , since @xmath285 , there is some element @xmath154 appearing in at least two of the tuples in @xmath22 . then with deleting the votes corresponding to @xmath22 , @xmath37 gains at least @xmath286 points against @xmath26 .",
    "since @xmath37 initially has more than @xmath287 points , this means that @xmath37 beats @xmath26 in the final election , a contradiction .",
    "therefore , @xmath22 is indeed a cover as claimed .",
    "it remains to show how to add votes to the above - introduced 3dm - votes such that the required scores are achieved , and such that any successful control action removing at most @xmath224 many votes will only delete 3dm - votes .",
    "we will achieve the latter property by only adding votes that give the candidate @xmath26 at least as many points as the candidate @xmath268 . since in order to at least tie with @xmath268 , the preferred candidate @xmath26 must gain at least @xmath279 points against @xmath26 , and gains exactly @xmath283 points when a vote as above is deleted , this ensures that in order to ensure that @xmath268 does not beat @xmath26 , only 3dm - votes can be deleted .    hence it remains to show how to implement the above scores ( relative to @xmath26 ) be adding to the above 3dm - votes only votes in which @xmath26 gets at least as many points as @xmath268 .",
    "for this , we first compute the points ( relative to @xmath26 ) that each candidate gets from the above 3dm - votes .    * in each of the @xmath288 votes from the 3dm - instance , @xmath268 gains @xmath283 points relative to @xmath26 .",
    "hence @xmath268 s initial relative score is @xmath289 * since each @xmath154 appears in exactly @xmath94 tuples from @xmath58 , each such candidate @xmath37 loses @xmath282 points relative to @xmath26 in @xmath94 of the 3dm - votes , and ties with @xmath26 in the remaining ones .",
    "therefore , @xmath37 s initial relative score is @xmath290    therefore , we need to adjust the scores as follows :    adjusting the relative score between @xmath268 and @xmath26 . : :    relatively to @xmath26 , the candidate @xmath268 must lose    +    @xmath291    +    points .",
    "we achieve this by adding    @xmath292 votes    of the form    +    @xmath293    +    where @xmath294 stands for ( different ) dummy candidates from    @xmath104 , and @xmath212 contains other    candidates in an arbitrary order .",
    "each of these votes lets    @xmath26 gain @xmath283 points against    @xmath268 ; hence the    @xmath292 votes    have the required effect .",
    "note that these votes also add    @xmath295    points to @xmath26 relative to each candidate    @xmath154 . adjusting the relative score between @xmath37 and @xmath26 , for @xmath154 .",
    ": :    recall that each of these @xmath37 lost    @xmath295    points relative to @xmath26 by the above adjustment .",
    "we adjust    the points of @xmath37 in two steps :    +    1 .",
    "we add votes to ensure that , relative to @xmath26 ,    @xmath37 has at least    @xmath296 points .",
    "since    @xmath37 lost    @xmath295    against @xmath26 in the above step , this means @xmath37    has to gain at least    +    @xmath297    +    points , we denote this number with @xmath298 . to let    @xmath37 gain at least @xmath298 points , we add    @xmath299 ( recall    that @xmath284 ) votes of the form    @xmath300 where again the    @xmath294 stand for ( different ) dummy candidates , and    @xmath212 contains all remaining candidates .    2 .   after the above step",
    ", the score of @xmath37 may be larger    than allowed  recall that we need the score of @xmath37 to lie    in the interval of length @xmath282 between    @xmath287 and    @xmath301 . to move the score into this    interval , we repeatedly add votes that have all relevant candidates    except @xmath37 in a position gaining @xmath271    points , @xmath37 in the position gaining    @xmath281 points , and four dummy candidates in the    remaining positions ( such a vote lets @xmath37 gain    @xmath282 points against @xmath26 ) .",
    "this ensures that @xmath37 s score is in the required interval .",
    "+    by construction , @xmath26 gets at least as many points as    @xmath268 in the above votes , and the required points are    achieved . it remains to show that the dummy candidates are indeed    irrelevant , i.e. , never win the election when at most    @xmath224 votes    are removed . to achieve this",
    ", we set up the above votes as follows : we    use a fresh dummy candidate for each position where a dummy candidate    appears in the above votes , and position the dummy candidate in the    block receiving @xmath271 points in the remaining votes .",
    "since @xmath26 gets at least @xmath271 points in    every vote , this means that for each dummy candidate @xmath294 ,    there is at most one vote in which she can gain points against    @xmath26 , and in this vote , she gains    @xmath283 points .",
    "however , in the    @xmath292 votes    introduced above to adjust the relative score of @xmath26 and    @xmath268 , the candidate @xmath26 gains    @xmath295    points against the dummy candidates .",
    "hence , when at most    @xmath224 votes    are removed , @xmath26 still has a headstart of at last    @xmath302    against each dummy candidate , and therefore strictly beats each dummy    candidate .",
    "this concludes the proof .",
    "now , theorem  [ theorem : collection of few coefficients ccdv hardness cases ] easily follows from the above results :    this follows from the above results , since point  [ few coefficients ccdv : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] is exactly the generator covered in theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] , point  [ few coefficients ccdv : ccdv alpha1alpha2>alpha3>alpha6 ] is theorem  [ theorem : ccdv alpha1alpha2>alpha3>alpha6 ] , and point  [ few coefficients ccdv : ccdv hardness alpha1 > alpha 3 > alpha 4 ] is theorem  [ theorem : ccdv hardness alpha1 > alpha 3 > alpha 4 ]",
    "in this section , we prove our polynomial - time bribery results . the following result for approval and",
    "veto - like scoring systems were obtained by lin  :    restatabletheoremtheoremlinbriberyresultslist[theorem : lin bribery results list ]    * bribery for @xmath16-approval is in @xmath303  if @xmath304 and np - hard otherwise , * bribery for @xmath16-veto is in @xmath303  if @xmath305 and np - hard otherwise .    for the remaining polynomial - time bribery cases , note that , while corresponding ( with duality ) to the generators which give rise to a ccav - problem in polynomial time , we can not use arguments analogous to the results presented in section  [ sect : relationship ccdv ccav ] : due to the additional manipulation step , the bribery problem is conceptually more complex than ccav or ccdv .",
    "therefore , algorithms for bribery tend to be more complicated than their ccav or ccdv counterparts .",
    "we now prove our first polynomial - time algorithm for bribery :    let @xmath22 be the set of candidates , let @xmath21 be the set of voters , let @xmath26 be the preferred candidate , and let @xmath16 be the number of voters we can bribe . without loss of generality ,",
    "assume we bribe exactly @xmath16 voters and that all bribed voters rank @xmath26 first .",
    "there are three types of voters .",
    "let @xmath306 be the set of voters that rank @xmath26 last , let @xmath307 be the set of voters that rank @xmath26 neither first nor last , and let @xmath308 be the set of voters that rank @xmath26 first . note that bribing a voter in @xmath306 to vote @xmath309 is at least as good as bribing a voter in @xmath307 to vote @xmath309 , which is at least as good as bribing a voter in @xmath308 to vote @xmath309 .",
    "thus we will assume that we bribe as many @xmath306 voters as possible , followed by as many @xmath307 voters as possible , followed by @xmath308 voters .",
    "since we assume that all @xmath16 bribed voters put @xmath26 first , we also know @xmath26 s score after bribery .",
    "we consider the following three cases .",
    "1 .   @xmath310 .",
    "we bribe @xmath16 voters from @xmath306 . in this case",
    ", we view bribery as deleting @xmath16 voters followed by a manipulation of @xmath16 voters .",
    "greedily delete @xmath311 for highest scoring @xmath312 , and update the scores .",
    "repeat until @xmath16 voters are deleted .",
    "then add @xmath313 for highest scoring @xmath312 .",
    "update the scores until @xmath16 voters have been added ( or use the manipulation algorithm for this case ) .",
    "2 .   @xmath314 .",
    "+ in this case bribery will make @xmath26 will be a winner , since after bribery @xmath26 will be ranked first by every voter .",
    "3 .   @xmath315 .",
    "+ we bribe all voters in @xmath306 and @xmath316 of the @xmath307 voters .",
    "+ we again view bribery as deletion followed by manipulation .",
    "delete all @xmath306 voters . in @xmath307",
    ", deleting a voter @xmath317 corresponds to transferring a point from @xmath318 to @xmath312 . after deleting @xmath16 voters ,",
    "the deleted voters will be bribed to rank @xmath26 first and to rank some other candidate last . after deleting @xmath306 , @xmath319 . for every @xmath307 voter @xmath317 that is deleted , transfer one point from @xmath312 to @xmath318 . for every bribe @xmath309 ,",
    "delete a point from @xmath294 .",
    "there are exactly @xmath16 bribes . after bribery , @xmath320 and",
    "the score of every other candidate needs to be at most @xmath320 .",
    "+ all this immediately translates into the following min - cost network flow problem .",
    "1 .   we have a source @xmath141 and a sink @xmath321 .",
    "we have a node @xmath37 for every candidate @xmath322 .",
    "3 .   for every @xmath323",
    ", there is an edge from @xmath141 to @xmath37 with capacity @xmath324 and cost 0 .",
    "we will be looking for a flow that saturates all of these edges .",
    "this ensures that candidates start with right score .",
    "4 .   for every @xmath323",
    ", there is an edge from @xmath37 to @xmath321 with capacity @xmath325 and cost 0 .",
    "this ensures that after bribery , the score of every other candidate will be at most the score of @xmath26 .",
    "5 .   for every @xmath326",
    "there is an edge from @xmath312 to @xmath318 with cost 1 and capacity the number of voters that vote @xmath317 .",
    "these are the only edges with a cost .",
    "the min cost will correspond to the number of @xmath307 voters that we bribe .",
    "so , we need to min cost to be @xmath316 .",
    "we have now handled the ccdv part of the problem .",
    "all that is left to do is to handle the manipulation part .",
    "so , we are adding @xmath16 vetoes to candidates other than @xmath26 .",
    "add a node @xmath327 to handle the vetoes .",
    "there is an edge from @xmath327 to @xmath321 of capacity @xmath16 and cost 0 so that there will be at most @xmath16 vetoes . and for every candidate @xmath323 , we add an edge from @xmath37 to @xmath327 of capacity @xmath16 and cost 0 . + it is easy to see that there is a successful bribery of and only if there is a network flow with value @xmath328 and min cost at most @xmath316 .",
    "the following polynomial - time bribery proof uses the manipulation algorithm from the proof of theorem  [ theorem : man ] .      as in the proof of theorem  [ theorem:100 - 1 bribery in ptime ]",
    ", we partition @xmath21 into @xmath306 , @xmath307 , and @xmath308 .",
    "@xmath306 consists of all voters in @xmath21 that rank @xmath26 last , @xmath307 consists of all voters in @xmath21 that rank @xmath26 second - to - last , and @xmath308 consists of the remaining voters . in the proof of theorem  [ theorem:100 - 1 bribery in ptime ] , it was important that bribing a @xmath306 voter is always at least as good as bribing a @xmath307 voter , which is always at least as good as bribing a @xmath308 voter .",
    "this is not always the case here , as we will see in example  [ example : bribery ] :    [ example : bribery ] this example shows that we sometimes need to bribe @xmath308 voters .",
    "it also shows that it is sometimes better to bribe a @xmath308 voter than it is to bribe a @xmath307 voter .",
    "it also shows that an optimal bribery is not always an optimal deletion followed by an optimal manipulation , since an optimal deletion would never delete a voter from @xmath308 .",
    "we will use the scoring rule @xmath329 .",
    "let @xmath330 and let @xmath21 consist of the following voters :    * one ( @xmath307 ) voter voting @xmath331 , * one ( @xmath307 ) voter voting @xmath332 , * one ( @xmath307 ) voter voting @xmath333 , * two ( @xmath308 ) voters voting @xmath334 , and * two ( @xmath308 ) voters voting @xmath335 .",
    "we can make @xmath26 a winner by bribing one of the @xmath308 voters to vote @xmath339 .",
    "but it is easy to see that we can not make @xmath294 a winner by bribing a @xmath307 voter , wlog , the voter voting @xmath331 , since in the bribed election , the score of @xmath26 will be at most @xmath340 , and so both @xmath312 and @xmath294 must be in the last position of the bribed voter .",
    "* one ( @xmath306 ) voter voting @xmath343 , * one ( @xmath306 ) voter voting @xmath344 , * one ( @xmath306 ) voter voting @xmath345 , * one ( @xmath307 ) voter voting @xmath346 , * one ( @xmath308 ) voter voting @xmath347 , * one ( @xmath308 ) voter voting @xmath348 , * one ( @xmath308 ) voter voting @xmath349 , * one ( @xmath308 ) voter voting @xmath350 , * two ( @xmath308 ) voters voting @xmath351 , and * one ( @xmath308 ) voter voting @xmath352 .",
    "we can make @xmath26 a winner by bribing the @xmath307 voter to vote @xmath357 .",
    "but if we bribe one of the @xmath306 voters , @xmath26 s score will be at most -10 , and so the bribed voter needs to put @xmath312 , @xmath318 , and @xmath37 in the two last positions , which wo nt fit .",
    "so , let @xmath359 .",
    "consider a successful bribery that bribes a minimum number , @xmath117 , of @xmath308 voters and suppose for a contradiction that @xmath360 .",
    "if we bribe a voter from @xmath308 , then for every @xmath322 , @xmath40 decreases by at most @xmath76 .",
    "if we bribe a voter @xmath343 to vote @xmath361 , then for every @xmath322 , @xmath40 decreases by at least @xmath76 .",
    "so , it is never better to bribe a voter from @xmath308 than it is to bribe a voter from @xmath306",
    ". it follows that all voters from @xmath306 are bribed and so there are at least @xmath362 unbribed @xmath307 voters .",
    "let @xmath363 . if there exists a set @xmath364 of @xmath365 candidates and a set @xmath366 of @xmath365 unbribed voters such that for every @xmath367 there is a voter in @xmath368 voting @xmath333 , then deleting these @xmath365 unbribed @xmath307 voters will not increase the surplus of any candidate ( since @xmath26 s score goes up by @xmath369 ) , while deleting any @xmath365 voters from @xmath308 will not decrease the surplus of any candidate .",
    "it follows that bribing the @xmath365 unbribed @xmath307 voters instead of @xmath365 @xmath308 voters will give a successful bribery , which contradicts the assumption of minimality .",
    "let @xmath370 be the number of unbribed @xmath307 voters . by the argument above",
    ", there is a candidate @xmath312 such that at least @xmath371 of these voters vote @xmath372 .",
    "note that if we delete such a voter , the surplus of all candidates other than @xmath312 does not increase .",
    "in addition , note that if we delete a @xmath308 voter , the surplus of none of the candidates decreases .",
    "after deletion of one of these unbribed @xmath307 voters that vote @xmath331 , the score of @xmath26 will be @xmath373 and the score of @xmath312 will be at most @xmath374 .",
    "we need @xmath375 .",
    "it is easy to see that this is true if we choose @xmath376      it follows that bribing one @xmath307 voter voting @xmath372 instead of bribing any @xmath308 voter is also a successful bribery , which contradicts the minimality of the number of @xmath308 voters that are bribed .",
    "consider an instance of the bribery problem .",
    "let @xmath22 be the set of candidates , let @xmath21 be the set of voters , let @xmath26 be the preferred candidate and let @xmath16 be the number of voters we can bribe .",
    "let @xmath378 .",
    "note that by claim  [ claim : few - v3 ] , there exists a successful bribery if and only if there exists a set @xmath379 and nonnegative integers @xmath380 and @xmath381 such that @xmath382 and @xmath383 and there exists a successful bribery that bribes @xmath380 @xmath306 voters , @xmath381 @xmath307 voters , and all voters in @xmath384 .",
    "we assume that every bribed voter puts @xmath26 first . without loss of generality , we assume that @xmath385 and that @xmath386 .      note that if there exists a successful bribery that bribes @xmath380 @xmath306 voters , @xmath381 @xmath307 voters , and all voters in @xmath390 , then for all @xmath4 , @xmath391 , there exist nonnegative integers @xmath51 ( the number of times @xmath53 is ranked next to last by a bribed voter ) , @xmath52 ( the number of times that @xmath53 is ranked last by a bribed voter ) , @xmath392 ( the number of bribed voters in @xmath388 ) , and @xmath393 ( the number of bribed voters in @xmath389 ) such that :          note that if there is a successful bribery that bribes @xmath380 @xmath306 voters , @xmath381 @xmath307 voters , and all voters in @xmath390 , then @xmath404 is true .",
    "we will now show that the converse is true as well : for @xmath405 , if @xmath404 is true then there exists a successful bribery that bribes @xmath380 @xmath306 voters , @xmath381 @xmath307 voters , and all voters in @xmath390 .          if @xmath418 , let @xmath365 be such that @xmath419 and we will bribe a @xmath420 voter .",
    "let @xmath421 and let @xmath422 .",
    "otherwise , @xmath423 and we let @xmath365 be such that @xmath424 and we will bribe a @xmath425 voter . let @xmath426 and let @xmath427 .",
    "let @xmath428 .",
    "note that @xmath429 .",
    "let @xmath430 be such that @xmath431 , @xmath70 , @xmath71 , and @xmath432 .",
    "let the bribed voter vote @xmath72 .",
    "subtract 1 from @xmath51 and @xmath73 and @xmath433 ( or @xmath434 ) and recompute the surpluses .",
    "it follows from the induction hypothesis that we can bribe @xmath380 @xmath306 voters , @xmath381 @xmath307 voters , and all voters in @xmath390 to make @xmath26 a winner .    to conclude the proof of theorem",
    "[ theorem : bribery zeroes -beta -alpha in ptime ] , we will now show , by dynamic programming , that @xmath58 is computable in polynomial time for unary @xmath435 .",
    "this is easy :    1 .",
    "@xmath436 is true if and only if @xmath437 .",
    "2 .   for @xmath81 , @xmath438 if and only if there exist natural numbers @xmath439 , and @xmath440 such that : 1",
    ".   @xmath85 , 2 .",
    "@xmath86 , 3 .",
    "@xmath87 , 4 .",
    "@xmath441 , 5 .",
    "@xmath442 , 6 .",
    "@xmath443 , and 7 .   @xmath444        [ [ proof - of - corollarycorollaryalpha-0-dots-0-beta - bribery - dichotomy ] ] proof of corollary  [ corollary : alpha 0 dots 0 beta bribery dichotomy ] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    this follows in a similar way as corollary  [ corollary : alpha 0 dots 0 beta ccdv dichotomy ] for ccdv : the polynomial - time result for the generator @xmath445 follows from theorem  [ theorem:100 - 1 bribery in ptime ] , the hardness results follow from modifications of the proofs of theorems  [ theorem : alpha 0 dots 0 alpha < beta ccdv ] and  [ theorem : alpha 0 dots 0 beta < alpha ccdv ] , which give hardness results for the corresponding ccdv - cases , as follows :    we use essentially the same reduction , except that we construct an instance @xmath446 of @xmath7-bribery instead of the @xmath7-ccdv instance @xmath447 constructed in the above proofs .",
    "@xmath446 uses the same budget @xmath16 for the controller as the instance @xmath447 . in the following",
    ", we will see bribery as deletion of voters followed by manipulation ( keeping in mind that bribery is not necessarily _ optimal _ ccdv followed by _",
    "manipulation ) .",
    "in particular , we will refer to the bribed votes ( i.e. , the votes the bribed voters cast after the bribery ) as _ manipulation votes_.      * without loss of generality , all manipulation votes place the preferred candidate @xmath26 in the first position .",
    "therefore , @xmath26 s final score is @xmath448 higher than in the ccdv setting , but still is a multiple of @xmath76 , and the value @xmath449 can be computed by the reduction .",
    "* the manipulation votes vote @xmath16 ( not necessarily distinct ) candidates in the position giving @xmath161 points .",
    "we say that the votes _ veto _ these candidates . in order to handle this additional strategic freedom of the controller",
    ", we proceed as follows : * * we add additional candidates @xmath450 , who each need to lose @xmath74 points against @xmath26 in order to not beat @xmath26 .",
    "* * the scores of @xmath450 are set using the same `` setup - vote '' strategy as used in the proofs of theorems  [ theorem : alpha 0 dots 0 alpha < beta ccdv ] and  [ theorem : alpha 0 dots 0 beta < alpha ccdv ] above .",
    "* * we show that , in order to make @xmath26 win the election , the controller must use at least one veto for each of the candidates @xmath450 . to see this , recall that each of these candidates must lose @xmath74 points against @xmath26 .",
    "if no veto is used for some @xmath451 , then @xmath451 needs to lose these points via deleting a vote of the form @xmath452 .",
    "as shown in the proofs of the ccdv results , this causes a `` chain reaction '' of additional removals which requires more removals than allowed by the budget @xmath16 , we have a contradiction .",
    "therefore , at least one veto must be used to ensure that @xmath451 does not beat @xmath26 . * * since at least one veto must be used for each @xmath451 , we can without loss of generality assume that the controller uses one veto for each @xmath451 and no deletions , since this suffices to ensure that @xmath451 does not beat @xmath26 .",
    "* * therefore , we know that the manipulation votes vote @xmath453 , @xmath454 ,  , @xmath455 , and the remainder of each proof is identical to the respective ccdv case  with a value @xmath449 increased by @xmath16 in comparison with the ccdv case , as explained above .      [ [ proof - of - theoremtheorem0-minus - alpha5-minus - alpha1-dots - minus - alpha1-bribery - hardness ] ] proof of theorem  [ theorem:0 minus alpha5 minus alpha1 dots minus alpha1 bribery hardness ] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    in this case , the proof is an easy addition modification to the proof of theorem  [ theorem:0 minus alpha5 minus alpha1 dots minus alpha1 ccdv hardness ] .",
    "without loss of generality , we assume that @xmath203 . clearly , all manipulation votes will be of the form      for the preferred candidate @xmath26 and a dummy candidate @xmath170 ( recall that the proof of theorem  [ theorem:0 minus alpha5 minus alpha1 dots minus alpha1 ccdv hardness ] introduces dummy candidates that can never win the election , we reuse these candidates here ) .",
    "since the controller s budget is @xmath457 , @xmath26 will gain @xmath458 points against every relevant candidate from the manipulation votes .",
    "it therefore suffices to let all other relevant candidates gain @xmath458 additional points using the setup mechanism described in the proof of theorem  [ theorem:0 minus alpha5 minus alpha1 dots minus alpha1 ccdv hardness ] .",
    "[ [ proof - of - theoremtheorembribery - hardness - alpha1-alpha2 - 0-dots-0-minus - alpha4-minus - alpha5-minus - alpha6 ] ] proof of theorem  [ theorem : bribery hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    we follow the recipe from section  [ sect : bribery hardness from ccdv hardness ] to obtain the result from the hardness result for ccdv proved in theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] . as in the proof of that theorem ,",
    "we write @xmath7 as @xmath204 with @xmath205 and @xmath206 . applying the recipe",
    "requires the following :    * the reduction from 3 dm uses the same transformation as above , i.e. , for a triple @xmath269 , we generate a 3 dm vote @xmath459 . * clearly , all manipulators will vote @xmath460 , where @xmath294 is a dummy candidate and @xmath461 and",
    "@xmath462 are relevant candidates . * therefore , @xmath26 gains @xmath463 points ( where @xmath135 is the set from the 3 dm instance , recall that @xmath224 is the controller s budget in the reduction from theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] , it will also be her budget in the current proof ) , and the relevant candidates lose @xmath464 points .",
    "* we therefore increase the points of each candidate in @xmath248 by @xmath463 , compared to the reduction from theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] .",
    "* additionally , we introduce two candidates @xmath465 and @xmath466 , such that @xmath467 .",
    "the intention is that these candidates tie with @xmath26 if they are voted in the last two positions in all manipulator votes .      * the precise required points of all candidates ( as always , relative to @xmath26 )",
    "are as follows : * * @xmath468 , so each @xmath235 must lose exactly @xmath175 points to tie with @xmath26 ( recall that @xmath26 gains @xmath463 points from the manipulation votes ) , * * @xmath469 , so each @xmath236 may gain exactly @xmath233 points from the deletion of one tuple in which @xmath170 is voted in the second to last position , * * @xmath470 , so each @xmath170 may gain exactly @xmath233 points from the deletion of one tuple in which @xmath170 is voted last , * * @xmath467 for @xmath471 .    the proof of the ccdv result ( theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] ) relies on the fact that each @xmath235 can only lose points relative to @xmath26 by removing 3 dm votes . in order to keep this feature in our current bribery setting , we need to ensure that @xmath465 and @xmath466 are voted in the last two positions of every manipulation vote , so that no candidate @xmath235 can lose points by being voted in one of the last two positions in a manipulation vote",
    ". therefore , there are two main issues to handle :    1 .",
    "we need to ensure that each @xmath215 gain sufficiently many points from the 3 dm votes , namely @xmath463 points more than in the ccdv reduction , 2 .",
    "we must ensure that @xmath472 gains enough points from votes that the controller can not delete .",
    "for the first issue , we use the following idea : using proposition  [ prop : f3 dm np complete ] , we first transform the given 3dm - instance into an @xmath473 - 3 dm instance , with a suitably chosen @xmath473 ( see below ) . recall that in @xmath473 - 3 dm , the size of the desired cover is still @xmath224 , which is the budget of the controller in theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] , and which will also be her budget in the current proof .",
    "the only relevant difference is that each @xmath154 now appears in exactly @xmath474 tuples from @xmath58 .",
    "this results in the following scores from the 3 dm votes :      by choosing @xmath473 sufficiently large enough , and adding votes @xmath478 for dummy candidates @xmath479 , we can ensure that the score of each @xmath235 is exactly the desired number @xmath480 .",
    "( recall that using proposition  [ prop : f3 dm np complete ] , we can transform a 3dm - instance into an @xmath473 - 3 dm instance when @xmath473 is given in unary . ) as in the proof of theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] , we can adjust the points of candidates in @xmath135 and @xmath136 using votes that have @xmath235 and @xmath26 both in the @xmath164-point segment of the votes , and which therefore will not be removed by the controller .      * a single vote @xmath481 , where @xmath294 stands for arbitrary dummy candidates never used again , * @xmath482 , with @xmath294 as above , of these votes we add enough to ensure that @xmath123 does not beat @xmath26 , but can not gain @xmath233 points without beating @xmath26 .",
    "( if adding these votes lets @xmath123 gain too many points , we use additional votes having dummy candidates in the @xmath483 and @xmath231 positions , and with @xmath125 in the @xmath229 position , clearly these votes will not be removed by the controller . )",
    "we now argue that the only way for the controller to remove points from @xmath472 is by voting them in the last two positions of every manipulation vote , which then implies that the candidates from @xmath137 must lose their points by removals of 3 dm votes as in the proof of theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] . for this",
    ", we denote the set @xmath484 with @xmath103 .",
    "these are the candidates that need to lose points against @xmath26 .",
    "note that none of the votes we introduce have any candidate from @xmath103 in the @xmath485 position .",
    "therefore , by bribing @xmath224 voters , the candidates in the set @xmath103 can only lose points ( as always , relative to @xmath26 ) as follows :    * each of the @xmath224 many removed votes lets the set @xmath103 lose at most @xmath175 points , hence from the removal , these candidates ( combined ) lose at most @xmath463 points . *",
    "each of the @xmath224 many manipulation votes lets the set @xmath103 lose at most @xmath486 points , since @xmath26 gains @xmath175 points against each of the @xmath487 candidates in @xmath103 , and additionally the candidates in the last two positions lose @xmath231 and @xmath233 points , respectively .",
    "therefore , the manipulation votes let @xmath103 lose at most @xmath488 points against @xmath26",
    ".      initially , each @xmath215 must lose @xmath480 points , and @xmath472 must lose @xmath493 points .",
    "since there are @xmath224 many candidates @xmath235 , this means that the group @xmath103 must lose @xmath494 points .",
    "since the two values are equal , every possible loss of a point in the bribery action must be used for the set @xmath103 .",
    "now assume that @xmath472 loses a point by deleting a vote ( as opposed to the intention , i.e. , losing points only by manipulation ) .",
    "then , a vote of the form @xmath481 is deleted .",
    "however , this means that the candidate @xmath123 gains too many points , and hence @xmath123 must lose points using a delete or manipulation action .",
    "this is a contradiction , since we just showed that only candidates in @xmath103 may lose points ( relative to @xmath26 ) using the bribery action .",
    "we therefore know that , in fact , only 3 dm votes are removed .",
    "this concludes the proof .",
    "this proof is obtained from the proof of theorem  [ theorem : ccdv alpha1alpha2>alpha3>alpha6 ] similarly to the way the proof of theorem  [ theorem : bribery hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] is obtained from that of theorem  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] .      as in the proof of  [ theorem : bribery hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] , following the recipe from section  [ sect : bribery hardness from ccdv hardness ] , we again need to increase the scores of each @xmath154 by @xmath495 , and we introduce a candidate @xmath496 who will be voted last in every manipulation vote .    as in the proof of theorem  [ theorem : ccdv alpha1alpha2>alpha3>alpha6 ] , setting up the scores is easier , since the 3dm - votes are more attractive to delete , as deleting them `` hurts '' two candidates instead of just one as in the proofs of theorems  [ theorem : bribery hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] and  [ theorem : ccdv hardness alpha1 alpha2 0 dots 0 minus alpha4 minus alpha5 minus alpha6 ] :    * we can simply use setup votes that only have one relevant candidate in one of the non - zero positions , and fill the other two with dummy candidates , * this allows us to increase the points of all candidates in @xmath248 by @xmath495 and add a candidate @xmath496 with @xmath497 points , * then , by the same capacity argument as in theorem  [ theorem : ccdv alpha1alpha2>alpha3>alpha6 ] , only votes with two relevant candidates ( i.e. , from @xmath498 ) are deleted , hence the candidate @xmath496 is voted last in every manipulation vote .      [ [ proof - of - theoremtheorembribery - hardness - alpha1-alpha-3-alpha-4 ] ] proof of theorem  [ theorem : bribery hardness alpha1 > alpha 3 > alpha 4 ] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      * clearly , @xmath26 will be voted first in every manipulation vote . since the construction will enforce that only 3 dm votes will be deleted ( each of which lets @xmath26 get @xmath271 points ) , this means that @xmath26 will gain @xmath279 points from a bribery action . * as a consequence , we need to increase the points of each candidate by @xmath279 . *",
    "additionally , we introduce candidates @xmath499 and @xmath465 , where for @xmath500 , @xmath472 must lose @xmath501 points from the manipulation votes .",
    "* we additionally increase the points of @xmath268 by @xmath502 .",
    "this implies that , in a successful bribery : 1 .   only vote giving @xmath175 points to @xmath268 first",
    "can be deleted , and 2 .",
    "@xmath268 must be voted in a position awarding @xmath233 points in every manipulation vote .",
    "therefore , as long as we only use setup votes that give less than @xmath175 points to @xmath268 , we know that these votes will not be deleted . since @xmath499 and @xmath465 are in the @xmath271-segment of the 3 dm votes , @xmath499 and @xmath465 will not lose points from the delete action , and therefore , all positions giving fewer than @xmath271 points in the manipulation votes will be filled with candidates @xmath268 , @xmath499 , and @xmath465 .",
    "it therefore remains to show how we can increase the relative points of @xmath268 sufficiently .",
    "lowering the relative points of @xmath268 to the exact required amount and adjusting the points of the remaining candidates can be done as usual ( see , e.g. , the proof of theorem  [ theorem : bribery hardness alpha1 > alpha 3 > alpha 4 ] ) , note that we do not need votes that give @xmath175 points to @xmath268 for this .    to increase the points of @xmath268 , we simply transform the given 3 dm instance into an @xmath473 - 3 dm instance for a suitably chosen @xmath473 with an application of proposition  [ prop : f3 dm np complete ] .",
    "this increases the relative points of @xmath268 gained by the 3 dm votes to @xmath503 .",
    "since we need to increase @xmath268 s score by @xmath504 , choosing @xmath505 suffices .",
    "clearly , it suffices to consider the case where @xmath506 , and the value @xmath507 satisfies the condition .",
    "we can also assume , without loss of generality , that @xmath1 is large enough such that @xmath14 uses at least three different coefficients .",
    "we let @xmath508 . for each @xmath154 , let @xmath509 denote the unique index @xmath510 with @xmath511 .",
    "we choose a value @xmath117 such that @xmath512 and @xmath513 .",
    "we first prove that such an @xmath117 exists , a matching one then can be found in polynomial time since @xmath7 is polynomial - time uniform .    for this",
    ", we first choose @xmath170 as the number of sequential blocks of length @xmath514 starting at position @xmath158 , such that the last block ends before the position @xmath515 , i.e. , @xmath516 .",
    "we now choose @xmath117 as the start of the block with the minimal difference between the coefficient at position @xmath117 and the coefficient at position @xmath517 , i.e. , we choose @xmath518 such that @xmath519 , and @xmath520 is minimal . then , since between position @xmath158 and position @xmath515 , we have at least @xmath170 of these blocks , the difference between @xmath521 and @xmath522 is at least @xmath170 times the difference inside the block starting at position @xmath117 , i.e. ,      note that the left - hand side of this inequality is in fact strictly positive , since we know that @xmath524 , and @xmath525 , as @xmath526 , @xmath144 , and @xmath527 . to obtain the required inequality @xmath513",
    ", it therefore suffices to show that @xmath528 .",
    "for this , note that by choice of @xmath507 and since @xmath526 , and @xmath529 , we have that          the candidate set is @xmath531 , where @xmath26 is the preferred candidate , @xmath268 is a set of @xmath532 blocking candidates , and @xmath104 is a set of @xmath117 dummy candidates .",
    "let @xmath533 .",
    "note that by construction , the number of candidates is exactly @xmath1 as required , and also @xmath534 , @xmath535 . without loss of generality ,",
    "we assume that @xmath536 .        where @xmath212 contains the remaining blocking candidates and all dummy candidates , and @xmath538 contains each @xmath539 in the @xmath509-th position , with dummy candidates taking the positions of @xmath170 , @xmath236 , and @xmath235 .",
    "let @xmath540 denote the position in which @xmath37 is positioned if @xmath37 is among the first @xmath158 .",
    "( i.e. , @xmath37 gains @xmath541 points from the votes introduced for a tuple containing @xmath37 , and @xmath542 from the remaining 3 dm votes . ) for a candidate @xmath543 with @xmath544 , let @xmath545 denote the position of @xmath318 in the 3 dm votes ( i.e. , @xmath318 gets @xmath546 points from each of these votes ) .",
    "we now show that the 3 dm instance is positive if and only if @xmath26 can be made a winner in the @xmath7-election with bribing at most @xmath16 voters , assuming that the above scores can be realized by additional setup votes that will never be deleted by the controller .",
    "* @xmath26 is voted last in every deleted voter and voted first in every manipulation voter , @xmath26 gains @xmath555 points , therefore @xmath556 points . * since @xmath22 is a cover , for each @xmath37 , one vote featuring @xmath37 and @xmath557 votes not featuring @xmath37 are removed .",
    "therefore , @xmath37 loses @xmath558 points from the delete action . since @xmath37 is voted in position @xmath559 in each of the manipulation votes , @xmath37 gains @xmath560 points from the manipulation votes .",
    "the final score of @xmath37 is therefore @xmath561 , hence @xmath37 ties with @xmath26 * @xmath562 loses @xmath563 points with each of the @xmath16 deletions , and receives @xmath164 points from the manipulation votes .",
    "therefore , @xmath562 s final score is @xmath555 , also tieing with @xmath26 . * for @xmath564",
    ", @xmath565 loses @xmath546 points from each deletion , and gains @xmath566 points from each manipulation vote .",
    "therefore , the final score of @xmath318 is @xmath567 points , hence @xmath318 also ties with @xmath26 .    for the other direction , assume that @xmath26 can be made a winner by bribing at most @xmath16 of the 3 dm votes .",
    "clearly , every bribed voter will vote @xmath26 first after the bribery , therefore , @xmath26 s final score is @xmath555 .",
    "since @xmath562 may not beat @xmath26 , it follows that @xmath562 must gain @xmath164 points from the manipulation votes .",
    "it also follows that there are exactly @xmath16 bribed voters , since @xmath562 must lose @xmath555 points in order not to beat @xmath26 .",
    "similarly , in order not to beat @xmath26 , each @xmath451 for @xmath550 may only gain @xmath568 points from the manipulation votes .",
    "therefore ( allowing for swaps between the @xmath451 candidates that cancel each other out , and exchanging positions corresponding to coefficients with the same value ) , we can without loss of generality assume that the manipulation votes vote candidate @xmath451 in position @xmath569 .",
    "therefore , the last @xmath570 many positions in all manipulation votes are taken by candidates from @xmath268 , and thus , in each of these votes , each candidate @xmath37 gains at least @xmath571 points . since @xmath572",
    ", this means that each @xmath37 gains at least @xmath573 points in each manipulation votes .",
    "let @xmath22 be the set of all tuples @xmath269 such that the vote corresponding to @xmath269 is deleted .",
    "we claim that @xmath22 is a cover . by the above , we know that @xmath551 .",
    "now assume that there is some @xmath154 that is not covered by @xmath22 .",
    "then , @xmath37 is voted in position @xmath542 in each of the removed votes , and hence loses @xmath574 from the deletion of votes . due to the above , we know that @xmath37 gains at least @xmath575 points from each manipulation vote .",
    "therefore , @xmath37 s final score is at least      since @xmath513 , this value exceeds @xmath555 , which is the final score of @xmath26 .",
    "therefore , @xmath37 beats the preferred candidate @xmath26 , and hence the bribery action is not successful , we have a contradiction .",
    "it remains to show that we can add setup vote ensuring that the relative points are as above , and that will never be deleted by the controller .",
    "note that the candidate @xmath562 initially beats @xmath26 with a headstart of @xmath577 points . in the manipulation votes",
    ", @xmath26 can gain at most @xmath555 points against @xmath562 ( by voting @xmath26 first and @xmath562 last in all of the votes ) .",
    "therefore , @xmath562 must lose @xmath555 points from the delete actions , and @xmath26 may not lose any points from the delete actions . in other words ,",
    "each of the @xmath16 deleted votes must give @xmath563 points to @xmath562 , and @xmath164 points to @xmath26 .",
    "therefore , it suffices to construct setup votes that result in the above points , and which never have , _ at the same time _",
    ", @xmath26 in a position giving @xmath164 points and @xmath562 in a position giving @xmath563 points .      *",
    "if , in the lemma , the score of @xmath562 is raised by @xmath563 ( relative to @xmath26 ) , then we simply repeat one of the 3 dm votes , which also has the desired effect .",
    "( note that the controller can never delete two copies of the same 3 dm vote , as then she will not be able to construct a cover , which is required as seen above ) .",
    "the side - effect for the other candidates can then be undone by modifying their reletive points ( compared to @xmath26 ) . *",
    "if , in the lemma , the score of some other candidate is changed ( relative to @xmath26 ) , we proceed as follows : we choose @xmath578 as the vote @xmath579 .",
    "then : * * since @xmath7 uses at least @xmath94 coefficients for @xmath1 candidates , we know that via rotation of @xmath578 , we never produce a vote that gives @xmath563 points to @xmath562 and @xmath164 points to @xmath26 . * * since we are not increasing the score of @xmath562 by @xmath563 , we never perform a swap that lets @xmath26 get @xmath164 points and @xmath562 get @xmath563 points .",
    "the proof is obtained from the proof of the ccdv version ( theorem  [ theorem : veto generalization ] ) in a similar way as the proof of theorem  [ theorem : approval generalization bribery ] is obtained from its ccdv version , theorem  [ theorem : approval generalization ccdv ] .",
    "now let a 3dm - instance @xmath134 be given ; let @xmath526 be the number of candidates , let @xmath144 .",
    "we write @xmath248 as @xmath580 , and for @xmath154 , with @xmath509 we denote the unique index @xmath4 with @xmath581 , and @xmath540 is @xmath90 , @xmath97 , or @xmath94 , depending on whether @xmath227 , @xmath226 or @xmath225 .",
    "we first choose an @xmath582 such that @xmath583 and @xmath584 , where @xmath585 .",
    "we show that such an @xmath117 exists , the value then can be found in polynomial time since @xmath7 is polynomial - time uniform .",
    "we proceed in a similar way as in the proof of theorem  [ theorem : approval generalization bribery ] :    let @xmath170 be the number of sequential blocks of length @xmath514 that start after position @xmath90 , such that after the start of the last block , there are still at least @xmath586 positions left , i.e. , @xmath587 . now choose @xmath117 of the form @xmath588 with @xmath589 such that @xmath590 is minimal .",
    "then , @xmath591 .",
    "we first show that the left - hand side of this inequality is strictly positive .",
    "since @xmath592 , it suffices to show that @xmath593 , i.e. , @xmath594 ( recall that @xmath526 ) .",
    "this follows easily since @xmath595 . to show the required inequality",
    ", it now suffices to show that @xmath528 .",
    "we obtain this as follows :            * the set of candidates is @xmath598 , where @xmath268 is a set of @xmath570 blocking candidates and @xmath104 a set of dummy candidates such that the total number of candidates is @xmath599 , * the preferred candidate is @xmath26 , * for each @xmath209 , we introduce a vote @xmath600 , where @xmath538 , * we introduce additional setup votes ( see below ) ensuring that the relative points of the candidates are as follows : * * @xmath213 , * * @xmath601 , * * @xmath602 for @xmath550 * * @xmath603 .    in a similar way as in the proof of theorem  [ theorem : approval generalization bribery ] , we can show that @xmath26 can be made a winner of the election by bribing at most @xmath16 of the above - introduced voters",
    "if and only if the 3 dm instance is positive . in particular , the controller needs to bribe exactly @xmath16 voters , since @xmath562 must lose @xmath555 points , and @xmath26 must win @xmath555 points .",
    "the controller can make @xmath26 win the election by bribing the votes corresponding to a cover , and then letting every bribed voter vote      now assume that the controller can make @xmath26 win the election by bribing at most @xmath16 ( and hence , without loss of generality , with exactly @xmath16 ) voters . with the same mechanism as used in the proof of theorem  [ theorem : approval generalization bribery ] , we know that the candidates @xmath605 must occupy the last @xmath570 positions in every manipulator vote .",
    "therefore , each candidate @xmath154 obtains at least @xmath575 points from the @xmath16 manipulator votes .",
    "now assume that the bribed voters do not correspond to a cover .",
    "since @xmath16 voters are bribed , then there is some candidate @xmath37 such that at least two votes voting @xmath37 in one of the last four positions are deleted .",
    "therefore , @xmath37 loses at most @xmath606 points from the delete action , and gains at least @xmath575 points from the manipulation votes .",
    "it remains to show how to construct the setup votes to ensure that the scores are as above .",
    "this can be done with the exact same mechanism as in the proof of theorem  [ theorem : approval generalization bribery ] .",
    "[ [ proof - of - theoremtheorembribery - fixed - coefficients - additional - case ] ] proof of theorem  [ theorem : bribery fixed coefficients additional case ] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    as discussed above , compared to ccdv , we need an additional case to cover all `` many coefficients''-cases of the bribery problem , the above - stated theorem  [ theorem : bribery fixed coefficients additional case ] .",
    "we now prove this result .",
    "we write @xmath7 as @xmath609 for @xmath610 and @xmath611 .",
    "we reduce from 3 dm as follows : let @xmath134 be given . again , for @xmath154 , we define @xmath540 as @xmath90 , @xmath97 , or @xmath94 , depending on whether @xmath227 , @xmath226 , or @xmath225 .",
    "we construct an instance of @xmath7-bribery as follows :    * the set of candidates is @xmath612 for a sufficiently large set @xmath104 of dummy candidates . * for each @xmath269 we add a vote @xmath613 for dummy candidates @xmath123 and @xmath125 . *",
    "the preferred candidate is @xmath26 , the controller s budget is @xmath224 .",
    "* we additionally add setup votes to ensure the following relative scores : * * @xmath614 , * * @xmath615 , * * @xmath616 , * * the score of the dummy candidates is so low that they can not win the election .",
    "if the 3 dm instance is positive , then the controller can remove the @xmath224 many votes corresponding to the cover , and let all bribed voters vote @xmath617 , this lets @xmath26 gain @xmath618 points , each @xmath37 loses @xmath281 points , and each @xmath451 loses @xmath619 points , hence all candidates tie and @xmath26 wins the election .    for the other direction ,",
    "if the controller can bribe at most @xmath16 votes of the above to ensure that @xmath26 wins the election , then @xmath26 has at most @xmath164 points after the bribery . by construction",
    ", the candidates @xmath562 , @xmath620 , and @xmath621 must occupy the last @xmath94 positions in each manipulation vote , therefore no @xmath154 can lose points from the manipulation votes .",
    "therefore , the removed votes must form a cover of @xmath248 to ensure that each @xmath154 loses @xmath281 points and thus ties with @xmath26 .",
    "it remains to show how to construct the corresponding setup votes .",
    "this follows in the same way as in the proof of theorem  [ theorem : approval generalization ccdv ] : we add enough dummy candidates such that in the votes resulting from the application of the construction lemma , at most @xmath97 of the first @xmath94 positions are filled with relevant candidates .",
    "since the points are `` tight , '' this means that the controller can not afford to remove a vote not introduced for a 3dm - tuple as above .",
    "since @xmath7 only uses two coefficients , we can without loss of generality assume that for each @xmath1 , @xmath14 is of the form @xmath622 for some functions @xmath623 .",
    "note that @xmath624 . since @xmath7 is a pure generator ,",
    "the functions @xmath312 and @xmath318 are monotone . since @xmath625 , we know that for sufficiently large @xmath1 , we have that @xmath626 and @xmath627 . if @xmath628 for all @xmath1 , then , for sufficiently large @xmath1 , @xmath7 is @xmath94-approval , analogously if @xmath629 for all @xmath1 then @xmath7 is ultimately equivalent to @xmath158-veto . in both cases ,",
    "@xmath28-hardness of @xmath7-bribery follows from theorem  [ theorem : lin bribery results list ] .",
    "therefore , we can assume that , for sufficiently large @xmath1 , @xmath630 and @xmath631 .",
    "we reduce from 3 dm as follows .",
    "let @xmath134 be a 3dm - instance , let @xmath144 .",
    "we use the candidate set @xmath632 , i.e. , the number of candidates is @xmath633 , where @xmath104 is a set of @xmath634 dummy candidates , i.e. , @xmath635 . without loss of generality , we assume @xmath630 and @xmath631 .",
    "we make a case distinction .",
    "first consider the case that @xmath636 . in this case",
    ", we treat the generator as a variant of approval , since there are enough `` bad positions '' in the vote to place `` most of the candidates . ''",
    "we set up the election as follows :    * for each @xmath209 , we introduce a vote @xmath637 ; again , we call these votes 3dm - votes .",
    "* we set up the points such that , relative to @xmath26 , * * @xmath213 , * * @xmath638 , * * @xmath639 for each @xmath154 , * * the dummy candidates do not have enough points to win the election , * * the controller s budget is @xmath16 .",
    "if the instance is positive , then the controller can bribe a set of voters corresponding to a cover , and let each manipulator vote @xmath640 .",
    "then @xmath26 gains @xmath16 points , @xmath562 loses @xmath16 points , and each @xmath154 loses @xmath90 points , hence all non - dummy candidates tie and @xmath26 wins the election .",
    "the setup votes can easily be constructed by repeating 3 dm votes to lower the score of @xmath26 relative to other candidates , and then using votes having @xmath26 as the first candidate and the remaining candidates in a suitable order to adjust their score .",
    "clearly , only ( copies of ) the 3 dm votes will be deleted , since @xmath26 is optimally positioned in the other votes .",
    "* for each @xmath209 , we introduce a vote @xmath643 , again these votes are called 3 dm votes .",
    "note that the candidates @xmath644 each get @xmath90 point from each 3 dm vote .",
    "* let @xmath644 be the first @xmath645 dummy candidates ( these exist , since @xmath641 ) , * we set up the points such that , relative to @xmath26 , * * @xmath213 , * * @xmath646 for each @xmath154 , * * @xmath647 for each @xmath648 , * * the remaining dummy candidates do not have enough points to win the election , * * the controller s budget is @xmath16 .        * @xmath26 gains @xmath16 points , and has @xmath16 points in the end , * each @xmath154 loses @xmath650 point from the delete action and gains @xmath16 points from the manipulation votes , and thus ties with @xmath26 , * each @xmath119 for @xmath648 loses @xmath16 points and hence ties with @xmath26 .",
    "therefore , @xmath26 wins the election . for",
    "the other direction , note that with deleting @xmath16 3 dm votes , the candidates @xmath451 for @xmath648 still have @xmath16 points each , and thus must be places in the @xmath164-point segment of the manipulation votes , in particular , each @xmath154 gets @xmath16 points from the manipulation votes .",
    "now assume that the deleted votes to not correspond to a cover . since @xmath16 votes must be deleted to ensure that @xmath562 does not beat @xmath26 , this means that there is some @xmath154 such that two votes not giving any point to @xmath37 are removed .",
    "therefore , @xmath37 loses only at most @xmath651 points in the delete action , and thus ( since @xmath37 also gains @xmath16 points from the manipulation votes ) ends with @xmath652 points , beating @xmath37 .",
    "this is a contradiction .",
    "if @xmath7 only uses two coefficients , then the claim follows from theorem  [ theorem : two coefficients case bribery ] .",
    "therefore , assume that @xmath7 uses at least three coefficients for the remainder of the proof .",
    "we reduce from 3 dm . hence , let a 3dm - instance @xmath134 be given .",
    "we apply proposition  [ prop : f3 dm np complete ] to ensure that @xmath595 and @xmath527 .",
    "let @xmath526 .",
    "without loss of generality , assume that @xmath1 is large enough such that @xmath14 uses @xmath94 different coefficients , and such that @xmath654 ( note that when this inequality is true for any @xmath1 , it remains true for all larger @xmath1 ) .",
    "otherwise , we have that @xmath656 . since @xmath657 , this implies @xmath658 , and @xmath7 is of the form @xmath659 with @xmath660 .",
    "therefore , the result follows from theorem  theorem : bribery fixed coefficients additional case ."
  ],
  "abstract_text": [
    "<S> scoring systems are an extremely important class of election systems . </S>",
    "<S> we study the complexity of manipulation , constructive control by deleting voters ( ccdv ) , and bribery for scoring systems . for manipulation , we show that for all scoring rules with a constant number of different coefficients , manipulation is in p. and we conjecture that there is no dichotomy theorem .    </S>",
    "<S> on the other hand , we obtain dichotomy theorems for ccdv and bribery problem . </S>",
    "<S> more precisely , we show that both of these problems are easy for 1-approval , 2-approval , 1-veto , 2-veto , 3-veto , generalized 2-veto , and @xmath0 , and hard in all other cases . </S>",
    "<S> these results are the `` dual '' of the dichotomy theorem for the constructive control by adding voters ( ccav ) problem from  @xcite , but do not at all follow from that result . in particular , proving hardness for ccdv is harder than for ccav since we do not have control over what the controller can delete , and proving easiness for bribery tends to be harder than for control , since bribery can be viewed as control followed by manipulation . </S>"
  ]
}