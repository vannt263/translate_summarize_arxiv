{
  "article_text": [
    "a cycle cover of a graph is a spanning subgraph that consists solely of cycles such that every vertex is part of exactly one cycle .",
    "cycle covers play an important role in the design of approximation algorithms for the traveling salesman problem  @xcite , the shortest common superstring problem  @xcite , and vehicle routing problems  @xcite .",
    "in contrast to hamiltonian cycles , which are special cases of cycle covers , cycle covers of maximum weight can be computed efficiently .",
    "this is exploited in the aforementioned approximation algorithms , which usually start by computing an initial cycle cover and then join cycles to obtain a hamiltonian cycle .",
    "this technique is called _ subtour patching _  @xcite .",
    "short cycles in a cycle cover limit the approximation ratios achieved by such algorithms .",
    "in general , the longer the cycles in the initial cover , the better the approximation ratio .",
    "thus , we are interested in computing cycle covers that do not contain short cycles .",
    "moreover , there are approximation algorithms that perform particularly well if the cycle covers computed do not contain cycles of odd length  @xcite . finally , some vehicle routing problems  @xcite require covering vertices with cycles of bounded length .",
    "therefore , we consider _ restricted cycle covers _ , where cycles of certain lengths are ruled out a priori : for @xmath3 , an _",
    "@xmath0-cycle cover _ is a cycle cover in which the length of each cycle is in @xmath0 . to fathom the possibility of designing approximation algorithms based on computing cycle covers",
    ", we aim to characterize the sets @xmath0 for which @xmath0-cycle covers of maximum weight can be computed , or at least well approximated , efficiently .    beyond being a basic tool for approximation algorithms , cycle covers are interesting in their own right . matching theory and graph factorization",
    "are important topics in graph theory .",
    "the classical matching problem is the problem of finding one - factors , , spanning subgraphs each vertex of which is incident to exactly one edge .",
    "cycle covers of undirected graphs are also known as two - factors because every vertex is incident to exactly two edges .",
    "a considerable amount of research has been done on structural properties of graph factors and on the complexity of finding graph factors ( cf .",
    "lovsz and plummer  @xcite and schrijver  @xcite ) .",
    "in particular , the complexity of finding restricted two - factors , , @xmath0-cycle covers in undirected graphs , has been investigated , and hell et al .",
    "@xcite showed that finding @xmath0-cycle covers in undirected graphs is -hard for almost all @xmath0 .",
    "however , almost nothing is known so far about the complexity of finding directed @xmath0-cycle covers .",
    "let @xmath4 be a graph with vertex set @xmath5 and edge set @xmath6 . if @xmath7 is undirected , then a of @xmath7 is a subset @xmath8 of the edges of @xmath7 such that all vertices in @xmath5 are incident to exactly two edges in @xmath9 .",
    "if @xmath7 is a directed graph , then a cycle cover of @xmath7 is a subset @xmath8 such that all vertices are incident to exactly one incoming and one outgoing edge in @xmath9 .",
    "thus , the graph @xmath10 consists solely of vertex - disjoint cycles .",
    "the length of a cycle is the number of edges it consists of .",
    "since we do not allow self - loops or multiple edges , the shortest cycles of undirected and directed graphs are of length three and two , respectively .",
    "we call a cycle of length @xmath11 a @xmath11-cycle for short . cycles of even or odd length will simply be called even or odd cycles , respectively .    an of an undirected graph is a cycle cover in which the length of every cycle is in @xmath12",
    ". an @xmath0-cycle cover of a directed graph is analogously defined except that @xmath13 .",
    "a is a @xmath14-cycle cover . in the following ,",
    "let @xmath15 in the case of undirected graphs and @xmath16 in the case of directed graphs ( whether we consider undirected or directed cycle covers will be clear from the context ) .",
    "given edge weights @xmath17 , the of a subset @xmath8 of the edges of @xmath7 is @xmath18 . in particular , this defines the weight of a cycle cover since we view cycle covers as sets of edges .",
    "let @xmath19 be any subset of the vertices of @xmath7 .",
    "the are all edges of @xmath7 that have both vertices in @xmath20 .",
    "we denote by the sum of the weights of all internal edges of @xmath20 that are also contained in @xmath9 .",
    "the are all edges of @xmath7 with exactly one vertex in @xmath20 .    for @xmath21 ,",
    "is the decision problem whether an undirected graph contains an @xmath0-cycle cover as spanning subgraph .    is the following optimization problem : given an undirected complete graph with edge weights zero and one , find an @xmath0-cycle cover of maximum weight .",
    "we can also consider the graph as being not complete and without edge weights .",
    "then we try to find an @xmath0-cycle cover with a minimum number of `` non - edges '' ( `` non - edges '' correspond to weight zero edges , edges to weight one edges ) , , the @xmath0-cycle cover should contain as many edges as possible .",
    "thus , l generalizes l.    is the problem of finding @xmath0-cycle covers of maximum weight in graphs with arbitrary non - negative edge weights .    for @xmath22 , , , and are defined like l , l , and l except that @xmath23-cycle covers rather than @xmath0-cycle covers are sought .",
    "the problems , , and as well as , , and are defined for directed graphs like their undirected counterparts except that @xmath24 and @xmath25 .",
    "an instance of is an undirected @xmath11-regular graph @xmath26 , , every vertex in @xmath27 is incident to exactly @xmath11 edges .",
    "a vertex cover of @xmath28 is a subset @xmath29 such that at least one vertex of every edge in @xmath30 is in @xmath31 .",
    "the aim is to find a subset @xmath29 of minimum cardinality .",
    "is -complete for @xmath32 as follows from results by alimonti and kann  @xcite as well as chlebk and chlebkov  @xcite .",
    "an instance of ( exact cover by @xmath11-sets ) is a tuple @xmath33 where @xmath27 is a finite set and @xmath30 is a collection of subsets of @xmath27 , each of cardinality @xmath11 . the question is whether there exists a sub - collection @xmath34 such that for every @xmath35 there is a unique @xmath36 with @xmath37 . for @xmath32 ,  is -complete  ( * ? ? ?",
    "* sp2 ) .",
    "let @xmath38 be an optimization problem , and let @xmath39 be its set of instances .",
    "for an instance @xmath40 , let @xmath41 denote the weight of an optimum solution .",
    "we say that @xmath38 can be approximated with an approximation ratio of @xmath42 if there exist a polynomial - time algorithm that , for every instance @xmath40 , computes a solution @xmath43 of @xmath27 whose weight @xmath44 is at most a factor of @xmath45 away from @xmath41 .",
    "this means that @xmath46 if @xmath38 is a minimization problem and @xmath47 if @xmath38 is a maximization problem  ( * ? ? ?",
    "* definition  3.6 ) .      , and thus and , can be solved in polynomial time via tutte s reduction to the classical perfect matching problem  ( * ? ? ?",
    "* section  10.1 ) .",
    "hartvigsen presented a polynomial - time algorithm that can be used to decide 4 in polynomial time  @xcite .",
    "furthermore , it can be adapted to solve 4 as well .",
    "k admits a simple factor @xmath48 approximation for all @xmath23 : compute a maximum weight cycle cover , break the lightest edge of each cycle , and join the paths thus obtained to a hamiltonian cycle .",
    "unfortunately , this algorithm can not be generalized to work for l for general @xmath0 .",
    "for the problem of computing @xmath23-cycle covers of minimum weight in graphs with edge weights one and two , there exists a factor @xmath49 approximation algorithm for all @xmath23  @xcite .",
    "hassin and rubinstein  @xcite devised a randomized approximation algorithm for that achieves an approximation ratio of @xmath50 .",
    "hell et al .",
    "@xcite proved that l is -hard for @xmath51 . for @xmath52 ,",
    "k and k are -complete  @xcite .",
    "vornberger showed that 5 is -hard  @xcite .",
    "the directed cycle cover problems , , and  can be solved in polynomial time by reduction to the maximum weight perfect matching problem in bipartite graphs  ( * ? ? ?",
    "* chapter  12 ) . but",
    "already 3 is -complete  @xcite . k and",
    "k are -complete for all @xmath53  @xcite .",
    "similar to the factor @xmath48 approximation algorithm for undirected cycle covers , k has a simple factor @xmath1 approximation algorithm for all @xmath23 : compute a maximum weight cycle cover , break the lightest edge of every cycle , and join the cycles to obtain a hamiltonian cycle .",
    "again , this algorithm can not be generalized to work for arbitrary @xmath0 .",
    "there is a factor @xmath54 approximation algorithm for 3  @xcite and a factor @xmath48 approximation algorithm for k for @xmath53  @xcite .",
    "the complexity of finding @xmath0-cycle covers in undirected graphs seems to be well understood .",
    "however , hardly anything is known about the complexity of @xmath0-cycle covers in directed graphs and about the approximability of @xmath0-cycle covers in both undirected and directed graphs .",
    "we prove that l is -hard for all @xmath0 with @xmath51 ( section  [ subsec : undirecteduniform ] ) and that l is -hard if @xmath55 ( section  [ ssec : adaption ] ) .",
    "the hardness results for l hold even if we allow only the edge weights zero , one , and two .",
    "we show a dichotomy for directed graphs : for all @xmath0 with @xmath56 and @xmath57 , l is -hard and l and l are -hard ( section  [ subsec : dirhard ] ) , while all three problems are solvable in polynomial time if @xmath58 or @xmath59 .",
    "the hardness results for l and l carry over to the problem of computing @xmath0-cycle covers of minimum weight in graphs restricted to edge weights one and two .",
    "the hardness results for l for @xmath60 and @xmath61 carry over to the problem of computing @xmath0-cycle covers of minimum weight where the edge weights are required to fulfill the triangle inequality .    to show the hardness of directed cycle covers , we show that certain kinds of graphs , called _ @xmath0-clamps _ , exist for non - empty @xmath24 if and only if @xmath57 ( theorem  [ thm : dirclampchar ] ) .",
    "this graph - theoretical result might be of independent interest .",
    "finally , we devise approximation algorithms for l and l that achieve ratios of @xmath1 and @xmath2 , respectively ( section  [ sec : approximation ] ) . both algorithms work for all sets  @xmath0 .",
    "to begin the hardness proofs , we introduce _ clamps _ , which were defined by hell et al .",
    "clamps are crucial for our hardness proof .",
    "let @xmath62 be an undirected graph , and let @xmath63 be two vertices of @xmath64 , which we call the of @xmath64 .",
    "we denote by @xmath65 and @xmath66 the graphs obtained from @xmath64 by deleting @xmath67 and @xmath68 , respectively , and their incident edges .",
    "@xmath69 is obtained from @xmath64 by deleting both @xmath67 and @xmath68 . for @xmath70",
    ", @xmath71 is the following graph : let @xmath72 be new vertices , add edges @xmath73 , @xmath74 for @xmath75 , and @xmath76 . for @xmath77 , we directly connect @xmath67 to @xmath68 .",
    "let @xmath21 .",
    "the graph @xmath64 is called an if the following properties hold :    1 .",
    "both @xmath65 and @xmath66 contain an @xmath0-cycle cover .",
    "neither @xmath64 nor @xmath69 nor @xmath71 for any @xmath70 contains an @xmath0-cycle cover .",
    "figure  [ fig : finiteclamp ] shows an example of an @xmath0-clamp for a set @xmath0 with @xmath78 .",
    "hell et al .",
    "@xcite proved the following result which we will exploit for our reduction .",
    "[ lem : hell ] let @xmath21 be non - empty .",
    "then there exists an @xmath0-clamp if and only if @xmath51 .",
    "let @xmath7 be a graph with vertex set @xmath5 and @xmath19 .",
    "we say that the vertex set @xmath20 is an @xmath0-clamp with connectors @xmath63 in @xmath7 if the subgraph of @xmath7 induced by @xmath20 is an @xmath0-clamp and the only external edges of @xmath20 are incident to @xmath67 or @xmath68 .",
    "let us fix some technical terms .",
    "for this purpose , let @xmath9 be a subset of the edges of @xmath7 .",
    "( in particular , @xmath9 can be a cycle cover of @xmath7 . ) for any @xmath79 , we say that if there is no edge in @xmath9 connecting @xmath80 to @xmath81 .",
    "if @xmath9 is a cycle cover , then this means that all cycles of @xmath9 traverse either only nodes of @xmath80 or only nodes of @xmath81 .",
    "we say that the @xmath0-clamp if @xmath82 is isolated in @xmath9 .",
    "this means that each cycle of @xmath9 traverses either only vertices in @xmath83 or only vertices in @xmath82 ( which includes @xmath67 ) .",
    "analogously , if @xmath84 is isolated in  @xmath9 .",
    "an @xmath0-clamp implements an exclusive - or of @xmath67 and @xmath68 : in every @xmath0-cycle cover , exactly one of them is absorbed , the other one is expelled . for our purpose of reducing from ,",
    "we need a one - out - of - three behavior .",
    "a graph @xmath64 is called an if the following property is fulfilled : let @xmath7 be an arbitrary graph that contains @xmath64 as a subgraph such that only @xmath85 , @xmath86 , and @xmath87 are incident to external edges .",
    "then in all @xmath0-cycle covers @xmath9 of @xmath7 , exactly two of @xmath64 s connectors are expelled while the third one is absorbed . to put it another way :",
    "either @xmath88 or @xmath89 or @xmath90 is isolated in @xmath9 .    for finite sets @xmath0",
    ", we obtain an @xmath0-gadget , shown in figure  [ fig : finitegadget ] , by equipping the @xmath0-clamp of figure  [ fig : finiteclamp ] with an additional connector .    for infinite sets @xmath0",
    ", we first build an intermediate subgraph .",
    "a is built from three @xmath0-clamps and has three connectors @xmath91 .",
    "figure  [ fig : tripleclamp ] shows the construction .",
    "triple @xmath0-clamps show a two - out - of - three behavior : only one connector will be expelled , the other two will be absorbed . more precisely : one of the three clamps has to absorb @xmath68 .",
    "the other two absorb their connectors @xmath92 , which are also connectors of the triple clamp .",
    "now we are prepared to build @xmath0-gadgets for infinite sets @xmath0 .",
    "these graphs are built from three triple @xmath0-clamps @xmath93 , @xmath94 , and @xmath95 , where @xmath96 has connectors @xmath97 .",
    "figure  [ fig : gadget ] shows the @xmath0-gadget . since @xmath0 is infinite , there exists a @xmath98 with @xmath99 .",
    "let us argue why the @xmath0-gadget behaves as claimed .",
    "for this purpose , let @xmath9 be an arbitrary @xmath0-cycle cover of @xmath7 , where @xmath7 contains the @xmath0-gadget as a subgraph .",
    "first , we observe that all @xmath100 vertices of the path connecting @xmath101 to @xmath102 must be on the same cycle @xmath103 in @xmath9 .",
    "the only other vertices to which @xmath101 is incident are @xmath104 , @xmath105 , and @xmath106 . by symmetry , we assume that @xmath104 lies also in @xmath103 .",
    "therefore , @xmath93 absorbs @xmath107 and @xmath108 .",
    "hence , @xmath109 and @xmath110 are absorbed by @xmath94 and @xmath95 , respectively , and @xmath103 runs through @xmath111 back to @xmath102 to form a @xmath112-cycle .",
    "thus , @xmath85 is absorbed by the gadget .",
    "@xmath94 expels @xmath113 and absorbs @xmath110 , while @xmath95 expels @xmath114 and absorbs @xmath109 .",
    "hence , the gadget expels @xmath86 and @xmath87 as claimed . the other two cases",
    "are symmetric .    to conclude this section about clamps",
    ", we transfer the notion of @xmath0-gadgets to complete graphs with edge weights zero and one and prove some properties . in section  [ ssec : adaption ] , we will generalize the notion of @xmath0-gadgets to graphs with arbitrary edge weights .",
    "the transformation to graphs with edge weights zero and one is made in the obvious way : let @xmath7 be an undirected complete graph with vertex set @xmath5 and edge weights zero and one .",
    "let @xmath19 .",
    "we say that @xmath20 is an @xmath0-gadget with connectors @xmath115 if the subgraph of @xmath7 induced by @xmath20 restricted to the edges of weight one is an @xmath0-gadget with connectors @xmath116 .",
    "let @xmath117 be the number of vertices of an @xmath0-gadget @xmath20 with connectors @xmath85 , @xmath86 , and @xmath87 .",
    "let @xmath9 be a subset of the edges of @xmath7 ( in particular , @xmath9 can be a cycle cover ) .",
    "we call @xmath20 if @xmath20 absorbs @xmath85 , @xmath86 , or @xmath87 , expels the other two connectors , and @xmath118 .",
    "since the edge weighted graph is complete , @xmath0-cycle may traverse @xmath0-gadgets arbitrarily .",
    "the following lemma shows that we can not gain weight by not traversing them healthily .",
    "[ lem : gadgetprop ] let @xmath7 be an undirected graph with vertex set @xmath5 and edge weights zero and one , and let @xmath19 be an @xmath0-gadget with connectors @xmath119 .",
    "let @xmath9 be an arbitrary @xmath0-cycle cover of @xmath7 and @xmath120 .",
    "then the following properties hold :    1 .   @xmath121 .",
    "2 .   if there are @xmath122 external edges at @xmath20 in @xmath9 , , edges with exactly one endpoint in @xmath20 , then @xmath123 .",
    "[ item : legalclamp ] assume that @xmath20 absorbs exactly one of @xmath85 , @xmath86 , or @xmath87 .",
    "then there exists an @xmath0-cycle cover @xmath124 that differs from @xmath9 only in the internal edges of @xmath20 and has @xmath125 .",
    "[ item : illegalclamp ] assume that there are two external edges at @xmath20 in @xmath9 that are incident to two different connectors .",
    "then @xmath126 .",
    "if @xmath127 was true , then @xmath20 would contain an @xmath0-cycle cover consisting solely of weight one edges since @xmath120 .",
    "this would contradict @xmath20 being an @xmath0-gadget .",
    "the second claim follows immediately from @xmath128 and the fact that every vertex is incident to exactly two edges in a cycle cover .",
    "assume without loss of generality that @xmath20 absorbs @xmath85 and expels @xmath86 and @xmath87 .",
    "since @xmath20 is an @xmath0-gadget , @xmath129 contains an @xmath0-cycle cover consisting of @xmath130 weight one edges , which proves the third claim .",
    "the fourth claim remains to be proved . if there are more than two external edges at @xmath20 in @xmath9 , we have at least four external edges and thus @xmath131 .",
    "so assume that there are exactly two external edges at @xmath20 in @xmath9 incident to , say , @xmath85 and @xmath86 .",
    "we have @xmath130 internal edges of @xmath20 in @xmath9 .",
    "if all of them had weight one , this would contradict the property that in an unweighted @xmath0-gadget always @xmath132 , @xmath133 , or @xmath129 is isolated .",
    "the notion of l - reductions was introduced by papadimitriou and yannakakis  @xcite ( cf .",
    "ausiello et al .",
    "* definition  8.4 ) ) .",
    "l - reductions can be used to show the -hardness of optimization problems .",
    "we present an l - reduction from  to show the inapproximability of l for @xmath51 .",
    "the inapproximability of l for @xmath55 and l for @xmath56 and @xmath57 will be shown in subsequent sections .",
    "let @xmath21 be non - empty with @xmath51 .",
    "thus , @xmath0-gadgets exist and we fix one as in the previous section .",
    "let @xmath134 .",
    "( this choice is arbitrary .",
    "we could choose any number in @xmath0 . )",
    "we will reduce  to l. @xmath135 is -complete since @xmath32 .",
    "let @xmath26 be an instance of  with @xmath136 vertices and @xmath137 edges .",
    "our instance @xmath7 for l consists of @xmath11 subgraphs @xmath138 , each containing @xmath139 vertices , where @xmath117 is the number of vertices of the @xmath0-gadget .",
    "we start by describing @xmath140 .",
    "then we state the differences between @xmath140 and @xmath141 and say to which external edges of @xmath138 weight one is assigned .",
    "let @xmath142 be any edge of @xmath28 .",
    "we construct an @xmath0-gadget @xmath143 for @xmath101 that has connectors @xmath144 , @xmath145 and @xmath146 .",
    "we call @xmath143 an",
    ".    now let @xmath35 be any vertex of @xmath28 and let @xmath147 be the @xmath11 edges that are incident to @xmath85 .",
    "we connect the vertices @xmath148 to form a path by assigning weight one to the edges @xmath149 for @xmath150 .",
    "together with edge @xmath151 , these edges form a cycle of length @xmath152 , but note that @xmath153 .",
    "these @xmath11 edges are called the .",
    "the for some @xmath154 are the junctions of @xmath85 and @xmath86 that are incident to @xmath143 .",
    "overall , the graph @xmath140 consists of @xmath139 vertices since every edge gadget consists of @xmath117 vertices .",
    "the graphs @xmath141 are almost exact copies of @xmath140 .",
    "the graph @xmath155 ( @xmath156 ) consists of @xmath0-gadgets with connectors @xmath157 , @xmath158 , and @xmath159 for each edge @xmath142 , just as above .",
    "the edge weights are also identical with the single exception that the edge @xmath160 also has weight one .",
    "note that we use the term `` edge gadget '' only for the subgraphs @xmath143 of @xmath140 defined above although almost the same subgraphs occur in @xmath141 as well .",
    "similarly , the term `` junction '' refers only to edges in @xmath140 .",
    "finally , we describe how to connect @xmath138 with each other . for every edge @xmath161 , there are @xmath11 vertices @xmath162 .",
    "these are connected to form a cycle consisting solely of weight one edges , , we assign weight one to all edges @xmath163 for @xmath164 and to @xmath165 .",
    "figure  [ fig : example ] shows an example of the whole construction from the viewpoint of a single vertex",
    ".    edges with both vertices in the same gadget are called . besides junctions and internal edges , the third kind of edges are the of @xmath143 for @xmath161 , which are the two edges @xmath166 and @xmath167 .",
    "the fourth kind of edges are , which are edges that are not junctions but connect any two vertices of two different gadgets .",
    "the @xmath87-edges , however , are not illegal . edges within @xmath141 as well as edges connecting @xmath155 to @xmath168 for @xmath169 have no special name .    we define the following terms for arbitrary subsets @xmath9 of the edges of the graph @xmath7 thus constructed , which includes the case of @xmath9 being a cycle cover .",
    "let @xmath142 be an arbitrary edge of @xmath28 .",
    "we say that if the following properties are fulfilled :    * @xmath9 contains either two or four of the junctions at @xmath143 and no illegal edges incident to  @xmath143 . *",
    "if @xmath9 contains exactly two junctions at @xmath143 , then these belong to the same vertex and the two @xmath87-edges at @xmath143 are contained in @xmath9 . *",
    "if @xmath9 contains four junctions at @xmath143 , then @xmath9 does not contain the @xmath87-edges at @xmath143 .",
    "we call @xmath9 if @xmath9 legally connects all gadgets .",
    "if @xmath124 is a legal @xmath0-cycle cover , then for all @xmath170 either all junctions of @xmath85 or no junction of @xmath85 is in @xmath124 . from a legal @xmath0-cycle",
    "cover @xmath124 , we obtain the subset @xmath171 . since at least two junctions at @xmath143 are in @xmath124 for every @xmath161 , the set @xmath31 is a vertex cover of @xmath28 .",
    "the idea behind the reduction is as follows : consider an edge @xmath142 .",
    "we interpret @xmath144 being expelled to mean that @xmath85 is in the vertex cover .",
    "( in this case , the junctions of @xmath85 are in the cycle cover . )",
    "analogously , @xmath86 is in the vertex cover if @xmath145 is expelled .",
    "the vertex @xmath146 is only absorbed if both @xmath85 and @xmath86 are in the vertex cover .",
    "if only one of @xmath85 and @xmath86 is in the vertex cover , @xmath146 forms a @xmath11-cycle together with @xmath172 .",
    "we only considered @xmath140 when defining the terms `` legally connected '' and `` legal . ''",
    "this is because in @xmath140 , we lose weight one for putting @xmath85 into the vertex cover since the junction @xmath151 weighs zero .",
    "the other @xmath173 copies of the construction are only needed because @xmath146 must be part of some cycle if @xmath146 is not absorbed .",
    "[ lem : vctocc ] let @xmath31 be a vertex cover of size @xmath174 of @xmath28",
    ". then @xmath7 contains an @xmath0-cycle cover @xmath124 with @xmath175 .",
    "we start by describing @xmath124 in @xmath140 . for every vertex @xmath176 ,",
    "the cycle consisting of all @xmath11 junctions is in @xmath124 .",
    "let @xmath142 be any edge . then either @xmath85 or @xmath86 or both are in @xmath31 . if only @xmath85 is in @xmath31 , we let @xmath143 absorb @xmath145 while @xmath146 is expelled . if only @xmath86 is in @xmath31 , we let @xmath143 absorb @xmath144 while @xmath146 is again expelled .",
    "if both @xmath85 and @xmath86 are in @xmath31 , then we let @xmath144 and @xmath145 be expelled while @xmath146 is absorbed .",
    "we perform the same construction as for @xmath140 for all copies @xmath141 .",
    "if @xmath146 is expelled , then @xmath177 are expelled as well .",
    "we let them form a @xmath11-cycle in @xmath124 .",
    "clearly , @xmath124 is legal .",
    "furthermore , @xmath124 is an @xmath0-cycle cover : every cycle either has a length of @xmath152 or lies totally inside a single @xmath0-gadget .",
    "all @xmath0-gadgets are healthy in @xmath124 , thus @xmath124 is an @xmath0-cycle cover .",
    "all edges of @xmath124 within @xmath141 have weight one .",
    "the only edges that connect different copies @xmath155 and @xmath168 are edges @xmath178 and @xmath179 , which have weight one as well .",
    "almost all edges used in @xmath140 also have weight one ; the only exception is one junction of weight zero for each @xmath176 . since @xmath180 , there are @xmath174 edges of weight zero in @xmath124 .",
    "the graph @xmath7 contains @xmath181 vertices , thus @xmath124 contains @xmath181 edges , @xmath182 of which have weight one .",
    "let @xmath9 be an @xmath0-cycle cover of @xmath7 and let @xmath161 .",
    "we define @xmath183 as the sum of the weights of all internal edges of @xmath143 plus half the number of @xmath87-edges in @xmath9 at @xmath143 .",
    "analogously , @xmath184 is the number of weight one edges with both vertices in @xmath155 plus half the number of weight one edges with exactly one vertex in @xmath155 .",
    "[ lem : weightcharac ] let @xmath9 be an @xmath0-cycle cover and let @xmath185 be the number of weight one junctions in @xmath9 . then @xmath186 .",
    "every edge with both vertices in the same @xmath155 is counted once .",
    "the only edges of weight one between different @xmath155 are the edges @xmath163 and @xmath165 .",
    "these are counted with one half in both @xmath184 and @xmath187 for @xmath188 or one half in both @xmath184 and @xmath183 for @xmath189 .    in a legal @xmath0-cycle",
    "cover @xmath124 as described in lemma  [ lem : vctocc ] , we have @xmath190 for all @xmath191 since every vertex in @xmath155 is only incident to edges of weight one in @xmath124 by construction .",
    "now we show that it is always best to traverse the gadgets legally and to keep the gadgets healthy .",
    "[ lem : generallegal2 ] given an arbitrary @xmath0-cycle cover @xmath9 , we can compute a legal @xmath0-cycle cover @xmath124 with @xmath192 in polynomial time .",
    "we proceed as follows to obtain @xmath124 :    1 .   let @xmath193 be @xmath9 with all illegal edges removed .",
    "2 .   for all @xmath35 in arbitrary order : if at least one junction of @xmath85 is in @xmath9 , then put all junctions of @xmath85 into @xmath193 .",
    "[ step : lonely ] for all @xmath142 in arbitrary order : if neither the junctions of @xmath85 nor the junctions of @xmath86 are in @xmath193 , choose arbitrarily one vertex of @xmath101 , say @xmath85 , and add all junctions of @xmath85 to @xmath193 .",
    "4 .   rearrange @xmath193 within @xmath140 such that all clamps are healthy in @xmath193 .",
    "5 .   rearrange @xmath193 such that all @xmath141 are traversed exactly like @xmath140 .",
    "6 .   for all @xmath161 :",
    "if @xmath194 are not absorbed , let them form a @xmath11-cycle .",
    "call the result  @xmath124 .",
    "the running - time of the algorithm is polynomial .",
    "moreover , @xmath124 is a legal @xmath0-cycle cover by construction .",
    "what remains is to prove @xmath192 .",
    "let @xmath195 be the weight of @xmath9 according to lemma  [ lem : weightcharac ] , , @xmath9 contains @xmath185 junctions of weight one .",
    "analogously , let @xmath196 , , @xmath197 is the number of junctions of weight one in @xmath124 .",
    "all illegal edges have weight zero , and we do not remove any junctions .",
    "we have @xmath190 for all @xmath198 , which is maximal .",
    "thus , no weight is lost in this way .",
    "what remains is to consider the internal edges of the gadgets and the @xmath87-edges .",
    "let @xmath199 be an arbitrary edge of @xmath28 . if @xmath200 , then nothing has to be shown .",
    "those gadgets @xmath143 with @xmath201 remain to be considered .",
    "we have @xmath202 and @xmath203 according to lemma  [ lem : gadgetprop ] .",
    "thus , @xmath204 and @xmath205 for all @xmath161 with @xmath201 .",
    "what remains to be proved is that for all such gadgets , there is a junction of weight one in @xmath124 that is not in @xmath9 and can thus compensate for the loss of weight one in @xmath143 .",
    "this means that we have to show that @xmath197 is at least @xmath185 plus the number of edges @xmath101 with @xmath206 .    if @xmath207 , then according to lemma  [ lem : gadgetprop]([item : illegalclamp ] ) , the junctions at @xmath143 in @xmath9 ( if there are any ) belong to the same vertex . since @xmath208 , all four junctions at @xmath143 are in @xmath124 .",
    "thus , while executing the above algorithm , there is a moment at which at least one of , say , @xmath86 s junctions at @xmath143 is in @xmath193 , and the junctions of @xmath85 are added in the next step .",
    "we say that a vertex if    1 .",
    "@xmath124 contains @xmath85 s junctions , 2 .",
    "no junction of @xmath85 at @xmath143 is in @xmath9 , and 3 .   at the moment at which @xmath85 s junctions are added",
    ", @xmath193 already contains at least one junction of @xmath86 at @xmath143 .",
    "thus , every gadget @xmath143 with @xmath209 is compensated by some vertex @xmath37 .",
    "it remains to be shown that the number of gadgets that are compensated by some vertex is at most equal to the number of weight one junctions added to @xmath193 .",
    "let @xmath210 be the number of junctions of @xmath85 in @xmath9 .",
    "if @xmath211 , then @xmath85 does not compensate any gadget .",
    "if @xmath212 , , @xmath9 does not contain any of @xmath85 s junctions , then the junctions of @xmath85 are added during step  [ step : lonely ] of the algorithm because there is some edge @xmath161 with @xmath37 such that there is no junction at all in @xmath193 at @xmath143 before adding @xmath85 s junctions .",
    "thus , @xmath85 does not compensate @xmath143 . at most @xmath173 gadgets",
    "are compensated by @xmath85 , and @xmath213 junctions of @xmath85 have weight one .",
    "the case that remains is @xmath150 .",
    "then @xmath214 junctions of @xmath85 are added and at least @xmath215 of them have weight one . on the other hand , there are at least @xmath216 gadgets @xmath143 such that at least one junction of @xmath85 at @xmath143 is already in @xmath9 : every junction is at two gadgets , and thus @xmath217 junctions are at @xmath218 or more gadgets .",
    "thus , at most @xmath215 gadgets are compensated by @xmath85 .    finally , we prove the following counterpart to lemma  [ lem : vctocc ] .    [",
    "lem : getset2 ] let @xmath124 be the @xmath0-cycle cover constructed as described in the proof of lemma  [ lem : generallegal2 ] and let @xmath219 be the subset of @xmath27 obtained from @xmath124 .",
    "choose @xmath174 such that @xmath175 .",
    "then @xmath180 .",
    "the proof is similar to the proof of lemma  [ lem : vctocc ] .",
    "we set the weight of all junctions to one .",
    "with respect to the modified edge weights , the weight of @xmath124 is @xmath181 .",
    "thus , @xmath174 is the number of weight zero junctions in @xmath124 , which is just @xmath220 .",
    "now we are prepared to prove the main theorem of this section .",
    "[ thm : lapx ] for all @xmath21 with @xmath51 , l is -hard .    we show that the reduction presented is an l - reduction .",
    "then the result follows from the -hardness of .",
    "let @xmath221 be the size of a minimum vertex cover of @xmath28 and @xmath222 be the weight of a maximum weight @xmath0-cycle cover of @xmath7 . from lemmas  [ lem : vctocc ] , [ lem : generallegal2 ] , and  [ lem : getset2 ]",
    ", we obtain that @xmath223 .",
    "since @xmath28 is @xmath11-regular , we have @xmath224 .",
    "thus , @xmath225    let @xmath9 be an arbitrary @xmath0-cycle cover of @xmath7 , @xmath124 be a legal @xmath0-cycle cover obtained from @xmath9 as in lemma  [ lem : generallegal2 ] , and @xmath29 obtained from @xmath124 . then @xmath226 which completes the proof .      to prove the -hardness of l for @xmath55 , all we have to do is to deal with @xmath61 and @xmath60 .",
    "for all other sets @xmath0 , the inapproximability follows from theorem  [ thm : lapx ] .",
    "we will adapt the reduction presented in the previous section .    to do this",
    ", we have to find an edge weighted analog of an @xmath0-clamp .",
    "we do not explicitly define the properties a weighted @xmath0-clamp has to fulfill .",
    "instead , we just call the graph shown in figure  [ fig : weightedclamp ] a for @xmath227 and @xmath228 .",
    "the basic idea is that all three edges of weight two of the weighted clamp have to be traversed in a cycle cover .",
    "since @xmath229-cycles are forbidden , we have to take either the two dotted edges or the two dashed edges .",
    "otherwise , we would have to take an edge of weight zero .",
    "furthermore , if we take the dashed edges , we have to absorb @xmath68 and to expel @xmath67 , and if we take the dotted edges , we have to absorb @xmath67 and to expel @xmath68 ( figures  [ fig : w1 ] and  [ fig : w2 ] ) .",
    "again , we would have to take edges of weight zero otherwise .         using three weighted @xmath0-clamps @xmath230",
    ", we build an @xmath0-gadget as shown in figure  [ fig : weightedgadget ] .",
    "note that both @xmath231 and @xmath232 can serve as a connector for each of the clamps .",
    "this weighted @xmath0-gadget has essentially the same properties as the @xmath0-gadgets of section  [ subsec : clamps ] , which were stated as lemma  [ lem : gadgetprop ] .",
    "the difference is that @xmath233 is no longer the number of vertices , but the number of vertices plus the number of edges of weight two .",
    "let @xmath7 be an undirected graph with vertex set @xmath5 and edge weights zero and one , and let @xmath19 be a weighted @xmath0-gadget with connectors @xmath119 in @xmath7 .",
    "let @xmath9 be an arbitrary @xmath0-cycle cover of @xmath7 .",
    "then the following properties hold :    1 .   @xmath234 .",
    "if there are @xmath122 external edges at @xmath20 in @xmath9 , then @xmath235 .",
    "if @xmath20 absorbs @xmath85 , then there exists an @xmath0-cycle cover @xmath124 that differs from @xmath9 only in the internal edges of @xmath20 and has @xmath236 . the same holds if @xmath20 absorbs @xmath86 or @xmath87 .",
    "4 .   assume that there are two external edges at @xmath20 in @xmath9 that are incident to two different connectors",
    ". then @xmath237 .",
    "the only way to achieve @xmath238 is @xmath239 , which requires that we have @xmath240 internal edges including all nine edges of weight two .",
    "since @xmath229-cycles are forbidden , such an @xmath0-cycle cover does not exist .",
    "if we have @xmath241 external edges , then we have @xmath242 internal edges . at most nine of them",
    "are of weight two .",
    "if @xmath20 absorbs @xmath85 , then we can achieve a weight of 30 by letting @xmath243 and @xmath244 absorb @xmath104 and @xmath105 , respectively ( figure  [ fig : weightedabsorb ] ) .",
    "( we can also connect @xmath243 and @xmath244 via @xmath231 and @xmath232 to obtain a @xmath245-cycle .",
    "the weight would be the same . ) in the same way , we can achieve weight 30 if @xmath20 absorbs @xmath86 or @xmath87 .",
    "the fourth claim remains to be proved .",
    "we have @xmath234 and @xmath246 internal edges . if @xmath247 , then @xmath248 , and @xmath9 contains all nine edges of weight two and no internal edge of weight zero of @xmath20 . by symmetry",
    ", it suffices to consider the case that @xmath85 is incident to one external edge .",
    "figure  [ fig : weightillegal ] shows which edges are mandatory in order to keep all three edges of weight two . since the cycle that contains @xmath85 must be continued at @xmath249 , vertex @xmath249 is incident to an edge of weight zero in @xmath9 , which proves the claim .    given these properties , we can plug the @xmath0-gadget into the reduction described in the previous section to obtain the -hardness of @xmath250 for @xmath61 and @xmath60 . together with theorem  [ thm : lapx ] , we obtain the following result .",
    "[ thm : maxug ] is -hard for all @xmath0 with @xmath55 even if the edge weights are restricted to be zero , one , or two .",
    "the aim of this section is to prove a counterpart to lemma  [ lem : hell ] ( for the existence of @xmath0-clamps ) for directed graphs .",
    "let @xmath251 be a directed graph and @xmath252 .",
    "again , @xmath65 , @xmath66 , and @xmath69 denote the graphs obtained by deleting @xmath67 , @xmath68 , and both @xmath67 and @xmath68 , respectively . for @xmath70",
    ", @xmath253 denotes the following graph : let @xmath254 be new vertices and add edges @xmath255 . for @xmath256 , we add the edge @xmath257 . the graph @xmath258 is similarly defined , except that we now start at @xmath68 , , we add the edges @xmath259 .",
    "@xmath260 is @xmath64 with the additional edge @xmath261 .",
    "now we can define clamps for directed graphs : let @xmath262 .",
    "a directed graph @xmath251 with @xmath252 is a with connectors @xmath67 and @xmath68 if the following properties hold :    * both @xmath65 and @xmath66 contain an @xmath0-cycle cover . *",
    "neither @xmath64 nor @xmath69 nor @xmath253 nor @xmath263 for any @xmath70 contains an @xmath0-cycle cover .",
    "let us now prove that directed @xmath0-clamps exist for almost all @xmath0 .",
    "[ thm : dirclampchar ] let @xmath24 be non - empty .",
    "then there exists a directed @xmath0-clamp if and only if @xmath57 .",
    "we first prove that directed @xmath0-clamps exist for all non - empty sets @xmath24 with @xmath57 .",
    "we start by considering finite @xmath0",
    ". if @xmath0 is finite , @xmath264 exists . for @xmath58 ,",
    "the graph shown in figure  [ fig : dir1clamp ] is a directed @xmath0-clamp : either @xmath67 or @xmath68 forms a @xmath1-cycle with @xmath265 , and there are no other possibilities . otherwise , we have @xmath266 .",
    "figure  [ fig : dirfinclamp ] shows a directed @xmath0-clamp for this case , which is a directed variant of the undirected clamp shown in figure  [ fig : finiteclamp ] .",
    "now we consider finite @xmath267 .",
    "figure  [ fig : dir2clamp ] shows an @xmath0-clamp for @xmath268 : @xmath265 , @xmath269 , and @xmath270 must be on the same path since length two is forbidden .",
    "this cycle must include @xmath67 or @xmath68 but can not include both of them    otherwise , @xmath271 and @xmath272 and the graph shown in figure  [ fig : dirinfclamp2 ] is an @xmath0-clamp : the vertices @xmath273 must all be on the same cycle .",
    "thus , either @xmath274 or @xmath275 is in the cycle cover . by symmetry",
    ", it suffices to consider the first case . since @xmath276 , the edge @xmath277 can not be in the cycle cover .",
    "thus , @xmath278 and @xmath279 and hence @xmath280 are in the cycle cover .",
    "the case that remains to be considered is that both @xmath0 and @xmath267 are infinite .",
    "we distinguish two sub - cases .",
    "either there exists a @xmath281 with @xmath282 and @xmath283 . in this case , the graph shown in figure  [ fig : dirinfclamp1 ] is an @xmath0-clamp : @xmath284 must be on the same cycle .",
    "since the lengths @xmath285 and @xmath286 are not allowed , either @xmath68 or @xmath67 is expelled and the other vertex is absorbed .",
    "if no @xmath285 exists with @xmath282 and @xmath287 ( but @xmath0 and @xmath267 are infinite ) , then there exists a @xmath266 with @xmath276 and @xmath272 and we can use the graph already used for finite @xmath267 ( figure  [ fig : dirinfclamp2 ] ) as a directed @xmath0-clamp .",
    "lemma  [ lem : alsocc ] below shows that @xmath288-clamps do not exist , which completes the proof .",
    "+    [ lem : alsocc ] let @xmath4 be a directed graph and let @xmath289 .",
    "if @xmath290 and @xmath291 both contain a cycle cover , then    * both @xmath7 and @xmath292 contain cycle covers or * all @xmath293 and @xmath294 for @xmath70 contain cycle covers .",
    "let @xmath295 and @xmath296 be the sets of edges of the cycle covers of @xmath290 and @xmath291 , respectively .",
    "we construct two sequences of edges @xmath297 and @xmath298 .",
    "these sequences can be viewed as augmenting paths and we use them to construct cycle covers of @xmath292 and @xmath7 or @xmath299 and @xmath300 .",
    "the sequence @xmath301 is given uniquely by traversing edges of @xmath296 forwards and edges of @xmath295 backwards :    * @xmath302 is the unique outgoing edge of @xmath303 in @xmath296 . *",
    "if @xmath304 , , if @xmath305 is odd , then @xmath306 is the unique incoming edge of @xmath307 in @xmath295 . *",
    "if @xmath308 , , if @xmath305 is even , then @xmath309 is the unique outgoing edge of @xmath310 in @xmath296 . *",
    "if in any of the above steps no extension of @xmath301 is possible , then stop .",
    "let @xmath311 .",
    "we observe two properties of the sequence @xmath301 .",
    "[ lem : propertiesaug ]    1 .",
    "no edge appears more than once in @xmath301 .",
    "if @xmath312 is odd , , @xmath313 , then @xmath314 . if @xmath312 is even , , @xmath315 , then @xmath316 .",
    "assume the contrary of the first claim and let @xmath317 ( @xmath318 ) be an edge that appears at least twice in @xmath301 such that @xmath305 is minimal . if @xmath319 , then @xmath320 .",
    "this would imply @xmath321 , a contradiction .",
    "if @xmath322 , then assume @xmath323 without loss of generality .",
    "since exactly one edge leaves @xmath324 in @xmath295 , the edge @xmath325 is uniquely determined , which contradicts the assumption that @xmath305 be minimal .",
    "let us now prove the second claim . without loss of generality , we assume that the last edge @xmath326 belongs to @xmath296 .",
    "let @xmath327 .",
    "the path @xmath301 can not be extended , which implies that there does not exist an edge @xmath328 .",
    "since @xmath295 is a cycle cover of @xmath290 , this implies @xmath329 and completes the proof .",
    "we build the sequence @xmath330 analogously , except that we start with the edge @xmath331 .",
    "again , we traverse edges of @xmath296 forwards and edges of @xmath295 backwards .",
    "let @xmath332 .",
    "no edge appears in both @xmath301 and @xmath330 as can be proved similarly to the first claim of lemma  [ lem : propertiesaug ] .",
    "moreover , either @xmath301 ends at @xmath67 and @xmath330 ends at @xmath68 or vice versa : we have @xmath314 if and only if @xmath333 , and we have @xmath316 if and only if @xmath334 .",
    "let @xmath335 denote the set of edges of @xmath295 that are part of @xmath301 .",
    "the sets @xmath336 , @xmath337 , @xmath338 are defined similarly .",
    "+     +    two examples are shown in figures  [ gcc : fig : aug ] and  [ gcc : fig : bug ] : figures  [ gcc : subfig : agraph ] and  [ gcc : subfig : acc ] show a graph with its cycle covers , while figure  [ gcc : subfig : ap ] depicts @xmath301 and @xmath330 , the former starting at @xmath67 and ending at @xmath68 and the latter starting at @xmath68 and ending at @xmath67 .",
    "figures  [ gcc : subfig : bgraph ] , [ gcc : subfig : bcc ] , and  [ gcc : subfig : bp ] show another example graph , this time @xmath301 starts and ends at @xmath67 and @xmath330 starts and ends at @xmath68 .",
    "our aim is now to construct cycle covers of @xmath7 and @xmath292 or of @xmath299 and @xmath300 .",
    "we distinguish two cases .",
    "let us start with the case that @xmath301 starts at @xmath67 and ends at @xmath68 and , consequently , @xmath330 starts at @xmath68 and ends at @xmath67 . then @xmath339 is a cycle cover of @xmath340 . to prove this",
    ", we have to show @xmath341 for all @xmath342 :    * we removed the outgoing edge of @xmath67 in @xmath296 , which is in @xmath336 .",
    "the incoming edge of @xmath67 in @xmath296 is left .",
    "@xmath343 does not contain any edge incident to @xmath67 and @xmath257 is an outgoing edge of @xmath67 .",
    "thus , @xmath344 .",
    "* there is no edge incident to @xmath68 in @xmath296 .",
    "@xmath343 contains an outgoing edge of @xmath68 and @xmath257 is an incoming edge of @xmath68 .",
    "thus , @xmath345 .",
    "* for all @xmath346 , either both @xmath336 and @xmath343 contain an incoming edge of @xmath85 or none of them does .",
    "analogously , either both @xmath336 and @xmath343 contain an outgoing edge of @xmath85 or none of them does .",
    "thus , replacing @xmath336 by @xmath343 changes neither @xmath347 nor @xmath348 .    by replacing the edge @xmath257 by a path @xmath349",
    ", we obtain a cycle cover of @xmath299 for all @xmath70 .",
    "a cycle cover of @xmath350 is obtained similarly : @xmath351 as above , we get cycle covers of @xmath300 by replacing @xmath261 by a path @xmath352 .",
    "figure  [ gcc : subfig : anew ] shows an example how the new cycle covers are obtained .",
    "the second case is that @xmath301 starts and ends at @xmath67 and @xmath330 starts and ends at @xmath68",
    ". then @xmath353 are cycle covers of @xmath7 and @xmath354 are cycle covers of @xmath292 .",
    "the proof is similar to the first case .",
    "figure  [ gcc : subfig : bnew ] shows an example .      from the hardness results in the previous sections and the work by hell et al .",
    "@xcite , we obtain the -hardness and -hardness of l and l , respectively , for all @xmath0 with @xmath355 and @xmath356 : we use the same reduction as for undirected cycle covers and replace every undirected edge @xmath357 by a pair of directed edges @xmath257 and @xmath261 .",
    "however , this does not work if @xmath358 and also leaves open the cases when @xmath359 .",
    ", , and can be solved in polynomial time , but the case @xmath58 is also easy : replace two opposite edges @xmath257 and @xmath261 by an edge @xmath357 of weight @xmath360 and compute a matching of maximum weight on the undirected graph thus obtained .    we will settle the complexity of the directed cycle cover problems by showing that @xmath58 and @xmath361 are the only tractable cases .",
    "for all other @xmath0 , l is -hard and l and l are -hard .",
    "let us start by proving the -hardness .",
    "[ thm : apxdir ] let @xmath24 be a non - empty set . if @xmath362 , then l is -hard .",
    "we adapt the proof presented in section  [ subsec : undirecteduniform ] .",
    "since @xmath56 , there exists a @xmath152 with @xmath32 .",
    "thus , @xmath135 is -complete .",
    "all we need is such a @xmath11 and a directed @xmath0-clamp",
    ". then we can reduce  to l.    we use the @xmath0-clamps to build @xmath0-gadgets , which again should have the property that they absorb one of their connectors and expel the other two . in case of @xmath0 being finite , the graph shown in figure  [ fig : dirfingadget ] is a directed @xmath0-gadget . in case of infinite @xmath0 ,",
    "we can build directed triple @xmath0-clamps exactly as for undirected graphs . using these , we can build directed @xmath0-gadgets , which are simply directed variants of their undirected counterparts ( figure  [ fig : dirinfgadget ] ) .",
    "the edge gadgets build the graph @xmath140 : let @xmath35 be a vertex of @xmath28 and @xmath147 be the edges incident to @xmath85 in @xmath28 ( in arbitrary order ) . then we assign weight one to the edges @xmath363 for all @xmath164 .",
    "the edge @xmath364 has weight zero .",
    "these @xmath11 edges are called the junctions of @xmath85 .",
    "again , @xmath141 are exact copies of @xmath140 except that weight one is assigned also to @xmath365 for all @xmath366 .",
    "again , we let the @xmath87-vertices form @xmath11-cycles : for all edges @xmath161 , we assign weight one to @xmath367 for @xmath368 and to @xmath369 .",
    "weight zero is assigned to all edges that are not mentioned .",
    "the remainder of the proof goes along the same lines as the -hardness proof for undirected @xmath0-cycle covers .",
    "note that the -hardness of l for @xmath362 does not follow directly from the -hardness of l : a famous counterexample is , for which it is -hard to maximize the number of simultaneously satisfied clauses  @xcite , although testing whether a 2cnf formula is satisfiable takes only linear time .",
    "[ thm : npdir ] let @xmath24 be a non - empty set . if @xmath362 , then l is -hard .",
    "all we need is an @xmath0-clamp and some @xmath152 with @xmath32 .",
    "we present a reduction from @xmath370 ( which is -complete since @xmath32 ) that is similar to the reduction of hell et al .",
    "@xcite used to prove the -hardness of l for @xmath51 .",
    "let @xmath33 be an instance of .",
    "note that we will construct a directed graph @xmath7 as an instance of @xmath371 , , @xmath7 is neither complete nor edge - weighted . for each @xmath35",
    ", we have a vertex in @xmath7 that we again call @xmath85 . for @xmath372",
    ", we construct a @xmath11-cycle consisting of the vertices @xmath373 .",
    "then we add @xmath11 @xmath0-clamps @xmath374 with @xmath375 and @xmath376 as connectors for all @xmath377 .",
    "see figure  [ fig : exampledirnp ] for an example .",
    "what remains to be shown is that @xmath7 contains an @xmath0-cycle cover if and only if @xmath30 is a `` yes '' instance of @xmath370 .",
    "assume first that there exists a subset @xmath34 such that @xmath378 and every element @xmath35 is contained in exactly one set of @xmath379 .",
    "we construct an @xmath0-cycle cover of @xmath7 in which all clamps are healthy : let @xmath372 . if @xmath36 , then let @xmath374 expel @xmath375 and absorb @xmath376 for all @xmath377 , and let @xmath380 form a @xmath11-cycle . if @xmath381 , let @xmath374 expel @xmath376 and absorb @xmath375 for all @xmath377 .",
    "all connectors are absorbed by exactly one clamp or are covered by a @xmath11-cycle since @xmath379 is an exact cover .",
    "now we prove the reverse direction .",
    "let @xmath9 be an @xmath0-cycle cover of @xmath7 .",
    "then every clamp of @xmath7 is healthy in @xmath9 , , it absorbs one of its connectors and expels the other one .",
    "let @xmath372 and assume that @xmath374 expels @xmath375 .",
    "since @xmath375 must be part of a cycle in @xmath9 , @xmath382 and @xmath383 must be in @xmath9 .",
    "we obtain that either all @xmath373 are absorbed by @xmath384 or that all are expelled by @xmath384 .",
    "now consider any @xmath35 and let @xmath385 be all the sets that contain @xmath85 .",
    "all clamps @xmath386 are healthy , @xmath9 is an @xmath0-cycle cover of @xmath7 , and @xmath85 is not incident to any further edges .",
    "hence , there must be a unique @xmath387 such that @xmath388 absorbs @xmath85 .",
    "thus , @xmath389 is an exact cover of @xmath390 .",
    "if the language @xmath391 is in , then l is also in  and therefore -complete if @xmath362 : we can nondeterministically guess a cycle cover and then check if @xmath152 for every cycle length @xmath11 occurring in that cover .",
    "conversely , if @xmath391 is not in @xmath392 , then l is not in either since there is a reduction of @xmath391 to l : on input @xmath393 , construct a graph @xmath7 on @xmath11 vertices that consists solely of a hamiltonian cycle . then @xmath394 if and only if @xmath7 contains an @xmath0-cycle cover .",
    "the goal of this section is to devise approximation algorithms for l and l that work for arbitrary @xmath0 .",
    "the catch is that we have an uncountable number of problems @xmath250 and @xmath395 and for most @xmath0 it is impossible to decide whether some cycle length is in @xmath0 or not .",
    "assume , for instance , that we have an algorithm that solves l for some set @xmath0 that is not recursively enumerable .",
    "we enumerate all instances of l and run the algorithm on these instances .",
    "this yields an enumeration of a subset of @xmath0 .",
    "since @xmath0 is not recursively enumerable , there exist @xmath152 such that the algorithm never outputs @xmath11-cycles . now consider a graph with @xmath11 vertices where all edges have weight zero except for a hamiltonian cycle of weight one edges",
    ". then the hamiltonian cycle is the unique optimum solution , but our algorithm does not output the @xmath11-cycle , contradicting the assumption it solves @xmath250 .",
    "one possibility to circumvent this problem would be to restrict ourselves to sets @xmath0 such that @xmath396 is in .",
    "another possibility to cope with this problem is to include the permitted cycle lengths in the input . however , while such restrictions are necessary for finding optimum solutions , it turns out that they are unnecessary for designing approximation algorithms .",
    "a necessary and sufficient condition for a complete graph with @xmath397 vertices to have an @xmath0-cycle cover is that there exist ( not necessarily distinct ) lengths @xmath398 for some @xmath70 with @xmath399 .",
    "we call such an @xmath397 and define @xmath400 .",
    "although @xmath0 can be arbitrarily complicated , @xmath401 always allows efficient membership testing .",
    "[ gcc : lem : replacement ] for all @xmath3 , there exists a finite set @xmath402 with @xmath403 .",
    "let @xmath404 .",
    "let @xmath405 be the greatest common divisor of all numbers in @xmath0 .",
    "there exists an @xmath406 such that @xmath407 is also the greatest common divisor of @xmath408 .    if @xmath409 , then @xmath410 , and we are done .",
    "thus , we assume @xmath411",
    ". there exist @xmath412 and @xmath413 for some @xmath70 with @xmath414 .",
    "let @xmath415 .",
    "we have @xmath416 since @xmath411 .",
    "choose any @xmath417 and let @xmath418 .",
    "let @xmath419 with @xmath420 , let @xmath421 , and let @xmath422 .",
    "we can write @xmath397 as @xmath423 since @xmath424 and @xmath425 , we have @xmath426 for all @xmath305 .",
    "hence , @xmath427 contains all elements @xmath419 with @xmath420 .",
    "elements of @xmath401 smaller than @xmath312 are contained in @xmath428 .",
    "hence , @xmath429 and @xmath430 is the finite set we are looking for .    for every fixed @xmath0",
    ", we can not only test in time polynomial in @xmath397 whether @xmath397 is @xmath0-admissible , but we can , provided that @xmath419 , also find numbers @xmath431 that add up to @xmath397 , where @xmath402 denotes a finite set with @xmath432 .",
    "this can be done via dynamic programming in time @xmath433 , which is @xmath434 for fixed @xmath0 .",
    "although @xmath432 , there are clearly graphs for which the weights of an optimal @xmath0-cycle cover and an optimal @xmath435-cycle cover differ : let @xmath436 and consider a @xmath11-vertex graph where all edge weights are zero except for one hamiltonian cycle of weight one edges .",
    "however , this does not matter for our approximation algorithms .",
    "the two approximation algorithms presented in sections  [ ssec : undirectedalg ] and  [ ssec : directedalg ] are based on a decomposition technique for cycle covers presented in section  [ ssec : decomposition ] .      in this section",
    ", we present a decomposition technique for cycle covers .",
    "the technique can be applied to cycle covers of undirected graphs but also to directed cycle covers that do not contain 2-cycles .",
    "a is a single edge ( or a path of length one ) in a graph , while a is a path of length two .",
    "our aim is to decompose a cycle cover @xmath9 on @xmath397 vertices into roughly @xmath437 singles , @xmath437 doubles , and @xmath437 isolated vertices .",
    "if @xmath397 is not divisible by six , we replace @xmath437 by @xmath438 or @xmath439 : if @xmath440 for @xmath441 and @xmath442 , then we take @xmath443 singles and @xmath444 doubles , where @xmath445 and @xmath446 are given in table  [ tab : alphabeta ] . thus , we retain half of the edges of @xmath9 .",
    "we aim to decompose the cycle covers such that at least half of the weight of the cycle cover is preserved .",
    ".a cycle cover on @xmath447 vertices will be decomposed into @xmath443 singles and @xmath448 doubles . [ cols=\"<,^,^,^,^,^,^\",options=\"header \" , ]     the reason why we decompose cycle covers into singles and doubles is the following : we can not decompose them into longer paths in general since this does not work for @xmath449-cycle covers .",
    "if we restricted ourselves to decomposing the cycle covers into singles only , then @xmath450-cycles would limit the weight preserved : we would retain only one third of the edges of the 3-cycles , thus at most one third of their weight in general .",
    "finally , if we restricted ourselves to doubles , then @xmath451-cycles would limit the weight we could obtain since we would retain only two of their five edges .    in our approximation algorithms ,",
    "we exploit the following observation : if every cycle cover on @xmath397 vertices can be decomposed into @xmath45 singles and @xmath452 doubles , then , for every @xmath0 , every @xmath0-cycle cover on @xmath397 vertices can be decomposed in the same way .",
    "this implies that we can build cycle covers from such a decomposition : given @xmath45 singles and @xmath452 doubles , and @xmath453 isolated vertices , we can join them to form an @xmath0-cycle cover .",
    "( the only restriction is that @xmath397 must be @xmath0-admissible . )",
    "let us now state the decomposition lemma .",
    "[ lem : decomposition ] let @xmath454 be a cycle cover on @xmath455 vertices such that the length of each cycle is at least three .",
    "let @xmath456 be an edge weight function .",
    "then there exists a decomposition @xmath457 of @xmath9 such that @xmath458 consists of vertex - disjoint @xmath443 singles , @xmath448 doubles , and @xmath459 isolated vertices and @xmath460 , where @xmath445 and @xmath446 are given in table  [ tab : alphabeta ] .",
    "the decomposition can be done in polynomial time .",
    "figure  [ fig : decomposition ] illustrates how a cycle cover is decomposed into singles and doubles .",
    "let us first prove some helpful lemmas .",
    "[ cla : basicdecomp ] let @xmath461 with @xmath462 and @xmath463 .",
    "then every cycle @xmath103 of length @xmath11 can be decomposed into @xmath45 singles and @xmath452 doubles such that the weight of the decomposition is at least @xmath464 .",
    "every single involves two vertices of @xmath103 while every double involves three vertices .",
    "thus , @xmath463 is a necessary condition for @xmath103 being decomposable into @xmath45 singles and @xmath452 doubles .",
    "it is also a sufficient condition .",
    "we assign an arbitrary orientation to @xmath103 .",
    "let @xmath465 be the consecutive edges of @xmath103 , where @xmath466 is chosen uniformly at random among the edges of @xmath103 .",
    "we take @xmath45 singles @xmath467 and @xmath452 doubles @xmath468 . since @xmath463 ,",
    "this is a feasible decomposition .",
    "the probability that any fixed edge of @xmath103 is included in the decomposition is @xmath469 .",
    "thus , the expected weight of the decomposition is @xmath470 .",
    "[ cla : plussix ] let @xmath471 .",
    "suppose that every cycle @xmath103 of length @xmath11 can be decomposed into @xmath45 singles and @xmath452 doubles of weight at least @xmath464 .",
    "then every cycle @xmath472 of length @xmath473 can be decomposed into @xmath474 singles and @xmath475 doubles of weight at least @xmath476 .",
    "we have @xmath477 and @xmath463 .",
    "thus , @xmath478 and @xmath479 .",
    "the lemma follows from lemma  [ cla : basicdecomp ] .",
    "lemma  [ cla : plussix ] also holds if we consider more than one cycle : assume that every collection of @xmath23 cycles of lengths @xmath480 can be decomposed into @xmath45 singles and @xmath452 doubles such that the weight of the decomposition is at least half the weight of the cycles",
    ". then @xmath23 cycles of lengths @xmath481 can be decomposed into @xmath474 singles and @xmath482 doubles such that also at least half of the weight of the cycles is preserved . due to lemma  [ cla : plussix ] ,",
    "we can restrict ourselves to cycles of length at most eight in the following .",
    "the reason for this is the following : if we know how to decompose cycles of length @xmath11 , then we also know how to decompose cycles of length @xmath483 from lemma  [ cla : plussix ] .",
    "we are now prepared to prove lemma  [ lem : decomposition ] .",
    "we prove the lemma by induction on the number of cycles .",
    "as the induction basis , we consider a cycle cover consisting of either a single cycle or of two odd cycles . due to lemma  [ cla : plussix ] , we can restrict ourselves to considering cycles of length at most eight .",
    "tables  [ subfig : baseonecycle ] and  [ subfig : basetwocycles ] show how to decompose a single cycle and two odd cycles , respectively . we always perform the decomposition such that the weight preserved is maximized .",
    "in particular , if there are two odd cycles of different length , we have two options in how to decompose these cycles , and we choose the one that yields the larger weight .",
    "overall , we obtain a decomposition with an appropriate number of singles and doubles that preserves at least one half of the weight .    as the induction hypothesis",
    ", we assume that the lemma holds if the number of cycles is less than @xmath484 .",
    "assume that we have a cycle cover @xmath9 consisting of @xmath484 cycles .",
    "let @xmath455 for the number of its vertices for @xmath441 and @xmath442 .",
    "we remove either an even cycle or two odd cycles . in the following ,",
    "let @xmath193 be the new cycle cover obtained by removing one or two cycles from @xmath9 .",
    "a little more care is needed than in the induction basis : consider for instance the case of removing a @xmath229-cycle .",
    "if @xmath485 , then @xmath9 has to be decomposed into @xmath23 singles and @xmath486 doubles , while we have to take @xmath23 singles and @xmath23 doubles from @xmath193 .",
    "thus , the 4-cycle has to be decomposed into a double .",
    "but if @xmath487 , then we need @xmath486 singles and @xmath23 doubles from @xmath9 and @xmath488 singles and @xmath23 doubles from @xmath193 .",
    "thus , the @xmath229-cycle has to be decomposed into two singles .",
    "overall , the @xmath229-cycle has to be decomposed into a double if @xmath489 and into two singles if @xmath490 .",
    "similar case distinctions hold for all other cases . how to remove one even or two odd cycles is shown in tables  [ subfig : onecycle ] and  [ subfig : twocycles ] , respectively .",
    "to complete the proof , we have to deal with the case of a @xmath450- and a @xmath451-cycle , which is slightly more complicated and not covered by table  [ subfig : twocycles ] .",
    "we run into trouble if , for instance , @xmath491 . in this case",
    ", we have to take two doubles . if the 5-cycle is much heavier than the 3-cycle , then it is impossible to preserve half of the weight of the two cycles .",
    "but we can avoid this problem : as long as there is an even cycle , we decompose this one . after that , as long as there are at least three odd cycles , we can choose two of them such that we do not have a pair of one @xmath492-cycle and one @xmath493-cycle for some @xmath494 .",
    "the only situation in which it can happen that we can not avoid decomposing a @xmath492-cycle and a @xmath493-cycle is when there are only two cycles left . in this case",
    ", we have @xmath495 , and we have treated this case already in the induction basis .    if we consider directed graphs where @xmath1-cycles can also occur , only one third of the weight can be preserved .",
    "this can be done by decomposing the cycle cover into a matching of cardinality @xmath496 .",
    "( every @xmath11-cycle for can be decomposed into a matching of size up to @xmath497 .",
    "the bottleneck are @xmath450-cycles , which yield only one edge . )",
    "an obvious question is whether the decomposition lemma can be improved in order to preserve more than half of the weight or more than one third of the weight if we additionally allow @xmath1-cycles .",
    "unfortunately , this is not the case .",
    "a generic decomposition lemma states the following : for every @xmath498 , every @xmath23-cycle cover ( for @xmath499 ) on @xmath397 vertices can be decomposed into @xmath45 singles and @xmath452 doubles such that at least a fraction @xmath484 of the weight of the cycle cover is preserved .",
    "( as already mentioned , longer paths are impossible due to @xmath450-cycles . )",
    "lemma  [ lem : decomposition ] instantiates this generic lemma with @xmath500 , @xmath501 , and @xmath502 . in case of the presence of @xmath1-cycles ,",
    "we have sketched a decomposition with @xmath503 , @xmath504 , and @xmath505 .",
    "[ lem : tight ] no decomposition technique for @xmath450-cycle covers can in general preserve more than one half of the weight of the @xmath450-cycle covers .    furthermore , no decomposition technique for @xmath1-cycle covers can in general preserve more than one third of the weight of the @xmath1-cycle covers .",
    "we exploit the fact that the fraction of edges that are preserved in a cycle cover decomposition is a lower bound for the fraction of the weight that can be preserved .",
    "since , in particular , @xmath449-cycle covers have to be decomposed , we can not decompose the cycle cover into paths of length more than two .",
    "now consider decomposing a @xmath506-cycle cover .",
    "since paths of length @xmath450 are not allowed , we have to discard two edges of every @xmath229-cycle .",
    "thus , at most @xmath1 edges of every @xmath229-cycle are preserved , which proves the first part of the lemma .",
    "the second part follows analogously by considering @xmath450-cycles and observing that paths of length two or more are not allowed .",
    "overall , lemma  [ lem : tight ] shows that every approximation algorithm for l or l that works for arbitrary sets @xmath0 and is purely decomposition - based achieves approximation ratios of at best @xmath1 or @xmath450 , respectively .",
    "we achieve an approximation ratio of @xmath507 for l by paying special attention to @xmath1-cycles ( section  [ ssec : directedalg ] ) .",
    "our approximation algorithm for l ( algorithm  [ algo : undirected ] ) directly exploits lemma  [ lem : decomposition ] .",
    "algorithm  [ algo : undirected ] is a factor @xmath1 approximation algorithm for l for all @xmath21 .",
    "its running - time is @xmath508 .",
    "if @xmath0 is infinite , we replace @xmath0 by a finite set @xmath402 with @xmath403 according to lemma  [ gcc : lem : replacement ] . algorithm  [ algo : undirected ] returns @xmath509 if and only if @xmath510 .",
    "otherwise , an @xmath0-cycle cover @xmath511 is returned .",
    "let @xmath512 denote an @xmath0-cycle cover of maximum weight of @xmath7 .",
    "we have @xmath513 .",
    "the first inequality holds because @xmath0-cycle covers are special cases of cycle covers .",
    "the second inequality holds due to the decomposition lemma ( lemma  [ lem : decomposition ] ) .",
    "the last inequality holds since no weight is lost during the joining .",
    "overall , the algorithm achieves an approximation ratio of @xmath1 .",
    "the running - time of the algorithm is dominated by the time needed to compute the initial cycle cover , which is @xmath508  ( * ? ? ?",
    "* chapter  12 ) .    undirected complete graph @xmath514 , @xmath515 ; edge weights @xmath17 an @xmath0-cycle cover @xmath511 of @xmath7 if @xmath397 is @xmath0-admissible , @xmath509 otherwise * return *",
    "@xmath509 compute a cycle cover @xmath516 in @xmath7 of maximum weight decompose @xmath516 into a set @xmath517 of edges according to lemma  [ lem : decomposition ] join the singles and doubles in @xmath518 to obtain an @xmath0-cycle cover @xmath511 * return * @xmath511      in the following , let @xmath519 be an @xmath0-cycle cover of maximum weight . let @xmath520 denote the weight of the @xmath11-cycles in @xmath519 , , @xmath521 .",
    "directed complete graph @xmath514 , @xmath515 ; edge weights @xmath17 an @xmath0-cycle cover @xmath511 of @xmath7 if @xmath397 is @xmath0-admissible , @xmath509 otherwise * return * @xmath509 compute a cycle cover @xmath516 ( without restrictions ) take every other edge of @xmath103 such that at least one half of @xmath103 s weight is preserved add the converse edges to obtain @xmath1-cycles ; add these cycles to @xmath511 take every other edge and one path of length two of @xmath103 such that at least one half of @xmath103 s weight is preserved add edges to obtain @xmath1-cycles plus one @xmath450-cycle ; add these cycles to @xmath511 compute a matching @xmath522 of maximum weight of cardinality at most @xmath523 join the edges of @xmath522 to form an @xmath0-cycle cover @xmath511  ( @xmath355 ) compute a @xmath54-approximation @xmath524 to an optimal @xmath450-cycle cover decompose @xmath524 into a set @xmath525 of edges according to lemma  [ lem : decomposition ] join the singles and doubles in @xmath518 to obtain an @xmath0-cycle @xmath511 * return * @xmath511    we distinguish three cases : first , @xmath355 , second , @xmath358 and @xmath526 , and third , @xmath527 .",
    "we use the decomposition lemma ( lemma  [ lem : decomposition ] ) only if @xmath355 . in this case",
    ", the weight of an optimal @xmath0-cycle cover is at most the weight of an optimal @xmath450-cycle cover @xmath528 .",
    "thus , we proceed as follows : first , we compute a @xmath54 approximation @xmath524 for 3 , which can be done by using the algorithm of blser et al .  @xcite .",
    "we have @xmath529 .",
    "now we decompose @xmath524 into a collection @xmath518 of singles and doubles according to lemma  [ lem : decomposition ] .",
    "finally , we join the singles , doubles , and isolated vertices of @xmath518 to form an @xmath0-cycle cover @xmath511 .",
    "we obtain a factor @xmath2 approximation for the case that @xmath355 : @xmath530    now we consider the case that @xmath358 and @xmath526 . in this case",
    ", a matching - based algorithm achieves an approximation ratio of @xmath531 : we compute a matching of a certain cardinality , which we will specify in a moment , and then we join the edges of the matching to obtain an @xmath0-cycle cover .",
    "the cardinality of the matching is chosen such that an @xmath0-cycle cover can be built from such a matching .",
    "a @xmath11-cycle yields a matching of cardinality @xmath532 .",
    "thus , a matching of cardinality @xmath533 in a graph of @xmath397 vertices can be extended to form an @xmath0-cycle cover if and only if @xmath534 , where @xmath535 given @xmath0 , we can compute @xmath523 using dynamic programming .",
    "let us now estimate the weight of a matching of cardinality at most @xmath523 that has maximum weight among all such matchings . from @xmath519",
    ", we obtain a matching with a weight of at least @xmath536 the reason is that @xmath537 because @xmath526 and that @xmath538 .",
    "thus , by computing a maximum - weight matching @xmath522 of cardinality at most @xmath539 and joining the edges to form an @xmath0-cycle cover @xmath511 , we obtain a factor @xmath531 approximation .",
    "what remains to be considered is the case that @xmath540 . in this case",
    ", we start by computing an initial cycle cover @xmath516 ( without any restrictions ) .",
    "then we do the following : for every even cycle , we take every other edge such that at least one half of its weight is preserved . for every edge",
    "thus obtained , we add the converse edge to obtain a collection of @xmath1-cycles .",
    "for every odd cycle , we take every other edge and one path of length two such that at least half of the weight is preserved . then we add edges to obtain @xmath1-cycles and one @xmath450-cycle . in this way",
    ", we obtain a @xmath541-cycle cover @xmath511 , which is also an @xmath0-cycle cover .",
    "we have @xmath542 .",
    "figure  [ fig : directeddecomp ] shows an example .",
    "our approximation algorithm is summarized as algorithm  [ algo : directed ] .",
    "the running - time of the algorithm of blser et al .",
    "is polynomial  @xcite and all other steps can be executed in polynomial time as well .",
    "thus , the running - time of algorithm  [ algo : directed ] is also polynomial .",
    "algorithm  [ algo : directed ] is a factor @xmath2 approximation algorithm for l for all non - empty sets @xmath24 .",
    "its running - time is polynomial .",
    "+    for almost all @xmath0 , finding @xmath0-cycle covers is -hard and finding @xmath0-cycle covers of maximum weight is -hard .",
    "table  [ tab : newworld ] shows an overview .",
    "although this shows that computing restricted cycle covers is generally very hard , we have proved that @xmath0-cycle covers of maximum weight can be approximated within a constant factor in polynomial time for all  @xmath0 .    for directed graphs",
    ", we have settled the complexity : if @xmath58 or @xmath361 , then l , l , and l are solvable in polynomial time , otherwise they are intractable . for undirected graphs ,",
    "the status of only five cycle cover problems remains open : l and l for @xmath543 and 4 .",
    "there are some reasons for optimism that l and l for @xmath543 are solvable in polynomial time : hartvigsen  @xcite devised a polynomial - time algorithm for finding @xmath544-cycle covers in bipartite graphs ( forbidding @xmath450-cycles does not change the problem for bipartite graphs ) .",
    "moreover , there are augmenting path theorems for @xmath0-cycle covers for all @xmath0 with @xmath545  @xcite , which includes the two cases that are known to be polynomial - time solvable . augmenting path theorems are often a building block for matching algorithms .",
    "but there are also augmenting path theorems for @xmath546  @xcite , even though these @xmath0-cycle cover problems are intractable .",
    "i thank jan arpe and martin bhme for valuable discussions and comments .",
    "markus blser . a 3/4-approximation algorithm for maximum atsp with weights zero and one . in klaus jansen , sanjeev khanna , jos d.  p. rolim , and dana ron , editors , _ proc . of the 7th int .",
    "workshop on approximation algorithms for combinatorial optimization problems ( approx ) _ , volume 3122 of _ lecture notes in computer science _ ,",
    "pages 6171 .",
    "springer , 2004 .",
    "markus blser , l.  shankar ram , and maxim  i. sviridenko .",
    "improved approximation algorithms for metric maximum atsp and maximum 3-cycle cover problems . in frank dehne , alejandro lpez - ortiz , and jrg - rdiger sack ,",
    "editors , _ proc . of the 9th workshop on algorithms and data structures ( wads )",
    "_ , volume 3608 of _ lecture notes in computer science _ , pages 350359 .",
    "springer , 2005 .",
    "markus blser and bodo siebert .",
    "computing cycle covers without short cycles . in friedhelm",
    "meyer auf  der heide , editor , _ proc . of the 9th ann .",
    "european symp . on algorithms ( esa )",
    "_ , volume 2161 of _ lecture notes in computer science _ , pages 368379 .",
    "springer , 2001 .",
    "bodo siebert is the birth name of bodo manthey .",
    "paul  c. gilmore , eugene  l. lawler , and david  b. shmoys .",
    "well - solved special cases . in eugene",
    "l. lawler , jan  karel lenstra , alexander h. g.  rinnooy kan , and david  b. shmoys , editors , _ the traveling salesman problem : a guided tour of combinatorial optimization _ , pages 87143 .",
    "john wiley & sons , 1985 .",
    "bodo manthey .",
    "approximation algorithms for restricted cycle covers based on cycle decompositions . in fedor  v. fomin , editor , _ proc . of the 32nd int .",
    "workshop on graph - theoretical concepts in computer science ( wg ) _ , volume 4271 of _ lecture notes in computer science _ ,",
    "pages 336347 , 2006 .",
    "bodo manthey . on approximating restricted cycle covers . in thomas erlebach and giuseppe persiano , editors ,",
    "_ proc . of the 3rd workshop on approximation and online algorithms ( waoa 2005 )",
    "_ , volume 3879 of _ lecture notes in computer science _ , pages 282295 .",
    "springer , 2006 ."
  ],
  "abstract_text": [
    "<S> a cycle cover of a graph is a set of cycles such that every vertex is part of exactly one cycle . </S>",
    "<S> an @xmath0-cycle cover is a cycle cover in which the length of every cycle is in the set @xmath0 . </S>",
    "<S> the weight of a cycle cover of an edge - weighted graph is the sum of the weights of its edges .    </S>",
    "<S> we come close to settling the complexity and approximability of computing @xmath0-cycle covers . on the one hand , we show that for almost all @xmath0 , computing @xmath0-cycle covers of maximum weight in directed and undirected graphs is -hard . </S>",
    "<S> most of our hardness results hold even if the edge weights are restricted to zero and one .    </S>",
    "<S> on the other hand , we show that the problem of computing @xmath0-cycle covers of maximum weight can be approximated within a factor of @xmath1 for undirected graphs and within a factor of @xmath2 in the case of directed graphs . </S>",
    "<S> this holds for arbitrary sets @xmath0 . </S>"
  ]
}