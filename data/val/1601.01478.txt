{
  "article_text": [
    "stuttering equivalence @xcite and branching bisimulation @xcite were proposed as alternatives to milner s weak bisimulation @xcite .",
    "they are very close to weak bisimulation , with as essential difference that all states in the mimicking sequence @xmath6 must be related to either the state before or directly after the @xmath7 from the first system .",
    "this means that branching bisimulation and stuttering equivalence are slightly stronger notions than weak bisimulation .    in @xcite",
    "an @xmath5 time algorithm was proposed for stuttering equivalence and branching bisimulation , where @xmath2 is the number of transitions and @xmath1 is the number of states in either a kripke structure ( for stuttering equivalence ) or a labelled transition system ( for branching bisimulation ) .",
    "we refer to this algorithm as gv .",
    "it is based upon the @xmath5 algorithm for bisimulation equivalence in @xcite .",
    "both algorithms require @xmath8 space .",
    "they calculate for each state whether it is bisimilar to another state .",
    "the basic idea of the algorithms of @xcite is to partition the set of states into blocks .",
    "states that are bisimilar always reside in the same block . whenever there are some states in a block @xmath9 from which a transition is possible to some block @xmath10 and there are other states in @xmath9 from which such a step is not possible , @xmath9 is split accordingly .",
    "whenever no splitting is possible anymore , the partition is called stable , and two states are in the same block iff they are bisimilar .",
    "there have been some attempts to come up with improvements of gv .",
    "the authors of @xcite observed that gv only splits a block in two parts at a time .",
    "they proposed to split a block in as many parts as possible , reducing moving states and transitions to new blocks . their worst case time and",
    "space complexities are worse than that of gv , especially the space complexity @xmath5 , but in practice this algorithm can outperform gv . in @xcite , the space complexity is brought back to @xmath8 .",
    "a technique to be performed on graphics processing units based on both gv and  @xcite is proposed in  @xcite .",
    "this improves the required runtime considerably by employing parallelism , but it does not imply any improvement to the single - threaded algorithm .    in @xcite an @xmath0 algorithm is proposed for strong bisimulation as an improvement upon the algorithm of @xcite . the core idea for this improvement",
    "is described as `` process the smaller half ''  @xcite . whenever a block is split in two parts the amount of work",
    "must be contributed to the size of the smallest resulting block . in such a case a state",
    "is only involved in the process of splitting if it resides in a block at most half the size of the block it was previously in when involved in splitting .",
    "this means that a state can never be involved in more than @xmath11 splittings . as the time used in each state is proportional to the number of incoming or outgoing transitions in that state , the total required time is @xmath0 .    in this paper",
    "we propose the first algorithm for stuttering equivalence and branching bisimulation in which the `` process the smaller half''-technique is used . by doing so",
    ", we can finally confirm the conjecture in  @xcite that such an improvement of gv is conceivable .",
    "moreover , we achieve an even lower complexity , namely @xmath0 , than conjectured in  @xcite by applying the technique twice , the second time for handling the presence of inert transitions .",
    "first we establish whether a block can be split by combining the approach regarding bottom states from gv with the detection approach in  @xcite .",
    "subsequently , we use the `` process the smaller half''-technique again to split a block by only traversing transitions in a time proportional to the size of the smallest subblock .",
    "as it is not known which of the two subblocks is smallest , the transitions of the two subblocks are processed alternatingly , such that the total processing time can be contributed to the smallest block . for checking behavioural equivalences , applying such a technique",
    "is entirely new .",
    "we are only aware of a similar approach for an algorithm in which the smallest bottom strongly connected component of a graph needs to be found  @xcite .",
    "the algorithm that we propose is complex .",
    "although the basic sketch of the algorithm is relatively straightforward , it heavily relies on auxiliary data structures .",
    "for instance , for each transition it is recalled how many other transitions there are from the block where the transition starts to the constellation in which the transition ends .",
    "maintaining such auxiliary data structures is a tedious process .",
    "therefore , we do not only prove the major steps of the algorithm correct , we also provide a very detailed description of the algorithm , and we ran the implemented algorithm on many thousands of randomly generated test cases , comparing the reductions with the outcomes of existing algorithms .",
    "this not only convinced us that the algorithm is correct and correctly implemented , it also allows others to easily reimplement the algorithm .    from a theoretical viewpoint",
    "our algorithm outperforms its predecessors substantially . but",
    "a fair question is whether this also translates into practice .",
    "the theoretical bounds are complexity upperbounds , and depending on the transition system , the classical algorithms can be much faster than the upperbound suggests .",
    "furthermore , the increased bookkeeping in the new algorithm may be such a burden that all gains are lost .",
    "for this reason we compared the practical performance of our algorithm with that of the predecessors , and we found that for practical examples our algorithm can always match the best running times , but especially when the kripke structures and transition systems get large , our algorithm tends to outperform existing algorithms with orders of magnitude .    compared to checking other equivalences the existing algorithms for branching bisimulation / stuttering equivalence were already known to be practically very efficient .",
    "this is the reason that they are being used in multiple explicit - state model checkers , such as cadp  @xcite , the mcrl2 toolset  @xcite and tvt  @xcite .",
    "in particular they are being used as preprocessing steps for other equivalences ( weak bisimulation , trace based equivalences ) that are much harder to compute . for weak bisimulation recently a @xmath12 algorithm has been devised @xcite , but until that time an expensive transitive closure operation of at best @xmath13 was required . using our algorithm as a preprocessing step",
    ", the computation time of all other behavioural ` weak ' equivalences can be made faster .",
    "we introduce kripke structures and ( divergence - blind ) stuttering equivalence .",
    "labelled transitions systems and branching bisimulation will be addressed in section [ sec : bbisim ] .",
    "kripke structure a _ kripke structure _ is a four tuple @xmath14 , where    @xmath15 is a finite set of states .",
    "@xmath16 is a finite set of atomic propositions .",
    "@xmath17 is a total transition relation , i.e. , for each @xmath18 there is an @xmath19 s.t .",
    "@xmath20 .",
    "@xmath21 is a state labelling .",
    "we use @xmath22 for the number of states and @xmath23 for the number of transitions . for a set of states",
    "@xmath24 , we write @xmath25 for @xmath20 and @xmath26 , and @xmath27 iff there is some @xmath26 such that @xmath20 .",
    "we write @xmath28 and @xmath29 iff it is not the case that @xmath20 , resp .",
    ", @xmath27 .",
    "divergence - blind stuttering equivalence let @xmath30 be a kripke structure .",
    "a symmetric relation @xmath31 is a _ divergence - blind stuttering equivalence _",
    "iff for all @xmath32 such that @xmath33 :    @xmath34 .    for all @xmath19 if @xmath20 , then there are @xmath35 for some @xmath36 such that @xmath37 , @xmath38 , @xmath39 , and @xmath40 for all @xmath41 .",
    "we say that two states @xmath32 are _ divergence - blind stuttering equivalent _ , notation @xmath42{$\\leftrightarrow$}}$}\\,}}_{\\mathit{dbs } } } t$ ] , iff there is a divergence - blind stuttering equivalence relation @xmath43 such that @xmath33 .",
    "an important property of divergence - blind stuttering equivalence is that if states on a loop all have the same label then all these states are divergence - blind stuttering equivalent .",
    "we define stuttering equivalence in terms of divergence - blind stuttering equivalence using the following kripke structure .",
    "stuttering equivalence let @xmath30 be a kripke structure .",
    "define the kripke structure @xmath44 where @xmath45 is an atomic proposition not occurring in @xmath16 and @xmath46 is a fresh state not occurring in @xmath15 .",
    "furthermore ,    @xmath47 is on a cycle of states all labelled with @xmath48 , or @xmath49 .",
    "for all @xmath18 we define @xmath50 and @xmath51 .",
    "states @xmath32 are _ stuttering equivalent _ , notation @xmath42{$\\leftrightarrow$}}$}\\,}}_s } t$ ] iff there is a divergence - blind stuttering equivalence relation @xmath43 on @xmath52 such that @xmath33 .",
    "note that an algorithm for divergence - blind stuttering equivalence can also be used to determine stuttering equivalence by employing only a linear time and space transformation .",
    "therefore , we only concentrate on an algorithm for divergence - blind stuttering equivalence .",
    "our algorithms perform partition refinement of an initial partition containing the set of states @xmath15 .",
    "a _ partition _",
    "@xmath53 is a set of non empty subsets such that @xmath54 for all @xmath55 and @xmath56 .",
    "each @xmath57 is called a _ block_.",
    "we call a transition @xmath58 _ inert w.r.t",
    ".  @xmath59 _ iff @xmath60 and @xmath61 are in the same block @xmath62 .",
    "we say that a partition @xmath59 _ coincides _ with divergence - blind stuttering equivalence when @xmath42{$\\leftrightarrow$}}$}\\,}}_{\\mathit{dbs } } } t$ ] iff there is a block @xmath63 such that @xmath64 .",
    "we say that a partition _ respects _ divergence - blind stuttering equivalence iff for all @xmath32 if @xmath42{$\\leftrightarrow$}}$}\\,}}_{\\mathit{dbs } } } t$ ] then there is some block @xmath63 such that @xmath64 .",
    "the goal of the algorithm is to calculate a partition that coincides with divergence - blind stuttering equivalence .",
    "this is done starting with the initial partition @xmath65 consisting of blocks @xmath10 satisfying that if @xmath64 then @xmath34 .",
    "note that this initial partition respects divergence - blind stuttering equivalence .",
    "we say that a partition @xmath59 is _ cycle - free _ iff there is no state @xmath66 such that @xmath67 @xmath68 for some @xmath36 for each block @xmath63 .",
    "it is easy to make the initial partition @xmath65 cycle - free by merging all states on a cycle in each block into a single state .",
    "this preserves divergence - blind stuttering equivalence and can be performed in linear time employing a standard algorithm to find strongly connected components  @xcite .",
    "the initial partition is refined until it coincides with divergence - blind stuttering equivalence .",
    "given a block @xmath9 of the current partition and the union @xmath69 of some of the blocks in the partition , we define @xmath70 note that if @xmath71 , then @xmath72 .",
    "the sets @xmath73 and @xmath74 are intended as the new blocks to replace @xmath9 .",
    "it is common to split blocks under single blocks , i.e. , @xmath69 corresponding with a single block @xmath63  @xcite .",
    "however , as indicated in @xcite , it is required to split under the union of some of the blocks in @xmath59 to obtain an @xmath0 algorithm .",
    "we refer to such unions as _ constellations_. in section  [ sec : constellations ] , we use constellations consisting of more than one block in the splitting .",
    "we say that a block @xmath9 is _ unstable _ under @xmath69 iff @xmath75 and @xmath74 @xmath76 .",
    "a partition @xmath59 is _ unstable _ under @xmath69 iff there is at least one @xmath77 which is unstable under @xmath69 .",
    "if @xmath59 is not unstable under @xmath69 then it is called _",
    "stable under _",
    "if @xmath59 is stable under all @xmath69 , then it is simply called stable .",
    "a _ refinement _ of @xmath77 under @xmath69 consists of two new blocks @xmath73 and @xmath74 .",
    "a partition @xmath78 is a refinement of @xmath59 under @xmath69 iff all unstable blocks @xmath77 have been replaced by new blocks @xmath73 and @xmath74 .",
    "the following lemma expresses that if a partition is stable then it coincides with divergence - blind stuttering equivalence .",
    "it also says that during refinement , the encountered partitions respect divergence - blind stuttering equivalence and remain cycle - free .      1 .   for all states @xmath32 , if @xmath64 with @xmath10 a block of the partition @xmath59 , @xmath59 is stable , and a refinement of the initial partition @xmath65 , then @xmath42{$\\leftrightarrow$}}$}\\,}}_\\mathit{dbs } } t$ ] .",
    "if @xmath59 respects divergence - blind stuttering equivalence then any refinement of @xmath59 under the union of some of the blocks in @xmath59 also respects it .",
    "if @xmath59 is a cycle - free partition , then any refinement of @xmath59 is also cycle - free .    1 .",
    "we show that if @xmath59 is a stable partition , the relation @xmath80 is a divergence - blind stuttering equivalence .",
    "it is clear that @xmath43 is symmetric .",
    "assume @xmath33 .",
    "obviously , @xmath34 because @xmath64 and @xmath10 refines the initial partition . for",
    "the second requirement of divergence - blind stuttering equivalence , suppose @xmath81 .",
    "there is a block @xmath9 such that @xmath82 .",
    "as @xmath59 is stable , it holds for @xmath83 that @xmath84 for some @xmath36 , @xmath85 and @xmath86 .",
    "this clearly shows that for all @xmath41 @xmath38 , and @xmath40 .",
    "so , @xmath43 is a divergence - blind stuttering equivalence , and therefore it holds for all states @xmath32 that reside in the same block of @xmath59 that @xmath42{$\\leftrightarrow$}}$}\\,}}_\\mathit{dbs}}t$ ] .",
    "the second part can be proven by reasoning towards a contradiction .",
    "let us assume that a partition @xmath78 that is a refinement of @xmath59 under @xmath69 does not respect divergence - blind stuttering equivalence , although @xmath59 does",
    ". hence , there are states @xmath87 with @xmath88{$\\leftrightarrow$}}$}\\,}}_{\\mathit{dbs } } } t$ ] and a block @xmath77 with @xmath89 and @xmath60 and @xmath83 are in different blocks in @xmath78 . given that @xmath78 is a refinement of @xmath59 under @xmath69 , @xmath90 and @xmath91 ( or vice versa , which can be proven similarly ) . by definition of @xmath92",
    ", there are @xmath93 ( @xmath94 ) and @xmath95 such that @xmath96 .",
    "then , either @xmath97 and @xmath71 , but then @xmath98 . or @xmath99 , and since @xmath88{$\\leftrightarrow$}}$}\\,}}_{\\mathit{dbs } } } t$ ] , there are @xmath100 ( @xmath101 ) and @xmath102 such that @xmath103 with @xmath104 for all @xmath105 , @xmath106 and @xmath107 .",
    "this means that we have @xmath108 , again contradicting that @xmath91 .",
    "3 .   if @xmath59 is cycle - free , this property is straightforward , since splitting any block of @xmath59 will not introduce cycles .",
    "s.  cranen , j.f .",
    "groote , j.j.a .",
    "keiren , f.p.m .",
    "stappers , e.p .",
    "de vink , j.w .",
    "wesselink , and t.a.c .",
    "an overview of the mcrl2 toolset and its recent advances .",
    "tacas13 , lncs 7795 , pp .",
    "199 - 213 , springer , 2013 .",
    "see also ` www.mcrl2.org ` ."
  ],
  "abstract_text": [
    "<S> we provide a new algorithm to determine stuttering equivalence with time complexity @xmath0 , where @xmath1 is the number of states and @xmath2 is the number of transitions of a kripke structure . </S>",
    "<S> this algorithm can also be used to determine branching bisimulation in @xmath3 time where @xmath4 is the set of actions in a labelled transition system .    </S>",
    "<S> theoretically , our algorithm substantially improves upon existing algorithms which all have time complexity @xmath5 at best @xcite . </S>",
    "<S> moreover , it has better or equal space complexity . </S>",
    "<S> practical results confirm these findings showing that our algorithm can outperform existing algorithms with orders of magnitude , especially when the sizes of the kripke structures are large .    </S>",
    "<S> the importance of our algorithm stretches far beyond stuttering equivalence and branching bisimulation . </S>",
    "<S> the known @xmath5 algorithms were already far more efficient ( both in space and time ) than most other algorithms to determine behavioural equivalences ( including weak bisimulation ) and therefore it was often used as an essential preprocessing step . </S>",
    "<S> this new algorithm makes this use of stuttering equivalence and branching bisimulation even more attractive . </S>"
  ]
}