{
  "article_text": [
    "one of the biggest technological challenges that characterizes major research and development work programmes , such as horizon 2020 @xcite , is to overcome the fragmentation of vertically - oriented closed systems , architectures and application areas so as to move towards open systems and platforms that can support multiple applications .",
    "the scope is to create an ecosystem composed of devices and services that satisfy crucial requirements such as interoperability , re - usability , scalability and reliability .",
    "these requirements are also looked for in the specific context of smart grid ( sg ) . among the key elements of their vision ,",
    "the smart grid s strategic research agenda of the european union @xcite and the national institute of standards and technology ( nist ) @xcite , identified the need to ensure a successful interfacing of grid equipment between vendors so as to ensure interoperability and integration of the most diverse applications ( e.g. distribution system state estimation @xcite and smart home enegy management @xcite ) .    as a matter of fact , so far only closed systems relying on a poorly interoperable approach have been used in power systems .",
    "thus , actions such as data collection , storage , access , analysis and visualization have been run independently by involved stakeholders , causing several drawbacks : managing resources and data in a closed manner limits new and innovative applications exploiting available resources and integration with cross - domain data ( e.g. weather data ) ; in a power system with new and updated components such as distributed energy resources ( ders ) , timely adaptation is compulsory for the correct functioning of the system ; with the massive amounts of data and information expected to flow with the implementation of sg technologies , data collection and analysis centers become points of criticality in case the necessary infrastructure is not timely scaled ; since the number of involved components and actors in the sg domain is growing exponentially , the need for a scalable and programmable environment allowing different views of the system is arising , which is currently not satisfied ; considering the uncertainty and variability of future power systems , applications need to dynamically adapt their computational power to changes which may occur ( e.g. in critical situations ) . in light of these considerations",
    ", we provide our contribution by proposing a cloud - based virtualization middleware for sg applications so that a digital counterpart of real entities is created allowing for representing components of various nature ( smart meters , phasor measurement units ( pmus ) , concentrators , circuit breakers , servers and many more ) into a programmable environment .",
    "this proposal can be seen as the first step towards : extending the functionalities , the features and the capabilities offered by entities and devices in various domains ; transforming them into services which share functionalities with different stakeholders and give different views depending on permission ; composing their capabilities independently from the physical component in order to allow more value - added application innovations . moreover , virtualizing physical resources @xcite allows for bringing services to the cloud .",
    "the use of cloud computing for sg applications @xcite allows for taking advantage of both elastic storage and computational capabilities as well as a cheaper infrastructure from both a capital expenditure and an operating expenditure perspective .",
    "furthermore , robustness to outages or failures in a region is provided with geographic replication .",
    "last but not least , in this paper communication with virtual entities and physical objects take place using a restful approach , which guarantees a simple yet highly - performing interfacing between system components @xcite .",
    "the remainder of the paper is organized as follows . in section [ sec : virt_sg ] , the key features of the virtualization framework and the functional blocks of the platform are presented .",
    "section [ sec : case_study ] presents a case study implemented in a cloud - based internet of things ( iot ) platform named lysis @xcite in order to show the advantages of the proposed architecture .",
    "section [ sec : res ] discusses the advantages brought by the proposed architecture .",
    "section [ sec : concl ] concludes the paper and discusses future work .",
    "in line with the reference smart grid architectural model ( sgam ) @xcite developed by cen , cenelec and etsi , and exploiting the in the iot field @xcite @xcite , the virtualization platform is organized in three levels :    * a * virtualization layer * made of so called virtual objects ( vos ) that abstract real world objects ( rwos ) such as intelligent electronic devices ( ieds ) but also process related components needing some kind of interface to the digital world ( e.g. wind turbines ) , thus hiding the underlying technological heterogeneity of rwos ; * an * aggregation layer * made of so called micro engines ( mes ) that are cognitive mash - ups of semantically interoperable vos created with the aim to aggregate vos in order to accomplish a certain high - level task and give different views to the application level depending on applications permissions ; * a * service layer * , which has the role to organize the application requirements into services to be fulfilled thanks to mes .    the use of such three - layered solution @xcite @xcite .",
    "however , its application to the sg domain has never been fully exploited . in the following ,",
    "we introduce different functional blocks composing the overall virtualization framework ( fig . [ architecture ] ) that satisfy the specific requirements of the smart grid .",
    "a vo is an abstract description that virtualizes one or more rwos , so that any application can access it or its functionalities in an interoperable way , without knowing about the means that are needed to physically reach and retrieve information from it .",
    "the scope is to help building mes , which comprise one or more vos , as well as some additional functionalities .",
    "thus vos help in rwo functionalities abstraction through a uniform way of representing data .",
    "for this reason , vos are reusable by different mes and are permanently and continuously active , monitoring and reacting to the needs coming from the aggregation level as well as to changes in the rwos .",
    "this helps the application developer to build aggregated functions very easily .",
    "for example , both a smart meter and a pmu are able to provide data about the power flowing on a given branch . by means of a virtualization layer ,",
    "these measures are decoupled from the physical object and presented as data described by metadata such as timestamp and quality of the measure .",
    "must also provide a northbound interface to the aggregation level , so that communications with the higher levels of the virtualization platform is put in place .",
    "herein , all the functional blocks composing the virtualization layer are presented and their role and responsibilities are extensively described .    *",
    "* hardware abstraction layer ( hal ) * is the interface between real world and vos which can either reside on the physical object as northbound interface , or in the cloud as southbound interface of the vo , depending on the rwo characteristics and capabilities .",
    "hal translates specific vendor functionalities of rwos into a platform - understandable language .",
    "this block is of utmost importance , since it is the only one interfacing with the real world and speaking the rwo specific language .",
    "moreover , it provides a standard communication with the virtualization level by means of rest apis ( which are better explained in the vo execution container part ) , and a standard representation using key - value pairs in json format . doing so , the virtualization platform becomes resilient to components evolutions , since rwo representation at the virtualization level is standard .",
    "* * vo execution environment * represents a virtual environment at the virtualization level , which is most likely owned by the same owner of the physical object , and made of three blocks : * * * vo execution manager * is responsible for the management of the vo .",
    "it monitors state , qos parameters as well as connectivity with the rwo and reacts to changes ( e.g. a change in the qos ) by updating important information about the vo status in the vo registry and alerting the me if needed . *",
    "* * vo access controller * deals with mes permissions to access the vo and manages access conflicts that may arise among mes ( e.g. giving priority to a given me dealing with safety critical operations over one which optimizes demand response ) . * * * vo execution container * manages actuation and data retrieval from in terms of which data need to be retrieved as well as how often they need to be retrieved . depending on the characteristics of rwos and on the needs ,",
    "vo can either receive periodic updates from the rwo automatically or request them .",
    "the kind of interfacing used depends on the specific rwo and on the hal .",
    "same considerations can be done for the actuation . *",
    "* vo management environment * is the part of the platform that manages registered vos .",
    "it is made of two components : * * * vo registry * keeps track of the description ( vo identifier , location , offered functionalities , etc . ) and status of all the running vos .",
    "therefore , each time the status of the vo changes , the registry is updated by the vo execution manager using the http post method . * * * vo request manager * is the block dealing with the phase in which requests are received to compose functionalities at the aggregation level .",
    "the vo request manager is responsible for searching available vos in the vo registry based on the requirements coming from the me request & composition manager ( see next subsection ) and the permissions which the requester has with regard to the available vos , which are granted with a key .",
    "here we suppose three kind of permissions : a vo can be freely accessible if public , accessible only by authorized parties with a _ friend key _ , accessible only by its owner with a _",
    "private key_. the vo request manager is also responsible for updating the vo access controller about new mes that are granted access to the vo .",
    "a me comprises multiple vos in order to achieve a specific functionality but it is more than just the aggregation of its parts . while vos provide a well - defined set of fine - grained functionalities that are abstracted from rwos and provided for reuse , the task of the aggregation level is to use these fine - grained functionalities and provide higher - level functionalities required by one or more services .",
    "moreover , different mes may use the same set of vos to provide different views to the service level which are compliant with stakeholders permissions and ensure proper privacy and confidentiality @xcite @xcite .",
    "for example , if a number of smart meters pertaining to a certain zone are considered , a me can provide consumption data which are aggregated over households but fine - grained over time for the sake of operational purposes . on the other hand ,",
    "another me may provide consumption data aggregated over a certain period ( e.g. one month ) but fine - grained for each household thus providing the necessary information for billing purposes .",
    "therefore , the aim of mes is to effectively link the service level and virtualization level by providing at the same time the glue intelligence and separation needed .",
    "notice that while vos are entities that represent a fixed and always - on interface to the rwo , mes can be dynamically modified in order to satisfy service requirements . here",
    ", we define the functional blocks that can be identified at the aggregation level .    *",
    "* me execution environment * are made of three blocks : * * * me execution manager * is the counterpart of the execution manager at the vo level .",
    "it keeps track of the status of the me reacting to events that may change mes status thus needing a specific action .",
    "in particular , it monitors requirements dictated by service level and uses self - management functions to meet those requirements and react to changes ( e.g. asking the me request & composition manager to reconfigure the me by choosing an alternative set of vos when service requirements can not be met ) . * * * me access controller * deals with permissions to access the me similarly to what has been presented for the virtualization level .",
    "moreover , it has a key role when a me instance is jointly used by multiple services .",
    "in fact , different services may affect the same resources operating simultaneously .",
    "this block resolves undesired conflicts and system instabilities . * * * me execution container * is the execution environment of the me instances in which data coming from the virtualization level are received , parsed and stored or sent to the necessary destination .",
    "moreover , commands coming from the upper layers are passed to the appropriate vo through this block . in other words , it takes care of actuation and data retrieval from vos , which data need to be retrieved and how often .",
    "me can either receive periodic updates from the vo automatically or request them with a get http method . in the latter case",
    ", the get method will specify all the parameters necessary for security as well as query related parameters ( e.g. for billing purposes , data about household consumption on a given interval ) . in the former case ,",
    "data is received automatically in a periodic or triggered - based manner , and the content of the updates as well as its frequency can be modified .",
    "in particular , the vo will send an http post method containing all the as well as commands such as ` start periodic updates ' , ` stop periodic updates ' , ` change information of the periodic updates ' .",
    "actuation commands take place in a similar manner . *",
    "* vo management environment * is the part of the platform at the aggregation level which is made of two components : * * * me registry * contains information for each me such as me identifier , vos connected to the me and many more .",
    "thus the focus of the me registry is to keep track of all mes . * * * me request & composition manager * handles new requests coming from a given service manager , verifies the key granting access permission and performs a search in the me registry in order to find the needed me .",
    "then , it communicates to the service manager how to reach the considered me and updates access changes in the me access controller .",
    "this block is also responsible for vo composition changes requested by the me execution manager .",
    "the service layer consists of functions ( i.e. services ) that enable sg use cases .",
    "a service represents a logical entity which performs a dedicated application task ( e.g. visualization of household consumption with a dedicated application ) .",
    "* * service request manager * is responsible for providing requests to the aggregation level in the boot process of a new service .",
    "* * service execution manager * is responsible for managing and supervising the execution of the service .",
    "in this section , the implementation of the proposed architecture is described for the case study of two smart homes , from which data about the consumption , the generation of der and realtime weather is provided ( fig .",
    "[ casestudy ] ) . for the simulations , we rely on the open umass smart * home data set of @xcite which is provided in the form of csv files . in particular , home b and c of the data set have been considered . for our simulations ,",
    "these files have been uploaded in 5 different raspberry pi 2 model b development boards , which can nevertheless be used in a real scenario , considering their capability to implement the needed hal for objects like microturbines and pv panels , as well as the interface to sensors such as temperature and humidity sensors .",
    "this represents our real world level . concerning the implementation of the virtual entities in the cloud",
    ", google app engines have been used . provide a complete platform as a service ( paas ) in which the various components have been deployed .",
    "let us now describe the role of each real and virtual entity , its accessibility ( private , friendship - based , public ) and its ownership .",
    "the next section will leverage on this discussion to highlight the properties claimed in the introduction .",
    "three kinds of rwos are considered here .",
    "weather units are supposed to be owned by resident of the home in which the unit is installed .",
    "therefore , also the corresponding vos have the same owner .",
    "these rwos provide the following measurements : timestamp , outside temperature , outside humidity , wind speed , wind direction , wind gust , heat index .",
    "in addition , the weather unit in home b also provides inside temperature and humidity .",
    "this data is sent to the corresponding vo every minute .",
    "[ fig : lysis ] shows how the registered vos appear in the platform .",
    "concerning sm and der , currently there is a lot of discussion about whether the customer , the utility or a third party should own them . here , for the sake of generality we consider both of them to be owned by a third party actor .",
    "therefore , also in this case the vos representing these physical objects have the same owner of the physical object .",
    "every minute , sms send information about consumption in kwh and the corresponding timestamp .",
    "der is composed of two wind turbines and 3 photovoltaic panels plus a battery . therefore , each minute information about power generation and about the battery level are sent to the corresponding vo .",
    "let us now analyze the aggregation and service level .",
    "home b info _ is a me which is owned by dwellers and gathers data about consumption and from the weather unit .",
    "access to the sm is guaranteed by the friend key provided by the metering operator , while weather home b is accessed with the private key .",
    "in fact , while we suppose weather units to be publicly accessible , the private key allow to receive privacy - critical information such as inside temperature and humidity , which are not provided with the public access .",
    "these information are provided in a home info visualization service which can be used by dwellers or dwellers friends which possess a friend key .",
    "the _ gen&load _ and _ 1 month cons _",
    "mes provide respectively aggregated generation and load information on a 1-minute basis and information about monthly consumption for each customer .",
    "these are provided by the third party managing sms and ders thus guaranteeing the needed level of privacy .",
    "services such as distribution automation of distribution system operators and billing of energy retailers can access this information with a friend key and use the gathered information for their own purposes .",
    "finally , public information gathered from the weather unit is aggregated in a _ weather _ me which , for example , could be owned by the municipality in order to provide open data for local weather forecast services or for distribution automation services which exploit weather conditions .    to demonstrate the adaptability property of the cloud ,",
    "the umass smart * microgrid data set of @xcite has been used , which comprises sm consumption of 400 homes in the same period . here , we assume all 400 sms sending an http post to the virtual entity in the cloud , at the beginning of a new minute .",
    "[ fig : microgrid ] shows how the performance changes with the number of instances .",
    "instances are of the virtual entity which can be created in order to satisfy high loads .",
    "this process is not visible to the senders , which utilize the same address",
    ". the number of instances can be statically or dynamically set .",
    "if dynamically set , parameters such as the minimum and maximum number of instances and triggers for scaling up and down the number of instances must be specified . from fig .",
    "[ fig : microgrid ] it can be seen that the bigger the number of instances , the better the performance of the virtual entity in satisfying http requests . in our particular case study",
    "this is important , since data for operational purposes must be updated each minute and using an instance means to delay data acquisition by almost @xmath0 seconds . finally , we have also simulated the case in which instances are dynamically scaled in order to reduce costs in a pay per use paas .",
    "in particular , instances were allowed to scale from a minimum of zero ( idle ) to a maximum of 10 .",
    "results show that at boot ( 1st minute ) the performance is initially bad but rapidly improves as soon as the instances are created . on the other hand , in all the following minutes ( @xmath1 )",
    "the performance is comparable to the one for the same static number of instances .",
    "in this section , the properties which result from the deployment of the considered virtualization middleware in the considered case study are analyzed .      in the proposed case study ,",
    "weather data is of big interest for : the owner of the house , who would like to know the weather at her dwelling location ; the distribution operator , which will combine this information with energy generation and consumption for distribution optimization ; the municipality , which can exploit various sensors across the city in order to provide open data .",
    "therefore , various actors can benefit from the same physical objects with just one of them needing to install and maintain sensors .",
    "the two weather stations in home b and c have different properties , since only the first one can provide also data about indoor temperature and humidity .",
    "nevertheless , these differences are not perceived on the aggregation level , since the particular properties of each rwo are decoupled at the virtualization level . but",
    "integration also means putting together data from different domains such as weather and energy consumption , which boosts the creation of new services such as distribution automation .",
    "different services have really diverse and sometimes variable computational needs .",
    "leveraging on cloud services such as google paas allows to overcome these problems in an affordable way , since resources can be easily scaled and paid per use .",
    "the use of keys to access data allows for reusing data coming from the same rwo without compromising privacy . in our case study",
    ", the sm can be used both for network operational management and for billing purposes . as a matter of fact , by using access keys and mes , it is ensured that actors will gather data with no more than the granularity ( in terms of time or in terms of sms data aggregation ) which has been granted to them .",
    "in this paper an internet of things platform which is cloud - based and relies on a restful interfacing has been presented . this middleware allows to break vertical domain silos of individual applications , thus making sg an integral part of the internet of things .",
    "presented architecture satisfies compulsory requirements for smart grid deployment such as reusability , integration , adaptability , security and privacy .",
    "the core rationale of this paper is to present the concept and functional blocks behind the idea of a virtualization platform with restful interfacing .",
    "the scenario presented completes the core idea by giving a practical case study in which it can be used .",
    "details about apis have been voluntarily omitted for the sake of brevity . in a extended version of this paper",
    ", we would like to present more application scenarios and give extensive information about how to create vos starting from devices with rest capabilities and about apis which are used to access vos we created .",
    "the goal is to realize a set of vos that can be used and exploited by anyone interested , in order to advance research .",
    "ec ,  secure , clean and efficient energy draft work programme \" , dec . 2014 .",
    "[ online ] .",
    "available : http://ec.europa.eu/research/horizon2020/pdf/work-programmes/secure_clean_and_efficient_energy_draft_work_programme.pdf .",
    "icore ,  architecture reference model \" , 2013 .",
    "[ online ] .",
    "available : http://www.iot-icore.eu/attachments/article/89/20130228 icore d2.3 final v2 reformatted.pdf[http://www.iot-icore.eu/attachments/article/89/20130228 icore d2.3 final v2 reformatted.pdf ] .",
    "j. gubbi , r. buyya , s. marusic , m. palaniswami ,  internet of things ( iot ) : a vision , architectural elements , and future directions \" , future generation computer systems , vol .",
    "29 , n. 7 , pp .",
    "1645 - 1660 , sep . 2013 .",
    "z. erkin , j. troncoso - pastoriza , r. lagendijk , and f. perez - gonzalez ,  privacy - preserving data aggregation in smart metering systems : an overview ,  signal processing magazine , ieee , vol .",
    "2 , pp . 7586 , march 2013 .",
    "e. mckenna , i. richardson , and m. thomson ,  smart meter data : balancing consumer privacy concerns with legitimate applications ,  energy policy , vol .",
    "807  814 , 2012 , modeling transport ( energy ) demand and policies .",
    "s. barker , a. mishra , d. irwin , e. cecchet , p. shenoy , and j. albrecht ,  smart * : an open data set and tools for enabling research in sustainable homes . \"",
    "proceedings of the 2012 workshop on data mining applications in sustainability ( sustkdd 2012 ) , beijing , china , aug . 2012 ."
  ],
  "abstract_text": [
    "<S> currently , one of the hottest topics in the internet of things ( iot ) research domain regards the issue to overcome the heterogeneity of proprietary technologies and systems so as to enable the integration of applications and devices developed for different environments in a single interoperable framework . towards this objective , </S>",
    "<S> virtualization is widely used to foster integration and creation of new services and applications . </S>",
    "<S> similar benefits are expected by its application in the smart grid arena . </S>",
    "<S> the use of a virtualization middleware is expected to enrich the capabilities and opportunities related to the use of smart grid devices . in this paper </S>",
    "<S> , we propose key features for an interoperable , re - usable , elastic and secure smart grid architecture which is cloud - based and relies on rest apis . to highlight the benefits , a practical case study is presented , where outlined functionalities are implemented in a cloud - based iot platform . </S>",
    "<S> the advantages brought by the proposed middleware in terms of interoperability , re - usability , privacy and elasticity of the underlying infrastructure are discussed .    </S>",
    "<S> internet of things , smart grid , virtualization , cyber - power system , cloud computing , restful . </S>"
  ]
}