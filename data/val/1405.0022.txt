{
  "article_text": [
    "for years , there has been strong interest in the distinction between the idealized world of computation and complexity and that of its real - world applications , particularly in problems or algorithms where we find a separation between the worst - case complexity ( or , more broadly , difficulty ) and the worst cases actually encountered in practice .",
    "the simplex algorithm for linear programming is the classic example ; there is a family of examples on which the algorithm takes exponential time @xcite , yet in practice , every problem actually encountered is solved within polynomial time bounds .",
    "even more extreme examples are known , including several problems in group theory ( including some variants of the word problem ) that are non - computable in general , but for which a low - complexity algorithm solves all examples encountered in practice .",
    "@xcite in complexity theory , current methods for exploring such structure include the average - case complexity introduced by gurevich @xcite and levin @xcite , though this is sensitive to one s choice of probability measure , as well as the smoothed analysis of spielman and tang @xcite ; however , none of these methods have been adapted to computability theory , and it may well be that none are well - suited to such problems .    taking a more direct approach ,",
    "several researchers have begun work on the question of whether an algorithm s problematic behavior might be restricted to a negligible set .",
    "this is clearly related to the analysts notion of `` almost everywhere '' , whereby one works modulo sets of measure 0 so as to disregard problematic variations with no practical effect . in a sense , this study is motivated by envy of their methods  in recent years , we have discovered problems that seem to be `` computable almost everywhere '' , and are working to find the right definition for the phrase . in this paper , we take the direct approach , studying a new definition of negligibility as applied to the non - negative integers ; we will spend most of our time fitting this idea into its proper computability - theoretic context , and then lay the foundations for further investigation into our motivating problem .",
    "the essential difficulty in defining `` computable almost everywhere '' is that there is no uniform probability measure on the integers , and thus no natural notion of a null set . instead ,",
    "if we want a uniform measurement of the size of a subset of @xmath3 , we are forced to abandon countable additivity and fall back to pseudo - measures .",
    "one of the most practical is asymptotic density .",
    "let @xmath4 , where @xmath5 is the set of natural numbers .",
    "for every @xmath6 , we denote @xmath7 by @xmath8 .",
    "we define the @xmath9-th _ partial density _ of @xmath10 as @xmath11 the _ lower density _ @xmath12 of @xmath10 is @xmath13 and the _ upper density _",
    "@xmath14 of @xmath10 is @xmath15    if the limit of the partial densities exists ( i.eifnextchar .. , @xmath16 ) , then we say that @xmath10 has _",
    "( asymptotic ) density _",
    "@xmath17    of course , @xmath18 for all @xmath4 .",
    "in an unfortunate collision of terms , at least for computability - theoretic work , a set is said to be _ generic _ if it has density 1 ( equivalently , @xmath19 ) .",
    "the name is motivated by the fact that given a generic set @xmath10 , the probability that a random integer selected from @xmath20 will lie in @xmath10 approaches 1 as @xmath9 increases ; thus , in some sense , such a set contains all generic integers .",
    "the complement of this notion is more useful for our purposes :    a set @xmath21 is said to be _",
    "negligible _ if it has density 0 ( equivalently , if @xmath22 ) .    in 2003 ,",
    "kapovich , myasnikov , schupp , and shpilrain introduced generic - case complexity @xcite , considering problems modulo sets of density 0 .",
    "they showed that this captured the phenomenon observed in several group - theoretic problems that are known to have non - computable instances while being simple to solve for every case encountered in practice ; for instance , they demonstrated that for any @xmath23 in an extremely large class of groups , the word problem for @xmath23 has linear - time generic - case complexity .",
    "myasnikov , in collaboration with hamkins , went on to apply these ideas to turing s halting problem @xcite , and proved that ( for reasons having to do with the prevalence of trivially halting or trivially non - halting programs in many models of computation ) the halting problem is `` generic - case decidable '' in said models .",
    "this was later refined by rybalov @xcite , who proved that the halting problem is _ not _ `` strongly generic - case decidable '' ( that is , decidable modulo sets with partial density converging to 0 exponentially fast ) ; this proof , by contrast , is valid for all turing - machine models of computation .",
    "jockusch and schupp @xcite have since defined and begun the study of the computability theory corresponding to generic - case complexity , and more generally the relations between asymptotic density and computability .",
    "their work has been further developed in collaboration with downey @xcite and mcnicholl @xcite , and refined in specific cases by igusa @xcite and bienvenu , hlzl , and day .",
    "@xcite    however , we return the focus to the notion of negligibility , since one would expect such a definition to have interesting ties to classical computability theory . for one ,",
    "a negligible set might be said to be `` small '' , `` sparse '' , or even `` thin '' .",
    "such `` thinness '' properties have historically been of great interest in computability ; they were the focus of post s program @xcite , the first attempt to construct an incomplete c.eifnextchar .. set , and have since proven to be of interest for unrelated reasons .    negligibility ( in the sense of asymptotic density ) is closed downwards under the subset relation ; any subset of a negligible set is itself negligible .",
    "it seems natural that it should be in the same family as the classical immunity properties , which provide the unifying computability - theoretic model for `` thinness '' .",
    "however , negligibility does not lend itself to the same analysis that we apply to immunity . choosing an alternate coding for the parameters of a membership problem is equivalent to applying a computable permutation to the underlying set , which can dramatically alter its asymptotic density .",
    "the most extreme example comes when we consider the class of infinite , co - infinite computable sets ; the resulting consequences for c.eifnextchar .. and co-c.eifnextchar .. sets are essential to the remainder of this paper .",
    "we will need one standard definition of computability theory to incorporate a result of downey , jockusch , and schupp : we say that a real @xmath24 is left-@xmath25 ( left-@xmath26 ) if its left cut is @xmath25 ( @xmath26 ) .    [ prop : computabledensity ] suppose @xmath27 is an infinite , co - infinite computable set . for any left-@xmath25 real @xmath24 and any left-@xmath26 real @xmath28 with @xmath29 , there is a computable permutation @xmath30 such that @xmath31 has lower density @xmath24 and upper density @xmath28 .",
    "we note first that there is an infinite , co - infinite computable set @xmath32 with lower density @xmath24 and upper density @xmath28 .",
    "in fact , this is nearly a theorem of downey , jockusch , and schupp @xcite , which states that for any @xmath24 and @xmath28 meeting our preconditions , there is a computable set @xmath32 with lower density @xmath24 and upper density @xmath28 .",
    "unless @xmath33 or @xmath34 , this already ensures that @xmath32 is both infinite and co - infinite ; if considering one of these cases , let @xmath32 be the set of perfect squares or its complement , respectively .",
    "since the infinite , co - infinite computable sets form an orbit under computable permutations , there is a computable permutation @xmath30 such that @xmath35 ; therefore , @xmath31 has lower density @xmath24 and upper density @xmath28 .",
    "[ cor : cedensity ] if @xmath27 is infinite and c.eifnextchar .. , there is a computable permutation such that @xmath31 has density 1 .    since @xmath27 is infinite and c.eifnextchar .. , @xmath27 has an infinite ( and co - infinite ) computable subset @xmath32 . by proposition",
    "[ prop : computabledensity ] , there is a computable permutation @xmath30 such that @xmath36 has density 1 .",
    "since @xmath37 , @xmath38 , so @xmath31 must also have density 1 .",
    "[ cor : cocedensity ] if @xmath27 is co - infinite and co-c.eifnextchar .. , there is a computable permutation @xmath30 such that @xmath31 has density 0 .",
    "since any infinite c.eifnextchar .. set has density 1 under some computable permutation , any problem that is decidable on some infinite c.eifnextchar .. subset of @xmath3 is in fact generic - case decidable if we choose the `` correct '' coding of the input .",
    "the corresponding coding is usually highly artificial , having little to do with the problem at hand .    in short ,",
    "due to the sensitivity of asymptotic density to computable permutation , generic - case computability is sensitive to the coding we choose for a given problem . as some of the great strengths of turing computability come from its invariance under choice of coding",
    ", we might hope to strengthen generic - case computability in such a way as to recover this invariance . to do so",
    ", we need to develop a stronger concept of negligibility , considering not only the upper and lower densities of a set , but those of all its images under computable permutations of @xmath3 .",
    "in section  [ sec : intrinsicdensity ] , we follow this approach and obtain a new pseudo - measure , _ intrinsic density _ , which is invariant under computable permutations of @xmath3 .",
    "we discuss various classes of sets that have intrinsic density , including the 1-random sets , which provide the foundation for our investigations in the rest of this paper .    for the remainder of the paper , we turn our focus to the new properties of intrinsic density . in section",
    "[ sec : idimmunity ] , we begin with intrinsic density 0 , the natural notion of being _ intrinsically negligible _ , discussing it in the context of classical computability theory .",
    "in fact , intrinsic density 0 is an immunity property , fitting naturally into the hierarchy between immunity and cohesiveness , and we determine its place in the hierarchy for both unrestricted and @xmath0 sets . in order to complete our description , we improve on a result of downey , jockusch , and schupp @xcite , constructing a strongly hyperhyperimmune set with upper density at least @xmath39 below @xmath2 .    in section  [ sec : idrandomness ] , we reflect on the relation between intrinsic density and randomness , and the connection it provides between classical computability and randomness .",
    "in fact , intrinsic density provides a continuum from immunity to stochasticity , as any intrinsic density from the range @xmath40 is a version of stochasticity ( modulo a fixed bias ) , while intrinsic density 0 is a form of immunity ( as discussed in the previous section ) .",
    "in fact , this correspondence can be reversed to extract various strengthenings of asymptotic density from the assorted notions of stochasticity  some of which may prove fruitful topics of interest for future research .",
    "lastly , in section  [ sec : intrinsiccomputability ] , we return to our motivating problem : the task of strengthening generic - case computability . after discussing some additional reasons for considering computably invariant notions of generic - case computability , we propose four such definitions , varying in degree of uniformity .",
    "all are strictly weaker than ordinary turing computability , but even the weakest of our notions does not consider the halting problem ( or , in fact , any nontrivial index set ) to be computable .    in the remainder of the introduction ,",
    "we collect notation and definitions that will be used for the rest of this paper .",
    "we will denote the @xmath41-th partial computable function by @xmath42 .",
    "we will routinely identify a set @xmath4 with its characteristic function , @xmath43 , and also with the infinite binary sequence defining its characteristic function , @xmath44 .",
    "by @xmath8 , we mean either @xmath45 or the string consisting of the initial @xmath9 bits of the infinite sequence ; which notation we are using at a given moment will be made clear by context .",
    "two sets @xmath10 and @xmath46 have _ finite difference _",
    ", denoted @xmath47 , if @xmath48 for all sufficiently large @xmath9 .",
    "given two finite binary strings @xmath49 and @xmath50 ,",
    "we say @xmath49 is a _ prefix _ of @xmath50 , denoted @xmath51 , if there is a binary string @xmath52 such that the concatenation of @xmath49 followed by @xmath52 is @xmath50 ( i.eifnextchar .. , @xmath53 ) ; this definition extends to infinite binary sequences @xmath50 in the natural way .    the prefix - free kolmogorov complexity of a binary string @xmath50 is denoted as @xmath54 ; we refer to downey and hirschfeldt @xcite or nies @xcite for the details of its definition and properties , but note that it does relativize : we can consider the prefix - free kolmogorov complexity of @xmath50 with respect to @xmath27 , denoted @xmath55 .",
    "both of these books also provide many equivalent characterizations of a 1-random set ; for this paper , we will take the characterization in terms of the kolmogorov complexity of initial segments as our definition .",
    "a set @xmath4 is _",
    "1-random _ if there is some constant @xmath56 such that @xmath57 for all @xmath9 .",
    "this definition inherits a natural relativization from prefix - free complexity : @xmath10 is 1-random relative to @xmath27 if there is some @xmath56 such that @xmath58 for all @xmath9 .",
    "a set @xmath4 is _",
    "1-generic _ if , for every c.eifnextchar .. set @xmath59 of finite binary strings , there is some initial segment @xmath60 such that either @xmath61 or @xmath62 for every @xmath63 .",
    "let @xmath4 . the _ absolute lower density _ @xmath64 of @xmath10 is @xmath65 and the _ absolute upper density _",
    "@xmath66 of @xmath10 is @xmath67 where @xmath30 is taken to vary over the set of computable permutations .",
    "if the absolute upper and lower densities are equal , then we say that @xmath10 has _ intrinsic ( asymptotic ) density _",
    "@xmath68 , where @xmath69 in this case , not only does @xmath10 have a density , but its density is fixed under all computable permutations",
    ". we can develop analogous definitions for lower and upper densities ; if @xmath70 for all computable permutations @xmath30 , we say that @xmath10 has _ intrinsic lower density _ @xmath12 , and similarly for upper density .",
    "if a set has intrinsic density 0 , we say it is _ intrinsically negligible_.    by proposition  [ prop : computabledensity ] , all infinite , co - infinite computable sets have absolute lower density 0 and absolute upper density 1 .",
    "thus , they are `` as far as possible '' from having an intrinsic density , at least in the sense that , under computable permutations , their densities range as widely as possible",
    ".    however , some might argue that 1-generic sets are further from having an intrinsic density than computable sets .",
    "it is simple to show that all 1-generic sets have lower density 0 and upper density 1 .",
    "since the class of 1-generic sets is closed under computable permutation , we can conclude that all 1-generic sets in fact have _ intrinsic _ lower density 0 and _ intrinsic _ upper density 1 .",
    "this puts them `` as far as possible '' from having an intrinsic density , in the sense that no computable permutation can bring their upper and lower densities together .    for the rest of our work in this paper",
    ", we will focus primarily on sets that have an intrinsic density , rather than classes of sets that do not . with a few examples , we begin to establish the connections between intrinsic density and other computability - theoretic properties , and ( particularly in discussing sets with intrinsic density strictly between 0 and 1 ) lay the groundwork for our later results .",
    "we start with the r - cohesive and r - maximal sets .",
    "recall that an infinite set @xmath71 is _ r - cohesive _ if there is no computable set @xmath72 such that @xmath73 and @xmath74 are both infinite , while a c.eifnextchar .. set @xmath71 is _ r - maximal _ if its complement is r - cohesive .",
    "[ thm : rcohesivedensity ] every r - cohesive set has intrinsic density 0 .",
    "we note that if a set @xmath71 is r - cohesive , then its image under any computable permutation of @xmath3 is also r - cohesive ; it thus suffices to prove that every r - cohesive set has density 0 .",
    "if we have a finite computable partition of @xmath3 ( i.eifnextchar .. , @xmath75 computable and pairwise disjoint , with union @xmath3 ) , @xmath71 must have finite intersection with all but one of these @xmath76 , say @xmath77 . by the finite subadditivity of upper density ,",
    "@xmath78 . if we take @xmath79 , we have that @xmath80 , so @xmath81 . since @xmath9 was an arbitrary natural number , the upper density of @xmath71 must be 0 , so @xmath82 .",
    "every r - maximal set has intrinsic density 1 .",
    "however , sets of intermediate intrinsic density ( strictly between 0 and 1 ) provide a more versatile basis for further investigation ; as such , the 1-random sets will be essential to certain constructions later in this paper .    [",
    "prop : randomdensity ] every 1-random set has intrinsic density @xmath1 .",
    "any 1-random set obeys the law of large numbers , in the sense that it has density @xmath1 .",
    "@xcite  ( prop .",
    "3.2.13 ) since the class of 1-random sets is closed under computable permutations of @xmath3 , every 1-random set has intrinsic density  @xmath1 .",
    "we can use 1-randoms to construct sets of other intermediate intrinsic densities as well , by means of the following lemma and its corollaries .",
    "[ lem : randomthinning ] if @xmath27 has density @xmath83 , and @xmath32 is 1-random relative to @xmath27 , then @xmath84 has density @xmath85 .    interpreting @xmath32 as a binary sequence ,",
    "consider the @xmath27-computable subsequence @xmath86 selected by the rule `` if @xmath87 , select @xmath88 . ''",
    "since @xmath32 is 1-random relative to @xmath27 , we see that @xmath86 must be an unbiased sequence ; in other words , @xmath89 .    however , by the definition of @xmath86 and asymptotic density , @xmath90 so @xmath91 therefore , @xmath84 has density @xmath92 .",
    "since being 1-random is invariant under computable permutation , we obtain one more pair of corollaries :    if @xmath27 has intrinsic density @xmath83 , and @xmath32 is 1-random relative to @xmath27 , then @xmath84 has intrinsic density @xmath85 .",
    "[ cor : randomintersectiondensity ] if @xmath93 are mutually relatively 1-random sets ( i.eifnextchar .. , each set is 1-random relative to the join of the others ) , then @xmath94 has intrinsic density @xmath95 .",
    "having established a few tools to use in controlling the intrinsic density of sets ( in this paper , largely useful for the construction of counterexamples ) , we can now proceed to consider intrinsic density in a broader context .",
    "as discussed in the introduction , asymptotic density was defined as a substitute for a probability measure on a countable space .",
    "its use in generic - case computability ( and other topics ) is in defining a density-0 set to be negligible , in the sense that its elements are eventually scarce .",
    "this provides one of the more practical notions of a `` small '' or `` thin '' subset of the integers , in some senses more natural than asserting that a set has no infinite c.eifnextchar .. subset ( i.eifnextchar .. , is _ immune _ ) .",
    "unfortunately , having density 0 is not computably invariant . from the perspective of computability theory , set properties that vary under computable permutation have limited applications . by addressing this one issue , having intrinsic density 0",
    "proves to be more powerful ; for example , any infinite set having intrinsic density 0 ( or , in fact , any intrinsic lower density other than 1 ) must be immune .",
    "any infinite non - immune set has density 1 under some computable permutation .",
    "this immediately follows from corollary  [ cor : cedensity ] .",
    "if @xmath10 is infinite and not immune , it contains an infinite c.eifnextchar .. subset @xmath27 . by corollary  [ cor : cedensity ] , @xmath31 has density 1 for some computable permutation @xmath96 . since @xmath97 , @xmath98",
    ", so @xmath99 must also have density 1 .",
    "[ cor : id0immune ] any infinite set with intrinsic lower density 0 , and hence , any infinite set with intrinsic density 0 , is immune .",
    "it is clear that the upper density of a set bounds the upper density of any of its subsets , so intrinsic density 0 is closed downwards under the subset relation . since having intrinsic density 0 is a computably invariant property , closed under subsets , and implies immunity , intrinsic density 0 ( here abbreviated id0 ) is a natural new immunity property , describing a strong notion of `` thinness '' .",
    "we therefore seek to determine its relation to the classical immunity properties :    a c.eifnextchar .. list of pairwise disjoint finite sets @xmath100 ( indexed as finite sets , so that the sets @xmath101 and the function @xmath102 are computable ) is said to be a _ strong array_. similarly , a uniformly c.eifnextchar .. list of pairwise disjoint c.eifnextchar .. sets @xmath103 is a _",
    "weak array_. there appears to be no standard name for the intermediate concept , which we here term a _",
    "computable array _ : a c.eifnextchar .. list of pairwise disjoint computable sets @xmath104 ( indexed appropriately ) , with union @xmath105 also computable .",
    "an infinite set @xmath27 is _ hyperimmune _ ( sometimes abbreviated h - immune ) if for every strong array @xmath100 , there is some @xmath106 such that @xmath107 ; in this case , we say that @xmath100 fails to meet @xmath27 .",
    "similarly , @xmath27 is said to be _ strongly hyperimmune _",
    "( sh - immune ) if no computable array meets @xmath27 , and _ strongly hyperhyperimmune _ ( shh - immune ) if no weak array meets @xmath27 . in a slight generalization",
    ", we say @xmath27 is _ finitely strong hyperimmune _",
    "( fsh - immune ) if no computable array @xmath104 with all @xmath108 finite meets @xmath27 , and _ hyperhyperimmune _ if no weak array @xmath103 with all @xmath109 finite meets @xmath27 .",
    "it was quickly noted that a set @xmath27 is hyperimmune iff no computable function dominates its principal function @xmath110 ; that is , for all computable functions @xmath111 , we have @xmath112 infinitely often . strengthening this , we say that an infinite set @xmath27 is _ dense immune _ if its principal function dominates all computable functions : for all computable functions @xmath111 and all sufficiently large @xmath9 , we have @xmath112 .",
    "an infinite set @xmath27 is _ cohesive _ if , for all c.eifnextchar .. sets @xmath109 , either @xmath113 or @xmath114 is finite .",
    "we can weaken this in a few standard ways : @xmath27 is _ r - cohesive _ if the same property holds for computable sets @xmath108 , or _ quasicohesive _ ( q - cohesive ) if @xmath27 is a finite union of cohesive sets .",
    "these properties are organized in a natural hierarchy of implication , shown as figure  [ fig : immunityimplications ] .",
    "chapter xi.1 of soare @xcite provides an excellent reference for this hierarchy ( though focused on co-c.eifnextchar .. sets ) .",
    "we note that in the general case , the lack of implication between cohesiveness and dense immunity is witnessed by the existence of a non - high cohesive set , as constructed by jockusch and stephan @xcite .",
    "also , shh - immunity and hh - immunity are distinguishable in the general case , but by a remark of cooper @xcite , are equivalent for @xmath0 sets ( and thus for co-c.eifnextchar .. sets ) .    .35    .35    by theorem  [ thm : rcohesivedensity ]",
    ", r - cohesiveness implies intrinsic density 0 .",
    "this has a simple corollary , included here for completeness :    every quasi - cohesive set has intrinsic density 0 .    as a finite union of cohesive ( and thus r - cohesive ) sets ,",
    "any quasi - cohesive set @xmath115 is a finite union of sets of intrinsic density 0 .",
    "since density is finitely subadditive , @xmath115 must also have intrinsic density 0 .",
    "it is slightly more interesting to note that dense immunity also implies intrinsic density 0 . to show this",
    ", we note that dense immunity is computably invariant , and that a certain domination property is equivalent to having density 0 .    for any infinite set @xmath4 , @xmath116 where @xmath117 is the principal function of @xmath10 .",
    "consider the sequence @xmath118 .",
    "we note that @xmath119 is an infinite subsequence  in fact , @xmath120 for all @xmath121  so @xmath122 the sequence @xmath123 may increase only at @xmath9 in the image of @xmath124 ( and thus at points also in the subsequence @xmath125 ) , so these limits must be equal .",
    "[ prop : density0domination ] an infinite set @xmath4 has density 0 iff its principal function dominates all linear functions .",
    "( in standard asymptotic [ `` big - o '' ] notation , @xmath10 has density 0 iff @xmath126 . )",
    "@xmath10 has density 0",
    "iff @xmath22 , and by the preceding lemma , @xmath127 however , for all @xmath128 , @xmath129 iff for all @xmath130 , @xmath131 dominates @xmath132 ; therefore , @xmath22 iff @xmath131 dominates @xmath132 for all @xmath128 and @xmath130 .",
    "[ prop : denseimmuneinvariant ] if the set @xmath27 is dense immune , @xmath31 is also dense immune for any computable permutation @xmath96 .",
    "let @xmath96 be a computable permutation , and consider a computable function @xmath111 .",
    "we define @xmath133 since @xmath134 is a computable function , the principal function of @xmath27 must dominate @xmath134 ; that is , @xmath135 for all but finitely many @xmath9 . in other words , for all sufficiently large @xmath9 , there are fewer than @xmath9 elements of @xmath27 less than @xmath136 .",
    "however , by construction of @xmath134 , every element of @xmath31 less than @xmath137 must come from an element of @xmath27 below @xmath136 .",
    "since for almost all @xmath9 , there are fewer than @xmath9 elements of @xmath27 below @xmath136 , we see that @xmath138 dominates @xmath111 . since both @xmath111 and @xmath96 were arbitrary , every computable permutation of @xmath27 is dense immune .",
    "if @xmath4 is dense immune , @xmath10 has intrinsic density 0 .    by proposition  [ prop : denseimmuneinvariant ] ,",
    "dense immunity is a computably invariant property .",
    "it therefore suffices to show that dense immunity implies density 0 .",
    "however , this is an immediate consequence of proposition  [ prop : density0domination ] , as all linear functions are bounded by computable functions , and so are dominated by the principal function of any dense immune set .",
    "none of the remaining standard immunity properties imply intrinsic density 0 .",
    "in fact , as demonstrated by downey , jockusch , and schupp @xcite , for every @xmath139 , there is a strongly hyperhyperimmune set with upper density at least @xmath39 ( though none have upper density 1 ) , constructed by mathias forcing .",
    "we here extend their result , using a direct @xmath2-computable construction , to show that we may assume these sets to be @xmath0 .",
    "of course , per the aforementioned remark of cooper @xcite , any @xmath0 hh - immune set is in fact shh - immune ; this apparently does not simplify the argument required , so we will make no use of this fact .",
    "[ thm : hhimmune ] for all @xmath139 , there is a @xmath0 ( s)hh - immune set @xmath27 with upper density at least @xmath39 .",
    "we assume that @xmath140 is rational ; if not , we can replace it by any rational less than @xmath140 .",
    "we will construct @xmath27 as a @xmath2-computable set , consulting @xmath2 as an oracle during our otherwise - computable construction .",
    "we work to satisfy the requirements : @xmath141 where @xmath142 is a listing of the uniformly c.eifnextchar .. sequences of sets .",
    "( in other words , every uniformly c.eifnextchar .. sequence of sets is of the form @xmath143 for some @xmath41 . )",
    "the negative requirements @xmath144 together assert that every weak array fails to meet @xmath27 ; this is the definition of shh - immunity .",
    "our negative requirements should , in principle , be simple to satisfy .",
    "we simply omit a set from each weak array of small lower density , thus leaving us with a set @xmath27 with high upper density .",
    "there are slight complications in ensuring that taking all of these requirements still can not force @xmath27 s upper density to fall below @xmath39 , but these are easily addressed .",
    "after all , at any given point @xmath9 , only @xmath145 disjoint sets can have partial density exceeding @xmath146 ; therefore , for any weak array @xmath147 , there must be some @xmath148 with lower density less than @xmath149 .",
    "the trouble comes in attempting to identify the @xmath148 in question .",
    "@xmath2 is incapable of resolving whether a c.eifnextchar .. set has lower density below some bound ; in fact , this problem is @xmath25-hard , as it would allow us to distinguish finite c.eifnextchar .. sets from total c.eifnextchar .. sets .",
    "therefore , we can not search directly for such a @xmath150 in our weak array , and must use more indirect methods .    towards this end",
    ", we will make heavy use of the following sentence , for varying values of @xmath41 , @xmath9 , and @xmath151 : @xmath152 @xmath153 will be defined in the course of our construction , but is c.eifnextchar ...",
    "the @xmath154 s are taken from our listing of uniformly c.eifnextchar .. sequences of sets .",
    "as all sets involved are c.eifnextchar .. , and we only ask whether a c.eifnextchar .. set has partial density exceeding some lower bound , is a @xmath155 sentence , and thus decidable by @xmath2 .    putting in context , we understand it to say that there are @xmath9 elements of our weak array @xmath142 , not including any with index less than @xmath151 , which all have high partial density ( exceeding @xmath156 ) at a single point @xmath157 , where @xmath158 is chosen from some c.eifnextchar .. set @xmath159 of possibilities . clearly , this sentence is vacuously true for @xmath160 , and ( presuming our @xmath154 s to be disjoint ) necessarily false for @xmath161 .",
    "therefore , for any fixed @xmath151 and @xmath41 , the maximum @xmath9 for which this sentence holds is computable in @xmath2 by a simple bounded search ; let us refer to it as @xmath162 .",
    "if we have @xmath162 such elements of a weak array , we refer to them together as a maximal tuple for that array under the conditions @xmath159 , @xmath151 , and @xmath41 .",
    "if we have a maximal tuple for our weak array , and @xmath148 is not among its members , then we know that @xmath163 for some @xmath164 with @xmath157 .",
    "otherwise , would be satisfied with @xmath165",
    ". this will be our primary tool for controlling the lower density of the sets we omit as we build @xmath27 to avoid meeting the weak array @xmath147 .",
    "* _ organization _ * :    as we combine multiple negative requirements , we allow finite injury of each negative requirement by higher - priority requirements , though never revoking any previous decisions as to whether @xmath166 . we activate the requirements in order of decreasing priority , activating at most one at each stage . at stage @xmath167 , each active requirement independently decides whether to allow @xmath167 into @xmath27 ; we put @xmath167 into @xmath27 if none of these requirements object .",
    "for convenience , we denote @xmath168 by @xmath169 .",
    "each requirement @xmath144 will maintain a c.eifnextchar .. set @xmath170 of elements such that , if @xmath171 , then @xmath144 will be satisfied . for internal reference , we will also keep track of @xmath172 , which determines which element of the weak array @xmath142 we are actually restricting out of @xmath27 .",
    "lastly , we will maintain a c.eifnextchar .. set @xmath173 of locations where the partial density of @xmath174 is known to be strictly less than @xmath175 , while guaranteeing that @xmath176 at all stages @xmath167 .",
    "@xmath144 s basic goal is to prevent the weak array @xmath142 from meeting @xmath27 , while ensuring that the lower density of its restricted set does not exceed @xmath177 .",
    "to do so , @xmath144 will repeatedly consult @xmath2 regarding . in context",
    ", we can now see that we choose @xmath178 to ensure that the density of the set we omit for @xmath144 falls below @xmath156 at the same time as the densities of the previously - chosen sets fall below their critical values ; this will make certain that the density of our set @xmath27 rises above its goal of @xmath39 .    * _ module for @xmath144 _ * :    _ on activation at stage @xmath167 : _ we first consult @xmath2 , asking whether the sets @xmath142 are in fact pairwise disjoint ( i.eifnextchar .. , @xmath142 is a weak array ) . if not , then @xmath144 is trivially satisfied . in this case",
    ", @xmath144 will never restrict anything out of @xmath27 ; it simply maintains @xmath179 and @xmath180 at all stages @xmath181 , while voting to allow all elements into @xmath27 .",
    "if @xmath142 is a weak array , we define @xmath182 to be the least @xmath183 such that @xmath184 .",
    "we then set @xmath185 , and let @xmath186 , as we do not yet know of any locations where @xmath187 .",
    "_ at stage @xmath167 : _ we assume that @xmath188 has already been determined , and consider only whether to allow @xmath167 into @xmath27 . before making this decision",
    ", we must first determine whether we can still believe that we can restrict @xmath189 out of @xmath27 while keeping @xmath190 close to 1 .",
    "in fact , we want to verify that @xmath189 will again appear to have partial density less than @xmath156 at some point @xmath157 where the partial density of @xmath191 ( for all @xmath192 ) is also small .    if @xmath193 ( a @xmath2-computable question ) , we have already verified this at some previous stage .",
    "we simply define @xmath194 , set @xmath195 , and let @xmath196 .",
    "we then allow @xmath167 into @xmath27 iff @xmath197 .    if @xmath198 , though , we must attempt to verify that the partial density of @xmath189 will fall below @xmath156 at some point in the future . we know that @xmath2 can not answer this question directly , as",
    "it can not determine whether a c.eifnextchar .. set will ever have partial density less than some critical value .",
    "we instead use to attack from a different angle .",
    "we will need to reference @xmath182 several times in the remainder of the procedure ; for simplicity s sake , we will abbreviate it by @xmath199 .",
    "we first determine @xmath200 , the greatest value of @xmath9 for which holds with @xmath201 .",
    "since at most @xmath202 disjoint sets can have partial density exceeding @xmath156 at the same location @xmath158 , this is a bounded search on a parameter of a @xmath155 statement ; thus , @xmath2 suffices to compute @xmath200 .",
    "we then ask @xmath2 whether holds with @xmath203 and @xmath204 .",
    "if so , then we have a maximal tuple ( within the array @xmath142 for @xmath205 ) in which every set has high partial density at the same point @xmath157 .",
    "since we can not add @xmath148 to this collection , we must have @xmath163 .",
    "we define @xmath173 to be the set of all @xmath157 for which there is such a collection ( along with all @xmath206 for which @xmath187 ) , set @xmath195 and @xmath194 , and allow @xmath167 into @xmath27 iff @xmath197 .",
    "if this case occurs immediately following injury or initialization of @xmath144 at stage @xmath207 , we say that @xmath167 was a `` recovery stage '' for @xmath144 ; otherwise , we deactivate all lower - priority requirements @xmath208 ( @xmath209 ) , as @xmath173 has changed .",
    "otherwise , the does not hold with @xmath203 and @xmath210 strictly greater than @xmath183 . in this case",
    ", we have no way to verify that the density of @xmath148 again drops below @xmath156 , and so consider @xmath144 to be injured .",
    "we vote to allow @xmath167 into @xmath27 , and deactivate all lower - priority requirements @xmath208 ( @xmath209 ) .",
    "we then effectively reset our procedure for @xmath144 ; we define @xmath172 to be the least @xmath211 such that @xmath212 , set @xmath213 and let @xmath214 .    * _ verification of the basic module : _ *    suppose that the module for @xmath144 is at some point activated and never again deactivated ( i.eifnextchar .. , @xmath153 does not change at any later stage @xmath167 ) .",
    "we assume that @xmath142 is in fact a weak array ; if it is not , @xmath144 is trivially satisfied , @xmath215 has partial density identically 0 for all @xmath167 , and @xmath216 does not change at any later stage @xmath167 .    by the construction of @xmath170 , we know that @xmath217 exists , and",
    "consists of all elements restricted out of @xmath27 by @xmath144 .",
    "we will show that there is some stage @xmath218 at which @xmath219 is infinite , thus ensuring that @xmath173 will not change at any later stage and preventing future injury to @xmath144 .",
    "this will also guarantee that @xmath220 and @xmath221 .",
    "given such an @xmath218 , since @xmath27 does not intersect @xmath222 , we have satisfied @xmath144 .",
    "furthermore , the partial density of @xmath223 approaches that of @xmath224 , as the sets agree on all @xmath225 ; therefore , if the partial density of @xmath224 drops below @xmath156 infinitely often , the partial density of @xmath220 must be less than @xmath226 at all but finitely many of the same points .",
    "we note that the sequence @xmath227 is nonincreasing , as we monotonically reduce the set of witnesses for at successive stages @xmath167 .",
    "in fact , the sequence must decrease each time @xmath173 changes ( except at recovery stages ) ; this can only happen when we have run out of witnessing collections of size @xmath228 .",
    "as for recovery stages , they can only occur immediately after initialization of @xmath144 , or immediately after an injury to @xmath144 ; since injuries cause @xmath200 to decrease , any recovery stage is still associated with a corresponding decrease in @xmath200 . since for @xmath160 , is vacuously true , @xmath200 is always a non - negative integer and so can not decrease infinitely often . therefore , there must be some stage @xmath218 such that @xmath229 for all @xmath230 , which is only possible if @xmath219 is infinite .",
    "lastly , the module must force @xmath231 .",
    "whenever we choose a new @xmath172 , we always choose a value @xmath183 such that @xmath232 , and redefine @xmath170 accordingly to remain disjoint from @xmath169 .",
    "when we keep the same @xmath183 , we allow elements into @xmath27 iff they are not in @xmath170 . therefore ,",
    "as long as @xmath144 is active , we are assured that @xmath233 for all @xmath167 ; since @xmath234 , we will always have @xmath231 .    * _ construction of @xmath27 : _ *    at stage 0 , begin by activating @xmath235 .    at stage @xmath167",
    ", check whether @xmath236 . if so , determine the highest - priority inactive requirement @xmath144 .",
    "if @xmath144 was deactivated in stage @xmath207 , do not activate any requirements ; otherwise , activate @xmath144 .",
    "( this delay in @xmath144 s reactivation ensures that @xmath144 is not activated during a recovery stage for @xmath237 . )    next , consult all active requirements in priority order .",
    "if any restrict @xmath167 out of @xmath27 , we declare that @xmath238 ; if all allow @xmath167 to enter @xmath27 , we put @xmath167 into @xmath27 .    * _ verification : _ *    nothing can deactivate @xmath235 , so @xmath235 is permanently activated . by the correctness of the basic module ,",
    "if the module for @xmath144 is permanently activated , @xmath144 will be satisfied .",
    "furthermore , there is some stage @xmath218 after which @xmath173 does not change , so that @xmath239 will never again be deactivated .",
    "therefore , as long as there are infinitely many stages at which we activate some inactive requirement , every module will be permanently activated at some point , and thus every @xmath144 will be satisfied .",
    "suppose , towards a contradiction , that some requirement is never permanently activated .",
    "let @xmath144 be the highest - priority such requirement , so that only modules @xmath235 through @xmath237 are permanently activated .",
    "we consider the construction at stage @xmath218 , after the last such module has been permanently activated and @xmath153 has stopped changing ( and is infinite ) .    at this stage",
    ", @xmath144 can never again be deactivated , so since @xmath144 is not permanently activated , @xmath144 must never again be activated .",
    "this can only be because the construction will never reach another stage where it activates the highest - priority inactive requirement ; therefore , it must be that @xmath240 contains all elements except those in @xmath241 , and @xmath242 for all @xmath157 .",
    "for all sufficiently large @xmath9 , we have that @xmath243 implies @xmath244 ; thus , @xmath244 for all sufficiently large @xmath9 .    however , @xmath245 .",
    "recall that for all but finitely many @xmath246 , we have @xmath247 , so @xmath248 since @xmath159 is infinite , this is a contradiction ; therefore , all modules @xmath144 must be permanently activated eventually .",
    "finally , since every module is eventually activated , we must activate a new module infinitely often .",
    "this can only happen if @xmath236 infinitely often , so every requirement @xmath249 is also satisfied ; @xmath27 must have upper density at least @xmath39 .",
    "we have yet to consider implications in the other direction ; what immunity properties are implied by intrinsic density 0 ?",
    "the first such result is simple ; as established above in corollary  [ cor : id0immune ] , intrinsic density 0 at least implies immunity for infinite sets .    on the other hand , we already know that hyperimmunity ( even shh - immunity ) does not imply intrinsic density 0 .",
    "we can further prove that a set of intrinsic density 0 need not be hyperimmune ; we can construct @xmath0 counterexamples , and in fact will build a counterexample below every 1-random set .    for every 1-random set @xmath72 , there is an infinite set @xmath250 with intrinsic density 0 that is not hyperimmune .",
    "suppose that @xmath251 for all @xmath9 .",
    "by van lambalgen s theorem @xcite , given a 1-random set @xmath72 , there exists a uniformly @xmath72-computable sequence of sets @xmath252 that are mutually relatively 1-random .",
    "in fact , defining @xmath253 , we have that @xmath254 for all @xmath9 , where @xmath255 is uniformly computable from @xmath106 and @xmath56 ; this can be shown by a simple inspection of a proof of van lambalgen s theorem .",
    "let @xmath256 . since @xmath257 is 1-random ,",
    "it has intrinsic density @xmath1 . given @xmath258 and using the incompressibility of @xmath259 , we can compute @xmath260 such that @xmath261 , ensuring that @xmath262 . since @xmath260 is computable , we can use @xmath263 as the first partition in a weak array that will witness that the set we construct @xmath27 is not hyperimmune .",
    "we then define @xmath264 since @xmath265 , and @xmath259 and @xmath266 are mutually relatively 1-random , @xmath267 must have intrinsic density @xmath268 by corollary  [ cor : randomintersectiondensity ] . using @xmath258 and @xmath269 along with the incompressibility of @xmath266 ( relative to @xmath259 ) ,",
    "we can compute @xmath270 such that @xmath271 .    repeating this process",
    ", we see that @xmath272 is computable in @xmath72 , since @xmath273 . for all @xmath106",
    ", we have that @xmath274 , so @xmath27 is infinite .",
    "furthermore , since the @xmath275 s are uniformly computable from @xmath56 , an integer , this partition of @xmath3 is in fact computable , demonstrating that @xmath27 is not hyperimmune .",
    "finally , @xmath276 for all @xmath106 .",
    "since @xmath277 , and the @xmath76 s are mutually relatively 1-random , @xmath278 has intrinsic density @xmath279 ; therefore , @xmath27 must have intrinsic density 0 .    as a convenient side effect , this theorem immediately gives us some information on the turing degrees of infinite sets with intrinsic density 0 : such sets exist below every 1-random turing degree , but can not be computable . among other things",
    ", this implies that there are infinite id0 sets in non - computable @xmath0 , low , and even hyperimmune - free degrees ( where our construction of a non - hyperimmune @xmath27 becomes rather superfluous , though it at least ensures that @xmath27 is infinite ) .",
    "it still eliminates any hopes we might have of further positive implications between the immunity properties and intrinsic density , as we will discuss in our summary below . by falling back to intrinsic lower density",
    ", we can recover one more positive implication , as shown by jockusch in private correspondence .",
    "every hyperimmune set has intrinsic lower density 0 .    since hyperimmunity is computably invariant , it suffices to show that every hyperimmune set has lower density 0 .",
    "suppose @xmath27 is hyperimmune .",
    "consider the strong array @xmath280 since @xmath27 is hyperimmune , @xmath281 for infinitely many @xmath9 .",
    "for all such @xmath9 , we have that @xmath282 ; therefore , @xmath283 .",
    "since this occurs infinitely often , we conclude that @xmath284",
    ".    the above results , along with earlier work @xcite @xcite , will suffice to disprove all other potential implications between intrinsic density 0 , intrinsic lower density 0 , and the standard immunity properties .",
    "we first repeat , per jockusch and schupp @xcite , that any 1-generic set has lower density 0 and upper density 1 ; since 1-genericity is computably invariant , 1-generics in fact have intrinsic lower density 0 and intrinsic upper density 1 .",
    "therefore , intrinsic lower density 0 does not imply intrinsic density 0 , even for @xmath0 sets .",
    "in addition , all 1-random sets are immune ; otherwise , there would be a 1-random @xmath72 with an infinite computable subset , which admits a trivial computable martingale that succeeds on @xmath72 .",
    "since 1-randoms have intrinsic density @xmath1 , immunity does not imply intrinsic lower density 0 , even for @xmath0 sets .",
    "lastly , theorem  [ thm : hhimmune ] above demonstrates that for every @xmath139 , there is a shh - immune set ( in fact , a @xmath0 hh - immune set ) with upper density at least @xmath39 .",
    "in particular , shh - immunity does not imply intrinsic density 0 , even for @xmath0 sets .",
    "combining these counterexamples with our results above , we exhaust all possible implications between intrinsic density 0 , intrinsic lower density 0 , and the standard immunity properties .",
    "the graph of the resulting implications for infinite sets is shown in figure  [ fig : densityimmunityimplications ] ; all implications depicted are strict , and counterexamples are discussed above for all arrows not present in the diagram .",
    "unfortunately , in the co-c.eifnextchar .. case ( well - studied due to post s program ) , the majority of our proofs of failures of implication collapse . since hh - immunity does imply dense immunity for co-c.eifnextchar .. sets , it seems unlikely that our proof method from theorem  [ thm : hhimmune ] will help separate the higher immunity properties from intrinsic density 0 .",
    "in fact , most of our other failures of implication are exhibited by 1-generics or derived from 1-randoms , examples that are inherently not co-c.eifnextchar ... this leaves the co-c.eifnextchar .. diagram incomplete , with a few interesting open questions .",
    "is there an infinite c.eifnextchar .. set with intrinsic density 1 that is not hypersimple ?",
    "( f)sh - simple ?    is there a hypersimple set with lower density less than 1 ?",
    "equal to 0 ? for all @xmath139 , is there a hypersimple set with lower density less than @xmath140 ?",
    "let us move from the extremes of density ( density  0 or 1 ) to the intermediate densities , as exemplified by density  @xmath1 .",
    "the notion of `` density  @xmath1 '' is easily recognized as the law of large numbers , as applied to a sequence of flips of a fair coin .",
    "we might hope that having density  @xmath1 would be in some way related to a randomness - theoretic property , and stochasticity is the obvious candidate .",
    "this follows von  mises @xcite in establishing the existence of limiting frequencies as the key property of a random sequence and , more specifically , the preservation of limiting frequencies under place - selection rules that determine the next bit sampled based only on the values previously sampled .",
    "if @xmath285 is such a class of selection rules , we say that a sequence @xmath10 is @xmath285-stochastic if no selection rule in @xmath285 can select a biased ( non - density-@xmath1 ) subsequence from @xmath10 .",
    "we say that a selection rule is monotonic if the places it selects are always in increasing order , and oblivious if the places it selects are independent of @xmath10 , the sequence subject to the selection rule .",
    "there are several standard notions of stochasticity that will be useful to keep in mind .",
    "church - stochastic sequences are stochastic under computable monotonic selection rules , whereas von  mises - wald - church - stochastic sequences are stochastic under partial computable monotonic selection rules . by this definition , sets with density @xmath1 might be termed `` trivially stochastic '' ; that is to say , they are unbiased under the single selection rule that selects all positions in order .",
    "however , this is rarely considered , as stochasticity is generally taken to require selection of proper subsequences .",
    "passing to intrinsic density @xmath1 , we find something more practical : stochasticity under the class of all computable permutations , represented as oblivious selection rules .",
    "in fact , this is the class of non - monotonic oblivious selection rules that must eventually select every position .",
    "the corresponding notion of randomness , that no computable martingale succeeds on the sequence of bits selected by such a rule , is permutation randomness as defined by miller and nies @xcite ; intrinsic density  @xmath1 is thus the natural notion of permutation stochasticity .    as mentioned above",
    ", stochasticity is generally taken to require selection of proper subsequences to preserve density  @xmath1 ; this would seem to be an obstacle to considering intrinsic density  @xmath1 as a valid notion of stochasticity . fortunately , permutation stochasticity in fact ensures that many proper subsequences are also unbiased , including all computably - sampled subsequences .",
    "we can be fully precise about this with one more definition in hand , and a combinatorial lemma to relate it to our previous work .    given a total computable injection @xmath286 and an infinite binary sequence @xmath287 , we say that the _ subsequence of @xmath59 sampled by @xmath286 _ is @xmath288 abusing notation as noted in the introduction , we can apply this directly to any set @xmath4 . in set notation , this gives @xmath289    however , even though this new method of sampling generalizes our previous method of considering sets under computable permutations of @xmath3 , it has no additional power as far as density is concerned .",
    "[ lem : injectiondensity ] given any total computable injection @xmath286 , there is a computable permutation @xmath96 such that , for any set @xmath10 , @xmath290 has upper and lower density equal to those of @xmath291 .    given a total computable injection @xmath286 , we define a computable permutation @xmath96 by assigning values @xmath292 in increasing order of @xmath106 . if @xmath106 is a non - square integer , and @xmath293 has not already been assigned to @xmath294 for some @xmath295 , define @xmath296 .",
    "otherwise , define @xmath292 to be the least value not assigned to any @xmath294 with @xmath295 .",
    "the sizes of @xmath297 and @xmath298 differ by at most @xmath299 .",
    "thus , @xmath300 differs from @xmath301 by less than @xmath302 .",
    "therefore , @xmath303 and @xmath304    from this minor lemma , we note that in fact , any set with intrinsic density has constant density not only under all computable permutations of @xmath3 , but also under all computable `` samplings '' of @xmath3 . to be more precise :    a set @xmath27 has intrinsic density @xmath83 iff @xmath305 for every total computable injection @xmath286 .",
    "the reverse direction is obvious by definition , since computable permutations of @xmath3 are also total computable injections .",
    "the forward direction is , at this point , also quite straightforward .",
    "fix a total computable injection @xmath286 .",
    "by lemma  [ lem : injectiondensity ] , there is a computable permutation @xmath96 such that @xmath290 has the same upper and lower densities as @xmath291 for any set @xmath10 , and in particular for @xmath27 . since @xmath27 has intrinsic density @xmath83 , we know that @xmath306 , and so that @xmath305 .",
    "this corollary reveals that intrinsic density  @xmath1 coincides with another form of stochasticity : stochasticity under all computable injections , or equivalently the class of all oblivious non - monotonic selection rules .",
    "the corresponding notion of randomness is injection randomness , also as defined by miller and nies @xcite .",
    "thus , we see that :    permutation stochasticity and injection stochasticity coincide , and are both equivalent to intrinsic density  @xmath1 .    considering this interpretation of intermediate intrinsic densities ( strictly between 0 and 1 ) as a form of stochasticity",
    ", we find that intrinsic density provides an interesting link between the immunity properties and randomness - theoretic ideas . as discussed above",
    ", intrinsic density 0 is an immunity - type property , and so intrinsic density 1 is a form of co - immunity ( or , as it is called for c.eifnextchar .. sets , simplicity ) .",
    "thus , intrinsic density illustrates the relations between immunity , randomness , and simplicity , and provides a continuum of intermediate concepts , all of which follow in the spirit of stochasticity as established by von  mises .",
    "this calls our attention to the fact that all of these properties are , in essence , descriptions of unpredictability : a set is immune if it is sufficiently difficult for a computable enumeration to stay within the set , co - immune if it is difficult to avoid the set , and stochastic if it is difficult to achieve any sort of persistent pattern of biased intersection with the set or its complement .",
    "of course , all of this relies fundamentally on our use of _ intrinsic _ density . considering asymptotic density alone , we find no useful connection to computability or randomness . a set with density  0 need not be immune in any useful sense , as is made clear by considering the computable set of perfect squares . taking the complement",
    ", we obtain a set with density  1 that is trivial to avoid .",
    "moreover , density  @xmath1 is a poor notion of randomness , as recognized by and before von  mises , carrying no real implications for unpredictability ; for instance , the set of even numbers is `` stochastic '' in this sense , and yet is trivially predictable .",
    "having begun by investigating the implications of adding computable invariance to asymptotic density , we end by returning to the motivating problem with which we began : strengthening jockusch and schupp s generic - case computability to obtain similar invariance .",
    "they defined generic - case computability as follows :    a partial function @xmath307 is a _ partial description _ of @xmath308 if @xmath309 whenever @xmath137 converges .",
    "we say that @xmath310 is _ computable in the generic case _ , or _",
    "generic - case computable _ , if @xmath27 has a computable partial description with density-1 domain .",
    "we call such a description a _ generic - case description_. @xcite    in practical terms , the weakness of generic - case computability was shown by hamkins and miasnikov @xcite , who demonstrated that , in several reasonable codings , the halting problem is in fact decidable on a set of asymptotic density 1 , due to the density of trivially non - halting programs .",
    "this suggests that we should strengthen generic - case computability , to avoid rendering the halting problem `` decidable '' for trivial reasons .",
    "rybalov @xcite has shown that if we insist on convergence on a set with density exponentially approaching 1 ( also known as strong generic - case computability ) , then the halting problem is instead undecidable .",
    "of course , his analysis makes use of asymptotic density on the set of turing programs , considering the programs with at most @xmath9 non - final states ; strong generic - case computability is not directly applicable to arbitrary subsets of @xmath3 , so we must look for an alternative approach .",
    "furthermore , corollary  [ cor : cedensity ] has a somewhat unfortunate consequence for generic - case computability .",
    "for any problem , if there is an algorithm that converges on an infinite set of inputs , that algorithm becomes a generic - case solution for the problem under some alternate coding of the input .",
    "after all , the domain of the algorithm is necessarily c.eifnextchar .. ; there is therefore some coding of the underlying problem ( corresponding to a permutation of @xmath3 ) under which the algorithm converges on a set of density 1 . in other words ,",
    "most natural problems have generic - case computable solutions ( as defined by jockusch and schupp @xcite ) under some computable permutation .",
    "this gives us another reason to use a stricter notion of generic - case computability .",
    "returning to the original definition of generic - case complexity for group - theoretic problems , from kapovich , myasnikov , schupp , and shpilrain @xcite , we note that the authors defined a problem in a finitely generated group to have generic - case complexity @xmath285 if and only if this complexity is independent of the choice of generating set .",
    "they specifically state that , though the worst - case complexity for most group - theoretic problems does not depend on one s choice of generating set , there is no reason to assume that this should also hold for generic - case complexity . as this choice directly corresponds to a coding of the input to the generic - case algorithm",
    ", a natural translation would require that our set be generic - case computable under every computable permutation of @xmath3 .",
    "equivalently , by the myhill isomorphism theorem , @xmath27 should not be considered generic - case decidable unless all of the 1-equivalent sets are as well . fortunately , this coincides with the standard idea that most computability - theoretic definitions are ( or `` should be '' ) invariant under computable permutation .",
    "we will call this new notion intrinsic generic - case computability , as it must be preserved under computable permutations of @xmath3 .",
    "below , we propose four definitions , varying in degree of uniformity .",
    "our weakest candidate notion of intrinsic generic - case computability is the direct translation of the definition by kapovich , myasnikov , schupp , and shpilrain :    a set @xmath27 is _ ( weakly ) intrinsically generic - case computable _",
    "iff @xmath31 is generic - case computable for every computable permutation @xmath30 .",
    "note that we place no requirements on the relationships between the generic - case descriptions for each such image @xmath31 ; the algorithms may be essentially unrelated .    insisting on a bare minimum of uniformity",
    ", we obtain our next candidate definition :    a set @xmath27 is _ ( uniformly ) intrinsically generic - case computable _ iff there is a uniformly computable family of functions @xmath311 such that , if @xmath42 is a computable permutation , @xmath311 is a generic - case description of @xmath312 ; that is , @xmath311 has density-1 domain and wherever @xmath313 converges , it converges to @xmath314 .",
    "on the other hand , allowing our description to require an index may weaken our notion of uniformity ; after all , this means that our description @xmath111 can not be given only a black - box oracle specifying the computable permutation , but actually requires knowledge of _ how _ the permutation can be computed  and in particular may depend on the specific program provided to compute the permutation .",
    "requiring the description to work with only an oracle might seem a trivial variation , but significant differences have been observed in analogous situations ; specifically , in computable model theory , the index - based definition of uniform computable categoricity has been shown to be strictly weaker ( and less natural ) than the definition providing only an oracle .",
    "@xcite ( in general , any oracle - based definition must be at least as strong as the corresponding index - based definition , since it is well - established that there is a turing - machine procedure allowing us to convert an index into an effective oracle . )",
    "we therefore include this option in our list of candidate notions . in this case",
    ", we would say that :    a set @xmath27 is _",
    "( oracle ) intrinsically generic - case computable _ iff there is a turing functional @xmath315 such that , for any computable permutation @xmath96 ( represented as a set of pairs ) , @xmath316 is a generic - case description of @xmath31 .",
    "finally , we might insist on complete uniformity , and require that a single algorithm provide a description of @xmath27 on a set that has density 1 under all computable permutations ; in other words , that the algorithm converge on a set of _ intrinsic _ density 1 .    a set @xmath27 is _ ( strongly ) intrinsically generic - case computable _ iff it has a description @xmath42 that converges on a set of intrinsic density 1 .",
    "( equivalently , @xmath317 is a generic - case description of @xmath31 for all computable permutations @xmath96 . )",
    "since r - maximal sets are c.eifnextchar .. and have intrinsic density 1 , any r - maximal set is in fact strongly intrinsically generic - case computable .",
    "this provides a convenient demonstration that even this strongest definition is weaker than ordinary computability .",
    "more work will be required to distinguish these definitions of intrinsic generic - case computability , and some of them may prove to be equivalent .",
    "at this point , though , there are no reasons to presume any equivalences .",
    "the author personally expects that the uniform and strong definitions of intrinsic generic - case computability will be the most useful of these four .    on the other hand",
    ", even our weakest definition has a certain demonstrable strength .",
    "a set @xmath4 is said to be an _ index set _ if @xmath318 for all @xmath319 where @xmath41 and @xmath320 are indices for equivalent turing machines .",
    "theorem @xcite states that the only computable index sets are @xmath321 and @xmath3 .",
    "we can easily extend this to intrinsic generic - case computability , showing that no non - trivial index set can be weakly intrinsically generic - case computable .",
    "therefore , the halting problem is not intrinsically generic - case computable under any of these definitions .",
    "[ thm : indexsetsnotigc ] suppose @xmath4 is an index set ( i.eifnextchar .. , @xmath318 for all @xmath322 such that @xmath323 ) .",
    "@xmath99 is generic - case computable for all computable permutations @xmath96 iff @xmath10 is computable , and thus iff @xmath324 or @xmath325 .",
    "the reverse implication is obvious ; we will only consider the forward implication .    by the padding lemma for turing machines @xcite , for any @xmath41",
    ", we can enumerate a set @xmath326 such that @xmath327 for all @xmath328 .",
    "consider the computable sets @xmath329 , and note that @xmath330 ; these , along with the singleton @xmath331 , comprise a partition of @xmath3 .",
    "one can easily construct a computable permutation of @xmath3 such that @xmath332 for all @xmath41 , and @xmath259 is filled with the `` waste '' of the process .",
    "suppose @xmath99 is generic - case computable , with generic - case description @xmath333 .",
    "since @xmath334 has positive density for all @xmath41 , there must be some @xmath335 for which @xmath336 converges . to determine whether @xmath337 , wait until @xmath336 converges for some such @xmath338 ; we then have @xmath339 , since @xmath340 .",
    "this shows that @xmath10 is computable , so by rice s theorem , @xmath324 or @xmath325 .",
    "the halting problem is not ( weakly ) intrinsically generic - case computable .",
    "the halting problem is 1-equivalent to a non - computable index set ( e.gifnextchar .. , @xmath341 ) . by the myhill isomorphism theorem @xcite",
    ", this means that its image under some computable permutation is a non - computable index set .",
    "composing this with the permutation from the proof of theorem  [ thm : indexsetsnotigc ] , we obtain a computable permutation under which the image of the halting problem is not generic - case computable .",
    "thus , the halting problem is not even weakly intrinsically generic - case computable .",
    "significant thanks are owed to denis hirschfeldt and robert soare for innumerable helpful discussions on both the broad strokes and details of the work found herein ; in particular , the proof of theorem  [ thm : hhimmune ] is based on an approach suggested by hirschfeldt .",
    "the author is also grateful to carl jockusch , paul schupp , and rod downey , for the work that inspired this research and for several conversations on the specifics of this investigation , and to an anonymous referee , whose suggestions have added substantial clarity to this paper .",
    "rodney  g. downey , carl  g. jockusch , jr . , timothy  h. mcnicholl , and paul  e. schupp , asymptotic density and the ershov hierarchy , _ mathematical logic quarterly _ , to appear .",
    "available at ` arxiv:1309.0137 ` .",
    "ilya kapovich , alexei myasnikov , paul  e. schupp , and vladimir shpilrain , generic - case complexity , decision problems in group theory , and random walks , _ journal of algebra _ * 264*(2 ) ( 2003 ) , pp . 665694 .",
    "victor  l. klee , jr . and",
    "george  j. minty , how good is the simplex algorithm ?",
    ", in : _ inequalities , iii ( proc .",
    "third sympos .",
    "california , los angeles , calif . , sept . 19 , 1969 ) _",
    "( oved shisha , ed . ) , academic press , new york , 1972 , pp .  159175 ."
  ],
  "abstract_text": [
    "<S> in 2012 , inspired by developments in group theory and complexity , jockusch and schupp introduced generic computability , capturing the idea that an algorithm might work correctly except for a vanishing fraction of cases . however , we observe that their definition of a negligible set is not computably invariant ( and thus not well - defined on the 1-degrees ) , resulting in some failures of intuition and a break with standard expectations in computability theory .    to strengthen their approach </S>",
    "<S> , we introduce a new notion of intrinsic asymptotic density , with rich relations to both randomness and classical computability theory . </S>",
    "<S> we then apply these ideas to propose alternative foundations for further development in ( intrinsic ) generic computability .    toward these goals , </S>",
    "<S> we classify intrinsic density 0 as a new immunity property , specifying its position in the standard hierarchy from immune to cohesive for both general and @xmath0 sets , and identify intrinsic density @xmath1 as the stochasticity corresponding to permutation randomness . </S>",
    "<S> we also prove that rice s theorem extends to all intrinsic variations of generic computability , demonstrating in particular that no such notion considers @xmath2 to be `` computable '' . </S>"
  ]
}