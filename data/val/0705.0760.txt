{
  "article_text": [
    "message - passing algorithms , like belief propagation and its variants and generalizations , have been shown empirically to be very effective in solving many instances of hard / computationally intensive problems in a wide range of fields .",
    "these algorithms were originally designed for exact inference ( i.e. calculation of marginals / max - marginals ) in tree - structured probability distributions .",
    "their application to general graphs involves replicating their iterative local update rules on the general graph . in this case however , there are no guarantees of either convergence or correctness in general .    understanding and characterizing",
    "the performance of message - passing algorithms in general graphs remains an active research area .",
    "@xcite show correctness for graphs with at most one cycle .",
    "@xcite show that for gaussian problems the sum - product algorithm finds the correct means upon convergence , but does not always find the correct variances .",
    "@xcite show asymptotic correctness for random graphs associated with decoding .",
    "@xcite shows that if max - product converges , then it is optimal in a relatively large `` local '' neighborhood .",
    "in this paper we consider the problem of using max - product to find the maximum weight matching in an arbitrary graph with arbitrary edge weights .",
    "this problem can be formulated as an integer program , which has a natural lp relaxation . in this paper",
    "we prove the following    1 .",
    "if the lp relaxation is tight , then max - product always converges , and that too to the correct answer .",
    "if the lp relaxation is loose , then max - product does not converge .",
    "bayati , shah and sharma @xcite were the first to investigate max - product for the weighted matching problem .",
    "they showed that if the graph is bipartite then max - product always converges to the correct answer .",
    "recently , this result has been extended to @xmath0-matchings on bipartite graphs @xcite . since the lp relaxation is always tight for bipartite graphs ,",
    "the first part of our results recover their results and can be viewed as the correct generalization to arbitrary graphs , since in this case the tightness is a function of structure as well as weights .",
    "we would like to point out three features of our work :    1 .",
    "it provides a _ necessary and sufficient _",
    "condition for convergnce of max - product in arbitrary problem instances .",
    "there are very few non - trivial classes of problems for which there is such a tight characterization of message - passing performance .",
    "the characterization is _ data dependent _ : it is decided based not only on the graph structure but also on the weights of the particular instance .",
    "3 .   tightness of lp relaxations is well - studied for broad classes of problems , making this chracterization promising in terms of both understanding and development of new algorithms .",
    "relations , similarities and comparisons between max - product and linear programming have been used / mentioned by several authors @xcite , and an exact characterization of this relationship in general remains an interesting endeavor .",
    "in particular , it would be interesting to investigate the implications of these results as regards elucidating the relationship between iterative decoding of channel codes and lp decoding @xcite .",
    "a _ matching _ in a graph is a set of edges such that no two edges in the set are incident on the same node .",
    "given a graph @xmath1 , with non - negative weights @xmath2 on the edges @xmath3 , the _ weighted matching problem _ is to find the matching @xmath4 whose edges have the highest total weight . in this paper",
    "we find it convenient to refer to edges both as @xmath3 and as @xmath5 , where @xmath6 .",
    "weighted matching can be written as the following integer program ( ip ) : @xmath7 @xmath8 @xmath9    the lp relaxation of the above problem is to replace the constraint @xmath10 with the constraint @xmath11 .",
    "_ this relaxation is in general not tight _ , i.e. there might exist non - integer solutions with strictly higher value than any integral solution .",
    "it is known however that the lp relaxation is _ always _ tight for bipartite graphs : no matter what the edge weights , the bipartite - ness ensures tightness of the lp relaxation . if a graph is not bipartite , the tightness of the lp relaxation will depend on the edge weights : the same graph may have tightness for one set of weights and looseness for another set .",
    "the dual of the above linear program is the _ vertex cover _ problem : minimize the total of the weights @xmath12 that need to be placed on nodes so as to `` cover '' the edge weights : ( dp ) @xmath13 @xmath14 @xmath15    [ lem : lp_tight ] when the lp relaxation is tight , the optimal matching @xmath4 and the optimal dual variables @xmath16 and satisfy the following properties :    1 .   if @xmath17 then @xmath18 2 .",
    "if @xmath19 then @xmath20 3 .",
    "if no edge in @xmath4 is incident on node @xmath21 , then @xmath22 4 .",
    "@xmath23 for all @xmath21",
    "the _ factor graph _ @xcite of a probability distribution represents the conditional independencies of the distribution .",
    "the max - product ( mp ) algorithm is a simple , local , iterative message passing algorithm that can be used ( in an attempt ) to find the mode / map estimate of a probability distribution .",
    "nodes and factors pass messages to each other , and nodes maintain `` beliefs '' , which represent the max - marginals . when max - product is applied to problems involving general `` loopy '' graphs , one of the following three scenarios may result :    1",
    ".   the algorithm may not converge .",
    "2 .   the algorithm may converge , but to an incorrect answer .",
    "3 .   the algorithm may converge to the correct answer .    as has been mentioned , here",
    "has been siginifcant work attempting to understand the properties of mp for loopy graphs . for the results in this paper , we will use the following two insights :    1 .   at any time",
    ", the belief of the max - product algorithm for a given variable corresponds to the belief at the root of the corresponding _ computation tree _",
    "distribution @xcite associated with that variable at that time .",
    "we describe what this computation tree distribution corresponds to for the weighted matching problem in the next section .",
    "2 .   if max - product _ does _ converge , the resulting beliefs are optimal in a large `` local '' neighborhood @xcite : let @xmath24 be the assignment as given by the converged max - product and @xmath25 be any other assignment . if the variables assigned different values in @xmath24 and @xmath25 form an induced graph containing at most one cycle in each component , then @xmath26 .",
    "the problem of finding @xmath4 can be formulated as the problem of finding the mode of a suitably ( artifically ) constructed probability distribution @xmath27 . in fact , there are in general _ several _ ways to construct this distribution for the _ same _ instance of a graph @xmath28 .",
    "we now present one construction .    associate a binary variable @xmath29 with each edge @xmath3 , and let @xmath30 here @xmath31 represents the neighborhood of node @xmath21 in @xmath28 , and @xmath32 is a normalizing constant .",
    "the variable @xmath33 can be interpreted as follows : @xmath34 indicates that @xmath35 , while @xmath36 indicates @xmath37 .",
    "the term @xmath38 enforces the cosntraint that of the edges incident to node @xmath21 , at most one can be assigned the value `` 1 '' .",
    "thus , it is easy to see that @xmath39 if and only if the edges with @xmath40 constitute a matching in @xmath28 . furthermore , the mode of @xmath27 corresponds to the max - weight matching @xmath4 .",
    "the factor graph max - product involves messages between variables and factors . in our case",
    "the variables are the edges @xmath41 , and the factors are nodes @xmath42",
    ". thus at any time @xmath43 there will be messages @xmath44 from node ( factor ) @xmath21 to edge ( variable ) @xmath5 , as well as messages @xmath45 .",
    "each message will be a length - two vector of real numbers , indexed by 0 and 1 .",
    "the message update rules can be simplified to the following : @xmath46 & = & e^{w_{ij } } m_{j\\rightarrow    ( i , j)}^t[1 ] \\\\",
    "m_{(i , j)\\rightarrow i}^{t+1}[0 ] & = & m_{j\\rightarrow ( i , j)}^t[0 ] \\\\",
    "m_{i\\rightarrow ( i , j)}^{t+1}[1 ] & = & \\prod_{k\\in { \\mathcal{n}}(i)-j }    m_{(k , i)\\rightarrow i}^t [ 0 ] \\\\",
    "m_{i\\rightarrow ( i , j)}^{t+1}[0 ] & = & \\max { \\huge \\ { } \\prod_{k\\in    { \\mathcal{n}}(i)-j } m_{(k , i)\\rightarrow i}^t [ 0 ] ~~ ,   \\\\   & & \\quad \\quad \\quad \\max_{k\\in { \\mathcal{n}}(i)-j } m_{(k , i)\\rightarrow    i}^t[1 ] { \\huge \\ } } \\end{aligned}\\ ] ] also , at every time each edge ( variable ) maintains a belief vector @xmath47 as follows : @xmath48 & = & m_{i\\rightarrow ( i , j)}^t[0 ] ~ \\times ~ m_{j\\rightarrow ( i , j)}^t[0 ] \\\\",
    "b_{(i , j)}^t[1 ] & = & e^{w_{ij } } m_{i\\rightarrow ( i , j)}^t[1 ] ~ \\times ~ m_{j\\rightarrow ( i , j)}^t[1 ] \\end{aligned}\\ ] ] the @xmath27 defined above can be used to find @xmath4 as follows : first run max - product . at any time @xmath43 and for each edge",
    "@xmath49 there will be two beliefs @xmath50 $ ] and @xmath51 $ ] .",
    "if max - product converges , assign to each variable the value ( i.e. `` 0 '' or `` 1 '' ) that corresponds to the stronger belief .",
    "then , declare the set of all edges set to `` 1 '' to be the max - product output .",
    "our proofs rely on the computation tree interpretation @xcite of the max - product beliefs .",
    "we now describe this interpretation when max - product is applied to @xmath27 as given in ( [ eq : p ] ) .    for an edge @xmath49",
    "let @xmath52 be the _",
    "full depth-@xmath53 computation tree rooted at @xmath49_. this is generated recursively : take @xmath54 and to each leaf @xmath55 add as children a copy of each of the neighbors of @xmath55 in @xmath28 , except for the unique neighbor of @xmath55 which is already present in @xmath54 .",
    "also , each new edge has the same weight as its copy in the original @xmath28 .",
    "the recursion is started with the single - edge tree @xmath56 , both of whose endpoints are leaves .",
    "this initial edge is the _ root _ of @xmath57 .",
    "consider now the `` full synchronous '' max - product , where at each time every message in the network is updated . in this case",
    "the computation tree @xmath58 for edge @xmath49 at time @xmath53 will be @xmath52 .",
    "alternatively , max - product may be executed asynchronously with only a subset of the messages updated in every time slot . in this case",
    "@xmath58 will be a sub - tree of @xmath52 . in either case , the computation tree interpretation states at time @xmath53 we have @xmath59>b^k_e[0]$ ] if and only if the root of @xmath58 is a member of a max - weight matching on the tree @xmath58 .",
    "the figure below shows an example where on the left is @xmath28 : the four - cycle @xmath60 and the chord @xmath61 , with a matching @xmath62 depicted in bold . on the right",
    "is the computation tree @xmath63 which is the full tree of depth 4 rooted at edge @xmath64 .",
    "the bold edges depict the projection @xmath65 of @xmath66 onto @xmath63 : an edge @xmath49 in the tree is in @xmath65 if and only if its copy in @xmath28 is in @xmath66 .",
    "[ lem : matching_corresp ] let @xmath66 be a matching in @xmath28 and @xmath58 be a computation tree .",
    "let @xmath65 be the set of all copies in @xmath58 of all edges in @xmath66 .",
    "then , @xmath65 is a matching in @xmath58 .",
    "also , if @xmath66 is maximal in @xmath28 , @xmath65 is maximal in @xmath67 .",
    "of course @xmath67 will also contain other matchings that are not projections of matchings in @xmath28 .",
    "finally , we say that a ( possibly not full ) tree @xmath58 is _ full upto depth @xmath68 _ if the full tree @xmath69 is contained in @xmath58 .",
    "we are now ready to prove the main result of this paper : the equivalence of max - product and lp relaxation .",
    "before we proceed , we define the following terms    1 .",
    "we say that the _ lp relaxation is tight _ if the linear program ( lp ) obtained by relaxing the integer program ( [ eq : ip ] ) has a unique optimal solution at which all values @xmath33 are either 0 or 1 . 2 .",
    "we say that _ max - product converges by step @xmath53 _ if the variable assignments ( 0 or 1 ) that maximize the beliefs at each node remain constant once the associated computation tree is full up to depth at least @xmath53 .",
    "note that this includes both synchronous and asynchronous message updates .",
    "we say that _ max - product converges _ if there exists some @xmath70 such that max - product converges by step @xmath53 .",
    "finally , we say that _ max product converges to the correct answer _ if the beliefs @xmath71 at convergence are such that @xmath72>b_e[0]$ ] if and only if @xmath35 , and @xmath72<b_e[0]$ ] if and only if @xmath37    we also need to make some uniqueness assumptions",
    ". it is well - recognized that max - product may perform poorly in the presence of multiple optima , and that characterizing performance in this case is hard . for the rest of this paper",
    "we will assume the following :    1 .",
    "@xmath4 is the unique optimal matching .",
    "the linear program always has a unique optimal solution .",
    "note that this can be fractional , but it has to be unique .      in this section we prove that if the lp relaxation is tight then max - product converges to the correct answer . recall that when the lp is tight , part 2 of lemma [ lem : lp_tight ] says that if @xmath73 then @xmath20 . the uniqueness assumptions * a1 - 2 * further imply that the inequality is strict : @xmath74 .",
    "another way of saying this is that there exists an @xmath75 such that @xmath76    consider a weighted graph @xmath28 for which the lp relaxation is tight .",
    "then max - product converges to the correct answer by step @xmath77 , where @xmath78 is the weight of the heaviest edge , and @xmath79 satisfies ( [ eq : gap ] ) .",
    "_ proof : _",
    "let @xmath4 be the optimal matching on @xmath28 .",
    "for max - product to be convergent and correct , we need that @xmath80 > b^t_e[0]$ ] for all @xmath35 and @xmath80 < b^t_e[0]$ ] for all @xmath37 , and for all @xmath43 such that @xmath81 is full upto depth @xmath77 .",
    "so suppose that for such a @xmath43 there exists an @xmath37 such that @xmath80 > b^t_e[0]$ ] .",
    "then , there exists a matching @xmath66 in @xmath81 such that _ ( a ) _ the root @xmath82 , and _ ( b ) _",
    "@xmath66 has the largest weight among matchings on @xmath81 .",
    "let @xmath83 be the set of all edges in @xmath81 that are copies of edges in @xmath4 .",
    "by lemma [ lem : matching_corresp ] , @xmath83 is a maximal matching on @xmath81 .",
    "also , the root @xmath84 by assumption .",
    "the symmetric difference @xmath85 consists of disjoint alternating paths in @xmath81 : each path will have every alternate edge in @xmath83 and all other edges in @xmath66 .",
    "let @xmath86 be the path that contains the root @xmath49 .",
    "we now show that @xmath87 .",
    "recall that the optimal dual solution assigns to each node @xmath21 in @xmath28 a `` dual value '' @xmath88 .",
    "associate now with each node in @xmath81 the dual value of its copy in @xmath28 .",
    "then , by lemma [ lem : lp_tight ] we have that @xmath18 for each @xmath89 .",
    "suppose now that neither endpoint of @xmath86 is a leaf of @xmath81 .",
    "in this case , we have @xmath90 on the other hand , we know that ( [ eq : gap ] ) holds for each edge in @xmath91 . adding these up gives @xmath92 by assumption ,",
    "the root @xmath93 , so @xmath94 and hence @xmath95 when no endpoints of @xmath86 are leaves .",
    "suppose now that exactly one of the endpoints @xmath55 of @xmath86 is a leaf of @xmath81 . in this case",
    ", we have that @xmath96 where the last inequality follows from part 4 of lemma [ lem : lp_tight ] also , @xmath81 is assumed to be full up to depth @xmath53 , so this implies that @xmath97 .",
    "this means that @xmath98 now , since @xmath99 , this implies that @xmath95 .",
    "the final case , where both endpoints of @xmath86 are leaves , works out in the same way , except that now @xmath100 and @xmath101 .",
    "thus , in any case , we have that @xmath87 .",
    "consider now the set of edges @xmath102 .",
    "this set forms a matching on @xmath81 , and has higher weight than @xmath66 .",
    "this contradicts the choice of @xmath66 , and so establishes that @xmath80 < b^t_e[0]$ ] for all @xmath37 .",
    "a similar contradiction argument can be used to establish that @xmath80 > b^t_e[0]$ ] for all @xmath103 .",
    "this completes the proof .",
    "@xmath104      in this section we prove that if the lp relaxation is loose then max - product does not converge to the correct answer . before we do so however , we note that this implies a stronger result : that when lp is loose then in fact max - product does not converge at all .",
    "[ lem : local_global ] consider the distribution @xmath105 as given in ( [ eq : p ] ) .",
    "if max - product converges , then its output exactly corresponds to the true optimal matching @xmath4 .",
    "the proof of this lemma uses the `` local optimality '' result of weiss and freeman @xcite .",
    "in particular , for @xmath27 it turns out that local optimality implies global optimality .",
    "this means that it is not possible for max - product to converge to an incorrect answer : it will either not converge at all , or converge to @xmath4 .",
    "we do not use this explicitly in the proofs below , but it strengthens the results as mentioned above .    we now proceed with showing that max - product does not converge to the correct @xmath4 when lp is loose . as a first step ,",
    "we need a combinatorial characterization of when the lp relaxation is loose .",
    "we now make some definitions .",
    "we say that a node @xmath55 is _ saturated _ by a matching @xmath66 if there exists an edge @xmath82 that is incident to @xmath55 .",
    "a _ blossom _ with respect to a matching @xmath66 is an odd cycle @xmath106 with @xmath107 edges in @xmath66 .",
    "note that a blossom has a unique _ base _ : a node not saturated by any edge in @xmath108 .",
    "a _ stemmed blossom _",
    "@xmath109 ( w.r.t @xmath66 ) is a blossom @xmath106 , along with an alternating path ( stem ) @xmath86 that starts at the base of @xmath106 , and starts with an edge in @xmath66 .",
    "also , @xmath86 should be such that the set @xmath110 remains a matching in @xmath28 .",
    "a _ bad stemmed blossom _ is one in which the edge weights satisfy @xmath111 note that it may well be the case that @xmath112 , in which case @xmath109 is just an odd cycle .",
    "the following is an example of a bad stemmed blossom .",
    "the bold edges are the ones in @xmath66 , the numbers denote the weights of the corresponding edges , and the last node @xmath21 has no edge of @xmath66 incident on it .",
    "the blossom @xmath106 in this case is the cycle @xmath113 , and node @xmath114 is its base .",
    "the path / stem @xmath86 is @xmath115 .",
    "a _ blossom pair _",
    "@xmath116 is two blossoms @xmath117 and @xmath118 and an alternating path @xmath86 between the bases of the two blossoms such that @xmath86 begins and ends with edges in @xmath66 .",
    "bad blossom pair _",
    "is one in which the edge weights satisfy @xmath119 the following is an example of a bad blossom pair .",
    "the following proposition provides a combinatorial characterization of when the lp relaxation is loose , and is crucial to the proof of the subsequent theorem .",
    "[ prop : bad_subgr ] if the lp relaxation is loose , then there exists a bad stemmed blossom , or a bad blossom pair , with respect to the optimal matching @xmath4 .    _",
    "proof : _ in appendix .",
    "we use the presence of these `` bad '' subgraphs in @xmath28 to show that max - product does not converge to the correct answer . before we do so , we need one additional lemma .",
    "this states that if max - product converges by step @xmath53 to some matching @xmath66 on @xmath28 , then the optimal matching @xmath65 on the computation tree looks like @xmath66 in the neighborhood of the root .",
    "[ lem : convg_tree ] suppose max - product converges to a matching @xmath66 in @xmath28 by step @xmath53 .",
    "consider any edge @xmath49 , some @xmath120 and a corresponding computation tree @xmath67 which is full up to depth @xmath121 .",
    "let @xmath65 be the max - weight matching on the tree .",
    "then , for any edge @xmath122 that is within distance @xmath123 of the root @xmath49 , @xmath124 if and only if its copy @xmath125 in @xmath28 is such that @xmath126 .",
    "note that the above lemma also applies to the root @xmath49 of the tree .",
    "we are now ready to state and prove the main result of this section .",
    "recall that the belief @xmath71 on an edge at convergence is incorrect if either @xmath35 but @xmath127>b_e[1]$ ] , or @xmath37 but @xmath72>b_e[0]$ ] .    consider a weighted graph @xmath28 for which the lp relaxation is loose .",
    "then , the max - product beliefs do not converge to the correct @xmath4 : for any given @xmath53 , there exists a @xmath128 and computation trees @xmath129 such that each @xmath67 is full upto depth @xmath68 , but the beliefs on some of the edges are incorrect .",
    "lemma [ lem : local_global ] further implies that in fact in this case max - product does not converge at all .",
    "_ proof : _",
    "let @xmath4 be the max - weight matching on @xmath28 . since the lp relaxation is loose , by prop .",
    "[ prop : bad_subgr ] , there exists either a bad stemmed blossom or a bad blossom pair w.r.t .",
    "suppose first that it contains a bad stemmed blossom @xmath109 , and consider some @xmath130 that is in the `` blossom '' part of @xmath109 ( as opposed to the stem ) and also in @xmath4 .",
    "from the two nodes of @xmath49 , make maximal alternating paths @xmath131 and @xmath132 that remain in @xmath109 and start out in opposite directions on @xmath106 .",
    "for the stemmed blossom example above , if @xmath49 is the edge @xmath64 then the two paths will be @xmath133 and @xmath134 .",
    "let @xmath135 , and similarly @xmath136 for @xmath132 .",
    "@xmath137 represents the change in the weight of the matching if each edge in @xmath131 were `` switched '' , i.e. their membership in the matching was reversed from its original value .",
    "it is easy to see that @xmath138 by assumption @xmath109 is a bad blossom and hence we have that @xmath139 .",
    "suppose max - product converges to @xmath4 by step @xmath53 .",
    "consider now the computation tree @xmath67 which is full upto depth @xmath140 , where @xmath141 is the number of nodes in @xmath28 .",
    "let @xmath65 be the max - weight matching on @xmath67 .",
    "lemma [ lem : convg_tree ] implies that @xmath65 will be a projection of @xmath4 in a distance-@xmath141 neighborhood of the root .",
    "also , starting from the root @xmath49 , each of @xmath131 and @xmath132 will have a unique copy , say @xmath142 and @xmath143 respectively , in @xmath67 , with @xmath144 . since @xmath131 and @xmath132 are alternating w.r.t .",
    "@xmath4 , it follows that @xmath142 and @xmath143 will be alternating with respect to @xmath65 .",
    "also , the set @xmath145 forms an alternating path on @xmath67 with respect to @xmath65 , and this begins and ends in nodes unsaturated by @xmath65 .",
    "thus , @xmath65 can be augmented by this path : the set @xmath146 will be a matching on @xmath67 .",
    "also , the weight gain from doing this augmentation will be exactly @xmath147 , which we know is strictly positive .",
    "thus , this shows that @xmath65 is not the optimal matching on @xmath67 , which contradicts the choice of @xmath65 .",
    "this means that our assumption about max - product convergence to @xmath4 is incorrect .",
    "thus , we see that if there exists a bad stemmed blossom w.r.t .",
    "@xmath4 in @xmath28 then max - product does not converge to @xmath4 .",
    "a similar argument holds for the case of a bad blossom pair @xmath116 , except that instead of paths @xmath131 and @xmath132 above we now have to look at alternating walks @xmath148 and @xmath149 that live in @xmath116 and are long enough .",
    "these walks can then be mapped to an augmenting path on @xmath67 which strictly improves @xmath65 , leading to a contradiction as was seen in the case of the paths @xmath131 and @xmath132 .",
    "this completes the proof .",
    "the results of this paper can be generalized to the case of perfect matchings , @xmath0-matchings and perfect @xmath0-matchings in general graphs , where similar results hold . in this paper max - product",
    "is shown to be as powerful as lp relaxation , but it would be more interesting to outline a direct _ operational _ link between max - product and a linear programming algorithm . as an example , @xcite shows that for bipartite matching max - product has an operational correspondance with the auction algorithm @xcite .",
    "also , the form of the message update equations suggests that it can be implemented via an equivalent message passing update rule between just the nodes of the graph @xmath28 , instead of having messages go from nodes to edges and vice versa .",
    "more generally , it would be interesting to see if the ideas presented in this paper could be used / genealized to show connections between linear programming and belief propagation in other applications .",
    "the author would like to acknowledge dmitry malioutov , whose experiments suggested a strong link between lp relaxation and max - product performance for non - bipartite graphs .",
    "dmitry is also responsible for pointing the author to the local optimality result @xcite .",
    "we now show that if the lp relaxation is loose then there exists in the graph either a bad stemmed blossom or a bad blossom pair , with respect to the optimal matching @xmath4 .",
    "let @xmath150 be the optimal ( fractional ) solution to the lp relaxation .",
    "let @xmath151 be the set of all edges @xmath49 such that either _ ( a ) _ @xmath103 , or _",
    "@xmath37 and @xmath152 .",
    "then , @xmath151 will contain at least one edge @xmath37 , because if all @xmath37 had @xmath153 then the lp would be tight .",
    "let @xmath154 be the subgraph of @xmath28 having only the edges in @xmath151 .",
    "cycle augmentation _ is any even cycle in which every alternate edge is in @xmath4 .",
    "path augmentation _ is any path in which every alternate edge is in @xmath4 , and which begins and ends in nodes unsaturated by @xmath4 . for any augmentation @xmath155",
    ", we have that @xmath156 is also a matching in @xmath157 .",
    "thus , if @xmath4 is the unique max - weight matching it has to be that @xmath158 .",
    "_ proof : _ let @xmath155 be an augmentation in @xmath157 . by assumption , @xmath152 for all @xmath159 , which implies that @xmath160 for all @xmath161 .",
    "thus , there exists some @xmath162 such that decreasing each @xmath163 by @xmath79 and increasing each @xmath164 by @xmath79 represents a valid new feasible point for the lp .",
    "the weight of this new point exceeds the weight of @xmath150 by @xmath165 .",
    "however this contradicts the optimality of @xmath150 , and thus @xmath157 can not contain any augmentation .",
    "let @xmath166 be the longest alternating sequence of edges in @xmath157 , and let @xmath167 and @xmath168 be its endpoints . by the lemma above , both can not be unsaturated .",
    "we say that @xmath167 or @xmath168 is a _ saturated leaf _ if it is saturated by @xmath4 and there exist no edges in @xmath169 incident on it .",
    "also , note that an endpoint is saturated if and only if its corresponding edge in @xmath166 is also in @xmath4 .      1 .   both @xmath167 and @xmath168 are both saturated leaves + in this case , the constraints at @xmath167 and @xmath168 are loose .",
    "so , there exists an @xmath79 such that if all @xmath170 are decreased by @xmath79 and all @xmath171 are increased by @xmath79 then the new solution remains feasible .",
    "this new solution will have strictly higher weight than @xmath150 , which is a contradiction .",
    "thus this case can not occur .",
    "@xmath167 is a saturated leaf and @xmath168 is unsaturated .",
    "+ an @xmath79-perturbation argument like the one above can be used to show that this case too can not occur .",
    "@xmath167 is saturated by @xmath4 .",
    "but is not a leaf .",
    "@xmath168 is either unsaturated , or a saturated leaf .",
    "+ since @xmath166 can not be extended , it has to be that all edges in @xmath169 incident to @xmath167 have other endpoints in @xmath166 .",
    "let @xmath49 be one such edge . then , @xmath172 forms a stemmed blossom : the resulting cycle has to be odd , and the remaining part of @xmath166 will be a stem whose endpoint is @xmath168 .",
    "note that in this case it has to be that the constraint at @xmath168 is loose .",
    "4 .   both @xmath167 and @xmath168",
    "are saturated by @xmath4 , but are not leaves .",
    "+ applying the above blossom argument to both @xmath167 and @xmath168 yields the existence of a blossom pair .",
    "thus if the lp relaxation is loose then there exists a stemmed blossom or a blossom pair .",
    "now all that is remaining to show is that they are `` bad '' .",
    "let @xmath109 be a stemmed blossom in @xmath157 , consisting of blossom @xmath106 and stem @xmath86 .",
    "then , there exists some @xmath75 such that if @xmath173 is increased by @xmath79 , @xmath174 is decreased by @xmath79 , @xmath175 is increased by @xmath176 , and @xmath174 is decreased by @xmath176 , then the new solution remains feasible for the lp . also , the new solution weighs @xmath177\\ ] ] more than @xmath150 . for @xmath150 to be the unique optimal of the lp , this has to be strictly negative and thus any stemmed blossom @xmath109 is bad .",
    "a similar argument shows that any blossom pair is bad .",
    "this finishes the proof of the proposition .",
    "@xmath104                p.  rusmevichientong and b.  v. roy , `` an analysis of belief propagation on the turbo decoding graph with gaussian densities , '' _ ieee transactions on information theory _ , vol .",
    "47 , no .  2 ,",
    "pp . 745765 , 2001 .",
    "y.  weiss and w.  freeman , `` on the optimality of solutions of the max - product belief - propagation algorithm in arbitrary graphs , '' _ ieee transactions on information theory _ , vol .",
    "47 , no .  2 ,",
    "736744 , feb .",
    "2001 .",
    "m.  wainwright , t.  jaakkola , and a.  willsky , `` map estimation via agreement on ( hyper)trees : message - passing and linear - programming approaches , '' _ ieee transactions on information theory _ , vol .",
    "51 , no .  11 , pp . 36973717 , nov .",
    "j.  feldman , d.  karger , and m.  wainwright , `` linear programming - based decoding of turbo - like codes and its relation to iterative approaches . '' in _",
    "allerton conference on communication , control , and computing _ , 2002 ."
  ],
  "abstract_text": [
    "<S> max - product belief propagation is a local , iterative algorithm to find the mode / map estimate of a probability distribution . while it has been successfully employed in a wide variety of applications , there are relatively few theoretical guarantees of convergence and correctness for general loopy graphs that may have many short cycles . of these , </S>",
    "<S> even fewer provide exact `` necessary and sufficient '' characterizations .    in this paper </S>",
    "<S> we investigate the problem of using max - product to find the maximum weight matching in an arbitrary graph with edge weights . </S>",
    "<S> this is done by first constructing a probability distribution whose mode corresponds to the optimal matching , and then running max - product . </S>",
    "<S> weighted matching can also be posed as an integer program , for which there is an lp relaxation . </S>",
    "<S> this relaxation is not always tight . in this paper </S>",
    "<S> we show that    1 .   </S>",
    "<S> if the lp relaxation is tight , then max - product always converges , and that too to the correct answer . </S>",
    "<S> 2 .   if the lp relaxation is loose , then max - product does not converge .    </S>",
    "<S> this provides an exact , data - dependent characterization of max - product performance , and a precise connection to lp relaxation , which is a well - studied optimization technique . </S>",
    "<S> also , since lp relaxation is known to be tight for bipartite graphs , our results generalize other recent results on using max - product to find weighted matchings in bipartite graphs . </S>"
  ]
}