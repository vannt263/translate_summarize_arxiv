{
  "article_text": [
    "state explosion is a very common problem in the control of large scale systems due to the interconnection of numerous subsystems .",
    "therefore , it is usually desired to reduce the state space of subsystems while overapproximating or preserving their external behavior important for their interconnection to surrounding components . +",
    "this mechanism is also used to reduce the complexity of verification problems in the theoretical computer science community . here",
    ", systems are usually modeled by so called transition systems , a subclass of discrete time state space models . for these models ,",
    "the notion of bisimilarity plays an important role .",
    "this concept was introduced by milner @xcite in the context of concurrent processes to describe how state trajectories of two transition systems mimic each other while producing the same `` external '' behavior , i.e. , using the same transition symbols .",
    "if such a bisimulation relation exists , it was shown that many interesting properties expressible in temporal logics , in particular reachability , are preserved when replacing a system by a bisimilar one .",
    "+ the use of bisimulation relations for other system models was discussed in the survey paper @xcite . here , special classes of hybrid systems are rewritten into a transition system and it was shown that they allow for purely discrete abstractions bisimilar to the constructed transition system .",
    "pappas @xcite adapted this method for linear time - invariant continuous state space models with finite observation maps , still using both a rewriting and an abstraction step . to remove the rewriting step ,",
    "van der schaft @xcite introduced a notion of bisimulation directly applicable to continuous systems .",
    "he showed that this equivalence interpretation unifies the concepts of state space equivalence and reduction using controlled invariant subspaces .",
    "these results where generalized by van der schaft and coworkers to hybrid systems @xcite , switched linear systems @xcite and behavioral systems @xcite .",
    "+ recently , davoren and tabuada @xcite presented simulation and bisimulation relations using general flow systems @xcite , preserving properties formulated in the so called general flow logic @xcite .",
    "general flow systems are able to model continuous , discrete , hybrid or even `` meta - hybrid '' autonomous state dynamics also allowing equivalence relations between systems with different time scales .",
    "this feature extends all previous approaches where only relations between systems with unique time scales are possible .",
    "although davoren and moor discussed in @xcite how general flow systems can be equipped with input and output maps , the simulation relations in @xcite do not incorporate the feature of ensuring identical external signals of bisimilar systems . in @xcite a comparison between simulation relations on transition systems and simulation relations on general flow systems is presented .",
    "+ tabuada and coworkers extended the work of alur et.al .",
    "@xcite towards finite state abstraction methods ensuring similarity or bisimilarity between the original and the abstracted system @xcite . independently from this work , the notion of @xmath0-complete abstraction @xcite evolved as a discrete abstraction technique in the framework of behavioral systems theory @xcite . in both frameworks a finite state abstraction of a possibly continuous or hybrid dynamical system is obtained if the external signal space is finite and the trajectories of external signals evolve on the discrete time axis @xmath1 . in the context of bisimilarity relations ,",
    "these external signals should be preserved during abstraction .",
    "this raises the problem of deriving a bisimilarity notion that ensures equivalence of discrete external signals while comparing state trajectories that evolve on possibly continuous or hybrid time lines .",
    "this issue has up until now not been explicitly addressed , neither in the context of @xmath0-complete approximations nor in the work by tabuada and coworkers . in the latter , as in @xcite and @xcite ,",
    "the original system is first rewritten into a transition system , previous to the abstraction step .",
    "the bisimulation relation is then only ensured to hold between the transition system and its abstraction . + to also incorporate the rewriting step into the exploration of equivalence , we introduce a system model with distinct external and internal signals possibly evolving on a different time axis in section [ sec : sys ] . to cover a very general class of systems , we use behavioral systems theory @xcite to formalize our notion .",
    "we note that this restricts each time axis to be either continuous or discrete .",
    "it is future research to also incorporate hybrid time scales for the internal signals as formalized , for example , in @xcite .",
    "inspired by the the work in @xcite and @xcite , we derive a simulation relation for the newly introduced system model in section [ sec : simrel ] .",
    "we show that the introduced simulation and bisimulation relations are preorders and equivalence relations , respectively , for the system class under consideration .",
    "+ this work is a first step towards the comparison of different existing approaches to construct ( bi)similar finite state abstractions .",
    "due to page limitations this comparison is only shortly touched in various remarks and will be explored in more detail in subsequent publications .",
    "a _ dynamical system _ is given by @xmath2 , consisting of the right - unbounded time axis @xmath3 , the signal space @xmath4 and the behavior of the system @xmath5 , where @xmath6 is the set of all _ signals _ evolving on @xmath7 and taking values in @xmath4 . slightly abusing notation , we also write @xmath8 if @xmath9 is a _ partial function_. this is understood to be shorthand for @xmath10 , where @xmath11 is the _ domain _ of @xmath12 .",
    "furthermore , @xmath13 is the _ identity map _ s.t . '' , meaning that all statements after the dot hold for all variables in front of the dot .",
    "`` @xmath14 '' is interpreted analogously . ]",
    "now let @xmath16 be a product space .",
    "then the _ projection _ of a signal @xmath17 to @xmath18 is given by @xmath19 and @xmath20 denotes the projection of all trajectories in the behavior .",
    "given two signals @xmath21 and two points in time @xmath22 , the _ concatenation _",
    "@xmath23 is given by @xmath24 where we denote @xmath25 by @xmath26 .",
    "when reasoning about similarity and bisimilarity of systems one has to distinguish between `` external '' signals , which are required to match or satisfy an inclusion property , and the remaining `` internal '' signals .",
    "depending on the chosen system representation and/or the real world problem at hand , this distinction may differ . to incorporate a wide range of possibilities ,",
    "we define a so called @xmath27-dynamical system , where @xmath27 is a set - valued map which describes the relation between internal and external signals .",
    "+    [ def : dynsysinducesfinitev ] let @xmath2 be a dynamical system . then @xmath28 is a * @xmath27-dynamical system * if @xmath29 where @xmath30 is an external signal space , @xmath31 is a right - unbounded time axis , @xmath32          \\node [ ] ( e ) at ( 0,0 ) { $ { { \\tau } } \\text { is surjective and}$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,0.5ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ \\text{monotonically increasing}$ } ;          \\end{tikzpicture}}}\\right\\}}\\ ] ] is a set of time scale transformations and @xmath33 is the external behavior .",
    "furthermore , @xmath34 denotes the inverse time scale transformation , by slightly abusing notation , we denote the unique element @xmath35 by @xmath36 itself and write @xmath37 .",
    "] , i.e. , @xmath38 .",
    "the construction of @xmath27 in definition  [ def : dynsysinducesfinitev ] was inspired by the deterministic map in ( * ? ? ?",
    "note , that the map in ( * ? ? ?",
    "12 ) is required to be strictly causal . in analogy",
    ", one would typically require that the map @xmath27 is non - anticipating , i.e. , @xmath39}}}={\\ensuremath{w}}'{\\ensuremath{|_{[0,t ] } } } \\end{propconja } } { { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{\\tilde{\\gamma}\\in\\gamma^{\\ensuremath{{t_e } } } , \\tilde{\\tau}\\in{\\mathcal{t } } } { \\begin{propconja } { { (     \\firsttrue      \\@for\\i:=\\tilde{\\gamma},\\tilde{\\tau}\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}({\\ensuremath{w}}')\\\\   \\tau{\\ensuremath{|_{[0,t]}}}=\\tilde{\\tau}{\\ensuremath{|_{[0,t]}}}\\\\ \\gamma{\\ensuremath{|_{[0,{{\\tau}}(t)]}}}=\\tilde{\\gamma}{\\ensuremath{|_{[0,{{\\tau}}'(t ) ] } } } \\end{propconja}. } } $ }          \\settowidth{\\sfs@width}{$ { \\@ifstar{\\ensuremath{\\left({\\ensuremath{\\ifthenelse{\\isempty{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{}}}{\\cdot}{}}}}{\\cdot}{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{\\rightarrow}}{\\cdot}{\\rightarrow}}}\\ifthenelse{\\isempty{}}{\\cdot}{}}}}\\right ) } } { \\begin{propconja } { { (     \\firsttrue      \\@for\\i:=\\gamma,\\tau\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}({\\ensuremath{w}})\\\\ { { (     \\firsttrue      \\@for\\i:=\\gamma',\\tau'\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}({\\ensuremath{w}}')\\\\ { \\ensuremath{w}}{\\ensuremath{|_{[0,t]}}}={\\ensuremath{w}}'{\\ensuremath{|_{[0,t ] } } } \\end{propconja } } { { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{\\tilde{\\gamma}\\in\\gamma^{\\ensuremath{{t_e } } } , \\tilde{\\tau}\\in{\\mathcal{t } } } { \\begin{propconja } { { (     \\firsttrue      \\@for\\i:=\\tilde{\\gamma},\\tilde{\\tau}\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}({\\ensuremath{w}}')\\\\   \\tau{\\ensuremath{|_{[0,t]}}}=\\tilde{\\tau}{\\ensuremath{|_{[0,t]}}}\\\\ \\gamma{\\ensuremath{|_{[0,{{\\tau}}(t)]}}}=\\tilde{\\gamma}{\\ensuremath{|_{[0,{{\\tau}}'(t ) ] } } } \\end{propconja}. } } $ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;w , w'\\in{\\ensuremath{\\mathcal{b}}},\\gamma,\\gamma'\\in\\gamma^{\\ensuremath{{t_e}}},\\tau,\\tau'\\in{\\mathcal{t}},t\\in{\\ensuremath{t}}\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left({\\ensuremath{\\ifthenelse{\\isempty{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{}}}{\\cdot}{}}}}{\\cdot}{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{\\rightarrow}}{\\cdot}{\\rightarrow}}}\\ifthenelse{\\isempty{}}{\\cdot}{}}}}\\right ) } } { \\begin{propconja } { { (     \\firsttrue      \\@for\\i:=\\gamma,\\tau\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}({\\ensuremath{w}})\\\\ { { (     \\firsttrue      \\@for\\i:=\\gamma',\\tau'\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}({\\ensuremath{w}}')\\\\ { \\ensuremath{w}}{\\ensuremath{|_{[0,t]}}}={\\ensuremath{w}}'{\\ensuremath{|_{[0,t ] } } } \\end{propconja } } { { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{\\tilde{\\gamma}\\in\\gamma^{\\ensuremath{{t_e } } } , \\tilde{\\tau}\\in{\\mathcal{t } } } { \\begin{propconja } { { (     \\firsttrue      \\@for\\i:=\\tilde{\\gamma},\\tilde{\\tau}\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}({\\ensuremath{w}}')\\\\   \\tau{\\ensuremath{|_{[0,t]}}}=\\tilde{\\tau}{\\ensuremath{|_{[0,t]}}}\\\\ \\gamma{\\ensuremath{|_{[0,{{\\tau}}(t)]}}}=\\tilde{\\gamma}{\\ensuremath{|_{[0,{{\\tau}}'(t ) ] } } } \\end{propconja}. } } $ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;w , w'\\in{\\ensuremath{\\mathcal{b}}},\\gamma,\\gamma'\\in\\gamma^{\\ensuremath{{t_e}}},\\tau,\\tau'\\in{\\mathcal{t}},t\\in{\\ensuremath{t}}\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture}}}}\\ ] ] in words : if we change the future of @xmath40 , the past and present of both @xmath41 and @xmath42 are allowed to remain unaffected .    using this concept , systems with single time axis , i.e. , @xmath43 , as well as systems with multiple time axes , i.e.",
    ", @xmath44 can be described in a unified fashion . +",
    "as outlined in the introduction , a large portion of research on simulation relations in the control systems community uses a single time scale . in this context , the signals that are externally visible `` live '' in a subspace of the signal space @xmath4 .",
    "capturing these models in our framework leads to an identity time scale transformation and a signal map @xmath27 projecting signals @xmath17 to the externally visible subspace @xmath30 .",
    "+    [ rem:0 ] consider a dynamical system @xmath45 with @xmath46 and @xmath47 , where @xmath48 is the set of inputs and @xmath49 is the set of outputs . with a special choice of @xmath50 , this model can capture the dynamics of a transition system as used by pappas and tabuada , e.g. , in @xcite .",
    "there it is assumed that the inputs are chosen and only the output signals are required to be ( bi)simulated by a related system .",
    "this can be expressed by a @xmath27-dynamical system by choosing @xmath51 , @xmath52 and @xmath53 .",
    "+ analogously , using @xmath54 and @xmath55 , where @xmath56 is the disturbance space , we can construct @xmath50 such that @xmath57 captures the dynamics of the linear time invariant system used by van der schaft in @xcite .",
    "there , the inputs and outputs are required to match for bisimilar systems .",
    "this can be expressed by a @xmath27-dynamical system by choosing @xmath58 , @xmath59 and @xmath60 .",
    "in contrast to the cases described in remark  [ rem:0 ] , the construction of a @xmath27-dynamical system with @xmath44 is not as straightforward and therefore illustrated by an example .",
    "+    [ exp:1 ] consider a dynamical system @xmath45 with @xmath54 , @xmath61}$ ] and @xmath62 iff @xmath40 is continuouse .",
    "using @xmath51 , @xmath63 and the sets @xmath64 ,   \\end{aligned}\\ ] ] the external signals @xmath65 are constructed via the discretization @xmath66 s.t .",
    "@xmath67 so far , this discretization does not include any information about its timing , i.e. , the formal construction of @xmath27 . out of the many different options ,",
    "we discuss two possible maps @xmath68 and @xmath69 as depicted in figure  [ fig : timescale1 ] and figure  [ fig : timescale2 ] .",
    "+ first , consider a signal map @xmath68 s.t .",
    "for all @xmath70 and @xmath71 , it holds that @xmath72  @xmath73 and for all @xmath74 , @xmath75 where @xmath76 denotes the greatest lower bound and @xmath77 .",
    "this generates the * point to point time scale transformation * depicted in figure  [ fig : timescale1 ] ( middle ) , where different points in @xmath78 are mapped to different points in @xmath79 , and an external event is triggered when leaving the interval .",
    "the generated external signal @xmath41 is depicted in figure  [ fig : timescale2 ] .",
    "this map @xmath68 can be extended to generate a * set to point time scale transformation * by defining @xmath80 where every point in @xmath7 is in the domain of @xmath81 .",
    "this time scale transformation is depicted in figure  [ fig : timescale1 ] ( bottom ) . combining the construction of @xmath81 with the construction of @xmath41 in defines a signal map @xmath69 .",
    "+ now assume , that we have a signal @xmath82 that stays in @xmath83 for all @xmath84 .",
    "this signal would only generate one external event @xmath85 at time @xmath86 but not an infinite sequence of events @xmath87 , where @xmath79 is right unbounded .",
    "therefore , the signal maps @xmath68 and @xmath69 map @xmath88 to the empty set .",
    "obviously , one could repeat the symbol @xmath85 infinitely often to generate a signal in @xmath87 from @xmath88 .",
    "however , if one has to know that @xmath40 will never leave @xmath83 to do so , as suggested in ( * ? ? ?",
    "* def.7.2 ) , this generates an anticipating signal map .",
    "a non - anticipating version is , for example , obtained , if a symbol is repeated after a fixed time @xmath89 , if the quantization interval is not left . this would combine event triggered with slow time triggered discretization .    background ( 0,0 )",
    "node ( o ) ) and set to point ( @xmath81 ) time scale transformations as constructed in example  [ exp:1].,title=\"fig : \" ] ;    foreground ( o.north west)+(-0.1,-0.2 ) node @xmath4 ; ( o.north west)+(-0.1,-0.7 ) node @xmath90 ; ( o.north west)+(-0.1,-1.2 ) node @xmath91 ; ( o.north west)+(-0.1,-1.7 ) node @xmath92 ; ( o.north west)+(-0.1,-2.2 ) node @xmath93 ; ( o.north west)+(0,-2.7 ) node ( b ) @xmath86 ; ( o.north east)+(0.2,-2.3 ) node @xmath17 ; ( o.north east)+(-0.1,-3.1 ) node ( t2 ) @xmath94 ; ( b)+(0,-0.7 ) node @xmath79 ; ( b)+(0,-1.2 ) node @xmath95 ; ( b)+(0,-1.7 ) node @xmath96 ; ( b)+(0,-2.2 ) node @xmath97 ; ( b)+(0,-2.7 ) node @xmath98 ; ( b)+(0,-3.2 ) node ( c ) @xmath86 ; ( t2)+(0.3,-0.9 ) node @xmath99 ; ( t2)+(0,-3.2 ) node ( t3 ) @xmath94 ; ( c)+(0,-0.8 ) node @xmath79 ; ( c)+(0,-1.5 ) node @xmath95 ; ( c)+(0,-2.1 ) node @xmath96 ; ( c)+(0,-2.6 ) node @xmath97 ; ( c)+(0,-3.1 ) node @xmath98 ; ( c)+(0,-3.6 ) node ( c ) @xmath86 ; ( t3)+(0.3,-1.2 ) node @xmath100 ; ( t3)+(0,-3.5 ) node @xmath94 ;    background ( 0,0 ) node ( o )   corresponding to the internal signal depicted in figure  [ fig : timescale1 ] ( top).,title=\"fig : \" ] ;    foreground ( o.north west)+(0,-0.2 ) node ( a ) @xmath30 ; ( o.north west)+(0,-0.8 ) node ( b ) @xmath101 ; ( o.north west)+(0,-1.2 ) node ( b ) @xmath102 ; ( o.north west)+(0,-1.55 ) node ( b ) @xmath103 ; ( o.north west)+(0,-1.95 ) node ( b ) @xmath85 ; ( o.north east)+(-0.1,-2.7 ) node ( t1 ) @xmath79 ; ( o.north east)+(0,-1.8 ) node ( t1 ) @xmath104 ; ( o.north west)+(0.3,-2.7 ) node ( b ) @xmath86 ; ( o.north west)+(1.9,-2.7 ) node ( b ) @xmath98 ; ( o.north west)+(3.4,-2.7 ) node ( b ) @xmath97 ; ( o.north west)+(5,-2.7 ) node ( b ) @xmath96 ; ( o.north west)+(6.55,-2.7 ) node ( b ) @xmath95 ;    example  [ exp:1 ] shows that in general @xmath105 is indeed a function of @xmath71 when using an event - triggered discretization scheme .",
    "of course , using time - triggered discretization would result in a unique time scale transformation independent from @xmath106 .",
    "furthermore , the signal maps used in example  [ exp:1 ] are deterministic in the sense that every signal @xmath62 generates a one element set or the empty set . however , nondeterministic maps occur for example if @xmath27 is constructed from a cover of @xmath4 with overlaps of more than two sets .",
    "states are internal variables for which the axiom of state holds , i.e. , all relevant information on the past of the system is captured by those variables . in the literature two concepts of the state property exist for behavioral systems .",
    "firstly , the well known version by willems @xcite , where state trajectories @xmath107 and @xmath108 can be concatenated , if they exhibit the same value at the same time ( i.e. , @xmath109 is also a state trajectory ) . and",
    "secondly , a generalized version that allows state trajectories to be also concatenated if they reach the same value at different times ( i.e. , @xmath110 is also a state trajectory ) , as used in the context of state maps by julius and van der schaft in @xcite . to clearly differentiate both notions we call the first one synchronous and the second one asynchronous . using these two state properties , we construct state space @xmath27-dynamical systems such that the discussed state property is preserved by the signal map @xmath27 .",
    "+    [ def : ssdynsysinducesfinitev ] let @xmath28 be a @xmath27-dynamical system , @xmath111 be a set and @xmath112 .",
    "+ then @xmath113 is an * asynchronous state space @xmath27-dynamical system * if @xmath114          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\ ; { { (     \\firsttrue      \\@for\\i:=w_1,x_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s , } } } } , { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,}}}},t_1,t_2\\in{\\ensuremath{t } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_2,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}(w_2 ) , { { (     \\firsttrue      \\@for\\i:=\\gamma_1,\\tau_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}(w_1),k_1,k_2\\in{\\ensuremath{{t_e}}}\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left({\\ensuremath{\\ifthenelse{\\isempty{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{}}}{\\cdot}{}}}}{\\cdot}{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{\\rightarrow}}{\\cdot}{\\rightarrow}}}\\ifthenelse{\\isempty{}}{\\cdot}{}}}}\\right ) } } {     \\begin{propconja }      x_1(t_1)=x_2(t_2)\\\\      k_1={{\\tau_1}}(t_1)\\\\      k_2={{\\tau_2}}(t_2 )     \\end{propconja } } { \\begin{propconja }   { { { (     \\firsttrue      \\@for\\i:=w_1,x_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\wedge^{t_1}_{t_2 } { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } } \\in{\\ensuremath{\\ifthenelse{\\isempty{}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,}}}}\\\\ { { (     \\firsttrue      \\@for\\i:={\\gamma_1\\wedge^{k_1}_{k_2}\\gamma_2},{\\tau_1\\wedge^{t_1}_{t_2}{\\left ( \\tau_2+c \\right)}}\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}({w_1\\wedge^{t_1}_{t_2}w_2 } ) \\end{propconja},}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\ ; { { (     \\firsttrue      \\@for\\i:=w_1,x_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s , } } } } , { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,}}}},t_1,t_2\\in{\\ensuremath{t } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_2,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}(w_2 ) , { { (     \\firsttrue      \\@for\\i:=\\gamma_1,\\tau_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}(w_1),k_1,k_2\\in{\\ensuremath{{t_e}}}\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture}}}}\\ ] ] where @xmath115 .",
    "furthermore , @xmath116 is an * externally synchronous * state space @xmath27-dynamical system if holds for @xmath117 and a * synchronous * state space @xmath27-dynamical system if holds for @xmath118 and @xmath117 .",
    "it is easy to see that every asynchronous state space @xmath27-dynamical system is also an externally synchronous and a synchronous one , because we can always pick @xmath117 and @xmath118 in . with the same argument",
    ", every externally synchronous state space @xmath27-dynamical system is also a synchronous one . for the asynchronous and the synchronous case in definition  [ def : ssdynsysinducesfinitev ] ,",
    "the implication @xmath119 is equivalent to the asynchronous and for @xmath118 to the synchronous state property for the system @xmath120 .",
    "the additional requirement in ensures , that this concatenation property also holds for the external behavior . note that for the externally synchronous case , synchronization is only required on the external time axis .",
    "+ in the remainder of this paper , we refer to a system as introduced in definition  [ def : ssdynsysinducesfinitev ] simply as _ state space @xmath27-dynamical system _ , if the respective adjective ( asynchronous , externally synchronous , synchronous ) is irrelevant . + since",
    "possibly not all states are reachable by a state trajectory in @xmath121 , we define the following reachable subsets of the state space ( comp .",
    "* def.5.37 ) ) .",
    "+    [ def : timeindexedstatespace1 ] let @xmath113 be a state space @xmath27-dynamical system . then @xmath122          \\node [ ] ( e ) at ( 0,0 ) { $ \\exists\\ ; { { (     \\firsttrue      \\@for\\i:=w , x\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s , } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma,\\tau\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}(w),t\\in{{\\tau}^{-1}}(k)\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ x(t)=\\xi$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\exists\\ ; { { (     \\firsttrue      \\@for\\i:=w , x\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s , } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma,\\tau\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}(w),t\\in{{\\tau}^{-1}}(k)\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } }   \\end{small } \\right\\}}\\end{aligned}\\ ] ] are the internal and external time - indexed state spaces @xmath123 and @xmath124 , respectively",
    ".    obviously , the internal and external time - indexed state spaces are equivalent if @xmath125 is a total function .",
    "one system simulates another one , if its external behavior contains the external behavior of the latter , while ensuring that the state trajectories generated by both systems only visit states , at each instant of time , that are associated by a relation . to formalize this property , a special relation , called _",
    "simulation relation _ , is constructed between both state spaces .",
    "+ in the behavioral framework signals are usually right - unbounded . it is well known that a local ( i.e. , on a finite time interval ) evaluation of properties is only possible , if the system is complete @xcite . inspired by ( * ? ? ?",
    "5.21 ) , we therefore define a concatenation based simulation relation for @xmath27-dynamical systems .",
    "in contrast to the locally defined simulation relation used for transition systems ( e.g. , in @xcite ) or general flow systems ( in @xcite ) , it also relates not necessarily complete systems .",
    "+    [ def : simrel ] let @xmath126 and @xmath127 be state space @xmath27-dynamical systems .",
    "+ then a relation @xmath128 is an * asynchronous simulation relation * from @xmath129 to @xmath130 ( written @xmath131 ) , i.e. , @xmath130 asynchronously simulates @xmath129 , if    [ equ : def : simrel ] @xmath132 and    @xmath133          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ }          \\settowidth{\\sfs@width}{$ \\begin{propconja } \\gamma_2={\\gamma'\\wedge^{k_2}_{k_1}\\gamma_1}\\\\ { \\@ifstar{\\ensuremath{\\left(\\forall { \\ensuremath{\\forall \\;\\;.\\;.}}\\;}\\right)}}{t\\in{\\ensuremath{t}}_2 , t",
    "< t_2 } { \\begin{propconja } w_2(t)=w'(t)\\\\ x_2(t)=x'(t)\\\\ \\tau_2(t)=\\tau'(t)\\\\ \\end{propconja } } \\\\",
    "x_2(t_2)=x'(t_2)\\\\ { {          \\settoheight{\\sfs@height}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\settowidth{\\sfs@width}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\exists\\ ; { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2 } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_2,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2(w_2)\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ \\begin{propconja } \\gamma_2={\\gamma'\\wedge^{k_2}_{k_1}\\gamma_1}\\\\ { \\@ifstar{\\ensuremath{\\left(\\forall { \\ensuremath{\\forall \\;\\;.\\;.}}\\;}\\right)}}{t\\in{\\ensuremath{t}}_2 , t < t_2 } { \\begin{propconja } w_2(t)=w'(t)\\\\ x_2(t)=x'(t)\\\\ \\tau_2(t)=\\tau'(t)\\\\ \\end{propconja } }",
    "\\\\ x_2(t_2)=x'(t_2)\\\\ { {          \\settoheight{\\sfs@height}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\settowidth{\\sfs@width}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\exists\\ ; { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2 } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_2,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2(w_2)\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } } $ }          \\settowidth{\\sfs@width}{$ { \\@ifstar{\\ensuremath{\\left({\\ensuremath{\\ifthenelse{\\isempty{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{}}}{\\cdot}{}}}}{\\cdot}{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{\\rightarrow}}{\\cdot}{\\rightarrow}}}\\ifthenelse{\\isempty{}}{\\cdot}{}}}}\\right ) } } { \\begin{propconja } { { (     \\firsttrue      \\@for\\i:=x_1(t_1),x'(t_2)\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}\\\\ k_1={{\\tau_1}}(t_1)\\\\ k_2={{\\tau'}}(t_2 ) \\end{propconja } } { { {          \\settoheight{\\sfs@height}{$ \\begin{propconja } \\gamma_2={\\gamma'\\wedge^{k_2}_{k_1}\\gamma_1}\\\\ { \\@ifstar{\\ensuremath{\\left(\\forall { \\ensuremath{\\forall \\;\\;.\\;.}}\\;}\\right)}}{t\\in{\\ensuremath{t}}_2 , t < t_2 } { \\begin{propconja } w_2(t)=w'(t)\\\\ x_2(t)=x'(t)\\\\ \\tau_2(t)=\\tau'(t)\\\\ \\end{propconja } } \\\\",
    "x_2(t_2)=x'(t_2)\\\\ { {          \\settoheight{\\sfs@height}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\settowidth{\\sfs@width}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ }          \\settowidth{\\sfs@width}{$ \\begin{propconja } \\gamma_2={\\gamma'\\wedge^{k_2}_{k_1}\\gamma_1}\\\\ { \\@ifstar{\\ensuremath{\\left(\\forall { \\ensuremath{\\forall \\;\\;.\\;.}}\\;}\\right)}}{t\\in{\\ensuremath{t}}_2 , t < t_2 } { \\begin{propconja } w_2(t)=w'(t)\\\\ x_2(t)=x'(t)\\\\ \\tau_2(t)=\\tau'(t)\\\\ \\end{propconja } } \\\\",
    "x_2(t_2)=x'(t_2)\\\\ { {          \\settoheight{\\sfs@height}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\settowidth{\\sfs@width}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\exists\\ ; { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2 } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_2,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2(w_2)\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ \\begin{propconja } \\gamma_2={\\gamma'\\wedge^{k_2}_{k_1}\\gamma_1}\\\\ { \\@ifstar{\\ensuremath{\\left(\\forall { \\ensuremath{\\forall \\;\\;.\\;.}}\\;}\\right)}}{t\\in{\\ensuremath{t}}_2 , t < t_2 } { \\begin{propconja } w_2(t)=w'(t)\\\\ x_2(t)=x'(t)\\\\ \\tau_2(t)=\\tau'(t)\\\\",
    "\\end{propconja } } \\\\",
    "x_2(t_2)=x'(t_2)\\\\ { {          \\settoheight{\\sfs@height}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\settowidth{\\sfs@width}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\exists\\ ; { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2 } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_2,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2(w_2)\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } } $ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\ ; { { (     \\firsttrue      \\@for\\i:=w_1,x_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{1}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,1 } } } } , { { (     \\firsttrue      \\@for\\i:=w',x'\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2 } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_1,\\tau_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_1(w_1 ) , { { (     \\firsttrue      \\@for\\i:=\\gamma',\\tau'\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2(w ' ) , t_1\\in{\\ensuremath{t}}_1,t_2\\in{\\ensuremath{t}}_2 , k_1,k_2\\in{\\ensuremath{t}}_e\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left({\\ensuremath{\\ifthenelse{\\isempty{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{}}}{\\cdot}{}}}}{\\cdot}{{\\ensuremath{\\ifthenelse{\\isempty{}}}{\\cdot}{}}\\rightarrow\\ifthenelse{\\isempty{\\rightarrow}}{\\cdot}{\\rightarrow}}}\\ifthenelse{\\isempty{}}{\\cdot}{}}}}\\right ) } } { \\begin{propconja } { { (     \\firsttrue      \\@for\\i:=x_1(t_1),x'(t_2)\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}\\\\ k_1={{\\tau_1}}(t_1)\\\\ k_2={{\\tau'}}(t_2 ) \\end{propconja } } { { {          \\settoheight{\\sfs@height}{$ \\begin{propconja } \\gamma_2={\\gamma'\\wedge^{k_2}_{k_1}\\gamma_1}\\\\ { \\@ifstar{\\ensuremath{\\left(\\forall { \\ensuremath{\\forall \\;\\;.\\;.}}\\;}\\right)}}{t\\in{\\ensuremath{t}}_2 , t < t_2 } { \\begin{propconja } w_2(t)=w'(t)\\\\ x_2(t)=x'(t)\\\\ \\tau_2(t)=\\tau'(t)\\\\ \\end{propconja } } \\\\",
    "x_2(t_2)=x'(t_2)\\\\ { {          \\settoheight{\\sfs@height}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\settowidth{\\sfs@width}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ }          \\settowidth{\\sfs@width}{$ \\begin{propconja } \\gamma_2={\\gamma'\\wedge^{k_2}_{k_1}\\gamma_1}\\\\ { \\@ifstar{\\ensuremath{\\left(\\forall { \\ensuremath{\\forall \\;\\;.\\;.}}\\;}\\right)}}{t\\in{\\ensuremath{t}}_2 , t < t_2 } { \\begin{propconja } w_2(t)=w'(t)\\\\ x_2(t)=x'(t)\\\\ \\tau_2(t)=\\tau'(t)\\\\ \\end{propconja } } \\\\",
    "x_2(t_2)=x'(t_2)\\\\ { {          \\settoheight{\\sfs@height}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\settowidth{\\sfs@width}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\exists\\ ; { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2 } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_2,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2(w_2)\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ \\begin{propconja } \\gamma_2={\\gamma'\\wedge^{k_2}_{k_1}\\gamma_1}\\\\ { \\@ifstar{\\ensuremath{\\left(\\forall { \\ensuremath{\\forall \\;\\;.\\;.}}\\;}\\right)}}{t\\in{\\ensuremath{t}}_2 , t < t_2 } { \\begin{propconja } w_2(t)=w'(t)\\\\ x_2(t)=x'(t)\\\\ \\tau_2(t)=\\tau'(t)\\\\ \\end{propconja } } \\\\",
    "x_2(t_2)=x'(t_2)\\\\ { {          \\settoheight{\\sfs@height}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\settowidth{\\sfs@width}{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ }          \\mbox{\\begin{tikzpicture}[baseline=(current bounding box.center ) ]          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 } { { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}. $ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\exists\\ ; { { (     \\firsttrue      \\@for\\i:=w_2,x_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2 } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_2,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2(w_2)\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } } $ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\ ; { { (     \\firsttrue      \\@for\\i:=w_1,x_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{1}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,1 } } } } , { { (     \\firsttrue      \\@for\\i:=w',x'\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2 } } } } , { { (     \\firsttrue      \\@for\\i:=\\gamma_1,\\tau_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_1(w_1 ) , { { (     \\firsttrue      \\@for\\i:=\\gamma',\\tau'\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2(w ' ) , t_1\\in{\\ensuremath{t}}_1,t_2\\in{\\ensuremath{t}}_2 , k_1,k_2\\in{\\ensuremath{t}}_e\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture}}}}\\ ] ]    it is an * externally synchronous simulation relation * from @xmath129 to @xmath130 ( written @xmath134 ) if    [ equ : def : simrelsync ] @xmath135    and holds for @xmath117 . + furthermore , if @xmath136 , then @xmath137 is a * synchronous simulation relation * from @xmath129 to @xmath130 ( written @xmath138 ) if    [ equ : def : simrelsync:2 ] @xmath139    and holds for @xmath117 and @xmath118 .",
    "the construction of the externally synchronous simulation relation in definition  [ def : simrel ] is inspired by the so called _ synchronized simulation relation _ defined in ( * ? ? ?",
    "* def . 5.38 ) .",
    "however , the latter does not restrict to hold only for @xmath117 .",
    "the intuitive interpretation of the terms asynchronous , synchronous and externally synchronous is strongly related to the ones used in definition  [ def : ssdynsysinducesfinitev ]",
    ". however , in definition  [ def : simrel ] the synchronization takes place between signals of _ different _ systems that are related . + in contrast to definition  [ def : ssdynsysinducesfinitev ] , it is not true that every asynchronous simulation relation is an ( externally ) synchronous one , since does generally not imply and .",
    "intuitively , if @xmath137 is an asynchronous simulation relation , we know that holds for @xmath118 and @xmath117 . however , we can generally not ensure that for every state in @xmath140 reachable at external time @xmath141 and internal time @xmath84 , there exists a related state in @xmath142 that is reachable at the same external and internal time .",
    "we can therefore possibly not relate the whole state space in a synchronous or externally synchronous fashion , implying that @xmath137 may formally not be an ( externally ) synchronous simulation relation .",
    "+ to generate some intuition for the simulation relation constructed in definition  [ def : simrel ] , we will discuss using some graphical illustrations .",
    "for this purpose assume that we have signals @xmath143 and @xmath144 such that the states @xmath145 and @xmath146 , with @xmath147 and @xmath148 , are related . to simulate @xmath129 , the system @xmath130 must be able to continue from time @xmath149 with the same external signal as produced by @xmath129 after @xmath150 .",
    "this is expressed in by requiring the existence of an external signal @xmath151 which is constructed from the concatenation of the signals @xmath152 and @xmath153 , as depicted in figure  [ fig : simrel_gamma ] .",
    "background ( 0,0 ) node ( o )   in .",
    ", title=\"fig : \" ] ;    foreground    ( o.north west)+(0,-0.2 ) node ( a ) @xmath30 ; ( o.north east)+(-0.3,-1.9 ) node ( t1 ) @xmath154 ; ( o.north east)+(-1.4,-1.9 ) node ( t2 ) @xmath153 ; ( o.north east)+(-1.4,-2.5 ) node ( t2 ) @xmath152 ; ( o.north east)+(0,-3.5 ) node ( t2 ) @xmath79 ; ( o.south west)+(2.9,0 ) node ( k2 ) @xmath150 ; ( o.south west)+(4.1,0 ) node ( k2 ) @xmath149 ;    to ensure that @xmath155 is non - anticipating , this concatenation is not allowed to change the past , which is why we require that the past of @xmath156 and @xmath157 match the past of @xmath158 and @xmath159 . moreover",
    ", we have to ensure , that the state trajectories @xmath160 and @xmath108 match at time @xmath161 , expressed by @xmath162 .",
    "+    background ( 0,0 ) node ( o )   and @xmath157 , with @xmath163 , @xmath164 , @xmath165 and @xmath166 .",
    "gray lines connect related states.,title=\"fig : \" ] ;    foreground    ( o.north west)+(0,-0.2 ) node ( a ) @xmath167 ; ( o.north west)+(0,-0.8 ) node ( b ) @xmath168 ; ( o.north west)+(0,-2.5 ) node ( c ) @xmath169 ; ( o.north west)+(0,-3.1 ) node ( d ) @xmath170 ; ( o.north east)+(-0.4,-0.7 ) node @xmath107 ; ( o.north east)+(-0.1,-1.4 ) node ( t1 ) @xmath171 ; ( o.north east)+(-0.1,-2.1 ) node ( k1 ) @xmath1 ; ( o.north east)+(-0.4,-2.9 ) node ( t2 ) @xmath108 ; ( o.north east)+(-0.1,-3.9 ) node ( t2 ) @xmath172 ; ( o.north east)+(-0.1,-4.5 ) node ( k2 ) @xmath1 ;    ( 0.9,1.8 ) node ( xa ) @xmath173 ; ( o.north west)+(0.4,-1.45 ) node ( d ) @xmath174 ; ( o.north west)+(0.4,-2.05 ) node ( d ) @xmath150 ; ( 1,0.8 ) node ( xa ) @xmath175 ; ( 1.3,0.2 ) node ( xa ) @xmath176 ; ( o.south west)+(0.4,0.6 ) node ( k2 ) @xmath161 ; ( o.south west)+(0.4,-0.1 ) node ( k2 ) @xmath149 ; ( o.south west)+(2.7,0.6 ) node ( k2 ) @xmath177 ; ( o.south west)+(3.1,-0.1 ) node ( k2 ) @xmath178 ; ( o.south west)+(2.3,1.2 ) node ( k2 ) @xmath179 ;    background ( 0,0 ) node ( o )   and @xmath157 , with @xmath180 and @xmath181 .",
    "gray lines connect related states.,title=\"fig : \" ] ;    foreground    ( o.north west)+(0,-0.2 ) node ( a ) @xmath167 ; ( o.north west)+(0,-0.8 ) node ( b ) @xmath168 ; ( o.north west)+(0,-2.5 ) node ( c ) @xmath169 ; ( o.north west)+(0,-3.1 ) node ( d ) @xmath170 ; ( o.north east)+(-0.4,-0.7 ) node @xmath107 ; ( o.north east)+(-0.1,-1.4 ) node ( t1 ) @xmath171 ; ( o.north east)+(-0.1,-2.1 ) node ( k1 ) @xmath1 ; ( o.north east)+(-0.4,-2.9 ) node ( t2 ) @xmath108 ; ( o.north east)+(-0.1,-3.9 ) node ( t2 ) @xmath172 ; ( o.north east)+(-0.1,-4.5 ) node ( k2 ) @xmath1 ;    ( 0.9,1.8 ) node ( xa ) @xmath173 ; ( o.north west)+(2.5,-1.4 ) node ( d ) @xmath182 ; ( o.north west)+(0.4,-1.45 ) node ( d ) @xmath174 ; ( o.north west)+(0.4,-2.05 ) node ( d ) @xmath150 ; ( 1,0.8 ) node ( xa ) @xmath175 ; ( 1.3,0.2 ) node ( xa ) @xmath176 ; ( o.south west)+(1.3,0.6 ) node ( k2 ) @xmath183 ; ( o.south west)+(0.4,0.6 ) node ( k2 ) @xmath161 ; ( o.south west)+(0.4,-0.1 ) node ( k2 ) @xmath149 ; ( o.south west)+(2.7,0.6 ) node ( k2 ) @xmath177 ; ( o.south west)+(3.1,-0.1 ) node ( k2 ) @xmath178 ; ( o.south west)+(2.3,1.2 ) node ( k2 ) @xmath179 ;    background ( 0,0 ) node ( o ) .,title=\"fig : \" ] ;    foreground    ( o.north west)+(0,-0.2 ) node ( a ) @xmath167 ; ( o.north west)+(0,-1 ) node ( b ) @xmath168 ; ( o.north west)+(0,-2 ) node ( c ) @xmath169 ; ( o.north west)+(0,-2.7 ) node ( d ) @xmath170 ; ( o.north east)+(-0.6,-1 ) node ( t1 ) @xmath107 ; ( o.north east)+(-0.1,-1.6 ) node ( t1 ) @xmath7 ; ( o.north east)+(-0.6,-2.6 ) node ( t2 ) @xmath108 ; ( o.north east)+(-0.1,-3.4 ) node ( t2 ) @xmath7 ; ( o.south west)+(0.4,1.7 ) node ( k2 ) @xmath174 ; ( o.south west)+(0.4,0 ) node ( k2 ) @xmath161 ;    the last line of basically says that the state trajectories @xmath107 and @xmath108 need to stay related for all future external time instants .",
    "however , the nature of @xmath42 significantly influences how restrictive this requirement is .",
    "for example , having a point to point time scale transformation in both systems only requires state trajectories to be related at sampling points ( figure  [ fig : r - simulation_hscc ] ) , while a set to point time scale transformation , for example , requires state trajectories to be related at all future times ( figure  [ fig : p - simulation_hscc ] ) .",
    "however , as clearly visible in figure  [ fig : r - simulation_hscc ] and [ fig : p - simulation_hscc ] , both cases allow for a stretching or shrinking of time between related state trajectories . if both systems have an identity time scale transformation ( and therefore @xmath184 ) this stretching or shrinking of time is no longer allowed , as shown in figure  [ fig : t - simulation_hscc ] .",
    "note that the latter case only implies that the constructed asynchronous simulation relation is also a synchronous one , if we additionally require @xmath117 , which immediately implies @xmath118 .",
    "+    [ rem : gfs ] the intuitive interpretation of the different simulation relations depicted in figure  [ fig : r - simulation_hscc ]  -  [ fig : t - simulation_hscc ] is very similar to the idea behind the @xmath185- , @xmath186- and @xmath84-simulation relations constructed in @xcite for general flow systems .",
    "this suggests that for the subclass of discrete and continuous systems , our simulation relation can reproduce the relations in @xcite by choosing different time scale transformations .",
    "however , our relation extends the constructions in @xcite by allowing to include the simulation of external trajectories . furthermore",
    ", relating two systems with different time scale transformations gives an even richer variety of relations .",
    "[ rem : ts ] recall that @xmath27-dynamical systems capture the dynamics of transition systems and linear time - invariant continuous systems ( see remark  [ rem:0 ] ) , if @xmath184 . relating two systems",
    "implies a state trajectory matching requirement as depicted in figure  [ fig : t - simulation_hscc ] .",
    "additionally , the external signal @xmath41 , which , in the case of transition systems is the output @xmath187 , and , in the case of linear time - invariant continuous systems is the pair @xmath188 , needs to satisfy the requirement depicted in figure  [ fig : simrel_gamma ] . observe that for complete systems this interpretation coincides with the locally defined simulation relation for transition systems , e.g. , in @xcite .",
    "the same is true for the simulation relation constructed for linear time invariant systems in @xcite .",
    "this suggests that both notions of simulation relations can be captured by our notion .    using the simulation relations constructed in definition  [ def : simrel ]",
    ", we can define similarity and bisimilarity for the class of state space @xmath27-dynamical systems in the usual fashion .",
    "+    [ def : bisimrel_behaviour ] @xmath129 is * asynchronously simulated * by @xmath130 , denoted by @xmath189 , if there exists an asynchronous simulation relation from @xmath190 to @xmath191 .",
    "@xmath129 and @xmath130 are * asynchronously bisimilar * , denoted by @xmath192 , if there exists a relation @xmath128 s.t.@xmath193 and @xmath194 are asynchronous simulation relations from @xmath190 to @xmath191 and from @xmath191 to @xmath190 , respectively .",
    "+ @xmath129 is * externally synchronously simulated * by @xmath130 , denoted by @xmath195 , if there exists an externally synchronous simulation relation from @xmath190 to @xmath191 .",
    "@xmath129 and @xmath130 are * externally synchronously bisimilar * , denoted by @xmath196 , if there exists a relation @xmath128 s.t.@xmath193 and @xmath197 are externally synchronous simulation relations from @xmath190 to @xmath191 and from @xmath191 to @xmath190 , respectively .",
    "+ @xmath129 is * synchronously simulated * by @xmath130 , denoted by @xmath198 , if there exists a synchronous simulation relation from @xmath190 to @xmath191 .",
    "@xmath129 and @xmath130 are * synchronously bisimilar * , denoted by @xmath199 , if there exists a relation @xmath128 s.t.@xmath193 and @xmath197 are synchronous simulation relations from @xmath190 to @xmath191 and from @xmath191 to @xmath190 , respectively .",
    "before proving the soundness of our construction we introduce another simulation relation to discuss the connection between behavioral equivalence and bisimilarity of two systems .",
    "+    [ def : initsimrel ] let @xmath126 and @xmath127 be state space @xmath27-dynamical systems and let @xmath200 .",
    "+ then @xmath128 is an * @xmath0-initial simulation relation * from @xmath129 to @xmath130 ( written @xmath201 ) if    [ equ : def : initsimrel ] @xmath202    and holds .    for this simulation relation , @xmath0-initially similar and bisimilar systems",
    "are defined analogously to definition  [ def : bisimrel_behaviour ] and are denoted by @xmath203 and @xmath204 , respectively .",
    "+ observe that in definition  [ def : initsimrel ] , the statement in still needs to hold for arbitrary @xmath205 and @xmath206 ( as for the asynchronous simulation relation ) .",
    "however , we require in that states @xmath168 reached at external time @xmath207 are related to states @xmath170 also reachable at external time @xmath207 . observe that this does in general not imply that holds . due to the iterative nature of , intuitively , relating states reached at external time @xmath207 leads to a relation between all states reachable for external time @xmath208 ( explaining the name for this relation ) .",
    "in particular , if the external time axis has a minimal element @xmath209 ( e.g. , @xmath51 or @xmath58 with @xmath210 ) , a @xmath209-initial simulation relation will imply that all reachable states are related in an externally synchronized fashion .",
    "the following lemma formalizes this intuition by proving various connections between the different relation types .",
    "+    [ lem : linitsimimpliesothersims ] let @xmath126 and @xmath127 be state - space @xmath27-dynamical systems s.t.@xmath79 has the minimal element @xmath209 .",
    "then    @xmath211 ,    @xmath212 , and    @xmath213    pick @xmath214 and observe the following facts :    [ item : proof : lem : linitsimimpliesothersims:1 ] holds for @xmath137 : + as holds for @xmath137 ( using definition  [ def : timeindexedstatespace1 ] ) we can fix @xmath215 and @xmath216 s.t .",
    "@xmath217 . since @xmath201",
    ", implies that there exist @xmath218 s.t .",
    "using definition  [ def : timeindexedstatespace1 ] and the fact that @xmath209 is the minimal element of @xmath79 , this implies that holds .",
    "[ item : proof : lem : linitsimimpliesothersims:2 ] implies since @xmath220 for @xmath221 from definition  [ def : timeindexedstatespace1 ] .",
    "[ item : proof : lem : linitsimimpliesothersims:3 ] let @xmath221 . if @xmath222 and @xmath223 then @xmath224 from definition  [ def : timeindexedstatespace1 ] implies  .",
    "[ item : proof : lem : linitsimimpliesothersims:4 ] if holds , it also holds for @xmath117 and @xmath118",
    ".    now    follows from and ,    follows from and , and    follows from , and .",
    "the inverse implication in ( i ) does not hold , as @xmath134 does not imply that holds for arbitrary @xmath225 .",
    "recall from remark  [ rem:0 ] that @xmath27-dynamical systems can represent transition systems using an external time axis @xmath51 ( with minimal element @xmath210 ) . for this system class ,",
    "simulation relations are usually defined by requiring that the initial states are related and a local property , similar to , holds ( see , e.g. , @xcite ) .",
    "this suggests , that simulation relations defined for transition systems are @xmath86-initial simulation relations in our sense .    as the main result of this section",
    "we generalize the results in ( * ? ? ?",
    "* thm . 5.41 )",
    "to state space @xmath27-dynamical systems with external time axis having the minimal element @xmath209 and show that the existence of a @xmath209-initial simulation relation from one system to another one implies that the behavior of the first is a subset of the second one . as an immediate consequence ,",
    "behavioral equivalence is obtained if two systems are @xmath209-initially bisimilar .",
    "+    [ thm : bisimimplextbehinclusion ] let @xmath126 and @xmath127 be state - space @xmath27-dynamical systems s.t.@xmath79 has the minimal element @xmath209 .",
    "then    @xmath226    @xmath227    using , the statement @xmath228 is equivalent to @xmath229          \\node [ ] ( e ) at ( 0,0 ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right ) } } { { { (     \\firsttrue      \\@for\\i:={\\ensuremath{x}}_1,{\\ensuremath{w}}_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{1}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,1}}}},\\tau_1\\in { \\mathcal{t}}_1 } { { { (     \\firsttrue      \\@for\\i:=\\gamma,\\tau_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_1({\\ensuremath{w}}_1)}\\;\\rightarrow\\;$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right ) } } { { { (     \\firsttrue      \\@for\\i:={\\ensuremath{x}}_2,{\\ensuremath{w}}_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{2}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,2}}}},\\tau_2\\in { \\mathcal{t}}_2 } { { { (     \\firsttrue      \\@for\\i:=\\gamma,\\tau_2\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_2({\\ensuremath{w}}_2 ) } ,   $ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{${\\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right ) } } { { { (     \\firsttrue      \\@for\\i:={\\ensuremath{x}}_1,{\\ensuremath{w}}_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\ifthenelse{\\isempty{1}}{{\\ensuremath{\\mathcal{b}}}_{s}}{{\\ensuremath{\\mathcal{b}}}_{s,1}}}},\\tau_1\\in { \\mathcal{t}}_1 } { { { (     \\firsttrue      \\@for\\i:=\\gamma,\\tau_1\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\phi}_1({\\ensuremath{w}}_1)}\\;\\rightarrow\\;$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture}}}}}\\ ] ] where @xmath230 is the set of valid time scale transformations from @xmath231 to @xmath79 . fix @xmath232 s.t.@xmath233 .",
    "since @xmath234 , holds for @xmath235 .",
    "therefore , we can pick @xmath236 s.t .",
    "@xmath237 . using for @xmath238 this implies that @xmath239 , which proves statement ( i ) . part ( ii ) follows immediately from ( i ) and definition  [ def : bisimrel_behaviour ] .",
    "does not extend to the asynchronous simulation case , since here we can not ensure finding pairs @xmath107 and @xmath160 s.t .",
    "their initial states are related .",
    "as the main result of this paper we show that the simulation relations in definition  [ def : simrel ] are well defined by proving that they are preorders for their respective class of state space @xmath27-dynamical systems .",
    "+    [ thm : simaspreorder ] the relations @xmath240 , @xmath241 , @xmath242 and @xmath243 are preorders for the class of * asynchronous * state space @xmath27-dynamical systems .    to simplify notation , we denote the conjunction on the right hand side of by @xmath244 , i.e. @xmath245          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_c , t_a'\\in{{\\tau_a}^{-1}}(k - k_c+k_a),t_a'>t_a\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_c'\\in{{\\tau_c}^{-1}}(k),t_c'>t_c } { { { (     \\firsttrue      \\@for\\i:=x_a(t_a'),x_c(t_c')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_c , t_a'\\in{{\\tau_a}^{-1}}(k - k_c+k_a),t_a'>t_a\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture } } } } \\end{propconja}.\\ ] ] a relation is a preorder , if it is reflexive and transitive . + * 1 .",
    "reflexivity : * + to prove reflexivity , pick an arbitrary @xmath113 , construct @xmath246 s.t .",
    "@xmath247 and show that , , and hold :    , , and hold by construction .",
    "remember from fact ( d ) in the proof of that if holds , it also holds for @xmath117 and @xmath118 .    to show that holds , fix @xmath248 s.t .",
    "the left side of is true , pick @xmath249 , @xmath250 , @xmath251 , @xmath252 s.t . @xmath253 and show that the right side of is true .",
    "+    observe that the first three lines of @xmath254 follow directly from and from the construction of @xmath137 implying @xmath255 .",
    "+    now using definition  [ def : ssdynsysinducesfinitev ] we can conclude that @xmath256 and @xmath257 since @xmath258 and @xmath259 .",
    "+    to show that the last line of @xmath254 is true , observe that implies @xmath260 . from the construction of @xmath137",
    "this implies @xmath261 .",
    "* 2 . transitivity * + to prove transitivity , pick arbitrary as their unique representative . ] @xmath262 s.t .",
    "this implies that there exist simulation relations @xmath264 and @xmath265 from @xmath129 to @xmath130 and @xmath130 to @xmath266 , respectively .",
    "now construct @xmath267 s.t .",
    "@xmath268 and show that , , and hold for @xmath267 , implying @xmath269 .",
    "observe that , , and hold for @xmath264 and @xmath265 , implying    @xmath270    respectively .",
    "using the construction of @xmath267 this implies that , , and hold for @xmath267 .",
    "remember from fact ( d ) in the proof of that if holds , it also holds for @xmath117 and @xmath118 .    to show , fix @xmath271 s.t .",
    "@xmath272 . +    from the construction of @xmath267 we know that there exists some @xmath273 , @xmath274,@xmath275 , @xmath148 s.t . @xmath276 and",
    "+    this implies that we can fix some @xmath278 , @xmath279 s.t .",
    "@xmath280 holds and therefore @xmath281 and @xmath282 .",
    "+    this implies that we can fix some @xmath283 , @xmath284 s.t .",
    "@xmath285 holds .    with this choice of signals , we show that @xmath286 also holds : +    observe , that the second and third line of @xmath286 are equivalent to the second and third line of @xmath285 , respectively .",
    "+    using the first line of @xmath280 and @xmath287 we get @xmath288 implying that the first line of @xmath286 holds . +    finally , to show that the last line of @xmath286 holds , observe that it is equivalent to @xmath289          \\node [ ] ( e ) at ( 0,0 ) { $ \\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } ;          \\node[inner sep=0pt ] ( f ) at ( $ ( e.south west)+(1ex,-1ex)+(3ex+.5\\sfs@width,-\\sfs@height)$ ) { $ { \\@ifstar{\\ensuremath{\\left(\\exists { \\ensuremath{\\exists \\;\\;.\\;.}}\\;}\\right)}}{t_2'\\in{{\\tau_2}^{-1}}(k),t_2'>t_2 , t_3'\\in{{\\tau_3}^{-1}}(k),t_3'>t_3 } { \\begin{propconja } { { (     \\firsttrue      \\@for\\i:=x_1(t_1'),x_2(t_2')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}_{1,2}\\\\ { { (     \\firsttrue      \\@for\\i:=x_2(t_2'),x_3(t_3')\\do {     \\iffirst\\listop{\\i}\\firstfalse\\else,\\listop{\\i}\\fi     }     )     \\let\\listop\\relax } } \\in{\\ensuremath{\\mathcal{r}}}_{2,3 } \\end{propconja}.}$ } ;          \\node [ ] ( e ) at ( 0,0 ) { \\phantom{$\\forall\\;k\\geq k_2,t_1'\\in{{\\tau_1}^{-1}}(k - k_2+k_1),t_1'>t_1\\;.$ } } ;          \\draw[fill ] ( $ ( e.east)+(1ex,0ex)$ ) circle ( .2ex ) ;          \\draw[- ] ( $ ( e.east)+(1ex,0ex)$ ) -- ( $ ( e.south east)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-0.5ex)$ ) -- ( $ ( e.south west)+(1ex,-1ex)-(0,\\sfs@height)$ ) -- ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) ;          \\draw[fill ] ( $ ( e.south west)+(2.5ex,-1ex)-(0,\\sfs@height)$ ) circle ( .2ex ) ;          \\end{tikzpicture}}}}\\ ] ] to show that holds , fix @xmath290 and pick @xmath291 . +    with this choice it follows immediately from the last line of @xmath285 that @xmath292 .",
    "+    if we now pick @xmath293 , we have @xmath294 , since @xmath295 .",
    "+    now it follows from @xmath296 that @xmath297 and from @xmath298 that @xmath299 .",
    "+    using the last line of @xmath280 this implies that @xmath300    .",
    "[ thm : simaspreorder : wsync ] the relations @xmath241 and @xmath242 are preorders for the class of * externally synchronous * state space @xmath27-dynamical systems .",
    "this proof is identical to the proof of by using @xmath117 in all statements .",
    "this substitution is applicable since is also restricted to @xmath117 for @xmath241 and @xmath242 .",
    "[ thm : simaspreorder : sync ] the relation @xmath242 is a preorder for the class of * synchronous * state space @xmath27-dynamical systems .",
    "this proof is identical to the proof in by using @xmath117 and @xmath118 in all statements .",
    "this substitution is applicable since is also restricted to @xmath117 and @xmath118 for @xmath242 .",
    "[ thm : bisimasequivalencerelation ] the relations @xmath301 , @xmath302 , @xmath303 and @xmath304 are equivalence relations for the class of * asynchronous * state space @xmath27-dynamical systems .",
    "furthermore , the relations @xmath302 and @xmath303 are equivalence relations for the class of * externally synchronous * state space @xmath27-dynamical systems , and the relation @xmath303 is an equivalence relation for the class of * synchronous * state space @xmath27-dynamical systems .",
    "a relation is an equivalence relation , if it is reflexive , transitive and symmetric . from definition  [ def : bisimrel_behaviour ]",
    ", it follows that all relations @xmath305 are defined by two simulation relations",
    ". therefore reflexivity and transitivity follows from  -  [ thm : simaspreorder : sync ] .    to prove symmetry , pick arbitrary @xmath306 and show @xmath307 .",
    "observe that it follows immediately from definition  [ def : bisimrel_behaviour ] that for any bisimulation relation @xmath137 between @xmath129 and @xmath130 we can pick @xmath308 as a bisimulation relation between @xmath130 and @xmath129 , implying @xmath309 .",
    "we have proposed a behavioral system model with distinct external and internal signals possibly evolving on different time scales . for this new system model different notions of simulation and bisimulation",
    "were derived and their soundness was proven . in remarks",
    "[ rem:0 ] ,  [ rem : gfs ] and [ rem : ts ] , we discussed in an intuitive manner that our notion can capture a broad selection of similarity concepts available in the literature .",
    "the formal proofs of these intuitive connections will be presented in a subsequent paper .",
    "it is our goal for the near future to use the presented framework to compare existing abstraction techniques in the control systems community .",
    "j.  davoren , v.  coulthard , n.  markey , and t.  moor .",
    "non - deterministic temporal logics for general flow systems . in r.",
    "alur and g.  pappas , editors , _ hybrid systems : computation and control _ , volume 2993 of _ lecture notes in computer science _ ,",
    "pages 280295 .",
    "springer berlin heidelberg , 2004 .",
    "j.  davoren and t.  moor .",
    "non - deterministic reactive systems , from hybrid systems and behavioural systems perspectives . in _ proc .",
    "2nd ifac conference on analysis and design of hybrid systems ( adhs06 ) , ifac _ , pages 409416 , 2006 ."
  ],
  "abstract_text": [
    "<S> this paper introduces a new behavioral system model with distinct external and internal signals possibly evolving on different time scales . </S>",
    "<S> this allows to capture abstraction processes or signal aggregation in the context of control and verification of large scale systems . for this new system model different notions of simulation and bisimulation </S>",
    "<S> are derived , ensuring that they are , respectively , preorders and equivalence relations for the system class under consideration . </S>",
    "<S> + these relations can capture a wide selection of similarity notions available in the literature . </S>",
    "<S> this paper therefore provides a suitable framework for their comparison . </S>"
  ]
}