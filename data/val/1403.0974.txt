{
  "article_text": [
    "voting and assignment are two of the most widely applied and important settings in social choice theory . in both settings , although one could also use _ discrete _ or _",
    "rules , randomization is crucial to achieve minimal fairness requirements such as anonymity and neutrality . in voting ,",
    "_ agents _ express preferences over _ alternatives _ and a _ social decision scheme _ returns a probability distribution over the alternatives based on the agents preferences  @xcite . in the assignment",
    "setting , _",
    "agents _ express preferences over _ objects _ and a _ random assignment rule _ returns a random assignment of the objects specifying the probability with which each object is allocated to each agent  @xcite .",
    "the objects are referred to as _ houses _ in the literature and the assignment setting is also known as _ house allocation_. for the two settings , @xmath0is a desirable social decision scheme  @xcite and random assignment rule  @xcite , respectively .    in the voting setting , _ random serial dictatorship _ ( @xmath0 ) takes a permutation of agents uniformly at random and then selects an alternative by serially allowing agents in the permutation to refine the set of feasible alternatives . in the assignment",
    "setting , @xmath0takes a permutation uniformly at random and then lets the agents in the permutation serially take their most preferred house that has not yet been allocated .    for both the settings mentioned above , @xmath0is a well - known rule that is anonymous , strategyproof , and ex post efficient ( randomizes over pareto optimal alternatives ) . in fact ,",
    "it has been conjectured to be the only rule that satisfies these properties  ( see e.g. , * ? ? ?",
    "* ; * ? ? ?",
    "@xmath0is well - established and commonly used especially in resource allocation . in particular , the resulting probabilities of @xmath0can be viewed as fractional allocations in scheduling and other applications ( in which the houses are in fact divisible ) and hence important to compute  ( see e.g. , * ? ? ?",
    "* ; * ? ? ?",
    "* ; * ? ? ?",
    "* ; * ? ? ?",
    "similarly , in voting , the probabilities returned by the @xmath0rule can be interpreted as fractions of time or resource allotted to the alternatives and hence crucial to compute .",
    "the probability of each alternative can also be used as a suggestion for the proportional representation of the alternative in representative democracy or seat allocation of a parliament  @xcite .",
    "the definition of @xmath0for both the settings suggests natural exponential - time algorithms to compute the @xmath0probabilities : enumerate all the permutations and for each permutation , perform a linear number of operations",
    ". however these algorithms are naive and the question arises whether there are more efficient algorithms to compute the @xmath0probabilities .",
    "recently , @xcite showed that the resulting probabilities of @xmath0are # p - complete to compute both in the voting and the assignment settings .",
    "independently , @xcite also showed the same result for the assignment problem . in view of the inherent complexity of computing the @xmath0probabilities , @xcite mentioned that identifying the conditions under which the problem is polynomial time as an open problem . @xcite",
    "propose random hybrid assignment mechanisms that hinge on the @xmath1 probabilities .",
    "they termed the problem of computing @xmath0probabilities in the assignment domain as a `` very difficult research problem . ''    in view of the importance of @xmath0 in both voting and resource allocation and the recent negative computational results , we undertake an algorithmic study of @xmath0 .",
    "we show that @xmath0is amenable to efficient computation provided certain structural parameters are small .",
    "more precisely , we undertake a _",
    "parametrized _ complexity analysis of @xmath0for both voting and assignment .",
    "[ [ standard - vs .- parametrized - complexity ] ] standard vs. parametrized complexity + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in _ standard computational complexity theory _",
    ", only the size of the problem instance is considered as a measure of the problem s complexity .",
    "an algorithm is deemed to be efficient if its running time is bounded by a polynomial function of the size of the instance ; in other words , for every instance @xmath2 of the problem , the running time of the algorithm is bounded by @xmath3 where @xmath4 is a fixed polynomial independent of the instance and @xmath5 is the size of the instance .",
    "unfortunately , not every problem is known to admit an efficient algorithm .",
    "indeed , researchers have identified certain classes of problems that are thought not to admit efficient algorithms .",
    "for example , the fact that @xmath1 is # p - complete @xcite strongly suggests that there is no efficient algorithm for computing the @xmath1 probabilities .    in _ parametrized complexity theory _",
    ", a finer multivariate analysis is undertaken by considering multiple _ parameters _ of the problem instance  @xcite .",
    "intuively , a parameter is some aspect of the problem input .",
    "for example , for computational problems on graphs , the maximum degree of the graph is a natural parameter .",
    "let @xmath6 be a parameter of an instance @xmath2 .",
    "a problem with parameter @xmath6 belongs to the class fpt , or is said to be _ fixed - parameter tractable _ , if there exists an algorithm that solves the problem in @xmath7 time , where  @xmath8 is some computable function and @xmath4 is a polynomial both independent of @xmath2 .",
    "the key idea behind fpt is to separate out the complexity into two components  a component @xmath3 that depends solely on the size of the input , and a component @xmath9 that depends on the parameter .",
    "an fpt algorithm with parameter @xmath6 can solve instances in which the input size of the instance is large as long as @xmath6 is small and hence the growth of @xmath9 is relatively small .",
    "of course if @xmath6 is not small and @xmath9 is , say , exponential in @xmath6 , then the running time of the fpt algorithm can become too slow for practical purposes .",
    "nevertheless , designing fpt algorithms with different parameters is important as they expand tractability frontier for problems that are otherwise intractable in general .",
    "[ [ contributions ] ] contributions + + + + + + + + + + + + +    we propose algorithms to compute the @xmath0probabilities that under reasonable assumptions are significantly more efficient than the naive method of going over @xmath10 permutations of the agents . to be precise , we present fpt algorithms with parameters such as # agent types , # alternatives , # alternative types and # houses .",
    "many of our algorithms exploit different dynamic programming formulations where the recursion is based on new insights into @xmath0applied to voting and assignment . in this sense , our work not only yields more efficient algorithms for computing an @xmath0lottery , but also furthers our understanding of a keystone algorithm in social choice theory .",
    "we first define the voting setting and @xmath0formally . we follow the notation used in @xcite . a voting setting consists of a set @xmath11 of _ agents _ having preferences over a finite set @xmath12 of _ alternatives _ where @xmath13 .",
    "the preferences of agents over alternatives are represented by a preference profile @xmath14 where each agent @xmath15 has complete and transitive preferences @xmath16 over @xmath12 . by @xmath17 ,",
    "also denoted by @xmath18 , we mean that alternative @xmath19 is at least as preferred by agent @xmath20 as alternative @xmath21 .",
    "we denote with @xmath22 the strict part of  @xmath16 ( @xmath23 if  @xmath18 but not  @xmath24 ) , and with  @xmath25 the symmetric part of  @xmath16 ( @xmath26 if  @xmath27 and  @xmath24 ) . a preference relation @xmath16 is _ linear _ if @xmath23 or  @xmath28 for all distinct alternatives @xmath29 .",
    "the size of an instance of a voting setting will be denoted by @xmath30 which is equal to @xmath31 .",
    "we let @xmath32 denote the set of all permutations of @xmath33 and write a permutation @xmath34 as @xmath35 .",
    "if @xmath36 is a preference relation and @xmath37 a subset of alternatives , then @xmath38 is the set of most preferred alternatives from @xmath39 according to @xmath36 .",
    "let @xmath40 be the @xmath20-th agent in permutation @xmath41 .",
    "then , @xmath42 where @xmath43 and @xmath44 is the uniform lottery over the multi - set @xmath39 . in the literature",
    ", @xmath45 is simply referred to as _ serial dictatorship _ with respect to ordering @xmath46 .",
    "we illustrate how @xmath0works with the aid of a simple example .",
    "consider the following preference profile .",
    "@xmath47    then let us consider the prio outcomes for each permutation over the voters .    @xmath48    thus the @xmath0lottery is @xmath49 $ ] .",
    "if each agent has a unique most preferred alternative , the @xmath1 lottery can be computed in linear time : the @xmath0probability of an alternative is the fraction of agents who express it as most preferred .",
    "however , the problem of computing @xmath0probabilities become # p - complete when agents do not express strict preferences . as seen by the formal definition as well as the example above , @xmath0probabilities can be computed by enumerating all the @xmath10 permutations over agents .",
    "we present alternative algorithms to compute the @xmath0probabilities that are significantly faster provided certain structural parameters are small .",
    "two agents are said to be of the same _ type _ if they have identical preferences .",
    "two alternatives are of the same _ type _ if every agent is indifferent between them .",
    "the following lemma shows that without loss of generality we can focus on instance where no two alternatives have the same type .",
    "[ lemma : alternative - types ] there is a linear - time reduction from general instances of rsd to simplified instances of rsd where no two alternatives have the same type .    given an instance @xmath50 , we construct an equivalent _ simplified _ instance @xmath51 by contracting all alternatives of the same type into a ` super ' alternative .",
    "given an @xmath0lottery for @xmath52 we can construct a lottery for @xmath53 by uniformly dividing the @xmath0probability of the ` super ' alternative among the alternatives in @xmath12 that induced it .",
    "unless otherwise stated , from now on , we assume that we are dealing with _ simplified _",
    "instances where no two alternatives have the same type .",
    "let @xmath54 be a fixed but arbitrary alternative .",
    "for each @xmath15 , we define the signature of @xmath20 ( with respect to @xmath19 ) to be @xmath55 where @xmath56 is the subset of alternatives that are as good as @xmath19 , and @xmath57 is the subset of alternatives that are strictly better than @xmath19 ; more formally , @xmath58 and @xmath59 . notice that even if two agents have different types , they can still have the same signature .",
    "on the other hand , if two agents have the same type , they must have the same signature .",
    "for notational convenience we enumerate all the signatures and denote the set of signatures with @xmath60 .",
    "let the @xmath20th signature be defined by the pair @xmath61 and let @xmath62 be the number of agents having this signature .",
    "for a subset @xmath63 of signatures we use @xmath64 to denote @xmath65 .",
    "since we are dealing with a simplified instance , at least one agent is not indifferent between a given pair of alternatives and hence each prio outcome results in a singleton set .",
    "hence , it follows that @xmath66 . in this way , running the serial dictatorship on any permutation of the agents either does not select @xmath19 or selects exactly @xmath19 .",
    "we show an fpt algorithm for computing @xmath67 where the parameter is the number of signatures @xmath68 .",
    "[ thm : fpt ] in the voting setting , for each alternative @xmath54 there is an algorithm for computing @xmath67 that runs in @xmath69 time .    for each @xmath70",
    "we define a residual problem where the set of alternatives is @xmath71 , where there are no agents with a signature in @xmath72 , and where we still have @xmath73 agents with signature @xmath20 for each @xmath74 . for @xmath75",
    "the residual problem is the same as the original problem . in the residual problem defined by @xmath76",
    "we say a permutation of its agents is _ lucky _ if running the serial dictatorship with this permutation selects alternative @xmath19 .",
    "our algorithm is based on a dynamic programming formulation for counting the number of lucky permutations : @xmath77 =   \\text{\\ # lucky permutations in the residual problem defined by $ x$. } \\ ] ] notice that @xmath78/ n!$ ] , so if we can compute @xmath79 , we are done . in the rest of the proof , we derive a recurrence to do just that .    for each @xmath70",
    "we define the set of _ admissible signatures _ to be @xmath80 and @xmath81 the key observation is that every lucky permutation in the residual problem defined by @xmath76 must start with an agent having an admissible signature .    to compute the value of the dp ( dynamic program ) states , we use the following recurrence .    @xmath82 =            \\begin{cases }              t(x ) ! & \\text{if } \\phi(x ) = x \\\\              0 & \\text{if }",
    "\\phi(x ) = \\emptyset \\\\",
    "\\displaystyle \\sum_{i \\in \\phi(x ) } t_i ! { t(x ) -1 \\choose t_i - 1 } m[x \\setminus { \\left\\ { i \\right\\ } } ] & \\text{otherwise }          \\end{cases}\\ ] ]    let us briefly justify each case of the recurrence .",
    "first , consider the case @xmath83 , which means that in the residual problem defined by @xmath76 every agent has @xmath19 in its top equivalence class . if that is the case , then every permutation of the agents is lucky .",
    "since there are @xmath64 agents in the residual problem , it follows that there are @xmath84 lucky permutations .",
    "second , consider the case @xmath85 , which means that in the residual problem defined by @xmath76 , not a single agent has @xmath19 in its top equivalence class . if that is the case , then there are no lucky permutations",
    ".    finally , consider the case @xmath86 .",
    "recall that every lucky permutation must begin with an agent with a signature @xmath87 .",
    "notice that after such an agent is chosen the set of possible alternatives is reduced to @xmath88 .",
    "also , the remaining agents @xmath89 agents with signature @xmath20 do not further constrain the set of alternatives . therefore , if we take a lucky permutation in the residual problem defined by @xmath76 and we strip from it all agents with signature @xmath20 , we are left with a lucky permutation for the residual problem defined by @xmath90 . similarly , if we take a lucky permutation for the residual problem defined by @xmath91 and we prepend one agent with signature @xmath20 and insert the remaining @xmath92 agents with signature @xmath20 any way we want , we have a lucky permutation for the residual problem defined by @xmath76 . notice that for each lucky permutation for @xmath90 there are @xmath93 ways of choosing the positions for the agents with signature @xmath20 and for each one of those there are @xmath94 ways of distributing the individual agents .",
    "if follows that there are @xmath95 $ ] lucky permutations for the residual problems defined by @xmath76 .",
    "computing the signatures @xmath96 and their frequencies @xmath97 takes @xmath98 time , where @xmath99 is the total length of the agent preferences . computing the admissible signature function @xmath100",
    "can be done in @xmath101 time , where @xmath102 is the number of alternatives .",
    "the size of the dp table is @xmath103 , and given all the previous information , computing each entry of the table takes @xmath104 time .",
    "hence , the total time to compute @xmath67 is @xmath105 .",
    "[ cor : numberofagents ] there is an fpt algorithm for computing @xmath67 with parameter @xmath106 .",
    "the running time is @xmath107 .",
    "two agents of the same type must have the same signature , so @xmath108 .",
    "it follows from theorem  [ thm : fpt ] that the running time is @xmath107 @xmath109 and hence the algorithm is fpt with parameter @xmath110 .",
    "[ cor : numberofagenttypes ] there is an fpt algorithm for computing @xmath67 with parameter @xmath111 .",
    "the running time is @xmath112 .    in the worst case",
    ", each agent type has a different signature , so @xmath113 .",
    "it follows from theorem  [ thm : fpt ] that the running time is @xmath114 and hence the algorithm is fpt with parameter @xmath115 .    [ cor : alternatives ] there is an fpt algorithm for computing @xmath67 with parameter @xmath116 .",
    "the running time is @xmath117 .",
    "this follows from theorem  [ thm : fpt ] and the fact that if there are @xmath102 alternatives , there are at most @xmath118 different signatures @xmath61 because @xmath119 where the first term of the left - hand - side product is the number of way of choosing a subset @xmath120 of size @xmath6 and second term is how many choices we have for @xmath121 given that @xmath122 and @xmath123 .",
    "therefore , @xmath124 .",
    "[ cor : alternativestypes ] there is an fpt algorithm for computing @xmath67 with parameter @xmath125 .",
    "the running time is @xmath126 .",
    "this follows from lemma  [ lemma : alternative - types ] and corollary  [ cor : alternatives ] .",
    "an _ assignment setting _ is a triple @xmath127 , where @xmath33 is a set of @xmath110 agents , @xmath128 is a set of @xmath129 houses , and @xmath14 is a preference profile that contains , for each agent @xmath20 , a _ linear _ preference relation on some subset of houses that are _ acceptable _ to the agent . if a house is _ unacceptable _ to an agent , then he would prefer not to get any house than being allocated an unacceptable house .",
    "the size of an instance of an assignment setting will be denoted by @xmath30 which is equal to @xmath130 .",
    "every randomized assignment yields a _ fractional assignment _ that specifies , for every agent @xmath20 and every house @xmath131 , the probability @xmath132 that house  @xmath131 is assigned to agent @xmath20 .",
    "the fractional assignment can be seen as a compact representation of the randomized assignment .",
    "@xmath0takes a permutation uniformly at random and then lets the agents in the permutation serially take their most preferred house that has not yet been allocated .",
    "if no acceptable houses remain , then the agent takes no house .",
    "it is easily observed that the assignment setting is a special case of a social choice problem where @xmath12 , the set of alternatives is the set of all discrete assignments and the preferences of agents over @xmath12 are induced by their preferences over @xmath128 .",
    "although agents have strict preferences over the houses , they are indifferent among all assignments in which they are allocated the same house . we illustrate how @xmath0works as a random assignment rule .",
    "consider the following preference profile . @xmath133",
    "agent @xmath134 and @xmath135 are of the same type since they have the same preferences .",
    "let us consider the prio outcomes for each permutation over the voters .",
    "each outcome is a discrete matching .",
    "@xmath136    thus the @xmath0fractional assignment is obtained by taking the uniform convex combination of the discrete assignments for each of the permutations ( see table  [ table : randomassigmentrsd ] ) .",
    ".fractional / randomized assignment as a result of @xmath0 .",
    "[ cols=\"<,<,<,<\",options=\"header \" , ]     although the assignment setting is a subdomain of social choice ( voting ) , it does not mean that positive algorithmic results for voting imply the same for the assignment domain .",
    "the reason is that the transformation from an assignment setting to a corresponding voting problem leads to an exponential blowup in the number of alternatives .",
    "hence , results in the previous section do not carry over directly to the domain of assignments .",
    "@xcite showed that it is not possible ( under suitable complexity - theoretic assumptions ) to design an efficient algorithm for approximating the @xmath0probabilities even if randomization is used .",
    "since neither randomization nor approximation is helpful , this further motivates a parametrized algorithm approach .",
    "the main result in this section is an fpt algorithm with composite parameter number of houses and number of agent types . from this result",
    "we derive two corollaries : there is a polynomial - time algorithm when the number of agent types is constant , and an fpt algorithm with parameter number of houses .",
    "we use @xmath115 to denote the number of agent types , and @xmath137 to denote the number of agents of type @xmath138 in the instance . with a slight abuse of notation",
    ", we will use @xmath139 to denote preference order of an agent of type @xmath138 .",
    "[ th : fptassign ] in the assignment setting , for each @xmath140 and @xmath141 there is an algorithm for computing @xmath142 running in @xmath143  time .",
    "let @xmath144 be a vector of integers where @xmath145 for all @xmath146 .",
    "also let @xmath147 where @xmath148 for @xmath149 .",
    "multiple entries of @xmath150 can have the same house .",
    "let @xmath151 be those houses that are _ dominated _ by the allocation @xmath150 , namely , for each house @xmath152 , there must be an agent type @xmath138 that prefers @xmath153 to @xmath154 ; more formally , @xmath155    for each @xmath156 we define a residual problem where the set of houses available is @xmath157 and there are @xmath158 agents of type @xmath138 for each @xmath149 .",
    "intuitively , @xmath150 is maintained in a way so that each @xmath154 is the house most preferred by agent type @xmath138 that has yet not been allocated .",
    "let @xmath159 be the type of agent @xmath20 from the theorem statement .",
    "consider a permutation of the agents where there are @xmath158 agents of type @xmath138 and @xmath20 is one of the agents of type @xmath160the precise identity of the other agents is not important .",
    "we say such a permutation is _ lucky _ if running serial dictatorship with this permutation on the residual instance results in assigning @xmath20 to @xmath131 .",
    "we again use a dynamic programming formulation based on counting lucky permutations in the residual problems @xmath161 =              \\text{\\ # lucky permutations in the residual problem defined by $ ( \\vec{s } , \\vec{b})$}.\\ ] ]    our goal now is to derive a recurrence relation for @xmath162 $ ] .",
    "we begin with some base cases .",
    "first , if there are no agents of type @xmath159 left or if the house @xmath131 is not available anymore , then there are no lucky permutations ; more formally , @xmath161 = 0 \\quad \\text { if } s_{j^ * } = 0 \\text { or } h \\in \\operatorname{\\textrm{dom}}(\\vec{b}).\\ ] ]    we say that @xmath150 is _ degenerate _ if @xmath163 for some @xmath138 . for such degenerate vectors ,",
    "let us define @xmath164 to be the vector @xmath165 such that @xmath166 is the most preferred house by agents of type @xmath138 that does not belong to @xmath151 or @xmath167 if all acceptable houses for agents of type @xmath138 belong to @xmath151 .",
    "it follows that if @xmath150 is degenerate then @xmath168 = m[\\vec{s},\\operatorname{\\textrm{closure}}(\\vec{b})].\\ ] ]    let @xmath169 be the house that comes after @xmath153 in the total order of type @xmath138 preferences . if @xmath153 happens to be the last acceptable house for type-@xmath138 agents then @xmath170 .",
    "it is worth noting that @xmath164 can be defined recursively in terms of the @xmath171 operator : @xmath172 where the notation @xmath173 denotes the vector that is identical to @xmath150 except for coordinate @xmath138 , which takes the value @xmath174 ; in other words ,    @xmath175    our final corner case is that where there is an agent of type @xmath138 such that @xmath176 and @xmath177 . in this case",
    "it does not matter where the remaining @xmath158 agents of type @xmath138 are placed in the permutation since none of them will get a house .",
    "therefore , we get @xmath178 = { s_1 + \\cdots + s_t \\choose s_j } s_j !           \\cdot m[(\\vec{s}_{-j } , 0 ) , \\vec{b}].\\ ] ]    for the recursive case of the recurrence , we condition on the type of agent that is chosen to lead the lucky permutation .",
    "if the agent is of type @xmath179 and @xmath180 , assuming @xmath177 , there are @xmath158 agents to choose from , so the number of such permutations will be @xmath181.\\ ] ] if the agent is of type @xmath159 , assuming @xmath182 , and the agent is not @xmath20 , then the number of such permutations is @xmath183.\\ ] ] finally , if the agent of type @xmath159 leading the lucky permutation is @xmath20 itself , then the number of such permutations is @xmath184    putting everything together we get the following recurrence for @xmath156 for the case when @xmath150 is non - degenerate , @xmath185 , @xmath182 : @xmath186 =           & \\sum_{\\mathclap{j \\neq j^ * : \\atop s_j > 0 \\wedge b_j \\neq \\textrm{nil } } } s_j \\cdot m[(\\vec{s}_{-j } , s_j -1 ) , ( \\vec{b}_{-j } , \\operatorname{\\textrm{next}}_j(b_j ) ) ] \\notag \\\\                     & + ( s_{j^ * } - 1 ) \\cdot m[(\\vec{s}_{-j^ * } , s_{j^ * } -1 ) , ( \\vec{b}_{-j^ * } , \\operatorname{\\textrm{next}}_{j^*}(b_{j^ * } ) ] \\notag \\\\           & + \\begin{cases }              ( -1 + \\sum_{j } s_j ) ! & \\text{if } b_{j^ * } = h \\\\              0 & \\text{if } b_{j^ * } \\neq h           \\end{cases }      \\end{aligned}\\ ] ]    once the table is filled , the probability we are after is simply @xmath187}{n!},\\ ] ] where @xmath188 is the house most preferred by agents of type @xmath138 .",
    "let us bound the running time of the algorithm .",
    "first , we show how to efficiently compute the set of agent types present in the instance , their frequencies and preferences .",
    "think of the linear preference relation of some agent as a `` string '' whose `` letters '' are houses .",
    "notice that two agents of the same type give rise to the same string . in @xmath189 time",
    "we can generate the set of all string and build a trie ( ch .  5 ,",
    "* ) out of them , keeping a frequency count of how many strings of each kind we have seen , which correspond to how many agents of that type there are .",
    "next , we need to bound the time it takes to fill the dp table .",
    "notice that the total number of entries @xmath190 $ ] can be as large as @xmath191 entries , since there are @xmath192 choices for @xmath193 and @xmath194 choices for @xmath150 .",
    "unfortunately , this would be too large for our purposes .",
    "the key observation is that not all possible vectors @xmath193 are reachable from our recurrence .",
    "in particular , notice that every time we apply we decrease @xmath195 by one and once all houses are assigned , the vector @xmath150 must be @xmath167 everywhere , which means we are at the base case of the recurrence .",
    "therefore , we only need to keep track of vectors @xmath193 where @xmath196 .",
    "there are only @xmath197 such vectors .",
    "thus , the total number of entries we need to keep track of is bounded by @xmath198 .",
    "computing @xmath190 $ ] using takes @xmath199 time , while using other cases of the recurrence takes @xmath200 time provided the function @xmath201 is already computed , which takes @xmath202 time overall . adding everything up , we get that the total running time is @xmath203 as it appears in the theorem statement .",
    "[ cor : houses ] there is an fpt algorithm for computing @xmath142 with parameter @xmath204 .",
    "the running time is @xmath205 .",
    "notice that when we have @xmath102 houses , there can be at most @xmath206 agent types , one for each total ordering of every subset of the @xmath102 houses .",
    "the time bound follows from plugging @xmath207 into theorem  [ th : fptassign ] :    @xmath208    where the last inequality follows from the upper bound @xmath209 , which is an easy consequence of stirling s approximation for factorial numbers .",
    "[ cor : assign - agent - types ] there is an algorithm for computing @xmath142 whose running time is @xmath210 .    the time bound follows directly from theorem  [ th : fptassign ] : @xmath211",
    "in this paper , we presented the first parametrized complexity analysis of @xmath0both for the voting and assignment setting . for voting , we presented fpt algorithms for parameters # agent types and # alternatives . for the assignment setting",
    ", we presented an fpt algorithm for parameter # houses .",
    "although an fpt algorithm for the assignment setting with parameter # agent types still eludes us , we showed that the problem is polynomial - time solvable if # agent types is constant .",
    "we leave as an open problem to settle the parametrized complexity of @xmath0 in the assignment setting for the parameter @xmath212 .",
    "the authors thank the anonymous reviewers whose comments helped to improve the presentation of the paper .",
    "nicta is funded by the australian government through the department of communications and the australian research council through the ict centre of excellence program .",
    "h.  aziz , f.  brandt , and m.  brill . on the tradeoff between economic efficiency and strategyproofness in randomized social choice . in _ proceedings of the 12th international conference on autonomous agents and multi - agent systems ( aamas )",
    "_ , pages 455462 .",
    "ifaamas , 2013 .",
    "d.  saban and j.  sethuraman .",
    "the complexity of computing the random priority allocation matrix . in y.",
    "chen and n.  immorlica , editors , _ proceedings of the 9th international workshop on internet and network economics ( wine ) _ , lecture notes in computer science ( lncs ) , http://www.columbia.edu/  js1353/pubs / rpcomplexity.pdf , 2013 ."
  ],
  "abstract_text": [
    "<S> voting and assignment are two of the most fundamental settings in social choice theory . for both settings , _ random serial dictatorship _ ( @xmath0 ) is a well - known rule that satisfies anonymity , ex post efficiency , and strategyproofness . </S>",
    "<S> recently , it was shown that computing the resulting probabilities is # p - complete both in the voting and assignment setting . in this paper , we present efficient parametrized algorithms to compute the @xmath0 probabilities for parameters such as the number of agent types , alternatives , or objects . </S>",
    "<S> when the parameters are small , then the respective algorithms are considerably more efficient than the naive approach of going through all permutations of agents .    social choice theory , random serial dictatorship , random priority , computational complexity , assignment setting . </S>",
    "<S> + _ jel _ : c6 , c7 . </S>"
  ]
}