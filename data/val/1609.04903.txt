{
  "article_text": [
    "community detection ( cd ) has found applications in social , biological , business , and other kinds of networks .",
    "however , cd algorithms suffer from various flaws ",
    "( i ) most existing cd algorithms are heavily dependent on _ vertex ordering _",
    "@xcite , yielding completely different community structures when the same network is processed in a different order . for example",
    ", figure [ example](a ) shows dissimilar community structures after running infomap   @xcite on @xmath2 different vertex orderings of the football network @xcite .",
    "( ii ) most optimization algorithms may produce multiple community structures with the same `` optimal '' value of the objective function .",
    "for instance , in figure [ example](b ) , assigning vertex @xmath3 to either @xmath4 or @xmath5 results in the same modularity score @xcite .",
    "( iii ) different cd algorithms detect communities in different ways , e.g. , as dense groups internally @xcite , or groups with sparse connections externally @xcite .",
    "it is therefore natural to think of an ensemble approach in which the strengths of different cd algorithms may help overcome the weaknesses of any specific cd algorithm .",
    "some preliminary attempts have been made by @xcite .",
    "* contributions . * in this paper , we design two ensemble cd algorithms .",
    "the endisco  algorithm runs multiple `` base '' cd algorithms using a variety of vertex orderings to derive a first set of communities .",
    "we then consider the memberships of vertices obtained from base cd algorithms as features and derive a latent network using pair - wise similarity of vertices .",
    "the final disjoint community structure is obtained by running any cd algorithm again on the latent network .",
    "the medoc   algorithm leverages the fact that many communities returned by base algorithms are redundant and can therefore be grouped into `` meta - communities '' to avoid unnecessary computation .",
    "we use meta - communities to build an association matrix , where each entry indicates the probability of a vertex belonging to a meta - community . finally , we obtain both disjoint and overlapping community structures via post - processing on the association matrix .",
    "_ to the best of our knowledge , we are the first to propose ( i ) an ensemble framework for overlapping community detection , and ( ii ) an overlapping cd algorithm that leverages disjoint community information . _",
    "we run experiments to identify the best parameter settings for endisco  and medoc .",
    "experiments on both synthetic and real - world networks show that our algorithms outperform both the state - of - the - art non - ensemble based methods @xcite and a recently proposed ensemble approach @xcite by a significant margin - values for all our experiments to show statistical significance . ] .",
    "we also show that our ensemble approaches reduce the effect of vertex ordering .",
    "* note : * we use the term `` community structure '' to indicate the result ( set of `` communities '' ) returned by an algorithm .",
    "each community is a set of vertices .",
    "there has been a great deal of work on clustering data using ensemble approaches ( see @xcite for a review ) . however , when it comes to clustering vertices in _ networks _ , ensemble approaches have been relatively scarce .",
    "dahlin and svenson @xcite were the first to propose an instance - based ensemble cd algorithm for networks which fuses different community structures into a final representation .",
    "a few methods addressed the utility of merging several community structures @xcite . a new ensemble scheme called cggc was proposed to maximize modularity @xcite .",
    "kanawati proposed yasca , an ensemble approach to different network partitions derived from ego - centered communities computed for each selected seed @xcite .",
    "he further emphasized the quality and diversity of outputs obtained from the base algorithms for ensemble selection @xcite .",
    "a `` consensus clustering '' @xcite approach was recently proposed which leverages a _ consensus matrix _ to produce a disjoint community structure which outperformed previous approaches .",
    "our work differs from this approach in at least three significant ways : ( i ) they measure the number of times two vertices are assigned to the same community , thus ignoring the global similarity of vertices ; whereas we capture the global similarity by representing the network within a feature space and grouping redundant base communities into meta communities ; ( ii ) they either take multiple algorithms or run a particular algorithm multiple times for generating an ensemble matrix , whereas we consider both options ; ( iii ) we are the first to show how aggregating multiple disjoint base communities can lead to discover both disjoint and overlapping community structures simultaneously .",
    "we show experimentally that endisco  beats consensus clustering .",
    "[ insimul ]    @xmath6    build an ensemble matrix @xmath7 , where @xmath8=@xmath9;[algo1:sim ] + run @xmath10 for _ re - clustering vertices _ from @xmath11 and discover a disjoint community structure @xmath12;[algo1:assign ] + @xmath12",
    "endisco  ( * en*semble - based * dis*joint * co*mmunity detection ) starts by first using different cd algorithms to identify different community structures .",
    "second , an `` involvement '' function is used to measure the extent to which a vertex is involved with a given community , which in turn sets the posterior probabilities of each vertex belonging to different communities .",
    "third , endisco  transforms the network into a feature space .",
    "fourth , an ensemble matrix is constructed by measuring the pair - wise similarity of vertices . finally , we apply any standard cd algorithm on the ensemble matrix and discover the final disjoint community structure .",
    "endisco   follows three fundamental steps ( a pseudo - code is shown in algorithm [ insimul ] ) :    * ( i ) generating base partitions . *",
    "given a network @xmath13 and a set @xmath14 of @xmath11 different base cd algorithms , endisco  runs each algorithm @xmath15 on @xmath16 different vertex orderings ( randomly selected ) of @xmath1 .",
    "this generates a set of @xmath16 different community structures denoted @xmath17 , where each community structure @xmath18 constitutes a specific partitioning of vertices in @xmath1 , and each @xmath19 might be of different size ( step [ algo1:ensemble ] ) .    *",
    "( ii ) constructing ensemble matrix . * given a @xmath20 , we then compute the extent of @xmath21 s involvement in each community @xmath22 in @xmath19 via an `` involvement '' function @xmath23 ( step [ algo1:dist ] ) .",
    "possible definitions of @xmath24 are given in section [ algo1:paramater ] .",
    "for each vertex @xmath21 , we construct a feature vector @xmath25 whose elements indicate the distance of @xmath21 ( measured by @xmath26 ) from each community obtained from different runs of the base algorithms ( step [ algo1:fea ] ) .",
    "the size of @xmath25 is same as the number of communities @xmath27 in @xmath28 ( approx .",
    "@xmath29 , where @xmath30 is the average size of a base community structure ) .",
    "let @xmath31 be the largest distance of @xmath21 from any community in the sets in @xmath28 ( i.e. , @xmath32 in step [ algo1:d ] ) .",
    "we define the conditional probability of @xmath21 belonging to community @xmath33 ( step [ algo1:prob ] ) as : @xmath34 the numerator ensures that the greater the distance @xmath35 of @xmath21 from community @xmath33 , the less likely @xmath21 is to be in community @xmath33 .",
    "the normalization factor in the denominator ensures that @xmath36 .",
    "add - one smoothing in the numerator allows a non - zero probability to be assigned to all @xmath33s , especially for @xmath37 such that @xmath38 .",
    "the set of posterior probabilities of @xmath21 is : @xmath39 ( step [ algo1:post ] ) , which in turn transforms a vertex into a point in a multi - dimensional feature space .",
    "finally we construct an ensemble matrix @xmath11 whose entry @xmath40 is the similarity ( obtained from a function @xmath41 whose possible definitions are given in section [ algo1:paramater ] ) between the feature vectors of @xmath42 and @xmath21 ( step [ algo1:sim ] ) .",
    "the ensemble matrix ensures that the more communities a pair of vertices share the more likely they are connected in the network @xcite .    *",
    "( iii ) discovering final community structure . * in step [ algo1:assign ]",
    "we use a cd algorithm @xmath10 to re - cluster the vertices from @xmath11 and discover the final disjoint community structure ( step [ algo1:assign ] ) .",
    "@xmath43 * involvement function ( @xmath24 ) : * we use two functions to measure the involvement of a vertex @xmath21 in a community @xmath22 : ( i ) _ restricted closeness centrality _ ( @xmath44 ) : this is the inverse of the average shortest - path distance from the vertex @xmath21 to the vertices in community @xmath22 , i.e. , @xmath45 ; ( ii ) _ inverse distance from centroid _ ( _ idc _ ) : we first identify the vertex with highest closeness centrality ( w.r.t .",
    "the induced subgraph of @xmath22 ) in community @xmath22 , mark it as the centroid of @xmath22 ( denoted by @xmath46 ) , and then measure the involvement of @xmath21 as the inverse of the shortest - path distance between @xmath21 and @xmath46 , i.e. , @xmath47 .",
    "@xmath43 * similarity function ( @xmath41 ) : * we consider cosine similarity ( @xmath48 ) and chebyshev distance ( @xmath49 ) ( essentially , @xmath50 ) to measure the similarity between two vectors .",
    "@xmath43 * algorithm for re - clustering ( @xmath10 ) : * we consider each base cd algorithm as the one to re - cluster the vertices from the ensemble matrix .",
    "the idea is to show that a non - ensemble cd algorithm can perform even better when considering the ensemble matrix of network @xmath1 than the adjacency matrix of @xmath1 .",
    "however , one can use any cd algorithm in this step to detect the community structure .",
    "we will show the effect of different algorithms used in this step in section [ sec : impact ] .",
    "@xmath43 * number of iterations ( @xmath16 ) : * instead of fixing a hard value , we set @xmath16 to be dependent on the number of vertices @xmath51 in the network .",
    "we vary @xmath16 from @xmath52 to @xmath53 ( with step @xmath54 ) of @xmath51 and confirm that for most of the networks , the accuracy of the algorithm converges at @xmath55 ( figures [ parameter_dis](c ) and [ parameter_dis](f ) ) , and therefore we set @xmath55 in our experiments .",
    "suppose @xmath56 is the number of vertices in the network , @xmath11 is the number of base algorithms and @xmath16 is the number of vertex orderings .",
    "further suppose @xmath30 is the average size of the community structure .",
    "then the loop in step [ algo1:v ] of algorithm 1 would iterate @xmath57 times ( where @xmath58 ) .",
    "the construction of the ensemble matrix in step [ algo1:sim ] would take @xmath59 .",
    "graph partitioning is np - hard even to find a solution with guaranteed approximation bounds  however , heuristics such as the famous kernighan - lin algorithm take @xmath60 time .",
    "[ meclud ]    construct a @xmath61-partite graph @xmath62 ( where @xmath63 ) consisting of @xmath64 partitions , each corresponding to each community structure obtained in step 2 : vertices in partition @xmath65 are communities in @xmath19 and edges are drawn between two pair - wise vertices ( communities ) @xmath66 and @xmath67 with the edge weight @xmath68;[algo2:cons ] + run @xmath10 to re - cluster vertices in @xmath62 and discover a meta - community structure , @xmath69;[algo2:run ] + construct an association matrix @xmath70 , where @xmath71 , indicating the association of vertex @xmath21 to a meta - community @xmath72;[algo2:asso ] + each row in @xmath73 indicates the membership probabilities of the corresponding vertex in @xmath74 meta - communities ; + to get @xmath12 , we assign a vertex @xmath21 to community @xmath75;[algo2:dc ] + to get @xmath76 , we assign a vertex @xmath21 to a set of communities @xmath77 so that @xmath78;[algo2:oc ] + @xmath12 , @xmath76",
    "medoc   ( * me*ta clustering based * d*isjoint and * o*verlapping * c*ommunity detection ) starts by executing all base cd algorithms , each with different vertex orderings , to generate a set of community structures .",
    "it then creates a multipartite network .",
    "after this , a cd algorithm is used to partition the multipartite network .",
    "finally , a vertex - to - community association function is used to determine the membership of a vertex in a community . unlike endisco , medoc   yields both disjoint and overlapping community structures from the network .",
    "medoc   has the following four basic steps ( pseudo - code is in algorithm [ meclud ] ) :    * ( i ) constructing multipartite network .",
    "* medoc  takes @xmath11 cd algorithms @xmath14 and runs each @xmath15 on @xmath16 different vertex orderings of @xmath1 . for each ordering @xmath79",
    ", @xmath15 produces a community structure @xmath80 of varying size ( step [ algo2:perm ] ) . after running on @xmath16 vertex orderings , each algorithm @xmath15 produces @xmath16 different community structures @xmath17 .",
    "therefore at the end of step [ algo2:perm ] , we obtain @xmath16 community structures each from @xmath11 algorithms ( essentially , we have @xmath63 community structures ) .",
    "we now construct a @xmath61-partite network ( aka meta - network ) @xmath62 as follows : the vertices are members of @xmath81 , i.e. , a community present in a community structure obtained from any of the base algorithms in @xmath0 and any vertex ordering , is a vertex of @xmath62 .",
    "we draw an edge from a community @xmath66 to a community @xmath82 and associate a weight @xmath68 ( step [ algo2:cons ] ) .",
    "possible definitions of @xmath83 will be given later in section  [ algo2:parameter ] . since each @xmath19 is disjoint",
    ", the vertices in each partition are never connected .    *",
    "( ii ) re - clustering the multipartite network . * here we run any standard cd algorithm @xmath10 on the multipartite network @xmath62 and obtain a community structure containing ( say ) @xmath74 communities @xmath84 .",
    "note that in this step , we indeed cluster the communities obtained earlier in step 2 ; therefore each such community @xmath72 obtained here is called a `` meta - community '' ( or community of communities ) ( step [ algo2:run ] ) .    *",
    "( iii ) constructing an association matrix .",
    "* we determine the association between a vertex @xmath21 and a meta - community @xmath72 by using a function @xmath85 and construct an association matrix @xmath73 of size @xmath86 , where each entry @xmath71 ( step [ algo2:asso ] ) .",
    "possible definitions of @xmath85 will be given later in section  [ algo2:parameter ] .",
    "* ( iv ) discovering final community structure . *",
    "final vertex - to - community assignment is performed by processing @xmath73 .",
    "the entries in each row of @xmath4 denote membership probabilities of the corresponding vertex in @xmath74 communities . for disjoint community assignment",
    ", we label each vertex @xmath21 by the community @xmath87 in which @xmath21 possesses the most probable membership in @xmath73 , i.e. , @xmath88 .",
    "tie - breaking is handled by assigning the vertex to the community to which most of its direct neighbors belong .",
    "note that every meta - community can not be guaranteed to contain at least one vertex , that in turn can not assure @xmath74 communities in the final community structure . for discovering overlapping community structure ,",
    "we assign a vertex @xmath21 to those communities for which the membership probability exceeds a threshold @xmath89 .",
    "possible ways to specify threshold will be specified later in section  [ algo2:parameter ] .      @xmath43 * matching function ( @xmath83 ) * : given two communities @xmath33 and @xmath90 , we measure their matching / similarity via jaccard coefficient ( _ jc_)=@xmath91 and average precision ( _ ap _ ) = @xmath92 .    @xmath43",
    "* association function ( @xmath85 ) * : given a meta - community @xmath22 consisting of ( say , ) @xmath93 communities , the association of @xmath21 with @xmath22 can be calculated as @xmath94 , where @xmath89 returns @xmath95 if @xmath21 is a part of @xmath96 , @xmath97 otherwise . for example , if @xmath98 , then @xmath99 .",
    "alternatively , a weighted association measure may assign a score to @xmath21 w.r.t .",
    "@xmath22 based on the co - occurrence of the other community members with @xmath21 , i.e. , @xmath100 . in our earlier example , @xmath101 .    @xmath43",
    "* threshold ( @xmath102 ) : * we choose the threshold @xmath102 automatically as follows .",
    "we first assign each vertex to its most probable community  this produces a disjoint community structure .",
    "each vertex @xmath103 is represented by a feature vector @xmath104 which is the entire @xmath105th row of the association matrix @xmath73 .",
    "we then measure the average similarity of vertices in @xmath22 as follows : @xmath106 , where @xmath107 is the set of edges completely internal to @xmath22 , @xmath108 is an edge @xmath109 , and @xmath48 is cosine similarity .",
    "the probability that two vertices are connected in @xmath22 is then defined as : @xmath110}^2}}{1+e^{{[as(c)]}^2}}\\ ] ] for a vertex @xmath21 , if @xmath111 , we further assign @xmath21 to @xmath22 , in addition to its current community .",
    "we compare our threshold selection method with the following method : each vertex is assigned to its top @xmath112 high probable communities ( we set @xmath113 to @xmath114 or @xmath115 ) .",
    "our experiments show that medoc  delivers excellent performance with our threshold selection method ( see figures [ parameter_over](g)-(i ) ) .",
    "other input parameters @xmath10 and @xmath16 remain same as discussed in section [ algo1:paramater ] .",
    "the most expensive step of medoc   is to construct the multipartite network in step 3 .",
    "if @xmath11 is the number of base algorithms , @xmath16 is the number of vertex orderings and @xmath30 is the average size of a base community structure , the worst case scenario occurs when each vertex in one partition is connected to each vertex in other partitions  if this happens , the total number of edges is @xmath116 .",
    "however , in practice the network is extremely sparse and leads to @xmath117 edges ( because in sparse graphs @xmath118 ) .",
    "further , constructing the association matrix would take @xmath119 iterations ( where @xmath120 ) .",
    "we use the lfr benchmark model @xcite to generate synthetic networks with ground - truth community structure by varying the number of vertices @xmath113 , mixing parameter @xmath121 ( the ratio of inter- and intra - community edges ) , average degree @xmath122 , maximum degree @xmath123 , minimum ( maximum ) community size @xmath124 ( @xmath125 ) , average percentage @xmath126 of overlapping vertices and the average number @xmath127 of communities to which a vertex belongs . , @xmath128 , @xmath129 , @xmath130 , @xmath131 , @xmath132 , @xmath133 , @xmath134 . ]",
    "note that for each parameter configuration , we generate 50 lfr networks , and the values in all the experiments are reported by averaging the results .",
    "we also use @xmath135 real - world networks mentioned in table [ dataset](a ) for experiments ( see detailed description in appendix @xcite ) .",
    "we compare endisco  and medoc  with the following algorithms :  ( i ) _ modularity - based _ : fastgreedy ( fstgrdy ) @xcite , louvain ( louvain ) @xcite and cnm   @xcite ; ( ii ) _ vertex similarity - based _ : walktrap ( walktrap ) @xcite ; ( iii ) _ compression - based _ : infomap ( infomap ) @xcite ; ( iv ) _ diffusion - based _ : label propagation ( labelpr ) @xcite .",
    "these algorithms are also used as base algorithms in @xmath0 in our ensemble approaches .",
    "we further compare our methods with consensus clustering ( conscl ) @xcite , a recently - proposed ensemble - based framework for disjoint community detection .      as we know the ground - truth community structure , we measure performance of competing cd algorithms using the standard _ normalized mutual information _ ( _ nmi _ ) @xcite and _ adjusted rand index _ ( _ ari _ ) @xcite .",
    "we first run experiments to identify the best parameters for endisco  and medoc  and then present the comparative analysis among the competing algorithms .",
    "we consider the lfr networks and vary @xmath121 .",
    "figure [ parameter_dis](a ) shows that the accuracy of endisco  is similar for both the involvement functions , while figure [ parameter_dis](b ) shows cosine similarity fully dominating chebyshev distance .",
    "figure [ parameter_dis](d ) shows that jaccard coefficient performs significantly better than average precision when medoc  is considered , while  figure [ parameter_dis](e ) shows that the weighted association function seems to dominate the other for @xmath136 and exhibits similar performance for @xmath137 .",
    "we further vary the number of iterations @xmath16 to obtain communities with different vertex orderings  figures [ parameter_dis](c ) and [ parameter_dis](f ) show that for the networks with strong community structure ( such as lfr ( @xmath138 ) , football ) , the accuracy levels off at @xmath55 ; however with increasing @xmath121 leveling off occurs at larger values of @xmath16 .",
    "note that the patterns observed here for lfr network are similar for other networks .",
    "therefore unless otherwise stated , in the rest of the experiment we show the results of our algorithms with the following parameter settings for disjoint community detection : endisco : @xmath55 , @xmath44 , @xmath48 ; medoc : @xmath55 , @xmath139 , @xmath140 .      in order to assess the impact of each base algorithm in our ensemble",
    ", we measure the accuracy of endisco  and medoc  when that base algorithm is removed from the ensemble  table [ impact ] shows that for lfr networks infomap  has the biggest impact on accuracy according to both the evaluation measures ( nmi and ari ) for both endisco  and medoc   ( results are same for real networks @xcite ) .    as the final step in both endisco  and medoc  is to run a cd algorithm for re - clustering , we also conduct experiments ( table  [ impact_den ] for lfr networks and appendix @xcite for real networks ) to identify the best one .",
    "again , infomap  proves to be the best .",
    "table [ performance : non](a ) reports the performance of our approaches on all networks using different algorithms in the final step of endisco  and medoc .",
    "the numbers denote relative performance improvement of our algorithms ( e : endisco  m : medoc ) w.r.t . a given algorithm when that algorithm is used in the final step .",
    "for instance , the first entry in the last row ( 5.06 ) means that for lfr ( @xmath138 ) network , the accuracy of endisco  ( when labelpr  is used for re - clustering in its final step ) averaged over nmi and ari ( 0.83 ) is 5.06% higher than that of labelpr  ( 0.79 ) .",
    "the actual values are reported in appendix @xcite .",
    "the point to take away from this table is that irrespective of which classical cd algorithm we compare against , endisco  and medoc  always improve the quality of communities found .",
    "moreover , we observe from the results of lfr networks that with the deterioration of the community structure ( increase of @xmath121 ) , the improvement increases for all the re - clustering algorithms .",
    "further , table [ performance : non](b ) shows the average improvement of endisco  and medoc  when compared against consensus clustering ( conscl ) .",
    "we see that for disjoint networks , both endisco  and medoc  beat conscl   with medoc  emerging in top place .",
    "we again use the lfr benchmark to generate synthetic networks with overlapping community structure with the following default parameter settings as mentioned in @xcite : @xmath141 , @xmath128 , @xmath129 , @xmath130 , @xmath142 , @xmath143 , @xmath133 , @xmath134 .",
    "we generate @xmath144 lfr networks for each parameter configuration  the experiments reported averages over these @xmath144 networks .",
    "we further vary @xmath121 ( @xmath145-@xmath146 with increment of @xmath54 ) , @xmath127 and @xmath126 ( both from @xmath147 to @xmath148 with increment of @xmath149 ) depending upon the experimental need .",
    "we also run experiments with six real - world datasets mentioned in table [ dataset](b ) ( see details in appendix @xcite ) .",
    "we compare medoc   with the following state - of - the - art overlapping community detection algorithms : ( i ) _ local expansion : _ oslom @xcite , eagle @xcite ; ( ii ) _ agent - based dynamical algorithms : _ copra @xcite , slpa @xcite ; ( iii ) _ detection using mixture model : _ moses @xcite , bigclam @xcite .",
    "we use the following evaluation metrics to compare the results with the ground - truth community structure : ( a ) overlapping normalized mutual information ( @xmath150 ) @xcite , ( b ) omega ( @xmath151 ) index @xcite ( details in appendix @xcite ) .",
    "we first try to identify the best parameter settings for medoc .",
    "these include : matching function @xmath83 , association function @xmath85 , number of iterations @xmath16 and threshold @xmath102 .",
    "figure [ parameter_over ] shows the results ( on lfr networks ) by varying @xmath121 , @xmath127 and @xmath126 .",
    "we observe that jaccard coefficient as matching function and weighted association measure are better than their alternative .",
    "the choice of @xmath16 is the same as shown in figure [ parameter_dis](f )  accuracy levels off at @xmath55 , and therefore we skip this result in the interest of space .",
    "we experiment with two choices of thresholding : top 5% and 10% most probable communities per vertex , and compare with the threshold selection mechanism described in section [ algo2:parameter ] .",
    "figures [ parameter_over](g)-[parameter_over](i ) show that irrespective of any network parameter selection , our choice of selecting threshold always outperforms others .",
    "as shown in table [ impact_den ] , infomap   seems to be the best choice for the re - clustering algorithm .",
    "therefore , in the rest of the experiments , we run medoc  with @xmath55 , @xmath139 , @xmath140 , infomap   and @xmath102 ( selected by our method ) .",
    "the impact of the base algorithms on medoc s performance is similar to what we saw in the disjoint cd case .",
    "the results in table [ impact ] show that accuracy decreases most when we drop infomap  from the base algorithm , followed by louvain   and cnm  ( see more results in appendix @xcite ) .",
    "we ran medoc  with the default setting on three lfr networks and five real - world networks .",
    "the performance of medoc  is compared with the six baseline overlapping community detection algorithms .",
    "table [ performance : over ] shows the performance of the competing algorithms in terms of onmi and @xmath151 index . in all cases ,",
    "medoc  is a clear winner , winning by significant margins .",
    "the absolute average of onmi ( @xmath151 ) for medoc   over all networks is 0.83 ( 0.86 ) , which is 3.58% ( 4.39% ) higher than bigclam , 5.90% ( 7.49% ) higher than moses , 8.31% ( 9.19% ) higher than slpa , 10.67% ( 10.95% ) higher than copra , 13.89% ( 12.95% ) higher than eagle , and 14.68% ( 15.21% ) higher than oslom .",
    "another interesting observation is that the performance improvement seems to be prominent with the deterioration of community quality .",
    "for instance , the improvement of medoc  w.r.t . the best baseline algorithm ( bigclam )",
    "is 2.32% ( 7.06% ) , 3.70% ( 4.82% ) and 6.49% ( 6.33% ) in terms of onmi ( @xmath151 ) with the increasing value of @xmath121 ranging from 0.1 , 0.3 and 0.6 respectively .",
    "this once again corroborates our earlier observations in section [ comp_dis ] for disjoint communities .",
    "since ensemble approaches require the running all baseline algorithms ( which may be parallelized ) , one can not expect ensemble methods to be faster than baseline approaches . however , our proposed ensemble frameworks are much faster than existing ensemble approaches such as consensus clustering . to show this , for each ensemble algorithm , we report @xmath152 , the ratio between the runtime of each ensemble approach and the sum of runtimes of all base algorithms , with increasing number of vertices in lfr .",
    "we vary the number of edges of lfr by changing @xmath121 from @xmath145 to @xmath153 .",
    "figure [ runtime ] shows that our algorithms are much faster than consensus clustering .",
    "we further report the results of medoc  for overlapping community detection which is almost same as that of disjoint case since it does not require additional steps apart from computing the threshold .",
    "cd algorithms suffer from the problem of `` degeneracy of solutions '' @xcite which states that an optimization algorithm can produce exponentially many solutions with ( nearly-)similar optimal value of the objective function ( such as modularity ) ; however the solutions may be structurally distinct from each other .",
    "figure [ example ] showed how infomap   produces many outputs for different vertex orderings of football network .",
    "we test this by considering the default lfr network and one real - world network ( appendix @xcite shows results on more real world networks ) and run the algorithms on @xmath2 different vertex orderings of each network .",
    "we then measure the pair - wise similarity of the solutions obtained from each algorithm .",
    "the box plots in figure [ boxplot ] show the variation of the solutions for endisco , medoc  and the best baseline algorithm in both disjoint and overlapping community detections .",
    "we observe that the median  similarity is high with endisco  and medoc   and the variation is comparatively small .",
    "these results suggest that our algorithms provide more robust results than past work and alleviate the problem of degeneracy of solutions .",
    "in this paper , we proposed two general frameworks for ensemble community detection .",
    "endisco  identifies disjoint community structures , while medoc  detects both disjoint and overlapping community structures .",
    "we tested both algorithms on both synthetic data using the lfr benchmark and with several real - world datasets that have associated ground - truth community structure .",
    "we show that both endisco  and medoc  are more accurate than existing cd algorithms , though of course , endisco  and medoc  leverage them .",
    "we further show that for disjoint cd problems , endisco  and medoc  both beat a well known existing disjoint ensemble method called consensus clustering @xcite  both in terms of accuracy ( measured via both normalized mutual information and adjusted rand index ) and run - time . to our knowledge ,",
    "medoc  is the first ensemble algorithm for overlapping community detection that we have seen in the literature . in future",
    ", we would like to develop theoretical explanation to justify the superiority of ensemble approaches compared to the discrete models .",
    "other future direction could be to make the ensemble frameworks parallelized .",
    "we will apply the proposed methods to identify communities in specific datasets , such as malware traces , protein interaction networks etc .",
    "parts of this work were funded by aro grants w911nf-16 - 1 - 0342 , w911nf1110344 , w911nf1410358 , by onr grant n00014 - 13 - 1 - 0703 , and maryland procurement ofce under contract no .",
    "h98230 - 14-c-0137 .",
    "t.  chakraborty , s.  sikdar , n.  ganguly , and a.  mukherjee , `` citation interactions among computer science fields : a quantitative route to the rise and fall of scientific research , '' _ social netw .",
    "analys . mining _ , vol .  4 , no .  1 ,",
    ", 2014 .",
    "t.  chakraborty , s.  sikdar , v.  tammana , n.  ganguly , and a.  mukherjee , `` computer science fields as ground - truth communities : their impact , rise and fall , '' in _ asonam _ , niagara falls , canada , 2013 , pp . 426433 .",
    "l.  g.  s. jeub , p.  balachandran , m.  a. porter , p.  j. mucha , and m.  w. mahoney , `` think locally , act locally : detection of small , medium - sized , and large communities in large networks , '' _ phy .",
    "e. _ , vol .",
    "91 , p. 012821"
  ],
  "abstract_text": [
    "<S> given a set @xmath0 of community detection algorithms and a graph @xmath1 as inputs , we propose two ensemble methods endisco   and medoc  that ( respectively ) identify disjoint and overlapping communities in @xmath1 . </S>",
    "<S> endisco  transforms a graph into a latent feature space by leveraging multiple base solutions and discovers disjoint community structure . </S>",
    "<S> medoc  groups similar base communities into a _ meta - community _ and detects both disjoint and overlapping community structures . </S>",
    "<S> experiments are conducted at different scales on both synthetically generated networks as well as on several real - world networks for which the underlying ground - truth community structure is available . </S>",
    "<S> our extensive experiments show that both algorithms outperform state - of - the - art non - ensemble algorithms by a significant margin . </S>",
    "<S> moreover , we compare endisco  and medoc  with a recent ensemble method for disjoint community detection and show that our approaches achieve superior performance . to the best of our knowledge , </S>",
    "<S> medoc  is the first _ </S>",
    "<S> ensemble approach _ for overlapping community detection . </S>"
  ]
}