{
  "article_text": [
    "software testing aims at understanding the risks of software implementation and providing proper quality of the system under test .",
    "one of fundamental problems is that testing under all possible combinations of inputs is not feasible .",
    "this holds for functional testing , while non - functional aspects ( performance , compatibility , etc . )",
    "are left apart . for business critical applications",
    "black - box testing is a widely - used approach .",
    "it examines the functionality of a system under test without dealing with its implementation .",
    "it is important to notice that static testing involves verification , while dynamic testing involves validation .",
    "one of the biggest challenges in black - box dynamic testing is choosing the proper approach to enumerate all possible cases .",
    "domain testing helps quality assurance engineer to define classes of input values , that are crucial to test .",
    "the naive way is just to check for possible combinations of such parameters , and it immediately leads to exponential complexity . even in the case of 6 boolean parameters an expert has to check 64 combinations .",
    "a possible solution is to generate test - cases in manual way .",
    "a software test engineer considers all possible cases ordered in a certain way .",
    "the main risk is to lose some information behind the cases . actually , it could be rather exhausting to cover all possibilities for a large number of parameters and not to skip some scenarios .",
    "a popular alternative way is pairwise testing  @xcite , or its generalization , n - wise testing .",
    "we define parameters and domains , and pass them like a model into a black - box algorithm  @xcite , which gives us a set of test - cases satisfying a certain condition ( for each pair of input parameters all possible discrete combinations of those parameters are tested ) . in general case it can produce different cases in different runs , while it can be fixed by passing a random seed to it .",
    "the main advantage of the approach is its insensitivity to parameter values .",
    "however , it can be a rather computationally demanding task .    for quality assurance engineers",
    "it is sufficient to have knowledge about possible behavior of the program .",
    "usually , there are dependencies between input parameters .",
    "a natural form to express such dependencies in mathematical terms is implication , a statement of the form : ` if ... , then ... ' .",
    "the ` if'-part is called premise , and the ` then ' is called conclusion .",
    "consideration of parameter s interdependence can decrease the complexity of result test - cases in terms of their quantity , by excluding some of possible parameter combinations .",
    "proposed approach to test - case generation is focused on implications .",
    "we use an approach based on formal concept analysis ( fca)@xcite .",
    "fca provides software engineers with a tool for exploring the domain of interest in semi - automatic way .",
    "the algorithm outputs sound and complete description of the problem , but it is still highly dependent on the accuracy of expert s answers",
    ". surveys on fca techniques and applications can be found in  @xcite .",
    "fca - based approaches have already been applied in software engineering , e.g. , for inference of class hierarchies  @xcite , class design  @xcite , refactoring  @xcite .",
    "another application of fca technique is analysis of object - oriented approach for a given system  @xcite .",
    "the questions of mapping lines of source code to the functionality from requirements is of crucial importance for big systems  @xcite .",
    "the rest of the paper is organized as follows : in section 2 we introduce basic notions of formal concept analysis . in section 3",
    "we focus on the procedure of attribute exploration .",
    "section 4 provides example of attribute exploration in the field of positive integers .",
    "we make conclusions in section 5 .",
    "formal concept analysis  @xcite ( fca ) provides mathematical technique for deriving applied ontologies from data .",
    "fca relies on lattice and order theories  @xcite numerous applications are found in the field of machine learning , data mining , text mining and biology , see  @xcite .",
    "a formal context @xmath0 is a triple @xmath1 , where g denotes a set of objects , m is a set of attributes , and @xmath2 is a binary relation between @xmath3 and @xmath4 .    it can be interpreted in the following way : for objects in @xmath3 there exists a description in terms of attributes in @xmath4 , and relation @xmath5 reflects that an object has an attribute : @xmath6 object @xmath7 possesses  @xmath8 .",
    "an example of a formal context is provided below :        ( 10,10 ) ( 0,0)(1,0)10 ( 0,0)(1,2)5 ( 10,0)(-1,2)5    & @xmath9 & & & @xmath9 +    ( 10,10 ) ( 0,0)(1,0)10 ( 0,0)(0,1)10 ( 0,10)(1,-1)10    & @xmath9 & & @xmath9 & +    ( 20,10 ) ( 0,0)(1,0)20 ( 0,0)(0,1)10 ( 0,10)(1,0)20 ( 20,0)(0,1)10    & & @xmath9 & @xmath9 & +    ( 10,10 ) ( 0,0)(1,0)10 ( 0,0)(0,1)10 ( 0,10)(1,0)10 ( 10,0)(0,1)10    & & @xmath9 & @xmath9 & @xmath9 +    objects : attributes :    p4cmp4 cm    *  equilateral triangle *  right triange , *  rectangle , *  square ,    &    *  3 vertices , *  4 vertices , *  has a right angle , * ",
    "all sides are equal    for a given context two following mappings are considered :    * @xmath10 * @xmath11    for all @xmath12 , @xmath13    1 .",
    "@xmath14 2 .",
    "@xmath15 3 .",
    "@xmath16    mappings @xmath17 and @xmath18 , satisfying properties 1 - 3 above , define a galois connection between @xmath19 and @xmath20 , which means : @xmath21    traditionally , notation @xmath22 is used instead of @xmath17 and @xmath18 .",
    "@xmath23 stands both for @xmath24 and @xmath25 ( depending on the argument ) . for arbitrary @xmath26 ,",
    "@xmath27 @xmath28 @xmath29    _ ( formal ) concept _ is a pair @xmath30 : @xmath31 , @xmath32 , @xmath33 , @xmath34    in the example with geometric figures a pair @xmath35 is a formal concept . for a formal context @xmath36 ,",
    "@xmath37 - set of objects , @xmath27 - set of attributes , the following statements hold for operation ( @xmath38) :    1 .",
    "@xmath39 2 .",
    "@xmath40 3 .",
    "@xmath41 4 .",
    "@xmath42 and @xmath43 5 .",
    "@xmath44 6 .",
    "@xmath45    _ closure operator _ on set @xmath3 is a mapping @xmath46 , which maps every @xmath47 to _ closure _ @xmath48 , under the following conditions :    1 .",
    "@xmath49 ( _ idempotence _ ) 2 .",
    "@xmath50 ( _ extensivity _ ) 3 .",
    "@xmath51 ( _ monotonicity _ )    _ implication _ @xmath52 , where @xmath53 , takes place if @xmath54 , in other words if each object having @xmath55 also has all attributes from @xmath56 .",
    "implications comply with armstrong axioms : @xmath57 @xmath58 @xmath59",
    "one of advantages of building lattices of formal concepts is to get effective navigation from more general concepts to more specific .",
    "for example , the line diagram for context with figures from previous section is shown in fig . 1 .    [ figures_lat ]     that property could be beneficial in two ways : regression testing , system description .",
    "first of all , for the context of regression testing it implements the algorithm to determine the classes of tests that fail .",
    "it could be considered in the following way .",
    "let us define set of attributes for all tests that are being run .",
    "[ cols=\"^,^,^,^,^\",options=\"header \" , ]     implication list :    1 .   * if * iqv * then * iqp 2 .   * if * isv * then * isp 3 .   * if * iiv * then * iip 4 .   *",
    "if * = * then * ibs , not < , not > 5 .   *",
    "if * < * then * ibs , not = , not > 6 .   *",
    "if * ibs * then * not > 7 .   *",
    "if * not iqp * then * not iqv 8 .",
    "* if * not isp * then * not isv 9 .   *",
    "if * not iip * then * not iiv 10 . *",
    "if * not iiv , not isv , not iqv * then * not = , not < , not > , not ibs 11 . *",
    "if * not < , not = * then * not ibs 12 . * if * not > , iqv , iqp * then * ibs 13 . * if * not > , isv , isp * then * ibs 14 . *",
    "if * not > , iiv , iip * then * ibs 15 . * if * not > , not isv , not iqv , ibs * then * iiv 16 . *",
    "if * not > , not isv , not iiv , ibs * then * iqv 17 .",
    "* if * not > , not iiv , not iqv , ibs * then * isv 18 . *",
    "if * not > , not = , ibs * then * < 19 . * if * not > , not < , ibs * then * = 20 .",
    "* if * not ibs * then * not = , not < 21 . * if * not ibs , not < , not = , iqv , iqp * then * > 22 . * if * not ibs , not < , not = , isv , isp * then * > 23 . *",
    "if * not ibs , not < , not = , iiv , iip**then * * > 24 . *",
    "if * not ibs , not < , not = , > , not iqv , not isv**then * * iiv , iip 25 . *",
    "if * not ibs , not < , not = , > , not iiv , not iqv**then * * isv , isp 26 . *",
    "if * not ibs , not < , not = , > not iiv , not isv**then * * iqv , iqp 27 . *",
    "if * not ibs , not > , not = , not < * * then * * not iqv , not isv , not iiv",
    "the most important advantage of the proposed approach is the plug - in design .",
    "it can be easily incorporated in existing process of test - case generation . for manual test - case design",
    "one can develop test - cases in proposed system .",
    "moreover , the step of implication extraction could be postponed up to the review of obtained cases .",
    "it is important to notice that attribute exploration is a good technique to extract dependencies that could be formulated as requirements for the system under test . for the case of automatic test case generation ,",
    "extraction of dependencies could eliminate the step of test debug and replace it with review of obtained implications and the model of the system under test .",
    "also the proposed technique is applicable to verify the correctness of defining type of model , precisely wiseness of it . since big values of @xmath60 in n - wise modeling impose more test cases and it results in the growing time of test run execution .",
    "formal concept analysis provides us with useful framework for software testing tasks .",
    "it is especially beneficial in regression testing meta report construction , feature navigation , test case analysis and derivation .",
    "it unites best practices of manual development and automatic generation of test scenarios .",
    "it provides sound and complete description of the investigated domain , based on expert knowledge .",
    "the output of the system consists of two main parts : the description of typical objects in the domain , and interdependence between parameters in terms of implications .",
    "an important advantage of proposed technique is extensibility .",
    "if we add a new attribute , we can just copy the previous examples into new formal context , assuming that new attribute is absent for all objects and proceed with the procedure of attribute exploration .",
    "it holds even for the very start of procedure .",
    "we can start with non - empty set of objects and implications simultaneously .",
    "the described algorithm could be used as a standalone solution for the test case design , as well as , tool to get exiting dependencies in the domain .",
    "the obtained implications could be valuable in pairwise testing to adjust the model description .",
    "however , we should admit that the current approach is limited in terms of attribute description .",
    "for now , it is highly dependent on the boolean nature of attributes .",
    "one of the main directions of future work is to work with descriptions of general form by means of patterns structures  @xcite , an extension of fca .",
    "ganter , b. and kuznetsov , s.o . ,",
    "pattern structures and their projections . in : proc .",
    "g. stumme and h. delugach , eds . , 9th international conference on conceptual structures ( iccs 2001 ) , lecture notes in artificial intelligence ( springer ) , vol . 2120 , pp .",
    "129 - 142 , 2001 .",
    "kuznetsov , s.o . ,",
    "fitting pattern structures for knowledge discovery in big data . in : cellier , peggy ; distel , felix ; ganter , bernhard , eds . , proc . 11th international conference on formal concept analysis ( icfca 2013 ) , lecture notes in artificial intelligence ( springer ) , vol .",
    "7880 , pp .",
    "254 266 , 2013 .",
    "poelmans j. , kuznetsov s. o. , ignatov d. i. , dedenea g. , formal concept analysis in knowledge processing : a survey on models and techniques . in :",
    "expert systems with applications , vol .",
    "16 , pp . 6601 - 6623 , 2013 .",
    "moha , n. , hacene , a. m. r. , valtchev , p. , gueheneuc , y. g. ( 2008 ) .",
    "refactorings of design defects using relational concept analysis . in formal concept analysis ( pp . 289 - 304 ) .",
    "springer berlin heidelberg .",
    "tilley , t. , cole , r. , becker , p. , eklund , p. ( 2005 ) .",
    "a survey of formal concept analysis support for software engineering activities . in formal concept analysis ( pp .",
    "250 - 271 ) .",
    "springer berlin heidelberg .",
    "poshyvanyk , d. , marcus , a. ( 2007 , june ) .",
    "combining formal concept analysis with information retrieval for concept location in source code . in program comprehension , 2007 .",
    "15th ieee international conference on ( pp .",
    "37 - 48 ) ."
  ],
  "abstract_text": [
    "<S> software testing uses wide range of different tools to enhance the complicated process of defining quality of the system under test . </S>",
    "<S> formal concept analysis ( fca ) provides us with algorithms of deriving formal ontology from a set of objects and their attributes . with the use of fca </S>",
    "<S> we can considerably improve the efficiency of test case derivation . </S>",
    "<S> moreover , an fca - based machine learning system supports the analysis of regression testing results . </S>"
  ]
}