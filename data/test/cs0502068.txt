{
  "article_text": [
    "sliding block puzzles are among the simplest kind of motion planning problems .",
    "they involve moving rectangular pieces around inside a bigger rectangle with the goal of moving a specific piece to a specific target location .",
    "problems of this kind were first proved to be pspace hard in @xcite for arbitrarily large blocks , and later in @xcite ( or its journal version @xcite ) for fixed size blocks .",
    "a collection of interactive sliding puzzles can be found at    http://johnrausch.com/slidingblockpuzzles/default.htm .",
    "this paper focuses on the rush hour puzzle , featured at    http://www.puzzles.com/products/rushhour.htm ,    and quoted as `` one of the most elegant and fun sliding block puzzles to come on the market in years '' .",
    "its distinguishing characteristic is that the pieces , which are shaped as cars , can move only in their lengthwise direction , not sideways .",
    "the playing field is a parking lot of size 6 by 6 , with only one exit , and with cars of size 2 by 1 and 3 by 1 .",
    "the goal is to get a particular _ target _ car out of the lot through the exit . in @xcite , the computational complexity of ` generalized rush hour ' , played on an arbitrarily large @xmath0 by @xmath1 board , is studied .",
    "flake and baum hit upon the brilliant idea of partitioning the whole board into ` blocks ' of constant size @xmath2 by @xmath2 , which are bordered by walls of interlocking cars , leaving only one gap between adjacent blocks .",
    "figure  [ blocks ] shows four such blocks , each of size 11 by 11 ( with some cars sticking out at the corners ) .",
    "empty space is shown around the cars to make the cars stand out , which would not be present in the sliding block puzzle .",
    "the four black cars in the center , for example , are completely jammed in and unable to move .",
    "in fact we use black to denote cells that are always occupied by a car .",
    "cars that can move back and forth one step only , are black at one end , and gray or striped at the other .",
    "the latter is used for chains of cars connecting the gaps .",
    "flake and baum designed particular single block car configurations that behave as logical gates , imposing certain constraints on the 4 cars occupying the top , left , right , and bottom gaps of the block .",
    "yet these gates are subtly different in behavior from classical boolean gates , which distinguish one or more inputs from the output . in classical circuits , the state of a gate s output",
    "is uniquely determined by the state of its inputs , and wires must always connect an output of one gate to an input of another .",
    "a rush hour block instead puts constraints on the combined states of its ` ports ' .",
    "each port can be ` in ' or ` out ' .",
    "the blocks in figure  [ blocks ] forbid the top and right port from both being ` in ' , and also the left and bottom port from both being ` in ' .",
    "consider two adjacent ports , @xmath3 and @xmath4 , of two adjacent blocks , for example the right port of the top - left block and the left port of the top - right block .",
    "we can consider @xmath3 an output and @xmath4 an input .",
    "the ` in ' state of @xmath3 allows @xmath4 to be in state ` out ' , which corresponds to an active wire @xmath5 , since the top - right block now has more freedom of movement than if @xmath4 were ` in ' .    on the other hand , if we consider @xmath4 an output and @xmath3 an input , then the ` out ' state of @xmath4 forces @xmath3 to be in state ` in ' , which corresponds to an inactive wire @xmath6 .",
    "hearn and demaine , in  @xcite , abstracted the notion of constraining gates into the ` nondeterministic constraint logic ' model of computation .",
    "they propose a somewhat abstract graph formulation , as well as a more concrete circuit formulation for machines , and establish translations between the two .",
    "below i introduce a new formulation which combines the formal rigor of the graph formulation with the concreteness of the circuit formulation .",
    "i believe the few extra definitions required in this formalism are offset by the conceptual simplicity and flexibility in gate design .    basically , a machine is a circuit of gates and wires , where gates are nodes with labeled _ half - edges _ , and wires are a matching on half - edges .",
    "the half - edges take on the role of ports , and the ` in ' or ` out ' state of a port is naturally represented by directing the half - edge in or out .      a gate _",
    "type _ is a tuple @xmath7 , where @xmath8 is a set of labels , @xmath9 a set of states , @xmath10 a symmetric set of possible state transitions , and @xmath11 gives for each state @xmath12 , an orientation of all half - edges .",
    "transitions are only allowed between states that differ in the orientation of exactly one half - edge .",
    "the simplest non - trivial type is the wire gate shown in figure  [ wiretype ] , which merely forbids its two half - edges to both be inward .",
    "a more interesting type is the and gate @xmath13 whose states , transitions , and orientations are shown in figure  [ andtype ] ( a ) . the usual representation of an and gate in figure  [ andtype ] ( b ) emphasizes the role of @xmath14 as an output that can be active only when both inputs @xmath15 are , while the splitting wire emphasizes the role of @xmath15 as outputs that can be active only when input @xmath14 is .",
    "another type is the or gate shown in figure  [ ortype ] ( a ) . the usual representation in figure  [ ortype ] ( b ) arbitrarily shows @xmath15 as inputs and @xmath14 as output , but from ( a ) we can see that @xmath16 play equal roles , so a symmetric representation as in ( c ) is perhaps more appropriate .",
    "our last example is the half - or gate shown in figure  [ halfortype ] ( a ) .",
    "this differs from the or in having two states with both inputs and the output active .",
    "consider the middle state where both inputs are active but the output inactive . then to activate the output , a choice must be made of which input the output will depend on .",
    "that input then needs to remain active as long is the output is .",
    "for this reason it was called a ` latch ' in  @xcite .",
    "the next section shows the use of the half - or gate .",
    "a machine is basically a bunch of gates connected together :    a machine is an augmented graph in which all half - edges are labeled , and each node has a gate type consistent with the labels on its incident half - edges .",
    "half - edges may remain unconnected ; these are the input / output ports of the machine .",
    "a machine state orients all half - edges , consistent across paired half - edges ( one being ` in ' and the other ` out ' ) , and assigns to each node a state of its gate type consistent with the incident half - edge orientations .",
    "a very simple machine , combining two half - ors with a split gate , is shown in figure  [ ormachine ] .",
    "the fact that we matched same - labeled half - edges is done just for convenience , so that we may refer to the edges as @xmath17 , @xmath18 , or @xmath19 .",
    "we may wonder in what state the three unmatched half - edges can be , among all valid machine states . if @xmath14 is ` in ' , then the split requires both the @xmath17 and @xmath18 edges to be oriented downward to the half - ors . since one half - or must have an in - going @xmath14 , this gate will require an out - going @xmath20 or @xmath21 .",
    "this argument shows that not all three _ machine ports _ can be ` in ' .",
    "if this were the only restriction , then this machine would seem to behave as an or gate .",
    "figure  [ orcompose ] shows that this is indeed the case .",
    "to distinguish the two similarly oriented half - or states , a line is drawn indicating the input on which the output is dependent .",
    "all 7 states of the or gate can be achieved as part of states of the machine , and all 9 transitions are possible as a sequence of machine transitions .",
    "for example , from the middle top state , we can flip edge @xmath19 twice to make the left half - or dependent on @xmath20 instead of on @xmath21 , allowing us to flip @xmath18 , and next flipping @xmath17 yields the machine state at the middle left .",
    "machines thus allow us to compose new gate types from other ones .",
    "the fact that 2 half - ors and a split make an or was first noticed in an earlier version of this paper , and occurs in  @xcite as lemma 5 .",
    "their convention about edge orientation is the opposite of ours though ; a directed edge @xmath22 in their paper means that the wire from output @xmath12 to input @xmath23 is active , while in our model it means that cars have moved out at @xmath24 and in at @xmath23 , which , considered as a wire from output @xmath12 to input @xmath23 , is inactive .",
    "the main result of  @xcite is that nondeterministic constraint logic , in particular the question of whether one machine state can change into another through a series of edge flips , is pspace complete .",
    "they even strengthen this to hold for ternary ( degree 3 ) planar machines , by showing how a crossover , essentially a cross product of two wires as embedded in a plane , can be composed of ands and ors .",
    "this general result allows them to give an alternative proof to the  @xcite result that rush hour is pspace complete .",
    "they exhibit 7x7 blocks corresponding to gate types and and half - or , and then put 5x5 of these together to make superblocks for and , half - or , straight wire , and turning wire , from which arbitrary ternary planar machines may be built .",
    "in this section we show our main result that    size 2 rush hour is pspace complete .    just as  @xcite did for size 2-or-3 rush hour",
    ", we prove this result by providing the building blocks to implement any planar ternary nondeterministic constraint logic machine as an instance of size 2 rush hour .",
    "the block in figure  [ andblock ] implements 2 and gates with their outputs matched . omiting the car marked",
    "a has the effect of short - circuiting the top - right and , leaving one with a single and and one unconstrained port .",
    "the block in figure  [ andblock ] implements 2 half - or gates with their outputs matched .",
    "note that car ` c ' can be moved to the left only by locking in car ` b ' , either above or below it .",
    "this corresponds to the dependency we see in the half - or state diagram .",
    "putting the car marked a in a horizontal position has the effect of short - circuiting the top - right half - or , while leaving the top port unconstrained .    the crossover block in figure  [ intblock ]",
    "was designed before the author learned of its redundancy .",
    "still , it is rather amazing that it can be made to work in such limited space . in any case it provides us with a straight wire block , which , together with a stretched out version of the turning wire block in figure  [ blocks ] , provides us with all the necessary plumbing to connect the logical gates together .    the proof is completed by verifying the correct operation of each block , which is greatly facilitated by the coloring . in particular ,",
    "if it were possible to vacate any black colored cell , then one such cell would need to be vacated before any other , and it s easy to manually verify that this is not possible .",
    "a computer enumeration of all possible states of each block was used to verify correct operation .",
    "taking the constraint on car size to its extreme , we arrive at unit size rush hour , where every car occupies exactly one cell .",
    "an example instance is    ....",
    "-.| ....    where ` | ' denotes a vertical car , ` - ' and ` = ' denote horizontal cars , and ` . ' an empty cell .",
    "the ` = ' is the unique _",
    "target car_. the question is whether some sequence of car moves allows the target car to reach the left end of its row where it may exit the parking lot . for our example",
    "the answer is yes , as witnessed by the sequence of moves    ....   12    11    10     9     8     7     6     5     4     3     2     1     0     -.|   .-|",
    "|-|   |-|   |-|   |-|   |-|   |- .",
    "|.-   ||-   ||-   ||-   ||- ....    above each diagram is shown its distance - to - solve . in this case",
    "there is only one empty cell , which necessarily swaps places with a car on every move .",
    "this gives it the feel of a maze problem .",
    "in fact , consider    a rush hour maze is a rectangular grid of cells one of which is the starting location for the player .",
    "the player can move either horizontally to a cell he last left horizontally , or vertically to a cell he last left vertically .",
    "every cell except the start is oriented to restrict the first arrival .",
    "the exit of the maze is between two specified neighboring cells .",
    "then every unit rush hour instance with one empty cell , in which the target is the leftmost horizontal car in its row is equivalent to a rush hour maze instance .",
    "the exit is between the two leftmost cells on the target row .",
    "having the maze player move between these two cells is equivalent to moving a horizontal car between the two cells . by assumption",
    ", this must be the target car reaching the exit .",
    "having the exit of a rush hour maze between cells is important for ensuring non - triviality , since the question of whether the player can reach a given exit cell reduces to the following question :    in the directed graph that connects from each cell to neighbors of appropriate orientation , does there exist a path from the player to the exit cell ?",
    "this question can be answered with a straightforward depth - first search , thus all mazes with exit cells are rather trivial .",
    "similarly , the question of whether a specific car can be moved at all reduces to the existence of a path from the player to that car .",
    "in plain mazes , one can sometimes follow a simple rule in order to find the exit .",
    "the _ right - hand rule _ says to always take the rightmost turn , as pictured in figure  [ righthand ] .",
    "it works in any maze whose underlying graph is acyclic .    also in rush hour mazes , the right - hand rule is well defined .",
    "and indeed it is guaranteed to lead to the exit in case the state graph is acyclic .",
    "but whereas the states of a plain maze are readily apparent as the possible positions of the player , a rush hour maze can have multiple states with the same player position , such as positions 3 and 9 , or 22 and 32 , below .",
    "....    0      3      9     12     14     22     32     36     44        ---|   ---|   ---|   ---|   ---|   |---   |---   |---   ---|    ....    the right - hand rule fails to find the `` exit '' here , having pushed the target car back between moves 2232 leaving it out of reach in position 36 .",
    "the most straightforward way to get a feel for the hardness of puzzles is to study how the worst - case solution length grows with the problem size .",
    "superpolynomial growth is a prerequisite for hardness . in order to study solution length in small cases",
    ", we implemented an exhaustive state - space search program for unit rush hour , focusing on instances with a single empty cell .",
    "consider the graph @xmath25 of all possible configurations of width @xmath26 height @xmath27 and an exit on row @xmath28 . with @xmath29 possibilities for the location of the empty cell , and @xmath30 possible orientations of the cars in the other cells , @xmath25 has @xmath31 nodes , or _",
    "states_. searching @xmath25 requires knowing which states we ve visited before .",
    "storing even one bit per state is undesirable since it would put the case @xmath32 out of reach at 144 gbyte .",
    "instead we partition @xmath25 as follows .",
    "first , we remove from @xmath25 all states with no horizontal cars on the exit row . in all remaining states ,",
    "the leftmost car on the exit row is the target car . depending on whether this car in the leftmost cell , a state is either _ solved _ or _",
    "unsolved_. of the solved states , we only keep the _",
    "justsolved _ ones , where the empty cell is right next to the target car .",
    "this partitions @xmath25 into many connected components , and preserves the largest distance to solution .",
    "we can now enumerate all justsolved states , checking if we ve visited it before , and if not , search the whole connected component marking all encountered justsolved states as visited .",
    "this takes only @xmath33 bits , which amounts to a feasible 2 gbyte for @xmath32 .",
    "searching each component in a breadth first manner further helps to conserve space . the following table lists the worst - case solution length for each width and height , over all possible exit rows and states .",
    "[ cols= \" < , > , > , > , > , > , > , > , > , > \" , ]     this limited data suggests an exponential growth rate .",
    "it is interesting to analyze these worst - case solutions in detail .",
    "figure  [ sol199 ] visualizes the 199 step solution of the hardest 5x5 instance .",
    "the thick lines indicate the changing position of the empty cell .",
    "curiously , the solution can be broken down into segments each of which is either a simple path , or a path followed by a circuit , followed by the path in reverse . in the latter case ,",
    "the effect of the segment is limited to flipping the orientation of all circuit corners , which somewhat resembles the flipping of a bit .",
    "figure  [ sol732 ] visualizes the 732 step solution of the hardest 6x6 instance .    here",
    ", we can also make out ` virtual ' bit flips on a larger scale . comparing the states at distances 674 and 268",
    ", we see that they differ in only the 4 corners of a ` virtual ' circuit , taking no less than 406 steps to complete .",
    "there s little hope of exhaustively searching all 7x7 instances using our approach , as it would take @xmath34 bits , or 16 tbyte .",
    "but already in the 6x6 case , a great deal of complexity is apparent .",
    "what is far from apparent though , is how to harness this complexity in constructing particular circuits , such as binary counters that would prove the existence of exponential length solutions , or even the and and or gates that provide a basis for nondeterministic constraint logic .",
    "this leaves us with many questions about the complexity of unit rush hour .",
    "while size 2 rush hour was shown to be pspace complete , the complexity of unit rush hour eludes us .",
    "it s not clear if limiting the number of empty spaces to one reduces the complexity of unit rush hour .",
    "empirical results suggest that the hardest instances do in fact have only one empty space .",
    "finally , it is possible that unit rush hour becomes more complex if we can designate some of the cars as being neither horizontal nor vertical but plain immobile , which is equivalent to saying the parking lot can have arbitrarily shaped walls . let s call this generalization _ walled _ unit rush hour . obviously , rush hour maze is no harder than unit rush hour , which in turn is no harder than walled unit rush hour . but this leaves us with a big open        j.e .",
    "hopcroft , j.t .",
    "schwartz , and m. sharir . on the complexity of motion planning for multiple independent objects : pspace - hardness of the warehouseman s problem. _ international journal of robotics research _ ,",
    "3(4):7688 , 1984 .",
    "robert a. hearn and erik d. demaine .",
    "the nondeterministic constraint logic model of computation : reductions and applications . in proceedings of the 29th international colloquium on automata , languages and programming ( icalp 2002 ) , lecture notes in computer science , volume 2380 , malaga , spain , july 8 - 13 , 2002 , pages 401 - 413 .",
    "robert a. hearn and erik d. demaine .",
    "pspace - completeness of sliding - block puzzles and other problems through the nondeterministic constraint logic model of computation .",
    "_ theoretical computer science _ , to appear in 2004"
  ],
  "abstract_text": [
    "<S> rush hour logic was introduced in @xcite as a model of computation inspired by the `` rush hour '' toy puzzle , in which cars can move horizontally or vertically within a parking lot . </S>",
    "<S> the authors show how the model supports polynomial space computation , using certain car configurations as building blocks to construct boolean circuits for a cpu and memory . </S>",
    "<S> they consider the use of cars of length 3 crucial to their construction , and conjecture that cars of size 2 only , which we ll call _ size 2 rush hour _ , do not support polynomial space computation . </S>",
    "<S> we settle this conjecture by showing that the required building blocks are constructible in size 2 rush hour . </S>",
    "<S> furthermore , we consider unit rush hour , which was hitherto believed to be trivial , show its relation to maze puzzles , and provide empirical support for its hardness . </S>"
  ]
}