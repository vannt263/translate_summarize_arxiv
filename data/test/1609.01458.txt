{
  "article_text": [
    "we investigate distributed supervisory control of concurrent discrete - event systems .",
    "supervisory control theory of discrete - event systems modeled as finite automata was introduced by ramadge and wonham  @xcite and studied by many others .",
    "it aims to guarantee that the control specifications consisting of safety and of nonblockingness are satisfied in the controlled ( closed - loop ) system .",
    "safety means that the language of the closed - loop system is included in a prescribed specification , and nonblockingness means that all controlled behaviors can always be completed to a marked controlled behavior .",
    "supervisory control is realized by a supervisor that runs in parallel with the system and imposes the specification by disabling , at each state , some of the controllable events in a feedback manner . since only controllable specifications can be achieved ,",
    "one of the key issues is the computation of the supremal controllable sublanguage of the specification , from which the supervisor can be constructed .",
    "supervisory control theory is well developed for monolithic systems , i.e. , systems where the plant is modeled as a single generator .",
    "however , most of the current complex engineering systems can be abstracted as a composition of many components .",
    "systems that model technological systems typically consist of small generators that communicate with each other in a synchronous  @xcite or asynchronous  @xcite way .",
    "such systems are often called modular ( or concurrent or distributed ) discrete - event systems .",
    "it is known that to compute the overall monolithic plant for such a system can be unrealistic because the number of states of a modular system grows exponentially with respect to the number of components .",
    "this limits the applicability of the monolithic supervisory control synthesis to relatively small systems . on the other hand ,",
    "the purely decentralized control consisting of an independent construction of a supervisor for each subsystem is only applicable for a local ( decomposable ) specification .",
    "specifically , let @xmath0 and @xmath1 be two systems over the respective alphabets @xmath2 and @xmath3 modeled as finite generators forming the overall plant @xmath4 , the computation of which we want to avoid , and let @xmath5 denote a specification .",
    "there exists a monolithic supervisor for the monolithic plant @xmath4 if and only if the specification is controllable with respect to the plant .",
    "however , to avoid the computation of the monolithic plant @xmath4 , the naive approach to compute supervisors for each subsystem separately does not work in general . to demonstrate this ,",
    "assume that we compute supervisors @xmath6 such that @xmath7 , where @xmath8 denotes the projection of the specification @xmath9 to the alphabet of the generator @xmath10 .",
    "then , it can still be the case that @xmath11 .",
    "the problem here is that the specification is not necessarily decomposable .",
    "recall that a languages @xmath12 is decomposable ( or separable ) with respect to alphabets @xmath2 and @xmath3 if @xmath13 , where @xmath14 is a natural projection ( see more details below ) .",
    "if a language is not decomposable , it would be natural to search for some `` maximal '' decomposable sublanguage .",
    "unfortunately , this is not algorithmically possible  @xcite .    to deal with this problem",
    ", we introduced the notion of _ conditional decomposability_. conditional decomposability of a language @xmath12 with respect to alphabets @xmath2 and @xmath3 requires to find another alphabet @xmath15 such that the language @xmath12 is decomposable with respect to @xmath16 and @xmath17 , i.e. , @xmath18 , see more details below .",
    "the difference between decomposability and conditional decomposability is that every language can be made conditionally decomposable , which overcomes the undecidable problem of finding a nonempty decomposable sublanguage discussed above . in other words",
    ", we can always find an alphabet @xmath15 such that the language becomes conditionally decomposable .",
    "indeed , one could take @xmath19 , but the aim is to find a reasonably small such alphabet .",
    "although to find a minimal alphabet is np - hard  @xcite , a polynomial - time algorithm to find an acceptable alphabet is described in  @xcite .",
    "the observation that conditional decomposability is always possible leads us to the formulation of the following problem that we investigate in this paper .",
    "[ problem1 ] let @xmath0 and @xmath1 be generators over the alphabets @xmath2 and @xmath3 , respectively .",
    "assume that a specification @xmath20 and its prefix - closure @xmath21 are conditionally decomposable with respect to @xmath2 , @xmath3 , and @xmath15 , for some alphabet @xmath15 such that @xmath22 .",
    "let @xmath23 be a coordinator that ensures the necessary communication between the systems @xmath0 and @xmath1 .",
    "the aim is to determine nonblocking supervisors @xmath24 and @xmath25 such that the supervised distributed system satisfies @xmath26 ) \\parallel l_m(s_{2}/ [ g_2 \\| g_k ] ) = k        & & \\text { and } & &        l(s_{1}/ [ g_1 \\| g_k ] ) \\parallel l(s_{2}/ [ g_2 \\| g_k ] ) = \\overline{k}\\ , ,      \\end{aligned}\\ ] ] i.e. , it fulfills the specification and the supervisors are nonconflicting .",
    "in other words , the question is whether it is possible to distribute the monolithic ( global ) supervisor with help of a coordinator in such a way that there exist nonblocking and nonconflicting supervisors @xmath27 and @xmath28 such that the supervised distributed closed - loop system satisfies safety and nonblockingness .    note that we restrict ourselves to the case , where the coordinator @xmath29 does not affect the behavior of the whole system .",
    "the case where @xmath29 can influence the system , i.e. , the new plant is @xmath30 , is left for the future investigation .",
    "however , it should be pointed out that one has to be careful with this modification , since the coordinator could influence the system in such a way that it forbids some uncontrollable events , which may be physically impossible .",
    "a possible solution would be to consider only such coordinators @xmath29 that are controllable with respect to ( some projection of ) @xmath4 .    in this paper , we investigate problem  [ problem1 ] .",
    "we provide a necessary and sufficient condition for the existence of a solution , which results in a decision procedure and in an algorithm to compute the solution , if it exists . as usual , if the solution does not exist , we make use of the coordination control methods to construct an acceptable sub - specification for which a solution exists , measured with respect to the solution provided in the coordination control framework . moreover , we relax the coordination control framework so that the main results of the framework still hold , but the presentation is simplified and potentially larger solutions can be achieved .",
    "however , we do not claim that the use of the coordination control framework is the best here , we only show that it is possible to use it here .",
    "it is an interesting research topic whether other methods could be used to obtain a better solution .",
    "related work that could be useful to achieve this includes , but is not limited to , @xcite .",
    "the paper is organized as follows . in section  [ sec : preliminaries ] , the necessary notation is introduced and the basic elements of supervisory control theory are recalled . in section",
    "[ sec : existenceofsolution ] , we provide necessary and sufficient conditions under which the solution of the problem exists . in section  [ sec : relaxation ] , we recall the basic coordination control framework and introduce its relaxed variant . in section",
    "[ sec : comparison ] , we compare problem  [ problem1 ] with the ( relaxed ) coordination control problem . in section  [ sec : app ] , we make use of the relaxed coordination control to find a reasonable sub - specification for which a solution exists if a solution for the specification does not exist . an industrial example is provided in section  [ sec : mri ] .",
    "we discuss only the full - observation case here .",
    "the approach can be extended to partial observations using either the notion of ( conditional ) normality of  @xcite or the notion of ( conditional ) relative observability of  @xcite .",
    "let @xmath31 denote a finite nonempty set of events ( an _ alphabet _ ) , and let @xmath32 denote the set of all finite words over @xmath31 .",
    "the empty word is denoted by @xmath33 .",
    "a _ language _ over @xmath31 is a subset of @xmath32 .",
    "the prefix closure of a language @xmath12 over @xmath31 is the set @xmath34 .",
    "a language @xmath12 is _ prefix - closed _ if @xmath35 . for more details ,",
    "the reader is referred to  @xcite .",
    "a _ generator _ is a structure @xmath36 , where @xmath37 is the finite set of states , @xmath31 is the finite nonempty set of events , @xmath38 is the partial transition function , @xmath39 is the initial state , and @xmath40 is the set of marked states .",
    "the transition function @xmath41 can be extended to the domain @xmath42 in the usual way .",
    "the behavior of @xmath43 is described in terms of languages .",
    "the language _ generated _ by @xmath43 is the set @xmath44 , and the language _ marked _ by @xmath43 is the set @xmath45 .",
    "obviously , @xmath46 .    for @xmath47 , a _",
    "( natural ) projection _ is a mapping @xmath48 , which deletes from any word all letters that belong to @xmath49 .",
    "formally , it is a homomorphism defined by @xmath50 , for @xmath51 in @xmath49 , and @xmath52 , for @xmath51 in @xmath53 .",
    "it is extended ( as a homomorphism for concatenation ) from letters to words by induction .",
    "the _ inverse image _ of @xmath54 is denoted by @xmath55 . for three alphabets @xmath56 ,",
    "@xmath57 , @xmath58 , subsets of @xmath31 , the notation @xmath59 denotes the projection from @xmath60 to @xmath61 .",
    "if @xmath62 , we simplify the notation to @xmath63 . similarly , the notation @xmath64 stands for the projection from @xmath32 to @xmath65 .",
    "the projection of a generator @xmath43 , denoted by @xmath66 , is a generator whose behavior satisfies @xmath67 and @xmath68 .",
    "it is defined using the standard subset construction , cf .",
    "@xcite .",
    "the synchronous product of languages @xmath69 over @xmath2 and @xmath70 over @xmath3 is the language @xmath71 , where @xmath72 is a projection , @xmath73 .",
    "a definition for generators can be found in  @xcite . for generators @xmath0 and @xmath1 , @xmath74 and @xmath75 .",
    "languages @xmath9 and @xmath12 are _ synchronously nonconflicting _ if @xmath76 .",
    "we recall the basic elements of supervisory control theory .",
    "a _ controlled generator _ over an alphabet @xmath31 is a structure @xmath77 , where @xmath43 is a generator over the alphabet @xmath31 , @xmath78 is the set of _ controllable events _ , @xmath79 is the set of _ uncontrollable events _ , and @xmath80 is the _ set of control patterns_. a _ supervisor _ for the controlled generator @xmath77 is a map @xmath81 .",
    "the _ closed - loop system _ associated with the controlled generator @xmath77 and the supervisor @xmath82 is defined as the smallest language @xmath83 such that @xmath84 , and if @xmath85 , @xmath86 , and @xmath87 , then @xmath88 . the marked language of the closed - loop system is defined as @xmath89 , where @xmath90 is a specification .",
    "the intuition is that the supervisor disables some of the controllable transitions of @xmath43 , but never an uncontrollable transition , and marks in accordance with the specification .",
    "if @xmath91 , then the supervisor @xmath82 is called _",
    "nonblocking_.    in the automata framework , where a supervisor @xmath82 has a finite representation as a generator ,",
    "basically it is the generator @xmath43 with some of the controllable events disabled , the closed - loop system is a synchronous product of the supervisor and the plant .",
    "thus , we can write the closed - loop system as @xmath92 . moreover , the supervisor keeps the information about the marked states , i.e. , we have that @xmath93 .",
    "the supervisor is then nonblocking if @xmath94 .",
    "control objectives of supervisory control are defined using a specification @xmath9 .",
    "the goal of supervisory control is to find a nonblocking supervisor @xmath82 such that @xmath95 . in the monolithic case ,",
    "such a supervisor exists if and only if @xmath9 is _ controllable _ with respect to @xmath96 and @xmath97 ( i.e. , @xmath98 ) , cf .",
    "@xcite .",
    "if the specification fails to satisfy controllability , controllable sublanguages of the specification are considered instead .",
    "let @xmath99 denote the supremal controllable sublanguage of @xmath9 with respect to @xmath96 and @xmath97 , which always exists and is equal to the union of all controllable sublanguages of @xmath9 , cf .",
    "@xcite .",
    "the projection @xmath100 , with @xmath47 , is an _",
    "@xmath12-observer _ for @xmath101 if , for all @xmath102 and @xmath103 , @xmath104 is a prefix of @xmath105 implies that there exists @xmath106 such that @xmath107 and @xmath108 , see  @xcite . this property is well known and widely used in supervisory control of hierarchical and distributed discrete - event systems , and , as mentioned in  @xcite , also in compositional verification  @xcite and modular synthesis  @xcite .",
    "if the projection does not satisfy the property , the co - domain of the projection can be extended so that it is satisfied .",
    "although the computation of such a minimal extension is np - hard , there exists a polynomial - time algorithm that finds an acceptable extension  @xcite .",
    "more information can be found in  @xcite .",
    "a language @xmath9 is _ conditionally decomposable _ with respect to alphabets @xmath2 , @xmath3 , and @xmath15 , where @xmath109 , if @xmath110 where @xmath111 is a projection , for @xmath73 .",
    "the definition is extended to more alphabets in a natural way .    for simplicity , we formulated problem  [ problem1 ] only for two subsystems .",
    "however , it is clear how to extend it to @xmath112 subsystems .",
    "it should perhaps be pointed out that for @xmath112 , the set @xmath15 contains all shared events @xmath113 .",
    "we define the coordinator @xmath29 as the parallel composition of projections .",
    "it is a folklore in automata theory that , in the worst case , the computation of a projected generator can be of exponential size with respect to the number of states of the original generator . however , it is known that if the projection satisfies the observer property , then the projected generator is smaller than the original generator  @xcite .",
    "therefore , we suggest the following steps to compute the alphabet @xmath15 and the coordinator @xmath29 :    1 .",
    "let @xmath114 be the set of all shared events of the generators @xmath0 and @xmath1 .",
    "2 .   extend the alphabet @xmath15 so that @xmath9 and @xmath21 are conditionally decomposable with respect to @xmath2 , @xmath3 , and @xmath15 , cf .",
    "@xcite for a polynomial algorithm .",
    "3 .   if the computation of @xmath29 in the following step is not possible ( e.g. , because of the state explosion ) , extend the alphabet @xmath15 so that the projection @xmath115 is an @xmath116-observer , for @xmath73 , cf .",
    "4 .   define the coordinator @xmath29 as @xmath23 , where @xmath117 .",
    "we now provide necessary and sufficient conditions for the existence of a solution for problem  [ problem1 ] .",
    "[ thm : char ] consider the setting of problem  [ problem1 ] .",
    "there are nonblocking and nonconflicting supervisors @xmath24 and @xmath25 such that the distributed closed - loop system satisfies @xmath118 ) \\parallel l_m(s_{2}/[g_2 \\| g_k ] ) = k      $ ] if and only if @xmath119 , @xmath120 , and @xmath27 and @xmath28 are nonblocking and nonconflicting supervisors with respect to @xmath121 and @xmath122 , respectively .",
    "the second part of the theorem gives us the following equations with variable languages @xmath123 and @xmath124 : @xmath125    let @xmath126 denote the infimal _ prefix - closed _ controllable superlanguage of @xmath9 with respect to @xmath12 , cf .",
    ". then we immediately have the following .    [ lem1 ] consider the setting of problem  [ problem1 ] .",
    "if the specification @xmath9 is prefix - closed , then there exists a solution of problem  [ problem1 ] if and only if the languages @xmath127 and @xmath128 satisfy equations  ( [ sol1 ] ) .",
    "the infimal controllable superlanguage is prefix - closed and it is not possible to compute the infimal non - prefix - closed controllable superlanguage , since it does not always exist .",
    "thus , the previous lemma can not be directly used for non - prefix - closed languages .",
    "however , we show that it is surprisingly sufficient to verify whether there exists a solution for the prefix - closure of the specification .",
    "[ thmmain ] consider the setting of problem  [ problem1 ] .",
    "there exists a solution for specification @xmath9 if and only if there exists a solution for its prefix - closure @xmath21 .",
    "in other words , assuming that @xmath9 and @xmath21 are conditionally decomposable , it is sufficient to check whether there exists a solution for the prefix - closure @xmath21 of the specification @xmath9 using proposition  [ lem1 ] . by theorem  [ thmmain ] , this implies a solution for the specification @xmath9 , which can actually be derived from the solution for @xmath21 .",
    "if a solution of problem  [ problem1 ] does not exist , we make use of the coordination control framework to obtain an acceptable sublanguage of the specification for which a solution exists .",
    "coordination control is based on the concept of conditional independence of probability theory , which allows for coordinated systems not only in discrete - event systems , but also in linear , stochastic , and hybrid systems , see  @xcite .",
    "we first recall the original coordination control framework and then relax it so that it admits more and larger solutions , cf .",
    "example  [ ex1 ] .",
    "we briefly recall the original coordination control framework developed in  @xcite .",
    "the notation is that of  @xcite .",
    "[ problem : origcontrolsynthesis ] consider generators @xmath0 and @xmath1 over the alphabets @xmath2 and @xmath3 , resp . , and a generator @xmath29 ( a _ coordinator _ ) over an alphabet @xmath15 , where @xmath129 .",
    "assume that a specification @xmath130 and its prefix - closure @xmath21 are conditionally decomposable with respect to @xmath2 , @xmath3 , and @xmath15 .",
    "the aim is to determine nonblocking supervisors @xmath27 , @xmath28 , and @xmath131 such that @xmath132 , @xmath133)\\subseteq p_{i+k}(k)$ ] , for @xmath73 , and the closed - loop system with the coordinator satisfies @xmath134 ) \\parallel l_m(s_2/ [ g_2 \\| ( s_k / g_k ) ] ) = k$ ] .",
    "although the coordinator @xmath29 in the statement of problem  [ problem : origcontrolsynthesis ] is a general automaton , we suggested to construct it in the same way as in problem  [ problem1 ] .",
    "therefore , we may assume that @xmath23 .",
    "in what follows , we use the notation @xmath135 to denote the set of locally uncontrollable events of the alphabet @xmath56 .",
    "[ def : origconditionalcontrollability ] let @xmath0 and @xmath1 be generators over @xmath2 and @xmath3 , respectively , and let @xmath29 be a coordinator over @xmath15 .",
    "a language @xmath136 is _ conditionally controllable _ for generators @xmath0 , @xmath1 , @xmath29 and uncontrollable alphabets @xmath137 , @xmath138 , @xmath139 if ( i ) @xmath140 is controllable with respect to @xmath141 and @xmath139 and ( ii ) @xmath142 is controllable with respect to @xmath143 and @xmath144 , where @xmath145 , for @xmath73 .    the main existential result follows .    consider the setting of problem  [ problem : origcontrolsynthesis ] .",
    "there exist nonblocking supervisors @xmath27 , @xmath28 , and @xmath131 such that @xmath146 ) \\parallel l_m(s_2/[g_2 \\| ( s_k / g_k ) ] ) =   k$ ] if and only if the specification @xmath9 is conditionally controllable with respect to generators @xmath0 , @xmath1 , @xmath29 and uncontrollable alphabets @xmath137 , @xmath138 , @xmath139 .    similarly as in the monolithic supervisory control , if the specification fails to be conditionally controllable , the supremal conditionally controllable sublanguage is computed .",
    "it always exists  @xcite .",
    "consider the setting of problem  [ problem : origcontrolsynthesis ] and define the languages @xmath147 for @xmath73 .",
    "if @xmath148 and @xmath149 are nonconflicting and @xmath150 is controllable with respect to @xmath141 and @xmath139 , then @xmath151 is the supremal conditionally controllable sublanguage of @xmath9 .",
    "otherwise , we compute a new supervisor @xmath152 denoted @xmath153 .",
    "this gives the following result , which is not stated in  @xcite , but is in a more general form stated in  @xcite .",
    "[ thm4 ] consider the setting of problem  [ problem : origcontrolsynthesis ] and the languages defined above .",
    "if @xmath154 and @xmath155 are synchronously nonconflicting ( e.g. , prefix - closed ) for @xmath73 , then @xmath156 is the supremal conditionally controllable sublanguage of @xmath9 .      in this section , we relax the coordination control problem .",
    "proofs of the results presented in this section can be found in the technical report  @xcite . unlike the original approach ,",
    "the supervisor for the coordinator is not computed and , thus , it is not included in the closed - loop system .",
    "we comment on this below the definition .",
    "[ problem : relaxed ] consider generators @xmath0 and @xmath1 over the alphabets @xmath2 and @xmath3 , respectively .",
    "let @xmath15 be an alphabet such that @xmath22 .",
    "a generator @xmath29 over the alphabet @xmath15 is called a coordinator .",
    "assume that a specification @xmath130 and its prefix - closure @xmath21 are conditionally decomposable with respect to @xmath2 , @xmath3 , and @xmath15 .",
    "the aim is to determine nonblocking supervisors @xmath27 and @xmath28 such that @xmath157)\\subseteq p_{i+k}(k)$ ] , for @xmath73 , and the closed - loop system satisfies @xmath158 ) \\parallel l_m(s_2/ [ g_2 \\| g_k ] ) = k$ ] .",
    "the construction of a coordinator remains unchanged , compared to the original framework .",
    "the difference between the original and the relaxed problem is that the supervisor @xmath131 and , hence , the closed - loop system @xmath159 for the coordinator part of the specification is not computed .",
    "the original motivation to include the supervisor @xmath131 was the anti - monotonicity of the basic supervisory control operator ( the supremal controllable sublanguage ) .",
    "indeed , if the specification is fixed , then making the plant language smaller results in increasing permissiveness of the supervisors given by the supremal controllable sublanguages .",
    "however , it turns out that decreasing the plant @xmath160 for the local supervisors by replacing @xmath29 with , in general , a smaller closed - loop system @xmath159 does not change the permissiveness of the local closed - loop systems @xmath161 $ ] .",
    "this is because of the transitivity of controllability , since the closed - loop @xmath159 is always controllable with respect to @xmath29 .",
    "this means that a language @xmath162 is controllable with respect to @xmath163 if and only if it is controllable with respect to @xmath164 .",
    "for this reason , the supervisor for the coordinator does not help and is not used in the relaxed framework .",
    "[ def : conditionalcontrollability ] let @xmath0 and @xmath1 be generators over the alphabets @xmath2 and @xmath3 , respectively , and let @xmath29 be a coordinator over the alphabet @xmath15 . a language @xmath136 is _ relaxed conditionally controllable _ for generators @xmath0 , @xmath1 , @xmath29 if the projected specification @xmath142 is controllable with respect to @xmath165 and @xmath144 , where @xmath166 , for @xmath73 .    by definition ,",
    "any solution of the coordination control problem is also a solution of the relaxed coordination control problem .",
    "the opposite does not hold as demonstrated in the following simple example .",
    "[ ex1 ] let @xmath167 and @xmath168 , where the set of controllable events is @xmath169 .",
    "let the specification @xmath9 be the composition of @xmath170 and @xmath171 .",
    "then @xmath9 it is conditionally decomposable with respect to @xmath172 , @xmath173 , and @xmath174 .",
    "notice that @xmath175 and @xmath176 .",
    "therefore , @xmath140 is _ not _ controllable with respect to @xmath141 , thus it is _ not _ conditionally controllable and , hence , not a solution of the original coordination control problem .",
    "moreover , there does not exist a nonempty controllable sublanguage of @xmath140 that is controllable with respect to @xmath141 . on the other hand , @xmath177 and @xmath178 ,",
    "hence @xmath142 is controllable with respect to @xmath179 , for @xmath73 .",
    "since nothing is required for @xmath140 in the relaxed framework , @xmath9 is a solution of the relaxed coordination control problem .",
    "the advantage of the relaxed framework is thus not only a simplification of the notation , but also the fact that there exist solutions in the relaxed framework that can not be achieved in the original coordination control framework .",
    "however , we should mention that the relaxed framework also restricts the set of potential solutions , i.e. , there exist solutions of problem  [ problem1 ] that can not be achieved in the relaxed framework .",
    "this will be clarified in section  [ sec : comparison ] .",
    "therefore , further relaxations of this framework would be of interest .",
    "we now show that the main results of the original framework hold in the relaxed framework , too .",
    "[ th : controlsynthesissafety ] consider the setting of problem  [ problem : relaxed ] . there",
    "exist nonblocking supervisors @xmath27 and @xmath28 such that the closed - loop system satisfies @xmath180 ) \\parallel l_m(s_2/[g_2 \\| g_k ] ) = k$ ] if and only if the specification @xmath9 is relaxed conditionally controllable for generators @xmath0 , @xmath1 , @xmath29 .",
    "if the specification can not be achieved as the resulting behavior of the coordinated system according to theorem  [ th : controlsynthesissafety ] , we describe a procedure to compute the maximal sublanguage of the specification that satisfies both these conditions .",
    "we use the notation @xmath181 to denote the supremal relaxed conditionally controllable sublanguage of @xmath9 with respect to plant @xmath182 and the sets of uncontrollable events @xmath137 , @xmath138 , @xmath139 , which exists and equals to the union of all relaxed conditionally controllable sublanguages of the language @xmath9 .",
    "furthermore , we define the supremal controllable languages for the local plants combined with the coordinator . consider the setting of problem  [ problem : relaxed ] and define the languages @xmath183 where @xmath184 denotes the supremal controllable sublanguage of @xmath9 with respect to @xmath12 and @xmath97 .",
    "we now generalize the sufficient conditions for a distributed computation of the supremal conditionally controllable sublanguage from the original to the relaxed framework .",
    "the sufficient conditions are formulated in terms of controllability of the composition of local supervisors projected to the coordinator alphabet .",
    "the first main constructive result of the relaxed coordination control framework to guarantee relaxed conditional controllability in a maximally permissive way is stated below .",
    "[ thm2b ] consider the setting of problem  [ problem : relaxed ] and the languages defined in  ( [ eqcnr ] ) .",
    "if @xmath185 and @xmath186 are synchronously nonconflicting and @xmath187 is controllable with respect to @xmath141 and @xmath139 , then @xmath188 , for @xmath182 .    the question remains what happens if the intersection of the projections is not controllable as required in theorem  [ thm2b ] .",
    "we believed in the past that a solution to the coordination control problem ( in terms of a conditionally controllable sublanguage ) can only be computed as a product of languages in some special cases , where sufficient conditions such as those presented in  @xcite hold .",
    "however , due to the presented relaxation , it becomes clear that such a solution can always be computed in a distributed way for prefix - closed specifications .",
    "namely , it suffices to make the resulting language @xmath189 controllable with respect to @xmath141 , as required in theorem  [ thm2b ] , by computing a supervisor for it as the following result suggests .",
    "[ prop2 ] consider the setting of problem  [ problem : relaxed ] and the languages defined in  ( [ eqcnr ] ) .",
    "let @xmath190 denote the language @xmath191 . if the languages @xmath192 and @xmath155 are synchronously nonconflicting ( e.g. , prefix - closed ) for @xmath73 , then @xmath193 is a relaxed conditionally controllable sublanguage of @xmath9 .",
    "interestingly , we rediscover this way the role of a supervisor for the coordinator that is postponed to the end of the coordination control synthesis and it is used only when needed , i.e. , when controllability of @xmath189 with respect to @xmath141 does not hold .",
    "moreover , the supervisor @xmath153 can be computed in a distributed way , i.e. , we can compute @xmath194 . their composition ( here intersection )",
    "is then never computed and they operate locally in conjunction with local supervisors @xmath192 , @xmath73 .    compared to theorem  [ thm4 ] , proposition  [ prop2 ] only states that the result is a relaxed conditionally controllable sublanguage of the specification .",
    "we do not know whether the supremality also holds here .",
    "nevertheless , we should point out that the languages @xmath192 , @xmath73 , actually form a solution of problem  [ problem1 ] as discuss in section  [ sec : comparison ] below , even though their parallel composition is not necessarily relaxed conditionally controllable . from this point of view , to decrease the language by the composition with an additional coordinator , @xmath153 , is not relevant for us .",
    "this demonstrates the already mentioned drawback of the ( relaxed ) coordination control framework  the restriction of the set of possible solutions , compared to the set of possible solutions for problem  [ problem1 ] ; see more details in section  [ sec : comparison ] below .    to compare the solutions of problem  [ problem1 ] and those of ( relaxed ) coordination control problem ,",
    "we need the following .",
    "[ thm_inc_opt_sol ] consider the setting of problem  [ problem : relaxed ] and the languages defined in  ( [ supccn ] ) , ( [ eqcnr ] ) .",
    "then the language @xmath195 , i.e. , the supremal relaxed conditionally controllable sublanguage is included in our distributed solution .",
    "if @xmath185 and @xmath186 are synchronously nonconflicting ( e.g. , prefix - closed ) , then the parallel composition is controllable , i.e. , @xmath196 .",
    "we now discuss conditions that ensures optimality .",
    "the proofs are similar to those in  @xcite . to this end",
    ", we use the notions of output control consistency ( occ ) , cf .",
    "@xcite , or local control consistency ( lcc ) , cf .",
    "@xcite .",
    "[ thm_opt_cond ] consider the setting of problem  [ problem : relaxed ] and the languages defined in  ( [ eqcnr ] ) . if the projection @xmath64 is an @xmath197-observer and occ ( lcc ) for @xmath197 , @xmath73 , then the parallel composition of the supervisors contains the optimal solution , i.e. , @xmath198 .",
    "note that we assume that @xmath64 is an @xmath199-observer and occ ( lcc ) for @xmath199 .",
    "however , we do not want to compute the language @xmath199 . instead",
    ", we can assume that ( i ) @xmath200 is an @xmath201-observer and ( ii ) @xmath64 is occ ( lcc ) for the language @xmath202 .",
    "these can be ensured by an appropriate extension of the alphabet @xmath15 , cf .",
    "@xcite and @xcite , respectively .",
    "here we highlight the difference between problem  [ problem1 ] and the relaxed coordination control problem . on one hand , we show the drawback of relaxed coordination control that prevents it from fully solving problem  [ problem1 ] . on the other hand , we appreciate it since it can be used to find a solution .",
    "we now point out the main difference between the two problems .",
    "let @xmath203 be a plant , and let @xmath204 denote a specification as in problem  [ problem1 ] .",
    "consider the computation of supervisors @xmath185 and @xmath186 as defined in ( [ eqcnr ] ) .",
    "for simplicity , we assume that the languages under consideration are prefix - closed .",
    "assume that the parallel composition @xmath205 is not relaxed conditionally controllable .",
    "this is not an unrealistic assumption .",
    "then these two languages do not form a solution in the relaxed coordination control framework . however ,",
    "note that ( a generator for ) @xmath192 is a supervisor for the plant @xmath160 , since @xmath192 is controllable with respect to @xmath160 by definition .",
    "let @xmath206 .",
    "then @xmath207 is conditionally decomposable and controllable with respect to the original plant , and @xmath208 which means that @xmath192 , @xmath73 , is a solution of problem  [ problem1 ] that can not be achieved in the relaxed coordination control framework , since @xmath207 is not relaxed conditionally controllable by definition .",
    "( here we slightly abuse the notation and use @xmath192 to denote both the generator and the language of that generator , depending on the context . )",
    "the inclusion @xmath209 is required in the definition of the relaxed coordination control problem .",
    "but it does not hold in general , therefore we do not assume the inclusion to be satisfied in problem  [ problem1 ] .",
    "this is the main difference between problem  [ problem1 ] and the ( relaxed ) coordination control problem .",
    "the following example shows that there exist solutions that can not be achieved in the relaxed framework .",
    "let @xmath0 and @xmath1 be plants as shown in fig .  [ figexl1plants ] , and let @xmath9 denote the specification with the generator depicted in fig .",
    "[ figexl1spec ] .     and",
    "@xmath1,title=\"fig : \" ]   and @xmath1,title=\"fig : \" ]        let @xmath210 .",
    "notice that @xmath9 is conditionally decomposable .",
    "the coordinator @xmath29 is depicted in fig .",
    "[ figexl1coord ] .    ]",
    "then @xmath211 and @xmath212 and it is not hard to see that the language @xmath213 is not controllable with respect to @xmath214 , hence @xmath9 is not relaxed conditionally controllable .",
    "if we use the relaxed coordination control framework to compute supervisors , we obtain @xmath148 and @xmath149 depicted in fig .",
    "[ figexl1ccsups ] .",
    "and @xmath149 computed in the relaxed coordination control framework , title=\"fig : \" ]   and @xmath149 computed in the relaxed coordination control framework , title=\"fig : \" ]    this is not the optimal solution , i.e. , their parallel composition is not equal to @xmath9 . on the other hand ,",
    "we can obtain the specification if we consider infimal superlanguages of @xmath142 , namely for @xmath215 .",
    "then we obtain the supervisors depicted in fig .",
    "[ figexl1infopt ] that form the optimal solution .     and",
    "@xmath28 for the problem obtained by considering infimal superlanguages , title=\"fig : \" ]   and @xmath28 for the problem obtained by considering infimal superlanguages , title=\"fig : \" ]    however , if the solution of problem  [ problem1 ] does not exist , the relaxed coordination control framework allows us to compute a sublanguage of the specification for which a solution exists .",
    "the other advantage of this is that we can compare the obtained solution with the supremal relaxed conditionally controllable sublanguage of the specification ; see below .",
    "consider the setting of problem  [ problem1 ] .",
    "theorem  [ th : controlsynthesissafety ] says that if @xmath9 is relaxed conditionally controllable , then there exist nonblocking and nonconflicting supervisors @xmath24 and @xmath25 such that @xmath118 ) \\parallel l_m(s_{2}/[g_2 \\| g_k ] ) = k\\ , .",
    "$ ] recall the languages @xmath185 and @xmath186 defined above in ( [ eqcnr ] ) . by definition",
    ", we immediately have that @xmath216 i.e. , it is potentially a solution of problem  [ problem1 ] .",
    "we now show that it is actually a solution and compare it with the optimal solution of the relaxed framework .",
    "the following is basically theorem  [ thm_inc_opt_sol ] .",
    "[ optimality ] consider the setting of problem  [ problem1 ] and the languages defined in  ( [ supccn ] ) , ( [ eqcnr ] ) .",
    "if the supervisors @xmath185 and @xmath186 are synchronously nonconflicting ( e.g. , prefix - closed ) , then their parallel composition is controllable .",
    "if the languages ( supervisors ) in the previous theorem are conflicting , we still have a solution for the global plant @xmath4 , namely , the language @xmath217 , where @xmath218 denotes the nonblocking generator of @xmath219 .",
    "then @xmath220 is a supervisor such that @xmath221 and @xmath222 , so it can be considered as a solution of the monolithic case with the supervisor @xmath220 .",
    "however , our aim is not to compute the parallel composition of supervisors @xmath27 and @xmath28 to obtain a single huge supervisor , but rather to distribute the supervision to local plants .",
    "taking a look at the previous theorem , we can notice that @xmath223 .",
    "however , if the supervisors @xmath27 and @xmath28 are conflicting , we only have that @xmath224 , i.e. , the overall supervised closed - loop system is blocking . to solve nonblockingness here , we can use the language @xmath225 where the projection @xmath226 is a @xmath154-observer , @xmath73 , which serves as a coordinator for nonconflictingness .",
    "the following can be proved similarly as in  @xcite , based on the results of  @xcite .",
    "[ thm22 ] consider the notation of problem  [ problem1 ] and the languages defined in  ( [ eqcnr ] ) and  ( [ eq2 ] ) .",
    "then the language @xmath227 is controllable with respect to the plant @xmath228 .",
    "we can now summarize the method as an algorithm .",
    "[ alg ] consider the above .    1",
    ".   check whether problem  [ problem1 ] has a solution using proposition  [ lem1 ] .",
    "if so , stop ; otherwise , continue",
    ". 2 .   compute @xmath185 and @xmath186 as defined in ( [ eqcnr ] ) .",
    "3 .   let @xmath229 and @xmath230 .",
    "4 .   extend the alphabet @xmath53 so that the projection @xmath226 is both a @xmath185- and a @xmath186-observer .",
    "5 .   define the coordinator @xmath231 as the minimal nonblocking generator such that @xmath232 from  ( [ eq2 ] ) .",
    "see more comments on this algorithm in  @xcite .",
    "to demonstrate our approach on an industrial example , we consider the model and specification of an mri scanner presented by theunissen  @xcite .",
    "the plant consists of four parts @xmath233 where each part is again a composition of several smaller parts .",
    "however , we do not go into these details and consider these parts as the four subsystems that form the plant .",
    "the specification consists of the parts @xmath234 which do not exactly correspond the the four parts of the plant .",
    "for all computations , we used the c++ library ` libfaudes `  @xcite .",
    "we now observe the following .",
    "\\(1 ) vreq is a specification that concerns only the plant vaxis .",
    "this is a simple case with one plant , hence a monolithic approach was used .",
    "the specification has 12 states and 44 transitions , the plant has 15 states and 50 transitions , and the computed supervisor has 15 states and 36 transitions .",
    "\\(2 ) similarly , hreq is a specification that concerns only the plant haxis .",
    "again , the monolithic supervisor was computed .",
    "the specification has 112 states and 736 transitions , the plant has 128 states and 1002 transitions , and the computed supervisor consists of 80 states and 320 transitions .",
    "\\(3 ) the specification hvreq concerns the plant @xmath235 .",
    "the specification consists of 7 states and 35 transitions , the plant hvnormal consists of 1 state and 1 transition ( the other two parts of the plant are mentioned above ) .",
    "we computed a coordinator consisting of 160 states and 1287 transitions and three supervisors with 516 , 1132 and 283 states and 3395 , 10298 and 1692 transitions , respectively .",
    "it was verified that their parallel composition is nonblocking and corresponds to the supremal controllable sublanguage of the specification hvreq with respect to the plant @xmath236 .",
    "\\(4 ) the specification uireq concerns the whole plant @xmath237 .",
    "therefore it is the most interesting part to demonstrate our approach .",
    "let us mention that uireq consists of 256 states and 2336 transitions , and ui consists of 2 states and 15 transitions ( the rest is described above ) .",
    "we computed a coordinator with 4 states and 30 transitions , and four supervisors with 432 , 768 , 12 , and 96 states and 3488 , 6652 , 74 and 808 transitions , respectively .",
    "the overall minimal monolithic supervisor for the whole system would consist of 68672 states and 616000 transitions .",
    "we have verified that our solution is an optimal solution to problem  [ problem1 ] .",
    "we have verified that it forms a solution in both coordination control architectures discussed in the paper . due to the modeling skills of the modeler and the nature of the model",
    ", there were no problems with blockingness at any step of the computation .",
    "all the computed supervisors are nonblocking and nonconflicting , thus no coordinator for nonblockingness was needed .",
    "the results are formulated for general , non - prefix - closed languages , for which synchronous nonconflictingness is required .",
    "one could find it an issue , but these assumptions are trivially satisfied for , e.g. , prefix - closed languages . to verify whether a synchronous product ( of an unspecified number ) of generators is synchronously",
    "nonconflicting is pspace - complete  @xcite .",
    "it is only the worst case .",
    "some optimization techniques exist , e.g.  @xcite , or a maximal nonconflicting sublanguage can be computed  @xcite .",
    "the good news of pspace - completeness is that it is computable in polynomial space .",
    "all concepts and results can be extended from the generic case @xmath238 in a straightforward manner . however , with an increasing number of components it is likely that the coordinator will , in some situations , grow , e.g. , many events will have to be included into the coordinator alphabet to make the global specification conditionally decomposable .",
    "therefore we have recently proposed a multilevel coordination control architecture  @xcite .",
    "the approach of this paper can easily be implemented in such a multilevel structure .",
    "a challenging and important problem is to find a convenient alphabet @xmath15 , from which the coordinator is computed .",
    "a natural step is to take a minimal such alphabet .",
    "there are two issues with this choice .",
    "first , to compute the minimal @xmath15 is np - hard , second , there exist examples showing evidence that the use of a minimal alphabet results in no solutions ( in empty supervisors ) .",
    "this means that we need to find a larger alphabet for which a solution can be obtained .",
    "this is always possible , since @xmath15 can be taken as the global alphabet .",
    "however , the aim is to characterize a reasonable choice of the alphabet that would provide nonempty solutions .    in the future",
    ", we plan to take into account communication delays and losses and to consider more complicated forms of communications among local controllers .",
    "the research was supported by rvo 67985840 , by mmt in project music ( grant lh13012 ) , by gar in project ga15 - 02532s and by the dfg in project diamond ( emmy noether grant kr  4381/1 - 1 ) .",
    "lemma  [ thm : char ] consider the setting of problem  [ problem1 ] .",
    "there exist nonblocking and nonconflicting supervisors @xmath24 and @xmath25 such that the distributed closed - loop system satisfies @xmath118 ) \\|",
    "l_m(s_{2}/[g_2 \\| g_k ] ) = k      $ ] if and only if @xmath239 , @xmath240 , and @xmath27 and @xmath28 are nonblocking and nonconflicting supervisors with respect to @xmath121 and @xmath122 , respectively .",
    "proposition  [ lem1 ] consider the setting of problem  [ problem1 ] .",
    "if the specification @xmath9 is prefix - closed , then there exists a solution of problem  [ problem1 ] if and only if the languages @xmath127 and @xmath128 satisfy equations  ( [ sol1 ] ) .",
    "( if ) assume that @xmath251 and @xmath252 . since @xmath253 and @xmath254 are prefix - closed , hence nonblocking and nonconflicting , and controllable with respect to the corresponding plants , that is , they are supervisors for those plants , the implication follows from lemma  [ thm : char ] .",
    "( only if ) assume that there is a solution of problem  [ problem1 ] . by lemma",
    "[ thm : char ] , there exist supervisors @xmath27 and @xmath28 satisfying equations ( [ sol1 ] ) . since @xmath6 is a supervisor , its language ( for simplicity also denoted by @xmath6 ) is controllable with respect to @xmath160 .",
    "moreover , @xmath6 contains @xmath142 , hence @xmath255 , for @xmath73 .",
    "then , @xmath256 thus , @xmath253 and @xmath254 satisfy equations ( [ sol1 ] ) .",
    "let @xmath27 and @xmath28 denote the solution for specification @xmath9 .",
    "if @xmath239 , then @xmath257 by nonconflictingness and nonblockingness of the supervisors . similarly for the other equation",
    "thus , @xmath258 and @xmath259 form a solution for @xmath21 .",
    "let @xmath260 and @xmath261 denote the generators of the solution for the prefix - closed language @xmath21 , that is , @xmath262 for @xmath73 , we now define the marking on @xmath260 and @xmath261 as follows : @xmath263 note that @xmath264 , since @xmath265 .    we show that @xmath266 is nonblocking , that is , @xmath267 . to this end , let @xmath268 .",
    "if @xmath269 , then @xmath270 by definition .",
    "if @xmath271 , then there exists a word @xmath272 such that @xmath273 .",
    "hence @xmath274 .",
    "thus , @xmath275 .    moreover , @xmath276 is controllable with respect to the plant @xmath164 , because , by assumption , @xmath277 is .",
    "thus , @xmath266 is a marking nonblocking supervisor for @xmath160 .",
    "furthermore , we have that @xmath278"
  ],
  "abstract_text": [
    "<S> in this paper , we discuss a supervisory control problem of modular discrete - event systems that allows for a distributed computation of supervisors . we provide a characterization and an algorithm to compute the supervisors . if the specification does not satisfy the properties , we make use of a relaxation of coordination control to compute a sublanguage of the specification for which the supervisors can be computed in a distributed way . </S>"
  ]
}