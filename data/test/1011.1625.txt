{
  "article_text": [
    "gdel s completeness theorem ( for first - order classical logic ) is one of the most important theorems in logic .",
    "it is concerned with a duality ( in a naive sense ) between proofs and models : for every proposition @xmath0 ,    _ either@xmath4or@xmath5 .",
    "_    here @xmath1 ranges over the set of proofs , @xmath2 over the class of models , and @xmath6 reads `` @xmath1 is a proof of @xmath0 . ''",
    "one can imagine a debate on a general proposition @xmath0 , where player tries to justify @xmath0 by giving a proof and opponent tries to refute it by giving a countermodel .",
    "the completeness theorem states that exactly one of them wins .",
    "actually , the theorem gives us far more insights than stated .",
    "-12 pt**finite proofs vs infinite models:**a very crucial point is that proofs are always finite , while models can be of arbitrary cardinality .",
    "completeness thus implies compactness and lwenheim - skolem theorems , leading to constructions of various nonstandard models . 2 .",
    "-12 pt**nondeterministic principles : * * proof of gdel s completeness theorem relies on a strong nondeterministic principle such as knig s or zorn s lemma , in contrast to the trivial completeness theorem with respect to the class of boolean algebras .",
    "-12 pt**matching of two inductions:**__provability _ _ is defined by induction on proofs , while _ truth _ by induction on formulas .",
    "the two inductions are somehow ascribed to the essence of syntax and semantics , respectively , and the completeness theorem states that they do match .    unlike the real debate",
    ", however , there is no interaction between proofs and models in gdel s theorem . a more interactive account of completeness is given by girard s _ ludics _ ( @xcite ; see @xcite for good expositions ) .",
    "ludics is a variant of game semantics , which has the following prominent features .    1",
    ".   -12 pt**monism : * *  proofs and models are not distinguished by their ontological status , but by their structural properties .",
    "the common objects are called _",
    "designs_. 2 .",
    "-12 pt**existentialism : * *  _ behaviours _",
    "( semantic types ) are built from designs , in contrast to the ordinary game semantics ( hyland - ong @xcite ) where one begins with the definition of arenas ( types ) and then proceeds to strategies ( proofs ) .",
    "-12 pt**normalization as interaction : * *  designs ( hence proofs and models ) interact together via normalization .",
    "it induces an _ orthogonality relation _ between designs in such a way that @xmath7 holds if the normalization of @xmath1 applied to @xmath2 converges .",
    "a behaviour @xmath0 is defined to be a set of designs which is equivalent to its biorthogonal ( @xmath8 ) .    in this",
    "setting , girard shows a completeness theorem for proofs @xcite , which roughly claims that any `` winning '' design in a behaviour is a proof of it . in view of the interactive definition of behaviour",
    ", it can be rephrased as follows : for every ( logical ) behaviour @xmath0 and every ( proof - like ) design @xmath1 ,    _ either@xmath6or@xmath9 and @xmath2 defeats @xmath1 ) .",
    "_    here , `` @xmath10 '' means @xmath11 , and `` @xmath2 defeats @xmath1 '' means @xmath12 .",
    "hence the right disjunct is equivalent to @xmath13 .",
    "namely , @xmath14 if and only if @xmath6 , that is a typical full completeness statement .",
    "notice that @xmath10 no more entails absolute unprovability of @xmath0 ( it is rather relativized to each @xmath1 ) , and there is a real interaction between proofs and models .    actually , girard s original ludics is so limited that it corresponds to a polarized fragment of multiplicative additive linear logic , which is too weak to be a stand - alone logical system . as a consequence",
    ", one does not really observe an opposition between finite proofs and infinite models , since one can always assume that the countermodel @xmath2 is finite ( related to the finite model property for @xmath15 @xcite ) . indeed , proving the above completeness is easy once _ internal completeness _ ( a form of completeness which does not refer to any proof system @xcite ) for each logical connective has been established .    in this paper , we employ a term syntax for designs introduced in @xcite , and extend girard s ludics with duplication ( contraction ) and its dual : universal nondeterminism ( see @xcite and references therein ) .",
    "although our term approach disregards some interesting locativity - related phenomena ( normalization as merging of orders and different sorts of tensors @xcite ) , our calculus is easier to manipulate and closer to the tradition of @xmath16 , @xmath17 , @xmath18 , @xmath19-calculi and other more recent syntaxes for focalized classical logic ( @xcite ) .",
    "our resulting framework is as strong as a polarized fragment of linear logic with exponentials ( @xcite ; see also @xcite ) , which is in turn as strong as a constructive version of classical propositional logic .",
    "we then prove the completeness theorem above in this extended setting . here",
    ", universal nondeterminism is needed on the model side to well interact with duplicative designs on the proof side .",
    "this is comparable to the need of  noninnocent \" ( and sometimes even nondeterministic ) opponents to have full completeness with respect to deterministic , but nonlinear player s strategies . unlike before",
    ", we can not anymore assume the finiteness of models , since they are not sufficient to refute infinite proof attempts .",
    "as a result , our proof is nontrivial , even after the internal completeness theorem has been proved .",
    "indeed , our proof exhibits a striking similarity with schtte s proof of gdel s completeness theorem @xcite .",
    "given a ( proof - like ) design @xmath1 which is not a proof of @xmath0 , we explicitly construct a countermodel @xmath2 in @xmath20 which defeats @xmath1 , essentially using knig s lemma .",
    "soundness is proved by induction on proofs , while completeness is by induction on types .",
    "thus our theorem gives matching of two inductions .",
    "finally , it implies an analogue of lwenheim - skolem theorem , ( and also the finite model property for the linear fragment ) , which well illustrates the opposition between finite proofs and infinite models with arbitrary cardinality .    in game semantics ,",
    "one finds a number of similar full completeness results .",
    "however , the connection with gdel s completeness seems less conspicuous than ours .",
    "typically , innocent strategies in hyland - ong games most naturally correspond to _ bhm trees _ , which can be _ infinite _ ( @xcite ) .",
    "thus , in contrast to our result , one has to impose finiteness / compactness on strategies in an external way , in order to have a correspondence with _",
    "finite _ @xmath16-terms .",
    "although this is also the case in @xcite , we show that such a finiteness assumption is not needed in ludics : infinitary proof attempts are always defeated by infinitary models .",
    "the paper is organized as follows . in section [ s - prelim ]",
    "we describe the syntax of ( untyped ) designs ; in section [ s - behaviour ] we move to a typed setting and introduce behaviours ( semantic types ) . in section",
    "[ s - full ] we introduce our proof system and prove completeness for proofs .",
    "finally , section [ s - conclusion ] concludes the paper .",
    "in this paper , we employ a process calculus notation for designs , inspired by the close relationship between ludics and linear @xmath19-calculus @xcite .",
    "precisely , we extend the syntax introduced by the second author @xcite adding a ( universal ) nondeterministic choice operator @xmath21 .    although @xcite mainly deals with linear designs , its syntax is designed to deal with nonlinear ones without any difficulty . however , in order to obtain _ completeness _ , we also need to incorporate the dual of nonlinearity , that is _ universal nondeterminism _",
    "@xcite . it is reminiscent of differential linear logic @xcite , which has nondeterministic sum as the dual of contraction ; the duality is essential for the separation property @xcite ( see also @xcite for separation of bhm trees ) .",
    "a similar situation also arises in hyland - ong game semantics @xcite , where _ nonlinear _ strategies for player may contain a play in which opponent behaves _ noninnocently _ ; opponent s noninnocence is again essential for full completeness .",
    "designs are built over a given _ signature _ @xmath22 , where @xmath23 is a set of _ names _ @xmath24 and @xmath25 is a function which assigns to each name @xmath26 its _ arity _ @xmath27 .",
    "let @xmath28 be a countable set of variables @xmath29 .    over a fixed signature @xmath30 , a _ positive action",
    "_ is @xmath31 with @xmath32 , and a _ negative action _ is @xmath33 where variables @xmath34 are distinct and @xmath35 .",
    "we often abbreviate a sequence of variables @xmath36 by @xmath37 . in the sequel",
    ", we always assume that an expression of the form @xmath38 stands for a negative action , @xmath39 and @xmath37 is a sequence consisting of @xmath40 distinct variables . if @xmath26 is a nullary name we simply write @xmath26 for the negative action on name @xmath26 .",
    "[ designs ] for a fixed signature @xmath30 , the class of * positive designs * @xmath41 , that of * predesigns * @xmath42 , and that of * negative designs * @xmath43 are _ coinductively _ defined as follows : @xmath44 where :    1 .",
    "@xmath45 ; 2 .",
    "@xmath46 and the formal sum @xmath47 has @xmath48-many components @xmath49 ; 3 .",
    "@xmath50 is built from a set @xmath51 of predesigns with @xmath52 an arbitrary index set .",
    "we denote arbitrary designs by @xmath53 .",
    "the set of * designs * , consisting of all positive , negative and predesigns , is denoted by @xmath54 .",
    "any subterm @xmath55 of @xmath56 is equivalently called a _ subdesign _ of @xmath56 .",
    "notice that designs are _ coinductively _ defined objects .",
    "in particular , infinitary designs are included in our syntax , just as in the original ludics @xcite .",
    "it is strictly necessary , since we want to express both proof attempts and countermodels as designs , both of which tend to be infinite .",
    "informally , designs may be regarded as infinitary @xmath16-terms with _ named _ applications , _ named _ and _ superimposed _ abstractions and a _ universal nondeterministic _ choice operator @xmath21 .",
    "more specifically , a predesign @xmath57 can be thought of as iterated application @xmath58 of an @xmath40-ary name @xmath32 . in the sequel",
    ", we may abbreviate @xmath59 by @xmath60 . if @xmath26 is a nullary name we simply write @xmath61 .",
    "on the other hand , a negative design of the form @xmath62 can be thought of as iterated abstraction @xmath63 of an @xmath40-ary name @xmath32 .",
    "a family @xmath64 of abstractions indexed by @xmath23 is then superimposed to form a negative design @xmath47 .",
    "since @xmath47 is built from a family indexed by @xmath23 , there can not be any overlapping of name in the sum .",
    "each @xmath62 is called an ( additive ) * component*.    a predesign is called a * cut * if it is of the form @xmath65 .",
    "otherwise , it is of the form @xmath66 and called a * head normal form*. as we shall see in detail in subsection [ normalization subsection ] , cuts have substantial computational significance in our setting : in fact a cut @xmath67 can be _ reduced _ to another design @xmath68 $ ] .",
    "namely , when the application is of name @xmath69 , one picks up the component @xmath70 from the family @xmath64 .",
    "notice that the arities of @xmath71 and @xmath72 always agree .",
    "then , one applies a simultaneous  @xmath73-reduction \" @xmath74 $ ] .",
    "the _ head variable _ @xmath75 in an head normal form @xmath66 plays the same role as a pointer in a strategy does in hyland - ong games and an address ( or locus ) in girard s ludics . on the other hand , a variable @xmath75 occurring in a bracket as in @xmath76 @xmath77 , @xmath75",
    ", @xmath78 does not correspond to a pointer nor address .",
    "rather , it corresponds to an identity axiom ( initial sequent ) in sequent calculus , and for this reason is called an * identity*. if a negative design @xmath79 simply consists of a variable @xmath75 , then @xmath79 is itself an identity",
    ".    the positive design @xmath80 denotes _ divergence _ ( or _ partiality _ ) of the computation , in the sense we will make more precise in the next subsection .",
    "we also use @xmath80 to encode partial sums . given a set @xmath81 of negative actions with distinct names @xmath82 , we write @xmath83 to denote the negative design @xmath84 , where @xmath85 if @xmath86 , and @xmath87 otherwise .",
    "we also use an informal notation @xmath88 to denote @xmath83 .",
    "so far , the syntax we are describing is essentially the same as the one introduced in @xcite .",
    "a novelty of this paper is the nondeterministic conjunction operator @xmath21 , which allows us to build a positive design @xmath50 from a set @xmath51 of predesigns with @xmath52 an arbitrary index set .",
    "each @xmath89 is called a * conjunct * of @xmath1 .",
    "we write @xmath90 ( * daimon * ) for the empty conjunction @xmath91 .",
    "this design plays an essential role in ludics , since it is used to define the concept of orthogonality .",
    "although @xmath90 is usually given as a primitive ( see @xcite ) , we have found it convenient and natural to identify ( or rather encode ) @xmath90 with the empty conjunction .",
    "as we shall see , its computational meaning exactly corresponds to the usual one : @xmath90 marks the _ termination _ of a computation .",
    "put in another way , our nondeterministic conjunction can be seen as a generalization of the termination mark .",
    "a design @xmath56 may contain free and bound variables .",
    "an occurrence of subterm @xmath62 _ binds _ the free variables @xmath37 in @xmath92 . variables which are not under the scope of the binder @xmath93 are _",
    "free_. we denote by @xmath94 the set of free variables occurring in @xmath56 . as in @xmath16-calculus",
    ", we would like to identify two designs which are _",
    "@xmath95-equivalent _ up to renaming of bound variables .",
    "but it is more subtle than usual , since we also would like to identify , @xmath96 with @xmath97 whenever @xmath98 and @xmath99 are @xmath95-equivalent . to enforce these requirements simultaneously and hereditarily",
    ", we define an equivalence relation by coinduction .    by _ renaming _ we mean a function @xmath100 .",
    "we write @xmath101 for the identity renaming , and @xmath102 $ ] for the renaming that agrees with @xmath103 except that @xmath102(x)=z$ ] .",
    "the set of renamings is denoted by @xmath104 .",
    "[ d - alpha ] a binary relation @xmath105 is called a * design equivalence * if for any @xmath106 such that @xmath107 , one of the following holds :    1 .",
    "@xmath108 ; 2 .",
    "@xmath109 , @xmath110 and we have : a.   for any @xmath111 there is @xmath112 such that @xmath113 , b.   for any @xmath112 there is @xmath111 such that @xmath113 ; 3 .",
    "@xmath114 , @xmath115 and @xmath116 for every @xmath117 ; 4 .",
    "@xmath118 , @xmath119 and @xmath120 ; 5 .",
    "@xmath121 , @xmath122 and @xmath123 ) { \\ ; \\cr\\ ; } ( q_a , \\rho[\\vec{z}_a/\\vec{y}_a])$ ] for every @xmath32 and some vector @xmath124 of fresh variables .",
    "we say that two designs @xmath56 and @xmath55 are _ equivalent _ if there is a design equivalence @xmath125 such that @xmath126 .",
    "see @xcite for further details .",
    "henceforth we _ always _ identify two designs @xmath56 and @xmath55 , and write @xmath127 by abuse of notation , if they are equivalent in the above sense .",
    "the following lemma is a straightforward extension of lemma 2.6 of @xcite .",
    "it makes it easier to prove equivalence of two designs ( just as the `` bisimulation up - to '' technique in concurrency theory makes it easier to prove bisimilarity of two processes ) .",
    "[ l - equiv ] let @xmath125 be a binary relation on designs such that if @xmath128 then one of the following holds :    1 .",
    "@xmath108 ; 2 .",
    "@xmath109 , @xmath110 , and we have : 1 .   for any @xmath111 there is @xmath112 such that @xmath129 , 2 .   for any @xmath112 there is @xmath111 such that @xmath129 ; 3 .",
    "@xmath114 , @xmath115 and @xmath130 for every @xmath117 ; 4 .",
    "@xmath131 ; 5 .",
    "@xmath132 , @xmath133 and @xmath134 for every @xmath32 .",
    "if @xmath135 , then @xmath56 and @xmath55 are equivalent .    as a notational convention , a unary conjunction @xmath136 is simply written as @xmath98",
    "this allows us to treat a predesign as a positive design .",
    "we also write :    1 .",
    "@xmath137 if @xmath1 is a conjunction and @xmath98 is a conjunct of @xmath1 ; 2 .",
    "@xmath138 if _ either _ @xmath139 , _ or _ both @xmath1 and @xmath140 are conjunctions and for all @xmath141 , @xmath137 .",
    "thus @xmath138 indicates that @xmath1 has more conjuncts than @xmath140 unless @xmath139 .",
    "we also extend the conjunction operator to positive designs and abstractions as follows .",
    "[ conj binary ]    1 .   as for positive designs ,",
    "we set @xmath142 2 .   as for abstractions , negative designs of the form @xmath47 , observe that since we are working up to renaming of bound variables , it is no loss of generality to assume that in any pair @xmath47 , @xmath143 , one has @xmath144 for every @xmath145 .",
    "we set : @xmath146    observe the following :    1 .",
    "the set of positive designs forms a semilattice with respect to @xmath147 and @xmath148 .",
    "2 .   @xmath149 for any positive design @xmath1",
    ".    the previous definition can be naturally generalized to arbitrary sets as follows :    [ conj extension ]    1 .",
    "given a set @xmath150 of positive designs , we define the positive design @xmath151 as follows :",
    "if @xmath152 , we set @xmath153 .",
    "2 .   if @xmath154 , we set @xmath155 .",
    "otherwise , @xmath150 is a nonempty set of conjunctions and we set : @xmath156 2 .   given a set @xmath150 of abstractions , we define the abstraction @xmath151 as : @xmath157 in particular , if @xmath152 then @xmath158 .",
    "notice that @xmath159 , as long as @xmath56 ranges over positive designs or abstractions .",
    "a design @xmath56 is said :    1 .   * total * , if @xmath160 ; 2 .",
    "* closed * , if @xmath56 has no occurrence of free variable ; 3 .",
    "* linear * ( or * affine * , more precisely ) , if for any subdesign of the form @xmath161 , the sets @xmath162 ,  , @xmath163 are pairwise disjoint ; 4 .   * deterministic * , if in any occurrence of subdesign @xmath164 , @xmath52 is either empty ( we have @xmath90 ) or a singleton ( we have a predesign ) .",
    "* cut - free * , if it does not contain a cut as a subdesign ; 6 .   * identity - free * , if it does not contain an identity as subdesign .",
    "we remark that the notion of design introduced in @xcite exactly corresponds in our terminology to that of deterministic design .",
    "furthermore , considering the specific signature @xmath165 given below , we can also express in our setting girard s original notion of design :    let us consider the signature @xmath166 where :    1 .",
    "@xmath167 consists of finite subsets of @xmath168 ; 2 .",
    "@xmath169 is the function that maps a finite subset @xmath170 to its cardinality @xmath171 .",
    "girard s designs correspond to total , linear , deterministic , cut - free and identity - free designs which have a finite number of free variables over the signature @xmath165 .",
    "see @xcite for more details .",
    "ludics is an interactive theory .",
    "this means that designs , which subsume both proofs and models , interact together via normalization , and types ( behaviours ) are defined by the induced orthogonality relation ( section [ s - behaviour ] ) .",
    "several ways to normalize designs have been considered in the literature : abstract machines @xcite , abstract merging of orders @xcite , and terms reduction @xcite . here",
    "we extend the last solution @xcite . as in untyped @xmath16-calculus , normalization is not necessarily terminating , but in our setting a new difficulty arises through the presence of the operator @xmath21 .",
    "we define the normal forms in two steps , first giving a _",
    "nondeterministic _ reduction rule which finds head normal forms whenever possible , and then expanding it corecursively . as usual , let @xmath172 $ ] denote the design obtained by the simultaneous and capture - free substitution of negative designs @xmath173 for @xmath174 in @xmath56",
    ".    given positive designs @xmath175 , we write @xmath176 if @xmath177 and @xmath178 $ ] .",
    "we denote by @xmath179 the transitive closure , and by @xmath180 the reflexive transitive closure of @xmath181 .    given two binary relations @xmath182 on designs , we write @xmath183 to denote the relation given by their composition @xmath184 for instance , we write @xmath185 if there exists @xmath140 such that @xmath186 and @xmath187 .",
    "we now give examples of reductions and some remarks .",
    "1 .   @xmath188 .",
    "@xmath189 ( recall that @xmath190 stands for @xmath191 by our conventions on partial sums ) .",
    "3 .   let @xmath192 .",
    "we have @xmath193 and @xmath194 .",
    "4 .   for @xmath195 ,",
    "let us consider @xmath196 .",
    "we then have an infinite reduction sequence @xmath197 since @xmath198 and the latter design reduces to @xmath199    =    n \\;|\\ ; { { \\overline{a}}}\\langle n \\rangle = p$ ] .",
    "let @xmath200 .",
    "we have the following reduction : @xmath201 \\ = \\",
    "b(t).q \\;|\\ ; { { \\overline{b}}}\\langle w   \\rangle \\ , \\wedge \\ , z|\\overline{c } \\langle m[b(t).q / y ] \\rangle.\\ ] ] we therefore have @xmath202 and @xmath203 \\rangle$ ] .",
    "since @xmath204 is a cut , we have : @xmath205 \\rangle \\ { -\\!\\!\\!\\!\\!\\rightharpoonup}\\ q[w / t].\\ ] ] 6 .",
    "the special designs @xmath90 and @xmath80 do not reduce to anything ( as we will see , they are normal forms ) . 7 .   by its definition ,",
    "our reduction is not ",
    "closed under context \" if @xmath176 and @xmath1 ( resp .",
    "@xmath140 ) occurs as a subdesign of @xmath56 ( resp .",
    "@xmath55 ) , nothing ensures that @xmath206 .",
    "for instance a negative design ( or an head normal form ) having an occurrence of cut as subdesign does not reduces to anything . to expand the reduction  under context",
    "\" we will use definition [ normal form ] .",
    "notice that any _ closed _ positive design @xmath1 has one of the following forms : @xmath90 , @xmath80 and @xmath207 , where @xmath89 are cuts .",
    "the conjunction then reduces to another closed positive design .",
    "hence any sequence of reductions starting from @xmath1 either terminates with @xmath90 or @xmath80 or it diverges . by _ stipulating _ that the normal form of @xmath1 in case of divergence is @xmath80 , we obtain a dichotomy between @xmath90 and @xmath80 : the normal form of a closed positive design is either @xmath90 or @xmath80 .",
    "this leads us to the following definition of normal form :    [ normal form ] the * normal form function * @xmath208 is defined by corecursion as follows : @xmath209    we observe that when @xmath1 is a closed positive design , we have @xmath210 precisely when _ all _ reduction sequences from @xmath1 are finite and terminate with @xmath90 ; thus our nondeterminism is _ universal _ rather than existential .",
    "this , however , does not mean that the set @xmath211 is finite ; even when it is infinite , it may happen that @xmath210 .",
    "the following facts are easily observed :    [ l - facts ]    1 .   if @xmath212 , @xmath213 and @xmath214 , then @xmath215 .",
    "2 .   @xmath216 implies @xmath217 .",
    "furthermore , if @xmath1 is a predesign , then @xmath176 implies @xmath218 .",
    "3 .   @xmath219 , for any set @xmath150 of positive designs .",
    "notice that the first statement means that the composed relation @xmath220 is equivalent to @xmath181 as far as total designs are concerned .    in @xcite",
    ", it is illustrated how words and deterministic finite automata are represented by ( deterministic ) designs in ludics .",
    "we may extend the idea to trees and finite tree automata in presence of nondeterminism .",
    "rather than describing it in full detail , we will only give an example which illustrates the power of nondeterminism to express ( topdown ) finite tree automata .",
    "we consider the set of _ finite trees _",
    "labelled with @xmath221 which are at most binary branching .",
    "it is defined by the following grammar : @xmath222 here , @xmath223 represents a tree with the root labelled by @xmath26 and with two subtrees @xmath224 . in particular , @xmath225 represents a leaf labelled by @xmath26 .",
    "we simply write @xmath26 in this case .",
    "suppose that the signature @xmath226 contains a unary name @xmath227 , binary names @xmath221 and a nullary name @xmath228 .",
    "we write @xmath229 for the positive action @xmath230 .",
    "we abbreviate @xmath231 by @xmath232 , so that we have @xmath233.\\ ] ]    each tree is then represented by a deterministic linear negative design as follows : @xmath234    now consider the positive design @xmath235 $ ] defined by the following equations : @xmath236 & : = & x|{\\mathord{\\downarrow}}\\langle a(x , y ) .",
    "q_1[x]\\wedge q_0[y]\\ ; + \\ ;        b(x , y ) .",
    "q_2[x]\\wedge q_2[y]\\rangle , \\\\",
    "q_1[x ] & : = & x|{\\mathord{\\downarrow}}\\langle b(x , y ) .",
    "q_2[x]\\wedge q_2[y]\\rangle , \\\\",
    "q_2[x ] & : = & x|{\\mathord{\\downarrow}}\\langle \\epsilon.\\maltese\\rangle.\\end{aligned}\\ ] ] this design @xmath140 works as an automata accepting all trees of the form @xmath237 .    indeed , given @xmath238 , it works nondeterministically as follows : @xmath239 \\\\   & \\rotatebox[origin = c]{200}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*\\ni$ } & & \\rotatebox[origin = c]{340}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*\\ni$ } \\\\   q_1[b^\\star ] & & & & q_0[a(b , b)^\\star]\\\\   \\rotatebox[origin = c]{270}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*\\ni$ } & & & \\rotatebox[origin = c]{200}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*\\ni$ } & & \\rotatebox[origin = c]{340}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*\\ni$ } \\\\",
    "q_2[\\epsilon^\\star ] & & \\qquad\\qquad q_1[b^\\star ] & & & & q_0[b^\\star ] \\\\",
    "\\rotatebox[origin = c]{270}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*$ } & & \\qquad\\qquad \\rotatebox[origin = c]{270}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*\\ni$ } & & & & \\rotatebox[origin = c]{270}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*\\ni$ } \\\\ \\maltese & & \\qquad\\qquad q_2[\\epsilon^\\star ] & & & & q_2[\\epsilon^\\star ] \\\\   &   & \\qquad\\qquad \\rotatebox[origin = c]{270}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*$ } & & & & \\rotatebox[origin = c]{270}{${-\\!\\!\\!\\!\\!\\rightharpoonup}^*$ } \\\\   &   & \\qquad\\qquad \\maltese & & & & \\maltese \\end{array}\\ ] ]",
    "hence we conclude @xmath240 ] \\ ! ] } = \\maltese$ ] , @xmath140 `` accepts '' the tree @xmath238 .      in this subsection ,",
    "we prove one of the fundamental properties of designs which we will need later :    [ t - assoc ] let @xmath56 be a design and @xmath241 be negative designs .",
    "we have : @xmath242 { \\rrbracket}= { \\llbracket } { \\llbracket}d { \\rrbracket } [ { \\llbracket}n_1 { \\rrbracket}/y_1 , \\ldots , { \\llbracket}n_n { \\rrbracket}/y_n ] { \\rrbracket}.\\ ] ]    associativity corresponds to a weak form of the church - rosser property : the normal form is the same even if we do not follow the head reduction strategy . in this paper",
    "we are not concerned with the full church - rosser property , and leave it as an open question .",
    "the proof consists of several stages and it can be skipped at first reading .    to prove associativity , first notice that a simultaneous substitution @xmath243 $ ] can be turned into a sequential one of the form @xmath244\\cdots[n_n / z_n]$ ] by renaming @xmath245 by fresh variables @xmath246 as follows : @xmath247 = d[z_1/y_1 , \\dots , z_n / y_n][n_1/z_1]\\cdots[n_n / z_n].\\ ] ] moreover , we have : @xmath248\\!]}[\\ ; { [ \\ ! [ n_1 ] \\!]}/y_1 , \\dots , { [ \\ ! [ n_n ] \\!]}/y_n ] = { [ \\ ! [ \\ ; d[z_1/y_1 , \\dots , z_n / y_n]\\ ;   ] \\!]}[\\ ; { [ \\ ! [ n_1 ] \\!]}/z_1]\\cdots [ \\ ; { [ \\ ! [ n_n ] \\!]}/z_n].\\ ] ] this allows us to work with sequential substitutions rather than simultaneous ones .",
    "we define a binary relation @xmath249 on designs by :    1 .",
    "@xmath250 if @xmath251 \\cdots [ n_n / y_n]$ ] and @xmath252\\!]}[{[\\ ! [ n_1 ]",
    "\\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n]$ ] for some @xmath253 such that @xmath254 for @xmath255 .",
    "[ l - a1 ] suppose that @xmath256\\cdots[n_n / y_n]$ ] and @xmath257\\!]}[{[\\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n]$ ] so that @xmath258 .",
    "when @xmath259 , two cases can be distinguished .    1 .",
    "if @xmath260 and @xmath261\\cdots[n_n / y_n]$ ] , then there exists @xmath262 such that @xmath263 and @xmath264 .",
    "otherwise , there exists @xmath262 such that @xmath265 and @xmath264 .    1 .   by lemma [ l - facts ]",
    "( 2 ) , we have @xmath266\\!]}\\leq{[\\ ! [ p_1 ] \\!]}$ ] that implies @xmath267\\!]}[{[\\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ !",
    "[ n_n ] \\!]}/y_n]$ ] .",
    "hence by letting @xmath268\\!]}[{[\\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n]$ ] , we have @xmath263 and @xmath264 .",
    "if ( 1 ) is not the case , a cut must be created by substitution of some @xmath269 for a head variable of @xmath270 .",
    "hence @xmath270 must contain a head normal form @xmath271 as conjunct for some @xmath272 and @xmath273 , so that @xmath1 contains a cut @xmath274\\cdots[n_n / y_n ] = n_j |{\\overline{a}}{\\langle \\vec{m } \\rangle}[n_1/y_1]\\cdots[n_n / y_n]\\ ] ] ( the equality due to @xmath254 for @xmath275 ) and @xmath276[n_1/y_1]\\cdots[n_n / y_n ] $ ] @xmath277 . in this case ,",
    "@xmath266\\!]}$ ] contains @xmath278\\ ! ] } \\rangle}$ ] so that @xmath140 contains @xmath279\\ ! ] } \\rangle } [ { [ \\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n ]    = { [ \\ ! [ n_j ] \\ ! ]",
    "} |{\\overline{a}}{\\langle { [ \\ ! [ \\vec{m } ] \\ ! ] } \\rangle } [ { [ \\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n].\\ ] ] since @xmath280\\ ! ] } = { \\textstyle\\sum}a(\\vec{x}).{[\\ ! [ r_a ] \\!]}$ ] , we have @xmath281\\!]}[\\vec{{[\\ !",
    "[ m ] \\!]}}/\\vec{x } ] [ { [ \\ ! [ n_1 ] \\!]}/y_1 ] \\cdots[{[\\ ! [ n_n ] \\!]}/y_n]$ ] .",
    "let @xmath262 be the latter design .",
    "since the simultaneous substitutions @xmath282 $ ] and @xmath283\\!]}}/\\vec{x}]$ ] can be made sequential , we have @xmath284 .",
    "[ l - a2 ] if @xmath258 and @xmath265 , then there exists some @xmath285 such that @xmath284 and @xmath286 .",
    "suppose that @xmath256\\cdots[n_n / y_n]$ ] , @xmath257\\!]}[{[\\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n]$ ] and @xmath265 .",
    "then @xmath266\\!]}$ ] must contain @xmath278\\ ! ] } \\rangle}$ ] for some @xmath287 and @xmath288 .",
    "thus , @xmath289 .",
    "suppose also @xmath273 so that @xmath280\\ ! ] } = { \\textstyle\\sum}a(\\vec{x}).{[\\ ! [ r_a ] \\!]}$ ] .",
    "now the situation is as follows : @xmath140 contains @xmath279\\ ! ] } \\rangle } [ { [ \\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n ] = { [ \\ ! [ n_j ] \\ ! ]",
    "} |{\\overline{a}}{\\langle { [ \\ ! [ \\vec{m } ] \\ ! ] } \\rangle } [ { [ \\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ]",
    "\\!]}/y_n],\\ ] ] so we have @xmath290\\!]}[\\vec{{[\\ ! [ m ] \\!]}}/\\vec{x } ] [ { [ \\ ! [ n_1 ] \\!]}/y_1 ] \\cdots [ { [ \\ ! [ n_n ] \\!]}/y_n ] = q'.\\ ] ] on the other hand , @xmath291 \\cdots [ n_n / y_n ] & \\\\ & = & n_j |{\\overline{a}}{\\langle \\vec{m } \\rangle}[n_1/y_1 ] \\cdots [ n_n / y_n ] & \\\\ & { -\\!\\!\\!\\!\\!\\rightharpoonup } & r_a[\\vec{m}/\\vec{x}_a ] [ n_1/y_1 ] \\cdots [ n_n / y_n ] & = p ' , \\end{array}\\ ] ] which implies @xmath292 .",
    "since the simultaneous substitutions @xmath282 $ ] and @xmath283\\!]}}/\\vec{x}]$ ] can be made sequential , we have @xmath284 .",
    "[ l - a3 ] suppose that @xmath258",
    ". then @xmath293\\!]}=\\omega$ ] if and only if @xmath294\\ ! ] } = \\omega$ ] .    1 .   for the `",
    "if ' direction , we distinguish two cases . 1 .",
    "if there is an infinite reduction sequence from @xmath140 , then there is also an infinite sequence from @xmath1 by lemma [ l - a2 ] .",
    "2 .   if @xmath295 , then there is @xmath285 such that @xmath296 and @xmath297 .",
    "namely , @xmath285 can be written as @xmath298\\cdots[n_n / y_n]$ ] and @xmath299\\!]}[{[\\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n]$ ] .",
    "the latter means that @xmath266\\ ! ] } = \\omega$ ] , which implies @xmath300\\ ! ] } = \\omega$ ] . from this and @xmath296 , we conclude @xmath293\\ ! ] } = \\omega$ ] .",
    "2 .   for the ` only - if ' direction , if @xmath301 , we easily obtain @xmath294\\ ! ] } = \\omega$ ] .",
    "otherwise , there is an infinite reduction sequence @xmath302 .",
    "suppose that @xmath303\\cdots[n_n / y_n]$ ] and @xmath304\\!]}[{[\\ ! [ n_1 ] \\!]}/y_1]\\cdots[{[\\ ! [ n_n ] \\!]}/y_n]$ ] .",
    "our purpose is to build either a finite reduction sequence @xmath305 or an infinite reduction sequence @xmath306 .",
    "two cases arise : 1 .",
    "the reductions take place inside @xmath270 and independently of @xmath307 .",
    "namely , there is an infinite reduction sequence @xmath308 such that @xmath309\\cdots[n_n / y_n]$ ] for every @xmath310",
    ". then @xmath266\\!]}= \\omega$ ] , which implies @xmath311 .",
    "so we have @xmath294\\!]}=\\omega$ ] .",
    "otherwise , there is at most a finite sequence @xmath312 such that @xmath309\\cdots[n_n / y_n]$ ] for @xmath313 and @xmath314 contains a head normal form that is responsible for the reduction @xmath315 . by repeatedly applying lemma [ l - a1 ] ( 1 ) , we obtain @xmath262 such that @xmath263 and @xmath316 . since @xmath315 , there exists @xmath317 such that @xmath318 and @xmath319 by lemma [ l - a1 ] ( 2 ) .",
    "hence by lemma [ l - facts ] ( 1 ) , we obtain @xmath320 .",
    "+ in the former case , we are already done . in the latter case",
    ", we still have an infinite reduction sequence @xmath321 and @xmath319 .",
    "hence we may repeat the same argument to prolong the reduction sequence @xmath322 .",
    "hence we eventually obtain @xmath294\\!]}=\\omega$ ] .",
    "[ l - a4 ] suppose that @xmath258 .    1 .",
    "if @xmath323 , then there exist @xmath324 such that @xmath325 and @xmath326 ,  , @xmath327 .",
    "conversely , if @xmath328 , then there exist @xmath329 such that @xmath330 and @xmath326 ,  , @xmath327 .",
    "suppose that @xmath331 . by lemmas [ l - a1 ] and [ l - facts ] ( 1 ) ( which states that the composed relation @xmath332 is identical with @xmath181 ) , there is @xmath262 such that @xmath333 and @xmath264 . since @xmath334",
    ", we may write @xmath335\\cdots [ n_n / y_n ] = x|{\\overline{a}}{\\langle \\vec{k}[n_1/y_1]\\cdots [ n_n / y_n ] \\rangle}\\ ] ] for some @xmath336 , where @xmath337 , and @xmath262 contains @xmath338\\ ! ] } [ { [ \\ ! [ n_1 ] \\!]}/y_1]\\cdots [ { [ \\ ! [ n_n ] \\!]}/y_n ] = x|{\\overline{a}}{\\langle \\vec{{[\\ ! [ k ] \\!]}}[{[\\ ! [ n_1 ] \\!]}/y_1]\\cdots [ { [ \\ ! [ n_n ] \\!]}/y_n ] \\rangle}.\\ ] ] hence by letting @xmath339\\!]}[{[\\ ! [ n_1 ] \\!]}/y_1]\\cdots [ { [ \\ ! [ n_n ] \\!]}/y_n]$ ] we obtain @xmath340 for every @xmath341 . since @xmath342 , namely @xmath343 , the claim holds .",
    "conversely , suppose that @xmath344 .",
    "by lemma [ l - a2 ] , there is @xmath285 such that @xmath345 and @xmath264 .",
    "the rest is similar to the above .",
    "[ l - a5 ] if @xmath346 , then either @xmath347 for a variable @xmath348 , or @xmath349 , @xmath350 and @xmath351 for every @xmath32 .",
    "immediate .",
    "the following lemma completes the proof of theorem [ t - assoc ] .    if @xmath352 , then @xmath353\\ ! ] } = { [ \\ ! [ e_0 ] \\!]}$ ] .",
    "define a binary relation @xmath125 on designs as follows :    1 .   for positive ( resp .",
    "negative ) designs @xmath354 , we have @xmath128 if @xmath355\\!]}$ ] , @xmath356\\!]}$ ] , and @xmath357 for some @xmath358 and @xmath359 .",
    "2 .   for predesigns @xmath360",
    ", we have @xmath361 if @xmath362\\ ! ] } , \\dots , { [ \\ ! [ m_m ] \\ ! ] } \\rangle}$ ] , @xmath363\\ ! ] } , \\dots , $ $   { [ \\ ! [ l_m ] \\ ! ] } \\rangle}$ ] , and @xmath340 for every @xmath364 .",
    "we now verify that this @xmath125 satisfies the conditions of lemma [ l - equiv ] .",
    "first , let @xmath175 be positive designs such that @xmath365 , @xmath366\\!]}$ ] , @xmath367\\!]}$ ] , and @xmath368 for some @xmath270 and @xmath369 .    1 .",
    "if @xmath266\\!]}=\\omega$ ] , then @xmath370\\!]}= \\omega$ ] too by lemma [ l - a3 ] . hence ( 1 ) holds .",
    "2 .   if @xmath266\\!]}$ ] is a conjunction , then @xmath370\\!]}$ ] is not @xmath80 by lemma [ l - a3 ] , so is a conjunction . if @xmath266\\!]}$ ] contains @xmath371\\ ! ] } , \\dots , { [ \\ ! [ m_m ] \\ ! ] } \\rangle}$ ] , then @xmath372 . since @xmath368 ,",
    "lemma [ l - a4 ] yields @xmath373 for some @xmath374 .",
    "namely , @xmath370\\!]}$ ] contains @xmath375\\ ! ] } \\rangle}$ ] .",
    "moreover , we have @xmath340 for every @xmath364 . similarly",
    ", one can show that if @xmath370\\!]}$ ] contains @xmath375\\ ! ] } \\rangle}$ ] , then @xmath266\\!]}$ ] contains @xmath376\\ ! ] } \\rangle}$ ] and @xmath340 for every @xmath364 .",
    "hence ( 2 ) holds .",
    "let @xmath360 be predesigns such that @xmath377 , i.e. , @xmath362\\ ! ] } , \\dots , { [ \\ ! [ m_m ] \\ ! ] } \\rangle}$ ] , @xmath363\\ ! ] } , \\dots , $ $ { [ \\ ! [ l_m ] \\ ! ] } \\rangle}$ ] , and @xmath340 for every @xmath364 .",
    "it immediately follows that @xmath378\\ ! ] } { \\ ; \\cr\\ ; } { [ \\ ! [ l_i ] \\!]}$ ] for every @xmath364",
    ". also , @xmath379 .",
    "hence ( 3 ) holds .",
    "finally , let @xmath380 be negative designs such that @xmath381\\!]}$ ] , @xmath382\\!]}$ ] , and @xmath383 for some @xmath384 and @xmath385 .    1 .",
    "if @xmath386 , then @xmath387 . hence ( 4 ) holds .",
    "2 .   otherwise , @xmath79 must be of the form @xmath388\\!]}$ ] and @xmath389 . since @xmath383",
    ", @xmath385 is of the form @xmath390 and @xmath391 for every @xmath32 by lemma [ l - a5 ] .",
    "so @xmath392\\ ! ] } = { \\textstyle\\sum}a(\\vec{x}_a).{[\\ ! [ q_a ] \\!]}$ ] and @xmath393\\ ! ] } { \\ ; \\cr\\ ; } { [ \\ ! [ q_a ]",
    "\\!]}$ ] . hence ( 5 ) holds .",
    "therefore , if @xmath357 , we have @xmath353\\ ! ] } = { [ \\ ! [ e_0 ] \\!]}$ ] by lemma [ l - equiv ] .",
    "this section is concerned with the type structure of ludics .",
    "we describe orthogonality and behaviours in [ ortho - s ] , logical connectives in [ ss - logical ] and finally explain ( the failure of ) internal completeness of logical connectives in [ ss - internal ] .      in the rest of this paper , we mainly restrict ourselves to a special subclass of designs : we only consider designs which are _ total _ , _ cut - free _ , and _ identity - free_. generalizing the terminology in @xcite , we call them _ standard designs_. in other words :    [ d - standard ] a design @xmath56 is said * standard * if it satisfies the following two conditions :    a.   _ cut - freeness and identity - freeness _",
    ": @xmath56 can be coinductively generated by the following restricted version of the grammar given in definition [ designs ] : @xmath394 b.   _ totality _ : @xmath160 .",
    "the totality condition is due to the original work @xcite .",
    "it has a pleasant consequence that behaviours ( see below ) are never empty .",
    "we also remark that the lack of identities can be somehow compensated by considering their infinitary @xmath395 expansions , called _",
    "faxes _ in @xcite . in our setting , the infinitary @xmath395 expansion of an identity @xmath75 is expressed by the negative standard design @xmath396 defined by the equation : @xmath397 we refer to @xcite for more details .",
    "we are now ready to define orthogonality and behaviours .    a positive design @xmath1 is said * atomic * if it is standard and @xmath398 for a certain fixed variable @xmath399",
    ". here plays the same role as the empty address ",
    "@xmath400 \" does in @xcite : @xmath399 may be thought of as a fixed and predetermined  location . \" ]    a negative design @xmath79 is said * atomic * if it is standard and @xmath401 .",
    "two atomic designs @xmath402 of opposite polarities are said * orthogonal * and written @xmath403 ( or equivalently @xmath404 ) when @xmath405 { \\rrbracket}= \\maltese$ ] .",
    "if @xmath150 is a set of atomic designs of the same polarity , then its * orthogonal set * , denoted by @xmath406 , is defined by @xmath407 .",
    "the meaning of @xmath21 and the associated partial order @xmath147 can be clarified in terms of orthogonality . for atomic designs @xmath354 of the same polarity ,",
    "define @xmath408 if and only if @xmath409 .",
    "@xmath408 means that @xmath55 has more chances of convergence than @xmath56 when interacting with other atomic designs .",
    "the following is easy to observe .",
    "[ conj and ort ]     1 .",
    "@xmath410 is a preorder .",
    "@xmath138 implies @xmath411 for any pair of atomic positive designs @xmath175 .",
    "3 .   let @xmath150 and @xmath412 be sets of atomic designs of the same polarity",
    ". then @xmath413 implies @xmath414 .",
    "in particular , @xmath415 for any atomic positive design @xmath1 . , which does not officially belong to the universe of atomic designs .",
    "] this justifies our identification of @xmath90 with the empty conjunction @xmath416 .",
    "[ r - separation ] designs in @xcite satisfy the _ separation property _ : for any designs @xmath354 of the same polarity , we have @xmath417 if and only if @xmath418 .",
    "but when the constraint of linearity is removed , this property no more holds , as observed in @xcite ( see also @xcite ) .    in our setting , separation does not hold , even when @xmath56 and @xmath55 are deterministic ( atomic ) designs . for instance , consider the following two designs @xcite : @xmath419 it is easy to see that in our setting @xmath403 holds if and only if @xmath79 has an additive component of the form @xmath420 for arbitrary index set @xmath52 and arbitrary standard negative designs @xmath421 with @xmath422 .",
    "the same holds for @xmath140 , as can be observed from the following reduction sequence ( for readability , we only consider the case in which @xmath79 has a component of the form @xmath423 , the general case easily follows ) : @xmath424    & = & n \\;|\\ ; { \\mathord{\\downarrow}}\\langle{\\mathord{\\uparrow}}(y ) .",
    "p [ n / x_0]\\rangle     \\\\   & { -\\!\\!\\!\\!\\!\\rightharpoonup } & \\left ( { \\mathord{\\uparrow}}(y ) .",
    "p [ n / x_0]\\right ) \\;|\\ ; { \\mathord{\\downarrow}}\\langle m[{\\mathord{\\uparrow}}(y ) .",
    "p [ n / x_0]/z]\\rangle    \\\\   & { -\\!\\!\\!\\!\\!\\rightharpoonup } &   p[n / x_0]\\ { -\\!\\!\\!\\!\\!\\rightharpoonup}^\\ast \\ \\maltese.\\end{aligned}\\ ] ] ( if @xmath79 does not have a component of the form discussed above , we have @xmath425 { -\\!\\!\\!\\!\\!\\rightharpoonup}^ * \\omega$ ] . )    we therefore conclude @xmath426 , even though @xmath427 .",
    "although possible , we do not define orthogonality for nonatomic designs .",
    "accordingly , we only consider _ atomic _ behaviours which consist of atomic designs .",
    "[ d - beh ] a * behaviour * @xmath150 is a set of atomic standard designs of the same polarity such that @xmath428 .",
    "a behaviour is positive or negative according to the polarity of its designs .",
    "we denote positive behaviours by @xmath429 and negative behaviours by @xmath430 .",
    "orthogonality satisfies the following standard properties :    [ closure operator ] let @xmath431 be sets of atomic designs of the same polarity .",
    "we have :    1 .   @xmath432 .",
    "2 .   @xmath433 .",
    "3 .   @xmath434 .",
    "4 .   @xmath435 .",
    "in particular , any orthogonal set is a behaviour .",
    "5 .   @xmath436 . in particular",
    ", the intersection of two behaviours is a behaviour .",
    "we also observe that @xmath437 and @xmath438 implies @xmath439 when @xmath150 is a behaviour .    among all positive ( resp .",
    "negative ) behaviours , there exist the least and the greatest behaviours with respect to set inclusion:@xmath440 where @xmath441 plays the role of the design called _ negative daimon _ in @xcite .",
    "notice that behaviours are always nonempty due to the totality condition : any positive ( resp .",
    "negative ) behaviour contains @xmath90 ( resp .",
    "@xmath442 ) .",
    "now that we have given behaviours , we can define _ contexts of behaviours _ and then the _ semantical entailment _",
    "@xmath443 in order to relate designs to contexts of behaviours .",
    "these constructs play the role of typing environments in type systems .",
    "they correspond to _ sequents of behaviours _",
    ", in the terminology of @xcite .",
    "a.   a * positive context * @xmath444 is of the form @xmath445 , where @xmath34 are distinct variables and @xmath446 are ( atomic ) positive behaviours .",
    "we denote by @xmath447 the set @xmath448 . + a * negative context *",
    "@xmath449 is a positive context @xmath444 enriched with an ( atomic ) negative behaviour @xmath450 , to which no variable is associated .",
    "b.   the * semantical entailment * is the binary relation @xmath443 between designs and contexts of behaviours of the same polarity defined as follows : + @xmath451 if and only if : 1 .",
    "@xmath1 is standard ; 2 .",
    "@xmath452 ; 3 .",
    "@xmath453 { \\rrbracket}= \\maltese$ ] for any @xmath454 ,  , @xmath455 .",
    "+ @xmath456 if and only if : 1 .",
    "@xmath79 is standard ; 2 .",
    "@xmath457 ; 3 .",
    "@xmath458/x_0 ] { \\rrbracket}= \\maltese$ ] for any @xmath454 ,  , @xmath455 , @xmath459 .",
    "clearly , @xmath460 if and only if @xmath461 , and @xmath462 if and only if @xmath463\\in \\bp$ ]",
    ". furthermore , associativity ( theorem [ t - assoc ] ) implies the following quite useful principle :    [ l - closure ]    1 .",
    "@xmath464 if and only if @xmath465 { \\rrbracket}\\models \\bgamma$ ] for any @xmath466 ; 2 .",
    "@xmath467 if and only if @xmath468 { \\rrbracket}\\models   \\bgamma$ ] for any @xmath469 ; 3 .",
    "@xmath470 if and only if @xmath471 { \\rrbracket}\\models \\bgamma,\\bn$ ] for any @xmath466 .    1 .",
    "let @xmath1 be a standard design with @xmath472 and @xmath444 a context @xmath473 .",
    "first , we claim that @xmath465 { \\rrbracket}$ ] is a standard design when @xmath464 and @xmath466 .",
    "indeed , it is obviously cut - free .",
    "it is also identity - free because so are @xmath474 and neither substitution @xmath475 $ ] nor normalization @xmath465 { \\rrbracket}$ ] introduces identities .",
    "totality will be shown below .",
    "we also note that @xmath476 { \\rrbracket } ) \\subseteq \\{x_1 , \\dots , x_n\\}$ ] , since @xmath2 is an atomic negative design that is always closed . + next , we observe that @xmath477 { \\rrbracket}= { \\llbracket}\\ ; { \\llbracket}p[m / z ] { \\rrbracket}\\ ;   [ \\vec{k}/\\vx ] { \\rrbracket}$ ] for any list @xmath478 of standard negative designs . indeed ,",
    "notice that @xmath479 = p[m / z ]   [ \\vec{k}/\\vx]$ ] since @xmath2 is closed , and @xmath480\\ ! ] } = k_i$ ] since @xmath481 is cut - free . hence by associativity , we obtain : @xmath482 { \\rrbracket}=   { \\llbracket}p[m / z ]   [ \\vec{k}/\\vx ] { \\rrbracket}= { \\llbracket}\\ ; { \\llbracket}p[m / z ] { \\rrbracket}\\ ;   [ { \\llbracket}\\vec{k } { \\rrbracket}/\\vx ] { \\rrbracket}= { \\llbracket}\\ ; { \\llbracket}p[m / z ] { \\rrbracket}\\ ;   [   \\vec{k } /\\vx ] { \\rrbracket}. \\ ] ] in particular , @xmath477 { \\rrbracket}= \\maltese$ ] implies the totality of @xmath465 { \\rrbracket}$ ] .",
    "+ we are now ready to prove the first claim . writing @xmath483 for @xmath484 ,  , @xmath485",
    ", we have : @xmath486 { \\rrbracket}= \\maltese \\mbox { for every $ \\vec{k}\\in \\bgamma{{}^{\\bot}}$ and $ m\\in \\bp^\\bot$ } , \\\\ & \\longleftrightarrow & { \\llbracket}\\ ; { \\llbracket}p[m / z ] { \\rrbracket}\\ ;   [   \\vec{k } /\\vx ] { \\rrbracket}= \\maltese \\mbox { for every $ \\vec{k}\\in \\bgamma{{}^{\\bot}}$ and $ m\\in \\bp^\\bot$ } , \\\\ & \\longleftrightarrow & { \\llbracket}p[m / z ] { \\rrbracket}\\models \\bgamma \\mbox { for every $ m\\in \\bp^\\bot$.}\\end{aligned}\\ ] ] 2 .   and ( 3 ) are proven in a similar way .",
    "we just mention that the crucial equalities @xmath487/x_0 ] { \\rrbracket } & = & { \\llbracket}\\ ; { \\llbracket}q[n / x_0 ] { \\rrbracket}\\ ; [ \\vec { k } /\\vx ] { \\rrbracket},\\\\ { \\llbracket}q[n[\\vec{k}/\\vx , m / z]/x_0 ] { \\rrbracket } & = & { \\llbracket}q [ \\ ; { \\llbracket}n[m / z ] { \\rrbracket}\\ ; [ \\vec{k}/\\vx]/x_0 ] { \\rrbracket},\\end{aligned}\\ ] ] which are needed to show ( 2 ) and ( 3 ) respectively , can be straightforwardly derived from associativity .",
    "we next describe how to build behaviours by means of _ logical connectives _ in ludics .",
    "[ d - lc ] an * @xmath40-ary logical connective * @xmath95 is a pair @xmath488 where :    1 .",
    "@xmath489 is a sequence of distinct variables ; 2 .",
    "@xmath490 is a finite set of negative actions such that : 1 .",
    "the names @xmath491 are distinct ; 2 .",
    "@xmath492 for each @xmath493 .",
    "two logical connectives are identified if one is obtained from another by renaming of variables .",
    "we can intuitively explain the structure of logical connectives in terms of standard connectives of linear logic as follows .    the variables @xmath494 play the role of _ placeholders _ for ( immediate ) subformulas , while @xmath495 determines the _ logical structure _ of @xmath95 .",
    "an action @xmath496 can be seen as a kind of @xmath497-ary  tensor product \" @xmath498 indexed by the name @xmath26 .",
    "the whole set @xmath495 can be thought of as @xmath499-ary  additive sum \" of its elements : @xmath500    in appendix [ pol ll ] we give a more precise correspondence between logical connective in our sense and connectives of polarized linear logic @xcite .",
    "[ example ] consider the logical connective @xmath501 . by the previous discussion",
    ", we can intuitively think of it as @xmath502 when @xmath95 is applied to @xmath503 , it gives the formula @xmath504    we now define behaviours built by logical connectives .    [ d - log conn beh ] given an @xmath497-ary name @xmath26 , an @xmath40-ary logical connective @xmath505 with @xmath506 and behaviours @xmath507 we define :    1 .",
    "@xmath508 2 .",
    "@xmath509 3 .",
    "@xmath510    where the indices @xmath511 vary for each @xmath512 and are determined by the variables @xmath513 .",
    "we call the set @xmath514 the _ ethics _ of @xmath515 .",
    "[ ethics ] an ethics is a set of atomic predesigns which are by construction linear in @xmath399 .",
    "it can be seen as a  generator \" of a behaviour defined by logical connectives in the following sense . for positives",
    ", we have by definition @xmath516 . for negatives ,",
    "we have by proposition [ closure operator ] ( 3 ) : @xmath517    let @xmath95 be the logical connective as given in example [ example ] and @xmath518 negative behaviours .",
    "we have @xmath519 .    [ linear ]",
    "logical connectives @xmath520{180}{\\&}\\ , } , \\with , { \\mathord{\\uparrow}},\\bot , \\top$ ] can be defined if the signature @xmath226 contains a nullary name @xmath521 , unary names @xmath522 and a binary name @xmath523 .",
    "we also give notations to their duals for readability .",
    "@xmath524 where @xmath228 denotes the empty sequence .",
    "we do not have exponentials here , because we are working in a nonlinear setting so that they are already incorporated into the connectives . with these logical connectives",
    "we can build behaviours corresponding to usual linear logic types ( we use infix notations such as @xmath525 rather than the prefix ones @xmath526 ) .",
    "@xmath527    the next theorem illustrates a special feature of behaviours defined by logical connectives .",
    "it also suggests that nonlinearity and universal nondeterminism play dual roles .",
    "[ p - duphalf ] [ fundi ] [ p - log ] let @xmath528 be an arbitrary positive behaviour .",
    "1 .   @xmath529 \\in   \\bp$ ] .",
    "2 .   @xmath530 .",
    "moreover , if @xmath528 is _ obtained by applying a logical connective _ , that is @xmath531 for some @xmath95 , @xmath532 , then :    1 .",
    "the converse of _ ( 1 ) _",
    "( _ duplicability _ ) and 2 .",
    "the converse of _ ( 2 ) _ ( _ closure under @xmath21 _ ) hold .    1 .   for any @xmath533 , we have @xmath534 { \\rrbracket}=\\maltese$ ] .",
    "hence , @xmath535[n / x_0 ] { \\rrbracket}= \\maltese$ ] , and so @xmath536 \\in \\bp^{\\bot\\bot } = \\bp$ ] .",
    "2 .   by proposition",
    "[ conj and ort ] ( 3 ) , we have @xmath537 for any @xmath538 .",
    "since @xmath539 is a behaviour , it is upward closed with respect to @xmath410 .",
    "hence the claim holds .",
    "3 .   for the sake of readability , we consider the binary case and show that @xmath540 implies @xmath541 . the general case can be proven using the same argument .",
    "+ let @xmath542 .",
    "to prove @xmath543 , by remark [ ethics ] , it is sufficient to show that @xmath544 is orthogonal to any @xmath545 .",
    "since by construction @xmath399 occurs only once at the head position of @xmath546 , we only have to show that @xmath547 .",
    "+ let @xmath548 and @xmath549 so that @xmath550 .",
    "since @xmath551 is a predesign , we have by lemma [ l - facts ] ( 2 ) , ( 3 ) : @xmath552 { \\rrbracket}=    { \\llbracket}p_a[\\vec{k}/\\vx ] { \\rrbracket}\\wedge   { \\llbracket}q_a[\\vec{k}/\\vx ] { \\rrbracket}= { \\llbracket}n \\;|\\ ; { { \\overline{a}}}\\langle \\vec{k } \\rangle { \\rrbracket}\\wedge { \\llbracket}m \\;|\\ ; { { \\overline{a}}}\\langle \\vec{k } \\rangle { \\rrbracket}.\\ ] ] since @xmath553 , we have @xmath554 and @xmath555 . our claim",
    "then immediately follows .",
    "4 .   let @xmath556\\in \\bp = \\coal\\langle \\bn_1,\\ldots,\\bn_n \\rangle$ ] .",
    "it suffices to show that @xmath557 { \\rrbracket}=\\maltese$ ] holds for any @xmath558 .",
    "but we have just proven that @xmath559 , and so @xmath560[n\\wedge m / x_0 ] { \\rrbracket}= { \\llbracket}p[n\\wedge m / x_1 , n\\wedge m / x_2 ] { \\rrbracket}= \\maltese$ ] . since @xmath561 by proposition [ conj and ort ] ( 3 )",
    ", we have @xmath562 { \\rrbracket}= \\maltese$ ] .    theorem [ p - log ]",
    "can be considered as an internal , monistic form of soundness and completeness for the contraction rule : soundness corresponds to point ( 1 ) while completeness to its converse ( 3 ) , duplicability .    however , in the sequel we only use point ( 1 ) ( in theorem [ soundness ] ) and point ( 4 ) ( in lemma [ l - comp ] ) of theorem [ p - log ] .      in @xcite ,",
    "girard proposes a purely monistic , local notion of completeness , called _",
    "internal completeness_. it means that we can give a precise and direct description to the elements of behaviours ( built by logical connectives ) without using the orthogonality and without referring to any proof system .",
    "it is easy to see that negative logical connectives enjoy internal completeness :    [ t - negative ] let @xmath563 be a logical connective with @xmath564 and @xmath565 an atomic negative design .",
    "we have : @xmath566 where the indices @xmath567 are determined by the variables @xmath568 .",
    "let @xmath548 be an atomic negative design and @xmath569 .",
    "since @xmath570 $ ] is a predesign and @xmath399 occurs only at the head position of @xmath1 , we have by lemma [ l - facts ] ( 2 ) : @xmath571 { \\rrbracket}= { \\llbracket}{\\textstyle\\sum}a(\\vx).p_a   \\;|\\ ; { { \\overline{a}}}\\langle n_1,\\ldots , n_m \\rangle { \\rrbracket}= { \\llbracket}p_a[n_1/z_{i_1},\\ldots , n_m / z_{i_m } ] { \\rrbracket}.\\ ] ] this means that @xmath572 ( see remark [ ethics ] ) if and only if for every @xmath573 and for every @xmath574 , @xmath575 { \\rrbracket}=\\maltese $ ] if and only if for every @xmath573 , @xmath576 ( see definition [ d - context ] ( b ) ) .",
    "notice that in the above , @xmath577 can be arbitrary when @xmath578 .",
    "thus our approach is `` immaterial '' in that we do not consider material designs ( see @xcite for the definition of material design ) .",
    "the original `` material '' version of internal completeness @xcite can be easily derived from our immaterial one .",
    "a remarkable example of internal completeness for negative behaviours is provided for the logical connective @xmath579 : @xmath580 above , the irrelevant components of the sum are suppressed by `` @xmath581 . ''",
    "up to materiality ( removal of irrelevant additive components ) , @xmath582 , which has been defined by _ intersection _ , is isomorphic to the _ cartesian product _ of @xmath528 and @xmath583 .",
    "this isomorphism is called  _ the mystery of incarnation _ \" in @xcite .    as to positive connectives , @xcite proves internal completeness theorems for additive and multiplicative ones separately in the linear and deterministic setting .",
    "they are integrated in @xcite as follows :    when the universe of standard designs is restricted to linear and deterministic ones , we have @xmath584    however , this is no more true with nonlinear designs .",
    "a counterexample is given below .",
    "[ example completeness ] let us consider the behaviour @xmath585 and the designs @xmath586 and @xmath587 of remark [ r - separation ] . by construction",
    ", @xmath1 belongs to @xmath528 .",
    "since @xmath588 , @xmath140 also belongs to @xmath528 .",
    "however , @xmath589 , since @xmath590 is not atomic and so can not belong to @xmath591 .",
    "this motivates us to directly prove completeness for proofs , rather than deriving it from internal completeness as in the original work @xcite . in @xcite a weaker form of internal completeness",
    "is proved , which is enough to derive a weaker form of full completeness : all _ finite _ `` winning '' designs are interpretations of proofs .",
    "while such a finiteness assumption is quite common in game semantics , we will show that it can be avoided in ludics .",
    "we end this section with the following remark .",
    "the main linear logic isomorphism , namely the exponential one @xmath592 can be expressed in our notation as @xmath593 .    in our setting it is possible to prove that those behaviours are  morally \" isomorphic , in the sense that they are isomorphic if we consider designs equal up to materiality and @xmath55 are equal up to materiality in a behaviour @xmath594 if they only differ in occurrences of positive subdesign which are irrelevant for the normalization against designs of @xmath595 . ] .",
    "we can in fact define a pair of maps @xmath596 on designs such that :    1 .   @xmath597 and @xmath598 ; 2 .",
    "if @xmath1 and @xmath140 are equal up to materiality in @xmath599 , then @xmath600 and @xmath601 are equal up to materiality in @xmath602 , and similarly for @xmath603 ; 3 .   for any @xmath604 , we have that @xmath605 and @xmath1 are equal up to materiality in @xmath599 , and similarly for the other direction .",
    "we postpone a detailed study of isomorphisms of types and related issues to a subsequent work .",
    "having set up the framework , we now address the main problem : an interactive form of gdel completeness .",
    "we first introduce the proof system in [ proof system ] , then examine its soundness in [ ss - soundness ] , and finally prove completeness in [ completeness ] , in a way quite analogous to the proof of gdel s theorem based on proof search ( often attributed to schtte @xcite ) .",
    "we will now introduce a proof system . in our system ,",
    "logical rules are automatically generated by logical connectives . since the names which constitute the logical connectives are chosen among the names of a signature @xmath30 , the set of logical connectives vary for each signature @xmath226 .",
    "thus , our proof system is parameterized by @xmath226 .",
    "if one chooses @xmath226 rich enough , the constant - only fragment of polarized linear logic ( @xcite ; see also @xcite ) can be embedded , as we will show in appendix [ pol ll ] .    in the sequel ,",
    "we focus on _ logical _ behaviours , which are composed by using logical connectives only .",
    "[ logical behaviours ] a behaviour is * logical * if it is inductively built as follows ( @xmath95 denotes an arbitrary logical connective ) : @xmath606    notice that the orthogonal of a logical behaviour is again logical .",
    "as advocated in the introduction , our monistic framework renders both proofs and models as homogeneous objects : designs .",
    "[ proof , models ] a * proof * is a standard design ( definition [ d - standard ] ) in which all the conjunctions are unary . in other words , a proof is a total , deterministic and @xmath90-free design without cuts and identities . a * model * is a linear standard design ( in which conjunctions of arbitrary cardinality may occur ) .",
    "we will use proofs as proof - terms for syntactic derivations in the proof system to be introduced below . in that perspective , it is reasonable to exclude designs with non - unary conjunctions from proofs , because they do not have natural counterparts in logical reasoning .",
    "for instance , the nullary conjunction ( daimon ) and the binary one would correspond to the following `` inference rules '' respectively : @xmath607 with @xmath608 an arbitrary sequent .",
    "notice that we have not specified yet what a proof actually proves .",
    "hence it might be better called `` proof attempt '' or `` untyped proof '' or `` para - proof . ''    on the other hand , we restrict models to linear designs just to emphasize the remarkable fact that _ linear _ designs do suffice for defeating any failed proof attempt that is possibly _ nonlinear_.    given a design @xmath56 , let @xmath609 be the set of occurrences of positive actions @xmath31 in @xmath56 .",
    "the _ cardinality _ of @xmath56 is defined to be the cardinality of @xmath609 .",
    "for instance , the fax @xmath610 ( see section [ ortho - s ] ) is an infinite design in this sense .",
    "also , both proofs and models can be infinite .",
    "a _ positive _ ( resp .  _ negative _ ) _ sequent _ is a pair of the form @xmath611 ( resp .",
    "@xmath612 ) where @xmath1 is a positive proof ( resp .",
    "@xmath79 is a negative proof ) and @xmath444 is a positive context of logical behaviours ( definition [ d - context ] ( a ) ) such that @xmath613 ( resp .",
    "@xmath614 ) .",
    "we write @xmath615 for a generic sequent .",
    "intuitively , a sequent @xmath615 should be understood as a claim that `` @xmath56 is a proof of @xmath616 '' or `` @xmath56 is of type @xmath616 . ''",
    "our proof system consists of two sorts of inference rules :    1 .",
    "a _ positive _ rule @xmath617 : + @xmath618{z|\\coa\\langle m_1 , \\dots , m_m \\rangle\\vdash \\bgamma } { m_1 \\vdash \\bgamma , \\bn_{i_1 } & \\dots & m_m \\vdash \\bgamma , \\bn_{i_m } & ( z:\\coal\\langle\\bn_1 , \\dots , \\bn_n\\rangle \\in \\bgamma)}\\ ] ] where @xmath488 , @xmath489 and @xmath619 so that the indices @xmath620 are determined by the variables @xmath621 .",
    "2 .   a _ negative _ rule @xmath622 : @xmath623{{\\textstyle\\sum}a(\\vx).p_a \\vdash \\bgamma , \\alpha(\\bp_1 , \\dots , \\bp_n ) } { \\{p_a \\vdash \\bgamma , z_{i_1 } : \\bp_{i_1 } , \\dots , z_{i_m } : \\bp_{i_m}\\}_{a(\\vx)\\in \\alpha_0 } } \\ ] ] where , as in the positive rule , the indices @xmath624 are determined by the variables @xmath621 for each @xmath512 .",
    "+ we assume that @xmath37 are fresh , do not occur in @xmath444 .",
    "this does not cause a loss of generality since variables in @xmath95 can be renamed ( see definition [ d - lc ] ) .",
    "+ notice that a component @xmath70 of @xmath47 can be arbitrary when @xmath625 .",
    "hence we again take an `` immaterial '' approach ( theorem [ t - negative ] ) .",
    "observe that the positive rule @xmath617 involves implicit uses of the contraction rule on positive behaviours .",
    "the weakening rule for positive behaviours is implicit too ; in the bottom up reading of a proof derivation , unused formulas are always propagated to the premises of any instance of rule .",
    "it should also be noted that proof search in our system is deterministic .",
    "in particular , given a positive sequent @xmath626 , the head variable @xmath627 and the first positive action @xmath31 completely determine the next positive rule to be applied bottom - up ( if there is any ) .",
    "it is also possible to adopt a `` material '' approach in the proof system by simply requiring @xmath628 when @xmath625 in the rule @xmath622 . then a proof @xmath56 is finite ( @xmath609 is a finite set ) whenever @xmath629 is derivable for some @xmath630 .",
    "thus , as in ordinary sequent calculi , our proof system accepts only _ essentially finite _ proofs for derivable sequents ( finite up to removal of irrelevant parts ) .",
    "[ example top fax ] to clarify the last point , we observe that for any ( _ possibly infinite _ ) negative proof @xmath79 with @xmath631 , the sequent @xmath632 is derivable by the instance of the negative rule with @xmath633 . in fact",
    ", this corresponds to the usual top - rule of linear logic ( see also example [ linear rules ] ) :    this means that for a ( possibly infinite ) negative proof @xmath79 there is a finite derivation of @xmath632 .",
    "by contrast , in the `` material '' approach we only have    where @xmath634 is the unique negative proof which has cardinality @xmath635 .",
    "[ linear rules ] for linear logic connectives ( example [ linear ] ) , the positive and negative rules specialize to the following ( taking here the `` material '' approach ) :    @xmath636{z|\\bullet\\langle m_1 , m_2\\rangle \\vdash \\bgamma } { m_1 \\vdash \\bgamma , \\bn_1 & m_2 \\vdash \\bgamma , \\bn_2 & ( z:\\bn_1 \\pmb{\\otimes } \\bn_2 \\in \\bgamma ) } \\quad \\infer[\\pmb{{\\,\\rotatebox[origin = c]{180}{\\&}\\,}}]{\\wp(x_1 , x_2 ) .",
    "p   \\vdash \\bgamma ,",
    "\\bp_1 \\pmb{{\\,\\rotatebox[origin = c]{180}{\\&}\\ , } } \\bp_2}{p \\vdash \\bgamma , x_1 : \\bp_1 , x_2 : \\bp_2}\\\\[1em ] \\infer[(\\pmb{\\llplus } , \\iota_i)]{z|\\iota_i\\langle m\\rangle \\vdash \\bgamma } { m \\vdash \\bgamma , \\bn_i & ( z:\\bn_1 \\pmb{\\llplus } \\bn_2 \\in \\bgamma ) } \\qquad \\infer[\\pmb{\\llwith}]{\\pi_1(x_1 ) .",
    "p_1 + \\pi_2(x_2 ) .",
    "p_2   \\vdash \\bgamma , \\bp_1 \\pmb{\\llwith } \\bp_2}{p_1 \\vdash \\bgamma , x_1 : \\bp_1 & p_2 \\vdash \\bgamma , x_2 : \\bp_2}\\\\[1em ] \\infer[({\\pmb{\\mathord{\\downarrow } } } , { \\mathord{\\downarrow}})]{z|{\\mathord{\\downarrow}}\\langle n\\rangle \\vdash { { \\mathbf{\\gamma } } } } { n \\vdash \\bgamma , { { \\mathbf{n } } } & ( z : { \\pmb{\\mathord{\\downarrow}}}{{\\mathbf{n}}}\\in \\bgamma ) } \\qquad \\infer[{\\pmb{\\mathord{\\uparrow}}}]{{\\mathord{\\uparrow}}(x).p   \\vdash \\bgamma , { \\pmb{\\mathord{\\uparrow}}}\\bp}{p \\vdash \\bgamma , x : \\bp}\\\\[1em ] \\infer[(\\llone,\\overline{*})]{z|\\overline{*}\\vdash\\bgamma } {   ( z:\\llone \\in \\bgamma ) } \\qquad \\infer[({\\pmb{\\bot}})]{*.p\\vdash\\bgamma,{\\pmb{\\bot}}}{p\\vdash\\bgamma } \\qquad \\infer[({\\pmb{\\top}})]{{\\textstyle\\sum}a(\\vx).\\omega \\vdash\\bgamma,{\\pmb{\\top } } } { } \\end{array}\\ ] ]      the inference rules given above are all sound . namely we have :    [ soundness ] if @xmath615 is derivable in the proof system , then @xmath637 .",
    "by induction on the length of the derivation of @xmath615 .",
    "we have two cases , one for each sort of rule .    1 .",
    "suppose that the last inference rule is + @xmath618{z|\\coa\\langle m_1 , \\dots , m_m \\rangle\\vdash \\bgamma } { m_1 \\vdash \\bgamma , \\bn_{i_1 } & \\dots & m_m \\vdash \\bgamma , \\bn_{i_m } & ( z:\\coal\\langle\\bn_1 , \\dots , \\bn_n\\rangle \\in \\bgamma)}\\ ] ] where @xmath638 and @xmath639 for some @xmath640 .",
    "+ the induction hypothesis gives us @xmath641 for every @xmath642 . by lemma [ l - closure ] ( 3 ) , @xmath643 { \\rrbracket}\\in \\bn_{i_j}$ ] for every @xmath644 and by definition [ d - lc ] , we have that @xmath645 , that is @xmath646 . + applying lemma [ l - closure ] ( 1 ) , we get @xmath647 and by theorem [ p - duphalf ] ( 1 ) we conclude @xmath648 .",
    "2 .   suppose now that the last inference rule is + @xmath623{{\\textstyle\\sum}a(\\vx).p_a \\vdash \\bgamma , \\alpha(\\bp_1 , \\dots , \\bp_n ) } { \\{p_a \\vdash \\bgamma , \\vx : \\vec{\\bp}_a\\}_{a(\\vx)\\in \\alpha_0 } } \\ ] ] where @xmath649 and @xmath650 stands for @xmath651 .",
    "we assume that the variables @xmath652 and @xmath37 are disjoint in any premise .",
    "+ the induction hypothesis gives us @xmath653 for every @xmath654 . by lemma [ l - closure ]",
    "( 1 ) , for every @xmath655 , @xmath656 { \\rrbracket}\\models \\vx : \\vec{\\bp}_a$ ] .",
    "+ then , we can apply theorem [ t - negative ] to obtain @xmath657 , that is @xmath658 .",
    "notice that in @xmath659 the components @xmath70 for @xmath660 can be arbitrary .",
    "+ we finally apply lemma [ l - closure ] ( 3 ) and conclude @xmath661 .",
    "although our proof system does not include a cut rule officially , the semantics validates it as follows .    1 .   if @xmath662 and @xmath663 , then @xmath465 { \\rrbracket}\\models \\bgamma$ ] .",
    "2 .   if @xmath664 and @xmath663 , then @xmath471 { \\rrbracket}\\models \\bn,\\bgamma$ ] .    let @xmath444 be @xmath473 , let @xmath665 and write @xmath666 for @xmath667 .    1 .   by lemma [ l - closure ] , we have @xmath668 { \\rrbracket}\\models z : \\bp$ ] and @xmath669 { \\rrbracket}\\models \\bp{{}^{\\bot}}$ ] , so that @xmath670 \\in \\bp$ ] and and @xmath671 .",
    "hence , @xmath672[m'/x_0 ] { \\rrbracket}= { \\llbracket}p'[m'/z ] { \\rrbracket}= \\maltese$ ] . from this fact and associativity ( theorem [ t - assoc ] ) , we can derive @xmath673 { \\rrbracket}[\\vec { k } /\\vx ]    { \\rrbracket}=\\maltese$ ] , which proves @xmath465 { \\rrbracket}\\models \\bgamma$ ] .",
    "2 .   let @xmath140 be an arbitrary design in @xmath674 . by lemma [ l - closure ]",
    ", we obtain @xmath468 { \\rrbracket}\\models \\bgamma , z : \\bp$ ] and @xmath675 { \\rrbracket}[\\vec{k}/\\vx ] { \\rrbracket}\\models z : \\bp$ ] . on the other side",
    ", we have @xmath669 { \\rrbracket}\\models \\bp{{}^{\\bot}}$ ] . from @xmath676 \\in \\bp$ ] and and @xmath671 , we obtain @xmath677[m'/x_0 ] { \\rrbracket}= { \\llbracket}q'[m'/z ] { \\rrbracket}= \\maltese$ ] . from this fact and associativity",
    ", we can derive @xmath678 { \\rrbracket}[\\vec { k } /\\vx ] \\ ; /x_0 ]    { \\rrbracket}=\\maltese$ ] , which proves @xmath471 { \\rrbracket}\\models \\bn,\\bgamma$ ] .",
    "thanks to the previous proposition , we can naturally strengthen our proof system as follows .",
    "first , we consider sequents of the form @xmath615 where @xmath56 is a  proof with cuts \" ( a proof in the sense of definition [ proof , models ] except that the cut - freeness condition is not imposed ) .",
    "second , we add the following cut rule : @xmath679{d[n / z]\\vdash \\mathbf{\\xi},\\bgamma } { d \\vdash \\mathbf{\\xi } , \\bgamma , z:\\bp & n \\vdash \\bgamma , \\bp^\\bot}\\ ] ] where @xmath680 is either empty or it consists of a negative logical behaviour @xmath450 .",
    "the soundness theorem can be naturally generalized as follows :    if @xmath615 is derivable in the proof system with the cut rule above , then @xmath681 .",
    "let us finally establish the other direction of theorem [ soundness ] , namely :    [ full completeness ] a sequent @xmath682 is derivable in the proof system if and only if @xmath683 .    in particular , for any positive logical behaviour @xmath528 and a proof @xmath1",
    ", @xmath684 is derivable if and only if @xmath685 .",
    "similarly for the negative case .",
    "before proving the theorem , let us recall a well - established method for proving gdel completeness based on proof search ( often attributed to schtte @xcite ) .",
    "it proceeds as follows :    1 .",
    "given an unprovable sequent @xmath608 , find an open branch in the cut - free proof search tree .",
    "2 .   from the open branch ,",
    "build a countermodel @xmath2 in which @xmath608 is false .",
    "the proof below follows the same line of argument",
    ". we can naturally adapt ( 1 ) to our setting , since the bottom - up cut - free proof search in our proof system is deterministic in the sense that at most one rule applies at each step .",
    "moreover , it never gets stuck at the negative sequent , since a negative rule is always applicable bottom - up .",
    "adapting ( 2 ) is more delicate .    for simplicity ,",
    "we assume that the sequent @xmath686 is positive ; the argument below can be easily adapted to the negative case .",
    "so , suppose that a positive sequent @xmath687 with @xmath688 does not have a derivation . by knig s lemma",
    ", there exists a branch @xmath689 in the cut - free proof search tree , @xmath690 which is _ either _ finite and has the topmost sequent @xmath691 with @xmath692 to which no rule applies anymore , _ or _ infinite . in the latter case",
    ", we set @xmath693 .",
    "our goal is to build models @xmath694 such that @xmath695 ] \\!]}= \\omega.\\ ] ] more generally , we define negative designs    1 .",
    "@xmath696 for every @xmath310 ( @xmath697 if @xmath698 ) ; 2 .",
    "@xmath699 for every variable @xmath75 occurring in the branch .",
    "below , @xmath95 and @xmath73 stand for logical connectives : @xmath488 , @xmath700 .    to define @xmath696 we distinguish three cases : ( i ) when @xmath701 and @xmath702 , let @xmath703 .",
    "\\(ii ) when @xmath704 and @xmath705 , suppose that @xmath691 is of the form @xmath706 but @xmath707 so that the proof search gets stuck",
    ". then let @xmath708 .",
    "recall that the partial sum @xmath709 has @xmath710 as component by our convention .",
    "\\(iii ) for @xmath711 , suppose that the relevant part of the branch @xmath689 is of the form : @xmath712{z|\\coa\\langle m_1,\\ldots , m_{{k-1 } } , { \\textstyle\\sum}b(\\vy).p_{i+1 } , m_{k+1},\\ldots , m_{{m}}\\rangle\\vdash \\btheta_i } {      \\infer[(\\beta)]{{\\textstyle\\sum}b(\\vy ) .",
    "\\vdash \\btheta_i , \\bn_{i_k } } {          \\infer*{p_{i+1 } \\vdash \\btheta_i , y_1 : \\bq_1 , \\dots , y_l : \\bq_l}{}}}},\\ ] ] where @xmath713 contains @xmath714 , @xmath715 with @xmath716 , and @xmath717 @xmath718 , @xmath719 with @xmath720 .",
    "namely , the situation is as follows ( to be read bottom - up ) :    1 .",
    "the head variable of @xmath721 is @xmath627 , so @xmath714 is chosen from the context @xmath713 and the rule @xmath617 is applied . among @xmath497",
    "upper sequents , the @xmath499th one is taken in the branch .",
    "@xmath722 is negative , and the unique negative behaviour in @xmath723 is @xmath717 @xmath718 , so the rule @xmath724 is applied . among the upper sequents (",
    "recall that there is one sequent for each action in @xmath725 ) , the one corresponding to @xmath726 is taken in the branch .    in this case",
    ", we define @xmath727 here , the main additive component of @xmath696 begins with @xmath728 because ( 1 ) @xmath721 begins with the positive action @xmath31 , ( 2 ) the @xmath499th upper sequent is taken in the branch , and ( 3 ) the upper sequent corresponding to @xmath729 is taken .",
    "the other additive components @xmath730 are needed to ensure that our countermodel belongs to the behaviour @xmath731 ( see lemma [ l - comp ] ( 1 ) ) .",
    "the subdesigns @xmath732 are given by @xmath733 notice that each @xmath734 is a negative design , so the above conjunction is a defined operation ( in the sense of definition [ conj extension ] ( 2 ) ) .",
    "we claim that @xmath696 is well - defined , because variables @xmath71 are chosen fresh , so do not appear freely below @xmath735 .",
    "hence subdesigns @xmath732 do not have @xmath736 with @xmath737 as conjunct .",
    "namely , @xmath696 depends only on @xmath734 with @xmath738 .",
    "this gives rise to a recursive procedure and @xmath696 arises in the limit of the procedure .",
    "notice also that the set @xmath739 can be empty and in such a case , we have that @xmath740 .",
    "the above is an instance of corecursive definition .",
    "it is possible to formally justify it by employing _",
    "design generators _ developed in @xcite ( see in particular theorem 2.12 of @xcite ) .",
    "an alternative way is to define @xmath696 ( and @xmath741 ) as the limit of its finite approximations .",
    "here we briefly outline this latter approach .",
    "we assume that @xmath693 .",
    "the idea is to chop off the branch @xmath689 at height @xmath742 , where @xmath742 is an arbitrary natural number , and define finite approximations @xmath743 and @xmath744 .",
    "then @xmath696 and @xmath741 arise as the limit when @xmath745 .    more concretely , given a natural number @xmath742 , we define @xmath743 by downward induction from @xmath746 to @xmath747 as follows :    1 .   when @xmath748 , the sequent @xmath749 is of the form @xmath750 .",
    "we let @xmath751 .",
    "when @xmath752 , we proceed as in the case ( iii ) above .",
    "namely , @xmath753 where actions @xmath93 , @xmath754 and the index @xmath755 are determined as before .",
    "now observe that the sequence @xmath756 is `` monotone increasing '' in the sense that @xmath757 has more conjuncts than @xmath758 whenever @xmath759 .",
    "the same for @xmath760 with @xmath761 .",
    "hence we can naturally obtain the `` limits '' @xmath762 this construction ends up with the same as the previous recursive one .",
    "observe that each @xmath696 and @xmath699 thus constructed are surely models , atomic linear designs .",
    "theorem [ full completeness ] is a direct consequence of the following two lemmas .",
    "the first lemma crucially rests on _ induction on logical behaviours _ , that is an analogue of _ induction on formulas _ , which lies at the core of logical completeness in many cases .",
    "[ l - comp ] for @xmath763 appearing in the branch @xmath689 above , suppose that @xmath721 has a head variable @xmath627 and @xmath764 .",
    "then :    1 .   @xmath765 ; 2 .",
    "@xmath766 .    by induction on the construction of @xmath767 .    1 .",
    "suppose that @xmath704 .",
    "since @xmath80 does not have a head variable , the case ( i ) does not apply .",
    "hence we are in the case ( ii ) , namely @xmath768 , for some logical connective @xmath95 and logical behaviours @xmath532 .",
    "thus , @xmath769 , and @xmath708 .",
    "+ by internal completeness for negative connectives ( theorem [ t - negative ] ) , we have @xmath770 where @xmath771 and the expression @xmath772 abbreviates the positive context @xmath773 .",
    "since @xmath774 trivially holds for every @xmath512 , we have @xmath775 . + when @xmath776 , the case ( iii ) applies . in the same notation",
    ", we have that @xmath777 , @xmath717 @xmath778 , and @xmath779 where actions @xmath93 , @xmath754 , the index @xmath755 and the variables @xmath780 are determined by the relevant part of the branch @xmath689 as described above .",
    "+ by induction hypothesis on ( 2 ) , we have that @xmath781 . hence , @xmath782 .",
    "since @xmath783 are atomic ( closed ) , we may derive @xmath784 .",
    "we also have @xmath785 for every @xmath786 .",
    "hence , by internal completeness again , @xmath787 .",
    "2 .   it follows from ( 1 ) since @xmath788 is a negative logical behaviour and so closed under @xmath21 ( theorem [ p - log ] ( 4 ) ) .",
    "the proof of the next lemma suggests a similarity between the construction of our countermodels and the _ bhm - out _ technique ( see , @xcite ) , that constructs a suitable term context in order to visit a specific position in the bhm tree of a given @xmath16-term .",
    "recall that the initial sequent of our open branch @xmath689 is @xmath687 with @xmath688 , so that @xmath789 .",
    "we have :    [ l - bohm ] @xmath695 ] \\ ! ] } = \\omega.\\ ] ]    we first prove that there is a reduction sequence @xmath790 { -\\!\\!\\!\\!\\!\\rightharpoonup}^ * p_{i+1 } [ \\cm(w_1)/w_1 , \\dots , \\cm(w_t)/w_t]\\ ] ] for any @xmath776 , where @xmath791 and @xmath792 are the free variables of @xmath721 and @xmath793 , respectively .",
    "suppose that @xmath721 is as in the case ( iii ) above , so has the head variable @xmath794 . by writing @xmath795",
    "$ ] for @xmath796 $ ] and noting that @xmath797 is a ( defined ) conjunction that contains @xmath798 as conjunct , we have : @xmath799 & = & \\cm(z ) \\ | \\",
    "\\coa\\langle m_1[\\theta],\\ldots , m_{{k-1}}[\\theta ] , { \\textstyle\\sum}b(\\vy).p_{i+1}[\\theta ] , m_{k+1}[\\theta],\\ldots , m_{{m}}[\\theta]\\rangle   \\\\ & { -\\!\\!\\!\\!\\!\\rightharpoonup } & \\left({\\textstyle\\sum}b(\\vy).p_{i+1}[\\theta]\\right ) \\ ;    &   { -\\!\\!\\!\\!\\!\\rightharpoonup } &   p_{i+1}[\\theta , \\cm(y_{1})/ y_{1 } , \\ldots , \\cm(y_{l})/y_{l}],\\\\ \\end{array}\\ ] ] as desired .",
    "when @xmath693 , we have obtained an infinite reduction sequence from @xmath800 $ ] . otherwise , @xmath800 { -\\!\\!\\!\\!\\!\\rightharpoonup}^ * p_{max}[\\theta]$ ] , for some substitution @xmath795 $ ] .    in case ( i ) , we have @xmath801 = \\omega$ ] , while in case ( ii ) , we have @xmath802 .",
    "so , @xmath803 = z|\\coc\\langle \\vec{m}\\rangle [ \\theta ] = \\cm(z)|\\coc\\langle \\vec{m}[\\theta]\\rangle { -\\!\\!\\!\\!\\!\\rightharpoonup}\\omega,\\ ] ] because @xmath797 contains @xmath709 as conjunct , and @xmath804 has @xmath710 as component .",
    "theorem [ full completeness ] now follows easily .",
    "suppose that @xmath805 is not derivable .",
    "then we obtain models @xmath806 ,  , @xmath807 by lemma [ l - comp ] and @xmath808 ] \\!]}=\\omega$ ] by lemma [ l - bohm ] .",
    "this means that @xmath809 .    our explicit construction of the countermodels yields a by - product :    [ lowen ]    1 .",
    "let @xmath1 be a proof and @xmath528 a logical behaviour .",
    "if @xmath810 , then there is a countable model @xmath811 ( @xmath812 is a countable set ) such that @xmath813 .",
    "2 .   furthermore ,",
    "when @xmath1 is linear , there is a finite and deterministic model @xmath811 such that @xmath813 .",
    "the second statement is due to the observation that when @xmath1 is linear the positive rule @xmath617 can be replaced with a linear variant : @xmath814{z|\\coa\\langle m_1 , \\dots , m_m \\rangle\\vdash \\bgamma , z:\\coal\\langle\\bn_1 , \\dots , \\bn_n\\rangle } { m_1 \\vdash \\bgamma_1 , \\bn_{i_1 } & \\dots & m_m \\vdash \\bgamma_m , \\bn_{i_m}},\\ ] ] where @xmath815 are disjoint subsets of @xmath444 .",
    "we then immediately see that the proof search tree is always finite , and so is the model @xmath699 .",
    "it is deterministic , since each variable occurs at most once as head variable in a branch so that all conjunctions are at most unary .",
    "we have presented a gdel - like completeness theorem for proofs in the framework of ludics , aiming at linking completeness theorems for provability with those for proofs .",
    "we have explicitly constructed a countermodel against any failed proof attempt , following schtte s idea based on cut - free proof search .",
    "our proof employs knig s lemma and reveals a sharp opposition between finite proofs and infinite models , leading to a clear analogy with lwenhein - skolem theorem .",
    "our proof also employs an analogue of the bhm - out technique @xcite ( see the proof of lemma [ l - bohm ] ) , though it does not lead to the separation property ( remark [ r - separation ] ) .    in hyland - ong game semantics ,",
    "player s innocent strategies most naturally correspond to possibly infinite bhm trees ( see , @xcite ) .",
    "one could of course impose finiteness ( or compactness ) on them to have correspondence with finite proofs .",
    "but it would not lead to an explicit construction of opponent s strategies defeating infinite proof attempts .",
    "although finiteness is imposed in @xcite too , our current work shows that it is not necessary in ludics .",
    "our work also highlights the duality : @xmath816 the principle is that _ when proofs admit contraction , models have to be nondeterministic _ ( whereas they do not have to be nonlinear ) .",
    "a similar situation arises in some variants of @xmath16-calculus and linear logic , when one proves the separation property .",
    "we mention @xcite , where the authors add a nondeterministic choice operator and a numeral system to the pure @xmath16-calculus in order to internally ( interactively ) discriminate two pure @xmath16-terms that have different bhm trees .",
    "however , in contrast to our work , the nondeterminism needed for their purpose is of existential nature : a term converges if at least one of the possible reduction sequences starting from it terminates .    in @xcite , the separation property for differential interaction nets @xcite",
    "is proven .",
    "a key point is that the exponential modalities in differential interaction nets are more `` symmetrical '' than in linear logic . in our setting",
    ", the symmetry shows up between nonlinearity and nondeterministic conjunctions ( nonuniform elements ) .",
    "it is typically found in theorem [ p - duphalf ] , which reveals a tight connection between duplicability of positive logical behaviours and closure under nondeterministic conjunctions of negative logical behaviours .",
    "similar nonuniform structures naturally arise in various semantical models based on coherence spaces and games , such as finiteness spaces @xcite , indexed linear logic and nonuniform coherence spaces @xcite , nonuniform hypercoherences @xcite , and asynchronous games @xcite ( see also @xcite ) .    for future work",
    ", we plan to extend our setting by enriching the proof system with propositional variables , second order quantifiers and nonlogical axioms . by moving to the second order setting ,",
    "we hope to give an _ interactive _ account to gdel s incompleteness theorems as well .",
    "we are deeply indebted to pierre - louis curien , who gave us a lot of useful comments .",
    "our thanks are also due to the anonymous referees .    10    andreoli , j .-",
    ": logic programming with focusing proofs in linear logic .",
    "* 2*(3 ) ( 1992 ) 297347 .",
    "barendregt , h.  p. : the lambda calculus : its syntax and semantics .",
    "north - holland ( 1981 ) .",
    "basaldella , m. , faggian , c. : ludics with repetition ( exponentials , interactive types and completeness ) . in : lics .",
    "( 2009 ) 375384 .",
    "bhm , c. : alcune propriet delle forme @xmath817-normali nel @xmath818-calcolo .",
    "publicazioni dellistituto per le applicazioni del calcolo * 696 * ( 1968 ) .",
    "boudes , p. : non - uniform hypercoherences .",
    "notes theor .",
    "* 69 * ( 2002 ) 6282 .",
    "bucciarelli , a. , ehrhard , t. : on phase semantics and denotational semantics : the exponentials .",
    "pure appl .",
    "109*(3 ) ( 2001 ) : 205241 .    curien , p .-",
    "l . : abstract bhm trees .",
    "struct . in comp .",
    "* 8*(6 ) ( 1998 ) 559591 .",
    "curien , p .-",
    "l . : introduction to linear logic and ludics , part ii .",
    "advances in mathematics ( china ) * 35*(1 ) ( 2006 ) 144 .",
    "curien , p .-",
    "l . : notes on game semantics .",
    "manuscript ( 2006 ) .",
    "curien , p .-",
    ", herbelin , h. : abstract machines for dialogue games .",
    "panoramas et synthses * 27 * ( 2009 ) 231275 .",
    "curien , p .-",
    "l . , munch - maccagnoni , g. : the duality of computation under focus . in : proc . of ifip tcs .",
    "dezani - ciancaglini , m. , intrigila , b. , venturini - zilli , m. : . in : ictcs98 .",
    "( 1998 ) 123 .",
    "ehrhard , t. : finiteness spaces .",
    "struct . in comp .",
    "* 15*(4 ) ( 2005 ) 615646 .",
    "ehrhard , t. , regnier , l. : differential interaction nets .",
    "sci . * 364*(2 ) ( 2006 ) 166195 .",
    "faggian , c. : travelling on designs . in : csl .",
    "( 2002 ) 427441 .",
    "faggian , c. : interactive observability in ludics : the geometry of tests .",
    "sci . * 350*(2 ) ( 2006 ) 213233 .",
    "faggian , c. , piccolo , m. : ludics is a model for the finitary linear pi - calculus . in : tlca .",
    "( 2007 ) 148162 .",
    "faggian , c. , piccolo , m. : partial orders , event structures , and linear strategies . in : tlca .",
    "( 2009 ) 95111 .",
    "girard , j .- y . : on the meaning of logical rules i : syntax vs. semantics . in berger ,",
    "u. , schwichtenberg , h. , eds . : computational logic .",
    "heidelberg springer - verlag ( 1999 ) 215272 .",
    "girard , j .- y .",
    ": on the meaning of logical rules ii : multiplicatives and additives .",
    "foundation of secure computation , berger and schwichtenberg edts ( 2000 ) 183212 .",
    "girard , j .- y . : locus solum : from the rules of logic to the logic of rules .",
    "struct . in comp .",
    "sci . * 11*(3 ) ( 2001 ) 301506 .",
    "hyland , j.m.e . , ong , c.h.l . : on full abstraction for pcf : i , ii , and iii .",
    "* 163*(2 ) ( 2000 ) 285408 .",
    "lafont , y. : the finite model property for various fragments of linear logic . j. symb",
    ". log . * 62*(4 ) ( 1997 ) 12021208 .",
    "laurent , o. : tude de la polarization en logique .",
    "phd thesis , univ .",
    "aix - marseille ii ( 2002 ) .",
    "laurent , o. : polarized games .",
    ". logic * 130*(1 - 3 ) ( 2004 ) 79123 .",
    "maurel , f. : un cadre quantitatif pour la ludique .",
    "phd thesis , univ .",
    "paris vii ( 2004 ) .",
    "mazza , d. , pagani , m. : the separation theorem for differential interaction nets . in : lpar .",
    "( 2007 ) 393407 .",
    "mellis , p .- a . :",
    "asynchronous games 2 : the true concurrency of innocence .",
    "* 358*(2 - 3 ) ( 2006 ) 200228 .",
    "schtte , k. : ein system des verknpfenden schliessens .",
    "logic grundlagenf .",
    "* 2 * ( 1956 ) 5567 .",
    "terui , k. : ludics .",
    "( 2008 ) to appear in theor .",
    "in this appendix , we show a correspondence between the proof system for ludics introduced in [ proof system ] and the constant - only propositional fragment of _ polarized linear logic _ @xmath819 @xcite .",
    "this will ensure that our proof system is rich enough to capture a constructive variant of constant - only propositional classical logic .",
    "we recall the syntax of the constant - only propositional fragment of @xmath819 .",
    "the _ formulas _ are split into positive and negative ones and generated by the following grammar : @xmath820 the linear negation is defined in the usual way .",
    "sequent _ is of the form @xmath821 with @xmath822 a multiset of formulas .",
    "the inference rules of @xmath819 are given below :                strict sequents will play a crucial role for the correspondence between @xmath819 and the proof system for ludics ( theorem [ t - llp ] ) .",
    "the intuition , which we will formalize later , is that a strict sequent @xmath824 can be thought of as a sequent of the proof system of ludics ( omitting the information about designs ) of the form @xmath825 .",
    "a.   positive subderivation : @xmath827 that consists of positive inference rules only , where @xmath828 is a positive formula obtained from @xmath829 by applying positive connectives , and @xmath511 .",
    "for instance , if @xmath828 is of the form @xmath830 , there are two positive subderivations with conclusion @xmath831 : + @xmath832 b.   negative subderivation : @xmath833 that consists of negative inference rules only , where @xmath834 is a negative formula obtained from @xmath835 by applying negative connectives , and @xmath836 consist of formulas in @xmath837 .",
    "for instance , if @xmath834 is of the form @xmath838 , then there is ( essentially ) one negative subderivation with conclusion @xmath839 : + @xmath840 c.   @xmath841-dereliction : @xmath842      the above decomposition motivates us to cluster the logical connectives of the same polarity into _ synthetic connectives _ ( @xcite ) .",
    "consider the expressions finitely generated by : @xmath843 where @xmath75 ranges over the set of variables .",
    "we write @xmath844 ( resp.@xmath845 ) to denote the set of variables occurring in @xmath846 ( resp .",
    "@xmath847 ) .",
    "@xmath846 is a _ positive synthetic connective _ if for every subexpression of @xmath846 of the form @xmath848 , @xmath849 and @xmath850 are disjoint .",
    "for instance , @xmath851 is a positive synthetic connective while @xmath852 is not .",
    "likewise , @xmath847 is a _ negative synthetic connective _ if for every subexpression of @xmath847 of the form @xmath853 , @xmath854 and @xmath855 are disjoint .",
    "this condition is needed when we translate synthetic connectives to logical connectives of ludics .",
    "we indicate the variables occurring in @xmath846 by writing @xmath856 , and similarly for @xmath847 . given a negative synthetic connective @xmath847 , its _ dual _ @xmath857 is obtained by replacing @xmath858 with @xmath859 , @xmath860 with @xmath861 , @xmath862 with @xmath863 , @xmath864 with @xmath865 , and @xmath841 with @xmath866 respectively , in each occurrence of symbol .",
    "@xmath867 is similarly defined .",
    "+ the _ formulas _ of @xmath819 are then redefined inductively as follows : @xmath868 where @xmath869 is obtained from @xmath856 by substituting @xmath870 for @xmath871 ( @xmath872 ) .",
    "notice that when @xmath873 , @xmath874 can be any combination of @xmath859 and @xmath861 using @xmath863 and @xmath865 .",
    "to each positive synthetic connective @xmath875 , we can naturally associate a set of inference rules as follows .",
    "consider all possible positive subderivations with conclusion @xmath876 in the sense of ( i ) above .",
    "to each such derivation @xmath827 we associate an inference rule : @xmath877 for instance , to @xmath878 , we associate two inference rules :      likewise , each negative synthetic connective @xmath880 comes equipped with a unique inference rule derived from the negative subderivation with conclusion @xmath881 ( see ( ii ) above ) .",
    "for instance , @xmath882 is equipped with :      observe the asymmetry between the positive and negative cases here ; in the negative case , we leave the @xmath841-formulas @xmath884 in the premises .",
    "these formulas are to be dealt with by the @xmath841-dereliction rule .            1 .",
    "@xmath226 contains a nullary name @xmath521 and a unary name @xmath227 .",
    "if @xmath226 contains an @xmath40-ary name @xmath26 and an @xmath497-ary name @xmath69 , it also contains @xmath40-ary names @xmath886 , @xmath887 and an @xmath888-ary name @xmath889 ( example [ linear ] ) .",
    "given a negative synthetic connective @xmath847 , we inductively associate a set @xmath890 of negative actions of ludics as follows : @xmath891 notice that when @xmath892 , the variables @xmath37 occur in @xmath847 .",
    "hence @xmath893 above is certainly a negative action , since @xmath37 and @xmath71 are disjoint sequences due to the definition of negative synthetic connective .",
    "we finally let @xmath894 , where @xmath895 lists the variables occurring in @xmath847 . a positive synthetic connective @xmath846 is interpreted by @xmath896 .",
    "for instance , when @xmath878 and @xmath882 , we have @xmath897 with @xmath898 this induces a polarity - preserving translation from the formulas of @xmath819 to the logical behaviours of ludics : @xmath899    to establish a connection with @xmath819 , we simplify the proof system of [ proof system ] by taking its _ skeleton _ , namely by omitting all information about designs . the resulting proof system , which we call @xmath900 , consists of two sorts of inference rules : @xmath618{\\vdash \\bgamma } {   \\vdash \\bgamma , \\bn_{i_1 } & \\dots &   \\vdash \\bgamma , \\bn_{i_m } & ( \\coal\\langle\\bn_1 , \\dots , \\bn_n\\rangle \\in \\bgamma ) } \\qquad \\infer[(\\alpha ) ] { \\vdash \\bgamma , \\alpha(\\bp_1 , \\dots , \\bp_n ) } { \\{\\vdash \\bgamma ,   \\bp_{i_1 } , \\dots ,   \\bp_{i_m}\\}_{a(\\vx)\\in \\alpha_0}}\\ ] ] where @xmath488 , @xmath489 , @xmath573 and the indices @xmath620 are determined by the variables @xmath621 .",
    "one can annotate derivations in @xmath900 with designs as in section [ proof system ] .",
    "therefore the above theorem means that ludics designs can be used as term syntax for @xmath819 , as far as strict sequents and derivations are concerned ( although we have to verify carefully that the translation preserves the reduction relation ) .        1 .   to each action",
    "@xmath907 , we associate the synthetic connective @xmath908 ( @xmath909 , if @xmath26 is nullary ) ; 2 .   to each logical connective @xmath910 , we associate the synthetic connective @xmath911 ( @xmath912 , if @xmath913 ) ; 3 .   to each logical behaviour , we associate the formula of @xmath819 @xmath914 4 .   to each positive context @xmath915 of system @xmath900",
    ", we associate the multiset @xmath916 of formulas of @xmath819 ; 5 .   to each negative context @xmath449 of system @xmath900",
    ", we associate the multiset of formulas @xmath917 .",
    "it is routine to define an isomorphism between @xmath918 and @xmath919 ( resp .  between @xmath920 and @xmath921 ) in some natural sense .",
    "moreover , the translation of a sequent of system @xmath900 always results in a strict sequent of @xmath819 .",
    "we therefore conclude by theorem [ t - llp ] :"
  ],
  "abstract_text": [
    "<S> gdel s completeness theorem is concerned with provability , while girard s theorem in ludics ( as well as full completeness theorems in game semantics ) are concerned with proofs . </S>",
    "<S> our purpose is to look for a connection between these two disciplines . following a previous work @xcite </S>",
    "<S> , we consider an extension of the original ludics with contraction and universal nondeterminism , which play dual roles , in order to capture a polarized fragment of linear logic and thus a constructive variant of classical propositional logic .    </S>",
    "<S> we then prove a completeness theorem for proofs in this extended setting : for any behaviour ( formula ) @xmath0 and any design ( proof attempt ) @xmath1 , either @xmath1 is a proof of @xmath0 or there is a model @xmath2 of @xmath3 which defeats @xmath1 . compared with proofs of full completeness in game semantics , ours exhibits a striking similarity with proofs of gdel s completeness , in that it explicitly constructs a countermodel essentially using knig s lemma , proceeds by induction on formulas , and implies an analogue of lwenheim - skolem theorem . </S>"
  ]
}