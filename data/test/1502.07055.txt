{
  "article_text": [
    "field programmable gate arrays ( fpga ) are programmed specifically for the problem to be solved , hence they can achieve higher performance with lower power consumption than general purpose processors . therefore , fpga is a promising implementation technology for computationally intensive applications such as signal , image , and network processing tasks  @xcite .",
    "fast fourier transform ( fft ) is one of the most widely used operation in digital signal processing algorithms  @xcite and plays a significant role in numerous signal processing applications , such as image processing , speech processing , software defined radio etc .",
    "fft processors should be of higher throughput with lower computation time .",
    "so , for computing larger number of data samples , we have to think about the area of the fft processor since the number of stage of fft computation increases with a factor of @xmath2 . in the design of high throughput fft architectures ,",
    "energy - efficient design techniques can be used to maximize performance under power dissipation constraints .    spatial and parallel fft architecture ,",
    "also known as array architecture  @xcite , based on the cooley - tukey algorithm layout , is one of the potential high throughput designs . however , the implementation of the array architecture is hardware intensive .",
    "it achieves high performance by using spatial parallelism , while requiring more routing resources .",
    "however , as the problem size grows , unfolding the architecture spatially is not feasible due to serious power and area issue arisen by complex interconnections .",
    "the pipelined architectures are useful for ffts that require high data throughput  @xcite .",
    "the basic principle of pipelined architectures is to collapse the rows .",
    "radix-2 multi - path delay commutator  @xcite  @xcite was probably the most classical approach for pipeline implementation of radix-2 fft algorithm .",
    "disadvantages include an increase in area due to the addition of memories and delay which is related to the memory usage  @xcite .    in this paper , we propose a novel architecture of area efficient fft by reusing @xmath3 numbers of butterfly units more than once instead of using @xmath4 butterfly units once  @xcite .",
    "this is achieved by a time control unit which sends back the previously computed data of @xmath3 butterfly units to itself for @xmath5 times and reuses the butterfly units to complete fft computation .",
    "the area requirement is obviously smaller , only @xmath3 radix-@xmath6 elements , than the array architecture and pipelined architectures , @xmath0 being the number of sample points .",
    "the cooley - tukey fft algorithm is the most common algorithm for developing fft .",
    "this algorithm uses a recursive way of solving fft of any arbitrary size @xmath0 .",
    "the technique divides the larger fft into smaller ffts which subsequently reduce the complexity of the algorithm .",
    "if the size of the fft is @xmath0 then this algorithm makes @xmath7 where @xmath8 and @xmath9 are sizes of the smaller ffts .",
    "radix-2 decimation - in - time ( dit ) is the most common form of the cooley - tukey algorithm , for any arbitrary size @xmath0 .",
    "@xmath0 can be expressed as a power of 2 , that is , @xmath10 , where @xmath11 is an integer .",
    "this algorithm is called decimation - in - time since at each stage , the input sequence is divided into smaller sequences , i.e. the input sequences are decimated at each stage .",
    "a fft of @xmath0-point discrete - time complex sequence @xmath12 , indexed by @xmath13 is defined as : @xmath14    where @xmath15 .",
    "radix-2 divides the fft into two equal parts .",
    "the first part calculates the fourier transform of the even index numbers .",
    "the other part calculates the fourier transform of the odd index numbers and then finally merges them to get the fourier transform for the whole sequence .",
    "seperating the @xmath12 into odd and even indexed values of @xmath12 , we obtain @xmath16",
    "the area of a fft processor depends on the total number of butterfly units used .",
    "each butterfly unit consists of multiplier and adder / subtractor blocks .",
    "higher the bit resolution of samples , larger the area of these two mathematical blocks .",
    "according to traditional fft algorithm each stage contains @xmath3 numbers of butterfly units .",
    "therefore , for a traditional fft processor , the total number of butterfly units is given by @xmath17    in the proposed algorithm , @xmath3 number of butterfly units are reused for @xmath2 times . therefore , the modified architecture of fft processor requires @xmath18 number butterfly units which is given by @xmath19 .",
    "the proposed architecture of fft processor reduces the number of butterfly units by a factor of ( @xmath20 ) , which is given by @xmath21  .",
    "table  [ area ] shows that the number of multipliers and adders / subtractors for the proposed fft is less compared to that of the traditional fft .",
    ".comparison of butterfly units , multipliers and adders / subtractors [ cols=\"^,^,^\",options=\"header \" , ]        selected device & 6vsx475tff1759 - 2 + number of slice registers & 301 out of 595200 + number of slice luts & 748 out of 297600 + number of dsp48e1s & 16 out of 2016 +   + minimum period & 19.598ns + maximum frequency & 51.025mhz + minimum input arrival & 9.384ns + time before clock & + maximum output required & 0.665ns + time after clock & +",
    "the proposed architecture presents an area efficient radix-2 fft processor .",
    "the algorithm reuses the butterfly units of single stage more than once which reduces the area drastically .",
    "the architecture has been emulated and the performance analysis has been carried out in terms of overall response time and utilization of hardware resources of fpga .",
    "detailed analysis reveals that the proposed architecture reduces the area dramatically without compromising the response time .",
    "further improvements may be obtained by designing silicon layout and analysing the post - layout performance trade - off .",
    "g.  nordin , p.  milder , j.  hoe and m.  puschel , _ automatic generation of customized discrete fourier transform ips _",
    ", design automation conference , 2005 .",
    "proceedings.1em plus 0.5em minus 0.4em42nd , 2005 , pp .",
    "471474 .",
    "n.  k.giri and a.  sinha _ fpga implementation of a novel architecture for performance enhancement of radix-2 fft _ , acm sigarch computer architecture news , 1em plus 0.5em minus 0.4em vol.40 no.2 , may 2012 , pp .",
    "28 - 32 .",
    "y.  ouerhani , m.  jridi and a.  alfalou _ area - delay efficient fft architectuer using parallel processing and new memory sharing technique _ , journal of circuits , systems , and computers 21 1em plus 0,5em minus 0.4emworld scientic publishing company.,2012 vol-21 ."
  ],
  "abstract_text": [
    "<S> fast fourier transform ( fft ) of large number of samples requires huge hardware resources of field programmable gate arrays ( fpga ) , which needs more area and power . in this paper </S>",
    "<S> , we present an area efficient architecture of fft processor that reuses the butterfly elements several times . </S>",
    "<S> the fft processor is simulated using vhdl and the results are validated on a virtex-6 fpga . </S>",
    "<S> the proposed architecture outperforms the conventional architecture of a @xmath0-point fft processor in terms of area which is reduced by a factor of @xmath1 with negligible increase in processing time .    </S>",
    "<S> fft , fpga , resource optimization </S>"
  ]
}