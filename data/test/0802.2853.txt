{
  "article_text": [
    "this paper presents a formal statement and an assisted proof of a jordan curve theorem ( jct ) discrete version . in its common form",
    ", the theorem says that the complement of a continuous simple closed curve ( a jordan curve ) @xmath0 in an affine real plane is made of two connected components whose border is @xmath0 , one being bounded and the other not .",
    "the discrete form of jct we deal with states that in a finite subdivision of the plane , breaking a ring @xmath1 of faces increases by @xmath2 the connectivity of the subdivision .",
    "it is a weakened version of the original theorem where the question of bound is missing .",
    "however , it is widely used in computational geometry and discrete geometry for imaging , where connection is the essential information @xcite . in fact , we only are in a combinatoric framework , where any embedding is excluded , and where bounding does not make sense .    in computational topology ,",
    "subdivisions are best described by map models , the most general being _ hypermaps _",
    "we propose a purely combinatorial proof of jct based on this structure . the hypermap framework is entirely formalized and the proofs are developed interactively and verified by the coq proof assistant @xcite .",
    "using an original way to model , build and destruct hypermaps , the present work brings new simple constructive planarity and connectivity criteria .",
    "it proposes a new direct expression of jct and a simple constructive proof with algorithmic extensions .",
    "it is also a large benchmark for the software specification framework we have been developing in the last fifteen years for map models used in geometric modeling and computer imagery @xcite .",
    "the useful coq features are reminded and the whole process is described , but the full details of the proofs are omitted .",
    "section [ rw ] summarizes related work .",
    "section [ ma ] recalls some mathematical materials .",
    "section [ fh ] proposes basic hypermap specifications .",
    "section [ pc ] proves constructive criteria of hypermap planarity and connectivity .",
    "section [ fr ] inductively specifies the rings and their properties .",
    "section [ jct ] proves the discrete jct .",
    "section [ cl ] concludes .",
    "the jct is a result of classical plane topology , first stated by c. jordan in 1887 , but of which o. veblen gives the first correct proof in 1905 . in 1979 ,",
    "tutte proposes operations and properties of combinatorial maps , _",
    "e.g. _ planarity and euler s formula , defines rings and proves a discrete jct @xcite .",
    "our theorem statement is comparable , but our framework is modeled differently and all our proofs are formalized and computer - assisted .    in 2003 , g. bauer and t. nipkow specify planar graphs and triangulations in isabelle / isar to carry out interactive proofs of euler s formula and of the five colour theorem @xcite .",
    "however , they do not approach the jct . in 2005 ,",
    "a. kornilowicz designs for the mizar project a semi - automated classical proof of a continuous form of jct in an euclidean space @xcite . in 2005",
    "also , on his way towards the proof of the kepler conjecture in the flyspeck projet , t. hales proves the jct for planar rectangular grids with the hol light system , following the kuratowski characterization of planarity @xcite .    in 2005 always ,",
    "g. gonthier _",
    "_ prove the four colour theorem using coq .",
    "plane subdivisions are described by hypermaps , and euler s formula is used as a global planarity criterion @xcite .",
    "a local criterion , called _ hypermap jordan property _ , is proven equivalent .",
    "the main part of this work is the gigantic proof of the four colour theorem with hypermaps and sophisticated proof techniques .",
    "the hypermap formalization is very different from ours and it seems that jct is not explicitly proven there . finally , since 1999 , we carry out experiments with coq for combinatorial map models of space subdivisions @xcite .",
    "[ hd ] a _ hypermap _ is an algebraic structure @xmath3 , where @xmath4 is a finite set whose elements are called _ darts _ , and @xmath5 , @xmath6 are permutations on @xmath4 .",
    "if @xmath7 , @xmath8 is the @xmath9-_successor _ of @xmath10 , @xmath10 is the @xmath9-_predecessor _ of @xmath8 , and @xmath10 and @xmath8 are said to be @xmath9-_linked_.    in fig .",
    "[ fig : uhmap1 ] , as functions @xmath5 and @xmath6 on @xmath11 are permutations , @xmath12 is a hypermap .",
    "it is drawn on the plane by associating to each dart a curved arc oriented from a bullet to a small stroke : @xmath13-linked ( resp .",
    "@xmath2-linked ) darts share the same small stroke ( resp .",
    "bullet ) . by convention , in the drawings of hypermaps on surfaces ,",
    "@xmath9-successors turn counterclockwise around strokes and bullets .",
    "let @xmath12 be a hypermap .",
    "( orbits and hypermap cells)[oc ] + ( 1 ) let @xmath14 be @xmath15 functions in @xmath4 .",
    "the _ orbit _ of @xmath16 for @xmath14 is the subset of @xmath4 denoted by @xmath17 , the elements of which are accessible from @xmath10 by any composition of @xmath14 . + ( 2 ) in @xmath18 , @xmath19 is the @xmath13-orbit or _ edge _ of dart @xmath10 , @xmath20 its @xmath2-orbit or _ vertex _ , @xmath21 its _ face _ for @xmath22 , and @xmath23 its _ ( connected ) component_.    in fig .",
    "[ fig : uhmap1 ] the hypermap contains @xmath24 edges ( strokes ) , @xmath25 vertices ( bullets ) , @xmath25 faces and @xmath26 components .",
    "for instance , @xmath27 is the edge of dart @xmath26 , @xmath28 its vertex .",
    "faces are defined , through @xmath29 , for a dart traversal in counterclockwise order , when the hypermap is drawn on a surface .",
    "then , every face which encloses a bounded ( resp .",
    "unbounded ) region on its left is called _ internal _ ( resp .",
    "_ external _ ) . in fig .",
    "[ fig : uhmap1 ] , the ( internal ) face of @xmath30 is @xmath31 and the ( external ) face of @xmath32 is @xmath33 .",
    "let @xmath34 and @xmath35 be the numbers of darts , edges , vertices , faces and components of @xmath18 .",
    "( euler characteristic , genus , planarity ) + ( 1 ) the _ euler characteristic _ of @xmath18 is @xmath36 .",
    "+ ( 2 ) the _ genus _ of @xmath18 is @xmath37 .",
    "+ ( 3 ) when @xmath38 , @xmath18 is said to be _ planar_.    for instance , in fig . [ fig : uhmap1 ] , @xmath39 and @xmath40 . consequently , the hypermap is non planar .",
    "these values satisfy the following results :    @xmath41 is an even integer and @xmath42 is a natural number .    a non empty connected @xmath43 i.e. with @xmath44 @xmath43 planar hypermap satisfies @xmath45 .",
    "when @xmath46 , the _ representation _ of @xmath18 on an _ orientable closed _ surface is a mapping of edges and vertices onto points , darts onto open oriented jordan arcs , and faces onto open connected regions .",
    "it is an _ embedding _ when every component of @xmath18 realizes a partition of the surface .",
    "then , the genus of @xmath18 is the minimum number of _ holes _ in an orientable closed surface where such an embedding is possible , thus drawing a subdivision , or a polyhedron , by hypermap component @xcite .",
    "for instance , all the components of the hypermap in fig . [",
    "fig : uhmap1 ] can be embedded on a torus ( @xmath2 hole ) but not on a sphere or on a plane ( @xmath13 hole ) . when a ( planar ) hypermap component is embedded on a plane ,",
    "the corresponding subdivision has exactly one unbounded ( external ) face . but",
    "a non planar hypermap can never be embedded on a plane : in a drawing on a plane , some of its faces are neither internal nor external , _ e.g. _ @xmath47 in fig .",
    "[ fig : uhmap1 ] .",
    "conversely , any subdivision of an _ orientable closed _ surface can be modeled by a hypermap .",
    "in fact , the formal presentation which follows is _ purely combinatorial _ , _",
    "i.e _ without any topological or geometrical consideration .    -.3 cm      to state the version of jct we will prove , we need the concepts of _ double - link _ , _ adjacent faces _ and _ ring of faces _ in a hypermap @xmath48 .",
    "( double - link and adjacent faces ) + ( 1 ) a _ double - link _ is a pair of darts @xmath49 where @xmath8 and @xmath50 belong to the same edge .",
    "+ ( 2 ) the faces @xmath51 and @xmath52 of @xmath18 are said to be _",
    "adjacent by the double - link _ @xmath49 if @xmath8 is a dart of @xmath51 and @xmath50 a dart of @xmath52 .",
    "we choose a face adjacency _ by an edge _ rather than _ by a vertex _ as does w.t .",
    "tutte @xcite .",
    "in fact , due to the homogeneity of dimensions @xmath13 and @xmath2 in a hypermap , both are equivalent .",
    "( ring of faces ) [ rof ] + a _ ring of faces _",
    "@xmath1 of length @xmath15 in @xmath18 is a non empty sequence of double - links @xmath53 , for @xmath54 , with the following properties , where @xmath55 and @xmath56 are the edge and face of @xmath57 : + ( 0 ) _ unicity : _ @xmath55 and @xmath58 are distinct , for @xmath59 and @xmath60 ; + ( 1 ) _ continuity : _ @xmath56 and @xmath61 are adjacent by the double - link @xmath53 , for @xmath62 ; + ( 2 ) _ circularity _ , or _",
    "closure : _",
    "@xmath63 and @xmath64 are adjacent by the double - link @xmath65 ; + ( 3 ) _ simplicity : _ @xmath56 and @xmath66 are distinct , for @xmath59 and @xmath60 .",
    "this notion simulates a jordan curve represented in dotted lines in fig .",
    "[ fig : uring4bis ] on the left for @xmath67 .",
    "then , we define the _ break along a ring _ , illustrated in fig .",
    "[ fig : uring4bis ] on the right .",
    "( break along a ring ) [ bar ] + let @xmath1 be a ring of faces of length @xmath15 in @xmath18 .",
    "let @xmath68 , for @xmath69 , be a hypermap sequence , where the @xmath70 are recursively defined by : + ( 1 ) @xmath71 : @xmath72 = @xmath5 ; + ( 2 ) @xmath73 : for each dart @xmath74 of @xmath4 : @xmath75 = if @xmath76 then @xmath77 else if @xmath78 then @xmath57 else @xmath79 + then , @xmath80 is said to be obtained from @xmath18 by a _",
    "break along _ @xmath1 .",
    "finally , the theorem we will prove in coq mimics the behaviour of a cut along a simple jordan curve of the plane ( or of the sphere ) into two components :    let @xmath18 be a planar hypermap with @xmath35 components , @xmath1 be a ring of faces in @xmath18 , and @xmath81 be the break of @xmath18 along @xmath1 .",
    "the number @xmath82 of components of @xmath81 is such that @xmath83 .",
    "-.3 cm      in coq , we first define an inductive type dim for the two dimensions at stake :    inductive dim : set:= zero : dim | one : dim .    all objects being typed in coq , dim has the type set of all concrete types .",
    "its _ constructors _ are the constants zero and one . in each inductive type ,",
    "the generic equality predicate @xmath84 is built - in but its decidability is not , because coq s logic is intuitionistic . for dim ,",
    "the latter can be established as the lemma :    lemma eq_dim_dec : forall i j : dim , i = j+  i = j .",
    "once it is made , its proof is an object of the sum type \\{i = j}+\\{`~`i = j } , _ i.e. _ a function , named eq@xmath85dim@xmath85dec , that tests whenever its two arguments are equal .",
    "the lemma is interactively proven with some tactics , the reasoning being merely a structural induction on both i and j , here a simple case analysis .",
    "indeed , from each inductive type definition , coq generates an _ induction principle _ , usable either to prove propositions or to build total functions on the type .",
    "we identify the type dart and its equality decidability eq@xmath85dart@xmath85dec with the built - in nat and eq@xmath85nat@xmath85dec . finally , to manage exceptions , a nil dart is a renaming of 0 :    definition dart:= nat .",
    "definition eq_dart_dec:= eq_nat_dec . definition nil:= 0 .",
    "-.3 cm      the hypermaps are now approached by a general notion of _ free map _ , thanks to a free algebra of terms of inductive type fmap with @xmath26 constructors , v , i and l , respectively for the _ empty _ ( or _ void _ ) map , the _ insertion _ of a dart , and the _ linking _ of two darts :    inductive fmap : set:= v : fmap | i : fmap->dart->fmap | l : fmap->dim->dart->dart->fmap .",
    "for instance , the hypermap in fig .",
    "[ fig : uhmap1 ] can be modeled by the free map represented in fig.[fig : hmap2 ] where the @xmath13- and @xmath2-links by l are represented by arcs of circle , and where the orbits remain open .",
    "again , coq generates an induction principle on free maps .",
    "observers _ of free maps can be defined .",
    "the predicate exd express that a dart exists in a hypermap .",
    "its definition is recursive , which is indicated by fixpoint , thanks to a pattern matching on m written match m with .... the attribute @xmath86struct m@xmath87 allows coq to verify that the recursive calls are performed on smaller fmap terms , thus ensuring termination .",
    "the result is false or true , basic constants of prop , the built - in type of propositions .",
    "note that terms are in prefix notation and that @xmath85 is a place holder :    fixpoint exd(m : fmap)(z : dart)struct m : prop:= match m with v = > false | i m0 x = > z = x exd m0 z | l m0 _ _ _ = > exd m0 z end .",
    "the decidability exd@xmath85dec of exd directly derives , thanks to a proof by induction on m. then , a version , denoted a , of operation @xmath88 of definition [ hd ] completed with nil for convenience is written as follows , the inverse a@xmath851 being similar :    fixpoint a(m : fmap)(k : dim)(z : dart)struct m : dart:= match m with v = > nil | i m0 x = > a m0 k z | l m0 k0 x y = >",
    "if eq_dim_dec k k0 then if eq_dart_dec z x then y else a m0 k z else a m0 k z end .",
    "predicates succ and pred express that a dart has a k - successor and a k - predecessor ( not nil ) , with the decidabilities succ@xmath85dec and pred@xmath85dec . in hypermap m of fig .",
    "[ fig : hmap2 ] , a m zero 4 = 3 , a m zero 5 = nil , succ m zero 4 = true , succ m zero 5 = false , a@xmath851 m one 2 = 1 .",
    "in fact , when a k - orbit remains open , which will be required in the following , we can obtain its top and bottom from one of its dart z. then , we can do as if the k - orbit were closed , thanks to the operations ca and ca@xmath851 which _ close _ a and a@xmath851 , in a way similar to operation @xmath89 of w.t .",
    "tutte @xcite .",
    "for instance , in fig .",
    "[ fig : hmap2 ] , top m one 1 = 3 , bottom m one 1 = 4 , ca m one 3 = 4 , ca@xmath851 m one 4 = 3 .    finally , _ destructors _ are also recursively defined .",
    "first , d : fmap->dart->fmap deletes the latest insertion of a dart by i. second , b , b@xmath85:fmap->dim->dart->fmap break the latest k - link inserted for a dart by l , forward and backward respectively .",
    "cm      preconditions written as predicates are introduced for i and l :    definition prec_i(m : fmap)(x : dart):= x < > nil /   exd m x. definition prec_l(m : fmap)(k : dim)(x y : dart):= exd m x /  exd m y /   succ m k",
    "x /   pred m k y /  ca m k x < > y.    if i and l are used under these conditions , the free map built necessarily has open orbits .",
    "in fact , thanks to the closures ca and ca@xmath851 , it can always be considered as a true hypermap exactly equipped with operations @xmath88 of definition [ hd ] .",
    "it satisfies the _ invariant _ :    fixpoint inv_hmap(m : fmap):prop:= match m with v = > true | i m0 x = > inv_hmap m0 /  prec_i m0 x | l m0 k0 x y = >",
    "inv_hmap m0 /  prec_l m0 k0 x y end .",
    "such a hypermap was already drawn in fig .",
    "[ fig : hmap2 ] .",
    "fundamental proven properties are that , for any m and k , ( a m k ) and ( a@xmath851 m k ) are _ injections _ inverse of each other , and ( ca m k ) and ( ca@xmath851 m k ) are _ permutations _ inverse of each other , and are closures .",
    "finally , traversals of faces are based on function f and its closure cf , which correspond to @xmath29 ( definition [ oc ] ) .",
    "so , in fig .",
    "[ fig : hmap2 ] , f m 1 = nil , cf m 1 = 5 . properties similar to the ones of a , ca are proven for f , cf and their inverses f@xmath851 , cf@xmath851 .    -.3 cm      testing if there exists a path from a dart to another in an orbit for a hypermap permutation is of prime importance , for instance to determine the number of orbits .",
    "the problem is exactly the same for @xmath5 , @xmath6 or @xmath29 ( definitions [ hd ] and [ oc ] ) .",
    "that is why a _ signature _ sigf with formal parameters f , f@xmath851 and their properties is first defined .",
    "next , a _ generic module _ ( or _ functor _ ) mf(m : sigf ) , the formal parameter m being a _ module _ of type sigf , is written in coq to _ package _ generic definitions and proven properties about f and f@xmath851 . among them , we have that each f - orbit of m is _ periodic _ with a positive smallest uniform period for any dart z of the orbit . the predicate expo m z",
    "t asserts the _ existence of a path _ in an f - orbit of m from a dart z to another t , which is proven to be a _",
    "decidable equivalence_. note that most of the properties are obtained by _",
    "noetherian induction _ on the length of iterated sequences of f - successors , bounded by the period .",
    "appropriate modules , called ma0 , ma1 and mf , are written to instantiate for ( ca m zero ) , ( ca m one ) and ( cf m ) definitions and properties of f. so , a generic definition or property in mf(m ) has to be prefixed by the module name to be concretely applied .",
    "for instance , mf.expo m z t is the existence of a path from z to t in a face . in the following ,",
    "mf.expo is abbreviated into expf .",
    "for instance , in fig .",
    "[ fig : hmap2 ] , expf m 1 5 = true , expf m 5 3 = false .",
    "finally , a binary relation eqc stating that two darts belong to the same component is easily defined by induction .",
    "for instance , in fig .",
    "[ fig : hmap2 ] , we have eqc m 1 5 = true , eqc m 1 13 = false . we quickly prove that ( eqc m ) is a _",
    "decidable equivalence_.    -.3 cm      we now count cells and components of a hypermap using the coq library module zarith containing all the features of z , the integer ring , including tools to solve linear systems in presburger s arithmetics .",
    "the numbers nd , ne , nv , nf and nc of darts , edges , vertices , faces and components are easily defined by induction .",
    "euler s characteristic ec and genus derive .",
    "the genus theorem and the euler formula ( for any number ( nc m ) of components ) are obtained as corollaries of the fact that ec is even and satisfies 2 * ( nc m ) > = ( ec m ) @xcite .",
    "remark that - > denotes a functional type in set as well as an implication in prop :    definition ec(m : fmap ) : z:= nv m + ne m + nf m - nd m. definition genus(m : fmap ) :",
    "z:= ( nc m ) - ( ec m)/2 .",
    "definition planar(m : fmap ) : prop:= genus m = 0 .",
    "theorem genus_theorem : forall m : fmap , inv_hmap m - > genus m > = 0 .",
    "theorem euler_formula : forall m : fmap , inv_hmap m - > planar m - > ec m / 2 = nc m.",
    "a consequence of the previous theorems is a completely constructive _ criterion of planarity _ , when one correctly _ links _ with l at dimensions @xmath13 or @xmath2 , _",
    "e.g. _ for @xmath13 :    theorem planarity_crit_0 : forall ( m : fmap)(x y : dart ) , inv_hmap m - > prec_l m zero x y - > ( planar ( l m zero x y ) < - > ( planar m /  (   eqc m x y expf m ( ca_1 m one x ) y ) ) ) .",
    "so , the planarity of m is preserved for ( l m zero x y ) _ iff _ one of the following two conditions holds : ( 1 ) x and y are not in the same component of m ; ( 2 ) x@xmath851 = ( ca@xmath851 m one x ) and y are in the same face of m , _ i.e. _ the linking operates _ inside the face _ containing y. fig .",
    "[ fig : planarity ] illustrates @xmath13-linking inside a face , giving two new faces , and between two ( connected ) faces , giving a new face , thus destroying planarity . finally , after a long development , we prove the expected _ planarity criterion _ , when breaking a link with b , at any dimension , _ e.g. _ for @xmath13 :    lemma planarity_crit_b0 : forall ( m : fmap)(x : dart ) , inv_hmap m - > succ m zero x - > let m0 : = b m zero x in let y : = a m zero x in ( planar m < - > ( planar m0 /  (   eqc m0 x y expf m0 ( ca_1 m0 one x ) y ) ) ) .",
    "such a lemma is easy to write / understand as a _ mirror form _ of the @xmath13-linking criterion , but it is much more difficult to obtain",
    ". it would be fruitful to relate these constructive / destructive criteria with the static one of g. gonthier @xcite .",
    "finally , some useful results quickly characterize the effect of a link break on the _ connectivity _ of a planar hypermap . for instance , when @xmath13-breaking x , a disconnection occurs _",
    "m y x0 :    lemma disconnect_planar_criterion_b0:forall ( m : fmap)(x : dart ) , inv_hmap m - > planar m - > succ m zero x - > let y : = a m zero x in let x0 : = bottom m zero x in ( expf m y x0 < - >  eqc ( b m zero x ) x y ) .",
    "-.3 cm      since an edge is always open in our specification , when doing the backward break of a unique @xmath13-link from y or y , we in fact realize a double - link break , as in definition [ bar ] .",
    "so , we choose to identify a double - link by the unique dart , we called x , where the @xmath13-link to be broken begins .",
    "in fact , with respect to the face f _ on the left of _ the double - link in the ring , there are two cases , depending on the position of x and its forward @xmath13-link , as shown in fig .",
    "[ fig : identface ] ( a ) and ( b ) .",
    "we decided to distinguish them by a boolean b. then , a double - link is coded by a pair ( x , b ) .",
    "so , we implicitely identify each ring face f by the double - link coding on its right in the ring . in fig .",
    "[ fig : identface ] ( a ) , face f is identified by ( x , true ) and contains y:= a m zero x , whereas in fig .",
    "[ fig : identface ] ( b ) , face f is identified by ( x , false ) and contains x0:= bottom m zero x. these modeling choices considerably simplify the problems . indeed ,",
    "in closed orbits , a true double - link break would entail @xmath90 applications of b followed by @xmath90 applications of l , and would be much more complicated to deal with in proofs .    -.3",
    "cm      first , we inductively define linear lists of pairs of booleans and darts , with the two classical constructors lam and cons , and usual observers and destructors , which we do not give , because their effect is directly comprehensible :    inductive list : set : = lam : list | cons : dart*bool - > list - > list .",
    "such a list is composed of couples ( x , b ) , each identifying a face f : if b is true , f is represented by y:= a m zero x , otherwise by x0:= bottom m zero x ( fig .",
    "[ fig : identface ] ) . in the following ,",
    "bl m l breaks all the @xmath13-links starting from the darts of list l in a hypermap m. now , we have to model the conditions required for list l to be a ring of hypermap m. translating definition [ rof ] , we have four conditions , called pre@xmath85ringk m l , for k @xmath91 , which we explain in the following sections . finally , a predicate ring is defined by :    definition ring(m : fmap)(l : list):prop:=  emptyl l / pre_ring0 m l /  pre_ring1 m l /  pre_ring2 m l /  pre_ring3 m l.    -.3 cm      the predicate distinct@xmath85edge@xmath85list m x l0 saying that the edges of l0 are distinct in m from a given edge of x , pre@xmath85ring0 m l is defined recursively on l to impose that all edges in l are distinct : condition ( 0 ) of definition [ rof ] .",
    "it also imposes that each dart in l has a @xmath13-successor , in order to have well defined links , which is implicit in the mathematical definition , but not in our specification whith open orbits .",
    "fixpoint pre_ring0(m : fmap)(l : list)struct l : prop:= match l with lam = > true | cons ( x , _ ) l0 = >",
    "pre_ring0 m l0 /  distinct_edge_list m x l0 /  succ m zero x end .",
    "-.3 cm      then , we define adjacency between two faces identified by xb = ( x , b ) and xb = ( x , b ) , along the link corresponding to xb :    definition adjacent_faces(m : fmap)(xb xb:dart*bool):= match xb with ( x , b ) = > match xb with ( x,b ) = > let y : = a m zero x in let y:= a m zero x in let x0 : = bottom m zero x in let x0:= bottom m zero x in if eq_bool_dec b true then if eq_bool_dec b true then expf m x0 y else expf m",
    "x0 x0 else if eq_bool_dec b true then expf m y y else expf m y x0 end end .",
    "this definition is illustrated in fig .",
    "[ fig : adjacency ] for the four possible cases of double - link codings .",
    "so , the predicate pre@xmath85ring1 m l recursively specifies that two successive faces in l are adjacent : condition ( 1 ) in definition [ rof ] :    fixpoint pre_ring1(m : fmap)(l : list)struct l : prop:= match l with lam = > true | cons xb l0 = > pre_ring1 m l0 /   match l0 with lam = > true | cons xb",
    "l = > adjacent_faces m xb xb end end .",
    "-.3 cm      the predicate pre@xmath85ring2 m l specifies that the last and first faces in l are adjacent : condition ( 2 ) of circularity in definition [ rof ] :    definition pre_ring2(m : fmap)(l : list):prop:= match l with lam = > true | cons xb l0 = > match xb with ( x , b ) = > let y : = a m zero x in match l0 with lam = > let x0 : = bottom m zero x in expf m y x0 | cons _",
    "l = > let xb:= last l0 in adjacent_faces m xb xb end end end .    -.3",
    "cm      the predicate specifiying that the faces of m identified by xb and xb are distinct is easy to write by cases on the booleans in xb and xb. the predicate distinct@xmath85face@xmath85list m xb l0 expressing that the face identified by xb is distinct from all faces of list l0 entails .",
    "then , the predicate pre@xmath85ring3 m l says that all faces of l are distinct : condition ( 3 ) in definition [ rof ] :    fixpoint pre_ring3(m : fmap)(l : list)struct l : prop:= match l with lam = > true | cons xb l0 = > pre_ring3 m l0 /  distinct_face_list m xb l0 end .",
    "the general principle of the jct proof for a hypermap m and a ring l is a structural induction on l. the case where l is empty is immediatly excluded because l is not a ring by definition .",
    "thus the true first case is when l is _ reduced to one element _ , _",
    "i.e. _ is of the form cons ( x , b ) lam .",
    "then , we prove the following lemma as a direct consequence of the planarity criterion planarity@xmath85crit@xmath85b0 and the criterion face@xmath85cut@xmath85join@xmath85criterion@xmath85b0 :    lemma jordan1:forall(m : fmap)(x : dart)(b : bool ) , inv_hmap m - > planar m - > let l:= cons ( x , b ) lam in ring m l - > nc ( bl m l ) = nc m + 1 .    when a ring l1 contains _ at least two elements _",
    ", we prove that the condition ` ~`expf m y x0 must hold with the first element ( x , b ) of l1 ( in fact , conditions @xmath92 and @xmath93 are enough ) :    lemma ring1_ring3_connect : forall(m : fmap)(x x:dart)(b b:bool)(l : list ) , inv_hmap m - > let l1:= cons ( x , b ) ( cons ( x,b ) l ) in let y:=a m zero x in let x0:= bottom m zero x in planar m - > pre_ring1 m l1 - > pre_ring3 m l1 - >  expf m y x0 .    in this case , thanks to disconnect@xmath85planar@xmath85criterion@xmath85b0 ( section [ pc ] ) , the lemma entails that the break of the first ring link does never disconnect the hypermap .",
    "then , after examining the behavior of pre@xmath85ringk , for k @xmath91 , we are able to prove the following lemma which states that the four ring properties are preserved after the first break in l :    lemma pre_ring_b : forall(m : fmap)(l : list ) , inv_hmap m - > planar m - > let x : = fst ( first l ) in let y : = a m zero x in let x0 : = bottom m zero x in let m1 : = b m zero x in  expf m y x0 - > ring m l - > ( pre_ring0 m1 ( tail l ) /  pre_ring1 m1 ( tail l ) /  pre_ring2 m1 ( tail l ) /  pre_ring3 m1 ( tail l ) ) .",
    "the most difficult is to prove the part of the result concerning pre@xmath85ringk , for k @xmath91 .",
    "the four proofs are led by induction on l in separate lemmas . for pre@xmath85ring0 ,",
    "the proof is rather simple .",
    "but , for the other three , the core is a long reasoning where @xmath90 , @xmath26 or @xmath94 links are involved in input . since each link contains a boolean , sometimes appearing also in output , until @xmath95 cases are to be considered to combine the boolean values .",
    "finally , from jordan1 and pre@xmath85ring@xmath85b above , we have the expected result by a quick reasoning by induction on l , where links are broken one by one from the first :    theorem jordan : forall(l : list)(m : fmap ) , inv_hmap m - > planar m - > ring m l - > nc ( bl m l ) = nc m + 1 .    it is clear that , provided a mathematical hypermap @xmath18 and a mathematical ring @xmath1 conform to definitions [ hd ] and [ rof ] , we can always describe them as terms of our specification framework in order to apply our jct .",
    "conversely , given a hypermap term , some mathematical rings can not directly be written as terms .",
    "to do it , our ring description and our jct proof have to be slightly extended . however , that is not necessary for the _ combinatorial maps _ ( where @xmath5 is an involution ) terms , for which our ring specification and our jct formalization are _",
    "complete_. this is more than enough to affirm the value of our results .",
    "we have presented a new discrete statement of the jct based on hypermaps and rings , and a formalized proof assisted by the coq system .",
    "our hypermap modeling with _ open orbits _ simplifies and precises most of known facts .",
    "it also allows to obtain some new results , particularly about hypermap construction / destruction , connection / disconnection and planarity .",
    "this work involves a substantial framework of hypermap specification , which is built _ from scratch _ , _",
    "i.e. _ exempt from any proper axiom .",
    "it is basically the same as the one we have designed to develop geometric modelers via algebraic specifications @xcite .",
    "so , we know how to efficiently implement all the notions we formally deal with .",
    "the coq system turned out to be a precious auxiliary to guide and check all the process of specification and proof .",
    "the preexistent framework of hypermap specification represents about 15,000 lines of coq , and the jct development about 5,000 lines , including about 25 new definitions , and 400 lemmas and theorems .",
    "note that all results about the dimension 0 were actually proven , but some planarity properties about dimension 1 , which are perfectly symmetrical , have just been admitted .",
    "however , the jct formal proof is complete .",
    "so , we have a solid foundation to tackle any topological problem involving orientable surface subdivisions .",
    "extensions are in 2d or 3d computational geometry and geometric modeling by introducing embeddings @xcite , and computer imagery by dealing with pixels @xcite or voxels ."
  ],
  "abstract_text": [
    "<S> this paper presents a formalized proof of a discrete form of the jordan curve theorem . </S>",
    "<S> it is based on a hypermap model of planar subdivisions , formal specifications and proofs assisted by the coq system . </S>",
    "<S> fundamental properties are proven by structural or noetherian induction : genus theorem , euler s formula , constructive planarity criteria . a notion of ring of faces </S>",
    "<S> is inductively defined and a jordan curve theorem is stated and proven for any planar hypermap .    jean - franois dufourd </S>"
  ]
}