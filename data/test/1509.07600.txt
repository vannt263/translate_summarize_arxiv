{
  "article_text": [
    "the tohoku - pacific ocean earthquake happened in japan on march 11 , 2011 , and many people failed to evacuate and lost their lives due to severe attack by tsunamis . from the viewpoint of disaster prevention from city planning and evacuation planning , it has now become extremely important to establish effective evacuation planning systems against large scale disasters in japan . in particular , arrangements of tsunami evacuation buildings in large japanese cities near the coast has become an urgent issue . to determine appropriate tsunami evacuation buildings , we need to consider where",
    "evacuation buildings are located and how to partition a large area into small regions so that one evacuation building is designated in each region .",
    "this produces several theoretical issues to be considered . among them",
    ", this paper focuses on the location problem of the evacuation building assuming that we fix the region such that all evacuees in the region are planned to evacuate to this building . in this paper",
    ", we consider the simplest case for which the region consists of a single road . + in order to represent the evacuation",
    ", we consider the _ dynamic _ setting in graph networks , which was first introduced by ford et al .",
    "@xcite . in a graph network under the dynamic setting",
    ", each vertex is given supply and each edge is given length and capacity which limits the rate of the flow into the edge per unit time .",
    "we call such networks under the dynamic setting _ dynamic networks_. unlike in static networks , the time required to move supply from one vertex to a sink can be increased due to congestion caused by the capacity constraints , which require supplies to wait at vertices until supplies preceding them have left . in this paper",
    ", we consider the flow on dynamic networks as continuous , that is , each input value is given as a real number , and supply , flow and time are defined continuously .",
    "then each supply can be regarded as fluid , and edge capacity is defined as the maximum amount of supply which can enter an edge per unit time .",
    "the _ 1-sink location problem in dynamic networks _ is defined as the problem which requires to find the optimal location of a sink in a given dynamic network so that all supplies are sent to the sink as quickly as possible .",
    "+ in order to evaluate an evacuation , we can naturally consider two types of criteria : _ completion time criterion _ and _ total time criterion_. in this paper we adopt the latter one ( for the former one , refer to @xcite ) .",
    "we here define a _ unit _ as an infinitesimally small portion of supply .",
    "given a sink location @xmath1 in a dynamic network , let us consider an evacuation to @xmath1 starting at time @xmath4 and define the _ evacuation time _ of a unit to @xmath1 as the time at which the unit reaches @xmath1 in the evacuation .",
    "the total time for the evacuation to @xmath1 is defined as the sum of evacuation times over all infinitesimal units to @xmath1 .",
    "then , the minimum total time for all possible evacuations to @xmath1 could be the criterion for the optimality of sink location , which we adopt . given a dynamic network , we define the _ 1-median problem _ as the problem which requires to find a sink location minimizing the minimum total time , and the optimal solution is called the _ median_. + although the above criterion is reasonable for the sink location , it may not be practical since the number of evacuees in an area may vary depending on the time ( e.g. , in an office area in a big city , there are many people during the daytime on weekdays while there are much less people on weekends or during the night time ) .",
    "so , in order to take into account the uncertainty of population distribution , we consider the _",
    "maximum regret _ for a sink location as another evaluation criterion assuming that for each vertex , we only know an interval of vertex supply . then , the _ minimax regret 1-median problem in dynamic path networks _ is formulated as follows .",
    "a particular assignment of supply to each vertex is called a _",
    "scenario_. here , for a sink location @xmath1 and a scenario @xmath0 , we denote the minimum total time by @xmath5 .",
    "also let @xmath6 denote the median under @xmath0 .",
    "the problem can be understood as a 2-person stackelberg game as follows .",
    "the first player picks a sink location @xmath1 and the second player chooses a scenario @xmath0 that maximizes the _ regret _ defined as @xmath7 .",
    "the objective of the first player is to choose @xmath1 that minimizes the maximum regret .",
    "+ related to the minimax regret facility location in graph networks , especially for trees , some efficient algorithms have been presented by  @xcite . for dynamic networks ,",
    "cheng et al .",
    "@xcite first studied the _",
    "minimax regret 1-center problem _ in path networks , which requires to find a sink location in a path that minimizes the maximum regret where the completion time criterion is adopted instead of the total time one .",
    "they presented an @xmath8 time algorithm .",
    "higashikawa et al .",
    "@xcite improved the time bound by @xcite to @xmath9 , and also wang  @xcite independently achieved the same time bound of @xmath9 with better space complexity .",
    "very recently , bhattacharya et al .",
    "@xcite have improved the time bound to @xmath10 .",
    "the above problem was extended to the multiple sink location version by arumugam et al .",
    "@xcite . for the minimax",
    "regret @xmath11-center problem in dynamic path networks with uniform capacity , they presented an @xmath12 time algorithm , and this time bound was improved to @xmath13 recently  @xcite . on the other hand , for dynamic tree networks ,",
    "only the minimax regret 1-center problem was solved in @xmath14 time  @xcite .",
    "this paper first considers the minimax regret median problem in dynamic networks while all the above works for dynamic networks treated center problems . in this paper",
    ", we address the minimax regret 1-median problem in dynamic path networks with uniform capacity and present an @xmath2 time algorithm .",
    "let @xmath15 be an undirected path with ordered vertices @xmath16 and edges @xmath17 where @xmath18 for @xmath19 .",
    "let @xmath20 be a dynamic network with the underlying path graph @xmath21 ; @xmath22 is a function that associates each edge @xmath23 with positive length @xmath24 , @xmath25 is a function that associates each vertex @xmath26 with positive weight @xmath27 , amount of supply at @xmath26 ; @xmath28 is the capacity , a positive constant representing the amount of supply which can enter an edge per unit time ; @xmath29 is a positive constant representing the time required for a flow to travel a unit distance . in our model , instead of the weight function @xmath25 on vertices , we are given the weight interval function @xmath30 that associates each vertex @xmath31 with an interval of supply @xmath32 $ ] with @xmath33 .",
    "we call such a network @xmath34 with path structures _ a dynamic path network under uncertain supplies_.    in the following , we write @xmath35 to indicate that a point is a vertex of @xmath21 or lies on one of the edges of @xmath21 . for any point @xmath35 , we abuse this notation by also letting @xmath36 denote the distance from @xmath37 to @xmath36 .",
    "informally we can regard @xmath21 as being embedded on a real line with @xmath38 . for two points",
    "@xmath39 satisfying @xmath40 , let @xmath41 $ ] ( resp .",
    "@xmath42 , @xmath43 $ ] and @xmath44 ) denote an interval in @xmath21 consisting of all points @xmath45 such that @xmath46 ( resp .",
    "@xmath47 , @xmath48 and @xmath49 ) .",
    "let @xmath50 denote the cartesian product of all @xmath51 for @xmath52 : @xmath53 an element of @xmath50 , i.e. , a particular assignment of weight to each vertex , is called a _",
    "scenario_. given a scenario @xmath54 , we denote by @xmath55 the weight of a vertex @xmath26 under @xmath0 .      in our model , the supply is defined continuously .",
    "we define a unit as an infinitesimally small portion of supply . given a sink location @xmath45 and a scenario @xmath54 , without loss of generality , an evacuation to @xmath1 under @xmath0",
    "is assumed to satisfy the following assumptions .",
    "when a unit arrives at a vertex @xmath56 on its way to @xmath1 , it has to wait for the departure if there are already some units waiting for leaving @xmath56 .",
    "all units waiting at @xmath56 for leaving @xmath56 are processed in the first - come first - served manner .    for",
    "a given @xmath45 and @xmath54 , let us consider an evacuation to @xmath1 under @xmath0 starting at time @xmath4 and define the evacuation time of a unit to @xmath1 under @xmath0 as the time at which the unit reaches @xmath1 .",
    "let @xmath5 denote the sum of evacuation times over all infinitesimal units to @xmath1 under @xmath0 .",
    "also let @xmath57 ( resp .",
    "@xmath58 ) denote the sum of evacuation times to @xmath1 under @xmath0 for all units on @xmath59 ( resp .",
    "then , @xmath5 is obviously the sum of @xmath57 and @xmath58 , i.e. , @xmath61 without loss of generality , we assume @xmath62 and @xmath63",
    ".    we will show the formula of @xmath5 that has been proved in @xcite .",
    "suppose that @xmath1 is located in an open interval @xmath64 with @xmath65 , i.e. , @xmath66 .",
    "we here show only the formula of @xmath57 ( the case of @xmath58 is symmetric ) .",
    "first , let us define the vertex indices @xmath67 inductively as @xmath68 where @xmath69 . obviously @xmath70 holds .",
    "we then call a set of all units on @xmath71 $ ] _ i - th cluster _ , and a vertex @xmath72 the _ head _ of @xmath73-th cluster ( see fig .  [",
    "fig : cl ] ) .     where @xmath73-th cluster is headed by a vertex @xmath72,width=340 ]    also , for @xmath74 , we define @xmath75 as @xmath76 , which is called the weight of @xmath73-th cluster .",
    "the interpretation can be derived from @xcite as follows .",
    "the first unit on each @xmath72 does not encounter any congestion on its way to @xmath1 . here , although @xmath77 may not be uniquely determined by ( [ ms2.5 ] ) , we choose the maximum index as @xmath77 . by this assumption and ( [ ms2.5 ] ) , the following inequality holds for @xmath78 : @xmath79 in other words , even if we transform the input so that all units on @xmath80 are moved to @xmath72 for @xmath74 , the sum of evacuation times over @xmath81 never changes . in the following , we call such a transformation",
    "the _ left - clustering _ for @xmath1 and clusters obtained by the left - clustering for @xmath1 _ left clusters _ for @xmath1 ( the right - clustering and right clusters are symmetric ) .",
    "then as in @xcite , @xmath57 is written as @xmath82      for a scenario @xmath54 , let @xmath6 be a point in @xmath21 that minimizes @xmath5 over @xmath45 , called the _ median _ under @xmath0 .",
    "we now define the _ regret _ for @xmath1 under @xmath0 as @xmath83 moreover , we also define the _ maximum regret _ for @xmath1 as @xmath84 if @xmath85 , we call @xmath86 the _ worst case scenario _ for @xmath1 . the goal is to find a point @xmath87 , called the _",
    "minimax regret median _",
    ", that minimizes @xmath88 over @xmath45 , i.e. , the objective is to @xmath89      we here show some properties on the 1-median problem in a dynamic path network @xmath90 when a scenario @xmath54 is given , which were basically presented in @xcite .",
    "we first introduce the following two lemmas .    for a scenario @xmath54",
    ", @xmath6 is at a vertex in @xmath91 .",
    "[ lem : ms ]    for a scenario @xmath54 , all @xmath92 over @xmath52 can be computed in @xmath10 time in total .",
    "[ lem : pht ]    we then can see a corollary of these lemmas .    for a scenario @xmath54 , @xmath6 and @xmath93 can be computed in @xmath10 time .",
    "[ coro : mst ]    now let us look at the formula of ( [ eq : ms3 ] ) .",
    "even if @xmath1 is moving on an edge @xmath23 ( not including endpoints @xmath26 and @xmath94 ) , the formation of left clusters for @xmath1 does not change over @xmath95 .",
    "therefore , @xmath57 is a linear function of @xmath95 , and symmetrically , @xmath58 is also a linear function . for @xmath19",
    ", letting @xmath96 and @xmath97 be the values such that for @xmath95 , @xmath98 we can derive the following lemma from @xcite .    for a scenario @xmath54 , all @xmath96 and @xmath97 over @xmath19 can be computed in @xmath10 time in total .",
    "[ lem : abt ]",
    "in this section , we show the important properties which worst case scenarios have . in our problem ,",
    "a main difficulty lies in evaluating @xmath99 over @xmath54 to compute @xmath88 even for a fixed @xmath1 since the size of @xmath50 is infinite .",
    "we thus aim to find a scenario set with a finite size ( in particular , a polynomial size ) which includes a worst case scenario for any @xmath45 . in order to do this ,",
    "we introduce a new concept , the _ gap _ between two points @xmath100 under a scenario @xmath54 , defined by @xmath101 by lemma [ lem : ms ] and the definition of ( [ eq : rg ] ) , we have @xmath102 and by ( [ eq : rmax ] ) and ( [ eq : rg2 ] ) , @xmath103 from ( [ eq : rmax2 ] ) , if we can compute @xmath104 for a fixed pair @xmath105 , @xmath88 can also be computed by repeating the same maximization over @xmath106 .",
    "we call a scenario that maximizes @xmath107 for a fixed @xmath108 a worst case scenario for @xmath108 . in the following ,",
    "we show a scenario set of size @xmath10 that includes a worst case scenario for a fixed @xmath108 , which implies a scenario set of size @xmath109 that includes a worst case scenario for a fixed @xmath1 .",
    "we first introduce the concept of the _ bipartite scenario _ , which was originally introduced as the _ dominant scenario _ in @xcite .",
    "let us consider a scenario @xmath54 .",
    "a scenario @xmath0 is said to be _ left - bipartite _ ( resp .",
    "_ right - bipartite _ ) if @xmath110 ( resp .",
    "@xmath111 ) over @xmath112 and @xmath113 ( resp .",
    "@xmath114 ) over @xmath115 for some @xmath19 .",
    "obviously the number of such scenarios is @xmath10 .",
    "the authors of @xcite treated the minimax regret 1-center problem in dynamic path networks , which requires to find a sink location in a path that minimizes the maximum regret similarly defined as ( [ eq : rmax ] ) where the completion time criterion is adopted instead of the total time one .",
    "they proved that for any point in an input path , at least one worst case scenario is left - bipartite or right - bipartite .",
    "we here introduce the concept of the _ pseudo - bipartite scenario_. a scenario @xmath0 is said to be _ left - pseudo - bipartite _ ( resp . _",
    "right - pseudo - bipartite _ ) if @xmath110 ( resp .",
    "@xmath111 ) over @xmath116 and @xmath113 ( resp .",
    "@xmath114 ) over @xmath115 for some @xmath117 . in this definition , we do not care about the weight of a vertex @xmath26 , called the _ intermediate vertex_. given a pseudo - bipartite scenario with the intermediate vertex @xmath26 , we call intervals @xmath118 and @xmath119 $ ] the _ left part _ and the _ right part _",
    ", respectively .",
    "let @xmath120 ( resp .",
    "@xmath121 ) denote a set of all left - pseudo - bipartite scenarios ( resp .",
    "right - pseudo - bipartite scenarios ) .",
    "we then prove the following lemma ( the proof is given in appendix a ) .",
    "given a pair @xmath105 satisfying @xmath122 ( resp .",
    "@xmath123 ) , there exists a worst case scenario for @xmath108 belonging to @xmath120 ( resp .",
    "@xmath121 ) such that @xmath124 ( resp .",
    "@xmath1 ) is in the left part and @xmath1 ( resp .",
    "@xmath124 ) is in the right part .",
    "[ lem : wcsxy ]      by lemma [ lem : wcsxy ] , we studied the property of a worst case scenario for a fixed @xmath105 , however the sizes of @xmath120 and @xmath121 are still infinite since the weight of the intermediate vertex in a pseudo - bipartite scenario is not fixed . in the rest of this section , we focus on the weight of the intermediate vertex in a pseudo - bipartite scenario which is worst for @xmath108 .",
    "given a pair @xmath105 satisfying @xmath122 , let us consider a scenario @xmath125 such that the intermediate vertex is @xmath26 and @xmath126 .",
    "suppose that the weight of @xmath26 is set as the minimum , i.e. , @xmath127 .",
    "performing the right - clustering for @xmath124 under @xmath0 ( mentioned in section [ subsec : to ] ) , we will get right clusters for @xmath124 such that for @xmath128 , the head of @xmath22-th cluster is @xmath129 and the weight of @xmath22-th cluster is @xmath130 .",
    "then , suppose that the intermediate vertex @xmath26 belongs to @xmath131-th cluster .",
    "now let us increase the weight of @xmath26 , little by little , without changing the weight of any other vertex .",
    "let @xmath132 be a scenario in @xmath120 such that the intermediate vertex is @xmath26 whose weight is @xmath133 $ ] .",
    "suppose that when the weight of @xmath26 reaches some value @xmath134 , the following equality holds : @xmath135 note that @xmath136 corresponds to the weight of @xmath131-th cluster under @xmath137 .",
    "at that moment , referring to ( [ eq : ms2.6 ] ) , @xmath138-th cluster is merged to @xmath131-th cluster .",
    "we then call @xmath137 a _ critical left - pseudo - bipartite scenario _ for @xmath124 .",
    "also , @xmath139 and @xmath140 are assumed to be critical left - pseudo - bipartite scenarios for @xmath124 even if any merge does not occur at those moments . _ critical right - pseudo - bipartite scenarios _ for @xmath124 are symmetrically defined .",
    "let @xmath141 denote a set of all critical left - pseudo - bipartite scenarios and critical right - pseudo - bipartite scenarios for @xmath124 , and @xmath142 .",
    "we will show two lemmas ( the proof of lemma [ lem : wcsxy2 ] is given in appendix b ) .",
    "given a pair @xmath105 , there exists a worst case scenario for @xmath108 belonging to @xmath141 .",
    "[ lem : wcsxy2 ]    for a vertex @xmath106 , the size of @xmath141 is @xmath10 , and all scenarios in @xmath141 can be computed in @xmath10 time .",
    "[ lem : csy ]    we first prove that the number of critical left - pseudo - bipartite scenarios for @xmath124 is @xmath10 ( the case of critical right - pseudo - bipartite scenarios is symmetric ) .",
    "suppose that @xmath143 .",
    "for @xmath144 and @xmath133 $ ] , let @xmath145 be a scenario in @xmath120 such that the intermediate vertex is @xmath26 whose weight is @xmath25 . here",
    ", let us define the order between two scenarios @xmath145 and @xmath146 : @xmath147 holds if and only if ( a ) @xmath148 or ( b ) @xmath149 and @xmath150 . for @xmath144 , we also define @xmath151 and @xmath152 as follows .",
    "let @xmath151 be the number of critical left - pseudo - bipartite scenarios for @xmath124 such that the intermediate vertex is @xmath26 ( including @xmath153 and @xmath154 ) .",
    "let @xmath152 be , under a scenario @xmath154 , the number of right clusters for @xmath124 that follow a cluster including @xmath26 .",
    "let us consider computing all critical left - pseudo - bipartite scenarios for @xmath124 in ascending order , and suppose that the weight of @xmath26 now increases from @xmath155 to @xmath156 .",
    "while it increases , since @xmath157 critical left - pseudo - bipartite scenarios for @xmath124 occur ( except @xmath153 and @xmath154 ) , and at each such scenario , one or more clusters are merged into one of @xmath26 , at least @xmath157 clusters are merged into one of @xmath26 in total .",
    "we thus have @xmath158 for @xmath144 , i.e. , @xmath159 note that the total number of critical left - pseudo - bipartite scenarios for @xmath124 is exactly @xmath160 . by ( [ eq : lem1.21 ] ) , we have @xmath161 which is @xmath10 since @xmath162 and @xmath163 .    in the rest of the proof , we show that all critical left - pseudo - bipartite scenarios for @xmath143 can be computed in @xmath10 time .",
    "recall that all critical left - pseudo - bipartite scenarios for @xmath124 are computed in ascending order .",
    "the algorithm first gets @xmath164 , and performs the right clustering for @xmath124 under @xmath164 .",
    "as claimed in @xcite , it is easy to see that the right clustering for a fixed @xmath124 can be done in @xmath10 time .",
    "suppose that for particular @xmath144 and @xmath165 $ ] , @xmath166 is critical for @xmath124 , and the algorithm has already obtained @xmath166 and the right clusters for @xmath124 .",
    "we then show how to compute the subsequent critical left - pseudo - bipartite scenario .",
    "let @xmath167 be a right cluster for @xmath124 including @xmath26 and @xmath168 be a right cluster for @xmath124 immediately following @xmath167 .",
    "also , let @xmath169 ( resp .",
    "@xmath170 ) be the index of a vertex that corresponds to the head of @xmath167 ( resp .",
    "@xmath168 ) , and @xmath171 ( resp .",
    "@xmath172 ) be the weight of @xmath167 ( resp .",
    "@xmath168 ) .",
    "there are two cases : [ case 1 ] @xmath173 ; [ case 2 ] @xmath174 . for case 2",
    ", we notice that @xmath175 is equivalent to @xmath154 .",
    "therefore , this case immediately results in case 1 by letting @xmath73 be @xmath176 and @xmath134 be @xmath177 ( although a right cluster for @xmath124 including @xmath94 may be @xmath168 , not @xmath167 ) .",
    "we thus consider only case 1 in the following .",
    "the algorithm will compute the subsequent critical left - pseudo - bipartite scenario @xmath178 where @xmath179 satisfies @xmath180 . in order to compute @xmath179 , the algorithm test if there exists @xmath181 $ ] such that @xmath182 which is similar to ( [ eq : cpbs1 ] ) .",
    "if yes , for such @xmath25 , the algorithm returns @xmath183 and updates the right clusters for @xmath124 by merging @xmath168 into @xmath167 . otherwise , @xmath184 is just returned .",
    "such testing and updating are done in @xmath185 time .",
    "since the number of critical left - pseudo - bipartite scenarios for @xmath124 is @xmath10 and each of those is computed in @xmath185 time , we completes the proof .    by ( [ eq : rmax2 ] ) , we have a corollary of lemma [ lem : wcsxy2 ] .",
    "given a point @xmath45 , there exists a worst case scenario for @xmath1 belonging to @xmath186 .",
    "[ coro : wcsx ]    also , a corollary of lemma [ lem : csy ] immediately follows .",
    "the size of @xmath186 is @xmath109 , and all scenarios in @xmath186 can be computed in @xmath109 time .",
    "[ coro : cusy ]",
    "in this section , we show an algorithm that computes the minimax regret median , which minimizes @xmath88 over @xmath45 .",
    "the algorithm basically consists of two phases : + * [ phase 1 ] * compute @xmath187 over @xmath52 , and + * [ phase 2 ] * compute @xmath188 over @xmath19 . + after these , the algorithm evaluates all the @xmath189 values obtained and finds the minimax regret median in @xmath10 time .    by corollary [ coro :",
    "wcsx ] , we only have to consider scenarios in @xmath186 to compute @xmath88 for any @xmath45 .",
    "therefore , the algorithm computes all scenarios in @xmath186 in advance , which can be done in @xmath109 time by corollary [ coro : cusy ] .",
    "subsequently , it computes all the values @xmath93 over @xmath190 for phase 1 and phase 2 . by corollaries [ coro : mst ] and [ coro : cusy ] ,",
    "this can be done in @xmath2 time in total .",
    "first let us see details in phase 1 . for a fixed scenario @xmath190 , since all @xmath92 over @xmath52 can be computed in @xmath10 time by lemma [ lem : pht ] and @xmath93 has already been computed before phase 1 , all @xmath191 over @xmath52 can also be computed in @xmath10 time ( refer to ( [ eq : rg ] ) ) .",
    "after the algorithm obtains @xmath192 over @xmath190 in @xmath2 time , for each @xmath52 , @xmath191 over @xmath190 are evaluated to obtain @xmath187 .",
    "thus , it is easy to see that phase 1 can be done in @xmath2 time in total .",
    "we next focus on phase 2 . as mentioned at the end of section [ subsec : kp ] , for a fixed scenario @xmath190",
    ", @xmath5 is a linear function of @xmath95 for each @xmath19 ( not including @xmath26 and @xmath94 ) .",
    "therefore , @xmath99 is also linear for @xmath95 for each @xmath73 . referring to ( [ eq : aibi ] )",
    ", a function @xmath99 on an edge @xmath23 is written as @xmath193 recall that @xmath93 has already been computed .",
    "then , by lemma [ lem : abt ] , @xmath99 on @xmath23 over @xmath19 can be computed in @xmath10 time .",
    "after the algorithm does the same computation over @xmath190 in @xmath2 time , on each edge @xmath23 , we have @xmath109 linear functions @xmath99 over @xmath190 . by the definition of ( [ eq : rmax ] )",
    ", @xmath194 can be obtained by solving a linear programming problem in two dimensions with @xmath109 constraints , i.e. , @xmath195 this problem can be solved in @xmath109 time by @xcite . repeating the same operations over @xmath19 , phase 2",
    "is completed in @xmath2 time .",
    "the minimax regret 1-median problem in dynamic path networks with uniform capacity can be solved in @xmath2 time .",
    "in this paper , we address the minimax regret 1-median problem in dynamic path networks with uniform capacity and present an @xmath2 time algorithm . additionally , this is the first work that treats the minimax regret facility location problem in dynamic networks where the total time criterion is adopted .",
    "two natural questions immediately follow .",
    "the first one is whether we can reduce the number of scenarios to be considered .",
    "the other one is whether we can extend the problem to the @xmath11-median version with @xmath196 , or the problem in more general networks .",
    "99    g. p. arumugam , j. augustine , m. j. golin , p. srikanthan ,  a polynomial time algorithm for minimax - regret evacuation on a dynamic path \" , , arxiv:1404.5448 .",
    "i.  averbakh and o.  berman , `` algorithms for the robust @xmath197-center problem on a tree '' , , 123(2 ) , pp",
    ".  292 - 302 , 2000 .",
    "b.  bhattacharya and t.  kameda ,  a linear time algorithm for computing minmax regret @xmath197-median on a tree \" , ( cocoon 2012 ) , lncs 7434 , pp .  1 - 12 , 2012 .",
    "b. bhattacharya , t. kameda ,  improved algorithms for computing minmax regret 1-sink and 2-sink on path network \" , ( cocoa 2014 ) , lncs 8881 , pp .  146 - 160 , 2014 .",
    "b.  bhattacharya , t.  kameda and z.  song ,  a linear time algorithm for computing minmax regret @xmath197-median on a tree network \" , , pp .  1 - 20 , 2013 .    g.  s.  brodal , l.  georgiadis and i.  katriel ,  an @xmath9 version of the averbakh - berman algorithm for the robust median of a tree \" , , 36(1 ) , pp .  14 - 18 , 2008",
    ".    b.  chen and c.  lin , `` minmax - regret robust 1-median location on a tree '' , , 31(2 ) , pp .",
    "93 - 103 , 1998 .",
    "s.  w.  cheng , y.  higashikawa , n.  katoh , g.  ni , b.  su and y.  xu ,  minimax regret 1-sink location problems in dynamic path networks \" , ( tamc 2013 ) , lncs 7876 , pp .",
    "121 - 132 , 2013 .",
    "e.  conde , `` a note on the minmax regret centdian location on trees '' , , 36(2 ) , pp",
    ".  271 - 275 , 2008 .",
    "m.  e.  dyer , `` linear time algorithms for two- and three - variable linear programs '' , , 13(1 ) , pp .  31 - 45 , 1984 .    l.  r.  ford  jr . , d.  r.  fulkerson ,  constructing maximal dynamic flows from static flows \" , , 6 , pp .  419 - 433 , 1958 .",
    "y.  higashikawa ,  studies on the space exploration and the sink location under incomplete information towards applications to evacuation planning \" , , kyoto university , 2014 .",
    "y.  higashikawa , j.  augustine , s.  w.  cheng , n.  katoh , g.  ni , b.  su and y.  xu ,  minimax regret 1-sink location problem in dynamic path networks \" , , doi : 10.1016/j.tcs.2014.02.010 , 2014 .",
    "y.  higashikawa , m.  j.  golin , n.  katoh ,  minimax regret sink location problem in dynamic tree networks with uniform capacity \" , ( walcom 2014 ) , lncs 8344 , pp .",
    "125 - 137 , 2014 .",
    "y.  higashikawa , m.  j.  golin , n.  katoh ,  multiple sink location problems in dynamic path networks \" , ( aaim 2014 ) , lncs 8546 , pp .  149 - 161 , 2014 .",
    "y.  higashikawa , m.  j.  golin , n.  katoh , ",
    "minimax regret sink location problem in dynamic tree networks with uniform capacity \" , , 18(4 ) , pp .",
    "539 - 555 , 2014 .",
    "y.  higashikawa , m.  j.  golin , n.  katoh ,  multiple sink location problems in dynamic path networks \" , , doi:10.1016/j.tcs.2015.05.053 .",
    "s.  mamada , t.  uno , k.  makino and s.  fujishige ,  an @xmath8 algorithm for the optimal sink location problem in dynamic tree networks \" , , 154(16 ) , pp .",
    "2387 - 2401 , 2006 .",
    "h.  wang ,  minmax regret 1-facility location on uncertain path networks \" , , lncs 8283 , pp .",
    "733 - 743 , 2013 .",
    "_ proof of claim [ clm:2 ] .",
    "_ we here assume @xmath199 : if @xmath200 , the proof is straightforward .",
    "let @xmath201 be a worst case scenario for @xmath108 .",
    "if there are more than one worst case scenario , we choose the one such that all weights are lexicographically maximized in the order of ascending indices among all worst case scenarios .",
    "we prove by contradiction : suppose @xmath202 for some vertex @xmath198 $ ] . under a scenario @xmath201 ,",
    "let us perform the left - clustering for @xmath1 and @xmath124 , respectively ( refer to section [ subsec : to ] ) .",
    "performing the left - clustering for @xmath1 , let @xmath203 be a left cluster for @xmath1 including @xmath26 , @xmath204 be the index of a vertex that corresponds to the head of @xmath203 , and @xmath205 be the weight of @xmath203 . also , performing the left - clustering for @xmath124 , @xmath167 , @xmath169 and @xmath171 are similarly defined .",
    "when @xmath167 evacuates to @xmath1 , by the definition of a cluster , the first unit of @xmath167 does not encounter any congestion in the interval @xmath206 , however , it may encounter congestions at some vertices in @xmath207 .",
    "if it does not encounter any congestion in @xmath208 , @xmath167 is never merged to any other cluster for @xmath1 , which implies @xmath209 and @xmath210 .",
    "otherwise , @xmath167 is eventually merged into a left cluster for @xmath1 headed by a vertex @xmath211 , i.e. , @xmath203 .",
    "we thus consider two cases : [ case 1 ] @xmath212 and @xmath210 ; [ case 2 ] @xmath213 and @xmath214 .",
    "now let @xmath215 be a scenario obtained from @xmath201 by increasing the weight of @xmath26 by infinitesimally small @xmath216 , i.e. , @xmath217 and @xmath218 for @xmath219 .",
    "we then show the following claim for the proof of claim [ clm:2 ] .",
    "_ proof of claim [ clm:1 ] .",
    "_ performing the left - clustering for @xmath1 under @xmath201 , let @xmath220 be a left cluster for @xmath1 immediately following @xmath203 , and @xmath221 be the index of a vertex that corresponds to the head of @xmath220 . referring to ( [ eq : ms2.6 ] )",
    ", the following inequality holds : @xmath222 then , for a sufficiently small @xmath223 , we have @xmath224 the inequality of ( [ eq : clm1.1 ] ) means that after performing the left - clustering for @xmath1 under @xmath201 , the first unit of @xmath220 does not catch up with the last unit of @xmath203 at @xmath225 , and by ( [ eq : clm1.2 ] ) , this remark also holds even for @xmath215 . under @xmath215 , if @xmath220 is not merged to @xmath203 , any other merge never occurs .",
    "thus , the formation of left clusters for @xmath1 does not change , and similarly , it does not change for @xmath124 .    by claim [ clm:1 ] and the definitions of ( [ eq : ms1 ] ) and ( [ eq : ms3 ] ) , we have @xmath226 and similarly , @xmath227 also by the definition of ( [ eq : gap ] ) , we have @xmath228 from ( [ eq : lem1.1 ] ) , ( [ eq : lem1.2 ] ) and ( [ eq : lem1.3 ] ) , we can derive @xmath229      if case 2 occurs , performing the left - clustering for @xmath1 merges @xmath167 into @xmath203 as mentioned above , and then , all units on @xmath231 $ ] are also merged into @xmath203 . therefore ,",
    "if we consider an input such that all units on @xmath232 are moved to @xmath225 , the first unit of @xmath167 must catch up with the last unit of supply at @xmath225 , i.e. , @xmath233 since @xmath203 includes @xmath167 and all units on @xmath231 $ ] , we have @xmath234 note that in ( [ eq : lem1.6 ] ) , the left side is less than the right side when @xmath203 also includes some clusters for @xmath124 following @xmath167 . from ( [ eq : lem1.4 ] ) , ( [ eq : lem1.5 ] ) and ( [ eq : lem1.6 ] ) , we can derive @xmath235 which contradicts that @xmath201 is a worst case scenario for @xmath108 .",
    "if we consider a worst case scenario for @xmath108 such that the weight of every vertex @xmath198 $ ] is @xmath156 and weights of all other vertices in @xmath236 $ ] are lexicographically minimized in the order of descending indices , the following claim is also proved in a similar manner as in the proof of claim [ clm:2 ] .    given a pair @xmath105 satisfying @xmath122 , there exists a worst case scenario for @xmath108 such that the weight of every vertex @xmath198 $ ] is @xmath156 and the weight of every vertex @xmath237 $ ] is @xmath155 .",
    "[ clm:3 ]    now , let @xmath238 be a worst case scenario for @xmath108 such that the weight of every vertex @xmath198 $ ] is @xmath156 , the weight of every vertex @xmath237 $ ] is @xmath155 , and weights of all other vertices in the open interval @xmath239 are lexicographically maximized in the order of ascending indices .",
    "then , @xmath240 can be proved .",
    "we prove by contradiction : there exist two vertices @xmath241 satisfying @xmath242 such that @xmath243 and @xmath244 .",
    "let @xmath245 be a scenario obtained from @xmath238 by increasing the weight of @xmath26 by infinitesimally small @xmath216 and decreasing the weight of @xmath246 by the same @xmath247 , i.e. , @xmath248 , @xmath249 and @xmath250 for @xmath251 .",
    "then , we immediately see @xmath252 and @xmath253 , therefore @xmath254 the inequality of ( [ eq : lem1.8 ] ) implies that @xmath245 is also a worst case scenario for @xmath108 , which contradicts the lexicographical maximality of weights on the open interval @xmath239 under @xmath238 .      for",
    "a fixed pair @xmath105 satisfying @xmath122 , let us consider a worst case scenario in @xmath120 such that the intermediate vertex is @xmath26 ( @xmath255 ) .",
    "we now consider the weight of @xmath26 as a variable @xmath133 $ ] , and let @xmath132 be a scenario in @xmath120 such that the intermediate vertex is @xmath26 whose weight is @xmath25 .",
    "then , let @xmath256 denote the gap between @xmath1 and @xmath124 under @xmath132 , i.e. , @xmath257 suppose that @xmath132 is critically left - pseudo - bipartite for @xmath124 when @xmath258 , where @xmath36 is a positive integer and @xmath259 . in the following , we prove that a function @xmath256 is convex and piecewise - linear for @xmath260 $ ] for every @xmath261 . under a scenario @xmath132 ,",
    "let us perform the left - clustering for @xmath1 and the right - clustering for @xmath124 , respectively .",
    "performing the left - clustering for @xmath1 , let @xmath262 be a left cluster for @xmath1 including @xmath26 , @xmath263 be the index of a vertex that corresponds to the head of @xmath262 , and @xmath264 be the weight of @xmath203 .",
    "also , performing the right - clustering for @xmath124 , @xmath265 , @xmath266 and @xmath267 are similarly defined .",
    "_ proof of claim [ clm:4 ] . _",
    "the statement is equivalent to @xmath268 .",
    "\\label{eq : lem1.11}\\end{aligned}\\ ] ] we here prove ( [ eq : lem1.10 ] ) ( the case of ( [ eq : lem1.11 ] ) is similarly treated ) . by ( [ eq : lem1.9 ] ) , we only have to prove @xmath269 note that , similarly as in claim [ clm:1 ] , while @xmath132 changes to @xmath270 , the formation of left clusters for @xmath1 remains the same . therefore , by the definitions of ( [ eq : ms1 ] ) and ( [ eq : ms3 ] ) , we have @xmath271 which leads ( [ eq : lem1.12 ] ) by letting @xmath247 go to positive zero .    for an integer @xmath261 , we consider the right - derivative of @xmath256 for @xmath272 , i.e. , @xmath273 similarly to ( [ eq : lem1.13 ] ) , we have @xmath274 from ( [ eq : lem1.9 ] ) , ( [ eq : lem1.13 ] ) and ( [ eq : lem1.15 ] ) , we derive @xmath275 and by ( [ eq : lem1.14 ] ) and ( [ eq : lem1.16 ] ) , @xmath276 we here notice that as @xmath25 increases , @xmath263 and @xmath266 never change ( even if left clusters for @xmath1 following @xmath262 and right clusters for @xmath124 following @xmath265 are merged to @xmath262 and @xmath265 , respectively ) .",
    "also , since both of @xmath262 and @xmath265 include @xmath26 , @xmath264 and @xmath267 can be represented as follows : @xmath277 where @xmath278 and @xmath279 are functions of @xmath25 .",
    "in addition , @xmath278 increases only if a left cluster for @xmath1 following @xmath262 is merged to @xmath262 , i.e. , @xmath278 is an increasing step function , and @xmath279 is a constant function of @xmath272 since the formation of right clusters for @xmath124 does not change over @xmath272 ( recall the definition of critical left - pseudo - bipartite scenarios for @xmath124 in section [ subsec : cpbs ] ) . from the above observations , and ( [ eq : lem1.17 ] ) , ( [ eq : lem1.18 ] ) and ( [ eq : lem1.19 ] ) , we derive that for @xmath272 , @xmath280 which is an increasing step function . by this fact and the continuity of @xmath256 by claim [ clm:4 ]",
    ", we have the following claim ."
  ],
  "abstract_text": [
    "<S> this paper considers the minimax regret 1-median problem in dynamic path networks . in our model , we are given a dynamic path network consisting of an undirected path with positive edge lengths , uniform positive edge capacity , and nonnegative vertex supplies . here </S>",
    "<S> , each vertex supply is unknown but only an interval of supply is known . a particular assignment of supply to each vertex </S>",
    "<S> is called a _ </S>",
    "<S> scenario_. given a scenario @xmath0 and a sink location @xmath1 in a dynamic path network , let us consider the evacuation time to @xmath1 of a unit supply given on a vertex by @xmath0 . </S>",
    "<S> the cost of @xmath1 under @xmath0 is defined as the sum of evacuation times to @xmath1 for all supplies given by @xmath0 , and the _ median _ under @xmath0 is defined as a sink location which minimizes this cost . </S>",
    "<S> the regret for @xmath1 under @xmath0 is defined as the cost of @xmath1 under @xmath0 minus the cost of the median under @xmath0 . </S>",
    "<S> then , the problem is to find a sink location such that the maximum regret for all possible scenarios is minimized . </S>",
    "<S> we propose an @xmath2 time algorithm for the minimax regret 1-median problem in dynamic path networks with uniform capacity , where @xmath3 is the number of vertices in the network .    </S>",
    "<S> regret , sink location , dynamic flow , evacuation planning </S>"
  ]
}