{
  "article_text": [
    "charles bennett , in 1973 , showed that reversible computation at logical plane can to be done in reversible manner to achieve theoretically zero power dissipation  @xcite in physical reversible computing .",
    "several target technologies in nanoscale computing as well as technologies beyond cmos , in particular quantum computing , relies on reversible logic .",
    "recent studies show that reversible logic synthesis can be applied to other directions  @xcite as well .",
    "synthesis of a given boolean function for reversible logic is , therefore , an important open problem . before further discussion",
    ", we present some background on reversible logic .      an @xmath0-variable boolean function @xmath1 is a mapping @xmath2 , which can also be represented by a truth table .",
    "alternatively , an @xmath0-variable boolean function @xmath3 can be considered to be a multivariate polynomial over @xmath4 .",
    "this polynomial can be expressed as a sum - of - products representation of all distinct @xmath5-th order products @xmath6 of the variables .",
    "this representation of @xmath1 is called the _ algebraic normal form _ ( anf ) of @xmath1 .",
    "the number of variables in the highest order product term with nonzero coefficient is called the _ algebraic degree _ , or simply the degree of @xmath1 and denoted by @xmath7 .",
    "the anf representation is also known as positive - polarity reed - muller expression ( pprm ) .",
    "this is a canonical form of a more general exclusive sum - of - product ( esop ) realization .",
    "an @xmath0-variable boolean function is _ reversible _ if all its output patterns map uniquely to an input pattern and vice - versa .",
    "it can be expressed as an @xmath0-input , @xmath0-output bijection or alternatively , as a permutation function over the truth value set @xmath8 .",
    "the problem of reversible logic synthesis is to map such a reversible boolean function on a reversible logic gate library .",
    "the gates are characterized by their implementation cost in quantum technologies , which is dubbed as quantum cost ( qc )  @xcite .",
    "few prominent classical reversible logic gates are presented below .    *",
    "not gate : @xmath9 = @xmath10 .",
    "* cnot gate : @xmath11 = @xmath12 .",
    "* ccnot gate : also known as toffoli gate .",
    "@xmath13 = @xmath14 .",
    "this gate can be generalized with @xmath15 gate , where first @xmath16 variables are used as control lines .",
    "not and cnot gates are denoted as @xmath17 and @xmath18 respectively .",
    "* peres gate : a sequence of @xmath19 , @xmath20 or its inverse is known as peres gate . *",
    "controlled swap gate : also known as fredkin gate .",
    "@xmath13 = @xmath21 .",
    "this gate can be generalized with @xmath22 gate @xmath23 , where first @xmath24 variables are used as control lines .",
    "multiple sets of reversible gates form an universal gate library for realizing classical boolean functions such as , ( i ) nct : not , cnot , toffoli .",
    "( ii ) nctsf : not , cnot , toffoli , swap , fredkin .",
    "( iii ) gt : @xmath15 .",
    "( iv ) gtgf : @xmath15 and @xmath22 .",
    "following the qc assumption of  @xcite , we use a qc of @xmath25 for all @xmath26-qubit elementary reversible logic gates .",
    "optimized implementation of larger gates are assumed for the corresponding qc computation , following  @xcite and  @xcite .",
    "the used qc values of a generalized toffoli gate ( @xmath27 ) is @xmath28 , of a generalized fredkin gate ( @xmath29 ) is @xmath30 , of a generalized peres gate ( @xmath31 ) is @xmath32 .",
    "reversible logic synthesis begins from a given @xmath0-variable boolean function , which can be irreversible .",
    "the first step is to convert it to a reversible boolean function by adding distinguishing input bits initialized with a constant value .",
    "if these constant values are recovered after the reversible circuit execution , then these are known as _ ancilla _ and otherwise , as _",
    "reversible logic synthesis methods can be broadly classified in four categories as following .",
    "a different and more detailed classification is presented in a recent survey of reversible logic synthesis methods  @xcite . +",
    "* exact and optimal methods : * in these methods , for small - scale reversible circuits the optimal implementation is found by making a step - by - step exhaustive enumeration or by formulating the reversible logic synthesis as a sat problem  @xcite or reachability problem  @xcite .",
    "optimal implementation up to @xmath33-variable boolean functions are known via exhaustive methods  @xcite and up to few @xmath34-variable boolean functions are known via sat - based synthesis approach  @xcite .",
    "exact methods perform well for small - scale circuits only since , reversible logic synthesis is shown to be an np - hard problem  @xcite . + * transformation - based methods  @xcite : * these methods apply controlled transformations to map output boolean functions to input boolean functions .",
    "the method outlined in  @xcite utilizes boolean functions nonlinearity measure and propose a column - wise synthesis approach , while  @xcite proceed row - wise in the boolean truth - table . + * methods based on decision diagrams  @xcite : * in these methods , each node of the decision diagram is converted to an equivalent reversible circuit structure .",
    "these methods reported excellent scaling for large boolean functions , low qc at the cost of high number of garbage bits .",
    "a matrix - based representation is used to construct quantm multiple - valued decision diagram ( qmdd ) for reversible boolean functions  @xcite .",
    "this realizes ancilla - free reversible circuit and achieved qc comparable to transformation - based methods  @xcite . + * esop - based methods : * the advantage of esop formulation has been studied for classical logic synthesis , leading to state - of - the - art synthesis tools for obtaining an esop formulation with low number of cubes and literals  @xcite . for reversible logic synthesis , the esop formulation maps directly to the basic reversible logic gates .",
    "this synthesis method led to two different approaches so far .",
    "the first one , begins from a pprm formulation , and heuristically searches for common kernels at each logic depth  @xcite . in the other esop - based synthesis methods , each cube in the esop",
    "is converted into an equivalent toffoli gate and all the cubes are _ xor_-ed in the dedicated output line , leading to a fixed garbage count .",
    "an example of straightforward application of this method is shown in the figure  [ fig:4mod5 ] , where the reversible circuit for grover s oracle ( @xmath35 ) is synthesized .",
    "the corresponding anf is @xmath36 .",
    ", width=226 ]    realizing that the qc and gate count can be further reduced by sharing the common cubes , a shared - cube synthesis algorithm is proposed in  @xcite .",
    "another method , proposed in  @xcite , identified two transformations to reduce the garbage and gate count .",
    "an evolutionary algorithm to generate reversible circuit using esop formulation is proposed in  @xcite .",
    "* motivation : * despite significant research in the reversible logic synthesis methods , the major focus has been so far towards synthesis with optimal garbage lines . while this is justified due to the difficulty of realizing a qubit in current quantum technologies , this also offers a restricted view of the synthesis performance . as it is shown in the methods based on the decision diagram  @xcite ,",
    "it is possible to achieve significantly less gate cost and qc than other state - of - the - art garbage - free synthesis method .",
    "fundamentally , this reflects a trade - off , which is explored in this paper . the trade - off between ancilla and qc",
    "is presented in a recent paper  @xcite .",
    "we propose similar approach , for esop - based reversible logic synthesis .",
    "we show that , complementing the approach outlined in  @xcite , the trade - off can be performed early in the logic synthesis flow .",
    "several esop - based synthesis techniques  @xcite focussed on reducing qc and gate count by common cube sharing and a set of transformations .",
    "in this paper , we attempt to generalize this and explore the link between esop minimization and reversible circuit synthesis performance .",
    "a natural question at this point is whether it is possible to achieve ancilla - free reversible logic synthesis starting from an esop formulation , which represents one extreme point of the ancilla - cost trade - off .",
    "we propose a rule - based approach to achieve the same .    in short ,",
    "our contributions are twofold .",
    "* first , we show that diverse trade - off points between ancilla count and qc / gate cost is achievable .",
    "we propose a tool - flow to perform the trade - off systematically . *",
    "second , we propose a rule - based , ancilla - free reversible logic synthesis technique starting from an esop formulation .",
    "the rest of this paper is organized as following . in the section [ sec : synth_flow ] ,",
    "the overall synthesis flow is outlined .",
    "the ancilla - free esop - based reversible logic synthesis is detailed in the section [ sec : ancilla_free ] .",
    "the results are presented in the section [ sec : results ] .",
    "the paper is concluded with future directions in the section [ sec : summary ] .",
    "the proposed esop - based synthesis flow starts from a canonical anf representation .",
    "this is not an optimized esop representation like the one @xcite adopted in other esop - based synthesis flows @xcite@xcite .",
    "however , the rationale of selecting this representation is that it offers an insight into the effect of the esop optimizations onto the quality of synthesis results .",
    "this is previously studied , in an evolutionary algorithm @xcite .",
    "constructing an anf from a boolean truth table specification can be done using @xmath37 operations with standard algorithm .",
    "the input to the algorithm is the truth table @xmath38 $ ] , and the output is the coefficient vector of the anf , represented as @xmath39 $ ] . for an @xmath0-variable boolean function , @xmath40 , where @xmath41 can be computed as following .",
    "@xmath42    subsequently , the anf is converted into an @xmath0-ary , directed acyclic graph ( dag ) @xmath43 for the optimization and mapping to reversible circuit .",
    "note that , the anf is considered as a starting point for the subsequent esop - based optimizations .",
    "alternatively , this could be done with an esop - based form as available in  @xcite .",
    "however , we started from a canonical representation to have better control at the optimizations of our choice .",
    "the dag , that is generated from the anf , is not the final circuit but , an intermediate representation for optimization and mapping . here",
    ", @xmath43 is defined as a set of nodes @xmath44 and a set of edges @xmath45 , where @xmath46 indicates an edge between @xmath47 and @xmath48 .",
    "the nodes can be of these types - _ t_constant , t_identifier , t_root , t_and _ and _ t_xor_. an exemplary dag for one output of @xmath49 circuit is shown in the following figure  [ fig : nprime3 ] .",
    "the @xmath50 node is for combining all the different output functions of the reversible circuit . for every node , the @xmath51",
    "is appended as a suffix .",
    "the reversible boolean specification of @xmath49 in permutation form is @xmath52  @xcite .",
    ", width=340 ]      in order to reduce the qc , gate cost and garbage count from the default implementation flow outlined in the previous section , several optimization engines are plugged in .",
    "these are described in the following subsections .    * kernel extraction : * kernel extraction from a polynomial expression is a well - studied problem in classical logic synthesis@xcite .",
    "we start from an existing recursive kernel extraction algorithm ( algorithm 8.3.4 , @xcite ) .",
    "the algorithm returns all possible kernels , @xmath53 for a given function @xmath1 . from those candidate kernels , the kernel with minimum remainder term ( @xmath54 )",
    "is chosen and termed as the divisor .",
    "after this initial kernel computation , this same process is repeated for the divisor , quotient and the remainder .",
    "additionally , an user - defined threshold parameter is chosen to control the size of the selected kernel .",
    "this ensures that the generated @xmath55-@xmath56 graph is not skewed in nature and there is a fair distribution of edges across multiple depths . if no suitable kernel is found , the dividend is retained as it is with 2-level @xmath55-@xmath56 graph formation .",
    "@xmath57 @xmath58    * common cube sharing : * as identified in several esop - based synthesis methods , sharing common cubes improves the synthesis quality signficantly . with the graph - based representation , it is convenient to perform the cube sharing optimization .",
    "shareability of a pair of nodes is determined by the number of common children amongst them .",
    "if for either of the nodes , all the children are part of another node , then it is considered _",
    "shareable_. otherwise , if the number of common children is more than half of the total children count of the two nodes , then the nodes are declared shareable .",
    "the nodes are shared across multiple depths of the @xmath55-@xmath56 graph , which again can be controlled as an input parameter .",
    "* parent reduction optimization : * a key observation from existing minimum garbage synthesis solutions  @xcite is that the final toffoli network , when presented in the @xmath55-@xmath56 graph form ( see figure  [ fig : nprime3 ] ) allows for a perfect execution of the mapping algorithm to be presented later ( algorithm [ algofindtarget ] ) .",
    "this formed the motivation of the parent reduction optimization . in this optimization , before every iteration of target node determination , the leaf node with minimum parents is identified as a candidate node .",
    "the number of parents for that particular node is minimized by applying the following expansion rules .",
    "@xmath59    @xmath60    for both the rules , direct parents of node @xmath61 are avoided by adding an edge from the @xmath62 node .",
    "this is beneficial only if there is an already and existing @xmath62 parent node .",
    "this reduces the parent count of node @xmath61 at the cost of increased parent count of node @xmath63 .",
    "this optimization is applied until no further reduction of node @xmath61 parent count is possible .",
    "clearly , several more complex expansion rules can be formulated as well as a complex heuristic for determination of the target leaf node . however , that leads to a long runtime and therefore omitted . in principle",
    ", there exists one or more set of transformation rules to convert any given esop formulation to the esop representation realized by minimum garbage reversible logic synthesis methods  @xcite .",
    "for example , the following expansion rule is a more general form of the rule  [ rule2 ] , where @xmath64 is @xmath65 .",
    "@xmath66    note that , these optimizations can be applied to any esop - based flow  @xcite . while , existing esop - based optimization approaches focus on reducing gate count or qc , we attempt to reduce line count here and in particular , to identify the trade - off between line count and qc .",
    "starting from the aforementioned graph representation , the mapping to generalized toffoli ( gt ) network is done by repeated determination of a target node ( @xmath67 ) and then mapping it to the corresponding reversible circuit representation .",
    "naturally , the target node determination forms the core algorithmic part , which is done heuristically as shown in the following algorithm  [ algofindtarget ] .    the heuristic works in a greedy manner to minimize the garbage count .",
    "it traverses all the nodes in @xmath51 above the leaf nodes .",
    "whenever there is an available @xmath56 node with a leaf node ( @xmath68 ) connected only to the @xmath56 node , the @xmath56 node is selected .",
    "all the other children of that node can perform the @xmath56 operation and use the node @xmath68 as target .",
    "if no such node is found , it proceeds towards all the @xmath55 nodes and looks for its parents , if it contains a similar @xmath56 parent in @xmath69 with single - parent leaf node .",
    "if no such node is found , the algorithm returns a node with maximum leaf node children . in case of a tie , the node with minimum parent",
    "is chosen .",
    "this leads to the creation of a garbage line .",
    "however , it creates the possibility to find single - parent in the next iteration .",
    "the callee mapping algorithm maps one node in one iteration , which is demonstrated the figure  [ fig : map ] . in the figure",
    "[ fig : map ] , for every identified target node , the corresponding toffoli circuit is shown in the middle and the modified graph is shown in the rightmost columns .",
    "three different kinds of target identification , as presented in the algorithm  [ algofindtarget ] , are shown .",
    "it is straightforward to show that the algorithm  [ algofindtarget ] always returns a valid node for mapping to the equivalent toffoli circuit , ensuring that the mapping algorithm always terminates with a valid circuit synthesis .",
    "the proposed ancilla - free reversible logic synthesis algorithm treats the problem in a step - wise fashion starting from the output esop expressions .",
    "each step applies a reversible transformation in order to reach a step , when all the functions are linear . from linear functions ,",
    "the reversible circuit can be easily constructed .",
    "for example , the possible set of reversible transformations in a @xmath70-variable circuit consists of all possible @xmath18 and @xmath71 gates .",
    "we refer the application of these gates as transformation of types @xmath72 and @xmath73 respectively .",
    "all possible transformations are available as rules , one of which is chosen at each step by following a heuristic process .",
    "a transformation is adjudged suitable if it reduces the number of non - linear terms in the expression or reduces the number of literals in an already linear expression .",
    "initially the non - linear terms are reduced using transformation of type @xmath72 . if it is no longer possible to apply @xmath72 or two consecutive transformation are same , then transformation of type @xmath73 are examined and a suitable transformation is chosen following a heuristic procedure .",
    "after all the output expressions have reduced to linear expressions , only @xmath72 type transformation are applied which trivially reduce the expressions to single literal form .",
    "the key steps in the algorithm are checking the suitability of applying a specific transition with control and target variables , for which we developed heuristic techniques .",
    "these steps are explained in the following .",
    "* suitability check of transformation type @xmath72 : * the algorithm checks for the occurrence of two non - linear terms in a single expression and then applies the @xmath72 transformation with the control from the common variable and the target on one of the unique variables . the target is assigned arbitrarily .",
    "for example if @xmath74 is detected in an expression , the unique variables are @xmath61 and @xmath75 .",
    "either of these are arbitrarily chosen as the target variable with a @xmath72 transformation .",
    "* suitability check of transformation type @xmath73 : * when @xmath72 type transitions fail to further simplify the esop expressions , a target is arbitrarily fixed and appropriate control variables are searched for in the expressions where the target occurs . if the application of @xmath73 leads to a decrease in the number of non - linear terms in the expressions then it is adjudged as suitable .    *",
    "terminating condition : * after a cascade of changes the output expressions keep simplifying until the take the form of basic variables .",
    "this is when the algorithm terminates .",
    "it can be shown that either of these two previous transformations are always found to be suitable and the terminating condition is always achieved for @xmath70-variable functions .",
    "we explain the algorithmic flow with the following example .",
    "the three output expressions for the benchmark circuit @xmath76 @xcite are as following .",
    "@xmath77 @xmath78 @xmath79    at the first stage , the presence of two nonlinear terms in @xmath80 is found , where @xmath72 is suitable .",
    "the application of @xmath72 with @xmath63 as control and @xmath61 as target line means that one needs to replace @xmath61 with @xmath62 in all the expressions .",
    "the according changes in the aforementioned equations are as following .",
    "@xmath81 @xmath82 @xmath83 in the next step , two nonlinear terms in @xmath84 is found and again @xmath72 with @xmath75 as control and @xmath61 as target line . by repeating these steps ,",
    "one reaches the terminating condition .",
    "the algorithm is presented in form of pseudo - code in algorithm  [ algo_ancilla_free ] . the algorithm is run over the complete set of @xmath70-variable functions , of which the results are presented in the following section . for scaling the algorithm to more than @xmath70 variables ,",
    "further heuristics with @xmath85 gates are applied . there , the goal is to first reduce the esop functions to consist of @xmath26-literal cubes only .",
    "then onwards the above algorithm can be applied again .",
    "this gives rise to the possibility of reducing an @xmath0-variable reversible logic synthesis to @xmath16-variable form recursively .",
    "it must be noted that , @xmath0-literal cubes can not be present for a @xmath0-variable reversible boolean function to maintain balancedness property of the output functions .",
    "the abovementioned algorithms are implemented using c++ , with around 3000 lines of code .",
    "the code is compiled with gcc version 4.6.6 and it is executed on an amd phenomii x6 1100 t processor running linux - based os . in the following , we present a series of experiments to identify the advantage and disadvantage of the proposed methods vis - a - vis state - of - the - art reversible logic synthesis methods .",
    "the optimization kernels are controllable through command line parameters allowing various experiments .",
    "though no specific optimization is turned on for increasing the count of peres gates , those gates , when formed , are identified and accounted for in the qc and gate count computation .",
    "it must also be noted that final ordering of the output functions are chosen such as to minimize the qc @xcite .      for this experiment ,",
    "the user - controllable parameters in the tool include the choice to run parent reduction ( * p * ) , common cube sharing ( * c * ) optimization , the choice of threshold for kernel extraction ( * k * ) and selection of the size of the toffoli gate ( * t * ) . the last one is controlled when creating the initial @xmath0-ary esop graph . if the value of * c * is set to @xmath86 , the selection of * t * has less influence . to show the trade - offs , two boolean functions with significant relevance in cryptography , namely the s - boxes for aes ( 8-variable ) and present ( 4-variable ) block ciphers are chosen .",
    "for the different values of parameters , corresponding gate cost , garbage count and qc values are presented in the table  [ tab : tradeoff ] .",
    "the best results for these functions obtained from  @xcite using bdd - based reversible logic synthesis is presented for comparison .",
    ".trade - off between qc and garbage ( @xmath87 ) [ cols=\"<,^,^,^,^,^,^,^ \" , ]     for an exhaustive run on all @xmath70-variable boolean function an average gate count of @xmath88 , maximum gate size of @xmath89 and average garbage count of @xmath90 is obtained . in  @xcite ,",
    "garbage - free synthesis is done with an average gate count of @xmath91 . the optimal gate count for nct library",
    "is found as @xmath92  @xcite .",
    "note that , in comparison with  @xcite , our method is several orders of magnitude faster . while  @xcite reports half a second synthesis time for each @xmath70-variable boolean function , our entire exhaustive synthesis took only 11 seconds .",
    "though the esop - based methods reported in  @xcite would require @xmath70 garbage bits , the transformations mentioned in  @xcite resulted in significant improvement in gate cost and garbage count for exhaustive @xmath70-variable boolean functions .",
    "there , an average gate count of @xmath93 and an average garbage count of @xmath94 is obtained .",
    "this shows that for small variable count , the optimized output produced by exorcism-4  @xcite outweighs the optimizations presented in this paper .    in the presented flow , it is observed that for boolean functions with large variable count ( @xmath95 ) , most of the processing time is spent in the optimization engines .",
    "the determination of target node and mapping to toffoli circuit is extremely fast .",
    "when no optimization engine is run , the synthesis takes similar execution time compared to that reported in bdd - based methods .",
    "presumably , the coupling of a fast and rule - based esop optimization flow such as @xcite can improve the overall synthesis runtime .",
    "interestingly , the generation of optimized esop in @xcite uses a bdd - based representation .    with a simple trade - off approach between qc and garbage count",
    ", we showed that improvement of qc is possible in a controlled manner .",
    "moreover , better qc and gate count compared to state - of - the - art synthesis methods can be obtained , too .",
    "this findings can be crucial to develop reversible logic synthesis tools with more control over the synthesis outcome and to investigate further into the potential of esop - based synthesis methods .      for the ancilla - free approach outlined in the section  [ sec : ancilla_free ] , we experimented with all @xmath70-variable boolean functions and selected @xmath33-variable boolean functions .",
    "for all the @xmath70-variable circuits our approach converged to an ancilla - free reversible circuit .",
    "for the @xmath33-variable boolean functions , which we studied , all but one ( @xmath96 ) function converged to ancilla - free result . due to our focus on achieving ancilla - free synthesis from an esop formulation ,",
    "the qc and gate counts fared poorly .",
    "for example , in case of @xmath70-variable circuits , our heuristics selected @xmath18 gates in a greedy manner .",
    "this potentially negelects globally optimal solutions with @xmath71 gates .    for the @xmath70-variable boolean functions ,",
    "an average gate count of @xmath97 and an average qc of @xmath98 is obtained in our method .",
    "in contrast , the average gate count and qc values for optimal @xmath70-variable circuits are @xmath92 and @xmath99 respectively  @xcite .",
    "in this paper , a parameterizable esop - based reversible logic synthesis flow is presented , which allows trade - off between qc and garbage count . the results are compared with state - of - the - art synthesis tools .",
    "it shows that significant benefits in performance can be obtained by tuning the optimizations and/or compromising the garbage count .",
    "furthermore , ancilla - free esop - based reversible logic synthesis is proposed .",
    "the results , in terms of qc , is comparable to transformation - based reversible logic synthesis .",
    "+ in future , further investigation will be done to appreciate the interplay between esop minimization and the quality of reversible circuit .",
    "methods to relax the garbage count for better qc will be explored in the context of other reversible logic synthesis methods .",
    "furthermore , the qc adopted for this paper needs to be updated with latest clifford+t model of quantum computing primitives .",
    ", `` analysis and improvement of transformation - based reversible logic synthesis , '' in _ proceedings of the 2013 ieee 43rd international symposium on multiple - valued logic ( ismvl 13 ) _ , ieee computer society , washington , dc , usa , 47 - 52 .",
    "doi=10.1109/ismvl.2013.14 http://dx.doi.org/10.1109/ismvl.2013.14          ,  improving esop - based synthesis of reversible logic using evolutionary algorithms , \" in _ proceedings of the 2011 international conference on applications of evolutionary computation - volume part ii _ , pp .  151161 , 2011 .",
    ",  trading off circuit lines and gate costs in the synthesis of reversible logic , \" in _ integration , the vlsi journal _ , available online 21 september 2013 , issn 0167 - 9260 , http://dx.doi.org/10.1016/j.vlsi.2013.08.002 ."
  ],
  "abstract_text": [
    "<S> emerging technologies with asymptotic zero power dissipation , such as quantum computing , require the logical operations to be done in a reversible manner . </S>",
    "<S> in recent years , the problem of synthesizing boolean functions in the reversible logic domain has gained significant research attention . </S>",
    "<S> the efficiency of the synthesis methods is measured in terms of quantum cost , gate cost , garbage lines , logic depth and speed of synthesis . in this paper </S>",
    "<S> , we present a modification of the existing approaches based on exclusive sum - of - products ( esop ) , which allows to explore the trade - off between quantum cost and garbage lines . </S>",
    "<S> the proposed technique adds a new dimension to the reversible logic synthesis solutions . </S>",
    "<S> we demonstrate by detailed experiments that controlled improvement in quantum cost and gate count by increasing garbage count can be achieved . in some cases , improved quantum cost and gate count compared to state - of - the - art synthesis methods </S>",
    "<S> are reported . </S>",
    "<S> furthermore , we propose a novel rule - based approach to achieve ancilla - free reversible logic synthesis starting from an esop formulation . </S>"
  ]
}