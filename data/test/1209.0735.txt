{
  "article_text": [
    "_ program title : _ lambertw + _ catalogue identifier : _ aenc_v1_0 + _ program summary url : _ http://cpc.cs.qub.ac.uk/summaries/aenc_v1_0.html + _ program obtainable from : _ cpc program library , queen s university , belfast , n.  ireland + _ licensing provisions : _ gnu general public license version 3 + _ no .  of lines in distributed program , including test data , etc . :",
    "_ 1335 + _ no .  of bytes in distributed program , including test data , etc . :",
    "_ 25283 + _ distribution format : _ ` tar.gz",
    "` + _ programming language : _ c++ ( with suitable wrappers it can be called from c , fortran etc . ) , the supplied command - line + utility is suitable for other scripting languages like sh , csh , awk , perl etc . + _ computer : _ all systems with a c++ compiler .",
    "+ _ operating system : _ all unix flavors , windows .",
    "it might work with others .",
    "+ _ ram : _ small memory footprint , less than 1 mb + _ classification : _ 1.1 , 4.7 , 11.3 , 11.9 .",
    "+ _ nature of problem : _ find fast and accurate numerical implementation for the lambert w function .",
    "+ _ solution method : _ halley s and fritsch s iterations with initial approximations based on branch - point expansion , + asymptotic series , rational fits , and continued logarithm recursion .",
    "+ _ additional comments : _ distribution file contains the command - line utility ` lambert - w ` .",
    "doxygen comments , included in + the source files .",
    "makefile . + _ running time : _ the tests provided take only a few seconds to run .",
    "the lambert w function is defined as the inverse function of the mapping and thus solves the equation .",
    "this solution is given in the form of the lambert w function , and according to eq .",
    "it satisfies the following relation ,    since the mapping in eq .",
    "is not injective , no unique inverse of the @xmath2 function exists ( except at the minimum ) . as can be seen in fig .",
    "[ f : lambertw ] , the lambert w function has two real branches with a branching point located at @xmath3 . the bottom branch , @xmath4 , is defined in the interval @xmath5 $ ] and has a negative singularity for @xmath6 . the upper branch @xmath7 is defined for @xmath8 $ ] .    the earliest mention of the problem of eq .",
    "is attributed to euler @xcite . however , euler himself credited lambert for his previous work in this subject , lambert s transcendental equation @xcite .",
    "the @xmath0 function started to be named after lambert only recently , in the last 20 years or so ; nevertheless , the first usage of the letter @xmath9 appeared much earlier @xcite .",
    "recently , the @xmath0 function amassed quite a following in the mathematical community @xcite .",
    "its most faithful proponents are suggesting elevating it among the present set of elementary functions , such as @xmath10 , @xmath11 , @xmath12 , @xmath13 , etc . the main argument for doing so is the fact that w is the root of the simplest exponential polynomial function given in eq .  .",
    "we will acknowledge these efforts by strict usage of a _ roman _ symbol w as its name .     in blue and @xmath7 in red . the branching point at @xmath3",
    "is indicated with a green dash . ]",
    "while the lambert w function is called ` lambertw ` in the mathematics software tool _",
    "@xcite and ` lambertw ` in the matlab programming environment @xcite , in the _ mathematica _ computer algebra framework this function @xcite is implemented under the name ` productlog ` ( in the recent versions an alias ` lambertw ` is also supported ) . in open source format",
    "the lambert w function is available in the special - functions part of the gnu scientific library ( gsl ) @xcite , unfortunately implemented using only the slower halley s iteration ( see discussion in section [ s : timing ] ) .",
    "there are numerous , well documented applications of @xmath0 , certainly abundant in mathematics ( like linear delay - differential equations @xcite ) , numerics @xcite , computer science @xcite and engineering @xcite , but surprisingly many also in physics , just to mention a few ( without preference ) : quantum mechanics ( solutions for double - well dirac - delta potentials @xcite ) , quantum statistics @xcite , general relativity ( solutions to ( 1 + 1)-gravity problem @xcite , inverse of eddington - finkelstein ( tortoise ) coordinates @xcite ) , statistical mechanics @xcite , fluid dynamics @xcite , optics @xcite etc .",
    "the main motivation for the implementation in this work comes from the research in cosmic ray physics where it has been in use already for several years @xcite and new interesting applications are appearing frequently @xcite . in the next sections",
    "let us describe two new examples that arise from this field of astrophysics .      .",
    "_ bottom : _ a family of one - parametric gaisser - hillas functions @xmath14 for @xmath15 in the range from 1 to 10 with step 1.,title=\"fig : \" ] + . _",
    "bottom : _ a family of one - parametric gaisser - hillas functions @xmath14 for @xmath15 in the range from 1 to 10 with step 1.,title=\"fig : \" ]    the moyal function and the related distribution was proposed as a good approximation for the more complicated landau distribution @xcite used in descriptions of energy loss of charged particles passing through matter @xcite .",
    "the un - normalized moyal function is defined as and can be seen in fig .",
    "[ f : moyal - gh ] ( top ) .",
    "its inverse can be written in terms of the two branches of the lambert w function ,    in experimental astrophysics the moyal function is used for phenomenological recovery of the saturated signals from photomultipliers @xcite , where the largest parts of the saturated signals are obscured by the limited range of the analog - to - digital converters .      in astrophysics",
    "the gaisser - hillas function is used to model the longitudinal particle density in a cosmic - ray air shower @xcite .",
    "we can show that the inverse of the three - parametric gaisser - hillas function , is intimately related to the lambert w function . using rescale substitutions ,",
    "the gaisser - hillas function is modified into a function of one parameter only , the family of one - parametric gaisser - hillas functions is shown in fig .",
    "[ f : moyal - gh ] ( bottom ) . the problem of finding an inverse , for @xmath16 , can be rewritten into according to the definition , the two ( real ) solutions for @xmath17 are obtained from the two branches of the lambert w function , note that the branch @xmath18 or @xmath19 simply chooses the right or left side relative to the maximum , respectively .",
    "the gaisser - hillas function is intimately related to the gamma distribution which was successfully used somewhat earlier @xcite in an approximate description of the mean longitudinal profile of the energy deposition in electromagnetic cascades .",
    "it is trivial to show that the inverses of the gamma and inverse - gamma distributions @xcite are expressible in terms of the lambert w function as well .",
    "before describing the actual implementation let us review some of the possible numerical and analytical approaches to find @xmath0 .      for @xmath20 and @xmath21 we can take the natural logarithm of eq .   and rearrange it into from here it is clear that an analytical expression for @xmath0 will exhibit a certain degree of self similarity .",
    "the @xmath0 function has multiple branches in the complex domain . due to the @xmath20 and @xmath21 conditions , eq .",
    "represents the positive part of the @xmath7 principal branch and in this form it is suitable for evaluation when @xmath22 , i.e.  when @xmath23 .    unrolling the self - similarity in eq .   as a recursive relation , the following curious expression for @xmath7",
    "is obtained , or in the shorthand of a continued logarithm , the above expression clearly has the form of successive approximations , the final result given by the limit , if it exists .    for @xmath24 and @xmath25 we can multiply both sides of eq .",
    "with @xmath18 , take logarithm , and rewrite it into a similar expansion for the @xmath4 branch , again , this leads to the similar recursion , or as a continued logarithm , for this continued logarithm we will use the symbol @xmath26}(x)$ ] where @xmath27 denotes the depth of the recursion in eq .  .",
    "starting from yet another rearrangement of eq .",
    ", we can obtain a recursion relation for the @xmath28 part of the principal branch @xmath29 ,      we can apply halley s root - finding method @xcite to derive an iteration scheme for @xmath30 by writing the second - order taylor series since root @xmath31 of @xmath32 satisfies @xmath33 we can approximate the left - hand side of eq .   with 0 and replace @xmath31 with @xmath34 . rewriting the obtained result into and using newton s method @xmath35 on the last bracket",
    ", we arrive at the expression for halley s iteration for the lambert w function where    this method is of the third order , i.e.  having @xmath36 will produce @xmath37 .",
    "supplying this iteration with a sufficiently accurate first approximation of the order of @xmath38 will thus give a machine - size floating point precision @xmath39 in at least two iterations .",
    "for both branches of the lambert w function a more efficient iteration scheme exists @xcite , where @xmath40 is the relative difference of successive approximations at iteration @xmath27 , the relative difference can be expressed as where the error term in this iteration is of a fourth order , i.e. with @xmath41 we obtain @xmath42 .",
    "supplying this iteration with a sufficiently reasonable first guess , accurate to the order of @xmath38 , will therefore deliver machine - size floating point precision @xmath39 in only one iteration and excessive @xmath43 in two !",
    "the main goal now is to find reliable first order approximations that can be fed into fritsch s iteration .",
    "due to the lively landscape of the lambert w function properties , the approximations will have to be found in all the particular ranges of the function s behavior .",
    "the following section deals with finding the appropriate initial approximations in the whole definition range of the two branches of the lambert w function .       on the top and @xmath7 on the bottom.,title=\"fig : \" ] +   on the top and @xmath7 on the bottom.,title=\"fig : \" ]    the inverse of the lambert w function , @xmath44 , has two extrema located at @xmath45 and @xmath46 .",
    "expanding @xmath47 to the second order around the minimum at @xmath48 we obtain the inverse @xmath47 is thus approximated in the lowest order by a parabolic term implying that the lambert w function will have square - root behavior in the vicinity of the branch point @xmath49 , to obtain the additional terms in eq .",
    "we proceed by defining an inverse function , centered and rescaled around the minimum , i.e.  @xmath50 . due to this centering and rescaling",
    ", the taylor series around @xmath51 becomes particularly neat , using this expansion we can derive coefficients @xcite of the corresponding inverse function from eq .",
    "we see that @xmath52 . using @xmath53 as an independent variable",
    "we can write this series expansion as where the lowest few coefficients @xmath54 are    [ cols=\"<,>,>,>,>,>,>,>,>\",options=\"header \" , ]     is enough .",
    "to quantify the accuracy of a particular approximation @xmath55 of the lambert function @xmath0 we can introduce a quantity @xmath56 defined as so that it gives us a number of correct decimal places the approximation @xmath55 is producing for some value of the parameter @xmath17 .    in fig .",
    "[ f : approx - w0 ] all approximations for the @xmath7 mentioned above are shown in the linear interval @xmath57 $ ] on the left and the logarithmic interval @xmath58 $ ] on the right . for each of the approximations an optimal interval is chosen so that the number of accurate decimal places is maximized over the whole definition range . for the @xmath7 branch",
    "the resulting piecewise approximation with @xmath59 , @xmath60 , and @xmath61 , is accurate in the definition range @xmath62 $ ] to at least 5 decimal places and to at least 3 decimal places in the whole definition range @xmath63 $ ] .",
    "note that @xmath64}(x)$ ] comes from eq .",
    ", @xmath65}(x)$ ] and @xmath66}(x)$ ] are from eq .  , and @xmath67 is from eq .  .     into a final piecewise function .",
    "the number of accurate decimal places @xmath56 is shown for two ranges , linear interval @xmath57 $ ] ( top ) and logarithmic interval @xmath58 $ ] ( bottom ) .",
    "the approximations are branch - point expansion @xmath64}(x)$ ] from eq .",
    "( blue ) , rational fits @xmath65}(x)$ ] and @xmath66}(x)$ ] from eq .   in black and red ,",
    "respectively , and asymptotic series @xmath67 from eq .",
    "( green).,title=\"fig : \" ] +   into a final piecewise function .",
    "the number of accurate decimal places @xmath56 is shown for two ranges , linear interval @xmath57 $ ] ( top ) and logarithmic interval @xmath58 $ ] ( bottom ) .",
    "the approximations are branch - point expansion @xmath64}(x)$ ] from eq .",
    "( blue ) , rational fits @xmath65}(x)$ ] and @xmath66}(x)$ ] from eq .   in black and red , respectively , and asymptotic series @xmath67 from eq .",
    "( green).,title=\"fig : \" ]     ( black ) from fig .",
    "[ f : approx - w0 ] after one step of halley s iteration ( red ) and one step of fritsch s iteration ( blue).,title=\"fig : \" ] +   ( black ) from fig .",
    "[ f : approx - w0 ] after one step of halley s iteration ( red ) and one step of fritsch s iteration ( blue).,title=\"fig : \" ]    the accuracy of the final piecewise approximation @xmath68 is shown in fig .",
    "[ f : approx - w0-step ] ( black line ) . using this approximation ,",
    "a single step of halley s iteration ( red ) and fritsch s iteration ( blue ) is performed and the resulting number of accurate decimal places is shown . as can be seen from the plots ,",
    "both iterations produce machine - size accurate floating point numbers in the whole definition interval except for the interval between 6.5 and 190 where the halley s method requires another step of the iteration .",
    "for that reason we have decided to use only ( one step of ) fritsch s iteration in the c++ implementation of the lambert w function .",
    "the branch - point expansion @xmath69}(x)$ ] is shown in blue , the rational approximation @xmath70 in black , and the logarithmic recursion @xmath71}$ ] in red .",
    "_ bottom : _ the combined approximation is accurate to at least 5 decimal places in the whole definition range . the results after applying one step of halley s iteration are shown in red and after one step of fritsch s iteration in blue.,title=\"fig : \" ] +   branch .",
    "the branch - point expansion @xmath69}(x)$ ] is shown in blue , the rational approximation @xmath70 in black , and the logarithmic recursion @xmath71}$ ] in red . _",
    "bottom : _ the combined approximation is accurate to at least 5 decimal places in the whole definition range . the results after applying one step of halley s iteration are shown in red and after one step of fritsch s iteration in blue.,title=\"fig : \" ]    in fig .",
    "[ f : approx - w-1 ] ( top ) the same procedure is shown for the @xmath4 branch .",
    "the final approximation with @xmath72 and @xmath73 , is accurate to at least 5 decimal places in the whole definition range @xmath74 $ ] .",
    "note that @xmath69}(x)$ ] is taken from eq .",
    ", @xmath70 is from eq .  , and @xmath71}(x)$ ] is from eq .  .    in fig .",
    "[ f : approx - w-1 ] ( bottom ) the combined approximation @xmath75 is shown ( black line ) . the values after one step of halley s iteration are shown in red and after one step of fritsch s iteration in blue . similarly as for the previous branch , fritsch s iteration turns out to be superior , yielding machine - size accurate results in the whole definition range , while halley s iteration is accurate to at least 13 decimal places .",
    "the most recent version of the sources of this implementation with some additional material and examples are available at http://www.ung.si/~darko/lambertw/ and are released under the gpl license .",
    "apart from the special functions in gsl @xcite , this is the only freely available implementation of the lambert w function in c++ and to the best of our knowledge the only implementation using the superior fritsch s version of the iteration .",
    "the supplied c++ code implements the following set of functions    * ` double lambertwapproximation < b>(double x ) ; ` * ` double lambertw < b>(double x ) ; ` * ` double lambertw(int branch , double x ) ; `    where @xmath76 in the first two functions should be replaced with the compile - time branch integer value , e.g.  ` lambertw<-1>(x ) ` or ` lambertw<0>(x ) ` .",
    "apart from the slightly increased efficiency , the main reason for implementing the first two functions with the branch @xmath76 as a compile time parameter is to force the users to think about the two possible solutions to the problem in eq .  .",
    "just as for solutions to the quadratic equation where the @xmath77 sign has to be chosen based on the desired solution , the lambert w function offers two possibilities that need careful consideration .    the initial approximations @xmath78 from eqs .   and , that are used to kick -",
    "start the iterations , are also directly available as ` lambertwapproximation < b>(x ) ` , as they might be useful in applications for which it is sufficient to have a limited number of accurate decimal places ( see the discussion above ) .    the supplied code does not need any kind of special installation procedures . in the case",
    "that your analysis needs an evaluation of the lambert w function , the two source files , ` lambertw.h ` and ` lambertw.cc ` , should be simply bundled with your project structure and compiled with a suitable c++ compiler .",
    "the source distribution also includes a command - line utility implemented by the ` lambert-w.cc ` source file .",
    "the included ` makefile ` can , with the request ` make lambert - w ` , build an executable command .",
    "it can be invoked through a shell as ` ./lambert - w [ branch ] x ` , taking an optional ` branch ` number ( 0 by default ) and a parameter ` x ` .",
    "the output of the command is equivalent to the @xmath79 return value and can thus be simply used in shell scripts ( ` sh ` , ` bash ` , or ` csh ` ) or other programming languages with easy access to shell invocations ( ` awk ` , ` perl ` etc . ) .",
    "also included in the distribution is a test suite which can perform a correctness check on your build by comparing obtained and expected return values of the lambert w function on your system .",
    "it is invoked by the command ` make tests ` .",
    "any potential discrepancies larger than the double machine precision ( @xmath80 ) will be reported in the output .",
    ", relative to the gsl implementation @xcite for the @xmath7 branch ( red ) and the @xmath4 branch ( blue ) .",
    "for @xmath81 the ratio slowly decreases and is @xmath82 for @xmath83 .",
    "time of the respective driver loops and function calls was subtracted in order to measure only differences between the pure numerical parts of the two implementations ( see text for details ) . ]",
    "we have decided to compare the execution time of our code relative to the gnu gsl library ( implemented in the c language ) since comparisons to interpreted code ( like _ maple _ , matlab or _ mathematica _ ) would , besides common availability problems , not be fair in terms of speed .    in fig .",
    "[ f : timing ] relative speedup , @xmath84 , is shown as a function of the lambert w parameter @xmath17 .",
    "timing accuracy of several % was achieved by running 3000000 function calls in a loop , taking special care that the compiler did not optimize code away by slightly modifying @xmath17 on each call and then gathering all results into a summed variable reported at the end . for each of the two implementations an identical code was also run with the lambert w function call replaced with a simple identity function ( just returning its input parameter ) in order to estimate the overhead of the surrounding timing code .",
    "this @xmath85 is then consequently subtracted from the time of the lambert w runs @xmath86 , giving an approximation to the time taken by the pure function call , @xmath87 .",
    "the ratio @xmath88 is then plotted in fig .",
    "[ f : timing ] .    as can be clearly seen from fig .",
    "[ f : timing ] , our implementation is at least @xmath89 faster than gsl for a broad range of input parameters @xmath17 , but the largest efficiency gains ( up to @xmath90 ) are observed in the ranges where rational fits @xmath91 from eqs .   and are used .",
    "although fritsch s iteration is in general more complex than halley s , at the end it pays off , yielding machine - size accuracy with a single step where halley s might need more , also due to poor initial approximations used in gsl .",
    "gsl performs better only in the small regions where branch - point and asymptotic expansions are used without the consequent halley s iteration refinements .",
    "the comparisons were made on the ubuntu 12.04 x86_64 linux operating system running on a 2.2ghz amd opteron 275 processor , using the gcc 4.6.3 compiler with optimization option ` -o2 ` .",
    "we have shown that fritsch s iteration scheme coupled with accurate initial approximations can deliver significant efficiency gains in the numerical evaluation of the real branches of the lambert w function .",
    "the open - source release of our c++ implementation is suitable for inclusion in various analysis packages used in all fields of physics .",
    "the author wishes to thank matej horvat , michael unger , martin oloughlin , and amir malekpour for useful discussions and suggestions .",
    "this work was partially supported by the slovenian research agency .",
    "+ lambertw.html ] ; some open source versions for matlab : p.  getreuer and d.  clamond , http://www.getreuer.info/home/lambertw[http://www.getreuer.info/home/ + lambertw ] ; n.n .",
    "schraudolph and d.  ross , http://www.cs.toronto.edu/~dross/code/lambertw.m .",
    "corless , g.h .",
    "gonnet , d.e.g .",
    "hare , d.j .",
    "jeffrey , and d.e .",
    "knuth , adv .",
    "math .  5 ( 1996 ) 329 ; r.m .",
    "corless , d.j .",
    "jeffrey , and d.e .",
    "knuth , 1997 , _ a sequence of series for the lambert function _",
    ", in : proc .",
    "issac 97 , maui , ( 1997 ) 197204 ; r.m .",
    "corless and d.j .",
    "jeffrey , _ the wright @xmath92 function _ , in : j.  calmet , b.  benhamou , o.  caprotti , l.  henocque , v.  sorge ( eds . ) , _ artificial intelligence , automated reasoning , and symbolic computation _ , in : proc .",
    "aisc - calculemus 2002 , springer ( 2002 ) 7689 .",
    "j.  bustos - jimenez , n.  bersano , s.e .",
    "schaeffer , j.m .",
    "piquer , a.  iosup , and a.  ciuffoletti , in _ grid computing : achievements and prospects _ , eds .",
    "s.  gorlatch , p.  fragopoulou , and t.  priol , springer ( 2008 ) ; http://dx.doi.org/10.1007/978-0-387-09457-1_6[doi:10.1007/978-0-387-09457-1_6 ] .",
    "scott , m.  aubert - frcon , and j.  grotendorst , chem .",
    "324 ( 2006 ) 323338 ; t.c .",
    "scott , a.  lchow , d.  bressanini , and j.d .",
    "morgan iii , phys .",
    "rev .  a 75 ( 2007 ) 060101r ; t.c .",
    "scott , j.f .",
    "babb , a.  dalgamo , and j.d .",
    "morgan iii , chem .",
    "lett .  203 ( 1993 ) 175183 ."
  ],
  "abstract_text": [
    "<S> the lambert @xmath0 function and its possible applications in physics are presented . the actual numerical implementation in c++ consists of halley s and fritsch s iterations with initial approximations based on branch - point expansion , asymptotic series , rational fits , and continued - logarithm recursion .    </S>",
    "<S> lambert w function , computational physics , numerical methods and algorithms , c++    @xmath1 + </S>"
  ]
}