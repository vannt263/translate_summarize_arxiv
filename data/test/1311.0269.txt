{
  "article_text": [
    "the computing requirements for high energy physics ( hep ) projects like the large hadron collider ( lhc )  @xcite at the european laboratory for particle physics ( cern ) in geneva , switzerland are larger than can be met with resources deployed in a single computing center .",
    "this has led to the construction of a global distributed computing system known as the worldwide lhc computing grid ( wlcg )  @xcite , which brings together resources from nearly 160 computer centers in 35 countries .",
    "computing at this scale has been used , for example , by the cms  @xcite and atlas  @xcite experiments for the discovery of the higgs boson  @xcite . to achieve this and other results the cms experiment , for example , typically used during 2012 a processing capacity between 80,000 and 100,000 x86 - 64 cores from the wlcg .",
    "further discoveries are possible in the next decade as the lhc moves to its design energy and increases the machine luminosity .",
    "however , increases in dataset sizes by 2 - 3 orders of magnitude ( and commensurate processing capacity ) will eventually be required to realize the full potential of this scientific instrument .",
    "the scale and longevity of the lhc computing require continual r&d into new technologies which may be relevant in the coming years .",
    "in this paper we report on our investigations into one such technology , low power arm processors , for scientific computing .",
    "the construction of the wlcg was greatly facilitated by the convergence around the year 2000 on commodity x86 hardware and the standardized use of linux as the operating system for scientific computing clusters .",
    "even if multiple generations of x86 hardware ( and hardware from both intel and amd ) are provided in the various computer centers , this was a far simpler situation than the typical mix of proprietary unix operating systems and processors .    until around 2005",
    ", a combination of increased instruction level parallelism and ( in particular ) processor clock frequency increases insured that performance gains expected from moore s law would be seen by single sequential applications running on a single processor . the combination of linux , commodity x86 processors and moore s law gains for sequential applications made for a simple software environment .    since around 2005",
    ", however , processors have hit scaling limits , largely driven by overall power consumption  @xcite .",
    "the first large change in commercial processor products as a result of these limits was the introduction of `` multicore '' cpus , with more than one functional processor on a chip .",
    "at the same time clock frequencies ceased to increase with each processor generation and indeed were often reduced relative to the peak .",
    "the result of this was that one could no longer expect that single , sequential applications would run faster on newer processors .",
    "however in the first approximation , the individual cores in the multicore cpus appeared more or less like the single standalone processors used previously .",
    "most large scientific applications ( hpc / parallel or high throughput ) run in any case on clusters and the additional cores are often simply scheduled as if they were additional nodes in the cluster .",
    "this allows overall throughput to continue to scale even if that of a single application does not .",
    "it has several disadvantages , though , in that a number of things that would have been roughly constant over subsequent purchasing generations in a given cluster ( with a more or less fixed number of rack slots , say ) now grow with each generation of machines in the computer center .",
    "this includes the total memory required in each box , the number of open files and/or database connections , increasing number of independent ( and incoherent ) i / o streams , the number of jobs handled by batch schedulers , etc .",
    "the specifics vary from application to application , but potential difficulties in continually scaling these system parameters puts some pressure on applications to make code changes in response , for example by introducing thread - level parallelism where it did not previously exist .",
    "there is moreover a more general expectation that the limit of power consumption on future moore s law scaling will lead to more profound changes going forward . in particular ,",
    "the power hungry x86 - 64 `` large '' cores of today will likely be replaced by simpler and less power hungry `` small '' cores with a greater emphasis on aggregate throughput performance per watt , rather than just raw performance .",
    "this has rekindled interest in solutions that would lead back to a more heterogeneous computing environment .",
    "a strong contender for this evolving low power ( high performance / watt ) server market is the arm processor  @xcite due its nearly complete dominance in the low power mobile market for smartphones and tablets , which has also seen dramatic growth since around 2005 .",
    "the size of the mobile market , and its traditional focus on low power , has led to interest in using these processors also in a server environment .",
    "as such arm - based server products such as boston viridis  @xcite are starting to appear .",
    "the arm processor has a long history  @xcite dating back to acorn computers and the early days of personal computers .",
    "it is a risc processor and the current generation ( armv7 ) , used in most high - end mobile devices and the new server products , is a 32bit processor .",
    "we are interested in the `` a '' series of general purpose `` application '' processors .",
    "( arm also produces `` r '' and `` m '' series designs for use in real - time and embedded microcontroller environments , respectively . )",
    "a 64bit version of the arm processor ( armv8 ) has also been designed and is expected to appear in server products from fall 2013 or early 2014 .",
    "intel has also announced the development of products ( silvermont ) aimed at a low power market .",
    "however , much like the current mobile market , it is nt positioned to dominate the low power server market as it has dominated the commodity processor market in the past .",
    "as the arm processors are general purpose and run linux , only a standard port of the cms software is required , similar to what was done , for example , to port the cms software from 32bit ( ia32 ) to 64bit ( x86 - 64 ) .",
    "such a port is reasonably straightforward relative to the changes required to use other high performance per watt solutions ( e.g. gpgpu s , which require actual software rewrites ) , thus the effort required for these initial investigations was also relatively modest .",
    "for the tests described in this paper we used a low - cost development board , the odroid - u2  @xcite .",
    "the processor on the board is an exynos 4412 prime , a system - on - chip ( soc ) produced by samsung for use in mobile devices .",
    "it is a quad - core cortex a9 armv7 processor operating at 1.7ghz with 2 gb of lp - ddr2 memory .",
    "the processor also contains an arm mali-400 quad - core gpu accelerator , although that was not used for the work described in this paper .",
    "the board has emmc and microsd slots , two usb 2.0 ports and 10/100mbps ethernet with an rj-45 port .",
    "power is provided a 5v dc power adaptor .",
    "the cost of the board alone was $ 89 and with the relevant accessories ( cables , a cooling fan , a 64 gb emmc storage module , etc . )",
    "the total cost was $ 233 .",
    "this extremely modest cost permitted us to do meaningful initial investigations without investing in a full - fledged server .",
    "all build tests were done using a 500 gb @xmath0 ata disk connected via usb .",
    "runtime tests were done with output written to the emmc storage .    for the linux operating system on the board we used fedora 18 arm remix with kernel version 3.0.75 ( provided by hardkernel , the vendor for the odroid - u2 board ) due to its similarities to scientific linux cern ( slc ) .",
    "it is fully hard float capable and uses the floating point unit on the soc .",
    "the kernel was reconfigured to enable swap devices / files , which is required for cmssw compilation .",
    "a 4 gb swap file was used in our build environment .    in order to compare results from the arm board we also used two typical x86 - 64 servers currently deployed at cern .",
    "the first is a dual quad - core intel xeon l5520 @xmath1 2.27 ghz ( nehalem ) with 24 gb of memory .",
    "the second is dual hexa - core intel xeon e5 - 2630 @xmath1 2.00ghz ( sandy bridge ) with 64 gb of memory .",
    "both machines were equipped with a large local disk for output and used software installed on an afs filesystem at cern .",
    "these machines were purchased about three years apart and very roughly represent the range of x86 - 64 hardware being operated at the time of our arm tests .",
    "the software written by the cms collaboration itself ( cmssw ) consists of approximately 3.6 m source lines of code ( sloc ) , as measured by the sloccount tool  @xcite .",
    "the entire software stack includes also 125 `` external '' packages , including hep software packages like root  @xcite ( @xmath21.7 m sloc ) , geant4  @xcite ( @xmath21.2 m sloc ) and many general open source packages : gcc , boost , qt , python , etc .      for the compilation and linking of this large set of software we considered three options :",
    "compilation directly on the odroid - u2 board itself , cross compilation for the odroid - u2 board from an x86 - 64 host and compilation for the odroid - u2 board from an emulation environment such as qemu  @xcite running on an x86 - 64 host    our experience with arm emulation with qemu prior to purchasing the odroid - u2 led us to believe that it was not yet quite mature enough to provide a stable build environment sufficient for our needs .",
    "even though it was clear that the small odroid - u2 development board is much less powerful than most standard x86 - 64 servers , we decided to attempt compilation of the full stack directly on the arm board .",
    "this was motivated by the idea that should we eventually adopt arm as a standard production architecture , we would probably aim for direct compilation on arm servers .      during the port to armv7 we had to resolve a number of issues in the software and",
    "build recipes :    * oracle : * we did not have oracle libraries for the armv7 architecture . by construction , however , no standard grid - capable cms applications depend on oracle . thus this affected only a small number of cmssw packages used primarily for writing calibrations into the oracle database at cern .",
    "cms applications which read calibrations do not interact directly with oracle , but instead access the calibrations via the frontier web service  @xcite , with no direct dependency on oracle .",
    "* configuration : * there were a number of minor configuration issues , for example :    * the -m32 and -m64 options do not work .",
    "( on x86 - 64 cms had made a complete transition to 64bit a couple of years prior to this work . ) * in a number of places there were x86-based assumptions leading to attempts to configure for x86 - 64 sse and avx    * memory use : * compilation of some translation units ( primarily generated root dictionaries ) exhausted the virtual memory address space . here",
    "the solution was simply to refactor the dictionaries .",
    "* root cintex : * a patch was needed for the cintex trampoline in root to support the arm architecture .",
    "this was submitted to the root developers .",
    "* signedness : * x86 - 64 and arm treat the signedness of char / bit - fields differently , intel is signed and arm is unsigned by default . this was dealt with on arm by imposing the use of the compiler options -fsigned - char and -fsigned - bitfields , along with a few small code modifications to fix non - portable code .",
    "* dictionary generation and i / o : * there were several bugs in the root i / o infrastructure , as well as non cross - platform types ( that crept in after cms transitioned to 64bit on x86 - 64 and stopped regularly producing 32bit builds ) , that at time of these tests prevented us from properly reading and writing root files .      with changes to the build recipes resulting from fixing these issues we were able to build all of the standard cmssw externals and 99% of the cmssw code .",
    "the cmssw code which did not build was the small subset requiring oracle .",
    "this demonstrates the advantages of relying primarily on open source software and , when closed source software can not be avoided , carefully restricting the code which can depend on the closed source libraries .    after making the changes described above",
    ", we achieved the following results for the total build times directly on the odroid - u2 board :    * @xmath24h - compilation of a `` bootstrap '' kit consisting of the gcc compiler ( version 4.8.0 ) and a small set of packages ( rpm , apt , zlib , ncurses , nspr , sqlite , etc . ) that we use for packaging and distributing the results of our builds * @xmath212h - compilation of all of the 125 external packages not included in the `` bootstrap '' kit * @xmath225.5h - compilation of the cmssw code itself as well as a set of generated root dictionaries    these are quite reasonable results .",
    "taking into account that the externals do not change frequently , these results are already very close to consistent with an eventual `` nightly '' integration build where we compile the very latest versions of all of the cmssw code , but reuse pre - existing builds of the externals .      for a run time test and benchmark we used an actual cms application from the build described above rather than a synthetic benchmark .",
    "this application performs a monte carlo simulation of 8 tev lhc minimum bias events using pythia8  @xcite ( event generation ) followed by simulation with geant4  @xcite . due to the problem mentioned above with generation of the dictionaries used for data input / output ,",
    "output was turned off .",
    "the data output however has little effect on the total cpu time ( and thus these benchmarks ) as the cpu cost is heavily dominated by the geant4 simulation .",
    "the application itself is single - threaded ( sequential ) and thus ran on a single core at a time . to simplify testing we ran only a single job at a time on each machine with the aim of measuring the single core performance .",
    "multiple tests were performed of sufficient length to estimate properly an average per event time and dedicated tests were run to subtract off job startup times .",
    "a proper validation of the application output was complicated by the lack of an output file , but checks done by enabling printout indicated consistency between arm and x86 - 64 .",
    "the results for performance ( events simulated per minute per core ) are shown in table  [ tab : results ] .",
    "[ tab : results ]    .results of run time tests [ cols=\"<,^,^,^,^ \" , ]     in order to calculate values for the performance per watt , it would be a bit misleading to compare the total power used by real ( x86 - 64 ) servers with a small development board . to get a better estimate , which more directly compares the processors themselves",
    ", we used the `` thermal design power '' ( tdp ) numbers for the processors themselves . here",
    "tdp numbers for the two intel xeon x86 - 64 processors were taken from their website  @xcite .",
    "for the odroid - u2 we were not able to find specific tdp numbers , but based on our own measurements we have estimated the tdp - equivalent fully loaded power at about 4w . using these values we have calculated an equivalent performance ( in events per minute ) per watt in the last column of table  [ tab : results ] . a clear advantage in terms of performance per watt is seen for the arm processor .",
    "we have done a port of the entire cms software stack , including 3.6 m sloc of cms - written code in cmssw and 125 external support packages , to the armv7-based odroid - u2 development board .",
    "we chose to build directly on the development board itself and measured build times consistent with operating a `` nightly '' build of the cms software .",
    "we report performance and performance per ( tdp ) watt numbers both for the armv7 board and for two typical x86 - 64 servers at cern . on the basis of these results",
    "we conclude that arm - based low power servers , if they succeed in the market , show great potential for use with typical hep high throughput computing applications .",
    "this work was partially supported by the national science foundation , under cooperative agreement phy-1120138 , and by the u.s .",
    "department of energy .",
    "9    evans l and bryant p 2008 lhc machine _ jinst _ * 3 * s08001 bird i 2011 computing for the large hadron collider _ annual review of nuclear and particle science _ * 61 * 99 - 118 chatrchyan s et al ( cms collaboration ) 2008 the cms experiment at the cern lhc _ jinst _ * 3 * s08004 aad g et al ( atlas collaboration ) 2008 the atlas experiment at the cern large hadron collider _ jinst _ * 3 * s08003 chatrchyan s et al ( cms collaboration ) 2012 observation of a new boson at a mass of 125 gev with the cms experiment at the lhc _ phys.lett . _",
    "* b716 * 30 - 61 aad g et al ( atlas collaboration ) 2012 observation of a new particle in the search for the standard model higgs boson with the atlas detector at the lhc",
    "_ phys.lett . _",
    "* b716 * 1 - 29 fuller s h and millet l i ( editors ) 2011 _ the future of computing performance : game over or next level ? _ the national academies press .",
    "puechased via the hardkernel website : http://www.hardkernel.com source code and documentation available at http://www.dwheeler.com/sloccount/ http://root.cern.ch agostinelli s et al 2003 geant4 - a simulation toolkit _ nuclear instruments and methods in physics research _",
    "* a 506 * 250 - 303 http://ark.intel.com/products/40201/ and http://ark.intel.com/products/64586/ http://www.qemu.org blumenfeld b , dykstra d , lueking l and wicklund e 2008 cms conditions data access using frontier _ j. phys .",
    ". ser . _ * 119 * 072007 sjostrand t , mrenna s and skands p 2008 a brief introduction to pythia 8.1 _ comput .",
    "_ * 178 * 852 - 867"
  ],
  "abstract_text": [
    "<S> power efficiency is becoming an ever more important metric for both high performance and high throughput computing . </S>",
    "<S> over the course of next decade it is expected that flops / watt will be a major driver for the evolution of computer architecture . </S>",
    "<S> servers with large numbers of arm processors , already ubiquitous in mobile computing , are a promising alternative to traditional x86 - 64 computing . </S>",
    "<S> we present the results of our initial investigations into the use of arm processors for scientific computing applications . </S>",
    "<S> in particular we report the results from our work with a current generation armv7 development board to explore arm - specific issues regarding the software development environment , operating system , performance benchmarks and issues for porting high energy physics software . </S>"
  ]
}