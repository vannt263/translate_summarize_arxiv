{
  "article_text": [
    "the maximum network flow problem is a well known fundamental problem in algorithms and optimization with plenty of important applications @xcite . it is known to be @xmath7-complete even in its integral version provided that the edge capacities are exponentially large in the size of the network @xcite .",
    "the minimum - cost flow problem is a well known important generalization of the maximum flow problem @xcite .",
    "the objective is to compute a maximum flow of minimum cost in a directed graph where each edge is assigned a cost . for a flow @xmath8 in a directed graph @xmath9",
    "the cost of @xmath8 is simply @xmath10    the prospects for designing a fast and processor efficient parallel algorithm , in particular an nc algorithm @xcite , for maximum integral flow or minimum - cost integral flow are small .",
    "the fastest known parallel implementations of general maximum flow and/or minimum - cost flow algorithms achieve solely a moderate speed up and still run in @xmath11 time , where @xmath12 is a positive constant , see @xcite .",
    "the situation changes when the edge capacities or the supply of flow as well as edge costs are substantially bounded .",
    "for example , if the edge capacities and edge costs are bounded by a polynomials in @xmath2 both problems admit rnc algorithms",
    ". then , the maximum integer flow problem admits even an @xmath6 algorithm @xcite while the minimum - cost integer flow problem admits an @xmath13 algorithm @xcite . at the heart of the aforementioned rnc solutions",
    "is the randomized method of detecting a perfect matching by randomly testing edmonds multi - variable polynomials for non - identity with zero @xcite .",
    "when the flow supply is relatively small , e.g. , logarithmic in the size of the network or a poly - logarithmic one , then just an nc implementation of the basic phase in the standard ford - fulkerson method @xcite yields an nc algorithm ( @xmath14 when the supply is logarithmic ) for maximum integer flow that can be extended to an nc algorithm for minimum - cost integer flow ( when edge costs are polynomially bounded ) .",
    "the number of processors used corresponds to that required by a shortest path computation . in this paper",
    ", we present a new approach to the minimum - cost integral flow problem for a small value @xmath0 of the flow .",
    "we directly associate a simple polynomial over a finite field with the corresponding problem of the existence of @xmath0 mutually vertex disjoint paths of bounded total length , connecting two sets of @xmath0 terminals in a directed graph . by using the idea of monomial cancellation",
    ", the latter problem reduces to testing the polynomial over a finite field of characteristic two for non - identity with zero .",
    "we combine the demillo - lipton - schwartz - zippel lemma @xcite on probabilistic verification of polynomial identities with parallel dynamic programming to perform the test efficiently in parallel .",
    "additionally , we use the isolation lemma to construct the minimum - cost flow @xcite .    in effect",
    ", we infer that a minimum - cost flow of value @xmath0 in a network with @xmath1 vertices , a sink and a source , integral edge capacities and positive integral edge costs polynomially bounded in @xmath1 can be found by a randomized pram , with errors of exponentially small probability in @xmath1 , running in @xmath3 time and using @xmath4 processors .",
    "thus , in particular , for the minimum - cost flow of value @xmath5 we obtain an @xmath6 algorithm",
    ".    * related work .",
    "* for the rnc algorithms for the related problem of minimum - cost perfect matching see @xcite . for the comparison of time and substantial processor complexities of prior rnc algorithms for the minimum - cost flow",
    "see page 7 in @xcite .",
    "the fastest of the reported algorithms is not an @xmath6 one even when the flow supply and thus the edge capacities are logarithmic in the size of the network .",
    "the idea of associating a polynomial over a finite field to the sought structure has been already used by edmonds to detect matching @xcite and then in several papers presenting rnc algorithms for perfect matching construction @xcite .",
    "it appears in several recent papers that also exploit the idea of monomial cancellation @xcite .",
    "* organization .",
    "* in the next section , we comment briefly on the basic notation and the model of parallel computation used in the paper . in section 3",
    ", we derive our fast randomized parallel method for detecting the existence of @xmath0 mutually vertex disjoint paths of bounded total length connecting two sets of @xmath0 terminals in a directed graph . in section 4 , we generalize the method to include edge costs which enables us to replace the total length bound with the total cost one . in section 5 ,",
    "we show a straightforward reduction of the minimum - cost integer flow problem parametrized by the flow value to the corresponding disjoint paths problem which enables us to derive our main result on detecting minimum - cost small flows in parallel .",
    "for a natural number @xmath2 we let @xmath15 $ ] denote the set of natural numbers in the interval @xmath16.$ ] the cardinality of a set @xmath17 will be denoted by @xmath18    we assume the standard definitions of _ flow _ and _ flow value _ in a network ( directed graph ) with integral edge capacities , a distinguished source vertex @xmath19 and a distinguished sink vertex @xmath20 ( e.g. , see @xcite ) .",
    "for the definitions of parallel random access machines ( pram ) , the classes nc and rnc and the corresponding notions of nc and rnc algorithms , the reader is referred to @xcite .",
    "the _ characteristic _ of a ring or a field is the minimum number of @xmath21 in a sum that yields @xmath22 a finite field with @xmath23 elements is often denoted by @xmath24",
    "it is well known that the maximum integral network flow problem with bounded edge capacities corresponds to a disjoint path problem ( cf .",
    "@xcite ) . in section 5",
    ", we provide an efficient parallel reduction of the minimum - cost integral flow problem parametrized by the flow value to a parametrized disjoint path problem .",
    "this section is devoted to a derivation of a fast randomized parallel method for the decision version of the parametrized path problem .",
    "let @xmath25 be a network in a form of a directed graph with @xmath1 vertices , among them a distinguished set @xmath26 of @xmath0 source vertices and a disjoint distinguished set @xmath27 of @xmath0 sink vertices .",
    "a _ walk _ in @xmath28 is a sequence of vertices @xmath29 of @xmath28 such that for @xmath30 @xmath31 @xmath32 is in @xmath33 @xmath34 are in @xmath35 @xmath36 is in @xmath37 the length of the walk is @xmath38 in other words , a walk is just a ( not necessarily simple ) path starting from a vertex in @xmath39 , having intermediate vertices in @xmath35 and ending at a vertex in @xmath37    a _ proper set @xmath40 of walks _ in @xmath28 is a set @xmath41 of @xmath0 walks of total length @xmath42 , each with a distinct start vertex in @xmath39 and a distinct end vertex in @xmath37 a _ signature _ of a proper set @xmath40 of walks is the pair @xmath43 that is smallest in lexicographic order such that the two walks that start at @xmath44 and @xmath45 respectively intersect , and the first intersection vertex of these two walks is the first intersection vertex of the walk starting from @xmath44 with any walk in @xmath46    note that walks in @xmath40 are pairwise vertex disjoint iff the signature of @xmath40 is not defined .",
    "we define the transformation @xmath47 on @xmath40 as follows .",
    "if @xmath40 has the signature @xmath43 then @xmath47 switches the suffix of the walk starting at @xmath44 with that of the walk starting at @xmath45 at the first intersection vertex of these two walks .",
    "1 . otherwise , if the signature of @xmath40 is not defined then @xmath47 is an identity on @xmath46    [ fig : paths ]     of walks and the companion proper set @xmath48 of walks .",
    ", height=188 ]    observe that if the signature of @xmath40 is defined then @xmath48 has the same signature as @xmath40 and @xmath49 the first observation is immediate . to show the second one it is sufficient to note that @xmath50 holds iff @xmath47 transforms the two walks which yield the signature of @xmath40 onto themselves .",
    "the latter is however impossible since they have different start vertices and different end vertices .",
    "note also that the walks in @xmath48 have the same total length as those in @xmath46    it follows that @xmath47 is an involution on sets of proper walks of total length @xmath51 i.e. , @xmath52 holds for any proper set @xmath40 of walks of total length @xmath53 .    for the network @xmath28 and @xmath54,$ ] let @xmath55 be the family of all proper sets of @xmath0 walks of total length @xmath56 in @xmath57 assign a distinct variable @xmath58 to each edge @xmath59 in @xmath57 for a walk @xmath60 let @xmath61 be the monomial , where @xmath58 has multiplicity equal to the number of occurrences of @xmath59 in @xmath62 next , let @xmath63 denote the polynomial @xmath64    [ lem : zero ] for the network @xmath28 and @xmath54,$ ] there is a proper set of @xmath0 mutually vertex - disjoint walks of total length @xmath56 in @xmath28 iff @xmath63 is not identical to zero over a field of characteristic two .",
    "@xmath55 can be partitioned into the family @xmath65 of sets @xmath40 of walks such that @xmath50 and the family @xmath66 of sets @xmath40 of walks such that @xmath49 the polynomial @xmath67 is identical to zero over a field of characteristic two since for each @xmath68 the monomials @xmath69 and @xmath70 contain equal multiplicities of the same variables and @xmath52 so @xmath40 and @xmath48 can be paired . on the other hand , since each set @xmath40 of walks in @xmath65 consist of mutually vertex - disjoint walks , the monomials @xmath69 in the polynomial @xmath71 are in one - to one correspondence with @xmath40 and thus are unique provided that the walks in @xmath40 are simple paths .",
    "now , it is sufficient to observe that mutually vertex - disjoint walks can be always trivially pruned to corresponding mutually vertex - disjoint simple paths .    to warm up",
    ", we prove the following lemma on sequential evaluation of @xmath72    [ lem : eval ] @xmath63 can be evaluated for a given assignment of values over a field @xmath73 of characteristic two in @xmath74 time .",
    "for @xmath75 @xmath76,$ ] we consider the family @xmath77 of all sets @xmath40 consisting of @xmath78 walks connecting @xmath78 distinct sources in @xmath79 with the @xmath78 distinct sinks in @xmath80 so that the total length of the walks is exactly @xmath81 next , we define the polynomial @xmath82 as @xmath83 note that @xmath84 and @xmath85    on the other hand , for @xmath86,$ ] @xmath87 and @xmath88 we consider the set @xmath89 of walks of length @xmath90 in @xmath28 that start at @xmath91 and end at @xmath92 let @xmath93 be the polynomial @xmath94    we have the following recurrence for a nonempty subset @xmath80 of @xmath95 and @xmath96:$ ]    @xmath97}q_{p - q}(b\\setminus \\ { y\\})q_q(x_{|b|},y).\\ ] ]    next , we have also the following recurrence for @xmath98 @xmath88 and @xmath99:$ ]    @xmath100    we have also @xmath101 if @xmath102 and otherwise @xmath103 consequently , we can evaluate all the polynomials @xmath104 by the second recurrence in @xmath105 time .    now , by using the first recurrence and setting @xmath106 to @xmath21 in the field , we can evaluate all the polynomials @xmath82 in the increasing order of the cardinalities of @xmath80 in @xmath107 time .    by @xmath84 and @xmath108",
    "we conclude that @xmath63 can be evaluated in @xmath74 time .",
    "note that @xmath109 let @xmath110 be the sink in @xmath80 with the largest index .",
    "we assume @xmath111 and if @xmath112 then @xmath113 now , we can evaluate @xmath114 and @xmath115 by the following recurrences    @xmath116    @xmath117    in @xmath118 time .",
    "we can partially parallelize the sequential evaluation of @xmath63 in order to obtain the following lemma .",
    "[ lem : pareval ] @xmath63 can be evaluated for a given assignment of values over a field @xmath73 of characteristic two in @xmath119 time by a crew pram using @xmath120 processors .",
    "we generalize the definition of the set @xmath121 and the corresponding polynomial @xmath104 to include arbitrary start vertex @xmath122 , requiring @xmath123 as previously .",
    "then , we can evaluate @xmath124 for @xmath122 and @xmath88 for @xmath99 $ ] by the following standard doubling recurrence for @xmath125    @xmath126    at the bottom of the recursion , we have @xmath101 if @xmath102 otherwise @xmath103 it follows that all @xmath104 for @xmath122 , @xmath88 and @xmath127 $ ] can be evaluated in a bottom - up manner in @xmath128 time by a crew pram using @xmath129 processors .",
    "recall the first recurrence from the proof of lemma [ lem : eval ] .",
    "when the polynomials @xmath130 for @xmath131 and @xmath132 are evaluated , we can evaluate in turn the polynomials @xmath82 , where @xmath75 @xmath96 $ ] in @xmath0 phases in the increasing order of the cardinalities of @xmath80 by this recurrence .",
    "it can be done in @xmath133 time by a crew pram using @xmath134 processors .    by @xmath135 @xmath108 and @xmath136",
    "we conclude that @xmath63 can be evaluated in @xmath119 time by a crew pram using @xmath120 processors .",
    "the following lemma on polynomial identities verification has been shown independently by demillo and lipton , schwartz , and zippel .",
    "[ lem : zip]@xcite let @xmath137 be a nonzero polynomial of degree @xmath138 over a field of size @xmath139 then , for @xmath140 @xmath141 ... , @xmath142 chosen independently and uniformly at random from the field , the probability that @xmath143 is not equal to zero is at least @xmath144    note that the polynomial @xmath63 is of degree @xmath53 not larger than @xmath145 we can use lemma [ lem : zip ] with a field @xmath146 of characteristic two to obtain a randomized test of the polynomial @xmath63 for not being identical to zero with one side errors . for sufficiently large constant @xmath147",
    "the one side errors are of probability not larger than a constant smaller than @xmath148 by performing @xmath149 such independent tests , the probability of one side errors can be decreased to exponentially small in @xmath1 one .    by lemma [ lem : pareval ] , the series of the tests can be performed in @xmath150 time by a pram using @xmath151 processors . by lemma [ lem : zero ] , these tests verify if there is a proper set of mutually vertex - disjoint walks of total length @xmath56 in the network @xmath28 .",
    "the latter in turn is equivalent to the existence of @xmath0 mutually vertex - disjoint paths of total length @xmath56 connecting @xmath39 with @xmath95 in @xmath28 by the definition of a proper set of walks in @xmath57 hence , observing that each walk can be trivially pruned to a simple directed path with the same endpoints , we obtain our main result .",
    "[ theo : pdec ] the problem of whether or not there is a set of @xmath0 mutually vertex - disjoint simple directed paths of total length @xmath56 connecting @xmath39 with @xmath95 in the network @xmath28 can be decided by a randomized crew pram , with one - sided errors of exponentially small probability in @xmath2 running in @xmath150 time and using @xmath151 processors .",
    "in this section , we shall consider a more general situation where there are a positive integer @xmath152 and a cost function @xmath153 assigning to each of the @xmath154 edges @xmath59 in the network @xmath28 a cost @xmath155.$ ] the cost of a walk or a path is simply the sum of the costs of the edges forming it ( the cost of an edge is counted the number of times it appears on the walk or path ) .",
    "we would like to detect a proper set of @xmath0 walks in @xmath28 that achieves the minimum cost .",
    "for this reason , we consider the following generalization of the polynomial @xmath156 for @xmath157,$ ] let @xmath158 be the set of all proper sets of walks in the edge - costed network @xmath28 that have total cost not greater than @xmath159 next , for a walk @xmath41 in @xmath160 as previously , let @xmath61 be the monomial which is the product of @xmath58 over the occurrences of edges @xmath59 on @xmath62 the polynomial @xmath161 is defined by @xmath162    by using the proof method of lemma [ lem : zero ] , we obtain the following counterpart of this lemma for @xmath161 .    [ lem : czero ] for the edge - costed network @xmath28 , there is a proper set of @xmath0 mutually vertex - disjoint walks of total cost @xmath163 in @xmath28 iff @xmath161 is not identical to zero over a field of characteristic two .",
    "next , we obtain the following counterpart of lemma [ lem : pareval ] for @xmath161 .",
    "[ lem : cpareval ] @xmath161 can be evaluated for a given assignment @xmath8 of values over a field @xmath73 of characteristic two in @xmath164 time by a pram using @xmath165 processors .",
    "the proof reduces to that of lemma [ lem : pareval ] .",
    "we replace each directed edge @xmath59 of cost @xmath155 $ ] in the network @xmath28 by a directed path of length @xmath166 introducing @xmath167 additional vertices . with each edge on such a path , we associate a variable .",
    "we assign @xmath168 to the variable associated with the first edge on the path replacing @xmath169 and just @xmath21 of the field to the variables associated with the remaining edges on the path .",
    "the resulting network @xmath170 is of size @xmath171 let @xmath172 be the family of all proper sets of @xmath0 walks of total cost @xmath163 in the network @xmath170 .",
    "we can evaluate the polynomial @xmath173 in parallel analogously as @xmath63 in the proof of lemma [ lem : pareval ] .",
    "it remains to observe that the value of @xmath161 under the assignment @xmath8 is equal to that of @xmath174 under the aforementioned assignment .",
    "now , we are ready to derive our main result in this section .",
    "the minimum cost of a set of @xmath0 mutually vertex - disjoint simple directed paths connecting @xmath39 with @xmath95 in the network @xmath28 with edge costs in @xmath175 $ ] can be computed by a randomized crew pram , with errors of exponentially small probability in @xmath2 running in @xmath164 time and using @xmath176 processors .",
    "the minimum cost of the sought set of vertex - disjoint paths is in @xmath177.$ ] hence , by lemma [ lem : czero ] , it is sufficient to test the polynomials @xmath161 for non - identity with zero for all @xmath178 $ ] in parallel . by applying lemmata [ lem : zip ] and [ lem : cpareval ] in a manner analogous to the proof of theorem [ theo : pdec ] , we conclude that it can be done by a randomized crew pram , with one - sided errors of exponentially small in @xmath1 probability , running in @xmath164 time and using + @xmath179 processors .",
    "a straightforward approach of extending our randomized parallel method for deciding if there is a proper set of @xmath0 mutually vertex - disjoint walks ( of a bounded total cost ) between two sets of vertices of cardinality @xmath0 to include the finding variant could be roughly as follows . in parallel , for each @xmath0-tuple of respective neighbors of the @xmath0 start vertices in @xmath33 replace the set of start vertices by the @xmath0-tuple and apply our method recursively to the resulting network",
    ". if the test is positive , the first edges on the walks are known , and we can iterate the method .",
    "the problem with this approach is that its recursive depth is proportional to the maximum length of a walk in the resulting set of mutually vertex - disjoint walks between @xmath39 and @xmath37    also , it is not clear how one could implement a straightforward divide - and - conquer approach of guessing intermediate vertices in order to find a set of @xmath0 mutually - vertex disjoint walks of a given cost efficiently in parallel .",
    "we need more advanced methods to obtain a very fast parallelization of the finding variant .",
    "we shall modify the edge cost in the network @xmath28 in order to use the so called _ isolation lemma _ in a manner analogous to the rnc method of finding a perfect matching given in @xcite .",
    "( the isolation lemma @xcite ) .",
    "let @xmath180 be a family of subsets of a set with @xmath23 elements and let @xmath181 be a non - negative integer .",
    "suppose that each element @xmath19 of the set is independently assigned a weight @xmath182 uniformly at random from @xmath183 $ ] , and the weight of a subset @xmath40 in @xmath180 is defined as @xmath184 then , the probability that there is a unique set in @xmath180 of minimum weight is at least @xmath185    [ cor : ciso ] for each of the @xmath154 edges @xmath59 in the network @xmath160 modify its cost @xmath166 to @xmath186 where the weight @xmath187 is drawn uniformly at random from @xmath183 $ ] .",
    "then , the probability that there is a unique minimum - cost set of mutually vertex - disjoint paths connecting @xmath39 with @xmath95 in the edge weighted network @xmath28 is at least @xmath188    to use the isolation lemma , let the underlying set to consist of all edges in the network @xmath57 next , note that a set of mutually vertex - disjoint paths connecting @xmath39 with @xmath95 achieving a minimum cost consists of simple paths and thus it can be identified with the set of edges on the paths .",
    "let @xmath7 be the family of all sets of mutually vertex - disjoint simple paths connecting @xmath39 with @xmath95 in the network @xmath57 by the setting of new costs @xmath189 solely those sets in @xmath7 that achieved the minimum cost , say @xmath190 under the original costs @xmath166 can achieve a minimum cost under the new costs @xmath191",
    "so , we can set @xmath180 to the aforementioned sub - family of @xmath7 , and define the weight of a set of @xmath0 paths in @xmath180 as the sum of the weights @xmath187 of the edges @xmath59 on the paths in this set in order to use the isolation lemma . by the isolation lemma",
    ", there is a unique set @xmath40 in @xmath180 that achieves the minimum weight @xmath192 with the probability at least @xmath188 the corollary follows since each set @xmath40 in @xmath180 has the cost @xmath193 equal to @xmath194    throughout the rest of this section , we shall assume that each of the @xmath154 edges @xmath59 in the network @xmath28 is assigned the cost @xmath195 as in corollary [ cor : ciso ] and that @xmath196.$ ]    suppose that we know the minimum cost of a set of @xmath0 mutually vertex - disjoint paths connecting @xmath39 with @xmath95 in the network @xmath28 with the edge costs indicated , and such a minimum - cost set is unique .",
    "then , it is sufficient to show that we can test quickly in parallel if the network @xmath28 with an arbitrary edge removed still contains a set of @xmath0 mutually vertex - disjoint paths connecting @xmath39 with @xmath95 that achieves the minimum cost . by performing the test for each edge of @xmath28 in parallel , we can determine the set of edges forming the unique minimum - cost set of @xmath0 mutually vertex - disjoint paths connecting @xmath39 with @xmath95 .    to carry out these tests ,",
    "we need to generalize the polynomial @xmath161 to a polynomial @xmath197 , where @xmath59 is an edge in @xmath28 and @xmath198 is a cost constraint from @xmath199=[cn^{o(1)}]$ ] .",
    "let @xmath200 be the family of all proper sets of @xmath0 walks in the network @xmath28 with the edge @xmath59 removed that have total at most @xmath159 ( in the total cost of a set of walks , we count the cost of an edge the number of times equal to the sum of the multiplicities of the edge in the walks . )    as in the definition of @xmath63 assign a distinct variable @xmath58 to each edge @xmath59 in @xmath160 and for a walk @xmath201 let @xmath61 be the monomial , where @xmath58 has multiplicity equal to the number of occurrences of @xmath59 in @xmath62 the polynomial @xmath197 is defined by @xmath202    by using the proof method of lemma [ lem : zero ] , we obtain the following counterpart of this lemma for @xmath197 .    [ lem : gzero ] for the edge - costed network @xmath28 with @xmath154 edges , edge @xmath169 and @xmath203,$ ] there is a proper set of @xmath0 mutually vertex - disjoint walks of total cost @xmath163 in the network @xmath28 with the edge @xmath59 removed iff @xmath197 is not identical to zero over a field of characteristic two .",
    "next , we obtain the counterpart of lemma [ lem : pareval ] for @xmath197 following the proof of lemma [ lem : cpareval ] .",
    "[ lem : gcpareval ] @xmath197 can be evaluated for a given assignment of values over a field @xmath73 of characteristic two in @xmath164 time by a pram using @xmath204 processors .",
    "now , we are ready to derive our main result in this section .",
    "[ theo : cpfind ] there is a randomized pram returning almost certainly ( i.e. , with probability at least @xmath205 , where @xmath206 ) a minimum - cost set of @xmath0 mutually vertex - disjoint paths connecting @xmath39 with @xmath95 in the network @xmath28 with the original edge costs in @xmath175 $ ] ( iff such a set exists ) in @xmath164 time using @xmath204 processors .",
    "we set @xmath181 to , say , @xmath207 and specify the new edge costs @xmath195 in the network @xmath28 drawing the weights @xmath187 uniformly at random from @xmath183 $ ] as in corollary [ cor : ciso ] .",
    "next , for each @xmath208=[cn^{o(1)}],$ ] we proceed in parallel as follows . for each edge @xmath59 of the network @xmath28",
    ", we test the polynomial @xmath197 for the non - identity with zero by using lemma [ lem : zip ] and lemma [ lem : gcpareval ] ( we can perform a linear in @xmath1 number of such tests in parallel in order to decrease the probability of the one - sided error to an exponentially small one ) .",
    "next , we verify if the edges that passed the test positively yield a set of @xmath0 mutually vertex - disjoint paths connecting @xmath39 with @xmath95 .",
    "for example , it can be done by checking for each endpoint of the edges outside @xmath209 if it is shared by exactly two of the edges , and then computing and examining the transitive closure of the graph induced by the edges ( see @xcite ) .",
    "if so , we save the resulting set of paths of total ( new ) cost @xmath210 by corollary [ cor : ciso ] , there is a @xmath211 $ ] for which the above procedure will find such a set of paths that achieves the minimum ( original ) cost with probability at least @xmath212",
    "the following lemma is a straightforward generalization of a folklore reduction of maximum integral flow to a corresponding disjoint connecting path problem ( for instance cf .",
    "@xcite ) to include minimum - cost integral flow . we shall call a flow proper , if it ships each flow unit along a simple path from the source to the sink .",
    "[ lem : red ] the problem of whether or not there is a proper integral flow of value @xmath0 and cost @xmath213 from a distinguished source vertex @xmath19 to a distinguished sink vertex @xmath20 in a directed network with @xmath1 vertices .",
    "integral edge capacities and edge costs in @xmath175 $ ] can be ( many - one ) reduced to that of whether or not there is set of @xmath0 mutually vertex - disjoint simple directed paths of total cost @xmath214 , where @xmath215 connecting two distinguished sets of @xmath0 vertices in a directed network on @xmath216 vertices in @xmath217 time by a crew pram using @xmath218 processors .",
    "let @xmath219 be the directed network with integral edge capacities , edges costs in @xmath175 $ ] and the distinguished source vertex @xmath19 and sink vertex @xmath220 since we are interested in a flow of value @xmath0 , we can assume w.l.o.g that all edge capacities do not exceed @xmath221    we form a directed network @xmath222 on the basis of the network @xmath223 as follows .",
    "let @xmath224 next , let @xmath225 be the set of edges in @xmath223 incoming into @xmath226 , and let @xmath227 be the set of edges in @xmath223 leaving @xmath228 for each @xmath229 and @xmath230,$ ] we create the vertex @xmath231 analogously , for each @xmath232 and @xmath233,$ ] we create the vertex @xmath234 furthermore , we direct an edge from each vertex @xmath235 to each vertex @xmath236 . to each such an edge , we assign the cost @xmath148 also , for each edge @xmath237 of @xmath238 we direct an edge from @xmath239 to @xmath240 for @xmath230.$ ] to each such an edge , we assign the cost @xmath241 see fig .",
    "[ fig : paths1 ]     and the corresponding part of the network @xmath242,height=188 ]    let @xmath243 be the set of vertices of the form @xmath244 , and let @xmath245 denote the set of vertices of the form @xmath246 create an additional set @xmath39 of @xmath0 vertices and from each vertex in @xmath39 direct an edge to each vertex in @xmath243 .",
    "symmetrically , create another additional set @xmath95 of @xmath0 vertices and from each vertex in @xmath245 direct an edge to each vertex in @xmath37    it is easy to observe that there is a proper integral flow of value @xmath0 and cost @xmath213 from @xmath19 to @xmath20 in the network @xmath223 iff there is a set of @xmath0 mutually vertex - disjoint simple paths of total cost @xmath214 connecting @xmath39 with @xmath95 in the network @xmath247 such that @xmath248    now it is sufficient to note that the construction of @xmath222 , @xmath39 and @xmath95 on the basis of @xmath223 easily implemented by a crew pram in @xmath217-time using @xmath218 processors , where @xmath1 is the number of vertices in @xmath249    by combining theorem [ theo : pdec ] with lemma [ lem : red ] , we obtain our first main result .",
    "the minimum cost of a flow of value @xmath0 in a network with @xmath1 vertices , a sink and a source , integral edge capacities and positive integral edge costs in @xmath175 $ ] can be found by a randomized pram , with errors of exponentially small probability in @xmath2 running in @xmath250 time and using @xmath204 processors .    by combining in turn theorem [ theo : cpfind ] with the finding variant of lemma [ lem : red ] using exactly the same reduction",
    ", we obtain our second main result .",
    "[ theo : ffind ] there is a randomized pram algorithm returning almost certainly a minimum - cost flow of value @xmath0 ( iff a flow of value @xmath0 exists ) in a network with @xmath1 vertices , a sink and a source , integral edge capacities and edge costs in @xmath251,$ ] in @xmath3 time using @xmath4 processors .",
    "the problem of finding a minimum - cost flow of value @xmath252 in a network with @xmath1 vertices , a sink and a source , and integral edge capacities bounded polynomially in @xmath1 admits an @xmath6 algorithm .",
    "we have resented a new approach to the minimum - cost integral flow problem . in particular , it yields an @xmath6 algorithm when the flow supply is ( at most ) logarithmic in the size of the network .",
    "i. koutis .",
    "faster algebraic algorithms for path and packing problems .",
    "35th annual international colloquium on automata , languages and programming ( icalp ) , lecture notes in computer science 5555 , pp .",
    "653 - 664 , 2009 .",
    "orlin and c. stein .",
    "parallel algorithms for the assignment and minimum - cost flow problems .",
    "operations research letters , * 14 * , pp .",
    "181 - 186 , 1993 .",
    "reif ( editor ) .",
    "synthesis of parallel algorithms .",
    "morgan - kauffman , 1993 ."
  ],
  "abstract_text": [
    "<S> we present a new approach to the minimum - cost integral flow problem for small values of the flow . </S>",
    "<S> it reduces the problem to the tests of simple multi - variable polynomials over a finite field of characteristic two for non - identity with zero . in effect </S>",
    "<S> , we show that a minimum - cost flow of value @xmath0 in a network with @xmath1 vertices , a sink and a source , integral edge capacities and positive integral edge costs polynomially bounded in @xmath1 can be found by a randomized pram , with errors of exponentially small probability in @xmath2 running in @xmath3 time and using @xmath4 processors . </S>",
    "<S> thus , in particular , for the minimum - cost flow of value @xmath5 we obtain an @xmath6 algorithm . </S>"
  ]
}