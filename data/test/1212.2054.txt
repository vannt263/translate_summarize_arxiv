{
  "article_text": [
    "massive use of mobile storage media raises data security problem seriously .",
    "data security of mobile storage media can be realized in different ways , e.g. , file unit encryption , file system level encryption , and full disk encryption [ 1 , 3 , 4 , 5 , 6 ] . reliability of security system should not be based on system mechanism or complexity of system analysis , and it should guarantee safety even if system mechanism or encryption algorithm is opened to third party .",
    "we analyze security problems of existing disk encryption methods in the next section and describe our disk encryption method based on sdms in the following section . in the last section ,",
    "we analyze security performance of our system .",
    "several different methods for disk encryption , such as loopaes , efs , truecrypt , ncryptfs , were suggested [ 4 , 5 , 9 , 10 , 11 ] . in these methods ,",
    "encryption of disk block is expressed as follows .",
    "@xmath0    here , be is block encryption function ( aes , 3des , etc ) , op is operation function ( cbc , lrw , xts , etc ) , dek is disk encryption key , c is ciphertext , p is plaintext and i is block index . as above expression shows ,",
    "these disk encryption systems encrypt plaintext using symmetric - key algorithm through certain operation and apply this operation again to encrypted result . [ 7 ] and [ 8 ] explain bitlocker disk encryption method and its security strength , which is offered in windows vista . here ,",
    "plaintext is xored with sector key , passed two diffusers in succession , and finally encrypted using aes of cbc mode .",
    "these disk encryption methods have some weakness in terms of time passage and space expansion",
    ". we call it temporal limitation and spatial limitation , respectively , in this paper",
    ".    * @xmath1 + if third party succeed to detect encryption key of a certain sector , data which is stored later in this sector can be decoded .",
    "* @xmath2 + if third party succeed to detect encryption key of a certain block , whole data of disk is in danger of being decoded .",
    "gbde based encryption method which was implemented in freebsd overcame these temporal and spatial limitations to a certain extent [ 6 ] . in this method",
    ", data is stored in sector by being encrypted with different key each time data is writen , because it generates random data newly and encrypt plaintext using it .",
    "therefore , it is impossible to decrypt data stored newly even though third party succeeds to detect key by attacking a sector . and each key encrypting plaintext sectors are different each other when it writes data on disk , because gbde encrypts plaintext using randomly generated key .",
    "thus , it is impossible to decrypt data of other block even if third party detects encryption key by attacking a data sector .",
    "although gbde based disk encryption method overcomes temporal and spatial limitations of previous disk encryption methods considerably , it still has some security problems to be solved .    at first",
    ", key - key for a given sector is fixed because it is decided depending on the sector address .",
    "that is , when it was writen new data on sector , sector key is encrypted by same key - key .",
    "then , if attacker detect 128bit sector key by attacking aes / cbc/128 encrypted plaintext data and detect key - key subsequently by attacking aes / cbc/256 encrypted sector key , it is possible to decrypt newly stored data on this sector .",
    "we think this is temporal limitation of gbde based disk encryption .",
    "next , it is easy to get keychain used to encrypt plaintext data , if the correlation between random data generated consecutively by prng is revealed , because it directly uses random data generated by prng as key for plaintext .",
    "however , strictly speaking , prng generates data deterministically based on the initial value .",
    "if attacker succeeds to get sector key by attacking key sector and subsequently succeeds to know inner state of prng , he can detect following sector keys easily .",
    "this allows possibility of decrypting consecutive ciphers by attacking one sector .",
    "of course , it is possible to make difficult to predict future data from past data using cryptographically secure prng , but it causes another security problem that safety of system depends on the safety of prng too much .",
    "we think this is spatial limitation of gbde based disk encryption . in the next section",
    ", we present a new disk encryption method based on the sdms .",
    "in section 2 , we discussed temporal and spatial limitations of previous works for disk encryption and concluded that gbde still has security problem to be solved , while it is a good disk encryption method . in this section , we propose sdms ( secure disk mixed system ) aimed to solve temporal and spatial limitation of existing disk encryption methods and to control security performance flexibly according to the security requirement of system .",
    "sdms is a method to encrypt each sector by generating sector key using randomly generated seed and disk encryption key dek . in our method",
    ", encryption key of each sector is different each other and it is changed whenever encryption is done .",
    "sdms manages data area of media by dividing into sdms blocks .",
    "each block consists of sdms_block_da area storing encrypted data and sdms_block_sa area storing random numbers which are used to generate encryptioin key for the encryption of sdms_block_da area .",
    "sdms_block_sa area consists of sdms_unit_seeds which are seed data for each sector .",
    "1 shows data structure of sdms .",
    "size of each area is determined depeding on the size of random data sdms_unit_seed needed to generate sector key .",
    "@xmath3    if we store sdms_block_sa in one sector , the number of sector of sdms _",
    "block_da is equal to 512 / size(sdms_unit_seed ) .",
    "for example , if we set size(sdms_unit_seed ) = 8 byte ( 128 bit ) , then the number of sectors of sdms_block_da is equal to @xmath4 .",
    "that is , 64 plaintext sectors constitute a sdms block ( sdms_block ) and one seed sector ( sdms_block_sa ) is in this block .",
    "there is no constraint that sdms_block_sa must be one sector in sdms block .",
    "system designer can adjust this setting freely according to the security requirement and this setting will change processing of blocks of sdms .",
    "encryption mode of sdms is expressed as follows .",
    "@xmath5    here , ea is encryption function , rtek is encryption key , c is cipher , and p is plaintext .",
    "rtek is determined on the fly in time of real - time encryption ( or decryption ) as follows .",
    "@xmath6    here , dek is disk encryption key , seed is random data in sdms_unit_seed area , i is sector index and dk_func is key derivation function .",
    "dk_func is a function to derive real - time encryption key from disk encryption key , seed and sector index .",
    "it is a one - way function where the length of output is constantly the same as the length of rtek .",
    "encryption and decryption algorithms of sdms are as follows .",
    "* @xmath7 * * writing request for i - th sector * * random generation of seed * * calculation of rtek * * encryption of plaintext with rtek * * writing cipher on sdms_block_da * * writing seed on sdms_block_sa * @xmath8 * * reading request for i - th sector * * getting seed from sdms_block_sa * * reading cipher from sdms_block_sa * * calculation of rtek * * decryption of cipher with rtek          dek is generated when disk is initialized and is used to encrypt whole data of disk . if dek is revealed , attacker can decrypt whole data of disk .",
    "dek can be stored in the same disk with plaintext or in physically separated memory device such as usb memory or file server of high security level .",
    "no matter it is stored in data disk or physically isolated memory device , dek must be encrypted based on the user authentication information .",
    "user can be authenticated through pkcs#5 based password authentication or pkcs#11 based smart card authentication or ssl based network authentication , but what is important is to receive key safely for the decryption of dek [ 12 , 13 ] . in this paper , we only consider disk data encryption which uses dek , on the premise that dek is managed safely , though dek is very important for the reliabile management of data .",
    "dk_func is a function to get sector encryption key rtek in real time for the encryption of sector .",
    "@xmath6    as we can see here , it outputs sector key for sector encryption from dek , seed corresponding to the sector , and the sector index .",
    "input data space must be larger enough than output data space in the design of dk_func .",
    "for instance , if dek is 2048 bit , sector index is 32bit and seed size is 128bit , then input data space is @xmath9 .",
    "therefore , in case of using aes / xts for sector encryption , 512 bit key is needed , and hence output space is @xmath10 which is smaller enough than input space .",
    "dk_func must be implemented so as to satisfy one - wayness and collision resistance as possible .",
    "so it is desirable to construct dk_func using cryptographically safe hash function or hash chain .",
    "firstly , sdms solved temporal limitation problem of data encryption .",
    "sdms generates encryption key by generating random seed newly each time when writing request occurs .",
    "this makes it impossible to decrypt sector data written later , although attacker succeeds to break rtek of the sector .",
    "secondly , sdms solved spatial limitation problem of data encryption to a certain extent . in sdms , even though attacker succeeds to attack ea encrypted certain sector , the only thing he knows is rtek of that sector .",
    "he ca nt read the contents of other sectors unless he knows dek through the attack on ea or dk_func . in this way , sdms overcomes remarkably security weakness that whole data of disk can be revealed by succeeding to attack a particular sector .",
    "thirdly , sdms can control security performance flexibly according to the sequrity requirements .",
    "sdms generates encryption key using disk encryption key dek and random seed .",
    "dek can be set big enough according to the security requirement .",
    "for instance , if we set dek as bigger than 1024 bit , then search space will be increased more than @xmath11 when attacker attacks dkfunc to know dek .",
    "the size of seed ( size(sdms_unit_seed ) ) which is used to generate sector key for sector encryption can also be set big enough according to the security requirement of system and there is no restriction that sdms_unit_seed must be arranged to each sector .",
    "configuring system to generate sector key by arranging one sdms_unit_seed to several sectors , we can coordinate balance between security performance and operation cost reasonably .",
    "attacker must attack encrypted sector data unless he knows user authentication information or decrypted dek by evil code .",
    "if sector keys that encrypted sector data have no statistical characteristics and there is no information or algorithm helpful to estimate sector key , brute force search will be appropriate method . in case using aes / xts/256 for sector encryption",
    ", the amount of computation will be equal to @xmath12 . here",
    ", aes / xts encryption is expressed as follows [ 16 ] .      here",
    ", @xmath14 is multiplication operator in modulo @xmath15 , k1 is key of symmetric key encryption algorithm ( e ) , k2 is secondary key , i is block index in encryption unit ( sector ) , n is address of encryption unit ( sector ) and  is base of gf ( galois field ) .    attacker also can decrypt whole data of disk if he knows dek .",
    "therefore , attacker may try to attack dek and then to decrypt sector data using it . to attack dek , he must attack dk_func which derives sector key",
    ". he can find necessary items in @xmath16 space because he knows seed and sector index which are the inputs of dk_func .",
    "for instance , if size(dek)=2048 , attacker must search @xmath17 space . in case",
    "aes / xts/256 is selected as ea , 256bit key for xts operation and 256bit key for final aes block encryption are needed , and thus totally needed key is 512bit .",
    "therefore , attacker can find candidates outputting same rtek if he calculate dk_func for about @xmath10 dek candidates with computation @xmath18 .",
    "there exists about @xmath19 candidates in this case .",
    "that is because we use sector index and seed when we calculate rtek for other sector . to get correct dek from @xmath19 dek candidates in @xmath17 space",
    "is very difficult , though it would be possible to get sector key by attacking particular sector .      security problem in case using the result of prng as key directly for sector encryption was considered in section 2 .",
    "sdms uses the output of prng as input of dk_func for getting sector key and stores output of prng on disk without changing . to attack disk data",
    "encrypted using sdms needs not attack prng .",
    "random data generated by prng    * solves temporal limitation of disk encryption by changing sector key each time it writes data , * solves spatial limitation of disk encryption by setting sector key of each sector differently , * makes it more difficult to attack dk_func .",
    "r. k. watkins , j. c. isaacs , and s. y. foo : evolvable random number generators : a schemata - based approach . in 2001 genetic and evolutionary computation conference late breaking papers , pages 469473 , 2001 ."
  ],
  "abstract_text": [
    "<S> we propose a disk encryption method , called secure disk mixed system ( sdms ) in this paper , for data protection of disk storages such as usb flash memory , usb hard disk and cd / dvd . </S>",
    "<S> it is aimed to solve temporal and spatial limitation problems of existing disk encryption methods and to control security performance flexibly according to the security requirement of system . </S>",
    "<S> sdms stores data by encrypting with different encryption key per sector and updates sector encryption keys each time data is written . </S>",
    "<S> security performance of sdms is analyzed at the end of the paper . </S>"
  ]
}