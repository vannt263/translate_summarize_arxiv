{
  "article_text": [
    "partial orders are a principle tool for modelling `` true concurrency '' semantics of concurrent systems ( cf .",
    "@xcite ) . they are utilized to develop powerful partial - order based automatic verification techniques , e.g. , _ partial order reduction _ for model checking concurrent software ( see , e.g. , ( * ? ? ?",
    "* chapter 10 ) and @xcite ) .",
    "partial orders are also equipped with _",
    "traces _ , their powerful formal language counterpart , proposed by mazurkiewicz @xcite . in _ the book of traces _",
    "@xcite , trace theory has been used to tackle problems from diverse areas including formal language theory , combinatorics , graph theory , algebra , logic , and _",
    "concurrency theory_.    however , while partial orders and traces can sufficiently model the  earlier than \" relationship , janicki and koutny argued that it is problematic to use a single partial order to specify both the  earlier than \" and the  not later than \" relationships @xcite .",
    "this motivates them to develop the theory of _ relational structures _",
    ", where a pair of relations is used to capture concurrent behaviors .",
    "the most well - known among the classes of relational structures proposed by janicki and koutny is the class of _ stratified order structures _",
    "( _ so - structures _ ) @xcite .",
    "a so - structure is a triple @xmath0 , where @xmath1 and @xmath2 are binary relations on @xmath3 .",
    "they were invented to model both the  earlier than \" ( the relation @xmath1 ) and  not later than \" ( the relation @xmath2 ) relationships , under the assumption that system runs are described by _ stratified partial orders _ , i.e. , step sequences .",
    "they have been successfully applied to model inhibitor and priority systems , asynchronous races , synthesis problems , etc .",
    "( see for example @xcite and others ) .",
    "_ com__bined _ trace _ ( _ comtrace _ ) notion , introduced by janicki and koutny @xcite , generalizes the trace notion by utilizing step sequences instead of words .",
    "first the set of all possible steps that generates step sequences are identified by a relation @xmath4 , which is called _",
    "simultaneity_. second a congruence relation is determined by a relation @xmath5 , which is called _ serializability _ and in general _ not _ symmetric . then a comtrace is defined as a finite set of congruent step sequences .",
    "comtraces were introduced as a formal language representation of so - structures to provide an operational semantics for petri nets with inhibitor arcs .",
    "unfortunately , comtraces have been less often known and applied than so - structures , even though in many cases they appear to be more natural .",
    "we believe one reason is that the comtrace notion was too succinctly discussed in @xcite without a full treatment dedicated to comtrace theory .",
    "motivated by this , janicki and the author have devoted our recent effort on the study of comtraces @xcite , yet there are too many different aspects to explore and the truth is we can barely scratch the surface . in particular , the huge amount of results from trace theory ( e.g. , from @xcite ) desperately needs to be generalized to comtraces .",
    "these tasks are often non - trivial since we are required to develop intuition and novel techniques to deal with the complex interactions of the `` earlier than '' and `` not later than '' relations .",
    "this paper gives a novel characterization of comtraces using labeled so - structures .",
    "such definition is interesting for the following reasons .",
    "first , it defines exactly the class of labeled so - structures that can be represented by comtraces .",
    "it is worth noting that this point is particularly important .",
    "even though it was shown in @xcite that every comtrace can be represented by a labeled so - structure , the converse could not be shown because a class of labeled so - structures that defines precisely the class of comtraces was not known .",
    "the closest to our characterization is the _ combined dependency graph _",
    "( _ cd - graph _ )",
    "notion ( analogous to _ dependence graph _ representation of traces ) introduced recently by kleijn and koutny @xcite , but again a theorem showing that combined dependency graphs can be represented by comtraces was not given .",
    "our approach is quite different and based on some new ideas discussed in section 4 of this paper .",
    "second , even though the step sequence definition of comtraces is more suitable when dealing with formal language aspects of comtraces , the labeled so - structure representation is more suitable for a variety of powerful order - theoretic results and techniques available to us ( cf .",
    "@xcite ) .",
    "finally , the labeled so - structure definition of comtrace can be easily extended to _",
    "infinite comtraces _ , which describe nonterminating concurrent processes .",
    "the labeled poset representation of infinite traces is already successfully applied in both theory and practice , e.g. , @xcite .",
    "although such definition is equivalent to the one using quotient monoid over infinite words @xcite , we believe that infinite labeled posets are sometimes simpler . indeed the celebrated work by thiagarajan and walukiewicz ( cf .",
    "@xcite ) on linear temporal logic for traces utilizes the labeled poset characterization of infinite traces , where _ configurations _ of a trace are conveniently defined as _ finite downward closed subsets _ of the labeled poset representation .",
    "we will not analyze infinite comtraces or logics for comtraces in this paper , but these are fruitful directions to explore using the results from this paper .",
    "the paper is organized as follows . in section 2 ,",
    "we recall some preliminary definitions and notations . in section 3",
    ", we give a concise exposition of the theory of so - structures and comtraces by janicki and koutny @xcite . in section 4",
    ", we give our definition of comtraces using labeled so - structure and some remarks on how we arrived at such definition . in section 5 , we prove a representation theorem showing that our comtrace definition and the one by janicki and koutny are indeed equivalent ; then using this theorem , we prove another representation theorem showing that our definition is also equivalent to the cd - graph definition from @xcite . in section 6",
    ", we define _ composition _",
    "operators for our comtrace representation and for cd - graphs . finally , in section 7 , some final remarks and future works are presented .",
    "the _ powerset _ of a set @xmath3 will be denoted by @xmath6 , i.e. @xmath7 . the set of all _ non - empty _ subsets of @xmath3 will be denoted by @xmath8 . in other words ,",
    "we let @xmath10 denote the _ identity relation _ on a set @xmath3 .",
    "if @xmath11 and @xmath12 are binary relations on a set @xmath3 ( i.e. , @xmath13 ) , then their _ composition _",
    "@xmath14 is defined as @xmath15 .",
    "we also define @xmath16 the relations @xmath17 and @xmath18 are called the _ ( irreflexive ) transitive closure _ and _ reflexive transitive closure _ of @xmath11 respectively .",
    "a binary relation @xmath19 is an _ equivalence relation _",
    "relation on @xmath3 if and only if ( iff ) @xmath11 is _ reflexive _ , _ symmetric _ and _ transitive_. if @xmath11 is an equivalence relation , then for every @xmath20 , the set @xmath21_r { \\triangleq}{\\{y\\;|\\;y\\;r\\;x \\wedge y\\in x\\}}$ ] is the equivalence class of @xmath22 with respect to @xmath11 .",
    "we also define @xmath23_r\\mid x\\in x\\}}$ ] , i.e. , the set of all equivalence classes of @xmath3 under @xmath11 .",
    "we drop the subscript and write @xmath21 $ ] when @xmath11 is clear from the context .",
    "a binary relation @xmath24 is a _",
    "partial order _",
    "iff @xmath11 is _ irreflexive _ and _ transitive_. the pair @xmath25 in this case is called a _ partially ordered set _ ( _ poset _ ) .",
    "the pair @xmath25 is called a _ finite poset _ if @xmath3 is finite . for convenience ,",
    "we define : @xmath26    a poset @xmath25 is _ total _",
    "iff @xmath27 is empty ; and _ stratified _ iff @xmath28 is an equivalence relation . evidently every total order is stratified .      for every finite set @xmath3 ,",
    "a set @xmath29 can be seen as an alphabet .",
    "the elements of @xmath30 are called _ steps _ and the elements of @xmath31 are called _ step sequences_. for example , if the set of possible steps is @xmath32 , then @xmath33 is a step sequence .",
    "the triple @xmath34 , where @xmath35 denotes the step sequence concatenation operator ( usually omitted ) and @xmath36 denotes the empty step sequence , is a monoid .",
    "let @xmath37 be a step sequence .",
    "we define @xmath38 , the number of occurrences of an event @xmath39 in @xmath40 , as @xmath41 , where @xmath42 denotes the cardinality of the set @xmath3",
    ". then we can construct its unique _ enumerated step sequence _ @xmath43 as + @xmath44 + we will call such @xmath45 an _ event occurrence _ of @xmath46 . for instance , if we let @xmath47 , then @xmath48    we let @xmath49 denote the set of all event occurrences in all steps of @xmath50 .",
    "for example , when @xmath47 , @xmath51 we also define @xmath52 to be the function that returns the _ label _ of @xmath53 for each @xmath54 .",
    "for example , if @xmath55 , then @xmath56 .",
    "hence , from an enumerated step sequence @xmath57 , we can uniquely reconstruct its step sequence @xmath58    for each @xmath59 , we let @xmath60 denote the consecutive number of a step where @xmath53 belongs , i.e. , if @xmath61 then @xmath62 . for our example , @xmath63 , @xmath64 , etc .",
    "it is important to observe that step sequences and stratified orders are interchangeable concepts . given a step sequence @xmath65 , define the binary relation @xmath66 on @xmath67 as + @xmath68    intuitively , @xmath69 simply means @xmath53 occurs before @xmath70 on the step sequence @xmath65 .",
    "thus , @xmath71 iff @xmath72 ; and @xmath73 iff @xmath74 . obviously , the relation @xmath66 is a stratified order and we will call it the stratified order _ generated by the step sequence _ @xmath65 .    conversely , let @xmath75 be a stratified order on a set @xmath76 . the set @xmath76",
    "can be represented as a sequence of equivalence classes @xmath77 ( @xmath78 ) such that @xmath79 the sequence @xmath80 is called the step sequence _ representing _ @xmath75 .",
    "a detailed discussion on this connection between stratified orders and step sequences can be found in @xcite .",
    "in this section , we review the janicki  koutny theory of stratified order structures and comtraces from @xcite .",
    "the reader is also referred to @xcite for an excellent introductory survey on the subject with many motivating examples .",
    "a _ relational structure _ is a triple @xmath81 , where @xmath3 is a set and @xmath82 , @xmath83 are binary relations on @xmath3 .",
    "a relational structure @xmath84 is an _ extension _ of @xmath85 , denoted as @xmath86 , iff @xmath87 , @xmath88 and @xmath89 .    a _ stratified order structure _ ( _ so - structure _ ) is a relational structure @xmath90 such that for all @xmath91 , the following hold : @xmath92 when @xmath3 is finite ,",
    "@xmath12 is called a _ finite so - structure_. [ def : sos ]    the axioms  imply that @xmath93 is a partial order and @xmath94 the axioms and imply @xmath95 is a _",
    "strict preorder_. the relation @xmath1 is called _ causality _ and represents the  earlier than \" relationship while the relation @xmath2 is called _ weak causality _ and represents the  not later than \" relationship .",
    "the axioms  model the mutual relationship between  earlier than \" and  not later than \" relations , provided that _ the system runs are stratified orders_. historically , the name `` stratified order structure '' came from the fact that stratified orders can be seen as a special kind of so - structures .    for every stratified poset @xmath96 ,",
    "the triple @xmath97 is a so - structure.[prop : soss ]    we next recall the notion of _ stratified order extension_. this concept is extremely important since the relationship between stratified orders and so - structures is exactly analogous to the one between total orders and partial orders .    let @xmath98 be a so - structure .",
    "a _ stratified _",
    "order @xmath75 on @xmath3 is a _",
    "stratified extension _ of @xmath12 if and only if @xmath99 .",
    "the set of all stratified extensions of @xmath12 is denoted as @xmath100 .",
    "[ def : extsos ]    szpilrajn s theorem @xcite states that every poset can be reconstructed by taking the intersection of all of its total order extensions .",
    "janicki and koutny showed that a similar result holds for so - structures and stratified extensions :    let @xmath101 be a so - structure .",
    "then + @xmath102 [ theo : szpstrat ]    using this theorem , we can show the following properties relating so - structures and their stratified extensions .",
    "for every so - structure @xmath101 ,    1 .",
    "@xmath103 2 .",
    "@xmath104    [ cor : szpstrat ]    * 1 .",
    "* see ( * ? ? ?",
    "* theorem 3.6 ) .",
    "* 2 . * follows from * 1 . * and theorem  [ theo : szpstrat ] .",
    "_ comtraces _ were introduced in @xcite as a generalization of traces to represent so - structures .",
    "the _ comtrace congruence _ is defined via two relations _ simultaneity _ and _",
    "serializability_.    let @xmath105 be a finite set ( of events ) and let @xmath106 be two relations called _ serializability _ and _ simultaneity _ respectively and the relation @xmath4 is irreflexive and symmetric .",
    "the triple @xmath107 is called a _ comtrace alphabet_. [ def : comalpha ]    intuitively , if @xmath108 then @xmath39 and @xmath109 can occur simultaneously ( or be a part of a _ synchronous _ occurrence in the sense of @xcite ) , while @xmath110 means that @xmath39 and @xmath109 may occur simultaneously or @xmath39 may occur before @xmath109 .",
    "we define @xmath111 , the set of all possible _ steps _ , to be the set of all cliques of the graph @xmath112 , i.e. , + @xmath113    for a comtrace alphabet @xmath114 , we define @xmath115 to be the relation comprising all pairs @xmath116 of step sequences such that + @xmath117 + where @xmath118 and @xmath119 , @xmath120 , @xmath121 are steps satisfying @xmath122 and @xmath123 .",
    "we define _ comtrace congruence _ @xmath124 .",
    "we define the comtrace concatenation operator @xmath125 as @xmath126\\circledast[t ] { \\triangleq}[r\\ast t]$ ] .",
    "the quotient monoid @xmath127)$ ] is called the monoid of _ comtraces _ over @xmath128 .",
    "[ def : commonoid ]    note that since @xmath5 is irreflexive , @xmath129 implies that @xmath130 .",
    "we will omit the subscript @xmath128 from the comtrace congruence @xmath131 , and write @xmath132 and @xmath133 when it causes no ambiguity . to shorten our notations , we often write @xmath134_{\\theta}$ ] or @xmath134 $ ] instead of @xmath134_{{\\equiv}_{\\theta}}$ ] to denote the comtrace generated by the step sequence @xmath135 over @xmath128 .",
    "let @xmath136 where @xmath39 , @xmath109 and @xmath137 are three atomic operations , where + @xmath138 + assume simultaneous reading is allowed .",
    "then only @xmath109 and @xmath137 can be performed simultaneously , and the simultaneous execution of @xmath109 and @xmath137 gives the same outcome as executing @xmath109 followed by @xmath137 .",
    "we can then define the comtrace alphabet @xmath114 , where @xmath139 and @xmath140 .",
    "this yields @xmath141 .",
    "thus , @xmath142 = { \\bigl\\ { \\{a\\}\\{b , c\\},\\{a\\}\\{b\\}\\{c\\}\\bigr\\}}$ ] is a comtrace .",
    "but @xmath143 .",
    "[ ex : comtrace1 ]    even though traces are quotient monoids over sequences and comtraces are quotient monoids over step sequences , traces can be regarded as special kinds of comtraces when the relation @xmath144 . for a more detailed discussion on this connection between traces and comtraces ,",
    "the reader is referred to @xcite .",
    "let @xmath145 .",
    "we define the relations @xmath146 as :    1 .",
    "@xmath147 2 .   @xmath148 .",
    "[ def : s2inv ]    it is worth noting that the structure @xmath149 is exactly the _ cd - graph _ ( cf . definition  [ def : comdag ] ) that represents the comtrace @xmath150 $ ] .",
    "this gives us some intuition on how koutny and kleijn constructed the cd - graph definition in @xcite .",
    "we also observe that @xmath151 is usually _ not _ a so - structure since @xmath152 and @xmath153 describe only basic `` local '' causality and weak causality invariants of the event occurrences of @xmath65 by considering pairwise serializable relationships of event occurrences .",
    "hence , @xmath152 and @xmath153 might not capture `` global '' invariants that can be inferred from  of definition  [ def : sos ] . to ensure all invariants",
    "are included , we need the following @xmath154-closure operator .    for every relational structure @xmath155 we define @xmath156 as + @xmath157 [ def : so - cl ]    intuitively @xmath154-closure is a generalization of transitive closure for relations to relational structures .",
    "the motivation is that for appropriate relations @xmath82 and @xmath83 ( see assertion ( 3 ) of proposition  [ prop : so - cl ] ) , the relational structure @xmath158 is a so - structure .",
    "the @xmath154-closure operator satisfies the following properties :    let @xmath155 be a relational structure .    1 .",
    "if @xmath83 is irreflexive then @xmath159 .",
    "2 .   @xmath160 .",
    "@xmath156 is a so - structure if and only if @xmath161 is irreflexive .",
    "4 .   if @xmath12 is a so - structure then @xmath162 . 5 .",
    "if @xmath12 be a so - structure and @xmath163 , then @xmath164 and @xmath165 is a so - structure .",
    "[ prop : so - cl ]    given a step sequence @xmath145 and its respective comtrace @xmath166\\in { \\mathbb{s}}_{\\theta}^*/\\!\\equiv$ ] , we define the relational structures @xmath167 as : + @xmath168.[def : s2sos ]    the relational structure @xmath167 is called the _ so - structure defined by the comtrace _ @xmath166 $ ] , where @xmath169 , @xmath170 and @xmath171 are used to denote the event occurrence set , causality relation and weak causality relation induced by the comtrace @xmath172 respectively . the following nontrivial theorem and its corollary justifies the name by showing that step sequences in a comtrace @xmath172 are exactly stratified extension of the so - structure @xmath173 , and that @xmath167 is uniquely defined for the comtrace @xmath172 regardless of the choice of @xmath174 .    for each @xmath175 ,",
    "the relational structure @xmath167 is a so - structure and @xmath176 .",
    "[ theo : com2sos ]    for all @xmath177 ,    1 .",
    "@xmath178 2 .",
    "@xmath179    [ cor : com2sos ]",
    "even though theorem  [ theo : com2sos ] shows that each comtrace can be represented uniquely by a labeled so - structure , it does not give us an explicit definition of how these labeled so - structures look like .",
    "in this section , we will give an exact definition of labeled so - structures that represent comtraces . to provide us with more intuition , we first recall how mazurkiewicz traces",
    "can be characterized as labeled posets .",
    "a _ trace concurrent alphabet _ is a pair @xmath180 , where @xmath181 is a symmetric irreflexive binary relation on the finite set @xmath105 .",
    "a _ trace congruence _",
    "@xmath182 can then be defined as the smallest equivalence relation such that for all sequences @xmath183 , if @xmath184 , then @xmath185 .",
    "the elements of @xmath186 are called _",
    "traces_.    traces can also be defined alternatively as posets whose elements are labeled with symbols of a concurrent alphabet @xmath180 satisfying certain conditions .    given a binary relation @xmath187 , the _ covering relation _ of @xmath11 is defined as @xmath188 .",
    "an alternative definition of mazurkiewicz trace is :    a trace over a concurrent alphabet @xmath180 is a finite labeled poset @xmath189 , where @xmath190 is a labeling function , such that for all @xmath191 ,    1 .",
    "@xmath192 , and 2 .",
    "@xmath193 .",
    "[ def : ltraces ]    a trace in this definition is only identified unique up to _ label - preserving isomorphism_. the first condition says that immediately causally related event occurrences must be labeled with dependent events .",
    "the second condition ensures that any two event occurrences with dependent labels must be causally related .",
    "the first condition is particularly important since two immediately causally related event occurrences will occur next to each other in at least one of its linear extensions .",
    "this is the key to relate definition  [ def : ltraces ] with quotient monoid definition of traces .",
    "thus , we would like to establish a similar relationship for comtraces .",
    "an immediate technical difficulty is that weak causality might be cyclic , so the notion of `` immediate weak causality '' does not make sense .",
    "however , we can still deal with cycles of a so - structure by taking advantage of the following simple fact : _ the weak causality relation is a strict preorder_.    let @xmath101 be a so - structure .",
    "we define the relation @xmath194 as + @xmath195    since @xmath95 is a strict preorder , it follows that @xmath196 is an equivalence relation .",
    "the relation @xmath196 will be called the _ @xmath95-cycle equivalence relation _ and an element of the quotient set @xmath197 will be called a _",
    "@xmath95-cycle equivalence class_. we then define the following binary relations @xmath198 and @xmath199 on the quotient set @xmath197 as @xmath200 \\widehat{{\\prec } } [ \\beta ] { \\stackrel{\\textit{\\scriptsize{df}}}{\\iff}\\ } ( [ \\alpha]\\times[\\beta])\\;\\cap { \\prec}\\not=\\emptyset \\hspace*{3mm}\\text { and } \\hspace*{3 mm } [ \\alpha ] \\widehat{{\\sqsubset } } [ \\beta ] { \\stackrel{\\textit{\\scriptsize{df}}}{\\iff}\\ } ( [ \\alpha]\\times[\\beta])\\;\\cap { \\sqsubset}\\not=\\emptyset \\label{qsos}\\end{aligned}\\ ] ]    using this quotient construction , every so - structure , whose weak causality relation might be cyclic , can be uniquely represented by an _",
    "quotient so - structure .",
    "the relational structure @xmath201 is a so - structure , the relation @xmath199 is a partial order , and for all @xmath202 ,    1 .",
    "@xmath203 \\widehat{{\\prec } } [ \\beta]$ ] 2 .",
    "@xmath204 \\widehat{{\\sqsubset } } [ \\beta ] \\vee ( \\alpha\\not=\\beta \\wedge [ \\alpha]=[\\beta])$ ]    follows from definition  [ def : sos ] .    using ( [ qsos ] ) and theorem  [ theo : szpstrat ] , it is not hard to prove the following simple yet useful properties of @xmath95-cycle equivalence classes .",
    "let @xmath205 be a so - structure .",
    "we use @xmath65 and @xmath206 to denote some step sequences over @xmath8 .",
    "then for all @xmath191 ,    1 .",
    "@xmath207=[\\beta ] \\iff   \\forall \\lhd \\in ext(s),\\ ; \\alpha \\simeq_{\\lhd } \\beta$ ] 2 .",
    "@xmath208v$ ] 3 .",
    "@xmath207 { { \\hat{{\\sqsubset}}}^{\\mathsf{cov}\\ ; } } [ \\beta ] \\implies \\exists\\lhd \\in ext(s),\\;\\omega_{\\lhd } = u[\\alpha][\\beta]v$ ]    [ prop : covlsos ]    each @xmath95-cycle equivalence class is what juhs , lorenz and mauser called a",
    "_ synchronous step _",
    "they also used equivalence classes to capture synchronous steps but only for the special class of _ synchronous closed _ so - structures , where @xmath209 is an equivalence relation .",
    "we extend their ideas by using @xmath95-cycle equivalence classes to capture what we will call _ non - serializable sets _ in arbitrary so - structures .",
    "the name is justified in assertion ( 1 ) of proposition  [ prop : covlsos ] stating that two elements belong to the same non - serializable set of a so - structure @xmath12 iff they must be executed simultaneously in every stratified extension of @xmath12 .",
    "furthermore , we show in assertion ( 2 ) that all elements of a non - serializable set must occur together as a single step in at least one stratified extension of @xmath12 .",
    "assertion ( 3 ) gives a sufficient condition for two non - serializable sets to occur as consecutive steps in at least one stratified extension of @xmath12 .",
    "before we proceed to define comtrace using labeled so - structure , we need to define _ label - preserving isomorphisms _ for labeled so - structures more formally .",
    "a tuple @xmath210 is a _ labeled relational structure _",
    "iff @xmath211 is a relational structure and @xmath212 is a function with domain @xmath3 .",
    "if @xmath211 is a so - structure , then @xmath85 is a _ labeled so - structure_.    given two labeled relational structures @xmath213 and @xmath214 , we write @xmath215 to denote that @xmath216 and @xmath217 are _ label - preserving isomorphic _ ( _ lp - isomorphic _ ) . in other words , there is a bijection @xmath218 such that for all @xmath219 ,    1 .",
    "@xmath220 2 .",
    "@xmath221 3 .",
    "@xmath222    such function @xmath223 is called a _",
    "label - preserving isomorphism _",
    "( _ lp - isomorphism _ ) .",
    "note that all notations , definitions and results for so - structures are applicable to labeled so - structures .",
    "we also write @xmath224 $ ] or @xmath225 } $ ] to denote the lp - isomorphic class of a labeled relational structure @xmath226 .",
    "we will not distinguish an lp - isomorphic class @xmath227 } $ ] with a single labeled relational structure @xmath85 when it does not cause ambiguity .",
    "we are now ready to give an alternative definition for comtraces .",
    "to avoid confusion with the comtrace notion by janicki and koutny in @xcite , we will use the term _ lsos - comtrace _ to denote a comtrace defined using our definition .    given a comtrace alphabet @xmath114 , a _",
    "lsos - comtrace _ over @xmath128 is ( an lp - isomorphic class of ) a finite labeled so - structure @xmath228 } $ ] such that @xmath190 and for all @xmath191 ,    1 .",
    "@xmath207 ( { { \\hat{{\\sqsubset}}}^{\\mathsf{cov}\\;}}\\cap \\hat{{\\prec } } ) [ \\beta ] \\implies \\lambda([\\alpha])\\times \\lambda([\\beta ] ) \\nsubseteq ser$ ] 2 .",
    "@xmath207 ( { { \\hat{{\\sqsubset}}}^{\\mathsf{cov}\\;}}\\setminus \\hat{{\\prec } } ) [ \\beta ] \\implies \\lambda([\\beta])\\times \\lambda([\\alpha ] ) \\nsubseteq ser$ ] 3 .",
    "@xmath229)},\\ ; a\\cup b = [ \\alpha ] \\implies \\lambda(a)\\times \\lambda(b ) \\not \\subseteq ser$ ] 4 .",
    "@xmath230 5 .",
    "@xmath231    we write @xmath232 to denote the class of all lsos - comtraces over @xmath128 .",
    "[ def : lcomtrace ]    let @xmath136 , @xmath233 and @xmath234 .",
    "then we have @xmath235 .",
    "the lp - isomorphic class of the labeled so - structure @xmath236 depicted in figure  [ fig : f1 ] ( the dotted edges denote @xmath95 relation and the solid edges denote both @xmath93 and @xmath95 relations ) is a lsos - comtrace .",
    "the graph in figure  [ fig : f2 ] represents the labeled quotient so - structure @xmath237 of @xmath85 , where we define @xmath238 .",
    "@xmath239[f-]{a } \\ar@{-->}[dr]\\ar@/^/[rr ] \\ar@/_1.5pc/ [ ddrr ] &      & * + [ o][f-]{c}\\ar@/_/ @{-->}[dd]\\\\           & * + [ o][f-]{c } \\ar[ur]\\ar[dr ]        & \\\\ * + [ o][f-]{b } \\ar[ur]\\ar@/_/[rr]\\ar@/^1.5pc/ [ uurr ]   &    & * + [ o][f-]{b}\\ar@/_/ @{-->}[uu ] } $ ]    @xmath240{a } \\ar@{-->}[dr]\\ar@/^1pc/[drr ] &     & \\\\           & * + [ f-]{c } \\ar[r ]       & * + [ f-]{b , c}\\\\ * + [ f-]{b } \\ar[ur]\\ar@/_1pc/[urr ]   & & } $ ]    the lsos - comtrace @xmath224 $ ] actually corresponds to the comtrace @xmath241 $ ] , and we will show this relationship formally in section  [ sec : representation ] . [ ex : comtrace2 ]    definition  [ def : lcomtrace ] can be extended to define _ infinite comtrace _ as follows . instead of asking @xmath3 to be finite , we require a labeled so - structure to be _ initially finite _",
    "@xcite ) , i.e. , @xmath242 is finite for all @xmath243 .",
    "the initially - finiteness not only gives us a sensible interpretation that every event only causually depends on finitely many events , but also guarantees that the covering relations of @xmath244 and @xmath245 are well - defined .",
    "since each lsos - comtrace is defined as a class of lp - isomorphic labeled so - structures , dealing with lsos - comtrace might seem tricky .",
    "the _ no autoconcurrency _ property , i.e. , the relation @xmath5 is irreflexive , gives us a _ canonical _ way to enumerate the events of a lsos - comtrace very similar to how the events of a comtrace are enumerated .    given a step sequence @xmath246 and any function @xmath223 defined on @xmath247 , we define @xmath248 , i.e. , the step sequence derived from @xmath135 by applying the function @xmath223 successively on each @xmath249 . note that @xmath250 denotes the _ image _ of @xmath251 under @xmath223 .",
    "given a lsos - comtrace @xmath252 } $ ] over a comtrace alphabet @xmath114 , a stratified order @xmath253 can be seen as a step sequence @xmath254 .    1 .",
    "for every @xmath255 ( @xmath256 ) , @xmath257 2 .",
    "@xmath258 .",
    "[ prop : validss ]    proposition  [ prop : validss ] ensures that @xmath259 is a valid step sequence over @xmath128 .",
    "recall that @xmath260 denotes the enumerated step sequence of @xmath65 and @xmath261 denotes the set of event occurrences .",
    "bijection _ @xmath262 as + @xmath263    by proposition  [ prop : validss ] , the function @xmath264 is well - defined .",
    "moreover , we can show that @xmath264 is uniquely determined by @xmath85 regardless of the choice of @xmath253 .    given @xmath265 , let @xmath266 and @xmath267",
    ". then @xmath268 .",
    "[ prop : uniquexi ]    henceforth , we will ignore subscripts and reserve the notation @xmath269 to denote the kind of mappings as defined above .",
    "we then define the _ enumerated so - structure _ of @xmath85 to be the labeled so - structure @xmath270 , where @xmath271 for @xmath259 and @xmath253 ; and the relations @xmath272 are defined as + @xmath273    clearly , the enumerated so - structure @xmath274 can be uniquely determined from @xmath85 using the preceding definition . from our construction , we can easily show the following important relationships :    1 .",
    "@xmath275 and @xmath85 are lp - isomorphic under the mapping @xmath269 .",
    "2 .   the labeled so - structures @xmath276 and @xmath277 are lp - isomorphic under the mapping @xmath269 and @xmath278 .",
    "[ prop : isoext ]    in other words , the mapping @xmath279 plays the role of both the lp - isomorphism from @xmath275 to @xmath85 and the lp - isomorphism from the stratified extension @xmath280 of @xmath275 to the stratified extension @xmath96 of @xmath85 .",
    "these relationships can be best captured using the commutative diagram on the right .",
    "@xmath281_{\\displaystyle \\xi } \\ar@{^{(}->}[d]_{\\displaystyle id_{\\sigma } }        & ( x,{\\prec},{\\sqsubset},\\lambda ) \\ar@{^{(}->}[d]^{\\displaystyle id_{x } }     \\\\    ( \\sigma,\\lhd_{u},\\lhd_{u}^{\\frown},\\ell ) \\ar@{->}[r]^{\\displaystyle \\xi } &   ( x,\\lhd,\\lhd^{\\frown},\\lambda)}$ ]    we can even observe further that two lsos - comtraces are identical if and only if they define the same enumerated so - structure . henceforth , we will call an enumerated so - structure defined by a lsos - comtrace @xmath85 _ the canonical representation _ of @xmath85 .",
    "recently , inspired by the dependency graph notion for mazurkiewicz traces ( cf .",
    "* chapter 2 ) ) , kleijn and koutny claimed without proof that their _ combined dependency graph _ notion is another alternative way to define comtraces @xcite . in section  [ sec : representation ] , we will give a detailed proof of their claim .",
    "given an comtrace alphabet @xmath282 , a _ combined dependency graph _",
    "( _ cd - graph _ ) over @xmath128 is ( a lp - isomorphic class of ) a finite labeled relational structure @xmath283 } $ ] such that @xmath190 , the relations @xmath284 are irreflexive , @xmath285 is a so - structure , and for all @xmath286 ,    @xmath287    @xmath288    @xmath289    @xmath290 + we will write @xmath291 to denote the class of all cd - graphs over @xmath128 . [ def : comdag ]    cd - graphs can be seen as reduced graph - theoretic representations for lsos - comtraces , where some arcs that can be recovered using @xmath154-closure are omitted .",
    "it is interesting to observe that the non - serializable sets of a cd - graph are exactly the _ strongly connected components _ of the directed graph @xmath292 and can easily be found in time @xmath293 using any standard algorithm ( cf .",
    "* section 22.5 ) ) .",
    "+    cd - graphs were called _ dependence comdags _ in @xcite . but this name could be misleading since the directed graph @xmath292 is not necessarily acyclic .",
    "for example , the graph on the right is the cd - graph that corresponds to the lsos - comtrace from figure  [ fig : f1 ] , but it is not acyclic .",
    "( here , we use the dotted edges to denote @xmath294 and the solid edges to denote _ only _ @xmath295 . ) thus , we use the name `` combined dependency graph '' instead .",
    "@xmath296[f-]{a } \\ar@{-->}[dr ] \\ar@/_1.5pc/ [ ddrr ] &     & * + [ o][f-]{c}\\ar@/_/ @{-->}[dd]\\\\           & * + [ o][f-]{c } \\ar[ur]\\ar[dr ]        & \\\\ * + [ o][f-]{b } \\ar[ur]\\ar@/_/[rr]\\ar@/^1.5pc/ [ uurr ]   &    & * + [ o][f-]{b}\\ar@/_/ @{-->}[uu ] } $ ]",
    "this section contains the main technical contribution of this paper by showing that for a given comtrace alphabet @xmath128 , @xmath297 , @xmath232 and @xmath291 are three equivalent ways of talking about the same class of objects .",
    "we will next prove the first representation theorem which establishes the representation mappings between @xmath297 and @xmath232 .",
    "let @xmath298 and @xmath299 be stratified order structures such that @xmath300",
    ". then @xmath301 .",
    "[ prop : stratsubset ]    follows from theorem  [ theo : szpstrat ] .    for the next two lemmata , we let @xmath85 be a lsos - comtrace over a comtrace alphabet @xmath114 .",
    "let @xmath302 be the canonical representation of @xmath85 .",
    "let @xmath303 and @xmath304 . since @xmath65 is a valid step sequence in @xmath31 ( by proposition  [ prop : validss ] ) , we can construct @xmath305 } = ( \\sigma_{u},{\\prec}_{[u]},{\\sqsubset}_{[u]})$ ] from definition  [ def : s2sos ] .",
    "our goal is to show that the stratified order @xmath305}$ ] defined by the comtrace @xmath150 $ ] is exactly @xmath306 .",
    "@xmath305 } \\subseteq ( \\sigma_{u},{\\prec}_{0},{\\sqsubset}_{0})$ ] .",
    "[ lem : l1 ]    by proposition  [ prop : so - cl ] , to show @xmath305 } = ( \\sigma_{u},{\\prec}_{u},{\\sqsubset}_{u})^{\\lozenge } \\subseteq ( \\sigma_{u},{\\prec}_{0},{\\sqsubset}_{0})$ ] , it suffices to show that @xmath307 .",
    "since @xmath274 is the canonical representation of @xmath85 , it is important to observe that @xmath308 .",
    "( @xmath309 ) : assume @xmath310 . then from definition  [ def : s2inv ] , @xmath311 .",
    "since @xmath312 , it follows from definition  [ def : lcomtrace ] that @xmath313 or @xmath314 .",
    "suppose for a contradiction that @xmath314 , then by theorem  [ theo : szpstrat ] , @xmath315 .",
    "but since we assume that @xmath303 , it follows that @xmath316 and @xmath317 , a contradiction .",
    "hence , we have shown @xmath313 .",
    "( @xmath318 ) : can be shown in a similar way .    @xmath305 } \\supseteq ( \\sigma_{u},{\\prec}_{0},{\\sqsubset}_{0})$ ] . [",
    "lem : l2 ]    in this proof , we will include subscripts for equivalence classes to avoid confusing the elements from quotient set @xmath319 with the elements from the quotient comtrace monoid @xmath320 .",
    "in other words , we write @xmath207_{\\equiv_{{\\sqsubset}_{0}}}$ ] to denote an element of the quotient set @xmath319 , and write @xmath150_{\\theta}$ ] to denote the comtrace generated by @xmath65 .",
    "let @xmath321 .",
    "to show @xmath305 } \\supseteq s'$ ] , by proposition  [ prop : stratsubset ] , it suffices to show @xmath322 } ) \\subseteq ext(s')$ ] . from theorem  [ theo :",
    "com2sos ] , we know that @xmath322_{\\theta } } ) = { \\{\\lhd_w\\mid w\\in [ u]_{\\theta}\\}}$ ] .",
    "thus we only need to show that for all @xmath323_{\\theta}$ ] , @xmath324 .",
    "we observe that from @xmath65 , by definition  [ def : commonoid ] , we can generate all the step sequences in the comtrace @xmath150_{\\theta}$ ] in stages using the following recursive definition : @xmath325    since the set @xmath150_{\\theta}$ ] is finite , @xmath150_{\\theta}=d^n(u)$ ] for some stage @xmath326 . for the rest of the proof , we will prove by induction on @xmath327 that for all @xmath328 , if @xmath329 then @xmath330 . + * base case : * when @xmath331 , @xmath332 . since @xmath333",
    ", it follows from proposition  [ prop : isoext ] that @xmath334 .",
    "+ * inductive case : * when @xmath335 , let @xmath40 be an element of @xmath336 .",
    "then either @xmath337 or @xmath338 . for the former case , by inductive hypothesis , @xmath339 . for the latter case",
    ", there must be some element @xmath340 such that @xmath341 or @xmath342 . by induction hypothesis ,",
    "we already known @xmath343 .",
    "we want to show that @xmath324 .",
    "there are two cases to consider : + _ * case ( i ) : * _ + when @xmath341 , by definition  [ def : commonoid ] , there are some @xmath344 and steps @xmath345 such that @xmath346 and @xmath347 where @xmath119 , @xmath120 , @xmath121 satisfy @xmath348 and @xmath349 and @xmath129 .",
    "let @xmath350 and @xmath351 be enumerated step sequences of @xmath206 and @xmath40 respectively .",
    "suppose for a contradiction that @xmath352 .",
    "by definition  [ def : extsos ] , there are @xmath353 and @xmath354 such that @xmath355 .",
    "we now consider the quotient set @xmath356 . by proposition  [ prop : covlsos ]",
    "( 1 ) , @xmath357 . since @xmath355",
    ", it follows that @xmath207_{\\equiv_{{\\sqsubset}_{0}}}\\hat{{\\sqsubset}}_{0 } [ \\beta]_{\\equiv_{{\\sqsubset}_{0}}}$ ] .",
    "thus , from the fact that @xmath358 is partial order , there must exists a chain @xmath200_{\\equiv_{{\\sqsubset}_{0}}}=\\ ; [ \\gamma_1]_{\\equiv_{{\\sqsubset}_{0 } } } \\;{{\\hat{{\\sqsubset}}_{0}}^{\\mathsf{cov}\\;}}\\ ; [ \\gamma_2]_{\\equiv_{{\\sqsubset}_{0}}}\\;{{\\hat{{\\sqsubset}}_{0}}^{\\mathsf{cov}\\;}}\\ ; \\ldots\\;{{\\hat{{\\sqsubset}}_{0}}^{\\mathsf{cov}\\;}}\\;[\\gamma_k]_{\\equiv_{{\\sqsubset}_{0}}}\\;= [ \\beta]_{\\equiv_{{\\sqsubset}_{0 } } }   \\label{eq : chain1}\\end{aligned}\\ ] ]    then by theorem  [ theo : szpstrat ] and the fact that @xmath343 , we know that @xmath359 for all @xmath255 . in other words , since the chain implies that every @xmath360 must always occur between @xmath53 and @xmath70 in all stratified extensions of @xmath361 and @xmath362 , we also have @xmath359 . hence , by proposition  [ prop : covlsos ] ( 1 ) , we have @xmath363_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{a}}$ ] for all @xmath255 , @xmath256 . also from of definition  [ def : lcomtrace ] and that @xmath364 , we know that for each @xmath360 , either @xmath363_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{b}}$ ] or @xmath363_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{c}}$ ]",
    ". now we note that the first element on the chain @xmath365_{\\equiv_{{\\sqsubset}_{0}}}=[\\alpha]_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{c}}$ ] and the last element on the chain @xmath366_{\\equiv_{{\\sqsubset}_{0}}}=[\\beta]_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{b}}$ ] .",
    "thus , there exist two consecutive elements @xmath363_{\\equiv_{{\\sqsubset}_{0}}}$ ] and @xmath367_{\\equiv_{{\\sqsubset}_{0}}}$ ] on the chain such that @xmath363_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{c}}$ ] and @xmath367_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{b}}$ ] .",
    "but then it follows that    * @xmath367_{\\equiv_{{\\sqsubset}_{0}}}\\times [ \\gamma_i]_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq ser$ ] and @xmath363_{\\equiv_{{\\sqsubset}_{0 } } } { { \\hat{{\\sqsubset}}_{0}}^{\\mathsf{cov}\\ ; } } [ \\gamma_{i+1}]_{\\equiv_{{\\sqsubset}_{0}}}$ ] * @xmath368_{\\equiv_{{\\sqsubset}_{0 } } } \\hat{{\\prec}}_{0 } [ \\gamma_{i+1}]_{\\equiv_{{\\sqsubset}_{0}}}\\bigr)$ ] since @xmath343 and @xmath369    these contradict of definition  [ def : lcomtrace ] since @xmath274 is a lsos - comtrace .",
    "+ _ * case ( ii ) : * _ + when @xmath342 , by definition  [ def : commonoid ] , there are some @xmath344 and steps @xmath345 such that @xmath370 and @xmath371 where @xmath119 , @xmath120 , @xmath121 satisfy @xmath348 and @xmath349 and @xmath129 .",
    "let @xmath372 and @xmath373 be enumerated step sequences of @xmath206 and @xmath40 respectively .",
    "suppose for a contradiction that @xmath352 . by definition  [ def : extsos ] , there are @xmath374 and @xmath375 such that @xmath313 . by proposition  [ prop : covlsos ]",
    "( 1 ) , @xmath357 . thus , using a dual argument to the proof of case ( i ) , we can build a chain @xmath200_{\\equiv_{{\\sqsubset}_{0}}}=\\ ; [ \\gamma_1]_{\\equiv_{{\\sqsubset}_{0 } } } \\;{{\\hat{{\\sqsubset}}_{0}}^{\\mathsf{cov}\\;}}\\ ; [ \\gamma_2]_{\\equiv_{{\\sqsubset}_{0}}}\\;{{\\hat{{\\sqsubset}}_{0}}^{\\mathsf{cov}\\;}}\\ ; \\ldots\\;{{\\hat{{\\sqsubset}}_{0}}^{\\mathsf{cov}\\;}}\\;[\\gamma_k]_{\\equiv_{{\\sqsubset}_{0}}}\\;= [ \\beta]_{\\equiv_{{\\sqsubset}_{0 } } } \\end{aligned}\\ ] ] we then argue that there are two consecutive elements on the chain such that @xmath363_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{b}}$ ] and @xmath367_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq { \\overline{c}}$ ] , which implies    1 .",
    "@xmath376_{\\equiv_{{\\sqsubset}_{0}}}\\times [ \\gamma_{i+1}]_{\\equiv_{{\\sqsubset}_{0}}}\\subseteq ser$ ] and @xmath363_{\\equiv_{{\\sqsubset}_{0 } } } { { \\hat{{\\sqsubset}}_{0}}^{\\mathsf{cov}\\ ; } } [ \\gamma_{i+1}]_{\\equiv_{{\\sqsubset}_{0}}}$ ] 2 .",
    "@xmath363_{\\equiv_{{\\sqsubset}_{0 } } } \\hat{{\\prec}}_{0 } [ \\gamma_{i+1}]_{\\equiv_{{\\sqsubset}_{0}}}$ ] since @xmath343 and @xmath377    these contradict of definition  [ def : lcomtrace ] .",
    "we also need to show that the labeled so - structure defined from each comtrace is indeed a lsos - comtrace . in other words ,",
    "we need to show the following lemma .",
    "let @xmath114 be a comtrace alphabet . given a step sequence @xmath378 , the lp - isomorphic class @xmath379},{\\prec}_{[u]},{\\sqsubset}_{[u]},\\ell \\right ] } $ ]",
    "is a lsos - comtrace over @xmath128 .",
    "[ lem : l3 ]    the proof of this lemma is straightforward by checking that @xmath379},{\\prec}_{[u]},{\\sqsubset}_{[u]},\\ell \\right ] } $ ] satisfies all conditions .",
    "let @xmath128 be a comtrace alphabet .    1 .",
    "the mapping @xmath380 is defined as + @xmath381 } , $ ] + where the function @xmath382 is defined in section  [ sec : steps ] and @xmath383 is the so - structure defined by the comtrace @xmath172 from definition  [ def : s2sos ] .",
    "the mapping @xmath384 is defined as + @xmath385    [ def : repmaps ]    intuitively , the mapping @xmath386 is used to convert a comtrace to lsos - comtrace while the mapping @xmath387 is used to transform a lsos - comtrace into a comtrace .",
    "the fact that @xmath386 and @xmath387 are valid representation mappings for @xmath388 and @xmath232 will be shown in the following theorem .",
    "let @xmath128 be a comtrace alphabet .    1 .   for every @xmath389 , @xmath390 .",
    "2 .   for every @xmath391 , @xmath392 .",
    "[ theo : rep ]    * 1 . *",
    "the fact that @xmath393 follows from lemma  [ lem : l3 ] .",
    "now for a given @xmath389 , we have @xmath394 .",
    "thus , it follows that @xmath395    * 2 . * assume @xmath270 is the canonical representation of @xmath85 .",
    "observe that since @xmath396 , we have @xmath397    let @xmath398 .",
    "we will next show that @xmath399 and @xmath400 } $ ] .",
    "fix an arbitrary @xmath401 , from lemmas [ lem : l1 ] and [ lem : l2 ] , @xmath305 } = ( \\sigma,{\\prec}_{0},{\\sqsubset}_{0})$ ] . from theorem  [ theo : com2sos ] ,",
    "@xmath402})\\bigr\\ } } = [ u]$ ] .",
    "and the rest follows .",
    "the theorem says that the mappings @xmath386 and @xmath387 are inverses of each other and hence are both _",
    "bijective_.      using theorem  [ theo : rep ] , we are going to show that the _ combined dependency graph _ notion proposed in @xcite is another correct alternative definition for comtraces .",
    "first we need to define several representation mappings that are needed for our proofs .",
    "let @xmath128 be a comtrace alphabet .    1 .",
    "the mapping @xmath403 is defined as + @xmath404 + where @xmath65 is any step sequence in @xmath172 and @xmath405 and @xmath406 are defined as in definition  [ def : s2inv ] .",
    "the mapping @xmath407 is defined as @xmath408 .",
    "the mapping @xmath409 is defined as + @xmath410 .",
    "[ def : drepmaps ]    before proceeding futher , we want to make sure that :    1 .",
    "@xmath407 is a well - defined function . 2 .",
    "@xmath403 is a well - defined function .",
    "given a cd - graph @xmath411 } \\in { \\mathsf{cdg}}(\\theta)$ ] , let @xmath412 } = d_1^{\\lozenge}$ ] . we know that @xmath85 is uniquely defined , since by definition  [ def : comdag ] , @xmath413 is a so - structure , and so - structures are fixed points of @xmath154-closure ( by proposition  [ prop : so - cl ] ( 4 ) ) .",
    "we will next show that @xmath85 is a lsos - comtrace by verifying the conditions  of definition  [ def : lcomtrace ] .",
    "conditions and are exactly and .",
    ": suppose for contradiction that there exist two distinct non - serializable sets @xmath207,[\\beta]\\subset x$ ] such that @xmath207({{\\hat{{\\sqsubset}}}^{\\mathsf{cov}\\;}}\\cap \\hat{{\\prec}})[\\beta]$ ] and @xmath414)\\times \\lambda([\\beta ] ) \\subseteq ser$ ] .",
    "clearly , this implies that @xmath415 , and thus by the @xmath154-closure definition , @xmath70 is reachable from @xmath53 on the directed graph @xmath416 , where @xmath417 .",
    "now we consider a shortest path @xmath418 + @xmath419 + on @xmath420 that connects @xmath53 to @xmath70 .",
    "we will prove by induction on @xmath421 that there exist two consecutive @xmath422 and @xmath423 on @xmath418 such that @xmath424 $ ] and @xmath425 $ ] and @xmath426 , which contradicts with @xmath414)\\times \\lambda([\\beta ] ) \\subseteq ser$ ] .",
    "+ * base case : * when @xmath427 , then @xmath428 . since @xmath207({{\\hat{{\\sqsubset}}}^{\\mathsf{cov}\\;}}\\cap \\hat{{\\prec}})[\\beta]$ ] , we have @xmath429 , which by implies @xmath430 . +",
    "* inductive case : * when @xmath431 , we consider @xmath432 and @xmath433 .",
    "if @xmath434 $ ] and @xmath435 $ ] , then by @xmath207({{\\hat{{\\sqsubset}}}^{\\mathsf{cov}\\;}}\\cap \\hat{{\\prec}})[\\beta]$ ] , we have @xmath436 , which immediately yields @xmath437 . otherwise , we have @xmath438\\cup [ \\beta]$ ] or @xmath439 $ ] .",
    "for the first case , we get @xmath207\\hat{{\\sqsubset}}[\\delta_2]\\hat{{\\sqsubset}}[\\beta]$ ] , which contradicts that @xmath207{{\\hat{{\\sqsubset}}}^{\\mathsf{cov}\\;}}[\\beta]$ ] . for the latter case",
    ", we can apply induction hypothesis on the path @xmath440 .    and can also be shown similarly using `` shortest path '' argument as above .",
    "these proofs are easier since we only need to consider paths with edges in @xmath294 .",
    "* 2 . * by the proof of (",
    "* lemma 4.7 ) , for any two step sequences @xmath50 and @xmath65 in @xmath441 , we have @xmath442 iff @xmath443 ) = { \\mathsf{ct2dep}}([t])$ ] .",
    "thus the mapping @xmath444 is well - defined .",
    "the mapping @xmath407 is injective .",
    "[ lem : dlinj ]    assume that @xmath445 , such that @xmath446 $ ] . since @xmath154-closure operator does not change the labeling function",
    ", we can assume that @xmath447 $ ] and @xmath448 .",
    "we will next show that @xmath449 .",
    "( @xmath450 ) : let @xmath286 such that @xmath451 .",
    "suppose for a contradiction that @xmath452 . since @xmath451 , by , @xmath453 .",
    "thus , by , @xmath454 .",
    "but since @xmath448 , it follows that @xmath455 ( by proposition  [ prop : so - cl ] ) .",
    "thus , @xmath456 and @xmath457 , a contradiction .",
    "( @xmath458 ) : can be proved similarly .    by reversing the role of @xmath459 and @xmath460 , we have @xmath461 .",
    "thus , we conclude @xmath462 .",
    "we are now ready to show the following representation theorem which ensures that @xmath463 and @xmath464 are valid representation mappings for @xmath232 and @xmath291 .",
    "let @xmath128 be a comtrace alphabet .    1 .   for every @xmath465 , @xmath466 .",
    "2 .   for every @xmath391 , @xmath467 .",
    "[ theo : deprep ]    * 1 . *",
    "let @xmath468 and let @xmath469 .",
    "suppose for a contradiction that @xmath470 and @xmath471 . from how @xmath386 is defined , @xmath472 .",
    "thus , it follows that @xmath473 . but this contradicts the injectivity of @xmath464 from lemma  [ lem : dlinj ] .",
    "let @xmath391 and let @xmath474 .",
    "suppose for a contradiction that @xmath475 and @xmath476 . since @xmath477 , if we let @xmath478 , then @xmath479 .",
    "thus , we have shown that @xmath480 and @xmath481 , contradicting theorem  [ theo : rep ] ( 2 ) .",
    "this theorem shows that lsos - comtraces and cd - graphs are equivalent representations for comtraces .",
    "the main advantage of cd - graph definition is its simplicity while the lsos - comtrace definition is stronger and more convenient to prove properties about labeled so - structures that represent comtraces .",
    "we do not need to prove another representation theorem for cd - graphs and comtraces since their representation mappings are simply the composition of the representation mappings from theorems [ theo : rep ] and [ theo : deprep ] .",
    "recall for a comtrace monoid @xmath127)$ ] , the comtrace operator @xmath125 is defined as @xmath126\\circledast[t ] = [ r\\ast t]$ ] .",
    "we will construct analogous composition operators for lsos - comtraces and cd - graphs .",
    "we will then show that lsos - comtraces ( cd - graphs ) over a comtrace alphabet @xmath128 together with its composition operator form a monoid isomorphic to the comtrace monoid @xmath127)$ ] .",
    "given two sets @xmath482 and @xmath483 , we write @xmath484 to denote the _ disjoint union _ of @xmath482 and @xmath483 .",
    "such disjoint union can be easily obtained by renaming the elements in @xmath482 and @xmath483 so that @xmath485 .",
    "we define the lsos - comtrace composition operator as follows .",
    "let @xmath486 and @xmath487 be lsos - comtraces over an alphabet @xmath114 , where @xmath488 } $ ] .",
    "the _ composition _ @xmath489 of @xmath486 and @xmath487 is defined as ( a lp - isomorphic class of ) a labeled so - structure @xmath490 } $ ] such that @xmath491 , @xmath492 , and @xmath493 , where + @xmath494 + @xmath495    observe that the operator is well - defined since we can easily check that :    for every @xmath496 , @xmath497 .",
    "we will next show that this composition operator @xmath498 properly corresponds to the operator @xmath125 of the comtrace monoid over @xmath128 .",
    "let @xmath128 be a comtrace alphabet",
    ". then    1 .   for every @xmath499 , @xmath500 2 .   for every @xmath501 , @xmath502    [ prop : hom1 ]    * 1 . *",
    "assume @xmath503 } $ ] , @xmath504 } $ ] and @xmath505 } $ ] .",
    "we can pick @xmath506 and @xmath507 . then observe that a stratified order @xmath75 satisfying @xmath508 is an extension of @xmath509 .",
    "thus , by theorem  [ theo : rep ] , we have @xmath510\\circledast [ { \\mathsf{map}}(\\lambda_2,\\lhd_2 ) ] =   [ { \\mathsf{map}}(\\lambda,\\lhd ) ] = { \\mathsf{lct2ct}}(q)$ ] as desired .",
    "* 2 . * without loss of generality",
    ", we can assume that @xmath511 $ ] , @xmath512 $ ] and @xmath513 = \\mathbf{r}\\circledast \\mathbf{t}$ ] , where @xmath514 .",
    "by appropriate reindexing , we can also assume that @xmath515 .",
    "under these assumptions , let @xmath516 } $ ] , @xmath517 } $ ] and @xmath518 } $ ] , where @xmath519 is simply the standard labeling functions .",
    "it will now suffice to show that @xmath520 .",
    "( @xmath521 ) : let @xmath522 . by definitions [ def : s2inv ] and [ def : s2sos ]",
    ", we have + @xmath523 + @xmath524 + thus , by proposition  [ prop : so - cl ] ( 5 ) , we have @xmath525 as desired . furthermore , by proposition  [ prop : so - cl ] ( 5 ) , @xmath526 is a so - structure .",
    "( @xmath527 ) : by definitions [ def : s2inv ] and [ def : s2sos ] , we have @xmath528 and @xmath529 . since we already know",
    "@xmath526 is a so - structure , it follows from proposition  [ prop : so - cl ] ( 5 ) that + @xmath530    let @xmath531 denote the lp - isomorphic class @xmath532 $ ] .",
    "then we observe that @xmath533 ) = \\mathbb{i}$ ] and @xmath534 $ ] . by proposition  [ prop : hom1 ] and theorem  [ theo :",
    "rep ] , the structure @xmath535 is isomorphic to the monoid @xmath536)$ ] under the isomorphisms @xmath380 and @xmath384 .",
    "thus , the triple @xmath537 is also a monoid .",
    "we can summarize these facts in the following theorem :    the mappings @xmath386 and @xmath387 are monoid isomorphisms between two monoids @xmath536)$ ] and @xmath535 .",
    "similarly , we can also define a composition operator for cd - graphs .",
    "let @xmath538 and @xmath539 be cd - graphs over an alphabet @xmath114 , where @xmath540 } $ ] .",
    "the _ composition _ @xmath541 of @xmath538 and @xmath539 is defined as ( a lp - isomorphic class of ) a labeled so - structure @xmath542 } $ ] such that @xmath491 , @xmath492 , and + @xmath543 + @xmath544    from this definition , it is straightforward to show the following propositions , which we will state without proofs .    for every @xmath545 , @xmath546 .",
    "let @xmath128 be a comtrace alphabet",
    ". then    1 .   for every @xmath499 , @xmath547 2 .   for every @xmath548 , @xmath549    [ prop : hom2 ]    putting the two preceding propositions and theorem  [ theo : deprep ] together ,",
    "we conclude :    the mappings @xmath463 and @xmath464 are monoid isomorphisms between two monoids @xmath535 and @xmath550 .",
    "the simple yet useful construction we used extensively in this paper is to build a quotient so - structure modulo the @xmath95-cycle equivalence relation .",
    "intuitively , each @xmath95-cycle equivalence class consists of all the events that must be executed simultaneously with one another and hence can be seen as a single `` composite event '' .",
    "the resulting quotient so - structure is technically easier to handle since both relations of the quotient so - structure are acyclic . from this construction",
    ", we were able to give a labeled so - structure definition for comtraces similar to the labeled poset definition for traces .",
    "this quotient construction also explicitly reveals the following connection : a step on a step sequence @xmath135 is not serializable with respect to the relation @xmath5 of a comtrace alphabet if and only if it corresponds to a @xmath95-cycle equivalence class of the lsos - comtrace representing the comtrace @xmath134 $ ] ( cf .",
    "proposition  [ prop : covlsos ] ) .",
    "we have also formally shown that the quotient monoid of comtraces , the monoid of lsos - comtraces and the monoid of cd - graphs _ over the same comtrace alphabet _ are indeed isomorphic by establishing monoid isomorphisms between them .",
    "these three models are formal linguistic , order - theoretic , and graph - theoretic respectively , which allows us to apply a variety of tools and techniques .",
    "an immediate future task is to develop a framework similar to the one in this paper for _ generalized comtraces _ , proposed and developed in @xcite .",
    "generalized comtraces extend comtraces with the ability to model events that can be executed _ earlier than or later than but never simultaneously_. another direction is to define and analyze infinite comtraces ( and generalized comtraces ) in a spirit similar to the works on infinite traces , e.g. , @xcite .",
    "it is also promising to use infinite lsos - comtraces and cd - graphs to develop logics for comtraces similarly to what have been done for traces ( cf .",
    "@xcite ) .",
    "i am grateful to prof .",
    "ryszard janicki for introducing me comtrace theory .",
    "i also thank the mathematics institute of warsaw university and the theoretical computer science group of jagiellonian university for their supports during my visits .",
    "it was during these visits that the ideas from this paper emerge .",
    "this work is financially supported by the ontario graduate scholarship and the natural sciences and engineering research council of canada .",
    "the anonymous referees are thanked for their valuable comments that help improving the readability of this paper .",
    "19 e. clarke , o. grumberg and d. peled , _ model checking _ , mit press , cambridge , 1999 .",
    "t. h. cormen , c. e. leiserson and r. l. rivest , _ introduction to algorithms _ , second edition , mit press , 2001 .",
    "b. a. davey and h. a. priestley , , cambridge university press 2002 .",
    "v. diekert , on the concatenation of infinite traces , proc . of stacs ,",
    "_ lncs _ 480 ( 1991 ) , 105117 .",
    "v. diekert and g. rozenberg ( eds . ) , .",
    "world scientific 1995 .",
    "v. diekert and y mtivier , , _ handbook of formal languages , vol .",
    "3 : beyond words _ , pp 457 - 533 , springer 1997 .",
    "v. diekert , m. horsch , m. kufleitner , on first - order fragments for mazurkiewicz traces , _ fundam .",
    "_ 80(1 - 3 ) : 1 - 29 , 2007 .",
    "j. esparza and k. heljanko , _ unfoldings  a partial - order approach to model checking _ , springer 2008 .",
    "a. farzan and p. madhusudan , causal dataflow analysis for concurrent programs , proc . of cav ,",
    "_ lncs _ 4144 ( 2006 ) : 315328 .",
    "a. farzan and p. madhusudan , causal atomicity , proc . of tacas 2007 ,",
    "_ lncs _ 4424 ( 2007 ) , 102116 .",
    "p. c. fishburn , _ interval orders and interval graphs _",
    ", j. wiley 1985 , new york .",
    "h. gaifman and v. pratt , partial order models of concurrency and the computation of function , _ proc . of lics87",
    "_ , pp . 7285 .",
    "p. gastin , infinite traces , proc . of semantics of systems of concurrent processes , _",
    "lncs _ 469 ( 1990 ) , 277308 .",
    "t. gazagnaire , b. genest , l. hlout , p. s. thiagarajan , s. yang , causal message sequence charts , _ theor .",
    "410(41 ) : 40944110 , 2009 .",
    "r. janicki , relational structures model of concurrency .",
    ", 45(4 ) : 279320 , 2008 .",
    "r. janicki and m. koutny , invariants and paradigms of concurrency theory , proc . of _ parle _ 91 , _ lncs _ 506 , springer 1991 , pp . 5974 .",
    "r. janicki and m. koutny , structure of concurrency , , 112(1 ) : 552 , 1993 .",
    "r. janicki and m. koutny , semantics of inhibitor nets , _ information and computation _ , 123(1 ) : 116 , 1995 .",
    "r. janicki and m. koutny , fundamentals of modelling concurrency using discrete relational structures , _ acta informatica _ ,",
    "34 : 367388 , 1997 .",
    "r. janicki and m. koutny , on causality semantics of nets with priorities , _ fundamenta informaticae _ 34 : 222255 , 1999 .",
    "r. janicki and d. t. m. l , modelling concurrency with quotient monoids , proc of petri nets 2008 , _ lncs _ 5062 , springer 2008 , pp .",
    "251269 .",
    "r. janicki and d. t. m. l , modelling concurrency with comtraces and generalized comtraces , submitted in 2009 .",
    "available at : http://arxiv.org/abs/0907.1722    g. juhs , r. lorenz , s. mauser , causal semantics of algebraic petri nets distinguishing concurrency and synchronicity , _ fundamenta informatica _",
    "86(3 ) : 255 - 298 , 2008 .",
    "g. juhs , r. lorenz , s. mauser , synchronous + concurrent + sequential = earlier than + not later than , proc . of acsd06 , turku ,",
    "finland 2006 , pp .",
    "261 - 272 , ieee press .",
    "h. c. m. kleijn and m. koutny , process semantics of general inhibitor nets , _ information and computation _ , 190:1869 , 2004 .",
    "j. kleijn and m. koutny , formal languages and concurrent behaviour , _ studies in computational intelligence _ , 113:125 - 182 , 2008 .",
    "d. t. m. l , studies in comtrace monoids , master thesis , dept . of computing and software , mcmaster university , canada , august 2008 .",
    "a.  mazurkiewicz , concurrent program schemes and their interpretation , tr daimi pb-78 , comp .",
    "science depart .",
    ", aarhus university , 1977 .",
    "v. pratt , modeling concurrency with partial orders , _ international journal of parallel programming _",
    ", 15(1):3371 , 1986 .",
    "e.  szpilrajn , sur lextension de lordre partiel , _ fund .",
    "mathematicae _ 16 , 386389 , 1930 .",
    "p. s. thiagarajan and i. walukiewicz , an expressively complete linear time temporal logic for mazurkiewicz traces , _ inf .",
    "comput . _ 179(2 ) : 230249 , 2002 .",
    "* 1 . * ( @xmath551 ) : since @xmath207=[\\beta]$ ] , we know that @xmath552 or @xmath553 .",
    "the former case is trivial . for the latter case , by theorem  [ theo : szpstrat ]",
    ", we have @xmath554 and @xmath555 . but",
    "this implies that @xmath556 .",
    "( @xmath557 ) : the case when @xmath552 is trivial .",
    "assume that @xmath558 and @xmath556 .",
    "thus , by theorem  [ theo : szpstrat ] , @xmath559 and @xmath457 . but",
    "this means @xmath53 and @xmath70 belong to the same equivalence class .",
    "* suppose for a contradiction that all @xmath560 can not be written in the form of @xmath561v$ ] .",
    "this implies that there exists some @xmath562 $ ] such that for all @xmath560 , @xmath563 . but by theorem  [ theo : szpstrat ] , this yields @xmath564 and @xmath565 , contradicting with @xmath566 $ ] .",
    "assume @xmath207 { { \\hat{{\\sqsubset}}}^{\\mathsf{cov}\\ ; } } [ \\beta]$ ] .",
    "suppose for a contradiction that there does not exist @xmath560 such that @xmath561[\\beta]v$ ] for some step sequences @xmath65 and @xmath206 .",
    "then , by theorem  [ theo : szpstrat ] , there must exist some @xmath567\\cup[\\beta])$ ] , such that @xmath568 .",
    "since @xmath569\\cup[\\beta]$ ] , this yields @xmath207{\\sqsubset}[\\gamma ] { \\sqsubset}[\\beta]$ ] , which contradicts that @xmath207 { { \\hat{{\\sqsubset}}}^{\\mathsf{cov}\\ ; } } [ \\beta]$ ] .",
    "assume @xmath570 and @xmath558 .",
    "thus , @xmath571 .",
    "thus , by corollary  [ cor : szpstrat ] ( 2 ) , we have @xmath572 .",
    "hence , by of definition  [ def : lcomtrace ] , @xmath573 . since @xmath4 is irreflexive , this also shows that any two distinct @xmath53 and @xmath70 in @xmath251 have different labels .",
    "thus , @xmath257 for all @xmath255 .",
    "* 2 . * from the proof of * 1 . * , we know that @xmath570 and @xmath558 implies @xmath573 . thus , @xmath574 for all @xmath255 .",
    "observe that from proposition  [ prop : validss ] , we have @xmath575 .",
    "it remains to show that @xmath576 for all @xmath577 .",
    "suppose for a contradiction that @xmath578 for some @xmath577 .",
    "from the definition above , there are two distinct elements @xmath202 , such that @xmath579 and @xmath580 and @xmath581 . since @xmath5 is irreflexive , @xmath582 .",
    "thus , by of definition  [ def : lcomtrace ] , @xmath583 or @xmath584 . without loss of generality , we assume @xmath583 and that @xmath585 for some event @xmath586 .    again by of definition  [ def : lcomtrace ] , we know that elements having the same label are totally ordered by @xmath93 .",
    "thus , if @xmath587 is the number of elements in @xmath3 labeled by @xmath39 , then we have @xmath588 and @xmath589 .",
    "but then @xmath590 implies that @xmath591 , while @xmath592 implies that @xmath593 , which is absurd .",
    "let @xmath594},{\\prec}_{[u]},{\\sqsubset}_{[u]},l \\bigr)$ ] . from theorem  [ theo : com2sos ]",
    ", @xmath85 is a labeled so - structure .",
    "it only remains to show that @xmath85 satisfies conditions  of definition  [ def : lcomtrace ] .",
    ": assume @xmath207 ( { { \\hat{{\\sqsubset}}}^{\\mathsf{cov}\\;}}\\cap \\hat{{\\prec } } ) [ \\beta]$ ] and suppose for a contradiction that @xmath414)\\times \\lambda([\\beta ] ) \\subseteq ser$ ] .",
    "then from proposition  [ prop : covlsos ] ( 3 ) , there exists @xmath595 such that @xmath596[\\beta]w$ ] . from theorem  [ theo : com2sos ] , since we have @xmath597\\bigr\\ } } = ext(s_{[u]})$ ] , it follows that @xmath598[\\beta]w ) \\in [ u]$ ] . but @xmath414)\\times \\lambda([\\beta ] ) \\subseteq ser$ ] implies @xmath599\\cup [ \\beta]v ) \\in [ u]$ ] .",
    "hence , @xmath600\\cup [ \\beta]v$ ] is also a stratified extension of @xmath85 , which contradicts that @xmath207 \\hat{{\\prec } } [ \\beta]$ ] . using a similar argument",
    ", we can show using proposition  [ prop : covlsos ] ( 1,4 ) and using proposition  [ prop : covlsos ] ( 1,2 ) .      :",
    "since @xmath601 , it follows from corollary  [ cor : szpstrat ] that there exists @xmath595 where @xmath602 . since @xmath603\\bigr\\ } } = ext(s_{[u]})$ ] , there exists a sequence @xmath604 $ ] such that @xmath605 .",
    "this implies @xmath53 and @xmath70 belong to the same step in @xmath606 .",
    "thus , we have @xmath573 ."
  ],
  "abstract_text": [
    "<S> this paper defines a class of labeled stratified order structures that characterizes exactly the notion of _ _ com__bined _ traces _ </S>",
    "<S> ( i.e. , _ comtraces _ ) proposed by janicki and koutny in 1995 . </S>",
    "<S> our main technical contributions are the representation theorems showing that comtrace quotient monoid , _ combined dependency graph _ </S>",
    "<S> ( kleijn and koutny 2008 ) and our labeled stratified order structure characterization are three different and yet equivalent ways to represent comtraces . </S>",
    "<S> + * keywords . </S>",
    "<S> * causality theory of concurrency , combined traces monoids , step sequences , stratified order structures , label - preserving isomorphism . </S>"
  ]
}