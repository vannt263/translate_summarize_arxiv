{
  "article_text": [
    "modern distributed systems to control astronomical instrumentation are typically designed as service oriented architectures ( soa ) . whether implemented as `` tightly coupled '' systems based on object - oriented design , or more `` loosely coupled '' systems based on a common data model",
    ", the soa paradigm requires all parties of the distributed system to interact via shared contracts .",
    "a major drawback of these contracts is that they are often not semantically `` rich '' , i.e. they are based on syntax rather than semantics .",
    "similar to object - oriented software languages ( which can only natively convey semantics such as _ hastype _ , _ hassuperclass _ , _ hasattribute _ , ... ) they lack the expressive power to model the exchangeable information in more detail .",
    "consider the example as shown in figure  [ fig : ooproblem ] , which is based on the maia instrument .",
    "maia is a three - channel astronomical imager built for the mercator telescope and commissioned in 2013 @xcite .",
    "its control system is based on an object - oriented design , which we are trying to improve with the results of the work described in this paper . on the left side of the figure",
    ", the temperature of the u - band detector of the instrument could be accessed over the network via the pseudocode ` read(maia.cryou.ccdtempsensor.value ) ` . on the right side of the figure",
    ", two changes have been applied .",
    "firstly , the detector itself ( a ccd or charge coupled device ) is now also included in the model , and secondly the name of the temperature sensor has been changed accordingly . as a result",
    ", the pseudocode required to read the temperature is now ` read(maia.cryou.ccd.tempsensor.value ) ` .",
    "even though the system itself has not changed , the model has , because the model can only express structural properties using _ hasattribute _ relationships , and the meaning of the elements as attribute names .",
    "a more robust way to model the exchangeable information in a control system would be to express this information as a set of ontologies .",
    "an ontology formally represents the knowledge of a particular domain as a set of concepts , and relationships between pairs of those concepts . for instance , an ontology on the domain of _ electronics _",
    "( abbreviated with the prefix _ elec _ ) would define :    * a vocabulary that specifies : +  classes ( such as _ sensor _ and _ pt100 _ ) ; +  instances ( such as _ three_phase_power _ ) ; +  properties ( e.g. _ senses _ , _ powers _ , ... ) ; * facts , as relationships between pairs of vocabulary terms such as : + ",
    "_ pt100 _ is a subclass of _ sensor _ ; +  _ senses _ has _ sensor _ as its domain ; +  _ three_phase_power _ is an instance of _ power _ ; +  any _ sensor senses _ at least one _ thing_.    when applying this to the example from figure  [ fig : ooproblem ] , we can model our system using a set of ontologies , as shown in figure  [ fig : alternative ] .    , but the system is now modeled using ontologies.,width=302 ]    it is clear that in our practical example , the _ maia _",
    "ontology only defines instances , while the properties ( relations ) of the instances are defined by more general `` engineering '' ontologies such as those for electronics and systems engineering .",
    "the information exposed by the model can thus be extracted by relying on the engineering ontologies ( which describe generally known facts ) , and not on project specific ontologies .",
    "in essence , * the engineering ontologies provide a context to the application models*. when this context is shared by the applications of the distributed systen ( which could be anything ranging from a historical data server to a real - time control application ) , the integration of applications and information sources becomes much easier and much more time - proof .",
    "we choose semantic web @xcite standards to construct our ontologies , because these standards offer us sufficient expressive power to satisfy our modeling requirements , and because they are mature and come with a large set of third - party software tools .",
    "the core of semantic web technologies is the concept of _ subject - predicate - object",
    "_ triples , which describe knowledge as facts . subjects , predicates and objects can be identifiable via uniform resource identifiers ( uris ) .",
    "this simple data model is defined by the resource description framework ( rdf ) , and is extended by rdf schema ( rdf - s ) to offer the basic elements to build ontologies containing classes , type relationships , properties , etc .",
    "the web ontology language ( owl ) finally adds more expressive power to the schema , and provides the ability to specify property restrictions , cardinality constraints , inverse properties , transitive properties , etc . in the case of our maia example",
    ", we can use rdf , rdf - s and owl to specify the assertions of listing  [ lis : alternative ] .",
    ".... sys : haspart rdf : type owl : transitiveproperty sys : haspart owl : inverseof sys : partof mech : encloses rdfs : subpropertyof sys : haspart phy : hastemperature rdfs : range phy : temperature phy : senses owl : inverseof phy : issensedby ....    a `` semantic reasoner '' can use this knowledge to draw more conclusions about our system , as shown in figure  [ fig : implicit ] . effectively , it can be inferred that the temperature sensor is now also a part of maia , and that , for instance , we have the freedom to use ` phy : issensedby ` instead of ` phy : senses ` to relate a sensor with a sensed value .",
    "as stated in the previous section , in our practical use case there is a clear distinction between the _ maia _ ontology and the other , more general ontologies .",
    "we therefore discern two layers :    * the `` meta - model '' layer : ontologies that contain the knowledge about the engineering domains that are involved when designing and operating astronomical instrumentation ; * the `` model '' layer : ontologies that contain the knowledge about the concrete applications .",
    "this distinction also is apparent in the technical architecture , as shown in figure  [ fig : architecture ] .",
    "the next subsections will cover the different parts of this diagram .          in our approach ,",
    "the meta - model layer contains the ontologies that provide the classes and their relations necessary to support the model layer .",
    "besides a few project - independent instances ( such as the _ u _ spectral band in our example ) , they primarily define classes and their relations . when owl ( or rather owl 2 , the latest version of owl ) is not sufficiently expressive to model a fact , we may additionally add rules to the ontology .",
    "for instance , we could add a rule stating that `` if a _ voltage _ is below 120vdc , then it is an _ extralowvoltage _ '' .",
    "swrl , the semantic web rule language , would be a suitable choice to implement this rule since it is supported by some off - the - shelf reasoners .",
    "a rule language such as swrl comes with a number of restrictions though , most noticeably that all variables in the rule should bind only to explicitly named individuals in the ontology .",
    "since our model layer consists only of these individuals ( see next subsection ) , this is generally no objection .",
    "the meta - model ontologies can be considered `` heavy - weight ontologies '' because they define concepts and axioms that allow for complex inferences . as a result",
    ", we found the use of an ontology editor ( preferably with integrated reasoner support ) indispensable to design the meta - model layer . in our approach , we use the open source tool protg to design the ontologies , and serialize them as rdf in the extensible markup language ( rdf / xml ) .",
    "in contrast to the meta - model layer ontologies , the model layer ontologies do not define additional classes or properties .",
    "instead , they only _ use _ the classes and properties defined by the meta - models to create new instances , and new facts about these instances .",
    "for example , whereas the _ electronics _ meta - model ontology defines the _ detector _ class , the _ maia _",
    "model ontology defines three concrete instances of this class ( i.e. one ccd42-c0 device for each cryostat ) .",
    "the model layer ontologies are less heavy - weight than those of the meta - model layer , and they are developed by domain experts during the design of a particular application .",
    "therefore we found it much more convenient to derive a set of domain specific languages ( dsls ) from the meta - model layer , and use these languages as a tool for building new applications .",
    "as other control system projects have demonstrated , dsls can help to involve domain experts to build models and systems efficiently and consistently @xcite .",
    "for this purpose we have developed an internal dsl called _ ontoscript _ based on coffeescript ( a language that `` transpiles '' to javascript ) .",
    "ontoscript imports the classes , properties and individuals from meta - model ontologies so that they can be used to create new individuals and assertions about these individuals .",
    "to efficiently capture variability at the model layer level , the dsl supports parametric `` macros '' that are capable of producing similar individuals .",
    "when the meta - model and model ontologies are loaded into a so called `` triplestore '' ( a purpose - built database for the storage and retrieval of rdf triples ) , they form the knowledge base .",
    "off - the - shelf implementations are available that provide a database with integrated reasoner support and sparql - query endpoint .",
    "sparql is a recursive acronym for sparql protocol and rdf query language , and is the de - facto query language for the semantic web .",
    "the integrated reasoner will make sure that , even though only explicit knowledge is imported into the triplestore ( such as the model of figure  [ fig : alternative ] ) , any sparql client can query both the explicit and implicit knowledge ( such as the model of figure  [ fig : implicit ] ) .",
    "one of the use cases of semantic web technology is the presentation of information stored in rdf triplestores via web browsers .",
    "several frameworks exists that can query sparql endpoints and embed the results into dynamically generated web pages .",
    "template engines facilitate this task since they separate the presentation logic from the underlying business logic .",
    "they are especially useful for our purpose since not only they are capable of generating web pages , but also source code files , configuration files , csv ( comma - separated values ) files that can be imported by spreadsheet software , etc .",
    "we found versatile template engines such as mako very suitable since they allow us to embed sparql queries within the templates .",
    "an interesting application of semantic modeling in the context of system development is the formal verification of the system design .",
    "as others have shown , system verification is often the result of fairly simple reasoning @xcite .",
    "owl , and especially swrl , are in many cases expressive enough to model design requirements . in case of maia",
    ", we could define a meta - model called _ maia - requirements _ stating that all detector temperatures must be measured by a sensor and exposed by a communication middleware .",
    "a simple sparql query can verify this requirement , and can be embedded in an html ( hypertext markup language ) template to produce a web - based report .      in order to benefit from the proposed ontology - enabled architecture",
    ", the software applications must be able to interact using the same context , as provided by the meta - model ontologies .",
    "we identify two implementation scenarios :    * the context information is only available at `` compilation time '' ( i.e. when the software artifacts are generated from the knowledge base via the template system ) ; * the context information is also available at `` run time '' .    in the first case ,",
    "a change in the model layer will result in the generation of new source code artifacts .",
    "other source code or compiled software that depend in some way on these artifacts may be affected as a result .",
    "the benefit compared to a traditional model - based approach is however that the templates that generated the artifacts do _ not _ have to change , as they can construct their sparql queries primarily using meta - model terms .",
    "for example , we could define a template that generates python code to retrieve the temperature value of the maia u - band detector via opc ua communication ( object linking and embedding for process control , version unified architecture @xcite ) .",
    "based on the model of figure  [ fig : implicit ] , an excerpt from the template is shown in listing  [ lis : mako ] . in a more realistic scenario we would define helper functions to extract frequently required information such as communication middleware details .",
    "although any middleware can be modeled in our ontologies , opc ua has the advantage that it is capable of representing rdf - like triples .",
    "similar to semantic web technology , opc ua can express complex graphs with fully qualified nodes and binary relationships .    ....",
    "< % results = sparql.simplequery ( \" \" \" select ?",
    "i d where {    ?",
    "det     phy : observes             phy : u        .    ?",
    "det     phy : hastemperature       ?",
    "temp        .    ?",
    "temp    opcua : hasexpandednodeid ?",
    "nodeid      .    ?",
    "nodeid opcua : hasserveruri       ?",
    "svruri      .    ?",
    "nodeid opcua : hasnamespaceindex ?",
    "nsidx       .    ?",
    "nodeid opcua : hasidentifier      ?",
    "i d   } \" \" \" ) % > def getutemperatures ( ) :    addresses = [ ]    % for r in results :    addresses.append(address (      nodeid(${r.nsidx},\"${r.id}\"),\"${r.svruri } \" ) )    % endfor    return uaf_client.read(addresses ) ....    the second case goes one step further in the sense that the semantic information from the meta - model layer is now being used at run time .",
    "for instance , the databases that store and serve historical sensor data could be rdf triplestores with sparql endpoints instead of relational databases .",
    "however , when entering the application domain of real - time control and data acquisition , we notice that the use of semantic web technology quickly reaches its limits .",
    "the http ( hypertext transfer protocol ) communication on which it is based is generally not sufficiently efficient or deterministic for control applications .",
    "in contrast , the industrial opc ua standard does provide an efficient binary protocol , and is also capable of exposing the semantics of our meta - model and model ontologies .",
    "opc ua additionally provides services to query , browse , read , write , modify , etc .",
    "the exposed graphs , and it is readily available on industrial platforms such as programmable logic controllers ( plcs ) .",
    "having experimented with a prototype set - up of the architecture as shown in figure  [ fig : architecture ] and as applied to the maia instrument , we found a significant added value of applying ontologies to the design of distributed control systems for astronomical instrumentation . by strictly separating the ontologies that provide context from the ontologies that describe concrete applications",
    ", we expect that the produced control systems will be more evolvable .",
    "we think that , for practical reasons , this separation of concerns should be extended to the tools used to engineer the ontologies : dedicated ontology editors may be most suited to model the `` meta - model '' layer , while domain specific languages may be more suited for describing the systems itself . because the focus of our research is to semantically integrate the different applications and data sources in a distributed control system , the ontologies should primarily support the organization and exchange of information .",
    "semantic web technologies such as rdf , rdf - s , owl , swrl and sparql are specifically designed for this purpose in mind , albeit in a different field of application .",
    "when semantic technology is required at the lower levels of the control system architecture , we argue that opc ua may be a natural choice to expose the knowledge even at run time ."
  ],
  "abstract_text": [
    "<S> even though modern service - oriented and data - oriented architectures promise to deliver loosely coupled control systems , they are inherently brittle as they commonly depend on a priori agreed interfaces and data models . at the same time , the semantic web and a whole set of accompanying standards and tools are emerging , advocating ontologies as the basis for knowledge exchange . in this paper </S>",
    "<S> we aim to identify a number of key ideas from the myriad of knowledge - based practices that can readily be implemented by control systems today . </S>",
    "<S> we demonstrate with a practical example ( a three - channel imager for the mercator telescope ) how ontologies developed in the web ontology language ( owl ) can serve as a meta - model for our instrument , covering as many engineering aspects of the project as needed . </S>",
    "<S> we show how a concrete system model can be built on top of this meta - model via a set of domain specific languages ( dsls ) , supporting both formal verification and the generation of software and documentation artifacts </S>",
    "<S> . finally we reason how the available semantics can be exposed at run - time by adding a  semantic layer \" that can be browsed , queried , monitored etc . by any opc ua - enabled client . </S>"
  ]
}