{
  "article_text": [
    "the classical method of adding two integers of @xmath1-bits takes @xmath2 bit operations but the classical method of multiplying them takes @xmath3 bit operations .",
    "complexity of addition is optimal in number of bit operations , whereas optimal multiplication algorithm for integers is an open problem .",
    "the classical approach to multiply two @xmath1-bit integers requires @xmath3 bit operations .",
    "karatsuba multiplication [ 9 ] uses divide - and - conquer technique to multiply two @xmath1-bit integers in @xmath4 bit operations(logarithms are to the base 2 unless otherwise specified ) by replacing some of the multiplication by less costly addition and subtraction .",
    "toom - cook algorithm further improves the above bound [ 3 ] .",
    "toom - cook method is the generalization of karatsuba method which split each number to be multiplied in multiple parts [ 12 ] . given two large integers , toom - cook splits up multiplicand and multiplier into @xmath5 smaller parts each of length @xmath6 , and performs operations on the parts .",
    "as @xmath5 grows , one may combine many of the multiplication sub - operations , thus reducing the overall complexity of the algorithm . for @xmath7 toom - cook",
    "reduces 9 multiplication to 5 , with asymptotic complexity of @xmath8 .",
    "schonhage - strassen integer multiplication algorithm [ 10 ] uses fast fourier transform ( fft ) by selecting the principal roots of unity as evaluation point to perform multiplication in @xmath9 bit operations .",
    "fft method employs a divide - and - conquer strategy by taking advantage of the special properties of the complex root of unity to perform multiplication of two polynomials in only @xmath10 arithmetic complexity [ 4 ] .",
    "in fact many multiplication algorithms can viewed as schemes for the evaluation of polynomials then multiplication of their values and followed by interpolation .",
    "currently , the asymptotically fastest algorithm for multiplication of two @xmath1-bit integers is by furer [ 7 ] which runs in @xmath11 . where @xmath12 is iterated logarithm function [ 5 ] defined as : @xmath13 furer algorithm uses arithmetic over complex number .",
    "same asymptotic bound can also be achieved using modular arithmetic [ 6 ] .",
    "+ the schonhage - strassen algorithm and furer algorithm are asymptotically fast but they are suited for extremely large numbers .",
    "furer algorithm although asymptotically fastest , only achieves an advantage for astronomically large values and as such it is currently not used in practice .",
    "the crossover points between these algorithms are usually very high when the algorithms are implemented [ 8 ] . for small inputs",
    "even karatsuba algorithm runs slower than the classical multiplication algorithm because of recursion overhead . in this paper",
    "we use nikhilam sutra or method from vedic mathematics [ 11 ] to perform efficient multiplication for small inputs .",
    "nikhilam sutra performs large multiplication by converting it to small multiplication along with some addition and shifting operations . +",
    "this paper is organized as follows .",
    "section 2 describes background and motivation .",
    "section 3 presents our proposed work , the multiplication algorithm and its features . in section 4",
    ", we present some applications .",
    "finally , section 5 contains conclusion .",
    "the simplest method to multiply two @xmath1-digit integers is using classical or long multiplication method which requires @xmath3 multiplication operations .",
    "whereas to add or subtract two @xmath1-digit integers using traditional method requires at most @xmath1 number of addition or subtraction which is optimal in terms of number of addition / subtraction operation performed . to improve the @xmath3 bound of multiplication",
    ", several algorithms have been discovered .",
    "the simplest one is karatsuba algorithm which is based on divide - and - conquer paradigm [ 1 ] .",
    "karatsuba algorithm is based on the fact that two - digit multiplication can be done with only three instead of four multiplications required by standard method .",
    "suppose we want to multiply two @xmath14-digit decimal numbers",
    "@xmath15 :    1 .   compute @xmath16 2 .",
    "compute @xmath17 3 .",
    "compute @xmath18 4 .",
    "compute @xmath19 , here @xmath20 is equal to @xmath21 5 .",
    "result @xmath22    for large number of digits we can apply this method recursively by splitting the multiplicand and multiplier in two parts . the complexity of this method is @xmath23 . since multiplication operation is costly as compared to addition and shift",
    ", some constant number of addition and shift operations can be safely ignored . in this paper",
    "we assume that multiplicand and multiplier are having equal number of digits .",
    "+ for example suppose we want to multiply @xmath24 .",
    "the standard method of long multiplication requires 4 one - digit multiplication along with some addition and shift . using karatsuba algorithm",
    "we can compute it as follows :    1 .   compute @xmath25 2 .",
    "compute @xmath26 3 .",
    "compute @xmath27 ; @xmath28 4 .",
    "compute @xmath29 5 .",
    "result @xmath30    a schematic view of above multiplication is shown in fig .",
    "the three multiplication operations are enclosed in ellipse .",
    "in fact the total number of @xmath31-digit multiplication required in above example is 5 . note that to compute @xmath32 in step @xmath33 requires , three @xmath31-digit multiplication by applying this method one s more .",
    "using karatsuba method , width=264,height=151 ]    nikhilam sutra is one of the 16 sutras of vedic mathematics [ 11 ] .",
    "it can be used to convert large - digits multiplication to small - digits multiplication with the help of few extra add , subtract and shift operations . in some cases",
    "two - digit multiplication can be performed using only @xmath31 one - digit multiplication instead of @xmath33 one - digit multiplication as required by karatsuba algorithm .",
    "suppose we have to perform same multiplication @xmath24 using this method .",
    "we can use the nikhilam sutra as follows :    1 .   compute @xmath34 ; subtract the multiplicand from nearest base 2 .",
    "compute @xmath35 ; subtract the multiplier from the same base 3 .",
    "compute @xmath36 4 .",
    "compute @xmath37 5 .",
    "result @xmath38    in the fig .",
    "2 , we can see that there is only one multiplication operation involved .     using nikhilam method , width=264,height=151 ]    above multiplication is also shown in table 1 . in this multiplication",
    "we have used @xmath31 multiplication , @xmath31 addition , @xmath33 subtraction and @xmath31 shift operation .",
    "this particular multiplication is more efficient than both standard multiplication and karatsuba method .",
    "suppose multiplicand is @xmath39 and multiplier is @xmath40 where @xmath41 is nearest base .",
    "we have : @xmath42 the general scheme of multiplication @xmath43 is shown in table 2 .",
    ".multiplication of @xmath44 [ cols=\"^,^,^ \" , ]     correctness of the nikhilamsquaring can be easily established using induction on the bit length of the input @xmath45 .",
    "note that in each column of table 8 , the partial result is , in fact multiplication of corresponding multiplicand and multiplier in that column . +",
    "* theorem 1 . * _ nikhilamsquaring algorithm computes square of the input @xmath45 . _ + * proof * : we prove this using induction on the bit length @xmath1 of @xmath45 . for @xmath46 ,",
    "number @xmath45 has only one bit and @xmath47 when @xmath45 is @xmath31 and @xmath48 when @xmath45 is @xmath49 .",
    "therefore it works for @xmath46 .",
    "assume it is true for @xmath50 .",
    "now we show it for @xmath5 .",
    "assume @xmath51 , therefore @xmath52 .",
    "+ case 1 : if @xmath5th bit is @xmath31 then @xmath53 , and the processing of @xmath5th step is @xmath54 also we have @xmath55 and therefore @xmath56 @xmath57 and hence @xmath58 , and the statement of theorem follows .",
    "+ case 2 : if @xmath5th bit is @xmath49 , then the statement is trivial and @xmath59 , and theorem is proved .",
    "+ nikhilammultiplication is described in algorithm 2 .",
    "it takes two binary numbers @xmath45 and @xmath60 as input and compute their multiplication@xmath61 as output .",
    "it performs two calls to nikhilamsquaring algorithm and using that , outputs the desired result .",
    "nikhilammultiplication uses only @xmath31 multiplication , @xmath31 division and @xmath62 add / subtract and shift operations for some constant @xmath63 . to show",
    "the correctness of nikhilammultiplication is trivial given the correctness of nikhilamsquaring .",
    "+    * input * : @xmath64 * output * : @xmath65 @xmath66 * nikhilamsquaring * @xmath67 @xmath68 * nikhilamsquaring * @xmath69 @xmath70    * theorem 2 . *",
    "_ nikhilammultiplication algorithm computes the product of @xmath45 and @xmath60 . _ + * proof * : the statement of the above theorem follows from theorem 1 and the fact that : @xmath71 +",
    "since , asymptotically fast multiplication algorithms like schonhage - strassen and furer algorithms are only useful for extremely large numbers , for small to medium size numbers we can apply nikhilam multiplication .",
    "we can use nikhilam multiplication even in conjunction with some other fast algorithm like karatsuba . if @xmath72 is the threshold between classical multiplication and karatsuba algorithm then up to threshold limit @xmath72 we can use nikhilam multiply and beyond that limit we can use karatsuba multiply .",
    "we can write the karatsuba algorithm as given in [ 2 ] , with the only modification that if @xmath73 nikhilammultiplication is called .",
    "the corresponding pseudo code is given in algorithm 3 .",
    "karatsuba multiplication has relatively small threshold with the classical multiplication . the optimal threshold for karatsuba algorithm can vary from about ten to hundred words .",
    "nikhilammultiplication can also be used as a stand alone multiplication algorithm . + further optimization to nikhilammultiplication is also possible .",
    "least significant @xmath49 s can be truncated from input numbers , and in the end corresponding modification can be done in single operation .",
    "we can process the multiplicand and multiplier for consecutive @xmath49 s to skip some of the steps of the algorithm .",
    "the proposed algorithm is particularly efficient because multiplication operation is least involved in it .",
    "* input * : @xmath64 * output * : @xmath65 * nikhilammultiplication * @xmath74 @xmath75 @xmath76 mod @xmath77 div @xmath78 @xmath79 sign@xmath80 , @xmath81 sign@xmath82 @xmath83 * karatsubamultiplication * @xmath84 @xmath85 * karatsubamultiplication * @xmath86 @xmath87 * karatsubamultiplication * @xmath88 @xmath89",
    "in this paper we have explored the possibility of applying the nikhilam sutra of vedic mathematics to binary number multiplication .",
    "we can take advantage of the fact that this sutra can convert large - digit multiplication to corresponding small digit multiplication .",
    "nikhilam method is particularly efficient when both multiplicand and multiplier are near to some base ( radix ) power . to take this advantage ,",
    "we have first performed square operation in nikhilamsquaring and then we have used this to finally compute multiplication . future work can be to extend this method to large - digit multiplication and exploit it s properties to perform fast integer multiplications ."
  ],
  "abstract_text": [
    "<S> multiplication is one of the most important operation in computer arithmetic . </S>",
    "<S> many integer operations such as squaring , division and computing reciprocal require same order of time as multiplication whereas some other operations such as computing gcd and residue operation require at most a factor of @xmath0 time more than multiplication . we propose an integer multiplication algorithm using nikhilam method of vedic mathematics which can be used to multiply two binary numbers efficiently .    </S>",
    "<S> integer multiplication , algorithm , computer arithmetic , vedic mathematics , computation </S>"
  ]
}