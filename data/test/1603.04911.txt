{
  "article_text": [
    "one of the main issues in multi - obstacle , multi - agent environments is the collision avoidance assessment .",
    "usually the avoidance constraints have to be considered both between an agent and fixed obstacles and between any two agents .",
    "the problem is intensively studied , yet actual , in the literature but is usually tilted towards heuristic approaches or online validations .",
    "the first usually lacks stability and performances guarantees and the later is easily boggled into numerical issues @xcite .",
    "an alternative approach is to solve offline the difficult trajectory generation part of the overall problem , online only a straightforward trajectory tracking is employed .",
    "this reduces significantly the online computations and allows stability and performance analysis .",
    "the caveat is that the trajectory to be computed has to respect the dynamics of the agent and to validate the collision avoidance constraints at all times @xcite .",
    "an interesting implementation is represented by flat trajectory design which guarantees that the corresponding system dynamics are respected ( with the caveat that state and input constraints are not easily accounted for @xcite ) . this construction shifts the state and input constraints into constraints over the flat output . to handle this ,",
    "usually , the flat output is project over some basis functions which means that only the coefficients of the projections need to be found . in this sense",
    ", b - spline functions represent an ideal choice since they have enough flexibility @xcite and nice theoretical properties ( of which we will make extensive use throughout the paper ) .",
    "the present work builds on results sketched in @xcite and further advances the topic in several directions .",
    "foremost , we provide exact and sub - optimal formulations of the collision avoidance problems between an agent and the obstacles and between any tho agents . in both cases",
    "we make use of the geometrical properties of the b - spline functions which allow to bound locally the trajectories obtained through them .",
    "hence , the collision problems become separation problems between sets of consecutive points . in the exact case ,",
    "these constraints lead to nonlinear formulation where both the control points and the separation hyperplanes are variables . a simplified ( and hence sub - optimal approach )",
    "is to select the separation hyperplanes from the support hyperplanes of the obstacles therefore reducing the problem to a mixed integer formulation .",
    "both methods make use of a multi - obstacole framework and are tested and compared over extensive simulations .",
    "the rest of the paper is organized as follows : tackles flat output and b - spline characterizations , discusses flat trajectory generation and presents the main results of the paper which are then illustrated in . draws the conclusions .",
    "the minkowski sum of two sets , @xmath0 and @xmath1 is denoted as @xmath2 .",
    "@xmath3 denotes the convex hull of set generated by the collection of points @xmath4 .",
    "the problem of designing reference trajectories in a multi - agent multi - obstacle environment is in general a difficult one .",
    "a popular approach is to parametrize them through flatness constructions @xcite . in this section",
    "we will describe some of the basics of flat trajectory and their parametrization via b - spline basis functions .",
    "a nonlinear time invariant system : [ eq : contsys ] ( t)=f(x(t),u(t ) ) , where @xmath5 is the state vector and @xmath6 is the input vector is called differentially flat if there exists the flat output @xmath7 : [ eq : flat_out ] z(t)=(x(t),u(t),(t ) , , u^(q)(t ) ) such that the states and inputs can be algebraically expressed in terms of @xmath8 and a finite number of its higher - order derivatives : [ eq : diff_a ] x(t)&=&(z(t),(t ) , , z^(q)(t ) ) , + u(t)&=&(z(t),(t),,z^(q)(t ) ) .",
    "[ rem : flatinput ] for any system admitting a flat description , the number of flat outputs equals the number of inputs @xcite . in the case of linear systems",
    "@xcite the flat differentiability ( existence and constructive forms ) is implied by the controllability property .    within the multi - agent framework ,",
    "the most important aspect of construction  is that it reduces the problem of trajectory generation to finding an adequate flat output .",
    "this means choosing @xmath8 such that , via mappings @xmath9 , various constraints on state and inputs are verified .",
    "since the flat output may be difficult to compute under these restrictions , we parametrize @xmath8 using a set of smooth basis functions @xmath10 : [ eq : paramflat ] z(t)=_i=1^n_i ^i(t ) ,   _ i .",
    "parameter @xmath11 depends on the number of constraints imposed onto the dynamics @xcite .",
    "there are multiple choices for the basis functions @xmath10 . among these ,",
    "_ b - spline _ basis functions are well - suited to flatness parametrization due to their ease of enforcing continuity and because their degree depends only up to which derivative is needed to ensure continuity @xcite .",
    "a b - spline of order @xmath12 is characterized by a _ knot - vector _ @xcite [ eq : knot_vector ] t=\\{_0,_1  _m } , of non - decreasing time instants ( @xmath13 ) which parametrizes the associated basis functions @xmath14 : @xmath15 for @xmath16 and @xmath17 .",
    "considering a collection of _ control points _ [ eq : control_points ] p=\\{p_0,p_1  p_n } , we define a _ b - spline curve _ as a linear combination of the control points and the b - spline functions  [ eq : bspline_curve ] z(t)=_i=0^n b_i , d(t)p_i = pb_d(t ) where @xmath18 and @xmath19 . this construction yields several interesting properties",
    "@xcite :    1 .",
    "[ p:1 ] @xmath8 is @xmath20 in any @xmath21 and @xmath22 in any @xmath23 ; 2 .",
    "[ p:3 ] at a time instant @xmath24 , @xmath8 depends only on the b - splines @xmath25 ; consequently , the b - spline curve @xmath8 lies within the union of all convex hulls formed by all @xmath12 successive control points ; 3 .",
    "[ p:5 ] the ` r ' order derivatives of b - spline basis functions can be expressed as linear combinations of b - splines of lower order ( @xmath26 with matrices @xmath27 of appropriate dimensions and content ) ; 4 .",
    "taking the first and last @xmath12 knot elements equal ( @xmath28 and @xmath29 ) leads to a _ clamped b - spline curve _ where the first and last control points coincide with the curve s end points .",
    "let us consider for exemplification the b - spline basis functions defined by parameters @xmath30 and @xmath31 with the knot vector of length @xmath32 and with components equally sampled between @xmath33 and @xmath34 . using these elements we construct the b - spline curve which we depict in .",
    "note that the convex - hulls determined by all @xmath31 consecutive control points ( property  [ p:3 ] ) contain the curve : z(t)_i=3  5\\{p_i-3,p_i-2,p_i-1,p_i } , t. in particular , the patterned shape depicted in the figure denotes region @xmath35 which contains the curve @xmath8 for any @xmath36 $ ] .",
    "let us consider a collection of @xmath37 way - points and the time stamps associated to them : [ eq : wt ] w=\\{w_s } t_w=\\{t_s } , for any @xmath38 .",
    "the goal is to construct a flat trajectory which passes through each way - point @xmath39 at the time instant @xmath40 ( or through a predefined neighborhood of it @xcite ) , i.e. , to find a flat output @xmath8 such that [ eq : xconstr ] x(t_s)=(z(t_s),  z^(r)(t_s))=w_s , s=0  n .",
    "[ rem : waypoints ] note that here we assume that the way - points are defined over the entire state .",
    "arguably there might be situations where only a subspace of the state is of interest ( e.g. , only the position components of the state ) .    making use of the b - spline framework we provide a vector of control points and its associated knot - vector such that is verified (",
    "parameter @xmath12 is chosen such that continuity constraints are respected ) : [ eq : flatconstraints ] ( b_d(t_s),p)=w_s , s=0 ",
    "n , where @xmath41 is constructed along property  [ p:5 ] .    let us assume that the knot - vector is fixed ( @xmath42 , @xmath43 and the intermediary points @xmath44 are equally distributed along these extremes ) .",
    "then , we can write an optimization problem with control points @xmath45 as decision variables whose goal is to minimize a cost @xmath46 along the time interval @xmath47 $ ] : [ eq : flatcost ]    p=&_p _ t_0^t_n||(b_d(t),p)||_qdt + &    with @xmath48 a positive symmetric matrix . the cost @xmath49 can impose any penalization we deem necessary ( length of the trajectory , input variation , input magnitude , etc ) .",
    "in general , such a problem is nonlinear ( due to mappings @xmath50 and @xmath51 ) and hence difficult to solve .",
    "a nonlinear mpc iterative approach has been extensively studied @xcite .    with these tools at hand",
    "we can propose various methods for collision avoidance in a multi - agent multi - obstacle environment .",
    "let us consider a collection of polyhedral obstacles [ eq : obstacles ] o=\\{o_1  o_n_o } and assume that the k - th agent follows a trajectory @xmath52 during the interval @xmath53 $ ] , generated as in through a collection of control points @xmath54 and the associated knot vector @xmath55 .",
    "consequently , the collision avoidance conditions mentioned earlier can be formulated as follows :    1 .",
    "collision avoidance between the k - th agent and l - th obstacle : [ eq : real_avoidance_ao ] r_k(t)o_l , t , 2 .",
    "collision avoidance between the @xmath56-th and @xmath57-th agents ( for any @xmath58 : [ eq : real_avoidance_aa ] r_k_1(t)r_k_2(t ) , t.      the distinctive feature of conditions  is that they require a continuous time interval ( @xmath47 $ ] ) validation ( i.e. , imposing constraints at discrete time instants @xmath59 along the interval is not deemed sufficient ) .",
    "consequently , we make use of property property  [ p:3 ] which allows to bound the continuous b - spline parametrized curve by its control points .",
    "coupling this with the _ separating hyperplane theorem _",
    "( a well - known construction @xcite which states that for any two disjoint convex objects there exists a separating hyperplane ) several results are attainable .",
    "first , we provide a slight reformulation of proposition 1 from @xcite .",
    "[ prop : avoid ] the k - th agent is guaranteed to avoid obstacles , i.e. , to verify , if there @xmath60 s.t .",
    "[ eq : avoidance ] _",
    "j\\{i - d+1 ",
    "i}(c_il^k)^p_j^k_x^-1(o_l ) ( c_il^k)^x , for @xmath61 and @xmath62 .",
    "condition states that there exists a hyperplane defined by its normal @xmath63 which separates the points @xmath64 from the obstacle @xmath65 . since",
    ", according to property  [ p:3 ] , the curve is contained in @xmath66 it follows that is a sufficient condition to verify .    in note",
    "the use of mapping @xmath67 .",
    "this appears because the obstacle avoidance constraint is the state - space whereas is in the control point space .",
    "a similar reasoning is employed for the inter - agent collision condition .",
    "[ prop : avoid_inter ] the pair ( @xmath68 ) of agents , with @xmath69 , is guaranteed to avoid collision , i.e. , to validate , if there @xmath70 s.t . : [ eq : avoid_inter ] _",
    "i_2}(c_i_1i_2^k_1k_2)^p_j^k_2 , for all possible pairs @xmath71 which validate [ eq : intersection_aa_indices ] \\{(i_1,i_2 ) : [ _ i_1^k_1,_i_1 + 1^k_1]}.    recall that ( as per property  [ p:3 ] ) a region @xmath72 contains the b - spline curve in the time interval @xmath73 $ ] . applying this to the agents @xmath56 and @xmath57 means that all regions corresponding to indices should not intersect as they contain overlapping time instants .",
    "the separation is enforced by which is a sufficient condition for .",
    "[ rem : avoid_simpl ] eq . can be avoided altogether if the b - spline parametrizations share the same knot vector ( i.e. , @xmath74 ) .",
    "in such a case , variable @xmath75 becomes @xmath76 and condition is simplified to [ eq : avoid_inter2 ] _ j\\{i - d+1  i}(c_i^k_1k_2)^p_j^k_1_j\\{i - d+1  i}(c_i^k_1k_2)^p_j^k_2 , for all @xmath77 .",
    "verifying ( or ) is difficult in practice due to the presence of bi - linear terms ( e.g. , in both @xmath78 and @xmath79 are variables ) .",
    "hereafter we propose a simpler ( and hence sub - optimal ) implementation .",
    "the main idea is that instead of letting the separating hyperplane from or  [ prop : avoid_inter ] be itself a variable , we choose from within a predefined pool of hyperplanes .",
    "a natural choice is to select from the support hyperplanes of the obstacles . by definition ,",
    "such a hyperplane contains on one side the obstacle and hence , it remains only to check whether the control points lie on the opposite side .",
    "the selection of the active hyperplane is done through decision variables ( i.e. , binary variables ) which leads to a mixed - integer pseudo - linear formulation .    to generate the collection of hyperplanes , we consider the polyhedral sets bounding is a polyhedral set as well . in general this",
    "might not hold , but in that case a polyhedral approximation can be obtained . ] @xmath80 and take the support hyperplanes which characterize them : [ eq : hyp ] h_m=\\{x : h_m^x = k_m } , m=1  m .",
    "each of these hyperplanes partitions the space in two `` half - spaces '' : @xmath81 taking into account all possible combinations of half - spaces leads to a hyperplane arrangement which divides the space into a collection of disjoint cells which are completely characterized by sign tuples @xcite : [ eq : hyparr ] h= _ a()= _ ( _ m=1^m h_m^(m ) ) where @xmath82 denotes the collection of all feasible ( corresponding to non - empty regions @xmath83 ) sign tuples .",
    "each of these tuples can be allocated to either    1 .",
    "the admissible domain @xmath84 : [ eq : sigma_adm ] ^=\\ { : a()o = } , 2 .   or the interdicted domain @xmath85 : [ eq : sigma_int ] ^=\\ { : a()o } ,    where @xmath86 and @xmath87 . with these elements we can provide the following corollaries .",
    "[ cor : avoid ] for an obstacle @xmath88 with @xmath89 , a sufficient condition to guarantee corresponds a single sign tuple . ] is : @xmath90 for @xmath91 .",
    "taking in he binary variable ` @xmath92 ' means that the i - th region @xmath93 of the k - th agent sits on the opposite side of the obstacle @xmath88 with respect to the the m - th hyperplane .",
    "the converse , taking ` @xmath94 ' means that inequality is discarded since the right hand term is sufficiently large to ignore the values on the left side ( assuming that ` @xmath95 ' was taken as a sufficiently large positive constant ) .",
    "condition forces that for any consecutive @xmath96 points at least one of the inequalities is enforced since at least one of the variables @xmath97 has to be zero .",
    "furthermore , we relax ( in addition to the simplification proposed in ) into the following corollary .",
    "[ cor : avoid_inter ] the pair ( @xmath68 ) of agents , with @xmath69 , is guaranteed to avoid collision , i.e. , to validate , if : @xmath98 for @xmath91 .",
    "the binary variables @xmath99 denote whether the i - th regions @xmath100 and @xmath101 are separated through the m - th hyperplane ( whenever @xmath102 the inequality is enforced and otherwise is discarded ) .",
    "assures that at least one of the hyperplanes is active .",
    "several remarks are in order",
    ".    considers a simultaneous computation of trajectories .",
    "an alternative is to compute them iteratively such that from the point of view of the current agent the obstacles to be avoided at @xmath103 $ ] become : oo(_l < k\\{p_i - d+1^l  p_i^l } ) where besides the obstacles , the i - th regions @xmath104 of the previous agents ( with index @xmath105 and whose trajectories are hence already computed ) are also considered as obstacles .",
    "an agent may have a safety region around it ( i.e. , because the agent can not be reduced to a point or due to the presence of disturbances in the dynamics ) .",
    "whatever the reason , and the modality to obtain it , a safety region @xmath106 can be attached to the k - th agent .",
    "consequently , the collision avoidance constraints  become : [ eq : real_avoidance_ao2 ] \\{r_k(t)}s_ko_l , t , and [ eq : real_avoidance_aa2 ] \\{r_k_1(t)}s_k_1\\{r_k_2(t)}s_k_2 , t. the previous results can be easily adapted to constraints  by enlarging the obstacles ( @xmath107 ) and by requiring a larger inter - distance between agents respectively ( @xmath108 ) .",
    "lastly , it is worth mentioning that in all previous propositions and corollaries there is no guarantee of feasibility for the optimization problems .",
    "the solution is to incrementally increase the number of variables ( i.e. , the control points ) until a feasible solution is reached .",
    "we revisit the test case from @xcite .",
    "a 2d 3-dof model of an airplane in which the autopilot forces coordinated turns ( zero side - slip ) at a fixed altitude : [ eq : modeln ]    ( t)&=v_(t ) ( t ) , + ( t)&=v_(t ) ( t ) , + ( t)&=    the state variables are represented by the position @xmath109 and the heading ( yaw ) angle @xmath110 $ ] rad .",
    "the input signals are the airspeed velocity @xmath111 and the bank ( roll ) angle @xmath112 , respectively .",
    "we take as flat output the position components of the state , @xmath113 which permits to compute the remaining variables : @xmath114 note that in the heading component of the state appear 1st order and in the roll angle input appear 2nd order derivatives of the flat outputs . hence",
    ", if we wish to have smooth state and input ( their derivatives to be continuous ) it follows that the b - spline parametrization has to have at least degree @xmath31 .",
    "further , we consider way - points which fix only the position components of the state and time - stamps at which the trajectory has to pass through them .",
    "thus we manage to skirt some of the thornier numerical aspects : the dependence between the b - spline basis functions and the position components is linear ( @xmath115 ) , and hence the cost and constraints will be easily written .",
    "we take as cost to be minimized the length of the curve since we would like to have the shortest path which respects the constraints , i.e. , @xmath116 .",
    "this translates into the integral cost :    & _",
    "t_0^t_n ||z(t)||dt=_t_0^t_n ||p m_1b_d-1(t)||dt + & = _ i , j([p m_1]_i)^t(_t_0^t_nb_i , d-1(t)b_j ,",
    "d-1(t)dt)[p m_1]_j    where matrix @xmath117 links @xmath118 and @xmath119 as in property property  [ p:5 ] and @xmath120_i$ ] extracts the i - th column from the argument .",
    "since the inner integrals can be computed numerically , we have now a quadratic formulation of the cost and we can use it for the various constructions from , see also @xcite for a similar treatment of cost computations .    for illustration purposes we consider @xmath121 hyperplanes : h= -0.5931 & 0.8051 + 0.1814 & 0.9834 + -0.0044 & 1.0000 + -0.1323 & 0.9912 + -0.7011 & -0.7131 + 0.8152 & -0.5792 + 0.4352 & 0.9003 + 1.0000 & -0.0075 + -0.5961 & -0.8029 , h= 4.2239 + 0.1719 + 0.9975 + 0.2728 + 3.6785 + 0.0317 + 1.6598 + 4.5790 + 1.0280 which lead to a hyperplane arrangement where the interdicted tuples @xmath122 correspond to three obstacles .",
    "further , we take three way - points ( initial , intermediary and final ) though which the trajectory has to pass at predefined times : w=\\{-9 + -0.5 , 0 + 1.5 , 6 + 0 } , t_w=\\{0 , 5 , 10}.     +    we compute a flat trajectory ( parametrized by @xmath123 and @xmath124 ) which passes through the given way - points , minimizes the total path - length and respects one of the following scenarios : i ) without any collision avoidance restriction ; ii ) with collision avoidance as in ; iii ) with collision avoidance as in .",
    "the obstacles , their support hyperplanes and the resulting trajectories are depicted in .    scenarios ii ) and iii ) both accomplish the task of avoiding the obstacles with comparable computation times and path lengths . figures [ fig : avoid_b ] and [ fig : avoid_c ] show details of the collision avoidance . in both cases",
    "the 1st and 3rd convex regions are considered ( @xmath125 and @xmath126 ) together with their separating hyperplanes . in these hyperplanes",
    "are the 1st and respectively 3rd support hyperplane whereas in the separating hyperplanes are the result of the optimization problem and are @xmath127 , @xmath128 .",
    "as mentioned earlier , the result of the optimization problem ( computation time , total length of the trajectory ) depends heavily on the number of control points @xmath129 and degree @xmath12 .",
    "we illustrate these evolutions in .",
    "several remarks are in order .",
    "first , it seems that after an initial decrease in the path length the future reductions are negligible and at a significant computation time for the mixed - integer method .",
    "next , and somewhat surprising , is that the non - linear method is extremely sensitive to parameter variations ( number of control points , degree , positioning and number of the way - points , etc ) such that the results obtained are not trustworthy .",
    "the one advantage of the latter over the former is that it may provide a feasible solution for small values of @xmath130 .",
    ".evolution of trajectories characteristics for degree @xmath31 in the non - linear and mixed - integer formulations .",
    "[ cols=\"<,^,^,^,^,^\",options=\"header \" , ]     the collision avoidance between two agents is similar and not depicted here .",
    "all the numerical simulations have been done using yalmip @xcite and mpt toolboxes @xcite in matlab 2013a .",
    "the nonlinear solver used was the ipopt solver @xcite .",
    "this paper considers collision avoidance in a multi - agent multi - obstacle framework . using differential flatness for trajectory generation and b - splines for the flat output parametrization",
    "we show that the restriction can be validated at all times .",
    "exact and sub - optimal constructions are provided .",
    "future work may consist in analysis of the feasibility of the problem , relaxation of way - point restrictions ( similar with work done in @xcite ) , etc .",
    "this work was supported by a grant of the romanian national authority for scientific research and innovation , cncs ",
    "uefiscdi , project number pn - ii - ru - te-2014 - 4 - 2713 .",
    "m.  burger and k.  pettersen , `` smooth transitions between trajectory tracking and path following for single vehicles and formations , '' in _ estimation and control of networked systems _ , 2010 , pp",
    ". 115120 .",
    "a.  aguiar and j.  hespanha , `` trajectory - tracking and path - following of underactuated autonomous vehicles with parametric modeling uncertainty , '' _ ieee transactions on automatic control _ ,",
    "52 , no .  8 , pp . 13621379 , 2007 .",
    "i.  prodan , s.  bencatel , r.and  olaru , j.  sousa , c.  stoica , and s .-",
    "niculescu , `` receding horizon flight control for trajectory tracking of autonomous aerial vehicles , '' _ control engineering practice _ ,",
    "21 , no .",
    "10 , pp . 13341349 , 2013 .",
    "j.  de  don , f.  suryawan , m.  seron , and j.  lvine , `` a flatness - based iterative method for reference trajectory generation in constrained nmpc , '' in _ nonlinear model predictive control_.1em plus 0.5em minus 0.4emspringer , 2009 , pp .",
    "325333 .",
    "f.  suryawan , j.  de  dona , and m.  seron , `` methods for trajectory generation in a magnetic - levitation system under constraints , '' in _",
    "18th mediterranean conference on control and automation _ , 2010 , pp .",
    "945950 .",
    "f.  suryawan , `` constrained trajectory generation and fault tolerant control based on differential flatness and b - splines , '' ph.d .",
    "dissertation , school of electrical engineering and computer science , the university of newcastle , australia , 2012 .",
    "m.  fliess , j.  lvine , p.  martin , and p.  rouchon , `` flatness and defect of non - linear systems : introductory theory and examples , '' _ international journal of control _ , vol .",
    "61 , no .  6 , pp .",
    "13271361 , 1995 .",
    "f.  stoican , i.  prodan , and d.  popescu , `` flat trajectory generation for way - points relaxations and obstacle avoidance , '' in _ control and automation ( med ) , 2015 23th mediterranean conference on_.1em plus 0.5em minus 0.4emieee , 2015 , pp .",
    "695700 .",
    "a.  wachter and l.  t. biegler , `` on the implementation of a primal - dual interior point filter line search algorithm for large - scale nonlinear programming , '' _ mathematical programming _ ,",
    "106 , no .  1 ,",
    "2557 , 2006 ."
  ],
  "abstract_text": [
    "<S> this paper considers the collision avoidance problem in a multi - agent multi - obstacle framework . </S>",
    "<S> the originality in solving this intensively studied problem resides in the proposed geometrical view combined with differential flatness for trajectory generation and b - splines for the flat output parametrization . using some important properties of these theoretical tools </S>",
    "<S> we show that the constraints can be validated at all times . </S>",
    "<S> exact and sub - optimal constructions of the collision avoidance optimization problem are provided . </S>",
    "<S> the results are validated through extensive simulations over standard autonomous aerial vehicle dynamics .    </S>",
    "<S> obstacle avoidance , flat trajectory , b - spline basis , mip ( mixed - integer programming ) , uav ( unmanned aerial vehicle ) . </S>"
  ]
}