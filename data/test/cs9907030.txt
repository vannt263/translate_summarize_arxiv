{
  "article_text": [
    "a _ quadtree _ @xcite is a data structure formed by starting from a single square , and recursively dividing squares into four smaller squares . in this paper",
    "we consider problems of coloring quadtree squares so that no two neighboring squares have the same color .",
    "this quadtree coloring problem was introduced by benantar et al @xcite , motivated by problems of scheduling parallel computations on quadtree - structured finite element meshes .",
    "there are several variants of the problem depending on the details of its definition .",
    "quadtrees may be _ balanced _",
    "( i.e. squares sharing an edge may be required to be within a factor of two of each other in size ) or _",
    "unbalanced_. balanced quadtrees are typically used in finite element meshes , but other applications may give rise to unbalanced quadtrees .",
    "further , squares may be defined to be neighboring if they share a portion of an edge ( _ edge adjacency _ ) , or if they share any vertex or portion of an edge ( _ vertex adjacency _ ) .",
    "we can thus distinguish four variants of the problem : balanced with edge adjacency , unbalanced with edge adjacency , balanced with corner adjacency , and unbalanced with corner adjacency .",
    "( other balance conditions may also be used , but we do not concern ourselves with them here . )    since quadtrees are planar , the four - color theorem for planar maps implies that edge - adjacent quadtrees require at most four colors , regardless of balance .",
    "benantar et al .",
    "showed that with corner adjacency , balanced quadtrees require at most six colors @xcite and unbalanced quadtrees require at most eight colors @xcite .",
    "benantar et al also suggest that four colors may suffice , even for corner adjacency @xcite .    here ,",
    "we tighten the upper bounds above , and show that balanced edge - adjacent quadtrees require only three colors while even unbalanced corner - adjacent quadtrees can be six - colored .",
    "we provide simple linear time algorithms that color quadtrees within these bounds , and that four - color edge - adjacent unbalanced quadtrees .",
    "we also provide lower bound examples showing that three colors are necessary for balanced edge adjacency , four colors are necessary for unbalanced edge adjacency , and at least five colors are necessary for balanced corner adjacency , refuting the suggested four - color bound of benantar et  al .",
    "@xmath0    [ three ] any balanced quadtree can be colored with three colors so that no two squares sharing an edge have the same color .",
    "imagine constructing the quadtree bottom - up , by starting with a regular grid of squares and then consolidating quadruples of squares of one size to make squares of the next larger size .",
    "we color the initial grid by a regular pattern of three colors , depicted in figure  [ grid](a ) .",
    "then , when we consolidate four squares of one size to make squares of the next larger size , each larger square has only two colors among its smaller neighbors ( figure  [ grid](b ) ) , forcing it to take the third color .",
    "connected sets of larger squares then end up colored by the same regular pattern used to color the smaller grid , so we can repeat this process of consolidation and coloring within each such set .",
    "we note that this process gives each square a color depending only on its size and position within the quadtree , and not depending on what subdivisions have occurred elsewhere in the quadtree .",
    "this coloring can be determined easily from the color the square s parent would be given by the same process , so the coloring algorithm can be performed top - down in linear time .",
    "@xmath1    by the four - color theorem for planar maps , any unbalanced quadtree can be colored with four colors so that no two squares sharing an edge have the same color .",
    "such a coloring is not difficult to find :    [ four ] any unbalanced quadtree can be colored in linear time with four colors so that no two squares sharing an edge have the same color .",
    "we form the desired quadtree by splitting squares one at a time ; at each step we split the largest square possible .",
    "thus the four smaller squares formed by each split are , at the time of the split , among the smallest squares in the quadtree . as we perform this splitting process",
    ", we maintain a valid four - coloring of the quadtree .    when we split a square , we color the four resulting smaller squares .",
    "we give the upper right and lower left squares the same color as their parent .",
    "each of the other two squares has at most four neighbors , two of which are the same color .",
    "therefore each has at most three neighboring colors , and at least one color remains available ; we give each of these two squares one of the available colors .",
    "as we now show , four colors may sometimes be necessary .",
    "there is an unbalanced quadtree requiring four colors for all colorings in which no two squares sharing an edge have the same color .",
    "an unbalanced quadtree is depicted in figure  [ unbal-4x ] , with some of its squares labeled .",
    "a simple case argument shows that it has no three - coloring : suppose for a contradiction that we are attempting to color it red , blue , and green .",
    "since squares @xmath2 , @xmath3 , and @xmath4 are mutually adjacent , we may assume without loss of generality that they are colored red , blue , and green respectively . since @xmath5 is adjacent to @xmath2 and @xmath4 , it must be blue , and since @xmath6 is adjacent to @xmath3 and @xmath4 , it must be red .",
    "since @xmath7 is adjacent to @xmath5 and @xmath6 , it must be green .",
    "but then @xmath8 is adjacent to a red square ( @xmath6 ) , a green square ( @xmath7 ) , and a blue square ( @xmath3 ) , so it can not be given any of the three colors .",
    "thus , four colors are required to color this quadtree .",
    "@xmath9    @xmath10    @xmath11    there is a balanced quadtree requiring five colors for all colorings in which no two squares sharing an edge or a corner have the same color .",
    "a balanced quadtree is depicted in figure  [ bal-5x ] .",
    "a simple case argument shows that it has no four - coloring : choose four different colors for the four squares @xmath12 , @xmath13 , @xmath14 , and @xmath15 meeting in the center vertex .",
    "then , choose a color for one of the diagonal neighbors , @xmath16 and @xmath17 , of the two small center squares .",
    "now repeatedly apply the following two coloring rules :    1 .",
    "if some square @xmath18 has three differently colored neighbors , assign the remaining fourth color to  @xmath18 .",
    "2 .   if some square @xmath18 has a corner shared by three other squares , each of which is adjacent to squares of some color @xmath19 , assign color @xmath19 to @xmath18 since no other choice leaves enough free colors to the other squares sharing the corner .",
    "figures [ 4color1 ] and  [ 4color2 ] show the results of a partial application of these rules , for two choices of color for @xmath16 .",
    "the third possible choice is symmetric with figure  [ 4color2 ] .",
    "no matter what color is chosen for @xmath16 , these rules lead to an inconsistency at @xmath17 : rule 2 applies in two different ways , forcing @xmath17 to have two different colors .",
    "therefore the overall quadtree can not be colored .",
    "[ six ] any balanced or unbalanced quadtree can be colored in linear time with six colors so that no two squares sharing an edge or a corner have the same color .",
    "we form the adjacency graph of the squares in the quadtree , and apply the _ greedy algorithm _ : remove a minimum degree vertex from the graph , color recursively , then add back the removed vertex and give it a color different from its neighbors .",
    "if the maximum degree of a vertex removed at any step is @xmath20 , this uses at most @xmath21 colors . we can find the minimum degree vertex by maintaining for each @xmath22 a doubly linked lists of the vertices currently having degree @xmath23 ; as we show below , at least one list will be nonempty , and it is straightforward to update these lists in constant time per step .",
    "therefore , the overall time will be linear .",
    "our bound of six colors then follows from the following lemma .",
    "let @xmath24 be a subset of the squares in a ( not - necessarily balanced ) quadtree .",
    "define a _ big box _ to be a square that is not the smallest in @xmath24 , that has at most five neighbors which are also not the smallest in @xmath24 ( figure  [ configs](a ) ) .",
    "define a _ hanging box _ to be a square @xmath18 that is not the smallest in @xmath24 , that has at most three neighbors incident to the upper left corner , and at most two below or to the right ; the below - right neighbors must also not be the smallest in @xmath24 ( figure  [ configs](b ) ) .",
    "define a _ good chain _ to be a set of one or more squares all the smallest in @xmath24 , with the following properties ( figure  [ configs](c ) ) : each square in the chain must have at most one neighbor below it ; except for the bottommost square in the chain , this neighbor must be another square in the chain , adjacent at the bottom left corner .",
    "the bottommost square in the chain can be adjacent to a square @xmath18 below it and outside the chain , but only if @xmath18 is larger than the squares in the chain .",
    "similarly , each square in the chain must have at most one neighbor to the right of it ; except for the topmost square in the chain , this neighbor must be another square in the chain , adjacent at the top right corner .",
    "the topmost square in the chain can be adjacent to a square @xmath18 to the right of it and outside the chain , but again only if @xmath18 is larger than the squares in the chain .",
    "if the chain has exactly one square in it , it may have neighbors both below and to the right , as long as both neighbors are larger .    finally , define a _ good configuration _ to be any one of these three patterns : a big box , a hanging box , or a good chain .",
    "note that all three of these configurations give a degree - five square or squares .",
    "@xmath25 @xmath26",
    "let @xmath24 be any subset of the squares of a quadtree .",
    "then @xmath24 has a good configuration .",
    "we use induction on the number of levels in @xmath24 .",
    "let @xmath27 be formed by replacing each smallest square in q by its parent .",
    "( we think of @xmath24 as being formed by splitting some squares in @xmath27 and removing some of the resulting children . )",
    "let @xmath4 be a good configuration in @xmath27 .",
    "first , suppose @xmath4 is a big box in @xmath27 .",
    "then it is also a big box in @xmath24 since none of its neighbors can be subdivided .",
    "next , suppose @xmath4 is a hanging box in @xmath27 .",
    "if none of its neighbors is subdivided to form @xmath24 , it is a big box in @xmath24 .",
    "if one of its neighbors is subdivided and has a child neighboring @xmath4 and not incident to the upper left corner of @xmath4 , that child is a ( singleton ) good chain ( its only below - right adjacency is to @xmath4 itself ) .",
    "if @xmath4 s neighbors are subdivided but the only children neighboring @xmath4 are on the corner , @xmath4 remains a hanging box in @xmath24 .",
    "finally , suppose @xmath4 is a good chain in @xmath27 .",
    "if some square of @xmath4 is subdivided , and its lower right child is in @xmath24 , that child is a ( singleton ) good chain in @xmath24 . if not , but some squares are subdivided and have upper right or lower left children , any maximal contiguous sequence of such children is a good chain in @xmath24 .",
    "if neither of these two cases holds , but some squares are subdivided and have only their upper left children in @xmath24 , then some sequence of such children and of lower right children of neighbors of @xmath4 forms a good chain in @xmath24 . if no squares in @xmath4 are subdivided and none of their upper or left neighbors are subdivided , each square in the chain becomes a big box in @xmath24 .",
    "if no squares in @xmath4 are subdivided , some upper or left neighbor is subdivided , and its lower right child is in @xmath24 , that child is a singleton good chain . in the remaining case , any subdivided neighbor has neighboring children only on the upper left corners of squares in @xmath4 , and all squares in @xmath4 become hanging boxes in @xmath24 .    by the lemma",
    "above , any graph formed by a subset of the quadtree squares has a vertex of degree at most five , so the greedy algorithm uses at most six colors .",
    "this concludes the proof of theorem  [ six ] .",
    "we have shown that balanced edge - adjacent quadtrees require three colors , and unbalanced edge - adjacent quadtrees require four colors .",
    "corner - adjacent quadtrees may require either five or six colors .",
    "it remains to close this gap in the corner - adjacent case and to determine whether the balance condition makes a difference in this case .",
    "m. benantar , j. e. flaherty , and m. s. krishnamoorthy .",
    "coloring procedures for finite element computation on shared - memory parallel computers .",
    "_ adaptive , multilevel , and hierarchical computation strategies _ , amd 157 , asme , 1992"
  ],
  "abstract_text": [
    "<S> we describe simple linear time algorithms for coloring the squares of balanced and unbalanced quadtrees so that no two adjacent squares are given the same color . </S>",
    "<S> if squares sharing sides are defined as adjacent , we color balanced quadtrees with three colors , and unbalanced quadtrees with four colors ; these results are both tight , as some quadtrees require this many colors . </S>",
    "<S> if squares sharing corners are defined as adjacent , we color balanced or unbalanced quadtrees with six colors ; for some quadtrees , at least five colors are required . </S>"
  ]
}