{
  "article_text": [
    "quality of service ( qos ) management for web - based applications is typically considered a problem of system sizing : enough resources are to be provisioned to meet quality of service requirements under a wide range of operating conditions .",
    "while this approach is beneficial in making the site performance satisfactory in the most common working situations , it still leaves the site incapable to face sudden and unexpected surges of traffic . in these situations , in fact , it is impossible to predict the intensity of the overload .",
    "the architecture in use , although over - dimensioned , may not be sufficient to meet the desired qos . for this reason ,",
    "unexpected increases of requests and most of all flash crowds are considered the bane of every internet based application , and must be addressed in terms of performance control rather than capacity sizing .    due to the ineffectiveness of static resource over - provisioning , several alternative approaches have been proposed for overload management in web systems , such as dynamic provisioning , dynamic content adaptation , performance degradation and admission control .",
    "most of the previously proposed works on this topic rely on laborious parameter tuning and manual configuration that impede fast adaptation of the control policies .",
    "this work is motivated by the need to formulate a fast reactive and autonomous approach to admission control .",
    "we contribute an original self- * overload control policy ( soc ) which enables some fundamental self- * properties such as self - configuration , self - optimization , self - protection .",
    "in particular , the proposed system is capable of self - configuring its component level parameters according to performance requirements . at the same time it optimizes its own responsiveness and self - protects from overload .",
    "the proposed policy is to be adopted by web cluster dispatching points ( dp ) and does not require any modification of the client and/or server software .",
    "dps intercept requests and make decisions to block or accept incoming new sessions to meet the service level requirements detailed in a service level agreement ( sla ) .",
    "decisions whether to accept or refuse new sessions are made on the basis of a dynamically adjusted upper limit on the admission rate .",
    "this limit is updated and kept consistent with the system capacity and time varying traffic behavior , measured by an apposite self - learning , monitor module .",
    "such module performs an autonomous and continuous measurement activity that is of primary importance if human supervision is to be avoided .",
    "our proposal is oriented to the management of web based traffic , and for this reason provides admission control at session granularity .",
    "nevertheless , it does not require any prior knowledge on the incoming traffic , and can be applied to non - session based traffic as well .",
    "unlike previous works , our approach is rapidly adaptive , and also capable to deal with flash crowds which are detected as soon as they arise , with a simple change detection mechanism , that permits a fast adaptation of the rate of decision updates .",
    "the inter - decision time becomes increasingly shorter as traffic changes become sudden and fast , as in presence of flash crowds .",
    "this interval is set back to longer values when the workload conditions return to normality .",
    "although inspired by our previous work @xcite , this proposal is original as it includes the anomaly detection and decision rate adaptation mechanisms necessary to perform flash crowd management .",
    "it also provides a considerably improved measurement validation system as detailed in section [ sec : algorithm ] .",
    "we designed a synthetic traffic generator , based on an industrial standard benchmark specweb2005 , which we used to run simulations under a wide range of operating conditions .",
    "we compared soc  to other commonly adopted approaches showing that it outperforms the others in terms of performance and stability even in presence of flash crowds .",
    "indeed soc  does not show the typical oscillations of response time due to the over - reactive behavior of other policies .",
    "a wide range of experiments has been conducted to test the sensitivity of the proposed solution to the configuration of the few startup parameters .",
    "experiments show that the behavior of our policy is not dependent on the initial parameter setting , while other policies achieve an acceptable performance only when perfectly tuned and in very stable scenarios .",
    "the paper is organized as follows : in section [ sec : problem ] we formulate the problem of overload control in distributed web systems . in section [ sec : idea ] we sketch the basic actions of the proposed overload control policy . in section [ sec : algorithm ] we introduce our algorithm in deeper details . in section [ sec : policies ] we introduce some previous approaches that we compared to ours in section [ sec : results ] .",
    "section [ sec : related_work ] outlines the state of the art of admission control in distributed autonomic web systems while section [ sec : conclusions ] concludes the paper with some final remarks .",
    "we tackle the problem of admission control for web based services . in this context , the user interaction with the application typically consists of a sequence of requests forming a navigation _ session_. as justified by @xcite we make the admission control work at session granularity .    since the system should promptly react to traffic anomalies , any type of solution that requires human intervention is to be excluded .",
    "for this reason we address this problem by applying the autonomic computing @xcite design paradigm .",
    "we consider a typical multi - tier architecture @xcite .",
    "each tier is composed by several replicated servers , while a front - end dispatcher hosts the admission control and dispatch module .",
    "each request may involve execution at different depths in the tiered architecture .",
    "this results in a differentiation of requests into several categories whose average processing times may differ significantly .",
    "the quality of service of web applications is usually regulated by a sla . although our work may be applied to several formulations of sla , when clusters of heterogeneous tiers are considered , the most appropriate formulation is the following , as we argue in @xcite :    *   @xmath0 : maximum acceptable value of the 95%-ile of the response time for requests of type @xmath1 , where @xmath2 is the number of cluster tiers . * @xmath3 : minimum guaranteed admission rate .",
    "if @xmath4 is the rate of incoming sessions , and @xmath5 is the rate of admitted sessions , this agreement imposes that @xmath6 * @xmath7 : observation interval between two subsequent checks of the satisfaction of the sla constraints .",
    "meeting these quality requirements under sudden traffic variations requires novel techniques that guarantee the necessary responsiveness . in such cases",
    "the respect of the agreement on response time is a challenging problem .",
    "some other performance issues arise as well , such as the presence of oscillatory behavior , that typically affects some over - reacting policies , as we show in the experimental section [ sec : results ] .",
    "we designed soc , a session based admission control policy that self - configures a limit on the incoming rate of new sessions .",
    "such limit corresponds to the maximum capacity of the system to sustain the incoming traffic without violating the agreements on quality .",
    "it can not be evaluated off - line because it depends on the particular traffic rate and profile that the system has to face .",
    "since we do not want to rely on any prior assumption on the incoming traffic , we introduce a monitor module that makes the system capable to learn its capacity to face each particular traffic profile as it is when it comes . for this reason we make the system measure and learn the relationship between the rate of admitted sessions and the corresponding measure of response time . by accurately processing raw measures",
    ", the system can `` learn '' which is the maximum session admission rate that can be adopted in observance of the sla requirements .",
    "this learning activity introduces some issues such as how to time performance control , how to aggregate measures and how to detect changes , that will be dealt in detail in the following sections .",
    "we just mention that as soon as a change is detected the proposed system varies the rate of performance controls to guarantee at the same time accuracy and responsiveness .    according to our proposal the admission controller operates at the application level of the protocol stack because session information is necessary to discriminate which requests are to be accepted ( namely requests belonging to already ongoing sessions ) , and which are to be refused ( requests that imply the creation of a new session ) .",
    "the cluster dispatcher can discriminate between new requests and requests belonging to ongoing sessions because either a cookie or an http parameter are appended to the request .",
    "this technique ensures two important benefits : 1 ) the admission controller can be implemented on dps , and does not require any modification of client and server software , 2 ) the dispatcher can immediately respond to non admitted requests , sending an `` _ i am busy _ ''",
    "page to inform the client of the overload situation .",
    "this avoids that the expiration of protocol time - outs affects the user perceived performance and mitigates the retrial phenomenon .",
    "soc  works in two modalities , namely _ normal mode _ and _ flash crowd management mode _ , switching from one to the other according to the traffic scenario being considered . during stable load situations",
    "the timing of performance control is regularly paced at time intervals of length @xmath8 .",
    "if a sudden change of the traffic scenario is detected , the system enters the flash crowd management modality during which performance controls and policy updates are made more often in order to avoid a system overload .",
    "soc  provides a probabilistic admission control mechanism which filters incoming sessions according to an adaptive rate limit @xmath9 . in order to properly calculate @xmath9",
    ", the monitor module takes measures to analyze the relationship between the observed response time ( rt ) and the rate of admitted sessions .",
    "the value of @xmath9 is then calculated as the highest rate that the site can support without violating the constraints on rt defined in the slas .",
    "the admission control policy varies the admission probability according to a prediction of the future workload and to the estimated value of @xmath9 .",
    "the behavior of our policy under normal mode is described in figure [ fig : algo_normal ] , while figure [ fig : algo_fc ] describes the flash crowd management mode .    ` init ; ` +   ` normal_mode : ` + ` while ( ( ` @xmath10 ` ) and ! change_detection ( ) ) { ` + `   n = n+1 ; ` + `   for each session arrival { ` + `     probabilistic_admission_control ; ` + `     collect_raw_measures ; ` + `     } ` + `   } / * end while ` + ` if change_detection ( ) ` + `    goto flash_crowd_mode ; ` + ` else { ` + `   update_stats ; ` + `   update_curve ; ` + `   update_admission_probability ; ` + `   t=0 ; ` + `   goto normal_mode ; ` + `   } ` +    for sake of simplicity , we leave the description of the parameter initialization ( instruction ` init ` ) at the end of the algorithm description , in section [ sec : init ] .    _",
    "normal mode _    at each iterative cycle",
    "@xmath11 , the admission controller accepts new sessions with an autonomously tuned probability @xmath12 and collects related raw measures of response time and session arrival rate ( more details on these phases are given in sections [ subsec : sac ] and [ subsec : raw ] ) .    if no abrupt change is detected in the demand intensity , the ` while ` loop of the normal modality is repeated every @xmath13 seconds .    at the end of each cycle execution",
    ", the system processes the raw measures to calculate some statistical metrics ( ` update_stats ` instruction ) , such as the mean session arrival rate @xmath14 , the mean session admission rate @xmath15 and the 95%-ile of response time @xmath16 , @xmath17 .",
    "details on the statistics update instruction are give in section [ sec : stats_update ] .",
    "the execution of the ` update_curve ` instruction is of primary importance to determine the autonomic behavior of our policy .",
    "the system constructs the function between the observed traffic rate @xmath18 and the corresponding response time for the @xmath2 types of requests being served @xmath19 . in paragraph",
    "[ sec : curve ] we give complete details regarding the construction of this function by means of the statistical metrics calculated in the previous ` update_stats ` instruction .    before starting a new admission control cycle ,",
    "the algorithm evaluates a new limit @xmath20 on the admission rate , and calculates the new session admission probability accordingly , as detailed in section [ sec : curve_inversion ] .    while in normal mode",
    ", if a flash crowd occurs and a sudden surge in demand is detected , the system enters the flash crowd management mode .",
    "it persists in this modality as long as the traffic pattern keeps on varying significantly .",
    "_ flash crowd management mode _",
    "the flash crowd management mode provides that statistical metrics are updated every time a new session arrives , thus ensuring a perfect adaptivity ( ` update_stats ` instruction ) .",
    "although statistical metrics are updated at each session arrival , no learning mechanism is activated in flash crowd management mode , i.e. there is no ` update_curve ` instruction , due to the high variability of the incoming traffic .",
    "the policy returns to normal mode only when the admission probability has been properly adapted to ensure that the instantly measured session admission rate @xmath21 is actually below the limit @xmath9 . in this case",
    "we can assume the unexpected surge is under control and the policy can return to normal mode , during which performance controls are paced at a slower and regular rate .    in the following paragraphs",
    "we discuss the details of the instructions provided in figure [ fig : algo_normal ] and [ fig : algo_fc ] .    `",
    "flash_crowd_mode : ` + ` for each session arrival { ` + `   update_stats ; / * calculates ` @xmath22 ` , ... , and ` @xmath23 + `   n++ ; ` + `   update_admission_probability ; ` + `   probabilistic_admission_control ; ` + `   collect_raw_measures ; ` + `   measure ` @xmath21 ` ; ` + `   if ` @xmath24 ` goto normal_mode ` + `   else goto flash_crowd_mode ; ` + `   } `      purpose of this instruction is to limit the incoming rate to @xmath20 by means of a probabilistic admission control .",
    "new sessions will be admitted with probability @xmath12 , initially set to @xmath25 and autonomously tuned as described in section [ sec : curve_inversion ] on the basis of a forecast on the session arrival rate for the next iteration .",
    "this instruction enables the collection of raw measures of the rt of all requests belonging to the currently admitted session .",
    "we define @xmath26 as the set of raw measures of response time for requests of type @xmath27 during the time interval @xmath28 .      at the execution of this instruction raw measurements",
    "are processed to calculate some statistical parameters :    *   @xmath16 , that is the @xmath29-ile of the set @xmath26 , for @xmath30 ; *   @xmath14 , that is the average incoming rate of new sessions observed during the time interval @xmath31 ; *   @xmath15 , that is the average rate of admitted sessions during the time interval @xmath28 .    in order to ensure a proper system reactivity ,",
    "all statistical metrics are calculated over the set @xmath23 composed by the last @xmath32 admitted sessions . in normal mode , this allows an early adaptation of the admission control probability to a possibly increased demand even if it has not yet caused the trigger of the change detection mechanism . in flash crowd mode",
    "this ensures that the rate limit is calculated on the basis of the smallest time window that still guarantees a sufficiently numerous set of raw measures .",
    "this instruction provides the self - learning activity of our algorithm .",
    "it allows the system to discover the function that relates the rate of admitted sessions and the rt of each tier .",
    "the statistics collected with the ` update_stats ` instruction give the system the following information : during the time interval @xmath28 , a rate of @xmath14 new sessions reached the dp ; only a rate of @xmath15 of those sessions was actually served , and the @xmath29-ile of the response time for type @xmath33 requests was @xmath16 .",
    "a statistical metric calculated from samples of raw measures as described in paragraph [ sec : stats_update ] , taken during a single iteration , is not reliable enough for two reasons : first , the workload is subject to variations that may cause transient effects ; second , the number of samples may not be sufficient to ensure an acceptable confidence level .",
    "the use of longer inter - observation periods may allow the collection of more numerous samples , but it is impossible to define a sufficiently long inter - observation period for any possible traffic situation , and the incoming workload may vary before a sufficiently representative set of samples is gathered .",
    "moreover too long inter - observation period may lead to low responsiveness of the admission policy .",
    "the idea at the basis of our proposal is to collect these statistics under a range of workload levels . at each algorithm iteration",
    "the dp acquires @xmath2 pairs @xmath34 for @xmath35 , where @xmath16 is the 95%-ile of request rt measured at the i-@xmath36 tier .",
    "let us consider the set of pairs : @xmath37 , where @xmath30 , and let us partition the cartesian plane into rectangular intervals of length @xmath38 along the @xmath39 axis , as shown in figure [ fig : curve_set ] .    for every interval @xmath40 , with @xmath41 we define @xmath42 . then we calculate the _ barycenter _",
    "@xmath43 of the @xmath44-th interval as the point with average coordinates over the set @xmath45 .",
    "an interval has no barycenter if @xmath46 .",
    "figure [ fig : curve_set ] shows the collected statistics taken at run - time at the database tier of an example scenario .",
    "it also points out the calculated barycenters for each interval .",
    "every time a new point is added to a set @xmath45 , the monitor module updates the values of the barycenter coordinates , standard deviation and cardinality of the set being modified .",
    "notice that the update of such values is performed for only one set at a time ( set that have not been modified do not require statistic updates ) and is incrementally calculated with respect to a synthetic statistical representation .",
    "such representation permits to avoid computational and storage costs that would be afforded if all the pairs had to be considered .",
    "barycenters calculated with a standard error higher than 20% are discarded while the others are considered sufficiently reliable and are included in corresponding lists @xmath47 , where @xmath17 .",
    "the elements of such lists are ordered on the basis of the first coordinate @xmath39 .    since we know that the relation between @xmath39 and @xmath48 is monotonically not decreasing",
    ", we can assume that if two subsequent barycenters do not satisfy this basic monotonicity property , the corresponding slices can be aggregated to improve the measure reliability .",
    "for this reason , if @xmath47 contains two adjacent points which do not correspond to growing values of @xmath48 , the sets of statistics related to the corresponding intervals are aggregated and @xmath47 is updated until it contains a list of pairs in growing order in both the coordinates , as shown in figure [ fig : aggregated_regressogram ] .",
    "notice that this procedure permits a further validation of the measures , beyond the already performed test on the standard error value .",
    "after few aggregations , the list @xmath47 contains an ordered set of pairs which can be linearly interpolated to obtain an estimate of the function that relates @xmath39 and @xmath48 .",
    "thanks to the frequent updates , this list is a highly dynamic structure , that continuously adapts itself to changing workload situations .",
    "the linear interpolation of the points in @xmath47 permits to forecast the response time corresponding to any possible workload rate .",
    "notice that the use of common regression techniques as an alternative to linear interpolation is unadvised , because it would require a prior assumption on the type of functions being parametrized for the regression .",
    "experiments we conducted on different traffic profiles ( e.g. by using specweb2005 @xcite and tpc - w @xcite oriented traffic generators ) show that , apart from monotonicity , no other structural property is generally valid for all the possible traffic scenarios .",
    "this would make it difficult to choose the type of regression ( polynomial , exponential , power law ) to use .",
    "the self - constructed set @xmath47 described in paragraph [ sec : curve ] is linearly interpolated to obtain an estimate of the function @xmath49 that relates @xmath39 and the 95%-ile of response time measured at the @xmath33-th tier .",
    "such function is then used to evaluate the highest session admission rate @xmath9 that can be adopted to remain under the response time constraints defined in the sla .",
    "thanks to this estimation , the dp can configure the session admission probability according to a forecast of the incoming workload .",
    "the algorithm is based on a prediction of the session arrival rate @xmath50 for the next iteration interval @xmath28 .",
    "it assumes that an esteem of the current session arrival rate @xmath50 can be based on the incoming session rate @xmath51 observed during the previous interval @xmath52 , that is , @xmath50",
    "= @xmath51 .",
    "the algorithm is sufficiently robust to possibly false predictions , as they will be corrected at the next iteration , making use of updated statistics .",
    "new sessions will be admitted with probability @xmath53 . this way ,",
    "if the incoming rate of new sessions in the present time interval is the same observed in the previous , the upper limit on the total incoming rate of new sessions is met .",
    "the on - line self - tuning of the admission probability has several benefits . on the one hand the highest possible rate of incoming sessions",
    "is admitted , optimizing the system utilization . on the other hand",
    "it prevents the system from overload , by quickly reducing the admission probability as the traffic grows .",
    "the execution of this instruction starts with a test to verify the validity of the rate limit @xmath54 adopted in the previous time interval . to this extent",
    "we define two types of error in the evaluation of @xmath54 :    * @xmath55 : the system admitted new sessions with probability @xmath56 but the incoming rate was unexpectedly greater than @xmath54 .",
    "in such a situation , if the rate limit was properly estimated , some sla limits should have been violated . in this erroneous situation , although the rate limit was exceeded , the sla limits were not violated .",
    "the occurrence of this error depends on a possible underestimation of the rate limit @xmath54 .",
    "more formally , if @xmath57 and @xmath58 @xmath59 ) then @xmath60 . *",
    "@xmath61 : the system admitted new sessions with probability @xmath56 and , as expected , the incoming rate was lower than @xmath54 .",
    "in such a situation , if the rate limit was properly estimated , there should not be any violation of the agreements . in this erroneous situation , although the rate limit was not exceeded , a violation of at least one of the sla limits was observed .",
    "the occurrence of this error reveals a possible overestimation of the rate limit @xmath54 .",
    "more formally , if ( @xmath62 and @xmath63 s.t .",
    "@xmath64 ) then @xmath65 .",
    "if none of these errors occurred , the upper limit on the rate of admitted sessions was properly set and there is no need to change the value of the rate limit .",
    "therefore , in absence of errors , @xmath66 .",
    "if otherwise one of these two types of error has occurred the value of @xmath67 needs to be updated . to this purpose",
    "the set @xmath47 is linearly interpoled and the resulting function @xmath68 is inverted in correspondence to the value of the sla limit on the 95%-ile of the response time @xmath69 .",
    "the function @xmath68 crosses the line @xmath70 in a point @xmath71 , whose first coordinate , @xmath72 , is the estimated optimal session admission rate for the @xmath33-@xmath36 tier .    to guarantee the fulfillment of the sla on each tier ,",
    "the optimal admission rate for the next round is set as follows : @xmath73 .",
    "notice that at the startup , @xmath47 may contain only one point ( the benchmark point described in paragraph [ sec : curve ] ) or several points located below the sla constraint . in the first case , the admission probability @xmath12 is set to 1 . in the second case",
    "the linear interpolation between the extreme two points in @xmath47 is prolonged until it crosses the sla constraint .",
    "this mechanism consists of two joint controls and triggers only if both of them give a positive result : 1 ) the number of sessions admitted during the current execution cycle ( we call it @xmath74 ) exceeds the expectations for a single cycle , that is @xmath75 ; 2 ) the current admission rate exceeds the limit @xmath9 by @xmath44 times the measured standard deviation of the admitted rate , that is @xmath76 , where @xmath77 is the time elapsed from the start of the current iteration .",
    "notice that the value of @xmath78 is calculated at run - time by measuring the standard deviation of the admitted rate @xmath39 in situations where @xmath79 greater than @xmath9 .",
    "it measures the intensity of the inherent variability of the admitted rate @xmath39 , that can not be filtered by a probabilistic admission control .",
    "the pseudo - code of the change detection mechanism is described in figure [ fig : change_detection ] .     `",
    "boolean change_detection ( ) { ` + `   if ( ` @xmath75 ` and ` @xmath76 ` ) ` + `   return true ; ` + `   else return false ; ` + `   } `      the autonomic behavior of our algorithm makes the system capable of adapting itself to changing traffic conditions when prior knowledge of the traffic parameters is useless or even misleading . for this reason",
    "the initial setting of the system parameters is not of primary importance . as initial setting of our algorithm",
    "we use @xmath80 , @xmath81 and @xmath82 . as initial setting of the curve construction phase",
    ", we insert the point @xmath83 in @xmath47 , representing the lower bound on the @xmath29-ile of the response times of type @xmath33 requests .",
    "this point is the @xmath29-ile of response time measured at the @xmath33-th tier , when the system is in a completely idle state , that is when @xmath84 .    in order to calculate the average response time in such situation we use an offline benchmark , obtaining the points @xmath83 , @xmath17 .",
    "the proper setting of the points @xmath85 with value @xmath83 as detailed in section [ sec : curve ] , is not a key point in the algorithm , since it can be substituted with the origin @xmath86 , with no impact but a little difference in the time to converge to a stable choice of @xmath20 .",
    "the use of this point in the interpolation of the curve obtained from the set @xmath47 is in fact limited to the first executions of the instruction ` update_curve ` , when too few reliable points are available .",
    "in this section we describe other previously proposed qos policies to make performance comparisons .",
    "these policies can be formulated in many variants depending on the considered performance objective .",
    "we limit our analysis to the optimization of response time which is strictly related to the user perceived quality .",
    "fixed threshold policies have been proposed in many fields of computer science , and in particular for web applications with several variants @xcite .    according to the threshold based admission control ( tbac ) policy",
    ", the dp makes periodic evaluations of the @xmath29-ile of response time of each tier , every @xmath87 seconds .",
    "if there is at least one tier for which the @xmath29-ile of response time exceeds a threshold @xmath88 , the dp rejects new sessions and only accepts requests that belong to ongoing sessions . on the contrary , if the value of the @xmath29-ile of response time at each tier is lower than @xmath88 , all new sessions are accepted for the next @xmath89 seconds .",
    "this policy , like all threshold based policies , implies a typical on / off behavior of the admission controller .",
    "this causes unacceptable oscillations of response time .",
    "furthermore , its performance depends on a proper parameter setting ( i.e. the choice of the threshold @xmath88 and of the period between two succeeding decisions @xmath87 ) , and for this reason it can not be used in traffic scenarios characterized by highly variable workloads .",
    "probabilistic admission control ( pac ) is a well known technique in control theory , commonly used when oscillations are to be avoided .",
    "this policy was proposed for internet services in @xcite , while a similar version was also proposed for web systems in @xcite . according to this policy",
    ", a new session is admitted with a certain probability , whose value depends on the measured response time .",
    "the dp evaluates , every @xmath90 seconds , the response time of each tier .",
    "it compares the measured response times with two thresholds , @xmath91 and @xmath92 .",
    "the acceptance probability for the @xmath33-@xmath36 tier is a piece - wise linear function of the measured @xmath29-ile of the response time @xmath93 , and has the following formulation : @xmath94 then the session admission probability for the next round is given by : @xmath95    notice that the two threshold values , @xmath92 and @xmath91 , that characterize this policy , are arbitrarily set offline independently of the observed incoming session rate and of the inter - observation period @xmath90 .",
    "therefore , the performance of this policy is dependent on a proper tuning of these parameters , as we show in section [ sec : results ] .",
    "in order to make performance comparisons among the different policies and to investigate the flash crowd management capabilities of soc , we developed a simulator on the basis of the opnet modeler software @xcite .    in our experimental setting , we assume that the interarrival time of new sessions follows a negative exponential distribution .",
    "the interarrival time of requests belonging to the same session is more complex . in order to have a realistic traffic generator",
    ", we used the phase model of an industrial standard benchmark : specweb2005 @xcite .",
    "we refer to @xcite for a detailed description of the state model and of the functionalities of each phase .    upon reception of a response",
    ", the next request is sent after a think time interval @xmath96 spent by the user analyzing the received web page .",
    "our model of @xmath96 is based on tpc - w @xcite and on other works in the area of web traffic analysis such as @xcite . as in the tpc - w model",
    ", we assume an exponential distribution of think times with a lower bound of 1 sec .",
    "therefore @xmath97 where @xmath98 is uniformly distributed in the interval [ 0,1 ] and @xmath99 sec . to model a realistic user behavior",
    ", we also introduce a timeout to represent the maximum response time tolerable by the users . after that",
    "a request has been sent , if the timeout expires before the reception of the response , the client abandons the system .",
    "we assume each phase of the session state model can be mapped onto a specific tier of a @xmath100-tier cluster .",
    "we use an approximate estimate of the average processing times of the different tiers on the basis of the experiments detailed in @xcite .",
    "we assume each session phase requires an exponentially distributed execution time set as follows : average execution time of pure http requests is 0.001 sec , while for servlet request is 0.01 sec and for database requests is 1 sec .    for sake of brevity",
    ", we conduct our analysis on the database tier which is the bottleneck of the architecture considered in these simulations .",
    "thus , for simplicity , we indicate the limit on the database response time , defined in the sla , as @xmath101 .",
    "all the experiments of this section are conducted with 20 application servers , a client timeout of 8 sec . and @xmath102sec .",
    "the fixed threshold @xmath103 of the tbac policy is always set in agreement with the sla constraints on the @xmath29-ile of database response time , therefore @xmath103",
    "= @xmath104 .",
    "the thresholds of the pac policy are defined as follows : @xmath105 = 3 sec and @xmath106 = @xmath104 , in agreement with the sla constraints .",
    "a first set of experiments ( figures [ fig : perc_lambda ] and [ fig : osc_rt ] ) shows how soc outperforms the tbac and pac policies , in terms of both performance and stability .",
    "figure [ fig : perc_lambda ] highligths the adaptive behavior of soc . on the one hand , when the traffic load is high , soc finds the suitable session arrival rate and admits as many sessions as possible to remain under the sla limits . on the other hand ,",
    "when the traffic is low , it accepts almost all incoming sessions .    unlike soc , other non adaptive policies , such as tbac and pac , typically under - utilize the system resources in low workload conditions , and violate the qos agreements when the workload is high .",
    "soc ouperforms tbac and pac also in terms of stability . as figure [ fig : osc_rt ] points out , tbac shows an evident oscillatory behavior due to its on / off nature while pac has an over - reacting behavior in many situations .",
    "soc , instead , shows a more stable response time .",
    "the self - learning activity allows to build a reliable knowledge of the system capacity with respect to the incoming traffic that is used to derive a good and stable estimation of the optimal admission rate .    with the following experiments we want to show that although soc is based on the off - line configuration of some parameters , ( in particular @xmath107 and @xmath38 ) , this does not harm its autonomy . in fact the experiments detailed in figures [ fig : perc_periodo ] , [ fig : perc_k ] and [ fig : p_adm_k ]",
    "show that the policy behavior is insensitive to the particular setting of those parameters .",
    "these experiments were conducted with slow varying traffic scenarios . in this experimental setting , the particular choice of @xmath107 does not influence the policy performance .",
    "furthermore although small values of @xmath107 may cause frequent triggers of the change detection mechanism ( due to false positive results of the tests described in section [ sec : anomaly ] ) , these triggers only cause more mode switches , without significant impact on performance ( figure [ fig : perc_periodo ] ) .",
    "similarly the choice of the interval size @xmath38 that defines the curve construction and determines the occurrence of aggregation of measurement sample sets , does not affect soc performance .",
    "both response time and admission probability are stable ( figures [ fig : perc_k ] and [ fig : p_adm_k ] ) even when @xmath38 varies significantly .    given the slow varying traffic scenario that characterizes the experimental setting of the previous experiments , we did not show any performance comparison with the aaca policy that we introduced in @xcite .",
    "in fact in this scenario the performance of soc is only marginally better than aaca , and the lines in the figures would have overlapped each other in many cases .    in the following experiments we studied the performance of soc with and without activating the change detection and flash crowd management capability described in section [ sec : algorithm ] .    in figures [ fig :",
    "rt_base ] , [ fig : rt_fcm ] , [ fig : zoom_rt_compare ] and [ fig : zoom_p_compare ] the former version is called _ flash crowd management _ while the latter is called _",
    "base_. the base version is the same policy we introduced in @xcite with the addition of the new monitor module detailed in paragraphs [ sec : stats_update ] and [ sec : curve ] .",
    "figure [ fig : flash_crowd ] characterizes the traffic scenario of the last set of experiments .",
    "it shows a session arrival rate that is subject to several sudden surges of growing intensity .",
    "figures [ fig : rt_base ] and [ fig : rt_fcm ] show how the flash crowd management support is capable of extremely mitigating the spikes of response time caused by the occurrence of flash crowds .",
    "these spikes are instead present in figure [ fig : rt_base ] showing that without proper flash crowd management , a violation of the service level agreements is inevitable .",
    "figures [ fig : zoom_rt_compare ] and [ fig : zoom_p_compare ] focus on the management of the flash crowd that occurs at 100000 seconds of simulations .",
    "these figures highligth the increased reactivity of soc when using the flash crowd management support .",
    "the base version takes almost 40 seconds to discover the occurrence of the flash crowd and consequently adapt the admission probability , while the enhanced version reacts almost immediately .",
    "notice the time scale difference between the two figures [ fig : zoom_rt_compare ] and [ fig : zoom_p_compare ] , and the fact that a 40 seconds delay in discovering the flash crowd , implies the system being in overload for almost 500 seconds .",
    "this is mostly due to the fact that the admission controller works at session granularity .",
    "notice that premature session interruption would not solve this problem , because on the one hand , sessions are terminating anyway due to client timeout , and on the other hand , the increased session interruption rate should obviously be considered as another aspect of degraded performance .",
    "in particular , figure [ fig : zoom_rt_compare ] shows how the base version of soc is incapable to face such flash crowd , as can be seen by the high values to the 95%-ile of response time , which exceed the user time - out .",
    "this means that users are abandoning the site due to poor performance or system unavailability . on the contrary ,",
    "the flash crowd management enhanced version of soc is capable of maintaning the response time at acceptable levels by rapidly reducing the session admission probability as soon as the surge in demand is detected .",
    "there is an impressively growing interest in autonomic computing and self - managing systems , starting from several industrial initiatives from ibm @xcite , hewlett packard @xcite and microsoft @xcite .",
    "although self - adaptation capabilities could dramatically improve web system reactivity and overload control during flash crowds , little effort has been spent on the problem of autonomous tuning of qos policies for web systems .",
    "the application of the autonomic computing paradigm to the problem of overload control in web systems poses some key problems concerning the design of the monitoring module .",
    "the authors of @xcite propose a technique for learning dynamic patterns of web user behavior .",
    "a finite state machine representing the typical user behavior is constructed on the basis of past history and used for prediction and prefetching techniques . in paper",
    "@xcite the problem of delay prediction is analyzed on the basis of a learning activity exploiting passive measurements of query executions .",
    "such predictive capability is exploited to enhance traditional query optimizers .",
    "the cited proposals @xcite can partially contribute to improve the qos of web systems , but differently from our work , none of them directly formulate a complete autonomic solution that at the same time gives directions on how to take measures , and make corresponding admission control decisions for web cluster architectures .",
    "the authors of @xcite also address a very important decision problem in the design of the monitoring module : the timing of performance control .",
    "they propose to adapt the time interval between successive decisions to the size of workload dependent system parameters , such as the processor queue length .",
    "the dynamic adjustment of this interval is of primary importance for threshold based policies for which a constant time interval between decisions may lead to an oscillatory behavior in high load scenarios as we show in section [ sec : results ] .",
    "simulations reveal that our algorithm is not subject to oscillations and shows a very little dependence on the time interval between decisions .",
    "the problem of designing adaptive component - level thresholds is analyzed in @xcite for a general context of autonomic computing .",
    "the mechanism proposed in the paper consists in monitoring the threshold values in use by keeping track of false alarms with respect to possible violations of service level agreements . a regression model is used to to fit the observed history . when a sufficiently confident fit is attained",
    "the thresholds are calculated accordingly . on the contrary",
    "if the required confidence is not attained , the thresholds are set to random values as if there was no history .",
    "a critical problem of this proposal is the fact that the most common threshold policies cause on / off behaviors that often result in unacceptable performance .",
    "our proposal is instead based on a probabilistic approach and on a learning technique , that dynamically creates a knowledge basis for the online evaluation of the best decision to make even for traffic situations that never occurred in the past history .",
    "the problem of autonomously configuring a computing cluster to satisfy sla requirements is addressed in @xcite",
    ". this paper is similar to ours in the design of a strategy for autonomic computing that divides the problem into different phases , called _ monitor _ , _ analyze _ , _ plan _ and _ execute _ ( mape , according to the terminology in use by ibm @xcite ) in order to meet sla requirements in terms of response time and server utilization . unlike our work",
    ", the authors of this paper designed a policy whose decisions concern the reconfiguration of resource allocation to services .",
    "the design of soc  is inspired by the policy aaca we introduced in a previous work @xcite to which we added the anomaly detection and decision rate adaptation mechanism that is necessary to manage flash crowd situations . with respect to @xcite",
    ", we also largely improved the design of the monitor module as we detail in section [ sec : algorithm ] .",
    "in this paper we address the problem of overload control for web based systems .",
    "we introduce an original policy , that we name soc , that permits the self - configuration and rapid adaptivity .",
    "soc exploits a change detection mechanim to switch between two modalities according to the time variability of the incoming traffic .",
    "when the incoming traffic is stable , the policy works in normal mode in which performance controls are paced at a regular rate .",
    "the policy switches to flash crowd management mode as soon as a rapid surge of demand is detected .",
    "it then increases the rate of performance controls until the incoming traffic becomes more stable .",
    "this permits a fast reaction to sudden changes in traffic intensity , and a high system responsiveness .",
    "our policy does not require any prior knowledge of the incoming traffic , nor any assumption on the probability distribution of request inter - arrival and service time .",
    "unlike other proposals in the area , our policy works under a wide range of operating conditions without the need of laborious manual parameter tuning .",
    "it is entirely implemented on dispatching points , without the need of any modification of client and server software .",
    "we compared our policy to previously proposed approaches .",
    "extensive simulations show that it permits an excellent utilization of system resources while always respecting the limits on response time imposed by service level agreements .",
    "we show that our policy reduces the oscillations of response time common to other policies that work at session granularity .",
    "simulation results also highlight the flash crowd management capabilities of soc , showing how it rapidly adapts the admission probability to keep the overload under control ."
  ],
  "abstract_text": [
    "<S> unexpected increases in demand and most of all flash crowds are considered the bane of every web application as they may cause intolerable delays or even service unavailability .    </S>",
    "<S> proper quality of service policies must guarantee rapid reactivity and responsiveness even in such critical situations . </S>",
    "<S> previous solutions fail to meet common performance requirements when the system has to face sudden and unpredictable surges of traffic . </S>",
    "<S> indeed they often rely on a proper setting of key parameters which requires laborious manual tuning , preventing a fast adaptation of the control policies .    </S>",
    "<S> we contribute an original self- * overload control ( soc ) policy . </S>",
    "<S> this allows the system to self - configure a dynamic constraint on the rate of admitted sessions in order to respect service level agreements and maximize the resource utilization at the same time . </S>",
    "<S> our policy does not require any prior information on the incoming traffic or manual configuration of key parameters . </S>",
    "<S> we ran extensive simulations under a wide range of operating conditions , showing that socrapidly adapts to time varying traffic and self - optimizes the resource utilization . </S>",
    "<S> it admits as many new sessions as possible in observance of the agreements , even under intense workload variations . </S>",
    "<S> we compared our algorithm to previously proposed approaches highlighting a more stable behavior and a better performance . </S>"
  ]
}