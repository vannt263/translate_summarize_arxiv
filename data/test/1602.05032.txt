{
  "article_text": [
    "the problem of enumerating the strings in a language @xmath2 is to list all the elements in @xmath2 in some order . several papers study this problem .",
    "for example , enumerating all spanning trees , @xcite , minimal transversals for some geometric hypergraphs , @xcite , maximal cliques , @xcite , ordered trees , @xcite , certain cuts in graphs , @xcite , paths in a graph , @xcite , bipartite perfect matchings , @xcite , maximum and maximal matchings in bipartite graphs , @xcite , and directed spanning trees in a directed graph  @xcite . see the list in @xcite for other enumeration problems .",
    "one of the challenges in enumeration problems is to find an order of the elements of @xmath2 such that finding the next element in that order can be done in quasilinear time in the length of the representation of the element .",
    "the time that the algorithm takes before giving the first element is called the _ preprocessing time_. the time of finding the next element is called the _ delay time_. in  @xcite , ackerman and shallit gave a linear preprocessing and delay time for enumerating the words of any regular language ( expressed as a regular expression or nfa ) in lexicographic order .",
    "enumeration is also of interest to mathematicians without addressing the time complexity .",
    "calkin and wilf,@xcite , gave an enumeration of all the rational numbers such that the denominator of each fraction is the numerator of the next one .",
    "another problem that has received considerable attention is the problem of ranking the elements of @xmath2 . in ranking",
    "the goal is to find some total order on the elements of @xmath2 where the problem of returning the @xmath0th element in that order can be solved in polynomial time .",
    "obviously , polynomial time ranking implies polynomial time enumeration . in the literature",
    ", the problem of ranking is already solved for permutations  @xcite and trees of special properties @xcite .",
    "those also give enumerating algorithms for such objects .",
    "let @xmath3 be a finite field with @xmath4 elements .",
    "let @xmath5 be the set of irreducible polynomials over @xmath3 of degree @xmath0 and their roots in @xmath6 .",
    "several algorithms in the literature use irreducible polynomials of degree @xmath0 over finite fields , especially algorithms in coding theory , cryptography and problems that use the chinese remainder theorem for polynomials  @xcite .",
    "some other algorithms use only the roots of those polynomials . see for example  @xcite .    in this paper ,",
    "we study the following problems    1 .   enumeration of any number of irreducible polynomials of degree @xmath0 over a finite fields .",
    "2 .   enumeration of any number of irreducible polynomials of degree @xmath0 and their roots over the extended field .",
    "3 .   enumeration of any number of roots of irreducible polynomials of degree @xmath0 over the extended field .",
    "one root for each polynomial .",
    "there are many papers in the literature that mention the result of enumerating all the irreducible polynomials of degree _",
    "less than or equal _ to @xmath0 but do not give the exact algebraic complexity of this problem  @xcite . in this paper",
    "we give a detailed analysis of deterministic and randomized algorithms that enumerate any number of irreducible polynomials of degree @xmath0 over a finite field and/or their roots in the extension field in quasilinear where @xmath1 is the size of the output .",
    "] time cost per element .",
    "our algorithm is based on an improved algorithm for enumerating all the lyndon words of length @xmath0 in linear delay time and the well known reduction of lyndon words to irreducible polynomials . in the next subsection",
    "we define the lyndon word and present the result of the improved algorithm .",
    "let @xmath7 be any total order on @xmath3 . a _ lyndon word _ ( or string ) over @xmath3 of length @xmath0 is a word @xmath8 where every rotation @xmath9 , @xmath10 of @xmath11 is lexicographically larger than @xmath11 .",
    "let @xmath12 be the set of all the lyndon words over @xmath3 of length @xmath0 . in many papers in the literature",
    ", it is shown that there is polynomial time ( in @xmath0 ) computable bijective function @xmath13 , where @xmath5 is the set of all polynomials of degree @xmath0 over @xmath3 .",
    "so the enumeration problem of the irreducible polynomials can be reduced to the problem of enumerating the elements of @xmath12 .",
    "bshouty gave in  @xcite a large subset @xmath14 where any number of words in @xmath15 can be enumerated in a linear delay time .",
    "in fact , one can show that @xmath15 has a small dfa and , therefore , this result follows from  @xcite .",
    "it is easy to show that the set @xmath12 can not be accepted by a small size nfa , i.e. , size polynomial in @xmath0 , so one can not generalize the above result to all @xmath12 .",
    "duval  @xcite and fredricksen et .",
    ", @xcite gave enumeration algorithms of all the words in @xmath16 that run in linear delay time .",
    "berstel and pocchiola in  @xcite and cattell et .",
    "al . in  @xcite",
    "show that , in duval s algorithm , in order to find the next lyndon word in @xmath16 , the amortized number of _ updates _ is constant .",
    "the number of updtes is the number of symbols that the algorithm change in a lyndon word in order to get the next word .",
    "such an algorithm is called cat algorithm .",
    "see the references in @xcite for other cat algorithms .",
    "kociumaka et .",
    "al . gave an algorithm that finds the rank of a lyndon word in @xmath17 time and does unranking in @xmath18 time .",
    "in this paper , we give an enumeration algorithm of @xmath12 with linear delay time .",
    "our algorithm is the same as duval s algorithm with the addition of a simple data structure .",
    "we show that this data structure enable us to find the next lyndon word of _ length @xmath0 _ in constant updates per symbol and therefore in linear time .",
    "we also show that our algorithm is cat algorithm and give an upper bound for the amortized update cost",
    ".    another problem is testing whether a word of length @xmath0 is lyndon word . in  @xcite ,",
    "duval gave a linear time algorithm for such test .",
    "in this paper we give a simple algorithm that uses the suffix trie data structure and runs in linear time .",
    "this paper is organized as follows . in section 2",
    "we give the exact arithmetic complexity of the preprocessing and delay time for enumerating any number of irreducible polynomials and/or their roots . in section 3",
    "we give a simple data structure that enable us to change duval s algorithm to an algorithm that enumerates all the lyndon words of length @xmath0 in linear delay time .",
    "we then show in section 4 that the algorithm is cat algorithm . in section 5",
    "we give a simple linear time algorithm that tests whether a word is a lyndon word .",
    "in this section we give the analysis for the algebraic complexity of the preprocessing time and delay time of enumerating irreducible polynomials of degree @xmath0 over a finite field and/or their roots in the extended field .",
    "let @xmath4 be a power of a prime @xmath19 and @xmath20 be the finite field with @xmath4 elements .",
    "our goal is to enumerate all the irreducible polynomials of degree @xmath0 over @xmath3 and/or their roots in the extension field @xmath6 .    the best deterministic algorithm for constructing an irreducible polynomial over @xmath3 of degree @xmath0 has time complexity @xmath21 for any @xmath22 .",
    "the best randomized algorithm has time complexity @xmath23 for any @xmath22 . for a comprehensive survey of this problem see  @xcite chapter 3",
    "obviously , the preprocessing time for enumerating irreducible polynomials can not be less than the time for constructing one .",
    "therefore , @xmath24 for the deterministic algorithm , and @xmath25 for the randomized algorithm .",
    "the main idea of the enumeration algorithm is to enumerate the roots of the irreducible polynomials in the extension field and then construct the polynomials from their roots .",
    "let @xmath6 be the extension field of @xmath3 of size @xmath26 .",
    "one possible representation of the elements of the field @xmath6 is by polynomials of degree at most @xmath27 in @xmath28/(f(\\beta))$ ] where @xmath29 is an irreducible polynomial of degree @xmath0 .",
    "a _ normal basis _ of @xmath6 is a basis over @xmath3 of the form @xmath30 for some @xmath31 where @xmath32 is linearly independent .",
    "the _ normal basis theorem _ states that for every finite field @xmath6 there is a normal basis @xmath32 .",
    "that is , an @xmath33 for which @xmath32 is linearly independent over @xmath3 .",
    "it is known that such an @xmath33 can be constructed in deterministic time @xmath34 and randomized time @xmath35",
    "the enumeration algorithm will use the normal basis for representing the elements of @xmath6 .",
    "notice that the time complexity to find such an element @xmath33 is less than constructing one irreducible polynomial .",
    "if we use the normal basis @xmath32 for the representation of the elements of @xmath6 , then every element @xmath36 has a unique representation @xmath37 where @xmath38 for all @xmath39 .",
    "it is known that any irreducible polynomial @xmath40 of degree @xmath0 over @xmath3 has @xmath0 distinct roots in @xmath6 .",
    "if one can find one root @xmath36 of @xmath40 then the other roots are @xmath41 and therefore @xmath42 .",
    "the coefficients of @xmath43 can be computed in quadratic time @xmath44 .",
    "see theorem  a and  b in  @xcite and references within .",
    "the element @xmath37 is a root of an irreducible polynomial of degree @xmath0 if and only if @xmath45 are distinct .",
    "now since @xmath46 @xmath47 is a root of an irreducible polynomial of degree @xmath0 if and only if the following @xmath0 elements @xmath48 @xmath49 are distinct .",
    "when ( [ ddd ] ) happens then we call @xmath50 _ aperiodic word_.",
    "we will write @xmath51 as a word @xmath52 and define @xmath53 . therefore    we have    1 .   for any word @xmath54",
    "the element @xmath55 is a root of an irreducible polynomial of degree @xmath0 if and only if @xmath51 is an aperiodic word .",
    "2 .   given an aperiodic word @xmath51 , the irreducible polynomial @xmath56 can be constructed in time ] @xmath57 .",
    "obviously , the aperiodic word @xmath58 and @xmath59 @xmath60 @xmath61 corresponds to the same irreducible polynomial .",
    "see  ( [ pk ] ) .",
    "that is , @xmath62 for any @xmath63 .",
    "therefore to avoid enumerating the same polynomial more than once , the algorithm enumerates only the minimum element ( in lexicographic order ) among @xmath64 .",
    "such an element is called _",
    "lyndon word_. therefore    the word @xmath52 is called a lyndon word if @xmath65 for all @xmath66 .",
    "to enumerate all the irreducible polynomials the algorithm enumerates all the lyndon words of length @xmath0 and , for each one , it computes the corresponding irreducible polynomial .    in the next section ,",
    "we show how to enumerate all the lyndon words of length @xmath0 in linear delay time @xmath67",
    ". then from @xmath55 ( that corresponds to an irreducible polynomial ) the algorithm constructs the irreducible polynomial @xmath68 and all the other @xmath27 roots in quadratic time  @xmath69 .",
    "since the size of all the roots is @xmath70 , this complexity is quasilinear in the output size . for the problem of enumerating only the roots ( one root for each irreducible polynomial ) the delay time is @xmath67 .",
    "let @xmath12 be the set of all lyndon words over @xmath3 of length  @xmath0 .",
    "we have shown how to reduce our problem to the problem of enumerating all the lyndon words over @xmath3 of length @xmath0 with linear delay time .",
    "algorithm `` enumerate '' in figure  [ alg ] shows the reduction .",
    "putting all the above algebraic complexities together , we get the following    let @xmath22 be any constant . there is a randomized enumeration algorithm for    1 .",
    "the irreducible polynomial over @xmath3 and their roots in @xmath6 in preprocessing time @xmath71 and delay time @xmath72 .",
    "2 .   the roots in @xmath6 of irreducible polynomials of degree @xmath0 over @xmath3 in preprocessing time @xmath71 and delay time @xmath67 .    let @xmath22 be any constant .",
    "there is a deterministic enumeration algorithm for    1 .",
    "the irreducible polynomial over @xmath3 and their roots in @xmath6 in preprocessing time @xmath73 and delay time @xmath74 @xmath75 .",
    "2 .   the roots in @xmath6 of irreducible polynomials of degree @xmath0 over @xmath3 in preprocessing time @xmath76 and delay time @xmath67 .",
    "in this section we give duval s algorithm ,  @xcite , that enumerates all the lyndon words of length at most @xmath0 , @xmath77 , in linear delay time and change it to an algorithm that enumerates the lyndon words of length @xmath0 , @xmath12 in linear time .",
    "we will use a simple data structure that enable the algorithm to give the next lyndon word of length @xmath0 in duval s algorithm in a constant update per symbol and therefore in linear time .",
    "let @xmath78 be the alphabet with the order @xmath79 .",
    "we here identify @xmath3 with @xmath80 .",
    "we will sometime write the symbols in brackets .",
    "for example for @xmath81 the word @xmath82",
    "^ 2[q-3]$ ] is @xmath83 .",
    "let @xmath84 be a lyndon word for some @xmath85 . to find the next lyndon word , ( of length @xmath86 ) duval s algorithm first define the word @xmath87 of length @xmath0 where @xmath11 is a non - empty prefix of @xmath11 and @xmath88 ( and therefore @xmath89 ) .",
    "that is , @xmath90 . then if @xmath91 is of the form @xmath92^t$ ] where @xmath93 and @xmath94 $ ] then the next lyndon word in duval s algorithm is @xmath95 $ ] .",
    "we denote the next lyndom word of @xmath11 ( in duval s algorithm ) by @xmath96 .",
    "for example , for @xmath97 , @xmath98 and @xmath99 , @xmath100 and @xmath101 .",
    "then @xmath102 .",
    "the following lemma is well known .",
    "we give the proof for completeness    [ increase ] if @xmath11 is a lyndon word and @xmath103 then @xmath104 .",
    "let @xmath105^t$ ] where @xmath94 $ ] .",
    "then @xmath106 because otherwise we would have @xmath107^tu < ub[q-1]^t = w$ ] and then @xmath11 is not a lyndon word .",
    "let @xmath108 where @xmath88 and @xmath109 is a nonempty prefix of @xmath11 . since @xmath110 we have @xmath111 .",
    "since @xmath112 , we have that @xmath113      in this subsection we give the data structure and the algorithm that finds the next lyndon word of length @xmath0 in linear time .",
    "we note here that , in the literature , the data structure that is used for the lyndon word is an array of symbols .",
    "all the analyses of the algorithms in the literature treat an access to an element in an @xmath0 element array and comparing it to another symbol as an operation of time complexity equal to  @xmath114 .",
    "the complexity of incrementing / decrementing an index @xmath115 of an array of length @xmath0 and comparing two such indices are not included in the complexity . in this paper ,",
    "the lyndon words are represented with symbols and _ numbers _ in the range @xmath116 $ ] .",
    "every access to an element in this data structure and comparison between two elements are ( as in literature ) counted as an operation of time complexity equal @xmath114 .",
    "operations that are done on the indices of the array ( as in literature ) are not counted but their time complexity is linear in the number of updates .",
    "let @xmath117 .",
    "we define the _ compressed representation _ of @xmath91 as @xmath118^{i_1}v^{(1)}[q-1]^{i_2}\\cdots v^{(t-1)}[q-1]^{i_t}$ ] where @xmath119 are not zero ( @xmath120 may equal to zero ) and @xmath121 are nonempty words that do not contain the symbol @xmath82 $ ] . if @xmath91 do not contain the symbol @xmath82 $ ] then @xmath118 ^ 0 $ ] where @xmath82 ^ 0 $ ] is the empty word and @xmath122 . the data structure will be an array ( or double link list ) that contains @xmath123 if @xmath124 and @xmath125 otherwise .",
    "define @xmath126 .",
    "this is the _ compressed length _ of the compressed representation of @xmath91 .",
    "notice that for a word @xmath127 that ends with a symbol @xmath128 $ ] we have @xmath129 $ ] and for @xmath130^i$ ] we have @xmath131",
    ". therefore @xmath132 .",
    "let @xmath118^{i_1}v^{(1)}[q-1]^{i_2}\\cdots v^{(t-1)}[q-1]^{i_t}$ ] be any lyndon word of length @xmath0 .",
    "the next lyndon word in duval s algorithm is @xmath133^{i_1}v^{(1)}[q-1]^{i_2}\\cdots [ q-1]^{i_{t-1}}\\cdot p(v^{(t-1)})\\ ] ] to find the next lyndon word @xmath134 after @xmath135 we take @xmath136 of length @xmath0 where @xmath137 is a nonempty prefix of @xmath135 and then @xmath138 .",
    "this is because @xmath139 $ ] . since by lemma  [ increase ] , @xmath140 we will eventually get a lyndon word of length @xmath0",
    "we now show that using the compressed representation we have    [ kkk]the time complexity of computing @xmath141 from @xmath142 is at most @xmath143 .",
    "let @xmath144^{i_1}w^{(1)}[q-1]^{i_2}\\cdots w^{(t-1)}[q-1]^{i_t}$ ] of length less than @xmath0 .",
    "then @xmath145 where @xmath146 is a nonempty prefix of @xmath142 .",
    "so it is enough to show that @xmath147 can be computed in at most @xmath148 time .",
    "notice that the length of @xmath146 is @xmath149 ( here the mod is equal to @xmath150 if @xmath150 divides @xmath0 ) . since @xmath146 is a prefix of @xmath142 we have that , in the compressed representation , @xmath151^{i_1}w^{(1)}[q-1]^{i_2}\\cdots w^{(t'-1)}[q-1]^{i_{t'}}$ ] for some @xmath152",
    ". then @xmath153^{i_1}w^{(1)}[q-1]^{i_2}\\cdots p(w^{(t'-1)})$ ] .",
    "therefore the complexity of computing @xmath147 is @xmath154    from the above lemma it follows that    [ th3 ] let @xmath91 be a lyndon word of length @xmath0 . using the compressed representation ,",
    "the next lyndon word of length @xmath0 can be computed in linear time .    to compress @xmath91 and find",
    "@xmath155 we need a linear time . by lemma  [ increase ]",
    "the lyndon words after @xmath91 are @xmath156 where @xmath157 . by lemma  [ kkk ]",
    "the time complexity of computing the next lyndon word @xmath158 of length @xmath0 is @xmath159 .",
    "then decompressing the result takes linear time .",
    "we now give a case where duval s algorithm fails to give the next lyndon word of length @xmath0 in linear time .",
    "consider the lyndon word @xmath160 of length @xmath161 .",
    "the next lyndon word in duval s algorithm is @xmath162 . then @xmath163",
    "to get to the next lyndon word of length @xmath0 , @xmath164 , the algorithm does @xmath165 updates .",
    "in this section , we show that our algorithm in the previous section is cat algorithm .",
    "that is , it has a constant amortized update cost .",
    "we first give some notation and preliminary results .",
    "let @xmath166 be the number of lyndon words of length @xmath0 , @xmath167 for all @xmath168 and @xmath169 .",
    "it is known from  @xcite that for @xmath170 and any @xmath4 @xmath171 and for any @xmath0 and @xmath4 @xmath172 and @xmath173 denote by @xmath174 the number of lyndon words of length @xmath0 of the form @xmath105^i$ ] where @xmath175 .",
    "then @xmath176 . let @xmath177 be the number of lyndon words of length @xmath0 that ends with the symbol @xmath178 $ ] .",
    "that is , of the form @xmath179 $ ] .    for the analysis we will use the following .",
    "let @xmath105^t\\in \\sigma^n$ ] where @xmath175 and @xmath180 .",
    "if @xmath105^t$ ] is a lyndon word of length @xmath0 then @xmath181 $ ] is a lyndon word .",
    "in particular , @xmath182",
    "if @xmath183 $ ] is a lyndon word of length @xmath0 then @xmath184 $ ] is a lyndon word . in particular , @xmath185    [ klkl ]    if @xmath105^t$ ] is lyndon word of length @xmath0 then the next lyndon word in duvel s algorithm is @xmath186^t))=p(ub[q-1]^t)=u[b+1]$ ] .    if @xmath183 $ ] is a lyndon word of length @xmath0 then @xmath187 $ ] is the next lyndon word in duvel s algorithm .",
    "the amortized number of updates of listing all the lyndon words of length at most @xmath0 in duval s algorithm is  @xcite @xmath188 we now show that    using the compressed representation the amortized number of updates for enumerating all the lyndon words of length exactly @xmath0 is at most @xmath189    the number of lyndon words of length @xmath0 of the forms @xmath190 where @xmath191 , @xmath192 $ ] and @xmath193 $ ] is @xmath194 .",
    "the next word of length @xmath0 is @xmath181 $ ] .",
    "so each such word takes one update to find the next word . for words that end with the symbol @xmath178 $ ]",
    "we need to change this symbol to @xmath82 $ ] and plausibly merge it with the previous one in the compressed representation .",
    "this takes at most two updates .",
    "one for removing this symbol and one for merging it with the cells of the form @xmath82^t$ ] .",
    "therefore for such words we need @xmath195 updates .",
    "thus , for lyndon words that do not ends with @xmath82 $ ] we need @xmath196 updates .    for strings of the form @xmath105^t$ ] where @xmath192 $ ] and @xmath180 we need at most @xmath197 updates and therefore at most @xmath198 for all such words .",
    "see the proof of theorem  [ th3 ] .",
    "therefore , the total updates is at most @xmath199 by lemma  [ klkl ] , this is at most @xmath200 now , the amortized update is @xmath201    by ( [ one ] ) , ( [ two ] ) and ( [ three ] ) we get @xmath202",
    "in this subsection , we study the complexity of deciding membership in @xmath12 . that is , given a word @xmath203 .",
    "decide whether @xmath204 is in @xmath12 .",
    "since @xmath205 if and only if for all @xmath206 , @xmath207 , and each comparison of two words of length @xmath0 takes @xmath67 operations , membership can be decided in time @xmath70 .",
    "duval in @xcite gave a linear time algorithm .",
    "in this subsection , we give a simple algorithm that decides membership in linear time . to this end",
    ", we need to introduce the suffix tree data structure .",
    "the suffix tree of a word @xmath208 is a trie that contains all the suffixes of @xmath208 .",
    "see for example the suffix tree of the word @xmath209 in figure  [ suffixtree ] . a suffix tree of a word @xmath208 of length @xmath0 can be constructed in linear time in @xmath0  @xcite . using the suffix tree , one can check if a word @xmath210 of length @xmath211 is a suffix of @xmath208 in time @xmath212 .",
    "denote by @xmath213 the suffix tree of @xmath208 .",
    "define any order @xmath7 on the symbols of @xmath208 .",
    "define min@xmath214 as follows : start from the root of the trie and follow , at each node , the edges with the minimal symbol .",
    "then min@xmath214 is the word that corresponds to this path .",
    "one can find this word in @xmath213 in time that is linear in its length .",
    "the function @xmath215 defines the following total order @xmath216 on the suffixes : let @xmath217 .",
    "take @xmath218 as the minimum element in that order .",
    "now remove this word from @xmath219 and take @xmath218 as the next one in that order .",
    "repeat the above until the tree is empty .",
    "for example , if @xmath220 then the order in the suffix tree in figure  [ suffixtree ] is @xmath221 obviously , for two suffixes @xmath208 and @xmath222 , @xmath223 if and only if for @xmath224 we have @xmath225 ( in the lexicographic order ) .",
    "we define @xmath226 the suffix tree of the suffixes of @xmath208 of length at least @xmath227 .",
    "we can construct @xmath226 in linear time in @xmath228 by taking a walk in the suffix tree @xmath213 and remove all the words of length less than @xmath227 . in the same way as above",
    ", we define @xmath229 .",
    "the algorithm is in figure  [ alg02 ] .",
    "we use lemma  [ cond01 ] .",
    "the algorithm constructs the trie @xmath235 .",
    "the construction takes linear time in @xmath255 and therefore linear time in @xmath0 .",
    "finding @xmath256 in a trie takes linear time .",
    "f. ashari - ghomi , n. khorasani , a. nowzari - dalini .",
    "ranking and unranking algorithms for k - ary trees in gray code order . international scholarly and scientific research & innovation .",
    ". 833838 .",
    "( 2012 )              k. cattell , f. ruskey , j. sawada , m. serra , c. r. miers .",
    "fast algorithms to generate necklaces , unlabeled necklaces , and irreducible polynomials over gf(2 ) .",
    "_ j. algorithms . _",
    "267 - 282 ."
  ],
  "abstract_text": [
    "<S> in this paper we give a detailed analysis of deterministic and randomized algorithms that enumerate any number of irreducible polynomials of degree @xmath0 over a finite field and their roots in the extension field in quasilinear where @xmath1 is the size of the output . </S>",
    "<S> ] time cost per element .    </S>",
    "<S> our algorithm is based on an improved algorithm for enumerating all the lyndon words of length @xmath0 in linear delay time and the known reduction of lyndon words to irreducible polynomials . </S>"
  ]
}