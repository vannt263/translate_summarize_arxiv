{
  "article_text": [
    "most groups involved in the international linear collider detector studies have their own simulation software applications .",
    "these applications are written in a variety of languages and support their own file formats for making data persistent in between the different stages of the simulation _",
    "( generator , simulation , reconstruction and analysis)_. the most common languages are java and c++ , but also fortran is still being used . in order to facilitate the sharing of results as well as comparing different reconstruction algorithms ,",
    "a common persistency format would be desirable .",
    "such a common scheme could also serve as the basis for a common software framework to be used throughout the international simulation studies .",
    "the advantages of such a framework are obvious , primarily to avoid duplication of effort .",
    "lcio is a complete persistency framework that addresses these issues . to that end lcio",
    "defines a data model , a user interface ( api ) and a file format for the simulation and reconstruction stages ( fig .",
    "[ fig_motivation ] ) .    ,",
    "width=302 ]      in order to allow the integration of lcio into currently existing software frameworks a java , a c++ and a fortran version of the user interface are needed .",
    "the data model defined by lcio has to fulfill the needs of the ongoing simulation studies and at the same time be flexible for extensions in order to cope with future requirements .",
    "it has become good practice to design persistency systems in a way that hides the actual implementation of the data storage mechanism from the user code .",
    "this allows to change the underlying data format without making nontrivial changes to existing code .",
    "in particular when writing software for an experiment that still is in the r&d phase one has to anticipate possible future changes in the persistency implementation .",
    "there are three major use cases for lcio : writing data ( _ simulation _ ) , reading and extending data ( _ reconstruction _ ) and read only access ( _ analysis _ ) .",
    "these have to be reflected by the design of the user interface ( api ) .",
    "one of the most important requirements is that an implementation is needed as soon as possible .",
    "the more software which has been written using incompatible persistency schemes , the more difficult it will be to incorporate a common approach . by choosing a simple and lightweight design for lcio we will be able to keep the development time to a minimum .",
    "before going into the details of the software design and realization of lcio we need to briefly describe the data model .",
    "one of the main goals of lcio is the unification of software that is used in the international linear collider community .",
    "thus the data model has to fulfill the current needs of the different groups working in the field as well as being expandable for future requirements .",
    ", width=302 ]    figure  [ fig_datamodel ] shows the data entities that are defined by lcio .",
    "the attributes currently stored for each entity basically form a superset of the attributes used in two simulation software frameworks , namely the java based _ hep.lcd _  @xcite framework , used by some u.s .",
    "groups and the european framework - consisting of the _ mokka _  @xcite simulation and _ brahms _",
    "@xcite reconstruction program .",
    "these two frameworks are also the first implementors of lcio . as other groups join in using lcio ,",
    "their additional requirements can be taken into account by extending the data model as needed .",
    "a detailed description of the attributes can be found at  @xcite .",
    "various header records hold generic descriptions of the stored data .",
    "the _ event _ entity holds collections of simulation and reconstruction output quantities .",
    "_ mcparticle _ is the list of generated particles , possibly extended by particles created during detector response simulation ( e.g. @xmath0 ) .",
    "the simulation program adds hits from tracking detectors and calorimeters to the two generic hit entities _",
    "trackerhit _ and _ calorimeterhit _ , thereby referencing the particles that contributed to the hit at hand . pattern recognition and cluster algorithms in the reconstruction program",
    "create tracks and clusters - stored in _",
    "track _ and _ cluster _ respectively - in turn referencing the contributing hit objects .",
    "these references are optional as we foresee that hits may be dropped at some point in time .",
    "so called particle flow algorithms create the list of _ reconstructedparticles _ from tracks and clusters .",
    "this is generally done by taking the tracker measurement alone for charged particles and deriving the kinematics for neutral particles from clusters not assigned to tracks . by combining particles from the original list of reconstructed particles additional lists of the same type",
    "might be added to the event , ( e.g. heavy mesons , jets , vertices ) .",
    "objects in these lists will point back to the constituent particles ( self reference ) .",
    "as mentioned in the previous section , lcio will have a java , c++ and a fortran implementation . as it is good practice",
    "nowadays we choose an object oriented design for lcio  ( [ sec_design ] ) .",
    "the visible user interfaces ( api ) for java and c++ are kept as close as this is feasible with the two languages  ( [ sec_javacpp ] ) . for fortran",
    "we try to map as much as possible of the oo - design onto the actual implementation  ( [ sec_fortran ] ) .      here",
    "we give an overview of the basic class design in lcio and how this reflects the requirements described in section  [ sec_requirements ] .",
    "one of the main use cases is to write data from a simulation program and to read it back into a reconstruction program using lcio . in order to facilitate the incorporation of lcio for writing data into existing simulation applications we decided to have a minimal interface for the data objects .",
    "this minimal interface has as small a number of methods as possible , making it easy to implement within already existing classes .",
    "figure  [ fig_simclass ] shows        a uml class diagram of this minimal interface .",
    "the lcio implementation uses just this interface to write data from a simulation program .",
    "the _ lcevent _ holds untyped collections of the data entities described in section  [ sec_datamodel ] .",
    "in order to achieve this for c++ we introduced a tagging interface _ lcobject _ , that does not introduce any additional functionality .",
    "_ lcfloatvec _ and _ lcintvec _ enable the user to store arbitrary numbers of floating point or integer numbers per collection ( e.g by storing a vector of size three in a collection that runs parallel to a hit collection one could add a position to every hit from a particular subdetector , if this was needed for a particular study ) .",
    "the same interface can be used for read only access to the data . for the case of reading and modifying data , e.g. in a reconstruction program , we provide default implementations for every object in the minimal interface .",
    "these implementation classes also have _ set methods _ and can be instantiated by the user for writing lcio data files .",
    "figure  [ fig_ioimplclass ] shows the implementation _ lceventimpl _ of the _ lcevent _ interface together with the interface and implementation of the io - classes .",
    "the _ lcwriter _ uses just the abstract interface of the data objects , thus not relying on the default implementation .",
    "the _ lcreader _ on the other hand uses the default implementations provided by lcio .",
    "these are instantiated when reading events and accessed by the user either via the abstract interface , i.e. read only , or their concrete type for modification of the data .",
    "the concrete implementations _ siowriter _ and _ sioreader _  ( [ sec_sio ] ) are hidden from the user by exploiting a factory pattern .",
    "therefore user code does not depend on the concrete data format .",
    "the interface of _ lcwriter _ is rather simple - it allows to open and close files ( data streams ) and to store event and run data .",
    "the _ lcreader _ interface allows to access data in several ways :    * read run by run in the file + - provides no access to event information * read event by event in the file + - standard way of analyzing events in a simple analysis program * quasi direct access to a given event + - currently implemented using a fast skip mechanism  ( [ sec_sio ] ) *   call - back mechanism to read run and event data + - users can register modules that implement a listener interface ( observer pattern ) with the _ lcreader _ + - these modules will be called in the order they have been registered + - this can be used e.g. in a reconstruction program where one typically has separate modules for different algorithms that have to be called in a given order    when reading data , the minimal interface described above just provides access to the data in the form it had been made persistent",
    ". sometimes it might be convenient to have different parameterizations of the data .",
    "convenience methods providing the needed transformations ( e.g. @xmath1 and @xmath2 instead of @xmath3 ) could be added to the existing interface by applying decorator classes to the minimal interface .",
    "the user interface for java and c++ is defined with the aid  @xcite ( abstract interface definition ) tool from freehep.org .",
    "it allows to define the interface in a java like syntax with c++ extensions and automatically creates files with java interfaces and headers with pure abstract base classes for c++ .",
    "aid keeps the comments from the original files , thus allowing to use standard tools for documenting the source code and the user interface .",
    "we use _ javadoc _",
    "@xcite and _ doxygen _",
    "@xcite for the java and c++ implementation respectively .",
    "the current api documentation can be found on the lcio homepage  @xcite .",
    "starting from a common definition of the interface for the two languages , one could think of having a common implementation underneath in either java or c++ .",
    "frameworks exist that allow calling of either language from within the other , e.g. _ jni _ to call objects coded in c++ from java .",
    "the advantage for the developers clearly is the need to develop and maintain only one implementation .",
    "but this comes at the price of having to install ( and maintain ) additional libraries for the user community of the other language . in particular",
    "one of the great advantages of java is the machine independence of _ pure java _ which would be lost when using _",
    "jni_. this is why we decided to have two completely separate implementations in either language - commonality of the api is guaranteed by the use of aid and compatibility of the resulting files has to be assured by ( extensive ) testing .      in order to support _ legacy software _",
    ", e.g. the brahms  @xcite reconstruction program , a fortran interface for lcio is a requirement .",
    "another reason for having a fortran interface is the fact that a lot of physicists have not yet made the paradigm switch towards oo - languages .",
    "so to benefit from their knowledge one has to provide access to simulated data via fortran .",
    "almost all platforms that are used in high energy physics have a c++ development environment installed .",
    "thus by providing suitable wrapper functions it is possible to call the c++ implementation from a fortran program without the need of having to install additional libraries .",
    "fortran is inherently a non - oo - like language , whereas the the api of lcio is . in order to mimic the oo - calling sequences in fortran we introduce one wrapper function for each objects member function .",
    "these wrapper functions have an additional integer argument that is converted to the c++ pointer to the corresponding object . by using integer*8 for these integers",
    "we avoid possible problems on 64  bit architectures ( as by specification there is no guarantee that c++ pointers and fortran integers are the same size ) .",
    "two additional functions are needed for every object : one for creating and one for deleting the object .",
    "the wrapper functions are implemented using the well known cfortran.h  @xcite tool for interfacing c++ and fortran . by applying this",
    "scheme fortran users have to write code that basically has a one to one correspondence to the equivalent c++ code .",
    "this will facilitate the switching to java or c++ in the future .      as a first concrete data format for lcio we chose to use sio ( serial input output ) .",
    "sio has been developed at slac and has been used successfully in the _",
    "hep.lcd _ framework .",
    "it is a serial data format that is based on xdr and thus machine independent .",
    "while being a sequential format it still offers some oo - features , in particular it allows to store and retrieve references and pointers within one record .",
    "in addition sio includes on the fly data compression using zlib .",
    "sio does not provide any direct access mechanism in itself .",
    "if at some point direct access becomes a requirement for lcio it has to be either incorporated into sio or the underlying persistency format has to be changed to a more elaborated io - system .",
    "we presented lcio , a persistency framework for linear collider simulation studies .",
    "lcio defines an extensible data model for ongoing simulation studies , provides the users with a java , c++ and fortran interface and uses sio as a first implementation format .",
    "_ framework in the us and the european framework - based on _ mokka _ and _ brahms _ - incorporate lcio as their persistency scheme .",
    "the lightweight and open design of lcio will allow to quickly adapt to future requirements as they arise .",
    "agreeing on a common persistency format could be the first step towards a common software framework for a future linear collider .",
    "we invite all groups working in this field to join us in using lcio in order to avoid unnecessary duplication of effort wherever possible",
    ".    9 lcio homepage : + ` http://www-it.desy.de/physics/projects/simsoft/lcio/index.html ` hep.lcd homepage : + ` http://www-sldnt.slac.stanford.edu/jas/documentation/lcd ` mokka homepage : + ` http://polywww.in2p3.fr/geant4/tesla/www/mokka/mokka.html ` brahms homepage : + ` http://www-zeuthen.desy.de/ ` + ` lc_repository / detector_simulation / dev / brahms / readme.html ` aid homepage : + ` http://java.freehep.org/aid/index.html ` javadoc homepage : + ` http://java.sun.com/j2se/javadoc ` doxygen homepage : + ` http://www.stack.nl/~dimitri/doxygen ` cfortran homepage : + ` http://www-zeus.desy.de/~burow/cfortran/ `"
  ],
  "abstract_text": [
    "<S> almost all groups involved in linear collider detector studies have their own simulation software framework . </S>",
    "<S> using a common persistency scheme would allow to easily share results and compare reconstruction algorithms . </S>",
    "<S> we present such a persistency framework , called lcio ( linear collider i / o ) . the framework has to fulfill the requirements of the different groups today and be flexible enough to be adapted to future needs . to that end </S>",
    "<S> we define an ` abstract object persistency layer ' that will be used by the applications . a first implementation , based on a sequential file format ( sio ) is completely separated from the interface , thus allowing to support additional formats if necessary . </S>",
    "<S> the interface is defined with the aid ( abstract interface definition ) tool from freehep.org that allows creation of java and c++ code synchronously . in order to make use of legacy software a fortran interface </S>",
    "<S> is also provided . </S>",
    "<S> we present the design and implementation of lcio . </S>"
  ]
}