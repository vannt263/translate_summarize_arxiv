{
  "article_text": [
    "recent research in molecular biology requires strong computational support to cope with the ever increasing amount of biological data .",
    "bioinformatics is the area of science concerned with the development of computational tools and methods for the analysis and management of biological data .",
    "currently many biologists use bioinformatics tools as an essential part of their analysis either to generate hypotheses before going to lab or to analyze the resulting data .",
    "this practice is clearly of great benefit to speed up research process .",
    "however , it is in many cases not feasible due to two reasons : first , most bioinformatics tools are written for unix / linux operating systems , whereas life scientists are familiar more with the windows environment .",
    "second , these tools are not easily adapted to run under compute cluster , which hinders the running of compute intensive jobs .    in this paper , we introduce winbioinftools , a toolkit containing a number of bioinformatics software tools running under windows hpc cluster 2008 .",
    "winbioinftools is the result of an interoperability project between some open source projects ( coconutand others ) that were already developed for the community by mohamed abouelhoda ( from nile university ) and between microsoft egypt and cairo microsoft innovation center . in this pilot phase of winbioinftools",
    ", we decided to start with three basic tools used in analyzing and comparing genomic sequences .",
    "these tools include    1 .",
    "coconut , which is used for comparing whole genomic sequences , 2 .",
    "blast , which is used for searching biological databases , and 3 .",
    "an implementation of the standard sequence alignment algorithm .    in this paper",
    "we discuss how the tools mentioned above were ported to run under windows and how they were adapted to run over the cluster architecture .",
    "moreover , we present some experimental results showing that the performance of the tools on a cluster is superior to that on a single machine . furthermore , we report results about comparing the performance of the windows based versions of these tools to the corresponding linux versions .",
    "the experimental results we obtained and our experience in using the linux and windows platform show the following advantages for windows hpc server 2008 :    * it is easier to download than linux based systems ; ant out of the box solution with rich and informative documentation * it is very user friendly , even the layman whose focus is on using readymade tools and focusing solely on data analysis can handle it in a straightforward way .",
    "moreover , the gui saves user time and relieves those users with no computational background from writing sophisticated command lines .",
    "* the windows cluster management tools and the job scheduler is very user friendly with intuitive interface and efficiency in practical implementation . * the ms - mpi ( microsoft implementation of mpi ) runs smoothly through the visual studio , i.e. , easy to compile and run .",
    "it also has the feature to run virtually over many cores .",
    "furthermore , the debugging features of the visual studio 2008 which support development of parallel algorithms are very helpful and speed up the development cycle , compared to the traditional linux based mpich2 and the native linux debuggers .",
    "regarding performance , we noticed that the windows versions of these tools are comparatively equal to the linux versions and in some instances slightly slower .",
    "the latter observation is in large part attributed to differences in the underlying io methods of the operating system and not to the high performance computing components .",
    "( hpc components are basically responsible for communication between nodes and the job scheduler . )",
    "it is also attributed to some extent to the fact that the native code of those applications was written specifically on linux .",
    "hence , more tweaking of the code is needed after porting to optimize the performance .",
    "in computer science terminology , a dna sequence is a string over an alphabet of 4 characters , where each character corresponds to a chemical unit called nucleotide .",
    "a protein sequence is also modeled as a string over an alphabet of 20 characters , where each character corresponds to a chemical unit called amino acid .",
    "a basic problem in bioinformatics is to find the regions of sequence similarity and difference among biological sequences . in biology ,",
    "similar regions refer to common function and origin , while different regions refer to traits unique to the respective organism .",
    "biologists call the differences between sequences mutations , where in a mutation event one nucleotide ( character ) replaces another one in the other sequence or one nucleotide ( character ) is deleted / inserted from / in a sequence . in computer science , these types of differences",
    "are modeled as edit operations , where replacements are called mismatches if the characters are different , insertion / deletions are called indel ( or also gaps),and common characters are called matches . the computational model of identifying the differences is called alignment , where one sequence is drawn on a line and the other on another line such that the matching / mismatching characters are put above each other , and gaps are represented by a special symbol , like `` - '' or `` _ '' .",
    "figure [ fig:1 ] ( left ) shows an example of two sequences aligned together .",
    "if each of the edit operations is assigned a score , then the alignment can be scored by summing the individual edit operation scores .",
    "an optimal alignment is the one of highest score .",
    "for example , if a match scores 1 , a mismatch scores -1 , and a gap scores -1 , then an optimal alignment will maximize the characters matching each other .",
    "the algorithm of needleman and wunsch @xcite is based on the dynamic programming paradigm to efficiently compute an optimal alignment for two sequences , where an optimal alignment can be decomposed into optimal sub - alignments .",
    "more precisely , for two sequences @xmath0 ( of length @xmath1 ) and @xmath2 ( of length @xmath3 ) , the alignment at position @xmath4 in @xmath0 and @xmath5 in r can be computed in terms of optimal alignment at positions @xmath6 and @xmath7 .",
    "let @xmath8 denote the cost of a match , @xmath9 denote the cost of a mismatch , and @xmath10 denote the cost of a gap , and let @xmath11 denote the score of an optimal alignment ending at position @xmath4 in @xmath0 and @xmath5 in @xmath2 .",
    "let @xmath12 , @xmath13 , for all @xmath14 , @xmath15 , the following recurrence computes an optimal alignment .    @xmath16=s[j]$}\\\\    a(i-1,j-1)+\\beta   & \\textrm{if $ s[i ] \\ne",
    "s[j]$}\\\\    a(i-1,j)+\\delta    & \\\\    a(i , j-1)+\\delta &     \\end{array } \\right.\\ ] ]    the intermediate optimal scores of this recurrence can be stored in a table ( 2d alignment matrix ) , where an entry @xmath17 tabulates the optimal score at positions @xmath4 in @xmath0 and @xmath5 in @xmath2 .",
    "the matrix is filled starting from the cell @xmath18 in a row - wise , column - wise , or diagonal - wise fashion until reaching position @xmath19 , where the optimal alignment score is retrieved .",
    "note that according to the recurrence given above , computing the score at position @xmath17 in the matrix depends on the score at positions @xmath20 , @xmath21 , @xmath22 .",
    "figure [ fig:1 ] ( right ) shows an example of an alignment matrix .",
    "the running time and space consumption of this algorithm is quadratic , and a computing cluster provides a good solution to this problem , especially when memory consumption presents a bottle neck .",
    "the idea of a cluster based algorithm is to divide the alignment matrix over the cluster nodes and let each node compute the recurrence for that portion of the matrix @xcite .",
    "the matrix can be filled in a diagonal - wise fashion , where the master node can synchronize the diagonal moves between all nodes .",
    "note that at the boundaries of the matrix portions , some nodes need to exchange messages to find out the values in certain cells .",
    "figure [ fig:2 ] illustrates the process of filling the alignment matrix over four cluster nodes .",
    "+      we developed a version of the global sequence alignment algorithm that runs under cluster platform .",
    "note that this type of using cluster platform is categorized as compute cluster where the cluster nodes cooperate and exchange messages to solve the problem .",
    "we used mpi to share values among the cluster nodes and to synchronize the tabulation process .",
    "we implemented a linux based version and a windows based version and compared the performance of one version to the other on a single machine and on a cluster of four nodes , see section [ sec : experimentalresults ] .",
    "the genome is the total dna in a cell . in higher organisms , like humans",
    ", the genome is divided into many units called chromosomes .",
    "genome comparison boils down to identifying regions of similarity and difference among two or multiple genomes , where the common regions should have common function and the different regions can refer to features unique to the respective genome .",
    "the task of comparing genomes is complicated by three factors :    * large genome sizes , where the simplest bacterial genomes are in the range of mega characters and higher organisms can reach the multi giga character range . * rearrangement events , where segments of the genome change order and direction . * mutation events , where the similar regions might contain character replacement , and/or deletion / insertion .    to cope with the large genomic sequences",
    ", coconut@xcite finds regions of high similarity using the anchor - based strategy that is composed of three phases :    1 .",
    "computation of fragments ( short exact matches among genomic sequences ) .",
    "this step is efficiently carried out using the enhanced suffix array ( implemented in third party packages like vmatch or genometools ) .",
    "2 .   computation of highest - scoring chains of collinear fragments ( chains are defined below ) . each of these highest scoring chains corresponds to a region of similarity .",
    "the fragments in each of such chains are the anchors .",
    "these chains are efficiently computed using the program _",
    "3 .   post processing the resulting chains , which includes , e.g. , visualizing and aligning the regions between the anchors of a chain using the standard dynamic programming algorithm .",
    ", @xmath20 , and @xmath22 .",
    "[ fig:2],title=\"fig : \" ] +    the rationale of generating fragments is that the regions harboring fragments are regions of potential similarity , while those regions containing no fragments are different and are excluded from further processing . to assert that the fragments actually constitute regions of similarity and did not appear by chance , they are further processed by the chaining algorithms .",
    "the chaining step is the core of the coconutsystem .",
    "here we explain more about the chaining problem and the algorithm solving it .",
    "given two genomes , a fragment is a similar region between the two genomes .",
    "more precisely , we use fragments of the type maximal exact matches defined as follows .",
    "if @xmath23 $ ] is the string representing the first genomic sequence and @xmath24 $ ] , a maximal exact match is a pair of substrings @xmath25 $ ] and @xmath26 $ ] such that the characters of these two strings are identical ( i.e. , @xmath25=s_2[i_2 .. j_2])$ ] and @xmath27 \\ne s_2[i_2 - 1]$ ] and @xmath28 \\ne s_2[j_2 + 1]$ ] , i.e. , the match can not be extended to the left and to the right in the two strings simultaneously . for a fragment",
    "@xmath29 corresponding to the maximal exact match of the substrings @xmath25 $ ] and @xmath26 $ ] , we write @xmath30 to denote the position at which the fragment starts in the first genomic sequence and write @xmath31 to denote the position at which the fragment ends in the second genomic sequence . in a two dimensional space , where the first sequence is the @xmath32-axis and",
    "the second sequence is the @xmath33-axis , a fragment can be represented by a rectangle whose extreme corner points are @xmath34 and @xmath35 . in the first phase of coconutwe compute all maximal exact matches of length at least @xmath36 using the genometoolspackage .",
    "a chain of fragments is a sequence of fragments @xmath37 such that for any two successive fragments @xmath38 and @xmath39 , we have @xmath40 and @xmath41 .",
    "the score of this chain is @xmath42 , where @xmath43 is its length , i.e. , @xmath44 .",
    "the chaining problem ( also known as sparse dynamic programming problem ) is to find , given a set of fragments , a chain c with highest score .",
    "the program _",
    "chainer_can find this highest scoring chain using techniques from computational geometry .",
    "it uses the line sweep paradigm , where the fragments are scanned with respect to one dimension .",
    "when a start point of a fragment is scanned we search for a fragment at which a highest scoring chain ends .",
    "the end point of this fragment should lie in the region bounded by the origin point @xmath18 and the currently scanned start point .",
    "this search is carried out efficiently by arranging the end points of the fragments in a kdtree and using a range maximum query over it , see @xcite for more details .",
    "coconutwas originally written to run on linux .",
    "therefore , we need to port it to the windows environment .",
    "the porting of coconutinvolves three modules : 1 ) fragment generation , 2 ) chaining , and 3 ) and plot generation to the windows environment .",
    "these modules are integrated in a single program interface written in perl .",
    "the perl based interface handles options and module parameters , and performs also input / output format transformation needed to integrate the different modules .",
    "the details of porting the three modules to windows are as follows .    1 .",
    "the first module is based on a third party package called genometools , which is open source package available at www.genometools.org . for compiling and building this package to run under windows , we investigated the application of the sua tool distributed with the windows hpc server 2008 and open source package cygwin . using cygwin ,",
    "the genometoolspackage could be compiled with minor modifications in the compilation options ( basically we switched off the fpic option )",
    ". once compilation is completed , genometoolscan run through either the cygwin or sua interface .",
    "( sua can be used to compile linux / unix native applications , but this did not work smoothly with genometools , because of some missing libraries . )",
    "the second module is based on the program _",
    "chainer _ , which was readily compiled using sua and cygwin , or any gcc compiler under windows .",
    "a version of it was also compiled using visual studio .",
    "the third module currently visualizes the resulting chains by producing a 2d plot of the comparison .",
    "this visualization step is achieved by running the open source gnuplot program . in next version ,",
    "we plan to add a module for producing detailed alignment .",
    "the correctness of the porting steps was verified by comparing the results of the windows version to the linux based version .",
    "performance comparison over a single node and a cluster of four nodes was also done and the results will be reported in the next section .    the system coconutwas wrapped to run under windows cluster to distribute all pairwise comparisons , given two multi - chromosomal genomes , on the cluster nodes ( i.e. , running in a load balancing mode ) .",
    "the job scheduler of the windows hpc server 2008 was used as the underlying cluster engine to achieve this task .",
    "another version of the cluster based coconutwas implemented to run under linux cluster .",
    "we compared the performance of the two versions of coconutby comparing human chromosomes to mouse chromosomes .",
    "the two versions run on the same hardware .",
    "the result of this comparison is given in the results section .",
    "a biological database is a collection of dna or protein sequences . given a biological sequence , usually a short one ,",
    "the program blast is used to find sequences similar to it .",
    "note that searching a database can be done using the standard alignment algorithm mentioned above , where the query sequence is aligned to each sequence in the database .",
    "but the running time is prohibitive , so the program blast @xcite , which implements a heuristic algorithm , is used for this task .",
    "blast finds the similar sequences in a time proportional to the database length and it is very fast in practice .",
    "blast is the most popular software tool in bioinformatics and it is available as open source .    in biological applications , the program blast is required to answer millions of queries , emerging either from remote users or from certain newly sequenced dna / protein segments . since the time in which blast finds similar sequences to a query is proportional to the database length , it is ideal to use compute clusters to divide ( segment ) the database and distribute each query job over the cluster nodes ; the results are then collected back to the master node @xcite .",
    "we developed a wrapper for blast ( called parallel blast ) that runs under windows cluster .",
    "specifically , we wrote a program that performs database segmentation and distributes the queries over the cluster nodes .",
    "we implemented two versions of this program to run under the windows cluster : one using mpi and one using the job scheduler .",
    "we also implemented another version running under linux and based on the mpi .",
    "in fact , handling blast queries can be done through the job scheduler with no need to write a specific mpi program .",
    "but the reason why we used mpi here is to measure communication time for answering queries , a parameter that can not be measured through job schedulers .",
    "the result of comparing the two versions based on mpi is given in the section about the experimental results .",
    "we performed experiments to compare the running time of the windows cluster versions of our programs to the corresponding versions running under linux cluster .",
    "the experiments we performed addressed the load balancing feature of the windows cluster by testing the windows job scheduler and they also addressed the compute cluster feature by testing the microsoft mpi implementation against the open source mpi implementation mpich2 .",
    "we used visual studio 2008 for compiling mpi based applications with the option `` profile guided optimization '' set on .",
    "the programs were executed on windows with the option `` -affinity '' set on in the job submission command line .",
    "the hardware setting for the experiments is given in appendix i. the cluster setting for windows is as follows : windows hpc server 2008 ( production version ) , ms - mpi with network direct for running mpi applications , affinity was set to 8 on each node ( we have 2 quad core processors ) .",
    "( we did not use openmpi in our code . )",
    "the linux cluster runs on the same hardware , where the windows cluster runs ( dual boot configuration ) .",
    "we used opensuse linux 10.3 as linux operating system and used mpich2 v.1.0.8 for mpi .",
    "we used mpd as process manager within mpich2 . in the coming subsection",
    ", we present the results of testing the load balancing feature .",
    "then in the next subsection we show the results of testing the mpi feature ."
  ],
  "abstract_text": [
    "<S> open source bioinformatics tools running under ms windows are rare to find , and those running under windows hpc cluster are almost non - existing . </S>",
    "<S> this is despite the fact that the windows is the most popular operating system used among life scientists . </S>",
    "<S> therefore , we introduce in this initiative winbioinftools , a toolkit containing a number of bioinformatics tools running under windows high performance computing server 2008 . it is an open source code package , where users and developers can share and add to . </S>",
    "<S> we currently start with three programs from the area of sequence analysis : 1 ) coconut for pairwise genome comparison , 2 ) parallel blast for biological database search , and 3 ) parallel global pairwise sequence alignment . in this report , we focus on technical aspects concerning how some components of these tools were ported from linux / unix environment to run under windows . </S>",
    "<S> we also show the advantages of using the windows hpc cluster 2008 . </S>",
    "<S> we demonstrate by experiments the performance gain achieved when using a computer cluster against a single machine . </S>",
    "<S> furthermore , we show the results of comparing the performance of winbioinftools on the windows and linux cluster .    [ [ availability ] ] * availability : * + + + + + + + + + + + + + + +    winbioinftools is open source package available at the nile university bioinformatics server ( http://www.nubios.nileu.edu.eg/tools/winbioinftools ) and at codeplex ( http://winbioinftools.codeplex.com ) . </S>"
  ]
}