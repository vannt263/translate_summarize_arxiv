{
  "article_text": [
    "a mobile ad - hoc network ( manet ) is comprised of several mobile devices connected by means of short - range wireless links , in which each device is a router for other devices as well as being an end host . in manets ,",
    "each device is free to operate itself independently , which provides a very flexible environment for users .",
    "furthermore , they do not require a pre - existing infrastructure , and they use multi - hop routing protocols for communication [ 1 ] .    despite all clear advantages and features of manets , there are also many challenging issues which have limited their usability .",
    "some of these challenges are dynamic network topology , limited resources available in participant devices , security issues [ 2 ] , and selfish behavior of devices causing problems such as denial of service ( dos ) [ 3 ] .",
    "such issues are more disruptive as network grows in size and becomes more complex .",
    "self - organization in manets provides efficient solutions for building large distributed systems , in which participant hosts communicate with one another in order to manage the network without the guidance of an external source .",
    "in general , self - organized communication networks are reliable , flexible , robust , and cost - effective [ 4 ] .",
    "as presented in [ 4 ] , self - organization can be implemented in two different levels : infrastructure and application .",
    "while the first one aims at self - organization in various communication layers of network management ( data link , network , transport ) , the second one intends to provide self - organization above such layers . in either level",
    ", a proper self - organizing algorithm is required in network .",
    "obviously , such algorithms should be evaluated under many different circumstances in order to prove their feasibility .",
    "subsequent to each test , the algorithm is modified , probable bugs and errors are corrected , and another test is performed .",
    "this time - consuming process continues until all tests are successful and the required performance measures are met .",
    "similar to other simulation platforms in the network context [ 5 ] [ 6 ] [ 7 ] , in this paper , we present a new simulation platform , called abmq , and based on qt .",
    "available : http://www.qt-project.org ] , which is suitable for modeling and simulation of self - organization in complex networks , and particularly manets .",
    "the main focus of abmq is on simulation of self - organization at application level while preserving the ability for simulating the infrastructure level algorithms .",
    "furthermore , it provides many useful features for reusing the codes and models developed over the simulation process in order to build real third - party applications .",
    "an agent - based approach is taken in implementation of abmq . in",
    "agent - based modeling and simulation ( abms ) , autonomous individuals ( i.e. , agents ) communicate and interact with each other , and also the environment , while their effect on the system is assessed as a whole [ 8 ] . in abmq , each participant device is considered an agent .",
    "such definition fits devices making up a manet , where autonomy is the most important characteristic of participants .",
    "following up the abms , several simulation platforms have been proposed in this context [ 9 ] .",
    "swarm is the first platform , development of which started in objective - c , then followed by java and named as java swarm [ 10 ] .",
    "repast is another java - based platform which is mainly designed for modeling and simulation in social sciences [ 11 ] . mason is also a java - based multi - agent toolkit in which the speed of computation is considered the priority [ 12 ] . among all these simulators",
    ", netlogo is the most professional platform which is also based on java [ 13 ] . using an initiative high - level programming language , netlogo is mainly designed for simulation of natural and social phenomena .",
    "however , none of these platforms provides a dedicated environment for modeling and simulation of self - organizing algorithms in manets , while enabling the capability to reuse the created models for developing real applications .",
    "the process of reusing the implemented models and codes can significantly decrease the required time for developing such applications . since such algorithms can target smartphones , tablets , laptops , and many other portable devices with different operating systems ( android , ios , symbian etc . ) , using a cross - platform development environment can substantially facilitate the deployment process .",
    "although it was possible to develop abmq upon programming environments such as java platform , we decided to base it on qt .",
    "the main reason for this selection was a number of key properties of qt , such as native code support for target operating systems , and its optimized speed due to c++ infrastructure .",
    "the rest of this paper is organized as follows : abmq is proposed in section ii .",
    "section iii presents two use cases of abmq , and finally , section iv concludes the paper .",
    "in this section , we introduce abmq .",
    "first , we briefly introduce our development environment , the qt application framework .",
    "the architecture of abmq is presented next .",
    "as stated earlier , our main objective is to simulate self - organizing algorithms in application level , mainly targeting portable and programmable devices such as smartphones and tablets . as these devices",
    "utilize a number of different operating systems , it is efficient to use programming frameworks with the capability of cross - platform development .",
    "one such cross - platform programming framework is the qt application framework , which has enabled programmers to write a single piece of code and deploy it on many operating systems . by means of this feature",
    ", users can easily use the codes they have written for simulation purposes to develop real applications on smartphones , tablets , and laptop computers .",
    "currently , using qt , programmers are able to develop programs for a variety of desktop and mobile operating systems , including microsoft windows , mac os x , linux , blackberry , symbian , meego , windows ce , maemo ; and also support for android and ios is to follow soon .",
    "furthermore , as qt uses c++ programming language with native code support for target operating systems , applications developed on this platform have very good performance on target devices .",
    "qt is also available under open source licenses such as lgpl .",
    "figure 1 represents the architecture of abmq .",
    "this architecture consists of three major parts : gui , agents , and simulation management block ( smb ) .",
    "the connection among these three main parts is established using qt s advanced event dispatching method called signals and slots , as well as some global variables . in the following ,",
    "we describe the tasks of each part :        * gui ( graphic user interface ) : * the gui illustrates all necessary and important information for users , and also enables them to select desired settings for the simulation process .",
    "gui section can be changed depending on the algorithms implemented for simulation .",
    "as presented in figure 1 , three major parts constitute the gui , each of which providing a different task :    1 .",
    "the first and most important part is the simulation settings window .",
    "this window contains all information about agents , including their exact location , identification number , and movement pattern .",
    "in addition , the required settings for simulation process can be applied from this window .",
    "the other major part of gui is the graphical view of all agents , including ( but not limited to ) their location , identification number , and connection links among them .",
    "the last major part is the events log window .",
    "the purpose of this window is to provide an instant view of all important interactions among agents .",
    "* agents : * agents constitute the core of our simulation platform .",
    "each agent simulates the behavior of one real participant device ( for example , a smartphone , a tablet , or a laptop ) in manets . in abmq , each agent is an object created based on a c++ class .",
    "users should define all of the required protocols and algorithms in this class . since agents should be independent from each other ( because in a real world they already are ) , in abmq each agent is created inside a separate thread .",
    "this process is done through inheriting such c++ classes from qthread , the base class for platform - independent thread management in qt . as threads are managed independently by the host operating system , each one of the agents",
    "is independent from the others .",
    "as shown in figure 1 , different types of agents are supported in abmq .",
    "agents from the same type are objects created from an identical c++ class , while agents from different types are constructed from different c++ classes .",
    "figure 2 represents a simple class from which agents can be created . for example , two different classes can be defined , one for smartphone agents and another for tablet agents . then , for simulation of interactions among three smartphones and two tablets , three objects should be created from the first c++ class and two objects form the second one .    .... # include < qthread > # include < qudpsocket > # include < qtimer >    class sampleagent : public qthread {      q_object public :      qudpsocket^ * udpmodule ; // communication module      qtimer^ * timer ; //",
    "timer for management procedures      int x , y ; //",
    "location variables      // other variables      sampleagent(int init_x , int init_y , / * other initialization inputs such as uid , etc . * / )      {          timer = new qtimer ;          connect(timer , signal(timeout ( ) ) ,              this , slot(manage ( ) ) ) ;          timer->setinterval(/ * timer interval * / ) ;                   udpmodule = new qudpsocket(this ) ;          connect(udpmodule , signal(readyread ( ) ) ,              this , slot(datareceived ( ) ) ) ;          udpmodule->bind(qhostaddress::localhost,/ * listen port * / ) ;                   x = init_x ;          y = init_y ;                   // other initialization codes      }      // other functions       public slots :      void manage ( ) // called on timer timeouts      {          // add management codes here      }      void datareceived ( ) // called when a packet is received      {          // add message processing codes here      } } ; ....    when users choose to add new nodes to the simulation environment , the gui part , which is interacting with the user , creates new objects based on the selected agent type and configures them with the settings selected by users .",
    "figure 3 represents a sample code in which 50 agents are created from the class which was previously defined for agents in figure 2 .",
    "furthermore , a unique identification number ( uid ) is assigned to each agent . in this way",
    ", hundreds of autonomous agents can be created with different types and configurations , each of which running in a separate thread and the behavior of each agent can be monitored precisely .",
    ".... // somewhere in the main thread ( gui thread ) //",
    "create 50 agents from the sampleagent class sampleagent^ * agent ; int x = 0,y = 0 ; for(int i=0;i<50;i++ ) {      agent = new sampleagent(x , y , / * other initialization inputs such as uid , etc . *",
    "/ ) ;      agent->start ( ) ;      x + = 10 ; // change x for the next agent      y + = 5 ; // change y for the next agent } ....    while it is possible to use mere simulation models for establishing communication among the agents , we decided to use standard network protocols for this purpose .",
    "using this implementation method enables users to turn their written codes into real applications much faster and easier .",
    "furthermore , it also helps in generating more realistic results .",
    "the communication protocol can be either tcp or udp ( or other protocols that the underlying operating system supports ) .",
    "while udp is known for simplicity and speed , tcp provides reliability , in - order packet transfer , flow control , and congestion control . in order to use different communication protocols in abmq",
    ", users can create an object from the base class of their required protocol and then configure it with the appropriate parameters .",
    "as an example , for implementing udp module in agents , users can create an object from qudpsocket class and then configure its listen ip address and port number for receiving the udp datagrams from other agents .",
    "in addition , users can use the same object for sending udp datagrams to other agents by means of target agent s ip address and port number . for the purpose of simulation , the listen ip address for all agents is set to one of the loop back ip addresses ( e.g. , 127.0.0.1 ) .",
    "however , each agent requires a unique listen port number for communication .",
    "such port number can be assigned to agents based on their uids . as an example , the sample agent presented in figure 2 uses udp as its communication protocol .",
    "figure 4 represents the functional architecture of agents . as can be seen ,",
    "each agent consists of four different functional components :    1 .   *",
    "messaging : * this component enables agents to communicate with each other . as mentioned earlier , the communication protocol can be selected based on the requirements .",
    "* processing : * the purpose of this component is to process different tasks of an agent .",
    "an example of such tasks is processing of incoming information and making proper decisions and responses based on it .",
    "* management : * including a wide variety of different tasks , this is the most important component in an agent .",
    "some of the tasks performed by this component are movement of the agent , discovery of neighbor agents , and updating the status of the agent in gui .",
    "* logging : * the important status information , variables , and parameters regarding each agent are logged continuously . using this information , the required simulation results can be obtained .",
    "* simulation management block ( smb ) : * in addition to gui and agents , a management mechanism is also required among the agents .",
    "such management does not question the independent nature of agents ; besides , it satisfies some low - level or environment related requirements of agents for the simulation process .",
    "synchronization among agents ( if required ) and multi - hop routing in application level simulations are two examples of tasks performed by smb . as can be seen in figure 4 , smb is connected to all agents .",
    "in fact , smb plays a complementary role for management component inside each agent .",
    "in addition , since smb is connected to all agents , it can be helpful for extracting some of the simulation results .    based on the required tasks",
    ", smb can be very complex or very simple ( it can even be unnecessary ) .",
    "smb is comprised of one or more separate threads while each thread performs one of the required tasks .",
    "since such tasks are completely reliant on the simulation requirements , it is not possible to provide a functional architecture for this section .",
    "in this section , we present two different simulation use cases for abmq .",
    "the first case is a method of clustering for manets which incorporates a self - organizing approach [ 15 ] . in the second case ,",
    "a leader selection algorithm for mobile clouds [ 16 ] is implemented and simulated .",
    "in addition , for the second case , we further use the implemented algorithms and models for creating a real application which can be installed on several different mobile and desktop operating systems .      although manets provide us with many useful features , their efficiency and performance decreases as they grow in size . partitioning a large manet into smaller virtual networks ( clusters )",
    "can considerably increase the overall efficiency in terms of power consumption , bandwidth usage , and management , which provides a better performance in return [ 14 ] .    in this section ,",
    "we simulate a method of clustering for manets , which is presented in [ 15 ] . according to this clustering method",
    ", each participant device can be a cluster head , a cluster gateway , or a cluster member .",
    "the size of each cluster is limited based on the maximum allowed number of hops between each cluster member and the cluster head , which is defined as a parameter named k.    the gui section for this simulation case is presented in figure 5 .",
    "the three main components of gui ( settings window , graphical representation of agents , and log window ) can be seen in this figure .",
    "additional required controls , such as the option for configuring the parameter k , are added to the settings window using qt s tool for designing guis , the qt designer .",
    "figure 6 represents a clustering example for an arbitrary network ( k=3 ) . as can be seen ,",
    "different background colors are assigned to different clusters . when a device boots up , it sends cluster solicitation messages to its immediate neighbors .",
    "if it does not receive any responses , or it is unable to reach any cluster heads in equal or less than k hops , it assigns itself as a cluster head ( black nodes ) .",
    "conversely , if there is exactly one cluster head in k hops at most , the new device assigns itself as a member ( green nodes ) .",
    "moreover , devices that reach two or more cluster heads in equal or less than k hops are assigned as gateways ( pink nodes ) .        in this simulation case , agents use udp protocol for communication .",
    "each agent has a udp module for receiving messages , which is bound to ip address 127.0.0.1 and a unique port number based on its uid .",
    "therefore , for sending messages to any agent , it is sufficient to know its uid .",
    "finally , smb also plays an important role in this simulation case .",
    "the purpose of smb is to simulate the behavior of network layer by providing the routing functionality .",
    "each agent communicates with smb for acquiring or updating the routing information .",
    "therefore , each agent can only communicate with agents that the implemented routing protocol authorizes it to .",
    "the purpose of mobile clouds is to provide a cooperative arrangement among the communication - enabled portable devices such as smartphones , tablets or laptop computers .",
    "however , in order to make such cooperation feasible , some management method is required in mobile clouds .",
    "such management method is responsible for collecting and processing status data from various devices present in the cloud , in exchange for finding resource sharing opportunities [ 16 ] .    in this section ,",
    "we briefly explain how we managed to implement and simulate the algorithms regarding a new framework for mobile cloud management as presented in [ 16 ] .",
    "according to this management framework , each participant device in mobile clouds can be either a leader or a client . as a result of cooperation among all devices , the one with more available resources is selected as leader .",
    "this leader then performs all management operations in the cloud , such as finding appropriate devices for resource sharing .",
    "figure 7 shows the gui section for this simulation case . as can be seen , in comparison with the previous simulation case , the main components of gui are intact , while some input parameters are changed .",
    "figure 8 shows a simulation example using an arbitrary network .",
    "the black node is the leader agent , while green nodes are client ones .",
    "similar to previous simulation example , in this case , the udp protocol is used for communication among agents .",
    "in addition , smb also serves similar functionality .",
    "however , the required algorithms for simulation of this case have replaced the ones of the earlier simulation example .",
    "as mentioned before , one of the most important features of abmq is that users can easily convert their simulated code into real third - party applications . as an example , here we review the steps required to build one such application using the leader selection algorithm simulation codes .",
    "the first step for creating such third - party application is to design a proper gui , which can be simply done by using qt designer , the qt s tool for designing guis .",
    "the next step is to implement the required algorithms and functions . as mentioned earlier , all agents of the same type are objects created from a unique c++ class ( agent s class ) , which also includes the codes users have written for testing and simulation purposes . therefore , by including such classes in our third - party application , it is possible to reuse the previously written codes for implementing the same functionalities , which can significantly facilitate the implementation process .    finally , the last step is to implement the communication ability in our third - party application . since the agent s class , which was included in our application in previous step , also contains a communication module ( the module which was earlier used for communication among simulation agents ) , such module can be again used here by means of proper configurations for ip and port settings .    in our third - party application , the receive ip address for udp module is set to the one of interfaces that devices are using for communication in manet .",
    "similarly , for sending udp datagrams , the interface ip address of target device is used .",
    "moreover , all devices are configured to use the same port number for receiving and sending udp datagrams . in this way , using slight changes in the base class of agents , such classes can be reused for implementing the same functions in real applications .",
    "figure 9 shows our third - party application running on symbian operating system . using the cross - platform feature of qt",
    ", this application can be simply compiled for other platforms , such as microsoft windows and ubuntu linux .    as can be seen in figure 9 , the application is made up of two separate panes .",
    "the first pane provides a list of devices present in the cloud ( devices running our application ) , including their names , ip addresses , and mac addresses .",
    "the second pane shows some information regarding the cloud status , such as the name of the leader device and the count of members .",
    "in this paper , we presented a new simulation platform , called abmq , which is a powerful tool for modeling and simulation of self - organization in wireless networks and particularly manets .",
    "it provides two important key advantages :    * it enables users to easily use the codes they have written for simulation and evaluation purposes for developing real third - party applications , especially for mobile devices . by using this feature , the required time and cost for development significantly decrease , and probable bugs happening due to rewrite of codes can be completely eliminated .",
    "* abmq is agent - based , meaning that users can simulate and evaluate their models and algorithms without requiring to spend time on unnecessary details .",
    "this makes abmq a very flexible , easy to use , and efficient environment for simulating interactions among mobile devices .    although abmq provides a number of useful advantages , it is in the early stages of development and there are still many other subjects that are required to be addressed in order to build a better simulation environment . as an example , creating a library of tools which includes a set of predefined models that can be configured for use in different simulation scenarios can be a new subject for future researches .",
    "wang , c.l .",
    "chou , y.h .",
    "chiu , y.s .",
    "tzeng , m.s .",
    "hsu , y.w .",
    "cheng , w.l .",
    "liu , and t.w . ho , ",
    "nctuns 4.0 : an integrated simulation platform for vehicular traffic , communication , and network researches , \" _ ieee vehicular technology conference ( vtc ) _ , 2007 .",
    "s. park , a. savvides , and m.b .",
    "srivastava ,  sensorsim : a simulation framework for sensor networks , \" _ acm international workshop on modeling , analysis and simulation of wireless and mobile systems ( mswim ) _ , 2000 .",
    "north , t.r .",
    "howe , n.t .",
    "collier , and j.r .",
    "vos ,  the repast simphony development environment , \" _ proceedings of the agent 2005 conference on generative social processes , models , and mechanisms _ , 2005 .",
    "salehi , b.h .",
    "khalaj , m. katz , g. fazelnia , and p. karimi ,  mobile cloud management : a new framework , \" _ ieee international symposium on personal , indoor and mobile radio communications ( pimrc ) _ , 2012 ."
  ],
  "abstract_text": [
    "<S> agent - based modeling and simulation ( abms ) is a simple and yet powerful method for simulation of interactions among individual agents . using abms , </S>",
    "<S> different phenomena can be modeled and simulated without spending additional time on unnecessary complexities . </S>",
    "<S> although abms is well - matured in many different fields such as economic , social , and natural phenomena , it has not received much attention in the context of mobile ad - hoc networks ( manets ) . in this paper </S>",
    "<S> , we present abmq , a powerful agent - based platform suitable for modeling and simulation of self - organization in wireless networks , and particularly manets . by utilizing the unique potentials of qt application framework , </S>",
    "<S> abmq provides the ability to easily model and simulate self - organizing algorithms , and then reuse the codes and models developed during simulation process for building real third - party applications for several desktop and mobile platforms , which substantially decreases the development time and cost , and prevents probable bugs that can happen as a result of rewriting codes .    agent - based modeling and simulation , qt , manet , self - organization </S>"
  ]
}