{
  "article_text": [
    "quantum computers offer the promise of fundamentally faster processing based upon quantum mechanical properties . although a physical device of a useful size is still to be built",
    ", many quantum algorithms have already been discovered .",
    "the most important of these are the algorithms introduced by @xcite and @xcite , which can factor integers and search an unsorted database respectively , significantly faster than the best known classical algorithms @xcite .",
    "quantum walks were initially introduced in both continuous @xcite and discrete @xcite time , in direct analogy with their classical counterparts , and have since been studied extensively @xcite . in the same way that classical random walks",
    "are used in computer science for algorithm design , many quantum algorithms have been developed based upon quantum walks , with varying speed ups over the best known classical algorithms for the same problem , @xcite .",
    "these solve the problems using two different approaches : hitting times and searching . in hitting time problems we start from a specific vertex and want to get to another as quickly as possible .",
    "these problems have yielded the largest speed up , including exponential speed ups over the classical case , @xcite .",
    "searching for an entry in an unsorted database is a classically time - consuming problem taking on average a time of @xmath0 to search a set of @xmath1 entries .",
    "grover s algorithm , @xcite , improves on this to @xmath2 by using a technique known as amplitude amplification .",
    "the same speed up can be obtained using a quantum walk method on various structures @xcite .    in @xcite",
    ", @xcite extends the original results of @xcite @xcite to show a continuous time quantum walk , on an unweighted graph of bounded degree , is universal for quantum computation .",
    "@xcite gives an explicit construction that converts a standard gate model computation into a graph , on which a continuous time quantum walk executes an algorithm by traversing the graph . in this paper",
    ", we show the equivalent construction of a universal gate set using the discrete time quantum walk in place of the continuous .",
    "this confirms that both the continuous and the discrete time quantum walks can be regarded as computational primitives .",
    "the construction requires an exponentially large graph for the size of the input as we require @xmath3 wires for an @xmath4 qubit input .",
    "the quantum walk takes place on this @xmath1-vertex graph just as the continuous time walk does in the construction by childs @xcite .",
    "it is already known that a quantum walk on an @xmath1-vertex graph can be simulated efficiently by a universal quantum computer using @xmath5 gates , provided there is a simple rule to compute the neighbours of any vertex @xcite .",
    "thus , by performing the quantum walk on a quantum computer , the binary encoding brings the resources required back to the expected level .",
    "our construction for the universal gate set in discrete time is similar to @xcite but has maximum degree , @xmath6 , of eight at any vertex as opposed to three in the continuous case .",
    "the continuous time walk can easily be propagated in one direction with no reflection at the vertices .",
    "the discrete time walk is not so straightforward , it can only be propagated in one direction by using a specific coin corresponding to the @xmath7 operation .",
    "using this coin restricts the graph to vertices of degree two , providing no way to construct higher degree structures .",
    "thus we must use a double - edged wire to accomplish directional propagation .",
    "this solution has its roots in the connection between the continuous and discrete time walks .",
    "@xcite @xcite has shown that , as we take the continuous limit of the discrete time walk on the line , we actually get two copies of the continuous time walk propagating in opposite directions .",
    "@xcite @xcite later showed a direct correspondence between the discrete and continuous time quantum walks on arbitrary graphs . in the same work , @xcite shows how a discrete time walk can be used , at its limit of small eigenvalues , to approximate the continuous time walk .",
    "he uses this ` lazy ' quantum walk approach to allow the discrete time walk to propagate in the same way as the continuous .",
    "this same approach could be used in this case to allow the computation to be performed on the same structures defined in @xcite .",
    "however , this would require the discrete time walk to approach the limit at which it is doing very little at each timestep .",
    "this would then increase the overhead required to allow completely deterministic computation .",
    "we begin by describing the discrete time quantum walk briefly in section [ sec : discrete ] , then move on to show structures on which the discrete time quantum walk will allow perfect state transfer in section [ sec : char ] .",
    "these structures allow us to construct the elements we need to perform computation .",
    "section [ sec : gate ] shows the universal gate set we choose and how we implement these using the discrete time walk .",
    "section [ sec : circuits ] describes how we can link these gates and structures together to form any quantum circuit , and elaborates on how this is efficient , despite the size of the graph being exponential in the number of gates required .",
    "finally , in section [ sec : conc ] we discuss our findings and the differences with the continuous time construction of @xcite .",
    "consider a classical random walk on a line in which a walker starts at a specific position and , depending on the outcome of a coin toss , moves either left or right .",
    "the outcome after many runs is a binomial distribution about the starting position with a spread ( quantified by the standard deviation ) of @xmath8 where @xmath9 is the number of timesteps . a discrete time quantum walk is the direct analog of the classical walk with the walker replaced by a quantum particle carrying a two state quantum system for the coin . the coin toss is effected by a unitary operator . although this is now deterministic , if we were to measure the coin we would get a random output as in the classical case .",
    "we start the quantum walker at the origin and act upon it with a unitary operator for the coin toss , followed by a conditional shift operation ( to obtain the movement of the walker ) at each timestep .",
    "we write the basis states of the walker as an ordered pair , @xmath10 , denoting the position of the walker , @xmath11 , and the state of the coin , i.e. , heads ( @xmath12 ) or tails ( @xmath13 ) .",
    "the simplest unitary operator is the hadamard operator , h , which acts on the state as @xmath14 the shift operation , s , acts thus @xmath15 the first three timesteps starting at the origin are as follows @xmath16 as the walk progresses , quantum interference occurs whenever there is more than one possible path of @xmath9 steps to the position .",
    "this can be both constructive and destructive , as shown in eq .",
    "( [ 3steps ] ) , which causes some probabilities to be amplified or decreased at each timestep .",
    "the walk on the line has been solved analytically @xcite where it was first remarked that the quantum walk spreads quadratically faster than the classical one .",
    "the choice of operator at each vertex can greatly affect the dynamics of the walk and its propagation across the structure .",
    "a bias can be introduced @xcite , for @xmath17 , this is done using a generalisation of the hadamard operator ,    @xmath18    where @xmath19 is the bias in the coin . setting this to @xmath20 returns the standard hadamard operator , eq .",
    "( [ hadamard ] ) .",
    "similarly , the choice of the walker s initial state is also important , unlike in the classical random walk .",
    "a good review of these effects can be found in @xcite .    for universal computation",
    "we need a quantum walk on a more complex graph . in graph theory , a general graph , g ,",
    "is an ordered pair consisting of a set of vertices , v , and a set of edges , e , which link the vertices .",
    "the number of edges incident on a vertex is the degree of the vertex , fig .",
    "[ graph ] shows a small general graph which has vertices of varying degree .",
    "it is also undirected , meaning that the edges allow movement in both directions .",
    "a different operator ( coin ) is needed at vertices with @xmath21 in order to act on the entire state space @xcite .",
    "the grover coin can be extended to any degree at a vertex ,    @xmath22 - i_{d } , \\label{grover}\\ ] ]    where @xmath6 is the degree of the vertex and @xmath23 is the identity matrix of the same dimension .",
    "coins of degree four will be needed at most of the vertices in our computational graphs . the grover coin in four dimensions , eq .",
    "( [ grover ] ) , reduces to @xmath24 . \\label{grover4}\\ ] ]    ) , operating on the incoming amplitude @xmath25 . ]",
    "+ using these higher dimensional coins can cause the walker to be reflected back upon itself with some probability .",
    "figure [ reflection ] shows this reflection for a vertex of degree @xmath26 . in quantum walk search and",
    "other quantum walk algorithms this can be useful to provide interference .",
    "however , here we need to ensure the walker moves in one direction only , from left to right , so it most resembles the circuit model of quantum computation .",
    "we show how we accomplish this forward only propagation in section [ sec : gate ] .",
    "as a preliminary to our quantum computation scheme , we discuss structures on which perfect state transfer can be achieved using the discrete time quantum walk .",
    "perfect state transfer has been investigated in the context of spin chains by @xcite @xcite .",
    "the propagation of the state through spin systems follows the same dynamics as a continuous time quantum walk .",
    "perfect state transfer can occur on chains of length 2 or 3 , hypercubes of any size , and chains with different coupling strengths engineered to optimise state transfer .",
    "the closely related properties of instantaneous mixing and periodic cycles have been studied in detail for quantum walks . for the continuous time",
    "quantum walk , instantaneous mixing has been investigated by @xcite @xcite .",
    "they showed @xcite this is achieved on cycles of 2 , 3 and 4 vertices only .",
    "for the discrete time walk , slightly larger cycles show exact periodic behaviour .",
    "@xcite @xcite showed that a cycle of 4 vertices has a periodicity of 8 timesteps after which the entire state returns to the starting position .",
    "@xcite @xcite showed more periodic cycles exist , cycles of 2 , 3 , 4 , 5 , 6 , 8 and 10 were shown numerically to be periodic by varying both the bias and phase in the coin .",
    "perfect state transfer occurs at half the periodic cycle for even cycles , where we obtain the entire state at the opposite point of the cycle as shown in fig .",
    "[ transfer ] .        for our case of using the walk for computation , we require the walk to travel perfectly in a single direction . on the structures",
    "mentioned , the quantum walk travels around the cycle in both directions and interferes to produce perfect state transfer . using a completely biased coin ,    @xmath27    we can make the state transfer perfectly around the cycle in a single direction",
    "however , if we then try to attach another structure to the cycle , this periodicity is broken in both cases .",
    "the grover coin , eq .",
    "( [ grover ] ) , can be used to overcome part of this problem at vertices with an equal number of input edges as output edges . for any vertex of even degree it will transfer the entire state from all the input edges to all the output edges provided the inputs are all equal in both amplitude and phase .",
    "these results led us to the designs that work for universal computation .",
    "we now show how we construct a universal gate set with the discrete time quantum walk .",
    "although the gate set we implement is the same as in @xcite , the structures used to propagate the discrete time walk are different .",
    "the gate set used is the standard universal set comprising the controlled - not ( c - not ) gate ,    @xmath28 , \\label{cnot}\\ ] ]    the single qubit hadamard ,    @xmath29 , \\label{hadamardmatrix}\\ ] ]    and phase shift gates ( we implement the specific phase shift known as the @xmath30 gate ) ,    @xmath31 . \\label{phase}\\ ] ]    these gates create a universal set that can implement any quantum computation @xcite .    in order to represent quantum states",
    ", @xcite defines his computational basis states as quantum wires .",
    "the other gates required for universality are then attached to wires and used to connect them together .",
    "the computation is represented as a quantum walk on these wires and structures , where the computation flows from input to output ( left to right in our diagrams ) .",
    "note that this encoding is not meant to be implemented directly .",
    "the wires represent computational basis states rather than qubits , thus the model does not represent a physical architecture . instead , the underlying graph structure created would be used to help ` program ' a quantum computer .",
    "we first show how to construct a simple wire along which the quantum walk will propagate naturally in one direction .",
    "we use two edges per wire to ensure no reflection occurs at a vertex .",
    "we distribute the walker across the two edges which then recombine at the next vertex .",
    "as the split is equal , the grover coin in effect moves both halves to the output edges of the vertex .",
    "figure [ prop ] shows this operation and the ` shift ' to the next vertex in explicit steps . the grover diffusion coin , eq .  ( [ grover ] ) ,",
    "is used at each vertex of degree @xmath26 .",
    "the initial and final vertices are in effect degree four if we include other edges attached to either end .",
    "figure [ wire ] shows the basic wire we use .",
    "the computation would start with the amplitude at the initial vertex spread equally across the pair of edges in a wire .",
    "for example , the state @xmath32 , where @xmath33 , would be split thus ,    @xmath34 , \\label{initialstate}\\ ] ]    where the subscript @xmath35 refers to the top line of the wire and subscript @xmath36 is the bottom line .",
    "the walk propagates left to right on the wire deterministically , in this case reaching the incoming edges of the final vertex in four timesteps .",
    "these wires form the basic connections in the computation .    .",
    "section a shows the initial state , b shows the state after the grover coin is applied and finally c is after the shift operation . ]     the grover diffusion coin is used .",
    "the initial state is split across the pair of edges in the wire , eq .",
    "( [ initialstate ] ) . ]",
    "the simplest gate to construct is the c - not .",
    "it is trivial to implement by just exchanging the wires of the second qubit .",
    "the c - not gate is shown in fig .",
    "[ cnotwires ] and shows how the second qubit is flipped but the first qubit is untouched .        the phase gate , eq .",
    "( [ phase ] ) , requires the addition of a relative phase to one wire or computational basis state in relation to the other . to accomplish this , but still have only one coin operator for each vertex of the same degree , we modify the basic wire and add a phase factor , @xmath37 , to it ,    @xmath38    thus , as the walk propagates along a basic wire , it now picks up a phase of @xmath37 each time it passes through a vertex of degree @xmath26 . for the wires shown in fig .  [ wire ] the walker would pick up a phase of @xmath39 as it reaches the final vertex .     grover coin , eq .",
    "( [ grover2 ] ) , is used at the vertices of degree @xmath17 .",
    "the @xmath40 wire will pick up a phase of @xmath37 relative to the @xmath41 wire . in our construction",
    "we actually obtain the operation corresponding to a phase of @xmath42 as we set @xmath43 . ]",
    "the phase added here is arbitrary and can be set to any value so long as it is set to the same value for all vertices of degree @xmath26 .",
    "as we are looking to implement a @xmath44 gate we set it as follows : @xmath45 in order to add a relative phase of @xmath46 between the @xmath47 and @xmath48 wires we insert the structure in fig .",
    "[ phasewire ] into the graph at the required point . in this structure",
    "there are also vertices of degree @xmath17 , at which we use the grover coin at its limit of degree @xmath17 , @xmath49 .",
    "\\label{grover2}\\ ] ] we add no phase to eq .",
    "( [ grover2 ] ) so as the walker passes through these vertices no phase is picked up . in fig .",
    "[ phasewire ] , the walker propagates along the @xmath48 wire and picks up a phase of @xmath50 in four timesteps as it only passes through four vertices of degree four .",
    "however , the @xmath47 wire picks up a phase of @xmath51 in the same number of timesteps as all its vertices are of degree four .",
    "relative to the @xmath47 wire , the @xmath48 wire will pick up a phase of @xmath42 .",
    "therefore , using the structure described here we obtain the operation in eq .",
    "( [ phase ] ) .",
    "the last gate in the universal set is the hadamard gate .",
    "this requires an interaction between the two computational basis states .",
    "the structure we use to perform this operation is shown in fig .",
    "[ hadamardwires ] .     to the @xmath40 wire .",
    "the structure adds a global phase of @xmath52 to the wires . ]",
    "this looks complex in relation to the other gates we have shown so we break it up to explain it more clearly .",
    "sections a and c of the structure are each two phase gates giving a relative phase of @xmath53 to the @xmath48 wire before and after the main section of the gate ( b ) .",
    "section b of the structure combines the two inputs from the @xmath41 and @xmath40 wires and then splits this across the outputs equally .",
    "the structure here is similar to the basis changing gate in @xcite . in order to obtain the desired operation on this structure we have designed a coin for vertices of degree @xmath54 : @xmath55 . \\label{hadamardcoin}\\ ] ] this operator combines the complex hadamard operator , @xmath56 , \\label{complexhadamardmatrix}\\ ] ] and the @xmath7 , @xmath57 , \\label{paulizmatrix}\\ ] ] in a tensor product form , @xmath58 with the top two and bottom two rows of the @xmath59 matrix rearranged .",
    "this rearrangement ensures the outputs come out in the same order as the input states .",
    "this gate adds a global phase of @xmath52 .",
    "the phase gates at the start and end of the central section give us the relative phase of @xmath60 required for the hadamard operation .",
    "we note here that the choice of where to place the phases in this construction is arbitrary",
    ". the same result can be achieved by using the degree four grover coin , eq .",
    "( [ grover4 ] ) , with no phase at vertices of degree four and the degree two grover coin , eq .",
    "( [ grover2 ] ) , with a phase of @xmath46 at vertices of degree two .",
    "however , by placing the phases on the grover coin in the fashion we described previously , eqs .",
    "( [ phasecoin ] , [ grover2 ] ) , means that the global phase added by the hadamard gate , eq .",
    "( [ hadamardcoin ] ) , corresponds to the phase added by a wire of the same length .",
    "thus far each gate we have described only acts on one or two qubits .",
    "however , non - trivial quantum computers involve many qubits .",
    "we now describe how to link these wires and structures together to form larger circuits .",
    "figure  [ circuitgraph ] shows the underlying graph structure of the circuit in fig .",
    "[ qcircuit ] .",
    "the graph structure is obtained by connecting together wires and structures so that the walk flows from left to right . for this reason",
    ", we designed our wire and structures with both input and output vertices of degree four , thus making it simple to link them together .",
    "the initial state of the computation is set on all or a subset of the vertices on the left hand side of the graph , with the amplitude at each vertex split across the incoming edges .",
    "this initial state can be thought of as the first column of vertices in the graph structure in superposition , with each subsequent column of vertices representing a further timestep .",
    "for example , in fig .",
    "[ circuitgraph ] this column of vertices is the set prior to the hadamard structures . the walker is propagated across the graph structure , from left to right deterministically , for the required number of timesteps .",
    "we therefore do not require the addition of momentum filters or separators as in the continuous time case .",
    "our structures all propagate the walker at the same speed , meaning output from the wires will be synchronised throughout the computation .",
    "finally , the walker picks up a global phase of @xmath61 per vertex that is not part of a gate that changes the phase , so all the wires also stay synchronized in phase .",
    "thus , we know with certainty that , after the required number of timesteps , the walker will have a distribution over just the output vertices on the right hand side of the graph .",
    "once the computation has been completed , we measure the output vertices .",
    "we will find the walker at just one of these vertices , representing the output of the computation .",
    "the graph structure in fig .  [ circuitgraph ] is clearly larger in size than its equivalent representation in the circuit model , fig .",
    "[ qcircuit ] .",
    "in fact , for a general @xmath4-qubit computation the equivalent graph will have @xmath3 wires , one for each combination of computational basis states .",
    "similarly , we require more gate structures than in the circuit model .",
    "single qubit structures are repeated @xmath62 times and for the c - not gate we need @xmath63 structures . as an example , we can see the phase gate acting on qubit 3 in fig .",
    "[ qcircuit ] is repeated 4 times in the underlying graph structure of fig .",
    "[ circuitgraph ] , one for each combination of wires involving qubit 3 .",
    "although this seems as though we would lose any form of quantum speed up due to the exponential number of gates required in the underlying graph , this is not the case .",
    "consider simulating a classical random walk on a classical computer , the @xmath1-vertex graph is represented in @xmath64 bits of memory with each vertex having a unique binary number as a label . in a similar fashion ,",
    "if we simulate a quantum walk on a quantum computer , the @xmath1-vertex graph can be represented by @xmath64 qubits .",
    "therefore if we encode our graph using qubits , we can describe the @xmath3 wires in just @xmath4 qubits . by manipulation of a single qubit we can affect all combinations of wires associated with that qubit . as the state moves across the graph",
    ", the adjacent vertices must be established . in complex graphs",
    "the description of the graph and its connections is often exponential in size and an oracle must be used to store it @xcite .",
    "the graphs produced here are of bounded degree and have a regularity stemming from the repetition of gate structures on combinations of wires involving a specific qubit . due to the labelling of the wires , we know where to place each structure based on one bit in the label ,",
    "thus we can efficiently describe the graph .",
    "for example , consider the second c - not gate in fig .",
    "[ qcircuit ] , which operates on qubit 3 with qubit 2 as control .",
    "we can see from fig .",
    "[ circuitgraph ] that it is easy to identify where the c - not structures should be placed .",
    "the labelling of the wires shows that the middle bit determines which combinations of wires relate to the 2nd qubit having a value of 1 .",
    "similarly , we can also identify which wire it should link to by the last bit in the labelling scheme , it needs to be flipped relative to the original wire , i.e. @xmath65 links to @xmath66 .    ]    .",
    "the hadamard structure , h , is the same as in fig .",
    "[ hadamardwires ] .",
    "the dotted lines represent wires passing underneath the solid lines - there is no interaction between these wires . ]",
    "in this paper we have described an alternative to the construction in @xcite using the discrete time quantum walk .",
    "this shows the discrete time quantum walk is universal , therefore any quantum algorithm can be reformulated as a discrete time quantum walk algorithm .",
    "it also confirms that the discrete and continuous time walks are both computational primitives and thus computationally equivalent .",
    "this equivalence is dependent on the number of steps in both cases to be of the same order .",
    "our gate constructs require twice the number of edges compared to the continuous time case but the same number of wires .",
    "our phase gate requires an additional timestep in relation to the continuous time phase gate construct .",
    "the number of timesteps required for a computation is also the same as the continuous time case but with a small overhead depending on the number of phase gates required .",
    "another difference in the two constructions is the degree of the graphs produced . in the continuous time case",
    "the maximum degree of any vertex in the graph is three . in the discrete time case we use vertices of higher degree to ensure directional propagation . in most of the structures",
    "this is a doubling of the degree at a vertex , as shown in the case of the basic wire and the phase gate structure .",
    "the hadamard structure we propose here however , does not follow this doubling .",
    "it would seem reasonable , from the equivalent degree three structure in the work by @xcite , that it may be possible to decompose our hadamard structure into one with degree six vertices .",
    "the doubling of degree at vertices would then correspond directly to the continuous case .    _",
    "acknowledgments : _ we thank andrew childs for helpful comments on a draft of the manuscript .",
    "nl is funded by the uk engineering and physical sciences research council .",
    "vk is funded by a royal society university research fellowship .",
    "sc and mt were funded by nuffield foundation science undergraduate research bursaries .",
    "me was funded by the university of leeds ."
  ],
  "abstract_text": [
    "<S> a proof that continuous time quantum walks are universal for quantum computation , using unweighted graphs of low degree , has recently been presented by @xcite [ prl 102 180501 ( 2009 ) ] . </S>",
    "<S> we present a version based instead on the discrete time quantum walk . </S>",
    "<S> we show the discrete time quantum walk is able to implement the same universal gate set and thus both discrete and continuous time quantum walks are computational primitives . </S>",
    "<S> additionally we give a set of components on which the discrete time quantum walk provides perfect state transfer . </S>"
  ]
}