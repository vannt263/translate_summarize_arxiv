{
  "article_text": [
    "the @xmath0-calculus is a powerful model for representing functions . in its un - typed version",
    ", every recursive function can be represented .",
    "but , in this model , a term can be applied to itself and a computation may not terminate . to avoid this problem , types are used . in the simplest case ,",
    "they are built from atomic types with the arrow and the typing rules say that a function of type @xmath2 may only be applied to an argument of type @xmath3 .",
    "this discipline ensures that every typed term is strongly normalizing , i.e. a computation always terminate .",
    "in this system ( the simply typed @xmath0-calculus ) , church numerals , i.e. the terms of the form @xmath4 , are codes for the integers .",
    "they are the only terms ( in normal form ) of type @xmath5 .",
    "thus , functions on the integers can be represented but schwichtenberg @xcite has shown that very few functions are so .",
    "he showed that the extended polynomials ( i.e. polynomials with positive coefficients together with a conditional operator ) are the only functions that can be represented there .",
    "other type systems were then designed to allow the representation of more functions .",
    "they are built in different ways .",
    "the first one consists in extending the set of terms .",
    "for example , in gdel system @xmath6 , the terms use the usual constructions of the @xmath0-calculus , the constant @xmath7 , the constructor @xmath8 and an operator for recursion .",
    "the types are built from the atomic type @xmath9 with the arrow .",
    "this system represents exactly the functions whose totality can be shown in peano first order arithmetic .",
    "the second one consists in keeping the same terms but extending the type system .",
    "this is , for example , the case of girard system @xmath10 where the types can use a second order universal quantifier .",
    "there , the type of the integers is given by @xmath11 .",
    "this system represents exactly the functions whose totality can be shown in peano second order arithmetic .",
    "a third way consists in extending the _ logic_. in the curry - howard correspondence , the previous systems correspond to _ intuitionistic _ logic .",
    "other systems correspond to _ classical _ logic . there",
    ", again , new constructors for terms are introduced .",
    "this is , for example , the case of parigot s",
    "@xmath1-calculus @xcite .",
    "since the introduction of girard system @xmath10 for intuitionistic logic and parigot s @xmath1-calculus for classical logic , many others , more and more powerful , type systems were introduced .",
    "for example , the calculus of constructions ( coquand & huet @xcite ) and , more generally , the pure type systems .",
    "it is also worth here to mention the system @xmath12 of parigot @xcite where some types are defined as the least fixed point of an operator .",
    "this system was introduced , not to represent more functions , but to represent more _",
    "algorithms_. for example , to be able to represent the integers in such a way that the predecessor can be computed in constant time , which is not the case for the previous systems .",
    "these systems all satisfy the subject reduction ( i.e. the fact that the type is preserved by reduction ) , the strong normalization ( i.e. every computation terminates ) and , for the systems based on simple types , the decidability of type assignment .",
    "we study here other kinds of extension of the simply typed @xmath0-calculus , i.e. systems where _ equations _ on types are allowed .",
    "these types are usually called _",
    "recursive types_. for more details see , for example , @xcite .",
    "they are present in many languages and are intended to be able to be _ unfolded _ recursively to match other types . the subject reduction and the decidability of type assignment",
    "are preserved but the strong normalization may be lost .",
    "for example , with the equation @xmath13 , the term @xmath14 where @xmath15 is typable but is not strongly normalizing . with the equation @xmath16",
    ", every term can be typed .    by making some natural assumptions on the recursive equations",
    "the strong normalization can be preserved .",
    "the simplest condition is to accept the equation @xmath17 ( where @xmath10 is a type containing the variable @xmath18 ) only when the variable @xmath18 is positive in @xmath10 . for a set @xmath19 of mutually recursive equations ,",
    "mendler @xcite has given a very simple and natural condition that ensures the strong normalization of the system .",
    "he also showed that the given condition is necessary to have the strong normalization .",
    "his proof is based on the reducibility method .",
    "the condition ensures enough monotonicity to have fixed point on the candidates .",
    "but this proof ( using candidates of reducibility ) can not be formalized in peano arithmetic and the strength of the system needed for a proof of the strong normalization of such systems was not known .    in this paper , we give an _",
    "arithmetical _ proof of the strong normalization of the simply typed @xmath0-calculus ( and also of the @xmath20-calculus ) with recursive equations on types satisfying mendler s condition .",
    "this proof is an extension of the one given by the first author for the simply typed @xmath0-calculus .",
    "it can be found either in @xcite ( where it appears among many other things ) or as a simple unpublished note on the web page of the first author @xcite .",
    "apparently , proof methods similar to that used here were independently invented by several authors ( levy , van daalen , valentini and others ) .",
    "the proof for the @xmath1-calculus is an extension of the ones given in @xcite or @xcite .",
    "the paper is organized as follows . in section [ s - lambda ]",
    "we define the simply typed @xmath0-calculus with recursive equations on types . to help the reader and show the main ideas , we first give , in section [ proof ] , the proof of strong normalization for the @xmath0-calculus .",
    "we generalize this proof to the @xmath20-calculus in section [ s - mu ] .",
    "in section [ applic ] , we give two examples of applications of systems with recursive types .",
    "we conclude in section [ conc ] with some open questions .",
    "let @xmath21 be an infinite set of variables .    1 .",
    "the set @xmath22 of @xmath0-terms is defined by the following grammar + @xmath23 2 .",
    "the relation @xmath24 on @xmath22 is defined as the least relation ( compatible with the context ) containing the rule @xmath25 $ ] . as usual ,",
    "@xmath26 ( resp .",
    "@xmath27 ) denotes the reflexive and transitive ( resp .",
    "transitive ) closure of @xmath24 .",
    "let @xmath28 be a set of atomic constants and @xmath29 be a set of type variables .    1 .",
    "the set @xmath30 of types is defined by the following grammar + @xmath31 2 .",
    "when @xmath32 is a set of types , the congruence @xmath33 generated by @xmath34 is the least congruence on @xmath30 such that @xmath35 for each @xmath36 .",
    "let @xmath33 be a congruence on @xmath30 .",
    "the typing rules of the typed system are given below where @xmath37 is a context , i.e. a set of declarations of the form @xmath38 where @xmath39 and @xmath40 .",
    "@xmath41 @xmath42    @xmath43 @xmath44    [ congru ]",
    "let @xmath33 be a congruence generated by a set of types .    1 .",
    "if @xmath45 , then @xmath46 or @xmath47 .",
    "2 .   if @xmath48 , then @xmath49 and @xmath50 .",
    "3 .   if @xmath51 , then @xmath38 occurs in @xmath37 for some @xmath52 .",
    "4 .   if @xmath53 , then @xmath54 for some @xmath55 such that @xmath56 . 5 .",
    "if @xmath57 , then @xmath58 , @xmath59 for some @xmath60 and @xmath3 . 6 .   if @xmath61 and @xmath62 , then @xmath63 . 7 .   if @xmath64 and @xmath65 , then @xmath66 : t$ ] .    easy",
    ".    [ sr ] if @xmath67 and @xmath68 , then @xmath69 .",
    "it is enough to show that if @xmath70 , then @xmath71:t$ ] .",
    "assume @xmath70 .",
    "by lemma [ congru ] , @xmath72 , @xmath73 and @xmath74 .",
    "thus , @xmath75 and @xmath76 . by lemma [ congru",
    "] , we have @xmath77 and @xmath78 . thus , @xmath79 .",
    "since @xmath73 and @xmath74 , the result follows immediately .",
    "let @xmath80 .",
    "we define the subsets @xmath81 and @xmath82 of @xmath30 as follows .",
    "* @xmath83 * if @xmath84 , then @xmath85 . * if @xmath86 and @xmath87 , then @xmath88 and @xmath89 .    [ cong ]",
    "we say that a congruence @xmath33 is good if the following property holds : for each @xmath80 , if @xmath90 , then @xmath91 .    * examples *    in each of the following cases , the congruence generated by the given equations is good .    1 .",
    "@xmath92 and @xmath93 .",
    "2 .   @xmath94 and @xmath95 .",
    "3 .   the same equations as in case 2 and @xmath96 where @xmath10 is any type using only the variables @xmath97 .",
    "4 .   the same equations as in case 3 and @xmath98 , @xmath99 where @xmath100 are any types using only the variables @xmath101 .    _ in the rest of the paper , we fix a finite set @xmath32 of types and we denote by @xmath33 the congruence generated by @xmath34 .",
    "we assume that @xmath33 is good .",
    "_    * notations and remarks *    * we have assumed that the set of equations that we consider is finite .",
    "this is to ensure that the order on @xmath102 given by definition [ ordre ] below is well founded .",
    "it should be clear that this is not a real constraint .",
    "since to type a term , only a finite number of equations is used , we may consider that the other variables are constant and thus the general result follows immediately from the finite case . *",
    "if @xmath103 is a term , @xmath104 will denote the structural complexity of @xmath103 .",
    "* we denote by @xmath105 the set of strongly normalizing terms .",
    "if @xmath106 , we denote by @xmath107 the length of the longest reduction of @xmath103 and by @xmath108 the pair @xmath109 .",
    "* we denote by @xmath110 the fact that @xmath103 is a sub - term of a reduct of @xmath9 . * as usual ,",
    "some parentheses are omitted and , for example , we write @xmath111 instead of @xmath112 . more generally , if @xmath113 is a finite sequence @xmath114 of terms , we denote by @xmath115 the term @xmath116 and by @xmath117 the fact that @xmath118 . * if @xmath119 is the substitution @xmath120 $ ] , we denote by @xmath121 the set @xmath122 , by @xmath123 the set @xmath124 and by @xmath125 the fact that @xmath126 . * if @xmath119 is a substitution , @xmath127 and @xmath103 is a term , we denote by @xmath128 $ ] the substitution @xmath129 defined by @xmath130 for @xmath131 and @xmath132 . * in a proof by induction , will denote the induction hypothesis . when the induction is done on a tuple of integers ,",
    "the order always is the lexicographic order .",
    "we give the idea for one equation @xmath133 . the extension for the general case",
    "is given at the beginning of section [ 3.4 ] .",
    "it is enough to show that , if @xmath134 are in @xmath105 , then @xmath135 \\in sn$ ] .",
    "assuming it is not the case , the interesting case is @xmath136 with @xmath137 where @xmath138 \\in sn$ ] .",
    "this implies that @xmath139 and @xmath140 \\not \\in sn$ ] .",
    "if we know that the type of @xmath9 is an arrow type , we get a similar situation to the one we started with , but where the type of the substituted variable has decreased . repeating the same argument",
    ", we get the desired result , at least for @xmath9 whose type does not contain @xmath18 . if it is not the case , since , by repeating the same argument , we can not come to a constant type ( because such a term can not be applied to something ) , we come to @xmath18 . thus , it remains to show that , if @xmath134 are in @xmath105 and the type of @xmath141 is @xmath18 , then @xmath135 \\in sn$ ] .    to prove this , we prove something a bit more general .",
    "we prove that , if @xmath142 where @xmath119 is a substitution such that the types of its image are in @xmath81 , then @xmath143 \\in sn$ ] .",
    "the proof is done , by induction on @xmath144 as follows .",
    "as before , the interesting case is @xmath145 , @xmath146 \\in sn$ ] and @xmath140 \\not\\in sn$ ] .",
    "thus , there is a sub - term of a reduct of @xmath147 of the form @xmath148 such that @xmath149 ) \\not \\in sn$ ] but @xmath150 \\in sn$ ]",
    ". thus @xmath151 must reduce to a  @xmath0 .",
    "this @xmath0 can not come from some @xmath152 , i.e. @xmath153 .",
    "otherwise , the type of @xmath154 would be both positive ( since @xmath155 and the type of @xmath156 is positive ) and negative ( since , in @xmath103 , @xmath154 is an argument of @xmath141 whose type also is positive ) .",
    "thus the type of @xmath151 ( the same as the one of @xmath154 ) does not contain @xmath18 .",
    "but since @xmath157 are in @xmath105 , we already know that @xmath140 $ ] must be in @xmath105 . a contradiction .",
    "thus , @xmath158 and we get a contradiction from the induction hypothesis since we have @xmath159 \\not \\in sn$ ] for @xmath160 strictly less than @xmath103 .",
    "the case when @xmath161 has more than one argument is intuitively treated by `` repeat the same argument '' or , more formally , by lemma [ prepa ] below .    as a final remark , note that many lemmas are stated in a negative style and thus may seem to hold only classically .",
    "this has been done in this way because we believe that this presentation is closer to the intuition .",
    "however , it is not difficult to check that the whole proof can be presented and done in a constructive way .",
    "[ untyped ] assume @xmath162 and @xmath163 .",
    "then , for some term @xmath164 , @xmath165 and @xmath166\\;\\overrightarrow{o } ) \\not \\in sn$ ] .    since @xmath162 , an infinite reduction of @xmath167 looks like @xmath168\\ ; \\overrightarrow{o ' } ) \\rhd \\ldots $ ] and the result immediately follows from the fact that @xmath166\\;\\overrightarrow{o } ) \\rhd^ * ( m'[x:=n']\\;\\overrightarrow{o'})$ ] .",
    "[ subterm ] let @xmath103 be a term and @xmath119 be a substitution",
    ". assume @xmath169 and @xmath143 \\not\\in sn$ ] .",
    "then @xmath170 } ) \\not \\in sn$ ] for some @xmath171 such that @xmath172 } \\in sn$ ] .    a sub - term @xmath164 of a reduct of @xmath103 such that @xmath173 is minimum and @xmath174 \\not\\in sn$ ] has the desired form .",
    "[ lambda ] let @xmath103 be a term and @xmath119 be a substitution such that @xmath143 \\rhd^ * \\lambda z m_1 $ ] . then + - either @xmath175 and @xmath176 \\rhd^ * m_1 $ ] + - or @xmath177 for some @xmath178 and @xmath179 } ) \\rhd^ * \\lambda z m_1 $ ] .",
    "this is a classical ( though not completely trivial ) result in @xmath0-calculus .",
    "note that , in case @xmath106 ( and we will only use the lemma in this case ) , it becomes easier .",
    "the proof can be done by induction on @xmath108 by considering the possibility for @xmath103 : either @xmath180 or @xmath181 or @xmath182 ( for @xmath141 in @xmath183 or not ) .",
    "[ ordre ] we define on @xmath102 the following relations    * @xmath184 iff @xmath185 for some @xmath6 such that @xmath186 .",
    "* @xmath187 iff @xmath184 and @xmath188 . * @xmath189 iff @xmath184 and @xmath190    it is clear that @xmath191 is an equivalence on @xmath102 .    1 .",
    "let @xmath192 and @xmath193 .",
    "2 .   for @xmath194 ,",
    "let @xmath195 where @xmath196 is the set of type variables occurring in @xmath6 .",
    "3 .   for @xmath197 , we will abbreviate by @xmath198 the set @xmath199 and by @xmath200 the set @xmath201 .",
    "if @xmath202 , @xmath203 will denote the opposite of @xmath204 .",
    "the opposite of + is - and conversely .",
    "let @xmath36 .",
    "the class of @xmath205 can be partitioned into two disjoint sets @xmath206 and @xmath207 satisfying the following properties .    1 .   if @xmath202 , @xmath208 and @xmath209 , then for each @xmath210 , @xmath211 and for each @xmath212 , @xmath213 .",
    "2 .   let @xmath214 . then ,",
    "if @xmath215 , @xmath216 and @xmath217 and if @xmath218 , @xmath219 and @xmath220 .    this follows immediately from the following observation .",
    "let @xmath221 and @xmath222 .",
    "choose an occurrence of @xmath223 in @xmath6 and in @xmath3 .",
    "then , these occurrences have the same polarity .",
    "this is because , otherwise , since @xmath184 , there is a @xmath224 such that @xmath225 and @xmath226 occurs in @xmath224 .",
    "but then , replacing the mentioned occurrences of @xmath223 by @xmath224 in @xmath6 and @xmath3 will contradict the fact that @xmath33 is good .",
    "[ class ] let @xmath36 and @xmath202 .",
    "we denote @xmath227 / for each @xmath228 , @xmath229 and for each @xmath230 , @xmath231 .",
    "[ propr ] let @xmath36 and @xmath202 .",
    "1 .   @xmath232 .",
    "2 .   if @xmath233 and @xmath234 , then @xmath235 .",
    "3 .   if @xmath233 and @xmath236 , then @xmath237 and @xmath238 .    immediate .",
    "* notations , remarks and examples *    * if the equations are those of the case 4 of the examples given above , we have @xmath239 and , for example , @xmath240 and @xmath241 , @xmath242 , @xmath243 , @xmath244 and @xmath245 . *",
    "if @xmath6 is a type , we denote by @xmath246 the size of @xmath6 .",
    "note that the size of a type is , of course , not preserved by the congruence .",
    "the size of a type will only be used in lemma [ sansx ] and the only property that we will use is that @xmath247 and @xmath248 are less than @xmath249 .",
    "* by the typing rules , the type of a term can be freely replaced by an equivalent one . however , for @xmath36 and @xmath250 , the fact that @xmath233 does not change when @xmath3 is replaced by @xmath224 for some @xmath251 .",
    "this will be used extensively in the proofs of the next sections .      to give the idea of the proof ,",
    "we first need a definition .",
    "let @xmath252 be a set of types .",
    "denote by @xmath253 $ ] the following property :    let @xmath254 .",
    "assume @xmath255 and @xmath65 for some @xmath256 such that @xmath257",
    ". then @xmath135 \\in sn$ ] .    to get the result",
    ", it is enough to show @xmath258 $ ] .",
    "the proof that any typed term is in @xmath105 is then done by induction on @xmath104 .",
    "the only non trivial case is @xmath259 .",
    "but @xmath260 $ ] and the result follows from @xmath258 $ ] and the _",
    "ih_.    we first show the following ( see lemma [ sansx ] ) .",
    "let @xmath261 . to prove @xmath262 $ ] , it is enough to prove @xmath263 $ ] for each @xmath264 .",
    "it is thus enough to prove of @xmath265 $ ] for each @xmath36 .",
    "this is done by induction on @xmath205 .",
    "assume @xmath266 $ ] for each @xmath267 .",
    "thus , by the previous property , we know @xmath268 $ ] .",
    "we show @xmath265 $ ] essentially as we said in section [ 3.1 ] .",
    "the only difference is that , what was called there `` @xmath18 is both positive and negative in @xmath6 '' here means @xmath6 is both in @xmath269 and @xmath270 .",
    "there we deduced that @xmath18 does not occur in @xmath6 . here",
    "we deduce @xmath271 and we are done since we know the result for this set .",
    "[ sansx ] let @xmath194 be such that @xmath263 $ ] holds for each @xmath264 .",
    "then @xmath262 $ ] holds .",
    "let @xmath134 be terms in @xmath105 .",
    "assume @xmath255 and @xmath272 and @xmath273 .",
    "we have to show @xmath274 \\in sn$ ] .",
    "this is done by induction on @xmath275 .",
    "assume @xmath135 \\not\\in sn$ ] .",
    "by lemma [ subterm ] , let @xmath276 be such that @xmath277 and @xmath278 where @xmath279 $ ] and @xmath280}$ ] . by lemma [ untyped ] , @xmath281 and @xmath282 \\;\\",
    ";    \\overrightarrow{q_1 } ) \\not \\in sn$ ] .",
    "if @xmath3 is a variable ( which is in @xmath283 since @xmath284 ) , we get a contradiction since we have assumed that @xmath263 $ ] holds for each @xmath264",
    ".    the type @xmath3 can not be a constant since , otherwise @xmath141 could not be applied to some arguments .",
    "thus @xmath285 . in the typing of @xmath286 ,",
    "the congruence may have been used and thus , by lemma [ congru ] , there are @xmath287 , @xmath288 , @xmath289 and @xmath290 and @xmath291 . but",
    "then , we also have @xmath292 and @xmath293 .",
    "now , by the _ ih _ , we have @xmath294 \\in sn$ ] since @xmath295 . since @xmath296 for some @xmath297 and @xmath298 : u_2 $ ] , by the _ ih _",
    "since @xmath299 , we have @xmath282 \\ ; \\overrightarrow{q_1})=(z \\ ; \\overrightarrow{q_1})[z = n_1[x_1:=p_1 ] ] \\in sn$ ] . contradiction .",
    "_ for now on , we fix some @xmath205 and we assume @xmath266 $ ] for each @xmath300 . thus , by lemma",
    "[ sansx ] , we know that @xmath268 $ ] holds . it remains to prove @xmath265 $ ] i.e. proposition [ avecx ] .",
    "_    let @xmath103 be a term , @xmath119 be a substitution , @xmath37 be a context and @xmath3 be a type .",
    "say that @xmath301 is adequate if the following holds .",
    "* @xmath302 : u$ ] and @xmath303 .",
    "* for each @xmath131 , @xmath304 and @xmath305 .",
    "[ prepa ] let @xmath306 be integers , @xmath307 be a sequence of terms and @xmath308 be adequate .",
    "assume that    1 .",
    "@xmath309 and @xmath310 \\ , \\overrightarrow{s } ) : w$ ] for some @xmath311 .",
    "@xmath312 , @xmath313 and @xmath314 .",
    "3 .   @xmath143 \\in sn$ ] for every adequate @xmath315 such that @xmath316",
    ".    then @xmath317 \\ ; \\overrightarrow{s } )   \\in sn$ ] .",
    "by induction on the length of @xmath307 .",
    "if @xmath307 is empty , the result follows from ( 3 ) since @xmath314 .",
    "otherwise , let @xmath318 and assume that @xmath319 \\rhd^ * \\l z \\ ; r$ ] .",
    "by lemma [ lambda ] , there are two cases to consider :    * @xmath320 .",
    "we have to show that @xmath321\\ \\overrightarrow{s_2 } ) \\in sn$ ] .",
    "since @xmath322 , by lemmas [ congru ] and [ propr ] , there are types @xmath323 such that @xmath324 and @xmath325 and @xmath326 and @xmath327 and @xmath328 . since @xmath329 and @xmath330 , \\delta \\cup \\ { z : b_1\\ } , r ' ,",
    "b_2)$ ] is adequate , it follows from ( 3 ) that @xmath331 \\in sn$ ] .",
    "+ - assume first @xmath332 .",
    "since @xmath333 and @xmath334 $ ] , the result follows from @xmath268 $ ] .",
    "+ - otherwise , the result follows from the _ ih _ since @xmath335 , \\delta \\cup \\ { z : b_1\\ } , r ' , b_2)$ ] is adequate and the length of @xmath336 is less than the one of @xmath307 . *",
    "if @xmath337 for some @xmath338",
    ". then @xmath339 } ) : b $ ] . by the definition of adequacy , the type of @xmath161 is in @xmath340 and @xmath341",
    "contradiction .",
    "[ x>0 ] assume @xmath342 is adequate",
    ". then @xmath343 \\in sn$ ] .",
    "by induction on @xmath108 .",
    "the only non trivial case is @xmath344 for some @xmath345 .",
    "let @xmath346 .    by the _",
    ", @xmath347 , \\overrightarrow{o[\\sigma ] } \\in sn$ ] . by lemma [ congru ]",
    ", we have @xmath348 , @xmath349 : w_1 $ ] and @xmath350 ) : w_2 $ ] . moreover , by lemma [ propr ] , @xmath351 and @xmath352 .",
    "since @xmath353 = ( z \\ ; \\overrightarrow{o})[\\sigma + z : = ( n \\ , q[\\sigma])]$ ] , @xmath354 , @xmath355 and @xmath356 , it is enough , by the _ ih _ , to show that @xmath357 ) \\in sn$ ] .",
    "assume that @xmath358 .",
    "we have to show that @xmath359\\in sn$ ] .",
    "- assume first @xmath360 .",
    "the result follows from @xmath361 $ ] .    - otherwise ,",
    "assume @xmath359 \\not \\in sn$ ] .",
    "since @xmath362 \\in sn$ ] , by lemma [ subterm ] , @xmath363 for some @xmath364 such that @xmath365 } \\in sn$ ] and @xmath366   \\ ; \\overrightarrow{l[y:=q [ \\sigma ] ] } ) \\not \\in sn$ ] .",
    "but this contradicts lemma [ prepa ] .",
    "note that , by the , condition ( 3 ) of this lemma is satisfied .",
    "[ avecx ] assume @xmath367 and @xmath368 and @xmath369",
    ". then @xmath274 \\in sn$ ] .",
    "this follows from lemma [ x>0 ] since @xmath370 , \\g , m , u ) $ ] is adequate .",
    "let @xmath372 be an infinite set of variables such that @xmath373 .",
    "an element of @xmath21 ( resp .",
    "@xmath372 ) is said to be a @xmath0-variable ( resp . a @xmath374-variable ) .",
    "we extend the set of terms by the following rules + @xmath375 2 .",
    "we add to the set @xmath28 the constant symbol @xmath376 and we denote by @xmath377 the type @xmath378 .",
    "3 .   we extend the typing rules by + @xmath379 @xmath380 + where @xmath37 is now a set of declarations of the form @xmath381 and @xmath382 where @xmath141 is a @xmath0-variable and @xmath383 is a @xmath384-variable .",
    "we add to @xmath385 the following reduction rule @xmath386 $ ] where @xmath387 $ ] is obtained by replacing each sub - term of @xmath103 of the form @xmath388 by @xmath389 .",
    "this substitution will be called a @xmath384-substitution whereas the ( usual ) substitution @xmath135 $ ] will be called a @xmath0-substitution .",
    "* remarks *    * note that we adopt here a more liberal syntax ( also called de groote s calculus @xcite ) than in the original calculus since we do not ask that a @xmath390 is immediately followed by a @xmath391 ( denoted @xmath392 m$ ] in parigot s notation ) . *",
    "we also have changed parigot s typing notations .",
    "instead of writing @xmath393 , @xmath394 we have written @xmath395 but , since the first introduction of the @xmath1-calculus , this is now quite common . *",
    "unlike for a @xmath0-substitution where , in @xmath135 $ ] , the variable @xmath141 has disappeared it is important to note that , in a @xmath384-substitution , the variable @xmath383 has not disappeared .",
    "moreover its type has changed .",
    "if the type of @xmath9 is @xmath3 and , in @xmath396 , the type of @xmath383 is @xmath397 it becomes @xmath398 in @xmath399 $ ] . *",
    "the definition of good congruence is the same as before . as a consequence",
    ", we now have the following facts . if @xmath400 , then @xmath401 and , if @xmath402 , then @xmath403 .",
    "* we also extend all the notations given in section [ s - lambda ] . finally note that lemma [ congru ] remains valid .",
    "moreover , they are easily extended by lemma [ typed1 ] below .",
    "[ typed1 ]    1 .   if @xmath404 , then @xmath405 for some @xmath224 such that @xmath62 .",
    "2 .   if @xmath406 , then @xmath407 and @xmath408 .",
    "3 .   if @xmath409 and @xmath65 , then @xmath410 : t$ ] .",
    "[ sr ] if @xmath67 and @xmath68 , then @xmath69 .",
    "it is enough to show that , if @xmath411 , then @xmath412:t$ ] .",
    "assume @xmath413 .",
    "by lemma [ congru ] , @xmath414 , @xmath415 and @xmath416 .",
    "thus , @xmath417 and @xmath418 . by lemma [ congru ] , we have @xmath419 . since @xmath73 and @xmath416 , @xmath420 : \\bot$ ] .",
    "then @xmath421 : v$ ] and @xmath422 : t$ ] .",
    "[ mu.lambda ] let @xmath103 be a term and @xmath423 where @xmath424 ( resp .",
    "@xmath425 ) is @xmath0 ( resp .",
    "@xmath384 ) substitution .",
    "assume @xmath143 \\rhd^ * \\m\\al m_1 $ ] ( resp .",
    "@xmath180 ) . then    - either @xmath426 ( resp .",
    "@xmath427 ) and @xmath176 \\rhd^ * m_1 $ ]    - or ( @xmath177 for some @xmath428 and @xmath179 } ) \\rhd^ * \\m \\al m_1 $ ] ( resp .",
    "@xmath180 ) .    a @xmath384-substitution can not create a @xmath0 or a @xmath384 ( see , for example , @xcite ) and thus , the proof is as in lemma [ lambda ] .",
    "[ mu.untyped ] assume @xmath429 and @xmath430 . then either ( @xmath431 and @xmath432 \\;\\overrightarrow{q } ) \\not \\in sn$ ] ) or ( @xmath433 and @xmath434 \\;\\overrightarrow{q } ) \\not \\in sn$ ] ) .",
    "as in lemma [ untyped ] .    [ mu.subterm ]",
    "let @xmath103 be a term and @xmath119 be a @xmath0-substitution .",
    "assume @xmath169 and @xmath143 \\not\\in sn$ ]",
    ". then @xmath170 } ) \\not \\in sn$ ] for some @xmath171 such that @xmath172}\\in sn$ ] .    as in lemma [ subterm ]",
    ".    a @xmath374-substitution @xmath119 is said to be fair if , for each @xmath435 , @xmath436 where @xmath437 ( resp .",
    "@xmath438 ) means that @xmath439 ( resp .",
    "@xmath440 ) for some @xmath441 .",
    "[ goodsub ] let @xmath119 be is a fair @xmath374-substitution , @xmath442 and @xmath443 ( resp .",
    "@xmath444 ) , then @xmath143[x:=\\sigma(\\alpha)]= m[x:=\\sigma(\\alpha)][\\sigma]$ ] ( resp . @xmath143[\\beta = \\sigma(\\alpha)]= m[\\beta = \\sigma(\\alpha)][\\sigma]$ ] ) .    immediate .",
    "[ mu.nonsn ] let @xmath134 be terms and @xmath119 be a fair @xmath384-substitution .",
    "assume @xmath143 , n \\in sn$ ] but @xmath445 \\ ; n ) \\not \\in sn$ ] .",
    "assume moreover that @xmath143 \\ras \\m\\al m_1 $ ] .",
    "then , for some @xmath446 , we have @xmath447 \\ ; n ) \\not\\in sn$ ] and @xmath448 \\in sn$ ] where @xmath449 $ ] .    by lemma [ mu.lambda ] , we know that @xmath450 for some @xmath451 such that @xmath452 \\ras m_1 $ ] .",
    "let @xmath164 be a sub - term of a reduct of @xmath103 such that @xmath453 ) , cxty(m')\\rangle$ ] is minimum and @xmath454 \\not\\in sn$ ] .",
    "we show that @xmath455 and has the desired properties . by minimality",
    ", @xmath164 can not be of the form @xmath456 , @xmath457 nor @xmath458 for @xmath459 or @xmath460 .    if @xmath461 . by the minimality of @xmath164 , @xmath462 , p_2[\\sigma ' ] \\in sn$ ] .",
    "thus , by lemma [ mu.lambda ] and [ mu.untyped ] , @xmath463 ( resp .",
    "@xmath464 ) such that @xmath465[x:=p_2[\\sigma']]= q[x:=p_2][\\sigma ' ] \\not\\in sn$ ] ( resp .",
    "@xmath465[\\be = p_2[\\sigma']]=q[\\be = p_2][\\sigma ' ] \\not\\in sn$ ] ) and this contradicts the minimality of @xmath164 .    if @xmath466 for some @xmath467 . then @xmath468 \\ ; \\sigma(\\be ) ) \\not\\in sn$ ] and , by the minimality of @xmath164 , @xmath469 \\in sn$ ] .",
    "thus , by lemmas [ mu.lambda ] , [ mu.untyped ] and [ goodsub ] , @xmath470 ( resp .",
    "@xmath471 ) such that @xmath465[x:=\\sigma(\\be)]= q[x:=\\sigma(\\be)][\\sigma ' ] \\not\\in sn$ ] ( resp .",
    "@xmath465[\\gamma=\\sigma(\\be)]=q[\\gamma=\\sigma(\\be)][\\sigma ' ] \\not\\in sn$ ] ) and this contradicts the minimality of @xmath164 .",
    "thus @xmath455 and its minimality implies @xmath448 \\in sn$ ] .",
    "we use the same notations as in section [ proof ] .",
    "[ mu.sansx ] let @xmath194 be such that @xmath263 $ ] holds for each @xmath264 .",
    "then @xmath262 $ ] holds .",
    "assume that @xmath263 $ ] holds for each @xmath264 .",
    "the result is a special case of the following claim .    _",
    "claim : _ let @xmath103 be a term , @xmath55 be types such that @xmath472 and @xmath119 be a @xmath0-substitution such that , for each @xmath141 , @xmath473 $ ] where @xmath474 is a fair @xmath374-substitution such that @xmath475 ) = \\emptyset$ ] .",
    "assume @xmath476 and for each @xmath131 , @xmath477 .",
    "assume finally that @xmath103 and the @xmath478 $ ] are in @xmath105 .",
    "then , @xmath143 \\in sn$ ] .",
    "_ by induction on @xmath479 where @xmath480 @xmath481 and @xmath482 and , in the sums , each occurrence of a variable counts for one .",
    "for example , if there are two occurrences of @xmath483 and three occurrences of @xmath484 , @xmath485 . note that we really mean @xmath486 and not @xmath487)$ ] and similarly for @xmath488 .",
    "the only non trivial case is when @xmath489 for @xmath131 . by the _ ih _ , @xmath347 , \\overrightarrow{o[\\sigma]}\\in sn$ ] .",
    "it is enough to show that @xmath490 \\ ; q[\\sigma ] ) \\in sn$ ] since @xmath143 $ ] can be written as @xmath454 $ ] where @xmath491})$ ] and @xmath492 \\ ; q[\\sigma])$ ] and ( since the size of the type of @xmath493 is less than the one of @xmath3 ) the gives the result . by lemma [ mu.untyped ] , we have two cases to consider .    * @xmath478 \\ras \\l y n_1 $ ] . by lemma [ mu.lambda ] , @xmath494 and the proof is exactly the same as in lemma [ sansx ] . *",
    "@xmath478 \\ras \\m \\al n_1 $ ] . by lemma [ mu.nonsn ] ,",
    "let @xmath495 be such that @xmath496 \\in sn$ ] and @xmath497 \\ ; q[\\sigma ] ) \\not \\in sn$ ] where @xmath498 $ ] .",
    "but @xmath499 can be written as @xmath500 $ ] where @xmath129 is the same as @xmath119 except that @xmath501 $ ] .",
    "note that @xmath502 is the same as ( or less than ) @xmath103 but one occurrence of @xmath141 has been replaced by the fresh variable @xmath161 .",
    "the substitution @xmath503 is fair and @xmath504 .",
    "the gives a contradiction since @xmath505 .",
    "note that the type condition on @xmath129 is satisfied since @xmath506 has type @xmath3 , thus @xmath383 has type @xmath377 and thus @xmath507 also has type @xmath3 .",
    "_ for now on , we fix some @xmath205 and we assume @xmath266 $ ] for each @xmath300 . thus , by lemma [ mu.sansx ] , we know that @xmath268 $ ] holds . it remains to prove @xmath265 $ ] i.e. proposition [ mu.avecx ] .",
    "_    let @xmath103 be a term , @xmath508 where @xmath424 ( resp .",
    "@xmath425 ) is a @xmath0 ( resp .",
    "@xmath384 ) substitution , @xmath37 be a context and @xmath3 be a type .",
    "say that @xmath301 is adequate if the following holds :    * @xmath509 : u$ ] and @xmath303 .",
    "* for each @xmath510 , @xmath511 and @xmath512 .",
    "note that nothing is asked on the types of the @xmath384-variables .",
    "[ mu.prepa ] let @xmath306 be integers , @xmath307 be a sequence of terms and @xmath308 be adequate .",
    "assume that    1 .",
    "@xmath513 and @xmath514 \\ , \\overrightarrow{s } ) : w$ ] for some @xmath311 .",
    "@xmath312 , @xmath313 and @xmath314 .",
    "3 .   @xmath143 \\in sn$ ] for every adequate @xmath315 such that @xmath515 .",
    "then @xmath317 \\ , \\overrightarrow{s } )   \\in sn$ ] .",
    "by induction on the length of @xmath307 .",
    "the proof is as in lemma [ prepa ] .",
    "the new case is @xmath516 \\rhd^ * \\m \\al r$ ] ( when @xmath517 ) . by lemma [ mu.lambda ]",
    ", we have two cases to consider .    * @xmath518 .",
    "we have to show that @xmath519\\ \\overrightarrow{s_2 } ) \\in sn$ ] . by lemma [ typed1 ] , the properties of @xmath33 and since @xmath520 , there are types @xmath323 such that @xmath521 and @xmath522 : b_2 $ ] and @xmath523 .",
    "since @xmath524 and @xmath525 , \\delta \\cup \\ { \\al : \\neg b_2\\ } , \\mu \\al r ' , b_2)$ ] is adequate , it follows from ( 3 ) that @xmath526 \\in sn$ ] . + - assume first @xmath332 .",
    "since @xmath333 and @xmath527 $ ] , the result follows from @xmath268 $ ] .",
    "+ - otherwise , the result follows from the _ ih _ since @xmath528 , \\delta \\cup \\ { \\al : \\neg b_2\\ } , \\mu \\al r ' , b_2)$ ] is adequate and the length of @xmath336 is less than the one of @xmath307 . * @xmath337 for some @xmath0-variable @xmath529 . as in lemma [ prepa ] .",
    "[ mu.2 ] assume @xmath530 is adequate .",
    "then @xmath343 \\in sn$ ] .    as in the proof of the lemma [ mu.sansx ]",
    ", we prove a more general result .",
    "assume that , for each @xmath510 , @xmath531 $ ] where @xmath474 is a fair @xmath374-substitution such that @xmath475 ) = \\emptyset$ ] .",
    "we prove that @xmath143 \\in sn$ ] .    by induction on @xmath532 and , by secondary induction , on @xmath533",
    "where @xmath534 and @xmath535 are defined as in lemma [ mu.sansx ] .",
    "the proof is as in lemma [ mu.sansx ] .",
    "the interesting case is @xmath489 for some @xmath510 .",
    "the case when @xmath536 \\ras \\l y n'$ ] is as in lemma [ x>0 ] .",
    "the new case is when @xmath478 \\rhd^ * \\m \\al n'$ ] .",
    "this is done as in lemma [ mu.sansx ] . note that , for this point , the type was not used .",
    "[ mu.avecx ] assume @xmath367 and @xmath368 and @xmath537",
    ". then @xmath274 \\in sn$ ] .",
    "this follows from lemma [ mu.2 ] since @xmath370 , \\g , m , u ) $ ] is adequate .",
    "by using recursive types , some terms that can not be typed in the simply typed @xmath0-calculus become typable .",
    "for example , by using the equation @xmath538 , it is possible to type terms containing both @xmath539 and @xmath540 as sub - terms . just take @xmath541 and @xmath542 . by using the equation @xmath543 ,",
    "it is possible to apply an unbounded number of arguments to a term .",
    "it is thus natural to try to extend schwichtenberg s result and to determine the class of functions that are represented in such systems and , in particular , to see whether or not they allow to represent more functions .",
    "note that doyen @xcite and fortune & all @xcite have given extensions of schwichtenberg s result .",
    "here is an example of function that can not be typed ( of the good type ) in the simply typed @xmath0-calculus .",
    "let @xmath544 and @xmath545 where @xmath546 are type variables .",
    "let @xmath547 be the church numeral representing @xmath548 and @xmath549 , @xmath550 be the terms representing _ false _ and _ true_. note that @xmath551 has type _ nat _ and @xmath552 , @xmath553 have type @xmath554 .",
    "the term @xmath555 where @xmath556 has been introduced by b.maurey .",
    "it is easy to see that , for every @xmath557 , the term @xmath558 reduces to * 1 * if @xmath559 and to * 0 * otherwise .",
    "krivine has shown in @xcite that the type @xmath560 can not be given to @xmath561 in system @xmath10 but , by adding the equation @xmath562 , it becomes typable .",
    "our example uses the same ideas .",
    "let @xmath33 be the congruence generated by @xmath563 .",
    "for each @xmath564 , let @xmath565 where @xmath566 .",
    "[ p1 ] for each @xmath564 we have @xmath567 .",
    "we have @xmath568 , then @xmath569 , thus @xmath570 . but @xmath571 , therefore @xmath572 .",
    "we have @xmath573 , then @xmath574 , thus @xmath575 . but @xmath576 , therefore @xmath577 .",
    "we deduce that @xmath578 , then @xmath579 and thus @xmath580 .",
    "[ p2 ] for each @xmath564 and @xmath581 , @xmath582 reduces to * 1 * if @xmath583 and to * 0 * otherwise .",
    "@xmath584 + @xmath585 + @xmath586    * remarks *    note that for the ( usual ) simply typed @xmath0-calculus we could have taken for @xmath18 and @xmath587 the same variable but , for propositions [ p1 ] and [ p2 ] , we can not assume that @xmath588 because then the condition of positivity would not be satisfied .",
    "this example is thus not completely satisfactory and it actually shows that the precise meaning of the question `` which functions can be represented in such systems '' is not so clear .",
    "the strong normalization of a typed @xmath1-calculus can be deduced from the one of the corresponding typed @xmath0-calculus by using cps translations .",
    "see , for example , @xcite for such a translation .",
    "there is another , somehow simpler , way of doing such a translation .",
    "add , for each atomic type @xmath18 , a constant @xmath589 of type @xmath590 . using these constants",
    ", it is not difficult to get , for each type @xmath6 , a @xmath0-term @xmath591 ( depending on @xmath6 ) such that @xmath592 has type @xmath593 .",
    "this gives a translation of the @xmath594-calculus into the @xmath0-calculus from which the strong normalization of the @xmath1-calculus can be deduced from the one of the @xmath0-calculus .",
    "this translation , quite different from the cps translations , has been used by krivine @xcite to code the @xmath1-calculus with second order types in the @xmath595-calculus .    with recursive equations",
    ", we do not have to add the constant @xmath589 since we can use the equation @xmath596 .",
    "we give here , without proof , the translation .",
    "we denote by @xmath597 the simply typed @xmath0-calculus where @xmath33 is the congruence on @xmath598 ( where @xmath599 ) generated by @xmath600 for each @xmath18 and by @xmath601 the usual ( i.e. without recursive types ) @xmath1-calculus .    1 .   we define , for each type @xmath6 , a closed @xmath0-term @xmath591 such that @xmath602 as follows .",
    "this is done by induction on @xmath6 . *",
    "@xmath603 where @xmath604 .",
    "* if @xmath80 , @xmath605 .",
    "* @xmath606 2 .",
    "we define a translation from @xmath601 to @xmath597 as follows .",
    "* @xmath607 .",
    "* @xmath608 .",
    "* @xmath609 . * @xmath610 if @xmath383 has the type @xmath377 . * @xmath611 .    for a better understanding , in the translation of @xmath612 and @xmath613 ,",
    "we have kept the same name to the variable @xmath383 but it should be clear that the translated terms are @xmath0-terms with only on kind of variables .",
    "[ trtype ] if @xmath614 then @xmath615 .",
    "let @xmath134 be typed @xmath1-terms . if @xmath616 , then @xmath617 .",
    "it is enough to check that @xmath618)^*$ ] .",
    "the strong normalization of @xmath597 implies the one of @xmath601 .    by lemmas [ trtype ] and [ trred ] .",
    "* remark *    note that the previous translation can not be used to show that the @xmath1-calculus with recursive types is strongly normalizing since having two equations ( for example @xmath596 and @xmath619 ) is problematic .",
    "the proof of the strong normalization of the system d of intersection types @xcite is exactly the same as the one for simple types .",
    "is it possible to extend our proof to such systems with equations ?",
    "note that the sort of constraints that must be given on the equations is not so clear .",
    "for example , what does that mean to be positive in @xmath620 ? to be positive both in @xmath621 and @xmath622 ? in one of them ?",
    "it will be interesting to check precisely because , for example , it is known that the system given by system d and the equations @xmath623 and @xmath624 is strongly normalizing ( but the proof again is not formalized in peano arithmetic ) though the positivity condition is violated .",
    "2 .   we could add other typing rules and constructors to ensure that , intuitively , @xmath18 represents the _ least fixed point _ of the equation @xmath133 .",
    "this kind of thing is done , for example , in @xmath12 .",
    "what can be said for such systems ?",
    "there are many translations from , for example , the @xmath1-calculus into the @xmath0-calculus that allows to deduce the strong normalization of the former by the one of the latter .",
    "these cps transformations differ from the one given in section [ transfo ] by the fact that the translation of a term does not depend on its type . what is the behavior of such translations with recursive equations ?",
    "we would like to thank p urzyczyn who has mentioned to us the question solved here and has also indicated some errors appearing in previous versions of our proofs . thanks also to the referees and their valuable remarks ."
  ],
  "abstract_text": [
    "<S> we give an arithmetical proof of the strong normalization of the @xmath0-calculus ( and also of the @xmath1-calculus ) where the type system is the one of simple types with recursive equations on types .    </S>",
    "<S> the proof using candidates of reducibility is an easy extension of the one without equations but this proof can not be formalized in peano arithmetic . </S>",
    "<S> the strength of the system needed for such a proof was not known . </S>",
    "<S> our proof shows that it is not more than peano arithmetic . </S>"
  ]
}