{
  "article_text": [
    "topological properties for objects in 2d and 3d space is an important task in image processing .",
    "an interesting problem called hole counting is to count the number of holes in an 2d image . on the other hand , 3d computer graphics and computational geometry",
    "have usually used triangulation to represent a 3d object .",
    "it uses the marching - cube algorithm to transfer a digital object into the representation of simplicial complexes .",
    "it requires very large amount of space in computer memory .    in recent years",
    ", the developments in medical imaging and 3d digital camera systems raise the problem of the direct treatment of digital 3d objects due to the speed concerns . in theory ,",
    "digital topology will provide the method for such fast calculation .",
    "this paper will design fast algorithms for those calculation based on digital topology .",
    "this paper provides a complete process that deals with simulated and real data in order to obtain the topological invariants for 2d and 3d images .",
    "the algorithms are : ( 1 ) 2d hole counting , and ( 2 ) 3d boundary surface genus calculation .",
    "one of the most difficult parts in real image processing is to deal with some noises or pathological cases .",
    "this paper also gives detailed procedures for detecting those cases .",
    "and we will provide the reasons to modify the original image into the image where the mathematical formula could apply to .",
    "digital topology was developed for image analysis .",
    "we especially interested in obtaining the topological properties for 2d and 3d images , e.g. , topological invariants of images . in practice ,",
    "hole counting in 2d and genus in 3d spaces are most popular problems for real world problems .",
    "now , we first review some concepts .",
    "a digital space is a discrete space in which each point can be defined as an integer vector .",
    "two - dimensional digital space @xmath5 first .",
    "a point @xmath6 in @xmath5 has two horizontal @xmath7 and two vertical neighbors @xmath8 .",
    "these four neighbors are called directly adjacent points of @xmath9 . @xmath9 has also four diagonal neighbors : @xmath10 .",
    "these eight ( horizontal , vertical and diagonal ) neighbors are called general ( or indirect ) adjacent points of @xmath9 .",
    "let @xmath11 be m - dimensional digital space .",
    "two points @xmath12 and @xmath13 in @xmath11 are directly adjacent points , or we say that @xmath9 and @xmath14 are direct neighbor if    @xmath15    @xmath9 and @xmath14 are indirectly adjacent points if    @xmath16    for instance , in 2d , @xmath17 means 4-adjacency , and @xmath18 is 8-adjacency . in 3d",
    ", @xmath17 means 6-adjacency , and @xmath18 is 26-adjacency .",
    "( note : `` indirectly adjacent points '' include all directly adjacent points here .",
    "it may be the reason that we should change the word of `` indirectly '' to `` generally . '' )    in a three - dimensional space @xmath19 , a point has six directly adjacent points and 26 indirectly adjacent points .",
    "therefore , two directly adjacent points in @xmath19 are also called 6-connected , while two indirectly adjacent points are also called 26-connected . in this note",
    ", we mainly consider the direct adjacency . if we omit the word `` direct , '' `` adjacency '' means the direct adjacency .    a point in @xmath11",
    "is called a point - cell or 0-cell .",
    "a pair of points @xmath20 in @xmath11 is called a line - cell or 1-cell , if @xmath9 and @xmath14 are adjacent points .",
    "a surface - cell is a set of 4 points which form a unit square parallel to coordinate planes . a 3-dimensional - cell ( or 3-cell )",
    "is a unit cube which includes 8 points . by the same reasoning",
    ", we may define a @xmath21-cell .",
    "1(a)(b)(c)(d ) show a point - cell , line - cell , a surface - cell and a 3-cell , respectively .",
    "now let us consider to the concepts of adjacency and connectedness of ( unit ) cells .",
    "two points @xmath9 and @xmath14 ( point - cells , or 0-cells ) areif there exists a simple path @xmath22 , where @xmath23 and @xmath24 , and @xmath25 and @xmath26 are adjacent for @xmath27 .",
    "two cells are point - adjacent if they share a point . for example , line - cells @xmath28 and @xmath29 are point - adjacent in fig . 1 ( e ) , and surface - cells @xmath30 and @xmath31 are point - adjacent in fig .",
    "two surface - cells are line - adjacent if they share a line - cell .",
    "for example , surface - cells @xmath30 and @xmath32 in fig .",
    "1(g ) are line - adjacent .",
    "two line - cells are point - connected if they are two end elements of a line - cells path in which each pair of adjacent line - cells is point - adjacent . for example , line - cells @xmath28 and @xmath33 in fig .",
    "1(e ) are point - connected .",
    "two surface - cells are line - connected if they are two end elements of a surface - cells path in which each pair adjacent surface - cells are point - adjacent . for example , @xmath30 and @xmath31 in fig .",
    "1(f ) are line - connected .",
    "two @xmath21-cells are @xmath34-dimensional adjacent ( @xmath34-adjacent ) , @xmath35 , if they share a @xmath34-dimensional cell .",
    "a ( simple ) @xmath21-cells path with @xmath34-adjacency is a sequence of @xmath21-cells @xmath36 , where @xmath37 and @xmath38 are @xmath34-adjacent and @xmath36 are different elements .",
    "two @xmath21-cells are called @xmath34-dimensional connected if they are two end elements of a ( simple ) @xmath21-cells path with @xmath34-adjacency .",
    "assume that @xmath39 is a subset of @xmath11 .",
    "let @xmath40 be the set of all points in @xmath39 , and @xmath41 be the line - cells set in @xmath39 , ... , @xmath42 be the set of @xmath21-cells of @xmath39 .",
    "we say two elements @xmath9 and @xmath14 in @xmath42 are @xmath34-adjacent if @xmath43 , @xmath44 .",
    "let @xmath45 , a line - neighborhood of @xmath9 is a set containing @xmath9 and its two adjacent points .",
    "a surface - neighborhood of @xmath9 is a ( sub-)surface where @xmath9 is a inner point of the ( sub-)surface .",
    "@xmath11 represents a special graph @xmath46 .",
    "@xmath47 contains all integer grid points in the @xmath48 dimensional euclidean space @xcite .",
    "the edge set @xmath49 of @xmath11 is defined as @xmath50 , where @xmath51the distance between @xmath52 and @xmath53 .",
    "in fact , @xmath49 contains all pairs of adjacent points .",
    "because @xmath52 is an @xmath48-dimensional vector , @xmath54 means that only one component , the @xmath55-th component , is different in @xmath52 and @xmath53 , @xmath56 , and the rest of the components are the same where @xmath57 and @xmath58 .",
    "this is known as the direct adjacency .",
    "one can define indirect adjacency as @xmath59 .",
    "@xmath11 is usually called an @xmath48-dimensional digital space.basic discrete geometric element @xmath60-cells can be defined in such a space , such as 0-cells ( point - cells ) , 1-cells ( line - cells ) , and 2-cells ( surface - cells ) .",
    "fig2_1.latex      we have proved some related theorem using euler characteristics and gauss - bonett theorem .",
    "the first is about simple closed digital curves .",
    "@xmath61 is a simple closed curve in direct ( 4- ) adjacency where each element in @xmath61 is a point in @xmath5 .",
    "we use @xmath62 to represent the internal part of @xmath61 . since direct adjacency",
    "has the jordan separation property , @xmath63 will be disconnected .",
    "we also call a point @xmath9 on @xmath61 a @xmath64 point if @xmath9 has @xmath55 adjacent points in @xmath65 .",
    "in fact , @xmath66 and @xmath67 if @xmath68 in @xmath61 .",
    "@xmath69 contains outward corner points , @xmath70 contains straight - line points , and @xmath71 contains inward corner points .",
    "for example , the following center point is a outward corner point in array ( also see fig .",
    "2 ): @xmath72    but in next array , the center point is an inward corner point :    @xmath73    in  @xcite ( on page 20 ) , we used the euler theorem to show a result for a simple closed curve @xmath61 ,    @xmath74      in this section , we review some existing work related to this paper including the genus of closed digital surfaces , homology groups of manifolds in 3d digital space , and a theoretical linear algorithm of finding homology groups in 3d  @xcite .",
    "any continuous 3d object can be viewed as a collection of 3d voxels in digital or cubical space .",
    "unless the sampling method is changed , any practical method of genus calculation must adapt to this fact .",
    "medical imaging such as ct and mri are such examples .    cubical space with direct adjacency , or ( 6,26)-connectivity in digital space@xcite , has the simplest topology in 3d digital spaces .",
    "it is also sufficient for the topological property extraction of digital objects in 3d .",
    "two points are said to be adjacent in ( 6,26)-connectivity space if the euclidean distance of these two points is 1 , called direct adjacency .",
    "let @xmath75 be a closed ( orientable ) digital surface in the 3d grid space in direct adjacency .",
    "we know that there are exactly 6-types of digital surface points ( see fig .",
    "this was discovered by chen and zhang in  @xcite .",
    "relation to different definitions of digital surfaces can be found in  @xcite .",
    "assume that @xmath76 ( @xmath77 , @xmath78 , @xmath79 , @xmath80 ) is the set of digital points with @xmath55 neighbors .",
    "we have the following result for a simply connected @xmath75  @xcite@xcite :    @xmath81    @xmath78 and @xmath80 has two different types , respectively .",
    "gauss - bonnet theorem states that if @xmath75 is a closed manifold , then    @xmath82    where @xmath83 is an element of area and @xmath84 is the gaussian curvature .",
    "its discrete form is    @xmath85    where @xmath86 is the genus of @xmath75 .",
    "assume that @xmath87 is the curvature of elements in @xmath76 , @xmath88 3,4,5,6 .",
    "we have    [ l21 ] ( a ) @xmath89 , ( b ) @xmath90 , for both types of digital surface points , ( c ) @xmath91 , and ( d ) @xmath92 , for both types of digital surface points .",
    "we obtained ( see @xcite ) ,    @xmath93    the three simple examples show that the above formula is correct @xcite .",
    "4 . different surface points can also be used to form a feature vector for 3d surfaces .",
    "we have used it in face modeling  @xcite .",
    "= 2.3 in    for a @xmath21-manifold , homology group @xmath94 , @xmath95 provides the information for the number of holes in each @xmath55-skeleton of the manifold .",
    "when the genus of a closed surface is obtained , we can then calculate the homology groups corresponding to its 3-dimensional manifold in 3d .",
    "the following result follows from standard results in algebraic topology @xcite .",
    "it also appears in @xcite .",
    "let @xmath96 be the @xmath55th betti number of @xmath75 .",
    "the euler characteristic of @xmath75 is defined by    @xmath97    if @xmath75 is a 3-dimensional manifold , @xmath98 for all @xmath99 essentially because there are no @xmath55-dimensional holes .",
    "therefore , @xmath100 . furthermore ,",
    "if @xmath75 is in @xmath101 , it must have nonempty boundary .",
    "this implies that @xmath102 .",
    "[ jordan2 ] let @xmath75 be a compact connected 3-manifold in @xmath103 .",
    "then    1 .   @xmath104 .",
    "2 .   @xmath105 , i.e. @xmath106 is torsion - free with rank being half of rank @xmath107 .",
    "3 .   @xmath108 where @xmath60 is the number of components of @xmath109 .",
    "4 .   @xmath110 unless @xmath111 .",
    "a proof of above theorem is shown in @xcite .",
    "in an image , hole counting is to count the number of holes in an 2d image .",
    "it was studied by some researchers before  @xcite . in this paper",
    ", we will get the simplest method to solve the problem .",
    "a line or curve in real world always have a thickness no matter how thin it is",
    ". however , a digital line could give human some wrong interpretation .",
    "the example in fig .",
    "6 will show you how similar digital objects produce different answers .",
    "micro - software engineers for ms paint probably never thought that there are some major difference except the width of a paint brash .",
    "the artistic effect are not very different .",
    "however , the images in digital world makes great deal of differentiality from fig 6 .",
    "( 1 ) to ( 2 ) than the difference from ( 2 ) to ( 3 ) .",
    "this is because that fig 6 .",
    "( 1 ) can be interpreted as a ( square-)dotted line for one of its leg for direct adjacency .",
    "a dotted line is a collection of several disconnected objects .",
    "this is much complicated issue than a connected line . fig",
    ". 6 ( 4 ) may be no hole , one hole , or two holes . in 8-adjacency , there is no hole . in 4-adjacency , the points are not connected .",
    "the best way is to use 8-adjacency for `` 1 ' 's ( foreground ) and use 4-adjacency for `` 0 ' 's ( background ) . only fig .",
    "6 ( 6 ) will give the answer exactly the same as humans interpretation , i.e. two holes .",
    "if we use 8-adjacency for `` 1 ' 's and use 4-adjacency for `` 0 ' 's , this type of adjacency is called ( 8,4)-adjacency .",
    "it may cause another problem , for instance , if we have two parallel `` 1 '' lines with a `` 0 '' line in between in 45 degree .",
    "each `` 0 '' point will be determined as a separated component .",
    "they are not formed a connected `` 0 '' line .",
    "that is also against the human interpretation .    in this paper",
    ", our method will assume that @xmath61 does not contain the following cases ( if there is any , we will modify the original image to remove them , we will discuss next ) :    @xmath112    and    @xmath113    these two cases are called the pathological cases ( see fig.7 )    it is obvious that , our paper does not solve all problems .",
    "it is too strict .",
    "the advantage of our method is to get a simple treatment . in  @xcite",
    ", there were detailed discussions about complex cases .    our algorithm will fill or delete some points in the original image to make the pathological cases go away .",
    "we also want to remove single point whatever it is black or white .",
    "it will be treated as noise .",
    "topological invariants should maintain jordan property .",
    "we shall only allow the direct adjacency in order to dealing with topological invariants , at least in most of cases .",
    "the number of holes in a connected component in 2d images is a basic invariant . in this note",
    ", a simple formula was proven using our previous results in digital topology  @xcite .",
    "the new is : @xmath114 , where h is the number of holes , and @xmath115 indicate the set of corner points having @xmath55 direct adjacent points in the component .",
    "an image segmentation method can extract a connected component . a connected component @xmath39 in a 2d digital image is often used to represent a real object .",
    "the identification of the object can be first done by determining how many holes in the component .",
    "for example , letter `` a '' has one hole and `` b '' has two holes . in other words , if @xmath39 has @xmath116 holes , then the complement of @xmath39 has @xmath117 connected components ( if s does not reach the boundary of the image ) .",
    "let @xmath118 be a connected component and its boundary @xmath119 is a collection of simple closed curves without pathological cases .",
    "then , the number of holes in @xmath39 is @xmath120 @xmath121 .    in this section , we will give two methods to prove our result .",
    "first , use the 3d formula to get the theorem for holes .",
    "second , we use 2d formula to directly prove the theorem . + * _ the first proof : _ *    let @xmath122 be a connected component and its boundary do not have the pathological cases .",
    "( we actually can detect those cases in linear time . )",
    "we can embed @xmath39 into @xmath123 to make a double @xmath39 in @xmath123 . at @xmath124 plane",
    ", we have a @xmath39 , denoted @xmath125 , and we also have the exact same @xmath39 at @xmath126 plane , denoted @xmath127 .    without loss generality",
    ", @xmath128 is a solid object .",
    "( we here omit some technical details for the strict definition of digital surfaces . )",
    "it s boundary is closed digital surfaces with genus @xmath129 .",
    "we know @xmath130    there will be no points in @xmath80 .    for each point @xmath131 in @xmath2 in @xmath132 ( @xmath61 is the boundary of @xmath39 )",
    ", we will get two points in @xmath77 in @xmath128 . in the same way ,",
    "if a point @xmath133 is inward in @xmath134 , we will get two points in @xmath79 in @xmath128 .",
    "there is no point in @xmath80 , i , e .",
    ", @xmath135 .",
    "so @xmath136 , and @xmath137 .",
    "we have    @xmath138    thus ,    @xmath139 @xmath140    we can also prove this theorem using lemma 1 for digital curves : @xmath141 for a simple closed curve . + * _ the second proof : _ *    this can also be proved by the lemma in above section .",
    "@xmath142    a 2d connected component @xmath39 with @xmath116 holes that contains @xmath117 simple closed curves in the boundary of @xmath39 those curves do not cross each other",
    ".    the @xmath116 curves corresponding to @xmath116 holes will be considered oppositely in terms of inward - outward .",
    "including one counts at inward and h is reversed outward with inward .",
    "it will get there .",
    "let @xmath143 the outside curve of @xmath39 and @xmath144 , is the curve for the @xmath55-th hole .",
    "inward points to @xmath39 is the outward points to @xmath145 . and vise versa .",
    "@xmath146    @xmath147    the total outward points in the boundary of @xmath39 is    @xmath148    the inward points in the boundary of @xmath39 is    @xmath149    thus ,    @xmath150    we have @xmath151    therefore ,    @xmath152 @xmath140    we can see that this formula is so simple to get the holes ( genus ) for a 2d object without any little sophistic algorithm , just count if the point is a corner point , inward or outward",
    ".    we could not get the similar simple formula in triangulated representation of the 2d object .",
    "this is the beauty of digital geometry and topology !",
    "* example 1 * to test if this formula is correct , we select the following examples    @xmath153    in order to see clearly , we use `` 2 '' to represent points in @xmath154 and use `` 4 '' to represent points in @xmath155 .",
    "@xmath156    in this example @xmath157 and @xmath158 . @xmath159 .",
    "another example is the following    @xmath160    in the second example @xmath161 and @xmath162 . @xmath163 .",
    "when add a hole , we will add 4 more @xmath155 points .",
    "that is the reason why this formula is correct .",
    "the key of the algorithm is to delete all the pathological cases .",
    "there two types of such cases .",
    "sometimes it is hard to decide if we need to add a point or delete a point to a pathological case to be removed .",
    "the first method will based on the original grade space .",
    "sometimes , delete a pixel for removing pathological case may add another pathological case .",
    "in such a case , we will add a pixel to make the original pathological case go away . and vice versa .    in other case",
    ", if add and delete will not reduce the pathological case , use delete . since delete",
    "will eventually complete the job .",
    "it must be the case shown in fig .",
    "the second method is made to apply to the case that so many instances in the image as shown in fig .",
    "we need to consider a refinement method e.g. half grade space to avoid deletion and addition of a cell that will cause other pathological case .",
    "this method will increase the space need .",
    "we use half size cells to fill the space .",
    "or we just delete a half cell to remove the pathological case . + * algorithm 3.1 * algorithm for calculating number of holes in 2d images .",
    ": :    get connected components using direct - adjacency ( 4-adjacency ) .",
    ": :    extract every component , do following .",
    "fill all single `` 0 '' pixel or    ( unit - square or 2-cell ) to be `` 1 '' if all its indirect neighbors    ( 8-adjacency ) are `` 1 '' .",
    "delete all single `` 1 '' pixel if all its    indirect neighbors ( 8-adjacency ) are `` 0 '' .",
    ": :    find all pathological cases , delete or add a pixel if this action does    not create a new pathological case . if either action will create a new    pathological case , use delete .",
    "repeat this step until all pathological    cases are removed .",
    ": :    count all inward edge points @xmath155 and outward points    @xmath69 .",
    ": :    @xmath164    note that deleting a pixel means to change the single `` 0 '' pixel ( unit - square or 2-cell ) to `` 1 '' pixel . is for noise image .",
    "it is not very necessary for doing this step .",
    "the above calculation is for each component to get holes .",
    "algorithm 3.1 is an @xmath4 space algorithm without step 1 since it is just count the number of point types .",
    "if we assume that the number of pathological cases are constant , this algorithm will be linear in time .",
    "basically , the topological properties of an object in 3d contains connected components , genus of its boundary surfaces , and other homologic and homotopic properties  @xcite . in 3d ,",
    "the problem of obtaining fundamental groups is decidable but no practical algorithm has yet been found .",
    "therefore , homology groups have played the most significant role  @xcite  @xcite .",
    "theoretical results show that there exist linear time algorithms for calculating genus and homology groups for 3d objects in 3d space  @xcite .",
    "however , the implementation of these algorithms is not simple due to the complexity of real data samplings .",
    "most of the algorithms require the triangulation of the input data since it is collected discretely .",
    "however , for most medical images , the data was sampled consecutively , meaning that every voxel in 3d space will contain data . in such cases ,",
    "researchers use the marching - cubes algorithm obtain the triangulation since it is a linear time algorithm  @xcite .",
    "however the spatial requirements for such a treatment will be at least doubled by adding the surface - elements ( sometimes called faces ) .",
    "the theoretical work of calculating genus based on simple decomposition will turn into two different procedures : ( 1 ) finding the boundary of a 3d object and then using polygon mapping , also called polygonal schema , ( 2 ) cell complex reductions where a special data structure will be needed .    in this paper , we look at a set of points in 3d digital space , and our purpose is to find homology groups of the data set . the direct algorithm without utilizing triangulation was proposed by chen and rong in 2008  @xcite however , this algorithm is based on the strict definition of digital surfaces . many real 3d sets may not satisfy the definition . in other words ,",
    "a set of connected points may not be able to be put into such a process without considerable associated theoretical and practical processes .    in @xcite , we discuss the geometric and algebraic properties of manifolds in 3d digital spaces and the optimal algorithms for calculating these properties .",
    "we consider _ digital manifolds _ as defined in  @xcite .",
    "more information related to digital geometry and topology can be found in  @xcite and  @xcite .",
    "we presented a theoretical optimal algorithm with time complexity @xmath3 to compute the genus and homology groups in 3d digital space , where @xmath60 is the size of the input data  @xcite .",
    "the key in the algorithm in  @xcite is to find the genus of the closed digital surfaces that is the boundary of the 3d object .",
    "however , the new algorithm is based on the strict definition of closed digital surfaces in @xcite , which means that there are many cases of real sampling of 3d objects that do not satisfy the definition of digital surfaces . in this paper , we will also deal with extreme situations .",
    "we have designed an adding and deleting method to make the 3d object into manifolds .",
    "first describe a theoretical procedure in this section for 3d genus for 3d objects",
    ". the implementation of the algorithm must consider all possible cases in practical data collection .",
    "we first need to find the boundary and then decide if the boundary is a 2d manifold . if the boundary data connecting voxel data sets are not purely defined digital surfaces , we will have three options : ( 1 ) we need to modify the data to meet the requirement before genus calculation , ( 2 ) if the change of the original data set is too great , we may need to stop the modification instead of outputting a result for reference , and ( 3 ) we make some limited changes , and then produce a result .",
    "the difference between the theoretical results and practical data processing is that we may not always get the input data we expected . in our case , the boundary of a solid object should be treated as a surface .",
    "however , practically , this might not always be the case .",
    "some researchers also consider making real data sets `` well''-organized .",
    "et al _ considered making a 26-connected data set well - composed  @xcite @xcite  @xcite .",
    "this means that two voxels will be connected by a sequence of voxels where each pair of two adjacent cubes share a 2d - cell ( face - unit ) .",
    "the concept of well - composed is mathematically equivalent to 6-connected .",
    "an algorithm described in  @xcite @xcite may generate new `` none '' well - composed cases , which are not good selections for genus calculation .",
    "our new algorithm and implementation will perform : ( 1 ) pathological cases detection and deletion , ( 2 ) raster space to point space ( dual space ) transformation , ( 3 ) the linear time algorithm for boundary point classification , and ( 4 ) genus calculation .    some detailed considerations of recognition algorithms related to 3d manifolds can be found in  @xcite where brimkov and klette made extensive investigations in boundary tracking .",
    "the discussions of 3d objects in raster space can be found in  @xcite .",
    "based on the results we presented in the above subsections , we now describe a linear algorithm for computing the homology group of 3d objects in 3d digital space  @xcite .",
    "assuming we only have a set of points in 3d .",
    "we can digitize this set into 3d digital spaces .",
    "there are two ways of doing so : ( 1 ) by treating each point as a cube - unit that is called the raster space , ( 2 ) by treating each point as a grid point , which is also called the point space .",
    "these two are dual spaces . using the algorithm described in  @xcite",
    ", we can determine whether the digitized set forms a 3d manifold in 3d space in direct adjacency for connectivity .",
    "the algorithm is in linear time . + * algorithm 4.1 * let us assume that we have a connected @xmath75 that is a 3d digital manifold in 3d .",
    ": :    track the boundary of @xmath75 , @xmath109 , which    is a union of several closed surfaces .",
    "this algorithm only needs to    scan though all the points in @xmath75 to see if the point is    linked to a point outside of @xmath75 .",
    "that point will be on    boundary .",
    ": :    calculate the genus of each closed surface in @xmath109    using the method described in section 2 .",
    "we just need to count the    number of neighbors on a surface . and put them in @xmath76 ,    using the formula ( 5 ) to obtain @xmath86 .",
    "step 3 . : :    using the theorem [ jordan2 ] , we can get @xmath165 ,    @xmath166 , @xmath167 , and @xmath168 .    @xmath165 is @xmath169 . for @xmath166 , we need    to get @xmath170 that is just the summation of the    genus in all connected components in @xmath109 .",
    "( see    @xcite and @xcite . )",
    "@xmath167 is the number of components in    @xmath109 .",
    "@xmath168 is trivial .",
    "algorithm 4.1 is a linear time algorithm .",
    "therefore , we can use linear time algorithms to calculate @xmath86 and all homology groups for digital manifolds in 3d based on lemma 2 , formula ( 5 ) and lemma 3 .",
    "there is a linear time algorithm to calculate all homology groups for each type of manifold in 3d .",
    "this subsection will discuss the input data formats .",
    "we will focus on cubical data , for instance mri and ct data . in cubical data samples , we assume that the sampling is contiguous , where each sample point is normally followed by another sample point in its neighborhood .",
    "it is important to know this because a random sampling can cause the problem of uncertainty . in this case , we usually can not calculate the genus without making an assumption . for instance , we will not be able to know where a hole is . in order to get simplicial decomposition ( usually triangulation )",
    ", we usually need to use voronoi or delaunay decomposition with boundary information .",
    "that means the boundary must be assumed .",
    "a new technology is called persistent homology analysis that tells us how to find the best estimation for the location of holes , usually by multiscaling ( the upscaling and downscaling methods ) . however , this method is not a precise analysis  @xcite  @xcite .",
    "even though , our method can be modified to be used in persistent analysis , this paper mainly deals with the method of precise genus and homology group calculation .    in summary ,",
    "our assumption is that the digital object consists of cubical points ( digital points , raster points ) .",
    "each point is a cube , which is the smallest 3d object .",
    "the edge and point are defined with regards to the cube and an object may contain several connected components using a cube - linking path . our purpose again is to calculate the topological properties of the object , or of each component , essentially .",
    "connected component search is an old task that can be done by using tarjan s breadth - first - search .",
    "pavlidis was one of the first people to realize and use this algorithm in image processing .",
    "this problem is also known as the labeling problem .",
    "the complexity of the algorithm is @xmath3  @xcite .",
    "the problem is what connectivity is based off of . in 3d , we usually have 6- , 18- , 26- connectivity .",
    "since real data has noise , we have to consider all of those connectivities .",
    "so we must use 26-connectivety to get the connected components .",
    "therefore , the connected component of the real processing is not a strictly 6-connected component .",
    "the topological theorem generated previously in  @xcite is no longer suitable .",
    "so we need to transform a 26-connected component into a 6-connected component .",
    "this should be done by a meaningful adding or deleting process since optimization on the minimum number of changes could be an np - hard problem .",
    "* problem of minimum modifications : * given a set of points in 3d digital space , if this set is not a manifold , assume that the points are connected in a connectivity defined using adding or deleting processes to make the set a 3d manifold .",
    "the question becomes : is there a polynomial algorithm that makes the solution have minimum modifications where adding or deleting a data point will be counted as one modification ?",
    "a similar problem was considered in  @xcite in which a decision problem of adding was proposed .",
    "this problem can be extended to a general @xmath21-manifold in @xmath60-d space .",
    "even though we have the 6-connected component , there may still be cases that contain the pathological situation , which needs special treatment .",
    "we will discuss this issue in the next subsection .      in this paper",
    ", we only deal with the jordan manifolds , meaning that a closed @xmath171-manifold will separate the @xmath60-manifold into two or more components .",
    "for such a case , only direct adjacency will be allowed since indirect adjacency will not generate jordan cases .",
    "that is to say , if the set contains indirect adjacent voxels , we need to design an algorithm to detect the situation and delete some voxels in order to preserve the homology groups .",
    "it is known that there are only two such cases in cubical or digital space @xcite : two voxels ( 3-cells ) share a 0-cell or a 1-cell .",
    "therefore , we want to modify the voxel set to only contain voxels where two of these cases do not appear .",
    "two voxels share exactly a 2-cell , or there is a local path ( in the neighborhood ) voxels where two adjacent voxels share a 2-cell  @xcite .",
    "a special case was found in @xcite that is the complement case of the case in which two voxels share a 0-cell ( see fig 9 .",
    "the case may create a tunnel or could be filled .",
    "we will simplify it by adding a voxel in a @xmath172 cube .",
    "such a case in point space is similar to the case ( a ) in fig 9 since boundaries of these cases are the same .",
    "the problem is that many real data sets do not satisfy the above restrictions ( also called well composed image ) .",
    "the detection is easy but deleting certain points ( the minimum points deletion ) to preserve the homology is a bigger issue .",
    "the following rules ( observations ) are reasonable : in a neighborhood @xmath173 that contains 8 cubes and 27 grid points ,    \\a ) if a voxel only shares a 0-cell with a voxel .",
    "this voxel can be deleted .",
    "\\b ) if a voxel only shares a 1-cell with a voxel .",
    "this voxel can be deleted .",
    "\\c ) if a boundary voxel @xmath174 shares a 0,1-cell with a voxel , assume @xmath174 also shares a 2-cell with a voxel @xmath175 , @xmath175 must share a 0,1-cell with a voxel that is not in the object @xmath75 .",
    "@xmath175 is on the boundary .",
    "deleting @xmath174 will not change the topological properties .",
    "\\d ) if in a @xmath172 cube , there are 6 boundary voxels and its complement ( two zero - valued voxels ) is the case ( a ) in fig .",
    "9 . add a voxel to this @xmath172 cube such that the new voxel shares as many 2-cells in the set as possible .",
    "this means that we want the adding voxel to be inside of the object as much as we can .    in this paper ,",
    "we implement or modify the above rules to fit the theoretical definition of the digital surfaces .",
    "we also design an algorithm based on these rules to detect and delete some data points while preserving the topology .",
    "this is essential to calculating the genus correctly .",
    "however , when the object becomes more complex , pathological situations may still exist .",
    "the mathematical foundation of this above process that eliminates pathological cases is still under investigation .    * mathematical foundation of modifying a 3d object to be a 3d manifold : * given a set of points in 3d digital space , how would we modify the data set into a manifold without losing or changing the topology ( in mathematics ) ?      in general",
    ", a point is on the boundary if and only if it is adjacent to one point in the object and one point not in the object ( in 26-connectivity ) .",
    "a simple algorithm that goes through each point and tests the neighborhood will determine whether a point is on the boundary or not . this is a linear time and @xmath176 space algorithm .",
    "the only thing special is that we use 26-connectivity to determine the boundary points .",
    "this is to take all possible boundary points into consideration in the next step .",
    "when all boundary points are found , we need to find their classifications . in other words",
    ", we need to determine whether a special point is in @xmath77 , @xmath78 , @xmath79 , or @xmath80 .",
    "here is the problem : if we only have one voxel , is it a point ( 0-cell ) or a 3d object ( 3-cell ) ? in this paper , we treat it as a 3-cell .",
    "the input data is in raster space , but the boundary surface will be in point space .",
    "we must first make the translation .",
    "then , for each point on the surface , we count how many neighbors exist in order to determine its configuration category .",
    "after that , we use formula ( 5 ) to get the genus .",
    "if we still need to find homology groups , we can just use the simple calculations based on theorem 1,3 to them . using the program",
    ", we get the genus@xmath177 for a modified real image ( fig .",
    "in this paper , we have used digital topology to get a simple formula for calculating the number of holes in a connected component in 2d digital space .",
    "the formula is so simple and can be easily implemented .",
    "the author does not know if this formula was known or obtained already by other researchers .",
    "3d images , we have practically get the genus by extracting the boundary surfaces and deleting the pathelogical case .",
    "both algorithms are optimum in terms of time and space complexity ( we usually assume that the number of the pathelogical cases are constant ) .",
    "barneva , v.e .",
    "brimkov , digital geometry and its applications to medical imaging , in : j. tavares , et al .",
    "( eds . ) , advances in computational vision and medical image processing : methods and applications , in : computational methods in applied sciences , springer , berlin , 2008 , pp .",
    "( chapter 4 ) .                    l. chen and s. biswas",
    ", digital curvatures applied to 3d object analysis and recognition : a case study .",
    "barneva et al , combinatorial image analysis , lectures notes 1n computer science vol 7655 , springer , pp 45 - 58 , 2012 .",
    "g. carlsson , persistent homology and the analysis of high dimensional data , symposium on the geometry of very large data sets , fields institute for research in mathematical sciences , february 24 , 2005 ."
  ],
  "abstract_text": [
    "<S> based on previous results of digital topology , this paper focuses on algorithms of topological invariants of objects in 2d and 3d digital spaces . </S>",
    "<S> we specifically interest in solving hole counting of 2d objects and genus of closed surface in 3d . </S>",
    "<S> we first prove a new formula for hole counting in 2d . </S>",
    "<S> the number of of holes is @xmath0 where @xmath1 and @xmath2 are sets of inward and outward corner points , respectively .    </S>",
    "<S> this paper mainly deals with algorithm design and implementation of practical computation of topological invariants in digital space . </S>",
    "<S> the algorithms relating to data structures , and pathological case detection and original data modification are main issues .    </S>",
    "<S> this paper designed fast algorithms for topological invariants such as connected components , hole counting in 2d and boundary surface genus for 3d . for 2d images , we designed a linear time algorithm to solve hole counting problem . in 3d , we designed also @xmath3 time algorithm to get genus of the closed surface . </S>",
    "<S> these two algorithms are both in @xmath4 space complexity .    </S>",
    "<S> space , number of holes , genus of surfaces , algorithm , time and space complexity </S>"
  ]
}