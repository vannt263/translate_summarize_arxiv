{
  "article_text": [
    "a _ classical network _ is a capaciated directed acyclic graph @xmath0 , where @xmath1 and @xmath2 are the node and the arc sets of the graph respectively , and @xmath3 is the link capacity for arc @xmath4 .",
    "broadcast network _ is a classical work for which all source messages are _ collocated _ at a single source node .",
    "consider a general broadcast network with one source node @xmath5 and @xmath6 sink nodes @xmath7 , @xmath8 ( see figure  [ fig : broadnet ] ) .",
    "the source node @xmath5 has access to a collection of _ independent _ messages @xmath9 , where @xmath10 is a finite index set .",
    "the messages intended for the sink node @xmath7 are given by @xmath11 , where @xmath12 is a nonempty subset of @xmath10 .",
    "when all messages from @xmath13 are _ unicast _ messages , i.e. , each of them is intended for _ only _ one of the sink nodes , it follows from the celebrated max - flow min - cut theorem @xcite that routing can achieve the entire capacity region of the network . on the other hand , when some of the messages from @xmath13 are _ multicast _ messages , i.e. , they are intended for _ multiple _ sink nodes , the capacity region of the network is generally _ unknown _ except when there is only one multicast message at the source node @xcite or there are only two sink nodes ( @xmath14 ) in the network @xcite .    in this paper",
    ", we are interested in establishing strong network coding bounds for _ general _ broadcast networks with multiple ( multicast ) messages and more than two sink nodes ( @xmath15 ) .",
    "in particular , we are interested in network coding bounds that rely only on the _ cut _ structure of the network .",
    "the rational behind this particular interest is two - folded .",
    "first , cut is a well - understood combinatorial structure for networks .",
    "second , the fact that standard cut - set bounds ( * ? ? ?",
    "* ch .  15.10 )",
    "are _ tight _ for the aforementioned special cases @xcite suggests that cut as a combinatorial structure can be useful for more general broadcast - network coding problems as well .",
    "the starting point of this work is the following simple observation . for each @xmath16 ,",
    "let @xmath17 be a ",
    "basic \" cut that separates the source node @xmath5 from the ( single ) sink node @xmath7 .",
    "then , for any nonempty subset @xmath18:=\\{1,\\ldots , k\\}$ ] the union @xmath19 is also a cut that separates the source node @xmath5 from the  super \" sink node @xmath20 , whose intended messages are given by @xmath21 . by the standard cut - set bound ( * ? ? ?",
    "* ch .  15.10 )",
    ", we have @xmath22 for any achievable rate tuple @xmath23 .",
    "here , @xmath24 is the _ rate _ function that corresponds to the rate tuple @xmath25 and is given by @xmath26 and @xmath27 is the _ capacity _ function of the network where @xmath28    note that the above observation depends critically on the fact that all messages @xmath13 are _ collocated _ at the source node @xmath5 .",
    "when the messages are _ distributed _ among several source nodes , it is well known that the union of several basic cuts may _ no longer _ be a cut that separates the super source node from the super sink node and hence may not lead to any network coding bounds @xcite .",
    "based on the above discussion , it is clear that for broadcast networks the _ standard _ cut - set bounds ( * ? ? ?",
    "* ch .  15.10 )",
    "are closely related to _",
    "union _ as a specific set operation to combine different basic cuts of the network .",
    "therefore , a natural question that one may ask is whether there are any other set operations ( besides the union ) that will also lead to nontrivial network coding bounds .    in this paper , we provide a positive answer to the above question by establishing a new set of network coding bounds for general broadcast networks .",
    "we term these bounds _ generalized _ cut - set bounds based on the facts that : 1 ) they rely only on the cut structure of the network ; and 2 ) the set operations within the rate and the capacity functions are _ identical _ ( but not just the union any more ) , both similar to the case of standard cut - set bounds as in . from the proof viewpoint , as we shall see , these bounds are established via only the _ shannon - type _ inequalities .",
    "it is well known that all shannon - type inequalities can be derived from the simple fact that shannon entropy as a set function is _ submodular _ ( * ? ? ?",
    "so , at heart , the generalized cut - set bounds are reflections of several new results that we establish on submodular function optimization .",
    "the rest of the paper is organized as follows . in section  [ sec : mod ] we establish several new results on submodular function optimization , which we shall use to prove the generalized cut - set bounds .",
    "a new set of network coding bounds that relate _ three _ basic cuts of the network is provided in section  [ sec : gcsb3 ] .",
    "the proof of these bounds is rather  hands - on \" and hence provides a good illustration on the essential idea on how to establish the generalized cut - set bounds . in section  [ sec : gcsbk ] , a new set of network coding bounds that relate arbitrary @xmath6 basic cuts of the network is provided , generalizing the bounds provided in section  [ sec : gcsb3 ] . in section  [ sec : cn ] , the tightness of the generalized cut - set bounds is demonstrated via applications to _ combination _ networks @xcite .",
    "finally , in section  [ sec : con ] we conclude the paper with some remarks .",
    "let @xmath29 be a finite ground set .",
    "a function @xmath30 is said to be _ submodular _ if @xmath31 and is said to be _ modular _ if @xmath32    more generally , let @xmath33 , @xmath8 , be a subset of @xmath29 . for any nonempty subset @xmath34 of @xmath35 $ ] and any @xmath36 $ ] , let @xmath37 clearly , we have @xmath38 for any nonempty @xmath18 $ ] and @xmath39 for any @xmath40 $ ] and any @xmath41 $ ] .",
    "furthermore , it is known that ( * ? ? ?",
    "2 ) @xmath42 if @xmath43 is a submodular function , and @xmath44 if @xmath43 is a modular function .",
    "note that the standard submodularity relates @xmath45 for different @xmath46 but a _ fixed _",
    "@xmath34 . to establish the generalized cut - set bounds , however",
    ", we shall need the following technical results on modular and submodular functions that relate @xmath45 for not only different @xmath46 but also _ different _ @xmath34 .",
    "[ lemma:1 ] let @xmath47 and @xmath48 be two integers such that @xmath49 .",
    "we have @xmath50 ) ) & \\ge \\sum_{r=1}^{r'}f(s^{(r)}([j]))+\\sum_{r = r'+1}^{j}f(s^{(r'+1)}([r ] ) ) \\label{eq:1a}\\end{aligned}\\ ] ] if @xmath43 is a submodular function , and @xmath50 ) ) & = \\sum_{r=1}^{r'}f(s^{(r)}([j]))+\\sum_{r = r'+1}^{j}f(s^{(r'+1)}([r]))\\end{aligned}\\ ] ] if @xmath43 is a modular function .",
    "note that when @xmath51 , we have @xmath52 ) = s^{(1)}([r ] ) = \\cup_{k=1}^{r}s_k \\supseteq s_r$ ] for any @xmath53 . in this case",
    ", the inequality reduces to the trivial equality @xmath54 ) ) & = \\sum_{r=1}^{j}f(s^{(1)}([r])).\\end{aligned}\\ ] ] on the other hand , when @xmath55 , the inequality reduces to the standard submodularity @xmath56)).\\end{aligned}\\ ] ] for the general case where @xmath57 , a proof of the lemma is provided in appendix  [ app : pf - lemma1 ] .",
    "let @xmath58 for @xmath8 .",
    "for any nonempty @xmath18 $ ] and any @xmath59 we have @xmath60 applying lemma  [ lemma:1 ] for @xmath61 , @xmath8 , and , we have the following corollary .    [ cor:1 ]",
    "let @xmath47 and @xmath48 be two integers such that @xmath49 , and let @xmath62 be a subset of @xmath29 .",
    "we have @xmath63)\\cup s_0 ) \\notag\\\\ & \\ge \\sum_{r=1}^{r'}f(s^{(r)}([j])\\cup s_0)+\\sum_{r = r'+1}^{j}f(s^{(r'+1)}([r])\\cup s_0 ) \\label{eq:2a}\\end{aligned}\\ ] ] if @xmath43 is a submodular function , and @xmath63)\\cup s_0)\\notag\\\\ & = \\sum_{r=1}^{r'}f(s^{(r)}([j])\\cup s_0)+\\sum_{r = r'+1}^{j}f(s^{(r'+1)}([r])\\cup s_0)\\end{aligned}\\ ] ] if @xmath43 is a modular function .",
    "we shall also need the following lemma , for which a proof is provided in appendix  [ app : pf - lemma2 ] .",
    "[ lemma:2 ] let @xmath34 and @xmath64 be two nonempty subsets of @xmath35 $ ] .",
    "write , without loss of generality , that @xmath65 where @xmath66 .",
    "let @xmath67 and @xmath68 be two integers such that @xmath69 , @xmath70 , and @xmath71 .",
    "we have @xmath72 if @xmath43 is a submodular function , and @xmath73 if @xmath43 is a modular function .    for specific functions ,",
    "let @xmath74 be a collection of jointly distributed random variables , and let @xmath75 be the joint ( shannon ) entropy of @xmath76 .",
    "then , it is well known ( * ? ? ?",
    "14.a ) that @xmath77 where @xmath78 is a _ submodular _ function .",
    "furthermore , it is straightforward to verify that the rate function @xmath79 ( for a given rate tuple @xmath25 ) and the capacity function @xmath80 , defined in and respectively , are _ modular _ functions .",
    "[ thm : gcsb3 ] consider a broadcast network with a collection of independent messages @xmath13 collocated at the source node @xmath5 and @xmath15 sink nodes @xmath7 , @xmath8 . for any @xmath8 ,",
    "let @xmath11 be the intended messages for the sink node @xmath7 , and let @xmath17 be a basic cut that separates the source node @xmath5 from the sink node @xmath7 .",
    "we have @xmath81 for any achievable rate tuple @xmath25 and any three distinct integers @xmath82 , @xmath83 , and @xmath84 from @xmath35 $ ] .",
    "note that the left - hand sides of the generalized cut - set bounds  are _ weighted _ sum rates with integer weights on the rates of the messages from @xmath85 .",
    "figure  [ fig : wd ] illustrates the weight distributions for the generalized cut - set bounds .",
    "let @xmath86 be an _",
    "admissible _ code with block length @xmath87 , where @xmath88 is the message transmitted over the arc @xmath89 . by the independence bound ( * ? ? ?",
    "* th  2.6.6 ) and the link - capacity constraints , we have @xmath90 for notational simplicity , in this proof we shall assume _ perfect _ recovery of the messages at each of the sink nodes .",
    "it should be clear from the proof that by applying the well - known fano s inequality ( * ? ? ?",
    "* th  2.10.1 ) , the results also hold for _ asymptotically perfect _ recovery . by the perfect recovery requirement , for any nonempty subset @xmath18 $ ] the collection of the messages @xmath21 must be a _ function _ of the messages @xmath91 transmitted over the @xmath5-@xmath20 cut @xmath19 .",
    "we thus have @xmath92 .",
    "\\label{eq : perfectdec}\\end{aligned}\\ ] ]    _ proof of .",
    "_ let @xmath93 in .",
    "denote by @xmath94 the mutual information between @xmath95 and @xmath96 .",
    "we have @xmath97 where follows from the fact that : 1 ) @xmath98 and @xmath99 are functions of @xmath95 and @xmath96 respectively so we have @xmath100 ; and 2 ) @xmath11 and @xmath101 are functions of @xmath102 and @xmath103 respectively so we have @xmath104 , and follows from the fact that @xmath105 and @xmath106 note that we trivially have @xmath107 substituting and into gives @xmath108 where follows from the independence bound @xmath109 follows from for @xmath110 , @xmath111 , and @xmath112 ; and follows from the fact that the capacity function @xmath80 is a modular function . substituting @xmath113 into and dividing both sides of the inequality by @xmath87 complete the proof of .",
    "we note here that if we had directly bounded from above the right - hand side of by @xmath115 using the independence bound , it would have led to the standard cut - set bound @xmath116 but the use of the independence bound would have implied that all messages transmitted over @xmath117 are _ independent _ , which may not be the case in the presence of multicast messages .    _",
    "_ applying the two - way submodularity of the shannon entropy with @xmath118 , @xmath119 , and @xmath120 , we have @xmath121 substituting into gives @xmath122 where follows from the independence bound @xmath123 follows from for @xmath110 , @xmath111 , and @xmath124 ; and follows from the fact that the capacity function @xmath80 is a modular function . substituting and @xmath125 into and dividing both sides of the inequality by @xmath87 complete the proof of .",
    "@xmath114    _ proof of .",
    "_ by the _ symmetry _ among @xmath82 , @xmath83 , and @xmath84 in , we have @xmath126 also note that @xmath127 adding and gives @xmath128 applying the two - way submodularity of the shannon entropy with @xmath118 , @xmath119 , and @xmath129 , we have @xmath130 note that we trivially have @xmath131 substituting and into , we have @xmath132 where follows from the independence bounds @xmath133 follows from for @xmath110 , @xmath111 , @xmath17 , @xmath134 , and @xmath135 ; and follows from the fact that the capacity function @xmath80 is a modular function .",
    "substituting , @xmath136 into and dividing both sides of the inequality by @xmath87 complete the proof of .",
    "@xmath114    _ proof of .",
    "_ adding and , we have @xmath137 note that we trivially have @xmath138 substituting , , and into , we have @xmath139 where follows from the independence bounds , , and ; follows from for @xmath110 , @xmath111 , @xmath17 , @xmath134 , @xmath135 and @xmath112 ; and follows from the fact that the capacity function @xmath80 is a modular function . substituting and into and dividing both sides of the inequality by @xmath87 complete the proof of .",
    "we have thus completed the proof of theorem  [ thm : gcsb3 ] .",
    "[ thm : gcsbk ] consider a broadcast network with a collection of independent messages @xmath13 collocated at the source node @xmath5 and @xmath15 sink nodes @xmath7 , @xmath8 . for any @xmath8 ,",
    "let @xmath11 be the intended messages for the sink node @xmath7 , and let @xmath17 be a basic cut that separates the source node @xmath5 from the sink node @xmath7 .",
    "let @xmath140 , @xmath34 and @xmath64 be nonempty subsets of @xmath35 $ ] such that @xmath141 let @xmath142 be a subset of @xmath143 , and let @xmath144 be a sequence of integers from @xmath145 $ ] and such that @xmath146 we have @xmath147 for any achievable rate tuple @xmath25 , where @xmath148 for any @xmath149 and @xmath150 $ ] .",
    "note that the generalized cut - set bound involves a number of parameters : @xmath140 , @xmath34 , @xmath64 , @xmath142 , and @xmath144 .",
    "specifying these parameters to certain choices will lead to potentially weaker but more applicable generalized cut - set bounds . more specifically ,",
    "let @xmath151 and @xmath152 for any @xmath149 . by the ordering in , the condition in is satisfied ( the condition in holds trivially with an equality )",
    ". thus , by theorem  [ thm : gcsbk ] we have @xmath153\\setminus q}r(i^{(r)}(u))+&\\sum_{q \\in q}\\sum_{r=1}^{q-1}\\alpha_q(q , r)r(i^{(r)}(u))\\notag\\\\ & \\leq \\sum_{r \\in [ |u|]\\setminus q}c(a^{(r)}(u))+\\sum_{q \\in q}\\sum_{r=1}^{q-1}\\alpha_q(q , r)c(a^{(r)}(u ) ) \\label{eq : gcsbk2}\\end{aligned}\\ ] ] for any achievable rate tuple @xmath25 , where @xmath154 for any @xmath149 and @xmath155 $ ] . a proper simplification of leads to the following corollary .",
    "see appendix  [ app : pf - cor4 ] for the details of the simplification procedure .",
    "[ cor : gcsbk2 ] consider a broadcast network with a collection of independent messages @xmath13 collocated at the source node @xmath5 and @xmath15 sink nodes @xmath7 , @xmath8 . for any @xmath8 ,",
    "let @xmath11 be the intended messages for the sink node @xmath7 , and let @xmath17 be a basic cut that separates the source node @xmath5 from the sink node @xmath7 .",
    "let @xmath34 be a nonempty subset of @xmath35 $ ] , and let @xmath142 be a subset of @xmath143 .",
    "we have @xmath156 for any achievable rate tuple @xmath25 , where @xmath157 for any @xmath36 $ ] if @xmath158 , and @xmath159 for any @xmath36 $ ] if @xmath160 .",
    "the generalized cut - set bound can be further specified by letting @xmath161 for @xmath162 ( note that @xmath158 when @xmath163 ) . for this particular choice of @xmath142",
    ", we have @xmath164 substituting into immediately leads to the following corollary .",
    "[ cor : gcsbk3 ] consider a broadcast network with a collection of independent messages @xmath13 collocated at the source node @xmath5 and @xmath15 sink nodes @xmath7 ,",
    "@xmath8 . for any @xmath8 ,",
    "let @xmath11 be the intended messages for the sink node @xmath7 , and let @xmath17 be a basic cut that separates the source node @xmath5 from the sink node @xmath7 .",
    "let @xmath34 be a nonempty subset of @xmath35 $ ] .",
    "we have @xmath165 for any achievable rate tuple @xmath25 and any @xmath162 .",
    "now , the generalized cut - set bound can be recovered from corollary  [ cor : gcsbk3 ] by setting @xmath166 and @xmath167 in ; the generalized cut - set bound can be recovered from corollary  [ cor : gcsbk2 ] by setting @xmath166 and @xmath168 such that @xmath169 the generalized cut - set bound can be recovered from theorem  [ thm : gcsbk ] by setting @xmath170 , @xmath171 ( so @xmath172 ) and @xmath158 ; and finally , the generalized cut - set bound can be recovered from theorem  [ thm : gcsbk ] by setting @xmath173 ( so @xmath174 ) , @xmath175 , @xmath176 , and @xmath177 such that @xmath178 and @xmath179 .",
    "let @xmath86 be an _",
    "admissible _ code with block length @xmath87 , where @xmath88 is the message transmitted over the arc @xmath89 .",
    "similar to the proof of theorem  [ thm : gcsb3 ] , we shall assume perfect recovery of the messages at each of the sink nodes .",
    "as such , for any nonempty subset @xmath18 $ ] the messages @xmath21 must be _ functions _ of the messages @xmath91 transmitted over the @xmath5-@xmath20 cut @xmath19 .    let us first consider the case where @xmath158 .",
    "note that @xmath180 where and follow from the fact that the messages @xmath181 are functions of @xmath182 ; follows from the independence bound on entropy ; follows from the standard multiway submodularity ; follows from the fact that the messages @xmath11 are functions of @xmath102 so we have @xmath183 for any @xmath184 ; follows from the link capacity constraints ; follows from the fact that the capacity function @xmath80 is a modular function so we have @xmath185 ; and follows from the fact that the capacity function @xmath80 is a modular function and the assumption so we have @xmath186 . rearranging the terms in gives @xmath187 further note that @xmath188 substituting and into and dividing both sides of the inequality by @xmath87 , we have @xmath189 for any achievable rate tuple @xmath25 .",
    "this completes the proof of for @xmath158 .",
    "next , assume that @xmath160 .",
    "write , without loss of generality , that @xmath190 where @xmath191 by lemma  [ lemma:2 ] , for any two integers @xmath192 and @xmath193 such that @xmath194 , @xmath195 , @xmath196 , and @xmath197 we have @xmath198 where follows from the fact that the messages @xmath199 are functions of @xmath200 so we have @xmath201 for any @xmath202 $ ] and the trivial inequalities @xmath203\\\\ \\mbox{and } \\quad h_{\\mathsf{x},\\mathsf{w}}&(a_{t_r}\\cap(a^{(q')}(u)\\cup a^{(r_{q'}+1)}(\\{t_1,\\ldots , t_r\\})),i_{t_r}\\cap(i^{(q')}(u)\\cup i^{(r_{q'}+1)}(\\{t_1,\\ldots , t_r\\})))\\notag\\\\ & \\geq h_{\\mathsf{x}}(a_{t_r}\\cap(a^{(q')}(u)\\cup a^{(r_{q'}+1)}(\\{t_1,\\ldots , t_r\\})));\\end{aligned}\\ ] ] follows from the independence bound on entropy ; follows from the link - capacity constraints ; and and follow from the fact that the capacity function @xmath80 is a modular function . letting @xmath204 and @xmath205 in ,",
    "we have @xmath206 let @xmath207 for any @xmath149 and @xmath150 $ ] , and let @xmath208 .",
    "note that @xmath209 and @xmath210 are always positive . multiplying both sides of by @xmath211 and then summing over all @xmath212 , we have @xmath213 note that @xmath214 where @xmath215 we can thus rewrite as @xmath216 furthermore , letting @xmath217 and @xmath218 in and multiplying both sides of the inequality by @xmath219 , we have @xmath220 adding and gives @xmath221 where @xmath222 by , when @xmath223 for some @xmath224 ( @xmath225 for convenience ) , we have @xmath226 and hence @xmath227 therefore , when @xmath228 for some @xmath229 $ ] we have @xmath230 when @xmath231 for some @xmath229 $ ] we have @xmath232 and when @xmath233 we have @xmath234 and hence @xmath235 combining , , and , we conclude that @xmath236.\\end{aligned}\\ ] ] dividing both sides of by @xmath237 and then summing over all @xmath238 , we have @xmath239 adding and , we have @xmath240 note that we trivially have @xmath241 .",
    "\\label{eq : pf - gcsbk2070}\\end{aligned}\\ ] ] substituting , , and into and dividing both sides of the inequality by @xmath87 complete the proof of for @xmath160 .",
    "we have thus completed the proof of theorem  [ thm : gcsbk ] .",
    "sink nodes and a complete message set . ]    to demonstrate the tightness of the generalized cut - set bounds , let us consider a special class of broadcast networks known as _ combination _ networks @xcite .",
    "a combination network is a broadcast network that consists of three layers of nodes ( see figure  [ fig : cn3 ] for an illustration ) .",
    "the top layer consists of a single source node @xmath5 , and the bottom layer consists of @xmath6 sink nodes @xmath7 , @xmath8 .",
    "the middle layer consists of @xmath242 intermediate nodes , each connecting to the source node @xmath5 and a nonempty subset of sink nodes .",
    "while the links from the source node @xmath5 to the intermediate nodes may have finite capacity , the links from the intermediate nodes to the sink nodes are all assumed to have _ infinite _ capacity .",
    "more specifically , denote by @xmath243 the intermediate node that connects to the nonempty subset @xmath34 of sink nodes and @xmath244 the link that connects the source node @xmath5 to the intermediate node @xmath243 . the link capacity for @xmath244 is denoted by @xmath245 .",
    "note that when @xmath246 , the intermediate node @xmath243 can be effectively removed from the network . by construction ,",
    "the only interesting combinatorial structure for combination networks is cut .",
    "therefore , combination networks provide an ideal set of problems to understand the strength and the limitations of the generalized cut - set bounds .    in figure",
    "[ fig : cn3 ] we illustrate a general combination network with @xmath247 sink nodes and a general message set that consists of a total of seven independent messages @xmath248 where the message @xmath249 , @xmath250 , is intended for all sink nodes @xmath7 , @xmath184 .",
    "this network coding problem was first introduced and solved by grokop and tse @xcite in the context of characterizing the _ latency _ capacity region @xcite of the general broadcast channel with three receivers .",
    "more specifically , it was shown in @xcite that the capacity region of the network is given by the set of nonnegative rate tuples @xmath251 satisfying @xmath252 from the converse viewpoint , the inequalities  follow directly from the standard cut - set bounds by considering the following three basic cuts : @xmath253 , @xmath254 , and @xmath255 . for the inequalities  , the proof provided in @xcite was problem - specific and appears to be rather hand - crafted . with the generalized cut - set bounds now in place ,",
    "however , it is clear that the inequalities  follow directly from ; the inequality follows directly from ; the inequalities  follow directly from ; and the inequality follows directly from .",
    "thus , the standard and the generalized cut - set bounds together provide an _ exact _ characterization of the capacity region of the general combination network with three sink nodes and a complete message set .",
    "next , let us consider the general combination network with @xmath6 sink nodes and _ symmetrical _ link capacity constraints @xcite : @xmath256\\end{aligned}\\ ] ] i.e. , the link - capacity constraint for arc @xmath244 depends on the subset @xmath34 only via its cardinality .",
    "assume that the source @xmath5 has access to a set of @xmath257 independent messages @xmath258 , where @xmath259 , @xmath8 , is a private message intended only for the sink node @xmath7 , and @xmath260 is a common message intended for all @xmath6 sink nodes in the network .",
    "for this communication scenario , note that @xmath261 is a basic cut that separates the source node @xmath5 from the sink node @xmath7 for each @xmath8 . applying corollary  [ cor : gcsbk3 ] with",
    "@xmath262 $ ] , we have @xmath263 for any achievable rate tuple @xmath264 and any @xmath265 , where @xmath266 is the sum of the private rates .",
    "it is clear that the outer bound given by the inequality for @xmath265 has exactly @xmath257 corner points : @xmath267 the achievability of these corner points was proved in @xcite .",
    "therefore , the generalized cut - set bounds also provide a _ tight _ characterization of the common - v.s .- sum - private capacity region of the general symmetrical combination network",
    ".     sinks .",
    "the boundary of the capacity region is illustrated by solid lines , while the boundary of the cut - set outer region is illustrated by dashed lines . ]    finally , let us make an explicit comparison between the common - v.s .- sum - private capacity region of the general symmetrical combination network and the outer region given by _",
    "just _ the standard cut - set bounds for the case of @xmath247 sink nodes . for @xmath247 , the common - v.s .- sum - private capacity region of the network",
    "is given by all nonnegative @xmath268 pairs satisfying @xmath269 the standard cut - set bounds , in this case , are given by @xmath270 substituting @xmath271 into and using fourier - motzkin elimination to eliminate @xmath272 and @xmath273 from the inequalities in ,",
    "we may explicitly write the outer region given by just the standard cut - set bounds as the nonnegative @xmath268 pairs satisfying @xmath274 in figure  [ fig : cnk ] we illustrate the rate regions constrained by and , respectively . clearly , even for the case with only @xmath247 sink nodes , the standard cut - set bounds alone are _ not _ tight , while the generalized cut - set bounds provide a precise characterization of the common - v.s .- sum - private capacity region .",
    "the paper considered the problem of coding over broadcast networks with multiple ( multicast ) messages and more than two sink nodes .",
    "the standard cut - set bounds , which are known to be loose in general , are closely related to union as a specific set operation to combine different basic cuts of the network .",
    "a new set of network coding bounds ( termed as _ generalized _ cut - set bounds ) , which relate the basic cuts of the network via a variety of set operations ( not just the union ) , were established via the submodularity of the shannon entropy .",
    "it was shown that the generalized cut - set bounds ( together with the standard cut - set bounds ) provide a precise characterization of the capacity region of the general combination network with three sink nodes and the common - v.s .- sum - private capacity region of the general symmetrical combination network ( with arbitrary number of sink nodes ) .",
    "our ongoing work focuses primarily on further understanding the strength and the limitations of the generalized cut - set bounds established in this paper .",
    "in particular , it would be interesting to see whether the generalized cut - set bounds are tight for the _ symmetrical _ capacity region of the general symmetrical combination network , which was recently characterized by tian @xcite .",
    "fix two integers @xmath47 and @xmath48 such that @xmath275 .",
    "let @xmath276 ) , & \\mbox{for } \\ ; r = r'+1,\\ldots , j , \\end{array } \\right.\\end{aligned}\\ ] ] and let @xmath277 for @xmath53 . by the standard multiway submodularity and modularity we have @xmath50 ) ) & = \\sum_{r=1}^{j}f(g_r ) \\geq \\sum_{r=1}^{j}f(g^{(r)}([j]))\\label{eq : assubmod}\\end{aligned}\\ ] ] if @xmath43 is a submodular function , and @xmath50 ) ) & = \\sum_{r=1}^{j}f(g_r ) = \\sum_{r=1}^{j}f(g^{(r)}([j ] ) ) \\label{eq : asmod}\\end{aligned}\\ ] ] if @xmath43 is a modular function .",
    "next , we shall show that @xmath278 ) = \\left\\ { \\begin{array}{rl } s^{(r)}([j ] ) , & \\mbox{for } \\ ; r=1,\\ldots , r'\\\\ s^{(r'+1)}([j - r+r'+1 ] ) , & \\mbox{for } \\ ; r = r'+1,\\ldots , j .",
    "\\end{array } \\right .",
    "\\label{eq : as}\\end{aligned}\\ ] ]    we shall consider the following two cases separately",
    ".    case 1 : @xmath279 $ ] .",
    "note that @xmath280 for any @xmath281 $ ] , so we have @xmath282 ) \\subseteq g^{(r)}([j])$ ] for any @xmath281 $ ] .",
    "on the other hand , since @xmath283)$ ] for all @xmath281 $ ] , we have @xmath284)$ ] and hence @xmath285 ) \\subseteq s^{(r)}([j ] ) \\cup s^{(r'+1)}([j])$ ] for all @xmath281 $ ] .",
    "since @xmath282 ) \\supseteq s^{(r'+1)}([j])$ ] for all @xmath279 $ ] , we have @xmath285 ) \\subseteq s^{(r)}([j])$ ] for all @xmath279 $ ] .",
    "we thus conclude that @xmath285 ) = s^{(r)}([j])$ ] for all @xmath279 $ ] .",
    "case 2 : @xmath286 . for this case",
    ", we have the following fact .",
    "[ fact ] for any @xmath286 , we have @xmath278 ) & = \\cup_{m=1}^{\\min\\{r , r'+2\\}}\\left(s^{(m-1)}([j - r+m-1])\\cap t_{j - r+m}\\right).\\end{aligned}\\ ] ]    fix @xmath286 . by definition , @xmath278 )",
    "= \\cup_{\\{u \\subseteq [ j]:|u|=r\\}}\\cap_{k \\in u}g_k .",
    "\\label{eq : as0}\\end{aligned}\\ ] ] fix @xmath287 $ ] such that @xmath288 .",
    "we have @xmath289 where @xmath290 is the _",
    "smallest _ integer in @xmath291 , and follows from the fact that @xmath292 write , without loss of generality , that @xmath293 where @xmath294 .",
    "fix @xmath295 for some @xmath296 $ ] .",
    "then we must have @xmath297 for any such @xmath298 .",
    "we thus have from that @xmath299    the right - hand side of can be further simplified based on the following two observations .",
    "first , for any @xmath286 we have @xmath300 and hence @xmath301 ) \\supseteq \\cap_{l=1}^{r'+1}s_{u_l } \\supseteq \\cap_{l=1}^{r}s_{u_l}.\\end{aligned}\\ ] ] we thus have @xmath302 and hence @xmath303 second , since @xmath304 , we have @xmath305)=t_{u_{r'+2}}\\end{aligned}\\ ] ] and hence @xmath306 it follows that for any @xmath307 , we have @xmath308 substituting into , we have @xmath309    finally , substituting into , we have @xmath278 ) & = \\cup_{\\{u \\subseteq [ j]:|u|=r\\}}\\left(\\cup_{m=1}^{\\min\\{r , r'+2\\}}\\left((\\cap_{l=1}^{m-1}s_{u_l})\\cap t_{u_m}\\right)\\right)\\\\ & = \\cup_{m=1}^{\\min\\{r , r'+2\\}}\\left(\\cup_{\\{u \\subseteq [ j]:|u|=r\\}}\\left((\\cap_{l=1}^{m-1}s_{u_l})\\cap t_{u_m}\\right)\\right ) \\label{eq : as4}\\end{aligned}\\ ] ] for any @xmath286 . note that for any @xmath287 $ ] such that @xmath288 , the largest numerical value that @xmath310 can assume is @xmath311 for any @xmath312 $ ] . by the ordering in , for any @xmath313 we have @xmath314:|u|=r\\}}\\left((\\cap_{l=1}^{m-1}s_{u_l})\\cap t_{j - r+m}\\right )   & = \\left(\\cup_{\\{1 \\leq u_1 < u_2 < \\cdots < u_{m-1 } \\leq j - r+m-1\\}}\\cap_{l=1}^{m-1}s_{u_l}\\right)\\cap t_{j - r+m}\\\\ & = s^{(m-1)}([j - r+m-1])\\cap t_{j - r+m}. \\label{eq : as5}\\end{aligned}\\ ] ] substituting into completes the proof of the fact .    further note that for any @xmath286 we have @xmath315 ) \\subseteq s^{(r')}([j - r+m-1 ] ) \\subseteq s^{(m-1)}([j - r+m-1 ] ) \\label{eq : as6}\\end{aligned}\\ ] ] for any @xmath316 .",
    "when @xmath317 , substituting and into fact  [ fact ] we have @xmath278 ) & = \\cup_{m=1}^{r}t_{j - r+m}=t_j = s^{(r'+1)}([j ] ) .",
    "\\label{eq : as7}\\end{aligned}\\ ] ] when @xmath318 , by fact  [ fact ] we have @xmath278 ) & = \\cup_{m=1}^{r'+2}\\left(s^{(m-1)}([j - r+m-1])\\cap t_{j - r+m}\\right)\\\\ & = \\left(\\cup_{m=1}^{r'+1}\\left(s^{(m-1)}([j - r+m-1])\\cap t_{j - r+m}\\right)\\right)\\cup\\notag\\\\ & \\hspace{13pt } \\left(s^{(r'+1)}([j - r+r'+1])\\cap t_{j - r+r'+2}\\right)\\\\ & = \\left(\\cup_{m=1}^{r'+1}t_{j - r+m}\\right)\\cup\\left(s^{(r'+1)}([j - r+r'+1])\\cap t_{j - r+r'+2}\\right)\\label{eq : as7.1}\\\\ & = t_{j - r+r'+1}\\cup\\left(s^{(r'+1)}([j - r+r'+1])\\cap t_{j - r+r'+2}\\right)\\label{eq : as7.2}\\\\ & = s^{(r'+1)}([j - r+r'+1])\\cup\\left(s^{(r'+1)}([j - r+r'+1])\\cap s^{(r'+1)}([j - r+r'+2])\\right)\\label{eq : as7.3}\\\\ & = s^{(r'+1)}([j - r+r'+1])\\label{eq : as8}\\end{aligned}\\ ] ] where follows from , and follows from the ordering in . combining and completes the proof of for @xmath286 .",
    "finally , substituting into and we have @xmath50 ) ) & \\geq \\sum_{r=1}^{r'}f(s^{(r)}([j]))+\\sum_{r = r'+1}^{j}f(s^{(r'+1)}([j - r+r'+1]))\\\\ & = \\sum_{r=1}^{r'}f(s^{(r)}([j]))+\\sum_{r = r'+1}^{j}f(s^{(r'+1)}([r]))\\end{aligned}\\ ] ] if @xmath43 is a submodular function , and @xmath50 ) ) & = \\sum_{r=1}^{r'}f(s^{(r)}([j]))+\\sum_{r = r'+1}^{j}f(s^{(r'+1)}([r]))\\end{aligned}\\ ] ] if @xmath43 is a modular function .",
    "this completes the proof of lemma  [ lemma:1 ] .",
    "without loss of generality , we may assume that @xmath319 $ ] such that @xmath320 for all @xmath321 . under this assumption",
    ", the inequality can be written as @xmath322 ) ) ) .",
    "\\label{eq:3a'}\\end{aligned}\\ ] ]    assume that @xmath43 is a modular function .",
    "by the two - way submodularity we have @xmath323))\\right)-\\notag\\\\ & \\hspace{12pt } \\sum_{r = r_q+1}^{|t|}f(s^{(q)}(u)\\cup s^{(r_q+1)}([r]))\\label{eq:3c}\\\\   & \\geq\\sum_{r=1}^{r_q}\\left(f(s_r\\cap s^{(q)}(u))+f(s_r\\cup s^{(q)}(u))\\right)+\\notag\\\\ & \\hspace{12pt } \\sum_{r = r_q+1}^{|t|}\\left(f(s_r\\cap(s^{(q)}(u)\\cup s^{(r_q+1)}([r])))+f(s_r\\cup(s^{(q)}(u)\\cup s^{(r_q+1)}([r])))\\right)-\\notag\\\\ & \\hspace{12pt } \\sum_{r = r_q+1}^{|t|}f(s^{(q)}(u)\\cup s^{(r_q+1)}([r])).\\label{eq:3d}\\end{aligned}\\ ] ] applying corollary  [ cor:1 ] with @xmath324 , @xmath325 , and @xmath326 , we have @xmath327)\\cup s^{(q)}(u))\\notag\\\\ & \\ge \\sum_{r=1}^{r_q}f(s^{(r)}(t)\\cup s^{(q)}(u))+\\sum_{r = r_q+1}^{|t|}f(s^{(r_q+1)}([r])\\cup s^{(q)}(u))\\label{eq:3e}\\\\ & = \\sum_{r=1}^{r_q}f(s^{(r)}(t))+\\sum_{r = r_q+1}^{|t|}f(s^{(r_q+1)}([r])\\cup s^{(q)}(u))\\label{eq:3f}\\end{aligned}\\ ] ] where follows from the assumption @xmath328 such that @xmath329 for any @xmath330 .",
    "substituting into completes the proof of and hence that of .    when @xmath43 is a modular function , both inequalities and hold with an equality .",
    "this completes the proof of and hence that of the entire corollary .",
    "note that when @xmath158 , @xmath157 for all @xmath202 $ ] . in this case",
    ", the corollary follows directly from . now , assume that @xmath142 is nonempty .",
    "write , without loss of generality , that @xmath190 where @xmath331 note that @xmath332 where @xmath333 for any @xmath334 for some @xmath335 $ ] . when @xmath336 for some @xmath337 $ ] , by and we have @xmath338 for any @xmath339 and hence @xmath340 when @xmath341 for some @xmath335 $ ] , by and we have @xmath342 for any @xmath339 and hence @xmath343 where follows from the fact that @xmath344 by the definition of @xmath345 .    by , , and , the left - hand side of can be simplified as @xmath153\\setminus q}&r(i^{(r)}(u))+\\sum_{q \\in q}\\sum_{r=1}^{q-1}\\alpha_q(q , r)r(i^{(r)}(u))\\notag\\\\ & = \\sum_{r \\in [ |u|]\\setminus q}r(i^{(r)}(u))+\\sum_{r=1}^{q_{|q|}-1}\\beta'_q(r)r(i^{(r)}(u))\\\\ & = \\sum_{r \\in [ |u|]\\setminus q}r(i^{(r)}(u))+\\sum_{r \\in [ q_{|q|}]\\setminus q}\\left(\\frac{\\beta_q(r)}{\\prod_{t=1}^{|q|}(q_t-1)}-1\\right)r(i^{(r)}(u))\\label{eq : t100}\\\\ & = \\frac{1}{\\prod_{t=1}^{|q|}(q_t-1)}\\left(\\sum_{r \\in [ q_{|q|}]\\setminus q}\\beta_q(r)r(i^{(r)}(u))+\\left(\\prod_{t=1}^{|q|}(q_t-1)\\right)\\sum_{r = q_{|q|}+1}^{|u|}r(i^{(r)}(u))\\right)\\label{eq : t200}\\\\ & = \\frac{1}{\\prod_{t=1}^{|q|}(q_t-1)}\\left(\\sum_{r=1}^{q_{|q|}}\\beta_q(r)r(i^{(r)}(u))+\\sum_{r = q_{|q|}+1}^{|u|}\\beta_q(r)r(i^{(r)}(u))\\right)\\label{eq : t300}\\\\ & = \\frac{1}{\\prod_{t=1}^{|q|}(q_t-1)}\\sum_{r=1}^{|u|}\\beta_q(r)r(i^{(r)}(u)),\\label{eq : t400}\\end{aligned}\\ ] ] where follows from the facts that @xmath346 for all @xmath347 and that @xmath348 by the definition of @xmath345 .",
    "similarly , the right - hand side of can be simplified as @xmath153\\setminus q}c(a^{(r)}(u))+\\sum_{q \\in q}\\sum_{r=1}^{q-1}\\alpha_q(q , r)c(a^{(r)}(u ) ) = \\frac{1}{\\prod_{t=1}^{|q|}(q_t-1)}\\sum_{r=1}^{|u|}\\beta_q(r)c(a^{(r)}(u)).\\label{eq : t500}\\end{aligned}\\ ] ] substituting and into and multiplying both sides of the inequality by @xmath349 complete the proof of corollary  [ cor : gcsbk2 ] ."
  ],
  "abstract_text": [
    "<S> a broadcast network is a classical network with all source messages collocated at a single source node . for broadcast networks , </S>",
    "<S> the standard cut - set bounds , which are known to be loose in general , are closely related to union as a specific set operation to combine the basic cuts of the network . </S>",
    "<S> this paper provides a new set of network coding bounds for general broadcast networks . </S>",
    "<S> these bounds combine the basic cuts of the network via a variety of set operations ( not just the union ) and are established via only the submodularity of shannon entropy . </S>",
    "<S> the tightness of these bounds are demonstrated via applications to combination networks . </S>"
  ]
}