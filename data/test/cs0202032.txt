{
  "article_text": [
    "auctions have been used from times immemorial , but the renewed modern interest in auctions stems from :    * their increased use for selling off government property after wwii and later in extensive denationalizations , and * the theoretical breakthroughs started by  @xcite .",
    "a very recent surge of interest in auctions stems from their surprising success on the internet .",
    "many foresee internet auctions in which :    * the number of buyers will be large * the number of items for sale will be large * the mechanism used to determine the allocation and the payment will be complex both from the game - theoretic strategic and from the computational points of view .",
    "this work deals with computational aspects of winner determination in multi - unit combinatorial auctions .",
    "combinatorial auctions are mechanisms in which a number of items are up for sale and bidders bid for subsets of those items . in combinatorial auctions",
    "one typically assumes that all items for sale are different .",
    "computational aspects of combinatorial auctions have been considered in  @xcite .",
    "multi - unit combinatorial auctions are those combinatorial auctions in which certain of the items for sale are identical .",
    "we assume @xmath0 different commodities and @xmath1 identical items of commodity @xmath2 for .",
    "the problem we are trying to solve is that of determining the optimal allocation of the items .",
    "a set of bids is given : each bid requests a number of units ( possibly zero ) from each commodity and offers a price @xmath3 for the whole set .",
    "a subset of the set of all bids is conflict - free if , for each commodity , the sum of the units requested does not surpass the number of units for sale .",
    "the problem is to find a conflict - free subset that maximizes the sum of the prices proposed .",
    "multi - unit combinatorial auctions have been considered in  @xcite .",
    "the problem of finding the optimal solution of a multi - unit combinatorial auction is a hard problem , i.e. , requires extensive resources , as will be shown formally in section  [ sec : theory ] .",
    "it is therefore essential that one designs carefully the algorithm and uses the available resources smartly .",
    "the method we propose to use is based on the branch - and - bound search technique developed by operations researchers  @xcite .",
    "the use of some branch - and - bound techniques for finding optimal solutions for combinatorial auctions has been considered in  @xcite and more thoroughly in  @xcite .",
    "the case of multi - unit combinatorial auctions is considered in  @xcite where a wealth of heuristics are proposed .",
    "this paper concentrates on the fundamentals and characterizes the best ordering heuristics .",
    "the general description of the branch - and - bound technique below is well - known .",
    "the resource in shortest supply is space ( i.e. memory ) and therefore we propose to use a depth - first search , with backtracking to cover the whole search space . at any time we essentially keep in memory only a partial solution , i.e. , a set of non - conflicting bids .",
    "we look for a bid that can be added to the partial solution without creating a conflict and if there is none , know we have attained a possible solution and backtrack .",
    "the additional information of which we need to keep track consists only of the best solution found so far and backtracking information . on the whole the space requirements are linear in the size of the problem .",
    "note that , at any time , we have allocated part of the items and are left with a smaller problem of the same type : finding the optimal solution of another , smaller , muca .",
    "an exhaustive search such as sketched above will require exponential time for all possible inputs .",
    "one may hope to find an algorithm that will run faster on the _ easy _ inputs . even though the theoretical considerations of section  [ sec : theory ] seem to preclude that there be a majority of _ easy _ cases , one may hope that many of the problems that will have to be solved in practice will turn out to be easy .",
    "we are hoping for an algorithm that will run fast on those easy problems .",
    "the powerful _ branch - and - bound _",
    "idea is that , in many situations , we may be able to conclude on the spot that adding a specific bid to our partial solution is hopeless and that we can immediately backtrack , saving us the exploration of a whole sub - tree , i.e. , enabling us to _ prune _ a whole sub - tree .",
    "all we need for that is a good upper - bound for the value of the optimal solution of the smaller muca concerning the items still unallocated .",
    "if we have such an upper bound and if the sum of this upper bound and the values of the bids of our partial solution is not larger than the value of the best solution found so far , we may backtrack immediately : no extension of our partial solution may have a value larger than that of the solution we already know . in section  [ sec : bounding ] , we shall propose a number of ways to bound from above the value that can be obtained from auctioning the still unallocated goods .",
    "there is obviously no need to commit to a single method : one may use many such methods , obtain a number of different upper bounds and use the smallest of all .",
    "the pruning described above is most effective if the best solution found so far , that is used to decide whether to prune or not , is in fact a good solution . if we find the optimal ( or a very good ) solution early on , even though we shall not know that it is the optimal solution ( or how good it is ) , we shall be able to prune more sub - trees than if we had a best solution so far that is not as good .",
    "it is therefore essential that we find the best solutions early on .",
    "we should , therefore , carefully choose the order in which we try to enter the bids into partial solutions and try the most promising bids first .",
    "to summarize , we need a good heuristic to pick the most promising bid in a set of bids , and this is the third component of branch - and - bound method .",
    "we shall use such a heuristic to find the most promising bid in the smaller muca concerning the items still unallocated iteratively to find the most promising of those bids that does not conflict with the partial solution at hand .",
    "we shall then use the upper - bound described above to decide whether to prune the whole sub - tree or not . notice that we do not propose to rank the bids once and for all :",
    "the most promising bid may depend on the partial solution at hand .",
    "for example , the normalized criteria described below in equations  [ eq : euclidnorm ] and  [ eq : norm ] imply such a dependency . in  @xcite the heuristic proposed to choose the next bid takes into account the whole set of bids .",
    "we restrict our attention to heuristics that consider each bid separately . in section  [ sec : ordering ] we shall consider different criteria for this task and in section  [ sec : theory ] we shall characterize the best one .",
    "it turns out that this optimal criterion does not depend on the partial allocation , or , equivalently , on the set of items still unallocated , and therefore one can simply order the bids according to this criterion once and for all at the start of the algorithm .    in this paper , we shall assume that any subset of bids such that , for any commodity , the sum of the units requested does not exceed the total number of units available is a legal solution .",
    "we shall not consider explicitly the case in which certain bids are exclusive , i.e. , no legal solution can contain certain pairs of bids .",
    "the generalization of our ( and essentially any ) branch and bound algorithm to the case of possibly exclusive bids is quite straightforward , though : when considering whether to add a specific bid to a partial allocation , check not only whether there are enough units left to satisfy it and whether the sub - tree can be pruned , check also whether the bid considered is not excluded by some bid of the partial solution .",
    "we noticed that , at any point , we have a partial allocation , i.e. a set of non - conflicting bids , and are trying to extend it .",
    "the best possible extension is , again , the optimal solution to the muca of the remaining units to the remaining bids .",
    "we shall therefore look for ways to bound from above the value of any muca .",
    "we also noticed that one may use a number of different methods , obtain numerous upper - bounds , and take the smallest one .",
    "we propose three different types of methods .",
    "the first method we propose is linear programming .",
    "our problem is an integer - programming problem : find for each bid @xmath4 that maximizes while satisfying the linear constraints : .",
    "the variable @xmath5 indicates whether bid @xmath4 is in the optimal solution ( ) or out of it ( ) . the relaxed linear programming problem in which we allow will provide a value that is an upper - bound for the value of the optimal solution to the original muca .",
    "notice that the solution of the relaxation allows for fractional allocation of bids : may be interpreted as allocating half of the quantities requested by @xmath4 at half the price proposed . in the worst case , for theoretical reasons , it seems that the upper bound provided by lp can not be good , but there are reasons to think that in practice , and especially for large @xmath1 s the bound could be pretty good quite often .",
    "an extended discussion of the relation between the solutions to the original and the relaxed problems may be found in  @xcite .",
    "notice also that , if the optimal solution to the relaxed problem is integral , then we know it is the optimal solution to the original problem .",
    "the integrality of the solution to the lp problem is the signal for backtracking .",
    "another , quite different , idea is to consider only one commodity . by projecting bid @xmath4 on commodity @xmath2 , to , ,",
    ", we transform our original muca into a knapsack problem .",
    "the optimal solution to the knapsack problem is obviously an upper bound for the optimal solution of the original muca .",
    "the knapsack being polynomially - approximable at any precision , one may easily obtain an upper bound in this way , in fact @xmath0 such upper bounds , one for each commodity .",
    "the bounds described above are not difficult to compute and quite different in spirit ( and probably results ) .",
    "our next bound is related to the linear programming one of section  [ subsec : lp ] : it always provide an upper bound that is larger than or equal to the one provided by lp , but it is extremely easy to compute . consider the average price per unit for bid @xmath4 : .",
    "suppose @xmath6 is the largest of the @xmath7 s .",
    "then clearly the value of the optimal solution to the muca is bounded from above by .",
    "the value of the optimal solution to the relaxed lp problem is also bounded by this quantity .",
    "given positive integers , how should one compare the attractiveness , at first sight , of two bids , and , ?",
    "we may as well say we are looking for a criterion @xmath8 , i.e. a real - valued function of the bid @xmath6 , possibly depending on the parameters @xmath1 s such that iff @xmath6 is more promising than @xmath9 .",
    "some obvious considerations may be made immediately .",
    "the corresponding heuristics have been incorporated in  @xcite .",
    "if the quantities @xmath10 and @xmath11 are equal , but @xmath3 is larger than @xmath12 , one should obviously prefer @xmath6 to @xmath9 and in fact , since the two bids conflict , one can remove @xmath9 from consideration .",
    "similarly , if the prices @xmath3 and @xmath12 are equal and for every @xmath2 , , then one should prefer @xmath6 to @xmath9 and remove @xmath9 from consideration .",
    "in other terms , the function @xmath8 should be monotonic in @xmath3 and anti - monotonic in the @xmath10 s . notice that any such function will have the effect of removing from consideration all the dominated bids as above .",
    "many functions come to mind . the simplest one is probably : @xmath13 i.e. , order the bids by the price they propose .",
    "the most natural function that comes to mind is probably : @xmath14 that orders the bids by average price per unit .",
    "but one may prefer to normalize the elements of the sum by the number of units of each commodity that are available and use : @xmath15 if one has a geometrical bind one may prefer the euclidean : @xmath16 or the normalized : @xmath17 a previous result on combinatorial auctions  @xcite suggests the consideration of : @xmath18 or of : @xmath19 many other criteria could be considered , of the form : @xmath20 or @xmath21 it is extremely difficult to guess what is the best criterion to use in a branch - and - bound algorithm .",
    "experimental results would be interesting and we are in the process of obtaining such results but the lack of real - life data casts a doubt on the applicability of the conclusions that can be drawn from synthesized data .    based on each of those criteria , one can devise a ( different ) greedy algorithm to find a solution to mucas : pick the most promising bid in the partial solution , then find the most promising remaining bid that does not conflict with the partial solution , and so on until no bid can be added .",
    "we are looking for the criterion that gives the _ best _ greedy algorithm . in what sense ?",
    "we choose to compare greedy algorithms by the approximation ratio they provide in the worst - case .",
    "a greedy algorithm that provides , on any muca , a solution that is at least one - tenth of the optimal solution will be preferred to any algorithm that provides only one - hundredth of the optimal solution on some muca .",
    "notice that we could assume a probability distribution on the inputs and compare the expected values of the solutions found ( or their ratio to the optimal one ) , but this is not what we propose to do .",
    "our choice is consistent with that of the theoretical cs community .",
    "the next section is devoted to theoretical considerations leading to the characterization of the best criterion .",
    "the problem of finding an optimal allocation in a multi - unit combinatorial auction is best described as a generalization of the weighted set packing problem  @xcite : the weighted multi - set packing problem .",
    "it seems the same problem has been studied in  @xcite .",
    "we consider @xmath0 commodities and assume @xmath1 units of each of @xmath0 commodities : are available .",
    "the @xmath1 s are positive natural numbers .",
    "we shall denote by @xmath22 the quantity . on the whole @xmath22 items are to ( may ) be allocated .",
    "a bid is written : , where the @xmath23 s are natural numbers with and @xmath3 is a natural number ( or a rational nonnegative number ) .",
    "a bid is an offer to acquire @xmath10 units of each commodity @xmath2 for a total sum of @xmath3 .",
    "given a set of bids we want to find a subset that maximizes the sum of the @xmath3 s such that for every @xmath2 , , the sum of the @xmath10 s is less than or equal to @xmath1 .",
    "a number of special cases are worth noticing :    * if all @xmath1 s are equal to one , the problem is the weighted set packing ( wsp ) problem , * if there is only one commodity ( @xmath24 ) , the problem is the knapsack problem .    our first result , a trivial generalization from  @xcite , shows that the wmsp problem is not only np - hard but also hard to approximate .",
    "[ the : inapprox ] unless np = zpp belongs to zpp if and only if there is some constant @xmath25 such that there is a probabilistic turing machine @xmath26 that on input @xmath27 runs in expected time and outputs @xmath28 if and only if ] , the wmsp problem can not be approximated within @xmath29 in polynomial time , for any .    a graph with @xmath30 vertices and @xmath31 edges defines a wmsp problem in the following way .",
    "consider @xmath31 commodities ( ) and assume @xmath1 units of commodity @xmath2 are for sale .",
    "the @xmath1 s are arbitrary .",
    "there are @xmath30 bids .",
    "bid @xmath4 offers a price of @xmath28 for @xmath1 units of each of the commodities ( i.e. edges ) @xmath2 that vertex @xmath4 is adjacent to .",
    "any feasible allocation defines a set of independent vertices and its value is the size of the independent set .",
    "the solution of the wmsp problem is therefore equivalent to finding a maximal independent set .",
    "an @xmath32-approximation of the wmsp problem provides an @xmath33-approximation of the maximal independent set problem . by  @xcite ,",
    "no efficient @xmath34-approximation exists for the maximal independent set problem , therefore no @xmath35-approximation , unless np = zpp .    in  @xcite it is shown that the wsp problem admits a polynomial - time @xmath36-approximation and that there is a greedy algorithm that achieves this ( optimal ) approximation ratio .",
    "notice that finding a polynomial - time @xmath37-approximation of the maximal independent set is trivial , but finding such an @xmath36-approximation for wsp is not . in the more general case of wmsp problems",
    ", we shall characterize the approximation quality of greedy algorithms as in theorems  [ the : lowerb ] and  [ the : upperb ] , but we do not know how to match the lower bound of theorem  [ the : inapprox ] . for reasons explained above , we are interested in solving ( approximately ) wmsp problems by a greedy algorithm . for such algorithms , we may prove a result that is stronger than theorem  [ the : inapprox ] .    [",
    "the : lowerb ] no ( polynomial - time ) greedy algorithm can guarantee an approximation of better than .",
    "define a _ unit _ bid as a bid offering a sum of @xmath28 for a single unit of a single commodity : .",
    "there are @xmath0 different unit bids , but the same unit bid may appear a number of times in the list of bids . given a greedy algorithm , let @xmath38 be the unit bid that is ranked first among all unit bids by the algorithm .",
    "two problems , i.e. , sets of bids , will be described .",
    "a greedy algorithm will perform badly , i.e. propose a solution that is only a @xmath39-approximation , on one of those two problems . in the first problem , there are only two bids :    1 .   a bid for all the units available : , , and 2 .",
    "a bid @xmath38 .    in the second situation , there are bids :    1 .",
    "a bid @xmath40 for all the units available as above , and 2 .   for every @xmath2 , , @xmath1 unit bids for commodity @xmath2 : .",
    "if bid @xmath40 is ranked before @xmath38 , then , in the second situation , the greedy method obtains instead of the optimal , a -approximation .",
    "if bid @xmath38 is ranked before bid @xmath40 , then , in the first situation the greedy method obtains @xmath28 instead of the optimal , again a -approximation . for any greedy method",
    ", one of the two situations will give a solution that is a factor of less than optimal .",
    "the following positive result provides an upper - bound that matches the lower bound of theorem  [ the : lowerb ] .",
    "[ the : upperb ] a greedy algorithm ( to be described ) provides a polynomial - time @xmath39-approximation for the wmsp problem .",
    "we shall use the index @xmath4 to range over the bids .",
    "the bid @xmath4 is : . we define .",
    "the algorithm we propose is greedy allocation based on the following criterion @xmath8 to rank the bids , in descending order : @xmath41 let @xmath42 be the optimal solution , i.e. , the set of bids contained in the optimal solution .",
    "the value of the optimal solution is .",
    "let @xmath43 be the solution obtained by the greedy allocation and @xmath44 its value : .",
    "we want to show that : @xmath45 notice , first , that we may , without loss of generality , assume that the sets @xmath42 and @xmath43 have no bid in common . indeed , if they have , one considers the problem in which the common bids and all the units they request have been removed .",
    "the greedy and optimal solutions of the new problem are similar to the old ones and the inequality for the new smaller problem implies the same for the original problem .",
    "let us consider @xmath44 . by elementary algebraic considerations",
    "@xmath46 @xmath47 consider @xmath48 . by the cauchy - schwarz inequality : @xmath49 but : @xmath50 the expression represents the total number of units of commodity @xmath2 allocated in the optimal allocation @xmath42 and is therefore bounded from above by @xmath1 , the number of units available .",
    "we conclude that : @xmath51    to prove  ( [ eq : goal ] ) , it will be enough , then , to prove that : @xmath52    consider the optimal solution @xmath42 . by assumption , the bids of @xmath42 did not enter the greedy solution @xmath43 .",
    "this means that , at the time such a bid @xmath4 is considered during the execution of the greedy algorithm , it can not be entered in the partial allocation already built .",
    "this implies that there is a commodity @xmath2 , not enough units of which are still unallocated to satisfy the quantity @xmath53 requested by bid @xmath4 . in other terms the sum of @xmath53 and the @xmath54 of all the bids of the greedy solution already considered was larger than @xmath1 : @xmath55 in particular it follows that and therefore .",
    "we attach to every bid @xmath4 of @xmath42 such a commodity @xmath56 .",
    "if more than one such suitable commodity exists , we choose one arbitrarily .",
    "let @xmath57 be the subset of @xmath42 that contains those bids @xmath4 for which .",
    "the @xmath57 provide a partition of @xmath42 and : @xmath58 let us denote by @xmath59 the size of the set @xmath57 .",
    "we shall conclude the proof by showing that , for every @xmath2 , : @xmath60 let @xmath61 be a bid of @xmath57 whose @xmath8 is maximal ( among bids of @xmath57 ) and let .",
    "we know that : @xmath62 we want to bound @xmath59 from above .",
    "we remarked above that : @xmath63 and that for every .",
    "therefore : @xmath64 @xmath65 and therefore .",
    "clearly , then : @xmath66 @xmath67    theorems  [ the : lowerb ] and  [ the : upperb ] show that the criterion of equation  [ eq : unnorm0 ] is optimal , in a worst - case sense .",
    "[ co : optimal ] the criterion proposed in equation  [ eq : unnorm0 ] for choosing the most promising bid guarantees , in the worst - case , the best possible approximation ratio .",
    "none of the other criteria examined in section  [ sec : ordering ] achieves the same approximation ratio .",
    "let us show this explicitly for the normalized criterion of equation  [ eq : norm ] , and characterize exactly the approximation ratio achieved by this criterion .    along the lines of the proof of theorem  [ the : upperb ]",
    ", one can show that using the normalized ranking criterion : @xmath68 achieves a @xmath69-approximation where @xmath26 is the maximum of the @xmath1 s .",
    "the following example shows that this upper bound is exact .",
    "therefore the normalized criterion is not optimal .",
    "consider two commodities , and assume there are @xmath22 units of the first one ( ) and one unit of the second one ( ) . there are two bids .",
    "the first one is and the second one is .",
    "both bids have the same normalized ranking criterion ( @xmath28 ) . assume the greedy method places the second bid first .",
    "it obtains @xmath70 instead of the optimal @xmath71 : an @xmath72-approximation , not as good as the @xmath73-approximation provided by the unnormalized criterion . in section  [ sec : bb ] , we indicated that we were willing to consider dynamic , and not only static , ordering criteria for the bids .",
    "our conclusion is that the optimal criterion is a static one , quite a surprising conclusion .",
    "as noted in section  [ sec : bounding ] the choice of a method for bounding the possible value of an auction from above is quite unproblematic in practice : one may use a wealth of methods and take the smallest upper - bound obtained . in practice",
    ", one will , on the basis of the record of past runs , easily find out which of the methods are useless and stop using them .",
    "the choice of the most promising bid studied in section  [ sec : ordering ] and  [ sec : theory ] is much more of a problem .",
    "the criterion described in  ( [ eq : unnorm0 ] ) is shown to be theoretically optimal in corollary  [ co : optimal ] , but is it the best in practice ?",
    "it is the criterion that guarantees the best approximation ratio in the worst case , does it provide the best solution in practice ?",
    "the truth of the matter is that only experience with real mucas can tell and , at this moment , no such data exists . we can only point out at two considerations .",
    "first , the examples of section  [ sec : theory ] present quite tellingly why the criterion defined in  ( [ eq : unnorm0 ] ) strikes a balance between a criterion favoring large bids and a global view such as the one defined in  ( [ eq : p ] ) or one that favors small bids and fine tuning such as defined in  ( [ eq : linear ] ) or in  ( [ eq : euclid ] ) .",
    "the proof of theorem  [ the : upperb ] also shows why the unnormalized criterion of  ( [ eq : unnorm0 ] ) should be preferred to the normalized criterion of  ( [ eq : norm ] ) .",
    "secondly , we have confidence in the applicability of theoretical results : techniques that can be proved to be optimal in theory tend to work well .    in  @xcite , the authors use a complex method for choosing the most promising bid : their choice depends on the other bids and also on the results of the bounding - from - above procedure . since the ordering of the commodities does not depend on the price offered by the bids , but",
    "may determine the solution that will be considered first , it seems that this first candidate solution may be arbitrarily worse than the optimal solution .",
    "the basic criterion used inside bins is similar to that of ( [ eq : linear ] ) and therefore not optimal in theory .",
    "experimental results are crucial in the assessment of the ideas developed above .",
    "three basic questions should be answered .    1 .",
    "does the criterion for choosing the most promising bid that has been shown to be optimal in corollary  [ co : optimal ] perform well in practice , i.e. , does a search algorithm that uses this criterion find rapidly the optimal solution ? 2 .",
    "do the different methods for bounding from above the value of the optimal solution lead to the pruning of many large subtrees ? which of those methods are most useful ?",
    "are those bounding methods fast enough to be usable in practice or does their use imply that the algorithm spends an unbearable amount of time in computing upper bounds ?",
    "a trade - off between the amount of effort spent in pruning and in examining new nodes must be struck .",
    "the best would obviously be to examine those questions on data obtained from real - life combinatorial auctions .",
    "such data is very difficult to find and we could not put our hands on such data .",
    "the next best thing that can be done is to use auctions artificially generated . in  @xcite , the authors define a probability distribution over combinatorial auctions and test the average behavior of their algorithm on this distribution .",
    "we chose to use the same distribution , with the same values for the parameters .",
    "let us address the second question first .",
    "the answer is emphatically positive .",
    "the methods proposed above provide upper bounds that allow for an extremely thorough pruning of the search tree .",
    "linear programming provides a very tight upper bound that leads to a very short search path over the tree : only a very small fraction of the nodes have to be expanded .",
    "for example , considering @xmath74 bids , we found that only @xmath75 of the nodes were visited .",
    "the projections bounds are not as good , and provide , for the distribution we used , bounds that are not better than the bound provided by average price considerations .",
    "this is probably due to the specific distribution chosen , in which it is rarely the case that a single good is _ dominant _ , such as , e.g. , in the case all bids request all the units of a certain specific good .",
    "one of the characteristics of the distribution suggested in  @xcite is that bids tend to request only a small number of units per good .",
    "this kind of distribution leads to an auction with no dominant good for which the projection bounds are quite loose .",
    "r. holte  @xcite found that , on another distribution , the projection bound is very good .",
    "nevertheless , projection bounds allow us to visit only @xmath76 of the nodes .",
    "the average price upper bound is not as good as the linear programming one , but is , on average , as good as the projection bound .",
    "it allows for a very thorough pruning of the search tree . considering @xmath74 bids",
    ", we found that only @xmath76 of the nodes had to be visited .",
    "this number is the same as the one for the projection bound and ten times larger than the one for linear programming .",
    "let us now address the third question .",
    "we found linear programming to be extremely costly ( in time ) to use , so costly as to render its use infeasible for large combinatorial auctions .",
    "since we have only just begun experimenting , we hope that we shall learn in the future how to use linear programming effectively .",
    "the average price upper bound is , on the contrary , computed very fast .",
    "the projection bounds are not computed as fast .",
    "since we explained above that the projection bounds were , on our distribution , not better , _ the results to be presented below have all been obtained by using the average price upper bound exclusively .",
    "_    let us discuss the first question now .",
    "the best test of the quality of our ordering heuristic is probably to examine how fast the optimal solution is obtained .",
    "we found that , using the ordering criterion described in equation  [ eq : unnorm0 ] , the optimal solution is found extremely rapidly and the algorithm spends an overwhelming part of its time in showing that this solution is indeed optimal . in figure  1",
    ", we plot the time spent until the optimal solution is found divided by the total time spent in the search for auctions of different sizes .",
    "all auctions include @xmath77 goods , the number of bids is found on the @xmath27 axis . for small auctions",
    "this number is of the order of @xmath78 ; for larger auctions this number decreases about linearly on a logarithmic scale and for auctions of @xmath79 bids , the optimal solution is found after only @xmath80 of the total execution time .",
    "it seems that this percentage decreases at least exponentially .",
    "those results seem to improve significantly on those of  @xcite .",
    "the _ percentage optimality _ graph there seems to indicate than more than @xmath81 of the time is spent before the optimal solution is found .",
    "those results indicate that the criterion of equation  [ eq : unnorm0 ] that we proved theoretically optimal is extremely good in practice .",
    "figure  2 describes the execution times of our branch and bound algorithm using the average price upper bound and the ordering heuristic of equation  [ eq : unnorm0 ] : on the @xmath27-axis the number of bids , on the @xmath82-axis the execution time .",
    "four different curves are plotted , corresponding to a different number of goods .",
    "our experimental data was collected on a pentium iii-450 running linux , using 640k of memory .",
    "figure  2 is comparable to the _ number of bids vs. time _ figure in  @xcite .",
    "our running times are larger , by orders of magnitude , than theirs .",
    "for this reason , we were not even capable of solving the smallest auctions they considered .",
    "figure  2 shows very clearly a sub - linear ( on a logarithmic scale ) growth in execution time , indicating that the growth is sub - exponential .",
    "this feature is also found , but less clearly , in  @xcite s graph .",
    "we intend to look into the reasons for the huge gap in running times between our algorithm and camus .",
    "the huge discrepancy between the amount of memory they use ( 25 mb ) and ours ( 640k ) is certainly part of the explanation .",
    "figure  3 examines the dependence of the running time on the number of goods .",
    "the number of bids is fixed at @xmath83 , and the number of goods is described on the @xmath27 axis .",
    "camus  @xcite exhibits an exponential sensitivity to the number of goods ( as opposed to the number of bids ) .",
    "figure  3 clearly shows a sub - exponential growth .",
    "we proposed a simple branch - and - bound framework to solve mucas .",
    "we succeeded in characterizing the theoretically optimal method for sorting bids .",
    "two main directions for research are left open :    * characterize the power of different methods for bounding from above the value of mucas * run more extensive experiments to compare the performance of different heuristics both for bounding and for ordering and to compare our proposal to others such as in  @xcite . *",
    "consider more efficient ways of using linear programming , using the results of previous computations to speed up the search for a solution .",
    "conversations with michel bercovier and michael ben - or and remarks from amir ronen are gratefully acknowledged . the first author is partially supported by grant 15561 - 1 - 99 from the israel ministry of science , culture and sport and by the jean and helene alfassa fund for research in artificial intelligence .",
    "y.  fujishima , k.  leyton - brown , and y.  shoham . taming the computational complexity of combinatorial auctions : optimal and approximate approaches . in _ proceedings of ijcai99",
    "_ , stockholm , sweden , july 1999 .",
    "morgan kaufmann .",
    "d.  lehmann , l.  i. ocallaghan , and y.  shoham .",
    "truth revelation in rapid , approximately efficient combinatorial auctions . in _ proceedings of the first acm conference on electronic commerce .",
    "pages 96102 , denver , colorado , november 1999 .",
    "sigecom , acm press .                r.  r. vemuganti .",
    "applications of set covering , set packing and set partitioning models : a survey . in d",
    "du and p.  m. p. , editors , _ handbook of combinatorial optimization _",
    ", volume  1 , pages 573746 .",
    "kluwer academic publishers , 1998 ."
  ],
  "abstract_text": [
    "<S> finding optimal solutions for multi - unit combinatorial auctions is a hard problem and finding approximations to the optimal solution is also hard . </S>",
    "<S> we investigate the use of branch - and - bound techniques : they require both a way to bound from above the value of the best allocation and a good criterion to decide which bids are to be tried first . </S>",
    "<S> different methods for efficiently bounding from above the value of the best allocation are considered . </S>",
    "<S> theoretical original results characterize the best approximation ratio and the ordering criterion that provides it . </S>",
    "<S> we suggest to use this criterion . </S>"
  ]
}