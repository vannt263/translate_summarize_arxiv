{
  "article_text": [
    "ontologies are witnessing an increasing popularity outside specialized ai communities .",
    "while this is mostly due to semantic web applications  @xcite , we must also credit their ability to cope with taxonomies and part - whole relationships , to handle heterogeneous attributes , and their provision for various automated reasoning services  see , e.g. ,  @xcite .",
    "these features have been recognized since long time in system engineering , the community encompassing all areas of research devoted to design , implementation , monitoring and diagnosis of technical processes .",
    "for instance , in the operations and maintenance sub - community , the use of ontologies is explicitly advocated . also standards like iso 13374 (",
    "_ condition monitoring and diagnostics of machines  data processing , communication and presentation _ ) suggest the use of ontologies for several tasks , mostly related to data conceptualization .",
    "however , the adoption of ontologies faces some challenges , mostly due to speed and reliability constraints imposed by industrial settings .    here",
    "we investigate this issue by considering four contributions of ours to application domains wherein ontologies provide key capabilities in system engineering .",
    "the first case study is about an on - board rolling - stock condition analyzer , i.e. , a system to perform fault detection and classification  @xcite .",
    "the second one is about monitoring an intermodal logistic system  @xcite .",
    "the third one is about an ontology - based framework to generate diagnostic - decision support systems  @xcite .",
    "finally , a fourth case study is an application to computer - automated design of elevator systems . in the following",
    ", we briefly introduce each case study , giving details about its context , underlying motivation and intended objectives .",
    "the ultimate goal of the paper is to discuss and compare the results obtained to assess the effectiveness of ontologies in such application domains .    _",
    "ontologies for condition analysis .",
    "_ we introduced an ontology - based condition analyzer ( ca )  @xcite in the context of the eu project integrail .",
    "our ca collects signals from control logic installed on locomotives , and it leverages an ontology to correlate observed data , symptoms and faults . the ca must mate two competing needs : @xmath0 railway regulations require hardware which is highly reliable , and whose performances are thus far even from desktop workstations ; @xmath1 ontology - related tools , e.g. , description logic reasoners , have relatively large memory , processor and storage footprints . in this experience , the main goal was thus to check whether reasoning with ontologies can provide useful diagnostic feedback in a resource - restricted scenario .    _ ontologies for system monitoring . _ in  @xcite we provided strong evidence of practical uses for ontologies in complex systems engineering by implementing a monitor for _ intermodal logistics systems _ ( ilss ) , i.e. , systems supporting the movement of containerized goods .",
    "in particular , we considered combination of rail and road transport , where rail transport is provided by short - distance shuttle trains , and network coverage is achieved through connections at specialized terminals . in this experience ,",
    "the main goal was to gather data about terminal operations and compute global performances indicators , where access to data is mediated by an ontology  ontology - based data access ( obda )  @xcite . here , unlike the ca case study , the ability to handle large amount of data is crucial , but reasoning is limited to sparql query answering .    _",
    "ontologies for diagnostic support system generation .",
    "_ diagnostic decision support systems ( ddsss ) help humans to infer the health status of physical systems . in  @xcite we introduced disegno  for `` diagnostic server generation through ontology ''  to generate customized ddsss .",
    "as in the ils monitoring case study , since it is expected that large quantities of data should be handled , the ontology language is restricted to those designed for tractable reasoning  see , e.g. ,  @xcite . in this case ,",
    "ontology - based reasoning is not leveraged , as disegno generates relational databases from the domain ontology and then computes diagnostic rules with ptolemy ii  @xcite , an open - source software simulating actor - based models .    _",
    "ontologies for computer - automated design . _",
    "as mentioned in  @xcite , the first scientific report of intelligent computer - automated design ( cautod ) is the paper by kamentsky and liu  @xcite , who created a computer program for designing character - recognition logic circuits satisfying given hardware constraints . in mechanical design",
    " see , e.g. ,  @xcite  the term usually refers to techniques that mitigate the effort in exploring alternative solutions for structural implements . in our liftcreate cautod program for elevator systems ,",
    "ontologies support intelligent design creation and optimization by managing detailed part - whole taxonomies , wherein different relations among components can be expressed .",
    "this case study provides thus yet another application of ontologies , mostly oriented to intelligent computation and data persistency .",
    "overall , the case studies considered witness the great flexibility that ontologies provide in handling diverse application scenarios , from condition analysis of locomotives , to automated design of elevators , considering both cases wherein they provide the basis for logic reasoning services , or just advanced data - modeling capabilities . the rest of the paper is structured as follows . in sections  [ sec : condition ] , [ sec : ilog ] , [ sec : ondabrief ] and [ sec : elevator ] we sketch the design , the implementation and the results obtained in the case studies described above .",
    "section  [ sec : concl ] concludes the paper by summarizing the results and providing some discussion thereof .",
    "a portion of the e414 ontology regarding traction faults .",
    "concepts are nodes and object properties are edges : white nodes are sp3a concepts , grey ones are e414-specific concepts . ]",
    "the ca prototype described in  @xcite focuses on fault detection on trenitalia e414 locomotive .",
    "the main task of the ca is to perform fault classification according to priority for maintenance , and impact on mission - related and safety - related aspects . here",
    ", we focus on traction groups as an example of subsystem that can generate a faulty condition . our ontology for the e414 locomotive is written in owl 2 language and it builds on the sp3a core ontology  see  @xcite for details .",
    "in particular , the e414 ontology leverages the sp3a concepts of observationdata , i.e. , process variables , and observation , i.e. , sequences of observation data from which individuals of class symptom and fault arise .",
    "symptom individuals are related to observation individuals via the referstoobservation property and to fault individuals via the referstofault property .",
    "fault is a concept whose individuals are defined in terms of the necessary hassymptom relationship with symptom individuals .",
    "two subclasses of fault are defined : priorityfault and nonpriorityfault , with obvious meaning . in figure",
    "[ fig : e414ont ] we show a portion of the e414 ontology related to traction faults , where concepts have been specialized in subclasses whose individuals correspond to actual signals and subsystems . fault and symptom classification is obtained by a description logic ( dl ) reasoner considering the patterns observed .",
    "for instance , in the case of tractionhightemperatureobservation , three ranges of temperatures are defined that correspond to `` interesting '' patterns : from 70 to 80 degrees , from 80 to 130 degrees , and over 130 degrees .",
    "it is postulated that observations falling in the second and in the third ranges are to be considered mission critical , while the ones in the first category are only maintenance critical .",
    "a detailed description of the ca architecture can be found in  @xcite .",
    "here we provide some intuition on how the analyzer works considering high temperatures in the traction groups . when the temperature of a group is higher than 70 degrees for at least 3 consecutive samples read from the field bus , the ca starts tracking a potential anomalous pattern .",
    "once such a pattern is detected , the corresponding individuals in the classes tractionobservationdata and tractionhightemperatureobservation are recorded .",
    "symptom individuals are built along with all the properties required by the ontology specification .",
    "for example , if an observation of the class tractionhightemperatureobservation has been created , a specific individual tractionhightemperatureobservation is related to a new symptom individual by the referstoobservation property .",
    "fault individuals for each symptom individual are created together with the causedbysymptom property .",
    "fault as well as symptom individuals are built of generic type , leaving their classification to the dl reasoner .",
    "once the classification is done , the ca publishes the results , transmitting them to external agents .",
    "as an example , let us assume that @xmath2 is an individual of the class tractionhightemperatureobservation whose property isat is set to the constant _ 130degrees , @xmath3 is the symptom individual related to @xmath2 , and @xmath4 is the fault individual related to @xmath3 .",
    "the e414 ontology postulates that all symptoms such that the corresponding observation is an instance of tractionhightemperatureobservation related by isat to the constant _",
    "130degrees are also an instance of tractiontotalmissionimpactsymptom , which is a subclass of symptom .",
    "therefore , a reasoner can infer that @xmath3 belongs to missionrelatedsymptom .",
    ".[tab : results ] results with ( a ) lazy and ( b ) eager implementations of the ca . [ cols=\"^,^,^,^\",options=\"header \" , ]     out of the three sets of experiments performed in  @xcite , we report just those to ensure that the ca implementation fits the constraints . to this end , we ran several tests using different fault scenarios .",
    "table  [ tab : results ] shows the results obtained by running the ca on four different scenarios  the first includes no fault , the second includes only one fault , the third includes five contemporary faults , and the last 17 contemporary faults  using two different configurations .",
    "configuration ( a ) is `` lazy '' , i.e. , it keeps all the individuals , while configuration ( b ) is `` eager '' , i.e. , it deletes individuals as soon as possible . as we can see in table",
    "[ tab : results ] , the eager version results in a great improvement over the lazy one , both in terms of memory consumption and in terms of computation time .",
    "in particular , in the second column of table  [ tab : results ] we can notice that the eager version performs reasonably well , even in the fourth test case ( worst - case scenario ) .",
    "in the same scenario , the lazy version exceeds the amount of available memory . as we can see in the rightmost column of table  [ tab : results ] , the amortized computation time over a single scenario decreases with the number of concurrent observations detected in the round .",
    "managing a round of samples without detected observations takes only 90 ms , which leaves enough time for other activities , and allows the ca to process all the incoming signals in due course .",
    "in  @xcite we provided evidence that ontology - based data access ( obda )  @xcite is of practical use in the context of _ intermodal logistics systems _ ( ilss ) .",
    "the investigation focuses on the opportunity to build a monitoring information system ( mis ) using obda instead of relational databases ( rdbs ) .",
    "the application scenario is an ils relying on a logic akin to computer networks , i.e. , frequent short - distance trains with a fixed composition and a predefined daily schedule to cover some geographical area",
    ". _ intermodal transport units _ ( itus ) enter the network at some terminal and travel to their destination according to a predefined route , usually boarding more than one train along the way .",
    "terminals collect itus from areas of approximately 150 km in radius in order to minimize road transport .",
    "the mis is a key enabler to minimize delivery time , maximize rolling - stock and network utilization and , ultimately , reduce the economic overhead of transportation for the final customer .",
    "the main goal of the mis is to compute _ key performance indicators _ ( kpis ) to perform tactical and strategical decision making about the network .    in figure",
    "[ fig : ilog_dot ] we present a graphical outline of the ontology at the heart of our obda solution to monitor the ils .",
    "the ontology  ils ontology in the following  is compliant with the owl 2 ql profile described in the official w3c s recommendation as _",
    "`` [ the sub - language of owl 2 ] aimed at applications that use very large volumes of instance data , and where query answering is the most important reasoning task.''_. given the ils application domain , owl 2 ql guarantees that conjunctive query answering and consistency checking can be implemented efficiently with respect to the size of data and ontology , respectively .",
    "the restrictions that owl 2 ql implies did not hamper the modeling accuracy of our ils ontology . in figure",
    "[ fig : ilog_dot ] we can pinpoint classes related to freight forwarding such as * customer * , i.e. , companies forwarding their goods through the network , * requestforwork * , i.e. , the main document witnessing that a given customer has issued a request for transporting a number of itus , * transportorder * , i.e. , the `` bill of transit '' associated to each itu , as well as entities related to physical elements such as * itu * , * terminal * and * train*. also `` logical '' entities are modeled such as * route * , i.e. , a sequence of terminals and railway connections serviced regularly by one or more scheduled trains and * scheduledstop * , i.e. , terminals associated to a given route with a given schedule . *",
    "event * is the main monitoring entity , as the calculation of most kpis relies on the exact recording of events at specific locations .    to assess obda performances , in  @xcite we obtained different artificial utilization scenarios by changing the number of itus shipped daily from each terminal .",
    "considering typical usage patterns , we postulated that a provision of 10 to 50 itus is to be shipped daily from each terminal , with 40 to 50 itus corresponding to a heavy utilization .",
    "scenarios are simulated for an increasing number of days to evaluate scalability , and all of them share common settings as far as number of train travels , number of cars per train , and timetabling are concerned .",
    "unexpected delays as well as the number of customers per terminal follow a probabilistic model  see  @xcite for more details . in figure  [ fig : results ] we display the results obtained in the case of an heavy utilization scenario to compute a specific kpi , namely the average number of itus unloaded per hour . the performance of four different query - answering systems are reported : a sql query on a native rdb implementation , and a sparql query on the ontology store .",
    "the sparql query can be answered by three different systems , namely arq ( the default query processor in the jena library ) , pellet ( the same dl reasoner that we consider in section  [ sec : condition ] ) and quest  @xcite .",
    "the latter is the only reasoner exploiting the fact that sparql queries can be compiled on - the - fly into sql queries for an equivalent rdb representation of the ontology stored in the main memory . as we can observe in figure",
    "[ fig : results ] , obda - based solutions show higher overall computation times than the rdb - based solution  from 1 to 2 orders of magnitude  together with an apparently growing trend associated to the time span of the simulation .",
    "however , as we have shown in  @xcite , a trend test performed on the results obtained with the best obda solutions for various kpis , displays no statistically significant increase in the cpu time required to answer various queries with respect to the number of days . considering that for most kpis we can adopt an `` eager '' solution similar to that considered in section  [ fig : results ]",
    ", we can conclude that obda is practically feasible for monitoring medium - to - large scale systems .",
    "in  @xcite we introduced an approach to compile ontology - based descriptions of equipment into diagnostic decision support systems ( ddsss ) .",
    "the tool disegno , whose functional architecture and work - flow is sketched in figure  [ fig : ondamodel ] , fulfills this task in three phases : in the phase , a domain ontology and diagnostic rules model are designed by the user ; in the phase , the system reads and analyzes the ontology and the rules to output the actual ddss ; in the phase , input web services receive data from the observed physical system and record them in the generated data store . according to the iso 13374 - 1 standard",
    "a ddss consists of six modules of which disegno implements three : _ data manipulation _ to perform signal analysis and compute meaningful descriptors , _ state detection _ to check conformity to reference patterns , and _ health assessment _ to diagnose faults and rate the current health of the equipment or process .",
    "as shown in figure  [ fig : ondamodel ] , the ontology description is created by a system architect in the phase .",
    "the ontology must be written using owl 2 ql language as in the case study shown in section  [ sec : ilog ] .",
    "the diagnostic computation model must be a sound actor diagram generated by ptolemy ii  @xcite which describes the processing to be applied to incoming data in order to generated diagnostic events  here we focus on the ontology part , but more details on the rule handling part can be found in  @xcite .",
    "the phase contains the actual ddss generation system which consists of the , i.e. , a piece of software that creates a relational database by mapping the domain ontology to suitable tables , and the , i.e. , a module that creates interface services for incoming and outgoing events .",
    "finally , in the phase , data is acquired and stored in the internal database , the rules engine processes data and generates diagnostic events which are then served to some application .",
    "an example of a disegno - compliant equipment description is shown in figure  [ fig : hvac_onto ] .",
    "the ontology is related to a heating ventilation and air conditioning ( hvac ) appliance and it is divided into a _",
    "static _ and a _ dynamic _ part . in the static part , which is not updated while monitoring",
    ", the ontology contains a description of the observed physical system . in the hvac ontology",
    "we have * system * and * datasource * , related by the * isinsystem * property . * hassubsystem * relationship indicates that one * system * could be composed by one or more * systemcomponent * which are themselves subclasses of * system*. finally , * datasource * is the class of elements that can generate diagnostic - relevant information .",
    "the dynamic part describes _ events _ , including both the ones generated by the observed system and its components , and those output by the ddss . an event is always associated to a time - stamp and it can be either _ incoming _ to the ddss from the observed system , or _",
    "outgoing _ from the ddss .",
    "the main concepts in the dynamic part of the hvac ontology are * ddss * which * receives * instances of * incomingevent * and * sends * instances of * outgoingevent*. notice that * incomingevent * instances are connected to * datasource * instances by the role * generates * , denoting that all incoming events are generated by some data source .",
    "also every * outgoingevent * instance , i.e. , every diagnostic event , * relatesto * some instance of * datasource * , because the end user must be able to reconstruct which data source(s ) provided information that caused diagnostic rules to fire a given diagnostic event .",
    "* outgoingevent * specializes to * alarmevent * , * faultevent * and * descriptorevent*. every * outgoingevent * instance is connected to one of * diagnosticindicator * instances , i.e. * alarm * , * fault * and * descriptor * sub - concepts , by * reports * relation , in order to have a reference message about the diagnostic rules .",
    "+    our latest ontology - based application is in the field of computer - automated design ( cautod ) which differs from `` classical '' computer - aided design ( cad ) in that it is oriented to replace some of the designer s capabilities and not just to support a traditional work - flow with computer graphics and storage capabilities .",
    "nevertheless , cautod programs most often include cad facilities to visualize technical drawings related to the implements of interest .",
    "in particular , our liftcreate program is oriented to automating design of elevators , taking the designer from the very first measurements to a complete project which guarantees feasibility within a specific normative framework .",
    "liftcreate works in three steps . in the first step ,",
    "the user is asked to enter relevant parameters characterizing the project , and an overall `` design philosophy '' to be implemented .",
    "for instance , if the size of the elevator s shaft is known and fixed in advance , liftcreate can generate solutions which maximize payload , door size , or car size .",
    "a design philosophy is just a set of heuristics which , e.g. , prioritize door size over other elements , still keeping into account hard constraints , e.g. , payload and car size should not fall below some threshold . in the second phase",
    ", liftcreate retrieves components from a database of parts and explores the ( combinatorial ) space of potential solutions , either using heuristic search techniques , or resorting to optimizations techniques  like those suggested , e.g. , in  @xcite . in the third phase , a set of feasible designs",
    "is proposed to the user , sorted according to decreasing relevance considering the initial design philosophy .",
    "for instance , if door size is to be maximized , the first alternatives shown to the user are those with the widest doors , perhaps at the expense of payload or car size .",
    "the main issue with liftcreate work - flow is that even simple versions of elevators consists of a large number of components , including car frame , car , doors ( car and landing doors ) , emergency brakes , pistons or cables , motors and control logic . in order to explore the space of potential designs",
    ", components can not be solely available as drawing elements , like in classical cad solutions , but they must be handled as first class data inside liftcreate logic .",
    "this aspect required us to organize the taxonomy related to different kinds of elevators and , for each elevator kind , to structure the components in a part - whole hierarchy . in figure",
    "[ fig : elev_onto ] we show a fragment of the taxonomy for elevators and an example of part - whole structure for a specific elevator kind .",
    "in particular , in figure  [ fig : elev_onto ] ( top ) , we see that liftcreate classifies * elevator * individuals in two main subclasses corresponding to hydraulic - based ( * hydraulicelevator * ) and rope - based ( * ropeelevator * ) designs",
    ". both subclasses feature additional partitions to handle specific design requirements , e.g. , rope elevators can be provided with a reduction gearbox or not , and the drive can be direct of reeved . for one leaf class of the taxonomy , namely * onepistondirecthydraulicelevator",
    "* , in figure  [ fig : elev_onto ] ( bottom ) we show the detailed part - whole diagram , from which we learn that , e.g. , the only peculiar aspects of such subclass is to have only one * piston * , whereas the remaining components are common to * hydraulicelevator * or * elevator*. also we can see that the car frame is specific of hydraulic elevators ( * carframehydra * ) and it is comprised of several parts , including * carrails * , * buffer * and * ropes*. the relationships encoded in such part - whole hierarchy are instrumental to liftcreate when it comes to handle drawing , storage and retrieval of designs , but also to reason about the various trade - offs of a design when searching in the space of potential solutions .",
    "considering the experiences herein outlined , we summarize some lessons learned in applying ontologies for systems engineering .",
    "first and foremost , while ontologies provide an effective tool for conceptualizing scenarios as diverse as those considered , some ontology - based tools , e.g. , dl reasoners , are untenable unless small - to - medium scale systems are considered . in the case of e414 ontology reasoning with an expressive ontology required us to implement strategies to `` forget '' data to avoid cluttering the reasoner . in the ils ontology ,",
    "where sparql queries for kpis are the only reasoning requested and the usage of owl 2 ql profile banned expressive but hard - to - compute constructs , scaling still requires discarding data using a recency approach . on the other hand , in disegno and liftcreate",
    ", ontologies merely provide means for conceptualizing data and , as such , flexibility is gained without sacrificing performances .",
    "the second take - home message is that sublanguages of owl 2 are adequate for most modeling purposes . with the only exception of e414 ontology , the ones herein considered fit owl 2 ql constraints which allowed us to combine in a natural way subclassing ( `` is - a '' relationships ) with other kind of object properties ( including `` has - a '' ) .",
    "however , the fact that owl 2 ql ontologies can be compiled to relational databases  as in the case of disegno  or handled trough an object - persistency module  as in the case of liftcreate  makes their use transparent to other system components .",
    "third , and final point , with the exception of ils monitoring , none of our applications required the integration of different data sources which is indeed one of the main tasks which ontologies are advocated for .",
    "nevertheless , our experience witnesses that even in single - source data modeling , ontologies provide an excellent mean to bridge the gap between domain experts and computer software designers .",
    "cristina  de ambrosi , cristiano ghersi , and armando tacchella .",
    "an ontology - based condition analyzer for fault classification on railway vehicles . in _",
    "22nd int.l conference on industrial , engineering and other applications of applied intelligent systems , iea / aie 2009 , tainan , taiwan , june 24 - 27 , 2009 .",
    "proceedings _ , pages 449458 , 2009 .",
    "giuseppe cicala , marco  de luca , marco oreggia , and armando tacchella . a multi - formalism framework to generate diagnostic decision support systems . in _",
    "30th european conference on modelling and simulation , ecms 2016 , regensburg , germany , may 31 - june 3 , 2016 , proceedings .",
    "_ , pages 628634 , 2016 .",
    "d.  calvanese , g.  de giacomo , d.  lembo , m.  lenzerini , and r.  rosati . .",
    "in _ proceedings of the national conference on artificial intelligence _ , volume  20 , page 602 .",
    "menlo park , ca ; cambridge , ma ; london ; aaai press ; mit press ; 1999 , 2005 .",
    "robin  t. bye , ottar  l. osen , birger  skogeng pedersen , ibrahim  a. hameed , and hans  georg schaathun . a software framework for intelligent computer - automated product design . in _",
    "30th european conference on modelling and simulation , ecms 2016 , regensburg , germany , may 31 - june 3 , 2016 , proceedings .",
    "_ , pages 534543 , 2016 ."
  ],
  "abstract_text": [
    "<S> in recent years ontologies enjoyed a growing popularity outside specialized ai communities . </S>",
    "<S> system engineering is no exception to this trend , with ontologies being proposed as a basis for several tasks in complex industrial implements , including system design , monitoring and diagnosis . in this paper , we consider four different contributions to system engineering wherein ontologies are instrumental to provide enhancements over traditional ad - hoc techniques . for each application </S>",
    "<S> , we briefly report the methodologies , the tools and the results obtained with the goal to provide an assessment of merits and limits of ontologies in such domains . </S>"
  ]
}