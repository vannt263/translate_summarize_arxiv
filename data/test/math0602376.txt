{
  "article_text": [
    "moving mesh methods have been employed widely to approximate solutions of partial differential equations which exhibit large solution variations , such as shock waves and boundary or interior layers .",
    "several moving mesh approaches have been derived and many authors have discussed the significant improvements in accuracy and efficiency that can be achieved with respect to fixed mesh methods @xcite .    the moving mesh pde ( or mmpde ) approach has proven particularly effective in solving nonlinear pdes that exhibit solutions having some type of singularity , such as self - similar blow - up  @xcite or moving fronts  @xcite . for blow - up problems in particular , moving",
    "mesh methods permit a detailed study of the singularity formation with a degree of accuracy and efficiency that is simply not possible using fixed mesh methods .",
    "the primary advantage of the moving mesh approach stems from its ability to exploit special features of the solution ( such as self - similarity ) and build them directly into the numerical scheme .    in the mmpde approach ,",
    "a separate pde is derived to evolve the mesh points in such a way that they tend towards an equidistributed mesh at steady state , in the sense that the mesh points are positioned in space so as to equally distribute some measure of the solution error .",
    "the mmpde is coupled nonlinearly to the physical pde of interest , and both pdes are solved simultaneously .",
    "a key parameter in the moving mesh equation is the _ mesh relaxation time , _ usually denoted as @xmath0 ; the exact equidistribution equation is notoriously ill - conditioned  @xcite and so @xmath0 acts to regularize the mesh evolution in time . the philosophy behind introducing temporal smoothing , instead of equidistributing exactly ,",
    "is that the mesh need not be solved to the same level of accuracy as the physical pde ; in fact , solution accuracy can still be significantly improved over fixed mesh methods by only approximately equidistributing the mesh .    in previous results reported in the literature , the mesh relaxation time is invariably taken to be a constant for any given simulation .",
    "furthermore , huang , ren and russell observed in @xcite that _ `` while the parameter @xmath0 is critical , in our experience the numerical methods are relatively insensitive to the actual choice of @xmath0 in applications , '' _ and similar comments were made in @xcite .",
    "however , it is essential to keep in mind that these observations were made for problems in which the range of time scales present in the solution was fairly limited . in practice",
    ", @xmath0 must be tuned manually to optimize the behaviour of the computed mesh , and sometimes even to obtain a convergent numerical solution .",
    "the main purpose of this paper is to consider situations where taking constant @xmath0 may not be appropriate . keeping in mind that @xmath0 can be interpreted as a time scale for the mesh motion ,",
    "then @xmath0 should in fact be taken as a solution - dependent parameter , because as singularities form , intensify , propagate , and dissipate , the speed of solution variations ( and hence also of the mesh points ) in a given computation may vary a great deal . by no means",
    "are we suggesting that a variable @xmath0 is necessary in all moving mesh calculations .",
    "nonetheless , there is some advantage to be gained by having an algorithm that is capable of determining the value of @xmath0 automatically as part of the solution process without requiring the user to determine its value through trial and error ( since the complicated nonlinear coupling between solution and mesh in the mmpde approach means there is no way to know the value of @xmath0 _ a priori _ ) .",
    "the main purpose of this paper is to demonstrate , by means of specific examples , that varying the mesh relaxation parameter throughout a computation can be of significant advantage in terms of both accuracy and efficiency .",
    "we will present an approach for adaptively selecting @xmath0 in such a way that the temporal evolution of the mesh is optimal in an appropriate sense .",
    "this paper is organized as follows . in section",
    "[ sec : mmpde ] , we briefly review moving mesh methods in which the mesh equation incorporates a relaxation time @xmath0 .",
    "the main motivating example for introducing an adaptive strategy for choosing a time - dependent mesh smoothing parameter comes from a class of nonlinear parabolic equations exhibiting self - similar blow - up behaviour ; we therefore introduce in section [ sec : blowup ] the blow - up model equation , and motivate a particular choice of @xmath1 which is suggested by the analysis of blow - up problems .",
    "numerical experiments are then presented in section [ sec : results ] to illustrate the advantages of this modified moving mesh approach in terms of both accuracy and efficiency .",
    "the evolution of a moving computational grid can be viewed as a discretization of a one - to - one , time - dependent coordinate mapping .",
    "let @xmath2 and @xmath3 denote the physical and computational coordinates respectively , and define a coordinate transformation by @xmath4 where both @xmath2 and @xmath3 are assumed to lie in interval @xmath5 $ ] .",
    "the computational coordinate is discretized on a uniform mesh given by @xmath6 , where @xmath7 and @xmath8 is a positive integer .",
    "the corresponding non - uniform mesh is denoted by @xmath9    a key ingredient of the moving mesh approach is the _ monitor function _ , @xmath10 ) , which is chosen to be some approximate measure of the solution error .",
    "for a given monitor function , the mesh point locations @xmath11 could be required to satisfy the following equidistribution principle ( ep ) for all values of time @xmath12 @xcite : @xmath13 or equivalently @xmath14 where @xmath15 .",
    "this ep is intended to concentrate points in regions where @xmath16 ( and hence also the solution error measure ) is large , thereby placing fewer points in areas where the error is small .",
    "differentiating ( [ eq : ep ] ) yields an equivalent differential form @xmath17 where @xmath18 and @xmath19 .    solving the elliptic equation ( [ eq : mmesh ] )",
    "directly is often problematic , since it introduces a nonlinear coupling between the mesh and the solution through the dependence of @xmath16 on the solution @xmath20 .",
    "furthermore , when the physical and mesh pdes are discretized , they take the form of an index-2 dae system which is very stiff in practice and also typically ill - conditioned  @xcite . as a result , it is usually much more attractive to relax the requirement of exact equidistribution by introducing a relaxation time @xmath0 into the problem .",
    "a dynamic moving mesh equation can be derived by requiring the mesh to satisfy the above ep at a later time @xmath21 instead of at @xmath12 .",
    "because @xmath22 has been eliminated from the differential form of the ep , the mesh must satisfy @xmath23 = 0 .",
    "\\label{eq : mmesh - tau}\\end{gathered}\\ ] ] by expanding the terms @xmath24 and in taylor series and dropping certain higher order terms , a variety of different mmpdes can be derived @xcite . in this paper",
    "we will employ two specific moving mesh equations : @xmath25 the relaxation parameter @xmath0 can also be thought of as introducing _",
    "temporal smoothing _ into the mesh .",
    "the equivalent derivation for a time - dependent @xmath1 is given in appendix  [ sec : taylor ] .",
    "the choice of monitor function @xmath16 in this method is somewhat arbitrary ; in general , @xmath16 can be any given function of @xmath20 , or it may also be based on some error estimate determined numerically based on discrete solution values .",
    "a commonly used monitor function is @xmath26 , which equidistributes the arclength of the solution @xmath20 .",
    "however , this choice of @xmath16 often behaves very badly in simulations , concentrating too many points in singularities and making the coupled problem excessively stiff  @xcite .",
    "other common monitor function are chosen either for analytical reasons ( such as the form @xmath27 for self - similar blow - up problems @xcite ) or for practical considerations ( such as the component - averaged monitor developed in @xcite for hyperbolic systems ) .    in this work ,",
    "we discretize the mesh equation using centered finite differences in space , which yields for mmpde6 :    [ eq : discrete - mmpde ] @xmath28 the quantity @xmath29 represents a centered approximation to the term on the right hand side of mmpde6 given by @xmath30    where @xmath31 , @xmath32 , and @xmath33 is an approximation of the solution at grid point @xmath34 .",
    "the discretization for mmpde4 , which is also employed here , is carried out in a similar fashion .",
    "it turns out to be very important to smooth the monitor function in space as well as in time in order to avoid oscillatory errors in mesh locations which can then feed into the solution . to this end ,",
    "the discrete monitor function values @xmath35 are usually replaced with smoothed versions @xmath36 where @xmath37 and @xmath38 are parameters that must be chosen appropriately .      because of the importance of temporal smoothing in the present work , it is helpful to first consider some illustrative examples that elucidate the effect of @xmath0 on the computed mesh motion . for this purpose",
    ", we consider first three examples wherein @xmath39 is a given function , so that the mesh equation is uncoupled from the physical pde .",
    "we first consider @xmath40 for values of @xmath41 $ ] and @xmath42 $ ] , which was used in @xcite to study the stability of various moving mesh equations , and also as a numerical example in @xcite .",
    "the mesh equation is chosen to be mmpde6 , which is discretized using standard centered finite differences . for the purposes of this example , we use the arclength monitor function @xmath26 with spatial smoothing parameters @xmath43 and @xmath44 .",
    "the spatial domain is divided into @xmath45 mesh points and the value of @xmath0 is taken to be a constant ranging from @xmath46 down to @xmath47 .",
    "the mesh points are initially uniformly distributed , so that the mesh undergoes a rapid initial transient as the grid points are driven towards equidistribution by the mmpde .",
    "the speed of this initial transient is governed by the choice of the mesh relaxation time parameter . also",
    ", since @xmath48 in the limit as @xmath49 , then for the arclength monitor @xmath50 as @xmath51 ; therefore , the equidistributed mesh should tend over long times to a uniform mesh in space .",
    "figure [ fig1u ] shows solution curves and figure [ fig1 ] the mesh trajectories ( i.e. , contours of @xmath52 ) for the above example using mmpde6 and a uniform initial mesh .",
    "these results demonstrate a few important points .",
    "first , the ability of the moving mesh to respond to rapid solution transients ( in this case represented by the initial transient mesh redistribution ) is governed in large part by the choice of @xmath0 .",
    "in particular , if @xmath0 is taken too large , then the mesh is incapable of adapting sufficiently well to keep up with the solution , which is easily seen here in the case @xmath53 .",
    "secondly , once @xmath0 is taken small enough , there is no longer any significant change in the mesh locations , as seen by comparing the mesh trajectories when @xmath54 and @xmath55 ( ignoring the initial transients which are not physical but driven solely by the artificially chosen initial uniform mesh ) .",
    "when @xmath0 is taken smaller than @xmath47 there is no visible change in either the computed mesh or the time stepping behaviour .    ) used in example 1 ( left ) and ( [ eq : ugiven2 ] ) from example 2 ( right).,title=\"fig:\",scaledwidth=45.0% ] ) used in example 1 ( left ) and ( [ eq : ugiven2 ] ) from example 2 ( right).,title=\"fig:\",scaledwidth=45.0% ]    [ c][b]@xmath2 [ bc][c]@xmath12 [ bc][c]@xmath56    [ cols=\"^,^,^ \" , ]     when @xmath0 is taken as large as @xmath57 , there is clearly sufficient smoothing in the mesh that a significant number of mesh points transfer outside the blow - up region . as @xmath0",
    "is reduced in size , the mesh is closer to being equidistributed and the resolution of the blow - up peak is much sharper . however",
    ", this higher concentration of mesh points comes at the expense of a stiffer mesh equation , as evidenced by a reductions in the allowable time step in ddassl and numerous time step failures .",
    "as before , once @xmath0 is taken smaller than @xmath47 , there is no longer any visible difference in the computed solution .",
    "[ [ remark . ] ] remark .",
    "+ + + + + + +    the limitations on @xmath0 indicated in the above three examples are problem - dependent . until the present time , all moving mesh calculations appearing in the literature have been performed with a constant value of @xmath0 which in practice must essentially be chosen by trial and error . because @xmath0 represents a time scale for the mesh evolution , it is not appropriate to take @xmath0 constant when the solution undergoes rapid changes that require the mesh to respond on very different time scales , such as might occur in the case of blow - up or shock motion with highly variable front speeds . in these situations",
    ", it makes much more sense to vary @xmath0 over time in a way that adapts the mesh throughout a computation so as to respond over a suitable time scale to changes in the solution .",
    "we will examine the issue of choosing an appropriate form of @xmath1 in the context of blow - up problems , which are described further in the next section .",
    "an ideal class of problems with which to examine the behaviour of moving mesh methods is that which models blow - up phenomena .",
    "one of the simplest equations in this class , and one which will form the basis of most of the numerical simulations presented in this paper , is the following nonlinear diffusion equation of parabolic type @xcite :    [ eq : blowup ] @xmath58    this equation models , for example , the temperature in a reacting medium .",
    "it is well - known @xcite that if @xmath59 is sufficiently large , positive , and has a single non - degenerate maximum , then there is a blow - up time @xmath60 and a unique blow - up point @xmath61 such that @xmath62 that is , even when there are smooth initial data the solution becomes unbounded at an isolated point @xmath61 in finite time .",
    "other forms of the nonlinear term in ( [ eq : blowup1 ] ) will also lead to blow - up ( for example , with the nonlinear term @xmath63 replaced by @xmath64 ) but the polynomial form is particularly convenient for our purposes because of its scaling properties , which we describe next .",
    "this equation has been very well - studied in the mathematical literature and the solutions are known to exhibit self - similar behaviour . in particular ,",
    "if we define @xmath65 , then the solution has a self - similar profile which blows up according to @xmath66 asymptotically as @xmath67  @xcite .",
    "this information was used by budd  @xcite as part of a scaling argument to show that the mmpde corresponding to the blow - up problem ( [ eq : blowup ] ) is also scale - invariant if the monitor function is chosen to be @xmath68 .",
    "they then presented a series of numerical simulations which showed that the mmpde method is capable of reproducing the self - similar solution profiles in a more accurate and stable manner than is possible with other more common choices of monitor function such as arclength .    an essential observation made in @xcite , which has particular importance for this paper ,",
    "is that the mesh in the mmpde method has a natural time scale that is determined by scaling arguments .",
    "if the scale - invariant monitor function @xmath68 is employed in calculations , then we know from ( [ eq : uasympt ] ) that @xmath69 asymptotically as @xmath67 .",
    "it is then straightforward to show that the mesh has a natural time scale of motion which is determined by the choice of the mmpde ; in particular ,    @xmath70    budd  argue in the first case that when @xmath0 is taken to be a constant , the ability of the mesh to react to changes in the solution is limited by the lower bound @xmath0 on the mesh time scale and so mmpde4 does not allow the mesh to evolve all the way into the blow - up . in other words ,",
    "once @xmath71 , the mesh will no longer evolve rapidly enough to keep up with the solution . on the other hand",
    ", mmpde6 does allow the mesh to evolve even when @xmath12 is close to @xmath72 , because of the extra factor of @xmath73 appearing in @xmath74 .",
    "this hypothesis regarding the superiority of mmpde6 over mmpde4 for the blow - up problem ( [ eq : blowup ] ) is borne out in computations  @xcite where mmpde6 is capable of capturing the self - similar solution profile much further into blow - up than mmpde4 .",
    "our main claim in this paper is that requiring a small , constant value of @xmath0 can introduce unnecessary stiffness in the moving mesh pde . in the case of solutions to ( [ eq : blowup ] )",
    ", blow - up occurs at a point @xmath61 which is stationary , and so there is an initial transient mesh motion in which mesh points race into the blow - up region , after which the mesh points are relatively stationary even though the solution @xmath20 and the monitor function @xmath16 are both increasing rapidly .",
    "it is therefore natural to suggest that capturing the initial mesh transients may require a small initial value of @xmath0 , but that @xmath0 can be significantly increased later on in the blow - up process at little risk of negatively impacting the accuracy of the mesh locations .",
    "recalling the examples considered in section  [ sec : tau - ex ] , we reiterate that decreasing @xmath0 allows the mesh to react to solution changes more rapidly , but also introduces additional stiffness into the mmpde ; conversely , increasing @xmath0 speeds up the computations but may unnecessarily smooth out the mesh and adversely affect solution accuracy . adapting @xmath0 as described above should therefore act to minimize the stiffness in the mmpde in later stages of blow - up and so decrease computational cost .    with this in mind , we propose the following solution - adaptive strategy for choosing @xmath0 :    * set @xmath75 ,   where @xmath76 is a constant . *",
    "choose @xmath77 , { { \\tau}_{\\text{{\\em max } } } } \\right)$ ] , which forces @xmath0 to lie in the interval @xmath78 $ ] .",
    "this ensures that the mesh time scale @xmath74 is small in the initial stages of blow - up , but increases to @xmath79 later on when the mesh velocities are much smaller .",
    "it is important to point out that this strategy is applicable _ only _ to blow - up problems with self - similar structure of this sort , and not for more general situations .",
    "there are a number of other approaches for selecting an appropriate mesh time scale which have been developed in the context of other moving mesh methods ( see @xcite ) .",
    "however , we have found that neither of these approaches is effective for the blow - up problems under consideration here .",
    "we now consider a number of computational examples in which the mesh equation is coupled with the physical pde .",
    "when the blow - up problem ( [ eq : blowup ] ) is transformed into a moving coordinate system , it can be written in the following form @xmath80 we employ a method - of - lines approach in which this equation is discretized with second order spatial accuracy using centered finite differences to obtain the following equation for the solution values @xmath81 : @xmath82 where the `` dot '' refers to a time derivative .",
    "the resulting coupled system of nonlinear odes which governs the mesh and solution , ( [ eq : discrete - mmpde ] ) and ( [ eq : discrete - pde ] ) , is then integrated in time using the stiff ode solver ddassl  @xcite with a finite difference jacobian . unless indicated otherwise",
    ", we use absolute and relative error tolerances of @xmath83 .",
    "homogeneous boundary conditions are imposed so that @xmath84 , and we take the initial solution profile @xmath85 .",
    "the initial mesh , @xmath86 is determined by equidistributing based on the initial conditions .",
    "computations are performed using blow - up exponents @xmath87 and @xmath88 , and the monitor function is taken to be @xmath89 , which preserves scaling invariance of the mesh .",
    "the variable @xmath0 simulations are performed using @xmath90 ( that is , @xmath91 ) and then enforcing that @xmath0 lie in the interval @xmath92 $ ] .",
    "one aim of these computations is to compute as far into blow - up as possible and to obtain the best possible estimate of the blow - up time @xmath72 . in all our simulations",
    ", we compute as far as ddassl will allow , up until such time as the solver fails ( which in practice manifests itself as a time step selection failure ) .",
    "since no exact analytical solution is available for this problem , it is difficult to assess the accuracy of a given computed solution . in this paper , we employ a number of qualitative and quantitative measures to compare the accuracy of the computed solutions :    * the termination time ( as an estimate of @xmath72 ) is compared to the blow - up time determined from a highly - resolved calculation , which gives a combined measure of the accuracy of the solution and the mesh . in particular , our best estimates of the blow - up times are @xmath93   for @xmath87 and @xmath94   for @xmath88 , both of which are calculated with @xmath95 points , variable @xmath0 with @xmath91 , and ddassl error tolerances of @xmath96 . * the value of @xmath97 , which is an indirect measure of solution accuracy , that represents how far the code is capable of computing into the singularity .",
    "ideally , we aim for @xmath98 to be as large as possible . *",
    "the self - similarity of the various solution profiles computed over time is most easily determined by comparing directly to the following asymptotic formula derived in @xcite : @xmath99    the computational cost of all subsequent simulations is compared by measuring the elapsed cpu time on a 3 ghz intel xeon machine .",
    "we begin first by simulating the blow - up problem ( [ eq : blowup ] ) with @xmath87 .",
    "for all computations in this section , we have not performed any mesh smoothing ( i.e. , @xmath100 ) in order to ensure that the computed solution and mesh are as close to the similarity solution as possible . the solution and",
    "mesh contour plots for @xmath101 points are displayed for a constant value of @xmath55 in figure  [ fig : p2const ] .",
    "the various solution profiles correspond to a sequence of snapshots at times where @xmath102 , @xmath103 .",
    "the plot of @xmath104 demonstrates how mmpde6 with the monitor @xmath105 is capable of capturing the self - similar nature of the solution .",
    "[ c][b]@xmath3 [ bc][c]@xmath104 [ c][b]@xmath106 [ bc][c]@xmath2   and @xmath55 in the case @xmath87 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]   and @xmath55 in the case @xmath87 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]    to illustrate the effect of the choice of mmpde on the solution , we have also displayed the results for the same input data using mmpde4 in figure  [ fig : p2const - mmpde4 ] .",
    "this computation is clearly incapable of maintaining grid resolution within the blow - up peak ; in fact , by the end of the calculation , the mesh degenerates to the extent that there remains only a single grid point left to resolve the peak .",
    "furthermore , this simulation fails at time @xmath107 , which is a much less accurate estimate of the blow - up time than in the mmpde6 calculations , as we will see shortly .",
    "consequently , mmpde6 is employed in the remainder of the simulations in this paper .",
    "[ c][b]@xmath3 [ bc][c]@xmath104 [ c][b]@xmath106 [ bc][c]@xmath2 .,title=\"fig:\",scaledwidth=40.0% ] .,title=\"fig:\",scaledwidth=40.0% ]    we next consider the effect of varying the mesh relaxation parameter @xmath0 by selecting two constant values ( @xmath108 and @xmath47 ) as well as varying @xmath0 according to our strategy outlined in section  [ sec : varytau ] . the variable @xmath0 results are presented for comparison purposes in figure  [ fig : p2var ] .",
    "there is clearly some loss of self - similarity in the solution profile relative to the constant @xmath0 simulations , which leads to considerably more mesh points being located outside the blow - up peak ; however , the peak is still reasonably well - resolved , and there are indeed a number of other reasons that the variable-@xmath0 results are superior , which we discuss next .",
    "[ c][b]@xmath3 [ bc][c]@xmath104 [ c][b]@xmath106 [ bc][c]@xmath2   and variable @xmath0 in the case @xmath87 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]   and variable @xmath0 in the case @xmath87 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]    first , we performed a grid refinement study by varying @xmath8 between 40 and 600 , and compared the estimated blow - up times for all choices of @xmath0 in figure  [ fig : p2tstar ] .",
    "first of all , the constant @xmath55 result with @xmath109 points is consistent with the value of @xmath110 reported in @xcite .",
    "the @xmath108 results require the least cpu time because such excessive temporal smoothing acts to reduce the stiffness in the mesh equation ; however , the estimate of @xmath72 is much less accurate and does not converge to the correct blow - up time as the other simulations do . among the remaining results ( @xmath55 and @xmath0 variable ) , there is no visible difference in the blow - up time seems to suggest no advantage in terms of accuracy .",
    "[ bc][c]@xmath72 [ c][b]@xmath8 [ bc][c]_cpu secs . _   in the case @xmath87 .",
    "the best estimate of the exact value of @xmath93 is shown as a dashed line.,title=\"fig:\",scaledwidth=40.0% ]   in the case @xmath87 .",
    "the best estimate of the exact value of @xmath93 is shown as a dashed line.,title=\"fig:\",scaledwidth=40.0% ]    nonetheless , the variable @xmath0 approach is still capable of computing further into the blow - up peak as evidenced by the maximum solution value @xmath98 : for @xmath55 , all values of @xmath98 lie between @xmath111 and @xmath112 while for the variable @xmath0 computations @xmath98 is always above @xmath113 at the end time .",
    "there is only a slight loss of self - similarity in the variable @xmath0 calculation , which can be seen by comparing the solution with the asymptotic profile ( [ eq : ucos ] ) , displayed as a dashed line in figures  [ fig : p2const][fig : p2var ] .",
    "the primary advantage of the variable @xmath0 approach is in terms of efficiency , owing to the enhancement in temporal smoothing that occurs close to the blow - up time .",
    "the cpu time required in the variable @xmath0 case is consistently smaller by at least a factor of three relative to the constant @xmath0 computations , as depicted in figure  [ fig : p2tstar ] .",
    "the variation of @xmath0 with time is shown in figure  [ fig : p2var - tau ] , which demonstrates a nearly linear dependence as the blow - up point is approached . as a result",
    ", we can think of the variable @xmath0 algorithm as keeping the mesh relaxation time small when it is most needed ( at the time when the blow - up peak is first forming ) , but then introducing significant temporal smooting closer to the blow - up time when the mesh equation is most stiff , even though the mesh points themselves are not moving appreciably .",
    "[ bc][c]@xmath0 [ c][b]@xmath106 , for the same parameters as for the @xmath87 problem with variable @xmath0.,title=\"fig:\",scaledwidth=40.0% ]    in summary , the use of a variable @xmath0 permits a more accurate computation of both the blow - up time and the solution evolution , while still maintaining a reasonable degree of self - similarity in the solution , and all this at a significant savings in computational cost .",
    "the primary reason for the improvement in performance is the reduction in stiffness of the moving mesh pde which results from allowing the mesh relaxation time to vary .",
    "the @xmath88 blow - up problem constitutes a more difficult computational problem , and so we consider it a more stringent test of our moving mesh approach .",
    "in this case , as in  @xcite , we had to introduce mesh smoothing ( @xmath43 , @xmath44 ) in order to ensure stability of the mesh equation .",
    "proceeding as we did in the previous section , we compare the @xmath55 results to those for variable @xmath0 , and the results are depicted in figures  [ fig : p5const ] and [ fig : p5var ] .    [ c][b]@xmath3 [ bc][c]@xmath114 [ c][b]@xmath106 [ bc][c]@xmath2   blow - up solution profiles ( left ) and mesh contours ( right ) for fixed @xmath55 with @xmath101 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]   blow - up solution profiles ( left ) and mesh contours ( right ) for fixed @xmath55 with @xmath101 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]    [ c][b]@xmath3 [ bc][c]@xmath114 [ c][b]@xmath106 [ bc][c]@xmath2   blow - up solution profiles ( left ) and mesh contours ( right ) for variable @xmath0 in the case @xmath101 . the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]   blow - up solution profiles ( left ) and mesh contours ( right ) for variable @xmath0 in the case @xmath101 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]    the constant @xmath0 computation exhibits oscillations in the solution which cause the integration to fail due to numerical instability .",
    "the variable-@xmath0 results , on the other hand , show no such instability , although the deviation from self - similarity is more significant than in the @xmath87 case .",
    "nonetheless , the mesh points are still reasonably well - clustered within the blow - up peak .",
    "there is a similar three - fold improvement in efficiency with the variable @xmath0 approach ( see figure  [ fig : p5tstar ] ) although in this case the cpu times are nt as meaningful because the constant @xmath0 computations fail owing to mesh instability .",
    "again , we see the superiority of our adaptive approach for solving blow - up problems .    the estimated blow - up times are plotted in figure  [ fig : p5tstar ] , which demonstrate further the instability experienced with the constant @xmath0 computations .",
    "the blow - up time for the variable @xmath0 result converges nearly monotonically and we claim it is a much more accurate estimate of the actual blow - up time for the @xmath88 calculation .",
    "[ bc][c]@xmath72 [ c][b]@xmath8 [ bc][c]_cpu secs . _ .",
    "the best estimate of @xmath115 ( computed with @xmath95 points and increased ddassl  tolerances ) is shown as a dashed line.,title=\"fig:\",scaledwidth=40.0% ] .",
    "the best estimate of @xmath115 ( computed with @xmath95 points and increased ddassl  tolerances ) is shown as a dashed line.,title=\"fig:\",scaledwidth=40.0% ]      the following blow - up problem with an exponential nonlinearity @xmath116 was also considered in @xcite and is an even more difficult test of the moving mesh method .",
    "the appropriate monitor function to use in this case is @xmath117 , and in analogy with the derivation of ( [ eq : ucos ] ) , there exists an asymptotically self - similar profile @xmath118 we start with initial data @xmath119 , and use mmpde6 with spatial smoothing parameter @xmath44 .    the results for @xmath101 mesh points are displayed in figures  [ fig : euconst ] and  [ fig : euvar ] .",
    "there is a slight loss of self - similarity in both cases owing to the introduction of spatial smoothing , but the difference between the two solutions is minimal .",
    "the primary difference is in terms of efficiency , where the variable-@xmath0 simulation requires consistently 30%  less cpu time than for fixed @xmath0 .",
    "this is not as dramatic an improvement as for the polynomial blow - up examples considered in the previous two sections , as can be seen in figure  [ fig : eucpu ] , but it is still a significant improvement .",
    "[ c][b]@xmath3 [ bc][c]@xmath120 [ c][b]@xmath106 [ bc][c]@xmath2    with @xmath101 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]    with @xmath101 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]    [ c][b]@xmath3 [ bc][c]@xmath120 [ c][b]@xmath106 [ bc][c]@xmath2   in the case @xmath101 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]   in the case @xmath101 .",
    "the self - similar profile is displayed as a dashed line for comparison.,title=\"fig:\",scaledwidth=40.0% ]    [ c][b]@xmath8 [ bc][c]_cpu secs . _",
    "in this paper , we have considered a moving mesh approach for solving self - similar blow - up problems .",
    "the novelty of this method stems from its use of a solution - dependent mesh relaxation time , @xmath0 .",
    "we have proposed a strategy for selecting @xmath0 in the context of self - similar blow - up problems .",
    "numerical simulations demonstrate that by varying the relaxation time in an appropriate way , the solution can be computed more accurately , further into the blow - up , and more efficiently than would otherwise be possible with a constant value of @xmath0 .",
    "because our strategy for adapting @xmath0 is specific to problems of blow - up type , we plan in the future to extend these results by generalizing them to a more generic class of problems .",
    "we intend to investigate other nonlinear parabolic problems that exhibit more general blow - up behaviour ( such as the generalized korteweg - de vries or gierer - meinhardt equations ) as well as problems with moving fronts .",
    "we briefly redo the analysis from @xcite for time - dependent @xmath1 .",
    "we begin with ( [ eq : mmesh - tau ] ) and perform a taylor series expansion for small @xmath0 to obtain : @xmath121 substituting these expressions into ( [ eq : mmesh - tau ] ) we obtain the corresponding equations for mmpde4 and mmpde6 respectively : @xmath122 notice that relative to ( [ eq : mmpde4 ] ) and ( [ eq : mmpde6 ] ) , the only change here is an extra factor of @xmath123 which simply scales @xmath0 . therefore a time - dependent @xmath0 has a minimal impact on the moving mesh equation .                c. j. budd ,",
    "j. chen , w. huang , and r. d. russell , moving mesh methods with applications to blow - up problems for pdes , in : d. f. griffiths and g. a. watson ( eds . ) , _ proceedings of 1995 biennial conference on numerical analysis , _ pitman research notes in mathematics vol .",
    "344 , addison wesley , 1996 , pp ."
  ],
  "abstract_text": [
    "<S> we propose a moving mesh adaptive approach for solving time - dependent partial differential equations . </S>",
    "<S> the motion of spatial grid points is governed by a moving mesh pde ( mmpde ) in which a _ mesh relaxation time _ @xmath0 is employed as a regularization parameter . previously reported results on mmpdes have invariably employed a constant value of the parameter @xmath0 . </S>",
    "<S> we extend this standard approach by incorporating a variable relaxation time that is calculated adaptively alongside the solution in order to regularize the mesh appropriately throughout a computation . </S>",
    "<S> we focus on singular problems involving self - similar blow - up to demonstrate the advantages of using a variable relaxation time over a fixed one in terms of accuracy , stability and efficiency .    </S>",
    "<S> _ ams classification : _ </S>",
    "<S> 65m50 , 65m06 , 35k57    and    moving mesh method ; self - similar blow - up ; relaxation time </S>"
  ]
}