{
  "article_text": [
    "in 1962 bchi was the first to introduce finite automata on infinite words .",
    "he needed them to solve some fundamental decision problems in mathematics and logic ( @xcite , @xcite @xcite ) .",
    "they became a popular area of research due to their elegance and the tight relation between automata on infinite objects and monadic second - order logic .",
    "nowadays , automata are seen as a very useful tool in verification and specification of nonterminating systems .",
    "this is why the complexity of problems concerning automata has recently been considered a hot topic ( e. g. @xcite , @xcite ) .",
    "to serve different applications , different types of automata were introduced . in his proof of the decidability of the satisfiability of s1s ,",
    "bchi introduced nondeterministic automata on infinite words ( nbw ) , which are a natural tool to model things that happen infinitely often . in a bchi automaton ,",
    "some of the states are _ accepting _ and a run on an infinite word is accepting if and only if it visits some accepting state infinitely often ( @xcite ) .",
    "dually , a run of co - bchi automaton ( ncw ) is accepting if and only if it visits non - accepting states only finitely often",
    ". there are also automata with more complicated accepting conditions  most well known of them are parity automata , street automata , rabin automata and muller automata .    as in the case of finite automata on finite words ,",
    "four basic types of transition relation can be considered : _",
    "deterministic , nondeterministic , universal _ and _ alternating_. * in this paper , from now on , we only consider nondeterministic automata*.    the problem of comparing the power of different types of automata is well studied and understood .",
    "for example it is easy to see that not every language that can be recognized by a bchi automaton on infinite words ( such languages are called @xmath4-regular languages ) can be also recognized by a co - bchi automaton .",
    "the most popular example of @xmath4-regular language that can not be expressed by ncw is the language @xmath5 has infinitely many 0s@xmath6 over the alphabet @xmath7 . on the other hand ,",
    "it is not very hard to see that every language that can be recognized by a co - bchi automaton is @xmath4-regular .",
    "as we said , the problem of comparing the power of different types of automata is well studied .",
    "but we are quite far from knowing everything about the number of states needed to simulate an automaton of one type by an automaton of another type ",
    "see for example the survey @xcite to learn about the open problems in this area .",
    "in this paper we consider the problem of the cost of simulating a bchi automaton on infinite words by a co - bchi automaton ( if such ncw exists ) , left open in @xcite : given a number @xmath8 , for what @xmath9 can we be sure that every nondeterministic bchi automaton with no more than @xmath0 states , which can be simulated by a co - bchi automaton , can be simulated by a co - bchi automaton with at most @xmath9 states ?    there is a large gap between the known upper bound and the known lower bound for such a translation .",
    "the best currently known translation goes via intermediate deterministic street automaton , involving exponential blowup of the number of states ( @xcite , @xcite ) .",
    "more precisely , for nbw with @xmath0 states , we get ncw with @xmath10 states . for a long time",
    "the best known lower bound for @xmath11 was nothing more than the trivial bound @xmath0 . in 2007",
    "it was shown that there is an nbw with equivalent ncw such that there is no ncw equivalent to this nbw on the same structure ( @xcite ) .",
    "the first non - trivial ( and the best currently known ) lower bound is linear  the result of @xcite is that , for each @xmath8 , there exists a nbw with @xmath0 states such that there is a @xmath12 which recognizes the same language , but every such @xmath12 has at least @xmath13 states .",
    "there is a good reason why it is hard to show a lower bound for the above problem .",
    "the language ( or rather , to be more precise , class of languages ) used to show such a bound has to be hard enough to be expressed by a co - bchi automaton , but on the other hand not too hard , because some ( actually , most of ) @xmath4-regular languages can not be expressed by ncw at all .",
    "the idea given in the proof of @xmath13 lower bound in @xcite , was to define a language which can be easily split into parts that can by recognized by a nbw but can not by recognized by a ncw .",
    "the language they used was @xmath14 both @xmath15 and @xmath16 appear at least @xmath17 times in @xmath18 .",
    "let @xmath19 appears infinitely often in @xmath20 and @xmath21 appear at least @xmath17 times in @xmath18 , then it is easy to see that @xmath22 , @xmath23 can be recognized by bchi automata of size @xmath17 and @xmath23 can not by recognized by any co - bchi automaton .",
    "it is still , however , possible to built a ncw that recognizes @xmath24 with @xmath25 states and indeed , as it was proved in @xcite , every ncw recognizing @xmath24 has at least @xmath26 states .      in this paper",
    "we give a strong improvement of the lower bound from @xcite .",
    "we show that , for every integer @xmath17 , there is a language @xmath24 such that @xmath24 can be recognized by an nbw with @xmath27 states , whereas every ncw that recognizes this language has at least @xmath28 states . actually , the smallest ncw we know , which recognizes @xmath24 , has @xmath29 states , and we believe that this automaton is indeed minimal . in the terms of function @xmath11 from the above subsection",
    "this means that @xmath11 equals at least @xmath30 for some @xmath2 ( this is since @xmath0 is @xmath27 ) and , if our conjecture concerning the size of a minimal automaton for @xmath24 is true , @xmath11 would equal at least @xmath31 for some constant @xmath2 .",
    "the technical part of of this paper is organized as follows .",
    "in subsection [ preliminaria ] we give some basic definitions . in subsection [ lk ] the definition of the language @xmath24 is presented .",
    "also in this section we show how this language can be recognized by a bchi automaton with @xmath32 states and how @xmath24 can be recognized by a co - bchi automaton with @xmath33 states . the main theorem , saying that every co - bchi automaton that recognizes @xmath24 has at least @xmath28 states is formulated in the end of subsection [ lk ] and the rest of the paper is devoted to its proof .",
    "a _ nondeterministic @xmath4-automaton _ is a quintuple @xmath34 , where @xmath35 is an alphabet , @xmath36 is a set of states , @xmath37 is an initial state , @xmath38 is a transition relation and @xmath39 is an accepting condition .",
    "depending on type of the automaton we we have different definitions of _ accepting run_. for a bchi automaton , a run is accepting , if it visits some state from accepting condition @xmath45 infinitely often . in the case of a co - bchi automaton ,",
    "a run is accepting , if only states from the set @xmath45 are visited infinitely often in this run . for a given nondeterministic @xmath4-automaton @xmath46 and a given word @xmath20",
    ", we say that @xmath46 _ accepts _",
    "@xmath20 if there exists an accepting run of @xmath46 on @xmath20 .",
    "the words accepted by @xmath46 form the language of @xmath46 , denoted by @xmath47 .",
    "we say that a co - bchi automaton @xmath48 is in the * normal form * iff for each @xmath49 if @xmath50 is in @xmath45 , then also @xmath51 is in @xmath45 .",
    "note that for a given ncw @xmath52 the automaton @xmath53 , where @xmath54 and @xmath55 is in the normal form , recognizes the same language and has at most @xmath56 states .",
    "an accepting run @xmath60 on a word @xmath57 of a co - buchi automaton in the normal form is called _ shortest _ , if it reaches an accepting state as early as possible , that is if for each accepting run @xmath61 of this automaton on @xmath20 it holds that if @xmath62 then also @xmath63 .",
    "let us begin with the following informal interpretation of words over @xmath67 .",
    "each symbol @xmath68 should be read as `` agent @xmath69 makes a promise '' . each symbol @xmath70 should be read as `` @xmath69 fulfills his promise '' .",
    "the language @xmath24 consists ( roughly speaking ) of the words in which there is someone who at least @xmath71 times fulfilled his promises , but there are also promises which were never fulfilled .        * @xmath76  if @xmath77 and @xmath78 occurs in @xmath79 $ ] ; ( it is the fulfillment that counts , not a promise ) . * @xmath80 if @xmath77 and @xmath78 does not occur in @xmath79 $ ] ; ( unfulfilled promises are read as 0 ) .",
    "* suppose @xmath81 for some @xmath82 .",
    "then @xmath83 if there is @xmath84 such that @xmath85 and @xmath86 does not occur in the word @xmath87 $ ] , and @xmath88 if there is no such @xmath69 ( one first needs to make a promise , in order to fulfill it ) .",
    "it is easy to see that each @xmath72 satisfies at least one of the following three conditions : there is @xmath82 such that @xmath83 for infinitely many numbers @xmath91 , or there are infinitely many occurrences of @xmath15 in @xmath89 , or there is only a finite number of occurrences of symbols from @xmath94 in @xmath20 . using this observation , we can represent @xmath24 in the following way :      keeping in mind the above representation , it is easy to build a small nbw recognizing @xmath24 ( see figures [ f - nbw ] , [ f - ai ] and [ f - bij - buchi ] ) .",
    "the accepting state on the bottom left of figure [ f - nbw ] checks if condition ( [ noinf ] ) is satisfied , and the other states ( except of the states in the boxes @xmath96 and of the initial state ) check if the condition ( [ inf1 ] ) is satisfied .",
    "reading the input @xmath97 the automaton first guesses the number @xmath69 from condition ( [ inf1 ] ) and makes sure that @xmath69 occurs at least @xmath71 times in @xmath98 .",
    "then it guesses @xmath91 from condition ( [ inf1 ] ) , accepts , and remains in the accepting state forever , unless it spots @xmath99 .",
    "this part of the automaton works also correctly for the co - bchi case .",
    "the most interesting condition is ( [ inf0 ] ) .",
    "it is checked in the following way . at first",
    ", the automaton waits in the initial state until it spots @xmath91 from condition ( [ inf0 ] ) .",
    "then , it goes to @xmath96 , guesses @xmath69 and goes to the module @xmath100 , which checks if @xmath91 does not occur any more , and if both @xmath69 and @xmath101 occur infinitely often .",
    "this can be summarized as :      condition ( [ inf0 ] ) can not be checked by any ncw .",
    "however , it can be replaced by the condition @xmath102 which leads us to a ncw as on figures [ f - nbw ] , [ f - ai ] and [ f - bij - cobuchi ] . in this case , automaton @xmath100 needs to count to @xmath71 , so it needs @xmath103 states .",
    "therefore , the whole ncw automaton has @xmath104 states . actually , we believe that every ncw recognizing @xmath24 indeed needs @xmath104 states .",
    "the rest of this paper is devoted to the proof of this theorem . in subsection [ disjoint ] we will define , for each co - bchi automaton in the normal form , recognizing @xmath24 a family of @xmath17 disjoint sets of states , and in subsection [ mtheorem ] we will show that each such set has at least @xmath106 states . as we have seen in subsection [ preliminaria ] , for a given ncw with @xmath0 states we can always build a ncw in the normal for with at most @xmath107 states , which finally leads to @xmath108 lower bound .",
    "words @xmath119 will be the main tool in our attempt to fool the automaton if it has too few states so let us comment on their structure .",
    "first notice , that the @xmath91 , the very first symbol of @xmath119 , will turn into the only @xmath15 in @xmath89  this is , among other reasons , since for all @xmath120 the symbol @xmath121 occurs infinitely many times in @xmath20 .",
    "see also that if we replaced the blocks @xmath122 in the definition of @xmath119 by just a single @xmath69 , then the word would still be in @xmath24  since we do not count promises but fulfillments , the remaining @xmath69 s are almost redundant .",
    "it is only in the proof lemma [ observations](ii ) that we will need them . in the rest of the proof we will only be interested in one state of @xmath123 per each such block of symbols @xmath69 . for this reason we define @xmath124 as the function that points to the index of the state in run @xmath125 just after reading the @xmath126-th block @xmath122 .",
    "suppose that there exist @xmath128 , and @xmath133 such that @xmath129 , @xmath130 and @xmath134 .",
    "let @xmath135 .",
    "w_{j , l}[block(t ) + 1 , \\infty]$ ] .",
    "this word is accepted by @xmath117 , because there exists an accepting run @xmath113 , @xmath136 , @xmath137 , @xmath138 of @xmath117 .",
    "the only letters without the overline in @xmath139 are @xmath91 , @xmath140 and @xmath126 .",
    "however , the only overlined letter that does not occur infinitely often in @xmath139 is @xmath101 .",
    "this letter is different from @xmath91 , @xmath140 and @xmath126 because of the assumptions we made .",
    "therefore @xmath15 does not occur in @xmath141 and @xmath142 .      for every @xmath91 let @xmath144 .",
    "a simple conclusion from lemma [ lemma1 ] is that for each huge @xmath145 such that @xmath146 the sets @xmath147 and @xmath148 are disjoint .",
    "this implies , that theorem [ main - theorem ] will be proved , once we prove the following lemma :        the @xmath150 _ state matrix _ is a two - dimensional matrix with @xmath0 rows and @xmath140 columns .",
    "we say that @xmath150 state matrix is @xmath126-_painted _ if each of its cells is labeled with one of @xmath126 colors and the minimal distance between two cells in the same row and of the same color is at least @xmath140 .    for a painted @xmath150 state matrix",
    ", we say that an @xmath151 is a cell _ on the left border _",
    "if @xmath152 , and is _ on the right border _ if @xmath153 .",
    "we say that @xmath151 is _ a successor _ of @xmath154 if @xmath155 and @xmath156 .",
    "the _ path _ @xmath20 through a painted @xmath150 state matrix @xmath157 is a sequence of cells @xmath158 , @xmath159 , @xmath137 , @xmath160 such that @xmath158 is on the left border , @xmath160 is on the right border , and for each @xmath161 either @xmath162 is a successor of @xmath163 ( we say that `` there is a right move from @xmath163 to @xmath162 '' ) or @xmath163 and @xmath162 are of the same color ( we say that `` there is a jump from @xmath163 to @xmath162 '' )    we say that a path @xmath20 is _ good _ , if there are no consecutive @xmath17 right moves in @xmath20 , and no jump leads to ( a cell in ) a row that was already visited by this path . notice that in particular a good path visits at most @xmath17 cells in any row .",
    "we are now going to prove lemma [ lemma2 ] .",
    "let a huge @xmath149 be fixed in this subsection and assume that @xmath166 .",
    "we will show that there exists a word @xmath20 such that @xmath117 accepts @xmath20 and no agent fulfiles its promises at least @xmath71 times in @xmath20 .        1 .",
    "there exists a number @xmath126 such that for every @xmath168 the state @xmath169 is not in @xmath45 and for every @xmath170 the state @xmath169 is in @xmath45 .",
    "define @xmath171 .",
    "[ contradiction ] no accepting state from @xmath147 can be reached on any run of @xmath123 before some agent fulfilled its promises @xmath172 times .",
    "it also implies that @xmath173 .",
    "[ positional ] the states @xmath174 are pairwise different .    1 .",
    "this is since @xmath117 is in the normal form . 2 .",
    "while reading a block of @xmath110 symbols @xmath69 , the automaton is in @xmath175 states , so there is a state visited at least twice .",
    "if this state was accepting , then a pumping argument would be possible  we could simply replace the suffix of the word after this block with the word @xmath176 and the new word would still be accepted , despite the fact that it is not in @xmath24 .",
    "3 .   suppose @xmath169 and @xmath177 are equal and non - accepting . for every @xmath178 ,",
    "the words @xmath179 $ ] and @xmath180 $ ] are identical .",
    "then a pumping argument works again  we can find a shorter accepting run by pumping out the states @xmath181 .",
    "but this contradicts the assumption that our run is shortest .",
    "we want to show that @xmath182 .",
    "if for any small @xmath69 there is @xmath183 then , thanks to lemma [ observations](iii ) we are done .",
    "so , for the rest of this subsection , we assume that @xmath184 for each small @xmath69 .",
    "we will now construct a @xmath164 - painted @xmath185 state matrix @xmath157 in such a way , that its @xmath140th row will , in a sense , represent the accepting run on the word @xmath186 . more precisely ,",
    "take a @xmath185 matrix @xmath157 and call the cells @xmath187 of @xmath157 , where @xmath188 , _ real cells _ and call the cells @xmath187 of @xmath157 with @xmath189 _ ghosts_. for a ghost cell @xmath187 and the smallest natural number @xmath126 such that @xmath190 call the real cell @xmath191 _ the host of _ @xmath187 .",
    "notice that each ghost has its host , since , by lemma [ observations ] ( ii ) , @xmath192 , which means that there are at least @xmath17 real cells in each row .",
    "if @xmath187 is real then define its color as @xmath193 .",
    "if @xmath187 is a ghost then define its color as the color of its host .",
    "now see that @xmath157 is indeed a @xmath164 - painted @xmath185 state matrix  the condition concerning the shortest distance between cells of the same color in the same row of @xmath157 is now satisfied by lemma [ observations ] ( iii ) and the condition concerning the number of colors is satisfied , since we assume that @xmath194 .",
    "suppose @xmath196 is a good path in @xmath157 and @xmath2 is the first ghost cell on @xmath196 .",
    "let @xmath197 be the direct predecessor of @xmath2 on @xmath196 .",
    "if the move from @xmath197 to @xmath2 was a right move then define a new path @xmath198 as the prefix of @xmath196 ending with @xmath2 . if the move from @xmath197 to @xmath2 was a jump , then suppose @xmath199 is the host of @xmath2 , and define @xmath198 as the following path : first take the prefix of @xmath196 ending with @xmath197 . then jump to @xmath199 ( it is possible , since the color of a ghost is the color of its host ) . then make at most @xmath200 right moves to the last real cell in this row .",
    "let @xmath198 be a concatenation of words @xmath201,@xmath202,@xmath203 , such that each move between @xmath204 and @xmath205 is a jump but there are no jumps inside any of @xmath204 .",
    "this means that each @xmath204 is contained in some row of @xmath157 , let @xmath206 be a number of this row .",
    "this also means , since @xmath198 is ( almost ) a good path , that @xmath207 for each @xmath208 .        to see",
    "that @xmath212 notice , that a symbol @xmath82 occurs in @xmath89 only if @xmath213 for some @xmath214 and that it occurs at most @xmath215 times in @xmath20 .",
    "the fact that @xmath123 accepts @xmath20 follows from the construction of path @xmath198 and from lemma [ observations ] ( ii ) .",
    "let @xmath216 and @xmath157 be an @xmath0-painted @xmath217 state matrix .",
    "we split the matrix @xmath157 into matrices @xmath218 , each of them of @xmath17 rows and each of them ( possibly except of the last one ) of @xmath219 columns , such that @xmath220 contains columns @xmath221 .",
    "the matrices @xmath222 will be called _",
    "multicolumns_.      * if @xmath20 has a jump from @xmath224 to @xmath225 then both @xmath224 and @xmath225 belong to the same multicomumn ; * @xmath20 has exactly @xmath226 jumps , one in each multicolumn ; * no jump on @xmath20 leads to a previously visited row of @xmath157 .",
    "clearly , such a path will be a good path .",
    "this is since the width of each multicolumn is @xmath227 , and each sequence of consecutive right moves on @xmath20 will be contained in two adjacent multicolumns ( except of the last such sequence , which is contained in the last multicolumn and @xmath228 ) .",
    "now we concentrate on a single multicolumn @xmath220 , which is a matrix with @xmath17 rows and with @xmath227 columns .",
    "we will call two rows of such a multicolumn _ brothers _ if at least one cell of one of those rows is of the same color as at least one cell of another ( i.e. two rows are brothers if a path through @xmath220 can make a jump between them ) .",
    "suppose some of the rows of the multicolumn @xmath220 belong to some set @xmath232 of _ dirty _ rows .",
    "the rows which are not dirty will be called _",
    "clean_. a color will be called clean if it occurs in some of the clean rows .",
    "a row will be called _ poor _ if it has less than @xmath233 clean brothers .",
    "one needs to take care here  in the following procedure , while more rows will get dirty , more rows will also get poor :            each execution of the body of the while loop makes dirty at most @xmath233 rows and decreases the number of clean colors by at least @xmath227  none of the colors of the selected clean poor row remains clean after the body of the while loop is executed . since there are at most @xmath0 colors in the multicolumn ( as @xmath157 is @xmath0-colored ) , the body of the while loop can be executed at most @xmath234 times , which means that at most @xmath235 new dirty rows can be produced .",
    "we used a convention here , that a set @xmath232 of rows is identified with the set of numbers of those rows . thanks to",
    "that we could write the first line of the above procedure , saying `` consider the dirty rows of @xmath239 to be also dirty in @xmath220 '' .",
    "suppose @xmath240 are sets of dirty rows in multicolumns @xmath241,@xmath242 , @xmath243 , @xmath244 resulting from an execution of the procedure contaminate all multicolumns .",
    "notice , that for each @xmath245 the inclusion @xmath246 holds .",
    "in other words , if a row is clean in @xmath220 , then it is also clean in @xmath239 .",
    "suppose @xmath223 is a path through the matrix consisting of the first @xmath91 multicolumns of @xmath157 ( or , in other words , of the first @xmath247 columns of @xmath157 ) .",
    "suppose ( i ) @xmath20 has exactly one jump in each multicolumn , and each jump leads to a row which was not visited before , ( ii ) if there is a jump from @xmath224 to @xmath225 then both @xmath224 and @xmath225 belong to the same multicomumn .",
    "suppose finally , that ( iii ) the cell where @xmath20 reaches the right border of the matrix , belongs to a clean row @xmath196 .",
    "then @xmath20 can be extended to a path through the matrix consisting of the first @xmath248 multicolumns of @xmath157 , in such a way that this extended path will also satisfy conditions ( i)-(iii ) .",
    "the only thing that needs to be proved is that one can jump , in multicolumn @xmath220 , from row @xmath196 to some clean row which was not visited before . since , by assumption , @xmath196 was clean in @xmath249",
    ", it is also clean in @xmath220 . since there are no clean poor rows in @xmath220 , we know that @xmath196 has at least @xmath233 clean brothers . at most @xmath91 of them were visited so far by the path , where of course @xmath250 .",
    "now , starting from an empty path and a clean row in @xmath241 and using the above lemma @xmath251 times we can construct a path @xmath20 as described in the beginning of this subsection and finish the proof of lemma [ combinatorial - lemma ] .",
    "the only lemma we still need for that is :      let @xmath253 be the index of the last multicolumn .",
    "the number of dirty rows in @xmath254 can be bounded by @xmath255 because of observations about defined procedures . for @xmath256 , we have @xmath257 , what is not greater then @xmath258 which is , finally , less then @xmath17 , because @xmath259 .    44 b. aminof and o. kupferman and o. lev . on the relative succinctness of nondeterministic bchi and co - bchi word automata .",
    "in _ in proc . of the 15th int . conf . on logic for programming , artificial intelligence , and reasoning _ , lncs 5330 , pages 183197 .",
    "springer , 2008 .",
    "j.r . bchi . on a decision method in restricted second order arithmetic . in _ proc .",
    "congress on logic , method , and philosophy of science .",
    "1960 _ , pages 112 . stanford university press , 1962 .",
    "o. kupferman . tightening the exchange rate beteen automata . in _ proc .",
    "16th annual conf . of the european association for computer science logic _ , lncs 4646 , pages 722 , 2007 .",
    "o. kupferman , g. morgenstern , and a. murano .",
    "typeness for @xmath4-regular automata . in _",
    "2nd int . symp . on automated technology for verification and analysis _ , lncs 3299 , pages 324338 .",
    "springer , 2004 .",
    "o. kupferman , m. vardi .",
    "weak alternating automata are not that weak . in _ proceedings of the fifth israel symposium on the theory of computing systems ( istcs 97 ) _ ( june 17 - 19 , 1997 ) .",
    "ieee computer society , washington , dc , 147 .",
    "r. mcnaughton .",
    "testing and generating infinite sequences by a finite automaton . _ information and control _",
    ", 9:521530 , 1966 .",
    "decidability of second order theories and automata on infinite trees .",
    "_ transaction of the ams _",
    ", 141:135 , 1969 . s. safra . on the complexity of @xmath4-automata . in _ proc .",
    "29th ieee symp . on foundations of computer science _ , pages 319327 , 1988 ."
  ],
  "abstract_text": [
    "<S> it is well known , and easy to see , that not each nondeterministic bchi automaton on infinite words can be simulated by a nondeterministic co - bchi automaton . </S>",
    "<S> we show that in the cases when such a simulation is possible , the number of states needed for it can grow nonlinearly . </S>",
    "<S> more precisely , we show a sequence of  as we believe , simple and elegant  languages which witness the existence of a nondeterministic bchi automaton with @xmath0 states , which can be simulated by a nondeterministic co - bchi automaton , but can not be simulated by any nondeterministic co - bchi automaton with less than @xmath1 states for some constant @xmath2 . </S>",
    "<S> this improves on the best previously known lower bound of @xmath3 . </S>"
  ]
}