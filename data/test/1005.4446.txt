{
  "article_text": [
    "the zen puzzle garden ( zpg ) @xcite is a one - player puzzle game involving a buddhist monk raking a sand garden .",
    "it is inspired by japanese garden design ( for example , the komyozenji temple garden is shown in figure  [ fig : kom ] ) .",
    "one common feature of such gardens is a flat region of sand or small pebbles , which is raked into a pattern .",
    "the zpg is one example of a _ transport puzzle _ ; these are problems that involve the player moving entities around a given domain ( e.g. , boxed around a warehouse ) , starting at some initial configuration , until they attain pre - defined goal conditions .",
    "entities must move according to the constraints of the puzzle , and may only move between connected positions ( that is , an entity may not be  lifted \" off the board and replaced at a position perhaps far from its initial location ) .",
    "a graphical representation of the problem may use vertices to represent the set of positions an entity may occupy , with connecting edges determined either from any explicitly named connections , or from those implied by arrangement on the board or within a grid .",
    "the rest of the paper is organized as follows : we first describe related work in section  [ zpg ] and give an in - depth description of the problem in section  [ zpg ] , before describing two solution methods ( genetic algorithm and a * ) for the zpg in section  [ algs ] .",
    "experimental results are presented in section  [ results ] , before we conclude with a brief discussion of the implications of our findings in terms of broader applicability .",
    "many transport puzzles require the player to make a trip around a board between given start and end positions , and puzzles may be extended via the introduction of objects or obstacles to the board , which must be collected or moved to satisfy given constraints .",
    "a well - studied example of the transport puzzle is _ sokoban _ @xcite . in this game",
    "the player takes control of a warehouse keeper whose job it is to push boxes around a maze and into designated target locations ; only one box may be pushed at any one time , and boxes may not be pulled .",
    "this challenge of the puzzle is derived from this latter condition , since if a box is pushed into a corner of any construction then the game is lost .",
    "an example sokoban puzzle is depicted in figure  [ fig : sokboard ] , with the  boxes \" depicted as circles , and the target region as a hatched area .",
    "sokoban is known to be np - hard @xcite .",
    "various ai - based techniques have been applied to its solution , including multi - agent systems @xcite , abstraction and decomposition @xcite , embedding domain - specific knowledge @xcite , and heuristic search @xcite .",
    "the applicability of such methods to zpg is , however , not clear , since the problem features additional complicating factors ( described in the next section ) .    according to an in - depth search of the literature ,",
    "no attempts to automatically solve this particular problem have been previously documented .",
    "we believe the genetic algorithm ( ga ) @xcite to be a good candidate method for its solution .",
    "we therefore describe preliminary work on applying this method to a new variant of the transport problem .",
    "we present a comparison between the ga and a  base - line \" , search - tree - based method , in the hope that this will motivate further study in the future .",
    "the zpg game takes place on a garden board comprised of a two - dimensional grid of _ sand _ squares surrounded by a _",
    "perimeter region_. two of the boards supplied with the game are partitioned into different sections separated by path regions ; these are not considered here .",
    "the objective of the game is to move a _ monk _",
    "character around the garden , causing him to completely rake the available surface .",
    "the monk always begins a game at the same point on the perimeter , regardless of the board being played , and the following rules apply :    * the monk may move freely around the perimeter region .",
    "* the monk may only move within the von neumann neighbourhood ( i.e. , no diagonal movements are allowed ) . *",
    "the perimeter is left by entering the sand on any un - raked ( i.e. , empty ) square .",
    "* vacating an empty sand square causes that square to be permanently raked .",
    "the monk can not move from the perimeter onto an empty sand square and then immediately back onto the perimeter , as this is considered a  step back \" .",
    "* once moving on sand , the monk continues to move in a straight line until he encounters either the perimeter ( in which case he moves onto it ) , a raked square or an _ object _ ( in both cases , he stops moving ) .",
    "the monk may not turn corners while moving .",
    "these two rules are central to the challenge of the game  if the monk could be moved on a square - by - square basis then most boards would be trivial to solve .",
    "* moveable objects may only be pushed onto an empty sand square .",
    "they may not be pushed off the garden into the perimeter region .",
    "a single move pushes an ornament one square , if possible .",
    "when pushing an ornament the monk does not continue moving until he is no longer able to , unlike normal movement . *",
    "the current game ends if the monk is moved into a position such that he is in a  dead end \" ( i.e. , unable to make a legal move ) .",
    "+    objects may be one of three types :    * _ rocks _ are placed in a fixed position at the start of the game , and may not be moved . * _ ornaments _ also start in the same place at the beginning of each game . they may only be pushed into an empty square , and not into the perimeter ( see above ) . * _ leaves _ are coloured either yellow , orange or red , and must be collected ( i.e. , moved over ) in that order , at which time they are removed from the board .",
    "an orange or red leaf is classed as an immoveable object until the preceding leaves have been collected .",
    "an example board is depicted in figure  [ fig : zenboard ] . in this situation",
    "the monk is half - way through completing a move , and will completely rake the current column before moving onto the perimeter .    a puzzle board",
    "is completed when all initially empty squares ( i.e. , any sand square not covered by either a rock or an ornament ) have been raked and the monk has stepped onto the perimeter region . this last condition is necessary , as a square is not considered to be raked until it has been vacated .",
    "although a formal proof is beyond the scope of this paper , previous work @xcite suggests that the zpg is np - complete .",
    "the authors study  pushing block \" puzzles ( like sokoban ) , and introduce variants in which blocks must slide their maximal extent when pushed , and where a player s path must not cross itself .",
    "these variants are demonstrated to be np - hard , and future work will use this work to formally establish the intractability of zpg .",
    "in this section we describe two solution methods for the zpg ; a search - tree method and a genetic algorithm ( ga ) .",
    "we first give a representation scheme for the game , before describing a generic simulator we built for the game .",
    "we then give details of the a * and ga algorithms .      in figure",
    "[ fig : graph ] , we show a graph - based representation of the zpg board .",
    "perimeter tiles are represented by coloured nodes , and sand tiles labelled according to their coordinated on the board .",
    "entities representing the player and obstacles may occupy vertices on the graph or travel ( where allowed ) along connecting edges between them . although not shown in figure  [ fig : graph ] , the monk may move freely between perimeter nodes ( that is , the perimeter subgraph is fully connected ) .",
    "+    standard game theory @xcite defines a _ game tree _ as a graph in which nodes represent game states , with each branch corresponding to a move .",
    "the _ complete _ game tree for a problem is the game tree starting at the initial state and containing every possible move .",
    "terminal nodes represent the possible states that may end the game ; either a goal state or deadlock .",
    "the _ branching factor _ is the number of children at each node ; an exhaustive search of the tree will follow every branch at every node and the total number of vertices will increase exponentially to the depth in the tree .",
    "a game tree is an example of state - space search whereby successive configurations or states of an instance are considered , with the goal of finding a state with a desired property .",
    "figure  [ fig : branch ] illustrates how this representation can be applied to the zen puzzle garden .",
    "obtaining a complete game tree for a problem can be very computationally expensive @xcite , and has resulted in search algorithms such as a * playing an important role in recent research .",
    "+      attempts to solve commercial games are often hampered by the reluctance of the authors to release commercially - sensitive source code .",
    "therefore , in order to test candidate scripts against game boards , we use the same fundamental approach as kendall and spoerer@xcite , which is to write a simplified version of the game engine .",
    "this engine retains the essential characteristics of the game in terms of its rules , but omits the graphical user interface and other  playability \" features .",
    "a representation of the game state is modified by an external controller program , and moves and their results may therefore be assessed without access to the source of the main game itself .",
    "care is taken to ensure that all restrictions listed in section 1 are enforced .",
    "the same simulator is used by both the genetic algorithm and informed search .    to determine the quality of a ( partial ) solution to a given garden , the simulator includes an @xmath0 method to calculate and return a value describing how close it is to a _",
    "this method compares the unraked ( available ) area of the garden before and after a given path has been explored . by dividing the number of unraked tiles after the path has traversed the garden by the _",
    "initial _ number of unraked tiles , a quality metric may be obtained . as the value approaches zero the proportion of the garden that has been raked rises , with a value of zero indicating the path has covered all available tiles .",
    "the a * algorithm is an extensively studied best - first search method .",
    "it is best - first in that it takes an _ informed _ approach when deciding which node is most likely to provide the least - cost distance to a goal state ; the order in which nodes are visited is determined by a distance - plus - cost heuristic , given by @xmath1 , where :    * @xmath2 : the shortest distance from the root node to the node being evaluated ; * @xmath3 : the estimated distance from the node being evaluated to a goal  state .",
    "the heuristic function should be optimistic in that it will never overestimate the cost of a path from the root node to a goal state ; as the algorithm will never overlook the possibility of a lower - cost path it is therefore admissible .",
    "@xcite first discussed this algorithm in 1968 , then calling it just algorithm a. it has since been shown by dechter and pearl @xcite to be optimal in that it considers fewer nodes than any other admissible search algorithm with the same heuristic .",
    "the a * algorithm displays characteristics of the breadth - first search ; it is complete in that it will always return a solution if one exists , and it will also visit all equal - cost vertices at a given depth before continuing further along a path at greater cost .",
    "many enhancements have been made to the basic algorithm that allow it to be tailored to the problem domain , such as iterative deepening and pattern databases .",
    "these enhancements have provided some impressive reductions in the search effort required to solve challenging problems such as rubik s cube @xcite .",
    "the algorithm is implemented using a priority queue , the ordering determined by the heuristic function , with a lower value indicating a better candidate .",
    "the pseudo - code in figure  [ fig : astar ] illustrates the basic operation of the algorithm .",
    "+    the heuristic function comprises the distance from the root node , @xmath2 , given by the number of moves completed , and the estimate @xmath3 is provided by the @xmath0 method described earlier .",
    "the algorithm is implemented with a conditional loop which polls the fittest state from the open queue and proceeds to create leaf nodes for each move available from that state . as the nodes are created their quality is analysed , and they are inserted into the queue accordingly . once the first complete solution has been found the queue",
    "is pruned of all nodes requiring a greater number of moves , and only nodes with an move count less than or equal to the best solution are inserted into the queue .",
    "this process is repeated until all nodes in the queue have been examined , at which point the solutions found are analysed and the set of unique solutions returned .",
    "pruning reduces the completeness of the solution set generated by the algorithm for solutions requiring more than the optimal number of moves , but this behaviour is acceptable , as only the optimal solutions are of interest in this investigation .",
    "genetic algorithms @xcite have been studied extensively with respect to combinatorial optimisation problems . with respect to the current problem , hong _ et al . _",
    "@xcite discuss the application of a genetic algorithms to game search trees , specifically that of the latin square problem devised by leonhard euler .",
    "mantere and koljonen @xcite perform a similar analysis of the efficacy of genetic algorithms for devising and solving sudoku problems .    when choosing the representation for our ga , we first consider the basic operation of the game .",
    "a successful move consists of the selection of a point on the garden perimeter and a transition onto the garden surface , followed by zero or more in - move choices ( the number of choices to be made is only non - zero if a raked square or object is encountered ) , leading to the monk finishing back on the perimeter . if a choice of direction is required at a raked square , then _ at most _ two options are available , as the monk can neither move backwards nor onto the raked square in front of him . if an ornament is encountered , then the monk must choose a number of times ( @xmath4 ) to push it in the current direction .    for a rectangular board of dimension @xmath5",
    ", there are @xmath6 unique starting points on the perimeter , ordered by starting at 1 at the north face of the upper - left square and moving  clockwise \" to the west face of the same square .",
    "@xmath7 is therefore a measure of the  circumference \" of the board .",
    "we assume that no move will contain more than 20 direction choices or opportunities to push .",
    "we define @xmath8 as the maximum number of moves allowed .",
    "a candidate solution is naturally made of a sequence of clauses +   + @xmath9 , +   + where each clause encodes a move , @xmath10 , @xmath11 and @xmath12 .",
    "values for @xmath13 encode a starting point on the board perimeter .",
    "values for @xmath14 encode a distance to push an object ( if encountered ) .",
    "we use an indirect encoding scheme for values of @xmath15 to encode direction choices , using the notion of _ available moves_. when a move is required , the list of available moves is constructed and one of two chosen ( remembering that only two moves will be possible ) , according to the value of @xmath16 .",
    "this genome sequence therefore encodes a  script \" of moves , which is then fed into the simulator for evaluation .",
    "the fitness function is given below .",
    "it accepts a sequence of moves , and returns the overall fitness of the sequence based on ( a ) its length , and ( b ) the quality of the solution it encodes .",
    "fitness values are in the range @xmath17 .",
    "@xmath18 is equivalent to @xmath8 , above , and is set to a default value of 20 .",
    "@xmath19 represents the number of valid moves executed .",
    "the first component of the fitness function therefore rewards short sequences .",
    ".... fitness ( ) {    fitness=0 ;    fitness + = ( gene_length - moves ) *                    ( 200/gene_length )       if ( areafitness>0 )      fitness + = ( 1-areafitness)*200    else if ( garden is full solution )      fitness + = 300    else      fitness = 0 } ....    the second component of the fitness value is calculated by the @xmath0 function ; a complete solution gains an absolute value of 300 for this component ; if deadlock is reached ( i.e. , the monk is unable to move ) a value of zero is awarded for this component .",
    "we tested both methods on 24 different zpg game boards , including one engineered to have no solution .",
    "we selected nine ",
    "retail \" boards ( supplied with the game , labelled r1-r9 ) and constructed an additional 14  test \" boards ( t1-t14 ) .",
    "we could not simply select all retail boards , because we were restricted to using smaller boards due to the resource limitations we imposed ( an informed search would be terminated if it either consumes more that 100 gb of disc space or runs for longer than 72 hours ) .",
    "boards were selected / constructed in order to be  tractable \" in this sense , but we also ensured that the full range of board features was represented in our test suite    we initially ran both methods on 30 different zpg game boards .",
    "of these , 15 were  retail \" boards ( i.e. , supplied with the game ) , and 15 were hand - designed by us . of the latter , one  illegal \" board was specifically engineered to have no solution , in order to demonstrate the exhaustive nature of the a * algorithm .",
    "the other 14 non - retail boards were designed to represent the range of obstacles contained in all 64 retail boards . of the retail boards ,",
    "eight were selected specifically because we expected them to exceed ( due to their size ) the a * resource limits that we impose ; a search is terminated if it either consumes more than 100 gb of disc cache space , or if it runs for longer than 72 hours .",
    "the 14 hand - designed boards were designed to be  tractable \" in this respect .",
    "the a * algorithm was implemented in java , using the jgap @xcite java package ; it used a constant population size , rank - based selection ( with 95% of the population considered for the next generation ) , and simple one - point crossover .",
    "the parameter values used were as follows :    * population size : 1000 * generations : 100 * chromosome length : 20 * mutation rate : 0.07    the ga was run 50 times on each board .",
    "neither a * nor the genetic algorithm found valid solutions for the  illegal \" board , for which no solutions exist .",
    "the following results therefore describe comparisons over 23 zpg boards . in table 1",
    ", we first show the results in terms of solution quality . for each board",
    ", we give the the optimum number of moves for completion ( as found by a * ) , the length of the _ best _ solution found by the ga , the _ average _ solution length for the ga , and the average ga  quality overhead \" in terms of excess moves .",
    "the table is ordered by the number of moves required by the optimal solution .",
    "we observe that the ga fails to find the optimal solution in only two cases ( t12 and t14 ) , and solves to optimality all of the retail boards tested ( see graphical depiction of quality results in figure  [ fig : results ] ) . over all boards , on average the ga finds solutions that require roughly 15% more moves than the optimal solution .    .move count comparison for a * and ga . [ cols=\"^,^,^,^,^\",options=\"header \" , ]",
    "we observe that , with the exception of a single problem instance ( t2 ) , compared to informed search the ga requires significantly fewer evaluations to find the optimum . over all boards ,",
    "the ga requires , on average , under 3% of the evaluations needed by a*. if we discount board t2 , this falls to 0.65% .",
    "+    board t2 contains only rocks , and it is not immediately apparent from inspection why the ga struggles so much with this particular instance .",
    "the board is shown in figure  [ fig : t2 ] ; we note its small size , and relatively dense population of rocks ( 21% of the board is occupied at the outset ) .",
    "we believe that this density places significant constraints on possible solutions , which is why this board has by far the smallest search space .",
    "it may be that , in cases such as these , it is more efficient to solve the instance using informed search .",
    "in this paper we have described a novel genetic algorithm solution to a block - based puzzle game .",
    "the game poses significant challenges in terms of the size of its search space , but our solution is competitive with informed search in terms of solution quality , and significantly out - performs it in terms of its computational resource requirements .",
    "we presented the zpg in order to both demonstrate the efficacy of a genetic algorithm solution , and to encourage further study of its properties .",
    "inspired by @xcite , we wish to investigate questions such as  is it possible to automatically generate hard and easy instances of the problem ? \" , as well as considering the notion of an _ aesthetically pleasing _ solution .",
    "in addition to providing a useful testbed for new solution methods , the problem domain has real significance if we consider the problem of mobile robotics , where a self - avoiding path must be chosen whilst also considering possible obstacles and moveable objects .",
    "future work will focus on formally establishing the difficulty of the zpg game , as well as further investigations into its solution .",
    "the authors thank joseph white ( author of the zpg ) for invaluable assistance with the game , david corne for useful advice on representation schemes , and david goldberg @xcite and robert m. pirsig @xcite for titular inspiration ."
  ],
  "abstract_text": [
    "<S> in this paper we present a novel genetic algorithm ( ga ) solution to a simple yet challenging commercial puzzle game known as the zen puzzle garden ( zpg ) . </S>",
    "<S> we describe the game in detail , before presenting a suitable encoding scheme and fitness function for candidate solutions . </S>",
    "<S> we then compare the performance of the genetic algorithm with that of the a * algorithm . </S>",
    "<S> our results show that the ga is competitive with informed search in terms of solution quality , and significantly out - performs it in terms of computational resource requirements . </S>",
    "<S> we conclude with a brief discussion of the implications of our findings for game solving and other  real world \" problems . </S>"
  ]
}