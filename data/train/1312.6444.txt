{
  "article_text": [
    "allocation of indivisible resources is one of the most fundamental problems in _ fair division _ and _ multiagent resource allocation",
    "_  @xcite .",
    "many of the fair division settings feature two agents since disputes often concern two parties .",
    "recently @xcite presented the _ undercut procedure _ which is an elegant procedure to divide a set of contested indivisible objects fairly among two agents .",
    "a crucial assumption in the paper was that agents have a strict ranking over the objects and the preferences over _ sets _ of objects are _",
    "responsive_. preferences over sets of objects are responsive if for any set in which an object is replaced by a more preferred object , the new set is more preferred .",
    "we first show that the assumption of responsive preferences can be somewhat restrictive .",
    "we also identify three shortcomings of the first few steps of the undercut procedure .",
    "finally we rectify the shortcomings by simplifying the undercut procedure of @xcite and showing that it returns an envy - free allocation ( if it exists ) under a more general preference restriction called _",
    "separability_.    the setting we consider concerns two agents @xmath0 and @xmath1 and a set of objects @xmath2 .",
    "both agents have _ complete _ and _ transitive _ preferences @xmath3 and @xmath4 over the subsets of objects in @xmath2 .",
    "the goal is to identify an envy - free split @xmath5 where @xmath6 is the allocation of agent @xmath0 and @xmath7 is the allocation of agent @xmath1 .",
    "the undercut procedure is a discrete generalization of the divide and choose cake cutting protocol  ( chapter 1 , * ? ? ? * ) .",
    "the elegance of the undercut procedure lies in the fact that although agents have preferences over sets of objects , it is sufficient to only consider or query about the _ minimal bundles _ of the agents . a subset @xmath8 is a _",
    "minimal bundle _ for agent @xmath9 if @xmath10 and for any @xmath11 , @xmath12 .",
    "the set of minimal bundles of agent @xmath9 is denoted by @xmath13 .",
    "any envy - free split @xmath5 of @xmath2 is _ trivial _ if @xmath14 and @xmath15 .",
    "the main idea underlying the undercut procedure is that there exists a non - trivial envy - free allocation if the set of minimal bundles of both agents is not the same .",
    "the undercut procedure goes through the minimal bundles of the agents to identify an envy - free allocation if it exists  @xcite .",
    "we refer the reader to algorithm  [ algo : undercut ] for an adapted specification of the undercut procedure .",
    "@xmath16 envy - free split if it is exists .    *",
    "generation phase : * agent @xmath0 and @xmath1 s most preferred objects are given to them if they do not coincide . if the object coincides , then it is placed in the contested pile @xmath17 .",
    "the process continues until all objects have been names by at least one agent .",
    "if the contested pile is empty , the procedure ends .",
    "otherwise , each agent @xmath9 identifies his set of minimal bundles @xmath13 of @xmath18 . if @xmath19 , each agent @xmath9 provides reports to the mechanism a ranking of his minimal bundles .",
    "an agent @xmath9 is chosen at random , and one of @xmath9 s top - ranked minimal bundle @xmath6 is considered . if @xmath20 , then it becomes the proposal , and @xmath9 is the proposer . if @xmath21 , then one of @xmath22 s top - ranked minimal bundle @xmath23 is considered .",
    "if @xmath24 , then it becomes the proposal , and @xmath22 the proposer .",
    "if @xmath25 , then the process continues until a minimal bundle of one agent is found that is not a minimal bundle of the other . then proceed to step 4 .",
    "if @xmath26 , and there exists an @xmath6 such that @xmath27 and @xmath28 ( and , therefore @xmath29 also ) , then @xmath6 becomes the proposal .",
    "if there is no minimal bundle @xmath6 such that @xmath30 is also a minimal bundle , then a minimal bundle is chosen randomly and becomes the proposal .",
    "assume that @xmath6 is the proposal and the proposer is @xmath9 .",
    "then @xmath22 may respond by @xmath31 accepting @xmath32 of @xmath18 or @xmath33 undercutting @xmath9 s proposal , i.e. , taking his most - preferred subset @xmath34 and giving @xmath35 to @xmath22 .",
    "the procedure ends .",
    "an agent s subset of @xmath2 consists of all objects received in steps 1 and 2 , plus the agent s share of the contested pile determined in step 4 .",
    "[ algo : subroutine ]    [ [ limitation - of - responsive - preferences ] ] limitation of responsive preferences + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the undercut procedure was shown to find an envy - free allocation if the preferences of agents are _",
    "responsive_. _ responsiveness _ is a well - established preference restriction on preferences over sets of objects which assumes that the agents have preferences over the individual objects .",
    "preferences over sets of objects are _ responsive _ , if for any two sets that differ only in one object , the agent prefers the set containing the more preferred object  @xcite .",
    "we first highlight that responsive preferences can be restrictive .    in a divorce dispute ,",
    "husband @xmath36 may prefer each of the two family dogs @xmath37 and @xmath38 over the car @xmath39 : @xmath40 if the husband s preferences are responsive , then his preferences over the set of issues is as follows : @xmath41    however it may be the case that the husband prefers the set of a car and a dog to the set of two dogs : @xmath42 . this way he will have both a companion and a ride .",
    "@xmath43    a preference relation @xmath44 is _ separable _ if for all @xmath45 such that @xmath46 , the following holds : @xmath47 if and only if @xmath48  @xcite .",
    "informally , separability means that if an agent prefers having the object than having nothing , he would also prefer the inclusion of the object in any other set that does not include the object . whereas responsive preferences are separable , separable preferences are more general than responsive preferences . just as in @xcite",
    ", we will assume that all the objects are desirable .",
    "however , we will not use the restriction in @xcite that preferences over objects do not admit ties .",
    "[ [ issues - with - the - generation - phase - of - the - undercut - procedure ] ] issues with the generation phase of the undercut procedure + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in the generation phase of the undercut procedure ( algorithm  [ algo : undercut ] ) , each agent sequentially picks up his maximal object if it is uncontested .",
    "otherwise each contested object goes into the _",
    "`` contested pile''_. we argue that the generation phase of the undercut procedure ( also referred to as the _ generation phase _ in @xcite ) has some drawbacks .",
    "_ firstly _ , undercut may fail to identify an envy - free split because of the generation phase .",
    "let us consider the following preferences of agents 1 and 2 : @xmath49 and @xmath50 if @xmath51 , we know that the assignment which allocated @xmath52 to agent @xmath0 and @xmath53 to agent @xmath1 is envy - free .",
    "however undercut fails to compute this assignment .",
    "the reason is that in the generation phase , agent @xmath0 takes @xmath54 and agent @xmath1 takes @xmath55 .",
    "after this the contested pile is @xmath56 .",
    "the undercut procedure ends up in a deadlock in this contested pile .",
    "_ secondly _ , even if the undercut procedure works for certain responsive preferences , the generation phase hinders it from working for separable preferences .",
    "_ thirdly _ , the generation phase use sequential allocation .",
    "it is well - understood that sequential allocation is highly susceptible to manipulation if at least one agent has sufficient information about the other agent s preferences  @xcite .",
    "one point which goes in favour of step 1 and 2 of the undercut procedure is that it decreases the size of the contested pile which was presumably the motivation behind the steps .",
    "[ [ simplified - undercut - procedure ] ] simplified undercut procedure + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    next , we show that the simplified undercut procedure works for transitive and separable preferences .",
    "we define a _ simplified undercut _ procedure as follows . *",
    "_ simplified undercut : _ * _ treat the set of all objects as the contested pile and run the original undercut procedure while ignoring the generation phase of the original undercut procedure .",
    "_    for transitive and separable preferences , there is a non - trivial envy - free split if and only if the set of minimal bundles of both agents is not the same .",
    "furthermore the simplified undercut procedure finds such an a split .",
    "the argument is similar to the one for the proof of ( theorem 1 , * ? ? ?",
    "we first prove that if a non - trivial envy - free split exists it implies that the set of minimal bundles of both agents is not the same .",
    "let us assume that a non - trivial envy - free split @xmath5 exists .",
    "then there must be an agent @xmath57 such that @xmath58 . by the definition of minimal bundle , we know that @xmath59 . without loss of generality , we can assume that @xmath60 . if it were",
    "not then we argue that there exists an @xmath23 such that @xmath61 , @xmath62 , such that @xmath63 . for an @xmath62 , by separability , we know that @xmath64 . similarly , by separability , we know that @xmath65 because @xmath66 can be obtained from @xmath32 by adding those elements to @xmath32 as the elements that are removed from @xmath6 to obtain @xmath23 .",
    "since @xmath67 is transitive and complete , there exists some @xmath23 such that @xmath68 for which there exists no subset @xmath69 such that @xmath70 .",
    "now if @xmath71 , then we know that @xmath61 . by separability",
    ", we also know that @xmath72 .",
    "hence @xmath73 which means that set of minimal bundles of both agents is not the same . if @xmath74 , then we have already proved that the set of minimal bundles of the two agents are different .",
    "now let us assume that @xmath75 .",
    "then we know that @xmath76 .",
    "since @xmath5 is envy - free , then it follows that @xmath77 .",
    "hence @xmath78 .",
    "if @xmath79 then we are already done .",
    "we show that @xmath32 is indeed in @xmath80 .",
    "consider any @xmath81 which implies by separability that @xmath82 . since @xmath83 and since @xmath81 , we know that @xmath84 .",
    "this implies by separability that @xmath85 . since @xmath85 , @xmath82 and @xmath78 , we get by transitivity that @xmath86 .",
    "hence we have shown that @xmath79 . since we know that @xmath87 , the set of minimal bundles of both agents is not the same .",
    "we now prove that if the two agents do not have the same set of minimal bundles then there exists a non - trivial envy - free split .",
    "let us assume that the two agents do not have the same set of minimal bundles i.e. , there exists an @xmath45 such that @xmath60 and @xmath74 .",
    "if @xmath77 , then @xmath5 is an envy - free split .",
    "when agent @xmath9 will propose @xmath5 , agent @xmath22 will accept it .",
    "therefore let us look at the other case when @xmath88 if @xmath89 , and @xmath74 , then by the definition of a minimal bundle we know that there exists a @xmath11 such that @xmath90 .",
    "agent @xmath22 will undercut the proposal @xmath5 of agent @xmath9 and will be ready to take @xmath34 . for agent @xmath0 , we know that @xmath91 thus @xmath92 is an envy - free split .",
    "the argument is similar to the one for the proof of ( theorem 1 , * ? ? ?",
    "if a trivial envy - free split exists , the simplified undercut procedure will find it since it considers the minimal bundles of the two agents .",
    "if a trivial envy - free split does not exist but a non - trivial one does , even then the simplified undercut procedure will find it .",
    "if agents have unequal claims say claim @xmath93 for agent @xmath9 , then the definition of envy - freeness can be easily extended as follows : @xmath94 for an allocation where @xmath9 gets @xmath6 .",
    "if agents have unequal claims , the undercut procedure still works as follows .",
    "we simply redefine a minimal bundle @xmath6 for agent @xmath9 as a set of objects such that @xmath95 and for any @xmath11 , @xmath96 .",
    "nicta is funded by the australian government through the department of communications and the australian research council through the ict centre of excellence program .",
    "s.  barber , w.  bossert , and p.  k. pattanaik .",
    "ranking sets of objects . in s.  barber , p.  j. hammond , and c.  seidl , editors , _ handbook of utility theory _ , volume  ii , chapter  17 , pages 893977 .",
    "kluwer academic publishers , 2004 ."
  ],
  "abstract_text": [
    "<S> the undercut procedure was presented by @xcite as a procedure for identifying an envy - free allocation when agents have preferences over sets of objects . </S>",
    "<S> they assumed that agents have strict preferences over objects and their preferences are extended over to sets of objects via the responsive set extension . </S>",
    "<S> we point out some shortcomings of the undercut procedure . </S>",
    "<S> we then simplify the undercut procedure of @xcite and show that it works under a more general condition where agents may express indifference between objects and they may not necessarily have responsive preferences over sets of objects . finally , we show that the procedure works even if agents have unequal claims .    fair division _ jel _ : c62 , c63 , and c78 </S>"
  ]
}