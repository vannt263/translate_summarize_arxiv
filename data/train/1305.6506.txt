{
  "article_text": [
    "data processing and management systems such as databases , datastores  @xcite or query engines usually have to answer to two kinds of entities : _ humans _ and _ hardware_.    towards humans , they provide means to query , manipulate or manage data . towards the hardware , they issue store and retrieve commands .",
    "they depend directly or indirectly on the very nature of the hardware .",
    "almost all systems for example , hadoop s distributed file system  are designed with strong though not necessarily explicit assumptions about the underlying hardware such as hard disk drives ( hdd )  @xcite , their spindles , heads , etc .    conceptually , there are three levels present in data processing and management systems ( fig .",
    "[ fig : data - layers ] ) :        * the _ user interface _ level .",
    "any database or datastore needs to provide a way to interact with the data under management .",
    "this can be something elaborate , standardised and mature as the structured query language ( sql ) found in relational database management systems ( rdbms ) , such as oracle db , postgresql , or mysql .",
    "this can be a restful interface , found in many nosql datastores , like , for example , couchdb s api .",
    "of course , this can also be a programming - language - level api such as the case with hadoop ] .",
    "* the _ logical data layout _ level . addresses how the user conceptually thinks about and deals with the data . in case of a rdbms",
    "the data units might be tables and records , in a key - value store like redis it may be an entry identified via a key and in a wide - column store the data unit might be a row containing different columns , and last but not least in an rdf store a single triple might be the unit one logically manipulates . * the _ physical data layout _ level . on this level , we re concerned with the question how the data is laid out once serialised .",
    "the serialisation takes place from main memory ( ram ) either to send the data in question over the wire , or , to be stored on a durable medium such as a hard disk drive or a solid - state drive ( ssd )  @xcite .",
    "concrete serialisations may be textual based , such as csv and json or of binary nature , like the rcfile format  @xcite .",
    "in  @xcite we introduced the three fundamental data shapes _ tabular _ , _ tree_henceforth _ nested _ , and _ graph_.",
    "it turns out that it is useful to further differentiate the shapes , distinguishing between logical and physical layouts , as hinted above .    in the following ,",
    "i propose a non - exhaustive , lightweight taxonomy for logical and physical data layouts and serialisation formats as depicted in fig .",
    "[ fig : taxonomy - dl ] .",
    "the main point of this taxonomy is to decouple the logical from the physical level . while for the human user the logical level is of importance , from a software and systems perspective the physical level dominates .",
    "there are cases , however , where the abstraction is leaking and the user is forced to accommodate .",
    "take , for example , best practices concerning nosql data modeling ] : with a wide - column store , such as hbase , one can easily get into a situation where one must take into account the physical location of the data in order to avoid performance penalties ] .",
    "also , the choice of the serialisation format ( for example , textual vs. binary ) can have severe implications , both in terms of performance and maintenance .",
    "look at a case where one decides to use json as the wire format in contrast to , say , avro . in the former case",
    ", one can debug any document simply by issuing a command on the shell like ` cat datafile.json | more ` while with avro more specialised tooling is necessary . on the other hand",
    ", one can probably expect a better i / o performance and disk utilisation with a binary format such as avro , compared to json .",
    "now we re already entering the discussion of the impact of choices we make concerning how the data is laid out .",
    "let s jump right into it .",
    "there are two schools of thought concerning the organisation of data units : data _ normalisation _ , and data _",
    "denormalisation_. the former wants to minimise redundancy , the latter aims to minimise assembly .",
    "both have their own built - in assumptions , characteristics and use cases :    [ [ normalised - data ] ] normalised data ",
    "+ + + + + + + + + + + + + + + + +    * as data items are not redundant , data consistency is relatively easy to achieve compared to denormalised data . * when updating data in place one only has to deal with it once and not in multiple locations .",
    "* storage is efficiently used , that is , it takes up less disk space .",
    "[ [ denormalised - data ] ] denormalised data  + + + + + + + + + + + + + + + + + + +    * the access to data units is fast as no joins are necessary ; the data can be considered to be pre - joined . * as it provides an entity - centric view , it is in general more straight - forward to employ automated sharding of the data . *",
    "due to keeping multiple copies of data items or fragments thereof around , it requires typically a multitude more space on disk than normalised data .    in table",
    "[ tab : ndcomparison ] i m providing a comparison and summary of the two different ways to handle data including typical examples of workloads and technologies concerning use cases .",
    ".a comparison of normalised vs. denormalised handling of data on the logical and physical level across sql and nosql data management systems .",
    "[ cols=\"<,<,<\",options=\"header \" , ]     allow me a side remark relative to the ongoing and tiring debate sql vs. nosql : it turns out that the focus on sql as the representative of the evil is really a rather backward view . as stated in many places all over the web ] many open source projects and commercial entities",
    "are introducing sql bindings or interfaces on top of hadoop and nosql datastores .",
    "this is quite understandable , given the huge number of deployed ( business intelligence ) tools that natively speak sql and of course the many people out there trained in this language .    * joining the dots .",
    "* we are now in a position to wrap up on the impact of choices we make concerning how the data is laid out : one dimension of freedom is the choice how we organise the data : normalised vs. denormalised .",
    "the second choice we have is concerning the physical data representation .",
    "interestingly , some systems are more rigid and upfront with what they support , expect or allow . while , for example , in the hadoop ecosystem it is entirely up to you how you serialise your data  and depending on your requirements and the workload you might end up with a different result ",
    "traditional rdbms are much more restrictive .",
    "seldom you get to choose the physical data layout and the logical layout is hard - coded anyways .    coming back full circle to the initial fig .",
    "[ fig : data - layers ] one should , however , not underestimate the _ user interface _ level . at the end of the day",
    "the usability , integrability and user familiarity of this level can be the reason why some data management systems may have a better chance to survive than others .",
    "last but not least , one should take into account the emerging _ _ polyglot persistence _ _ ] meme that essentially states that one size does not fit it all concerning data storage and manipulation .",
    "i suggest embracing this meme together with pat helland s advice  @xcite : `` in today s humongous database systems , clarity may be relaxed , but business needs can still be met . ''",
    "i d like to thank eric brewer , whose ricon2012 keynote motivated me to write up this short note .",
    "his keynote is available via https://vimeo.com/52446728 and more than certainly worth watching it in its entirety .",
    "yongqiang he , rubao lee , yin huai , zheng shao , namit jain , xiaodong zhang , and zhiwei xu . .",
    "in serge abiteboul , klemens bhm , christoph koch , and kian - lee tan , editors , _ icde _ , pages 11991208 .",
    "ieee computer society , 2011 ."
  ],
  "abstract_text": [
    "<S> in this short note i review and discuss fundamental options for physical and logical data layouts as well as the impact of the choices on data processing . </S>",
    "<S> i should say in advance that these notes offer no new insights , that is , everything stated here has already been published elsewhere . </S>",
    "<S> in fact , it has been published in so many different places , such as blog posts , in the literature , etc . that the main contribution is to bring it all together in one place . </S>"
  ]
}