{
  "article_text": [
    "a polygonal domains @xmath4 with @xmath1 corners and @xmath5 holes is a polygonal region of genus @xmath5 whose boundary consists of @xmath1 line segments . the holes and the outer boundary of @xmath4 are regarded as _",
    "obstacles_. then , the geodesic distance between any two points @xmath6 in a given polygonal domain @xmath4 is defined to be the length of a shortest obstacle - avoiding path between @xmath7 and @xmath8 .",
    "the euclidean shortest path problem in a polygonal domain has drawn much attention in the history of computational geometry  @xcite . in the _ two - point shortest path query _ problem , we preprocess @xmath4 so that we can determine a shortest path ( or its length ) quickly for a given pair of query points @xmath9 . while we can compute a shortest path in @xmath10 time from scratch  @xcite , known structures for logarithmic time query require significantly large storage  @xcite .",
    "chiang and mitchell  @xcite developed several data structures that can answer a two - point query quickly with tradeoffs between storage usage and query time .",
    "most notably , @xmath11 query time can be achieved by using @xmath12 space and preprocessing time ; sublinear query time by @xmath13 space and preprocessing time .",
    "more recently , guo et al .",
    "@xcite have shown that a data structure of size @xmath14 can be constructed in @xmath15 time to answer the query in @xmath16 time , where @xmath5 is the number of holes .",
    "their results are summarized in [ table : summary ] . for more results on shortest paths in a polygonal domain",
    ", we refer to survey articles by mitchell  @xcite .    in this paper , we focus on a variant of the problem , in which possible query points are restricted to a subset of @xmath4 ; the boundary @xmath17 of the domain @xmath4 or a set of line segments within @xmath4 .",
    "in many applications , possible pairs of source and destination do not span the whole domain @xmath4 but a specified subset of @xmath4 .",
    "for example , in an urban planning problem , the obstacles correspond to the residential areas and the free space corresponds to the walking corridors .",
    "then , the query points are restricted to the spots where people depart and arrive , which are on the boundary of obstacles .",
    "therefore , our goal is to design a data structure using much less resources than structures of chiang and mitchell @xcite when the query domain is restricted to the boundary of a given polygonal domain @xmath4 or to a set of segments in @xmath4 . to our best knowledge , no prior work seems to investigate this variation . as a main result , in section  [ sec : log_query ]",
    ", we present a data structure of size @xmath18 that can be constructed in @xmath19 time and can answer a @xmath17-restricted two - point shortest path query in @xmath11 time . here",
    ", @xmath20 stands for the maximum length of a davenport - schinzel sequence of order @xmath21 on @xmath1 symbols  @xcite .",
    "it is good to note that @xmath22 for any constant @xmath21 as a convenient intuition , while tighter bounds are known @xcite .",
    "we also provide a tradeoff between space and query time in section  [ sec : tradeoff ] .",
    "in particular , we show that one can achieve sublinear query time using @xmath3 space and preprocessing time .",
    "new results in this paper are also summarized in  [ table : summary ] .",
    "[ table : summary ]    .summary of new and known results on exact two - point shortest path queries , where @xmath23 is arbitrary and @xmath24 is a parameter .",
    "[ new ] denotes our results . [ cols=\"^,^,^,^,^\",options=\"header \" , ]     our data structure is a subdivision of two - dimensional domain parameterized in a certain way .",
    "the domain is divided into a number of grid cells in which a set of constrained shortest paths between query points have the same structure .",
    "each grid cell is divided according to the projection of the lower envelope of functions stemming from the constrained shortest paths . with careful investigation into this lower envelope ,",
    "we show the claimed upper bounds .",
    "also , our approach readily extends to the variant where query points are restricted to lie on a given segment or a given set of segments in @xmath4 .",
    "we discuss this extension in section  [ sec : extension ] .      in the case where @xmath4 is a simple polygon ( @xmath25 ) , the two - point shortest path query can be answered in @xmath11 time after @xmath26 preprocessing time  @xcite .",
    "more references and results on shortest paths in simple polygons can be found in a survey article by orourke and suri  @xcite    before chaing and mitchell  @xcite , fast two - point shortest path queries in polygonal domains were considered as a challenge . due to this difficulty , many researchers have focused on the _ approximate _ two - point shortest path query problem .",
    "chen  @xcite achieved an @xmath27-sized structure for @xmath28-approximate shortest path queries in @xmath11 time , and also pointed out that a method of clarkson  @xcite can be applied to answer @xmath29-approximate shortest path queries in @xmath11 time using @xmath14 space and @xmath30 preprocessing time .",
    "later , arikati et al .",
    "@xcite have improved the above results based on planar spanners .",
    "the problem on polyhedral surfaces also have been considered .",
    "agarwal et al .",
    "@xcite presented a data structure of size @xmath31 that answers a two - point shortest path query on a given _ convex _ polytope in @xmath32 time after @xmath31 preprocessing time for any fixed @xmath33 and any @xmath34 .",
    "they also considered the problem where the query points are restricted to lie on the edges of the polytope , reducing the bounds by a factor of @xmath1 from the general case .",
    "recently , cook iv and wenk  @xcite presented an improved method using kinetic voronoi diagrams .",
    "we are given as input a polygonal domain @xmath4 with @xmath5 holes and @xmath1 corners .",
    "more precisely , @xmath4 consists of an outer simple polygon in the plane @xmath35 and a set of @xmath5 ( @xmath36 ) disjoint open simple polygons inside @xmath37 . as a set , @xmath4 is the region contained in its outer polygon _ excluding _ the holes , also called the _ free space_. the complement of @xmath4 in the plane is regarded as _",
    "obstacles _ so that any feasible path does not cross the boundary @xmath17 and lies inside @xmath4 .",
    "it is well known from earlier works that there exists a _",
    "shortest ( obstacle - avoiding ) path _ between any two points @xmath38  @xcite .",
    "let @xmath39 be the set of all corners of @xmath4 .",
    "then any shortest path from @xmath40 to @xmath41 is a simple polygonal path and can be represented by a sequence of line segments connecting points in @xmath42  @xcite .",
    "the _ length _ of a shortest path is the sum of the euclidean lengths of its segments .",
    "the geodesic distance , denoted by @xmath43 , is the length of a shortest path between @xmath7 and @xmath8 .",
    "also , we denote by @xmath44 the euclidean length of segment @xmath45 .    a _ two - point shortest path query _ is given as a pair of points @xmath46 with @xmath47 and asks to find a shortest path between @xmath7 and @xmath8 . in this paper , we deal with a restriction where the queried points @xmath7 and @xmath8 lie on the boundary @xmath17 .    a _ shortest path tree _ @xmath48 for a given source point @xmath40 is a spanning tree on the corners @xmath39 plus the source @xmath7 such that the unique path to any corner @xmath49 from the source @xmath7 in @xmath48 is a shortest path between @xmath7 and @xmath50 .",
    "the combinatorial complexity of @xmath48 for any @xmath40 is at most linear in @xmath1 .",
    "a shortest path map @xmath51 for the source @xmath7 is a decomposition of the free space @xmath4 into cells in which any point @xmath52 has a shortest path to @xmath7 through the same sequence of corners in @xmath39 .",
    "once @xmath48 is obtained , @xmath51 can be computed as an additively weighted voronoi diagram of @xmath53 with weight assigned by the geodesic distance to @xmath7  @xcite ; thus , the combinatorial complexity of @xmath51 is linear .",
    "a cell of @xmath51 containing a point @xmath54 has the common last corner @xmath55 along the shortest path from @xmath7 to @xmath8 ; we call such a corner @xmath50 the _ root _ of the cell or of @xmath8 with respect to @xmath7 . an @xmath27 time algorithm , using @xmath10 working space , to construct @xmath48 and @xmath51 is presented by hershberger and suri  @xcite .",
    "an _ spt - equivalence decomposition _",
    "@xmath56 of @xmath4 is the subdivision of @xmath4 into cells in which every point has topologically equivalent shortest path tree .",
    "an @xmath56 can be obtained by overlaying @xmath1 shortest path maps @xmath57 for every corner @xmath49",
    "hence , the complexity of @xmath56 is @xmath58 .",
    "note that @xmath59 consists of at most @xmath14 points ; they are intersection points between any edge of @xmath57 for any @xmath49 and the boundary @xmath17 .",
    "we call those intersection points , including the corners @xmath39 , the _",
    "breakpoints_. the breakpoints induce @xmath14 intervals along @xmath17 .",
    "we shall say that a breakpoint is _ induced by @xmath57 _ if it is an intersection of an edge of @xmath57 and @xmath17 .",
    "given a set @xmath60 of algebraic surfaces and surface patches in @xmath61 , the _ lower envelope _",
    "@xmath62 of @xmath60 is the set of pointwise minima of all given surfaces or patches in the @xmath63-th coordinate .",
    "the _ minimization diagram _",
    "@xmath64 of @xmath60 is a decomposition of @xmath65 into faces , which are maximally connected region over which @xmath62 is attained by the same set of functions . in particular , when @xmath66 , the minimization diagram @xmath64 is simply a projection of the lower envelope onto the @xmath67-plane .",
    "analogously , we can define the _ upper envelope _ and the _ maximization diagram_.    as we intensively exploit known algorithms on algebraic surfaces or surface patches and their lower envelopes , we assume a model of computation in which several primitive operations dealing with a constant number of given surfaces can be performed in constant time : testing if a point lies above , on or below a given surface , computing the intersection of two or three given surfaces , projecting down a given surface , and so on .",
    "such a model of computation has been adopted in many research papers ; see  @xcite .",
    "in this section , we present a data structure that answers a two - point query restricted on @xmath17 in @xmath11 time . to ease discussion , we parameterize the boundary @xmath17 . since @xmath17 is a union of @xmath68 closed curves , it can be done by parameterizing each curve by arc length and merging them into one .",
    "thus , we have a bijection @xmath69 that maps a one - dimensional interval into @xmath17 , where @xmath70 denotes the total lengths of the @xmath68 closed curves forming @xmath17 .",
    "conversely , the inverse of @xmath7 maps each interval along @xmath17 to an interval of @xmath71 .",
    "a shortest path between two points @xmath72 is either the segment @xmath45 or a polygonal chain through corners in @xmath39 .",
    "thus , unless @xmath73 , the geodesic distance is taken as the minimum of the following functions @xmath74 over all @xmath75 , which are defined as follows : @xmath76 where @xmath77 , for any point @xmath78 , denotes the _ visibility profile _ of @xmath52 , defined as the set of all points @xmath79 that are _ visible from _ @xmath52 ; that is , @xmath80 lies inside @xmath4 .",
    "the symbol @xmath81 can be replaced by an upper bound of @xmath82 ; for example , the total length @xmath70 of the boundary of the polygonal domain @xmath4 .    since the case where @xmath83 is visible from @xmath84 ,",
    "so the shortest path between them is just the segment @xmath85 , can be checked in @xmath11 time using @xmath15 space  @xcite , we assume from now on that @xmath86 . hence , our task is to efficiently compute the lower envelope of the @xmath14 functions @xmath87 on a 2-dimensional domain @xmath88 .      using known results on the lower envelope of the algebraic surfaces in @xmath89-dimension , we can show that a data structure of size @xmath90 for @xmath11 query can be built in @xmath90 time as follows .",
    "fix a pair of intervals @xmath91 and @xmath92 induced by the breakpoints . since @xmath91 belongs to a cell of an spt - equivalence decomposition , @xmath93 is independent of choices over all @xmath94 .",
    "therefore , the set @xmath95 of corners visible from @xmath83 is also independent of the choice of @xmath96 and further , for a fixed @xmath97 , there exists a unique @xmath55 that minimizes @xmath98 for any @xmath99 over all @xmath49  @xcite .",
    "this implies that for each such subdomain @xmath100 we extract at most @xmath1 functions , possibly appearing at the lower envelope .",
    "moreover , in @xmath101 , such a function is represented explicitly ; for @xmath102 and @xmath103 , @xmath104 where @xmath105 and @xmath106 are the @xmath52- and the @xmath107-coordinates of @xmath83 , and @xmath108 and @xmath109 are the @xmath52- and the @xmath107-coordinates of a point @xmath110 .",
    "note that @xmath105 and @xmath106 are linear functions in @xmath111 by our parametrization .",
    "for each @xmath112 , there exists a corner @xmath113 that minimizes @xmath114 in @xmath101 over all @xmath115 .",
    "therefore , the function @xmath116 on @xmath101 is well - defined .",
    "observe that the graph of @xmath117 is an algebraic surface with degree at most @xmath118 in @xmath89-dimensional space . applying any efficient algorithm that computes the lower envelope of algebraic surfaces in @xmath119",
    ", we can compute the lower envelope of the functions @xmath117 in @xmath120 time  @xcite . repeating this for every such subdomain @xmath121 yields @xmath90 space and preprocessing time .    since we would like to provide a point location structure in domain @xmath122 , we need to find the minimization diagram @xmath123 of the computed lower envelope .",
    "fortunately , our domain is @xmath124-dimensional , so we can easily project it down on @xmath122 and build a point location structure with an additional logarithmic factor .    in another way around , one could try to deal with _ surface patches _ on the whole domain @xmath122 .",
    "consider a fixed corner @xmath125 and its shortest path map @xmath126 .",
    "the number of breakpoints induced by @xmath126 is at most @xmath26 , including the corners @xmath39 themselves .",
    "this implies at most an @xmath14 number of combinatorially different paths between any two boundary points @xmath83 and @xmath84 via @xmath127 .",
    "that is , for a pair of intervals @xmath91 and",
    "@xmath92 , we have a unique path via @xmath127 and its length is represented by a partial function of @xmath128 defined on a rectangular subdomain @xmath100 .",
    "hence , we have @xmath14 such partial functions for each @xmath125 , and thus @xmath129 in total .",
    "each of them defines an algebraic surface patch of constant degree on a rectangular subdomain .",
    "consequently , we can apply the same algorithm as above to compute the lower envelope of those patches in @xmath130 time and space .",
    "now , we present a way of proper grouping of subdomains to reduce the time / space bound by a factor of @xmath1 .",
    "we call a subdomain @xmath100 , where both @xmath91 and @xmath92 are intervals induced by breakpoints , a _ grid cell_. thus , @xmath122 consists of @xmath58 grid cells",
    ". we will decompose @xmath122 into @xmath129 _ blocks _ of @xmath26 grid cells .",
    "consider a pair of boundary edges @xmath131 and let @xmath132 and @xmath133 be the number of breakpoints on @xmath134 and on @xmath135 , respectively .",
    "let @xmath136 and @xmath137 be the breakpoints on @xmath134 and on @xmath135 , respectively , in order @xmath138 and @xmath139 .",
    "take @xmath133 grid cells with @xmath140 and let @xmath141 be their union .",
    "we redefine the functions @xmath87 on domain @xmath142 . as discussed above , for any @xmath143",
    ", we have a common subset @xmath144 of corners visible from @xmath83 .    for any @xmath97 , let @xmath145 be a function defined on @xmath142 and @xmath146 be the number of breakpoints on @xmath135 induced by @xmath126 .",
    "the following is our key observation .",
    "[ lemma : patch ] the graph of @xmath147 on @xmath142 consists of at most @xmath148 algebraic surface patches with constant maximum degree .    if @xmath149 for any @xmath150 and some @xmath151 , then @xmath84 lies in a cell of @xmath126 with root @xmath50 ; by the definition of @xmath117 , the involved path goes directly from @xmath83 to @xmath127 and follows a shortest path from @xmath127 to @xmath84 .",
    "on the other hand , when we walk along @xmath135 as @xmath152 increases from @xmath153 to @xmath154 , we encounter @xmath155 breakpoints induced by @xmath126 ; thus , @xmath156 cells of @xmath126 .",
    "hence , the lemma is shown .",
    "moreover , the partial function corresponding to each patch of @xmath157 is defined on a rectangular subdomain @xmath158 for some @xmath159 .",
    "this implies that the lower envelope of @xmath117 on @xmath142 is represented by that of at most @xmath160 surface patches .",
    "though this envelope can be computed in @xmath161 time , we do further decompose @xmath142 into @xmath162 blocks of at most @xmath1 grid cells .",
    "this can be simply done by cutting @xmath142 at @xmath163 for each @xmath164 . for each such block of grid cells",
    ", we have at most @xmath165 surface patches and thus their lower envelope can be computed in @xmath120 time .",
    "hence , we obtain the following consequence",
    ".    one can preprocess a given polygonal domain @xmath4 in @xmath13 time into a data structure of size @xmath13 that answers the two - point shortest path query restricted to the boundary @xmath17 in @xmath11-time , where @xmath166 is an arbitrarily small positive number .",
    "recall that @xmath167 . for a pair of boundary edges",
    "@xmath134 and @xmath135 , we can compute the lower envelope of the functions @xmath87 in @xmath168 . summing this over every pair of boundary edges",
    ", we have @xmath169 a point location structure on the minimization diagram can be built with additional logarithmic factor , which is subdued by @xmath170 .",
    "the algorithms we described so far compute the lower envelope of surface patches in @xmath89-space in order to obtain the minimization diagram @xmath123 of the functions @xmath87 . in this subsection",
    ", we introduce a way to compute @xmath123 rather directly on @xmath122 , based on more careful analysis .    basically , we make use of the same scheme of partitioning the domain @xmath122 into blocks of ( at most ) @xmath1 grid cells as in section  [ sec : log_query].2 .",
    "let @xmath142 be such a block defined as @xmath171 such that @xmath172 is an interval induced by the breakpoints and @xmath173 is a union of @xmath174 consecutive intervals in which we have @xmath175 breakpoints @xmath176 .    by lemma  [ lemma : patch ]",
    ", the functions @xmath177 restricted to @xmath142 can be split into at most @xmath165 partial functions @xmath178 with @xmath179 defined on a subdomain @xmath180 .",
    "each @xmath181 is represented explicitly as @xmath182 in @xmath183 , so that we have @xmath184 for any @xmath185 and some @xmath186 .",
    "note that it may happen that @xmath187 or @xmath188 for some @xmath189 and @xmath190 ; in particular , if @xmath187 , we have @xmath191 .",
    "also , as discussed in section  [ sec : log_query].2 , @xmath183 is represented as @xmath192 for some @xmath193 .    in this section ,",
    "we take the partial functions @xmath178 into account , and thus the goal is to compute the minimization diagram @xmath123 of surface patches defined by the @xmath178 .",
    "we start with an ordering on the set @xmath144 of corners visible from @xmath83 for any @xmath194 based on the following observation .",
    "[ lemma : ordering ] the angular order of corners in @xmath144 seen at @xmath111 is constant if @xmath111 varies within @xmath172 .",
    "if this is not true , we have such an @xmath195 that @xmath196 and two corners @xmath197 in @xmath144 are collinear . since corners lie on the boundary of an obstacle , one of @xmath50 and @xmath198 is not visible from @xmath83 locally near @xmath199 ; that is , @xmath196 is a breakpoint , a contradiction",
    ".     increases , @xmath83 moves in direction where the obstacle is to the right . ]    without loss of generality , we assume that as @xmath111 increases , @xmath83 moves along @xmath17 in direction that the obstacle lies to the _ right _ ; that is , @xmath83 moves _ clockwise _ around each hole and _ counter - clockwise _ around the outer boundary of @xmath4 .",
    "( see figure  [ fig : orientation ] . ) by lemma  [ lemma : ordering ] , we order the corners in @xmath144 in counter - clockwise order at @xmath83 for any @xmath143 ; let @xmath200 be a total order on @xmath144 such that @xmath201 if and only if @xmath202 .    from now on , we investigate the set @xmath203 which is a projection of the intersection of two surface patches defined by @xmath178 and @xmath204 .",
    "one can easily check that @xmath205 is a subset of an algebraic curve of degree at most @xmath206 .",
    "[ lemma : monotone ] the set @xmath205 is @xmath152-monotone .",
    "that is , for fixed @xmath152 , there is at most one @xmath143 such that @xmath207 .",
    "if @xmath207 , we have equation @xmath208 . from the equation ,",
    "we get @xmath209 .",
    "if we fix @xmath152 as constant , @xmath210 remains a constant even if @xmath111 varies within @xmath172 .",
    "thus , @xmath83 is an intersection point with line segment @xmath211 and a branch @xmath212 of a hyperbola whose foci are @xmath213 and @xmath214 .",
    "if @xmath215 consists of two points , then the line @xmath216 through @xmath213 and @xmath214 must cross @xmath211 at a point @xmath217 ; @xmath216 is the transverse axis of @xmath212 and both @xmath213 and @xmath214 lie in one side of the line supporting @xmath211 .",
    "such a crossing point @xmath217 is a breakpoint by definition but we do not have any breakpoint within @xmath211 since @xmath172 is an interval induced by the breakpoints , a contradiction .",
    "[ lemma : increasing ] the set @xmath205 is either an empty set or an open curve whose endpoints lie on the boundary of @xmath218 .",
    "moreover , @xmath205 is either a linear segment parallel to the @xmath152-axis or @xmath111-monotone .",
    "let @xmath91 and @xmath92 be intervals such that @xmath219 .",
    "note that @xmath220 and @xmath221 for some @xmath222 .",
    "first , note that if @xmath187 , @xmath223 and thus @xmath224 , so the lemma is true .",
    "thus , we assume that @xmath225 .",
    "regarding @xmath226 and @xmath227 , there are two cases : @xmath188 or @xmath228 . in the former case , we get @xmath229 from equation @xmath208 .",
    "observe that variable @xmath152 is readily eliminated from the equation , and thus if there exists @xmath230 with @xmath231 , we have @xmath232 for every other @xmath233 .",
    "hence , by lemma  [ lemma : monotone ] , @xmath205 is empty or a straight line segment in @xmath218 which is parallel to @xmath152-axis , and thus the lemma is shown .",
    "now , we consider the latter case where @xmath234 . without loss of generality",
    ", we assume that @xmath235 .",
    "recall that if @xmath236 , then @xmath237 for any @xmath111 in the interior of @xmath91 .",
    "we denote @xmath238 and @xmath239 . on the other hand",
    ", we also have a similar relation for @xmath226 and @xmath227 .",
    "let @xmath240 and @xmath241 .",
    "observe that @xmath242 and @xmath243 are continuous functions of @xmath152 , and if @xmath244 at @xmath245 , then @xmath246 is a breakpoint induced by @xmath247 or @xmath248 . since @xmath92 contains no such breakpoint induced by @xmath247 or @xmath248 in its interior , either @xmath249 or @xmath250 for all @xmath152 in the interior of @xmath92 ; that is , the sign of @xmath251 is constant .",
    "since for any @xmath252 with @xmath253 we have @xmath254 by our parametrization , we can represent @xmath255 and @xmath256 , where @xmath257 , @xmath258 , @xmath259 and @xmath260 are constants depending on @xmath213 , @xmath226 , and parametrization @xmath7 .",
    "more specifically , @xmath261 denotes a signed distance between @xmath83 and the perpendicular foot of @xmath213 onto the line supporting @xmath262 , and @xmath258 is the distance between @xmath213 and the line supporting @xmath262 .",
    "see figure  [ fig : bisector ] .",
    "thus , @xmath181 can represented as @xmath263 .    ]",
    "now , we differentiate the both sides of equation @xmath264 by @xmath152 to obtain the derivative @xmath265 : @xmath266 rearranging this , we obtain @xmath267 since @xmath268 , we have @xmath269 . also , as discussed above , @xmath251 has a constant sign when @xmath152 varies within the interior of @xmath92 .",
    "thus , @xmath270 has a constant sign , and @xmath271 also has a constant sign at any @xmath207 .",
    "furthermore , @xmath271 is continuous and has no singularity in the interior of @xmath272 .",
    "this , together with lemma  [ lemma : monotone ] , proves the lemma .",
    "now , we know that @xmath205 can be seen as the graph of a partial function @xmath273 . also , lemma  [ lemma : increasing ] implies that @xmath205 _ bisects _ @xmath218 into two connected regions @xmath274 and @xmath275 , where @xmath276 and @xmath277 .",
    "let @xmath278 be the set of points @xmath128 where the minimum of @xmath279 over all @xmath190 is attained by @xmath181 .",
    "we then have @xmath280 for each @xmath189 .    for easy explanation , from now on ,",
    "we regard the @xmath111-axis as the _ vertical axis _ in @xmath122 so that we can say a point lies _ above _ or _ below _ a curve in this sense .",
    "the idea of computing @xmath278 is to use the lower and the upper envelopes of the bisecting curves @xmath205 . in order to do so ,",
    "we extend @xmath205 to cover the whole @xmath152-interval @xmath281 in @xmath282 by following operation : for each endpoint of @xmath205 , if it does not lie on the vertical line @xmath283 or @xmath284 , attach a horizontal segment to reach the vertical line as shown in figure  [ fig : envelopes](a ) .",
    "we denote the resulting curve by @xmath285 ; if @xmath286 , define @xmath285 as the horizontal segment connecting two points @xmath287 and @xmath288 in @xmath218 .",
    "observe now that @xmath285 bisects @xmath218 into regions @xmath274 and @xmath275 , which lie _ above _ and _ below _",
    "@xmath285 , respectively .",
    "( dashed line ) to @xmath285 by attaching horizontal segments ( solid line ) ; ( b ) @xmath289 , ( c ) @xmath290 , and ( d ) the region @xmath278 between them . here",
    ", the dotted boxes are grid cells whose union is @xmath183 and the @xmath111-axis appears vertical . ]    let @xmath291 be the region above @xmath285 and @xmath292 be the region below @xmath285 . for a fixed @xmath189 with @xmath179 , we classify the @xmath285 into two sets @xmath293 and @xmath294 such that @xmath295 if @xmath296 or @xmath297 if @xmath298 . recall that @xmath299 .",
    "thus , we have @xmath300 the boundary of @xmath301 in @xmath183 is the lower envelope @xmath289 of @xmath293 ; symmetrically , the boundary of @xmath302 in @xmath183 is the upper envelope @xmath290 of @xmath294 .",
    "therefore , @xmath303 , the region below the lower envelope @xmath289 of @xmath293 and above the upper envelope @xmath290 of @xmath294 , and it can be obtained by computing the overlay of two envelopes @xmath289 and @xmath290 .",
    "see figure  [ fig : envelopes](b)(d ) .",
    "we exploit known results on the davenport - schinzel sequences to obtain the following lemma  @xcite .",
    "[ lemma : ds ] the set @xmath278 is of combinatorial complexity @xmath304 and can be computed in @xmath305 time , where @xmath306 is the maximum length of a davenport - schinzel sequence of order @xmath21 on @xmath1 symbols .",
    "@xmath285 consists of at most three arcs , at most one algebraic curve of degree @xmath206 and at most two straight segments .",
    "thus , we have at most @xmath307 algebraic arcs of degree at most @xmath206 .",
    "any two such arcs can intersect each other at most @xmath308 times by bzout s theorem  @xcite .",
    "thus , each of @xmath289 and @xmath290 has complexity @xmath304 and can be computed in @xmath309 time  @xcite .    after sorting the vertices on these envelopes in @xmath152-increasing order",
    ", we can easily specify all intersections between @xmath289 and @xmath290 in the same bound .",
    "it should be noted here that the exact constant @xmath310 is not relevant ; it only matters that this is some constant .",
    "we can compute the minimization diagram @xmath123 by computing each @xmath278 in @xmath311 time . in the same time",
    "bound , we can build a point location structure on @xmath123 .",
    "finally , we conclude our main theorem .",
    "[ thm : log - query ] one can preprocess a given polygonal domain @xmath4 in @xmath312 time into a data structure of size @xmath18 that answers the two - point shortest path query restricted on the boundary @xmath17 in @xmath11 time .",
    "in this section , we provide a space / query - time tradeoff .",
    "we use the technique of partitioning @xmath39 , which has been introduced in chiang and mitchell  @xcite .",
    "let @xmath313 be a positive number with @xmath24 .",
    "we partition the corner set @xmath39 into @xmath314 subsets @xmath315 of near equal size @xmath316 . for each such subset @xmath317 of corners ,",
    "we run the algorithm described above with little modification : we build the shortest path maps @xmath126 only for @xmath318 and care about only @xmath319 breakpoints induced by such @xmath126 .",
    "thus , we consider only the paths from @xmath83 via @xmath320 and @xmath55 to @xmath84 , and thus @xmath319 functions @xmath87 for @xmath318 and @xmath49 .    since we deal with less number of functions , the cost of preprocessing reduces from @xmath26 to @xmath316 at several places .",
    "we take blocks of @xmath316 grid cells contained in @xmath122 and the number of such blocks is @xmath321 . for each such block",
    ", we spend @xmath322 time to construct a point location structure for the minimization map @xmath323 of the functions . iterating all such blocks",
    ", we get running time @xmath324 for a part @xmath317 of @xmath39 . repeating this for all such subsets @xmath317 yields @xmath325 construction time .",
    "each query is processed by a series of @xmath21 point locations on every @xmath323 , taking @xmath326 time .",
    "[ thm : tradeoff ] let @xmath313 be a fixed parameter with @xmath24 . using @xmath325 time and @xmath327 space",
    ", one can compute a data structure for @xmath328-time two - point shortest path queries restricted on the boundary @xmath17 .",
    "remark that when @xmath329 , we obtain theorem  [ thm : log - query ] , and that @xmath3 time and space is enough for sublinear time query . note",
    "that if @xmath26 time is allowed for processing each query , @xmath14 space and @xmath330 preprocessing time is sufficient .",
    "our approach easily extends to the two - point queries in which queried points are restricted to be on a given segment or a given polygonal chain lying in the free space @xmath4 .",
    "let @xmath331 and @xmath332 be two sets of @xmath333 and @xmath334 line segments , respectively , within @xmath4 . in this section ,",
    "we restrict a query pair @xmath46 of points to lie on @xmath331 and @xmath332 each",
    ". we will refer to this type of two - point query as a _",
    "@xmath335-restricted two - point query_. as we did above , we take two segments @xmath336 and @xmath337 and let @xmath132 and @xmath133 be the number of breakpoints  the intersection points with an edge of @xmath57 for some @xmath49  on @xmath134 and @xmath135 , respectively . also , parameterize @xmath134 and @xmath135 as above so that we have two bijections",
    "@xmath338 \\to s$ ] and @xmath339 \\to t$ ] .",
    "any path from a point on @xmath134 leaves to one of the two sides of @xmath134 .",
    "thus , the idea of handling such a segment within the free space @xmath4 is to consider two cases separately . here , we regard @xmath134 and @xmath135 as directed segments in direction of movement of @xmath83 and @xmath340 as @xmath111 and @xmath152 increases , and consider only one case where paths leave @xmath134 to its left side and arrive at @xmath135 from its left side .",
    "the other cases are analogous .",
    "then , the situation is almost identical to that we considered in section  [ sec : log_query].2 . for a pair of segments @xmath134 and @xmath135",
    ", we can construct a query structure in @xmath341 time .",
    "unfortunately , @xmath132 and @xmath133 can be as large as @xmath14 , yielding the same time bound for @xmath342-restricted two - point queries in the worst case .",
    "thus , in the worst case , we need additional factor of @xmath343 as follows .    [ thm : convexchain ] let @xmath331 and @xmath332 be two sets of @xmath333 and @xmath334 ( possibly crossing ) line segments , respectively , within @xmath4 , and @xmath313 be a fixed parameter with @xmath24 . then , using @xmath344 time and @xmath345 space , one can compute a data structure for @xmath346-time @xmath335-restricted two - point queries .",
    "remark that in practice we expect that the number of breakpoints @xmath347 and @xmath348 is not so large as @xmath349 that the preprocessing and required storage would be much less than the worst case bounds .",
    "in this paper , we posed the variation of the two - points query problem in polygonal domains where the query points are restricted in a specified subset of the free space .",
    "and we obtained significantly better bounds for the boundary - restricted two - point queries than for the general queries .    despite of its importance ,",
    "the two - point shortest path query problem for the polygonal domains is not well understood .",
    "there is a huge gap ( @xmath26 to @xmath12 ) about logarithmic query between the simple polygon case and the general case but still the reason why we need such a large storage is still unclear . on the other hand , restriction on the query domain provides another possibility of narrowing the gap with several new open problems : ( 1 ) what is the right upper bound on the complexity of the lower envelope defined by the functions @xmath87 on the parameterized query domain ? and what about any lower bound construction ? ( 2 ) if the query domain is a simple @xmath124-dimensional shape , such as a triangle , then can one achieve a better performance than the general results by chiang and mitchell ?    we would carefully conjecture that our upper bound @xmath0 for logarithmic query could be improved to @xmath350 .",
    "indeed , we have @xmath58 grid cells on the parameterized query domain and whenever we cross their boundaries , changes in the involved functions are usually bounded by a constant amount .",
    "thus , if one could find a clever way of updating the functions and their lower envelope , it would be possible to achieve an improved bound .",
    "the authors thank matias korman for fruitful discussion .",
    "s.  r. arikati , d.  z. chen , l.  p. chew , g.  das , m.  h.  m. smid , and c.  d. zaroliagis .",
    "planar spanners and approximate shortest path queries among obstacles in the plane . in _ proc .",
    "sympos . algo .",
    "( esa96 ) _ , pages 514528 , 1996 ."
  ],
  "abstract_text": [
    "<S> we consider a variant of two - point euclidean shortest path query problem : given a polygonal domain , build a data structure for two - point shortest path query , provided that query points always lie on the boundary of the domain . as a main result </S>",
    "<S> , we show that a logarithmic - time query for shortest paths between boundary points can be performed using @xmath0 preprocessing time and @xmath0 space where @xmath1 is the number of corners of the polygonal domain and the @xmath2-notation suppresses the polylogarithmic factor . </S>",
    "<S> this is realized by observing a connection between davenport - schinzel sequences and our problem in the parameterized space . </S>",
    "<S> we also provide a tradeoff between space and query time ; a sublinear time query is possible using @xmath3 space . </S>",
    "<S> our approach also extends to the case where query points should lie on a given set of line segments . </S>"
  ]
}