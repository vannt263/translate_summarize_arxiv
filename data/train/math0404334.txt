{
  "article_text": [
    "in this paper we study an instance of the so - called _ form - finding problems _ for tensegrity structures . these have brought special attention both among mathematicians and engineers since the seminal works of kenneth snelson around @xmath2 ( see  @xcite ) .",
    "roughly speaking , a form - finding problem for a tensegrity structure asks to determine a geometric configuration of points and straight edges in @xmath0 ( typically @xmath1 ) such that the whole structure is in a self - tensional equilibrium .",
    "tensegrity _ was coined from _ tension _ and _ integrity _ by buckminster fuller , deeply impressed by snelson s work .",
    "apart from a purely mathematical interest   @xcite , understanding these structures has applications to architecture and structural engineering  @xcite and has led to interesting models for viruses and cellular structures  @xcite .",
    "it is also considered a useful tool for the study of deployable structures  @xcite .",
    "previous works have proposed a number of different approaches to solve form - finding problems , which can be found in the recent review  @xcite . in particular , the present paper deals with the form - finding problem of building tensegrity structures with a given underlying graph @xmath3 , in a given @xmath0 .",
    "the graph has to be understood as an _ abstract graph _",
    ", i.e. , a set of vertices and pairs of vertices ( edges ) .",
    "we aim to solve the following two problems :    * first , to decide whether @xmath3 can be the underlying graph of a tensegrity structure in  @xmath0 . * in case such a tensegrity with underlying graph @xmath3 is possible , to characterize the relative position of its vertices .    in order to solve these problems ,",
    "we first look for decompositions of tensegrities into basic instances , called _ atoms_. this motivates a combinatorial method that allows to decompose a graph @xmath3 into the smallest graphs that can underlie a tensegrity . in order to build up a tensegrity with graph @xmath3",
    ", we propose to reverse its decomposition : we show that this solves the above problems for a certain class of graphs and we present two different approaches .",
    "the first one looks at the geometric structure of the tensegrity ; it is quite visual and provides intuition of the intrinsic properties of tensegrity structures .",
    "however , it becomes difficult to use for complicated structures .",
    "the second approach condenses in a matrix the information about the tensegrity ; this allows to use tools from symbolic computation , despite being less intuitive .",
    "the paper is organized as follows : the basic notions and results are introduced in section  [ section : preliminaries ] .",
    "then , section  [ section : geometric approach ] introduces a method to decompose a tensegrity into atoms , which motivates a decomposition of the abstract graph @xmath3 , reversed then by geometric means .",
    "finally , in section  [ section : symbolic approach ] a _ rigidity matrix _ is used for a symbolic resolution .",
    "in this section we introduce the basic notions and results used in the paper . despite it",
    "aims to be self - contained , an interested reader can look at  @xcite for further examples and a more detailed overview of the mathematical concepts . let us introduce first the rigorous definition of  self - tensional equilibrium \" :    [ def : self - stress ] let @xmath4 be an abstract graph :    * a _ framework _",
    "@xmath5 in @xmath0 is an embedding of @xmath3 on a finite point configuration @xmath6 in @xmath0 , with straight edges . in the sequel",
    "we will focus on _ general position _ point configurations ( no @xmath7 points lie on the same hyperplane ) . *",
    "a _ stress _",
    "@xmath8 on a framework is an assignment of scalars @xmath9 ( called _ tensions _ ) to its edges .",
    "observe that @xmath10 , since they refer to the same edge .",
    "* such a @xmath8 is called a _ self - stress _ if , in addition , the following equilibrium condition is fulfilled at every vertex : @xmath11 that is , for each vertex @xmath12 the scaled sum of incident vectors @xmath13 is zero .",
    "observe that the null stress is always a self - stress , of no interest for us .",
    "note also that all scalar multiples of a self - stress ( in particular its opposite ) are self - stresses as well .",
    "we will see later that , indeed , the space of self - stresses on a given graph is a vector space .",
    "[ lemma : incidence.degree ] let @xmath14 be a vertex of a @xmath15-dimensional framework @xmath5 such that @xmath16 is in general position .",
    "given a non - null self - stress on @xmath5 , either at least @xmath7 of the edges incident to @xmath17 receive non - null tension , or all of them have null tension .",
    "the result is true for any @xmath15 , but the reader may consider @xmath1 here .",
    "let @xmath18 be the number of edges incident to @xmath17 that have non - null tension .",
    "the equilibrium condition on @xmath17 implies having @xmath18 vectors in @xmath0 , with common tail , which add up to the zero vector . for @xmath19 ,",
    "this is only possible if their @xmath20 endpoints do not span a @xmath18-space .",
    "but either @xmath21 or this contradicts the general position assumption .    as a consequence",
    ", the next property makes particularly interesting the study of a certain family of general position frameworks , the so - called _ @xmath22-regular _ ones , for which a null tension on a single edge propagates to the rest of them :    [ coro : regular.non - null ] given a @xmath15-dimensional framework all of whose points are in general position and have exactly @xmath7 incident edges , a self - stress is non - null if , and only if , it is non - null on every edge .",
    "the following definition introduces our final object of study , which is a physical model of the mathematical objects defined above :    [ def : tensegrity.structure ] we define a _ tensegrity structure _ @xmath23 to be a self - stressed framework in which :    * edges @xmath24 such that @xmath25 have been replaced by inextensible _ cables _ ( its endpoints constrained not to get further apart ) , * edges with @xmath26 have been replaced by unshrinkable _ struts _ ( endpoints constrained not to get closer together ) , and * edges with @xmath27 have been removed .",
    "if no confusion is possible , a tensegrity structure @xmath23 will be denoted by just @xmath28 . for another physical interpretation",
    ", one can think of cables and struts as springs endowed with a certain tension , respectively inwards and outwards .",
    "that is ; cables and struts incident to point @xmath12 have respectively tensions in the direction of + @xmath13 ( inwards ) and -@xmath13 ( outwards ) , see figure  [ fig : signs ] .",
    "left : two cables ( @xmath29 ) and a strut ( @xmath30 ) incident to @xmath12 .",
    "right : their representation as springs with inwards and outwards tensions . ]",
    "observe that , given a tensegrity structure , it might be possible to replace the struts by bars which react to the surrounding tensions .",
    "for example , if we replace the strut in figure  [ fig : signs ] by a bar , this will receive an outwards tension at @xmath12 , as a reaction to the sum of cable tensions .",
    "such a replacement is usual when constructing tensegrity sculptures , like those in  @xcite .",
    "the most emblematic tensegrity structure is shown in figure  [ fig : otprism ] . named _",
    "oblique triangular prism _ with rotational symmetry , it is composed of nine cables , six of which form two copies of an equilateral triangle , the top one rotated @xmath31 degrees , joined by three struts alternating the rest of cables .",
    "thick edges denote the struts , which could be replaced by bars as before .     the oblique triangular prism . ]",
    "the last definition in this section introduces the smallest tensegrities possible , which we will show in section  [ section : geometric approach ] to be the fundamental bricks for building up any tensegrity :    [ def : atoms ] we define a _ self - stressed atom _ in @xmath0 ( @xmath1 ) to be a general position realization of the complete graph @xmath32 , together with its unique ( up to constant multiplication ) non - null self - stress .",
    "the _ tensegrity atoms _ are then obtained replacing edges by cables and struts .",
    "when no confusion is possible , we will just refer to _",
    "atoms_.     types of tensegrity atoms in @xmath33 ( left ) and @xmath34 ( right ) . ]    figure  [ fig : tensgratoms ] shows half of the possible tensegrity atoms in @xmath0 for @xmath1 , where thick edges denote struts . the other half is obtained by interchanging cables and struts or , equivalently , by considering the opposite tensions .",
    "it is not difficult to check , using lemma  [ lemma : incidence.degree ] , that configurations with fewer points or edges do not admit self - stresses apart from the null one .",
    "the non - trivial fact that the above frameworks do admit a unique ( up to constants ) non - null self - stress appears in  @xcite , where existence is proved by the following result .    [",
    "prop : dependence.stress ] let @xmath35 , @xmath36 be an affine dependence on a point set @xmath37 . then",
    ", @xmath38 defines a self - stress on the complete graph @xmath39 .    for any @xmath40",
    ", we have : @xmath41 which equals zero .    in order to prove the uniqueness up to constants , consider",
    "two different self - stresses , one not a scalar multiple of the other .",
    "then some linear combination of them would cancel the tension at a particular edge but not at all of them , in contradiction with corollary  [ coro : regular.non - null ] . note that we are using the claimed fact that self - stresses form a vector space , as will be shown at the beginning of the next subsection .",
    "in this section we present a geometric algorithm to decompose a tensegrity into atoms .",
    "this decomposition motivates a combinatorial one , which opens the way towards the resolution of the two problems posed in section  [ section : introduction ] .",
    "let @xmath5 and @xmath42 be two self - stressed frameworks such that @xmath43 is a point configuration in general position .",
    "let @xmath8 and @xmath44 be their self - stresses . for the framework @xmath45 obtained by union of vertices and edges , one can define the sum of self - stresses @xmath46 in the natural way : assign tension @xmath47 to common edges @xmath24 and maintain the initial tension at the others .",
    "it is easy to observe that equations  ( [ eq : equilibrium ] ) are fulfilled and hence @xmath46 is indeed a self - stress .",
    "furthermore , the space of self - stresses on a given graph @xmath4 together with this sum and the product by a scalar form a vector subspace of @xmath48 , when the latter is identified with the space of all self - stresses .",
    "abusing notation , we denote by @xmath49 the self - stressed framework obtained .",
    "observe that , after this addition is performed , one can appropriately replace edges by cables and struts in order to obtain a tensegrity structure @xmath50 .",
    "hence , the sum of tensegrities yields another tensegrity .",
    "[ obs : sum.tensegrity ] we will only consider this kind of addition when @xmath16 and @xmath51 have at least  @xmath15 points in common ; otherwise we obtain either two separate tensegrity structures or one of them hanging from the other .    the main result in this section states that , reciprocally , under our conditions every tensegrity can be decomposed into a sum of tensegrity atoms :    * ( atomic decomposition of tensegrities ) * [ thm : decomposition ] every non - null tensegrity structure @xmath23 , @xmath16 in general position , is a finite sum of tensegrity atoms .",
    "this decomposition is not unique in general .",
    "let @xmath5 and @xmath8 be the framework and non - null self - stress associated to @xmath23 .",
    "we show how to obtain , by addition of atoms , a chain of non - null self - stresses @xmath44 on @xmath5 in which the number of vertices with only null incident tensions ( _ null _ vertices ) is increased at each step . at the end",
    "we come up with a self - stressed framework with only null vertices , so that the original tensegrity @xmath28 will be the sum of the opposites of those atoms that have appeared in the process .",
    "let us focus on the two - dimensional case , since the @xmath15-dimensional one is carried out analogously : at each step , an arbitrary non - null vertex @xmath52 is chosen to be converted in a null one . by lemma  [ lemma : incidence.degree ] ,",
    "only the following two cases are possible ( see figures  [ fig : step1decomp ] and  [ fig : step2decomp ] ) :    * * type 1 : * if exactly three incident edges @xmath53 have non - null tension , we consider the atom @xmath54 of vertices @xmath55 . since this atom has a non - null self - stress @xmath56 which is unique up to constants , we can choose @xmath57 to be the opposite of the tension assigned to edge @xmath58 at the current stress @xmath44 , i.e. @xmath59 . because of the equilibrium at  @xmath60 , it turns out that also @xmath61 and @xmath62 . therefore , adding @xmath56 to the current self - stress makes vertex @xmath60 have only null tensions at incident edges ( i.e. makes it disappear from the induced tensegrity )",
    ". see figure  [ fig : step1decomp ] , where dashed interior edges in the second picture are opposite to those in the first one .",
    "note that at @xmath63 the edges @xmath64 , @xmath65 and @xmath66 may have appeared with non - null tension , but these extra edges do not affect  @xmath60 .",
    "however , we will be concerned about them later .",
    "type 1 step , exactly three incident edges with non - null tension . ]    * * type 2 : * if @xmath52 has incidence degree greater than @xmath67 , let @xmath63 be neighbors of @xmath60 . consider the atom @xmath68 of vertices @xmath55 ( and all the possible edges between them ) and choose it to have tension @xmath69 at edge @xmath58 .",
    "hence , obviously @xmath70 has null tension at edge @xmath58 .",
    "again , other edges @xmath71 may appear with non - null tension , but not incident to @xmath60 . hence , repeating this process if needed , we obtain a self - stress on @xmath5 in which @xmath60 has only three incident edges with non - null tension ( i.e. in the induced tensegrity , @xmath60 has only three incident edges ) .",
    "now we are in the previous case .",
    "see figure  [ fig : step2decomp ] , where now only dashed edge @xmath58 is guaranteed to be opposite to its filled counterpart .",
    "type 2 step , more than three incident edges with non - null tension . ]    since a sum of self - stresses is another self - stress , after a finite number of these steps we get a self - stress with at least one more null vertex , for which we can iterate the process until all vertices become null .",
    "note that different choices of vertices to make null may lead to different decompositions .",
    "[ remark : atom.cancel ] the reader should notice that the addition of an atom only changes the value of the self - stress on edges of the atom .",
    "hence , adding an atom might cancel other tensions than the intended ones , but only at edges contained in the atom .    motivated by the _ geometric _ process in theorem  [ thm : decomposition ] , we define now the following _ combinatorial _ algorithm , that can be applied to any abstract graph  @xmath3 :    * ( combinatorial decomposition ) * + [ algo : combinatorial.decomposition ]    input : abstract graph @xmath4 and dimension @xmath15 .",
    "+ output : list @xmath72 of  atoms \" , where each atom is a subset of @xmath73 elements of @xmath74 .    1",
    ".   initialize @xmath75 .",
    "2 .   while @xmath76 is not empty , choose a vertex @xmath77 with minimum degree and : 1 .",
    "if @xmath60 has degree @xmath78 , remove its incident edges from @xmath76 .",
    "2 .   if @xmath60 has degree @xmath7 , let @xmath79 be its neighbors .",
    "remove the edges @xmath80 from @xmath76 . add to @xmath76 all the edges @xmath81 that were not in @xmath76 . insert the atom @xmath82 to the list @xmath72 .",
    "3 .   if @xmath60 has degree at least @xmath83 do the following until it has degree @xmath7 , then go to @xmath84 : choose @xmath7 neighbors @xmath79 of @xmath60 . remove the edge @xmath85 from @xmath76 and insert to @xmath76 all the edges @xmath81 that were not in @xmath76 .",
    "insert the atom @xmath82 to the list @xmath72 .",
    "3 .   return @xmath72 .",
    "see figures  [ fig : goodcombinatorialdecomp ] and  [ fig : badcombinatorialdecomp ] for examples .",
    "this combinatorial algorithm is the tool for the first result towards the resolution of the problems posed in section  1 :    [ thm : algorithm - problem1 ] given an abstract graph @xmath3 , in order for it to underlie a tensegrity @xmath23 in  @xmath0 it is a necessary condition that , chosen a combinatorial decomposition , for every edge @xmath86 of @xmath3 there is an atom containing both endpoints @xmath17 and @xmath87 .",
    "( in other words , that step  @xmath88 of the algorithm removes only edges that were contained in the complete graph defined by some atom of the combinatorial decomposition ) .",
    "choose a combinatorial decomposition as above .",
    "if such a tensegrity @xmath23 exists , then the combinatorial decomposition induces a geometric one : on the one hand , the geometric counterpart of step @xmath88 shows up naturally because of lemma  [ lemma : incidence.degree ] .",
    "on the other hand , steps @xmath84 and @xmath89 correspond to the geometric steps of types 1 and 2 , respectively , in the proof of theorem  [ thm : decomposition ] , with tensions determined by the edge(s ) to be deleted .",
    "the necessary condition in the statement is then a consequence of remark  [ remark : atom.cancel ] .",
    "figure  [ fig : goodcombinatorialdecomp ] shows a combinatorial decomposition that fulfills the condition of theorem  [ thm : algorithm - problem1 ] , while figure  [ fig : badcombinatorialdecomp ] shows one for which edge @xmath86 shows that the condition is not fulfilled , hence the graph can not underly a tensegrity .",
    "combinatorial decomposition fulfilling the condition of theorem  [ thm : algorithm - problem1 ] . ]",
    "combinatorial decomposition not fulfilling the condition of theorem  [ thm : algorithm - problem1 ] . ]    therefore , when asked about the existence of a tensegrity in @xmath0 with underlying graph @xmath3 , we first get a combinatorial decomposition and then check the condition of theorem  [ thm : algorithm - problem1 ] .",
    "if this is not fulfilled , then the answer is negative .",
    "however , in the next subsection we show that if the graph  @xmath3 admits a combinatorial decomposition of a certain type , then this decomposition can be geometrically reversed , leading in a straight way to a complete characterization of the point sets  @xmath16 on which  @xmath5 admits a tensegrity .",
    "let us start defining a class of combinatorial decompositions , for which the reader can find an example in figure  [ fig : goodcombinatorialdecomp ] .",
    "[ def : edge - insert.comb.decomp ] we call _ edge - inserting _ combinatorial decompositions those in which all extracted atoms but the last one introduce at least one edge to the intermediate graph .",
    "the following result states that , for this class of combinatorial decompositions , their geometric reversal provides a solution to the problems posed in section  [ section : introduction ] .",
    "note the request of a self - stress non - null on every edge , in order for @xmath3 to underlie the tensegrity :    [ thm : characterize ] if an abstract graph @xmath3 admits an edge - inserting combinatorial decomposition , then the reconstruction of the graph from the atomic decomposition produces a set of equations and negated equations characterizing the point sets @xmath16 in general position that make @xmath5 admit a self - stress non - null on every edge ( and hence the ones that admit a tensegrity @xmath23 ) .    in order to determine which choices of coordinates underlie tensegrities",
    ", we have to consider as variables the coordinates of the new points @xmath12 added in the reconstruction ( the first @xmath83 points can be arbitrarily chosen , since tensegrities are projectively invariant  @xcite ) . thus , the tensions of the edges in each atom introduced are functions on these variables .",
    "furthermore , recall from definition  [ def : atoms ] that the self - stress of each atom has one degree of freedom .",
    "hence , for the reconstruction of a general combinatorial decomposition we have to consider one extra variable @xmath90 for each atom ( except for the first one , whose stress can be considered a normalization constant ) .",
    "however , these extra variables are not needed for edge - inserting combinatorial decompositions : for each step of the geometric reconstruction , at least one edge was inserted by the combinatorial decomposition algorithm and has to be removed in this precise reconstruction step .",
    "then , the relative self - stress given to this atom ( considered as a function on the positions ) can be determined at the insertion step : it is exactly the one that cancels the tension(s ) at the edge(s ) to be removed .",
    "therefore , the reconstruction in this case leads to a system of equations @xmath91 and negated equations @xmath92 , one equation for each edge not in @xmath3 that appears in an intermediate step of the process ( expressing that this edge has tension zero and does not appear in the tensegrity ) and one negated equation for each edge in @xmath3 ( expressing that it does appear in the tensegrity ) .",
    "let us point up that two decompositions of @xmath3 lead to equivalent collections of conditions , since the tensegrities constructed using one decomposition can always be decomposed and reconstructed using the other .",
    "hence , they have to fulfill both sets of necessary and sufficient conditions , and therefore these have to be equivalent . in order to finish the section",
    ", we illustrate the decomposition and reconstruction process with the following example :    [ example:2d ] the graph @xmath93 underlies a tensegrity @xmath23 in general position in @xmath33 if , and only if , the triangles @xmath94 and @xmath95 are in perspective position , i.e. , the lines @xmath96 and @xmath97 are concurrent .",
    "we start with the edge - inserting combinatorial decomposition of @xmath3 depicted in figure  [ fig : goodcombinatorialdecomp ] . in figure",
    "[ fig : example6points ] we show the reversal of this decomposition , where dashed edges are the inserted ones that have to be removed .",
    "reconstruction of an edge - inserting combinatorial decomposition.,title=\"fig : \" ] +    as observed in the proof of theorem  [ thm : characterize ] , the initial points @xmath98 can be chosen arbitrarily .",
    "then we add the atom @xmath99 , whose self - stress is determined by the condition of canceling the tension at edge @xmath100 .",
    "the feasible positions of @xmath101 are characterized by the equations and negated equations corresponding respectively to the edges omitted and depicted in the middle picture .",
    "finally , the addition of the atom @xmath102 has to remove edges @xmath103 and @xmath104 .",
    "this fact allows us to rephrase geometrically the set of equations and negated equations obtained for the graph @xmath3 : the point @xmath105 has to be placed on the line spanned by the resultant of the  undesired \" tensions @xmath106 and @xmath107 so that the tension on edge @xmath108 replaces them .",
    "moving @xmath105 along the feasible line towards the intersection of @xmath109 and @xmath97 forces tension @xmath110 at point @xmath111 to be very small .",
    "but this equals tension @xmath112 at point  @xmath113 ; therefore , @xmath105 has to be close to the intersection of @xmath97 and @xmath114 as well .    taking this argument to the limit",
    ", we conclude that @xmath105 has to be chosen in such a way that the lines @xmath96 and @xmath97 are concurrent .",
    "this section is devoted to show that the form - finding problems considered can be reformulated in a matricial form , and how this can be used to obtain the equations and negated equations in theorem  [ thm : characterize ] by means of symbolic computations .",
    "in particular , this provides an alternative to the geometric _ ad hoc _ reasonings like the one in example  [ example:2d ] , and allows to deal with more complicated and less visual examples .      before starting this subsection ,",
    "let us point up that in this paper we are not dealing with the rigidity of tensegrity structures ; we are just concerned by their self - equilibrium .",
    "an interested reader can see  @xcite for more information on rigidity of frameworks .",
    "however , the following notion from rigidity analysis turns out to be useful for our purposes :    [ def : rigiditymatrix ] let @xmath5 be a framework with @xmath115 vertices and @xmath116 edges in @xmath0 .",
    "its _ rigidity matrix _ @xmath117 has @xmath116 rows and @xmath118 columns , defined as follows :    * there is a row per edge @xmath24 of the framework , with @xmath119 and in lexicographic order . *",
    "each block of @xmath15 columns is associated to a vertex @xmath12 and contains either the @xmath15 coordinates @xmath120 , at those rows corresponding to edges @xmath24 incident to @xmath12 , or zeros at the rest of rows .    for a _ complete framework _ on @xmath115 vertices ( with all the possible edges )",
    ", the rigidity matrix has the following condensed form : @xmath121    the key observation is that the equilibrium equations  ( [ eq : equilibrium ] ) can be restated in matricial form as @xmath122 where @xmath8 is a @xmath123 vector of entries @xmath124 ( recall that @xmath10 ) and the right - hand side is the @xmath125 zero vector .",
    "that is to say , self - stresses @xmath8 are row dependencies for the rigidity matrix , what leads to the following observation :    [ obs : left.kernel ] for a framework @xmath5 , being the underlying graph of a tensegrity @xmath23 is equivalent to the existence of a @xmath8 with no null component in the left kernel of the rigidity matrix @xmath117 of the framework .",
    "this observation already suggests a method to characterize the point sets @xmath16 in general position that make @xmath5 admit a tensegrity @xmath23 : computing the kernel of the rigidity matrix @xmath117 for the framework @xmath5 . for the sake of consistency",
    ", we refer the interested reader to  @xcite for an example of the use of this method , and we show here instead how to use the decomposition - reconstruction method together with the matricial expression of equilibrium .      according to observation  [ obs : sum.tensegrity ] , the reconstruction of a combinatorial decomposition inserts at most two new points at each step , with indeterminate coordinates @xmath126 . for the framework to maintain equilibrium after their addition",
    ", the points have to belong to the projection of the solutions of  ( [ eq : matricialequilibrium ] ) over the space of the variables  @xmath127 .",
    "furthermore , in order to look for non - null tensions on every edge , the inequations @xmath128 for every @xmath129 have to be considered .",
    "equivalently , extra variables @xmath130 and equations @xmath131 can be introduced to the system .",
    "it is well - known ( see lemma  1 in page  120 of  @xcite ) that the polynomial elimination of variables @xmath132 from the above system of equations contains the above projection . therefore , polynomial elimination provides necessary conditions for the position of the vertices , which can be later symbolically tested for sufficiency .",
    "we illustrate this symbolic method with the following example , in which in order to perform polynomial elimination we have chosen to compute the intersection of @xmath133 $ ] with a _ groebner basis _ of the equations , for an elimination order in which variables @xmath127 are smaller than the @xmath132 s ; see theorem  2 in page  113 of  @xcite .",
    "although there are more efficient elimination techniques , the reason for this choice is to present the operations performed with the software maple  @xcite which , apart from being broadly known , has a specific ` linalg ` package for linear algebra .",
    "for more efficient elimination software , the reader can consider cocoa  @xcite .",
    "let us also point up that the graph considered has eight triangles and , in fact , is the same as the graph of an octahedron .",
    "[ example:3d ] the graph @xmath134 of an oblique triangular prism underlies a tensegrity if , and only if , the six vertices lie on a ruled hyperboloid that contains the edges of one of the three cycles of length  @xmath135 in @xmath3 .",
    "equivalently , if and only if the planes containing four alternating triangles intersect .",
    "we start with the combinatorial decomposition of @xmath3 in which the vertex  6 is chosen at step  2 of algorithm  [ algo : combinatorial.decomposition ] .",
    "this gives the atoms @xmath136 and @xmath137 ( see figure  [ fig : otprism ] ) . in the sequel we detail the steps of the reconstruction process using maple 7 , and omitting some outputs of no interest :    @xmath138 according to the proof of theorem  [ thm :",
    "characterize ] , the first @xmath83 points @xmath139 can be arbitrarily chosen :    > p1:=[0,0,0 ] : p2:=[1,1,1 ] : p3:=[0,1,0 ] : p4:=[1,0,0 ] : p5:=[0,0,1 ] :    @xmath138 solving the corresponding equation  ( [ eq : matricialequilibrium ] ) we get the tensions of the atom @xmath140 . in order to generate the equations",
    ", we use the command geneqns of the linalg package , which needs the equivalent transpose form @xmath141 of  ( [ eq : matricialequilibrium ] ) .",
    "then we solve them and , since according to the proof of theorem  [ thm : characterize ] the stress of the first atom can be considered a normalization constant , we take the value 1 for the parameter obtained .    > d:=3 : zeros:=[0,0,0 ] : with(linalg ) :    > r:=matrix(10,5*d , [ + op(p1-p2),op(p2-p1),op(zeros),op(zeros),op(zeros ) , + op(p1-p3),op(zeros),op(p3-p1),op(zeros),op(zeros ) , + op(p1-p4),op(zeros),op(zeros),op(p4-p1),op(zeros ) , + op(p1-p5),op(zeros),op(zeros),op(zeros),op(p5-p1 ) , + op(zeros),op(p2-p3),op(p3-p2),op(zeros),op(zeros ) , + op(zeros),op(p2-p4),op(zeros),op(p4-p2),op(zeros ) , + op(zeros),op(p2-p5),op(zeros),op(zeros),op(p5-p2 ) , + op(zeros),op(zeros),op(p3-p4),op(p4-p3),op(zeros ) , + op(zeros),op(zeros),op(p3-p5),op(zeros),op(p5-p3 ) , + op(zeros),op(zeros),op(zeros),op(p4-p5),op(p5-p4 ) ] ):    >",
    "rt:=transpose(r ) :    > eqs:=geneqns(rt,`[w12,w13,w14,w15,w23,w25,w26,w34,w36,w45,w46,w56 ] , ` + vector(n*d,0 ) ) :    > tensions:=solve(eqs , w12,w13,w14,w15,w23,w24,w25,w34,w35,w45 ) ;    @xmath142    > tensions:=subs(w45=1,tensions ) ;    @xmath143    @xmath138 then we have to add the atom @xmath144 , in which @xmath113 has unknown coordinates  @xmath145 and the stress of the atom is determined by the cancelation of tensions at edges @xmath146 and @xmath147 . the same operations as above lead to a second system of equations _",
    "eqs2 _ , in which we substitute @xmath148 to get    @xmath149    @xmath138 in order to look for non - null tension on every edge , corollary  [ coro : regular.non - null ] turns out to be crucial ; if there is a non - null self - stress , then all its tensions are null .",
    "therefore , the self - stress obtained when adding the two atoms is non - null since @xmath150 and this tension is not affected by the second atom . in particular , it is not needed to consider extra variables @xmath130 : in order to obtain the polynomial elimination , we compute a groebner basis of the polynomials in @xmath151 , which we call @xmath152 , for an elimination order in which variables @xmath145 are smaller than the @xmath9 s .",
    "the command gbasis of the groebner package is used :    with(groebner ) : + g:=gbasis(polys2subs , lexdeg([w23,w25,w26,w34,w36,w45,w46,w56],[x , y , z ] ) ) ;    @xmath153 and @xmath154 polynomials more , involving @xmath9 s .",
    "we conclude that the hyperboloid @xmath155 contains the set of points @xmath156 such that the framework admits a self stress non - null on every edge .",
    "therefore this is a necessary condition . in order to test its sufficiency ,",
    "we have considered an extra edge in the framework and forced its tension to be null , obtaining the following stress from the left - kernel of the corresponding rigidity matrix :    @xmath157    we omit the ( easy ) computations checking that :    * under the condition @xmath155 of the hyperboloid , this is indeed a self - stress . *",
    "the denominator is not null : we observe that points @xmath158 and @xmath159 already lie on the plane @xmath160 . therefore ,",
    "if point @xmath113 lied on that plane , the configuration would not be in general position . * similar arguments",
    "prove that all the components of @xmath8 are non - null .    in conclusion ,",
    "points @xmath161 for which a tensegrity exists are precisely those lying on @xmath155 .",
    "we now observe that this hyperboloid contains the edges of the quadrilateral @xmath162 . indeed , it is the only one passing through the initial five points and containing those four edges , since the space of all hyperboloids has dimension  9 . in order to conclude the first condition in the statement we just have to observe that the combinatorial decompositions that at step  2 of algorithm  [ algo : combinatorial.decomposition ] choose vertices  1 or  6 , lead to the  @xmath135-cycle @xmath163 , those choosing  3 or  5 lead to @xmath164 , and those choosing  2 or  4 to @xmath165 ( see figure  [ fig : otprism ] ) .    for the equivalent condition in the statement , which appears in  @xcite",
    ", easy computations check that the four planes defined by @xmath166 , @xmath167 , @xmath168 and @xmath169 intersect precisely for @xmath155 , and the same condition is obtained for the other four alternate planes .",
    "let us finally note that an interested reader can find in  @xcite a different symbolic approach to the resolution of this problem , that uses comprehensive groebner basis .",
    "we have to call the attention of the reader to the fact that , in spite of dealing with more complicated problems than the geometric approach , the usefulness of the algebraic one is also limited by the size and type of the problem .",
    "for instance , if corollary  [ coro : regular.non - null ] can not be used and all the inequations @xmath128 have to be considered in order to look for non - null tension on every edge .",
    "this would introduce more auxiliary variables  @xmath170 and a polynomial @xmath171 , making the computations infeasible .",
    "finally , let us recall that the above symbolic computations follow the decomposition - reconstruction method from section  [ section : geometric approach ] .",
    "we already noted that following observation  [ obs : left.kernel ] it is also possible to compute symbolically the kernel of the @xmath172 rigidity matrix  @xmath117 for the whole framework @xmath5 .",
    "instead , with the decomposition - reconstruction approach we compute the kernel of the two @xmath173 submatrices corresponding to the two atoms .",
    "the main advantage of the decomposition reconstruction method is related to this fact : since @xmath174 and @xmath175 were no longer variables and the system had fewer equations , the computation of the groebner basis was easier .",
    "in addition , we did not need to introduce an extra variable  @xmath130 .",
    "both authors would like to thank the initial help and later encouraging comments and revisions by professors juan llovet and toms recio , specially about the algebraic part .",
    "the second author also wants to thank an anonymous reviewer for several valuable comments that helped improving the results in the paper .",
    "the present paper is dedicated to the memory of miguel de guzmn , who left us before it was finished .",
    "this work started when he gave a conference about tensegrities at the departamento de matemticas of the universidad de alcal in november  2003 .",
    "five months later he died after a seminal version had been finished .",
    "although part of the results presented here still had to be formulated and proved in their final form , their essence was already contained in that preliminary version .",
    "m.  manubens and a.  montes .",
    "improving dispgb algorithm using the discriminant ideal . to be published at the special a3l issue of the _ journal of symbolic computation _ , 2006 .",
    "available at ` http://www.arxiv.org/abs/math.ac/0601763 `          g.  rote , f.  santos and i.  streinu .",
    "expansive motions and the polytope of pointed pseudo - triangulations . in b.",
    "aronov , s.  basu , j.  pach and m.  sharir , editors , _ discrete and computational geometry  the goodman - polack festschrift _ , volume  25 of _ algorithms and combinatorics_. springer verlag , berlin , 2003 , 699 - 736 ."
  ],
  "abstract_text": [
    "<S> a form - finding problem for tensegrity structures is studied ; given an abstract graph , we show an algorithm to provide a necessary condition for it to be the underlying graph of a tensegrity in @xmath0 ( typically @xmath1 ) with vertices in general position . </S>",
    "<S> furthermore , for a certain class of graphs our algorithm allows to obtain necessary and sufficient conditions on the relative position of the vertices in order to underlie a tensegrity , for what we propose both a geometric and a symbolic approach .     </S>",
    "<S> 05c85 , graph algorithms .     </S>",
    "<S> form - finding problems , tensegrity , graphs , polynomial elimination . </S>"
  ]
}