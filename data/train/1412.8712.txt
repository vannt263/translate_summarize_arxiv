{
  "article_text": [
    "a malicious software or _ malware _ may refer to any kind of software that its functionality is to cause harm to a user , computer , or network @xcite .",
    "thus , any software with malicious purposes can be considered as malware .",
    "the most hard - to - detect malware mutation is the metamorphic malware . according to the definitions given in @xcite , _",
    "metamorphism _ is the process of transforming a piece of code , utilizing a mutation module called _ metamorphic engine _ , responsible for the replication of malware into copies that are structurally different .",
    "however , these copies tend to exhibit the same behavior .",
    "specifically , a very important clue upon which is based our detection approach , is the fact that every new copy has modified structure , code sequence size and syntactic properties @xcite , while its behavior remains the same .",
    "* malware detection .",
    "* the term _ malware detection _ is referred to the process of determining whether a given program @xmath0 is malicious or benign according to an a priori knowledge @xcite . for this purpose there",
    "have been proposed several techniques that leverage various characteristics for distinguishing malicious from benign programs . however , an efficient malware detection is based on an important process , called _ malware analysis _ , which collects the required information .",
    "more precisely , malware analysis @xcite is the process of determining the purpose and the functionality or , in general , the behavior of a given malicious code .",
    "such a process is a necessary prerequisite in order to develop efficient and effective detection and also classification methods ; malware analysis is divided into two main categories , namely _",
    "static _ and _ dynamic _ analysis @xcite .",
    "* * static analysis : * in static analysis the specimen ( i.e. , test sample ) is examined without its execution , performing the analysis on its source code . * * dynamic analysis : * in dynamic analysis an execution of the malware has to be performed in order to collect the required data , concerning the behavior of a program .",
    "however this approach needs more expertise while is extremely dangerous for the host environment . as a result , in most of times dynamic analysis",
    "is performed in a virtual environment .",
    "it is well known that the behavior of a program can be modeled based upon system - call dependencies as they capture its interaction with its hosting environment , the operating system .",
    "as easily one can understand , a representation that captures a sequences of system - calls would be liable since any reorder or addition of one or more system - calls could change the sequence .",
    "thus , a more flexible representation that would capture their in between relations , as a graph in example , could address that problem @xcite .",
    "as mentioned in @xcite , most malware relies on system - calls in order to deliver their payload .",
    "additionally , since the behavior of a malware program could be reflected by the effect on its host operating system s state , then its behavior can be modeled by a directed acyclic graph , generated from system - call traces collected during its execution @xcite , the so called behavior graph .",
    "* our contribution . * in this paper we present an elaborated graph - based algorithmic technique that effectively addresses the problem of malware detection .",
    "our approach for malware detection is based on the , so far unexploited , information that system - calls of a program @xmath0 of similar functionality can be classified into the same group and also on a set of various similarity metrics concerning the dependencies between these groups .",
    "more precisely , having an instance of a scd graph @xmath1 $ ] , constructed by the system - calls invoked by a program @xmath0 , we decided to empower our model against strong mutations by applying our detection technique on a weighted directed graph @xmath2 $ ] , which we call group dependency graph ( or , for short grd graph ) , resulting from @xmath1 $ ] after grouping disjoint subsets of its vertices .",
    "additionally , we propose the similarity metric np - similarity that combines similarity metrics on qualitative , quantitative , and relational characteristics that are spread among the members of known malware families to achieve a distinction between a malware and a benign program . finally , we evaluate our detection model and compare our results against the results achieved by a variety of techniques proving the potentials of our model",
    ".    * related work . *",
    "our model design is inspired by the use of system - call dependency graphs as described in @xcite .    in  @xcite ,",
    "et al . _ proposed an automatic technique for extracting optimally discriminative behavioral specifications , based on graph mining and concept analysis , that have a low false positive rate and at the same time are general enough , when used by a behavior based malware detector , to efficiently distinguish malicious from benign programs .",
    "christodorescu _ et al .",
    "_ @xcite propose an algorithm that automatically constructs _ specifications _ of malicious behavior needed by av s in order to detect malware .",
    "the proposed algorithm constructs such specifications by comparing the execution behavior of a known malware against the corresponding behaviors produced by benign programs .",
    "finally , babic _",
    "et al . _ @xcite propose an approach to learn and generalize from the observed malware behaviors based on tree automate interference where the proposed algorithm infers @xmath3-testable tree automata from system - call data flow dependency graphs in order to be utilized in malware detection .",
    "* road map . *",
    "the remainder of this work is organized as follows . in section  2",
    "we present and analyze our proposed model for malware detection based on group dependency graphs and describe the corresponding graph construction procedure . in section  3",
    "we present a similarity metric that combines qualitative , quantitative , and relational characteristics . in section  4",
    "we analyze our data set , describe our experimental design , evaluate our proposed model s implementation against real malware samples , and compare our results against the ones achieved by other models .",
    "finally , in section  5 we conclude our paper and discuss possible future extensions .",
    "in this section , we leverage the so far unexploited grouping of system - calls , invoked by a program @xmath0 , into groups of similar functionality and construct a graph that its vertex set consists of super - nodes containing the system - calls belonging to the same group , while its edge set contains the interconnection between the system - calls of these groups .",
    "it is well known that the actions performed by a program , depicting its behavior , rely on system - calls .",
    "tracing the system - calls performed during the execution of a malware program @xmath0 , we can represent its behavior interpreting this information with a graph , so called _ system - call dependency graph _ ( or , scd for short ) ; throughout the paper , we shall denote a scd graph by @xmath1 $ ] and the system - calls invoked by @xmath0 by @xmath5 , @xmath6 .",
    "the vertex set of a scd graph @xmath1 $ ] is consisted by all the system - calls that take place during the execution of a program , i.e. , @xmath7 , @xmath8 , @xmath9 , @xmath10 , while its edge set contains the pairs of system - calls that exchanged arguments during the execution .",
    "thus , an edge of scd graph @xmath1 $ ] is a tuple of type @xmath11:@xmath3 , @xmath12:@xmath13 indicating that the system - call @xmath14 invokes @xmath12 and the @xmath15 output argument of @xmath14 is passed as the @xmath16 input argument of @xmath12 .",
    ".(a ) system - calls appeared during the execution of a program @xmath0 from a malware family hupigon , ( b ) system - call dependencies @xcite . [",
    "cols=\"^,<,^,^\",options=\"header \" , ]     alazab _ et  al . _",
    "@xcite developed a fully automated system that disassembles and extracts api - call features from executables and then , using @xmath17-gram statistical analysis , is able to distinguish malicious from benign executables .",
    "the mean detection rate exhibited was 89.74% with 9.72% false - positives when used a support vector machine ( svm ) classifier by applying @xmath17-grams .",
    "ye _ et al . _",
    "@xcite described an integrated system for malware detection based on api - sequences .",
    "this is also a different model from ours since the detection process is based on matching the api - sequences on ooa rules ( i.e. , objective - oriented association ) in order to decide the maliciousness or not of a test program .    ' '' ''        ' '' ''    an important work of christodorescu _ et al .",
    "_ , presented in  @xcite , proposes a malware detection algorithm , called @xmath18 , based on instruction semantics .",
    "more precisely , templates of control flow graphs are built in order to demand their satisfiability when a program is malicious .",
    "although their detection model exhibits better results than the ones produced by our model , since it exhibits 0 false - positives , it is a model based on static analysis and hence it would not be fair to compare two methods that operate on different objects .",
    "kolbitch _ et al . _",
    "@xcite proposed an effective and efficient approach for malware detection , based on behavioral graph matching by detecting string matches in system - call sequences , that is able to substitute the traditional anti - virus system at the end hosts .",
    "the main drawback of this approach is the fact that although no false - positives where exhibited , their detection rates are too low compared with other approaches .",
    "luh and tavolato  @xcite present one more detection algorithm based on behavioral graphs that distinguishes malicious from benign programs by grading the sample based on reports generated from monitoring tools .",
    "while the produced false - positives are very close to ours , the corresponding detection ratio is even lower .",
    "et al . _",
    "@xcite proposed an automatic technique for extracting optimally discriminative specifications based on graph mining and concept analysis that , when used by a behavior based malware detector , it can efficiently distinguish malicious from benign programs .",
    "the proposed technique can yield an 86.5% detection rate with 0 false - positives . since we compare only the maximum detection rates exhibitied by each technique , in table [ tab8 ] we show the maximum detection rate 99.4% which however exhibits higher false - positives ( 57.14% ) .",
    "however , a more fair comparison would be the one depicted in figures [ np_chart ] and [ other_chart ] where for specific values of @xmath19 and @xmath20 ( i.e. @xmath21 and @xmath22 ) someone can observe that our model reaches the detection rates of the proposed model presented in @xcite with barely @xmath23 more false positives , proving the potentials of our model in a further improvement .",
    "finally , babic _",
    "et al . _",
    "@xcite achieved the malware detection by @xmath3-testable tree automata inference from system - call data flow dependence graphs . to this point",
    "we ought to underline that in this work the authors use the same data - set that we borrow from domagoj  babic s web - page  @xcite .",
    "thus , this work provides a fair instance to compare our model s results .",
    "however , while babic _",
    "perform 2-fold cross validation using the first half of data - set as train - set and the second one as test - set , we perform 5-fold cross validation . comparing the results exhibited in @xcite with ours , easily we can claim that our proposed model is quite competitive to babic s especially for specific values of @xmath20 ( @xmath24 and @xmath25 respectively ) .",
    "we have presented an elaborated graph - based algorithmic technique for efficient malware detection by exploiting main properties of system - call dependency graphs .",
    "we leveraged the partitioning of system - calls in order to construct the grd graph @xmath2 $ ] that depicts the interconnection of specific groups of system - calls .",
    "then , we developed the np - similarity metric that , operating on grd graphs , combines a set of similarity metrics in order to distinguish whether an unknown test sample is malicious or not based on a predefined threshold .",
    "we evaluated our model s detection ability and compared its potentials against other results from several models either graph - based or not .",
    "the evaluation was performed on a set of @xmath26 malware samples from @xmath27 malware families and @xmath28 benign commodity programs .",
    "the detection process exhibited a 91.3% rate with 13.7% false positives making it competing against other detection models .",
    "finally , an interesting perspective is the extension of our model for malware indexing , i.e. , to classify a test sample in a malware family , if it has been detected as malware ; we leave such an extension as a problem for further research .",
    "alazab , m. , layton , r. , venkataraman , s. , watters , p. : malware detection based on structural and behavioural features of api calls . in : proceedings of the 1st international conference on cyber resilience ( cr10 ) , pp .",
    "110 ( 2010 )        bayer , u. , comparetti , p.m. , hlauschek , c. , kruegel , c. , kirda , e. : scalable behavior - based malware clustering . in : proceedings of the 16th annual network and distributed system security symposium ( ndss09 ) , pp .  811 ( 2009 )",
    "bayer , u. , habibi , i. , balzarotti , d. , kirda , e. , kruegel , c. : a view on current malware behaviors . in : proceedings of the 2nd usenix workshop on large - scale exploits and emergent threats ( leet09 ) , boston , ma ( 2009 )        chionis , i. , nikolopoulos , s.d . ,",
    "polenakis , i. : a survey on algorithmic techniques for malware detection . in : proceedings of the 2nd international symposium on computing in informatics and mathematics ( iscim13 ) , pp .",
    "2934 ( 2013 )        fredrikson , m. , jha , s. , christodorescu , m. , sailer , r. , yan , x. : synthesizing near - optimal malware specifications from suspicious behaviors . in : proceedings of the 30th ieee symposium on security and privacy ( sp10 ) , pp .",
    "4560 ( 2010 )        keehyung , k. , moon , b.r .",
    ": malware detection based on dependency graph using hybrid genetic algorithm . in : proceedings of the 12th acm annual conference on genetic and evolutionary computation ( gecco10 ) , pp .",
    "12111218 ( 2010 )    kolbitsch , c. , comparetti , c.p.m . , kruegel , c. , kirda , e. , zhou , x.y .",
    ", wang , x. : effective and efficient malware detection at the end host . in : proceedings of the 18th usenix security symposium ( usenix security09 ) , pp .",
    "351366 ( 2009 )          park , y. , reeves , d. , mulukutla , v. , sundaravel , b. : fast malware classification by automated behavioral graph matching . in : proceedings of the 6th acm annual workshop on cyber security and information intelligence research ( csiirw10 ) , pp .",
    "4549 ( 2010 )              ye , y. , dingding , w. , tao , l. dongyi , y. : imds : intelligent malware detection system . in : proceedings of the 13th acm international conference on knowledge discovery and data mining ( sigkdd07 ) , pp .  10431047 ( 2007 )",
    "you , i. , yim , k. : malware obfuscation techniques : a brief survey . in : proceedings of the 5th international conference on broadband and wireless computing , communication and applications ( bwcca10 ) , pp .",
    "297300 ( 2010 )"
  ],
  "abstract_text": [
    "<S> in this paper we present an elaborated graph - based algorithmic technique for efficient malware detection . </S>",
    "<S> more precisely , we utilize the system - call dependency graphs ( or , for short scd graphs ) , obtained by capturing taint analysis traces and a set of various similarity metrics in order to detect whether an unknown test sample is a malicious or a benign one . for the sake of generalization </S>",
    "<S> , we decide to empower our model against strong mutations by applying our detection technique on a weighted directed graph resulting from scd graph after grouping disjoint subsets of its vertices . </S>",
    "<S> additionally , we have developed a similarity metric , which we call np - similarity , that combines qualitative , quantitative , and relational characteristics that are spread among the members of known malware families to archives a clear distinction between graph - representations of malware and the ones of benign software . </S>",
    "<S> finally , we evaluate our detection model and compare our results against the results achieved by a variety of techniques proving the potentials of our model . </S>"
  ]
}