{
  "article_text": [
    "consider two finite sets of points @xmath0 and @xmath1 with total cardinality @xmath3 .",
    "the objective of the _ assignment _ problem is to establish a correspondence between the points in @xmath0 and the points in @xmath1 , such that each point in @xmath0 corresponds to exactly one point in @xmath1 , and each point in @xmath1 corresponds to at least one point in @xmath0 .",
    "this correspondence is measured by a cost function @xmath4 that assigns a cost @xmath5 to each assigned pair @xmath6 .",
    "the cost of an assignment is the sum of the costs of all assigned pairs .",
    "the goal of the assignment problem is to find an assignment of minimum cost .",
    "the general assignment problem is also known as the _ many - to - one assignment _ problem .",
    "the _ one - to - one _ version of the assignment problem requires that each point in @xmath0 maps to exactly one point in @xmath1 and each point in @xmath1 gets mapped exactly one point in @xmath0 . throughout the paper ,",
    "whenever we talk about the assignment problem , we refer to the many - to - one version of the problem .",
    "the simplest version of the assignment problem assumes that the points in @xmath0 and @xmath1 lie on a line and the cost function is the @xmath7 metric . in this setting",
    ", the one - to - one assignment problem has a simple @xmath2 time solution when @xmath8 : first sort the points in @xmath2 time , then map the @xmath9 point in @xmath0 to the @xmath9 point in @xmath1 in @xmath10 time @xcite .",
    "however , the situation @xmath11 arises in many practical applications .",
    "this situation was first addressed by karp and li  @xcite , who provided an @xmath2 time algorithm for the one - to - one assignment problem ( @xmath10 time , if @xmath0 and @xmath1 are given in sorted order ) .",
    "simpler and equally efficient solutions have later been provided in  @xcite .",
    "eiter and mannila@xcite studied the assignment problem in the context of measuring the distance between two theories expressed in a logical language .",
    "they showed that for points in arbitrary dimensions , this problem has a polynomial time solution . when restricted to points on a line",
    ", a minimum cost assignment can be used in measuring the similarity between musical rhythms . in this context , toussaint  @xcite proposed the use of the _ directed swap distance _ as a similarity measure .",
    "if the onsets of a rhythm are represented as points on a line separated by `` silence '' intervals , the directed swap distance between two rhythms with onset sets @xmath0 and @xmath1 is precisely the cost of an optimal assignment between @xmath0 and @xmath1 , with underlying cost function @xmath7 .",
    "the assignment problem also appears in the shape of the _ restriction scaffold assignment _ problem in computational biology  @xcite .",
    "the goal here is to establish a correspondence between sparse experimental data and a restricted set of known structural building blocks .",
    "ben - dor et .",
    "@xcite model the restriction scaffold assignment as an assignment problem for points on a line , and provide an @xmath2 time algorithm to solve this problem .",
    "however , as later shown by colannino and toussaint  @xcite , this algorithm fails to always produce a minimum cost assignment .",
    "thus , the best existing solution to the assignment problem in one dimension is the @xmath12 algorithm presented in  @xcite .    in this paper , we show that the assignment problem with underlying cost function @xmath7 in one dimension can be solved in @xmath2 time ( @xmath10 if the points in @xmath0 and @xmath1 are given in sorted order ) .",
    "our algorithm is a simple extension of the @xmath2 time algorithm of karp and li  @xcite for finding the minimum cost _ one - to - one _ assignment over @xmath1 and all subsets @xmath13 of size @xmath14 , assuming @xmath15 .",
    "we present our algorithm in section  [ sec : many - one ] , after a few preliminary results ( section  [ sec : preliminaries ] ) and a close look at some properties of an optimal solution ( section  [ sec : properties ] ) .",
    "let @xmath16 and @xmath17 be two finite sets of points that lie on a horizontal line , with @xmath18 and @xmath15 . for any @xmath19 and @xmath20 ,",
    "the cost @xmath5 of an assigned pair @xmath6 is the absolute value of the difference between the @xmath21-coordinates of @xmath22 and @xmath23 . to avoid overloading the notation",
    ", we use the same symbol for a point and its @xmath21-coordinate .",
    "thus , @xmath24 . we assume that @xmath25 and @xmath26 .",
    "an assignment @xmath27 between @xmath0 and @xmath1 consists of pairs of points @xmath6 ( henceforth _ edges _ ) , with @xmath19 and @xmath20 , such that each point in @xmath0 belongs to exactly one edge in @xmath27 , and each point in @xmath1 belongs to at least one edge in @xmath27 .",
    "the cost of @xmath27 is @xmath28 our goal is to find an assignment @xmath27 of minimum cost .",
    "if two points in @xmath29 have the same @xmath21-coordinate , we can slightly shift one of them to the left or right .",
    "if the minimum cost assignment is unique and the change is sufficiently small , this change will not affect the optimal assignment .",
    "if there are several assignments with the same optimal cost , at least one of them will be the optimal solution of the new point set .",
    "so we may assume without loss of generality that all points in @xmath29 are distinct .",
    "for any @xmath19 and @xmath20 , the value @xmath30 can be expressed in a different way as follows .",
    "define a function @xmath31 to be @xmath32 in the interval between @xmath22 and @xmath23 and @xmath33 at any other point ( see figure  [ fig : intcost ] )",
    ". then @xmath34 .    .",
    "shaded area represents the cost @xmath35 . ]",
    "the cost of an assignment @xmath27 is therefore @xmath36 if we define @xmath37 then the value @xmath38 is simply the number of edges in @xmath27 pierced by the vertical line @xmath39 , and the cost of @xmath27 is    @xmath40    our definition of @xmath41 is similar in nature to the _ height _ function @xmath42 introduced by karp and li @xcite .",
    "informally , they define @xmath43 at each point @xmath44 as the difference between the number of points in @xmath0 and the number of points in @xmath1 restricted to the interval @xmath45 $ ] ( or equivalently , to the left of the vertical line @xmath39 ) . thus @xmath46 remains constant throughout each interval that does not contain a point in @xmath29 .",
    "figure  [ fig : height ] shows the stair - shaped curve of @xmath46 for a small example .",
    "note that _ up _ transitions in the curve correspond to points in @xmath0 and _ down _ transitions correspond to points in @xmath1 .",
    "we refer to the value @xmath47 as the _ height _ of @xmath21 .",
    "note that @xmath48 .     and @xmath49 . ]    if @xmath8 , then @xmath50 is the cost of the assignment that assigns the @xmath9 largest element of @xmath0 to the @xmath9 largest element of @xmath1 .",
    "[ lem : one ]    follows immediately from ( [ eq : cost ] ) and the fact that , for this particular assignment , @xmath51 at each point @xmath21 .    [ cols=\"^,^ \" , ]     since @xmath52 , it follows that @xmath53 , contradicting the fact that @xmath27 is of minimum cost .",
    "thus , @xmath23 is a nearest neighbor of @xmath22 .",
    "the claim that @xmath1 contains no points in between @xmath22 and @xmath23 is immediate : if such a point @xmath54 existed , then @xmath55 , contradicting the fact that @xmath56 .",
    "observe that for any subset @xmath57 of size @xmath58 , there is a unique minimum cost assignment ( with no crossings ) from @xmath59 to @xmath1 .",
    "let @xmath60 denote the edges of such an assignment , and define a new assignment @xmath61 as follows : @xmath62    lemma  [ lem : neighbor ] implies that there always exists a subset @xmath63 such that @xmath64 defines a minimum cost assignment from @xmath0 to @xmath1 .",
    "furthermore , @xmath63 satisfy a special height condition , stated in the lemma below .",
    "there exists a subset @xmath65 with @xmath66 such that @xmath64 defines a minimum cost assignment from @xmath0 to @xmath1 , and the @xmath9 smallest element of @xmath63 has height @xmath67 .",
    "[ lem : height ]    let @xmath68 define a minimum cost assignment .",
    "we prove the existence of @xmath64 by constructing a set @xmath57 with the properties stated in this lemma .",
    "initially @xmath63 is empty . if @xmath69 for all @xmath70 , then @xmath63 is empty and the proof is finished",
    "otherwise , we process points @xmath20 for which @xmath71 has two or more elements . for each such point",
    "we consider two cases , as depicted in figure  [ fig : lemma4cases ] .",
    "if all points in @xmath71 are less than @xmath23 , then we add to @xmath63 all but the largest ( rightmost ) point in @xmath71 ( see figure  [ fig : lemma4cases]a ) . otherwise , we add to @xmath63 all points in @xmath71 except for the smallest ( leftmost ) point greater than @xmath23 ( see figure  [ fig : lemma4cases]b ) .",
    "are less than @xmath23 .",
    "( b ) some points in @xmath71 are greater than @xmath23 . ]",
    "we now define @xmath72 as in  ( [ eq : ar ] ) .",
    "since @xmath64 is identical to @xmath27 , @xmath64 is a minimum cost many - to - one assignment from @xmath0 to @xmath1 .",
    "it remains to show that the @xmath9 smallest element of @xmath63 has height @xmath67 . to see this ,",
    "first consider the smallest element of a nonempty set @xmath73 . call this element @xmath74 and",
    "suppose it is the @xmath9 smallest element of @xmath63 .",
    "it follows then that ( i ) @xmath63 contains @xmath75 points less than @xmath74 , and ( ii ) @xmath1 and @xmath76 contain an equal number of elements less than @xmath74 .",
    "this latter claim follows from lemma  [ lem : neighbor ] , which tells us that @xmath1 contains no elements in between @xmath74 and @xmath23 , and the following observation : the way in which we have selected @xmath63 ensures that if @xmath23 lies to the left of @xmath74 ( i.e. , @xmath77 ) , the assigned item for @xmath23 in @xmath78 lies to the left of @xmath74 , and if @xmath23 lies to the right of @xmath74 ( @xmath79 ) , the assigned item for @xmath23 in @xmath78 lies to the right of @xmath74 .",
    "these together imply that @xmath80 .",
    "we now show that the points in @xmath81 have height values @xmath82 , in order from smallest to largest . by lemma  [ lem : neighbor ]",
    ", @xmath1 contains no points in between @xmath22 and @xmath23 , for each @xmath83 .",
    "then the points in @xmath84 have incrementally increasing height values .",
    "it follows that the height of the @xmath9 smallest element of @xmath63 is @xmath67 .",
    "let @xmath85 represent the height function restricted to sets @xmath76 and @xmath1 .",
    "this means that for each @xmath21 , @xmath86 is the difference between the number of points in @xmath76 and the number of points in @xmath1 restricted to the interval @xmath87 $ ] .",
    "the cost of assignment @xmath64 is @xmath88 [ lem : optcost ]    by lemma  [ lem : one ] we have that the contribution of @xmath76 to the cost of @xmath64 is @xmath89 .",
    "since each point in @xmath63 maps to its nearest neighbor , the contribution of @xmath63 to the cost of @xmath64 is @xmath90 .",
    "these together conclude the lemma .",
    "let @xmath57 be a subset of size @xmath91 with two properties :    1 .",
    "the @xmath9 smallest element of @xmath63 has height @xmath67 .",
    "2 .   @xmath63 minimizes the quantity from ( [ eq : removecost ] ) .    then @xmath64 defines a minimum cost assignment from @xmath0 to @xmath1 .",
    "[ thm : properties ]    by lemma  [ lem : height ] , we know that there exists a set @xmath63 that satisfies _ ( i)_. by lemma  [ lem : optcost ] , @xmath63 satisfies _ ( ii)_. it follows that @xmath64 is a minimum cost assignment from @xmath0 to @xmath1 .",
    "theorem  [ thm : properties ] gives an exact description of the set @xmath63 that yields a minimum cost assignment @xmath64 .",
    "we now turn to the problem of efficiently determining this set . with this goal in mind , we introduce the following notation . for any point @xmath21 and any integer @xmath67 , define the _ relative height _ of @xmath21 with respect to @xmath67 as @xmath92 observe that when a point @xmath22 is removed from @xmath0 , @xmath47 decreases by 1 for all @xmath93 .",
    "suppose that @xmath94 , and let @xmath95 be the largest point in @xmath29 .",
    "the removal of @xmath22 causes the area under the height function between @xmath22 and @xmath95 to decrease by the quantity @xmath96 .",
    "we use this observation to define the _ profit _ of removing @xmath22 from @xmath0 and placing it in @xmath63 ( recall that @xmath64 assigns each item in @xmath63 to its nearest neighbor ) , as follows : @xmath97     for @xmath98 .",
    "the integral represents the effect of excluding @xmath99 from the one - to - one assignment from @xmath0 to @xmath1 . ]",
    "the profit function quantifies the benefit of placing @xmath22 in @xmath63 , the goal being to minimize the cost of the assignment defined by @xmath64 . the integral term in  ( [ eq : profdef ] ) represents the effect of excluding @xmath22 from the one - to - one assignment from @xmath59 to @xmath1 , as depicted in figure [ fig : relheight ] .",
    "the term @xmath100 in  ( [ eq : profdef ] ) represents the cost of assigning @xmath22 to its nearest neighbor .",
    "we minimize the cost of the assignment defined by @xmath64 by choosing items @xmath22 that maximize @xmath101 .",
    "this is formalized in the following lemma .",
    "let @xmath57 be a set with elements @xmath102 such that @xmath103 and @xmath104 maximizes @xmath101 among all points @xmath105 of height @xmath67 .",
    "then @xmath63 minimizes @xmath106 [ lem : cost.optimal ]    karp and li  @xcite proved that any set @xmath63 of size @xmath107 whose @xmath9 smallest element has height @xmath67 satisfies the equality @xmath108 summing up the cost contribution of @xmath63 to both sides of the equality yields @xmath109 this is equivalent to @xmath110 since @xmath111 is maximized at each height @xmath67 and there is only one element in @xmath63 at each height , we have that @xmath63 maximizes @xmath112 , which in turn minimizes @xmath113 as required ( refer to lemma  [ lem : optcost ] ) .",
    "the following algorithm uses the preceding lemma to determine the optimal set @xmath63 , and then compute the minimum cost assignment .",
    "initially @xmath63 is the empty set .",
    "* sort @xmath0 and @xmath1 . *",
    "calculate @xmath47 for each @xmath114 . in between consecutive points",
    ", @xmath46 is constant . *",
    "calculate @xmath101 for each @xmath19 .",
    "* for @xmath115 * * find the leftmost point @xmath104 of height @xmath67 that maximizes @xmath111 .",
    "* * add @xmath104 to @xmath63 .",
    "* return @xmath64 .",
    "the assignment algorithm computes a minimum cost assignment from @xmath0 to @xmath1 .",
    "let @xmath104 be the element of @xmath63 of height @xmath67 returned by the algorithm . if we show that @xmath116 , then it follows by lemma  [ lem : cost.optimal ] that @xmath64 is a minimum cost assignment .",
    "we prove below , by contradiction , that indeed @xmath117 .",
    "let @xmath95 be the largest point in @xmath0 .",
    "assume that there exists some @xmath118 for which the algorithm returns @xmath104 and @xmath119 , with @xmath120 .",
    "let @xmath121 be the maximal element at height @xmath67 in @xmath76 which is less than @xmath119 . by continuity ,",
    "such an @xmath121 must exist .",
    "similarly , let @xmath122 be the minimal element at height @xmath123 in @xmath76 which is greater than @xmath104 .",
    "such an @xmath122 must exist since the height at @xmath124 is @xmath48 .",
    "refer to figure  [ fig : order ] .",
    "is the closest point at height @xmath125 to the left ( right ) of @xmath126 . ]    since @xmath127 and @xmath128 , we have that @xmath129 from this and equation  ( [ eq : profdef ] ) , we can derive the following relation between the profit functions of @xmath119 and @xmath122 : @xmath130 note that equality ( [ eq : profit1 ] ) is the result of breaking up the integral corresponding to @xmath131 into two parts , and taking into account the distance from each element to its nearest neighbor .",
    "similarly , we can derive the following relation between @xmath111 and @xmath132 : @xmath133 the nearest neighbor of @xmath121 can not be farther than @xmath134 .",
    "this translates into : @xmath135 , which allows us to rewrite the previous equation as : @xmath136 similar arguments lead to the following relationship between nearest neighbors of @xmath104 and @xmath122 : @xmath137 finally , on the interval @xmath138 note that @xmath139 let @xmath140 .",
    "simple arithmetic that involves inequalities ( [ eq : profit3 ] ) , ( [ eq : profit4 ] ) and ( [ eq : profit5 ] ) yields @xmath141 this along with ( [ eq : profit1 ] ) and ( [ eq : profit2 ] ) implies that @xmath142    since @xmath119 was picked by the assignment algorithm , we have that @xmath143 .",
    "this implies that @xmath144 , but since @xmath121 lies to the left of @xmath104 , the assignment algorithm would have picked @xmath121 instead of @xmath104 , a contradiction .",
    "sorting in step 1 takes @xmath2 time .",
    "all other steps run in @xmath10 time .",
    "the only steps where this is not obvious are steps 2 and 3 that involve computing @xmath47 and @xmath145 respectively .",
    "@xmath47 can be computed for all @xmath19 by conducting a sweep of the sorted points in @xmath146 , adding one when we encounter an element of @xmath0 and subtracting one when we encounter an element of @xmath1 .    since all nearest neighbors of the elements of @xmath0 can easily be computed in linear time , to show that we can compute the profit function for all elements of @xmath0 in linear time we concern ourselves only with computing the integral of relative height function @xmath147 .",
    "this integral can be computed in linear time for all points in @xmath0 at height @xmath67 in a sweep from right to left .",
    "for the rightmost element @xmath148 of @xmath0 at height @xmath67 @xmath149 , where @xmath95 is the largest point in @xmath0 .",
    "suppose that we know @xmath150 for some item @xmath22 at height @xmath67 .",
    "let @xmath151 be the largest element in @xmath0 also at height @xmath67 , and let @xmath152 be the largest element in @xmath1 at height @xmath67 .",
    "note that by continuity , @xmath23 exists and must be greater than @xmath153 .",
    "also note that @xmath154 is positive for all @xmath155 , and @xmath154 is negative for all @xmath156 .",
    "thus we can derive the following equation : @xmath157 this value can be computed in constant time for each @xmath158 .",
    "thus we can compute @xmath101 for all @xmath19 in linear time .",
    "it follows that the assignment algorithm runs in @xmath2 time .",
    "furthermore , if @xmath0 and @xmath1 are given in sorted order , the assignment algorithm runs in @xmath10 time .",
    "we have shown that the one - to - one assignment algorithm in  @xcite can be extended to produce a minimum cost many - to - one assignment .",
    "the algorithm runs in @xmath2 time , if the input points are given in arbitrary order , and in @xmath10 time , if the input points are presorted . to our knowledge , this is the first solution to the assignment problem that achieves this time complexity ."
  ],
  "abstract_text": [
    "<S> the _ assignment _ problem takes as input two finite point sets @xmath0 and @xmath1 and establishes a correspondence between points in @xmath0 and points in @xmath1 , such that each point in @xmath0 maps to exactly one point in @xmath1 , and each point in @xmath1 maps to at least one point in @xmath0 . in this paper </S>",
    "<S> we show that this problem has an @xmath2-time solution , provided that the points in @xmath0 and @xmath1 are restricted to lie on a line ( linear time , if @xmath0 and @xmath1 are presorted ) . </S>"
  ]
}