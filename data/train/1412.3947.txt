{
  "article_text": [
    "one can hardly deny the necessity of modeling in software engineering in the majority of product lifecycle phases along with related tasks that occur in this field - from designing a new system , to refactoring or even reverse engineering an existing one .",
    "the key concept of every model type is abstraction .",
    "we describe the system of interest in a very particular context from a very specific angle hiding all other aspects .",
    "models thus make important implicit information evident , exlpicit . and more models we have for a system - more important characteristics of it are clear and visible to us . another important thing to note here is that each and every model type is a language . and like every language it determines the way we think about the system . it determines the way we design them , the way we discuss them and the way we try to understand them .",
    "this article deals with the modeling of object - oriented systems . in",
    "this field uml plays an important role for over a decade now and it is highly promoted by omg .",
    "it is an iso standard and it has an abundant amount of literature about it as well as tools to support it .",
    "probably the main reason for such monopoly is the fact that a wide variety of object - oriented systems aspects can be modeled by uml .",
    "we simply do nt need anything else in most of the cases .",
    "however , there are limitations and certain aspects of object - oriented systems are only vaguely covered by traditional uml toolset . to address this , the new metamodel was developed - ocdf ( object control - data - flow ) .",
    "let s begin by recapping some ideas behind object - oriented systems and their constituents .",
    "one of the common mathematical formalizations of an object - oriented methodology is via a notion of an abstract data type ( adt)@xcite . this concept is pretty self - explanatory .",
    "it is a data type hence it s incorporated in a programming language type system . and it is defined implicitly in a representation free form .",
    "it is achived via an adt specification :    * a type name ( types section ) ; * operations applicable to instances of the type given solely by their signature ( functions section ) ; * predicates which define function invariants ( axioms section ) ; * characteristic functions which define domains of partial functions ( in case some of the functions listed in the section 2 are partial ) ( preconditions section ) .",
    "now , a class is merely a tuple of three things : an adt specification , a representation choice and a mapping from functions listed in the specification to the representation in the form of a set of mechanisms , or features , each implementing one of the functions in terms of the representation , so as to satisfy the axioms and preconditions .",
    "and an object - oriented software construction is the building of software systems as structured collections of possibly partial abstract data type implementations.@xcite    class representation features can be devided into two separate kinds :    * those , that are represented by space , that is to say by associating a certain piece of information with every instance of the class @xcite .",
    "they are usually called attributes ; * those , that are represented by time , that is to say by defining a certain computation ( an algorithm ) applicable to all instances of the class @xcite .",
    "they are usually called routines or methods .",
    "this distinction is very important and concerns not only computation time / memory consumption dilemma .",
    "attributes form the values space of class instances .",
    "they consitute the possibility for distinction between class instances .",
    "they are the reason why we talk about classes and their instances and not just collections of functions amended to a programming language s type system . moreover ,",
    "in the imperative paradigm attributes form a state of a class instance .",
    "this is how an instance can be changed during it s lifetime in most of the imperative object - oriented languages nowadays .",
    "now , if we think about kinds of relations that may occur between class representation feautes two most obvious candidates that come into mind are :    * control - flow relaionship between routines - caller - callee relationship ; * data - flow relationship between routines or an attribute and a routine - suplier - provider relationship of a data in a form of function actual arguments , feature call result or a data value reading .",
    "we state that there are common use cases and situations when sub class structures formed by elements described above when modeled in a visual format can bring a lot of insights about the system being modeled .",
    "this is the idea behind ocdf models .",
    "ideally for the good granulated design with meaningfull naming conventions the static uml class diagram is able to provide a good understanding of the system .",
    "nevertheless , classes with a rather complex logic or numerous responsibilities ( the god object antipattern is an extreme case ) are a fairly common phenomenon nowadays .",
    "this is especially applicable to the long living legacy code . in other words",
    ", there is a practical task to support , refactor , fix , understand ( and share this understanding ) them . and",
    "metamodels that deal with inter - class relationship very often provide a very little help here .",
    "one of the dangerous drawbacks of the locking - based threading model which is the main multithreading facility for many software engineering systems is a race condition possibility . and",
    "existing uml metamodels provide no facilities to cope with it .",
    "depicting loosly and strongly interconnected class substructes also helps in refactoring tasks and we found that there s often a functional reason behind such substructes which can be reflected in a more refined class system as a result of a refactoring process .",
    "ocdf can help in such use cases and situations . in this metamodel",
    "a class is drawn as a directed graph of it s features ( nodes ) interconnected with control and data flows ( arcs ) .",
    "it is a static diagram that is designed to accomplish legacy code understanding and support and refactoring tasks .",
    "it models the implementation level of a system .",
    "what makes ocdf useful is it s ability to explicitly show tightly bound substructures of a class and boundaries between them .",
    "these are the boundaries that can be used to split the class into multiple ones during the refactoring process .",
    "these interconnected substructures fairly often embody different functional responsibilities and thus helps a reader ( and an author ) revealing such information .",
    "moreover we state that not only the model itself provides a good understandning of a class but the way the diagram is filled supports and structures it .",
    "it provides a gradual way of understanding a class inner logic producing artifacts incrementally as this understanding increases .",
    "we considered several meta - metamodeling frameworks as a tool to describe the ocdf metamodel : mof , emf , uml profiles , and have chosen a latter one .",
    "this decision was determined by two factors : a simplicity of definition and an available tools support .",
    "the formal specification of the ocdf metamodel defined as the uml profile will now be given .",
    "this profile describes the object control data flow ( ocdf ) metamodel for object - oriented systems .",
    "the profile is aimed to combine representational features of uml with control flow diagram ( cdf ) and data flow diagram ( dfd ) .",
    "a dfd is a graphical representation of the `` flow '' of data through an information system , modeling its process aspects .",
    "it can be viewed as a directed graph wherein the nodes are external entities , processes or data stores and the edges are data flows @xcite .",
    "control flow differs from the control flow graph and in a more high - level precision is just a caller - callee relationship between methods    the general idea behind ocdf models is to depict data and control flows in object - oriented systems on a sub - class scale .",
    "there are five basic metamodel elements to accomplish that :    * class data member - represents the traditional oop concept of a basic element of an object s state .",
    "it should have a one - to - one correspondence to modeled class s data members * class method - instances of this element in a model should have a one - to - one correspondence to modeled class s methods * data flow link - represents a directed data flow relationship between either a data member and a method or two methods . * control flow link - represents a directed control flow relationship between two methods .",
    "* class itself - basically a container for instances of all previously defined elements    because of the nature of a uml profile these elements are defined as uml stereotypes which extend specific uml superstructure metamodel elements .",
    "so they reuse and extend the standard uml semantics .",
    "although the most common use case is to describe a single class in the such type of diagrams there are nt any formal constraints and multiple classes can be modeled in a single diagram",
    ".      further are logical and formal diagrams for the metamodel described above .",
    "[ fig : ocdf_logical ] and fig .",
    "[ fig : ocdf_profile ]                [ [ generalizations ] ] generalizations : + + + + + + + + + + + + + + + +    none .    [ [ description ] ] description : + + + + + + + + + + + +    a controlflow is a special kind of a dependency relationship that may occur between instances of a methodclass and signifies a caller - callee relationship .",
    "[ [ attributes ] ] attributes : + + + + + + + + + + +    none .",
    "[ [ extensions ] ] extensions : + + + + + + + + + + +    dependency ( from dependencies )    [ [ constraints ] ] constraints : + + + + + + + + + + + +    [ 1 ] this relationship should occur only between method intances :    self.client->forall(getappliedstereotypes()->forall(superclass->exists(name = ocdfmethod ) ) ) and self.supplier->forall(getappliedstereotypes()->forall(superclass->exists(name = ocdfmethod ) ) )    [ [ semantics ] ] semantics : + + + + + + + + + +    the semantic of a control flow relationship is dependent on a programming language that implements a system being modeled and should mean a method call .",
    "[ [ notation ] ] notation : + + + + + + + + +    a control flow is shown as a dashed arrow between two method instances .",
    "the method instance at the tail of the arrow ( caller ) calls the method instance at the arrowhead ( the callee ) .",
    "the arrow may be labeled with an optional name ( as any dependency relation ) .",
    "[ [ generalizations-1 ] ] generalizations : + + + + + + + + + + + + + + + +    none .    [",
    "[ description-1 ] ] description : + + + + + + + + + + + +    a dataflow is a kind of informationflow relationship that represents a directed data flow between either a data member and a method or two methods .",
    "[ [ attributes-1 ] ] attributes : + + + + + + + + + + +    none .",
    "[ [ extensions-1 ] ] extensions : + + + + + + + + + + +    informationflow ( from informationflows )    [ [ constraints-1 ] ] constraints : + + + + + + + + + + + +    [ 1 ] only constructors are allowed to modify constant data members    self.informationtarget->forall(t | t.getappliedstereotype(ocdf::member ) < > null implies t.getvalue(t.getappliedstereotype(ocdf::member ) , isconst ) = false or self.informationsource->forall(s | s.getvalue(s.getappliedstereotype(ocdf::method ) , isconstructor ) = true or s.getvalue(s.getappliedstereotype(ocdf::interfacemethod ) , isconstructor ) = true ) )    [ 2 ] data flow may occur only between two methods or a method and a data member    ( self.informationsource->forall(getappliedstereotypes()->forall(superclass->exists(name = ocdfmethod ) ) ) and self.informationtarget->forall(getappliedstereotypes()->forall(superclass->exists(name = ocdfmethod ) ) ) ) or ( self.informationsource->forall(getappliedstereotype(ocdf::member ) < > null ) and self.informationtarget->forall(getappliedstereotypes()->forall(superclass->exists(name = ocdfmethod ) ) ) ) or ( self.informationsource->forall(getappliedstereotypes()->forall(superclass->exists(name = ocdfmethod ) ) ) and self.informationtarget->forall(getappliedstereotype(ocdf::member ) < > null ) )    [ [ semantics-1 ] ] semantics : + + + + + + + + + +    the semantics is dependent on a programming language that implements a system being modeled and should mean either of :    * a data read of a data member by a method ; * a result of a method call ; * a data being passed as an argument to a method call .    [ [ notation-1 ] ] notation : + + + + + + + + +    a data flow is shown as an arrow between two ocdf elements . the element at the tail of the arrow signifies a data provider and the element at the arrowhead signifies a data consumer .",
    "[ [ generalizations-2 ] ] generalizations : + + + + + + + + + + + + + + + +    ocdfmethod    [ [ description-2 ] ] description : + + + + + + + + + + + +    represents an interface method of a modeled class .",
    "[ [ attributes-2 ] ] attributes : + + + + + + + + + + +    none .",
    "[ [ extensions-2 ] ] extensions : + + + + + + + + + + +    instancespecification ( from kernel )    [ [ constraints-2 ] ] constraints : + + + + + + + + + + + +    [ 1 ] should have a public visibility    self.visibility = uml::visibilitykind::public    [ [ semantics-2 ] ] semantics : + + + + + + + + + +    should have a one - to - one correspondence to a modeled class s non - interface methods .    [ [ notation-2 ] ] notation : + + + + + + + + +    is shown as a gray coloured rectangle with rounded corners , with the method signature shown inside the rectangle .",
    "[ [ generalizations-3 ] ] generalizations : + + + + + + + + + + + + + + + +    ocdfelement    [ [ description-3 ] ] description : + + + + + + + + + + + +    represents a data feature ( attribute ) of a modeled class .",
    "[ [ attributes-3 ] ] attributes : + + + + + + + + + + +    isconst : boolean    constness of a data member means that it ca nt be changed once it s value is defined in a constructor .",
    "but the semantic of this flag is generally dependent on a programming language that implements a modeled system    [ [ extensions-3 ] ] extensions : + + + + + + + + + + +    instancespecification ( from kernel )    [ [ constraints-3 ] ] constraints : + + + + + + + + + + + +    no additional consraints .",
    "[ [ semantics-3 ] ] semantics : + + + + + + + + + +    should have a one - to - one correspondence to modeled class s attributes .",
    "[ [ notation-3 ] ] notation : + + + + + + + + +    class data attributes are modeled as usual uml class instances - in a rectangular box with a name , a visibility prefix and a type inside .",
    "[ [ generalizations-4 ] ] generalizations : + + + + + + + + + + + + + + + +    ocdfmethod    [ [ description-4 ] ] description : + + + + + + + + + + + +    represents a non - interface method of a modeled class .",
    "[ [ attributes-4 ] ] attributes : + + + + + + + + + + +    none .",
    "[ [ extensions-4 ] ] extensions : + + + + + + + + + + +    instancespecification ( from kernel )    [ [ constraints-4 ] ] constraints : + + + + + + + + + + + +    [ 1 ] should have a non - public visibility    self.visibility < > uml::visibilitykind::public    [ [ semantics-4 ] ] semantics : + + + + + + + + + +    should have a one - to - one correspondence to modeled class s non - interface methods .    [ [ notation-4 ] ] notation : + + + + + + + + +    is shown as a rectangle with rounded corners , with the method signature shown inside the rectangle .",
    "[ [ generalizations-5 ] ] generalizations : + + + + + + + + + + + + + + + +    none .",
    "[ [ description-5 ] ] description : + + + + + + + + + + + +    represents a class of callable methods .",
    "[ [ attributes-5 ] ] attributes : + + + + + + + + + + +    none .",
    "[ [ extensions-5 ] ] extensions : + + + + + + + + + + +    class ( from kernel )    [ [ constraints-5 ] ] constraints : + + + + + + + + + + + +    no additional constraints .    [",
    "[ semantics-5 ] ] semantics : + + + + + + + + + +    instances of this element in a model should have a one - to - one correspondence to a modeled class s methods .",
    "[ [ generalizations-6 ] ] generalizations : + + + + + + + + + + + + + + + +    none .",
    "[ [ description-6 ] ] description : + + + + + + + + + + + +    represents a class being modeled .",
    "[ [ attributes-6 ] ] attributes : + + + + + + + + + + +    none .",
    "[ [ extensions-6 ] ] extensions : + + + + + + + + + + +    package ( from kernel )    [ [ constraints-6 ] ] constraints : + + + + + + + + + + + +    no additional constraints .    [",
    "[ semantics-6 ] ] semantics : + + + + + + + + + +    should have a one - to - one correspondence to a class in some object - oriented language .",
    "[ [ generalizations-7 ] ] generalizations : + + + + + + + + + + + + + + + +    none .    [",
    "[ description-7 ] ] description : + + + + + + + + + + + +    represents an element of the ocdfclass .",
    "abstract .",
    "[ [ attributes-7 ] ] attributes : + + + + + + + + + + +    isstatic : boolean    in some object - oriented languages there is a notion of a static class feature - a feature of a class itself and not of it s instances .",
    "this boolean attribute specifies this option .",
    "[ [ extensions-7 ] ] extensions : + + + + + + + + + + +    instancespecification ( from kernel )    [ [ constraints-7 ] ] constraints : + + + + + + + + + + + +    [ 1 ] should be an element of the ocdfclass .",
    "self.owner.getappliedstereotype(ocdf::ocdfclass ) < > null    [ [ semantics-7 ] ] semantics : + + + + + + + + + +    this is an abstract metamodel element that represents a modeled class s features .",
    "[ [ generalizations-8 ] ] generalizations : + + + + + + + + + + + + + + + +    ocdfelement    [ [ description-8 ] ] description : + + + + + + + + + + + +    represents a callable feature ( routine , method ) of a modeled class .",
    "abstract .",
    "[ [ attributes-8 ] ] attributes : + + + + + + + + + + +    isconstructor : boolean    the notion of a constructor in many object - oriented languages means a method used to create an instance of a class and usually has a separate call syntax .",
    "[ [ extensions-8 ] ] extensions : + + + + + + + + + + +    instancespecification ( from kernel )    [ [ constraints-8 ] ] constraints : + + + + + + + + + + + +    [ 1 ] should be an instance of the methodclass .",
    "self.classifier->exists(c| c.getappliedstereotype(ocdf::methodclass ) < > null )",
    "as was already said the main purpose of this metamodel is to provide a help in understanding the legacy code , i.e. reverse - egnineer it . and",
    "so the diagram should accompany it s author in the process of investigating a class . here",
    "a list of possible recommendations is provided :    * the diagram has shown a good performance in combination with the uml communication diagram - for depicting both inter - class and in - class control flows . *",
    "modeling can be conveyed on different abstraction levels : * * just data flows between data members and methods * * data flow involving data members and control flow between methods * * the most detailized way involving all data flows between methods also together with with control flows ( separate flow arrows for input parameters and output results ) allowing for code generation and or obtained automatically from the source code ( depicting all this information by hand might be tedious ) * inheritance requires a special treatment .",
    "we have found that a most convenient way is to depict parent features `` lazily '' by necessity - only if it s used in a current modeled child class explicitly .",
    "as an example of an ocdf diagram application we have chosen the filemanager class from the clang project @xcite .",
    "the subversion revision number is 212447 .",
    "[ fig : filemanager ]",
    "we introduced a new metamodel for modeling control and data flows on subclass scales in object - oriented systems .",
    "the uml profiles were used to define the metamodel which means that ocdf diagram can be used by any tool that conforms uml 2 specifications ."
  ],
  "abstract_text": [
    "<S> we present a metamodel for modeling control and data flows on subclass scales in object - oriented systems . </S>",
    "<S> uml profiles were used as a representation mean and a complete metamodel definition was provided with an example of a diagram application . </S>"
  ]
}