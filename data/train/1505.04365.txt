{
  "article_text": [
    "description logics ( dls ) are well - known knowledge representation formalisms  @xcite .",
    "dls find a wide range of applications in computer science , including the semantic web and representation of ontologies , but also in medical bioinformatics .",
    "axiom pinpointing represents the problem of computing one minimal axiom set ( denoted _ mina _ ) , which explains a subsumption relation in an ontology  @xcite .",
    "example applications of axiom pinpointing include context - based reasoning , error - tolerant reasoning  @xcite , and ontology debugging and revision  @xcite .",
    "axiom pinpointing for different description logics ( dls ) has been studied extensively for more than a decade , with related work in the mid 90s  @xcite .",
    "the @xmath0family of dls is well - known for being tractable . despite being inexpressive",
    ", the @xmath0family of dls , concretely by using the more expressive @xmath1 , has been used for representing ontologies in the medical sciences , including the well - known snomed  ct ontology  @xcite . work on axiom pinpointing for the @xmath0family of dls",
    "can be traced to 2006 , namely the cel tool  @xcite .",
    "later , in 2009 , the use of sat was proposed for axiom pinpointing in the @xmath0family of dls  @xcite , concretely for the more expressive description logic @xmath1 .",
    "this seminal work proposed a propositional horn encoding that can be exponentially smaller than earlier work  @xcite . moreover ,",
    "the use of sat for axiom pinpointing for the @xmath0family of dls , named el@xmath2sat  @xcite , was shown to consistently outperform earlier work , concretely cel  @xcite .",
    "recent work  @xcite proposes the el2mcs tool that builds on these propositional encodings , but exploits the relationship between axiom pinpointing and mus enumeration ; concretely , it relies on explicit hitting set dualization  @xcite .",
    "this tool is evaluated in  @xcite , where it is shown to achieve conclusive performance gains over earlier work .",
    "the relationship between axiom pinpointing and mus enumeration was also studied elsewhere  @xcite . instead of exploiting hitting set dualization",
    ", this alternative approach exploits the enumeration of prime implicants  @xcite .",
    "the main contribution of this paper is to develop an efficient group - mus enumerator for horn formulae , referred to as hgmus , that finds immediate application in axiom pinpointing for the @xmath0family of dls . in the process of developing hgmus",
    ", the paper also identifies performance bottlenecks of existing solutions , in particular el@xmath2sat  @xcite .",
    "the new group - mus enumerator for horn formulae builds on the large body of recent work on problem solving with sat oracles .",
    "this includes , among others , mus extraction  @xcite , mcs extraction and enumeration  @xcite , and partial mus enumeration  @xcite .",
    "hgmusalso exploits earlier work on solving horn propositional formulae  @xcite , and develops novel algorithms for mus extraction in propositional horn formulae .",
    "the experimental results , using well - known problem instances , demonstrate conclusive performance improvements over all other existing approaches , in most cases by several orders of magnitude .",
    "the paper is organized as follows .",
    "introduces the notation and definitions used throughout the paper .",
    "reviews recent work on mus enumeration , which serves as the basis for hgmus .",
    "afterwards , the new group - mus enumerator hgmusis described in  .",
    "compares hgmuswith existing alternatives .",
    "experimental results on well - known problem instances from axiom pinpointing for the @xmath0family of dls are analyzed in  .",
    "the paper concludes in  .",
    "we assume familiarity with propositional logic @xcite and consider propositional boolean formulae in conjunctive normal form ( cnf ) . a cnf formula @xmath3 is defined over a set of boolean variables @xmath4 as a conjunction of clauses ( @xmath5 ) .",
    "a clause @xmath6 is a disjunction of literals ( @xmath7 ) and a literal @xmath8 is either a variable @xmath9 or its negation @xmath10 .",
    "we refer to the set of literals appearing in @xmath3 as @xmath11 .",
    "formulae can be alternatively represented as sets of clauses , and clauses as sets of literals .",
    "a truth assignment , or interpretation , is a mapping @xmath12 , with @xmath13 also used to represent the variables of @xmath3 .",
    "if all the variables in @xmath14 are assigned a truth value , @xmath15 is referred to as a _",
    "complete _ assignment .",
    "interpretations can be also seen as conjunctions or sets of literals .",
    "truth valuations are lifted to clauses and formulae as follows : @xmath15 satisfies a clause @xmath6 if it contains at least one of its literals .",
    "given a formula @xmath3 , @xmath15 satisfies @xmath3 ( written @xmath16 ) if it satisfies all its clauses , being @xmath15 referred to as a _ model _ of @xmath3",
    ".    given two formulae @xmath3 and @xmath17 , @xmath3 entails @xmath17 ( written @xmath18 ) iff all the models of @xmath3 are also models of @xmath17 . @xmath3 and @xmath17 are equivalent ( written @xmath19 ) iff @xmath18 and @xmath20 .",
    "a formula @xmath3 is satisfiable ( @xmath21 ) if there exists a model for it .",
    "otherwise it is unsatisfiable ( @xmath22 )",
    ". sat is the decision problem of determining the satisfiability of a propositional formula .",
    "this problem is in general np-_complete _ @xcite .",
    "some applications require computing certain types of models . in this paper , we will make use of maximal models , i.e. models such that a set - wise maximal subset of the variables are assigned value 1 :    [ mxm ] * ( mxm ) .",
    "* let @xmath3 be a satisfiable propositional formula , @xmath16 a model of @xmath3 and @xmath23 the set of variables appearing in @xmath15 with positive polarity .",
    "@xmath15 is a maximal model ( mxm ) of @xmath3 iff @xmath24 and for all @xmath25 , @xmath26 .",
    "herein , we will denote a maximal model by @xmath27 , i.e. the set of its positive literals .",
    "horn formulae constitute an important subclass of propositional logic .",
    "these are composed of horn clauses , which have at most one positive literal .",
    "satisfiability of horn formulae is decidable in polynomial time  @xcite .",
    "given an unsatisfiable formula @xmath3 , the following subsets represent different notions regarding ( set - wise ) minimal unsatisfiability and maximal satisfiability @xcite :    [ def : mus ] * ( mus ) .",
    "* @xmath28 is a _ minimally unsatisfiable subset _",
    "( mus ) of @xmath3 iff @xmath29 is unsatisfiable and @xmath30 is satisfiable .",
    "[ def : mcs ] * ( mcs ) .",
    "* @xmath31 is a _ minimal correction subset _",
    "( mcs ) iff @xmath32 is satisfiable and @xmath33 is unsatisfiable .",
    "[ def : mss ] * ( mss ) .",
    "* @xmath34 is a _",
    "maximal satisfiable subset _",
    "( mss ) iff @xmath35 is satisfiable and @xmath36 is unsatisfiable .    an mss is the complement of an mcs . muses and mcses are closely related by the well - known hitting set duality @xcite : every mcs ( mus ) is an irreducible hitting set of all muses ( mcses ) of @xmath3 . in the worst case , there can be an exponential number of muses and mcses @xcite .",
    "besides , mcses are related to the maxsat problem , which consists in finding an assignment satisfying as many clauses as possible .",
    "the smallest mcs ( largest mss ) represents an optimal solution to maxsat .    motivated by several applications , muses and related concepts",
    "have been extended to cnf formulae where clauses are partitioned into disjoint sets called groups  @xcite .",
    "[ def : gmus ] * ( group - oriented mus ) . * given an explicitly partitioned unsatisfiable cnf formula @xmath37 , a group - oriented mus ( or group - mus ) of @xmath3 is a set of groups @xmath38 , such that @xmath39 is unsatisfiable , and for every @xmath40 , @xmath41 is satisfiable .",
    "note the special role @xmath42 ( _ group-0 _ ) ; this group consists of _ background _ clauses that are included in every group - mus .",
    "because of @xmath42 a group - mus , as opposed to mus , can be empty .",
    "nevertheless , in this paper we assume that @xmath42 is satisfiable .",
    "equivalently , the related concepts of group - mcs and group - mss can be defined in the same way .",
    "we omit these definitions here due to lack of space . in the case of maxsat",
    ", the use of groups is investigated in detail in  @xcite .",
    "enumeration of muses has been the subject of research that can be traced to the seminal work of reiter  @xcite .",
    "a well - known family of algorithms uses ( explicit ) minimal hitting set dualization  @xcite .",
    "the organization of these algorithms can be summarized as follows .",
    "first compute all the mcses of a cnf formula .",
    "second , muses are obtained by computing the minimal hitting sets of the set of mcses .",
    "the main drawback of explicit minimal hitting set dualization is that , if the number of mcses is exponentially large , these approaches will be unable to compute muses , even if the total number of muses is small . as a result ,",
    "recent work considered what can be described as implicit minimal hitting set dualization  @xcite . in these approaches , either an mus or an mcs is computed at each step of the algorithm , with the guarantee that one or more muses will be computed at the outset . in some settings ,",
    "implicit minimal hitting set dualization is the only solution for finding some muses of a cnf formula .",
    "as pointed out in this recent work , implicit minimal hitting set dualization aims to complement , but not replace , the explicit dualization alternative , and in some settings where enumeration of mcses is feasible , explicit minimal hitting set dualization may be the preferred option  @xcite .",
    "@xmath43 @xmath44    algorithm [ alg : emus ] shows the emusenumeration algorithm  @xcite , also used in the most recent version of marco  @xcite .",
    "it relies on a two - solver approach aimed at enumerating the muses / mcses of an unsatisfiable formula @xmath3 . on the one hand ,",
    "a formula @xmath45 is used to enumerate subsets of @xmath3 .",
    "this formula is defined over a set of variables @xmath46 , each one of them associated with one clause @xmath47 .",
    "iteratively until @xmath45 becomes unsatisfiable , emus computes a maximal model @xmath27 of @xmath45 and tests the satisfiability of the corresponding subformula @xmath48 .",
    "if it is satisfiable , @xmath49 represents an mss of @xmath3 , and the clause @xmath50 is added to @xmath45 , preventing the algorithm from generating any subset of the mss ( superset of the mcs ) again . otherwise ,",
    "if @xmath49 is unsatisfiable , it is reduced to an mus @xmath29 , which is blocked adding to @xmath45 a clause made of the variables in @xmath51 associated with @xmath29 with negative polarity .",
    "this way , no superset of @xmath29 will be generated .",
    "algorithm [ alg : emus ] is guaranteed to find all muses and mcses of @xmath3 , in a number of iterations that corresponds to the sum of the number of muses and mcses .",
    "this paper considers the concrete problem of enumerating the group - muses of an unsatisfiable horn formula . as highlighted earlier , and",
    "as discussed later in the paper , enumeration of the group - muses of unsatisfiable horn formulae finds important applications in axiom pinpointing for the @xmath0family of dls , including @xmath1 .",
    "it should be observed that the difference between the enumeration of plain muses of horn formulae and the enumeration of group - muses is significant .",
    "first , enumeration of group - muses of horn formulae can not be achieved in total polynomial time , unless @xmath52 .",
    "this is an immediate consequence from the fact that axiom pinpointing for the @xmath0family of dls can not be achieved in total polynomial time , unless @xmath52  @xcite , and that axiom pinpointing for the @xmath0family of dls can be reduced in polynomial time to group - mus enumeration of horn formulae  @xcite .",
    "second , enumeration of muses of horn formulae can be achieved in total polynomial time ( actually with polynomial delay )  @xcite .    given",
    "the above , a possible approach for enumerating group - muses of horn formulae is to use an existing solution , either based on explicit or implicit minimal hitting set dualization .",
    "for example , the use of explicit minimal hitting dualization was recently proposed in  @xcite .",
    "alternatively , either emus  @xcite or the different versions of marco  @xcite could be used , as also pointed out in  @xcite .",
    "this paper opts instead to exploit the implicit minimal hitting set dualization approach  @xcite , but develops a solution that is specific to the problem formulation .",
    "this solution is described in the next section .",
    "this section describes hgmus , a novel and efficient group - mus enumerator for horn formulae based on implicit minimal hitting set dualization . in this section",
    ", @xmath53 denotes the group of clauses @xmath42 , i.e.  the background clauses .",
    "moreover , @xmath54 denotes the set of ( individual ) groups of clauses , with @xmath55 .",
    "so , the unsatisfiable group - horn formula corresponds to @xmath56 .",
    "also , in this section , the formula @xmath45 shown in   is defined on a set of variables associated to the groups in @xmath54 . for the problem instances considered later in the paper ( obtained from axiom pinpointing for the @xmath0family of dls )",
    ", each group of clauses contains a single unit clause .",
    "however , the algorithm would work for arbitrary groups of clauses .",
    "the high - level organization of hgmusmimics that of emus / marco ( see  ) , with a few essential differences .",
    "first , the satisfiability testing step ( because it operates on horn formulae ) uses the dedicated linear time algorithm ltur  @xcite .",
    "ltur can be viewed as one - sided unit propagation , since only variables assigned value 1 are propagated .",
    "moreover , the simplicity of ltur enables very efficient implementations , that use adjacency lists for representing clauses instead of the now more commonly used watched literals .",
    "second , the problem formulation motivates using a dedicated mus extraction algorithm , which is shown to be more effective in this concrete case than other well - known approaches  @xcite .",
    "third , we also highlight important aspects of the emus / marco implicit minimal hitting set dualization approach , which we claim have been overlooked in earlier work  @xcite .",
    "@xmath57 @xmath58    the use of maximal models for computing either mcses of a formula or a set of clauses that contain an mus was proposed in earlier work  @xcite , which exploited sat with preferences for computing maximal models  @xcite .",
    "the use of sat with preferences for computing maximal models is also exploited in related work  @xcite . computing maximal models of a formula @xmath45 can be reduced to the problem of extracting an mss of a formula @xmath59 @xcite , where the clauses of @xmath45 are hard and , for each variable @xmath60 , it includes a unit soft clause @xmath61 .",
    "also , recent work  @xcite has shown that state - of - the - art mcs / mss computation approaches outperform sat with preferences .",
    "hgmus uses a dedicated algorithm based on the linearsearch mcs extraction algorithm @xcite , due to its good performance in mcs enumeration . since",
    "all soft clauses are unit , it can also be related with the novel literal - based extractor algorithm @xcite . shown in",
    ", it relies on making successive calls to a sat solver .",
    "it maintains three sets of literals : @xmath27 , an under - approximation of an mxm ( i.e. positive literals s.t .",
    "@xmath62 ) , @xmath63 , with negative literals @xmath64 such that @xmath65 ( i.e. _ backbone literals _ ) , and @xmath66 , with the remaining set of positive literals to be tested .",
    "initially , @xmath27 and @xmath66 are initialized from a model @xmath67 , @xmath27 ( @xmath66 ) including the literals appearing with positive ( negative ) polarity in @xmath15 .",
    "then , iteratively , it tries to extend @xmath27 with a new literal @xmath68 , by testing the satisfiability of @xmath69 .",
    "if it is satisfiable , all the literals in @xmath66 satisfied by the model ( including @xmath8 ) are moved to @xmath27 . otherwise , @xmath8 is removed from @xmath66 and @xmath64 is added to @xmath63 .",
    "this algorithm has a query complexity of @xmath70 .    integrates a new technique , which consists in pre - initializating @xmath27 with the pure positive literals appearing in @xmath45 and @xmath66 with the remaining ones ( line 1 ) , and then requiring the literals of @xmath27 to be satisfied by the initial assignment ( line 2 ) .",
    "it can be easily proved that these pure literals are included in all mxms of @xmath45 , so a number of calls to the sat solver could be avoided . moreover",
    ", the sat solver will never branch on these variables , easing the decision problems .",
    "this technique is expected to be effective in hgmus .",
    "note that , in this context , @xmath45 is made of two types of clauses : positive clauses blocking mcses of the horn formula , and negative clauses blocking muses .",
    "so , with this technique , the computation of mxms is restricted to the variables representing groups appearing in some mus of the horn formula .",
    "one important aspect of hgmusare the blocking clauses created and added to the formula @xmath45 ( see  ) .",
    "these follow what was first proposed in emus  @xcite and marco  @xcite . for each mus ,",
    "the blocking clause consists of a set of negative literals , requiring at least one of the clauses in the mus _ not _ to be included in future selected sets of clauses . for each mcs ,",
    "the blocking clause consists of a set of positive literals , requiring at least one of the clauses in the mcs to be included in future selected sets of clauses .",
    "the way mcses are handled is essential to prevent that mcs and sets containing the same mcs to be selected again .",
    "although conceptually simple , it can be shown that existing approaches may not guarantee that supersets of mcses ( or subsets of the msses ) are not selected .",
    "as argued later , this is the case with el@xmath2sat  @xcite .",
    "it is well - known that horn formulae can be decided in linear time  @xcite .",
    "hgmusimplements the ltur algorithm  @xcite .",
    "there are important reasons for this choice .",
    "first , ltur is expected to be more efficient than plain unit propagation , since only variables assigned value 1 need to be propagated .",
    "second , most implementations of unit propagation in cdcl sat solvers ( i.e.  that use watched literals ) are not guaranteed to run in linear time  @xcite ; this is for example the case will _ all _ implementations of minisat  @xcite and its variants , for which unit propagation runs in worst - case quadratic time . as a result , using",
    "an off - the - shelf sat solver and exploiting only unit propagation ( as is done for example in earlier work  @xcite ) is unlikely to be the most efficient solution .",
    "besides the advantages listed above , the use of a linear time algorithm for deciding the satisfiability of horn formulae turns out to be instrumental for mus extraction , as shown in the next section . in order to use ltur for mus extraction ,",
    "an incremental version has been implemented , which allows for the incremental addition of clauses to the formula and incremental identification of variables assigned value 1 .",
    "clearly , the amortized run time of ltur , after adding @xmath71 , with @xmath72 the number of literals appearing in @xmath3 .      for arbitrary cnf formulae , a number of approaches exist for mus extraction , with the most commonly used one being the deletion - based approach  @xcite , but other alternatives include the quickxplain algorithm  @xcite and the more recent progression algorithm  @xcite .",
    "it is also well - known and generally accepted that , due to its query complexity , the insertion - based algorithm  @xcite for mus extraction is in practice not competitive with existing alternatives  @xcite .",
    "@xmath73 @xmath74    somewhat surprisingly , this is not the case with horn formulae when ( an incremental implementation of ) the ltur algorithm is used . a modified insertion - based mus extraction algorithm that exploits ltur",
    "is shown in  .",
    "propagates the consequences of adding some new set of clauses , given some existing incremental context . unpropagates the consequences of adding some set of clauses ( in order ) , given some existing incremental context .",
    "the organization of the algorithm mimics the standard insertion - based mus extraction algorithm  @xcite , but the use of the incremental ltur yields run time complexity that improves over other approaches . consider the operation of the standard insertion - based algorithm  @xcite , in which clauses are iteratively added to the working formula .",
    "when the formula becomes unsatisfiable , a _ transition clause _",
    "@xcite has been identified , which is then added to the mus being constructed .",
    "the well - known query complexity of the insertion - based algorithm is @xmath75 where @xmath76 is the number of clauses and @xmath77 is the size of a largest mus . now consider that the incremental ltur algorithm is used . to find the first transition clause ,",
    "the amortized run time is @xmath78 .",
    "clearly , this holds true for _ any _ transition clause , and so the run time of mus extraction with the ltur algorithm becomes @xmath79 , where @xmath80 is a largest mus . highlights the main differences with respect to a standard insertion - based mus extraction algorithm .",
    "in contrast , observe that for a deletion - based algorithm the run time complexity will be @xmath81 . in situations where the sizes of muses are much smaller than the number of groups in @xmath54",
    ", this difference can be significant . as a result , when extracting muses from horn formulae , and when using a polynomial time incremental decision procedure , an insertion - based algorithm should be used instead of other more commonly used alternatives .",
    "this section compares hgmuswith the group - mus enumerators used in el@xmath2sat  @xcite , and satpin  @xcite .",
    "the experimental comparison with these enumerators as well as other approaches for axiom pinpointing for the @xmath0family of dls is provided in  .",
    "the best known sat - based approach for axiom pinpointing is el@xmath2sat  @xcite .",
    "el@xmath2satis composed of two main phases .",
    "the first phase compiles the axiom pinpointing problem to a horn formula .",
    "the second phase enumerates the so - called minas , and corresponds to group - mus enumeration for this horn formula  @xcite .. although existing references emphasize the enumeration of minas ( muses ) using an allsat approach ( itself inspired by an allsmt approach  @xcite ) , the connection with mus enumeration is immediate  @xcite .",
    "more importantly , el@xmath2satshares a number of similarities with implicit minimal hitting set dualization , but also crucial differences , which we now analyze .",
    "similar to emus , el@xmath2satselects subformulae of an unsatisfiable horn formula .",
    "this is achieved with a sat solver that always assigns variables value 1 when branching  @xcite .",
    "this corresponds to solving sat with preferences  @xcite , and so it corresponds to computing a maximal model , inasmuch the same way as emusoperates . in el@xmath2sat ,",
    "the approach for deciding the satisfiability of horn subformulae is based on running the unit propagation engine of a cdcl sat solver . as explained earlier , this can be inefficient when compared with the dedicated ltur algorithm for horn formulae  @xcite .",
    "moreover , in el@xmath2sat , muses are extracted with what can be viewed as a deletion - based algorithm  @xcite . although more efficient alternatives are suggested",
    ", none is as asymptotically as efficient as the dedicated algorithm proposed in  .",
    "finally , the most important drawback is the blocking of sets of clauses that do not contain an mus / mina . in our setting of implicit minimal hitting set dualization , this represents one mcs .",
    "the approach used in el@xmath2satconsists of creating a blocking clause solely based on the decision variables ( which are _ always _ assigned value 1 )  @xcitesatis detailed in  ( * ? ? ?",
    "* , first paragraph ) .",
    "thus , the learned clauses , although blocking one mcs ( and corresponding mss ) , do _ not _ block supersets of mcses ( and the corresponding subsets of the msses ) . this can result in exponentially more iterations than necessary , and explains in part the poor performance of el@xmath2satin practice .",
    "it should be further observed that this drawback becomes easier to spot once the problem is described as mus enumeration by implicit minimal hitting set dualization .",
    "satpin  @xcite represents a recent sat - based alternative for axiom pinpointing for the @xmath0family of dls , that focuses on optimizing the low - level implementation details of the cdcl sat solver , including the use of incremental sat solving .",
    "as indicated above , hgmusopts to revisit instead the ltur  @xcite algorithm from the late 80s , since it is guaranteed to run in linear time for horn formulae , and can be implemented with small overhead .",
    "the satpin approach is presented in terms of iteratively computing prime implicants .",
    "however , computing a prime implicant is tightly related with extracting an mus  @xcite . as a result",
    ", some aspects of the organization of satpin can be related with those of el@xmath2sat , namely the procedure for extracting muses / minas .",
    "although the actual enumeration of candidate sets is not detailed in  @xcite , the description of satpin suggests the use of model enumeration with some essential pruning techniques .",
    "this section evaluates group mus enumerators for horn formulae obtained from axiom pinpointing problems for the @xmath0family of dls , particularly applied to medical ontologies .",
    "a set of standard benchmarks is considered .",
    "these have been used in earlier work , e.g.  @xcite .",
    "since all experiments consist of converting axiom pinpointing problems into group mus enumeration problems , the tool that uses hgmusas its back - end is named el2mus .",
    "thus , in this section , the results for el2mus illustrate the performance of the group - mus enumerator described in this paper .",
    "each considered instance represents the problem of explaining a particular subsumption relation ( query ) entailed in a medical ontology .",
    "four medical ontologies are considered : galen  @xcite , gene  @xcite , nci  @xcite and snomed  ct  @xcite . for galen",
    ", we consider two variants : full - galen and not - galen .",
    "the most important ontology is snomed  ct and , due to its huge size , it also produces the hardest axiom pinpointing instances . for each ontology ( including the galen variants )",
    "100 queries are considered ; 50 random ( which are expected to be easier ) and 50 sorted ( expected to have a large number of minimal explanations ) queries .",
    "so , there are 500 queries in total .",
    "given an ontology and a subsumption query , the encoding proposed in  @xcite produces a horn formula and a set of axioms ( variables ) which may be responsible for the subsumption relation .",
    "this can be transformed into a group - mus enumeration problem where the original horn formula forms group-0 and each axiom constitutes a group containing only a unit clause .",
    "two different experiments were considered by applying two different simplification techniques to the problem instances , both of which were proposed in  @xcite .",
    "the first one uses the cone - of - influence ( coi ) reduction .",
    "these are reduced instances in both the size of the horn formula and the number of axioms , but are still quite large .",
    "similar techniques are exploited in related work  @xcite .",
    "the second one considers the more effective reduction technique ( which we refer to as x2 ) , consisting in applying the coi technique , re - encoding the horn formula into a reduced ontology , and encoding this ontology again into a horn formula .",
    "this results in small horn formulae , which will be useful to evaluate the algorithms when there are a large number of muses / mcses .",
    "the experiments compare el2mus to different algorithms , namely el@xmath2sat  @xcite , cel  @xcite , just  @xcite and satpin  @xcite .",
    "el@xmath2sat  @xcite has been shown to outperform cel  @xcite , whereas satpin  @xcite has been shown to outperform the mus enumerator marco  @xcite .",
    "the comparison with cel and justimposes a number of constraints .",
    "first , cel only computes 10 minas , so all comparisons with cel only consider reporting the first 10 minas / muses .",
    "also , cel uses a simplification technique similar to coi , so cel is considered in the first experiments .",
    "second , justoperates on selected subsets of @xmath1 , i.e.  the description logic used in most medical ontologies . as a result ,",
    "all comparisons with justconsider solely the problem instances for which justcan compute correct results .",
    "justaccepts the simplified x2 ontologies , so it is considered in the second experiments .",
    "the comparison with these tools is presented at the end of the section .",
    "el2mus interfaces the sat solver minisat 2.2  @xcite for computing maximal models .",
    "all the experiments were performed on a linux cluster ( 2 ghz ) and the algorithms were given a time limit of 3600s and a memory limit of 4 gb",
    ".    sat , satpin and el2mus on the coi instances ]      summarizes the results for el@xmath2sat , satpin and el2mus .",
    "0.475     0.475     0.475     0.45    el@xmath2satdoes not show in the plot due to its poor performance . as can be observed",
    ", el2mus terminates for more instances than any of the other tools .",
    "shows scatter plots comparing the different tools .",
    "as can be concluded , and with a few outliers , the performance of el2mus exceeds the performance of any of the other tools by at least one order of magnitude ( and often by more ) . summarizes the results in the scatter plots , where the percentages shown are computed for problem instances for which at least one of the tools takes more than 0.001s .",
    "cel is not shown in the table due to the special constraints mentioned above . as can be observed",
    ", el2mus outperforms any of the other tools in all of the problem instances and , for many cases , with two or more orders of magnitude improvement .",
    "0.495 sat , satpin and el2mus on the x2 instances , title=\"fig : \" ]    0.495 sat , satpin and el2mus on the x2 instances , title=\"fig : \" ]    0.475     0.475     0.475     0.45      the x2 instances are significantly simpler than the coi instances .",
    "thus , whereas the coi instances can serve to assess the scalability of each approach , the x2 instances highlight the expected performance in representative settings . summarizes the performance of the tools el@xmath2sat , satpin and el2mus . as with the coi instances ,",
    "el@xmath2satdoes not show in the plot due to its poor performance .",
    "moreover , and as before in terms of terminated instances , el2mus exhibits an observable performance edge .",
    "a pairwise comparison between the different tools is summarized in  .",
    "although not as impressive as for the coi instances , el2mus still consistently outperforms all other tools . summarizes the results , where as before the percentages shown are computed for problem instances for which at least one of the tools takes more than 0.001s .",
    "observe that , for these easier instances , satpin becomes competitive with el2mus .",
    "nevertheless , for instances taking more than 0.1s , el2mus outperforms satpin on 100% of the instances .",
    "thus , the 67.69% shown in the table result from instances for which both satpin and el2mus take at most 0.04s .",
    "the summary table also lists the number of computed muses for the 19 instances for which el2mus does _ not _ terminate ( all of the other tools also do not terminate for these 19 instances ) .",
    "el2mus computes 9948 muses in total .",
    "as can be observed from the table , the other tools lag behind , and compute significantly fewer muses .",
    "the comparison with el@xmath2satand satpin , reveals that el2mus computes respectively in excess of a factor of 10 and of 5 more muses .",
    "el2mus not only terminates on more instances than any other approach and computes more muses for the unsolved instances ; it also reports the sequences of muses much faster .",
    "shows , for each computed mus over the whole set of instances , the time each mus was reported .",
    "this figure compares el@xmath2sat , satpin and el2mus , as these are the only methods able to report muses from the beginning .",
    "the results confirm that el2mus is able to find many more muses in less time than the alternatives .",
    "these experimental results suggest that , not only is el2mus the best performing axiom pinpointing tool , on both the coi and x2 problem instances , but it is also the one that is expected to scale better for more challenging problem instances , given the results on the coi instances .      and show scatter plots comparing el2mus with cel  @xcite and just  @xcite , respectively for the coi and x2 instances . as indicated earlier , cel only computes 10 minas , and so the run times shown are for computing the first 10 minas . as can be observed ,",
    "the performance edge of el2mus is clear , with the performance gap exceeding 1 order of magnitude almost without exception .",
    "moreover , just  @xcite is a recent state of the art axiom pinpointing tool for the less expressive @xmath82 dl .",
    "thus , not all subsumption relations can be represented and analyzed .",
    "the results shown are for the subsumption relations for which justgives the correct results . in total , 382 instances could be considered and are shown in the plot .",
    "as before , the performance edge of el2mus is clear , with the performance gap exceeding 1 order of magnitude without exception . in this case , since the x2 instances are in general much simpler , the performance gap is even more significant .",
    "enumeration of group mus for horn formulae finds important applications , including axiom pinpointing for the @xmath0family of dls .",
    "since the @xmath0family of dls is widely used for representing medical ontologies , namely with @xmath1 , enumeration of group muses for horn formulae represents a promising and strategic application of sat technology .",
    "this includes , among others , sat solvers , mcs extractors and enumerators , and mus extractors and enumerators .",
    "this paper develops a highly optimized group mus enumerator for horn formulae , which is shown to extensively outperform any other existing approach .",
    "performance gains are almost without exception at least one order of magnitude , and most often significantly more than that . more importantly ,",
    "the experimental results demonstrate that sat - based approaches are by far the most effective approaches for axiom pinpointing for the @xmath0family of dls .",
    "when compared with other non sat - based approaches , the performance gains are also conclusive .",
    "we thank the authors of el@xmath2sat , r.  sebastiani and m.  vescovi , for authorizing the use of the most recent , yet unpublished , version of their work  @xcite .",
    "we thank the authors of satpin  @xcite , n.  manthey and r.  pealoza , for bringing satpin to our attention , and for allowing us to use their tool .",
    "we thank a.  biere for pointing out reference  @xcite , on the complexity of implementing unit propagation when using watched literals .",
    "this work is partially supported by sfi pi grant beacon ( 09/in.1/i2618 ) , by fct grant polaris ( ptdc / eia - cco/123051/2010 ) , and by national funds through fct with reference uid / cec/50021/2013 .",
    "m.  ashburner , c.  a. ball , j.  a. blake , d.  botstein , h.  butler , j.  m. cherry , a.  p. davis , k.  dolinski , s.  s. dwight , j.  t. eppig , and et  al .",
    "gene ontology : tool for the unification of biology .",
    ", 25(1):2529 , 2000 .",
    "f.  baader , i.  horrocks , and u.  sattler .",
    "description logics . in v.",
    "l. frank  van harmelen and b.  porter , editors , _ handbook of knowledge representation _ , foundations of artificial intelligence , chapter  3 , pages 135  179 .",
    "elsevier , 2008 .",
    "n.  manthey and r.  pealoza .",
    "exploiting sat technology for axiom pinpointing .",
    "technical report ltcs 15 - 05 , chair of automata theory , institute of theoretical computer science , technische universitt dresden , april 2015 .",
    "available from https://ddll.inf.tu-dresden.de/web/techreport3010 .",
    "a.  l. rector and i.  r. horrocks .",
    "experience building a large , re - usable medical ontology using a description logic with transitivity and concept inclusions . in _ workshop on ontological engineering _ , pages 414418 , 1997 .",
    "r.  sebastiani and m.  vescovi .",
    "axiom pinpointing in large @xmath86 ontologies via sat and smt techniques .",
    "technical report disi-15 - 010 , disi , university of trento , italy , april 2015 . under journal submission .",
    "available as http://disi.unitn.it/~rseba/elsat/elsat_techrep.pdf ."
  ],
  "abstract_text": [
    "<S> the enumeration of minimal unsatisfiable subsets ( muses ) finds a growing number of practical applications , that includes a wide range of diagnosis problems . as a concrete example </S>",
    "<S> , the problem of axiom pinpointing in the @xmath0family of description logics ( dls ) can be modeled as the enumeration of the group - muses of horn formulae . in turn , axiom pinpointing for the @xmath0family of dls finds important applications , such as debugging medical ontologies , of which snomed  ct is the best known example . the main contribution of this paper is to develop an efficient group - mus enumerator for horn formulae , hgmus , that finds immediate application in axiom pinpointing for the @xmath0family of dls . in the process of developing hgmus , the paper also identifies performance bottlenecks of existing solutions . </S>",
    "<S> the new algorithm is shown to outperform all alternative approaches when the problem domain targeted by group - mus enumeration of horn formulae is axiom pinpointing for the @xmath0family of dls , with a representative suite of examples taken from different medical ontologies . </S>"
  ]
}