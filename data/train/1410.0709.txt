{
  "article_text": [
    "spatial indexing of geographic data has always been an important component of database systems . since the wide - spread adoption of social media and social networks , the size of data to be indexed has grown by multiple orders of magnitude , making even more demand on the efficiency of indexing algorithms and index structures .",
    "certain fields of natural sciences also face similar problems : astronomers , for example , have to perform spatial searches in databases of billions of observations where spatial criteria can be arbitrarily complex spherical regions",
    ". inspired by astronomical problems , szalay et al .",
    "@xcite came up with a solution to index spatial data stored in microsoft sql server years before native support of geographic indexing appeared in the product .",
    "their indexing scheme is called hierarchical triangular mesh ( htm ) and uses an iteratively refined triangulation of the surface of the sphere to build a quad - tree index . in the present case study",
    ", we demonstrate how we applied htm to index real gps coordinates collected from the open data streams of twitter , and performed a huge spatial join on the data to classify the coordinates by the administrative regions of the world .",
    "our results show that pre - filtering capabilites of htm are significantly better than that of the built - in spatial index of sql server and that htm renders spatial joins originally thought impossible to be able to be computed in a reasonable time .",
    "source code and full queries are available at the following url : http://www.vo.elte.hu/htmpaper .",
    "our data set consists of short messages ( tweets ) collected over a period of two years from the publicly available `` sprinkler '' data stream of twitter . more than half of the tweets , over a billion , are geo - tagged .",
    "we built a microsoft sql server database of the tweets @xcite and wanted to classify the geo - tagged messages by political administrative regions to investigate the geographic embedding of the social network of twitter users .",
    "microsoft sql server supports spatial indexing since version  2008 via a library implemented on top of the integrated .net framework runtime ( sql clr ) .",
    "the library works by projecting the hemisphere onto a quadrilateral pyramid , then projecting the pyramid onto a square , and tessellating the square using four levels of fix - sized rectangular grids to construct a spatial index .",
    "the number of grid cells can be set between @xmath0 and @xmath1 providing a maximal index depth of 32  bits .",
    "the index structure itself is materialized as a hidden , but otherwise normal database table containing one row for each cell touched by the geography object being indexed .",
    "the table uses 11  bytes for the spatial index which is complemented by the primary key of the indexed object , in our case an additional 10  bytes .",
    "the final index size can be controlled by limiting the number of cells stored for each geography object resulting in less effective pre - filtering of spatial matches when the index size is kept small",
    ". the hard limit on the number of index entries per geography object is 8192 .",
    "similarly to the built - in spatial index of sql  server , htm indexing is also implemented in .net . by default",
    ", htm calculates a 40  bit deep hash , the so called htm i d , from the coordinates .",
    "the 40  bit hash length corresponds to an almost uniform resolution of 10  meters on the surface of the earth .",
    "htm tessellates two dimensional shapes with small spherical triangles , called trixels .",
    "trixels are represented by integer intervals ; all coordinates with an htm i d falling into the interval are guaranteed to be covered by the trixel .",
    "as htm is a custom library , we had full control over the index structures , therefore we simply stored the 8  byte  htm identifiers in the same table where the tweets were , and built an auxiliary index on the table ordered by the htm identifier .",
    "together with the primary key , the auxiliary index size was 18  bytes per row , exactly one row per coordinate pair .",
    "we classified tweets using the maps from gadm.org , an open database of global administrative regions of every country in the world .",
    "the maps were loaded into the database as geography objects using the built - in geography type . for indexing , however , we decided to use htm .",
    "this raised a problem because the htm library was built for astronomical applications where regions on the sphere are better represented as unions of convex shapes contoured by great _ or _ small circles than by vertices of polygons connected by great circles .",
    "this union - of - convexes representation is not appropriate for highly detailed complex maps as shapes would need to be decomposed into convexes first , a process that significantly increases the size of the data structures .",
    "unfortunately , no code exists to directly compute the htm tessellation of maps in the polygon representation , so we had to use another approach . by combining the htm library and the built - in geographic library of sql  server , we determined the approximate htm tessellation of regions up to a given precision by iteratively refining htm trixels at the boundaries .",
    "our solution , see algorithm  [ lst : alg ] , goes as follows .",
    "we construct a coarse tessellation of the region based on the bounding circle , then we intersect each trixel with the region using the built - in functions of sql server . if a trixel is completely inside the region it is added to the result set . similarly , a completely disjoint trixel is discarded .",
    "trixels intersecting with the boundary are refined into four sub - trixels and the algorithm is called recursively . passing only the intersection of the original map with the trixel to the recursive call reduces the total runtime of the tessellation significantly .",
    "the algorithm uses the maximum depth of htm trixels as a stop condition to limit the resolution of the tessellation but can be easily modified to use an upper limit on the number of trixels instead . also , instead of trying to keep the index tables small , we store every trixel of the tessellation .",
    "trixels on the deepest level which intersect with the boundary of the geography object are flagged as `` partial '' .",
    "figure  [ fig : cali ] illustrates the results of the level  9 htm covering of california with partial trixels in green .",
    "retlist @xmath2 t.partial @xmath3 false retlist.add(t ) region2 @xmath3 region.stintersection(t ) t.partial @xmath3 true retlist.add(t ) tlist2 @xmath3 t.refine(t.level+1 ) retlist.addrange ( ) retlist",
    ".... create table tweet (      i d bigint primary key ,      htmid bigint ,      coord geography )      create index ix_tweet_htm          on tweet ( htmid )      create spatial index ix_tweet_spatial          on tweet ( coord ) create table region (      i d int primary key ,      geo geography )          create spatial index ix_region_spatial          on region ( geo ) create table regionhtm (      i d int ,      --foreign key to region.id      start bigint ,      end bigint ,      partial bit ) ....    in order to explain the internals of htm indexing , we create the schema of our database with query  [ query : schema ] .",
    "the htm - based pre - filtering of a spatial join between a table containing gps coordinates and another containing the tessellations of complex regions requires an inner join with a ` between ` operator in the join constraint .",
    "query  [ query : htmfilter ] is a simplified example of such pre - filtering query",
    ". we will refer to these types of queries as _",
    "range joins_. as range joins are highly optimized in the database engine , we expect excellent pre - filtering performance .",
    "the ` loop join ` hint is added to suggest a query plan that consist of scan of the ` tweet ` table , while doing index seeks on the much smaller ` regionhtm ` table .",
    "this is optimal as long as the htm index of the regions can be kept in memory . using",
    "the built - in spatial index of sql server , pre - filtering of a spatial join can be done with query  [ query : sqlfilter ] .",
    "it translates into a rather complex execution plan that uses the spatial index for table ` tweet ` only , while calculating the tessellation of the geography objects in table ` region ` during query execution , or vice versa . by specifying query hints",
    ", one can tell the server which spatial index to use , but it seems impossible to use the spatial indices on _ both _ tables at the same time .",
    "this behavior has a tremendous impact on the performance of spatial joins when using the built - in indices .    in case of the sql server geography index ,",
    "exact containment testing can be done by simply replacing the function call to ` filter ` with ` stcontains ` , as in query  [ query : sqlcontains ] . when using the htm index , points in full trixels are already accurately classified with query  [ query : htmfilter ] , only points in partial trixels need further processing to filter out false positive matches .",
    "this is done in query  [ query : htmcontains ] which again relies on the spatial functions of sql server . also note , that query  [ query : htmcontains ] , by referencing the column ` region.geo ` , uses the entire region for testing point containment . in case of computing the spatial join of billions of coordinates with a limited number of complex regions , it is well worth to pre - compute the intersections of partial trixels and regions first and use them for containment testing instead of the whole regions . due to publicational constraints we omit the query but all performance metrics quoted in the paper",
    "are measured using the pre - computed intersections of the regions and partial trixels for exact containment testing .",
    "we measured the index generation time for the 50 continental states ( plus washington d.c . )",
    "of the united states using two different depths ( @xmath4 and @xmath1 grids ) of the sql server geography index and three different depths ( level 12 , 14 and 16 ) of htm . for comparison , the @xmath4 resolution of the sql server index roughly corresponds to a level 12 htm index and the @xmath1 grid resolution corresponds to a level 16 htm index .",
    "the benchmarks were run on a 16-core database server with 96  gb memory . as our dataset fits into memory ,",
    "queries are basically cpu - limited .",
    "index generation times are summarized in table  [ tab : idxgen ] .",
    "note , that sql server executed the geography index generation on two threads , while htm ranges were generated on a single thread only . while we have no control over the internals of geography indices , the iterative refining of htm tessellation could be replaced with a smarter , multi - threaded one .",
    "also , the size of the geography indices is internally limited to 8192 entries per region , while the htm indices were calculated without pruning , ultimately resulting in much larger index sizes .    ....",
    "select t.id , h.id , h.partial from tweet t inner loop join regionhtm h    on t.htmid between h.start and h.end ....    .... select t.id , r.id from tweet t inner join region r    on r.geo.filter(t.coord ) = 1 ....    [ query : sqlfilter ]    .... select tweet.id , region.id from tweet t inner join region r    on r.geo.stcontains(t.coord ) = 1 ....    .... select tweet.id , regionhtm.id from tweet t inner loop join regionhtm h    on t.htmid between h.start and h.end inner join region r on r.id = h.id where h.partial = 0 or        r.geo.stcontains(t.coord ) = 1 ....    it is also rather instructive to compare the two indexing schemes by the false positive rates of pre - filtering .",
    "the results are listed in table  [ tab : fp ] .",
    "false positives rates of the htm index are significantly lower in all cases , especially for higher index depths . in the case of the sql server",
    "spatial index , increasing the resolution does not help , but the opposite : it just makes things worse , as the number of index rows ( and the resolution of the tessellation ) is limited to a maximum of 8192 cells , insufficiently small for complex maps . strictly limiting index size only helps when the number of shapes to be indexed is large and the shapes are relatively small and simple .",
    "when spatial indices fit into the memory , or at least can be read quickly from the disk , pre - filtering using range joins is expected to be significantly faster , even for indices with millions of rows , rather than exact containment testing against complex shapes .    to test the performance of point classification , we prepared three samples having approximately 300  thousand , 1  million , 5  million points in each , uniformly sampled from the original database .",
    "some tests were also run using the entire data set of more than one billion tweets .",
    "the coordinates covered the entire world but the majority of them were within the continental united states .",
    "the geographical distribution of the samples is realistic and follows the population density weighted by the local twitter usage rate . to evaluate index performance , we computed a spatial join between a the samples of gps coordinates with different cardinality and the 51 regions , first with pre - filtering only , then with exact containment test .",
    "results of pre - filtering are listed in table  [ tab : prefilter ] , while exact containment metrics are shown in table  [ tab : total ] .",
    "all queries were executed using cold buffers , thus include i / o and cpu times .",
    "the spatial join performance of the htm index turned out to be about a hundred times better than the performance of the built - in geography index .",
    "pre - filtering itself is about a thousand times faster than the built - in index , and usually could be done in a few seconds for the smaller samples .",
    "such short query times are hard to be measured correctly , and values show a significant scatter when the queries are repeated .",
    "the two main reasons behind the significantly better performance of htm are : 1 ) htm - based pre - filtering could benefit from the spatial index on both tables , whereas sql server s geography library only used the index for one of the tables and calculated the tessellation for the other table on the fly .",
    "2 ) the extensive pruning of index entries resulted in a very high rate of false positives in case of sql  server s geography index .",
    "because of the pruning , increasing the index resolution could not actually increase the resolution of the tessellation in case of the rather complex maps . by using a significantly larger , but still manageable index table , and by intersecting the trixels of the tessellations with the regions to reduce the complexity of exact containment testing",
    ", htm indexing could reduce the cost of spatial joins to a minimum .",
    "based on these results , it is clear that running the point classification using only the built - in geography index of sql server index is not a viable solution for any task similar to ours , namely , when the number of points is in the billions range .",
    ".index generation time and number of index rows of the regions .",
    "[ cols=\"<,>,>\",options=\"header \" , ]",
    "in this paper , we investigated the feasibility of efficient classification of gps coordinates of twitter messages by geographic regions using a relational database management system , microsoft sql server  2012 .",
    "we evaluated the performance of the built - in spatial indexing technology side by side with a customized solution based on hierarchical triangular mesh ( htm ) indexing .",
    "the built - in spatial index was found to be inadequate to perform spatial joins between large sets of gps coordinates ( on the scale of billions ) and complex geographic regions .",
    "we showed that our solution , a heuristic combination of existing techniques for handling spatial data in a relational database environment , can easily be a hundred times faster and makes the computation of the aforementioned spatial join available in reasonable time .",
    "we pointed out that the strength of htm indexing is the great control the database programmer has on both the index structure and query plans ( via hints ) .",
    "we also demonstrated that aggressive pruning of spatial indices is not a good idea when indexing of very complex regions is a requirement , as range - join - based pre - filtering is significantly faster than exact containment testing , even in case of millions of index entries . to make exact containment testing even faster ,",
    "we pre - computed the intersections of the complex geographic regions and partial htm trixels and use these much smaller shapes to filter out false positives .",
    "the authors thank the partial support of the european union and the european social fund through project futurict.hu ( grant no . : tamop-4.2.2.c-11/1/konv-2012 - 0013 ) , and the otka 103244 grants .",
    "eitkic 12 - 1 - 2012 - 0001 project was partially supported by the hungarian government , managed by the national development agency , and financed by the research and technology innovation fund and the makog foundation ."
  ],
  "abstract_text": [
    "<S> we present a case study about the spatial indexing and regional classification of billions of geographic coordinates from geo - tagged social network data using hierarchical triangular mesh ( htm ) implemented for microsoft sql server . </S>",
    "<S> due to the lack of certain features of the htm library , we use it in conjunction with the gis functions of sql server to significantly increase the efficiency of pre - filtering of spatial filter and join queries . </S>",
    "<S> for example , we implemented a new algorithm to compute the htm tessellation of complex geographic regions and precomputed the intersections of htm triangles and geographic regions for faster false - positive filtering . with full control over the index structure , </S>",
    "<S> htm - based pre - filtering of simple containment searches outperforms sql server spatial indices by a factor of ten and htm - based spatial joins run about a hundred times faster . </S>"
  ]
}