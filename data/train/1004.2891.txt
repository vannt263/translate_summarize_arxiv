{
  "article_text": [
    "the usual assumption in combinatorial optimization is that all input parameters are precisely known .",
    "however , in real life this is rarely the case .",
    "there are two popular optimization settings of problems for hedging against uncertainty of parameters : _ stochastic optimization setting _ and _ robust optimization setting_.    in the stochastic optimization , the uncertainty is modeled by specifying probability distributions of the parameters and the goal is to optimize the expected value of a solution built ( see ,  e.g. ,  @xcite ) .",
    "one of the most popular models of the stochastic optimization is a _ 2-stage model",
    "_  @xcite . in the 2-stage approach the precise values of the parameters",
    "are specified in the first stage , while the values of these parameters in the second stage are uncertain and are specified by probability distributions .",
    "the goal is to choose a part of a solution in the first stage and complete it in the second stage so that the expected value of the obtained solution is optimized .",
    "recently , there has been a growing interest in combinatorial optimization problems formulated in the 2-stage stochastic framework  @xcite .    in the robust optimization setting  @xcite the uncertainty is modeled by specifying a set of all possible realizations of the parameters called _ scenarios_. no probability distribution in the scenario set is given . in the _ discrete scenario case _ , which is considered in this paper ,",
    "we define a scenario set by explicitly listing all scenarios . then , in order to choose a solution , two optimization criteria , called the _ min - max _ and the _ min - max regret _ , can be adopted . under the min - max criterion",
    ", we seek a solution that minimizes the largest cost over all scenarios . under the min - max regret criterion",
    "we wish to find a solution which minimizes the largest deviation from optimum over all scenarios",
    ". a deeper discussion on both criteria can be found in  @xcite .",
    "the minmax ( regret ) versions of some basic combinatorial optimization problems with discrete structure of uncertainty have been extensively studied in the recent literature  @xcite .",
    "furthermore , both robust criteria can be easily extended to the 2-stage framework .",
    "such an extension has been recently done in  @xcite .    in this paper",
    ", we wish to investigate the min - max ( regret ) and min - max 2-stage versions of the classical _ minimum spanning tree _ problem .",
    "the classical deterministic problem is formally stated as follows .",
    "we are given a connected graph  @xmath4 with edge costs @xmath5 , @xmath6 .",
    "we seek a _ spanning tree _ of @xmath7 of the minimal total cost .",
    "we use @xmath8 to denote the set of all spanning trees of @xmath7 .",
    "the classical deterministic minimum spanning tree is a well studied problem , for which several very efficient algorithms exist ( see ,  e.g. ,  @xcite ) .    in the robust framework ,",
    "the edge costs are uncertain and the set of scenarios  @xmath9 is defined by explicitly listing all possible edge cost vectors .",
    "so , @xmath10 is finite and contains exactly @xmath11 scenarios , where a _ scenario _ is a cost realization @xmath12 . in this paper",
    "we consider the _ unbounded case _ , where the number of scenarios is a part of the input .",
    "we will denote by @xmath13 the cost of a minimum spanning tree under a fixed scenario @xmath14 . in the min - max spanning tree problem ,",
    "we seek a spanning tree that minimizes the largest cost over all scenarios , that is @xmath15 in the min - max regret spanning tree , we wish to find a spanning tree that minimizes the maximal regret : @xmath16    the formulation  ( [ pminmax ] ) is a single - stage decision one .",
    "we can extend this formulation to a 2-stage case as follows .",
    "we are given the first stage edge costs @xmath5 , @xmath6 , and in the second stage there are @xmath11 possible cost realizations ( scenarios ) listed in scenario set @xmath9 . the 2-stage spanning tree problem consists in determining a subset of edges @xmath17 in the first stage and a subset of edges @xmath18 that augments it to form a spanning tree @xmath19 under scenario  @xmath20 in the second stage for each scenario  @xmath21 .",
    "the goal is minimize the maximum cost of the determined subsets of edges @xmath17 , @xmath22 : @xmath23    let us now recall some known results on the problems under consideration . in the bounded case ( when the number of scenarios is bounded by a constant ) , the min - max ( regret ) spanning tree problem is np - hard even if @xmath9 contains only  2 scenarios  @xcite and admits an fptas  @xcite , whose running time , however , grows exponentially with @xmath11 . in the unbounded case , the min - max ( regret ) spanning",
    "tree problem is strongly np - hard  @xcite and not approximable within @xmath24 , for any @xmath1 , unless p = np even for edge series - parallel graphs  @xcite .",
    "the min - max ( regret ) spanning tree problem is approximable within @xmath11  @xcite .",
    "however , up to now the existence of an approximation algorithm with a constant performance ratio for the unbounded case has been an open question . to the best of the authors knowledge",
    "the 2-stage version of the minimum spanning tree problem seems to exist only in the stochastic setting  @xcite .",
    "recently , the robust 2-stage framework has been employed in  @xcite for some network design and matching problems .    [",
    "[ our - results ] ] our results + + + + + + + + + + +    in this paper we prove that the min - max spanning tree and min - max regret spanning tree problems are hard to approximate with a constant performance ratio ( theorem  [ cmmmst ] and corollary  [ cmmemst ] ) .",
    "namely , they are are not approximable within @xmath0 for any @xmath1 , where @xmath25 is the input size , unless np @xmath26 dtime@xmath27 .",
    "we thus give a negative answer to the open question about the existence of approximation algorithms with a constant performance ratio for these problems .",
    "moreover , if both positive and negative edge costs are allowed , then the min - max spanning tree problem is not at all approximable unless p = np ( theorem  [ tmmna ] ) . for the 2-stage spanning tree problem ,",
    "we show that it is not approximable within any constant , unless p = np , and within @xmath28 for any @xmath1 , unless np@xmath26dtime@xmath29 ( theorem  [ t2smsp ] ) .",
    "the above negative results encourage us to find randomized approximation algorithms , which yield a @xmath3 approximation ratio for min - max spanning tree ( theorem  [ thm3 ] ) and 2-stage min - max spanning tree ( theorem  [ tra2s ] ) .",
    "in this section , we study the min - max spanning tree and min - max regret spanning tree problems .",
    "we improve the results obtained in  @xcite , by showing that both problems are hard to approximate within a ratio of @xmath0 for any @xmath1 , unless the problems in np have quasi - polynomial time algorithms .",
    "we then provide an lp - based randomized algorithm with approximation ratio of @xmath3 for min - max spanning tree .",
    "we reduce a variant of the label cover problem ( see e.g. , @xcite ) to min - max spanning tree .    _",
    "input : _ a regular bipartite graph @xmath30 , @xmath31 ; an integer  @xmath32 that defines the set of labels , which are in integers in @xmath33 ; for every edge @xmath34 a partial map @xmath35 .",
    "a _ labeling _ of the instance @xmath36 is a function  @xmath37 assigning a nonempty set of labels to each vertex in @xmath38 , namely @xmath39 . a labeling _",
    "satisfies _ an edge @xmath34 if @xmath40 a _ total labeling _ is a labeling that satisfies all edges .",
    "the value of a total labeling  @xmath37 is @xmath41 .",
    "_ output : _ a total labeling of the minimum value .",
    "this value is denoted by @xmath42 .",
    "we now recall the following theorem  @xcite :    there exists a constant  @xmath43 so that for any language @xmath44 , any input @xmath45 and @xmath46 , one can construct an instance  @xmath47 of label cover , with @xmath48 vertices and the label set of size  @xmath32 , so that : @xmath49 furthermore , @xmath47 can be constructed in time polynomial in its size .",
    "[ tlancover ]    we now state and prove the theorem , which is essential in showing the hardness results for the problems of interest .",
    "there exists a constant  @xmath43 so that for any language @xmath44 , any input @xmath45 , any @xmath46 and any @xmath50 , one can construct an instance  @xmath51 of min - max spanning tree in time @xmath52 , so that : @xmath53 [ taprminmax ]    let @xmath54 be a language in @xmath55 and let @xmath56 be the instance of label cover from theorem  [ tlancover ] constructed for @xmath54 .",
    "let us introduce some additional notations :    * @xmath57 is the set of edges of @xmath7 incident to vertex  @xmath58 , * @xmath59 .",
    "we now transform @xmath47 to an instance  @xmath51 of min - max spanning tree .",
    "let us fix @xmath60 , where @xmath61 is the constant from theorem  [ tlancover ] .",
    "we first construct graph @xmath62 in the following way .",
    "we replace every edge @xmath34 with paths @xmath63 for all @xmath64 ( see figure  [ fgraph ] ) .",
    "the edges of the form @xmath65 ( the dashed edges ) are called _ dummy edges _ and the edges of the form @xmath66 ( the solid edges ) are called _ label edges_.",
    "we say that label edge @xmath66 assigns label @xmath67 to @xmath68 and label @xmath69 to @xmath70 .",
    "we will denote the obtained component by @xmath71 and we will use @xmath72 to denote the set of all label edges of @xmath71 , obviously @xmath73 .",
    "we finish the construction of @xmath62 by adding additional vertex  @xmath74 and connecting all the components by additional dummy edges @xmath75 for all @xmath76 . a sample graph @xmath62 , where @xmath7 is @xmath77 ,",
    "is shown in figure  [ fig2 ] .     with component  @xmath71 .",
    "]    , where graph  @xmath7 in @xmath47 is @xmath77 . ]",
    "we now form scenario set @xmath9 .",
    "we first note that all dummy edges under all scenarios have costs equal to 0 .",
    "we say that two label edges are _ label - distinct _ if they do not assign the same label to any vertex @xmath68 or @xmath70 .",
    "namely , @xmath78 and @xmath79 are label - distinct if @xmath80 implies @xmath81 and @xmath82 implies @xmath83 .",
    "consider vertex @xmath76 , for which there is the set of @xmath84 components @xmath85 .",
    "for every subset @xmath86 of exactly @xmath87 components , @xmath88 and for every @xmath87-tuple of pairwise label - distinct edges @xmath89 we form scenario under which all these edges have cost  1 and all the remaining edges have cost  0 .",
    "we repeat this procedure for all vertices @xmath76 .",
    "consider then vertex @xmath90 , for which there is the set of @xmath91 components @xmath92 .",
    "for every subset @xmath86 of exactly @xmath87 components , @xmath93 and for every @xmath87-tuple of pairwise label - distinct edges @xmath94 we form scenario under which all these edges have cost  1 and all the remaining edges have cost  0 .",
    "we repeat this for all vertices @xmath90 . in order to ensure @xmath95 ,",
    "we include in @xmath9 the scenario in which every edge has zero cost .",
    "assume that @xmath96 and thus @xmath97 .",
    "thus , there exists a total labeling @xmath37 satisfying all edges in @xmath7 such that @xmath98 .",
    "each edge @xmath99 in @xmath7 corresponds to the exactly one component  @xmath100 in @xmath101 .",
    "let @xmath102 be the pair of labels satisfying the edge  @xmath103 in total labeling  @xmath37 , i.e. @xmath104 and @xmath105 .",
    "we form a spanning tree @xmath106 in @xmath62 by adding exactly one edge @xmath107 from every component @xmath100 and we complete the construction by adding a necessary number of dummy edges . since the labeling @xmath37 is such that @xmath98 , no pair of label - distinct edges have been chosen while constructing @xmath106 , so @xmath108 for all @xmath21 and consequently @xmath109 .",
    "assume that @xmath110 and thus @xmath111 for all total labellings  @xmath37 .",
    "consider any spanning tree @xmath106 in @xmath62 .",
    "without loss of generality , we can assume that @xmath106 contains exactly one label edge from every component @xmath71 .",
    "the set of all label edges contained in @xmath106 corresponds to a total labeling @xmath37 of @xmath47 . since @xmath112 , for some vertex @xmath58 , we have to use at least @xmath87 distinct labels in the labeling @xmath37 .",
    "suppose that @xmath113 and we use distinct labels @xmath114 for @xmath68 .",
    "then , @xmath106 contains pairwise label - distinct edges @xmath115 , @xmath116 , and @xmath117 under scenario @xmath20 that correspond to this @xmath87-tuple of edges . the reasoning for @xmath118",
    ", @xmath90 is the same . in consequence @xmath119 and @xmath120 .",
    "let us now examine the size of the resulting instance of the min - max spanning tree problem .",
    "the size of the set of edges @xmath121 is at most @xmath122 , the size of the set of vertices @xmath123 is at most @xmath124 and the number of scenarios is at most @xmath125 .",
    "hence , and from @xmath126 , we deduce that the size of the constructed instance @xmath127 is @xmath128 , so it can be constructed in @xmath129 time .    from theorem  [ taprminmax",
    "] , we obtain the following result :    the min - max spanning tree problem with nonnegative edge costs under all scenarios is not approximable within @xmath0 for any @xmath1 , where @xmath25 is the input size , unless np @xmath26 dtime@xmath27 .",
    "[ cmmmst ]    let @xmath61 be the constant from theorem  [ taprminmax ] .",
    "for any @xmath130 we fix @xmath131 and @xmath132 , so that inequality @xmath60 is satisfied for the constant @xmath61 ( see theorem  [ taprminmax ] ) .",
    "the input size of the resulting instance  @xmath127 from theorem  [ taprminmax ] is @xmath133 for some constant @xmath134 , so it can be constructed in @xmath135 time . since @xmath131 and @xmath136 ,",
    "we get @xmath137 and the gap is @xmath138 for any @xmath1 .    the min - max regret spanning tree problem is not approximable within @xmath0 for any @xmath1 , where @xmath25 is the input size , unless np @xmath26 dtime@xmath27 .",
    "[ cmmemst ]    the corollary follows easily if we assume that each component @xmath71 in the construction from theorem  [ taprminmax ] has at least 2 label edges or , equivalently , every edge in the instance of label cover has at least two pairs of labels . in this case , under every scenario @xmath21 , there is a spanning tree of 0  cost ( recall that we never assign two  1 s to the same component in @xmath20 ) .",
    "hence @xmath139 and the proof is completed .",
    "if some edge in the instance of label cover has only one pair of labels , then this pair trivially forces an assignment of labels to two vertices , which ( after checking consistency with other edges ) can be removed from the instance before applying the construction from theorem  [ taprminmax ] .    up to this point",
    "we have assumed that the edge costs under all scenarios are nonnegative .",
    "the following theorem demonstrates that violation of this assumption makes the min - max spanning tree problem not at all approximable :    if both positive and negative costs are allowed , then the min - max spanning tree problem is not at all approximable unless p = np even for edge series - parallel graphs [ tmmna ]    we show a gap - introducing reduction from 3-sat which is known to be strongly np - complete  @xcite .",
    "_ input : _ a set @xmath140 of boolean variables and a collection @xmath141 of clauses , where every clause in @xmath142 has exactly three distinct literals .    _",
    "question : _ if there is an assignment to  @xmath143 that satisfies all clauses in  @xmath142 ?",
    "we will assume that in the instance of 3-sat for every variable @xmath144 both @xmath144 and @xmath145 appear in  @xmath142 .",
    "obviously , under such assumption  3-sat remains strongly np - complete .",
    "given an instance of  3-sat we construct an instance of min - max spanning tree as follows .",
    "for each clause @xmath146 we create a graph  @xmath147 composed of  5 vertices : @xmath148 and 6 edges : the edges @xmath149 , @xmath150 , @xmath151 correspond to literals in @xmath152 , the edges @xmath153 , @xmath154 , @xmath155 have costs equal to  @xmath156 under every scenario . in order to construct a connected graph  @xmath4 with @xmath157 , @xmath158 , we identify vertex  @xmath159 of @xmath147 with vertex  @xmath160 of  @xmath161 for @xmath162 .",
    "note that the resulting graph  @xmath7 is edge series - parallel . finally , we form scenario set @xmath9 as follows . for every pair of edges of @xmath7 , @xmath163 and @xmath164 , that correspond to contradictory literals",
    "@xmath165 and @xmath166 , i.e. @xmath167 , we create scenario @xmath20 such that under this scenario the costs of the edges @xmath163 and @xmath164 are set to  @xmath168 and the costs of all the remaining edges are set to  @xmath156 .",
    "it is easy to verify that each spanning tree  @xmath106 in the constructed instance has nonnegative maximal cost over all scenarios .",
    "suppose that 3-sat is satisfiable .",
    "then there exists a spanning tree  @xmath106 of @xmath7 containing exactly @xmath169 edges that do not correspond to contradictory literals .",
    "thus , under every scenario  @xmath20 , the tree contains at most one edge with the cost @xmath168 and all the remaining @xmath168 edges have costs equal to  @xmath156 . in consequence",
    "we get @xmath170 under every @xmath21 and @xmath171 .",
    "if 3-sat is unsatisfiable , then every spanning trees  @xmath106 of @xmath7 contains at least two edges which correspond to contradictory literals , and so @xmath172 .",
    "consequently min - max spanning tree is not approximable , unless p = np .",
    "otherwise , any polynomial time approximation algorithm applied to the constructed instance could decide if an instance of 3-sat is satisfiable .",
    "if the edge costs are nonnegative under all scenarios , then the min - max spanning tree problem is approximable within  @xmath11 , @xmath11 is the number of scenarios , and this is the best approximation ratio known so far  @xcite . on the other hand",
    "the problem is not at all approximable if negative costs are allowed ( theorem  [ tmmna ] ) . in this section",
    ", we assume that all costs are nonnegative and we give a polynomial time approximation algorithm for the problem which returns an @xmath3-approximate spanning tree , where @xmath25 is the number of vertices of @xmath7 .",
    "the algorithm is based on a randomized rounding of a solution to an iterative linear program .",
    "it is easy to check that binary solutions to the following program @xmath173 are in one - to - one correspondence with solutions to min - max spanning tree of edge costs in every scenario at most @xmath142 : @xmath174 where @xmath175 denotes the cut determined by vertex set @xmath176 , i.e. @xmath177 . the core of @xmath173 ( constraints  ( [ d1])-([d3 ] ) ) is the relaxation of the _ cut - set formulation _ for spanning tree  @xcite .",
    "the polynomial time solvability of @xmath173 follows from an efficient polynomial time separation based on the min - cut problem ( see  @xcite ) .",
    "solving @xmath173 consists in rejecting all edges @xmath6 having @xmath178 under some scenario @xmath21 and solving then the resulting linear programming problem . using binary search in @xmath179 $ ] , where @xmath180 , one can find the minimal value of parameter  @xmath142 , for which there is a feasible solution to @xmath173 .",
    "let @xmath181 be this minimal value and let @xmath182 be a feasible solution to @xmath183 .",
    "clearly @xmath184 .",
    "furthermore , if @xmath185 , then @xmath186 and thus @xmath187 for each scenario @xmath21 .",
    "we now give an algorithm that randomly rounds a feasible solution of @xmath183 to an @xmath3-approximate min - max spanning tree ( see algorithm  [ algminmax ] ) .",
    "use binary search in @xmath179 $ ] to find the minimal value of @xmath142 such that there exists a feasible solution to @xmath173 , i.e. , @xmath181 and @xmath182 .",
    "+ initially @xmath188 contains only vertices of @xmath7 , that is @xmath25 components .",
    "+ @xmath189 +    let us analyze algorithm  [ algminmax ] .",
    "obviously the algorithm is polynomial .",
    "the following lemma shows that the total cost of edges included in each iteration under any scenario @xmath21 is @xmath190 with probability at least @xmath191 :    let @xmath192 be a set of edges added to @xmath188 at iteration  @xmath193 of algorithm  [ algminmax ] and let @xmath194 , @xmath195 , where @xmath196 , @xmath197 , @xmath198 , @xmath199 are nonnegative constants such that @xmath200 , @xmath201 .",
    "then @xmath202 holds with probability at least @xmath203 .",
    "[ lminmax ]    see appendix  [ dod ] .",
    "we now analyze the feasibility of an output solution  @xmath188 .",
    "let @xmath204 be the forest obtained from @xmath205 after the  @xmath193-th iteration .",
    "initially , @xmath206 , @xmath207 , has no edges .",
    "let @xmath208 denote the number of connected components of  @xmath204 .",
    "obviously , @xmath209 .",
    "we say that an iteration  @xmath193 is `` successful '' if either @xmath210 ( @xmath205 is connected ) or @xmath211 ; otherwise , it is `` failure '' .",
    "we now recall a result of alon  @xcite ( see also  @xcite ) .",
    "his proof is repeated in appendix  [ dod ] for completeness .    for every  @xmath193 , the conditional probability that iteration",
    "@xmath193 is `` successful '' , given any set of components in @xmath205 , is at least @xmath212 .",
    "[ lalon ]    from lemma  [ lalon ] , it follows that the probability of the event that iteration  @xmath193 is `` successful '' is at least @xmath212 .",
    "this is a lower bound on the probability of success of given any history .",
    "note that , if forest @xmath204 is not connected ( @xmath213 ) then the number of `` successful '' iterations has been less than @xmath214 .",
    "let  @xmath215 be a random variable denoting the number of `` successful '' iterations among @xmath216  performed iterations of the algorithm .",
    "the probability @xmath217 $ ] can be upper bounded by @xmath218 $ ] , where @xmath219 is the sum of  @xmath216 independent bernoulli trials such that @xmath220=1/2 $ ] .",
    "this estimation can be done , since we have a lower bound on success of given any history . clearly , @xmath221=r/2 $ ] .",
    "we apply the chernoff bound ( see for instance  @xcite ) and determine the values of  @xmath222 $ ] and @xmath216 in order to fulfill the following inequality : @xmath223\\leq   \\mathrm{pr}[\\mathrm{y}<10\\ln n]= \\mathrm{pr}[\\mathrm{y}<(1-\\delta)\\mathbf{e}[\\mathrm{y } ] ] <   \\mathrm{e}^{-\\mathbf{e}[\\mathrm{y}]\\delta^2/2}=\\frac{1}{n}.   \\label{rchbralg}\\ ] ] it is easily seen that inequality  ( [ rchbralg ] ) holds if the following system of equations @xmath224 holds true . an easy computation for @xmath225 and @xmath216 in ( [ rsyst ] ) , shows that @xmath226 .",
    "hence , after @xmath216 iterations , @xmath227 , we obtain with probability at least @xmath228 a spanning tree . by the union bound and lemma  [ lminmax ] ( set @xmath229 ) , with probability at least @xmath228 in every iteration , @xmath230 , the set of edges  @xmath192 included at iteration",
    "@xmath193 satisfies the bound  ( [ bminmax ] ) .",
    "we conclude that after @xmath216 iterations , we get with probability at least @xmath231 a spanning tree whose total cost in every scenario is @xmath232 .",
    "we have , thus proved the following theorem :    there is a polynomial time randomized algorithm for min - max spanning tree that returns with probability at least @xmath233 a solution whose total cost in every scenario is @xmath234 .",
    "in this section , we discuss the 2-stage spanning tree problem in robust optimization setting .",
    "we show that the problem is hard to approximate within a ratio of @xmath2 unless the problems in np have quasi - polynomial algorithms .",
    "then , we give an lp - based randomized approximation algorithm with ratio of @xmath3 .",
    "the 2-stage spanning tree problem is not approximable within any constant , unless p = np , and within @xmath28 for any @xmath1 , unless np@xmath26dtime@xmath29 .",
    "[ t2smsp ]    we proceed with a cost preserving reduction from set cover to 2-stage spanning tree .",
    "the reduction is similar to that in  @xcite for the 2-stage stochastic spanning tree .",
    "set cover is defined as follows ( see , e.g. ,  @xcite ) :    _ input : _ a ground set @xmath235 and a collection of its subsets @xmath236 such that @xmath237 .",
    "a subcollection @xmath238 _ covers _",
    "@xmath239 if @xmath240 , where @xmath241 is the _ size of the subcollection_.    _ output : _ a minimum sized subcollection that covers @xmath239 .    the set cover problem is not approximable within any constant , unless p = np , and within @xmath242 for any @xmath1 , unless np@xmath26dtime@xmath29 , where @xmath25 is the size of the ground set ( see  @xcite ) . for a given instance @xmath243 of  set cover , we construct an instance @xmath244 of 2-stage spanning tree as follows .",
    "graph  @xmath4 is a complete graph with @xmath245 vertices @xmath246 .",
    "vertices @xmath247 correspond to @xmath248 subsets @xmath249 , vertices @xmath250 correspond to @xmath25 elements of set  @xmath239 .",
    "the costs of the edges  @xmath251 , @xmath252 , in @xmath7 in the first stage are set to  @xmath253 and the costs of all the remaining edges in @xmath7 are set to  @xmath254 .",
    "now we form scenario set @xmath9 in the second stage .",
    "each scenario @xmath255 corresponds to vertex @xmath256 , @xmath257 .",
    "let @xmath258 and let @xmath259 be the cut separating @xmath260 from all other vertices of  @xmath7 .",
    "each second stage scenario  @xmath261 is defined as : the costs of the edges from cut @xmath259 are set to  @xmath254 and the costs of the remaining edges in @xmath7 are set to  @xmath262 .",
    "we now prove that there is a subcollection of size at most @xmath263 that covers  @xmath239 if and only if there exists a spanning tree in @xmath7 of the maximum 2-stage cost at most  @xmath263 . given a subcollection @xmath264 of size  @xmath193 that covers  @xmath239 . in the first stage , we include in @xmath17 the edges @xmath265 , where vertices @xmath266 correspond to subsets @xmath267 , @xmath268 .",
    "the cost of  @xmath17 is equal to  @xmath193 . in the second stage , we augment @xmath17 to form a spanning tree with edges of cost zero in each scenario @xmath269 , @xmath257 .",
    "hence , the maximum 2-stage cost of the obtained spanning tree equals  @xmath193 .",
    "conversely , let @xmath106 be a spanning tree in @xmath7 with the maximum 2-stage cost at most  @xmath193 . hence , this tree does not contain any edge with cost  @xmath254 .",
    "consequently , in the first stage the tree contains @xmath270 edges of the form @xmath265 , @xmath271 , and in the second stage in each scenario it contains zero cost edges .",
    "the vertices  @xmath266 correspond to subsets @xmath267 , @xmath271 .",
    "it is easily seen that any element @xmath272 must be covered by at least one of subsets @xmath267 , @xmath271 .",
    "otherwise the solution would contain an edge of cost  @xmath254 .",
    "thus , @xmath267 , @xmath271 , form a subcollection of the size at most  @xmath193 that covers  @xmath239 .",
    "the presented reduction is cost preserving .",
    "hence , 2-stage spanning tree has the same approximation bounds as set cover .      in this section",
    "we construct a randomized approximation algorithm for 2-stage spanning tree , which is based on a similar idea as the corresponding algorithm for min - max spanning tree ( see section  [ randmax ] ) .",
    "consider the following program @xmath273 , whose binary solutions correspond to the solutions of 2-stage spanning tree :    @xmath274    the algorithm ( algorithm  [ alg2stage ] ) randomly rounds a feasible solution @xmath275 , @xmath276 , @xmath21 , @xmath6 , of @xmath277 , where @xmath181 denotes the minimal value of  @xmath142 for which there is a feasible solution to @xmath273 .",
    "@xmath278 + use binary search in @xmath179 $ ] to find the minimal value of @xmath142 such that there exists a feasible solution of @xmath273 , i.e. , @xmath275 , @xmath276 , @xmath21 , @xmath6 .",
    "+ initially @xmath279 contains only vertices of @xmath7 for @xmath21 .",
    "+ @xmath280 +    an analysis of algorithm  [ alg2stage ] proceeds similarly as the one of algorithm  [ algminmax ] .",
    "the following lemma holds ( the proof goes in similar manner as the proof of lemma  [ lminmax ] ) :    let @xmath192 and @xmath281 be the sets of edges in the first stage and in the second stage for every @xmath21 , respectively , added to @xmath279 at iteration  @xmath193 of algorithm  [ alg2stage ] and let @xmath194 , @xmath195 , where @xmath196 , @xmath197 , @xmath198 , @xmath199 are nonnegative constants such that @xmath200 , @xmath201 .",
    "then @xmath282 holds with probability at least @xmath203 .",
    "[ l2stage ]    let @xmath283 be the forest for @xmath21 after the  @xmath193-th iteration of algorithm  [ alg2stage ] , let @xmath284 denote the number of connected components of  @xmath283 .",
    "again , we say that an iteration  @xmath193 is `` successful '' if either @xmath285 or @xmath286 ; otherwise it is `` failure '' .",
    "the probability of the event that iteration  @xmath193 is `` successful '' is at least @xmath212 , which is due to lemma  [ lalon ] .",
    "consider any scenario  @xmath21 .",
    "if forest @xmath283 is not connected then the number of `` successful '' iterations is less than @xmath214 .",
    "we estimate @xmath217 $ ] by @xmath218 $ ] , where @xmath215 is random variable denoting the number of `` successful '' iterations among @xmath216  iterations and @xmath219 is the sum of  @xmath216 independent bernoulli trials such that @xmath220=1/2 $ ] , @xmath221=r/2 $ ] .",
    "we use the chernoff bound and compute the values of  @xmath222 $ ] and @xmath216 satisfying the following inequality : @xmath223\\leq   \\mathrm{pr}[\\mathrm{y}<10\\ln n]= \\mathrm{pr}[\\mathrm{y}<(1-\\delta)\\mathbf{e}[\\mathrm{y } ] ] <   \\mathrm{e}^{-\\mathbf{e}[\\mathrm{y}]\\delta^2/2}=\\frac{1}{nk}.   \\label{r2stageralg}\\ ] ] this gives @xmath287 and @xmath288 .",
    "recall that @xmath11 is the number of scenarios . by the union bound , the probability that a forest in at least one scenario  @xmath20 is not connected is less than @xmath289 .",
    "again , by the union bound and lemma  [ lminmax ] ( set @xmath229 ) , with probability at least @xmath228 in every @xmath193 iteration , @xmath230 , the sets of edges  @xmath192 and @xmath290 for each @xmath21 , included at iteration  @xmath193 , satisfy the bound  ( [ b2stage ] ) . thus , after @xmath216 iterations , @xmath291 , with probability at least @xmath231 , we obtain spanning trees of cost @xmath292 in every scenario .",
    "we get the following theorem :    there is a polynomial time randomized algorithm for 2-stage minimum spanning tree that returns with probability at least @xmath233 a spanning tree whose cost in every scenario is @xmath293 .",
    "[ tra2s ]    10    r.  k. ahuja , t.  l. magnanti , and j.  b. orlin . .",
    "prentice hall , englewood cliffs , new jersey , 1993 .",
    "h.  aissi , c.  bazgan , and d.  vanderpooten .",
    "approximation complexity of min - max ( regret ) versions of shortest path , spanning tree , and knapsack . in _",
    "esa 2005 _ , volume 3827 of _ lecture notes in computer science _ , pages 789798 .",
    "springer - verlag , 2005 .",
    "h.  aissi , c.  bazgan , and d.  vanderpooten .",
    "approximation of min - max ( regret ) versions of some polynomial problems . in _",
    "cocoon 2006 _ , volume 4112 of _ lecture notes in computer science _ , pages 428438 .",
    "springer - verlag , 2006 .",
    "n.  alon . a note on network reliability . in d.",
    "aldous , p.  diaconis , j.  spencer , and j.  m. steele , editors , _ discrete probability and algorithms _ , volume  72 of _ i m a volumes in mathematics and its applications _ , pages 1114 .",
    "springer - verlag , 1995 .",
    "s.  arora and c.  lund .",
    "hardness of approximations . in d.",
    "hochbaum , editor , _ approximation algorithms for np - hard problems_. pws , 1995 .",
    "m.  bellare , o.  goldreich , and m.  sudan .",
    "free bits , pcps and non - approximability - towards tight results . in _ 36th annual symposium on foundations of computer science _ , pages 422431 .",
    "ieee computer society , 1995 .",
    "j.  r. birge and f.  louveaux . .",
    "springer - verlag , 1997 .",
    "k.  dhamdhere , v.  goyal , and r.  ravi .",
    "ay today for a rainy day : improved approximation algorithms for demand - robust min - cut and shortest path problems . in",
    "stacs 2006 _ , volume 3884 of _ lecture notes in computer science _ , pages 206217 .",
    "springer - verlag , 2006 .",
    "k.  dhamdhere , r.  ravi , and m.  singh . on two - stage",
    "stochastic minimum spanning trees . in m.",
    "jnger and v.  kaibel , editors , _ ipco 2005 _ , volume 3509 of _ lecture notes in computer science _ , pages 321334 .",
    "springer - verlag , 2005 .",
    "b.  escoffier , l.  gourves , j.  monnot , and o.  spanjaard .",
    "two - stage stochastic matching and spanning tree problems : polynomial instances and approximation .",
    ", 205:1930 , 2010 .",
    "u.  feige . a threshold of ln _",
    "n _ for approximating set cover . , 45:634652 , 1998 .",
    "a.  d. flaxman , a.  m. frieze , and m.  krivelevich . on the random 2-stage minimum spanning tree .",
    ", 28:2436 , 2006 .",
    "m.  r. garey and d.  s. johnson . .",
    "w. h. freeman and company , 1979 .",
    "a.  kasperski and p.  zieliski . on the approximability of minmax ( regret ) network optimization problems .",
    ", 109:262266 , 2009 .    a.  kasperski and p.  zieliski . a randomized algorithm for the min - max selecting items problem with uncertain weights .",
    ", 172:221230 , 2009 .",
    "i.  katriel , c.  kenyon - mathieu , and e.  upfal .",
    "commitment under uncertainty : two - stage matching problems .",
    ", 408:213223 , 2008 .",
    "p.  kouvelis and g.  yu . .",
    "kluwer academic publishers , 1997 .",
    "t.  l. magnanti and l.  a. wolsey .",
    "optimal trees . in m.",
    "o. ball , t.  l. magnanti , c.  l. monma , and g.  l. nemhauser , editors , _ network models , handbook in operations research and management science _ , volume  7 , pages 503615 .",
    "north - holland , amsterdam , 1995 .",
    "m.  mastrolilli , n.  mutsanas , and o.  svensson .",
    "pproximating single machine scheduling with scenarios . in _ approx - random 2008",
    "_ , volume 5171 of _ lecture notes in computer science _ , pages 153164 .",
    "springer - verlag , 2008 .",
    "r.  motwani and p.  raghavan . .",
    "cambridge university press , 1995 .",
    "r.  ravi and a.  sinha .",
    "edging uncertainty : approximation algorithms for stochastic optimization problems . , 108:97114 , 2006 .",
    "m.  h. van der vlerk .",
    "stochastic programming bibliography .",
    ", 19962007 .",
    "( lemma  [ lminmax ] ) in order to prove the bound  ( [ bminmax ] ) , we will apply a technique used in  @xcite .",
    "consider any scenario @xmath21 .",
    "let us sort the costs in @xmath20 in nonincreasing order @xmath294}\\geq c^{s}_{e[2]}\\geq\\cdots\\geq c^{s}_{e[m]}$ ] , ( @xmath248 is the number of edges of @xmath7 ) .",
    "we partition the ordered set of edges  @xmath295 into groups as follows .",
    "the first group @xmath296 consists of edges @xmath297,\\ldots , e[j^{(1)}]$ ] , where @xmath298 is the maximum such that @xmath299}+\\cdots+\\hat{x}_{e[j^{(1)}]}\\leq \\rho_1\\ln n$ ] .",
    "the subsequent groups @xmath300 , @xmath301 , are defined in the same way , that is @xmath300 consists of edges @xmath302,\\ldots , e[j^{(l)}]$ ] , where @xmath303 is the maximum such that @xmath304}+\\cdots+\\hat{x}_{e[j^{(l)}]}\\leq \\rho_1\\ln n$ ] .",
    "the optimal value @xmath305 satisfies : @xmath306}\\hat{x}_{e[i ] } \\geq \\sum_{l=1}^{t}\\left[(\\min_{e\\in g^{(l)}}c^{s}_e)\\sum_{e\\in g^{(l)}}\\hat{x}_e\\right ] \\geq   ( \\rho_1\\ln n-1)\\sum_{l=1}^{t-1}\\min_{e\\in g^{(l)}}c^{s}_e . \\label{b10}\\ ] ] let @xmath307 be a binary random variable with @xmath308=\\hat{x}_e$ ] .",
    "it holds @xmath309 .",
    "\\label{b2}\\end{aligned}\\ ] ] let us recall a chernoff bound ( see e.g. ,  @xcite ) .",
    "suppose @xmath310 are independent poisson trials such that @xmath311=p_i$ ] .",
    "let @xmath312 then the inequality holds : @xmath313(1+\\delta ) ] <       \\mathrm{e}^{-\\mathbf{e}[\\mathrm{x}]\\delta^2/4}$ ] for any @xmath314 .",
    "we use this chernoff bound to estimate @xmath315 in each group @xmath300 . consider a group @xmath300 .",
    "it holds @xmath316=\\sum_{e\\in g^{(l ) } } \\hat{x}_e \\leq \\rho_1\\ln n$ ] .",
    "set @xmath317 .",
    "since @xmath194 , @xmath195 and @xmath200 , @xmath201 , inequality @xmath314 holds .",
    "thus the chernoff bound yields : @xmath318 < \\mathrm{e}^{-(\\rho_1\\ln n+\\ln k+\\ln f)}=1/(fkn^{\\rho_1}).\\ ] ] by the union bound , the probability that @xmath319 holds for at least one group @xmath300 is less than @xmath320 ( because the number of groups is at most  @xmath25 ) .",
    "now applying the bound @xmath321 for every @xmath322 to  ( [ b2 ] ) and using the fact that @xmath323 and inequality  ( [ b10 ] ) we obtain : @xmath324 an easy computation shows that : @xmath325 .",
    "the probability that the bound fails for a given scenario @xmath20 is less than @xmath326 so , by the union bound , the probability that it fails for at least one scenario @xmath21 is less than  @xmath327 .",
    "( lemma  [ lalon ] ) if @xmath205 is connected then we are done .",
    "otherwise , let us denote by @xmath328 the graph obtained from @xmath205 by contracting its every connected components to a single vertex .",
    "an edge  @xmath329 is not included in @xmath330 with probability  @xmath331 .",
    "hence , the probability that any vertex  @xmath68 of @xmath332 remains isolated is @xmath333 where @xmath334 denotes the set of edges incident to  @xmath68 .",
    "the last inequality follows from the fact that @xmath335 . by linearity of expectation ,",
    "the expected number of isolated vertices of @xmath332 is @xmath336 , and thus with the probability at least @xmath212 the number of isolated vertices is at most @xmath337 .",
    "hence , the number of connected components of @xmath204 is at most @xmath338 since @xmath339 , the lemma follows ."
  ],
  "abstract_text": [
    "<S> in this paper the minimum spanning tree problem with uncertain edge costs is discussed . in order to model the uncertainty a discrete scenario set is specified and a robust framework is adopted to choose a solution . </S>",
    "<S> the min - max , min - max regret and 2-stage min - max versions of the problem are discussed . </S>",
    "<S> the complexity and approximability of all these problems are explored . </S>",
    "<S> it is proved that the min - max and min - max regret versions with nonnegative edge costs are hard to approximate within @xmath0 for any @xmath1 unless the problems in np have quasi - polynomial time algorithms . </S>",
    "<S> similarly , the 2-stage min - max problem can not be approximated within @xmath2 unless the problems in np have quasi - polynomial time algorithms . in this paper randomized lp - based approximation algorithms with performance ratio of @xmath3 for min - max and 2-stage min - max problems are also proposed .    </S>",
    "<S> combinatorial optimization ; approximation ; robust optimization ; two - stage optimization ; computational complexity </S>"
  ]
}