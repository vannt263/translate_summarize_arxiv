{
  "article_text": [
    "fault tolerance for computing systems is a classic area of research that has been explored by computing researchers over decades . to address fault tolerance ,",
    "checkpointing techniques have been implemented for traditional computing systems of less complexity .",
    "these techniques essentially aim to periodically or non - periodically , when requested or automatically , save on memory or disk the state of execution , and further use the saved information for restarting execution when a failure occurs .",
    "however , since complexity of computing systems have significantly increased in due time , the drawbacks of checkpointing have posed constraints on effectively achieving fault tolerance for such large scale systems . hence , it has been necessary to develop techniques that can replace traditional checkpointing methods .",
    "middleware layers have been implemented in many large scale computing system architectures with the aim of addressing the drawbacks of checkpointing .",
    "this effort has been able to surmount a few challenges , though hasnt proved much effective .    distributed artificial intelligence in the form of multi - agents is another plausible technique that can be employed for achieving fault tolerance in computing systems .",
    "however , it is noted that there has been less effort towards extending and implementing such ideas for large scale parallel computing systems .",
    "the multi - agent technology is advantageous over traditional fault tolerance due to three reasons .",
    "firstly , since agents in multi - agent systems are characterized by persistence , hence seamless execution of a task in a parallel distributed system without cold restarts is possible .",
    "secondly , agents can contribute effectively towards self - management , hence reduces management responsibilities on an administrator .",
    "thirdly , agents can be mobile over distributed nodes , hence paving way for process migration and cuts down voluminous checkpointing .    hence , with the above advantages in view , three questions applicable to large scale parallel computing systems , `` what agent capabilities are required for fault tolerance ? '' , `` what parallel computational tasks can benefit from such agent capabilities ? '' and `` how can agent capabilities be implemented for fault tolerance ? ''",
    "are addressed in this paper . to this end ,",
    "an agent - based method for achieving fault tolerance is proposed in which a task to be executed on a parallel computing system is decomposed into sub - tasks and mapped onto agents that carry these tasks onto nodes or cores for execution .",
    "cognitive capabilities required for fault tolerance , parallel reduction algorithms that can benefit from such agent capabilities and a computer cluster - based implementation of agent capabilities for improving fault tolerance are presented in this paper as a preliminary effort towards realising the proposed agent - based method .",
    "the remainder of this paper is organised as follows .",
    "section 2 presents the background and related work that has motivated the work reported in this paper .",
    "section 3 considers `` what agent capabilities are required for fault tolerance ? '' .",
    "section 4 identifies `` what parallel computational tasks can benefit from such agent capabilities ? '' .",
    "section 5 presents `` how agent capabilities can be implemented for fault tolerance ? '' , and addresses the question by performing an experiment which is used to gather statistics to evaluate the approach .",
    "section 6 concludes this paper by considering future work .",
    "with the increase in complexity of computing systems , traditional checkpointing methods have posed constraints on achieving fault tolerance in such large scale systems .",
    "there are five major drawbacks that impair checkpointing in being effective for large scale computing systems .",
    "firstly , server based checkpointing strategies are subject to single point of failure @xcite . to address this issue ,",
    "multi - server checkpointing strategies have been introduced @xcite .",
    "however , these centralized server strategies tend to be less scalable on complex and heterogeneous environments .",
    "secondly , checkpointing relies on network storage or shared memories accessible to an entire distributed system , thereby increasing challenges like reliability , scalability and stability of the fault tolerance mechanism in the computing system .",
    "thirdly , an attempt to checkpoint a large process involves large overheads and greater time to write the checkpoint to a stable storage system . in order to mitigate this issue ,",
    "distributed commit protocols @xcite and diskless checkpointing @xcite strategies based on memory and processor redundancy have been developed .",
    "these strategies tend to be ineffective if the checkpoint size and the number of nodes in the distributed system is large .",
    "fourthly , most checkpoint strategies require a cold restart , that is , a complete reload of all processes associated with the parallel job @xcite . in this case , processors that did not suffer a failure might also require a reload of the process executing on it .",
    "fifthly , in mobile agent technology , checkpointing can prevent the loss of an agent and prevent blocking . in this case single failure does not prevent the progress of a mobile agent execution .",
    "however , checkpointing does not satisfy the exactly - once property , leading to multiple executions of an agent @xcite .    on an implementation level",
    ", checkpointing based fault tolerance has opened avenues for implementing middleware approaches that aim to add an additional interface or a sandwich layer between hardware and software layers @xcite . to improve efficiency of checkpointing",
    ", additional checkpointing strategies over custom implementations have been adopted in such middleware layers like mpi ( message passing interface ) , a few of which are referenced here .    in @xcite , the concept of automatic checkpointing",
    "is introduced in lam / mpi middleware .",
    "the strategy records the context of an application periodically , identifies failed nodes and restarts mpi processes only on failed nodes , hence allowing continuity of the executing application by taking advantage of the computing done previously .    in @xcite , dream ( dynamic robust embedding / allocation middleware ) based on robust mpi ( r - mpi ) as a library component is proposed . in @xcite , to address challenges in diskless checkpointing , algorithm - based fault tolerance ( abft ) using fault tolerant mpi ( ft - mpi ) is introduced . recovery from failure in the middle of computations",
    "is performed by maintaining a checksum relationship .    in @xcite , to address the scalability issue of checkpointing in mpi applications , an asynchronous replication strategy is introduced that distributes replication overhead over all participating nodes in the computation .    in @xcite ,",
    "fault tolerant mpi comprising a replicated system controller , a node controller and checkpoint server tested on a parallelized weather model is introduced .",
    "the fault tolerant version is designed to address single point failures , ensure consistency of checkpoint files and robustness of fault detection hierarchy .    in @xcite , for computationally intensive applications using mpi , two approaches for checkpoint based fault tolerance is proposed .",
    "firstly , segment - level solution , an extension of a checkpoint library for sequential codes .",
    "secondly , variable - level solution , a manual solution determined by the programmer that inserts safe points and specifies data to be stored during checkpointing into program code .    in @xcite , an extension to mpi",
    "is proposed that consists of two steps to achieve fault tolerance .",
    "firstly , failure diagnosis , detection of the location of a failed component .",
    "secondly , failure recovery , a step towards reassigning tasks of a failed component to fully functional system nodes .    however , most of the above solutions implemented in the mpi middleware face similar challenges apparent in traditional checkpointing strategies . to overcome these challenges , in recent times",
    ", multi - agent systems have incorporated concepts of fault tolerance .",
    "the multi - agent technology is beneficial and has been considered in the previous section .",
    "research on multi - agent based fault tolerance is reported in @xcite@xcite@xcite@xcite@xcite . though research has been pursued on multi - agents focusing on fault tolerance , it is surprising that there has been little effort towards extending and implementing such ideas for large scale parallel computing systems .",
    "to employ multi - agents in large scale parallel computing systems it is necessary to investigate what agent capabilities are required for fault tolerance .",
    "hence , the next section considers the cognitive agent capabilities required to achieve fault tolerance .",
    "these capabilities are then further aimed to be implemented in the method proposed in this paper .",
    "_ what agent capabilities are required for fault tolerance ? _",
    "agent - based techniques are biomimetically inspired , that is biologically inspired from nature to foster innovative designs for man - made systems @xcite@xcite .",
    "for example , swarming of agents in multi - agent systems like swarm robotic systems are inspired from the biological phenomena of swarming bees .",
    "agents in a natural swarm also demonstrate intelligence by their cognitive capabilities in at least four different ways .",
    "firstly , an agent is capable of being able to know its environment , the surroundings in which it is located .",
    "secondly , an agent is capable to identify a location in the environment in which it can nicely situate .",
    "thirdly , an agent is capable to sense any hazard that is likely to deteriorate or impair its functioning .",
    "fourthly , an agent is capable to pass over from one location to another when necessary for survival .",
    "these capabilities are also desirable for agents in a computing environment . in other words , in a computing environment , cognitive agent intelligence is not demonstrated by merely being able to act as reflexive agents , but by also being able to perceive , reason , judge , respond and learn @xcite .",
    "the aim of the intelligent agent based approach proposed in this paper is to achieve agent intelligence in parallel computing systems and further demonstrate that the cognitive capabilities of an agent complementing its intelligence can lead towards fault tolerance .    in the proposed approach ,",
    "a task to be executed on a parallel computing system is decomposed into sub - tasks and mapped onto agents that carry these tasks onto nodes or cores for execution .",
    "the agent and the sub - problem are independent of each other ; in other words , the agents only carry the sub - tasks or act as a wrapper around the sub - task independent of the operations performed by the task .",
    "an agent possesses capabilities similar to the capabilities of a natural agent presented above .",
    "intelligence of an agent in the computing environment is demonstrated in four different ways .",
    "firstly , an agent is aware of its environment , that is the nodes or cores on which it can carry a task onto , other agents in its vicinity and agents with which it interacts or shares information .",
    "secondly , an agent can situate itself on a node or core that may not fail soon and can provide necessary and sufficient consistency in executing the task .",
    "thirdly , an agent can predict core failures by consistent monitoring ( for example , power consumption and heat dissipation of the cores can be used to predict failures ) .",
    "fourthly , an agent is capable of shifting gracefully from one core to another , without causing interruption to the state of execution , and notifying other interacting agents in the system when a core on which a sub - task being executed is predicted to fail .",
    "more specifically , the computing environment in which an agent is situated comprises both other agents with which it can interact and computing resources .",
    "perception in this context would mean to acquire information concerning the environment .",
    "for this , an agent needs to answer questions such as ` are there other agents in my vicinity ? ' and ` which computing cores are functional in my vicinity ? ' to achieve this , an agent can probe its environment , i.e. , by sending ` are you alive ' signals to the agent and the computing resources .",
    "perception for an agent also includes gathering information for answering the question ` will the core that i am situated on fail ? ' .",
    "reasoning for an agent in a computing environment becomes necessary once an agent predicts the computing core it is situated on to fail .",
    "an agent needs to answer questions such as ` which cores in the computing environment would it be possible to move onto ? '",
    "since an agent has options to move onto other cores in its vicinity , an agent needs to make an appropriate choice .",
    "hence , the agent needs to also think ` will the core that i will move onto fail ? ' . for this ,",
    "an agent should gather sensory information of the cores in its vicinity .",
    "judging for an agent in a computing environment is necessary for decision making .",
    "for example , an agent may think about ` which core do i move to ? ' , but a decision has to be made concfirming the core to which an agent can move . as suggested above , the sensory information perceived by an agent aids decision making .",
    "after an agent makes a decision as to which core it can move onto , a response needs to be initiated . a response for example , instructions like `",
    "move to ' or ` move to core x ' , so that the agents can move onto a core other than which it is situated on is an example .",
    "learning in the computing environment is based on the perceived sensory information and can also aid decision making .",
    "for example , in the context of the algorithm implemented in this section , an agent updates its information on the cores it is dependent on .",
    "the core dependencies known to the agent and the knowledge gained from ` are you alive ' signals contribute to the knowledge of an agent about the computing environment .",
    "_ what parallel computational tasks can benefit from such agent capabilities ? _    one important aspect in large scale parallel computing is binary trees @xcite .",
    "algorithms that implement binary trees can have data flow from the leaves of a tree to its root ( bottom - up ) and is implemented in fan - in or reduction algorithms @xcite .",
    "parallel reduction algorithms , which implement the bottom - up approach of binary trees , are of interest in the context of fault tolerance due to two reasons .",
    "firstly , the computing nodes of a parallel reduction algorithm tend to be critical .",
    "the execution of the algorithm stalls or produces an incorrect solution if any node information is lost .",
    "secondly , parallel reduction algorithms are employed in critical applications such as space applications .",
    "these applications require fault tolerant distributed systems .    in space applications , processing cores of a field programmable gate array ( fpga ) employed in spacecrafts",
    "are subject to single event upsets ( seu ) caused by radiation on moving out of earth s atmosphere @xcite @xcite .",
    "if critical applications such as trajectory prediction of a space craft using kalman filters @xcite employ the parallel reduction algorithm without fault tolerance , it is more likely that the execution of the algorithm miscarries . in these cases",
    ", neither does checkpointing come into power play due to the drawbacks considered in section 2 .",
    "moreover , such applications do not have the luxury of time to reinstate the cores and restart the execution of algorithms .",
    "hence , a fault - tolerant parallel reduction algorithm are required .    to design such fault tolerant algorithms it is necessary to consider the fault tolerance requirements .",
    "first of all , the design must incorporate a reactive or a proactive fault tolerant mechanism .",
    "reactive fault tolerant mechanisms may not prove useful for critical applications since faults that occur within the system are dealt with only after the fault occurs .",
    "proactive fault tolerance , on the other hand , predicts likely faults or failures and takes preventive measures to avoid a likely occurence of a fault .",
    "in the case of developing parallel reduction algorithms designed for critical applications it would be appropriate to incorporate proactive fault tolerance .    if proactive fault",
    "tolerant is incorporated in the algorithm then what strategy is incorporated to prevent the loss of data also needs to be considered .",
    "data replication on several nodes is one possible strategy .",
    "however , if voluminous data needs to replicated then more storage space will be required on computing nodes , which may not be necessarily available onboard space crafts . in such cases ,",
    "more dynamic and self - managing methods employing multi - agent techniques can be employed .    keeping the above requirements in mind , parallel summation , which is an exemplar of parallel reduction algorithm is considered in this paper and illustrated in figure [ figure 1 ] .",
    "the algorithm works in four sequential levels .",
    "the first level comprising nodes @xmath0 receives a live input feed of data .",
    "the second level comprising nodes @xmath1 receives data from the first level , adds the data received and yields the result to the third level nodes @xmath2 and @xmath3 .",
    "the fourth level , adds data received from the third level nodes and produces the final result .    for a given time step ,",
    "every node in a level operates in parallel .",
    "each node is characterized by input dependencies ( process or processor a node is dependent on for receiving an input ) , output dependencies ( process or processor a node yields data to as output ) and data contained in the node .",
    "the first level nodes have one input dependency and one output dependency .",
    "for instance , node @xmath4 has one input dependency @xmath5 and node @xmath6 as its output dependency .",
    "however , the second , third and fourth levels have two input dependencies and one output dependency .",
    "for instance , node @xmath2 of the third level has nodes @xmath6 and @xmath7 as input dependencies and node @xmath8 as output dependency .",
    "the data contained in a node is either the input data for the first level nodes or a calculated value ( sum of two value in the case of a parallel summation algorithm ) stored within a node .",
    "the fault tolerance of the above parallel summation algorithm could be improved if in some way the algorithm itself could be self - managing .",
    "a simple definition of self - management in this context would be where if a node employed in the execution of the algorithm is about to fail , then the agent situated on the node predicted to fail can be moved off the node and the input and output dependencies re - established on another node .",
    "this would require the individual agents to incorporate intelligence whereby the condition of the computing node can be monitored and the agent moved if failure is predicted .        to incorporate intelligence all the parallel components of the parallel summation algorithm shown in figure [ figure99 ] , left , are mapped onto a set of agents such that the algorithm is essentially the payload of the agents .",
    "figure [ figure99 ] , middle , shows the agents .",
    "the set of agents then carry the payload onto the array of computing nodes .",
    "if a core failure is predicted by an agent , then the agent avoids the obstacle .",
    "figure [ figure99 ] , right , shows a set of agents that have located on the computing array .",
    "_ how can agent capabilities be implemented for fault tolerance ? _    in this section , experimental studies to implement the intelligent agents considered in the above sections , it is necessary to firstly consider the requirements for the experiment , which include considerations of the computing platform and middleware .",
    "then , the experiment performed for confirming the feasibility of the proposed approach is presented .",
    "a computer cluster - based parallel summation algorithm is considered in this section .",
    "the computing platform was chosen as a cluster on arbitrary grounds and for two technical reasons .",
    "firstly , a cluster is often characterized by three basic elements , namely a collection of nodes , a network connecting these nodes and a facility to access and share information between the nodes @xcite , which are sufficient constituents for providing an infrastructure for implementing intelligent agents .",
    "secondly , existing middleware for clusters , namely message passing interface ( mpi ) @xcite provide standard and portable programming interfaces .",
    "the cluster used for the research reported in this paper is one among the high performance computing resources available at the centre for advanced computing and emerging technologies ( acet ) , university of reading , united kingdom @xcite @xcite .",
    "the cluster is primarily used for the purpose of teaching and performing multi - disciplinary research .",
    "the cluster consists of a head node and 33 compute nodes .",
    "the formal specification of the head node is an intel pentium 4 cpu 3.20 ghz , 2 gb ram and 160 gb hard disk , while that of 31 compute nodes are intel pentium 4 cpu 2.40 ghz , 512 mb ram and 80 gb hard disk , and that of the remaining 2 compute nodes are intel pentium 4 cpu 2.60 ghz , 512 mb ram and 40 gb hard disk .",
    "all nodes are connected via a gigabit ethernet switch and communicate via the standard tcp protocol .",
    "the cluster - based implementations reported in this paper are based on the message passing interface ( mpi ) , a standardized application programming interface ( api ) used for parallel and/or distributed computing .",
    "open mpi @xcite @xcite version 1.3.3 , an open source implementation of mpi 2.0 is employed on the cluster .",
    "an important feature of mpi 2.0 , dynamic process creation and management , is of potential for exploration in the context of swarm - array computing .",
    "the mpi dynamic process model permits the creation and management of a set of processes both when an mpi application begins and after the application has started .",
    "the management of newly created processes include cooperative termination of a process , communication between newly created processes and existing mpi application , and establishing communication between two independent processes .",
    "mpi_comm_spawn is used to create a new mpi process and establish communication from an existing mpi application . on the other hand , mpi_comm_accept and mpi_comm_connect",
    "can be used to establish communication between two independent processes .",
    "more mpi specific details on dynamic process model can be obtained from @xcite @xcite .",
    "the fault tolerant concepts incorporated using intelligent agents in the parallel summation algorithm are with respect to the cognitive capabilities presented in section 3 . since mpi gives control over the process being executed rather than the processor on which a process is being executed , it was appropriate to implement the intelligent agent approach using mpi .    in order to implement the approach ,",
    "an abstraction layer of the hardware resource layer had to be implemented .",
    "the hardware resource layer comprises physical nodes of the cluster and is connected via a switch , thereby forming a fully connected mesh topology .",
    "however , the abstracted layer is obtained when the physical nodes are abstracted as logical nodes .",
    "this is possible by implementing rules / policies .",
    "the policies are such that a process can only communicate with a vertically , horizontally or diagonally adjacent process , effectively leading to a grid topology on the abstracted layer . for example",
    ", nine nodes forming a fully connected mesh topology in figure 2 is abstracted to a grid topology in the abstraction layer .",
    "the agents on the abstracted layer are created such that they carry input and output dependencies and data . since",
    ", parallel summation is relatively less complex when compared to other computational algorithms , the agents carry little information and have only few dependencies .",
    "each process executing on a node also gathers some sensory information through a hardware probing process to predict whether a node is likely to fail , on similar lines to proactive fault tolerance .",
    "the sensory information enables an agent to know its own surroundings on the computational environment , hence achieving the first cognitive capability considered in section 3 .    in the implementation presented in this",
    "paper node temperatures are simulated .",
    "when the temperature of a node rises beyond a threshold , the hardware probing process executing on that node predicts a failure and hence causes an agent to spawn a process on an adjacent core in the abstracted layer . in this case ,",
    "an agent gathers sensory information on rising temperature than can likely impair or deteriorate its functioning , thereby achieving the third cognitive capability considered in section 3 . in the scenario considered in this paper",
    ", it is assumed that no adjacent core will fail in the next time step and hence any core adjacent to the core predicted to fail is randomly .    when rising temperature is detected , an agent identifies a node in the computational environment on which a new process can be spawned , thereby achieving the second cognitive capability considered in section 3 .",
    "the agent on the abstracted core expected to fail shifts to the adjacent core on which the new process was spawned .",
    "an agent is capable of passing from one node to another , thereby achieving the fourth cognitive capability considered in section 3 .",
    "the dependency information carried by the agent that was shifted to the new core is employed to reinstate the state of execution of the algorithm .",
    "the data for summation contained in the agent , either obtained from a previous level or a calculated value to be yielded to the next level , ensures that information is not lost and does not affect the final solution in critical applications .",
    "the above experiment is illustrated in figure [ figure 3x ] and briefly demonstrates how cognitive capabilities , namely perception , reasoning , judging , response and learning , can lead towards achieving fault tolerance .",
    "the approach implemented above is a simple demonstration that accommodates some of the concepts of intelligent agents and is a preliminary step towards realizing the approach .",
    "@xmath9 , the time taken by an agent to transfer from a node @xmath10 predicted to fail onto an adjacent node in the abstracted layer and re - establish all process dependencies for seamless execution was noted .",
    "nodes @xmath11 as shown in figure 1 are the computational nodes of the parallel summation algorithm , and hence are the only nodes considered for calculating @xmath9 .",
    "thirty different trial runs were performed to gather the statistic .",
    "figure [ figure 3 ] , figure [ figure 4 ] and figure [ figure 5 ] are plots that show @xmath9 for 30 different trials .",
    "figure 3 shows @xmath9 for the second level nodes @xmath1 for 30 trials .",
    "figure 4 shows @xmath9 for the third level nodes @xmath2 and @xmath3 for 30 trials .",
    "figure 5 shows @xmath9 for the fourth level node @xmath8 for 30 trials .",
    "further , @xmath12 , the mean time of @xmath9 for a particular node was calculated .",
    "this metric yields information on the mean time taken by an agent to transfer from a node @xmath13 predicted to fail onto an adjacent node in the abstracted layer and re - establish all process dependencies for seamless execution .",
    "@xmath12 is calculated as @xmath14 .",
    "@xmath15 , the mean time taken for an agent transfer from all nodes predicted to fail in a level of the parallel summation algorithm onto an adjacent node in the abstracted layer was calculated .",
    "nodes @xmath1 are used in level 2 , while @xmath2 and @xmath3 in level 3 and @xmath8 in level 4 .",
    "@xmath16 is calculated as @xmath17 , @xmath18 and @xmath19 .",
    "the mean time for an agent transfer from a computational node in the second level to an adjacent node in the abstracted layer is obtained as @xmath20 , indicated by an axis line in figure 3 .",
    "the mean time for an agent transfer from a computational node in the third level to an adjacent node in the abstracted layer is obtained as @xmath21 , indicated by an axis line in figure 4 .",
    "the mean time for an agent transfer from a computational node in the fourth level to an adjacent node in the abstracted layer is obtained as @xmath22 , indicated by an axis line in figure 5 .",
    "@xmath23 , the mean time of agent transfer for all computational nodes in the parallel summation algorithm onto an adjacent node in the abstracted layer was calculated .",
    "this value can be calculated as the mean time of all @xmath12 of the computational nodes or the mean time of all @xmath16 of the computational levels .",
    "@xmath23 is calculated as @xmath24 or @xmath25 .",
    "table  1 . computed values for @xmath26 , @xmath16 and @xmath23 , @xmath27 , @xmath28 .",
    "[ cols=\"^,^,^,^,^,^,^,^\",options=\"header \" , ]     table 1 summaries the computed values of @xmath26 , @xmath29 , @xmath30 , @xmath31 and @xmath23 .",
    "the mean time @xmath23 of all the computational nodes in the agent - based approach is calculated as 0.344 sec .",
    "this value is @xmath32 as shown in figure [ figure 3x ] , the time taken for reinstating execution after a predicted node failure .",
    "if traditional checkpointing with human adminstration was employed , reinstating execution would be at least in the order of minutes .",
    "this brief comparison reveals that the multi - agent approach is more effective than traditional fault tolerant methods .",
    "it is also worthwhile to consider how the time taken by an agent to reinstate execution would be affected by increasing dependencies ( total dependencies being equal to the sum of the input and output dependencies . in the experiments presented in this paper each node had only one output dependency ) . for this , experiments were conducted such that the mean time @xmath23 was calculated for the parallel summation algorithm with different input dependencies .",
    "the graph shown in figure [ figure 6 ] is based on the results obtained from the experiments .",
    "the general trend of the graph is such that there is an increase in the time taken for reinstating execution until there are twelve dependencies .",
    "this is due to the fact that there is an increase in the overheads associated .",
    "however , the graph is steady for dependencies greater than twelve .",
    "in other words , there is little increase in the mean time for reinstating execution though the algorithm starts to handle more data .    in short ,",
    "though only preliminary results obtained through simple experiments are presented in this paper , the proposed multi - agent approach is promising and paves a path for effectively achieving fault tolerance in parallel computing systems .",
    "in this paper the incapability of traditional methods such as checkpointing for achieving efficient and effective fault tolerance in complex parallel computing systems is presented .",
    "hence , the need for a transition from traditional checkpointing to agent - based methods is highlighted . to extend agent - based methods for large scale parallel computing systems three fundamental questions need to be addressed . in this regard , `` what agent capabilities are required for fault",
    "tolerance ? '' , `` what parallel computational tasks can benefit from such agent capabilities ? '' and `` how can agent capabilities be implemented for fault tolerance ? '' are addressed .",
    "cognitive capabilities of agents on a computing environment that can lead to fault tolerance are presented .",
    "parallel reduction algorithms are considered as tasks that can benefit from such agent capabilities .",
    "an agent - based approach is implemented on a computer cluster using the message passing interface ( mpi ) .",
    "experimental results are gathered based on the time taken for reinstating execution once a fault is predicted to occur . though approximations and assumptions are made in the experiments , preliminary results confirm that the proposed method , if well implemented , is more beneficial and dependable when compared to traditional methods .",
    "hence this paper is an effort towards realising an implementation that can be employed to achieve improvised fault tolerance and confirms that _ agent intelligence can be used to achieve fault tolerant parallel computing systems_.    future work will aim to analyse the method using metrics that can evaluate various aspects of the method such as precision in fault prediction , capability to prevent faults and reduction of overhead in recovery from faults .",
    "immediate efforts will be made to address real - time issues in the implementation by considering multiple node failures as against single node failures reported in this paper .",
    "the approach will also be considered for being implemented and tested on other parallel computing environments .",
    "further , a more sophisticated and general implementation of the approach proposed above will be considered .",
    "a. d. selvakumar , p. m. sobha , g. c. ravindra and r. pitchiah , design , implementation and performance of fault - tolerant message passing interface ( mpi ) , _ proceedings of the 7th international conference on high performance computing and grid in asia pacific region _",
    "( 2004 ) 120129 .",
    "x. yang , y. du , p. wang , h. fu and j. jia , ftpa : supporting fault - tolerant parallel computing through parallel recomputing , _ ieee transactions on parallel and distributed systems _ ,",
    "20 , issue 10 * ( 2009 ) 14711486 .      c. -h .",
    "yeh , the robust middleware approach for transparent and systematic fault tolerance in parallel and distributed systems , _ proceedings of the international conference on parallel processing _ ( 2003 ) 6168 .",
    "j. c. mourino , m. j. martin , p. gonzalez and r. doallo , fault - tolerant solutions for a mpi compute intensive application , _ proceedings of the 15th euromicro international conference on parallel , distributed and network - based processing _ ( 2007 ) 246253 .",
    "t. shwe and w. aye , a fault tolerant approach in cluster computing system , _ proceedings of the 5th international conference on electrical engineering / electronics , computer , telecommunications and information technology _ ( 2008 ) 149152 .",
    "p. tichy , p. slechta , r. j. staron , f. p. maturana and k. h. hall , multi - agent technology or fault tolerance and flexible control , _ ieee transactions on systems , man and cybernetics , part c : application and reviews _",
    "( 2006 ) 700704 .",
    "m. j. g. c. mendes , b. m. s. santos and j. sa da costa , multi - agent platform for fault tolerant control systems , _ proceedings of the ieee international conference on systems , man and cybernetics _",
    "( 2007 ) 13211326 .    ad .",
    "l. almeida , s. aknine , j. -p .",
    "briot and j. malenfant , plan - based replication for fault - tolerant multi - agent systems , _ proceedings of the 20th ieee international parallel and distributed processing symposium _ ( 2006 ) .",
    "z. a. khan , s. shahid , h. f. ahmad , a. ali and h. suguri , decentralized architecture for fault tolerant multi agent system , _ proceedings of the 7th ieee international symposium on autonomous decentralized systems _ ( 2005 ) 167174 .",
    "s. summiya , k. ijaz , u. manzoor and a. a. shahid , a fault - tolerant infrastructure for mobile agents , _ proceedings of the international conference on computational intelligence for modelling control and automation and international conference on intelligent agents web technologies and international commerce _",
    "( 2006 ) .",
    "m. v. obryan , c. poivey , s. d. kniffin , s. p. buchner , r. l. ladbury , t. r. oldham , j. w. howard jr . , k. a. label , a. b. sanders , m. berg , c. j. marshall , p. w. marshall , h. s. km , a. m. dung - phan , d. k. hawkins , m. a. carts , j. d. forney , t. irwin , .c .",
    "m. seidleck , s. r. cox , m. friendlich , r. j. flanigan , d. petrick , w. powell , j. karsh and m. baze , compendium of single event effects results for candidate spacecraft electronics for nasa , _ proceedings of the ieee radiation effects data workshop _ ( 2006 ) 1925 .",
    "b. tang , p. cui and y. chen , a parallel processing kalman filter for spacecraft vehicle parameters estimation , _ proceedings of the ieee international symposium on communications and information technology _ ( 2005 ) 14761479 .",
    "e. gabriel , g. e. fagg , g. bosilca , t. angskun , j. dongarra , j. m. squyres , v. sahay , p. kambadur , b. barrett , a. lumsdaine , r. h. castain , d. j. daniel , r. l. graham , t. s. woodall , open mpi : goals , concept , and design of a next generation mpi implementation , _ proceedings of the 11th european pvm / mpi users group meeting _ , budapest , hungary ( 2004 ) 97104 ."
  ],
  "abstract_text": [
    "<S> the work reported in this paper is motivated towards validating an alternative approach for fault tolerance over traditional methods like checkpointing that constrain efficacious fault tolerance . _ </S>",
    "<S> * can agent intelligence be used to achieve fault tolerant parallel computing systems ? * _ if so , _ </S>",
    "<S> `` what agent capabilities are required for fault tolerance ? '' _ , _ `` what parallel computational tasks can benefit from such agent capabilities ? '' _ and _ `` how can agent capabilities be implemented for fault tolerance ? '' _ need to be addressed . </S>",
    "<S> cognitive capabilities essential for achieving fault tolerance through agents are considered . </S>",
    "<S> parallel reduction algorithms are identified as a class of algorithms that can benefit from cognitive agent capabilities . </S>",
    "<S> the message passing interface is utilized for implementing an intelligent agent based approach . </S>",
    "<S> preliminary results obtained from the experiments validate the feasibility of an agent based approach for achieving fault tolerance in parallel computing systems . </S>"
  ]
}