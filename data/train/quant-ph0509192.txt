{
  "article_text": [
    "* * q**uantum computation connects ideas from computer science and physics  @xcite .",
    "reversible circuits are a necessary subclass whose realization is required for any quantum computer to be universal .",
    "three state quantum systems have recently been discussed in the framework of cryptography  @xcite , and the concept of a qudit cluster state has been proposed  @xcite .",
    "qudit systems received further study in  @xcite and  @xcite wherein quantum hybrid gates acting on tensor products of qudits of different dimensions were discussed .",
    "recently synthesis for d - level systems showing asymptotic optimality was also proposed  @xcite .",
    "the study in  @xcite and  @xcite found hybrid quantum gates that , when considered to be controlled by and act on three level quantum systems define the hybrid toffoli , swap and not gates used in this paper .",
    "the physical realization of these hybrid gates might be accomplished via spin systems  @xcite or quantum harmonic oscillators  @xcite .",
    "a universal set of ternary quantum gates enables the realization of any tristate switching network on a candidate qudit realization .",
    "the computer science community has also experienced recent interest in the universal sets of gates required for ternary quantum computing systems ; the main results of which appear in  @xcite . in these gates ,",
    "arbitrary galois field operations are used in the so - called toffoli gates of the esop - based ( exclusive sums - of - products ) realization of binary reversible circuits , where galois addition and multiplication replace the xor and and gates , respectively .",
    "the esop circuit synthesis programs use heuristic rule - based search strategy to minimize each output as an exclusive sum of products realized as @xmath1-input ( @xmath2 ) toffoli gates .",
    "we observe that the universality discussed in the literature has an assumption that the inputs of gates can be set to constant values , thus ancilla bits are used  @xcite .",
    "these programs can be applied to large functions but their disadvantage is that they create @xmath3 ancilla bits ( one for each output ) and use multi - input gates that may be expensive . although  @xcite discussed entanglement generation with and without ancilla qudits , in both the physics and computer science community neither the ternary switching universality of the introduced sets of gates nor the proof of a synthesis algorithms convergence was given .",
    "group theory  @xcite has found particular use to generate reversible logic circuits  @xcite .",
    "some notable results appear in  @xcite and  @xcite@xcite@xcite and are applicable to the synthesis of quantum switching networks .",
    "the motivation of this paper is to find the universality of a gate family  @xcite to be used in synthesis of ternary reversible circuits without ancilla bits .",
    "we prove that ternary swap , not and toffoli gates  @xcite are universal for realization of arbitrary ternary @xmath0 reversible circuits without ancilla bits .",
    "moreover we create an algorithm for one of these gate families that is provably convergent .",
    "our algorithm is constructive and effective in both space and time resources .",
    "this paper is organized as follows .",
    "first , in sec .  [ sec : main ] , we introduce some basic definitions of ternary switching networks and the needed group theory natation , terms and results .",
    "we then present our main results : theorem  [ theorem : generate ] and  [ theorem : generate2 ] after four lemmas .",
    "second , we conclude this paper . finally ,",
    "in the appendix , we prove lemma  [ lemma:3defvec ] , and present two examples to illustrate the synthesis process for a given ternary reversible circuit .",
    "this section begins by presenting some basic definitions of ternary switching networks and the needed group theory notation and terms .",
    "let @xmath4 . a ternary logic circuit @xmath5 with @xmath6 input variables , @xmath7 , and @xmath6 output variables , @xmath8 , is denoted by @xmath9 , where @xmath10 is the input vector and @xmath11 is the output vector .",
    "there are @xmath12 different assignments for the input vectors .",
    "a ternary logic circuit @xmath5 is reversible if it is a one - to - one and onto function ( bijection ) .",
    "a ternary reversible logic circuit with @xmath6 inputs and @xmath6 outputs is also called an @xmath13 ternary reversible gate .",
    "there are a total of @xmath14 different @xmath0 ternary reversible circuits .",
    "the concept of a permutation group and its relationship with reversible circuits will now be introduced .",
    "let @xmath15 .",
    "a bijection   of @xmath16 onto itself is called a permutation on @xmath16 .",
    "the set of all permutations on @xmath16 forms a group under composition of mappings , called a symmetric group on @xmath16 .",
    "it is denoted by @xmath17  @xcite .",
    "a permutation group is simply a subgroup  @xcite of a symmetric group .",
    "a mapping @xmath18 can be written as : @xmath19 here we use a product of disjoint cycles as an alternative notation for a mapping  @xcite .",
    "for example , @xmath20 can be written as @xmath21 .",
    "denote `` ( ) '' as the identity mappings direct wiring and call this the unity element in a permutation group .",
    "the inverse mapping of mapping @xmath22 is denoted as @xmath23 . as per convention",
    ", a product @xmath24 of two permutations applies mapping @xmath22 before @xmath25 .",
    "we order the @xmath12 different @xmath6-input assignment vectors as : @xmath26 and denote them by @xmath27 ,  , @xmath28 , where @xmath29 .",
    "thus a @xmath0 ternary reversible circuit is just a permutation in @xmath30 ( _ where @xmath31 _ ) , and vice versa .",
    "cascading two gates is equivalent to multiplying two permutations . in",
    "what follows , no distinction between an @xmath0 reversible gate and a permutation in @xmath30 ( _ where @xmath29 _ ) will be made .    a swap gate @xmath32 exchanges the @xmath33 bit @xmath34 and the @xmath35 bit @xmath36 , i.e. @xmath37 if @xmath38 .",
    "a ternary not gate @xmath39 is defined as : @xmath40 denotes addition modulo 3 ] ; @xmath41    a ternary toffoli gate t is defined such that if @xmath42 , then @xmath43 ; otherwise , @xmath44 , whereas @xmath45 , for @xmath46 .",
    "in other words , it maps @xmath47 to @xmath48 , @xmath48 to @xmath49 , @xmath49 to @xmath47 , respectively , where @xmath50 and the other assignment vectors do not change .",
    "@xmath51 = \\left[\\begin{array}{c}0,1,1,\\ldots,1\\\\ 1,1,1,\\ldots,1\\\\ 2,1,1,\\ldots,1\\\\ others\\end{array}\\right ] { t \\atop \\rightarrow } \\left[\\begin{array}{c}1,1,1,\\ldots,1\\\\ 2,1,1,\\ldots,1\\\\ 0,1,1,\\ldots,1\\\\ others\\end{array } \\right ] = \\left[\\begin{array}{c}d_2\\\\ d_3\\\\ d_1\\\\ \\ldots \\end{array}\\right]\\ ] ]    from the definition of @xmath52 , we have @xmath53 .",
    "thus , @xmath52 is a 3-cycle , and @xmath54 , @xmath55 .",
    "let @xmath17 be a symmetric group of symbols \\{@xmath56 } , then @xmath57 , where @xmath58 , is called a @xmath59-cycle .",
    "in particular , a @xmath59-cycle @xmath60 is called a neighbor @xmath59-cycle of @xmath17 , for @xmath61    a permutation is even if it is a product of an even number of 2-cycles and odd if it is an odd a product number of 2-cycles .",
    "obviously , a 3-cycle is an even permutation .",
    "for instance , ( 1 , 3 , 2 ) = ( 2 , 3 ) ( 3 , 1 ) .",
    "the product of some even permutations is also an even permutation .",
    "the product of an odd number of odd permutations is an odd permutation .",
    "the product of an even number of even permutations with an odd number of odd permutations is an odd permutation .",
    "the product of an even number of odd permutations is an even permutation .",
    "[ lemma : eij ] @xmath32 is : a product of @xmath62 disjoint 2-cycle permutations , an odd permutation and @xmath63 .    from the definition of @xmath32 , we have the mapping of @xmath32 in ( [ eqn : map eij ] ) , thus the disjoint 2-cycle s @xmath64 , @xmath65 , @xmath66 are in @xmath32 .",
    "there are @xmath67 cases for the assignments of the @xmath68 positions except @xmath34 and @xmath36 .",
    "thus , there are @xmath69 disjoint 2-cycles in @xmath32",
    ". the other vectors do not change . therefore , @xmath32 is a product of these @xmath62 disjoint 2-cycles .",
    "so @xmath32 is an odd permutation and @xmath63 .",
    "for example , when @xmath70 , we have @xmath71 .",
    "@xmath72 & = & \\left[\\begin{array}{c } b_1,\\ldots,1,\\ldots,0,\\ldots , b_n\\\\ b_1,\\ldots,0,\\ldots,1,\\ldots , b_n\\\\ b_1,\\ldots,1,\\ldots,2,\\ldots , b_n\\\\ b_1,\\ldots,2,\\ldots,1,\\ldots , b_n\\\\ b_1,\\ldots,2,\\ldots,0,\\ldots , b_n\\\\ b_1,\\ldots,0,\\ldots,2,\\ldots , b_n\\\\ other vectors\\end{array}\\right ] & { e_{i , j } \\atop \\rightarrow } & \\left[\\begin{array}{c } b_1,\\ldots,0,\\ldots,1,\\ldots , b_n\\\\ b_1,\\ldots,1,\\ldots,0,\\ldots , b_n\\\\ b_1,\\ldots,2,\\ldots,1,\\ldots , b_n\\\\ b_1,\\ldots,1,\\ldots,2,\\ldots , b_n\\\\ b_1,\\ldots,0,\\ldots,2,\\ldots , b_n\\\\ b_1,\\ldots,2,\\ldots,0,\\ldots , b_n\\\\ other vectors\\end{array}\\right ] & = & \\left[\\begin{array}{c}b_2\\\\ b_1\\\\ b_4\\\\ b_3\\\\ b_6\\\\ b_5\\\\ \\ldots \\end{array}\\right ] \\end{array}\\ ] ] the proof of lemma  [ lemma : eij ] is therefore complete .",
    "@xmath73 is a product of @xmath62 disjoint 3-cycle permutations and @xmath74 , @xmath75 .",
    "the proof follows similarly to the proof of lemma  [ lemma : eij ] .",
    "[ evenodd ]",
    "let @xmath17 be a symmetric group of letters \\{@xmath56}. then every even permutation can be generated by using only neighbor 3-cycles .",
    "obviously , every even permutation can be also generated by using only 3-cycles .",
    "lemma  [ evenodd ] is a well - known result in permutation group theory .",
    "it can be found in many textbooks such as  @xcite .",
    "[ lemma:3defvec ] for any three different assignment vectors @xmath76 , @xmath22 and @xmath25 , the 3-cycle permutation @xmath77 can be generated by not gate @xmath39 , swap gate @xmath32 , and toffoli gate t.    the proof of lemma  [ lemma:3defvec ] and some examples illustrating the synthesis process for a given ternary reversible circuit are given in appendix .",
    "[ theorem : generate ] all @xmath0 ternary reversible circuits can be generated by swap , not , and toffoli gates .",
    "let @xmath78 be a @xmath0 ternary reversible circuit .",
    "+ * case 1 * : @xmath78 is an even reversible circuit . according to lemma  [ evenodd ] ,",
    "@xmath78 can be generated by some 3-cycle s . according to lemma  [ lemma:3defvec ] ,",
    "all 3-cycle s can be generated by swap , not , and toffoli gates .",
    "therefore , @xmath78 can be generated by swap , not , and toffoli gates .",
    "* case 2 * : @xmath78 is an odd reversible circuit . then @xmath79 is an even reversible circuit . from case 1 ,",
    "@xmath79 can be generated by swap , not , and toffoli gates .",
    "thus , @xmath78 can be generated by swap , not , and toffoli gates .",
    "the following algorithm is given to synthesize any @xmath0 ternary reversible circuit : + * algorithm * : synthesize any @xmath0 ternary reversible circuit @xmath78 .    * input * : swap gate , not gate , toffoli gate , and @xmath78 ;    1 .   if @xmath78 is an even permutation , + then @xmath81 ; @xmath82 are 3-cycles for @xmath83 2 .",
    "@xmath84 ; for @xmath85 .",
    "@xmath86 are swap , or not , or toffoli gates@xmath87 3 .   return",
    "@xmath88 \\star \\ldots \\star [ l_{s,1}\\star \\ldots \\star l_{s , t_s}]$ ] .",
    "if @xmath78 is an odd permutation , then @xmath89 ; @xmath90where @xmath91 are swap , or not , or toffoli gates@xmath87 5 .",
    "return @xmath92 .",
    "this algorithm can be implemented in terms of the above lemmas .",
    "line 1 is based on lemma  [ evenodd ] .",
    "line 2 is a logical consequence from lemma  [ lemma:3defvec ] .",
    "line 3 is a direct result from line 1 and 2 . in terms of lemma  [ lemma : eij ] and",
    "lines 1 , 2 , and 3 , we have line 4 . from line 4 and lemma  [ lemma : eij ] , line 5 is derived .    in binary reversible logic ,",
    "there is a result stating that : _ ``",
    "all @xmath0 binary reversible circuits can be generated by swap , not , and toffoli gates  @xcite''_. this leads to conjecture  [ con : allgen ] which represents an open problem .",
    "although it has not been proven yet , we strongly believe that it is true .    [ con : allgen ] all @xmath0 @xmath93-value @xmath94 reversible circuits can be generated by swap , not , and toffoli gates ( change modulo 3 to modulo @xmath93 ) .    in the following ,",
    "we give some properties of other ternary gates .    a ternary controlled - not gate @xmath95 is defined as : @xmath96 if @xmath34 = 1 , otherwise , @xmath97 ; further : @xmath98 , if @xmath99 . where @xmath100 .",
    "a ternary multiply - two gate @xmath101 is defined as : @xmath102 ; @xmath98 , if @xmath103 , where @xmath104 is the operation of multiplication by modulo 3 . @xmath105 .    [ theorem : generate2 ] all @xmath0 ternary reversible circuits can be generated by not , controlled - not , multiply - two , and toffoli gates .    using algorithm mlr in  @xcite , we obtain : @xmath106 from theorem  [ theorem : generate ] , we can draw the conclusion that all @xmath0 ternary reversible circuits can be generated not , controlled - not , multiply - two , and toffoli gates .    based on the similarity to binary quantum switching networks , the set of not , controlled - not , multiply - two , and toffoli gates is a more practical set for synthesis .",
    "c - not is a known gate and widely used gate as is the not gate .",
    "the toffoli is a natural extension of c - not and not gates .",
    "multiply - two is a single qudit gate so it should be not expensive .",
    "the cost of quantum gates dependents on different technologies .",
    "we hope this set has some cost advantage when it is used to realize any ternary reversible circuit . in this paper , we just prove that this set is a universal set .",
    "but the synthesis method based on the proof of theorem 2 is not length efficient .",
    "we are still looking for a length efficient synthesis algorithm with this set .",
    "we demonstrated that ternary swap , ternary not and ternary toffoli gates are universal for realization of arbitrary ternary @xmath0 reversible circuits without ancilla bits .",
    "we also proved that all @xmath0 ternary reversible circuits can be generated not , controlled - not , multiply - two , and toffoli gates .",
    "our approach is constructive , so it is effective in both space and time resources but not optimal .    the construction of qudit quantum gates ( including ternary reversible gates ) was discussed in [ 5 - 8 ] .",
    "the costs of multi - level reversible gates dependents on the realization of technologies .",
    "our next plan is to find the cost of these ternary reversible gates , and create an algorithm with optimal cost by using these gates .",
    "we thank mr .",
    "jacob biamonte for useful discussions .",
    "* lemma 4 * : for any three different assignment vectors @xmath76 , @xmath22 and @xmath25 , the 3-cycle permutation @xmath77 can be generated by not gate @xmath39 , swap gate @xmath32 , and toffoli gate @xmath52 .    * proof * : we denote the vectors @xmath76 , @xmath22 and @xmath25 as the following matrix :    @xmath107 = \\left[\\begin{array}{c}u_1,u_2,\\ldots , u_n\\\\ s_1,s_2,\\ldots , s_n\\\\ t_1,t_2,\\ldots , t_n \\end{array } \\right]\\ ] ]    in the 3-row matrix @xmath108 , a column having different elements is called a heterogeneous column . otherwise , it is called homogeneous column .",
    "let @xmath109 $ ] be the matrix composed of all the @xmath12 different @xmath6-input assignments where @xmath110 is composed of @xmath111 different @xmath6-input assignment vectors except @xmath76 , @xmath22 and @xmath25 .    from the definition ,",
    "the operations of swap , not , and toffoli gates on @xmath112 are as follows .",
    "* swap gate @xmath32 interchanges column @xmath113 and column @xmath59 . * not gate @xmath73 is an operation @xmath1141 for all elements in column @xmath113 .",
    "* toffoli gate @xmath52 interchanges three rows : ( 0,1,1,  ,1 ) to ( 1,1,1,  ,1 ) , ( 1,1,1,  ,1 ) to ( 2,1,1,  ,1 ) , ( 2,1,1,  ,1 ) to ( 0,1,1,  ,1 ) , and the rest rows remain fixed .",
    "now we consider the matrix @xmath108 for the following three cases : + * case 1 * : there is only one heterogeneous column in the matrix @xmath108 .    1 .",
    "we can use a swap gate @xmath32 to exchange the heterogeneous column to the first column position .",
    "2 .   using not gates @xmath39 , we can assign all the elements in the homogeneous columns as values 1 .",
    "3 .   using toffoli gate @xmath52 or @xmath115 gates (",
    "if ( @xmath116 ) = ( 0,1,2 ) , or ( 1,2,0 ) , or ( 2,0,1 ) , use @xmath52 , otherwise @xmath115 ) , we can reorder the rows @xmath117 to @xmath118 in the matrix @xmath108 .",
    "4 .   finally , using the inverse of the not and swap gates used in steps 2 and 1 to recover the changed digital numbers , we obtain the 3-cycle @xmath77 .",
    "denote @xmath119 and @xmath120 as the image matrices of @xmath108 and @xmath110 after the @xmath33 step , @xmath121 .",
    "then the operations of the @xmath122 step are as follows : @xmath123 , q^{(3)}{step 4\\atop \\rightarrow}q^{(4)}=q\\ ] ] this process means that an arbitrary 3-cycle permutation @xmath77 with only one heterogeneous column in the matrix @xmath108 can be generated by using not gates , swap gates and one or two toffoli gate(s ) .",
    "example 1 shows this process . +",
    "* example 1 * : let @xmath124 .",
    "the column 2 is heterogeneous .",
    "@xmath125= \\left[\\begin{array}{c}0,0,2\\\\ 0,1,2\\\\ 0,2,2\\end{array}\\right ] { e_{1,2}\\atop \\rightarrow }",
    "n_2\\star ( n_3)^2 \\left[\\begin{array}{c}0,1,1\\\\ 1,1,1\\\\ 2,1,1\\end{array}\\right ] { t\\atop \\rightarrow } \\left[\\begin{array}{c}1,1,1\\\\ 2,1,1\\\\ 0,1,1\\end{array}\\right]\\ ] ] @xmath126 { ( e_{1,2})^{-1}\\atop\\rightarrow } \\left[\\begin{array}{c}0,1,2\\\\ 0,2,2\\\\ 0,0,2\\end{array}\\right ] = \\left[\\begin{array}{c}s\\\\ t\\\\ u\\end{array}\\right]\\ ] ] therefore , @xmath127 we use notation @xmath128 .",
    "in fact , at the end of step 3 , we can write a generating expression of @xmath77 as a product of the swap gates , not gates , and toffoli gates without performing step 4 . we perform step 4 in example 1 just to show that this process is correct . +",
    "* case 2 * : there are two heterogeneous columns among @xmath76 , @xmath22 and @xmath25 .    1 .",
    "using swap gates , we can exchange columns such that the first and second columns are heterogeneous and the number of different elements in the first column is no more than that in the second column . 2 .   using not gates , set all the elements in the homogeneous columns as values 1 .",
    "3 .   using swap , not , and toffoli gates , set the elements of the second columns as value 1 .",
    "we have the following three subcases : * subcase 1 : there are two different elements in the first column and three different elements in the second column . without loss of generality , we assume @xmath129",
    ". consider @xmath130 .",
    "if @xmath131 , use @xmath132 ( if @xmath133 ) or @xmath134 ( if @xmath135 ) to interchange @xmath130 to 1 . then use t ( if @xmath136 ) or @xmath115 ( if @xmath137 ) to interchange @xmath138 to @xmath139 . if @xmath140 , use @xmath132 or @xmath141 to make the elements in column 1 be 1s . finally , exchange columns 1 and 2 . as a result ,",
    "the elements in the first column are different and the elements of other elements in @xmath108 are all 1s .",
    "* subcase 2 : there are two different elements in the first column and the second column , respectively . without loss of generality , we assume @xmath142 .",
    "then @xmath143 .",
    "we use not gate(s ) to change @xmath144 and @xmath145 to 1s if they are not 1s . then use @xmath52 or @xmath115 to change @xmath139 and @xmath146 such that the elements in the first column are different with each other . finally , exchange columns 1 and 2 .",
    "then , the resulting matrix @xmath108 becomes the subcase 1 .",
    "* subcase 3 : there are three different elements in the first column and the second column , respectively . without loss of generality , we assume @xmath147 . after using @xmath52 , we change @xmath139 to @xmath146 or @xmath138 .",
    "then , the resulting matrix @xmath108 becomes the subcase 1 .",
    "for instance , @xmath125= \\left[\\begin{array}{c}0,2,1\\\\ 1,0,1\\\\ 2,1,1\\end{array}\\right ] { t\\atop \\rightarrow } \\left[\\begin{array}{c}0,2,1\\\\ 1,0,1\\\\ 0,1,1\\end{array}\\right ] \\textrm{(this is subcase 1)}.\\ ] ] 4 .   using toffoli gate @xmath52 or @xmath115 to change the order of the first three vectors as expected",
    "( we can reorder the rows @xmath148 to @xmath118 ) .",
    "5 .   finally ,",
    "using the inverse of these not gates , swap gates and toffoli gates in the steps 3 , 2 , and 1 to recover these changed digital numbers , we obtain the 3-cycle @xmath77 .",
    "the action of the @xmath149 step is : @xmath150 , q^{(4)}{step 5\\atop \\rightarrow}q^{(5)}=q.\\ ] ] example 2 shows the process executed in case 2 .",
    "+ * example 2 * : let @xmath151 , @xmath152 , @xmath153 , @xmath154 .",
    "\\left[\\begin{array}{c}0,0,1\\\\ 0,0,2\\\\ 1,0,1\\end{array}\\right ] { e_{2,3}\\atop \\rightarrow } \\left[\\begin{array}{c}0,1,0\\\\ 0,2,0\\\\ 1,1,0\\end{array}\\right ] { n_3\\atop\\rightarrow } \\left[\\begin{array}{c}0,1,1\\\\ 0,2,1\\\\ 1,1,1\\end{array}\\right ] \\textrm{(step",
    "l and 2)}\\ ] ] @xmath156 { e_{1,2}\\atop\\rightarrow } \\left[\\begin{array}{c}1,1,1\\\\ 2,0,1\\\\ 1,2,1\\end{array}\\right ] \\left(\\begin{array}{c}\\textrm{now it}\\\\ \\textrm{becomes}\\\\ \\textrm{subcase 1}\\end{array}\\right ) \\textrm{(end step 3)}\\ ] ] @xmath157 \\textrm{(end step 4 ) } { ( e_{1,2}^{-1})\\star ( t\\star t)^{-1}\\star ( n_2)^{-1}\\atop\\rightarrow } \\left[\\begin{array}{c}2,0,1\\\\ 1,2,1\\\\ 1,1,1\\end{array}\\right]\\ ] ] @xmath158 { ( n_3)^{-1}\\star ( e_{2,3})^{-1}\\atop\\rightarrow } \\left[\\begin{array}{c}0,0,2\\\\ 1,0,1\\\\ 0,0,1\\end{array}\\right]= \\left[\\begin{array}{c}s\\\\ t\\\\ u\\end{array}\\right]\\ ] ] therefore , @xmath159 in fact , after step 4 , we can write a generating expression of @xmath160 as a product of the swap gates , not gates , and toffoli gates without executing step 5 . we perform step 5 in example 2 just to show that the process is correct .",
    "+ * note * : after finishing the whole process in case 1 and 2 , the remaining 27 - 3 = 24 rows are not affected by the string of gates . and",
    "in the process , we can find the realization without considering these 24 rows .",
    "thus , we only act these gates on the three rows @xmath76 , @xmath22 and @xmath25 . + * case 3 * : there are more than two different bits among @xmath76 , @xmath22 and @xmath25 .",
    "similar to the binary reflective gray code  @xcite , we can also reflectively encode the ternary vectors in an order @xmath161 , where @xmath29 such that there is only one bit different between two vectors @xmath162 and @xmath163 , for @xmath164 .",
    "therefore , we can find @xmath165 , such that @xmath162 , @xmath166 , and @xmath167 are a permutation of @xmath76 , @xmath22 , and @xmath25 , respectively .",
    "namely , @xmath168 or @xmath169",
    ".    there are at most two different bits among @xmath170 , for @xmath171 . according to case 1 and case 2 ,",
    "the 3-cycle ( @xmath170 ) can be generated by swap , not , and toffoli gates .",
    "thus , according to lemma  [ evenodd ] , the 3-cycle ( @xmath172 ) can be generated by swap , not , and toffoli gates . as a result",
    ", @xmath77 can be generated by swap , not , and toffoli gates .",
    "99          s. s. bullock , d. p. oleary and g. k. brennen , _ asymptotically optimal quantum circuits for d - level systems _ , physical review letters , volume 94 , 230502 ( 2005 ) , http://arxiv.org/abs/quant-ph/0410116[quant-ph/0410116 ] .",
    "j. daboul , x.wang and b. c sanders , _ quantum gates on hybrid qudits _ ,",
    "journal of physics a : mathematical and general , 36(14 ) , 7063 - 7078 ( 2003 ) , http://stacks.iop.org/0305-4470/36/2525[doi:10.1088/0305-4470/36/10/312 ] .",
    "a. muthukrishnan and c. r. stroud jr . ,",
    "_ multivaluved logic gates for quantum computation _ , phys",
    "a 62 , 052309 , ( 2000 ) , http://www.optics.rochester.edu:8080/users/stroud/publications/muthukrishnan001.html[availible online ] .",
    "s. bartlett , d. de guise and b. sanders , _ quantum encodings in spin systems and harmonic oscillators _ , phys . rev . a 65 , 052316 ( 2002 ) , doi : 10.1103/physreva.65.052316 , http://arxiv.org/abs/quant-ph/0109066[quant-ph/0109066 ] .",
    "d. m. miller , d. maslov , and g. dueck , _ synthesis of quantum multiple - valued circuits _ , to appear , journal of multiple - valued logic and soft computing , ( 2005 ) , http://www.cs.uvic.ca/~mmiller/[http://www.cs.uvic.ca/  mmiller/ ] .",
    "m. h. a. khan , m. perkowski , m. khan , and p. kerntopf , _ ternary gfsop minimization using kronecker decision diagrams and their synthesis with quantum cascades _ , to appear , journal of multiple - valued logic and soft computing mvl journal , _ special issue _ , ( 2005 ) .",
    "a. al - rabadi and m. perkowski , _ multiple - valued galois field s / d trees for gfsop minimization and their complexity _ , proc .",
    "31st international symposium on multiple - valued logic ( ismvl 2001 ) , warsaw , poland ( may 2001 ) , 159 - 166 .",
    "a. de vos , b. raa and l. storme , _ generating the group of reversible logic gates _ , journal of physics a : mathematical and general , 35(2002 ) , 7063 - 7078 , http://stacks.iop.org/0305-4470/35/7063[doi:10.1088/0305-4470/35/33/307 ] .",
    "l. storme , alexis de vos and g. jacobs , _ group theoretical aspects of reversible logic gates _ , journal of universal computer science , 5(1999 ) , 307 - 321 , http://www.jucs.org/jucs_5_5/group_theoretical_aspects[http://www.jucs.org/ ] .",
    "x. song , g. yang , m. perkowski , and y. wang , _ algebraic characterization of reversible logic gates _ , to appear , theory of computing systems .",
    "http://www.springerlink.com/index/10.1007/s00224-004-1166-2[http://www.springerlink.com ] .",
    "g. yang , x. song , w. n. n. hung and m. perkowski , _ fast synthesis of exact minimal reversible circuits using group theory _",
    "acm / ieee asp - dac ( asia and south pacific design automation conference ) , shanghai , china ( january 2005 ) , 1002 - 1005 ."
  ],
  "abstract_text": [
    "<S> this paper investigates the synthesis of quantum networks built to realize ternary switching circuits in the absence of ancilla bits . </S>",
    "<S> the results we established are twofold . </S>",
    "<S> the first shows that ternary swap , ternary not and ternary toffoli gates are universal for the realization of arbitrary @xmath0 ternary quantum switching networks without ancilla bits . </S>",
    "<S> the second result proves that all @xmath0 quantum ternary networks can be generated by not , controlled - not , multiply - two , and toffoli gates . </S>",
    "<S> our approach is constructive . </S>"
  ]
}