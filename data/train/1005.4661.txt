{
  "article_text": [
    "this work was motivated by the need to have a practical and robust way to model rotations and projective spaces in the software that we write .",
    "these are applications in photogrammetry , remote sensing and simultaneous localization and mapping .",
    "rotations are used in modeling the poses of the cameras , while the focal planes of the cameras are projective spaces .",
    "although it is true that the imaging focal plane is contained in a single affine patch of @xmath0 , relevant vanishing points may lie on , or near , the line at infinity , so that the coordinates of the imaging affine patch are not appropriate for robustly describing and managing the vanishing points .",
    "traditionally , ( unit ) quaternions have been used to model rotations , as the quaternions have only 4 components  just one more parameter than the dimension of the space of rotations ( see , for example @xcite ) . however , the extra component is bothersome , requiring extra storage , requiring extra work to manage the redundancy ( renormalization to unit length ) , and likely affecting the convergence rate due to motion in the redundant _ length _ direction of the quaternion , when we are optimizing to find the best rotation for a particular problem .",
    "another approach to representing rotations is to use the three _ eulerian angles _ , e.g.@xcite .",
    "however , this approach suffers from not being everywhere invertible , so is not a global solution to representing the rotations .",
    "moreover , the transcendental transformation between eulerian angles and rotation matrices is not ideal for software implementation .",
    "a similar situation is to be found with the _ rotation vector _ representation of a rotation .",
    "the on - line article @xcite discusses this and other representations of rotations .    in the following sections , we review the standard coordinates on projective space , and then derive the differential equation for the integration of angular velocity using the projective space manifold structure ( affine patches ) on the rotation group .",
    "we will see that with this novel representation of the rotations , the differential equation has the same complexity as the corresponding quaternion differential equation , and has other desirable properties over the quaternion case .",
    "all vector spaces and projective spaces are over the real numbers . for a point @xmath1 in n - dimensional projective space , @xmath2 , its homogeneous coordinates are denoted @xmath3 $ ] .    the traditional manifold structure on @xmath2",
    "is given as    * the @xmath4 affine patch , @xmath5 , on @xmath2 is defined to be the set @xmath6 : z^k \\neq 0 \\}\\ ] ] * the coordinate chart for @xmath7 is @xmath8 defined by the formula @xmath9 and throw away the 1 in the @xmath4 slot .",
    "this is seen to be a 1 - 1 map onto all of @xmath10 .",
    "the following algorithm template illustrates how to use the manifold structure on @xmath2 to iteratively step along a sequence of points in projective n - space . for simplicity",
    ", we do not specify what it means to `` iterate '' , and we omit any stopping criteria .",
    "iterate on projective space    1 .   an initial point , @xmath11 .",
    "2 .   let k be the index of the largest component , @xmath12 .",
    "3 .   represent @xmath13 in the @xmath4 affine patch .",
    "so , initially , all the coordinate components in this patch have magnitude at most 1 .",
    "iterate to the next value of @xmath1 , in this patch .",
    "if all coordinate components of @xmath1 have magnitude at most 2 , go back to step 3",
    ". otherwise , proceed to step 5 .",
    "reconstruct the homogeneous coordinates , z , for the current point , and let k be the index of the the largest component @xmath14 .",
    ".   represent @xmath1 in the @xmath4 affine patch , and proceed to step 3 .    in step 6",
    ", some book - keeping may be required to keep the overall environment of the algorithm consistent when switching patches .",
    "the choice of the value , 2 , in step 4 is somewhat arbitrary , but has worked well for us .",
    "the point is to monitor when a particular patch is no longer appropriate for the current value of @xmath1 , and then to switch to a good patch .",
    "if @xmath1 begins to converge , the switching of patches will cease .",
    "this algorithm may be used when optimizing for a `` best '' value of z , or when incrementally solving a differential equation on projective space . in the next section ,",
    "we write down explicitly the differential equation for integrating angular velocity , using the projective space manifold structure of the rotations .",
    "we use the convention that the components of a quaternion , @xmath15 , are indexed as @xmath16 and @xmath17 , with @xmath18 being the scalar component , and @xmath19 denoting the 3-vector of the other ( spatial ) components .",
    "the particular rotation matrix associated to q is @xmath20    where , @xmath21 is the identity 3x3 matrix , and @xmath22 is the usual 3x3 skew matrix defined by @xmath23 explicitly , @xmath24    our jumping off point for analyzing angular velocity is the well - known ( @xcite@xcite ) differential equation relating angular velocity , @xmath25 , and quaternions : @xmath26    this corresponds to the matrix equation @xmath27    it is equation [ equ : dqdt ] that we wish to translate to the four affine patches of the rotations . to that end",
    ", we make explicit the components of the matrix in equation  [ equ : dqdt ] .",
    "@xmath28    we restrict attention to patch @xmath29 , @xmath30 , and let @xmath31 be the 3 components parametrizing the rotations from this patch .",
    "the corresponding homogeneous coordinates , @xmath32 are obtained by forming the 4-vector with a 1 in the @xmath33 slot .",
    "so , @xmath32 is a non - unit quaternion , and we define a time - varying scale factor , @xmath34 by the equation @xmath35 where q is now a unit quaternion .",
    "consequently , equation [ equ : dqdt ] is valid for q , and we may write    @xmath36    which may be rewritten as @xmath37 where @xmath38 . to reduce this equation , further ,",
    "we define the 3x4 matrix whose columns are the non - zero entries from the corresponding columns of h.    @xmath39    we recall that the @xmath33 component of @xmath32 is identically 1 , so its derivative is 0 , and we conclude from the @xmath33 component of equation [ equ : dxhatdt ] that @xmath40 where @xmath41 is the @xmath33 row of @xmath42 .",
    "this can be rewritten as @xmath43 where @xmath44 is the @xmath33 column of w.    extracting , now , the non-@xmath33 components of equation [ equ : dxhatdt ] , we obtain @xmath45 where @xmath46 is the 3x3 matrix obtained from @xmath42 by deleting the @xmath33 row and the @xmath33 column . by inspecting the four cases , we see that @xmath47 inserting equations [ equ : beta ] and [ equ : hi ] into equation [ equ : dxdt ] , we obtain @xmath48   \\label{equ : final}\\end{aligned}\\ ] ]    equation [ equ : final ] is the 3-dimensional differential equation to integrate angular velocity using affine patches on the rotation group .",
    "the rhs contains 12 multiplications , excluding the scaling by 1/2 .",
    "this is the same number of multiplications as in equation [ equ : dqdt ] , which is the corresponding quaternion differential equation .      in practice ,",
    "a difference equation is used to integrate angular velocity .",
    "this section shows how to obtain identical results to the quaternion solution , but by using the affine patch representation of the rotations .",
    "this has the advantage that explicit renormalization to unit length is not required , as it is inherent to the affine patch approach .    for a time step , of length @xmath49",
    ", we wish to find the @xmath50 increment , @xmath51 , so that the two expressions , @xmath52 and @xmath53 , represent the same rotation i.e.    @xmath54    where @xmath55 denotes all the components except for the @xmath33 .",
    "divide the top and bottom of the lhs by @xmath56 to obtain    @xmath57    we recall from the derivation of equation [ equ : final ] that @xmath58    so that equation [ eqn : diff0 ] simplifies to @xmath59    it is interesting to note that this value of @xmath60 is the same as dividing @xmath61 by the scale factor @xmath62 .",
    "we have applied elementary manifold theory to construct a global , efficient , singularity - free parametrization for the rotation group .",
    "we have derived differential and difference equations for integrating angular velocity using this novel representation of the rotations , and have shown that the complexity of using these equations is on a par with the corresponding quaternion equations . on a theoretical basis , however , the difference equation derived in this article is more sound , as there are no renormalizations to unit length required .",
    "99 c. e. schultz , _ ins and gps integration , msc thesis _ , technical university of denmark , informatics and mathematical modeling ( july 2006 ) .",
    "+ _ http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=4704 _",
    "+ last referenced october 29 , 2009        wikipedia , _ rotation representation ( mathematics ) _ + _ http://en.wikipedia.org/wiki/rotation_representation_(mathematics ) + # euler_axis_and_angle_.28rotation_vector.29 _ + last referenced october 29 , 2009"
  ],
  "abstract_text": [
    "<S> this article introduces yet another representation of rotations in 3-space . </S>",
    "<S> the rotations form a 3-dimensional projective space , which fact has not been exploited in computer science . </S>",
    "<S> we use the four affine patches of this projective space to parametrize the rotations . </S>",
    "<S> this affine patch representation is more compact than quaternions ( which require 4 components for calculations ) , encompasses the entire rotation group without singularities ( unlike the euler angles and rotation vector approaches ) , and requires only ratios of linear or quadratic polynomials for basic computations ( unlike the euler angles and rotation vector approaches which require transcendental functions ) .    as an example </S>",
    "<S> , we derive the differential equation for the integration of angular velocity using this affine patch representation of rotations . </S>",
    "<S> we remark that the complexity of this equation is the same as the corresponding quaternion equation , but has advantages over the quaternion approach e.g. renormalization to unit length is not required , and state space has no `` dead '' directions . </S>"
  ]
}