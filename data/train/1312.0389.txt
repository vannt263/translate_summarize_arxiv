{
  "article_text": [
    "in the classic covering problem , a set of points are given , and the goal is to place the minimum number of unit disks to cover all the input points . in the maximum coverage problem , the number of disks to be used , @xmath0 , is given and the goal is to cover the maximum number of points with @xmath0 disks .",
    "we call this problem @xmath9 .",
    "this problem was introduced by drezner @xcite for @xmath10 and it was solved in @xmath11 time . to solve the problem , he replaced every point with a disk centered at that point and he obtained the maximum depth in the arrangement of disks . later ,",
    "chazelle and lee @xcite solved the problem in @xmath12 time .",
    "this problem belongs to the 3-sum hard complexity class @xcite , which means that , the @xmath12 running time algorithm is the best one for this problem . however , there are some algorithms which approximately solve this problem in less than @xmath12 time .",
    "these algorithms approximate the disk radius and the number of covered points .",
    "figueiredo and fonesca @xcite gave an algorithm to cover the maximum number of points that a unit disk in @xmath13 can cover , with a @xmath14-radius disk in @xmath15 time .",
    "in @xcite aronov and har - peled gave a @xmath16-approximation algorithm in the number of covered points which runs in @xmath17 time .",
    "@xmath9 , for @xmath18 , is np - hard unless we consider @xmath0 as a constant .",
    "a trivial greedy algorithm is a @xmath19-approximation algorithm for it @xcite .",
    "the greedy algorithm first finds a disk which covers the maximum number of points in @xmath12 time . to pick the next disks",
    ", it removes the points located in the first disk , and finds the disk which covers the maximum total weight of points as the second disk .",
    "it repeats this process until @xmath0 disks are picked up .",
    "this yields a @xmath19-approximation algorithm which runs in @xmath20 time .",
    "the first @xmath16-approximation algorithm for this problem was given in @xcite which runs in @xmath21 time .",
    "we presented a polynomial time approximation schema for this problem in our previous work @xcite , which runs in @xmath22 time .",
    "the trivial method to obtain the optimal result of the @xmath9 is to consider all subsets of size @xmath0 of @xmath23 possible disks and finds the subset which covers the most number of points .",
    "this method takes @xmath24 time . in @xcite de berg",
    "al gave an algorithm for this problem .",
    "they first solved the problem for @xmath2 in @xmath4 time . to solve the problem for @xmath25 , they fixed every subset of @xmath26 disks , and they found the best 2 disks after removing the points contained in the @xmath26 disks .",
    "this takes @xmath7 time .",
    "+ in section 2 , we present an output sensitive algorithm to obtain the optimal result of @xmath27 which runs in @xmath28 time where @xmath1 is the maximum number of points that one disk can cover . in section 3",
    "we extends the algorithm for @xmath9 . in section 4",
    "we compare the implementation results of our algorithm and the algorithm of @xcite and in section 5 we conclude the paper .",
    "our innovation in this algorithm is to use the greedy algorithm to find the regions in which the @xmath0 resultant disks may reside , and searching in those regions only . in the rest of the paper when we use disks we mean unit disks .",
    "in this section we describe our algorithm for @xmath27 .",
    "let @xmath29 be the disk that covers the maximum number points from the point set @xmath30 .",
    "let @xmath31 refers to the points of @xmath30 which are located inside @xmath32 .",
    "define @xmath33 as the disk that covers the maximum number of points after removing the points located in @xmath32 .",
    "@xmath32 and @xmath34 are the result of the greedy algorithm for @xmath27 .",
    "an example is given in figure 1 .",
    "in this example , the optimal solution covers 18 points whereas the greedy algorithm covers 15 points .",
    "as illustrated in this example , the two disks of the optimal solution have common points with @xmath32 .",
    "intuitively , either the disks of the optimal solution have common points with @xmath32 or , the greedy algorithm obtains the optimal solution .",
    "lemma 1 proves this claim .",
    ", in a sample point set . in this example , the greedy algorithm returns @xmath32 and @xmath34 which cover 15 points together , whereas the disks in the optimal solution , the two disks specified with the dash lines , cover 18 points together . ]    by the best two disks we mean the optimal solution of @xmath27 .",
    "let @xmath35 be a set of disks .",
    "the function @xmath36 denotes the number of points covered by the disks in @xmath35 .",
    "* lemma 1 * : let @xmath32 be one of the disks that covers the maximum number of points and @xmath34 be one of the disks that covers the maximum number of points after removing the points located in @xmath32 .",
    "let @xmath37 and @xmath38 be the two disks that together cover the maximum number of points among any combination of two disks : either both @xmath37 and @xmath38 have common points with @xmath32 , or @xmath32 and @xmath34 cover the maximum number of points .",
    "suppose that at least one of @xmath37 and @xmath38 , say @xmath38 , does not have any common point with @xmath32 .",
    "then we have @xmath39 , because @xmath34 covers the maximum number of points not covered by @xmath32 .",
    "we also have @xmath40 because @xmath32 covers at least the same weight of points as @xmath37 ( since it is a disk that covers the maximum weight of points ) and @xmath32 does not have any point in common with @xmath38 .",
    "thus @xmath41 , which implies that the total number of the points covered by @xmath32 and @xmath34 is maximal .    based on lemma 1",
    ", we should look for the best two disks in the disks which have common points with @xmath32 .",
    "these disks are located around @xmath32 in a circle having the same center as @xmath32 and radius @xmath42 , where the radius of @xmath32 is 1 .",
    "we call this region @xmath43 .",
    "figure 2 shows @xmath43 .",
    "lemma 2 bounds the number of points in @xmath43 .",
    "are located in the dashed region around @xmath32 .",
    "we call this region @xmath43 ]        [ lem : lemma 2 ] * lemma 2 * : let @xmath1 be the maximum number of points that can be covered by a disk . the number of points in @xmath43 is @xmath45 .",
    "we can pack @xmath43 with at most 21 unit disks , which is shown in figure  [ fig : fig3 ] .",
    "every one of these 21 disks covers equal or less than @xmath46 points .",
    "so the number of points in @xmath43 is at most @xmath47 points , which is @xmath45 points .",
    "+ we can also devise an output sensitive algorithm for @xmath48 that solves the problem in @xmath49 time .",
    "the algorithm is as follows .",
    "cover the plane using four shifted grids @xmath50 .",
    "each grid covers the whole plane , but the grids are shifted relative to each other , 2 units from each side .",
    "the cells of the grids have size 4x4 . for any unit disk @xmath51",
    "there is a grid @xmath52 such that @xmath51 is fully contained in a single cell of @xmath52 .",
    "now , for each non - empty grid cell @xmath53 of every grid , compute the optimal disk on the set of points lying inside @xmath53 .",
    "@xmath53 contains at most @xmath54 points , for a constant value of @xmath55 and the time spent for cell @xmath53 is @xmath56 where @xmath57 denotes the number of points in the cell . the total number of points over all cells @xmath53 is @xmath58 , since each point is contained in exactly one cell per grid . to obtain the running time of the algorithm , we count the cells of the grids @xmath59 .",
    "the total running time of the algorithm is : + @xmath60 + using lemma 1 and lemma 2 , the best two disks can be @xmath32 and @xmath34 , or the two disks around @xmath32 that cover the maximum number of points . to find the best two disks in @xmath30 ,",
    "first we find @xmath32 and @xmath34 in @xmath49 time .",
    "then , we determine the points in @xmath43 , and we run the algorithm of @xcite for the points located in @xmath43 .",
    "this algorithm obtains the best two disks in @xmath43 , in @xmath61 time .",
    "finally , we compare this result , the best two disks in @xmath43 , with @xmath32 and @xmath34 and consider the one that covers more weight as the optimal solution for @xmath27 . since @xmath1 can be much smaller than @xmath5 in practice , our algorithm which runs in @xmath28 time , is an improvement over the algorithm of @xcite that requires @xmath4 time .",
    "the algorithm can be extended to cover the maximum number of points with @xmath0 disks . from now on , by the best @xmath62 disks , we mean a set of @xmath62 disks that cover the maximum total weight of points .",
    "the proposed algorithm is an iterative algorithm . at the first iteration ,",
    "the algorithm finds two disks , which cover the maximum number of points as explained before . to find the best 3 disks",
    ", the algorithm uses the following fact , which will be proven in lemma 3 : the best 3 disks are among the disks that have some common points with the best 2 disks ; otherwise , the best 2 disks plus one disk that covers the maximum number of points , after removing the points located in the best two disks , are the best 3 disks .",
    "the algorithm repeats this process until the best @xmath0 disks are found .",
    "now we explain the algorithm formally .",
    "remember that the function @xmath63 returns a set of @xmath62 disks that cover the maximum number of points in the point set @xmath64 .",
    "let @xmath35 be a set of unit disks .",
    "define @xmath65 as the subset of @xmath30 that is located in the disks of @xmath35 .",
    "define @xmath66 as the points in the circles with the same centers as the disks in @xmath35 and radius @xmath42 .",
    "let @xmath67 denotes the best @xmath68 disks .",
    "the outline of the algorithm is as follows :    _ + the exact output sensitive algorithm for the most points covering problem + inputs : a set p of n points in the plane , and a positive integer m. + outputs : a set of m disks which cover the maximum number of points from p. + definitions : the function mostpoints(q , j ) , points(d ) , and neighbor(d ) as defined in the text . _ +   + 1 begin + 2 @xmath69 + 3 @xmath70 + 4 @xmath71 + 5 for @xmath72 to @xmath0 + 6 @xmath73 + 7 @xmath74 + 8 @xmath75 + 9 if ( @xmath76 ) + 10 @xmath77 + 11 else + 12@xmath78 +   + 13 return @xmath79 + 14end + in lemma 3 we prove the correctness of the above algorithm . before proving lemma 3 we have the following definitions . + * definition 1 * : let @xmath35 and @xmath80 be two sets of disks . define @xmath81 as the function which returns the number of points covered by @xmath35 after removing the points covered by @xmath80 . by the definition of @xmath81 and",
    "@xmath36 functions we have the following facts : @xmath82 @xmath83 @xmath84    * lemma 3 * : the exact output sensitive algorithm for the most points covering problem obtains @xmath0 disks that cover the maximum number of points .",
    "we prove the correctness of the algorithm by induction on the number of iterations .",
    "assume that at the end of iteration @xmath68 we have correctly computed @xmath67 .",
    "consider @xmath85 , which consists of @xmath86 disks .",
    "these disks may have common points with @xmath87 or not .",
    "we consider both cases . in case 1",
    "we consider that all @xmath86 disks of @xmath85 have common points with @xmath87 , and in case 2 we consider that some of these @xmath68 disks do not have any common point with @xmath87 .",
    "+   + case1 : all @xmath86 disks of @xmath85 have common points with @xmath87 : +   + all disks that have common points with @xmath87 , have some points in @xmath88",
    ". the algorithm , in line 8 , obtains the best @xmath86 disks in the points of @xmath89 .",
    "so in this case the algorithm exactly computes @xmath85 . +   +",
    "case 2 : some of the disks in @xmath85 do not have any common point with @xmath87 : +   + call one of these disks @xmath90 .",
    "we can partition @xmath85 to @xmath91 and @xmath90 .",
    "based on the definition 1 , we have : +   + @xmath92 + @xmath93 is a set of @xmath68 disks . as @xmath67 is a set of @xmath68 disks which cover the maximum number of points , we have : + @xmath94 ( 2 ) +   + furthermore , @xmath95 is the disk that covers the maximum number of points after removing the points in @xmath87 .",
    "therefore , @xmath95 covers the maximum number of points among the disks that have not common points with @xmath67 .",
    "thus , we have : + @xmath96 ( 3 ) +   + from ( 2 ) and ( 3 ) we have : +   + @xmath97 ( 4 ) +   + from ( 1 ) and ( 4 ) we have : +   + @xmath98 + thus in case 2 , @xmath67 and @xmath95 cover the maximum number of points .",
    "+ the algorithm compares the results of case 1 with the result of case 2 , and considers the best one as @xmath85 .",
    "so , the algorithm correctly computes @xmath85 .",
    "the base case , @xmath99 , is correct and can be satisfied using the algorithm devised for @xmath48 .    in the following lemma , we obtain the running time of the algorithm .    *",
    "lemma 4 * : the exact output sensitive algorithm for the most points covering problem runs in @xmath6 time , where @xmath1 is the maximum number of points that one disk can cover in the points set @xmath30 .",
    "the algorithm runs in @xmath0 iterations . at the start of the iteration @xmath68",
    ", we have found the best @xmath100 disks , and we are getting to find the best @xmath68 disks . to find the best @xmath68 disks , we obtain @xmath101 in line 7 , which takes @xmath49 time .",
    "we also look for the @xmath68 disks covering the maximum number of points in @xmath102 , in line 8 .",
    "@xmath102 consists of @xmath100 disks , and based on lemma 2 , the neighborhood of each disk can be packed with at most 21 disks .",
    "so the maximum number of points in @xmath102 is @xmath103 , which is @xmath104 points .",
    "we search for the @xmath68 disks that cover the maximum number of points in @xmath105 points .",
    "the algorithm of @xcite is applied for these points , which takes @xmath106 time .",
    "the algorithm runs in @xmath0 iterations so , the running time is bounded by @xmath107 which is @xmath108 .",
    "we have implemented our algorithm and the algorithm of @xcite for @xmath27 . in each algorithm , we observed the number of pairs of disks that each algorithms consider to obtain the optimal solution .",
    "we distributed different number of points randomly in squares with different side length and we run both algorithms on the points .",
    "table 1 shows the result of the comparison .",
    "the results show that our algorithm computes significantly less number of pairs than the algorithm of @xcite in most cases .",
    "when @xmath109 becomes close to 1 , the number of pair of disks that are considered in both algorithms become close to each other .",
    "this algorithm can be applied for other types of maximum coverage problem such as covering point sets with other shapes and maximum coverage problem in sets .",
    "the algorithm uses the parameter @xmath1 which is the cardinality of the largest subset .",
    "lemma 1 and 3 can be applied for general set systems .",
    "so we should search in the subsets that have common members with the largest subsets . to bound the running time of the algorithm",
    "there should be a constant number of subsets that have common points with the largest subsets .",
    "in this paper we presented an exact output sensitive algorithm for covering many points problem . in the algorithm",
    ", we confined the region in which the resultant disks may reside using the greedy algorithm , and we searched in that regions only .",
    "this led to an output sensitive algorithm for this problem which runs in @xmath6 time , where @xmath1 is the maximum number of points that one disk can cover .",
    "our algorithm can be improved by improving the running time of the algorithm in @xcite .",
    "if better algorithms for covering most points with two disks are suggested , they can improve the running time of our algorithm and the algorithm of @xcite .",
    "furthermore , considering @xmath1 as a parameter , and using our technique , it may be possible to improve the analysis of other covering algorithms .",
    "we would like to acknowledge anonymous referees for their helpful comments and the improvements they suggested for the paper ."
  ],
  "abstract_text": [
    "<S> a set of points and a positive integer @xmath0 are given and our goal is to cover the maximum number of these point with @xmath0 disks . </S>",
    "<S> we devise the first output sensitive algorithm for this problem . </S>",
    "<S> we introduce a parameter @xmath1 as the maximum number of points that one disk can cover . in this paper </S>",
    "<S> first we solve the problem for @xmath2 in @xmath3 time . </S>",
    "<S> the previous algorithm for this problem runs in @xmath4 time . </S>",
    "<S> our algorithm outperforms the previous algorithm because @xmath1 is much smaller than @xmath5 in many cases . </S>",
    "<S> then we extend the algorithm for any value of @xmath0 and we solve the problem in @xmath6 time . </S>",
    "<S> the previous algorithm for this problem runs in @xmath7 time . </S>",
    "<S> our algorithm runs faster than the previous algorithm because @xmath8 is smaller than @xmath5 in many cases . </S>",
    "<S> our technique to obtain an output sensitive algorithm is to use a greedy algorithm to confine the areas that we should search to obtain the result . </S>",
    "<S> our technique in this paper may be applicable in other set covering problems that deploy a greedy algorithm , to obtain faster solutions . </S>"
  ]
}