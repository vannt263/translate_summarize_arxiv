{
  "article_text": [
    "design , development and engineering of industrial power burners have strong mathematical requests , such as numerical resolution of differential problems involving _ navier - stokes _ equations for velocity and pressure fields , geometrical design of combustion heads for a correct shape and optimal efficiency of _ flame _ , geometrical design of _ ventilation fans _ and computation of correct air inflows for optimal combustion , computation of flows in the internal vanes of _ oil pumps _ for estimating the correct mass rate and dimensions of gears . + rapid prototyping for an accurate design of the correct geometries involves a numerical simulation of the gas or oil flows in these burner s components .",
    "+ the necessity of an high graphic resolution for the visualization of the flows requires the knowledge of a large amount of streamlines .",
    "therefore the numerical computation is very onerous about amount of memory and power of processors of the used hardware environment .",
    "a technique for reducing the total time of computation can be very useful . in this paper",
    "we present a method based on reduction of navier - stokes system to a set of not coupled ordinary differential equations .",
    "each of these equations describes the fluid velocity field along each flow streamline .",
    "the advantage of this method , compared to an usual one such as finite differences scheme ( see e.g. @xcite ) , is a faster computation of the numerical resolution and an easy parallelization in a multicore environment , using a distribution of blocks of streamlines among the available processors .",
    "[ combustionhead ]",
    "in this section we briefly present the mathematical model developed for simbolic and numerical resolution of the differential problems about some flows in burner s components .",
    "+ the main set of equations is the navier - stokes system describing the dynamics of the fluids ( see e.g. @xcite ) :    @xmath0    where @xmath1 is the velocity field , @xmath2 is the pressure , @xmath3 the density and @xmath4 the dynamic viscosity of the gas or oil .",
    "sometimes there are other equations to be considered , such as continuity equation , but here we would describe a general simplified case . a geometric characterization of the flow is offered by the _",
    "streamlines _ , that is the continuous lines on which the tangent at any point is parallel to the velocity vector .",
    "+ at every instant of time , the velocity field in the domain of the flow is the set of vectors which give the velocities of the particles at every point ( _ eulerian description _ of a flow ) .",
    "the computation of this vectorial field is done by numerical discretizations of ( [ ns ] ) , e.g. using finite temporal steps , which are usually expensive for cpus and central memory of an hardware environment .",
    "+ the fluid motion can be described by the set of all the trajectories followed by the particles and the speed along these geometric lines in a given interval of time ( _ lagrangian description _ of a flow ) .",
    "the computation of the trajectories usally requires the knowledge of the velocity field , therefore numerical methods are expensive too ( see @xcite for a review on computational fluid dynamics techniques ) .",
    "+ we present a method for computing the velocity field by reduction of navier - stokes equations to ordinary differential form .",
    "+ let @xmath5 \\times [ s_0,s_1 ] \\times [ t_i , t_f ] , \\mathbb{r}^3)$ ] be a smooth @xmath6 function such that , if @xmath7 $ ] is a time value between initial @xmath8 and final instant @xmath9 , and @xmath10 $ ] , the _ curve _ @xmath11 is a @xmath12 , \\mathbb{r}^3)$ ] parameterized invertible representation ( see @xcite ) of a streamline at time @xmath13 .",
    "the @xmath14 parameter identifies a single streamline , and in numerical computation it takes integer values in interval @xmath15 , where @xmath16 is the total number of streamlines . then temporal evolution of the flow is described by the map @xmath17 , for @xmath18\\times[s_0,s_1]$ ] . at any @xmath19 $ ] , the map @xmath20 is a snapshot of all the streamlines at time @xmath13 .",
    "we can consider the velocity field of this snapshot as a set of vectors depending only from @xmath21 and not from @xmath22 , so that for the instant @xmath23 the field is computed using the new snapshot @xmath24 .",
    "+ for fixed @xmath13 and @xmath25 , let @xmath26 be a cartesian coordinates system in @xmath27 and @xmath28 the parameter of the representation @xmath29 . in general , under usual hypothesis of regularity , the relation between a streamline and its tangent vector field is    @xmath30    where @xmath31 .",
    "now we define the parameterized velocity field _ along _ the streamline as    @xmath32    so that @xmath33 . using chain rule",
    "we have @xmath34 and , from ( [ tgrelation ] ) , the following relation holds :    @xmath35    note that the expression @xmath36 is the @xmath37-th component of @xmath38 in navier - stokes system , so it can be substituted by @xmath39 . + now let @xmath40 be the inverse of @xmath41 and @xmath42 ; using standard computations we obtain    @xmath43    along the streamline @xmath44 we have @xmath45 , so navier - stokes equations can be translated into the following ordinary differential equations for the functions @xmath46 :    @xmath47    where @xmath3 and @xmath4 should be considered as function of the parameter @xmath28 and the derivatives of @xmath48 should be expressed throught those of @xmath41 .",
    "these equations are again nonlinear , and a possible symbolic resolution required non standard analytical methods ( as _ lie symmetries _ , see @xcite ) , but now all the derivatives are ordinary and the equations are no more coupled .",
    "as example of technological interest , we consider an internal _ gears pump _ for oil , usually formed by a central internal rotor ( pignon ) which moves an external one ( crown ) .",
    "[ lobepump ]        the oil is contained in the geometrical zones ( _ vanes _ ) between the two rotors .",
    "the knowledge of the flow in these vanes is important for a comprehension of some critical phenomena as cavitation ( bubbles incoming ) or loss of lubrication . + we would study the flow in the critical zone of oil compression , where the rotors are very near and the vane has a small volume . here",
    "we consider , for simplicity , that streamlines have the same geometrical shape of the rotors . in the case , e.g. , of a classical teeth gears pump , without considering a dimensional factor , a single profile ( left side of the tooth ) can be described by the following representation    @xmath49    where @xmath50 , for an opportune value @xmath51 .",
    "[ tooth ]        the evolution in time can be handled , e.g. , by a rotation of angle @xmath52 for an interval of time small enough to have a costant shape for the volume between the two rotors .",
    "then in this interval the streamlines have a new parametrization given by    @xmath53 \\phi(s)\\ ] ]    but the derivatives in the form ( [ odens ] ) of navier - stokes equations are referred only to @xmath28 parameter again . with standard calculations",
    "it can be shown that , in the simple case of constant pressure , these equations have the nonlinear form    @xmath54\\ ] ]",
    "for computing a solution of ( [ odens ] ) , also in case of more complex geometries than previous or in case of turbolent flow , we have tested an algorithm based on smooth interpolation of streamlines which are computed by a first rough numerical resolution of original navier - stokes equations .",
    "for example , in the oil suction channel ( see fig .",
    "[ suction ] ) there is a geometric angle where the flow can become turbulent and problems of cavitation ( formation of air or vapours bubbles due to local gradient of pressure ) can happen .",
    "we describe now the algorithm . for a chosen set of time values ,",
    "a suitable number of streamlines are computed using a finite difference scheme on a grid covering the geometrical domain of interest ( see @xcite ) . then each streamline is divided into couples of geometrical consecutive points , i.e. @xmath55 , @xmath56 , ... , @xmath57 .",
    "every couple is interpolated with a cubic polynomial @xmath58 , @xmath59 $ ] ( @xmath22 is not time ) , imposing the following four analytical conditions :    @xmath60    where @xmath61 and @xmath62 is the numerical solution ( velocity field ) of the original navier - stokes system ( see @xcite for details ) . in this way",
    "we obtain a set of class @xmath63 new streamlines .",
    "note that cubics are the smallest degree one variable polinomials useful to have continuous differentiation along the interpoled lines .",
    "each new streamline can be represented using , e.g. , a unique parameter @xmath64 $ ] with the re - parametrization @xmath65 , with @xmath66 , @xmath67 ; if @xmath68 is a cubic between two generic points , the curve @xmath69 has derivative    @xmath70    and two consecutive cubics have the same derivative in their common point .",
    "the first order derivative @xmath71 is necessary for the ode form ( [ odens ] ) of the navier - stokes equations . it can be shown ( see @xcite )",
    "that , if @xmath16 is the number of streamlines which we want to interpolate , all the @xmath72 coefficients of the cubics can be computed by @xmath73 matrix - vector products @xmath74 where @xmath75 is the @xmath76 matrix + @xmath77 , + @xmath78 is the constant submatrix + @xmath79 + and @xmath80 is the vector @xmath81 , @xmath61 . note that * a * is a _ sparse _ matrix with _ density number _ ( see @xcite ) at most @xmath82 .",
    "also , * a * is a block diagonal matrix where each block is constant , so the execution of a product like @xmath74 can be optimized using standard techniques ( see @xcite ) .",
    "[ suction ]",
    "in this section we discuss the numerical resolution of the nonlinear differential equations ( [ odens ] ) . + for physical reasons , as typical in eulerian point of view , we might resolve an initial value problem for every streamline and for every instant of discretized time , imposing two known values @xmath83 and @xmath84 for @xmath85 at @xmath86 and @xmath87 and two known values @xmath88 and @xmath89 for @xmath90 at @xmath86 and @xmath87 respectively .",
    "the amount of total computations for this method depends on the number of streamlines , on the number of time values considered , and on the spatial step size ( that is , degree of discretization for the independent variable interval @xmath91 $ ] ) of the algorithm used for the resolution of a single equation .",
    "in addition , for complex geometries or turbulent flows , there is the rough - resolution of the classical navier - stokes system and then the interpolations of the streamlines so found .",
    "+ using an hardware environment for numerical computations , we have tried to limit the total time spent on this work and the amount of total memory required for handling the data , so that one can use typical workstations usually devoted to technical and scientific computing . in particular , we have used a system with 2 dual - core processors ( 3.2 ghz as clock frequency ) and 4 gbyte of central memory .",
    "we have prefered the software _ mathematica _ , version 5.2 , for the general numerics and its internal function ndsolve for the numerical resolution of differential equations . + the function ndsolve ( see @xcite for details ) has the option method for specify the desired numerical scheme and the option startingstepsize for specify the initial grid step for the independent variable .",
    "this step is then automatically adapted by an internal procedure if necessary .",
    "we have chosen for method the _ adams - moulton _ or _ backward differentiation _",
    "schema for their reliability when used with nonlinearity as @xmath92 type ( see e.g. @xcite for technical informations and @xcite for some examples ) .",
    "the application of ndsolve required the specification of the initial values @xmath85 and @xmath90 respectively for velocity and acceleration along a streamline .",
    "the numerical resolution of associated algebraic systems is then executed using advanced methods based on lapack technology ( see @xcite ) .",
    "+ version 5.2 of the software _ mathematica _ provides support for multicore computations , spreading a single massive operation into a suitable number of parallel threads among the available processors ( see @xcite ) .",
    "in particular the numerical linear algebra operations seem to have the major benefits from multicore support .",
    "therefore we have tested these features for the matrix - vector products for the computation of all the coefficients of the cubics in the case of complex shape streamlines , and for the numerical resolution of the nonlinear differential equations , where the use of implicit discretization schema involves matrix computation and resolution of many systems of algebraic equations . also , _",
    "mathematica _ has the function blockmatrix of the package matrixmanipulation for construction and manipulation of block diagonal matrix * a * from block * t * , and the multiplication of sparse - dense matrices like * a**b * is highly optimized ( see @xcite ) .",
    "+ in mathematica all the calculations are executed by a central logical unit called _ kernel _ , which distributes parallel threads of a single computation among the processors or cores available .",
    "so we have measured the performances of a single kernel spreading computations on 4 cores ( 2 physical processors ) , simulating a shared - memory system .",
    "as many kernels can run indipendently on the same machine , we have also tested the performances of 2 kernels running computations on 2 physical processors , but in this case using suitable procedures we have previously equi - distributed , among the two units , the data to handle .",
    "the two kernels have independently addressed their own memory allocation , simulating a distributed - memory system . + for comparison , we have executed the same computations on a single one - core processor ( 3.2 ghz ) machine with 4 gbyte of memory .",
    "the mathematica internal function absolutetiming gives the total elapsed time spent by the kernel for the execution of a single task .",
    "therefore this time amount is the sum of the time spent by cpus and the time spent by program ( and operating system ) for handling data among threads .",
    "for example , the command absolutetiming[a*b ; ] gives the total elapsed time of execution of all the necessary operations for the calculation of the product c = a*b , without front - end visualization of the result ( note the use of ; in the expression ) , but with product vector c stored into memory . in this way , if a task is spreaded by the kernel among parallel threads , the output given by this built - in function is the effective total time spent for completion of calculations , and it s not the sum of the single times spent by single threads .",
    "+    [ tablematrix ]    [ cols= \" < , < , < \" , ]     table 2 reports the performances for the numerical resolution of odes .",
    "the speedups are smaller than those of the previous case , probably for the greater percentage of not parallelizable operations required by the used algorithm , but again the performances are better for the multithreads single program .",
    "note that the virtual distributed - memory environment fails when the size of the problem reaches a critical value , while the virtual shared - memory one can complete the task , probably for a better management of memory and centrally cached informations .",
    "note also that the elapsed time necessary for a full calculation of velocity field by a single kernel on a single processor has a range , depending on @xmath16 , variable from few seconds to tens of minutes , therefore for great sizes or large physical domains the speedup of a multicore computation could help in a significant way .",
    "from the discussion about the used algorithms and registered performances , we can deduce the following conclusions on the parallel resolution , in a multicore environment , of blocks of ordinary differential equations :          * the multicore technology gives better speedups in the case of a shared - memory environment with a single central multithreads program which executes all the computations ; * on a multicore machine , from the last line of table ( [ tablendsolve ] ) we deduce that shared - memory single kernel resolution can execute the computations on a greater amount of data than distributed - memory multi - kernel resolution , which requires a greater allocation of memory ; probably this fact depends on the use , made by shared - memory method , of a central caching of temporary data instead of a distributed one ; * mathematical computations on large amount of scientific or technical data can take advantage from the use of numerical software specifically designed for a central multicore architecture , as already shown in previous very particular experiences ( see e.g. @xcite ) ; * the streamlines algorithm and a multicore computation can help to speedup the search , in a suitable set of possible flows , of particular solutions of physical and technical interest ; for example , in the case of a small gradient of pressure we have numerically tested , from a set of possible pressure fields , the existence of a solution of navier - stokes equations along a given turbulence streamline like that of fig .",
    "( 5 ) , which has importance for the prediction of cavitation in pump .",
    "+    * acknowledgment * + the author wish to thank ing . _ giuseppe toniato _ , riello burners s research & developement dept .",
    "director , for his help and suggestions . + this work has been executed as section of a research project , supported by italian ministry for scientific research and university , on optimized flows in combustion chambers and pumps , and based on a collaboration with torino politecnico ( italy ) .",
    "g. argentini , _ using sparse matrices and splines - based interpolation in computational fluid dynamics simulation _ , applied and industrial mathematics in italy , series on advances in mathematics for applied science , vol .",
    "69 , 56 - 64 , ( world scientific , singapore , 2005 ) .",
    "e. anderson , z. bai , c. bischof , s. blackford , j. demmel , j. dongarra , j. du croz , a. greenbaum , s. hammarling , a. mckenney and d. sorenson , _",
    "lapack users guide _ , 3rd edition , ( siam , philadelphia , 1999 ) ."
  ],
  "abstract_text": [
    "<S> in this work we present a technique of fast numerical computation for solutions of navier - stokes equations in the case of flows of industrial interest . at first </S>",
    "<S> the partial differential equations are translated into a set of nonlinear ordinary differential equations using the geometrical shape of the domain where the flow is developing , then these odes are numerically resolved using a set of computations distributed among the available processors . </S>",
    "<S> we present some results from simulations on a parallel hardware architecture using native multithreads software and simulating a shared - memory or a distributed - memory environment . + * keywords * : navier - stokes equations , streamlines , nonlinear differential equations , parallel computation . </S>"
  ]
}