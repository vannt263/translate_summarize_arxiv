{
  "article_text": [
    "the lovsz local lemma ( lll ) is a powerful tool with numerous uses in combinatorics and theoretical computer science .",
    "if a given probability space and collection of events satisfy a certain condition , then the lll asserts the existence of an outcome that simultaneously avoids those events .",
    "the classical formulation of the lll @xcite is as follows .",
    "let @xmath0 be a probability space with probability measure @xmath1 .",
    "let @xmath2 be certain `` undesired '' events in that space .",
    "let @xmath3 be an undirected graph with vertex set @xmath4={\\left \\",
    "{ 1,\\ldots , n \\right \\}}$ ] .",
    "the edges of @xmath3 are denoted @xmath5 .",
    "let @xmath6 be the neighbors of vertex @xmath7 . also , let @xmath8 and let @xmath9 for @xmath10 $ ] .",
    "[ thm : lll ] suppose that the events satisfy the following condition that controls their dependences @xmath11",
    "~=~ \\pr_\\mu[e_i ]      \\qquad\\forall i \\in [ n ] , \\ , j \\subseteq [ n ] \\setminus \\gamma^+(i)\\ ] ] and the following criterion that controls their probabilities @xmath12 ~\\leq~ x_i \\prod_{j \\in \\gamma(i ) } ( 1-x_j ) ~\\quad\\forall i \\in [ n].\\ ] ] then @xmath13 > 0 $ ] .",
    "an equivalent statement of is that the event @xmath14 must be independent of the joint distribution on the events @xmath15 .",
    "when holds , @xmath3 is called a _ dependency graph_. the literature contains several dependency conditions generalizing and criteria generalizing under which the conclusion of the theorem remains true .",
    "we will discuss several such generalizations below .",
    "the lll can also be formulated @xcite in terms of a directed dependency graph instead of an undirected graph , but nearly all applications of which we are aware involve an undirected graph .",
    "accordingly , our work focuses primarily on the undirected case , but we will mention below which of our results extend to the directed case .    [",
    "[ algorithms . ] ] algorithms .",
    "+ + + + + + + + + + +    algorithms to efficiently find an outcome in @xmath16 have been the subject of research for several decades . in 2008 ,",
    "a nearly optimal result was obtained by moser @xcite for a canonical application of the lll , the bounded - degree @xmath17-sat problem . shortly thereafter",
    ", moser and tardos @xcite extended that result to a general scenario called the `` variable model '' in which @xmath0 consists of independent variables , each @xmath14 depends on a subset of the variables , and events @xmath14 and @xmath18 are adjacent in @xmath3 if there is a variable on which they both depend .",
    "clearly the resulting graph is a dependency graph .",
    "the moser - tardos algorithm is extremely simple : after drawing an initial sample of the variables , it repeatedly checks if any undesired event occurs , then _ resamples _ any such event . resampling an event",
    "means that the variables on which it depends receive fresh samples according to @xmath1 .",
    "moser and tardos prove that , if the condition is satisfied , this algorithm will produced the desired outcome after at most @xmath19 resampling operations , in expectation .",
    "numerous extensions of the moser - tardos algorithm have been proposed .",
    "these extensions can handle more general criteria @xcite , derandomization @xcite , exponentially many events @xcite , distributed scenarios @xcite , etc .",
    "however , these results are restricted to the moser - tardos variable model and hence can not be viewed as algorithmic proofs of the lll in full generality .",
    "there are many known scenarios for the lll and its generalizations that fall outside the scope of the variable model @xcite .",
    "section  [ sec : implementation ] discusses several such scenarios , including random permutations , matchings and spanning trees .",
    "recently two efficient algorithms have been developed that go beyond the variable model .",
    "harris and srinivasan @xcite extend the moser - tardos algorithm to a scenario involving random permutations that originates in work of erds and spencer @xcite .",
    "achlioptas and iliopoulos @xcite developed a novel algorithmic `` flaw correction '' framework which allows one to model various applications of the lll in a flexible manner .",
    "they show how this captures several applications of the lll outside the variable model , and even some results that might be beyond typical formulations of the lll .",
    "in contrast to the other results mentioned here , their framework does not involve an underlying measure @xmath1 and is not directly tied to the probabilistic setting of the lll .",
    "this has some benefits , but also some restrictions that seem to prevent it from recovering the lll in full generality , in particular , their publication @xcite does not claim a formal connection with theorem  [ thm : lll ] .",
    "section  [ sec : related - work ] contains further discussion of the related work .",
    "the primary motivating question for this work is whether there is an  algorithmic proof \" of the lovsz local lemma in general probability spaces .",
    "we answer this question in the following sense : we propose an algorithmic framework for the general lovsz local lemma , based on a new notion of _ resampling oracles_. in this framework , we present an algorithm that finds a point in @xmath16 ( avoiding all undesired events ) efficiently , if given access to three types of subroutines outlined below ( the most crucial one being resampling oracles ) .",
    "whether these subroutines can be implemented efficiently is an instance - dependent issue , and we discuss this further below .",
    "however , we show that the existence of such subroutines is guaranteed by the assumptions of the lovsz local lemma . in particular , our algorithm provides a new proof of theorem  [ thm : lll ] ( with no further assumptions ) , and several generalizations thereof , as described below .",
    "algorithmically , we reduce the problem of finding a point in @xmath16 to the problem of implementing the three subroutines that we discuss next .      [",
    "sec : algass ]    in order to discuss algorithms for the lll in full generality , one must assume some form of access to the probability space at hand .",
    "it is natural to assume that one can efficiently sample from @xmath1 , and efficiently check whether a given event @xmath14 occurs .",
    "however , even under these assumptions , finding the desired output can be computationally hard .",
    "( we show an example demonstrating this in section  [ sec : hardness ] . ) therefore , our framework assumes the existence of one more subroutine that can be used by our algorithm .",
    "this leads us to the notion of resampling oracles .",
    "let us introduce some notation .",
    "an atomic event @xmath20 in the probability space @xmath0 will be called a _",
    "state_. we write @xmath21 to denote that a random state @xmath20 is distributed according to @xmath1 , and @xmath22 to denote that the distribution is @xmath1 conditioned on @xmath14 . the resampling oraclesare defined with respect to a graph @xmath3 on @xmath4 $ ] with neighborhood structure @xmath23 ( not necessarily satisfying the condition ) .",
    "the three subroutines required by our algorithm are as follows .    _ sampling from @xmath1 : _ there is a subroutine that provides an independent random state @xmath21 .",
    "_ checking events : _ for each @xmath24 $ ] , there is a subroutine that determines whether @xmath25 .",
    "_ resampling oracles : _ for each @xmath24 $ ] , there is a randomized subroutine @xmath26 with the following properties .    if @xmath14 is an event and @xmath27 , then @xmath28 .",
    "( the oracle @xmath29 removes conditioning on @xmath14 . )    for any @xmath30 , if @xmath31 then also @xmath32 .",
    "( resampling an event can not cause new non - neighbor events to occur . )",
    "when these conditions hold , we say that @xmath29 is a resampling oraclefor events @xmath2 and graph @xmath3 .",
    "if efficiency concerns are ignored , the first two subroutines trivially exist .",
    "we show that ( possibly inefficient ) resampling oracles exist if and only if a certain relaxation of holds ( see section  [ sec : lopsided - intro ] ) .    *",
    "main result .",
    "* our main result is that we can find a point in @xmath33 efficiently , whenever the three subroutines above have efficient implementations .",
    "consider any probability space , any events @xmath2 , and any undirected graph @xmath3 on vertex set @xmath4 $ ] .",
    "if is satisfied and if the three subroutines described above are available , then our algorithm finds a state in @xmath33 efficiently in terms of the number of calls to these subroutines .",
    "we make a more precise statement in the following section .",
    "we note that this theorem does not assume that holds , and the existence of resampling oraclesis actually a strictly weaker condition .",
    "thus , our algorithm provides a new proof of theorem  [ thm : lll ] ( the existential lll ) under its original assumptions .",
    "[ sec : msr ]    a striking aspect of the work of moser and tardos @xcite is the simplicity and flexibility of their algorithm  in each iteration , _ any _ event @xmath14 that occurs can be resampled . we propose a different algorithm that is somewhat less flexible , but whose analysis seems to be simpler in our scenario . roughly speaking , our algorithm proceeds in iterations where in each iteration we resample events that form an independent set in @xmath3 .",
    "the independent set is generated by a greedy algorithm that adds a vertex @xmath7 and resamples @xmath14 , if @xmath7 is not adjacent to the previously selected vertices and @xmath14 occurs in the current state .",
    "this is repeated until no events occur .",
    "pseudocode for this procedure is shown in algorithm  [ alg : resample ] .",
    "nearly identical algorithms have been proposed before , particularly parallel algorithms @xcite , although our interest lies not in the parallel aspects but rather in making the lll ( and its stronger variants ) algorithmic in our general setting .",
    "[ alg : resample ]    initialize @xmath20 with a random state sampled from @xmath1 ; @xmath34 ; @xmath35 ; @xmath36",
    "let @xmath7 be the minimum index satisfying that condition ; @xmath37 ; @xmath38 ; @xmath39 _ resample @xmath14 _ ; @xmath20 .",
    "our algorithmic proof of the lll amounts to showing that maximalsetresampleterminates , at which point @xmath40 clearly holds .",
    "our bound on the running time of maximalsetresampleis shown by the following theorem , which is proven in section  [ sec : analysis ] .",
    "we note that our bound is at most quadratic in the quantity @xmath41 which was the bound proved by moser and tardos @xcite .",
    "[ thm : lll - tight - result ] suppose that the events @xmath2 satisfy and that the three subroutines described above in section  [ sec : algass ] are available .",
    "then the expected number of calls to the resampling oraclesbefore maximalsetresampleterminates is @xmath42 .",
    "[ sec : lopsided - intro ]    erds and spencer @xcite showed that theorem  [ thm : lll ] still holds when is generalized to for which @xmath43 > 0 $ ] .",
    "however that restriction is ultimately unnecessary because , in the context of the lll , the theorem of erds and spencer implies that @xmath44 } \\overline{e_j } ] > 0 $ ] . ]",
    "@xmath45 ~\\leq~ \\pr_\\mu[e_i ]      \\qquad\\forall i \\in [ n ] , \\ , j \\subseteq [ n ] \\setminus \\gamma^+(i).\\ ] ] they playfully called this the `` lopsidependency '' condition , and called @xmath3 a `` lopsidependency graph '' .",
    "this more general condition enables several interesting uses of the lll in combinatorics and theoretical computer science , e.g. , existence of latin transversals @xcite and optimal thresholds for satisfiability @xcite .",
    "recall that theorem  [ thm : lll - tight - result ] did not assume and instead assumed the existence of resampling oracles .",
    "it is natural to wonder how the latter assumption relates to lopsidependency .",
    "we show that the existence of resampling oraclesis equivalent to a condition that we call _ lopsided association _ , and whose strength lies strictly between and .",
    "the lopsided association condition is @xmath46 ~\\geq~ \\pr_\\mu[e_i ] \\cdot \\pr_\\mu[f ]      \\qquad \\forall",
    "i \\in [ n ] , \\forall f \\in { \\cal f}_i\\ ] ] where @xmath47 contains all events @xmath48 whose indicator variable is a monotone non - decreasing function of the indicator variables of @xmath49 .",
    "we call a graph satisfying a _ lopsided association graph _ for events @xmath2 .    resampling oraclesexist for events @xmath2 and a graph @xmath3 if and only if @xmath3 is a lopsided association graphfor events @xmath2 .",
    "this equivalence follows essentially from lp duality : the existence of a resampling oraclecan be formulated as a _ transportation problem _ for which the lopsided associationcondition is exactly the necessary and sufficient condition for a feasible transportation to exist .",
    "section  [ sec : existence ] proves this result in detail .",
    "as remarked above , the dependency conditions are related by @xmath50 @xmath50 .",
    "the first implication is obvious since implies that @xmath14 is independent of @xmath48 in . to see the second implication , simply take @xmath51 for any @xmath52 \\setminus \\gamma^+(i)$ ] to obtain that @xmath53 \\geq \\pr_\\mu[e_i]$ ] .",
    "although lopsided association is formally a stronger assumption than lopsidependency , every use of the lll with lopsidependency that we have studied actually satisfies the stronger lopsided association condition .",
    "we demonstrate this in section  [ sec : implementation ] by designing efficient resampling oraclesfor those scenarios .",
    "consequently , theorem  [ thm : lll - tight - result ] makes the lll efficient in those scenarios .",
    "as remarked above , section  [ sec : hardness ] describes a scenario in which and are satisfied for a dependency graph @xmath3 but finding a state @xmath54 is computationally hard , assuming standard complexity theoretic beliefs . in that scenario resampling oraclesmust necessarily exist since is satisfied , but they can not be efficiently implemented due to the computational hardness .",
    "therefore the equivalence between and resampling oraclescomes with no efficiency guarantees .",
    "nevertheless in all lopsidependency scenarios that we have encountered in applications of the lll , efficient implementations of the resampling oraclesarise naturally from existing work , or can be devised with modest effort . in particular this is the case for random permutations , perfect matchings in complete graphs , and spanning trees in complete graphs , as discussed in section  [ sec : implementation ] .",
    "[ sec : generalizinglll ]    in the early papers on the lll @xcite , the criterion relating the dependency graph @xmath3 and the probabilities @xmath55 $ ] was shown to be a sufficient condition to ensure that @xmath13 > 0 $ ] .",
    "shearer @xcite discovered a more general criterion that ensures the same conclusion .",
    "in fact , shearer s criterion is the best possible : whenever his criterion is violated , there exist a corresponding measure @xmath1 and events @xmath2 for which @xmath13 = 0 $ ] .",
    "section  [ sec : analysis ] formally defines shearer s criterion and uses it in a fundamental way to prove theorem  [ thm : lll - tight - result ] .",
    "moreover , we give an algorithmic proof of the lll under shearer s criterion instead of the criterion .",
    "this algorithm is efficient in typical situations , although the efficiency depends on shearer s parameters .",
    "the following simplified result is stated formally and proven in section  [ sec : shearer - automatic - slack ] .",
    "suppose that a graph @xmath3 and the probabilities @xmath56,\\ldots,\\pr_\\mu[e_n]$ ] satisfy shearer s criterion with @xmath57 slack , and that the three subroutines described in section  [ sec : algass ] are available .",
    "then the expected number of calls to the resampling oraclesby maximalsetresampleis @xmath58 .",
    "we also prove a more refined bound valid for any probabilities satisfying shearer s criterion .",
    "this bound is similar to the bound obtained by kolipaka and szegedy @xcite ; see section  [ sec : shearer - automatic - slack ] for details .",
    "unfortunately shearer s criterion is unwieldy and has not seen much use in applications of the lll .",
    "recently several researchers have proposed criteria of intermediate strength between and shearer s criterion @xcite .",
    "the first of these , called the _ cluster expansion _",
    "criterion , was originally devised by bissacot et al .",
    "@xcite , and is based on insights from statistical physics . this criterion has given improved results in several applications of the local lemma @xcite .",
    "previous algorithmic work has also used the cluster expansion criterion in the variable model @xcite and for permutations @xcite .",
    "we give a new , elementary proof that the cluster expansion criterion implies shearer s criterion .",
    "in contrast , the previous proof is analytic and requires several ideas from statistical physics @xcite . as a consequence ,",
    "we obtain the first purely combinatorial proof that the existential lll holds under the cluster expansion criterion . another consequence ( theorem  [ thm : cluster - no - slack ] ) is an algorithm for the lll under the cluster expansion criterion , obtained using our algorithmic results under shearer s criterion .",
    "this generalizes theorem  [ thm : lll - tight - result ] by replacing with the cluster expansion criterion , stated below as . to state the result",
    ", we require additional notation : let @xmath59 denote the family of independent sets in the graph @xmath3 .",
    "[ thm : cluster - no - slack ] suppose that the events @xmath2 satisfy the following criterion @xmath60 ~\\leq~ \\frac { y_i } { \\sum_{j \\subseteq \\gamma^+(i ) , j \\in \\ind } \\prod_{j \\in j } y_j } .\\ ] ] and that the three subroutines described in section  [ sec : algass ] are available .",
    "then the expected number of calls to the resampling oraclesbefore maximalsetresampleterminates is @xmath61 .",
    "[ sec : related - work ]    the breakthrough work of moser and tardos @xcite stimulated a string of results on algorithms for the lll .",
    "this section reviews the results that are most relevant to our work .",
    "several interesting techniques play a role in the analyses of these previous algorithms .",
    "these can be roughly categorized as the _ entropy method _ @xcite , _ witness trees _ or _",
    "witness sequences _ @xcite and _ forward - looking combinatorial analysis _ @xcite .",
    "moser @xcite developed the entropy method to analyze a very simple algorithm for the `` symmetric '' lll @xcite , which incorporates the maximum degree of @xmath3 and a uniform bound on @xmath55 $ ] .",
    "the entropy method roughly shows that , if the algorithm runs for a long time , a transcript of the algorithm s actions provides a compressed representation of the algorithm s random bits , which is unlikely due to entropy considerations .",
    "following this , moser and tardos @xcite showed that a similar algorithm will produce a state in @xmath33 , assuming the independent variable model and the criterion .",
    "this paper is primarily responsible for the development of witness trees , and proved the `` witness tree lemma '' , which yields an extremely elegant analysis in the variable model .",
    "the witness tree lemma has further implications .",
    "for example , it allows one to analyze separately for each event its expected number of resamplings .",
    "moser and tardos also extended the variable model to incorporate a limited form of lopsidependency , and showed that their analysis still holds in that setting .",
    "the main advantage of our result over the moser - tardos result is that we address the occurrence of an event through the abstract notion of resampling oraclesrather than directly resampling the variables of the variable model .",
    "furthermore we give efficient implementations of resampling oraclesfor essentially all known probability spaces to which the lll has been applied .",
    "a significant difference with our work is that we do not have an analogue of the witness tree lemma ; our approach provides a simpler analysis when the lll criterion has slack but requires a more complicated analysis to remove the slack assumption . as a consequence ,",
    "our bound on the number of resampling oraclecalls is larger than the moser - tardos bound .",
    "our lack of a witness tree lemma is inherent .",
    "appendix  [ app : witness - trees ] shows that the witness tree lemma is false in the abstract scenario of resampling oracles .",
    "the moser - tardos algorithm is known to terminate under criteria more general than , while still assuming the variable model .",
    "pegden @xcite showed that the cluster expansion criterion suffices , whereas kolipaka and szegedy @xcite showed more generally that shearer s criterion suffices .",
    "we also extend our analysis to the cluster expansion criterion as well as shearer s criterion , in the more general context of resampling oracles .",
    "our bounds on the number of resampling operations are somewhat weaker than those of @xcite , but the increase is at most quadratic .",
    "kolipaka and szegedy @xcite present another algorithm , called generalizedresample , whose analysis proves the lll under shearer s condition for arbitrary probability spaces .",
    "generalizedresample is similar to maximalsetresamplein that they both work with abstract distributions and that they repeatedly choose a maximal independent set @xmath62 of undesired events to resample .",
    "however , the way that the bad events are resampled is different : generalizedresample needs to sample from @xmath63 , which is a complicated operation that seems difficult to implement efficiently . thus maximalsetresamplecan be viewed as a variant of generalizedresample that can be made efficient in all known scenarios .",
    "harris and srinivasan @xcite show that the moser - tardos algorithm can be adapted to handle certain events in a probability space involving random permutations .",
    "their method for resampling an event is based on the fischer - yates shuffle .",
    "this scenario can also be handled by our framework ; their resampling method perfectly satisfies the criteria of a resampling oracle .",
    "the harris - srinivasan s result is stronger than ours in that they do prove an analog of the witness tree lemma .",
    "consequently their algorithm requires fewer resamplings than ours , and they are able to derive parallel variants of their algorithm .",
    "the work of harris and srinivasan is technically challenging , and generalizing it to a",
    "more abstract setting seems daunting .",
    "achlioptas and iliopoulos @xcite proposed a general framework for finding `` flawless objects '' , based on actions for addressing flaws .",
    "we call this the a - i framework .",
    "they show that , under certain conditions , a random walk over such actions rapidly converges to a flawless object .",
    "this naturally relates to the lll by viewing each event @xmath14 as a flaw . at the same time",
    ", the a - i framework is not tied to the probabilistic formulation of the lll , and can derive results , such as the greedy algorithm for vertex coloring , that seem to be outside the scope of typical lll formulations , such as theorem  [ thm : lll ] .",
    "the a - i framework @xcite has other restrictions and does not claim to recover any particular form of the lll .",
    "nevertheless , the framework can accommodate applications of the lll where lopsidependency plays a role , such as rainbow matchings and rainbow hamilton cycles .",
    "in contrast , our framework embraces the probabilistic formulation and can recover the original existential lll ( theorem  [ thm : lll ] ) in full generality , even incorporating shearer s generalization .",
    "the a - i analysis @xcite is inspired by moser s entropy method .",
    "technically , it entails an encoding of random walks by  witness forests \" and combinatorial counting thereof to estimate the length of the random walk .",
    "the terminology of witness forests is reminiscent of the witness trees of moser and tardos , but conceptually they are different in that the witness forests grow  forward in time \" rather than backward .",
    "this is conceptually similar to  forward - looking combinatorial analysis \" , which we discuss next .",
    "giotis et al .",
    "@xcite show that a variant of moser s algorithm gives an algorithmic proof in the variable model of the symmetric lll .",
    "while this result is relatively limited when compared to the results above , their analysis is a clear example of forward - looking combinatorial analysis . whereas moser and tardos use a _ backward - looking _ argument to find witness trees in the algorithm s `` log '' , giotis et al .",
    "analyze a _ forward - looking _ structure : the tree of resampled events and their dependencies , looking forward in time .",
    "this viewpoint seems more natural and suitable for extensions .",
    "our approach can be roughly described as _ forward - looking analysis _ with a careful modification of the moser - tardos algorithm , formulated in the framework of resampling oracles .",
    "our main conceptual contribution is the simple definition of the resampling oracles , which allows the resamplings to be readily incorporated into the forward - looking analysis .",
    "our modification of the moser - tardos algorithm is designed to combine this analysis with the technology of `` stable set sequences '' @xcite , defined in section  [ sec : stable - set - sequences ] , which allows us to accommodate various lll criteria , including shearer s criterion .",
    "this plays a fundamental role in the full proof of theorem  [ thm : lll - tight - result ] .",
    "our second contribution is a technical idea concerning slack in the lll criteria .",
    "this idea is a perfectly valid statement regarding the existential lll as well , although we will exploit it algorithmically .",
    "one drawback of the forward - looking analysis is that it naturally leads to an exponential bound on the number of resamplings , unless there is some slack in the lll criterion ; this same issue arises in @xcite .",
    "our idea eliminates the need for slack in the and criteria .",
    "we prove that , even if or are tight , we can instead perform our analysis using shearer s criterion , which is never tight because it defines an open set .",
    "for example , consider the familiar case of theorem  [ thm : lll ] , and suppose that holds with equality , i.e. , @xmath55 = x_i \\prod_{j \\in \\gamma(i ) } ( 1-x_j)$ ] for all @xmath7 .",
    "we show that the conclusion of the lll remains true even if each event @xmath14 actually had the larger probability @xmath55 \\cdot \\big(1 + ( 2 \\sum_i \\frac{x_i}{1-x_i})^{-1}\\big)$ ] .",
    "the proof of this fact crucially uses shearer s criterion and it does not seem to follow from more elementary tools @xcite .    * follow - up work . *",
    "subsequently , achlioptas and iliopoulos generalized their framework further to incorporate our notion of resampling oracles @xcite . this subsequent work can be viewed as a unification of their framework and ours ; it has the benefit of both capturing the framework of resampling oracles and allowing some additional flexibility ( in particular , the possibility of regenerating the measure @xmath1 approximately rather than exactly ) .",
    "we remark that this work is still incomparable with ours , primarily due to the facts that our analysis is performed in shearer s more general setting , and that our algorithm is efficient even when the lll criteria are tight .    * organization . *",
    "the rest of the paper is organized as follows . in section  [ sec : resample - existence ] , we discuss the connection between resampling oracles and the assumptions of the lovsz local lemma .",
    "we also show here that resampling oracles as well as the lll itself can be computationally hard in general . in section  [ sec : implementation ]",
    ", we show concrete examples of efficient implementations of resampling oracles . in section  [ sec : applications ] we discuss several applications of these resampling oracles",
    ". finally , in section  [ sec : analysis ] we present the full analysis of our algorithm .",
    "[ sec : resample - existence ]    the algorithms in this paper make no reference to the lopsidependency condition and instead assume the existence of resampling oracles . in section  [ sec : existence ] we show that there is a close relationship between these two assumptions : the existence of a resampling oraclefor each event is equivalent to the condition , which is a strengthening of .",
    "we should emphasize that the _ efficiency of an implementation _ of a resampling oracleis a separate issue .",
    "there is no general guarantee that resampling oraclescan be implemented efficiently . indeed , as we show in section  [ sec : hardness ] , there are applications of the lll such that the resampling oracles are hard to implement efficiently , and finding a state avoiding all events is computationally hard , under standard computational complexity assumptions .    nevertheless , this is not an issue in common applications of the lll : resampling oraclesexist and can be implemented efficiently in all uses of the lll of which we are aware , even those involving lopsidependency .",
    "section  [ sec : implementation ] has a detailed discussion of several scenarios .",
    "[ sec : existence ]    this section proves an equivalence lemma connecting resampling oracleswith the notion of lopsided association .",
    "first , let us define formally what we call a resampling oracle .",
    "[ def : resampling - oracle ] let @xmath2 be events on a space @xmath0 with a probability measure @xmath1 , and let @xmath64 , e)$ ] be a graph with neighbors of @xmath24 $ ] denoted by @xmath65 .",
    "let @xmath29 be a randomized procedure that takes a state @xmath66 and outputs a state @xmath67 .",
    "we say that @xmath29 is a resampling oracle for @xmath14 with respect to @xmath3 , if    for @xmath27 , we obtain @xmath28 .",
    "( the oracle @xmath29 removes conditioning on @xmath14 . )    for any @xmath68 , if @xmath31 then also @xmath32 .",
    "( resampling an event can not cause new non - neighbor events to occur . )    next , let us define the notion of a lopsided association graph .",
    "we denote by @xmath69 $ ] the @xmath70-valued function indicating whether @xmath14 occurs at a state @xmath66 .",
    "a graph @xmath3 with neighborhood function @xmath23 is a lopsided association graphfor events @xmath2 if @xmath46 ~\\geq~ \\pr_\\mu[e_i ] \\cdot \\pr_\\mu[f ]      \\qquad \\forall i \\in [ n ] , \\forall f \\in \\cf_i\\ ] ] where @xmath71 contains all events @xmath48 such that @xmath72 $ ] is a monotone non - decreasing function of the functions @xmath73 \\,:\\ , j \\notin \\gamma^+(i ) \\,)$ ] .",
    "[ lem : resample - existence ] consider a fixed @xmath24 $ ] and assume @xmath55 > 0 $ ] .",
    "the following statements are equivalent .",
    "( a ) : :    there exists a resampling oracle@xmath29 satisfying the    conditions ( r1 )  and ( r2 )  with respect to a neighborhood    @xmath74 ( ignoring issues of computational    efficiency ) .",
    "( b ) : :    @xmath75 \\geq \\pr_\\mu[e_i ] \\cdot \\pr_\\mu[f ] $ ]    for any event @xmath76 .    resampling oracles @xmath77 exist for events @xmath2 with respect to a graph @xmath3 if and only if @xmath3 is a lopsided association graphfor @xmath2 .",
    "both statements imply that the lopsidependency condition holds .",
    "lemma  [ lem : resample - existence ] ( a ) @xmath50 ( b ) : consider the coupled states @xmath78 where @xmath27 and @xmath79 . by ( r1 ) , @xmath80 . for any event @xmath76 ,",
    "if @xmath48 does not occur at @xmath20 then it does not occur at @xmath81 either , due to ( r2 ) .",
    "this establishes that @xmath82   ~=~ \\e_{\\omega ' \\sim \\mu}[f[\\omega ' ] ]   ~\\leq~",
    "\\e_{\\omega \\sim \\mu|e_i}[f[\\omega ] ]   ~=~",
    "\\pr_\\mu[f \\mid e_i],\\ ] ] which implies @xmath83 \\geq \\pr_\\mu[f ] \\cdot \\pr_\\mu[e_i]$ ]",
    ". in particular this implies , by taking @xmath84 .",
    "\\(b ) @xmath50 ( a ) : we begin by formulating the existence of a resampling oracleas the following _ transportation problem_. consider a bipartite graph @xmath85 , where @xmath86 and @xmath87 are disjoint , @xmath86 represents all the states @xmath66 satisfying @xmath14 , and @xmath87 represents all the states @xmath66 .",
    "edges represent the possible actions of the resampling oracle : @xmath88 if @xmath89 satisfies every event among @xmath90 that @xmath91 satisfies .",
    "each vertex has an associated weight : for @xmath92 , we define @xmath93 $ ] , and for @xmath94 , @xmath95 / \\pr_\\mu[e_i]$ ] , i.e , @xmath96 is the probability of @xmath89 conditioned on @xmath14 .",
    "we claim that the resampling oracle@xmath29 exists if and only if there is an assignment @xmath97 of values to the edges such that @xmath98 such an assignment is called a feasible transportation .",
    "given such a transportation , the resampling oracleis defined naturally by following each edge from @xmath94 with probability @xmath99 , and the resulting distribution on @xmath87 is @xmath100 .",
    "conversely , for a resampling oraclewhich , for a given state @xmath94 , generates @xmath101 with probability @xmath102 , we define @xmath103 .",
    "this assignment satisfies .",
    "our goal at this point is show that ( b ) implies feasibility of .",
    "a condition that is equivalent to , but more convenient for our purposes , can be determined from lp duality ( * ? ? ?",
    "* theorem 21.11 ) . a feasible transportation exists if and only if @xmath104 where @xmath105 .",
    "this is an extension of hall s condition for the existence of a perfect matching .",
    "our goal at this point is show that ( b ) implies feasibility of .",
    "let us now simplify .",
    "fix any @xmath106 .",
    "the neighborhood @xmath107 consists of states satisfying at most those events among @xmath108 satisfied by some state in @xmath109 .",
    "thus @xmath107 corresponds to an event @xmath110 such that @xmath111 $ ] is a _ non - increasing _ function of @xmath73 : j \\notin",
    "\\gamma^+(i ) \\,)$ ] .",
    "next observe that , if the set of events among @xmath112 satisfied by @xmath113 is a subset of those satisfied by @xmath94 , then @xmath114 .",
    "suppose that , for each @xmath115 , we add to @xmath109 all such vertices @xmath116 .",
    "doing so can only increase the left - hand side of ( [ eq : transportationdual].2 ) , but does not increase the right - hand side as @xmath107 remains unchanged ( since @xmath114 ) .",
    "furthermore , the resulting set @xmath109 corresponds to the same event @xmath110 , but restricted to the states in @xmath86 .",
    "let us call such a set @xmath109 non - increasing .",
    "let ( [ eq : transportationdual]@xmath117)denote the simplification of in which we restrict to non - increasing @xmath109 . we have argued that and ( [ eq : transportationdual]@xmath117)are equivalent .    our goal at this point is",
    "show that ( b ) implies feasibility of ( [ eq : transportationdual]@xmath117 ) .",
    "one may easily see that ( b ) is equivalent to @xmath118      ~\\leq~      \\pr_\\mu[\\overline{f } ] \\cdot \\pr_\\mu[e_i ]      \\qquad\\forall f \\in \\cf_i.\\ ] ] assuming @xmath119 > 0 $ ] , we can rewrite this as @xmath120 \\leq \\pr_\\mu[\\overline{f } ] ~\\forall f \\in \\cf_i$ ] .",
    "now consider using this inequality with @xmath121 for each @xmath110 corresponding to some non - increasing set @xmath106 .",
    "we then have @xmath122 = \\sum_{u \\in a } p_u$ ] and @xmath123 = \\sum_{w \\in \\gamma(a ) } p_w$ ] .",
    "this verifies the feasibility of ( [ eq : transportationdual]@xmath117 ) .",
    "[ sec : resample - monotone ]    this section presents an example of a setting where lemma  [ lem : resample - existence ] implies the existence of a non - trivial resampling oracle , even though the lopsided association graphis empty .",
    "this setting was previously known to have connections to the existential lll @xcite .",
    "the probability space here is @xmath124 , viewed in the natural way as the boolean lattice with operations @xmath125 ( meet ) and @xmath126 ( join ) , and with the partial order denoted @xmath127 .",
    "let @xmath128 $ ] be a probability distribution , i.e. , @xmath129 .",
    "we assume that @xmath1 is _ log - supermodular _ , meaning that @xmath130 as an example , any product distribution is log - supermodular . consider monotone increasing events @xmath14 , i.e. , such that @xmath131 .",
    "note that any monotone increasing function of such events is again monotone increasing .",
    "it follows directly from the fkg inequality @xcite that condition ( b ) of lemma  [ lem : resample - existence ] is satisfied for such events with an _ empty _ lopsided association graph . therefore , a resampling oracleexists in this setting",
    ". however , the explicit description of its operation might be complicated and we do not know whether it can be implemented efficiently in general .",
    "alternatively , the existence of the resampling oraclecan be proved directly , using a theorem of holley  ( * ? ? ?",
    "* theorem 6 ) .",
    "the resampling oracleis described in algorithm  [ alg : monotone ] .",
    "the reader can verify that this satisfies the assumptions ( r1 )  and ( r2 ) , using holley s theorem .",
    "@xmath132 : if @xmath133 , * fail*. randomly select @xmath134 with probability @xmath135 .",
    "@xmath134 .",
    "[ thm : holley ] let @xmath136 and @xmath137 be probability measures on @xmath138 satisfying @xmath139 then there exists a probability distribution @xmath140",
    "satisfying @xmath141    let @xmath109 be an arbitrary set and let @xmath142",
    ". then @xmath143 .",
    "define @xmath144 to be @xmath145 if @xmath146 , and otherwise zero .",
    "define @xmath147 .",
    "we now argue that holds . if @xmath148 then the right - hand side zero , whereas the left - hand side is non - negative .",
    "otherwise , we have @xmath149 by log supermodularity of @xmath1 .",
    "so there exists a distribution @xmath150 satisfying the conclusion of theorem  [ thm : holley ] .",
    "recall that @xmath142 .",
    "then , for each fixed @xmath151 , we have @xmath152      & ~=~ \\sum_{x ' \\supseteq a } \\pr [ x = x ' ] \\cdot \\pr [ r_a(x)=y \\mid x = x ' ] \\\\      & ~=~ \\sum_{x ' \\supseteq a } \\mu_1(x ' ) \\cdot \\frac{\\nu(x',y)}{\\sum_{y ' } \\nu(x',y ' ) }       ~=~ \\mu_2(y),\\end{aligned}\\ ] ] by and .",
    "this shows that @xmath143 .",
    "the resampling oracle@xmath153 applied to a set @xmath154 satisfying @xmath155 does not cause any new event @xmath156 .",
    "this follows since @xmath153 equals @xmath157 with probability proportional to @xmath158 , which is zero unless @xmath159 by .",
    "[ sec : hardness ]    this section considers whether the lll can always be made algorithmic .",
    "we show that , even in fairly simple scenarios where the lll applies , finding the desired output can be computationally hard , a fact that surprisingly seems to have been overlooked .",
    "we first observe that the question of algorithmic efficiency must be stated carefully otherwise hardness is trivial .",
    "_ a trivial example .",
    "_ given a boolean formula @xmath160 , let the probability space be @xmath161 , and let @xmath1 be the uniform measure on @xmath0 .",
    "there is a single event @xmath162 defined to be @xmath163 if @xmath160 is satisfiable , and @xmath164 if @xmath160 is not satisfiable .",
    "since @xmath165=1/2 $ ] , the criterion holds trivially with @xmath166 .",
    "the lll gives the obvious conclusion that there is a state @xmath167 .",
    "yet , finding this state requires deciding satisfiability of @xmath160 , which is np - complete .",
    "the reason that this example is trivial is that even deciding whether the undesired event has occurred is computationally hard .",
    "a more meaningful discussion of lll efficiency ought to rule out this trivial example by considering only scenarios that satisfy some reasonable assumptions . with that in mind",
    ", we will assume that    there is a probability space @xmath0 , whose states can be described by @xmath168 bits ;    a graph @xmath3 satisfying for events @xmath2 is explicitly provided ;",
    "@xmath169 satisfying the conditions are provided , and @xmath41 is at most @xmath170 ;    there is a subroutine that provides an independent random state @xmath21 in @xmath171 time ;    for each @xmath24 $ ] , there is a subroutine which determines for any given @xmath66 whether @xmath25 , in @xmath171 time .",
    "as far as we know , no prior work refutes the possibility that there is an algorithmic form of the lll , with running time @xmath172 , in this general scenario .",
    "our results imply that resampling oraclesdo _",
    "exist _ in this general scenario , so it is only the question of whether these resampling oraclesare _ efficient _ that prevents theorem  [ thm : lll - tight - result ] from providing an efficient algorithm . nevertheless , we show that there is an instance of the lll that satisfies the reasonable assumptions stated above , but for which finding a state in @xmath173 requires solving a problem that is computationally hard ( under standard computational complexity assumptions ) . as a consequence , we conclude that the resampling oraclescannot always be implemented efficiently , even under the reasonable assumptions of this general scenario .",
    "we remark that np - completeness is not the right notion of hardness here @xcite .",
    "problems in np involve deciding whether a solution exists , whereas the lll _ guarantees that a solution exists _ , and the goal is to explicitly find a solution .",
    "our result is instead based on hardness of the _ discrete logarithm _",
    "problem , a standard belief in computational complexity theory . in the following",
    ", @xmath174 for a prime @xmath175 and integer @xmath176 denotes a finite field of order @xmath177 , and @xmath178 its multiplicative group of nonzero elements .",
    "[ thm : lll - hardness ] there are instances of events @xmath2 on a probability space @xmath179 under the uniform probability measure , such that    the events @xmath14 are mutually independent ;    for each @xmath24 $ ] , the condition @xmath25 can be checked in @xmath170 time for given @xmath66 ;    the conditions are satisfied with @xmath180 for each @xmath24 $ ] ;    but finding a state in @xmath16 is as hard as solving the discrete logarithm problem in @xmath181 .",
    "_ superficially , this result seems to contradict the fact that the lll can be made algorithmic in the variable model @xcite , where events are defined on underlying independent random variables .",
    "the key point is that the variable model also relies on a particular type of dependency graph ( defined by shared variables ) which might be more conservative than the true dependencies between the events .",
    "theorem  [ thm : lll - hardness ] shows that , even if the probability space consists of independent @xmath182 random variables , the lll can not in general be made algorithmic if the true dependencies are considered .",
    "consider an instance of the discrete logarithm problem in the multiplicative group @xmath181 .",
    "the input is a generator @xmath183 of @xmath181 and an element @xmath184 .",
    "the goal is to find an integer @xmath185 such that @xmath186 .",
    "we define an instance of @xmath176 events on @xmath179 as follows .",
    "we identify @xmath179 with @xmath187 $ ] as well as @xmath188 in a natural way .",
    "we define @xmath189 \\rightarrow { \\mathrm{gf}}(2^n)$ ] by @xmath190 and @xmath191 for @xmath192 , where the exponentiation is performed in @xmath188 . for each @xmath24",
    "$ ] , we define an event @xmath14 that occurs for @xmath193 iff @xmath194 .",
    "this is a condition that can be checked in time @xmath170 , by computing @xmath195 where we interpret @xmath20 as @xmath196 and compute @xmath197 by taking squares iteratively .",
    "observe that for @xmath20 distributed uniformly in @xmath179 , @xmath198 is again distributed uniformly in @xmath0 , since @xmath199 is a bijection ( @xmath200 is mapped to @xmath200 , and @xmath198 for @xmath201 generates each element of the multiplicative group @xmath181 exactly once ) .",
    "therefore , the probability of @xmath14 is @xmath202 , for each @xmath24 $ ] .",
    "further , the events @xmath2 are mutually independent , since for any @xmath52 $ ] , @xmath203 occurs iff @xmath204 , which happens with probability @xmath205 . here",
    "@xmath206 is the indicator vector for the set @xmath62 , and @xmath207 denotes addition in @xmath188 ( i.e. , component - wise xor in @xmath208 ) . hence the dependency graph is empty , and the lll with parameters @xmath180 trivially implies that there exists a state @xmath20 avoiding all the events . in this instance , we know explicitly that the state avoiding all the events is @xmath209 .",
    "therefore , if we had an efficient algorithm to find this point for any given @xmath184 , we would also have an efficient algorithm for the discrete logarithm problem in @xmath188 .",
    "[ sec : implementation ]    in this section , we present efficient implementations of resampling oraclesin four application settings : independent random variables ( which was the setting of @xcite ) , random permutations ( handled by @xcite ) , perfect matchings in complete graphs ( some of whose applications are made algorithmic by @xcite ) , and spanning trees in complete graphs ( which is a new scenario that we can handle ) . to be more precise , resampling oracles also depend on the types of events and dependencies that we want to handle .",
    "we give an example of events on independent random variables for which resampling oracles exist but can not be made efficient .",
    "] in the setting of independent random variables , we can handle arbitrary events with dependencies defined by overlapping relevant variables , just like @xcite . in the setting of permutations , we handle the appearance of patterns in permutations as in @xcite . in the settings of matchings and spanning trees",
    ", we consider the  canonical events \" defined by @xcite , characterized by the appearance of a certain subset of edges .",
    "we also show in section  [ sec : product - resampling ] how resampling oracles for a certain probability space can be extended in a natural way to products of such probability spaces ( for example , how to go from resampling oracles for one random permutation to a collection of independent random permutations ) .",
    "these settings cover all the applications of the lopsided lll that we are aware of .",
    "[ sec : resample - independent ]    this is the most common setting , considered originally by moser and tardos @xcite . here",
    ", @xmath0 has a product structure corresponding to independent random variables @xmath210 .",
    "the probability measure @xmath1 here is a product measure .",
    "each bad event @xmath14 depends on a particular subset of variables @xmath211 , and two events are independent iff @xmath212 .    here",
    "our algorithmic assumptions correspond exactly to the moser - tardos framework @xcite .",
    "sampling from @xmath1 means generating a fresh set of random variables independently .",
    "the resampling oracle@xmath29 takes a state @xmath20 and replaces the random variables @xmath213 by fresh random samples .",
    "it is easy to see that the assumptions are satisfied : in particular , a random state sampled from @xmath1 conditioned on @xmath14 has all variables outside of @xmath211 independently random .",
    "hence , resampling the variables of @xmath211 produces the distribution @xmath1 .",
    "clearly , resampling @xmath214 does not affect any events whose variables do not intersect @xmath211 .",
    "we note that this resampling oracleis also consistent with the notion of lopsidependency on product spaces considered by @xcite : they call two events @xmath215 lopsidependent , if @xmath216 and it is possible to cause @xmath18 to occur by resampling @xmath211 in a state where @xmath14 holds but @xmath18 does not ( the definition in @xcite is worded differently but equivalent to this ) .",
    "this is exactly the condition that we require our resampling oracleto satisfy .",
    "[ sec : resample - permutations ]    the probability space @xmath0 here is the space of all permutations @xmath217 on a set @xmath4 $ ] , with a uniform measure @xmath1 .",
    "the bad events are assumed to be  simple \" in the following sense : each bad event @xmath14 is defined by a  pattern \" @xmath218 .",
    "the event @xmath14 occurs if @xmath219 for each @xmath220 .",
    "let @xmath221 denote the variables of @xmath217 relevant to event @xmath18 .",
    "let us define a relation @xmath222 to hold iff there are pairs @xmath223 such that @xmath224 or @xmath225 ; i.e. , the two events entail the same value in either the range or domain .",
    "this relation defines a lopsidependency graph .",
    "it is known that the lopsided lll holds in this setting .",
    "@xmath226 ) : @xmath227 , i.e. , the variables in @xmath217 affecting event @xmath14 ; fix an arbitrary order @xmath228 ; swap @xmath229 with @xmath230 for @xmath231 uniformly random among @xmath4 \\setminus \\{x_1,\\ldots , x_{i-1}\\}$ ] ; @xmath217 ;    harris and srinivasan @xcite showed how , under the lll criteria , a permutation avoiding all bad events can be found algorithmically .",
    "we implement the resampling oraclebased on their algorithm ( see algorithm  [ alg : permutation - shuffle ] ) . to prove the correctness of this resampling oraclewithin our framework , we need the following lemma .    [",
    "lem : shuffle ] suppose that a permutation @xmath217 has some arbitrary fixed assignment on the variables in @xmath154 , @xmath232 , and it is uniformly random among all permutations satisfying @xmath232 .",
    "then the output of shuffle@xmath233 is a uniformly random permutation .",
    "the procedure is known as the fisher - yates shuffle for generating uniformly random permutations ( and was used in @xcite as well ) .",
    "in contrast to the full shuffle , we assume that some part of the permutation has been shuffled already : @xmath154 is the remaining portion that still remains to be shuffled , and conditioned on its assignment the rest is uniformly random .",
    "this would be exactly the distribution achieved after performing the fisher - yates shuffle on the complement of @xmath154 .",
    "our procedure performs the rest of the fisher - yates shuffle , which produces a uniformly random permutation . for completeness",
    "we give a self - contained proof .",
    "let @xmath234 .",
    "by induction , after performing the swap for @xmath235 , the permutation is uniform among all permutations with a fixed assignment of @xmath236 ( consistent with @xmath160 ) .",
    "this holds because , before the swap , the permutation was by induction uniform conditioned on the assignment of @xmath237 being consistent with @xmath160 , and we choose a uniformly random swap for @xmath235 among the available choices .",
    "this makes every permutation consistent with @xmath160 on @xmath236 equally likely after this swap .",
    "this verifies the first condition for our resampling oracle .",
    "the second condition is that resampling of _ occurring events _ does not affect non - neighbor events .",
    "this is true because of the following lemma .",
    "[ lem : dependency ] the resampling oracle@xmath238 applied to a permutation satisfying @xmath14 does not cause any new event outside of @xmath239 to occur .",
    "suppose @xmath18 changed its status during a call to @xmath238 .",
    "this means that something changed among its relevant variables @xmath240 .",
    "this could happen in two ways :    \\(1 ) either a variable @xmath241 was swapped because @xmath242 ; then clearly @xmath243 .",
    "\\(2 ) or , a variable in @xmath240 , although outside of @xmath154 , received a new value by a swap with some variable in @xmath244 .",
    "note that in the shuffle procedure , every time a variable @xmath231 outside of @xmath154 changes its value , it is by a swap with a fresh variable of @xmath154 , i.e. one that had not been processed before .",
    "therefore , the value that @xmath231 receives is one that previously caused @xmath14 to occur .",
    "if it causes @xmath18 to occur , it means that @xmath14 and @xmath18 share a value in the range space and we have @xmath243 as well .",
    "[ sec : resample - matchings ]    here , the probability space @xmath0 is the set of all perfect matchings in @xmath245 , with the uniform measure .",
    "this is a setting considered by @xcite and it is also related to the setting of permutations .",
    "( permutations on @xmath4 $ ] can be viewed as perfect matchings in @xmath246 . )",
    "a state here is a perfect matching in @xmath245 , which we denote by @xmath247 .",
    "we consider bad events of the following form : @xmath155 for a set of edges @xmath109 occurs if @xmath248 .",
    "obviously , @xmath249 > 0 $ ] only if @xmath109 is a ( partial ) matching .",
    "let us define @xmath250 iff @xmath251 is _ not _ a matching .",
    "it was proved in @xcite that this defines a lopsidependency graph .",
    "our goal is to implement a resampling oraclein this setting .",
    "we describe such an operation in algorithm  [ alg : matching - shuffle ] .",
    "@xmath252 : check that @xmath248 , otherwise * return * @xmath253 .",
    "@xmath254 ; @xmath255 ; pick @xmath256 arbitrarily ; pick @xmath257 uniformly at random , with @xmath258 randomly ordered ; with probability @xmath259 , add @xmath260 to @xmath261 and remove @xmath262 from @xmath261 ; remove @xmath263 from @xmath264 ; @xmath261 .",
    "let @xmath109 be a matching in @xmath245 and let @xmath253 be distributed uniformly among perfect matchings in @xmath245 such that @xmath248 . then after calling the resampling oracle , @xmath265 is a uniformly random perfect matching .",
    "we prove by induction that at any point , @xmath261 is a uniformly random perfect matching conditioned on containing @xmath264 .",
    "this is satisfied at the beginning : @xmath266 and @xmath253 is uniformly random conditioned on @xmath248 .",
    "assume this is true at some point , we pick @xmath256 arbitrarily and @xmath257 uniformly at random .",
    "denote the vertices covered by @xmath267 by @xmath268 .",
    "observe that for a uniformly random perfect matching on @xmath269 , the edge @xmath263 should appear with probability @xmath270 since @xmath89 has @xmath271 choices to be matched with and @xmath272 is 1 of them .",
    "consequently , we keep the edge @xmath263 with probability @xmath270 and conditioned on this @xmath267 is uniformly random by the inductive hypothesis .",
    "conditioned on @xmath263 not being part of the matching , we re - match @xmath263 with another random edge @xmath257 where @xmath258 is randomly ordered . in this case ,",
    "@xmath89 and @xmath272 get matched to a uniformly random pair of vertices @xmath273 , as they should be .",
    "the rest of the matching @xmath274 is uniformly random on @xmath275 by the inductive hypothesis .",
    "therefore , after each step @xmath267 is uniformly random conditioned on containing @xmath264 . at the end ,",
    "@xmath276 and @xmath261 is uniformly random .",
    "the resampling oracle@xmath265 applied to a perfect matching satisfying event @xmath155 does not cause any new event @xmath156 such that @xmath277",
    ".    observe that all the new edges that the resampling oracleadds to @xmath253 are incident to some vertex matched by @xmath109 .",
    "so if an event @xmath156 was not satisfied before the operation and it is satisfied afterwards , it must be the case that @xmath278 contains some edge not present in @xmath109 but sharing a vertex with @xmath109 .",
    "hence , @xmath251 is not a matching and @xmath250 .",
    "[ sec : resample - trees ]    here , the probability space @xmath0 is the set of all spanning trees in @xmath279 .",
    "let us consider events @xmath155 for a set of edges @xmath109 , where @xmath155 occurs for @xmath280 iff @xmath281 .",
    "define @xmath250 for distinct @xmath282 unless @xmath109 and @xmath278 are vertex - disjoint .",
    "lu et al .",
    "* lemma 7 ) show that this in fact defines a _ dependency _",
    "graph for spanning trees .",
    "it is worth emphasizing that in this scenario the condition holds ( the more general condition is not needed ) , but the scenario does not fall within the scope of the moser - tardos variable model . it does fall within the scope of our framework , but one must design a non - trivial resampling oracle .    to implement a resampling oraclein this setting , we will use as a subroutine an algorithm to generate a uniformly random spanning tree in a given graph @xmath3 .",
    "this can be done efficiently by several methods , for example by a random walk @xcite .",
    "@xmath283 : check that @xmath284 , otherwise * fail*. let @xmath285 , the vertices covered by @xmath109 .",
    "let @xmath286 , the edges of @xmath287 disjoint from @xmath87 .",
    "let @xmath288 , the edges disjoint from @xmath87 not present in @xmath287 .",
    "let @xmath289 be a multigraph obtained by deleting @xmath290 and contracting @xmath291 .",
    "generate a uniformly random spanning tree @xmath292 in @xmath293 .",
    "@xmath294 .",
    "[ lem : tree - decondition ] if @xmath109 is a fixed forest and @xmath287 is a uniformly random spanning tree in @xmath279 conditioned on @xmath284 , then @xmath295 produces a uniformly random spanning tree in @xmath279 .    first , observe that since @xmath292 is a spanning tree of @xmath296 , it is also a spanning tree of @xmath297 where @xmath291 is a forest , and therefore @xmath294 is a spanning tree of @xmath279 .",
    "we need to prove that it is a uniformly random spanning tree .",
    "first , we appeal to a known result ( * ? ? ?",
    "* lemma 6 ) stating that given a forest @xmath48 in @xmath279 with components of sizes ( number of vertices ) @xmath298 , the number of spanning trees containing @xmath48 is exactly @xmath299 equivalently ( since @xmath300 is the total number of spanning trees ) , for a uniformly random spanning tree @xmath287 , @xmath301 = \\prod_{i=1}^{m } f_i / n^{f_i-1}$ ] .",
    "this has the surprising consequence that for vertex - disjoint forests @xmath302 , we have @xmath303 = \\pr[f_1 \\subseteq t ] \\cdot \\pr[f_2 \\subseteq t]$ ] , i.e. , the containment of @xmath290 and @xmath304 are independent events .",
    "( in a general graph , the appearances of different edges in a random spanning tree are negatively correlated , but here we are in a complete graph . )    let @xmath285 and let @xmath278 be any forest on @xmath305 , i.e. , vertex - disjoint from @xmath109 . by the above , the appearance of @xmath278 in a uniformly random spanning tree is independent of the appearance of @xmath109 . hence ,",
    "if @xmath287 is uniformly random , we have @xmath306 = \\pr[b \\subseteq t]$ ] .",
    "this implies that the distribution of @xmath307 is exactly the same for a uniformly random spanning tree @xmath287 as it is for one conditioned on @xmath284 ( formally , by applying the inclusion - exclusion formula ) .",
    "therefore , the forest @xmath308 is distributed as it should be in a random spanning tree restricted to @xmath305 .",
    "the final step is that we extend @xmath291 to a spanning tree @xmath294 , where @xmath292 is a uniform spanning tree in @xmath289 .",
    "note that @xmath293 is a multigraph , i.e. ,  it is important that we preserve the multiplicity of edges after contraction .",
    "the spanning trees @xmath292 in @xmath289 are in a one - to - one correspondence with spanning trees in @xmath279 conditioned on @xmath309 .",
    "this is because each such tree @xmath292 extends @xmath291 to a different spanning tree of @xmath279 , and each spanning tree where @xmath309 can be obtained in this way .",
    "therefore , for a fixed @xmath291 , @xmath294 is a uniformly random spanning tree conditioned on @xmath309 . finally , since the distribution of @xmath291 is equal to that of a uniformly random spanning tree restricted to @xmath305 , @xmath294 is a uniformly random spanning tree .",
    "the resampling oracle@xmath295 applied to a spanning tree satisfying @xmath155 does not cause any new event @xmath156 such that @xmath277 .",
    "note that the only edges that we modify are those incident to @xmath285 .",
    "therefore , any new event @xmath156 that the operation of @xmath310 could cause must be such that @xmath278 contains an edge incident to @xmath87 and not contained in @xmath109 .",
    "such an edge shares exactly one vertex with some edge in @xmath109 and hence @xmath311 .",
    "[ sec : product - resampling ]    suppose we have a product probability space @xmath312 , where on each @xmath313 we have resampling oracles @xmath314 for events @xmath315 , with respect to a graph @xmath316 .",
    "our goal is to show that there is a natural way to combine these resampling oracles in order to handle events on @xmath0 that are obtained by taking intersections of the events @xmath317 .",
    "the following theorem formalizes this notion .",
    "[ thm : thm : product - resampling ] let @xmath318 be probability spaces , where for each @xmath313 we have resampling oracles @xmath314 for events @xmath315 with respect to a graph @xmath316 .",
    "let @xmath319 be a product space with the respective product probability measure .",
    "for any set @xmath62 of pairs @xmath320 where each @xmath321 $ ] appears at most once , define an event @xmath322 on @xmath0 to occur in a state @xmath323 iff @xmath317 occurs in @xmath324 for each @xmath325 .",
    "define a graph @xmath3 on these events by @xmath326 iff there exist pairs @xmath327 such that @xmath328 in @xmath316 .",
    "then there exist resampling oracles @xmath329 for the events @xmath322 with respect to @xmath3 , which are obtained by calling in succession each of the oracles @xmath314 for @xmath325 .    for notational simplicity ,",
    "let us assume that on each @xmath313 we have a trivial event @xmath330 and the respective resampling oracle @xmath331 is the identity on @xmath313 .",
    "then we can assume that each collection of events @xmath62 is in the form @xmath332 , where we set @xmath333 for components where there is no event to resample .",
    "we define @xmath334 we claim that these are resampling oracles with respect to @xmath3 as defined in the theorem .",
    "let us denote by @xmath335 the probability distribution on @xmath313 and by @xmath1 the product distribution on @xmath0 .",
    "for the first condition , suppose that @xmath336 . by the product structure of @xmath0 ,",
    "this is the same as having @xmath337 where the components are independent and @xmath338 for each @xmath339 , and @xmath340 for components such that @xmath341 . by the properties of the resampling oracles",
    "@xmath342 , we have @xmath343 . since the resampling oracles are applied with independent randomness for each component , we have @xmath344    for the second condition , note that if @xmath345 and @xmath346 , it must be the case that there is @xmath339 and @xmath347 such that @xmath348 and @xmath349 .",
    "however , this is possible only if @xmath350 in the graph @xmath351 . by the definition of @xmath3",
    ", this means that @xmath326 as well .    as a result",
    ", we can extend our resampling oracles to spaces like @xmath352-tuples of independent random permutations , independent random spanning trees , etc .",
    "such extensions are used in our applications .",
    "[ sec : applications ]    let us present a few applications of our framework .",
    "our application to rainbow spanning trees is new , even in the existential sense .",
    "our applications to latin transversals and rainbow matchings are also new to the best of our knowledge , although they could also have been obtained using the framework of @xcite and @xcite .",
    "given an edge - coloring of @xmath279 , a spanning tree is called rainbow if each of its edges has a distinct color . the existence of a single rainbow spanning tree is completely resolved by the matroid intersection theorem",
    ": it can be decided efficiently whether a rainbow spanning tree exists for a given edge coloring , and it can be found efficiently if it exists .",
    "however , the existence of multiple edge - disjoint rainbow spanning trees is more challenging .",
    "an attractive conjecture of brualdi and hollingsworth @xcite states that if @xmath176 is even and @xmath279 is properly edge - colored by @xmath353 colors , then the edges can be decomposed into @xmath354 rainbow spanning trees , each tree using each color exactly once . until recently",
    ", it was only known that every such edge - coloring contains @xmath355 edge - disjoint rainbow spanning trees @xcite . in a recent development",
    ", it was proved that if every color is used at most @xmath354 times ( which is true for any proper coloring ) then there exist @xmath356 edge - disjoint rainbow spanning trees @xcite .",
    "in fact this result seems to be algorithmically efficient , although this was not claimed by the authors .",
    "we prove that using our framework , we can find @xmath357 rainbow spanning trees under a slight strengthening of the coloring assumption .",
    "[ thm : rainbow - trees ] given an edge - coloring of @xmath279 such that each color appears on at most @xmath358 edges , at least @xmath358 edge - disjoint rainbow spanning trees exist and can be found in @xmath359 resampling oraclecalls with high probability .",
    "this result relies on theorem  [ thm : cluster - no - slack ] , our algorithmic version of the lll under the cluster expansion criterion . to obtain the result with high probability",
    ", we appeal to a more refined bound that we state in theorem  [ thm : cluster - with - slack ] .",
    "we note that if there is constant multiplicative slack in the assumption on color appearances , the number of resamplings improves to @xmath360 , using the result in theorem  [ thm : cluster - with - slack ] with constant @xmath57 slack .",
    "to prove the existential statement , we simply sample @xmath358 independently random spanning trees and hope that they will be ( a ) pairwise edge - disjoint , and ( b ) rainbow .",
    "this unlikely proposition happens to be true with positive probability , thanks to the lll and the independence properties of random spanning trees that we mentioned in section  [ sec : resample - trees ] .",
    "given this setup , our framework implies that we can also find the rainbow trees efficiently .",
    "we apply our algorithm in the setting of @xmath361 independent and uniformly random spanning trees @xmath362 , with the following two types of bad events :    * @xmath363 : for each @xmath364 $ ] and two edges @xmath365 in @xmath279 of the same color , @xmath363 occurs if @xmath366 ; * @xmath367 : for each @xmath368 $ ] and an edge @xmath369 in @xmath279 , @xmath367 occurs if @xmath370",
    ".    clearly , if no bad event occurs then the @xmath361 trees are rainbow and pairwise edge - disjoint .    by the probability of a bad event of the first type is @xmath371 = 3/n^2 $ ] if @xmath372 and @xmath371 = 4/n^2 $ ] if @xmath373 .",
    "the probability of a bad event of the second type is @xmath374 = ( 2/n)^2 = 4/n^2 $ ] , since each of the two trees contains @xmath369 independently with probability @xmath375 .",
    "hence , the probability of each bad event is upper - bounded by @xmath376 .",
    "in section  [ sec : resample - trees ] we constructed a resampling oracle@xmath310 for a single spanning tree . by theorem  [ thm : thm : product - resampling ] , this resampling oracleextends in a natural way to the setting of @xmath361 independent random spanning trees . in particular , for an event @xmath377 , we define @xmath378 as an application of the resampling oracle@xmath379 to the tree @xmath380 . for an event @xmath367",
    ", we define @xmath381 as an application of the resampling oracle@xmath382 independently to the trees @xmath380 and @xmath383 .",
    "it is easy to check using theorem  [ thm : thm : product - resampling ] that for independent uniformly random spanning trees conditioned on either type of event , the respective resampling oraclegenerates independent uniformly random spanning trees .",
    "let us define the following dependency graph ; we are somewhat conservative for the sake of simplicity .",
    "the graph contains the following kinds of edges :    * @xmath384 whenever @xmath385 intersects @xmath386 ; * @xmath387 whenever @xmath388 intersects @xmath385 ; * @xmath389 whenever @xmath388 intersects @xmath369 .",
    "we claim that the resampling oraclefor any bad event can cause new bad events only in its neighborhood .",
    "this follows from the fact that the resampling oracleaffect only the trees relevant to the event ( in the superscript ) , and the only edges modified are those incident to those relevant to the event ( in the subscript ) .",
    "let us now verify the cluster expansion criterion , introduced as in section  [ sec : generalizinglll ] , so that we may apply theorem  [ thm : cluster - with - slack ] .",
    "let us assume that each color appears on at most @xmath390 edges , and we generate @xmath361 random spanning trees .",
    "we claim that the neighborhood of each bad event can be partitioned into @xmath391 cliques of size @xmath392 and @xmath391 cliques of size @xmath393 .",
    "first , let us consider an event of type @xmath377 .",
    "the neighborhood of @xmath377 consists of : ( 1 ) events @xmath394 where @xmath388 or @xmath395 shares a vertex with @xmath385 ; these events form @xmath391 cliques , one for each vertex of @xmath385 , and the size of each clique is at most @xmath393 , since the number of incident edges to a vertex is @xmath353 , and the number of other edges of the same color is at most @xmath396 .",
    "( 2 ) events @xmath397 where @xmath388 intersects @xmath385 ; these events form @xmath391 cliques , one for each vertex of @xmath385 , and each clique has size at most @xmath392 , since its events can be identified with the @xmath398 edges incident to a fixed vertex and the remaining @xmath399 trees .",
    "second , let us consider an event of type @xmath400 .",
    "the neighborhood of @xmath400 consists of : ( 1 ) events @xmath394 and @xmath401 where @xmath369 intersects @xmath386 ; these events form @xmath391 cliques , one for each vertex of @xmath369 and either @xmath7 or @xmath402 in the superscript , and the size of each clique is at most @xmath393 by an argument as above .",
    "( 2 ) events @xmath403 where @xmath388 intersects @xmath369 ; these events form @xmath391 cliques , one for each vertex of @xmath369 and either @xmath404 or @xmath405 in the superscript .",
    "the size of each clique is at most @xmath392 , since the events can be identified with the @xmath398 edges incident to a vertex and the remaining @xmath399 trees .    considering the symmetry of the dependency graph",
    ", we set the variables for all events equal to @xmath406 .",
    "the cluster expansion criteria will be satisfied if we set the parameters so that @xmath407 where @xmath408 denotes either @xmath377 or @xmath367 .",
    "the second inequality holds due to the structure of the neighborhood of each event that we described above .",
    "we set @xmath409 and assume @xmath410 .",
    "the reader can verify that with the settings @xmath411 and @xmath412 , we get @xmath413 .",
    "therefore , @xmath414 which verifies the assumption of theorem  [ thm : cluster - with - slack ] .",
    "theorem  [ thm : cluster - with - slack ] implies that maximalsetresample terminates after @xmath415 resampling oraclecalls with high probability .",
    "the total number of events here is @xmath416 and for each event the respective variable is @xmath417 .",
    "therefore , the expected number of resampling oraclecalls is @xmath359 .      given an edge - coloring of @xmath245 , a perfect matching is called rainbow if each of its edges has a distinct color .",
    "this can be viewed as a non - bipartite version of the problem of latin transversals .",
    "it is known that given any _ proper _",
    "@xmath418-edge - coloring of @xmath245 ( where each color forms a perfect matching ) , there exists a rainbow perfect matching @xcite .",
    "however , finding rainbow matchings algorithmically is more difficult .",
    "achlioptas and iliopoulos @xcite showed how to find a rainbow matching in @xmath245 efficiently when each color appears on at most @xmath419 edges , @xmath420 .",
    "our result is that we can do this for @xmath421 .",
    "the improvement comes from the application of the  cluster expansion \" form of the local lemma , which is still efficient in our framework .",
    "( we note that an updated version of the achlioptas - iliopoulos framework @xcite also contains this result . )",
    "[ thm : rainbow - matching ] given an edge - coloring of @xmath245 where each color appears on at most @xmath422 edges , a rainbow perfect matching exists and can be found in @xmath360 resampling oraclecalls with high probability .",
    "in fact , we can find many disjoint rainbow matchings  up to a linear number , if we replace @xmath423 above by a smaller constant .",
    "[ thm : rainbow - matchings ] given an edge - coloring of @xmath245 where each color appears on at most @xmath424 edges , at least @xmath424 edge - disjoint rainbow perfect matchings exist and can be found in @xmath359 resampling oraclecalls whp .",
    "we postpone the proof to section  [ sec : latin ] , since it follows from our result for latin transversals .",
    "we apply our algorithm in the setting of uniformly random perfect matchings @xmath425 , with the following bad events ( identical to the setup in @xcite ) : for every pair of edges @xmath426 of the same color , @xmath427 occurs if @xmath428 .",
    "if no bad event @xmath427 occurs then @xmath253 is a rainbow matching .",
    "we also define the following dependency graph : @xmath429 unless @xmath430 are four disjoint edges .",
    "note that this is more conservative than the dependency graph we considered in section  [ sec : resample - matchings ] , where two events are only connected if they do not form a matching together .",
    "the more conservative definition will simplify our analysis . in any case , our resampling oracleis consistent with this lopsidependency graphin the sense that resampling @xmath427 can only cause new events @xmath431 such that @xmath432 .",
    "we show that this setup satisfies the criteria of the cluster expansion lemma .",
    "let @xmath433 , @xmath434 and @xmath435 .",
    "consider the neighborhood of a bad event @xmath436 .",
    "it contains all events @xmath431 such that there is some intersection among the edges @xmath430 .",
    "such events can be partitioned into @xmath391 cliques : for each vertex @xmath437 , let @xmath438 denote all the events @xmath431 such that @xmath439 and @xmath395 has the same color as @xmath388 .",
    "the number of edges @xmath388 incident to @xmath272 is @xmath440 , and for each of them , the number of other edges of the same color is by assumption at most @xmath396 .",
    "therefore , the size of @xmath438 is at most @xmath441 .    in the following ,",
    "we use the short - hand notation @xmath442 .",
    "consider the assumptions of the cluster expansion lemma : for each event @xmath427 , we should have @xmath443 \\leq \\frac{y_{ef}}{\\sum_{i \\subseteq \\gamma^+(e_{ef } ) , i \\in \\ind } y^i}.\\ ] ] we have @xmath444 = p = \\frac{1}{(2n-1)(2n-3)}$ ] . by symmetry",
    ", we set all the variables @xmath445 to the same value , @xmath446 .",
    "note that an independent subset of @xmath447 can contain at most 1 event from each clique @xmath438 .",
    "( the event @xmath427 itself is also contained in these cliques . ) therefore , @xmath448 the reader can verify that @xmath449 .",
    "therefore , @xmath450 which is the assumption of theorem  [ thm : cluster - with - slack ] . by theorem  [ thm :",
    "cluster - with - slack ] , maximalsetresample with the resampling oraclefor matchings and the dependency graph defined above will find a rainbow perfect matching in time @xmath451 with high probability .",
    "the number of bad events @xmath427 is @xmath452 , because each color class has @xmath453 edges so the number of edge pairs of equal color is @xmath452 .",
    "we have @xmath454 , and hence the total number of resamplings is @xmath360 with high probability .      a latin transversal in an @xmath455 matrix @xmath109 is a permutation @xmath456 such that the entries @xmath457 (  colors \" ) are distinct for @xmath458 . in other words , it is a set of distinct entries , exactly one in each row and one in each column .",
    "it is easy to see that this is equivalent to a bipartite version of the rainbow matching problem : @xmath459 is the color of the edge @xmath460 and we are looking for a perfect bipartite matching where no color appears twice .",
    "it is a classical application of the lovsz local lemma that if no color appears more than @xmath461 times in @xmath109 then there exists a latin transversal @xcite .",
    "an improvement of this result is that if no color appears more than @xmath462 times in @xmath109 then a latin transversal exists @xcite ; this paper introduced the  cluster expansion \" strengthening of the local lemma .",
    "( note that @xmath463 . )",
    "these results were made algorithmically efficient by the work of harris and srinivasan @xcite .    beyond finding one latin transversal , one can ask whether there exist multiple disjoint latin transversals .",
    "a remarkable existential result was proved by alon , spencer and tetali @xcite : if @xmath464 and each color appears in @xmath109 at most @xmath465 times ( @xmath466 in their proof ) , then @xmath109 can be partitioned into @xmath176 disjoint latin transversals . here",
    ", we show how to find a linear number of latin transversals algorithmically .",
    "[ thm : latin - transversals ] for any @xmath455 matrix @xmath109 where each color appears at most @xmath424 times , there exist at least @xmath424 disjoint latin transversals , and they can be found in @xmath359 resampling oraclecalls w.h.p .",
    "we note that again , if there is constant multiplicative slack in the assumption on color appearances , the number of resamplings improves to @xmath360 .",
    "this also implies theorem  [ thm : rainbow - matchings ] as a special case : for an edge - coloring of @xmath245 where no color appears more than @xmath424 times , let us label the vertices arbitrarily @xmath467 construct a matrix @xmath109 where @xmath459 is the color of the edge @xmath468 .",
    "if no color appears more than @xmath424 times , by theorem  [ thm : latin - transversals ] we can find @xmath424 latin transversals ; these correspond to rainbow matchings in @xmath245 .",
    "our approach to proving theorem  [ thm : latin - transversals ] is similar to the proof of theorem  [ thm : rainbow - trees ] : sample @xmath424 independently random permutations and hope that they will be ( a ) disjoint , and ( b ) latin . for reasons similar to theorem  [ thm : rainbow - trees ] , the local lemma works out and our framework makes this algorithmic .",
    "let @xmath469 and let @xmath470 be independently random permutations on @xmath4 $ ] .",
    "we consider the following two types of bad events :    * @xmath377 : for each @xmath364 $ ] and @xmath471 \\times [ n]$ ] such that @xmath472 , the event @xmath377 occurs if @xmath473 and @xmath474 ; * @xmath367 : for each @xmath368 $ ] and @xmath475 \\times [ n]$ ] , the event @xmath367 occurs if @xmath476 .    clearly ,",
    "if none of these events occurs then the permutations @xmath470 correspond to pairwise disjoint latin transversals .",
    "the probability of a bad event of the first type is @xmath477 = \\frac{1}{n(n-1)}$ ] and the probability for the second type is @xmath374 = \\frac{1}{n^2}$ ] .",
    "thus the probability of each bad event is at most @xmath478",
    ".    it will be convenient to think of the pairs @xmath479 \\times [ n]$ ] as edges in a bipartite complete graph . as we proved in section  [ sec : resample - permutations ] , the resampling oraclefor permutations is consistent with the following lopsidependency graphgraph .",
    "* @xmath384 whenever there is some intersection between the edges @xmath426 and @xmath480 ; * @xmath387 whenever there is some intersection between @xmath388 and @xmath426 ; * @xmath389 whenever @xmath388 intersects @xmath369 .    by lemma  [ lem : dependency ]",
    ", the resampling oraclefor a given event never causes a new event except in its neighborhood .",
    "let us now verify the cluster expansion criteria .",
    "the counting here is quite similar to the proof of theorem  [ thm : rainbow - trees ] , so we skim over some details",
    ". the neighborhood of each event @xmath377 consist of @xmath481 cliques : @xmath391 cliques of events of type @xmath394 and @xmath391 cliques of events of type @xmath367 , corresponding in each case to the 4 vertices of @xmath385 . in the first case",
    ", each clique has at most @xmath482 events , determined by selecting an incident edge and another edge of the same color . in the second case , each clique has at most @xmath483 events , determined by selecting an incident edge and another permutation .",
    "the neighborhood of each event @xmath400 also consists of @xmath481 cliques : @xmath391 cliques of events @xmath394 or @xmath401 , corresponding to the choice of either @xmath7 or @xmath402 in the superscript , and one of the two vertices of @xmath369 .",
    "the size of each clique is at most @xmath482 , determined by choosing an incident edge and another edge of the same color .",
    "then , we have @xmath391 cliques of events @xmath484 or @xmath485 , determined by switching either @xmath486 or @xmath487 in the superscript , and choosing one of the vertices of @xmath369 .",
    "the size of each clique is at most @xmath483 , determined by choosing an incident edge and a new permutation in the superscript .    as a consequence ,",
    "the cluster expansion criterion here is almost exactly the same as in the case of theorem  [ thm : rainbow - trees ] : @xmath488 we have @xmath478 here and we set @xmath489 . for @xmath490 ,",
    "it s enough to satisfy @xmath491 , which is achieved by @xmath411 and @xmath492",
    ". therefore , theorem  [ thm : cluster - with - slack ] implies that maximalsetresample will terminate within @xmath493 resampling oraclecalls with high probability .",
    "[ sec : analysis ]    here we provide the analysis of our algorithm and the proofs of our main theorems . in section  [ sec : stable - set - sequences ] , we begin with the basic notions necessary for our analysis and a coupling argument which forms the basis of all our algorithmic results . in section",
    "[ sec : lllslack ] , we prove a weaker form of theorem  [ thm : lll - tight - result ] under the assumption that the criterion holds with some slack . in section  [ sec : shearer ] , we introduce the independence polynomial of a graph and summarize its fundamental properties that are important for our analysis . in section  [ sec : shearer - slack ] , we prove that our algorithm is efficient if shearer s criterion is satisfied with an @xmath57 slack . in section",
    "[ sec : shearer - automatic - slack ] , we show that in some sense this assumption is not necessary , because every point satisfying shearer s criterion has some slack available , and we quantify how large this slack is . finally , we return to the weaker ( but more practical ) variants of the local lemma : the and criteria .",
    "we present new combinatorial connections between these criteria and shearer s criterion , which in turn imply our main results on the efficiency of our algorithm under the and criteria ( in sections [ sec : lllimpliesshearer ] and [ sec : cluster ] , respectively ) .",
    "[ sec : stable - set - sequences ]    an important notion in our analysis is that of _ stable set sequences_. we note that this concept originated in the work of kolipaka and szegedy @xcite which builds on shearer s work @xcite .",
    "there are some similarities but also differences in how this concept is applied here : most notably , our stable set sequences grow forward in time , while the stable set sequences in @xcite grow backward in time ( which is similar to the moser - tardos analysis @xcite ) .",
    "one execution of the outer repeat loop in maximalsetresampleis called an _ iteration_. for a sequence of non - empty sets @xmath494 , we say that the algorithm _ follows _",
    "@xmath495 if @xmath496 is the set resampled in iteration @xmath497 for @xmath498 , and @xmath499 is a set of the first @xmath168 events resampled in iteration @xmath361 for some @xmath500 ( a prefix of the maximal independent set constructed in iteration @xmath361 ) .",
    "recall that @xmath501 denotes the independent sets ( including the empty set ) in the graph under consideration .",
    "@xmath502 is called a _",
    "stable set sequence _ if @xmath503 and @xmath504 for each @xmath498 .",
    "we call the sequence @xmath495 _ proper _ if each independent set @xmath496 is nonempty .    note that if @xmath505 for some @xmath497 , then @xmath506 for all @xmath507",
    ". therefore , the nonempty sets always form a prefix of the stable set sequence . formally",
    ", we consider an empty sequence also a stable set sequence , of length @xmath200 .    if maximalsetresamplefollows a sequence @xmath508 , then @xmath509 is a stable set sequence .    by construction ,",
    "the set @xmath510 chosen in each iteration is independent in @xmath3 . for each @xmath511 , we execute the resampling oracle@xmath29 . recall that @xmath29 executed on a satisfied event @xmath14 can only cause new events in the neighborhood @xmath74 ( and this neighborhood is not explored again until the following iteration ) . since @xmath510 is a maximal independent set of satisfied events , all the events satisfied in the following iteration are neighbors of some event in @xmath510 , i.e. , @xmath512 . in the last iteration",
    ", this also holds for a subset of the resampled events .",
    "we use the following notation : for @xmath24 $ ] , @xmath513 $ ] . for @xmath514 $ ] , @xmath515 . for a stable",
    "set sequence @xmath516 , @xmath517 .",
    "we relate stable set sequences to executions of the algorithm by the following coupling argument .",
    "although the use of stable set sequences is inspired by @xcite , their coupling argument is different due to its backward - looking nature ( similar to @xcite ) , and their restriction to the variable model .",
    "[ lem : prod - bound ] for any proper stable set sequence @xmath518 , the probability that the maximalsetresamplealgorithm follows @xmath495 is at most @xmath519 .    given @xmath520 ,",
    "let us consider the following  @xmath495-checking \" random process .",
    "we start with a random state @xmath21 . in iteration @xmath497",
    ", we process the events of @xmath496 in the ascending order of their indices .",
    "for each @xmath521 , we check whether @xmath20 satisfies @xmath14 ; if not , we terminate . otherwise , we apply the resampling oracle@xmath29 and replace @xmath20 by @xmath522 .",
    "we continue for @xmath523 .",
    "we say that the @xmath495-checking process succeeds if every event is satisfied when checked and the process runs until the end .    by induction",
    ", the state @xmath20 after each resampling oraclecall is distributed according to @xmath1 : assuming this was true in the previous step and conditioned on @xmath14 satisfied , we have @xmath27 . by assumption , the resampling oracle@xmath29 removes this conditioning and produces again a random state @xmath28 .",
    "whenever we check event @xmath14 , it is satisfied with probability @xmath524 $ ] ( conditioned on the past ) . by a telescoping product of conditional probabilities , the probability that the @xmath495-checking process succeeds is exactly @xmath525 = \\prod_{s=1}^{t } p^{i_s } = p_\\ci$ ] .    to conclude , we argue that the probability that maximalsetresamplefollows the sequence @xmath495 is at most the probability that the @xmath495-checking process succeeds . to see this ,",
    "suppose that we couple maximalsetresampleand the @xmath495-checking process , so they use the same source of randomness .",
    "in each iteration , if maximalsetresampleincludes @xmath7 in @xmath526 , it means that @xmath14 is satisfied .",
    "both procedures apply the resampling oracle@xmath527 and by coupling the distribution in the next iteration is the same .",
    "therefore , the event that maximalsetresamplefollows the sequence @xmath495 is contained in the event that the @xmath495-checking process succeeds , which happens with probability @xmath528 .",
    "we emphasize that we do _ not _ claim that the distribution of the current state @xmath529 is @xmath1 after each resampling oraclecall performed by the maximalsetresamplealgorithm .",
    "this would mean that the algorithm is not making any progress in its search for a state avoiding all events .",
    "it is only the @xmath495-checking process that has this property .",
    "let @xmath530 denote the set of all stable set sequences and @xmath531 the set of proper stable set sequences .",
    "let us denote by @xmath532 the set of stable set sequences @xmath533 of length @xmath534 , and by @xmath535 the subset of @xmath532 such that the first set in the sequence is @xmath62 .",
    "similarly , denote by @xmath536 the set of proper stable set sequences of length @xmath534 , and by @xmath537 the subset of @xmath531 such that the first set in the sequence is @xmath62 . for @xmath538 ,",
    "let us call @xmath539 the total size of the sequence .",
    "[ lem : iteration - bound ] the probability that maximalsetresampleruns for at least @xmath534 iterations is at most @xmath540 .",
    "the probability that maximalsetresampleresamples at least @xmath497 events is at most @xmath541 .",
    "if the algorithm runs for at least @xmath534 iterations , it means that it follows some proper sequence @xmath542 . by lemma  [ lem",
    ": prod - bound ] , the probability that the algorithm follows a particular stable set sequence @xmath495 is at most @xmath528 . by the union bound ,",
    "the probability that the algorithm runs for at least @xmath534 iterations is at most @xmath543 .",
    "similarly , if the algorithm resamples at least @xmath497 events , it means that it follows some proper sequence @xmath495 of total size @xmath544 . by the union bound ,",
    "the probability of resampling at least @xmath497 events is upper - bounded by @xmath541 .",
    "we note that these bounds could be larger than @xmath545 and thus vacuous .",
    "the events that  the algorithm follows @xmath546 \" are disjoint for different sequences of fixed total size @xmath547 , while they could overlap for a fixed length @xmath534 ( because we can take @xmath548 to be different prefixes of the sequence of events resampled in iteration @xmath361 ) . in any case",
    ", the upper bound of @xmath528 on each of the events could be quite loose .",
    "[ lem : overkill - runtime ] the expected number of events resampled by maximalsetresampleis at most @xmath549 .    by a standard argument , @xmath550 = \\sum_{s=1}^{\\infty } \\pr[\\mbox{at least } s\\mbox { events are resampled}].\\ ] ] by lemma  [ lem : iteration - bound ] , this is upper - bounded by @xmath551      [ sec : lllslack ]    in this section we will analyze the algorithm under the assumption that the criterion holds with some `` slack '' .",
    "this idea of exploiting slack has appeared in previous work , e.g. , @xcite .",
    "this analysis proves only a weaker form of theorem  [ thm : lll - tight - result ] .",
    "the full proof , which removes the assumption of slack , appears in section  [ sec : lllimpliesshearer ] .",
    "to begin , let us prove the following ( crude ) bound on the expected number of iterations .",
    "we note that this bound is typically exponentially large .",
    "[ lem : crude - bound ] provided that the @xmath552 satisfy the criterion , @xmath553 , we have @xmath554    it will be convenient to work with sequences of fixed length , where we pad by empty sets if necessary .",
    "note that by definition this does not change the value of @xmath528 : e.g. , @xmath555 . recall that @xmath535 denotes the set of all stable set sequences of length @xmath534 where the first set is @xmath62 .",
    "we show the following statement by induction on @xmath534 : for any @xmath556 and any @xmath557 , @xmath558    this is true for @xmath559 , since @xmath560 by the lll assumption .",
    "let us consider the expression for @xmath561 .",
    "we have @xmath562 by the inductive hypothesis .",
    "this can be simplified using the following identity : @xmath563 we use this with @xmath564 .",
    "therefore , @xmath565 now we use the lll assumption : @xmath566 because each element of @xmath567 appears in @xmath65 for at least one @xmath568 .",
    "we conclude that @xmath569 this proves ( [ eq : stab - induction ] ) .    adding up over all sets",
    "@xmath52 $ ] , we again use to obtain @xmath570 } \\prod_{j \\in j } \\frac{x_j}{1-x_j }   ~=~ \\prod_{i=1}^{n } \\left ( 1 + \\frac{x_i}{1-x_i } \\right )   ~=~ \\prod_{i=1}^{n } \\frac{1}{1-x_i}.\\ ] ] as we argued above , this can be written equivalently as @xmath571 since this is true for every @xmath534 , and the left - hand - side is non - increasing in @xmath534 , the sequence as @xmath572 has a limit and the bound still holds in the limit .",
    "the following is our first concrete result : our algorithm is efficient if is satisfied with a slack .",
    "[ thm : gll - with - slack ] if is satisfied with a slack of @xmath57 , i.e. @xmath573 ~\\leq~ ( 1-\\epsilon ) x_i \\prod_{j \\in \\gamma(i ) } ( 1-x_j)\\ ] ] then with probability @xmath574 maximalsetresampleresamples at most @xmath575 events .    by lemma  [ lem : iteration - bound ] ,",
    "the probability that maximalsetresampleresamples more than @xmath497 events is at most @xmath576 where @xmath528 is the product of @xmath513 $ ] over all events in the sequence @xmath495 . by the slack assumption",
    ", we have @xmath577 and @xmath578 , where @xmath579 . using lemma  [",
    "lem : crude - bound ] , we obtain @xmath580 for @xmath581 , we obtain @xmath582 therefore , the probability of resampling more than @xmath497 events is at most @xmath583 .",
    "[ sec : shearer ]    in this section we discuss a strong version of the local lemma due to shearer @xcite .",
    "shearer s lemma is based on certain forms of the multivariate independence polynomial .",
    "we recall that @xmath584 denotes @xmath585 .",
    "given a graph @xmath3 and values @xmath586 , define for each @xmath514 $ ] @xmath587    note that @xmath588 for @xmath589 .",
    "an alternative form of these polynomials that is also useful is obtained by summing over subsets of @xmath590 .    given a graph @xmath3 and values @xmath586 ,",
    "define @xmath591    the following set plays a fundamental role .",
    "[ def : shearer - region ] given a graph @xmath3 , the _ shearer region _ is the semialgebraic set    @xmath592 , \\ : { \\breve{q}}_s(p ) > 0   \\;\\right\\}}\\end{aligned}\\ ] ]    the equivalence between and is proven below in claim  [ clm : srequiv ] .",
    "shearer s lemma can be stated as follows .",
    "[ lem : shearer - lemma ] let @xmath3 be a lopsidependency graph for the events @xmath2 .",
    "let @xmath513 \\in ( 0,1)$ ] .",
    "if @xmath593 then @xmath13 \\geq q_\\emptyset$ ] .",
    "it is known that shearer s lemma implies theorem  [ thm : lll ] , as we will see in section  [ sec : lllimpliesshearer ] , and in fact gives the tight criterion under which all events can be avoided for a given dependency graph @xmath3 .",
    "the polynomials @xmath594 and @xmath595 have a natural interpretation in the shearer region : there is a  tight instance \" where @xmath594 is the probability that the set of occurring events is exactly @xmath590 , and @xmath595 is the probability that none of the events in @xmath590 occur .",
    "in particular , @xmath596}(p)$ ] is exactly the probability that no event occurs .",
    "( see @xcite for more details . )      in this section we summarize some of the important properties of these polynomials , most of which may be found in earlier work .",
    "since some of the proofs are not easy to recover due to different notation and/or their analytic nature ( in case of @xcite ) , we provide short combinatorial proofs for completeness .",
    "[ clm : breve1 ] for any @xmath597 , we have @xmath598    every independent set @xmath599 either contains @xmath600 or does not .",
    "in addition , if @xmath601 then @xmath602 is independent iff @xmath603 is an independent subset of @xmath604 .",
    "[ clm : breve2 ] for every @xmath514 $ ] , @xmath605 \\setminus s } q_y.\\ ] ]    by definition of @xmath606 , @xmath607 \\setminus s } q_y   ~=~ \\sum_{y \\subseteq [ n ] \\setminus s } { \\sum_{\\substack{i \\in \\ind \\\\ y \\subseteq i } } } ( -1)^{|i \\setminus y| } p^i   ~=~ \\sum_{i \\in \\ind } p^i \\sum_{y",
    "\\subseteq i \\setminus s } ( -1)^{|i \\setminus y|}.\\ ] ] if @xmath608 then the last alternating sum is zero . therefore , the sum simplifies to @xmath609 as required .",
    "[ clm : q - sum ] @xmath610 } q_s ~=~ 1.\\ ] ]    set @xmath611 in claim  [ clm : breve2 ] and use the fact that @xmath612 .",
    "[ clm : breve3 ] for @xmath613 , @xmath614 \\setminus \\gamma^+(i)}.\\ ] ]    given @xmath613 , each independent set @xmath615 can be written uniquely as @xmath616 where @xmath617 is independent and @xmath618 .",
    "so , @xmath619 \\setminus \\gamma^+(i ) } } } ( -1)^{{\\lvert k \\rvert } } p^k      ~=~ p^i \\cdot { \\breve{q}}_{[n ] \\setminus \\gamma^+(i)}.\\ ] ]    [ lem : q - expansion ] for any @xmath613 @xmath620    by claim  [ clm : breve3 ] and claim  [ clm : breve2 ] , we have @xmath621 \\setminus \\gamma^+(i ) }      ~=~ p^i \\sum_{s \\subseteq \\gamma^+(i ) } q_s , $ ] as required .",
    "[ clm : qandqdown ] assume that @xmath622^n$ ] .",
    "then @xmath623 \\\\ { \\label{eq : downimpliesup } } { \\breve{q}}_s \\geq 0 ~~\\forall s \\subseteq [ n ] & \\qquad\\implies\\qquad q_i \\geq p^{[n ] } \\cdot { \\breve{q}}_{[n ] } ~~\\forall i \\in \\ind.\\end{aligned}\\ ] ]    follows from claim  [ clm : breve2 ] ( since @xmath624 for @xmath625 ) . to see , first note that @xmath626 for all @xmath613 , by claim  [ clm : breve3 ] .",
    "consequently , by claim  [ clm : breve2 ] , @xmath627 } = \\min_s \\ , { \\breve{q}}_s$ ] . clearly , @xmath628 } = \\min_i \\ , p^i$ ] .",
    "it follows from claim  [ clm : breve3 ] again that @xmath629 \\setminus \\gamma^+(i ) } \\geq p^{[n ] } \\cdot { \\breve{q}}_{[n]}$ ] .",
    "[ clm : srequiv ] the two characterizations of the shearer region , and , are equivalent .    by claim  [ clm : qandqdown ] , if @xmath630 and @xmath631 $ ] , then @xmath632 for all @xmath514 $ ] .",
    "conversely , if @xmath632 for all @xmath514 $ ] , then @xmath633 } { \\breve{q}}_{[n ] } > 0 $ ] for all @xmath613 .",
    "[ clm : brevemonotone ] let @xmath622^n$ ] .",
    "@xmath634 \\qquad\\implies\\qquad { \\breve{q}}_s(p ' ) \\geq { \\breve{q}}_s(p ) \\quad\\forall 0 \\leq p ' \\leq p , \\ :",
    "\\forall s \\subseteq [ n].\\ ] ]    first consider the case that @xmath175 and @xmath635 differ only in coordinate @xmath7 .",
    "for any @xmath514 $ ] , claim  [ clm : breve1 ] implies that @xmath636 and @xmath637 .",
    "thus , @xmath638 the case that @xmath635 and @xmath175 differ in multiple coordinates is handled by induction .",
    "[ clm : breve - submodular ] for any @xmath593 and @xmath639 $ ] , we have @xmath640 .",
    "we claim that for any @xmath641 , we have @xmath642 by induction , this implies that for any @xmath643 , @xmath644 .",
    "we obtain the claim above by setting @xmath645 , @xmath646 , and @xmath647 .",
    "we prove again by induction , on @xmath648 .",
    "for @xmath649 , the statement is trivial .",
    "let @xmath650 . by claim  [ clm : breve1 ] ,",
    "we have @xmath651 and @xmath652 let us denote @xmath653 .",
    "we apply to strict subsets of @xmath590 and @xmath287 , to obtain @xmath654 where in the last step we used the monotonicity of @xmath655 in @xmath287 ( again from claim  [ clm : breve1 ] ) .",
    "this implies : @xmath656    [ clm : submodular ] for any @xmath593 and @xmath639 $ ] , we have @xmath657 .    we can assume @xmath658 ; otherwise the right - hand side is zero . by claim  [ clm : breve3 ]",
    ", we have @xmath659 \\setminus \\gamma^+(a ) }   \\cdot p^{b } { \\breve{q}}_{[n ] \\setminus \\gamma^+(b)}.\\ ] ] by claim  [ clm : breve - submodular ] , @xmath660 \\setminus \\gamma^+(a ) } \\cdot { \\breve{q}}_{[n ] \\setminus \\gamma^+(b ) }    ~\\geq~ { \\breve{q}}_{[n ] \\setminus ( \\gamma^+(a ) \\cup \\gamma^+(b ) ) } \\cdot { \\breve{q}}_{[n ] \\setminus   ( \\gamma^+(a ) \\cap \\gamma^+(b))}.\\ ] ] here we use the fact that @xmath661 , and @xmath662",
    ". therefore , by the monotonicity of @xmath663 , @xmath660 \\setminus \\gamma^+(a ) } \\cdot { \\breve{q}}_{[n ] \\setminus \\gamma^+(b ) }    ~\\geq~ { \\breve{q}}_{[n ] \\setminus \\gamma^+(a \\cup b ) }     \\cdot { \\breve{q}}_{[n ] \\setminus \\gamma^+(a \\cap b)}.\\ ] ] also , @xmath664 . using claim  [ clm : breve3 ] one more time , we obtain @xmath665 \\setminus \\gamma^+(a \\cup b ) }   \\cdot p^{a \\cap b } { \\breve{q}}_{[n ]",
    "\\setminus \\gamma^+(a \\cap b ) }   ~=~ q_{a \\cup b } \\cdot q_{a \\cap b}.\\ ] ]    [ clm : sumqj ] suppose that @xmath593 .",
    "for any set @xmath514 $ ] , @xmath666    the proof is by induction on @xmath590 , the case @xmath667 being trivial .",
    "fix any @xmath668 .",
    "claim  [ clm : submodular ] implies that @xmath669 for any @xmath670 . summing over @xmath62 yields @xmath671 adding @xmath672 to both sides yields @xmath673 the claim follows by induction .    [ clm : qsingleton ] if @xmath630 then @xmath674 \\setminus \\{i\\}}}{{\\breve{q}}_{[n ] } } - 1 $ ] .    by claim  [ clm : breve2 ] , @xmath675 \\setminus \\{i\\}}}{{\\breve{q}}_{[n]}}.\\ ] ]    [ clm : shearerslack ] if @xmath676 then @xmath677 for each @xmath24 $ ] .",
    "note that @xmath627 \\setminus \\{i\\}}(p)$ ] does not depend on @xmath552 , while @xmath627}(p)$ ] is linear in @xmath552 .",
    "also , both quantities are equal at @xmath678 : we have @xmath627}(p_1,\\ldots , 0 \\cdot p_i , \\ldots , p_n ) = { \\breve{q}}_{[n ] \\setminus \\{i\\}}(p)$ ] .",
    "since @xmath676 , we know that @xmath627}(p_1,\\ldots , ( 1+\\epsilon ) p_i , \\ldots , p_n ) \\geq 0 $ ] . by linearity , @xmath627}(p ) \\geq \\frac{\\epsilon}{1+\\epsilon } { \\breve{q}}_{[n ] \\setminus \\{i\\}}(p)$ ] .",
    "claim  [ clm : qsingleton ] then implies that @xmath677 .",
    "kolipaka and szegedy showed that stable set sequences relate to the independence polynomials @xmath679 .",
    "the following is the crucial upper - bound for stable set sequences when shearer s criterion holds .",
    "in fact , this result is subsumed by lemma  [ lem : shearer - sum - equality ] but we present the upper bound first , with a shorter proof .    [",
    "lem : shearer - sum - bound ] if @xmath680 for all @xmath514 $ ] and @xmath630 , then @xmath681    we proceed by induction : for @xmath559 , there is only one such stable set sequence @xmath682 . by lemma  [ lem : q - expansion ]",
    ", we have @xmath683 .",
    "( recall that @xmath680 for all @xmath514 $ ] . ) hence , @xmath684 .",
    "the inductive step : every stable set sequence starting with @xmath62 has the form @xmath685 where @xmath686 .",
    "therefore , @xmath687 by the inductive hypothesis , @xmath688 .",
    "also , recall that @xmath689 if @xmath690 . therefore , @xmath691 using lemma  [ lem : q - expansion ] to obtain the last equality .",
    "the inequality in lemma  [ lem : shearer - sum - bound ] actually becomes an equality as @xmath572 , as shown in lemma  [ lem : shearer - sum - equality ] .",
    "this stronger result is used only tangentially in section  [ sec : cllsss ] , but we provide a detailed proof in order to clarify the arguments of kolipaka and szegedy @xcite .",
    "[ lem : shearer - sum - equality ] for a dependency graph @xmath3 and @xmath692 , the following statements are equivalent :    1 .",
    "@xmath630 and @xmath680 for all @xmath514 $ ] .",
    "2 .   for all @xmath556 , @xmath693 and @xmath694 .",
    "@xmath695 is finite for each @xmath556 .",
    "first , note that @xmath696 , and @xmath697 can be identified with @xmath535 , since each proper sequence @xmath495 of length at most @xmath534 can be padded with empty sets to obtain a sequence in @xmath535 ( and @xmath528 does not change ) .",
    "therefore , @xmath698 .",
    "this is a non - decreasing sequence ; the limit exists but could be infinite .",
    "let us denote @xmath699 and @xmath700 .",
    "let us define @xmath253 to be the following linear operator on @xmath701 : @xmath702 using this notation , the identity can written compactly as @xmath703 .",
    "inductively , @xmath704 , and @xmath705 .",
    "@xmath706 : assume now that @xmath680 for all @xmath514 $ ] and @xmath630 .",
    "lemma  [ lem : shearer - sum - bound ] proves that this implies @xmath707 .",
    "clearly @xmath708 , so this also implies that @xmath693 for all @xmath556 .",
    "note that @xmath709 is the column of @xmath253 corresponding to @xmath710 : @xmath711 for each @xmath613 .",
    "therefore , we can write @xmath712 , where @xmath713 is the canonical basis vector in @xmath701 corresponding to @xmath714 .",
    "we have @xmath715 .",
    "we may subtract these two limits since we have shown that every @xmath716 is finite , obtaining @xmath717 .",
    "we note that @xmath718 has strictly positive coordinates for @xmath719 , and @xmath200 for @xmath720 .    by lemma  [ lem : q - expansion ]",
    ", we have @xmath721 for the vector @xmath722 with coordinates @xmath723 .",
    "consider @xmath724 , a nonnegative vector with @xmath200 in the coordinate corresponding to @xmath714 .",
    "we can choose @xmath725 large enough so that coordinate - wise , @xmath726 .",
    "from this we derive that @xmath727 so equality holds throughout . recalling the definition of @xmath716",
    ", we conclude that @xmath728 .",
    "@xmath729 : trivial .",
    "@xmath730 : let @xmath731 be the vector @xmath732 .",
    "we can assume that @xmath733 , otherwise we are done by claim  [ clm : qandqdown ] .",
    "let us consider the values of @xmath663 on the line @xmath734",
    "\\;\\right\\}}$ ] .",
    "define @xmath735 : \\min_s { \\breve{q}}_s(\\lambda p ) \\leq 0 \\}$ ] .",
    "we observe that @xmath736 for @xmath737 , which can be verified directly by considering the alternating sum defining @xmath663 .",
    "( intuitively , shearer s lemma holds in this region just by the union bound . )",
    "therefore , we have @xmath738 .",
    "furthermore continuity also implies @xmath739 , so claim  [ clm : qandqdown ] yields @xmath740}(\\lambda^ * p ) = 0 $ ] .",
    "for @xmath741 we have @xmath736 , so by claim  [ clm : qandqdown ] we also have @xmath742 .",
    "this shows that the condition @xmath743 holds at the point @xmath744 , for @xmath741 , so we may use the implication @xmath706 : @xmath745 .",
    "let @xmath556 be such that @xmath746 ; such a @xmath62 must exist by claim  [ clm : q - sum ] . by the monotonicity of @xmath747 in the variables @xmath586",
    ", we have @xmath748 as @xmath746 but @xmath749 .",
    "this contradicts the assumption * 3 * that @xmath695 is finite .    from claim  [ clm : q - sum ] , we obtain immediately the following .",
    "[ cor : shearer - bound ] if @xmath680 for all @xmath514 $ ] and @xmath630 , @xmath750    * remark . * an equivalent statement using the language of `` traces '' appears in the recent manuscript of knuth ( * ? ? ?",
    "* page 86 , theorem f ) , together with a short proof using generating functions .",
    "furthermore , using claim  [ clm : breve2 ] , we may derive @xmath751 \\setminus a}}{{\\breve{q}}_{[n]}},\\ ] ] for any @xmath752 $ ] .",
    "this statement , in the language of traces , also appears in knuth s draft ( * ? ? ?",
    "* page 87 , equation ( 144 ) ) .",
    "[ [ summary - at - this - point . ] ] summary at this point .",
    "+ + + + + + + + + + + + + + + + + + + + + +    by lemma  [ lem : iteration - bound ] and corollary  [ cor : shearer - bound ] , maximalsetresampleproduces a state in @xmath33 after at most @xmath753 iterations in expectation .",
    "however , this should not be viewed as a statement of efficiency .",
    "shearer s lemma proves that @xmath754 \\geq q_\\emptyset$ ] so , in expectation , @xmath755 independent samples from @xmath1 would also suffice to find a state in @xmath33 .",
    "section  [ sec : shearerslack ] improves this analysis by assuming that shearer s criterion holds with some slack , analogous to the result in section  [ sec : lllslack ] .",
    "section  [ sec : shearer - automatic - slack ] then removes the need for that assumption  it argues that shearer s criterion always holds with some slack , and provides quantitative bounds on that slack .",
    "[ sec : shearerslack ] [ sec : shearer - slack ]    in this section we consider scenarios in which shearer s criterion holds with a certain amount of slack . to make this formal",
    ", we will consider another vector @xmath635 of probabilities with @xmath756 .",
    "for notational convenience , we will let @xmath757 denote the value @xmath758 and let @xmath679 denote @xmath594 as before .",
    "let us assume that shearer s criterion holds with some slack in the following natural sense .",
    "[ def : shearerslack ] we say that @xmath731 satisfies shearer s criterion with coefficients @xmath757 at a slack of @xmath57 , if @xmath759 is still in the shearer region @xmath760 and @xmath761 .",
    "[ thm : shearer - slack ] recall that @xmath513 $ ] .",
    "if the @xmath552 satisfy shearer s criterion with coefficient @xmath762 at a slack of @xmath763 , then the probability that maximalsetresampleresamples more than @xmath764 events is at most @xmath583 .    by lemma  [ lem : iteration - bound ] ,",
    "the probability that maximalsetresampleresamples more than @xmath497 events is at most @xmath765 . by the slack assumption",
    ", we have @xmath766   ~\\leq~ { \\sum_{\\substack{\\ci \\in \\prop \\\\ \\sigma(\\ci)=\\lceil s \\rceil } } } p_\\ci   ~\\leq~ ( 1+\\epsilon)^{-s } { \\sum_{\\substack{\\ci \\in \\prop \\\\ \\sigma(\\ci)=",
    "\\lceil s \\rceil } } } p'_\\ci\\ ] ] since we have @xmath767 for each event appearing in a sequence @xmath495 .",
    "the hypothesis is that the probabilities @xmath768 satisfy shearer s criterion with a bound of @xmath762 .",
    "consequently , corollary  [ cor : shearer - bound ] implies that @xmath769 .",
    "thus , for @xmath770 we obtain @xmath766 ~\\leq~ ( 1+\\epsilon)^{-s } \\frac{1}{q'_\\emptyset } ~\\leq~ e^{-s \\epsilon/2 } \\frac{1}{q'_\\emptyset } ~\\leq~ e^{-(\\ln ( { 1}/{q'_\\emptyset } ) + t ) } \\frac{1}{q'_\\emptyset } ~=~ e^{-t}.\\ ] ]    in other words , the probability that maximalsetresamplerequires more than @xmath771 resamplings decays exponentially fast ; in particular the expected number of resampled events is @xmath772 .",
    "this appears significantly better than the trivial bound of @xmath755 ; still , it is not clear whether this bound can be considered  polynomial \" . in the following ,",
    "we show that this leads in fact to efficient bounds , comparable to the best known bounds in the variable model .    [ cor : shearer - no - q0 ] if the @xmath552 satisfy shearer s criterion with coefficients @xmath757 at a slack of @xmath763 , then the probability that maximalsetresampleresamples more than @xmath773 events is at most @xmath583 .    by claim  [ clm : q - sum ] and",
    "claim  [ clm : sumqj ] , we have @xmath774 } \\frac{q'_j}{q'_\\emptyset }    ~\\leq~ \\sum_{j=1}^{n } \\ln \\big ( 1 + \\frac{q'_{{\\left \\ { j \\right \\}}}}{q'_\\emptyset } \\big).\\end{aligned}\\ ] ] the result follows from theorem  [ thm : shearer - slack ] .",
    "next , we provide a simplified bound that depends only on the amount of slack and the number of events .",
    "this is analogous to a bound of @xmath775 given by kolipaka - szegedy @xcite in the variable model .",
    "[ thm : shearer - slack - simple ] if @xmath586 satisfy shearer s criterion at a slack of @xmath763 , then the expected number of events resampled by maximalsetresampleis @xmath58 .",
    "let @xmath776 . by assumption ,",
    ". therefore , @xmath635 still has @xmath778 slack so by claim  [ clm : shearerslack ] , the coefficients @xmath761 satisfy @xmath779 .",
    "the point @xmath175 satisfies shearer s criterion with coefficients @xmath757 at a slack of @xmath780 , so by corollary  [ cor : shearer - no - q0 ] , the probability that we resample more than @xmath781 events is at most @xmath583 . in expectation , we resample @xmath58 events as claimed .      [",
    "sec : shearer - automatic - slack ]    in the previous section , we proved a bound on the number of resamplings in the maximalsetresamplealgorithm , provided that shearer s criterion is satisfied with a certain slack .",
    "in fact , from definition  [ def : shearer - region ] one can observe that the shearer region is an _",
    "open set _ and therefore there is always a certain amount of slack .",
    "however , how large a slack we can assume is not a priori clear . in particular , one can compare with kolipaka - szegedy @xcite where a bound is proved on the expected number of events one has to resample in the variable model : if shearer s criterion is satisfied with coefficients @xmath679 , then the expected number of resamplings is at most @xmath782 @xcite . in this section ,",
    "we prove that anywhere in the shearer region , there is an amount of slack _ inversely proportional to this quantity _ , which leads to a bound similar to that of kolipaka and szegedy @xcite .",
    "[ lem : shearer - automatic - slack ] let @xmath783 be a point in the shearer region .",
    "let @xmath784 and @xmath767 .",
    "then @xmath785 is also in the shearer region , and @xmath786 .    before proving the lemma ,",
    "let us consider the partial derivatives of the @xmath663 polynomials .",
    "[ clm : breve - diff ] for any @xmath787 , @xmath788 and for any @xmath789 , @xmath790 for other choices of @xmath791 , the partial derivatives are @xmath200 . in particular , for any point in the shearer region , @xmath792 and @xmath793 .    due to claim  [ clm : breve - diff ]",
    ", we may say that @xmath794 is  continuous supermodular \" in the shearer region .    for any @xmath787",
    ", we have @xmath795 by claim  [ clm : breve1 ] .",
    "the polynomials @xmath796 and @xmath797 do not depend on @xmath552 and hence @xmath798 is equal to @xmath799 . repeating this argument one more time for @xmath789",
    ", we get @xmath800 .",
    "again , @xmath801 and @xmath802 do not depend on @xmath803 and hence @xmath804 .",
    "clearly , we have @xmath805 unless @xmath787 , and @xmath806 unless @xmath787 and @xmath789 .",
    "since all the coefficients @xmath663 are positive in the shearer region , we have @xmath792 and @xmath793 for all @xmath791 .",
    "now we can prove lemma  [ lem : shearer - automatic - slack ] .",
    "consider the line segment from @xmath807 to @xmath808 where @xmath809 , @xmath810 .",
    "note that @xmath811 \\setminus \\{i\\}}}{p_i { \\breve{q}}_{[n ] \\setminus \\gamma^+(i ) } } p_i \\leq 1 $ ] by claim  [ clm : breve2 ] , claim  [ clm : breve3 ] and claim  [ clm : brevemonotone ] .",
    "let us define @xmath812 by the chain rule and claim  [ clm : breve - diff ] , we have @xmath813 \\setminus \\gamma^+(i ) } ~=~ -\\sum_{i=1}^{n } q_{\\{i\\}}\\ ] ] where we used claim  [ clm : breve3 ] in the last equality .",
    "assuming that @xmath814 is in the shearer region , we also have by claim  [ clm : breve - diff ] @xmath815 that is , @xmath816 is a convex function for @xmath817 as long as @xmath818 is in the shearer region .",
    "our goal is to prove that this indeed happens for @xmath819 $ ] .",
    "assume for the sake of contradiction that @xmath818 is not in the shearer region for some @xmath819 $ ] , and let @xmath820 be the minimum such value ( which exists since the complement of the shearer region is closed ) . by claim  [ clm : qandqdown ] , anywhere in the shearer region , @xmath821}$ ] is the minimum of the @xmath663 coefficients ; hence by continuity it must be the case that @xmath627}((1+\\lambda^*)p)$ ] is the minimum coefficient among @xmath822 for all @xmath514 $ ] , and @xmath823}((1+\\lambda^*)p ) \\leq 0 $ ] .",
    "on the other hand , by the minimality of @xmath820 , @xmath816 is positive and convex on @xmath824 and therefore @xmath825 which is a contradiction .",
    "therefore , @xmath816 is positive and convex for all @xmath826 $ ] . by the same computation as above , @xmath827 .",
    "this implies our main algorithmic result under shearer s criterion .",
    "[ thm : shearer - no - slack ] let @xmath2 be events and let @xmath513 $ ] .",
    "suppose that the three subroutines described in section  [ sec : algass ] exist .",
    "if @xmath593 then the probability that maximalsetresampleresamples more than @xmath828 events is at most @xmath583 .",
    "we note that the corresponding result in the variable model @xcite was that the expected number of resamplings is at most @xmath829 . here",
    ", we obtain a bound which is at most quadratic in this quantity .",
    "directly from theorem  [ thm : shearer - slack ] and lemma  [ lem : shearer - automatic - slack ] : given @xmath175 in the shearer region , lemma  [ lem : shearer - automatic - slack ] implies that @xmath175 in fact satisfies shearer s criterion with a bound of @xmath830 at a slack of @xmath831 . by theorem  [ thm : shearer - slack ] , the probability that maximalsetresampleresamples more than @xmath497 events is at most @xmath583 , where @xmath832 using claim  [ clm : sumqj ] , we can replace @xmath833 by @xmath834 .",
    "[ sec : lllimpliesshearer ]    shearer s lemma ( lemma  [ lem : shearer - lemma ] ) is a strengthening of the original lovsz local lemma ( theorem  [ thm : lll ] ) : if @xmath586 satisfy then they must also satisfy shearer s criterion @xmath593 .",
    "nevertheless , there does not seem to be a direct proof of this fact in the literature .",
    "shearer @xcite indirectly proves this fact by showing that , when @xmath835 it is possible that @xmath836 = 0 $ ] , so the contrapositive of theorem  [ thm : lll ] implies that can not hold .",
    "scott and sokal prove this fact using analytic properties of the partition function ( * ? ? ?",
    "* corollary 5.3 ) . in this section",
    "we establish this fact by an elementary , self - contained proof .",
    "we then establish theorem  [ thm : lll - tight - result ] , our algorithmic form of theorem  [ thm : lll ] in the general framework of resampling oracles . unlike the simpler analysis of section  [ sec : lllslack ]",
    ", the analysis of this section does not assume any slack in the criterion .",
    "[ lem : gllimpliesshearer ] suppose that @xmath175 satisfies .",
    "then , for every @xmath514 $ ] and @xmath597 , we have @xmath837    [ cor : shearer->lovasz ] if @xmath175 satisfies then @xmath593 .    for any @xmath514 $ ] ,",
    "write it as @xmath838 .",
    "induction yields @xmath839 the claim follows since @xmath840 .",
    "[ cor : qandx ] if @xmath175 satisfies then @xmath841 .",
    "lemma  [ lem : gllimpliesshearer ] yields @xmath842 - a}}{{\\breve{q}}_{[n ] } } \\leq \\frac{1}{1-x_a}$ ] , so the result follows from claim  [ clm : shearerslack ] .",
    "lemma  [ lem : gllimpliesshearer ] we proceed by induction on @xmath843 .",
    "the base case , @xmath611 , is trivial : there is no @xmath597 to choose .",
    "consider @xmath844 and an element @xmath597 . by claim  [ clm : breve1 ]",
    ", we have @xmath845 . by the inductive hypothesis applied iteratively to the elements of @xmath846",
    ", we have @xmath847 therefore , we can write @xmath848 by the claim s hypothesis , @xmath849 , so we conclude that @xmath850 .    these results , together with our analysis of shearer s criterion with slack ( corollary  [ cor : shearer - no - q0 ] ) ,",
    "immediately provide an analysis under the assumption that holds with slack , similar to theorem  [ thm : gll - with - slack ] .",
    "however , this connection to shearer s criterion allows us to prove more .",
    "we show that our algorithm is in fact efficient even when the criterion is tight . this might be surprising in light of corollary  [ cor : shearer - bound ] , which does not use any slack and gives an exponential bound of @xmath851 } } \\leq \\prod_{i=1}^{n } \\frac{1}{1-x_i}$ ] .",
    "the reason why we can prove a stronger bound is that shearer s criterion is _ never tight _ : as we argued already , it defines an open set , and section  [ sec : shearer - automatic - slack ] derives a quantitative bound on the slack that is always available under shearer s criterion .",
    "[ lem : lll - boost ] let @xmath692 satisfy .",
    "let @xmath852 and @xmath767 .",
    "then @xmath785 is in the shearer region , and @xmath853    in particular , this lemma implies that increasing the probabilities by a factor of @xmath854 does not damage the conclusion of the lovsz local lemma ; all events can be avoided , and in fact shearer s lower bound @xmath855 deteriorates at most by a factor of @xmath355 . the expression",
    "@xmath856 looks familiar  this is the running time of the moser - tardos algorithm @xcite .",
    "what we prove here is that probabilities satisfying the lll criteria always have a slack proportional to the inverse of this quantity .",
    "consider the line segment from @xmath732 to @xmath785 where @xmath767 .",
    "note that @xmath857 by the lll criterion .",
    "let us define @xmath858 as long as @xmath859 for all @xmath514 $ ] , we are in the shearer region and by claim  [ cl : breve - diff ] , we have @xmath860 i.e. , @xmath861 is a convex function .    by claim  [ cl : breve - diff ] and",
    "claim  [ clm : breve4 ] , for any @xmath787 we have @xmath862 therefore , @xmath863 since @xmath864 , this implies @xmath865 as we argued the function @xmath861 is convex as long as @xmath859 for all @xmath514 $ ] .",
    "let us suppose that this is the case in some interval @xmath866 $ ] .",
    "( we know certainly that this is true for @xmath867 , by lemma  [ lem : shearer->lovasz ] . )",
    "then we have @xmath868 using our choice of @xmath869 .",
    "this proves in fact that @xmath859 for all @xmath514 $ ] and @xmath819 $ ] : suppose not and take @xmath870 $ ] to be the supremum of @xmath817 such that @xmath859 for all @xmath514 $ ] . by the arguments above , @xmath871 .",
    "however , for any @xmath872 we have @xmath873 which contradicts the continuity of @xmath874 .",
    "therefore , we can conclude that @xmath875 .",
    "in particular , @xmath876}(\\epsilon ) \\geq \\frac12 \\breve{q}_{[n]}(0 ) \\geq \\frac12 \\prod_{i=1}^{n } ( 1-x_i)\\ ] ] where we used claim  [ clm : breve2 ] and lemma  [ lem : shearer->lovasz ] in the last step .",
    "[ thm : lovasz - no - slack ] let @xmath2 be events and let @xmath513 $ ] .",
    "suppose that the three subroutines described in section  [ sec : algass ] exist .",
    "if @xmath175 satisfies then the probability that maximalsetresampleresamples more than @xmath877 events is at most @xmath583 .",
    "if is satisfied with a slack of @xmath763 , i.e. , @xmath878 , then with probability at least @xmath574 , maximalsetresampleresamples no more than @xmath879 events .",
    "the first part follows directly from theorem  [ thm : shearer - no - slack ] , since corollary  [ cor : shearer->lovasz ] shows that @xmath593 and corollary  [ cor : qandx ] shows that @xmath880 .",
    "the second part follows from corollary  [ cor : shearer - no - q0 ] , using again that @xmath880 .",
    "theorem  [ thm : lll - tight - result ] follows immediately from theorem  [ thm : lovasz - no - slack ] .",
    "[ sec : clusanal ] [ sec : cluster ]    recall that section  [ sec : generalizinglll ] introduced the cluster expansion criterion , which often gives improved quantitative bounds compared to the general lll ( such as the applications discussed in section  [ sec : applications ] ) . for convenience ,",
    "let us restate the cluster expansion criterion here .",
    "given parameters @xmath881 , define the notation @xmath882.\\ ] ] the cluster expansion criterion for a vector @xmath622^n$ ] , with respect to a graph @xmath3 , is @xmath883 this criterion was introduced in the following non - constructive form of the lll .",
    "[ thm : bissacot ] let @xmath2 be events with a ( lopsi-)dependency graph @xmath3 , and let @xmath513 $ ] . if @xmath175 and @xmath3 satisfy then @xmath13 > 0 $ ] .    to see that this strengthens the original lll ( theorem  [ thm : lll ] ) , one may verify that implies : if @xmath553 , we can take @xmath884 ( so @xmath885 ) and then use the simple bound @xmath886 on the other hand , shearer s lemma ( lemma  [ lem : shearer - lemma ] ) strengthens theorem  [ thm : bissacot ] , in the sense that implies @xmath593 .",
    "this fact was established by bissacot et al .",
    "@xcite by analytic methods that relied on earlier results @xcite . in this section",
    "we establish this fact by a new proof that is elementary and self - contained .",
    "an algorithmic form of theorem  [ thm : bissacot ] in the variable model was proven by pegden  @xcite .",
    "in fact , that result is subsumed by the algorithm of kolipaka and szegedy in shearer s setting , since implies @xmath593 . in this section , we prove a new algorithmic form of theorem  [ thm : bissacot ] in the general framework of resampling oracles .",
    "to begin , we establish the following connection between the @xmath887 parameters and the @xmath663 polynomials . for convenience , let us introduce the notation @xmath888",
    "s$ ] , @xmath889 and @xmath890 .",
    "[ lem : cllimpliesshearer ] suppose that @xmath175 satisfies .",
    "then , for every @xmath514 $ ] and @xmath597 , we have @xmath891    the proof is in section  [ sec : cllimpliesshearer ] below .",
    "[ cor : pins ] if @xmath175 satisfies then @xmath593 .    for any @xmath514",
    "$ ] , write it as @xmath838 . applying lemma  [ lem : cllimpliesshearer ] repeatedly , we obtain @xmath892 } }   ~>~ 0\\ ] ] since @xmath893 for all @xmath894 $ ] under the criterion .",
    "recall that @xmath840 .",
    "hence @xmath895 for all @xmath514 $ ] , which means that @xmath175 is in the shearer region .    [ cor : qandy ] if @xmath175 satisfies then @xmath896 .",
    "lemma  [ lem : cllimpliesshearer ] yields @xmath842 - a}}{{\\breve{q}}_{[n ] } } \\leq \\frac{y_{([n]-a)^c}}{y_{[n]^c } } = 1 + y_a$ ] , so the result follows from claim  [ clm : shearerslack ] .",
    "these corollaries lead to our algorithmic result under the cluster expansion criterion .",
    "the following theorem subsumes theorem  [ thm : cluster - no - slack ] and adds a statement under the assumption of slack .",
    "[ thm : cluster - with - slack ] let @xmath2 be events and let @xmath513 $ ] .",
    "suppose that the three subroutines described in section  [ sec : algass ] exist .",
    "if @xmath175 satisfies then , with probability at least @xmath574 , maximalsetresampleresamples no more than @xmath897 events .",
    "if is satisfied with a slack of @xmath763 , i.e. , @xmath898 , then with probability at least @xmath574 , maximalsetresampleresamples no more than @xmath899 events .",
    "the first statement follows directly from theorem  [ thm : shearer - no - slack ] , since corollary  [ cor : pins ] shows that @xmath593 and corollary  [ cor : qandy ] shows that @xmath900 .",
    "next assume that is satisfied with @xmath57 slack .",
    "we apply corollary  [ cor : pins ] and corollary  [ cor : qandy ] to the point @xmath759 , obtaining that @xmath901 and @xmath902 , where @xmath757 denotes @xmath758 .",
    "the second statement then follows directly from corollary  [ cor : shearer - no - q0 ] .",
    "[ sec : cllimpliesshearer ]    [ clm : fundamentaly ] @xmath903 for all @xmath904 .",
    "every summand @xmath905 on the left - hand side either appears in @xmath906 if @xmath907 , or can be written as @xmath908 where @xmath909 , in which case it appears as a summand in @xmath910 .",
    "[ clm : submult ] @xmath911 for any @xmath912 $ ] .",
    "it suffices to consider the case that @xmath109 and @xmath278 are disjoint , as replacing @xmath278 with @xmath913 decreases the right - hand side and leaves the left - hand side unchanged .",
    "every summand @xmath905 on the left - hand side can be written as @xmath914 with @xmath915 and @xmath916 .",
    "the product @xmath914 appears as a summand on the right - hand side , and all other summands are non - negative .",
    "lemma  [ lem : cllimpliesshearer ] we proceed by induction on @xmath843 .",
    "the base case is @xmath917 . in that case",
    "we have @xmath918 on the other hand , by the two claims above and , we have @xmath919 } ~=~ y_{[n]-a } + y_a y_{[n ] \\setminus \\gamma^+(a ) }   ~\\geq~ y_{[n ] - a } + p_a y_{\\gamma^+(a ) } y_{[n ] \\setminus \\gamma^+(a ) }   ~\\geq~ y_{[n ] - a } + p_a y_{[n]}.\\ ] ] therefore , @xmath920-a}}{y_{[n ] } } \\leq 1 - p_a$ ] which proves the base case .",
    "we prove the inductive step by similar manipulations . by claim  [ clm : breve1 ] , we have @xmath921 the inductive hypothesis applied repeatedly to the elements of @xmath922 yields @xmath923 by the two claims above and , we have @xmath924 we conclude that @xmath925      [ sec : cllsss ]    we remark that the following more general bound holds : for every @xmath556 , @xmath926 the equality holds by lemma  [ lem : shearer - sum - equality ] and the inequality can be derived from lemma  [ lem : cllimpliesshearer ] as follows : @xmath927 using claim  [ clm : breve3 ] for the first equality , and claim  [ clm : submult ] and in the last two inequalities .    a direct proof that @xmath928 can be obtained by an inductive argument similar to the proof of in section  [ sec : lllslack ] .",
    "an application of lemma  [ lem : shearer - sum - equality ] then establishes .",
    "earlier versions of this paper used this approach to relate the cluster expansion criterion and shearer s lemma .",
    "our new approach in corollary  [ cor : pins ] has the advantage that it does not require the limiting arguments used in lemma  [ lem : shearer - sum - equality ] .",
    "we have shown that the lovsz local lemma can be made algorithmic in the abstract framework of resampling oracles .",
    "this framework captures the general lll as well as shearer s lemma in the existential sense , and leads to efficient algorithms for the primary examples of probability spaces and events satisfying lopsidependency that have been considered in the literature ( as surveyed in @xcite ) .",
    "our algorithmic form of the general lll ( theorem  [ thm : lll - tight - result ] ) uses @xmath42 resampling operations , which is roughly quadratically worse than the @xmath41 bound of moser - tardos @xcite .",
    "similarly , our algorithmic result under shearer s condition ( theorem  [ thm : shearer - no - slack ] ) uses @xmath929 resampling operations , which is roughly quadratically worse than the @xmath930 bound of kolipaka - szegedy @xcite .",
    "can this quadratic loss be eliminated ?",
    "one way to prove that result would be to prove an analog of the witness tree lemma , which is a centerpiece of the moser - tardos analysis @xcite .",
    "the witness tree lemma has other advantages , for example in deriving parallel and deterministic algorithms .",
    "unfortunately , the witness tree lemma is not true in the general setting of resampling oracles(see appendix  [ app : witness - trees ] ) .",
    "it is , however , true in the variable model @xcite as well as in the setting of random permutations @xcite .",
    "is there a variant of our framework in which the witness tree lemma is true , and which continues to capture the lll in full generality ?",
    "we thank mohit singh for discussions at the early stage of this work .",
    "we thank david harris for suggesting the results of section  [ sec : product - resampling ] , and for discussions relating to appendix  [ app : witness - trees ] .",
    "10    dimitris achlioptas and themis gouleakis .",
    "algorithmic improvements of the lovsz local lemma via cluster expansion . in _ proceedings of fsttcs _ , 2012 .",
    "dimitris achlioptas and fotis iliopoulos .",
    "random walks that find perfect objects and the lovsz local lemma . in _",
    "55th ieee annual symposium on foundations of computer science , focs 2014 , philadelphia , pa , usa , october 18 - 21 , 2014 _ , pages 494503 , 2014 .",
    "dimitris achlioptas and fotis iliopoulos .",
    "random walks that find perfect objects and the lovsz local lemma . ,",
    "abs/1406.0242v3 , 2015 .",
    "dimitris achlioptas and fotis iliopoulos",
    ". focused stochastic local search and the lovsz local lemma . in _ proc .",
    "of @xmath931 acm - siam soda _ , 2016 , to appear .",
    "saieed akbari and alireza alipour .",
    "multicolored trees in complete graphs . , 54:3:221232 , 2007 .",
    "n.  alon and j.  spencer . .",
    "wiley , 2000 .",
    "noga alon , joel spencer , and prasad tetali . covering with latin transversals . ,",
    "57:1:110 , 1995 .",
    "r.  bissacot , r.  fernndez , a.  procacci , and b.  scoppola .",
    "an improvement of the lovsz local lemma via cluster expansion .",
    ", 20:709719 , 2011 .",
    "julia bttcher , yoshiharu kohayakawa , and aldo procacci .",
    "properly coloured copies and rainbow copies of large graphs with small maximum degree . , 40(4 ) , 2012 .",
    "andrei broder .",
    "generating random spanning trees . in _ proceedings of sfcs _ ,",
    "pages 442447 , 1989 .",
    "richard  a. brualdi and susan hollingsworth .",
    "multicolored trees in complete graphs . , 68 , 1996 .    james  m. carraher , stephen  g. hartke , and paul horn .",
    "edge - disjoint rainbow spanning trees in complete graphs , 2013 .",
    "karthekeyan chandrasekaran , navin goyal , and bernhard haeupler .",
    "deterministic algorithms for the lovsz local lemma . , 42(6 ) , 2013 .",
    "kai - min chung , seth pettie , and hsin - hao su .",
    "distributed algorithms for the lovsz local lemma and graph coloring . in _ proceedings of podc _ , 2014 .",
    "paul erds and lszl lovsz .",
    "problems and results on 3-chromatic hypergraphs and some related questions . in a.",
    "hajnal et  al . ,",
    "editor , _ infinite and finite sets _ , volume  10 of _ colloquia mathematica societatis jnos bolyai _ , pages 609628 .",
    "north - holland , amsterdam , 1975 .",
    "paul erds and joel spencer .",
    "the lopsided lovsz local lemma and latin transversals .",
    ", 30:151154 , 1991 .",
    "r.  fernndez and a.  procacci .",
    "cluster expansion for abstract polymer models : new bounds from an old approach .",
    ", 274:123140 , 2007 .",
    "heidi gebauer , tibor szab , and gbor tardos .",
    "the local lemma is tight for sat . in _ proceedings of soda _ , 2011 .",
    "ioannis giotis , lefteris kirousis , kostas  i. psaromiligkos , and dimitrios  m. thilikos . on the algorithmic lovsz local lemma and acyclic edge coloring . in _ proceedings of analco _ , 2015 .",
    "bernhard haeupler , barna saha , and aravind srinivasan .",
    "new constructive aspects of the lovsz local lemma . , 58(6 ) , 2011 .",
    "david  g. harris and aravind srinivasan .",
    "a constructive algorithm for the lovsz local lemma on permutations . in",
    "_ proceedings of the twenty - fifth annual acm - siam symposium on discrete algorithms , soda 2014 , portland , oregon , usa , january 5 - 7 , 2014 _ , pages 907925 , 2014 .",
    "richard holley .",
    "remarks on the fkg inequalities . , 36:227231 , 1974 .",
    "donald  e. knuth .",
    "http://www-cs-faculty.stanford.edu/~uno/fasc6a.ps.gz .",
    "kashyap kolipaka and mario szegedy .",
    "oser and tardos meet lovsz . in _ proceedings of stoc _ , 2011 .",
    "kashyap kolipaka , mario szegedy , and yixin xu . a sharper local lemma with improved applications . in _ proceedings of approx / random _ , 2012 .",
    "lincoln lu , austin mohr , and lszl szkely .",
    "quest for negative dependency graphs .",
    ", 25:243258 , 2013 .    austin mohr .",
    ". phd thesis , university of south carolina , 2013 .",
    "robin moser . .",
    "phd thesis , eth zrich , 2012 .",
    "robin  a. moser .",
    "a constructive proof of the lovsz local lemma . in _ proceedings of stoc _ , 2009 .",
    "robin  a. moser and gbor tardos . a constructive proof of the general lovsz local lemma .",
    ", 57(2 ) , 2010 .",
    "sokol ndreca , aldo procacci , and benedetto scoppola .",
    "improved bounds on coloring of graphs .",
    ", 33(4 ) , 2012 .",
    "christos  h. papadimitriou . on the complexity of the parity argument and other inefficient proofs of existence .",
    ", 48:498532 , 1994 .    wesley pegden . .",
    ", 28:911917 , 2014 .",
    "alexander schrijver . .",
    "springer , 2004 .",
    "alexander  d. scott and alan  d. sokal . . ,",
    "118(5):11511261 , 2005 .",
    "james  b. shearer . on a problem of spencer .",
    ", 5(3 ) , 1985 .",
    "joel spencer .",
    "asymptotic lower bounds for ramsey functions .",
    ", 20:6976 , 1977 .",
    "david  e. woolbright and hung - lin fu . on the existence of rainbows in 1-factorizations of @xmath245 .",
    ", 6:1:120 , 1998 .",
    "[ app : witness - trees ]    a cornerstone of the analysis of moser and tardos @xcite is the _ witness tree lemma_. it states ( roughly ) that for any tree of events growing _ backwards in time _ from a certain root event @xmath14 , with the children of each node @xmath932 being neighboring events resampled before @xmath932 , the probability that this tree is consistent with the execution of the algorithm is at most the product of the probabilities of all events in the tree .",
    "( we give a more precise statement below . )",
    "extensions of this lemma have been crucial in the work of kolipaka - szegedy on algorithmic forms of shearer s lemma @xcite and work of harris - srinivasan on the algorithmic local lemma for permutations @xcite .",
    "the witness tree lemma leads to somewhat stronger quantitative bounds than the ones we obtain , and it has been also useful for other purposes : derandomization of lll algorithms @xcite , parallel algorithms @xcite , and handling exponentially many events @xcite .",
    "therefore , it would be desirable to prove the witness tree lemma in our general framework of resampling oracles .",
    "unfortunately , this turns out to be impossible .",
    "the main purpose of this section is to show that the witness tree lemma is false in the framework of resampling oraclesin a strong sense .",
    "whereas in typical scenarios the moser - tardos algorithm only requires witness trees of depth @xmath933 with high probability , in the resampling oracleframework the stable set sequences ( and an analogous notion of witness trees ) can have nearly - linear length with constant probability .",
    "before we proceed , we define a few notions necessary for the formulation of the witness tree lemma .",
    "our definitions here are natural extensions of the notions from @xcite to the setting of resampling oracles .    given a lopsided association graph@xmath3 on vertex set @xmath4 $ ] , a witness tree is a finite rooted tree @xmath287 , with each vertex @xmath272 in @xmath287 given a label @xmath934 $ ] , such that the children of a vertex @xmath272 receive labels from @xmath935 .",
    "we say that a witness tree @xmath287 with root @xmath936 appears in the log of the algorithm , if event @xmath937 is resampled at some point and the tree is produced by the following procedure : process the resampled events from that point backwards , and for each resampled event @xmath402 such that @xmath938 for some @xmath272 in the tree , pick such a vertex @xmath272 of maximum depth in the tree and create a new child @xmath91 of @xmath272 with label @xmath939 .",
    "the witness tree lemma , in various incarnations , states that the probability of a witness tree @xmath287 appearing in the log of an lll algorithm is at most @xmath940 $ ] .",
    "we show here that this can be grossly violated in the setting of resampling oracles .",
    "our example actually uses the independent variable setting but resampling oracles different from the natural ones considered by moser and tardos .",
    "consider independent bernoulli variables @xmath941 and @xmath87 where @xmath942 and @xmath943 .",
    "the probability distribution @xmath1 is uniform on the product space of these random variables . consider the following events :          these events are mutually independent .",
    "however , let us consider a dependency graph @xmath3 where @xmath947 for each @xmath948 ; this is a conservative choice but nevertheless a valid one for our events .",
    "( one could also tweak the probability space slightly so that neighboring events are actually dependent . ) in any case , @xmath949 is an isolated vertex in the graph .                @xmath958 switches the variables @xmath956 and @xmath959 and thus can cause @xmath14 to occur ( which is consistent with the dependency graph @xmath3 ) . conditioned on @xmath960 , it makes @xmath961 uniformly random and preserves a uniform distribution on @xmath962 .",
    "@xmath963 affects the values of @xmath964 but no event depends on @xmath965 , so @xmath963 can not cause any event except @xmath949 to occur .",
    "conditioned on @xmath966 , since @xmath967 are distributed uniformly , it produces again the uniform distribution .      first , let us consider the moser - tardos algorithm : in the most general form , it resamples in each step an arbitrary occurring event . for concreteness , let s say that the algorithm always resamples the occurring event of minimum index ( in some fixed ordering ) .",
    "if the moser - tardos algorithm considers events in the order @xmath968 , then at the time it gets to resample @xmath949 , the variables @xmath969 are independent are equal to @xmath545 with probability @xmath970 each .",
    "let us fix @xmath7 .",
    "whenever some variable @xmath961 is initially equal to @xmath200 , we have to resample @xmath971 at some point .",
    "however , we only resample @xmath971 if @xmath14 does not occur , which means that @xmath956 must be @xmath545 at that time .",
    "so the resampling oracle @xmath971 forces @xmath959 to be equal to @xmath545 .",
    "the only way @xmath959 could remain equal to @xmath200 is that it is initially equal to @xmath200 and none of the events @xmath971 need to be resampled , which happens with probability @xmath972 .",
    "therefore , when we re done with @xmath14 and @xmath971 for @xmath943 , @xmath959 is equal to @xmath200 with probability @xmath973 .",
    "this happens independently for each @xmath7 .      by the ordering of events",
    ", @xmath949 is resampled only when all other events have been fixed .",
    "also , resampling @xmath949 can not cause any other event , so the algorithm will terminate afterwards .",
    "however , as we argued above , when we get to resampling @xmath949 , each variable @xmath959 is equal to @xmath545 independently with probability @xmath970 . considering the resampling oracle @xmath975 ,",
    "if @xmath87 as well as all the variables @xmath959 are equal to @xmath545 , it will take at least @xmath17 resamplings to clear the queue and get a chance to avoid event @xmath949 .",
    "this happens with probability @xmath974 .",
    "let @xmath287 consist of a path of @xmath17 vertices labeled @xmath949 . for @xmath976 , we conclude that the witness tree @xmath287 appears with constant probability in the log of the moser - tardos algorithm , as opposed to @xmath977 which would follow from the witness tree lemma .",
    "a slightly more involved analysis is necessary in the case of maximalsetresample . by nature of this algorithm , we would resample @xmath949  in parallel \" with the other events and so the variables evolve somewhat differently .    for each @xmath7 independently , after 2 iterations of the maximalsetresamplealgorithm , @xmath978 with probability @xmath979 .",
    "any further updates of @xmath959 other than those caused by resampling @xmath949 can only change the variable from @xmath200 to @xmath545 .    the claim is that unless @xmath980 and @xmath981 initially , in the first two iterations we will possibly resample @xmath14 and then one of the events @xmath971 , which makes @xmath959 equal to @xmath545 . any further update to @xmath959 occurs only when @xmath949 is resampled ( which shifts the sequence @xmath967 ) or when @xmath971 is resampled , which makes @xmath959 equal to @xmath545 .      in the first two iterations , the probability that @xmath949 is resampled twice is at least @xmath983 ( the values of @xmath87 and @xmath984 are initially uniform , and if @xmath984 is updated , it can only increase the probability that we resample @xmath949 ) . independently ,",
    "the probability that @xmath985 after the first two iterations is @xmath986 , by the preceding claim .",
    "( we are not using @xmath984 which is possibly correlated with the probability of resampling @xmath949 in the second iteration , and @xmath987 which would be refreshed by this resampling in the second iteration . )",
    "if this happens , we will continue to resample @xmath949 at least @xmath988 additional times , because it will take @xmath988 executions of @xmath963 before a zero can reach the variable @xmath87 .",
    "again , consider setting @xmath989 .",
    "the total number of events is @xmath990 , so @xmath991 and @xmath992 . with constant probability , the witness tree @xmath287 consisting of a path of @xmath17 vertices labeled @xmath949 will appear in the log of maximalsetresamplealgorithm .",
    "thus , with constant probability , the algorithm will require a stable set sequence of length at least @xmath17 ."
  ],
  "abstract_text": [
    "<S> the lovsz local lemma is a seminal result in probabilistic combinatorics . </S>",
    "<S> it gives a sufficient condition on a probability space and a collection of events for the existence of an outcome that simultaneously avoids all of those events . </S>",
    "<S> finding such an outcome by an efficient algorithm has been an active research topic for decades . </S>",
    "<S> breakthrough work of moser and tardos ( 2009 ) presented an efficient algorithm for a general setting primarily characterized by a product structure on the probability space .    in this work we present an efficient algorithm for a much more general setting . </S>",
    "<S> our main assumption is that there exist certain functions , called _ resampling oracles _ , that can be invoked to address the undesired occurrence of the events . </S>",
    "<S> we show that , in _ all _ scenarios to which the original lovsz local lemma applies , there exist resampling oracles , although they are not necessarily efficient . nevertheless , for essentially all known applications of the lovsz local lemma and its generalizations , we have designed efficient resampling oracles . as applications of these techniques , </S>",
    "<S> we present new results for packings of latin transversals , rainbow matchings and rainbow spanning trees . </S>"
  ]
}