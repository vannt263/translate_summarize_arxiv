{
  "article_text": [
    "the bilateral filter was proposed by tomasi and maduchi @xcite as a non - linear extension of the classical gaussian filter .",
    "it is an instance of an edge - preserving filter that can smooth homogenous regions , while preserving sharp edges at the same time .",
    "the bilateral filter has diverse applications in image processing , computer vision , computer graphics , and computational photography @xcite .",
    "we refer the interested reader to @xcite for a comprehensive survey of the working of the filter and its various applications .",
    "the bilateral filter uses a spatial kernel along with a range kernel to perform edge - preserving smoothing . before proceeding further",
    ", we introduce the necessary notation and terminology .",
    "let @xmath0 be a vector - valued image , where @xmath1 is some finite rectangular domain of @xmath2 .",
    "for example , @xmath3 for a color image .",
    "consider the kernels @xmath4 and @xmath5 given by @xmath6 where @xmath7 and @xmath8 is some positive definite covariance matrix .",
    "the former bivariate gaussian is called the spatial kernel , and the latter multivariate gaussian is called the range kernel @xcite .",
    "the output of the bilateral filter is the vector - valued image @xmath9 : \\omega \\rightarrow \\mathbb{r}^d$ ] given by @xmath10(\\i ) = \\frac{1}{z(\\i ) } \\sum_{\\j } \\omega ( \\j ) \\   \\phi\\ !",
    "\\left ( \\f(\\i-\\j ) - \\f(\\i ) \\right ) \\f(\\i-\\j),\\ ] ] where @xmath11 the bilateral filter was originally proposed for processing grayscale and color images corresponding to @xmath12 and @xmath3 respectively @xcite . in practice , the sums in and are restricted to a square window @xmath13 ^ 2 $ ] around the pixel of interest , where @xmath14 is the standard deviation of the spatial gaussian @xcite .",
    "thus , the direct computation of and requires @xmath15 operations per pixel .",
    "in fact , the direct implementation is known to be slow for practical settings of @xmath14 @xcite . for the case",
    "@xmath12 ( grayscale images ) , researchers have come up with several fast algorithms based on various forms of approximations @xcite .",
    "a detailed account of some of the recent fast algorithms , and a comparison of their performances , can be found in @xcite .",
    "a straightforward way of extending the above fast algorithms to vector - valued images is to apply the algorithm separately on each of the @xmath16 components .",
    "the output in this case will generally be different from that obtained using the formulation in . in this regard , it was observed in @xcite that the component - wise filtering of rgb images can often lead to color distortions .",
    "it was shown that such distortions can be avoided by applying in the cie - lab color space , where the covariance @xmath8 is chosen to be diagonal .    in this paper",
    ", we present a fast algorithm for computing .",
    "the core idea is that of using raised - cosines to approximate the range kernel @xmath17 .",
    "this approximation was originally proposed in @xcite for deriving a fast algorithm for gray - scale images .",
    "it was later shown in @xcite that the raised - cosine approximation can be extended for performing high - dimensional filtering using the product of one - dimensional approximations .",
    "unfortunately , this did not lead to a practical fast algorithm .",
    "the fundamental difficulty in this regard is the so - called `` curse of dimensionality '' .",
    "namely , while a raised - cosine of small order , say @xmath18 , suffices to approximate a one - dimensional gaussian , the product of such approximations result in an order of @xmath19 in dimensions @xmath20 .",
    "a similar bottleneck arises in the context of computing using the raised - cosine approximation .",
    "nevertheless , we will demonstrate how this problem can be circumvented using monte carlo approximation @xcite .",
    "the contribution and organization of the paper are as follows . in section [ pa ] ,",
    "we extend the shiftable approximation in @xcite for the bilateral filtering of vector - valued images given by . in this direction",
    ", we propose a stochastic interpretation of the raised - cosine approximation , and show how it can be made practical using monte carlo sampling . based on this approximation",
    ", we develop a fast algorithm in section [ fa ] . as an application",
    ", we use the proposed algorithm for filtering color images in section [ results ] .",
    "the results reported in this section demonstrate the accuracy of the approximation , and the speedup achieved over the direct implementation .",
    "we conclude the paper in section [ conclusion ] .     over the dynamic range",
    "@xmath21 $ ] , where @xmath22 .",
    "the raised cosine is of order @xmath23 , and @xmath24 for the monte carlo approximation ( obtained using a single realization of @xmath25).,scaledwidth=45.0% ]",
    "as a first step , we diagonalize the quadratic form in the definition of @xmath17 using an orthogonal transform . indeed ,",
    "since @xmath26 is positive definite , we can find an orthogonal matrix @xmath27 and positive numbers @xmath28 such that @xmath29 where @xmath30",
    ". the change - of - basis @xmath31 amounts to transforming the components of the vector - valued image at each pixel ( similar to a color transformation ) .",
    "in particular , by defining the image @xmath32 given by @xmath33 we can write as @xmath34(\\i ) = \\frac{1}{z(\\i ) } \\sum_{\\j } \\omega ( \\j )   \\",
    "\\psi \\!\\left ( \\g(\\i-\\j ) - \\g(\\i ) \\right ) \\f(\\i-\\j),\\ ] ] where @xmath35 comparing and the range kernel in , we see that @xmath36 is given by @xmath37 the key point here is that we have factored the original kernel @xmath17 into a product of one - dimensional gaussians . at this point ,",
    "we recall the following result from @xcite .",
    "[ prop1 ] @xmath38^n\\ ! = \\exp \\!\\left(- \\frac{1}{2 } \\alpha^2   t^2 \\right).\\ ] ]    we apply proposition [ prop1 ] to the one - dimensional gaussians in , and conclude that @xmath39^n \\ ! \\ !",
    "\\!=\\lim_{n \\rightarrow \\infty }   \\prod_{k=1}^d \\left[\\cos\\!\\left ( \\frac{\\alpha_k y_k}{\\sqrt{n}}\\right)\\right]^n\\!\\!.\\ ] ] in practice , we fix some @xmath40 , and replace with @xmath41^n.\\ ] ] to reduce unnecessary symbols , we have used @xmath42 to represent both the original kernel and its approximation .",
    "this should not lead to a confusion , since we will not use the original kernel in the rest of the discussion .",
    "we will refer to @xmath40 as the _ order _ of the approximation .",
    "the central observation of the paper is the following stochastic interpretation of , which is obtained by turning a product - of - sums into a sum - of - products .",
    "[ prop2 ] let @xmath43 be a random vector , whose components are independent and follow the binomial distribution @xmath44 .",
    "then @xmath45 where @xmath46 and the expectation @xmath47 $ ] is with respect to @xmath48 .",
    "recall the identity @xmath49 , where @xmath50 .",
    "we use this along with the binomial theorem , and get @xmath51 notice that the coefficient in corresponding to a given @xmath52 is simply the probability that a random variable @xmath53 takes on the value @xmath52 . in other words , we can write @xmath54 where @xmath47 $ ] denotes the mathematical expectation with respect to @xmath55 . substituting in , and using the independence assumption on the components of @xmath48 , we arrive at .",
    "we next approximate the mathematical expectation in using monte carlo integration @xcite .",
    "more specifically , let @xmath56 denote the distribution of the random vector @xmath57 in proposition [ prop2 ] that takes values in @xmath58 .",
    "we fix a certain number of trials @xmath59 , and draw @xmath60 from @xmath58 using the distribution @xmath56 .",
    "this gives us the following monte carlo approximation of : @xmath61 where @xmath62 is the @xmath63-th component of @xmath64 . to reduce symbols ,",
    "we have again overloaded the notation for the original kernel in .    in summary ,",
    "starting from the kernel in , we arrive at the approximation in in two steps .",
    "first , we approximate the one - dimensional gaussian using a raised - cosine of fixed order @xmath40 .",
    "this results in a product of raised - cosines , which we express as a large sum - of - products . in the second step ,",
    "we approximate the large sum using monte carlo integration .",
    "a comparison of the raised - cosine and the monte carlo approximations for a one - dimensional ( @xmath12 ) range kernel is provided in figure [ kernelapproximation ] .    before proceeding further",
    ", we simplify the expression in by defining the random variable @xmath65 given by @xmath66 in terms of the realizations @xmath67 , we can write as @xmath68",
    "we now present the fast algorithm obtained by using in place of the original gaussian kernel .",
    "the fast algorithm is based on the so - called _ shiftability _ property of a function @xcite .",
    "the shiftability of the exponential function follows from a rather simple fact , namely that @xmath69 . in particular , on substituting in , we can express the term @xmath70 as follows : @xmath71 where @xmath72 denotes the @xmath63-th component of @xmath73 .",
    "we can simplify by introducing the ( complex - valued ) image @xmath74 given by @xmath75 and the image @xmath76 given by @xmath77 in term of , note that we can write as @xmath78 where @xmath79 denotes the complex - conjugate of @xmath80 . substituting in , and exchanging the two sums",
    ", we obtain @xmath81 where the vector - valued image @xmath82 is given by @xmath83 .",
    "similarly , on substituting in , we obtain @xmath84 notice that we have managed to express and using a series of gaussian convolutions . indeed , the term within brackets in is a gaussian convolution , which we denote by @xmath85 . on the other hand ,",
    "the gaussian convolution in is performed on each of the @xmath16 components of @xmath86 ; we denote this using @xmath87 .",
    "thus , we are required to perform a total of @xmath88 gaussian convolutions , which constitutes the bulk of the computation .",
    "the procedure for computing the proposed approximation of is summarized in algorithm [ algo ] .",
    "we shall henceforth refer to the proposed algorithm as the ` mcsf ` ( monte carlo shiftable filter ) .",
    "note that we can efficiently compute the gaussian convolutions in step [ conv ] using separability and recursion , and importantly , at @xmath89 cost with respect to @xmath14 @xcite .",
    "the run - time of the proposed algorithm is thus independent of @xmath14 , and is hence expected to be much faster than the direct implementation for large @xmath14 .",
    "needless to mention , we can replace the spatial filter @xmath90 in with any arbitrary spatial filter ( such as a box or hat filter ) , and the above reductions would still hold .    diagonalize @xmath8 to get @xmath91 and @xmath28 set up the spatial filter @xmath90 in using @xmath14 set @xmath92(\\i)= z[\\i]^{-1 } \\mathbf{p}(\\i)$ ] for @xmath93 .",
    "in this section , we present some results on natural color images for which @xmath3 .",
    "in particular , we demonstrate that the proposed ` mcsf ` algorithm is both fast and accurate for color images in relation to the direct implementation . to quantify the approximation accuracy for a given color image @xmath94",
    ", we used the mean - squared error between @xmath9 $ ] and @xmath92 $ ] ( the latter is the output of algorithm [ algo ] ) given by @xmath95_k(\\i)-\\mathcal{s}[\\f]_k(\\i ) \\big)^2,\\ ] ] where @xmath9_k$ ] and @xmath92_k$ ] are the @xmath63-th color channel . on a logarithmic scale , this corresponds to @xmath96 db . for the experiments reported in this paper , we used an isotropic gaussian kernel corresponding to @xmath97 in .",
    "in other words , @xmath98 , and @xmath99 for @xmath100 .",
    "the accuracy of the proposed algorithm is controlled by the order of the raised - cosine ( @xmath40 ) and the number of trails ( @xmath59 ) .",
    "it is clear that we can improve the approximation accuracy by increasing @xmath40 and @xmath59 .",
    "we illustrate this point with an example in figure [ errorplot ] .",
    "we notice that ` mcsf ` can achieve sub - pixel accuracy when @xmath101 and @xmath102 .",
    "we have noticed in our simulations that , for a fixed @xmath59 , the accuracy tends to saturate beyond a certain @xmath40 .",
    "this is demonstrated in figure [ errorplot ] using @xmath103 and @xmath23 .",
    ".comparison of the run - time of the direct implementation and algorithm [ algo ] on the @xmath104 _ peppers _ image .",
    "the range parameter used is @xmath105 .",
    "the parameters of ` mcsf ` are @xmath101 and @xmath106 . the computations were performed using matlab @xmath107 on a @xmath108 ghz intel @xmath109-core machine with @xmath110 gb memory . [ cols=\"^,^,^,^,^,^,^\",options=\"header \" , ]     [ table1 ]    a comparison of the run - time of the direct implementation of and that of the proposed algorithm is provided in table [ table1 ] .",
    "we notice that ` mcsf ` is few orders faster than the direct implementation , particularly for large @xmath14 .",
    "indeed , following the fact that the convolutions in step [ conv ] of algorithm [ algo ] can be computed in constant - time with respect to @xmath14 @xcite , our algorithm has @xmath89 complexity with respect to @xmath14 . as against this , the direct implementation scales as @xmath15 .",
    "finally , we present a visual comparison of the filtering for rgb images in figures [ dome ] and [ peppers ] .",
    "notice that the outputs are visually indistinguishable .",
    "as mentioned earlier , the authors in @xcite have observed that the application of the bilateral filter in the rgb color space can lead to color leakage , particularly at the sharp edges .",
    "the suggested solution was to perform the filtering in the cie - lab space @xcite . in this regard ,",
    "a comparison of the filtering in the cie - lab space is provided in figure [ house ] . in this case , we first performed a color transformation from the rgb to the cie - lab space , performed the filtering in the cie - lab space , and then transformed back to the rgb space .",
    "the filtered outputs are seen to be close , both visually and in terms of the mse .",
    "we proposed a fast algorithm for the bilateral filtering of vector - valued images .",
    "we applied the algorithm for filtering color images in the rgb and the cie - lab space .",
    "in particular , we demonstrated that a speedup of few orders can be achieved using the fast algorithm without introducing visible changes in the filter output ( the latter fact was also quantified using the mse ) .",
    "an important theoretical question arising from the work is the dependence of the order and the number of trials on the filtering accuracy . in future work",
    ", we will investigate this matter , and also look at various ways of improving the monte carlo integration @xcite .",
    "we also plan to test the algorithm on other vector - valued images ."
  ],
  "abstract_text": [
    "<S> in this paper , we consider a natural extension of the edge - preserving bilateral filter for vector - valued images . </S>",
    "<S> the direct computation of this non - linear filter is slow in practice . </S>",
    "<S> we demonstrate how a fast algorithm can be obtained by first approximating the gaussian kernel of the bilateral filter using raised - cosines , and then using monte carlo sampling . </S>",
    "<S> we present simulation results on color images to demonstrate the accuracy of the algorithm and the speedup over the direct implementation .    bilateral filter , vector - valued image , color image , monte carlo method , approximation , fast algorithm . </S>"
  ]
}