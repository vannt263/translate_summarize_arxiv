{
  "article_text": [
    "we follow the notation of ( * ? ? ?",
    "* chapter 5 ) .",
    "let @xmath16 be a context - free grammar with a set  @xmath17 of _ variables _ or _ nonterminals _ , a set @xmath18 of _ terminals _ , a set @xmath19 of _ productions _ , and an _ axiom _ @xmath20 .",
    "we construct a nondeterministic finite automaton ( nfa ) whose language has the same parikh image as  @xmath11 .",
    "the transitions of this automaton will be labeled with words of @xmath21 , but note that by adding intermediate states ( when the words have length greater than one ) and removing @xmath22-transitions ( i.e. , when the words have length zero ) , such an nfa can be easily brought in the more common form where transition labels are elements of @xmath18 .",
    "we need to introduce a few notions . for @xmath23",
    "we denote by @xmath24 ( resp .",
    "@xmath25 ) the parikh image of @xmath26 where the components not in @xmath27 ( resp .",
    "@xmath18 ) have been projected away .",
    "moreover , let @xmath28 ( resp .",
    "@xmath29 ) denote the projection of @xmath26 onto @xmath27 ( resp .",
    "@xmath18 ) .",
    "for instance , if @xmath30 , @xmath31 , and @xmath32 , then @xmath33 , @xmath34 and @xmath35 .",
    "a pair @xmath36 is a _ step _ , denoted by @xmath37 , if there exist @xmath38 and a production @xmath39 such that @xmath40 and @xmath41 .",
    "notice that given a step @xmath37 , the strings @xmath42 and the production @xmath39 are unique .",
    "the _ transition _ associated to a step @xmath37 is the triple @xmath43 .",
    "for example , if @xmath44 and @xmath45 , then @xmath46 .",
    "let @xmath16 be a context - free grammar and let @xmath47 .",
    "the _ @xmath48-parikh automaton _ of @xmath10 is the nfa @xmath49 defined as follows :    * @xmath50 ; * @xmath51 ; * @xmath52 ; * @xmath53 .",
    "it is easily seen that @xmath54 has exactly @xmath55 states .",
    "figure [ fig : example ] shows the @xmath56-parikh automaton of the context - free grammar with productions @xmath57 and axiom @xmath58",
    ". the states are all pairs @xmath59 such that @xmath60 .",
    "transition @xmath61 comes e.g.  from the step @xmath62 , and can be interpreted as follows : applying the production @xmath63 to a word with zero occurrences of @xmath58 and two occurrences of @xmath64 leads to a word with one new occurrence of @xmath65 and @xmath66 , zero occurrences of @xmath58 , and three occurrences of @xmath64 .",
    "we define the _ degree _ of  @xmath10 by @xmath67 ; i.e. , @xmath68 is the maximal number of variables on the right hand sides .",
    "for instance , the degree of the grammar in fig .",
    "[ fig : example ] is @xmath69 .",
    "notice that if @xmath10 is in chomsky normal form then @xmath70 , and @xmath71 iff @xmath10 is regular .",
    "in the rest of the note we prove :    [ thm : main ] if @xmath10 is a context - free grammar with @xmath13 variables and degree  @xmath72 , then @xmath11 and @xmath73 have the same parikh image .    for the grammar of figure [ fig : example ] we have @xmath74 and @xmath75 , and theorem [ thm : main ] yields @xmath76 .",
    "so the language of the automaton of the figure has the same parikh image as the language of the grammar .",
    "it is easily seen that @xmath54 has exactly @xmath77 states .",
    "using standard properties of binomial coefficients , for @xmath78 and @xmath79 we get an upper bound of @xmath80 states . for @xmath81 ( e.g. for grammars in chomsky normal form ) ,",
    "the automaton  @xmath82 has @xmath83 states . on the other hand , for every @xmath84 the grammar @xmath85 in chomsky normal with productions @xmath86 and axiom @xmath87 satisfies @xmath88 , and therefore the smallest parikh - equivalent nfa has @xmath89 states .",
    "this shows that our construction is close to optimal .",
    "given @xmath90 , we write @xmath91 ( resp .",
    "@xmath92 ) , to denote that the parikh image of  @xmath93 is equal to ( resp .  included in ) the parikh image of  @xmath94 . also , given @xmath95 , we abbreviate @xmath96 to @xmath97 .",
    "we fix a context - free grammar @xmath16 with @xmath13 variables and degree  @xmath72 . in terms of the notation we have just introduced",
    ", we have to prove @xmath98 .",
    "one inclusion is easy :    for every @xmath99 we have @xmath100 .",
    "[ prop : firstinclusion ]    let @xmath101 arbitrary , and let @xmath102 be a run of @xmath54 on the word @xmath103 .",
    "we first claim that there exists a step sequence @xmath104 satisfying @xmath105 and @xmath106 .",
    "the proof is by induction on the length @xmath107 of @xmath102 . if @xmath108 , then @xmath109 , and we choose @xmath110 , which satisfies @xmath111 and @xmath112 .",
    "if @xmath113 , then let @xmath114 and @xmath115 . by induction hypothesis",
    "there is a step sequence @xmath116 satisfying @xmath117 and @xmath118 .",
    "moreover , since @xmath119 is a transition of @xmath54 , there is a production @xmath120 and a step @xmath121 such that @xmath122 , @xmath123 and @xmath124 .",
    "since @xmath125 , @xmath126 contains at least one occurrence of @xmath127 , i.e , @xmath128 for some @xmath129 .",
    "we choose @xmath130 , and get @xmath131 .",
    "also @xmath132 .",
    "this concludes the proof of the claim .",
    "now , let @xmath133 be an arbitrary word with @xmath134 .",
    "then there is a run @xmath135 . by the claim there",
    "exists a step sequence @xmath104 satisfying @xmath136 and @xmath106 .",
    "so @xmath137 , and hence @xmath138 .",
    "since @xmath106 we have @xmath139 , and we are done .    the proof of the second inclusion @xmath140 is more involved .",
    "to explain its structure we need a definition .",
    "a derivation @xmath141 of @xmath10 has index @xmath48 if for every @xmath142 , the word @xmath143 has length at most @xmath48 .",
    "the set of words derivable through derivations of index @xmath48 is denoted by @xmath144 .    for example",
    ", the derivation @xmath145 has index two .",
    "clearly , we have @xmath146 and @xmath147 .",
    "the proof of @xmath148 is divided into two parts .",
    "we first prove the _ collapse lemma _ , lemma [ lem : collapse ] , stating that @xmath149 , and then we prove , in lemma  [ lem : deriv2parikhnfa ] , that @xmath150 holds for every @xmath99 . a similar result has been proved in  @xcite with different notation and in a different context .",
    "we reformulate its proof here for the reader interested in a self - contained proof .",
    "[ [ the - collapse - lemma ] ] the collapse lemma + + + + + + + + + + + + + + + + + +    we need a few preliminaries .",
    "we assume the reader is familiar with the fact that every derivation can be parsed into a _ parse tree _",
    "* chapter 5 ) , whose _ yield _ is the word produced by the derivation .",
    "we denote the yield of a parse tree @xmath151 by @xmath152 , and the set of yields of a set @xmath153 of trees by @xmath154 .",
    "figure  [ fig : dtree ] shows the parse tree of the derivation @xmath155 .",
    "we introduce the notion of dimension of a parse tree .",
    "let @xmath151 be a parse tree .",
    "a _ child _ of @xmath151 is a subtree of @xmath151 whose root is a child of the root of @xmath151 .",
    "a child of  @xmath151 is called _ proper _ if its root is not a leaf , i.e. , if it is labeled with a variable .",
    "the _ dimension _",
    "@xmath156 of a parse tree @xmath151 is inductively defined as follows . if @xmath151 has no proper children , then @xmath157",
    "otherwise , let @xmath158 be the proper children of @xmath151 sorted such that @xmath159 .",
    "then @xmath160 the set of parse trees of @xmath10 of dimension @xmath48 is denoted by @xmath161 , and the set of all parse trees of @xmath10 by @xmath153 .",
    "the parse tree of fig .",
    "[ fig : dtree ] has two children , both of them proper .",
    "it has dimension 1 and height 3 .",
    "observe also the following fact , which can be easily proved by induction .",
    "denote by  @xmath162 the height of a tree  @xmath151",
    ". then @xmath163 .",
    "[ fact : height ]    for the proof of the collapse lemma , @xmath149 , observe first that , since every word in @xmath11 is the yield of some parse tree , we have @xmath164 , and so it suffices to show @xmath165 .",
    "the proof is divided into two parts .",
    "we first show @xmath166 in lemma [ lem : dimension ] , and then we show @xmath167 in lemma [ lem : derivation ] .",
    "actually , the latter proves the stronger result that parse trees of dimension @xmath168 have derivations of index @xmath169 , i.e. , @xmath170 for all @xmath171 .    @xmath172 .",
    "[ lem : dimension ]    in this proof we write @xmath173 to denote that @xmath174 is a parse tree except that exactly one leaf @xmath107 is labelled by a variable , say @xmath127 , instead of a terminal ; the tree @xmath175 is a parse tree with root @xmath127 ; and the tree @xmath151 is obtained from @xmath174 and @xmath175 by replacing the leaf  @xmath107 of @xmath174 by the tree @xmath175 .",
    "figure  [ fig : dtree_decomp ] shows an example .    in the rest of the proof we abbreviate _ parse tree _ to _",
    "tree_. we need to prove that for every tree @xmath151 there exists a tree @xmath176 such that @xmath177 and @xmath178 .",
    "we shall prove the stronger result that moreover @xmath151 and @xmath176 have the same number of nodes , and the set of variables appearing in @xmath151 and @xmath176 coincide .",
    "say that two trees @xmath179 are _ @xmath180-equivalent _ if they have the same number of nodes , the sets of variables appearing in @xmath151 and @xmath176 coincide , and @xmath177 holds .",
    "say further that a tree @xmath151 is _ compact _ if @xmath181 , where @xmath182 denotes the number of variables that appear in @xmath151 .",
    "since @xmath183 for every @xmath151 , it suffices to show that every tree is @xmath180-equivalent to a compact tree .",
    "we describe a recursive `` compactification procedure '' @xmath184 that transforms a tree @xmath151 into an @xmath180-equivalent compact tree , and prove that it is well - defined and correct . by",
    "well - defined we mean that some assumptions made by the procedure about the existence of some objects indeed hold .",
    "@xmath184 consists of the following steps :    * if @xmath151 is compact then return @xmath151 and terminate .",
    "* if @xmath151 is not compact then * * let @xmath185 be the proper children of @xmath151 , @xmath186 . * * for every @xmath187 :   @xmath188 . + ( i.e. , replace in @xmath151 the subtree @xmath189 by the result of compactifying @xmath189 )",
    ". + let @xmath190 be the smallest index @xmath191 such that @xmath192 .",
    "* * choose an index @xmath193 such that @xmath194 . *",
    "* choose subtrees @xmath195 of @xmath196 and subtrees @xmath197 of @xmath198 such that * * * @xmath199 and @xmath200 ; and * * * the roots of @xmath201 and @xmath202 are labelled by the same variable . * * @xmath203 . + ( loosely speaking , remove @xmath204 from @xmath198 and insert it into @xmath196 . ) * * goto ( 1 ) .",
    "we first prove that the assumptions at lines ( 2.1 ) , ( 2.3 ) , and ( 2.4 ) about the existence of certain subtrees hold .",
    "+ ( 2.1 ) _ if @xmath151 is not compact , then @xmath151 has at least one proper child . _",
    "+ assume that @xmath151 has no proper child . then , by the definitions of dimension and @xmath182 , we have @xmath205 , and so @xmath151 is compact .",
    "+ ( 2.3 ) _ assume that @xmath151 is not compact , has at least one proper child , and all its proper children are compact . let @xmath190 be the smallest index @xmath191 such that @xmath192 .",
    "there there exists an index @xmath193 such that @xmath194 . _",
    "+ let @xmath206 ( where for the moment possibly @xmath207 ) be an index such that @xmath208 .",
    "we have @xmath209 so all inequalities in   are in fact equalities . in particular , we have @xmath210 and so , by the definitions of dimension and of  @xmath211 , there exists @xmath212 such that @xmath213 .",
    "hence @xmath214 or @xmath215 , and w.l.o.g .",
    "we can choose @xmath211 such that @xmath216 .",
    "+ ( 2.4 ) _ assume that @xmath151 is not compact , all its proper children are compact , and it has two distinct proper children @xmath217 such that @xmath192 and @xmath194 .",
    "there exist subtrees @xmath195 of @xmath196 and subtrees @xmath218 of @xmath198 satisfying conditions ( i ) and ( ii ) .",
    "_ + by the equalities in we have @xmath219 .",
    "by fact  [ fact : height ] we have @xmath220 .",
    "so @xmath221 , and therefore some path of @xmath198 from the root to a leaf visits at least two nodes labelled with the same variable , say @xmath127 .",
    "so @xmath198 can be factored into @xmath222 such that the roots of @xmath204 and @xmath202 are labelled by  @xmath127 .",
    "since by the equalities in we also have @xmath223 , every variable that appears in @xmath151 appears also in @xmath196 , and so @xmath196 contains a node labelled by @xmath127 .",
    "so @xmath196 can be factored into @xmath199 with the root of @xmath224 labelled by  @xmath127 . +",
    "this concludes the proof that the procedure is well - defined .",
    "it remains to show that it terminates and returns an @xmath180-equivalent compact tree .",
    "we start by proving the following lemma : + _ if @xmath184 terminates and returns a tree @xmath176 , then @xmath151 and @xmath176 are @xmath180-equivalent . _",
    "+ we proceed by induction on the number of calls to @xmath225 during the execution of @xmath184 .",
    "if @xmath225 is called only once , then only line ( 1 ) is executed , @xmath151 is compact , no step modifies @xmath151 , and we are done .",
    "assume now that @xmath225 is called more than once .",
    "the only lines that modify @xmath151 are ( 2.2 ) and ( 2.5 ) .",
    "consider first line ( 2.2 . ) .",
    "by induction hypothesis , each call to @xmath226 during the execution of @xmath184 returns a compact tree @xmath227 that is @xmath180-equivalent to @xmath189 .",
    "let @xmath174 and @xmath175 be the values of @xmath151 before and after the execution of @xmath228 . then @xmath175 is the result of replacing @xmath189 by @xmath227 in @xmath174 . by the definition of @xmath180-equivalence , and since @xmath227 is @xmath180-equivalent to @xmath189 , we get that @xmath175 is @xmath180-equivalent to @xmath174 .",
    "consider now line ( 2.5 ) , and let @xmath174 and @xmath175 be the values of @xmath151 before and after the execution of @xmath229 followed by the execution of @xmath230 . since the subtree @xmath204 that is added to @xmath196",
    "is subsequently removed from @xmath198 , the parikh - image of @xmath152 , the number of nodes of @xmath151 , and the set of variables appearing in @xmath151 do not change .",
    "this completes the proof of the lemma .",
    "+ the lemma shows in particular that if the procedure terminates , then it returns an @xmath180-equivalent tree .",
    "so it only remains to prove that the procedure always terminates .",
    "assume there is a tree @xmath151 such that @xmath184 does not terminate . w.l.o.g .",
    "we further assume that @xmath151 has a minimal number of nodes . in this case",
    "all the calls to line ( 2.2 ) terminate , and so the execution contains infinitely many steps that do not belong to any deeper call in the call tree , and in particular infinitely many executions of the block ( 2.3)-(2.5 ) .",
    "we claim that in all executions of this block the index @xmath190 _ has the same value_. for this , observe first that , by the lemma , the execution of line ( 2.2 ) does not change the number of nodes or the set of variables occurring in each of @xmath185 . in particular , it preserves the value of @xmath231 . observe further that each time line ( 2.5 ) is executed , the procedure adds nodes to @xmath196 , and either does not change or removes nodes from any other proper children of @xmath151 . in particular , the value of @xmath232 does not decrease , and for every @xmath233 the value of @xmath234 does not increase .",
    "so at the next execution of the block the index @xmath190 of the former execution is still the smallest index satisfying @xmath192 .",
    "now , since @xmath190 has the same value at every execution of the block , each execution strictly decreases the number of nodes of some proper child @xmath198 different from @xmath196 , and only increases the number of nodes of @xmath196 .",
    "this contradicts the fact that all proper children of @xmath151 have a finite number of nodes .    for every @xmath235 .",
    "[ lem : derivation ]    in this proof we will use the following notation . if @xmath236 is a derivation @xmath237 and @xmath238 , then we define @xmath239 to be the step sequence @xmath240 .",
    "let @xmath151 be a parse tree such that @xmath241 .",
    "we show that there is a derivation for  @xmath152 of index @xmath242 .",
    "we proceed by induction on the number of non - leaf nodes in  @xmath151 . in the base case",
    ", @xmath151 has no proper child .",
    "then we have @xmath243 and @xmath151 represents a derivation @xmath244 of index  @xmath69 .",
    "for the induction step , assume that @xmath151 has @xmath245 proper children @xmath246 where the root of @xmath189 is assumed to be labeled by @xmath247 ; i.e. , we assume that the topmost level of  @xmath151 is induced by a rule @xmath248 for @xmath249 .",
    "note that @xmath250 . by definition of dimension , at most one child @xmath189 has dimension  @xmath48 , while the other children have dimension at most @xmath251 .",
    "w.l.o.g .",
    "assume @xmath252 and @xmath253 .",
    "by induction hypothesis , for all @xmath254 there is a derivation  @xmath255 for  @xmath256 such that @xmath257 has index @xmath242 , and @xmath258 have index @xmath259 .",
    "define , for each @xmath254 , the step sequence @xmath260 if the notion of index is extended to step sequences in the obvious way , then @xmath261 has index @xmath242 , and for @xmath262 , the step sequence @xmath263 has index @xmath264 . by concatenating the step sequences @xmath265 and @xmath266 in that order",
    ", we obtain a derivation for @xmath152 of index @xmath242 .    putting lemma [ lem : derivation ] and lemma [ lem : dimension ] together we obtain :    * [ collapse lemma ] * @xmath149 .",
    "[ lem : collapse ]    @xmath267    for every @xmath101 : @xmath268 .",
    "[ lem : deriv2parikhnfa ]    we show that if @xmath269 is a prefix of a derivation of index @xmath48 then @xmath54 has a run @xmath270 such that @xmath271 and @xmath272 .",
    "the proof is by induction on the length @xmath273 of the prefix .",
    "* @xmath274 . * in this case @xmath275 , and since @xmath276 and @xmath277 we are done .    * @xmath278 . * since @xmath279 there exist @xmath280 and a production @xmath281 such that @xmath282 and @xmath283 . by induction hypothesis",
    ", there exists a run of @xmath54 such that @xmath284 and @xmath285 .",
    "then the definition of @xmath54 and the fact that @xmath286 is of index @xmath48 show that there exists a transition @xmath287 , hence we find that @xmath288 .",
    "next we conclude from @xmath289 and @xmath290 that @xmath291 and we are done .    finally , if @xmath292 so that @xmath269 is a derivation , then @xmath293 where @xmath294 is an accepting state and @xmath295 .",
    "we now have all we need to prove the other inclusion .    @xmath296 .",
    "[ prop : harddirection ]    @xmath297",
    "recall that a set @xmath298 , @xmath99 , is _ linear _ if there is an _ offset _ @xmath299 and _ periods _ @xmath300 such that @xmath301 .",
    "a set is _ semilinear _ if it is the union of a finite number of linear sets .",
    "it is easily seen that the parikh image of a regular language is semilinear .",
    "procedures for computing the semilinear representation of the language starting from a regular expression or an automaton are well - known ( see e.g.  @xcite ) . combined with theorem [ thm : main ] they provide an algorithm for computing the parikh image of a context - free language .    recently , to has obtained an upper bound on the size of the semilinear representation of the parikh image of a regular language ( see theorem 7.3.1 of @xcite ) :    [ thm : to ] let @xmath127 be an nfa with @xmath302 states over an alphabet of @xmath107 letters . then @xmath303 is a union of @xmath304 linear sets with at most @xmath107 periods ; the maximum entry of any offset is @xmath305 , and the maximum entry of any period is at most @xmath302 .    plugging theorem [ thm : main ] into theorem [ thm : to ] , we get the ( to our knowledge ) best existing upper bound on the size of the semilinear set representation of the parikh image of a context - free language .",
    "let @xmath16 be a context - free grammar of degree @xmath72 with @xmath47 and @xmath306 .",
    "let @xmath307 be the total number of occurrences of terminals in the productions of @xmath10 , i.e. , @xmath308 .",
    "the number of states of @xmath78 is @xmath309 .",
    "recall that the transitions of @xmath78 are labelled with words of the form @xmath310 , where @xmath311 is the right - hand - side of some production .",
    "splitting transitions , adding intermediate states , and then removing @xmath22-transitions yields an nfa with @xmath312 states .",
    "so we finally obtain for the parameters @xmath302 and @xmath107 in theorem [ thm : to ] the values @xmath313 , and @xmath314 .",
    "this result ( in fact a slightly stronger one ) has been used in @xcite to provide a polynomial algorithm for a language - theoretic problem relevant for the automatic verification of concurrent programs .",
    "for the sake of comparison we will assume throughout this section that all grammars have degree @xmath81 .",
    "given @xmath10 a context - free grammar with @xmath13 variables , we have shown how to construct an nfa  @xmath315 with @xmath14 states such that @xmath11 and @xmath316 have the same parikh image .",
    "we compare this result with previous proofs of parikh s theorem .",
    "parikh s proof  @xcite ( essentially the same proof is given in  @xcite ) shows how to obtain a parikh - equivalent regular expression from a finite set of parse trees of @xmath10 . the complexity of the resulting construction is not studied . by its definition ,",
    "the regular expression basically consists of the sum of words obtained from the parse trees of height at most @xmath317 .",
    "this leads to the admittedly rough bound that the regular expression consists of at most @xmath318 words each of length at most @xmath319 .",
    "greibach  @xcite shows that a particular substitution operator on language classes preserves semilinearity of the languages .",
    "this result implies parikh s theorem , if the substitution operator is applied to the class of regular languages .",
    "it is hard to extract a construction from this proof , as it relies on previously proved closure properties of language classes .",
    "pilling s proof  @xcite ( also given in  @xcite ) of parikh s theorem uses algebraic properties of commutative regular languages . from a constructive point of view",
    ", his proof leads to a procedure that iteratively replaces a variable of the grammar @xmath10 by a regular expression over the terminals and the other variables .",
    "this procedure finally generates a regular expression which is parikh - equivalent to  @xmath11 .",
    "van leeuwen  @xcite extends parikh s theorem to other language classes , but , while using very different concepts and terminology , his proof leads to the same construction as pilling s .",
    "neither @xcite nor @xcite study the size of the resulting regular expression .",
    "goldstine  @xcite simplifies parikh s original proof .",
    "an explicit construction can be derived from the proof , but it is involved : for instance , it requires to compute for each subset of variables , the computation of all derivations with these variables up to a certain size depending on a pumping constant .",
    "hopkins and kozen  @xcite generalize parikh s theorem to commutative kleene algebra .",
    "like in pilling  @xcite their procedure to compute a parikh - equivalent regular expression is iterative ; but rather than eliminating one variable in each step , they treat all variables in a symmetric way . their construction can be adapted to compute a parikh - equivalent finite automaton .",
    "hopkins and kozen show",
    "( by algebraic means ) that their iterative procedure terminates after @xmath320 iterations for a grammar with @xmath13 variables .",
    "in  @xcite we reduce this bound ( by combinatorial means ) to  @xmath13 iterations .",
    "the construction yields an automaton , but it is much harder to explain than ours .",
    "the automaton has size  @xmath12 .    in  @xcite parikh s theorem",
    "is derived from a small set of purely equational axioms involving fixed points .",
    "it is hard to derive a construction from this proof .    in @xcite",
    "parikh s theorem is proved by showing that the parikh image of a context - free language is the union of the sets of solutions of a finite number of systems of linear equations . in @xcite",
    "the theorem is also implicitly proved , this time by showing that the parikh image is the set of models of an existential formula of presburger arithmetic .",
    "while the constructions yielding the systems of equations and the presburger formulas are very useful , they are also more complicated than our construction of the parikh automaton . also , neither @xcite nor @xcite give bounds on the size of the semilinear set .",
    "we thank two anonymous referees for very useful suggestions ."
  ],
  "abstract_text": [
    "<S> parikh s theorem states that the parikh image of a context - free language is semilinear or , equivalently , that every context - free language has the same parikh image as some regular language . </S>",
    "<S> we present a very simple construction that , given a context - free grammar , produces a finite automaton recognizing such a regular language .    </S>",
    "<S> the _ parikh image _ of a word @xmath0 over an alphabet @xmath1 is the vector @xmath2 such that @xmath3 is the number of occurrences of @xmath4 in @xmath0 . </S>",
    "<S> for example , the parikh image of @xmath5 over the alphabet @xmath6 is @xmath7 . </S>",
    "<S> the parikh image of a language is the set of parikh images of its words . </S>",
    "<S> parikh images are named after rohit parikh , who in 1966 proved a classical theorem of formal language theory which also carries his name . </S>",
    "<S> parikh s </S>",
    "<S> theorem @xcite states that the parikh image of any context - free language is _ semilinear_. </S>",
    "<S> since semilinear sets coincide with the parikh images of regular languages , the theorem is equivalent to the statement that every context - free language has the same parikh image as some regular language . for instance , the language @xmath8 has the same parikh image as @xmath9 . </S>",
    "<S> this statement is also often referred to as parikh s theorem , see e.g.  @xcite , and in fact it has been considered a more natural formulation @xcite .    </S>",
    "<S> parikh s proof of the theorem , as many other subsequent proofs @xcite , is constructive : given a context - free grammar @xmath10 , the proof produces ( at least implicitly ) an automaton or regular expression whose language has the same parikh image as @xmath11 . </S>",
    "<S> however , these constructions are relatively complicated , not given explicitly , or yield crude upper bounds : automata of size @xmath12 for grammars in chomsky normal form with @xmath13 variables ( see section [ sec : related ] for a detailed discussion ) . </S>",
    "<S> in this note we present an explicit and very simple construction yielding an automaton with @xmath14 states , for a lower bound of @xmath15 . </S>",
    "<S> an application of the automaton is briefly discussed in section [ sec : appl ] : the automaton can be used to algorithmically derive the semilinear set , and , using recent results on parikh images of nfas @xcite , it leads to the best known upper bounds on the size of the semilinear set for a given context - free grammar . </S>"
  ]
}