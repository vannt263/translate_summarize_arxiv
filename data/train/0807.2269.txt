{
  "article_text": [
    "many applications in engineering require verifying safety or performance conditions on a given system . for instance verifying for all electrical current in the interval @xmath0 $ ] and all possible resistor values in the interval @xmath1 that the voltage across the resistor remains lower than a safety bound @xmath2 .",
    "in other words , we have to check the satisfiability of @xmath3 ) \\ ( \\forall r\\in[0.95\\,r_0,1.05\\,r_0 ] ) \\",
    "( ri\\leq u_\\mathrm{max}).\\ ] ] examples can be found in @xcite where the safety condition to be verified is a minimal mutual distance between some satellites during a complete revolution .    in design problems ,",
    "requirements are a bit more general . instead of verifying theses conditions , we have to determine values of design variables that satisfy safety and performance conditions for all values of uncertain physical data .",
    "all these problems can be modeled in the framework of quantified constraint satisfaction problems ( qcsps ) .",
    "qcsps arise naturally in numerous other applications ( cf .",
    "@xcite ) .    in this paper , we are interested in a restricted form of qcsps where existential quantifiers precede universal quantifiers , i.e. @xmath4 where @xmath5 and @xmath6 are vectors of variables , @xmath7 and @xmath8 are vectors of intervals over continuous domains , and constraints @xmath9 are inequalities of the form @xmath10 .",
    "in addition to the problems introduced in @xcite , this class of qcsps can tackle the design of robust controllers , which has been addressed in numerous works @xcite .    in general , we are not only interested in the decision problem ( [ eq : qcsp ] ) but also in finding assignments of the existential variables which satisfy the constraints .",
    "in other words , we consider @xmath11 as a search space where we try to find values @xmath12 such that the relation @xmath13 holds .",
    "such a value @xmath14 is called a solution of ( [ eq : qcsp ] ) and we define the solution set of ( [ eq : qcsp ] ) in the following way : @xmath15    an essential observation is that in all mentioned applications , solution sets are continuums of solutions and that users are not really interested by isolated solutions but by continuous subsets of @xmath11 where all points are solutions . indeed , in design problems determining the real value of a physical value without any tolerance information does not really make sense .",
    "that s why we compute two sets @xmath16 and @xmath17 ( called respectively the _ inner approximation _ and the _ boundary approximation _ ) which satisfy the following relation : @xmath18 set @xmath16 contains only solutions whereas set @xmath17 contains the boundary of the solution set .",
    "thus @xmath17 contains indifferently solutions and non - solutions .",
    "@xmath19 contains the whole solution set and is called the _",
    "outer approximation_. actually , due to computational limitations , @xmath16 and @xmath17 are unions of boxes ( cf .",
    "figure [ fig : paving ] ) .    in this paper",
    ", we propose a new algorithm for computing the sets of boxes @xmath16 and @xmath17 .",
    "in contrast with other methods dedicated to the resolution of qcsps , we handle the qcsp ( [ eq : qcsp ] ) as a non quantified csp with quantified constraints : we introduce a csp equivalent to ( [ eq : qcsp ] ) formed of constraints @xmath20 on the variables @xmath14 ( the domain parameter @xmath21 is explicitly given in exponent for clarity ) .",
    "these constraints are quantified inequalities : @xmath22 ; @xmath23 are called the parameters and @xmath21 their domains .",
    "we propose here a generic branch and prune algorithm dedicated to continuous csp with parametric constraints .",
    "this algorithm is based on a specific implementation for universally quantified inequalities of the following techniques :     pruning the non solution set ;     identifying the solution set ;     handling of parameter domains .",
    "other methods @xcite have been proposed to compute approximations of the solution set of ( [ eq : qcsp ] ) .",
    "the new algorithm we propose here is both much simpler than the previously proposed algorithms , and also much more efficient .",
    "first experimentation show that our algorithm outperforms the methods introduced in @xcite .",
    "[ [ notations ] ] notations + + + + + + + + +    boldface symbols denotes intervals , e.g. @xmath24=\\{x\\in{\\mathbb{r}}:{\\underline{x}}\\leq x\\leq{\\overline{x}}\\}$ ] where @xmath25 and @xmath26 belong to a finite subset of @xmath27 ( usually the floating point numbers , cf .",
    "the set of these intervals is denoted by @xmath28 and the set of @xmath29 dimensional interval vectors ( also called boxes ) by @xmath30 .",
    "the width of an interval vector @xmath7 is @xmath31 and its midpoint is @xmath32 .",
    "@xmath33 denotes a value of @xmath11 . for two boxes @xmath11 and @xmath21 , the interval hull is denoted by @xmath34 and is the smallest box which contains both @xmath11 and @xmath21 ( note the difference between the union @xmath35\\cup[2,3]=\\{x\\in{\\mathbb{r}}:-1\\leq x\\leq 1 \\vee 2\\leq x\\leq 3\\}$ ] which is disconnected , and the interval hull @xmath35\\cup[2,3]=[-1,3]$ ] ) .",
    "also , their set difference is denoted by @xmath36 .",
    "[ [ outline - of - the - paper ] ] outline of the paper + + + + + + + + + + + + + + + + + + + +    section [ s : interval - analysis ] recalls some basics on csp with continuous domains .",
    "section [ s : algorithm ] describes the key features of the algorithm we propose .",
    "first experimental results are given in section [ s : experimentations ] .",
    "to tackle csp with continuous domains , a key issue is to be able to prove properties on continuums of real numbers .",
    "interval analysis handles this problem in an efficient way using only computations on floating point numbers .",
    "we recall here some basics which are required to understand the paper .",
    "more details can be found in @xcite .",
    "an interval contractor for a constraint @xmath37 with @xmath29 variables is a function @xmath38 that satisfies the following properties : ( 1 ) @xmath39 ; ( 2 ) @xmath40 .",
    "such contractors can be implemented using various techniques @xcite for standard inequality constraints .",
    "examples and experimentation presented in this paper use contractors based on the @xmath41consistency .",
    "@xmath41consistency  @xcite ( also known as hull consistency ) states a local property on the bounds of the domain of a variable at a single constraint level .",
    "a constraint @xmath37 is @xmath41-consistent if , for any variable @xmath42 , there exist values in the domains of all other variables that satisfy @xmath37 when @xmath42 is fixed to @xmath43 and @xmath44 .",
    "the filtering by @xmath41consistency of @xmath45 is the csp @xmath46 such that    * @xmath47 and @xmath48 have the same solutions ; * @xmath48 is @xmath41-consistent ; * @xmath49 and the domains in @xmath50 are the largest ones for which @xmath48 is @xmath41-consistent .",
    "filtering by @xmath41consistency of @xmath47 always exists and is unique  @xcite , that is to say , it is a closure .",
    "the key idea of our algorithm is to reformulate a qcsp as a csp with parametric constraints .",
    "more precisely , we reformulate a qcsp with constraints of type ( [ eq : qcsp ] ) as a csp @xmath51 where :     @xmath52 ;     @xmath53 with @xmath54 ;     @xmath55 .",
    "the parameter domains are considered at the level of each constraint , so we can process them differently for each constraint ; they are initialized with @xmath21 .",
    "standard techniques have to be adapted for this class of constraints .",
    "for example , we show in subsection [ ss : pruning ] that @xmath56 can be achieved with @xmath57 for any @xmath58 , the latter being implemented using standard interval contractors .      the branch and prune algorithm we propose alternates pruning and branching steps in a standard way to reject parts of the search space that do not contain any solution .",
    "this process is interleaved with the identification of inner boxes that contain only solutions .",
    "we also introduce new parameter instantiations and parameter reduction techniques which play a key role during the pruning of the search space and the identification of the solution sets .",
    "these key points are detailed in subsections [ ss : pruning ] , [ ss : solution - identification ] and [ ss : parameter - reduction ] .",
    "they are implemented within a branching process ( see algorithm [ alg : bb ] ) using the following functions :    @xmath59 ; @xmath60 ; @xmath61    function _ parameterinstantiation ( ) _ returns a set of constraints @xmath62 which is equivalent to @xmath63 on the domain @xmath11 , but where some parameters have been instantiated ( see subsubsection [ sss : pdi ] ) .",
    "function _ pruning ( ) _ contracts the domain @xmath11 without loosing any solution of @xmath62 ( see subsection [ ss : pruning ] ) .    function _ solutionindentification ( ) _ contracts @xmath64 to @xmath65 and returns a list of inner boxes @xmath66 ( see subsection [ ss : solution - identification ] ) .",
    "the domains of the parameters are also updated in @xmath67 ( see subsubsection [ sss : pdp ] ) .",
    "function _ parameterdomainbisection ( ) _ bisects the parameter domains of the constraints and thus increases the number of constraints in @xmath67 ( see subsubsection [ sss : pdb ] ) .",
    "function _ branching ( ) _ achieves a standard bisection of the domains @xmath65 .",
    "[ [ local - pruning ] ] local pruning + + + + + + + + + + + + +    given a constraint @xmath68 and a box @xmath11 , we want to contract @xmath11 rejecting only parts which do not contain any solution of this constraint . to achieve this task , benhamou et al . and ratschan @xcite apply @xmath69 , where @xmath23 is handled as an existentially quantified variable in the domain @xmath70 .",
    "however , this strategy lacks efficiency .",
    "that s why we propose a better contractor by instantiating the parameter to an arbitrary value @xmath71 ( see example [ ex : outer ] ) .",
    "more formally , the box @xmath11 is contracted using @xmath72 which rejects only parts of @xmath11 that do not satisfy @xmath73 , and thus , do not satisfy @xmath68 .",
    "many strategies can be used to choose @xmath74 .",
    "we chose @xmath75 .",
    "experimentation have shown that searching for a better value of @xmath74 is not worthwhile .",
    "this is due to the fact that the parameter handling techniques reduce the impact of this choice ( see examples [ ex : pdb - outer - contraction ] and [ ex : dbpdr - outer - contraction ] in subsection [ ss : parameter - reduction ] ) .",
    "[ ex : outer ] let us consider the constraint @xmath76 defined by @xmath77 with @xmath78 , @xmath79 $ ] , and @xmath80 $ ] .",
    "the solution set of this simple csp is the interval @xmath81 $ ] . to reject values of @xmath11 that do not satisfy @xmath76 ,",
    "we apply @xmath82 , which reduces @xmath11 to @xmath83 $ ] .",
    "the method proposed in @xcite computes @xmath84 but can not achieve any contraction .",
    "[ [ global - pruning ] ] global pruning + + + + + + + + + + + + + +    the contraction of @xmath11 using one constraint removes solutions of this constraint , and therefore solutions of the global csp .",
    "this is illustrated in the first row of figure [ fig : global - prunings ] where diagrams ( a ) and ( b ) show two local contractions leading to @xmath85 and @xmath86 .",
    "the global contraction depicted in diagram ( c ) is obtained by computing @xmath87 .",
    "of course , in practice we compute this intersection in an incremental way .      as in @xcite , the identification of sets of solutions",
    "is implemented by applying interval contractors to the negation of the constraints .",
    "again , this process is achieved for each constraint separately",
    ". however , now only areas that are proved to be local solutions for all constraints are solutions of the whole csp .    [",
    "[ identification - of - solutions - for - a - single - constraint ] ] identification of solutions for a single constraint + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in order to identify parts of a box @xmath11 which contains only solutions of the constraint @xmath88 , we compute @xmath89 where @xmath90 stands for the vector @xmath91 .",
    "thus , every value of @xmath92 satisfies @xmath93 for all values of @xmath23 in @xmath70 .",
    "indeed , the part of @xmath94 which has been pruned does not contain any solution : @xmath95 from ( [ eq : inner - pruning-2 ] ) we have trivially @xmath96 this process is illustrated on the following example .",
    "[ ex : inner ] continuing example [ ex : outer ] , let us consider @xmath76 and @xmath97 $ ] . in order to identify values of @xmath11 that satisfy @xmath76 , we apply @xmath98 and obtain @xmath99 $ ] and @xmath100 $ ] .",
    "therefore , @xmath10110,15]$ ] contains only solutions of the constraint .",
    "[ [ identification - of - solutions - of - the - whole - csp ] ] identification of solutions of the whole csp + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the @xmath102 for @xmath103 have been computed in such a way that all values of @xmath92 verify @xmath104 ( cf .",
    "the diagrams ( d ) and ( e ) of the second row of figure [ fig : global - prunings ] ) .",
    "thus , the values of @xmath11 that are outside all @xmath102 satisfy all the constraints .",
    "formally , @xmath105 contains only solutions of the csp .",
    "this inner approximation ( [ eq : inner - union ] ) is the dashed area of diagram ( f ) of the second row of figure [ fig : global - prunings ] .",
    "its description becomes very complicated for higher dimensions and when numerous constraints are involved .",
    "as in @xcite , we use instead the weaker inner approximation @xmath106 this inner approximation is represented on diagram ( g ) of the second row of figure [ fig : global - prunings ] .",
    "let us define @xmath107 .",
    "the closure is not closed in general , e.g. @xmath108{\\backslash}[-1,1]=[-10,-1[\\cup]1,10]$ ] .",
    "nevertheless , we can observe that if @xmath109 is continuous and non positive in @xmath110 , then it is also non positive in its closure @xmath111 , e.g. if @xmath112 in @xmath1131,10]$ ] then @xmath112 also holds in @xmath114\\cup[1,10]$ ] .",
    "thus , @xmath111 , which can be described by a simple union of boxes , is recorded instead of @xmath110 .",
    "] of @xmath110 is added to the set of inner boxes while @xmath64 has to be further explored .",
    "as said before , the size of the domains of the parameters is a critical issue for an efficient application of interval contractors .",
    "this section details the three methods implemented in our algorithm to overcome this problem .",
    "the goal of these methods is to only apply interval contractors to parts of the initial parameter domains while keeping the csp solution set unchanged .      during the identification of solutions ( [ eq : inner - pruning ] ) the domains of the parameters @xmath70 are reduced to @xmath115 . in @xcite , the initial parameter domain is restored , so this contraction of the parameter domains is not propagated .",
    "however , this reduced domain can be used while keeping the solution set of the constraint unchanged .",
    "indeed , ( [ eq : inner - pruning-2 ] ) trivially entails @xmath116 as a consequence , for every fixed @xmath14 in @xmath11 , @xmath117 implies @xmath118 .",
    "finally , we can replace the latter by the former keeping the solution set unchanged during the solution identification step of the algorithm .",
    "this is a significant improvement that is implemented without any overhead since the parameter domains have to be contracted anyway during the solution identification step .    in example",
    "[ ex : inner ] , the identification of solutions step has contracted the parameter domain from @xmath79 $ ] to @xmath100 $ ] .",
    "this latter domain can be used in future processing while keeping unchanged the csp solution set .",
    "bisecting parameter domains is the most obvious way to reduce them .",
    "this is a critical issue to improve the convergence of the algorithm .",
    "bisection is also used in @xcite but implemented in a different way . here",
    ", we change the constraint @xmath119 to the conjunction of the two constraints @xmath120 and @xmath121 , where @xmath122 and @xmath123 are obtained by bisecting @xmath21 .",
    "the following example illustrates how the parameter domain bisection is performed , and how it improves the pruning process as well as the identification of solutions .",
    "[ ex : pdb - outer - contraction ] let us come back to example [ ex : outer ] where the constraint store contains only one constraint @xmath124 .",
    "bisecting parameter domains , we obtain the new constraint store @xmath125 with @xmath126 $ ] and @xmath127 $ ] .",
    "the latter constraint store is equivalent to the original one , but contains more constraints with smaller parameter domains .",
    "the pruning operator is now applied to each constraint of the store , thus the two contractions @xmath128 and @xmath129 are computed .",
    "this leads to @xmath130 $ ] .",
    "the pruning achieved here is sharper than the one computed without bisecting the parameter domains ( cf .",
    "example [ ex : outer ] ) .    to identify solutions of this new csp ,",
    "we compute @xmath131 for @xmath132 .",
    "we obtain @xmath133 , @xmath134 , @xmath135 $ ] and @xmath136 $ ] .",
    "finally , @xmath64 is contracted to @xmath137 $ ] while @xmath138{\\backslash}[6.9375,9.75])=[9.75,15]$ ] is proved to be an inner box .",
    "the solution identification is also more efficient thanks to the bisection of the parameter domain ( cf .",
    "example [ ex : inner ] ) .      the constraint @xmath77 , where @xmath139 $ ] , can be simplified if the function @xmath109 is proved to be monotonic w.r.t .",
    "the parameter . indeed , if @xmath109 is increasing ( resp . decreasing ) w.r.t .",
    "@xmath23 , then the quantified constraint is obviously equivalent to the non - quantified constraint @xmath140 ( resp .",
    "@xmath141 ) .",
    "the variation of the function can be checked by evaluating its derivative w.r.t .",
    "the parameter on the intervals @xmath11 and @xmath21 .",
    "the same property holds if there are several parameters , using a derivative w.r.t .",
    "each parameter .",
    "[ ex : dbpdr - outer - contraction ] let us come back to example [ ex : outer ] . evaluating @xmath142,\\ ] ] we prove that @xmath109 is increasing w.r.t .",
    "therefore , the constraint @xmath77 is equivalent to @xmath143 .",
    "then , the pruning contracts @xmath80 $ ] to @xmath81 $ ] and the solution identification proves that @xmath81 $ ] contains only solutions . on this simple example",
    ", we obtain an exact description of the solution set .",
    "this set is much sharper than the contractions obtained without this instantiation of the parameter ( cf .",
    "examples [ ex : outer ] and [ ex : inner ] ) .",
    "the parameter instantiation can drastically improve the efficiency of the pruning and the solution identification steps .",
    "however , evaluating derivatives can be expensive , in particular when they involve trigonometric function . experimentation presented in the next section",
    "illustrate well this trade - off .",
    "this section compares the results of the ipa system described in @xcite , rsolver @xcite from s. ratschan with our system , called `` qine '' , on a set of @xmath144 benches .",
    "the @xmath144 benches come from the literature . the circle , pathpoint , parabola , robot and satellite qcsps are taken from @xcite .",
    "a description of robust1 ( respectively , robust4 , robust5 and robust6 ) can be found in @xcite ( respectively , @xcite , @xcite and @xcite ) .",
    "the rsolver and qine benches have been run on an intel core duo 2 at 2.4ghz with a time out of 600s . to limit the effect of the high memory consumption of these algorithms ,",
    "the available memory has been restricted to 1 gb . thus , a bench could either succeed to run within these two limits , end with a time out ( `` @xmath145 '' ) , or reach the memory limit ( `` @xmath146 '' ) .",
    "table [ benches ] reports the results obtained with rsolver and qine .",
    "it gives rsolver timing , as well as the time required to solve the benches for the different qine running options :    * `` 2b '' uses the contractor based on @xmath147-consistency techniques .",
    "more precisely , its implementation relies on a forward - backward evaluation of the direct acyclic graph which represents the constraint .",
    "* `` 2b+ '' combines the previous contractor with the derivative based parameter handling strategy introduced in subsection [ sss : pdi ] .",
    "the results have been computed according to a ratio ( column 2 ) where @xmath148 where @xmath149 is the total volume of the inner boxes , @xmath150 is the total volume of the outer boxes and @xmath151 is the volume given by the initial domains of the variables .",
    "though all the benches have been run for ratios going from @xmath152 to @xmath153 , the table gives only the most significant results for the sake of space .    as shown in table [ benches ] , in average , qine outperforms rsolver by one order of magnitude . for instance",
    ", qine handles the robust benches immediately while rsolver needs much for time to do so .",
    "a comparison of the different available combinations shows that the `` 2b+ '' combination has a more robust behavior .",
    "it takes advantage of all the available information and offers a good trade - off between the computation time and the domain reductions .",
    "however , on the satellite bench , 2b performs better than 2b+ .",
    "this illustrates the trade - off between the cost of derivative computation and the benefit of parameter instantiations .",
    "tables [ benches2 ] compares ipa with qine .",
    "ipa system has been run on a pentium m at 2ghz running linux . to allow a fair comparison ,",
    "we have computed a timing correction : the same system , rsolver , has been run on both systems in order to determine this correction .",
    "therefore , the initial timing obtained for ipa ( column 3 ) has been multiplied by 0.58 ( column 4 ) to allow a fair comparison between the two systems .    here",
    "again , qine outperforms ipa . indeed , ipa was not able to solve the pathpoint bench within the timeout for only one of the tested ratios",
    "however , ipa is faster than qine on the satellite bench for the lower ratio values .",
    "this behavior is probably due to the limit of the 2b based contractor whose domain reduction capabilities decrease when a variable has multiple occurrences within one constraint .",
    "ipa is based on a box contractor which does not suffer from the same behavior ( see @xcite for a detailed comparison of 2b and box ) .",
    "however , when the ratio value increases , qine becomes faster than ipa .",
    "for instance , ipa needs more than 876s ( corrected time ) to solve the satellite bench for a ratio of 0.6276 whereas qine achieves this task with 2b within 401.44s .",
    "note that the class of qcsps handled by ipa is limited to one parameter .",
    "thus , ipa is not able to solve the robust benches .",
    "in this paper , we have introduced a new , simple and efficient algorithm to handle a significant class of qcsps .",
    "examples coming from the literature reveal that this class covers most of the practical applications .    our algorithm is based on new techniques for handling parameters",
    ". it also takes advantage of information provided by the derivatives to improve the contraction of the domains involved in constraints with parameters , a key issue in the efficient solving of qcsps .",
    "experimentation underline the efficiency of our algorithm which outperforms two of the available state of the art implementations able to handle such qcsps . in average ,",
    "our implementation is by one order of magnitude quicker than the two other systems .",
    "further work concerns the improvement of the implementation of the contractor by using the best filtering techniques for each type of constraints and the generalization of the use of available information to still enhance the speed of the solving process .",
    "we are grateful to marc christie for his valuable help in the experimentation ."
  ],
  "abstract_text": [
    "<S> this paper introduces a new algorithm for solving a sub - class of quantified constraint satisfaction problems ( qcsp ) where existential quantifiers precede universally quantified inequalities on continuous domains . </S>",
    "<S> this class of qcsps has numerous applications in engineering and design . </S>",
    "<S> we propose here a new generic branch and prune algorithm for solving such continuous qcsps . </S>",
    "<S> standard pruning operators and solution identification operators are specialized for universally quantified inequalities . </S>",
    "<S> special rules are also proposed for handling the parameters of the constraints . </S>",
    "<S> first experimentation show that our algorithm outperforms the state of the art methods . </S>"
  ]
}