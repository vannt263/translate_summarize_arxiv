{
  "article_text": [
    "geographical data visualization is a fundamental tool for communicating results related to geospatial analyses , and for generating hypotheses during exploratory data analysis  @xcite .",
    "the constantly increasing availability of geolocated data from social media , mobile devices and spatial databases implies that we need new tools for exploring , mining and visualizing large - scale spatial datasets .",
    "the python programming language  @xcite has been gaining attention as a data analysis tool in the scientific community  @xcite thanks to the clarity and simplicity of its syntax , and due to an abundance of third - parties libraries e.g.  within many disciplines including scientific computing  @xcite , machine learning  @xcite , bayesian modeling  @xcite , neuroscience  @xcite , and bioinformatics  @xcite . currently , however , there is limited support for geographical visualization .    here , we introduce geoplotlib , a python toolbox for visualizing geographical data .",
    "geoplotlib provides a simple yet powerful api to generate geographical visualizations on openstreetmap  @xcite tiles .",
    "we release geoplotlib as open - source software  @xcite , accompanied by a rich set of examples and documentation .    in the remainder of this paper",
    ", we discuss existing tools for geographical visualization and document the geoplotlib functionalities in detail , and finally we evaluate the computational performance on a large - scale dataset .",
    "in this section we compare existing tools for visualizing geographical data using python . we divide the related work into three categories : pure python packages , html - based packages and geographical information system plug - ins .",
    "the matplotlib  @xcite library has become the de - facto standard for data visualization in python and provides a large array of visualization tools including scatter and line plots , surface views , 3d plots , barcharts , and boxplots , but it does not provide any support for visualization on a geographical map by default .    the basemap  @xcite and cartopy  @xcite packages support multiple geographical projections , and provide several visualizations including point plots , heatmaps , contour plots , and shapefiles .",
    "pysal  @xcite is an open - source library of spatial analysis functions written in python and provides a number of basic plotting tools , mainly for shapefiles .",
    "these libraries however do not allow a user to draw on map tiles , and have limited support for custom visualizations , interactivity , and animation .",
    "there is a very rich ecosystem for data visualization for the web .",
    "a number of frameworks allow users to generate plots and charts : we cite as representative protoviz  @xcite , d3  @xcite , google charts  @xcite , sigmajs  @xcite .",
    "there is also a large number of libraries for displaying online tile maps , including google maps  @xcite , bing maps  @xcite , leaflet  @xcite , openlayers  @xcite , modestmaps  @xcite , polymaps  @xcite .    in order to generate a html visualization from python code ,",
    "it is needed to generate the html and javascript code that maps the data to the graphical elements .",
    "a number of libraries attempt to automate the conversion , such as folium  @xcite , vincent  @xcite and mplleaflet  @xcite .",
    "this process however is often complex , error - prone and time consuming",
    ". the complexity can be even greater if some support for animation or interaction is needed .",
    "finally , the javascript rendering performance may not be adequate for plotting very large datasets .",
    "geographic information systems ( gis ) such as qgis  @xcite , grassgis  @xcite , arcgis  @xcite , mapinfo  @xcite provide very powerful tools for spatial data analysis and visualization .",
    "gis tools usually provide some support for python scripting , although the availability varies from one to another .",
    "the main limitation of gis products is their complexity , requiring a significant amount of training to be used effectively , and as discussed before , the need to export the data from python .",
    "an overview of the geoplotlib architecture is given in fig .  [",
    "fig : conceptual ] .",
    "geoplotlib builds on top of numpy  @xcite and scipy  @xcite for numerical computations , and opengl / pyglet  @xcite for graphical rendering .",
    "geoplotlib implements the map rendering , the geographical projection , the user interface interaction and a number of common geographical visualizations .",
    "geoplotlib is designed according to three key principles :    * _ simplicity _ : geoplotlib tries to minimize the complexity of designing visualizations by providing a set of built - in tools for the most common tasks such as density visualization , spatial graphs , and shapefiles .",
    "the geoplotlib api is inspired by the matplotlib  @xcite programming model and syntax , the de - facto standard for data visualization in python ; this makes it easier for matplotlib users to get started . *",
    "_ integration _ : geoplotlib visualizations are standard python scripts , and may contain any arbitrary python code and use any other package .",
    "there is no need to export to other formats ( e.g. shapefiles , html ) or use external programs .",
    "this supports a complete integration with the rich python data analysis ecosystem such as scientific computing , machine learning and numerical analysis packages .",
    "the visualization can even run within an ipython  @xcite session , supporting interactive data analysis and facilitating the iterative design for visualizations . * _ performance _ : under the hood , geoplotlib uses numpy / scipy for fast numerical computations , and pyglet / opengl for hardware - accelerated graphical rendering .",
    "this allows the visualizations to scale to millions of datapoints in realtime .",
    "a simple geoplotlib script looks like this :    data = read_csv(data / bus.csv ) geoplotlib.dot(data ) geoplotlib.show ( )    this script launches the geoplotlib window and shows a dot map of the data points , in this example the location of bus stops in denmark ( fig . [ fig : dot ] ) .",
    "geoplotlib automatically determines the map bounding box , downloads the map tiles , perform the geographical projection , draws the base map and the visualization layers ( the dots in this example ) .",
    "the map is interactive and allows a user to zoom and pan with mouse and keyboard .",
    "as discussed above , the usage of the geoplotlib api is very similar to matplotlib .",
    "the visualization canvas is initially empty , and each command adds a new layer of graphics .",
    "the geoplotlib window is displayed when ` show ( ) ` is called .",
    "alternatively , the map can be rendered to image file using ` savefig('filename ' ) ` , or displayed inline in an ipython notebook using ` inline ( ) ` .",
    "the geoplotlib package provides several common geographical visualizations in form of layers .",
    "the api provides convenient methods for quickly adding a new visualization layer . in this section",
    "we provide a summary of the built - in visualizations .",
    "the data for all examples is available on the project website  @xcite .",
    "an elementary operation in geographical visualization is to display `` what is where '' , that is to place a graphic element on the map for each of the objects in consideration .",
    "this provides an immediate idea of the absolute and relative locations of objects .",
    "moreover , the density of points directly maps to the density of objects on geographical surface , identifying zones of higher and lower density .",
    "an example of dot map is shown in fig .",
    "[ fig : dot ] .",
    "the dot map shows the spatial distribution of bus stops in denmark at a glance .",
    "the zones of higher density  corresponding to the copenhagen metropolitan area and to the other major cities are immediately recognizable .",
    "the ` dot ` method allows users to configure points size , color and transparency , and optionally to attach a dynamic tooltip to each point .",
    "one limitation of dot maps is that it is hard to distinguish between areas of high density , as the number of point is so high that they uniformly cover the visualization canvas .",
    "a more direct visualization of density is to compute a 2d histogram of point coordinates .",
    "a uniformly spaced grid is placed on the map , and the number of samples within each cell is counted .",
    "this value is an approximation of the density , and can be visualized using a color scale . in geoplotlib",
    "we can generate the 2d histogram of the data using ` hist ` :    data = read_csv(data / opencellid_dk.csv ) geoplotlib.hist(data , colorscale=sqrt , binsize=8 ) geoplotlib.show ( )    here ` binsize ` refers to the size in pixels of the histogram bins .",
    "the example above loads some data related to cell tower positions in denmark , and then generates a histogram with a specific colorscale and bin size ( fig .",
    "[ fig : hist ] ) . compared to the dot map example",
    ", the histogram provides a clearer depiction of the density distribution .",
    "the main deficiency of histogram visualizations is that they are discrete approximations of a ( effectively continuous ) density function .",
    "this creates a dependence on the bin size and offset , rendering histograms sensitive to noise and outliers . to generate a smoother approximation ,",
    "a kernel density estimator approximates the true density function applying kernel functions in a window around each point  @xcite .",
    "the size of this window depends on the bandwidth parameter : a smaller bandwidth will produce more detailed but also noisier estimation , while a larger bandwidth will produce a less detailed but smoother estimation . a kernel estimation function",
    "can then be visualized by a surface where the color encodes the density value ( this visualization is often called a `` heatmap '' ) . in geoplotlib ,",
    "the ` kde ` method generates a kernel density estimation visualization :    data = read_csv(data / opencellid_dk.csv ) geoplotlib.kde(data , bw=[5,5 ] ) geoplotlib.show ( )    fig .",
    "[ fig : kde ] shows the kernel density estimation applied to the cell tower data . comparing the histogram from fig .",
    "[ fig : hist ] with the kernel density estimation in fig .",
    "[ fig : kde ] , it is evident how the latter produces a smoother and consequently clearer visualization of density .",
    "the kernel bandwidth ( in screen coordinates ) can be configured to regulate the smoothness .",
    "the density upper bound can be set to clip density values over a threshold .",
    "also the density lower bound can be set , to avoid rendering areas of very low density :    # lowering clip_above changes # the max value in the color scale geoplotlib.kde(data , bw=[5,5 ] , cut_below=1e-6 , clip_above=1 )    # different bandwidths geoplotlib.kde(data , bw=[20,20 ] , cmap=coolwarm , cut_below=1e-6 ) geoplotlib.kde(data , bw=[2,2 ] , cmap=coolwarm , cut_below=1e-6 )    # linear colorscale geoplotlib.kde(data , bw=[5,5 ] , cmap=jet , cut_below=1e-6 , scaling=lin )    ) .,scaledwidth=100.0% ]      in some cases it is useful to represent objects on the map using custom symbols with specific meaning .",
    "the ` markers ` method allows a user to place customs markers on the map :    metro = read_csv(./data / metro.csv ) s_tog = read_csv(./data / s - tog.csv )    geoplotlib.markers(metro , data / m.png , f_tooltip = lambda r : r[name ] ) geoplotlib.markers(s_tog , data / s - tog.png , f_tooltip = lambda r : r[name ] ) geoplotlib.show ( )    fig .",
    "[ fig : markers ] shows an example of custom markers for metro and train stops in copenhagen .",
    "markers graphics can be any common raster format ( png , jpeg , tiff ) , and can be rescaled to a custom size .",
    "optionally a dynamic tooltip can be attached to each marker .",
    "spatial graphs are a special type of graphs where nodes have a well - defined spatial configuration .",
    "examples includes transport networks ( bus routes , train tracks , flight paths ) , supply chain networks , phone call networks and commute networks . in geoplotlib `",
    "graph ` renders a spatial graph :    data = read_csv(./data / flights.csv ) geoplotlib.graph(data , src_lat=lat_departure , src_lon=lon_departure , dest_lat=lat_arrival , dest_lon=lon_arrival , color=hot_r , alpha=16 , linewidth=2 ) geoplotlib.show ( )    fig .",
    "[ fig : graph ] shows the resulting spatial graph of airport locations , where each node represents an airport and each edge represents a flight connection .",
    "edges are colored using a colormap encoding the edge length .",
    "a voronoi tessellation  @xcite is a partition of space into regions induced by some seed points , so that each region ( called a voronoi cell ) consists of all points closer to a specific seed than to any others .",
    "the analysis of voronoi tessellation is used in numerous fields including ecology , hydrology , epidemiology , mining and mobility studies .    in geoplotlib `",
    "voronoi ` can be used to generate a voronoi tessellation visualization .",
    "voronoi cell fill , shading and colors can be configured .",
    "data = read_csv(data / bus.csv ) geoplotlib.voronoi(data , line_color=b ) geoplotlib.show ( )    fig .",
    "[ fig : voronoi ] provides an example of voronoi tessellation of bus stops in denmark .",
    "voronoi cells provide a measure of the space closer to one stop than any others .",
    "the density of points is also captured by the size of voronoi cells , as smaller cells indicate more densely covered areas .",
    "a delaunay triangulation  @xcite is a convenient method for generating triangles meshes from a set of points . in geoplotlib",
    "the ` delaunay ` method can be used for this purpose .",
    "the edge color can be configured to a fixed value , or to encode the length of the edges .",
    "data = read_csv(data / bus.csv ) geoplotlib.delaunay(data , cmap=hot_r ) geoplotlib.show ( )    fig .",
    "[ fig : delaunay ] shows the delaunay triangulation of bus stops , with edges colored according to length .",
    "a convex hull  @xcite of a set of finite points is the smallest convex polygon that contains all the points .",
    "convex hulls can be used for example to visualize the approximate area corresponding to a set of points . in geoplotlib :    geoplotlib.convexhull(data , color , fill = true )    fig .",
    "[ fig : convexhull ] shows the bus stops points split into 6 groups , and each group is represented by a differently colored convex hull .",
    "shapefile  @xcite is a popular file format for describing vector graphics for geographical information systems .",
    "geoplotlib uses pyshp  @xcite to parse the shapefiles .",
    "the line color can be configured and an optional tooltip can be attached to each shape . in the following example we display the _ kommuner _ administrative regions in denmark ( fig .",
    "[ fig : shapefiles ] ) :    geoplotlib.shapefiles(data / dk_kommune / dk_kommune , f_tooltip = lambda attr : attr[stednavn ] , color=[0,0,255 ] ) geoplotlib.show ( )          geojson  @xcite is a human - readable format for encoding geographical data , such as polygons and lines .",
    "geoplotlib can render shapes from the geojson format , and shape color and tooltip can be dynamically altered to encode data . for instance geojson shapes can be used to generate a choropleth where each geographic unit is colored to encode a continuous variable . in the following example ( fig .  [",
    "fig : choropleth ] ) we generate a choropleth of unemployment in usa  @xcite :    def get_color(properties ) : key = str(int(properties[state ] ) ) key + = properties[county ] if key in unemployment : return cmap.to_color(unemployment.get(key ) , .15 , lin ) else : return [ 0 , 0 , 0 , 0 ]    with open(data / unemployment.json ) as fin : unemployment = json.load(fin )    cmap = colormap(blues , alpha=255 , levels=10 ) geoplotlib.geojson(data",
    "/ gz_2010_us_050_00_20m.json , fill = true , color = get_color , f_tooltip = lambda properties : properties[name ] ) geoplotlib.geojson(data / gz_2010_us_050_00_20m.json , fill = false , color=[255 , 255 , 255 , 64 ] ) geoplotlib.show ( )",
    "the ` dataaccessobject ` class is the fundamental interface between the raw data and all the geoplotlib visualizations .",
    "a ` dataaccessobject ` is conceptually similar to a table with one column for each field and one row for each sample .",
    "this paradigm is very common in data analysis terminology , and is equivalent to ndarrays in numpy , and dataframes in pandas and r. a ` dataaccessobject ` can be initialized by reading a comma - separated values ( csv ) file with the built - in ` read_csv ` method , or can be constructed from a python dict , or from a pandas  @xcite dataframe :    dao1 = dataaccessobject(field1 : somevalues , field2 : othervalues ) dao2 = dataaccessobject(mydataframe ) dao3 = read_csv(somefile.csv )    the only two fields required are ` lat ` and ` lon ` , which represent to the geographic coordinates .",
    "most of the built - in visualization implicitly refer to these two fields to locate entities in space . `",
    "dataaccessobject ` also provides a few method for basic data wrangling , such as filtering , grouping , renaming and deleting rows and columns .",
    "any openstreetmap tile server can be configured using the `",
    "tile_provider ` method ( users are kindly asked to check the tile usage policy for the selected server , and make sure to provide attribution as needed ) . a number of common free tiles providers are supported , including stamen watercolor and toner  @xcite , cartodb positron and darkmatter  @xcite .",
    "the built - in visualizations provide various commonly used tools for geographical data visualization .",
    "multiple layers can be combined into a single visualization for richer display . for even more complex visualizations",
    ", geoplotlib allows users to define custom layers . in order to generate a new visualization",
    ", a new class extending ` baselayer ` must be defined .",
    "the custom layer must at least define an ` invalidate ` and a ` draw ` method .",
    "the ` invalidate ` method is called each time the map projection must be recalculated , which typically happens each time that the map zoom - level changes . the ` invalidate ` method receives a ` projection ` object , which provides methods for transforming the data points from the geographic coordinates to screen coordinates .",
    "the screen coordinates can then be passed to a ` batchpainter ` object for the rendering .",
    "a ` batchpainter ` can efficiently draw opengl primitives such as points , lines and polygons .",
    "the ` draw ` method is called at each frame , and typically calls the ` batch_draw ` method of the painter prepared during ` invalidate ` .",
    "the following is a complete example of a custom layer , which simply draws samples as points :    class customlayer(baselayer ) :    def _ _",
    "init__(self , data ) : self.data = data    def invalidate(self , proj ) : x , y = proj.lonlat_to_screen(self.data[lon ] , self.data[lat ] ) self.painter = batchpainter ( ) self.painter.points(x , y )    def draw(self , proj , mouse_x , mouse_y , ui_manager ) : self.painter.batch_draw ( )    the final step needed is to add the layer to the visualization using ` add_layer ` , then call ` show ` :    geoplotlib.add_layer(customlayer(mydata ) ) geoplotlib.show ( )      a custom layer can be also used for creating animated visualizations .",
    "each time the draw method is called , the custom layer can update its state to the next frame . as an example , let us imagine having data containing the position of an object over time .",
    "a simple animation can use a frame counter , and at each frame render only the datapoint at the current instant :    class animatedlayer(baselayer ) :    def _ _",
    "init__(self , data ) : self.data = data self.frame_counter = 0    def invalidate(self , proj ) : self.x , self.y = proj.lonlat_to_screen ( self.data[lon ] , self.data[lat ] )    def draw(self , proj , mouse_x , mouse_y , ui_manager ) : self.painter = batchpainter ( ) self.painter.points(self.x[self.frame_counter ] , self.y[self.frame_counter ] ) self.painter.batch_draw ( ) self.frame_counter + = 1    notice that in this case we do not initialize the ` batchpainter ` inside ` invalidate ` , but we create a new one at each frame .",
    "we also keep track of the current frame with the ` frame_counter ` variable .",
    "even this very simple code is able to visualize a non - trivial animation of an object moving over time . to produce a movie from the animation , individual frames",
    "can be captured using the ` screenshot ` method , and then combined together .",
    "colors can be used as additional mapping for encoding information into a visualization .",
    "continuous variables ( for example points density or the edges distances ) can be mapped to a continuous color scale .",
    "the ` colormap `  class allows a user to perform this conversion .",
    "a ` colormap ` object is constructed by passing any of the matplotlib colorscales , and optionally an alpha value and a number of discretization levels .",
    "the ` to_color ` method performs the conversion from real value to color :    # hot colormap cmap = colormap(hot )    # reds colormap with transparency cmap = colormap(reds , 128 )    # coolwarm colormap with 4 levels cmap = colormap(coolwarm , levels=4 )    # linear scaling cmap.to_color(10 , 100 , lin )    # logarithmic scaling cmap.to_color(10 , 100 , log )    # square - root scaling cmap.to_color(10 , 100 , sqrt )    discrete variables such as categories can be represented using categorical colormaps .",
    "the ` colorbrewer ` method provides access to the colorbrewer  @xcite colors .",
    "categorical colormaps can be also generated from regular colormaps using using ` create_set_cmap ` :    cmap1 = colorbrewer([1,2,3 ] ) cmap2 = create_set_cmap(hsv , [ 1,2,3 ] )      the map view is determined by the projection parameters : the latitude offset , the longitude offset and the zoom level . by default ,",
    "the projection is chosen so to fit all selected points , with the maximum zoom level possible .",
    "the view can changed to a specific portion of the map by passing a ` boundingbox ` object to the ` set_bbox ` method .",
    "a ` boundingbox ` object defines the map view boundaries , and can be constructed in multiple ways .",
    "the most direct way is to specify two ranges of latitudes and longitudes .",
    "alternatively , a ` boundingbox ` can be constructed to fit a subset of points using the ` from_points ` methods .",
    "bbox1 = boundingbox(north=51.3 , west=-124.3 , south=14.8 , east=-56.8 )    bbox2 = boundingbox.from_points(lons , lats )      finally , geoplotlib allows users to create interactive visualizations by provides support for rendering a user interface , and dynamically changing the visualization on user input :    * on - screen text such as information or status can be added using the ` uimanager ` class .",
    "* mouseover tooltips can be configured on arbitrary graphical elements or screen regions using the ` hotspotmanager ` class .",
    "* layers can be configured to react to specific key presses by defining a ` on_key_release ` method",
    "we test the performance of geoplotlib by generating some of the described visualization on a dataset consisting of one million samples , using the default visualization parameters .",
    "all tests consider only the time needed for the actual rendering of the visualization , excluding the time for loading the data .",
    "the measurements are repeated 10 times for each visualization type .",
    "the experiments were performed on a macbook pro 2012 with an intel 2.3 ghz i7 cpu , 8 gb ram and nvidia geforce gt 650 m gpu .",
    "table  [ tab : performance ] shows that in all cases the visualizations require only a few seconds , thus demonstrating that geoplotlib is suitable even for large - scale datasets .",
    ".execution time for one million samples [ cols=\"<,>,>\",options=\"header \" , ]",
    "we have presented geoplotlib , a python toolbox for generating geographical visualizations .",
    "we demonstrated how geoplotlib provides a simple yet powerful api to visualize geographical data , greatly facilitating exploratory data analysis of geographical information .",
    "we believe that geoplotlib can become a powerful tool in the data analyst toolbox , both for analyzing complex spatial patterns and for communicating results in forms of geographical visualizations .",
    "future work includes the addition of more visualization tools , and the integration of spatial analysis methods .",
    "this work is funded in part by the high resolution networks project ( the villum foundation ) , as well as social fabric ( university of copenhagen ) ."
  ],
  "abstract_text": [
    "<S> we introduce geoplotlib , an open - source python toolbox for visualizing geographical data . </S>",
    "<S> geoplotlib supports the development of hardware - accelerated interactive visualizations in pure python , and provides implementations of dot maps , kernel density estimation , spatial graphs , voronoi tesselation , shapefiles and many more common spatial visualizations . </S>",
    "<S> we describe geoplotlib design , functionalities and use cases . </S>"
  ]
}