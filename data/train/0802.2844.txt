{
  "article_text": [
    "the ( ordinary ) generating function of a language  @xmath0 is the sum @xmath1 where @xmath2 is the length of the word .",
    "this sum is a formal power series if there are finitely many words of a given length . in this case",
    ", we say the language is _ proper _ , and we can rewrite  @xmath3 as  @xmath4 , where @xmath5 is the number of words in @xmath6 of length @xmath7 . in the case where we have an unambiguous grammar to describe a regular language or a context free language , one can automatically generate equations satisfied by generating function directly from the grammar .",
    "these are the well known translations : @xmath8 generating functions of formal languages are now a very established tool for algorithm analysis ( see  @xcite for many references ) and increasingly for random generation  @xcite . in this context",
    ", we are also interested in the _ exponential generating function _ of a language .",
    "the two are related by the laplace - borel transform , however it is sufficient for our purposes to think of the exponential generating function @xmath9 as the hadamard product of @xmath3 and @xmath10 ; that is , @xmath11 .",
    "one spectacular feature of generating functions of languages is the extent to which their analytic complexity models the complexity of the language .",
    "specifically , we have the two classic results : first , regular languages have rational generating functions , and second , those context - free languages which are not inherently ambiguous have an algebraic generating function . the context - free languages form a large and historically important subclass of all objects which have algebraic generating functions .",
    "bousquet - mlou provides us  @xcite with an interesting discussion of the nature of combinatorial structures that possess algebraic and rational generating functions , including broad classes that are not representable as context - free languages .",
    "there remain unanswered questions related to other classes of languages , and other classes of functions .",
    "an example of the former is the question of flajolet  @xcite : `` in which class of transcendental functions do generating functions of ( general ) context free languages lie ? ''",
    "an example of the latter is the identification of languages whose generating functions are _ d - finite_. this is an exceptional class of functions  @xcite , which , for the moment , lacks a satisfying combinatorial explanation .",
    "we survey some current understandings in section  [ sec : dfin ] , and provide a language theoretic interpretation of one in section  [ sec : term - point ] .    to capture the analytic complexity of d - finite generating functions we should not expect a simple climbing of the language hierarchy ( to indexed or context sensitive , say ) , as there are different notions of complexity in competition . for example",
    "the language @xmath12 is difficult to recognize , but trivial to enumerate .",
    "likewise , the generating function of the relatively simple looking language @xmath13 has a natural boundary at @xmath14 , which is a trademark of very complex analytic behaviour .      in the absence of the obvious answers",
    ", we consider a very common , and useful operator , the _ shuffle product _ , and discover that it fills in many interesting holes in this story . consider the words @xmath15 ,  @xmath16 and  @xmath17 , and the letters @xmath18 .",
    "we define the shuffle product of two words recursively by the equation @xmath19 here the union is disjoint , and we distinguish duplicated letters from the second word by a bar : @xmath20 . using the shuffle product we can define a class of languages with associated generating functions that form a class that strictly contains algebraic functions ; it allows us to model a very straightforward combinatorial interpretation of the derivative ( indeed in some interesting non - commutative algebras the shuffle product is even called a derivative ) ; and it allows us to neatly consider some larger classes which are simultaneously more complex from the language and generating function points of view .      the aim of this study is two - fold . we hope that a greater understanding of generating function implications of adding the shuffle product to context free languages provides insight to a larger class of combinatorial problems .",
    "the second goal is to understand the combinatorial interpretations of different function classes that arise between algebraic and d - finite .",
    "the shuffle is a natural combinatorial product to consider since it is , in some sense , a generalization of pointing .    in the present work ,",
    "we first examine the shuffle as an operator _ on _ languages , and in the second part we consider the shuffle as a grammar production rule _ to define _ languages .",
    "we show that the shuffle closure of the context free languages is d - finite ; we give the asymptotic growth of coefficients of two classes using shuffle ; we define a special pointing class that describes all d - finite functions ; and discuss the shuffle closure of a language .",
    "in the next section we review interpretations of differential equations .",
    "this is followed by a discussion on the shuffle of languages , and some descriptions of shuffle grammars .",
    "the class of d - finite functions is of interest to the combinatorialist for many reasons .",
    "the coefficient sequence of a d - finite power series is p - recursive : it satisfies a linear recurrence of fixed length with polynomial coefficients , and hence is easy to generate , manipulate , and even `` guess '' their form . by definition ,",
    "d - finite functions satisfy linear differential equations with polynomial coefficients , and thus it is relatively straightforward in many cases to perform an asymptotic analysis on the coefficients , even without a closed form for the generating function .",
    "one important feature that we use here is that a p - recursive sequence grows asymptotically like @xmath21 where @xmath22 , @xmath23 is a polynomial and @xmath24 , are complex numbers .",
    "we contrast this to the asymptotic template satisfied by coefficients of algebraic functions : @xmath25 where @xmath26 is an algebraic number and @xmath27 .",
    "( a very complete source on the theory of asymptotic expansions of coefficients of algebraic functions arising in the combinatorial context is  ( * ? ? ?",
    "* section vii.4.1 ) . )",
    "notable differences include the exponential/ logarithmic factors , the power of a factorial , and the allowable exponents of @xmath7 .",
    "we shall use the following properties of the d - finite functions : the function @xmath28 is d - finite if , and only if , @xmath29 is of the form @xmath30 , where @xmath31 and @xmath32 are algebraic  @xcite ; the hadamard product @xmath33 of two d - finite functions @xmath34 and @xmath35 is also d - finite .      pointing ( or marking ) is an operation that has been long studied in connection with structures generated by grammars .",
    "the point of an word @xmath15 , denoted @xmath36 , is a set of words , each with a different position marked .",
    "for example , @xmath37 . from the enumerative point of view",
    "we remark that the two languages @xmath6 , and @xmath38 , satisfies the enumerative relation @xmath39 and hence @xmath40 .",
    "the pointing operator is relevant to our discussion because of the simple bijective correspondence between @xmath41 and @xmath42 .",
    "the first obvious question is , `` does pointing increase expressive power ? '' . in the case of regular languages and context free languages",
    "the answer is no ; we can add a companion non - terminal for each non terminal that generates a language isomorphic to the pointed language .",
    "let @xmath43 be the pointed version of @xmath44 .",
    "we add the following rules which model pointing : @xmath45 remark how these rules resemble the corresponding product and sum rules for differentiation .",
    "furthermore , from the point of view of generating functions , we know that the derivative of a rational function is rational again , and the derivative of an algebraic function is again algebraic , and so we know immediately that we could not hope to increase the class of generating functions represented by this method .",
    "pointing , when paired with a `` de - pointing '' operator which removes such marks , becomes powerful enough to describe other kinds of constructions , namely labelled cycles and sets  @xcite . in this case",
    "we can describe set partitions , and which has exponential generating function @xmath46 , which is not d - finite .",
    "it takes much more effort  @xcite to define a pointing operator with a differentiation property as in eq . for unlabelled structures defined using set and cycle constructions",
    "it is a fruitful exercise , as one can then generate approximate size samplers with expected linear time complexity .",
    "combinatorial species theory  @xcite provides a rich formalism for explaining the interplay between analytic and combinatorial representions of objects .",
    "in particular , using the vehicle of the the cycle index series , and there are several possibilities on how to relate them to ( multivariate ) d - finite functions  @xcite . in this realm",
    ", given any arbitrary linear differential equation with polynomial coefficients we can define a set of grammar operators that allow us to construct a pair of species whose difference has a generating function that satisfies the given differential equation .",
    "unfortunately at present we lack the intuition to understand what this class `` is '' , specifically , we lack the tools to construct a test to see if any given class or language falls within it .    in section  [ sec : shuf - closure ]",
    "we give a language theoretic interpretation of the derivative of a species ; specifically a grammar system , from which , for any linear differential equation with coefficients from @xmath47 $ ] we can generate a language whose generating function satisfies this equation .",
    "there are several other natural function classes related to the differential equations .",
    "a series @xmath48 $ ] is said to be _",
    "constructible differentiably algebraic ( cdf ) _ if it belongs to some finitely generated ring which is closed under differentiation .",
    "this is equivalent to satisfying a system of differential equations of a given form .",
    "combinatorially , any cdf function can be interpreted as a family of enriched trees .",
    "theorem 3 of  @xcite gives the result that if @xmath49 is cdf , then @xmath50 for some complex constant @xmath51 .",
    "this class is not closed under hadamard product , and any arbitrary cdf function is unlikely to have the image under the borel transform also cdf .",
    "this is the key closure property required for a meaningful correspondence with respect to the shuffle product .    a larger class which contains both cdf and d - finite is differentiably algebraic .",
    "a function is _ differentiably algebraic ( da ) _ if it satisfies an algebraic differential equation of the form @xmath52 where @xmath53 is a non - trivial polynomial in its @xmath54 variables .",
    "( see rubel s",
    "survey  @xcite for many references . )    the set of da functions is closed under multiplicative inverse and hadamard product .",
    "these two facts together are sufficient to prove that _ all of the classes we consider are differentiably algebraic_.      generating functions are useful tool for the automatic studies of certain combinatorial problems .",
    "the shuffle operator has a straightforward implication on the generating function , as we shall see .    with the aid of the shuffle product , flajolet _ et al .",
    "_ @xcite are able to perform a straightforward analysis of four problems in random allocation . by using some systematic translations , they are able to derive integral representations for expectations and probability distributions .",
    "as they remark , the shuffle of languages appears in several places relating to analysis of algorithms ( such as evolution of two stacks in a common memory area ) .",
    "the shuffle of two languages is defined as @xmath55 in order to use a generating function approach , we assume that @xmath56 is a language over the alphabet @xmath57 , and @xmath58 is a language over @xmath59 , and @xmath60 . if they share an alphabet , it suffices to add a bar on top of the copy from @xmath59 .",
    "we consider the shuffle closure of a language in the next section , and first concentrate on the shuffle closure of a class of languages . for",
    "any given class of languages @xmath61 , the shuffle closure can be defined recursively as the ( infinite ) union of @xmath62 , the sequence recursively defined by @xmath63 the shuffle product is commutative and associative  @xcite , and thus the closure contains @xmath64 , for any @xmath65 and @xmath66 .",
    "remark , that for any given language in the closure , there is a bound on the number of shuffle productions that can occur in any derivation tree ; namely , if @xmath67 , that bound is @xmath7 .    in general",
    ", we denote the closure of a class of languages under shuffle as @xmath68 the class of regular languages is closed under the shuffle product , since the shuffle of any two regular languages is regular .",
    "however , the context free languages are not closed under the shuffle product  @xcite , and hence we consider its closure .",
    "the prototypical language in this class is the shuffle of ( any finite number of ) dyck languages .",
    "let @xmath69 be count the number of occurences of the letter  @xmath70 in the word  @xmath15 .",
    "let @xmath71 be the dyck language over the alphabet @xmath72 : @xmath73 we construct an isomorphic version @xmath74 , over the alphabet @xmath75 .",
    "the language @xmath76 has encodes random walks restricted to the quarter plane with steps from u(p ) , d(own ) , r(ight ) , and l(eft ) that return to the origin . by considering the larger language of dyck prefixes , we can models walks that end anywhere in the quarter plane . indeed ,",
    "as the shuffle does preserve two distinct sets of prefix conditions , there are many examples of random walks in bounded regions that can be expressed as shuffles of algebraic languages .",
    "it might be interesting to consider other standard questions of classes of languages for this closure class ; in particular if interesting random walks arise .      in order to show that the shuffle product of two languages with d - finite generating functions also has a d - finite generating function , we consider the following classic observation on the enumeration of shuffles of languages .",
    "if @xmath0 is the shuffle of @xmath56 and @xmath58 , then the number of words of length @xmath7 in @xmath0 are easily counted if the generating series for @xmath77 and @xmath78 are known by the following formula : @xmath79 to see this , recognize that a word in @xmath0 is a composed of two words , and a set of positions for the letters in the word from @xmath56 , this is equivalent to @xmath80 which amounts to the relation between the _ exponential generating functions _ of the three languages : @xmath81 using these relations , we can easily prove the following result .",
    "if @xmath56 and @xmath58 are languages with d - finite ordinary generating functions , then the generating series for @xmath82 , @xmath3 is also d - finite .    as is the case with many of the most interesting closure properties of d - finite functions , the proof follows from the closure of d - finite functions under hadamard product  @xcite .",
    "since d - finite functions are closed under hadamard product , the ordinary generating function is d - finite if and only if the exponential generating function of a sequence is d - finite .",
    "consequently , if @xmath83 and @xmath84 are d - finite , then so are the exponential generating functions , @xmath85 and @xmath86 . by closure under product ,",
    "@xmath9 is d - finite , and thus so is @xmath3 .",
    "this result has the following consequences .",
    "if @xmath56 and @xmath58 are context free languages which are not inherently ambiguous , then the generating series @xmath3 for @xmath82 is d - finite .",
    "any language in the shuffle closure of context free languages has a d - finite generating function .",
    "we continue the example from the previous section using the two dyck languages @xmath71 and @xmath74 .",
    "it is straightforward to compute that @xmath87 .",
    "thus , @xmath5 , the number of words of length @xmath7 in the shuffle is given by @xmath88 we remark that an asymptotic expression for @xmath5 can be determined by first using the vandermonde - chu identity to simplify @xmath5 : @xmath89 and then by applying stirling s formula .",
    "since @xmath90 , we see that it the resulting series is not algebraic .",
    "flajolet uses this technique extensively in  @xcite to prove that certain context - free languages are inherently ambiguous .",
    "thus , we have that our class has generating functions strictly contains the algebraic functions .    thus , we have some elements of a class of function with a nice asymptotic expansion .",
    "a rough calculation gives that that the shuffle of two languages , with respective asymptotic growth of @xmath91 , for @xmath92 respectively , is given by the expression @xmath93 how could one hope to prove directly that all elements in this class have an expansion of the form @xmath94 where now @xmath95 can be _ any _ rational , and @xmath26 is no longer restricted to algebraic numbers ?",
    "it seems that it should be possible to prove this at least for the shuffles of series which satisfy the hypotheses of theorem 3.11  @xcite , using a more generalized form of the chu - vandermonde identity , or for the closure of the sub - class of context - free languages posessing an @xmath96-algebraic generating function . in this case",
    "the @xmath97 , and this simplifies the analyses considerably .",
    "unfortunately , it does not seem like a direct application of bender s method  ( * ? ? ?",
    "* theorem vi.2 ) applies .    theorem  [ thm : nfactorial ] states that the asymptotic form will not contain any powers of @xmath98 greater than 2 .",
    "this illustrates a limitation with the expressive power of the shuffle closure of context free languages : there are known natural combinatorial objects which have d - finite generating functions with coefficients that grow asymptotically with higher powers of @xmath98 .",
    "for example , the number of @xmath99-regular graphs for @xmath100 contains @xmath101 , and the conjectured asymptotic for for @xmath99-uniform young tableaux  @xcite contains @xmath102 .",
    "we extend the first approach by allowing the shuffle to come into play earlier in the story ; we add the shuffle operator to our grammar rewriting rules . shuffle grammars as defined by gischer  @xcite include a shuffle rule , and a shuffle closure rule .",
    "we consider these in section  [ sec : shuf - closure ] .    as we did earlier ,",
    "we first consider languages which have a natural bound on the number of shuffle productions that can occur in a derivation tree of any word in the language .",
    "that is followed by an example of a recursive shuffle grammar to illustrate how powerful they can be .",
    "it has been proven  @xcite that the recursive shuffle grammars do indeed have a greater expressive power , but it is not always clear how to interpret the resulting combinatorial families .",
    "we begin with a second kind of pointing operator .",
    "the traditional pointing operator can be used to model @xmath103 , but one can show that this is , in fact , insufficient to generate all d - finite functions . to remedy this , we define a pointing operator which mimics the concept behind the derivative of a species .",
    "this pointing operator has the effect of converting a letter to an epsilon by ` marking ' the letter .",
    "consequently , a letter can not be marked more than once , and each subsequent time a word is marked , there is a counter on the mark which is augmented .",
    "the pointing operator applied a set of words will be the pointing operator applied to each of the elements of the set .",
    "notationally , we distinguish them with accumulated primes . we give some examples :",
    "@xmath104 the length of the word is the number of unmarked letters in a word ( but the combinatorial objects in the language encode more than just the length in some sense ) .",
    "the number of words in the pointing of a word is equal to its length .",
    "this gives a straightforward interpretation of the derivative : @xmath105 using this definition if @xmath44 is a symbol which ` yields ' through a grammar a language    remark , if we allow concatenation after marking , we could generate two letters in the same word marked with a single prime via concatenation of marked words .    using the marking operation",
    ", we can express most d - finite functions , specifically , by the differential equations that they satisfy .",
    "for example , the series @xmath106 satisfies the differential equation @xmath107 this is modelled by the grammar @xmath108 an alphabet on three letters ( @xmath109 ) allows us to track the origin of each letter .",
    "here is the result of the third iteration of the rules : @xmath110    we will call a pointing grammar one that has rules of the form @xmath111 despite the fact that we allow only _ left _ concatenation , ( a strategy to avoid concatenating pointed words ) these grammars rules can model any d - finite function .",
    "we can define a procedure for finding a language given a defining equation satisfied by a d - finite generating function .",
    "say that a generating function @xmath112 satisfies @xmath113    now substitute @xmath114 and @xmath115    use also the notation that @xmath116 where @xmath117 are the positive terms of the polynomial and @xmath118 are the negative ones .",
    "then if @xmath119 and @xmath120 then @xmath121 satisfies equation .",
    "now we can define a language with a rule for each monomial in and and every terms @xmath122 is represented by a rule of the form @xmath123 where @xmath124 occurs @xmath99 times and @xmath125 , @xmath126 are symbols representing a language whose generating function is either @xmath127 or @xmath128 and @xmath15 is a word of length @xmath70 .",
    "any language which is generated from rules of the form eq .",
    "has a generating function which satisfies a linear differential equation , and hence is d - finite .",
    "we summarize this in the following theorem .",
    "a language which is generated from the rules of the form eq .",
    "has a d - finite generating function .",
    "moreover , any d - finite function can be written as a difference of two generating functions for languages which are generated by rules of this form .",
    "we consider languages generated by the following re - writing rules , where @xmath15 is a word , and @xmath44 , @xmath129 and @xmath130 are non - terminals : @xmath131 for any language generated by rules of the above type , and a fixed set of non - terminals , we construct the graph with non - terminals as nodes , and for every production rule @xmath132 , we make an edge from @xmath44 to @xmath129 and an edge from @xmath44 to @xmath130 .",
    "if this graph is acyclic , we say the language has acyclic shuffle dependencies .",
    "the next section treats languages that have a cyclic dependency .",
    "we prove that this class of languages is larger than those generated by the pointing operator of the previous section , because we can generate a language with a generating function that is not d - finite .",
    "we re - use the dyck languages @xmath71 and @xmath74 defined in section  [ sec : shuf - closure ] .",
    "consider the language generated by the following grammar : @xmath133 the shuffle dependency graph is a tree , and thus this is in our class .",
    "the generating functions of  @xmath44 and  @xmath130 are given by @xmath134 since @xmath135 is not of the form @xmath136 , @xmath137 is not d - finite .",
    "nonetheless , we can prove an asymptotic result about generating functions in this class .",
    "[ thm : nfactorial ] let @xmath6 be a proper language generated by shuffle production in an unambiguous grammar of with rules of the form given in eq .",
    ", on an alphabet with @xmath99 letters .",
    "the number of words of length @xmath7 , @xmath5 , satisfies @xmath138 .",
    "since the grammar generates proper languages , there are no shuffle productions with epsilon .",
    "thus , the derivation tree of a word of length @xmath7 can have at most @xmath7 shuffle productions . in the worst case ,",
    "each one increments the alphabet and so the maximum size of alphabet that a word of length @xmath7 can draw on is then @xmath139 .",
    "the total number of words from this alphabet is @xmath140 .    for @xmath141",
    "the result follows by stirling s formula .",
    "languages in this class will have an infinite alphabet since we use a disjoint union in our shuffle .",
    "however , the number of words of a given length is finite if there is no derivation tree possible that is a shuffle and an @xmath142 . under this restriction",
    ", any word of length @xmath7 comes from an alphabet using no more than more than a constant multiple of @xmath7 letters .",
    "we consider an important class of this type in the next section .",
    "a class of languages which falls under this category are those that are generating using the shuffle closure operator .",
    "the _ shuffle closure _ of a language is defined recursively in the following way : @xmath143 , and @xmath144 . the shuffle closure , is the union over all finite shuffles : @xmath145 equivalently , we write this as a grammar production : @xmath146 the shuffle closure  @xcite provides extremely concise notation .",
    "in particular , they arise in descriptions of sequential execution histories of concurrent processes .",
    "remark , that the closure of the language is one single language , whereas the closure of the class of languages that is one language is an infinite set of languages .",
    "the shuffle closure of a single letter gives all permutations : @xmath147    the generating function of the this language is @xmath148 , and indeed the generating function of the shuffle closure of any word of length @xmath99 is @xmath149 , which is also d - finite .    to prove our formula above",
    ", we express the generating function of @xmath150 in terms of the operators which switch between the ordinary and exponential generating functions .",
    "recall , @xmath151 and we define the laplace operator @xmath152 .",
    "then , @xmath153.\\ ] ] although all of the summands are d - finite , it is possible that the sum is not .    clearly , the shuffle closure does not preserve regularity , and indeed adding it , and the shuffle product to regular languages is enough to generate all recursively enumerable languages .",
    "thus , we see that if there is no bound on the number of shuffles possible in any expression tree , the languages can get far more complex",
    ".    nonetheless the following conjecture seems reasonable , and perhaps it is possible to prove it following starting from eq .  , and necessarily a more sophisticated analysis .",
    "the shuffle closure of a regular language has a d - finite generating function .    -0.3 cm",
    "a next step is to adapt the bolzmann generators to these languages . since we can effectively simulate labelled objects in an unlabelled context",
    ", we can easily describe objects like strong interval trees .",
    "this approach might allow a detailed analysis of certain parameters of permutation sorting by reversals , as applied to comparative genomics  @xcite .",
    "we gratefully acknowledge many discussions from the algebraic combinatorics seminar at the fields institute .",
    "in particular , we acknowledge contributions by n. bergeron , c. hollweg , and m. rosas .",
    "we wish to also acknowledge the financial support of nserc . #",
    "10=              manuel bodirsky , ric fusy , mihyun kang , and stefan vigerske .",
    "an unbiased pointing operator for unlabeled structures , with applications to counting and sampling . in nikhil",
    "bansal , kirk pruhs , and clifford stein , editors , _ soda _ , pages 356365 .",
    "siam , 2007 .",
    "mireille bousquet - mlou .",
    "algebraic generating functions in enumerative combinatorics , and context - free languages . in _",
    "stacs 05 _ , volume 3404 of _ lecture notes in comput .",
    "_ , pages 1835 .",
    "springer , 2005 ."
  ],
  "abstract_text": [
    "<S> there exist very lucid explanations of the combinatorial origins of rational and algebraic functions , in particular with respect to regular and context free languages . in the search </S>",
    "<S> to understand how to extend these natural correspondences , we find that the shuffle product models many key aspects of d - finite generating functions , a class which contains algebraic . </S>",
    "<S> we consider several different takes on the shuffle product , shuffle closure , and shuffle grammars , and give explicit generating function consequences . in the process </S>",
    "<S> , we define a grammar class that models d - finite generating functions .    </S>",
    "<S> marni mishna    mike zabrocki </S>"
  ]
}