{
  "article_text": [
    "many stellar flows are modeled with compressible hydrodynamics methods , with the piecewise parabolic method ( ppm )  @xcite being one of the most popular algorithms .",
    "all extant astrophysical hydrodynamics codes that include a general equation of state augment the ppm algorithm with additional information about the energy of the fluid and use riemann solvers designed to approximate the wave structure of the solution without requiring expensive equation of state calls .",
    "however , little attention in the literature has been given to verifying these simulation codes directly for the degenerate stellar equation of state .",
    "while plenty of shock - tube riemann problems exist for a simple gamma - law gas ( e.g.  @xcite ) , these do not test the algorithms when the gamma of the gas changes dramatically in the problem .",
    "we introduce some shock tube problems for the general stellar equation of state and compare the hydrodynamic solution to the exact solution of the riemann problem for these tests .",
    "different codes make different choices when dealing with a general equation of state , but no comparisons and little verification has been done on these implementations .",
    "the basic verification of these methods for stellar flows is the goal of this paper .",
    "an important diagnostic quantity is the temperature of the gas in the star .",
    "degenerate gases are weakly sensitive to temperature  this creates interesting challenges for hydrodynamics methods .",
    "traditionally , pressure , not temperature , plays a central role in the construction of the fluxes through the interfaces in godunov schemes for compressible hydrodynamics . in the piecewise parabolic method ( ppm ) implementation @xcite , the primitive variables , @xmath0 are reconstructed as parabolas in each zone and we then trace under these profiles to find the information that can reach the interface over the timestep .",
    "any small errors in the thermodynamic consistency of the interface state , introduced from the extrapolation and limiting procedures used in these methods , can lead to a large error in the temperature calculated from the equation of state for a degenerate gas . while not needed in pure hydrodynamic flows",
    ", temperature is an essential quantity for reacting flows and radiation hydrodynamics .",
    "for this reason , we look at the performance of the different methods in preventing artifical undershoots and overshoots in temperature .    in the tests below , we use the publicly - available castro code @xcite as our reference and implement the variations as options in castro .",
    "we also compare to the original dimensionally - split ppm solver in flash  @xcite , that in turn was based on the ppm implementation in @xcite . while we note",
    "that flash has other solvers available , this is the default solver in flash 4.0 .",
    "these codes use slightly different implementations of ppm , based on original method as described by @xcite ( henceforth cw ) and the description in @xcite ( henceforth mc ) .",
    "they also take different approaches to the extension of the algorithm to a general equation of state .",
    "finally , we note a small correction to the scheme used in flash , in appendix  [ app : ge ] .",
    "the conservative euler equations appear , in one dimension , as :    @xmath1 \\frac{\\partial(\\rho u)}{\\partial t } + { { \\frac{{\\partial(\\rho u^2)}}{\\partial x } } } + { { \\frac{{\\partialp}}{\\partial x } } } & = & 0 \\\\[0.25em ] \\frac{\\partial(\\rho e)}{\\partial t } + { { \\frac{{\\partial(\\rho u e + u p)}}{\\partial x } } } & = & 0\\end{aligned}\\ ] ]    where @xmath2 is the density , @xmath3 is the velocity , @xmath4 is the pressure , and @xmath5 is the total specific energy .",
    "the equations are closed via an equation of state , @xmath6 where @xmath7 is the specific internal energy , @xmath8 . for many astrophysical equations of state , temperature ( @xmath9 ) ,",
    "not energy , is an independent variable , and we have @xmath10 and iterations ( usually via the newton - raphson method ) are done to find the @xmath9 that gives the desired @xmath7 , allowing us to then find @xmath4 .",
    "the hydrodynamics equations in terms of the standard set of primitive variables , @xmath0 , are :    @xmath11 \\frac{\\partial u}{\\partial t } + u { { \\frac{{\\partialu}}{\\partial x } } } + \\frac{1}{\\rho } { { \\frac{{\\partialp}}{\\partial x } } } & = & 0        \\label{eq : u } \\\\[0.25em ] \\frac{\\partial p}{\\partial t } + u{{\\frac{{\\partialp}}{\\partial x } } } + \\rho c^2 { { \\frac{{\\partialu}}{\\partial x } } } & = & 0        \\label{eq : pres}\\end{aligned}\\ ] ]    where @xmath12 is the speed of sound defined in terms of the adiabatic index @xmath13 as @xmath14 as most papers deal with a constant-@xmath15 ideal gas equation of state , it is important to note that the pressure equation above is completely general , and can be derived by writing @xmath16 , and differentiating along streamlines with no entropy sources .",
    "no assumptions about the constancy of @xmath15 are needed .    for a general eos",
    ", we need to augment our system with additional thermodynamic information for the riemann solver .",
    "castro adds the evolution of @xmath17 to the system : @xmath18 where @xmath19 is the specific enthalpy .",
    "alternately , @xcite ( henceforth cg ) define @xmath20 and derive an evolution equation for it . differentiating , we find : @xmath21 where we used eqs .",
    "( [ eq : pres ] , [ eq : c ] , [ eq : e ] ) to simplify . if we eliminate @xmath22 in favor of @xmath23 using eq .",
    "[ eq : pres ] , then we arrive at the expression from cg .",
    "we see that for an ideal gas , since @xmath24 , we have @xmath25 .",
    "an analysis of this system ( see any standard hydrodynamics text , e.g.  @xcite ) , including one of the energy equations , shows that there are three characteristic waves that carry jumps in the variables at the speeds : @xmath26 , @xmath27 , and @xmath28 ( with the addition of the @xmath17 or @xmath29 equation , the @xmath3 eigenvalue becomes degenerate ) .",
    "we will use these superscripts , @xmath30 , @xmath31 , and @xmath32 , to distinguish between the waves in the following discussion .",
    "the ppm algorithm advances the solution through a timestep using a finite - volume framework . in each zone , the average value of the state is changed by constructing the fluxes through the interfaces of the zones .",
    "the update appears as :    1 .",
    "construct limited parabolic profiles of the primitive variables , @xmath33 , in zone @xmath34 using the procedure from cw .",
    "this results in a limited parabola , @xmath35 .",
    "we note that alternate limiters exist @xcite and are implemented in castro , but we do not consider those here .",
    "2 .   integrate under each parabola to find the average state that can be carried to each interface by each of the characteristic waves .",
    "we define an integral @xmath36 which is the average of the parabola profile of @xmath33 to the left ( ` @xmath37 ' subscript ) or right ( ` @xmath38 ' subscript ) of the cell for the region swept out the wave @xmath39 ( see figure  [ fig : trace ] ) .",
    "these integrals are : + @xmath40 + with @xmath41 ( see mc for a discussion and motivation ) .",
    "+   tracing under the parabolic profile to construct @xmath42 at the @xmath43 interface.,width=360 ] 3 .",
    "perform characteristic tracing to build the interface states . following cw and mc , the data in zone @xmath34 can be used to build the states on the right interface , @xmath44 , and on the left interface , @xmath34 , @xmath45 , of zone @xmath34 ( see figure  [ fig : states ] for an illustration of the location of each of these states ) .",
    "these appear as : + @xmath46 + this shows that the same set of eigenvectors and eigenvalues are used for these two states .",
    "+   the two interfaces states constructed from the data in zone @xmath34.,width=360 ] + here , @xmath47 and @xmath48 are the reference states , designed to minimize the amount of work done by the characteristic tracing ( see the discussion in mc ) .",
    "the key part of this step is that the sum ( eqs .",
    "[ eq : ql ] and [ eq : qr ] ) only includes the contributions for waves that are moving toward the interface .",
    "if all waves were included , then this would be a no - op ( although , see the discussion in @xcite for hll - type solvers ) .",
    "+ there is a choice in the primitive variable system one can use , and therefore , the resulting left and right eigenvectors : @xmath49 and @xmath50 .",
    "this comes into play with a general gas since flash and castro use a different `` energy '' variable in the eigensystem .",
    "appendix  [ app : eigen ] discusses the options and gives the form of the eigenvectors , and writes the states @xmath51 for each variables in a notation similar to that in cw .",
    "4 .   solve the riemann problem to find the fluxes through each interface and convert the unique interface states back to the conserved variables .",
    "there are several different riemann solvers used for non - ideal gases in the literature .",
    "we discuss some of the options later .",
    "5 .   update the conservative variables using these fluxes .    as a side note",
    ", we remark that much of the ppm method ( in one - dimension ) is done to third order , but the conversion from conservative to primitive variables is only second - order accurate , and this conversion itself can introduce some thermodynamic inconsistency .",
    "@xcite discuss how to derive a 4th - order accurate method .",
    "finally , we note that @xcite and mc described the extension to multiple dimensions .",
    "castro was originally written to closely follow the ppm method as described in mc , which differs from the original ppm implementation ( cw ) , and the original dimensionally - split ppm solver implemented in flash in several ways . since the original paper  @xcite , a number of small changes were introduced , which are summarized here .    *",
    "castro originally set the reference state , @xmath52 , to be the cell - center value .",
    "it has been updated to use the prescription from cw , which uses the integral under the parabola for the fastest wave ( if the wave moves toward the interface ) or the limit of the parabolic interpolant if the wave is not moving toward the interface .",
    "these options are controlled in castro through the castro.ppm_reference and castro.ppm_reference_edge_limit runtime parameters .",
    "* in the characteristic projection , cw use @xmath53 instead of @xmath2 in the eigensystem ( see the form of @xmath54 in cw eq .",
    "mc use @xmath2 .",
    "this is discussed in appendix  [ app : cw ] , and explored in more detail later .",
    "note however that cw do the parabolic reconstruction of @xmath2 , not @xmath55 .",
    "this choice is controlled in castro by the parameter castro.ppm_tau_in_tracing .",
    "* in the characteristic tracing , numerous terms appear of the form @xmath56 , where @xmath57 is some jump in the primitive variable @xmath58 .",
    "cw evaluate these @xmath59 s and any other quantities in the interface state construction using the reference state ( this is equivalent to evaluating the eigenvectors with the reference state ) . mc do not explicitly write out the expansion of the dot product and leave things in terms of eigenvectors which are constructed using the time - level @xmath60 data .",
    "we use the cw method here in castro , which can be selected through the castro.ppm_reference_eigenvectors . * all variants described above use flattening to prevent shocks from becoming too thin , but there is variation in _ when _ this flattening procedure should be applied . in mc ,",
    "the edge states @xmath61 and @xmath62 are constructed , then the ppm monotonization procedure is applied , and finally the flattening is done to each parabola . in the flash split ppm solver , the flattening is done on the @xmath61 and @xmath62 _ before _ the ppm monotonization .",
    "cw do not seem to indicate which of these orderings is preferred . both of these do the flattening before the parabolas are integrated .",
    "we note that the flattening function in cw is written in a different form than in mc , but they are analytically equivalent .",
    "castro by default applies the flattening after the integrals @xmath63 are constructed from the parabola , when constructing the final edge states .",
    "these differences do not seem to influence the solution much .",
    "the different methods can be explored in castro through the parameter castro.ppm_flatten_before_integrals .",
    "we note that not all ppm implementations use flattening  by default enzo  @xcite has it disabled . in the tests that follow ,",
    "we adopt the flash ordering of flattening and then limiting in castro .",
    "finally , cw use a contact steepening algorithm to keep contact discontinuities thin .",
    "mc and castro do not implement this , but the flash split ppm solver does and uses it by default . for the flash runs presented here , we disable contact steepening .",
    "some authors ( e.g.  @xcite ) suggest limiting on the characteristic variables themselves .",
    "this is the default in the latest version of the flash dimensionally - split ppm solver , and we will look at its influence when we compare with flash .",
    "cw do not address how to extend ppm to a general equation of state .",
    "most works cite cg as the inspiration for dealing with a general eos , in particular , for the riemann problem , but other variations exist .",
    "cg predict an interface value of @xmath64 using an equation that captures the thermodynamic evolution along streamlines ( similar to eq .",
    "[ eq : gammae ] ) .",
    "we note that cg did not discuss how to use parabolic reconstruction of the fluid quantities with a general eos",
    ". their @xmath29 does not participate in the characteristic tracing described above ; rather , it is constructed from the predicted interface value of @xmath4 , using the average @xmath65 and @xmath29 on either side of the interface .",
    "since @xmath65 does not explicitly appear in the fluxes , cg argue that taking the cell - average value for the interface is second - order accurate .",
    "the flash dimensionally - split ppm solver reconstructs @xmath29 and @xmath65 as parabolas and integrates under the @xmath66 wave to get their interface values ( note : this does not appear to be documented in the flash paper ) .",
    "this differs substantially from cg , and suggests that they both should obey a hyperbolic pde .",
    "we show in appendix  [ app : ge ] that it is possible to include @xmath29 in the characteristic projection and it can actually jump across all three characteristic waves , not just the @xmath66 wave as assumed in flash . we know of no method to allow for a high - order reconstruction of @xmath65 to the interface . in the construction of the interface states",
    ", flash evaluates the lagrangian sound speed , @xmath67 , using @xmath68 , @xmath69 , but with the cell - centered @xmath65 .",
    "this is correct if we choose not to predict @xmath65 to the interfaces using parabolic reconstruction , but potentially inconsistent with a general eos if you do . in cw , @xmath70 was constant , so the issue of what @xmath65 to use in @xmath71 was not discussed .",
    "castro includes an evolution equation for @xmath17 , which appears as an additional hyperbolic pde in the primitive variable system .",
    "this is reconstructed and enters into the characteristic tracing in the same fashion as all the other primitive variables ( see appendix  [ app : mc ] )",
    ".    solving the riemann problem exactly for a general equation of state is expensive ( see appendix  [ app ] ) .",
    "both the flash dimensionally - split ppm solver and castro use an approximate two - shock riemann solver . here",
    ", the left and right waves are assumed to be shocks and jump conditions are used to link to the state in - between these waves .",
    "this middle state is traditionally called the `` star''-region . to describe the thermodynamics of our general gas",
    ", auxiliary information is needed to supplement the primitive variables .",
    "cg use the same evolution equation that predicted the interface value of @xmath29 to predict the value of @xmath29 in the star - region of the riemann problem .",
    "this is an iterative method that converges to find a value of the nonlinear wavespeeds across the ( presumed ) shocks in the riemann problem .",
    "this is then used to construct the energy in the star - region .",
    "flash uses the parabolically - traced values of @xmath29 as input to the cg riemann solver .",
    "castro instead uses the interface values of @xmath17 along with @xmath2 , @xmath3 , and @xmath4 as input to the riemann problem .",
    "the default solver in castro follows the procedure in ( @xcite ) where jump conditions are used to estimate a value of @xmath17 in the star region .",
    "however the option exists to use the cg riemann solver with interface values of @xmath29 set as : @xmath72 where @xmath73 and @xmath74 are the predicted interface values of @xmath4 and @xmath17 , and @xmath75 indicates whether we are to the left or right of the interface .",
    "there are other potential choices for riemann solvers .",
    "the hll solvers  @xcite use the jump conditions and simple estimates of the wave speeds to give the fluxes directly , and should work for a general gas without issue .",
    "the hllc solver advocated by toro  @xcite would need modification for a general gas because of the construction of the speed of the contact wave .",
    "each of these methods incorporates information about @xmath7 in some fashion .",
    "we note that there is a potential for thermodynamic inconsistency on the interfaces  the quantities @xmath2 , @xmath4 , and @xmath29 or @xmath17 were brought to the interfaces independent of one another , subjected to limiting , flattening , and characteristic tracing .",
    "in fact , they are not independent , and there is an error in how well these interface states obey the equation of state .",
    "little , if any , comparison of astrophysical hydrodynamics codes to exact solutions of the shock tube problem has been done . generating exact solutions for an arbitrary equation of state is straightforward ",
    "these are the exact solutions to the riemann problem .",
    "@xcite outline the procedure to exactly solve the riemann problem . in appendix  [ app ]",
    "we summarize some of the implementation details and give the initial conditions for four problems : a sod - like problem , a double rarefaction , a strong shock , and conditions mimicking the edge of an under - resolved star .",
    "the first three are our stellar eos analogs to the standard test problems from @xcite .",
    "the tests presented here are not exhaustive , but sample some of the flow conditions we might encounter in large - scale simulations .",
    "we note that @xmath29 is not constant in these tests  and in test 4 , it varies through its entire valid range .",
    "we use castro as the main code to test our ideas , but we also run the same tests `` as - is '' with the flash dimensionally - split ppm solver @xcite ( version 4.0 ) just for comparison . this solver in flash can be thought of as the cw method , performing a reconstruction of both @xmath29 and @xmath65 . in the discussion",
    "below , we use `` flash '' to mean this specific dimensionally - split ppm solver .",
    "castro is primarily a 2- and 3-d code , so we do all the runs in 2-d , with the transverse direction simply replicating the shock tube problem .",
    "this means that the transverse flux difference will have no contribution to the interface states . for all castro tests",
    ", we use the iterative riemann solver described in @xcite ( this is enabled with the castro option castro.use_colglaz=1 ) unless otherwise specified .",
    "the main driver in flash is written with dimensional splitting in mind , so the ppm solver takes a cycle consisting of two timesteps with equal @xmath76 ( swapping the ordering of the directional sweeps in multiple dimensions ) and then re - evaluates @xmath76 based on the flow conditions in the domain .",
    "we run flash in 1-d , and to have the timestepping match castro , we allow flash to only take a single timestep per cycle . both codes will modify the last timestep to end at the time defined by the problem .",
    "this change to the timestepping is the only change we made to flash .",
    "we note that some variation of these results can be expected with varying cfl number or using an initially small timestep , but we will not explore these details . all runs use 128 zones , a cfl number of @xmath77 , and take an initial timestep of @xmath78 of the cfl step .",
    "we also restrict the maximum increase in @xmath76 from one step to the next to be 10% .",
    "both codes use the same full stellar equation of state described in @xcite .",
    "a low temperature floor , @xmath79  k , is imposed by the equation of state .",
    "it is important to note how this small temperature floor is applied . during the hydrodynamics",
    "solve , we typically enter the eos with @xmath80 and ask for @xmath81 .",
    "the equation of state most naturally deals with @xmath82 as inputs , so we must do a newton - raphson iteration to get the energy , @xmath83 we want . during the iteration ,",
    "if @xmath84 , then we stop our iteration and return the thermodynamic state corresponding to the temperature floor .",
    "the problem is that @xmath85 , so we either break energy conservation by resetting the hydrodynamic state to @xmath86 or break thermodynamic consistency by keeping @xmath83 . for the simulations presented here",
    ", we found that keeping the thermodynamic consistency is more important to getting a good temperature field , and this is the procedure used in both codes ( this is the default behavior in flash and controlled by the eos_input_is_constant parameter in the & extern namelist in castro ) .",
    "our first comparison is to look at the difference in the solution between the cg riemann solver and the solver presented in @xcite ( henceforth called cgf ) , which was the default riemann solver used in @xcite .",
    "we focus on tests 1 and 4 , since those are the only tests that show substantial differences .",
    "figure  [ fig : riemann ] shows the density , velocity , pressure , and temperature fields for the two cases together with the exact solution .",
    "figure  [ fig : riemann - error ] shows the error against the exact solution for these two runs .",
    "the temperature field shows the most differences ( amongst the two solvers and against the exact solution ) .",
    "we see an oscillation in the cgf temperature solution behind the contact discontinuity and a slightly more pronounced undershoot in the temperature in the cg solver . both are unphysical . looking at the density and pressure errors , we see slightly larger error between the contact and rarefaction in the cgf case than in the cg case .",
    "figure  [ fig : riemann - error - test4 ] shows the comparison for test 4 .",
    "here we see differences in the velocity on the right of the domain and differences in achieving the cool temperature behind the rarefaction .",
    "the cgf gets closer to the temperature minimum .",
    "going forward , we use the cg solver exclusively to avoid the oscillations see in test 1 , but these results leave the door open to exploring other riemann solvers for general equations of state .      here",
    "we examine the effect of using @xmath87 instead of @xmath2 in defining the eigensystem used for the characteristic tracing .",
    "in essence we are comparing the original cw method to castro s implementation of the mc method .",
    "again , only test 1 shows any difference , and again it is slight .",
    "figure  [ fig : test1-mc - cw ] shows the temperature results for test 1 .",
    "the difference here is so slight that it seems that this variation does not really matter .",
    "finally we summarize by comparing castro s method to flash .",
    "in some sense , this allows us to investigate the differences between using @xmath29 vs.  @xmath88 in the interface states ( although , see appendix  [ app : ge ] ) .",
    "we use both the default options in flash ( characteristic limiting ) and a run with the characteristic limiting disabled .",
    "figures  [ fig : summary - test1 ] through [ fig : summary - test4 ] show the results . in test 1",
    ", the castro solution appears to suffer the least amount of temperature undershoot behind the contact , with the flash solution without limiting on the characteristic variables also looking good , and the default flash having the deepest undershoot .",
    "this suggests that the characteristic limiting may not always be a good idea , and its use should depend on what quantities you are looking to optimize . for tests 2 and 3 , there do not seem to be any major differences  all solvers show the same features . for test 4 ,",
    "all of the methods have difficulty resolving the narrow region between the rarefaction and the contact , and largely look the same , except for the velocity , where all the methods have trouble finding the correct velocity at the right edge of the domain .",
    "while the basic ppm algorithm is now 30 years old , there are a large number of variations in the literature .",
    "we looked at the implementations in castro and flash , and performed verification tests on whether they can accurately model stellar flows .",
    "the main , simple message of this paper is that it is possible to do verification of stellar hydrodynamics codes on problems with a real stellar equation of state , and of course , that one should be in the habit of doing this .",
    "part of the inspiration for this exploration was the common appearance of temperature `` funniness '' such as flooring or oscillations ( see , e.g.  the comparisons in @xcite ) in hydrodynamic flows .",
    "these tests can be used to help design new methods that optimize for a particular behavior .",
    "our tests showed that the different approaches that flash and castro take toward incorporating the real equation of state into the solution appear reasonable and consistent with one another .",
    "they also showed that the updates to castro highlighed in   [ sec : variations ] perform well . in developing the structure of the eigensystem",
    "when @xmath29 was added , we made a recommendation for the flash dimensionally - split ppm solver to improve the prediction of @xmath29 to the interfaces .",
    "we stress that the tests here are not complete and much more exploration can be done .",
    "the multidimensional treatment of these methods , and dealing with a general equation of state , is more complex . in an unsplit method",
    "( e.g.  @xcite ) the interface states are first predicted in primitive variable form as if the system were one - dimensional , then converted back to conservative form where a transverse flux difference is added .",
    "this makes the interface states `` see '' what is happening in the transverse directions .",
    "finally , the states are converted back to primitive form for the riemann solve .",
    "this conversion can affect thermodynamic consistency , especially if it is done without involving the eos .",
    "we note that with either @xmath17 or @xmath29 as an auxiliary variable , a transverse term will need to be incorporated .",
    "this is done in castro currently , and an equation of state call can be avoided by using the multidimensional pressure equation throughout the procedure , but a detailed exploration of alternatives may still be illuminating .    finally we suggest that future stellar hydrodynamics codes test against the exact solution to the shock tube problem for the stellar equation of state .",
    "we make our exact riemann solver and all of the castro improvements tested here freely available in the castro code distribution ( the castro sod_stellar/ problem has all the necessary inputs ) .",
    "similar test problems can be designed for the nuclear equation of state used in core - collapse supernovae simulations , although we note that the solution procedure from @xcite we follow does not work for a non - convex equation of state , so modifications will be necessary for a general nuclear equation of state .",
    "this research was supported by nsf award ast-1211563 .",
    "we thank ann almgren , john bell , alan calder , sean couch , and dongwook lee for very helpful discussions and feedback .",
    "here we summarize the eigensystems corresponding to different sets of primitive variables .",
    "we will write the interface state generically as : @xmath89 where @xmath90 refers to the left or right state at an interface and the sum includes only those waves moving toward that interface .",
    "we introduce the shorthand for a jump : @xmath91      the standard set of primitive variables used in castro for the characteristic tracing and prediction of the interface states are @xmath92 .",
    "this evolution is governed by eqs .",
    "[ eq : rho ] to [ eq : pres ] and [ eq : e ] . written in the form",
    "@xmath93 the matrix @xmath94 takes the form @xmath95 with eigenvalues @xmath96 , @xmath27 , @xmath97 , and @xmath28 .",
    "we denote the second instance of the @xmath3 eigenvalue with the superscript @xmath7 , and its associated eigenvector only appears when the primitive variable system is augmented with @xmath88 .    expressing the eigenvectors as a matrix , @xmath98 and @xmath99",
    ", we have @xmath100 the derivation of these follows from @xmath101 and @xmath102 , with @xmath103 .",
    "note that since the @xmath3 eigenvalue is degenerate , @xmath104 .",
    "we can now write out the form of the interface states takes by simply multiplying out the dot products and doing the sum .",
    "we introduce the following notation ( based on cw ) :    @xmath105    for these @xmath59 s and those that follow in the other sections , if the respective wave is not moving toward the interface , then the associated @xmath106 is set to 0 . with these definitions , and eq .  [ eq : app : state ] , we have    @xmath107      cw consider a system with @xmath53 replacing @xmath2 in the primitive variable system and do the characteristic tracing in terms of this .",
    "we will denote this system as @xmath108 .",
    "now eq .  [ eq : rho ] is modified by substituting @xmath109 and expanding : @xmath110 and our system is @xmath111 with @xmath112 this has the same characteristic polynomial , @xmath113 as @xmath114 , so the eigenvalues are unchanged .",
    "the matrices of eigenvectors are : @xmath115    as above , we introduce the notation @xmath116 :    @xmath117    these @xmath59 s ( excluding the ` @xmath7 ' case ) are identical to eq .  3.7 in cw . inserting into eq .",
    "[ eq : app : state ] gives :    @xmath118    if we express @xmath119 and @xmath120 , then eqs .  [ eq : ts ] to [ eq : ps ] are identical to cw eq .",
    "3.6 , giving : @xmath121^{-1}\\ ] ] this substitution says that we do the parabolic reconstruction of @xmath2 , but the characteristic projection with @xmath55 .",
    "we note that in evaluating these expressions , cw use @xmath122 instead of @xmath67 constructed from the time - level n data .      for a general equation of state",
    ", we can combine the ideas of cg and cw to predict @xmath29 on the interfaces by first reconstructing it as a parabola .",
    "this is in spirit of what the flash dimensionally - split ppm solver does , but as we ll show here , there is a correction term that is necessary to account for the jump in @xmath29 across all waves .",
    "we consider the same system as cw , augmented with the evolution equation for @xmath29 .",
    "we ll consider the primitive variable system @xmath123 .",
    "using eq .",
    "[ eq : gammae ] , our system can be written as : @xmath124 with @xmath125 where we write @xmath126 for shorthand .",
    "we notice that the structure and elements of this matrix are identical to that of @xmath127 with the change @xmath128 .",
    "the eigenvectors are then easily computable and found as : @xmath129    as above , we introduce the notation @xmath130 . because of the similarities to the cw system derived above , we see that @xmath131 , @xmath132 , and @xmath133 , and @xmath134 considering only how the @xmath29 state appears in the characteristic tracing , we see : @xmath135 and if we simplify things by taking the reference state , @xmath136 to be zero , then we find : @xmath137\\ ] ] we note that with a constant - gamma gas ( like an ideal gas )",
    ", then @xmath138 and @xmath139 , as expected .",
    "written as above , we see that the @xmath29 interface state can be viewed as the average of @xmath29 under the reconstructed parabola over the region traced by the @xmath140 wave plus a correction term that is proportional to @xmath141 . in flash , to the best of our knowledge ,",
    "only the first term is present in the dimensionally - split ppm solver .",
    "to test the variations on the standard ppm method we need a test problem with an exact solution for the general stellar equation of state .",
    "cg ( section 1 ) describe how to exactly solve the riemann problem for a general equation of state . as with a gamma - law gas , across the left and right waves ,",
    "different functions connect the left / right state to the star state , and the resulting equation for @xmath142 needs to be solved via an iterative procedure .",
    "however , unlike the gamma - law gas , one can not write down a closed - form expression for either the rarefaction or shock cases .",
    "for the rarefaction , a system of odes must be integrated , while for the shock , a root - finding procedure operates on the rankine - hugoniot jump conditions .",
    "note that in the following , we assume a constant composition . adding a composition jump at the interface is straightforward , as the composition will only change across the contact wave ( this follows from the structure of the right eigenvectors ) .",
    "below we summarize the solution procedure from cg , filling in some implementation details :    * _ initial guess : _ we need an initial guess for @xmath142 .",
    "we use the two - shock approximation from @xcite , eq . 9.42 : @xmath143/(w_l + w_r)\\ ] ] with",
    "the initial guess for the wave speeds taken to be the lagrangian sound speed , @xmath144 * _ @xmath142 iteration loop : _ we use perform the newton iteration described in cg . for @xmath145 ,",
    "we apply the shock jump conditions if @xmath146 , and use the riemann invariants for a rarefaction otherwise . in each case , our goal is to find @xmath147 and @xmath148 .",
    "* * _ shock solution : _ for a shock , we solve the rankine - hugoniot jump conditions .",
    "this takes the form ( see cg eq .",
    "12 ) : @xmath149^{-1 }           \\right ) - e_s \\right \\ }   - \\frac{1}{2 } ( p_\\star^2 - p_s^2)\\ ] ] with the solution corresponding to @xmath150 . here , we used the mass rankine - hugoniot condition to express the density in the eos function in terms of @xmath142 and @xmath148 : @xmath151^{-1}\\ ] ] we solve this via newton iteration , using the derivative : @xmath152 we iterate until @xmath153 , where @xmath154 is a small tolerance .",
    "we evaluate that thermodynamic derivative by expressing our eos as @xmath155 : @xmath156 where we used the constancy of pressure as : @xmath157 to eliminate @xmath158 .",
    "+ once we find @xmath148 , we can evaluate @xmath159 using cg eqs .",
    "20 and 23 .",
    "two more thermodynamic derivatives are needed : @xmath160 and in terms of specific volume , @xmath53 , @xmath161 these can be derived in a similar fashion as shown above .",
    "+ we use the approximation for @xmath148 in the case where we know @xmath162 ( cg , eq .",
    "24 ) as the initial guess for @xmath148 .",
    "we estimate a value for @xmath162 from the evolution equation cg derive , cg eq",
    ".  31 . * * _ rarefaction solution : _ in the case of a rarefaction , we simply integrate the riemann invariant odes .",
    "we integate : @xmath163 here @xmath164 is the lagrangian sound speed .",
    "the integration is done simply with 4-th order runge kutta from @xmath165 to @xmath142 .",
    "then @xmath166 and @xmath159 is given by cg eq .",
    "16 . * _ sampling the solution : _",
    "+ once we have solved for the wave structure , we can sample the solution at a given time , @xmath167 . given @xmath168 points , the coordinate centers are @xmath169 for @xmath170 , with @xmath171 .",
    "then we define @xmath172 the speed of the contact @xmath173 tells us which states we need to deal with , and the evaluation of the solution proceeds from cg eq .  15 and following .",
    "+ the only complication is the case where we are sampling inside the rarefaction .",
    "as suggested in cg , we integrate the riemann invariants , however , we found that it is easiest to rewrite them with @xmath3 as the independent variable .",
    "we integrate : @xmath174 we integrate from @xmath175 to @xmath176 we do nt know @xmath177 at the start of the integration ( since @xmath12 depends on the state ) , so we evaluate it each step .",
    "again we use runge - kutta integration , and we adjust our stepsize to stop at the converged @xmath177 .",
    "we use this solution to generate several exact shock tube profiles to compare with the ppm solutions .",
    "it is easier to specify the initial conditions in terms of a jump in @xmath178 instead of @xmath179 and then compute the pressure via the equation of state .",
    "additionally , for this equation of state , we need to specify the composition of the gas  we take it to be pure @xmath180 .",
    "since even different versions of the same equation of state can have slightly different thermodynamics , we do not provide a table of the solution output for the problems listed here .",
    "instead , the complete source code for this exact solver is available in the castro source distribution ( in the ` util / exact_riemann/ ` subdirectory ) .",
    "this can be built with either the general stellar equation of state @xcite or a gamma - law eos .",
    "all the necessary inputs files for the tests described here are provided .",
    "we devise 4 tests .",
    "the first 3 are analogous to tests 1 through 3 in @xcite : test  1 is a sod - like problem , test  2 is a double rarefaction , and test  3 is a strong shock .",
    "the last test , test  4 , mimics the conditions present at the edge of a star when it is not very well resolved on a grid  a common issue with multi - dimensional stellar simulations .",
    "table  [ table : tests ] lists all the parameters , including the length of the domain , @xmath181 , and the end time of the simulation , @xmath167 . all tests used outflow ( zero - gradient ) boundary conditions . for test  4 , because of the large drop in density , the coulomb corrections in the equation of state were disabled to avoid unphysical regions in the thermodynamic space .",
    "@xmath182 & @xmath183 & @xmath184 &   & @xmath183 & @xmath183 &   & @xmath184 & @xmath184 &   & @xmath185 & @xmath186 + @xmath187 & @xmath188 & @xmath184 &   & @xmath188 & @xmath188 &   & @xmath189 & @xmath184 &   & @xmath183 & @xmath183 + @xmath190 & @xmath191 & @xmath191 &   & @xmath192 & @xmath188 &   & @xmath191 & @xmath191 &   & @xmath191 & @xmath191 + @xmath193 & &   & &   & &   & + @xmath194 & &   & &   & &   & +"
  ],
  "abstract_text": [
    "<S> the piecewise parabolic method and related schemes are widely used to model stellar flows . </S>",
    "<S> several different methods for extending the validity of these methods to a general equation of state have been proposed over time , but direct comparisons amongst one - another and exact solutions with stellar equations of state are not widely available . </S>",
    "<S> we introduce some simple test problems with exact solutions run with a popular stellar equation of state and test how two existing codes with different approaches to incorporating general gases perform . </S>",
    "<S> the source code for generating the exact solutions is made available . </S>"
  ]
}