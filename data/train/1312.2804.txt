{
  "article_text": [
    "controlling access permissions to a given file system is an important aspect of data security .",
    "having a secure and flexible way of viewing and managing access control should be a standard requirement of all modern file systems .",
    "this should certainly be true of the new technology file system ( ntfs ) , since ntfs is currently the most common file system in use .",
    "this is mainly due to microsoft s dominance of computing operating systems .",
    "surprisingly , however , no such flexibility exists for the ntfs and the process for determining access controls is cumbersome at best .",
    "the ntfs implements access control with the use of access control lists ( acls ) .",
    "each file system object ( folder or file ) will have an associated acl for controlling access .",
    "an acl contains a list of aces ( access control entities ) .",
    "each ace contains information regarding the interacting user or group , and the level of access that they will be granted .",
    "it is well reported that from observing an ace that the following information can be established @xcite :    1 .   the user or group that the ace applies to .",
    "the level of granted permission for a user or group .",
    "3 .   information regarding the prorogation of the permission down the directory hierarchy    the way in which users are required to interact with aces and acls in the ntfs results in the following peculiarities :    1 .",
    "permissions are interacted with on a per object level , rather than per user @xcite .",
    "this does not allow for the administrator to evaluate user permission across a whole directory structure .",
    "2 .   interacting with a single acl using windows explorer as seen in figure  [ fig : explorerclicks ] requires the traversal of four different interfaces . interacting with multiple acls soon becomes a cumbersome task , which could ultimately result in permissions being overlooked .",
    "not only is the administrator required to examine users or groups within the acl , they have to remember , or explore , group association to evaluate the inheritance of permissions from different groups .",
    "it is well reported that these time - consuming peculiarities result in the potential for errors to occur , which could ultimately result in users being denied access , or in the worst case , the possibility for unwanted access to occur @xcite .",
    "previous efforts to provide a solution to the identified problems @xcite have been mostly successful , however , since their production the ntfs has evolved to allow for the specification of fine- and -coarse grained file system permissions @xcite .",
    "this brings additional complexity as not only can the standard six permission levels be granted , there is the possibility to create ` special permissions ' which are constructed from any combination of the possible fourteen permission attributes .",
    "microsoft provide a variety of command line utilities @xcite and third - party solutions are also available @xcite to examine permission allocation .",
    "however , the shortcomings of these utilities make none of them serve as a single solution .",
    "these shortcomings can be summarised as the inabilities to :    1 .",
    "show both fine- and coarse - grained permissions .",
    "2 .   examine permissions on multiple folders at once .",
    "3 .   evaluate permissions per user rather than per object .",
    "there is insufficient literature available to suggest that freely available tools have been developed to significantly aid with the administration and reporting of ntfs permissions @xcite , as well as providing detailed information regarding the low - level implementation ntfs access control @xcite .",
    "there are few research papers aimed at understanding ntfs access control @xcite and how it can be improved through better administration @xcite .",
    "one author has provided a formal model of ntfs access control , describing fundamentals of rigours implementation @xcite , but there is no indication of the production of any tools that make this available for system administrators .",
    "one paper provides the results for an alternative management interface for ntfs permissions @xcite . through careful consideration to human and computer interaction ,",
    "an application was designed where they could performed administration tasks significantly faster , whilst reducing potential errors .",
    "however , the work is restricted to only viewing file system permissions for a single directory at any one time .",
    "since the work was been published , there is no evidence that the tool has been made available in the public domain .",
    "other work includes using novel ways to represent security policies @xcite .",
    "this work is also concerned with temporal aspects of managing file system permissions , whereas the work in this paper is also concerned with providing useful features to aid the quality of the analysis and help to reduce misconfiguration .",
    "this paper starts by giving a detailed description of how ntfs implements file system permissions , highlighting complexities that result in misconfiguration .",
    "a design is then provided , detailing how a software tool can be used to help overcome the complexities , reducing misconfiguration .",
    "the next section discusses the functionality of the produced piece of software .",
    "this section describes how the functionality can be used to overcome the highlighted complexities by using real - world examples where possible .",
    "finally , we conclude by discussing the beneficial impacts that the solution can bring , and suggest future developments .",
    "in this section we describe the inner - workings of the ntfs as regards to permission management .",
    "it is necessary to investigate the following aspects to motivate the designed solution .",
    "the ntfs follows in the footsteps of microsoft s object - oriented approach to implementation .",
    "this means that the file system is made up of multiple file and folder objects , and any subject within the operating system ( user or process ) can request operations on the objects .    to control access to file system objects , the ntfs implements access control lists ( acls ) by applying an acl to each object within the file system .",
    "each acl will contain a security identifier ( sid ) which is a unique key that identifies the owner of the object and the primary associated group .",
    "the structure of the acl is a sequential storage mechanism which contains access control entries ( aces ) .",
    "an ace is an element within an acl which dictates the level of access given to the interacting subject .",
    "the ace contains a sid that identifies the particular subject , an access mask which contains information regarding the level of permissions and the inheritance flags .",
    "figure  [ fig : acl ] illustrates the logical structure of an acl and associated aces .",
    "an ace within the ntfs is made up of a combination of fourteen individual permission attributes .",
    "the ntfs provides six levels of standard coarse - grained permission that consist of a combination of predefined attributes .",
    "it is also the case that ntfs allows for the creation of special coarse - grained permissions which consist of any combination of the fourteen individual attributes@xcite .",
    "lll bit / bit range & description & example +   + 0 - 15 & object specific access rights & read data , execute , append data + 16 - 22 & standard security access rights & delete ace , write acl , write owner + 23 & access to acl & access system security + 24 - 27 & reserved & n / a + 28 & generic all & @xmath0 + 29 & generic execute & all needed to execute + 30 & generic write & all needed to write to a file + 31 & generic read & all needed to read a file +    the access mask is represented by a thirty - two - bit vector .",
    "table [ tbl : bittbl ] identifies the use of each bit within the vector .",
    "it is evident from the table that the standard coarse - grained permissions are represented as follows ;    ll coarse - grained level & set bit(s ) +   + read & bit31 + write & bit30 + list folder contents & bit31 @xmath1 bit29 + read and execute & bit31 @xmath1 bit29 + modify & bit31 @xmath1 bit29 @xmath1 bit30 + full control & bit28 +    fine - grained special permissions are represented by using the bits within the range of zero to fifteen . creating a special permission for most is a very useful feature ; however , it can often be a source of confusion as it requires the complete understanding of the authority that each attribute holds @xcite .",
    "a good example of having to use special permissions is when you wish to assign a group of users the standard privilege elevation of modify for all the contents of a shared folder .",
    "however , creating an ace with the modify permission on the folder explicitly will result in the user being able to delete the folder itself rather than the child objects ( table  [ tbl : bittbl ] ) . to get around this problem",
    "we would simply assign the group or user the default permission level of modify , and then go and modify the permissions attributes turning it into a special permission so that only subfolders and files can be deleted .",
    "it is necessary to discuss the different mechanisms behind the way that ntfs permissions can propagate throughout the directory structure . within the acl there are two types of ace ; ( 1 ) explicit and ( 2 ) inherited .",
    "explicit entries are those that are applied directly to the objects acl , whereas inherited are those that are propagated from their parent object .",
    "the type of ace allows to determine whether the permission was assigned directly to the directory in question ( explicit ) or if it was inherited from the directory that it resides within ( inherited ) .",
    "this mechanism is controlled by the bit - flag within each ace as seen in figure  [ fig : acl ] .",
    "table  [ inheritance ] shows the standard three coarse - grained levels of propagation and explains their use .    ll p5 cm bit & name & use +   + 1 & container inherit ace & applies the ace to all the children objects + 2 & no propagate inherit ace & propagates the ace to the child object without bit 1 being set , therefore , stopping propagation at the first level .",
    "+ 3 & inherit only ace & the ace only applies to children objects .",
    "( i.e. does not apply to container ) +    furthermore , the creation of fine - grained special file system permissions also allows for the creation of custom fine - grained inheritance rules .",
    "special inherited permissions can be different depending on whether the ace has the container inherit ace bit flag set which controls whether the ace is applied to all the children objects or not .",
    "the creation of fine- grained propagation rules can easily be overlooked and can ultimately result in the unintended propagation of access .",
    "one of the main difficulties with access propagation with the ntfs is correctly evaluating the effective propagation rules .",
    "for a user to view the propagation rules the same situation as viewing the effective permission applies , where the user is required to traverse through the several windows interface to retrieve the required information as seen in figure  [ fig : explorer ] .",
    "accumulation is the possibility for the subject to receive the effective permission of multiple different policies .",
    "this feature is prominent within the ntfs resulting in the possibility for a subject to receive permissions from multiple different aces within the same acl .",
    "furthermore , any subject that interacts with the ntfs can be assigned to any number of groups , which can be entered into the ace .",
    "this means that the user does not have to be directly entered into the ace , they could simply be a member of the group that is entered .",
    "the policy combination is handled within the operating system by the local security authority subsystem service ( lsass ) .",
    "this service combines the permissions together to effectively create the union of all the policies .",
    "there are few complexities within permission accumulation due to the structured way in which aces are processed .",
    "these are :    1 .",
    "explicit permissions take precedence over inherited permissions .",
    "2 .   explicit deny permissions always take precedence over apply permissions .",
    "permissions inherited from closer relatives take precedence over relatives . further away .",
    "it might expect that deny permissions always take precedence over apply permissions to ensure that during the policy combination stage the user always operates as the least possible privilege elevation .",
    "however , the first point regarding explicit permissions taking precedence over inherited permissions can result in a situation where an inherited deny permission is never reached .",
    "considering the folder structure in figure [ eb4i ] , where the folder accounting has an explicit deny permission for the everyone group , which is set to propagate to all its children .",
    "this means that all the subfolders to the accounting folder will receive an inherited deny everyone ace .",
    "if the case was to arise , like in this example , where a single user now requires access to the plan folder , an explicit ace to allow access could be entered .",
    "now when the user visits the plan folder , the lsass would process the explicit allow permission first and allow for it to take precedence over any other permission .",
    "this goes against a fundamental aspect of policy combination to ensure that a deny permission is never ignored .",
    "if the case where a user is able to ignore a deny permission to receive access was to either intentionally or unintentionally arise , the system administrator needs to be made aware of this situation .",
    "to summarise , the precedence hierarchy for policy accumulation is as follows :    1 .   explicit deny .",
    "explicit allow .",
    "3 .   inherited deny .",
    "4 .   inherited allow .",
    "in addition to the explicit permissions taking precedence over inherited permissions , inherited permissions that of closer distance to the invoked object will take precedence over more distant relatives .",
    "for example , a folder s inherited permissions will take precedence over those from their grandparent .",
    "accounting for permission accumulation has currently been made possible by using the standard windows explorer feature of displaying the effective permission .",
    "this feature allows for the user to enter a specified user or group and the effective permission that they hold on that specific directory will be displayed .",
    "unfortunately , performing this evaluation on several folders soon becomes infeasible .",
    "a fundamental aspect of access control within the ntfs is that of group membership . a subject ( group , user or process ) that interacts with the file system can be a member of any group",
    "this means that permissions can be inherited from any of the associated groups if they are entered within any acl .",
    "subjects , in this case users , will often be grouped together by ( separation of duty ) to make management easier , and as hanner , 1999 @xcite identifies , understanding effective file permissions can become significantly more complex by group association . to correctly evaluate a user s effective permissions you would have to know",
    "which groups they are a member of .",
    "we should note that this is not directly related to the mechanism of how ntfs implements access control , it is an unavoidable component of how microsoft allows for users , groups and processes to be managed by group association .",
    "this section describes the design of a solution based on the ntfs s inner - workings which can cause the identified administrative complexities as seen in section [ innerworkings ] .",
    "as previously described , the ntfs allows for the standard set of coarse permissions , but also allows for the creation of special fine - grained permissions .",
    "an alternative method of display , special permissions could be displayed by a character - to - attribute representation . this way a string",
    "can be constructed to display the full granularity of the permission by only using little space .",
    "for example , if a special permission was constructed to have the attributes enabled :    1 .   read ( r ) .",
    "2 .   write ( w ) .",
    "3 .   delete subfolders and files ( dc ) .",
    "4 .   read permissions ( rp ) .",
    "change permissions ( cp ) .    using the character - to - attribute would results in the production of the string ` r - w - dc - rp - cp ' .",
    "after some time the user would become accustom to this relationship and the key would no longer be required .      it has previously been identified that windows explorer allows for the examination of an objects acl , however , it is often the case that evaluating multiple acls is necessary .",
    "a useful way to view multiple acls would be to allow the examination of a whole directory structure simultaneously .",
    "this would provide the means to also examine how the propagation and inheritance aspects of the acls are interacting .",
    "algorithm  [ algo : search ] describes the recursive depth - first examination search technique that has been implemented for analysing the permissions of multiple folders .",
    "this algorithm traverses the directory structure , analysing each directories permissions . in each analysis",
    ", the algorithm evaluates whether :    1 .",
    "it is necessary to display the current acl to the user based on whether it is different from the parent s acl .",
    "each ace in the acl contains a special permission .",
    "3 .   report the ace to the user , displaying the level of permission .      as seen on line 9 of algorithm  [ algo : search ] , a compress function is called if a special permission is identified .",
    "this compress function performs the character - to - attribute mapping as described in section  [ compression ] . in this method ,",
    "an enumerated type is used for changing the permission attributes to the associated character .",
    "filtering of groups is easily performed as shown on line 7 of algorithm  [ algo : search ] where a check is made to ensure that the current ace @xmath2 is not present in the set of groups to filer @xmath3 .",
    "this provides the facility to filter for multiple user or group objects , therefore removing excess information .",
    "when performing a per user search of the file system , algorithm  [ algo : search ] is used , however , line 7 is substituted with a condition to check that the ace in question is the one that is being searched for ( @xmath4 ) .",
    "this means that all groups and user objects are excluded if they are not represent in the filter list . when viewing per user , the filer list contains the user or group that the user wants to analyse .",
    "algorithm  [ algo : search ] identifies provides a search strategy that can report the file system permissions for an entire directory structure , whilst considering compression and filtering .",
    "although the returned permission information is what is visible in the ace , it might not be the user s effective permission as no consideration to permission accumulation as described in section  [ accumulation ] is taken .",
    "algorithm  [ algo : accum ] provides an alternative method where the search concentrates on calculating the effective permission that the user and or group hold .",
    "algorithm  [ algo : accum ] shows an algorithm that can be used to store the explicit @xmath5 and inherited @xmath6 permissions based on the inheritance and propagation .",
    "this algorithm considers both the inheritance and deny hierarchies . for speed purposes the algorithm can identify",
    "deny permissions and stop the algorithm from continuing the examine the acl .",
    "line 16 shows that once the explicit and inherited permissions have been identified a function is then called to calculate the effective permission . in this algorithm",
    "@xmath7 represents a native microsoft .net command that is able to return the effective permission . using this native method",
    "ensures that the correct effective permission is reported .",
    "user and group membership is fundamental mechanism that allows users to inherit file system permissions from group objects .",
    "a simple recursive method can be used to examine a user or groups membership .",
    "there are two possible directions in which the group membership can be analysed .",
    "the first is to examine which groups an object is a member of .",
    "this is where a search is performed to recursively report which groups a user or group is a member of .",
    "the second method is the members of displaying a user or groups members .",
    "this is where a recursive search is performed to reporting on a groups members .",
    "the developed software - based tool is programmed in c # .net 3.5 with the use of the microsoft management console ( mmc ) system development kit ( sdk ) to produce a mmc snapin application .",
    "the motivation behind making the application run in the mmc was to bring consistency with other microsoft management tool , therefore , making the software self - intuitive for the users .",
    "the software runs under the credentials of the executing user , therefore , only receiving access to view file system permissions that they have been assigned to .",
    "the software runs in real - time , processing the desired acls upon request .",
    "this means that the software requires only a minimal amount of installation , and does not require an additional database to store permission entries .",
    "the overheads caused by the application on both the host machine and any interacting file servers are very small and do not affect normal performance at all .    in this remaining of this section , the provided functionality is discussed , using examples where possible .",
    "as seen in figure  [ fig : explorer ] , the interface has three main sections .",
    "firstly on the left is the control pane .",
    "the control pane is where the user can see all the physical and remote mounted ntfs volumes .",
    "the user is able to browse the folder structure of all local and remote drives in a windows standard hierarchical tree view .",
    "in addition , any effective permission searches that the user performs will be listed here .",
    "the middle pane is where the associated results from the item selected within the control pane are displayed . on the right",
    "is the action pane .",
    "this pane contains functionality associated with each of the items selected within the control pane that can affect the contents of the results pane .",
    "the results pane shows the acl for the specified local or remote drive , providing that the executing user has permission to view the acl .",
    "this pane contains the same acl information as present in the windows explorer interface .",
    "the aces are classified into the standard ntfs sets although list folders is not classed as a set because the permission is the same as read & execute , just the propagation is different , which is correctly displayed .      as described in the design ,",
    "the application does have a different way of representing special permissions . to allow the user to easily and correctly see the fine - grained permissions the special permissions are displayed as a hyphen separated character string , where each character is associated with a different special permission attribute .",
    "as shown in figure  [ fig : coarse ] the group ` builtin\\users ' has a special permission entry that is displayed by the hyphenated character string . on further inspection of this permission",
    "it is possible to view the character - to - attribute relationship , which is also displayed in figure  [ fig : coarse ] . after using the application we might start to remember the character - to - attribute relationship , meaning that we do not need to inspect the special permission , therefore , further speeding up the process of reporting fine - grained special permissions .",
    "the results pane also shows information regarding whether each permission ( ace ) is an allow or deny permission , and also the propagation level of each of the ace entries .",
    "another highlighted problem was difficulties within trying to view the acl for multiple folders at any one time .",
    "the developed application avoids this issue by firstly allowing a user to simply traverse the file system in the control pane to view the acl for a single folder , and secondly , allowing the user to view the acls for a whole directory in one traversal view . to reduce the quantity of displayed information and help display",
    "what is useful to the user , by default the traversal view will only show the acl for a folder that is not the same as its parents. a custom filter has also been implemented so that the user can select groups and users that they do not wish to include in the traversal view .",
    "figure  [ fig : traversal ] shows the results pane when the traversal function is applied to the local folder c:\\users .",
    "the illustration also shows the filter interface where the user can select groups that they wish to remove from view .",
    "the traversal view also displays both fine- and coarse - grained permissions in the same way as the individual view where the permissions are classified as the standard or special sets",
    ".          policy combination can be one of the most time consuming aspects of the ntfs when trying to evaluate the permission that a subject holds on any given location . as described earlier , accumulation of deny and access permissions , group membership as well as consideration to the ace processing hierarchy results in several complication factors to the evaluation .",
    "the developed application has a built - in search feature to show the exact effective permissions for a given subject on the selected location .",
    "figure  [ fig : search ] shows the interface after performing a custom search for the user ` simon - pc\\simon ' on the directory ` c:\\user ' .",
    "the same logic applies when performing a search where only permissions that differ from their parent object are displayed by default , and special permissions are displayed using the hyphenated character representation .",
    "we began by examining in detail the workings of access control within the ntfs to highlight the potential causes of complexity , which could ultimately lead to unintended access .",
    "next , we discussed the common usability problems that can be experienced when examining ntfs permissions . following this",
    ", we developed a microsoft management console snapin application to provide a new way of examining ntfs permissions that can help overcome the identified complexities .",
    "we believe that our study and software solution helps to improve file system security by providing an intuitive , efficient and thorough method for permission examination .",
    "this paper provides a contribution to system administrators by aiding them with permission examination and allocation .",
    "the requirement to provide a software - based tool to overcome the identified complexities can be established from the in excess of four thousand downloads the tool has received since production .",
    "this shows that ntfs administrators are actively seeking support for their duties .",
    "in addition to the number of downloads , the tool has also received promotion through a rated software site@xcite and a useful list of system administration tools@xcite .",
    "this emphasises how requirement for such tool .",
    "future work involves allowing for the user to modify file system permissions once a problem has been identified .",
    "another possibility is a software tool that can automatically identify configuration problems and suggest intelligent solutions .",
    "the authors would like to express great thanks to michele puri of the european university institution for passing on vast amounts of knowledge regarding the implementation and administration of ntfs permissions within a large organisation .",
    "thanks should also be expressed to alan radley and malcolm merrington of the university of huddersfield for providing additional insight to the problems and for testing the developed software .",
    "k.  hanner and r.  hrmanseder , `` managing windows nt file system permissions a security tool to master the complexity of microsoft windows nt file system permissions , '' _ journal of network and computer applications _ , vol .  22 , no .  2 , pp .",
    "119  131 , 1999 .",
    "[ online ] .",
    "available : http://www.sciencedirect.com/science/article/pii/s1084804599900863    k.  beznosov , p.  inglesant , j.  lobo , r.  reeder , and m.  e. zurko , `` usability meets access control : challenges and research opportunities , '' in _ proceedings of the 14th acm symposium on access control models and technologies _",
    "sacmat 09.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2009 , pp",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/1542207.1542220    x.  cao and l.  iverson , `` intentional access management : making access control usable for end - users , '' in _ proceedings of the second symposium on usable privacy and security _",
    "soups 06.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2006 , pp . 2031 .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/1143120.1143124    r.  a. maxion and r.  w. reeder , `` improving user - interface dependability through mitigation of human error , '' _ international journal of human - computer studies _ , vol .",
    "12 , pp . 25  50 , 2005 , < ce : title > hci research in privacy and security</ce : title>. [ online ] .",
    "available : http://www.sciencedirect.com/science/article/pii/s1071581905000601    s.  de  capitani  di vimercati , s.  paraboschi , and p.  samarati , `` access control : principles and solutions , '' _ software : practice and experience _ , vol .",
    "33 , no .  5 , pp . 397421 , 2003 .",
    "[ online ] .",
    "available : http://dx.doi.org/10.1002/spe.513                    r.  w. reeder , l.  bauer , l.  f. cranor , m.  k. reiter , k.  bacon , k.  how , and h.  strong , `` expandable grids for visualizing and authoring computer security policies , '' in _ proceedings of the sigchi conference on human factors in computing systems _ , ser .",
    "chi 08.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2008 , pp .",
    "[ online ] .",
    "available : http://doi.acm.org/10.1145/1357054.1357285"
  ],
  "abstract_text": [
    "<S> administrating and monitoring new technology file system ( ntfs ) permissions can be a cumbersome and convoluted task . in today </S>",
    "<S> s data rich world there has never been a more important time to ensure that data is secured against unwanted access . </S>",
    "<S> this paper identifies the essential and fundamental requirements of access control , highlighting the main causes of their misconfiguration within the ntfs . in response , </S>",
    "<S> a number of features are identified and an efficient , informative and intuitive software - based solution is proposed for examining file system permissions . in the first year that the software has been made freely available it has been downloaded and installed by over four thousand users . </S>"
  ]
}