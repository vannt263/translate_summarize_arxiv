{
  "article_text": [
    "holographic optical tweezers ( hot ) use light to manipulate matter at the micron scale @xcite .",
    "dielectric objects , whose refractive index is higher than the surrounding medium can be trapped in regions of high light intensity by electromagnetic forces arising from the scattering of light @xcite . to achieve stable trapping in three dimensions , light has to be strongly focused using a microscope objective with high numerical aperture .",
    "many objects can be trapped simultaneously if more than a single focal spot is generated around the objective s focal plane .",
    "digital holography provides a way to achieve this by applying a computer generated phase mask to a laser beam before it is sent through the microscope objective .",
    "the commercial availability of spatial light modulators ( slm ) has made this task easier by providing a reconfigurable support for computer generated holograms which is connected to a pc through the video output ( usually dvi ) on a standard video card @xcite .",
    "the task of finding a phase mask that efficiently redistributes the available laser power among an array of target focal spots is not a straightforward one .",
    "phase only modulation can easily give rise to unwanted focal spots ( `` ghost traps '' ) or large intensity variations .",
    "we recently proposed an iterative procedure that achieves optimal efficiency and uniformity in a few tens of steps @xcite .",
    "however the resulting computational load is so high that the use of optimized algorithms for dynamic manipulation is limited to those circumstances when the sequence of moves is known in advance and holograms can be then pre - calculated .",
    "such a slowness is often considered as one of the major factors for preferring scanning beam techniques @xcite over digital holography for real - time applications .    in this paper",
    "we demonstrate that cuda @xcite enabled gpus can generate highly optimized holograms at a frame - rate that is fast enough to allow interactive micro - manipulation using strong and uniform trap arrays .",
    "graphic processing units ( gpu ) have brought the power of parallel calculus to personal computers .",
    "the possibility of using a personal computer to easily and cheaply achieve the performances of an expensive cpu cluster is revolutionizing computational physics in a wide range of fields including molecular dynamics @xcite , monte carlo simulations @xcite , finite element analysis @xcite , lattice qcd @xcite .",
    "the compute unified device architecture ( cuda ) is a general purpose parallel computing architecture introduced by nvidia .",
    "cuda provides a parallel programming model and software environment allowing to exploit the massive parallel architecture of modern graphic processing units ( gpu ) for non - graphics applications .",
    "general purpose parallel algorithms can be implemented on a cuda enabled gpu using a small set of c extensions provided by the cuda sdk .",
    "the cuda programming model closely reflects the gpu hardware architecture .",
    "a cuda enabled gpu is composed of a global memory and a variable number of multiprocessors .",
    "each multiprocessor includes eight scalar processor cores , two special function units , 8192 registers , a multithreaded instruction unit and one on - chip shared memory . as a result hundreds of cores",
    "can collectively run thousands of computing threads that can share data without sending it over the system memory bus .",
    "threads are arranged in a grid of blocks and each block is assigned to a multiprocessor . in this way threads that belong to the same block can be synchronized and can cooperate using shared memory . within a block ,",
    "threads are arranged in groups of 32 called warps , threads in a warp are physically executed in parallel and are synchronized .",
    "multiprocessors can only execute one warp at time , however if threads in a warp are waiting to access global memory the multiprocessor can stop executing that warp and switch to another one eliminating memory latency time .",
    "such an execution model requires specific optimization strategies that , for the purpose of the present work , can be summarized in three general rules :    * _ keep multiprocessors busy and hide memory latency . _",
    "+ to this aim one should : 1 .   group threads in a number of blocks that is multiple of the number of multiprocessors .",
    "2 .   choose the number of threads per block as a multiple of 32 to avoid wasting time with unfilled warps .",
    "3 .   maximize the number of active warps by using many threads per block .",
    "4 .   when possible , avoid using conditional instructions that serialize the execution of a warp .",
    "* _ minimize read / write operations on global memory . _",
    "+ writing and reading global memory is very slow and sometimes it can be even better to recalculate than to cache data . shared memory must be used whenever it can reduce the access to global memory .",
    "shared memory is hundreds of times faster than global memory but only 16k are currently available to any multiprocessor . *",
    "_ access global memory with coalesced calls . _",
    "+ when all threads in a half warp execute a read / write instruction , the hardware detects whether threads access consecutive global memory locations and coalesces all these accesses .",
    "in back focal plane phase modulation we use an slm to apply an array of phase shifts to a plane wave at the back focal plane of a focusing optical system ( fig . [",
    "fig : fourier ] ) .",
    "our task here is to calculate the best phase mask so that the modulated wavefront propagating through the optical system is focused onto an array of chosen target spots .        given the phase shift on each pixel @xmath0 the complex field on a target point @xmath1 , with coordinates @xmath2 , is given by @xcite :    @xmath3     iterations of gsw algorithm . ]    where n is the number of pixels , @xmath4 is the imaginary unit and @xmath5 is the phase acquired upon propagation :    @xmath6    where @xmath7 is the effective focal length of the focusing optics ( l3 , l4 , mo in fig .",
    "[ fig : setup ] ) , @xmath8 is the laser wavelength and @xmath9 are the coordinates of the @xmath10 pixel .",
    "if we want to send all the light through a single point @xmath11 then we should set @xmath12 , so that @xmath13 .",
    "when considering multiple traps , a phase only modulation might not be able to split all the available power uniformly among the target points .",
    "for each pixel we now have the multiple choices @xmath5 ( the single trap holograms ) and finding a compromise could seem a hopeless task . a first",
    ", reasonably fast recipe is that of taking the complex superposition of single trap holograms @xcite : @xmath14 where @xmath0 is again the phase of the @xmath10 slm s pixel , @xmath15 is the trap index , m is the number of traps , @xmath16 is a random phase relative to the @xmath15 trap .",
    "such a procedure , usually referred as the random superposition algorithm ( sr ) , is computationally rather fast but usually results in ghost traps and poor uniformities , especially when dealing with ordered structures .",
    "a quantitative measure of the hologram performance can be obtained by defining an efficiency ( @xmath17 ) and a uniformity ( @xmath18 ) parameters as a function of the fractions of total power flowing through the @xmath15 trap @xmath19 : @xmath20-\\min[i_m]}{\\max[i_m]+\\min[i_m]}\\;,\\;\\;\\;\\;\\;\\;\\ ] ] a poor performance may result in particles getting trapped in unwanted ghost trap sites or bead escape from temporary low intensity traps .",
    "when such events are acceptable sr provides a good choice for real time manipulation , but if a higher degree of control is required a more performing algorithm is needed .",
    "a good candidate is the gsw algorithm ( weighted gerchberg - saxton @xcite ) which gives excellent results in terms of efficiency and uniformity .",
    "the basic idea behind gsw is that , if aiming at uniform trap intensities with sr leads to nonuniformities , we may hope that there s a choice of non uniform target traps intensities resulting in an evenly spread trapping light .",
    "gsw allows to calculate such non uniform weights @xmath21 by the iterative procedure illustrated in the flowchart reported in fig .",
    "angle brackets in the _ update weights _ box of fig .",
    "[ gsw ] represent averaging over the trap index @xmath1 .",
    "after a few tens of iterations the procedure converges to almost perfectly uniform trap intensities so that @xmath22 and the weights @xmath21 do nt get updated anymore .",
    "the parallel architecture of gpus is particularly suited for digital holography , whose basic task is that of performing complex algebra over a large array of independent pixels . in the field of digital holography gpus",
    "have been used for real - time holographic microscopy @xcite or holographic displays @xcite . in the field of optical trapping ,",
    "the possibility of generating holograms with real - time frame rate is very attractive for interactive applications .",
    "early attempts always suffered the slowness of cpu resulting in either slow or low efficiency holograms @xcite .",
    "more recently , custom shading programs running on the gpu have been used to achieve a considerable speedup in hologram generation , although always being limited to quick and poorly performing algorithms @xcite .",
    "the cuda architecture makes it a lot easier to implement more complex algorithms in a general purpose environment which is not limited to graphic applications .",
    "when using a cuda enabled video card , results can be also computed directly on the frame buffer avoiding useless memory transfers .",
    "c c c c c rule a@xmath23 & rule b & rule c@xmath24 & t / trap ( ms ) & speedup + [ 0.5ex ] yes & no & no & 1.22 & 100 + yes & yes & no & 0.42 & 290 + no & yes & yes & 0.47 & 260 + yes & yes & yes & 0.35 & 350 + [ 1ex ] +   +   +    [ table : nonlin ]    both of the previously discussed algorithms require the common step of backward light propagation from the m target traps back to the n slm pixels . in our case",
    "the slm is placed in the back fourier plane of the optical system so backward propagation is obtained by eq .",
    "as shown in fig [ backpropker ] , the procedure can be translated into a kernel having as input arguments the full trap structure described by the m coordinates , weights and phases : @xmath25 , @xmath21 , @xmath16 .",
    "sr holograms are obtained by putting @xmath26 and choosing @xmath16 as random phases .",
    "we implemented such a procedure in the single kernel backpropker having a number of threads equal to the number of slm pixels .",
    "each thread evaluates a single phase modulation @xmath0 and stores it in a linear array residing in the global memory . according to rule c in section [ gpu ] , it is important that contiguous threads write on contiguous pixels phase data so that coalesced memory access is guaranteed .",
    "as discussed in rule a in section [ gpu ] we use blocks containing a number of threads that is large and multiple of 32 .",
    "each thread needs to access the full trap structure so that a significant speedup can be achieved by preloading the trap data in the shared memory as prescribed by rule b. in each block only m threads cooperate to read the traps data . at this point",
    "we are ready to evaluate the time performance of backpropker in generating holograms using the sr algorithm . to this aim",
    "we first generate m random phases @xmath16 on the cpu and than store the trap structure on the global memory . using a geforce gtx 260",
    "we can generate 768@xmath27768 sr holograms 350 times faster than using a pentium d 3.2 ghz . the time spent by sr to compute a hologram grows linearly with the number of traps with a time per trap coefficient of 0.35 ms / trap . as an illustration of the relative importance of the considered optimization rules , we compare in table 1 the most efficient kernel , where all this rules are obeyed , to partially optimized kernels .",
    "turning now to the better performing gsw algorithm , in addition to a back propagation kernel we need a procedure to forward propagate the fields from slm pixels to target traps ( eq . [ v ] ) .",
    "such a procedure can be decomposed into two main tasks : i ) calculate the contribution of each pixel to the complex field @xmath28 on the @xmath15 trap s location , ii ) sum up all contribution to obtain @xmath28 .",
    "the second task is a very common one and it s widely discussed in the cuda sdk examples .",
    "this procedure is based on the sum reduction kernel sumredker that performs partial sums , reducing the number of terms .",
    "a loop iterates sumredker until one single term is left containing the sum of all elements . a schematic representation of sumredker",
    "is reported in fig .",
    "[ srk ] where a single block is shown .",
    "each block contains blocksize threads that perform the partial sum of 2@xmath27blocksize elements and writes the result back to the global memory . at the end of sumredker a number of terms equal to",
    "the number of used blocks still remains to be summed .",
    "therefore a sequence of @xmath29blocksize@xmath30 kernels is needed to perform the whole sum .",
    "block will write its partial sum on the @xmath31 address the global memory array . ]",
    "the evaluation of eq .",
    "[ v ] also requires the task of calculating the contribution of the field radiating from each pixel to the total trap field @xmath28 .",
    "such a contribution is obtained calculating the phase shifts @xmath5 in eq .",
    "[ delta ] and building the complex exponentials @xmath32 . in order to reduce read",
    "/ write operations on global memory we use a slightly different version of the sum reduction kernel as the first partial sum step .",
    "the first sumredker will begin having the phase modulations @xmath0 on the global memory locations @xmath33 in fig .",
    "[ srk ] so that we need to calculate complex exponential before the first write on shared memory ( i.e. @xmath34 ) .",
    "the phases @xmath5 ( m*n in total ) are needed both for forward and backward propagation routines . observing that such phases are fixed for a chosen trap geometry",
    ", one could think that precaching them in global memory could save computational time .",
    "however we checked that direct calculation is always faster ( see rule b ) .",
    "once @xmath28s are known , the calculation of the weights @xmath21 is quick and straightforward .",
    "the time required by gsw grows almost linearly with the number of traps or iterations . in fig .",
    "[ fig : test ] we report the computational time per trap per iteration as a function of traps number . deviations from linearity are observed for small traps number evidencing the presence of a time cost which is essentially independent from the number of traps and is probably due to memory read / write operations . as we can see from the figure",
    ", we can neglect the small deviations from linearity and define a time per trap per iteration . using a geforce gtx 260",
    "we obtain 0.44 ms / trap / iteration obtaining a 45x speedup respect to a pentium d 3.2 ghz .",
    ") and uniformity ( @xmath18 ) for gsw generated holograms as a function of the number of traps . the number of gsw iterations is always such to work at a fixed framerate of 20 hz .",
    "holograms with a performance above 90% can be generated at 20hz for trap arrays as large as 16 . ]",
    "our optical tweezers are based upon a nikon te2000u inverted microscope with a 100x objective lens , na 1.4 . to form the trap we use a nd : yag laser , frequency - doubled to give a maximum power of 3 w at 532 nm ( laserquantum opus ) . after expansion and collimation",
    ", the beam from this laser is reflected off a computer - controlled slm ( holoeye lcr 2500 ) .",
    "our slm is based on a liquid crystal reflective micro - display .",
    "a laser beam reflecting off the slm will emerge with a phase retardation that can be modulated on a pixel by pixel basis .",
    "phase modulation is achieved by electrically addressing the pixels and therefore locally reorienting the nematic axis of liquid crystal molecules .",
    "when a grayscale , 8bit depth image is displayed on the slm , a proper pattern of voltages is relayed to the pixels so that each grayscale value is linearly mapped to a phase shift ranging from 0 to 2@xmath35 .",
    "light reflected off the slm is then coupled to the microscope by projecting a demagnified image of the slm plane on the back focal plane of the microscope objective . an array of optical traps is then produced around the front focal plane of the objective located in a colloidal water suspension above the coverslip .",
    "the slm was controlled by a host pc equipped with a nvidia geforce gtx 260 video card .",
    "user input is managed by a gui mainloop thread ( tkinter ) running in a python shell while a python module wraps the cuda library functions providing a high level interface to the gpu hologram generation .",
    "m diameter ( watch the full movie in supplementary online material ) .",
    "the beads are arranged on the vertices of a 5 @xmath36 m side cube which is then rigidly rotated .",
    "bottom row shows the corresponding frames ( holograms ) displayed on the slm . ]    as a demonstration of real - time manipulation using optimized gpu generated holograms , we show the simultaneous trapping and manipulation of eight silica beads ( 2@xmath36 m diameter ) in water .",
    "optimized holograms are obtained with 5 gsw iterations at a rate of 48 hz following user input .",
    "[ fig : frames ] shows three frames from the corresponding slm and ccd timelines .",
    "while a hologram movie is displayed on the slm ( lower timeline ) based on user input , a dynamic 3d micro - hologram , consisting of an array of moving bright light spots , is projected in the sample volume providing dynamical , and real - time reconfigurable optical traps .",
    "trapped beads are imaged with bright light illumination on a ccd camera ( upper timeline ) .",
    "the actual frame - rate is slightly lowered due to time lost in copying from device memory to host memory and then back to the video card output where the slm is attached .",
    "this further delay could be avoided exploiting cuda - opengl interoperability . in this way holograms",
    "could be calculated directly on the frame buffer and displayed on the slm without passing through the host .",
    "ultimately the frame - rate is limited by slm response time , which , for liquid crystal based devices , is typically about 20 hz .",
    "such a frame - rate allows to perform a large enough number of gsw iterations to generate large arrays of traps with a high efficiency and uniformity . in fig.[fig : eu ] we report the efficiency ( @xmath17 ) and uniformity ( @xmath18 ) for gsw generated holograms as a function of the number of traps arranged in a 2d square grid .",
    "the number of gsw iterations is always such that holograms are generated at a fixed framerate of 20 hz .",
    "though efficiency is never lower than 85% uniformity falls down to 0.36 for a 9x9 grid where only one gsw iterations is allowed in order to keep the frame - rate at 20 hz .",
    "we note here that even one single gsw iteration results in a significant improvement in performance over sr which would give an efficiency of 70% and a uniformity of only a few percents .    in conclusion",
    ", we have used a cuda enabled video card to generate optimized holograms for optical trapping with a speedup of 350x ( sr ) and 45x ( gsw ) over the host cpu .",
    "the obtained speedup allowed us to trap and manipulate multiparticle 3d structures with efficient and uniform trap arrays in real time .",
    "our results demonstrate that the high computational load of hologram generation can not be considered any longer as a limiting factor of holographic trapping for real time applications .",
    "we acknowledge support from infm through the seed - project .",
    "k. visscher , g. j. brakenhoff , and j. j. kroll , micromanipulation by multiple optical traps created by a single fast scanning trap integrated with the bilateral confocal scanning laser microscope , cytometry 14 ( 1993 ) 105 - 114 .",
    "e. pleguezuelos , a. carnicer , j. andilla , e. martin - badosa and m. montes - usategui , fast generation of holographic optical tweezers by random mask encoding of fourier components comp .",
    "comm . 176 ( 2007 ) 701 - 709 .",
    "m. reicherter , s. zwick , t. haist , c. kohler , h. tiziani , and w. osten , fast digital hologram generation and adaptive force measurement in liquid - crystal - display - based holographic tweezers , appl . opt .",
    "45 ( 2006 ) 888896 ."
  ],
  "abstract_text": [
    "<S> holographic optical tweezers allow the three dimensional , dynamic , multipoint manipulation of micron sized objects using laser light . exploiting the massive parallel architecture of modern gpus we can generate highly optimized holograms at video frame rate allowing the precise interactive micro - manipulation of 3d structures .    </S>",
    "<S> optical trapping , digital holography , gpu computing , cuda 87.80.cc , 42.40.jv , 01.50.lc </S>"
  ]
}