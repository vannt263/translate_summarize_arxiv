{
  "article_text": [
    "the variety of problems in physics or engineering is formulated by appropriate differential equations with some boundary conditions imposed on the desired unknown function or the set of functions .",
    "there exists a large literature which demonstrates numerical accuracy of the finite element method to deal with such issues @xcite .",
    "clough seems to be the first who introduced _ the finite elements _ to standard computational procedures @xcite .",
    "a further historical development and present  day concepts of finite element analysis are widely described in references @xcite . in sec . 2 of the paper and in its appendixes [ a]-[d ] ,",
    "the mathematical concept of the finite element method is presented .",
    "+ in presented article the well - known laplace and poisson equations will be examined by means of the finite element method applied to _ an appropriate mesh_. the class of physical situations in which we meet these equations is really broad . let s recall such problems like heat conduction , seepage through porous media , irrotational flow of ideal fluids , distribution of electrical or magnetic potential , torsion of prismatic shafts , lubrication of pad bearings and others @xcite .",
    "therefore , in physics and engineering arises a need of some computational methods that allow to solve accurately such a large variety of physical situations .",
    "+ the considered method completes the above - mentioned task .",
    "particularly , it refers to a standard discrete pattern allowing to find an approximate solution to continuum problem . at the beginning",
    ", the continuum domain is discretized by dividing it into a finite number of elements which properties must be determined from an analysis of the physical problem ( e. g. as a result of experiments ) .",
    "these studies on particular problem allow to construct so  called _ the stiffness matrix _ for each element that , for instance , in elasticity comprising material properties like stress  strain relationships @xcite",
    ". then the corresponding _ _ nodal loads _ _ associated with elements must be found .",
    "+ the construction of accurate elements constitutes the subject of a mesh generation recipe proposed by the author within the presented article . in many realistic situations ,",
    "mesh generation is a time  consuming and error  prone process because of various levels of geometrical complexity . over the years ,",
    "there were developed both semi  automatic and fully automatic mesh generators obtained , respectively , by using the mapping methods or , on the contrary , algorithms based on the delaunay triangulation method @xcite , the advancing front method @xcite and tree methods @xcite .",
    "it is worth mentioning that the first attempt to create fully automatic mesh generator capable to produce valid finite element meshes over arbitrary domains has been made by zienkiewicz and phillips @xcite .",
    "+ the advancing front method ( afm ) starts from an _ initial _ node distribution formed on a basis of the domain boundary , and proceeds through a sequential creation of elements within the domain until its whole region is completely covered by them .",
    "the presented mesh algorithm takes advantage from the afm method as it is demonstrated in sec .",
    "3 . after a node generation along the domain boundary ( sec .",
    "3.1 ) , in next steps interior of the domain is discretized by adding _ internal _",
    "nodes that are generated at the same time together with corresponding elements which is similar to peraire _",
    "et al . _ methodology @xcite , however , positions of these new nodes are chosen differently according to the manner described in sec . 3.2 .",
    "further steps improve the quality of the mesh by applying the delaunay criterion to triangular elements ( appendix [ e ] ) and by a node shifting based on the metropolis rule ( sec . 4 ) .",
    "the finite elements method ( fem ) is based on the idea of division the whole domain @xmath1 into a number of finite sized elements or subdomains @xmath2 in order to approximate a continuum problem by a behavior of an equivalent assembly of discrete finite elements @xcite . in the presence of a set of elements @xmath2 the total integral over the domain @xmath1",
    "is represented by the sum of integrals over individual subdomains @xmath2 @xmath3 where @xmath4 denotes a differential operator .",
    "the continuum problem is posed by appropriate differential equations ( e. g. laplace or poisson equation ) and boundary conditions that are imposed on the unknown solution @xmath5 .",
    "the general procedure of fem is aimed at finding the approximate solution @xmath6 given by the expansion : @xmath7 where @xmath8 are shape functions ( basis functions or interpolation functions ) @xcite and all or the most of the parameters @xmath9 remain unknown . after dividing the domain @xmath1 , the shape functions are defined locally for elements @xmath2 .",
    "a typical finite element is triangular in shape and thus has three main nodes .",
    "it is easy to demonstrate that triangular subdomains fit better to the boundary @xmath10 than others e. g. rectangular ones ( see fig .",
    "[ fig : domain ] ) . among the triangular elements family",
    "one can find linear , quadratic and cubic elements @xcite ( see also appendix [ a ] ) .",
    "a choice of an appropriate type of subdomains depends on a desired order of approximation and thus arises directly from the continuum problem",
    ". the higher order of element , the better approximation .",
    "each triangular element can be described in terms of its _ area _ coordinates @xmath11 and @xmath12 .",
    "there are general rules that govern the transformation from _ area _ to cartesian coordinates @xmath13 where set of pairs @xmath14 represents cartesian nodal coordinates . in turn the _ area",
    "_ coordinates are related to shape functions in a manner that depends on the element order . in further analysis",
    "only the linear triangular elements will be used . for them ,",
    "the shape functions are simply the area coordinates ( see appendix [ a ] ) .",
    "therefore , each pair of shape functions @xmath15 could be thought as a natural basis of the @xmath2 triangular element .     and its boundary @xmath10 .",
    "the whole domain @xmath1 could be divided into subdomains @xmath2 with corresponding line segments @xmath16 being part of the boundary .",
    "the idea of division into subdomains ( elements ) constitutes the main concept of the finite element method . ]",
    "we shall consider the linear expression ( [ linear ] ) derived in the appendix [ b ] @xmath17 with the boundary condition @xmath18 on @xmath10 .",
    "in such a simply case of integral - differential problems with a differential operator @xmath19 , the variable @xmath20 in eq .",
    "( [ poisson ] ) only consists of one scalar function @xmath5 which is the sought solution , while the constant vector @xmath21 is represented by the last term in the eq .",
    "( [ poisson ] ) . to find the solution for such a problem means to determine the values of @xmath22 in the whole domain @xmath1 .",
    "the values of @xmath5 on its boundary @xmath10 are already prescribed to @xmath23 . on the other hand , at the very beginning ( eq .  ( [ solution ] ) ) we have postulated that a function @xmath5 could be approximated by an expansion @xmath6 given by means of some basis functions @xmath24 ( for more details see appendix [ a ] ) . thus another possibility to deal with the poisson problem is just to start from the functional @xmath25 ( eq .  ( [ funkcjonal ] ) ) and",
    "build a set of euler equations @xmath26 where @xmath27 and @xmath28 approximates value of the solution @xmath5 calculated at the @xmath29-th mesh node . @xmath30 and after that we calculate the derivative @xmath31 .",
    "moreover , let s simplify our problem by neglecting the last term in the above - presented equation and imposing @xmath32 on the boundary @xmath10 instead",
    ". in that manner , one obtains the expression @xmath33 or in a simplified form @xmath34 it is worth mentioning that some requirements must be imposed on the shape functions @xmath35 .",
    "namely , if @xmath36-th order derivatives occur in any term of @xmath37 then the shape functions have to be such that their @xmath38 derivatives ( pay an attention to the eq .",
    "( [ continuity ] ) ) are continuous and finite . therefore , generally speaking @xmath39 continuity of shape functions must be preserve .",
    "+ in turn , after substituting @xmath40 finally one obtains a set of equations @xmath41 or in matrix description @xmath42 it is worth noticing that the matrix @xmath43 is a symmetric one because of the symmetry in exchange of subscripts @xmath44 and @xmath29 in eq .",
    "( [ matrixk ] ) .",
    "+ now , we are obliged to employ the division of our domain @xmath1 into a set of subdomains @xmath2 .",
    "it gives that @xmath45 therefore , after the transformation to @xmath46 subdomains the expression ( [ important_eq ] ) becomes @xmath47 in fact , the summation in eq .",
    "( [ important_eq2 ] ) takes into account only these elements @xmath2 which contribute to @xmath29-th node , however , because of the consistency in notation all elements are included in the sum with the exception that those @xmath48 functions for which node @xmath29 does not occur in @xmath49-th element are put equal zero .",
    "+ from now , the whole story is to calculate integrals @xmath50 where @xmath51 , @xmath52 ( see appendix [ a ] ) whereas @xmath53  the jacobian of @xmath49-th element , @xmath54 matrix together with @xmath55 operator in new coordinates are evaluated in appendix [ c ] .",
    "an integration over the @xmath49-th subdomain @xmath2 , which is a triangular element with three nodes , enforces the transformation from @xmath36-dimensional global interpolation to the local interpolations given by means of @xmath56 functions where @xmath57 .",
    "that is why in eqs ( [ local_integrals ] ) new indices @xmath58 appear which further are allowed to take three possible values 1,2 and 3 for each element @xmath49 ( the local subspace ) . + as a next step ,",
    "the gauss quadrature is employed to compute above - written integrals numerically as it is described in the appendix [ d ] . and",
    "finally , after incorporating boundary conditions to eq .",
    "( [ important_eq2 ] ) by inserting appropriate boundary values of @xmath6 , the system of equations can be solved .",
    "the domain @xmath1 is a set of points in two - dimensional euclidean plane @xmath59 ( see fig .  [",
    "fig : domain ] ) .",
    "the initial mesh should define the shape of the domain @xmath1 or more precisely its boundary @xmath60 .",
    "let s denote the bd(@xmath1 ) as @xmath10 .",
    "it could form a smooth curve ( like a circle ) or be a polygon . at the beginning it is necessary to assign the starting set of nodes belonging to @xmath10 .",
    "taking into account polygon it is obvious that the initial mesh must consist of its vertices , however , in the case of a smooth curve one can choose the initial mesh differently . in the article , the author concentrate on the polygonal domains ( see fig .",
    "[ fig : domain2 ] ) that can be formed from a smooth curve after placing some initial nodes on its boundary @xmath10 and connecting them by line segments ( chords ) .",
    "a role of misplaced boundary nodes will be discussed in sec .",
    "5 .     and",
    "its boundary @xmath61 after projection to the polygonal domain .",
    "it has eight boundary nodes and one central node . comparing both the initial @xmath1 and the polygonal @xmath62 domain",
    "one can notice that such a simple projection gives rather rough correspondence between them a ) , however , in some cases it could be a sufficient one i. e. when an integrated function changes very slowly in some @xmath63-thick neighbourhood of the boundary @xmath10 b).,title=\"fig : \" ]   and its boundary @xmath61 after projection to the polygonal domain .",
    "it has eight boundary nodes and one central node .",
    "comparing both the initial @xmath1 and the polygonal @xmath62 domain one can notice that such a simple projection gives rather rough correspondence between them a ) , however , in some cases it could be a sufficient one i. e. when an integrated function changes very slowly in some @xmath63-thick neighbourhood of the boundary @xmath10 b).,title=\"fig : \" ]    let s start with determining the principal rectangular superdomain as a cartesian product @xmath64\\times[y_{min } , y_{max}]$ ] where @xmath65 etc . and the following function @xmath66(vertices , radius ) where the variable _ vertices _ determines the number of its sides and the second one gives the _ radius _ of its circumscribed circle .",
    "for instance , one can make use of the octave gnu project ( free open source ) @xcite and creature both the initial nodes @xmath67 and the initial triangles @xmath68 arrays in the case of regular polygon of @xmath35 vertices and lying within a circumscribed circle with a given radius .    function [ p , t ] = @xmath69(n , radius )    1 : phi = [ 0:2*pi / n:2*pi*(n-1)/n] ;    2 : p = [ radius*cos(phi ) , radius*sin(phi ) ] ;    4 : p@xmath70 = sum(p,1)/size(p,1 ) ;    5 : p = [ p ; p@xmath70 ] ;    6 : for i = 1:(n-1 )    7 : t(i , : ) = [ i , i+1 , n+1 ] ;    8 : end    9 : t = [ t ; 1 , n , n+1 ] ;    end    where @xmath72 in line 4 denotes the geometrical center of a figure that is an accurate choice for convex cases like regular polygons . however , not only convex type problems are available by presented routine .",
    "one can set explicitly @xmath67 table of initial points and compute @xmath68 table on its basis ( lines 6 - 9 ) . in such a case",
    "the figure center might require to be shifted , for instance , by the formula given in line 13 .",
    "that center displacement is done in respect to the superdomain center , here set as @xmath73 $ ] point .",
    "the chosen values of weight vector depend on the problem . in fig .",
    "[ fig : domain3 ] , meshes for non - convex figures were obtained with weight = @xmath74 $ ] .",
    "+ 10 : if _ non - convex figure _    11 : p1 = p(sum(p.^2 - repmat(p@xmath70 , [ size(p,1 ) , 1]).^2 , 2 ) @xmath75 0 , :) ;    12 : p2 = p(sum(p.^2 - repmat(p@xmath70 , [ size(p,1 ) , 1]).^2 , 2 ) @xmath76 0 , :) ;    13 : p@xmath70 = sum([weight ( : , 1)*p1 ; weight ( : , 2)*p2 ] , 1)/size([p1 ; p2 ] , 1 ) ;    14 : end    following further steps of the algorithm presented in next sections , one can obtain meshes for different domains @xmath1 ( see few examples in fig .  [ fig : domain3 ] ) .",
    "+ let s introduce a measure that estimates an element area in respect to the prescribed element area @xmath77 designed by the element size @xmath0 .",
    "the measure @xmath78 gives a normalized area for each element .",
    "an estimation of the average deviation from assumed value of the element area provides information of mesh quality in the case for their fairly uniform distribution .     having different shapes . in brackets ,",
    "finally established set of parameters is written : @xmath79  number of mesh points , @xmath80  number of divisions ( according to sec .",
    "3.2 ) , @xmath81  a normalized average element area are presented ; a ) regular polygon  square ( 258 , 8 , 1.002 ) ; b ) regular polygon with 16 nodes ( 376 , 6 , 1.026 ) which approximates circular shape well ; c ) non - regular , convex figure ( 315 , 8 , 1.01 ) ; d ) non - regular , semi - convex figure ( 247 , 6 , 1.071 ) ; and two non  regular , non  convex figures e ) ( 245 , 7 , 0.993 ) and f ) ( 164 , 6 , 1.0003 ) both with weight = [ 0.25 , 0.75].,title=\"fig : \" ]   having different shapes . in brackets , finally established set of parameters is written : @xmath79  number of mesh points , @xmath80  number of divisions ( according to sec .",
    "3.2 ) , @xmath81  a normalized average element area are presented ; a ) regular polygon  square ( 258 , 8 , 1.002 ) ; b ) regular polygon with 16 nodes ( 376 , 6 , 1.026 ) which approximates circular shape well ; c ) non - regular , convex figure ( 315 , 8 , 1.01 ) ; d ) non - regular , semi - convex figure ( 247 , 6 , 1.071 ) ; and two non  regular , non  convex figures e ) ( 245 , 7 , 0.993 ) and f ) ( 164 , 6 , 1.0003 ) both with weight = [ 0.25 , 0.75].,title=\"fig : \" ]   having different shapes . in brackets ,",
    "finally established set of parameters is written : @xmath79  number of mesh points , @xmath80  number of divisions ( according to sec . 3.2 ) , @xmath81  a normalized average element area are presented ; a ) regular polygon  square ( 258 , 8 , 1.002 ) ; b ) regular polygon with 16 nodes ( 376 , 6 , 1.026 ) which approximates circular shape well ; c ) non - regular , convex figure ( 315 , 8 , 1.01 ) ; d ) non - regular , semi - convex figure ( 247 , 6 , 1.071 ) ; and two non  regular , non  convex figures e ) ( 245 , 7 , 0.993 ) and f ) ( 164 , 6 , 1.0003 ) both with weight = [ 0.25 , 0.75].,title=\"fig : \" ]   having different shapes . in brackets ,",
    "finally established set of parameters is written : @xmath79  number of mesh points , @xmath80  number of divisions ( according to sec .",
    "3.2 ) , @xmath81  a normalized average element area are presented ; a ) regular polygon  square ( 258 , 8 , 1.002 ) ; b ) regular polygon with 16 nodes ( 376 , 6 , 1.026 ) which approximates circular shape well ; c ) non - regular , convex figure ( 315 , 8 , 1.01 ) ; d ) non - regular , semi - convex figure ( 247 , 6 , 1.071 ) ; and two non  regular , non  convex figures e ) ( 245 , 7 , 0.993 ) and f ) ( 164 , 6 , 1.0003 ) both with weight = [ 0.25 , 0.75].,title=\"fig : \" ]   having different shapes . in brackets , finally established set of parameters is written : @xmath79  number of mesh points , @xmath80  number of divisions ( according to sec .",
    "3.2 ) , @xmath81  a normalized average element area are presented ; a ) regular polygon  square ( 258 , 8 , 1.002 ) ; b ) regular polygon with 16 nodes ( 376 , 6 , 1.026 ) which approximates circular shape well ; c ) non - regular , convex figure ( 315 , 8 , 1.01 ) ; d ) non - regular , semi - convex figure ( 247 , 6 , 1.071 ) ; and two non  regular , non  convex figures e ) ( 245 , 7 , 0.993 ) and f ) ( 164 , 6 , 1.0003 ) both with weight = [ 0.25 , 0.75].,title=\"fig : \" ]   having different shapes . in brackets , finally established set of parameters is written : @xmath79  number of mesh points , @xmath80  number of divisions ( according to sec . 3.2 ) , @xmath81  a normalized average element area are presented ; a ) regular polygon  square ( 258 , 8 , 1.002 ) ; b ) regular polygon with 16 nodes ( 376 , 6 , 1.026 ) which approximates circular shape well ; c ) non - regular , convex figure ( 315 , 8 , 1.01 ) ; d ) non - regular , semi - convex figure ( 247 , 6 , 1.071 ) ; and two non  regular , non  convex figures e ) ( 245 , 7 , 0.993 ) and f ) ( 164 , 6 , 1.0003 ) both with weight = [ 0.25 , 0.75].,title=\"fig : \" ]      in this section , let s start with the procedure that allows us to add new mesh nodes to the existing ones . the initial configuration of the nodes were already defined .",
    "it * must * define well the shape of the divided area in aspects explained in the description of the figure  [ fig : domain2 ] .",
    "these _ initial _ nodes are called the _ constant nodes _ and are kept immobile through the rest of the algorithm steps .",
    "each triangle could be split up into two new triangles by adding a new node to its longest bar . to avoid producing triangles much smaller than defined by the element _ size _",
    "@xmath0 only part of them could be broken up i. e. these for which the triangle area is one and half times bigger than @xmath82 .",
    "that condition is set in the algorithm by introducing a new control parameter @xmath83 .",
    "the new node is added in the middle of the triangle longest bar .",
    "for each triangle @xmath84 for which @xmath85    find its longest bar @xmath86    calculate a position of a new node @xmath87    if the node @xmath87 is the new one    add it to the nodes table    end    update triangles table by replacing the old triangle @xmath88 by two new triangles based on @xmath87    end    it is worth mentioning that presented above algorithm is not quite optimal because some of the new nodes could produce triangles with one edge divided by a node resulting from splitting up an adjacent triangle .",
    "such triangles are not desirable and are denoted as @xmath89 ( see figures [ fig : domain4]a ) and c ) ) .",
    "thus the previous procedure needs to be improved .",
    "let s add a few extra steps to it :    for each triangle @xmath90 perform checking whether it is of @xmath89 type    if @xmath91    split it up into two new properly defined triangles by connecting so - called _ illegal _ node    with the vertex of @xmath88 lying oppositely to it    remove the old @xmath88 triangle    end    end    figures [ fig : domain4]b ) and d ) show meshes having only desired elements .",
    "the one of the most important issues to definite is the domain boundary . after determining the boundary @xmath61 by the initial _ constant _ nodes ( lines 1 - 18 of the presented below algorithm ) , the next task is to determine which new nodes are lying on boundary line segments @xmath61 ( as it is visible in fig .",
    "[ fig : domain5 ] ) .",
    "these selection is done with a help of the following algorithm :    // for an initial node table @xmath67 ( nodes from 1 to n ) find all pairs of neighbouring vertices :    1 : pairs = zeros ( [ ] , 2 ) ;    2 : for i = 1:(n-1 )    3 : pairs = [ pairs ; i i+1 ] ;    4 : end    5 : pairs = [ pairs ; n 1 ] ;    // connect them by a segment line . if @xmath92 then a function @xmath93 exists and one    //",
    "can find pairs @xmath94 for each such a line segment otherwise a vertical line @xmath95 must be found    6 : diff = p(pairs(:,1 ) , :) - p(pairs(:,2 ) , :) ;    7 : tol = 1.e-5 ;    8 : for i = 1:size(diff , 1 )    9 : if diff(i , 1 ) @xmath96 tol @xmath97 diff(i , 1 ) @xmath76 -tol    10 : coeff(i , 1 ) = diff(i , 2)@xmath98diff(i , 1 ) ;    11 : coeff(i , 2 ) = p(pairs(i , 1 ) , 2 ) - p(pairs(i , 1 ) , 1).*a(i ) ;    12 : else    13 : coeff(i , 1 ) = p(pairs(i ,",
    "1 ) , 1 ) ;    14 : coeff(i , 2 ) = [ ] or _ a value out of bounds i. e. the principal rectangular superdomain _    15 : end    16 : coeff(i , 3 ) = min(p(pairs(i , : ) , 2 ) ) ;    17 : coeff(i , 4 ) = max(p(pairs(i , : ) , 2 ) ) ;    18 : end    establish the table of coefficients @xmath94 once .",
    "for each new node    check whether its coordinates ( @xmath99 ) fulfill any of @xmath93 equations or @xmath100 where @xmath101 and @xmath102    if yes classify it as boundary node    else classify it as internal node    end    end     with corresponding set of line segments @xmath103 being its boundary . a way of finding new nodes",
    "constitutes the main point of the mesh generation process ( see sec .",
    "3.2 ) while a selection of nodes is perform according to the algorithm from sec . 3.3",
    "a ) nodes _ a , b , c , d _ have been classified as boundary nodes whereas b ) nodes _ e , f , g _ have been determined as internal nodes.,title=\"fig : \" ]   with corresponding set of line segments @xmath103 being its boundary .",
    "a way of finding new nodes constitutes the main point of the mesh generation process ( see sec .",
    "3.2 ) while a selection of nodes is perform according to the algorithm from sec . 3.3 a ) nodes _ a , b , c , d _ have been classified as boundary nodes whereas b ) nodes _ e , f , g _ have been determined as internal nodes.,title=\"fig : \" ]",
    "let us define the set of mesh triangles @xmath104 and a set @xmath105 of triangle mesh elements to which a node @xmath106 belongs .",
    "the _ closest neighbours _ @xmath107 of the mesh point @xmath106 are defined as a subset of mesh points @xmath108 @xmath109 note , that the _ closest region _ is not the same what _ the voronoi region _",
    "presented definition is needed to proceed with the metropolis algorithm @xcite which will be applied in order to adjust triangle s area to the desired size given by the element _ size _ @xmath0 . in turn , a proper triangulation is the essence of the finite element method as it is stated in the sec .",
    "2 . let us divide the whole problem into two different tasks .",
    "the first one focuses on finding an optimization for mesh elements being _ the internal elements _ whereas the second one is developed for so - called _ the edge elements_. they are the elements for which one triangle s bar belongs to the boundary @xmath10 of the domain @xmath1 . it is assumed that a proper triangulation gives a discrete set of triangles @xmath110 which approximates the domain @xmath1 well . +    : @xmath111 and @xmath112 applied to each internal node @xmath113 and temperature set as @xmath114 .",
    "the table presents the total number of metropolis steps that was required to obtain the final result shown in b ) . ]",
    "presented method is based on the following algorithm :    * define the element _ size _ @xmath0 and consequently the element _ area _ @xmath82",
    ". * initialize the configuration of triangles and then select the _ internal _ nodes @xmath115 i. e. these nodes does not belong to the domain boundary @xmath10 . * for each node @xmath106 in @xmath116 find its subdomain @xmath117 defined as a set of triangles @xmath118 to which the node @xmath106 belongs . *",
    "perform the metropolis approach to every _ internal _ node @xmath106 within its subdomain @xmath117 .",
    "the metropolis algorithm is adopted in order to adjust an area of each triangle in the node s subdomain to prescribed value @xmath82 by shifting the position of the node @xmath106 ( fig .",
    "[ fig : metropolis ] demonstrates robustness of the metropolis approach ; compare the node distribution in * a ) * and in * b ) * ) .",
    "that adjustment is govern by the following rules : * * find an area of each triangle @xmath119 ( where @xmath120 ) in @xmath117 together with the vectors @xmath121 for each @xmath122 connected to node @xmath106 * * calculate the length of each triangle edge @xmath123 and its deviation @xmath124 from the designed element size @xmath0 i. e. @xmath125 * * calculate the new position of the node @xmath126 as @xmath127 where @xmath128 are weights corresponding to magnitude of @xmath129-th force applying to node @xmath106 . finally , they were set to the constant value @xmath130 . *",
    "* find an area of each triangle @xmath131 in @xmath117 after shifting @xmath132 * * apply an energetic measure @xmath133 to a sub - mesh @xmath2 . that quantity could be understand in terms of a square deviation of a mesh element area from the prescribed element _ area",
    "_ @xmath82 .",
    "therefore , in the presented paper the @xmath134 is defined as a sum of a discrepancy between each triangle _ area _ @xmath119 and @xmath82 after moving node @xmath106 and prior it , respectively @xmath135 if the obtained value of an _ energetic _ change is lower than zero the change is accepted .",
    "otherwise , the metropolis rule is applied i. e. the following condition is checked @xmath136 where @xmath137 is a uniformly distributed random number on the unit interval @xmath138 and @xmath139 denotes temperature . * * the above - presented algorithm is repeated unless an assumed tolerance will be achieved .",
    "+ in order to reach a better convergence of the presented method several other improvements could be adopted .",
    "for instance , the change in the length of the triangle edge could be an additional measure of mesh approximation goodness .",
    "that condition will ensure a lack of elongated mesh elements i. e. elements with very high ratio of its edge lengths ( to see such _ skinny _ elements look at fig .",
    "[ fig : metropolis]a ) ) .",
    "the metropolis algorithm applied to boundary nodes slightly differs from the above - described case and could be summarize in the following steps :    * find all the _ boundary _ or _ edge _ nodes i. e. nodes for which @xmath140 . *",
    "find triangles in the _ closest _ neighbourhood of the considered @xmath141 node .",
    "then calculate an area of each triangle @xmath142 . *",
    "calculate the force acting on each boundary node except _ the constant nodes _ and coming from * only * two boundary nodes connected to it .",
    "this imposes the following constrain on the motion of the @xmath143-th node in order to keep it in the boundary @xmath10 @xmath144 where @xmath145 is defined as previously .",
    "the force is tangential to the boundary @xmath10 .",
    "* similarly , find an area of each triangle @xmath146 after shifting @xmath147 according to the force @xmath148 .",
    "* adopt the metropolis energetic condition to the boundary case i.e. @xmath149 where @xmath139 denotes temperature and a random number @xmath150 as previously .",
    "the main point of this part is to ensure that the boundary nodes are moved just * along * the boundary @xmath10 ( see appendix [ f ] ) .",
    "figure [ fig : domain6 ] presents the square domain ( with the edge length equal @xmath151 ) initially divided into a set of new elements ( the upper picture ) .",
    "then a mesh generation process can follow two different ways .",
    "the first of them , denoted as ( 1 ) , is done after switching off the delaunay procedure and leads to the uniform distribution of 512 identical elements with a normalized triangle area @xmath152 ( equal 0.0039 ) . on the other hand , the second way ( 2 ) of creating new elements with help of the delaunay routine gives almost uniform mesh with a normalized average area equal 1.015 . thus employing such an optimization pattern returns a result closer to desired one whereas the ( 1 ) way is much faster and in that particular case",
    "also does not make use of the metropolis procedure . that behavior is caused by a symmetry in element and in node distribution , therefore no node shifting is needed .",
    "that example should clarify why other method than merely finding the geometrical center of each element is required to enhance a mesh generation routine .    .",
    "the second way ( 2 ) makes use of the delaunay and the metropolis routines giving back almost uniform mesh of 459 elements with a normalized average area equal 1.015 . ]",
    "* mesh optimizations * +    figure [ fig : domain7 ] presents results obtained by enriching the proposed mesh generator by the metropolis approach .",
    "considered meshes were constructed for two non ",
    "regular shapes , one of them is also of non  convex type fig .",
    "[ fig : domain7]a ) . as it is clearly seen in fig .",
    "[ fig : domain7 ] a mesh quality was in that way enhanced . however ,",
    "analysis of computed mesh parameters ( @xmath153 and @xmath154 ) is not sufficient to explain such mesh improvement .",
    "thus , to quantify meshes with non - uniformly distributed elements ( see upper cases of fig .  [",
    "fig : domain7 ] ) , the following measure is put forward @xmath155 . the better fitting to the prescribed element area the smaller value of @xmath156 . computed",
    "values of @xmath156 vary from 0.22 for not optimized meshes to 0.15 after employing the metropolis rule .",
    "note that for both domains a number of very small elements definitely decreased ( see also fig .",
    "[ fig : metropolis ] ) .",
    "moreover , the metropolis approach offers wide range of feasible mesh manipulations that could be achieved by playing with parameters like the shifting force @xmath130 , the condition of ending optimization ( assumed tolerance ) and temperature @xmath139 .",
    "the shifting force @xmath130 can differ from node to node or can have the same value for all of them . furthermore the force strength could change after each node division due to the decline in element areas .",
    "the higher value of the accepted force strength @xmath130 , the faster the mesh generation routine .",
    "however , putting too high or too law value of @xmath130 can enormously increase steps of optimization .",
    "figure [ fig : domain8 ] shows above  discussed meshes enhanced by additional switching on another kind of optimization i. e. the delaunay criterion ( see appendix [ e ] ) .",
    "both routines were applied in the ordered way i. e.a mesh reconfiguration by the delaunay method was added before a node shifting via the metropolis routine .",
    "this improves final results in both considered cases .",
    ", @xmath157 = 168 , @xmath158 , and b ) @xmath159 , @xmath157 = 244 , @xmath160.,title=\"fig : \" ] , @xmath157 = 168 , @xmath158 , and b ) @xmath159 , @xmath157 = 244 , @xmath160.,title=\"fig : \" ]    to examine mesh stability , let s introduce a small perturbation to a mesh configuration obtained by the metropolis procedure .",
    "applying the metropolis algorithm leads to the global optimum in element distribution for a given number of nodes , thus resulted mesh should have the stable configuration . to test this , the delaunay routine was added one more time just after the metropolis optimization . the highest found changes in mesh quality are depicted in figure [ fig : domain9 ] .",
    "the domains are built with meshes having a little bit different parameters than earlier .",
    "in other tested cases no mesh reconfiguration has been detected .",
    "the results show that a small exchange in an element configuration in some cases is able to slightly modify the mesh .",
    "however , the mesh exchange is hardly seen in the figure [ fig : domain9 ] .",
    "thus , on the other hand , that example demonstrates the stability of the proposed algorithm and proves that the considered mesh generator can be used with confidence .",
    ", @xmath157 = 164 , @xmath161 , and b ) @xmath159 , @xmath157 = 245 , @xmath162.,title=\"fig : \" ] , @xmath157 = 164 , @xmath161 , and b ) @xmath159 , @xmath157 = 245 , @xmath162.,title=\"fig : \" ]    * fem solutions * +    having above  generated meshes one can perform some computations on them .",
    "thus , let s solve numerically two examples of 2d poisson problem and then compare them with their exact solutions .",
    "the numerical procedure is based on the finite element method already described in sec .",
    "2 . additionally , in that way mesh accuracy will be tested .",
    "the first considered differential problem is embedded within the rectangular domain @xmath163\\times [ 0 ~1]$ ] ( it constitutes the _ mesh _ ) and has the following form : @xmath164 with the boundary conditions @xmath165 for @xmath166 and @xmath167 , and @xmath168 otherwise .",
    "the solution is given by the series @xmath169 with @xmath170 .",
    "figure [ fig : domain10 ] depicts a comparison between an approximation of the analytical solution ( eq .  ( [ rect_fem ] ) ) and a fem result obtained on the _ mesh_. the _ mesh _ were tested for two @xmath0 values : 0.1 and 0.06 . in the case of a rectangular domain the boundary conditions are fulfilled exactly",
    ". therefore no _ boundary _ perturbation influences the final result .",
    "analysis of the fig .",
    "[ fig : domain10 ] confirms a good quality of the mesh allowing to solve accurately the problem under consideration .    ) with the boundary condition @xmath171 set as 1 .",
    "first of them has been obtained by the series ( [ series ] ) with @xmath172 and presents an approximation of the exact solution whereas the second one constitutes a fem approximation .",
    "computations were performed for two different meshes .",
    "the maximum of @xmath173 in the a ) case for the element size @xmath174 whereas in the case b ) max of @xmath175 for the bigger element size @xmath176.,title=\"fig : \" ] ) with the boundary condition @xmath171 set as 1 .",
    "first of them has been obtained by the series ( [ series ] ) with @xmath172 and presents an approximation of the exact solution whereas the second one constitutes a fem approximation .",
    "computations were performed for two different meshes .",
    "the maximum of @xmath173 in the a ) case for the element size @xmath174 whereas in the case b ) max of @xmath175 for the bigger element size @xmath176.,title=\"fig : \" ]    let s look on one more differential problem .",
    "the following poisson equation has been solved both numerically and analytically within a circular domain of unit radius @xmath177 with the boundary condition @xmath178 .",
    "the numerical procedure is again based on the fem approach .",
    "the exact solution is given by the expression @xmath179 .",
    "figure [ fig : domain11 ] presents the analytical result versus a numerical one .",
    "their comparison shows that discrepancy between them is less than 0.01 .",
    "thus , both solutions are in very good quantitative agreement , despite the fact that boundary nodes of the used mesh ( fig .  [",
    "fig : domain3]b ) do not fulfilled the boundary condition precisely ( fig .  [",
    "fig : domain11]a ) .",
    "it is caused by imperfection in this approximation of designed circular shape ( see also fig .  [",
    "fig : domain3 ] ) . on the other hand , the second mesh ( fig .  [ fig : domain11]b )",
    "has higher element size ( @xmath180 ) than the first one ( @xmath176 ) and in that way the boundary condition is fulfilled exactly on the @xmath61 . summarizing ,",
    "both meshes suffer some weaknesses but they do not influence remarkable solutions .    ) for two meshes with different element sizes @xmath0 .",
    "the maximum of discrepancy between both solutions was also computed and has the following value @xmath181 in the case a ) with the element size @xmath176 and in the b ) case with the element size assumed equal 0.28 @xmath182.,title=\"fig : \" ] ) for two meshes with different element sizes @xmath0 .",
    "the maximum of discrepancy between both solutions was also computed and has the following value @xmath181 in the case a ) with the element size @xmath176 and in the b ) case with the element size assumed equal 0.28 @xmath182.,title=\"fig : \" ]    all figures presented in the paper were prepared using the matlab package .",
    "the proposed mesh generator offers a confident way to creature a pretty uniform mesh built with elements having desired areas .",
    "mesh optimizations are done by means of the metropolis algorithm and the delaunay criterion . finding that computed measures @xmath153 and @xmath183 have pretty good values allows to classify the presented mesh generator as the good one .",
    "the meshes were also examined in the context of their stability to some reconfigurations .",
    "it was demonstrated that _ perturbed _",
    "meshes hardly differ from _ non  perturbed _ ones .",
    "moreover , the mesh was tested by solving the poisson problem on it making use of the finite element method .",
    "the obtained results are in very good quantitative agreement with analytical solutions .",
    "this additionally underlines the good quality of the proposed mesh generator as well as efficiency of the fem approach to deal with differential problems .",
    "the lagrange polynomials @xmath184 are given by the general formula @xcite @xmath185 it is clearly seen from the above - given expression that for @xmath186 and for @xmath187 such that @xmath188 . between nodes values of @xmath184",
    "vary according to the polynomial order i. e. @xmath38 which is the order of interpolation . making use of these polynomials",
    "one can represent an arbitrary function @xmath189 as @xmath190 on the other hand , when the interpolated function @xmath5 depends on two spacial coordinates one can define basis polynomials in the form @xmath191 where @xmath192 describe raw and column number for the @xmath29-th node in a rectangular lattice ( rows align along @xmath193 and columns along @xmath194 direction , respectively ) . and",
    "consequently , the set @xmath195 is a basis of a @xmath36-dimensional functional space because each function @xmath196 for @xmath197 equals @xmath198 at the interpolation node @xmath199 and @xmath200 at others .",
    "it is easy to demonstrate that such functions are orthogonal @xcite . instead of spacial",
    "coordinates any other coordinates can be considered . in the case of mesh elements",
    "the natural coordinates are the _ area _ coordinates @xmath201 defined already in the sec . _ the mathematical concept of fem_. on that basis the shape functions could be constructed as a composition of these three basis polynomials i. e. @xmath202 where the values of @xmath94 and @xmath203 assign the polynomial order in each @xmath204-th coordinate and @xmath205 and @xmath206 denote the @xmath29-th node position in a triangular lattice ( i. e. in the coordinates @xmath207 and @xmath208 , respectively ) . in the @xcite could be found a comprehensive description of various elements belonging to the triangular family starting from a linear through quadratic to cubic one . for simplicity , in these paper",
    "only the linear case is looked on .",
    "it explicitly means that shape functions @xmath209 , where @xmath210 , change between two nodes linearly ( see eq .",
    "( [ lcoordiantes ] ) ) .",
    "we shall now look on the left hand of the eq .",
    "( [ integral ] ) i. e. the integral expression @xmath25 @xmath211 we are aimed at determining the appropriate continuous @xmath5 function for which the first variation @xmath212 vanish .",
    "if @xmath213\\right)_{\\kappa = 0 } = 0 \\label{var}\\ ] ] for any @xmath214 then we can say that the expression @xmath25 is made to be _ stationary _ @xcite .",
    "the function @xmath5 is imbed in a family of functions @xmath215 with the parameter @xmath216 . the variational requirement ( eq .",
    "( [ var ] ) ) gives vanishing of the first variation for any arbitrary @xmath217 . in the presented article ,",
    "the variational problem is limited to the case in which values of desired function @xmath5 at the boundary of the region of integration i. e. at the boundary curve @xmath10 are assumed to be prescribed . generally , the first variation of @xmath25 has the form @xmath218 and vanishes when @xmath219 the condition ( [ euler ] ) gives the euler equations . moreover , if the functional @xmath25 is _ quadratic _ i.e. , if all its variables and their derivatives are in the maximum power of 2 , then the first variation of @xmath25 has a standard linear form @xmath220 which represents eq .",
    "( [ var2 ] ) , though , in matrix notation .",
    "a vector @xmath20 denotes all variational variables i. e. @xmath5 and its derivatives as it is written in eq .",
    "( [ euler ] ) .",
    "@xmath43 denotes stiffness matrix ( the fem nomenclature @xcite ) and @xmath21 is a constant vector ( does not depend on @xmath20 ) .",
    "we are interested in finding solutions to the poisson and the laplace differential equations under some boundary conditions .",
    "these classes of differential problems can be represent in such a general linear form ( [ linear ] ) .",
    "now , we construct a functional @xmath25 which the first variation gives the poisson  type equation .",
    "firstly , we define the functional @xmath25 in the form : @xmath221 where @xmath222 . @xmath223 and",
    "@xmath224 can be functions of spacial variables @xmath193 and @xmath194 .",
    "secondly , we find the first variation of @xmath25 @xmath225 where @xmath226 . and after integration by parts and taking advantage of the green s theorem @xcite one can simplify the above  written equation to the form @xmath227 where @xmath228 denotes the normal derivative to the boundary @xmath10 .",
    "the expression within the first integral constitutes the poisson equation @xmath229 whereas the second term in the eq .",
    "( [ calkowanie ] ) gives the neumann boundary condition @xmath230 and the third one represents the dirichlet boundary condition @xmath231    * an important note . *",
    "the above  presented calculation demonstrates a way in which one can incorporate the boundary conditions of neumann or dirichlet type into a variational expression @xmath25 .",
    "however , an appropriately formulated boundary ",
    "value problem must include only one kind of b.c .",
    "( neumann or dirichlet b.c . ) defined on the whole boundary @xmath10 or is permitted to mix them but in not self  overlapping way .",
    "problems solve in sec .",
    "5 of the article have only the dirichlet b.c ..",
    "let us compute the determinant of the jacobian transformation between the global @xmath99 and a local @xmath232 coordinate frame .",
    "one notices immediately that the problem is degenerate .",
    "that is why , we introduce a new coordinate @xmath233 as a linear combination of @xmath232 i. e. @xmath234 .",
    "note that @xmath233 is not an independent coordinate and has a constant value equal 1 . after taking into account relations ( [ lcoordiantes ] )",
    "we find the jacobian matrix in the form @xmath235 furthermore , we have the relation between the jacobian and an element area @xmath236 where @xmath237 denotes the area of a triangle which is based on vertices @xmath238 . and finally , we obtain the coordinates transformation rule @xmath239 the relation between the gradient operator @xmath55 in cartesian and in new coordinates is given by : @xmath240 & = & \\displaystyle \\left[\\frac{\\partial l_1}{\\partial x}\\frac{\\partial}{\\partial l_1 } + \\frac{\\partial l_2}{\\partial x}\\frac{\\partial}{\\partial l_2 } + \\frac{\\partial l_3}{\\partial x}\\frac{\\partial}{\\partial l_3 } , \\frac{\\partial l_1}{\\partial y}\\frac{\\partial}{\\partial l_1 } + \\frac{\\partial l_2}{\\partial y}\\frac{\\partial}{\\partial l_2 } +    \\frac{\\partial l_3}{\\partial y}\\frac{\\partial}{\\partial l_3 } \\right ] \\nonumber \\\\ \\displaystyle & = & \\frac{1}{2\\delta}\\left[\\frac{\\partial}{\\partial l_1 } , \\frac{\\partial}{\\partial l_2 } , \\frac{\\partial}{\\partial l_3}\\right ]   \\left ( \\begin{array}{cc } a_1 & b_1\\\\   a_2 & b_2\\\\ a_3 & b_3 \\end{array } \\right ) = \\left[\\frac{\\partial}{\\partial l_1 } , \\frac{\\partial}{\\partial l_2 } , \\frac{\\partial}{\\partial l_3}\\right ] \\mathcal{t}\\end{aligned}\\ ] ] where @xmath241 ( @xmath210 ) and @xmath242 , the rest of coefficients is obtained by cyclic permutation of indices @xmath243 and @xmath244 .",
    "the l.h.s integral @xmath245 can be approximated by the @xmath246 - point gauss quadrature @xcite @xmath247 where @xmath248 denotes the weights for @xmath249 - points of the numerical integration , and can be found in the table 5.3 in @xcite .",
    "as it was already said , a set of @xmath250 shape functions where @xmath210 can be used to evaluate each @xmath251 function in the interpolation series which , for instance , in the highest order 10  nodal cubic triangular element has the following form @xmath252 where @xmath253 are nodal values of @xmath251 function , @xmath254 denote departures from linear interpolation for mid - side nodes , and @xmath255 is departure from both previous orders of approximation for the central node @xcite . for linear triangular elements only the first term is important which gives an approximation @xmath256 note , that the r.h.s sum ( [ gauss_qw ] ) does not include the jacobian @xmath257 that should be incorporated by the weights @xmath248 but it is not ( in their values given in table 5.3 from @xcite ) .",
    "thus let s add the triangle area to the above - recalled formula @xmath258 and in that way we end up with the final expression for the @xmath246  point gauss quadrature .",
    "the author would like to remind briefly the main points of the delaunay triangulation method @xcite together with their numerical implementation using octave package @xcite .",
    "let @xmath259 be set of points in two - dimensional euclidean plane @xmath59 .",
    "they are called _ forming points _ of mesh @xcite .",
    "let us define the triangle @xmath54 as a set of three mesh points @xmath260 using the delaunay criterion one can generate triangulation where no four points from the set of forming points @xmath261 are co - circular : @xmath262 where @xmath263 is the center of the @xmath54 triangle and @xmath264 is its radius . +",
    "the proposed algorithm consists of the following steps :    * the triangle s bars are given by the following vectors @xmath265 where @xmath266 , @xmath267 $ ] for each @xmath268 and @xmath269 . *",
    "the cross product of each triangle bars defines a plane .",
    "the pseudovector @xmath270 together with its projection on the normal to the plane @xmath271-direction @xmath272 are found @xmath273 in order to determine the triangle orientation .",
    "if the quantity @xmath274 the triangle orientation is clockwise , otherwise is counterclockwise . *",
    "the determinant of the square matrix @xmath275 is built on the basis of the set of triangle s nodes given by eq .",
    "( [ triangle ] ) @xmath276 next the following determinant is calculated in order to find out whether a mesh point @xmath106 is outside or inside _ the delaunay zone _ ( see fig .  [",
    "fig : flipping ] ) @xmath277 for each @xmath278 . * if for any point @xmath106",
    "its @xmath279 the triangle @xmath54 is not the delaunay triangle ( see fig .",
    "[ fig : flipping]a ) .",
    "then one need to find other triangles in the closest neighbourhood of the triangle @xmath54 corresponding to the number of @xmath106 inside the delaunay zone and recursively exchange the bars between @xmath54 and each of them ( see fig .  [",
    "fig : flipping]b ) .",
    "+    * finally , checking whether the new two triangles are the delaunay triangles takes its place .",
    "if so , new ones are accepted unless the change is canceled .",
    "now , let us present the main points of the algorithm that could be easily implemented using the octave package or matlab .",
    "set of mesh points @xmath280 together with their starting configuration forming initial triangular mesh @xmath281 where @xmath282 determines _ the mesh size_.    while 1    stop = 1    for each mesh triangle @xmath54 from @xmath283    ensure the clockwise orientation of the triangle ( see above )    for each mesh point @xmath284 not belonging to the triangle @xmath54    calculate its @xmath285    if * it is lower then 0 *    for the triangle @xmath54    find its neighbouring @xmath286 triangle where the mesh point @xmath284 belongs to    exchange the common edge between the triangle @xmath54 and its neighbour in order to form    two new triangles    ensure the clockwise orientation of the triangles ( see above )    calculate the newest @xmath287 for the new triangle @xmath288    if * @xmath289 *    accept the change and update the set of mesh triangles    put stop = 0    else reject the change and return to the previous set of mesh triangles    end    end    end    end    end    if stop @xmath290 break end    end    algorithm ends up with the new triangular mesh @xmath291 .",
    "+ in order to find an orientation of a triangle @xmath54 one can check the sign of @xmath272 ( see eq .",
    "( [ cross ] ) ) .",
    "if it is greater than 0 the triangle orientation is clockwise unless counterclockwise . in the latter case , to ensure the clockwise orientation one can once flip up and down matrix in eq .",
    "( [ determinant_general ] ) then the triangle orientation turns into the opposite one . obviously , this flipping results in the change of the sign of the matrix determinant @xmath292 .",
    "for each new boundary node @xmath293 find its boundary neighbours and save them in the _ tboundary _ array .",
    "* find two nodes among all neighbouring nodes in _ tboundary _ table that are closest to the considered @xmath293 node . then save them in _",
    "table@xmath294_. this works fine for convex figures .",
    "* if the figure s shape is not of convex type then the algorithm must be more sophisticated .",
    "it requires to find two nodes that are aligned with the analyzed @xmath293 node .",
    "for example , one can creature an array _ table _ containing all possible combinations of that node and any other two nodes from the _ tboundary _ array .",
    "only one combination from the _ table _ should be the correct one i. e. it must fulfilled conditions describing one of the boundary line segments .",
    "find and save it in _",
    "table@xmath295_.            99 o. c. zienkiewicz , r. l. taylor and j. z. zhu , _ the finite element method : its basis and fundamentals , sixth edition .",
    "_ , elsevier 2005 r. w. clough , _ the finite element method in plane stress analysis _ , in proc .",
    "2nd asce conf . on electronic computation , pittsburgh ,",
    ", sept . 1960 ; r. w. clough , _ early history of the finite element method from the view point of a pioneer _ , int . j. numer .",
    "eng . , * 60 * , pp .",
    "283 - 287 , 2004 o. c. zienkiewicz , _ origins , milestones and directions of the finite element method _ ,",
    "methods eng . , * 2 * ( 1 ) , pp . 1 - 48 , 1995 ; o. c. zienkiewicz , _ origins , milestones and directions of the finite element method  a personal view , part ii : techniques of scientific computing . _ in : p.g .",
    "ciarlet and j.l .",
    "lions , editors , _ handbook of numerical analysis _ , * 4 * , pp .",
    "3 - 65 , north - holland , amsterdam ( 1996 ) ; o. c. zienkiewicz , _ the birth of the finite element method and of computational mechanics _ , int . j. numer .",
    "* 60 * , pp . 3 - 10 , 2004 o. c. zienkiewicz and y. k. cheung , _ finite elements in the solution of field problems _ , the engineer , pp . 507 - 510 1965 ; o. c. zienkiewicz , p. mayer and y. k. cheung , _ solution of anisotropic seepage problems by finite elements _ , j. eng .",
    "asce , * 92 * , pp .",
    "111 - 120 , 1966 ; o. c. zienkiewicz , p. l. arlett , and a. k. bahrani , _ solution of three  dimensional field problems by the finite element method _ , the engineer , 1967 ; l. r. herrmann ,",
    "_ elastic torsion analysis of irregular shapes _",
    "mech . , asce , * 91 * , pp .",
    "11 - 19 , 1965 ; a. m. winslow , _ numerical solution of the quasi - linear poisson equation in a non - uniform triangle mesh _ , j. comp .",
    ", * 1 * , pp . 149 - 172 , 1966 ; m. m. reddi , _ finite element solution of the incompressible lubrication problem _ , trans . am .",
    ", * 91*:524 1969 r. w. clough , _ the finite element method in structural mechanics _ , in o. c. zienkiewicz and g. s. holister , editors , stress analysis , chapter 7 .",
    "john wiley & sons , chichester , 1965 a. bowyer , _ computing dirichlet tessellations _ , comp .",
    "j. , * 24*(2 ) , pp .",
    "162 - 166 , 1981 ; d. f. watson , _ computing the n - dimensional delaunay tessellation with application to voronoi polytopes _ ,",
    "j. , * 24*(2 ) , pp .",
    "167 - 172 1981 ; j. c. cavendish , d. a. field and w. h. frey , _ an approach to automatic three - dimensional finite element mesh generation _",
    "* 21 * , pp .",
    "329 - 347 1985;n .",
    "p. weatherill , _ a method for generating irregular computation grids in multiply connected planar domains _ , int",
    ". j. numer .",
    "eng . , * 8 * , pp . 181197 1988 ; w. j. schroeder , m. s. shephard , _ geometry - based fully automatic mesh generation and the delaunay triangulation _",
    ", int . j. numer .",
    ", * 26 * , pp . 2503 - 2515 2005 ; t. j. baker , _",
    "automatic mesh generation for complex three - dimensional regions using a constrained delaunay triangulation _ , eng .",
    ", * 5 * , pp . 161175 1989 ; p. l. georgea , f. hechta and e. saltela , _ automatic mesh generator with specific boundary _ , comp .",
    "eng . , * 92 * , pp .",
    "269 - 288 1991 s. h. lo , _ a new mesh generation scheme for arbitrary planar domains _ , int .",
    ", * 21 * , pp .",
    "1403 - 1426 1985 ; j. peraire , j. peiro , l. formaggia , k. morgan , o. c. zienkiewicz , _ finite element euler computations in three dimensions _ ,",
    "* 26 * , pp .",
    "2135 - 2159 2005 ;",
    "r. lhner , p. parikh , _ three - dimensional grid generation by the advancing front method _ , int . j. num .",
    "fluids * 8 * , pp . 1135 - 1149 1988 m. a. yerry , m. s. shephard , _ automatic three - dimensional mesh generation by the modified - octree technique _ , int . j. numer .",
    "* 20 * , pp .",
    "1965 - 1990 1984 ; p. l. baehmann , s. l. wittchen , m. s. shephard , k. r. grice , and m. a. yerry , _ robust , geometrically - based , automatic two - dimensional mesh generation _",
    ", * 24 * , pp .",
    "1043 - 1078 1987 ; m. s. shephard and m. k. georges , _ automatic three - dimensional mesh generation by the finite octree technique _",
    ", * 32 * , pp .",
    "709 - 749 1991 o. c. zienkiewicz and d. v. phillips , _ an automatic mesh generation scheme for plane and curved surfaces by isoparametric coordinates _ , int .",
    "eng . , * 3 * , pp .",
    "519 - 528 1971 j. peraire , m. vahdati , k. morgan , and o. c. zienkiewicz , _ adaptative remeshing for compressible flow computations _ , j. comp .",
    "phys . * 72 * , pp .",
    "449 - 466 , 1987 a. kendall , h. weimin , _ theoretical numerical analysis , a functional analysis framework , third edition . _ ,",
    "springer 2009 r. courant , d. hilbert , _ methods of mathematical physics , volume 1 _ , interscience publisher , new york , 1953 b. delaunay , _ sur la sphre vide _ , izvestia akademii nauk sssr , otdelenie matematicheskikh i estestvennykh nauk , * 7 * , pp .",
    "793 - 800 , 1934 n. metropolis , s. ulam , _ the monte carlo method _",
    ", j. amer .",
    "* 44 * , no . 247 .",
    "335 - 341 , 1949 the source code of octave is freely distributed gnu project , for more info please go to the following web page _ http://www.gnu.org / software / octave/_. r. radau , _ tude sur les formules dapproximation qui servent  calculer la valeur dune intgrate dfinie _ , journ .",
    "de math . *",
    "6*(3 ) , pp .",
    "283 - 336 , 1880 p. c. hammer and o. j. marlowe and a. h. stroud , _ numerical integration over simplexes and cones _ , math .",
    "tables aids comp . , * 10",
    "* , pp . 130 - 137 , 1956 f. r. cowper , _ gaussian quadrature formulas for triangles _ ,",
    "eng . , * 7 * , pp . 405 - 408 , 1973"
  ],
  "abstract_text": [
    "<S> the presented article contains a 2d mesh generation routine optimized with the metropolis algorithm . </S>",
    "<S> the procedure enables to produce meshes with a prescribed size @xmath0 of elements . </S>",
    "<S> these finite element meshes can serve as standard discrete patterns for the finite element method ( fem ) . </S>",
    "<S> appropriate meshes together with the fem approach constitute an effective tool to deal with differential problems . </S>",
    "<S> thus , having them both one can solve the 2d poisson problem . </S>",
    "<S> it can be done for different domains being either of a regular ( circle , square ) or of a non  regular type . </S>",
    "<S> the proposed routine is even capable to deal with non  convex shapes . </S>"
  ]
}