{
  "article_text": [
    "a tensorial contraction method has been developed@xcite to obtain analytical formulae for x - ray resonant magnetic scattering , working from the established formulae for rmxs amplitude in the spherical atom approximation@xcite . here",
    "this method will be implemented in a mathematica code and used to investigate electric dipole and quadrupole scattering in the general case of a non - spherical system .    to illustrate the capabilities of the code",
    ", we consider the case of _ spiral antiferromagnetic holmium_. this has an hcp structure and the atoms are embedded in a local @xmath1 symmetry environment .",
    "the magnetic field direction of the holmium varies helically according to the crystal layer .",
    "the mathematica code executes contractions of the tensors of an incoming and outgoing photon with the field tensor of the crystal system , to obtain expressions for the dipole - dipole , quadrupole - quadrupole and mixed dipole - quadrupole corrections to the scattering amplitude for the spherical case .",
    "we consider the interaction between matter and a photon described by a wave vector @xmath2 and a polarisation vector @xmath3 , discarding both elastic thompson scattering and the spin - magnetic field interaction .",
    "our atom is spherical@xcite but perturbed by a magnetic exchange field .",
    "we take the angular momentum quantisation axis @xmath4 along the magnetic field . since dipolar and quadrupolar terms will not mix due to parity conservation , the scattering amplitude is given by@xcite :    @xmath5    where @xmath6 denotes the rank 2 spherical tensor components of @xmath7 , and @xmath8 represents @xmath3 in rank 1 spherical tensor form .",
    "the scattering coefficients @xmath9 and @xmath10 can be derived from the analysis in @xcite .",
    "it is , however , more convenient to keep the vectors @xmath2 and @xmath3 in cartesian form and re - express equation  [ sphericaltensors ] in cartesian space . using a different set of coefficients @xmath11 , @xmath12 ( which we will define in section  [ definingfprefactors ] ) , and substituting @xmath13 in equation  [ sphericaltensors ] by @xmath14 where @xmath15 is the angular momentum operator",
    ", we re - express equation  [ sphericaltensors ] as @xmath16 where @xmath17 signifies a sum over all possible contractions ( the contractions are defined in section  [ contractions ] ) . this formulation can be used to calculate directly the dipolar and quadrupolar scattering coefficients for a spherical atom@xcite , which are in agreement with the formulae obtained previously by hill & mcmorrow@xcite .",
    "the implementation of @xmath17 as a computer - efficient algorithm is one of the objectives of this code .",
    "we use the extension of this formulation for the case of a non - spherical atom@xcite .",
    "we represent the non - sphericity of the atomic environment by a crystal potential @xmath18 which is added to the atomic hamiltonian , which is given as a superposition of spherical harmonics@xcite : @xmath19 where @xmath20 must also have the same symmetry as the crystal system@xcite .",
    "the field tensor must now be included in equation  [ fsphericalcartesian ] .",
    "the scattering amplitude for the non - spherical case is therefore given by the contraction sum    @xmath21    later we will construct some code to evaluate @xmath22 in the general case of a field tensor in @xmath23 , @xmath24 and @xmath25 , and then investigate the effect that this will have on the scattering peaks measured .",
    "first we define mathematically what is meant by a _ _ contraction__@xcite and the function @xmath17 , which represents the sum of all possible contractions between the tensors it is operating on , that result in a scalar . in section  [ program ] this will be implemented as a computer code .",
    "[ [ single - contractions ] ] single contractions + + + + + + + + + + + + + + + + + + +    a single contraction of two tensors involves taking the inner product between an index of the first tensor @xmath26 and one of the second tensor @xmath27 , thus reducing the total rank of the expression by two .",
    "so , for two tensors @xmath26 and @xmath27 , each of rank 2 , the possible single contractions are @xmath28 i.e. there are four possible single contractions of @xmath26 with @xmath27 , each one a tensor of rank 2 .",
    "[ [ double - contractions ] ] double contractions + + + + + + + + + + + + + + + + + + +    however , we are interested in contracting the two tensors to form a scalar . for the case of the two rank-2 tensors @xmath26 and @xmath27 , we can execute the first single contraction and then contract the two indices that have not already been contracted . working from equation  [ singlecontraction ] , we see that this results in a total of four possible ( double ) contractions : @xmath29    therefore , the contraction sum of @xmath26 and @xmath27 , which is the sum of all possible contractions , is @xmath30 note the factors of 2 which arise from the repeated terms in equation  [ doublecontraction ] .",
    "[ [ multiple - contractions ] ] multiple contractions + + + + + + + + + + + + + + + + + + + + +    we would like to construct an iterative computer algorithm to take a set of tensors and repeatedly contract them until the result becomes a scalar .",
    "we begin by taking all possible single contractions ( for the case of two tensors of rank @xmath31 , there are @xmath32 possible single contractions ; however we would also like to contract three tensors with each other ) .",
    "then we take this result and take all possible single contractions on it again  this continues until either the expression becomes a scalar ( in which case the contraction function is no longer called , and the result is output as the answer ) , or a tensor of rank 1 ( which will be ignored by the program , as it can not be contracted to a scalar ) .",
    "here we describe the workings of the mathematica notebook .",
    "the program input is presented in a different colour for easy differentiation from the rest of the document .",
    "occasionally the program output has been stylised slightly for this report , but everything listed here was produced more or less directly by mathematica .    in this section",
    "we will define the contraction mechanisms for calculating the magnetic diffraction amplitude for the general case of a material with a known field tensor .    in section  [ spiralantiferromagneticholmium ] we will then apply this mechanism for the specific case of spiral antiferromagnetic holmium , and",
    "show how this can be used to calculate the expected intensities of the satellite diffraction peaks of bragg order @xmath33 .",
    "first we set up a function to execute tensorial contractions ( these are needed to calculate the scattering amplitudes for a non - spherical atom ) .",
    "[ [ contracting - two - tensors ] ] contracting two tensors + + + + + + + + + + + + + + + + + + + + + + +    first we define a function @xmath34 which will find the sum of all possible contractions for two tensors rank @xmath31 .",
    "each tensor is given in the form @xmath35 $ ] ( representing the tensor product @xmath36 of a set of vectors @xmath37 , @xmath38 , ...",
    "@xmath39 ) . for example",
    ", the contraction sum of two tensors @xmath26 and @xmath27 will be entered as @xmath40 , \\mathtt{t}[\\vec{b}_1,\\vec{b}_2]]$ ] , and is equivalent to , mathematically , @xmath41 i.e. each vector in the left hand tensor is contracted with each one on the right , thus generating all possible contractions .",
    "the contraction function @xmath34 for two tensors is given below .",
    "it loops round , gradually reducing the expression by eliminating pairs of vectors and calling itself again to contract the remaining expression .",
    "this creates a complicated stack of one function calling itself again many times with different arguments  to prevent infinite loops in the case of an error , in this definition @xmath34 will not call itself directly but will call a temporary ( as yet undefined ) function @xmath42 which can later be set equal to @xmath34 .",
    "first we state that the function @xmath34 and our tensor product operator @xmath43 are both _ orderless _ , so it does not matter in which order their arguments ( vectors and tensors ) are given .",
    "+ @xmath44=\\{{orderless}\\};}\\\\ \\mathtt{{attributes}[t ] = \\{{orderless}\\};}\\\\$ ]      some other definitions are necessary to enable the program to stop looping when it has finished the contractions .",
    "the contraction of a single tensor must evaluate to zero ; to contract anything with 1 , we can ignore the 1 ; and the contraction of nothing must evaluate to 1 .",
    "+ @xmath52{:=}0;}\\\\ \\mathtt{{con}[1,{t\\_\\_\\_}]{:=}{con}[t];}\\\\ \\mathtt{{con}[]{:=}1;}\\\\ \\mathtt { {   } t[]=1 ; } \\\\",
    "\\mathtt{t[\\{\\}]=1;}\\\\ \\mathtt{t[\\{{x\\_\\_}\\}]=t[x];}$ ]    [ [ contracting - three - tensors ] ] contracting three tensors + + + + + + + + + + + + + + + + + + + + + + + + +        [ [ the - field - tensor - in - polynomial - representation ] ] the field tensor in polynomial representation + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    now we need to make a function which will contract a cartesian tensor in the form of a polynomial in @xmath23 , @xmath24 and @xmath25 .",
    "this is needed for scattering amplitude calculations , where the crystal field tensor is typically expressed in a polynomial form @xmath56 .",
    "for example , the quadrupole - quadrupole scattering formula for the particular case of holmium has the form :    @xmath57    we define a new function @xmath58 which re - expresses a contraction of tensors @xmath59 and @xmath60 and the polynomial @xmath61 in terms of sums and products of contractions of three tensors which can be executed by the function @xmath34 .",
    "[ [ reducing - the - polynomial - via - linearity ] ] reducing the polynomial via linearity + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we want to be able to contract some quite complicated polynomials , so it is useful to first reduce the polynomials to a more manageable form using some basic mathematical properties of the function @xmath17 .",
    "for example , the contraction sum operation is linear , so    @xmath62      [ [ removing - prefactors - from - the - individual - terms ] ] removing prefactors from the individual terms + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    now we need to find an efficient way of taking each term and extracting the @xmath64 dependent components for contraction , while leaving numbers and constants untouched by the @xmath34 function . here",
    "we use another property of the linearity of @xmath17 :    @xmath65    so first we separate out any occurrences of @xmath64 from the terms of the polynomial ( which has already been split up into a sum of parts ) : + @xmath66,x]{/;}}\\\\ \\mathtt{~~{freeq}[{fullform}[{prefactor}],y]{/;}}\\\\ \\mathtt{~~{freeq}[{fullform}[{prefactor}],z],{xyz\\_\\_}],\\{{cl\\_\\_}\\}]{:=}}\\\\ \\mathtt{~~{times}[{prefactor } ] \\mathbb{c}[\\{{al}\\},{times}[{xyz}],\\{{cl}\\}];}$ ]    [ [ converting - a - polynomial - term - to - a - tensor ] ] converting a polynomial term to a tensor + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    now that individual terms in @xmath64 have been separated , they can be converted into a tensorial form ( such as @xmath67}$ ] in mathematica ) that can be used directly by the function @xmath34 .",
    "[ [ expressing - xalpha - ybeta - zgamma - in - tensorial - form ] ] expressing @xmath68 in tensorial form + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +      [ [ expressing - xalpha - in - tensorial - form ] ] expressing @xmath78 in tensorial form + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +        the contraction function defined so far has produced results in terms of the function @xmath81 $ ] , as yet undefined .",
    "we must now define @xmath82 so that a product of a cartesian vector with one of the basis vectors @xmath83 , @xmath84 and @xmath85 will be re - expressed as the correct component of that vector ( at least for the moment )",
    ". + @xmath86;}\\\\ \\mathtt{{attributes}[{scal}]=\\{{orderless}\\};}\\\\ \\mathtt{{scal}\\left[{vector\\_},e_{{i\\_}}\\right]{:=}{vector}.\\{\\hat{\\mathbf{x}},\\hat{\\mathbf{y}},\\hat{\\mathbf{z}}\\}[[i]];}$ ]",
    "the contraction mechanism which has been defined will work in general on any kind of polynomial tensor .",
    "now we present an example of its application , for the specific case of spiral antiferromagnetic holmium      [ [ defining - frame - x ] ] defining frame @xmath87 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    [ planegeometry ]   is different for different crystal planes , @xmath88 has a spiral dependence on @xmath25.,title=\"fig:\",width=302 ]    first , we define a simple cartesian co - ordinate system .",
    "initially we would like to work in the frame @xmath87 with co - ordinates @xmath89 oriented around the crystal geometry ( @xmath25 points upwards through the crystal planes ) , as shown in figure  [ planegeometry ] .",
    "the magnetic field direction @xmath88 of spiral antiferromagnetic holmium varies helically according to the crystal layering , as @xmath90 where the angle @xmath91 depends on the height @xmath25 ( @xmath92 is the interplanar spacing and @xmath13 is the antiferromagnetic wavevector ) . in mathematica code",
    "this is expressed as ( see figure  [ planegeometry ] ) : + @xmath93=\\{{cos}[\\tau ] , { sin}[\\tau ] , 0\\};}$ ]    [ [ the - incomingoutcoming - photons ] ] the incoming / outcoming photons + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    now we define the characteristics in frame @xmath87 of an incoming photon , at angle @xmath94 from the crystal planes .",
    "its wavevector is + @xmath95=\\{{cos}[\\theta ] , 0,-{sin}[\\theta ] \\};}$ ] + and its polarisation vectors in @xmath87 are ( with the indices 0 and 1 representing polarisation orientations @xmath96 and @xmath97 respectively ) : + @xmath98=\\{0,1,0\\};}$ ]    @xmath99=\\{{sin}[\\theta ] , 0,{cos}[\\theta ] \\};}$ ]    @xmath100    @xmath101      [ [ defining - m ] ] defining @xmath102 + + + + + + + + + + + + + + + + + + + + + + + +    it is more convenient for our purposes to introduce a new co - ordinate system @xmath102 with basis vectors @xmath103 here , constructed from the ( rotating ) magnetic moment @xmath88 .",
    "we set @xmath104 to the most convenient possibility : + @xmath105=\\{0,0,1\\};}$ ] + and we can now derive @xmath106 from @xmath104 and @xmath107 : + @xmath108=\\hat{x}_m[\\tau ] \\times \\hat{z}_m[\\tau ] ; } $ ] + so our new basis is    @xmath109    [ [ re - expressing - wave - parameters - in - the - magnetic - co - ordinate - system ] ] re - expressing wave parameters in the magnetic co - ordinate system + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    now we can redefine @xmath2 and @xmath110 in the frame @xmath102 from their definitions @xmath111 and @xmath112 in frame @xmath87 ( the subscript @xmath113 stands for either @xmath97 or @xmath96 ) : + @xmath114{:=}\\left\\{{kx}[\\theta ] .\\hat{x}_m[\\tau ] , { kx}[\\theta ] .\\hat{y}_m[\\tau ] , { kx}[\\theta ] .\\hat{z}_m[\\tau ] \\right\\};}$ ]    @xmath115{:= } } \\mathtt{\\left\\{{\\epsilon x}_{{pol}}[\\theta ] .\\hat{x}_m[\\tau ] , { \\epsilon x}_{{pol}}[\\theta ] .\\hat{y}_m[\\tau ] , \\right . }",
    "\\mathtt{\\left.{\\epsilon x}_{{pol}}[\\theta ] .\\hat{z}_m[\\tau ] \\right\\};}$ ] + so the wave vector in this new basis is @xmath116 and the polarisation vectors are @xmath117    [ [ the - reflected - wave ] ] the reflected wave + + + + + + + + + + + + + + + + + +    we define the reflected wave parameters @xmath118 , @xmath119 by changing the sign of @xmath94 : + @xmath120{:=}\\epsilon _ { { pol}}[-\\theta , \\tau ] ; } $ ]    @xmath121{:=}k[-\\theta , \\tau ] ; } $ ]      using our expression for the holmium field tensor ( ignoring the @xmath122 alternation ) , @xmath123 we can use the functions @xmath124 and @xmath34 to derive some properties of the diffraction pattern , that arise from the non - sphericity of the holmium atom .",
    "we are interested in particular in effects that are unique for the non - spherical case_corrections _ to the spherical scattering formulae are what we are after .",
    "we will analyse separately the dipole - dipole , quadrupole - quadrupole and mixed terms , as the whole expression is rather complicated .",
    "[ [ calculating - the - dipole - dipole - scattering - correction ] ] calculating the dipole - dipole scattering correction + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    first we look at the simplest case : the dipole - dipole scattering correction . here",
    "we only consider the contraction of @xmath125 and @xmath126 ( the outgoing and incoming photon polarisation tensors respectively ) with @xmath20 , ignoring @xmath127 and @xmath128 : that is , we ignore effects of the finiteness of the speed of light .",
    "we will attempt to find this function s proportionality ( i.e. we are not interested in prefactors for now ) .",
    "the contraction is ( taking only the first order term in the operator @xmath129 ) :    @xmath130\\ ] ]    to encode this contraction in mathematica , we ignore for now the symmetry term @xmath131 $ ] , and enter : + @xmath132{/.}{t2}\\to 1}$ ]    @xmath133    condensing the spherical components into a single term gives ( still ignoring the symmetry term ) + @xmath134}$ ]    @xmath135    subtracting the symmetry term @xmath136 $ ] , and removing constant prefactors , we see that the dipole - dipole scattering correction is proportional to : + @xmath137{//}{traditionalform}}$ ]    @xmath138    this is equation  29 in @xcite .",
    "the @xmath139 part merges with the term that appears in the spherical formulae , but the other term adds complexity to the amplitude dependence on experimental geometry .    [ [ calculating - the - quadrupole - quadrupole - scattering - correction ] ] calculating the quadrupole - quadrupole scattering correction + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    mathematically , the contraction we are interested in is    @xmath140 \\\\ = \\left[\\mathbb{c}((k ' \\otimes \\epsilon ' ) t ( ( i \\xi \\times k ) \\otimes \\epsilon ) ) + \\mathbb{c}((k ' \\otimes \\epsilon ' ) t",
    "( k \\otimes ( i \\xi \\times \\epsilon)))\\right ] \\\\   - [ k',\\epsilon ' \\leftrightarrow k,\\epsilon ] \\end{array}\\ ] ]    in mathematica , this is encoded as ( ignoring the @xmath141 term , and also the symmetry terms , for now ) : + @xmath142{/.}}\\\\ \\mathtt{{t2}\\to 1}$ ] + which gives output    @xmath143 - 2 \\epsilon ' .\\hat{\\mathbf{y } } ( i \\xi \\times \\epsilon ) .\\hat{\\mathbf{y } } \\mathtt{~scal}[k,{k ' } ] -\\\\",
    "\\color{output}2 { k ' } .\\hat{\\mathbf{x } } ( i \\xi \\times \\epsilon ) .\\hat{\\mathbf{x } } \\mathtt{~scal}[k,\\epsilon ' ] -2 { k ' } .\\hat{\\mathbf{y } } ( i \\xi \\times \\epsilon ) .\\hat{\\mathbf{y } } \\mathtt{~scal}[k,\\epsilon ' ] -\\\\",
    "\\color{output}2 k.\\hat{\\mathbf{x } } ( \\epsilon ' .\\hat{\\mathbf{x } } \\mathtt{~scal}[{k ' } , i \\xi \\times \\epsilon ] + { k ' } .\\hat{\\mathbf{x } } \\mathtt{~scal}[\\epsilon ' ,",
    "i \\xi \\times \\epsilon ] ) -\\\\",
    "\\color{output}2 k.\\hat{\\mathbf{y } } ( \\epsilon ' .\\hat{\\mathbf{y } } \\mathtt{~scal}[{k ' } , i \\xi \\times \\epsilon ] + { k ' } .\\hat{\\mathbf{y } } \\mathtt{~scal}[\\epsilon ' , i \\xi \\times \\epsilon ] ) + \\\\ \\color{output}2 ( 2 \\epsilon ' .\\hat{\\mathbf{z } } ( i \\xi \\times \\epsilon ) .\\hat{\\mathbf{z } } \\mathtt{~scal}[k,{k ' } ] + 2 { k ' } .\\hat{\\mathbf{z } } ( i \\xi \\times \\epsilon ) .\\hat{\\mathbf{z } } \\mathtt{~scal}[k,\\epsilon ' ] + \\\\",
    "\\color{output}2 k.\\hat{\\mathbf{z } } ( \\epsilon ' .\\hat{\\mathbf{z } } \\mathtt{~scal}[{k ' } , i \\xi \\times \\epsilon ] + { k ' } .\\hat{\\mathbf{z } } \\mathtt{~scal}[\\epsilon ' , i \\xi \\times \\epsilon ] ) ) \\end{array}\\ ] ]    condensing the spherical components into a single term , + @xmath144}$ ]    @xmath145+{k ' } .(i",
    "\\xi \\times \\epsilon ) \\mathtt{~scal}[k,\\epsilon ' ] -\\\\",
    "\\color{output}3 { k ' } .\\hat{\\mathbf{z } } ( i \\xi \\times \\epsilon ) .\\hat{\\mathbf{z } } \\mathtt{~scal}[k,\\epsilon ' ] + k.\\epsilon '   \\mathtt{~scal}[{k ' } , i \\xi \\times \\epsilon ] -\\\\",
    "\\color{output}3 \\epsilon ' .\\hat{\\mathbf{z } } ( ( i \\xi \\times \\epsilon ) .\\hat{\\mathbf{z } } \\mathtt{~scal}[k,{k ' } ] + k.\\hat{\\mathbf{z } } \\mathtt{~scal}[{k ' } , i \\xi \\times \\epsilon ] ) + \\\\ \\color{output}k.{k ' } \\mathtt{~scal}[\\epsilon ' , i \\xi \\times \\epsilon ] -3 k.\\hat{\\mathbf{z } } { k ' } .\\hat{\\mathbf{z } } \\mathtt{~scal}[\\epsilon ' , i \\xi \\times \\epsilon ] ) \\end{array}\\ ] ]    and now taking only the non - spherical terms in @xmath146 , + @xmath147}$ ]    @xmath148+k.\\hat{\\mathbf{z } } \\mathtt{~scal}[{k ' } , i \\xi \\times \\epsilon ] ) + \\\\ \\color{output}{k ' } .\\hat{\\mathbf{z } } ( ( i \\xi \\times \\epsilon ) .\\hat{\\mathbf{z } } \\mathtt{~scal}[k,\\epsilon ' ] + k.\\hat{\\mathbf{z } } \\mathtt{~scal}[\\epsilon ' , i \\xi \\times \\epsilon ] ) ) \\end{array}\\ ] ]    adding the @xmath141 term back in now ( by exchanging @xmath128 and @xmath149 and adding the result on to the original formula ) , and rewriting @xmath82 in the dot - product notation , we find that the quadrupole - quadrupole scattering correction is proportional to : + @xmath150/6{/.}}\\\\ \\mathtt{{scal}[{vec1\\_},{vec2\\_}]\\to { vec1}.{vec2}{//}{traditionalform}}$ ]    @xmath151    which is equivalent to equation  30 in @xcite .",
    "[ [ calculating - the - mixed - quadrupole - dipole - scattering - correction ] ] calculating the mixed ( quadrupole - dipole ) scattering correction + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    for the quadrupole - quadrupole and dipole - dipole scattering corrections calculated above , only the @xmath152 ( quadratic order ) terms of @xmath20 had any effect .",
    "the alternating term @xmath153 contributes to the quadrupole - dipole and dipole - quadrupole scattering factor corrections , due to its cubic order .",
    "the mixed scattering correction is ( ignoring for now the extra terms in @xmath154 $ ] and @xmath155 $ ] ) : + @xmath156{/.}\\right.}\\\\ \\mathtt{\\{{t2}\\to 0,{t3}\\to 1\\}]+{symm}{//}{traditionalform}}$ ]    @xmath157    where @xmath158 represents @xmath159 + [ k \\leftrightarrow k ' , \\epsilon \\leftrightarrow \\epsilon']$ ] ] .",
    "after rearrangement according to the rules of the scalar triple product , this is equivalent to equation  31 in @xcite .",
    "this is the scattering factor contribution from the alternating term @xmath153 , which is a dipole - quadrupole term .",
    "[ [ extra - peaks - arising - from - asphericity - of - t ] ] extra peaks arising from asphericity of @xmath20 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the asphericity of the holmium atom results in extra peaks of bragg order @xmath160 ( where @xmath161 and @xmath13 is the antiferromagnetic wavevector ) appearing alongside the peaks of order @xmath162 that one would normally expect to observe . here",
    "we will examine the magnetic contribution to the scattering amplitude of the peak appearing at @xmath163 , for four polarisation channels ( @xmath164 , @xmath165 , @xmath166 and @xmath167 ) .    from @xcite , the contribution to the scattering amplitude at this peak , for a given field tensor @xmath20 ,",
    "is given by @xmath168 which originates from equation  [ fcartesiancontractions ] , where only the terms in odd @xmath169 are considered .",
    "the @xmath146 prefactors are defined as follows : + [ definingfprefactors ] @xmath170    @xmath171    @xmath172    @xmath173    @xmath174    @xmath175    @xmath176    @xmath177 + where the @xmath9 and @xmath10 originate from the treatment of the holmium atom as the spherical case with a magnetic field perturbation , although we are not concerned with their definition here .    [ [ redefining - the - scalar - product ] ] redefining the scalar product + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we now want to create another definition of @xmath82 , so that it decomposes @xmath81 $ ] into @xmath178this is necessary as we will be using the definitions from equations  [ kdefinition ] and [ epsilondefinition ] to calculate the @xmath179 and @xmath94 dependence of the scattering amplitude .",
    "first we define the scalar product function for various combinations of vectors , basis vectors and cross products with @xmath4 .",
    "we are making a new definition of @xmath82 , and so we remove the previous one .",
    "+ @xmath86;}\\\\ \\mathtt{{attributes}[{scal}]=\\{{orderless}\\};}$ ] + now we define the scalar product of various expressions involving a cross - product with the magnetic basis vector @xmath4 , and any of the basis vectors @xmath46 , @xmath47 or @xmath48 . in our co - ordinate system , @xmath180 , so @xmath82 has been defined accordingly .",
    "+ @xmath181{:=}}\\\\ \\mathtt{i \\left\\{-{vector}_y,{vector}_x,0\\right\\}[[i]];}\\\\ \\mathtt{{scal}\\left[i \\xi \\times ( i \\xi \\times { vector\\_}),e_{{i\\_}}\\right]{:=}\\left\\{{vector}_x,{vector}_y,0\\right\\}[[i]];}\\\\ \\mathtt{{scal}\\left[i \\xi \\times { vector\\_},e_{{i\\_}}\\right]{:=}i \\left\\{-{vector}_y,{vector}_x,0\\right\\}[[i]];}\\\\ \\mathtt{{scal}\\left[{vector\\_},e_{{i\\_}}\\right]{:=}{vector}_{\\{x , y , z\\}[[i]]};}$ ] + now we make a similar definition for scalar products with other vectors , such as @xmath2 or @xmath3 . + @xmath182{:=}}\\\\ \\mathtt{i \\left(-{vec1}_y{vec2}_x+{vec1}_x{vec2}_y\\right);}\\\\ \\mathtt{{scal}[i \\xi \\times ( i \\xi \\times { vec1\\_}),{vec2\\_}]{:=}\\left({vec1}_x{vec2}_x+{vec1}_y{vec2}_y\\right);}\\\\ \\mathtt{{scal}[i \\xi \\times { vec1\\_},{vec2\\_}]{:=}i \\left(-{vec1}_y{vec2}_x+{vec1}_x{vec2}_y\\right);}\\\\ \\mathtt{{scal}[{vec1\\_},{vec2\\_}]{:=}}\\\\ \\mathtt{{sum}\\left[{vec1}_{\\{x , y , z\\}[[i]]}{vec2}_{\\{x , y , z\\}[[i]]},\\{i,1,3\\}\\right];}$ ]    [ [ considering - the - expected - form - of - the - solution ] ] considering the expected form of the solution + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    knowing that for the case of this particular peak the magnetic contribution to the scattering amplitude will have terms in @xmath183 , @xmath184 and @xmath185 , we can initialise a small array , @xmath186 , to store these three terms .",
    "+ @xmath187    [ [ calculating - the - first - part - of - the - scattering - amplitude - expression ] ] calculating the first part of the scattering amplitude expression + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    now we will try and find the first term , which will have a prefactor of @xmath183 ) .",
    "this term derives from the dipole - dipole contraction : + @xmath188=}\\\\ \\mathtt{~~{simplify}[}\\\\ \\mathtt{~~{f1'}_1\\mathbb{c}\\left[\\{\\epsilon ' \\},\\text{t2}\\left(2z^2-x^2-y^2\\right)+\\text{t3}\\left(x^3 - 3 x y^2\\right),\\{i \\xi \\times \\epsilon \\}\\right]\\text{/.}}\\\\ \\mathtt{~~\\left.{t2}\\to 1{/.}f_{11}-f_{1 - 1}\\to \\frac{1}{i}\\right]}$ ] + after simplification , the result is    @xmath189    i.e. there is a contribution to the scattering amplitude of    @xmath190    this will be evaluated later on in more detail from the definitions of @xmath126 , @xmath125 , @xmath128 and @xmath127 in equations  [ kdefinition ] and [ epsilondefinition ] , and re - expressed in terms of the incident angle @xmath94 and the antiferromagnetic parameters of the holmium system .    [ [ calculating - the - second - and - third - parts - of - the - scattering - amplitude - expression ] ] calculating the second and third parts of the scattering amplitude expression + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we can now calculate the terms in @xmath184 and @xmath185 .",
    "these originate from the contraction    @xmath191      @xmath194    which can be used to calculate the second and third terms in @xmath146 .",
    "[ [ calculating - the - second - part - of - the - scattering - amplitude - expression ] ] calculating the second part of the scattering amplitude expression + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +      [ [ calculating - the - third - part - of - the - scattering - amplitude - expression ] ] calculating the third part of the scattering amplitude expression + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +      @xmath200    [ [ reducing - the - scattering - amplitude - expression ] ] reducing the scattering amplitude expression + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the three terms in @xmath146 that we have just calculated are : + @xmath201    @xmath202 \\end{array } \\\\ & \\begin{array}{l }   k_y \\left({k'}_y \\left(\\epsilon _ y \\epsilon ' _ x-\\epsilon _ x \\epsilon ' _ y\\right)+{k'}_x \\left(\\epsilon _ x \\epsilon ' _ x+\\epsilon _ y \\epsilon ' _ y\\right)\\right ) \\\\ -k_x \\left({k'}_x \\left(-\\epsilon _ y \\epsilon ' _ x+\\epsilon _ x \\epsilon ' _ y\\right )   + { k'}_y \\left(\\epsilon _ x \\epsilon ' _ x+\\epsilon _ y \\epsilon ' _ y\\right)\\right ) \\end{array}\\end{aligned}\\ ] ]    we introduce a shorthand notation and re - express the tensor products",
    ". + @xmath203{//}{tableform}{//}{traditionalform}}$ ] + so the reduced ( simplified ) form of the terms is    @xmath204    [ [ finding - the - scattering - amplitude - matrices ] ] finding the scattering amplitude matrices + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    now we will evaluate the expression for the scattering amplitude . since @xmath126 and @xmath125 can both be in either the @xmath97 or the @xmath96 polarisation",
    ", we construct a @xmath205 matrix to represent the four combinations of @xmath206 in terms of @xmath94 and @xmath179 .      @xmath210    where the last two @xmath211 matrices have been condensed into a columnar form , and the abbreviations @xmath212 and @xmath213 stand for @xmath214 and @xmath215 respectively .",
    "[ [ fourier - analysis - of - the - f - matrix ] ] fourier analysis of the @xmath146 matrix + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +      @xmath221    the above expression is the scattering amplitude matrix for the @xmath222 satellite diffraction peak of holmium being reflected off adjacent crystal layers @xmath223 , @xmath224 with scattering coefficients @xmath225 and @xmath226 .",
    "the electric fields of the two reflected waves will be given by @xmath227 and @xmath228 .",
    "the condition for these to be in phase leads to @xmath229 , a modified bragg diffraction condition . ] .",
    "this can be used to obtain theoretical predictions for the amplitudes of the various scattering peaks for photons of different energies  which can then be compared with measurements made at the esrf .",
    "we have taken the contraction method established in @xcite and implemented it as an efficient computer algorithm in a mathematica program .",
    "the program was designed to take a general ( polynomial ) field tensor and contract it with various combinations of @xmath2 and @xmath3 with the magnetic vector @xmath4 acting as a rotation derivative .",
    "the program output scattering amplitude expressions in terms of components of @xmath2 and @xmath3 .",
    "an example of the program operation was presented here for the case of spiral antiferromagnetic holmium , where the vector @xmath4 rotates round through the crystal layering structure with an antiferromagnetic wavevector @xmath13 . using the non - spherical field tensor for this material , the dipole - dipole ,",
    "quadrupole - quadrupole and mixed dipole - quadrupole corrections to the scattering factors which were obtained for the case of a spherical atom@xcite were calculated .",
    "the contraction method was then used to find the amplitude of the diffraction peak with bragg number @xmath160 , for the @xmath230 , @xmath231 , @xmath232 and @xmath233 polarisations , via a fourier analysis of the scattering amplitude function .",
    "these scattering amplitudes could then be used to predict the intensities of the satellite peaks observed in rmxs experiments on holmium .",
    "[ [ further - work ] ] further work + + + + + + + + + + + +    this program can be developed further to allow for more complex forms of field tensors , such as those involving cross products with the photon tensors ( see appendix  [ crossproducts ] ) .",
    "the reliability of the contraction method@xcite in predicting scattering peaks for other materials is yet to be tested .",
    "the extension of the program to cope with contractions of more than three tensors is relatively trivial , involving only the addition of a few more rules to reduce the number of tensors in the same way that the present program reduces it from three to two .",
    "a more complicated problem would be to contract a set of tensors with restrictions on the possible contractions , such as in equation  25 of @xcite .",
    "i am grateful to alessandro mirone for his advice on the programming and for his patience in explaining the theoretical details of his paper@xcite .",
    "first we define the contraction sum for two tensors of any rank .",
    "+ @xmath44=\\{{orderless}\\};}\\\\ \\mathtt{{attributes}[t ] = \\{{orderless}\\};}\\\\ \\mathtt{{con}[{x\\_\\_},0]{:=}0;}\\\\ ~\\\\ \\mathtt{{con}[t[{a\\ _ } , { al\\_\\_\\_}],t[{bl\\_\\_\\_}]]{:=}{module}[\\{{res}\\},{res}=0;}\\\\ \\mathtt{n={length}[{list}[{bl}]];}\\\\ \\mathtt{{do}[}\\\\ \\mathtt { { res}={res } + { scal}\\left[a{/.}\\left\\{x\\to e_1,y\\to e_2,z\\to e_3\\right\\},{list}[{bl}][[i]]{/.}\\left\\{x\\to e_1,y\\to e_2,z\\to e_3\\right\\}\\right ] } \\\\ \\mathtt{{contmp } [ t[{al } ] , { delete } [ t[{bl}],i ] ] } \\\\",
    "\\mathtt{,\\{i,1,n\\}}\\\\ \\mathtt{];}\\\\ \\mathtt{{res}}\\\\ \\mathtt{];}\\\\ \\mathtt{{con}[t[{c\\_\\_\\_}]]{:=}0;}\\\\ \\mathtt{{con}[1,{t\\_\\_\\_}]{:=}{con}[t];}\\\\ \\mathtt{{con}[]{:=}1;}\\\\ \\mathtt { {   } t[]=1 ; }",
    "\\\\ \\mathtt{t[\\{\\}]=1;}\\\\ \\mathtt{t[\\{{x\\_\\_}\\}]=t[x];}$ ] +      now we define the contraction sum for three tensors ( by first eliminating one of the three , and then reverting to the two - tensor contraction ) .",
    "+ @xmath53,t[{bl\\_\\_\\_}],t[{cl\\_\\_\\_}]]{:=}{module}[\\{{res},m , n\\},{res}=0;}\\\\ \\mathtt{m={length}[t[{bl}]];}\\\\ \\mathtt{n={length}[t[{cl}]];}\\\\ \\mathtt{{do}[}\\\\ \\mathtt { { res}=}\\\\ \\mathtt{{res } + { scal}\\left[{list}[{al}][[1]]{/.}\\left\\{x\\to e_1,y\\to e_2,z\\to e_3\\right\\},\\right.}\\\\ \\mathtt{\\left.{list}[{bl}][[i]]{/.}\\left\\{x\\to e_1,y\\to e_2,z\\to e_3\\right\\}\\right ] } \\\\ \\mathtt{{contmp } [ { delete } [ t[{al}],1 ] , { delete } [ t[{bl}],i],t[{cl } ] ] } \\\\",
    "\\mathtt{,\\{i,1,m\\}}\\\\ \\mathtt{];}\\\\ \\mathtt{{do}[}\\\\ \\mathtt { { res}=}\\\\ \\mathtt{{res } + { scal}\\left[{list}[{al}][[1]]{/.}\\left\\{x\\to e_1,y\\to e_2,z\\to e_3\\right\\},\\right.}\\\\ \\mathtt{\\left.{list}[{cl}][[i]]{/.}\\left\\{x\\to e_1,y\\to e_2,z\\to e_3\\right\\}\\right ] } \\\\ \\mathtt{{contmp } [ { delete } [ t[{al}],1],t[{bl}],{delete } [ t[{cl}],i ] ] } \\\\",
    "\\mathtt{,\\{i,1,n\\}}\\\\ \\mathtt{];}\\\\ \\mathtt{{res}}\\\\ \\mathtt{];}$ ] + as a temporary measure ( for debugging ) , we make all ` contmp ` be executed as ` con ` .",
    "+ @xmath234      we will construct several functions , all defined by rules , along which the contraction is passed .",
    "each function executes its own simplifications and contractions , and then invokes the next one in the sequence .      the function",
    "@xmath17 rewrites the polynomial in expanded form , and passes the contraction to @xmath235 , the second contracting function .",
    "+ @xmath236{:=}{\\mathbb{c}2}[{al},{expand}[{anything}],{cl}];}$ ]      if we are a contracting a sum of terms , then @xmath237 splits it into a sum of contractions ... + @xmath238,{cl\\_}]{:=}}\\\\ \\mathtt{{sum}[{\\mathbb{c}2}[{al},{join}[{list}[{thing1}],{list}[{morethings}]][[i]],{cl}],}\\\\ \\mathtt{\\{i,1,{length}[{join}[{list}[{thing1}],{list}[{morethings}]]]\\}];}$ ] + ... until we we have nothing left to expand into sums : then it passes the contraction on to @xmath237 , the third contraction function + @xmath239,{cl\\_}]{:=}{\\mathbb{c}3}[{al},{onething},{cl}];}$ ]        @xmath241,{cl\\_}]{:=}}\\\\ \\mathtt{{times}{@@}{complement}\\left[\\{{prefactors}\\},\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right]}\\\\ \\mathtt{{times}[}\\\\ \\mathtt{{sum}\\left[{\\mathbb{c}3}\\left[{al},{times}{@@}{intersection}\\left[\\{{prefactors}\\},\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right]\\right.\\right.}\\\\ \\mathtt{{vec1}\\times ( { vec2a}+{vec2b})[[i]],{cl}],\\{i,1,{length}[{vec2a}+{vec2b}]\\}]];}$ ]    @xmath242\\times { vec2\\_}],{cl\\_}]{:=}}\\\\ \\mathtt{{times}{@@}{complement}\\left[\\{{prefactors}\\},\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right]}\\\\ \\mathtt{{times}[}\\\\ \\mathtt{{sum}\\left[{\\mathbb{c}3}\\left[{al},{times}{@@}{intersection}\\left[\\{{prefactors}\\},\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right]\\right.\\right.}\\\\ \\mathtt{({vec1a}+{vec1b})[[i]]\\times { vec2},{cl}],\\{i,1,{length}[{vec1a}+{vec1b}]\\}]];}$ ]      now @xmath237 can also expand powers within cross products , and re - write the expression as a sum of cross products with each of the variable on the right of the cross - product operator .",
    "+ @xmath243],{cl\\_}]{:=}}\\\\ \\mathtt{{module}[\\{i,{xyz}\\},{xyz}={table}[{xyz1},\\{i,1,{power}\\}];}\\\\ \\mathtt{{times}{@@}{complement}\\left[\\{{prefactors}\\},\\left\\{x , y ,",
    "z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right]}\\\\ \\mathtt{{sum}[}\\\\ \\mathtt{{\\mathbb{c}3}[{al},}\\\\ \\mathtt{{times}[{times}{@@}{intersection}[\\{{prefactors}\\},}\\\\ \\mathtt{\\left.\\left.\\left.\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right],{times}{@@}{delete}[{xyz},i],{cross}[a,{xyz}[[i]]]\\right],{cl}\\right],}\\\\ \\mathtt{\\{i,1,{length}[{xyz}]\\}]}\\\\ \\mathtt{]}$ ]      @xmath237 also expands products within cross products , similarly re - expressing the polynomial as a sum of cross product operations on each of the variables on the right of the @xmath240 sign .",
    "+ @xmath244],{cl\\_}]{:=}}\\\\ \\mathtt{{module}[\\{i,{xyz}\\},}\\\\ \\mathtt{{xyz}={flatten}[{join}[{list}[{xyz1}],{list}[{xyz2}]]{/.}}\\\\ \\mathtt{\\left.\\left\\{{anything\\_}^{{power\\_}}\\to { table}[{anything},\\{i,1,{power}\\}]\\right\\}\\right];}\\\\ \\mathtt{{times}{@@}{complement}\\left[\\{{prefactors}\\},\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right]}\\\\ \\mathtt{{sum}[}\\\\ \\mathtt{{\\mathbb{c}3}[{al},}\\\\ \\mathtt{{times}[{times}{@@}{intersection}[\\{{prefactors}\\},}\\\\ \\mathtt{\\left.\\left.\\left.\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right],{times}{@@}{delete}[{xyz},i],{cross}[a,{xyz}[[i]]]\\right],{cl}\\right],}\\\\ \\mathtt{\\{i,1,{length}[{xyz}]\\}]}\\\\ \\mathtt{]}$ ] +      we now re - express any simple cross product within a contraction as a function of the cross product operator .",
    "+ @xmath245,{cl\\_}]{:=}}\\\\ \\mathtt{{times}{@@}{complement}\\left[\\{{prefactors}\\},\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right]}\\\\ \\mathtt{{\\mathbb{c}3}\\left[{al},{times}{@@}{intersection}\\left[\\{{prefactors}\\},\\left\\{x , y , z,\\mathbf{x},\\mathbf{y},\\mathbf{z},x^{\\_},y^{\\_},z^{\\_}\\right\\}\\right]{cross}[a , b],\\right.}\\\\ \\mathtt{{cl}]}$ ]       + @xmath246{:=}}\\\\ \\mathtt{{cross}[(a{/.}\\{x\\to \\mathbf{x},y\\to \\mathbf{y},z\\to \\mathbf{z}\\}{/.}\\{\\mathbf{x}\\to \\{1,0,0\\},\\mathbf{y}\\to \\{0,1,0\\},\\mathbf{z}\\to \\{0,0,1\\}\\}),}\\\\ \\mathtt{(b{/.}\\{x\\to \\mathbf{x},y\\to \\mathbf{y},z\\to \\mathbf{z}\\}{/.}\\{\\mathbf{x}\\to \\{1,0,0\\},\\mathbf{y}\\to \\{0,1,0\\},\\mathbf{z}\\to \\{0,0,1\\}\\})].\\{x , y , z\\}}$ ]        [ [ contracting - polynomials - now - that - the - cross - products - have - been - removed ] ] contracting polynomials now that the cross - products have been removed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        the result from all the above simplifications might still be expandable : so any summations must therefore be taken outside the contraction sign again .",
    "+ @xmath248,\\{{cl\\_\\_}\\}]{:=}}\\\\ \\mathtt{{module}[\\{i\\},{xy}={expand}[x+y];{sum}[{\\mathbb{c}3}[\\{{al}\\},{xy}[[i]],\\{{cl}\\}],\\{i,1,{length}[{xy}]\\}]]}$ ]        first we separate out the terms containing @xmath249 from the rest  this is so constant factors _ etc . _ do nt get accidentally contracted when they should nt .",
    "+ @xmath250,x]{/;}{freeq}[{fullform}[{prefactor}],y]{/;}}\\\\ \\mathtt{{freeq}[{fullform}[{prefactor}],z],{xyz\\_\\_}],\\{{cl\\_\\_}\\}]{:=}}\\\\ \\mathtt{{times}[{prefactor } ] { \\mathbb{c}3}[\\{{al}\\},{times}[{xyz}],\\{{cl}\\}];}$ ] + now we convert the polynomial ( which is now in @xmath249 form ) into a tensorial form that can be used directly by the function ` con ` .",
    "+ @xmath251,\\{{cl\\_\\_}\\}]{:= } { module}[\\{i,{power},n,{xyz}\\},}\\\\ \\mathtt{{xyz}{:=}{list}[{xyz1},{xyz2}]{/.}{x\\_}^{{power\\_}}{->}{table}[x,\\{i,1,{power}\\}];}\\\\ \\mathtt{n={length}[{xyz}];}\\\\ \\mathtt{{con}[t[{al}],t[{flatten}[{table}[{xyz}[[i]],\\{i,1,n\\}]]],t[{cl}]]}\\\\ \\mathtt{]}$ ]          @xmath86;}\\\\ \\mathtt{{attributes}[{scal}]=\\{{orderless}\\};}\\\\ \\mathtt{{scal}\\left[{vector\\_},e_{{i\\_}}\\right]{:=}{vector}.\\{\\mathbf{x},\\mathbf{y},\\mathbf{z}\\}[[i]];}\\\\ \\mathtt{{scal}[{vec1\\_},{vec2\\_}]{:=}{vec1}.{vec2};}$ ]      the contraction mechanism has been defined to work on any kind of polynomial tensor involving a cross - product with another vector .",
    "now we test it on the case of a chiral system , which has the field tensor"
  ],
  "abstract_text": [
    "<S> simple analytical formulae , directly relating the experimental geometry and sample orientation to the measured r(m)xs scattered intensity are very useful to design experiments and analyse data . </S>",
    "<S> such formulae can be obtained by the contraction of an expression containing the polarisations and crystal field tensors , and where the magnetisation vector acts as a rotation derivative@xcite . </S>",
    "<S> the result of a contraction contains a scalar product of ( rotated ) polarisation vectors and the crystal field axis . as an example , the dipole - dipole rxs scattering amplitude by jahn - teller distortion is calculated as :    @xmath0    the contraction rules give rise to combinatorial algorithms which can be efficiently treated by computers . in this work we provide and discuss a concise mathematica code along with a few example applications to non - centrosymmetric magnetic systems . </S>"
  ]
}