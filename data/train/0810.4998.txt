{
  "article_text": [
    "the idea of an automatic structure goes back to bchi and elgot who used finite automata to decide , e.g. , presburger arithmetic  @xcite .",
    "automaton decidable theories  @xcite and automatic groups  @xcite are similar concepts .",
    "a systematic study was initiated by khoussainov and nerode  @xcite who also coined the name `` _ automatic structure _ '' ( we prefer the term `` _ string automatic structures _ '' in this paper ) .",
    "in essence , a structure is string automatic if the elements of the universe can be represented as strings from a regular language ( an element can be represented by several strings ) and every relation of the structure can be recognized by a finite state automaton with several heads that proceed synchronously .",
    "string automatic structures received increasing interest over the last years  @xcite .",
    "one of the main motivations for investigating string automatic structures is that their first - order theories can be decided uniformly ( i.e. , the input is a string automatic presentation and a first - order sentence ) .",
    "but even the non - uniform first - order theory is far from efficient since there exist string automatic structures with a nonelementary first - order theory .",
    "this motivates the search for subclasses of string automatic structures whose first - order theories are elementary .",
    "the first such class was identified by the second author in  @xcite who showed that the first - order theory of every string automatic structure of _ bounded degree _ can be decided in triply exponential alternating time with linearly many alternations .",
    "a structure has bounded degree , if in its gaifman graph , the number of neighbors of a node is bounded by some fixed constant .",
    "the paper @xcite also presents a specific example of a string automatic structure of bounded degree , where the first - order theory is hard for doubly exponential alternating time with linearly many alternations .",
    "hence , an exponential gap between the upper and lower bound remained .",
    "an upper bound of 4-fold exponential alternating time with linearly many alternations was shown for _ tree automatic structures _ ( which are defined analogously to automatic structures using tree automata ) of bounded degree .",
    "our paper  @xcite proves a triply exponential space bound for the first - order theory of an injective @xmath0-automatic structure ( that is defined via bchi - automata ) of bounded degree .",
    "here , injectivity means that every element of the structure is represented by a _ unique _",
    "@xmath0-word from the underlying regular language .    in this paper",
    ", we achieve three goals :    * we close the complexity gaps from @xcite for string / tree automatic structures of bounded degree .",
    "* we investigate , for the first time , the complexity of the _ uniform _ first - order theory ( where the automatic presentation is part of the input ) of string / tree automatic structures of bounded degree .",
    "* we refine our complexity analysis using the growth function of a structure .",
    "this function measures the size of a sphere in the gaifman graph depending on the radius of the sphere .",
    "the growth function of a structure of bounded degree can be at most exponential .",
    "our main results are the following :    * the uniform first - order theory for injective string automatic presentations is 2expspace - complete .",
    "the lower bound already holds in the non - uniform setting , i.e. there exists a string automatic structure of bounded degree with a 2expspace - complete first - order theory . * for every string automatic structure of bounded degree , where the growth function is polynomially bounded , the first - order theory is in expspace , and there exists an example with an expspace - complete first - order theory . *",
    "the uniform first - order theory for injective tree automatic presentations belongs to 4exptime ; the non - uniform one to 3exptime for arbitrary tree automatic structures , and to 2exptime if the growth function is polynomial .",
    "our bounds for the non - uniform problem are sharp , i.e. , there are tree automatic structures of bounded degree ( and polynomial growth ) with a 3exptime - complete ( 2exptime - complete , resp . )",
    "first - order theory .",
    "we conclude this paper with some results on the complexity of first - order fragments with fixed quantifier alternation depth one or two on string / tree automatic structures of bounded degree .",
    "let @xmath1 be a finite alphabet and @xmath2 be a finite word over @xmath1 .",
    "the length of @xmath3 is denoted by @xmath4 .",
    "we also write @xmath5 .",
    "let us define @xmath6 and @xmath7 for @xmath8 .",
    "we assume that the reader has some basic knowledge in complexity theory , see e.g. @xcite . by savitch",
    "s theorem , @xmath9 if @xmath10 .",
    "hence , we can just write @xmath11 for either @xmath12 or @xmath13 . for @xmath14 , we denote with @xmath15expspace ( resp .",
    "@xmath15exptime ) the class of all problems that can be accepted in space ( resp .",
    "time ) @xmath16 on a deterministic turing machine . for 1expspace",
    "we write just expspace .",
    "a computational problem is called _ elementary _ if it belongs to @xmath15exptime for some @xmath17 .      for our purpose",
    "it suffices to consider only tree automata on binary trees .",
    "let @xmath1 be a finite alphabet .",
    "a _ finite binary tree _ over @xmath1 is a mapping @xmath18 , where @xmath19 is finite , nonempty , and satisfies the following closure condition for all @xmath20 : if @xmath21 , then also @xmath22 .",
    "with @xmath23 we denote the set of all finite binary trees over  @xmath1 . a ( top - down ) _ tree automaton over @xmath1 _ is a tuple @xmath24 , where @xmath25 is the finite set of states , @xmath26 is the initial state , and @xmath27 is the non - empty transition relation . a",
    "_ successful run _ of @xmath28 on a tree @xmath29 is a mapping @xmath30 such that ( i ) @xmath31 and ( ii ) for every @xmath32 with children @xmath33 ( thus @xmath34 ) we have @xmath35 .",
    "with @xmath36 we denote the set of all finite binary trees @xmath29 such that there exists a successful run of @xmath28 on  @xmath29 .",
    "a set @xmath37 is called _ regular _ if there exists a finite tree automaton @xmath28 with @xmath38 .",
    "a tree @xmath29 with @xmath39 can be considered as a nonempty string @xmath40 with @xmath41 . in the same spirit , a finite _ string _ automaton can be defined as a tree automaton , where the transition relation @xmath42 in ( [ transition relation ] ) satisfies @xmath43 .",
    "we will need the following well known facts on string / tree automata : emptiness ( resp .",
    "inclusion ) of the languages of string automata can be decided in nondeterministic logarithmic space ( resp .",
    "polynomial space ) , whereas emptiness ( resp .",
    "inclusion ) of the languages of tree automata can be decided in polynomial time ( resp .",
    "exponential time ) , see e.g.  @xcite . in all four cases completeness",
    "holds .      a _ signature _",
    "is a finite set @xmath44 of relational symbols , where every symbol @xmath45 has some fixed arity  @xmath46 .",
    "the notion of an @xmath44-structure ( or model ) is defined as usual in logic .",
    "note that we only consider relational structures .",
    "sometimes , we will also use constants , but in our context , a constant @xmath47 can be always replaced by the unary relation @xmath48 .",
    "let us fix an @xmath44-structure @xmath49 , where @xmath50 . to simplify notation",
    ", we will write @xmath51 for @xmath52 . for @xmath53",
    "we define the restriction @xmath54 .",
    "given further constants @xmath55 , we write @xmath56 for the structure @xmath57 . in the rest of the paper , we will always identify a symbol @xmath58 with its interpretation @xmath59 .    a _ congruence _ on the structure @xmath60",
    "is an equivalence relation @xmath61 on @xmath28 such that for every @xmath62 and all @xmath63 we have : if @xmath64 and @xmath65 , then also @xmath66 . as usual , the equivalence class of @xmath52 w.r.t .",
    "@xmath61 is denoted by @xmath67_\\equiv$ ] or just @xmath67 $ ] and @xmath68 denotes the set of all equivalence classes .",
    "we define the _ quotient structure _ @xmath69 , where @xmath70 , \\ldots , [ a_{m_r } ] ) \\mid ( a_1,\\ldots , a_{m_r } ) \\in r \\}$ ] .",
    "the _ gaifman - graph _",
    "@xmath71 of the @xmath44-structure @xmath72 is the following symmetric graph : @xmath73 thus , the set of nodes is the universe of @xmath72 and there is an edge between two elements , if and only if they are contained in some tuple belonging to one of the relations of  @xmath72 . with @xmath74 ,",
    "where @xmath75 , we denote the distance between @xmath76 and @xmath77 in @xmath71 , i.e. , it is the length of a shortest path connecting @xmath76 and @xmath77 in @xmath71 . for @xmath51 and @xmath78",
    "we denote with @xmath79 the @xmath80-sphere around @xmath76 .",
    "if @xmath72 is clear from the context , then we will omit the subscript @xmath72 .",
    "we say that the structure @xmath72 is _ locally finite _ if its gaifman graph  @xmath71 is locally finite ( i.e. , every node has finitely many neighbors ) .",
    "similarly , the structure @xmath72 has _ bounded degree _ , if @xmath71 has bounded degree , i.e. , there exists a constant  @xmath81 such that every @xmath82 is adjacent to at most @xmath81 many other nodes in @xmath71 ; the minimal such @xmath81 is called the _ degree of @xmath72_. for a structure @xmath72 of bounded degree we can define its _ growth function _ as the mapping @xmath83 with @xmath84 . note that if the function @xmath85 is not bounded then @xmath86 for all @xmath87 . for us , it is more convenient to not have a bounded function describing the growth . therefore , we define the _ normalized growth function @xmath88 _ by @xmath89 .",
    "note that @xmath90 and @xmath88 are different only in the pathological case that all connected components of @xmath72 contain at most @xmath91 elements ( for some fixed @xmath91 ) .",
    "clearly , @xmath92 can grow at most exponentially .",
    "we say that @xmath72 has _ exponential growth _ if @xmath93 ; if @xmath94 , then @xmath72 has _",
    "polynomial growth_.    to define logical formulas , we fix a countable infinite set  @xmath95 of variables , which evaluate to elements of structures . _",
    "formulas over the signature  @xmath44 _ ( or _ formulas _ if the the signature is clear from the context ) are constructed from the atomic formulas @xmath96 and @xmath97 , where @xmath58 and @xmath98 , using the boolean connectives @xmath99 and @xmath100 and existential quantification over variables from  @xmath95",
    ". the boolean connective @xmath101 and universal quantification can be derived from these operators in the usual way .",
    "the _ quantifier depth _ of a formula  @xmath102 is the maximal nesting of quantifiers in  @xmath102 .",
    "the notion of a free variable is defined as usual . a formula without free variables",
    "is called _",
    "closed_. if @xmath103 is a formula with free variables among @xmath104 and @xmath105 , then @xmath106 means that @xmath102 evaluates to true in @xmath72 when the free variable @xmath107 evaluates to @xmath108 .",
    "the _ first - order theory _ of @xmath72 , denoted by @xmath109 , is the set of all closed formulas @xmath102 such that @xmath110",
    ".      this section recalls string automatic and tree automatic structures and basic results about them .",
    "details can be found in the survey @xcite .",
    "string automatic structures were introduced in  @xcite , their systematic study was later initiated by  @xcite .",
    "tree automatic structures were introduced in @xcite , they generalize string automatic structures . here , we will first introduce tree automatic structures .",
    "string automatic structures can be considered as a special case of tree automatic structures .",
    "let @xmath1 be a finite alphabet and let @xmath111 be an additional padding symbol .",
    "let @xmath112 .",
    "we define the _ convolution _",
    "@xmath113 , which is a finite binary tree over the alphabet @xmath114 , as follows : @xmath115 and for all @xmath116 we define @xmath117 , where @xmath118 if @xmath119 and @xmath120 otherwise . in fig .",
    "[ fig : convolution ] , the third tree is the convolution of the first two trees .",
    "( 94,34)(0,-12 ) ( 1)(10,20)@xmath76 ( 2)(5,10)@xmath77 ( 3)(15,10)@xmath77 ( 4)(0,0)@xmath76 ( 5)(10,0)@xmath76 ( 1,2 ) ( 1,3 ) ( 2,4 ) ( 2,5 ) ( 6)(30,20)@xmath76 ( 7)(35,10)@xmath76 ( 8)(30,0)@xmath77 ( 9)(40,0)@xmath77 ( 10)(25,-10)@xmath76 ( 6,7 ) ( 7,8 ) ( 7,9 ) ( 8,10 ) ( 11)(76,20)@xmath121 ( 12)(68,10)@xmath122 ( 13)(84,10)@xmath123 ( 14)(60,0)@xmath124 ( 15)(70,0)@xmath124 ( 16)(82,0)@xmath125 ( 17)(92,0)@xmath125 ( 18)(80,-10)@xmath126 ( 11,12 ) ( 11,13 ) ( 12,14 ) ( 12,15 ) ( 13,16 ) ( 13,17 ) ( 16,18 )    an _ @xmath91-dimensional ( synchronous ) tree automaton _ over @xmath1 is just a tree automaton @xmath28 over the alphabet @xmath114 such that @xmath127 .",
    "such an automaton defines an @xmath91-ary relation @xmath128 a _ tree automatic presentation _ is a tuple @xmath129 , where :    * @xmath1 is a finite alphabet .",
    "* @xmath44 is a signature ( the signature of @xmath130 ) , as before @xmath46 is the arity of the symbol @xmath62 .",
    "* @xmath131 is a tree automaton over the alphabet @xmath1 . * for every @xmath62 , @xmath132 is an @xmath46-dimensional tree automaton over the alphabet @xmath133 such that @xmath134 .",
    "* @xmath135 is a 2-dimensional tree automaton over the alphabet @xmath133 such that @xmath136 and @xmath137 is a congruence on the structure @xmath138 .",
    "this presentation  @xmath130 is called _ injective _ if @xmath137 is the identity relation on @xmath139 . in this case",
    ", we can omit the automaton @xmath135 and identify @xmath130 with the tuple @xmath140 .",
    "the structure presented by @xmath130 is the quotient @xmath141 a structure @xmath72 is called _ tree automatic _ if there exists a tree automatic presentation @xmath130 such that @xmath142 . we will write @xmath143 $ ] for the element @xmath143_{r(a_=)}$ ] ( @xmath144 ) of the structure @xmath145 .",
    "we say that the presentation @xmath130 has bounded degree if the structure @xmath145 has bounded degree .",
    "a _ string automatic presentation _ is a tree automatic presentation , where all tree automata are in fact string automata ( as explained in section  [ s automata ] ) , and a structure @xmath72 is called _ string automatic _ if there exists a string automatic presentation  @xmath130 such that @xmath142 .",
    "typical examples of string automatic structures are @xmath146 ( presburger s arithmetic ) , @xmath147 , and all ordinals below @xmath148  @xcite .",
    "an example of a tree automatic structure , which is not string automatic is @xmath149 ( the natural numbers with multiplication )  @xcite , or the ordinal @xmath148  @xcite",
    ". examples of string automatic structures of bounded degree are transition graphs of turing machines and cayley - graphs of automatic groups @xcite ( or even right - cancellative monoids @xcite ) .",
    "usually a _ tree automatic presentation _ for an @xmath44-structure @xmath60 is defined as a tuple @xmath150 such that    * @xmath1 is a finite alphabet , * @xmath151 is a regular set of trees , * @xmath152 is a surjective function , * the relation @xmath153 can be recognized by a 2-dimensional tree automaton , and * for every @xmath58 , the relation @xmath154 can be recognized by an @xmath46-dimensional tree automaton .    since for our considerations , tree automatic presentations",
    "are part of the input for algorithms , we prefer our definition , where a tree automatic presentation is a finite object ( a tuple of finite tree automata ) , whereas in the standard definition , the presentation also contains the presentation map @xmath155 .",
    "we will consider the following classes of tree automatic presentations : @xmath156      for the above classes of tree automatic presentations , we will be interested in the following decision problems .",
    "let @xmath157 be a class of tree automatic presentations .",
    "then the _ first - order model checking problem @xmath158 for @xmath157 _ denotes the set of all pairs @xmath159 where @xmath160 , and @xmath102 is a closed formula over the signature of @xmath130 such that @xmath161 .",
    "if @xmath162 is a singleton , then the model checking problem @xmath158 for @xmath157 can be identified with the first - order theory of the structure @xmath145 .",
    "an algorithm deciding the model checking problem for a nontrivial class  @xmath157 decides the first - order theories of each element of @xmath157 uniformly .",
    "the following two results are the main motivations for investigating tree automatic structures .",
    "[ p closure automatic ] there exists an algorithm that computes from a tree automatic presentation @xmath163 and a formula @xmath164 an @xmath91-dimensional tree automaton @xmath28 over @xmath1 with @xmath165 , \\ldots , [ u_m ] ) \\}$ ] .",
    "the automaton is constructed by induction on the structure of the formula  @xmath102 : disjunction corresponds to the disjoint union of automata , existential quantification to projection , and negation to complementation .",
    "the following result is a direct consequence .",
    "[ t khoner94 ] the model checking problem @xmath166 for all tree automatic presentations is decidable . in particular ,",
    "the first - order theory @xmath109 of every tree automatic structure @xmath72 is decidable .    strictly speaking , @xcite device algorithms that , given a tree automatic presentation and a closed formula , decide whether the formula holds in the presented structure . but a priori",
    ", it is not clear whether it is decidable , whether a given tuple @xmath167 is a tree automatic presentation .",
    "lemma  [ l - ta - decidable ] below shows that @xmath168 is indeed decidable , which then completes the proof of this theorem .",
    "theorem  [ t khoner94 ] holds even if we add quantifiers for `` there are infinitely many @xmath169 such that  @xmath170 '' @xcite and `` the number of elements satisfying @xmath170 is divisible by @xmath15 '' ( for @xmath17 )  @xcite .",
    "this implies in particular that it is decidable whether a tree automatic presentation describes a locally finite structure .",
    "but the decidability of the first - order theory is far from efficient , since there are even string automatic structures with a nonelementary first - order theory  @xcite .",
    "for instance the structure @xmath171 , where @xmath172 for @xmath173 and @xmath174 is the prefix order on finite words , has a nonelementary first - order theory , see e.g.  ( * ? ? ?",
    "* example 8.3 ) . a locally finite example ( encoding the set of all finite labeled linearly ordered sets  @xcite ) is as follows : the universe is the set @xmath175 .",
    "in addition , we have a partial order @xmath176 that encodes the labeling .",
    "this paper is concerned with the uniform and non - uniform complexity of the first - order theory of ( some subclass of ) tree automatic structures of bounded degree .",
    "thus , we will consider algorithms that take as input tree automatic presentations ( together with closed formulas ) .",
    "for complexity considerations , we have to define the size @xmath177 of a tree automatic presentation @xmath178 .",
    "first , let us define the size @xmath179 of an @xmath91-dimensional tree automaton @xmath180 over @xmath1 .",
    "a transition tuple from @xmath42 ( see ( [ transition relation ] ) ) can be stored with at most @xmath181 many bits .",
    "hence , up to constant factors , @xmath42 can be stored in space @xmath182 .",
    "we can assume that every state is the first component of some transition tuple , i.e. , latexmath:[$|q|\\leq    @xmath1 can be bounded by @xmath184 as well , but the dimension @xmath91 is independent from the size of  @xmath42 .",
    "since our complexity measures will be up to polynomial time reductions , it makes sense to define the size of the tree automaton @xmath28 to be @xmath185 .",
    "we assume @xmath42 to be nonempty , hence @xmath186 .",
    "the size of the presentation @xmath129 is @xmath187 .",
    "note that @xmath188 and @xmath189 , when @xmath91 is the maximal arity in @xmath44",
    ". it will be convenient to work with injective string ( resp .",
    "tree ) automatic presentations .",
    "the following lemma says that this is no restriction , at least if we do not consider complexity aspects .",
    "[ l - injective ] from a given @xmath190 we can compute effectively @xmath191 with @xmath192 . if @xmath193 , then @xmath194 with @xmath195 can be computed in time @xmath196 .    in @xcite ,",
    "only the existence of an equivalent injective tree automatic presentation is stated , but the proofs of ( * ? ? ?",
    "3.1 and theorem  4.1 ) are effective although the complexity is difficult to extract .",
    "the following lemma shows that the classes of all tree and string automatic presentations are decidable and gives complexity bounds . while these two results are not surprising , it is not clear how to determine whether @xmath145 has bounded degree  this will be solved by prop .",
    "[ p - degree1 ] below .",
    "[ l - ta - decidable ] the class @xmath168 is in  exptime , and the class @xmath197 belongs to  pspace .",
    "we start with a proof of the first statement .",
    "suppose we are given a finite alphabet  @xmath1 , tree automata @xmath131 over @xmath1 , and multi - dimensional tree automata @xmath135 and @xmath132 for @xmath58 over  @xmath133 .",
    "in a first step , we check that @xmath198 and @xmath199 are languages of convolutions of elements of @xmath139 , in particular @xmath200 where @xmath46 is the arity of the automaton  @xmath132 .",
    "an automaton for the right - hand side has size @xmath201 .",
    "thus , the inclusion can be decided in time exponential in @xmath202 .",
    "since @xmath46 depends on the input , this yields a doubly exponential algorithm .",
    "alternatively , we proceed as follows :    a.   we check that no tree from @xmath199 contains the label @xmath203 . to this aim ,",
    "replace in all transitions of @xmath132 the letters from @xmath204 by @xmath205 and the letter @xmath203 by @xmath206 and check whether the language of the resulting automaton @xmath207 is contained in @xmath208 ( the set of all @xmath205-labeled binary trees ) . since the set @xmath208 can be accepted by a fixed automaton , this inclusion can be decided in polynomial time .",
    "b.   let @xmath209 denote the set of those trees @xmath29 whose @xmath1-labeled nodes form an initial segment of  @xmath29 that belongs to @xmath139 . to accept @xmath210 , we extend @xmath131 as follows ( where @xmath211 ) : * we add a new state @xmath212 and transitions @xmath213 , @xmath214 , and @xmath215 . * for each transition @xmath216 , we add the transition @xmath217 . * for each transition @xmath218 , we add the transitions @xmath219 and @xmath220 .",
    "+ let @xmath221 denote the resulting tree automaton and , for @xmath222 , let @xmath223 denote the projection of @xmath132 to its @xmath224 component .",
    "then we check , for all @xmath225 whether @xmath226 which can be done in exponential time .",
    "all these tests are passed if and only if ( [ eq : test1 ] ) holds for  @xmath132 . in particular",
    ", we can from now on speak of the relations @xmath137 and @xmath227 over @xmath139 .",
    "it remains to be checked that @xmath137 is a congruence on the structure @xmath228 .",
    "for this , we proceed as follows    a.   first build 2-dimensional tree automata @xmath229 , @xmath230 , and @xmath231 of polynomial size with @xmath232 , @xmath233 , and @xmath234 . then check @xmath235 which can be done in exponential time .",
    "this test is passed if and only if @xmath137 is an equivalence relation on @xmath139 .",
    "b.   for each @xmath58 , first construct an @xmath236-dimensional tree automaton @xmath207 such that the tuple @xmath237 belongs to @xmath238 if and only if @xmath239 for all @xmath225 and @xmath240 .",
    "this can be achieved by running @xmath46 copies of @xmath135 as well as one copy of @xmath132 in parallel .",
    "then project the automaton @xmath207 onto the first @xmath46 components and check whether the relation accepted by the resulting tree automaton is contained in  @xmath227 .",
    "although @xmath241 has exponential size ( since @xmath46 depends on the presentation  @xmath130 ) , this can be done again in exponential time : we complement @xmath132 , take the intersection with @xmath241 and check the resulting automaton ( of exponential size ) for emptiness .",
    "this finishes the proof of the first statement . to prove the second",
    ", one can proceed analogously using that the inclusion problem for string automata belongs to pspace .    from the lower bounds for inclusion of string / tree automata",
    ", it follows easily that the upper bounds in lemma  [ l - ta - decidable ] are sharp .",
    "the following lemma says that the gaifman graph of a string ( resp.tree ) automatic structure is effectively string ( resp .",
    "tree ) automatic .",
    "this is an immediate consequence of prop .",
    "[ p closure automatic ] , so the novelty lies in the estimation of the complexity .",
    "[ l - gaifman - automaton ] from a given tree ( string ) automatic presentation @xmath242 one can construct a 2-dimensional tree ( string ) automaton @xmath28 such that @xmath243 , [ v ] )       \\text { is an edge of the gaifman - graph } g({{\\mathcal{a}}}(p ) ) \\}\\ .\\ ] ] if @xmath91 is the maximal arity in @xmath44 , then @xmath28 can be computed in time @xmath244 .",
    "we only give the proof for string automatic presentations , the tree automatic case can be shown verbatim .",
    "let @xmath245 be the edge relation of the gaifman - graph @xmath246 .",
    "note that for all @xmath247 we have @xmath248 , [ v])\\in e$ ] iff for some @xmath58 of arity @xmath249 and @xmath250 , there exist @xmath251 with @xmath252 , @xmath253 , and @xmath254 .",
    "let @xmath58 and @xmath250 .",
    "projecting the automaton @xmath132 onto the tracks @xmath255 and @xmath256 , one obtains a 2-dimensional automaton accepting all pairs @xmath257 such that there exists @xmath258 with @xmath253 and @xmath254 .",
    "then the disjoint union of all these automata ( for @xmath58 and @xmath250 ) satisfies ( [ auto for gaifman ] ) . since @xmath259",
    ", the construction can be performed in time @xmath260 .",
    "lemma  [ l - gaifman - automaton ] allows to show that also the bounded classes @xmath261 etc .",
    "are decidable :    [ p - degree1 ] the following hold :    a.   the class @xmath261 is decidable .",
    "b.   the class @xmath262 can be decided in exponential time ( in fact , it can be checked in polynomial time whether a given @xmath263 has bounded degree ) . c.   the class @xmath264 can be decided in exponential time .    for statement ( a )",
    ", let @xmath190 ( which is decidable by lemma  [ l - ta - decidable ] in exponential time ) . by lemma  [ l - injective ]",
    ", we can assume @xmath130 to be injective . by lemma  [ l - gaifman - automaton ] we can compute an automaton @xmath28 with ( [ auto for gaifman ] ) , i.e.",
    ", @xmath28 defines the edge relation of the gaifman - graph of @xmath145 .",
    "since @xmath130 was assumed to be injective ( i.e. every equivalence class @xmath143 $ ] is the singleton @xmath265 ) , @xmath145 is of bounded degree iff @xmath28 ( seen as a transducer ) is finite - valued .",
    "but this is decidable in polynomial time  @xcite .",
    "this finishes the proof of  ( a ) .",
    "next consider statement  ( b ) : provided the input is guaranteed to be an injective tree automatic presentation , the polynomial time bound follows from the arguments above since there is no need to apply lemma  [ l - injective ] .",
    "it remains to decide whether the input is indeed an injective tree automatic presentation : using lemma  [ l - ta - decidable ] , it suffices to decide injectivity which can be done in exponential time by checking inclusion of @xmath198 in the convolution of the identity on  @xmath23 .    for ( c ) ,",
    "where we start with a string automatic presentation ( which can be decided in polynomial space and therefore exponential time by lemma  [ l - ta - decidable ] ) , the initial application of lemma  [ l - injective ] leads to an exponential blow - up , which gives in total an exponential running time for deciding the class  @xmath264 .    finally ,",
    "since we deal with structures of bounded degree , it will be important to estimate the degree of such a structures given its presentation .",
    "such estimates are provided by the following result .",
    "[ p - degree ] the following hold :    a.   if @xmath266 , then the degree of the structure @xmath145 is bounded by @xmath267 .",
    "b.   if @xmath268 , then the degree of the structure @xmath145 is bounded by @xmath269 . c.   if @xmath270 , then the degree of the structure @xmath145 is bounded by @xmath269 .",
    "for statement  ( a ) let @xmath266 . from lemma  [ l - gaifman - automaton ] , we can construct a string automaton  @xmath28 of size @xmath271 that accepts the edge relation of the gaifman graph of @xmath145",
    ". then the degree of @xmath145 equals the maximal outdegree of the relation @xmath272 . for string transducer ,",
    "this number is exponential in the size of  @xmath28 , i.e. , it is in @xmath267  @xcite .    for ( b ) we can use a similar argument .",
    "but since the maximal outdegree of the relation recognized by a tree transducer @xmath28 is doubly exponential in the size of @xmath28 @xcite , we obtain the bound @xmath269 for the degree of @xmath145 .",
    "finally statement ( c ) follows immediately from lemma  [ l - injective ] and ( a ) .    the bounds on injective string ( resp .",
    "tree ) automatic presentations in prop .",
    "[ p - degree ] are sharp : let @xmath273 .",
    "then the structure @xmath274 has an injective string automatic presentation of size @xmath275 .",
    "the degree of this structure is @xmath276 .",
    "similarly , let @xmath277 the set of all pairs @xmath278 of trees that differ at most in the first @xmath279  levels .",
    "then @xmath280 allows an injective tree automatic presentation of size @xmath275 and the degree of this structure is doubly exponential in  @xmath279 .",
    "but it is not clear whether the doubly exponential bound for automatic presentations in prop .",
    "[ p - degree](c ) can be realized .",
    "moreover , we can not give any bound for general tree automatic presentations since , as already remarked , @xcite does not provide any estimate on the size of an equivalent _ injective _ tree automatic presentation .",
    "it is the aim of this section to give an algorithm that decides the theory of a string / tree automatic structure of bounded degree .",
    "the algorithm from theorem  [ t khoner94 ] ( that in particular solves this problem ) is based on prop .  [",
    "p closure automatic ] , i.e. , the inductive construction of an automaton accepting all satisfying assignments .",
    "differently , we base our algorithm on gaifman s theorem  [ t - gaifman ] , i.e. , on the combinatorics of spheres .",
    "we therefore start with some model theory .",
    "the following locality principle of gaifman implies that super - exponential distances can not be handled in first - order logic :    [ t - gaifman ] let @xmath72 be a structure , @xmath281 , @xmath78 , and @xmath282 such that @xmath283 then , for every formula @xmath284 of quantifier depth at most @xmath80 , we have : @xmath285    note that ( [ iso ] ) says that there is an isomorphism between the two induced substructures @xmath286 and @xmath287 that maps @xmath108 to @xmath288 for all @xmath289 .",
    "let @xmath44 be a signature and let @xmath290 with @xmath291 .",
    "potential @xmath292-sphere _ is a tuple @xmath293 such that the following holds :    * @xmath294 is an @xmath44-structure with @xmath295 .",
    "* for all @xmath296 there exists @xmath289 such that @xmath297 .",
    "there is only one @xmath298-sphere namely the empty sphere @xmath299 . for our later applications",
    ", @xmath294 will be always a finite structure , but in this subsection finiteness is not needed .",
    "the potential @xmath292-sphere @xmath293 is _ realizable in the structure @xmath72 _ if there exist @xmath300 such that @xmath301 let @xmath302 be a potential @xmath292-sphere and let @xmath303 be a potential @xmath304-sphere ( @xmath305 )",
    ". then @xmath306 _ extends _",
    "@xmath307 ( abbreviated @xmath308 ) if @xmath309 the following definition is the basis for our decision procedure .",
    "[ d - boolean ] let @xmath72 be an @xmath44-structure , @xmath310 a formula of quantifier depth at most  @xmath80 , and let @xmath311 be a potential @xmath312-sphere . the boolean value @xmath313 is defined inductively as follows :    * if @xmath314 is an atomic formula , then @xmath315 * if @xmath316 , then @xmath317 . * if @xmath318 , then @xmath319 .",
    "* if @xmath320 then @xmath321    the following result ensures for every closed formula  @xmath322 that @xmath323",
    "if and only if @xmath324 . hence the above definition can possibly be used to decide validity of the formula  @xmath102 in the structure  @xmath72 .",
    "[ p upper bound ] let @xmath44 be a signature , @xmath72 an @xmath44-structure with @xmath325 , @xmath326 a formula of quantifier depth at most  @xmath80 , and @xmath327 a potential @xmath312-sphere with @xmath328 then @xmath329 .",
    "we prove the lemma by induction on the structure of the formula  @xmath322 .",
    "first assume that @xmath322 is atomic , i.e. @xmath330",
    ". then we have : @xmath331 where the last equivalence holds since @xmath322 is atomic .",
    "the cases @xmath316 and @xmath318 are straightforward and therefore omitted .",
    "we finally consider the case @xmath332 .",
    "first assume that @xmath333 .",
    "by ( [ existential ] ) , there exists a realizable potential @xmath334-sphere @xmath306 with @xmath308 and @xmath335 . since @xmath306 is realizable , there exist @xmath336 with @xmath337 by induction , we have @xmath338 and therefore @xmath339 . from ( [ real ] ) , ( [ real k+1 ] ) , and @xmath340 , we also obtain @xmath341 and therefore by gaifman s theorem  [ t - gaifman ] @xmath342",
    ".    conversely , let @xmath343 with @xmath344 .",
    "let @xmath345 be the unique ( up to isomorphism ) potential @xmath334-sphere such that @xmath346 then ( [ real ] ) implies @xmath308 .",
    "moreover , by ( [ real k+1 ] ) , @xmath306 is realizable in @xmath72 , and @xmath344 implies by induction @xmath335 .",
    "hence , by ( [ existential ] ) , we get @xmath333 which finishes the proof of the lemma .      now suppose we want to decide whether the closed formula @xmath102 holds in a tree automatic structure  @xmath72 of _ bounded degree_. by prop .",
    "[ p upper bound ] it suffices to compute the boolean value  @xmath347 .",
    "this computation will follow the inductive definition of @xmath348 from def .",
    "[ d - boolean ] . since every @xmath292-sphere that is realizable in @xmath72 is finite , we only have to deal with finite spheres .",
    "the crucial part of our algorithm is to determine whether a finite potential @xmath292-sphere is realizable in  @xmath72 . in the following , for a finite potential @xmath292-sphere @xmath349",
    ", we denote with @xmath350 the number of elements of @xmath294 and with @xmath351 we denote the degree of the finite structure @xmath294 .",
    "we have to solve the following realizability problem :    let @xmath157 be a class of tree automatic presentations . then the _ realizability problem @xmath352 for @xmath157 _ denotes the set of all pairs @xmath353 where @xmath354 and @xmath307 is a _ finite _",
    "potential @xmath292-sphere over the signature of @xmath130 for some @xmath355 such that @xmath307 can be realized in @xmath145 .",
    "[ l - realisability ] the problems @xmath356 and @xmath357 are decidable . more precisely :    * let @xmath358 and let @xmath91 be the maximal arity of a relation in @xmath145 .",
    "let @xmath307 be a finite potential @xmath292-sphere over the signature of @xmath130 .",
    "then it can be checked in space @xmath359 , whether @xmath307 is realizable in @xmath145 . * if @xmath263 , then realizability can be checked in time @xmath360 .",
    "we first prove the statement on injective string automatic presentations .",
    "let @xmath361 .",
    "let @xmath349 and let @xmath362 be a list of all elements of @xmath294 .",
    "note that every @xmath288 occurs in this list .",
    "let @xmath363 be the edge relation of the gaifman graph  @xmath246 and @xmath364 that of the gaifman graph  @xmath365 .",
    "then @xmath307 is realizable in @xmath145 if and only if there are words @xmath366 such that    a.   @xmath367 for all @xmath368 , b.   @xmath369 for all @xmath370 , c.   @xmath371 for all @xmath58 and all @xmath372 , d.   @xmath373 for all @xmath58 and all @xmath374 , and e.   there is no @xmath375 such that , for some @xmath376 and @xmath377 with @xmath378 , we have 1 .",
    "@xmath379 and 2 .",
    "@xmath380 .",
    "then ( a - d ) express that the mapping @xmath381 is well - defined and an embedding of @xmath294 into  @xmath145 . in  ( e )",
    ", @xmath379 implies that @xmath382 belongs to @xmath383 .",
    "hence ( e ) expresses that all elements of @xmath383 belong to the image of this embedding .",
    "we now construct a @xmath350-dimensional automaton  @xmath28 over the alphabet @xmath1 that checks ( a - e ) . at the end",
    ", we have to check the language of this automaton for non - emptiness .",
    "the automaton @xmath28 is the direct product of automata @xmath384 , @xmath385 , @xmath386 , @xmath387 , and @xmath388 that check the conditions separately .",
    "then @xmath384 is the direct product of @xmath350 many copies of the automaton @xmath131 , hence @xmath384 has at most @xmath389 many states .",
    "next , the automaton for ( b ) is the direct product of @xmath390 many copies of an automaton of fixed size ( that checks whether two tracks are different ) .",
    "hence , this automaton has @xmath391 many states .",
    "the automaton @xmath386 is again a direct product , this time of one automaton for each @xmath58 ( and therefore of at most  @xmath177 many automata ) .",
    "each of these automata is the direct product of @xmath392  many copies of the automaton @xmath132 . since the arity of @xmath58",
    "is bounded by @xmath91 , we have @xmath393 .",
    "hence , the automaton @xmath386 has at most @xmath394 many states . for  @xmath387 , we can argue similarly , but this time using copies of the complement of the automaton  @xmath132 . this yields for @xmath387 the bound @xmath395 on the number of states .",
    "it remains to construct the automaton  @xmath388 .",
    "for this , we first construct its complement , i.e. , an automaton  @xmath396 that checks for the existence of @xmath375 with the desired properties .",
    "this automaton @xmath396 is the disjoint union of at most @xmath350  many automata , one for each @xmath376 such that there exists @xmath377 with @xmath397 .",
    "any of these components consists of the direct product of automata @xmath398 and @xmath399 checking ( e.1 ) and ( e.2 ) , respectively . by lemma",
    "[ l - gaifman - automaton ] , @xmath398 hast at most @xmath400 many states .",
    "recall that the degree of @xmath294 is @xmath351 .",
    "hence , the set @xmath401 contains at most @xmath351 many elements .",
    "thus , ( e.2 ) can be checked by an automaton  @xmath399 with @xmath402 many states .",
    "hence , @xmath396 is the disjoint union of at most @xmath350 copies of an automaton of size @xmath403 and therefore has at most @xmath404 many states .",
    "now the number of states of @xmath388 can be bound by @xmath405 .    in summary",
    ", the automaton @xmath28 has at most @xmath406 many states . hence checking emptiness of its language ( and therefore realizability of @xmath307 in @xmath145 ) can be done in space logarithmic to the number of states , i.e. , in space @xmath359 which proves the statement for string automatic presentations .    for injective tree automatic presentations , the construction and size estimate for  @xmath28 are the same as above . but emptiness of tree automata can only be checked in deterministic polynomial time ( and not in logspace unless @xmath407 ) . hence , emptiness of @xmath28 can be checked in time @xmath408 .    in the following , for a tree automatic presentation @xmath130 of bounded degree , we denote with @xmath409 the normalized growth function of the structure @xmath145 .",
    "[ t - upper ] the model checking problem @xmath410 is decidable , i.e. , on input of a tree automatic presentation  @xmath130 of bounded degree and a closed formula  @xmath102 over the signature of  @xmath130 , one can effectively determine whether @xmath411 holds .",
    "more precisely ( where @xmath91 is the maximal arity of a relation from the signature of  @xmath130 ) :    1 .",
    "@xmath412 can be decided in space @xmath413 2 .",
    "@xmath414 can be decided in space @xmath415 3 .",
    "@xmath416 can be decided in time @xmath417    the decidability follows immediately from theorem  [ t khoner94 ] and prop .",
    "[ p - degree1](a ) .",
    "we first give the proof for injective string automatic presentations . by prop .",
    "[ p upper bound ] it suffices to compute the boolean value @xmath347 .",
    "recall the inductive definition of @xmath348 from def .",
    "[ d - boolean ] that we now translated into an algorithm for computing  @xmath347 .",
    "first note that such an algorithm has to handle potential @xmath292-spheres for @xmath418 ( @xmath80 is the quantifier rank of @xmath102 ) that are realizable in  @xmath145 .",
    "the number of nodes of a potential @xmath292-sphere realizable in @xmath145 is bounded by @xmath419 since @xmath420 .",
    "the number of relations of @xmath145 is bounded by  @xmath177 .",
    "hence , any potential @xmath292-sphere can be described by @xmath421 many bits .",
    "note that the set of @xmath292-spheres with @xmath355 ( ordered by the extension relation  @xmath174 ) forms a tree of depth  @xmath422 .",
    "the algorithm visits the nodes of this tree in a depth - first manner ( and descents when unraveling an existential quantifier ) .",
    "hence we have to store @xmath422 many spheres . for this ,",
    "the algorithm needs space @xmath423 .    moreover , during the unraveling of a quantifier , the algorithm has to check realizability of a potential @xmath292-sphere for @xmath424 .",
    "any such sphere has at most @xmath425 many elements and the degree @xmath81 of @xmath72 is bounded by @xmath426 by prop .",
    "[ p - degree ] .",
    "hence , by lemma  [ l - realisability ] , realizability can be checked in space @xmath427 .    at the end , we have to check whether a tuple @xmath428 satisfies an atomic formula @xmath429 , which is trivial . in total",
    ", the algorithm runs in space @xmath430    recall that @xmath431 and @xmath432 by prop .",
    "[ p - degree ] . since also @xmath433",
    ", we obtain @xmath434 this completes the consideration for injective string automatic presentations .",
    "if @xmath130 is just automatic , we can transform it into an equivalent injective automatic presentation which increases the size exponentially by lemma  [ l - injective ] . hence , replacing @xmath177 by @xmath196 yields the space bound .",
    "next , we consider injective tree automatic presentations .",
    "the algorithm is the same , i.e. , it parses the tree of all potential @xmath292-spheres and checks them for realizability .",
    "note that the number of potential @xmath292-spheres is in @xmath435 . by prop .",
    "[ p - degree ] , the degree @xmath81 is bounded by @xmath269 . hence , by lemma  [ l - realisability ] , the realizability of any potential @xmath292-sphere can be checked in time @xmath436 recall that @xmath437 and @xmath438 by prop .  [ p - degree ] . since also @xmath439",
    ", we obtain @xmath440    note that the above theorem does not give the complexity for  @xmath410 , i.e. , for arbitrary tree automatic presentations of bounded degree : here , one can proceed as for string automatic presentations , i.e. , make the presentation injective and refer to the above result on @xmath416  this gives the decidability that we already know from theorem  [ t khoner94 ] and prop .",
    "[ p - degree1 ] . at present",
    ", we can not compare the complexity of this new algorithm with the nonelementary one from theorem  [ t khoner94 ] since the size of the injective presentation is not known .",
    "we derive a number of consequences on the uniform and non - uniform complexity of the first - order theories of string / tree automatic structures of bounded degree .",
    "the first one concerns the uniform model checking problems and is a direct consequence of the above theorem .",
    "the following holds :    * the model checking problem @xmath441 belongs to 2expspace . *",
    "the model checking problem @xmath414 belongs to 3expspace . *",
    "the model checking problem @xmath416 belongs to 4exptime .",
    "next we concentrate on the non - uniform complexity , where the structure is fixed . for string automatic structures , we do not get a better upper bound in this case ( statement  ( i ) below ) except in case of polynomial growth ( statement  ( ii ) below ) .",
    "[ c automatic ] let @xmath72 be a string automatic structure of bounded degree .",
    "a.   then @xmath109 belongs to 2expspace .",
    "b.   if @xmath72 has polynomial growth then @xmath109 belongs to expspace .    since @xmath72 is string automatic , it has a fixed injective string automatic presentation  @xmath130 , i.e. , @xmath177 and @xmath91 are fixed constants .",
    "hence the result follows immediately from ( 1 ) in theorem  [ t - upper ] .",
    "now suppose that @xmath72 has polynomial growth , i.e. , @xmath442 .",
    "then , again , the claim follows immediately from ( 1 ) in theorem  [ t - upper ] , since @xmath443 .",
    "the last consequence of theorem  [ t - upper ] concerns tree automatic structures . here",
    ", we can improve the upper bound from theorem  [ t - upper ] for the non - uniform case by one exponent . in case of polynomial growth",
    ", we can save yet another exponent :    [ c tree automatic ] let @xmath72 be a tree automatic structure of bounded degree .",
    "a.   then @xmath109 belongs to 3exptime .",
    "b.   if @xmath72 has polynomial growth then @xmath109 belongs to 2exptime .    since @xmath72 is tree automatic , it has a fixed injective tree automatic presentation  @xmath130 .",
    "hence , again , the first claim follows immediately from ( 3 ) in theorem  [ t - upper ] .",
    "now suppose that @xmath72 has polynomial growth , i.e. , @xmath442 .",
    "then the claim follows since @xmath444 implying that the problem belongs to 2exptime .",
    "we complement this section with a short excursion into the field of growth functions of automatic structures .",
    "the two results to be reported indicate that these growth functions do not behave as nicely as one would wish .",
    "fortunately , these negative findings are of no importance to our main concerns .",
    "recall that the growth rate of a regular language is either bounded by a polynomial from above or by an exponential function from below and that it is decidable which of these cases applies .",
    "the next lemmas show that the analogous statements for growth functions of string automatic structures are false .",
    "there is a string automatic graph of intermediate growth ( i.e. , the growth is neither exponential nor polynomial ) .",
    "let @xmath445 and let @xmath245 be @xmath446 then @xmath447 is a string automatic tree obtained from the complete binary tree @xmath448 by adding a path of length @xmath279 between @xmath449 and @xmath450 for @xmath451 and @xmath452 .",
    "hence , a path of length @xmath279 starting in the root @xmath453 of @xmath454 branches at distance @xmath455 from the root .",
    "hence , for the growth function @xmath456 we obtain the following estimate : @xmath457    it is undecidable whether a string automatic graph of bounded degree has polynomial growth .",
    "we show the undecidability by a reduction of the halting problem ( with empty input ) for turing machines .",
    "so let @xmath458 be a turing machine .",
    "we can transform @xmath458 into a deterministic reversible turing machine @xmath459 such that :    a.   @xmath458 halts on empty input if and only if @xmath459 does so",
    ". b.   @xmath459 does not allow infinite sequences of backwards steps ( i.e. , there are no configurations @xmath460 with @xmath461 for all @xmath462 ) , see also @xcite for a similar construction .",
    "let @xmath463 be the set of configurations of @xmath459 ( a regular set ) and @xmath464 the initial configuration with empty input .",
    "now define @xmath465 ( we assume that @xmath466 and @xmath467 do not belong to the alphabet of @xmath463 ) and @xmath468 then @xmath469 is an automatic directed graph . since @xmath459 is reversible , it is a forest of rooted trees ( by ( ii ) ) .",
    "first suppose there are configurations @xmath470 with @xmath471 for @xmath472 such that @xmath473 is halting .",
    "then the set @xmath474 forms an infinite tree in @xmath469 .",
    "any branch in this tree branches every @xmath279 steps . hence @xmath469 has exponential growth .",
    "now assume that @xmath464 is the starting point of an infinite computation .",
    "let @xmath454 be any tree in the forest @xmath469 .",
    "then its root is of the form @xmath475 with @xmath476 , @xmath477 , and @xmath478 such that @xmath47 is no successor configuration of any other configuration .",
    "there are two possibilities :    1 .",
    "the configuration @xmath47 is the starting configuration of an infinite computation of @xmath459 .",
    "then @xmath454 is an infinite path .",
    "2 .   there is a halting configuration @xmath479 and @xmath480 with @xmath481 .",
    "then @xmath454 starts with a path of length @xmath279 .",
    "the final node of this path has two children , namely @xmath482 and @xmath483 .",
    "but , since @xmath459 does not halt on the empty input , each of these nodes is the root of an infinite path .",
    "thus , in this case @xmath469 has polynomial ( even linear ) growth .",
    "in this section , we will prove that the upper complexity bounds for the non - uniform problems ( cor .",
    "[ c automatic ] and cor .  [ c tree automatic ] ) are sharp .",
    "this will imply that the complexity of the uniform problem for injective string automatic presentations from theorem  [ t - upper ] is sharp as well .    for a binary relation @xmath484 and @xmath485",
    "we denote with @xmath486 the @xmath91-fold composition of @xmath484 .",
    "then the following lemma is folklore .",
    "[ l long paths ] let the signature @xmath44 contain a binary symbol @xmath484 . from a given number @xmath91 ( encoded unary )",
    ", we can construct in linear time a formula @xmath487 such that for every @xmath44-structure @xmath72 and all elements @xmath488 we have : @xmath489 if and only if @xmath490 .",
    "let @xmath491 and , for @xmath492 define @xmath493    for a bit string @xmath494 ( @xmath495 ) let @xmath496 be the integer value represented by @xmath449 .",
    "vice versa , for @xmath497 let @xmath498 be the unique string with @xmath499 .",
    "[ t 2expspace ] there exists a fixed string automatic structure @xmath72 of bounded degree such that @xmath109 is 2expspace - hard .",
    "let @xmath459 be a fixed turing machine with a space bound of @xmath500 such that @xmath459 accepts a 2expspace - complete language ; such a machine exists by standard arguments .",
    "let @xmath1 be the tape alphabet , @xmath501 be the input alphabet , and @xmath25 be the set of states .",
    "the initial ( resp . accepting ) state is @xmath26 ( resp .",
    "@xmath502 ) , the blank symbol is @xmath503 .",
    "let @xmath504 .",
    "a configuration of @xmath459 is described by a string from @xmath505 ( later , symbols of configurations will be preceded with additional counters ) . for two configurations @xmath449 and @xmath382 with @xmath506 we write @xmath507 if @xmath449 can evolve with a single @xmath459-transition into @xmath382 .",
    "note that there exists a relation @xmath508 such that for all configurations @xmath509 and @xmath510 ( @xmath511 ) we have @xmath512 let @xmath513 , and let @xmath514 be the projection morphism with @xmath515 for @xmath516 and @xmath517 . for @xmath518",
    ", a string @xmath519 is an _ accepting @xmath520-computation _",
    "if @xmath169 can be factorized as @xmath521 for some @xmath87 such that the following holds :    * for every @xmath522 there exist @xmath523 such that @xmath524 . * for every @xmath522 , @xmath525 . *",
    "@xmath526 and @xmath527 * for every @xmath528 , @xmath529 .    from @xmath459",
    "we now construct a fixed string automatic structure @xmath72 of bounded degree .",
    "we start with the following regular language @xmath530 : @xmath531 a string @xmath532 is a candidate for an accepting @xmath520-computation of @xmath459 . with ( [ u0 - 1 ] )",
    "we describe the basic structure of such a computation , it consists of a list of configurations separated by  @xmath533 .",
    "moreover , every symbol in a configuration is preceded by a bit string , which represents a _ counter_. by ( [ u0 - 2 ] ) every counter is non - empty , the first symbol in a configuration is preceded by a counter from @xmath534 , the last symbol is preceded by a counter from @xmath535 . moreover , by ( [ u0 - 3 ] ) , the first configuration is an initial configuration , whereas by ( [ u0 - 4 ] ) , the last configuration is accepting ( i.e. the current state is @xmath536 ) .    for the further considerations ,",
    "let us fix some @xmath532 .",
    "hence , we can factorize @xmath169 as @xmath537 such that :    * for every @xmath522 , there exist @xmath538 , @xmath539 and counters @xmath540 such that @xmath541 . * for every @xmath522 , @xmath542 , @xmath543 , and @xmath525 . *",
    "@xmath526 and @xmath527    we next want to construct , from @xmath544 , a small formula expressing that @xmath169 is an accepting @xmath520-computation . to achieve this , we add some structure around strings from  @xmath530 .",
    "then the formula we are seeking has to ensure two facts :    a.   the counters behave correctly , i.e. for all @xmath522 and @xmath545 , we have @xmath546 and if @xmath547 , then @xmath548 . note that this enforces @xmath549 for all @xmath522 .",
    "b.   for two successive configurations , the second one is the successor configuration of the first one with respect to the machine @xmath459 , i.e. , @xmath529 for all @xmath528 .    in order to achieve ( a ) ,",
    "we introduce the following three binary relations ; it is straightforward to exhibit 2-dimensional automata for these relations : @xmath550 hence , @xmath81 just duplicates a string from @xmath530 and @xmath551 cyclically rotates every configuration to the left for one symbol , provided the first symbol is @xmath466 , whereas @xmath552 rotates symbols from @xmath553",
    ". moreover , let @xmath554 be the following regular language over @xmath555 : @xmath556 clearly , @xmath554 is a regular language .",
    "the crucial fact is the following :    * fact 1 .",
    "* for every @xmath485 , the following two properties are equivalent ( recall that @xmath532 ) :    * there exist @xmath557 such that @xmath558 , @xmath559 , @xmath560 , @xmath561 .",
    "* for all @xmath522 and @xmath545 , we have @xmath562 and if @xmath547 , then @xmath548 .",
    "assume now that @xmath532 satisfies one ( and hence both ) of the two properties from fact 1 for some @xmath91 .",
    "it follows that @xmath549 for all @xmath522 and @xmath563 in order to establish ( b ) we need additional structure .",
    "the idea is , for every counter value  @xmath564 , to have a word @xmath565 that coincides with @xmath169 , but has all the occurrences of @xmath566 marked .",
    "then an automaton can check that successive occurrences of the counter @xmath566 obey the transition condition of the turing machine .",
    "there are two problems with this approach : first , in order to relate @xmath169 and @xmath565 , we would need a binary relation of degree  @xmath520 ( for arbitrary @xmath91 ) and , secondly , an automaton can not mark all the occurrences of @xmath566 at once ( for some @xmath256 ) . in order to solve these problems ,",
    "we introduce a binary relation @xmath567 , which for every @xmath532 as in ( [ string x ] ) generates a binary tree of depth  @xmath91 with root @xmath169 ; this will be the only relation in our string automatic structure that causes exponential growth .",
    "this relation will mark in @xmath169 every occurrence of an arbitrary counter . for this",
    ", we need two copies @xmath568 and @xmath569 of @xmath466 as well as two copies @xmath570 and @xmath571 of @xmath467 . for @xmath452 , define the mapping @xmath572 as follows ( where @xmath573 , @xmath574 , and @xmath575 ) : @xmath576 we extend @xmath577 to a function on @xmath578 as follows : let @xmath579 with @xmath580 and @xmath581 . then @xmath582",
    "; this mapping can be computed with a synchronized transducer .",
    "hence , the relation @xmath583 can be recognized by a 2-dimensional automaton .",
    "let @xmath584 as in ( [ string x ] ) , let the word @xmath585 be obtained from @xmath169 by overlining or underlining each bit in @xmath169 , and let @xmath586 be some counter .",
    "we say _ the counter @xmath449 is marked in @xmath585 _ if every occurrence of the counter @xmath449 is marked by overlining each bit , whereas all other counters contain at least one underlined bit .",
    "* let @xmath532 be as in ( [ string x ] ) .",
    "* for all counters @xmath586 , there exists a unique word  @xmath585 with @xmath587 such that the counter @xmath449 is marked in  @xmath585 .",
    "* if @xmath587 , then there exists a unique counter @xmath588 such that @xmath449 is marked in @xmath585 .",
    "now , we can achieve our final goal , namely checking whether two successive configurations in @xmath532 represent a transition of the machine @xmath459 .",
    "let the counter @xmath589 be marked in  @xmath585 .",
    "we describe a finite automaton @xmath590 that checks on the string  @xmath585 , whether at position @xmath591 successive configurations in  @xmath169 are `` locally consistent '' .",
    "the automaton @xmath590 searches for the first marked counter in  @xmath585 .",
    "then it stores the next three symbols @xmath592 from @xmath553 ( if the separator  @xmath533 is seen before , then only one or two symbols may be stored ) , walks right until it finds the next marked counter , reads the next three symbols  @xmath593 from @xmath553 , and checks whether @xmath594 , where @xmath595 is from ( [ equiv alpha ] ) .",
    "if this is not the case , the automaton will reject , otherwise it will store @xmath596 and repeat the procedure described above .",
    "let @xmath597 .",
    "together with fact  1 and 2 , the behavior of @xmath590 implies that for all @xmath532 and all @xmath485 , @xmath169 represents an accepting @xmath520-computation of @xmath459 if and only if @xmath598 let us now fix some input @xmath599 with @xmath600 , and let @xmath601 and @xmath602 .",
    "thus , @xmath3 is accepted by @xmath459 if and only if there exists an accepting @xmath520-computation  @xmath169 such that in the first configuration of @xmath169 , the tape content is of the form @xmath603 .",
    "it remains to add some structure that allows us to express the latter by a formula .",
    "but this is straightforward : let @xmath604 be a new symbol and let @xmath605 ; this is our final alphabet .",
    "define the binary relations @xmath606 and @xmath607 ( @xmath608 ) as follows : @xmath609 then , @xmath610 is a string automatic structure of bounded degree such that @xmath3 is accepted by @xmath459 if and only if the following formula is true in @xmath72 : @xmath611 by lemma  [ l long paths ] we can compute in time @xmath612 an equivalent formula over the signature of @xmath72 .",
    "this concludes the proof .",
    "the following theorem , which proves an analogous result for tree automatic structures , uses alternating turing machines , see @xcite for more details . roughly speaking ,",
    "an _ alternating turing machine _ is a nondeterministic turing machine , where the set of states is partitioned into accepting , existential , and universal states .",
    "a configuration is accepting , if either ( i ) the current state is accepting , or ( ii ) the current state is existential and at least one successor configuration is accepting , or ( iii ) the current state is universal and every successor configuration is accepting . by @xcite , @xmath15exptime is the set of all problems that can be accepted in space @xmath613 on an alternating turing machine ( for all @xmath14 ) .",
    "[ t 3exptime ] there exists a fixed tree automatic structure @xmath72 of bounded degree such that @xmath109 is 3exptime - hard .",
    "let @xmath459 be a fixed _ alternating _ turing machine with a space bound of @xmath500 such that @xmath459 accepts a 3exptime - complete language .",
    "every configuration , where the current state is either existential or universal has exactly two successor configurations .",
    "let @xmath614 , @xmath1 , @xmath25 , and @xmath553 have the same meaning as in the previous proof",
    ". moreover , let @xmath615 .",
    "the idea is that a binary tree @xmath169 over the alphabet @xmath42 can encode a computation tree for some input .",
    "configurations can be encoded by linear chains over the alphabet @xmath616 as in the previous proof .",
    "the separator symbol @xmath617 is used to separate an existential configuration from a successor configuration , whereas the separator symbol @xmath618 is used to separate a universal configuration from its two successor configurations .",
    "hence , a @xmath617-labeled node has exactly one child , whereas a @xmath618-labeled node has exactly two children .",
    "checking whether the counters behave correctly can be done similarly to the previous proof by introducing binary relations @xmath551 and @xmath552 , which rotate symbols within configurations .",
    "remember that in our tree encoding , configurations are just long chains .",
    "also the marking of some specific counter can be done in the same way as before . finally , having marked some specific counter allows to check with a top - down tree automaton , whether the tree @xmath169 represents indeed a valid computation tree .",
    "of course , the tree automaton has to check whether the current configuration is existential or universal . in case of a universal configuration , the automaton branches at the next separator symbol @xmath618 .",
    "if e.g. the current configuration is universal but the next separator symbol is @xmath617 , then the automaton rejects the tree .",
    "the proof of the next result is in fact a simplification of the proof of theorem  [ t 2expspace ] , since we do not need counters .",
    "[ t expspace ] there exists a fixed string automatic structure @xmath72 of bounded degree and polynomial growth ( in fact linear growth ) such that @xmath109 is expspace - hard .",
    "let @xmath459 be a fixed turing machine with a space bound of @xmath276 such that @xmath459 accepts an expspace - complete language .",
    "let @xmath614 , @xmath1 , @xmath25 , @xmath619 , @xmath536 , @xmath620 , and @xmath553 have the usual meaning .",
    "let @xmath621 .",
    "this time , for @xmath485 , an _ accepting @xmath91-computation _ is a string @xmath622 , where @xmath623 are configurations with @xmath624 ( @xmath522 ) , @xmath625 ( @xmath528 ) , @xmath626 , and @xmath627 .",
    "let @xmath530 be the fixed regular language @xmath628 the following binary relations @xmath81 and @xmath552 can be easily recognized by 2-dimensional automata : @xmath629 moreover , let @xmath554 be the following regular language over @xmath630 : @xmath631 then , for every @xmath532 and @xmath485 we have : @xmath169 is an accepting @xmath91-computation if and only if there exist @xmath632 such that @xmath558 , @xmath633 , and @xmath634 .",
    "let us now fix some input @xmath635 with @xmath600 , let @xmath601 , and let @xmath602 .",
    "thus , @xmath3 is accepted by @xmath459 if and only if there exists an accepting @xmath91-computation @xmath169 such that in the first configuration of @xmath169 , the tape content is of the form @xmath603 .",
    "it remains to add some structure that allows us to express the latter by a formula .",
    "this can be done similarly to the proof of theorem  [ t 2expspace ] : let @xmath636 , where @xmath604 is a new symbol and define the binary relations @xmath607 ( @xmath637 ) as follows : @xmath638 then , @xmath639 is a fixed string automatic structure of bounded degree and linear growth . for the latter note",
    "that the gaifman graph of @xmath72 is just a disjoint union of cycles and finite paths ( in fact , every node has degree at most 2 ) .",
    "moreover , @xmath3 is accepted by @xmath459 if and only if the following statement is true in @xmath72 : @xmath640 by lemma  [ l long paths ] this concludes the proof .    the next result can be easily shown by combining the techniques from the proof of theorem  [ t 3exptime ] and [ t expspace ]",
    "we leave the details for the reader .",
    "there exists a fixed tree automatic structure @xmath72 of bounded degree and polynomial growth ( in fact linear growth ) such that @xmath109 is 2exptime - hard .",
    "in this section we prove some facts about first - order fragments of fixed quantifier alternation depth .",
    "these results will follow easily from the constructions in the preceding section .    for @xmath641 ,",
    "@xmath642-formulas and @xmath643-formulas are inductively defined as follows :    * a quantifier - free first - order formula is a @xmath644-formula as well as a @xmath645-formula . * if @xmath646 is a @xmath642-formula , then @xmath647 is a @xmath648-formula . * if @xmath646 is a @xmath643-formula , then @xmath649 is a @xmath650-formula .",
    "the @xmath642-theory @xmath642-@xmath109 of a structure @xmath72 is the set of all @xmath642-formulas in @xmath109 ; the @xmath643-theory is defined analogously . for a class @xmath157 of tree automatic presentations , the _",
    "@xmath642-model checking problem @xmath642-@xmath158 of @xmath157 _ denotes the set of all pairs @xmath159 where @xmath160 , and @xmath651-@xmath652 .",
    "the following result can be found in @xcite :    [ t blug00 ] the @xmath653-model checking problem @xmath653-@xmath654 for all string automatic presentations is in pspace .",
    "moreover , there is a fixed string automatic structure with a pspace - complete @xmath653-theory .    from our construction in the proof of theorem  [ t expspace ]",
    ", we can slightly sharpen the lower bound in this theorem :    there exists a fixed string automatic structure of bounded degree and linear growth with a pspace - complete @xmath653-theory .",
    "take the structure @xmath72 from the proof of theorem  [ t expspace ] and let @xmath459 be a fixed linear bounded automaton with a pspace - complete acceptance problem .",
    "if we replace the number @xmath91 in the formula ( [ reduction formula expspace ] ) by the input length @xmath279 , then ( [ reduction formula expspace ] ) is equivalent to the following formula , which is equivalent to a @xmath653-formula : @xmath655 \\displaystyle   \\exists y_1 , \\ldots , y_n \\biggl ( \\iota_{a_1}(x , y_1 )   \\ \\wedge \\    \\bigwedge_{i=2}^n   \\iota_{a_i}(y_{i-1},y_i )   \\biggr ) \\end{array}\\right\\ } \\ .\\ ] ] this formula is true in @xmath72 if and only if the linear bounded automaton accepts the input @xmath656 .",
    "let us now move on to @xmath657-formulas and structures of arbitrary growth :    [ t sigma2 ] the @xmath657-model checking problem @xmath657-@xmath654 for all string automatic presentations is in expspace .",
    "moreover , there is a string automatic structure of bounded degree with an expspace - complete @xmath657-theory .    for the upper bound ,",
    "let @xmath130 be a string automatic presentations of the automatic structure @xmath658 and let @xmath659 be a @xmath657-sentence .",
    "the sentence @xmath322 is equivalent to @xmath660 negations in @xmath661 can be moved down to the level of atomic predicates .",
    "then , we can built an @xmath662-dimensional automaton for @xmath661 with @xmath663 many states .",
    "projection onto the tracks corresponding to the variables @xmath664 results again into an automaton with @xmath663 many states . hence , for @xmath665 there exists an @xmath279-dimensional automaton with @xmath666 many states .",
    "but , we do not need to construct this automaton explicitly but only have to check emptiness of its language , which can be done on the fly in exponential space .    for the lower bound",
    ", we reuse our construction from the proof of theorem  [ t 2expspace ] .",
    "we start with an @xmath667-space - bounded machine @xmath459 that accepts an expspace - complete language .",
    "we carry out the same construction as in the proof of theorem  [ t 2expspace ] , but replace @xmath520 ( resp .",
    "@xmath91 ) everywhere by @xmath91 ( resp . the input length @xmath279 ) . in addition , we need the following ( trivial ) analogue of lemma  [ l long paths ] : let the signature @xmath44 contain a binary symbol @xmath484 . from a given number @xmath279 ( encoded unary ) , we can construct in linear time a @xmath653-formula @xmath668 such that for every @xmath44-structure @xmath72 and all elements @xmath488 we have : @xmath669 if and only if @xmath670 .",
    "then , the final formula from the proof of theorem  [ t 2expspace ] can be written as @xmath671 this formula is equivalent to a @xmath657-formula .",
    "moreover , this formula is true in the string automatic structure @xmath72 ( of bounded degree ) from the proof of theorem  [ t 2expspace ] , if and only if the input @xmath672 is accepted by the machine @xmath459 .    as before ,",
    "theorems  [ t blug00][t sigma2 ] can be extended to tree automatic structures as follows :    the following holds :    1 .",
    "the @xmath653-model checking problem @xmath653-@xmath166 for all tree automatic presentations is in exptime .",
    "2 .   there exists a fixed tree automatic structure of bounded degree and linear growth with an exptime - complete @xmath653-theory .",
    "the @xmath657-model checking problem @xmath657-@xmath166 for all tree automatic presentations is in 2exptime .",
    "4 .   there exists a tree automatic structure of bounded degree with a 2exptime - complete @xmath657-theory .",
    "the most obvious open question regards the uniform first - order theory for ( injective ) tree automatic structures : we do not know whether it is 4exptime - hard .",
    "moreover , we do nt know an upper bound for the uniform first - order theory for arbitrary tree automatic structures .",
    "the reason is that we do not know the complexity of transforming such a presentation into an equivalent injective one ( which is possible by  @xcite ) .    in @xcite",
    ", it is shown that not only the first - order theory of every string automatic structure is ( uniformly ) decidable , but even its extension by the quantifiers `` there are infinitely many @xmath169 with  '' and `` the number of @xmath169 satisfying  is divisible by @xmath673 '' . in @xcite , we proved that this extended theory can be decided in triply exponential time for ( @xmath0)-automatic structures of bounded degree .",
    "it is not clear whether the doubly - exponential upper bound proved in this paper extends to this more expressive theory .",
    "recall that there are tree automatic structures which are not string automatic . provided 2expspace @xmath674 3exptime , our results on the non - uniform first - order theories imply the existence of such a structure of bounded degree ( namely the tree automatic structure constructed in the proof of theorem  [ t 3exptime ] ) .",
    "but no example is known that does not rest on the complexity theoretic assumption 2expspace @xmath674 3exptime .    for @xmath675 ,",
    "the precise complexity of the @xmath642-theory of a string / tree automatic structure of bounded degree remains open . we know",
    "that these theories belong to 2expspace for string automatic structures and to 3exptime for tree automatic structures .",
    "moreover , from our results for the @xmath657-fragment we obtain lower bounds of expspace and 2exptime , respectively .",
    "a possible attack to this conjecture would follow the line of argument in the proof of theorem  [ t - upper ] and would therefore be based on gaifman s theorem . to make this work , the exponential bound in gaifman s theorem would have to be reduced which leads to the following conjecture .",
    "h.  comon , m.  dauchet , r.  gilleron , c.  lding , f.  jacquemard , d.  lugiez , s.  tison , and m.  tommasi .",
    "tree automata techniques and applications .",
    "available on : http://www.grappa.univ-lille3.fr/tata , 2007 .",
    "release october , 12th 2007 ."
  ],
  "abstract_text": [
    "<S> the first - order theory of a string automatic structure is known to be decidable , but there are examples of string automatic structures with nonelementary first - order theories . </S>",
    "<S> we prove that the first - order theory of a string automatic structure of bounded degree is decidable in doubly exponential space ( for injective automatic presentations , this holds even uniformly ) . </S>",
    "<S> this result is shown to be optimal since we also present a string automatic structure of bounded degree whose first - order theory is hard for 2expspace . </S>",
    "<S> we prove similar results also for tree automatic structures . </S>",
    "<S> these findings close the gaps left open in  @xcite by improving both , the lower and the upper bounds . </S>"
  ]
}