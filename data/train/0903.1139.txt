{
  "article_text": [
    "constraint programming is a very successful technology for solving many kinds of combinatorial problems arising in industrial applications , such as scheduling , resource allocation , vehicle routing , and product configuration @xcite .",
    "one of its key features is _ constraint propagation _ where values in the domains of variables are removed which will lead to a constraint violation .",
    "constraint propagation can prune large parts of the search space , and is vital for solving combinatorially challenging problems .",
    "the notion of local consistency provides a formal way to characterise the amount of work done by constraint propagation .",
    "the most common level of local consistency , called generalised arc consistency ( gac ) , specifies that all values inconsistent with a constraint are pruned .",
    "constraint propagation on binary ( or bounded arity ) constraints is polynomial .",
    "however , constraint toolkits support an increasing number of global ( or non - binary ) constraints since such constraints are central to the success of constraint programming .",
    "see , for example , @xcite .",
    "global constraints specify patterns that occur in many problems , and use constraint propagation algorithms that exploit their precise semantics .",
    "they permit users to model problems compactly and solvers to prune the search space effectively .",
    "they often allow efficient propagation .",
    "for instance , we often have sets of variables which must take different values ( e.g. activities in a scheduling problem requiring the same resource must all be assigned different times ) . most constraint solvers",
    "therefore provide a global @xmath0 constraint which is propagated efficiently and effectively @xcite . in many problems ,",
    "the arity of such global constraints can grow with the problem size .",
    "for example , in the golomb ruler problem ( prob006 in csplib ) , the size of the @xmath0 constraint grows quadratically with the number of ticks on the ruler .",
    "similarly , in the balanced incomplete block design ( prob028 in csplib ) , the size of the intersection constraint between rows grows linearly with the number of blocks .",
    "such global constraints may therefore exhibit complexities far beyond the quadratic cost for propagating binary constraints .",
    "what then are the limits of reasoning with global constraints ? in this paper , we show how the basic tools of computational complexity can be used to uncover many of the basic limits .",
    "we characterise the different reasoning tasks related to constraint propagation .",
    "for example , `` is this value consistent with this constraint ? '' or `` do there exist values consistent with this constraint ? '' .",
    "we identify dependencies between the tractability and intractability of these different questions .",
    "we show that all of them are intractable in general .",
    "we therefore need to focus on specific constraints like the @xmath0 constraint which are tractable .",
    "we then show how these same tools of computational complexity can be used to analyse specific global constraints proposed in the past like the number of values constraint @xcite , as well as to help design new global constraints .",
    "computational complexity provides a methodology to decide when a lesser level of propagation should be enforced or when decomposing a constraint hinders propagation .",
    "it also tells us whether a new global constraint designed as a combination of elementary constraints or as a generalisation of an existing tractable constraint will itself be tractable .",
    "the rest of the paper is organised as follows .",
    "section [ sec : back ] presents the technical background necessary to read the subsequent sections .",
    "section [ sec : gac ] contains a theoretical study of generalised arc consistency , the central notion of local consistency used when speaking of constraint propagation . in section [ sec : classify ] , we show how the tools of computational complexity can be used to analyse different types of global constraints .",
    "an extension to meta - constraints ( constraints that must be satisfied a given number of times ) is presented in section [ sec : meta ]",
    ". finally section [ sec : related ] discusses related work and section [ sec : conc ] concludes the paper .",
    "a _ constraint satisfaction problem _ ( csp ) consists of a set of variables , each with a finite domain of values , and a set of constraints that specify allowed combinations of values for subsets of variables .",
    "we will denote variables with upper case letters and values with lower case .",
    "we will assume that the domain of a variable is given extensionally , but that a constraint @xmath1 is given intensionally by a function of the form @xmath2 where @xmath3 are the domains of the variables in the scope @xmath4 of the constraint @xmath1 .",
    "we say that @xmath5 is a domain on @xmath6 .",
    "we can not permit an arbitrary sort of function .",
    "for example , suppose @xmath7 returns @xmath8 iff the 1in3 - 3sat problem , @xmath9 is satisfiable .",
    "testing if an assignment satisfies this non - binary constraint is then np - complete , and finding a satisfying assignment is pspace - complete . as a second example ,",
    "suppose domains are integers of size @xmath10 and @xmath11 is the function that halts iff @xmath12 is the gdel number of a halting turing machine . even testing if an assignment satisfies such a constraint is undecidable .",
    "we therefore insist that @xmath13 is computable in polynomial time .",
    "constraint toolkits usually contain a library of predefined _ constraint types _ with a particular semantics that can be applied to sets of variables with varying arities and domains .",
    "a constraint is only an instance of a constraint type on given variables and domains .",
    "for instance , @xmath0 is a constraint type .",
    "@xmath14 with @xmath15 is an instance of constraint of the type @xmath0 .",
    "when there is no ambiguity , we will use the terms constraint or constraint type indifferently .",
    "a solution to a csp is an assignment of values to the variables satisfying the constraints . to find such solutions , we often use tree search algorithms that construct partial assignments and enforce a local consistency to prune the search space . enforcing a local consistency",
    "is traditionally called _",
    "constraint propagation_. one of the most commonly used local consistencies is generalised arc consistency .",
    "a constraint @xmath1 is _ generalised arc consistent _",
    "( gac ) iff , when a variable in the scope of @xmath1 is assigned any value in its domain , there exists an assignment to the other variables in @xmath1 such that @xmath1 is satisfied @xcite .",
    "this satisfying assignment is called _ support _ for the value . on binary constraints ( those involving just two variables ) , generalised arc consistency is called arc consistency ( ac ) .    since this paper makes significant use of computational complexity theory , we very briefly recall the basic tools for showing intractability .",
    "p is the class of decision problems that can be solved by a deterministic turing machine in polynomial time , and np is the class of decision problems that can be solved by a non - deterministic turing machine in polynomial time . as in @xcite , a _ transformation _ from a decision problem @xmath16 np to a decision problem",
    "@xmath17 np is a function @xmath18 that polynomially rewrites any input @xmath19 of @xmath20 into an input @xmath21 of @xmath22 such that @xmath23 answers `` yes '' if and only if @xmath24 answers `` yes '' . if @xmath20 is np - complete , this transformation into @xmath22 permits us to deduce that @xmath22 is also np - complete .",
    "a _ reduction _ from a problem @xmath20 to a problem @xmath22 ( not necessarily decision problems ) is a program that solves @xmath20 in polynomial time under the condition that the program can call an _ oracle _ that solves @xmath22 at most a constant number of times . if @xmath20 is np - complete , this reduction to @xmath22 permits to deduce that @xmath22 is np - hard .",
    "any np - complete problem is thus np - hard . by transitivity of the reductions ,",
    "if @xmath20 is an np - hard problem , its reduction to @xmath22 permits us to deduce that @xmath22 is np - hard",
    ". we will use _ intractability _ as a general term to denote any np - hard problem , i.e. , those which can not be solved in polynomial time unless p = np . in the following , we assume p@xmath25 np . a problem in conp is simply a problem in np with the answers `` yes '' and `` no '' reversed .",
    "for instance , 3sat , the problem of deciding if a set of ternary clauses is satisfiable , is in np .",
    "hence , un3sat , the problem of deciding if a set of ternary clauses is unsatisfiable , is in conp .",
    "the @xmath26 complexity class contains problems which are the conjunction of a problem in np and one in conp @xcite .",
    "a problem @xmath27 is in @xmath26 if there exist a np problem @xmath20 and a conp one @xmath22 such that @xmath27 answers `` yes '' iff @xmath20 and @xmath22 answer `` yes '' . if @xmath20 is np - complete and @xmath22 is conp - complete , then @xmath27 is @xmath26-complete .",
    "the class @xmath26 is also known as the second level of the boolean hierarchy , bh@xmath28 .",
    "a typical example of a @xmath26-complete decision problem is the exact traveling salesperson problem where we ask if @xmath29 is the length of the _ shortest _ tour .",
    "there are different questions that may arise when we consider enforcing generalised arc consistency",
    ". we can ask whether a value belongs to a consistent tuple or whether a constraint is generalised arc consistent . some of the questions are more of an academic nature while others are at the heart of propagation algorithms . in this section",
    ", we formally characterise five questions related to gac .",
    "we study the complexity of gac reasoning on global constraints by showing intractability of two of these five questions .",
    "finally , we show some dependencies between the intractability of the questions , from which we conclude that all five questions are intractable in general .",
    "we characterise five different questions related to reasoning about generalized arc consistency .",
    "these questions can be adapted to any other local consistency as long as it rules out values in domains ( e.g. , bounds consistency , singleton arc consistency , etc . ) and not non - unary tuples of values ( e.g. , path consistency , relational-@xmath29-consistency , etc . )    in the following , problem(@xmath30 ) represents the class of questions defined by problem on constraints of the type @xmath30 .",
    "problem(@xmath31 ) will be written problem when it is not confusing or when there is no restriction to a particular type of constraints .",
    "note also that we use the notation problem[data ] to refer to the instance of problem(@xmath30 ) with the input data.    the first question we consider is at the core of all generic arc consistency algorithms .",
    "this is the question which is generally asked for all values one by one .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ gacsupport(@xmath32 ) + * instance .",
    "* a constraint @xmath1 of type @xmath30 , a domain @xmath5 on @xmath6 , and a value @xmath33 for variable @xmath34 in @xmath6 + * question .",
    "* does value @xmath33 for @xmath34 have a support on @xmath1 in @xmath5 ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the second question has both practical and theoretical importance . if enforcing gac on a particular global constraint is very expensive , we may first test whether it is necessary or not to launch the propagation algorithm ( i.e. , whether the constraint is already gac ) . on a more academic level , this question is also commonly asked to compare different levels of local consistency .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ isitgac(@xmath32 ) + * instance . * a constraint @xmath1 of type @xmath30 , a domain @xmath5 on @xmath6 + * question . *",
    "does @xmath35 $ ] answer `` yes '' for each variable @xmath36 and each value @xmath37 ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the third question can be used to decide if we do not need to backtrack at a given node in the search tree .",
    "note that @xmath38 stands for : @xmath39 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ nogacwipeout(@xmath32 ) + * instance .",
    "* a constraint @xmath1 of type @xmath30 , a domain @xmath5 on @xmath6 + * question .",
    "* is there any non empty @xmath38 on which @xmath40 $ ] answers `` yes '' ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    an algorithm like gac - schema @xcite removes values from the initial domain of variables till we have the ( unique ) _ maximal _ generalised arc consistent subdomain . that is , the subdomain that is gac and any larger subdomain is not gac .",
    "the following question characterises this `` maximality '' problem :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ maxgac(@xmath32 ) + * instance . * a constraint @xmath1 of type @xmath30 , a domain @xmath41 on @xmath6 , and a subdomain @xmath42 + * question . *",
    "is it the case that @xmath43 $ ] answers `` yes '' and there does not exist any domain @xmath44 , @xmath45 , on which @xmath40 $ ] answers `` yes '' ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    we finally consider the problem of returning the domain that a gac algorithm computes .",
    "this is not a decision problem as it computes something other than `` yes ''",
    "or `` no '' .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ gacdomain(@xmath32 ) + * instance . * a constraint @xmath1 of type @xmath30 , a domain @xmath41 on @xmath6 + * output .",
    "* the domain @xmath5 such that @xmath46 $ ] answers `` yes '' _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the next subsection shows the intractability of two of the above questions .",
    "we consider two representative decision problems at the heart of reasoning with global constraints . we will show later that their intractability implies intractability of the three others .",
    "the first is gacsupport , the problem of deciding if a value for a variable has support on a constraint . in general",
    ", this is np - complete to decide .",
    "gacsupport is np - complete .",
    "_ proof .",
    "_ clearly it is in np as a support is a polynomial witness which can be checked ( by our definition of constraint ) in polynomial time . to show completeness",
    ", we transform the satisfiability of the boolean formula @xmath18 into the problem of determining if a particular value has support .",
    "we simply construct the global constraint @xmath1 involving the variables of @xmath18 plus an additional new variable @xmath34 , and defined by @xmath47 .",
    "if @xmath48 has support then @xmath18 is satisfiable .",
    "the second decision problem we consider is isitgac .",
    "given a constraint and domains for its variables , this is the problem of deciding if these domains are gac .",
    "this is again a np - complete problem .",
    "isitgac is np - complete .",
    "_ proof .",
    "_ clearly it is again in np as a support for each value is a polynomial witness which can be checked in polynomial time since there are @xmath49 values involved where @xmath50 is the number of variables and @xmath51 the size of the largest domain . to show completeness , we transform 3col , the problem of deciding whether a graph is 3-colorable into the problem of deciding if a particular domain is gac for a given constraint .",
    "we introduce a variable for each vertex with domain @xmath52 .",
    "we then define a global constraint as follows . for each pair @xmath53 of vertices with an edge between in the graph , we permit pairs of values that are different ( i.e. , the set @xmath54 @xmath55 @xmath56 @xmath57 @xmath58 @xmath59 ) . for each pair @xmath53 of vertices with no edge between in the graph , we permit any pair of values ( i.e. , the set @xmath60 ) .",
    "since values are completely interchangeable , @xmath61 , @xmath62 and @xmath63 are gac for a variable iff the graph is 3-colorable . hence , @xmath64 is a gac domain for each variable iff the graph is 3-colorable .",
    "we have proven that two of the questions related to generalised arc consistency are intractable in general . in the following ,",
    "we see that there are dependencies between the intractability of the five questions .",
    "this permits us to deduce that all five questions are in fact intractable in general .",
    "the five problems defined in section [ sec : questions ] are not independent .",
    "knowledge about intractability of one of them can give information on intractability of others .",
    "we identify here the dependencies between intractability of the different questions .",
    "[ lemma : gacsup_gacwo ] @xmath65 is np - hard iff @xmath66 is np - hard .    _",
    "proof .  _",
    "( @xmath67 ) gacsupport@xmath68 can be transformed in nogacwipeout@xmath68 : given @xmath69 , gacsupport@xmath70 $ ] is solved by calling nogacwipeout@xmath71 $ ] .",
    "( @xmath72 ) nogacwipeout@xmath73 $ ] can be reduced to gacsupport  by calling gacsupport@xmath70 $ ] for each value @xmath33 in @xmath74 for one of the @xmath34 in @xmath6 .",
    "gac leads to a wipe out iff none of these values has a support .",
    "@xmath65 is np - hard iff @xmath75 is np - hard .",
    "_ proof .  _",
    "( @xmath67 ) gacsupport@xmath68 can be reduced to gacdomain@xmath68 since gacsupport@xmath70 $ ] answers `` yes '' iff gacdomain@xmath71 $ ] does nt return an empty domain .",
    "( @xmath72 ) gacdomain@xmath73 $ ] can be reduced to gacsupport  by performing a polynomial number of calls to gacsupport@xmath70 $ ] , one for each @xmath76 , @xmath36 . when the answer is `` no '' the value @xmath33 is removed from @xmath74 , otherwise it is kept .",
    "the domain obtained at the end of this process represents the output of gacdomain .",
    "[ corol : gacwo_gacdom ] nogacwipeout@xmath68 is np - hard iff gacdomain@xmath68 is np - hard .",
    "if maxgac@xmath68 is np - hard then gacsupport@xmath68 is np - hard .",
    "_ proof .  _",
    "maxgac@xmath77 $ ] can be reduced to gacsupport .",
    "we perform a polynomial number of calls to gacsupport@xmath78 $ ] , one for each @xmath79 , @xmath36 . when the answer is `` yes '' the value @xmath33 is added to a ( initially empty ) set @xmath80 .",
    "maxgac  answers `` yes '' if and only if the domain @xmath44 obtained at the end of the process is equal to @xmath5 .",
    "[ lemma : gacisit_gacmax ] if isitgac@xmath68 is np - hard then maxgac@xmath68 is np - hard .    _",
    "proof .  _",
    "isitgac@xmath73 $ ] can easily be transformed into maxgac@xmath81 $ ] .",
    "if isitgac@xmath68 is np - hard then gacsupport@xmath68 is np - hard .",
    "it is worth noting that whilst intractability of isitgac implies that of maxgac , this last question may be outside np .",
    "in fact , maxgac is @xmath26-complete .",
    "maxgac is @xmath26-complete .",
    "_ proof .",
    "_ a problem @xmath27 is @xmath26-complete if there exist @xmath20 and @xmath22 such that @xmath20 is np - complete , @xmath22 is conp - complete , and @xmath27 answers `` yes '' iff @xmath20 and @xmath22 answer `` yes '' . we use 3col and un3col as @xmath20 and @xmath22 .",
    "we suppose without loss of generality that @xmath20 and @xmath22 both involve the same set @xmath34 of vertices .",
    "@xmath82 is the set of edges in @xmath83 .",
    "we introduce a variable for each vertex with domain @xmath84 .",
    "we then define a global constraint as follows . for each pair @xmath53 of vertices with an edge between in both @xmath20 and @xmath22 , we permit pairs of values that are different but have the same subscript ( i.e. , the set @xmath85 @xmath86 @xmath87 @xmath88 @xmath89 @xmath90 @xmath91 @xmath92 @xmath93 @xmath94 @xmath95 @xmath96 ) . for each pair @xmath53 of vertices with an edge between in @xmath20 and not in @xmath22 , we permit pairs of values that are different for the subscript @xmath97 , and any combination for subscript @xmath98 ( i.e. , the set @xmath85",
    "@xmath86 @xmath87 @xmath88 @xmath89 @xmath99 @xmath100 @xmath101 )",
    ". similarly , for each pair @xmath53 of vertices with an edge between in @xmath22 and not in @xmath20 , we permit pairs of values that are different for the subscript @xmath98 , and any combination for subscript @xmath97 . finally , for each pair @xmath53 of vertices with no edge between in @xmath20 or in @xmath22 , we permit any pairs of values with the same subscript ( i.e. , the set @xmath102 ) . by construction ,",
    "@xmath103 , @xmath104 and @xmath105 are gac iff @xmath106 is 3-colorable .",
    "hence , @xmath107 is the maximal gac subdomain for each variable iff @xmath108 is 3-colorable , and @xmath109 is not 3-colorable .",
    "a summary of the dependencies proved in lemmas [ lemma : gacsup_gacwo][lemma : gacisit_gacmax ] and corollary [ corol : gacwo_gacdom ] is given in fig .",
    "[ fignph ] .",
    "note that since each arrow from question @xmath110 to question @xmath111 in fig .",
    "[ fignph ] means that @xmath110 can be rewritten as a polynomial number of calls to @xmath111 , we immediately have that tractability of @xmath111 implies tractability of @xmath110 .",
    "( see fig .",
    "[ figp ] for tractability dependencies of the five questions . )",
    "reasoning with global constraints is thus not tractable in general .",
    "global constraints which are used in practice are therefore usually part of that special subset for which constraint propagation is polynomial . for example , gac on an @xmath50-ary @xmath112 constraint can be enforced in @xmath113 time @xcite . in the rest of this paper , we show how we can further use the tools of computational complexity in the design and analysis of _ specific _ global constraints .",
    "the tools of computational complexity can also be used to analyse existing global constraints for which no polynomial algorithm is known , or can help us in designing new global constraints for specific purposes . to prove that a constraint type @xmath30 is intractable ,",
    "we generally transform / reduce some known np - complete / np - hard problem to the existence of a satisfying assignment for @xmath30 , i.e. , the nogacwipeout@xmath68 problem .",
    "thanks to the dependency results shown above , we can then deduce intractability of gacsupport  and gacdomain . for the more academic questions , isitgac  and maxgac , the complexity can not be deduced from our dependencies since they are exact problems ( a `` no '' answer brings little information ) .",
    "finally , we sometimes do not need the full expressive power of a constraint type to prove its intractability .",
    "for example , we may use only a fixed value for one of the variables involved in the constraint . in this case , the constraint is also intractable if we use its full expressive power .",
    "we can derive several kinds of information about global constraints by using computational complexity results .",
    "for example , on existing global constraints for which no polynomial algorithm is known for a given level of local consistency , proving intractability tells us that no such algorithm exists , and that we should look to enforce a lesser level of consistency . on constraints that decompose into simpler constraints which have polynomial propagation algorithms , intractability results not only",
    "tell us that this decomposition hinders propagation , but that there can not exist any decomposition on which we achieve gac in polynomial time .",
    "we also sometimes want to use an already existing global constraint in a form more general than its original definition .",
    "a proof of intractability tells us that generalisation makes the constraint impossible to propagate in polynomial time .",
    "the remainder of this section gives examples of existing and new global constraints that we analyse with these tools of computational complexity .",
    "computational complexity results can indicate what level of local consistency to enforce on a constraint .",
    "if achieving a given local consistency on a constraint is np - hard , then enforcing a lower level of consistency may be advisable .",
    "for example , the number of values constraint , @xmath114 @xcite ensures that @xmath115 distinct values are used by the @xmath50 finite domain variables @xmath116 . note that @xmath115 can itself be an integer variable .",
    "the @xmath0 constraint is a special case of the @xmath117 constraint in which @xmath118 .",
    "the @xmath119 constraint is useful for reasoning about resources .",
    "for example , if the values are workers assigned to a particular shift , we may have a @xmath119 constraint on the number of workers that a set of shifts can involve .",
    "whilst there exists an @xmath120 algorithm for enforcing gac on the @xmath0 constraint @xcite , enforcing gac on the @xmath119 constraint is intractable in general .",
    "enforcing gac on a @xmath114 constraint is np - hard , and remains so even if @xmath115 is ground and different to @xmath50 .",
    "_ proof .",
    "_ we use a transformation from 3sat to nogacwipeout(@xmath119 ) .",
    "given a 3sat problem in @xmath50 variables ( labelled from 1 to @xmath50 ) and @xmath10 clauses , we construct the constraint @xmath121,n)$ ] in which @xmath122 for all @xmath123 $ ] , and each @xmath116 for @xmath124 represents one of the @xmath10 clauses . if the @xmath125th clause is @xmath126 then @xmath127 . the constructed constraint where @xmath128 has a solution iff the original 3sat problem has a satisfying assignment .",
    "hence deciding if enforcing gac on @xmath119 does not lead to a domain wipe out is np - complete , and enforcing gac is itself np - hard .",
    "if we want to maintain a reasonable cost for propagation , we therefore probably have to enforce a lower level of consistency .",
    "for instance , there exists a polynomial algorithm for enforcing bound consistency on the @xmath119 constraint @xcite .    as a second example , let us take the @xmath129 constraint , @xmath130 @xmath131,[y_1,\\ldots , y_m])$ ] introduced in @xcite , that ensures that @xmath132 and @xmath133 .",
    "that is , @xmath115 is the number of variables in the @xmath116 that take values in the @xmath134 , and @xmath135 is the number of variables in the @xmath134 that take values in the @xmath116 .",
    "the @xmath0 constraint is again a special case of the @xmath129 constraint in which the @xmath134 enumerate all the values @xmath125 in the @xmath116 , @xmath136 and @xmath137 .    enforcing gac on @xmath138,[y_1,\\ldots , y_m])$ ]",
    "is np - hard .",
    "_ proof .",
    "_ in theorem",
    "[ theo : among ] , it is shown that enforcing gac on @xmath139,$ ] @xmath140)$ ] is np - hard , where the constraint holds iff @xmath141 .",
    "deciding if enforcing gac on such an @xmath142 constraint does not lead to a domain wipe out is equivalent to deciding if enforcing gac on @xmath130 @xmath143,[d_1,\\ldots , d_m])$ ] with @xmath144 does not lead to a domain wipe out . as a result , enforcing gac on @xmath129",
    "is itself np - hard .",
    "computational complexity results can tell us more than just what level of local consistency to enforce .",
    "it can also indicate properties that any possible decomposition of a constraint must possess .",
    "we say that a decomposition of a global constraint is _ gac - poly - time _ if we can enforce gac on the decomposition in time polynomial in the size of the original constraint and domains .",
    "the following lemma tells us when such decomposition hinders constraint propagation .",
    "[ theo : decomp_hinder ] if enforcing gac on a constraint @xmath1 is np - hard , then there does not exist any gac - poly - time decomposition of @xmath1 that achieves gac on @xmath1 .",
    "_ proof .",
    "_ by definition , enforcing gac on a gac - poly - time decomposition is polynomial . hence , if gac on the decomposition was equivalent to gac on the original constraint , then p would equal np .",
    "consider a constraint that ensures two sequences of variables are disjoint ( i.e. have no value in common ) .",
    "for example , two sequences of tasks sharing the same resource might be required to be disjoint in time .",
    "the @xmath145,$ ] @xmath146)$ ] constraint introduced in @xcite ensures @xmath147 for any @xmath148 and @xmath125 .",
    "this constraint has a very simple and natural decomposition into the set of all binary constraints @xmath149,j\\in [ 1 .. m]$ ] .",
    "unfortunately , enforcing ac on this decomposition into binary constraints does not achieve gac on the corresponding @xmath150 constraint .",
    "consider @xmath151 , @xmath152 , and @xmath153 .",
    "the decomposition into binary constraints is already ac . however , enforcing gac on @xmath154,[y_1,y_2,y_3])$ ] prunes 3 from @xmath155 and 1 from both @xmath156 and @xmath157 .",
    "moreover , we prove here that we can not expect any decomposition to achieve gac on such a constraint .",
    "gac on any gac - poly - time decomposition of the @xmath150 constraint is strictly weaker than gac on the undecomposed constraint .",
    "_ proof .",
    "_ we show that enforcing gac on a @xmath150 constraint is np - hard , and then appeal to lemma [ theo : decomp_hinder ] .",
    "we reduce 3sat to @xmath158 .",
    "consider a formula @xmath18 with @xmath50 variables and @xmath10 clauses .",
    "we let @xmath159 and @xmath160 where the @xmath125th clause in @xmath18 is @xmath126 .",
    "if @xmath18 has a model then the @xmath150 constraint has a satisfying assignment in which the @xmath116 take the literals false in this model and the @xmath134 take the literal satisfying the @xmath125th clause .",
    "hence , deciding if enforcing gac does not lead to a domain wipe out on @xmath150 is np - complete , and enforcing gac is itself np - hard .    as another example ,",
    "sadler and gervet introduce the @xmath161 constraint @xcite .",
    "this ensures that @xmath50 set variables of a fixed cardinality @xmath162 intersect in at most one value . to fit this within the theoretical framework presented in this paper , we consider the characteristic function representation for each set variable ( i.e. a vector of 0/1 decision variables )",
    ". enforcing gac on such a representation is equivalent to enforcing bounds consistency on the upper and lower bounds of the set variables @xcite .",
    "the @xmath161 constraint can be decomposed into pairwise intersection and cardinality constraints .",
    "that is , it can be decomposed into @xmath163 for @xmath164 and @xmath165 for all @xmath148 . on the characteristic function representation ,",
    "this is @xmath166 and @xmath167 , which are both gac - poly - time .",
    "such decomposition hinders constraint propagation .",
    "gac on any gac - poly - time decomposition of the @xmath161 constraint is strictly weaker than gac on the undecomposed constraint .",
    "_ proof .",
    "_ we show that enforcing gac on an @xmath161 constraint is np - hard , and appeal to lemma [ theo : decomp_hinder ] . to show that enforcing gac on the @xmath161 constraint is np - hard",
    ", we consider the case when the cardinality @xmath168 . for @xmath169",
    ", we can use a similar construction as in the @xmath168 reduction but add @xmath170 distinct values to each set .",
    "the proof uses a reduction from 3sat . for each clause @xmath171",
    ", we introduce a set variable , @xmath172 .",
    "suppose @xmath173 , then @xmath172 has the domain @xmath174 .",
    "if the intersection and cardinality constraint is satisfied , @xmath172 takes the value @xmath175 , @xmath176 , or @xmath177 .",
    "the first case corresponds to @xmath178 being @xmath8 ( which satisfies @xmath171 ) , the second to @xmath179 being @xmath8 , and the third to @xmath180 being @xmath8 .",
    "we use an additional ( at most quadratically many ) set variables to ensure that contradictory assignments are not made to satisfy other clauses .",
    "suppose we satisfy @xmath171 by assigning @xmath178 to @xmath8 .",
    "that is , @xmath181 .",
    "consider any other clause , @xmath182 which contains @xmath183 .",
    "we construct two set variables , @xmath184 and @xmath185 with domains @xmath186 and @xmath187 . since @xmath188 , then @xmath189 and @xmath190 .",
    "hence , @xmath191 .",
    "that is , @xmath182 can not be satisfied by @xmath183 being assigned @xmath8 .",
    "some other literal in @xmath182 has to satisfy the clause .",
    "the constructed set variables thus have a solution which satisfies the intersection and cardinality constraints iff the original 3sat problem is satisfiable . hence deciding",
    "if enforcing gac on @xmath161 does not lead to a domain wipe out is np - complete , and enforcing gac is itself np - hard .",
    "a similar result can be given for the @xmath192 constraint introduced in @xcite .",
    "this constraint ensures that @xmath50 set variables of a fixed cardinality intersect in at least one value .",
    "again , a gac - poly - time decomposition of such a constraint hinders constraint propagation .",
    "global constraints specify patterns that reoccur in many problems",
    ". however , there may only be a limited number of common constraints which repeatedly occur in problems .",
    "one strategy for developing new global constraints is to identify conjunctions of constraints that often occur together , and developing constraint propagation algorithm for their combination .",
    "for example , @xcite propose a propagation algorithm for a constraint which combines together sum and difference constraints . as a second example ,",
    "@xcite combine together a chain of lexicographic ordering constraints . as a third example , @xcite combine together a lexicographic ordering and two sum constraints .",
    "we can use results from computational complexity to determine when we should not combine together constraints .",
    "for example , scalar product constraints occur in many problems like the balanced incomplete block design , template design and social golfers problems @xcite .",
    "often such problems have scalar product constraints between all pairs of rows in a 2-dimensional array of boolean decision variables .",
    "we can enforce gac on a scalar product constraint between two rows in linear time .",
    "should we consider combining together all the row scalar product constraints into one large global constraint ?",
    "such a @xmath193 constraint would ensure that @xmath194 .",
    "the following result shows that enforcing gac on such a composition of constraints is intractable .",
    "enforcing gac on a @xmath193 constraint is np - hard , even when restricted to 0/1 variables .",
    "_ proof .",
    "_ we consider the case when the scalar product @xmath195 . for @xmath196",
    ", we use a reduction that adds @xmath197 additional columns to the array , each column containing variables that must take the value 1 .",
    "we reduce 1in3 - 3sat on positive formulae ( which is np - complete @xcite ) to deciding if enforcing gac does not lead to a domain wipe out on a @xmath193 constraint over 0/1 variables .",
    "given a 1in3 - 3sat problem in @xmath50 variables and @xmath10 clauses , we construct a @xmath193 constraint with @xmath198 rows and @xmath199 columns .",
    "the first row of the array , where all variables have 0/1 domain , represents the model which satisfies the 1in3 - 3sat problem .",
    "there is a column for each occurrence of a literal in a clause .",
    "that is , the @xmath200th column represents the @xmath29th literal in the @xmath125th clause .",
    "this is assigned 1 in the first row iff the corresponding literal is _",
    "true_. there is also a column for the negation of each literal .",
    "that is , the @xmath201th column represents the negation of the @xmath148th literal .",
    "this is assigned 1 in the first row iff the corresponding literal is _",
    "false_. the remaining rows are divided into two types .",
    "first , there is a row for each clause . in the @xmath202th row , representing the @xmath125th clause , the columns @xmath203 corresponding to literals in the clause have value 1 .",
    "the other columns have the value 0 . the scalar product constraint between a row representing a clause and the row representing the model ensures that only one of the literals in the clause is _ true_. second , there are rows for each occurrence of a positive literal to ensure that the row representing the model does not assign both a literal and its negation to _ true_. that is , if the @xmath148th variable of the formula appears as the @xmath29th literal in the @xmath125th clause , then , in the @xmath204th row , the columns @xmath205 and @xmath206 have value 1 .",
    "the other columns have the value 0 .",
    "the 1in3 - 3sat problem has a model iff the constructed array has a solution .",
    "hence deciding if enforcing gac does not lead to a domain wipe out on @xmath193 is np - complete , and enforcing gac is np - hard .",
    "special cases of the @xmath193 constraint are tractable .",
    "for instance , if the scalar product is zero and variables are 0/1 then the constraint is equivalent to the pairwise disjoint constraint on set variables , which is tractable @xcite .",
    "another way in which tools of computational complexity can help is when we generalise existing global constraints .",
    "we might have a global constraint with a polynomial propagation algorithm , but want to use it in a more general manner .",
    "for example , we might want to replace a given constant parameter with a variable or to repeat the same variable several times in the scope of the constraint .",
    "the global cardinality constraint , @xmath207,[o_1,\\ldots,$ ] @xmath208)$ ] , ensures that @xmath209 for all @xmath125 .",
    "that is , the value @xmath125 occurs @xmath210 times in the variables @xmath116 . the special case of this constraint where @xmath210 are fixed intervals was presented in @xcite together with a polynomial propagation algorithm enforcing gac on the @xmath116 .",
    "the @xmath0 constraint is a special case of the @xmath211 constraint in which @xmath212 $ ] .",
    "however , to enforce gac on the more general form of the @xmath211 constraint where the @xmath210 are integer variables is np - hard .    enforcing gac on a @xmath207,$ ] @xmath213 @xmath208)$ ] where the @xmath210 are integer variables is np - hard .",
    "a second example is the @xmath142 constraint .",
    "the @xmath139,$ ] @xmath214)$ ] constraint , introduced in chip @xcite ensures that @xmath215 .",
    "that is , @xmath115 variables in @xmath116 take values in @xmath214 $ ] .",
    "the @xmath142 constraint is a generalisation of the @xmath216 and @xmath217 constraints .",
    "enforcing gac is polynomial on the @xmath142 constraint .",
    "a generalisation of this constraint is to let the @xmath218 be integer variables @xmath219 instead of constants . in this case",
    ", enforcing gac becomes intractable .",
    "[ theo : among ] enforcing gac on @xmath139,[d_1,\\ldots , d_m])$ ] is np - hard .    _ proof .",
    "_ we again use a transformation from 3sat . given a 3sat problem in @xmath50 variables ( labelled from 1 to @xmath50 ) and @xmath10 clauses , we construct the @xmath142 constraint , @xmath220,[d_1,\\ldots , d_n])$ ] in which @xmath221 , @xmath222 , and each @xmath223 represents one of the @xmath10 clauses . if the @xmath125th clause is @xmath126 then @xmath224 .",
    "the constructed @xmath225 constraint has a solution iff the original 3sat problem has a model .",
    "hence deciding if enforcing gac does not lead to a domain wipe out is np - complete , and enforcing gac is itself np - hard .      in the constraint @xmath207,$ ] @xmath226)$ ] , the number of occurrences @xmath210 for a value @xmath125 is a fixed interval @xmath227 $ ] .",
    "in addition , we assume that no variables in the sequence @xmath131 $ ] are repeated .",
    "however , there are problems in which we would like to have a @xmath228 constraint with the same variable occurring several times in @xmath131 $ ] , or equivalently , some variables that must take the same value . for example , in shift rostering , we might have constraints on the number of shifts worked by each individual , as well as the requirement that the same person works consecutive weekends",
    ". this can be modelled with a @xmath211 with repeated variables . unfortunately",
    ", achieving arc consistency ( gac ) on @xmath211 with repeated variables is intractable .    enforcing gac on a @xmath207,$ ]",
    "@xmath213 @xmath208)$ ] where variables in @xmath131 $ ] can be repeated is np - hard even if the @xmath210 are fixed intervals .",
    "_ proof .",
    "_ we transform 3sat into nogacwipeout(@xmath211 ) .",
    "let @xmath229 be a 3cnf on the boolean variables @xmath230 .",
    "we build the constraint @xmath231",
    "@xmath232 @xmath233)$ ] where :    1 .   @xmath234 $ ] , where @xmath235 are @xmath10 copies of the same variable @xmath236 with @xmath237 and @xmath238 if @xmath239 , 2 .",
    "@xmath240 , \\forall i\\in [ -n,-1]\\cup[1,n]$ ] ,    consider a model of @xmath18 .",
    "if @xmath241 is one of the variables in clause @xmath242 that make @xmath242 true in the model , assign @xmath243 with @xmath244 if @xmath241 is true , and @xmath245 otherwise . for every @xmath148 ,",
    "assign @xmath236 with @xmath148 if @xmath178 is false and @xmath246 otherwise .",
    "this assignment is a solution for @xmath211 .",
    "consider now a solution for @xmath211 .",
    "then @xmath178 set to true iff @xmath247 is a model of @xmath18 .",
    "the @xmath10 occurrences of each @xmath236 and the capacities @xmath210 in the @xmath211 ensure that none of the @xmath248 can take @xmath246 if @xmath247 or @xmath148 if @xmath249 .",
    "the constructed @xmath250 constraint with repeated variables has a solution iff the original 3sat problem has a model . hence deciding if enforcing gac does not lead to a domain wipe out is np - complete , and enforcing gac is itself np - hard .",
    "we see that computational complexity can tell us when we will need to enforce a lesser level of consistency on the generalisation of an existing global constraint .",
    "computational complexity can also be used to study `` meta - constraints '' that combine together other constraints .",
    "we will show that even when the constraints being combined are tractable to propagate , the meta - constraint itself might not be tractable to propagate .",
    "for example , the @xmath251 constraint @xcite is provided by many constraint toolkits .",
    "it ensures that @xmath115 constraints from a given set are satisfied , where @xmath115 is an integer decision variable .",
    "the most general form of the constraint is : @xmath252)$ ] where @xmath253 are themselves constraints ( not necessarily all of the same arity ) , and @xmath254 .",
    "the cardinality constraint can be used to implement conjunction , ( @xmath255 is equivalent to @xmath256)$ ] ) , disjunction , ( @xmath257 is equivalent to @xmath258)$ ] where @xmath259 ) , negation , ( @xmath260 is equivalent to @xmath261)$ ] ) . it has had numerous applications in a wide range of domains including car - sequencing , disjunctive scheduling , hamiltonian path and digital signal processor scheduling @xcite .",
    "it is obvious that @xmath252)$ ] is tractable if the constraints @xmath253 have bounded arity and do not share any variable .",
    "however , only a limited form of consistency is enforced on a @xmath251 constraint ( see @xcite ) , and it is easy to show why this is necessary in general .    enforcing gac on the @xmath252)$ ] constraint",
    "is np - hard , and remains so even if all the constraints @xmath253 are identical and binary and no variable is repeated more than three times .",
    "_ proof .",
    "_ we use a reduction from the special case of 3sat in which at most three clauses contain a variable or its negation .",
    "( this is still np - complete . )",
    "each boolean variable @xmath19 is represented by a csp variable @xmath34 with domain @xmath262 .",
    "each clause @xmath171 is represented by three csp variables , @xmath263 , @xmath264 and @xmath265 , and five binary constraints posted on these variables .",
    "the domain of @xmath263 is a strict subset of @xmath266 , of @xmath264 is a strict subset of @xmath267 and of @xmath265 is a strict subset of @xmath268 .",
    "the domain values serve two purposes .",
    "first , the bottom three bits indicate the truth values taken by the variables that satisfy the clause .",
    "we therefore have to delete one value from each domain .",
    "this is the assignment of truth values which does not satisfy the clause .",
    "for example , if @xmath171 is @xmath126 then the only assignment to @xmath34 , @xmath269 and @xmath270 , which does not satisfy the clause is 0 , 1 , 0 .",
    "we therefore delete the value 26 from @xmath265 as @xmath271 is 2 ( or 010 in binary ) .",
    "similarly , we delete the value 18 from @xmath264 as @xmath272 is 2 , and 10 from @xmath263 .",
    "second , the top two bits of the values of @xmath263 , @xmath264 and @xmath265 point to one of the three positions in the clause .",
    "we add three binary constraints to the cardinality constraint : @xmath273 , @xmath274 and @xmath275 .",
    "we also need to ensure that @xmath263 , @xmath264 and @xmath265 take consistent values .",
    "we therefore add two binary constraints : @xmath276 , and @xmath277 .",
    "finally , we define @xmath278 as follows .",
    "if @xmath279 , there are three cases . if @xmath280 then @xmath1 is satisfied iff @xmath281 = @xmath269 ( i.e. , the third bit of @xmath34 agrees with @xmath269 ) . if @xmath282 then @xmath1 is satisfied iff @xmath283 = @xmath269 ( i.e. , the second bit of @xmath34 agrees with @xmath269 ) . if @xmath284 then @xmath1 is satisfied iff @xmath285 = @xmath269 ( i.e. , the first bit of @xmath34 agrees with @xmath269 )",
    "otherwise @xmath286 and @xmath1 is satisfied iff @xmath287 = @xmath288 .",
    "the constructed cardinality constraint has a solution iff there is an assignment to the boolean variables that satisfies all of the clauses .",
    "hence enforcing gac is np - hard .",
    "a more restricted , but nevertheless very useful form of the cardinality constraint is the cardinality path constraint @xcite .",
    "the most general form of the constraint is : @xmath289,c)$ ] where @xmath1 is a constraint of arity @xmath29 , and @xmath290 .",
    "this `` slides '' a constraint of fixed arity down a sequence of variables and ensures that it holds @xmath115 times , where @xmath115 is itself an integer decision variable .",
    "this constraint can be used to implement the change constraint , ( which counts the number of changes of value in a sequence ) , smooth constraint ( which limits the size of changes of value along a sequence ) , number of rests constraint ( which counts the number of two day or more rests in a sequence ) , and sliding sum constraints . in @xcite ,",
    "a greedy algorithm is given for propagating the cardinality path constraint .",
    "however , even for binary constraints , the algorithm fails to prune all possible values . in @xcite , an algorithm is proposed that achieves gac when no variable is repeated in the sequence @xmath291 $ ] and @xmath1 has arity @xmath29 .",
    "this takes a time which is polynomial in @xmath10 but exponential in @xmath29 . if @xmath29 is bounded ( e.g. @xmath292 ) ,",
    "this is polynomial .",
    "the algorithm uses dynamic programming technique that slides along the values of the variables the number of times @xmath1 can be satisfied in a tuple involving the given value .",
    "after two passes of this sliding process , the values from @xmath115 that never appear in the counters can be pruned , as well as the values that are not labelled by any value in the domain of @xmath115 .",
    "as soon as we allow repetitions of variables in the sequence , it is not hard to show that enforcing gac on @xmath293 is intractable . as with @xmath211 , this is another example of constraint that changes from polynomial to intractable when we allow repeated variables .    enforcing gac on @xmath289,c)$ ] where variables in the sequence @xmath291 $ ] can be repeated is np - hard even if @xmath1 is binary .",
    "_ proof .",
    "_ we use a reduction from 3col .",
    "we assume without loss of generality that the graph is connected .",
    "each node in the graph is represented by a csp variable .",
    "the domain of each variable is the set of three colours .",
    "we then construct a sequence of variables @xmath294 , ",
    ", @xmath295 such that if there is an edge @xmath296 in the graph then there is at least one position in the sequence with @xmath116 next to @xmath223 .",
    "to do this , we pick any node at which to start .",
    "we then pick any edge in the graph not yet in the sequence and find a path from our starting node that passes through this edge .",
    "we add this path to our sequence .",
    "we repeat until all edges are in the sequence .",
    "finally , we set @xmath297 and @xmath1 to be the binary not - equals constraint . the constructed cardinality path constraint has a solution iff there is a proper colouring of the graph .",
    "hence deciding if enforcing gac does not lead to a domain wipe out is np - complete , and enforcing gac is itself np - hard .",
    "it is less easy to see that enforcing gac on @xmath289,c)$ ] is intractable when the sequence of variables @xmath298 @xmath299 $ ] does not contain any repetition and gac can be enforced on @xmath1 in polynomial time .",
    "enforcing gac on @xmath289,c)$ ] is np - hard even when enforcing gac on @xmath1 is polynomial and no variable is repeated in the sequence .",
    "_ proof .",
    "_ we transform max2sat into nogacwipeout(@xmath293 ) .",
    "max2sat is the problem of deciding whether there exists an assignment of @xmath50 boolean variables violating at most @xmath29 clauses in a 2sat formula with @xmath10 clauses .",
    "the idea is to build a sequence of variables , alternating @xmath50 boolean variables with two variables representing one of the binary clauses , and then again @xmath50 boolean variables and so on until all clauses are represented .",
    "the sliding constraint @xmath1 guarantees that in each alternation , the assignment of the @xmath50 boolean variables on the left of the two clause - variables is equal to the assignment on the right ( i.e. the same assignment is used down the sequence ) , and that the binary clause sandwiched in the middle is satisfied by this assignment . to prevent violation of a clause being confused with a change in the assignment , we need @xmath300 dummy variables in each alternation .",
    "a change in the assignment then violates @xmath300 times the constraint @xmath1 .",
    "( @xmath29 is the bound of the max2sat problem . )",
    "so , the whole sequence is composed of @xmath10 alternations , each with @xmath300 dummy variables plus @xmath50 boolean variables plus two clause - variables , plus some additional dummy variables at the very end of the sequence to guarantee that the last clause is checked .",
    "the domain of the dummy variables is @xmath301 , that of boolean variables is @xmath262 . if @xmath302 , the first clause - variable in the @xmath125th alternation has domain @xmath303 and the second has domain @xmath304 .",
    "the constraint @xmath1 , of arity @xmath305 ( two alternations ) , is built to be satisfied in the three following cases : if neither its first variable nor its @xmath306th is a dummy ( @xmath307 is the length of an alternation ) ; if its first variable is a dummy and the two assignments of @xmath50 boolean variables are the same ; finally if the first variable is not a dummy , the @xmath306th variable is , and the clause represented by the two variables in positions @xmath308 and @xmath309 is satisfied by the assignment . enforcing gac on @xmath1 is clearly polynomial .",
    "there remains to set the domain of @xmath115 to the interval from the total number of occurrences of @xmath1 in the sequence ( all @xmath1 satisfied ) to this number less @xmath29 .",
    "this ensures that @xmath1 is violated at most @xmath29 times . as a change in the assignment to the boolean variables",
    "costs at least @xmath300 violations , we are guaranteed that the same assignment slides down the sequence .",
    "thus @xmath293 has a satisfying tuple if and only if there exists an assignment of the boolean variables of the max2sat formula that violates at most @xmath29 binary clauses .",
    "therefore , deciding if enforcing gac does not lead to a domain wipe out is np - complete , and enforcing gac is itself np - hard .",
    "we have seen that @xmath293 is tractable when @xmath1 has a fixed arity , and we do not allow repetitions of variables in the sequence .",
    "however , as soon as we relax either one of these restrictions , propagation becomes np - hard .",
    "we may therefore need to enforce a lesser level of local consistency such as in @xcite .",
    "analysis of tractability and intractability is not new in constraint programming . identifying properties under which a constraint satisfaction problem is tractable has been studied for a long time . for example , freuder @xcite , dechter and pearl @xcite or gottlob et al @xcite gave increasingly general conditions on the structure of the underlying ( hyper)graph to obtain a backtrack - free resolution of a problem .",
    "van beek and dechter @xcite and deville et al @xcite presented conditions on the semantics of the individual constraints that make the problem tractable .",
    "finally , cohen et al @xcite showed that when the constraints composing a problem are defined as disjunctions of other constraints of specified types , then the whole problem is tractable .",
    "however , these lines of research are concerned with a constraint satisfaction problem as a whole , and do not say much about individual particular constraints .    for constraints of bounded arity , asymptotic analysis has been extensively used to study the complexity of constraint propagation both in general and for constraints with a particular semantics .",
    "for example , the gac - schema algorithm of @xcite has an @xmath310 time complexity on constraints of arity @xmath50 and domains of size @xmath51 , whilst the gac algorithm of @xcite for the @xmath50-ary @xmath112 constraint has @xmath113 time complexity .",
    "these are upper bounds on the cost of gac in general or on specific constraints . by comparison",
    ", we have characterised here conditions under which no polynomial algorithm for gac can be designed for a given constraint type . for global constraints like the @xmath311 and @xmath312 constraints ,",
    "there are very immediate reductions from the bin packing and hamiltonian circuit which demonstrate that reasoning with these constraints is intractable in general .",
    "it is therefore perhaps not surprising that there has been little comment in the past about their intractability .",
    "however , as we show here , there are many other global constraints proposed in the past like @xmath117 and @xmath161 where a reduction is less immediate , but the constraint is intractable nevertheless .    in many constraint problems ,",
    "the goal is not only to satisfy all the constraints , but also to minimise ( or maximise ) an objective function .",
    "constraint propagation can be enhanced in these problems by cost - based filtering where we also remove values that are proven sub - optimal .",
    "_ optimisation constraints _ , that combine a regular constraint of the problem with a constraint on the maximal value the objective function can take have been advocated in @xcite .",
    "gac on such a combined constraint will not only prune the values having no support on the regular constraint , but also the values that do not extend to any satisfying assignment of the constraint improving the given bound .",
    "however , as in the case of combining constraints ( see section [ sec : combining ] ) , such compositions have to be handled with care .",
    "the optimisation version of a constraint for which enforcing gac is intractable obviously remains intractable ( e.g. , @xcite ) .",
    "however , the optimisation version of a constraint for which gac is polynomial either remains tractable ( e.g. , @xcite ) or may become intractable .",
    "an example of the latter situation is the shortest path constraint , which is the optimisation version of the path constraint @xcite .",
    "beldiceanu has proposed a general framework for describing many global constraints in terms of graph properties on structured networks of simple elementary constraints @xcite .",
    "it is an interesting open question if we can identify properties or elementary constraints within this framework which guarantee that a global constraint is computationally ( in)tractable . finally , computational complexity can help us classify the `` globality '' of constraints @xcite . indeed",
    ", np - hardness of enforcing gac is a sufficient condition for a constraint to be _ operationally gac - global _ wrt gac - poly - time decompositions .",
    "we have studied the computational complexity of reasoning with global constraints .",
    "we have considered a number of important questions related to constraint propagation .",
    "for example , `` does this value have support ? '' , or ` is this problem generalised arc - consistent?'. we identified dependencies between the tractability and intractability of these questions for finite domain variables and we have shown that these questions are intractable in general .",
    "we have then demonstrated how the same tools of computational complexity can be used in the design and analysis of specific global constraints . in particular , we have illustrated how computational complexity can be used to determine when a lesser level of local consistency should be enforced , when decomposing constraints will reduce propagation , when constraints can be combined tractably and when generalisation leads to intractability .",
    "we showed that a wide range of global constraints , both existing and new , are intractable . in particular , the @xmath119 and @xmath161 constraints , the global cardinality constraint with repeated variables and the @xmath129 constraint , are proven here to be intractable .",
    "we have also shown how the same tools can be used to study meta - constraints like the @xmath293 constraint . in the future , we plan an extensive study of the computational complexity of global constraints beyond finite domain variables ( e.g. on set and multiset variables ) .",
    "the second and fourth author are members of the knowledge representation and reasoning programme at national ict australia .",
    "nicta is funded through the australian government s _ backing australia s ability _ initiative , in part through the australian research council .",
    "the third author is supported by science foundation ireland .",
    "we thank marie - christine lagasquie for some advice about reducibility notions .",
    "n.  beldiceanu .",
    "global constraints as graph properties on a structured network of elementary constraints of the same type . technical report , swedish institute of computer science , 2000 .",
    "sics technical report t2000/01 .",
    "n  beldiceanu .",
    "global constraints as graph properties on a structured network of elementary constraints of the same type . in _ proceedings of the sixth international conference on principles and practice of constraint programming ( cp00 ) ,",
    "lncs 1894 , springer ",
    "verlag _ , pages 5266 , singapore , 2000 .",
    "n.  beldiceanu . pruning for the minimum constraint family and for the number of distinct values constraint family . in _ proceedings of the seventh international conference on principles and",
    "practice of constraint programming ( cp01 ) , lncs 2239 , springer ",
    "verlag _ , pages 211224 , singapore , 2001 .            c.  bessiere and j.c .",
    "arc consistency for general constraint networks : preliminary results . in _ proceedings of the fifteenth international joint conference on artificial intelligence ( ijcai97 )",
    "_ , pages 398404 , nagoya , japan , 1997 .",
    "c.  bessiere and p.  van hentenryck . to be or not to be ... a global constraint .",
    "in _ proceedings of the ninth international conference on principles and practice of constraint programming ( cp03 ) , lncs 2833 , springer ",
    "verlag _ , pages 789794 , kinsale , ireland , 2003",
    ". short paper .",
    "m.  carlsson and n.  beldiceanu .",
    "arc - consistency for a chain of lexicographic ordering constraints .",
    "technical report t2002 - 18 , swedish institute of computer science , 2002 .",
    "ftp://ftp.sics.se/pub/sics-reports/reports/sics-t2002-18se.ps.z .",
    "y.  caseau and f.  laburthe .",
    "solving various weighted matching problems with constraints . in _ proceedings of the third international conference on principles and",
    "practice of constraint programming ( cp97 ) , lncs 1330 , springer ",
    "verlag _ , pages 1731 ,",
    "linz , austria , 1997 .",
    "cohen , p.  jeavons , and m.  koubarakis .",
    "tractable disjunctive constraints . in _ proceedings of the third international conference on principles and",
    "practice of constraint programming ( cp97 ) , lncs 1330 , springer ",
    "verlag _ , pages 478490 , linz , austria , 1997 .",
    "a.  frisch , b.  hnich , z.  kiziltan , i.  miguel , and t.  walsh .",
    "global constraints for lexicographic orderings . in _ proceedings of the eighth international conference on principles and",
    "practice of constraint programming ( cp02 ) , lncs 2470 , springer ",
    "verlag _ , ithaca ny , 2002 .",
    "b.  hnich , z.  kiziltan , and t.  walsh . combining symmetry breaking with other constraints",
    ": lexicographic ordering with sums . in _ proceedings of the 8th international symposium on the artificial intelligence and mathematics _ , 2004 .",
    "f.  pachet and p.  roy .",
    "automatic generation of music programs . in _ proceedings of the fifth international conference on principles and",
    "practice of constraint programming ( cp99 ) , lncs 1713 , springer ",
    "verlag _ , pages 331345 , alexandria va , 1999 .",
    "rgin and m.  rueher . a global constraint combining a sum constraint and difference constraint . in _ proceedings of the sixth international conference on principles and practice of constraint programming ( cp00 ) ,",
    "lncs 1894 , springer ",
    ", pages 384395 , singapore , 2000 .",
    "m.  sellmann .",
    "approximated consistency for knapsack constraints . in _ proceedings of the ninth international conference on principles and",
    "practice of constraint programming ( cp03 ) , lncs 2833 , springer ",
    "verlag _ , pages 679693 , kinsale , ireland , 2003 .",
    "m.  sellmann .",
    "cost - based filtering for shorter path constraints . in _ proceedings of the ninth international conference on principles and",
    "practice of constraint programming ( cp03 ) , lncs 2833 , springer ",
    "verlag _ , pages 694708 , kinsale , ireland , 2003 .",
    "t.  walsh .",
    "consistency and propagation with multiset constraints : a formal viewpoint . in _ proceedings of the ninth international conference on principles and",
    "practice of constraint programming ( cp03 ) , lncs 2833 , springer ",
    "verlag _ , pages 724738 , kinsale , ireland , 2003 ."
  ],
  "abstract_text": [
    "<S> constraint propagation is one of the techniques central to the success of constraint programming . to reduce search , fast algorithms associated with each constraint prune the domains of variables . with global ( or non - binary ) constraints </S>",
    "<S> , the cost of such propagation may be much greater than the quadratic cost for binary constraints . </S>",
    "<S> we therefore study the computational complexity of reasoning with global constraints . </S>",
    "<S> we first characterise a number of important questions related to constraint propagation . </S>",
    "<S> we show that such questions are intractable in general , and identify dependencies between the tractability and intractability of the different questions . </S>",
    "<S> we then demonstrate how the tools of computational complexity can be used in the design and analysis of specific global constraints . </S>",
    "<S> in particular , we illustrate how computational complexity can be used to determine when a lesser level of local consistency should be enforced , when constraints can be safely generalized , when decomposing constraints will reduce the amount of pruning , and when combining constraints is tractable . </S>"
  ]
}