{
  "article_text": [
    "if a constraint satisfaction problem ( csp ) is over - constrained , i.e. has no solution satisfying all constraints , it is natural to allow certain constraints , the soft constraints , to be violated and search for solutions that violate as few soft constraints as possible .",
    "constraints that are not decided to be soft are hard constraints , and should always be satisfied .",
    "several methods have been proposed to handle over - constrained csps , see for instance @xcite . in this paper , we follow the scheme proposed by rgin , petit , bessire and puget @xcite , that is particularly useful for non - binary constraints .",
    "the idea is as follows .",
    "a cost function is assigned to each soft constraint , measuring the violation .",
    "then the soft csp is transformed into a constraint optimization problem ( cop ) , where all constraints are hard , and the ( weighted ) sum of cost functions is minimized .",
    "this approach allows one to use specialized filtering algorithms for soft constraints , as shown by petit , rgin and bessire @xcite .    for the soft ` alldifferent `  constraint ,",
    "an algorithm is presented in @xcite that removes inconsistent values in @xmath4 time , where @xmath2 is the number of variables and @xmath3 the sum of the cardinalities of their domains . however , that algorithm does not ensure hyper - arc consistency . in this paper",
    ", we propose an algorithm that does ensure hyper - arc consistency and runs in @xmath0 time . in principle",
    ", we consider the soft ` alldifferent `  constraint as a minimum - cost flow problem in a particular graph .",
    "checking the consistency can then be done in @xmath0 time .",
    "thereafter , domain values are checked for consistency by an efficient shortest path computation , which takes in total @xmath1 time .",
    "the outline of the paper is as follows .",
    "section  [ sc : prel ] presents definitions related to constraint satisfaction problems .",
    "section  [ sc : graph ] shows a graph - theoretic analysis of the soft ` alldifferent `  constraint , using flow theory . in section  [ sc : alg ]",
    "the filtering algorithm is presented .",
    "we conclude with a discussion in section  [ sc : concl ] .",
    "we assume familiarity with the basic concepts of constraint programming . for a thorough explanation of constraint programming , see  @xcite .",
    "a constraint satisfaction problem ( csp ) consists of a finite set of variables @xmath5 with finite domains @xmath6 such that @xmath7 for all @xmath8 , together with a finite set of constraints @xmath9 , each on a subset of @xmath10 .",
    "a constraint @xmath11 is defined as a subset of the cartesian product of the domains of the variables that are in @xmath12 .",
    "a tuple @xmath13 is a solution to a csp if for every constraint @xmath11 on the variables @xmath14 we have @xmath15 .",
    "a constraint optimization problem ( cop ) is a csp together with an objective function to be optimized .",
    "a solution to a cop is a solution to the corresponding csp , that has an optimal objective function value .",
    "[ def : hac ] a constraint @xmath12 on the variables @xmath16 , @xmath17 is called hyper - arc consistent if for each variable @xmath18 and value @xmath19 , there exist values @xmath20 in @xmath21 , such that @xmath22 .",
    "a csp is hyper - arc consistent if all its constraints are hyper - arc consistent .",
    "a csp is inconsistent if it has no solution .",
    "similarly for a cop .",
    "[ def : alldiff ] let @xmath23 be variables with respective finite domains @xmath24",
    ". then @xmath25    in @xcite , two different measures of violation for a soft constraint are presented .",
    "the first is the minimum number of variables that need to change their value in order to satisfy the constraint . for this measure ,",
    "applied to the ` alldifferent `  constraint , @xcite also contains a hyper - arc consistency algorithm .",
    "the second measure is the number of violated constraints in the binary decomposition of the constraint , if this decomposition exists .",
    "for the ` alldifferent `  constraint , such a decomposition does exist , namely @xmath26 for @xmath27 .",
    "we follow this second , more refined , measure , and present it in terms of the soft ` alldifferent `  constraint . for ` alldifferent`@xmath28 , let the cost of violation be defined as @xmath29    [ def : softad ] let @xmath30 be variables with respective finite domains @xmath31 .",
    "then @xmath32    the variable @xmath33 in definition  [ def : softad ] will serve as a so - called cost variable , which will be minimized during the solution process .",
    "this means that admissible tuples in definition  [ def : softad ] are those instantiations of variables , such that the number of violated dis - equality constraints @xmath34 is not more than that of the currently best found solution , represented by @xmath35 . at the same time",
    ", @xmath36 should not be less than the currently lowest possible value of @xmath37 .",
    "an over - constrained csp with an ` alldifferent `  constraint is transformed into a cop by introducing @xmath33 , replacing ` alldifferent `  with ` soft_alldifferent ` , and minimizing @xmath33 .",
    "this is illustrated in the following example .",
    "[ ex : over ] consider the following over - constrained csp @xmath38 we transform this csp into @xmath39 this cop is not hyper - arc consistent , as there is no support for @xmath40 . if we remove @xmath41 from @xmath42 , the cop is hyper - arc consistent , because there are at most 6 simultaneously violated dis - equalities .",
    "suppose now that during the search for a solution , we have found the tuple @xmath43 , that has one violated dis - equality .",
    "then @xmath44 in the remaining search . as",
    "the assignment @xmath45 always leads to a solution with @xmath46 , @xmath47 can be removed from @xmath48 .",
    "the resulting cop is hyper - arc consistent again .",
    "one should take into account that a simplified csp is considered in example  [ ex : over ] . in general , a csp can consist of many more constraints , and also more cost - variables that together with @xmath33 form an objective function to be minimized .    throughout this paper ,",
    "let @xmath49 for variables @xmath23 .",
    "a directed graph is a pair @xmath50 where @xmath51 is a finite set of vertices @xmath51 and @xmath52 is a family of ordered pairs from @xmath51 , called arcs .",
    "a pair occurring more than once in @xmath52 is called a multiple arc . for @xmath53 ,",
    "let @xmath54 and @xmath55 denote the family of arcs entering and leaving @xmath56 respectively .",
    "a ( directed ) walk in @xmath57 is a sequence @xmath58 where @xmath59 , @xmath60 , @xmath61 and @xmath62 for @xmath63 .",
    "if there is no confusion , @xmath64 may be denoted as @xmath65 .",
    "a ( directed ) walk is called a ( directed ) path if @xmath66 are distinct .",
    "a closed ( directed ) walk , i.e. @xmath67 , is called a ( directed ) circuit if @xmath68 are distinct .",
    "first , we introduce the concept of a flow , following schrijver  @xcite .",
    "let @xmath50 be a directed graph and let @xmath69 .",
    "a function @xmath70 is called a flow from @xmath71 to @xmath72 , or an @xmath73 flow , if @xmath74 where @xmath75 for all @xmath76 .",
    "property ( [ eq : flow])@xmath77 ensures flow conservation , i.e. for a vertex @xmath78 , the amount of flow entering @xmath56 is equal to the amount of flow leaving @xmath56 .",
    "the value of an @xmath73 flow @xmath79 is defined as @xmath80 in other words , the value of a flow is the net amount of flow leaving @xmath71 , which can be shown to be equal to the net amount of flow entering @xmath72 .    when we study flows we typically endow capacity constraints , via a `` capacity '' function @xmath81 .",
    "we say that a flow @xmath79 is under @xmath82 if @xmath83 for each @xmath84 .",
    "a feasible flow is a flow under @xmath82 .",
    "we also assign costs to flows via a `` cost '' function @xmath85 .",
    "doing so the cost of a flow @xmath79 is defined as @xmath86    a minimum - cost flow is an @xmath73 flow under @xmath82 of maximum value and minimum cost .",
    "the minimum - cost flow problem is the problem of finding such a minimum - cost flow .",
    "a minimum - cost flow can be computed using an algorithm originally due to ford and fulkerson  @xcite ( we follow the description given by schrijver @xcite ) .",
    "it consists of successively finding shortest ( with respect to the cost function ) @xmath73 paths in the so - called residual graph , while maintaining an optimal flow .",
    "define the residual graph @xmath87 of @xmath79 ( with respect to @xmath82 ) , where @xmath88 here @xmath89 if @xmath90 .",
    "we extend @xmath91 to @xmath92 by defining @xmath93 for each @xmath84 .",
    "any directed path @xmath64 in @xmath94 gives an undirected path in @xmath50 .",
    "we define @xmath95 by @xmath96 for @xmath84 .",
    "define the cost of a path @xmath64 as @xmath97 .    call a feasible flow extreme when it has minimum cost among all feasible flows with the same value .",
    "then the following holds ( cf .",
    "* theorem 12.3 and 12.4 ) ) .",
    "let @xmath98 denote the all - zero vector of appropriate size .",
    "[ thm : circuit ] a flow @xmath79 is extreme if and only if each directed circuit of @xmath94 has nonnegative cost .",
    "[ thm : extreme ] let @xmath79 be an extreme flow in @xmath50 .",
    "let @xmath64 be a minimum - cost @xmath73 path in @xmath94 , for some @xmath69 , and let @xmath99 be such that @xmath100 satisfies @xmath101 .",
    "then @xmath102 is an extreme flow again .",
    "in fact , for @xmath103 and @xmath102 in theorem  [ thm : extreme ] holds @xmath104    this means that we can find a minimum - cost @xmath73 flow in @xmath57 by successively computing minimum - cost @xmath73 paths in @xmath94 .",
    "along such a path we increase the amount of flow to the maximum possible value @xmath105 . by theorem  [ thm :",
    "extreme ] , the last flow ( of maximum value ) we obtain must be extreme , and hence optimal .",
    "this is presented as algorithm  [ alg : mincostflow ] .",
    "note that the cost of minimum - cost @xmath73 paths in @xmath94 is bounded , because there are no directed circuits of negative cost in @xmath94 . for rational capacities , algorithm  [ alg : mincostflow ] terminates with a feasible @xmath73 flow of maximum value and minimum cost .",
    "although faster algorithms exist for general minimum - cost flow problems , algorithm  [ alg : mincostflow ] suffices when applied to our problem .",
    "this is because in our particular graph algorithm  [ alg : mincostflow ] is faster than the algorithms for general minimum - cost flow problems .",
    "we transform the problem of finding a solution to the ` soft_alldifferent`constraint into a minimum - cost flow problem .",
    "construct the directed graph @xmath50 with @xmath106 and @xmath107 where @xmath108 and @xmath109 note that @xmath110 contains parallel arcs if two or more variables share a domain value .",
    "if there are @xmath111 parallel arcs @xmath112 between some @xmath113 and @xmath72 , we distinguish them by numbering the arcs as @xmath114 in a fixed but arbitrary way .    to each arc @xmath84 , we assign a capacity @xmath115 and a cost @xmath116 . if @xmath117 , then @xmath118 . if @xmath119 , so @xmath120 for some @xmath113 and integer @xmath8 , the value of @xmath121 .    in figure",
    "[ fig : network ] , the graph @xmath57 for the ` soft_alldifferent `  constraint in example  [ ex : over ] is depicted . for each arc @xmath122 , @xmath123 is given .",
    "[ thm : flow ] an integer flow @xmath79 that is a solution to the minimum - cost flow problem in @xmath57 corresponds to an instantiation of variables @xmath23 in @xmath124 , minimizing @xmath37 .    for an integer flow @xmath79 in @xmath57 , @xmath125 if arc @xmath122 is used , and @xmath126 otherwise . an arc @xmath127 with @xmath125 corresponds to the instantiation @xmath128 . by construction , every solution @xmath79 to the minimum - cost flow problem in @xmath57 has @xmath129 .",
    "thus a solution corresponds to assigning a value to each variable @xmath18 , @xmath130 .",
    "the cost function @xmath131 for @xmath111 parallel arcs @xmath132 corresponds to counting the number of violations caused by assigning @xmath133 variables to a particular value .",
    "namely , for these parallel arcs , a minimum - cost @xmath73 path in @xmath94 uses the arc with lowest cost first . using arc @xmath134 ( the @xmath135st arc ) causes a `` violation '' with the @xmath8 previously used arcs .",
    "thus , for a feasible flow @xmath79 , which corresponds to an assignment of @xmath23 , @xmath136 measures exactly @xmath37 .",
    "hence , a minimum - cost flow minimizes @xmath37 .",
    "consider again the graph @xmath57 in figure  [ fig : network ] .",
    "a bold arc @xmath122 in @xmath57 denotes @xmath125 .",
    "this particular flow @xmath79 has value@xmath137 and cost@xmath138 .",
    "indeed , the only violation is @xmath139 .",
    "next we describe the behaviour of algorithm  [ alg : mincostflow ] to compute a minimum - cost flow in @xmath57 .",
    "we need to compute a sequence of minimum - cost @xmath73 paths in @xmath94 , maintaining extreme intermediate flows .",
    "note that along each minimum - cost @xmath73 path in @xmath94 we can increase the flow by a maximum of @xmath140 .",
    "hence all extreme flows in @xmath57 are integer . by construction , there are exactly @xmath2 such paths , each containing one arc in @xmath141 ( in fact , the paths may as well be computed starting from the vertices @xmath18 instead of @xmath71 , using only arcs in @xmath142 and @xmath110 ) .",
    "further , each minimum - cost @xmath73 path contains exactly one arc in @xmath110 .",
    "namely , consider a minimum - cost path @xmath64 using multiple arcs in @xmath110 .",
    "then @xmath64 consists of an @xmath73 path with one arc in @xmath141 , followed by a @xmath143 path .",
    "if the @xmath143 path has cost 0 , we may omit this part , and use only the @xmath73 path with one arc in @xmath141 .",
    "if the @xmath143 path , which is a circuit , has negative cost , it contradicts theorem  [ thm : circuit ] .",
    "effectively , it means that the @xmath143 path could have been used to improve the preceding intermediate solution , thus contradicting the extremity of that solution . to conclude , the minimum - cost paths we need to compute use exactly one arc in @xmath141 and one arc in @xmath110 .",
    "it follows that these paths can be computed in @xmath1 time , and the total time complexity for finding a maximum flow of minimum cost in @xmath57 is @xmath0 .",
    "hence it follows , by theorem  [ thm : flow ] , that consistency of the ` soft_alldifferent `  constraint can be checked in @xmath0 time .",
    "the following theorem identifies hyper - arc consistent domain values for the ` soft_alldifferent `  constraint . for an arc @xmath122 of @xmath57 , let @xmath144 arise from @xmath57 by enforcing @xmath125 for every flow @xmath79 in @xmath57 .",
    "[ thm : hac ] the constraint @xmath124 is hyper - arc consistent if and only if    * for all all arcs @xmath145 a minimum - cost flow of maximum value in @xmath144 has cost at most @xmath146 , * all values in @xmath42 are not smaller than the cost of a minimum - cost flow of maximum value in @xmath57 .",
    "enforcing @xmath125 for arc @xmath147 corresponds to assigning @xmath128 .",
    "the result follows from definition  [ def : hac ] and theorem  [ thm : flow ] .",
    "namely , property @xmath148 checks consistency for all domain values in @xmath24 .",
    "property @xmath77 checks consistency of the domain values of @xmath42 .",
    "using theorem  [ thm : hac ] , we can construct an algorithm that enforces hyper - arc consistency for the ` soft_alldifferent `  constraint , presented as algorithm  [ alg : hac ] .",
    "for all variables @xmath149 , the algorithm scans all domain values @xmath150 , and checks whether there exists a minimum - cost @xmath73 flow in @xmath144 , where @xmath151 , of maximum value with cost at most @xmath146 .",
    "if such a flow does not exist , then , by theorem  [ thm : hac ] , @xmath152 is removed from @xmath153 . finally , we remove all values of @xmath42 which are smaller than the cost of a minimum - cost flow in @xmath57 .",
    "the time complexity of algorithm  [ alg : hac ] is @xmath154 .",
    "we can construct a more efficient filtering algorithm , however .",
    "it is presented as algorithm  [ alg : hac2 ] , and makes use of the following theorem .",
    "we follow the notation introduced in section  [ ssc : flow ] .",
    "[ thm : path ] let @xmath79 be an extreme flow of maximum value in @xmath57 .",
    "let @xmath155 and @xmath64 a minimum - cost @xmath156 path in @xmath94 .",
    "let @xmath157 be an extreme flow of maximum value in @xmath144 .",
    "then @xmath158 .    either @xmath159 or @xmath160 . in case @xmath159 ,",
    "@xmath161 , @xmath162 , @xmath163 and we are done . in case @xmath160 , first note that there exists a @xmath156 path in @xmath94 .",
    "namely , there is exactly one @xmath164 for which @xmath165 , which allows the path @xmath166 .",
    "let @xmath64 be a minimum - cost @xmath156 path in @xmath94 .",
    "together with arc @xmath167 @xmath64 forms a circuit @xmath12 .",
    "the directed circuit @xmath12 in @xmath94 gives an undirected circuit in @xmath144 . for all @xmath168 ,",
    "define flow @xmath157 in @xmath144 as follows : @xmath169 it is easy to check that @xmath157 is again a flow of maximum value .    because @xmath79 is extreme",
    ", we may assume that @xmath64 enters and leaves @xmath72 only once , say via arcs @xmath170 and @xmath171 respectively ( where @xmath172 ) .",
    "it follows that @xmath173 . from theorem  [ thm : circuit ]",
    "we know that @xmath174 . similarly , @xmath175    it remains to show that @xmath157 is extreme in @xmath144 .",
    "suppose not , i.e. there exists a flow @xmath176 in @xmath144 with maximum value and @xmath177 .",
    "as @xmath178 and @xmath174 , there are two possibilities .",
    "the first is that @xmath179 , which is not possible because @xmath79 is extreme .",
    "the second is that there exists an @xmath180 path @xmath181 in @xmath94 with @xmath182 which also leads to a contradiction because @xmath64 is a minimum - cost path .",
    "hence @xmath157 is extreme .",
    "algorithm  [ alg : hac2 ] first computes a minimum - cost flow @xmath79 in @xmath57 .",
    "this takes @xmath0 time , as we have seen in section  [ ssc : softflow ] . if @xmath183 , we know that the ` soft_alldifferent`constraint is inconsistent . if this is not the case , we update @xmath184 .",
    "next , we scan all arcs @xmath147 for which @xmath126 . for each of these arcs ,",
    "we compute a minimum - cost @xmath156 path @xmath64 in @xmath94 . by theorem  [ thm : path ] and theorem  [ thm : hac ]",
    ", we remove @xmath152 from @xmath153 if cost@xmath185 + cost@xmath186 @xmath187 @xmath146 .",
    "this can be done efficiently , as shown by the following theorem .",
    "[ thm : filter ] let @xmath188 be consistent and @xmath79 an integer minimum - cost flow in @xmath57 .",
    "then @xmath188 can be made hyper - arc consistent in @xmath1 time .",
    "the complexity of the filtering algorithm depends on the computation of the minimum - cost @xmath156 paths for arcs @xmath167 .",
    "we make use of the fact that only arcs @xmath119 contribute to the cost of such a path .",
    "consider the strongly connected components is a subset of vertices @xmath189 such that there exists a directed @xmath190 path in @xmath57 for all @xmath191 .",
    "] of the graph @xmath192 which is a copy of @xmath94 where @xmath71 and @xmath72 and all their incident arcs are removed .",
    "let @xmath64 be a minimum - cost @xmath156 path @xmath64 in @xmath94 .",
    "if @xmath64 is equal to @xmath193 then @xmath194 and @xmath163 . otherwise , either @xmath18 and @xmath152 are in the same strongly connected component of @xmath192 , or not . in case they are in the same strongly connected component",
    ", @xmath64 can avoid @xmath72 in @xmath94 , and @xmath163 . in case @xmath18 and @xmath152",
    "are in different strongly connected components of @xmath192 , say @xmath195 and @xmath196 , we have @xmath197 property ( [ eq : minmax ] ) follows from the fact that @xmath64 uses exactly one ingoing and one outgoing arc for @xmath72 .",
    "arcs @xmath122 with @xmath125 or within a strongly connected component will all use a minimum - cost path with cost equal to 0 , and will therefore be all consistent if cost@xmath198 . for all other arcs , we can resort to property ( [ eq : minmax ] ) . for this",
    "we only have to compute once for each strongly connected component @xmath199 of @xmath192 the minimum - cost arc going from @xmath199 to @xmath72 and the minimum - cost arc going from @xmath72 to @xmath199 ( if such arcs exist ) , which takes in total @xmath1 time .",
    "the strongly connected components of @xmath192 can be computed in @xmath200 time , following tarjan @xcite .",
    "hence the total time complexity of achieving hyper - arc consistency is @xmath1 , as @xmath201 .",
    "the proof of theorem  [ thm : filter ] applies to any constraint whose graph representation resembles @xmath57 and has only costs on arcs from @xmath202 to @xmath72 . for all such constraints that are consistent ,",
    "hyper - arc consistency can be achieved in @xmath1 time .",
    "note that this is equal to the complexity of achieving hyper - arc consistency on these constraints if no costs are involved .",
    "we have presented an algorithm that checks consistency of the ` soft_alldifferent `   constraint on @xmath2 variables in @xmath0 time and achieves hyper - arc consistency in @xmath1 time , where @xmath3 is the sum of the cardinalities of the domains . a previous method for removing domain values that are inconsistent with the ` soft_alldifferent `  constraint did not ensure hyper - arc consistency @xcite . moreover",
    ", that method has a time complexity of @xmath4 .",
    "hence our algorithm improves on this in terms of quality as well as time complexity .",
    "the ` soft_alldifferent `  constraint is related to the standard ` alldifferent`constraint @xcite and the minimum weight ` alldifferent `  constraint @xcite .",
    "the minimum weight ` alldifferent `  constraint is a particular instance of the global cardinality constraint with costs @xcite . for that constraint",
    ", hyper - arc consistency can be achieved in @xmath203 time , where @xmath152 is the cardinality of the union of all domains @xcite .",
    "it is achieved by finding @xmath2 shortest paths , each taking @xmath204 time to compute .",
    "although our algorithm has a similar flavour , the underlying graphs have a different cost structure .",
    "we improve the efficiency by exploiting the cost structure of our particular graph when computing the shortest paths .",
    "our result can be applied to other constraints with a similar graph representation and cost structure .",
    "many thanks to bert gerards for valuable comments . thanks also go to sebastian brand for fruitful discussion . finally , the constructive remarks of jean - charles rgin were highly appreciated .",
    "y.  caseau and f.  laburthe . .",
    "in g.  smolka , editor , _ proceedings of the third international conference on principles and practice of constraint programming ( cp97 ) _ , volume 1330 of _ lncs _ , pages 1731 .",
    "springer , 1997 .",
    "t.  petit , j .-",
    "c . rgin , and c.  bessire . .",
    "in t.  walsh , editor , _ proceedings of the seventh international conference on principles and practice of constraint programming ( cp 2001 ) _ , volume 2239 of _ lncs _ , pages 451463 .",
    "springer , 2001 .",
    "in j.  jaffar , editor , _ proceedings of the fifth international conference on principles and practice of constraint programming ( cp99 ) _ , volume 1713 of _ lncs _ , pages 390404 .",
    "springer , 1999 .",
    "rgin , t.  petit , c.  bessire , and j .- f .",
    "in r.  dechter , editor , _ proceedings of the sixth international conference on principles and practice of constraint programming ( cp 2000 ) _ , volume 1894 of _ lncs _ , pages 543548 .",
    "springer , 2000 .",
    "m.  sellmann . .",
    "in p.  van hentenryck , editor , _ proceedings of the eighth international conference on principles and practice of constraint programming ( cp 2002 ) _ , volume 2470 of _ lncs _ , pages 744749 .",
    "springer , 2002 ."
  ],
  "abstract_text": [
    "<S> this paper presents an algorithm that achieves hyper - arc consistency for the soft ` alldifferent `  constraint . to this end , we prove and exploit the equivalence with a minimum - cost flow problem . </S>",
    "<S> consistency of the constraint can be checked in @xmath0 time , and hyper - arc consistency is achieved in @xmath1 time , where @xmath2 is the number of variables involved and @xmath3 is the sum of the cardinalities of the domains . </S>",
    "<S> it improves a previous method that did not ensure hyper - arc consistency . </S>"
  ]
}