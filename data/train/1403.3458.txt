{
  "article_text": [
    "let @xmath0 be a set of @xmath1 pairwise - disjoint polygonal obstacles in the plane with a total of @xmath2 vertices .",
    "we consider two - point shortest obstacle - avoiding path queries for which the path lengths are measured in the @xmath3 metric .",
    "the plane minus the interior of the obstacles is called the _",
    "free space_. our goal is to build a data structure to quickly compute an @xmath3 shortest path in the free space between any two query points @xmath4 and @xmath5 .",
    "previously , chen @xcite constructed a data structure of size @xmath6 in @xmath7 time that computes the length of the @xmath3 shortest  path in @xmath9 time and an actual path in additional @xmath10 time , where @xmath11 is the number of edges of the output path . throughout this paper , unless otherwise stated , when we say that the query time of a data structure is @xmath26 ( which may be a function of both @xmath2 and @xmath1 ) , we mean that the shortest path length can be reported in @xmath26 time and an actual path can be found in additional time linear in the number of edges of the output path .",
    "hence , the query time of the data structure in @xcite is @xmath9 .    in this paper",
    ", we build a new data structure of size @xmath12 in @xmath13 time , with @xmath27 query time .",
    "note that @xmath28 for any constant @xmath16 .",
    "hence , comparing with the results in @xcite , we reduce the query time by a logarithmic factor , and use less preprocessing time and space when @xmath1 is small , e.g. , @xmath29 for any constant @xmath30 .",
    "in addition , we can also build a data structure of size @xmath31 in @xmath18 time , with an @xmath32 query time , and another data structure of size @xmath20 in @xmath21 time , with an @xmath33 query time .",
    "further , we extend our techniques to the _ weighted rectilinear version _ in which each  obstacle \" @xmath34 is a region with a nonnegative weight @xmath35 and the edges of the obstacles in @xmath0 are all axis - parallel ; a path intersecting the interior of @xmath36 is charged a cost depending on @xmath35 . for this problem ,",
    "chen @xcite constructed a data structure of size @xmath7 in @xmath7 time that answers each two - point shortest path query in @xmath9 time .",
    "we build a new data structure of size @xmath37 in @xmath38 time that answers each query in @xmath27 time .",
    "note that @xmath39 for any constant @xmath16 .",
    "the problems of computing shortest paths among obstacles in the plane have been studied extensively ( e.g. , @xcite ) .",
    "there are three main types of such problems : _ finding a single shortest @xmath4-@xmath5 path _ ( both @xmath4 and @xmath5 are given as part of the input and the goal is to find a single shortest  path ) , _ single - source shortest path queries _ ( @xmath4 is given as part of the input and the goal is to build a data structure to answer shortest path queries for any query point @xmath5 ) , and _ two - point shortest path queries _ ( as defined and considered in this paper ) .",
    "the distance metrics can be the euclidean ( i.e. , @xmath40 ) or @xmath3 .",
    "refer to @xcite for a comprehensive survey on this topic .    for the simple polygon case , in which @xmath0 is a single simple polygon , all three types of problems have been solved optimally @xcite , in both the euclidean and @xmath3 metrics .",
    "specifically , an @xmath41-size data structure can be built in @xmath41 time that answers each two - point euclidean shortest path query in @xmath27 time @xcite . since in a simple polygon",
    "a euclidean shortest path is also an @xmath3 shortest path @xcite , the results in @xcite hold for the @xmath3 metric as well .",
    "the polygonal domain case ( or `` a polygon with holes '' ) , in which @xmath0 has @xmath1 obstacles as defined above , is more difficult . for the euclidean metric",
    ", hershberger and suri @xcite built a _ single source shortest path map _ of size @xmath42 in @xmath42 time that answers each query in @xmath27 time .",
    "for the @xmath3 metric , mitchell @xcite built an @xmath41-size single source shortest path map in @xmath42 time that answers each query in @xmath27 time .",
    "later , chen and wang @xcite built an @xmath3 single source shortest path map of size @xmath41 in @xmath43 time , with an @xmath27 query time , for a triangulated free space ( the current best triangulation algorithm takes @xmath44 time for any constant @xmath16 @xcite ) . for two - point @xmath3 shortest path queries , chen @xcite gave the previously best solution , as mentioned above ; for a special case where the obstacles are rectangles , elgindy and mitra @xcite gave an @xmath45 size data structure that supports @xmath27 time queries . for two - point queries in the euclidean metric ,",
    "chiang and mitchell @xcite constructed a data structure of size @xmath17 that answers each query in @xmath27 time , and alternatively , a data structure of size @xmath46 with an @xmath9 query time ; other data structures with trade - off between preprocessing and query time were also given in @xcite . if the query points @xmath4 and @xmath5 are both restricted to the boundaries of the obstacles of @xmath0 , bae and okamato @xcite built a data structure of size @xmath47 that answers each query in @xmath27 time , where @xmath48 is a polylogarithmic factor .",
    "efficient algorithms were also given for the case when the obstacles have curved boundaries @xcite .",
    "for the weighted region case , in which the  obstacles \" allow paths to pass through their interior with weighted costs , mitchell and papadimitriou @xcite gave an algorithm that finds a weighted euclidean shortest path in a time of @xmath49 times a factor related to the precision of the problem instance .",
    "for the weighted rectilinear case , lee @xcite presented two algorithms for finding a weighted @xmath3 shortest path , and chen @xcite gave an improved algorithm with @xmath50 time and @xmath42 space .",
    "chen @xcite also presented a data structure for two - point weighted @xmath3 shortest path queries among weighted rectilinear obstacles , as mentioned above .",
    "our first main idea is to propose an enhanced graph model based on the scheme in @xcite , to reduce the query time from @xmath9 to @xmath27 . in @xcite , to build a graph , a total of @xmath2 vertical lines ( called `` cut - lines '' ) are created recursively in @xmath27 levels .",
    "then , each obstacle vertex @xmath51 is projected to @xmath27 cut - lines ( one cut - line per level ) to create `` steiner points '' if @xmath51 is horizontally visible to such cut - lines .",
    "for any two query points @xmath4 and @xmath5 , to report an @xmath3 shortest  path , the algorithm in @xcite finds @xmath27 steiner points ( called `` gateways '' ) on @xmath27 cut - lines for each of @xmath4 and @xmath5 , such that there must be a shortest  path containing a gateway of @xmath4 and a gateway of @xmath5 .",
    "consequently , a shortest path is obtained in @xmath9 time using the @xmath27 gateways of @xmath4 and @xmath5 .",
    "we propose an enhanced graph @xmath52 by adding more steiner points onto the cut - lines such that we need only @xmath53 gateways for any query points , and consequently , computing the shortest path length takes @xmath27 time .",
    "more specifically , for each obstacle vertex , instead of projecting it to a single vertical cut - line at each level , we project it to @xmath54 cut - lines in every @xmath53 consecutive levels ( thus creating @xmath54 steiner points ) ; in fact , these cut - lines form a binary tree structure of height @xmath53 and they are carefully chosen to ensure that @xmath53 gateways are sufficient for any query point . hence , the size of the graph @xmath52 is @xmath55 . to improve the data structure construction so that its time and space bounds depend linearly on @xmath2 , we utilize the extended corridor structure @xcite , which partitions the free space of @xmath0 into an `` ocean '' @xmath56 , and multiple `` bays '' and `` canals '' .",
    "we build a graph @xmath57 of size @xmath58 on @xmath56 similar to @xmath52 , such that if both query points are in @xmath56 , then the query can be answered in @xmath27 time .",
    "it remains to deal with the general case when at least one query point is not in @xmath56 .",
    "this is a major difficulty in our problem and our algorithm for this case is another of our main contributions .",
    "below , we use a bay as an example to illustrate our main idea for this algorithm .    for",
    "two query points @xmath4 and @xmath5 , suppose @xmath4 is in a bay @xmath59 and @xmath5 is outside @xmath59 .",
    "since @xmath59 is a simple polygon , any shortest  path must cross the `` gate '' @xmath60 of @xmath59 , which is a single edge shared by @xmath59 and @xmath56 .",
    "we prove that there exists a shortest  path that must contain one of three special points @xmath61 , @xmath62 , and @xmath63 , where @xmath61 is in @xmath59 and the other two points are on @xmath60 ( and thus in @xmath56 ) . for the case when a shortest  path contains either @xmath62 or @xmath63",
    ", we can use the graph @xmath57 to find such a shortest path .",
    "for the other case , we build another graph @xmath64 based on the horizontal projections of the vertices of @xmath57 on @xmath60 , and use @xmath64 to find such a shortest path ( along with a set of interesting observations ) by a merge of @xmath64 and @xmath57 .",
    "intuitively , @xmath64 plays the role of connecting the shortest path structure inside @xmath59 with those in @xmath56 .",
    "the case when a query point is in a canal can be handled similarly in spirit , although it is more complicated because each canal has two gates .",
    "the rest of the paper is organized as follows . in section [ sec : pre ] , we introduce some notations and sketch the previous results that will be needed by our algorithms . in section [ sec : newgraph ] , we propose our enhanced graph @xmath52 that helps reduce the query time to @xmath27 . in section",
    "[ sec : obstacle ] , we further reduce the preprocessing time and space by using the extended corridor structure . in section [ sec : weighted ] , we extend our techniques in section [ sec : newgraph ] to the weighted rectilinear case . henceforth ,",
    "unless otherwise stated , `` shortest paths '' always refer to @xmath3 shortest paths and `` distances '' and `` lengths '' always refer to @xmath3 distances and lengths . to distinguish from graphs , the vertices / edges of @xmath0",
    "are always referred to as obstacle vertices / edges , and graph vertices are referred to as `` nodes '' . for simplicity of discussion , we make a general position assumption that no two obstacle vertices have the same @xmath65- or @xmath66-coordinate except for the weighted rectilinear case .",
    "a path in the plane is _ @xmath65-monotone _ ( resp . , _ @xmath66-monotone _ ) if its intersection with any vertical ( resp .",
    ", horizontal ) line is either empty or connected .",
    "a path is _",
    "@xmath67-monotone _ if it is both _",
    "@xmath65-monotone _ and _ @xmath66-monotone_. it is well - known that any @xmath67-monotone path is an @xmath3 shortest path .",
    "a point @xmath68 is _ visible _ to another point @xmath69 if the line segment @xmath70 entirely is in the free space .",
    "a point @xmath68 is _ horizontally _ _ visible _ to a line @xmath71 if there is a point @xmath69 on @xmath71 such that @xmath70 is horizontal and is in the free space . for a line @xmath71 and a point @xmath68 ,",
    "the point @xmath72 is the _ horizontal _ _ projection _ of @xmath68 on @xmath71 if @xmath70 is horizontal , and we denote it by @xmath73 .",
    "let @xmath74 denote the boundaries of all obstacles in @xmath0 .",
    "for a point @xmath68 in the free space of @xmath0 , if we shoot a horizontal ray from @xmath68 to the left , the first point on @xmath74 hit by the ray is called the _ leftward projection _ of @xmath68 on @xmath74 , denoted by @xmath75 ; similarly , we define the _ rightward , upward _ , and _ downward _ projections of @xmath68 on @xmath74 , denoted by @xmath76 , @xmath77 , and @xmath78 , respectively .",
    "we sketch the graph in @xcite , denoted by @xmath79 , for answering two - point queries , which was originally proposed in @xcite for computing a single shortest path . to define @xmath79 ,",
    "two types of _ steiner points _ are specified , as follows . for each obstacle",
    "vertex @xmath68 , its four projections on @xmath74 , i.e. , @xmath80 , and @xmath78 , are _ type-1 _ steiner points . clearly , there are @xmath41 type-1 steiner points in total",
    "type-2 steiner points _ are on _ cut - lines_. in order to facilitate an explanation on our new graph model in section [ sec : newgraph ] , we organize the cut - lines in a binary tree structure , called the _ cut - line tree _ and denoted by @xmath81 . the tree @xmath81 is defined as follows . for each node @xmath82 of @xmath81 , a set @xmath83 of obstacle vertices and a cut - line @xmath84 are associated with @xmath82 , where @xmath84 is a vertical line through the median of the @xmath65-coordinates of the obstacle vertices in @xmath83 . for the root @xmath85 of @xmath81",
    ", @xmath86 is the set of all obstacle vertices of @xmath0 .",
    "for the left ( resp .",
    ", right ) child @xmath51 of @xmath82 , @xmath87 consists of the obstacle vertices of @xmath83 on the left ( resp .",
    ", right ) of @xmath84 .",
    "since the number of vertices of @xmath0 is @xmath2 , the height of @xmath81 is @xmath27 . for every node @xmath82 of @xmath81 , for each vertex @xmath88 , if @xmath68 is horizontally visible to @xmath84 , then the point @xmath89 , i.e. , the horizontal projection of @xmath68 on @xmath84 , is a type-2 steiner point . since each obstacle vertex defines a type-2 steiner point on at most one cut - line at each level of @xmath81 , there are @xmath42 type-2 steiner points .",
    "the node set of @xmath79 consists of all obstacle vertices of @xmath0 and all steiner points thus defined .",
    "the edges of @xmath79 are defined as follows .",
    "first , for every obstacle vertex @xmath68 , there is an edge @xmath70 in @xmath79 for each @xmath90 .",
    "second , for every obstacle edge @xmath91 of @xmath0 , @xmath91 may contain multiple type-1 steiner points , and these steiner points and the two endpoints of @xmath91 are the nodes of @xmath79 on @xmath91 ; the segment connecting each pair of consecutive graph nodes on @xmath91 defines an edge in @xmath79 .",
    "third , for each cut - line @xmath71 , any two consecutive type-2 steiner points on @xmath71 define an edge in @xmath79 if these two points are visible to each other .",
    "finally , for each obstacle vertex @xmath68 , if @xmath68 defines a type-2 steiner point @xmath92 on a cut - line , then @xmath93 defines an edge in @xmath79 .",
    "clearly , @xmath79 has @xmath42 nodes and @xmath42 edges .",
    "it was shown in @xcite that @xmath79 contains a shortest path between any two obstacle vertices .",
    "chen @xcite used @xmath79 to answer two - point queries by `` inserting '' the query points @xmath4 and @xmath5 into @xmath79 so that shortest  paths are `` controlled '' by only @xmath27 nodes of @xmath79 , called `` gateways '' .",
    "the gateways of @xmath4 are defined as follows . intuitively , the gateways of @xmath4 are those nodes of @xmath79 that would be adjacent to @xmath4 if we had built @xmath79 by treating @xmath4 as an obstacle vertex .",
    "let @xmath94 be the set of gateways of @xmath4 , which we further partition into two subsets @xmath95 and @xmath96 .",
    "we first define @xmath95 , whose size is @xmath97 . for each @xmath98 , let @xmath99 and @xmath100 be the two graph nodes adjacent to @xmath69 on the obstacle edge containing @xmath69 ; then @xmath99 and @xmath100 are in @xmath95 , and the paths @xmath101 and @xmath102 are the _ gateway edges _ from @xmath4 to @xmath99 and @xmath100 , respectively .",
    "next , we define @xmath96 , recursively , on the cut - line tree @xmath81 .",
    "let @xmath51 be the root of @xmath81 .",
    "suppose @xmath4 is horizontally visible to the cut - line @xmath103 .",
    "let @xmath69 be the steiner point on @xmath103 immediately above ( resp .",
    ", below ) the projection point @xmath104 ; if @xmath69 is visible to @xmath104 , then @xmath69 is in @xmath96 and the path @xmath105 is the gateway edge from @xmath4 to @xmath69 .",
    "we also call @xmath103 a _ projection cut - line _ of @xmath4 if @xmath4 is horizontally visible to @xmath103 .",
    "we proceed to the left ( resp . , right )",
    "child of @xmath51 in @xmath81 if @xmath4 is to the left ( resp .",
    ", right ) of @xmath103 .",
    "we continue in this way until reaching a leaf of @xmath81 .",
    "therefore , @xmath96 contains @xmath27 type-2 steiner points on @xmath27 projection cut - lines .",
    "the above defines the gateway set @xmath94 , and each gateway @xmath106 is associated with a gateway edge between @xmath4 and @xmath69 . henceforth , when we say `` a path from @xmath4 contains a gateway @xmath69 '' , we implicitly mean that the path contains the corresponding gateway edge as well .",
    "the above also defines @xmath27 projection cut - lines for @xmath4 , which will be used later in section [ sec : newgraph ] .",
    "it was shown in @xcite that for any obstacle vertex @xmath51 , there is a shortest @xmath4-@xmath51 path using @xmath79 that contains a gateway of @xmath4 .",
    "similarly , we define the gateway set @xmath107 for @xmath5 .",
    "assume that there is a shortest  path containing an obstacle vertex .",
    "then , there must be a shortest  path that contains a gateway @xmath108 , a gateway @xmath109 , and a shortest path from @xmath110 to @xmath111 in the graph @xmath79 @xcite . based on this result , a _ gateway graph _",
    "@xmath112 is built for the query on @xmath4 and @xmath5 , as follows .",
    "the node set of @xmath112 is @xmath113 .",
    "its edge set consists of all gateway edges and the edges @xmath114 for each @xmath108 and each @xmath109 , where the weight of @xmath114 is the length of a shortest path from @xmath110 to @xmath111 in @xmath79 .",
    "hence , @xmath112 has @xmath27 nodes and @xmath9 edges , and if we know the weights of all edges @xmath114 , then a shortest  path in @xmath112 can be found in @xmath9 time . to obtain the weights of all edges @xmath114 ,",
    "we compute a single source shortest path tree in @xmath79 from each node of @xmath79 in the preprocessing .",
    "then , the weight of each such edge @xmath114 is obtained in @xmath97 time .",
    "further , suppose we find a shortest  path in @xmath112 that contains a gateway @xmath115 and a gateway @xmath109 ; then we can report an actual shortest  path in time linear to the number of edges of the output path by using the shortest path tree from @xmath110 in @xmath79 ( which has been computed in the preprocessing ) .    as discussed in @xcite , it is possible that no shortest  path contains any obstacle vertex .",
    "for example , consider a projection point @xmath116 of @xmath4 and a projection point @xmath117 of @xmath5 .",
    "if @xmath118 intersects @xmath119 , say at a point @xmath69 , then @xmath120 is a shortest  path ; otherwise , if @xmath116 and @xmath117 are both on the same obstacle edge , then @xmath121 is a shortest  path .",
    "we call such shortest  paths _ trivial shortest paths_. similarly , trivial shortest  paths can also be defined by other projection points in @xmath122 and @xmath123 . it was shown in @xcite that if there is no trivial shortest  path , then there exists a shortest  path that contains an obstacle vertex .",
    "if we know @xmath122 and @xmath123 , then we can determine whether there exists a trivial shortest  path in @xmath97 time .",
    "for any query points @xmath4 and @xmath5 , their projection points can be computed easily in @xmath27 time by using the horizontal and vertical visibility decompositions of @xmath0 , as shown in @xcite .",
    "in this section , we propose an `` enhanced graph '' @xmath52 that allows us to reduce the query time to @xmath27 , although @xmath52 has a larger size than @xmath79 .",
    "we first define @xmath52 , and then show how to answer two - point queries by using @xmath52 .      on the nodes of @xmath52 , first",
    ", every node of @xmath79 is also a node in @xmath52 .",
    "in addition , @xmath52 contains the following _ type-3 _ steiner points as nodes . to define the type-3 steiner points",
    ", we introduce the concepts of `` levels '' and `` super - levels '' on the cut - line tree @xmath81 defined in section [ sec : pre ] .",
    "@xmath81 has @xmath27 levels .",
    "we define the level numbers recursively : the root @xmath51 is at the first level , and its _ level number _ is denoted by @xmath124 @xmath125 @xmath126 ; for any node @xmath51 of @xmath81 , if @xmath82 is a child of @xmath51 , then @xmath127 . we further partition the @xmath27 levels of @xmath81 into @xmath128 _ super - levels _ : for any @xmath129 , @xmath130 , the @xmath129-th super - level contains the levels from @xmath131 to @xmath132 .    , i.e. , the portion of the tree in the dotted box , where @xmath133 . ]    consider the @xmath129-th super - level .",
    "let @xmath82 be any node at the highest level ( i.e. , the level with the smallest level number ) of this super - level .",
    "let @xmath134 denote the subtree of @xmath81 rooted at @xmath82 without including any node outside the @xmath129-th super - level ( e.g. , see fig .",
    "[ fig : type3 ] and its corresponding cut - lines and level numbers in fig .",
    "[ fig : levelno ] ) .",
    "since @xmath134 has @xmath53 levels , @xmath134 has @xmath54 nodes .",
    "recall that @xmath82 is associated with a subset @xmath83 of obstacle vertices and a vertical cut - line @xmath84 , and for any vertex @xmath68 in @xmath83 , if @xmath68 is horizontally visible to @xmath84 , then its projection point @xmath89 is a type-2 steiner point .",
    "each point @xmath88 defines the following type-3 steiner points . for each node @xmath51 in @xmath134 , if @xmath68 is horizontally visible to @xmath103 , then its projection point @xmath135 is a type-3 steiner point ( e.g. , see fig .",
    "[ fig : levelno ] ; note that if @xmath136 , then the steiner point is also a type-2 steiner point ) .",
    "hence , @xmath68 defines @xmath54 type-3 steiner points in the @xmath129-th super - level of @xmath81 .",
    "let @xmath137 be the set of all type-2 and type-3 steiner points on the cut - lines of the subtree @xmath134 induced by @xmath68 , and let @xmath137 also contain @xmath68 . in the order of the points in @xmath137 from left to right",
    ", we put an edge in @xmath52 connecting every two consecutive points in @xmath137 ( e.g. , see fig .",
    "[ fig : levelno ] ) .",
    "since the total number of obstacle vertices in @xmath83 for all nodes @xmath82 at the same level of @xmath81 is @xmath2 , the number of type-3 steiner points thus defined in each super - level is @xmath138 , and the total number of type-3 steiner points on all cut - lines in @xmath81 is @xmath55 .",
    "the number of edges thus added to @xmath52 is also @xmath55 .",
    "hence , the total number of nodes in @xmath52 is @xmath139 , which is dominated by the number of type-3 steiner points .",
    "we have also defined above some edges in @xmath52 .",
    "the rest of edges in @xmath52 are defined similarly as in @xmath79 .",
    "specifically , first , as in @xmath79 , for every obstacle vertex @xmath68 , there is an edge @xmath70 in @xmath52 for each @xmath90 .",
    "second , as in @xmath79 , for each obstacle edge @xmath91 , @xmath91 may contain multiple type-1 steiner points ; the segment connecting each pair of consecutive graph nodes on @xmath91 defines an edge in @xmath52 .",
    "third , for each cut - line @xmath71 , every pair of consecutive steiner points ( type-2 or type-3 ) on @xmath71 defines an edge in @xmath52 if these two points are visible to each other . clearly , the total number of edges in @xmath52 is @xmath139 .     in fig .",
    "[ fig : type3 ] , where @xmath140 is the level number @xmath141 of the node @xmath82 .",
    "@xmath68 is an obstacle vertex . if @xmath68 is visible to all cut - lines , then the red points are type-2 and type-3 steiner points defined by @xmath68 and the ( red ) dotted segments are the corresponding graph edges . ]",
    "this finishes the definition of our enhanced graph @xmath52 , which has @xmath55 nodes and @xmath55 edges .",
    "the following lemma gives an algorithm for computing @xmath52 .",
    "[ lem:10 ] the enhanced graph @xmath52 can be constructed in @xmath142 time .",
    "first of all , all type-1 steiner points are computed easily in @xmath42 time , e.g. , by using the vertical and horizontal visibility decompositions of @xmath0 .",
    "the edges of @xmath52 connecting the obstacle vertices and their corresponding type-1 steiner points can also be computed . for each obstacle edge @xmath91 , we sort all graph nodes on @xmath91 and then compute the edges of @xmath52 connecting the consecutive nodes on @xmath91 . since there are @xmath41 type-1 steiner points , computing these edges takes @xmath42 time .",
    "next , we compute both the type-2 and type-3 steiner points and their adjacent edges . for this",
    ", we need to use the two projection points @xmath75 and @xmath76 for each obstacle vertex @xmath68 of @xmath0 , which have been computed as type-1 steiner points .",
    "consider an obstacle vertex @xmath68 in @xmath83 for a node @xmath82 at the highest level of a super - level .",
    "for each node @xmath51 in @xmath134 , we need to determine whether @xmath68 is horizontally visible to @xmath103 , which can be done in @xmath97 time since @xmath75 and @xmath76 are already known .",
    "we also need to have a sorted order of all cut - lines in @xmath134 from left to right , and this ordered list can be obtained by an in - order traversal of @xmath134 in linear time .",
    "therefore , the edges of @xmath52 connecting the steiner points defined by @xmath68 on consecutive cut - lines in this super - level can be computed in time linear to the number of nodes in @xmath134 .",
    "since there are @xmath55 type-2 and type-3 steiner points , computing all such edges takes @xmath139 time .",
    "it remains to compute the graph edges on all cut - lines connecting consecutive steiner points ( if they are visible to each other ) .",
    "this step is done in @xmath142 time by a sweeping algorithm , as follows . for each cut - line @xmath71 ,",
    "we sort the steiner points on @xmath71 by their @xmath66-coordinates , and determine whether every two consecutive steiner points on @xmath71 are visible to each other . for this",
    ", we sweep a vertical line @xmath143 from left to right . during the sweeping ,",
    "we use a balanced binary search tree @xmath144 to maintain the maximal intervals of @xmath143 that are in the free space of @xmath0 ( there are @xmath41 such intervals ) . at each obstacle",
    "vertex , we update @xmath144 in @xmath27 time . at each ( vertical ) cut - line @xmath71 , for every two consecutive steiner points",
    ", we determine whether they are visible to each other in @xmath27 time by checking whether they are in the same maximal interval maintained by @xmath144 .",
    "since there are @xmath55 pairs of consecutive steiner points on all cut - lines , computing all edges of @xmath52 on the cut - lines takes totally @xmath142 time .",
    "another approach for computing these edges in @xmath145 time is to perform vertical ray - shootings from all steiner points ( we omit the details ) .    in summary ,",
    "the enhanced graph @xmath52 can be computed in @xmath142 time .",
    "we use the enhanced graph @xmath52 to reduce the query time to @xmath27 . consider two query points @xmath4 and @xmath5 .",
    "one of our key ideas is : we define a new set of gateways for @xmath4 , denoted by @xmath146 , which contains @xmath53 nodes of @xmath52 , such that for any obstacle vertex @xmath68 of @xmath0 , there exists a shortest path from @xmath4 to @xmath68 through a gateway of @xmath146 .",
    "the set @xmath146 can be divided into two subsets @xmath147 and @xmath148 , where @xmath147 ( of size @xmath97 ) is exactly the same as @xmath95 defined on @xmath79 in section [ sec : pre ] .",
    "below , we define the subset @xmath148 .    recall that @xmath4 has @xmath27 projection cut - lines , as defined in section [ sec : pre ] . by definition , @xmath4 is horizontally visible to all its projection cut - lines .",
    "since @xmath52 has more steiner points than @xmath149 , the intuition is that we do not have to include gateways in each projection cut - line of @xmath4 .",
    "more specifically , we only need to include gateways in two projection cut - lines in each super - level ( one to the left of @xmath4 and the other to the right of @xmath4 ) .",
    "the details are given below .",
    "we define the _ relevant projection cut - lines _ of @xmath4 , as follows .",
    "let @xmath150 be the set of projection cut - lines of @xmath4 to the right of @xmath4 .",
    "consider a cut - line @xmath151 and suppose @xmath71 is associated with a node @xmath82 in the @xmath129-th super - level of the cut - line tree @xmath81 for some @xmath129 .",
    "then @xmath71 is a _ relevant projection cut - line _ of @xmath4 if @xmath152 ( i.e. , their level numbers ) for every node @xmath51 with @xmath153 in the @xmath129-th super - level of @xmath81 such that the cut - line @xmath103 of @xmath51 is also in @xmath150 . in other words",
    ", @xmath84 is a relevant projection cut - line of @xmath4 if @xmath82 has the largest distance in @xmath81 from the root among all nodes @xmath51 in the @xmath129-th super - level of @xmath81 whose cut - lines @xmath103 are in @xmath150 .",
    "for example , in fig .",
    "[ fig : type3 ] and fig .",
    "[ fig : levelno ] , suppose @xmath4 is between the cut - lines @xmath154 and @xmath155 and both @xmath84 and @xmath155 are horizontally visible to @xmath4 ; then among the cut - lines of all nodes in @xmath134 , only @xmath155 and @xmath84 are in @xmath150 , but only @xmath155 is the relevant projection cut - line of @xmath4 .",
    "the relevant projection cut - lines of @xmath4 to the left of @xmath4 are defined similarly . since @xmath4 has @xmath156 projection cut - lines and any two of them are at different levels of @xmath81 , the number of relevant projection cut - lines of @xmath4 is @xmath53 , i.e. , at most two from each super - level of @xmath81 ( one to the left of @xmath4 and the other to the right of @xmath4 ) . for each relevant projection cut - line @xmath71 of @xmath4 , the steiner point @xmath68 ( if any ) immediately above ( resp .",
    ", below ) the projection point @xmath157 of @xmath4 on @xmath71 is in @xmath148 if @xmath68 is visible to @xmath157 .",
    "thus , @xmath158 .",
    "@xmath146 thus defined is of size @xmath53 .",
    "we also define the gateway edge for each gateway of @xmath146 and @xmath4 in the same way as in section [ sec : pre ] .",
    "below , when we say a shortest path from @xmath4 containing a gateway , we mean the path containing the corresponding gateway edge as well .",
    "[ lem:20 ] for any obstacle vertex @xmath68 of @xmath0 , there exists a shortest path from @xmath4 to @xmath68 using @xmath52 that contains a gateway of @xmath4 in @xmath146 .",
    "recall that @xmath94 is the gateway set of @xmath4 defined on @xmath79 in section [ sec : pre ] , and by @xcite , there exists a shortest path @xmath159 from @xmath4 to @xmath68 using @xmath79 that contains a point @xmath160 .    by the definition of @xmath52 ,",
    "if any edge @xmath91 of @xmath79 connecting two nodes @xmath82 and @xmath51 is not an edge of @xmath52 , then @xmath91 can be viewed as being  divided \" into many edges in @xmath52 such that the concatenation of these edges is a path from @xmath82 to @xmath51 in @xmath52 with the same length as @xmath91 .",
    "hence , @xmath159 is still a shortest path along @xmath52 . for any point @xmath161 that is on a shortest @xmath4-@xmath68 path ,",
    "we call it a _ via point_. if any via point @xmath140 is in @xmath95 , then @xmath140 is in @xmath146 since @xmath162 , and we are done",
    ". otherwise , all via points must be in @xmath96 .",
    "if any such via point @xmath163 is also in @xmath148 , then we are done as well .",
    "it remains to prove for the case that for every via point @xmath140 , @xmath163 and @xmath164 hold .",
    "recall that every node of @xmath79 , including each via point @xmath140 , is also a node of @xmath52 .",
    "below , we find an @xmath67-monotone path from @xmath4 to such a via point @xmath140 along @xmath52 that contains a gateway @xmath165 .",
    "since any @xmath67-monotone path is a shortest path , this gives a shortest @xmath4-@xmath68 path ( through @xmath140 ) containing a gateway @xmath166 of @xmath4 in @xmath146 , thus proving the lemma .    without loss of generality , we assume that @xmath140 is to the right of @xmath4 and above @xmath4 ( i.e. , @xmath140 is to the northeast of @xmath4 , see fig .",
    "[ fig : gatewayproof ] ) .",
    "suppose @xmath140 is on the cut - line @xmath103 of a node @xmath51 in the @xmath129-th super - level of @xmath81 .",
    "if @xmath103 is a relevant cut - line of @xmath4 , then there must be a gateway @xmath166 of @xmath4 in @xmath148 lying in the vertical segment @xmath167 on @xmath103 ( possibly @xmath168 ) , and thus we are done . otherwise , @xmath103 is not a relevant cut - line of @xmath4 , and there exists a relevant cut - line @xmath169 of @xmath4 to the right of @xmath4 such that @xmath170 is in the @xmath129-th super - level of @xmath81 and @xmath171 .",
    "next , we show that the sought gateway @xmath166 lies on @xmath169 .",
    "it was shown in @xcite ( lemma 3.4 ) that the level numbers of the projection cut - lines of @xmath4 to the right of @xmath4 , in the left - to - right order , are decreasing .",
    "this observation can also be seen easily by considering the projection cut - lines of @xmath81 in a top - down manner . hence , @xmath169 is to the left of @xmath103 ( see fig .  [",
    "fig : gatewayproof ] ) .",
    "let @xmath69 be the obstacle vertex that defines the steiner point @xmath140 on @xmath103 . by our definition of steiner points",
    ", @xmath69 must be in @xmath83 for the node @xmath82 that is the highest ancestor of @xmath51 ( and @xmath170 ) in the @xmath129-th super - level .",
    "therefore , if @xmath69 is horizontally visible to @xmath169 , then @xmath69 also defines a steiner point on @xmath169 .",
    "we now show that @xmath69 is horizontally visible to @xmath169 , and for this , it suffices to prove that @xmath140 is horizontally visible to @xmath169 since @xmath69 is horizontally visible to @xmath140 . because @xmath172 and no via point is in @xmath95 ,",
    "it was shown in @xcite that @xmath140 must be horizontally visible to the vertical line through @xmath4 .",
    "since @xmath169 is between @xmath4 and @xmath173 , @xmath140 is also horizontally visible to @xmath169 .    :",
    "@xmath69 is the obstacle vertex that defines the steiner point @xmath140 ; @xmath169 is between @xmath4 and @xmath103 . ]",
    "thus , @xmath69 defines a steiner point on @xmath169 , i.e. , the point @xmath174 ( see fig .  [",
    "fig : gatewayproof ] ) . by the definition of @xmath148 , the lowest steiner point @xmath166 on @xmath169 above @xmath4 must be a gateway in @xmath148 .",
    "note that @xmath166 may or may not be @xmath174 , but @xmath166 can not be higher than @xmath174 .",
    "thus , the concatenation of the gateway edge from @xmath4 to @xmath166 , @xmath175 , and @xmath176 , which is an @xmath67-monotone path from @xmath4 to @xmath140 using @xmath52 , contains the gateway @xmath166 of @xmath148 .",
    "the lemma thus follows .",
    "similarly , we define the gateway set @xmath177 for @xmath5 in @xmath52 .",
    "the similar result for @xmath5 as lemma [ lem:20 ] for @xmath4 also holds .",
    "thus , we have the following corollary .    [ cor:10 ]",
    "if there exists a shortest  path through an obstacle vertex of @xmath0 , then there exists a shortest  path through a gateway of @xmath4 in @xmath146 and a gateway of @xmath5 in @xmath177 .",
    "next , we give an algorithm for computing the two gateway sets @xmath146 and @xmath177 .",
    "[ lem:30 ] with a preprocessing of @xmath178 time and @xmath55 space , we can compute the gateway sets @xmath146 and @xmath177 in @xmath27 time for any query points @xmath4 and @xmath5 .",
    "we only discuss the case for computing @xmath146 since @xmath177 can be computed similarly .",
    "to compute @xmath147 , it suffices to determine the four projection points @xmath122 of @xmath4 on @xmath74 , which can be computed in @xmath27 time by using the horizontal and vertical visibility decompositions of @xmath0 .",
    "these two visibility decompositions can be built in @xmath42 time by standard sweeping algorithms .",
    "after that , we also need to build a point location data structure @xcite on each of the two decompositions in additional @xmath41 time .    to compute @xmath148",
    ", it might be possible to modify the approach in @xcite .",
    "however , to explain the approach in @xcite , we may have to review a number of observations given in @xcite . to avoid a tedious discussion , we propose the following algorithm that is simple .",
    "we first obtain the set @xmath150 of all relevant projection cut - lines of @xmath4 .",
    "this can be done in @xmath27 time by following the cut - line tree @xmath81 from the root and using @xmath179 and @xmath116 to determine the horizontal visibility of @xmath4 .",
    "note that the cut - lines of @xmath150 are at some nodes on a path from the root to a leaf . to obtain @xmath148 , for each cut - line @xmath151 , we need to : ( 1 ) find the steiner point @xmath68 on @xmath71 immediately above ( resp . , below ) @xmath157 , and ( 2 ) determine whether @xmath68 is visible to @xmath157 .",
    "consider a cut - line @xmath151 .",
    "let @xmath180 and @xmath181 be the two gateways of @xmath148 on @xmath71 ( if any ) such that @xmath180 is above @xmath181 .",
    "that is , @xmath180 ( resp . , @xmath181 )",
    "is the steiner point on @xmath71 immediately above ( resp . , below ) @xmath157 and visible to @xmath157 .",
    "if we maintain a sorted list of all steiner points on @xmath71 , then @xmath180 and @xmath181 can be found by binary search on the sorted list .",
    "however , there are two issues with this approach . first , if we do binary search on each cut - line of @xmath150 , since @xmath182 , it takes @xmath183 time on all cut - lines of @xmath150 .",
    "second , even if we find @xmath180 and @xmath181 , we still need to check whether @xmath157 is visible to them . to resolve these two issues ,",
    "we take the following approach .    for",
    "every steiner point @xmath68 on the cut - line @xmath71 , suppose we associate with @xmath68 its upward and downward projection points @xmath184 and @xmath185 on @xmath74 . then once we find the steiner point @xmath69 on @xmath71 immediately above ( resp .",
    ", below ) @xmath157 , we can determine easily whether @xmath69 is visible to @xmath157 using @xmath186 and @xmath187 ; if @xmath69 is visible to @xmath157 , then @xmath188 ( resp . , @xmath189 ) , or else @xmath180 ( resp .",
    ", @xmath181 ) does not exist . for any steiner point @xmath68 on @xmath71 , @xmath75 and @xmath76",
    "can be found in @xmath27 time by using the vertical visibility decomposition of @xmath0 .",
    "since there are @xmath55 steiner points @xmath68 on all cut - lines of @xmath81 , their projection points @xmath77 and @xmath78 can be computed in totally @xmath178 time .",
    "next , for each cut - line @xmath71 , we sort all steiner points on @xmath71 . with this",
    ", one can compute all gateways of @xmath190 in @xmath9 time by doing binary search on each relevant projection cut - line of @xmath4 . to reduce the query time to @xmath27",
    ", we make use of the fact that all relevant projection cut - lines of @xmath4 are at the nodes on a path of @xmath81 from the root to a leaf .",
    "we build a fractional cascading structure @xcite on the sorted lists of steiner points on all cut - lines along @xmath81 , such that the searches on all cut - lines at the nodes on any path of @xmath81 from the root to a leaf take @xmath27 time .",
    "hence , all gateways of @xmath190 can be computed in @xmath27 time . since the total number of steiner points in the sorted lists of all cut - lines of @xmath81 is @xmath55 , the fractional cascading structure",
    "can be built in @xmath55 space and @xmath178 time .",
    "the lemma thus follows .",
    "[ theo:10 ] we can build a data structure of size @xmath37 in @xmath191 time that can answer each two - point @xmath3 shortest path query in @xmath27 time ( i.e. , for any two query points @xmath4 and @xmath5 , the length of a shortest  path can be found in @xmath27 time and an actual path can be reported in additional time linear to the number of edges of the output path ) .    in the preprocessing",
    ", we first build the graph @xmath52 .",
    "then , for each node @xmath51 of @xmath52 , we compute a shortest path tree in @xmath52 from @xmath51 .",
    "we also maintain a shortest path length table such that for any two nodes @xmath82 and @xmath51 , the shortest @xmath82-@xmath51 path length in @xmath52 can be obtained in @xmath97 time .",
    "since @xmath52 is of a size @xmath55 , computing and maintaining all these shortest path trees in @xmath52 take @xmath192 space and @xmath193 time .",
    "we also do the preprocessing for lemma [ lem:30 ] .    given any two query points @xmath4 and @xmath5 , we first check whether there is a trivial shortest  path , as discussed in section [ sec : pre ] , in @xmath27 time by using the algorithm in @xcite ( with an @xmath42 time preprocessing ) .",
    "if there is a trivial shortest  path , then we are done .",
    "otherwise , there must be a shortest  path that contains an obstacle vertex of @xmath0 .",
    "then , we first compute the gateway sets @xmath146 and @xmath177 in @xmath27 time by lemma [ lem:30 ] .",
    "finally , we determine the shortest @xmath4-@xmath5 path length by using the gateway graph as discussed in section [ sec : pre ] , in @xmath27 time , since there are @xmath53 gateways and thus the gateway graph has @xmath53 nodes and @xmath27 edges .",
    "we can also report an actual shortest  path in additional time linear to the number of edges of the output path by using the shortest path trees of @xmath52 .",
    "this proves the theorem .",
    "in this section , we improve the preprocessing in theorem [ theo:10 ] to @xmath194 space and @xmath195 time , while maintaining the @xmath27 query time . for this",
    ", we shall make use of the extended corridor data structure @xcite , and more importantly , explore a number of new observations , which may be interesting in their own right .",
    "the corridor structure has been used to solve shortest path problems ( e.g. , @xcite ) , and new concepts like `` ocean '' , `` bays '' , and `` canals '' have been introduced @xcite , which we refer to as the `` extended corridor structure '' . this structure is a subdivision of the free space on which algorithms for specific problems rely . while the extended corridor structure itself is relatively simple , the main difficulty is to design efficient algorithms to exploit it . in some sense ,",
    "the role played by the extended corridor structure is similar to that of triangulations for many geometric algorithms .",
    "we briefly review the extended corridor structure in section [ subsec : extended ] , since our presentation uses many notations introduced in it .      for simplicity of discussion , we assume that the obstacles of @xmath0 are all contained in a rectangle @xmath196 .",
    "let @xmath197 denote the free space in @xmath196 , and @xmath198 denote a triangulation of @xmath197 ( see fig .",
    "[ fig : triangulation ] ) .",
    "the line segments of @xmath198 that are not obstacle edges are referred to as _",
    "diagonals_.    let @xmath199 denote the dual graph of @xmath198 , i.e. , each node of @xmath199 corresponds to a triangle of @xmath198 and each edge connects two nodes corresponding to two triangles sharing a diagonal of @xmath198 . based on @xmath199 , we compute a planar 3-regular graph , denoted by @xmath200 ( the degree of every node in @xmath200 is three ) , possibly with loops and multi - edges , as follows . first , we remove each degree - one node from @xmath199 along with its incident edge ; repeat this process until no degree - one node remains in the graph .",
    "second , remove every degree - two node from @xmath199 and replace its two incident edges by a single edge ; repeat this process until no degree - two node remains .",
    "the resulted graph is @xmath200 ( see fig .  [",
    "fig : triangulation ] ) , which has @xmath201 faces , nodes , and edges @xcite .",
    "every node of @xmath200 corresponds to a triangle in @xmath198 , called a _ junction triangle _ ( see fig .  [",
    "fig : triangulation ] ) .",
    "the removal of the nodes for all junction triangles from @xmath200 results in @xmath201 _ corridors _ , each of which corresponds to an edge of @xmath200 .",
    "the boundary of each corridor @xmath202 consists of four parts ( see fig .",
    "[ fig : corridor ] ) : ( 1 ) a boundary portion of an obstacle @xmath203 , from a point @xmath140 to a point @xmath166 ; ( 2 ) a diagonal of a junction triangle from @xmath166 to a point @xmath91 on an obstacle @xmath204 ( @xmath205 is possible ) ; ( 3 ) a boundary portion of the obstacle @xmath206 from @xmath91 to a point @xmath207 ; ( 4 ) a diagonal of a junction triangle from @xmath207 to @xmath140 .",
    "the corridor @xmath202 is a simple polygon .",
    "let @xmath208 ( resp . ,",
    "@xmath209 ) be the euclidean shortest path from @xmath140 to @xmath166 ( resp .",
    ", @xmath91 to @xmath207 ) in @xmath202 .",
    "the region @xmath210 bounded by @xmath211 , @xmath212 , and @xmath213 is called an _",
    "hourglass _ , which is _ open _ if @xmath214 and _ closed _ otherwise ( see fig .  [",
    "fig : corridor ] ) .",
    "if @xmath210 is open , then both @xmath208 and @xmath209 are convex chains and are called the _",
    "sides _ of @xmath210 ; otherwise , @xmath210 consists of two  funnels \" and a path @xmath215 joining the two apices of the two funnels , and @xmath216 is called the _ corridor path _ of @xmath202 .",
    "the two funnel apices ( e.g. , @xmath65 and @xmath66 in fig .",
    "[ fig : corridor ] ) are called _ corridor path terminals_. each side of a funnel is also a convex chain .     and @xmath66 of the two funnels",
    ". the dashed segments are diagonals .",
    "the paths @xmath208 and @xmath209 are shown with thick solid curves . a bay @xmath217 with gate @xmath218 ( left ) and a canal @xmath219 with gates @xmath220 and @xmath221 ( right ) are also indicated . ]     and @xmath66 of the two funnels .",
    "the dashed segments are diagonals .",
    "the paths @xmath208 and @xmath209 are shown with thick solid curves . a bay @xmath217 with gate @xmath218 ( left ) and a canal @xmath219 with gates @xmath220 and @xmath221 ( right ) are also indicated . ]",
    "let @xmath56 be the union of the @xmath201 junction triangles , open hourglasses , and funnels . then @xmath222 .",
    "we call @xmath56 the _",
    "ocean_. since the sides of open hourglasses and funnels are all convex , the boundary @xmath223 of @xmath56 consists of @xmath201 convex chains with a total of @xmath41 vertices ; also , there are @xmath201 reflex vertices on @xmath223 , which are corridor path terminals .",
    "we further partition the free space @xmath224 into regions called _ bays _ and _ canals _ , as follows .",
    "consider the hourglass @xmath210 of a corridor @xmath202 . if @xmath210 is open , then @xmath210 has two sides .",
    "let @xmath225 be one side of @xmath210 .",
    "the obstacle vertices on @xmath225 all lie on the same obstacle , say @xmath226 .",
    "let @xmath227 and @xmath228 be any two consecutive vertices on @xmath225 such that @xmath218 is not an edge of @xmath36 ( e.g. , see the left figure in fig .",
    "[ fig : corridor ] , with @xmath229 ) .",
    "the free region enclosed by @xmath218 and the boundary portion of @xmath36 between @xmath227 and @xmath228 is called a _ bay _ , denoted by @xmath217 .",
    "we call @xmath218 the _ gate _ of @xmath217 , which is an edge shared by @xmath230 and @xmath56 .",
    "if @xmath210 is closed , let @xmath65 and @xmath66 be the two apices of its two funnels .",
    "consider two consecutive vertices @xmath227 and @xmath228 on a side of any funnel such that @xmath218 is not an obstacle edge .",
    "if neither @xmath227 nor @xmath228 is a funnel apex , then @xmath227 and @xmath228 must lie on the same obstacle and the segment @xmath218 also defines a bay with that obstacle .",
    "however , if @xmath227 or @xmath228 is a funnel apex ( say , @xmath231 ) , then @xmath227 and @xmath228 may lie on different obstacles .",
    "if they lie on the same obstacle , then they also define a bay ; otherwise , we call @xmath220 the _ canal gate _ at @xmath232 ( see fig .  [",
    "fig : corridor ] ) .",
    "similarly , there is a canal gate at the other funnel apex @xmath66 , say @xmath221 .",
    "let @xmath233 and @xmath206 be the two obstacles bounding the hourglass @xmath210 .",
    "the region enclosed by @xmath233 , @xmath206 , @xmath220 , and @xmath221 that contains the corridor path of @xmath210 is called a _ canal _ , denoted by @xmath234 .",
    "every bay or canal is a simple polygon .",
    "the ocean , bays , and canals together constitute the free space @xmath197 . while the total number of all bays is @xmath41 , the total number of all canals is @xmath201 .",
    "for any two points @xmath4 and @xmath5 in the ocean @xmath56 , it has been proved that there exists an @xmath3 shortest  path in the free space of the union of @xmath56 and all corridor paths @xcite .",
    "let @xmath235 be the union of @xmath56 and all corridor paths .",
    "thus , if @xmath4 and @xmath5 are both in @xmath56 , then there is a shortest  path in @xmath235 .    in this subsection",
    ", we will first construct a graph @xmath57 of size @xmath236 on @xmath56 , in a similar fashion as @xmath52 in section [ sec : newgraph ] . using the graph @xmath57 and with additional @xmath41 space , for any query points @xmath4 and @xmath5 in @xmath56",
    ", the shortest path query can be answered in @xmath27 time .",
    "let @xmath237 . note that @xmath238 is @xmath223 .",
    "hence , @xmath238 consists of @xmath201 convex chains with totally @xmath41 vertices , and @xmath238 also contains @xmath201 reflex vertices that are corridor path terminals . since @xmath0 has @xmath1 obstacles , @xmath239 contains at most @xmath1 connected components and each obstacle of @xmath0 is contained in a component of @xmath239 .",
    "for any point @xmath69 in @xmath56 , in this subsection , let @xmath240 , @xmath241 , and @xmath242 denote the leftward , rightward , upward , and downward projection points of @xmath69 on @xmath238 , respectively .",
    "an obstacle vertex @xmath68 on @xmath238 is said to be _ extreme _ if both its incident edges on @xmath238 are on the same side of the vertical or horizontal line through @xmath68 .",
    "let @xmath243 denote the set of all extreme vertices and corridor path terminals of @xmath239 .",
    "since @xmath238 consists of @xmath201 convex chains and @xmath201 reflex vertices that are corridor path terminals , @xmath244 .",
    "we could build a graph on @xmath243 with respect to @xmath239 in a similar way as we built @xmath52 on the obstacle vertices of @xmath0 in section [ sec : newgraph ] , and then use this graph to answer queries when both query points are in @xmath56 .",
    "however , in order to handle the general queries ( in section [ subsec : general ] ) for which at least one query point is not in @xmath56 , we need to consider more points for building the graph .",
    "specifically , let @xmath245 , i.e. , in addition to @xmath243 , @xmath246 also contains the four projections of all points in @xmath243 on @xmath238 . since @xmath244 , @xmath247 .    for each connected component @xmath248 of @xmath239 ,",
    "let @xmath249 denote the set of points of @xmath246 on @xmath248 .",
    "consider any two points @xmath140 and @xmath166 of @xmath249 that are consecutive on the boundary @xmath250 of @xmath248 . by the definition of @xmath140 and @xmath166",
    ", the boundary portion of @xmath250 between @xmath140 and @xmath166 that contains no other points of @xmath249 must be an @xmath67-monotone path ( similar results were also given in @xcite ) , and we call it an _ elementary curve _ of @xmath250 . hence , for any two points on an elementary curve , the portion of the curve between the two points is a shortest path between the two points .    our goal is to build a graph , denoted by @xmath57 , on @xmath246 with respect to @xmath239 in a similar way as we built @xmath52 in section [ sec : newgraph ] , and use it to answer queries .",
    "to argue the correctness of our approach , we also define a graph @xmath251 on @xmath246 and @xmath239 in a similar way as @xmath79 on @xmath0 .",
    "again , @xmath251 is only for showing the correctness of our approach based on @xmath57 ( recall that we use @xmath79 to show the correctness of using @xmath52 ) .",
    "below , we define @xmath57 and @xmath251 simultaneously .",
    "we first define their node sets .",
    "each point of @xmath246 defines a node in both graphs .",
    "in addition , @xmath251 has type-1 and type-2 steiner points as nodes ; @xmath57 has type-1 , type-2 , and type-3 steiner points as nodes .",
    "such steiner points are defined using @xmath246 in a similar way as before , but with respect to @xmath238 .",
    "specifically , for each point @xmath252 , its four projections @xmath80 , and @xmath78 on @xmath253 are type-1 steiner points .",
    "let @xmath254 be the cut - line tree defined on the points of @xmath246 , similar to @xmath81 .",
    "each node @xmath82 of @xmath254 is associated with a subset @xmath255 and a vertical cut - line @xmath84 through the median of the @xmath65-coordinates of the points in @xmath83 . since @xmath247",
    ", @xmath254 has @xmath256 levels and @xmath257 super - levels . for every node @xmath258 , for each point @xmath88 ,",
    "if @xmath68 is horizontally visible to @xmath84 , then the projection of @xmath68 on @xmath84 is a type-2 steiner point . also , there are @xmath259 type-3 steiner points on the cut - lines of @xmath254 , which are defined in a similar way as in section [ sec : newgraph ] , and we omit the details .    the edge sets of the two graphs are defined similarly as those in @xmath79 and @xmath52 .",
    "we only point out the differences here .",
    "one big difference is that for each corridor path , since its two terminals define two nodes in both @xmath251 and @xmath57 , @xmath57 has an edge connecting these two nodes in both graphs whose weight is the length of the corridor path .",
    "another subtle difference is as follows . in @xmath79 and @xmath52 , for each obstacle edge @xmath91 of @xmath0 , both graphs have an edge connecting each pair of consecutive graph nodes on @xmath91 .",
    "in contrast , here we consider each individual elementary curve of @xmath239 instead of each individual edge of @xmath239 because not every vertex of @xmath239 defines a node in @xmath251 and @xmath57 .",
    "specifically , consider each elementary curve @xmath260 of @xmath239 .",
    "note that the two endpoints of @xmath260 must be in @xmath249 and thus define two nodes in both graphs .",
    "for each pair of consecutive graph nodes along @xmath260 , we put an edge in both @xmath251 and @xmath57 whose weight is the length of the portion of @xmath260 between these two points .",
    "we then have the following lemma .    [ lem:40 ] for any two points @xmath82 and @xmath51 in @xmath246 , a shortest path from @xmath82 to @xmath51 in @xmath251 ( resp . , @xmath57",
    ") corresponds to a shortest path from @xmath82 to @xmath51 in the plane .",
    "we first show that a shortest path from @xmath82 to @xmath51 in @xmath251 corresponds to a shortest path from @xmath82 to @xmath51 in the plane , and then show a shortest path from @xmath82 to @xmath51 in @xmath57 corresponds to a shortest path from @xmath82 to @xmath51 in @xmath251 .",
    "this will prove the lemma .    to show a shortest path from @xmath82 to @xmath51 in @xmath251 corresponds to a shortest path from @xmath82 to @xmath51 in the plane",
    ", we will build a new graph @xmath261 and prove the following : ( 1 ) a shortest path from @xmath82 to @xmath51 in @xmath261 corresponds to a shortest path from @xmath82 to @xmath51 in @xmath251 , and ( 2 ) a shortest path from @xmath82 to @xmath51 in @xmath261 corresponds to a shortest path from @xmath82 to @xmath51 in the plane .",
    "below , to define the graph @xmath261 , we first review some observations that have been discovered before .     and an elementary curve @xmath260 . ]",
    "let @xmath248 be any connected component of @xmath239 .",
    "consider an elementary curve @xmath260 of @xmath248 with endpoints @xmath68 and @xmath69 . by the definition of elementary curves ,",
    "the line segment @xmath70 must be inside @xmath248 ( similar results were given in @xcite ) .",
    "we call the region enclosed by @xmath260 and @xmath70 an _ ear _ of @xmath248 , @xmath70 the _ base _ of the ear , and @xmath260 the elementary curve of the ear",
    ". it is possible that @xmath260 is @xmath70 , in which case the ear is @xmath70 .",
    "it is easy to see that the bases of all elementary curves of @xmath248 do not intersect except at their endpoints @xcite .",
    "hence , if we connect the bases of its elementary curves , we obtain a simple polygon that is contained in @xmath248 ; we call this simple polygon the _ core _ of @xmath248 , denoted by @xmath262 . clearly , the union of @xmath262 and all the ears of @xmath248 is @xmath248 .",
    "denote by @xmath263 the set of cores of all components of @xmath239 .",
    "note that the vertex set of @xmath263 is @xmath246 and the edges of @xmath263 are the bases of all ears of @xmath239 .",
    "thus , @xmath263 has @xmath201 vertices and edges . by the results in @xcite , for any two points in @xmath56 , in particular , any two vertices @xmath82 and",
    "@xmath51 in @xmath246 , there is a shortest @xmath82-@xmath51 path in the plane that avoids all cores of @xmath263 and possibly contains corridor paths .",
    "more specifically , there exists a shortest path @xmath264 from @xmath82 to @xmath51 that contains a sequence of vertices of @xmath246 , @xmath265 , in this order , with @xmath266 and @xmath267 , such that for any two consecutive vertices @xmath268 and @xmath269 , @xmath270 , if @xmath268 and @xmath269 are terminals of the same corridor path , then the entire corridor path is contained in @xmath264 , or else @xmath264 contains the line segment @xmath271 which does not intersect the interior of any core in @xmath263 .",
    "we build a graph @xmath272 on @xmath246 with respect to the cores of @xmath239 , in the same way as @xmath79 on @xmath0 in @xcite , with the only difference that if two nodes of @xmath261 are terminals of the same corridor path , then there is an extra edge in @xmath261 connecting these two nodes whose weight is the length of the corridor path . note that @xmath82 and @xmath51 define two nodes in @xmath261 . based on the above discussion",
    ", we claim that the shortest path @xmath264 defined above must correspond to a shortest path from @xmath82 to @xmath51 in @xmath261 .",
    "indeed , for any @xmath129 , @xmath273 , if @xmath268 and @xmath269 are terminals of the same corridor path , then recall that @xmath264 contains the entire corridor path and there is an edge in @xmath261 connecting @xmath268 and @xmath269 whose weight is the length of that corridor path ; otherwise , @xmath264 contains the segment @xmath271 and by the proof in @xcite , there must be a path in @xmath261 whose length is equal to that of @xmath271 since @xmath268 is visible to @xmath269 with respect to the cores of @xmath239 .",
    "this proves that there is a shortest @xmath82-@xmath51 path in @xmath261 whose length is equal to that of @xmath264 .",
    "next , we prove that a shortest @xmath82-@xmath51 path in @xmath261 must correspond to a shortest @xmath82-@xmath51 path in @xmath251 .",
    "to make the paper self - contained we give some details below ; for complete details , please refer to @xcite .",
    "both @xmath251 and @xmath261 are built on @xmath246 in the same way , with the only difference that @xmath251 is built with respect to @xmath239 while @xmath261 is built with respect to @xmath263 .",
    "a useful fact is that for any two points @xmath140 and @xmath166 on any elementary curve @xmath260 , the length of the portion of @xmath260 between @xmath140 and @xmath166 is equal to that of the segment @xmath274 because @xmath260 is @xmath67-monotone .",
    "note that the space outside @xmath263 is the union of the space outside @xmath239 and all ears of @xmath239 .",
    "since both graphs have extra edges to connect corridor path terminals , to prove that a shortest @xmath82-@xmath51 path in @xmath261 corresponds to a shortest @xmath82-@xmath51 path in @xmath251 , based on the analysis in @xcite , we only need to show the following : for any two vertices @xmath140 and @xmath166 of @xmath246 visible to each other with respect to @xmath263 such that no other vertices of @xmath246 than @xmath140 and @xmath166 are in the axis - parallel rectangle @xmath275 that has @xmath274 as a diagonal , there must be an @xmath67-monotone path between @xmath140 and @xmath166 in @xmath251 .",
    "note that @xmath140 may not be visible to @xmath166 with respect to @xmath239 .    by the construction of the graph @xmath261 @xcite",
    ", there must be an @xmath67-monotone path from @xmath140 to @xmath166 in @xmath261 , for which there are two possible cases .",
    "below , we prove in each case there is also an @xmath67-monotone path from @xmath140 to @xmath166 in @xmath251 . without loss of generality ,",
    "we assume @xmath166 is to the northeast of @xmath140 .    1 .",
    "* case 1*. if any core of @xmath263 intersects the interior of the rectangle @xmath275 , then as shown in @xcite , either the rightward projection of @xmath140 on @xmath276 and the downward projection of @xmath166 on @xmath276 are both on the same edge of @xmath276 that intersects @xmath275 ( e.g. , see fig .",
    "[ fig : case1 ] ) , or the upward projection of @xmath140 on @xmath276 and the leftward projection of @xmath166 on @xmath276 are both on the same edge of @xmath276 that intersects @xmath275 . here",
    ", we assume that the former case occurs .",
    "let @xmath277 be the rightward projection of @xmath140 on @xmath276 and @xmath278 be the downward projection of @xmath166 on @xmath276 , and @xmath279 be the edge of @xmath263 that contains both @xmath277 and @xmath278 . by the construction of @xmath261 ,",
    "there is an @xmath67-monotone path from @xmath140 to @xmath166 consisting of @xmath280 .",
    "below , we show that there is also an @xmath67-monotone path from @xmath140 to @xmath166 in @xmath251 .",
    "+ let @xmath281 be the ear of @xmath239 whose base is @xmath279 .",
    "let @xmath260 be the elementary curve of @xmath281 .",
    "since no vertex of @xmath282 is in @xmath275 and all extreme points of @xmath239 are in @xmath246 , the rightward projection of @xmath140 on @xmath238 and the downward projection of @xmath166 on @xmath238 must be both on @xmath260 ( e.g. , see fig .",
    "[ fig : case1new ] ) ; we denote these two projection points by @xmath283 and @xmath284 , respectively . by the construction of @xmath251",
    ", there must be an @xmath67-monotone path from @xmath140 to @xmath166 in @xmath251 that is a concatenation of @xmath285 , the portion of @xmath260 between @xmath283 and @xmath284 , and @xmath286 ( note that @xmath283 is a type-1 steiner point defined by @xmath140 and @xmath284 is a type-1 steiner point defined by @xmath166 in @xmath251 ) .",
    "+ : @xmath283 is the rightward projection of @xmath140 on @xmath238 and @xmath284 is the downward projection of @xmath166 on @xmath238 .",
    "both @xmath283 and @xmath284 must be on the same elementary curve @xmath260 . ]",
    "+ : @xmath283 is the rightward projection of @xmath140 on @xmath238 and @xmath284 is the downward projection of @xmath166 on @xmath238 .",
    "both @xmath283 and @xmath284 must be on the same elementary curve @xmath260 . ]",
    "* case 2*. if no core of @xmath263 intersects the interior of the rectangle @xmath275 , then by the construction of @xmath261 , there must be a cut - line @xmath71 between @xmath140 and @xmath166 such that on @xmath71 , @xmath140 defines a steiner point @xmath287 and @xmath166 defines a steiner point @xmath288 ( e.g. , see fig .",
    "[ fig : case2 ] ) .",
    "thus , there is an @xmath67-monotone path from @xmath140 to @xmath166 in @xmath261 consisting of @xmath289 .",
    "below , we show that there is also an @xmath67-monotone path from @xmath140 to @xmath166 in @xmath251 .",
    "+ : @xmath277 is the rightward projection of @xmath140 on @xmath238 and @xmath278 is the downward projection of @xmath166 on @xmath238 .",
    "both @xmath277 and @xmath278 must be on the same elementary curve @xmath260 . ]",
    "+ : @xmath277 is the rightward projection of @xmath140 on @xmath238 and @xmath278 is the downward projection of @xmath166 on @xmath238 .",
    "both @xmath277 and @xmath278 must be on the same elementary curve @xmath260 . ]",
    "+ since both @xmath261 and @xmath251 are built on @xmath246 , they have the same cut - line tree .",
    "hence , the cut - line @xmath71 still exists in @xmath251 .",
    "if both @xmath140 and @xmath166 are horizontally visible to @xmath71 , then they still define steiner points on @xmath71 and consequently there is also an @xmath67-monotone path from @xmath140 to @xmath166 in @xmath251 .",
    "otherwise , we assume that @xmath140 is not horizontally visible to @xmath71 .",
    "let @xmath277 be the rightward projection of @xmath140 on @xmath238 ( see fig .",
    "[ fig : case2new ] ) .",
    "hence , @xmath277 must be between @xmath71 and @xmath140 .",
    "let @xmath260 be the elementary curve that contains @xmath277 .",
    "thus , @xmath260 intersects the lower edge of @xmath275 at @xmath277 .",
    "since @xmath275 does not contain any point of @xmath282 , the two endpoints of @xmath260 are not in @xmath275 and thus the downward projection of @xmath166 on @xmath238 , denoted by @xmath278 , must be on @xmath260 as well . by the construction of @xmath251 , there must be an @xmath67-monotone path from @xmath140 to @xmath166 in @xmath251 that is the concatenation of @xmath290 , the portion of @xmath260 between @xmath277 and @xmath278 , and @xmath291 .",
    "the above arguments prove that a shortest path from @xmath82 to @xmath51 in @xmath251 corresponds to a shortest path from @xmath82 to @xmath51 in the plane .",
    "it remains to show that a shortest @xmath82-@xmath51 path in @xmath251 corresponds to a shortest @xmath82-@xmath51 path in @xmath57 .",
    "this can be seen easily since for any edge @xmath292 in @xmath251 , if @xmath91 is not in @xmath57 , then @xmath91 is  divided \" into many edges in @xmath57 such that their concatenation is a path from @xmath68 to @xmath69 .",
    "the lemma thus follows .",
    "the next lemma gives an algorithm for computing the graph @xmath57 .",
    "[ lem:50 ] the graph @xmath57 can be computed in @xmath293 time .",
    "the algorithm for constructing @xmath57 is similar to that for @xmath52 in lemma [ lem:10 ] . as a preprocessing",
    ", the free space @xmath197 can be triangulated in @xmath44 time for any constant @xmath16 @xcite , after which computing the extended corridor structure , in particular , takes @xmath43 time @xcite .",
    "consequently , we obtain @xmath239 and the vertex set @xmath246 .",
    "all corridor paths are also available .    first , we compute the four projections of each point of @xmath246 on @xmath238 as type-1 steiner points , which can be done after we compute the vertical and horizontal visibility decompositions of @xmath239 in @xmath44 time @xcite .",
    "the graph edges for connecting each point of @xmath246 to its four projection points on @xmath238 can be obtained as well .",
    "next , we compute the type-2 and type-3 steiner points and the corresponding graph edges connecting these steiner points . since @xmath247 ,",
    "the cut - line tree @xmath254 can be computed in @xmath294 time .",
    "then , we determine the steiner points on the cut - lines by traversing the tree @xmath254 from top to bottom in a similar way as in lemma [ lem:10 ] .",
    "since we have obtained the four projection points for each point of @xmath246 , computing all steiner points on the cut - lines takes @xmath259 time .",
    "their corresponding edges can be computed in @xmath295 time .",
    "it remains to compute the graph edges of @xmath57 connecting consecutive graph nodes on each elementary curve of @xmath239 and the graph edges connecting every two consecutive steiner points ( if they are visible to each other ) on each cut - line .    on each connected component @xmath248 of @xmath239",
    ", we could compute a sorted list of all steiner points and the points of @xmath249 by sorting all these points and all obstacle vertices of @xmath248 along @xmath250 .",
    "but that would take @xmath42 time in total because there are @xmath41 obstacle vertices on all components of @xmath239 . to do better ,",
    "we take the following approach . for each elementary curve @xmath260 ,",
    "we sort all steiner points on @xmath260 by either their @xmath65-coordinates or @xmath66-coordinates .",
    "since @xmath260 is @xmath67-monotone , such an order is also an order along @xmath260 .",
    "then , we merge the steiner points thus ordered with the obstacle vertices on @xmath260 , in linear time .",
    "since there are @xmath201 steiner points on @xmath238 , it takes totally @xmath43 time to sort the steiner points and obstacle vertices on all elementary curves of @xmath239 .",
    "after that , the edges of @xmath57 on all elementary curves can be computed immediately .",
    "we now compute the graph edges on the cut - lines connecting consecutive steiner points .",
    "we first sort all steiner points on each cut - line .",
    "this sorting takes @xmath296 time for all cut - lines . for each pair of consecutive steiner points @xmath68 and @xmath69 on every cut - line ,",
    "we determine whether @xmath68 is visible to @xmath69 by checking whether the upward projections of @xmath68 and @xmath69 on @xmath238 are equal , and these upward projections can be performed in @xmath27 time using the vertical visibility decomposition of @xmath239 .",
    "hence , the graph edges on all cut - lines are computed in @xmath297 time .    in summary , we can compute the graph @xmath57 in @xmath298 time .",
    "note that @xmath299 .",
    "the lemma thus follows .",
    "consider any two query points @xmath4 and @xmath5 in the ocean @xmath56 .",
    "we define the gateway sets @xmath300 for @xmath4 and @xmath301 for @xmath5 on @xmath57 , as follows .",
    "we only discuss @xmath300 ; @xmath301 is similar .",
    "the definition of @xmath300 is very similar to that of @xmath146 , with only slight differences .",
    "specifically , @xmath300 has two subsets @xmath302 and @xmath303 .",
    "@xmath303 is defined in the same way as @xmath148 , and thus @xmath304 .",
    "@xmath302 is defined with respect to the elementary curves of @xmath239 , as follows .",
    "let @xmath69 be the rightward projection point of @xmath4 on @xmath238 .",
    "suppose @xmath69 is on the elementary curve @xmath260 and @xmath305 and @xmath306 are the two nodes of @xmath57 on @xmath260 adjacent to @xmath69 .",
    "then @xmath305 and @xmath306 are in @xmath302 , and for each @xmath307 , we define a gateway edge from @xmath4 to @xmath68 consisting of @xmath308 and the portion of @xmath260 between @xmath69 and @xmath68",
    ". similarly , for each of the leftward , upward , and downward projections of @xmath4 on @xmath238 , there are at most two gateways in @xmath302 .",
    "the next lemma shows that the gateways of @xmath300 `` control '' the shortest paths from @xmath4 to all points of @xmath246 .",
    "[ lem:60 ] for any point @xmath68 of @xmath246 , there exists a shortest path from @xmath4 to @xmath68 using @xmath57 that contains a gateway of @xmath4 in @xmath300 .",
    "we define a gateway set @xmath309 for @xmath4 on the graph @xmath251 , as follows .",
    "the set @xmath309 has two subsets @xmath310 and @xmath311 .",
    "the first subset @xmath310 is exactly the same as @xmath302 , and the second subset @xmath311 contains gateways on the cut - lines of @xmath254 , which are defined similarly as @xmath96 on @xmath79 and @xmath81 , discussed in section [ sec : pre ] .",
    "note that the gateways in @xmath309 are exactly those nodes of @xmath251 that are adjacent to @xmath4 if we `` insert '' @xmath4 into the graph @xmath251 ( similar arguments were used for @xmath94 in @xcite ) .",
    "hence , there exists a shortest path from @xmath4 to @xmath68 using @xmath251 that contains a gateway of @xmath4 in @xmath309 .",
    "since the graph @xmath57 is defined analogously as @xmath52 and @xmath251 is defined analogously as @xmath79 , by using a similar analysis as in the proof of lemma [ lem:20 ] , we can show that there exists a shortest path from @xmath4 to @xmath68 using @xmath57 that contains a gateway of @xmath4 in @xmath300 .",
    "we omit the details .",
    "the lemma thus follows .",
    "similar results also hold for the gateway set @xmath301 of @xmath5 .",
    "we have the following corollary .    [ cor:20 ]",
    "if there exists a shortest  path through a point of @xmath246 , then there exists a shortest  path through a gateway of @xmath4 in @xmath300 and a gateway of @xmath5 in @xmath301 .",
    "the following lemma gives an algorithm for computing the gateways .",
    "[ lem:70 ] with a preprocessing of @xmath312 time and @xmath313 space , the gateway sets @xmath300 and @xmath301 can be computed in @xmath27 time for any two query points @xmath4 and @xmath5 in @xmath56 .",
    "the algorithm is similar to that for lemma [ lem:30 ] ; we only point out the differences .",
    "we discuss our algorithm only for computing @xmath300 ; the case for @xmath301 is similar .    to compute @xmath302 , we build the horizontal and vertical visibility decompositions of @xmath239 . then , the four projections of @xmath4 on @xmath238 can be determined in @xmath27 time .",
    "consider any such projection @xmath68 of @xmath4 .",
    "suppose @xmath68 is on an elementary curve @xmath260 .",
    "we need to determine the two nodes of @xmath57 on @xmath260 adjacent to @xmath68 , which are gateways of @xmath302 .",
    "we maintain a sorted list of all nodes of @xmath57 on @xmath260 , and do binary search to find these two gateways of @xmath4 on @xmath260 in this sorted list by using only the @xmath66-coordinates ( or the @xmath65-coordinates ) of the nodes since @xmath260 is @xmath67-monotone . also , since @xmath260 is @xmath67-monotone , for any two points @xmath69 and @xmath314 on @xmath260 , the length of the portion of @xmath260 between @xmath69 and @xmath314 is equal to the length of @xmath315 .",
    "hence , after these two gateways of @xmath4 on @xmath260 are found , the lengths of the two gateway edges from @xmath4 to them can be computed in constant time .",
    "since @xmath302 has @xmath97 gateways , @xmath302 can be computed in @xmath27 time .    to compute @xmath303",
    ", we take the same approach as for lemma [ lem:30 ] . in the preprocessing , for every cut - line @xmath71 , we maintain a sorted list of all steiner points on @xmath71 , and associate with each such steiner point its upward and downward projections on @xmath238 .",
    "computing these projections for each steiner point takes @xmath27 time .",
    "then we build a fractional cascading data structure @xcite for the sorted lists of steiner points on all cut - lines along the cut - line tree @xmath254 . using this fractional cascading data structure , the gateway set @xmath303",
    "can be computed in @xmath256 time .",
    "the preprocessing takes totally @xmath316 time and @xmath317 space .",
    "note that @xmath318 .",
    "the lemma thus follows .",
    "we summarize our algorithm in lemma [ lem:80 ] below for the case when both query points are in @xmath56 .",
    "[ lem:80 ] with a preprocessing of @xmath319 time and @xmath320 space , each two - point query can be answered in @xmath27 time for any two query points in the ocean @xmath56 .    in the preprocessing",
    ", we build the graph @xmath57 , and for each node @xmath51 of @xmath57 , compute a shortest path tree in @xmath57 from @xmath51 .",
    "we maintain a shortest path length table such that for any two nodes @xmath82 and @xmath51 in @xmath57 , the shortest path length between @xmath82 and @xmath51 can be found in @xmath97 time .",
    "since @xmath57 has @xmath259 nodes and edges , computing and maintaining all shortest path trees in @xmath57 take @xmath321 space and @xmath322 time . to report an actual shortest path in the plane in time linear to the number of edges of the output path",
    ", we need to maintain additional information .",
    "consider an elementary curve @xmath260 of @xmath239 .",
    "let @xmath82 and @xmath51 be two consecutive nodes of @xmath57 on @xmath260 . by our definition of @xmath57 , there is an edge @xmath323 in @xmath57 . if the edge @xmath323 is contained in our output path , we need to report all obstacle vertices and edges of @xmath260 between @xmath82 and @xmath51 . for this , on each elementary curve @xmath260 , we explicitly maintain a list of obstacle edge between each pair of consecutive nodes of @xmath57 along @xmath260 .",
    "since the total number of nodes of @xmath57 on all elementary curves is @xmath201 and the total number of obstacle vertices of @xmath239 is @xmath41 , maintaining such _ edge lists _ for all elementary curves takes @xmath41 space .",
    "in addition , we also perform the preprocessing for lemma [ lem:70 ] .",
    "the overall preprocessing takes @xmath324 time and @xmath320 space .",
    "now consider any two query points @xmath4 and @xmath5 in @xmath56 . as for theorem [ theo:10 ]",
    ", we first check whether there exists a trivial shortest  path .",
    "but trivial shortest paths here are defined with respect to the elementary curves of @xmath239 instead of the obstacle edges of @xmath0 .",
    "for example , consider @xmath116 ( i.e. , the rightward projection of @xmath4 on @xmath238 ) and @xmath117 .",
    "if @xmath118 intersects @xmath119 , then there is a trivial shortest path @xmath120 , where @xmath325 ; otherwise , if @xmath116 and @xmath117 are both on the same elementary curve @xmath260 of @xmath239 , then there is a trivial shortest  path which is the concatenation of @xmath118 , the portion of @xmath260 between @xmath116 and @xmath117 , and @xmath326 .",
    "similarly , trivial shortest  paths are also defined by other projections of @xmath4 and @xmath5 on @xmath238 .",
    "we can determine whether there exists a trivial shortest  path in @xmath27 time by using the vertical and horizontal decompositions of @xmath239 to compute the four projection points of @xmath4 and @xmath5 on @xmath238 .",
    "if yes , we find such a shortest path in additional time linear to the number of edges of the output path .",
    "note that for the case , e.g. , when @xmath116 and @xmath117 are both on the same elementary curve @xmath260 , the output path may not be of @xmath97 size since there may be multiple obstacle vertices on the portion of @xmath260 between @xmath116 and @xmath117 ; but we can still output such a path in linear time by using the edge lists we maintain on each elementary curve .",
    "below , we assume there is no trivial shortest  path .    by using the cores of @xmath239 in the proof of lemma [ lem:40 ] and a similar analysis as in @xcite , we can show that there must be a shortest path that contains at least one point of @xmath246 . by corollary [ cor:20 ] ,",
    "there exists a shortest  path through a gateway of @xmath4 and a gateway of @xmath5 in @xmath57 . using lemma [ lem:70 ] , we compute the two gateway sets @xmath300 and @xmath301 . by building a gateway graph for @xmath4 and @xmath5 as in theorem [ theo:10 ]",
    ", we can compute the length of a shortest  path in @xmath256 time since @xmath327 , @xmath328 , and thus the gateway graph has @xmath257 nodes and @xmath256 edges .",
    "an actual path can then be reported in additional time linear to the number of edges of the output path , by using the shortest path trees of @xmath57 and the edge lists maintained on the elementary curves , as discussed above .",
    "the lemma thus follows .      in this section ,",
    "we show how to handle the general queries in which at least one query point is not in @xmath56 . without loss of generality , we assume that @xmath4 is in a bay or a canal , denoted by @xmath59 .",
    "we first focus on the case when @xmath59 is a bay .",
    "the case when @xmath59 is a canal can be handled by similar techniques although it is a little more complicated since each canal has two gates .",
    "the point @xmath5 can be in @xmath59 , @xmath56 , or another bay or canal , and we discuss these three cases below .",
    "let @xmath60 denote the gate of @xmath59 .    as an overview of our approach",
    ", we characterize the different possible ways that a shortest  path may cross the gate @xmath60 , show how to find such a possible path for each way , and finally compute all possible  candidate \" paths and select the one with the smallest path length as our solution .",
    "when the query point @xmath5 is in @xmath59 , we have the following lemma .",
    "[ lem:90 ] if @xmath59 is a bay and @xmath329 , then there exists a shortest  path in @xmath59 .",
    "let @xmath330 be any shortest  path in the plane .",
    "if @xmath330 is in @xmath59 , then we are done .",
    "otherwise , @xmath330 must intersect the only gate @xmath60 of @xmath59 ; further , since both @xmath4 and @xmath5 are in @xmath59 , if @xmath330 exits from @xmath59 ( through @xmath60 ) , then it must enter @xmath59 again ( through @xmath60 as well ) .",
    "let @xmath68 be the first point on @xmath60 encountered as going from @xmath4 to @xmath5 along @xmath330 and let @xmath69 be the last such point on @xmath60 .",
    "let @xmath331 be the  path obtained by replacing the portion of @xmath330 between @xmath68 and @xmath69 by @xmath332 .",
    "note that @xmath331 is in @xmath59 . since @xmath70 is a shortest path from @xmath68 to @xmath69",
    ", @xmath331 is also a shortest  path .",
    "the lemma thus follows .    to handle the case of @xmath329 , in the preprocessing",
    ", we build a data structure for two - point euclidean shortest path queries in @xmath59 , denoted by @xmath333 , in @xmath334 time and space @xcite .",
    "since a euclidean shortest path in any simple polygon is also an @xmath3 shortest path and @xmath59 is a simple polygon , for @xmath329 , we can use @xmath333 to answer the shortest  path query in @xmath59 in @xmath27 time .",
    "if the query point @xmath5 is in @xmath56 , then a shortest  path must cross the gate @xmath60 of @xmath59 .",
    "a main difficulty for answering the general queries is to deal with this case .",
    "more specifically , we already have a graph @xmath57 on @xmath56 , and our goal is to design a mechanism to connect the bay @xmath59 with @xmath57 through the gate @xmath60 , so that it can capture the shortest path information in the union of @xmath59 and @xmath235 ( recall that @xmath235 is the union of @xmath56 and all corridor paths ) .",
    "we begin with some observations on how a shortest  path may cross @xmath60 . without loss of generality , we assume that @xmath60 has a positive slope and the interior of @xmath59 on @xmath60 is above @xmath60 .",
    "let @xmath277 and @xmath335 be the two endpoints of @xmath60 such that @xmath277 is higher than @xmath335 ( see fig .  [",
    "fig : funnel2 ] ) .",
    "let @xmath336 ( resp . ,",
    "@xmath337 ) be the euclidean shortest path in @xmath59 from @xmath4 to @xmath277 ( resp . , @xmath335 ) .",
    "let @xmath338 be the farthest point from @xmath4 on @xmath339 ( possibly @xmath340 ) .",
    "let @xmath341 ( resp . ,",
    "@xmath342 ) be the subpath of @xmath336 ( resp .",
    ", @xmath337 ) between @xmath338 and @xmath277 ( resp . ,",
    "@xmath335 ) .",
    "it is well known that both @xmath341 and @xmath342 are convex chains @xcite , and the region enclosed by @xmath341 , @xmath342 , and @xmath60 in @xmath59 is a `` funnel '' with @xmath338 as the _ apex _ and @xmath60 as the _ base _ ( see fig .  [",
    "fig : funnel2 ] ) .",
    "let @xmath343 denote this funnel and @xmath344 denote its boundary .",
    "we define four special points @xmath345 , and @xmath346 ( see fig .  [",
    "fig : funnel2 ] ) .",
    "suppose we move along @xmath341 from @xmath338 ; let @xmath347 be the first point on @xmath341 we encounter that is _ horizontally _ visible to @xmath348 .",
    "similarly , as moving along @xmath342 from @xmath338 , let @xmath349 be the first point on @xmath342 encountered that is _ vertically _ visible to @xmath60 .",
    "note that in some cases @xmath347 ( resp .",
    ", @xmath350 ) can be @xmath338 , @xmath277 , or @xmath335 .",
    "let @xmath351 be the horizontal projection of @xmath352 on @xmath60 and @xmath346 be the vertical projection of @xmath350 on @xmath60 ( see fig .",
    "[ fig : funnel2 ] ) .    , and @xmath346 .",
    "in ( a ) , @xmath353 is tangent to @xmath341 ( at @xmath347 ) ; in ( b ) , @xmath353 is tangent to @xmath342 . ]",
    "the points @xmath351 and @xmath346 are particularly useful .",
    "we first have the following observation .",
    "[ obser:10 ] the point @xmath351 is above @xmath346 , i.e. , the @xmath66-coordinate of @xmath351 is no smaller than that of @xmath346 .",
    "if @xmath338 is either @xmath277 or @xmath335 , then by their definitions , we have @xmath354 and the observation trivially holds .",
    "suppose @xmath338 is neither @xmath277 nor @xmath335 .",
    "if @xmath355 , then the observation also holds since @xmath277 is the highest point on @xmath60 .",
    "we assume @xmath356 , which implies @xmath357 .",
    "let @xmath358 be the portion of @xmath341 between @xmath347 and @xmath277 .",
    "note that the `` pseudo - triangular '' region enclosed by @xmath359 , @xmath353 , and @xmath358 does not contain any point of @xmath360 in its interior .",
    "for any point @xmath68 in the interior of @xmath359 , since @xmath358 is convex and @xmath353 is horizontal , @xmath68 must be vertically visible to @xmath358 , say , at a point @xmath361 . clearly , @xmath69 is not @xmath347 .",
    "hence , the line containing @xmath70 can not be tangent to @xmath341 at @xmath69 , implying that @xmath69 is not @xmath349 .",
    "therefore , the point @xmath68 must be strictly above @xmath346 . since @xmath68 is an arbitrary point in the interior of @xmath359 , @xmath351 must be above @xmath346 .",
    "the observation thus follows .",
    "[ lem:100 ] for any point @xmath362 , there is a shortest path from @xmath4 to @xmath68 that contains @xmath351 ; likewise , for any point @xmath363 , there is a shortest path from @xmath4 to @xmath68 that contains @xmath346 .",
    "we only prove the case of @xmath364 since the other case of @xmath363 is symmetric .",
    "it suffices to show that there exists a shortest path from @xmath338 to @xmath364 that contains @xmath351 .",
    "recall that @xmath351 is the horizontal projection of @xmath347 on @xmath60 .",
    "let @xmath358 be the portion of @xmath341 between @xmath347 and @xmath277 .",
    "consider the `` pseudo - triangular '' region @xmath365 enclosed by @xmath359 , @xmath353 , and @xmath358 . since @xmath358 is convex , every point on @xmath358 is horizontally visible to @xmath60 .",
    "we claim that there exists a shortest path @xmath330 from @xmath338 to @xmath68 that intersects @xmath366 . indeed , if @xmath367 , then the claim is trivially true .",
    "otherwise , since @xmath347 is the first point on @xmath341 that is horizontally visible to @xmath60 if we go from @xmath338 to @xmath277 along @xmath341 , @xmath338 can not be horizontally visible to @xmath60 , and thus , @xmath338 is not in @xmath365 .",
    "note that @xmath353 partitions the funnel @xmath343 into two parts , one of which is @xmath365 .",
    "also , the funnel @xmath343 contains a shortest path @xmath330 from @xmath338 to @xmath68 . since @xmath368 and @xmath369 , the path @xmath330 must intersect @xmath366",
    "the claim is proved .",
    "suppose @xmath330 intersects @xmath366 at a point @xmath69 . since @xmath370 is @xmath67-monotone ( and thus is a shortest path )",
    ", we can obtain another shortest path from @xmath338 to @xmath68 that contains @xmath351 by replacing the portion of @xmath330 between @xmath69 and @xmath68 by @xmath370 .",
    "the lemma thus follows .    for the case of @xmath371 ,",
    "lemma [ lem:100 ] implies the following : if a shortest  path crosses @xmath60 at a point on @xmath359 ( resp . , @xmath372 ) , then there must be a shortest  path that is a concatenation of a shortest path @xmath373 ( resp . , @xmath374 ) from @xmath4 to @xmath351 ( resp . , @xmath346 )",
    "in @xmath59 and a shortest path @xmath375 from @xmath351 ( resp .",
    ", @xmath376 from @xmath346 ) to @xmath5 in @xmath235 .",
    "the path @xmath373 can be found using the data structure @xmath333 and @xmath375 can be found by lemma [ lem:80 ] since both @xmath351 and @xmath5 are in @xmath56 .",
    "hence , such a shortest  path query is answered in @xmath27 time , provided that we can find @xmath351 and @xmath346 in @xmath27 time ( as to be shown in lemma [ lem:170 ] ) .    in the following , we assume every shortest  path crosses the interior of @xmath377 , and in other words , no shortest  paths cross @xmath378 .",
    "let @xmath379 denote the intersection of the horizontal line containing @xmath353 and the vertical line containing @xmath380 ( see fig .",
    "[ fig : funnel2 ] ) .",
    "the point @xmath379 is useful as shown by the next lemma .",
    "[ lem:110 ] the point @xmath379 is in the funnel @xmath343 , and for any point @xmath381 , there is a shortest path from @xmath4 to @xmath68 that contains @xmath379 .",
    "we first prove @xmath382 .",
    "for this , it suffices to prove that the interior of the triangle @xmath383 does not contain any point on the boundary of @xmath343 .",
    "let @xmath365 denote the interior of @xmath383 .",
    "assume to the contrary that @xmath365 intersects @xmath344 .",
    "let @xmath69 be any point in @xmath384 that is horizontally visible to @xmath377 .",
    "such a point @xmath69 always exists if @xmath385 .",
    "note that @xmath69 is on either @xmath341 or @xmath342 . without loss of generality ,",
    "assume @xmath69 is on @xmath341 .",
    "observe that @xmath358 is @xmath67-monotone since @xmath347 is horizontally visible to @xmath60 .",
    "because @xmath69 is also horizontally visible to @xmath60 , by the definition of @xmath347 , @xmath69 must be on @xmath358 .",
    "since @xmath69 is in @xmath365 , @xmath69 must be strictly below @xmath347 . since @xmath277 is no lower than @xmath351",
    ", @xmath277 is also no lower than @xmath347 .",
    "thus , when following the path @xmath358 from @xmath347 to @xmath277 , we have to strictly go down ( through @xmath69 ) and then go up ( to @xmath277 ) , which contradicts with that the fact the path @xmath358 is @xmath67-monotone .",
    "hence , @xmath365 can not contain any point on @xmath344 and @xmath379 must be in @xmath343 .",
    "consider any point @xmath386 .",
    "below we prove that there is a shortest path from @xmath4 to @xmath68 containing @xmath379 .",
    "it suffices to show that there exists a shortest path from @xmath338 to @xmath68 containing @xmath379 . if @xmath387 , then @xmath388 and we are done .",
    "below we assume @xmath389 , which implies @xmath390 since otherwise @xmath387 by observation [ obser:10 ] ; similarly , @xmath391 . note that @xmath389 also implies @xmath392 .",
    "let @xmath393 be a shortest path in @xmath343 from @xmath338 to @xmath68 .",
    "let @xmath394 be the horizontal line containing @xmath353 and @xmath395 be the vertical line containing @xmath380 .    in the following ,",
    "we first prove that @xmath396 is a line segment and it must intersect the path @xmath393 . consider the line segment @xmath353 . depending on whether @xmath394 is tangent to @xmath341 at @xmath347 ,",
    "there are two possible cases ( e.g. , see fig .",
    "[ fig : funnel2 ] ) .    1 .   if @xmath394 is tangent to @xmath341 at @xmath347 ( see fig .  [",
    "fig : funnel2](a ) ) , then we extend @xmath353 horizontally leftwards until it hits @xmath344 , say , at a point @xmath397 .",
    "since @xmath341 is convex , @xmath338 is above the line @xmath394 and @xmath397 is on @xmath342 . since @xmath342 is also convex and @xmath338 is above @xmath394 , we obtain @xmath398 .",
    "+ observe that @xmath399 partitions @xmath343 into two sub - polygons such that @xmath338 and @xmath68 are in different sub - polygons .",
    "hence , the path @xmath393 must intersect @xmath400 , which is a line segment .",
    "2 .   if @xmath394 is not tangent to @xmath341 at @xmath347 , then depending on whether @xmath401 , there are two subcases",
    "if @xmath401 , then due to the convexity of @xmath341 and @xmath342 , we have @xmath402 . since @xmath367 , it is trivially true that @xmath393 intersects @xmath402 .",
    "2 .   if @xmath403 ( see fig .  [",
    "fig : funnel2](b ) ) , then we claim that @xmath353 must be tangent to @xmath342 at a point , say , @xmath397 .",
    "suppose to the contrary that this is not the case .",
    "then , since @xmath404 , @xmath390 , and @xmath394 is not tangent to @xmath341 at @xmath347 , we can move @xmath394 downwards by an infinitesimal value such that the new @xmath394 intersects @xmath60 at a point @xmath405 and intersects @xmath341 at a point @xmath406 such that @xmath406 is horizontally visible to @xmath405 .",
    "clearly , @xmath406 is on @xmath341 between @xmath338 and @xmath347 . but this contradicts with the definition of @xmath347 , i.e. , @xmath347 is the first point on @xmath341 horizontally visible to @xmath60 if we go from @xmath338 to @xmath277 along @xmath341 .",
    "the claim is thus proved .",
    "+ by the above claim and the convexity of @xmath342 , @xmath338 is below @xmath394 . also by the convexity of @xmath341",
    ", we have @xmath402 .",
    "further , observe that @xmath399 partitions @xmath343 into two sub - polygons such that @xmath338 and @xmath68 are in different sub - polygons .",
    "hence , the path @xmath393 must intersect @xmath400 .",
    "+ therefore , @xmath396 is a line segment that intersects @xmath393 .",
    "the above arguments prove that @xmath396 is a line segment that intersects the path @xmath393 , say , at a point @xmath407 . by using a similar analysis",
    ", we can also show that @xmath408 is a line segment that intersects @xmath393 , say , at a point @xmath409 .",
    "note that this implies that @xmath379 is on the intersection of the segment @xmath396 and the segment @xmath408 . since @xmath410 is @xmath67-monotone ( and thus is a shortest path ) , if we replace the subpath of @xmath393 between @xmath407 and @xmath409 by @xmath410 to obtain another path @xmath411 from @xmath338 to @xmath68 , then @xmath411 is still a shortest path .",
    "since @xmath411 contains @xmath379 , the lemma follows .",
    "if there is a shortest  path crossing @xmath60 at a point on @xmath377 , then by lemma [ lem:110 ] , there is a shortest  path that is a concatenation of a shortest path from @xmath4 to @xmath379 in @xmath59 and a shortest path from @xmath379 to @xmath5 ( which crosses @xmath60 ) .",
    "a shortest @xmath4-@xmath379 path in @xmath59 can be found by using the data structure @xmath333 in @xmath27 time , provided that we can compute @xmath379 in @xmath27 time .",
    "it remains to show how to compute a shortest @xmath379-@xmath5 path that crosses @xmath60 at a point on @xmath377 .",
    "note that such a shortest @xmath379-@xmath5 path either does or does not cross a point in @xmath412 , where @xmath413 is the set of points of @xmath246 lying on @xmath60 ( @xmath414 is possible ) .",
    "for the former case ( when @xmath415 holds ) , we shall build a graph @xmath64 inside @xmath59 and merge it with the graph @xmath57 on @xmath56 so that the merged graph allows to find a shortest @xmath379-@xmath5 path crossing a point in @xmath412 .",
    "next , we introduce the graph @xmath64 .",
    "let @xmath416 .",
    "the graph @xmath64 is defined on the points of @xmath413 in a similar manner as @xmath52 in section [ sec : newgraph ] .",
    "one big difference is that @xmath64 is built inside @xmath59 and uses vertical _ cut - segments _ in @xmath59 instead of cut - lines .",
    "also , no type-1 steiner point is needed for @xmath64 .",
    "specifically , we define a _ cut - segment tree _ @xmath417 as follows .",
    "the root @xmath82 of @xmath417 is associated with a point set @xmath418 .",
    "each node @xmath82 of @xmath417 is also associated with a vertical _ cut - segment _",
    "@xmath84 , defined as follows .",
    "let @xmath68 be the point of @xmath83 that has the median @xmath65-coordinate among all points in @xmath83 .",
    "note that @xmath68 is on @xmath60 .",
    "we extend a vertical line segment from @xmath68 upwards into the interior of @xmath59 until it hits @xmath360 ; this segment is the cut - segment @xmath84 .",
    "the left ( resp .",
    ", right ) child of @xmath82 is defined recursively on the points of @xmath83 to the left ( resp . , right ) of @xmath84 .    clearly , @xmath417 has @xmath419 levels and @xmath420 super - levels .",
    "we define the type-2 and type-3 steiner points on the cut - segments of @xmath417 in the same way as in section [ sec : newgraph ] .",
    "consider a super - level and let @xmath82 be any node at the highest level of this super - level .",
    "for every @xmath88 , for each cut - segment @xmath71 in the subtree @xmath421 of @xmath417 in the same super - level , if @xmath68 is horizontally visible to @xmath71 , then the horizontal projection @xmath422 of @xmath68 on @xmath71 is defined as a steiner point on @xmath71 ; we order the steiner points defined by @xmath68 from left to right , and put an edge in @xmath64 connecting every two such consecutive steiner points .",
    "hence , there are @xmath423 steiner points on all cut - segments of @xmath417 .",
    "the above process also defines @xmath423 edges in @xmath64 .",
    "the node set of @xmath64 consists of all points of @xmath413 and all steiner points on the cut - segments of @xmath417 .",
    "in addition to the graph edges defined above , for each cut - segment @xmath71 , a graph edge connects every two consecutive graph nodes on @xmath71 ( note that here every two such graph nodes are visible to each other ) .",
    "clearly , @xmath64 has @xmath424 nodes and @xmath424 edges .",
    "let @xmath425 denote the number of obstacle vertices of the bay @xmath59 .",
    "note that @xmath413 is sorted along @xmath60 .",
    "[ lem:120 ] the graph @xmath64 can be constructed in @xmath426 time .    to compute the cut - segments of @xmath417 , for each point @xmath427",
    ", we need to compute the first point on the boundary of @xmath59 hit by extending a vertical line segment from @xmath68 upwards . for this",
    ", we first compute the vertically visible region of @xmath59 from the segment @xmath60 using the linear time algorithms in @xcite , and then find all such cut - segments from the points of @xmath413 , in @xmath428 time .",
    "the cut - segment tree @xmath417 can then be computed in @xmath429 time .    to compute the steiner points on the cut - segments , for each point @xmath427",
    ", we find the first point @xmath430 on the boundary of @xmath59 horizontally visible from @xmath68 .",
    "the points @xmath430 for all @xmath427 can be computed in totally @xmath428 time by using the algorithms in @xcite .",
    "next , we compute the steiner points on the cut - segments of @xmath417 . determining whether a point @xmath427 is horizontally visible to a cut - segment @xmath71 ( and",
    "if yes , put a corresponding steiner point on @xmath71 ) takes @xmath97 time using @xmath430 , as follows .",
    "we first check whether the @xmath66-coordinate of @xmath68 is between the @xmath66-coordinate of the lower endpoint of @xmath71 and that of the upper endpoint of @xmath71 ; if yes , we check whether @xmath71 is between @xmath68 and @xmath430 ( if yes , then @xmath68 is horizontally visible to @xmath71 ) ; otherwise , @xmath68 is not horizontally visible to @xmath71 .",
    "thus , all steiner points can be obtained in @xmath424 time .    for each cut - segment @xmath71 , to compute the edges between consecutive graph nodes on @xmath71 , it suffices to sort all steiner points on @xmath71 .",
    "the sorting on all cut - segments takes @xmath431 time .",
    "hence , the total time for building the graph @xmath64 is @xmath432 .",
    "the lemma thus follows .",
    "we define a gateway set @xmath433 for @xmath379 on @xmath64 such that for any point @xmath434 , there is a shortest path from @xmath379 to @xmath68 using @xmath64 containing a gateway of @xmath379 .",
    "@xmath433 is defined similarly as @xmath148 in section [ sec : newgraph ] , but only on the steiner points in the triangle @xmath383 ( because @xmath383 contains a shortest path from @xmath379 to any point in @xmath412 ) .",
    "specifically , for each _ relevant projection cut - segment _",
    "@xmath71 ( defined similarly as the relevant projection cut - lines in section [ sec : newgraph ] ) of @xmath379 to the right of @xmath379 , if @xmath379 is horizontally visible to @xmath71 , then the node of @xmath64 on @xmath71 immediately below the horizontal projection point of @xmath379 on @xmath71 is in @xmath433 .",
    "thus , @xmath435 .",
    "[ lem:130 ] for any point @xmath434 , there is a shortest path from @xmath379 to @xmath68 in @xmath59 using @xmath64 that contains a gateway of @xmath379 in @xmath433 .",
    "consider a point @xmath434 .",
    "note that @xmath68 defines a node in @xmath64 .",
    "let @xmath436 be the cut - segment through @xmath68 .",
    "since the triangle @xmath437 and @xmath386 , @xmath379 is horizontally visible to @xmath436 .",
    "if there is no other cut - segment of @xmath417 strictly between @xmath379 and @xmath436 , then @xmath436 must be a relevant projection cut - segment of @xmath379 .",
    "let @xmath92 be the gateway of @xmath379 on @xmath436 , i.e. , the graph node on @xmath436 immediately below the horizontal projection @xmath438 of @xmath379 on @xmath436 .",
    "note that the path @xmath439 is a shortest path from @xmath379 to @xmath68 since it is @xmath67-monotone .",
    "clearly , this path contains the gateway @xmath92 .",
    "if there is at least one cut - segment strictly between @xmath379 and @xmath436 , then if @xmath436 is a relevant cut - segment of @xmath379 , we can prove the lemma by a similar analysis as above ; otherwise , there is at least one node @xmath82 in @xmath417 such that @xmath84 is a relevant projection cut - segment of @xmath379 between @xmath379 and @xmath68 and @xmath68 defines a steiner point on @xmath84 ( this can be seen from the definition of the graph @xmath64 ; we omit the details ) .",
    "let @xmath440 be the horizontal projection of @xmath379 on @xmath84 and @xmath89 be the horizontal projection of @xmath68 on @xmath84 .",
    "the path @xmath441 is a shortest path from @xmath379 to @xmath68 since it is @xmath67-monotone .",
    "because @xmath89 is a steiner point on @xmath84 , this path must contain a gateway of @xmath379 on @xmath84 ( this gateway must be on @xmath442 ) .",
    "the lemma thus follows .    since @xmath443 , each point of @xmath413 is also a node of @xmath57 .",
    "we merge the two graphs @xmath57 and @xmath64 into one graph , denoted by @xmath444 , by treating the two nodes in these two graphs defined by the same point in @xmath413 as a single node . by lemmas [ lem:60 ] and [ lem:130 ]",
    ", we have the following result .    [ lem:140 ]",
    "if a shortest  path contains a point in @xmath412 , then there is a shortest  path along @xmath444 containing a gateway of @xmath379 in @xmath433 and a gateway of @xmath5 in @xmath301 .",
    "let @xmath68 be a point of @xmath412 that is contained in a shortest  path .",
    "by lemma [ lem:110 ] , there is a shortest path from @xmath4 to @xmath68 that contains @xmath379 . by lemma [ lem:130 ] ,",
    "there is a shortest path from @xmath379 to @xmath68 that contains a gateway of @xmath379 in @xmath433 . on the other hand ,",
    "since both @xmath5 and @xmath68 are in the ocean @xmath56 and @xmath445 , by lemma [ lem:60 ] , there exists a shortest path from @xmath5 to @xmath68 that contains a gateway of @xmath5 in @xmath301 .",
    "this proves the lemma .    by lemma [ lem:140 ] ,",
    "if there is a shortest path from @xmath379 to @xmath5 that contains a point of @xmath412 , then we can use the gateways of both @xmath379 and @xmath5 to find a shortest path along the graph @xmath444 . by using a similar algorithm as that for lemma [ lem:30 ] , we can compute the gateways of @xmath379 on @xmath64 .",
    "[ lem:150 ] with a preprocessing of @xmath446 time and @xmath423 space , we can compute the gateway set @xmath433 of @xmath379 in @xmath256 time .",
    "the algorithm is similar to that in lemma [ lem:30 ] for computing @xmath148 .",
    "one main difference is that here every two graph nodes on any cut - segment of @xmath417 are visible to each other . as the preprocessing",
    ", we build a sorted list of the graph nodes on each cut - segment of @xmath417 , and construct a fractional cascading data structure @xcite along @xmath417 for the sorted lists of all cut - segments . then for a point @xmath379 ,",
    "@xmath433 can be computed in @xmath256 time .",
    "so far , we have shown how to find a shortest  path if such a path contains a point in @xmath447 .",
    "it remains to handle the case when no shortest  path contains a point in @xmath447 ( including the case of @xmath414 ) , i.e. , no shortest path from @xmath379 to @xmath5 contains a point in @xmath447 .",
    "lemma [ lem:160 ] below shows that in this case , @xmath371 must be horizontally visible to @xmath448 and thus there is a trivial shortest path from @xmath379 to @xmath5 .",
    "[ lem:160 ] if no shortest path @xmath449 contains a point in @xmath412 ( this includes the case of @xmath414 ) , then @xmath5 must be horizontally visible to @xmath448 .",
    "let the points of @xmath412 be @xmath450 ordered along @xmath377 from @xmath351 to @xmath346 , and let @xmath451 and @xmath452 . under the condition of this lemma , since @xmath453",
    ", there exists a shortest path @xmath330 from @xmath379 to @xmath5 that crosses @xmath377 once , say , at a point @xmath68 in the interior of @xmath454 , for some @xmath129 with @xmath455 ( see fig .",
    "[ fig : visibility ] ) .",
    "for any two points @xmath407 and @xmath409 on @xmath330 , let @xmath456 denote the subpath of @xmath330 between @xmath407 and @xmath409 .",
    "hence , @xmath457 is in @xmath59 and @xmath458 is outside @xmath59 .",
    "then @xmath458 is in @xmath235 ( i.e. , @xmath235 is the union of @xmath56 and all corridor paths ) .     to @xmath5",
    "crossing the interior of @xmath454 at @xmath68 . ]",
    "we extend a horizontal line segment from @xmath459 ( resp . , @xmath460 ) to the right until hitting the first point on @xmath238 , denoted by @xmath461 ( resp . ,",
    "@xmath462 ) ; if @xmath461 and @xmath462 are not on the same elementary curve of @xmath239 ( in which case one or both of @xmath461 and @xmath462 are extremes on different elementary curves ) , then we keep moving one or both of @xmath461 and @xmath462 horizontally to the right until hitting the next point on @xmath238 . by the definitions of @xmath246 and @xmath413 , in this way",
    ", we can always put both @xmath461 and @xmath462 on the same elementary curve of @xmath239 , say @xmath260 ( see fig .",
    "[ fig : visibility ] ) ; let @xmath463 denote the portion of @xmath260 between @xmath461 and @xmath462 .",
    "let @xmath365 denote the region enclosed by @xmath464 , @xmath454 , @xmath465 , and @xmath463 .",
    "note that for any point @xmath466 , @xmath69 is horizontally visible to @xmath454 and thus is horizontally visible to @xmath448 . in the following , we will show that @xmath5 must be in @xmath365 , which proves the lemma .",
    "suppose to the contrary @xmath467 .",
    "we then show that the path @xmath458 must intersect @xmath468 or @xmath465 , which implies that there is a shortest @xmath379-@xmath5 path containing a point in @xmath447 , a contradiction ( recall that we have an assumption that no shortest  paths cross @xmath378 ) .",
    "indeed , if @xmath458 intersects @xmath468 ( resp . , @xmath465 ) , say , at a point @xmath69 , then we can obtain a new @xmath379-@xmath5 path @xmath331 by replacing @xmath469 with an @xmath67-monotone path @xmath470 ( resp . ,",
    "@xmath471 ) , and @xmath331 is a shortest @xmath379-@xmath5 path containing a point in @xmath447 .",
    "below , we show that @xmath458 must intersect @xmath468 or @xmath465 .",
    "note that @xmath463 may overlap with a gate of a canal . depending on whether @xmath463 overlaps with any canal gate ,",
    "there are two possible cases .    1 .",
    "if @xmath463 does not overlap with any canal gate , then since @xmath371 , @xmath467 , @xmath368 , and @xmath472 , if we go from @xmath5 to @xmath68 , we must enter @xmath365 .",
    "the only place on the boundary of @xmath365 we can cross to enter @xmath365 is either @xmath473 or @xmath465 .",
    "hence , @xmath474 must intersect @xmath468 or @xmath465 .",
    "if @xmath463 overlaps with a canal gate , say @xmath475 , then one may wonder that @xmath474 could enter the interior of @xmath365 through @xmath475 without crossing any of @xmath473 and @xmath465 . since @xmath475 is a canal gate , one of @xmath475 s endpoints , say ,",
    "@xmath65 , must be a corridor path terminal , and @xmath65 may or may not be on @xmath463",
    ". if @xmath65 is on @xmath463 , then since @xmath65 is in @xmath246 , @xmath65 can not be in the interior of @xmath463 and can only be at an endpoint of @xmath463 .",
    "let @xmath202 be the canal that has @xmath475 as a gate , and @xmath476 be the corridor path of @xmath202 .",
    "if @xmath474 enters the interior of @xmath365 through @xmath475 , then it must travel through the canal @xmath202 , implying that @xmath477 contains the corridor path @xmath476 . since @xmath65 is on @xmath476",
    ", @xmath474 contains @xmath65 .",
    "if @xmath65 is on @xmath463 ( and thus is an endpoint of @xmath463 ) , then @xmath65 is one of @xmath461 or @xmath462 ; hence , @xmath474 intersects @xmath468 or @xmath465 .",
    "suppose now @xmath65 is not on @xmath463 .",
    "then an endpoint of @xmath463 , say , @xmath461 , lies on @xmath475 ( but @xmath478 ) .",
    "further , @xmath474 goes through @xmath65 , and then enters @xmath365 , but without intersecting any of @xmath473 and @xmath465 .",
    "thus , @xmath474 must cross some point @xmath69 of @xmath475 to enter @xmath365 .",
    "we can then replace the portion @xmath479 of @xmath474 by the segment @xmath480 to obtain a new shortest @xmath5-@xmath68 path .",
    "since @xmath461 divides @xmath475 into two parts , one outside @xmath365 and containing @xmath65 and the other intersecting @xmath365 and containing @xmath69 , the segment @xmath481 contains @xmath461 .",
    "hence , the new shortest @xmath5-@xmath68 path intersects @xmath468 .",
    "the lemma thus follows .    by lemma [ lem:160 ] ,",
    "if the condition of the lemma holds , then we can always find a trivial shortest path from @xmath379 to @xmath5 by shooting vertical and horizontal rays from @xmath379 and @xmath5 , respectively .",
    "we have finished all possible cases for finding a shortest  path when @xmath482 and @xmath371 .",
    "the next lemma is concerned with computing the special points @xmath483 , and @xmath379 for any point @xmath4 in @xmath59 .",
    "[ lem:170 ] with a preprocessing of @xmath484 time and space , the three special points @xmath351 , @xmath346 , and @xmath379 can be found in @xmath27 time for any query point @xmath4 in @xmath59 , where @xmath485 .",
    "consider any query point @xmath482 . to determine @xmath351 , @xmath346 , and @xmath379 , based on our previous discussions",
    ", it suffices to compute the two points @xmath347 and @xmath349 .",
    "we only show how to design a data structure for computing @xmath347 since the solution for finding @xmath349 is similar .",
    "note that @xmath486 .    in the preprocessing , for each vertex @xmath51 of @xmath59",
    ", we find whether @xmath51 is horizontally visible to @xmath60 , and if yes , mark @xmath51 as an _ h - vertex_. all h - vertices of @xmath59 can be marked by computing the horizontal visibility of @xmath59 from @xmath60 in @xmath484 time @xcite .",
    "also , in @xmath484 time , we compute the euclidean shortest path tree @xmath487 from @xmath277 to all vertices of @xmath59 and the corresponding shortest path map @xmath488 in @xmath59 @xcite ; similarly , we compute the shortest path tree @xmath489 from @xmath335 and the corresponding shortest path map @xmath490 .    for each vertex @xmath491 , we associate @xmath51 with two special vertices : @xmath492 and @xmath493 , defined as follows . the vertex @xmath492 is the first h - vertex on the path in @xmath487 from @xmath51 to @xmath277 and @xmath493 is the child vertex of @xmath492 on the path in @xmath487 from @xmath51 to @xmath277 ; if @xmath494 , then @xmath493 does not exist and we set @xmath495 .",
    "note that @xmath493 is not an h - vertex if it exists .",
    "the @xmath496 vertices for all vertices in @xmath487 can be computed in @xmath484 time by a depth - first search on @xmath487 starting at @xmath277 . for each vertex @xmath497",
    ", we compute only one special vertex for @xmath51 , @xmath498 , which is the first h - vertex on the path in @xmath489 from @xmath51 to @xmath335 .",
    "the @xmath260 vertices for all vertices of @xmath489 can also be computed in @xmath484 time .",
    "this finishes our preprocessing , which takes @xmath484 time in total .",
    "below we find the point @xmath347 in @xmath27 time .",
    "let @xmath336 and @xmath337 be the euclidean shortest paths in @xmath59 from @xmath4 to @xmath277 and @xmath335 , respectively . for any point @xmath68 ,",
    "let @xmath499 denote its @xmath66-coordinate .    by using the shortest path map",
    "@xmath488 , we find the vertex , denoted by @xmath51 , which directly connects to @xmath4 on @xmath336 . likewise , we find the vertex @xmath82 that directly connects to @xmath4 on @xmath337 using @xmath490 . both @xmath51 and @xmath82",
    "are found in @xmath27 time . depending on whether @xmath500 ,",
    "there are two main cases .    1 .",
    "if @xmath500 , then clearly @xmath501 .",
    "let @xmath502 and @xmath503 .",
    "note that @xmath99 and @xmath504 are available once we find @xmath51 and @xmath82 . depending on whether @xmath505 , we further have two subcases . 1 .   if @xmath505 , then we claim @xmath506",
    ". indeed , since @xmath338 is the last common vertex of @xmath336 and @xmath337 if we move on them from @xmath4 , no vertex on @xmath339 can be horizontally visible to @xmath60 except possibly @xmath338 . because @xmath505 , @xmath505 must be on @xmath339 . since @xmath505 is horizontally visible to @xmath60 , @xmath507 must hold .",
    "+ by the definition of @xmath347 , the above claim implies @xmath508 .",
    "2 .   if @xmath509 , then an easy observation is @xmath510 .",
    "let @xmath511 .",
    "note that due to @xmath512 and @xmath509 , @xmath493 exists .",
    "+ if @xmath513 , then the horizontal visibility of @xmath100 to @xmath60 is `` blocked '' by the path @xmath514 ( e.g. , see fig .",
    "[ fig : funnel2](a ) ) .",
    "thus we obtain @xmath515 .",
    "+ if @xmath516 , then the horizontal visibility of @xmath100 to @xmath60 is `` blocked '' by the path @xmath517 ( e.g. , see fig .",
    "[ fig : funnel2](b ) ) .",
    "thus we obtain that @xmath347 is the horizontal projection of @xmath504 on the line segment @xmath518 , which can be computed in @xmath97 time",
    ". 2 .   if @xmath153 , then @xmath519 . if @xmath4 is horizontally visible to @xmath60 ( which can be determined in @xmath27 time using the horizontal visibility decomposition of @xmath59 ) , then @xmath520 .",
    "otherwise , let @xmath502 and @xmath503 . depending on whether @xmath521 , we further have two subcases . 1 .   if @xmath522 , then @xmath493 exists and we let @xmath511 . note that @xmath336 is a convex chain .",
    "similar to the above discussion , if @xmath513 , then we have @xmath515 ; otherwise , @xmath347 is the horizontal projection of @xmath504 on @xmath518 .",
    "if @xmath521 , then @xmath4 connects directly to @xmath99 on @xmath336 .",
    "similar to the above discussion , if @xmath523 , then we have @xmath515 ; otherwise , @xmath347 is the horizontal projection of @xmath504 on @xmath524 .",
    "therefore , we can find the point @xmath347 in @xmath27 time .",
    "the lemma thus follows .",
    "we have discussed all possible cases of finding a shortest  path when @xmath4 is in a bay @xmath59 and @xmath5 is in the ocean @xmath56 , and in each case , we can obtain a shortest path in @xmath27 time .",
    "let @xmath525 be the bay containing @xmath4 with gate @xmath526 , and @xmath527 be the bay containing @xmath5 with gate @xmath528 .",
    "in this case , any shortest  path must cross both @xmath526 and @xmath528 .",
    "the algorithm for this case is similar to the one for the case of @xmath371 .",
    "again , we need to consider different cases of how a shortest  path may cross different portions of both the gates @xmath526 and @xmath528 .",
    "we define the points @xmath351 , @xmath346 , and @xmath379 in @xmath525 for @xmath4 in the same way as before , but denote them by @xmath62 , @xmath63 , and @xmath61 instead .",
    "similarly , we define the corresponding three points @xmath529 , @xmath530 , and @xmath531 in @xmath527 for @xmath5 . based on our previous discussions",
    ", we have the following cases .    1 .",
    "there is a shortest  path containing a point @xmath532 in @xmath533 and a point @xmath534 in @xmath535 .",
    "note that both @xmath532 and @xmath534 are on their bay gates and thus are in @xmath56 .",
    "+ in this case , there must be a shortest  path that is a concatenation of a shortest path @xmath536 from @xmath4 to @xmath532 in @xmath525 , a shortest path @xmath537 from @xmath532 to @xmath534 in @xmath235 , and a shortest path @xmath538 from @xmath534 to @xmath5 in @xmath527 .",
    "the path @xmath536 can be found by using @xmath539 , i.e. , the euclidean two - point shortest path query data structure on @xmath525 @xcite , and similarly , @xmath538 can be found by using @xmath540 .",
    "the path @xmath537 can be found by using our data structure for @xmath235 in lemma [ lem:80 ] .",
    "2 .   there is a shortest  path that contains @xmath61 and a point @xmath534 in @xmath535 .",
    "+ in this case , there must be a shortest  path that is a concatenation of a shortest @xmath4-@xmath61 path @xmath541 in @xmath525 , a shortest @xmath61-@xmath534 path @xmath542 , and a shortest @xmath534-@xmath5 path @xmath538 in @xmath527 .",
    "the path @xmath541 ( resp . , @xmath538 ) can be found by using @xmath539 ( resp . ,",
    "@xmath540 ) , and the path @xmath542 can be found by using similar algorithms as discussed above since @xmath534 is in @xmath56 .",
    "3 .   there is a shortest  path that contains @xmath531 and a point @xmath532 in @xmath533 . +",
    "this case is solved by using the similar approach as for case 2 above .",
    "there is a shortest  path that contains @xmath61 and @xmath531 .",
    "+ in this case , there must be a shortest  path that is a concatenation of a shortest path @xmath541 from @xmath4 to @xmath61 in @xmath525 , a shortest path @xmath543 from @xmath61 to @xmath531 , and a shortest path @xmath544 from @xmath531 to @xmath5 in @xmath527 .",
    "the path @xmath541 ( resp . , @xmath544 ) can be found by using @xmath539 ( resp . , @xmath540 ) .",
    "it remains to show how to compute @xmath543 below .",
    "recall that we have defined a graph @xmath545 in @xmath525 on the points of @xmath546 , which consists of all points of @xmath246 lying on @xmath526 .",
    "we also find a gateway set @xmath547 for @xmath61 on @xmath545 .",
    "similarly , for @xmath527 and its gate @xmath528 , we define @xmath548 , @xmath549 , and @xmath550 .",
    "let @xmath551 be the graph formed by merging @xmath57 , @xmath545 , and @xmath549 . a shortest path from @xmath61 to @xmath531 can be found based on lemmas [ lem:180 ] and [ lem:190 ] below , which are similar to lemmas [ lem:140 ] and [ lem:160 ] , respectively .",
    "[ lem:180 ] if there is a shortest path from @xmath61 to @xmath531 containing a point in @xmath552 and a point in @xmath553 , then there is a shortest path from @xmath61 to @xmath531 along @xmath551 that contains a gateway of @xmath61 in @xmath547 and a gateway of @xmath531 in @xmath550 .",
    "suppose there is a shortest @xmath61-@xmath531 path containing a point @xmath554 in @xmath552 and a point @xmath555 in @xmath553 .",
    "then by lemma [ lem:130 ] , there is a shortest @xmath61-@xmath554 path @xmath556 along @xmath545 containing a gateway of @xmath61 in @xmath547 and there is a shortest @xmath555-@xmath531 path @xmath557 along @xmath549 containing a gateway of @xmath531 in @xmath550 .",
    "since both @xmath554 and @xmath555 are in @xmath246 , by lemma [ lem:40 ] , there exists a shortest @xmath554-@xmath555 path @xmath558 along @xmath57 .",
    "the concatenation of @xmath556 , @xmath558 , and @xmath557 is a shortest @xmath61-@xmath531 path , which is along the graph @xmath551 and contains a gateway of @xmath61 and a gateway of @xmath531 .",
    "[ lem:190 ] if no shortest @xmath61-@xmath531 path contains any point of @xmath559 , then @xmath531 must be horizontally visible to @xmath560 ; similarly , if no shortest @xmath61-@xmath531 path contains any point of @xmath561 , then @xmath61 must be horizontally visible to @xmath562 .",
    "we prove only the case when no shortest @xmath61-@xmath531 path contains any point of @xmath559 , @xmath531 must be horizontally visible to @xmath560 ( the other case is similar ) .",
    "let @xmath330 be a shortest @xmath61-@xmath531 path that intersects @xmath526 at a point @xmath554 and intersects @xmath528 at a point @xmath555 ( see fig .",
    "[ fig : vispath ] ) .",
    "let @xmath563 denote the subpath of @xmath330 between any two points @xmath305 and @xmath306 on @xmath330 .",
    "we assume @xmath564 , @xmath565 , and @xmath566 , since such a path @xmath330 always exists .",
    "let the points of @xmath546 on @xmath567 be @xmath450 ordered along @xmath567 from @xmath62 to @xmath63 , and let @xmath568 and @xmath569 .",
    "suppose @xmath554 is in the interior of @xmath454 , for some @xmath129 with @xmath455 .",
    "we define @xmath461 , @xmath462 , @xmath463 , and @xmath365 in the same way as in the proof of lemma [ lem:160 ] .",
    "since @xmath555 is in @xmath56 , by the proof of lemma [ lem:160 ] , @xmath555 must be in the region @xmath365 . further , since @xmath555 is on @xmath570 , @xmath555 is on @xmath463 .",
    "thus , @xmath571 is not empty .",
    "since @xmath528 is a line segment , @xmath571 is also a line segment .",
    "let @xmath572 .",
    "thus , @xmath573 .",
    "recall that @xmath531 is visible to @xmath574 and @xmath575 is horizontal .",
    "hence , to prove that @xmath531 is horizontally visible to @xmath560 , it suffices to prove that @xmath529 is horizontally visible to @xmath560 . for this",
    ", it suffices to prove that @xmath529 must be on @xmath576 since every point on @xmath577 is horizontally visible to @xmath560 . in the following , we prove @xmath578 .     to",
    "@xmath531 crossing @xmath579 .",
    "if this happens , we can find another shortest path @xmath580 , which contains @xmath459 . in this example , @xmath581 and @xmath582 . ]",
    "suppose to the contrary @xmath583 ( see fig .",
    "[ fig : vispath ] ) . without loss of generality ,",
    "we assume @xmath407 is closer to @xmath529 than @xmath409 . since @xmath573 , @xmath584 .",
    "this implies that @xmath407 is not an endpoint of @xmath528 , and thus @xmath407 must be an endpoint of @xmath463 ( i.e. , one of @xmath461 or @xmath462 ) since @xmath572 ; assume @xmath581 .",
    "we extend @xmath473 horizontally into the bay @xmath527 until hitting a point , say @xmath69 , on the boundary of @xmath527 ( see fig .",
    "[ fig : vispath ] ) . the horizontal segment @xmath579 partitions @xmath527 into two sub - polygons such that @xmath555 and @xmath529 are in different sub - polygons . since @xmath575 is horizontal , @xmath555 and @xmath531 are also in different sides of @xmath579 , implying that the path @xmath585 must intersect @xmath579 since @xmath585 is in @xmath527 .",
    "let @xmath314 be the intersection of @xmath585 and @xmath579 ( see fig .",
    "[ fig : vispath ] ) .",
    "then , the concatenation of @xmath586 , @xmath587 , and @xmath588 is also a shortest path from @xmath531 to @xmath61 since @xmath589 is @xmath67-monotone . but",
    "this means that there is a shortest @xmath61-@xmath531 path containing @xmath459 , contradicting with the lemma condition that no shortest @xmath61-@xmath531 path contains any point of @xmath559 .",
    "the above arguments prove that @xmath529 is on @xmath576 .",
    "the lemma thus follows .    by lemmas [ lem:180 ] and [ lem:190 ] ,",
    "we can find a shortest @xmath61-@xmath531 path by either using the gateways of @xmath61 and @xmath531 in the merged graph @xmath551 or shooting horizontal and vertical rays from @xmath61 and @xmath531 .",
    "we have finished all possible cases for finding a shortest  path when the two query points are in different bays . for each case",
    ", we compute a  candidate \" shortest  path , and take the one with the smallest length among all these cases ( there are only a constant number of them ) .",
    "it remains to solve the canal case , i.e. , when the query points are in canals .",
    "the algorithm is similar to that for the bay case ; the only difference is that we have to take care of two gates for each canal .",
    "specifically , suppose @xmath4 is in a canal @xmath590 and @xmath5 is in a canal @xmath591 .",
    "if @xmath592 , then there must be a shortest  path @xmath330 that intersects a gate of @xmath590 at a point @xmath554 and intersects a gate of @xmath591 at a point @xmath555 such that the subpath @xmath593 is in @xmath590 , the subpath @xmath594 is in @xmath591 , and the subpath @xmath558 is in @xmath235 .",
    "hence , we can use a similar approach as for the bay case to find a shortest  path by considering all four gate pairs of @xmath590 and @xmath591 .",
    "if @xmath595 , while we can treat this case in the same way as for the case of @xmath592 , we need to consider one more possible situation when a shortest  path may be contained entirely in @xmath590 , which is easy since @xmath590 is a simple polygon .",
    "if one of @xmath590 or @xmath591 is a bay , the case can be handled in a similar fashion .",
    "we summarize the whole algorithm in the proof of the following theorem .",
    "[ theo:20 ] we can build a data structure of size @xmath596 in @xmath597 time that can answer each two - point @xmath3 shortest path query in @xmath27 time ( i.e. , for any two query points @xmath4 and @xmath5 , the length of a shortest  path can be found in @xmath27 time and an actual path can be reported in additional time linear to the number of edges of the output path ) .",
    "our preprocessing algorithm consists of the following major steps .    1 .",
    "compute a triangulation of the free space @xmath56 in @xmath598 time @xcite . then produce all bays , canals , corridor paths , @xmath56 , and @xmath246 in @xmath43 time @xcite .",
    "2 .   compute the vertical and horizontal visibility decompositions of @xmath0 in @xmath598 time @xcite . build a point location data structure @xcite for each of the two decompositions in @xmath41 time , which is used for performing any vertical or horizontal ray - shooting in @xmath27 time .",
    "3 .   construct the graph @xmath57 of size @xmath599 in @xmath600 time by lemma [ lem:50 ] .",
    "4 .   perform the preprocessing of lemma [ lem:70 ] in @xmath312 time and @xmath313 space .",
    "perform the preprocessing of lemma [ lem:80 ] in @xmath324 time and @xmath320 space .",
    "compute a two - point euclidean shortest path query data structure @xmath333 in each bay or canal @xmath59 .",
    "since the total number of vertices of all bays and canals is @xmath41 , this step takes @xmath41 time .",
    "7 .   construct the graph @xmath64 for the gate @xmath60 of every bay or canal by lemma [ lem:120 ] .",
    "the total space for all such graphs is @xmath601 and the total time for building all these graphs is @xmath600 , as proved below .",
    "first , each point of @xmath246 can be on at most one bay or canal gate .",
    "thus , the sum of @xmath602 s in lemma [ lem:120 ] over all gates @xmath60 is @xmath603 , which is @xmath201 .",
    "second , the total number of obstacle vertices of all bays and canals is @xmath41 , and each canal has two gates .",
    "hence , the sum of @xmath425 s in lemma [ lem:120 ] over all bay and canals @xmath59 is @xmath41 .",
    "perform the preprocessing of lemma [ lem:150 ] for the graphs @xmath64 of all gates @xmath60 , which can be done in totally @xmath604 time and @xmath605 space .",
    "merge the graph @xmath57 and the graphs @xmath64 for all gates @xmath60 into a single graph @xmath606 , which takes @xmath201 time since there are @xmath201 points in @xmath246 .",
    "thus , the size of @xmath606 is @xmath58 .",
    "10 . for each node @xmath51 of @xmath606 , compute a shortest path tree rooted at @xmath51 in @xmath606 . maintain a shortest path length table such that for any two nodes @xmath82 and @xmath51 of @xmath606 , the length of a shortest path between @xmath82 and @xmath51 in @xmath606 can be obtained in @xmath97 time .",
    "this step takes @xmath321 space and @xmath607 time .",
    "perform the preprocessing of lemma [ lem:170 ] for each bay and canal , which takes @xmath41 space and @xmath41 time in total .    in summary ,",
    "the total preprocessing space and time are @xmath596 and @xmath597 , respectively .",
    "consider any two query points @xmath4 and @xmath5 .",
    "next , we discuss our query algorithm that computes the length of a shortest  path in @xmath27 time and reports an actual path in additional time linear to the number of edges of the output path .",
    "we will not explicitly discuss how to report an actual path ( which is similar to that in lemma [ lem:80 ] and is easy ) .",
    "first of all , as discussed in section [ sec : pre ] , we determine whether there exists a trivial shortest  path by shooting horizontal and vertical rays from @xmath4 and @xmath5 , which can be done in @xmath27 time . in the following ,",
    "we assume that there is no trivial shortest  path . depending on whether the query points are in the bays , canals , or the ocean @xmath56",
    ", there are several possible cases .",
    "both query points are in @xmath56 . : :    in this case , we use the algorithm for lemma [ lem:80 ] to find a    shortest  path in @xmath27 time .",
    "only one query point is in @xmath56 .",
    ": :    without loss of generality , we assume that @xmath4 is in a bay    or a canal @xmath59 and @xmath5 is in    @xmath56 .",
    "further , we assume that @xmath59 is a    canal since the case that @xmath59 is a bay can be considered    as a special case .",
    "+    let @xmath608 and @xmath609 be the two gates of    @xmath59 .",
    "we define three points @xmath610 ,    @xmath611 , and @xmath612 for    @xmath4 in @xmath59 with respect to the gate    @xmath608 in the same way as we defined @xmath379 ,    @xmath351 , and @xmath346 before .",
    "similarly , we define    @xmath613 , @xmath614 , and    @xmath615 for @xmath4 in @xmath59 with    respect to the gate @xmath609 .",
    "these points can be computed in    @xmath27 time by lemma [ lem:170 ] .",
    "then , we compute the    lengths of the following `` candidate '' shortest  paths and return the    one with the smallest length .    +    1 .   for each point",
    "@xmath616 ,    the path which is a concatenation of a shortest path    @xmath159 from @xmath4 to @xmath68 in    @xmath59 and a shortest path @xmath458 from    @xmath68 to @xmath5 in @xmath235 .",
    "+    the path @xmath159 can be found in    @xmath27 time by using the data structure    @xmath333 on @xmath59 , and the path    @xmath458 can be found in @xmath27 time by    lemma [ lem:80 ] .    2 .   for each point @xmath617 , the path    which is a concatenation of a shortest path @xmath159    from @xmath4 to @xmath68 in @xmath59 and a    particular path @xmath458 from @xmath68 to    @xmath5 .",
    "+    the path @xmath159 can be found in    @xmath27 time by using the data structure    @xmath333 on @xmath59 .",
    "the path    @xmath458 is determined as follows .",
    "first , based on lemma    [ lem:160 ] ( although @xmath59 is a bay in lemma [ lem:160 ] , the    result also holds for canals because the lemma was proved with respect    to a gate regardless of whether it is a gate of a bay or a canal ) , we    check whether there exists a path from @xmath68 to    @xmath5 consisting of only two line segments , by performing    horizontal and vertical ray - shootings .",
    "if yes , then such a path is    @xmath458 .",
    "otherwise , by lemmas [ lem:140 ] and [ lem:160 ] ,    we find a shortest path from @xmath68 to @xmath5 along    the merged graph @xmath606 by using the gateways of    @xmath68 and the gateways of @xmath5 , which can be    obtained in @xmath27 time by lemmas [ lem:150 ] and    [ lem:70 ] , respectively .",
    "since both @xmath68 and @xmath5    have @xmath257 gateways , a shortest    @xmath68-@xmath5 path can be determined in    @xmath27 time using the gateway graph as discussed at    the end of section [ sec : newgraph ] .",
    "neither query point is in @xmath56 . : :    let @xmath525 be the bay or canal that contains    @xmath4 and @xmath527 be the bay or canal that    contains @xmath5 .",
    "+    if @xmath618 and @xmath525 is a bay , then by lemma    [ lem:90 ] , we can find a shortest  path by using the data structure    @xmath539 in @xmath27 time .",
    "+    suppose @xmath619",
    ". then we assume both    @xmath525 and @xmath527 are canals since the other    cases are just special cases of this case .",
    "let @xmath620 and    @xmath621 be the two gates of @xmath525 and    @xmath622 and @xmath623 be the two gates of    @xmath527 .",
    "similarly as before , we define the points    @xmath624 , @xmath625 , and    @xmath626 for @xmath4 with respect to    @xmath627 , and @xmath628 ,    @xmath629 , and @xmath630 for    @xmath5 with respect to @xmath631 , for    @xmath632 . these points can all be determined in    @xmath27 time by lemma [ lem:170 ] .",
    "then we compute the    lengths of the following `` candidate '' shortest  paths and return the    one with the smallest length .",
    "+    1 .   for each pair of points @xmath554 and @xmath555    such that    @xmath633    and    @xmath634 ,    the path which is a concatenation of a shortest path    @xmath593 from @xmath4 to @xmath554 in    @xmath525 , a shortest path from @xmath554 to    @xmath555 in @xmath235 , and a shortest path    @xmath594 from @xmath555 to @xmath5 in    @xmath527 .",
    "+    the paths @xmath593 and @xmath594 can be    found in @xmath27 time by using    @xmath539 and @xmath540 , respectively .",
    "the path @xmath558 can be obtained in    @xmath27 time by lemma [ lem:80 ] .    2 .   for each point @xmath635 and    each point @xmath636 , the path    which is a concatenation of a shortest path from @xmath4 to    @xmath554 in @xmath525 , a particular path    @xmath558 from @xmath554 to    @xmath555 , and a shortest path from @xmath555 to    @xmath5 in @xmath527 .",
    "+    the paths @xmath593 and @xmath594 can be    found in @xmath27 time by using    @xmath539 and @xmath540 , respectively .    since @xmath555 is in @xmath56 , the particular path    @xmath558",
    "is defined similarly as the path    @xmath458 in the second subcase of the above case when    only one query point @xmath5 is in @xmath56 and    thus can be obtained by the similar approach .",
    "3 .   for each point @xmath637 and each    point @xmath638 , the path which    is a concatenation of a shortest path from @xmath4 to    @xmath554 in @xmath525 , a particular path    @xmath558 from @xmath554 to    @xmath555 , and a shortest path from @xmath555 to    @xmath5 in @xmath527 .",
    "+    this subcase is symmetric to the subcase immediately above and can be    handled similarly .",
    "4 .   for each point @xmath635 and    each point @xmath638 , the path    which is a concatenation of a shortest path from @xmath4 to    @xmath554 in @xmath525 , a particular path    @xmath558 from @xmath554 to    @xmath555 , and a shortest path from @xmath555 to    @xmath5 in @xmath527 .",
    "+    the paths @xmath593 and @xmath594 can be    found in @xmath27 time by using    @xmath539 and @xmath540 , respectively .",
    "the particular path @xmath558 is determined similarly    as the path @xmath458 in the second subcase of the above    case when only one query point @xmath5 is in    @xmath56 , but based on lemmas [ lem:180 ] and [ lem:190 ]    instead .",
    "note that although @xmath525 and @xmath527    are bays in these lemmas , the results also hold for canals ( actually ,    they are proved with respect to two gates regardless of whether they    are gates of bays or canals ) .",
    "specifically , we determine    @xmath558 as follows .",
    "based on lemma [ lem:190 ] , we    first check whether there exists a path from @xmath554 to    @xmath555 consisting of only two line segments , by horizontal    and vertical ray - shootings .",
    "if yes , then such a path is    @xmath558 .",
    "otherwise , by lemmas [ lem:180 ] and    [ lem:190 ] , we find a shortest @xmath554-@xmath555 path    along the merged graph @xmath606 by using the gateways    of @xmath554 and the gateways of @xmath555 , which can    be computed in @xmath27 time by lemma [ lem:150 ] .",
    "since    both @xmath554 and @xmath555 have    @xmath257 gateways , a shortest    @xmath554-@xmath555 path can be obtained in    @xmath27 time using the gateway graph as discussed in    section [ sec : newgraph ] .",
    "finally , if @xmath618 and @xmath525 is a canal , then the algorithm is similar as for the above case with the difference that we must consider an additional `` candidate '' path that is a shortest  path inside @xmath525 , which can be found in @xmath27 time by using the data structure @xmath539 .",
    "hence , in any case , we find a shortest  path in @xmath27 time .",
    "the theorem thus follows .",
    "if we replace all enhanced graphs , e.g. , @xmath57 and @xmath64 for every gate @xmath60 , by the corresponding graphs similar to @xmath79 in @xcite as discussed in section [ sec : pre ] , then we obtain the following results .    we can build a data structure in @xmath31 time and space , such that each two - point shortest path query is answered in @xmath32 time ; alternatively , we can build a data structure in @xmath21 time and @xmath20 space , such that each two - point shortest path query is answered in @xmath33 time .",
    "if we replace all the enhanced graphs @xmath57 and @xmath64 for every gate @xmath60 of the bays and canals by the graphs similar to @xmath79 in @xcite as discussed in section [ sec : pre ] , then the size of the new merged graph , denoted by @xmath639 , becomes @xmath294 instead of @xmath259 .",
    "hence , the data structure for theorem [ theo:20 ] needs @xmath18 space and can be built in @xmath18 time by using the approach in @xcite .",
    "however , using the new graph @xmath639 , each query for any two points in @xmath56 can be answered in @xmath640 time because there are @xmath641 gateways for each query point .",
    "therefore , any general two - point shortest path query can be answered in @xmath642 time , by using a similar query algorithm as in theorem [ theo:20 ] .",
    "we omit the details .    in the result above , we compute a shortest path tree rooted at each node in the merged graph @xmath639 .",
    "alternatively , we can compute a shortest path map in the free space @xmath197 for each node @xmath51 of @xmath639 , such that given any query point @xmath5 , the length of a shortest path from @xmath51 to @xmath5 can be found in @xmath27 time and an actual path can be reported in additional time linear to the number of edges of the output path .",
    "each such shortest path map is of size @xmath41 and can be computed in @xmath43 time @xcite ( after the free space @xmath197 is triangulated ) . since the size of @xmath639 is @xmath294 , the overall preprocessing time and space are @xmath643 and @xmath20 , respectively . for querying , since a query point may have @xmath256 gateways and for each gateway @xmath51 , we can determine the shortest path from @xmath51 to the other query point in @xmath27 time , the total query time is @xmath644 .",
    "we omit the details .",
    "in this section , we extend our techniques in section [ sec : newgraph ] to the weighted rectilinear case . in the weighted rectilinear case ,",
    "every polygonal obstacle @xmath34 is _ rectilinear _ and _ weighted _ , i.e. , each edge of @xmath36 is either horizontal or vertical and @xmath36 has a weight @xmath645 ( @xmath646 is possible ) . if a line segment @xmath91 is in @xmath36 , then the _ weighted length _ of @xmath91 is @xmath647 , where @xmath65 is the @xmath3 length of @xmath91 .",
    "any polygonal path @xmath330 can be divided into a sequence of maximal line segments such that each segment is contained in the same obstacle or in the free space @xmath197 ; the _ weighted length _ of @xmath330 is the sum of the weighted lengths of all maximal line segments of @xmath330 .    consider a vertex @xmath51 of any rectilinear obstacle @xmath36 such that the interior angle of @xmath36 at @xmath51 is @xmath648 .",
    "we define the _ internal projections _ of @xmath51 on the boundary @xmath649 of @xmath36 as follows .",
    "suppose @xmath650 and @xmath651 are the two edges of @xmath36 incident to @xmath51 .",
    "we extend @xmath650 into the interior of @xmath36 along the direction from @xmath504 to @xmath51 until we hit @xmath649 at the first point , which is an _ internal projection _ of @xmath51 ; similarly , we define another interval projection of @xmath51 by extending @xmath651 .",
    "internal projections are used to control shortest paths that pass through the interior of obstacles .",
    "let @xmath652 be the set of all obstacle vertices of @xmath0 , their internal projections , and all type-1 steiner points .",
    "then @xmath653 . we build a graph @xmath654 on @xmath655 similar to the one presented in section [ sec : newgraph ] , with the following differences .",
    "( 1 ) the visibility here is based on the new definition above .",
    "( 2 ) since a path can travel through the interior of any obstacle , for each cut - line @xmath71 , an edge in @xmath654 connects every two consecutive steiner points on @xmath71 , whose weight is the weighted length of the line segment connecting the two points .",
    "( 3 ) in addition to the vertical cut - lines , there are also horizontal cut - lines , which are defined similarly and have type-2 and type-3 steiner points defined on them similarly to those on the vertical cut - lines .",
    "thus , @xmath654 has @xmath55 nodes and edges .",
    "we obtain all internal projections of @xmath655 by computing the horizontal and vertical visibility decompositions of every obstacle in @xmath0 .",
    "we find the four projection points on @xmath74 ( i.e. , @xmath656 , and @xmath78 ) for all obstacle vertices @xmath68 of @xmath0 in @xmath42 time by computing the horizontal and vertical visibility decompositions of @xmath197",
    ". these can be all done in totally @xmath42 time .",
    "then we compute the vertical and horizontal cut - line trees , which takes @xmath42 time since @xmath653 .",
    "next , we compute the steiner points and the graph edges .",
    "below , we only show how to compute those related to the vertical cut - lines ; those related to the horizontal cut - lines can be computed in a similar way .",
    "let @xmath657 denote the vertical cut - line tree .    as in lemma [ lem:10 ] , we can compute the type-2 and type-3 steiner points on all cut - lines of @xmath657 by traversing @xmath657 in a top - down manner .",
    "since the internal projections and @xmath658 for each obstacle vertex @xmath68 have been obtained , we can compute all @xmath55 such steiner points in @xmath139 time ; the corresponding horizontal graph edges connecting these steiner points and the points of @xmath655 can also be computed .    it remains to compute the graph edges connecting every pair of consecutive steiner points on each cut - line of @xmath657 , which takes @xmath178 time by a plane sweeping algorithm , as follows .",
    "we first sort all steiner points on each cut - line .",
    "we then sweep a vertical line @xmath143 from left to right and use a balanced binary search tree @xmath144 to maintain the intervals between the obstacle edges of @xmath0 intersecting @xmath143 . by standard techniques , we augment @xmath144 to also maintain the weighted length information along @xmath143 such that for any two points @xmath68 and @xmath69 on @xmath143 , the weighted length of @xmath70 can be obtained in @xmath27 time using @xmath144 . during the sweeping , when @xmath143 encounters a cut - line @xmath71 , for every two consecutive steiner points @xmath68 and @xmath69 on @xmath71 , we use @xmath144 to determine in @xmath27 time the weighted length of the edge connecting @xmath68 and @xmath69 . since there are @xmath659 pairs of consecutive steiner points on all cut - lines , it takes @xmath178 time to compute all these graph edges .",
    "consider any two query points @xmath4 and @xmath5 .",
    "for simplicity of discussion , we assume that both @xmath4 and @xmath5 are in @xmath197 ( the general case can also be handled similarly ) . with a preprocessing of @xmath45 time and space ,",
    "a shortest  path that does not contain any vertex of @xmath655 can be found in @xmath27 time @xcite .",
    "thus in the following , we focus on finding a shortest  path containing at lease one vertex of @xmath655 .",
    "let @xmath660 be the set of @xmath4 and the four projections of @xmath4 on @xmath74 , i.e. , @xmath661 ; similarly , let @xmath662 .",
    "it was shown in @xcite that it suffices to find a shortest path from @xmath68 to @xmath69 containing a vertex of @xmath655 for every @xmath663 and every @xmath664 . with a little abuse of notation ,",
    "we let @xmath4 be any point in @xmath660 and @xmath5 be any point in @xmath665 .",
    "our goal is to find a shortest  path that contains at lease one vertex of @xmath655 .",
    "unless otherwise indicated , any shortest  path mentioned below refers to a shortest  path that contains a vertex of @xmath655 .    in @xcite ,",
    "similar to the discussions in section [ sec : pre ] , @xmath27 gateways for @xmath4 and @xmath27 gateways for @xmath5 were defined , such that any shortest  path must contain a gateway of @xmath4 and a gateway of @xmath5 .",
    "hence by using the gateway graph , a shortest  path can be found in @xmath9 time .",
    "based on our enhanced graph @xmath654 , as in section [ sec : newgraph ] , we define a new gateway set @xmath666 of size @xmath53 for @xmath4 and a new gateway set @xmath667 of size @xmath53 for @xmath5 .",
    "the gateway set @xmath666 contains @xmath53 steiner points on the vertical cut - lines defined in the same way as those in @xmath148 in section [ sec : newgraph ] ; similarly , @xmath666 also contains @xmath53 steiner points on the horizontal cut - lines .",
    "the gateway set @xmath667 is defined similarly . using a similar proof as for lemma [ lem:20 ]",
    ", we can show that there exists a shortest  path containing a gateway of @xmath4 in @xmath666 and a gateway of @xmath5 in @xmath667 .",
    "next , we show how to compute the two gateway sets and ( the weights of ) their gateway edges .",
    "below , we discuss only the case for @xmath4 .",
    "the fractional cascading approach @xcite used in section [ sec : newgraph ] can still compute the gateway set @xmath666 in @xmath27 time , but it can not compute the weights of the gateway edges in @xmath27 time for the following reasons . consider a gateway @xmath668 , say on a vertical cut - line @xmath71 .",
    "then there is a gateway edge @xmath669 that consists of two line segments @xmath670 and @xmath671 ( recall that @xmath157 is the horizontal projection of @xmath4 on @xmath71 ) .",
    "hence , the weighted length of the edge @xmath669 is the sum of the weighted lengths of these two line segments .",
    "it was shown in @xcite that @xmath670 must be in the free space ( since @xmath4 is in @xmath197 ) ; thus , the weighted length of @xmath670 is easy to compute .",
    "however , the vertical segment @xmath671 may intersect multiple obstacles @xcite .",
    "we give an algorithm to compute in @xmath27 time the gateways and the weights of the gateway edges for @xmath4 in the next lemma .",
    "we discuss only how to compute the gateways of @xmath666 that are on the vertical cut - lines since those on the horizontal cut - lines can be computed similarly .",
    "further , for simplicity of discussion , we only compute the gateways of @xmath666 above @xmath4 ( i.e. , above the horizontal line through @xmath4 ) since those below @xmath4 can be computed similarly .",
    "below , with a little abuse of notation , we let @xmath666 refer to the set of its gateways on the vertical cut - lines and above @xmath4 .    we follow the terminology in section [ sec : newgraph ] . recall that @xmath4 has @xmath27 projection cut - lines in the vertical cut - line tree @xmath657 .",
    "let @xmath672 be the set of all projection cut - lines of @xmath4 in @xmath657 .",
    "for each projection cut - line @xmath673 , let @xmath674 be the steiner point on @xmath71 immediately above the horizontal projection @xmath157 of @xmath4 on @xmath71 .",
    "let @xmath675 . by their definitions",
    ", @xmath666 is a subset of @xmath676 ( since each gateway of @xmath666 is on a _ relevant _ projection cut - line of @xmath4 in @xmath657 ) .",
    "hence , to compute @xmath666 and their gateway edges , it suffices to compute the set @xmath676 and the weighted lengths of @xmath677 for all projection cut - lines @xmath673 .",
    "since @xmath670 is in @xmath197 for any projection cut - line @xmath71 of @xmath4 @xcite ( because @xmath678 ) , it suffices to compute the weighted length of @xmath679 .",
    "below , for any line segment @xmath274 , let @xmath680 denote the weighted length of @xmath274 .",
    "let @xmath681 .",
    "we use fractional cascading @xcite to obtain @xmath676 in @xmath27 time , with a similar approach as for lemma [ lem:30 ] . to compute the weighted lengths of the segments in @xmath682",
    ", we need to build another fractional cascading data structure in the preprocessing .    for every cut - line @xmath71 of @xmath657 ,",
    "we compute the intersections of @xmath71 with all obstacle edges of @xmath0 ; let @xmath683 be the set of such intersections",
    ". clearly , @xmath684 .",
    "we sort these intersections and the steiner points on @xmath71 to obtain a sorted list @xmath685 .",
    "for all @xmath2 cut - lines of @xmath657 , this takes totally @xmath6 time , because the total number of steiner points is @xmath139 ( which is @xmath45 ) and the total number of intersections between the cut - lines and the obstacle edges is @xmath45 .",
    "consider the sorted set @xmath685 for any cut - line @xmath71 of @xmath657 .",
    "for any two consecutive points @xmath305 and @xmath306 in @xmath685 , the entire segment @xmath686 is either in @xmath197 or in the same obstacle . from top to bottom in @xmath685 , for each point @xmath687 , we compute the weighted length @xmath688 and associate it with @xmath68 , where @xmath689 is the highest point in @xmath685 . further , for each point @xmath687 , we maintain a weight @xmath690 , defined as follows : suppose @xmath92 is the point in @xmath685 immediately below @xmath68 ; if the interior of @xmath93 is contained in an obstacle , then @xmath690 is the weight of that obstacle , and @xmath691 otherwise .",
    "since @xmath685 is sorted , computing such information in @xmath685 takes @xmath692 time . with such information , for any query point @xmath69 on @xmath71 ,",
    "suppose @xmath68 is the point in @xmath685 that is immediately above @xmath69 ; then we have @xmath693 . hence ,",
    "once we know the point @xmath68 for @xmath69 , @xmath694 can be computed in @xmath97 time ; further , for any point @xmath92 in @xmath685 above @xmath69 , we have @xmath695 , which is computed in @xmath97 time since the value @xmath696 is already stored at @xmath92 .    in the preprocessing",
    ", we build another fractional cascading data structure on @xmath657 and the sorted lists @xmath685 for all cut - lines @xmath71 of @xmath657 , which takes @xmath45 space and @xmath6 time .    for any query point @xmath4",
    ", we first use a similar approach as for lemma [ lem:30 ] to compute the set @xmath676 in @xmath27 time . for each projection cut - line @xmath673 ,",
    "let @xmath697 be the point in @xmath685 immediately above @xmath157 .",
    "note that @xmath697 is between @xmath674 and @xmath157 .",
    "we can use the above fractional cascading data structure to compute the points @xmath697 for all @xmath673 in @xmath27 time ( since the cut - lines of @xmath672 are at the nodes of a path from the root to a leaf in @xmath657 ) .",
    "then for each @xmath673 , to compute @xmath698 , as discussed above , we have @xmath699 , where @xmath689 is the highest point in @xmath685 and @xmath700 .",
    "since both @xmath674 and @xmath697 have been computed , @xmath698 is obtained in @xmath97 time .",
    "hence , the weighted lengths of all segments in @xmath682 are computed in @xmath27 time .        [ theo:30 ] for the weighted rectilinear case",
    ", we can build a data structure of size @xmath701 in @xmath702 time that can answer each query in @xmath27 time ( i.e. , for any two query points @xmath4 and @xmath5 , the weighted length of a shortest  path can be found in @xmath27 time and an actual path can be reported in additional time linear to the number of edges of the output path ) .    in the preprocessing ,",
    "we compute the graph @xmath654 by lemma [ lem:200 ] . for each node @xmath51 of @xmath654 , we compute a shortest path tree rooted at @xmath51 in @xmath654 .",
    "we maintain a shortest path length table such that for any two nodes @xmath82 and @xmath51 in @xmath654 , the ( weighted ) length of the shortest path from @xmath82 to @xmath51 in @xmath654 is obtained in @xmath97 time .",
    "computing all shortest path trees in @xmath654 takes @xmath701 space and @xmath703 time .",
    "we also perform the preprocessing for lemma [ lem:210 ] .",
    "hence , the preprocessing takes @xmath701 space and @xmath703 time in total .",
    "consider any two query points @xmath4 and @xmath5 .",
    "first , we use the approach in @xcite to find a shortest  path that does not contain any obstacle vertex of @xmath0 ( if any ) , after a preprocessing of @xmath45 time and space .",
    "below , we focus on finding a shortest path containing an obstacle vertex of @xmath0 , which must contain a gateway of @xmath4 in @xmath666 and a gateway of @xmath5 in @xmath667 . by lemma [ lem:210 ] ,",
    "we can compute both @xmath666 and @xmath667 in @xmath27 time . then",
    ", a shortest  path can be found by building a gateway graph ( as discussed in section [ sec : newgraph ] ) in @xmath27 time since the sizes of both @xmath666 and @xmath667 are @xmath53 . as in @xcite , after the shortest  path length is computed , an actual shortest  path can be reported by using the shortest path trees of the nodes in @xmath654 , in time linear to the number of edges of the output path .",
    "d.z . chen and h.",
    "wang . a nearly optimal algorithm for finding @xmath3 shortest paths among polygonal obstacles in the plane . in _ proc . of the 19th european symposium on algorithms ( esa ) _ ,",
    "pages 481492 , 2011 .",
    "d.z . chen and h.",
    "computing the visibility polygon of an island in a polygonal domain . in _ proc .",
    "of the 39th international colloquium on automata , languages and programming ( icalp ) _ , pages 218229 , 2012 .",
    "k.  clarkson , s.  kapoor , and p.  vaidya .",
    "rectilinear shortest paths through polygonal obstacles in @xmath704 time . in _ proc . of the 3rd annual symposium on computational geometry ( socg ) _ ,",
    "pages 251257 , 1987 .",
    "j.  hershberger , s.  suri , and h.  yildiz .",
    "a near - optimal algorithm for shortest paths among curved obstacles in the plane . in _ proc .",
    "of the 29th annual symposium on computational geometry ( socg ) _ , pages 359368 , 2013 .",
    "s.  kapoor and s.n .",
    "efficient algorithms for euclidean shortest path and visibility problems with polygonal obstacles . in _ proc . of 4th annual acm symposium on computational geometry ( socg ) _ , pages 172182 , 1988 ."
  ],
  "abstract_text": [
    "<S> let @xmath0 be a set of @xmath1 pairwise - disjoint polygonal obstacles with a total of @xmath2 vertices in the plane . </S>",
    "<S> we consider the problem of building a data structure that can quickly compute an @xmath3 shortest obstacle - avoiding path between any two query points @xmath4 and @xmath5 . </S>",
    "<S> previously , a data structure of size @xmath6 was constructed in @xmath7 time that answers each two - point query in @xmath8 time , i.e. , the shortest path length is reported in @xmath9 time and an actual path is reported in additional @xmath10 time , where @xmath11 is the number of edges of the output path . in this paper , we build a new data structure of size @xmath12 in @xmath13 time that answers each query in @xmath14 time . note that @xmath15 for any constant @xmath16 . </S>",
    "<S> ( in contrast , for the euclidean version of this two - point query problem , the best known algorithm uses @xmath17 space to achieve an @xmath14 query time . ) in addition , we construct a data structure of size @xmath18 in @xmath18 time that answers each query in @xmath19 time , and a data structure of size @xmath20 in @xmath21 time that answers each query in @xmath22 time . </S>",
    "<S> further , we extend our techniques to the weighted rectilinear version in which the  obstacles \" of @xmath0 are rectilinear regions with  weights \" and allow @xmath3 paths to travel through them with weighted costs . </S>",
    "<S> previously , a data structure of size @xmath7 was built in @xmath7 time that answers each query in @xmath8 time . </S>",
    "<S> our new algorithm answers each query in @xmath14 time with a data structure of size @xmath23 that is built in @xmath24 time ( note that @xmath25 for any constant @xmath16 ) . </S>"
  ]
}