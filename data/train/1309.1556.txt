{
  "article_text": [
    "the difficulty of scaling front - end applications is well known for dbmss executing highly concurrent workloads .",
    "one approach to this problem employed by many web - based companies is to partition the data and workload across a large number of commodity , shared - nothing servers using a cost - effective , parallel dbms , e.g. greenplum database .",
    "the scalability of online transaction processing ( oltp ) applications on these dbmss depends on the existence of an optimal database design , which defines how an application s data and workload is partitioned across nodes in the cluster , and how queries and transactions are routed to nodes .",
    "this in turn determines the number of transactions that access data stored on each node and how skewed the load is across the cluster .",
    "optimizing these two factors is critical to scaling complex systems : a growing fraction of distributed transactions and load skew can degrade performance by over a factor 10x .",
    "hence , without a proper design , a dbms will perform no better than a single - node system due to the overhead caused by blocking , inter - node communication , and load balancing issues .",
    "usually , it is very challenging to choose or design an optimal partitioning scheme for a given workload and database .",
    "executing small distributed transactions will incur heavy overhead  @xcite and thus should be avoided whenever possible .",
    "however , especially when dealing many - to - many relationships or very complex database schemas , it is not an easy task to put all the tuples that are accessed together onto the same node so as to reduce the overhead of distributed transactions . in the meantime ,",
    "data skew or workload skew degrades the performance of the overloaded nodes and thereby lowers the overall system throughput .",
    "therefore , it is also very critical to achieve both data and workload balancing .",
    "moreover , for a specific partitioning strategy to be feasible , it must not violate the constraints on the cluster configuration , such as node storage capacity , node processing ability , and network bandwidth between nodes .",
    "partitioning in databases has been widely studied , for both single system servers and shared - nothing systems .",
    "however , most of the existing techniques for automatic database partitioning are tailored for large - scale analytical applications ( i.e. data warehouses ) .",
    "these approaches typically produce possible partitions using round - robin ( send each successive tuple to a different partition ) , range ( divide up tuples according to a set of predicates ) , or hash - partitioning ( assign tuples to partitions by hashing them )  @xcite , which are then evaluated using heuristics and cost models . unfortunately ,",
    "none of these approaches are ideal for transactional workloads , which are very different from analytical workloads and are featured with numerous short - lived and highly concurrent transactions , a small set of pre - defined transaction types and relatively few tuples touches by each transaction . for transactional workloads ,",
    "if more than one tuple is accessed , then round - robin and hash partitioning typically require accessing to multiple sites and thus incur distributed transactions , which as we explained have significant overhead .",
    "range partitioning may be able to do a better job , but this requires carefully selecting ranges which may be difficult to do by hand .",
    "the partitioning problem gets even harder when transactions touch multiple tables , which need to be divided along transaction boundaries .",
    "for example , it is difficult to partition the data for social networking web sites , where schemas are often characterized by many n - to - n relationships .    in this report",
    ", we introduce a fine - grained hyper - graph based database partitioning system for transactional workloads .",
    "the input to our system includes a database , a workload , a node cluster and partitioning constraints imposed by users .",
    "we model the database partitioning problem as a multi - constraints hyper - graph partitioning problem .",
    "our system first analyzes the database and workload and constructs a weighted hyper - graph .",
    "it then runs an iterative hyper - graph partitioning phase to get a feasible and near - optimal partitioning scheme . after each iteration of partitioning , our system will evaluate the partitioning feasibility and performance , receive user feedbacks and then decide whether it should do hyper - graph refinement and re - partitioning . the final output is a lookup table which indicates how the database should be partitioned and distributed over the cluster so that the total distributed transactions in the workload will be minimized , the sizes and workload accesses of the partitions will be balanced and all the imposed constraints will be met .",
    "our database partitioning system can easily handle many - to - many table relationships and complex database schemas .",
    "it is also efficient as the size of the derived hyper - graph is independent of the database size .",
    "it provides great opportunities for the users to participate in the loop of decision making and import their human expertise and indirect domain knowledge for better partitioning performance .",
    "the rest of the report is organized as the follows : section  [ sec : model ] describes the hyper - graph based database partitioning model .",
    "section  [ sec : architecture ] presents the partitioner system architecture , as well as implementation details .",
    "section  [ sec : experiment ] introduces the experiments evaluation .",
    "section  [ sec : relatedwork ] is the related works .",
    "we conclude in section  [ sec : conclusion ] .",
    "here we focus on horizontal partitioning of database tables .",
    "the effect of a partitioning scheme for a transactional workload is normally measured by the number of distributed transactions  @xcite .",
    "so the problem can be turned into finding a partitioning scheme that minimizes the number of distributed transactions .",
    "data skew and workload skew will decrease the system throughput and thus are expected to be under certain threshold .",
    "there are also constraints imposed for the partitioning in practice , such as node storage capacity , node processing ability and network bandwidth between physical nodes . for a partitioning strategy to be feasible",
    ", it must meet all these constraints .",
    "we thereby formalize the database partitioning problem as follows : _ given a database d , a workload w , the number of physical nodes k , and the constraints c , find the optimal partitioning solution to partition d over k physical nodes so that the cost of executing w is minimized , while all the constraints c are satisfied and the imbalance degree of the data sizes and workload accesses across k nodes are under some balance threshold t. _     * tuple group*. before modeling the above database partitioning problem as a multi - constraints hyper - graph partitioning problem , we first give the definition of _ tuple group_.    a tuple group is a collection of tuples within a relation , which will always be accessed together throughout the execution of @xmath0 .",
    "each tuple group is essentially represented by a _",
    "min - term predicate _",
    "@xcite . given a relation @xmath1 , where @xmath2 is an attribute of r",
    ", then a simple predicate @xmath3 defined on r has the form @xmath4 where @xmath5 is a constant value and @xmath6 .",
    "a min - term predicate is the conjunction of simple predicates .",
    "given the set of simple predicates @xmath7 on relation @xmath1 that are derived from @xmath0 , a min - term predicate @xmath8 is defined as @xmath9 where @xmath10 or @xmath11 ( @xmath12 ) , which means that each simple predicate can occur in a min - term predicate either in its natural form or its negated form .",
    "the min - term predicate has the property that all the tuples belonging to this predicate will be accessed together .",
    "a min - term has two attributes : min - term size and access count .",
    "the min - term size is the number of tuples it represents in the actual table .",
    "the access count is the times that transactions within the workload accessing ( some of ) the tuples covered by this min - term predicate .",
    "these two attributes of a tuple group @xmath8 are denoted by @xmath13 and @xmath14 respectively .",
    "* hyper - graph partitioning problem modeling*. it is obvious that a good partitioning scheme should put all the tuples of a tuple group into the same node in order to reduce the number of distributed transactions .",
    "so our basic idea to do the partitioning is : we first analyze and split @xmath15 into disjoint tuple groups , then try to place these tuple groups into @xmath16 nodes .",
    "a hyper - graph extends the normal graph definition so that an edge can connect any number of vertices .",
    "a hyper - graph @xmath17 is constructed as follows : each vertex @xmath18 represents a tuple group @xmath19 ; each hyper - edge @xmath20 represents a transaction @xmath21 in @xmath0 accessing all the tuple groups connected by this hyper - edge .",
    "a vertex @xmath18 has two kinds of weights @xmath22 and @xmath23 .",
    "the weight @xmath24 of a hyper - edge @xmath25 is the number of transactions that access the same vertices ( i.e. tuple groups ) .",
    "given a hyper - graph @xmath17 , k - way partitioning of @xmath26 assigns vertices @xmath27 of @xmath26 to @xmath16 disjoint nonempty partitions . the k - way",
    "partitioning problem seeks to minimize the net cut , which means the number of hyper - edges that span more than one partition on the graph partitioning , or , more generally , the sum of weights of such hyper - edges . there are also constraints imposed on the graph partitioning , which correspond to the partition constraints @xmath28 and the balance threshold @xmath29 in the above database partitioning problem .",
    "each cut - edge incurs at least one distributed transaction since the data that the transaction need to access will be placed into at least two nodes .",
    "so the sum of weights of the cut - edges is equal to the total number of resulting distributed transactions .    as such",
    ", we turn the database partitioning problem into a multi - constraints hyper - graph partitioning problem which aims to get the minimum k - way net - cut while keeping graph partitions balanced and meeting various constraints .",
    "we first introduce the overview system architecture , and then present the implementation details .",
    "-20pt      figure  [ fig : framework ] illustrates the overview of our solution , which consists of the following six steps :    * s1 : db and workload analysis . * each table in the database is divided into one or multiple _ tuple groups _ , according to the information extracted from the workload .",
    "the tuples within each group are always accessed together throughout the whole workload .",
    "the sizes of tuple groups are derived from the database meta - data and statistics stored in the system catalog . besides , the information about which tuple groups are involved in each transaction of the workload is also recorded .    *",
    "s2 : hyper - graph generation . *",
    "the database partitioning problem is modeled as a hyper - graph partitioning problem .",
    "the hyper - graph has the following characteristics : 1 .",
    "each tuple group obtained from the previous step corresponds to a distinct graph vertex with two weights : the tuple group size and the number of transactions accessing this tuple group ; 2 .",
    "each transaction is mapped to a hyper - edge that connects all the tuple groups it accesses .",
    "it is possible for different transactions to be mapped to the same hyper - edge .",
    "each hyper - edge is associated with a weight counting the number of transactions mapped to it .",
    "* s3 : hyper - graph partitioning . *",
    "a graph partitioning algorithm is used to produce a balanced min - cut partitioning of the hyper - graph into @xmath16 partitions .",
    "each vertex ( i.e. tuple group ) is assigned to one partition , and each partition is assigned to one cluster node .",
    "the min - cut of the hyper - graph means a minimized number of distributed transactions resulting from the corresponding database partitioning strategy .",
    "the partitioning algorithm also tries to keep the extent of incurred data skew and workload skew under certain thresholds .",
    "* s4 : partitioning effect evaluation . *",
    "the graph partitioning result from s3 is evaluated according to certain criteria .",
    "if the result meets the criteria , the next step is s6 ; otherwise it is s5 .",
    "the criteria are two - fold .",
    "first , the resulting database partitioning must be feasible , which means that it should not violate the physical constraints of the cluster .",
    "for example , the total volume of data assigned to a cluster node must not exceed its storage capacity .",
    "second , the partitioning performance , i.e. the number of distributed transactions and the extent of data skew and workload skew , should achieve the expectations that are optionally imposed by the user . during this phase",
    ", user can watch the visualized partitioning effects , and optionally provide feedback based on his expertise and domain knowledge to affect the decision on whether the system should proceed to do graph refinement and re - partitioning .",
    "* s5 : hyper - graph refinement . *",
    "the existing hyper - graph is refined towards generating a better partitioning that meets the criteria defined in s4 .",
    "the basic idea of refinement is to choose some tuple groups in the hyper - graph and break them into smaller ones as new vertices .",
    "the hyper - edges are adjusted accordingly .",
    "the newly derived hyper - graph is then fed into s3 for partitioning .",
    "intuitively , the new hyper - graph represents an expanded solution space that subsumes the space represented by the old hyper - graph . since the new hyper - graph is usually similar to the old one , in addition to running the complete partitioning algorithm , the partitioning of the former could be done by incrementally revising the partitioning result of the latter .",
    "* s6 : look - up table construction . * the finally decided database partitioning strategy is encoded into a look - up table , which records the tuple - to - node mappings via a compact data structure representation .",
    "this look - up table is used when both loading the database into the cluster and routing transactions to involved data nodes during workload execution .    in the following sections , we elaborate on the technical details of our database partitioning solution roughly depicted above .",
    "the steps for obtaining the tuple groups , i.e. min - term predicates , for each relation @xmath1 are illustrated bellow : first , extract all the simple predicates related to relation @xmath1 in the workload .",
    "second , construct the min - term predicates list by enumerating the conjunctions of all the simple predicates of either normal or negated form .",
    "third , eliminate those min - term predicates containing contradicting simple predicates , and simplify the min - term predicates by removing the simple predicates that are implied by other simple predicates within the same min - term predicate . in order to control",
    "the number of min - term predicates generated , we could only select the top-@xmath16 mostly accessed attributes of each relation for min - term predicate construction .",
    "@xmath16 is configurable by the user and currently has a default value of 2 .",
    "we obtain the database meta - data and statistics information ( e.g. histograms ) from the underlying database system catalog , and then estimate @xmath13 of a min - term predicate with methods similar to those utilized by a conventional relational database optimizer . to obtain the access count @xmath14 of a min - term predicate",
    ", we examine each transaction in the workload and determine whether it accesses the tuple group @xmath8 . a transaction",
    "@xmath30 will access the tuple group @xmath8 iff for each attribute @xmath2 of @xmath1 , the set of simple predicates on @xmath2 that are involved by @xmath30 do nt contradict with @xmath8 .",
    "then @xmath14 is equal to the total number of transactions accessing the tuple group @xmath8 .",
    "the outputs of the db and workload analysis include the min - term predicates for all the database relations w.r.t the workload , and a transaction access list which tells which min - term predicates a transaction will access .",
    "our partitioning system employs an existing partitioning algorithm hmetis  @xcite to do the hyper - graph partitioning .",
    "hmetis is the hyper - graph version of hmetis , a multilevel graph partitioning algorithm .",
    "hmetis will tell which vertex belongs to which node , and also the sum of weights of the net cut , which represents the number of distributed transactions that would be incurred by this partitioning solution .",
    "hmetis also supports incrementally revising an already partitioned hyper - graph according to new constraints .",
    "this feature of hmetis enables the lighter - weight hyper - graph repartitioning after the hyper - graph refinement .        for a specific partitioning solution to be feasible",
    ", it must not violate the physical restrictions of the underlying node cluster .",
    "three types of physical restrictions are considered .",
    "first , the storage capacity of each node is limited .",
    "second , the data processing ability of each node , which depends on the cpu and i / o speeds , is also limited .",
    "third , the bandwidths of the network connecting the nodes are limited .",
    "intuitively , when a node is assigned more data and accessed by more transactions , the speed at which this node handle transaction processing will be slower , thus this node is more likely to become a performance bottleneck of the whole system .",
    "therefore , the extent of data skew and workload skew of the system resulting from a specific partitioning solution should be within certain threshold which represents the performance expectation of the user .",
    "we define a skew factor @xmath31 to quantitatively measure the extent of data and workload skews . assume a cluster with @xmath32 nodes .",
    "let @xmath33 and @xmath34 be the size of assigned database partition and the number of accessing transactions respectively , of the @xmath35th node",
    ". then @xmath31 is calculated as follows : @xmath36 where @xmath37 and @xmath38 are configurable non - negative parameters ( @xmath39 ) which may be used to reflect the different performance impacts of data skew and workload skew .",
    "generally , a smaller value of @xmath31 means a better partitioning result .",
    "finally , the user also inputs his expected number of partitioning iterations ( i.e. the cycle of s3 @xmath40 s4 @xmath40 s5 @xmath40 s3 in figure  [ fig : framework ] ) , which represents the time budget that the user allows the system to consume before he gives up finding a feasible or better partitioning result .",
    "the evaluation generates predictions on multiple performance metrics : data distribution , workload distribution , the number of distributed transaction , as well as the system throughput and response latency , which are obtained by the simulated execution of the workload with our previous tool peacod  @xcite , a partitioning scheme evaluation and comparison system .",
    "our system is always under one of two execution modes : the _ fully automatic mode _ and the _ interactive mode_. the automatic mode will totally rely on the intelligence of the system on evaluating the partitioning performance in order to decide whether continue or halt the iterative graph partitioning procedure .",
    "in contrast , the interactive mode allows the user to provide feedback to affect the partitioning strategy at runtime , jointly with the system intelligence .    under the interactive mode , after each graph partitioning iteration , the system will produce the visualized partitioning results . besides , the comparison on the partitioning results between this and the last iteration will also be visualized .",
    "after that , the system will pause execution and wait for the instructions or feedback from the user",
    ". the interactions by the user can be of various types .",
    "first , the user may terminate the system execution earlier , with either an already satisfactory partitioning result or a hopelessly bad result .",
    "second , the user may provide suggestions on how the current hyper - graph should be refined .",
    "if the partition result is neither feasible nor good enough , we invoke the partitioning refinement to get a feasible and better one .",
    "the basic idea is to split some tuple groups ( i.e. hyper - graph vertices ) and then redo partitioning for the according revised hyper - graph .",
    "tuple group splitting is three - phase .",
    "first , we rank the vertices with a ranking function .",
    "vertices with higher ranks are more likely to be split .",
    "currently , we use the vertex size as the ranking function .",
    "alternative rank functions , e.g. the ratio of size and access frequency , may also be utilized .",
    "second , we select the top-@xmath16 vertices to split .",
    "@xmath16 is configurable by the user and currently has default value of 20 .",
    "last , we split each selected vertex @xmath27 into two new vertices @xmath41 and @xmath42 .",
    "we pick up the simple predicate @xmath3 with the lowest selectivity in the min - term predicate @xmath8 of @xmath27 and then break @xmath3 into two simple sub - predicates , @xmath43 and @xmath44 , with the same selectivity . @xmath41 and @xmath42 correspond to the new min - term predicates constructed by replacing @xmath3 in @xmath8 with @xmath43 and @xmath44 respectively . a hyper - edges accesses @xmath41 and @xmath42 iff it accesses @xmath27 . as a result , @xmath45 and @xmath46 .",
    "obviously , hyper - graph refinement through splitting vertices ca nt further reduce the number of distributed transactions .",
    "however , the refined hyper - graph does contain finer - grained vertices , which may enable feasible partitioning solutions as well as mitigate the issues of data and workload skews .",
    "in this section , we report the experimental results .      we have implemented a tool called peacod  @xcite to automatically and extendibly evaluate and compare various database partitioning schemes .",
    "peacod is a java application runs on linux system .",
    "the tool embeds several well - known oltp benchmarks such as tpc - c , epinions , tatp .",
    "we shall make postgresql  @xcite as the target database server .",
    "the experiments used postgresql 9.1.2 as the dbms with buffer pool size set to 1 gb , hosted on a machine with two 2.4ghz cores and 4 gb of physical ram .      we have implemented and embedded seven partitioning schemes to be compared , including our hyper - graph based partitioning scheme(*hgp * ) .",
    "the other six schemes are :     * countmaxroundrobin(cmrr ) . * in this scheme , those most frequently accessed attributes are selected as the partitioning keys .",
    "the tables are partitioned in the round - robin manner based on the partitioning key values .",
    "* schemahashing(sh ) .",
    "* this scheme selects partitioning keys based on the primary - foreign key relationship topology in the database schema  @xcite .",
    "the primary key of root table becomes the main deriving partitioning key .",
    "then the tables are hash - partitioned .",
    "* pkhashing(pkh ) . *",
    "this scheme selects primary keys of tables as the partitioning keys and hash - partitions tables .",
    "* pkrange(pkr ) .",
    "* this scheme selects primary keys of tables as the partitioning keys and range - partitions tables .",
    "* pkroundrobin(pkrr ) .",
    "* this scheme selects primary keys of tables as the partitioning keys and partitions tables in the round - robin manner based on the partitioning key values .",
    "* allreplicate(allr ) .",
    "* this scheme replicates each tables to all data nodes .      in the experiment",
    ", we used the following three transactional benchmarks :     * tpc - c . *",
    "this benchmark is the current industry standard to evaluate the performance of oltp systems  @xcite .",
    "it consists of nine tables and five transactions that simulate a warehouse - centric order processing application .",
    "all the transactions are associated with a parameter warehouse i d , which is the foreign key ancestor for all tables except item table . in the experiments ,",
    "we generate a 2-warehouse dataset and a 10-warehouse dataset",
    ".     * epinions . *",
    "the epinions.com experiment aims to challenge our system with a scenario that is difficult to partition .",
    "it verifies it effectiveness in discovering intrinsic correlations between data items that are not visible at the schema or query level .",
    "it consists of four tables : users , items , reviews and trust .",
    "the reviews table represents an n - to - n relationship between users and items ( capturing user reviews and ratings of items ) .",
    "the trust table represents a n - to - n relationship between pairs of users indicating a unidirectional trust value .",
    "the workload is obtained from the open - source oltp benchmarks oltpbenchmark  @xcite .",
    "* this benchmark is an oltp testing application that simulates a typical caller location system used by telecommunication provider  @xcite .",
    "it consists of four tables , three of which are foreign key descendants of the root subscriber table . most of the transactions in tatp are associated with subscriber i d , allowing them to be routed directly to the correct node .      in this experiments ,",
    "we evaluate the number of distributed transactions that each scheme will produce .",
    "we regard the key metric of a partitioning scheme is the number of distributed transactions .",
    "we did several experiments to get the number for the 7 partitioning schemes and 3 benchmarks we mentioned above .",
    "we first conducted the experiments using the tpc - c benchmark .",
    "all the experiments used 1000 transactions workload .",
    "there are three scenarios we tested : partitioning a 2-warehouse - dataset into 2 nodes , partitioning a 2-warehouse - dataset into 8 nodes , and partitioning a 10-warehouse - dataset into 10 nodes .",
    "we tested all the 7 partitioning schemes .",
    "the result is listed in table [ table : numdist ] and figure [ fig : tpcc ] .    from the result",
    ", we can observe that hgp and sh is significantly better than other partitioning schemes .",
    "allr is worst since it needs lots of update operation spanned over all physical nodes .",
    "cmrr is also very bad since it chooses bad partitioning key .",
    "the result of the three primary key based partitioning schemes are not very bad since they choose the best partitioning keys .",
    "the most suitable partitioning keys of tpc - c are the primary keys for each table .",
    "but it is not right for all oltp benchmarks .",
    "so we can find that these three partitioning schemes in other benchmark may perform very bad in the following experiments .",
    "sh chooses the optimal partitioning keys according to the pk - fk references .",
    "so its result is very good .",
    "but hgp is better than sh .",
    "hgp can analyze the co - locate relationship but sh not .",
    "so some distributed transactions can be eliminated by these information in hgp .",
    "hence , hgp typically produces less number of distributed transactions than sh .",
    "-5pt    coordinates ( 2w-2,75 ) ( 10w-2,32 ) ( 10w-5,59 ) ( 10w-10,82 ) ; coordinates ( 2w-2,65 ) ( 10w-2,135 ) ( 10w-5,159 ) ( 10w-10,168 ) ; coordinates ( 2w-2,246 ) ( 10w-2,234 ) ( 10w-5,377 ) ( 10w-10,418 ) ; coordinates ( 2w-2,142 ) ( 10w-2,230 ) ( 10w-5,377 ) ( 10w-10,417 ) ; coordinates ( 2w-2,260 ) ( 10w-2,241 ) ( 10w-5,368 ) ( 10w-10,410 ) ; coordinates ( 2w-2,570 ) ( 10w-2,547 ) ( 10w-5,821 ) ( 10w-10,914 ) ; coordinates ( 2w-2,930 ) ( 10w-2,927 ) ( 10w-5,927 ) ( 10w-10,927 ) ;    -10pt    -10pt    from the experimental results of the three pk - based schemes ( pkh , pkr , pkrr ) , we can find that the partitioning methods ( hashing , range , round - robin ) are not very important for the partitioning algorithm .",
    "the three methods just got the same results .",
    "compared with cmrr and pkrr , we obtained that the important thing for a partitioning scheme is the selection of partitioning key . choosing the right partitioning keys can get a very good result and performance .",
    "it is not so important that which partitioning methods are chosen .",
    "we conducted the tatp experiments using 2000 transactions .",
    "we partitioned the data into 2 , 4 , 8 , 16 nodes separately .",
    "the result is shown in figure [ fig : tatp ] .",
    "-5pt    coordinates ( 2nodes,24 ) ( 4nodes,25 ) ( 8nodes,43 ) ( 16nodes,56 ) ; coordinates ( 2nodes,513 ) ( 4nodes,513 ) ( 8nodes,513 ) ( 16nodes,513 ) ; coordinates ( 2nodes,513 ) ( 4nodes,513 ) ( 8nodes,513 ) ( 16nodes,513 ) ; coordinates ( 2nodes,513 ) ( 4nodes,513 ) ( 8nodes,513 ) ( 16nodes,513 ) ; coordinates ( 2nodes,513 ) ( 4nodes,513 ) ( 8nodes,513 ) ( 16nodes,513 ) ; coordinates ( 2nodes,378 ) ( 4nodes,410 ) ( 8nodes,432 ) ( 16nodes,472 ) ; coordinates ( 2nodes,380 ) ( 4nodes,380 ) ( 8nodes,380 ) ( 16nodes,380 ) ;    -10pt    -5pt    from this experiment result , we can find that our hgp is far better than other schemes .",
    "its proportion of number of distributed transactions is under 5 percents , while other schemes proportion are greater than 20 percents .",
    "the three pk - based schemes performed very bad in this experiments .",
    "it performed even worse than the cmrr and allr .",
    "it indicates the importance of partitioning keys selection .",
    "sh is also bad since it ca nt choose the suitable partitioning keys just analyzing the database schema .",
    "the correlations between data items are not visible at the schema level in epinions .",
    "the result of the experiment using epinions benchmark is shown in figure [ fig : epinions ] .",
    "the experiment used 200 transactions .",
    "we partitioned the database into 2,3,4,5 nodes separately .",
    "the experiment generated the similar result with tatp benchmark .",
    "hgp is far better than other schemes .",
    "sh , pkh , pkr and pkrr generated the same number of distributed transactions .",
    "they all choosed primary keys as the partitioning keys .",
    "the methods ( round - robin , range , hashing ) used to distribute the data are not the key factor . on the contrary ,",
    "cmrr choosed the most accessed attributes as the partitioning keys .",
    "hence , it produced just the half number of distributed transactions of the pk ones .",
    "-5pt    coordinates ( 2nodes,47 ) ( 3nodes,22 ) ( 4nodes,24 ) ( 5nodes,23 ) ; coordinates ( 2nodes,112 ) ( 3nodes,112 ) ( 4nodes,112 ) ( 5nodes,112 ) ; coordinates ( 2nodes,118 ) ( 3nodes,118 ) ( 4nodes,118 ) ( 5nodes,118 ) ; coordinates ( 2nodes,118 ) ( 3nodes,118 ) ( 4nodes,118 ) ( 5nodes,118 ) ; coordinates ( 2nodes,118 ) ( 3nodes,118 ) ( 4nodes,118 ) ( 5nodes,118 ) ; coordinates ( 2nodes,60 ) ( 3nodes,72 ) ( 4nodes,70 ) ( 5nodes,73 ) ; coordinates ( 2nodes,101 ) ( 3nodes,101 ) ( 4nodes,101 ) ( 5nodes,101 ) ;    -10pt    -5pt    in a conclusion , our partitioning scheme hgp performs better than other schemes if we use the number of distributed transaction as the key metric .",
    "other experiments will be conducted in the near future .",
    "other performance metrics will be used to compare these partitioning schemes .",
    "we also built a demo prototype , as shown in figure [ fig : gui ] .    -10pt",
    "database partitioning is very crucial for scale transactional database , and it is very challenging for choosing or designing the optimal partitioning scheme for a given workload and database .",
    "there already exist many kinds of general - purpose partitioning algorithms , among which round - robin , range - based , hashing are the most widely used  @xcite .",
    "these algorithms are very effective for data analytical workload which scan very large data sets .",
    "but for transactional workload , these methods typically produce multiple nodes access therefore produce distributed transactions when more than one tuple is accessed in a query .    in the meantime , more ad - hoc and flexible partitioning schemes tailored for specific- purpose applications were also developed , such as the consistent hashing of dynamo  @xcite , schism  @xcite and one hop replication  @xcite , etc ..    bubba provides many heuristic approaches to balance the access frequency rather than the actual number of tuples across partitions  @xcite .",
    "this algorithm is simple and cheap , but does nt guarantee perfect balancing of processing .",
    "schism provides a novel workload aware graph - based partitioning scheme  @xcite .",
    "the scheme can get balanced partitions and minimize the number of distributed transactions .    scaling social network applications",
    "has been widely reported to be challenging due to the highly interconnected nature of the data .",
    "one hop replication is an approach to scale these applications by replicate the relationships , providing immediate access to all data items within one hop of a given record  @xcite .",
    "@xcite provides a fine - grained partitioning called lookup tables for distributed databases . with this fine - grained partitioning , related individual tuples ( e.g. , cliques of friends ) are co - located together in the same partition in order to reduce the number of distributed transactions .",
    "but for the tuple - level lookup table , the database need store a large amount of meta - data about which partition each tuple resides in .",
    "it consumes large storage space and makes the lookup operation not very efficient .",
    "consistent hashing  @xcite can be used to minimize the data moving when doing re - partitioning .",
    "but it may cause nonuniform load distribution .",
    "dynamo  @xcite extends consistent hashing by adding virtual nodes .",
    "it provides different partitioning strategies on load distribution which can ensure uniform load distribution at the same time of providing excellent re - partitioning performance .",
    "other works such as crush  @xcite and fastscale  @xcite can also provide algorithms which can be used for re - partitioning .",
    "in this technical report , we propose a fine - grained hyper - graph based database partitioning system for transactional workloads .",
    "our hyper - graph based database partitioning scheme has the following major advantages over previous ones .",
    "first , our scheme can reach much fine - grained and accurate partitioning results thus works well for all kinds of transactional workloads , by taking tuple groups as the minimum components of partitions . on the one hand , since tuple groups are directly calculated based on the workload information , compared with blind round - robin , range or hash partitioning methods , they are more likely to successfully cluster tuples that will eventually be co - accessed by transactions . as a result , our approach can lead to a fewer number of distributed transactions . on the other hand , by splitting tuple groups into smaller ones , we can more easily mitigate the issues of data skew and workload skew .",
    "second , our scheme is very light - weight and efficient .",
    "it has good scalability , as the size of the generated hyper - graph depends only on the workload size but not on the database size . unlike the previous approaches",
    ", it does not need to interact with the query optimizer for cost estimation , whose overhead is quite significant .",
    "this is feasible in practice , as the dominant performance bottleneck of transactional workloads lies in the number of distributed transactions , which can be directly counted from the hyper - graph partitioning result .",
    "moreover , the repartitioning of the hyper - graph can be done incrementally .",
    "third , our scheme is very flexible .",
    "the users are allowed to input their performance expectations at the beginning . during the partitioning iterations",
    ", they can watch the visualized partitioning effects , and optionally provide feedback based on his expertise and domain knowledge so as to affect the decision on whether the system should proceed to do graph refinement and re - partitioning , as well as to provide suggestions on how the current hyper - graph should be refined . with such interactions with the users ,",
    "our approach is able to reach configurable and precise balance between the partitioning speed and partitioning quality .",
    "5 http://oltpbenchmark.com .",
    "copeland , g. , alexander , w. , boughter , e. , and keller , t. data placement in bubba . in sigmod 1988 .",
    "d. dewitt and j. gray .",
    "parallel database systems : the future of high performance database systems . comm .",
    "acm , 1992 .",
    "d karger , e lehman , t leighton , m levine , d lewin , r panigrahy .",
    "consistent hashing and random trees : distributed caching protocols for relieving hot spots on the world wide web . in acm stoc , 1997 .",
    "g. decandia , d. hastorun , m. jampani , g. kakulapati , a. lakshman , a. pilchin , s. sivasubramanian , p. vosshall , and w. vogels .",
    "dynamo : amazon s highly available key - value store . in sosp 2007 .",
    "c. curino , e. jones , y. zhang , s. madden .",
    "schism : a workload driven approach to database replication and partitioning . in vldb 2010 .",
    "weil , sage a. and brandt , scott a. and miller , ethan l. and maltzahn , carlos , crush : controlled , scalable , decentralized placement of replicated data , in sc 2006 .",
    "j. m. pujol , g. siganos , v. erramilli , and p. rodriguez .",
    "scaling online social networks without pains .",
    "netdb , 2009 .",
    "hmetis - hypergraph & circuit partitioning , http://glaros.dtc.umn.edu/gkhome/metis/hmetis/overview .",
    "m. tamer ozsu , patrick valduriez , principles of distributed database systems , third edition , 2011 .",
    "xiaoyan guo , jidong chen , yu cao , mengdong yang : peacod : a platform for evaluation and comparison of database partitioning schemes .",
    "dasfaa 2012 .",
    "zheng , weimin and zhang , guangyan .",
    "fastscale : accelerate raid scaling by minimizing data migration . in fast 2011 .",
    "aubrey l. tatarowicz , carlo curino , evan p. c. jones sam madden , lookup tables : fine - grained partitioning for distributed databases , in icde 2012 .",
    "das , s , agarwal s , agrawal d , el abbadi a , elastras : an elastic , scalable , and self managing transactional database for the cloud , ucsb computer science technical report 2010 - 04 ."
  ],
  "abstract_text": [
    "<S> a common approach to scaling transactional databases in practice is horizontal partitioning , which increases system scalability , high availability and self - manageability . </S>",
    "<S> usually it is very challenging to choose or design an optimal partitioning scheme for a given workload and database . in this technical report </S>",
    "<S> , we propose a fine - grained hyper - graph based database partitioning system for transactional workloads . </S>",
    "<S> the partitioning system takes a database , a workload , a node cluster and partitioning constraints as input and outputs a lookup - table encoding the final database partitioning decision . </S>",
    "<S> the database partitioning problem is modeled as a multi - constraints hyper - graph partitioning problem . by deriving a min - cut of the hyper - graph </S>",
    "<S> , our system can minimize the total number of distributed transactions in the workload , balance the sizes and workload accesses of the partitions and satisfy all the partition constraints imposed . </S>",
    "<S> our system is highly interactive as it allows users to impose partition constraints , watch visualized partitioning effects , and provide feedback based on human expertise and indirect domain knowledge for generating better partitioning schemes . </S>"
  ]
}