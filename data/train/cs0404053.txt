{
  "article_text": [
    "traditionally , the logic of horn clauses has been considered as the basis for logic programming @xcite . in spite of its turing completeness @xcite , the lack of expressivity of horn clauses for programming purposes is widely acknowledged . during the last decade ,",
    "different extensions of horn clauses have been proposed , with the aim of increasing expressivity without sacrificing the declarative character of pure logic programming . among such extensions , two important approaches are constraint logic programming ( _ clp _ ) and hereditary harrop formulas ( _ hh _ ) .",
    "the _ clp _ scheme @xcite goes beyond the limitations of the herbrand universe by providing the ability to program with horn clauses over different computation domains , whose logical behaviour is given by constraint systems .",
    "_ clp _ languages keep all the good semantic properties of pure logic programming , including soundness and completeness results @xcite .",
    "their implementation relies on the combination of _ sld _ resolution with dedicated algorithms for constraint entailment , solving and simplification .",
    "therefore , efficient and yet declarative programs can be written to solve complex combinatorial problems .",
    "see @xcite for a survey of the foundations , implementation issues and applications of _ clp _ languages .",
    "on the other hand , the _ hh _ approach @xcite overcomes the inability of horn clauses to provide a logical basis for several constructions commonly found in modern programming languages , such as scoping , abstraction and modularity .",
    "this is achieved by extending horn clauses to a richer fragment of intuitionistic logic that allows us to use disjunctions , implications and quantifiers in goals .",
    "in fact , _ hh _ is a typical example of an _ abstract logic programming language _ , in the sense of @xcite .",
    "abstract logic programming languages are characterized by the fact that the declarative meaning of a program , given by provability in a deduction system , can be interpreted operationally as goal - oriented search for solutions .",
    "technically , the existence of _ uniform proofs _ for all provable goal formulas permits the search interpretation of provability .",
    "the implementation of programming languages based on _ hh _ , such as @xmath0-prolog @xcite , requires the resolution of the problem of unifying terms occurring under the scope of arbitrary quantifier prefixes .",
    "correct unification algorithms for such problems have been studied in @xcite .",
    "moreover , @xcite shows in detail the soundness and completeness of a goal solving procedure for the first - order _ hh _ language .    the aim of this paper is to present a framework for the combination of the _ clp _ and _ hh _ approaches , that incorporates the benefits of expressivity and efficiency that _ hh _ and _ clp _ bring to logic programming , respectively .",
    "we will enrich the syntax of first - order _ hh _ with constraints coming from a given constraint system .",
    "the resulting language is such that all constructions and results are valid for any constraint system @xmath1 , therefore we can speak of a _ scheme hh_(@xmath2 ) with _ instances hh_(@xmath1 ) , as in _ clp_. we will define an amalgamated proof system that combines inference rules from intuitionistic sequent calculus with constraint entailment , in such a way that the key property of an abstract logic programming language is preserved . moreover , we will also present a sound and complete procedure for goal solving .",
    "as in _ clp _ , the result of solving a goal using a program will be an _ answer constraint_.    the following simple program @xmath3 , goal @xmath4 and constraint @xmath5 belong to the instance _",
    "hh_(@xmath6 ) given by the constraint system @xmath6 for real numbers . we will refer to this as the _ disc example _ in the sequel .",
    "@xmath7    in the example , the formula @xmath5 turns out to be a correct and computable answer constraint in the resolution of @xmath4 from @xmath3 . due to the soundness and completeness of the goal solving procedure ,",
    "@xmath4 can be deduced from @xmath3 and @xmath5 in the amalgamated proof system . in figure 1 a uniform proof is presented of the sequent @xmath8 , using the inferences rules of the calculus @xmath9 which will be presented in section [ prove ] .    from a technical point of view , for the particular case of the herbrand constraint system , our completeness result boils down to a more abstract formulation of the completeness theorem in @xcite . in the case of _ clp _ programs using only horn clauses with constraints , our goal solving procedure reduces to constrained resolution , and our completeness theorem yields a form of strong completeness for success that avoids the need to build disjunctions of computed answers , in contrast to @xcite , th . 2 ( see also @xcite , th .",
    "the reason for this discrepancy is that our amalgamated proof system uses more constructive inference mechanisms to deduce goals from program clauses , as we will see .",
    "the rest of this paper is organized as follows : section [ exampl ] shows some programming examples , that illustrate the specific benefits of the combination of _ clp _ and _ hh_. in section [ syntax ] we recall the notion of a constraint system and we define the syntax of _ hh _ with constraints .",
    "in section [ prove ] we present an intuitionistic proof system for _ hh _ with constraints , and we show the existence of uniform proofs , then an equivalent proof system allowing only uniform proofs is defined . based on this second calculus ,",
    "a sound and complete procedure for goal solving is presented as a transformation system in section [ solve ] . in section [ concl ]",
    "we summarize conclusions and possible lines for future research . in order to improve readability of the paper , some proofs",
    "have been omitted or compressed in the main text .",
    "full proofs appear in the appendix .",
    "although simple , the programs of this section exemplify the programming style in _",
    "hh_(@xmath2 ) languages , combining the characteristic utilities of _ hh _ such as to add temporarily facts to the program or to limit the scope of the names with the advantages of using constraint solvers , instead of syntactical unification .",
    "the syntax used in the examples is basically that of _ hh _ languages , with the addition of constraints in clause bodies and goals . in particular ,",
    "the notation @xmath10 will be used for equality constraints .",
    "more formal explanations will follow in section [ syntax ] .",
    "the programs below are based on a constraint system which is defined as a combination of @xmath6 ( real numbers ) and @xmath11 ( herbrand universe ) .",
    "this constraint system underlies the well known language _",
    "clp_(@xmath6 ) @xcite .",
    "the elements in the intended computation domain can be represented as trees whose internal nodes are labeled by constructors , and whose leaves are labeled either by constant constructors or by real numbers . in particular this includes the representation of lists , possibly with real numbers as members .",
    "we will use prolog s syntax for the list constructors .",
    "the following program keeps record of the marks of different students in two exercises they have to do to pass an exam .",
    "while the goal @xmath12 _ pass@xmath13 _ fails , @xmath14 _ exercise@xmath15 pass@xmath13 _ succeeds . to resolve this last goal , the fact",
    "exercise@xmath16 _ is added to the program , but not permanently . if we would put again the query @xmath12 _ pass@xmath13 _ it would fail again .",
    "suppose now we want to know the requirements a student has to fulfil to pass , then we add to the program the clauses :    the goal @xmath12 _ need - to - pass@xmath17 _ will produce an answer equivalent in the constraint system to @xmath18   \\wedge   n > 6)$ ] .    to get this answer , the intermediate goal _",
    "exercise@xmath19 need - to - pass@xmath20 _ should be solved with the constraint @xmath21 .",
    "this would require :    \\i ) to introduce the fact _",
    "exercise@xmath22 _ in the base .",
    "note that the effect is different to adding a clause in prolog with _",
    ", since this implies the universal quantification of _ a _ and _",
    "x_.    \\ii ) try to solve the goal _ need - to - pass@xmath23)$ ] _ with the first clause of this predicate , so to solving _",
    "pass@xmath24 _ , with the constraint @xmath21 and @xmath25 $ ] .",
    "this will add the constraints @xmath26 .",
    "a similar example is shown in @xcite , here the benefit is in the use of constraints allowing to write conditions about the real numbers that help to solve the goal more efficiently .",
    "@xmath27    @xcite uses the computation of fibonacci numbers as a simple example to illustrate the advantages of constraint solving w.r.t . built - in arithmetic ( as available in prolog ) .",
    "the recursive definition of fibonacci sequence gives rise immediately to the following _",
    "clp_(@xmath6 ) program :    [ cols= \" < \" , ]",
    "thanks to the abilities of the constraint solver , this program is reversible .",
    "in addition to goals such as _ fib@xmath28 _ , with answer @xmath29 , we can also solve goals as _ fib@xmath30 _ with answer @xmath31 .",
    "however , the program is based on an extremely inefficient double recursion . as a consequence",
    ", it runs in exponential time , and multiple recomputations of the same fibonacci number occur .    in _",
    "hh_(@xmath6 ) we can avoid this problem by using implications in goals to achieve the effect of tabulation .",
    "at the same time , the program remains reversible and close to the mathematical specification of the fibonacci sequence .    a predicate call of the form _",
    "getfib@xmath32 _ assumes that the fibonacci numbers _",
    "fib@xmath33 _ , with @xmath34 , are memorized as atomic clauses for _ memfib _ in the local program .",
    "the call computes the @xmath35-th fibonacci number in @xmath2 ; at the same time , the fibonacci numbers _",
    "fib@xmath33 _ , with @xmath36 are memorized during the computation .",
    "let us consider two simple goals for this program :    \\i ) @xmath37 .",
    "in order to solve @xmath38 , _ memfib@xmath39 _ and _ memfib@xmath40 _ are added to the local program , and the goal _",
    "getfib@xmath41 _ is solved . since @xmath42 , the first clause for _ getfib _ fails . the second clause for @xmath43 puts _",
    "memfib@xmath44 _ into the local program and produces the new goal _ getfib@xmath45 _ , which is solved with answer @xmath46 by means of the first clause .",
    "\\ii ) @xmath47 .",
    "analogously , @xmath48 is solved by solving _ getfib@xmath49 _ after adding _",
    "memfib@xmath39 _ and _ memfib@xmath40 _ into the local program .",
    "the first clause for _ getfib _ fails .",
    "therefore , the constraint @xmath50 is assumed and the new goal _",
    "getfib@xmath51 _ must be solved , after putting the atom _",
    "memfib@xmath44 _ into the local program .",
    "now , the first clause for _ getfib _ leads easily to the answer @xmath52 .    in general , all goals of the two forms :    \\i ) _ fib@xmath53 _ ,",
    "@xmath54 given ,    \\ii ) _ fib@xmath55 _ , @xmath56 a given fibonacci number    can be solved by our goal solving procedure .",
    "moreover , goals of the form i ) can be solved in @xmath57 steps . in @xcite",
    ", miller showed that implicational goals can be used to store previously computed fibonacci numbers , thus leading to an _ hh _ program that runs in time @xmath57 .",
    "later hodas gave another memorized version of the computation of fibonacci numbers , closer to the naive doubly recursive algorithm .",
    "version combines implicational goals with a continuation - passing programming style which relies on higher - order predicate variables .",
    "the benefit of our version w.r.t .",
    "@xcite is the reversibility of the predicate _ fib _ that is enabled by constraint solving.@xmath27    [ mortage1 ] the following program @xmath3 is presented by jaffar and michaylov as an application of _",
    "clp_(@xmath58 ) .    where @xmath59 stands for principal payment , @xmath60 for time in months , @xmath61 for interest rate , @xmath62 for monthly payment , and @xmath63 for outstanding balance",
    "clp_(@xmath6 ) the goal @xmath64 , produces the answer @xmath65 . from this answer",
    "we can deduce that @xmath66 ( the number 0.9637 is calculated as an approximation ) , where @xmath67 represents the quotient of loss for delayed payment .",
    "we consider now a more complicated problem , namely to find _ imin _ , _ imax _ ( with @xmath68 ) such that any mortgage whose quotient of loss lies in the interval [ 0.9637 . .",
    "0.97 ] can be balanced in 6 months with some interest rate @xmath61 lying in the interval @xmath69_imin _ . .",
    "_ imax_@xmath70 $ ] .",
    "this problem can be formulated in _",
    "hh_(@xmath6 ) by the goal :    @xmath71 @xmath72 + @xmath73    using the goal transformation rules _",
    "i ) _  _ viii ) _ of section [ solve ] , we can show a resolution of @xmath4 from @xmath3 that computes the answer constraint : @xmath74 more details on the resolution of this goal will be given in example [ mortage2 ] at the end of section [ solve ] .",
    "as explained in the introduction , the framework presented in this paper requires the enrichement of the syntax of _ hereditary harrop formulas _ ( shortly , _ hh _ ) @xcite with constraints coming from a given _",
    "constraint system_. following @xcite , we view a constraint system as a pair @xmath75 , where @xmath76 is the set of formulas allowed as constraints and @xmath77 @xmath78 @xmath79 is an _",
    "entailment relation_. we use @xmath80 and @xmath81 to represent a constraint and a finite set of constraints , respectively .",
    "therefore , @xmath82 means that the constraint @xmath80 is entailed by the set of constraints @xmath81 .",
    "we write just @xmath83 if @xmath81 is empty . in @xcite , @xmath76 and @xmath77",
    "are required to satisfy certain minimal assumptions , mainly related to the logical behaviour of @xmath84 and @xmath85 .",
    "since we have to work with other logical symbols , our assumptions must be extended to account for their proper behaviour .",
    "therefore , we assume :    1 .",
    "@xmath76 is a set of formulas including @xmath86 ( true ) , @xmath87 ( false ) and all the equations @xmath10 between terms over some fixed signature , and closed under @xmath88 @xmath89 and the application of substitutions of terms for variables .",
    "2 .   @xmath77 is _ compact _ , i.e. , @xmath82 holds iff @xmath90 for some finite @xmath91 .",
    "@xmath77 is also _ generic _ , i.e. , @xmath82 implies @xmath92 for every substitution @xmath93 .",
    "3 .   all the inference rules related to @xmath94 and @xmath95 valid in the intuitionistic fragment of first - order logic are also valid to infer entailments in the sense of @xmath77 .",
    "the notation @xmath96 used above means application to a constraint @xmath80 of a substitution @xmath97 $ ] , using proper renaming of the variables bound in @xmath80 to avoid capturing free variables from the terms @xmath98 , @xmath99 .",
    "@xmath100 represents the application of @xmath93 to every constraint of the set @xmath81 . in the sequel",
    ", the notation @xmath101 will also be used for other formulas @xmath102 , not necessarily constraints .",
    "note that the three conditions i ) , ii ) , iii ) are meant as minimal requirements .",
    "in particular , the availability of the equality symbol @xmath95 is granted in any constraint system , and it will always stand for a congruence .",
    "however , other specific axioms for equality may be different in different constraint systems .",
    "observe also that item iii ) above , does not mean that @xmath77 is restricted to represent deducibility in some intuitionistic theory .",
    "on the contrary , our assumptions allow us to consider constraint systems @xmath1 such that @xmath76 is a full first - order language with classical negation , and @xmath82 holds iff @xmath103 , where @xmath104 is a suitable set of first - order axioms and @xmath105 is the entailment relation of classical first - order logic with equality .",
    "in particular , three important constraint systems of this form are : @xmath11 , where @xmath106 is clark s axiomatization of the herbrand universe @xcite ; @xmath107 , where @xmath108 is smolka and treinen s axiomatization of the domain of _ feature trees _",
    "@xcite ; and @xmath6 , where @xmath109 is tarski s axiomatization of the real numbers @xcite . in these three cases ,",
    "the constraint system is known to be _ effective _ , in the sense that the validity of entailments @xmath82 , with finite @xmath81 , can be decided by an effective procedure .",
    "the previous systems include the use of disjunctions . in _",
    "there is a well known completeness theorem due to maher , which relies on the possibility of building finite disjunctions of computed answer constraints .",
    "as we will see in section [ solve ] , disjunctions are not needed in order to prove completeness of goal solving in our setting .",
    "this is the reason why we do not enforce @xmath76 to be closed under @xmath110 in the general case .    in the sequel",
    ", we assume an arbitrarily fixed effective constraint system @xmath1 . by convention , the notation @xmath111 will mean that @xmath82 holds for all @xmath112 , and @xmath113 will abbreviate that @xmath114 and @xmath115 hold .",
    "also , we will say that a constraint @xmath80 with free variables @xmath116 is @xmath1-satisfiable iff @xmath117 .    in order to define the syntax of the first - order formulas of _",
    "hh_(@xmath1 ) , we assume a set @xmath118 of ranked predicate symbols ( disjoint from the symbols occurring in @xmath76 ) which are used to build atomic formulas @xmath119 of the form @xmath120 , with @xmath121 .",
    "the set of _ definite clauses _ , with elements noted @xmath122 , and the set of _ goals _ , with elements noted @xmath4 , are defined by the following syntactic rules :    @xmath123 + @xmath124    this syntax is the natural extension of first - order _ hh _ as presented in @xcite .",
    "the novelty is that constraints can occur in goals of the forms @xmath80 and @xmath125 , and therefore also in definite clauses of the form @xmath126 .",
    "some variants could be considered , as e.g. dropping @xmath127 or replacing @xmath128 by @xmath129 , but these changes would render a logically equivalent system . in the rest of the paper , by a _",
    "we understand any finite set @xmath3 of definite clauses .",
    "this includes both _",
    "programs and first - order _ hh _ programs as particular cases .    as usual in the _",
    "hh _ framework , see e.g. @xcite , we will work with a technical device ( so - called _ elaboration _ ) for decomposing the clauses of a given program into a simple form .",
    "this is useful for a natural formulation of goal solving procedures .",
    "we define the _ elaboration of a program _ @xmath3 as the set @xmath130 where @xmath131 is defined by case analysis in the following way : +  @xmath132 . +  @xmath133 . +  @xmath134 . +  @xmath135 .",
    "note that all clauses in @xmath136 have the form @xmath137 we still need another technicality .",
    "a _ variant _ of such a clause is any clause of the form @xmath138 where @xmath139 are new variables not occurring free in the original clause , and @xmath140 $ ] .",
    "in this section we present an amalgamated proof system @xmath141 that combines the usual inference rules from intuitionistic logic with the entailment relation @xmath77 of a constraint system @xmath1",
    ". we will derive sequents of the form @xmath142 where @xmath3 is a program , @xmath81 represents a finite set of constraints and @xmath4 is an arbitrary goal .",
    "we also show that @xmath141 enjoys completeness of uniform proofs , and we present a second proof system @xmath9 which is equivalent to @xmath141 in deductive power , but is tailored to build uniform proofs only .",
    "@xmath141 stands for an ntuitionistic sequent calculus for _ hh_(@xmath1 ) that allows to deduce a goal from defined clauses in the presence of onstraints .",
    "the intuitionistic calculus with constraints @xmath143 is defined as follows .",
    "@xmath144 if and only if the sequent @xmath145 has a proof using the rules of the proof system @xmath141 that we introduce in the following .",
    "a proof of a sequent is a tree whose nodes are sequents , the root is the sequent to be proved and the leaves match axioms of the calculus .",
    "the rules regulate relationship between child nodes and parent nodes . in the representation of the rules",
    ", we have added to the premises the side conditions relating to the existence of proofs in the constraint system ; these entailment relations are not considered as nodes of the proofs seen as trees .",
    "this notation simplifies the reading of both inference rules and proof trees .    *",
    "_ axioms to deal with atomic goals or constraints _ : @xmath146 in @xmath147 , @xmath148 are assumed to begin with the same predicate symbol . @xmath149",
    "abbreviates @xmath150 , where @xmath151 @xmath152 .",
    "* _ rules introducing the connectives and quantifiers of the hereditary harrop formulas _ : @xmath153 + @xmath154 + @xmath155 + @xmath156 + @xmath157 \\;\\;\\ ; \\gamma \\ , \\vdash_{\\cal c } \\exists y c   }    { \\delta;\\gamma \\ , { { |\\!\\mbox{---}}}\\,\\exists x g}\\ ; ( \\exists_r)\\ ] ] @xmath158 + @xmath159;\\gamma , c \\ , { { |\\!\\mbox{---}}}\\,g\\;\\;\\ ; \\gamma \\ , \\vdash_{\\cal c } \\exists y c   } { \\delta,\\forall x d;\\gamma \\ , { { |\\!\\mbox{---}}}\\,g}\\ ; ( \\forall_l )   \\hspace*{1 cm } \\frac{\\delta;\\gamma \\ , { { |\\!\\mbox{---}}}\\,g[y / x ] } { \\delta;\\gamma \\ , { { |\\!\\mbox{---}}}\\,\\forall x g}\\ ; ( \\forall_r)\\ ] ] @xmath160    note that the rule of contraction seems to be absent from this system , but in fact it is implicitly present because @xmath3 and @xmath81 are viewed as sets ( rather than sequences ) in any sequent @xmath161 . in many respects ,",
    "the inference rules of @xmath9 are similar to those used for _ hh _ in the literature ; see e.g. @xcite .",
    "however , the presence of constraints induces some modifications .",
    "of particular importance are the modifications introduced to @xmath162 and @xmath163 . a simple reformulation of the traditional version of @xmath162 , using a constraint @xmath164 instead of a substitution @xmath165 $ ] , representing an instance of @xmath166 , could be : @xmath167 } { \\delta;\\gamma \\ , { { |\\!\\mbox{---}}}\\,\\exists x g}\\ ] ] @xmath168    in our constraint - oriented formulation of @xmath162 we allow any satisfiable constraint @xmath80 ( not necessary of the form @xmath164 ) instead of the substitution , in order to guess an instance of @xmath166 .",
    "the next example shows that this extra generality is necessary .",
    "[ exis ] this example is based on _",
    "hh_(@xmath6 ) .",
    "consider    @xmath169 ,    @xmath170 .",
    "the sequent @xmath171 is expected to be derivable .",
    "however , the traditional formulation of @xmath162 does not work , because no term @xmath172 in the language @xmath173 denotes a square root of 2 . with our @xmath162 ,",
    "choosing the @xmath6-satisfiable constraint @xmath174 , the problem is reduced to the easy derivation of the sequent @xmath175 . @xmath27",
    "our definition of @xmath163 is dual to @xmath162 and follows the same idea , since @xmath163 also relies on guessing an instance for @xmath166 .",
    "on the other hand , rule @xmath176 has a universal character .",
    "therefore , the traditional formulation by means of a new variable has been kept in this case .    for technical reasons we need to measure the _ size _ of proofs .",
    "we formalize this notion as the number of sequents in it , that coincides with the number of nodes of the proof seen as a tree .    in the sequel",
    "we will use some technical properties of @xmath177-provability .",
    "let us state them in the next lemmas , whose proofs can be found in the appendix .",
    "the first lemma guarantees that substitution of a term for a variable in a sequent , preserves @xmath141-provability .",
    "[ sust ] for any @xmath178 , @xmath166 and @xmath172 , if @xmath179 , then there is a proof of the same size of @xmath180 ; \\gamma[t / x ] \\ , { { |\\!\\mbox{---}}}\\ , g[t / x]$ ] .",
    "the next lemma shows that a sequent continues to be provable if we strengthen the set of constraints .",
    "[ cons ] for any @xmath178 , if @xmath181 is a set of constraints such that @xmath182 , and @xmath179 , then @xmath183 has a proof of the same size .",
    "[ ren ] for any @xmath178 , @xmath166 and @xmath184 , if @xmath179 , then @xmath185 ; \\gamma , x \\approx u \\ , { { |\\!\\mbox{---}}}\\ , g[u / x]$ ] has a proof of the same size .    by lemma [ sust ] , @xmath185 ; \\gamma[u / x ]",
    "\\ , { { |\\!\\mbox{---}}}\\ , g[u / x]$ ] has a proof of the same size as @xmath186 .",
    "hence , applying lemma [ cons ] , @xmath185 ; \\gamma , x \\approx u \\ , { { |\\!\\mbox{---}}}\\ , g[u / x]$ ] has a proof of the same size , because @xmath187 $ ] .",
    "the next lemma assures that free variables that appear only in the set of constraints of a sequent can be considered as existentially quantified in the proof of the sequent .",
    "[ exist ] for any @xmath188 , if @xmath189 and @xmath166 is a variable that does not appear free in @xmath190 , then @xmath191 has a proof of the same size .",
    "we are aiming at an _ abstract logic programming language _ in the sense of @xcite .",
    "this means that _ uniform proofs _ must exist for all provable sequents . in our setting the idea of uniform proof consists in breaking down a goal into its components until obtaining an atomic formula or a constraint , before using the rules for introduction of connectives on the left or resorting to constraint entailment .",
    "more formally , the notion of uniform proof is as follows .",
    "an @xmath141-proof is called _ uniform proof _ when each internal node in the proof tree is a sequent whose right - hand side @xmath4 is neither a constraint nor an atomic formula .",
    "moreover the inference rule relating this node to its children must be one of the right - introduction rules @xmath192 , @xmath193 , @xmath194 , @xmath195 , @xmath196 , @xmath197 , according to the outermost logical symbol of @xmath4 .    in order to prove that uniform proofs exist for all @xmath141-provable sequents , we follow the same approach that in @xcite , showing that any given @xmath141-proof can be transformed into a uniform proof .",
    "this is achieved by the next lemma .",
    "[ trans ] if @xmath4 is a goal , @xmath3 a program and @xmath81 a set of constraint formulas , such that @xmath198 has a proof of size @xmath199 , then :    1 .   for @xmath200 , there are @xmath54 constraint formulas @xmath201 ( @xmath202 ) and a formula @xmath203 @xmath204 that is a variant of some formula in @xmath136 such that @xmath205 are new distinct variables not appearing free in @xmath206 , where @xmath207 does not appear free in @xmath208 , for @xmath209 , and @xmath210 begins with the same predicate symbol as @xmath119 .",
    "in addition it holds : 1 .",
    "@xmath211 ; @xmath212 .",
    "2 .   @xmath213 3 .",
    "@xmath214 has a proof of size less than @xmath199 , or @xmath215 .",
    "2 .   if @xmath216 , then @xmath217 .",
    "3 .   if @xmath218 , then @xmath219 and @xmath220 have proofs of size less than @xmath199 .",
    "4 .   if @xmath221 , then @xmath222 has a proof of size less than @xmath199 for @xmath223 or @xmath224 . 5 .   if @xmath225 , then @xmath226 has a proof of size less than @xmath199 .",
    "6 .   if @xmath227 , then @xmath228 has a proof of size less than @xmath199 .",
    "7 .   for @xmath229",
    ", if @xmath230 is a variable not appearing free in @xmath231 , then there is a constraint formula @xmath80 such that : 1 .",
    "2 .   @xmath233 $ ] has a proof of size less than @xmath199 .",
    "if @xmath234 , then @xmath235 @xmath236 $ ] has a proof of size less than @xmath199 , where @xmath230 is a variable that does not appear free in @xmath190 .",
    "we reason by induction on the size @xmath199 of the proof of @xmath198 , analyzing cases according to the last inference rule applied in the proof of the sequent @xmath198 .",
    "a detailed proof can be found in the appendix . as novelties w.r.t .",
    "@xcite , we must deal with constraints and with the new formulation of rules @xmath162 , @xmath163 . here",
    "we only sketch the case where @xmath163 is the last inference rule applied and @xmath237 .",
    "let us show graphically the proof transformation , in which we will essentially switch the applications of @xmath163 and @xmath162 . by the induction hypothesis , the initial proof has the form : + @xmath238 ; \\gamma , c'\\wedge c , u \\approx y   \\ , { { |\\!\\mbox{---}}}\\ ,       g_{1}[z / w]$ ]    @xmath239 cor . [ ren ] , lem .",
    "[ cons ]    @xmath240 ; \\gamma , c ' , c   \\ , { { |\\!\\mbox{---}}}\\ ,       g_{1}[z / w]$ ] @xmath241    ' '' ''     @xmath162    @xmath240 ; \\gamma , c ' \\ , { { |\\!\\mbox{---}}}\\ ,       \\exists w g_{1 } \\qquad   \\qquad\\qquad\\gamma \\ ,      \\vdash_{\\cal c}\\,\\exists y c'$ ]    ' '' ''",
    "@xmath163    @xmath242    where : +  @xmath230 is not free in @xmath243 , @xmath244 , @xmath81 , @xmath245 +  @xmath246 is not free in @xmath243 , @xmath247 $ ] , @xmath81 , @xmath248 , @xmath245 +  @xmath184 is a new variable .",
    "+ we can transform this into the following proof : + @xmath238 ; \\gamma , c ' \\wedge c , u \\approx y   \\ , { { |\\!\\mbox{---}}}\\ ,       g_{1}[z / w ] \\qquad        \\gamma , c'\\wedge c \\ , \\vdash_{\\cal c}\\,\\exists u ( u \\approx y)$ ]    ' '' ''    @xmath163    @xmath249 $ ]    @xmath250 lem . [ exist ]    @xmath251\\qquad\\qquad        \\gamma \\ , \\vdash_{\\cal c}\\ , \\exists z \\exists y ( c ' \\wedge c)$ ]    ' '' ''     @xmath162    @xmath242    where : +  @xmath246 is not free in @xmath243 , @xmath244 , @xmath81 , @xmath252 . + ",
    "@xmath184 is not free in @xmath243 , @xmath244 , @xmath81 , @xmath253 , @xmath254 $ ] .",
    "the next main theorem follows now as a straightforward consequence of the proof transformation lemma [ trans ] .",
    "[ uniform proofs ] [ unif ] every @xmath141-provable sequent has a uniform proof .    given an @xmath141-provable sequent with a proof of size @xmath199 , the existence of a uniform proof",
    "is established reasoning by induction on @xmath199 , using lemma [ trans ] .",
    "now we know that uniform proofs are complete for @xmath141 , and their goal - oriented format renders them close to the goal solving procedure we are looking for . however , as an intermediate step we will present a second proof system @xmath9 for _ hh_(@xmath1 ) , which will enjoy three properties :    1 .",
    "@xmath9 and @xmath141 have the same provable sequents .",
    "2 .   @xmath9 builds only niform proofs , and it is parameterized by a given onstraint system .",
    "@xmath255 replaces the left - introduction rules by a backchaining mechanism .",
    "@xmath9-derivations are _ very close _ to our intended computations .",
    "therefore , the @xmath9 system will be very useful for designing a sound and complete goal solving procedure in the next section .",
    "provability in @xmath9 is defined as follows .",
    "@xmath256 if and only if the sequent @xmath145 has a proof using the following rules :    * _ axiom to deal with constraints _",
    ": @xmath257 * _ backchaining rule for atomic goals _ : @xmath258 where @xmath119 , @xmath210 begin with the same predicate symbol and @xmath259 is a variant of a formula of @xmath136 , where @xmath260 do not appear free in the sequent of the conclusion . *",
    "_ rules introducing the connectives and quantifiers of the goals _ : + @xmath192 , @xmath193 , @xmath194 , @xmath195 , @xmath196 , @xmath197 . + defined as in the system @xmath141 .",
    "the structure of the rule @xmath261 , that encapsulates a backchaining mechanism , corresponds to the method by which atomic goals , @xmath210 , will be solved by the goal solving procedure to be presented in section [ solve ] .",
    "as usual in logic programming , an `` instance '' of a clause with head @xmath119 and body @xmath4 is searched , in such a way that @xmath149 and @xmath4 can be proved . by the definition of @xmath9 , the existential quantification on the right hand side of the premise",
    "sequent forces a search for this `` instance '' ( managed by means of constraints in our system ) .",
    "note that a similar behaviour would result from the application of @xmath262 if we would make use of @xmath141 .",
    "the next auxiliary lemma is needed to show that @xmath9 and @xmath141 have the same deductive power .",
    "it can be viewed as a particular kind of cut elimination for @xmath141 , where the cut formula is taken from the elaboration of the program in the left side of the sequent .",
    "we can not apply directly any classical cut elimination result , because constraint entailment is embedded into our proof system .",
    "[ elab ] for any @xmath263 and @xmath264 : if @xmath265 , then @xmath266",
    ".    it appears in the appendix .",
    "now we can prove the promised equivalence between @xmath9 and @xmath141 .",
    "the proof systems @xmath141 and @xmath9 are equivalent .",
    "that means , for any program @xmath3 , for any set of constraints @xmath81 , and for any goal @xmath4 it holds :    @xmath179 if and only if @xmath267    we prove both implications by induction on the size of proofs .    1 .   assuming @xmath179 , we prove @xmath268 by case analysis on the structure of @xmath4 . + if @xmath200 , by the proof transformation lemma ( [ trans ] ) there are @xmath54 ( @xmath202 ) constraints @xmath269 , a variant @xmath270 of some formula of @xmath136 , with @xmath260 new distinct variables , @xmath207 not appearing free in @xmath271 @xmath272 , for @xmath209 , and @xmath119 , @xmath210 beginning with the same predicate symbol , such that : 1 .   @xmath273 ; @xmath274 .",
    "2 .   @xmath275 .",
    "3 .   @xmath276 with a shorter proof , or @xmath215",
    ". + by ( b ) and @xmath277 , @xmath278 . by ( c ) and the induction hypothesis , @xmath279 .",
    "note that if @xmath215 , the proof of this sequent is a direct consequence of the rule @xmath277 .",
    "so applying @xmath280 , @xmath281 . now , in accordance with ( a ) and the conditions on @xmath260 , it is possible to apply @xmath162 @xmath54 times obtaining @xmath282 .",
    "therefore , using @xmath261 , @xmath283 .",
    "+ the cases for non atomic formulas are immediate due to the proof transformation lemma ( [ trans ] ) , the definition of @xmath9 and the induction hypothesis .",
    "2 .   let us also prove only the atomic case , the others are proved using the induction hypothesis and the definition of the calculi @xmath9 , @xmath141 .",
    "+ assume @xmath283 , then by the definition of @xmath9 the rule @xmath261 has been applied and @xmath284 with a shorter proof , where @xmath285 is a variant of a formula of @xmath136 with @xmath260 new variables and @xmath119 , @xmath210 beginning with the same predicate symbol . because of the form of @xmath9 s inference rules , the only way to derive this sequent is by @xmath54 successive applications of @xmath196 . since @xmath260 are new does not appear free in @xmath286 , for @xmath209 . ]",
    ", we can assume : 1 .",
    "@xmath287 ; @xmath288 .",
    "2 .   @xmath289 with a shorter proof .",
    "+ then by ( b ) and according to the definition of @xmath9 , @xmath290 and @xmath291 with shorter proofs .",
    "therefore , by the induction hypothesis , + @xmath292 ( @xmath293 ) and + @xmath294 @xmath295 ( @xmath296 ) .",
    "+ ( @xmath293 ) implies @xmath297 , by the proof transformation lemma ( [ trans ] ) .",
    "then , by @xmath147 , @xmath298 so applying @xmath299 to ( @xmath296 ) and ( @xmath300 ) , @xmath301 now by @xmath54 applications of @xmath163 , using ( a ) and the conditions on @xmath302 , we obtain @xmath303    therefore by the elaboration lemma ( [ elab ] ) @xmath304    the properties stated in lemma [ cons ] and lemma [ exist ] hold also for @xmath9-derivability .",
    "this is ensured by the next two lemmas that are proved in the appendix .",
    "+    [ ucons ] for any @xmath178 , if @xmath181 is a set of constraints such that @xmath182 , and @xmath268 , then @xmath183 has a @xmath9-proof of the same size .    [ uexist ] for any @xmath188 , if @xmath305 and @xmath166 is a variable that does not appear free in @xmath190 , then @xmath191 has a @xmath9-proof of the same size .    from now on we will work only with the calculus @xmath9 .",
    "we now turn to the view of _",
    "hh_(@xmath1 ) as a logic programming language . solving a goal @xmath4 using a program @xmath3 means finding a @xmath1-satisfiable constraint @xmath5 such that @xmath306 any constraint @xmath5 with this property is called a _",
    "correct answer constraint_. for instance , @xmath307 is a correct answer constraint for the @xmath308 example , as shown in the introduction .",
    "we will present a goal solving procedure as a transition system .",
    "goal solving will proceed by transforming an initial state through a sequence of intermediate states , ending in a final state .",
    "each state will conserve the goals that remain to be solved and a partially calculated answer constraint .",
    "the final state will not have any goal to be solved . in the following",
    "we will formalize these ideas and show soundness and completeness of the proposed procedure .    a _ state _ w.r.t .",
    "a finite set of variables @xmath309 , written @xmath310 , has the form @xmath311 $ ] where : @xmath312 is a multiset of triples @xmath313 ( @xmath3 _ local program _ , @xmath80 _ local constraint _ formula and @xmath4 _ local goal _ ) .",
    "@xmath314 is a quantifier prefix @xmath315 where @xmath316 are distinct variables not belonging to @xmath309 , and every @xmath317 , @xmath318 , is the quantifier @xmath319 or @xmath85 .",
    "@xmath320 is a _",
    "global constraint _ formula .",
    "this complex notion of state is needed because the goal solving transformations , presented below , introduce local clauses and local constraints . of course",
    ", local clauses also arise in _ hh _ , see @xcite .",
    "initial states are quite simple as can be seen in definition [ initial ] .",
    "we say that a _ state _",
    "$ ] is _ satisfiable _ iff the associated constraint formula @xmath322 , also called _ partially calculated answer constraint _ , is @xmath1-satisfiable .",
    "if @xmath323 , @xmath314 are quantifier prefixes such that @xmath323 coincides with the first @xmath324 elements of @xmath314 , @xmath325 , where @xmath54 is the number of elements of @xmath314 , then @xmath326 represents the result of eliminating @xmath323 of @xmath314 . for instance @xmath327 .    to represent a multiset @xmath312 ,",
    "we will simply write its elements separated by commas , assuming that repetitions are relevant but ordering is not . in particular",
    ", the notation @xmath328 stands for any multiset which includes at least one occurrence of the triple @xmath329 .",
    "[ str ]    the transformations permitting to pass from a state @xmath310 w.r.t .",
    "a set of variables @xmath309 , to another state @xmath330 w.r.t .",
    "@xmath309 , written as @xmath331 , are the following :    1 .   _",
    "conjunction_. + @xmath332 $ ] @xmath333 @xmath334 $ ] .",
    "disjunction_. + @xmath335 $ ] @xmath333 @xmath336 $ ] , for @xmath337 or @xmath224 + ( do nt",
    "know choice ) .",
    "implication with local clause_. + @xmath338 $ ] @xmath333 @xmath339 $ ] .",
    "implication with local constraint_. + @xmath340 $ ] @xmath333 @xmath341 $ ] .",
    "_ existential quantification_. + @xmath342 $ ] @xmath333 @xmath343                  \\rangle]$ ] , + where @xmath344 does not appear in @xmath314 nor in @xmath309 . 6 .   _",
    "universal quantification_. + @xmath345 $ ] @xmath333 @xmath346\\rangle]$ ] , + where @xmath344 does not appear in @xmath314 nor in @xmath309 . 7 .   _",
    "constraint_. + @xmath347 $ ] @xmath333 @xmath348 $ ] .",
    "+ if @xmath349 is @xmath1-satisfiable .",
    "_ clause of the program_. + @xmath350 $ ] @xmath333 @xmath351 $ ] .",
    "+ provided that @xmath352 is a variant of some clause in @xmath136 ( do nt know choice ) , @xmath353 do not appear in @xmath314 nor in @xmath309 , and @xmath354 begin with the same predicate symbol .",
    "note that every transformation can be applied to an arbitrary triple @xmath355 within the state , since @xmath356 is viewed as a multiset .",
    "moreover , all choices involved in carrying out a sequence of state transformations are _ do nt care _ , except those explicitly labeled as _ do nt know _ in transformations _",
    "ii ) _ and _ viii ) _ above . one can commit to do nt care choices without compromising completeness .",
    "in other words : at the implementation level , backtracking is needed only for do nt know choices .",
    "the following definition formalizes the setting needed for goal solving .",
    "[ initial ] the _ initial state _ for a program @xmath3 and a goal @xmath4 is a state w.r.t .",
    "the set of free variables of @xmath3 and @xmath4 consisting in @xmath357.$ ]    a _ resolution of a goal g from a program _",
    "@xmath3 is a finite sequence of states w.r.t .",
    "the free variables of @xmath3 and @xmath4 , @xmath358 , such that :    * @xmath359 is the initial state for @xmath3 and @xmath4 .",
    "* @xmath360 , @xmath99 , by means of any of the transformation rules . * the _ final state _",
    "@xmath361 has the form @xmath362 $ ] .",
    "the constraint @xmath363 is called the _ answer constraint _ of this resolution .    using @xmath3 , @xmath4 and @xmath5 as given in the _ disc example _ ( see the introduction ) it is possible to build a resolution of @xmath4 from @xmath3 with answer constraint @xmath5 as follows :    [ @xmath364 $ ] @xmath365 + @xmath366 $ ] @xmath367 + @xmath368 $ ] @xmath369 + @xmath370 $ ] @xmath371 + @xmath372 $ ] + since @xmath373 is @xmath6-satisfiable .",
    "so the answer constraint is + @xmath374 + @xmath375 @xmath27    for _ clp _ programs , the goal transformations _",
    "ii ) , iii ) , iv ) _ and _ vi ) _ can never be applied .",
    "therefore , the state remains of the form @xmath311 $ ] , where @xmath314 includes only existential quantifiers and @xmath312 is a multiset of triples @xmath376 such that @xmath3 is the global program . for states of this kind , the goal transformations _",
    "i ) , v ) , vii ) _ and _ viii ) _ specify constrained _ sld _ resolution , as used in _",
    "clp _ ; see e.g. @xcite . on the other hand , traditional _",
    "hh _ programs can be emulated in our framework by using the herbrand constraint system @xmath11 and avoiding constraints in programs and initial goals .",
    "then transformation _ iv ) _ becomes useless , and the remaining goal transformations can be viewed as a more abstract formulation of the goal solving procedure from @xcite .",
    "viii ) _ introduces equational constraints in intermediate goals , and in transformation _",
    "vii ) _ the local constraint @xmath80 is simply @xmath86 .",
    "therefore , @xmath377 is equivalent to @xmath378 , where @xmath379 can be assumed to be a conjunction of equations .",
    "checking @xmath380-satisfiability of @xmath381 corresponds to solving a unification problem under a mixed prefix in @xcite .    admittedly , the labeled unification algorithm presented in @xcite is closer to an actual implementation , while our description of goal solving is more abstract .",
    "note , however , that the goal solving transformations are open to efficient implementation techniques .",
    "in particular , when _ vii ) _ adds a new constraint to the global constraint @xmath320 , the satisfiability of the new partially calculated answer constraint should be checked incrementally , without repeating all the work previously done for @xmath322 .",
    "of course , delaying the constraint satisfiability checks until the end is neither necessary nor convenient .",
    "soundness of the goal solving procedure means that if @xmath5 is the answer constraint of a resolution of a goal @xmath4 from a program @xmath3 , then the sequent @xmath8 has a @xmath9-proof .",
    "the soundness theorem is based on two auxiliary results .",
    "the first one ensures that states remain satisfiable along any resolution .",
    "[ sound1 ] let @xmath382 be a resolution of a goal @xmath4 from a program @xmath3 , and @xmath309 the set of free variables of @xmath3 and @xmath4 .",
    "then , for any @xmath383 , @xmath384 , if @xmath385 $ ] , then the following properties are satisfied :    1 .   the free variables of the formulas of @xmath386 , and @xmath387 are in @xmath388 or in @xmath309 .",
    "@xmath389 is satisfiable .",
    "the first property is a consequence of the procedure used to build the prefix of a state .",
    "the initial state satisfies it by definition , and when passing from state @xmath390 to state @xmath391 , @xmath392 , if we include new free variables , these will be quantified universally or existentially by @xmath388 .    for the second property , note that @xmath393 by definition . moreover , for each transformation step @xmath394 , one of the three following cases applies :    * @xmath395 .",
    "then the transition must correspond to the transformation _",
    "vii ) _ which requires @xmath1-satisfiability of @xmath396 . * @xmath397 and @xmath398 .",
    "this case is trivial . * @xmath397 and @xmath399 , where @xmath400 is @xmath319 or @xmath85 and @xmath344 is a new variable not free in @xmath401 , and not occurring in @xmath402 . under these conditions , @xmath403    and @xmath1-satisfiability propagates from @xmath404 to @xmath405 .",
    "the second auxiliary lemma means that correct answer constraints are preserved by any resolution step .",
    "[ sound2 ] assume @xmath406 $ ] and @xmath407 $ ] are two states w.r.t .",
    "a set of variables @xmath309 , such that @xmath408 . if @xmath409 is a constraint with its free variables in @xmath410 or in @xmath309 , and such that @xmath411 and for any @xmath412 , @xmath413 , then @xmath414 and for any @xmath415 , @xmath416 .",
    "we analyze the different cases , according to the transformation applied .",
    "we show here the first case , the other cases appear in the appendix .    1 .   _",
    "conjunction_. @xmath323 is empty and @xmath417 , so @xmath414 obviously . on the other hand ,",
    "let @xmath418 : + if @xmath419 , then @xmath420 by hypothesis , since @xmath421 .",
    "+ if @xmath422 , then @xmath423 and @xmath424 , @xmath425",
    ". therefore @xmath426 by hypothesis , since @xmath421 ,    and consequently @xmath427 by applying ( @xmath428 ) .",
    "[ soundness ] let @xmath3 be any program . if @xmath4 is a goal such that there is a resolution @xmath429 of @xmath4 from @xmath3 with answer constraint @xmath430 , then @xmath5 is @xmath1-satisfiable and @xmath431    the proof is direct from the previous lemmas .",
    "@xmath1-satisfiability of @xmath5 is a consequence of item 2 of lemma [ sound1 ] . besides using lemma [ sound2 ]",
    "we can prove , that for @xmath432 , @xmath433 for any @xmath434 , and @xmath435 .",
    "the case @xmath436 of this result assures the theorem .",
    "let us prove it by induction on the construction of @xmath437 , but beginning from the last state .",
    "the base case is obvious because @xmath438 and @xmath439 holds trivially . for the induction step , we suppose the result for @xmath440 , and we prove it for @xmath441 . taking @xmath442 as the constraint @xmath409 of lemma [ sound2 ]",
    ", the induction hypothesis for @xmath443 indicates that the conditions of lemma [ sound2 ] are satisfied for @xmath444 , then this lemma affirms that the result is true for @xmath441 as we wanted to prove .",
    "completeness of the goal solving procedure states that given a program @xmath3 , and a goal @xmath4 such that @xmath445 for a @xmath1-satisfiable constraint @xmath446 , there is a resolution of @xmath4 from @xmath3 with answer constraint @xmath5 that is entailed by @xmath446 in the constraint system @xmath1 , i.e. @xmath447 .",
    "of course this entailment means that the computed answer @xmath5 is at least as general as the given correct answer @xmath446 .    in order to prove this result",
    ", we introduce a well - founded ordering which measures the complexity of proving that a given constraint is a correct answer for a given state .",
    "the ordering is based on multisets .",
    "let @xmath3 be a program , @xmath4 a goal , and @xmath80 , @xmath5 , constraints such that @xmath448 , then we define @xmath449 as the size of the shortest @xmath9-proof of the sequent @xmath450    let @xmath312 be a multiset of triples @xmath451 .",
    "we define @xmath452 as the multiset of sizes @xmath453 , where the multiplicity of @xmath453 in @xmath452 coincides with the multiplicity of @xmath454 in @xmath312 .",
    "we use the notation @xmath455 for the well - founded multiset ordering @xcite induced by the ordering @xmath456 over the natural numbers .",
    "next , we show that as long as a state can be transformed , the transformation can be chosen to yield a smaller state with respect to @xmath455 , while essentially keeping a given answer constraint @xmath5 .",
    "[ complet1 ]",
    "let @xmath457 $ ] be a non - final state w.r.t .",
    "a set of variables @xmath309 , and let @xmath5 be a constraint such that @xmath458 is @xmath1-satisfiable and @xmath459 . if @xmath448 for all @xmath460 , then we can find a rule transforming @xmath310 in a state @xmath461 $ ] ( @xmath462 ) and a constraint @xmath409 such that :    1 .",
    "@xmath463 and @xmath464 .",
    "@xmath465 for all @xmath466 . moreover @xmath467 .    by induction on the structure of @xmath4 , where @xmath468 , analyzing cases .",
    "we show here an illustrative case , the proof for the other cases appears in the appendix .    if @xmath4 has the form @xmath469 , applying the transformation _",
    "v ) _ we obtain @xmath330 .",
    "let @xmath344 be the variable used in the substitution involved in this transformation .",
    "@xmath344 does not appear in @xmath314 , @xmath309 , and we can choose it also not free in @xmath5 . by hypothesis @xmath470",
    "has a proof of size @xmath199 , then by the definition of @xmath9 , there is a constraint formula @xmath471 such that @xmath472 $ ] has a proof of size less than @xmath199 and @xmath473 .",
    "let @xmath474 .",
    "@xmath475 since @xmath344 is not free in @xmath5 , @xmath80 , and @xmath473 , therefore @xmath476 .",
    "moreover , @xmath477 , @xmath478 and @xmath479 implies @xmath480 .",
    "let @xmath481 . if @xmath482 , then @xmath483 by hypothesis , and therefore , using @xmath484 and lemma [ ucons ] , @xmath485 and @xmath486 .",
    "+ if @xmath487 , then @xmath488 $ ] , @xmath489 and @xmath490 .",
    "@xmath491 $ ] will also have a proof of size less than @xmath199 , since @xmath492 @xmath493 $ ] has such a proof , due to @xmath494 and lemma [ ucons ] .",
    "so @xmath465 for all @xmath495 , @xmath496 , and @xmath497 .",
    "[ completeness ] let @xmath3 be a program , @xmath4 a goal and @xmath446 a @xmath498-satisfiable constraint such that @xmath499 . then there is a resolution of @xmath4 from @xmath3 with answer constraint @xmath5 such that @xmath500    using lemma [ complet1 ] , we can build a sequence @xmath501 of state transformations , ( @xmath502 $ ] , @xmath432 ) , that is a a resolution of @xmath4 from @xmath3 , and a sequence of constraints @xmath503 satisfying that for all @xmath383 , @xmath99 :    * @xmath504 , * @xmath505 , * @xmath506 , for all @xmath507 .",
    "we use an inductive construction that is guaranteed to terminate thanks to the well - founded ordering @xmath455 .",
    "let @xmath508 $ ] be the initial state for @xmath3 and @xmath4 , which we know is not final , if we take @xmath509 as the constraint given by the theorem s hypothesis , we obtain @xmath510 , since @xmath511 is empty and @xmath512 .",
    "moreover , by hypothesis , @xmath513 is satisfied , and then also @xmath514 because of @xmath515 and lemma [ ucons ] .",
    "assume the result true for @xmath516 , if the state @xmath441 is not final , then @xmath389 and @xmath517 fulfill the hypothesis of lemma [ complet1 ] , thus there will be a state @xmath518 ( @xmath519 ) and a constraint @xmath520 such that @xmath521 and @xmath522 furthermore , for all @xmath523 , @xmath524 and @xmath525 .",
    "therefore , by the induction hypothesis , @xmath504 , and with @xmath526 we obtain @xmath527 by successive iteration , as @xmath455 is well - founded , we must eventually get a final state @xmath361 that will in fact satisfy @xmath528 and @xmath529 and so @xmath530 , where @xmath531 is the answer constraint of @xmath532 . in this way we conclude @xmath533    for _ hh_(@xmath11 ) programs such that constraints appear neither in the left - hand side of implications nor in initial goals ,",
    "theorem [ completeness ] implies an alternative formulation of the completeness theorem given in @xcite for a goal solving procedure for first - order _ hh_. in our opinion , using constraints and constraint satisfiability instead of substitutions and unification under a mixed prefix , that requires low level representation details , we gain a more abstract presentation . for _ clp",
    "_ programs , theorem [ completeness ] becomes a stronger form of completeness , in comparison to the strong completeness theorem for success given in @xcite , th .",
    "2 ( see also @xcite , th .",
    "4.12 ) . there , assuming @xmath534 , the conclusion is that @xmath535 where @xmath536 are answer constraints computed in @xmath537 different resolutions of @xmath4 from @xmath3 .",
    "example [ maher ] below was used in @xcite to illustrate the need of considering disjunctions of computed answers .",
    "in fact , there is no single computed answer @xmath446 such that @xmath538 .",
    "however , this fact does nt contradict theorem [ completeness ] , because @xmath539 is not @xmath9-derivable , as we will see immediately .",
    "[ maher ]    this example is borrowed from @xcite .",
    "it belongs to the instance _",
    "hh_(@xmath11 ) given by the herbrand constraint system . consider    @xmath540 with @xmath541 , @xmath542    @xmath543    @xmath544    up to trivial syntactic variants , this is a _ clp_(@xmath380)-program .",
    "according to the model theoretic semantics of _",
    "clp_(@xmath380 ) , we get @xmath545 , because either @xmath546 or @xmath547 will hold in each @xmath11-model of @xmath548 .",
    "in contrast to this , in @xmath9 we only can derive @xmath549 ( using @xmath550 ) and @xmath551 ( using @xmath552 ) . and",
    "it is easy to check that both answers @xmath553 and @xmath554 can be computed by the goal solving transformations .",
    "but we do not obtain @xmath555 . since @xmath556 @xmath546 , @xmath556 @xmath547 , neither @xmath550 nor @xmath552",
    "can be used to build a @xmath9-proof.@xmath27    the example shows a difference between the model - theoretic semantics used in _",
    "clp _ @xcite and our proof - theoretical semantics , based on provability in the calculus @xmath9 .",
    "the latter deals with the logical symbols in goals and clauses according to the inference rules of intuitionistic logic .",
    "therefore @xmath9-provability turns out to be more constructive than _ clp _ s model - theoretic semantics , and thus closer to constrained resolution .",
    "this is the ultimate reason why our completeness theorem [ completeness ] involves no disjunction of computed answers .    as an illustration of the goal solving procedure",
    ", we show next the detailed resolution of the second goal from example [ mortage1 ] .",
    "[ mortage2 ] let us recall the program and goal from example [ mortage1 ] .",
    "as usual in programming practice , we write program clauses @xmath557 in the form @xmath558 . ] .",
    "@xmath559 \\ { _ mortgage@xmath560 _ _ @xmath561 _ + _ totalint _",
    "@xmath562 @xmath84 @xmath563 , +   + _ _ mortgage__@xmath564 + @xmath565 + @xmath566 + ` @xmath567    we present a resolution of @xmath4 from @xmath3 , using the state transformation rules _",
    "i ) _ to _ viii ) _ from definition [ str ] :    @xmath568 $ ] + @xmath365 + @xmath569 + ` @xmath570 $ ] + @xmath367 + @xmath571 + ` @xmath572 $ ] + @xmath573 + @xmath574 @xmath575 + ` @xmath576 $ ] + @xmath577 + @xmath578 + ` @xmath579 $ ] + @xmath369 + @xmath580 + ` @xmath575 + ` @xmath581 + ` @xmath582 + ` @xmath583 $ ] + simplifying the underbraced formula in the constraint system @xmath6 , we obtain : +   + @xmath584 + ` @xmath575 + ` @xmath585 $ ] + @xmath369 + @xmath586 + ` @xmath575 + ` @xmath587 + ` @xmath588 + ` @xmath589 $ ] +   + and simplifying anew the underbraced formula in @xmath6 : +   + @xmath590 + ` @xmath575 + ` @xmath591 + ` @xmath592 $ ] +   + applying now transformation _",
    "vii ) _ , we obtain the following answer constraint : +   + @xmath593 + ` @xmath594 + ` @xmath595 + @xmath596 + @xmath597 + ` @xmath598 + @xmath596 + @xmath599 + `",
    "@xmath600 + @xmath596 + @xmath601",
    "+ ` @xmath602    we prove @xmath603 . in effect , let @xmath604 we observe that @xmath605 is a strictly decreasing continuous function of @xmath61 for any @xmath606 , and also that @xmath607 @xmath608 then , @xmath609 is true iff for any @xmath62 and @xmath59 such that @xmath610,\\ ] ] there exists @xmath611 $ ] such that @xmath612 ( @xmath56 strictly decreasing continuous function ) , and this is true iff @xmath61 has its maximum value for @xmath613 and its minimum for @xmath614 , or equivalently @xmath615 @xmath27",
    "we have proposed a novel combination of constraint logic programming ( _ clp _ ) with first - order hereditary harrop formulas ( _ hh _ ) .",
    "our framework includes a proof system with the uniform proofs property and a sound and complete goal solving procedure .",
    "our results are parametric w.r.t .",
    "a given constraint system @xmath1 , and they can be related to previously known results for _ clp _ and _ hh_. therefore , we can speak of a scheme whose expressivity sums the advantages of _ clp _ and _",
    "hh_.    as far as we know , our work is the first attempt to combine the full expressivity of _ hh _ and _ clp_. a related , but more limited approach , can be found in @xcite .",
    "this paper presents an amalgamated logic that combines the horn fragment of intuitionistic logic with the entailment relation of a given constraint system , showing the existence of uniform proofs as well as soundness and completeness of constrained _ sld _ resolution w.r.t . the proof system .",
    "the more general case of _ hh _ is not studied . moreover , the presentation of constrained _ sld _ resolution is not fully satisfactory , because the _ backchaining _ transition rule , see @xcite , guesses an arbitrary instance of a program clause , instead of adding unification constraints to the new goal , as done in our state transition rule _",
    "viii)_.    several interesting issues remain for future research .",
    "firstly , more concrete evidence on potential application areas should be found .",
    "we are currently looking for _ clp _ applications",
    "where greater _ hh _ expressivity may be useful , as well as for typical _ hh _ applications that can benefit from the use of numeric and/or symbolic constraints .",
    "secondly , tractable fragments of our formalism ( other than _ clp _ and _ hh _ separately ) should be discovered .",
    "otherwise , constraint satisfiability and constraint entailment may become intractable or even undecidable .",
    "our broad notion of constraint system includes any first - order theory based on arbitrary equational axiomatization .",
    "such theories are sometimes decidable , see @xcite , but most often restricted fragments must be chosen to ensure decidability .",
    "last but not least , our framework should be extended to higher - order _ hh _ as used in many @xmath0-prolog applications .",
    "+ * acknowledgement * we are grateful to the anonymous referees for their constructive criticisms .",
    "+            if @xmath617 , then @xmath277 or @xmath147 have been applied . in the first case ,",
    "@xmath618 for some constraint @xmath80 and @xmath619 .",
    "hence @xmath620\\ , \\vdash_{\\cal c}\\ , c[t / x]$ ] , by the properties of @xmath77 .",
    "therefore the sequent @xmath180 ; \\gamma[t / x ] \\ , { { |\\!\\mbox{---}}}\\ , c[t / x]$ ] has a proof of size 1 , by applying @xmath277 . in the second case ,",
    "@xmath200 , for some predicate formula @xmath119 , @xmath621 , with @xmath210 beginning with the same predicate symbol as @xmath119 , and @xmath622 .",
    "hence @xmath620\\ , \\vdash_{\\cal c}\\ ,   ( a ' \\approx a)[t / x]$ ] .",
    "therefore , applying @xmath147 , @xmath623 , a'[t / x ] ; \\gamma[t / x ] \\ , { { |\\!\\mbox{---}}}\\ , a[t / x]$ ] has a proof of size 1 , and @xmath180 = \\delta'[t / x ] \\cup \\{a'[t / x]\\}$ ] .",
    "@xmath625 : :    in this case @xmath626 , and the last    step of the proof has the form :    @xmath627    by the induction hypothesis ,    @xmath180;\\gamma[t / x ] , c[t / x]\\ , { { |\\!\\mbox{---}}}\\ , g'[t / x]$ ]    has a proof of size @xmath628 . then , applying    @xmath625 , we obtain that    @xmath180;\\gamma[t / x ]     \\ , { { |\\!\\mbox{---}}}\\ , ( c { \\rightarrow}g')[t / x]$ ] has a proof of size    @xmath199 . @xmath176 : :    in this case @xmath629 and the last step of    the proof has the form :    @xmath630 }    { \\delta;\\gamma \\ , { { |\\!\\mbox{---}}}\\,\\forall z g'}\\,\\;(\\forall_{r})\\ ] ]    where @xmath230 does not appear free in the sequent of the    conclusion .",
    "we can assume , without loss of generality , that    @xmath631 and @xmath246 does not appear in    @xmath172 .",
    "if this were not the case , the induction hypothesis    could be applied another time , in order to rename coincident    variables .",
    "also we can assume that @xmath230 is different from    @xmath166 and that @xmath230 does not occur in    @xmath172 . by the induction hypothesis ,    @xmath180;\\gamma[t / x ] \\",
    ", { { |\\!\\mbox{---}}}\\ , g'[t / x][y / z]$ ]    has a proof of size @xmath628 , because under our hypothesis ,    @xmath632[t / x ] \\equiv g'[t / x][y / z]$ ] .",
    "now , applying    @xmath176 ,    @xmath180;\\gamma[t / x ] \\ , { { |\\!\\mbox{---}}}\\ , \\forall z ( g'[t / x])$ ]    has a proof of size @xmath199 , but this is the expected result    because @xmath633 ) \\equiv ( \\forall z g')[t / x]$ ] .",
    "@xmath163 : :    in this case @xmath634 .",
    "as before , we can assume that    @xmath631 and does not appear in @xmath172 , and the    last step of the proof has the form :    @xmath635;\\gamma , c\\ , { { |\\!\\mbox{---}}}\\ , g \\;\\;\\;\\qquad    \\gamma \\ , \\vdash_{\\cal c } \\ , \\exists y c }    { \\delta , \\forall z d;\\gamma \\ , { { |\\!\\mbox{---}}}\\,g}\\,\\;(\\forall_{l})\\ ] ]    where @xmath230 does not appear free in the sequent of the    conclusion .",
    "we can assume without loss of generality that    @xmath230 is different from @xmath166 and that    @xmath230 does not occur in @xmath172 .",
    "then , by the    induction hypothesis ,    @xmath636 , d[t / x][y / z];\\gamma[t / x ] , c[t / x ] \\ , { { |\\!\\mbox{---}}}\\ , g[t / x]\\;\\ ,     ( \\dag)\\ ] ] has a proof of size @xmath628 , because under our    hypothesis , @xmath637[t / x ] \\equiv d[t / x][y / z]$ ] .",
    "now    @xmath638 implies    @xmath639 \\ , \\vdash_{\\cal c } \\ , \\exists y ( c[t / x ] ) \\;\\ ; ( \\ddag),\\ ] ]    by the properties of @xmath77 and the fact that    @xmath640 \\equiv \\exists y ( c[t / x])$ ] .",
    "then    applying @xmath163 to @xmath526 and    @xmath641 ,    @xmath180;\\gamma[t / x ] \\ , { { |\\!\\mbox{---}}}\\ ,   g[t / x]$ ]    has a proof of size @xmath199 , because        by induction on the size of the proof of the sequent @xmath616 , by case analysis on the last rule applied , and using the properties of entailment in constraint systems .",
    "it is obvious for proofs of size 1 . for proofs of size @xmath624 ,",
    "let us analyze the case @xmath163 ( the others are similar ) . in this case , the last step of the proof is of the form : @xmath643;\\gamma , c\\ , { { |\\!\\mbox{---}}}\\ , g \\;\\;\\ ; \\qquad   \\gamma \\ , \\vdash_{\\cal c } \\ , \\exists y c } { \\delta ' , \\forall x d;\\gamma \\ , { { |\\!\\mbox{---}}}\\ , g}\\,\\,(\\forall_{l})\\ ] ] where @xmath230 does not appear free in the sequent of the conclusion , and @xmath644 . by the induction hypothesis @xmath645;\\gamma ' , c\\ , { { |\\!\\mbox{---}}}\\ , g \\;\\ ; ( \\dag)\\ ] ] has a proof of size @xmath628 .",
    "we know that @xmath638 , and by the hypothesis @xmath646 , so @xmath647 we can assume that @xmath230 does not appear free in @xmath181 , in other case , by lemma [ sust ] , we can work with @xmath648;\\gamma ' , c[y'/y]\\ , { { |\\!\\mbox{---}}}\\ , g$ ] ( @xmath649 new ) , instead of @xmath526 , and with @xmath650 $ ] , instead of @xmath641 , by the properties of @xmath77 .",
    "then we finish by applying @xmath163 to @xmath526 and @xmath641 .",
    "if @xmath652 has a proof of size 1 , @xmath147 or @xmath277 has been applied . in both cases @xmath653 for certain constraint @xmath248 . both @xmath248 and @xmath81",
    "do not contain free occurrences of @xmath166 , hence @xmath654 , and therefore @xmath191 has a proof of size 1 .",
    "if @xmath652 has a proof of size @xmath655 , let us discuss some of the possible cases .",
    "@xmath162 : :    then @xmath656 and the last step of the    proof is of the form :    @xmath657\\;\\;\\ ; \\qquad    \\gamma , c \\ , \\vdash_{\\cal c } \\ , \\exists y c ' }    { \\delta;\\gamma , c \\ , { { |\\!\\mbox{---}}}\\,\\exists z g'}\\,\\,(\\exists_{r})\\ ] ]    where @xmath230 does not appear free in the sequent of the    conclusion .",
    "hence , by lemma [ cons ] ,    @xmath658 $ ]    has a proof of size @xmath628 .",
    "now , the conditions on    @xmath230 imply that @xmath659 , so @xmath166    is not free in @xmath632 $ ] , because it is not free in    @xmath660 .",
    "then , by the induction hypothesis and    again using lemma [ cons ] ,    @xmath661 \\ ;     \\ ; ( \\dag)\\ ] ] has a proof of size @xmath628 . on the other hand ,",
    "@xmath662 implies    that    @xmath663 so    @xmath664 , since @xmath166 is not free in @xmath81 , thus    @xmath665 since @xmath230 is not free in    @xmath80 .",
    "therefore the desired result is obtained by applying    @xmath162 to ( @xmath293 ) and    @xmath641 . @xmath176",
    ": :    then @xmath629 , and the last step of the    proof has the form :    @xmath666 }    { \\delta;\\gamma , c \\ , { { |\\!\\mbox{---}}}\\,\\forall z g'}\\,\\;(\\forall_{r})\\ ] ]    where @xmath230 does not appear free in the sequent of the    conclusion .",
    "then @xmath230 does not occur free in    @xmath80 , so it is different from @xmath166 .",
    "applying the    induction hypothesis to the sequent    @xmath667 $ ] , we    obtain that    @xmath668 $ ]    has a proof of size @xmath628 .",
    "then    @xmath669 has a    proof          1 .   for @xmath200",
    ", there are @xmath54 constraint formulas @xmath201 ( @xmath202 ) and a formula @xmath203 @xmath204 that is a variant of some formula in @xmath136 such that @xmath205 are new distinct variables not appearing free in @xmath206 , where @xmath207 does not appear free in @xmath670 , for @xmath209 , and @xmath210 begins with the same predicate symbol as @xmath119 .",
    "in addition it holds : 1 .",
    "@xmath671 @xmath672 .",
    "2 .   @xmath213 3 .",
    "@xmath214 has a proof of size less than @xmath199 , or @xmath215 .",
    "2 .   if @xmath216 , then @xmath217 .",
    "3 .   if @xmath218 , then @xmath219 and @xmath220 have proofs of size less than @xmath199 .",
    "4 .   if @xmath221 , then @xmath222 has a proof of size less than @xmath199 for @xmath223 or @xmath224 . 5 .   if @xmath225 , then @xmath226 has a proof of size less than @xmath199 .",
    "6 .   if @xmath227 , then @xmath228 has a proof of size less than @xmath199 . 7 .   for @xmath229 ,",
    "if @xmath230 is a variable not appearing free in @xmath231 , then there is a constraint formula @xmath80 such that : 1 .   @xmath232 .",
    "2 .   @xmath233 $ ] has a proof of size less than @xmath199 .",
    "if @xmath234 , then @xmath235 @xmath236 $ ] has a proof of size less than @xmath199 , where @xmath230 is a variable that does not appear free in @xmath190 .",
    "if @xmath199 is 1 , then @xmath4 has been proved by a single application of axiom @xmath277 or axiom @xmath147 . in the former case",
    ", @xmath4 is a constraint and item 2 of the lemma holds . in the latter case @xmath4",
    "is an atomic formula @xmath119 and there is @xmath674 , beginning with the same predicate symbol that @xmath119 such that @xmath675 .",
    "but @xmath676 implies @xmath677 , then conditions ( a ) , ( b ) and ( c ) of item 1 are satisfied with @xmath678 , @xmath215 .    if @xmath624 , let us analyze cases according to the last inference rule applied in the proof of the sequent @xmath198",
    "the lemma is obviously true by induction hypothesis if the last inference rule introduces on the right the main connective or quantifier of the goal .",
    "so the problem is reduced to the rules @xmath679 and @xmath163 . for each of these three rules",
    ", we must analyze cases according to the structure of @xmath4 . in each case",
    ", it is possible to transform the proof by permuting the application of right and left - introduction rules , in the same way as in @xcite . in our setting , however , the treatment of @xmath163 gives rise to some new situations .",
    "we analyze the most interesting cases ; the ones we omit can be treated analogously .      * if @xmath683 , then by the induction hypothesis , there is a proof of size less than @xmath628 of @xmath684 . applying @xmath680 we obtain a proof of size less or equal @xmath628 , so less than @xmath199 , of @xmath685 for @xmath223 or @xmath224 .      * if @xmath689 , then @xmath690 has a proof of size @xmath691 , and by the induction hypothesis there is a proof of size less than @xmath692 of @xmath693 $ ] , where @xmath230 is a new variable . then , using that @xmath694 has a proof of size @xmath695 , @xmath696 , and applying @xmath686 , @xmath697 $ ] has a proof of size less or equal @xmath698 so less than @xmath199 , as we wanted to prove . * if @xmath699 , then @xmath700 has a proof of size @xmath691 , so by the induction hypothesis there is a proof of size less than @xmath692 of @xmath701 . then , since @xmath694 has a proof of size @xmath695 , obviously @xmath702 also has a proof of size @xmath695 , and @xmath703 . therefore ,",
    "using @xmath686 , we obtain that @xmath704 has a proof of size less or equal @xmath698 , so less than @xmath199 , as we wanted to prove .",
    "@xmath163 : :    then we can decompose @xmath3 as    @xmath705 , and the last step    of the proof is of the form :    @xmath643;\\gamma , c ' \\ , { { |\\!\\mbox{---}}}\\ , g\\;\\;\\qquad    \\gamma \\ , \\vdash_{\\cal c } \\ , \\exists y c ' }    { \\delta ' , \\forall x d;\\gamma \\ , { { |\\!\\mbox{---}}}\\ , g}\\,\\,(\\forall_{l})\\ ] ]    where @xmath230 is not free in the sequent of the conclusion ,    and the sequent @xmath706;\\gamma , c ' \\ , { { |\\!\\mbox{---}}}\\ , g\\ ] ] has a proof of    size @xmath628 .    *",
    "if @xmath216 , then by the induction hypothesis applied to @xmath400 , we know that @xmath707 .",
    "since @xmath708 and @xmath230 is not free in @xmath709 , we conclude that @xmath217 , due to the properties of @xmath77 , that coincides with item 2 of the lemma . * if @xmath710 , then by the induction hypothesis applied to @xmath400 , the sequent @xmath711;\\gamma , c ' , c \\ , { { |\\!\\mbox{---}}}\\ , g_{1}}\\ ] ] has a proof of size less than @xmath628 . therefore",
    ", since @xmath708 implies @xmath662 , and @xmath230 is not free in @xmath80 , applying @xmath163 , @xmath712 , has a proof of size less or equal than @xmath628 so less than @xmath199 . *",
    "if @xmath237 , then by applying the induction hypothesis to @xmath400 we conclude that there is @xmath80 such that @xmath713 , where @xmath246 is not free in @xmath240 , \\gamma , c',$ ] @xmath714 and @xmath645;\\gamma , c',c \\ , { { |\\!\\mbox{---}}}\\ , g_{1}[z / w ] \\ ; \\ ;   ( \\dag)\\ ] ] has a proof of size less than @xmath628 .",
    "since @xmath230 is not free in @xmath243 , @xmath254 $ ] , applying corollary [ ren ] to @xmath526 we obtain that @xmath238;\\gamma , c',c , u \\approx y \\ , { { |\\!\\mbox{---}}}\\ , g_{1}[z / w]$ ] , where @xmath184 is a new variable , has a proof of the same size , so by lemma [ cons ] , @xmath715;\\gamma , c ' \\wedge c , u \\approx y \\ , { { |\\!\\mbox{---}}}\\ , g_{1}[z / w]\\ ; \\ ;   ( \\ddag)\\ ] ] still with a proof of size less than @xmath628 . now by the properties of the constraint entailment , @xmath716 .",
    "then , since @xmath184 is not free in @xmath717 $ ] , we apply @xmath163 to ( @xmath296 ) and @xmath718 , obtaining that @xmath719\\ ] ] has a proof of size less than or equal @xmath628 . hence using lemma [ exist ] @xmath720\\ ] ]",
    "has a proof of size less than or equal @xmath628 , because , by the assumptions , @xmath230 is not free in @xmath721 $ ] .",
    "therefore we can conclude the result for this case ( item 7 ) , taking @xmath722 as auxiliary constraint .",
    "in fact , @xmath713 implies @xmath723 , since @xmath246 is not free in @xmath81 , @xmath248 .",
    "hence @xmath724 , since @xmath230 is not free in @xmath81 . finally , @xmath725 , because @xmath726 .",
    "* if @xmath200 , then the induction hypothesis for the sequent @xmath400 assures that there are constraints @xmath201 ( @xmath202 ) and a formula @xmath727 that is a variant of a formula in @xmath728\\})$ ] , where @xmath729 are new variables , @xmath207 not appearing free in @xmath286 , for @xmath209 , @xmath210 begins with the same predicate symbol as @xmath119 , and such that : 1 .   @xmath730 ; @xmath731 .",
    "2 .   @xmath732 3 .",
    "@xmath733;\\gamma ,           c ' , c_{1},\\ldots , c_{n } \\ , { { |\\!\\mbox{---}}}\\ , g'$ ] has a proof of size less than @xmath628 , or @xmath215 . + in order to establish item 1 of the lemma , we distinguish two cases : 1 .",
    "@xmath727 is a variant of a formula in @xmath734 , or 2 .",
    "@xmath727 is a variant of a formula in @xmath735)$ ] .",
    "if @xmath727 is a variant of a formula in @xmath734 , then @xmath727 is a variant of a formula in @xmath136 .",
    "taking the following @xmath54 auxiliary constraints @xmath736 , we will prove conditions ( a ) , ( b ) and ( c )",
    ". + @xmath737 : :    for condition ( a ) we need to prove :    +    @xmath738    +    this can be deduced from condition ( i ) above , as follows :    +    ( 1 ) . by ( i ) ,",
    "@xmath739 , then @xmath740 .",
    "hence    @xmath741 since @xmath230 is    not free in @xmath81 .",
    "therefore    @xmath742 since @xmath743 is not free in    @xmath248 .",
    "now we can conclude ( 1 ) because    @xmath744 .    +    ( 2 ) . by ( i ) ,    @xmath745 , then    @xmath746 .",
    "hence    @xmath747 since    @xmath230 is not free in @xmath81 .",
    "therefore    @xmath748 since @xmath749    is not free in @xmath750 .    +    by a similar reasoning , we can prove @xmath751 to    @xmath752 . +    @xmath753 . by ( i ) ,    @xmath754 , then    @xmath755 .    hence    @xmath756 since @xmath230 is not free in    @xmath81 . therefore    @xmath757    since @xmath758 is not free in    @xmath759",
    ". then we deduce    @xmath753 obviously .",
    "@xmath737 : :    for condition ( b ) we need :    @xmath760 to deduce this    from ( ii ) , we note that @xmath230 is not free in    @xmath243 , @xmath761 by assumption",
    ".    moreover , @xmath230 is not free in @xmath210 , or else it    would be free in @xmath243 .",
    "therefore , ( ii ) implies that    @xmath762 which amounts to what we needed .",
    "@xmath737 : :    finally , for condition ( c ) we assume the interesting case where    @xmath295 is not @xmath86 .",
    "we need a proof of size    less than @xmath199 for the sequent    @xmath763 to deduce    this , we first choose a fresh variable @xmath184 , and we apply    corollary [ ren ] to ( iii ) , thus obtaining that    @xmath764;\\gamma ,             c ' , c_{1},\\ldots , c_{n } , u \\approx y \\ , { { |\\!\\mbox{---}}}\\ , g'\\ ] ]    has a proof of size less than @xmath628 .",
    "since @xmath184    is new and    @xmath765 , we can apply @xmath163 obtaining    that    @xmath766    has a proof of size less than @xmath199 . from this , lemma [ cons ]    and lemma [ exist ] ( note that @xmath230 is not free in    @xmath767 ) lead to a proof of size    less than @xmath199 for    @xmath768 another application    of lemma [ cons ] leads from this to a proof of size less than    @xmath199 for the sequent @xmath526 . + ( ii ) .",
    "if @xmath727 is a variant of a formula in @xmath735)$ ] , then @xmath769 is a variant of a formula in @xmath770 , and so it is a variant of a formula in @xmath136",
    ". then condition ( a ) coincides with ( i ) plus @xmath744 , and ( b ) is equivalent to ( ii ) .",
    "moreover from ( iii ) ( assuming that @xmath295 is not @xmath86 ) we can deduce that the sequent @xmath764;\\gamma ,           c ' , c_{1},\\ldots , c_{n } , u \\approx y \\ , { { |\\!\\mbox{---}}}\\ , g'\\ ] ] has a proof of size less than @xmath628 , because of corollary [ ren ] ( @xmath184 is chosen as a new variable ) .",
    "since @xmath771 , we can apply @xmath163 and we obtain a proof of size less than @xmath199 for the sequent @xmath772            * if @xmath775 , then @xmath776 . we prove @xmath266 by induction on the size @xmath199 of the proof of @xmath777 .",
    "if @xmath778 , the proof consists on the application of @xmath147 , the form of @xmath102 implies that it does not take part in this proof .",
    "so there exists @xmath779 such that @xmath780 .",
    "therefore @xmath266 , by @xmath147 . assuming now the result for proofs of size less than @xmath199 , @xmath781 , we proceed by case analysis on the last rule applied in the proof of @xmath777 . note that it is only necessary to analyze the left - introduction rules , since the goal is an atomic formula . for @xmath680 and @xmath163 , we note that @xmath776 can not participate on this step of the proof , instead a formula of @xmath3 has been introduced . for instance , for @xmath680 , if @xmath782 is the formula introduced , then @xmath3 is of the form @xmath783 , and the last step of the proof is : @xmath784 so @xmath785 has a proof of size less that @xmath199 , and since @xmath786 , @xmath787 , by induction hypothesis .",
    "the result can be obtained now using the rule @xmath680 .",
    "+ for the case @xmath686 , if the introduced formula is @xmath102 ( other cases are proved as before ) , then the last step of the proof is : @xmath788 since @xmath789 and @xmath773 , the sequent @xmath790 can be also written as @xmath791 , and we are done . * if @xmath792 , then @xmath793 for @xmath337 or 2 .",
    "@xmath794 , by hypothesis , then it is easy to prove that also @xmath795 . hence , applying structural induction hypothesis to @xmath796 , @xmath797",
    ". therefore @xmath798 , in accordance with the rule @xmath680 .",
    "this is equivalent to @xmath266 , since @xmath792 and @xmath773 . *",
    "if @xmath799 , then @xmath800 , so @xmath801 and we have @xmath266 directly . * if @xmath802 , then @xmath803 and @xmath804 .",
    "we proceed by induction on the size @xmath199 of the proof of @xmath777 .",
    "the case @xmath778 is trivial because @xmath102 can not take part in the proof .",
    "similarly we can reason the inductive step for the cases @xmath680 and @xmath686.the interesting case occurs when @xmath163 was the last rule applied and @xmath102 was the introduced formula . in this case , the last proof step is of the form : @xmath805;\\gamma , c\\,{{|\\!\\mbox{---}}}\\ , a \\;\\ ; \\qquad      \\gamma\\,\\vdash_{\\cal c } \\ ,",
    "\\exists y c }       { \\delta , f;\\gamma\\,{{|\\!\\mbox{---}}}\\,a } \\;\\;(\\forall_{l } )       , \\ ] ] where @xmath230 is not free in the sequent of the conclusion .",
    "+ @xmath806 , f_{1}[y / x];\\gamma , c\\vdash_{\\cal ic }   a$ ] can be deduced from @xmath807;\\gamma , c\\vdash_{\\cal ic }   a$ ] .",
    "then @xmath806;\\gamma ,   c\\,\\vdash_{\\cal ic } \\ , a$ ] , since the lemma holds for @xmath808 $ ] simpler than @xmath122 and @xmath809 \\in elab(d_{1}[y / x])$ ] . therefore @xmath810 , by @xmath163 , using the fact that @xmath230 is not free in @xmath811 , and that @xmath812 .",
    "we con-        by induction on the size of the proof of the sequent @xmath616 , by case analysis on the last rule applied . using the definition of the system @xmath813 and lemma [ cons ] ,",
    "the only interesting case is when the last step corresponds to rule @xmath261 .",
    "but the proof in this case is a direct consequence of the induction hypothesis .      as in the previous lemma , and due now to lemma [ exist ]",
    ", we can focus the proof on the case @xmath261 . in this case @xmath200 and the last step of the proof is of the form : @xmath814 where @xmath119 , @xmath210 begin with the same predicate symbol , and @xmath285 is a variant of a formula of @xmath136 , @xmath260 do not appear free in the sequent of the conclusion .",
    "since @xmath166 is not free in @xmath815 , and @xmath285 is a variant of a formula of @xmath136 , then @xmath166 is not free in @xmath816 .",
    "note also , that @xmath166 is not free in @xmath81 , @xmath3 , by assumption , so applying the induction hypothesis to the sequent @xmath817 , @xmath818 has a proof of the same size .",
    "hence , applying @xmath261 , @xmath819 has a @xmath9-proof of the same size that @xmath820 .",
    "lemma [ sound2 ] _ + assume @xmath406 $ ] and @xmath407 $ ] are two states w.r.t .",
    "a set of variables @xmath309 , such that @xmath408 . if @xmath409 is a constraint with its free variables in @xmath410 or in @xmath309 , and such that @xmath411 and for any @xmath412 , @xmath413 , then @xmath414 and for any @xmath415 , @xmath416 .      1 .   _",
    "disjunction_. @xmath323 is empty and @xmath417 as above .",
    "then let us check only the case @xmath821 .",
    "this implies @xmath822 and @xmath823 or @xmath824 . by hypothesis @xmath825 since @xmath421 .",
    "then @xmath416 , because of the rule ( @xmath826 ) .",
    "implication with local clause_. as before the prefix and the partially calculated answer constraint do not change . if @xmath821 , then @xmath827 and @xmath828 .",
    "hence , by hypothesis since @xmath421 , it holds @xmath829 from which we conclude the result by applying ( @xmath830 ) .",
    "implication with local constraint_. as in the preceding cases where there are no changes in @xmath320 and @xmath314 , we check what happens if @xmath831 . in this case @xmath832 and @xmath833 . by hypothesis , since @xmath421 , we have @xmath834 then in accordance with lemma [ ucons ] @xmath835 now we conclude @xmath836 , by applying ( @xmath837 ) .",
    "4 .   _ existential quantification_. @xmath838 with @xmath344 a new variable not in @xmath314 nor in @xmath309 . hence , by item _",
    "i ) _ of lemma [ sound1 ] , @xmath344 is not free in the formulas of @xmath312 , nor in @xmath320 .",
    "therefore , using the facts @xmath411 and @xmath417 , we can conclude @xmath839 . + now let @xmath418 , if @xmath419 , then @xmath840 , by hypothesis",
    ". then @xmath841 by lemma [ uexist ] , because @xmath344 is not free in @xmath842 .",
    "+ if @xmath821 , @xmath229 and @xmath843 \\rangle \\in   { \\cal g}'$ ] . by hypothesis , @xmath844\\ ] ]",
    "and so also @xmath845 $ ] , by lemma [ ucons ] . consequently ,",
    "applying the rule ( @xmath846 ) , @xmath847 since @xmath848 , and @xmath344 is new for the sequent of the conclusion .",
    "universal quantification_. @xmath849 with @xmath344 a new variable w.r.t . @xmath314 and @xmath309 , and @xmath417 .",
    "so @xmath850 holds directly from @xmath411 .",
    "+ let @xmath851 , if @xmath852 , then @xmath840 , by hypothesis . then @xmath420 because @xmath853 and lemma [ ucons ] .",
    "+ if @xmath821 , @xmath234 and @xmath854\\rangle \\in   { \\cal g}'$ ] . by the hypothesis , since @xmath855 and lemma [ ucons ] , we have @xmath856\\ ] ] now , since @xmath344 is not in @xmath314 nor in @xmath309 , by item _",
    "i ) _ of lemma [ sound1 ] , it is not free in @xmath3 , @xmath80 , @xmath4 , and obviously @xmath344 is neither free in @xmath857",
    ". then we conclude @xmath858 by applying ( @xmath859 ) .",
    "constraint_. in this case @xmath323 is empty and @xmath860 is @xmath1-satisfiable .",
    "trivially @xmath411 implies @xmath861 .",
    "+ now let @xmath851 , the case @xmath852 is easily proved .",
    "if @xmath821 , then @xmath862 .",
    "@xmath863 because @xmath411 and @xmath864 . by the properties of the constraint entailment",
    ", we deduce @xmath865 . then applying the rule ( @xmath866 ) , @xmath867 because @xmath421 . 7 .",
    "_ clause of the program_. since @xmath323 is empty and @xmath417 , we only check the case @xmath851 and @xmath821 . in such case @xmath868 and",
    "there is @xmath869 a variant of a formula of @xmath136 where : * @xmath870 are new variables not occurring in @xmath314 , @xmath309 , and therefore not free in @xmath119 , @xmath3 , @xmath80 and @xmath871 . *",
    "@xmath119 and @xmath210 begin with the same predicate symbol .",
    "* @xmath872 . + by hypothesis , since @xmath421 , @xmath873",
    "_ lemma [ complet1 ] _",
    "+ let @xmath457 $ ] be a non - final state w.r.t .",
    "a set of variables @xmath309 , and let @xmath5 be a constraint such that @xmath458 is @xmath1-satisfiable and @xmath459 . if @xmath448 for all @xmath460 , then we can find a rule transforming @xmath310 in a state @xmath461 $ ] ( @xmath462 ) and a constraint @xmath409 such that :        * if @xmath875 has the form @xmath876 , @xmath877 , @xmath878 or @xmath879 , then we apply respectively the transformation rules _",
    "i ) , ii ) , iii ) _ or _ iv ) _ to @xmath880 . let @xmath330 be the state obtained after the transformation , and let @xmath881 : + \\1 .",
    "@xmath463 and @xmath882 are obvious by the hypothesis and because @xmath883 , @xmath477 and @xmath881",
    "let @xmath884 . if @xmath885 , then @xmath886 trivially since @xmath887 by hypothesis , and @xmath888 .",
    "moreover @xmath889 .",
    "+ if @xmath890 and _ i ) _ , for example , was applied , then @xmath891 , @xmath892 , @xmath423 and @xmath893 or @xmath894 . by hypothesis @xmath895 with a proof of size @xmath199 , therefore by the definition of @xmath9 , since @xmath896 , @xmath897 and @xmath898 have proofs of size less than @xmath199 .",
    "consequently @xmath899 and @xmath900 , so , finally @xmath901 for all @xmath902 and @xmath497 .",
    "the argument for transformations _",
    "ii ) , iii ) _ and _ iv ) _ is similar .",
    "note that , in the case of _ ii ) _ , we must choose @xmath38 ( resp .",
    "@xmath48 ) if the shortest @xmath9-proof of @xmath903 contains a subproof of @xmath904 ( resp .",
    "@xmath48 ) . *",
    "if @xmath4 has the form @xmath905 , we apply then the transformation rule _ vi ) _ and obtain @xmath330 .",
    "assume @xmath881 : + \\1 .",
    "trivial since the choice of @xmath344 assures that @xmath906 ; moreover , @xmath477 .",
    "let @xmath907 , if @xmath908 , then we obtain @xmath909 , being @xmath910 . + if @xmath911 , this is the triple coming from the transformation of @xmath912 , so @xmath913 $ ] , @xmath892 and @xmath891",
    ". by hypothesis @xmath914 has a proof of size @xmath199 , then since @xmath344 does not appear free in @xmath915 , because of the form of the calculus @xmath9 , @xmath916 $ ] has a proof of size less than @xmath199 , and for that reason @xmath917 , and thus we conclude that 2 .",
    "is valid . *",
    "if @xmath4 is a constraint @xmath471 , we apply the transformation _",
    "vii ) _ obtaining @xmath330 .",
    "assume @xmath896 : + \\1 .",
    "@xmath918 is trivial since @xmath919 .",
    "furthermore , @xmath920 by hypothesis , so by the definition of @xmath9 , @xmath921 and therefore @xmath922 .",
    "moreover @xmath479 , then @xmath923 , because @xmath896 and @xmath924 .",
    "now , from @xmath923 and the @xmath1-satisfiability of @xmath925 , we deduce that @xmath926 is also @xmath1-satisfiable .",
    "therefore the transformation step is allowed .",
    "@xmath927 , so @xmath465 for all @xmath928 and @xmath929 . *",
    "if @xmath4 is atomic @xmath200 , by hypothesis @xmath930 has a proof of size @xmath199 , then by reason of the form of @xmath9 , if @xmath931 are new variables not free in @xmath3 , @xmath5 , @xmath80 neither in @xmath119 , then there is a variant of a formula from @xmath136 , @xmath932 , with @xmath119 and @xmath210 beginning with the same predicate symbol , such that @xmath933 has a proof of size less than @xmath199 .",
    "we transform @xmath310 in @xmath330 by means of the rule _",
    "viii ) _ , using @xmath932 .",
    "assume now @xmath896 .",
    "since @xmath417 and @xmath934 , the proof of 1 .",
    "is immediate .",
    "let @xmath466 , if @xmath482 , then @xmath887 by hypothesis and therefore @xmath465 , besides @xmath935 .",
    "+ if @xmath936 , then @xmath937 , @xmath892 and @xmath891 .",
    "as we have noted in @xmath526 , @xmath938 has a proof of size less than @xmath199 ."
  ],
  "abstract_text": [
    "<S> constraint logic programming ( _ clp _ ) and hereditary harrop formulas ( _ hh_)are two well known ways to enhance the expressivity of horn clauses . in this paper </S>",
    "<S> , we present a novel combination of these two approaches . </S>",
    "<S> we show how to enrich the syntax and proof theory of _ hh _ with the help of a given constraint system , in such a way that the key property of _ hh _ as a logic programming language ( namely , the existence of uniform proofs ) is preserved . </S>",
    "<S> we also present a procedure for goal solving , showing its soundness and completeness for computing answer constraints . as a consequence of this result , </S>",
    "<S> we obtain a new strong completeness theorem for _ clp _ that avoids the need to build disjunctions of computed answers , as well as a more abstract formulation of a known completeness theorem for _ hh_. + * keywords : * constraint systems , hereditary harrop formulas , uniform proofs , goal solving . </S>"
  ]
}