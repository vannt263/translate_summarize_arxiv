{
  "article_text": [
    "_ program title : _ reggae ( rescatterig - after - genbod generator of events ) + _ catalogue identifier : _ + _ program summary url : _ http://www.fpv.umb.sk/tomasik/reggae +",
    "_ program obtainable from : _",
    "http://www.fpv.umb.sk/tomasik/reggae + _ ram required to execute with typical data : _ this depends on the number of particles which are generated . for 10 particles like in the attached example it requires about 120  kb .",
    "+ _ number of processors used : _ 1 + _",
    "computer(s ) for which the program has been designed : _ pc pentium 4 , though no particular tuning for this machine was performed .",
    "+ _ operating system(s ) for which the program has been designed : _ originally designed on linux pc with g++ , but it has been compiled and ran successfully on os x and ms windows with microsoft visual c++ 2008 express edition , as well .",
    "+ _ programming language :",
    "_ c++ + _ size of the package : _ 12  kb + _ distribution format : _ zipped archive + _ number of lines in distributed program , including test data etc . : _",
    "1468 + _ number of bytes in distributed program , including test data etc . :",
    "_ 52  kb + _ nature of physical problem : _ the task is to generate momenta of a sample of particles with given masses which obey energy and momentum conservation . generated samples should be evenly distributed in the available lorentz invariant phase space .",
    "+ _ method of solving the problem : _ in general , the algorithm works in two steps .",
    "first , all momenta are generated with the genbod algorithm .",
    "there , particle production is modelled as a sequence of two - body decays of heavy resonances .",
    "after all momenta are generated this way , they are reshuffled .",
    "each particle undergoes a collision with some other partner such that in the pair centre of mass system the new directions of momenta are distributed isotropically .",
    "after each particle collides only a few times , the momenta are distributed evenly across the whole available phase space .",
    "starting with genbod is not essential for the procedure but it improves the performance .",
    "+ _ typical running time : _ this depends on the number of particles and number of events one wants to generate . on a linux pc with 2  ghz processor , generation of 1000 events with 10 particles",
    "each takes about 3  s.",
    "a frequent task encountered in simulations of particle production is to generate a sample of many particles which exactly conserve energy and momentum .",
    "the events generated in the procedure should be uniformly distributed in the lorentz invariant phase space ( lips ) . this is a standard textbook problem in the case of two or three - body emission , but becomes increasingly involved as the number of particles grows .",
    "such situations may also become relevant now with the high multiplicity data from proton - proton as well as pb+pb collisions at the lhc .",
    "algorithms have been developed based on the formulas for integration of the lips which can be used for such a task . among them",
    "we find genbod based on the treatment by sequential decay @xcite .",
    "originally , the motivation for the development of these algorithms was in the need to simulate the lorentz invariant phase space for monte carlo integration of complicated matrix elements .",
    "the problem of simple algorithms like genbod is that for a large number of particles it generates too often configurations which are very unlikely and have tiny weight of their contribution to the phase space integral . if the algorithm is used for event generation , such configurations are accepted with very low probability and this makes the simulation rather inefficient .",
    "improved algorithms are available on the market like rambo @xcite and nuphaz @xcite .",
    "those , however , are mostly aimed for the use in high energy processes with rather large amount of energy in the form of kinetic energy , i.e.  the masses small in comparison to the energy .",
    "the effectiveness drops fast if the amount of energy contained in the masses grows considerably .",
    "this is a serious drawback which makes these algorithms unusable for the simulation of multiparticle production in nuclear collisions where masses are of the order of , or larger than , the momenta .",
    "also , high multiplicity proton - proton data are beyond reasonable applicability of these tools .    when working in this regime a different kind of approach is sometimes used .",
    "one rather starts with generating the particles from thermal distribution .",
    "the momentum of the last particle is then calculated from momentum conservation and the energies of all particles are rescaled so as to match the total energy @xcite .",
    "another possibility is to calculate the energies and momenta of the last pair of particles @xcite .",
    "these algorithms are not guaranteed to always work and one may have to repeat them in order to generate a usable configuration . moreover",
    ", the particles with the calculated momenta may lie far out off the region where other thermal ones are concentrated .",
    "the chance of the appearance of such problems grows with the number of particles .",
    "recently , a new generator was reported in @xcite but no details are available to us about its construction and performance .    in our approach",
    "we first generate @xmath0-body events which do conserve energy and momentum but are not guaranteed to fill the lorentz invariant phase space uniformly .",
    "then , the generated momenta are reshuffled in ( virtual ) two - body collisions .",
    "a few collisions per particle lead the system to the most likely configuration . in this way we solve the problem of generating unlikely configurations :",
    "our algorithm samples the space of all possible configurations according to their probability of appearance .",
    "this leads to uniform distribution of events within the available lips .",
    "details of the algorithm are explained in section  [ s : alg ] .",
    "this is followed in section  [ s : entropy ] by a demonstration of the approach of events generated by reggae to equilibrium after increasing the number of collisions . to this end",
    "we estimate the information entropy of the generated configuration . in section",
    "[ s : comp ] we compare the results of reggae with rambo , nuphaz , and the original genbod algorithm .",
    "a short manual for the c++ routines which accompany the paper is given in section  [ s : man ] .",
    "we must first generate hadron momenta so that they will conserve the fixed total momentum and energy . any procedure fulfilling this simple requirement can be used , because the final configuration of momenta is formed later in the rescattering part . a good choice of the initial generator",
    "can , however , make the algorithm more efficient , as less improvement is required from the subsequent rescattering part .",
    "our procedure starts with genbod @xcite .",
    "we want to distribute energy @xmath1 and momentum @xmath2 among @xmath0 particles with masses @xmath3 .",
    "we can boost into the frame where @xmath4 vanishes and the energy assumes the value @xmath5 . after the generation is complete we boost back to the original frame .",
    "the trick is to formally treat the multiparticle generation as a sequence of two - body resonance decays .",
    "first , an auxilliary resonance with mass @xmath5 decays into a particle with mass @xmath6 and a resonance with mass @xmath7 .",
    "then @xmath7 goes into @xmath8 and @xmath9 etc .",
    "directions of the momenta of decay products are random up to momentum conservation .",
    "the essence of the procedure is in determining the masses of auxiliary resonances .",
    "they are chosen randomly but they must fulfill the inequalities @xmath10 where @xmath11 and @xmath12 . the condition is fulfilled if we generate @xmath13 s via @xmath14 where @xmath15 is random variable from the interval @xmath16 .",
    "condition ( [ e : mineq ] ) is satisfied if we choose @xmath15 s so that @xmath17 details of the procedure can be found in @xcite .    as we explained in the introduction ,",
    "momentum configurations generated by genbod often come out with very small weight . in practice",
    ", this means that such an event is extremely unlikely to appear in nature .",
    "therefore , in the next step we reshuffle the momenta in order to achieve a more likely configuration .    in the routine ,",
    "the momenta of all particles are stored in an array .",
    "we randomly choose a distance @xmath18 between positions within the array .",
    "then each particle collides with a partner that is stored by @xmath18 positions further down the array .",
    "particles in the last @xmath18 positions collide with partners in the beginning of the array . in every",
    "turn each particle collides twice .",
    "the collisions are simple @xmath19-wave scatterings .",
    "we always lorentz boost into the center of mass system of the colliding pair , generate new directions of the momenta with isotropic distribution , and then boost back to the original frame . for a small number of particles 6 collisions per particle",
    "is enough to reach a distribution with large weight .",
    "this number becomes larger for large numbers of particles .",
    "for very large number of rescatterings our procedure leads to uniform filling of the available lorentz invariant phase space .",
    "the first step to prove this is to construct the distribution of outgoing particles in two - particle collisions .",
    "the distribution is defined as the probability @xmath20 of finding the outgoing momenta @xmath21 in a given elementary volume @xmath22 of the two - particle momentum space , given the incoming momenta @xmath23 . if the distribution is isotropic in the center of mass system , we have in a laboratory system @xmath24 where @xmath25 and @xmath26 are the total four - momenta of incoming and outgoing particles , respectively , @xmath27 are the energies of outgoing particles , and @xmath28 and @xmath29 is the sum and the difference of the masses of particles squared , @xmath30 and @xmath31 .",
    "the crucial observation is that the distribution in ( [ eq : p ] ) normalizes not only in outgoing momenta but also in incoming ones , i.e.  it satisfies @xmath32 where @xmath33 are the energies of incoming particles .",
    "this is seen immediately after replacing @xmath34 in the expression in front of @xmath35-function by @xmath36 , since ( [ eq : norm ] ) then reduces to the normalization in outgoing momenta with @xmath37 renamed to @xmath23 and _ vice versa_. thanks to ( [ eq : norm ] ) , collisions with the distribution of outgoing particles ( [ eq : p ] ) produce an equilibrium distribution of the system of @xmath0 particles that is uniform in lips @xmath38 where @xmath39 is the total four - momentum of the system , @xmath40 is the value assigned to @xmath41 and @xmath42 is a normalization constant depending only on @xmath40 . indeed ,",
    "if we view @xmath20 for an arbitrary pair of particles as a two - particle block of a block - diagonal @xmath0-particle transfer matrix , it follows from ( [ eq : norm ] ) that ( [ eq : p1 ] ) is an eigenvector of the transfer matrix corresponding to the eigenvalue 1 .",
    "then , perron - frobenius theorem guarantees that it is the _ only _ eigenvector with that property .",
    "( the last claim holds if the particle momenta can change from any values to any other values consistent with the conservation of energy - momentum in a finite number of collisions , which seems plausible enough . ) the state of the system described by the eigenvector of the transfer matrix with the eigenvalue 1 is obviously an equilibrium state , since it does not change in the evolution of the system .",
    "another consequence of the perron - frobenius theorem is that the system evolves towards it from any nonequilibrium initial state .",
    "while this proves that our procedure will eventually lead to the uniform filling of the available lips , we also want to demonstrate how _ fast _ this happens , _",
    "i.e. _ , how fast the system approaches the most likely ( equilibrium ) configurations when starting from unlikely ones generated by genbod . in algorithms based on monte carlo integration of the phase space usually a weight",
    "is determined for each generated configuration .",
    "this weight could be used as a measure of likelihood of a given configuration , however , it depends on integration variables and it is not clear that we can define it uniquely in our case .",
    "we thus use a different approach , with information entropy as a measure of likelihood , defined not for a single configuration , but for the whole set of @xmath43 configurations ( events ) , each with @xmath0 particles .",
    "we assume that the momenta of all @xmath44 particles are distributed according to the same underlying single - particle probability density distribution @xmath45 .",
    "the _ information entropy _ is defined as @xmath46 where the integration runs through all accessible momentum space @xmath47 .",
    "we want to show that the rescattering part of the algorithm changes this entropy in such a way that it will grow from some value corresponding to unlikely configurations to higher values for more likely configurations and eventually it will saturate at equilibrium .",
    "as can be seen , we formulate this calculation for a distribution on a three - dimensional momentum space .",
    "the distribution @xmath45 is generally unknown .",
    "we estimate it from the sample of momenta from the set of @xmath43 configurations : first the available three - momentum space is divided into @xmath48 elementary cells of equal volume @xmath49 , then the probability density @xmath45 in a cell @xmath49 is estimated by @xmath50 which is given as @xmath51 where @xmath52 is the number of particles which fall in the cell @xmath49 .",
    "then the entropy is estimated as @xmath53 where @xmath48 is large and @xmath54 small .    at equilibrium",
    "the information entropy can be calculated theoretically in the limit of large @xmath0 , since @xmath45 is known in this case .",
    "it is related to the single - particle energy distribution @xmath55 ( called here the lips - boltzmann distribution ) , which is derived from the uniform distribution in lips using the darwin - fowler method and is given by @xcite @xmath56 where @xmath57 is the total energy of a single particle , @xmath58 is the lips - temperature , @xmath59 is the mass of the particle and @xmath60 the boltzmann s constant .",
    "@xmath61 is a normalization constant , and @xmath62 is the modified bessel function . note that @xmath55 differs from the canonical boltzmann distribution in two important aspects : the canonical distribution has an extra @xmath1 in front of the exponential and the canonical temperature is different from the lips - temperature @xmath58 .",
    "the differences come essentially from the fact that unlike the canonical relativistic boltzmann gas which thermalizes via collisions both in configuration and momentum space , our system thermalizes via collisions which take place only in the momentum space .",
    "the lips - temperature @xmath58 is implicitly defined by the equation for the mean value of the single - particle energy @xmath63 then , the equilibrium probability density @xmath45 is found from the lips - boltzmann distribution @xmath64    the equilibrium information entropy is then found by substituting @xmath45 into the definition of @xmath65 in eq .",
    "( [ e : sdef ] ) and integrating . for configurations of @xmath66 pions ( @xmath67 mev ) of the total energy @xmath68 gev",
    "we get the lips - temperature @xmath69 gev and the equilibrium information entropy prediction @xmath70 .",
    "our expectation is that the entropy estimated from eq .",
    "( [ e : s_estimate ] ) will grow with the number of collisions @xmath71 and for some @xmath71 it will saturate at the equilibrium value which should coincide with the theoretical prediction .",
    "we show the result of this calculation in figure  [ f : entevol ] .     for @xmath72 reggae - generated configurations of @xmath66 pions ( @xmath67 mev ) of the total energy @xmath68 gev .",
    "the red line shows the theoretical equilibrium value @xmath70 , the blue curve shows the estimates of eq .",
    "[ e : s_estimate ] based on reggae configurations .",
    "the statistical errors of the estimates @xmath73 .",
    "[ f : entevol],scaledwidth=100.0% ]    the entropy saturates at the predicted equilibrium value after 12 colisions in this particular case . for a smaller @xmath0 , we found that the entropy saturates after a smaller number of collisions .",
    "our findings are in line with studies of kinetic theory .",
    "for example , in @xcite it has been shown that a few collisions are enough to drive the system towards equilibrium distribution .",
    "this indicates that our algorithm can generate relevant momentum configurations not only _ in principle _ , but it can do so in a reasonably small number of steps .",
    "further support that this is indeed so will come from the next section where we apply reggae to monte carlo integration .",
    "note here also , that the rescattering algorithm would arrange the momenta correctly even if we did not start with genbod .",
    "we have checked this by starting with 15 equal momenta all in the same direction and another 15 ones of equal size and opposite direction .",
    "rescattering succeeded in arranging the momenta but needed more steps to reach saturation .",
    "this shows that starting with genbod is not essential , but improves the effectivness .",
    "calculations using genbod were indeed faster .",
    "one might argue that the information entropy saturation at the equilibrium value demonstrated in the previous section only shows that the _ single - particle _ momentum distribution has lips - thermalized while it is not clear that _ many - particle _ momentum distributions have done the same . to provide further support for a",
    "fast , few - step lips - thermalization , we applied our algorithm to monte carlo integration over the phase space , a procedure sensitive to many - particle distributions . in this section",
    "we also compare reggae with other routines available on the market .    generally , the infinitesimal element of the lips for @xmath0 particles is @xmath74 the general task is to calculate integral over available phase space @xmath75 @xmath76 where @xmath77 is some function of the momenta .",
    "algorithms for monte carlo integration generate configurations of momenta , calculate their weights @xmath78 and then approximate the integral with ( sample mean method ) @xmath79 where @xmath80 is the ratio of the weight of the configuration to the maximum weight calculated or found empirically in the large set of configurations and the sum runs over @xmath48 different momentum configurations @xmath81 .",
    "if the configurations correspond to real events , they have @xmath82 and @xmath83 we have tested the sum of eq .",
    "( [ e : iapp ] ) calculated with events generated by our algorithm against calculations by rambo @xcite , nuphaz @xcite , and genbod @xcite . in case of genbod",
    "we accepted the generated events with the probability determined by the ratio of the event weight and the maximum theoretical event weight .",
    "this we call weighted genbod ( wgenbod ) .",
    "it should be distinguished from the unweighted genbod ( ugenbod ) where we ignore the weights , which is incorrect and we show it here for the sake of demonstration .",
    "we have performed the tests on a variety of functions . here",
    "we present just one example .",
    "we integrated a function of five four - momenta @xmath84 with @xmath85 .",
    "the phase space was given by the total four - momentum @xmath86 which was distributed among particles with the mass of @xmath87  gev .    in table",
    "[ t : it3 ]    .mean values of @xmath88 from eq .",
    "( [ e : f5 ] ) calculated with five different generators . number of momentum configurations ( events ) used in the calculations is @xmath48 .",
    "each event consists of @xmath89 particles with @xmath87  gev .",
    "the last row shows the time for computation with @xmath90 configurations .",
    "[ t : it3 ] [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]     this is not surprising : we developped reggae for the use in simulations of multiparticle production in nuclear and high multiplicity hadronic collisions while the other methods were derived for applications in high energy physics where most of the available energy often goes into momenta .    for large @xmath0 , reggae can be the fastest even in the case when @xmath91 of the available energy goes into momenta and just @xmath92 is in the particle masses . the time to generate @xmath93 configurations for @xmath94 particles with the mass 0.1  gev and",
    "the total four - momentum @xmath95 is 8 min for reggae ( @xmath96 ) and 23 min for nuphaz .",
    "the package comes with the following files :    ` makefile ` for linux - like systems with g++ compiler this is the simple makefile to compile the example program .    `",
    "example.cpp ` is the file with the main routine used to illustrate the action of reggae .",
    "you do not need this file if you want to embed reggae in your simulation .    `",
    "example.dat ` is the output file of the code if run in the form as it is distributed .    `",
    "reggae.cpp ` is the file where main algorithms are implemented .    `",
    "reggae.hpp ` the header file which must be included in the application that is supposed to use reggae .    `",
    "specrel.cpp ` supporting file with definitions of classes for four - vectors , lorentz boosts etc .    `",
    "specrel.hpp ` header file for ` specrel.cpp ` .    to use the method ,",
    "the user must define the following variables :    ` int n ` the number of particles    ` double * amass ` which must be allocated to include ` n ` values for the masses of the particles . before calling the routine the array",
    "must be filled with the masses .",
    "` vector4 * avec ` which must be allocated to hold ` n ` four - vectors .",
    "this array will hold the particle four - momenta .    `",
    "vector4 p ` the total four - momentum . before calling the routines it must posses a value .",
    "` long int seed ` is the initial seed for the random number generator .",
    "it may be initialised always with the same value or with the help of the machine time .",
    "the four - vector class ` vector4 ` is defined in ` specrel.hpp ` .",
    "it has been designed so that its use is intuitive . to get or set the component of the four - vector use [ * ] ( e.g. avec[0 ] , numbering runs from 0 to 3 ) .",
    "minkowski metric ( + , ,, ) is applied so that ` a*b ` gives the proper four - vector product .    to generate a sample of momenta in reggae , first the genbod algorithm must be called by    ....",
    "mconserv(p , n , amass , avec,&seed ) ; ....    where the variables have been explained above . now the momenta are stored in ` avec ` .",
    "the second step is to call    ....",
    "collision(n , avec,&seed ) ; ....    this step reshuffles momenta and returns them also in the array ` avec ` .",
    "this array of momenta is the result of the generator .",
    "the procedure is illustrated in the main routine distributed with the package .    by default , ` collisions ` is set to run eight scatterings per particle .",
    "it is possible to decrease this number in order to run faster or increase it in order to have more confidence that the generated configurations are in the regime of saturated entropy .",
    "this is done by setting the variable ` int rg_opak ` to the value equal to half of the number of collisions .",
    "reggae gives the possibility of robust and effective simulation of events with few as well as many particles with strict conservation of momentum and energy .",
    "this is very much needed feature in many models used for the simulation of multiparticle production .",
    "we thank evgeni kolomeitsev for stimulating discussions .",
    "this work was partially supported by the agency of the slovak ministry of education for the structural funds of the eu , under project itms:26220120007 .",
    "bt gratefully acknowledges financial support via grants no .",
    "msm  6840770039 , and lc  07048 ( czech republic ) .",
    "mm and bt thank the cern ph - th department where a part of this work was completed for the kind hospitality ."
  ],
  "abstract_text": [
    "<S> we propose a novel algorithm , called reggae , for the generation of momenta of a given sample of particle masses , evenly distributed in lorentz invariant phase space and obeying energy and momentum conservation . in comparison to other existing algorithms , reggae is designed for the use in multiparticle production in hadronic and nuclear collisions where many hadrons are produced and a large part of the available energy is stored in the form of their masses . </S>",
    "<S> the algorithm uses a loop simulating multiple collisions which lead to production of configurations with reasonably large weights .    multiparticle production , monte carlo generator , energy and momentum conservation , microcanonical ensemble 25.75.-q , 25.75.dw , 25.75.gz , 25.75.ld , 25.75.nq </S>"
  ]
}