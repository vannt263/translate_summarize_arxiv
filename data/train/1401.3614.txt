{
  "article_text": [
    "the reported work took place in the framework of our participation to ibbt  @xcite project `` end - to - end quality of experience ''  @xcite and ist - nmp2 - 016880 project arflex ( `` adaptive robots for flexible manufacturing systems '' )  @xcite .",
    "in particular it is our pleasure to acknowledge the ever valuable suggestions of prof .",
    "lucio businaro of eicas .",
    "b.  bougard , g.  lenoir , and w.  eberle . a new approach to dynamically trade off performance and energy consumption in wireless communication systems . in _ proc . of ieee",
    "sips_. ieee computer society , august 2003 .",
    "v.  de  florio , g.  deconinck , and r.  lauwereins .",
    "software tool combining fault masking with user - defined recovery strategies .",
    ", 145(6):203211 , december 1998 .",
    "special issue on dependable computing systems .",
    "iee in association with the british computer society .",
    "v.  de  florio , j.  van vaerenbergh , and c.  blondia .",
    "adaptive feedback - loop control system for inter - reality management . in",
    "_ proceedings of the 2007 ieee three - rivers workshop on soft computing in industrial applications _ , passau , germany , august 2007 .",
    "g.  kiczales , j.  lamping , a.  mendhekar , c.  maeda , c.  videira  lopes , j .-",
    "m . loingtier , and j.  irwin .",
    "aspect - oriented programming . in _ proc . of the european conference on object - oriented programming ( ecoop ) ,",
    "lecture notes in computer science _ ,",
    "volume 1241 , finland , june 1997 .",
    "springer , berlin .",
    "h.  sun , v.  de  florio , g.  ning , and c.  blondia . global adaptation framework for quality of experience of mobile services . in _ proc . of the 2007 ieee three - rivers workshop on soft computing in industrial applications _ , passau , germany , august 2007 ."
  ],
  "abstract_text": [
    "<S> we propose a simple and effective tool for the expression of tasks such as cross - layer optimization strategies or sensors - related applications . </S>",
    "<S> the approach is based on what we refer to as `` reflective and refractive variables '' . </S>",
    "<S> both types of variables are associated with external entities , e.g. sensors or actuators . a reflective </S>",
    "<S> variable is a volatile variable , that is , a variable that might be concurrently modified by multiple threads . </S>",
    "<S> a library of threads is made available , each of which interfaces a set of sensors and continuously update the value of a corresponding set of sensors . </S>",
    "<S> one such thread is `` cpu '' , which exports the current level of usage of the local cpu as an integer between 0 and 100 . </S>",
    "<S> this integer is reflected into the integer reflective variable cpu . </S>",
    "<S> a refractive variable is a reflective variable that can be modified . </S>",
    "<S> each modification is caught and interpreted as a request to change the value of an actuator . </S>",
    "<S> for instance , setting variable `` tcp_sendrate '' would request a cross - layer adjustment to the thread interfacing the local tcp layer entity . </S>",
    "<S> this allows express in an easy way complex operations in the application layer of any programming language , e.g. plain old c. we describe our translator and the work we are carrying out within pats to build simple and powerful libraries of scripts based on reflective and refractive variables , including robotics applications and rfid tags processing .    </S>",
    "<S> as well known , a number of problems require solutions that involve the whole of the system layers , from the bare machine up to the application . </S>",
    "<S> problems of this type include e.g. fault - tolerance , cross - layer signaling , or adaptability  @xcite . </S>",
    "<S> we can observe that wherever there is a need for flexibility , performance , quality trade - offs , or security and co - operation , there exists a need to monitor and adjust parameters across the whole of the system layers . </S>",
    "<S> much more than this , there exist a need to do so in an as much as possible simple way , from both an architectural and the user points of view . </S>",
    "<S> this means that the architectural strategy must be simple and that the way to express the solutions must be straightforward . to date , several clever architectural strategies to solve those problems exist . </S>",
    "<S> just to name a few , the energy - performance manager of imec  @xcite or the network - status of mobiman  @xcite provide interesting architectures to reach effective cross - layer optimization . in both the mentioned approaches , though , no solution is envisaged to the problem of the optimal expression of cross - layered adaptations . </S>",
    "<S> for instance , both the above mentioned approaches require ad hoc versions of the protocol layers , versions that explicitly make use of the network status . each layer , to be compliant to these models , must endorse logics to take actions making use of the information kept in a network status database . </S>",
    "<S> this requires the design of ad hoc software . in such software the two concerns </S>",
    "<S>  the functional one , i.e. the layer function , and the non - functional one , for cross layer adaptation  are mixed and intertwined . </S>",
    "<S> a possible solution currently being investigated by other researchers is aspect oriented computing  @xcite , which requires the use of custom programming languages and complex tools . </S>",
    "<S> we propose a simpler , language independent solution that we call reflective and refractive variables ( in short , rr vars ) . in the following we describe our approach in sect .  2 and </S>",
    "<S> we show how we implemented it in sect .  </S>",
    "<S> 3 . </S>",
    "<S> an analysis of current and possible uses of rr vars in fields such as robotics , sensor networks , and rfid applications , is presented in sect .  </S>",
    "<S> 4 . </S>",
    "<S> section 5 concludes this work with a description of our future plans involving rr vars .    </S>",
    "<S> the idea behind rr vars is to use memory access as an abstraction to perform concealed tasks . </S>",
    "<S> rr vars are volatile variables whose identifier links them with an external device , such as a sensor , or an rfid , or an actuator . in reflective variables , </S>",
    "<S> memory cells get asynchronously updated by service threads that interface those external devices . </S>",
    "<S> we use the well - known concept of reflection because those variables `` reflect '' the values measured by those devices . in refractive variables , on the contrary , write requests trigger a request to update an external parameter , such as the data rate of the local tcp protocol entity or the amount of redundancy to be used in transmissions . </S>",
    "<S> we use to say that write accesses `` refract '' ( that is , get redirected  @xcite ) onto corresponding external devices .        </S>",
    "<S> the rr var model does not require any special language : figure 1 is an example in the c language . </S>",
    "<S> the portrayed program declares two variables : `` cpu '' , a reflective integer , which reports the current level of usage of the local cpu as an integer number between 0 and 100 , and `` tcptxrate '' , a reflective _ and refractive _ integer , which reports _ and sets _ the send rate parameter of the tcp layer . </S>",
    "<S> the code periodically queries the cpu usage and , when that reaches a value greater than 90% , it requests to change the tcp send rate . </S>",
    "<S> note that the only non standard c construct is attribute `` ref_t '' , which specifies that a corresponding declaration is reflective or refractive or both . through a translation process , discussed in sect .  3 , </S>",
    "<S> this code is instrumented so as to include the logics required to interface the cpu and the tcp external devices . </S>",
    "<S> figure 3 shows this simple code in action on our development platform  a pentium - m laptop running windows xp and the cygwin tools .        </S>",
    "<S> we observe that through the rr var model the design complexity is partitioned into two well defined and separated components : the code to interface external devices is specified `` elsewhere '' ( sect .  </S>",
    "<S> 3 describes where and how ) while the functional code is specified in a familiar way , in this case as a c code reading and writing integer variables .    </S>",
    "<S> the result is a structured model to express tasks such as cross - layered optimization , adaptive or fault - tolerant computing in an elegant , non intrusive , and cost - effective way . </S>",
    "<S> such model is characterized by strong separation of design concerns , for the functional strategies are not to be specified aside with the layer functions ; only instrumentation is required , and this can be done once and for all . </S>",
    "<S> this prevents spaghetti - like coding for both the functional and the non - functional aspects , and translates in enhanced maintainability and enhanced efficiency .    </S>",
    "<S> the rr var model provides the designer also with another attribute : a variable , be it an rr var or a `` common '' one , can be tagged as being `` _ _ redundant _ _ '' . </S>",
    "<S> redundant variables are variables whose contents get replicated several times so as to protect them from memory faults . </S>",
    "<S> writing to a redundant variable means writing to a number of replicas , either located strategically on the same processing node or on remote nodes  when available and the extra overhead be allowed . </S>",
    "<S> reading from a redundant variable actually translates in reading from each of its cells and performing majority voting . </S>",
    "<S> the result of this process is monitored by a special device , that we call redundance . </S>",
    "<S> redundance measures the amount of votes that differ from the majority vote , and uses this as a measure of the disturbance in the surrounding environment . </S>",
    "<S> under normal situation , redundance triplicates the memory cells of redundant variables . </S>",
    "<S> this corresponds to tolerating up to one memory fault in the cells associated to a redundant variable . under more critical situations , </S>",
    "<S> the amount of redundancy should change . </S>",
    "<S> this is what actually happens : the component that manages redundant variables declares the integer reflective variable `` ref_t int redundance '' . </S>",
    "<S> the latter is set asynchronously by the redundance device , which adjusts the corresponding memory cells with a number representing the ideal degree of redundancy with respect to the current degree of disturbances .    </S>",
    "<S> the rr var model does not support only cross - layer optimization  in general , it provides an application - layer construct to manage feedback loops .        </S>",
    "<S> feedback loops ( see fig .  3)a well known concept from system theory are ideal forms to shape our systems so as to be adaptive - and - dependable  @xcite . </S>",
    "<S> such property is an important pre - requisite for the welfare of our computer - dominated societies and economies : in the cited paper van roy explains their relevance to future software design . </S>",
    "<S> rr vars provide a straightforward syntactical structure and software architecture for the expression of feedback loops . </S>",
    "<S> we use this structure , e.g. , to implement redundant variables . </S>",
    "<S> the main advantage in this case is that , instead of taking a design decision once and for all , we let a system parameter change as needed , zeroing in on the optimum . </S>",
    "<S> the use of rr vars simplifies the design of our solution , which also enhances maintainability . </S>",
    "<S> but probably the most important consequence is that our solution does not assume a fixed , immutable fault model , but lets it change with the actual faults being experienced .        </S>",
    "<S> figure 4 shows how simple it is using a redundant variable : no syntactic differences can be noticed . </S>",
    "<S> the required logic is `` hidden '' in the translation process . </S>",
    "<S> the core of the rr vars architecture is a parser that translates the input source code into two source files , one with an augmented version of the original code and one server - side to monitor and drive the external devices . to explain this process we consider fig .  5 , an excerpt from the translation of the code in fig .  </S>",
    "<S> 4 . </S>",
    "<S> let us review the resulting code in more detail ( please note that item x in the following list refer to lines tagged as `` // _ x _ '' in the code ) :    1 .   </S>",
    "<S> first the translator removes the occurrences of attributes `` ref_t '' and `` redundant '' . </S>",
    "<S> 2 .   </S>",
    "<S> then it performs a few calls to function `` aopen '' . </S>",
    "<S> this is to open the associative arrays `` reflex '' and `` rtype '' . as well known , an associative array generalizes the concept of array so as to allow addressing items by non - integer indexes . </S>",
    "<S> the arguments to `` aopen '' are functions similar to `` strcmp '' , from the c standard library , which are used to compare index objects . </S>",
    "<S> the idea is that these data structures create links between the name of variables and some useful information ( see below ) . </S>",
    "<S> 3 .   there follow a number of `` awrites '' , i.e. , we create associations between variables identifiers and two numbers : the corresponding variables address and an internal code representing its type and attributes . </S>",
    "<S> 4 .   </S>",
    "<S> then `` server '' , the thread responsible to interface the external devices , is spawned . </S>",
    "<S> 5 .   </S>",
    "<S> besides a write access into refractive variable tcptxrate , the translator places a call to function `` calltcptxrate '' . in general , after a call to refractive variable _ v _ , the call `` call_v_(&_v _ ) '' is produced . </S>",
    "<S> 6 .   similarly , a write access to redundant variable _ </S>",
    "<S> w _ , of type _ </S>",
    "<S> t _ , </S>",
    "<S> is followed by a call to `` redundantassign__t_(&_w _ ) '' . </S>",
    "<S> 7 .   finally , reading from redundant variable _ </S>",
    "<S> w _ , of type _ </S>",
    "<S> t _ , is translated into a call to function `` redundantread__t_(&_w _ ) '' .        </S>",
    "<S> it is the responsibility of the designer to make sure that proper code for functions `` call_v_(&_v _ ) '' is produced . </S>",
    "<S> functions `` redundantassign__t_(&_w _ ) '' and `` redundantread__t_(&w ) '' are automatically generated through a template - like approach  the former performs a redundant write , the latter a redundant read plus majority voting . for voting , an approach similar to that in  @xcite </S>",
    "<S> is followed . </S>",
    "<S> associative arrays are managed through class assoc  @xcite .    </S>",
    "<S> as already mentioned , the `` server '' thread is the code responsible to monitor and interface the external devices . </S>",
    "<S> its algorithm is quite simple ( see fig .  </S>",
    "<S> 6 ) : the code continuously waits for a sensor update ( lines tagged with `` // 1 '' ) </S>",
    "<S> , then retrieves the address and type of the corresponding reflective variable ( in `` // 2 '' ) and finally updates that variable ( `` // 3 '' ) .        the complexity to interface external devices </S>",
    "<S> is charged to function `` getvalue '' , an excerpt of which is shown in fig .  </S>",
    "<S> 7 . </S>",
    "<S> the core of `` getvalue '' is function `` cpu '' , which returns the amount of cpu currently being used .        </S>",
    "<S> we are in the process of making use of rr vars in several real - life applications  we plan to report on these use cases in future papers . in the meanwhile we report herein on possible contexts where rr vars could provide effective and low - cost solutions .    </S>",
    "<S> as cleverly explained e.g. by gates in  @xcite , a well known challenge in robotics is _ concurrency _ , defined in the cited paper as `` how to simultaneously handle all the data coming in from multiple sensors and send the appropriate commands to the robot s motors '' . </S>",
    "<S> the conventional approach , i.e. , making use of a long loop that first reads all the data from the sensors , then processes the input and finally controls the robot is not adequate enough . because of this , the robot control could be using stale values , which could bring to disastrous consequences . as gates mentions in the cited paper </S>",
    "<S> , this is a scenario that applies not only to robotics but also to all those fields such as distributed and parallel computing where data and control often need to be effectively orchestrated under strict real - time constraints . `` to fully exploit the power of processors working in parallel , the new software must deal with the problem of concurrency '' , gate says . </S>",
    "<S> we believe an approach like rr vars can be an effective syntactic structure for that : a control loop using reflective variables , for instance , would not need to specify a reading order for the input variables , which are updated asynchronously , as new values need to replace old ones .    </S>",
    "<S> we are currently extending our translator so as to allow writing programs such as the one in fig .  </S>",
    "<S> 8 .        at first sight </S>",
    "<S> the program may sound meaningless , as it only declares a function and an rr var , `` rfid '' , and does not seem to perform any useful action . `` behind the lines''a nice feature offered by translators  </S>",
    "<S> what happens is that surrounding rfid tags reflect their content onto reflective variable `` rfid '' . </S>",
    "<S> data stored into that variable is compared with the initialization value ( in this case , an isbn number ) . in case of a match , function `` beep '' is called .    </S>",
    "<S> now imagine running this code onto your pda while walking through the lanes of a large library such as the vatican library in search for a `` lost '' or misplaced book . </S>",
    "<S> when in reach of the searched item , the pda starts beeping . or imagine that , thanks to international regulations , all `` companies '' building antipersonnel mines be obliged by law to embed rfid tags into their `` products '' . when activated , these tags and a program as simple as the one in fig .  </S>",
    "<S> 8 could easily prevent dreadful events that continuously devastate the lives of too many a human being .    </S>",
    "<S> [ s : end ] we introduced a translation system that allows making use of reflection in a standard programming language such as c. the same translator supports `` refraction '' , that is the control of external devices through simple memory write accesses . </S>",
    "<S> these two features are used to realize redundant data structures . </S>",
    "<S> as well known , redundancy is a key property in fault - tolerance . </S>",
    "<S> the shannon teorem teaches us that through any unreliable channel it is possible to send data reliably by using a proper degree of redundancy . </S>",
    "<S> this famous result can be read out in a different way : for each degree of unreliability , there is a minimum level of redundancy that can be used to tolerate any fault . </S>",
    "<S> our approach uses rr vars to attune the degree of redundancy required to ensure data integrity to the actual faults being experienced by the system . </S>",
    "<S> this provides an example of adaptive fault - tolerant software .    </S>",
    "<S> rr vars can be used to express problems in cross - layer optimization , but also in contexts where concurrency calls for expressive software structures , e.g. robotics . </S>",
    "<S> localization problems could also be solved through a very simple scheme . </S>",
    "<S> other fields where we are exercizing our tool include personalized healthcare  @xcite and global adaptation frameworks to enhance the quality of experience of mobile services  @xcite . within pats </S>",
    "<S> we are now further improving our model and tools and designing a few simple and powerful libraries of scripts based on reflective and refractive variables . </S>"
  ]
}