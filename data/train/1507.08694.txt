{
  "article_text": [
    "he tapjacking attack basically tricks the user into tapping on an object in the background layer by clever positioning of a foreground layer that is not tappable .",
    "hence , any user touches will be applied onto the background layer which is not visible to the user .",
    "it is essentially a delivery mechanism and the payload can be customised by the attacker .",
    "the exploit is payload and aspect ratio specific , therefore the exploit code will need to be modified depending on the payload desired by the attacker as well as the target device s aspect ratio .",
    "the attack is also limited by the screen real estate of the device , i will be elaborating more on that in the section on developing the application .",
    "the first step in developing the exploit will be to choose a payload .",
    "for this walkthrough , i will be using the application installer payload .",
    "we will need to note down the location and number of taps a user would make in order to install an application . in the case of google play ,",
    "the steps are as follows .    1 .",
    "open the app detail page of the target app 2 .",
    "tap install   +   +   + 3 .",
    "tap accept   +   +   +     +    2      once the desired payload and steps has been identified , we can move on to developing the application .",
    "we would need to create a toast activity and have the image overlay the buttons which need to be pressed .",
    "toasts are normally used to display short text notifications and any taps will be filtered down to the background layer .",
    "positioning of the toast has to be done by trial and error .",
    "we will want to use density independent pixels ( dp ) when specifying the position so that the exploit code will work on devices with different resolutions but same aspect ratios .",
    "+   + the images have to be placed such that no image overlaps a tappable area of any previous screen . e.g. the image for the install button",
    "has been shifted to the left slightly so it does not overlap the `` learn more '' link in the permissions page .",
    "this minimises the probability of the exploit failing .",
    "thus the attack in practical is limited to 2 to 3 clicks at most due to limited screen real estate .",
    "furthermore , the attack will also be unlikely to work if the size of the button is too small as it will be difficult as the victim might not be able to tap the exact spot .",
    "the next step would involve setting the toast to repeat on a loop so that is always displayed on the screen and set the background of the toast to white so as to obscure the target application .",
    "+   +    +   + at this point , we might want to include baits promising the user an incentive if they tap on the image repeatedly .",
    "we are now done with the development of the exploit and it can be packaged and installed on the target device via an appropriate method .",
    "as mentioned in the introduction section , the tapjacking attack is a delivery mechanism , hence its impact would depend on the payload .      assuming that the attacker chose to use the installer payload",
    ", he would be able to perform a privilege escalation through the stealthy installation of a second app which requires multiple permissions that the user did not agree to .",
    "the exploit app itself does not require any permissions .",
    "+   +    +   + the second app will most likely request the following core permissions .    1 .",
    "receive_boot_completed - allows the attacker to start a service in the background whenever the phone is restarted .",
    "thus the user does not even need to run the application .",
    "2 .   internet - allows upload of data on the phone to the attacker s server 3 .",
    "access_network_state - the attacker might want to upload data only when wifi is active so as not to use up too much quota and raise suspicions .",
    "depending on the attacker s motive , he can make use of any of the following permissions ( access_fine_location , camera , record_audio , read_calendar , read_call_log , read_contacts , read_sms , read_external_storage ... ) to compromise the privacy of the target user .",
    "there are a few tactics an attacker can use to conceal the attack from the user .",
    "one of the methods involves removing the app icon from the launcher and can be achieved by replacing `` android.intent.category.launcher '' in the manifest file with `` android.intent.category.default '' .",
    "therefore , the user will not be able to locate the app when he swipes through the list of installed apps on the launcher .",
    "the second method is to use a generic name such as `` android update service '' or `` bluetooth connection helper '' .",
    "on encountering such an application , a user will likely assume that the application is part of the android operating system and will ignore the application .",
    "apart from the installer payload , which is triggered by opening a `` market:// '' url in a webview , other url based payloads include a `` http(s):// '' and a `` tel:// '' payload . the http payload will allow an attacker to open any url inside a webview .",
    "the webpage could contain a full screen button which could trigger a file download or run code which exploits a vulnerability in the webview container .",
    "however , the tapjacking application will need the permission to access the internet which could raise user s suspicions .",
    "+   + the `` tel:// '' payload will cause the user to silently dial a number in the background",
    ". it does not have such a high impact on security and the worst that could happen would be that the attacker programmed the payload with a premium number and the user would be left with a higher phone bill than expected .",
    "apart from urls , an attacker can also use intents to launch other activities .",
    "for example , the settings activity can be called up using the following snippet of code `` new intent ( android.provider.settings.action_settings ) '' . with the settings activity in the background ,",
    "the attacker can then trick the user into performing various actions ranging from switching on and off wifi and bluetooth to allowing installation of apps from unknown sources .",
    "+   + the attacker can also use intents to launch third party applications using the following code snippet `` getpackagemanager().getlaunchintentforpackage ( ' ' com.bank.app \" ) ; the impact of the attack would depend on the app in question .",
    "needless to say , the attacker would need to ensure that the target user has the target application installed and must be familiar with the various activities and layout of the target application .",
    "this variation of the attack is thus one of the most difficult to pull off .",
    "1 .   exploitability - proof of concept 2 .   impact - high 3 .",
    "complexity - very high 4 .",
    "overall - low    only proof of concept code is available at the moment .",
    "thus an attacker will need to know basic android development in order to write or modify the code needed to exploit the vulnerability . as of now",
    ", there does not exist any tool which would automate the development of such an app when fed a payload .",
    "+   + the impact of the attack is ( potentially ) high and depends on the type of payload . in the case of the installer payload",
    ", an attacker would be able to access the call information , smses , location , files on sd card , camera and microphone , completely compromising the privacy of the user .",
    "hence , the impact is relatively severe .",
    "+   + complexity is very high because the attacker has first got to convince the user to install the application .",
    "he then has to convince the user to comply with the instructions and tap repeatedly on the images .",
    "lastly , there is a substantial chance of failure especially if the user s taps are not accurate .",
    "+   + in summary , the attack is not feasible because it requires the attacker to be skilled enough to write custom code and the user to be gullible enough to follow through with instructions .",
    "the attack is also not scalable as it only works on devices of a specific aspect ratio .",
    "a skilled attacker would be able to compromise phones in masses using easier techniques .",
    "therefore , this attack is not feasible and likely only used in a targeted attack .",
    "according to an unofficial source @xcite , the tapjacking vulnerability was claimed to have been patched in android version 4.0.3 .",
    "however , i have successfully carried out this attack on my phone which is running android 4.3 .",
    "i am unable to ascertain if this is because the manufacturer of my phone has not applied the patch in their images or whether the patch does not exist .",
    "+   + developers can set the filtertoucheswhenobscured property to true or override the onfiltertoucheventforsecurity method . setting the property to true",
    "is the declarative security method and will ignore all taps when the app is not in the foreground . overriding the method is the programmatic security approach and gives the developer more flexibility .",
    "he can choose to ignore or to process the taps based on certain conditions .",
    "i.e. if the app was in the foreground within the last 5 seconds .",
    "given that even google play itself is vulnerable , it is unlikely that many developers practice either one of the methods above .",
    "+   + this is little that users can do to guard themselves against a tapjacking attack .",
    "but in general , users should try not to download obscure apps or download apps from third party app stores .",
    "they should look out for suspicious behaviour such as unsolicited app installs and practice common sense .",
    "i have walked through the process of planning and developing an application that exploits the tapjacking vulnerability . even though there is not much an android user can do to protect himself from such an attack ,",
    "there is little cause for concern as the attack is not feasible to pull off .",
    "nevertheless , android users should still adopt good security practices to thwart other attacks out there .",
    "lastly , developers should also play a more active role in ensuring that their applications are safe from such attacks .",
    "part of the code was shamelessly taken from nvisium s tapjacking proof of concept @xcite .",
    "the code was then revised for a more updated version of the android sdk and customised for the aspect ratio of my phone .",
    "i then stripped out some of the features so i could demonstrate how tapjacking works in the background ."
  ],
  "abstract_text": [
    "<S> android is an open source mobile operating system that is developed mainly by google . </S>",
    "<S> it is used on a significant portion of mobile devices worldwide . in this paper </S>",
    "<S> , i will be looking at an attack commonly known as tapjacking . </S>",
    "<S> i will be taking the attack apart and walking through each individual step required to implement the attack . </S>",
    "<S> i will then explore the various payload options available to an attacker . </S>",
    "<S> lastly , i will touch on the feasibility of the attack as well as mitigation strategies .    2 </S>"
  ]
}