{
  "article_text": [
    "network calculus provides an elegant way to characterize traffic and service processes of network and communication systems . unlike traditional queueing analysis",
    "in which one has to make strong assumptions on arrival or service processes ( e.g. , poission arrival process , exponential service distribution , etc ) so as to derive closed - form solutions@xcite , network calculus allows general arrival and service processes . instead of getting exact solutions , one can derive network delay and backlog bounds easily by network calculus .",
    "deterministic network calculus was proposed in @xcite @xcite@xcite@xcite , etc .",
    "however , most traffic and service processes are stochastic and deterministic network calculus is often not applicable for them .",
    "therefore , stochastic network calculus was proposed to deal with stochastic arrival and service processes @xcite@xcite@xcite@xcite@xcite@xcite@xcite .",
    "there have been some applications of stochastic network calculus@xcite@xcite@xcite@xcite .",
    "however , little effort has been made on applying it to multi - access communication systems . in the paper , we take the first step to apply stochastic network calculus to an 802.11 wireless local network ( wlan ) . in particular , we address the following questions :    * under what situations can we derive stable backlog and delay bounds ? * how to derive the backlog and delay bounds of an 802.11 wireless node ? *",
    "how tight are these bounds when compared with simulations ?    in this paper , we answer these questions and make the following contributions :    * we derive the general stability condition of a wireless node based on the theorems of stochastic network calculus . from this",
    ", we give the specific stability condition of an 802.11 wireless node . *",
    "we derive the service curve of an 802.11 node based on an existing model of 802.11@xcite . from the service curve",
    ", we then derive the backlog and delay bounds of the node .",
    "* the derived bounds are loose in many cases when compared with ns-2 simulations .",
    "we discuss the reasons and point out future work .",
    "this paper is organized as follows . in section  [ sec : snc ] , we give a brief overview of stochastic network calculus . in section  [ sec : model ] , we present the stochastic network calculus model of a wireless node . in section  [ sec : stab ] , we derive the general stability condition of a wireless node . in section  [ sec:802_11 ]",
    ", we derive the backlog and delay bounds and the stability condition for an 802.11 node . in section  [ sec :",
    "simulation ] , we compare the derived bounds with simulation results .",
    "related work is given in section  [ sec : related ] and finally , section  [ sec : conclusion ] concludes the paper and points out future directions .",
    "in this section , we first review basic terms of network calculus and then cite the results of stochastic network calculus which we will use in this paper .",
    "there are various versions of arrival and service curves .",
    "we adopt _ virtual backlog centric ( v.b.c ) stochastic arrival curve _ and _ weak stochastic service curve _ in our analysis .",
    "we consider a discrete time system where time is slotted ( @xmath0 ) .",
    "a process is a function of time @xmath1 . by default",
    ", we use @xmath2 to denote the _ arrival process _ to a network element with @xmath3 .",
    "@xmath2 is the total amount of traffic arrived to this network element up to time @xmath1 .",
    "we use @xmath4 to denote the _ departure process _ of the network element with @xmath5 .",
    "@xmath4 is the total amount of traffic departed from the network element up to time @xmath1 .",
    "let @xmath6 ( @xmath7 ) represents the set of non - negative wide - sense increasing ( decreasing ) functions . clearly , @xmath8 and @xmath9 .",
    "for any process , say @xmath2 , we define @xmath10 , for @xmath11 .",
    "we define the backlog of the network element at time @xmath1 by @xmath12 and the delay of the network element at @xmath1 by @xmath13 fig .",
    "[ fig : curves_eg ] illustrates an example of @xmath2 and @xmath4 with @xmath14 and @xmath15 at @xmath16 .    ,",
    "@xmath4 , @xmath14 and @xmath15,title=\"fig:\",scaledwidth=80.0% ] +    in deterministic network calculus , @xmath2 can be upper - bounded by an arrival curve .",
    "that is , for all @xmath17 , we have @xmath18 where @xmath19 is called the _ arrival curve _ of @xmath2 .    a _ busy period _ is a time period during which the backlog in the network element is always nonzero . for any busy period",
    "@xmath20 $ ] , suppose we have @xmath21 which means that the network element provides a guaranteed service lower - bounded by @xmath22 during the busy period .",
    "we can let @xmath23 be the beginning of the busy period , that is , the backlog at @xmath23 is zero or @xmath24 .",
    "therefore , @xmath25    the above equation infers @xmath26}$ ] , which can be written as @xmath27 where @xmath28 is called the operator of _ min - plus convolution _ and @xmath29 is called the _ service curve _ of the network element .",
    "we cite the following definitions and theorems from @xcite@xcite except that we define definition  [ def : stability ] by ourselves .",
    "[ def : ac ] a flow is said to have a virtual - backlog - centric ( v.b.c ) stochastic arrival curve @xmath30 with bounding function @xmath31 , denoted by @xmath32 , if for all @xmath33 and all @xmath34 , there holds @xmath35>x\\ } \\leq f(x).\\end{aligned}\\ ] ]    originally , in deterministic network calculus , we have @xmath36 for all @xmath37 .",
    "however , there is usually some randomness in stochastic arrival processes and @xmath38 may not be upper - bounded by any arrival curve deterministically ( e.g. , traffic arrivals in @xmath39 $ ] can be arbitrarily large in poisson process ) .",
    "thus , v.b.c stochastic arrival curve is proposed to tackle this problem .",
    "roughly speaking , @xmath38 can exceed @xmath40 by @xmath41 , but its probability is upper - bounded by @xmath42 which is a decreasing function of @xmath41 .",
    "[ def : sc ] a server @xmath43 is said to provide a weak stochastic service curve @xmath44 with bounding function @xmath45 , denoted by @xmath46 , if for all @xmath33 and all @xmath34 , there holds @xmath47    in deterministic network calculus , we have @xmath48 , which means that there is a service guarantee denoted by the service curve @xmath29 .",
    "however , there is usually some randomness in stochastic service process and thus a server may not always provide a guaranteed service curve deterministically .",
    "thus , weak stochastic service curve is proposed to tackle this problem .",
    "roughly speaking , @xmath49 can be less than @xmath50 , but its probability is upper - bounded by @xmath51 which is a decreasing function of @xmath41 .",
    "the utility of the above definitions is that if we can characterize the traffic by a v.b.c stochastic arrival curve and the server s service process by a weak stochastic service curve , then we can calculate backlog and delay bounds of the network element by theorem  [ theo : backlog_delay ] .",
    "[ theo : backlog_delay ] consider a server fed with a flow @xmath52 .",
    "if the server provides a weak stochastic service curve @xmath46 to the flow and the flow has a v.b.c stochastic arrival curve @xmath53 , then    \\(i ) the backlog @xmath14 of the flow in the server at time @xmath1 satisfies : for all @xmath33 and all @xmath34 , @xmath54}).\\end{aligned}\\ ] ]    \\(ii ) the delay @xmath15 of the flow in the server at time @xmath1 satisfies : for all @xmath33 and all @xmath34 , @xmath55}).\\end{aligned}\\ ] ]    by definition @xmath56 when @xmath57 in this theorem .",
    "note that as noticed recently by researchers of network calculus , the formula of delay bound in this theorem often returns trivial results , which we will see in section  [ sec:802_11 ] .",
    "by now , we have reviewed the key results of stochastic network calculus .",
    "next , we will show how to calculate v.b.c stochastic arrival curve and weak stochastic service curve .",
    "in @xcite , the author presented a theorem to facilitate calculation of stochastic arrival curves . before showing the theorem",
    ", we first introduce @xmath58__-upper constrained _ _ @xcite .",
    "[ def : theta_uc ] a process @xmath52 is said to be @xmath59-upper constrained ( for some @xmath60 ) , if for all @xmath17 , we have @xmath61    this definition is equivalent to @xmath62 , which means that @xmath38 s moment generating function is upper - bounded .",
    "two related concepts are defined as follows .",
    "[ def : theta - mer ] a process @xmath52 s _ minimum envelope rate ( mer ) with respect to @xmath63 _ ( @xmath63-mer ) , denoted by @xmath64 , is defined as follows : @xmath65 we say that @xmath52 has an _ envelope rate ( er ) with respect to @xmath63 _ ( @xmath63-er ) , denoted by @xmath66 , if @xmath67 .",
    "the following theorem expresses the relationship between @xmath63-er and @xmath59-upper constrained .",
    "[ theo : relation_theta ]   + ( i ) if @xmath52 is @xmath59-upper constrained , then @xmath66 is @xmath63-er of @xmath52 .",
    "+ ( ii ) if @xmath52 has @xmath63-er @xmath68 , then for every @xmath69 there exists @xmath70 so that @xmath52 is @xmath71-upper constrained .",
    "now we have two kinds of traffic characterization : v.b.c stochastic arrival curve and @xmath59-upper constrained .",
    "the following theorem establishes the connection between them .",
    "[ theo : ac_theta ] suppose @xmath2 is @xmath72-upper constrained , then it has a v.b.c stochastic arrival curve - upper constrained , which is wrong as noticed recently by researchers of network calculus .",
    "however , one can easily see the theorem holds for v.b.c stochastic arrival curve . ]",
    "@xmath73 , where @xmath74 for any @xmath75 and @xmath34 .",
    "this theorem indicates that if we can show that the traffic is @xmath59-upper constrained , then we can get its v.b.c stochastic arrival curve by eq .",
    "( [ eq : theo_ac_theta ] ) .",
    "we now introduce the concept of _ stochastic strict server_. this concept was inspired by the observation that a wireless channel can be described by an ideal service process and an impairment process .",
    "as we will see in section  [ sec : model ] , a wireless node can be modeled as a stochastic strict server .",
    "a server @xmath43 is said to be a stochastic strict server providing stochastic strict service curve @xmath76 with impairment process @xmath77 to a flow iff during any backlogged period @xmath39 $ ] , the output @xmath78 of the flow from the server satisfies @xmath79    we can easily find the weak stochastic service curve of a stochastic strict server by the following theorem .",
    "[ theo : strict_sc ] consider a stochastic strict server @xmath43 providing a stochastic strict service curve @xmath80 with an impairment process @xmath77 .",
    "if the impairment process has a v.b.c stochastic arrival curve , or @xmath81 , and @xmath82 , then the server provides a weak stochastic service curve @xmath46 with @xmath83    so far , we have cited all results of stochastic network calculus which we will use in this paper .",
    "finally , we define stable backlog and stable delay .",
    "a natural definition is to check whether the expectation of backlog ( or delay ) is finite .",
    "[ def : stability ] the backlog @xmath14 is stable , if @xmath84 similarly , the delay @xmath15 is stable , if @xmath85    we say that the backlog ( or delay ) bound of stochastic network calculus is stable if they can derive stable backlog ( or delay ) .",
    "in this section we model a wireless node ( not restricted to 802.11 ) by stochastic network calculus . in general , we can define one slot ( @xmath86 ) to be any duration of time and measure traffic amount in any unit ( e.g. bits , bytes or packets ) .",
    "we consider a wireless node .",
    "let @xmath2 denote the traffic arrived at the node from the application layer .",
    "suppose @xmath52 is @xmath87-upper constrained . from theorem  [ theo : ac_theta ] , we have @xmath88 , where @xmath89 for any @xmath90 .",
    "we can model a wireless node by a stochastic strict server .",
    "let the channel capacity be @xmath91 traffic unit per slot .",
    "the departure process @xmath92 during any backlogged period @xmath93 $ ] , where @xmath94 is the ideal service curve and @xmath77 is the impairment process due to backoff , channel sharing and transmission errors .",
    "since @xmath95 , @xmath77 has a finite @xmath63-mer . from theorem  [ theo : relation_theta ] , there exist @xmath96 and @xmath97 so that @xmath77 is @xmath98-upper constrained .",
    "based on theorem  [ theo : ac_theta ] , we have @xmath99 , where @xmath100 for any @xmath101 .    from theorem  [ theo : strict_sc ] , the node provides a weak stochastic service curve @xmath46 , where @xmath102 for any @xmath103 .",
    "furthermore , from theorem  [ theo : backlog_delay ] , we must have @xmath104 , or equivalently , @xmath105 thus , @xmath106 . otherwise , if @xmath107 , we get a trivial backlog bound , @xmath108 .",
    "one fundamental question we need to address is under what condition we can get _ stable _ @xmath14 and @xmath15 from stochastic network calculus , i.e. , @xmath109 and @xmath110 . before presenting our result",
    ", we first define the concept of _ envelop average rate_.    [ def : er ] the envelop average rate of a process @xmath52 , denoted by @xmath111 , is defined as @xmath112    let @xmath113 and @xmath114 be the envelop average rate of @xmath52 and @xmath77 , respectively .",
    "the following proposition shows the stability condition .",
    "[ prop : stab ] a wireless node has stable backlog and stable delay if @xmath115    _ proof : _ we have shown that @xmath116 if eq .",
    "( [ eq : stab_1 ] ) holds .",
    "thus , for any @xmath1 , @xmath117    since @xmath42 and @xmath51 are exponentially decreasing functions according to eq .",
    "( [ eq : a_ac ] ) and eq .",
    "( [ eq : i_ac ] ) , @xmath118 is an exponentially decreasing function .",
    "thus we have , for any @xmath1 , @xmath109 .",
    "it is easy to see that for any @xmath1 , @xmath110 .",
    "otherwise , the service time is @xmath119 and thus @xmath120 which contradicts eq .",
    "( [ eq : eb ] ) .",
    "now we examine eq .",
    "( [ eq : stab_1 ] ) . from eq .",
    "( [ eq : a_ac ] ) and eq .",
    "( [ eq : i_ac ] ) , @xmath121 and @xmath122 for any @xmath123 .",
    "thus , eq .  ( [ eq : stab_1 ] ) is equivalent to @xmath124    from theorem  [ theo : relation_theta ] , we have @xmath125 and @xmath126 for any @xmath127 , where @xmath128 and @xmath129 are @xmath63-mers of @xmath52 and @xmath77 , respectively .",
    "equivalently , we have @xmath130    using taylor expansion on @xmath128 , we have @xmath131}}}.\\end{aligned}\\ ] ]    therefore , @xmath132    similarly , @xmath133    therefore , there exist @xmath134 and @xmath135 so that @xmath136 and @xmath137 for any enough small @xmath138 .",
    "( [ eq : stab_4 ] ) is satisfied if @xmath139 since @xmath140 , @xmath141 and @xmath142 can be arbitrarily small , the above equation is satisfied when @xmath143 + * remarks : * since the proof is based on theorems of stochastic network calculus , it indicates that we can get stable backlog and delay bounds by stochastic network calculus as long as the condition of eq .",
    "( [ eq : stab ] ) holds .",
    "since this condition is very general , we conclude that theoretically stochastic network calculus is effective .",
    "in this section , we apply the results in the previous section to calculate backlog and delay bounds for an 802.11 wlan node . for simplicity , we assume there are @xmath144 _ identical _ stations ( or nodes ) sending packets to an access point .",
    "all nodes operate in distributed coordination function ( dcf ) mode with rts / cts turned off@xcite .",
    "we consider an ideal channel , that is , transmission errors are only caused by collisions .",
    "two packets are collided if their transmissions overlap in time . besides , we assume that all data packets are of the same size .      a node with a data packet ( or simply packet ) to transmit first monitors the channel activity .",
    "if the channel is idle for a period of time equal to a distributed interframe space ( difs ) , the node transmits .",
    "otherwise , if the channel is sensed busy ( either immediately or during the difs ) , the node backs off , in which the node defers channel access by a random number of _ idle slots _ within a contention window ( @xmath145 ) , ranging from 0 to @xmath146 .",
    "when the backoff counter reaches zero and expires , the node can access the channel . during the backoff period ,",
    "if the node detects a busy channel , it freezes the backoff counter and the backoff process is resumed once the channel is idle for a duration of difs . to avoid channel capture ,",
    "a node must wait a random backoff time between two consecutive new packet transmissions , even if the channel is sensed idle for a duration of difs .",
    "once the packet is received successfully , the receiver will return an ack after a short interframe space ( sifs ) .",
    "note that sifs is shorter than an idle slot so that there is no collision caused by a data packet and an ack .",
    "802.11 uses the truncated exponential backoff technique to set its @xmath145 .",
    "for example , in 802.11b , the initial @xmath145 is @xmath147 . each time",
    "a collision occurs , @xmath145 doubles its size , up to a maximum of @xmath148 .",
    "when the packet is successfully transmitted , @xmath145 is reset to @xmath149 .",
    "the packet is dropped when it is retransmitted for _ six _ times and still not transmitted successfully .",
    "[ fig:802_11 ] shows some parameters of 802.11b used in our paper .",
    "[ cols= \" < , < \" , ]     we illustrate the above calculations in scenario 1 ( see fig .  [",
    "fig : scen1 ] ) . from eq .",
    "( [ eq : tau_gamma ] ) and ( [ eq : gamma_tau ] ) , @xmath150 and @xmath151 .",
    "thus , @xmath152 , @xmath153 , @xmath154 and @xmath155 .",
    "let @xmath156 be the value of eq .",
    "( [ eq : ei ] ) .",
    "[ fig : ex_mt ] shows @xmath156 and its @xmath157-upper constrained curve when @xmath158 .",
    "we have @xmath159 and @xmath160 , as calculated by algorithm 1 .",
    "-upper constrained curve of a node s @xmath156,title=\"fig:\",scaledwidth=60.0% ] +    furthermore , from eq .",
    "( [ eq : i_ac ] ) and ( [ eq : s_sc ] ) we have @xmath161 where @xmath162 for any @xmath163 . fig .",
    "[ fig : ex_sc ] plots @xmath29 and @xmath164 when @xmath165 .",
    "+      before calculating the bounds , we first derive the stability condition . since @xmath166 , the channel capacity @xmath167 packet per slot . because @xmath168 is actually the percentage of the node s successful transmission time , by proposition  [ prop : stab ] ,",
    "the _ stability condition of 802.11 _ is @xmath169      we can immediately calculate backlog bounds by applying eq .",
    "( [ eq : a_ac])-([eq : s_sc ] ) into theorem  [ theo : backlog_delay ] .",
    "the only technical issue is to select proper @xmath134 and @xmath135 a obtain tight bounds .",
    "clearly , @xmath42 depends on @xmath134 and @xmath170 , and @xmath51 depends on @xmath135 and @xmath171 . according to eq .",
    "( [ eq : stab_1 ] ) , we have @xmath172 and @xmath173 . in addition , @xmath170 ( @xmath171 ) should be set as large as possible because @xmath42 ( @xmath51 ) decreases with @xmath170 ( @xmath171 ) .",
    "considering the above conditions , we have @xmath174\\nonumber\\\\ & & \\textnormal{subject to}\\nonumber\\\\ & & r_a > \\rho_a(\\theta_1 ) , r_i > \\rho_i(\\theta_2)\\",
    "\\textnormal{and}\\ r_a + r_i = 1.\\end{aligned}\\ ] ] in general , we do not have an analytical solution of @xmath175 $ ] and we resort to numerical methods and use algorithm 2 to get a near - optimal solution ( see appendix a-2 ) .    as noticed recently by researchers of network calculus ,",
    "the delay bound in theorem  [ theo : backlog_delay ] often returns trivial results . in our model in section  [ sec : model ] , it is easy to see that @xmath176 .",
    "we propose the following way to estimate delay bound .",
    "little s law states that the average number of customers in a queueing system is equal to the average arrival rate of customers to that system , times the average time spent in that system@xcite .",
    "let the average arrival rate is @xmath177 . assume the system can reach _ steady state _",
    "when @xmath178 .",
    "then we have the average backlog is @xmath179 and the average delay of each packet is greater than or equal to @xmath180 ( by its definition in eq .",
    "( [ eq : delay ] ) , @xmath15 can be less than the delay of the bottom - of - line packet at @xmath1 ) .",
    "therefore , by little s law , we have @xmath181 finally , we apply markov s inequality to the above equation and we have @xmath182 besides , according to eq .",
    "( [ eq : eb ] ) , @xmath183 . and",
    "we can use eq .",
    "( [ eq : my_backlog_bound ] ) to bound @xmath184 .",
    "note that eq .",
    "( [ eq : my_delay_bound ] ) is derived when @xmath185 . in practice",
    ", we can use this result to estimate delay bound when @xmath1 is sufficiently large .",
    "in this section , we use ns-2 simulations to verify our derived backlog and delay bounds for poisson and constant bit rate ( cbr ) traffic arrivals .",
    "we carry out all experiments for scenario 1 ( fig .",
    "[ fig : scen1 ] ) .",
    "each simulation duration is 100 seconds ( _ s _ ) which is long enough to let a node transmit thousands of packets .",
    "each data point ( e.g. @xmath186 ) is calculated over 100 independent simulations .",
    "let @xmath177 be the average traffic rate ( packets / slot ) .",
    "in this case , we have @xmath187 ( see definition  [ def : er ] ) . for poisson traffic , we have @xmath188 where @xmath189 is the probability of @xmath190 packets arriving within @xmath191 $ ] . from the above equation ,",
    "poisson traffic is @xmath192-upper constrained and we can obtain its arrival curve by eq .",
    "( [ eq : a_ac ] ) .    from eq .",
    "( [ eq : stab_802_11 ] ) , backlogs are stable when @xmath193 ( packet per slot ) . in fig .",
    "[ fig : plot_10_stable_poisson ] , we plot the average backlog @xmath194 $ ] at @xmath195 and @xmath196 , @xmath197 and @xmath198 in ns-2 simulations .",
    "we observe that there is sudden jump when @xmath199 , indicating the critical point of stability is indeed around @xmath197 .",
    "this figure also indicates the accuracy of the 802.11 model in eq .",
    "( [ eq : tau_gamma ] ) and eq .",
    "( [ eq : gamma_tau ] ) .",
    "( @xmath200s ) when @xmath201,title=\"fig:\",scaledwidth=60.0% ] +    * experiment 1*(scenario 1 with low poisson traffic load ) we set @xmath202 to simulate low traffic load .",
    "[ fig : plot_10_poisson_low](a ) shows @xmath186 in ns-2 simulations and fig .",
    "[ fig : plot_10_poisson_low](b ) shows the upper bound of @xmath186 calculated by eq .",
    "( [ eq : my_backlog_bound ] ) .",
    "note that stochastic network calculus gives very loose upper bounds",
    ". there may be two reasons .",
    "one is that we use the worst - case analysis in deriving the weak stochastic service curve of 802.11 .",
    "the other is that there are many relaxations in proving the theorems of stochastic network calculus@xcite .",
    "for example , relaxations are used in deriving @xmath42 in theorem  [ theo : ac_theta ] @xcite , and this theorem is popularly used in deriving arrival curves and service curves ( see section  [ sec : model ] ) .",
    "the first reason may not be the key reason because we will see in experiment 2 the bound is even looser when we increase arrival rate and make the channel near saturated .",
    "the second reason seems to be the key reason .",
    "we will see in experiment 3 that backlog bounds improve substantially for cbr traffic where we are able to derive the arrival curve by hand without using theorem  [ theo : ac_theta ] .",
    "this indicates that refinements are needed in stochastic network calculus so as to tighten the bounds .",
    "moreover , we found that backlog bounds are sensitive to adjusting parameters ( i.e. , @xmath134 , @xmath135 , @xmath170 and @xmath171 ) .",
    "so it is necessary to use algorithm 2 to minimize the bounds .",
    "we also conduct simulations to verify delay bounds at @xmath195 . since the backlog bounds are too loose , in order to avoid trivial validation , we use @xmath203 in ns-2 simulations to validate eq .",
    "( [ eq : little ] ) and eq .",
    "( [ eq : my_delay_bound ] ) ( assume that @xmath200s is sufficiently large so that we can apply these equations ) . actually , we get @xmath204 by eq .",
    "( [ eq : little ] ) , which tightly bounds @xmath205 in ns-2 simulations . fig .",
    "[ fig : plot_10_poisson_low](c ) shows @xmath206 in ns-2 simulations and fig .",
    "[ fig : plot_10_poisson_low](d ) shows the upper bound of @xmath206 calculated by eq .",
    "( [ eq : my_delay_bound ] ) . clearly , @xmath206 is upper - bounded by eq .",
    "( [ eq : my_delay_bound ] ) .",
    "( a ) @xmath186 ( b ) upper bound of @xmath186 ( c ) @xmath206 ( d ) upper bound of @xmath206,title=\"fig:\",scaledwidth=60.0% ] +    * experiment 2*(scenario 1 with high poisson traffic load ) we set @xmath207 to simulate high traffic load .    fig .",
    "[ fig : plot_10_poisson_high](a ) shows @xmath186 in ns-2 simulations and fig .",
    "[ fig : plot_10_poisson_high](b ) shows the upper bound of @xmath186 calculated by eq .",
    "( [ eq : my_backlog_bound ] ) . in this case",
    ", @xmath134 ( @xmath135 ) is much smaller than that of experiment 1 so as to satisfy the constraint in eq .",
    "( [ eq : my_backlog_bound ] ) , resulting in looser @xmath42 and @xmath51 . therefore , stochastic network calculus gives further loose backlog bounds .",
    "( a ) @xmath186 ( b ) upper bound of @xmath186 ( c ) @xmath206 ( d ) upper bound of @xmath206,title=\"fig:\",scaledwidth=60.0% ] +    we also conduct simulations to verify delay bounds at @xmath195 . since the backlog bounds are too loose , in order to avoid trivial validation , we use @xmath203 in ns-2 simulations to validate eq .",
    "( [ eq : little ] ) and eq .",
    "( [ eq : my_delay_bound ] ) ( assume that @xmath200s is sufficiently large so that we can apply these equations ) . actually , we get @xmath208 by eq .",
    "( [ eq : little ] ) , which tightly bounds @xmath209 in ns-2 simulations . fig .",
    "[ fig : plot_10_poisson_high](c ) shows @xmath206 in ns-2 simulations and fig .",
    "[ fig : plot_10_poisson_high](d ) shows the upper bound of @xmath206 calculated by eq .",
    "( [ eq : my_delay_bound ] ) . clearly , @xmath206 is upper - bounded by eq .",
    "( [ eq : my_delay_bound ] ) .",
    "let @xmath177 be the average traffic rate ( packets / slot ) .",
    "in this case , we have @xmath187 .",
    "it is easy to see that @xmath210 < 1 $ ] for all @xmath1 because packets arrive one by one in a constant time interval .",
    "thus , we have @xmath73 where @xmath211    again , from eq .",
    "( [ eq : stab_802_11 ] ) , the stability condition is @xmath212 ( packet per slot ) . in fig .  [",
    "fig : plot_10_stable_cbr ] , we plot the average backlog @xmath194 $ ] at @xmath195 for @xmath213 , @xmath197 and @xmath198 in ns-2 simulations .",
    "we observe that there is sudden jump when @xmath214 , indicating the critical point of stability is indeed around @xmath197 .",
    "this figure also indicates the accuracy of the 802.11 model in eq .",
    "( [ eq : tau_gamma])and([eq : gamma_tau ] ) .",
    "( @xmath200s ) when @xmath201,title=\"fig:\",scaledwidth=60.0% ] +    * experiment 3*(scenario 1 with low cbr traffic load ) we set @xmath202 to simulate low traffic load .",
    "[ fig : plot_10_cbr_low](a ) shows @xmath186 in ns-2 simulations and fig .",
    "[ fig : plot_10_cbr_low](b ) shows upper bound of @xmath186 calculated by eq .",
    "( [ eq : my_backlog_bound ] ) .",
    "the backlog bounds are much tighter in cbr traffic than those in poisson traffic ( see experiment 1 ) .",
    "the main reason is that we can derive a tight @xmath42 by hand instead of by theorem  [ theo : ac_theta ] .",
    "( a ) @xmath186 ( b ) upper bound of @xmath186 ( c ) @xmath206 ( d ) upper bound of @xmath206,title=\"fig:\",scaledwidth=60.0% ] +    we also conduct simulations to verify delay bounds at @xmath195 . since the backlog bounds are still loose , in order to avoid trivial validation , we use @xmath203 in ns-2 simulations to validate eq .",
    "( [ eq : little ] ) and eq .",
    "( [ eq : my_delay_bound ] ) ( assume that @xmath200s is sufficiently large so that we can apply these equations ) . actually , we get @xmath215 by eq .",
    "( [ eq : little ] ) , which tightly bounds @xmath216 in ns-2 simulations . fig .",
    "[ fig : plot_10_cbr_low](c ) shows @xmath206 in ns-2 simulations and fig .",
    "[ fig : plot_10_cbr_low](d ) shows the upper bound of @xmath206 calculated by eq .",
    "( [ eq : my_delay_bound ] ) . clearly , @xmath206 is upper - bounded by eq .",
    "( [ eq : my_delay_bound ] ) .    *",
    "experiment 4*(scenario 1 with high cbr traffic load ) we set @xmath207 to simulate high traffic load .    fig .",
    "[ fig : plot_10_cbr_high](a ) shows @xmath186 in ns-2 simulations and fig .",
    "[ fig : plot_10_cbr_high](b ) shows the upper bound of @xmath186 calculated by eq .",
    "( [ eq : my_backlog_bound ] ) .",
    "the backlog bounds are much tighter in cbr traffic than those in poisson traffic ( see experiment 2 ) because @xmath42 is tight here .",
    "( a ) @xmath186 ( b ) upper bound of @xmath186 ( c ) @xmath206 ( d ) upper bound of @xmath206,title=\"fig:\",scaledwidth=60.0% ] +    we also conduct simulations to verify delay bounds at @xmath195 . since the backlog bounds are still loose , in order to avoid trivial validation , we use @xmath203 in ns-2 simulations to validate eq .",
    "( [ eq : little ] ) and eq .",
    "( [ eq : my_delay_bound ] ) ( assume that @xmath200s is sufficiently large so that we can apply these equations ) . actually , we get @xmath217 by eq .",
    "( [ eq : little ] ) , which is close to ( although does not bound ) @xmath209 in ns-2 simulations .",
    "[ fig : plot_10_cbr_high](c ) shows @xmath206 in ns-2 simulations and fig .  [ fig : plot_10_cbr_high](d ) shows the upper bound of @xmath206 calculated by eq .",
    "( [ eq : my_delay_bound ] ) .",
    "clearly , @xmath206 is upper - bounded by eq .",
    "( [ eq : my_delay_bound ] ) .    to sum up",
    ", the current version of stochastic network calculus often derives loose bounds when compared with simulations , especially in the case of high traffic load .",
    "therefore , stochastic network calculus may not be effective in practice .",
    "in this section , we first present relate work on stochastic network calculus and then on the performance analysis of 802.11 .",
    "the increasing demand on transmitting multimedia and other real time applications over the internet has motivated the study of quality of service guarantees . towards it ,",
    "stochastic network calculus , the probabilistic version of the deterministic network calculus @xcite@xcite@xcite@xcite , has been recognized by researchers as a promising step . during its development ,",
    "traffic - amount - centric ( t.a.c ) stochastic arrival curve is proposed in @xcite , virtual - backlog - centric ( v.b.c ) stochastic arrival curve is proposed in @xcite and maximum - backlog - centric ( m.b.c ) stochastic arrival curve is proposed in @xcite .",
    "weak stochastic service curve is proposed in @xcite@xcite and stochastic service curve is proposed in @xcite . in @xcite , jiang showed that only the combination of m.b.c stochastic arrival curve and stochastic service curve has all five basic properties required by a network calculus ( i.e. , superposition , concatenation , output characterization , per - flow service , service guarantees ) and the other combinations only have parts of these properties .",
    "jiang also proposed the concept of stochastic strict server to facilitate calculation of stochastic service curve .",
    "moreover , he presented independent case analysis to obtain tighter performance bounds for the case that flows and servers are independent .",
    "however , there are a few bugs in his results recently found by researchers of network calculus , such as the trivial delay bound in theorem  3.5@xcite and theorem  5.1 .",
    "therefore , we adopt v.b.c stochastic arrival curve and weak stochastic service curve in our study since we only consider backlog and delay bounds ( i.e. , service guarantee ) , ignoring the other properties .",
    "there have been some applications of stochastic network calculus . in @xcite ,",
    "jiang et al . analyzed a dynamic priority measurement - based admission control ( mbac ) scheme based on stochastic network calculus . in @xcite ,",
    "liu et al . applied stochastic network calculus to studying the conformance deterioration problem in networks with service level agreements . in @xcite ,",
    "based on stochastic network calculus , x. yu et al .",
    "developed several upper bounds on the queue length distribution of generalized processor sharing ( gps ) scheduling discipline with long range dependent ( lrd ) traffic .",
    "they also extended the gps results to a packet - based gps ( pgps ) system .",
    "finally , agharebparast et al . modeled the behavior of a single wireless link using stochastic network calculus @xcite",
    "however , little effort has been made on applying stochastic network calculus to multi - access communication systems such as 802.11 .",
    "existing work on the performance of 802.11 has focused primarily on its throughput and capacity . in @xcite ,",
    "bianchi proposed a markov chain throughput model of 802.11 . in @xcite , kumar",
    "proposed a probability throughput model which is simpler than bianchi s model . in our paper , we adopt kumar s model to derive the service curve of 802.11",
    ". there are also some work on queueing analysis of 802.11 . in @xcite , zhai et al . assumed poisson traffic arrival and proposed an m / g/1 queueing model of 802.11 . more generally , tickoo proposed a g / g/1 queueing model of 802.11@xcite@xcite . to our best knowledge ,",
    "we are the first to model the queueing process of 802.11 based on stochastic network calculus .",
    "in this paper , we presented a stochastic network calculus model of 802.11 . from stochastic network calculus ,",
    "we first derived the general stability condition of a wireless node .",
    "then we derived the stochastic service curve and the specific stability condition of an 802.11 node based on an existing model of 802.11 .",
    "thus , we obtained the backlog and delay bounds of the node by using the corresponding theorem of stochastic network calculus .",
    "finally , we carried out ns-2 simulations to verify these bounds .",
    "there are some open problems for future work .",
    "first , we derived the service curve based on an existing 802.11 model .",
    "thus , the accuracy of the service curve depends on the accuracy of the model",
    ". an open question may be whether we can derive the service curve of 802.11 without using any existing models .",
    "second , we assumed the worst - case condition ( i.e. , saturate condition ) in our analysis .",
    "can we remove this conservative assumption ? besides , under the worst - case assumption , we can assume flows and servers are independent and perform independent case analysis obtaining tighter backlog and delay bounds .",
    "this is also one of our future work .",
    "third , we observe that the derived bounds are loose when compared with ns-2 simulations , calling for further improvements in the current version of stochastic network calculus .",
    "y. jiang , p. emstad , a. nevin , v. nicola , and m. fidler , `` measurement - based admission control for a flow - aware network , '' procs . , _",
    "eurongi 1st conference on next generation internet networks - traffic engineering _ ,",
    "2005 .",
    "f. agharebparast and v.c.m .",
    "leung , `` link - layer modeling of a wireless channel using stochastic network calculus , '' _",
    "canadian conference on electrical and computer engineering _ , vol .",
    "4 , pp . 1923 - 1926 , 2004 .                  1",
    ".   let @xmath220 .",
    "obviously , @xmath156 is an increasing function of @xmath1 with @xmath221 .",
    "we define axes @xmath1 and axes @xmath222 ( vertical to @xmath1 ) on a plane , and plot @xmath156 on it .",
    "we define the slope of @xmath156 , @xmath223 .",
    "we calculate @xmath224 for @xmath225 until it converges at some @xmath226 , i.e. , @xmath227 where @xmath140 is a small number , e.g. @xmath228 .",
    "we draw a straight line @xmath229 with the slope @xmath230 crossing the point @xmath231",
    ". obviously , the line crosses the point @xmath232 . the maximum displacement between @xmath156 and @xmath229 ( in the direction of @xmath222 ) , @xmath233 .",
    "we shift @xmath229 by @xmath234 in the direction of @xmath222 and get @xmath235 .",
    "clearly , @xmath235 upperbounds @xmath156 . in other words",
    ", we have @xmath236 and @xmath237 .      in each iteration",
    ", we generate a sample of @xmath134 , @xmath135 , @xmath170 and @xmath171 . if they satisfy the condition of eq .",
    "( [ eq : my_backlog_bound ] ) , we calculate @xmath238 $ ] for the current and past iterations until it converges .",
    "sample generations can use the interpolation or monte carlo method over valid ranges of the variables ."
  ],
  "abstract_text": [
    "<S> stochastic network calculus provides an elegant way to characterize traffic and service processes . </S>",
    "<S> however , little effort has been made on applying it to multi - access communication systems such as 802.11 . in this paper , we take the first step to apply it to the backlog and delay analysis of an 802.11 wireless local network . in particular , we address the following questions : in applying stochastic network calculus , under what situations can we derive stable backlog and delay bounds ? how to derive the backlog and delay bounds of an 802.11 wireless node ? and how tight are these bounds when compared with simulations ? to answer these questions , we first derive the general stability condition of a wireless node ( not restricted to 802.11 ) . from this , we give the specific stability condition of an 802.11 wireless node . </S>",
    "<S> then we derive the backlog and delay bounds of an 802.11 node based on an existing model of 802.11 . </S>",
    "<S> we observe that the derived bounds are loose when compared with ns-2 simulations , indicating that improvements are needed in the current version of stochastic network calculus . </S>"
  ]
}