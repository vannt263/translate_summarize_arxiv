{
  "article_text": [
    "the ec software comprises the device representation layer , the real - time layer , and the device drivers @xcite . except for some assembler code ,",
    "it has been written entirely in pascal .",
    "for embedded applications there are no integrated cross development systems that support pascal any more .",
    "the system we use runs under vms and its support expires completely by the end of 2001 .",
    "however until now we invested about 40 person - years in developing and maintaining ec software .",
    "a lot of special know - how has gone especially into the real - time layer .",
    "the functionality gained in this work must be preserved .",
    "future control system developments have to be realized with modern object - oriented methodes .",
    "appropriate up - to - date tools are based on c++ or java nearly without exception .",
    "existing hardware ( 400 vme boards ) has to be used in the future as well since it can not be replaced completely due to cost reasons . and ,",
    "last but not least , the conversion must not affect the day by day accelerator operation .",
    "we decided to convert the ec software from pascal to c in a first step .",
    "this allows us to `` re - use '' the software on one hand and to establish a basis for re - engineering the control system with modern methods and tools @xcite on the other hand .    considering that ec software consists of about 170000 lines of code ( loc ) , comments not counted",
    ", it is clear that conversion has to be done automatically as far as possible .",
    "the basis for a conversion is ec software for one device class .",
    "there are 61 different device classes , each one controlled by dedicated software . to ease the conversion",
    ", we issued a cookbook @xcite that describes the process step by step .    to convert the pascal code into c automatically we use the pascal to c translator p2c .",
    "perl scripts are used to adapt the notation of identifiers to our style guide .    in spite of the automation",
    "there is a lot of manual interaction left over . beside the preparations for p2c and perl",
    "there are four essential reasons that make manual interaction neccessary .      the p2c manual pages state that `` most reasonable pascal programs are converted into fully functional c which will compile and run with no further modifications ''",
    ". this may be true for stand - alone programs . given the ec software it has to be taken into account that in case of communications with other modules , e.g.  programs of the operating layer , the structure of interchanged data has to be kept fully compatible , because those modules have not been changed .",
    "pascal supports `` records und arrays to facilitate minimal alignment space between elements .",
    "c does not support this feature .",
    "\\2 . at gsi",
    "we use the organon pascal compiler from cad - ul which supports the dialect of the oregon pascal/2 compiler .",
    "their syntax only differ in one key word , but they generate completely different codes",
    ". however p2c makes some assumptions about the generated code , e.g.  the order of bits in a bitset , which is crucial for instance when hardware registers are accessed .    \\3 . in pascal",
    "the allocation size of an enumeration type depends on the number of its elements .",
    "it may be one or two bytes . in c",
    "the allocation size is always an `` .",
    "the pascal string `` contains `` characters .",
    "its allocation size in memory is `` bytes .",
    "a c string with equal size is `` .",
    "it can hold only `` - 1 ( printable ) characters because of the terminating ` \\0 ` .      a cpu of the device representation layer hosts ec software of up to 12 different device classes . on this layer",
    "it must be possible to combine modules written both in pascal and c because ec software for a number of device classes can not be converted at the same time .",
    "combining pascal and c modules means that they have to be linked together . in this case",
    "identical procedure calling mechanisms have to be ensured .",
    "p2c translates routine parameters into a structure that contains a pure c function pointer and a `` static link '' , a pointer to the parent procedure s locals .",
    "this structure is passed to the called function .",
    "both of our compilers , the pascal as well as the c compiler , need plain c function pointers .",
    "the option to force p2c to use this concept is available but it does not work .",
    "pascal can handle conformant array routine parameters defined as    ....",
    "f(a : array [ lo .. hi : integer ] of mytype ) ; ....    by syntactically passing the array as actual parameter only :    ....      var x : array [ 7 .. 13 ] of mytype ;      f(x ) ; ....    on calling the routine , the array , or its address in case of a `` parameter , as well as the lower and upper limit of the array are pushed onto the stack .",
    "thus the array bounds may be checked by the called routine .",
    "p2c generates c code where the routine is declared and called with three parameters explicitly .",
    "the order the parameters are pushed onto the stack differs from that of the pascal compiler .",
    "the converted software is no final product .",
    "it has to be maintained for changed or extended future requirements .",
    "therefore readable and comprehensible code is indispensable . to achieve this sufficient work has to be invested into simplifying and refurbishing the plain c code produced by p2c and the perl scripts .",
    "pascal supports nesting of routines .",
    "the parent routine s local variables lie in the scope of the nested routine .",
    "c does not provide this concept .",
    "so p2c combines the parent routine s locals to a single structure and adds an additional link parameter to the sub - routine s parameter list that points to this structure thus allowing the sub - routine to access its parents variables .",
    "c code designed like this looks somewhat odd .",
    "pascal provides the `` statement to abbreviate the notation for references to fields of structured variables .",
    "....      with struc.field do subfield : = 1 ; ....    p2c creates a pointer for every `` statement with generated names `` , `` , `` , etc .  to access the field of a structure .    ....",
    "t_field * with = & struc.field ;      with->subfield = 1 ; ....    often there is no explicit type for the field the `` statement references . in those cases",
    "p2c needs to declare an additional pointer type first ( `` ) before it can define the pointer itself .",
    "these constructs are hardly found in common c programs as well .",
    "pascal allows to define an array of structures within one statement .",
    "a variable definition looks like this :    ....      var x : array [ 1 .. 7 ] of                record i : integer ; c : char end ; ....    although c supports a corresponding construct , p2c declares a structured type before it defines the array .    ....",
    "typedef struct _",
    "rec_x { int i ; char c } _",
    "rec_x ;      _ rec_x x[7 ] ; ....    to do so p2c must generate a name for the structured type , which is `` where `` is the name of the array .",
    "we encountered only two substantial p2c errors not mentioned in the p2c manual .",
    "both of them are very difficult to detect since the compiler does not report an error . overlooking them during the manual interaction",
    "means they occur during the runtime of the software where they are moreover hard to debug .",
    "\\1 . in some cases",
    "p2c translates a pascal 32 bit wide unsigned integer type    ....      type uns_long = 0 .. 16#ffffffff ;           mytype = uns_long ; ....    into a single c character type .    ....      typedef char mytype ; ....    the error occurs only unfrequently .",
    "unfortunately we were not able to reproduce the circumstances of its occurrence .",
    "the pascal pointer `` should point to a 16 bit wide type , e.g.  a hardware register , that has an offset of 4 bytes to a base address `` .    ....      type uw_p = ^uns_word ;      var   ptr : uw_p ;           addr : uns_long ;      ptr : = loophole(uw_p , addr + 4 ) ; ....    in rare cases",
    "p2c translates the pointer assignment to    ....      ptr = ( uns_word*)((uns_long*)addr + 4 ) ; ....    which results in a miscalculated pointer value .",
    "the expression `` type - casts `` to a pointer to a 32 bit type and thus adding 4@xmath04 = 16 bytes to the base address instead of 4 .",
    "unlike c pascal identifiers are case insensitive .",
    "p2c takes the first occurence of an identifier to determine the notation of all subsequent occurences .",
    "mostly these notations do not conform to our style guide . to force the notation of identifiers according to the style guide , we developed some perl scripts that do most of the job .",
    "a perl script recognizes expressions for instance like    ....      # define the_answer 42      typedef struct my_type { ... } my_type ; ....    and suits the identifiers accordingly ( getting `` and `` ) .    to handle more complex constructs a parser - like script would be required .",
    "this is not implemented yet .",
    "thus manual modifications are neccessary whereby each identifier has to be adjusted only once .",
    "all changes of identifiers in the software of one device class are then stored as key value pairs in a device class specific local data base ( db ) .",
    "the pairs describe the translation from the old into the new style guide conform notation . the creation and completion of the local db is done by another perl script .",
    "a third script is used to apply the translations stored in the local db to all identifiers in all files of a device class .",
    "additionally a global db is used which applies the translation of the identifiers of the system interface .",
    "meanwhile ec software for 15 different device classes has been converted .",
    "devices are operated with the converted software since more than 6 months .",
    "some of them even in therapy operation @xcite .",
    "apart from teething troubles in the beginning of the conversion process the software has showed good quality and bug fixing is an amazingly rare necessity .      to estimate the manual interaction effort to convert the software for one device class the process can be split into 4 phases .",
    "the outcome is the following distribution :    [ cols= \" < , < , < \" , ]     phase 2 is neccessary since some manual interactions are better done before using the perl scripts .",
    "although 1 and 3 are the `` automatic '' phases they also need manual actions , particularly phase 3 . with more experience the percentage of phase 4 increases but the overall conversion time decreases .    on an average ec software for one device class consist of 2200 loc .",
    "its conversion requires us about 2 person - weeks . to convert the whole ec software consisting of 170000 loc we will need approximatly 39 person - months or 3.25 person - years .    without the help of p2c and perl scripts we roughly estimate twice to four times the effort .",
    "there was only one attempt to convert a device class completely manually .",
    "balzert @xcite states that software _ development _ results in 350 loc per person - month .",
    "given this our method is 2 to 4 times faster than a pure manual conversion and more than 10 times faster than a redevelopment .",
    "using p2c and perl scripts converting ec software from pascal to c is feasible without major problems . in spite of the automation tools there is a lot of manual interaction left over until c software for a device class is ready to be released .",
    "our method allows us to convert ec software in reasonable time .",
    "entirely re - engineering the ec software would have exceeded our manpower capacity excessively .",
    "with ec software converted to c we are well - prepared to take the next step to c++ ( or java ) . it should be possible at least on the device representation layer to re - use the c functions , which are usually straight forward , as methods of classes in c++ .",
    "the use of c++ on the real - time layer has to be investigated , particularly with regard to the highly demanding 50hz linear accelerator operation .",
    "thanks to peter kainberger for all the perl scripts , and to him , gudrun schwarz , and regine pfeil for contributions to the cookbook .",
    "l. hechler , p. kainberger , g. schwarz , `` p2c - umstellung der gertesoftware von pascal nach c / c++ '' , accelerator controls documentation u - gsw-08 , gsi , darmstadt , november 2000 , http://bel.gsi.de/mk/sty/p2c.html ."
  ],
  "abstract_text": [
    "<S> the equipment control ( ec ) software of the gsi accelerators has been written entirely in pascal . </S>",
    "<S> modern software development is based on c++ or java . to be prepared for the future </S>",
    "<S> , we decided to convert the ec software from pascal to c in a first step . </S>",
    "<S> considering the large amount of software , this is done automatically as far as possible . </S>",
    "<S> the paper describes our experiences gained using a pascal to c translator , perl scripts , and , of course , some manual interaction . </S>"
  ]
}