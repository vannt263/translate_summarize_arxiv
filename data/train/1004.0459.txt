{
  "article_text": [
    "some techniques for hiding data in executables are already proposed ( e.g. , shin et al @xcite ) . in this paper",
    "we introduce a very simple technique to hide secret message bits inside source codes as well .",
    "we describe our steganographic technique by hiding inside html source as cover text , but this can be easily extended to any case - insensitive language source codes .",
    "html tags are basically directives to the browser and they carry information regarding how to structure and display the data on a web page .",
    "they are not case sensitive , so tags in either case ( or mixed case ) are interpreted by the browser in the same manner ( e.g. , `` @xmath0 '' and `` @xmath1 '' refers to the same thing ) .",
    "hence , there is a redundancy and we can exploit this redundancy . to embed secret message bits into html ,",
    "if the cases of the tag alphabets in html cover text are accordingly manipulated , then this tampering of the cover text will be ignored by the browser and hence it will be imperceptible to the user , since there will not be any visible difference in the web page , hence there will not be any suspect for it as well . also , when the web page is displayed in the browser , only the text contents are displayed , not the tags ( those can only be seen when the user does ` view source ' ) .",
    "hence , the secret messages will be kind of hidden to user .",
    "both redundancy and imperceptibility conditions for data hiding are met , we use these to embed data in html text .",
    "if we do not tamper the html text data that is to be displayed by the browser as web page ( this html cover text is analogical to the cover image , when thought in terms of steganographic techniques in images @xcite ) , the user will not even suspect about hidden data in text .",
    "we shall only change the case of every character within these html tags ( elements ) in accordance with the secret message bits that we want to embed inside the html web page .",
    "if we think of the browser interpreter as a function , @xmath2 we see that it is non - injective , i.e. , not one to one , since @xmath3 whenever @xmath4 , @xmath5 and @xmath6",
    ". the extraction process of the embedded message will also be very simple , one needs to just do ` view source ' and observe the case - patterns of the text within tags and can readily extract the secret message ( and see the unseen ) , while the others will not know anything .",
    "the length ( in bits ) of the secret message to be embedded will be upper - limited by the sum of size of text inside html tags ( here we do nt consider attribute values for data embedding . in case",
    "we consider attribute values for data embedding , we need to be more careful , since for some tags we should think of case - sensitivity , e.g. @xmath7a href=``link.html''@xmath8 , since link file name may be case - sensitive on some systems , whereas , attributes such as @xmath7h2 align=``center''@xmath8 is safe ) .",
    "if less numbers of bits to be embedded , we can embed the information inside header tag specifying the length of embedded data ( e.g. ` @xmath7header @xmath9 ' if the length of secret data to be embedded is @xmath10 bits ) that will not be shown in the browser ( optionally we can encrypt this integer value with some private key ) . in order to guarantee robustness of this very simple algorithm",
    "one may use some simple encryption on the data to be embedded .",
    "the algorithm for embedding the secret message inside the html cover text is very simple and straight - forward .",
    "first , we need to separate out the characters from the cover text that will be candidates for embedding , these are the case - insensitive text characters inside html tags . figure 2 shows a very simplified automata for this purpose .",
    "we define the following functions before describing the algorithm :    * @xmath11 is defined by , + @xmath12 where @xmath13 * similarly , @xmath14 is defined by , + @xmath15 where @xmath16    here the ascii value of ` a ' is @xmath17 and that of ` a ' is @xmath18 , with a difference of @xmath19 .",
    "it s easy to see that if the domain @xmath20 , then + @xmath21 and @xmath22 , implies that @xmath23 .",
    "now , we want to embed secret data bits @xmath24 inside the case - insensitive text inside the html tags . if @xmath25 denotes the sequence of characters inside the html tags in cover text ( input html ) .",
    "a character @xmath26 is a candidate for hiding a secret message bit iff it is an alphabet .",
    "if we want to hide the @xmath27 secret message bit @xmath28 inside the cover text character @xmath26 , the corresponding stego - text will be defined by the following function @xmath29 :    @xmath30 , i.e. if isalphabet(@xmath26 ) is true ,    @xmath31 ,    hence , we have the following : @xmath32    number of bits ( @xmath33 ) of the secret message embedded into the html cover text must also be embedded inside the html ( e.g. , in header element ) . the figure 1 and the algorithm [ alg : embed ] together",
    "explain this embedding algorithm .",
    "[ fig : f1 ]     [ h ]    search for all the html tags present in the html cover text and extract all the characters @xmath25 from inside those tags using the dfa described in the figure 2 . embed the secret message length @xmath33 inside html header in the stego text .",
    "@xmath37 . break .",
    "the algorithm for extraction of the secret message bits will be even more simple . like embedding process , we must first seperate out the candidate text ( text within tags ) that were chosen for embedding secret message bits .",
    "also , we must extract the number of bits ( @xmath33 ) embedded into this page ( e.g. , from the header element ) .",
    "one has to use ` view source ' to find out the stego - text .",
    "now , we have @xmath38 .",
    "if @xmath39 i.e. , an alphabet , then only it is a candidate for decoding and to extract @xmath40 from @xmath41 , we use the following logic : + @xmath42    repeat the above algorithm @xmath43 , to extract all the hidden bits . the figure 2 and the algorithm [ alg : extract ] together explain this embedding algorithm .",
    "[ fig : f2 ]     [ fig : htmlsrc - cover ]     [ fig : htmlsrc - stego ]     [ fig : html ]   stego html , title=\"fig:\",width=529,height=680 ]    [ h ]    search for all the html tags present in the html stego text and extract all the characters @xmath44 from inside those tags using the dfa described in the figure 2 . extract the secret message length @xmath33 from inside html header in the stego text .",
    "@xmath34 . @xmath45 . @xmath36 . @xmath46 .",
    "@xmath36 . break .",
    "[ fig : graph ]     figures 3 , 4 and 5 show an example of how our method works , while figure 6 shows the comparison of the histogram of the cover html and stego html in terms of the ( ascii ) character frequencies .",
    "classical image hiding techniques like lsb data hiding technique always introduce some ( visible ) distortion @xcite in the stego image ( that can be reduced using techniques @xcite ) , but our data hiding technique in html is novel in the sense that it introduces no visible distortion in stego text at all .",
    "in this paper we presented an algorithm for hiding data in html text .",
    "this technique can be extended to any case - insensitive language and data can be embedded in the similar manner , e.g. , we can embed secret message bits even in source codes written in languages like basic or pascal or in the case - insensitive sections ( e.g. comments ) in c like case - sensitive languages .",
    "data hiding methods in images results distorted stego - images , but the html data hiding technique does not create any sort of visible distortion in the stego html text .",
    "f. battisti , m. carli , a. neri , k. egiaziarian , `` a generalized fibonacci lsb data hiding technique '' , 3rd international conference on computers and devices for communication ( codec- 06 ) tea , institute of radio physics and electronics , university of calcutta , december 18 - 20 , 2006 .",
    "sandipan dey , ajith abraham and sugata sanyal `` an lsb data hiding technique using natural numbers '' , ieee third international conference on intelligent information hiding and multimedia signal processing , iihmsp 2007 , nov 26 - 28 , 2007 , kaohsiung city , taiwan , ieee computer society press , usa , isbn 0 - 7695 - 2994 - 1 , pp .",
    "473 - 476 , 2007 .",
    "sandipan dey , ajith abraham and sugata sanyal `` an lsb data hiding technique using prime numbers '' , third international symposium on information assurance and security , august 29 - 31 , 2007 , manchester , united kingdom , ieee computer society press , usa , isbn 0 - 7695 - 2876 - 7 , pp .",
    "101 - 106 , 2007 ."
  ],
  "abstract_text": [
    "<S> in this paper , we suggest a novel data hiding technique in an html web page . </S>",
    "<S> html tags are case insensitive and hence an alphabet in lowercase and one in uppercase present inside an html tag are interpreted in the same manner by the browser , i.e. , change in case in an web page is imperceptible to the browser . </S>",
    "<S> we basically exploit this redundancy and use it to embed secret data inside an web page , with no changes visible to the user of the web page , so that he can not even suspect about the data hiding . </S>",
    "<S> the embedded data can be recovered by viewing the source of the html page . </S>",
    "<S> this technique can easily be extended to embed secret message inside any piece of source - code where the standard interpreter of that language is case - insensitive . </S>"
  ]
}