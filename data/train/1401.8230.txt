{
  "article_text": [
    "rapid development of computers and computing methods causes new requirements to computational algorithms .",
    "significant difference in the performance of computational systems using single and double precision causes search for new methods of optimization of existing algorithms .",
    "one of the most popular classes of algorithms is pseudorandom number generators ( prngs ) with the performance and the statistical properties , which conversely affect on many numerical methods .",
    "general purpose computing on graphics processing units is an example of an alternative computing platform with special architecture , which has become widespread in recent years . a characteristic feature of such hardware is significantly different performance in applications with single and double precision .",
    "the architecture of modern gpus is designed to obtain the best performance in floating point operations with single precision .",
    "top - end gpus have performance on the double precision arithmetics as a half of the performance with single precision @xcite . at the same time",
    "middle and low - end gpus show much poorer performance in double precision floating point operations .",
    "in particular , the ratio of single - to - double precision performance even reaches 24 ( for nvidia tesla k10 gpu ) .",
    "a problem of pseudorandom numbers ( prns ) generation with extended precision from several prns with reduced precision is not a new problem . in particular , it was discussed in the papers @xcite , @xcite .",
    "however , insufficient attention was paid to the question about the distribution of resulting prns .    in this paper",
    "we propose a general method for generation of uniformly distributed prns with extended precision , which is based on a regular pseudorandom number generation algorithm .",
    "the key feature of the proposed method is to strictly preserve the uniformity of the distribution of prns with extended precision .",
    "according to the ieee 754 standard the fractional part of floating point double precision number is stored in the lowest 52 bits ( in the lowest 23 bits for single precision number ) .",
    "so , it is possible to generate prns in interval @xmath0 by combining two uniformly distributed 32-bit unsigned integer prns or with two prns with single precision .",
    "the simplest way to construct prn @xmath1 with extended precision is the following : @xmath2 where @xmath3 and @xmath4 are initial prns with @xmath5-bit precision , @xmath6 . obviously , @xmath1 is @xmath7-bit precision floating point number .",
    "if computational unit supports the ieee 754 double precision arithmetics and @xmath8 , then @xmath1 can be reduced to a full double precision number .",
    "let us discuss the general case where @xmath9 $ ] and @xmath10 $ ] are initial prns . the difference in the range of values may be caused by different prngs producing @xmath3 and @xmath4 numbers .",
    "the probability density functions ( pdf ) @xmath11 and @xmath12 for @xmath3 and @xmath4 , correspondingly , are constant : @xmath13    to determine the interval where @xmath1 is uniformly distributed ( the pdf @xmath14 is constant ) we study intersections of lines @xmath15 with the rectangular area @xmath9 $ ] , @xmath10 $ ] .",
    "since the area corresponds to uniform probability , we have to select the intersections with equal lengths .",
    "taking into account that @xmath16 , we find the parallelogram bounded by the lines crossing points @xmath17 , @xmath18 and @xmath19 , @xmath20 ( the region @xmath21 on fig.1 ) .",
    "therefore , the pdf @xmath14 is constant only in the interval @xmath22.\\end{aligned}\\ ] ] in this regard , we propose accept - reject method to select @xmath23 pairs , which form @xmath1 and lie in the desired interval .",
    "the rejected values belong to intervals @xmath24 and @xmath25 .",
    ".,title=\"fig:\",scaledwidth=80.0% ] .,title=\"fig:\",scaledwidth=80.0% ]    in practice , @xmath26 and @xmath3 is discrete with the step @xmath27 , therefore the rejection area degenerates into the boundary points of @xmath3 . in this case",
    ", accept - reject condition can be formulated as follows : * if @xmath17 or @xmath19 then we drop such values and take next pair @xmath23*.    the further step is to map the interval @xmath28 to @xmath29 . for continuous variables @xmath30",
    "the algorithm for generation of prn with increased precision from two integer prns with lower precision is described below .",
    "@xmath31 0.2 cm @xmath32 @xmath33 @xmath34 0.1 cm @xmath35 0.2 cm @xmath36 0.4 cm @xmath37 0.5 cm @xmath38 @xmath39    0.5 cm here , @xmath40 and @xmath41 are the minimal and maximal values , which can be produced by initial prng , @xmath27 is a resolution parameter of initial prng ( see ( [ extendedprng ] ) ) .",
    "it should be noted that parameters @xmath42 and @xmath43 as well as the most part of @xmath44 are calculated during the compilation time , so they are constants in runtime .    considering production of the double precision prns from floating point prns with lower precision and the accept - reject condition , we must omit the digits outside the precision of @xmath3 . in this case , in order to include @xmath45 and exclude @xmath46 we must map @xmath47 , @xmath20 onto @xmath45 , and @xmath48 , @xmath18 onto @xmath49 , where @xmath50 marks the resulting precision .",
    "thus , eqn .",
    "( [ doubleconv ] ) can be substituted by @xmath51+x_2 - b_0 } { { \\textrm{trunc}}\\left[\\frac{a - a_0 - 2k}{k}\\right]+b - b_0 } ( 1-k').\\end{aligned}\\ ] ] here @xmath52 $ ] is rounding function , returning the nearest integer value that is not larger in magnitude than @xmath53 . due to the fact that the function @xmath52 $ ]",
    "is well optimized on the gpu as well as the fact that most of the arithmetic operations in the latter expression are performed while compilation , eqn .",
    "( [ doublefloatconvgen ] ) is not resource - intensive .    in case of one production prng in the interval",
    "@xmath54 $ ] : @xmath55+x_2 - 1\\right ) } { { \\textrm{trunc}}\\left[\\frac{1}{k}\\right]-2-k } , \\end{aligned}\\ ] ] where @xmath56 and @xmath57 are rejected .    in some cases",
    "one needs a generator , which does not produce zero values ( for example , if the prn will be used under logarithm and manual limit of the divergence is required ) .",
    "a common well - known method is to use @xmath58 instead of @xmath1 .",
    "certainly , the keystone of the proposed method is the assumption that the original random numbers , from which a new random number is constructed , are independent and uniformly distributed . in this regard",
    ", it makes sense to use only generators which have good statistical properties ( high - level ranlux , mrg32k3a , ranmar , etc . )",
    "we propose a general method to produce uniformly distributed prns with extended precision by combining two prns with lower precision . to ensure the resulting distribution is uniform the accept - reject method is used .",
    "this scheme can be interest for the computational facilities with significantly different performance of single and double precision arithmetics .",
    "gpu is a popular class of such hardware .",
    "the proposed scheme can be generalized for the case when it is necessary to combine more then two prns to obtain random numbers with greater precision .",
    "however , statistical impurities of initial prngs can destroy the assumed uniform distribution of resulting prns .",
    "this subject requires additional study for the specific prng ."
  ],
  "abstract_text": [
    "<S> a general method to produce uniformly distributed pseudorandom numbers with extended precision by combining two pseudorandom numbers with lower precision is proposed . in particular , this method can be used for pseudorandom number generation with extended precision on graphics processing units ( gpu ) , where the performance of single and double precision operations can vary significantly .    _ </S>",
    "<S> keywords : _ pseudorandom number generators ; extended precision ; monte carlo simulations </S>"
  ]
}