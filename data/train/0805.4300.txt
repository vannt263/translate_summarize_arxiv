{
  "article_text": [
    "this paper deals with explicit constructions of balanced families of perfect hash functions .",
    "the topic of perfect hash functions has been widely studied under the more general framework of @xmath10-restriction problems ( see , e.g. , @xcite,@xcite ) .",
    "these problems have an existential nature of requiring a set of conditions to hold at least once for any choice of @xmath10 elements out of the problem domain .",
    "we generalize the definition of perfect hash functions , and introduce a new , simple , and yet useful notion which we call balanced families of perfect hash functions .",
    "the purpose of our new definition is to incorporate more structure into the constructions .",
    "our explicit constructions together with the method of color - coding from @xcite are applied for problems of approximating the number of times that some fixed subgraph appears within a large graph .",
    "we focus on counting simple paths and simple cycles .",
    "recently , the method of color - coding has found interesting applications in computational biology ( @xcite,@xcite,@xcite,@xcite ) , specifically in detecting signaling pathways within protein interaction .",
    "this problem is formalized using an undirected edge - weighted graph , where the task is to find a minimum weight path of length @xmath10 .",
    "the application of our results in this case is for approximating deterministically the number of minimum weight paths of length @xmath10 .",
    "* perfect hash functions . *",
    "an @xmath3-family of perfect hash functions is a family of functions from @xmath0 $ ] to @xmath1 $ ] such that for every @xmath4 $ ] , @xmath5 , there exists a function in the family that is 1 - 1 on @xmath6 .",
    "there is an extensive literature dealing with explicit constructions of perfect hash functions .",
    "the construction described in @xcite ( following @xcite and @xcite ) is of size @xmath17 .",
    "the best known explicit construction is of size @xmath18 , which closely matches the known lower bound of @xmath19 @xcite .    *",
    "finding and counting paths and cycles . *",
    "the foundations for the graph algorithms presented in this paper have been laid in @xcite .",
    "two main randomized algorithms are presented there , as follows .",
    "a simple directed or undirected path of length @xmath20 in a graph @xmath21 that contains such a path can be found in @xmath22 expected time in the directed case and in @xmath23 expected time in the undirected case . a simple directed or undirected cycle of size @xmath10 in a graph @xmath21 that contains such a cycle can be found in either @xmath24 or @xmath25 expected time , where @xmath26 is the exponent of matrix multiplication .",
    "the derandomization of these algorithms incur an extra @xmath27 factor . as for the case of even cycles , it is shown in @xcite that for every fixed @xmath28",
    ", there is an @xmath29 algorithm for finding a simple cycle of size @xmath30 in an undirected graph .",
    "improved algorithms for detecting given length cycles have been presented in @xcite and @xcite .",
    "an interesting result from @xcite , related to the questions addressed in the present paper , is an @xmath31 algorithm for counting the number of cycles of size at most @xmath32 .",
    "flum and grohe proved that the problem of counting _ exactly _ the number of paths and cycles of length @xmath10 in both directed and undirected graphs , parameterized by @xmath10 , is @xmath33$]-complete @xcite .",
    "their result implies that most likely there is no @xmath34-algorithm for counting the precise number of paths or cycles of length @xmath10 in a graph of size @xmath16 for any computable function @xmath35 and constant @xmath36 .",
    "this suggests the problem of approximating these quantities .",
    "arvind and raman obtained a _",
    "randomized _ fixed - parameter tractable algorithm to approximately count the number of copies of a fixed subgraph with bounded treewidth within a large graph @xcite .",
    "we settle in the affirmative the open question they raise concerning the existence of a _ deterministic _ approximate counting algorithm for this problem . for simplicity , we give algorithms for approximately counting paths and cycles .",
    "these results can be easily extended to the problem of approximately counting bounded treewidth subgraphs , combining the same approach with the method of @xcite .",
    "the main new ingredient in our deterministic algorithms is the application of balanced families of perfect hash functions- a combinatorial notion introduced here which , while simple , appears to be very useful .    * balanced families of perfect hash functions .",
    "* we say that a family of functions from @xmath0 $ ] to @xmath1 $ ] is a @xmath2-balanced @xmath3-family of perfect hash functions if for every @xmath37 $ ] , @xmath5 , the number of functions that are 1 - 1 on @xmath6 is between @xmath7 and @xmath8 for some constant @xmath9 .",
    "balanced families of perfect hash functions are a natural generalization of the usual concept of perfect hash functions . to assist with our explicit constructions ,",
    "we define also the even more generalized notion of balanced splitters .",
    "( see section [ sec : composing ] for the definition .",
    "this is a generalization of an ordinary splitter defined in @xcite . ) * our results . *",
    "the main focus of the paper is on explicit constructions of balanced families of perfect hash functions and their applications .",
    "first , we give non - constructive upper bounds on the size of different types of balanced splitters .",
    "then , we compare these bounds with those achieved by constructive algorithms .",
    "our main result is an explicit construction , for every @xmath38 , of a @xmath2-balanced @xmath3-family of perfect hash functions of size @xmath39 .",
    "the running time of the procedure that provides the construction is @xmath40 .",
    "constructions of balanced families of perfect hash functions can be applied to various counting problems in graphs . in particular , we describe deterministic algorithms that approximate the number of times that a small subgraph appears within a large graph .",
    "the approximation is always up to some multiplicative factor , that can be made arbitrarily close to @xmath11 . for any @xmath38",
    ", the number of simple paths of length @xmath20 in a graph @xmath21 can be approximated up to a multiplicative factor of @xmath2 in time @xmath41 .",
    "the number of simple cycles of size @xmath10 can be approximated up to a multiplicative factor of @xmath2 in time @xmath42 .",
    "* techniques .",
    "* we use probabilistic arguments in order to prove the existence of different types of small size balanced splitters ( whose precise definition is given in the next section ) . to construct a balanced splitter ,",
    "a natural randomized algorithm is to choose a large enough number of independent random functions .",
    "we show that in some cases , the method of conditional probabilities , when applied on a proper choice of a potential function , can derandomize this process in an efficient way .",
    "constructions of small probability spaces that admit @xmath10-wise independent random variables are also a natural tool for achieving good splitting properties .",
    "the use of error correcting codes is shown to be useful when we want to find a family of functions from @xmath0 $ ] to @xmath43 $ ] , where @xmath44 is much bigger than @xmath45 , such that for every @xmath4 $ ] , @xmath5 , almost all of the functions should be 1 - 1 on @xmath6 .",
    "balanced splitters can be composed in different ways and our main construction is achieved by composing three types of splitters .",
    "we apply the explicit constructions of balanced families of perfect hash functions together with the color - coding technique to get our approximate counting algorithms .",
    "in this section we formally define the new notions of balanced families of perfect hash functions and balanced splitters . here",
    "are a few basics first .",
    "denote by @xmath0 $ ] the set @xmath46 . for any @xmath10 , @xmath47 , the family of @xmath10-sized subsets of @xmath0 $ ]",
    "is denoted by @xmath48}{k}$ ] .",
    "we denote by @xmath49 the unique integer @xmath50 for which @xmath51 , for some integer @xmath52 .",
    "we now introduce the new notion of balanced families of perfect hash functions .",
    "suppose that @xmath47 and @xmath53 .",
    "we say that a family of functions from @xmath0 $ ] to @xmath1 $ ] is a @xmath2-balanced @xmath3-family of perfect hash functions if there exists a constant real number @xmath54 , such that for every @xmath55}{k}$ ] , the number of functions that are 1 - 1 on @xmath6 , which we denote by @xmath56 , satisfies the relation @xmath57 .",
    "the following definition generalizes both the last definition and the definition of a splitter from @xcite .",
    "suppose that @xmath47 and @xmath53 , and let @xmath58 be a family of functions from @xmath0 $ ] to @xmath43 $ ] .",
    "for a set @xmath55}{k}$ ] we denote by @xmath59 the number of functions @xmath60 that split @xmath6 into equal - sized parts @xmath61 , @xmath62 . in case @xmath44",
    "does not divide @xmath10 we separate between two cases .",
    "if @xmath63 , then @xmath59 is defined to be the number of functions that are 1 - 1 on @xmath6 .",
    "otherwise , @xmath64 and we require the first @xmath65 parts to be of size @xmath66 and the remaining parts to be of size @xmath67 . we say that @xmath58 is a @xmath2-balanced @xmath68-splitter if there exists a constant real number @xmath54 , such that for every @xmath69}{k}$ ] we have @xmath70 .",
    "the definitions of balanced families of perfect hash functions and balanced splitters given above enable us to state the following easy composition lemmas .",
    "[ composition1 ] for any @xmath71 , let @xmath58 be an explicit @xmath2-balanced @xmath68-splitter of size @xmath72 and let @xmath73 be an explicit @xmath74-balanced @xmath75-family of perfect hash functions of size @xmath76 . we can use @xmath58 and @xmath73 to get an explicit @xmath77-balanced @xmath3-family of perfect hash functions of size @xmath78 .",
    "we compose every function of @xmath58 with every function of @xmath73 and get the needed result .",
    "[ composition2 ] for any @xmath64 , let @xmath58 be an explicit @xmath2-balanced @xmath68-splitter of size @xmath72 . for every @xmath79 , @xmath62 , let @xmath80 be an explicit @xmath81-balanced @xmath82-family of perfect hash functions of size @xmath83 , where @xmath84 for every @xmath85 and @xmath86 otherwise .",
    "we can use these constructions to get an explicit @xmath87-balanced @xmath3-family of perfect hash functions of size @xmath88 .",
    "we divide the set @xmath1 $ ] into @xmath44 disjoint intervals @xmath89 , where the size of @xmath90 is @xmath91 for every @xmath62 .",
    "we think of @xmath80 as a family of functions from @xmath0 $ ] to @xmath90 . for every combination of @xmath92 and @xmath93 , @xmath62",
    ", we create a new function that maps an element @xmath94 $ ] to @xmath95 .",
    "we will use the following two claims : a variant of the chernoff bound ( c.f .",
    ", e.g. , @xcite ) and robbins formula @xcite ( a tight version of stirling s formula ) .",
    "[ chernoff ] let @xmath96 be the sum of mutually independent indicator random variables , @xmath97 $ ] . for all @xmath98 , @xmath99 > 1 - 2 e^{-(\\delta-1)^2\\mu/8}.\\ ] ]    [ robbins ] for every integer @xmath100 , @xmath101    now we state the results for @xmath2-balanced @xmath68-splitters of the three types : @xmath102 , @xmath103 and @xmath104 .",
    "[ prob1 ] for any @xmath38 , there exists a @xmath2-balanced @xmath3-family of perfect hash functions of size @xmath105 .",
    "( sketch ) set @xmath106 and @xmath107 .",
    "we choose @xmath76 independent random functions . for a specific set @xmath69}{k}$ ] , the expected number of functions that are 1 - 1 on @xmath6 is exactly @xmath108 . by the chernoff bound , the probability that for at least one set @xmath55}{k}$ ]",
    ", the number of functions that are 1 - 1 on @xmath6 will not be as needed is at most @xmath109    [ prob2 ] for any @xmath71 and @xmath38 , there exists a @xmath2-balanced @xmath68-splitter of size @xmath110 .",
    "( sketch ) we set @xmath111 and @xmath112 . using robbins formula , we get @xmath113 we choose @xmath76 independent random functions and proceed as in the proof of theorem [ prob1 ] .    for the case @xmath64 , the probabilistic arguments from @xcite can be generalized to prove existence of balanced @xmath68-splitters .",
    "here we focus on the special case of balanced @xmath114-splitters , which will be of interest later .",
    "[ prob3 ] for any @xmath28 and @xmath38 , there exists a @xmath2-balanced @xmath114-splitter of size @xmath115 .",
    "( sketch ) set @xmath116 , where @xmath117 denotes the probability to get the needed split in a random function .",
    "if follows easily from robbins formula that @xmath118 .",
    "we choose @xmath76 independent random functions and proceed as in the proof of theorem [ prob1 ] .",
    "in this paper , we use the term explicit construction for an algorithm that lists all the elements of the required family of functions in time which is polynomial in the total size of the functions . for a discussion on other definitions for this term ,",
    "the reader is referred to @xcite .",
    "we state our results for @xmath2-balanced @xmath68-splitters of the three types : @xmath102 , @xmath103 and @xmath104 .",
    "[ explicit1 ] for any @xmath38 , a @xmath2-balanced @xmath3-family of perfect hash functions of size @xmath119 can be constructed deterministically within time @xmath120 .",
    "we set @xmath106 and @xmath121 .",
    "denote @xmath122 , so obviously @xmath123 . consider a choice of @xmath76 independent random functions from @xmath0 $ ] to @xmath1 $ ] .",
    "this choice will be derandomized in the course of the algorithm . for every @xmath69}{k}$ ] , we define @xmath124 , where @xmath125 is the indicator random variable that is equal to @xmath11 iff the @xmath126th function is 1 - 1 on @xmath6 .",
    "consider the following potential function : @xmath127}{k } } e^{\\lambda(x_s - pm)}+e^{\\lambda(pm - x_s)}.\\ ] ] its expectation can be calculated as follows : @xmath128 = \\binom{n}{k } ( e^{-\\lambda pm } \\prod_{i=1}^me[e^{\\lambda x_{s , i } } ] + e^{\\lambda pm } \\prod_{i=1}^me[e^{-\\lambda x_{s , i } } ] ) = \\ ] ] @xmath129^m + e^{\\lambda pm } [ p e^{-\\lambda } + ( 1-p ) ] ^m).\\ ] ]    we now give an upper bound for @xmath130 $ ] .",
    "since @xmath131 for all @xmath132 and @xmath133 for all @xmath134 , we get that @xmath135 .",
    "define @xmath136 , that is @xmath137 .",
    "thus @xmath138 .",
    "this implies that @xmath128 \\leq n^k ( ( \\frac{e^{\\epsilon}}{1+\\epsilon})^{pm } + e^{\\lambda^2 pm/2 } ) .\\ ] ] since @xmath139 for all @xmath140 , we have that @xmath141 .",
    "we conclude that @xmath128 \\leq 2 n^k e^{\\lambda^2 pm }",
    "\\leq e^{2(k \\ln n + 1)}.\\ ] ]    we now describe a deterministic algorithm for finding @xmath76 functions , so that @xmath130 $ ] will still obey the last upper bound .",
    "this is performed using the method of conditional probabilities ( c.f .",
    ", e.g. , @xcite , chapter 15 ) .",
    "the algorithm will have @xmath76 phases , where each phase will consist of @xmath16 steps . in step @xmath126 of phase @xmath79 the algorithm will determine the @xmath126th value of the @xmath79th function .",
    "out of the @xmath10 possible values , we greedily choose the value that will decrease @xmath130 $ ] as much as possible .",
    "we note that at any specific step of the algorithm , the exact value of the conditional expectation of the potential function can be easily computed in time @xmath142 .",
    "after all the @xmath76 functions have been determined , every set @xmath55}{k}$ ] satisfies the following : @xmath143 this implies that @xmath144 recall that @xmath122 , and therefore @xmath145 plugging in the values of @xmath76 and @xmath117 we get that @xmath146 using the fact that @xmath147 for all @xmath148 , we get the desired result @xmath149    [ explicit2 ] for any @xmath38 , a @xmath2-balanced @xmath150-splitter of size @xmath151 can be constructed in time @xmath152 .",
    "denote @xmath153 .",
    "consider an explicit construction of an error correcting code with @xmath16 codewords over alphabet @xmath154 $ ] whose normalized hamming distance is at least @xmath155 .",
    "such explicit codes of length @xmath156 exist @xcite .",
    "now let every index of the code corresponds to a function from @xmath0 $ ] to @xmath154 $ ] .",
    "if we denote by @xmath76 the length of the code , which is in fact the size of the splitter , then for every @xmath69}{k}$ ] , the number of good splits is at least @xmath157 where the last inequality follows from the fact that @xmath158 for all @xmath148 .    for our next construction",
    "we use small probability spaces that support a sequence of almost @xmath10-size independent random variables .",
    "a sequence @xmath159 of random boolean variables is @xmath160-independent if for any @xmath10 positions @xmath161 and any @xmath10 bits @xmath162 we have @xmath163 - 2^{-k}| < \\epsilon.\\ ] ] it is known ( @xcite,@xcite,@xcite ) that sample spaces of size @xmath164 that support @xmath16 random variables that are @xmath160-independent can be constructed in time @xmath165 .    [ explicit3 ] for any @xmath166 and @xmath38 , a @xmath2-balanced @xmath68-splitter of size @xmath167 can be constructed in time @xmath168 .",
    "we use an explicit probability space of size @xmath169 that supports @xmath170 random variables that are @xmath171-independent where @xmath172 .",
    "we attach @xmath173 random variables to each element of @xmath0 $ ] , thereby assigning it a value from @xmath174 $ ] . in case @xmath44",
    "is not a power of @xmath175 , all elements of @xmath174-[l]$ ] can be mapped to @xmath43 $ ] by some arbitrary fixed function .",
    "if follows from the construction that there exists a constant @xmath54 so that for every @xmath69}{k}$ ] , the number of good splits satisfies @xmath176    for any fixed @xmath177 , a @xmath178-balanced @xmath114-splitter of size @xmath17 can be constructed in time @xmath179 .",
    "setting @xmath180 in theorem [ explicit3 ] , we get that a @xmath2-balanced @xmath3-family of perfect hash functions of size @xmath181 can be constructed in time @xmath182 .",
    "note that if @xmath10 is small enough with respect to @xmath16 , say @xmath183 , then for any fixed @xmath38 , this already gives a family of functions of size polynomial in @xmath16 .",
    "we improve upon this last result in the following theorem , which is our main construction .",
    "[ explicit4 ] for @xmath38 , a @xmath2-balanced @xmath3-family of perfect hash functions of size @xmath184 can be constructed in time @xmath185 . in particular , for any fixed @xmath186 , the size is @xmath13 and the time is @xmath14 .",
    "( sketch ) denote @xmath187 , @xmath188 , @xmath189 , and @xmath190 .",
    "let @xmath58 be a @xmath191-balanced @xmath192-splitter of size @xmath193 constructed using theorem [ explicit3 ] .",
    "for every @xmath79 , @xmath62 , let @xmath194 be a @xmath195-balanced @xmath196-family of perfect hash functions of size @xmath197 constructed using theorem [ explicit1 ] , where @xmath84 for every @xmath85 and @xmath86 otherwise . using lemma [ composition2 ] for composing @xmath58 and @xmath198 , we get a @xmath199-balanced @xmath200-family @xmath201 of perfect hash functions .",
    "now let @xmath202 be a @xmath191-balanced @xmath203-splitter of size @xmath204 constructed using theorem [ explicit2 ] . using lemma [ composition1 ] for composing @xmath201 and @xmath202 , we get a @xmath2-balanced @xmath3-family of perfect hash functions , as needed .",
    "note that for calculating the size of each @xmath194 , we use the fact that @xmath205 for all @xmath140 , and get the following : @xmath206 the time needed to construct each @xmath194 is @xmath207 .",
    "the @xmath208 term is omitted in the final result , as it is negligible in respect to the other terms .",
    "we now state what it means for an algorithm to approximate a counting problem .",
    "we say that an algorithms approximates a counting problem by a multiplicative factor @xmath53 if for every input @xmath209 , the output @xmath210 of the algorithm satisfies @xmath211 , where @xmath212 is the exact output of the counting problem for input @xmath209 .",
    "the technique of color - coding is used for approximate counting of paths and cycles .",
    "let @xmath21 be a directed or undirected graph . in our algorithms we will use constructions of balanced @xmath213-families of perfect hash functions .",
    "each such function defines a coloring of the vertices of the graph .",
    "a path is said to be _ colorful _ if each vertex on it is colored by a distinct color .",
    "our goal is to count the exact number of colorful paths in each of these colorings .",
    "[ application1 ] for any @xmath38 , the number of simple ( directed or undirected ) paths of length @xmath20 in a ( directed or undirected ) graph @xmath21 can be approximated up to a multiplicative factor of @xmath2 in time @xmath214 .",
    "( sketch ) we use the @xmath2-balanced @xmath213-family of perfect hash functions constructed using theorem [ explicit4 ] .",
    "each function of the family defines a coloring of the vertices in @xmath10 colors .",
    "we know that there exists a constant @xmath9 , so that for each set @xmath215 of @xmath10 vertices , the number of functions that are 1 - 1 on @xmath6 is between @xmath7 and @xmath8 .",
    "the exact value of @xmath216 can be easily calculated in all of our explicit constructions .    for each coloring",
    ", we use a dynamic programming approach in order to calculate the exact number of colorful paths .",
    "we do this in @xmath10 phases . in the @xmath126th phase , for each vertex @xmath217 and for each subset @xmath218 of @xmath126 colors ,",
    "we calculate the number of colorful paths of length @xmath219 that end at @xmath220 and use the colors of @xmath221 .",
    "to do so , for every edge @xmath222 , we check whether it can be the last edge of a colorful path of length @xmath219 ending at either @xmath132 or @xmath220 .",
    "its contribution to the number of paths of length @xmath219 is calculated using our knowledge on the number of paths of length @xmath223 .",
    "the initialization of phase @xmath11 is easy and after performing phase @xmath10 we know the exact number of paths of length @xmath20 that end at each vertex @xmath217 .",
    "the time to process each coloring is therefore @xmath224 .",
    "we sum the results over all colorings and all ending vertices @xmath225 .",
    "the result is divided by @xmath216 . in case",
    "the graph is undirected , we further divide by @xmath175 .",
    "this is guaranteed to be the needed approximation .",
    "[ application2 ] for any @xmath38 , the number of simple ( directed or undirected ) cycles of size @xmath10 in a ( directed or undirected ) graph @xmath21 can be approximated up to a multiplicative factor of @xmath2 in time @xmath226 .",
    "( sketch ) we use the @xmath2-balanced @xmath213-family of perfect hash functions constructed using theorem [ explicit4 ] . for every set @xmath6 of @xmath10 vertices ,",
    "the number of functions that are 1 - 1 on @xmath6 is between @xmath7 and @xmath8 .",
    "every function defines a coloring and for each such coloring we proceed as follows . for every vertex @xmath227 we run the algorithm described in the proof of theorem [ application1 ] in order to calculate for each vertex",
    "@xmath217 the exact number of colorful paths of length @xmath20 from @xmath228 to @xmath220 . in case",
    "there is an edge @xmath229 that completes a cycle , we add the result to our count .",
    "we sum the results over all the colorings and all pairs of vertices @xmath228 and @xmath220 as described above .",
    "the result is divided by @xmath230 . in case",
    "the graph is undirected , we further divide by @xmath175",
    ". the needed approximation is achieved .    for any constant @xmath231",
    ", there is a deterministic polynomial time algorithm for approximating both the number of simple paths of length @xmath10 and the number of simple cycles of size @xmath10 for every @xmath15 in a graph with @xmath16 vertices , where the approximation is up to a multiplicative factor of @xmath232 .",
    "* an interesting open problem is whether for every fixed @xmath233 , there exists an explicit @xmath2-balanced @xmath3-family of perfect hash functions of size @xmath234 .",
    "the key ingredient needed is an improved construction of balanced @xmath114-splitters .",
    "such splitters can be applied successively to get the balanced @xmath235-splitter needed in theorem [ explicit4 ] .",
    "it seems that the constructions presented in @xcite could be good candidates for balanced @xmath114-splitters , although the fourier analysis in this case ( along the lines of @xcite ) seems elusive .",
    "* other algorithms from @xcite can be generalized to deal with counting problems .",
    "in particular it is possible to combine our approach here with the ideas of @xcite based on fast matrix multiplication in order to approximate the number of cycles of a given length . given a forest @xmath236 on @xmath10 vertices , the number of subgraphs of @xmath73 isomorphic to @xmath236 can be approximated using a recursive algorithm similar to the one in @xcite . for a weighted graph",
    ", we can approximate , for example , both the number of minimum ( maximum ) weight paths of length @xmath20 and the number of minimum ( maximum ) weight cycles of size @xmath10 .",
    "finally , all the results can be readily extended from paths and cycles to arbitrary small subgraphs of bounded tree - width .",
    "we omit the details . * in the definition of a balanced @xmath3-family of perfect hash functions , there is some constant @xmath9 , such that for every @xmath237 $ ] , @xmath5 , the number of functions that are 1 - 1 on @xmath6 is close to @xmath216 .",
    "we note that the value of @xmath216 need not be equal to the expected number of 1 - 1 functions on a set of size @xmath10 , for the case that the functions were chosen independently according to a uniform distribution .",
    "for example , the value of @xmath216 in the construction of theorem [ explicit4 ] is not even asymptotically equal to what one would expect in a uniform distribution .",
    "vikraman arvind and venkatesh raman .",
    "approximation algorithms for some parameterized counting problems . in prosenjit bose and pat morin , editors ,",
    "_ isaac _ , volume 2518 of _ lecture notes in computer science _ , pages 453464 .",
    "springer , 2002 .",
    "falk hffner , sebastian wernicke , and thomas zichner .",
    "algorithm engineering for color - coding to facilitate signaling pathway detection . in david sankoff ,",
    "lusheng wang , and francis chin , editors , _ proceedings of 5th asia - pacific bioinformatics conference , apbc 2007 , 15 - 17 january 2007 , hong kong , china _ , volume  5 of _ advances in bioinformatics and computational biology _ , pages 277286 .",
    "imperial college press , 2007 .",
    "raphael yuster and uri zwick .",
    "detecting short directed cycles using rectangular matrix multiplication and dynamic programming . in _ proceedings of the fifteenth annual acm - siam symposium on discrete algorithms _ , pages 254260 , 2004 ."
  ],
  "abstract_text": [
    "<S> the construction of perfect hash functions is a well - studied topic . in this paper , this concept is generalized with the following definition . </S>",
    "<S> we say that a family of functions from @xmath0 $ ] to @xmath1 $ ] is a @xmath2-balanced @xmath3-family of perfect hash functions if for every @xmath4 $ ] , @xmath5 , the number of functions that are 1 - 1 on @xmath6 is between @xmath7 and @xmath8 for some constant @xmath9 . </S>",
    "<S> the standard definition of a family of perfect hash functions requires that there will be at least one function that is 1 - 1 on @xmath6 , for each @xmath6 of size @xmath10 . in the new notion of balanced families </S>",
    "<S> , we require the number of 1 - 1 functions to be almost the same ( taking @xmath2 to be close to @xmath11 ) for every such @xmath6 . </S>",
    "<S> our main result is that for any constant @xmath12 , a @xmath2-balanced @xmath3-family of perfect hash functions of size @xmath13 can be constructed in time @xmath14 . using the technique of color - coding we can apply our explicit constructions to devise approximation algorithms for various counting problems in graphs . </S>",
    "<S> in particular , we exhibit a deterministic polynomial time algorithm for approximating both the number of simple paths of length @xmath10 and the number of simple cycles of size @xmath10 for any @xmath15 in a graph with @xmath16 vertices . </S>",
    "<S> the approximation is up to any fixed desirable relative error . </S>",
    "<S> * key words : * approximate counting of subgraphs , color - coding , perfect hashing . </S>"
  ]
}