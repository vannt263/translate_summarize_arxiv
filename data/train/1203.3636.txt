{
  "article_text": [
    "* dag realization problem : * given is a finite sequence @xmath0 with @xmath7 does there exist an acyclic digraph ( without parallel arcs ) @xmath8 with the labeled vertex set @xmath2 such that we have indegree @xmath9 and outdegree @xmath10 for all @xmath3 ? + if the answer is `` yes '' , we call sequence @xmath11 _ dag sequence _ and the acyclic digraph @xmath12 ( a so - called `` dag '' ) a _ dag realization_. a relaxation of this problem  not demanding the acyclicity of digraph @xmath12  is called _ digraph realization problem_. in this case , we call @xmath12 _ digraph realization _ and @xmath11 _ digraph sequence_. the digraph realization problem can be solved in linear - time using an algorithm by wang and kleitman @xcite . unless explicitly stated , we assume that a sequence does not contain any _ zero tuples _ @xmath13 .",
    "moreover , we will tacitly assume that @xmath14 , as this is obviously a necessary condition for any realization to exist , since the number of ingoing arcs must equal the number of outgoing arcs .",
    "furthermore , we denote tuples @xmath15 with @xmath16 and @xmath17 as _ sink tuples _ , those with @xmath18 and @xmath19 as _ source tuples _ , and the remaining ones with @xmath16 and @xmath19 as _ stream tuples_. we call a sequence only consisting of source and sink tuples , _ source - sink - sequence_. a sequence @xmath20 with @xmath21 source tuples and @xmath22 sink tuples is denoted as _ canonically sorted _ , if and only if the first @xmath21 tuples in this labeling are decreasingly sorted source tuples ( with respect to the @xmath6 ) and the last @xmath22 tuples are increasingly sorted sink tuples ( with respect to the @xmath5 ) . + * hardness and efficiently solvable special cases .",
    "* nichterlein very recently showed that the dag realization problem is np - complete @xcite . on the other hand ,",
    "there are several classes of sequences for which the problem is not hard .",
    "one of these sequences are source - sink - sequences , for which one only has to find a digraph realization .",
    "the latter is already a dag realization , since no vertex has incoming as well as outgoing arcs .",
    "furthermore , sparse sequences with @xmath23 are polynomial - time solvable as we will show below .",
    "we denote such sequences by _ forest sequences_. the main difficulty for the dag realization problem is to find out a `` topological ordering of the sequence '' . in the case where we have one , our problem is nothing else but a directed @xmath24-factor problem on a complete dag .",
    "the labeled vertices of this complete dag are ordered in the given topological order .",
    "this problem can be reduced to a bipartite undirected @xmath24-factor problem which can be solved in polynomial time via a further famous reduction by tutte @xcite to a bipartite perfect matching problem . in a previous paper @xcite",
    ", we proved that a certain ordering of a special class of sequences _opposed sequences_ always leads to a topological ordering of the tuples for at least one dag realization of a given dag sequence . on the other hand , it is not necessary to apply the reduction via tutte if we possess one possible topological ordering of a dag sequence .",
    "the solution is much easier .",
    "next , we describe our approach . + * realization with a prescribed topological order .",
    "* we denote a dag sequence @xmath0 which possesses a dag realization with a topological numbering corresponding to the increasing numbering of its tuples by _ dag sequence for a given topological order _ and analogously the digraph @xmath8 by _ dag realization for a given topological order_. without loss of generality , we may assume that the source tuples come first in the prescribed numbering and are ordered decreasingly with respect to their @xmath6 values .",
    "a realization algorithm works as follows .",
    "consider the first tuple @xmath25 from the prescribed topological order which is not a source tuple .",
    "then there must exist @xmath26 source tuples with a smaller number in the given dag sequence .",
    "reduce the @xmath26 first ( i.e.  with largest @xmath6 ) source tuples by one and set the indegree of tuple @xmath25 to @xmath27 that means , we reduce sequence @xmath28 to sequence @xmath29 if we get zero tuples in @xmath30 then we delete them and denote the new sequence for simplicity also by @xmath31 furthermore , we label this sequence with a new numbering starting from one to its length and consider this sorting as the given topological ordering for @xmath32 .",
    "we repeat this process until we get an empty sequence ( corresponding to the realizability of @xmath11 ) or get stuck ( corresponding to the non - realizability of @xmath11 ) .",
    "the correctness of our algorithm is proven in lemma  [ th : topologicalrealization ] .",
    "[ th : topologicalrealization ] @xmath11 is a dag sequence for a given topological order @xmath33 @xmath32 is a dag sequence for its corresponding topological order .",
    "* discussion of our main theorem and its corresponding algorithm .",
    "* we do not know how to determine a feasible topological ordering ( i.e. , one corresponding to a realization ) for an arbitrary dag sequence .",
    "however , we are able to restrict the types of possible permutations of the tuples . for that ,",
    "we need the following order relation @xmath34 , introduced in @xcite .    given are @xmath35 and @xmath36 we define : @xmath37    note , that a pair @xmath38 equals @xmath39 with respect to the opposed relation if and only if @xmath40 and @xmath41 the opposed relation is reflexive , transitive and antisymmetric and therefore a partial , but not a total order .",
    "our following theorem leads to a recursive algorithm with exponential running time and results in corollary  [ korollartopologischerealisation ] which proves the existence of a special type of possible topological sortings provided that sequence @xmath11 is a dag sequence .",
    "[ realisationdagsequenzen ] let @xmath11 be a canonically sorted sequence containing @xmath42 source tuples .",
    "furthermore , we assume that @xmath11 is not a source - sink - sequence .",
    "we define the set @xmath43 @xmath11 is a dag sequence if and only if @xmath44 and there exists an element @xmath45 such that @xmath46 @xmath47 is a dag sequence .",
    "( ) return true    sequence @xmath32 may contain zero tuples . if this is the case , we delete them and call the new sequence for simplicity also @xmath32 .",
    "theorem [ realisationdagsequenzen ] ensures the possibility for reducing a dag sequence into a source - sink - sequence .",
    "the latter can be realized by using the algorithm for realizing digraph sequences @xcite .",
    "the whole algorithm is summarized in algorithm  [ alg : dag realization ] , where we consider the maximum subset @xmath48 of @xmath49 only containing pairwise disjoint stream tuples .",
    "the bottleneck of this approach is the size of set @xmath50 we give an example for the execution of algorithm  [ alg : dag realization ] in the appendix .",
    "our pseudocode does not specify the order in which we process the elements of @xmath48 in line 3 .",
    "several strategies are possible which have a significant influence on the overall performance . the most promising deterministic strategy",
    "( as we will learn in the next sections ) is to use the lexicographic order , starting with the lexicographic maximum element within @xmath48 . in @xcite",
    "we introduced a special class of dag sequences  _ opposed sequences _  where we have @xmath51 if sequence @xmath11 is not a source - sink - sequence .",
    "we call a sequence @xmath11 _ opposed sequence _ , if it is possible to sort its stream tuples in such a way , that @xmath52 and @xmath53 is valid for stream tuples with indices @xmath54 and @xmath55 in this case , we have the property @xmath56 for all stream tuples .",
    "at the beginning of the sequence we insert all source tuples such that the @xmath6 build a decreasing sequence and at the end of sequence @xmath11 we put all sink tuples in increasing ordering with respect to the corresponding @xmath57 the notion _ opposed sequence _ describes a sequence , where it is possible to compare all stream tuples among each other and to put them in a `` chain '' .",
    "indeed , this is not always possible because the opposed order is not a total order .",
    "however , for opposed sequences line ( 3 ) to line ( 9 ) in algorithm  [ alg : dag realization ] are executed at most once in each recursive call , because we have always @xmath58 overall , we obtain a linear - time algorithm for opposed sequences . however , there are many sequences which are not opposed , but theorem  [ realisationdagsequenzen ] still yields a polynomial decision time .",
    "consider for example dag sequence @xmath59 which is not an opposed sequence , because stream tuples @xmath60 and @xmath61 are not comparable with respect to the opposed ordering .",
    "however , we have @xmath62 and so we reduce @xmath11 to @xmath63 , leading to the realizable source - sink - sequence @xmath64 theorem [ realisationdagsequenzen ] leads to further interesting insights",
    ". we can prove the existence of special topological sortings .",
    "[ korollartopologischerealisation ] for every dag sequence @xmath11 , there exists a dag realization @xmath8 with a topological ordering @xmath65 of all @xmath66 vertices corresponding to stream tuples , such that we can not find @xmath67 for @xmath68    we call a topological ordering of a dag sequence obeying the conditions in corollary  [ korollartopologischerealisation ] an _ opposed topological sorting_. at the beginning of our work ( when the complexity of the dag realization problem was still open ) , we conjectured that the choice of the lexicographical largest tuple from @xmath48 in line ( 3 ) would solve our problem in polynomial time .",
    "we call this approach _ lexmax strategy _ and a dag sequence which is realizable with this strategy _ lexmax sequence _ , otherwise we call it _",
    "non - lexmax sequence_. hence , we conjectured the following .",
    "[ co : lexmaxconjecture ] each dag sequence is a lexmax sequence .",
    "we soon disproved our own conjecture by a counter - example ( example  [ example ] , described in the following section and in appendix  [ app : examples ] ) . in systematic experiments we found out that a large fraction of sequences can be solved by this strategy in polynomial time .",
    "we tell this story in the next section  [ storyexperiments ] .",
    "moreover , we use the structural insights from our main theorem to develop a randomized algorithm which performs well in practice ( section  [ randomisiertealgorithmen ] ) .",
    "proofs and further supporting material can be found in the appendix and in @xcite .",
    "* why we became curious .",
    "* to see whether our lexmax conjecture  [ co : lexmaxconjecture ] might be true , we generated a set of dag sequences , called _ randomly generated sequences _ in the sequel , by the following principle : starting with a complete acyclic digraph , delete @xmath69 of its arcs uniformly at random .",
    "we take the degree sequence from the resulting graph .",
    "note that we only sample uniformly with respect to random dags but not uniformly degree sequences since degree sequences have different numbers of corresponding dag realizations . in a first experiment we created with the described process one million dag sequences with 20 tuples each , and @xmath70 .",
    "likewise , we built up another million dag sequences with 25 tuples and @xmath71 .",
    "the fact that the lexmax strategy realized all these test instances without a single failure was quite encouraging .",
    "the lexmax conjecture [ co : lexmaxconjecture ] seemed to be true , only a correctness proof was missing .",
    "but quite soon , in an attempt to prove the conjecture , we artificially constructed a first counter - example , a dag sequence which is definitely no lexmax sequence , as can easily be verified :      even worse : we also found an example ( example  [ ex : strategiesichtweise ] ) showing that no fixed strategy which chooses an element from @xmath48 in algorithm [ alg : dag realization ] and does not consider the corresponding set of sinks , will fail in general .",
    "[ ex : strategiesichtweise ] we consider the two sequences @xmath73 and @xmath74 only differing in their sink tuples .",
    "sequence @xmath75 can only be realized by the lexmax strategy , while several strategies but not the lexmax strategy work for @xmath76 .",
    "thus , there is no strategy which can be applied in both cases .",
    "these observations give rise to several immediate questions : why did we construct by our sampling method ( for @xmath77 and @xmath78 ) only dag sequences which are lexmax sequences ?",
    "how many dag sequences are not lexmax sequences ?",
    "therefore , we started with systematic experiments . for small instances with @xmath79 tuples we generated systematically the set of all dag sequences with all possible",
    "@xmath80 , see for an example the case @xmath81 in figure  [ fig : percentagelexmaxsequences ] and appendix  [ app : material ] .",
    "more precisely , we considered only _ non - trivial sequences _ , i.e.  we eliminated all source - sink sequences and all sequences with only one stream tuple .",
    "we denote this set by _ systematically generated sequences_. note that the number of sequences grows so fast in @xmath82 that a systematic construction of all sequences with a larger size is impossible .",
    "we observed the following :    1 .",
    "the fraction of lexmax sequences among the systematically generated sequences is quite high .",
    "for all @xmath83 it is above @xmath84 , see figure  [ fig : percentagelexmaxsequences ] ( blue squares ) .",
    "the fraction of lexmax sequences strongly depends on @xmath83 .",
    "it is largest for sparse and dense dags .",
    "lexmax sequences are overrepresented among one million randomly generated sequences ( for each @xmath83 ) , we observe more than @xmath85 for all densities of dags , see figure  [ fig : percentagelexmaxsequences ] ( red triangles ) .",
    "this leads to the following questions : given a sequence for which we seek a dag realization .",
    "how should we proceed in practice ? as we have seen , the huge majority of dag sequences are lexmax sequences .",
    "is it possible to find characteristic properties for lexmax sequences or non - lexmax sequences , respectively ?",
    "+ * distance to opposed sequences .",
    "* let us exploit our characterization that opposed sequences are efficiently solvable .",
    "we propose the _ distance to opposed _",
    "@xmath88 for each dag sequence @xmath89 consider for that the topological order of a dag realization @xmath12 given by algorithm  [ alg : dag realization ] , if in line ( 3 ) elements are chosen in decreasing lexicographical order .",
    "this ordering corresponds to exactly one path of the recursion tree .",
    "thus , we obtain one unique dag realization @xmath12 for @xmath11 , if existing .",
    "now , we renumber dag sequence @xmath11 such that it follows the topological order induced by the execution by this algorithm , i.e.  by the sequence of choices of elements from @xmath50 then the distance to opposed is defined as the number of pairwise incomparable stream tuples with respect to this order , more precisely , @xmath90    [ [",
    "question-1-do - randomly - generated - sequences - possess - a - preference - to - a - small - distance - to - opposed - in - comparison - with - systematically - generated - sequences ] ] question 1 : do randomly generated sequences possess a preference to a `` small '' distance to opposed in comparison with systematically generated sequences ? + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in figure  [ fig : systematicdifferencetoopposed ] ( left ) , we show the distribution of systematically generated sequences ( in % ) with their distance to opposed , depending on @xmath91 we compare this scenario with the same setting for randomly generated sequences , shown in figure  [ fig : systematicdifferencetoopposed ] ( right ) .     percentage of systematically generated sequences @xmath11 ( left ) and randomized generated sequences ( right ) with their difference @xmath88 to opposed for @xmath81 tuples and @xmath87.,scaledwidth=115.0% ]     percentage of systematically generated sequences @xmath11 ( left ) and randomized generated sequences ( right ) with their difference @xmath88 to opposed for @xmath81 tuples and @xmath87.,scaledwidth=115.0% ]    _ observations : _ systematically generated sequences have a slightly larger range of the `` distance to opposed '' than randomly generated sequences .",
    "moreover , when we generate dag sequences systematically , we obtain a significantly larger fraction of instances with a larger distance to opposed than for randomly generated sequences , and this phenomenon can be observed for all @xmath83 .",
    "[ [ question-2-do - non - lexmax - sequences - possess - a - preference - for - large - opposed - distances ] ] question 2 : do non - lexmax sequences possess a preference for large opposed distances ? + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    since opposed sequences are easily solvable  @xcite , we conjecture that sequences with a small distance to opposed might be easier solvable by the lexmax strategy than those with a large distance to opposed .",
    "if this conjecture were true , it would give us together with our findings from question 1 one possible explanation for the observation that the randomly generated sequences have a larger fraction of efficiently solvable sequences by the lexmax strategy .",
    "_ observations : _ a separate analysis of non - lexmax sequences ( that is , the subset of unsolved instances by the lexmax strategy ) , displayed in figure  [ fig : opposeddistancenonlexmax ] , gives a clear picture : yes ! for systematically generated sequences with @xmath81 , we observe in particular for instances with a middle density that the fraction of non - lexmax sequences becomes maximal for a relatively large distance to opposed .",
    "[ [ question-3-can - we - solve - real - world - instances - by - the - lexmax - strategy ] ] question 3 : can we solve real - world instances by the lexmax strategy ? + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +      1 .",
    "ordered binary decision diagrams ( obdds ) : in such networks the outdegree is two , that is constant .",
    "this immediately implies that the corresponding sequences are opposed sequences , and hence can provably be solved by the lexmax strategy .",
    "food webs : such networks are almost hierarchical and therefore have a strong tendency to be acyclic ( `` larger animals eat smaller animals '' ) . in our experiments we analyzed food webs from the pajek network library  @xcite .",
    "train timetable network : we use timetable data of german railways from 2011 and form a time - expanded network .",
    "its vertices correspond to departure and arrival events of trains , a departure vertex is connected by an arc with the arrival event corresponding to the very next train stop .",
    "moreover , arrival and departure events at the same station are connected whenever a transfer between trains is possible or if the two events correspond to the very same train .",
    "flight timetable network : we use the european flight schedule of 2010 and form a time - expanded network as in c ) .    the characteristics of our real - world networks b ) - d ) are summarized in table  [ tab : real - world ] . the _ dag density _",
    "@xmath92 of a network is defined as @xmath93 . to compare the distance to opposed for instances of different sizes , we normalize this value by the theoretical maximum @xmath94 , where @xmath95 denotes the number of stream tuples , and",
    "so obtain a _",
    "normalized distance to opposed_. without any exception , all real - world instances have been realized by the lexmax strategy ."
  ],
  "abstract_text": [
    "<S> we study the following fundamental realization problem of directed acyclic graphs ( dags ) . given a sequence @xmath0 with @xmath1 , does there exist a dag ( no parallel arcs allowed ) with labeled vertex set @xmath2 such that for all @xmath3 indegree and outdegree of @xmath4 match exactly the given numbers @xmath5 and @xmath6 , respectively ? recently this decision problem has been shown to be np - complete by nichterlein  @xcite . </S>",
    "<S> however , we can show that several important classes of sequences are efficiently solvable . in previous work  @xcite </S>",
    "<S> , we have proved that yes - instances always have a special kind of topological order which allows us to reduce the number of possible topological orderings in most cases drastically . </S>",
    "<S> this leads to an exact exponential - time algorithm which significantly improves upon a straightforward approach . </S>",
    "<S> moreover , a combination of this exponential - time algorithm with a special strategy gives a linear - time algorithm . </S>",
    "<S> interestingly , in systematic experiments we observed that we could solve a huge majority of all instances by the linear - time heuristic . </S>",
    "<S> this motivates us to develop characteristics like dag density and `` distance to provably easy sequences '' which can give us an indicator how easy or difficult a given sequence can be realized .    </S>",
    "<S> furthermore , we propose a randomized algorithm which exploits our structural insight on topological sortings and uses a number of reduction rules . </S>",
    "<S> we compare this algorithm with other straightforward randomized algorithms in extensive experiments . </S>",
    "<S> we observe that it clearly outperforms all other variants and behaves surprisingly well for almost all instances . </S>",
    "<S> another striking observation is that our simple linear - time algorithm solves a set of real - world instances from different domains , namely ordered binary decision diagrams ( obdds ) , train and flight schedules , as well as instances derived from food - web networks without any exception . </S>"
  ]
}