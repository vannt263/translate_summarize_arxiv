{
  "article_text": [
    "attempts to answer even the simplest questions about the behaviour of computer programs are bedevilled by uncomputability .",
    "the concept of asymptotic intrinsic universality introduced here is based upon a bayesian approach to emulation by computer programs of other computer programs .",
    "the method provides a means to quantify their reprogramming capabilities , associating them with a deciding procedure that asymptotically recognizes computation with a confidence value and sets forth a hierarchy of reprogrammability ( see  @xcite ) based upon the likelihood of a system being , in one degree or another , close to ( or removed from ) turing universality .    in  @xcite , a related conjecture concerning other kinds of simply defined programs",
    "was presented , suggesting that all busy beaver turing machines may be capable of universal computation , as they seem to share some of the informational and complex properties of systems known to be capable of universal computational behaviour .",
    "we have recently found that most computer programs can be reprogrammed to emulate an increasing number of other ( different ) computer programs of the same size  @xcite under a similar _ block emulation _ transformation or set of compilers of increasing size .",
    "we also previously advanced a conceptual framework for reprogrammability based upon the display of different qualitative output behaviours  @xcite and modelled as a type of turing test to determine computational capabilities  @xcite .",
    "this has been used in connection with an instance of natural computation  in an _ in - silico _ simulation of porphyrin molecules  @xcite in the context of spatial computing .    here",
    "we advance a bayesian method , namely _",
    "asymptotic intrinsic universality _",
    ", that draws everything together and translates the seminal concept of computation universality to degrees of belief and confidence based upon emulation and reprogrammability capabilities applicable to natural computation .",
    "we test the method with a case study of the set of turing machines defined by the busy beaver functions .",
    "a turing machine consists of a finite alphabet set with symbols @xmath0 and states @xmath1 , with 0 the `` halting state '' .",
    "the turing machine `` runs '' on an one - way unbounded tape and for each pair :    the machine s current `` state '' @xmath2 ; and    the tape symbol @xmath3 the machine s head is `` reading '' .    for each pair @xmath4 there is a corresponding instruction @xmath5 :    a state @xmath6 to transition into ( which may be the same as the one it was in ) . if 0 the machine halts ;    a unique symbol @xmath7 to write on the tape ( the machine can overwrite a @xmath8 on a @xmath9 , a @xmath9 on a @xmath8 , a @xmath8 on a @xmath8 , and a @xmath9 on a @xmath9 ) , and    a direction to move in @xmath10 : @xmath11 ( left ) , @xmath8 ( right ) or @xmath9 ( none , when halting ) .    for @xmath12 ,",
    "there are @xmath13 turing machines with @xmath14 states according to this formalism .",
    "the output string is taken from the number of contiguous cells on the tape the head has gone through .",
    "we denote by @xmath15 the set ( or space ) of all @xmath14-state 2-symbol turing machines ( with the halting state not included among the @xmath14 states ) and by @xmath16 a specific turing machine with @xmath14 states and @xmath17 symbols .      a _ busy beaver turing machine _",
    "@xcite is a turing machine that , when provided with a blank tape , does a lot of work .",
    "formally , it is an @xmath14-state @xmath17-symbol turing machine started on an initially blank tape that writes a maximum number of 1s or moves the head a maximum number of times upon halting .",
    "an online computer program showing the behaviour of these computer programs can be found in  @xcite .",
    "most turing machines never halt , yet busy beavers do halt ( by definition over the empty tape ) .",
    "we know from algorithmic information theory that among those turing machines that do halt , most will halt quickly or will perform very little work , yet by definition busy beavers are those that perform the greatest amount of work . in a recent investigation  @xcite",
    "focused on cellular automata ( ca ) , we have also shown that most computer programs are candidates for intrinsic universality , and thus for turing universality .",
    "there are known values for all 2-symbol busy beavers up to 4-state turing machines , and explicit constructions give exact or lower bounds for other state and symbol pairs .    if @xmath18 is the number of 1s on the tape of a turing machine @xmath19 upon halting , then : @xmath20 .    if @xmath21 is the number of steps that a machine @xmath19 takes upon halting , then @xmath22 .",
    "@xmath23 and @xmath24 are noncomputable functions by reduction to the halting problem . yet values are known for @xmath15 with @xmath25 .",
    "busy beavers are the turing machines that perform more computation among the machines if their same size ( by number of states but more appropriately by program length in bits ) needed .",
    "this follows from rado s definitions and it means that busy beavers have also the greatest logical depth , as defined by bennett  @xcite . yet a busy beaver is required to halt .",
    "when running for the longest time or writing the largest number of non - blank symbols , @xmath26 has to be clever enough to make wise use of its resources and an instruction away to halt at the end .",
    "there is thus evidence that these machines are far from trivial and that for several important measures of complexity they are among most complex , if not the most , yet their computational power is unknown and its investigation would represent a way to connect complexity to computational power .",
    "here we undertake first steps with interesting results .",
    "the notion of _ intrinsic _ computational universality used for cellular automata was an adaptation of classical turing - universality  @xcite .",
    "_ intrinsic universality _ is stronger than turing - universality  @xcite and the concept can be extended and adapted to other computing systems , including computer programs in general .",
    "a computer program of a given size is intrinsically universal if it is able to emulate the output behaviour of any other computer program under a coarse - graining compiler  @xcite .",
    "the so - called _ game of life _ is an example of 2-dimensional cellular automaton that is not only turing - universal but also intrinsic universal  @xcite .",
    "this means that the game of life does not only compute any computable function but can also emulate the behavior of any other 2d - dimensional cellular automaton ( under rescaling ) .",
    "( emulation / simulation by rescaling / coarse - graining ) : let @xmath27 and @xmath28 be two computer programs",
    ". then @xmath27 emulates / simulates @xmath28 if there exists a rescaling / projection @xmath29 of @xmath27 such that @xmath30 , where @xmath31 and @xmath32 are the computed functions of @xmath27 and @xmath28 .",
    "we consider @xmath29 a compiler to translate @xmath27 into @xmath28 ( see fig .",
    "[ fig_3 ] ) .",
    "the exploration of the computing capabilities of computer programs can then proceed by _ block emulation _ , whereby the scale of space - time diagrams of a computation are found and rescaled / coarse - grained .",
    "illustration of the process of one turing machine emulating another via a block transformation . in this case",
    "( a ) shows a @xmath33 with initial tape @xmath34 after 2 steps . by performing the block transformation of length 3 ( b ) on the initial condition of ( a ) , after 6 steps using the same @xmath33 rule one gets ( c ) .",
    "if the output of every 3rd step is taken and the back transformation ( d ) performed on these outputs , one gets the output ( e ) .",
    "this is identical with the output of @xmath35 with rule number @xmath36 run on the same initial condition as in ( a ) for 2 steps . in other words ,",
    "( e ) is the coarse - grained version of the block transformed @xmath37 ( a ) which in turn produces the same output as @xmath38 of rule number @xmath36 . in this picture",
    "one can not see the compiler directly as it is encoded within the internal states of the @xmath37 .",
    "[ fig_emul_visual ] , width=453 ]    the emulations here explored are related to an even stronger form of _ intrinsic universality _ , namely linear - time intrinsic universality  @xcite , which implies that all emulations carry only a linear overhead as a result of our brute force exploration of the compiler and rule space .",
    "this is because the coarse - graining emulation is of a block of fixed length and therefore what one can consider a compiler ( another computer program of fixed size ) .",
    "following these ideas , one can try out different possible compilers and see what type of computer programs a specific computer program is able to emulate .",
    "the _ linear _ block transformation was suggested in  @xcite .",
    "the exploration of the emulating space of turing machines ( tm ) is more complicated than for cellular automata because the space - time diagram does not contain the head configuration state of the turing machine .",
    "we ran the random tms and the busy beaver turing machines for the number of steps given by @xmath24 .",
    "for example , for @xmath39 states , @xmath40 , given by the busy beaver @xmath41 .",
    "we looked for all transformations which allow a back transformation for block sizes 2 to 4 and only considered ( 2-symbol , 4-state ) and 3-symbol , 2-state ) busy beaver turing machines and a sample of random turing machines of the same size .",
    "flow diagram of emulation of tms.,title=\"fig:\",width=472 ] +    to ascertain which tm from the same rule space corresponded to the emulated busy beaver or tm , we adopted the following algorithm :    for a @xmath14-state and @xmath17-symbol turing machine ( tm ) , we enumerated all possible block transformations @xmath42 of given block size @xmath14 ( @xmath14-tuples ) , e.g. @xmath43 for a 3-symbol , 2 state tm .",
    "we found a total of @xmath44 possible transformations .",
    "we applied each member of the set of possible transformations to a tm of the corresponding rule space , in this paper that of a busy beaver ( @xmath45 ) or a randomly selected tm given a randomly initialized tape .",
    "we then let the tm evolve for n steps .",
    "then we took every n output line of the tm and performed a back transformation on the output , e.g. @xmath46 . at the same time we drew a tm of the same rule space out of a random sample and let it evolve for @xmath14 steps using the same initial tape .",
    "if the output was a valid output of a tm , we tried to match it with the output of the busy beaver or random tm described above . in order to exclude trivial emulations",
    ", we filtered out all those emulated tms which are just a @xmath14-time repetition of the initial tape .",
    "it is important to note that we are not taking the initial states of the tms into account .",
    "we are just focusing on the output of tms when performing the block transformations .",
    "these facts suggest the following conjectures , which are also relevant to the dynamic behaviour of a set of simply - described machines characterized by universal behaviour .    in previous work we explored these conjectures relating to busy beavers with numerical approximations of their sensitivity to initial conditions  @xcite and the qualitative behaviour that initial conditions induce over space - time diagrams  @xcite . which was similar to work we did on the game of life  @xcite",
    "a _ weak _ universal turing machine is a machine that allows its initial tape to be in a non all-`blank ' configuration .",
    "if @xmath26 is weak universal , then it is allowed to start either from a periodic tape configuration or an infinite sequence produced by e.g. a finite automaton . in other words , these are machines that are turing universal not necessarily running on non - empty tapes .    [ conjecture ] the busy beaver conjecture(s ) as advanced in  @xcite establish(es ) that :    ( strong version ) : for all @xmath47 , @xmath26 is turing universal .    ( sparse version ) : for some @xmath47 , @xmath26 is turing universal .",
    "( weak version ) : for all @xmath47 , @xmath26 is weak turing universal .",
    "( weakest version ) : for some @xmath47 , @xmath26 is ( weak ) turing universal .    here we provide evidence in favour of all conjectures in the form of an increasingly monotonic asymptotic intrinsic universal behaviour .",
    "it is known that among all 2-state 2-symbol turing machines , none can be universal .",
    "@xmath26 , as defined by rado  @xcite , is a turing machine with @xmath14 states plus the halting state .",
    "@xmath48 is thus actually @xmath33 , a 3-state 2-symbol machine in which one state is specially reserved for halting only .",
    "if @xmath45 is unary , then it will be assumed to be a 2-symbol turing machine , otherwise it will be denoted by @xmath49 .",
    "typical space - time evolution / behaviour of _ busy beaver turing machines_. the first 6 figures from left to right correspond to busy beaver machines with 2-symbols and 2 to 6 states ( for illustration purposes only those @xmath50 were plotted with a background mesh ) for which the first 3 have exact ( @xmath24 ) runtime values ( 6 , 21 , 107 ) . for the rest",
    "a cutoff value was arbitrarily chosen , so as to provide an optimally effective illustration .",
    "the behaviour of a busy beaver can not be a trivial repetition because it does have to avoid getting into an infinite cycle in order to halt.,title=\"fig:\",width=302 ]   typical space - time evolution / behaviour of _ busy beaver turing machines_. the first 6 figures from left to right correspond to busy beaver machines with 2-symbols and 2 to 6 states ( for illustration purposes only those @xmath50 were plotted with a background mesh ) for which the first 3 have exact ( @xmath24 ) runtime values ( 6 , 21 , 107 ) . for the rest a cutoff value was arbitrarily chosen , so as to provide an optimally effective illustration .",
    "the behaviour of a busy beaver can not be a trivial repetition because it does have to avoid getting into an infinite cycle in order to halt.,title=\"fig:\",width=151 ]",
    "we looked into the number of compilers up to a certain size for which a computer program can emulate other computer programs of the same size ( e.g. in number of states for tms , number neighbours for cas , or description bits in general ) .",
    "given all the unknown priors and the uncertainty in the degree of belief , we need a basic function that :    is increasingly monotonic .",
    "normalizing by total number of explored compilers should provide a measure for comparison , but the function itself should only count the number of emulations .",
    "@xmath51 when @xmath52 .",
    "evidently any emulation should amount to a non - zero value .",
    "nonlinearly converges to 1 .",
    "we want a function that `` slowly '' converges to a positive value and    incorporates a degree of belief weighting the number of emulations found .",
    "because intrinsic universality implies turing universality  @xcite , this approach is of relevance in finding the reprogramming capabilities of classical and unconventional computing systems .",
    "asymptotic intrinsic universality curve ( @xmath53 , made continuous for illustration purposes ) is the bayesian approach to the otherwise seminal but abstract concept of computation universality applicable to both abstract and natural / unconventional computation .",
    "for example , we found evidence in favour of a conjecture postulating that busy beaver turing machines are somewhere on the asymptotic universality curve , highly so if the degree of belief according to @xmath54 assigns it a higher confidence every time that such a machine in question is able to emulate some other.,width=340 ]    the exact shape of the function has no essential meaning as long as it is concave and complies with the above requirements .",
    "a canonical function is @xmath53 , where @xmath55 is the number of different non - trivial emulations of a system under evaluation and @xmath56 $ ] the degree of belief modifying the rate of convergence , in this case @xmath57 ( see fig .",
    "[ universality ] ) .",
    "we then define the asymptotic intrinsic universality of a computing system @xmath58 as :    ( asymptotic intrinsic universality ) : let @xmath58 be a computing machine of fixed size and @xmath59 the number of non - equivalent ( e.g. under coarse - graining ) emulations of other computing systems of the same size that @xmath58 can emulate , then @xmath60 is the function that retrieves a confidence value of reprogrammability based upon the intrinsic universality of @xmath58 according to belief @xmath54 .      here",
    "we provide evidence in favour of the busy beaver conjectures by way of the different qualitative behavioural properties they display and their intrinsic universality capabilities .      among the intuitions suggesting the truth of one of these conjectures ,",
    "is that it is easier to find a machine capable of halting and performing unbounded computations for a turing machine if the machine already halts after performing a sophisticated calculation , than it is to find a machine showing sophisticated behaviour whose previous characteristic was simply to halt .",
    "this claim can actually be quantified , given that the number of turing machines that halt after @xmath61 for increasing values of @xmath14 decreases exponentially @xcite .",
    "in other words , if a machine capable of halting is chosen by chance , there is an exponentially increasing chance of finding that it will halt sooner rather than later , meaning that most of these machines will behave trivially because they will not have enough time to do anything interesting before halting .",
    "a b +   a - d : histograms of the compressed lengths ( @xmath59 axis using compress ) of the space - time diagrams of @xmath26 for @xmath623 to 6 for @xmath63 steps each , showing accumulation of different qualitative behaviours .",
    "e : a right - left compressed behaviour of a busy beaver runnning for @xmath64 . only rows for which the head has moved further to the right or left than ever before are kept , a method suggested in  @xcite .",
    "f : function computed by the busy beaver @xmath65 for consecutive initial conditions 1 to 100 in binary.,title=\"fig:\",width=188 ]   a - d : histograms of the compressed lengths ( @xmath59 axis using compress ) of the space - time diagrams of @xmath26 for @xmath623 to 6 for @xmath63 steps each , showing accumulation of different qualitative behaviours .",
    "e : a right - left compressed behaviour of a busy beaver runnning for @xmath64 . only rows for which the head has moved further to the right or left than ever before are kept , a method suggested in  @xcite .",
    "f : function computed by the busy beaver @xmath65 for consecutive initial conditions 1 to 100 in binary.,title=\"fig:\",width=188 ] + c d +   a - d : histograms of the compressed lengths ( @xmath59 axis using compress ) of the space - time diagrams of @xmath26 for @xmath623 to 6 for @xmath63 steps each , showing accumulation of different qualitative behaviours .",
    "e : a right - left compressed behaviour of a busy beaver runnning for @xmath64 .",
    "only rows for which the head has moved further to the right or left than ever before are kept , a method suggested in  @xcite .",
    "f : function computed by the busy beaver @xmath65 for consecutive initial conditions 1 to 100 in binary.,title=\"fig:\",width=188 ]   a - d : histograms of the compressed lengths ( @xmath59 axis using compress ) of the space - time diagrams of @xmath26 for @xmath623 to 6 for @xmath63 steps each , showing accumulation of different qualitative behaviours .",
    "e : a right - left compressed behaviour of a busy beaver runnning for @xmath64 .",
    "only rows for which the head has moved further to the right or left than ever before are kept , a method suggested in  @xcite .",
    "f : function computed by the busy beaver @xmath65 for consecutive initial conditions 1 to 100 in binary.,title=\"fig:\",width=188 ] + e f +   a - d : histograms of the compressed lengths ( @xmath59 axis using compress ) of the space - time diagrams of @xmath26 for @xmath623 to 6 for @xmath63 steps each , showing accumulation of different qualitative behaviours .",
    "e : a right - left compressed behaviour of a busy beaver runnning for @xmath64 . only rows for which the head has moved further to the right or left than ever before are kept , a method suggested in  @xcite .",
    "f : function computed by the busy beaver @xmath65 for consecutive initial conditions 1 to 100 in binary.,title=\"fig:\",width=170 ]   a - d : histograms of the compressed lengths ( @xmath59 axis using compress ) of the space - time diagrams of @xmath26 for @xmath623 to 6 for @xmath63 steps each , showing accumulation of different qualitative behaviours .",
    "e : a right - left compressed behaviour of a busy beaver runnning for @xmath64 . only rows for which the head has moved further to the right or left than ever before are kept , a method suggested in  @xcite .",
    "f : function computed by the busy beaver @xmath65 for consecutive initial conditions 1 to 100 in binary.,title=\"fig:\",width=207 ] +     left : state diagram after 20 steps ( state 1 is a down - tick , state 2 is an up - tick ) .",
    "right : two runs from different `` random '' initial conditions of length 100 bits showing ( left ) a quick halting ( computation of the identity ) and ( right ) an apparently random movement of the head for another initial condition running on the same 4-state 3-symbol busy beaver turing machine.,title=\"fig:\",width=207 ]   left : state diagram after 20 steps ( state 1 is a down - tick , state 2 is an up - tick ) .",
    "right : two runs from different `` random '' initial conditions of length 100 bits showing ( left ) a quick halting ( computation of the identity ) and ( right ) an apparently random movement of the head for another initial condition running on the same 4-state 3-symbol busy beaver turing machine.,title=\"fig:\",width=75 ]   left : state diagram after 20 steps ( state 1 is a down - tick , state 2 is an up - tick ) .",
    "right : two runs from different `` random '' initial conditions of length 100 bits showing ( left ) a quick halting ( computation of the identity ) and ( right ) an apparently random movement of the head for another initial condition running on the same 4-state 3-symbol busy beaver turing machine.,title=\"fig:\",width=73 ]    fig .",
    "[ mainfig ] provides a summation of the behavioural investigation of busy beaver machines .",
    "histograms show the different qualitative behaviour in bimodal and multimodal discrete distributions .",
    "the multimodality is not an effect of the size of the initial condition that grows smoothly by @xmath66 , nor of the stepwise behaviour of the lossless compression algorithm ( compress based upon deflate ) . if it were an effect of the length of the initial condition , then subfigs .",
    "b - d would look like subfig .",
    "a , which is not the case .",
    "they display genuinely different behaviours ( see fig .  [ mainfig2](right ) ) .",
    "the state diagram in fig .",
    "[ mainfig2](left ) suggests how to choose an initial configuration for the machine to enter into an infinite loop ( e.g. connected cycle on the left ) , and therefore how to enter into a never - halting computation , a requirement for ( weak ) turing universality .",
    "[ mainfig2](right ) shows the behaviour of @xmath67 for 2 different initial conditions , one for which it halts ( or `` computes '' the identity ) and another for which the computation goes on in a rather complex head movement fashion .",
    "top : boxplots showing the differences in the emulation power of ( left ) @xmath37 versus a set of randomly selected tms in @xmath68 , and ( right ) @xmath33 versus a set of randomly selected tms in @xmath69 .",
    "the data show how many emulations on average a set of busy beavers of a given rule space and a set of random tms selected from the same rule space can produce for given block sizes .",
    "the data shows a variance for both tm types , since the output of valid block transformations is compared with the output of a tm sample taken from the same rule space .",
    "trivial tms ( c.f .",
    "flow chart in fig  [ diagram ] ) are excluded .",
    "each emulation is counted , even if it corresponds to the same tm .",
    "the diamond shapes represent the mean of the data points .",
    "bottom : same plots , but only tm evolutions with different hash values ( from their evolution ) are counted , i.e. only distinct tms are counted , rendering the difference between busy beavers and random turing machines even more prominent.,title=\"fig:\",width=204 ]   top : boxplots showing the differences in the emulation power of ( left ) @xmath37 versus a set of randomly selected tms in @xmath68 , and ( right ) @xmath33 versus a set of randomly selected tms in @xmath69 .",
    "the data show how many emulations on average a set of busy beavers of a given rule space and a set of random tms selected from the same rule space can produce for given block sizes .",
    "the data shows a variance for both tm types , since the output of valid block transformations is compared with the output of a tm sample taken from the same rule space .",
    "trivial tms ( c.f . flow chart in fig  [ diagram ] ) are excluded .",
    "each emulation is counted , even if it corresponds to the same tm .",
    "the diamond shapes represent the mean of the data points .",
    "bottom : same plots , but only tm evolutions with different hash values ( from their evolution ) are counted , i.e. only distinct tms are counted , rendering the difference between busy beavers and random turing machines even more prominent.,title=\"fig:\",width=249 ] +   top : boxplots showing the differences in the emulation power of ( left ) @xmath37 versus a set of randomly selected tms in @xmath68 , and ( right ) @xmath33 versus a set of randomly selected tms in @xmath69 .",
    "the data show how many emulations on average a set of busy beavers of a given rule space and a set of random tms selected from the same rule space can produce for given block sizes .",
    "the data shows a variance for both tm types , since the output of valid block transformations is compared with the output of a tm sample taken from the same rule space .",
    "trivial tms ( c.f .",
    "flow chart in fig  [ diagram ] ) are excluded .",
    "each emulation is counted , even if it corresponds to the same tm .",
    "the diamond shapes represent the mean of the data points .",
    "bottom : same plots , but only tm evolutions with different hash values ( from their evolution ) are counted , i.e. only distinct tms are counted , rendering the difference between busy beavers and random turing machines even more prominent.,title=\"fig:\",width=204 ]   top : boxplots showing the differences in the emulation power of ( left ) @xmath37 versus a set of randomly selected tms in @xmath68 , and ( right ) @xmath33 versus a set of randomly selected tms in @xmath69 .",
    "the data show how many emulations on average a set of busy beavers of a given rule space and a set of random tms selected from the same rule space can produce for given block sizes .",
    "the data shows a variance for both tm types , since the output of valid block transformations is compared with the output of a tm sample taken from the same rule space .",
    "trivial tms ( c.f .",
    "flow chart in fig  [ diagram ] ) are excluded .",
    "each emulation is counted , even if it corresponds to the same tm .",
    "the diamond shapes represent the mean of the data points .",
    "bottom : same plots , but only tm evolutions with different hash values ( from their evolution ) are counted , i.e. only distinct tms are counted , rendering the difference between busy beavers and random turing machines even more prominent.,title=\"fig:\",width=249 ]    fig .  [ fig_2 ] shows that busy beavers are much more capable of emulating the behaviour of other ( non - trivial ) turing machines than the control case , a sample of random turing machines from the same rule space size ( i.e. all machines are of the same size ) .",
    "this is consonant with theoretical expectations  @xcite .",
    "the capacity for universal behaviour implies that a system is capable of being reprogrammed and is therefore reactive to external input .",
    "it is no surprise that universal systems should be capable of responding to their input and doing so succinctly , if the systems in question are efficient universal systems . if the system is incapable of reacting to any input or if the output is predictable ( decidable ) for any input , the system can not be universal .",
    "we have here provided evidence that busy beavers comply with all the requirements for turing universality and must therefore be considered a very interesting non - trivial set of turing machines that are candidates for turing universality .",
    "evidence in favour of the conjectures is based upon the following observations :    busy beavers produce space - time diagrams of the highest complexity compared to the space - time diagrams of other rules in the same rule space .",
    "busy beavers show qualitatively different behaviour for different initial conditions ; they can halt and it is not difficult to devise ways to perform non - halting computations based upon infinite loops , especially for non - empty inputs .",
    "the small set of busy beavers investigated emulate a larger number of other ( non - trivial ) turing machines on average compared to random turing machines of the same size .",
    "in other words , we found evidence indicating that @xmath70 , where @xmath71 is a random turing machine in the complement set of the busy beavers @xmath72 , and the confidence level @xmath54 is fixed .",
    "thus the measure of asymptotic intrinsic universality that we defined @xmath73 converges to 1 much faster than @xmath74 .",
    "asymptotic intrinsic universality is strictly stronger than turing universality .",
    "[ fig_2 ] : random tm statistics serve as a control because we know that the set of machines that either quickly halt or never halt are of density measure 1 , and will therefore end up dominating the average emulation with @xmath75 for @xmath76 .",
    "so if we find , as we in fact did , that @xmath77 grows faster than @xmath78 , we would be demonstrating with a high level of confidence that busy beaver turing machines have greater reprogramming capabilities and are candidates for intrinsic universality , and therefore turing universality .",
    "we have brought together several concepts that are relevant and applicable to natural computation where , e.g. , resources are often scarce and computation occurs independently of the substrate , making for concepts that are disembodied , independent not only of specific hardware but of models and formalisms ( e.g. whether one can define a halting configuration ) .    on the one hand , there is the use of the concept of intrinsic universality , which our definition of asymptotic universality relies upon .",
    "intrinsic universality as originally formulated for cellular automata does not require a halting configuration .",
    "this makes it applicable to natural computation , because a halting state is an arbitrary choice  the option to design a state as a halting one  which is meaningless in natural computation .",
    "furthermore , the coarse - graining only takes into consideration the output configuration rather than the state configuration , which is consistent with recent extensions for _ membrane computing _ or p systems  @xcite , where a computation with only one possible output can be reached through many different paths , regardless of the internal states transited through en route .",
    "indeed , since we are not looking ` inside ' the tm ( its internal states ) , we are treating it as a black box ( see fig .  [ fig_3 ] ) on which we perform an external observer test .",
    "the compiler used to look at the internal states is a behaviourally shallow one .",
    "interestingly , the transformed tm ( in fig .",
    "[ fig_3 ] , a busy beaver ) does lock immediately into the same pattern .",
    "again , one would need to visualize the internal states to see a difference between other emulations producing the same output .    on the other hand , in a world where `` emptiness '' or simple / completely regular initial conditions can not be guaranteed , weak universality is more realistic .",
    "the concept of asymptotic universality is based upon and adapted to deal with these situations in the context of natural computation where a system may be a black box but its behaviour can be reinterpreted ( by emulation ) and exploited . of course one difficulty is to identify different behaviours in order to undertake a behavioural comparison , and this is why we have also introduced complexity indices that can serve as tools to quantify the space - time evolutions of systems or their representations .",
    "a limitation of any empirical approach is that of a non - universal system able to emulate an increasing number of non - universal systems may not be universal but an open question is whether there is a threshold n above which a system is universal after simulating n number of other systems .",
    "this is also why the emulation results should be complemented by an analysis of the complexity of the emulations themselves .",
    "while we do know that , for example , finite automata are bounded by the kind of complexity they can produce by the complexity of the set of regular languages , the connection between these qualitative differences and the computational power of the systems in this context is a future subject of further investigation .",
    "the chief advantage of this approach is the amenability to non - formal evidence of the reprogrammability of less conventional systems , where formal proofs of universality are difficult , if not impossible to come by . in other words , while the method does disclose universal systems at the limit , it does not rule out non - universal ones , thus producing possible false positives .",
    "however limited , any false positive is still a reprogrammable system , thereby providing a more natural / pragmatic definition of _ natural universality_.      it would not have been possible to anticipate that the behaviour displayed would have been that of busy beavers , despite their complexity for empty inputs . nor could the low emulation capabilities of all other trivial and non - trivial machines in the complement set of the busy beavers @xmath72 have been anticipated , because they are no longer being tested and quantified over the full set of possible initial conditions but over the subset that allow the emulation of other computer programs ( turing machines ) of the same ( growing ) size .",
    "in other words , what we are exploring is the cartesian product @xmath79 of the pairs @xmath80 , where @xmath81 is a computer program ( e.g. a turing machine ) and @xmath82 a compiler that maps @xmath83 onto @xmath84 of size @xmath85 ( in this case the number of states , but in the general the number of bits , i.e. its kolmogorov complexity  @xcite ) .",
    "here we explored the reprogrammable space , a subset of the the space of all computer programs for either a specific input or , equivalently ( per turing universality ) , for all inputs .",
    "this also means that most of the machines that either halt almost immediately and therefore do nothing interesting , or else never halt , can actually be effectively reprogrammed , and the results obtained here and in  @xcite strongly suggest that they may even be candidates for intrinsic universality ( i.e. the ability to emulate any other computer program under a coarse - graining compiler ) , a stronger concept than that of turing universality .",
    "the set of busy beaver machines describes an ( enumerable ) infinite set of turing machines characterized by a particular specific behaviour . if the conjectures are true according to the evidence we have provided , the result is more surprising , because a describable property determines the computational power of this non - trivial infinite set of turing machines .",
    "here we have taken these ideas a step further in the direction of an empirical proposal for considering statistical computational evidence of computational universality . because of the undecidability of the halting problem we may never obtain stronger evidence of the computational capabilities of these computer programs .",
    "we have introduced a novel experimental and methodological bayesian approach to theoretical computing challenges that circumvents traditional limitations imposed by classical definitions , in particular related to undecidability , unreachability and universality and deals with pragmatic unconventional reprogramming by behavioural emulation rather than through attempting producing formal analytical proofs , which are not only difficult , but impossible in general , specially in the realm of natural computation where we think these new concepts and methods are more relevant .            delahaye j .-",
    "p . and zenil h. , numerical evaluation of the complexity of short strings : a glance into the innermost structure of algorithmic randomness , _ applied mathematics and computation _ , 219 , pp .",
    "6377 , 2012 .",
    "ollinger n. , the quest for small universal cellular automata , _ international colloquium on automata , languages and programming ( icalp2002 ) , _ widmayer p. , triguero f. , morales r , hennessy m. , eidenbenz s. and conejo r. ( eds ) , _ lncs _ 2380 , pp . 318329 , 2002 .",
    "ollinger n. , the intrinsic universality problem of one - dimensional cellular automata , _ symposium on theoretical aspects of computer science ( stacs2003 ) _ , alt h. and habib m. ( eds ) , _ lncs _ 2607 , pp . 632641 , 2003 .                    zenil h. , algorithmicity and programmability in natural computing with the game of life as an in silico case study , _ journal of experimental & theoretical artificial intelligence _ , volume 27 ,",
    "issue 1 , pp . 109121 , 2015 .",
    "zenil h. , a behavioural foundation for natural computing and a programmability test . in g.",
    "dodig - crnkovic and r. giovagnoli ( eds ) , _ computing nature : turing centenary perspective _ , springer sapere series vol . 7 , pp . 87113 , 2013 .",
    "zenil , h. from computer runtimes to the length of proofs : with an algorithmic probabilistic application to waiting times in automatic theorem proving . in dinneen ,",
    "khousainov , b. and nies , a. ( eds . ) , _ computation , physics and beyond international workshop on theoretical computer science _ ,",
    "wtcs 2012 , lncs 7160 , pp .",
    "223 - 240 , springer , 2012 ."
  ],
  "abstract_text": [
    "<S> we advance a bayesian concept of _ intrinsic asymptotic universality _ , taking to its final conclusions previous conceptual and numerical work based upon a concept of a _ reprogrammability _ </S>",
    "<S> test and an investigation of the complex qualitative behaviour of computer programs . </S>",
    "<S> our method may quantify the trust and confidence of the computing capabilities of natural and classical systems , and quantify computers by their degree of reprogrammability . </S>",
    "<S> we test the method to provide evidence in favour of a conjecture concerning the computing capabilities of busy beaver turing machines as candidates for turing universality . </S>",
    "<S> the method has recently been used to quantify the number of _ intrinsically universal _ cellular automata , with results that point towards the pervasiveness of universality due to a widespread capacity for emulation . </S>",
    "<S> our method represents an unconventional approach to the classical and seminal concept of turing universality , and it may be extended and applied in a broader context to natural computation , by ( in something like the spirit of the turing test ) observing the behaviour of a system under circumstances where formal proofs of universality are difficult , if not impossible to come by . </S>",
    "<S> + * keywords : * computer simulation / emulation ; busy beaver turing machines ; intrinsic universality ; turing - completeness ; dynamical systems ; reprogrammability ; behavioural methods </S>"
  ]
}