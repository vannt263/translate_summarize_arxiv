{
  "article_text": [
    "fullerenes are spherical carbon molecules that can be modelled as cubic plane graphs where all faces are pentagons or hexagons .",
    "we will refer to these mathematical models also as fullerenes .",
    "euler s formula implies that a fullerene with @xmath1 vertices contains exactly 12 pentagons and @xmath2 hexagons .",
    "the _ dual _ of a fullerene is the plane graph obtained by exchanging the roles of vertices and faces : the vertex set of the dual graph is the set of faces of the original graph and two vertices in the dual graph are adjacent if and only if the two faces share an edge in the original graph .",
    "the rotational order around the vertices in the embedding of the dual fullerene follows the rotational order of the faces . as fullerenes and their duals",
    "are 3-connected , due to the theorem of whitney the plane embeddings of fullerenes and duals of fullerenes are uniquely determined and the concept of graph isomorphism and isomorphism of embedded graphs ( treating the mirror image as equivalent ) coincide .",
    "the dual of a fullerene with @xmath1 vertices is a triangulation ( i.e. every face is a triangle ) which contains 12 vertices with degree 5 and @xmath3 vertices with degree 6 .",
    "isolated pentagon rule ( ipr ) fullerenes are fullerenes where no two pentagons share an edge .",
    "ipr fullerenes are especially interesting due to a general tendency to be chemically more stable and thus more likely to occur in nature .",
    "the first fullerene molecule was discovered in 1985 by kroto et al .",
    "@xcite , namely the famous @xmath4 buckminsterfullerene or `` buckyball '' . after that discovery",
    "several attempts have been made to generate complete lists of fullerene isomers .",
    "the first approach was the spiral algorithm given by manolopoulos et al . in 1991",
    "this algorithm was relatively inefficient and also incomplete in the sense that not every fullerene isomer could be generated with it .",
    "manolopoulos and fowler  @xcite gave an example of a fullerene that can not be constructed by this algorithm .",
    "the algorithm described here was the first to prove that the counterexample given by manolopoulos and fowler  @xcite is in fact smallest possible  @xcite .",
    "the spiral algorithm was later modified to make it complete , but the resulting algorithm was not efficient  @xcite . in 1995",
    "yoshida and osawa  @xcite proposed a different algorithm using folding nets , but its completeness has not been proven .",
    "other methods are described by liu et al .",
    "@xcite and sah  @xcite , but they also did nt lead to sufficiently efficient algorithms .    the most successful approach until now dates from 1997 and is given by brinkmann and dress  @xcite .",
    "the algorithm described there is proven to be complete and has been implemented in a program called _",
    "fullgen_. the basic strategy can be described as stitching together patches which are bounded by zigzag ( petrie ) paths .",
    "unfortunately a simple typo - like mistake in the source code produced an error that occurred for the first time at 136 vertices  far too many vertices to be detectable by any of the other programs until now . due to this error the lists in the article of brinkmann and dress  @xcite contain some incorrect numbers which we will correct here .",
    "the method of patch replacement can be described as replacing a finite connected region inside some fullerene with a larger patch with identical boundary . for energetical reasons ,",
    "patch replacement as a chemical mechanism to grow fullerenes would need very small patches .",
    "brinkmann et al .",
    "@xcite investigated replacements of small patches and introduced two infinite families of operations .",
    "these operations can generate all fullerenes up to at least 200 vertices , but  as already shown in their paper  fail in general . in 2008 hasheminezhad , fleischner and",
    "mckay  @xcite described a recursive structure using patch replacements for the class of all fullerenes .",
    "in section  [ section : generation_nonipr ] of this paper we will describe an algorithm for the efficient generation of all non - isomorphic fullerenes using the construction operations from hasheminezhad et al .",
    "@xcite . in section  [ section : generation_ipr_filter ]",
    "we will show how to extend this algorithm to generate only ipr fullerenes by using some simple look - aheads .",
    "we call the patch replacement operations which replace a connected fragment of a fullerene by a larger fragment _ expansions _ and the inverse operations _ reductions_. if @xmath5 is obtained from @xmath6 by an expansion , we call @xmath5 the child of @xmath6 and @xmath6 the parent of @xmath5 .    from the results of brinkmann et al .",
    "@xcite it follows that no finite set of patch replacement operations is sufficient to construct all fullerenes from smaller ones .",
    "so each recursive structure based on patch replacement operations must necessarily allow an infinite number of different expansion types .",
    "hasheminezhad et al .",
    "@xcite used two infinite families of expansions : @xmath7 and @xmath8 and a single expansion @xmath9 .",
    "these expansions are sketched in figure  [ fig : fullerene_operations ] .",
    "the lengths of the paths between the pentagons may vary and for operation @xmath7 the mirror image must also be considered . all faces drawn completely in the figure or labelled @xmath10 or @xmath11 have to be distinct .",
    "the faces labelled @xmath10 or @xmath11 can be either pentagons or hexagons , but when we refer to _ the _ pentagons of the operation , we always mean the two faces drawn as pentagons",
    ". for more details on the expansions see the article of hasheminezhad et al .",
    "@xcite .    , @xmath12 and @xmath9 expansions for fullerenes.,scaledwidth=100.0% ]    in figure  [ fig : fullerene_operations - dual ] the @xmath13 and @xmath12 expansions of figure  [ fig : fullerene_operations ] are shown in dual representation",
    ". we will refer to vertices which have degree @xmath14 in the dual representation of a fullerene as @xmath15-vertices .",
    "the solid white vertices in the figure are 5-vertices , the solid black vertices are 6-vertices and the shaded vertices can be either .",
    "three special fullerenes @xmath16 ( the dodecahedron ) , @xmath17 and @xmath18 are shown in figure  [ fig : irred_fullerenes ] .",
    "the type-(5,0 ) nanotube fullerenes are those which can be made from @xmath18 by applying expansion  @xmath9 zero or more times",
    ". we will refer to all fullerenes not in one of these classes as _",
    "reducible_. the following theorem proved by hasheminezhad et al .",
    "@xcite shows that all reducible fullerenes can be reduced using a type @xmath13 or @xmath12 reduction .",
    "[ theorem : construction ] every fullerene isomer , except @xmath17 and type-(5,0 ) nanotube fullerenes can be constructed by recursively applying expansions of type @xmath13 and @xmath12 to @xmath16 .",
    "our algorithm uses this theorem by applying @xmath13 and @xmath12 expansions starting at @xmath16 and @xmath17 , together with separate ( easy ) computation of the type-(5,0 ) nanotube fullerenes .",
    "if the expansions are applied in all possible ways , lots of isomorphic copies will be generated , but we wish to output only one example of each type .",
    "we use the canonical construction path method  @xcite , but in the following we do not assume the reader to be familiar with the method .    in order to use this method , we first have to define a _",
    "canonical reduction _ for every reducible dual fullerene  @xmath6 .",
    "this reduction must be unique up to automorphisms of @xmath6 .",
    "we call the dual fullerene which is obtained by applying the canonical reduction to @xmath6 the _ canonical parent _ of @xmath6 and an expansion that is the inverse of a canonical reduction in the extended graph a _ canonical expansion_.    we also define an equivalence relation on the set of all expansions or reductions of a given dual fullerene @xmath6 . an expansion is completely characterized by the patch that is replaced with a larger patch .",
    "two expansions are called equivalent if there is an automorphism of @xmath6 mapping the two corresponding patches onto each other . for reductions ,",
    "the definition is similar , but in addition to the patch , a rotational direction is necessary to uniquely encode a reduction of type @xmath13 .",
    "this direction can be a flag describing whether the new position of the pentagon is in clockwise or counterclockwise position of the path connecting the pentagons .",
    "two type @xmath13 reductions are equivalent if the patches are mapped onto each other by an orientation preserving automorphism and the flags are the same or they are mapped onto each other by an orientation reversing automorphism and the flags are different .",
    "the two rules of the canonical construction path method applied to dual fullerenes are :    1 .   only accept a dual fullerene if the last step in its construction was a canonical expansion .",
    "2 .   for each dual fullerene @xmath6",
    "to which expansions are applied , only apply one expansion from each equivalence class of expansions .",
    "the expansions / reductions must of course be represented in an efficient way .",
    "reductions are represented by triple @xmath19 , where @xmath20 is a directed edge that is the first edge on the central path between the two pentagons , @xmath21 is the parameter set for the reduction ( such as `` ( 2,3 ) '' for @xmath22 ) and @xmath23 is a direction .",
    "for @xmath12 reductions , @xmath23 indicates whether the turn in the path is to the left or the right . for @xmath13 reductions",
    ", @xmath23 distinguishes between this reduction and its mirror image . since @xmath20 can be at either end of the path , there are two equivalent triples for the same reduction , as illustrated in figure  [ fig : representing_triple ] .",
    "we call these triples the _ representing triples _ of the reduction .",
    "expansions are also represented by triples in similar fashion .",
    "when we translate the notion of equivalent reductions or expansions to representing triples , then the equivalence relation is generated by two relations .",
    "the first is that two triples are equivalent if they represent the same reduction .",
    "the second is that @xmath19 and @xmath24 are equivalent if @xmath25 and in case @xmath26 the edge @xmath20 can be mapped to  @xmath27 by an orientation preserving automorphism and in case @xmath28 the edge @xmath20 can be mapped to  @xmath27 by an orientation reversing automorphism .    for an efficient implementation of the canonicity criteria it is important that in many cases simple and easily computable criteria can decide on the canonical reduction or at least reduce the list of possible reductions . to this end",
    "we assign a 6-tuple @xmath29 to every triple @xmath30 representing a possible reduction .",
    "we then choose the canonical reduction to be a reduction which has a representing triple with the smallest 6-tuple .",
    "the values of @xmath31 are combinatorial invariants of increasing discriminating power and cost .",
    "the value of @xmath32 is the _ length _ of the reduction of which @xmath30 is a representative .",
    "the length of the reduction is the distance between the two 5-vertices of the reduction before actually applying the reduction .",
    "so in case of a @xmath33 reduction ( 2 parameters ) it is @xmath34 and in case of an @xmath35 reduction ( 1 parameter ) it is @xmath36 .",
    "thus we give priority to short reductions .",
    "these are easier to detect and allow some look - ahead .",
    "the entry @xmath37 is the negative of the length of the longest straight path in the reduction . for an @xmath13 reduction ,",
    "the value of @xmath37 is @xmath38 , which does not distinguish between two reductions with the same value of @xmath32 . for a @xmath33 reduction it is @xmath39 , which sometimes distinguishes between @xmath12 reductions with the same value of @xmath32 and always distinguishes between an @xmath13 and a @xmath12 reduction with the same @xmath32 .    the entries @xmath40 and @xmath41 are strings which contain the degrees of the vertices in well - defined neighbourhoods of the edge in the triple .",
    "these neighbourhoods are of increasing ( constant ) size .    in each case",
    "the value @xmath42 is only computed for those representing triples that have the smallest value of @xmath43 . as",
    "our main interest is whether an expansion we applied is canonical , we can also stop as soon as we have found a smaller 6-tuple , which may just mean a reduction with smaller value of @xmath32 . in case of a unique triple with minimal value for @xmath43 or two such triples representing the same reduction , we have found the canonical reduction and can stop the computation of the remaining values .",
    "if after the computation of @xmath44 there is still more than one possibly canonical triple , we define @xmath45 as a string encoding the whole structure of the graph relative to the edge and the direction in the representing triple .",
    "see the article of brinkmann and mckay  @xcite for details of this string , which can be in short be described as the code of a bfs - numbering starting at that edge and evaluating the neighbours of a vertex in the rotational order ( clockwise / counterclockwise ) given by the direction .",
    "two triples coding patches in two graphs ( that may be identical or not ) containing the same directions are assigned the same value @xmath45 if and only if there is an orientation preserving isomorphism of the graphs mapping the edges in the triples onto each other . in case of different directions ,",
    "the same value of @xmath45 is assigned if and only if there is such an orientation reversing automorphism .",
    "this final value @xmath45 makes sure that two patches ( in the same or different graphs ) with the same value of @xmath46 can be mapped onto each other by an isomorphism @xmath47 of the graph . when performing the corresponding reductions ,",
    "the patches are replaced by smaller patches and replacing the images @xmath48 of vertices inside the patch appropriately , one gets an isomorphism of the reduced graphs that maps the reduced patches onto each other .",
    "when @xmath45 is computed and the graph @xmath6 that is tested for canonicity is accepted , as a byproduct we also have the automorphism group of @xmath6 . as possible reductions are represented by edges starting at pentagons , we have a constant upper bound for the number of possible reductions to be evaluated . for a given triple ,",
    "each of @xmath49 can be computed in constant time and @xmath45 can be computed in linear time , so the canonicity test can be done in linear time .",
    "even though it is a nice feature that deciding canonicity of a given set of possible reductions can be done in linear time , for the practical performance it is more important that computing the combinatorial invariants @xmath50 is of a small constant cost . for dual fullerenes with 152 vertices ( fullerenes with 300 vertices ) ,",
    "the discriminating power of @xmath50 is enough to decide whether or not the last expansion was canonical in more than 99.9% of the cases .    in some cases",
    "these cheap invariants also allow look - aheads for deciding whether or not an expansion can be canonical before actually performing  it .",
    "when making the lists of possible expansions , we can often already tell that a certain expansion can not be canonical since it will not destroy all shorter reductions or since there will still be a reduction of the same length but with a smaller value for @xmath51 .",
    "this avoids the application of a lot of non - canonical expansions . counting only expansions passing this look - ahead , for dual fullerenes with 152 vertices still in 95.6% of the expansions a final decision can be found by only computing @xmath50 .",
    "if there is only one representing triple with minimal value for @xmath52 @xmath53 , the automorphism group of @xmath6 is trivial , so no extra computations are necessary .",
    "this happens in 80.9% of the cases for dual fullerenes with 152 vertices .",
    "the ratio is decreasing with the number of vertices . for 102 vertices of the dual",
    "fullerene it is 93.3% and for 127 vertices it is 86.9% .    assume that exactly one representative of each isomorphism class of dual fullerenes on up to @xmath54 vertices is given .",
    "suppose we perform the following steps :    1 .",
    "perform one expansion of each equivalence class of @xmath13 and @xmath12 expansions which lead to a dual fullerene with @xmath1 vertices .",
    "2 .   accept each new dual fullerene if and only if a triple representing the inverse of the last expansion has the minimal value of @xmath55 among all possible reductions .",
    "then exactly one representative of each isomorphism class of reducible dual fullerenes with @xmath1 vertices is accepted .",
    "let @xmath6 be a reducible dual fullerene with @xmath1 vertices .",
    "by theorem  [ theorem : construction ] there is at least one reduction , and so a canonical reduction  @xmath56 , that applies to @xmath6 .",
    "the graph resulting from @xmath56 is isomorphic to a graph in the input set , which has an expansion which is equivalent to the inverse of @xmath56 . but",
    "this expansion produces a graph isomorphic to @xmath6 and the parameters of its inverse reduction are the same as those of @xmath56 , so the result of the expansion is accepted .",
    "this implies that at least one representative of each isomorphism class in question is generated .",
    "it remains to be shown that at most one is generated .",
    "suppose that the algorithm accepts two isomorphic fullerenes @xmath6 and @xmath5 with @xmath1 vertices .",
    "as they are isomorphic , the canonical reductions have the same parameter set @xmath46 .",
    "as they were both accepted , they were constructed by a canonical expansion , so  as mentioned before  the two parents @xmath57 and @xmath58 are isomorphic and there is an isomorphism that maps the corresponding expansions onto each other . by our assumption this means that @xmath57 and @xmath58 are identical and that the two expansions are equivalent , which contradicts step  1 .    by recursively applying expansion @xmath9 to @xmath16 , all type-(5,0 )",
    "fullerenes are constructed . as this constructs all type-(5,0 ) fullerenes exactly once and these fullerenes",
    "can not be constructed by @xmath13 or @xmath12 expansions , this completes the algorithm .      as most fullerenes contain short reductions and as we give priority to short reductions , by far most long expansions are not canonical . for efficiency reasons it is interesting to determine an upper bound on the length of a canonical expansion .",
    "[ lemma_reduction_nonipr ] reducible dual fullerenes which contain adjacent 5-vertices have an @xmath59 , @xmath60 or @xmath61 reduction .    for a proof , see the article of hasheminezhad et al .",
    "@xcite .",
    "so each reducible dual non - ipr fullerene has a reduction with length at most  2 . in dual ipr",
    "fullerenes the shortest reduction is a reduction with the same length as the minimum distance of two 5-vertices in the dual fullerene .    in dual fullerenes where the shortest distance between two 5-vertices is at least @xmath23 ,",
    "the sets of vertices at distance at most @xmath62 of different vertices are disjoint .",
    "this gives us a lower bound of @xmath63 for the number of vertices in the fullerene , where @xmath64 .",
    "so expansions of length @xmath23 are not canonical if the expanded graph contains fewer than @xmath63 vertices . this result does not only help to avoid the application of non - canonical expansions , but also avoids the need to search for long expansions .",
    "we can often determine even sharper upper bounds for the maximum length of a canonical expansion :    [ lemma_one_l1 ] if a dual fullerene @xmath6 has a reduction of length @xmath65 , all children @xmath5 of @xmath6 have a reduction of length at most @xmath66 .",
    "if @xmath5 is not ipr , this follows from lemma  [ lemma_reduction_nonipr ] , so assume that @xmath5 is ipr .",
    "the length of the shortest reduction is then the shortest distance between two 5-vertices .",
    "let us look at the shortest path @xmath67 between two 5-vertices allowing a reduction of length @xmath23 in @xmath6 .    as @xmath65 and as all vertices in the patch @xmath68 used for expansion must be distinct",
    ", @xmath67 can contain at most 2 maximal subpaths entering @xmath68 and ending there , starting in @xmath68 and leaving it or crossing @xmath68 .",
    "the distance between a 5-vertex in @xmath68 from vertices on the boundary grows at most by 1 .",
    "the same is true for each pair of vertices on the boundary .",
    "so the path @xmath67 can grow in two places by at most @xmath69 , proving the result .",
    "this lemma could be proven for larger @xmath23 if one required the child to be canonical , but as @xmath70 , all dual fullerenes with less than 192 vertices ( or fullerenes with 380 vertices ) have a reduction of length at most  4 .",
    "therefore , even for @xmath71 , lemma  [ lemma_one_l1 ] is only useful for fullerenes with at least 380 vertices .",
    "[ lemma_one_l0 ] if a dual fullerene @xmath6 has an @xmath59 reduction , all canonical children @xmath5 of @xmath6 have a reduction of length at most 2 .",
    "if @xmath5 is not ipr , this follows from lemma  [ lemma_reduction_nonipr ] , so assume that @xmath5 is ipr . by lemma  [ lemma_one_l1 ] , @xmath5 has a reduction of length at most 3 , so a canonical child was constructed by an expansion of length at most 3 .",
    "if @xmath5 was constructed by an @xmath59 , @xmath60 or @xmath61 expansion , the statement follows immediately .",
    "figure  [ fig : l0_red_expansion_l2 ] and figure  [ fig : l0_red_expansion_b10 ] show the only ways that an @xmath72 ( resp .",
    "@xmath73 ) expansion can destroy an @xmath59 reduction which involves two pentagons @xmath74 and @xmath75 such that the expanded fullerene @xmath5 contains no reduction of length shorter than 3 .",
    "the faces @xmath76 and @xmath77 @xmath78 which are on the boundary of the @xmath72 or @xmath73 expansion have to be hexagons otherwise the dual of @xmath5 would contain 5-vertices which are at distance at most 2 . since @xmath74 and @xmath75 are involved in the @xmath59 reduction , they must share an edge .",
    "so there is an edge @xmath79 which is equal to an edge @xmath80 and as the pentagons share an edge , they must also share two faces each containing an endpoint of this common edge .",
    "it is easy to see that for all possible choices of @xmath81 and @xmath82 this implies that a fullerene containing a patch from figure  [ fig : l0_red_expansion_l2 ] or figure  [ fig : l0_red_expansion_b10 ] must have a 4-edge - cut or a 5-edge - cut .",
    "however it follows from the results of bornhft et al .",
    "@xcite that fullerenes are cyclically 5-edge connected , so 4-edge - cuts do not exist . kardos and skrekovski  @xcite showed that the type-(5,0 ) nanotubes are the only fullerenes which have a non - trivial 5-edge - cut .",
    "so there is no expansion which can be applied to @xmath6 such that the shortest reduction of the expanded fullerene has length 3 .",
    "thus all canonical children of @xmath6 have a reduction of length at most 2 .    for the next lemmas",
    "the following observation is useful :    [ obs:3inpatch ]    if the set of vertices contained in the initial patch of an expansion of length @xmath83 contains at least three 5-vertices ( so in addition to the two 5-vertices of the expansion there is at least one more 5-vertex in the boundary ) , then in the extended patch there are two 5-vertices at distance at most @xmath84 .",
    "[ lemma_two_l1s ] if a dual fullerene @xmath6 has at least two reductions of length 2 which do not have the same set of 5-vertices of the reduction , all canonical children @xmath5 have a reduction of length at most  3 .    if @xmath5 is not a dual ipr fullerene , the result follows immediately , so assume the opposite .",
    "this implies that we have to find a bound for the minimum distance of two 5-vertices . by lemma  [ lemma_one_l1 ]",
    "each child has a reduction of length @xmath85 .",
    "so each canonical child was constructed by an expansion of length at most  @xmath85 .",
    "if there were three 5-vertices in the initial patch of the expansion , the result follows from observation  [ obs:3inpatch ] .",
    "so assume this is not the case and one 5-vertex of a reduction of length 2 is not contained in the initial patch .",
    "but then the distance to the other 5-vertex in the reduction can grow by at most  1 , proving the lemma .",
    "[ lemma_three_l1s ] if a dual fullerene @xmath6 has at least three reductions of length 2 with pairwise disjoint sets of 5-vertices of the reduction , all canonical children @xmath5 of @xmath6 have a reduction of length at most  2 .",
    "we may again assume that @xmath5 is ipr .",
    "it follows from lemma  [ lemma_two_l1s ] that @xmath5 has a reduction of length at most 3 , so each canonical expansion has length at most @xmath86 .",
    "if there are three 5-vertices in the initial patch of the expansion , the result follows directly from the observation .",
    "so there is ( at least ) one reduction of length 2 so that none of its 5-vertices is contained in that initial patch .",
    "but then the path of length 2 between these 5-vertices still exists in the expanded graph and allows a reduction of length @xmath87 .    for two reductions @xmath88 and @xmath89 in a dual fullerene @xmath6",
    "we define the distance @xmath90 to be @xmath91 .",
    "[ lemma_two_ind_l0s ] if a dual fullerene @xmath6 has @xmath59 reductions @xmath88 and @xmath89 with @xmath92 , all canonical children @xmath5 of @xmath6 have an @xmath59 reduction .",
    "it follows from lemma  [ lemma_one_l0 ] that there is a reduction of length at most  2 in @xmath5 .",
    "the distance between vertices which are in the initial patch of an expansion of length 2 is at most 4 .",
    "therefore at least one of the two neighbouring 5-vertex pairs still exists and the neighbouring vertices are either unchanged or changed to 6-vertices . in either case",
    "the reduction will still be possible .    for dual fullerenes with @xmath93 vertices ,",
    "lemmas  [ lemma_one_l1 ] , [ lemma_two_l1s ] , [ lemma_three_l1s ] and [ lemma_two_ind_l0s ] can be used to determine a bound on the length of canonical expansions in 93.9% of the cases .",
    "the algorithm was developed for generating all fullerenes , but it can also be used to generate only ipr fullerenes by using a filter and some simple look - aheads :    an @xmath59 expansion is the only expansion that increases the number of vertices in a dual fullerene by just @xmath87 vertices , but the result of an @xmath59 expansion is never a dual ipr - fullerene . when constructing dual ipr fullerenes with @xmath1 vertices , dual ipr fullerenes with @xmath54 vertices",
    "do not have to be constructed and the largest dual fullerenes to which an expansion is applied have @xmath94 vertices .    for a dual fullerene with @xmath95 vertices only expansions of length 3 ( i.e. @xmath72 or @xmath73 expansions ) can lead to dual ipr fullerenes with @xmath1 vertices .",
    "however if a dual fullerene with @xmath95 vertices contains an @xmath59 reduction , it follows from lemma  [ lemma_one_l0 ] that expansions of length 3 are not canonical .",
    "thus we can reject all dual fullerenes with @xmath95 vertices that contain an @xmath59 reduction and also avoid applying @xmath59 expansions to dual fullerenes with @xmath96 vertices .",
    "already these simple look - aheads result in an efficient program , as can be seen in table  [ table : fullerene_times ] .",
    "the running times and a comparison with _ fullgen _ are given in table  [ table : fullerene_times ] .",
    "our generator is called _ buckygen_. the program was compiled with gcc and executed in a single thread on an intel xeon l5520 cpu at 2.27 ghz .",
    "the running times include writing the fullerenes to a null device .",
    "_ buckgen _ was used to generate all fullerenes up to 400 vertices .",
    "this led to a programming error being uncovered in _",
    "fullgen _ that caused it to miss some fullerenes starting at 136 vertices and ipr fullerenes starting at 254 vertices . after correction of the error in _ fullgen",
    "_ , the two programs agree to at least 380 vertices , which is a good check of both .",
    "we give the counts in tables  [ table : degree_counts_1][table : degree_counts_5 ] , which correct those in the article of brinkmann and dress  @xcite where they overlap .",
    "the fullerenes themselves can be downloaded from http://hog.grinvin.org/fullerenes for small sizes",
    ".    we also repeated and extended a computation reported by brinkmann et al .",
    "@xcite , which relied on the faulty version of _ fullgen _ , the results are listed in tables  [ table : degree_counts_1][table : degree_counts_4 ] .",
    "now we have confirmed that all cubic planar graphs with maximum face size 6 are hamiltonian to at least 316 vertices , in agreement with the famous conjecture of barnette .",
    "the incomplete lists of fullerenes were also used in another article of brinkmann et al .",
    "all reducibility results given there remain true , except for table  2 , where the number of fullerenes that can not be reduced by a growth operation of cost 7  that is replacing only 7 edges  is 1 too small for 186 and 190 vertices and 2 too small for 194 vertices .",
    ".generation rates for fullerenes . [ cols=\"^,^,^,^,^ \" , ]     our generator constructs larger fullerenes from smaller ones , so in order to generate all fullerenes with @xmath1 vertices , all fullerenes with at most @xmath95 vertices have to be generated as well ( recall that an @xmath59 expansion increases the number of vertices by 4 ) .",
    "so generating all fullerenes with at most @xmath1 vertices gives only a small overhead compared to generating all fullerenes with exactly @xmath1 vertices . in _",
    "the overhead is considerably bigger as it does not construct fullerenes from smaller fullerenes .",
    "for example , _ buckygen _ can generate all fullerenes with @xmath97 $ ] vertices more than 15 times faster than _",
    "fullgen_. more comparisons with _ fullgen _ can be found in table  [ table : fullerene_times ] .",
    "we have described a new fullerene generator _",
    "buckgen _ which is considerably faster than _ fullgen _ , which is the only previous generator capable of reaching 100 vertices .",
    "the generation cost is now likely to be lower than that of any significant computation performed on the generated structures .",
    "this work was carried out using the stevin supercomputer infrastructure at ghent university .",
    "jan goedgebeur is supported by a phd grant from the research foundation of flanders ( fwo ) .",
    "brendan mckay is supported by the australian research council ."
  ],
  "abstract_text": [
    "<S> we describe an efficient new algorithm for the generation of fullerenes . our implementation of this algorithm is more than @xmath0 times faster than the previously fastest generator for fullerenes  _ fullgen _  and the first program since _ </S>",
    "<S> fullgen _ to be useful for more than 100 vertices . </S>",
    "<S> we also note a programming error in _ fullgen _ that caused problems for 136 or more vertices . </S>",
    "<S> we tabulate the numbers of fullerenes and ipr fullerenes up to 400 vertices . </S>",
    "<S> we also check up to 316 vertices a conjecture of barnette that cubic planar graphs with maximum face size 6 are hamiltonian and verify that the smallest counterexample to the spiral conjecture has 380 vertices . </S>",
    "<S> + note : this is the unedited version of our paper which was submitted and subsequently accepted for publication in _ journal of chemical information and modeling_. the final edited and published version can be accessed at http://dx.doi.org/10.1021/ci3003107 </S>"
  ]
}