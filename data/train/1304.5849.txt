{
  "article_text": [
    "it is widely believed that np - hard problems do not admit polynomial - time deterministic algorithms .",
    "nevertheless , such problems tend to appear in practical applications and it is necessary to deal with them anyway . among many approaches to np - hard problems _ parameterized complexity _ has recently received a lot of attention .",
    "it was first studied systematically by downey and fellows in @xcite .",
    "the main idea of parameterized complexity is to equip the instance of a problem with a parameter and confine the superpolynomial behaviour of the algorithm to the parameter .",
    "here we can efficiently solve large instances of the problem as long as the parameter is small .    _",
    "parameterized complexity_. more formally , an instance of a parameterized problem is a pair @xmath5 where @xmath6 .",
    "xp is the class of parameterized problems such that for every @xmath7 there is an algorithm that solves that problem in time @xmath8 , for some function @xmath2 ( that does not depend on @xmath9 ) .",
    "one example is the clique problem parameterized by the size of the clique defined as follows : given @xmath10 where @xmath11 is graph and @xmath7 is a natural number , is there a clique of size @xmath7 in @xmath11 ?",
    "one can simply enumerate all @xmath7-subsets of vertices to solve the problem in time @xmath12 , hence , in time polynomial for every fixed @xmath7 .",
    "much more desirable parameterized complexity is fpt .",
    "a parameterized problem is called _ fixed parameter tractable _ ( fpt ) if there is an algorithm that for every instance @xmath5 solves the problem in time @xmath13 for some function @xmath2 ( that does not depend on @xmath14 ) .",
    "that is , for a fixed parameter @xmath7 , then problem is solvable in polynomial time and the degree of the polynomial does not depend on @xmath7 .",
    "satisfability of boolean formula parameterized by number of variables is fpt ; it can be solved by a brute force algorithm in time @xmath15 where m is size of instance .",
    "downey and fellows in their monograph @xcite included a list of open problems , asking whether they admit an fpt solution ( `` fpt suspects '' ) or are hard by means of parameterized complexity ( `` tough customers '' ) .",
    "recently , fomin and marx have revised this list of problems @xcite .",
    "many of the problems from the original list have been solved since the publication of @xcite , yet chain minor remains open .",
    "it was listed as a `` tough customer ''  suspecting it is not fixed parameter tractable .",
    "however , we prove otherwise .    _",
    "chain minors_. chain minors were introduced by mring and mller in @xcite in the context of scheduling stochastic project networks and first studied systematically by gustedt in @xcite and in his phd thesis @xcite .",
    "gustedt proved that finite posets are _ well quasi ordered _ by chain minors , that is , in any infinite sequence of posets there is a pair of posets such that one is a chain minor of the other .",
    "a consequence of this fact is that any class of graphs closed under taking chain minors can be characterized by a finite family of minimal forbidden posets .",
    "the chain minor problem is to decide , given two posets @xmath0 and @xmath1 , whether @xmath0 is a chain minor of @xmath1 .",
    "the parameterized approach to chain minor is justified as gustedt showed in @xcite that chain minor is np - hard ( giving a reduction from precendence constrained scheduling ) .",
    "note that it is not known whether chain minor is np - complete .",
    "there is no obvious nondeterministic polynomial - time algorithm for that problem , except for a very simple case  gustedt in his phd thesis has proved that chain minor is np - complete when restricted to posets of height at most 3 .    _",
    "our results_. gustedt also gave an xp algorithm for the chain minor problem @xcite .",
    "more specifically , he gave an algorithm that checks whether @xmath0 is a chain minor of @xmath1 in time @xmath16 .",
    "we improve his result , giving two fixed parameter tractable algorithms ( parameterized by @xmath17 )  randomized and deterministic  where the former one runs in @xmath18 time and the latter in @xmath19 time .",
    "both algorithms need linear memory .",
    "the technique that we use to design the fpt algorithm is called _ color coding _ and was originally developed by alon , yster , and zwick in @xcite to give the first fpt algorithm for the k - path problem (= finding a path of size @xmath7 in a given graph ) . since then",
    ", this technique has been successfully applied many times , yet in most of those examples colors where introduced artificially ( as in k - path ) . in our case , they are naturally derived from the problem definition .",
    "a finite partially ordered set ( _ poset _ ) is a pair @xmath20 where @xmath21 is a finite set and @xmath22 is a binary relation on @xmath21 that is transitive , irreflexive , and antisymmetric .",
    "a _ chain _ in a poset is a sequence of elements @xmath23 , @xmath24 such that @xmath25 , for all @xmath26",
    ".    given two finite posets @xmath27 and @xmath28 , we say that @xmath0 is a _ chain minor _ of @xmath1 ( @xmath29 ) if and only if there exists a partial function @xmath30 with a property that for every chain @xmath31 in @xmath0 there is a chain @xmath32 in @xmath1 such that @xmath33 .",
    "in this case , @xmath2 a _ witness _ for @xmath29 and we write @xmath34 .",
    "it is easy to check that @xmath35 is a quasi - order ( transitive and antisymmetric ) .",
    "one can easily check that if @xmath36 and @xmath37 is induced by @xmath38 ( that is , @xmath0 is subposet of @xmath1 ) , then @xmath0 is also a chain minor of @xmath1 .",
    "is a chain minor of the right poset @xmath1 as certified by the witness function from the elements of the @xmath1 to the elements of @xmath0 . ]",
    "our goal is to present a deterministic fpt algorithm",
    ". we will start with a randomized algorithm and use a standard technique ( of splitters ) to derandomize it at the price of slightly worse time complexity .",
    "however , we need some auxiliary lemmas first .",
    "[ detlem ] there is a deterministic algorithm which given two posets @xmath0 and @xmath1 and a partial function @xmath30 determines whether @xmath34 in time @xmath39 .    for @xmath40 ,",
    "let @xmath41 be the set of elements less or equal to @xmath42 in @xmath1 , that is , @xmath43 .",
    "it is enough to iterate over all chains of @xmath0 , and for every chain @xmath44 consider only those vertices of @xmath45 which are mapped by @xmath2 to any of @xmath46  let us call them @xmath47 .",
    "let us now consider vertices from @xmath47 in topological order .",
    "for every vertex @xmath42 , let us compute the maximum @xmath48 such that one can find a chain @xmath49 in set @xmath41 ( as usual , we demand @xmath33 ) .",
    "let us call that value @xmath50 .    to calculate @xmath50 knowing @xmath51 of every predecessor , we just take @xmath52 the solution can be read off from @xmath51 values .",
    "[ smalluniverse ] let @xmath0 and @xmath1 be finite posets and @xmath53 .",
    "if @xmath34 , then there is a subposet @xmath54 of @xmath1 of size at most @xmath55 such that if @xmath56 is equal to @xmath2 on @xmath54 , then @xmath57 .",
    "let @xmath34 and let @xmath58 be the set of all chains in @xmath58 .",
    "@xmath58 has at most @xmath59 elements ( as any subset of the elements from @xmath60 forms at most one chain ) . for every chain @xmath61 , take an arbitrary chain @xmath62 in @xmath1 such that @xmath33 , for @xmath63",
    "now let @xmath64 be @xmath65 .",
    "notice that @xmath66 .",
    "if @xmath56 is equal to @xmath2 on @xmath54 , we have to check that given a chain @xmath67 in @xmath0 one can find preimages with respect to @xmath56 of the elements of that chain such that the preimages form a chain in @xmath1 .",
    "it suffices to take the elements @xmath68 from above ; they belong to @xmath54 by definition , thus @xmath69 for @xmath70 and the elements @xmath71 were chosen to be a chain .",
    "now we will state and prove a key lemma for theorem [ thmrandom ] .",
    "[ prob ] if @xmath29 , then a function @xmath72 taken uniformly at random from the set of all such functions is a witness for @xmath29 with probability at least @xmath73 , where @xmath74 .",
    "let @xmath2 be a witness for @xmath29 .",
    "now take @xmath54 as in lemma [ smalluniverse ] .",
    "it follows from lemma [ smalluniverse ] that it is sufficient to show that a function @xmath75 taken uniformly at random is equal to @xmath2 on @xmath54 with high probability , as the probability of @xmath75 being a witness for @xmath29 is at least as large .",
    "now the lemma follows from the following simple calculation .",
    "@xmath76    now we are ready to prove theorem [ thmrandom ] .",
    "[ thmrandom ] there is a randomized algorithm for chain minor with time complexity @xmath77 and linear space complexity .",
    "let @xmath74 .",
    "it is enough to repeat the following procedure @xmath78 times : take a random function @xmath75 and check whether it is a witness for @xmath29 . if any of those function is a witness , return yes ; otherwise , return no .",
    "the desired time and space complexity follow from lemma [ detlem ] .",
    "lemma [ prob ] bounds the probability of an error by a constant .",
    "indeed , if @xmath79 , then the probability that the algorithm answers no is not greater then @xmath80 , where @xmath81 , which is bounded by @xmath82 , for @xmath83 ( and tends to @xmath84 as @xmath7 tends to infinity ) .",
    "we will derandomize the algorithm from theorem [ thmrandom ] using a well - known derandomization technique of splitters .",
    "a @xmath85-splitter is a family of functions @xmath86 , @xmath87 , such that for every @xmath88 there is some function @xmath89 which is injective on @xmath90 .",
    "we will need the following theorem by naor , schulman , and srinivasan from @xcite .",
    "( @xcite ) there exists a @xmath91-splitter that can be constructed in time @xmath92 .",
    "[ thmdetermin ] there is a deterministic algorithm for chain minor with time complexity @xmath19 and linear space complexity .    given @xmath0 and @xmath1 ,",
    "let us take @xmath53 , @xmath93 .",
    "fix a bijection between @xmath94 and @xmath45 .",
    "now we can just iterate through every @xmath95 splitter and every function from the set @xmath96 to @xmath0 , and check whether the composition of these two functions is a witness for @xmath29 .    to prove correctness of the algorithm ,",
    "let us consider @xmath34 and take @xmath54 as in lemma @xmath97 .",
    "it follows from the definition of splitters that there exists a function @xmath2 , such that @xmath2 is injective on @xmath54 .",
    "then , just because we iterate over all functions from the set @xmath98 to @xmath0 at some point we take one , such that the composition equals @xmath2 when restricted to @xmath54 .",
    "this pair yields a witness for @xmath29 .",
    "1 .   it is easy to prove that every class of posets closed under taking of chain minors can be characterized by a set of minimal forbidden chain minors .",
    "gustedt proved in @xcite that posets are well quasi ordered .",
    "consequently , each such set of forbidden chain minors is finite .",
    "gustedt also gave an xp algorithm to decide whether a poset @xmath99 is a chain minor of a poset @xmath1 when parameterized by the number of elements of @xmath99 .",
    "these two results show that for every class of posets @xmath100 closed under taking chain minors there exists a polynomial - time algorithm deciding whether the input poset @xmath1 is in @xmath100 .",
    "( the exponent of the polynomial depends on the class . ) + we give an fpt algorithm to test whether a poset @xmath99 is a chain minor of a poset @xmath1 when parameterized by the number of elements of @xmath99 .",
    "a consequence of our result is that for every class of posets @xmath100 closed under taking chain minors there exists a @xmath4 algorithm deciding whether the input poset @xmath1 is in @xmath100 .",
    "the project of graph minors of robertson and seymour is arguably one of the most significant achievements in modern graph theory .",
    "robertson and seymour proved that graphs are well quasi ordered under graph minors and gave an fpt algorithm to decide whether a graph @xmath99 is a minor of a graph @xmath11 when parameterized by @xmath99 .",
    "they were also able to describe the structure of graphs that do not contain a fixed graph as a minor .",
    "+ is there a parallel theory possible for chain minors in posets ?",
    "gustedt proved in @xcite that chain minors are well quasi ordered and this work gives an fpt algorithm for the chain minor problem .",
    "however , neither of the two elucidates the structure of posets with a forbidden chain minor .",
    "is a structural characterization possible ? +",
    "in particular , it looks that characterizing posets without @xmath101 as a chain minor is already the first challenge .",
    "( @xmath101 is a poset consisting of @xmath102 disjoint chains each on @xmath42 vertices . )",
    "note that any poset of size @xmath102 and height @xmath42 is a chain minor of @xmath103 .",
    "it is also quite straightforward that posets without @xmath104 chain minor are just posets of height less then @xmath42 but even a characterization of posets without @xmath105 as a chain minor seems elusive .",
    "3 .   let us recall that gustedt showed in @xcite that the chain minor problem is np - hard but it is not known whether the problem is np - complete .",
    "this is an interesting question .",
    "in particular , given two posets @xmath0 , @xmath1 and a function @xmath106 , is there a polynomial - time deterministic algorithm deciding whether @xmath107 is a witness for @xmath79 ?",
    "such algorithm would naturally give rise to an np algorithm for chain minor .",
    "4 .   at last , both our algorithms are double exponential in the parameter .",
    "could this be improved to get a single exponential dependence ?"
  ],
  "abstract_text": [
    "<S> given two finite posets @xmath0 and @xmath1 , @xmath0 is a _ chain minor _ of @xmath1 if there exists a partial function @xmath2 from the elements of @xmath1 to the elements of @xmath0 such that for every chain in @xmath0 there is a chain @xmath3 in @xmath1 with the property that @xmath2 restricted to @xmath3 is an isomorphism of chains .    </S>",
    "<S> we give an algorithm to decide whether a poset @xmath0 is a chain minor of a poset @xmath1 that runs in time @xmath4 for every fixed poset @xmath0 . </S>",
    "<S> this solves an open problem from the monograph by downey and fellows [ _ parameterized complexity _ , 1999 ] who asked whether the problem was fixed parameter tractable . </S>"
  ]
}