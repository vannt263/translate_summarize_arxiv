{
  "article_text": [
    "ontologies are logical theories that formalize domain - specific knowledge , thereby making it available for machine processing .",
    "recent years have seen an increasing interest in using ontologies in data - intensive applications , especially in the context of intelligent systems , the semantic web , and in data integration .",
    "a much studied scenario is that of answering queries over an incomplete database under the open world semantics , taking into account knowledge provided by an ontology @xcite .",
    "we refer to this as _ ontology - based data access ( obda)_.    there are several important use cases for obda .",
    "a classical one is to enrich an incomplete data source with background knowledge , in order to obtain a more complete set of answers to a query .",
    "for example , if a medical patient database contains the facts that patient1 has finding erythema migrans and patient2 has finding lyme disease , and the ontology provides the background knowledge that a finding of erythema migrans is sufficient for diagnosing lyme disease , then both patient1 and patient2 can be returned when querying for patients that have the diagnosis lyme disease .",
    "this use of ontologies is also central to query answering in the semantic web .",
    "obda can also be used to enrich the data schema ( that is , the relation symbols used in the presentation of the data ) with additional symbols to be used in a query .",
    "for example , a patient database may contain facts such as patient1 has diagnosis lyme disease and patient2 has diagnosis listeriosis , and an ontology could add the knowledge that lyme disease and listeriosis are both bacterial infections , thus enabling queries such as `` return all patients with a bacterial infection '' despite the fact that the data schema does not include a relation or attribute explicitly referring to bacterial infections .",
    "especially in the bio - medical domain , applications of this kind are fueled by the availability of comprehensive professional ontologies such as snomed ct and fma .",
    "a third prominent application of obda is in data integration , where an ontology can be used to provide a uniform view on multiple data sources @xcite .",
    "this typically involves mappings from the source schemas to the schema of the ontology , which we will not explicitly consider here .",
    "we may view the actual database query and the ontology as two components of one composite query , which we call an _ ontology - mediated query_. obda can then be described as the problem of answering ontology - mediated queries .",
    "the database queries used in obda are typically unions of conjunctive queries , while the ontologies are typically specified in an ontology language that is either a description logic , or , more generally , a suitable fragment of first - order logic . for popular choices of ontology languages , the data complexity of ontology - mediated queries can be conp - complete , which has resulted in extensive research on finding tractable classes of ontology - mediated queries , as well as on finding classes of ontology - mediated queries that are amenable to efficient query answering techniques @xcite .",
    "in particular , relevant classes of ontology - mediated queries have been identified that admit an fo - rewriting ( i.e. , that are equivalent to a first - order query ) , or , alternatively , admit a datalog - rewriting .",
    "fo - rewritings make it possible to answer ontology - based queries using traditional database management systems .",
    "this is considered one of the most promising approaches for obda , and is currently the subject of significant research activity , see for example @xcite .",
    "the main aims of this paper are ( i )  to characterize the expressive power of ontology - mediated queries , both in terms of more traditional database query languages and from a descriptive complexity perspective and ( ii )  to make progress towards complete and decidable classifications of ontology - mediated queries , with respect to their data complexity , as well as with respect to fo - rewritability and datalog - rewritability .",
    "we take an ontology - mediated query to be a triple @xmath0 where is a _ data schema _ , an ontology , and @xmath1 a query .",
    "here , the data schema fixes the set of relation symbols than can occur in the data and the ontology @xmath2 is a logical theory that may use the relation symbols from as well as additional symbols .",
    "the query @xmath1 can use any relation symbol that occurs in or . as ontology languages",
    ", we consider a range of standard description logics ( dls ) and several fragments of first - order logic that embed ontology languages such as datalog@xmath3 @xcite , namely the guarded fragment ( gf ) , the unary negation fragment ( unfo ) , and the guarded negation fragment ( gnfo ) . as query languages for @xmath1",
    ", we focus on unions of conjunctive queries ( ucqs ) and unary atomic queries ( aqs ) . the latter",
    "are of the form @xmath4 , with @xmath5 a unary relation symbol , and correspond to what are traditionally called _ instance queries _ in the obda literature ( note that @xmath5 may be a relation symbol from @xmath2 that is not part of the data schema ) .",
    "these two query languages are among the most used query languages in obda . in the following",
    ", we use @xmath6 to denote the query language that consists of all ontology - mediated queries @xmath0 with specified in the ontology language and @xmath1 specified in the query language .",
    "for example , ( gf , ucq ) refers to ontology - mediated queries in which is a gf - ontology and @xmath1 is a ucq .",
    "we refer to such query languages @xmath6 as _ ontology - mediated query languages ( or , obda languages)_. = -1    in section  [ sect : alcucq ] , we characterize the expressive power of obda languages in terms of natural fragments of ( negation - free ) disjunctive datalog .",
    "we first consider the basic description logic . we show that ( , ucq ) has the same expressive power as monadic disjunctive datalog ( abbreviated mddlog ) and that ( , aq ) has the same expressive power as unary queries defined in a syntactic fragment of mddlogthat we call connected simple mddlog .",
    "similar results hold for various description logics that extend with , for example , inverse roles , role hierarchies , and the universal role , all of which are standard operators included in the w3c - standardized ontology language owl2 dl .",
    "turning to other fragments of first - order logic , we then show that ( unfo , ucq ) also has the same expressive power as mddlog , while ( gf , ucq ) and ( gnfo , ucq ) are strictly more expressive and coincide in expressive power with frontier - guarded disjunctive datalog , which is the ddlog  fragment given by programs in which , for every atom @xmath7 in the head of a rule , there is an atom @xmath8 in the rule body that contains all variables from  @xmath7 .",
    "in sections  [ sect : obdammsnp ] and  [ sect : obdatocsp ] , we study ontology - mediated queries from a _ descriptive complexity _ perspective . in particular , we establish an intimate connection between obda query languages , constraint satisfaction problems , and mmsnp .",
    "recall that constraint satisfaction problems ( csps ) form a subclass of the complexity class that , although it contains -hard problems , is in certain ways more computationally well - behaved .",
    "the widely known feder - vardi conjecture @xcite states that there is a dichotomy between and for the class of all csps , that is , each csp is either in or -hard . in other words , the conjecture asserts that there are no csps which are -intermediate in the sense of ladner s theorem .",
    "monotone monadic strict without inequality ( abbreviated mmsnp ) was introduced by feder and vardi as a logical generalization of csp that enjoys similar computational properties @xcite . in particular ,",
    "it was shown in @xcite that there is a dichotomy between and for mmsnp sentences if and only if the feder - vardi conjecture holds .    in section  [",
    "sect : obdammsnp ] , we observe that ( , ucq ) and many other obda languages based on ucqs have the same expressive power as the query language commsnp , consisting of all queries whose complement is definable by an mmsnp formula with free variables . in the spirit of descriptive complexity theory , we say that ( , ucq ) _ captures _ commsnp .",
    "in fact , this result is a consequence of the results in section  [ sect : alcucq ] and the observation that mddloghas the same expressive power as commsnp .",
    "it has fundamental consequences regarding the data complexity of ontology - mediated queries and the containment problem for such queries , which we describe next .",
    "first , we obtain that there is a dichotomy between and conpfor ontology - mediated queries from ( , ucq ) if and only if the feder - vardi conjecture holds , and similarly for many other obda languages based on ucqs . to appreciate this result , recall that considerable effort has been directed towards identifying tractable classes of ontology - mediated queries .",
    "ideally , one would like to classify the data complexity of every ontology - mediated query within a given obda language such as ( , ucq ) . our aforementioned result ties this task to proving the feder - vardi conjecture .",
    "significant progress has been made in understanding the complexity of csps and mmsnps @xcite , and the connection established in this paper facilitates the transfer of techniques and results from csp and mmsnp in order to analyze the data complexity of query evaluation in ( , ucq ) .",
    "we also consider the standard extension of with functional roles and note that , for query evaluation in ( , aq ) , there is no dichotomy between and conpunless = .    to establish a counterpart of ( gf , ucq ) and ( gnfo , ucq ) in the mmsnp world , we introduce guarded monotone strict np ( abbreviated gmsnp ) as a generalization of mmsnp ;",
    "specifically , gmsnp is obtained from mmsnp by allowing guarded second - order quantification in the place of monadic second - order quantification , similarly as in the transition from mddlogto frontier - guarded disjunctive datalog .",
    "the resulting query language cogmsnp has the same expressive power as frontier - guarded disjunctive datalog , and therefore , in particular , ( gf , ucq ) and ( gnfo , ucq ) capture cogmsnp .",
    "we observe that gmsnp has the same expressive power as the extension mmsnp@xmath9 of mmsnp proposed in @xcite .",
    "it follows from our results in section  [ sect : alcucq ] that gmsnp ( and thus mmsnp@xmath9 ) is strictly more expressive than mmsnp , closing an open problem from @xcite .",
    "we leave it as an open problem whether gmsnp is computationally as well - behaved as mmsnp , that is , whether there is a dichotomy between and if the feder - vardi conjecture holds .",
    "the second application of the connection between obda and mmsnp concerns query containment .",
    "it was shown in @xcite that containment between mmsnp sentences is decidable .",
    "we use this result to prove that query containment is decidable for many obda languages based on ucqs , including ( , ucq ) and ( gf , ucq ) . note that this refers to a very general form of query containment in obda , as recently introduced and studied in @xcite . for ( , aq ) , this problem ( and every other decision problem discussed below ) turns out to be undecidable . in section  [",
    "sect : obdatocsp ] , we consider obda languages based on atomic queries and establish a tight connection to ( certain generalizations of ) csps . this connection is most easily stated for _",
    "boolean _ atomic queries ( baqs ) : we prove that ( @xmath10,baq ) captures the query language that consists of all boolean queries definable as the complement of a csp .",
    "similarly ( @xmath10,aq ) extended with the universal role captures the query language that consists of all unary queries definable as the complement of a _ generalized csp _ , which is given by a finite collection of structures enriched with a constant symbol .",
    "we then proceed to transfer results from the csp literature to the ontology - mediated query languages ( @xmath10 , baq ) and ( @xmath10 , aq ) .",
    "first we immediately obtain that the existence of a /conpdichotomy for these ontology - mediated query languages is equivalent to the feder - vardi conjecture .",
    "then we show that query containment is not only decidable ( as we could already conclude from the connection with commsnp described in section  [ sect : obdammsnp ] ) , but , in fact , -complete .",
    "finally , taking advantage of recent results for csps @xcite , we are able to show that fo - rewritability and datalog - rewritability , as properties of ontology - mediated queries , are decidable and -complete for ( , aq ) and ( , baq ) .",
    "the results in sections  [ sect : obdammsnp ] and  [ sect : obdatocsp ] just summarized are actually proved not only for , but also for several of its extensions .",
    "this relies on the equivalences between dl - based obda - languages established in section  [ sect : alcucq ] .    *",
    "related work * a connection between query answering in dls and the negation - free fragment of disjunctive datalog was first discovered and utilized in the influential @xcite , see also @xcite .",
    "this research is concerned with answer - preserving translations of ontology - mediated queries into disjunctive datalog .",
    "in contrast to the current paper , it does not consider the expressive power of ontology - mediated queries , nor their descriptive complexity .",
    "a connection between dl - based obda and csps was first found and exploited in @xcite , in a setup that is different from the one studied in this paper . in particular , instead of focusing on ontology - mediated queries that consist of a data schema , an ontology , and a database query",
    ", @xcite concentrates on ontologies while quantifying universally over all database queries and without fixing a data schema .",
    "it establishes links to the feder - vardi conjecture that are incomparable to the ones found in this paper , and does not consider the expressive power and descriptive complexity of queries used in obda .",
    "* schemas , instances , and queries . *",
    "a _ schema _ is a finite collection @xmath11 of relation symbols with associated arity .",
    "a _ fact _ over @xmath12 is an expression of the form @xmath13 where @xmath14 is an @xmath15-ary relation symbol , and @xmath16 are elements of some fixed , countably infinite set @xmath17 of _ constants_. an _ instance _ @xmath18 over @xmath12 is a finite set of facts over @xmath12 .",
    "the _ active domain _",
    "@xmath19 of  is the set of all constants that occur in the facts of  .",
    "we will frequently use boldface notation for tuples , such as in @xmath20 , and we denote by @xmath21 the empty tuple .    a _ query over _ is semantically defined as a mapping @xmath1 that associates with every instance over a set of _ answers _ @xmath22 , where @xmath23 is the _ arity _ of @xmath1 . if @xmath24 , then we say that @xmath1 is a",
    "_ boolean query _ , and we write @xmath25 if @xmath26 and otherwise .    a prominent way of specifying queries is by means of first - order logic ( fo ) .",
    "specifically , each schema @xmath12 and domain - independent fo - formula @xmath27 that uses only relation names from @xmath12 ( and , possibly , equality ) give rise to the @xmath15-ary query @xmath28 , defined by setting for all @xmath12-instances  @xmath18 , @xmath29\\}.\\ ] ] to simplify exposition , we assume that fo - queries do not contain constants .",
    "we use foq to denote the set of all first - order queries , as defined above .",
    "similarly , we use cq and ucq to refer to the class of conjunctive queries and unions of conjunctive queries , defined as usual and allowing the use of equality .",
    "aq denotes the set of _ atomic queries _ , which are of the form @xmath4 with @xmath5 a unary relation symbol .",
    "each of these is called a _ query language _ , which is defined abstractly as a set of queries . besides foq , cq , ucq , and aq , we consider various other query languages introduced later , including ontology - mediated ones and variants of datalog .",
    "two queries @xmath30 and @xmath31 over are _ equivalent _ , written @xmath32 , if for every @xmath12-instance , we have @xmath33 .",
    "we say that query language @xmath34 is _ at least as expressive as _ query language @xmath35 , written @xmath36 , if for every query @xmath37 over some schema , there is a query @xmath38 over with @xmath39 .",
    "@xmath35 and @xmath34 _ have the same expressive power _ if @xmath40 .",
    "* ontology - mediated queries . *",
    "we introduce the fundamentals of ontology - based data access .",
    "an _ ontology language _  is a fragment of first - order logic ( i.e. , a set of fo sentences ) , and an _",
    "-ontology _ is a finite set of sentences from  .",
    "we introduce various ontology languages throughout the paper , including descriptions logics and the guarded fragment .",
    "an _ ontology - mediated query _ over a schema @xmath12 is a triple @xmath0 , where is an ontology and @xmath1 a query over @xmath41 , with @xmath42 the set of relation symbols used in . here",
    ", we call @xmath12 the _ data schema_. note that the ontology can introduce symbols that are not in the data schema . as explained in the introduction , this allows the ontology to enrich the schema of the query @xmath1 . of course",
    ", we do not require that every relation of the data schema needs to occur in the ontology .",
    "we have explicitly included @xmath12 in the specification of the ontology - mediated query to emphasize that the ontology - mediated query is interpreted as a query over  @xmath12 .",
    "the semantics of an ontology - mediated query is given in terms of _ certain answers _ , defined next .",
    "a _ finite relational structure _ over a schema is a pair @xmath43 where @xmath44 is a non - empty finite set called the _ domain _ of and is an instance over with @xmath45 .",
    "when is understood , we use @xmath46 to denote the set of all finite relational structures @xmath47 over @xmath48 such that @xmath49 .",
    "let @xmath0 be an ontology - mediated query with @xmath1 of arity  @xmath15 .",
    "the _ certain answers to @xmath1 on an -instance given _ is the set @xmath50 of tuples @xmath51 such that for all @xmath52 with @xmath53 ( that is , all models of that extend ) , we have @xmath54 .",
    "note that all ontology languages considered in this paper enjoy finite controllability , meaning that finite relational structures can be replaced with unrestricted ones without changing the certain answers to unions of conjunctive queries @xcite .",
    "every ontology - mediated query @xmath55 can be semantically interpreted as a query @xmath56 over @xmath12 by setting @xmath57 for all @xmath12-instances  .",
    "taking this view one step further , each choice of an ontology language and query language gives rise to a query language , denoted @xmath6 , defined as the set of queries @xmath58 with a schema , @xmath2 an @xmath59-ontology , and @xmath60 a query over @xmath61 .",
    "we refer to such query languages @xmath6 as _ ontology - mediated query languages _ ( or , _ obda languages _ ) .",
    "@xmath62    \\qquad\\qquad\\qquad \\rightarrow   \\exists y ( \\mn{diagnosis}(x , y ) \\wedge \\mn{lymedisease}(y))\\ )   \\\\[1 mm ] \\forall x ( \\ ( \\mn{lymedisease}(x ) \\vee \\mn{listeriosis}(x))\\rightarrow\\mn{bacterialinfection}(x)\\ ) & \\mn{lymedisease } \\sqcup \\mn{listeriosis } & \\sqsubseteq & \\mn{bacterialinfection } \\\\[1 mm ] \\forall x(\\ \\exists y .(\\mn{hereditarydisposition}(y ) \\wedge \\mn{parent}(x , y))\\to   \\mn{hereditarydisposition}(y ) ) \\ ) & \\exists \\mn{parent } .",
    "\\mn{hereditarydisposition } & \\sqsubseteq &    \\mn{hereditarydisposition }   \\end{array}\\ ] ]    [ ex : first ] the left - hand side of table  [ tab : ontology ] shows an ontology  that is formulated in the guarded fragment of fo . consider the ontology - mediated query @xmath0 with data schema and query @xmath63    & & \\ \\",
    "\\mn{hereditarypredisposition } ,    \\mn{finding } , \\mn{diagnosis } , \\mn{parent } \\ }    \\\\[1 mm ]    q(x ) & = & \\exists y ( \\ \\mn{diagnosis}(x , y ) \\wedge \\mn{bacterialinfection}(y ) \\ ) .",
    "\\end{array}\\ ] ] for the instance over that consists of the facts @xmath64    \\mn{diagnosis}(\\mn{pat2},\\mn{may7diag2 } ) &    \\mn{listeriosis}(\\mn{may7diag2 } )    \\end{array}\\ ] ] we have @xmath65 .",
    "* description logics for specifying ontologies .",
    "* in description logic , schemas are generally restricted to relations of arity one and two , called _",
    "concept names _ and _ role names _ , respectively . for brevity",
    ", we speak of _ binary schemas_. we briefly review the basic description logic .",
    "relevant extensions of will be introduced later on in the paper .",
    "an _ -concept _ is formed according to the syntax rule @xmath66 where @xmath5 ranges over concept names and @xmath67 over role names .",
    "an _ -ontology _ is a finite set of _ concept inclusions _",
    "@xmath68 , with @xmath69 and @xmath70 -concepts .",
    "we define the semantics of -concepts by translation to fo - formulas with one free variable , as shown in table  [ fig : alcsem ] .",
    "@xmath71      \\bot^*(x ) & = & \\bot & &    ( c \\sqcup d)^*(x ) & = & c^*(x ) \\vee d^*(x )       \\\\[1 mm ]      a^*(x ) & = & a(x ) & &           ( \\exists r .",
    "c)^*(x ) & = & \\exists y \\ , r(x , y ) \\wedge c^*(y )        \\\\[1 mm ]      ( \\neg c)^*(x ) & = & \\neg c^*(x ) & &      ( \\forall r .",
    "c)^*(x ) & = & \\forall y \\ , r(x , y ) \\rightarrow c^*(y )",
    "\\end{array } \\ ] ]    an -ontology then translates into the set of fo - sentences @xmath72 . on the right - hand side of table  [ tab : ontology ] , we show the -version of the guarded fragment ontology displayed on the left - hand side .",
    "note that , although the translation is equivalence - preserving in this case , in general , the guarded fragment is a more expressive ontology language than . throughout the paper , we do not explicitly distinguish between a dl ontology and its translation into fo .",
    "we remark that , from a dl perspective , the above definitions of instances and certain answers correspond to making the _ standard name assumption ( sna ) _ in aboxes , which in particular implies the _ unique name assumption_. we make the sna only to facilitate uniform presentation ; the sna is inessential for the results presented in this paper .",
    "[ ex : second ] let and be as in example  [ ex : first ] . for @xmath73 , the ontology - mediated query @xmath74 is equivalent to the union of conjunctive queries @xmath75 . for @xmath76 ,",
    "the ontology - mediated query @xmath77 is equivalent to the query defined by the datalog program @xmath78",
    "p(x ) & \\leftarrow & \\mn{parent}(y , x ) \\wedge p(y )    \\end{array}\\ ] ] but not to any first - order query .",
    "we show that for many obda languages , there is a natural fragment of disjunctive datalog with exactly the same expressive power .    a _ disjunctive datalog rule _ @xmath79 has the form @xmath80 with @xmath81 and @xmath82 .",
    "we refer to @xmath83 as the _ head _ of @xmath79 , and to @xmath84 as the _ body _ of  @xmath79 . every variable that occurs in the head of a rule @xmath79",
    "is required to also occur in the body of @xmath79 .",
    "empty rule heads are denoted  @xmath85 .",
    "a _ disjunctive datalog ( ddlog ) program _",
    "@xmath86 is a finite set of disjunctive datalog rules with a selected _ goal predicate _ that does not occur in rule bodies and only in _",
    "goal rules _ of the form @xmath87 .",
    "the _ arity of @xmath86 _ is the arity of the relation .",
    "relation symbols that occur in the head of at least one rule of @xmath86 are _ intensional ( idb ) predicates _ of @xmath86 , and all remaining relation symbols in @xmath86 are _ extensional ( edb ) predicates_. every ddlogprogram @xmath86 of arity @xmath15 naturally defines an @xmath15-ary query @xmath88 over the schema that consists of the edb predicates of  @xmath86 : for every instance over , we have @xmath89 & & & \\text{for all } \\dmf'\\in \\mn{mod}(\\pi ) \\text { with } \\dmf\\subseteq \\dmf'\\}. \\end{array}\\ ] ] here , @xmath90 denotes the set of all instances over @xmath91 that satisfy all rules in @xmath86 , with @xmath91 the set of all idb and edb predicates in @xmath86 .",
    "note that the ddlogprograms considered in this paper are negation - free . restricted to this fragment",
    ", there is no difference between the different semantics of ddlogstudied e.g.  in @xcite .",
    "we use @xmath92 in rule bodies as a shorthand for `` @xmath93 is in the active domain of the edb predicates '' . specifically , whenever we use @xmath94 in a rule of a ddlogprogram @xmath86",
    ", we assume that @xmath94 is an idb predicate and that the program @xmath86 includes all rules of the form @xmath95 where @xmath67 is an edb predicate of @xmath86 and @xmath96 is a tuple of distinct variables that includes @xmath93 .",
    "a _ monadic disjunctive datalog ( mddlog ) program _ is a ddlogprogram in which all idb predicates with the possible exception of are monadic .",
    "we use mddlogto denote the query language that consists of all queries defined by an mddlogprogram .",
    "we show that ( , ucq ) has the same expressive power as mddlogand identify a fragment of mddlogthat has the same expressive power as ( , aq ) .",
    "in addition , we consider the extensions of with inverse roles , role hierarchies , transitive roles , and the universal role , which we also relate to mddlogand its fragments . to match the syntax of and its extensions , we generally assume schemas to be binary throughout this section . and  [ thm : otherdlucq ] ( which speak about ucqs ) , but required for theorems  [ thm : alcmdd1 ] , [ thm : alcmdd2 ] , and [ thm : alcmdd3 ] ( which speak about aqs ) to hold . ] * ( @xmath97,ucq ) and mddlog . *",
    "the first main result of this section is theorem  [ thm : alctomdd ] below , which relates ( , ucq ) and mddlog .",
    "[ thm : alctomdd ] ( , ucq ) and mddloghave the same expressive power .",
    "( sketch ) we start with giving some intuitions about answering ( , ucq ) queries which guide our translation of such queries into mddlogprograms . recall that the definition of certain answers to an ontology - mediated query on an instance @xmath18 involves a quantification over all models of @xmath2 which extend @xmath18 .",
    "it turns out that in the case of ( , ucq ) queries ( and , as we will see later , more generally for ( unfo , ucq ) queries ) , it suffices to consider a particular type of extensions of @xmath18 that we term _",
    "pointwise extensions_. intuitively , such an extension of @xmath18 corresponds to attaching domain - disjoint structures to the elements of @xmath18 .",
    "formally , for instances @xmath98 , we call @xmath99 a pointwise extension of @xmath18 if @xmath100 is the union of instances @xmath101 such that @xmath102 and @xmath103 for @xmath104 .",
    "the fact that we need only consider models of @xmath2 which are pointwise extensions of @xmath18 is helpful because it constrains the ways in which a cq can be satisfied .",
    "specifically , every homomorphism @xmath105 from @xmath1 to @xmath99 gives rise to a query @xmath106 obtained from @xmath1 by identifying all variables that @xmath105 sends to the same element , and to a decomposition of @xmath106 into a collection of components @xmath107 where the ` core component ' @xmath108 comprises all atoms of @xmath106 whose variables @xmath105 sends to elements of and for each @xmath109 in the image of @xmath105 , there is a ` non - core component ' @xmath110 , @xmath111 , such that @xmath110 comprises all atoms of @xmath106 whose variables @xmath105 sends to elements of @xmath109 .",
    "note that the non - core components are pairwise variable - disjoint and share at most one variable with the core component .",
    "we now detail the translation from an ontology - mediated query @xmath112 into an equivalent mddlogprogram .",
    "let @xmath113 be the set of subconcepts ( that is , syntactic subexpressions ) of concepts that occur in , and let @xmath114 denote the union of @xmath113 and the set of all cqs that have at most one free variable , use only symbols from @xmath1 , and whose number of atoms is bounded by the number of atoms of @xmath1 .",
    "a _ type _ ( for and @xmath1 ) is a subset of @xmath114 .",
    "the cqs present in @xmath114 include all potential ` non - core components ' from the intuitive explanation above .",
    "the free variable of a cq in @xmath114 ( if any ) represents the overlap between the core component and the non - core component .",
    "we introduce a fresh unary relation symbol @xmath115 for every type @xmath116 , and we denote by @xmath91 the schema that extends @xmath12 with these additional symbols . in the mddlogprogram that we aim to construct , the relation symbols @xmath115 will be used as idb relations , and the symbols from @xmath12 will be the ebd relations .",
    "we will say that a relational structure @xmath47 over @xmath117 is _ type - coherent _ if @xmath118 just in the case that @xmath119          & & \\{c\\in\\mn{cl}(\\omc , q)\\mid c \\text { unary } , \\bmf \\models c[d]\\}.    \\end{array}\\ ] ] set @xmath120 equal to the maximum of @xmath121 and the width of @xmath1 , that is , the number of variables that occur in @xmath1 . by a _",
    "diagram _ , we mean a conjunction @xmath122 of atomic formulas over the schema @xmath91 , with @xmath123 variables .",
    "a diagram @xmath124 is _ realizable _ if there exists a type - coherent @xmath125 that satisfies @xmath126 .",
    "a diagram @xmath124 _ implies _",
    "@xmath127 , with @xmath128 a sequence of variables from @xmath129 , if every type - coherent @xmath125 that satisfies @xmath124 under some variable assignment , satisfies @xmath127 under the same assignment .",
    "the desired mddlogprogram @xmath86 consists of the following collections of rules : @xmath130 \\bot & \\leftarrow&\\delta(\\textbf{x } ) & \\text { for all non - realizable   diagrams $ \\delta(\\textbf{x})$ } \\\\[1 mm ] \\mn{goal}(\\textbf{x } ' ) & \\leftarrow & \\delta(\\textbf{x } ) & \\text { for all     diagrams $ \\delta(\\textbf{x})$ that imply $ q(\\textbf{x}')$ }    \\end{array}\\ ] ] intuitively , these rules ` guess ' a pointwise extension @xmath99 of .",
    "specifically , the types @xmath115 guessed in the first line determine which subconcepts of are made true at each element of @xmath99 . since mddlogdoes not support existential quantifiers , the @xmath109 parts of @xmath99 can not be guessed explicitly . instead",
    ", the cqs included in the guessed types determine those non - core component queries that matched in the @xmath109 parts .",
    "the second line ensures coherence of the guesses and the last line guarantees that @xmath1 has the required match in @xmath99 .",
    "it is proved in the full version of this paper that the mddlogquery @xmath88 is indeed equivalent to @xmath0 .",
    "for the converse direction , let @xmath86 be an mddlogprogram .",
    "for each unary idb relation @xmath5 of @xmath86 , we introduce two fresh unary relations , denoted by @xmath5 and @xmath131 .",
    "the ontology @xmath2 enforces that @xmath131 represents the complement of @xmath5 , that is , it consists of all inclusions of the form @xmath132 let @xmath1 be the union of ( i ) all conjunctive queries that constitute the body of a goal rule , as well as ( ii ) all conjunctive queries obtained from a non - goal rule of the form @xmath133 by taking the conjunctive query @xmath134 it can be shown that the ontology - mediated query @xmath0 , where @xmath12 is the schema that consists of the edb relations of @xmath86 , is equivalent to the query defined by @xmath86 .",
    "* @xmath97 with atomic queries . *",
    "we characterize ( @xmath135,aq ) by a fragment of mddlog .",
    "this query language has the same expressive power as the obda language ( @xmath10,conq ) , where conq denotes the set of all _",
    "-concept queries _ , that is , queries @xmath136 with @xmath69 a ( possibly compound ) -concept .",
    "specifically , each query @xmath137 with @xmath138 can be expressed as a query @xmath139 where @xmath5 is a fresh concept name ( that is , it does not occur in @xmath48 ) and @xmath140 .",
    "as a consequence , ( , aq ) also has the same expressive power as ( @xmath141 ) , where tcq is the set of all cqs that take the form of a directed tree with a single answer variable at the root .    each disjunctive datalog rule can be associated with an undirected graph whose nodes are the variables that occur in the rule and whose edges reflect co - occurrence of two variables in an atom in the rule body .",
    "we say that a rule is _ connected _ if its graph is connected , and that a ddlogprogram is connected if all its rules are connected .",
    "an mddlogprogram is _ simple _ if each rule contains at most one atom @xmath142 with @xmath67 an edb relation ; additionally , we require that , in this atom , every variable occurs at most once .",
    "[ thm : alcmdd1 ] ( @xmath135,aq ) has the same expressive power as unary connected simple mddlog .",
    "( sketch ) the translation from ( , aq ) to unary connected simple mddlogqueries is a modified version of the translation given in the proof of theorem  [ thm : alctomdd ] .",
    "assume that @xmath0 with @xmath143 is given .",
    "we now take types to be subsets of @xmath113 and then define diagrams exactly as before ( with @xmath144 ) .",
    "the mddlogprogram @xmath86 consists of the following rules : @xmath145 \\bot & \\leftarrow&\\delta(\\textbf{x } ) & \\text { for all non - realizable   diagrams $ \\delta(\\textbf{x})$ } \\\\[0.5 mm ]    & & & \\text { of    the form $ p_{\\tau_1}(x ) \\wedge p_{\\tau_2}(x)$ , } \\\\[0.5 mm ]      & & & \\text { $ p_\\tau(x ) \\wedge a(x)$ , or } \\\\[0.5 mm ]   & & & \\text { $ p_{\\tau_1}(x_1)\\land s(x_1,x_2 )     \\land p_{\\tau_2}(x_2)$ } \\\\[1 mm ] \\mn{goal}(x ) & \\leftarrow & p_\\tau(x )   & \\quad \\text { for all } p_\\tau \\text { with } a \\in p_\\tau    \\end{array}\\ ] ] clearly , @xmath86 is unary , connected , and simple .",
    "equivalence of the queries @xmath0 and @xmath88 is proved in the full version of this paper .",
    "conversely , let @xmath86 be a unary connected simple mddlogprogram .",
    "it is easy to rewrite each rule of @xmath86 into an equivalent -concept inclusion , where @xmath146 is now regarded as a concept name .",
    "for example , @xmath147 is rewritten into @xmath148 and @xmath149 is rewritten into @xmath150 .",
    "let @xmath2 be the resulting ontology and let @xmath151 .",
    "then the query @xmath88 is equivalent to the query @xmath0 , where @xmath12 consists of the edb relations in @xmath86 .",
    "note that the connectedness condition is required since one can not express mddlogrules such as @xmath152 with @xmath153 in ( @xmath135,aq ) .",
    "multiple variable occurrences in edb relations have to be excluded because programs such as @xmath154 ( return all elements in @xmath5 if the instance contains no reflexive @xmath67-edge , and return the active domain otherwise ) also can not be expressed in ( @xmath135,aq ) .",
    "* extensions of @xmath97 . *",
    "we identify several standard extensions of ( @xmath135,ucq ) and ( , aq ) that have the same expressive power , and some that do not .",
    "we introduce the relevant extensions only briefly and refer to @xcite for more details .",
    "@xmath155 is the extension of @xmath135 in which one can state that a role name @xmath67 is the _ inverse _ of a role name @xmath156 , that is , @xmath157 ; @xmath158 is the extension in which one can state that a role name @xmath67 is _ included _ in a role name @xmath156 , that is , @xmath159 ; @xmath160 is the extension of @xmath135 in which one can require some roles names to be interpreted as _ transitive relations _ ; @xmath161 is the extension in which one can state that some role names are interpreted as _ partial functions _ ; and @xmath162 is the extension with the _ universal role _",
    "@xmath163 , interpreted as @xmath164 in any relational structure with domain .",
    "note that @xmath163 should be regarded as a logical symbol and is not a member of any schema .",
    "all these means of expressivity are included in the owl2 dl profile of the w3c - standardized ontology language owl2 @xcite .",
    "we use the usual naming scheme to denote combinations of these extensions , for example @xmath165 for the union of @xmath158 and @xmath155 and @xmath166 for the union of @xmath160 and @xmath165 .",
    "the following result summarizes the expressive power of extensions of @xmath135 .",
    "[ thm : otherdlucq ]   +    1 .",
    "( @xmath167,ucq ) has the same expressive power as mddlogand as ( @xmath135,ucq ) .",
    "2 .   ( @xmath160,ucq ) and ( @xmath161,ucq ) are strictly more expressive than ( @xmath135,ucq ) .",
    "( sketch ) in point  1 , we start with ( @xmath168,ucq ) , for which the result follows from theorem  [ thm : unfo ] in section [ sect : foontologies ] since @xmath168 is a fragment of unfo .",
    "role inclusions @xmath169 do not add expressive power since they can be simulated by adding to the ontology the inclusions @xmath170 for all @xmath171 , and replacing every atom @xmath172 in the ucq by @xmath173 .",
    "for point  2 , we separate ( @xmath160,ucq ) from ( @xmath135,ucq ) by showing that the following ontology - mediated query @xmath174 can not be expressed in ( @xmath135,ucq ) : @xmath175 consists of two role names @xmath67 and @xmath156 , @xmath176 states that these role names are both transitive , and @xmath177 . for ( @xmath161,ucq )",
    ", we show that @xmath178 can not be expressed in ( @xmath135,ucq ) , where @xmath179 consists of role name @xmath67 and concept name @xmath5 , @xmath180 states that @xmath67 is functional , and @xmath181 .",
    "detailed proofs are provided in the full version of this paper .",
    "they rely on a characterization of ( @xmath135,ucq ) in terms of colored forbidden patterns @xcite , which is a by - product of the connection between ( @xmath135,ucq ) and mmsnp that will be established in section  [ sect : obdammsnp ] .",
    "the next result is interesting when contrasted with point  2 of theorem  [ thm : otherdlucq ] : when ( , ucq ) is replaced with ( , aq ) , then the addition of transitive roles no longer increases the expressive power .",
    "[ thm : alcmdd2 ] ( @xmath135,aq ) has the same expressive power as ( @xmath166,aq ) .",
    "( sketch ) the proof of theorem  [ thm : alcmdd1 ] given above actually shows that unary connected simple mddlogis at least as expressive as ( @xmath155,aq ) .",
    "thus , ( @xmath135,aq ) has the same expressive power as ( @xmath155,aq ) .",
    "now it is folklore that in @xmath155 transitive roles can be replaced by certain concept inclusions without changing the certain answers to atomic queries .",
    "this can be done similarly to the elimination of role inclusions in the proof above , see @xcite . thus ( @xmath155,aq ) has the same expressive power as ( @xmath166,aq ) , and the result follows .",
    "it follows from @xcite that this observation can be extended to all complex role inclusions that are admitted in the description logic @xmath182 .",
    "in contrast , the addition of the universal role on the side of the obda query language extends the expressive power of ( @xmath135,aq ) .",
    "namely , it corresponds , on the mddlogside , to dropping the requirement that rule bodies must be connected .",
    "for example , the mddlogquery @xmath183 can then be expressed using the ontology @xmath184 and the aq @xmath185 .",
    "[ thm : alcmdd3 ] ( @xmath162,aq ) and ( @xmath186,aq ) both have the same expressive power as unary simple mddlog .",
    "we close this section with a brief remark about _",
    "boolean atomic queries _ ( baqs ) , that is , queries of the form @xmath187 , where @xmath5 is a unary relation symbol .",
    "such queries will be considered in section  [ sect : obdatocsp ] .",
    "it is possible to establish modified versions of theorems  [ thm : alcmdd1 ] to theorem  [ thm : alcmdd3 ] above in which aqs are replaced by baqs and unary goal predicates by @xmath188-ary goal - predicate , respectively .",
    "ontologies formulated in description logic are not able to speak about relation symbols of arity greater than two . to overcome this restriction",
    ", we consider the guarded fragment of first - order logic and the unary - negation fragment of first - order logic @xcite .",
    "both generalize the description logic @xmath135 in different ways .",
    "we also consider their natural common generalization , the guarded negation fragment of first - order logic @xcite .",
    "our results from the previous subsection turn out to generalize to all these fragments .",
    "we start by considering the unary negation fragment .",
    "the _ unary - negation fragment of first - order logic _ ( unfo ) @xcite is the fragment of first - order logic that consists of those formulas that are generated from atomic formulas , including equality , using conjunction , disjunction , existential quantification , and _",
    "unary negation _ , that is , negation applied to a formula with at most one free variable .",
    "thus , for example , @xmath189 belongs to unfo , whereas @xmath190 does not .",
    "it is easy to show that every -tbox is equivalent to a unfo sentence .",
    "[ thm : unfo ] ( unfo , ucq ) has the same expressive power as mddlog .",
    "( sketch ) the translation from mddlogto ( unfo , ucq ) is given by theorem  [ thm : alctomdd ] .",
    "here , we provide the translation from ( unfo , ucq ) to mddlog .",
    "let @xmath191 be given .",
    "we assume that @xmath2 is a single unfo sentence that is in the normal form generated by the following grammar : @xmath192 where each @xmath193 is either a relational atom or a formula with at most one free variable generated by the same grammar , and the free variables in @xmath193 are among @xmath194 .",
    "note that no equality is used and that all generated formulas have at most one free variable .",
    "easy syntactic manipulations show that every unfo - formula with at most one free variable is equivalent to a disjunction of formulas generated by the above grammar . in the case of @xmath2",
    ", we may furthermore assume that it is a _ single _ such sentence , rather than a disjunction , because @xmath195 is the intersection of @xmath196 and @xmath197 , and mddlogis closed under taking intersections of queries .",
    "let @xmath113 be the set of all subformulas of @xmath2 with at most one free variable @xmath198 ( we apply a one - to - one renaming of variables as needed to ensure that each formula in @xmath113 with a free variable has the same free variable  @xmath198 ) .",
    "let @xmath120 be the maximum of the number of variables in @xmath2 and the number of variables in @xmath1 .",
    "we denote by @xmath199 the set of all formulas @xmath200 of the form @xmath201 with @xmath202 , @xmath203 , where each @xmath193 is either a relational atom that uses a symbol from @xmath1 or is of the form @xmath204 or @xmath205 , for @xmath206 .",
    "note that , as in the proof of theorem  [ thm : alctomdd ] , @xmath199 contains all cqs that use only symbols from @xmath1 and whose size is bounded by the size of @xmath1 .",
    "@xmath116 is a subset of @xmath199 ; the set of all types is denoted @xmath207 .",
    "we introduce a fresh unary relation symbol @xmath115 for each type @xmath116 , and we denote by @xmath91 the schema that extends @xmath12 with these additional relations . as before , we call a structure @xmath47 over @xmath117 type - coherent if for all types @xmath116 and elements @xmath208 in the domain of @xmath47 , we have @xmath118 just in the case that @xmath116 is the ( unique ) type realized at @xmath208 in @xmath47",
    ". diagrams , realizability , and `` implying @xmath1 '' are defined as in the proof of theorem  [ thm : alctomdd ] .",
    "it follows from @xcite that it is decidable whether a diagram implies a query , and whether a diagram is realizable .",
    "the mddlogprogram @xmath86 is defined as in the proof of theorem  [ thm : alctomdd ] , except that now in the first rule , @xmath116 ranges over types in @xmath207 . in the full version of this paper , we prove that the resulting mddlog query @xmath88 is equivalent to @xmath209 .",
    "next , we consider the _ guarded fragment of first - order logic _ ( gf ) .",
    "it comprises all formulas built up from atomic formulas using the boolean connectives and guarded quantification of the form @xmath210 and @xmath211 , where , in both cases , @xmath7 is an atomic formula ( a `` guard '' ) that contains all free variables of @xmath212 . to simplify the presentation of the results , we consider here the equality - free version of the guarded fragment",
    "we do allow one special case of equality , namely the use of trivial equalities of the form @xmath213 as guards , which is equivalent to allowing unguarded quantifiers applied to formulas with at most one free variable .",
    "this restricted form of equality is sufficient to translate every tbox into an equivalent sentence of gf .",
    "it turns out that the obda language ( gf , ucq ) is strictly more expressive than mddlog .",
    "[ prop : gfucqmdd ] the boolean query    * there are @xmath214 , for some @xmath215 , such that @xmath216 , @xmath217 , and @xmath218 for all @xmath219    is definable in ( gf , ucq ) and not in mddlog .",
    "let @xmath12 consist of unary predicates @xmath220 and a ternary predicate @xmath221 , and let @xmath209 be the @xmath12-query defined by @xmath222 .",
    "it is easy to check that @xmath209 can be expressed by the ( gf , ucq ) query @xmath223 where @xmath224      & & \\forall xyz \\ ; ( p(x , z , y ) \\rightarrow ( r(z , x ) \\rightarrow      r(z , y ) ) ) \\ ; \\wedge \\\\[1 mm ]      & & \\forall xyz \\ ; ( r(x , y ) \\rightarrow ( b(y ) \\rightarrow      u(y ) ) )   \\end{array}\\ ] ] we show in the full version of this paper that @xmath209 is not expressible in mddlog  using the colored forbidden patterns characterization mentioned in the proof sketch of theorem  [ thm : otherdlucq ] .    as fragments of first - order logic , the unary - negation fragment and the guarded fragment are incomparable in expressive power .",
    "they have a common generalization , which is known as the guarded - negation fragment ( gnfo ) @xcite .",
    "this fragment is defined in the same way as unfo , except that , besides unary negation , we allow _ guarded negation _ of the form @xmath225 , where the guard @xmath7 is an atomic formula that contains all the variables of @xmath212 .",
    "again , for simplicity , we consider here the equality - free version of the language , except that we allow the use of trivial equalities of the form @xmath213 as guards .",
    "as we will see , for the purpose of obda , gnfo is no more powerful than gf . specifically , ( gf , ucq ) and ( gnfo , ucq ) are expressively equivalent to a natural generalization of mddlog , namely _ frontier - guarded ddlog .",
    "_ recall that a datalog rule is _ guarded _ if its body includes an atom that contains all variables which occur in the rule @xcite",
    ". a weaker notion of guardedness , which we call here _ frontier - guardedness",
    "_ , inspired by @xcite , requires that , for each atom @xmath7 in the head of the rule , there is an atom @xmath8 in the rule body such that all variables that occur in @xmath7 occur also in @xmath8 .",
    "we define a frontier - guarded ddlogquery to be a query defined by a ddlogprogram in which every rule is frontier - guarded .",
    "observe that frontier - guarded ddlogsubsumes mddlog .",
    "[ gfucqfrontier ] ( gf , ucq ) and ( gnfo , ucq ) have the same expressive power as frontier - guarded ddlog .    theorem  [ gfucqfrontier ] is proved in the full version of this paper via translations from ( gnfo , ucq ) to frontier - guarded ddlogand back that are along the same lines as the translations from ( unfo , ucq ) to mddlogand back .",
    "in addition , we use a result from @xcite to obtain a translation from ( gnfo , ucq ) to ( gf , ucq ) .",
    "we show that mddlogcaptures commsnp and thus , by the results obtained in the previous section , the same is true for many obda languages based on ucqs .",
    "we then use this connection to transfer results from mmsnp to obda languages with ucqs , linking the data complexity of these languages to the feder - vardi conjecture and establishing decidability of query containment .",
    "we also propose gmsnp , an extension of mmsnp inspired by frontier guarded ddlog , and show that ( gf , ucq ) and ( gnfo , ucq ) capture cogmsnp , and that gmsnp has the same expressive power as a previously proposed extension of mmsnp called mmsnp@xmath9 .",
    "an _ mmsnp formula _ over schema @xmath12 has the form @xmath226 with @xmath227 monadic second - order ( so ) variables , @xmath228 fo - variables , and @xmath229 a conjunction of quantifier - free formulas of the form @xmath230 where each @xmath231 is of the form @xmath232 , @xmath142 ( with @xmath233 ) , or @xmath234 , and each @xmath235 is of the form @xmath232 . in order to use mmsnp as a query language , and in contrast to the standard definition , we admit free fo - variables and speak of _ sentences _ to refer to mmsnp formulas without free variables . to connect with the query languages studied thus far , we are interested in queries obtained by the complements of mmsnp formulas : each mmsnp formula @xmath236 over schema with @xmath15 free variables gives rise to a query @xmath237\\}\\ ] ] where we set @xmath238 to true when is the empty instance ( that is , @xmath239 ) and @xmath236 is a sentence .",
    "we observe that the resulting query language _ commsnp _ has the same expressive power as mddlog .",
    "[ prop : mmsnpmdd ] commsnp and mddloghave the same expressive power .",
    "let @xmath240 be an mmsnp formula with free variables @xmath241 , and let @xmath242 be the corresponding query .",
    "we can assume w.l.o.g . that all implications @xmath243 in @xmath229 satisfy the following properties : ( i )  @xmath82 and , ( ii )",
    "each variable that occurs in a @xmath235 atom also occurs in an @xmath231 atom .",
    "in fact , we can achieve both ( i ) and ( ii ) by replacing violating implications @xmath244 with the set of implications @xmath245 that can be obtained from @xmath244 by adding , for each variable @xmath93 that occurs only in the head of @xmath244 , an atom @xmath246 where @xmath156 is a predicate that occurs in @xmath236 and @xmath96 is a tuple of variables that contains @xmath93 once and otherwise only fresh variables that do not occur in @xmath236 .",
    "define an mddlogprogram @xmath247 that consists of all implications in @xmath229 whose head is not @xmath85 plus a rule @xmath248 for each implication @xmath249 in @xmath229 .",
    "it can be proved that @xmath250 for all schemas . finally , it is straightforward to remove the equalities from the rule bodies in @xmath247 .",
    "conversely , let @xmath86 be a @xmath120-ary mddlogprogram and assume w.l.o.g . that each rule uses a disjoint set of variables .",
    "reserve fresh variables @xmath241 as free variables for the desired mmsnp formula , and let @xmath227 be the idb predicates in @xmath86 and @xmath228 the fo - variables in @xmath86 that do not occur in the goal predicate .",
    "set @xmath251 where @xmath229 is the conjunction of all non - goal rules in @xmath86 plus the implication @xmath252 for each rule @xmath253 in @xmath86 . here",
    ", @xmath254 is obtained from @xmath255 by replacing each variable @xmath256 whose left - most occurrence in the rule head is in the @xmath257-th position with @xmath258 , and then conjunctively adding @xmath259 whenever the @xmath257-th and @xmath260-th position in the rule head have the same variable . it can be proved that @xmath261 for all schemas .    thus , the characterizations of obda languages in terms of mddlogprovided in section  [ sect : alcucq ] also establish the descriptive complexity of these languages by identifying them with ( the complement of ) mmsnp .",
    "furthermore , proposition  [ prop : mmsnpmdd ] allow us to transfer results from mmsnp to obda .",
    "we start by considering the data complexity of the query evaluation problem : for a query @xmath1 , the _ evaluation problem _ is to decide , given an instance and a tuple @xmath262 of elements from , whether @xmath263 .",
    "our first result is that the feder - vardi dichotomy conjecture for csps is true if and only if there is a dichotomy between and conpfor query evaluation in ( , ucq ) , and the same is true for several other obda languages . for brevity",
    ", we say that a query language _ has a dichotomy between and _ conp , referring only implicitly to the evaluation problem .",
    "the proof of the following theorem relies on proposition  [ prop : mmsnpmdd ] and theorems  [ thm : alctomdd ] ,  [ thm : otherdlucq ] , and  [ thm : unfo ] .",
    "it also exploits the fact that the feder - vardi dichotomy conjecture can equivalently be stated for mmsnp sentences @xcite .",
    "some technical development is needed to deal with the presence of free variables .",
    "details are in the full version of this paper .",
    "[ dich - ucq ] ( , ucq ) has a dichotomy between and conpiff the feder - vardi conjecture holds .",
    "the same is true for ( @xmath167,ucq ) and ( unfo , ucq ) .",
    "recall that ( , ucq ) and ( , ucq ) are two extensions of ( , ucq ) that were identified in section  [ sect : alcucq ] to be more expressive than ( , ucq ) itself .",
    "it was already proved in @xcite ( theorem  27 ) that , compared to ontology - mediated queries based on , the functional roles of dramatically increase the computational power .",
    "this is true even for atomic queries .",
    "[ thm : alcf1 ] for every -turing machine @xmath264 , there is a query @xmath1 in ( , aq ) such that the complement of the word problem of @xmath264 has the same complexity as evaluating @xmath1 , up to polynomial - time reductions .",
    "consequently , ( , aq ) does not have a dichotomy between and conp(unless = ) .",
    "we leave it as an open problem to analyze the computational power of ( , ucq ) .",
    "there are other interesting results that can be transferred from mmsnp to obda . here",
    ", we consider query containment . specifically , the following general containment problem was proposed in @xcite as a powerful tool for obda : given ontology - mediated queries @xmath265 , @xmath266 , decide whether for all -instances , we have @xmath267.in fact , this definition is slightly different from the one used in @xcite .",
    "there , containment is defined only over instances that are consistent w.r.t .",
    "@xmath268 and @xmath180 , i.e. , where there is at least one finite -structure @xmath269 such that @xmath270 and @xmath271 . ]",
    "applications include the optimization of ontology - mediated queries and managing the effects on query answering of replacing an ontology with a new , updated version . in terms of obda languages such as ( , ucq ) , the above problem corresponds to query containment in the standard sense : an -query @xmath30 is _ contained in _ an -query @xmath31 , written @xmath272 , if for every -instance  , we have @xmath273 .",
    "note that there are also less general ( and computationally simpler ) notions of query containment in obda that do not fix the data schema @xcite .",
    "it was proved in @xcite that containment of mmsnp sentences is decidable .",
    "we thus obtain the following result for obda languages .",
    "[ thm : containment1 ] query containment is decidable for the obda languages ( , ucq ) , ( @xmath167,ucq ) , and ( unfo , ucq ) .    note that this result is considerably stronger than those in @xcite , which considered only containment of ontology - mediated queries @xmath0 with @xmath1 an atomic query since already this basic case turned out to be technically intricate .",
    "the treatment of cqs and ucqs was left open , including all cases stated in theorem  [ thm : containment1 ] .",
    "we now consider obda languages based on the guarded fragment and gnfo . by proposition  [ prop : gfucqmdd ] ,",
    "( gf , ucq ) and ( gnfo , ucq ) are strictly more expressive than mddlogand we can not use proposition  [ prop : mmsnpmdd ] to relate these query languages to the feder - vardi conjecture .",
    "theorem  [ gfucqfrontier ] suggests that it would be useful to have a generalization of mmsnp that is equivalent to frontier - guarded ddlog .",
    "such a generalization is introduced next .",
    "a formula of _ guarded monotone strict np ( abbreviated gmsnp ) _ has the form @xmath274 with @xmath227 so variables of any arity , @xmath275 fo - variables , and @xmath229 a conjunction of formulas @xmath276 where each @xmath231 is of the form @xmath232 , @xmath142 ( with @xmath277 ) , or @xmath234 , and each @xmath235 is of the form @xmath232 .",
    "additionally , we require that for every head atom @xmath235 , there is a body atom @xmath278 such that @xmath278 contains all variables from @xmath235 .",
    "gmsnp gives rise to a query language cogmsnp in analogy with the definition of commsnp .",
    "it can be shown by a straightforward syntactic transformation that every mmsnp formula is equivalent to some gmsnp formula . together with proposition  [ prop : gfucqmdd ] and theorem  [ gfucqfrontier ] , this yields the second statement of the following lemma ; the first statement can be proved similarly to proposition [ prop : mmsnpmdd ] .",
    "[ lem : gmsnpfgdd ] cogmsnp has the same expressive power as frontier - guarded ddlogand is strictly more expressive than commsnp .",
    "although defined in a different way , gmsnp is essentially the same logic as mmsnp@xmath9 , which is studied in @xcite .",
    "specifically , mmsnp@xmath9 is the extension of mmsnp in which monadic so - variables range over sets of domain elements _ and facts _ , and where atoms of the form @xmath279 are allowed in place of atoms @xmath280 with @xmath281 an so - variable and @xmath67 from the data schema .",
    "additionally , a guardedness condition is imposed , requiring that whenever an atom @xmath279 occurs in a rule head , then the atom @xmath142 must occur in the rule body .",
    "formally , the so - variables @xmath282 are interpreted in an instance @xmath283 as sets @xmath284 and @xmath285 if @xmath286 .",
    "we observe the following .    [ prop : gmmm2 ] gmsnp and mmsnp@xmath9 have the same expressive power .",
    "details for the proofs of both theorem  [ lem : gmsnpfgdd ] and lemma  [ prop : gmmm2 ] are in the full version of this paper . in @xcite , it was left as an open question whether mmsnp@xmath9 is more expressive than mmsnp , which is resolved by the results above .",
    "we leave it as an interesting open question whether theorem  [ dich - ucq ] can be extended to ( gf , ucq ) and ( gnfo , ucq ) , that is , whether gmsnp ( equivalently : mmsnp@xmath9 ) has a dichotomy between and if the feder - vardi conjecture holds . while this question is implicit already in @xcite , the results established in this paper underline its significance from a different perspective .",
    "we show that obda languages based on aqs capture csps ( and generalizations thereof ) , and we transfer results from csps to obda languages . in comparison to the previous section , we obtain a richer set of results , and often even worst - case optimal decision procedures .",
    "recall that each finite relational structure @xmath47 over a schema @xmath12 gives rise to a _ constraint satisfaction problem _ which is to decide , given a finite relational structure  @xmath287 over , whether there is a homomorphism from @xmath287 to @xmath47 ( written @xmath288 ) . in this context , the relational structure @xmath47",
    "is also called the _ template _ of the csp .",
    "csps give rise to a query language cocsp in the spirit of the query language commsnp introduced in the previous section . in its basic version ,",
    "this language is boolean and turns out to have exactly the same expressive power as ( @xmath10,baq ) , where baq is the class of _ boolean _ atomic queries . to also cover non - boolean aqs",
    ", we consider two natural generalizations of csps .",
    "first , a _ generalized csp _ is defined by a finite _ set of templates _ , rather than only a single one @xcite .",
    "the problem then consists in deciding , given an input structure , whether there is a template @xmath289 such that @xmath288 .",
    "second , in a _",
    "( generalized ) csp with constant symbols _ ,",
    "both the template(s ) and the input structure are endowed with constant symbols @xcite . to be more precise , let @xmath12 be a schema and @xmath290 a finite sequence of distinct constant symbols .",
    "finite relational structure over _ @xmath291 has the form @xmath292 with a finite relational structure over @xmath287 that , in addition , interprets the constant symbols @xmath293 by elements @xmath294 of the domain @xmath295 of @xmath287 , for @xmath296 .",
    "let @xmath297 and @xmath298 be finite relational structures over @xmath291 .",
    "a mapping @xmath105 is a _ homomorphism _ from @xmath297 to @xmath298 , written @xmath299 , if it is a homomorphism from @xmath287 to @xmath47 and @xmath300 for @xmath301 .",
    "a ( generalized ) csp with constant symbols is then defined like a ( generalized ) csp , based on this extended notion of homomorphism .",
    "we now introduce the query languages obtained from the different versions of csps , where generalized csps with constant symbols constitute the most general case .",
    "specifically , each finite set of templates @xmath302 over @xmath303 with @xmath304 gives rise to an @xmath305-ary query cocsp@xmath306 that maps every @xmath12-instance @xmath18 to @xmath307 where we view @xmath308 as a finite relational structure whose domain is @xmath309 . the query language that consists of all such queries",
    "is called _ generalized cocsp with constant symbols_. the fragment of this query language that is obtained by admitting only sets of templates @xmath310 without constant symbols is called _ generalized cocsp _ , and the fragment induced by singleton sets @xmath310 without constant symbols is called _",
    "cocsp_.    selecting an illustrative fragment of examples  [ ex : first ] and  [ ex : second ] , let @xmath311    \\sbf & = & \\ {    \\mn{hereditarydisposition},\\mn{parent } \\ }    \\end{array}\\ ] ] moreover , let @xmath76 be the query from example  [ ex : second ] . to identify a query in cocsp with constant symbols that is equivalent to the ontology - mediated query @xmath77 , let be the following template",
    ":    it can be shown that for all instances over and for all @xmath312 , we have @xmath313 iff @xmath314 and thus the query cocsp@xmath315 is as required .",
    "the following theorem summarizes the connections between obda languages with ( boolean ) atomic queries , mddlog , and csps .",
    "note that we consider binary schemas only .",
    "[ alcutocsp ] the following are lists of query languages that have the same expressive power :    1 .",
    "@xmath316,aq ) , ( @xmath186,aq ) , unary simple mddlog , and generalized cocsp with one constant symbol ; 2 .   ( @xmath135,aq ) , ( @xmath166,aq ) , unary connected simple mddlog , and generalized cocsps with one constant symbol such that all templates are identical except for the interpretation of the constant symbol ; 3 .   ( @xmath162,baq ) , ( @xmath186,baq ) , boolean simple mddlog , and generalized cocsp ; 4 .",
    "( @xmath135,baq ) , ( @xmath166,baq ) , boolean connected simple mddlog , and cocsp .",
    "moreover , given the ontology - mediated query or monadic datalog program , the correponding csp template is of at most exponential size and can be constructed in time polynomial in the size of the template .    the equivalences between obda languages and fragments of mddloghave been proved in section  [ sect : alcucq ] .",
    "we give a proof of the remaining claim of point  1 , namely that @xmath316,aq ) and generalized cocsp with one constant symbol are equally expressive .",
    "we extend the notation used in the proof of theorem  [ thm : alctomdd ] . for simplicity",
    ", throughout this proof we regard @xmath317 as an abbreviation for @xmath318 .",
    "let @xmath319 be an ontology - mediated query formulated in @xmath316,aq ) .",
    "a _ type for _ is a set @xmath320 and @xmath321 denotes the set of all types for .",
    "we say that @xmath322 is _ realizable _ if there is an @xmath323 and a @xmath324 such that @xmath325 iff @xmath326 $ ] for all @xmath171 .",
    "a set of types @xmath327 is _ realizable in a @xmath209-countermodel _ if there is an @xmath328 that realizes exactly the types in @xmath329 and such that @xmath330 for at least one @xmath331 .",
    "let @xmath332 be the set of all @xmath333 that are realizable in a @xmath209-countermodel and maximal with this property .",
    "note that the number of elements of @xmath332 is bounded by the size of @xmath2 since for any two distinct @xmath334 , there must be a concept @xmath335 such that @xmath336 for all @xmath337 and @xmath338 for all @xmath339 or vice versa ; otherwise , we can take the disjoint union of any structures @xmath340 which show that @xmath341 are realizable in a @xmath209-countermodel to obtain @xmath209-countermodel that realizes @xmath342 . for @xmath343",
    ", we call a pair @xmath344 of types _ @xmath67-coherent _ if @xmath345 for every @xmath346 such that @xmath347 . with each @xmath348",
    ", we associate the _",
    "canonical -structure @xmath349 _ with domain @xmath329 and the following facts :    * @xmath350 for all @xmath331 and @xmath351 such that @xmath352 ; * @xmath353 for all @xmath354 and @xmath343 such that @xmath344 is @xmath67-coherent .",
    "note that the construction of @xmath349 is well - known from the literature on modal and description logic .",
    "for example , @xmath355 can be viewed as a finite fragment of a canonical model of a modal logic that is constructed from maximal consistent sets of formulas @xcite .",
    "alternatively , @xmath355 can be viewed as the result of a type elimination procedure @xcite .",
    "we obtain the desired set of csp templates by setting @xmath356 one can show that for every @xmath12-instance @xmath18 and @xmath357 , there exists @xmath358 with @xmath359 iff @xmath360 .",
    "thus , the ontology - mediated query @xmath209 is equivalent to the query defined by @xmath310 .",
    "conversely , assume that @xmath310 is a finite set of @xmath12-structures with one constant . take some @xmath361 , and for every @xmath208 in the domain @xmath362 of @xmath47 , create some fresh concept name @xmath363 .",
    "let @xmath5 be another fresh concept name , and set @xmath364 consider the ontology - mediated query @xmath365 one can show that for every @xmath12-instance @xmath18 and @xmath366 , @xmath367 iff @xmath368 .",
    "thus , @xmath369 is the desired query if is a singleton . for the general case ,",
    "let @xmath2 be the disjunction over all @xmath370 with @xmath371 . note that @xmath2 can be expressed in @xmath162",
    ": first , rewrite each @xmath370 into a single inclusion of the form @xmath372 and then set @xmath373 using the above observation about the queries @xmath369 , it is not hard to show that the ( @xmath162,aq)-query @xmath319 is equivalent to the query cocsp(@xmath302 ) .",
    "this completes the proof of point  1 .",
    "the proofs of points  2 to 4 are similar and given in the full version of this paper .",
    "theorem  [ alcutocsp ] allows us to transfer results from the csp world to obda , which , in light of recent progress on csps , turns out to be very fruitful .",
    "we start with data complexity .",
    "[ thm : cspfv ] ( @xmath135,baq ) has a dichotomy between and conpiff the feder - vardi conjecture holds .",
    "the same is true for ( @xmath186,aq ) , and ( @xmath186,baq ) .    since @xmath186-ontologies can be replaced by @xmath162-ontologies in ontology - mediated queries due to theorem  [ thm : alcmdd3 ] , the `` if '' direction of ( all cases mentioned in ) theorem  [ thm : cspfv ] actually follows from theorem  [ dich - ucq ] .",
    "the `` only if '' direction is a consequence of theorem  [ alcutocsp ] .",
    "we now consider further interesting applications of theorem  [ alcutocsp ] , in particular to deciding query containment , fo - rewritability , and datalog rewritability .",
    "in section  [ sect : obdammsnp ] , we have established decidability results for query containment in obda languages based on ucqs . for obda languages based on aqs and baqs , we even obtain a tight complexity bound .",
    "it is easy to see that query containment in cocsp is characterized by homomorphisms between templates .",
    "consequently , it is straightforward to show that query containment for generalized cocsp with constant symbols is -complete .",
    "thus , theorem  [ alcutocsp ] yields the following upper bound for query containment in obda languages .",
    "the corresponding lower bound is proved in the full version of this paper by a non - trivial reduction of a -complete tiling problem .",
    "[ contnexp ] query containment in ( @xmath186,aq@xmath374bq ) is in .",
    "it is -hard already for ( @xmath135,aq ) and for @xmath375,baq ) .",
    "it is a consequence of a result in @xcite that query containment is undecidable for @xmath161 .",
    "we show in the full version of this paper how the slight gap pointed out in footnote  [ footnote : containment ] can be bridged .",
    "one prominent approach to answering ontology - mediated queries is to make use of existing relational database systems or datalog engines , eliminating the ontology by query rewriting @xcite .",
    "specifically , an ontology - mediated query @xmath0 is _ fo - rewritable _ if there exists an fo - query over @xmath12 that is equivalent to it and _ datalog - rewritable _ if there exists a datalog program over that defines it .",
    "we observe that every ontology - mediated query that is fo - rewritable is also datalog - rewritable .",
    "[ prof : fotodlog ] if @xmath376 is an ontology - mediated query with @xmath2 formulated in equality - free fo and @xmath1 a ucq , then @xmath56 is preserved by homomorphisms .",
    "consequently , it follows from @xcite that if @xmath56 is fo - rewritable , then @xmath56 is rewritable into a ucq ( thus into datalog ) .",
    "example  [ ex : second ] illustrates that ontology - mediated queries are not always rewritable into an fo - query , and the same holds for datalog - rewritability .",
    "it is a central problem to decide , given an ontology - mediated query , whether it is fo - rewritable and whether it is datalog - rewritable . by leveraging the csp connection ,",
    "we show that both problems are decidable and pinpoint their complexities . on the csp side ,",
    "fo - rewritability corresponds to fo - definability , and datalog - rewritability to datalog - definability .",
    "specifically , an @xmath12-query cocsp@xmath306 is _ fo - definable _ if there is an fo - sentence @xmath212 over @xmath12 such that for all finite relational structures @xmath287 over , we have @xmath377 iff @xmath378 for all in  . similarly , cocsp@xmath306 is _ datalog - definable _ if there exists a datalog program @xmath86 that defines it .",
    "fo - definability and datalog - definability have been studied extensively for csps , culminating in the following results .",
    "[ thm : bartokozik ] deciding , for a given finite relational structure @xmath47 without constant symbols , whether cocsp(@xmath47 ) is fo - definable is -complete @xcite .",
    "the same is true for datalog - definability @xcite .    combining the preceding theorem with theorem  [ alcutocsp ]",
    ", we obtain upper bounds for deciding fo - rewritability and datalog - rewritability of queries from @xmath379,baq ) .    to capture the more important aqs rather than only baqs , we show that theorem  [ thm : bartokozik ] can be lifted , in a natural way , to generalized csps with constant symbols .",
    "the central step is provided by proposition  [ prop : eliminating - constants ] below . for each finite relational structure @xmath47 with constant symbols @xmath380 ,",
    "let us denote by @xmath381 the corresponding relational structure without constant symbols over the schema that contains additional unary relations @xmath382 , where each @xmath383 denotes the singleton set that consists of the element denoted by @xmath384 .",
    "[ prop : eliminating - constants ] for every set of homomorphically incomparable structures @xmath385 with constant symbols ,    1 .",
    "cocsp(@xmath386 ) is fo - definable iff cocsp(@xmath387 ) is fo - definable for @xmath388 .",
    "cocsp(@xmath386 ) is datalog - definable iff cocsp(@xmath387 ) is datalog - definable for @xmath388 .    a proof of proposition  [ prop : eliminating - constants ] is provided in the full version of this paper .",
    "it relies on the characterization of fo - definable csps as those csps that have _ finite obstruction sets _ ; this characterization was given in @xcite for structures without constant symbols and follows from results in @xcite for the case of structures with constant symbols .",
    "note that every set of structures @xmath386 has a subset @xmath389 which consists of homomorphically incomparable structures such that cocsp(@xmath386 ) is equivalent to cocsp(@xmath389 ) .",
    "we use this observation to establish the announced lifting of theorem  [ thm : bartokozik ] .",
    "[ thm : definability ] fo - definability and datalog - definability of generalized csp with constant symbols is -complete .    to decide whether a generalized csp with constant symbols given as a set of templates @xmath390 is fo - definable , it suffices to first guess a subset @xmath391 and then to verify that ( i )  cocsp(@xmath381 ) is fo - definable for each @xmath392 , and ( ii )  for each @xmath393 there is a @xmath394 such that @xmath395 . by theorem  [ thm : bartokozik",
    "] , this can be done in .",
    "correctness follows from proposition  [ prop : eliminating - constants ] and the fact that whenever there is a subset @xmath396 satisfying ( i ) and ( ii ) , then by the observation above there must be a subset @xmath397 of homomorphically incomparable structures such that cocsp(@xmath398 ) is equivalent to cocsp(@xmath396 ) , which by  ( ii ) is equivalent to cocsp(@xmath302 ) .",
    "datalog - definability can be decided analogously .    from theorems  [ alcutocsp ] and [ thm :",
    "definability ] , we obtain a upper bound for deciding fo - rewritability and datalog - rewritability of ontology - mediated queries based on dls and ( b)aqs . the corresponding lower bounds are proved in the full version of this paper using a reduction from a -hard tiling problem ( in fact , the same problem as in the lower bound for query containment ) .",
    "[ fonexp ] it is in to decide fo - rewritability and datalog - rewritability of queries in ( @xmath186,aq@xmath374baq ) .",
    "both problems are -hard for ( @xmath135,aq ) and ( @xmath135 , baq ) .",
    "modulo a minor difference in the treatment of instances that are not consistent ( see footnote  [ footnote : containment ] ) , it follows from a result in @xcite that fo - rewritability is undecidable for ( @xmath161,aq ) . in the full version of this paper ,",
    "we show how to bridge the difference and how to modify the proof so that the result also applies to datalog - rewritability .",
    "fo - rewritability and datalog - rewritability are undecidable for ( @xmath161,aq ) and ( @xmath161,baq ) .",
    "another query language frequently used in obda with description logics is conjunctive queries .",
    "the results in this paper imply that there is a dichotomy between and conpfor ( , cq ) if and only if the feder - vardi conjecture holds .",
    "we leave it open whether there is a natural characterization of ( , cq ) in terms of disjunctive datalog .",
    "we mention two natural lines of future research .",
    "first , it would be interesting to understand the data complexity and query containment problem for ( gf , ucq ) and ( gnfo , ucq ) .",
    "in particular , we would like to know whether theorems  [ dich - ucq ] and  [ thm : containment1 ] extend to ( gf , ucq ) and ( gnfo , ucq ) . as explained in section  [ sect : obdammsnp ] , resolving this question for theorem  [ dich - ucq ] is equivalent to clarifying the computational status of gmsnp and mmsnp@xmath9 .",
    "another interesting topic for future work is to analyze fo - rewritability and datalog - rewritability of ontology - mediated queries based on ucqs ( instead of aqs ) as a decision problem .",
    "it follows from our results that this is equivalent to deciding fo - definability and datalog - definability of mmsnp formulas ( or even gmsnp formulas ) .",
    "* acknowledgements*. we thank benoit larose and liber barto for discussions on datalog - definability of csps , and florent madeleine and manuel bodirsky for discussions on mmsnp .",
    "meghyn bienvenu was supported by the anr project pagoda ( anr-12-js02 - 007 - 01 ) .",
    "balder ten cate was supported by nsf grants iis-0905276 and iis-1217869 .",
    "carsten lutz was supported by the dfg sfb / tr 8 `` spatial cognition '' .",
    "10    b.  alexe , b.  ten cate , p.  g. kolaitis , and w.  c. tan .",
    "characterizing schema mappings via data examples . , 36(4 ) , 2011 .",
    "a.  atserias . on digraph coloring problems and treewidth duality . in _ lics _ , 2005 .",
    "f.  baader , m.  bienvenu , c.  lutz , and f.  wolter . query and predicate emptiness in description logics . in _",
    "kr _ , 2010 .",
    "f.  baader , d.  calvanese , d.  l. mcguiness , d.  nardi , and p.  patel - schneider , editors . .",
    "cambridge university press , 2003 .",
    "baget , m .-",
    "mugnier , s.  rudolph , and m.  thomazo . walking the complexity lines for generalized guarded existential rules . in _ ijcai _ , 2011 .",
    "v.  brny , g.  gottlob , and m.  otto . querying the guarded fragment . in _ lics _ , 2010 .",
    "v.  brny , b.  ten cate , and m.  otto .",
    "queries with guarded negation . , 5(11 ) , 2012 .",
    "v.  brny , b.  ten cate , and l.  segoufin .",
    "guarded negation . in _",
    "icalp _ , 2011 .",
    "l.  barto and m.  kozik .",
    "constraint satisfaction problems of bounded width . in _ focs _ , 2009 .",
    "m.  bienvenu , c.  lutz , and f.  wolter .",
    "query containment in description logics reconsidered . in _",
    "kr _ , 2012 .",
    "p.  blackburn , m.  de rijke , and y.  venema .",
    "modal logic .",
    ", 2001 .",
    "m.  bodirsky , h.  chen , and t.  feder . on the complexity of mmsnp .",
    ", 26(1):404414 , 2012 .",
    "a.  bulatov .",
    "bounded relational width . in preparation .",
    "abulatov / mpapers.html .",
    "a.  a. bulatov . on the csp dichotomy conjecture . in _",
    ", 2011 .",
    "a.  cal , g.  gottlob , and t.  lukasiewicz .",
    "a general datalog - based framework for tractable query answering over ontologies . in _ pods _ , 2009 .",
    "a.  cal , g.  gottlob , and a.  pieris . towards more expressive ontology languages : the query answering problem .",
    ", 193 , 2012 .",
    "d.  calvanese , g.  d. giacomo , d.  lembo , m.  lenzerini , and r.  rosati .",
    "data complexity of query answering in description logics . in _",
    "kr _ , 2006 .",
    "d.  calvanese , g.  d. giacomo , d.  lembo , m.  lenzerini , and r.  rosati .",
    "tractable reasoning and efficient query answering in description logics : the dl - lite family .",
    ", 39(3 ) , 2007 .",
    "d.  calvanese , g.  d. giacomo , and m.  lenzerini . on the decidability of query containment under constraints . in _ pods _ , 1998 .",
    "b.  cuenca grau , m.  kaminski , and b.  motik computing datalog rewritings beyond horn ontologies . in _",
    "ijcai _ , 2013    t.  eiter , g.  gottlob , and h.  mannila .",
    "disjunctive datalog .",
    ", 22(3 ) , 1997 .",
    "t.  eiter , m.  ortiz , m.  simkus , t .- k .",
    "tran , and g.  xiao . towards practical query answering for horn- . in _ dl _ , 2012 .",
    "t.  feder , f.  r. madelaine , and i.  a. stewart .",
    "dichotomies for classes of homomorphism problems involving unary functions .",
    ", 314(1 - 2 ) , 2004 .",
    "t.  feder and m.  y. vardi .",
    "the computational structure of monotone monadic snp and constraint satisfaction : a study through datalog and group theory . , 28(1 ) , 1998 .",
    "j.  foniok , j.  nesetril , and c.  tardif .",
    "generalised dualities and maximal finite antichains in the homomorphism order of relational structures . , 29(4 ) , 2008 .",
    "r.  freese , m.  kozik , a.  krokhin , m.  marti , r.  kckenzie , and r.  willard .",
    "on maltsev conditions associated with omitting certain types of local structures . in preparation .",
    "http://www.math.hawaii.edu/@xmath399ralph/classes/619/ omittingtypesmaltsev.pdf",
    "g.  gottlob , e.  grdel , and h.  veith .",
    "datalog lite : a deductive query language with linear time model checking . , 3(1 ) , 2002 .",
    "g.  gottlob and t.  schwentick .",
    "rewriting ontological queries into small nonrecursive datalog programs . in _ kr _ , 2012 .",
    "u.  hustadt , b.  motik , and u.  sattler .",
    "reasoning in description logics by a reduction to disjunctive datalog .",
    ", 39(3 ) , 2007 .",
    "s.  kikot , r.  kontchakov , v.  v. podolskii , and m.  zakharyaschev .",
    "exponential lower bounds and separation for query rewriting . in _ icalp _ , 2012 .",
    "r.  kontchakov , c.  lutz , d.  toman , f.  wolter , and m.  zakharyaschev . the combined approach to query answering in dl - lite . in _",
    "kr _ , 2010 .",
    "a.  krisnadhi and c.  lutz .",
    "data complexity in the @xmath400 family of dls . in _ lpar _",
    ", 2007 .",
    "g.  kun . .",
    "http://arxiv.org/abs/0706.1701v1 , 2007",
    ".    g.  kun and j.  nesetril .",
    "forbidden lifts ( np and csp for combinatorialists ) . , 29(4 ) , 2008 .",
    "b.  larose , c.  loten , and c.  tardif .",
    "a characterisation of first - order constraint satisfaction problems . , 3(4 ) , 2007 .",
    "c.  lutz and f.  wolter .",
    "non - uniform data complexity of query answering in description logics . in _",
    "kr _ , 2012 .",
    "f.  r. madelaine .",
    "universal structures and the logic of forbidden patterns . , 5(2 ) , 2009 .",
    "f.  r. madelaine and i.  a. stewart .",
    "constraint satisfaction , logic and forbidden patterns .",
    ", 37(1 ) , 2007 .",
    "b.  motik . .",
    "phd thesis , 2006 .",
    "a.  poggi , d.  lembo , d.  calvanese , g.  d. giacomo , m.  lenzerini , and r.  rosati .",
    "linking data to ontologies .",
    ", 10 , 2008 .",
    "v.  r.  pratt .",
    "models of program logics . in _ focs _ , 1979 .",
    "r.  rosati and a.  almatelli .",
    "improving query answering over dl - lite ontologies . in _ kr _ , 2010 .",
    "b.  rossman .",
    "homomorphism preservation theorems . , 55(3 ) , 2008 .",
    "s.  rudolph , m.  krtzsch , and p.  hitzler .",
    "type - elimination - based reasoning for the description logic @xmath401 using decision diagrams and disjunctive datalog . , 8(1 ) , 2012 .",
    "f.  simancik .",
    "elimination of complex rias without automata . in _ dl _ , 2012 .",
    "b.  ten cate and l.  segoufin .",
    "unary negation . in _",
    "stacs _ , 2011 .",
    "w3c owl working group .",
    "owl 2 web ontology language .",
    "http://www.w3.org/tr/owl2-overview/ , 2012 .",
    "we remark that the direction `` from ( , aq ) to mddlog '' of theorem  [ thm : alctomdd ] is actually a consequence of theorem  [ thm : unfo ] , which makes a strictly more general statement .",
    "we still provide it here ( and in the main paper ) as a warmup for the proof of theorem  [ thm : unfo ] . as an extra bit of notation",
    ", we say that an assignment @xmath402 of elements of an instance to the variables of a cq @xmath1 is a _ match of @xmath1 in _ if satisfies @xmath1 under @xmath402 .",
    "( continued ) we establish here the correctness of the translation from ( , ucq ) to mddlog .",
    "let @xmath305 be the arity of @xmath0 .",
    "we have to show the following .",
    "+ * claim . * for all instances over and all @xmath403 , we have @xmath404 iff @xmath405 .",
    "+ `` if '' .",
    "assume that @xmath406 .",
    "then there is a @xmath407 such that @xmath408 and @xmath409 . for each @xmath410 ,",
    "let @xmath411 be the unique type realized at @xmath412 in @xmath99 , that is , @xmath413\\}.\\end{aligned}\\ ] ] let @xmath414 be the instance that consists of the atoms in @xmath18 and the atom @xmath415 for each @xmath410 .",
    "it can be verified that @xmath414 is a model of @xmath86 . in particular",
    ", it follows from the construction of @xmath414 and the fact that @xmath409 that whenever a diagram @xmath416 has a match @xmath402 in @xmath414 and @xmath416 implies @xmath417 , then @xmath418 .",
    "since @xmath414 is a model of @xmath86 and @xmath419 , we have @xmath420 .",
    "`` only if '' .",
    "assume that @xmath421 , and let @xmath422 be such that @xmath423 and @xmath99 does not contain @xmath424 .",
    "we assume w.l.o.g . that @xmath425 .",
    "note that the first two rules of @xmath86 ensure that for each @xmath426 , there is a unique type @xmath427 such that @xmath428 .",
    "the second rule further ensures that for each @xmath426 , there is a model @xmath429 of in which @xmath427 is realized at @xmath430 .",
    "we may assume that these models have disjoint domains .",
    "let @xmath431 be the relational structure obtained by first taking the union of @xmath432 , and then adding all facts from @xmath18 . to prove that @xmath433",
    ", it suffices to show that      for point  ( i ) , let @xmath435 be the unique type realized by @xmath208 in @xmath429 , for all @xmath436 .",
    "it is not difficult to show by induction on the structural complexity of  @xmath69 that for all concepts @xmath437 and all @xmath438 , we have @xmath439(refer to the proof of theorem [ thm : alcmdd1 ] for details ) .",
    "since @xmath114 by definition includes @xmath69 and @xmath70 whenever @xmath68 is in , this implies point  ( i ) as desired .",
    "it thus remains to establish point  ( ii ) .",
    "assume to the contrary that there is a disjunct @xmath440 of @xmath1 such that @xmath441 , that is , there is a match @xmath402 of @xmath440 in @xmath414 such that @xmath442 .",
    "we define a diagram @xmath416 based on the restriction of the original model @xmath99 of @xmath86 , as follows : @xmath416 contains ( a ) all atoms @xmath4 such that @xmath443 and @xmath444 ( where @xmath5 can be either a concept name or of the form @xmath115 ) , ( b ) all atoms @xmath445 such that @xmath446 and @xmath447 , and ( c ) all atoms @xmath448 ( with @xmath449 a fresh variable ) such that @xmath450 and there is some @xmath451 .",
    "atoms of type ( c ) are used to handle the case in which a boolean subquery @xmath452 of @xmath106 is mapped inside @xmath453 , but the element @xmath208 does not itself belong to the image of @xmath402 .",
    "we remark that the mapping @xmath402 can be straightforwardly extended to a match for @xmath416 in @xmath99 by setting @xmath454 . since @xmath416 is satisfied in @xmath99 under @xmath402 and @xmath442 , by the last rule of @xmath86",
    ", we can obtain the desired contradiction by showing that @xmath416 implies @xmath440 .",
    "* @xmath456 is the restriction of @xmath106 to those variables that @xmath402 maps to elements of @xmath18 ; * for each @xmath426 such that some element of @xmath457 is in the range of @xmath402 , the cq @xmath458 is obtained by first taking the restriction of @xmath106 to those variables that @xmath402 maps to elements of @xmath457 and then identifying all variables that @xmath402 maps to the same element ( preserving the names of free variables ) .",
    "we start by showing that @xmath456 is satisfied in under @xmath116 . for role atoms in @xmath456 ,",
    "this is immediate since all such atoms also belong to @xmath416 .",
    "thus , consider some concept atom @xmath459 . since @xmath460 and @xmath402 is a match for @xmath106 in @xmath461",
    ", we have @xmath462 .",
    "then using the fact that @xmath463 and equation ( 1 ) above , we obtain @xmath464 . we know that @xmath465 , so by construction of @xmath416 , we must have @xmath466 , hence @xmath467 . using the type - coherence of @xmath47 and the fact that",
    "@xmath464 , we obtain @xmath468 , as desired .",
    "now consider a query @xmath458 . by construction",
    ", the length of @xmath458 can not exceed the length of @xmath1 , and so @xmath469 .",
    "since @xmath458 has a match in @xmath470 ( such that , if @xmath458 has a free variable , it is mapped to @xmath430 ) and @xmath470 realizes the type @xmath427 at @xmath430 , we must have @xmath471 . by construction of @xmath416 , there is an atom @xmath472 .",
    "since @xmath116 is a match for @xmath416 in @xmath47 , we must have @xmath473 . then , using the fact that is type - coherent , we can find a match @xmath474 of @xmath458 in ( such that , if @xmath458 has a free variable , @xmath474 maps it to @xmath475 ) .",
    "it is not hard to see that the matches @xmath116 and @xmath474 can be assembled into a match @xmath476 of @xmath106 in which coincides with @xmath116 on  @xmath477 .",
    "( continued ) we establish here the correctness of the translation from ( , aq ) to mddlog .",
    "that is , we show that , for every instance @xmath18 and elements @xmath478 , we have @xmath479 if and only if @xmath480 .",
    "assume that @xmath481 .",
    "then there is @xmath482 with @xmath98 such that @xmath483 . for each @xmath484 ,",
    "let @xmath411 be the unique type realized at @xmath412 in @xmath99 .",
    "let @xmath414 be the instance that consists of the atoms in @xmath18 and an atom @xmath415 for each @xmath484 .",
    "it can be checked that @xmath414 is a model of @xmath86 . since @xmath485",
    ", we obtain @xmath486 .",
    "`` only if '' .",
    "assume that @xmath486 and let @xmath99 be a model of @xmath86 with @xmath423 that does not contain @xmath487 .",
    "for each @xmath484 , let @xmath411 be a type such that @xmath488 ( in fact , the rules in @xmath86 enforce that there is exactly one such @xmath411 ) .",
    "note that @xmath489 . also note that each type @xmath411 must be realizable in some model of @xmath2 ( else",
    ", there would be a rule forbidding @xmath490 atoms ) .",
    "thus , for each @xmath484 , we can find a model @xmath491 of in which the type @xmath411 is realized at @xmath412 .",
    "we may assume that these models have disjoint domains .",
    "let @xmath431 be obtained by first taking the union of @xmath492 , and then adding all facts in @xmath18 . by construction , @xmath493 and @xmath494 .",
    "it remains to show that @xmath431 is a model of .",
    "for the base case , first suppose that @xmath500 , with @xmath5 a concept name and @xmath501 .",
    "then @xmath502 , so @xmath503 .",
    "next suppose that @xmath503 .",
    "then @xmath504 , so either @xmath505 , or @xmath506 and @xmath507 . in the former case",
    ", we immediately obtain @xmath500 . in the latter case , note that if @xmath508 , then @xmath86 would contain the rule @xmath509 , and this would yield a contradiction since @xmath510 .",
    "the inductive step for the boolean operators is trivial , so we consider only the case of the @xmath511 constructor ( the argument for the @xmath512 constructor is similar ) .",
    "thus , let @xmath513 and @xmath436 , and suppose that @xmath514 .",
    "then @xmath515 , so there exists @xmath516 such that @xmath517 and @xmath518 .",
    "it follows that @xmath519 , and hence by the induction hypothesis , we must have @xmath520 . since @xmath521 , we have @xmath522 , which yields @xmath523 .",
    "conversely , suppose @xmath431 satisfies @xmath524 , that is , there is an element @xmath525 such that @xmath431 satisfies @xmath526 and @xmath527 .",
    "if @xmath528 , the claim ( @xmath495 ) follows immediately from the induction hypothesis . otherwise , we must have that @xmath529 and , by induction hypothesis , @xmath530 .",
    "it follows that @xmath531 , because otherwise @xmath532 would be a non - realizable diagram , and @xmath86 would derive an inconsistency .          to complete the proof of theorem [ thm : otherdlucq ] , we need to show that the queries from ( @xmath160,ucq ) and ( @xmath161,ucq ) indicated in the proof sketch can not be expressed in ( @xmath135,ucq ) , or equivalently , mddlog .",
    "we start by providing a means of identifying queries which can not be expressed in mddlog , using the notion of colored instances , defined as follows :    [ color - def]let @xmath12 be a schema and @xmath533 be a set of unary predicates ( colors ) @xmath534 disjoint from @xmath12 .",
    "@xmath533-colored @xmath12-structure _ is an @xmath535-structure @xmath536 such that            [ forb - def ] given a set @xmath302 of @xmath533-colored @xmath12-structures ( called _ forbidden patterns _ ) , we define @xmath545 as the set of all @xmath12-structures @xmath18 such that there exists a @xmath533-coloring @xmath99 of @xmath18 for which @xmath546 for every @xmath547 . the _ forbidden patterns problem defined by @xmath302 _ is to decide whether a given @xmath12-structure belongs to @xmath545 .",
    "analogously to commsnp , we can define a query language cofpp consisting of all those boolean queries @xmath548 defined by @xmath549 with @xmath302 a set of @xmath533-colored @xmath12-structures .",
    "it follows directly from results in @xcite that commsnp and cofpp have the same expressive power . combining this result with proposition [ prop : mmsnpmdd ] ( from section  [ sect : obdammsnp ] ) , we obtain the following :        [ lem : crit ] a boolean query @xmath209 over schema @xmath12 does not belong to mddlogif for every @xmath550 , there exist @xmath12-instances @xmath551 and @xmath552 with @xmath553 and @xmath554 such that for every @xmath305-coloring @xmath555 of @xmath556 , there exists an @xmath305-coloring @xmath557 of @xmath558 such that from every substructure of @xmath557 having at most @xmath15 elements there is a homomorphism to @xmath555 .",
    "assume for a contradiction that the conditions of the lemma hold for every @xmath559 but that @xmath209 is equivalent to some query in mddlog .",
    "then , by proposition  [ fpp - mddlog ] , there is a set @xmath302 of @xmath533-colored @xmath12-structures such that for all @xmath12-instances @xmath18 , we have @xmath560 if and only if @xmath561 .",
    "let @xmath562 , and let @xmath563 be the maximal number of elements in the domain of some @xmath564 .",
    "we can assume w.l.o.g .",
    "that @xmath565 .",
    "take @xmath12-instances @xmath551 and @xmath552 satisfying the conditions of the lemma for @xmath566 . as @xmath553 , there exists a @xmath533-coloring @xmath567 of @xmath568 such that @xmath569 for every @xmath547 .",
    "it follows that there exists a @xmath533-coloring @xmath570 of @xmath571 such that from every substructure of @xmath557with at most @xmath563 elements , there exists a homomorphism to @xmath555 . since @xmath554",
    ", we know that there must exist some @xmath547 such that @xmath572 .",
    "as @xmath573 contains at most @xmath563 elements , we can compose this homomorphism with the previous homomorphism to obtain a homomorphism of @xmath573 into @xmath555 , contradicting the fact that @xmath574 .            * @xmath552 has elements @xmath581 and @xmath582 and @xmath583 and the atoms @xmath584 and @xmath585 for @xmath586 , and @xmath587 and @xmath588 for @xmath586 . * @xmath551 has elements @xmath589 and @xmath590 as well as @xmath591 for @xmath592 and @xmath593 for @xmath594 .",
    "the atoms of @xmath551 consist of : * * @xmath595 , and @xmath596 for @xmath597 and @xmath598 ; * * @xmath599 and @xmath600 for @xmath594 , and @xmath601 for @xmath602 and @xmath603 .",
    "it is readily checked that @xmath553 and @xmath554 , as required .",
    "let @xmath555 be an @xmath305-coloring of @xmath604 .",
    "since @xmath580 , we can find @xmath605 with @xmath606 such that the colorings of @xmath607 and @xmath608 coincide .",
    "define an @xmath305-coloring of @xmath558 by taking the coloring of @xmath607 for @xmath609 and the coloring of @xmath610 for @xmath583 .",
    "denote by @xmath570 the resulting colored structure .",
    "consider a subset @xmath69 of @xmath611 having at most @xmath15 elements , and let @xmath612 be the restriction of @xmath557 to the elements in @xmath69 .",
    "we define a function @xmath105 from @xmath69 to @xmath613 as follows :    * if @xmath614 , then let @xmath105 be the restriction of the following mapping to @xmath69 : @xmath615 , @xmath616 and @xmath617 ; * if @xmath618 , then let @xmath105 be the restriction of the following mapping to @xmath69 : @xmath619 , @xmath616 and @xmath620 ; * otherwise there exists @xmath621",
    ". then let @xmath105 be the restriction of the following mapping to @xmath69 : @xmath622 , @xmath619 for all @xmath623 , @xmath615 for all @xmath624 , @xmath616 for all @xmath625 , and @xmath617 .",
    "consider @xmath626 where @xmath627 and @xmath2 states that @xmath156 is functional . set @xmath628 and @xmath629 .",
    "note that @xmath630 ( since no model of @xmath2 contains @xmath552 ) and @xmath631 .",
    "let @xmath555 be any @xmath305-coloring of @xmath604 .",
    "we define an @xmath305-coloring @xmath632 of @xmath552 by assigning @xmath633 the same colors as in @xmath567 and giving @xmath634 the same color as @xmath412 .",
    "then the mapping sending @xmath430 to itself and @xmath635 to @xmath412 defines a homomorphism from @xmath557 to @xmath555 ( and hence also defines a homomorphism from any substructure of @xmath557 to @xmath555 ) .",
    "it follows by lemma [ lem : crit ] that @xmath209 is not definable in mddlog .",
    "for point  1 , let @xmath86 be a unary simple mddlogprogram .",
    "the rewriting of each rule of @xmath86 into an equivalent @xmath162-concept inclusion is similar to the proof of theorem  [ thm : alcmdd1 ] except that now one also has to concider non - connected bodies .",
    "they can be translated using the universal role .",
    "for example , @xmath636 is rewritten into @xmath637 .",
    "now consider point  2 .",
    "the translation from ( @xmath168,aq ) to unary simple mddlogqueries is a modified version of the translation given in the proof of theorem  [ thm : alcmdd1 ] for the translation from ( @xmath135,aq ) to _ connected _ unary simple mddlogqueries .",
    "assume that @xmath0 with @xmath143 is given .",
    "as in theorem  [ thm : alcmdd1 ] , we take types to be subsets of @xmath113 .",
    "the mddlogprogram @xmath86 consists of the following rules : @xmath638 \\bot & \\leftarrow&\\delta(\\textbf{x } ) & \\text { for all non - realizable   diagrams $ \\delta(\\textbf{x})$ } \\\\[0.5 mm ]   & & & \\text { of    the form $ p_{\\tau_{1}}(x_{1 } ) \\wedge p_{\\tau_{2}}(x_{2})$,}\\\\[0.5 mm ]   & & & \\text{$p_{\\tau}(x ) \\wedge a(x)$ , or } \\\\[0.5 mm ]     & & & \\text{$p_{\\tau_1}(x_1)\\land s(x , y)\\land p_{\\tau_2}(x_2)$ } \\\\[0.5 mm ] \\mn{goal}(x ) & \\leftarrow & p_\\tau(x )   & \\quad \\text { for all } p_\\tau \\text { with } a \\in p_\\tau    \\end{array}\\ ] ] note that the only difference with the rules in the proof of theorem  [ thm : alcmdd1 ] is the presence of rules of the form @xmath639 which are not connected .",
    "@xmath86 is still unary and simple .",
    "equivalence of @xmath0 and @xmath88 can now be proved similarly to theorem  [ thm : alcmdd1 ] .",
    "it remains to be shown that ( @xmath168,aq ) and ( @xmath186,aq ) are equally expressive .",
    "but this is again folkore @xcite : it is known that for every @xmath186-ontology @xmath2 , there exists an @xmath168-ontology @xmath640 ( possibly using additional concept names ) such that ( i ) @xmath641 and ( ii ) for every @xmath328 , there exists a model @xmath642 with the same domain and interpreting the concept names of @xmath2 in the same way as @xmath287 and interpreting the role names as relations containing their interpretation in @xmath287 .",
    "it follows that ( @xmath168,aq ) and ( @xmath186,aq ) are equally expressive .",
    "we briefly discuss _ boolean atomic queries _",
    "( baqs ) , i.e. , queries of the form @xmath187 , where @xmath5 is a unary relation symbol .",
    "baqs behave similarly to aqs and one can show modified versions of theorems  [ thm : alcmdd1 ] to theorem  [ thm : alcmdd3 ] above in which aqs are replaced by baqs and unary goal predicates by @xmath188-ary goal - predicate , respectively .      we show the required modifications to the proof of theorem  [ thm : alcmdd1 ] .",
    "the remaining results are proved by similar modifications and left to the reader . for the translation from ( @xmath135,baq ) to boolean connected simple mddlog ,",
    "the only difference to the program constructed in the proof of theorem  [ thm : alcmdd1 ] is that rules of the form @xmath643 are replaced by rules of the form @xmath644 .",
    "conversely , for the translation from boolean connected simple mddlogto ( @xmath135,baq ) , we regard @xmath146 as a concept name and take the baq @xmath645 .",
    "the rewriting of goal rules must also be accordingly modified .",
    "for example , @xmath646 is rewritten into @xmath647 .",
    "( continued ) we establish here the correctness of the translation from ( unfo , ucq ) to mddlog .",
    "that is , we show that , for every instance @xmath18 and elements @xmath648 , we have @xmath649 if and only if @xmath650 .",
    "the `` if '' direction proceeds exactly as in the proof of theorem  [ thm : alctomdd ] , so here we focus on the `` only if '' direction .",
    "`` only if '' .",
    "assume that @xmath421 and let @xmath99 be a model of @xmath86 with @xmath423 that does not contain @xmath424 . for each @xmath426 ,",
    "let @xmath427 be the unique type such that @xmath428 , and let @xmath429 be a model of in which @xmath427 is realized at @xmath430 .",
    "note that such a model must exist because otherwise the diagram @xmath651 would be non - realizable and @xmath86 would include a rule @xmath652 .",
    "we may assume that these models have disjoint domains .",
    "let @xmath431 be obtained by first taking the union of @xmath432 , and then adding to it all facts of @xmath18 .",
    "we show that          note that @xmath229 may be either a sentence or a formula with exactly one free variable , and in the former case , we interpret @xmath656 $ ] as @xmath229 .",
    "since all types @xmath435 must include the sentence @xmath2 , @xmath657 implies ( i ) .    the base case ( @xmath658 ) and the inductive step for formulas of the form @xmath659",
    "are omitted since they are straightforward .",
    "thus , let @xmath229 be a formula from @xmath199 of the form @xmath660 , and let @xmath436 .",
    "we may assume that @xmath229 is connected , meaning that the graph whose nodes are the subformulas @xmath193 and containing an edge between @xmath193 and @xmath661 if they share a variable , is connected .",
    "this is because , if @xmath229 is not connected , then the claim follows immediately from the analogous claims for each of the connected components of @xmath229 .",
    "we present the proof for the case where @xmath229 has answer variable  @xmath93 ( the argument for sentences is similar ) .",
    "first suppose that @xmath662 , which means @xmath663 $ ] .",
    "it follows that there is an assignment @xmath402 of elements of @xmath457 to the variables @xmath664 such that @xmath665 and for every @xmath257 , @xmath666 .",
    "if @xmath667 is an atomic formula , then using the fact that @xmath668 , we obtain @xmath669 .",
    "if @xmath193 is not atomic , then it must have at most one free variable @xmath670 .",
    "we thus have that @xmath671 $ ] , so @xmath672 . applying the induction hypothesis , we obtain @xmath673 $ ] .",
    "it follows that @xmath402 is a satisfying assignment for @xmath229 in @xmath431 , hence @xmath674 $ ] .",
    "conversely , suppose @xmath675 $ ] , that is , @xmath431 satisfies @xmath676 for some assignment @xmath402 of elements of @xmath677 to the variables @xmath664 such that @xmath665 .",
    "first assume that the image of @xmath402 is entirely contained in @xmath457 .",
    "using the induction hypothesis to treat the non - atomic @xmath193 as before , we then get that @xmath678 $ ] , hence @xmath654 as required .",
    "next suppose that the image of @xmath402 is not wholly contained in @xmath457 , and let @xmath679 be the set consisting of the elements of @xmath309 that are in the range of @xmath402 . by the connectedness assumption and the fact that @xmath501 , the set @xmath679 contains @xmath430 .",
    "in what follows , we will define a number of formulas by syntactic operations on @xmath212 .",
    "it will follow from the definition of @xmath199 that each of these formulas again belongs to @xmath199 , and hence , is subject to the induction hypothesis .",
    "let @xmath680 be obtained from @xmath212 by identifying all variables @xmath681 such that @xmath682 .",
    "we assume that the free variable @xmath93 retains its name , and use @xmath683 to denote the conjunct of @xmath680 which corresponds to @xmath193 . for each @xmath684 ,",
    "let @xmath685 be the unique variable in @xmath686 with @xmath687 .",
    "let @xmath688 be the restriction of @xmath686 to those @xmath689 which contain only variables @xmath198 with @xmath690 , with free variable @xmath691 .",
    "we have @xmath692 $ ] via the restriction of @xmath402 to the variables in @xmath688 , thus , by the earlier argument ( since all witnessing elements are contained in @xmath693 ) , we have @xmath694 .",
    "let @xmath695 be @xmath686 , but with free variable @xmath696 instead of @xmath93 .",
    "note that @xmath697 $ ] .",
    "consider the diagram @xmath698 obtained by taking the restriction of @xmath99 to @xmath679 , and then replacing each @xmath684 with @xmath691 . since @xmath698 is made true by @xmath99 , and @xmath99",
    "is a model of @xmath86 , we have that @xmath698 is a realizable diagram . moreover , using the fact that @xmath699 and @xmath694 for every @xmath684 , one can show that the diagram @xmath698 implies the query @xmath695 .",
    "this together with the realizability of @xmath698 yields @xmath700 , hence @xmath701 $ ] .",
    "let @xmath702 be a satisfying assignment of @xmath695 in @xmath470 such that @xmath703 .",
    "we use @xmath702 to construct a satisfying assignment @xmath704 of @xmath680 mapping @xmath93 to @xmath208 , such that the range of @xmath704 lies entirely inside @xmath457 . the assignment @xmath704 is defined as follows : for all @xmath670 with @xmath705 in @xmath457 , set @xmath706 ; for all other @xmath670 , set @xmath707 . to see that @xmath704 is indeed a satisfying assignment of @xmath686 , note that each conjunct of @xmath686 contains , besides @xmath696 , either only variables @xmath670 with @xmath708 , or only variables @xmath670 with @xmath709 .",
    "the former conjuncts are satisfied because @xmath402 is a match , and the latter conjuncts are satisfied because @xmath702 is a match .",
    "moreover , @xmath710 .",
    "therefore , @xmath711 $ ] and hence @xmath712 as required .",
    "finally , we can show ( ii ) in a similar way .",
    "we suppose , for the sake of contradiction , that @xmath713 under some assignment @xmath402 to the existentially quantified variables in @xmath1 .",
    "let @xmath714 be the elements of @xmath309 belonging to the range of @xmath402 ( here again we focus on the case in which @xmath1 is connected and contains at least one free variable ) .",
    "then , in the same way as above , we can decompose @xmath1 into unary subqueries @xmath715 that are satisfied in the different subinstances @xmath716 with @xmath717 , and conclude that @xmath718 for each @xmath717 .",
    "we can then show that the diagram obtained by taking all facts in @xmath99 over elements in @xmath714 and replacing each @xmath719 by @xmath691 implies the query @xmath1 .",
    "this yields the desired contradiction since @xmath99 is a model of @xmath86 .",
    "let @xmath12 consist of unary predicates @xmath220 and a ternary predicate @xmath221 , and let @xmath209 be the @xmath12-query defined by @xmath222 .",
    "a ( gf , ucq ) query expressing @xmath209 was given in the body of the paper .",
    "it thus remains to show that @xmath209 can not be expressed in mddlog .",
    "we make use of the characterization of mddlogqueries in terms of @xmath120-colorings provided by lemma [ lem : crit ] .      * @xmath722 has elements @xmath724 and the atoms @xmath725 , @xmath726 , and @xmath727 for @xmath728 .",
    "* @xmath723 has elements @xmath729 , and @xmath730 and the following atoms : @xmath725 , @xmath726 , and @xmath731 whenever @xmath732 , @xmath733 , and @xmath734 .",
    "it is readily checked that @xmath735 and @xmath736 , as required .",
    "let @xmath567 be an @xmath305-coloring of @xmath723 .",
    "define an @xmath305-coloring @xmath570 of @xmath722 by giving all elements of @xmath737 exactly the same color as in @xmath567 .",
    "choose @xmath257 with @xmath738 in such a way that for every sequence @xmath739 with @xmath740 and @xmath741 there exists a sequence @xmath742 with @xmath743 and @xmath744 such that the coloring of @xmath739 coincides with the coloring of @xmath742 and @xmath745 .",
    "such an @xmath257 exists since @xmath746",
    ". now give @xmath525 the color of @xmath747 .",
    "one can now easily construct , for every structure corresponding to an @xmath15-element subset of @xmath570 , a homomorphism to  @xmath567 .",
    "we start by describing the translation from frontier - guarded ddlogto ( gnfo , ucq ) .",
    "let @xmath86 be a frontier - guarded ddlogquery .",
    "it is easily verified that if we write out the implication symbol in a frontier - guarded ddlogrule using conjunction and negation , the resulting formula belongs to gnfo .",
    "thus , we can take @xmath2 to be the set of all non - goal rules of @xmath86 , viewed as a gnfo sentence , and let @xmath1 be the ucq that consists of all bodies of rules whose conclusion contains the idb relation @xmath146 .",
    "it is easy to check that the ontology - mediated query ( @xmath748 , where @xmath12 is the schema consisting of all edb relations , is equivalent to the frontier - guarded ddlogquery @xmath88 .",
    "next , we explain how to translate ( gnfo , ucq ) to frontier - guarded ddlog .",
    "since every sentence of gf is equivalent to a sentence of gnfo @xcite , this also yields a translation of ( gf , ucq ) to frontier - guarded ddlog . recall that we used a specific normal form for unfo sentences . for gnfo , we can use an analogous normal form .",
    "specifically , we can assume that @xmath2 is generated by the following grammar : @xmath749 where each @xmath193 is either a relational atom or a formula generated by the same grammar whose free variables are among @xmath194 .",
    "the `` guard '' @xmath7 is an atomic formula , possibly an equality , containing _ all variables _ in @xmath129 .",
    "let @xmath113 be the set of all subformulas of @xmath2 .",
    "let @xmath120 be the maximum of the number of variables in @xmath2 and the number of variables in @xmath1 . for @xmath750",
    ", we denote by @xmath751 the set of all formulas @xmath752 with @xmath753 of the form @xmath754 with @xmath202 , @xmath755 , and such that each @xmath193 is either an atomic formula that uses a symbol from @xmath1 or is of the form @xmath756 for some @xmath757 .",
    "a _ guarded @xmath758-type _",
    "@xmath116 is a subset of @xmath751 that contains at least one atomic relation ( possibly equality ) containing all variables @xmath759 , and also contains the sentence @xmath2 itself .",
    "we denote the set of all guarded @xmath758-types by @xmath760 .",
    "note that , by definition , there are no guarded @xmath758-types for @xmath758 greater than the maximal arity of a relation from @xmath12 .",
    "we now proceed the same way as we did in the case of unfo ( but using guarded @xmath758-types instead of unary types ) .",
    "we introduce a fresh @xmath758-ary relation symbol @xmath115 for each guarded @xmath758-type @xmath116 , and we denote by @xmath91 the schema that extends @xmath12 with these additional relations .",
    "diagrams , realizability , and implying a query are defined in the same way as before .",
    "the ddlogprogram is also constructed in essentially the same manner , except that the first rule of the program is replaced by the following : @xmath761 we establish the correctness of the translation .",
    "that is , we show that , for every instance @xmath18 and elements @xmath762 , we have @xmath763 if and only if @xmath650 .",
    "assume that @xmath764 .",
    "then there is @xmath482 with @xmath98 such that @xmath765 .",
    "for every fact @xmath766 of @xmath18 , let @xmath767 be the unique guarded @xmath758-type ( with @xmath768 ) realized at @xmath430 in @xmath99 .",
    "let @xmath414 be the instance that consists of the atoms in @xmath18 and the atom @xmath769 for each fact @xmath766 in @xmath18 .",
    "it can be checked that @xmath414 is a model of @xmath86 . since @xmath419 , @xmath421 .",
    "`` only if '' .",
    "assume that @xmath421 and let @xmath99 be a model of @xmath86 with @xmath423 that does not contain @xmath424 .",
    "we say that a tuple @xmath714 is `` live '' in @xmath18 if @xmath18 contains @xmath766 for some relation symbol @xmath67 . for each live tuple @xmath714 of @xmath18 ,",
    "let @xmath767 be the unique guarded @xmath758-type ( with @xmath768 ) such that @xmath770 , and let @xmath771 be a model of in which @xmath767 is realized at @xmath714 ( such a model must exist because otherwise the diagram @xmath772 would be non - realizable and @xmath86 would include a rule @xmath773 ) .",
    "we may assume that for distinct live tuples @xmath714 and @xmath774 , @xmath775 and @xmath776 overlap only ( possibly ) on @xmath777 .",
    "let @xmath431 be obtained by first taking the union of @xmath778 for all live tuples @xmath714 of @xmath18 , and then adding to it all facts of @xmath18 .",
    "we show that      for all live tuples @xmath779 of @xmath780 , let @xmath781 be the unique guarded @xmath758-type realized by @xmath779 in @xmath778 , for all @xmath436 .",
    "note that a tuple @xmath779 may be live in @xmath780 for several different choices of @xmath714 , but then the guarded @xmath758-type realized by @xmath779 in each such @xmath778 is the same : otherwise , there must be some atom @xmath782 that belongs to @xmath767 , but not to @xmath783 , and then the diagram @xmath784 is non - realizable and thus ruled out by @xmath86 .              *",
    "@xmath316,aq ) , ( @xmath186,aq ) , unary simple mddlog , and generalized cocsp with one constant symbol ; * ( @xmath135,aq ) , ( @xmath166,aq ) , unary connected simple mddlog , and generalized cocsps with one constant symbol such that all templates are identical except for the interpretation of the constant symbol ; * ( @xmath162,baq ) , ( @xmath186,baq ) , boolean simple mddlog , and generalized cocsp ; * ( @xmath135,baq ) , ( @xmath166,baq ) , boolean connected simple mddlog , and cocsp .",
    "_ moreover , given the ontology - mediated query or monadic datalog program , the correponding csp template is of at most exponential size and can be constructed in time polynomial in the size of the template . _",
    "recall that the equivalences between the obda languages and fragments of monadic disjunctive datalog have been proved already .",
    "moreover , point  1 has been proved in the paper .",
    "it thus remains to be proved that the following query languages are equally expressive :          we use the notation from the proof of point  1 .",
    "in particular , @xmath349 denotes the canonical @xmath12-structure with domain @xmath329 . for ( a ) ,",
    "assume @xmath12 , @xmath2 , and @xmath4 are given , where @xmath2 is an @xmath135-ontology .",
    "let @xmath329 be the set of all types @xmath116 that are realizable for @xmath2 and define @xmath1063 one can show that for every @xmath12-instance @xmath18 and @xmath366 : @xmath359 for some @xmath1064 iff @xmath1065 .",
    "thus , the query defined by @xmath1066 is equivalent to the query defined by @xmath310 .",
    "conversely , assume that @xmath310 is a finite set of @xmath1067-structures which coincide except for the interpretation of the constant symbol  @xmath634 , and let @xmath47 be the @xmath12-reduct of these structures . take for every @xmath208 in the domain @xmath362 of @xmath47 a fresh concept name @xmath363 , let @xmath5 be another fresh concept name , and set @xmath1068 one can show that for every @xmath12-instance @xmath18 and @xmath366 , @xmath1069 for some @xmath361 iff @xmath1065 .",
    "thus @xmath1066 expresses the same query as @xmath310 .",
    "for ( b ) assume that a query @xmath1070 is given .",
    "we assume w.l.o.g .",
    "that @xmath1071 because otherwise we have @xmath1072 for all @xmath12-instances @xmath18 , and so @xmath56 is trivial .",
    "let @xmath329 be the set of all types @xmath1073 that are realized in a model @xmath287 of @xmath2 with @xmath1074 .",
    "since @xmath1071 , the set @xmath329 is non - empty .",
    "one can show that for every @xmath12-instance @xmath18 : @xmath1075 iff @xmath1076 .",
    "thus , the query defined by @xmath1077 is equivalent to the query defined by @xmath349 .",
    "conversely , for a csp template @xmath1078 over schema , we construct an ontology - mediated query @xmath0 as follows .",
    "take for every @xmath208 in the domain @xmath1079 of @xmath1078 a fresh concept name @xmath363 , let @xmath5 be another fresh concept name , and set @xmath1080 and @xmath1081 the query @xmath1077 is equivalent to the query defined by the template @xmath47 .",
    "we provide the proof of the lower bound .",
    "the proof is by reduction of a -hard @xmath1083-tiling problem .",
    "an instance of this tiling problem is given by a natural number @xmath1084 and a triple @xmath1085 with @xmath1086 a non - empty , finite set of _ tile types _ including an _ initial tile _",
    "@xmath1087 to be placed on the lower left corner , @xmath1088 a _ horizontal matching relation _ , and @xmath1089 a _ vertical matching relation_. a _ solution _ for the @xmath1083-tiling problem for @xmath1085 is a map @xmath1090 such that @xmath1091 , @xmath1092 for all @xmath1093 , and @xmath1094 for all @xmath1095 .",
    "it is -complete to decide whether an instance of the @xmath1083-tiling problem has a solution .    for the reduction , let @xmath1084 and @xmath1085 be an instance of the @xmath1083-tiling problem with @xmath1096 .",
    "we construct a schema @xmath12 , two @xmath10-ontologies @xmath176 and @xmath1097 , and a query @xmath1098 with @xmath1099 a unary relation symbol such that @xmath1085 has a solution if and only if @xmath1100 if and only if @xmath1101 .",
    "we first define an ontology @xmath890 ( for grid ) which encodes the @xmath1083-grid . to define @xmath890 , we use role names @xmath93 and @xmath1102 to represent the @xmath1083-grid and two binary counters @xmath281 and @xmath804 for counting from @xmath188 to @xmath1103 . the counters",
    "use concept names @xmath1104 and @xmath1105 as their bits , respectively .",
    "@xmath890 contains the inclusions @xmath1106 for @xmath1107 .",
    "counters are relevant only if the concept @xmath1108 is true .",
    "@xmath890 contains the following well - known inclusions stating that the value of the counter @xmath281 is incremented when going to @xmath93-successors ( and @xmath1109 is true ) and the value of the counter @xmath804 is incremented when going to @xmath1102-successors ( and @xmath1109 is true ) : for @xmath1110 , @xmath1111 where @xmath1112 and @xmath1113 where @xmath1114 and similarly for @xmath804 and @xmath1102 .",
    "@xmath890 also states that the value of the counter @xmath281 does not change when going to @xmath1102-successors and the value of the counter @xmath804 does not change when going to @xmath93-successors : for @xmath1107 , @xmath1115 and similarly for @xmath804 and @xmath93 .",
    "in addition , @xmath890 states that when the counter @xmath281 is @xmath1103 , there is no @xmath93-successor ( with @xmath1109 ) and if the counter @xmath804 is @xmath1103 , there is no @xmath1102-successor ( with @xmath1109 ) : @xmath1116 and @xmath1117 this finishes the definition of @xmath890 .",
    "define the schema @xmath1118 we set @xmath1119 ( the latter inclusion merely serves to ensure @xmath1099 is part of the schema of @xmath1097 ) .",
    "we now extend @xmath890 to another ontology @xmath1120 .",
    "in addition to the inclusions in @xmath890 , @xmath1120 states that @xmath1121 holds at @xmath1122 : @xmath1123 and that the tiling is complete on @xmath1109 : @xmath1124 next , @xmath1120 states that if a tiling condition is violated , then a concept name @xmath1099 is true . for all @xmath1125 : @xmath1126 for all @xmath1127 : @xmath1128 and for all @xmath1129 : @xmath1130 finally , @xmath1099 is propagated along @xmath93 and @xmath1102 : @xmath1131 we set @xmath1132 and show :              * @xmath1146 if the @xmath120th bit of @xmath257 is @xmath1147 , * @xmath1148 if the @xmath120th bit of @xmath257 is @xmath188 , * @xmath1149 if the @xmath120th bit of @xmath260 is @xmath1147 , and * @xmath1150 if the @xmath120th bit of @xmath260 is @xmath188 .",
    "conversely , assume that @xmath1085 admits a @xmath1083-tiling given by @xmath1155 .",
    "we show that @xmath1156 for all @xmath1137-instances @xmath18 which are satisfiable w.r.t .",
    "@xmath1097 . then points  2 and 3 are refuted , as required .",
    "assume @xmath18 is satisfiable w.r.t .",
    "we define a model @xmath1157 of @xmath176 with @xmath1158 as follows : the domain of @xmath99 coincides with @xmath19 .",
    "symbols from @xmath1137 are defined in @xmath99 in exactly the same way as in @xmath18 . to define the facts involving tile types @xmath1159 associate with every @xmath366 such that @xmath1109 applies to @xmath208 , the uniquely determined pair @xmath1160 given to the values of the counters @xmath281 and @xmath804 by @xmath1109 . then set @xmath1161 iff @xmath1162 .",
    "note that @xmath99 contains no facts involving @xmath1099 .",
    "it is readily checked that the resulting structure is a model of @xmath176 .",
    "* proposition  [ prof : fotodlog ] . * _ if @xmath376 is an ontology - mediated query with @xmath2 formulated in equality - free fo and @xmath1 a ucq , then @xmath56 is preserved by homomorphisms .",
    "consequently , it follows from @xcite that if @xmath56 is fo - rewritable , then @xmath56 is rewritable into a ucq ( thus into datalog ) .",
    "_    let @xmath1163 be a homomorphism , and @xmath262 a tuple from @xmath1164 such that @xmath1165 . furthermore ,",
    "suppose for the sake of contradiction that @xmath1166 .",
    "then there is a finite relational structure @xmath1167 such that @xmath1168 and @xmath1169 .",
    "let @xmath1170 be the inverse image of @xmath1171 under @xmath105 .",
    "more precisely , @xmath1172 , and @xmath1173 contains all facts whose @xmath1174-image is a fact of @xmath1175 where @xmath1174 is the map that extends @xmath105 by sending every element of @xmath1176 to itself . clearly , @xmath1177 .",
    "furthermore , @xmath1178 because @xmath1179 is a homomorphism and @xmath1 is preserved by homomorphisms . to obtain a contradiction against @xmath1165 , it therefore only remains to show that @xmath1180 .",
    "it is known that equality - free first - order sentences are preserved by passing from a structure to its quotient under an equivalence relation that is a congruence . by construction ,",
    "the kernel of the map @xmath1174 is a congruence relation on the structure @xmath1170 and its quotient is isomorphic to @xmath1171 .",
    "if cocsp(@xmath1182 ) is defined by a first - order sentence @xmath212 , then replacing every subformula of the form @xmath1183 in @xmath212 by @xmath1184 yields a first - order sentence defining cocsp(@xmath310 ) .",
    "for the converse , we make use a characterization of fo - definability of generalized cocsps with constants using finite obstruction sets .",
    "let @xmath310 be a finite set of @xmath291-structures .",
    "a set @xmath1185 of @xmath303-structures is an _ obstruction set for csp(@xmath310 ) _",
    "if for all @xmath789-structures @xmath18 the following conditions are equivalent :      it is known that , for any finite set of structures @xmath310 , cocsp(@xmath310 ) is fo - definable if and only if @xmath310 has a finite obstruction set .",
    "this was shown in @xcite for structures without constant symbols , and follows easily from results in @xcite even for the case of structures with constants .",
    "finally , it was shown in proposition a.2 ( 1 ) in @xcite that if cocsp(@xmath310 ) has a finite obstruction set , then so does cocsp(@xmath1190 ) .        * if cocsp(@xmath47 ) is fo - definable for all @xmath1186 , then cocsp(@xmath310 ) is fo - definable . *",
    "conversely , if all @xmath1186 are mutually homomorphically incomparable , and cocsp(@xmath310 ) is fo - definable , then each cocsp(@xmath47 ) , @xmath1186 , is fo - definable .",
    "for point  1 choose for every @xmath1191 a fo - sentence @xmath1192 such that @xmath1193 iff @xmath1194 for all @xmath12-instances @xmath18 .",
    "let @xmath212 be the conjunction over all @xmath1195 with @xmath1186 .",
    "then @xmath1196 iff @xmath1194 for any @xmath1186 holds for all @xmath12-instances @xmath18 , as required .    to prove the other direction we require the notion of a _ critical obstruction _ :",
    "a @xmath12-structure @xmath287 is called a critical obstruction for csp(@xmath1197 ) iff @xmath1198 for any @xmath1199 but for any proper substructure @xmath1200 of @xmath287 there exists a @xmath1186 such that @xmath1201 .",
    "it is readily checked that cocsp(@xmath1197 ) has a finite obstruction set iff there only exist finitely many critical obstructions for csp(@xmath1197 ) .",
    "for point  2 assume that all @xmath1186 are mutually homomorphically incomparable and that cocsp(@xmath310 ) is fo - definable .",
    "assume for a proof by contradiction that cocsp(@xmath567 ) is not fo - definable for some @xmath1202 .",
    "then the set @xmath332 of critical obstructions for csp(@xmath567 ) is infinite .",
    "let @xmath1203 be a substructure of @xmath1203 such that no proper substructure of @xmath567 can be homomorphically mapped to any @xmath1204 .",
    "it is readily checked that the set @xmath1205 of disjoint unions @xmath1206 , @xmath1207 , are critical obstructions for csp(@xmath310 ) .",
    "thus cocsp(@xmath310 ) is not fo - definable and we have derived a contradiction .        1 .",
    "if cocsp(@xmath844 ) is datalog - definable for all @xmath1186 , then cocsp(@xmath310 ) is datalog - definable . 2 .",
    "conversely , if all @xmath1186 are mutually homomorphically incomparable , and cocsp(@xmath310 ) is datalog - definable , then each cocsp(@xmath844 ) , @xmath1186 , is datalog - definable .",
    "\\(1 ) if each cocsp(@xmath381 ) is datalog - definable , then , since datalog is closed under conjunction , we also have that cocsp(@xmath1190 ) is datalog - definable .",
    "let @xmath86 be a datalog program that defines cocsp(@xmath1190 ) .",
    "a datalog program @xmath1208 defining cocsp(@xmath310 ) may be obtained from @xmath86 by replacing every @xmath1209 with @xmath1210 . for ( 2 ) ,",
    "we make use of a characterization of datalog - definability in terms of _ obstruction sets of bounded treewidth_. recall from the proof of lemma  [ lem : constants ] the notion of an obstruction set for a set of structures .",
    "suppose that cocsp(@xmath310 ) is definable by a datalog program whose rules contain at most @xmath120 variables .",
    "then @xmath310 has an obstruction set of treewidth @xmath120 , namely , the set of all canonical structures of non - recursive datalog programs obtained by unfolding the given datalog program finitely many times ( a standard argument ) .",
    "we claim that , in fact , each @xmath393 has an obstruction set of treewidth @xmath120 .",
    "we prove this claim by contraposition : if some @xmath393 does not have an obstruction set of treewidth at most @xmath120 , there is a structure @xmath287 such that @xmath1211 , while , at the same time , @xmath1212 implies @xmath1213 for all structures @xmath824 of treewidth at most @xmath120 .",
    "now , take @xmath1200 to be the disjoint union of @xmath287 and @xmath47 .",
    "then we have that @xmath1214 ( here , we are using also the fact that @xmath310 consists of homomorphically incomparable structures ) . at the same time , @xmath1212 implies @xmath1213 for all structures @xmath824 of treewidth at most @xmath120 .",
    "therefore , cocsp(@xmath310 ) has no obstruction set of bounded treewidth , a contradiction .",
    "so far , we have shown that , for each @xmath393 , cocsp(@xmath47 ) has an obstruction set of bounded tree width . by proposition a.2 ( 1 ) in @xcite , we have that , for all structures @xmath287 with constant symbols , if cocsp(@xmath287 ) has an obstruction set of bounded treewidth , then cocsp(@xmath1215 ) has an obstruction set of bounded treewidth too ( although it is not explicitly stated , it can easily be verified that the relevant construction used there preserves bounded treewidth ) .",
    "thus , we obtain that , for each @xmath393 , cocsp(@xmath381 ) has an obstruction set of bounded width .",
    "it was shown in @xcite that , for any structure @xmath287 without constant symbols , cocsp(@xmath287 ) is datalog - definable if and only if @xmath287 has an obstruction set of bounded tree - width .",
    "therefore we have that , for each @xmath393 , cocsp(@xmath1216 is datalog - definable .",
    "we prove the lower bound and employ for the reduction the same tiling problem as in the lower bound proof of theorem  [ contnexp ] .",
    "we also employ the ontologies constructed in the proof of theorem  [ contnexp ] .    for the reduction , let @xmath1084 and @xmath1085 be an instance of the @xmath1083-tiling problem with @xmath1096 .",
    "we construct a schema @xmath12 , an @xmath10-ontology @xmath2 and a query @xmath4 such that @xmath1085 has a solution if and only if @xmath1217 is fo - rewritable if and only if @xmath1218 is fo - rewritable .",
    "we consider the ontology @xmath890 , its extension @xmath1120 , and the schema @xmath1137 from the proof of theorem  [ contnexp ] . to define @xmath2 , we take a fresh role name @xmath156 and two concept names @xmath5 and @xmath1219 and set @xmath1220 and @xmath1221 .",
    "assume that @xmath1085 admits no @xmath1083-tiling .",
    "@xmath1217 is not fo - rewritable iff there does not exist a finite set @xmath1185 of @xmath1067-structures ( an obstruction set ) such that the following conditions are equivalent for every @xmath12-instance @xmath18 and @xmath366 :            conversely , assume that @xmath1085 has a @xmath1083-tiling given by @xmath1155 .",
    "we have to show that there exists an fo - formula @xmath200 over @xmath12 such that for all @xmath12-instances @xmath18 and @xmath366 , @xmath1231 $ ] iff @xmath1222 .",
    "the direction from point  1 to point  2 is trivial .",
    "conversely , assume that @xmath1235 .",
    "then @xmath18 is satisfiable w.r.t .",
    "we define a model @xmath1157 of @xmath2 with @xmath1158 as follows .",
    "the domain of @xmath99 coincides with @xmath19 .",
    "symbols from @xmath12 are defined in @xmath99 in exactly the same way as in @xmath18 . to define the facts involving tile types @xmath1159 , associate with every @xmath366 such that @xmath1109 applies to @xmath208 , the uniquely determined pair @xmath1160 given to the values of the counters @xmath281 and @xmath804 by @xmath1109 . then set @xmath1161 iff @xmath1162 .",
    "note that @xmath99 contains no facts involving @xmath1099 or @xmath5 .",
    "it is readily checked that the resulting structure is a model of @xmath2 , as required .      the proof is based on a modification of the proof of lemma  [ lem : lower ] . for the reduction ,",
    "let @xmath1084 and @xmath1085 be an instance of the @xmath1083-tiling problem with @xmath1096 .",
    "we construct a schema @xmath12 , an @xmath10-ontology @xmath640 and a query @xmath4 such that @xmath1085 has a solution if and only if @xmath1236 is datalog - rewritable if and only if @xmath1237 is datalog - rewritable .",
    "we consider the ontology @xmath890 , its extension @xmath1120 , and the schema @xmath1137 from the proof of theorem  [ contnexp ] . to define @xmath640",
    "we take fresh role names @xmath156 and @xmath1238 and fresh concept names @xmath1239 and encode the 3-colorability problem as follows : @xmath1240 and @xmath1241 .",
    "assume that @xmath1085 admits no @xmath1083-tiling .",
    "for any connected undirected graph @xmath1242 , we identify some @xmath1243 in @xmath1242 with @xmath1122 and define a @xmath12-instance @xmath18 as the union of @xmath1138 and the facts @xmath1244 for all @xmath1245 in @xmath1242 and @xmath1246 for every edge @xmath1247 in @xmath1242 .",
    "it is readily checked that          we now prove the undecidability results for @xmath161 . in @xcite ,",
    "alternative definitions of query containment and fo - rewritability are employed which consider only instances that are satisfiable w.r.t .",
    "the ontologies involved .",
    "we say that @xmath1251 _ is contained in _",
    "@xmath1252 _ w.r.t .",
    "consistent instances _ if @xmath1253 for all @xmath12-instance @xmath18 such that @xmath18 is satisfiable w.r.t .",
    "similarly , a query @xmath0 is _ fo - rewritable _",
    "w.r.t  _ consistent instances _ if there exists an fo - query @xmath106 such that @xmath1254 for all @xmath12-instance @xmath18 that are satisfiable w.r.t .",
    "undecidability of query containment w.r.t .",
    "consistent instances and of fo - rewritability w.r.t .",
    "consistent instances were proven respectively in @xcite and @xcite . here",
    "we show how the proofs can be modified to work for query containment , fo - rewritability , and datalog rewritability as defined in this paper .",
    "* @xmath1256 a non - empty , finite set of _ tile types _ including an _ initial tile _",
    "@xmath1087 to be placed on the lower left corner , a _ final tile _",
    "@xmath1257 to be placed on the upper right corner , and sets @xmath1258 and @xmath1259 of tile types to be placed on the upper and right borders respectively , satisfying @xmath1260 ; * @xmath1088 a _ horizontal matching relation _ ; and * @xmath1089 a _ vertical matching relation_.      * @xmath1091 , * @xmath1263 , * @xmath1264 for all @xmath1265 ; * @xmath1266 for all @xmath1267 and @xmath1268 ; * @xmath1269 for all @xmath1270 ; * @xmath1271 for all @xmath1270 and @xmath1272 . * @xmath1092 for all @xmath1273 , and * @xmath1274 for all @xmath1275 .      * if @xmath1279 , then @xmath1280 if and only if @xmath1281 ; * if @xmath1280 , then there exists no @xmath1282 with @xmath1283 or @xmath1284 ; * if @xmath1283 , then @xmath1285 if and only if @xmath1286 ; * if @xmath1285 , then there exists no @xmath1282 with @xmath1279 or @xmath1287 .",
    "fix a particular @xmath1289 . for the data schema , we use @xmath1290 , where @xmath1291 are treated as concept names , and @xmath93 , @xmath1102 , @xmath1292 , and @xmath1293 are role names .",
    "we use @xmath93 and @xmath1102 to specify horizontal and vertical adjacency of points in the rectangle , and the role names @xmath1292 and @xmath1293 to simulate the inverses of @xmath93 and @xmath1102 ( note that since @xmath1292 and @xmath1293 are regular role names , they need not be interpreted as the inverses of @xmath93 and @xmath1102 ) .",
    "we construct an @xmath1294-ontology @xmath1295 which asserts functionality of @xmath1296 and contains inclusions using additional concept names @xmath1297 , @xmath1298 , @xmath1299 , @xmath1300 , @xmath1301 .",
    "the concept names @xmath163 and @xmath67 are used to mark the upper and right border of the rectangle , @xmath804 is used to mark points in the rectangle , and the remaining concept names are used for technical purposes explained below . in the following , for @xmath1302 , we let @xmath1303 range over all boolean combinations of the concept names @xmath1304 and @xmath1305 , i.e. , over all concepts @xmath1306 where @xmath1307 is a literal over @xmath1308 , for @xmath266 .",
    "the ontology @xmath1295 contains the following concept inclusions , where @xmath1309 and @xmath1310 : @xmath1311 @xmath1312 where @xmath1280 and @xmath1286 .",
    "the first four inclusions propagate the concept @xmath804 downwards and leftwards starting from a point marked with the final tile @xmath1257 . note that these inclusions enforce the horizontal and vertical matching conditions .",
    "the concept inclusion with right - hand side @xmath69 serves to enforce confluence , i.e. , @xmath69 is entailed at a constant @xmath430 if there is a constant @xmath412 that is both an @xmath93-@xmath1102-successor and a @xmath1102-@xmath93-successor of @xmath430 .",
    "this is so because , intuitively , @xmath1313 is universally quantified : if confluence fails , then we can interpret @xmath1314 and @xmath1298 so that neither of the two conjuncts on the left - hand side of the inclusion for @xmath69 is satisfied . in a similar manner , the inclusion for @xmath1315 ( resp .",
    "@xmath1316 ) is used to ensure that @xmath1292 ( resp .",
    "@xmath1293 ) act as the inverse of @xmath93 ( resp .",
    "@xmath1102 ) at all points in the rectangle .                assume first that @xmath1288 admits a tiling .",
    "then by lemma [ undec - tiling - lemma ] , there is a @xmath12-instance @xmath18 which is consistent with @xmath1295 and such that @xmath1328 .",
    "it follows immediately that @xmath1329 and @xmath1330 . on the other hand ,",
    "since @xmath18 is consistent with @xmath1097 , and @xmath1099 appears only trivially in @xmath1097 , we have @xmath1331 and @xmath1332 .",
    "next suppose that @xmath1288 does not admit a tiling , and let @xmath18 be an @xmath12-instance which is consistent with @xmath176 .",
    "by lemma [ undec - tiling - lemma ] , @xmath1333 , and hence @xmath1334 .",
    "the desired containments trivially follow .    to prove undecidability of fo - rewritability , we expand @xmath176 to a new ontology @xmath1335 . to define @xmath1335",
    "we take a fresh role name @xmath156 and two concept names @xmath5 and @xmath1219 and set @xmath1336 and @xmath1337 .",
    "assume first that @xmath1288 admits a tiling .",
    "by lemma [ undec - tiling - lemma ] , we can find an @xmath12-instance @xmath1340 which is consistent with @xmath1295 and @xmath1341 such that @xmath1342 , and hence @xmath1343 .",
    "we can use essentially the same argument as in lemma [ lem : lower ] to show that @xmath1344 and @xmath1344 are not fo - rewritable . specifically ,",
    "we construct @xmath12-instances @xmath1224 by taking the union of @xmath1340 and the facts @xmath1345 it is readily checked that        assume now that @xmath1288 does not admit a tiling . then for every @xmath12-instance @xmath18 , @xmath18 is satisfiable w.r.t .",
    "@xmath1295 if and only if @xmath1350 .",
    "thus , the query defined by @xmath1351 is equivalent to @xmath1352 , and the query defined by @xmath1353 is equivalent to @xmath1354 .    to prove undecidability of datalog - rewritability , we expand @xmath176 to a new ontology @xmath1355 . to define @xmath1355 , we take fresh role names @xmath156 and @xmath1238 and fresh concept names @xmath1239 and encode the 3-colorability problem as follows : @xmath1356 we use the schema @xmath1357 .",
    "first suppose that @xmath1288 admits a tiling .",
    "we have seen previously that this implies the existence of an @xmath12-instance @xmath1340 which is consistent with @xmath1295 and contains @xmath1341 such that @xmath1343 .",
    "we proceed similarly to lemma [ datalog - rewrite - lower ] . given a connected undirected graph @xmath1242",
    ", we define an @xmath12-instance @xmath18 as the union of @xmath1340 and the facts @xmath1244 for all @xmath1245 in @xmath1242 and @xmath1246 for every edge @xmath1247 in @xmath1242 .",
    "it is readily checked that        next suppose that @xmath1288 does not admit a tiling .",
    "then for every @xmath12-instance @xmath18 , we have that @xmath18 is satisfiable w.r.t .",
    "@xmath1295 if and only if @xmath1362 .",
    "we can then simply reuse the fo - rewritings @xmath1351 and @xmath1353 from above , since these can be equivalently expressed as datalog queries .",
    "in section  [ subsec : b1 ] , we start by establishing a central technical result about mmsnp extended with constant symbols which allows us to lift key results from mmsnp sentences to commsnp queries ( with free variables )",
    ". then in section  [ subsec : b2 ] , we provide the proofs for the results stated in section  [ sect : obdammsnp ] of the main paper .      for readability",
    ", throughout this subsection , we will adopt a more convenient notation for schemas and structures involving constant symbols .",
    "if @xmath12 is a schema and @xmath774 a ( possibly empty ) set of constant symbols , then we will use @xmath788 as a shorthand for @xmath789 .",
    "a @xmath790-structure @xmath47 will be given by a pair @xmath791 , where @xmath362 is a finite , non - empty set and @xmath792 is a function assigning to each @xmath15-ary predicate in @xmath12 an @xmath15-ary relation @xmath793 over @xmath362 and to each constant symbol @xmath794 an element @xmath795 .",
    "we use @xmath796 to denote the active domain of @xmath47 , and we call @xmath47 an _ active domain structure _ if @xmath797 .",
    "we prove theorem [ lift - commsnp ] in several steps .",
    "we consider the language _ mmsnp with constant symbols _ ( abbreviated mmsnp@xmath798 ) , consisting of all sentences which can be obtained from mmsnp formulas by replacing each free variable by a constant symbol .",
    "the evaluation problem for mmsnp@xmath798 consists in deciding whether an mmsnp@xmath798 sentence with schema @xmath12 and constant symbols @xmath774 holds in a given @xmath788-structure @xmath47 .",
    "the containment problem for mmsnp@xmath798 is to decide for two mmsnp@xmath798 sentences @xmath799 with relations @xmath12 and constants symbols @xmath774 , whether @xmath800 implies @xmath801 for all @xmath788-structures",
    "we use @xmath802 to denote containment .",
    "mmsnp@xmath798 will serve as a bridge between commsnp queries ( with free variables ) and mmsnp sentences . more precisely",
    ", we will first show that evaluation of commsnp queries is polynomially equivalent to evaluation of mmsnp@xmath798 sentences , and show a polynomial reduction from commsnp query containment to containment of mmsnp@xmath798 sentences .",
    "afterwards , we will move from mmsnp@xmath798 sentences to mmsnp sentences , again showing polynomial equivalence of the evaluation problems and a polynomial reduction for containment .    to link commsnp queries and mmsnp@xmath798",
    ", it will actually prove more convenient to suppose that mmsnp@xmath798 sentences are interpreted over active domain structures , whereas to relate mmsnp@xmath798 with plain mmsnp , we will wish to work over arbitrary structures .",
    "thus , as a preliminary step , we relate the two variants of the mmsnp@xmath798 evaluation and containment problems .",
    "let @xmath803 be an mmsnp@xmath798 sentence over schema @xmath12 and constants @xmath774 , which is interpreted over active domain structures .",
    "pick a fresh second - order variable @xmath804 and a fresh constant @xmath634 not appearing in @xmath774 .",
    "let @xmath686 be the formula obtained from @xmath229 by replacing every conjunct @xmath805 of @xmath212 by @xmath806 .",
    "let @xmath807 be the conjunction of all formulas of the form @xmath808 , where @xmath67 is a @xmath120-ary relation in @xmath12 , and @xmath809 is one of the variables among @xmath810 .",
    "define a new mmsnp@xmath798 sentence @xmath811 we claim that the evaluation problem for @xmath236 over active domain structures is polynomially equivalent to the evaluation problem for @xmath812 over general structures .",
    "the first reduction is trivial since for every @xmath788-structure @xmath287 such that @xmath813 , we have @xmath814 if and only if @xmath815 . to see why , notice that @xmath807 ensures that @xmath804 is false everywhere on the active domain , so the additional disjuncts have no effect . for the second reduction , we remark that @xmath816 for a general @xmath788-structure @xmath47 if and only if @xmath817 ( since we can trivially satisfy @xmath812 by sending @xmath634 to an element outside the active domain and including that element in @xmath804 ) or @xmath797 and @xmath818 .",
    "it remains to be shown that every evaluation problem for mmsnp@xmath798 over general structures is polynomially equivalent to an evaluation problem for mmsnp@xmath798 over active domain structures .",
    "let @xmath236 be an mmsnp@xmath798 sentence with schema @xmath12 and constant symbols @xmath774 , and select a fresh monadic second order variable @xmath804 , a fresh input relation @xmath819 , and and a fresh constant symbol @xmath634 .",
    "we define @xmath812 as the sentence over @xmath820 obtained from @xmath236 by :    * replacing every conjunct @xmath805 by @xmath821 , where @xmath329 is the set of terms appearing in @xmath805 , * adding a new conjunct @xmath822 , and * adding @xmath804 to the initial sequence of existentially quantified monadic second - order variables .",
    "we claim that the evaluation problem for @xmath236 over general structures is polynomially equivalent to the evaluation problem for @xmath812 over active domain structures . for the first reduction",
    ", we have that for every @xmath788-structure @xmath47 , @xmath818 if and only if @xmath823 , where @xmath824 extends @xmath47 by setting @xmath825 and letting @xmath826 be any element in @xmath362 . for the other reduction , we have that for every @xmath820-structure @xmath47 with @xmath797 , @xmath816 if and only if either @xmath827 or @xmath828 , where @xmath824 is obtained by taking the @xmath829-reduct of @xmath47 .",
    "consider mmsnp@xmath798 sentences @xmath830 with schema @xmath12 and constants @xmath774 .",
    "we apply the construction from the first part of the proof of lemma [ eval - activedomain ] to obtain mmnsp@xmath798 sentences @xmath831 and @xmath832 with the property that @xmath833 for a general @xmath788-structure @xmath47 if and only if @xmath817 or @xmath797 and @xmath834 ( for @xmath266 ) .",
    "it is readily verified that @xmath835 for the class of active domain structures if and only if @xmath836 .    by the preceding lemmas , we can choose to work with active domain structures .",
    "it is then straightforward to relate the evaluation and containment problems for commsnp queries with the corresponding problems for mmsnp@xmath798 sentences .",
    "[ meghynlem2 ] the evaluation problem for commsnp is polynomially equivalent to the evaluation problem for mmsnp@xmath798 .",
    "containment of commsnp queries is polynomially reducible to containment of mmsnp@xmath798 sentences .    the next step , and the core technical contribution of this subsection , is to relate the evaluation and containment of mmsnp@xmath798 sentences to the analogous problems for mmsnp sentences . to simplify the technical constructions",
    ", it will prove convenient to work with forbidden pattern problems @xcite .",
    "we extend forbidden patterns problems to handle constant symbols , by simply substituting @xmath303-structures for @xmath12-structures in definitions [ color - def ] and [ forb - def ] .",
    "we denote by fpp@xmath798 the class of forbidden patterns problems thus defined , and use fpp to refer to the restriction to structures without constant symbols .",
    "note that both fpp@xmath798 and fpp define problems over structures , not instances ( although this distinction is irrelevant in the absence of constant symbols ) .        by the previous lemma and the fact that fpp is a subset of fpp@xmath798 , to show polynomial equivalence of mmsnp@xmath798 and mmsnp it suffices to show that every problem in fpp@xmath798 is polynomially equivalent to some problem in fpp . to formulate the reductions",
    ", we will require some additional notation and terminology , which we introduce next .",
    "let @xmath12 be a schema , @xmath837 be a set of constant symbols , and @xmath838 be a set of unary predicates which do not appear in @xmath12 .",
    "we will abbreviate @xmath839 to @xmath840 .",
    "we define operations which allow us to transform @xmath840-structures into @xmath841-structures , and vice - versa . with every @xmath840-structure @xmath47 with @xmath842 for all @xmath843 , we associate the @xmath841-structure @xmath844 , called the _ collapse _ of @xmath47 , by factorizing through the @xmath845 . specifically , let @xmath399 be the smallest equivalence relation such that whenever @xmath846 for some @xmath257 , then @xmath847",
    ". then @xmath848 is @xmath849 \\mid d\\in \\delta^{\\bmf}\\}$ ] , where @xmath850 $ ] denotes the equivalence class of @xmath208 w.r.t .",
    "@xmath399 . for convenience ,",
    "when @xmath850=\\{d\\}$ ] , we will use @xmath208 in place of @xmath850 $ ] .",
    "set @xmath851 $ ] , for some @xmath852 , and define @xmath853 as follows : @xmath854,[e ] ) \\in r^{\\bmf^{c}}$ ] if and only if there exist @xmath855 $ ] and @xmath856 $ ] such that @xmath857 . note that the mapping @xmath858 $ ] defines an @xmath12-homomorphism from @xmath47 to @xmath844 , which we call the _",
    "canonical homomorphism_.    for a @xmath841-structure @xmath287 , we define the @xmath840-structure @xmath859 which interprets the predicates in @xmath12 in the same way as @xmath287 and interprets the predicates in @xmath221 as follows : @xmath860 . with every @xmath841-structure @xmath47 , one can associate a finite set of finite @xmath840-structures , @xmath861 , called its _ anti - collapse _ , such that the following two properties hold :    1 .   for all @xmath840-structures",
    "@xmath287 : + @xmath862 ( and @xmath863 is defined ) if and only if there exists @xmath864 such that @xmath865 .",
    "for all @xmath841-structures @xmath287 : + @xmath866 iff there exists @xmath867 such that @xmath868 .    to employ the anti - collapse @xmath861 for the reduction of fpp@xmath798 to fpp , we require some properties from the construction of @xmath861 ( cf . pages 43 - 45 of @xcite ) .",
    "the domain @xmath869 of each @xmath864 consists of @xmath870 ( the _ unnamed _ individuals in @xmath47 ) together with the union @xmath871 of fresh non - empty ( but possibly not mutually disjoint ) sets @xmath872 with @xmath873 .",
    "moreover , in point  1 and point  2 we have the following more detailed statement :    ( 1a ) : :    if @xmath874 ( and    @xmath863 is defined ) , and    @xmath875 is the canonical    homomorphism , then @xmath876 can be    chosen in such a way that @xmath877 for all    unnamed individuals @xmath208 in @xmath47 and    @xmath878 for all    @xmath879 .",
    "( 1b ) : :    if @xmath880 , then    @xmath881 can be defined such that    @xmath882 and    @xmath883 if @xmath208 is not named .",
    "( 2b ) : :    if @xmath884 , then    @xmath885 can be constructed in such a    way that @xmath886 for all unnamed @xmath208 .",
    "in what follows , we will be interested in colorings of @xmath840-structures which respects the intuitive meaning of the predicates @xmath887 . a @xmath533-coloring @xmath888",
    "$ ] of a @xmath840-structure @xmath47 is said to be a _",
    "uniform @xmath533-coloring _ of @xmath47 if for every @xmath843 , @xmath846 implies that @xmath208 and @xmath889 have the same color in @xmath888 $ ] .",
    "given a set @xmath890 of @xmath533-colored @xmath840-structures , we define @xmath891 as the set of @xmath840-structures @xmath287 such that there exists a uniform @xmath533-coloring @xmath892 $ ] of @xmath287 such that there exists no @xmath893 with @xmath894 $ ] .",
    "we are now ready to present the reduction from fpp@xmath798 to fpp .",
    "suppose that we are given a fpp@xmath798 problem defined by the set @xmath310 of @xmath533-colored @xmath841-structures ( where @xmath895 ) .",
    "we construct a set @xmath890 which contains all uniform @xmath533-colored @xmath840-structures @xmath896 such that    * there exists @xmath564 and a member @xmath897 of the anti - collapse of the @xmath841-reduct of @xmath573 such that @xmath896 is the @xmath533-coloring of @xmath897 defined as follows : + ( @xmath898 ) @xmath899 iff @xmath208 is unnamed in @xmath573 and @xmath900 or there exists @xmath901 such that @xmath879 and @xmath902 . + ( note that we require that in the resulting structure @xmath903 for @xmath904 , otherwise @xmath896 is not in @xmath890 ) .",
    "first let @xmath287 be a @xmath840-structure such that @xmath915 . since @xmath919 , we have @xmath920 , and so there exists a uniform @xmath533-colored expansion @xmath892",
    "$ ] of @xmath287 such that there exists no @xmath921 with @xmath922 $ ] .",
    "assume the collapse @xmath863 is defined ( i.e. , @xmath923 for @xmath901 ) .",
    "we want to show @xmath916 . by uniformity of @xmath892",
    "$ ] , we obtain a @xmath533-colored @xmath841-structure @xmath924 $ ] extending @xmath863 by setting @xmath925}$ ] iff @xmath208 is unnamed and @xmath926}$ ] or @xmath927 and @xmath928}\\subseteq t_{j}^{\\amf[\\cmc]}$ ] .",
    "assume for a contradiction that @xmath929 $ ] for @xmath547 .",
    "then @xmath105 is a homomorphism from the @xmath841-reduct @xmath930 of @xmath573 to the @xmath841-reduct @xmath863 of @xmath924 $ ] . by ( 1a ) , we find @xmath931 and @xmath932 such that @xmath877 for all unnamed individuals @xmath208 in @xmath930 and @xmath878 for all @xmath879 .",
    "let @xmath933 $ ] be the @xmath533-coloring of @xmath897 defined with ( @xmath898 ) . to see that @xmath933 $ ] is well - defined , note that @xmath934 implies that @xmath935 , which yields @xmath936 , hence @xmath937 .",
    "it follows that @xmath938 and @xmath939 have the same colour in @xmath940 $ ] , and thus also in @xmath573 , which ensures that each element in @xmath897 is assigned a unique colour by ( @xmath898 ) . now to obtain the desired contradiction , we show that @xmath941 is a @xmath942-homomorphism from @xmath933 $ ] to @xmath892 $ ] .",
    "let @xmath943 and @xmath944}$ ] .",
    "if @xmath208 is unnamed in @xmath573 , then @xmath944}$ ] implies that @xmath900 .",
    "hence @xmath945}$ ] and @xmath946}$ ] .",
    "if @xmath879 , then @xmath944}$ ] implies @xmath902 , hence @xmath947}$ ] and @xmath928}\\subseteq t_{j}^{\\amf[\\cmc]}$ ] . from @xmath878 , we know that there exists a sequence @xmath948 of predicates from @xmath949 such that @xmath950}$ ] , @xmath951 , and @xmath952}\\cap a_{\\ell_{k+1}}^{\\amf[\\cmc]}\\neq \\emptyset$ ] for every @xmath953 . by uniformity of @xmath892 $ ] and @xmath928}\\subseteq t_{j}^{\\amf[\\cmc]}$",
    "] , we obtain @xmath954 } \\subseteq t_{j}^{\\amf[\\cmc]}$ ] , hence @xmath955}$ ] .",
    "conversely , if @xmath863 is undefined , then @xmath956 since @xmath957 for all @xmath958 and @xmath901 , and so any uniform @xmath533-coloring of @xmath287 will avoid @xmath959 . assume now that @xmath960 .",
    "there exists a @xmath533-colored expansion @xmath924 $ ] of @xmath863 such that there exists no @xmath564 with @xmath961 $ ] .",
    "we define a ( uniform ) @xmath533-colored expansion @xmath892 $ ] of @xmath287 in the obvious way ; let @xmath875 be the canonical mapping and set @xmath962}= g^{-1}(t_{j}^{\\amf^{c}[\\cmc]})$ ] , for @xmath963",
    ". assume for a contradiction that @xmath922 $ ] for @xmath958",
    ". then @xmath896 is obtained from some @xmath564 and some member @xmath897 of the anti - collapse of the @xmath841-reduct of @xmath573 as described in ( @xmath898 ) .",
    "assume @xmath964 $ ] .",
    "then @xmath965 and so , by ( 1b ) there exists @xmath966 that can be defined such that @xmath967 and @xmath883 if @xmath208 is not named , where @xmath930 is the @xmath841-reduct of @xmath573 .",
    "we derive a contradiction by showing that @xmath941 a homomorphism from @xmath573 to @xmath924 $ ] .",
    "first suppose that @xmath968 , and @xmath208 is unnamed in @xmath573 .",
    "then @xmath969 , hence @xmath970}$ ] .",
    "it follows from the definition of @xmath962}$ ] that @xmath971}$ ] .",
    "next consider the case where @xmath972 .",
    "then there must exist @xmath525 such that @xmath973 and @xmath974 .",
    "it follows that @xmath975}$ ] and @xmath976}$ ] . the definition of @xmath962}$ ] together with @xmath977}$ ] yields @xmath978 } \\in t_{j}^{\\amf^{c}[\\cmc]}$ ] .",
    "consider @xmath980 and @xmath981 , both over @xmath982 .",
    "let @xmath983 and @xmath984 be the corresponding fpps over schema @xmath840 , which satisfy statements in lemma [ eval - fppc ] .",
    "we claim that @xmath985 iff @xmath986 .    for the first direction , suppose that @xmath985 .",
    "let @xmath287 be a @xmath987-structure such that @xmath988 .",
    "if @xmath863 is undefined , then we immediately obtain @xmath989 .",
    "otherwise , we have @xmath990 , and hence @xmath991 and @xmath989 .    for",
    "the second direction , suppose that @xmath986 , and let @xmath47 be a @xmath982-structure such that @xmath992 .",
    "then applying the previous lemma , we have @xmath993 , hence @xmath994 . again applying the lemma",
    ", we obtain @xmath995 .",
    "the proof of the first part follows the lines of the proof of proposition  [ prop : mmsnpmdd ] and is omitted .",
    "it thus remains to show that cogmsnp is strictly more expressive than commsnp .",
    "note first that it is at least as expressive : we can convert any mmsnp formula into an equivalent one satisfying conditions  ( i ) and  ( ii ) from the proof of proposition  [ prop : mmsnpmdd ] , and clearly every such mmsnp formula is also a gmsnp formula . to see that cogmsnp is indeed strictly more expressive than commsnp , note that by proposition  [ prop : gfucqmdd ] , there is a ( gf , ucq ) query @xmath1 that is not expressible in mddlog . by proposition  [ prop : mmsnpmdd ] , @xmath1 is not expressible in commsnp ; by theorem  [ gfucqfrontier ] and the first part of theorem  [ lem : gmsnpfgdd ] , @xmath1 is expressible in cogmsnp .",
    "we start by proving that every mmsnp@xmath996 sentence is equivalent to a gmsnp sentence .",
    "assume @xmath997 is a mmsnp@xmath996 sentence .",
    "introduce for each @xmath282 a monadic so - variable @xmath998 and , for every @xmath343 of arity @xmath15 , an @xmath15-ary so - variable @xmath999 .",
    "now replace in @xmath229 every @xmath1000 by @xmath1001 and every @xmath1002 by @xmath1003 .",
    "the resulting formula is a gmsnp sentence that is equivalent to @xmath236 .      *",
    "each @xmath1004 in the head of an implication is guarded by an input relation : for every @xmath1004 in the head of an implication @xmath244 there exists an @xmath343 such that @xmath782 is in the body of @xmath244 and @xmath1005 .",
    "( if this is not the case , one can introduce additional conjuncts @xmath782 in the body of implications ) .",
    "* @xmath229 is closed under identifying individual variables : if @xmath245 is the result of identifying variables in an implication @xmath244 of @xmath229 , then @xmath244 is a conjunct of @xmath229 ( module renaming of individual variables ) . *",
    "the individual variables used in distinct implications of @xmath229 are disjoint .",
    "it follows that we may also assume that distinct occurrences of so - variables @xmath282 in @xmath229 determine distinct atoms @xmath1006 .",
    "from now we assume that @xmath236 satisfies these conditions . for the translation ,",
    "we take for every atom @xmath1007 in the head of an implication @xmath244 in @xmath229 , a fresh second - order domain and fact variable @xmath1008 .",
    "moreover , we fix a guard @xmath1009 with @xmath1010 for @xmath5 from the body of the ( unique ) implication in which @xmath5 occurs .",
    "consider now an implication @xmath244 in @xmath229 of the form @xmath1011 first replace all atoms @xmath1012 , @xmath1013 , by @xmath1014 , where @xmath1015 is the guard for @xmath1016 selected above .",
    "next consider every possible choice @xmath1017 of atoms in the heads of implications in @xmath229 such that the componentwise mappings @xmath1018 , @xmath1019 , are bijections between the sets of variables in @xmath1020 and @xmath1021 and replace every @xmath1022 , @xmath1019 , by @xmath1023 where @xmath1024 is obtained from the guard @xmath1025 associated with @xmath1026 above by replacing each @xmath1027 by @xmath93 and each individual variable that is not in the range of @xmath1028 by some fresh individual variable .",
    "let @xmath245 be the conjunction over all implications derived from @xmath244 in this manner , let @xmath686 be the conjunction of all of the @xmath245 , and let @xmath812 be the resulting mmsnp@xmath996 sentence when existential quantification over non - monadic variables is replaced by existential quantification over all @xmath1008 such that @xmath5 an atom in a head of an implication of @xmath229 .",
    "note that @xmath812 contains all individual variables in @xmath236 , but may also contain additional individual variables not in @xmath236 .",
    "we show that @xmath236 and @xmath812 are equivalent .",
    "assume first that @xmath1029 .",
    "take an assignment @xmath402 for the second - order domain and fact variables of @xmath812 such that @xmath1030 .",
    "for every non - monadic second - order variable @xmath281 of @xmath236 , define @xmath1031 as the union of all @xmath1032 such that @xmath1033 appears in the head of some implication in @xmath229 and @xmath1009 is the guard selected for @xmath5 .",
    "we show that @xmath1034 .",
    "assume for a contradiction that this is not the case .",
    "take an implication @xmath244 in @xmath229 of the form @xmath1011 and let @xmath79 be an individual variable assignment such that @xmath1035 .",
    "we may assume that @xmath79 is injective .",
    "the following holds :    1 .   for every @xmath1036 , we have @xmath1037 .",
    "2 .   for every @xmath1038",
    ", there exists @xmath1039 in the head of some implication of @xmath212 with @xmath1040 the guard selected for @xmath1041 , and an injective variable assignment @xmath1042 such that @xmath1043 and @xmath1044 .",
    "3 .   for no @xmath1045",
    "does there exist @xmath1039 in the head of some implication of @xmath212 with @xmath1040 the guard selected for @xmath1041 , and an injective variable assignment @xmath1046 such that @xmath1047 and @xmath1048 .",
    "consider the following sequences of atoms @xmath1049 it follows from construction of @xmath812 that the formula @xmath680 contains the implication @xmath1050 where the @xmath1051 are defined in the same way as earlier .",
    "let @xmath1052 be an individual variable assignment satisfying :      note that such an assignment must exist since every variable in @xmath812 is in the image of exactly one assignment among @xmath79 and the @xmath1056 .",
    "it follows from the properties of @xmath1052 and points 1 and 2 above that the body of the implication @xmath1057 is satisfied under assignments @xmath1058 . from point 3",
    ", we can derive that none of the head atoms is satisfied under @xmath1058 .",
    "it follows that the implication @xmath1057 is refuted , so @xmath1059 , and we have the desired contradiction .    for the other direction , assume that @xmath1060 .",
    "take an assignment @xmath402 for the so - variables of @xmath236 such that @xmath1061 .",
    "now define , for @xmath1033 in the head of an implication of @xmath229 with selected guard @xmath1009 : @xmath1062 it can be verified that @xmath1029 ."
  ],
  "abstract_text": [
    "<S> _ ontology - based data access _ is concerned with querying incomplete data sources in the presence of domain - specific knowledge provided by an ontology . </S>",
    "<S> a central notion in this setting is that of an _ ontology - mediated query _ , which is a database query coupled with an ontology . </S>",
    "<S> in this paper , we study several classes of ontology - mediated queries , where the database queries are given as some form of conjunctive query and the ontologies are formulated in description logics or other relevant fragments of first - order logic , such as the guarded fragment and the unary - negation fragment . </S>",
    "<S> the contributions of the paper are three - fold . </S>",
    "<S> first , we characterize the expressive power of ontology - mediated queries in terms of fragments of disjunctive datalog . </S>",
    "<S> second , we establish intimate connections between ontology - mediated queries and constraint satisfaction problems ( csps ) and their logical generalization , mmsnp formulas . </S>",
    "<S> third , we exploit these connections to obtain new results regarding ( i ) first - order rewritability and datalog - rewritability of ontology - mediated queries , ( ii ) p / np dichotomies for ontology - mediated queries , and ( iii ) the query containment problem for ontology - mediated queries .    </S>",
    "<S> [ query languages ]    = 10000 = 10000 </S>"
  ]
}