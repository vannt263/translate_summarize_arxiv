{
  "article_text": [
    "in this paper , we recall that second - order logic is a convenient language to express non - termination of while loops , modeled as rules . such rules",
    "are commonly used abstractions of real program pieces , see , e.g. , @xcite for the java programming language .",
    "our main contribution is the definition of two new classes of rules , the termination of which is decidable , by restricting the language to known decidable cases , namely s1s and s2s .",
    "we also show and illustrate how decision procedures for their weak versions ws1s and ws2s can help proving termination / non - termination .",
    "we organize the paper as follows .",
    "section [ sec : preliminaries ] presents the main concepts we need while section [ sec : sof - nt ] gives the theoretical results of the paper .",
    "section [ sec : examples ] illustrates the results by means of examples and section [ sec : related - works - conclusion ] concludes .",
    "we give a quick description of s1s and s2s , see  @xcite for a more detailed presentation .",
    "s1s is the monadic second - order theory of 1 successor .",
    "interpretations correspond to finite or infinite words over a given finite alphabet @xmath0 .",
    "terms are constructed from the constant 0 and first - order variables @xmath1 , @xmath2 ,  by application of the successor function @xmath3 , which is left - associative .",
    "we abbreviate @xmath4 successive applications of @xmath3 starting from @xmath5 ( @xmath6 ) to @xmath4 .",
    "atomic formul are constructed from terms , second - order variables @xmath7 , @xmath8 ,  and predicates of the form @xmath9 where @xmath10 .",
    "they have the form @xmath11 , @xmath12 , @xmath13 , @xmath14 where @xmath15 and @xmath16 are terms .",
    "formul are constructed from atomic formul , the usual boolean connectives ( @xmath17 , @xmath18 ,  ) and quantification ( @xmath19 and @xmath20 ) over first and second - order variables .",
    "first - order variables are interpreted as elements of @xmath21 representing positions in words and second - order variables as subsets of @xmath21 .",
    "constant @xmath5 is interpreted as the first position in a word and function @xmath3 as the next position .",
    "the formula @xmath14 is true in a word @xmath22 if at position @xmath15 of @xmath22 there is character @xmath23 .",
    "ws1s ( weak s1s ) is a restriction of s1s where second - order variables are interpreted as _",
    "finite _ sets only .",
    "s2s is the monadic second - order theory of 2 successors .",
    "interpretations correspond to finite or infinite labelled binary trees over a given finite alphabet @xmath0 .",
    "terms and formul are constructed as in s1s except that constant 0 is replaced with @xmath24 and the successor function @xmath3 is replaced with functions @xmath25 and @xmath26 , which are left - associative .",
    "we abbreviate successive applications of these functions , for instance @xmath27 stands for @xmath28 , which corresponds to @xmath29 , and @xmath30 stands for @xmath31 .",
    "first - order variables are interpreted as elements of @xmath32 representing positions in binary trees and second - order variables as subsets of @xmath32 .",
    "constant @xmath24 is interpreted as the root position of a binary tree , @xmath25 as the left successor , @xmath26 as the right successor and @xmath33 as the proper - prefix relation ( for instance @xmath34 but @xmath35 ) .",
    "ws2s ( weak s2s ) is a restriction of s2s where second - order variables are interpreted as _",
    "finite _ sets only .",
    "a _ rule _ has the form @xmath36 where @xmath37 is the identifier of the rule , @xmath38 is a binary relation and @xmath39 and @xmath40 are tuples of distinct first - order variables ranging over a given domain . if @xmath37 is a monadic rule of the form @xmath41 and @xmath42 is a monadic second - order formula of s1s ( s2s ) with @xmath1 and @xmath2 as free variables , we call @xmath37 a _ monadic _ s1s ( respectively , s2s ) rule .",
    "some examples can be found in section  [ sec : examples ] .",
    "we define an operational semantics as follows .",
    "starting from a concrete tuple @xmath43 of elements of the domain , we first check whether there exists a concrete tuple @xmath44 such that @xmath45 .",
    "if no such tuple exists , the computation stops .",
    "otherwise , we choose any such tuple @xmath44 and reiterate .",
    "the rule @xmath37 _ loops _ if we can find a concrete tuple @xmath43 starting an infinite computation .",
    "if no such tuple exists , @xmath37 _ terminates_.",
    "we consider the following second - order formulation of non - termination .",
    "let @xmath36 be a rule .",
    "[ def : recurrence - set ] we let @xmath46 denote the second - order formula @xmath47        \\forall \\tilde{x } \\exists \\tilde{y}\\ ( \\tilde{x}\\in x        \\rightarrow [ \\psi(\\tilde{x},\\tilde{y } ) \\land \\tilde{y}\\in x])\\ ; & ( 2 )       \\end{array}\\right.\\ ] ] a _ recurrence set _ for @xmath37 is a set @xmath7 satisfying @xmath46 .    condition ( 1 ) of definition  [ def : recurrence - set ] simply states that the recurrence set @xmath7 is not empty .",
    "condition ( 2 ) ensures that for any element @xmath1 of @xmath7 , there is an element @xmath2 of @xmath7 which satisfies the formula @xmath48 defining the rule @xmath37 .",
    "the existence of a recurrence set is equivalent to non - termination .",
    "[ theorem : nonterm - cns ] @xmath46 is true if and only if @xmath37 loops .",
    "we prove both implications .",
    "( @xmath49 ) .",
    "as @xmath46 is true , we can start by selecting any arbitrary @xmath50 .",
    "we know that there exists @xmath51 s.t . @xmath52 . by iterating this process",
    ", we construct an infinite computation",
    ". hence @xmath37 loops .",
    "( @xmath53 ) . as there exists @xmath43 such that @xmath37 loops , let us consider an infinite computation starting at @xmath43 : @xmath54 let @xmath55 .",
    "@xmath7 is a non - empty set verifying @xmath56)$ ] .",
    "hence @xmath46 holds .    the notion of _ closed recurrence set _",
    "is introduced in  @xcite .",
    "[ def : closed - recurrence - set ] we let @xmath57 be the second - order formula @xmath47        \\forall \\tilde{x } \\exists \\tilde{y}\\ ( \\tilde{x}\\in x        \\rightarrow \\psi(\\tilde{x},\\tilde{y } ) ) \\land \\phantom{x } & ( 2 ) \\\\[1ex ]       \\forall \\tilde{x}\\forall\\tilde{y}\\        ( [ \\tilde{x}\\in x \\land \\psi(\\tilde{x},\\tilde{y } ) ]        \\rightarrow \\tilde{y}\\in x ) & ( 3 )      \\end{array}\\right.\\ ] ] a _ closed recurrence set _ for @xmath37 is a set @xmath7 satisfying @xmath57 .",
    "let @xmath58 denote the set of successors of @xmath39 with @xmath38 , the set of @xmath40 such that @xmath48 holds .",
    "definition  [ def : closed - recurrence - set ] imposes that @xmath59 for any @xmath39 in @xmath7 .",
    "hence , we _ must _ stay in @xmath7 when applying @xmath38 to @xmath39 .",
    "in contrast , definition  [ def : recurrence - set ] requires that @xmath60 , we _ can _ stay in @xmath7 when applying @xmath38 to @xmath39 . therefore , closed recurrence sets are recurrence sets but we also have that recurrence sets always contain closed recurrence sets .    [",
    "theorem : open - iff - closed ] if there is a recurrence set @xmath7 for @xmath37 then there exists a rule @xmath61 with @xmath62 and @xmath63 such that @xmath64 is a closed recurrence set for @xmath65 .",
    "the second - order formula @xmath46 is a necessary and sufficient condition for non - termination of at least one of the computations @xmath37 can generate .",
    "symmetrically , @xmath66 is true if and only if for every value @xmath43 , any computation starting at @xmath43 halts .",
    "as such a problem is in general undecidable ( see , e.g. , @xcite ) , it follows that @xmath46 is not computable . however , when the second - order logic is restricted to decidable cases , we obtain classes of rules for which the termination / non - termination property is decidable .    termination of a _ monadic _ s1s or s2s rule is decidable .",
    "the monadic second - order logics s1s and s2s are decidable @xcite and so is @xmath46 for a monadic s1s or s2s rule @xmath37 . if @xmath46 is true then @xmath37 loops else @xmath37 terminates .",
    "weak versions of these logics , where second - order variables range over _ finite _ sets , are also decidable and decision procedures have been implemented ( see , e.g. , mona @xcite ) .",
    "let @xmath37 be a monadic s1s or s2s rule .",
    "[ dec - proc - w - computable - sufficient - conditions ] decision procedures for ws1s and ws2s provide computable sufficient conditions for proving non - termination of @xmath37 in the corresponding structure .",
    "if such a decision procedure states that @xmath46 is true , then we know that there exists a non - empty finite set @xmath7 such that @xmath46 holds",
    ". hence @xmath37 loops .    note that if the decision procedure states that @xmath46 is false , then there is no finite set @xmath7 satisfying @xmath46 but an infinite set @xmath7 satisfying @xmath46 may exist .",
    "hence we can not conclude , except in the following case .",
    "[ dec - proc - w - dec - term ] when we know that the set of points which can start a computation from @xmath37 is finite , decision procedures for ws1s and ws2s also decide termination of @xmath37 in the corresponding structure .",
    "if a decision procedure states that @xmath46 is true , then by corollary [ dec - proc - w - computable - sufficient - conditions ] @xmath37 loops .",
    "else it states that @xmath46 is false .",
    "so there does not exist a finite set @xmath7 satisfying @xmath46 .",
    "as @xmath7 can not be infinite by hypothesis , it means that there does not exist a set @xmath7 such that @xmath46 holds .",
    "hence @xmath37 terminates .",
    "note that the condition of corollary [ dec - proc - w - dec - term ] can be decided in ws1s as it can be stated as @xmath67 .",
    "however example [ corollary - does - not - decide - term ] shows that it does not decide termination .",
    "consider @xmath68 where @xmath69 the set of points which can start a computation from @xmath37 is finite : @xmath70 .",
    "mona tells us that @xmath46 is false . by corollary  [ dec - proc - w - dec - term ]",
    ", @xmath37 terminates .",
    "consider @xmath68 where @xmath71 mona reports that @xmath46 is true , with a computed satisfying @xmath72 . indeed for any @xmath73 , there is a @xmath2 in @xmath7 such that @xmath42 holds : if @xmath74 , take @xmath75 and if @xmath76 , @xmath77 .",
    "note that the set @xmath7 is not unique , as @xmath46 is also true for , e.g. , @xmath78 . by corollary  [ dec - proc - w - computable - sufficient - conditions ] ,",
    "@xmath37 loops .",
    "[ corollary - does - not - decide - term ] consider @xmath68 where @xmath79 although mona tells us that there is no finite @xmath7 satisfying @xmath46 , as the set of points which can start a computation is infinite , we can not apply corollary  [ dec - proc - w - dec - term ] . indeed , taking @xmath80 shows that @xmath46 is true . hence by theorem  [ theorem : nonterm - cns ] , @xmath37 loops .",
    "note that any decision procedure for s1s will prove that @xmath46 is true .",
    "consider @xmath68 where @xmath81 mona reports that there is no finite @xmath7 satisfying @xmath46 .",
    "as the set of points which can start a computation is infinite , we can not apply corollary  [ dec - proc - w - dec - term ] .",
    "assume that @xmath46 is true .",
    "so there is a non - empty @xmath82 satisfying @xmath46 .",
    "let @xmath83 be its least element .",
    "condition ( 2 ) of definition  [ def : recurrence - set ] states that there exists @xmath84 in @xmath7 such that @xmath85 , which contradicts that @xmath83 is the least element of @xmath7 .",
    "hence @xmath46 is false , as should be shown by any decision procedure for s1s . by theorem  [ theorem : nonterm - cns ] , @xmath37 terminates .",
    "consider @xmath68 where @xmath86 with @xmath87 we have @xmath88 is true if and only if @xmath7 is closed by application of the successor function @xmath3 .",
    "so , @xmath42 is true if and only if @xmath89 .",
    "mona reports that @xmath90 is true , with a computed satisfying @xmath91 . by corollary  [ dec - proc - w - computable - sufficient - conditions ] , @xmath37 loops .",
    "consider @xmath68 where @xmath92 the set @xmath93 is not empty and for any @xmath1 in @xmath7 there is a @xmath2 in @xmath7 such that @xmath42 holds .",
    "so @xmath46 is true ( also shown by mona ) . by corollary  [ dec - proc - w - computable - sufficient - conditions ] ,",
    "@xmath37 loops .",
    "note that @xmath7 is a recurrence set for @xmath37 which is not closed .",
    "indeed , @xmath94 and @xmath95 holds with @xmath96 .",
    "hence , condition ( 3 ) of definition  [ def : closed - recurrence - set ] does not hold . by theorem  [ theorem : open - iff - closed ]",
    ", there must exist @xmath97 with @xmath62 and @xmath63 such that @xmath64 is a closed recurrence set for @xmath65 .",
    "for @xmath98 we have that @xmath62 , @xmath63 and @xmath64 is a closed recurrence set for @xmath65 .",
    "consider @xmath68 where @xmath99 the set @xmath100 is not empty and for any @xmath1 in @xmath7 there is a @xmath2 in @xmath7 such that @xmath42 holds .",
    "hence @xmath46 is true ( also shown by mona ) , so @xmath37 loops .",
    "note that @xmath7 is a closed recurrence set for @xmath37 .",
    "consider @xmath68 where @xmath101 the infinite set @xmath102 is not empty and for any @xmath1 in @xmath7 there is a @xmath2 in @xmath7 such that @xmath42 holds .",
    "hence @xmath46 is true , as should be shown by any decision procedure for s2s .",
    "so @xmath37 loops .",
    "note that @xmath7 is a closed recurrence set for @xmath37 .",
    "consider @xmath68 where @xmath86 with @xmath103 we have @xmath88 is true if and only if @xmath7 is closed by application of the successor functions @xmath25 and @xmath26 .",
    "so , @xmath42 is true if and only if @xmath89 .",
    "mona reports that @xmath46 is true , with a computed satisfying @xmath104 . by corollary  [ dec - proc - w - computable - sufficient - conditions ] , @xmath37 loops .",
    "recurrence sets were first introduced in  @xcite where @xmath38 denotes any binary relation .",
    "two symbolic analyses are presented in this paper for constructing such sets : a bitwise analysis , which assumes that the state space is finite and encoded using boolean variables , and a linear arithmetic analysis , which assumes that the program transitions can be represented as rational linear constraints . in contrast to our work , no second - order formulation is considered in this paper .",
    "let us now focus on termination - decidable classes of rules . in @xcite ,",
    "the authors present a decision procedure for an arbitrary rule @xmath105 where @xmath48 is a conjunction of equality constraints over rational trees . in @xcite ,",
    "one finds variations of a decision procedure for finite sets of rules @xmath105 where @xmath48 is a conjunction of constraints @xmath106 or @xmath107 over a well - founded domain ( such as the natural numbers ) or the integers .",
    "generalizing @xcite , termination of an arbitrary deterministic linear loop is shown decidable in @xcite over the integers , the rationals , and the reals . to the best of our knowledge ,",
    "termination of a non - deterministic linear loop remains an open problem .",
    "summarizing the paper , we have seen that second - order logic is a convenient language to express non - termination as a necessary and sufficient condition .",
    "such a condition is in general undecidable . by restricting the language to the decidable cases s1s and s2s",
    ", we have defined two new classes of rules , the termination of which is decidable .",
    "finally , we have shown that the weak versions of these logics provide sufficient conditions for termination and non - termination of such rules .",
    "a.  r. bradley , z.  manna , and h.  b. sipma .",
    "termination of polynomial programs . in r.",
    "cousot , editor , _ proc . of the 6th international conference on verification , model checking and abstract interpretation ( vmcai05 ) _ , volume 3385 of _ lecture notes in computer science _ , pages 113129 .",
    "springer , 2005 .",
    "m.  braverman .",
    "termination of integer linear programs . in t.  ball and r.  b. jones , editors , _",
    "proc . of the 18th international conference on computer",
    "aided verification ( cav06 ) _ , volume 4144 of _ lecture notes in computer science _ ,",
    "pages 372385 .",
    "springer , 2006 .    j.  r. bchi . on a decision method in restricted second - order arithmetic . in e.",
    "nagel , p.  suppes , and a.  tarski , editors , _ proc . of the 1960 international congress on logic , methodology and philosophy of science ( lmps60 ) _ , pages 111 .",
    "stanford university press , june 1962 .",
    "chen , b.  cook , c.  fuhs , k.  nimkar , and p.  ohearn .",
    "proving nontermination via safety . in e.",
    "brahm and k.  havelund , editors , _ proc . of the 20th international conference on tools and algorithms for the construction and analysis of systems ( tacas14 ) _ , volume 8413 of _ lecture notes in computer science _ ,",
    "pages 156171 .",
    "springer , 2014 .",
    "m.  codish , v.  lagoon , and p.  stuckey .",
    "testing for termination with monotonicity constraints . in m.",
    "gabbrielli and g.  gupta , editors , _ proc .",
    "of the 21st international conference on logic programming ( iclp05 ) _ , volume 3668 of _ lecture notes in computer science _ , pages 326340 .",
    "springer , 2005 .",
    "a.  gupta , thomas  a. henzinger , r.  majumdar , a.  rybalchenko , and r .-",
    "xu . proving non - termination . in g.  c. necula and p.  wadler , editors , _ proc .",
    "of the 35th acm sigplan - sigact symposium on principles of programming languages ( popl08 ) _ , pages 147158 .",
    "acm press , 2008 .      c.  s. lee , n.  d. jones , and a.  m. ben - amram .",
    "the size - change principle for program termination . in c.  hankin and d.  schmidt , editors , _ proc . of the 28th acm sigplan - sigact symposium on principles of programming languages ( popl01 ) _ , pages 8192 .",
    "acm press , 2001 .",
    "a.  tiwari .",
    "termination of linear programs . in r.",
    "alur and d.  peled , editors , _ proc . of the 16th international conference on computer aided verification ( cav04 ) _ , volume 3114 of _ lecture notes in computer science _",
    ", pages 7082 .",
    "springer , 2004 ."
  ],
  "abstract_text": [
    "<S> we consider the termination / non - termination property of a class of loops . </S>",
    "<S> such loops are commonly used abstractions of real program pieces . </S>",
    "<S> second - order logic is a convenient language to express non - termination . </S>",
    "<S> of course , such property is generally undecidable . however , by restricting the language to known decidable cases , we exhibit new classes of loops , the non - termination of which is decidable . </S>",
    "<S> we present a bunch of examples .    </S>",
    "<S> termination , non - termination , monadic second - order logic . </S>"
  ]
}