{
  "article_text": [
    "the pool project@xcite is the common persistency framework for the lhc experiments to store petabytes of experiment data and metadata in a distributed and grid enabled way .",
    "the pool is a hybrid event store combining c++ object streaming technology such as root i / o @xcite for the bulk data with a transactionally safe relational database store such as mysql for file catalog , collection and metadata .",
    "this paper describes the design of pool components which are not part of the data streaming layer@xcite and outlines how pool aims to provide transparent and efficient data access for a wide range of environments and use cases - ranging from a large production site down to single disconnected laptops .",
    "the pool file catalog is the central pool component translating logical data references to physical data files in a grid environment .",
    "pool collections with their associated metadata add another more abstract way of accessing experiment data via their logical grouping into sets of related data objects .",
    "ad hoc queries on the collections provide physicist with an efficient way to extract useful data .",
    "in a file based persistency mechanism such as pool , the storage components need to operate on the contents of the file .",
    "one should be able to navigate from one object to the other even if they are not stored in the same file .",
    "using an external file catalog to keep track of the physical location of the file is more flexible than hard - coding the location information in the file itself .",
    "it allows the file to be moved or replicated .    in the grid environment ,",
    "high level applications view only logical files .",
    "a logical file does not exist physically . a physical file and all",
    "its copies can be viewed as the same logical file . in another word ,",
    "physical files are representations of the logical file .",
    "to operate on the contents of a logical file , a service is needed to map the logical file to one of its physical representations and this physical file can then be opened .",
    "the physical location of a file can be represented by its physical file name(pfn ) while the logical file can be represented by a unique logical identifier . in pool , this identifier is called the file i d and is generated via the guid ( global unique identifier ) mechanism .",
    "the file catalog component in pool is responsible for maintaining a list of physical locations of accessible files together with their unique and immutable ids and translating the logical file reference into its physical representation .",
    "it is a basic component for object navigation and grid integration .",
    "the basic content of the catalog is the one - to - many mapping of the file i d and the pfns .",
    "this mapping is sufficient for object lookup and navigation .",
    "optionally , the file catalog can store logical file names(lfns ) .",
    "in contrast to the file i d , which is not easy for the user to read and to remember , the lfns may contain human readable and memorisable strings .",
    "lfn can be seen as the alias of the file i d .",
    "one file i d may have many lfns .",
    "in addition to pfn and lfn , a set of user defined file metadata can also be associated with a file i d .",
    "metadata - fileid mapping is one - to - one which means one file can be associated with one set of well defined metadata .",
    "the purpose of the file metadata support is to help selecting a fragment of the catalog when necessary .",
    "figure [ fig : fcschema ] shows the logical view of the content of the catalog : the pfn - fileid mapping , which is essential for the object lookup and optionally , the lfn - fileid and the metadata - fileid mapping .",
    "-90    file registration and lookup are two fundamental functionalities of the component . to register a file",
    "is to insert a file i d and pfn pair in the catalog while to lookup a file is to resolve a file i d into a pfn or vice versa .",
    "similar functions are provided also for the file i d and lfn mapping . besides",
    ", one can extract a subset of files from one concrete catalog and cross populate them into another catalog .",
    "specific metadata can be associated to the file and queries on the metadata can be used to select the catalog fragments . in the cross catalog operations",
    "the source and the destination catalogs need not to have the same backend implementation .",
    "the component provides both c++ api and command - line tools .",
    "the c++ api is used by the storage components in pool and the experiment framework to register and lookup a file inside the application process while command - line tools can be used outside the application process for catalog management operations .    three concrete catalog : xml , mysql and edg - rls based implementations",
    "are provided under single abstract interface .",
    "concrete catalogs are loaded dynamically at run time . to take advantage of the relational database technology ,",
    "transactions are supported by the component . in the transaction",
    "the user can commit or rollback the changes to the catalog .",
    "the three implementations are described in more detail as follows :    * xml catalog + the xml catalog is useful when the user wants to run the application disconnected from the network and the number of entries in the catalog is not too large . running applications connected to a local xml catalog do not rely on any central service .",
    "the xml catalog can also be used in data migration .",
    "for example , when one migrates the data in a mysql backend into a , say , oracle backend , the xml catalog can be used as the intermediate format .",
    "* mysql catalog + the mysql catalog is connected to the mysql database server .",
    "the database based catalog can handle concurrent accesses and larger data volume than the xml catalog .",
    "the mysql catalog can be used in larger scale applications such as in a production farm .",
    "* edg catalog + a grid based catalog can be used by the entire virtual organisation ( vo ) .",
    "the edg project @xcite will provide the replica management service , which controls files that belong to a vo .",
    "in particular , the replica location service(rls ) component@xcite maintains information about the physical location of files , while the replica metadata catalog(rmc ) component@xcite provides the information on the logical file names and metadata .",
    "the file catalog component in pool provides an interface to the edg - rls and edg - rmc . in another word ,",
    "pool applications connected to the edg catalog are on the grid .",
    "the file catalog component provides a graphic user interface for browsing the content of the catalog .",
    "a first prototype of the browser has been developed in python scripting language .",
    "* read / write files in pool applications + when the pool persistency manager writes in a file , it requests the i d of the file of given pfn from the file catalog component .",
    "the pfn may or may not already be registered in the catalog . if the file is already registered , the file catalog component returns the file i d to the persistency manager , otherwise the file catalog component generates a new file i d , registers it in the catalog and returns it to the persistency manager .",
    "+ when the persistency manager opens a file for reading , it requests the pfn of the file of a given file i d from the file catalog component .",
    "the file catalog component looks up the pfn in the catalog and returns it to the persistency manager .",
    "if more than one pfns are found , in the case of a grid based catalog , the optimal pfn will be returned , in an off - the - grid case , the pfn of the master copy of the file will be returned . *",
    "manage a production in a local farm + the user extracts a catalog fragment needed by the job for reading from a central catalog(edg or mysql based ) into a local xml catalog .",
    "user runs the job disconnected from the network . during the running of the job ,",
    "the local input xml catalog is used when retrieving objects ; the output files are registered into another local xml catalog . after n job runs , n output xml catalogs are produced .",
    "user cleans the entries in the catalogs produced by unsuccessful jobs and publishes the local catalog fragments to the central catalog making the produced data files available to a group of users or the entire production site .",
    "+ in this setup , when jobs are running they do not depend on any central services .",
    "performance tests have been set up to compare the behavior of different catalog implementations .    for the xml catalog",
    ", tests were run on a single pentium iii-1.2ghz computer with about 200 mb free memory .",
    "the maximum number of entries have been tested in a single xml catalog is 50,000 . the major time spent for",
    "the xml catalog is on the xml dom parser initialization .",
    "it takes about 10ms to initialize a new catalog and about 6s to start a catalog with 20k entries .",
    "the pfn registration operation takes about 0.3 ms / entry on average .    for the mysql catalog",
    ", tests were run on 10 client nodes and a mysql server node on the lan .",
    "the maximum number of entries have been tested in a single mysql catalog is 1 million . in the case of 300 concurrent client processes from the 10 client nodes querying the mysql server and committing every 100 entries",
    ", the pfn registration operation takes about 1.5 ms / entry on average .",
    "similar tests have been performed against the edg - rls server which is web service on top of relational database .",
    "the pfn registration time is in the range from about 30ms / entry to 6ms / entry for multithreaded applications depending on the combination and the setup of the web service and the backend database .    in all tests ,",
    "a single pfn entry is about 200 characters long and the file i d size is 36 characters .",
    "this is the first performance test of the pool file catalog , no systematic performance test and tuning have been attempted so far .",
    "the purpose of the pool collection component is to provide the tools needed to manage potentially large ensembles of objects stored by means of pool s persistence services .",
    "the collection component provides the infrastructure to support definition , creation , population , and use of such ensembles , including query , selection , and iteration services , and higher- level utilities .",
    "collections provide an entry point for physicists , a locus for recording the navigational information necessary to allow later iteration through a list of data objects that may be physically dispersed across a very large persistent store .",
    "a collection of events that are of interest to a particular physics working group because they share certain physics characteristics is a motivating example .    to support selection of specific subsets of interest from very large collections , it is useful to provide a means to query attributes of those objects without retrieving the objects themselves .",
    "the metadata component in pool provides the machinery to define and manage object- and collection - level metadata .    named collections populated by explicit calls to insertion operators are called `` explicit collections '' in pool .",
    "pool also supports `` implicit collections''collections of objects grouped by physical containment .",
    "the set of all objects of type t in a given container or file is an example of an implicit collection .",
    "an object persistified by writing its state into a file is implicitly an element of the collection of all such objects in the file , but the same object may also be registered in one or more explicit collections .",
    "explicit and implicit collections are read via the same abstract interface , so client code does not in any way depend upon whether an input collection is explicit or implicit .",
    "the first implementation of explicit collections is in mysql .",
    "the intent is to allow the possibility of server - side selection of objects of interest from queryable collections by means of database - provided sql services , so that the list of qualifying objects , and , by extension , the list of data files needed , may be determined at a stage prior to job scheduling and grid resource brokering , without the need to first retrieve the data files and navigate into application - specific data .    pool also supports hierarchical collections , tree - like structures that accept other ( sub)collections as their elements .",
    "the design allows complex selection based upon both collection- and object - level metadata .",
    "* create / write explicit collections + user first defines the attribute lists of collections will be produced by the process .",
    "then she processes the event and gathers attribute data . for each event",
    ", the attribute data and a reference , which contains enough information to retrieve the persistent object , is added to the corresponding collection . at the end of process ,",
    "several collections with different names are created and persisted . *",
    "read explicit collections + during analysis , the user specifies a number of collections and provides a query to select only the objects of interest .",
    "then she iterates through the returned persistent object references , retrieve the objects and process them in the analysis .",
    "file catalog , collection and metadata components are part of the so - called relational layer of the hybrid event store pool .",
    "such a relational layer takes advantage of the underlying relational database technology , e.g. the transaction , concurrency and queries , to achieve efficient management of files and object metadata .",
    "the file catalog is one of the basic components which provide transparent object navigation in the event store .",
    "the design of the component can accommodate wide ranges of use cases .",
    "it is grid - aware but also preserves grid - decoupled modes .",
    "9 d.  dllmann _ et al .",
    "_ , these proceedings mokt007 , and http://pool.cern.ch r.  brun and f.  rademakers , nucl .",
    "meth .  * a 389 * ( 1997 ) 81 , and http://root.cern.ch d.  dllmann _ et al .",
    "_ , these proceedings mokt008 , and physics/0306084 .",
    "http://edg-wp2.web.cern.ch/edg-wp2/ http://proj-grid-data-build.web.cern.ch/ + proj - grid - data - build / edg - rls - server/ + user - guide / html/ http://proj-grid-data-build.web.cern.ch/ + proj - grid - data - build / edg - metadata - catalog/ + user - guide / html/"
  ],
  "abstract_text": [
    "<S> the pool project is the common persistency framework for the lhc experiments to store petabytes of experiment data and metadata in a distributed and grid enabled way . </S>",
    "<S> pool is a hybrid event store consisting of a data streaming layer and a relational layer .    </S>",
    "<S> this paper describes the design of file catalog , collection and metadata components which are not part of the data streaming layer of pool and outlines how pool aims to provide transparent and efficient data access for a wide range of environments and use cases - ranging from a large production site down to single disconnected laptops .    the file catalog is the central pool component translating logical data references to physical data files in a grid environment . </S>",
    "<S> pool collections with their associated metadata provide an abstract way of accessing experiment data via their logical grouping into sets of related data objects . </S>"
  ]
}