{
  "article_text": [
    "in this paper , _ tiles _ are unit squares with colored sides .",
    "tiles are considered as prototypes : we may place translated copies of the same tile into different cells of a cell paper ( rotations are not allowed ) .",
    "tiles in the neighbor cells should match ( i.e. , the common sides should each have the same color ) .    formally speaking , we consider a finite set @xmath0 of _",
    "colors_. a _ tile _ is a quadruple of colors ( left , right , top , and bottom ones ) , i.e. , an element of @xmath1 .",
    "a _ tile set _ is a subset @xmath2 .",
    "a _ tiling _ of the plane with tiles from @xmath3 ( _ @xmath3-tiling _ ) is a mapping @xmath4 that respects the color - matching condition .",
    "a tiling @xmath5 is _ periodic _ if it has a _ period _ ,",
    "i.e. , a nonzero vector @xmath6 such that @xmath7 for all @xmath8 . otherwise , the tiling is _ aperiodic_. the following classical result was proved in  @xcite :    [ theorem1 ] there exists a tile set @xmath3 such that @xmath3-tilings exist and all of them are aperiodic .",
    "the construction from the proof of theorem  [ theorem1 ] was used in  @xcite as the main tool to prove _",
    "berger s theorem _ : the _ domino problem _",
    "( to find out whether or not a given tile set has tilings ) is undecidable .",
    "the first tile set of berger was rather complicated .",
    "later , many other constructions were suggested .",
    "some of them are simplified versions of berger s construction ( @xcite ; see also the expositions in @xcite ) .",
    "some others are based on polygonal tilings ( including the famous penrose and ammann tilings ; see  @xcite ) .",
    "an ingenious construction suggested in  @xcite is based on multiplication in a kind of positional number system and gives a small aperiodic set of @xmath9 tiles ( and in  @xcite an improved version with @xmath10 tiles is presented ) .",
    "another nice construction with a short and simple proof ( based explicitly on ideas of self - similarity ) was recently proposed in  @xcite .    in this paper , we present yet another construction of an aperiodic tile set",
    ". it does not provide a small tile set ; however , we find it interesting for the following reasons :    * the existence of an aperiodic tile set becomes a simple application of the classical construction used in kleene s fixed - point ( recursion ) theorem , in von neumann s self - reproducing automata  @xcite , and , more recently , in gcs reliable cellular automata  @xcite ; we do not use any geometric tricks .",
    "an aperiodic tile set is not only an interesting result but an important tool ( e.g. , this construction was invented to prove that the domino problem is undecidable ) ; our construction makes this tool easier to use . *",
    "the construction is rather general , so it is flexible enough to achieve some additional properties of the tile set .",
    "we illustrate this flexibility by providing new proofs for several known results and proving new results ; these new results add robustness ( resistance to sparse enough errors ) to known results about aperiodic tile sets and tile sets that have only complex tilings .",
    "it is unclear whether this kind of robustness can be achieved for previously known constructions of tile sets . on the other hand ,",
    "robustness properties appear to be important .",
    "for example , mathematical models for processes such as quasicrystal growth or dna computation should take errors into account .",
    "note that our model ( with its independent choice of places where errors are allowed ) has no direct physical meaning ; it is just a simple mathematical model that can be used as a playground to develop tools for estimating the consequences of tiling errors .",
    "the paper is organized as follows :    * in section  [ fixed ] , we present the fixed - point construction of an aperiodic tile set ( new proof of berger s theorem ) , and we illustrate the flexibility of this construction by several examples . * in section  [ substitution ] , we show that any `` uniform '' substitution rule can be implemented by a tile set ( thus providing a new proof for this rather old result ) . * in section  [ thue ]",
    ", we use substitutions to show that there are strongly aperiodic tile sets ( which means that any tiling is strongly aperiodic , i.e. , any shift changes at least some fixed fraction of tiles ) .",
    "* the fixed - point construction of section  [ fixed ] provides a self - similar tiling : blocks of size @xmath11 ( `` macro - tiles '' ) behave exactly as individual tiles , so on the next level we have @xmath12 blocks made of @xmath11 macro - tiles that have the same behavior , etc . in section  [ variable ] , we make some changes in our construction that allow us to get variable zoom factors ( the numbers of tiles in macro - tiles increase as the level increases ) .",
    "+ variable zoom factor tilings can be used for simulating computations ( with higher levels performing more computation steps ) ; we use them to give a simple proof of the undecidability of the domino problem . the main technical difficulty in the standard proof was to synchronize computations on different levels . in our construction",
    "this is not needed .",
    "we show also that other undecidability results can be obtained in this way . *",
    "this technique can be used to push the strong aperiodicity to its limits : the distance between every tiling and every periodic configuration ( or between every tiling and its nontrivial shift ) can be made arbitrarily close to @xmath13 , not only separated from  @xmath14 .",
    "this is done in section  [ strongly ] using an additional tool : error - correcting codes . * in  @xcite , a tile set was constructed such that every tiling has maximal kolmogorov complexity of fragments ( @xmath15 for @xmath11 squares ) ; all tilings for this tile set are noncomputable ( thereby implying a classical result of hanf  @xcite and myers  @xcite as a corollary ) .",
    "the construction in  @xcite was rather complicated and was based on a classical construction of an aperiodic tile set . in section  [ complex ] ,",
    "we provide another proof of the same result that uses variable zoom factors . it is simpler in some respects and can be generalized to produce robust tile sets with complex tiling , which is our main result ( section  [ robust - complex ] ) . * in section  [ subshifts ]",
    ", we use the same technique to give a new proof for some results by simpson  @xcite and hochman  @xcite about effectively closed subshifts : every one - dimensional effectively closed subshift can be obtained as a projection of some two - dimensional subshift of finite type ( in an extended alphabet ) .",
    "our construction provides a solution of problem  9.1 from  @xcite .",
    "( another solution , based on the classical robinson - type construction , was independently suggested by aubrun and sablik ; see  @xcite . ) * to prove the robustness of tile sets against sparse errors we use a hierarchical classification of the elements of random sets into islands of different levels ( a method that goes back to gcs  @xcite ) .",
    "this method is described in section  [ random ] . in section  [ islands ] , we give definitions and establish some probabilistic results about islands that are used later to prove robustness .",
    "we show that a sparse random set on @xmath16 with probability @xmath13 ( for bernoulli distribution ) can be represented as a union of `` islands '' of different ranks .",
    "the higher the rank , the bigger is the size of an island ; the islands are well isolated from each other ( i.e. , in some neighborhood of an island of rank @xmath17 , there are no other islands of rank @xmath18 )",
    ". then , in section  [ percolation ] , we illustrate these tools using standard results of percolation theory as a model example . in section",
    "[ bi - islands ] , we modify the definition of an island by allowing two ( but not three ! ) islands of the same rank to be close to each other .",
    "this more complicated definition is necessary to obtain the most technically involved result of the paper in section  [ robust - complex ] but can be skipped if the reader is interested in the other results . * in section",
    "[ robust ] , we use a fixed - point construction to get an aperiodic tile set that is robust in the following sense : if a tiling has a `` hole '' of size @xmath19 , then this hole can be patched by changing only an @xmath20-size zone around it .",
    "moreover , we do not need for this a tiling of the entire plane .",
    "an @xmath20 zone ( with bigger constant in @xmath21 notation ) around the hole is enough . * in section  [ robust - var ] , we explain how to get robust aperiodic tile sets with variable zoom factors . again",
    ", this material is used in section  [ robust - complex ] only . * in section  [ strongly - robust ] , we combine the developed techniques to establish one of our main results : there exists a tile set such that every tiling of the plane minus a sparse set of random points is far from every periodic tiling . *",
    "finally , section  [ robust - complex ] contains our most technically difficult result : a robust tile set such that all tilings , even with sparsely placed holes , have linear complexity of fragments .",
    "to this end we need to combine all our techniques : fixed - point construction with variable zoom factors , splitting of a random set into doubled islands ( we shall call them bi - islands ) , and `` robustification '' with filling of holes .",
    "fix a tile set @xmath3 and an integer @xmath22 ( _ zoom factor _ ) . a _",
    "macro - tile _ is an @xmath23 square tiled by @xmath3-tiles matching each other ( i.e. , a square block of @xmath24 tiles with no color conflicts inside ) .",
    "we can consider macro - tiles as `` preassembled '' blocks of tiles ; instead of tiling the plane with individual tiles , we may use macro - tiles . to get a correct @xmath3-tiling in this way",
    ", we need only to ensure that neighbor macro - tiles have matching _ macro - colors _ , so there are no color mismatches on the borders between macro - tiles . more formally , by macro - color we mean a sequence of @xmath25 colors on the side of a macro - tile ( i.e. , the right macro - color is a sequence of the right colors of the tiles on the right edge of a macro - tile , and the same for the left , the top , and the bottom macro - color ) .",
    "each macro - tile has four macro - colors ( one for each side ) .",
    "we always assume that macro - tiles are placed side to side , so the plane is split into @xmath23 squares by vertical and horizontal lines .    in the following we are interested in the situation when",
    "@xmath3-tilings can be split uniquely into macro - tiles that behave like tiles from some other tile set @xmath26 .",
    "formally , let us define the notion of a simulation .",
    "let @xmath3 and @xmath26 be two tile sets , and let @xmath22 be an integer . by _",
    "simulation of @xmath26 by @xmath3 with zoom factor @xmath25 _ we mean a mapping @xmath27 of @xmath26-tiles into @xmath23 @xmath3-macro - tiles such that the following properties hold :    * @xmath27 is injective ( i.e. , different tiles are mapped into different macro - tiles ) . *",
    "two tiles @xmath28 and @xmath29 match if and only if their images @xmath30 and @xmath31 match .",
    "this means that the right color of @xmath28 equals the left color of @xmath29 if and only if the right macro - color of @xmath30 equals the left macro - color of @xmath31 , and the same is true in the vertical direction .",
    "* every @xmath3-tiling can be split by vertical and horizontal lines into @xmath23 macro - tiles that belong to the range of @xmath27 , and such a splitting in unique .",
    "the second condition guarantees that every @xmath26-tiling can be transformed into a @xmath3-tiling by replacing each tile @xmath32 by its image , macro - tile @xmath33 . taking into account other conditions ,",
    "we conclude that every @xmath3-tiling can be obtained in this way , and the positions of grid lines as well as the corresponding @xmath26-tiles can be reconstructed uniquely .",
    "* example 1 * ( negative ) .",
    "assume that @xmath3 consists of one tile with four white sides .",
    "fix some @xmath22 .",
    "there exists a single macro - tile of size @xmath23 .",
    "does this mean that @xmath3 simulates itself ( when its only tile is mapped to the only macro - tile ) ?",
    "the first and second conditions are true , but the third one is false : the placement of cutting lines is not unique .",
    "* example 2 * ( positive ) . in this example @xmath26",
    "consists of one tile with all white sides .",
    "the tile set @xmath3 consists of @xmath24 tiles indexed by pairs @xmath34 of integers modulo  @xmath25 .",
    "a tile from @xmath3 has colors on its sides as shown on fig .",
    "[ fpt.1-2.mps ] ( each color is a pair of integers modulo @xmath25 , so set @xmath0 of all colors consists of @xmath24 elements ) .",
    "the simulation maps the single @xmath26-tile to a macro - tile that has colors @xmath35 and @xmath36 on its vertical and horizontal borders , respectively ( see fig .",
    "[ fpt.1-2.mps ] ) .",
    "a _ self - similar _ tile set is a tile set that simulates itself .",
    "the idea of self - similarity is used ( more or less explicitly ) in most constructions of aperiodic tile sets ( but @xcite are exceptions ) .",
    "however , not all of these constructions provide literally self - similar tile sets in our sense .",
    "it is easy to see that self - similarity guarantees aperiodicity .",
    "[ selfsimilar - aperiodic ] a self - similar tile set @xmath3 may have only aperiodic tilings .",
    "let @xmath27 be a simulation of @xmath3 by itself with zoom factor @xmath25 . by definition ,",
    "every @xmath3-tiling @xmath5 can be uniquely split into @xmath37 macro - tiles from the range of @xmath27 .",
    "so every period @xmath38 of @xmath5 is a multiple of @xmath25 ( since the @xmath38-shift of a cut is also a cut , the shift should respect borders between macro - tiles ) . replacing each macro - tile by its @xmath27-preimage",
    ", we get a @xmath3-tiling that has period @xmath39 .",
    "therefore , @xmath39 is again a multiple of @xmath25 . iterating this argument",
    ", we conclude that @xmath38 is divisible by @xmath40 for every @xmath17 , so @xmath38 .",
    "note also that every self - similar tile set has arbitrarily large finite tilings .",
    "starting with some tile , we apply @xmath27 iteratively and get a big tiled square .",
    "the standard compactness argument guarantees the existence of a tiling of the entire plane .",
    "therefore , to prove the existence of aperiodic tile sets it is enough to construct a self - similar tile set .",
    "[ selfsimilar ] there exists a self - similar tile set @xmath3 .",
    "theorem  [ selfsimilar ] was explicitly formulated and proven by ollinger  @xcite ; in his proof a self - similar tile set ( consisting of @xmath41 tiles ) is constructed explicitly .",
    "this tile set is then used to implement substitution rules ( cf .",
    "theorem  [ substitution - tiling ] below ) .",
    "another example of a self - similar tile set ( with many more tiles ) is given in  @xcite .",
    "( note that the definition of self - similarity used in  @xcite is a bit stronger . )",
    "we prefer a less specific and more flexible argument based on the fixed - point idea .",
    "our proof works for a vast class of tile sets ( though we can not provide explicitly an aperiodic tile set of a reasonably small size ) .",
    "the rest of this section is devoted to our proof of theorem  [ selfsimilar ] .",
    "before we prove this result , we explain a few techniques used in our construction and show how to simulate a given tile set by embedding computations .",
    "let us start with some informal discussion .",
    "assume that we have a tile set @xmath26 whose colors are @xmath17-bit strings ( @xmath42 ) and the set of tiles @xmath43 is presented as a predicate @xmath44 with four @xmath17-bit arguments .",
    "assume that we have some turing machine @xmath45 that computes @xmath46 .",
    "let us show how to simulate @xmath26 using some other tile set @xmath3 .",
    "this construction extends example  2 , but it simulates a tile set @xmath26 that contains not a single tile but many tiles .",
    "we keep the coordinate system modulo @xmath25 embedded into tiles of @xmath3 ; these coordinates guarantee that all @xmath3-tilings can be uniquely split into blocks of size @xmath23 and every tile `` knows '' its position in the block ( as in example  2 ) .",
    "in addition to the coordinate system , now each tile in @xmath3 carries supplementary colors ( from a finite set specified below ) on its sides .",
    "these colors form a new `` layer '' which is superimposed with the old one ; i.e. , the set of colors is now a cartesian product of the old one and the set of colors used in this layer .    on the border of a macro - tile ( i.e. ,",
    "when one of the coordinates is zero ) only two supplementary colors ( say , @xmath14 and @xmath13 ) are allowed .",
    "so the macro - color encodes a string of @xmath25 bits ( where @xmath25 is the size of macro - tiles ) .",
    "we assume that @xmath25 is much bigger than @xmath17 and let @xmath17 bits in the middle of macro - tile sides represent colors from @xmath0 .",
    "all other bits on the sides are zeros .",
    "( this is a restriction on tiles : each tile `` knows '' its coordinates so it also knows whether nonzero supplementary colors are allowed . )",
    "now we need additional restrictions on tiles in @xmath3 that guarantee that macro - colors on the sides of each macro - tile satisfy relation @xmath46 . to achieve this ,",
    "we ensure that bits from the macro - tile sides are transferred to the central part of the tile where the checking computation of @xmath45 is simulated ( fig .",
    "[ fpt.3.mps ] ) .",
    "@xmath47{fpt - eng-3.mps}\\ ] ]    for that we need to fix which tiles in a macro - tile form `` wires '' ( this can be done in any reasonable way ; we assume that wires do not cross each other ) and then require that each of these tiles carries equal bits on two sides ( so some bit propagates along the entire wire ) ; again this is easy to arrange since each tile knows its coordinates",
    ".    then , we check @xmath46 by a local rule that guarantees that the central part of a macro - tile represents a time - space diagram of @xmath45 s computation ( with the tape being horizontal , and time increasing upward ) .",
    "this is done in a standard way : the time - space diagram ( tableau ) of a turing machine computation can be described by local rules , and these rules can be embedded into a tile set - size window ; in the standard representation width @xmath48 and height @xmath49 is enough . however , our definition of a tile set is even more local : we compare colors on matching sides only .",
    "it is easy to see that we can still simulate any local rules by tiles .",
    "each tile keeps the contents of the corresponding window , and colors are used to ensure that overlapping windows are consistent.[local - rules - footnote ] ] ( see details in , e.g. , @xcite ) .",
    "we require that computation terminates in an accepting state ; if not , the tiling can not be formed .",
    "to make this construction work , the size of the macro - tile ( @xmath25 ) should be large enough ; we need enough space for @xmath17 bits to propagate and enough time and space (= height and width ) for all accepting computations of @xmath45 to terminate .    in this construction",
    "the number of supplementary colors depends on the machine @xmath45 ( the more states it has , the more colors are needed in the computation zone ) . to avoid this dependency , we replace @xmath45 by a fixed universal turing machine  @xmath50 that runs a _ program _ simulating  @xmath45 .",
    "let us agree that the tape of the universal turing machine has an additional read - only layer .",
    "each cell carries a bit that is not    @xmath47{fpt - eng-4.mps}\\ ] ]    changed during the computation ; these bits are used as a program for the universal machine  @xmath50 .",
    "( we may assume that the program bits occupy some part of the reserved read - only layer , e.g. , the leftmost bits on this layer ; see fig .",
    "[ fpt.4.mps ] . ) in terms of our simulation , the columns of the computation zone carry unchanged bits ( considered as a program for  @xmath5 ) , and the tile set restrictions guarantee that the central zone represents the _ record _ ( time - space diagram ) of an accepting computation of  @xmath50 ( with this program ) . in this way",
    ", we get a tile set @xmath3 that simulates @xmath26 with zoom factor @xmath25 using @xmath51 tiles .",
    "( again we need @xmath25 to be large enough , but the constant in @xmath51 does not depend on  @xmath25 . )      we know how to simulate a given tile set @xmath26 ( represented as a program for the universal turing machine ) by another tile set @xmath3 with a large enough zoom factor @xmath25 .",
    "now we want @xmath3 to be identical to @xmath26 in which case proposition  [ selfsimilar - aperiodic ] guarantees aperiodicity ) . for this",
    "we use a construction that follows the proof of kleene s recursion ( fixed - point ) theorem .",
    "we can not refer here to the _ statement _ of the theorem ; we need to recall its proof and adapt it to our framework .",
    "theorem  @xcite says that for every computable transformation @xmath52 of programs one can find a program @xmath53 such that @xmath53 and @xmath54 are equivalent , i.e. , produce the same output .",
    "( for simplicity we consider programs with no input , but this restriction does not really matter . ) in other words , there is no guaranteed way to transform a given program @xmath53 into some other program @xmath54 that produces different output . as a sketch of the proof , first we note that the statement is language - independent since we may use translations in both directions before and after @xmath52 .",
    "therefore , without loss of generality , we may assume that the programming language has some special properties .",
    "first , we assume that it has a function ` gettext ( ) ` that returns the text of the program ( or a pointer to a memory address where the program text is kept ) .",
    "second , we assume that the language contains an interpreter function ` execute(string s ) ` that interprets the content of its string argument ` s ` as a program written in the same language .",
    "it is not difficult to develop such a language and write an interpreter for it .",
    "indeed , the interpreter can access the program text anyway , so it can copy the text into some string variable .",
    "the interpreter also can recursively call itself with another program as an argument when it sees the ` execute ` call .",
    "if our language has these properties , it is easy to construct the fixed point for @xmath52 : just take the program ` execute(`@xmath52`(gettext ( ) ) ) ` .",
    "this theorem shows that a kind of self - reference , in which we write the program as if its full text is already given to us , is still acceptable .",
    "a classical example is a program that prints its own text .",
    "the proof shows a way how to do this by using a computation model where the immutable text of the program is accessible to it .",
    "constructing a self - similar tiling , we have the same kind of problems .",
    "we have already seen how to construct a tile set @xmath3 that simulates a given tile set @xmath26 .",
    "[ counterpart : it is easy to write a program that prints any given text . ] what we need is to construct a tile set that simulates _",
    "itself_. [ counterpart : what we need is to write a program that prints _ its own _ text . ]",
    "let us look again at our construction that transforms the description of @xmath26 ( a turing machine that computes the corresponding predicate ) into a tile set @xmath3 that simulates @xmath26 .",
    "note that most rules of @xmath3 do not depend on the program for @xmath45 , dealing with information transfer along the wires , the vertical propagation of unchanged program bits , and the space - time diagram for the universal turing machine in the computation zone . making these rules a part of @xmath26 s definition ( by letting @xmath55 and encoding @xmath51 colors by @xmath56 bits )",
    ", we get a program that checks that macro - tiles behave like @xmath3-tiles in this respect .",
    "macro - tiles of the second level ( `` macro - macro - tiles '' ) made of them would have the correct structure , wires that transmit bits to the computation zone , and even the record of some computation in this zone , but this computation could have an arbitrary program .",
    "therefore , at the third level all the structure is lost .    what do we need to add to our construction to close the circle and get self - simulation ?",
    "the only remaining part of the rules for @xmath3 ( not implemented yet at the level of macro - tiles ) is the hard - wired program .",
    "we need to ensure that macro - tiles carry the same program as @xmath3-tiles do . for that our program ( for the universal turing machine )",
    "needs to access the bits of its own text .",
    "as we have discussed , this self - referential action is in fact quite legal : the program is written on the tape , and the machine can read it . the program checks that if a macro - tile belongs to the first line of the computation zone , this macro - tile carries the correct bit of the program .",
    "how should we choose @xmath25 ( hard - wired in the program ) ?",
    "we need it to be large enough so the computation described above ( which deals with @xmath57 bits ) can fit in the computation zone .",
    "note that the computation never deals with the list of tiles in @xmath3 or a truth table of the corresponding @xmath58-ary relation on bit strings ; all these objects are represented by programs that describe them .",
    "the computation needs to check simple things only : that numbers in the @xmath59 range on four sides are consistent with each other , that rules for wires and computation time - space diagram are observed , that program bits on the next level coincide with actual program bits , etc .",
    "all these computations are rather simple .",
    "they are polynomial in the input size , which is @xmath57 ) , so for large @xmath25 they easily fit in @xmath60 available time and space .",
    "this finishes the construction of a self - similar aperiodic tile set .",
    "* remark*. [ polymorphism ] let us also make a remark that will be useful later .",
    "we defined a tile set as a subset of @xmath1 , where @xmath0 is a set of colors . using this definition ,",
    "we do not allow different tiles to have the same colors on their sides .",
    "the only information carried by the tile is kept on its sides . however ,",
    "sometimes a more general definition is preferable .",
    "we can define a tile set as a finite set @xmath38 together with a mapping of @xmath38 into @xmath1 .",
    "elements of @xmath38 are tiles , and the mapping tells us for each tile which colors it has on its four sides .    one can easily extend the notions of macro - tiles and simulation to this case .",
    "in fact , macro - tiles are well suited to this definition since they already may carry information that is not reflected in the side macro - colors .",
    "the construction of a self - similar tile set also can be adapted .",
    "for example , we can construct a self - similar tile set where each tile carries an auxiliary bit , i.e. , exists in two copies having the same side colors . since the tile set is self - similar , every macro - tile at every level of the hierarchy also carries one auxiliary bit , and the bits at different levels and in different macro - tiles are unrelated to each other . note that the total density of information contained in a tiling is still finite , since the density of information contained in auxiliary bits assigned to high - level macro - tiles decreases with level as a geometric sequence",
    "the construction of a self - similar tiling is rather flexible and can be easily augmented to get a self - similar tiling with additional properties .",
    "our first illustration is the simulation of substitution rules .",
    "let @xmath61 be some finite alphabet and @xmath62 be an integer .",
    "a _ substitution rule _ is a mapping @xmath63 .",
    "this mapping can be naturally extended to @xmath61-configurations . by _",
    "@xmath61-configuration _ we mean an integer lattice filled with @xmath61-letters , i.e. , a mapping @xmath64 considered modulo translations .",
    "a substitution rule @xmath65 applied to a configuration @xmath66 produces another configuration @xmath67 where each letter @xmath68 is replaced by an @xmath69 matrix @xmath70 .",
    "we say that a configuration @xmath66 is _ compatible _ with substitution rule @xmath65 if there exists an infinite sequence @xmath71 where @xmath72 are some configurations .",
    "this definition was proposed in @xcite .",
    "the classical definition ( used , in particular , in @xcite ) is slightly different : configuration @xmath73 is said to be compatible with a substitution rule @xmath65 if every finite part of @xmath66 occurs inside of some @xmath74 ( for some @xmath75 and some @xmath68 ) .",
    "we prefer the first approach since it looks more natural in the context of tilings . however , all our results can be reformulated and proven ( with some technical efforts ) for the other version of the definition ; we do not go into details here .",
    "* example 3*. let @xmath76 , @xmath77 it is easy to see that the only configuration compatible with  @xmath65 is the chess - board coloring where zeros and ones alternate horizontally and vertically .",
    "* example 4 * ( fig",
    ".  [ fpt - eng.45 ] ) .",
    "let @xmath76 , @xmath78 one can check that all configurations that are compatible with this substitution rule ( called _ thue  morse configurations _ in the following ) are aperiodic .",
    "( in section  [ thue ] we will prove a stronger version of this fact . )",
    "one may note , for example , that every configuration compatible with this substitution rule can be uniquely decomposed into disjoint @xmath79 blocks @xmath80 and @xmath81 by vertical and horizontal lines ; since neighbor cells of the same color should be separated by one of those lines , the position of the lines is unique .",
    "then , we can apply the argument from proposition  [ selfsimilar - aperiodic ] ( with @xmath82 ) .",
    "the following theorem goes back to mozes  @xcite .",
    "it says that every substitution rule can be enforced by a tile set .",
    "[ substitution - tiling ] let @xmath61 be an alphabet and let @xmath65 be a substitution rule over  @xmath61 .",
    "then , there exist a tile set @xmath3 and a mapping @xmath83 such that    the @xmath84-image of any @xmath3-tiling is an @xmath61-configuration compatible with @xmath65 ;    every @xmath61-configuration compatible with @xmath65 can be obtained in this way .    a nice proof of this result for @xmath79 substitutions is given in  @xcite , where an explicit construction of a tile set @xmath3 for every substitution rule @xmath65 is provided .",
    "we prove this theorem using our fixed - point argument . in this way",
    "we avoid the boring technical details ; but the tile sets that can be extracted from our proof contain a huge number of tiles .    .",
    "let us modify the construction of the tile set @xmath3 ( with zoom factor @xmath25 ) by taking @xmath65 into account .",
    "first consider a very special case when    * the substitution rule maps each @xmath61-letter into an @xmath23 matrix ( i.e. , @xmath85 ) and * the substitution rule is easy to compute : given a letter @xmath86 and @xmath34 , we can compute the @xmath34-th letter of @xmath87 in a time much less than @xmath25 .",
    "in this case we proceed as follows . in our basic construction",
    "every tile knows its coordinates in the macro - tile and some additional information needed to arrange `` wires '' and simulate calculations of the universal turing machine .",
    "disjoint groups ; each group corresponds to tiles that appear in one of @xmath24 positions in the macro - tiles .",
    "the correct positioning of the tiles is ensured ( as we have seen ) by side colors .",
    "the self - similarity guarantees that the same is true for macro - tiles , where the group ( i.e. , the coordinates in a macro - tile of the next level ) is determined by the content of the computation zone and corresponding bits ( macro - colors ) on the sides . ] now , in addition to this basic structure , each tile keeps two letters of @xmath61 .",
    "the first is the label of a tile itself , and the second is the label of the @xmath23 macro - tile it belongs to .",
    "this means that we keep additional @xmath88 bits in each tile , i.e. , multiply the number of tiles by @xmath89 .",
    "it remains to explain how the local rules work .",
    "we add two requirements :    \\(i ) _ the second letter is the same for neighbor tiles ( unless they are separated by a border of some @xmath23 macro - tile)_. this constraint can be easily enforced by colors on sides of tiles .",
    "we multiply the number of colors in our basic construction by @xmath90 ; now each color of the new construction is a pair : its first component is a color from the basic construction and its second component is a letter of @xmath61 .",
    "the second component of the new color guarantees that every two neighbor tiles keep the same `` father '' letter ( unless these tiles are separated by a border and do not belong to the same father macro - tile , in which case we do not exhibit the letter to those borders ) .",
    "\\(ii ) _ the first letter in a tile is determined by the second letter and the coordinates of the tile inside the macro - tile , according to the substitution rule_. indeed , each tile `` knows '' its coordinates in a macro - tile .",
    "therefore , its first letter must appear in @xmath91 at the corresponding position",
    ". we do not need to extend the set of colors to enforce this property .",
    "this requirement is only a restriction on tiles .",
    "it explains which combinations @xmath92 can be combined in one tile of our tile set .",
    "copies of the same tile ( with different letters ) ; but then , the restriction prohibits all of them except one , so is there any change at all ?",
    "in fact , the actual change is occurring on higher levels : we want the macro - tiles to have both letters written on the tape as binary strings ( in some prearranged places ) .",
    "this is important for checking consistency between levels . ]",
    "we want the new tile set to be self - similar .",
    "therefore , we should guarantee that the requirements ( i ) and ( ii ) hold also for macro - tiles . fortunately ,",
    "both requirements are easy to integrate in our basic self - referential construction . in each macro - tile ,",
    "two letters of @xmath61 are encoded by strings of bits in some specially reserved locations on the tape of the turing machine ( simulated in the computation zone of this macro - tile ) . requirement ( i )",
    "is enforced by adding extra @xmath93 bits to macro - colors ; to achieve ( ii ) , a macro - tile should check that its first letter appears in @xmath91 at the required position .",
    "this is possible when @xmath65 is easy to compute .",
    "( knowing the coordinates and the second letter , the program computes the required value of the first letter and then compares it with the actual value . )",
    "requirements ( i ) and ( ii ) ensure that if we take first letters from @xmath61 assigned to each tile , we get an @xmath61-configuration that is an @xmath65-image of some other configuration . also ( because of self - similarity ) we have the same property on the level of macro - tiles .",
    "but this is not enough .",
    "we need to guarantee that the first letter on the level of macro - tiles is identical to the second letter on the level of tiles .",
    "this is also achievable .",
    "the first letter of a macro - tile is encoded by bits in its computation zone , and we can require that those bits match the second letter of the tiles at that place .",
    "( recall that the second letter is the same across the tiles that constitute one macro - tile ; note also that each tile `` knows '' its coordinates and can determine whether it is in the zone for the first letter in the macro - tile and which bit should be there . ) by self - similarity , the same arguments work for macro - tiles of all levels .",
    "it is easy to see that now the tile set @xmath3 has the required properties ( each tiling projects into a configuration compatible with  @xmath65 and vice versa ) .",
    "however , this construction assumes that @xmath25 ( the zoom factor ) is equal to the matrix size in the substitution rule , which is usually not the case .",
    "in fact , usually the value of @xmath94 ( a parameter of the substitution rule ) is fixed in advance , and we have to choose @xmath25 , which needs to be large enough . to overcome this difficulty , we let @xmath25 be equal to @xmath95 for some @xmath17 , and we use the substitution rule @xmath96 , i.e.",
    ", the @xmath17th iteration of  @xmath65 ( a configuration is compatible with @xmath96 if and only if it is compatible with @xmath65 ) .",
    "now we do not need @xmath65 to be easily computable : for every @xmath65 , if @xmath17 is large enough , the computation of @xmath96 will fit into the available space ( exponential in @xmath17 ) .",
    "let @xmath97 be a real number .",
    "we say that a configuration @xmath98 is _ @xmath99-aperiodic _ if for every nonzero vector @xmath6 there exists @xmath25 such that in every square whose side is at least @xmath25 the fraction of points @xmath100 such that @xmath101 exceeds  @xmath99 .",
    "* remark*. if @xmath5 is @xmath99-aperiodic , then the besicovitch distance between @xmath5 and any periodic pattern is at least @xmath102 .",
    "( the besicovitch distance between two configurations is defined as @xmath103 , where @xmath104 is the fraction of points where two configurations differ in the @xmath23 centered square .",
    "it is easy to see that the distance does not depend on the choice of the center point . )",
    "[ aperiodic ] there exists a tile set @xmath3 such that @xmath3-tilings exist and every @xmath3-tiling is @xmath99-aperiodic for every @xmath105 .    the proof is obtained by applying theorem  [ substitution - tiling ] to the thue  morse substitution rule @xmath38 ( example 4 ) .",
    "let @xmath0 be a configuration compatible with @xmath38 .",
    "we have to show that @xmath0 is @xmath99-aperiodic for every @xmath105 .",
    "it is enough to prove that every configuration compatible with the thue  morse substitution rule is @xmath99-aperiodic .",
    "informally , we can reduce the statement to the one - dimensional case , since thue  morse substitution is an ` xor`-combination of two one - dimensional substitutions .",
    "here are the details .",
    "consider a one - dimensional substitution system with two rules , @xmath106 and @xmath107 . applying these rules to @xmath14 and @xmath13 ,",
    "we get @xmath108 let @xmath109 and @xmath110 be the @xmath19th terms in these sequences ( @xmath111 , @xmath112 ,  , @xmath113 , @xmath114 , etc . )",
    "; it is easy to see that @xmath115 and @xmath116 .    for some @xmath19",
    "we consider the ` xor`-combination of these strings , where the @xmath34-th bit is ` xor ` of the @xmath117th bit in the first string and the @xmath118th bit in the second string .",
    "since @xmath110 is a bitwise negation of @xmath109 , we get only two different combinations ( one obtained from two copies of @xmath109 or two copies of @xmath110 , and the other obtained from different strings ) , which are bitwise opposite .",
    "it is easy to see ( e.g. , by induction ) that these two square patterns are images of @xmath14 and @xmath13 after @xmath19 steps of two - dimensional thue  morse substitution .    to prove the statement for aperiodicity of the thue  morse configuration , we start with an estimate for ( one - dimensional ) aperiodicity of @xmath109 and @xmath110 :    [ folklore ] for any integer @xmath119 and for any @xmath19 such that @xmath120 the shift by @xmath121 steps to the right changes at least @xmath122 positions in @xmath109 and leaves unchanged at least @xmath122 positions .",
    "( formally , in the range @xmath123 there exist at least @xmath124 positions @xmath117 such that the @xmath117th and the @xmath125-th bits in @xmath109 coincide and at least @xmath126 positions where these bits differ . ) [ lemma - folklor ]    string @xmath109 can be represented as @xmath127 , where @xmath128 and @xmath129 .",
    "one may assume without loss of generality that @xmath130 ( or otherwise we apply lemma  [ lemma - folklor ] separately to the two halves of @xmath109 ) .",
    "note that @xmath131 appears in the sequence twice : once preceded by a copy of @xmath132 and once preceded by a copy of @xmath133 .",
    "since these copies have opposite bits , the shifted bits match in one of the cases and do not match in the other one .",
    "the same is true for @xmath134 , which appears preceded both by @xmath132 and @xmath133 .",
    "now consider a large @xmath23 square in a two - dimensional thue  morse configuration and some shift vector @xmath38 .",
    "we assume that @xmath25 is much bigger than components of @xmath38 ( since we are interested in the limit behavior as @xmath135 ) .",
    "moreover , we may assume that some power of @xmath49 ( let us call it @xmath94 ) is small compared to @xmath25 and large compared to @xmath38 .",
    "then , the @xmath23 square consists of a large number of @xmath69 thue ",
    "morse blocks and some boundary part ( which can be ignored by changing @xmath99 slightly ) .",
    "then , we can consider each @xmath69 block separately to estimate the fraction of positions that are changed by the @xmath38-shift .",
    "if @xmath38 is horizontal or vertical , we can use the statement of the lemma directly : at least 1/4 of all positions are changed .",
    "if not ( i.e. , if the shift has two nonzero components ) , we are interested in the probability of some event that is an ` xor ` combination of two _ independent _ events with probabilities in the interval @xmath136 .",
    "it is easy to check that such an event also has probability in @xmath136 ( in fact , even in @xmath137 , but we do not need this stronger bound ) .",
    "theorem  [ aperiodic ] is proved .",
    "in fact , the bound @xmath138 can be replaced by @xmath139 if we use a more professional analysis of the thue ",
    "morse sequence ( see , e.g. ,  @xcite ) .",
    "however , if we want to get the strongest result of this form and make the bound close to  @xmath13 , this substitution rule does not work .",
    "we can use some other rule ( in a bigger alphabet ) as pritykin and ulyashkina have shown  @xcite , but we prefer to give another construction with variable zoom factors ( see section  [ strongly ] ) .",
    "the fixed - point construction of an aperiodic tile set is flexible enough and can be used in other contexts .",
    "for example , the `` zoom factor '' @xmath25 could depend on the level .",
    "this means that instead of one tile set @xmath3 we have a sequence of tile sets @xmath140 , and instead of one zoom factor @xmath25 we have a sequence of zoom factors @xmath141 .",
    "the tile set @xmath142 simulates @xmath143 with zoom factor @xmath144 , the tile set @xmath143 simulates @xmath145 with zoom factor @xmath146 , etc .    in other words ,",
    "@xmath142-tilings can be uniquely split ( by horizontal and vertical lines ) into @xmath147 macro - tiles from some list , and the macro - tiles in this list are in one - to - one correspondence ( which respects matching rules ) with @xmath143 .",
    "so @xmath142-tilings are obtained from @xmath143-tilings by replacing each @xmath143-tile by the corresponding @xmath142-macro - tile , and each @xmath142-tiling has a unique reconstruction .",
    "further , every @xmath143-tiling can be split into macro - tiles of size @xmath148 that correspond to @xmath145-tiles .",
    "so after two steps of zooming out , every @xmath142-tiling looks like a @xmath145-tiling ; only a closer look reveals that each @xmath145-tile is in fact a @xmath143-macro - tile of size @xmath148 , and an even closer look is needed to realize that every @xmath143-tile in these macro - tiles is in fact a @xmath142-macro - tile of size @xmath147 .",
    "for such a @xmath142-tiling we can say that it consists of level @xmath13 macro - tiles of size @xmath147 ( isomorphic to @xmath143 ) ; at the same time it consists of level @xmath49 macro - tiles of size @xmath149 ( isomorphic to @xmath145 ) , etc .",
    "this is what we want to achieve ( together with other things needed to get the tile set with desired properties ) .",
    "how do we achieve this ?",
    "each macro - tile should `` know '' its level : a macro - tile that simulates a @xmath150-tile and is made of @xmath151-tiles , should have @xmath17 in some place on the tape of the turing machine simulated in this macro - tile . to make this information consistent between neighbors ,",
    "@xmath17 is exhibited as a part of the macro - colors at all four sides .",
    "the value of @xmath17 is used for the computations .",
    "macro - colors on the sides of a macro - tile encode the coordinates of this macro - tile inside its father , and the computation should check that they are consistent modulo @xmath152 ( i.e. , the @xmath100 coordinate on the right side should be equal to the @xmath100 coordinate on the left side plus @xmath13 modulo @xmath152 , etc . ) .",
    "this means that @xmath152 should be computable from @xmath17 ; moreover , it should be computable fast enough to fit into the computation zone ( which carries only @xmath153 steps of computation ) .",
    "after @xmath152 is computed , there should be enough time to perform the arithmetic operations modulo @xmath152 , and so on .",
    "let us look at these restrictions more closely .",
    "we need to keep both @xmath17 and the coordinates ( modulo @xmath152 ) on the tape of level @xmath17 macro - tiles , and @xmath154 bits are required for that .",
    "both @xmath155 and @xmath156 should be much less than @xmath157 , so all the computations could fit in the available time frame .",
    "this means that @xmath158 should not increase too fast or too slowly .",
    "say , @xmath159 is too slow ( in this case @xmath17 occupies almost all available space in macro - tiles of level @xmath160 , and we do not have enough time even for simple computations ) , and @xmath161 is too fast ( in this case @xmath156 is too large compared to time and space available on the computation zone of a macro - tile of level @xmath17 ) . also we need to compute @xmath152 when @xmath17 is known , so we assume that not only the size of @xmath152 ( i.e. , @xmath156 ) but also the time needed to compute it ( given @xmath17 ) is small compared to @xmath157 .",
    "these restrictions still allow many possibilities : say , @xmath158 could be proportional to @xmath162 , @xmath17 , @xmath163 , @xmath164 , or @xmath165 note that we say `` proportional '' since @xmath158 needs to be reasonably large even for small @xmath17 ( we need some space in the macro - tile for wires and all our estimates for computation time are not precise but only asymptotic , so we need some reserve for small @xmath17 ) .",
    "there is one more problem : it is not enough to ensure that the value of @xmath17 is the same for neighbor macro - tiles .",
    "we also need to ensure that this value is correct , i.e. , is @xmath13 for level @xmath13 macro - tiles made of @xmath142-tiles , is @xmath49 for level @xmath49 macro - tiles made of @xmath143-tiles , etc .",
    "to guarantee this , we need to compare somehow the level information that is present in a macro - tile and its sons . using the anthropomorphic terminology",
    ", we say that each macro - tile `` knows '' its level , since it is explicitly written on its tape , and this is , so to say , `` conscious '' information processed by a computation in the computation region of the macro - tile .",
    "one may say also that a macro - tile of any level contains `` subconscious '' information ( `` _ _ existing in the mind but not immediately available to consciousness _ _ '' @xcite ) .",
    "this is the information that is conscious for its sons , grandsons , and so on ( all the way down to the ground level ) .",
    "the problem is that the macro - tile can not check consistency between conscious and subconscious information since the latter is unavailable ( the problem studied by psychoanalysis in a different context ) .",
    "the solution is to check consistency in the son , not in the father .",
    "every tile knows its level and also knows its position in its father .",
    "so it knows whether it is in the place where its father should keep level bits , and it can check whether indeed the level bit that its father keeps in this place is consistent with the level information the tile has .",
    "( in fact we used the same trick when we simulated a substitution rule : a check that the father letter of a tile coincides with the letter of the father tile is done in the same way . )",
    "the careful reader will also note here that now the neighbor tiles will automatically have the same level information , so there is no need to check consistency between neighbors .",
    "this kind of `` self - similar '' structure with variable zoom factors can be useful in some cases .",
    "though it is not self - similar according to our definition , one can still easily prove that any tiling is aperiodic .",
    "note that now the computation time for the turing machine simulated in the central part increases with level , and this can be used for a simple proof of undecidability of the domino problem .",
    "the problem in the standard proof ( based on the self - similar construction with fixed zoom factor ) is that we need to place computations of unbounded size into this self - similar structure , and for that we need special geometric tricks ( see  @xcite ) . with our new construction ,",
    "if we want to reduce an instance of the halting problem ( some machine @xmath166 ) to the domino problem , we add to the program embedded in our construction the parallel computation of @xmath166 on the empty tape ; if it terminates , this destroys the tiling .    in a similar way we can show that the existence of a periodic tiling is an undecidable property of a tile set , and ,",
    "moreover , the tile sets that admit periodic tilings and tile sets that have no tilings form two inseparable sets ( another classical result ; see  @xcite ) .",
    "recall that two sets @xmath61 and @xmath167 are called ( computably ) _ inseparable _ if there is no computable set @xmath0 such that @xmath168 and @xmath169 .",
    "here is an example of a more exotic version of the latter result ( which probably is of no interest in itself but just serves as an illustration of the technique ) .",
    "we say that a tile set @xmath3 is _ @xmath94-periodic _ if @xmath3-tilings exist and for each of them the set of periods is the set of _ all _ multiples of @xmath94 , in other words , if the group of periods is generated by @xmath170 and @xmath171 .",
    "let @xmath172 [ respectively @xmath21 ] be all @xmath94-periodic tile sets for all even @xmath94 [ respectively odd @xmath94 ] .",
    "[ reduction ] the sets @xmath172 and @xmath21 are inseparable enumerable sets .",
    "it is easy to see that the property `` to be an @xmath94-periodic tile set '' is enumerable ( both the existence of an @xmath94-periodic tiling and enforcing periods @xmath171 and @xmath170 are enumerable properties ) .",
    "it remains to reduce some standard pair of inseparable sets ( say , machines that terminate with output @xmath14 and @xmath13 ) to @xmath175 .",
    "it is easy to achieve this by using the technique explained above .",
    "assume that the numbers @xmath158 increase , being odd integers as long as the computation of a given machine does not terminate .",
    "when and if it terminates with output @xmath14 [ respectively  @xmath13 ] , we require periodicity with odd [ respectively  even ] period at the next level .    another application of a variable zoom factor is the proof of the following result obtained by lafitte and weiss ( see  @xcite ) using a turing machine simulation inside a berger  robinson construction .",
    "let @xmath177 be a total computable function whose arguments and values are tile sets .",
    "then , there exists a tile set @xmath3 that simulates a tile set @xmath178 .",
    "here we assume that some computable encoding for tile sets is fixed .",
    "since there are no restrictions on the computation complexity of @xmath177 , the choice of the encoding is not important .",
    "note that for identity function @xmath177 this result provides the self - simulating tile set of section  [ simulating - itself ] . to prove it in the general case",
    ", we may use the same kind of fixed - point technique .",
    "however , there is a problem : the computation resources inside a tile are limited ( by its size ) while time needed to compute @xmath177 can be large ( and , moreover , depends on the tile size ) .",
    "the solution is to postpone the simulation to large levels . if a tile set @xmath142 simulates @xmath143 , which simulates @xmath145 , which simulates , etc .",
    ", up to @xmath179 , then @xmath142 simulates @xmath179 , too .",
    "therefore we may proceed as follows .",
    "we use the construction explained above with a variable zoom factor .",
    "additionally , at each level the computation starts with a preliminary step that may occupy up to ( say ) half of the available time . on this step we read the program that is on the tape and convert it into the tile set .",
    "( recall that each program determines some tile set @xmath142 such that @xmath142-tilings can be uniquely split into macro - tiles , and this program is written on a read - only part of the tape simulated in the computation zone of all macro - tiles , as was explained in section  [ simulating ] . )",
    "then , we apply @xmath177 to the obtained tile set .    this part of the computation checks also that it does not use more than half of the available time and that the output is small enough compared to the macro - tile size .",
    "if this time turns out to be insufficient or the output is too big , this part is dropped and we start a normal computation for the variable zoom factor , as explained above . in this case , the zoom factor on the next level should be greater than the zoom factor on the current level ( e.g. , we may assume @xmath180 for some large enough constant @xmath0 ) .",
    "however , if the time is large enough and the result ( the list of tiles that corresponds to @xmath177 s output ) is small compared to the macro - tile size , we check that the macro - tile ( of the current level ) belongs to the tile set computed .",
    "the hierarchy of macro - tiles stops at this level .",
    "the behavior of macro - tiles at this level depends on @xmath177 : they are isomorphic to @xmath181-tiles .",
    "since the program is the same at all levels and the computation of @xmath177 should be finite ( though may be very long ) , at some ( big enough ) level the second possibility is activated , and we get a macro - tile set isomorphic to @xmath178 , where @xmath3 is the tile set on the ground level .",
    "another application of the variable zoom factor technique is the construction of tile sets with any given computable density .",
    "assume that a tile set is given and , moreover , that all tiles are divided into two classes , say , @xmath61-tiles and @xmath167-tiles .",
    "we are interested in a fraction of @xmath61-tiles in a tiling of an entire plane or its large region .",
    "if the tile set is flexible enough , this fraction can vary .",
    "however , for some tile sets this ratio tends to a limit value when the size of a tiled region increases .",
    "this phenomenon is captured in the following definition : we say that tile set @xmath3 divided into @xmath61- and @xmath167-tiles _ has a limit density @xmath99 _ if for every @xmath182 there exists @xmath25 such that for any @xmath183 the fraction of @xmath61-tiles in any tiling of the @xmath11 square is between @xmath184 and @xmath185 .",
    "if a tile set has a density @xmath99 , then @xmath99 is a computable real number in @xmath186 $ ] .",
    "any computable real number @xmath187 $ ] is a density of some tile set .    the first part of the proof is a direct corollary of the definitions . for each @xmath19 we can consider all tilings of the @xmath11 square and look for the minimal and maximal fractions of @xmath61-tiles in them .",
    "let us denote the minimal and maximal fractions by @xmath188 and @xmath189 respectively .",
    "these rational numbers are computable given @xmath19 .",
    "it is easy to see that the limit frequency ( if it exists ) is in the interval @xmath190 $ ] . indeed ,",
    "in a large square split into squares of size @xmath11 the fraction of @xmath61-tiles is between @xmath188 and @xmath189 , being at the same time arbitrarily close to @xmath99 .",
    "therefore , @xmath99 is computable ( to get its value with precision @xmath191 , we increase @xmath19 until the difference between @xmath189 and @xmath188 becomes smaller than @xmath191 ) .",
    "it remains to prove  ( ii ) .",
    "since @xmath99 is computable , there exist two computable sequences of rational numbers @xmath192 and @xmath193 that converge to @xmath99 in such a way that @xmath194\\supset[l_2,r_2]\\supset[l_3,r_3]\\supset\\cdots.\\ ] ] our goal will be achieved if macro - tiles of the first level have density of either @xmath195 or @xmath28 , macro - macro - tiles of the second level have density of either @xmath196 or @xmath29 , and so on .",
    "indeed , each large square can be split into macro - tiles ( and the border that does not change the density much ) , so in any large square the fraction of @xmath61-tiles is ( almost ) in @xmath197 $ ] .",
    "the same argument works for macro - macro - tiles , etc .",
    "however , this plan can not be implemented directly .",
    "the main difficulty is that the computation of @xmath192 and @xmath193 may require a lot of time whereas the computation abilities of macro - tiles of level @xmath117 are limited .",
    "( we use variable zoom factors , e.g. , we may let @xmath180 , but they can not grow too fast . )    the solution is to postpone the switch from densities @xmath192 and @xmath193 to densities @xmath198 and @xmath199 to the higher level of the hierarchy where the computation has enough time to compute all these four rational numbers and find out in which proportion @xmath192- and @xmath193-tiles should be mixed in @xmath198- and @xmath199-tiles .",
    "( we need the denominators in both fractions @xmath198 and @xmath199 to be equal to the number of @xmath117-level macro - tiles in the @xmath200-level macro - tile , but this restriction can always be satisfied by a slight change in the sequences @xmath201 and @xmath202 , which leaves @xmath99 unchanged . )",
    "so , we allocate , say , the first half of the available time for a controlled computation of all these values ; if the computation does not finish in time , the densities for the next level are the same as for the current level .",
    "( we require that all macro - tiles in the same father tile have the same density , either @xmath192 or @xmath193 ) .",
    "if the computation terminates in time , we use the result of the computation to have two types of the next level tiles : one with density @xmath198 and one with density @xmath199 .",
    "they are made by using prescribed amounts of @xmath192- and @xmath193-tiles .",
    "( since each tile knows its coordinates , it can find out whether it should be of the first or second type . )",
    "this finishes the construction .",
    "in section  [ thue ] we constructed a tile set such that every tiling is @xmath99-aperiodic for every @xmath105 .",
    "now we want to improve this result and construct a tile set such that every tiling is , say , @xmath203-aperiodic ( here @xmath203 can be replaced by any constant less than  @xmath13 ) .",
    "it is easy to see that this can not be achieved by the same argument , with thue ",
    "morse substitutions , nor with any substitutions in a two - letter alphabet ; we need a large alphabet to make the constant close to @xmath13 .",
    "it is possible to achieve @xmath203-aperiodicity with a carefully chosen substitution rule ( in a bigger alphabet ) , as recently proposed by pritykin and ulyashkina  @xcite , by just applying theorem  [ substitution - tiling ] ( similarly to the argument for the thue  morse substitution presented in section  [ thue ] ) . in this section",
    "we present an alternative proof of this result .",
    "we exploit substitution rules with variable zoom factors ( and different substitutions on each level ) and use the idea of an error - correcting code .    instead of one single alphabet ,",
    "@xmath61 , we now consider an infinite sequence of finite alphabets , @xmath204 ; the cardinality of @xmath205 will grow as @xmath17 grows . then",
    ", we consider a sequence of mappings : @xmath206 where @xmath207 are some positive integers ( zoom factors ) ; @xmath158 will increase as @xmath17 increases .",
    "then , we can compose these mappings .",
    "for example , a letter @xmath208 in @xmath209 can be first replaced by an @xmath148 square @xmath210 filled by @xmath211-letters .",
    "then , each of these letters can be replaced by an @xmath147 square filled by @xmath212-letters according to @xmath213 , and we get an @xmath149 square filled by @xmath212-letters ; we denote this square by @xmath214 ( slightly abusing the notation ) .",
    "we call all this ( i.e. , the sequence of @xmath205 , @xmath158 , @xmath215 ) a _ substitution family_. such a family defines a class of @xmath212-configurations compatible with it ( in the same way as in section  [ substitution - tiling ] ) . our plan is to construct a substitution family such that    * every configuration compatible with this family is @xmath203-aperiodic , and * there exists a tile set and projection of it onto @xmath212 such that only compatible configurations ( and all compatible configurations ) are projections of tilings .    in other words , we use the same argument as before ( proving theorem  [ aperiodic ] ) but use a substitution family instead of one substitution rule .",
    "this substitution family will have two special properties :    a. symbols used in different locations are different .",
    "this means that @xmath205-letters that appear in a given position of the squares @xmath216 for some @xmath217 never appear in any other places of these squares ( for any @xmath208 ) ; thus , set @xmath205 is split into @xmath218 disjoint subsets used for different positions in @xmath218 squares .",
    "b. different letters are mapped to squares that are far away in terms of hamming distance .",
    "this means that if @xmath219 are different , then the hamming distance between images @xmath216 and @xmath220 is large : the fraction of positions in the @xmath218 square , where @xmath221 and @xmath222 have equal letters does not exceed @xmath223 .    here",
    "@xmath224 will be a sequence of positive reals such that @xmath225 .",
    "this implies that composite images of different letters are also far apart .",
    "for example , the fraction of positions in the @xmath226 square where @xmath214 and @xmath227 coincide does not exceed @xmath228 .",
    "indeed , in @xmath210 and @xmath229 we have at most @xmath230-fraction of matching letters ; these letters generate @xmath230-fraction of matching @xmath212-letters on the ground level ; all other ( nonmatching ) pairs add @xmath231-fraction .",
    "in fact , we get even a stronger bound @xmath232 .    for the same reasons ,",
    "if we take two different letters in @xmath205 and then drop to the ground level and obtain two squares of size @xmath233 filled by @xmath212-letters , the fraction of coincidences is at most @xmath234 .",
    "this property of the substitution family implies the desired property :    if an @xmath212-configuration @xmath5 is compatible with a substitution family having properties and , then @xmath5 is @xmath203-aperiodic .    consider a shift vector @xmath38 .",
    "if @xmath38 is not a multiple of @xmath144 ( one of the coordinates is not a multiple of @xmath144 ) , then property ( a ) guarantees that the original configuration and its @xmath38 shift differ everywhere .",
    "now assume that @xmath38 is a multiple of @xmath144 .",
    "then , @xmath38 induces a @xmath235-shift of an @xmath211-configuration @xmath236 that is an @xmath213-preimage of @xmath5 .",
    "if @xmath38 is not a multiple of @xmath237 , then @xmath238 is not a multiple of @xmath146 and for the same reason this @xmath235-shift changes all the letters in @xmath236 .",
    "different letters in @xmath211 are mapped to @xmath147 squares that coincide in at most @xmath231-fraction of positions .    if @xmath38 is a multiple of @xmath237 but not @xmath239 , we get a @xmath240 shift of @xmath209-configuration @xmath241 that changes all its letters , and different letters give squares that are @xmath242 apart .",
    "the same argument works for the higher levels .",
    "it remains to construct a substitution family that has properties ( a ) and ( b ) and can be enforced by a tile set .",
    "property ( b ) ( large hamming distance ) is standard for coding theory , and the classical tool is the reed ",
    "solomon code .",
    "let us recall the idea of the reed  solomon code ( for details see , e.g. , @xcite ) .",
    "the codewords of the reed ",
    "solomon code are tables of ( values of ) polynomials of bounded degree . more precisely , we fix some finite field @xmath243 of size @xmath244 and an integer @xmath245 .",
    "let @xmath246 be a polynomial over @xmath243 of degree less than @xmath247 .",
    "then the codeword corresponding to @xmath248 ( i.e. , the encoding of the sequence @xmath249 ) is a vector in @xmath250 ( i.e. , a sequence of @xmath244 elements of the field ) , which consists of the values of this polynomial computed at all points @xmath251 .",
    "thus , for given parameters @xmath247 and @xmath244 , the code consists of @xmath252 codewords .",
    "since two polynomials of degree less than @xmath247 can coincide in at most @xmath253 points , the distance between any two codewords is at least @xmath254 . of course",
    ", this construction can be used even if the desired length of the codewords is not a size of any finite field ; we can choose a slightly larger field and use only part of its elements .",
    "now we embed these codes in a family of substitution rules .",
    "first , let @xmath255 be a finite field ( the size of which is specified below ) and let @xmath205 be equal to @xmath256 ; let us agree that we use letters @xmath257 only in the @xmath34-position of an @xmath258-image .",
    "this trivially implies requirement ( a ) .",
    "then , we construct a code that encodes each @xmath259-letter @xmath260 by a string of length @xmath261 made of @xmath255-letters ( arranged in a square ) ; adding the coordinates , we get the @xmath258-image of @xmath260 .",
    "thus , we need a sequence of codes : @xmath262 to satisfy requirement ( b ) , we need a code with the hamming distance ( between every two codewords ) at least @xmath263 . the reed ",
    "solomon code works well here .",
    "the size of the field can be equal to the length of the codeword , i.e. , @xmath261 .",
    "let us decide that @xmath158 is a power of @xmath49 and the size of the field @xmath255 is exactly @xmath261 .",
    "( there are fields of size @xmath264 for every @xmath265 ; we could also use @xmath266 for prime @xmath53 of an appropriate size . ) to achieve the required code distance , we use polynomials of degree less than @xmath267 .",
    "the number of codewords ( polynomials of degree less than @xmath267 ) is at least @xmath268 ( even if we use only polynomials with coefficients @xmath14 and @xmath13 ) .",
    "this is enough if @xmath269 recalling that @xmath270 and that @xmath271 is a field of size @xmath272 , we get the inequality @xmath273 now let @xmath274 for some constant @xmath275 ; we see that for large enough @xmath275 this inequality is satisfied for @xmath223 with sum less than @xmath276 ( or any other constant ) , since the left - hand side is linear in @xmath17 while the right - hand side is exponential .",
    "now it remains to implement all this scheme using tiling rules .",
    "as we have discussed , the zoom factor @xmath274 is acceptable for the construction .",
    "this factor leaves enough space to keep on the tape two substitution letters ( for the tile itself and its father tile ) , since these letters require linear size ( in @xmath17 ) .",
    "moreover , we have enough time to perform the computations in the finite fields needed to construct the error - correction code mappings .",
    "indeed , in a @xmath17-level macro - tile we are allowed to use exponential ( in the bit size of the field element ) time .",
    "recall that one can operate with elements in the field of size @xmath277 using polynomial ( in @xmath278 ) time ; to this end , we need to construct some irreducible polynomial @xmath53 of degree @xmath278 over the field of two elements and then perform arithmetic operations ( on polynomials ) modulo @xmath53 .",
    "all these operations can be done by deterministic algorithms in polynomial time ( see , e.g. , @xcite ) .",
    "thus , we can reuse here the construction of the proof of theorem  [ substitution - tiling ] .",
    "the construction above works with every constant @xmath279 instead of @xmath203 .",
    "so , we get a stronger version of theorem  [ aperiodic ] :    [ aperiodic - strong ] for every @xmath279 there exists a tile set @xmath3 such that @xmath3-tilings exist and every @xmath3-tiling is @xmath99-aperiodic .",
    "* remark*. we can also get an @xmath99-aperiodic tile set ( for every @xmath279 ) as a corollary of the result of the next section ; indeed , we construct there a tile set such that any tiling embeds a horizontal sequence with high - complexity substrings , and such a sequence can not match itself well after a shift ( in fact , to get @xmath99-aperiodicity we would need to replace a binary alphabet by a larger finite alphabet in this argument ) .",
    "we can superimpose this with a similar @xmath280-rotated construction ; then , any nonzero translation will shift either a vertical or a horizontal sequence and therefore change most of the positions .",
    "note that in this way we can also get a tile set that is @xmath99-far from every periodic pattern ( a slightly different approach to defining `` strong aperiodicity '' ) .",
    "however , the arguments used in section  [ complex ] are more complicated than the proof of this section .",
    "so we preferred to present here a simpler and more direct proof of theorem  [ aperiodic - strong ] .",
    "in this section we provide a new proof of the following result from  @xcite :    [ thm : complex ] there exist a tile set @xmath3 and constants @xmath281 and @xmath282 such that @xmath3-tilings exist and in every @xmath3-tiling @xmath38 every @xmath23 square has kolmogorov complexity at least @xmath283",
    ".    here kolmogorov complexity of a tiled square is the length of the shortest program that describes this square .",
    "we assume that programs are bit strings . formally speaking",
    ", kolmogorov complexity of an object depends on the choice of programming language .",
    "( consult  @xcite for the definition and properties of kolmogorov complexity .",
    ") however , in our case the choice of programming language does not matter , and you may think of kolmogorov complexity of an object as the length of the shortest program in your favorite programming language that prints out this object . we need to keep in mind only two important properties of kolmogorov complexity . first , the kolmogorov complexity function is not computable , but it is _",
    "upper semicomputable_. this means that there is an algorithm that for a given @xmath19 enumerates all objects that have complexity less than @xmath19 .",
    "the enumeration can be done by a brute force search over all short descriptions .",
    "we can not say in advance which programs stop with some output and which do not , but we can run all programs of length less than @xmath19 in parallel , and enumerate the list of their outputs , as some programs terminate .",
    "second , any computable transformation ( e.g. , the change of encoding ) changes kolmogorov complexity at most by @xmath284 .",
    "we refer to  @xcite for a discussion of theorem  [ thm : complex ] ( why it is optimal , why the exact value of @xmath285 does not matter , etc . ) and other related results .",
    "we start the proof in the same way as in  @xcite : we assume that each tile keeps a bit that propagates ( unchanged ) in the vertical direction .",
    "then , any tiling contains a biinfinite sequence of bits @xmath286 ( where @xmath287 ) .",
    "any @xmath23 square contains an @xmath25-bit substring of this string , so if ( for large enough @xmath25 ) every @xmath25-bit substring of @xmath288 has complexity at least @xmath289 for some fixed @xmath285 , we are done .",
    "we say that a sequence @xmath288 has _",
    "levin s property _ if every @xmath25-bit substring @xmath100 of @xmath288 has complexity @xmath60 .",
    "such a biinfinite sequence indeed exists ( see  @xcite ; another proof can be obtained by using the lovasz local lemma ; see  @xcite ) .",
    "so our goal is to formulate tiling rules in such a way that a correct tiling `` ensures '' that the biinfinite sequence embedded in it indeed has this property .",
    "the set of all `` forbidden '' binary strings , i.e. , strings @xmath100 such that @xmath290 ( where @xmath291 denotes the kolmogorov complexity of @xmath100 , and @xmath292 denotes the length of  @xmath100 ) is enumerable : there is an algorithm that generates the list of all forbidden substrings .",
    "it would be nice to embed into the tiling a computation that runs this algorithm and compares its output strings with the substrings of @xmath288 ; such a computation blows up ( creates a tiling error ) if a forbidden substring is found .",
    "however , there are several difficulties .    *",
    "our self - similar tiling contains only finite computations . the higher is rank @xmath17 , the bigger are the @xmath17-level macro - tiles , and the longer computations they can contain . but at any level the computation remain finite .",
    "this is a problem since for a given string @xmath100 we do not know _ a priori _ how much time the shortest program for @xmath100 uses , so we never can be sure that the kolmogorov complexity of @xmath100 is large .",
    "hence , each substring of @xmath288 should be examined in computations somehow distributed over infinitely many macro - tiles . * the computation at some level deals with bits encoded in the cells of that level , i.e. , written on the computation tape .",
    "so the computation can not access the bits of the sequence ( that are `` deep in the subconscious '' ) directly and some mechanism to dig them out is needed .",
    "let us explain how to overcome these difficulties .      a macro - tile of level @xmath17 is a square whose side is @xmath293 , so there are @xmath294 bits of the sequence that intersect this macro - tile .",
    "let us delegate each of these bits to one of the macro - tiles of level @xmath17 it intersects .",
    "( we do it for every @xmath17 . )",
    "note that the macro - tile of the next level is made of @xmath218 macro - tiles of level @xmath17 .",
    "we assume that @xmath158 is much bigger than @xmath294 ( see the end of this subsection for more details on the choice of @xmath158 ) ; this guarantees that there are enough macro - tiles of level @xmath17 ( in the next level macro - tile ) to serve all bits that intersect them .",
    "let us decide that the @xmath117th ( from bottom to top ) macro - tile of level @xmath17 in a @xmath295-level macro - tile serves ( consciously knows , so to say ) the @xmath117th bit ( from the left ) in its zone ( see fig .",
    "[ fpt.8.mps ] ) . since @xmath296",
    ", we have many more macro - tiles of level @xmath17 ( inside some macro - tile of level @xmath297 ) than needed to serve all bits .",
    "so some @xmath17-level macro - tiles remain unused .",
    "@xmath47{delegation.mps}\\ ] ]    thus , each bit ( each vertical line ) has a representative on every level  a macro - tile that consciously knows this bit .",
    "however , we need some mechanisms that guarantee that this information is indeed true ( i.e. , consistent on different levels ) . on the bottom level",
    "this is easy to achieve , since the bits are available directly .    to guarantee the consistency we use the same trick as in section  [ substitution ] : at each level a macro - tile keeps not only its own bit but also its father s bit , and makes necessary consistency checks .",
    "namely , each macro - tile knows ( has on its computation tape ) :    * the bit delegated to this macro - tile ; * the coordinates of this macro - tile in its father macro - tile ( which are already used in the fixed - point construction ) ; note that the @xmath298-coordinate is at the same time the position of the bit delegated to this macro - tile ( relative to the left boundary of the macro - tile ) ; * the bit delegated to the father of this macro - tile ; and * the coordinates of the father macro - tile in the grandfather macro - tile .",
    "this information is subject to consistency checks :    * the information about the father macro - tile should coincide with the same information in the neighbor tiles ( unless they have a different father , i.e. , one of the coordinates is zero ) . * if the bit delegated to the father macro - tile is from the same vertical column as the bit delegated for this macro - tile , these two bits should match . *",
    "if the macro - tile occupies a place in its father macro - tile where the bit delegated to the father or some bits of the father s coordinates ( inside the grandfather macro - tile ) are kept , then this partial information on the father level should be should be consistent with the information about father coordinates and bit .",
    "these tests guarantee that the information about the father is the same in all brothers , and some of these brothers ( which are located on the father tape ) can check it against actual father information ; at the same time some other brother ( that has the same delegated bit as the father ) checks the consistency of the delegated bits information .",
    "note that this scheme requires that not only @xmath299 but also @xmath300 is much less than @xmath157 .",
    "this requirement , together with the inequality @xmath301 ( discussed earlier ) , is satisfied if @xmath302 , where @xmath303 is a large enough constant ( which is needed also to make macro - tiles of the first level large enough ) and @xmath304 ( so @xmath305 ) .",
    "later , in section  [ robust - complex ] , the choice of @xmath275 has to be reconsidered : we need @xmath306 to achieve error correction , but for our current purposes this does not matter .",
    "we explained how macro - tile of any level can have true information about one bit ( delegated to it ) .",
    "however , we need to check not bits but substrings ( and artificially introduce a tiling error if a forbidden string appears ) .",
    "note that it is acceptable to test only very short substrings compared to the macro - tile size ( @xmath158 ) .",
    "if this test is done on all levels , this restriction does not prevent us from detecting any violation .",
    "( recall that short forbidden substrings can appear very late in the generation process , so we need computation at arbitrary high levels for this reason , too . )",
    "so we need to provide more information to macro - tiles .",
    "this can be done in the following way .",
    "let us require that a macro - tile contains not one bit but _ a group of bits to check _ : a group of bits that starts at the delegated bit and has length depending on the level @xmath17 ( and growing very slowly with @xmath17 ; e.g. , @xmath307 is slow enough ) . if this group is not completely inside a macro - tile ( i.e. , it extends out of the region occupied by the macro - tile ) , we ignore the outstanding part .",
    "similarly , a macro - tile should have this information for the father macro - tile ( even if the bits are outside its own region ) .",
    "this information about the father macro - tile should be the same for brothers ( which is checked by matching macro - colors of neighboring brothers ) .",
    "also each macro - tile checks ( on its computational zone ) that the value of its own _ delegated bit _ is coherent with its father s string of _ bits to check _ : a macro - tile knows its coordinate in the father macro - tile and the coordinates of the father tile in the grandfather , so it knows whether its delegated bit makes a part of the father s bits to check .    the computation in the computation zone generates the list of all forbidden strings ( strings that have too small kolmogorov complexity ) and checks the generated forbidden strings against all the substrings of the group of bits available to this macro - tile .",
    "this process is bounded in time and space , but this does not matter since every string is considered on a high enough level .",
    "our construction has a kind of duplication : we first guarantee the consistency of information for individual bits , and then , we do the same for substrings .",
    "the first part of the construction is still needed , since we need arbitrarily long substrings to be checked by macro - tiles ( of high enough level ) ; thus delegation of substrings can not start from the ground level where the tile size is limited , so we need to deal with bits separately .",
    "the argument just explained still needs some correction .",
    "we claim that every forbidden string will be detected at some level where it is short enough compared to the level parameters . however , some strings may never become a part of one macro - tile .",
    "imagine that there is some vertical line that is a boundary between macro - tiles of all levels ( so we have bigger and bigger tiles on both sides , and this line is still the boundary between them ; see fig .",
    "[ degenerate.mps ] ) .",
    "then , a substring that crosses this line will never be checked and therefore we can not guarantee that it is not forbidden .",
    "there are several ways to get around this problem .",
    "one can decide that each macro - tile contains information not only about blocks inside its father macro - tile but in a wider region ( say , three times wider , including `` uncle '' macro - tiles ) ; this information should be checked for consistency between `` cousins '' , too .",
    "[ discussion - degenerated - case ] this trick ( extending zones of responsibility for macro - tiles ) will be used later in section  [ subshifts ] .    but",
    "to prove theorem  [ thm : complex ] a simpler solution is enough .",
    "note that even if a string on the boundary is never checked , its parts ( on both sides of the boundary ) are , so their complexity is proportional to their length .",
    "one of the parts has length at least half of the original length , so we still have a complexity bound , though the constant will be twice smaller .    this finishes the proof of theorem  [ thm : complex ] .",
    "the analysis of the proof in the previous section shows that it can be divided into two parts .",
    "we defined _ forbidden _ strings as bit strings that are sufficiently long and have complexity at most @xmath308 .",
    "we started by showing that biinfinite strings without forbidden factors ( substrings ) exist .",
    "then , we constructed a tile set that embeds such a biinfinite string in every tiling .    the second part can be separated from the first one , and in this way we get new proofs for some results of simpson  @xcite and hochman  @xcite about effectively closed subshifts .",
    "fix some alphabet @xmath61 .",
    "let @xmath309 be a set of @xmath61-strings .",
    "consider a set @xmath310 of all biinfinite @xmath61-sequences that have no factors ( substrings ) in @xmath309 .",
    "this set is a _ closed one - dimensional subshift _ over @xmath61 ,",
    "i.e. , a closed shift - invariant subset of the space of all biinfinite @xmath61-sequences .",
    "if the set @xmath309 is ( computably ) enumerable , @xmath310 is called an _ effectively closed one - dimensional subshift _ over @xmath61 . if @xmath309 is finite , @xmath310 is called a _ subshift of finite type_.    we can define two - dimensional subshifts in a similar way .",
    "more precisely , let @xmath309 be a set of two - dimensional patterns ( squares filled with @xmath61-letters ) .",
    "then , we can consider a set @xmath310 of all @xmath61-configurations (= mappings @xmath64 ) that do not contain any pattern from @xmath309 .",
    "this is a closed shift - invariant set of @xmath61-configurations (= two - dimensional closed subshift over @xmath61 ) .",
    "if @xmath309 is ( computably ) enumerable , @xmath310 is called _ a two - dimensional effectively closed subshift _ over @xmath61 . if @xmath309 is finite , @xmath310 is called _ a two - dimensional subshift of finite type_.    as we have mentioned , subshifts of finite type ( interpreted as local rules ) are closely related to tilings .",
    "each tile set determines a subshift where @xmath61 is the set of tiles and forbidden patterns are pairs of neighbor nonmatching tiles . going in the other direction , we should be more careful .",
    "a tile set in our definition can not contain two different tiles with exactly the same colors .",
    "this leads to some problems .",
    "for example , the full shift over a two - letter alphabet ( i.e. , the set of all biinfinite sequences over a two - letter alphabet ) can not be represented by a set of two tiles .",
    "however , any subshift of finite type can be represented by some tile set .",
    "more precisely , for any subshift @xmath27 of finite type over alphabet @xmath61 there is a tile set @xmath3 and some mapping @xmath311 such that @xmath172 induces a _ bijection _ between the set of all @xmath3-tilings and the set of all configurations of the subshift @xmath27 : we apply @xmath172 pointwise to a @xmath3-tiling and get some @xmath61-configuration from the subshift ; for each configuration in the subshift there exists exactly one @xmath3-tiling in the @xmath172-preimage of this configuration .",
    "such a tile set can be constructed as follows : tiles are squares of large enough size filled by @xmath61-letters ( a square with no patterns forbidden for this subshift ) ; each tile represents a part of the configuration , and side colors are used to ensure that neighbor tiles overlap correctly .",
    "the mapping extracts ( say ) the central letter from a square .",
    "thus , subshifts of finite type and tilings are essentially the same kind of objects . on the other hand ,",
    "the effectively closed subshifts of dimension make a more general class of objects than subshifts of finite type .",
    "e.g. , every nonempty one - dimensional subshift of finite type must contain a periodic configuration ; for one - dimensional effectively closed subshifts this is not the case .",
    "however , the following theorem shows that two - dimensional subshifts of finite type are powerful enough to simulate any effectively closed one - dimensional subshift in the following sense ( i.e. , to simulate an effectively closed subshift , we need a subshift of finite type of dimension higher by @xmath13 ) :    let @xmath61 be some alphabet and let @xmath27 be a one - dimensional effectively closed subshift over @xmath61 .",
    "then , there exist an alphabet @xmath167 , a mapping @xmath312 , and a two - dimensional subshift @xmath313 of finite type over @xmath167 such that @xmath278-images of configurations in @xmath313 are ( exactly ) elements of @xmath27 extended vertically ( vertically aligned cells contain the same @xmath61-letter ) .",
    "( as we have mentioned , this result was independently obtained by aubrun and sablik using robinson - style aperiodic tilings  @xcite . )",
    "the proof uses the same argument as in theorem  [ thm : complex ] .",
    "each cell now contains an @xmath61-letter that propagates vertically .",
    "computation zones in macro - tiles generate ( in available space and time ) elements of the enumerable set of forbidden @xmath61-substrings and compare them with @xmath61-substrings that are made available to them .",
    "it remains to note that tiling requirements ( matching colors ) are local ; that is , they define a finite type two - dimensional subshift .",
    "note that now the remark of section  [ last - correction ] ( the trick of extension of zones of responsibility for macro - tiles ) becomes crucial , since otherwise the image of a configuration from @xmath313 may be a concatenation of two sequences ( a left - infinite one and a right - infinite one ) ; neither sequence contains forbidden patterns but forbidden patterns may appear at the point of concatenation .",
    "a similar argument shows that every two - dimensional effectively closed subshift can be represented as an image of a three - dimensional subshift of finite type ( after a natural extension along the third dimension ) , any three - dimensional effectively closed subshift is an image of a four - dimensional subshift of finite type , etc .",
    "this result is an improvement of a similar one proved by hochman ( theorem 1.4 in  @xcite , where the dimension increases by @xmath49 ) , thus providing a solution of problem  9.1 from  @xcite .",
    "note also that it implies the result of  simpson  @xcite where one - dimensional sequences are embedded into two - dimensional tilings but in some weaker sense ( defined in terms of medvedev degrees ) .",
    "one can ask whether a dimension reduction is essential here . for example , is it true that every two - dimensional effectively closed subshift is an image of some two - dimensional subshift of finite type ?",
    "the answer to this question ( as well as related questions in higher dimensions ) is negative .",
    "this follows from an upper bound in  @xcite saying that every tile set ( unless it has no tilings at all ) has a tiling such that all @xmath11 squares in it have complexity @xmath20 ( a result that immediately translates for subshifts of finite type ) and a result from  @xcite that shows that some nonempty effectively closed two - dimensional subshift has @xmath11 squares of complexity @xmath314 .",
    "therefore the latter can not be an image of the first one ( complexity can only decrease when we apply an alphabet mapping ) .",
    "in what follows we discuss tilings with faults .",
    "this means that there are some places ( faults ) where colors of neighbor tiles do not match .",
    "we are interested in `` robust '' tile sets : those that maintain some structure ( for example , can be converted into an error - free tiling by changing a small fraction of tiles ) if faults are sparse .",
    "there are two almost equivalent ways to define faulty tilings .",
    "we can speak about _ errors _ ( places where two neighbor tiles do not match ) or _ holes _ ( places without tiles ) . indeed",
    ", we can convert a tiling error into a hole ( by deleting one of two nonmatching tiles ) or convert a one - tile hole ( one missing tile ) into a small number of errors ( at most @xmath58 ) by placing an arbitrary tile there .",
    "holes look more natural if we start with a set of holes and then try to tile the rest ; however , if we imagine some process similar to crystallization when a tiling tries to become correct by some trial - and - error procedure , it is more natural to consider tiling errors .",
    "since it makes little difference from the mathematical point of view , we use both metaphors .",
    "we use a hierarchical approach to hole patching that can be traced back to  gcs , who used it in a much more complicated situation  @xcite .",
    "this means that first we try to patch small holes that are not too close to each other ( by changing small neighborhoods around them ) .",
    "this ( if we are lucky enough ) makes larger ( and still unpatched ) holes more isolated since there are fewer small holes around .",
    "some of these larger holes ( which are not too large and not too close to each other ) can be patched again .",
    "then , the same procedure can be repeated again for the next level .",
    "of course , we need some conditions ( that guarantee that holes are not too dense ) to make this procedure successful . these conditions are described later in full detail , but the important question is the following : how do we ensure that these conditions are reasonable ( i.e. , general enough ) ?",
    "our answer is as follows : we prove that if holes are generated at random ( with each position becoming a hole independently of other positions with small enough probability @xmath191 ) , then the generated set satisfies these conditions with probability  @xmath13 .    from the physics viewpoint , this argument sounds rather weak .",
    "if we imagine some crystallization process , errors in different positions are not independent at all . however",
    ", this approach could be a first approximation until a more adequate one is found .",
    "note that patching holes in a tiling could be considered as a generalization of percolation theory .",
    "indeed , let us consider a simple tile set made of two tiles : one with all black sides and the other with all white sides .",
    "then , the tiling conditions reduce to the following simple condition : each connected component of the complement to the set of holes is either completely black or completely white . we want to make small corrections in the tiling that patch the holes ( and therefore make the entire plane black or white ) .",
    "this means that initially either we have small black `` islands '' in a white ocean or vice versa , which is exactly what percolation theory says ( it guarantees that if holes are generated at random independently with small probability , the rest consists of one large connected component and many small islands . )",
    "this example shows also that simple conditions such as low density ( in the besicovitch sense ) of the hole set are not enough .",
    "a regular grid of thin lines can have low density but still splits the plane into nonconnected squares ; if half of these squares are black and the others are white , no small correction can patch the holes .",
    "one can define an appropriate notion of a sparse set in the framework of algorithmic randomness ( martin - lf definition of randomness ) by considering individual random sets ( with respect to the bernoulli distribution @xmath315 ) and their subsets as `` sparse . ''",
    "then , we can prove that any sparse set ( in this sense ) satisfies the conditions that are needed to make the iterative patching procedure work .",
    "this algorithmic notion of `` sparseness '' is discussed in  @xcite . however , in the current paper we do not assume that the reader is familiar with algorithmic randomness and restrict ourselves to classical probability theory .",
    "so our statements become quite lengthy and use probabilistic quantifiers `` for almost all '' (= with probability @xmath13 ) .",
    "the order of quantifiers ( existential , universal , and probabilistic ) is important here .",
    "for example , the statement `` a tile set @xmath3 is robust '' means that _ there exists _ some  @xmath182 such that _ for almost all  @xmath172 _ ( with probability  @xmath13 with respect to the distribution where each point independently belongs to @xmath172 with probability @xmath191 ) the following is true : _ for every _",
    "@xmath316-tiling @xmath5 _ there exists _ a @xmath3-tiling @xmath317 ( of the entire plane ) that is `` close '' to @xmath5 . here by @xmath316-tiling we mean a tiling of @xmath318 ( where existing pairs of neighbor tiles match ) .      in this section",
    "we develop the notion of `` sparsity '' based on the iterative grouping of errors ( or holes ) and prove its properties .",
    "let @xmath319 be a set of points ; points in @xmath172 are called _ dirty _ ; other points are _",
    "clean_. let @xmath320 be integers .",
    "a nonempty set @xmath321 is an _",
    "@xmath322-island _ in  @xmath172 if    ( 1 )  the diameter of @xmath66 does not exceed  @xmath99 and    ( 2 )  in the @xmath323-neighborhood of @xmath66 there is no other point from @xmath172 .    ( the diameter of a set is a maximal distance between its elements ; the distance @xmath247 is defined as @xmath324 , i.e. , the maximum of distances along both coordinates ; the @xmath323-neighborhood of @xmath66 is a set of all points @xmath298 such that @xmath325 for some @xmath326 . )",
    "it is easy to see that two ( different ) islands are disjoint ( and the distance between their points is greater than @xmath323 ) .",
    "let @xmath327 be a sequence of pairs of integers and @xmath328 for all @xmath117 .",
    "consider the following iterative `` cleaning '' procedure . at the first step we find all @xmath329-islands ( _ rank  1 islands _ ) and remove all their elements from @xmath172 ( thus getting a smaller set @xmath330 ) .",
    "then , we find all @xmath331-islands in  @xmath330 ( _ rank 2 islands _ ) ; removing them , we get @xmath332 , etc .",
    "the cleaning process is _ successful _ if every dirty point is removed at some stage .    at the @xmath117th step we also keep track of the @xmath333-neighborhoods of islands deleted during this step .",
    "a point @xmath8 is _ affected _ during the @xmath117th step if @xmath100 belongs to one of these neighborhoods .",
    "the set @xmath172 is called _ sparse _ ( for a given sequence @xmath334 ) if the cleaning process is successful , and , moreover , every point @xmath8 is affected at finitely many steps only ( i.e. , @xmath100 is far from islands of sufficiently large ranks ) .",
    "the values of @xmath335 and @xmath333 should be chosen in such a way that for sufficiently small @xmath182 a @xmath315-random set is sparse with probability  @xmath13 .",
    "( as we have said , this justifies that our notion of sparsity is not unreasonably restrictive . )",
    "the sufficient conditions are provided by the following statement :    [ lemma1 ] assume that @xmath336 then , for all sufficiently small @xmath182 a @xmath315-random set is sparse with probability  @xmath13 .",
    "let us estimate the probability of the event `` @xmath100 is not cleaned after @xmath19 steps '' for a given point @xmath100 ( the probability of this event does not depend on @xmath100 ) .",
    "if @xmath337 , then @xmath100 belongs to @xmath338 and is not cleaned during the @xmath19th step ( when @xmath339-islands in @xmath338 are removed ; by definition we let @xmath340 ) . then , @xmath341 and , moreover , there exists some other point @xmath342 such that @xmath343 is greater than @xmath344 but not greater than @xmath345 ( note that @xmath346 )",
    "indeed , if there were no such @xmath347 in @xmath338 , then the @xmath348-neighborhood of @xmath100 in @xmath338 would be an @xmath339-island in @xmath338 and @xmath100 would be removed .",
    "further , we apply the same argument on level @xmath349 .",
    "each of the points @xmath347 and @xmath100 ( we use notation @xmath350 for @xmath100 , to make the notation more uniform ) belongs to @xmath338 ; therefore it belongs to @xmath351 together with some other point ( at a distance greater than @xmath352 but not exceeding @xmath353 ) .",
    "denote these two other points in @xmath351 by @xmath354 ( which exists because @xmath355 ) and @xmath356 ( which exists because @xmath342 ) respectively .",
    "thus , we have at least four points denoted by @xmath357 , @xmath354 , @xmath358 , and @xmath356 in @xmath351 . then , we repeat the same argument for levels @xmath359 etc . in this way",
    "we get a tree ( fig .",
    "[ fpte7.mps ] ) that `` explains '' why @xmath100 belongs to @xmath360 .",
    "the distance between @xmath350 and @xmath347 in this tree is at least @xmath344 whereas the diameter of the subtrees starting at @xmath350 and @xmath347 does not exceed @xmath361 therefore , the lemma s assumption guarantees that these subtrees can not intersect .",
    "since it is true on all levels , all the leaves of the tree are different .",
    "note that all @xmath362 leaves of the tree belong to @xmath363 . as every point appears in @xmath172",
    "independently of other points , each `` explanation tree '' is valid with probability @xmath364 .",
    "it remains to estimate the number of possible explanation trees for a given point  @xmath100 .",
    "to specify @xmath347 we need to specify the difference ( vertical and horizontal distances ) between @xmath350 and @xmath347 .",
    "neither distance exceeds @xmath365 ; therefore we need about @xmath366 bits to specify them ( including the sign bits ) .",
    "then , we need to specify the difference between @xmath367 and @xmath354 as well as the difference between @xmath368 and @xmath356 ; this requires at most @xmath369 bits . to specify the entire tree we therefore need @xmath370 bits . reversing the sum and taking out the factor @xmath362",
    ", we can rewrite this expression as @xmath371 since the series @xmath372 converges by assumption , the total number of explanation trees for a given point ( and given @xmath19 ) does not exceed @xmath373 , so the probability for a given point @xmath100 to be in @xmath360 for a @xmath315-random @xmath172 does not exceed @xmath374 which tends to @xmath14 ( even super - exponentially fast ) as  @xmath375 , assuming that @xmath191 is small enough .",
    "we conclude that the event `` @xmath100 is not cleaned '' ( for a given point @xmath100 ) has zero probability ; the countable additivity guarantees that with probability @xmath13 all points in @xmath16 are cleaned .",
    "it remains to show that every point with probability @xmath13 is affected at finitely many steps only .",
    "indeed , if @xmath100 is affected at step @xmath19 , then some point in its @xmath376-neighborhood belongs to @xmath360 , and the probability of this event is at most @xmath377 the convergence conditions guarantees that @xmath378 , so the first term is negligible compared to the others , the probability series converges ( for small enough  @xmath191 ) and the borel ",
    "cantelli lemma gives the desired result .    for our next step",
    ", we note that by definition a sparse set is split into a union of islands of different ranks .",
    "now we prove that these islands together occupy only a small part of the plane . to formalize this statement ,",
    "we use the notion of besicovitch size ( density ) of a set @xmath379 .",
    "let us recall the definition .",
    "fix some point @xmath21 of the plane and consider squares of increasing size centered at  @xmath21 . for",
    "each square consider the fraction of points in this square that belong to @xmath172 .",
    "the @xmath380 of these frequencies is called the _ besicovitch density _ of @xmath172 .",
    "( note that the choice of the center point  @xmath21 does not matter , since for any two points @xmath381 and @xmath382 large squares of the same size centered at @xmath381 and @xmath382 share most of their points . )    by definition the distance between two rank @xmath17 islands is at least @xmath383 .",
    "therefore the @xmath384-neighborhoods of these islands are disjoint .",
    "each of the islands contains at most @xmath385 points ( it can be placed in a rectangle that has sides at most @xmath386 ) .",
    "each neighborhood has at least @xmath387 points ( since it contains a @xmath388 square centered at any point of the island ) .",
    "therefore the union of all rank @xmath17 islands has besicovitch density at most @xmath389",
    ". indeed , for a large square the islands near its border can be ignored , and all other islands are surrounded by disjoint neighborhoods where their density is bounded by @xmath389 , see fig .",
    "[ fig-8 ] .",
    "islands form a set of low density .",
    "( in this picture each island is shown as a rectangle , which is not always the case . ) ]    one would like to conclude that the overall density of all islands ( of all ranks ) does not exceed @xmath390 . however , the besicovitch density is in general not countably semiadditive ( for example , the union of finite sets having density @xmath14 may have density @xmath13 ) , but in our case we are helped by the second requirement of the definition of a sparse set ( each point is covered by only finitely many neighborhoods of islands ) .",
    "[ lemma2 ] let @xmath172 be a sparse set for a given family of @xmath386 and @xmath383 . then",
    ", the besicovitch density of @xmath172 is @xmath391 .",
    "let @xmath21 be a center point used in the definition of besicovitch density . by definition of sparsity , this point is not covered by @xmath383-neighborhoods of rank @xmath17 islands if @xmath17 is greater than some @xmath392 .",
    "now we split the set @xmath172 into two parts : one ( @xmath393 ) formed by islands of rank at most @xmath392 and the other ( @xmath394 ) formed by all islands of bigger ranks .",
    "as we have just seen , in a large square the share of @xmath393 is bounded by @xmath395 up to negligible ( as the size goes to infinity ) boundary effects ( where we consider each @xmath396 separately and then sum over all @xmath396 ) . a similar",
    "bound is valid for rank @xmath17 islands with @xmath397 , though the argument is different and a constant factor appears .",
    "indeed , the @xmath383-neighborhood of every island @xmath398 does not contain the center point @xmath21 .",
    "therefore , any square @xmath27 centered at @xmath21 that intersects the island also contains a significant part of its @xmath384-neighborhood @xmath25 : the intersection of @xmath25 and @xmath27 contains at least @xmath399 elements , see fig .",
    "[ fig-9 ] .",
    "therefore , the share of @xmath394 in @xmath27 is bounded by @xmath400 .",
    "island , every square @xmath27 contains at least @xmath399 points of its @xmath384-neighborhood . ]    * remark*. it is easy to choose @xmath386 and @xmath383 satisfying the conditions of lemma  [ lemma1 ] and having arbitrarily small @xmath401 ( by taking geometric sequences that grow fast enough ) .",
    "therefore we get the following well - known result as a corollary of lemmas  [ lemma1 ] and  [ lemma2 ] : for every @xmath97 there exists @xmath182 such that with probability @xmath13 a @xmath315-random set has besicovitch density less than @xmath99 .",
    "( in fact , a much stronger result is well known : by the strong law of large numbers a @xmath315-random set has besicovitch density @xmath191 with probability  @xmath13 . )    in fact we will need a slightly more complicated version of lemma  [ lemma2 ] .",
    "we are interested not only in the besicovitch density of a sparse set @xmath172 but also in the besicovitch density of a larger set : the union of @xmath402-neighborhoods of rank @xmath17 islands in @xmath172 . here",
    "@xmath402 are some parameters ; in most applications we set @xmath403 for some constant @xmath275 .",
    "the same argument gives the bound @xmath404 .",
    "assuming that @xmath405 , we can rewrite this bound as @xmath406 .",
    "so we arrive at the following statement :    [ lemma2a ] let @xmath172 be a sparse set for a given family of @xmath386 and @xmath383 and let @xmath407 be some integers .",
    "then , the union of @xmath402-neighborhoods of level @xmath17 islands ( over all @xmath17 and all islands ) has besicovitch density @xmath408 .",
    "let us show how some basic results of percolation theory can be proved using the island technique .",
    "for some @xmath386 and @xmath383 satisfying the requirements of lemma  [ lemma1 ] the complement of any sparse set @xmath172 contains exactly one infinite connected component @xmath0 ; the complement of @xmath0 has besicovitch density @xmath409 .",
    "let @xmath410 .",
    "( the choice of @xmath386 and @xmath383 will be discussed later . ) for every @xmath17 and for every rank @xmath17 island fix a point in this island and consider the @xmath402-neighborhood of this point .",
    "it is a square containing the entire island plus an additional `` security zone '' of width @xmath386 , contained in the @xmath402-neighborhood of the island , see fig .",
    "[ fig-10 ] .",
    "island , its @xmath402-neighborhood , and the security zone of width @xmath386 . ]",
    "it is enough to prove the following three statements :    * _ the union @xmath5 of all these squares ( for all ranks ) contains the set  @xmath172 and has besicovitch density @xmath411 .",
    "_ * _ the complement of @xmath5 is connected_. * _ there are no other infinite connected component in the complements of @xmath172_.    the first statement is a direct corollary of lemma  [ lemma2a ] above .    to prove the second statement , consider two points @xmath100 and @xmath298 outside @xmath5 .",
    "we need to prove that @xmath100 and @xmath298 can be connected by a path that is entirely outside @xmath5 .",
    "let us connect @xmath100 and @xmath298 by some path ( say , one of the shortest paths ) and then push this path out of @xmath5 .",
    "consider squares of maximal rank that intersect this path .",
    "for each of them , consider the first moment when the path gets into the square and the last moment when the path goes out , and connect these two points by a path outside the square , see fig .",
    "[ fig-11 ] .",
    "now the new path is @xmath386-separated from this island of rank @xmath17 .",
    "provided @xmath412 , the path after the correction is @xmath386-separated from all other islands of rank greater than @xmath160 .",
    "indeed , the `` modified '' part of the corrected path ( the points of the path involved into the correction procedure ) remains at a distance of at most @xmath402 from the given @xmath17 level island ; hence , it must remain at a distance at least @xmath386 from all other islands of rank @xmath17 and higher .",
    "note also that the shift ( the distance between the original path and the corrected one ) does not exceed @xmath413 .",
    "then , we can do the same for islands of rank @xmath160 ( pushing the path out of surrounding squares ) .",
    "note that since at each step the drift is bounded by @xmath414 , we will not bump into islands of rank @xmath17 .    repeating this process for decreasing @xmath17",
    ", we finally get a path that connects @xmath100 and @xmath298 and goes entirely outside @xmath5 . for this",
    "we need only the total drift on the smaller levels ( which is bounded by @xmath415 ) to be less than @xmath386 .",
    "this is easy to achieve if @xmath386 , @xmath383 , and @xmath402 are suitable geometric sequences .",
    "it remains to show that every infinite connected set intersects the complement of @xmath5 . to show this ,",
    "let us take a big circular path centered at the origin and then push it out of @xmath5 as described above .",
    "since the center is outside the @xmath383-neighborhoods of islands for large enough @xmath17 , we may assume that the sizes of islands that intersect this circle are small compared to its radius ( say , less than @xmath416 of it , which can be guaranteed if the geometric sequences @xmath386 , @xmath383 , and @xmath402 grow fast enough ) .",
    "then , after the change the circle will still encircle a large neighborhood of the origin , so any infinite connected component should cross such a circle .      in the proof of our main result ( section  [ robust - complex ] )",
    "we need a more delicate version of the definition of islands .",
    "in fact we need such a definition that some counterpart of lemma  [ lemma1 ] could be applied even if the sequence @xmath417 grows much faster than @xmath362 ( e.g. , for @xmath418 ) . in this section",
    "we define bi - islands ( a generalization of the notion of islands from section  [ islands ] ) and prove bi - island versions of lemmas  [ lemma1 ] ,  [ lemma2 ] , and  [ lemma2a ] .",
    "the reader can safely skip this section for now and return here before reading section  [ robust - complex ] .",
    "let @xmath319 be a set of points .",
    "as in section  [ islands ] , we call points in @xmath172 _ dirty _ , and the other points _ clean_. let @xmath320 be integers . a nonempty set @xmath321 is an _ @xmath322-bi - island _ in  @xmath172 if @xmath66 can be represented as the union of some sets @xmath419 , @xmath420 such that    ( 1 )  in the @xmath323-neighborhood of @xmath421 there are no points from @xmath422 ;    ( 2 )  the diameters of @xmath419 and @xmath420 do not exceed  @xmath99 ; and    ( 3 )  the distance between @xmath419 and @xmath420 does not exceed  @xmath323 .",
    "( see fig .",
    "[ biisland ] . )        in particular , an @xmath322-island is a special case of an @xmath322-bi - island ( by letting @xmath420 be empty ) .",
    "note that one may split the same bi - island into @xmath419 and @xmath420 in different ways .",
    "obviously , every two different bi - islands are disjoint . moreover , the distance between them is greater than @xmath323 .",
    "the diameter of a bi - island is at most @xmath423 .",
    "let @xmath327 be a sequence of pairs of integers and @xmath328 for all @xmath117 .",
    "we define an iterative cleaning procedure for bi - islands . at the first step we find all @xmath329-bi - islands and remove all their elements from @xmath172 ( getting a smaller set @xmath330 ) .",
    "then , we find in @xmath330 all @xmath331-bi - islands ; removing them , we get @xmath332 , etc . the cleaning process is _ successful _ if every dirty point is removed at some stage .",
    "similarly to the case of islands , we say that a point @xmath8 is _ affected _ during step @xmath117 if @xmath100 belongs to the @xmath333-neighborhood of one of the bi - islands of rank @xmath117 .",
    "the set @xmath172 is called _ bi - sparse _ ( for a given sequence @xmath334 ) if the cleaning process defined above is successful , and , moreover , every point @xmath8 is affected at finitely many steps only ( which means that @xmath100 is far from bi - islands of sufficiently large ranks ) .",
    "we choose the values of @xmath335 and @xmath333 in such a way that for sufficiently small @xmath182 a @xmath315-random set is bi - sparse with probability  @xmath13 .",
    "the main achievement here is that the convergence condition is now weaker than in the corresponding statement for islands ( lemma  [ lemma1 ] ) :    [ lemma - bi - island ] assume that @xmath424 then , for all sufficiently small @xmath182 , a @xmath315-random set is bi - sparse with probability  @xmath13 .",
    "the proof of lemma  [ lemma - bi - island ] is very similar to the proof of lemma  [ lemma1 ] . at first",
    "we estimate the probability of the event `` @xmath100 is not cleaned after @xmath19 steps '' for a given point @xmath100 . if @xmath337 , then @xmath100 belongs to @xmath338 and is not cleaned during the @xmath19th step ( when @xmath339-bi - islands in @xmath338 are removed ) .",
    "then , @xmath341 .",
    "moreover , we show that there exist _ two other _ points @xmath425 such that the three distances @xmath343 , @xmath426 , and @xmath427 are all greater than @xmath344 but not greater than @xmath428 .",
    "let @xmath419 be the @xmath348-neighborhood of @xmath100 in @xmath172 .",
    "if @xmath419 were an island , it would be removed . since this",
    "does not occur , there is a point @xmath347 outside @xmath419 but in the @xmath376-neighborhood of @xmath419 .",
    "let @xmath420 be the @xmath348-neighborhood of @xmath347 in @xmath172 . again",
    "@xmath419 and @xmath420 do not form a bi - island . both sets @xmath419 and @xmath420 have diameter at most @xmath429 , and the distance between them is at most @xmath376 .",
    "so the only reason why they are not a bi - island is that there exists a point @xmath430 outside @xmath431 but in the @xmath376-neighborhood of it .",
    "the points @xmath347 and @xmath432 have the required properties ( the distances @xmath343 , @xmath426 , and @xmath427 are greater than @xmath344 but not greater than @xmath433 ) .    to make the notation uniform",
    ", we denote @xmath100 by @xmath350 .",
    "each of the points @xmath434 belongs to @xmath338 .",
    "this means that each of them belongs to @xmath351 together with a pair of other points ( at a distance greater than @xmath352 but not exceeding @xmath435 ) . in this way",
    "we get a ternary tree that `` explains '' why @xmath100 belongs to @xmath360 .",
    "the distance between every two points among @xmath350 , @xmath347 , and @xmath432 in this tree is at least @xmath344 whereas the diameters of the subtrees starting at @xmath350 , @xmath347 , and @xmath432 do not exceed @xmath436 thus , the lemma s assumption guarantees that these subtrees can not intersect and that all the leaves of the tree are different .",
    "the number of leaves in this ternary tree is @xmath437 , and they all belong to @xmath363 .",
    "every point appears in @xmath172 independently of other points ; hence , one such `` explanation tree '' is valid with probability @xmath438 .",
    "it remains to count the number of all explanation trees for a given point  @xmath100 .    to specify @xmath347 and @xmath432",
    "we need to specify horizontal and vertical distances between @xmath350 and @xmath439 .",
    "these distances do not exceed @xmath433 ; therefore we need about @xmath440 bits to specify them ( including the sign bits ) .",
    "then , we need to specify the distances between @xmath367 and @xmath441 as well as the distances between @xmath368 and @xmath442 and between @xmath443 and @xmath444 .",
    "this requires at most @xmath445 bits . to specify the entire tree we therefore need @xmath446 which is equal to @xmath447 the series @xmath448 converges by assumption",
    "; so , the total number of explanation trees for a given point ( and given @xmath19 ) does not exceed @xmath449 . hence , the probability for a given point @xmath100 to be in @xmath360 for a @xmath315-random @xmath172 does not exceed @xmath450 which tends to @xmath14 as  @xmath375 ( assuming that @xmath191 is small enough ) .",
    "we conclude that the event `` @xmath100 is not cleaned '' ( for a given point @xmath100 ) has zero probability ; hence , with probability @xmath13 _ all _ points in @xmath16 are cleaned .",
    "it remains to show that every point with probability @xmath13 is affected by finitely many steps only .",
    "indeed , if @xmath100 is affected by step @xmath19 , then some point in its @xmath376-neighborhood belongs to @xmath360 , and the probability of this event is at most @xmath451 from the convergence conditions we have @xmath452 , so the first term is negligible compared to others .",
    "the probability series converges ( for small enough  @xmath191 ) and the borel ",
    "cantelli lemma gives the result .    by definition ,",
    "a bi - sparse set is split into a union of bi - islands of different ranks .",
    "such bi - islands occupy only a small part of the plane :    [ lemma - bi - island-2 ] let @xmath172 be a bi - sparse set for a given family of @xmath386 and @xmath383 . then , the besicovitch density of @xmath172 is @xmath391 .",
    "the proof of lemma  [ lemma - bi - island-2 ] repeats the proofs of lemma  [ lemma2 ] .",
    "recalling lemma  [ lemma2a ] , we may consider a sequence of numbers @xmath402 such that @xmath405 .",
    "then , the besicovitch density of the union of @xmath402-neighborhoods of rank @xmath17 bi - islands ( for all @xmath17 and for all islands ) is bounded by @xmath406 .    however , this statement is not enough for us . in section  [ robust - complex",
    "] we will need a kind of `` closure '' of the @xmath402-neighborhood of a bi - island :    let @xmath27 be a @xmath17-level bi - island .",
    "we say that @xmath453 belongs to the _ extended _ @xmath454-neighborhood of @xmath27 if there exist two points @xmath455 ( with the same first coordinate ) such that @xmath456 , @xmath457 , and @xmath458 ( see fig .  [ biisland - neighb ] ) .",
    "the meaning of the last definition is quite simple : we take not only the points that are close to @xmath27 but also those points that are placed somehow between the neighborhoods of @xmath459 and @xmath460 .    [ lemma - bi - island-3 ] let @xmath172 be a bi - sparse set for a given family of @xmath386 and @xmath383 satisfying the conditions of lemma  [ lemma - bi - island ] .",
    "let @xmath402 be a sequence of numbers such that @xmath461 , and the series @xmath462 converges .",
    "then , the besicovitch density of the union of extended @xmath402-neighborhoods of rank @xmath17 bi - islands in @xmath172 is bounded by @xmath463 .",
    "the arguments are similar to the proof of lemma  [ lemma2a ] .",
    "an extended @xmath402-neighborhood of a @xmath17-level island can be covered by a rectangle of width @xmath464 and height @xmath465 ; so its area is @xmath466 ( since @xmath467 ) .",
    "the distance between any two bi - islands of rank @xmath17 is at least @xmath383 .",
    "hence , the fraction of _ extended _ @xmath402-neighborhoods of islands is @xmath468 ( this is similar to the bound @xmath406 , which holds for simple @xmath469-neighborhoods ) .",
    "lemmas  [ lemma - bi - island][lemma - bi - island-3 ] will be used in section  [ robust - complex ] .",
    "( the arguments of sections  [ robust][strongly - robust ] do not refer to bi - islands . )",
    "these lemmas will be used for @xmath470 such that @xmath471 for @xmath472 , @xmath473 , and @xmath474 or @xmath475 . note that we can not apply lemmas  [ lemma1 ] and  [ lemma2 ] ( about _ islands _ ) for these parameters because @xmath476 grows faster than @xmath163 .",
    "so we need to deal with bi - islands .    in the definition of sparse sets in section  [ islands ] each single island of rank @xmath17",
    "must be isolated from other islands of rank @xmath17 . in this section",
    "we modified this definition and allowed an island to be close to at most one other island of the same rank . in a similar way",
    ", we could define @xmath65-islands for any @xmath477 , assuming that clusters of @xmath65 islands of rank @xmath17 ( rather close to each other ) are authorized .",
    "a set that can be represented as a union of @xmath65-islands of different ranks can be called @xmath65-sparse .",
    "a generalization of lemmas  [ lemma - bi - island ] can be proven : a random set is @xmath65-sparse with probability @xmath13 if @xmath478 converges .",
    "however , we do not develop here the general theory of @xmath65-sparse sets .",
    "the concept of bi - islands and bi - sparsity ( i.e. , the case @xmath479 ) is enough for all our applications in section  [ robust - complex ] .",
    "in this section we construct an aperiodic    @xmath480{fpt - eng-5.mps}\\ ] ]    tile set where isolated defects can be healed .",
    "let @xmath481 be positive integers .",
    "we say that a tile set @xmath3 is _",
    "@xmath482-robust _ if the following holds : for every @xmath483 and for every @xmath3-tiling @xmath5 of the @xmath484-neighborhood of a square @xmath485 excluding the square itself there exists a tiling @xmath486 of the entire @xmath484-neighborhood of the square ( including the square itself ) that coincides with @xmath5 outside of the @xmath487-neighborhood of the square ( see fig .",
    "[ fpt.5.mps ] ) .",
    "[ robust - tileset ] there exists a self - similar tile set that is @xmath482-robust for some @xmath285 and @xmath282 .    for every tile set @xmath488 it is easy to construct a `` robustified '' version @xmath489 of @xmath488 , i.e. , a tile set @xmath489 and a mapping @xmath490 such that ( a )  @xmath491-images of @xmath489-tilings are exactly @xmath488-tilings and ( b )  @xmath489 is `` 5-robust '' : every @xmath489-tiling of a @xmath492 square minus @xmath493 hole ( see fig .  [ fpt.6.mps ] ) can be uniquely extended to the tiling of the entire @xmath492 square .",
    "@xmath47{fpt - eng-6.mps}\\ ] ]    indeed , it is enough to keep in one @xmath489-tile the information about the @xmath492 square in @xmath488-tiling . matching rules will guarantee that the information about the intersection ( @xmath494 rectangle ) is consistent in neighbor tiles . then , a @xmath493 hole ( as shown in the picture ) is not fatal .",
    "it is easy to see that the tiles at its border ( gray ) are consistent and contain all the information the missing tiles should have .",
    "( in fact , using more careful estimates one can replace in our argument the @xmath495 squares by @xmath496 squares ; but we do not care much about constants . )",
    "this robustification can be easily combined with the fixed - point construction . in this way we can get a `` @xmath497-robust '' self - similar tile set @xmath3 if the zoom factor @xmath25 ( which is considered to be fixed in this argument ) is large enough .",
    "it remains to explain that `` @xmath497-robustness '' ( in the sense described above ) implies also @xmath482-robust for some @xmath285 and @xmath282 .",
    "( the values of @xmath285 and @xmath282 depend on @xmath25 , but @xmath25 is fixed . )    indeed , assume that a tiling of a large enough neighborhood around a @xmath485 hole is given .",
    "denote by @xmath17 the minimal integer such that @xmath498 ( so the @xmath17-level macro - tiles are greater than the hole under consideration ) .",
    "note that the size of the @xmath17-level macro - tiles is linear in @xmath499 since @xmath500 .    in the tiling around the hole ,",
    "an @xmath23 block structure is correct except for the @xmath25-neighborhood of the central @xmath501 hole .",
    "indeed , the colors encode coordinates , so in every connected tiled region the coordinates are consistent .",
    "for similar reasons an @xmath502 structure is correct except for the @xmath503-neighborhood of the hole , etc .",
    "hence , for the chosen @xmath17 we get a @xmath17-level structure that is correct except for ( at most ) @xmath504 squares of level @xmath17 , so we can delete everything in these squares and use @xmath497-robustness to replace them with macro - tiles that correspond to replacement tiles .    to start this procedure ( and fill the hole ) , we need a correct tiling only in the @xmath505 neighborhood of the hole .",
    "( technically , we need to have a correct tiling in the @xmath506-neighborhood of the hole ; as @xmath507 , we let @xmath508 ) the correction procedure involves changes in another @xmath505-neighborhood of the hole .",
    "( technically , the changes touch @xmath509-neighborhood of the hole ; @xmath510 , so we let @xmath511 . )",
    "the construction from the previous section works only for self - similar tilings with a fixed zoom factor .",
    "it is enough for simple applications , as we will see in section  [ strongly - robust ] .",
    "however , in the proof of our main result in section  [ robust - complex ] we need a variable zoom factor .",
    "so here we develop a technique suitable for this case .",
    "this section can be skipped now but it should be read before section  [ robust - complex ] .    now we explain how to get `` robust '' fixed - point tilings with variable zoom factors @xmath512 . as well as in the case of a fixed zoom factor , the idea is that @xmath17-level macro - tiles are `` responsible '' for healing holes of size comparable with these macro - tiles .    let @xmath513 be a sequence of integers .",
    "let @xmath481 be positive integers .",
    "we say that a tile set @xmath3 is _",
    "@xmath482-robust against holes of size @xmath514 _ if the following holds : for every @xmath19 and for every @xmath3-tiling @xmath5 of the @xmath515 neighborhood of a square @xmath516 excluding the square itself there exists a tiling @xmath486 of the entire @xmath515 neighborhood of the square ( including the square itself ) that coincides with @xmath5 outside of the @xmath517 neighborhood of the square . the difference from the definition of section  [ robust ] is that we take only values @xmath518 instead of holes of arbitrary size .",
    "[ robust - tileset - var ] assume a sequence of zoom factors @xmath158 grows not too fast and not too slow ( it is enough to assume that @xmath519 and @xmath520 for a large enough @xmath0 ; cf .",
    "the discussion in section  [ variable ] ) . then , there exists a tile set with variable zoom factors @xmath158 ( @xmath17-level macro - tiles of size @xmath521 ) that is @xmath482-robust ( for some @xmath285 and @xmath282 ) against holes of size @xmath522 .",
    "first , we apply the fixed - point construction from section  [ variable ] and get a tile set that is `` self - similar '' with variable zoom factors @xmath523 .",
    "denote by @xmath524 the family of @xmath17-level macro - tiles corresponding to this tile set .",
    "further we make a `` robustified '' version of this tile set . to this end",
    "we basically repeat the arguments from section  [ robust ] ( the proof of theorem  [ robust - tileset ] ) .",
    "the difference in the argument is that now we deal with variable zoom factors , and sizes of holes are taken from the sequence @xmath522 .",
    "denote by @xmath525 the family of @xmath17-level macro - tiles for the new tiling .",
    "we need that there exists a mapping @xmath526 such that ( a )  @xmath491-images of @xmath525-tilings are exactly @xmath524-tilings and ( b )  @xmath525 is `` 5-robust '' : every @xmath525-tiling of a @xmath492 square minus a @xmath493 hole ( see again fig .  [ fpt.6.mps ] ) can be uniquely extended to the tiling of the entire @xmath492 square .    to get such a robustification , it is enough to keep in every @xmath525-macro - tile the information about the @xmath492 square in the @xmath524-tiling and use the colors on the borders to ensure that this information is coherent in neighbor macro - tiles .    as usual",
    ", this robustification can be combined with the fixed - point construction .",
    "we get @xmath497-robust macro - tiles for all levels of our construction .",
    "`` self - similarity '' guarantees that the same property holds for macro - tiles of all levels , which implies the required property of generalized robustness .",
    "indeed , assume that a tiling of a large enough neighborhood around a @xmath527 hole is given , and @xmath528 for some @xmath17 . in the tiling around the hole , an @xmath529 block structure ,",
    "is correct except for only the @xmath530 neighborhood of the hole . for similar reasons an @xmath531 structure is correct except for the @xmath532 neighborhood , etc .",
    "so we get a @xmath17-level structure that is correct except for ( at most ) @xmath504 squares of size @xmath533 . because of @xmath497-robustness",
    ", this hole can be filled with @xmath17-level macro - tiles .",
    "note that reconstruction of ground - level tiles inside a high - level macro - tile is unique after we know its `` conscious known '' information , i.e. , the content of the tape of the turing machine simulated on the computation zone of this macro - tile .",
    "( this information is reconstructed from the consciously known information of the neighbor macro - tiles . ) [ for the maximal complexity tile set ( section  [ complex ] ) it is not the case , and the absence of this property will become a problem in section  [ robust - complex ] where we robustify it . to solve this problem , we will need to use error - correcting codes . ]",
    "to implement the patching procedure ( and fill the hole ) we need to have a correct tiling in the @xmath534 neighborhood of the hole .",
    "the correction procedure involves changes in another @xmath534 neighborhood of the hole .",
    "more technically , we need to have a correct tiling in the @xmath535-neighborhood of a hole of size @xmath294 , so we let @xmath536 .",
    "since the correction procedure involves changes in the @xmath537-neighborhood of the hole , we let @xmath538 .",
    "we can robustify tiling not only against holes but against _ pairs of holes_. to this end we slightly modify our definition of robustness .",
    "let @xmath513 be an increasing sequence of integers , and let @xmath481 be positive integers .",
    "we say that a tile set @xmath3 is _",
    "@xmath482-robust against pairs of holes of size @xmath514 _ if the following holds : let us have two sets @xmath539 , each of them of diameter at most @xmath540 ( for some @xmath541 ) . for every @xmath3-tiling @xmath5 of the @xmath515 neighborhood of the union @xmath542 excluding @xmath543 and @xmath544 themselves there exists a tiling @xmath486 of the entire @xmath515 neighborhood of @xmath542 ( including @xmath543 and @xmath544 themselves ) that coincides with @xmath5 outside of the @xmath517 neighborhood of @xmath542 .",
    "a robustification against pairs of holes can be done in the same way as the robustification against a single isolated hole .",
    "indeed , if these two holes are far apart from each other , we can `` correct '' them independently ; if they are rather close to each other , we correct them as one hole of ( roughly ) doubled size .",
    "so we can employ the same robustification technique as before ; we need only to take a large enough `` radius of multiplication '' @xmath545 ( and use @xmath545-robustness instead of @xmath497-robustness ) .",
    "so we get the following generalization of lemma  [ robust - tileset - var ] :    [ robust - tileset - var - pairs ] assume a sequence of zoom factors @xmath158 grows not too fast and not too slow ( e.g. , @xmath519 and @xmath520 for a large enough @xmath0 ) . then , there exists a tile set with zoom factors @xmath158 ( i.e. , with @xmath17-level macro - tiles of size @xmath521 ) that is @xmath482-robust ( for some @xmath285 and @xmath282 ) against pairs of holes of size @xmath522 for some @xmath285 and @xmath282 .",
    "of course , similar propositions can be also proven for triplets , quadruplets , and any other sets of holes of bounded cardinality . however , in this paper we consider only pairs of holes ; this is enough for our argument in section  [ robust - complex ] .",
    "now we are ready to apply the islands technique to construct a robust strongly aperiodic tile set .",
    "we start with a formal definition of a tiling with errors ( see the motivation and discussion in section  [ random ] ) .    for a subset @xmath379 and a tile set @xmath3",
    "we call by a @xmath316-tiling any mapping @xmath546 such that for every two neighbor cells @xmath547 , tiles @xmath548 and @xmath549 satisfy the tiling rules ( colors on adjacent sides match ) .",
    "we may say that @xmath38 is a @xmath3-tiling of the plane with holes at points of @xmath172 .",
    "[ thm : strongly - aperiodic - robust ] there exists a tile set @xmath3 with the following properties :  @xmath3-tilings of @xmath16 exist and  for all sufficiently small @xmath191 for almost every ( with respect to @xmath315 ) subset @xmath319 every @xmath316-tiling is at least @xmath550 besicovitch apart from every periodic mapping @xmath551 .    * remark 1*. since the tiling contains holes , we need to specify how we treat the holes when defining the besicovitch distance .",
    "we do _ not _ count points in @xmath172 as points where two mappings differ ; this makes our statement stronger .",
    "* remark 2*. the constant @xmath550 is not optimal and can be replaced by any other constant @xmath552 .",
    "consider a tile set @xmath3 such that ( a )  all @xmath3-tilings are @xmath99-aperiodic for every @xmath105 and ( b )  @xmath3 is @xmath482-robust for some @xmath285 and @xmath282 .",
    "such a tile set can be constructed by combining the arguments used for theorems  [ robust - tileset ] and  [ aperiodic ] .",
    "more precisely , we take as the `` basic '' construction the tile set from the proof of theorem  [ aperiodic ] ( which simulates the thue  morse substitution ) .",
    "then , we `` robustify '' it by the procedure from the proof of theorem  [ robust - tileset ] . for the robustified tile set we know that each macro - tile in a tiling keeps the conscious information that was given ( in the `` basic '' tile set ) to all macro - tiles in its @xmath495-neighborhood ; so the new tiling is not only strongly aperiodic but also @xmath497-robust .",
    "it remains to show that this construction implies claim  ( 2 ) of the theorem .",
    "we want to apply our probabilistic lemmas concerning `` island of errors '' .",
    "we need to choose @xmath386 and @xmath383 such that    * the conditions of lemma  [ lemma1 ] ( p.  ) are satisfied , and therefore a random error set with probability @xmath13 is sparse with respect to these @xmath386 and @xmath383 ; * for every sparse set @xmath319 , every @xmath316-tiling can be iteratively corrected ( by changing it in the neighborhoods of islands of all ranks ) into a @xmath3-tiling of the entire plane ; and * the besicovitch distance between the tilings before and after correction is small .",
    "then , we conclude that the original @xmath316-tiling is strongly aperiodic since the corrected tiling is strongly aperiodic and close to the original one .    to implement this plan",
    ", we use the following lemma that describes the error - correction process .",
    "[ lemma - robust-1 ] assume that a tile set @xmath3 is @xmath482-robust , @xmath553 for every @xmath17 , and a set @xmath379 is sparse ( with parameters @xmath386 , @xmath383 ) .",
    "then , every @xmath316-tiling can be transformed into a @xmath3-tiling of the entire plane by changing it in the union of @xmath554-neighborhoods of rank @xmath17 islands ( for all islands of all ranks ) .",
    "note that @xmath384-neighborhoods of rank @xmath17 islands are disjoint and large enough to perform the error correction of rank  @xmath17 islands , since @xmath553 . the definition of a sparse set guarantees also that every point is changed only finitely many times ( so the limit tiling is well defined ) and that the limit tiling has no errors .",
    "the besicovitch density of the changed part of a tiling can be estimated using lemma  [ lemma2 ] . here",
    "@xmath555 is proportional to @xmath386 , so the besicovitch distance between the original and corrected tilings ( in lemma  [ lemma - robust-1 ] ) is @xmath556 .",
    "( note that the constant in @xmath21 notation depends on @xmath285 . )",
    "it remains to choose @xmath386 and @xmath383 .",
    "we have to satisfy all the inequalities in lemmas  [ lemma1 ] , [ lemma2 ] , and  [ lemma - robust-1 ] . to satisfy lemmas  [ lemma2 ] and [ lemma - robust-1 ] , we may let @xmath557 for large enough @xmath275 . to satisfy lemma  [ lemma1 ]",
    ", we may let @xmath558 .",
    "then , @xmath386 and @xmath383 grow faster than any geometric sequence ( like @xmath165 multiplied by some exponent in @xmath17 ) , but still @xmath559 is bounded by a polynomial in @xmath17 and the series in lemma  [ lemma1 ] converges .",
    "with these parameters ( and taking @xmath275 large enough ) we guarantee that the besicovitch distance between the original @xmath316-tiling and the corrected @xmath3-tiling does not exceed , say , @xmath560 .",
    "now assume that some @xmath316-tiling @xmath486 is at a distance less than @xmath550 from some periodic configuration @xmath561 ( with a period @xmath562 ) .",
    "as we just explained , the original @xmath316-tiling @xmath486 must be at a distance at most @xmath560 from some correct @xmath3-tiling @xmath563 .",
    "let us consider the @xmath562-shift of both configurations @xmath486 and @xmath563 ( @xmath561 is shifted to itself ) .",
    "it is easy to see that the distance between the initial and the shifted copies of configuration @xmath563 is not greater than the sum @xmath564 taken twice .",
    "since the corrected tiling @xmath563 must be @xmath138-aperiodic , and @xmath565 , we get a contradiction .",
    "in this section we prove the main result of the paper .",
    "we construct a tile set that guarantees large kolmogorov complexity of every tiling and that is robust with respect to random errors .",
    "[ thm - complex - errors ] there exists a tile set @xmath3 and constants @xmath566 with the following properties :    a @xmath3-tiling of @xmath16 exists ;    for every @xmath3-tiling  @xmath38 of the plane , every @xmath23 square of @xmath38 has kolmogorov complexity at least @xmath567 ;    for all sufficiently small @xmath191 for almost every ( with respect to the bernoulli distribution @xmath315 ) subset @xmath379 , every @xmath316-tiling is at most @xmath550 besicovitch apart from some @xmath3-tiling of the entire plane  @xmath16 ;    for all sufficiently small @xmath191 for almost every @xmath315-random subset @xmath379 , for every @xmath316-tiling @xmath38 the kolmogorov complexity of centered squares of @xmath38 of size @xmath23 is @xmath60 .",
    "the rest of the section is devoted to the proof of this theorem .",
    "it combines almost all technique developed in this paper : self - similar tile sets with variable zoom factors , embedding a sequence with levin s property ( i.e. , with linear kolmogorov complexity of all factors ) into tilings , bi - sparse sets , incremental error correcting , and robustness against doubled holes .    in this section the basic idea of incremental error correcting",
    "is applied in a slightly modified form . here",
    "we can not apply directly the technique of @xmath482-robustness from section  [ robust ] .",
    "instead we use the idea of robustness against holes of some sequence of sizes @xmath568 , as explained in section  [ robust - var ] .",
    "more precisely , we do it as follows : we split the set of random errors into bi - islands of different ranks . then , we eliminate them one by one , starting from lower ranks .",
    "when we correct an isolated bi - island of rank @xmath17 , we need a precondition ( similarly to the argument in section  [ robust ] ) : in a large enough neighborhood of this bi - island there are no other errors .",
    "elimination of a @xmath17-level bi - island involves corrections in its _ extended _ @xmath569-neighborhood ( with all parameters as specified below ) .",
    "we want to combine the construction from section  [ complex ] with error - correcting methods based on the idea of `` islands '' of errors .",
    "there are two main difficulties in this plan : fast growing zoom factors and gaps in vertical columns .",
    "let us discuss these two problems in some detail .",
    "the first problem is that our construction of tiling with high kolmogorov complexity from section  [ complex ] requires _ variable zoom factors_. what is even worse is that zoom factors @xmath158 must increase very fast ( with logarithms growing faster than @xmath163 ) . hence , we can not directly apply the technique of islands from section  [ islands ] since it works only when @xmath570 ( where @xmath383 is the parameter from the definition of islands , which , in our construction , must be of the same order as the size of @xmath17-level macro - tiles ) . to overcome this obstacle , we replace islands by bi - islands ( the technique developed in section  [ bi - islands ] ) .",
    "the second problem is that now we can not reconstruct a macro - tile from the information `` consciously known '' to this macro - tile .",
    "the missing information is the sequence of bits assigned to the vertical columns ( with each vertical column of tiles carrying one bit of a high - complexity sequence @xmath288 ) .",
    "random errors make gaps in vertical columns , so now the columns are split into parts , which _ a priori _ can carry different bits . to overcome this problem",
    "we organize additional information flows between macro - tiles to guarantee that each infinite vertical column carries in most of its tiles one and the same bit value .      here",
    "we explain the general ideas of our proof .",
    "first , we use macro - tiles with variable zoom factors @xmath571 for a large enough integer @xmath572 .",
    "this means that every @xmath17-level macro - tile is an @xmath573 array of @xmath574-level macro - tiles .",
    "so the size ( the number of columns and the number of rows ) of a @xmath17-level macro - tile is @xmath575 , and @xmath576 . ( the constant @xmath577 in our construction can be replaced by any rational number between @xmath49 and @xmath48 . )    to get tilings with high kolmogorov complexity , we reuse the construction from section  [ complex ] with the zoom factors defined above .",
    "let us recall the idea of that construction ( proof of theorem  [ thm : complex ] ) . in a correct tiling , in the @xmath117th column",
    "all tiles keep some bit @xmath286 , and we want every @xmath25-bit substring in the corresponding biinfinite sequence @xmath288 to have kolmogorov complexity @xmath60 . to enforce this property",
    "we organize our computation on macro - tiles of all levels .",
    "the crucial point of the construction is propagation of bits @xmath286 to the computation zones of macro - tiles of high levels .",
    "let us recall the main points of this construction ( following the argument from section  [ complex ] ) :    * we say that for each ( infinite ) column of tiles in a tiling there is an _ assigned _ bit @xmath286 , which is `` known '' to each tile in the column .",
    "( in other words , there is a mapping that attributes to each tile the corresponding bit @xmath286 ; vertically neighboring tiles must keep the same value of the bit . )",
    "* for a @xmath17-level macro - tile ( of size @xmath533 ) its _ zone of responsibility _ is the sequence of @xmath294 bits @xmath286 assigned to all columns of this macro - tile .",
    "vertically aligned macro - tiles of the same level have the same zone of responsibility . * for _",
    "some _ @xmath17-level macro - tile @xmath166 there is one _ delegated bit _ ; this is a bit @xmath286 from the zone of responsibility of this macro - tile .",
    "this bit must be known to the `` consciousness '' of the macro - tile ; that is , it must be presented explicitly on the tape in the computation zone of this macro - tile . for technical reasons ,",
    "we decide that the position of the delegated bit @xmath286 in the zone of responsibility of @xmath166 ( this position is an integer between @xmath14 and @xmath578 ) is equal to the position ( vertical coordinate ) of @xmath166 in its father macro - tile ( see fig .",
    "[ fpt.8.mps ] ) .",
    "the father is a macro - tile of level @xmath297 , which consists of @xmath218 macro - tiles of level @xmath17 ( thus , the vertical coordinate of a @xmath17-level macro - tile in its father ranges over @xmath579 ) . in our settings , @xmath580 .",
    "if a @xmath17-level macro - tile @xmath166 has a vertical coordinate in its father greater than @xmath158 , then @xmath166 does not have a delegated bit . *",
    "if a @xmath17-level macro - tile @xmath166 has a delegated bit in its computation zone , it also contains a _ group of bits to check _ that starts at the delegated bit and has rather small length ( say , @xmath307 ) . if this group of bits leaves the responsibility zone , we truncate it .",
    "the turing machine simulated in the computation zone of @xmath166 enumerates the forbidden strings of `` too small kolmogorov complexity '' and verifies that the _ checked group of bits _ does not contain any of them .",
    "this process is bounded by time and space allocated to the computation zone of a @xmath17-level macro - tile .",
    "the last item requires additional comments .",
    "technically , we fix constants @xmath581 and @xmath275 and check that for every string @xmath100 in zones of responsibility of all macro - tiles @xmath582 . to check this property , a macro - tile enumerates all strings @xmath100 of complexity less than @xmath583 .",
    "this enumeration requires infinite time , though computations in each macro - tile are time - bounded .",
    "this is not a problem since every such @xmath100 is checked in macro - tiles of arbitrarily high levels ( i.e. , if @xmath100 is covered by a macro - tile of level @xmath17 , then it is also covered by macro - tiles of all levels greater than @xmath17 ) .",
    "thus , we guarantee the following property : @xmath584 notice that @xmath585 holds only for strings @xmath100 covered by some macro - tile ( i.e. , strings that belong to some macro - tile s zone of responsibility ) . in `` degenerate '' tilings there can exist an infinite vertical line that is a border line for macro - tiles of _ all _ levels ( see fig .",
    "[ degenerate.mps ] ) .",
    "a string @xmath100 that intersects this line is not covered by any macro - tile of any level .",
    "hence ,  ( @xmath586 ) does not guarantee for such a string @xmath100 that its kolmogorov complexity is greater than @xmath583 .",
    "however , as we noticed in section  [ last - correction ] , the parts of @xmath100 on both sides of the boundary are covered by some macro - tile .",
    "hence , it follows from  ( @xmath586 ) that @xmath587 for _ all _ factors @xmath100 of the biinfinite string @xmath288 .",
    "thus , we reuse the argument from section  [ complex ] , and it works well if there are no errors , but when we introduce random errors , the old construction is broken .",
    "indeed , vertical columns can be damaged by islands of errors .",
    "now we need to make an effort to enforce that copies of @xmath286 consciously kept by different macro - tiles are coherent ( at least for macro - tiles that are not seriously damaged by local errors ) . to this end",
    "we will use some checksums , which guarantee that neighbor macro - tiles keep coherent conscious and subconscious information .",
    "we discuss this topic in the next section .    to deal with random errors we use the technique of bi - islands ( see section  [ bi - islands ] ) .",
    "our arguments work if diameters of @xmath17-level bi - islands are comparable with the size of @xmath17-level macro - tiles .",
    "technically , we set @xmath588 and @xmath589 .",
    "( in the following we will see that this choice of @xmath383 is important for the error - correcting procedure ; @xmath386 is set to @xmath590 , so that lemmas on bi - islands can be applied . ) recall that @xmath571 and @xmath575 .",
    "note that lemmas  [ lemma - bi - island ] and  [ lemma - bi - island-2 ] can be used with these values of parameters @xmath591 .",
    "we will also employ lemma  [ lemma - bi - island-3 ] with @xmath592 .",
    "we take the construction from section  [ complex ] as the starting point and superimpose some new structures on @xmath17-level macro - tiles .",
    "we introduce these supplementary structures in several steps .    *",
    "first step ( introducing checksums ) : * every @xmath17-level macro - tile @xmath166 ( in a correct tiling ) consists of an @xmath593 array of @xmath574-level macro - tiles ; each of these @xmath574-level macro - tiles may keep one delegated bit .",
    "let us take one horizontal row ( bits assigned to @xmath157 macro - tiles of level @xmath160 ) in this two - dimensional array of size @xmath593 .",
    "denote the corresponding sequence of bits by @xmath594 .",
    "we introduce a sort of _ erasure code _ for this string of bits . in other words",
    ", we will calculate some checksums for this sequence .",
    "these checksums should be suitable to reconstruct all bits @xmath594 _ if at most @xmath545 of these bits are erased _",
    "( i.e. , if we know values @xmath595 for only @xmath596 positions ) ; here @xmath597 is a constant ( to be fixed later ) .",
    "we want the checksums to be easily computable .",
    "here we use again the checksums of the reed  solomon code ( discussed in section  [ strongly ] ) .",
    "let us explain this technique in more detail . we take a finite field @xmath598 of large enough size ( greater than @xmath599 ) .",
    "then , we calculate a polynomial of degree less than @xmath157 that takes values @xmath594 at some @xmath157 points of the field .",
    "further , we take as checksums the values of this polynomial at some other @xmath545 points from @xmath598 ( where all @xmath600 points of the field are fixed in advance ) .",
    "two polynomials of degree less than @xmath157 can coincide in at most @xmath601 points .",
    "hence , if @xmath545 bits from the sequence @xmath594 are erased , we can reconstruct them given the other ( nonerased ) bits @xmath602 and the checksums defined above .",
    "these checksums contain @xmath603 bits of information .",
    "we next discuss how to compute them .    *",
    "second step ( calculating checksums ) : * first , we explain how to compute the checksums , going from left to right along the sequence @xmath594 .",
    "this can be done in a rather standard way as follows .",
    "let @xmath594 be the values of a polynomial @xmath248 ( of degree less than @xmath157 ) at points @xmath604 .",
    "assume we want to reconstruct all coefficients of this polynomial .",
    "we can do this by the following iterative procedure . for @xmath605",
    "we calculate polynomials @xmath606 and @xmath607 ( of degree @xmath608 and @xmath117 , respectively ) such that @xmath609 and @xmath610 it is easy to see that for each @xmath117 , polynomials @xmath611 and @xmath612 can be computed from polynomials @xmath613 and @xmath614 and the values @xmath615 and @xmath616 .",
    "if we do not need to know the resulting polynomial @xmath617 but want to get only the value @xmath618 at some particular point @xmath132 , then we can perform all these calculations modulo @xmath619 .",
    "thus , to obtain the value of @xmath248 at @xmath545 different points , we run in parallel @xmath545 copies of this process . at each step of the computation we need to keep in memory only @xmath284 elements of @xmath598 , which is @xmath603 bits of temporary data ( with the multiplicative constant in this @xmath620 notation depending on the value of @xmath545 ) .",
    "this calculation can be simulated by a tiling .",
    "we embed the procedure just explained into the computation zones of @xmath574-level macro - tiles .",
    "the partial results of the calculation are transferred from one @xmath574-level macro - tile to another one , from the left to the right ( in each row of length @xmath157 in a @xmath17-level macro - tile ) .",
    "the final result ( for each row ) is embedded into the conscious information ( bits on the tape of the turing machine in the computation zone ) of the rightmost @xmath574-level macro - tile of the row .    to organize these computations , we need to include into conscious information kept by @xmath574-level macro - tiles additional @xmath603 bits and add the same number of bits to their macro - colors .",
    "this fits well our fixed - point construction since zoom factors @xmath158 grow fast , and we have enough room in the computation zone .    *",
    "third step ( consistency of checksums between macro - tiles ) : * so far , every @xmath17-level macro - tile contains @xmath621 bits of checksums and @xmath603 bits for every row .",
    "we want these checksums to be the same for every two vertical neighbor macro - tiles .",
    "it is inconvenient to keep the checksums for all rows only in the rightmost column ( since it would create too much traffic in this column if we try to transmit the checksums to the neighbor macro - tiles of level @xmath17 ) .",
    "so we propagate the checksums of the @xmath117th row in a @xmath17-level macro - tile @xmath166 ( @xmath622 ) along the entire @xmath117th row and along the entire @xmath117th column of @xmath166 . in other words , these checksums must be `` consciously '' known to all @xmath574-level macro - tiles in the @xmath117th row and in the @xmath117th column of @xmath166 . in fig .",
    "[ checksum ] we show the area of propagation of checksums for two rows ( the @xmath117th and the @xmath118th rows ) .",
    "@xmath623{fpt - eng-15.mps}\\ ] ]    on the border of two neighbor @xmath17-level macro - tiles ( one above another ) we check that in each column @xmath622 all the corresponding checksums computed in both macro - tiles coincide .",
    "this check is redundant if there are no errors in the tiling : the checksums are computed from the delegated bits ( which come from the sequence of bits @xmath288 encoded into tiles of the ground level ) , so the corresponding values for all vertically aligned macro - tiles must be equal to each other .",
    "however , this redundancy is useful to resist errors , as we show in the following .    *",
    "fourth step ( robustification ) : * the features just explained organized in every @xmath17-level macro - tile ( bit delegation , computing and propagating checksums , and all the computations simulated in the computation zone of a macro - tile ) are simulated by means of bits kept in the `` consciousness '' ( i.e. , in the computation zone ) of @xmath574-level macro - tiles .",
    "now we fix some constant @xmath0 and `` robustify '' this construction in the following sense : each @xmath574-level macro - tile @xmath166 keeps in its consciousness not only `` its own '' data but also the bits previously assigned to @xmath574-level macro - tiles from its @xmath624-neighborhood ( i.e. , the @xmath625 array of @xmath574-level macro - tiles centered at @xmath166 ) .",
    "so , the content of the consciousness of each macro - tile is multiplied by some constant factor .",
    "neighbor macro - tiles check that the data in their consciousness are coherent .",
    "we choose the constant @xmath0 so that every @xmath17-level bi - island ( which consist of two parts of size @xmath386 ) and even the @xmath592-neighborhood of every @xmath17-level bi - island ( where we specify @xmath402 below ) can involve only a small part of the @xmath626-neighborhood of any @xmath574-level macro - tile .",
    "( note that here we talk about neighborhoods , not about _ extended neighborhoods _ of bi - islands defined in section  [ bi - islands ] . )",
    "this robustification allows us to reconstruct the conscious information of a @xmath17-level macro - tile and of its @xmath574-level sons when this macro - tile is damaged by one @xmath17-level bi - island ( assuming there are no other errors ) .    *",
    "the last remark ( the number of bits in the consciousness of a macro - tile ) : * the construction explained above requires that we put into the computation zones of all @xmath574-level macro - tiles additional @xmath627 bits of data .",
    "( the most substantial part of the data is the information used to compute the checksums . ) again , this fits our fixed - point construction because @xmath627 is much less than @xmath628 , so we have enough room to keep and process all these data .",
    "the tile set @xmath3 is thus defined .",
    "since there exists an @xmath288 with levin s property , it follows that @xmath3-tiling exists , and every @xmath23 square of such a tiling has kolmogorov complexity @xmath60 .",
    "further , we prove that this @xmath3 satisfies also statement ( 3 ) of theorem  [ thm - complex - errors ] .",
    "denote by @xmath3 the tile set described in section  [ robust - complex-3 ] .",
    "let @xmath182 be small enough .",
    "lemma  [ biisland ] says that a @xmath315-random set with probability @xmath13 is bi - sparse .",
    "now we assume that @xmath379 is a bi - sparse set ( for the chosen values of @xmath335 and @xmath333 ) , and @xmath38 is a @xmath3-tiling of @xmath629 .",
    "further , we explain how to correct errors and convert @xmath38 into a tiling @xmath630 of the entire plane ( where @xmath630 should be close to @xmath38 ) .",
    "we follow the usual strategy .",
    "the set @xmath172 is bi - sparse ; that is , it can be represented as a union of isolated bi - islands of different ranks .",
    "we correct them one by one , starting from bi - islands of low ranks . to prove that the correction procedure converges , we need to explain one step of this process : how to correct one bi - island @xmath27 of rank @xmath17 assuming that it is well isolated , i.e. , in the @xmath383-neighborhood of this bi - island there are no other ( still noncorrected ) errors .",
    "let us recall that a @xmath17-level bi - island @xmath27 is a union of two `` clusters '' @xmath631 ; the diameters of both @xmath459 and @xmath460 are at most @xmath632 .",
    "hence the clusters @xmath459 and @xmath460 touch only @xmath284 macro - tiles of level @xmath574 .",
    "the distance between @xmath459 and @xmath460 is at most @xmath383 , and the @xmath383-neighborhood of @xmath27 is free of other bi - islands of rank @xmath17 and higher ( so we can assume that the @xmath383-neighborhood of @xmath27 is already cleaned of errors ) .",
    "our correction procedure around @xmath27 will involve only points in the extended @xmath402-neighborhood of  @xmath27 , where @xmath633 .",
    "let @xmath166 be one of @xmath17-level macro - tiles intersecting the extended @xmath402-neighborhood of the @xmath17-level bi - island @xmath27 . basically , we need to reconstruct all @xmath574-level macro - tiles in @xmath166 destroyed by @xmath27 .",
    "first , we will reconstruct the conscious information in all @xmath574-level macro - tiles in @xmath166 .",
    "this is enough to get all bits of @xmath288 from the `` zone of responsibility '' of @xmath166 .",
    "then , we will reconstruct in a consistent way all @xmath19-level macro - tiles inside @xmath166 for all @xmath634 .",
    "thus , we start with reconstructing the consciousness of all @xmath574-level macro - tiles @xmath635 in @xmath166 .",
    "first , we recall that the consciousness ( the content of the computation zone ) of every @xmath574-level macro - tile @xmath635 consists of several groups of bits ( cf . the outline of the construction in section  [ section-13 - 2 ] , p.  ):    1 .   the binary representation of the number @xmath574 and coordinates ( integers from the range @xmath636 ) of @xmath635 in the father macro - tile @xmath166 ; 2 .   the bits used to simulate a turing machine on the computation zone of @xmath166 and the bits used to implement `` wires '' of @xmath166 ; 3 .",
    "the bit ( from the sequence @xmath288 ) delegated to @xmath635 ; 4 .",
    "the bit ( from @xmath288 ) delegated to @xmath166 ; 5 .",
    "the bits used to calculate and communicate the checksums for the corresponding row of @xmath574-level macro - tiles in @xmath166 ; and 6 .   a group of bits to check from the zone of responsibility of @xmath635 ;",
    "these bits are checked by the macro - tile : @xmath635 checks on its computation zone that this `` group of bits to check '' does not contain any factor of low kolmogorov complexity .",
    "bits of field [ a ] in a small isolated group of @xmath574-level macro - tiles are trivially reconstructed from the surrounding macro - tiles of the same level .",
    "fields [ b ] , [ c ] , [ d ] , and [ e ] can be reconstructed because of the robustification on the level of @xmath574-level macro - tiles .",
    "( we organized the robustification on the level of @xmath574-level macro - tiles in such a way that we are able to reconstruct these fields for any @xmath637 group of missing or corrupt @xmath574-level macro - tiles . )",
    "so far the correcting procedure follows the exactly the same steps as in section  [ robust - var ] .    to reconstruct fields [ f ] of @xmath574-level macro - tiles in @xmath166 , we need to reconstruct all bits of @xmath288 from the zone of responsibility of @xmath166",
    ". we can extract these bits from the neighbor @xmath17-level tiles above or below @xmath638 ( recall that bi - island @xmath27 touches only @xmath284 @xmath17-level macro - tiles , and there is a `` healthy '' zone of @xmath17-level macro - tiles around them . ) however , a problem remains since we are not sure that the @xmath288 bits above @xmath166 , below @xmath166 , and inside @xmath166 are consistent .",
    "now we show that this consistency is guaranteed by checksums .",
    "denote by @xmath639 and @xmath640 the @xmath17-level macro - tiles just above and below @xmath27 . since the distance between @xmath27 and other @xmath17-level bi - islands is greater than @xmath641 , we know that @xmath639 and @xmath640 must be free of errors ( where we assume that errors of ranks less than @xmath17 are already corrected ) .",
    "see fig .",
    "[ biisland - correcting ] .",
    "in what follows , our explanations refer to fig .",
    "[ biisland - correcting ] , where bi - island @xmath27 touches only one @xmath17-level macro - tile ; if @xmath27 touches several @xmath17-level macro - tiles , substantially the same arguments work .",
    "it is enough to prove that the bits @xmath286 assigned to corresponding columns of @xmath639 and in @xmath640 are equal to each other .",
    "the macro - tiles @xmath639 and @xmath640 are error free ; therefore , the sequences of @xmath294 bits @xmath286 corresponding to the vertical lines intersecting these @xmath17-level macro - tiles are well defined . since there are no errors , the conscious information ( including checksums ) in all macro - tiles of all levels inside @xmath639 and @xmath640 is consistent with these bit sequences .",
    "so , the @xmath294 bits assigned to the vertical columns are correctly delegated to the corresponding @xmath574-level macro - tiles inside @xmath639 and @xmath640 .",
    "however , it is not evident that the sequences of @xmath294 bits embedded in @xmath639 and @xmath640 are equal to each other .",
    "in fact , it is easy to see that bit sequences for @xmath639 and @xmath640 coincide with each other at most positions",
    ". they must be equal for all columns ( from the range @xmath642 ) that do not intersect bi - island @xmath27 ( i.e. , in nondamaged columns of tiles on the ground level , the assigned bits @xmath286 correctly spread though macro - tiles @xmath639 , @xmath166 , and @xmath640 ) . hence , the bits delegated to the corresponding @xmath574-level macro - tiles in @xmath639 and @xmath640 are equal to each other , except for only @xmath574-level macro - tiles in the `` gray zone '' of fig .",
    "[ biisland - correcting ] , which contains the @xmath574-level macro - tiles involved in the correction of @xmath27 and all vertical stripes touching the involved sites .",
    "( the width of this gray stripe is only @xmath284 macro - tiles of level @xmath574 . ) hence , for @xmath643 , in the @xmath117th rows of @xmath574-level macro - tiles in @xmath639 and @xmath640 , the sequences of delegated bits are equal to each other except possibly for only @xmath284 bits ( delegated to @xmath574-level macro - tiles in the `` gray zone '' ) .",
    "the robustness property guarantees that all checksums are correctly transmitted through @xmath166 .",
    "hence , checksums for corresponding rows in @xmath639 and in @xmath640 must be equal to each other .",
    "thus , for every two corresponding rows of @xmath574-level macro - tiles in @xmath639 and in @xmath640 we know that ( a ) all except @xmath284 delegated bits in the corresponding positions are equal to each other and ( b ) the checksums are equal to each other . from the property of our erasure code it follows that in fact _ all _ delegated bits in these rows are equal to each other ( with every @xmath117th bit in @xmath639 being equal to the @xmath117th bit in @xmath640 ) .",
    "therefore , all bits @xmath286 in @xmath639 and @xmath640 are the same ( on the ground level ) .",
    "we can use these bits to reconstruct subconsciousness of @xmath166 and get a consistent tiling in @xmath166 .",
    "we are almost done .",
    "bi - island @xmath27 is corrected ; we reconstructed conscious information for the @xmath17-level macro - tile @xmath166 and for all its @xmath574-level sons .",
    "now we can reconstruct fields [ f ] in the damaged @xmath574-level macro - tiles inside @xmath166 .",
    "this is simple to do .",
    "we just take the corresponding bits @xmath286 from the zone of responsibility ( shared by @xmath166 , @xmath639 , and @xmath640 ) .",
    "it remains only to explain why the checking procedure does not fail for these groups of bits ( i.e. , @xmath574-level macro - tiles do not discover in these bit strings any factors of low kolmogorov complexity ) .",
    "but this is true because macro - tiles of levels @xmath574 ( and also below @xmath574 ) inside @xmath166 apply exactly all the same checks to exactly the same groups of bits @xmath286 as the macro - tiles in the corresponding positions in @xmath639 and @xmath640 .",
    "since there is no errors in @xmath639 and @xmath640 , these computations do not lead to a contradiction .",
    "let us inspect again the correction procedure just explained ; we should notice which tiles are involved in the error - correcting process around bi - island @xmath27 . in the @xmath574-level macro - tiles outside the `` gray zone '' we change nothing .",
    "moreover , not all the gray zone needs to be changed  only the part between two clusters of @xmath27 ( and their small neighborhoods ) is affected . indeed , in all tiles of @xmath166 that are above @xmath27 the assigned bits @xmath286 are the same as in the corresponding columns of @xmath639 ; in the tiles of @xmath166 that are below @xmath27 the assigned bits @xmath286 are the same as in the corresponding columns of @xmath640 .",
    "hence , there is no need to correct `` subconscious information '' of @xmath574-level macro - tiles that are above or below @xmath27 .",
    "only the area between two clusters of @xmath27 requires corrections .",
    "more precisely , the area involved in the correcting procedure is inside the extended neighborhood of @xmath27 .",
    "( in fact , this argument is the motivation of our definition of extended neighborhood . )",
    "thus , we have proven that this step - by - step correcting procedure eliminates all bi - islands of errors and only extended @xmath402-neighborhoods of @xmath17-level bi - islands are involved in this process . now theorem  [ thm - complex - errors ]  ( part 3 )",
    "follows from lemma  [ lemma - bi - island-3 ] .",
    "it remains only to prove part  4 of the theorem .",
    "we do this in the next section .",
    "it remains to prove part ( 4 ) of theorem  [ thm - complex - errors ] . in the previous section we proved that if the set of errors @xmath172 is bi - sparse , then a @xmath316-tiling @xmath38 can be converted into a @xmath3-tiling @xmath630 of the entire plane , and the difference between @xmath38 and @xmath630 is covered by extended @xmath402 neighbors of @xmath17-level bi - islands from @xmath172 ( @xmath644 ) .",
    "now we want to show that , in the initial tiling @xmath38 , the kolmogorov complexity of centered squares of size @xmath23 was @xmath60 .",
    "fix a point @xmath21 . since @xmath172 is bi - sparse , @xmath21 is covered by @xmath383-neighborhoods of only finitely many bi - islands .",
    "hence , for large enough @xmath483 , the @xmath645 square @xmath646 centered at @xmath21 intersects extended @xmath402-neighborhoods of @xmath17-level bi - islands only if @xmath647 .",
    "( if the extended @xmath402-neighborhood of some bi - island intersects @xmath646 and @xmath648 , then @xmath649 and @xmath21 is covered by the @xmath383-neighborhood of this bi - island . ) therefore , to reconstruct @xmath630 in @xmath646 it is enough to correct there all bi - islands of bounded levels ( such that @xmath647 ) .    to reconstruct @xmath630 in @xmath646 we need to know the original tiling @xmath38 in @xmath646 and some neighborhood around it ( i.e. , in some centered @xmath650 square @xmath651 , which is only greater than @xmath646 by a constant factor )",
    "indeed , given the tiling @xmath38 restricted on @xmath651 , we can locally correct there bi - islands of levels @xmath652 ( such that @xmath647 ) one by one . correcting a bi - island of errors in @xmath651",
    "we obtain the same results as in the error - correcting procedure on the entire plane @xmath16 unless this bi - island is too close to the border of @xmath651 ( and the local correction procedure should involve information outside @xmath651 ) .",
    "thus , we can reconstruct @xmath630-tiling not in the entire @xmath651 but in points that are far enough from the border of this square .",
    "if @xmath653 for large enough @xmath275 , then @xmath651 provides enough information to reconstruct @xmath630 in @xmath646 .",
    "we know that kolmogorov complexity of error - free tiling @xmath630 in @xmath654 is @xmath655 .",
    "therefore , the kolmogorov complexity of the original @xmath38-tiling in the greater square @xmath651 is also @xmath655 .",
    "since @xmath656 is only greater than @xmath483 by a constant factor , we get that the kolmogorov complexity of the @xmath316-tiling @xmath38 restricted to the centered @xmath657 square is @xmath658 .",
    "theorem  [ thm - complex - errors ] is proven .",
    "the results included in this paper were discussed with many colleagues , including peter gcs , leonid levin , and our french collaborators meghyn bienvenu , laurent bienvenu , emmanuel jeandel , gregory lafitte , nicolas ollinger , and michael weiss .",
    "we are grateful to all of them and to the participants of seminars ( the kolmogorov seminar at moscow state university , the iitp seminars , and the frac seminar ) and conferences ( dlt  2008 and icalp  2009 ) where some of these results were presented .",
    "we appreciate the detailed comments and many useful suggestions given by the anonymous referee .",
    "n.  aubrun , m.  sablik , simulation of recursively enumerable subshifts by two - dimensional sft and a generalization , preprint available at the home page of m.  sablik , ` http://www.latp.univ-mrs.fr/~sablik/article/simulsre.pdf ` ( as of august 5 , 2010 ) .        l.  bienvenu , a.  romashchenko , a.  shen , sparse sets , _ journes automates cellulaires 2008 ( uzs ) _ ,",
    "1828 , moscow center for continuous mathematical education , moscow , 2008 , available online at http://hal.archives-ouvertes.fr/docs/00/27/40/10/pdf/18-28.pdf      b.  durand , l.  levin , a.  shen , complex tilings , _ j. symbolic logic _ , * 73*(2 ) , 593613 , 2008 ; see also _ proc . _",
    "_ 33rd ann .",
    "theory computing _ , pp . 732739 , 2001 , and",
    "` www.arxiv.org/cs.cc/0107008 ` for an earlier version .",
    "b.  durand , a.  romashchenko , a.  shen , fixed point and aperiodic tilings , in _ developments in language theory , 12th international conference , dlt 2008 , kyoto , japan , september 1619 , 2008 , proceedings _ , lecture notes in computer science , * 5257 * , springer - verlag , berlin , 276288 , 2008 .",
    "b.  durand , a.  romashchenko , a.  shen , high complexity tilings with sparse errors , in _ automata , languages and programming , 36th international colloquium , icalp 2009 , rhodes , greece , july 512 , 2009 , proceedings , part i , _ lecture notes in computer science , * 5555 * , springer - verlag , berlin , 403414 , 2009 .",
    "g.  lafitte and m.  weiss , computability of tilings , in _ proc .",
    "_ _ international federation for information processing , fifth ifip international conference on theoretical computer science _",
    "( ifip - tcs 2008 ) , vol .  273 , 187201 , 2008 .",
    "pritykin , j.  ulyashkina , aperiodicity measure for infinite sequences , computer science  theory and applications , in _ fourth international computer science symposium in russia , csr 2009 , novosibirsk , russia , august  1823 , 2009 _ , lecture notes in computer science , * 5675 * , springer - verlag , berlin , 2009 , pp .",
    "274285 .",
    "rumyantsev , m.  ushakov , forbidden substrings , kolmogorov complexity and almost periodic sequences , in _",
    "stacs 2006 proceedings _ , lecture notes in computer science , * 3884 * , springer - verlag , berlin , 2006 .",
    "a.  shen , algorithmic information theory and kolmogorov complexity , lecture notes of a course taught at uppsala university , available as a technical report at ` http://www.it.uu.se/research/publications/reports/2000-034/ ` ."
  ],
  "abstract_text": [
    "<S> an aperiodic tile set was first constructed by r.  berger while proving the undecidability of the domino problem . </S>",
    "<S> it turned out that aperiodic tile sets appear in many fields , ranging from logic ( the entscheidungsproblem ) to physics ( quasicrystals ) .    </S>",
    "<S> we present a new construction of an aperiodic tile set that is based on kleene s fixed - point construction instead of geometric arguments . </S>",
    "<S> this construction is similar to j.  von neumann s self - reproducing automata ; similar ideas were also used by p.  gcs in the context of error - correcting computations .    </S>",
    "<S> this construction is rather flexible , so it can be used in many ways . </S>",
    "<S> we show how it can be used to implement substitution rules , to construct strongly aperiodic tile sets ( in which any tiling is far from any periodic tiling ) , to give a new proof for the undecidability of the domino problem and related results , to characterize effectively closed one - dimensional subshifts in terms of two - dimensional subshifts of finite type ( an improvement of a result by m.  hochman ) , to construct a tile set that has only complex tilings , and to construct a `` robust '' aperiodic tile set that does not have periodic ( or close to periodic ) tilings even if we allow some ( sparse enough ) tiling errors . for the latter , </S>",
    "<S> we develop a hierarchical classification of points in random sets into islands of different ranks . </S>",
    "<S> finally , we combine and modify our tools to prove our main result : there exists a tile set such that all tilings have high kolmogorov complexity even if ( sparse enough ) tiling errors are allowed .    </S>",
    "<S> some of these results were included in the dlt extended abstract  @xcite and in the icalp extended abstract  @xcite . </S>"
  ]
}