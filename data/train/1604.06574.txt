{
  "article_text": [
    "fiber optical communication system are a challenging environment for forward error correction ( fec ) schemes .",
    "modern high - speed optical communication systems require high - performing fec engines that support throughputs of 100 gbit / s and multiples thereof , that have low power consumption , that realize net coding gains ( ncgs ) close to the theoretical capacity limits at a target ber of @xmath0 , and that are preferably adapted to the peculiarities of the optical channel  @xcite .",
    "although coding schemes that allow for soft - decision decoding are now well established in optical communications  @xcite , especially in long - haul and submarine transmission systems which need to operate at the lowest possible signal - to - noise ratio ( snr ) , hard - decision decoding is still predominant in the widely deployed metro networks , due to its low complexity leading to power - friendly receiver implementations  @xcite .",
    "such low - complexity receivers are also attractive for data center interconnect applications .    in the recent years , several new capacity - approaching coding schemes suitable for high - speed optical communications have been presented .",
    "staircase codes @xcite , are hard - decision decoded , spatially - coupled codes with practical application in forward error - correction for long - haul optical - fiber transmission systems .",
    "an itu - t g.709-compatible staircase code with rate @xmath1 was shown to operate within 0.56db of the capacity of the binary - input awgn channel with hard decision at the output ( which is equivalent to a binary symmetric channel ( bsc ) ) at a bit - error rate ( ber ) of @xmath0 @xcite .",
    "its gap to capacity is smaller than all of the enhanced coding schemes proposed in itu - t recommendation g.975.1 @xcite . in @xcite ,",
    "staircase codes with rates @xmath2 were shown to be within 0.80 db of capacity in terms of ncg at a ber of @xmath0 .",
    "such coding gains are obtained by using an iterative , hard - decision decoding algorithm with decoder data - flow orders of magnitude lower than that of message - passing decoders for sparse - graph codes such as turbo or low - density parity - check ( ldpc ) codes @xcite . for long - haul optical - fiber transmissions systems where bit - rates exceed 100 gb / s , staircase codes are often the best practical solution .    besides staircase code and variants thereof  @xcite , several other code constructions based on spatial coupling of algebraic component codes have been proposed , e.g. , braided bch codes  @xcite .",
    "recently , multiple works show that these codes can approach capacity of the bsc under simple iterative decoding when the rate is large enough  @xcite .",
    "however , all the proposed structures of spatially coupled algebraic product codes are recursive codes which lead to several practical drawbacks in their implementation : first , a recursive structure requires extra circuitry  @xcite for terminating the code , which may be undesired in some applications where a low - complexity decoder implementation is crucial .",
    "previous publications have not explicitly dealt with code termination but have only considered free - running , non - terminated codes . terminating a feed - forward code on the other hand is straightforward .",
    "a second drawback of recursive codes is the effect of _ parity - propagation _ ; a single non - zero information bit leads to an infinitely extending parity sequence .",
    "this effect may be undesired in some optical transmission applications , where the transceivers are usually free - running due to the setup times of links  @xcite and only some of the transmitted bits carry useful information .",
    "parity propagation limits in this case the possibility of switching off the forward error correction circuitry during times when no useful data is transmitted , non - negligibly increasing the transceiver power consumption  @xcite .    in this paper",
    ", we discuss several options for constructing feed - forward staircase codes .",
    "it becomes quickly obvious that a straightforward modification of the staircase encoding structure to avoid parity propagation will lead to unacceptably high error floors for most applications . in order to mitigate the error floor",
    ", we use the technique of self - protecting parity - bits  ( * ? ? ?",
    "i.9 ) together with a clever interleaving to construct a class of feed - forward staircase codes .",
    "we also give an approximation of the expected error floor based on the minimum size stall pattern . in some applications with very stringent requirements ,",
    "the error floor may still be too large .",
    "for this reason , in the second part of the paper , we slightly relax the parity - propagation constraint and present _ partial feed - forward _ staircase codes , which have the same error floor as the original staircase codes but completely avoid parity - propagation and allow for easy termination .",
    "this paper is structured as follows : in sec .",
    "[ sec : background ] , we introduce the basic notation and recapitulate the structure and main properties of staircase codes . in sec .",
    "[ sec : ff_sc ] , we introduce a first construction of feed - forward staircase codes based on self - protected parity - bits . in sec .",
    "[ sec : pff_sc ] , we slightly generalize this construction and introduce partial feed - forward staircase codes , which have a slightly lower rate but improved error floor properties .",
    "error floor approximations based on minimal stall patterns are derived in sec .",
    "[ subsec : error_floor ] .",
    "finally , we compare in sec .  [ sec : simulations ] the performance of both schemes using a coding setup typically used in optical communications .",
    "in this section , we briefly overview the encoding and decoding of staircase codes since the proposed codes share many common features with the original staircase code .",
    "we also motivate our work by examining the parity - propagation property of staircase codes .",
    "given integers @xmath3 , @xmath4 where @xmath5 , let @xmath6 \\triangleq \\{a , a+1,\\dots , b\\}$ ] .",
    "for an @xmath7 matrix @xmath8 , we denote a vectorization of @xmath8 by @xmath9 , where the resulting vector is assumed to be a column vector and the mapping between matrix and vector indices is given by a bijection @xmath10\\times[0,n-1 ] \\to [ 0,mn-1]$ ] .",
    "the inverse of @xmath11 is denoted by @xmath12 with the underlying mapping @xmath13 , the inverse of @xmath14 .",
    "for example , the mappings of the column - wise vectorization and its inverse are given by @xmath15 we denote the @xmath16 unit vector with a single @xmath17 in the @xmath18th position by @xmath19 .",
    "we denote the @xmath20 identity matrix by @xmath21 and the @xmath7 all - zeros matrix by @xmath22 .",
    "let @xmath23 denote the @xmath20 elementary permutation matrix , obtained by cyclically shifting each row of @xmath24 to the right by @xmath17 .",
    "recall that for @xmath25 , @xmath26 is a permutation matrix obtained by cyclically shifting each row of @xmath24 to the right by @xmath18 .",
    "given an @xmath7 matrix @xmath27 and another matrix @xmath28 , their kronecker product is defined as @xmath29.\\ ] ] a block diagonal matrix consisting of @xmath30 copies of a matrix @xmath8 along its diagonal is given by @xmath31 .",
    "we denote a block diagonal matrix consisting of @xmath30 arbitrary matrices @xmath32 of the same size along its diagonal by @xmath33      an illustration of a staircase code is shown in fig .",
    "[ fig : staircase ] .",
    "the fundamental building block is a binary , linear , systematic block code @xmath34 , referred to as a _ component code _",
    ", with block - length @xmath35 ( required to be even ) and number of information bits @xmath36 .",
    "let @xmath37 be the component code rate . for @xmath38 , the dimension of each staircase block",
    "@xmath39 is @xmath40 . for a staircase code to have non - trivial rate (",
    "i.e. , @xmath41 ) the component code rate must satisfy @xmath42 .     are fixed . ]",
    "the first staircase block @xmath43 is fixed to all - zero bit - values .",
    "let @xmath44 be the number of parity bits in a component codeword .",
    "let @xmath45 be a @xmath46 systematic generator matrix for @xmath47 .",
    "we denote by @xmath48 the @xmath49 sub - matrix of @xmath45 containing the @xmath50 columns which correspond to the parity bits in each codeword . for @xmath51 , given block @xmath52 , to encode the @xmath18th block , first fill an @xmath53 matrix @xmath54 with information bits .",
    "next , calculate the @xmath55 matrix @xmath56 of parity bits according to @xmath57 where @xmath58 denotes matrix transpose . the @xmath18th block is then given by @xmath59 .",
    "the rate of a staircase code is given by @xmath60 where we assumed that the smallest transmission granularity is a complete block @xmath39 .",
    "staircase codes are decoded using a _ sliding - window decoder_. consider the blocks in fig .",
    "[ fig : staircase ] now to be received blocks buffered in a decoding window of length 6 , with all except @xmath61 corrupted by a bsc .",
    "decoding proceeds in iterations .",
    "let @xmath62 denote decoding iterations , with the maximum number of iterations denoted by @xmath63 . during iteration @xmath64 , for each @xmath65 , form the matrix @xmath66 and decode each row of the matrix by a component code decoder , e.g. , a syndrome decoder .",
    "once @xmath67 is reached , the window `` slides '' by shifting out decoded block @xmath43 and shifting in a newly received block @xmath68 .",
    "the decoding process continues indefinitely in this manner .    in practice",
    ", the component code decoder can be implemented using efficient table - lookup methods for syndrome decoding to achieve very high decoding throughputs ( * ? ? ?",
    "* appendix)@xcite .      substituting @xmath69 into ( [ eqn : sc_encode ] )",
    ", we obtain @xmath70 which is a linear recursion of the parity - bit matrix @xmath56 .",
    "we refer to this as the _ parity - propagation _ property of staircase codes .",
    "the presence of feedback in the encoding process leads to a number of issues , the most significant of which is the lack of a termination mechanism .",
    "although staircase codes were designed for continuous transmission applications where termination is not necessary , allowing the encoding process to terminate after a certain number of blocks would extend their domain of application significantly .",
    "furthermore , a terminated staircase code can be decoded by two sliding window decoders working in parallel from both ends of the code .",
    "the decoding throughput is doubled at a cost of extra hardware , a favorable trade - off in high - throughput optical - fiber systems .",
    "the most pragmatic approach to mitigate the effect of parity propagation would be to not re - encode the parity bit block @xmath56 .",
    "such an approach is shown in fig .",
    "[ fig : ff_staircase_simple ] .",
    "however , it becomes quickly obvious that this approach suffers from some important problems .",
    "most importantly , if high - rate component codes with error correcting capability @xmath71 are used , the occurrence of @xmath72 errors in the parity - part of a component code will not be corrected .",
    "hence , if there are @xmath72 errors in the parity part of a vertical codeword , @xmath72 errors in the parity part of a horizontal codeword and an additional error in the intersection of both vertical and horizontal codewords , this additional error will not be corrected and will contribute to the error floor of the code , which will become unacceptably high for most applications .",
    "especially in optical communications , where usually residual bit error rates in the range of @xmath73 to @xmath0 are required , a different approach is necessary .        ,",
    "white ) and column redundancy bits ( @xmath74 , @xmath75 , shaded dark ) are transmitted .",
    "row redundancy bits ( @xmath76 , @xmath77 , shaded light ) are punctured .",
    "bits in block @xmath43 are fixed .",
    "the small squares illustrate permutation selected for low error - floors . ]    in order to design a code with acceptable error floors , we adopt the parity self - protection technique proposed in  ( * ? ? ?",
    "i.9 ) to ensure that errors in the parity part of the code do not cause large residual error floors .",
    "the structure of the proposed feed - forward staircase code ( ff - sc ) with parity self - protection is shown in fig .  [",
    "fig : ff_staircase ] .",
    "the dark shaded blocks at the bottom of even - indexed information blocks are referred to as column _",
    "redundancy blocks_. each column redundancy block consists of a parity block @xmath78 and a _ self - protection _",
    "block @xmath74 .",
    "the lightly shaded blocks to the right of odd - indexed information blocks are referred to as row redundancy blocks , each consisting of a parity block @xmath79 and a self - protection block  @xmath76 , which are both punctured ( indicated by the light shading in fig .",
    "[ fig : ff_staircase ] ) .    as in a staircase code",
    ", an ff - sc parity block contains parity bits calculated during component code encoding .",
    "the key difference in an ff - sc is that the bits in a self - protection block , which are a sub - set of the information bits of component codes , are additionally constrained .",
    "let @xmath80 and @xmath81 be permutations defined by @xmath82 where @xmath83 , @xmath27 is an @xmath55 matrix , and @xmath84 is an @xmath85 permutation matrix . by definition",
    ", @xmath86 are bijective maps , with the property @xmath87 .",
    "we define the _ self - protection constraints _",
    "@xmath88 since @xmath86 are bijective , as long as the self - protection constraints are satisfied , we can puncture either the column or row redundancy blocks .",
    "for consistency with fig [ fig : ff_staircase ] , we puncture the row redundancy blocks in the following .    due to the constraints imposed on self - protection blocks ,",
    "@xmath89 must satisfy @xmath90 , hence @xmath91 ( assuming @xmath36 and @xmath50 have the same parity , which can be achieved with shortening ) . for computing the rate , we first assume that always an even number of blocks @xmath39 are transmitted as smallest granularity .",
    "the rate of an ff - sc is then @xmath92 which is identical to the rate of a staircase code .",
    "if we want to achieve the finer granularity of conventional staircase codes with single blocks , we define that the parity and self - protection blocks @xmath74 and @xmath75 are attached to each block with odd index . in that case , with a total of @xmath93 blocks transmitted we have @xmath94 which takes into account the potential transmission of an odd number of blocks . as @xmath95 ,",
    "we get @xmath96      we slightly generalize the component code definition to allow _ different _ binary linear block codes to be used as row and column component codes . given block - length @xmath35 and number of information bits @xmath36 ,",
    "let @xmath97 be a row component code with @xmath46 systematic generator matrix @xmath45 .",
    "let @xmath98 be a column component code with @xmath46 systematic generator matrix @xmath99 .",
    "let @xmath48 and @xmath100 denote the sub - matrices containing the @xmath50 columns of @xmath45 and @xmath99 corresponding to parity - bits .    due to the self - protection block , the last @xmath50 bits out of @xmath36 information bits in a component codeword are constrained .",
    "we highlight this fact by partitioning @xmath48 and @xmath100 according to @xmath101 \\ ; { \\bm{f}}_p = \\left[\\begin{array}{c } { \\bm{f}}_i \\\\ { \\bm{f}}_r \\end{array}\\right],\\ ] ] where @xmath102 and @xmath103 are @xmath104 matrices and @xmath105 and @xmath106 are @xmath107 matrices .",
    "consider the encoding operation over information blocks @xmath43 , @xmath108 , and @xmath109 in fig .",
    "[ fig : ff_staircase ] .",
    "subsequent blocks are encoded in the same manner . by horizontally concatenating @xmath43 and @xmath108",
    ", we obtain @xmath110 by vertically concatenating @xmath108 and @xmath109 , we obtain @xmath111 note that @xmath112 and @xmath113 are not the same as @xmath77 and @xmath75 .",
    "consider the entries of the @xmath114 matrix @xmath76 and the @xmath115 matrix @xmath74 to be variables . according to the structure shown in fig .",
    "[ fig : ff_staircase ] , we can write @xmath77 and @xmath75 as @xmath116 imposing self - protection conditions ( [ eqn : self_protection1 ] ) and ( [ eqn : self_protection2 ] ) , we obtain @xmath117    each of the above terms is an @xmath115 matrix .",
    "let @xmath11 be the column - wise vectorization and let @xmath118 , @xmath119 , and @xmath120 .",
    "let @xmath121 be the permutation matrix satisfying @xmath122 .",
    "using the fact that for some matrix @xmath123 @xmath124 the above expression can be written as @xmath125\\bm{y } \\triangleq { \\bm{a}}\\bm{y}.\\end{gathered}\\ ] ] if @xmath27 is invertible , then the matrix @xmath74 is given by @xmath126    the invertibility of @xmath27 depends on the choices of @xmath97 , @xmath98 , @xmath99 , @xmath45 , @xmath127 , and @xmath128 . using the same row and column component codes , we have found that searching over the space of all @xmath127 and @xmath128 can quickly produce an invertible @xmath27 .",
    "the search and calculation of @xmath129 can be performed offline at design time , since information bits are only involved in the calculation of @xmath130 .",
    "the main complexity of ff - sc encoding is the multiplication in ( [ eqn : ff_encode ] ) between an @xmath85 matrix and an @xmath131 vector .",
    "the complexity of this operation highly depends on the choice of permutation matrices @xmath127 and @xmath128 .",
    "for instance , the permutation matrices may be chosen such that the hardware implementation is simplified or such that @xmath129 has a special structure easing the multiplication .",
    "decoding of ff - sc is very similar to conventional staircase codes .",
    "a sliding window decoder is used starting from block @xmath43 . when corrections are made in a column redundancy",
    "block the corresponding row redundancy block is also modified , and vice versa .",
    "additional logic is required to implement the permutations @xmath80 , @xmath81 , and their inverses .",
    "we describe a choice of permutations @xmath80 and @xmath81 suitable for applications requiring very low error - floors .",
    "the permutations @xmath80 , @xmath81 are defined by the permutation matrices @xmath132 together with column - wise vectorization @xmath11 and its inverse @xmath12 .",
    "these permutations cyclically shift each column of @xmath76 and @xmath77 by a number of bits related to their column index , an example of which is shown in fig .",
    "[ fig : ff_staircase ] .",
    "they can be implemented efficiently in hardware using barrel shifters .",
    "discussions of the estimated and simulated error - floor performance under these permutations are given in sec .",
    "[ subsec : error_floor ] .",
    "although self - protection allows us to considerably reduce the error floor of feed - forward staircase codes , the error floor ( see sec .  [",
    "sec : simulations ] ) may still be unacceptably high for some applications requiring very low residual bers , e.g. , optical core networks .",
    "we therefore slightly relax the parity - propagation constraint by allowing the parity bits to propagate over some blocks and introduce _ partial feed - forward staircase codes _",
    "( pff - scs ) .",
    "let @xmath133 be the _ propagation length _ of a pff - sc , defined as the maximum number of consecutive blocks over which parity - propagation can occur .",
    "the pff - sc then uses a hybrid structure , with @xmath134 blocks being standard staircase code blocks followed by one block with parity bits that are not re - encoded but where self - protection is used to mitigate the detrimental effect of harmful error patterns .",
    "the self - protection scheme also results in one block containing only information bits .",
    "figure  [ fig : pff_staircase ] illustrates the structure of a pff - sc with @xmath135 . in this example , @xmath136 out of every @xmath137 blocks are standard staircase code blocks and @xmath17 out of every @xmath137 blocks contains only information bits .",
    "self - protection is used to stop parity - propagation after @xmath135 blocks .",
    "another major difference in pff - scs is the position of the self - protection redundancy blocks , which are part of the conventional staircase structure .",
    "this modification allows the permutations @xmath80 , @xmath81 to be trivial and drastically reduces the error - floor as compared to ff - sc ( see sec .",
    "[ sec : simulations ] ) .",
    "another difference is that the number of information bits per block @xmath39 is not constant . as in ff - sc",
    ", we set @xmath138 to account for the self - protection and all blocks contain @xmath139 code bits .",
    "the component codes are shortened respectively . in order to accommodate the position of self - protection redundancy blocks @xmath74 , the component codes involved in self - protection ( e.g. , codes over blocks @xmath109 and @xmath140 as well as @xmath68 and @xmath141 in fig .",
    "[ fig : pff_staircase ] ) must be shortened by an extra @xmath142 bits relative to the other component codes .      in order to compute the rate of pff - scs ,",
    "we count the number of information bits per block .",
    "the first @xmath134 blocks @xmath143 , @xmath144 out of @xmath145 blocks ( e.g , @xmath108 and @xmath109 in fig .  [ fig : pff_staircase ] )",
    "are standard staircase code blocks of size @xmath146 with @xmath147 information bits .",
    "the block @xmath148 , @xmath144 contains exactly @xmath149 information bits and finally , the block @xmath150 , @xmath144 contains exactly @xmath151 information bits . for computing the rate , we must fix again the granularity of transmission . if we assume that always @xmath145 blocks @xmath152 , @xmath153 are transmitted , then the rate can be computed as @xmath154 which is independent of @xmath155 . as @xmath156",
    ", we can conclude that @xmath157 as @xmath158 has to hold ( see sec .",
    "[ subsec : staircase_enc ] ) .",
    "however , at high rates the differences are small . for example",
    ", @xmath159 is within @xmath160 of @xmath161 for @xmath162 and within @xmath163 for @xmath164 .",
    "note that a pff - sc of non - trivial rate requires @xmath165 .",
    "this result may seem counter - intuitive at first glance , since it appears that we should recover the original staircase code rate @xmath161 for @xmath166 .",
    "however , contrary to the original staircase code construction ( see sec .",
    "[ sec : background ] ) , in the proposed construction the component codes of the staircase - like blocks are shortened by @xmath142 , which leads to the observed rate difference .",
    "we could relax the granularity constraint of @xmath145 blocks and find an expression for @xmath167 .",
    "as this expression is cumbersome and does not lead to any new insights , we omit it here . for practical purposes ,",
    "it is customary to restrict ourselves to the granularity of @xmath145 blocks , allowing for easy termination and avoiding possibly higher error rates at the code boundaries .      in this subsection",
    ", we describe the encoder of pff - sc .",
    "we focus only on the self - protection blocks , since @xmath134 out of @xmath145 consecutive blocks are encoded in the same way as the original staircase code .",
    "our explanations will focus on fig .",
    "[ fig : pff_encode ] , which highlights blocks @xmath109 , @xmath140 , @xmath168 , @xmath74 , @xmath75 , @xmath76 , and @xmath77 of fig .  [ fig : pff_staircase ] for @xmath135 .    figure [ fig : pff_encode ] further sub - divides each block into sub - blocks .",
    "the encoding process consists of two stages .",
    "stage 1 calculates @xmath169 .",
    "stage 2 calculates @xmath170 based on @xmath169 . in terms of implementation complexity ,",
    "stage 1 is equivalent to component code encoding while stage 2 is a general matrix multiplication .",
    "fortunately , for high code rates where @xmath171 , the encoding complexity is dominated by stage 1 .",
    "we inherit the definitions of matrices @xmath48 , @xmath100 , @xmath102 , @xmath103 , and @xmath105 , @xmath106 from sec .  [ sec : ff_sc ] . by horizontally concatenating @xmath172 , @xmath173 , and @xmath174",
    ", we obtain @xmath175 by vertically concatenating blocks @xmath176 , @xmath177 and @xmath172 , where @xmath176 accounts for the extra shortening of the column component codes , we obtain @xmath178 we write @xmath179 and @xmath180 as @xmath181 imposing self - protection constraints @xmath182 under trivial permutations and solving for @xmath169 gives @xmath183     sub - block at the top ( shaded light ) is shortened . ]    since @xmath184 if @xmath185 , a necessary condition for @xmath27 to be invertible is @xmath186 . here",
    "we satisfy this condition by using different binary cyclic codes as row and column component codes .",
    "however , instead of using different component codes with different error correction capabilities and potentially requiring distinct decoder hardware implementations , we propose the following construction : let @xmath187 and @xmath188 be generator polynomials for @xmath97 and @xmath98 .",
    "we require @xmath187 and @xmath188 to satisfy the condition @xmath189 where @xmath190 is the degree of the polynomial @xmath191 .",
    "the component codes then have the property that the `` mirror - image '' of a codeword @xmath192 , i.e. , @xmath193 , is a codeword of @xmath98 , and vice versa  ( * ? ?",
    "* ch . 7 ) .",
    "hence , the same decoder hardware can be reused to decode both component codes , with some simple bit - reversal logic .",
    "using different binary cyclic component codes with generator polynomials satisfying ( [ eqn : reciprocal ] ) gives an invertible @xmath27 as @xmath186 . by calculating @xmath129 offline at design time ,",
    "the complexity of finding @xmath169 and @xmath179 at encoding time is equivalent to a multiplication between an @xmath107 matrix and an @xmath194 matrix .      in stage 2 ,",
    "the blocks @xmath169 and @xmath179 are considered known . by vertically concatenating blocks",
    "@xmath195 , @xmath196 and @xmath173 we obtain @xmath197 hence @xmath198 we partition the matrix @xmath102 into @xmath199 sub - matrices with @xmath200 where @xmath201 , @xmath202 , and @xmath203 . we can now write @xmath204 using ( [ eqn : pc2 ] ) and the self - protection constraint @xmath205 , we have @xmath206{\\bm{g}}_i + \\begin{bmatrix } { \\bm{i}}_r \\\\ { \\bm{f}}_r^t \\end{bmatrix}{\\bm{y}}_2 { \\bm{g}}_b + { \\bm{y}}_2^t{\\bm{g}}_r.\\ ] ] imposing the self - protection constraint @xmath207 and simplification yields @xmath208 where @xmath27 was defined implicitly in ( [ eqn : a1 ] ) and with @xmath209{\\bm{g}}_i + \\begin{bmatrix}\\bm{0}_{2r\\times",
    "2r } & { \\bm{m}}_{0,2}^t & { \\bm{m}}_{1,2}^t\\end{bmatrix } { \\bm{f}}_i.\\ ] ] note that all terms in ( [ eqn : y2 ] ) are @xmath210 matrices .",
    "let @xmath11 now denote the _ row - wise _ vectorization given by the mapping @xmath211 .",
    "let @xmath212 and @xmath213 .",
    "let @xmath214 be the @xmath215 matrix",
    "where for @xmath216 $ ] and @xmath217 , the @xmath218th column of @xmath214 is the @xmath18th column of @xmath27 , with zeros elsewhere",
    ". we can then equivalently write ( [ eqn : y2 ] ) as @xmath219 where @xmath28 is the @xmath220 matrix given by @xmath221      since @xmath105 and @xmath106 were fixed in stage 1 in order to obtain an invertible @xmath27 , if @xmath28 is singular , the only way to obtain an invertible @xmath28 is to manipulate @xmath222 using elementary row operations . here",
    "we focus on row permutations of @xmath222 only , since they do not affect the error floor .",
    "let @xmath223 be a @xmath224 permutation matrix .",
    "denote the permuted @xmath222 by @xmath225 .",
    "a computer search can be used to find an appropriate @xmath226 that results in an invertible @xmath28 .",
    "given @xmath223 , the expressions for @xmath227 and @xmath28 are modified by replacing @xmath222 with @xmath228 . note that @xmath223 also affects stage 1 calculations , where ( [ eqn : pr1 ] ) has to be modified to @xmath229 for an invertible @xmath28 , the matrix @xmath170 is given by @xmath230    the complexity of calculating @xmath170 is dominated by the multiplication with a @xmath231 matrix . since only @xmath17 out of every @xmath145 blocks requires self - protection calculations , the average complexity of pff - sc approaches conventional staircase codes with increasing @xmath155 .",
    "error - floor analysis of staircase codes and its variants proposed in this paper depends on enumerating the number of _ stall patterns _ , i.e. , patterns of errors that the decoder can not remove  @xcite . to obtain a simple estimate of the error - floor , we only enumerate the smallest stall patterns resulting from channel errors , referred to as _ minimal _ stall patterns .",
    "we consider an erroneously decoded bit to be a bit error only if it is an information bit .",
    "a decoded block is considered to be a block error if it contains at least one bit error .",
    "the block ( bker ) and bit ( ber ) error - rates are defined according to these definitions .",
    "we estimate the block and bit error - floors of ff - sc based on low - error - floor permutations of sec .",
    "[ subsec : low_ef ] assuming transmission over a bsc with error probability @xmath232 .",
    "an example of a minimal stall pattern for component codes with @xmath233 is shown in fig .",
    "[ fig : ff_stall_pattern ] , consisting of @xmath137 information - bit errors and @xmath137 redundancy - bit errors from the channel .    to construct such a stall pattern , first choose any @xmath136 out of @xmath89 rows in the information block , such as the rows marked by the horizontal dashed and dash - dotted lines in fig .",
    "[ fig : ff_stall_pattern ] .",
    "denote the chosen rows by @xmath234 and @xmath235 . under the transposes in ( [ eqn : self_protection1 ] ) and ( [ eqn : self_protection2 ] ) ,",
    "the chosen rows are mapped to columns marked by the _ thin _",
    "vertical dashed and dash - dotted lines , reflected about the diagonal of the information block .    under the proposed low - error - floor permutations , bit errors in the row redundancy block",
    "are cyclically shifted by no more than @xmath236 columns , modulo @xmath89 , in the column redundancy block . in fig .",
    "[ fig : ff_stall_pattern ] , the range of cyclic shifts is bounded by the thin and corresponding _ thick _ vertical lines . for example , bit errors in the row redundancy block of @xmath234 may be shifted to columns within the thin and thick dashed vertical lines . for @xmath235 , bit errors in the row redundancy block",
    "may be shifted to columns within the thin and thick dash - dotted vertical lines , wrapping around the right boundary of the column redundancy block .",
    "given @xmath237 , we define its _ valid column set _ by @xmath238 \\}.\\ ] ]    it is simple to verify the following _ spreading property _ of the low - error - floor permutations : if @xmath239 , i.e. , @xmath240 or @xmath241 ( where @xmath242 denotes the overhead of the code , defined as @xmath243 ) , then row redundancy block bit - errors belonging to the same row _ can not _ belong to the same column in the column redundancy block .",
    "consequently , columns in the stall pattern can only be chosen from the _ intersection _ of valid column sets .",
    "the number of choices of such columns is @xmath244 in fig .",
    "[ fig : ff_stall_pattern ] , the intersection consists of columns bounded between the thin dashed and thick dash - dotted vertical lines and columns bounded between the thin dash - dotted and thick dashed vertical lines .",
    "the resulting error - floor estimates based on the simple upper - bound   are given by @xmath245 where @xmath232 denotes the error probability of the bsc .    .",
    "blue ( ) markers are bit errors in row component codes .",
    "red ( ) markers are bit errors in column component codes",
    ". dashed and dash - dotted lines are referred to in the derivation of error - floor estimates in sec .",
    "[ subsec : error_floor ] .",
    "note that only @xmath137 out of the @xmath246 bit errors in redundancy blocks are received from the channel , the other ones are interleaved versions thereof . ]    for arbitrary @xmath71 , let @xmath247 and @xmath248 . for odd @xmath71 , @xmath249 and",
    "the above argument for @xmath233 applies directly .",
    "observe that @xmath250 ( resp .",
    "@xmath251 ) is then the number of information ( resp . redundancy ) block bit - errors in each row of a minimal stall pattern .",
    "the error - floor estimates for odd @xmath71 are given by @xmath252    for even @xmath71 , we first choose @xmath250 rows out of @xmath89 in the information block . each erroneous row is assumed to contain @xmath250 bit errors in the information block and @xmath251 bit errors in the row redundancy block . under the spreading property , bit errors in the row redundancy block are spread to at least @xmath251 distinct columns in the column redundancy block . in the minimal stall pattern , there are _ exactly _ @xmath251 erroneous columns in the column redundancy block , each containing @xmath250 bit - errors ( since the total number of bit errors in the row redundancy block is @xmath253 ) .",
    "consequently , there must be @xmath251 erroneous columns in the information block , each containing at least @xmath254 bit - errors .",
    "we add one additional erroneous row , with @xmath250 bit errors in the information block and @xmath251 bit errors in the row redundancy block , to complete the minimal stall pattern .",
    "the resulting minimal stall pattern contains @xmath253 bit errors in the information block and @xmath255 bit - errors in the row ( or column ) redundancy block for a total of @xmath256 bit errors . applying the intersection of valid column sets argument for the number of choices of columns in the stall pattern ,",
    "we conclude that the error - floor estimates for even @xmath71 are also given by ( [ eqn : ff_sc_bker ] ) and ( [ eqn : ff_sc_ber ] ) .",
    "we estimate the block and bit error - floors of pff - sc based on the minimal stall pattern of weight @xmath257 , with all @xmath257 bits being information bits .",
    "this is the same minimal stall pattern as in the original staircase codes @xcite , obtained by choosing @xmath72 rows out of @xmath89 followed by @xmath36 columns out of @xmath89 in one block and @xmath258 columns out of @xmath89 in the adjacent block , for all @xmath259 $ ] .",
    "the error - floor estimates for general @xmath71 are given by @xmath260",
    "in this section , we consider ff - sc and pff - sc based on shortened primitive bch component codes .",
    "let @xmath261 be the _ degree of the extension field _ and @xmath262 be the _",
    "unique decoding radius _ of a primitive bch code .",
    "let @xmath263 be the number of bits to shorten each bch code in order to obtain a component code with block - length @xmath35 and number of information bits @xmath36 .",
    "given @xmath35 and @xmath36 , the values of @xmath30 , @xmath71 , and @xmath264 are determined by the constraints @xmath265 for fixed @xmath71 , we always choose the smallest @xmath30 that satisfies these constraints .",
    "given @xmath71 and the primitive element @xmath266 , the row generator polynomial is given by @xmath267}m_{\\alpha^i}(x)$ ] where @xmath268 is the minimal polynomial of @xmath269 .",
    "the column generator polynomial , which we choose to be the reciprocal polynomial of @xmath187 , is given by @xmath270}m_{\\alpha^{-i}}(x)$ ] where @xmath271    we constructed ff - sc and pff - sc of rates @xmath272 .",
    "the code parameters are shown in tables [ tbl : ff ] and [ tbl : pff ] .",
    "we chose @xmath233 so that error - floors can be studied in the simulation .",
    "furthermore , the selection of @xmath233 yields a very efficient decoder based on lookup tables  @xcite .",
    ".feed - forward staircase code parameters [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]     software simulated block and bit error - probabilities of transmission over a bsc using the codes of tables [ tbl : ff ] and [ tbl : pff ] are shown in fig .",
    "[ fig : sim ] , along with their error - floor estimates ( shown as thin lines with open markers ) .",
    "all ff - scs were implemented using the low - error - floor permutations of sec .",
    "[ subsec : low_ef ] .",
    "all pff - scs were implemented with @xmath273 .",
    "both proposed classes of codes show similar performance in the waterfall region .",
    "pff - scs have a slight performance loss at lower rates due to their rate loss , which requires a larger @xmath89 compared to an ff - sc of the same rate .    in the error - floor region ,",
    "even with low - error - floor permutations , ff - scs have observable error - floors . on the other hand , pff - scs , due to their similarity to the structure of the original staircase codes ,",
    "do not exhibit any bit error - floor above a ber of @xmath0 .",
    "in fact , the estimates of the bit error - floor are orders of magnitude below @xmath0 . for comparison",
    ", we also give the bit error rates of the original staircase codes ( @xmath274 ) constructed using the same component codes .",
    "we can see that the original staircase code slightly outperforms the ff - sc and pff - sc , especially for low rates , however , at high rates , the difference becomes negligible .",
    "this difference is most likely due to the stronger coupling between blocks in the original staircase code construction .",
    "let @xmath275 be the binary entropy function and @xmath276 be the inverse complementary error function . given a code of rate @xmath161 which achieves an output ber of @xmath0 at an input ber of @xmath277",
    ", we define the ncg gap to capacity ( in db ) by @xmath278 where @xmath279 is the unique @xmath280 such that @xmath281 .",
    "we extrapolate the ber curves of pff - sc down to @xmath0 in order to estimate @xmath277 .",
    "the values of @xmath277 with the corresponding @xmath282 are given in table [ tbl : pff ] .",
    "for comparison , we also included the @xmath283 of staircase codes of the same rates from  @xcite , which were found by exhaustively searching over a wide range of parameters @xmath30 and @xmath71 and are considered to be the best staircase codes based on the construction given in sec .",
    "[ sec : background ] and @xcite .",
    "the referenced codes were based on bch component codes with @xmath284 . nevertheless , the difference in ncg between pff - scs with @xmath233 and the reference codes are less than @xmath285db .",
    "error - floors of pff - scs and the reference codes are identical and well below @xmath0 .    ) staircase codes with parameters in tables [ tbl : ff ] and [ tbl : pff ] . for reference , conventional staircase codes ( @xmath274 ) are also shown .",
    "block and bit error - floor estimates are also shown ( thin lines , open markers ) . ]",
    "in this paper , we proposed two modifications to staircase codes which allow for convenient termination . in feed - forward staircase codes , a self - protection technique is used to completely eliminate parity - propagation . in partial feed - forward staircase codes , a propagation - length parameter is used to control the extent of parity - propagation .",
    "analysis and simulation results show that these codes have similar performance as the original staircase codes .",
    "ff - sc have slightly better waterfall performance than pff - sc , while pff - sc have much lower error - floors .",
    "hence , ff - sc and pff - sc are good staircase code solutions for applications where parity - propagation is undesirable or termination is necessary .",
    "b.  s.  g. pillai , b.  sedighi , k.  guan , n.  p. anthapadmanabhan , w.  shieh , k.  j. hinton , and r.  s. tucker , `` end - to - end energy modeling and analysis of long - haul coherent transmission systems , '' _ j. lightw",
    ". technol .",
    "_ , vol .",
    "32 , no .  18 , pp .",
    "30933111 , sep . 2014 .",
    "`` itu - t recommendation g.975.1 , forward error correction for high bit - rate dwdm submarine systems , '' feb .",
    "2004 , series g : transmission systems and media , digital systems and networks . international telecommunication union .",
    "c.  hger , a.  graell i amat , h.  pfister , a.  alvarado , brnnstrm , and e.  agrell , `` on parameter optimization for staircase codes , '' in _ proceedings of optical fiber communication conference and exposition ( ofc ) _ , los angeles , ca , usa , mar .",
    "jian , h.  d. pfister , k.  r. narayanan , r.  rao , and r.  mazareh , `` iterative hard - decision decoding of braided bch codes for high - speed optical communication , '' in _ proceedings of global communications conference ( globecom 2013 ) _ , atlanta , ga , usa , dec . 2013 , pp . 23982403 ."
  ],
  "abstract_text": [
    "<S> we propose two variants of staircase codes that resolve the issue of parity - propagation in their encoding process . </S>",
    "<S> the proposed codes provide a systematic way of terminating a staircase code after an arbitrary number of blocks . </S>",
    "<S> the class of feed - forward staircase codes are introduced , which uses a self - protection technique to avoid parity - propagation . </S>",
    "<S> we also introduce the class of partial feed - forward staircase codes , which allows parity - propagation to occur over a given number of blocks . by amortizing the complexity of self - protection over several standard staircase blocks , the encoding complexity of these codes </S>",
    "<S> is made comparable to staircase codes . </S>",
    "<S> partial feed - forward staircase codes have the same error - floor as staircase codes . </S>",
    "<S> simulations confirm that the performance of the proposed codes in both the waterfall and error - floor regions is similar to the original staircase codes . </S>",
    "<S> the proposed codes help extend the domain of application of staircase codes to systems in which parity - propagation is undesirable or termination is necessary . </S>"
  ]
}