{
  "article_text": [
    "persistent homology is a method for computing the topological features of a space at different spatial resolutions  @xcite .",
    "more persistent features are detected over a wide range of length and are deemed more likely to represent true features of the underlying space , rather than artifacts of sampling , noise , or particular choice of parameters . to find the persistent homology of a space  @xcite ,",
    "the space is represented as a sequence of simplicial complexes called a filtration .",
    "the most popular filtrations are nested sequences of increasing simplicial complexes but more advanced types of filtrations have been studied where consecutive complexes are mapped using more general simplicial maps  @xcite .",
    "persistent homology found applications in many areas ranging from image analysis @xcite , to cancer research @xcite , virology @xcite , and sensor networks @xcite .",
    "thus , a central question in computational topology and topological data analysis is to represent simplicial complexes and filtrations efficiently .",
    "the most common representation of simplicial complexes uses the hasse diagram of the complex that has one node per simplex and an edge between any pair of incident simplices whose dimensions differ by one .",
    "a more compact data structure , called simplex tree ( st ) , was proposed recently by boissonnat and maria @xcite .",
    "the nodes of both the hasse diagram and st are in bijection with the simplices ( of all dimensions ) of the simplicial complex . in this way , they explicitly store all the simplices of the complex and it is easy to attach information to each simplex ( such as a filtration value ) . in particular , they allow to store in a natural way the filtration of complexes which are at the core of persistent homology and topological data analysis .    however , such data structures are redundant and typically very big , and they are not sensitive to the underlying structure of the complexes .",
    "this motivated the design of more compact data structures that represent only a sufficient subset of the simplices .",
    "a first idea is to store the 1-skeleton of the complex together with a set of blockers that prevent the expansion of the complex  @xcite .",
    "a dual idea is to store only the simplices that are maximal for the inclusion . following this last idea , boissonnat et al .",
    "@xcite introduced a new data structure , called simplex array list , which was the first data structure whose size and query time were sensitive to the geometry of the simplicial complex .",
    "sal was shown to outperform st for a large class of simplicial complexes .",
    "although very efficient , sal , as well as data structures that do not explicitly store all the simplices of a complex , makes the representation of filtrations problematic , and in the case of sal , impossible . in this paper , we introduce a new data structure called critical simplex diagram ( csd ) which has some similarity with sal .",
    "csd only stores the critical simplices , i.e. , those simplices all of whose cofaces have a higher filtration value , and in this paper , we overcome the problems arising due to the implicit representation of simplicial complexes , by showing that the basic operations on simplicial complexes can be performed efficiently using csd . in short , csd compromises on the membership query ( which is slightly worse than that for st ) in order to save storage and to perform insertion and removal efficiently .      at a high level ,",
    "our main contribution through this paper is in developing a new perspective for the design of data structures representing simplicial complexes associated with a filtration .",
    "previous data structures such as hasse diagram and simplex tree interpreted a simplicial complex as a set of strings defined over the label set of its vertices and the filtration values as keys associated with each string .",
    "when a simplicial complex is perceived this way , a trie is indeed a natural data structure to represent the complex .",
    "however , this way of representing simplicial complexes does nt make use of the fact that simplicial complexes are not arbitrary sets of strings but are constrained by a lot of combinatorial structure .",
    "in particular , simplicial complexes are closed under subsets and also ( standard ) filtrations are monotone functions .",
    "we exploit these constraints / structure by viewing a simplicial complex as a monotone function from @xmath1 to @xmath2 , where @xmath3 is the vertex set and the filtration values are maintained to the nearest integer multiples of @xmath4 .",
    "we note that if a simplex is mapped to @xmath5 then , the simplex is understood to be not in the complex and if not , the mapping is taken to correspond to the filtration value of the simplex . in light of this viewpoint ,",
    "we propose a data structure ( csd ) which stores only the critical elements in the domain , i.e. those elements all of whose supersets are mapped to a strictly larger value . as a result , we are not only able to store data regarding a simplicial complex more efficiently but also explicitly utilize geometric regularity in the complex which would have been otherwise obscured .    as a direct consequence of the structure of the csd described above , we note that the construction of any simplicial complex with filtration , will be very efficient through csd , simply because we have to build a smaller data structure as compared to the existing data structures .",
    "more specifically , we propose a new _ edge - deletion _",
    "algorithm for the construction of flag complexes on @xmath6 vertices with @xmath7 critical simplices in time @xmath8 .",
    "additionally , we provide a _ matrix - parsing _",
    "algorithm for building @xmath9-dimensional relaxed delaunay complexes over the witness set @xmath10 in @xmath11 time .",
    "in each of these cases , we show that the construction is more efficient when using csd rather than st , primarily because csd is a compact representation .      in section  [ preliminaries ]",
    ", we introduce definitions which will be used throughout the paper and we provide new lower bounds on the space of data structures needed to store simplicial complexes . in section  [ csd ] , we introduce the new data structure csd to represent simplicial complexes and their filtration .",
    "further , we describe how the data structure can perform basic operations on the complex and also discuss about its efficiency . in section  [ flag ] ,",
    "we give a new algorithm for the construction of flag complexes . in section  [ delaunay ] ,",
    "we give a new algorithm for the construction of relaxed delaunay complexes .",
    "finally , in section  [ conclusion ] , we conclude by highlighting some open directions for future research .",
    "a simplicial complex @xmath0 is defined over a ( finite ) vertex set @xmath3 whose elements are called the vertices of @xmath0 and is a set of non - empty subsets of @xmath3 that is required to satisfy the following two conditions :    1 .",
    "@xmath12 2 .",
    "@xmath13    each element @xmath14 is called a simplex or a face of @xmath0 and , if @xmath14 has precisely @xmath15 elements @xmath16 , @xmath17 is called an @xmath18-simplex and the dimension of @xmath17 , denoted by @xmath19 is @xmath18 .",
    "the dimension of the simplicial complex @xmath0 is the largest @xmath9 such that it contains a @xmath9-simplex .",
    "a face of a simplex @xmath20 is a simplex whose vertices form a subset of @xmath21 . a proper face is a face different from @xmath17 and the facets of @xmath17 are its proper faces of maximal dimension .",
    "a simplex @xmath22 admitting @xmath17 as a face is called a coface of @xmath17 .    a maximal simplex of a simplicial complex is a simplex which is not contained in a larger simplex of the complex . a simplicial complex is pure , if all its maximal simplices are of the same dimension .",
    "also , a free pair is defined as a pair of simplices @xmath23 in @xmath0 where @xmath24 is the only coface of @xmath17 .    in this paper ,",
    "the class of simplicial complexes of @xmath6 vertices in @xmath9 dimensions with @xmath25 maximal simplices out of the @xmath26 simplices in the complex is denoted by @xmath27 , and @xmath0 denotes a simplicial complex in @xmath28 .    in figure",
    "[ fig : simplicialcomplexexample ] we see a three dimensional simplicial complex on the vertex set @xmath29",
    ". this complex has two maximal simplices : the tetrahedron @xmath30 $ ] and the triangle @xmath31 $ ] .",
    "we use this complex as an example through out the paper .",
    "we adopt the following notation through out the paper : @xmath32:=\\{1,\\ldots , t\\}$ ] and @xmath33 .",
    "a _ filtration _ over a simplicial complex @xmath0 is an ordering of the simplices of @xmath0 such that all prefixes in the ordering are subcomplexes of @xmath0 .",
    "more concretely , a filtration of a complex is a function @xmath34 satisfying @xmath35 whenever @xmath36 @xcite .",
    "moreover , we will assume that the filtration values range over @xmath37 .",
    "this can be interpreted as storing a filtration @xmath38 $ ] to the nearest integer multiple of @xmath4 , i.e. , informally , we are storing filtrations with precision @xmath4 .",
    "we say that a simplex @xmath14 is a * ` critical simplex ' * if for all cofaces @xmath24 of @xmath17 we have @xmath39 .",
    "for example , the critical simplices in the example described in figure  [ fig : simplicialcomplexexample ] are all the vertices , the edges @xmath40 , [ 14 ] , $ ] and @xmath41 $ ] , the triangles @xmath31 $ ] and @xmath42 $ ] , and the tetrahedron @xmath30 $ ] .",
    "boissonnat et al .  proved the following lower bound on the space needed to represent simplicial complexes @xcite .",
    "@xcite [ lowerbound ] consider the class of all @xmath9-dimensional simplicial complexes with @xmath6 vertices containing @xmath25 maximal simplices , where @xmath43 and @xmath44 , and consider any data structure that can represent the simplicial complexes of this class .",
    "such a data structure requires @xmath45 bits to be stored . for any constant @xmath46 and for @xmath47 and @xmath48 ,",
    "the bound becomes @xmath49 .",
    "we prove now a lower bound on the representation of filtrations of simplicial complexes .",
    "[ filtrationlowerbound ] let @xmath50 be greater than 1 .",
    "for any simplicial complex @xmath0 of dimension @xmath9 containing @xmath26 simplices , the number of distinct filtrations @xmath51 is at least @xmath52 .",
    "if @xmath53 for some constant @xmath54 then , any data structure that can represent filtrations of the class of all @xmath9-dimensional simplicial complexes containing @xmath26 simplices requires @xmath55 bits to be stored .",
    "let us fix a simplicial complex @xmath0 of dimension @xmath9 containing @xmath26 simplices .",
    "we will now build functions @xmath56 .",
    "for every @xmath57 , let @xmath58 be the representation of @xmath59 as a @xmath26 digit number in base @xmath60 and let @xmath61 be the @xmath62 digit of @xmath58 .",
    "let @xmath63 be a bijection from @xmath0 to @xmath64 $ ] .",
    "we define @xmath65 .",
    "we note that all the @xmath66s are distinct functions as for any two distinct numbers @xmath59 and @xmath67 in @xmath68 , we have that @xmath69 .",
    "finally , we note that each of the @xmath66s is a filtration of @xmath0 .",
    "this is because , for any two simplices @xmath70 , such that @xmath71 ( i.e. , @xmath72 ) , and any @xmath57 , we have that @xmath73 .",
    "it follows that there are at least @xmath52 distinct filtrations of @xmath0 . by the pigeonhole principle",
    ", we have that any data structure that can represent filtrations of @xmath0 requires @xmath74 bits .",
    "it follows that if @xmath53 for some constant @xmath54 then @xmath75 .",
    "thus , any data structure that can represent filtrations of @xmath0 requires at least @xmath76 bits to be stored .",
    "if @xmath77 , we can also obtain a lower bound and show that any data structure that can represent filtrations of precision @xmath4 of a simplicial complex of dimension @xmath9 containing @xmath26 simplices requires @xmath78 bits .",
    "this can be shown by modifying the above proof as follows .",
    "let @xmath79 be the set of all simplices of dimension @xmath80 .",
    "we identify a subset @xmath81 of @xmath82 $ ] of size @xmath83 , such that @xmath84 is at least @xmath85 .",
    "therefore , for every set @xmath79 , @xmath86 , we can associate @xmath83 distinct filtration values , which leads to the lower bound .",
    "the lower bounds in lemma  [ filtrationlowerbound ] is not sensitive to the number of critical simplices , and intuitively , any lower bound on the size of data structures storing complexes with filtrations needs to capture the number of critical simplices as a parameter .",
    "we adapt the proof of theorem  [ lowerbound ] and combine it with the ideas from the proof of lemma  [ filtrationlowerbound ] , to obtain the following lower bound .",
    "[ csdlowerbound ] consider the class of all simplicial complexes on @xmath6 vertices of dimension @xmath9 , associated with a filtration over the range of @xmath37 , such that the number of critical simplices is @xmath7 , where @xmath43 and @xmath87 , and consider any data structure that can represent the simplicial complexes of this class .",
    "such a data structure requires @xmath88 bits to be stored .",
    "for any constant @xmath46 and for @xmath89 and @xmath48 , the bound becomes @xmath90 .",
    "the proof of the first statement is by contradiction .",
    "let us define @xmath91 and suppose that there exists a data structure that can be stored using only @xmath92 bits .",
    "we will construct @xmath93 simplicial complexes ( associated with a filtration ) , all with the same set @xmath94 of @xmath6 vertices , the same dimension @xmath9 , with exactly @xmath7 maximal simplices , and with a filtration over the range of @xmath95 . by the pigeon hole principle , two different simplicial complexes ,",
    "say @xmath0 and @xmath96 , are encoded by the same word .",
    "so any algorithm will give the same answer for @xmath0 and @xmath96 .",
    "but , by the construction of these complexes , there is either a simplex which is in @xmath0 and not in @xmath96 or there is a simplex whose filtration value in @xmath0 is different from the simplex s filtration value in @xmath96 .",
    "this leads to a contradiction .",
    "the simplicial complexes and their associated filtration are constructed as follows .",
    "let @xmath97 be a subset of cardinality @xmath98 , and consider the set of all possible simplicial complexes of dimension @xmath9 with vertices in @xmath99 that contain @xmath100 critical simplices .",
    "we further assume that all critical simplices have dimension @xmath9 exactly .",
    "these complexes are @xmath101 in number , since the total number of maximal @xmath9 dimensional simplices is @xmath102 and we choose @xmath100 of them . let us call them @xmath103 .",
    "we now extend each @xmath104 so as to obtain a simplicial complex whose vertex set is @xmath94 and has exactly @xmath7 critical simplices .",
    "the critical simplices will consist of the @xmath100 maximal simplices of dimension @xmath9 already constructed ( whose filtration value is set to one of the values in @xmath32 $ ] ) plus a number of maximal simplices of dimension 1 ( whose filtration value is set to 0 ) .",
    "the set of vertices of @xmath104 , @xmath105 , may be a strict subset of @xmath99 .",
    "let its cardinality be @xmath106 and observe that @xmath107 .",
    "consider now the complete graph on the @xmath108 vertices of @xmath109 .",
    "any spanning tree of this graph gives @xmath110 edges and we arbitrarily choose @xmath111 edges from the remaining edges of the graph to obtain @xmath6 distinct edges spanning over the vertices of @xmath109 . we have thus constructed a 1dimensional simplicial complex @xmath112 on the @xmath108 vertices of @xmath109 with exactly @xmath6 maximal simplices . finally , we define the complex @xmath113 that has @xmath94 as its vertex set , dimension @xmath9 , and @xmath7 maximal simplices which are also the critical simplices .",
    "the filtration value of any simplex which is not maximal is defined to be the minimum of the filtration values of its cofaces in the complex .",
    "the set of @xmath114 , @xmath115 , where for each complex we associate @xmath116 different filtrations is the set of simplicial complexes ( associated with a filtration ) that we were looking for .    the second statement in the theorem",
    "is proved through the following computation : @xmath117    we note that in the above computation , the first inequality is obtained by applying the following bound on binomial coefficients : @xmath118 .",
    "let @xmath119 be a simplicial complex whose vertices are labeled from 1 to @xmath6 and ordered accordingly .",
    "we can thus associate to each simplex of @xmath0 a word on the alphabet set @xmath120 $ ] . specifically , a @xmath67-simplex of @xmath0 is uniquely represented as the word of length @xmath121 consisting of the ordered set of the labels of its @xmath121 vertices .",
    "formally , let @xmath122 be a simplex , where @xmath123 are vertices of @xmath0 and @xmath124 $ ] and @xmath125 .",
    "@xmath17 is represented by the word @xmath126 = [ \\ell_0 , \\cdots , \\ell_j ] $ ] .",
    "the simplicial complex @xmath0 can be defined as a collection of words on an alphabet of size @xmath6 .",
    "to compactly represent the set of simplices of @xmath0 , the corresponding words are stored in a tree and this data structure is called the simplex tree of @xmath0 and denoted by st@xmath127 or simply st when there is no ambiguity .",
    "it may be seen as a trie on the words representing the simplices of the complex .",
    "the depth of the root is 0 and the depth of a node is equal to the dimension of the simplex it represents plus one .    we give a constructive definition of st .",
    "starting from an empty tree , insert the words representing the simplices of the complex in the following manner .",
    "when inserting the word @xmath126 = [ \\ell_0 , \\cdot\\cdot\\cdot , \\ell_j ] $ ] start from the root , and follow the path containing successively all labels @xmath128 , where @xmath129 $ ] denotes the longest prefix of @xmath126 $ ] already stored in the st .",
    "next , append to the node representing @xmath129 $ ] a path consisting of the nodes storing labels @xmath130 .",
    "the filtration value of @xmath17 denoted by @xmath131 is stored inside the node containing the label @xmath132 , in the above path . in figure 2",
    ", we give st for the simplicial complex shown in figure  [ fig : simplicialcomplexexample ] .    if @xmath0 consists of @xmath26 simplices ( including the empty face ) then , the associated st contains exactly @xmath26 nodes .",
    "thus , we need @xmath133 space / bits to represent the nodes in st ( since each node stores a vertex which needs @xmath134 bits to be represented and also stores the filtration value of the simplex that the node corresponds to , which needs @xmath135 bits to be represented ) .",
    "we remark here that we do nt consider the space needed to maintain the edges of st , as it is part of the data structure implementation of st .",
    "we can compare the upper bound obtained to the lower bound of lemma  [ filtrationlowerbound ] .",
    "in particular , st matches the lower bound , when @xmath136 is not small .",
    "now , we will briefly recapitulate the cost of doing some basic operations through st on a simplicial complex . to check",
    "if a simplex @xmath17 is in the complex , is equivalent to checking the existence of the corresponding path starting from the root in st .",
    "this can be done very efficiently in time @xmath137 and therefore all operations which primarily determine on the membership query can be efficiently performed using st .",
    "one such example , is querying the filtration value of a simplex .",
    "however , due to its explicit representation , insertion is a costly operation on st ( exponential in the dimension of the simplex to be inserted ) .",
    "similarly , removal is also a costly operation on st , since there is no efficient way to locate and remove all cofaces of a simplex .",
    "consequently , topology preserving operations such as elementary collapse and edge contraction are also expensive for st .",
    "these operation costs are summarized later in table  [ tab : operationsonmsd ] . in the next section",
    ", we will introduce a new data structure which does a better job of balancing between static queries ( e.g. membership ) and dynamic queries ( e.g. insertion and removal ) .",
    "in this section , we introduce the _ critical simplex diagram _ , @xmath138 , which is an evolved version of sal @xcite .",
    "csd is a collection of @xmath6 arrays that correspond to the @xmath6 vertices of @xmath0 .",
    "the elements of an array , referred to as _ nodes _ in the rest of the paper , correspond to copies of the vertex of @xmath0 associated to the array . additionally , csd has edges that join nodes of different arrays .",
    "each connected component of edges in csd represents a simplex of @xmath0 .",
    "not all simplices of @xmath0 are represented but only those simplices all of whose cofaces have a higher filtration value .",
    "we describe the construction of csd below .",
    "we initially have @xmath6 empty arrays @xmath139 .",
    "let @xmath140 be the set of simplices in the complex whose filtration value is @xmath100 .",
    "let @xmath141 be the maximal subset of @xmath140 containing all the critical simplices of @xmath140 .",
    "for instance , in the complex of figure  [ fig : simplicialcomplexexample ] , we have @xmath142 , @xmath143\\}$ ] , @xmath144,[356]\\}$ ] , @xmath145 , [ 24]\\}$ ] , @xmath146 , and @xmath147\\}$ ] .",
    "figure  [ fig : csdexample ] shows the csd representation of the simplicial complex of figure  [ fig : simplicialcomplexexample ] .",
    "the vertices of @xmath0 are associated to the arrays .",
    "each array contains a set of nodes that are copies of the vertex associated to the array and are labelled by an ordered pair of integers ( to be defined below ) .",
    "nodes belonging to distinct arrays are joined by edges leading to a graph structure .",
    "the connected components of that graph represent the simplices in @xmath148 .",
    "all the nodes of such a simplex are labelled by a pair of integers .",
    "the first integer refers to the filtration value of the simplex and the second integer refers to a number used to index simplices that have the same filtration value .",
    "for instance the triangle @xmath42 $ ] in @xmath149 is represented by 3 nodes , each with label @xmath150 , that are connected by edges .",
    "below we provide a more detailed treatment of the construction of csd .",
    "given @xmath141 for every @xmath151 , we build the csd by inserting the simplices in @xmath141 in decreasing ordering of @xmath100 .",
    "for _ every _ simplex @xmath152 in @xmath141 , we associate a unique key generated using a hash function @xmath153 , @xmath154 $ ] , and insert the nodes with label @xmath155 in to the arrays @xmath156 .",
    "for every @xmath157 $ ] , we introduce an edge between @xmath155 in @xmath158 and @xmath155 in @xmath159 .",
    "in other words , @xmath17 , a critical simplex is being represented in csd by a connected component in the graph thus defined .",
    "each connected component is a star graph on @xmath160 nodes where @xmath161 is the center of the star .",
    "furthermore , each node in csd corresponds to a vertex in exactly one simplex .",
    "we denote by @xmath162 the set of all nodes in @xmath163 of star graphs that correspond to maximal simplices in @xmath0 ( the region with these nodes are shaded in figure  [ fig : csdexample ] ) . inside each @xmath163 , we first sort nodes based on whether they are in @xmath162 or not .",
    "further , inside @xmath162 and inside @xmath164 , we sort the nodes according to the lexicographic order of their labels .",
    "we note that @xmath162 is a contiguous subarray of @xmath163 , i.e. , all consecutive elements in @xmath162 are also consecutive elements in @xmath163 , as can be observed in figure  [ fig : csdexample ] .",
    "we remark here that we use a hash function @xmath153 to generate keys for simplices because it is an efficient way to reuse keys ( in case of multiple insertions and removals ) .",
    "we denote by @xmath165 the subset of simplices of @xmath141 that contain vertex @xmath59 for all possible @xmath166 . in other words ,",
    "@xmath167    it follows that the number of nodes in each @xmath163 is at most @xmath168 } { \\max}\\ |\\psi_{\\max}(i)|$ ] , and that the total number of nodes in csd , we denote by @xmath169 , is at most @xmath170 .",
    "note that the number of edges in csd is also at most @xmath170 since csd is essentially a collection of star graphs .",
    "we denote by @xmath171 the largest number of maximal simplices of @xmath0 that a given @xmath67-simplex of @xmath0 may be contained in .",
    "we note the following bounds : @xmath172 @xmath173 moreover , when @xmath174 , we have @xmath175 . in the case of @xmath176 , we are interested in the value of @xmath177 and @xmath178 which we use to estimate the worst - case cost of basic operations in @xmath176 .    alternatively , we can bound the number of nodes in csd by a different quantity .",
    "we note that @xmath179 are all disjoint and therefore the number of nodes in csd is at most @xmath180 , where @xmath181 is the union of all @xmath141 .",
    "the actual relation between @xmath178 and @xmath182 can be stated as follows by @xmath7 . ] : @xmath183    further , in each node we store a filtration value ( which requires @xmath184 bits ) and a hashed value ( which requires @xmath185 bits ) .",
    "we can thus upper bound the space needed to store the nodes of csd by @xmath186 or by @xmath187 .",
    "however , if we only store the filtration value and the hashed value at the center of the star graph then , we need only @xmath188 space to store the nodes of csd . in doing so , from any node of the star graph",
    ", we can still access / modify the filtration and hashed values in @xmath189 time .",
    "thus , csd matches the lower bound in theorem  [ csdlowerbound ] , up to constant factors ( as @xmath190 ) .",
    "let us now analyze the cost of performing basic operations on @xmath176 .",
    "first , we describe how to intersect arrays and update arrays in csd as these are elementary operations on csd which are required to perform basic operations on the simplicial complex that it represents .",
    "next , we will describe how to perform static queries such as the membership query .",
    "after that , we describe how to perform dynamic queries such as the insertion or removal of a simplex .",
    "finally , we compare the efficiency of csd with st .",
    "we remark here that in order to perform the above operations efficiently , we will exploit the fact that the filtration value of a simplex that is not critical is equal to the minimum of the filtration values of its cofaces .",
    "below , we first discuss about how to implement the arrays in csd using red - black trees , and thus we would have described how to search within an array and update an array of csd .",
    "next , we describe how to compute the intersection of the arrays in csd , an operation needed to answer static queries .",
    "we implement the arrays @xmath163 using a variant of the red - black trees , and this means we can search , insert , and remove an element inside @xmath163 in time @xmath191 . below",
    "we will discuss how to implement @xmath162 and the same will hold for @xmath164 which we treat separately .",
    "each subarray of @xmath162 which have the same filtration value i.e. , the same first coordinate , is implemented using a red - black tree .",
    "now these subarrays described above partition @xmath162 and we can label each parition with the common first coordinate value of its elements .",
    "we represent the set of these partitions using a red - black tree by storing the partitions label .",
    "therefore , each @xmath163 is the union of two `` doubly - composed '' red - black trees .",
    "the way we search in @xmath163 , is that we sequentially search in @xmath162 , followed by @xmath164 .",
    "let @xmath17 be a simplex of dimension @xmath192 and denote its vertices by @xmath193 .",
    "we will need to compute @xmath194 , defined as the intersection of @xmath195 , and @xmath196 , defined as the intersection of @xmath197 . to compute @xmath194",
    ", we first find out the array with fewest elements amongst @xmath195 .",
    "then , for each element @xmath198 in that array , we search for @xmath198 in the other @xmath19 arrays , which can be done in time @xmath199 .",
    "hence @xmath194 can be computed in time @xmath200 . as we have seen before , @xmath201 .",
    "consider now @xmath196 .",
    "we first observe that @xmath162 is a contiguous subarray of @xmath163 .",
    "we store the index separating @xmath162 from the rest of @xmath163 for all @xmath202 $ ] .",
    "we can then compute @xmath196 in the same way as described above for @xmath194 and can be computed in time @xmath203 . as we have seen before , @xmath204 .",
    "the tree structure of st provides an efficient representation to perform static operations .",
    "however , we show below that we are able to answer these static queries using csd by only paying a multiplicative factor of @xmath178 ( in the worst case ) over the cost of performing the same operation in st . in the case of the membership query",
    ", the multiplicative factor is reduced to @xmath177 .",
    "we first observe that @xmath14 if and only if @xmath205 .",
    "this is because if @xmath14 , then there exists a maximal simplex in @xmath0 which contains @xmath17 .",
    "the star graph associated to this maximal simplex has nodes in all the @xmath206 , and all those nodes have the same label .",
    "this implies that @xmath205 , and the converse is also true .",
    "it follows that determining if @xmath17 is in @xmath0 reduces to computing @xmath196 and checking whether it is non - empty .",
    "this procedure is very similar to the analogous procedure using sal @xcite .",
    "therefore , membership of a simplex can be determined in time @xmath207 .",
    "finally , we note that through the membership query , we are also able to decide if a simplex is maximal in the complex .",
    "we denote this new query by ` is_maximal ` , and will be used later for performing other operations .",
    "given a simplex @xmath17 of @xmath0 we want to access its filtration value @xmath131 .",
    "we observe that @xmath131 is the mimimal filtration value of the nodes in @xmath194 since the filtration function is monotone w.r.t .",
    "hence , accessing the filtration value of @xmath17 reduces to computing @xmath194 , which has been described above .",
    "therefore , accessing the filtration of a simplex can be determined in time @xmath208 .",
    "for example , consider the @xmath176 in figure  [ fig : csdexample ] .",
    "we have to find the filtration value of @xmath209 $ ] in the complex of figure  [ fig : simplicialcomplexexample ] .",
    "we see that @xmath210 .",
    "this means that the filtration value of the triangle is @xmath211)=\\min\\ ( 3,5)=3 $ ] .",
    "finally , we note that through the filtration query , we are also able to decide if a simplex is critical in the complex . this new query , denoted by ` is_critical ` , will be used later for performing other operations .      given a simplex @xmath212",
    ", we could procure the filtration value of its @xmath213 facets by the access filtration value query , and thus requiring a total running time of @xmath214 .",
    "however , we will modify the access filtration value query to obtain filtration value of the @xmath213 facets of @xmath17 in running time of @xmath215 .",
    "let @xmath216 , for some @xmath217 .",
    "let @xmath218 be a subset of @xmath219 such that every element of @xmath219 which appears in exactly @xmath220 of the sets in @xmath221 is in @xmath218 .",
    "we can identify @xmath218 in time @xmath222 .",
    "to each entry @xmath223 in @xmath218 we associate the index of the set @xmath224 which does not contain @xmath223 by a mapping @xmath63 .",
    "we sort @xmath218 based on @xmath63 , and in case of ties based on the first coordinate .",
    "the filtration value of the facet @xmath225 , is the minimal filtration value of the nodes in @xmath218 which are mapped to @xmath67 under @xmath63 .",
    "if there are no nodes in @xmath218 mapped to @xmath67 under @xmath63 then , the filtration value of @xmath226 is @xmath131 .",
    "this computation for all the @xmath213 facets requires a total time of @xmath227",
    ". therefore the total running time is @xmath215 .      given a simplex @xmath17 , we perform the membership query to obtain all maximal simplices that contain @xmath17 .",
    "the number of such simplices is at most @xmath228 and in each of these cofaces there are at most @xmath229 vertices which are not in @xmath17 .",
    "this bounds the number of cofaces of @xmath17 of codimension 1 by @xmath230 . for each of these cofaces",
    ", we perform the access filtration value query ( but compute @xmath194 only once ) .",
    "this gives a total running time of @xmath231 .",
    "now , we will see how to perform dynamic operations on csd .",
    "we would like to note here that csd is more suited to perform dynamic queries over st because of its non - explicit representation , and therefore the amount of information to be modified is always less than st .",
    "we start by defining the operation _",
    "lazy insertion _ as inserting @xmath17 into the complex without checking and removing the previously critical simplices in the complex that are now faces of @xmath17 with the same filtration value .",
    "we will assume that the knowledge of @xmath17 being maximal or not is known a priori .",
    "lazy insertion will be extensively used in the later sections for preliminary construction of simplicial complexes .",
    "lazy insertion in csd requires @xmath232 time .",
    "let us now consider a more elaborate case .",
    "suppose we want to insert a simplex @xmath17 with filtration value @xmath131 such that any coface of @xmath17 in @xmath0 has a filtration value larger than @xmath131 .",
    "the insertion operation consists of first checking if @xmath17 is a maximal simplex in @xmath0 by the ` is_maximal ` query .",
    "if @xmath17 is maximal , then we have to insert the simplex and remove or reallocate ( based on filtration value ) all simplices which were maximal simplices in @xmath0 but are now faces of @xmath17 .",
    "if @xmath17 is not maximal , then we have to just insert @xmath17 into the complex .",
    "we remark here that we do not need to remove the faces of @xmath17 which were previously critical simplices and had filtration value at least @xmath131 as their presence will not hinder any operation on csd .",
    "alternatively , we can think of performing a clean - up operation in parallel where such nodes are removed from csd without affecting any other operation .",
    "supose @xmath17 is a maximal simplex then , insert the star graph corresponding to @xmath17 in @xmath233 . updating the arrays @xmath224 takes time @xmath234 .",
    "next , we have to check if there exists maximal simplices in @xmath0 which are now faces of @xmath17 , and either remove them if their filtration value is equal to @xmath131 or move them outside @xmath206 if their filtration value is strictly less than that of @xmath131 .",
    "we restrict our search for faces of @xmath17 which were previously critical by looking for every vertex @xmath235 in @xmath17 , at the set of all maximal simplices which contain @xmath235 , denoted by @xmath236 .",
    "we can compute @xmath236 in time @xmath237 ) .",
    "then , we compute @xmath238 whose size is at most @xmath239 and check if any of these maximal simplices are faces in @xmath17 ( can be done in @xmath240 time ) .",
    "if such a face of @xmath17 in @xmath238 has filtration value equal to @xmath131 then , we remove that connected component . to remove all such connected components takes time @xmath241 . on the other hand ,",
    "if filtration value of the face is less than @xmath131 then , we will have to move the node outside @xmath206 and place it appropriately to maintain the sorted structure of @xmath224 . to reallocate all such connected components takes time @xmath242 .",
    "summarizing , to handle removal of face or reallocating the concerned faces of @xmath17 which were previously maximal takes time at most @xmath243 .",
    "if @xmath17 is not a maximal simplex then , we insert the star graph corresponding to @xmath17 in @xmath244 . updating the arrays @xmath224 takes time @xmath234 .",
    "therefore , the total running time in this case is @xmath245 .      to remove a face @xmath17 ,",
    "we first perform an access filtration value query . for every simplex @xmath246 ,",
    "i.e. , for every coface @xmath24 of @xmath17 in @xmath0 which is a critical simplex , we replace its corresponding star graph by star graphs of its @xmath160 facets with the same filtration value , where the @xmath247 facet is obtained by removing @xmath248 from @xmath24 . introducing a star graph and updating the arrays @xmath224 takes time @xmath249 .",
    "further , if @xmath17 is a critical simplex ( can be checked by ` is_critical ` query ) then , we know that there is a connected component representing @xmath17 . we replace this star graph by the star graph for all its facets which have the same filtration value .",
    "therefore , the total running time is @xmath250 .",
    "a simplex @xmath24 is collapsible through one of its faces @xmath17 , if @xmath24 is the only coface of @xmath17 .",
    "such a pair @xmath251 is called a free pair , and removing both faces of a free pair is an elementary collapse . given a pair of simplices @xmath251 , to check if it is a free pair is done by obtaining the list of all maximal simplices which contain @xmath17 , through the membership query ( costs @xmath252 time ) and then checking if @xmath24 is the only member in that list . if yes , then we remove @xmath24 from the csd by just removing all the nodes in the corresponding arrays in time @xmath253 .",
    "next , for every facet @xmath226 of @xmath24 other than @xmath17 , we check if @xmath254 can not be computed ( post removal of @xmath24 ) by asking the ` is_critical ` query , or if @xmath254 is now more than @xmath255 then , we lazy insert @xmath226 in time @xmath234 . finally ,",
    "if @xmath17 is a critical simplex then , we remove it in the say way we removed @xmath24 and for every facet of @xmath17 we similarly check if its filtration value can not be computed ( post removal of @xmath17 ) by asking the ` is_critical ` query , or if its filtration value is now more than @xmath131 then , we lazy insert that facet in time @xmath234 .",
    "thus , the total running time is @xmath256 .",
    "we summarize in table  [ tab : operationsonmsd ] the asymptotic cost of basic operations discussed above and compare it with st , through which the efficiency of @xmath176 is established .",
    "if the number of critical simplices is not large then @xmath257 is smaller than @xmath258 .",
    "the number of critical simplices is small unless we associate unique filtration values to a significant fraction of the simplices . for this subsection",
    ", we will assume that the number of critical simplices is small ( this assumption will be justified in the next subsection ) . in this case",
    ", we have @xmath178 to be small and thus the size of csd is smaller than the size of st .    we observe that while performing static queries , we pay a factor of @xmath178 or @xmath177 in the case of csd over the cost of the same operation in st . in the case of dynamic operations",
    "we observe that the dependence on the dimension is exponentially smaller in csd than in st .",
    "therefore , if the number of critical simplices is even polynomial in the dimension then , there is an exponential gap between csd and st in both the storage and the efficiency of performing dynamic operations .",
    "furthermore , in the case of insertion , csd depends on @xmath177 and not @xmath178 ( recall that @xmath259 ) .",
    "thus , the efficient insertion operation in csd allows for fast construction of simplicial complexes , as we will see in future sections .    in short ,",
    "csd needs less storage than st and performs dynamic operations more efficiently than st while paying ( mostly ) a small multiplicative factor over st in performing static queries .",
    "this is analogous to the tradeoff between nfa ( non - deterministic finite state automaton ) and dfa ( deterministic finite state automaton ) .",
    "csd has been designed to store filtrations of simplicial complexes but it can be used to store simplicial complexes without a filtration . in this case , @xmath260 and csd requires @xmath261 memory space , which matches the lower bound in theorem  [ lowerbound ] , when @xmath262 . in this case",
    ", csd is very similar to sal  @xcite .",
    "marc glisse and sivaprasad @xcite have performed experiments on sal and concluded that it is not only smaller in size but also faster than the simplex tree in preforming insertion , removal , and edge contraction .",
    "csd is also a compact data structure to store filtrations , as its size matches ( up to constant factors ) the lower bound of @xmath263 in theorem  [ csdlowerbound ] .",
    "moreover , if @xmath178 is small , csd is not only a compact data structure since @xmath257 is upper bounded by @xmath264 , but , as shown in table  [ tab : operationsonmsd ] , csd is also a very efficient data structure as all basic operations depend polynomially on @xmath9 ( as opposed to st for which some operations depend exponentially on @xmath9 ) .",
    "as our analysis shows , we can express the complexity of csd in terms of a parameter @xmath178 that reflects some `` local complexity '' of the simplicial complex . in the worst - case , @xmath265 as it can be observed when the complex is a simplex and its faces , all with distinct filtration values .",
    "however we conjecture that , even if @xmath26 is not small , @xmath178 remains small for a large class of simplicial complexes of pratical interest .",
    "this conjecture is supported by the following experiment .",
    "we considered a set of points obtained by sampling a klein bottle in @xmath266 and constructed its rips filtration ( see section  [ flag ] for definition ) using libraries provided by the gudhi project @xcite .",
    "here we have the scale parameter range from 0 to 0.18 .",
    "we computed @xmath177 , and @xmath178 for various values of @xmath136 .",
    "the resulting simplicial complex on 10,000 vertices is 17 dimensional and has 10,508,486 simplices of which 27,286 are maximal .",
    "we record in table  [ tab : rips ] below , the values of @xmath258 and @xmath257 for the various precision values of @xmath4 of the rips complex constructed above . in figure  [ fig : rips ] is a graphical illustration of the data .",
    "[ dataset1 ]    we note from table  [ tab : rips ] that @xmath177 is significantly smaller than @xmath25 .",
    "more importantly , @xmath267 is the parameter that influences the cost of basic operations in the average case and this is much smaller than @xmath177 . also , from figure  [ fig : rips ] , it is clear that there is an order of magnitude gap between @xmath257 and @xmath258 .",
    "next , we note that @xmath178 is remarkably smaller than @xmath26 ( even notably smaller than @xmath6 ) , and this implies efficient implementation of all operations .",
    "more importantly , we remark here that @xmath268 is at most @xmath269 in the above experiment .",
    "finally , we observe that despite increasing @xmath136 at a rapid rate , @xmath257 grows very slowly after @xmath270 .",
    "this is because the set of all possible filtration values of the rips complex is small .",
    "therefore , even for small values of @xmath136 the simplicial complex and its filtration is accurately captured by csd .",
    "it is worth noting that while the cost of basic operations are bounded using @xmath177 and @xmath178 , the actual cost is bounded by local parameters such as @xmath271 , @xmath272 , and @xmath236 ( see paragraph in section 3.3 on insertion for definition ) to get a better estimate on the cost of these operations . to begin with",
    ", @xmath271 captures the local information about a simplex @xmath17 sharing a vertex with other maximal simplices of the complex .",
    "more precisely , it is the minimum , over all the vertices of @xmath17 , of the largest number of maximal simplices that contain the vertex .",
    "if @xmath17 has a vertex which is contained in a few maximal simplices then , @xmath271 is small .",
    "similarly , @xmath272 is the minimum , over all the vertices of @xmath17 , of the largest number of critical simplices that contain the vertex .",
    "this value depends not only on the structure of the filtration function but also the precision required . finally , @xmath236 captures another local property of a simplex @xmath17  the set of all maximal simplices that contain the vertex @xmath235 . therefore , csd is sensitive to the local structure of the complex .",
    "we now demonstrate the robustness of csd , i.e. , its ability to perform queries _",
    "correctly _ and _ efficiently _ even when it might have stored some simplices which are not critical , or stored multiple copies of the same simplex with different filtration values . in other words , we show that redundancies such as the ones described above does not hinder the data structure s performance .",
    "consider modifying the filtration value of some simplex @xmath14 from @xmath131 to @xmath273 . in the case of st",
    ", we will have to modify the filtration value inside the node containing @xmath17 and additionally check ( and modify if needed ) its faces in decreasing order of dimension .",
    "this requires time @xmath274 .",
    "however , in the case of csd , we can perform a lazy insertion of @xmath17 into csd in time @xmath234 , and the data structure is robust to such an insertion .",
    "this is because , all the operations can be performed correctly and with same efficiency after the lazy insertion ( even if some critical simplices , which after the lazy insertion are no longer critical , need to be removed ) .",
    "for instance , consider the @xmath275 query on some simplex @xmath24 .",
    "if before modifying @xmath131 , @xmath24 was a face of @xmath17 then , the _ minimal _ filtration value of the nodes in @xmath276 correctly gives the filtration value of @xmath24 as @xmath277 will now be one of the entries in @xmath278 .",
    "otherwise , if @xmath24 was not a face of @xmath17 then the filtration value of @xmath24 remains unchanged , as the lazy insertion of @xmath17 has not introduced a new simplex , but only a new filtration value to an existing simplex .",
    "therefore , we can think of using the data structure to manipulate simplicial complexes in very short time through a collection of lazy insertions and perform a clean - up operation at the end of the collection of lazy insertions , or even think of performing the clean - up operation in parallel to the lazy insertions .",
    "we remark here that if we lazy insert @xmath279 simplices then in the worst case , @xmath178 grows to @xmath280 . in other words , because there might be redundant simplices , the efficiency dependence will now be on @xmath280 instead of @xmath178 , but the redundancy will not affect the correctness of the operations .",
    "boissonnat et al .",
    "@xcite in their paper on simplex array list described a sequence of data structures , each more powerful than the previous ones ( but also bulkier ) . in that sequence of data structures @xmath281",
    ", we had @xmath282 ( @xmath283 referred to earlier in this paper is equal to @xmath284 ) .",
    "further , they note that in the @xmath285 element of the sequence , every node which is not a leaf ( sink ) in the data structure corresponds to a unique @xmath59-simplex in the simplicial complex . also for all @xmath286 , @xmath287 , they state that it is a nfa recognizing all the simplices in the complex .",
    "as one moves along the sequence , the size of the data structure blows up by a factor of @xmath9 at each step .",
    "but in return , there is a gain in the efficiency of searching for simplices as the membership query depends on @xmath104 which decreases as @xmath59 increases .",
    "we note here that @xmath176 described in this paper is exactly the same as @xmath288 , when @xmath174 ( we ignore the structure of the connected component , which is a path in sal but a star in csd ) . therefore , @xmath176 supersedes @xmath288 .",
    "there is no change in representation of a simplex between sal and csd ; instead we only store more simplices ( i.e , all critical simplices ) in csd . therefore , in the same vein as @xmath289 , we can define a sequence of data structures , each more powerful than the previous ones ( but also bulkier ) .",
    "more formally , consider the sequence of data structures @xmath290 , where @xmath291 and @xmath292 , for all @xmath287 .",
    "further , for all @xmath287 , we will refer to the data structure @xmath293 by the name @xmath294 ( we will continue to refer to @xmath295 as @xmath176 ) .",
    "as we move along the sequence @xmath296 , the size of the data structure blows up by a factor of @xmath9 at each step .",
    "but in return , we gain efficiency in searching for simplices as the membership query depends on @xmath104 which decreases as @xmath59 increases .",
    "additionally , we gain efficiency in accessing filtration value of a simplex as the complexity no longer depends on @xmath178 but on a smaller parameter .",
    "marc glisse and sivaprasad implemented sal @xcite for data set mentioned in section 3.4 , and then performed insertion and removal of random simplices , and contracted randomly chosen edges .",
    "they observed that 1-sal outperformed 0-sal in low dimensions .",
    "however , 0-sal performed better than 1-sal in higher dimensions . therefore , in similar vein , it would be worth exploring for which class of simplicial complexes , @xmath297csd is the best data structure in the csd family ( for every @xmath287 ) .",
    "the flag complex of an undirected graph @xmath298 is defined as an abstract simplicial complex , whose simplices are the sets of vertices in the cliques of @xmath298 .",
    "let @xmath299 be a metric space where @xmath94 is a discrete point set in @xmath300 .",
    "given a positive real number @xmath301 , the rips complex is the abstract simplicial complex @xmath302 where a simplex @xmath303 if and only if @xmath304 for every pair of vertices of @xmath17 .",
    "note that the rips complex is a special case of a flag complex .",
    "rips filtrations are widely used in topological data analysis since they are easy to compute and they allow to robustly reconstruct the homology of a sample shape via the computation of its persistence diagram  @xcite .",
    "we will describe a specific filtration for flag complexes which is of significant interest .",
    "the filtration value of a vertex is @xmath305 .",
    "the filtration value of every edge in the complex is given as part of the input .",
    "the filtration value of a simplex of higher dimension is equal to the maximum of the filtration value of all the edges in the simplex .",
    "let @xmath298 be the ( weighted ) graph of the simplicial complex @xmath0 .",
    "let @xmath306 denote the maximum degree of the vertices of @xmath298 . to represent @xmath0 using st , boissonnat and maria @xcite propose computing and inserting the @xmath307-skeleton of @xmath0 into the st and incrementally increasing @xmath307 from @xmath308 to @xmath9 .",
    "therefore , the time for construction of the st representing the flag complex is @xmath309 .    to represent @xmath0 using csd , we propose an _ edge - deletion _ algorithm , which is significantly faster than the construction algorithm for st .",
    "we recall that in section [ sec : construction ]  we defined @xmath140 to denote the set of simplices in the complex with filtration value @xmath100 .",
    "[ [ preprocessing - step . ] ] preprocessing step .",
    "+ + + + + + + + + + + + + + + + + + +    we first compute all maximal cliques in @xmath298 in time @xmath310 @xcite , where @xmath311 is the matrix multiplication exponent , i.e. , @xmath312 is the time needed to multiply two @xmath313 matrices . we store these maximal simplices in a prefix tree ( like mxst of @xcite ) .",
    "the filtration value given to the edges provides a natural ordering to the edges of the complex .",
    "we consider edges in descending order of their filtration value .",
    "let @xmath314 be the edge with the @xmath247 highest filtration value .",
    "recall that all simplices containing @xmath314 are of filtration value @xmath315 and are in @xmath316 . fix @xmath317 .",
    "[ [ step-1 . ] ] step 1 .",
    "+ + + + + + +    in this step , we would like to compute @xmath318 in order to build csd . a natural way to do that is by first computing @xmath316 , and then identifying the subset @xmath318 .",
    "computing @xmath316 requires time @xmath319 and then computing @xmath318 will require time @xmath320 using the best known algorithms in literature @xcite . however , we will not compute @xmath318 from @xmath316 , but instead skip computing @xmath316 and directly compute @xmath318 to list all the maximal simplices only containing the edge @xmath314 in time @xmath321 using the algorithm presented by makino and uno @xcite on a subgraph of @xmath298 in the following way .",
    "we build an induced subgraph @xmath322 of @xmath298 which contains the vertices of the edge @xmath314 and all the vertices which are adjacent to _ both _ the vertices of @xmath314 .",
    "we note that every maximal clique in @xmath322 is a maximal clique in @xmath298 containing the edge @xmath314 , and vice versa . therefore ,",
    "if we run makino and uno s algorithm on @xmath322 ( which contains at most @xmath323 vertices ) , we obtain all the maximal cliques in @xmath298 containing the edge @xmath314 .",
    "[ [ step-2 . ] ] step 2 .",
    "+ + + + + + +    next , we recognize the maximal simplices of @xmath0 in @xmath318 in time @xmath324 by checking each simplex @xmath17 in @xmath318 with the prefix tree built in the preprocessing step in time @xmath137 ( per simplex ) .",
    "we remark here that all simplices in @xmath325 are maximal simplices in @xmath0 , since @xmath326 has the largest filtration value .",
    "[ [ step-3 . ] ] step 3 .",
    "+ + + + + + +    we perform lazy insertion of simplices in @xmath318 into the csd and since we have identified the maximal simplices in @xmath318 , we know whether to insert them in @xmath327 or not , within each @xmath328 .",
    "this takes time @xmath329 .",
    "[ [ step-4 . ] ] step 4 .",
    "+ + + + + + +    finally , we remove @xmath314 from @xmath298 , increment @xmath59 by 1 , and repeat the procedure from step 1 until @xmath298 has no edges left .",
    "this entire construction takes time @xmath330 @xcite .",
    "] , which is significantly better than that of constructing a representation of @xmath0 by st ( which required time @xmath309 ) , as @xmath182 can be considerably ( exponentially ) smaller than @xmath26",
    ".      we would like to note here that the case when @xmath331 , was argued to be of particular interest by boissonnat et al .",
    "it can be observed in flag complexes , constructed from planar graphs and expanders @xcite , and in general , from nowhere dense graphs @xcite , and also from chordal graphs@xcite .",
    "generalizing , they noted that for all flag complexes constructed from graphs with degeneracy @xmath332 ( degeneracy is the smallest integer @xmath279 such that every subgraph has a vertex of degree at most @xmath279 ) , we have that @xmath262 @xcite .",
    "we add to this list of observations by noting that the flag complexes of @xmath333-free graphs have at most @xmath334 maximal simplices @xcite , where @xmath306 is the maximum degree of any vertex in the graph .",
    "thus , when @xmath306 and @xmath307 are constants , we have @xmath331 .",
    "finally , we note that the flag complexes of helly circular - arc ( respectively , circle ) graphs @xcite , and boxicity-2 graphs @xcite have @xmath262 from corollary  4 of @xcite .",
    "this encompasses a large class of complexes encountered in practice and if the number of maximal simplices is small , @xmath176 is a very efficient data structure as @xmath335 .",
    "moreover , we have that @xmath336 ; in this case , we have @xmath337 , and as noted earlier , the true complexity of the cost of operations using csd depends on @xmath267 and not @xmath177 .",
    "a map @xmath338 is simplicial if for every simplex @xmath339 in @xmath0 , @xmath340 is a simplex in @xmath96 . in this subsection",
    ", we discuss the adaptation of csd to handle simplicial maps .",
    "for the purpose of demonstration , we consider dey et al.s @xcite application of simplicial maps to topological data analysis over rips complexes .",
    "they construct a sequence of rips simplicial complexes , @xmath341 connected by simplicial maps , where @xmath342 is the rips parameter .",
    "the vertex set of @xmath343 is obtained by extracting a subset ( net ) of the vertex set of @xmath344 .",
    "they define a map @xmath345 through which they map each vertex of @xmath344 to its closest vertex in @xmath343 .",
    "next , they take @xmath346 so that the image of the edges of @xmath344 are edges in @xmath343 . since the complexes are rips complexes , the image of all the simplices of @xmath344 are in @xmath343 . to implement this procedure using csd",
    ", we need to collapse the vertices of vert(@xmath344)@xmath347vert(@xmath343 ) onto the vertices of @xmath343 as given by @xmath345 .",
    "first , we remark that this procedure is very expensive using st , as vertex collapse is more expensive than the edge contraction operation , and boissonnat and maria @xcite provide an essentially optimal algorithm running in @xmath348 time for edge contraction .    in the case of csd",
    ", we will assume that @xmath349 is small , as otherwise , we could reconstruct @xmath343 entirely from scratch using the fast edge - deletion algorithm . for every vertex @xmath235 in vert(@xmath344)@xmath347vert(@xmath343 ) , we first build the set @xmath350 from the set of maximal simplices containing @xmath235 as follows . if @xmath17 is a maximal simplex containing @xmath235 , then we include the simplex @xmath351 in @xmath350 .",
    "let @xmath352 . next , for every vertex @xmath235 in vert(@xmath344)@xmath347vert(@xmath343 ) , we remove all the nodes in @xmath353 and its neighbors in other arrays . for every simplex in @xmath354 ,",
    "we perform the ` is_critical ` query .",
    "if the simplex was not critical in @xmath344 but is critical in @xmath343 , then we lazy insert the simplex .",
    "on the other hand , if the simplex was critical in @xmath344 , then we check if it is maximal in @xmath343 and reallocate appropriately .",
    "the total cost of performing the above procedure is @xmath355 , where @xmath356 .",
    "this running time is significantly better than that of implementing the simplicial map using st , as @xmath178 , and consequently @xmath177 , may be considerably ( exponentially ) smaller than @xmath26 . adding to the above argument the benefit of the considerably ( exponentially ) smaller size of csd , it is clear that csd better supports the implementation of simplicial maps than st",
    "let @xmath357 be a finite subset of a metric space @xmath299 where @xmath94 is a discrete point set in @xmath300 .",
    "given a relaxation parameter @xmath358 , we define the notion of being ` witnessed ' as follows .",
    "a simplex @xmath359 is @xmath360-weakly witnessed by @xmath361 if @xmath362 for every @xmath363 and @xmath364 . additionally ,",
    "if we have for all @xmath365 , that @xmath366 then , @xmath17 is said to be @xmath360-strongly witnessed by @xmath361 .",
    "the relaxed delaunay complex - strong delaunay complex in @xcite and the relaxed delaunay complex in @xcite ] @xmath367 @xcite , is defined as the collection of all simplices , whose all subsimplices are @xmath360-strongly witnessed by a point in @xmath94 . the parameter @xmath360 defines a filtration on the relaxed delaunay complexes , which has been used in topological data analysis .",
    "more explicitly , the filtration value of a simplex @xmath17 in @xmath367 ( or @xmath368 respectively ) is the smallest @xmath369 , such that @xmath17 is in @xmath370 ( or @xmath368 respectively ) .",
    "if we are maintaining filtration values up to @xmath371 digits of precision then , we fix @xmath372 for this entire section , and assume that the filtration range is @xmath37 .",
    "we define a matrix @xmath81 of size @xmath373 as follows .",
    "for every @xmath374 and @xmath375 $ ] let @xmath376 denote the @xmath377 nearest neighbor of @xmath198 in @xmath357 ( ties are broken arbitrarily ) .",
    "for every @xmath374 , @xmath378 , let @xmath379 be the largest integer such that @xmath380 .",
    "let @xmath381 and let @xmath382 .",
    "we note below that @xmath181 ( recall notation from section  [ sizeofcsd ] ) , the set of critical simplices in the complex is contained in @xmath10 .",
    "[ delaunaystrong ] @xmath383    let @xmath384 be a critical simplex in @xmath181 . by definition of @xmath367 , we have that there exists a point @xmath374 which @xmath385-strongly witnesses it . since @xmath24 is critical",
    ", we have that for every @xmath386 , the following holds .",
    "@xmath387 therefore , we have that for every @xmath388 $ ] , @xmath389 , or more precisely , @xmath390 .",
    "the above lemma provides a characterization of @xmath367 : it can have at most @xmath391 critical simplices .",
    "we note here that typically @xmath94 is a relatively small set .",
    "for example , in the experiments performed by boissonnat and maria ( table 1 of @xcite ) , we note that the cardinality of the witness set ( denoted by @xmath392 ) is about a few ten thousand while the number of simplices in the complex ( denoted by @xmath393 ) is over a hundred million .",
    "therefore , this provides practical evidence of the compact representation of @xmath367 through csd .    under the assumption that for any @xmath394 , @xmath376 could be computed in @xmath189 time ( i.e.",
    ", @xmath81 is computed as part of the preprocessing ) , boissonnat and maria @xcite described an algorithm to construct the st representation of the relaxed witness complex . their algorithm can be easily adapted to construct @xmath368 in time @xmath395 .    in the case of csd",
    ", we propose a new _ matrix - parsing _ algorithm which builds @xmath367 in time @xmath396 ( assuming an oracle to access @xmath81 ) .",
    "it is easy to see that all the simplices in @xmath10 can be constructed in @xmath397 time by sequentially computing the simplices @xmath398 for all the @xmath374 , i.e. , by parsing the matrix @xmath81 one row at a time . from the discussions about the robustness of csd discussed in section  [ performance ] , we know that we could lazy insert all the simplices in @xmath10 to the csd and it would behave exactly like in the scenario wherein only the simplices in @xmath181 ( which is subset of @xmath10 ) are inserted .",
    "this lazy insertion of all the simplices in @xmath10 can be done in time @xmath396 .",
    "after the construction , we may perform a clean - up operation to remove the redundant simplices that were inserted .",
    "in this paper , we introduce a new data structure called the critical simplex diagram ( csd ) to represent simplicial complexes attached with filtration values . in this data structure ,",
    "we store only those simplices which are critical with respect to the filtration value , i.e. , we store a simplex if and only if all its cofaces are of a ( strictly ) higher filtration value than the filtration value of the simplex itself .",
    "we then show how to efficiently perform basic operations on simplicial complexes by only storing these ( critical ) simplices .",
    "this is summarized in table  [ tab : operationsonmsd ] .",
    "finally , we showed how to ( quickly ) construct the csd representation of flag complexes and relaxed delaunay complexes .",
    "as a future direction of research , we would like to obtain better bounds on @xmath178 and @xmath104 for specific complexes such as the rips complex or the relaxed delaunay complex by assuming some notion of geometric regularity .",
    "also , it would be interesting to obtain lower bounds on the various query times ( such as membership , insertion / removal ) , by assuming an optimal storage of @xmath399 ( @xmath7 is the number of critical simplices ) . from the standpoint of practice",
    ", we would like to find fast construction algorithms under the csd representation for other simplicial complexes of interest such as the alpha complex and the relaxed witness complex .",
    "finally , we would like to implement this data structure and check its performance versus the simplex tree in practice .",
    "50 j.  arsuaga , n.  baas , d.  dewoskin , h.  mizuno , a.  pankov , and c.  park : topological analysis of gene expression arrays identifies high risk molecular subtypes in breast cancer . _ in applicable algebra in engineering , communication and computing 23.1 - 2",
    "_ , pages 315 , 2012 .",
    "d. attali , a. lieutier , and d. salinas : efficient data structure for representing and simplifying simplicial complexes in high dimensions .",
    "_ in international journal of computational geometry and applications , 22(4 )",
    "_ , pages 279 - 303 , 2012 .",
    "d.  attali , a.  lieutier , and d.  salinas : vietoris - rips complexes also provide topologically correct reconstructions of sampled shapes .",
    "_ in computational geometry , 46(4 ) _ , pages 448 - 465 , 2013 .",
    "jean - daniel boissonnat , ramsay dyer , arijit ghosh : a probabilistic approach to reducing algebraic complexity of delaunay triangulations .",
    "_ in esa _ , pages 595 - 606 , 2015 .",
    "boissonnat , t.  dey , and c.  maria : the compressed annotation matrix : an efficient data structure for computing persistent cohomology .",
    "_ in algorithmica 73(3 ) _ , pages 607 - 619 , 2015 .",
    "boissonnat , karthik c.  s. , and s.  tavenas : building efficient and compact data structures for simplicial complexes .",
    "_ to appear in algorithmica _ , 2016 .",
    "arxiv.org/abs/1503.07444 j - d .",
    "boissonnat and c. maria : the simplex tree : an efficient data structure for general simplicial complexes .",
    "_ in algorithmica 70(3 ) _ , pages 406 - 427 , 2014 .",
    "boissonnat and c.  maria : computing persistent homology with various coefficient fields in a single pass .",
    "_ in esa _ , pages 185 - 196 , 2014 .",
    "r.  bayardo and b.  panda : fast algorithms for finding extremal sets .",
    "_ in sdm _ , pages 25 - 34 , 2011 .",
    "j.  chan , g.  carlsson , and r.  rabadan : topology of viral evolution .",
    "_ in proceedings of the national academy of sciences 110.46 _ , pages 1856618571 , 2013 .",
    "f. chazal , d. cohen - steiner , m. glisse , l. j. guibas , and s. y. oudot : proximity of persistence modules and their diagrams .",
    "25th acm sympos . on comput .",
    "_ , pages 237 - 246 , 2009",
    ". g.  carlsson , t.  ishkhanov , v.   de silva , and a.  zomorodian : on the local behavior of spaces of natural images .",
    "_ in international journal of computer vision 76.1 _ pages 1 - 12 , 2008 .",
    "n.  chiba , and t.  nishizeki : arboricity and subgraph listing algorithms . _ in siam j. comput .",
    "14(1 ) _ , pages 210 - 223 , 1985 .",
    "g.  durn : some new results on circle graphs .",
    "_ matemtica contempornea , 25 _ , pages 91 - 106 , 2003 .",
    "v.  de silva : a weak characterisation of the delaunay triangulation .",
    "_ in geometriae dedicata , volume 135 , number 1 _ , pages 39 - 64 , 2008 .",
    "v.  de silva and g.  carlsson : topological estimation using witness complexes .",
    "_ in spbg _ , pages 157 - 166 , 2004 .",
    "t.  dey , f.  fan , and y.  wang : computing topological persistence for simplicial maps .",
    "_ in symposium on computational geometry _",
    ", pages 345 - 354 , 2014 . v.  de silva and r.  ghrist : coverage in sensor networks via persistent homology .",
    "_ in algebraic & geometric topology 7 _ , pages 339 - 358 , 2007 . h.  edelsbrunner and j.  harer : computational topology - an introduction .",
    "_ american mathematical society _ , 2010 .",
    "d. eppstein , m. lffler , and d. strash : listing all maximal cliques in sparse graphs in near - optimal time , _ in international symposium on algorithms and computation ( 1 ) _ ,",
    "pages 403 - 414 , 2010 .",
    "f.  gavril .",
    "algorithms on circular - arc graphs . _ in networks , 4 _ , pages 357 - 369 , 1974 .",
    "m. golumbic : algorithmic graph theory and perfect graphs .",
    "_ in academic press _ , 2004 .",
    "m. grohe , s. kreutzer , and s. siebertz : characterisations of nowhere dense graphs , _ in iarcs annual conference on foundations of software technology and theoretical computer science _ ,",
    "pages 21 - 40 , 2013 .",
    "m. glisse and s. sivaprasad : private communication .",
    "f.  harary : graph theory , revised , _",
    "addison - wesley , reading , _ ma , 1972",
    ". f.  le gall : powers of tensors and fast matrix multiplication . _ in issac _",
    ", pages 296 - 303 , 2014 . k.  makino and t.  uno : new algorithms for enumerating all maximal cliques . _ in swat _ , pages 260 - 272 , 2004 .",
    "e.  prisner : graphs with few cliques .",
    "_ in proceedings of the 7th quadrennial international conference on the theory and applications of graphs , graph theory , combinatorics , and applications , _ pages 945 - 956 , 1995 .",
    "p.  pritchard : an old sub - quadratic algorithm for finding extremal sets .",
    "62(6 ) _ , pages 329 - 334 , 1997 .",
    "j.  perea and g.  carlsson : a klein - bottle - based dictionary for texture representation . _ in international journal of computer vision 107.1 _ , pages 75 - 97 , 2014 .",
    "b.  rosgen and l.  stewart : complexity results on graphs with few cliques .",
    "_ in discrete mathematics & theoretical computer science 9(1 ) _ , 2007",
    ". j.  spinrad : efficient graph representations .",
    "_ number 19 in fields institute monographs , american mathematical society _ , 2003 .",
    "d.  yellin : algorithms for subset testing and finding maximal sets . _ in soda _ ,",
    "pages 386 - 392 , 1992 .",
    "d.  yellin and c.  jutla : finding extremal sets in less than quadratic time .",
    "48(1 ) _ , pages 29 - 34 , 1993 ."
  ],
  "abstract_text": [
    "<S> a filtration over a simplicial complex @xmath0 is an ordering of the simplices of @xmath0 such that all prefixes in the ordering are subcomplexes of @xmath0 . </S>",
    "<S> filtrations are at the core of persistent homology , a major tool in topological data analysis . in order to represent the filtration of a simplicial complex </S>",
    "<S> , the entire filtration can be appended to any data structure that explicitly stores all the simplices of the complex such as the hasse diagram or the recently introduced simplex tree by boissonnat and maria [ algorithmica 14 ] . however , with the popularity of various computational methods that need to handle simplicial complexes , and with the rapidly increasing size of the complexes , the task of finding a compact data structure that can still support efficient queries is of great interest . + </S>",
    "<S> this direction has been recently pursued for the case of maintaining simplicial complexes . </S>",
    "<S> for instance , boissonnat et al .  </S>",
    "<S> [ socg 15 ] considered storing the simplices that are maximal for the inclusion and attali et al .  </S>",
    "<S> [ ijcga 12 ] considered storing the simplices that block the expansion of the complex . </S>",
    "<S> nevertheless , so far there has been no data structure that compactly stores the _ filtration _ of a simplicial complex , while also allowing the efficient implementation of basic operations on the complex . </S>",
    "<S> + in this paper , we propose a new data structure called the critical simplex diagram ( csd ) which is a variant of the simplex array list ( sal ) introduced by boissonnat et al .  </S>",
    "<S> [ socg 15 ] . </S>",
    "<S> our data structure allows to store in a compact way the filtration of a simplicial complex , and allows for the efficient implementation of a large range of basic operations . </S>",
    "<S> moreover , we prove that our data structure is essentially optimal with respect to the requisite storage space . </S>",
    "<S> next , we show that the csd representation admits the following construction algorithms .    </S>",
    "<S> * a new _ edge - deletion _ </S>",
    "<S> algorithm for the fast construction of flag complexes , which only depends on the number of critical simplices and the number of vertices . * a new _ matrix - parsing _ algorithm to quickly construct the relaxed delaunay complexes , depending only on the number of witnesses and the dimension of the complex . </S>"
  ]
}