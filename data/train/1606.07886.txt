{
  "article_text": [
    "the recent years have seen an increasing number of applications where computing is carried out in all sorts of environments .",
    "for example , drones are now being used to carry out tasks such as delivering packages , monitoring plantations and railways . while these distributed systems should still satisfy well - known safety ( _ e.g. _",
    ", drones should not run out of energy ) and liveness properties ( _ e.g. _ , freedom of livelock ) , they are also subject to _ quantitative constraints _ leading to new verification problems with explicit time constraints .",
    "consider , as our running example , the scenario where drones monitor some locations of interest such as infested plantation areas , whether rail tracks are in place , or locations with high risk of being trespassed .",
    "drones should take a picture of each one of these points .",
    "moreover , for each point , there should be _ a recent picture _ , _ i.e. _ , not more than @xmath0 time units old for some given @xmath0 .",
    "that is , the drones should collectively have a set of _ recent pictures _ of all sensitive locations . in order to achieve this goal",
    ", drones may need to fly consuming energy and they may need to return to the base station to recharge their batteries .",
    "the environment may interfere as there might be winds that may move the drone to some direction or other flying objects that may block a drone s progression .",
    "when designing such as system , engineers should specify the behavior of drones , _",
    "e.g. _ , where to move , when to take a picture , when to return to a base station , etc .",
    "a verification problem , called _ realizability problem _ , is to check , whether under the given time constraints , the specified system can achieve the assigned goal , _",
    "e.g. _ , always collect a recent picture of the sensitive locations .    in many settings",
    ", the drones themselves or the environment may behave non - deterministically .",
    "for example , if a drone wants to reach a point to the northeast , it may first chose to either move north or east , both being equally likely .",
    "similarly , there might be some wind at some location causing any drone under the wind s effect to move in the direction of the wind .",
    "a stronger property that takes into account such non - determinism is to check whether for all possible outcomes ( of drone actions or environment interference ) , the specified system can achieve the assigned goal .",
    "we call this property _ survivability_.    in our previous work  @xcite , we proposed a timed multiset rewriting ( msr ) framework for specifying compliance properties which are similar to _ quantitative safety properties _ investigating the complexity of a number of decision problems .",
    "these properties were defined over the set of _ finite traces _ , _",
    "i.e. _ , the execution of a finite number of actions .",
    "realizability and survivability , on the other hand , are similar to _ quantitative liveness problems _ , defined over infinite traces .",
    "the transition to properties over infinite traces leads to many challenges as one can easily fall into undecidability fragments of verification problems .",
    "a main challenge is to identify the syntatical conditions on specifications so that the survivability and feasibility problems fall into a decidable fragment and at the same time interesting examples can be specified .",
    "also the notion that a system satisfies a property perpetually implies that the desired property should be valid at all time instances independent of environment interference .",
    "another issue is that systems should not be allowed to perform an unbounded number of actions in a single time instance a problem similar to the zeno paradox .",
    "the main contribution of this paper is threefold :    1 .   we propose a novel class of systems called _ progressive timed systems _ ( pts ) ( section  [ sec : timedmsr ] ) , specified as timed msr theories , for which , intuitively , only a finite number of actions can be carried out in a bounded time .",
    "we demonstrate that our drone example belongs to this class ( section  [ sec : progdrones ] ) .",
    "we define a language for specifying realizability and survivability properties ( section  [ sec : timedprop ] ) demonstrating that many interesting problems in time - sensitive distributed systems ( tsds ) can be specified using our language ; 2 .",
    "we investigate ( section  [ sec : complex ] ) the complexity of deciding whether a given system satisfies realizability and survivability .",
    "while these problems are undecidable in general , we show that they are pspace - complete for pts .",
    "we also show that when we bound time ( as in bounded - model checking ) the realizability problem for pts is np - complete and survivability is in the @xmath1 class of the polynomial hierarchy ( @xmath2 )  @xcite .",
    "3 .   finally",
    "( section  [ sec : simul ] ) , we show that the rewriting logic tool maude  @xcite can be used to automate the analysis of tsds .",
    "we implemented the drone scenario described above following the work of talcott _",
    "et al . _",
    "@xcite and carried out a number of simulations with different instances of this scenario .",
    "our simulations demonstrate that specifiers can quickly find counter - examples where their specifications do not satisfy time bounded survivability .",
    "we conclude by discussing related and future work ( section  [ sec : related ] ) .",
    "assume a finite first - order typed alphabet , @xmath3 , with variables , constants , function and predicate symbols .",
    "terms and facts are constructed as usual ( see  @xcite ) by applying symbols of correct type ( or sort ) .",
    "we assume that the alphabet contains the constant @xmath4 denoting zero and the function @xmath5 denoting the successor function .",
    "whenever it is clear from the context , we write @xmath6 for @xmath7 and @xmath8 for @xmath9 .    _ timestamped facts _ are of the form @xmath10 , where @xmath11 is a fact and @xmath12 is natural number called _ timestamp_. ( notice that timestamps are _ not _ constructed by using the successor function . )",
    "there is a special predicate symbol @xmath13 with arity zero , which will be used to represent global time .",
    "configuration _ is a multiset of ground timestamped facts , @xmath14 , with a single occurrence of a @xmath13 fact .",
    "configurations are to be interpreted as states of the system .",
    "consider the following configuration where the global time is 4 .",
    "@xmath15 fact @xmath16 denotes that drone @xmath17 is at position @xmath18 at time @xmath19 with @xmath20 energy units left in its battery ; fact @xmath21 denotes that the point to be monitored by @xmath22 is at position @xmath18 and the last picture of it was taken at time @xmath19 .",
    "thus , the above configuration denotes a scenario with two drones at positions @xmath23 and @xmath24 and energy left of 10 and 8 , and two points to be monitored at positions @xmath25 and @xmath26 , where the former has been taken a photo at time @xmath27 and the latter at time 0 .",
    "configurations are modified by multiset rewrite rules which can be interpreted as actions of the system .",
    "there is only one rule that modifies global time : @xmath28 where @xmath29 is a time variable . applied to a configuration , @xmath30 , it advances global time by one , resulting in @xmath31 .",
    "the remaining rules are _ instantaneous _ as they do not modify global time , but may modify the remaining facts of configurations ( those different from @xmath13 ) .",
    "instantaneous rules have the form : @xmath32 where @xmath33 are natural numbers , @xmath34 is a set of timestamped predicates possibly with variables , and @xmath35 is the guard of the action which is a set of constraints involving the variables appearing in the rule s pre - condition , _",
    "i.e. _  the variables @xmath36 . following @xcite we say that @xmath37 are consumed by the rule and @xmath38 are created by the rule .",
    "( in a rule , we color the consumed facts and the created facts . )",
    "constraints may be of the form : @xmath39 where @xmath29 and @xmath40 are time variables , and @xmath41 is a natural number .",
    "all variables in the guard of a rule are assumed to appear in the rule s pre - condition .",
    "we use @xmath42 to denote the disjunction of @xmath43 and @xmath44 .",
    "a rule @xmath45 can be _ applied on a configuration _",
    "@xmath46 if there is a ground substituition @xmath47 , such that @xmath48 and @xmath49 is true .",
    "the resulting configuration is @xmath50 .",
    "we write @xmath51 for the one - step relation where configuration @xmath46 is rewritten to @xmath52 using an instance of rule @xmath53 .",
    "a timed msr system @xmath54 is a set of rules containing only instantaneous rules ( equation  [ eq : instantaneous ] ) and the tick rule ( equation  [ eq : tick ] ) .",
    "a _ trace _ of a timed msr @xmath54 starting from an initial configuration @xmath55 is a sequence of configurations where for all @xmath56 , @xmath57 for some @xmath58 .",
    "@xmath59    in the remainder of this paper , we will consider a particular class of timed msr , called _ progressive timed msr _ ( pts ) , which are such that only a finite number of actions can be carried out in a bounded time interval which is a natural condition for many systems .",
    "we built pts over balanced msr taken from our previous work  @xcite .",
    "the balanced condition is necessary for decidability of problems ( such as reachability as well as the problems introduced in section  [ sec : timedprop ] ) .",
    "[ def : balanced ] a timed msr @xmath54 is _ balanced _",
    "if for all instantaneous rules @xmath60 , @xmath53 creates the same number of facts as it consumes , that is , in eq .",
    "( [ eq : instantaneous ] ) , @xmath61 .",
    "let @xmath54 be a balanced timed msr .",
    "let @xmath55 be an initial configuration with exactly @xmath62 facts . for all possibly infinite traces @xmath63 of @xmath54 starting with @xmath55 , all configurations",
    "@xmath64 in @xmath63 have exactly @xmath62 facts .",
    "[ def : progressing ] a timed msr @xmath54 is _ progressive _ if @xmath54 is balanced and for all instantaneous rules @xmath60 :    * rule @xmath53 creates _ at least one _ fact with timestamp greater than the global time , that is , in equation  ( [ eq : instantaneous ] ) , at least one @xmath65 ; * rule @xmath53 consumes _ only _ facts with timestamps in the past or at the current time , that is , in equation  ( [ eq : instantaneous ] ) , the set of constraints @xmath35 contains the set @xmath66 .",
    "the following proposition establishes a bound on the number of instances of instantaneous rules appearing between two consecutive instances of tick rules , while the second proposition formalizes the intuition that pts always move forward .",
    "[ prop : bounded - length ] let @xmath54 be a pts , @xmath55 an initial configuration and @xmath62 the number of facts in @xmath55 .",
    "for all traces @xmath63 of @xmath54 starting from @xmath67 , let    @xmath68    be any sub - sequence of @xmath63 with exactly two instances of the tick rule , one at the beginning and the other at the end",
    ". then @xmath69 .",
    "[ prop : progressing ] let @xmath54 be a pts .",
    "in all infinite traces of @xmath54 the global time tends to infinity .    for readability , we will assume from this point onwards that for all rules @xmath53 , the set of its constraints implicitly contains the set @xmath70 as shown in definition  [ def : progressing ] , not writing @xmath70 explicitly in our specifications .",
    "finally , notice that pts has many syntatical conditions , _",
    "e.g. _ , balanced condition ( definition  [ def : balanced ] ) , time constraints ( eq .  [ eq : constraints ] ) , instantaneous rules ( eq .  [ eq : instantaneous ] ) .",
    "each one of these conditions have been carefully developed as without any of them important verification problems , such as the reachability problem , becomes undecidable as we show in our previous  @xcite .",
    "thus these conditions are needed also for infinite traces .",
    "the challenge here of allowing infinite traces is to make sure time advances .",
    "the definition of pts is a simple and elegant way to enforce this .",
    "moreover , as we show in section  [ sec : progdrones ] , it is still possible to specify many interesting examples including our motivating example and still prove the decidability of our verification problems involving infinite traces ( section  [ sec : complex ] ) .",
    "@xmath71       time@t , { \\mathcal{p}}(p_1,\\ldots , p_n ) , { \\textcolor{mahogany}{dr(id , x , y+1,e+1)@t } } \\mid domove(id , x , y+1,e+1,t , t_1,\\ldots , t_n , south ) { \\longrightarrow}\\\\ \\qquad \\qquad time@t , { \\mathcal{p}}(p_1,\\ldots , p_n ) , { \\textcolor{midnightblue}{dr(id , x , y , e)@(t+1)}}\\\\[5pt ]       time@t , { \\mathcal{p}}(p_1,\\ldots , p_n ) , { \\textcolor{mahogany}{dr(id , x+1,y , e+1)@t } } \\mid domove(id , x+1,y , e+1,t , t_1,\\ldots , t_n , west ) { \\longrightarrow}\\\\ \\qquad \\qquad time@t , { \\mathcal{p}}(p_1,\\ldots , p_n ) , { \\textcolor{midnightblue}{dr(id , x , y , e)@(t+1)}}\\\\[5pt ]       time@t , { \\mathcal{p}}(p_1,\\ldots , p_n ) , { \\textcolor{mahogany}{dr(id , x , y , e+1)@t } } \\mid domove(id , x , y , e+1,t , t_1,\\ldots , t_n , east ) { \\longrightarrow}\\\\ \\qquad \\qquad time@t , { \\mathcal{p}}(p_1,\\ldots , p_n ) , { \\textcolor{midnightblue}{dr(id , x , y , e)@(t+1)}}\\\\[5pt ]       time@t , { \\mathcal{p}}(p_1,\\ldots , p_n ) , { \\textcolor{mahogany}{dr(id , x_b , y_b , e)@t } } \\mid docharge(id , e , t , t_1,\\ldots , t_n ) { \\longrightarrow}\\\\ \\qquad \\qquad time@t , { \\mathcal{p}}(p_1,\\ldots , p_n ) , { \\textcolor{midnightblue}{dr(id , x_b , y_b , e+1)@(t+1)}}\\\\[5pt ]       time@t , pt(p_1,x_1,y_1)@t_1 , \\ldots , { \\textcolor{mahogany}{pt(p_i , x , y)@t_i } } , \\ldots , pt(p_n , x_n , y_n)@t_n , { \\textcolor{mahogany}{dr(id , x , y , e)@t } } \\\\",
    "\\qquad \\mid doclick(id , x , y , e , t , t_1,\\ldots , t_i,\\ldots , t_n ) { \\longrightarrow}\\\\   time@t , pt(p_1,x_1,y_1)@t_1 , \\ldots , { \\textcolor{midnightblue}{pt(p_i , x , y)@t } } , \\ldots , pt(p_n , x_n , y_n)@t_n , { \\textcolor{midnightblue}{dr(id , x , y , e-1)@(t+1)}}\\\\[5pt ]    time@t , { \\textcolor{mahogany}{dr(id , x , y , e)@t } } \\mid haswind(x , y , north ) { \\longrightarrow}time@t , { \\textcolor{midnightblue}{dr(id , x , y+1,e)@(t+1)}}\\\\[5pt ]    time@t , { \\textcolor{mahogany}{dr(id , x , y+1,e)@t } } \\mid haswind(x , y , south ) { \\longrightarrow}time@t , { \\textcolor{midnightblue}{dr(id , x , y , e)@(t+1)}}\\\\[5pt ]    time@t , { \\textcolor{mahogany}{dr(id , x+1,y , e)@t } } \\mid haswind(x , y , west ) { \\longrightarrow}time@t , { \\textcolor{midnightblue}{dr(id , x , y , e)@(t+1)}}\\\\[5pt ]    time@t , { \\textcolor{mahogany}{dr(id , x , y , e)@t } } \\mid haswind(x , y , east ) { \\longrightarrow}time@t , { \\textcolor{midnightblue}{dr(id , x+1,y , e)@(t+1 ) } }   \\end{array}\\ ] ]    figure  [ fig : rules - complete ] depicts the macro rules of our motivating scenario where drones are moving on a fixed grid of size @xmath72 , have at most @xmath73 energy units and take pictures of some points of interest . we assume that there are @xmath6 such points @xmath74 , where @xmath6 is fixed , a base station is at position @xmath75 , and that the drones should take pictures so that all pictures are recent , that is , the last time a photo of it was taken should not be more than @xmath0 time units before the current time of any moment .",
    "clearly if drones choose non - deterministically to move some direction without a particular strategy , they will fail to achieve the assigned goal . a strategy is specified by using time constraints . for this example , the strategy would depend on the difference @xmath76 , for @xmath77 , specifying the time since the last picture of the point @xmath78 that is the set of time constraints : @xmath79 where for all @xmath77 we instantiate @xmath80 by values in @xmath81 .    for example",
    ", the macro rule with @xmath82 in figure  [ fig : rules - complete ] is replaced by the set of rules : @xmath83 where @xmath84 is function that returns a boolean value depending on the desired behavior of the drone .",
    "finally , there are macro rules for moving the drone , taking a picture , charging , and macro specifying winds . while most of the rules have the expected result , we explain the click and wind rules .",
    "the click rule is applicable if the drone is at the same position , @xmath85 , as a point of interest @xmath78 .",
    "if applied , the timestamp of the fact @xmath86 is updated to the current time @xmath29 .",
    "the wind rule is similar to the move rules moving the drone to some direction , but does not cause the drone to consume its energy .    in our implementation , we used a more sophisticated approach described in  @xcite using soft - constraints to specify a drone s strategy .",
    "it can be translated as a pts by incorporating the strategy used as described above .",
    "[ [ other - examples ] ] other examples + + + + + + + + + + + + + +    finally , there are a number of other examples which we have been investigating and that can are progressive . in  @xcite",
    ", we model a simplified version of a package delivery systems inspired by amazon s prime air service . in  @xcite",
    ", we model a patrolling bot which moves from one point to another .",
    "all these examples seem to be progressive .",
    "other examples besides those involving drones also seem to be progressive .",
    "for example , in our previous work , we specify a monitor for clinical trials  @xcite using our timed msr framework with discrete time .",
    "this specification seems to be also progressive .",
    "in order to define quantitative temporal properties , we review the notion of critical configurations and compliant traces from our previous work  @xcite .",
    "_ critical configuration specification _ is a set of pairs @xmath87 .",
    "each pair @xmath88 is of the form :    @xmath89    where @xmath90 are time variables , @xmath91 are facts ( possibly containing variables ) and @xmath92 is a set of time constraints involving only the variables @xmath90 . given a critical configuration specification , @xmath93 , we classify a configuration @xmath46 as _ critical _ if for some @xmath77 , there is a grounding substitution , @xmath47 , mapping time variables in @xmath64 to natural numbers and non time variables to terms such that :    * @xmath94 ; * all constraints in @xmath95 are valid .    where substitution application ( @xmath96 ) is defined as usual  @xcite .",
    "we can specify usual safety conditions which do not involve time .",
    "for example , a drone should never run out of energy .",
    "this can be specified by using the following set of critical configuration specification :    @xmath97    the following critical configuration specification specifies a quantitative property involving time :    @xmath98    together with the specification in figure  [ fig : rules - complete ] , this critical configuration specification specifies that the last pictures of all points of interest ( @xmath74 located at @xmath99 ) should have timestamps no more than @xmath0 time units old .",
    "let the facts @xmath100 and @xmath101 denote , respectively , that at time @xmath102 the drone @xmath103 entered the base station to recharge and that the station is empty .",
    "moreover , assume that only one drone may be in the station to recharge , which would be specified by adding the following rules specifying the drone landing and take off , where @xmath104 is a constant symbol denoting that a drone landed on the base station : @xmath105    time@t,{\\textcolor{mahogany}{dr(id , st , st)@t}},{\\textcolor{mahogany}{st(id)@t_1 } } { \\longrightarrow}time@t,{\\textcolor{midnightblue}{dr(id , x_b , y_b)@(t+1)}},{\\textcolor{midnightblue}{st(empty)@t}}\\\\     \\end{array }        \\end{small}\\ ] ] then , the critical configuration specification @xmath106 specifies that one drone should not remain too long ( more than @xmath107 time units ) in a base station not allowing other drones to charge .",
    "a trace of a timed msr is _ compliant _ for a given critical configuration specification if it does not contain any critical configuration",
    ".    we will be interested in survivability which requires checking whether , given an initial configuration , all possible infinite traces of a system are compliant . in order to define a sensible notion of survivability , however , we need to assume some conditions on when the tick rule is applicable . with no conditions on the application of the tick rule many timed systems of interest , such as our main example with drones ,",
    "do not satisfy survivability as the following trace containing only instances of the tick rule could always be constructed :    @xmath108    imposing a _ time sampling _ is a way to avoid such traces where the time simply ticks .",
    "they are used , for example , in the semantics of verification tools such as real - time maude  @xcite . in particular ,",
    "a time sampling dictates when the tick rule must be applied and when it can not be applied .",
    "this treatment of time is used both for dense and discrete times in searching and model checking timed systems .",
    "a ( possibly infinite ) trace @xmath63 of a timed msr @xmath54 uses a _ lazy time sampling _ if for any occurrence of the tick rule @xmath109 in @xmath63 , no instance of any instantaneous rule in @xmath54 can be applied to the configuration @xmath64 .    in lazy time sampling instantaneous rules are given a higher priority than the tick rule . under this time sampling",
    ", a drone should carry out one of the rules in figure  [ fig : rules - complete ] at each time while time can only advance when all drones have carried out their actions for that moment .",
    "this does not mean , however , that the drones will satisfy their goal of always having recent pictures of the points of interest as this would depend on the behavior of the system , _",
    "i.e. _ , the actions carried out by the drones . intuitively , the lazy time sampling does not allow the passing of time if there are scheduled drone actions at the current time .",
    "its semantics reflects that all undertaken actions do happen .    in the remainder of this paper ,",
    "we fix the time sampling to lazy time sampling .",
    "we leave for future work investigating whether our complexity results hold for other time samplings .",
    "the first property we introduce is realizability .",
    "realizability is useful for increasing one s confidence in a specified system , as clearly a system that is not realizable can not accomplish the given tasks ( specified by a critical specification ) and therefore , the designer would need to reformulate it .",
    "if a system is shown realizable , the trace , @xmath63 , used to prove it could also provide insights on the sequence of actions that lead to accomplishing the specified tasks . this may be used to refine the specification reducing possible non - determinism .",
    "[ def : feasibility ] a timed msr @xmath54 is _ realizable _ ( resp . , _",
    "@xmath6-time - bounded realizable _ ) with respect to the lazy time sampling , a critical configuration specification @xmath93 and an initial configuration @xmath55 if there _ exists a trace _",
    ", @xmath63 , that starts with @xmath55 and uses the lazy time sampling such that :    1 .",
    "@xmath63 is compliant with respect to @xmath93 ; 2 .",
    "global time tends to infinity ( resp .",
    ", global time advances by exactly @xmath6 time units ) in @xmath63 .",
    "the second condition that global time tends to infinity , which implies that only a finite number of actions are performed in a given time .",
    "another way of interpreting this condition following @xcite is of a liveness condition , that is , the system should not get stuck .",
    "the first condition , on the other hand , is a safety condition as it states that no bad state should be reached .",
    "thus the feasibility problem ( and also the survivability problem introduced next ) is a combination of a liveness and safety conditions .",
    "moreover , since @xmath93 involve time constraints , it is a quantitative liveness and safety property .",
    "the @xmath6-time - bounded realizability problem is motivated by bounded model checking .",
    "we look for a finite compliant trace that spreads over a @xmath6 units of time , where @xmath6 is fixed .",
    "as already noted , realizability could be useful in reducing non - determinism in the specification .",
    "in many cases , however , it is not desirable and even not possible to eliminate the non - determinism of the system .",
    "for example , in open distributed systems , the environment can play an important role .",
    "winds , for example , may affect drones performances such as the speed and energy required to move from one point to another .",
    "we would like to know whether for all possible decisions taken by agents and under the interference of the environment , the given timed msr accomplishes the specified tasks .",
    "_ if so , we say that a system satisfies survivability .",
    "_    [ def : survivabilty ] a timed msr @xmath54 satisfies _ survivability _ ( resp . , _",
    "@xmath6-time - bounded survivability _ ) with respect to the lazy time sampling , a critical configuration specification @xmath93 and an initial configuration @xmath55 if it is realizable ( resp .",
    ", @xmath6-time - bounded realizable ) and if _ all infinite traces _",
    "all traces with exactly @xmath6 instances of the tick rule _ ) , @xmath63 , that start with @xmath55 and use the lazy time sampling are such that :    1 .",
    "@xmath63 is compliant with respect to @xmath93 ; 2 .",
    "the global time tends to infinity ( resp .",
    ", no condition ) .",
    "our complexity results , for a given pts @xmath54 , an initial configuration @xmath55 and a critical configuration specification @xmath93 , will mention the value @xmath110 which is an upper - bound on the natural numbers appearing in @xmath55 , @xmath54 and @xmath93 .",
    "@xmath110 can be inferred syntactically by simply inspecting the timestamps of @xmath55 , the @xmath111 values in timestamps of rules ( which are of the form @xmath112 ) and constraints in @xmath54 and @xmath93 ( which are of the form @xmath113 and @xmath114 ) .",
    "for example , the @xmath115 for the specification in figure  [ fig : rules - complete ] .",
    "the size of a timestamped fact @xmath116 , written @xmath117 is the total number of alphabet symbols appearing in @xmath11 .",
    "for instance , @xmath118 . for our complexity results ,",
    "we assume a bound , @xmath119 , on the size of facts .",
    "for example , in our specification in figure  [ fig : rules - complete ] , we can take the bound  @xmath120 . without this bound ( or other restrictions ) , any interesting decision problem is undecidable by encoding the post correspondence problem  @xcite .",
    "notice that we do not always impose an upper bound on the values of timestamps .",
    "assume throughout this section the following : ( 1 ) @xmath3  a finite alphabet with @xmath121 predicate symbols and @xmath122 constant and function symbols ; @xmath54  a pts constructed over @xmath3 ; @xmath62  the number of facts in the initial configuration @xmath55 ; @xmath93  a critical configuration specification constructed over @xmath3 ; @xmath119  an upper - bound on the size of facts ; @xmath110  an upper - bound on the numeric values of @xmath123 and @xmath93 .      in order to prove the pspace - completeness of realizability and survivability problems ,",
    "we review the machinery introduced in our previous work  @xcite called @xmath124-configuration .    for a given @xmath110 the _ truncated time difference _ of two timed facts @xmath125 and @xmath126 with , denoted by @xmath127 ,",
    "is defined as follows :    @xmath128    let @xmath129 , be a configuration of a timed msr @xmath54 written in canonical way where the sequence of timestamps @xmath130 is non - decreasing .",
    "the @xmath124-configuration of @xmath46 for a given @xmath110 is    @xmath131 \\ .",
    "$ ]    in our previous work  @xcite , we showed that a @xmath124-configuration is an equivalence class on configurations .",
    "namely , for a given @xmath110 , we declare @xmath132 and @xmath133 equivalent , written @xmath134 , if and only if their @xmath124-configurations are exactly the same .",
    "moreover , we showed that there is a bisimulation between ( compliant ) traces over configurations and ( compliant ) traces over their @xmath124-configurations in the following sense : if @xmath135 and @xmath136 , then there is a trace @xmath137 such that @xmath138 .",
    "this result appears in  ( * ? ? ?",
    "* corollary 7 ) and more details can be found in appendix [ sec : app - bisimulation ] .",
    "therefore , in the case of balanced timed msrs , we can work on traces constructed using @xmath124-configurations .",
    "moreover , the following lemma establishes a bound on the number of different @xmath124-configurations .",
    "the proof can be found in appendix [ sec : app - number - delta ] .",
    "[ lemma : numstates ] assume @xmath139 as described above .",
    "the number of different @xmath124-configurations , denoted by @xmath140 is such that    @xmath141      our previous work only dealt with _ finite traces_.",
    "the challenge here is to deal with infinite traces and in particular the feasibility and survivability problems .",
    "these problems are new and as far as we know have not been investigated in the literature ( see section  [ sec : related ] for more details ) .",
    "pspace - hardness of both the realizability and survivability can be shown by adequately adapting our previous work  @xcite ( shown in the appendix  [ sec : app - pspace ] ) .",
    "we therefore show pspace - membership of these problems .",
    "recall that a system is realizable if there is a compliant infinite trace @xmath63 in which the global time tends to infinity . since @xmath54 is progressive , we get the condition on time from proposition  [ prop : progressing ] .",
    "we , therefore , need to construct a compliant infinite trace .",
    "the following lemma estrablishes a criteria :    [ lem : lengthpspace ] assume @xmath142 as described above .",
    "if there is a compliant trace ( constructed using @xmath124-configurations ) starting with ( the @xmath124-representation of ) @xmath55 with length @xmath143 , then there is an infinite compliant trace starting with ( the @xmath124-representation of ) @xmath55 .",
    "assume that for any given timed msr @xmath54 , an initial configuration @xmath55 and a critical configuration specification @xmath93 we have two functions @xmath144 and @xmath145 which check , respectively , whether a rule in @xmath54 is applicable to a given @xmath124-configuration and whether a @xmath124-configuration is critical with respect to @xmath93 .",
    "moreover , let @xmath146  be a function implementing the lazy time sampling .",
    "it takes a timed msr and a @xmath124-configuration of that system , and returns 1 when the tick must be applied and 0 when it must not be applied .",
    "we assume that @xmath144 , @xmath145 and @xmath146  run in turing time bounded by a polynomial in @xmath147 .",
    "notice that for our examples this is the case .",
    "because of lemma  [ lem : lengthpspace ] , we can show that the realizability problem is in pspace by searching for compliant traces of length @xmath143 ( stored in binary ) . to do so , we rely on the fact that pspace and npspace are the same complexity class  @xcite .",
    "[ th : pspace - feasibility ] assume @xmath3 a finite alphabet , @xmath54 a pts , an initial configuration @xmath55 , @xmath62 the number of facts in @xmath55 , @xmath93 a critical configuration specification , @xmath119 an upper - bound on the size of facts , @xmath110 an upper - bound on the numeric values in @xmath123 and @xmath93 , and the functions @xmath148 and @xmath146  as described above .",
    "there is an algorithm that , given an initial configuration @xmath55 , decides whether @xmath54 is realizable with respect to the lazy time sampling , @xmath93 and @xmath55 and the algorithm runs in space bounded by a polynomial in @xmath149 and @xmath150 .",
    "the polynomial is in fact @xmath151 and the proof is in appendix [ sec : app - pspace feas ] .",
    "we now consider the survivability problem .",
    "recall that in order to prove that @xmath54 satisfies survivability with respect to the lazy time sampling , @xmath93 and @xmath55 , we must show that @xmath54 is realizable and that for all infinite traces @xmath63 starting with @xmath55 ( definition  [ def : survivabilty ] ) :    1 .",
    "@xmath63 is compliant with respect to @xmath93 ; 2 .",
    "the global time in @xmath63 tends to infinity .",
    "checking that a system is realizable is pspace - complete as we have just shown .",
    "moreover , the second property ( time tends to infinity ) follows from proposition  [ prop : progressing ] for progressive timed msr .",
    "it remains to show that all infinite traces using the lazy time sampling are compliant , which reduces to checking that _ no critical configuration is reachable _ from the initial configuration @xmath55 by a trace using the lazy time sampling .",
    "this property can be decided in pspace by relying on the fact that pspace , npspace and co - pspace are all the same complexity class  @xcite .",
    "therefore , survivability is also in pspace as states the following theorem . its proof can be found in appendix [ sec : survive - pspace ] .",
    "[ th : pspace - survivability ] assume @xmath152 and the functions @xmath148 and @xmath146  as described in theorem  [ th : pspace - feasibility ] .",
    "there is an algorithm that decides whether @xmath54 satisfies the survivability problem with respect to the lazy time sampling , @xmath93 and @xmath55 which runs in space bounded by a polynomial in @xmath149 and @xmath150 .",
    "both the realizability and the survivability problem for pts are pspace - complete when assuming a bound on the size of facts .",
    "we now consider the @xmath6-time - bounded versions of the realizability and survivability problems ( definitions  [ def : feasibility ] and [ def : survivabilty ] ) .",
    "the following lemma establishes an upper - bound on the length of traces with exactly @xmath6 instances of tick rules for pts .",
    "it follows immediately from proposition  [ prop : bounded - length ] .",
    "[ lem : polysize ] let @xmath6 be fixed and assume @xmath152 as described in theorem  [ th : pspace - feasibility ] . for all traces @xmath63 of @xmath54 with exactly @xmath6 instances of the tick rule ,",
    "the length of @xmath63 is bounded by @xmath153 .",
    "we can check in polynomial time whether a trace is compliant and has exactly @xmath6 ticks .",
    "therefore , the @xmath6-time - bounded realizability problem is in np as stated by the following theorem .",
    "its proof is in the .",
    "[ thm : np - feasible ] let @xmath6 be fixed and assume @xmath154 and the functions @xmath155 as described in theorem  [ th : pspace - feasibility ] .",
    "the problem of determining whether @xmath54 is @xmath6-time - bounded realizable with respect to the lazy time sampling , @xmath93 and @xmath55 is in np with @xmath55 as the input .    for np - hardness",
    ", we encode the np - hard problem 3-sat as an @xmath6-time - bounded realizability problem as done in our previous work  @xcite .",
    "the encoding can be found in the appendix [ sec : app - sat ] .",
    "recall that for @xmath6-time - bounded survivability property , we need to show that :    1 .",
    "@xmath54 is @xmath6-time - bounded realizable with respect to @xmath93 ; 2 .   all traces using the lazy time sampling with exactly @xmath6 ticks are compliant with respect to @xmath93 .    as we have shown , the first sub - problem is np - complete .",
    "the second sub - problem is reduced to checking that no critical configuration is reachable from @xmath55 by a trace using the lazy time sampling with less or equal to @xmath6 ticks .",
    "we do so by checking whether a critical configuration is reachable .",
    "this is similar to realizability which we proved to be in np .",
    "if a critical configuration is reachable then @xmath54 does not satisfy the second sub - problem , otherwise it does satisfy .",
    "therefore , deciding the second sub - problem is in co - np .",
    "thus the @xmath6-timed survivability problem is in a class containing both np and co - np , _",
    "e.g. _ , @xmath1 of the polynomial hierarchy ( @xmath2 )  @xcite .",
    "let @xmath6 be fixed and assume @xmath152 and the functions @xmath155 as described in theorem  [ th : pspace - feasibility ] .",
    "the problem of determining whether @xmath54 satisfies @xmath6-time - bounded survivability with respect to the lazy time sampling , @xmath93 and @xmath55 is in the class @xmath1 of the polynomial hierarchy ( @xmath2 ) with input @xmath55 .",
    "cc    c|c + @xmath156 & f , @xmath157 , @xmath158 + @xmath159 & f , @xmath160 , @xmath161 + @xmath162 & s , @xmath163 , @xmath164 +    &    c|c + @xmath165 & f , @xmath166 , @xmath167 + @xmath168 & f , @xmath169 , @xmath170 + @xmath171 & s , @xmath172 , @xmath173 + @xmath174 & f , @xmath175 , @xmath176 +     +   +    c|c + @xmath177 & f , @xmath178 , @xmath179 + @xmath180 & f , @xmath181 , @xmath182 + @xmath156 & s , @xmath183 , @xmath179 +    &    c|c + @xmath184 & f , @xmath185 , @xmath186 + @xmath187 & f , @xmath188 , @xmath189 + @xmath174 & s , @xmath188 , @xmath190 + @xmath191 & f , @xmath192 , @xmath193 +    for our bounded simulations , we implemented a more elaborated version of our running scenario in maude using the machinery described in  @xcite .",
    "our preliminary results are very promising .",
    "we are able to model - check fairly large systems for the bounded survivability .",
    "we consider @xmath194 drones which should have recent pictures , _",
    "i.e. _ , at most @xmath0 time units old , of @xmath195 points distributed in a grid @xmath72 , where the base station is at position @xmath196 , and drones have maximum energy of @xmath73 . drones use soft - constraints , which take into account the drone s position , energy , and pictures , to rank their actions and they perform any one the best ranked actions .",
    "drones are also able to share information with the base station .",
    "our simulation results are depicted in table  [ tab : exp ] .",
    "we model - checked the @xmath6-timed survivability of the system where @xmath197 .",
    "we varied @xmath0 and the maximum energy capacity of drones @xmath73 .",
    "our implementation  @xcite finds counter examples quickly ( less than a minute ) even when considering a larger grid ( @xmath198 ) and three drones . states . ]",
    "we can observe that our implementations can help specifiers to decide how many drones to use and with which energy capacities .",
    "for example , in exp 3 , drones required a great deal of energy , namely 500 energy units . adding an additional drone , exp 4 , reduced the energy needed to 150 energy units .",
    "finally , the number of states may increase when decreasing @xmath0 because with lower values of @xmath0 , drones may need to come back more often to the base station causing them to share information and increasing the number of states .",
    "this paper introduced a novel sub - class of timed msr systems called progressive which is defined by imposing syntactic restrictions on msr rules .",
    "we illustrated with examples of time sensitive distributed systems that this is a relevant class of systems .",
    "we also introduced two verification problems which may depend on explicit time constraints , namely realizability and survivability , defined over infinite traces .",
    "we showed that both problems are pspace - complete for progressive timed systems , and when we additionally impose a bound on time , realizability becomes np - complete and survivability is in @xmath1 of the polynomial hierarchy .",
    "finally , we demonstrated by experiments that it is feasible to analyse fairly large progressive systems using the rewriting logic tool maude .",
    "others have proposed languages for specifying properties which allow explicit time constraint .",
    "we review some of the timed automata , temporal logic and rewriting literature .",
    "our progressive condition is related to the _ finite - variability assumption _ used in the temporal logic and timed automata literature  @xcite : in any bounded interval of time , there can be only finitely many observable events or state changes .",
    "similarly , progressive systems have the property that only a finite number of instantaneous rules can be applied in any bounded interval of time ( proposition  [ prop : bounded - length ] ) .",
    "such a property seems necessary for the decidability of many temporal verification problems .",
    "as we discussed in much more detail in the related work section of our previous work  @xcite , there are some important differences between our timed msr and timed automata  @xcite on both the expressive power and decidability proofs . for example",
    ", a description of a timed msr system uses first order formulas with variables , whereas timed automata are able to refer only to transition on ground states .",
    "that is , timed msr is essentially a first - order language , while timed automata are propositional . if we replace a first order description of timed msr by all its instantiations , that would lead to an exponential explosion .",
    "furthermore , in contrast with the timed automata paradigm , in timed msr we can manipulate in a natural way the facts both in the past , in the future , and in the present . finally , our model uses discrete times , while timed automata uses dense times .",
    "it seems , however , possible to extend our results to dense times given our previous work  @xcite .",
    "we leave this investigation to future work .",
    "the temporal logic literature has proposed many languages for the specification and verification of timed systems . while many temporal logics include quantitative temporal operators , _ e.g. _",
    "@xcite , this literature does not discuss notions similar to realizability and survivability notions introduced here .",
    "in addition to that , our specifications are executable .",
    "indeed , as we have done here , our specifications can be executed in maude .",
    "the work  @xcite classifies traces and sets of traces as safety , liveness or properties that can be reduced to subproblems of safety and liveness . following this terminology ,",
    "properties relating to both of our problems of realizability and survivability ( that involve infinite traces ) contain elements of safety as well as elements of liveness .",
    "properties relating to the @xmath6-time - bounded versions of realizability and survivabilty could be classified as safety properties .",
    "we do not see how to express this in the terms of  @xcite .",
    "we intend to revisit this in future work .",
    "real - time maude is a tool for simulating and analyzing real - time systems .",
    "rewrite rules are partitioned into instantaneous rules and rules that advance time , where instantaneous rules are given priority .",
    "time advance rules may place a bound on the amount of time to advance , but do not determine a specific amount , thus allowing continual observation of the system .",
    "time sampling strategies are used to implement search and model - checking analyses .",
    "lveczky and messeguer  @xcite investigate conditions under which the maximal time sampling strategy used in real - time maude is complete .",
    "one of the conditions required is tick - stabilizing which is similar to progressive and the finite variability assumption in that one assumes a bound on the number of actions applicable in a finite time .",
    "cardenas  _ et al . _",
    "@xcite discuss possible verification problems of cyber - physical systems in the presence of malicious intruders .",
    "they discuss surviving attacks , such as denial of service attacks on the control mechanisms of devices .",
    "we believe that our progressive timed systems can be used to define sensible intruder models and formalize the corresponding survivability notions .",
    "this may lead to the automated analysis of such systems similar to the successful use of the dolev - yao intruder model  @xcite for protocol security verification .",
    "given the results of this paper , for the decidability of any security problem would very likely involve a progressive timed intruder model .    finally , we believe it is possible to extend this work to dense times given our previous work  @xcite",
    ". there we assume a tick rule of the form @xmath199 .",
    "however , we do not consider critical configuration specifications .",
    "we are currently investigating how to incorporate the results in this paper with the results of  @xcite .    10    bowen alpern and fred  b. schneider . recognizing safety and liveness .",
    ", 2(3):117126 , 1987 .",
    "rajeev alur and thomas  a. henzinger .",
    "logics and models of real time : a survey . in _ rex workshop _",
    ", pages 74106 , 1991 .",
    "rajeev alur and p.  madhusudan .",
    "decision problems for timed automata : a survey . in _ sfm _ , pages 124 , 2004 .",
    "alvaro  a. crdenas , saurabh amin , and shankar sastry .",
    "secure control : towards survivable cyber - physical systems . in _ icdcs _ , pages 495500 , 2008 .",
    "michael  r. clarkson and fred  b. schneider .",
    ", 18(6):11571210 , 2010 .",
    "manuel clavel , francisco durn , steven eker , patrick lincoln , narciso mart - oliet , jos meseguer , and carolyn talcott .",
    ", 2007 .",
    "d.  dolev and a.  yao . on the security of public key protocols .",
    ", 29(2):198208 , 1983 .",
    "nancy  a. durgin , patrick lincoln , john  c. mitchell , and andre scedrov .",
    "multiset rewriting and the complexity of bounded security protocols .",
    ", 12(2):247311 , 2004 .",
    "herbert  b. enderton . .",
    "academic press , 1972 .",
    "marco faella , axel legay , and marille stoelinga .",
    "model checking quantitative linear time logic .",
    ", 220(3):6177 , 2008 .",
    "max kanovich , tajana  ban kirigin , vivek nigam , and andre scedrov . bounded memory dolev - yao adversaries in collaborative systems .",
    ", 2014 .",
    "max kanovich , tajana  ban kirigin , vivek nigam , andre scedrov , and carolyn talcott .",
    "discrete vs. dense times in the analysis of cyber - physical security protocols . in post , pages 259279 , 2015 .",
    "max kanovich , tajana  ban kirigin , vivek nigam , andre scedrov , and carolyn talcott . a rewriting framework and logic for activities subject to regulations . , 2015 .",
    "published online .",
    "max  i. kanovich , tajana  ban kirigin , vivek nigam , and andre scedrov . bounded memory protocols and progressing collaborative systems . in _",
    "esorics _ , 2013 .",
    "max  i. kanovich , tajana  ban kirigin , vivek nigam , andre scedrov , carolyn  l. talcott , and ranko perovic . a rewriting framework for activities subject to regulations . in _",
    "rta _ , pages 305322 , 2012 .",
    "max  i. kanovich , paul rowe , and andre scedrov .",
    "collaborative planning with confidentiality .",
    ", 46(3 - 4):389421 , 2011 .",
    "franois laroussinie , philippe schnoebelen , and mathieu turuani . on the expressivity and complexity of quantitative branching - time temporal logics . , 2003 .",
    "carsten lutz , dirk walther , and frank wolter .",
    "quantitative temporal logics : pspace and below . in _ time _ , pages 138146 , 2005 .",
    "peter  csaba lveczky and jos meseguer .",
    "abstraction and completeness for real - time maude .",
    ", 176(4):527 , 2007 .    peter  csaba lveczky and jos meseguer . the real - time maude tool . in _",
    "tacas 2008 _ , pages 332336 , 2008 .",
    "christos  h. papadimitriou . .",
    "academic internet publ . , 2007",
    ".    w.  j. savitch .",
    "relationship between nondeterministic and deterministic tape classes .",
    ", 4:177192 , 1970 .",
    "carolyn  l. talcott , farhad arbab , and maneesh yadav .",
    "soft agents : exploring soft constraints to model robust adaptive distributed cyber - physical agent systems . in _ software , services , and systems - essays dedicated to martin wirsing _ ,",
    "pages 273290 , 2015 .",
    "carolyn talcott , vivek nigam , farhad arbab , and tobias kapp .",
    "formal specification and analysis of robust adaptive distributed cyber - physical systems . in _",
    "formal methods for the quantitative evaluation of collective adaptive systems _ 2016 .",
    "_ acknowledgments : _",
    "kanovich s research was partially supported by epsrc .",
    "scedrov s research was partially supported by onr and by afosr muri .",
    "kanovich s and scedrov s work on this paper was partially carried out within the framework of the basic research program at the national research university higher school of economics ( hse ) and partially supported within the framework of a subsidy by the russian academic excellence project 5 - 100. talcott was partially supported by nsf grant cns-1318848 and onr grant n00014 - 15 - 1 - 2202 .",
    "nigam and talcott were partially supported by capes science without borders grant 88881.030357/2013 - 01 .",
    "nigam was partially supported by capes and cnpq .",
    "[ thm : delta configurations ] for any timed msr @xmath54 the equivalence relation between configurations is well - defined with respect to the actions of the system ( including time advances ) , lazy time scheduling and critical configurations .",
    "any compliant trace starting from the given initial configuration can be conceived as a compliant trace over @xmath124-representations .",
    "the equivalence among configurations is well defined with respect to application of actions , _",
    "i.e. _  action application on @xmath124-representations is independent of the choice of configuration from the same class .",
    "more precisely , as shown in the diagram below , assume @xmath52 and @xmath200 are equivalent configurations , and assume that @xmath52 is transformed to @xmath201 by means of an action  @xmath202 .",
    "notice that equivalent configurations satisfy the same set of constraints .",
    "hence , the action  @xmath202 is applicable to @xmath200 and will transform @xmath200 into some @xmath203 : @xmath204 \\wr &      &   \\\\[4pt ] { \\mathcal{s}}_2 & \\to_{\\alpha } \\ & \\ { \\mathcal{s}}_2 ' \\end{array}\\ ] ] it remains to show that @xmath205 is equivalent to @xmath203 .",
    "we consider the two types of actions , namely , time advances and instantaneous actions .",
    "notice that , using the lazy time sampling , tick rule is applied to @xmath52 if and only if no instantaneous action can be applied to the given configuration @xmath52 . since @xmath52 and @xmath200 satisfy the same set of constraints , it follows that the tick rule is applied to @xmath200 if and only if the tick rule is applied @xmath52 .",
    "let the time advance transform @xmath206 into  @xmath207 , and @xmath200 to @xmath203 .",
    "since only the timestamp @xmath29 denoting the global time in @xmath208 is increased by 1 , and the rest of the configuration remains unchanged , only truncated time differences involving @xmath13 change in the resulting configurations . because of the equivalence @xmath209 , for a fact @xmath210 in @xmath52 with @xmath211 , @xmath208 and @xmath212 , we have @xmath213 with @xmath214 , @xmath215 and @xmath212 in @xmath200 as well .",
    "therefore , we have @xmath216 $ ] both in @xmath205 and @xmath203 . on the other hand for any future fact @xmath217 with @xmath218 in @xmath52 and in @xmath200 , we get @xmath219 in both @xmath205 and @xmath203 . therefore , @xmath207 and @xmath203 are equivalent .",
    "the reasoning the instantaneous actions is similar .",
    "each created fact in @xmath205 and @xmath203 is of the form @xmath220 and @xmath221 , where @xmath222 and @xmath223 represent global time in @xmath52 and @xmath200 , respectively .",
    "therefore each created fact has the same difference @xmath224 to the global time in the corresponding configuration .",
    "this implies that the created facts have the same truncated time differences to the remaining facts .",
    "hence @xmath207 and @xmath203 are equivalent .",
    "therefore , action application on @xmath124-representations shown in is well defined .    since",
    "equivalent configurations satisfy the same set of constraints , @xmath52 is a critical configuration if and only if @xmath200 is a critical configuration . by induction on the length of the trace",
    ", it immediately follows that , given a timed msr , any compliant trace over configurations can be represented by a compliant trace over @xmath124-representations .",
    "that is , the abstraction of configurations to @xmath124-representations is complete .",
    "the abstraction is also sound .",
    "namely , from a compliant trace over @xmath124-representations , we can extract a concrete compliant trace over configurations .",
    "although any given @xmath124-representation corresponds to an infinite number of configurations , for a given initial configuration @xmath55 , we have  @xmath225 .",
    "the existence of a compliant trace over configurations is then easily proven by induction on the length of the trace over @xmath124-representations .",
    "let the given finite alphabet contain @xmath121 predicate symbols and @xmath122 constant and function symbols .",
    "let the initial configuration @xmath55 contain @xmath62 facts .",
    "let    @xmath226 $ ] + be a @xmath124-representation with @xmath62 facts .",
    "there are @xmath62 slots for predicate names and at most @xmath227 slots for constants and function symbols , where @xmath119 is the bound on the size of facts .",
    "constants can be either constants in the initial alphabet or names for fresh values ( nonces ) .",
    "following @xcite , we need to consider only @xmath228 names for fresh values ( nonces )",
    ". finally , only time differences up to @xmath110 have to be considered together with the symbol @xmath229 and there are @xmath230 slots for time differences in a @xmath124-representation .",
    "therefore the number of different @xmath124-configurations is bounded by  @xmath231 .",
    "we encode a non - deterministic turing machine  @xmath0 that accepts in space  @xmath6 .",
    "we adapt the encoding in  @xcite to a progressive timed msr @xmath54 that uses the lazy time sampling . for readability , in the rules below ,",
    "we do not explicitly write the set of constraints @xmath70 as per definition  [ def : progressing ] . this set is implicitly assumed .",
    "first , we introduce the following propositions : which denotes that _ `` the th cell contains symbol  @xmath232 since time @xmath233 '' _ , where , @xmath232 is a symbol of the tape alphabet of  @xmath0 , and denotes that _ `` the th cell is scanned by  @xmath0 in state  @xmath234 '' _ , where , @xmath234 is a state of  @xmath0 .",
    "a turing machine configuration will be encoded by using the multiset of facts : @xmath235    second , each instruction @xmath236 in @xmath0 of the form , denoting _",
    "`` if in state  @xmath234 looking at symbol  @xmath232 , replace it by  @xmath237 , move the tape head one cell in direction  @xmath111 along the tape , and go into state  @xmath238 '' _ , is specified by the set of actions of the form : @xmath239 where , @xmath240 , @xmath241 , @xmath242 are auxiliary atomic propositions , if @xmath111 is _ right _ , if @xmath111 is _ left _ , and , otherwise .",
    "it is easy to check that above rules are necessarily applied in succession , _ i.e. _  the only transition possible is of the following form : @xmath243 at this point , no instantaneous rule is applicable and therefore the tick rule should be applied .",
    "thus the encoding reflects the lazy time sampling .",
    "the critical configuration specification is any configuration corresponding to a final state of the turing machine , that is : @xmath244    by the above encoding we reduce the problem of a turing machine termination in @xmath6-space to the realizability problem .",
    "more precisely , the given turing machine  @xmath0 does not terminate if and only if there is an infinite compliant trace in the obtained progressive timed msr @xmath54 that uses the lazy time sampling .",
    "the encoding is sound and faithful ( see  @xcite for more details ) .",
    "we then recall the result that pspace and co - pspace are the same complexity class .",
    "thus the realizability problem is pspace - hard .",
    "let @xmath54 be a timed msr constructed over finite alphabet @xmath3 with @xmath121 predicate symbols and @xmath122 constant and function symbols .",
    "let @xmath93 be a critical configuration specification constructed over @xmath3 and @xmath55 be a given initial configuration .",
    "let @xmath62 be the number of facts in the initial configuration @xmath55 , @xmath119 an upper bound on the size of facts , and @xmath110 a natural number that is an upper bound on the numeric values appearing in @xmath123 and @xmath93 .",
    "we propose a non - deterministic algorithm that accepts whenever there is a compliant trace starting from @xmath55 in which time tends to infinity and which uses the lazy time sampling .",
    "we then apply savitch s theorem to determinize this algorithm .    in order to obtain the pspace result we rely on the equivalence among configurations which enables us to search for traces over @xmath124-configurations  [ appendix [ sec : app - bisimulation ] ] instead of searching for traces over concrete configurations .",
    "furthermore , we rely on the assumption that functions @xmath144 and @xmath145 run in pspace to return 1 when a rule @xmath60 is applicable to a given @xmath124-configuration , and when a @xmath124-configuration is critical with respect to @xmath93 , respectively . additionally , we assume that the lazy time sampling is specified as a function @xmath146  which runs in pspace .",
    "@xmath146  takes a @xmath124-configuration and a timed msr and returns 1 when the tick must be applied and returns 0 when it must not be applied according to the lazy time sampling .",
    "because of lemma  [ lem : lengthpspace ] , in the search for compliant traces , it suffices to consider traces of size bounded by the number of different @xmath124-configurations ,  @xmath245 ( stored in binary ) .",
    "let @xmath246 be a natural number such that  @xmath247 .",
    "the algorithm starts with @xmath248 and @xmath249 set to be the @xmath124-configuration of @xmath55 and iterates the following sequence of operations :    1 .",
    "if @xmath250 is representing a critical configuration , _",
    "i.e. _ , if @xmath251 , then return fail , otherwise continue ; 2 .   if @xmath252 , then accept ; else continue ; 3 .   if @xmath146@xmath253 then replace @xmath250 by @xmath254 obtained from @xmath250 by applying the @xmath255 rule ; otherwise guess non - deterministically an instantaneous action , @xmath53 , from @xmath54 applicable to @xmath250 , _",
    "i.e. _ , such an action @xmath53 that @xmath256 .",
    "if so replace @xmath250 with the @xmath124-configuration @xmath254 resulting from applying the action @xmath53 to the @xmath124-configuration @xmath250 .",
    "otherwise fail ; 4 .",
    "set i = i + 1 .",
    "we now show that this algorithm runs in polynomial space .",
    "the greatest number reached by the counter is @xmath257 , which stored in binary encoding takes space bounded by : @xmath258{lcl }   \\log(l_\\sigma(m , k,{d_{max } } ) + 1 ) \\leq   m\\log(j ) + ( m-1)\\log({d_{max}}+ 2 ) +   mk\\log(e + 2 mk ) .",
    "\\end{array}\\ ] ] therefore , in order to store the values of the step - counter , one only needs space that is polynomial in the given inputs .",
    "also , any @xmath124-configuration , @xmath250 can be stored in space that is polynomial to the given inputs .",
    "namely , since @xmath250 is of the form @xmath259 $ ] and values of the truncated time differences , @xmath260 , are bounded , @xmath250 can be stored in space @xmath261 which is polynomially bounded with respect to the inputs .    finally , in step 3 .",
    "algorithm needs to store the action @xmath53 .",
    "this is done by remembering two configurations , while moving from one @xmath124-configuration to another is achieved by updating the facts , updating the positions of facts and the corresponding truncated time differences and continue .",
    "hence , step 3 . can be performed in space polynomial to @xmath262 and the sizes of @xmath144 and @xmath146 .",
    "we adapt the proof of theorem [ th : pspace - feasibility ] to survivability problem using the same notation and making the same assumptions .    in order to prove that @xmath54 satisfies survivability with respect to the lazy time sampling , @xmath93 and @xmath55",
    ", we need to show that all infinite traces @xmath63 starting from @xmath55 are compliant with respect to @xmath93 .",
    "since @xmath54 is progressive , in any infinite trace time necessarily tends to infinity , as per proposition [ prop : progressing ] .",
    "based on our bisimulation result [ appendix [ sec : app - bisimulation ] ] we propose the search algorithm over @xmath124-configurations instead of concrete configurations .",
    "we rely on lemma  [ lem : lengthpspace ] and search only for traces of size bounded by the number of different @xmath124-configurations ,  @xmath245 .    in order to prove survivability we first check realizability by using the algorithm given in the proof of theorem [ th : pspace - feasibility ] .",
    "notice that this algorithm is in pspace with respect to the inputs of survivability as well .",
    "next we show that no critical configuration is reachable form @xmath55 using the lazy time sampling . the following algorithm accepts when a critical configuration is reachable , and fails otherwise .",
    "it begins with @xmath248 and @xmath249 set to be the @xmath124-configuration of @xmath55 and iterates the following sequence of operations :    1 .",
    "if @xmath250 is representing a critical configuration , _",
    "i.e. _ , if @xmath251 , then return accept , otherwise continue ; 2 .   if @xmath263 , then fail ; else continue ; 3 .   if @xmath146@xmath253 then replace @xmath250 by @xmath254 obtained from @xmath250 by applying the @xmath255 rule ; otherwise guess non - deterministically an instantaneous action , @xmath53 , from @xmath54 applicable to @xmath250 , _",
    "i.e. _ , such an action @xmath53 that @xmath256 .",
    "if so replace @xmath250 with the @xmath124-configuration @xmath254 resulting from applying the action @xmath53 to the @xmath124-configuration @xmath250 . otherwise continue ; 4 .",
    "set i = i + 1 .",
    "we take advantage of the fact that pspace , npspace and co - pspace are all the same complexity class  @xcite and determinize the above algorithm and than switch the accept and fail .",
    "the resulting algorithm returns accept if and only if no critical configuration is reachable from the given initial configuration using the lazy time sampling .    the proof that above algorithms run in polynomial space is very similar to that proof relating to theorem [ th : pspace - feasibility ] .",
    "let @xmath54 be a timed msr constructed over finite alphabet @xmath3 with @xmath121 predicate symbols and @xmath122 constant and function symbols .",
    "let @xmath93 be a critical configuration specification constructed over @xmath3 and @xmath55 be a given initial configuration .",
    "let @xmath62 be the number of facts in the initial configuration @xmath55 , @xmath119 an upper bound on the size of facts , and @xmath110 a natural number that is an upper bound on the numeric values appearing in @xmath123 and @xmath93 .",
    "moreover , assume that the function @xmath148 and @xmath264 run in polynomial time with respect to the size of @xmath55 .",
    "we show that we check in polynomial time whether a given trace @xmath63 is compliant and has exactly @xmath6-ticks . because of lemma  [ lem : polysize ]",
    ", we know that traces have size of at most @xmath153 .",
    "recall @xmath6 is fixed .",
    "set @xmath265 and @xmath266 .",
    "let @xmath250 be the configuration at position @xmath246 in @xmath63 .",
    "iterate the following sequence of instructions :    1 .   if @xmath267 then fail ; 2 .",
    "if @xmath268 then fail ; 3 .",
    "if @xmath269 is equal to @xmath6 , then accept ; 4 .",
    "if @xmath270 , then apply the tick rule to @xmath250 obtaining the configuration @xmath254 and increment both @xmath269 and @xmath246 ; 5 .   otherwise if @xmath271 , then guess non - deterministically a rule @xmath53 , such that @xmath256 , apply this rule @xmath53 to @xmath250 , obtaining @xmath254 , and increment @xmath246 .    since the size of facts is bounded and the number of facts in any configuration of the trace is @xmath62 , all steps are done in polynomial time .",
    "assume we are given a formula  @xmath272 .",
    "we construct an initial configuration @xmath55 and a progressive timed msr @xmath54 that checks whether @xmath11 is satisfiable or not . for readability , in the rules below ,",
    "we do not explicitly write the set of constraints @xmath70 as per definition  [ def : progressing ] .",
    "this set is implicitly assumed .",
    "for each variable @xmath273 in @xmath11 , we include the rules in @xmath54 : @xmath274 these rules rewrite the fact @xmath275 to the fact @xmath276 denoting true , or to the fact @xmath277 denoting false .",
    "intuitively , these rules construct an interpretation for the variables in @xmath11 .",
    "+ now , we include the following rules which take an interpretation and reduce @xmath11 accordingly : @xmath278 by inspection , the constructed @xmath54 is progressive timed msr .",
    "we also have a polynomial number of rules , namely , @xmath279 rules and a total of @xmath280 predicates , where @xmath281 and @xmath6 are respectively the number of variables and clauses in @xmath11 .",
    "it is easy to see that our encoding is sound and complete : a configuration with the fact @xmath286 will be reached if and only if @xmath11 is satisfiable .",
    "moreover , there is a trace with exactly @xmath6 ticks if and only if @xmath11 is satisfiable . before the first tick , we set all variables as true or false .",
    "we advance time . in the following @xmath6 ticks ,",
    "we use the rules above to evaluate @xmath287 , the interpretation of the formula @xmath11 .",
    "if @xmath11 is not satisfiable , then no trace with @xmath6 ticks will be compliant .",
    "if @xmath11 is satisfiable , then there is a trace with @xmath6 ticks that is compliant ."
  ],
  "abstract_text": [
    "<S> time - sensitive distributed systems ( tsds ) , such as applications using autonomous drones , achieve goals under possible environment interference ( _ e.g. _ , winds ) . </S>",
    "<S> moreover , goals are often specified using explicit time constraints which must be satisfied by the system _ </S>",
    "<S> perpetually_. for example , drones carrying out the surveillance of some area must always have _ recent pictures _ , _ </S>",
    "<S> i.e. _ , at most @xmath0 time units old , of some strategic locations . </S>",
    "<S> this paper proposes a multiset rewriting language with explicit time for specifying and analysing tsdses . </S>",
    "<S> we introduce two properties , _ realizability _ ( some trace is good ) and _ survivability _ ( where , in addition , all admissible traces are good ) . a good trace is an infinite trace in which goals are perpetually satisfied . </S>",
    "<S> we propose a class of systems called _ progressive timed systems _ ( pts ) , where intuitively only a finite number of actions can be carried out in a bounded time period . </S>",
    "<S> we prove that for this class of systems both the realizability and the survivability problems are pspace - complete . </S>",
    "<S> furthermore , if we impose a bound on time ( as in bounded model - checking ) , we show that for pts , realizability becomes np - complete , while survivability is in the @xmath1 class of the polynomial hierarchy . </S>",
    "<S> finally , we demonstrate that the rewriting logic system maude can be used to automate time bounded verification of pts . </S>"
  ]
}