{
  "article_text": [
    "in network modeling of complex systems @xcite , one usually defines a graph with components of the system being represented by the nodes , and the interactions amongst the components being represented as the links ( edges ) of this graph .",
    "this graph is usually inferred from empirical observations of the system and it is uniquely determined if one can specify all the connections in the graph . occasionally , however , the data available from the system is incomplete , and one can not uniquely determine this graph . in this case",
    "there will be a _ set _",
    "@xmath4 of graphs satisfying the data , and one is faced with the following problems : 1 ) construct a graph from @xmath4 ; 2 ) count the number of elements ( graphs ) in @xmath4 ; 3 ) construct all graphs from @xmath4 and 4 ) construct a _ typical _ element of @xmath4 , often interpreted as a uniform random sample taken from @xmath4 .",
    "problems 1),3 ) and 4 ) are construction type problems , whereas 2 ) is an enumeration type problem . in this paper",
    "we restrict ourselves to simple , undirected graphs , that is , any edge connects a single pair of distinct nodes ( no hypergraph , no self - loops ) and there is at most one edge incident on any pair of nodes ( no parallel or multiple edges ) .",
    "a rather important and typical situation is when the empirical data specifies only the degrees of the nodes , in form of a sequence @xmath5 of positive integers , @xmath6 , @xmath7 .",
    "( we exclude zero degree nodes , since they represent isolated points . ) in the following we will refer to such cases as  degree based \" construction ( enumeration ) problems .",
    "there are numerous examples , we will mention only a few here . in epidemics studies of sexually transmitted diseases @xcite the data collected",
    "is from anonymous surveys , where the individuals specify the _ number _ of different partners they have had in a given period of time , without revealing their identity . in this case , the epidemiologist is faced with constructing the most typical contact graph obeying the empirical degree sequence .",
    "another example comes from chemistry where the task is to determine the total number of structural isomers of chemical compounds , such as alkanes . in this case",
    "nodes represent chemical elements ( atoms ) in the compound and a link represents a chemical bond . in the case of alkanes",
    "the bond can be interpreted as a single link in the corresponding graph ( no double bonds ) .",
    "since the valence of an atom is fixed , the formula of an alkane such as @xmath8 ( butane ) will specify only the degree sequence .",
    "knowing all the possible graphs with this degree sequence provides a starting point from which the feasible structures can be inferred .",
    "in particular , butane has 2 , octane ( @xmath9 ) has 18 , @xmath10 has 366,319 isomers , etc .",
    "degree - based graph construction is also found in many other network modeling problems , such as communications ( internet , www , peer - to - peer networks , ) biology ( metabolic networks , gene transcription , etc . )",
    "ecology ( food webs ) and social networks .",
    "it is easy to see that not all integer sequences can be realized as the degrees of a simple graph ( the existence problem ) .",
    "for example , while @xmath11 and @xmath12 are the degree sequences of a path ( @xmath13 ,  ) and a triangle , there is no simple graph with degree sequence @xmath14 or @xmath15 or @xmath16 .",
    "let @xmath17 denote a simple graph where @xmath18 denotes the set of nodes and @xmath19 the set of edges .",
    "consider a sequence of positive integers @xmath5 arranged in decreasing order , @xmath20 ( for convenience reasons , only ) . if there is a simple graph @xmath17 with degree sequence @xmath21",
    ", then we call the sequence @xmath21 a _ graphical sequence _ and in this case we also say that @xmath22 _ realizes _ @xmath21 . a second observation",
    "is that given a graphical @xmath21 ( and thus , we know that a simple graph @xmath22 exists with this degree sequence ) , careless connections of pairs of nodes may not result in a simple graph .",
    "for example , consider the sequence @xmath23 which is graphical ( 4-cycle ) . making the connections @xmath24 however , will force us to make a self - loop @xmath25 .",
    "the degree - based graph construction problem for _ simple undirected labelled graphs _ thus can be announced as follows :    * degree - based graph construction : * + given a sequence of integers @xmath5 , @xmath26 ,    * is there a simple graph @xmath17 on @xmath27-nodes realizing @xmath21 ? *",
    "if the answer to a ) is yes , how can we build such a graph ?",
    "* can we build _ all _ such graphs ?",
    "* let @xmath28 be the set of all such graphs .",
    "how can we sample at uniform from @xmath28 ?",
    "there are two well - known theorems that answer question a ) above , namely the erds - gallai theorem @xcite and the havel - hakimi theorem @xcite , the latter also giving a construction algorithm for a graph with degree sequence @xmath21 and thus answering question b ) as well ( see section [ prev ] ) . in principle , problem c ) can be resolved via the method of edge swaps starting from the graph produced by the havel - hakimi procedure from b ) ( called an hh - graph from now on ) and book - keeping the swaps ( which gets rather involved ) . given two edges @xmath29 and @xmath30",
    ", they can be swapped into @xmath31 and @xmath32 , or @xmath33 and @xmath34 leaving the degree sequence unchanged .",
    "due to a theorem by ryser @xcite , if @xmath35 and @xmath36 are two simple graphs with identical degree sequences , then there is a sequence of edge swaps that transforms one into another @xcite .",
    "edge swapping is also at the basis of all sampling algorithms attempting to answer d ) , using a markov chain monte carlo approach , the literature of which is too extensive to be reviewed here .",
    "the basic idea is to keep swapping edges until the memory of the initial condition ( hh - graph ) is lost and one produces a ( pseudo)-random instance .",
    "this sampling method is approximative and it is not well controlled in general ( except for some specific sequences ) . a simple and direct ( swap - free ) construction method to produce a uniformly sampled random graph from @xmath37",
    "was presented by molloy and reed ( m - r ) @xcite ( see section [ discussion ] ) and subsequently used to generate graphs with given degree sequences @xcite , including those described by power - law degree distributions @xcite .",
    "the problem with the m - r algorithm is that it can become very slow due to rejections caused by self - loops and parallel edges ( see section [ discussion ] ) .    here",
    "we present a new approach to degree - based graph construction .",
    "first we prove our main result that gives the sufficient and necessary conditions for a sequence of integers to be graphical such that a given ( but otherwise arbitrary ) set of connections from a given ( but otherwise arbitrary ) node are avoided .",
    "we then show how to use this result to present an algorithm that builds _ all graphs _ from @xmath28 ( question c ) ) .",
    "it is important to emphasize , that our algorithm does not use edge swaps , it is a direct construction method .",
    "lastly , ( section [ discussion ] ) we show how our result improves on the m - r method of uniform sampling , allowing to reject some of the samples without actually getting to the point where the multi - edge conflicts would actually occur ( see section [ discussion ] ) .",
    "we also make a connection with the renowned tutte s @xmath0-factor theorem @xcite , showing that our result provides a greedy algorithm for constructing all @xmath0-factors in case of @xmath1 where @xmath2 is the complete graph on @xmath27 nodes and @xmath3 is a star graph with @xmath38 leaves centered on some arbitrary node .",
    "the paper is organized as follows : section [ prev ] recalls known fundamental theorems for graph construction , and via a simple counter - example it shows that hh is not sufficient to build all graphs from @xmath28 ; section [ main ] presents our main theorem with its proof and section [ all ] describes the algorithm for building all graphs in @xmath28 ; section [ discussion ] is devoted to discussions .",
    "for simplicity of the notation we will identify node @xmath39 by the integer @xmath40 .",
    "there are two well - known necessary and sufficient conditions for a sequence of nonnegative integers to be graphical : one was given independently by havel @xcite and hakimi @xcite while the other is due to erds and gallai @xcite .",
    "we now announce these results for later reference , however , without proof , those can be found in the corresponding references .",
    "[ tm : hh ] there exists a simple graph with degree sequence @xmath41 , @xmath42 if and only if there exists one with degree sequence @xmath43 .    [",
    "tm : eg ] let @xmath44 be integers .",
    "then they are the degree sequence of a simple graph if and only if + ( i ) @xmath45 is even + ( ii ) for all @xmath46 we have @xmath47    note that theorem  [ tm : hh ] provides a greedy algorithm ( the hh - algorithm ) to generate an actual graph with the given degree sequence @xmath21 while theorem  [ tm : eg ] is an existence result .",
    "tripathi and vijay have recently shown @xcite that it is enough to check the inequalities ( [ ineq ] ) for @xmath48 , where @xmath49 is determined by @xmath50 , @xmath51 , that is only as many times as many distinct terms are in the degree sequence .    in the following",
    "we will imagine the given degree sequence as a collection of _ stubs _ : at each vertex @xmath40 there are @xmath52 stubs (  half - edges \" ) , anchored at the vertex , but the other ends are free . connecting two stubs at two distinct nodes will form an edge between those nodes .",
    "we will call _ the residual degree _ the number of current stubs of a node .",
    "the hh - algorithm for constructing a graph realizing a graphical sequence @xmath21 proceeds as follows : connect all stubs of a node to nodes that have the largest residual degrees and repeat until no stubs are left .",
    "it is important to emphasize , that one can choose any node to connect its stubs , as long as we connect all its stubs to the other nodes with the largest residual degrees .",
    "clearly , if we always choose a high degree node ( from the residual sequence ) to connect its stubs , the hh - algorithm will create a graph in which high degree nodes tend to be connected to other high degree nodes , called assortative property @xcite .",
    "however , if we always pick a node with low ( residual ) degree to connect , we will likely obtain a graph with dissassortative property @xcite .",
    "the hh - theorem is also a consequence ( as a corollary ) of our main result , see section [ main ] .",
    "nevertheless , this is still not enough to produce _ all _ graphs realizing a graphical sequence ! to see that , consider the graphical sequence @xmath53        if the first node to connect is a node with degree 3 , then the hh - algorithm connects it to the other node with degree 3 ( highest degree ) .",
    "if the first node to connect has degree 2 , then the hh - algorithm connects both its stubs to nodes with degree 3 .",
    "however , the graph in fig .",
    "[ fig : nonghh ] does not have any of the connections just mentioned ( a @xmath54 or @xmath55 connection ) , and thus it can not be constructed with the hh - algorithm . in the next section",
    "we introduce a theorem that allows us to construct _ all _ labelled graphs with a given degree sequence .",
    "the above results are naturally placed in the larger context of tutte s famous @xmath0-factor theorem @xcite .",
    "given an integer function @xmath56 , the _ @xmath0-factor _ of a given simple graph @xmath17 is a subgraph @xmath57 of @xmath22 such that @xmath58 for all @xmath59 .",
    "here @xmath60 is the degree of @xmath61 within @xmath57 .",
    "tutte gave sufficient and necessary conditions for the existence of an @xmath0-factor for @xmath22 @xcite , and later connected this to the problem of finding perfects matchings in bipartite graphs @xcite .",
    "it is not hard to see , that taking @xmath62 , that is the complete graph on @xmath27-nodes , the @xmath0-factor problem is exactly question a ) of the degree - based construction problem with @xmath63 . in this sense ,",
    "the hh - algorithm is a greedy method for constructing an @xmath0-factor on @xmath2 .",
    "before we can announce and prove our main result , we need to introduce a number of definitions and observations .",
    "let @xmath64 be an increasingly ordered set of @xmath52 distinct nodes associated with node @xmath40 : @xmath65 .",
    "usually , this set will represent the set of nodes adjacent to node @xmath40 in some graph @xmath22 , therefore we will refer to @xmath64 as an _ adjacency set _ of @xmath40 .",
    "[ 2sets ] if for two adjacency sets @xmath66 and @xmath67 we have @xmath68 for all @xmath69 , we say that @xmath70 .",
    "in this case we also say that @xmath71 is  to the left \" of @xmath64 .",
    "[ reduced ] let @xmath72 be a graphical sequence , and let @xmath64 be an adjacency set of node @xmath40 .",
    "the degree sequence reduced by @xmath64 is defined as : @xmath73 \\setminus ( a(i ) \\cup \\{i\\ } ) \\\\         0 & \\quad \\mbox{if } & k = i\\ ; .",
    "\\end{array}\\right . \\label{red}\\end{aligned}\\ ] ]    in other words , if @xmath64 is the set of adjacent nodes to @xmath40 in the graph @xmath22 , then the reduced degree sequence @xmath74 is obtained after removing node @xmath40 with all its edges from @xmath22 .",
    "[ ds ] let @xmath75 be a non - increasing graphical sequence and assume @xmath76 then the sequence @xmath77 is also graphical ( not necessarily ordered ) .    since @xmath78 , there exists a node @xmath79 connected to node @xmath80 , but not connected to node @xmath38 .",
    "let us cut edge @xmath81 and remove the disconnected stub of @xmath80 .",
    "if we add one more stub to @xmath38 , and connect this new stub to the disconnected stub of @xmath79 , then we can see that the new graph is also simple with degree sequence @xmath82 .",
    "[ shs ] let @xmath83 , be a non - increasing graphical sequence , and let @xmath64 , @xmath71 be two adjacency sets for some node @xmath84 , such that @xmath70 . if the degree sequence reduced by @xmath64 ( that is @xmath74 ) is graphical , then the degree sequence reduced by @xmath71 ( that is @xmath85 ) is also graphical .",
    "let @xmath86 and @xmath87 , @xmath88 .",
    "consider the adjacency set @xmath89 ( we replaced node @xmath90 by node @xmath91 ) .",
    "if @xmath92 then there is nothing to do , we move on ( see below ) . if @xmath93 then conditions in lemma [ ds ] are fulfilled .",
    "namely , @xmath93 implies @xmath94 and we know that the sequence @xmath95 is graphical by assumption .",
    "thus , according to lemma [ ds ] , the sequence @xmath96 is also graphical , that is the one reduced by the set @xmath97 .",
    "next , we will proceed by induction .",
    "consider the adjacency set @xmath98 and assume that the degree sequence reduced by it ( from @xmath21 ) is graphical .",
    "now , consider the adjacency set @xmath99 ( replaced @xmath100 by @xmath101 ) . if @xmath102 , lemma [ ds ] can be applied again since @xmath102 implies @xmath103 , showing that the sequence reduced by @xmath104 is also graphical",
    ". the last substitution ( @xmath105 ) finishes the proof .",
    "[ lset ] let @xmath83 be a decreasing graphical sequence and consider an arbitrary node @xmath106 , and an arbitrarily fixed integer @xmath79 with @xmath107 .",
    "let us fix a set of nodes @xmath108 and consider the set @xmath109 containing the @xmath52 lowest index nodes not in @xmath110 and different from @xmath40 .",
    "we call @xmath111 the leftmost adjacency set of @xmath40 restricted by @xmath110 . accordingly",
    ", we call the set of nodes @xmath110 the set of forbidden connections for @xmath40 .",
    "[ ly ] if @xmath83 is a decreasing graphical sequence , and @xmath112 is an adjacency set disjoint from @xmath113 , then @xmath114 .",
    "this is immediate , since by definition [ lset ] , @xmath115 , for all @xmath116 .",
    "+ we are now ready for the main theorem :    [ cg ] let @xmath117 be a sequence of integers . for",
    "an arbitrary node @xmath106 define a set @xmath108 with @xmath118 , and consider @xmath111 , the leftmost adjacency set of @xmath40 restricted by @xmath110 .",
    "then the degree sequence @xmath119 can be realized by a simple graph @xmath17 in which @xmath120 , for all @xmath121 , if and only if the degree sequence reduced by @xmath111 is graphical .",
    "`` @xmath122 '' is straightforward : add node @xmath40 to the reduced set of nodes , then connect it with edges to the nodes of @xmath111 .",
    "thus we obtained a graphical realization of @xmath21 in which there are no connections between @xmath40 and any node in @xmath123 .",
    "+ `` @xmath124 '' in this case @xmath21 is graphical with no links between @xmath40 and @xmath110 , and we have to show that the sequence obtained from @xmath21 by reduction via @xmath111 is also graphical .",
    "however , @xmath21 graphical means that there is an adjacency set @xmath64 ( with @xmath125 ) containing all the nodes that @xmath40 is connected to in @xmath22 .",
    "thus , according to lemma [ ly ] , we must have @xmath126 . then , by lemma [ shs ] , the sequence reduced by @xmath111 is graphical .",
    "note , that , the forbidden set of connections form a star graph @xmath127 centered on node @xmath40 .",
    "also note that considering the empty set as the set of forbidden nodes , @xmath128 , we obtain the havel - hakimi theorem [ tm : hh ] as corollary .",
    "informally , theorem [ cg ] can be announced as follows :    _ let @xmath129 @xmath130 , be a decreasing graphical sequence and let @xmath40 be a fixed , but arbitrary vertex .",
    "assume we are given a set of forbidden connections in @xmath131 incident on @xmath40 .",
    "then there exists a realization of the degree sequence avoiding all forbidden connections if and only if there also exists a realization where @xmath40 is connected with vertices of highest degree among the non - forbidden ones .",
    "_    since the forbidden connections emanating from a node @xmath40 form a star graph @xmath3 , @xmath132 , theorem [ cg ] provides sufficient and necessary conditions for the existence of an @xmath0-factor for @xmath133 .",
    "more importantly , it gives a _ greedy algorithm _ for finding such an @xmath0-factor .",
    "as we show next , theorem [ cg ] provides us with a procedure that allows for the construction of _ all _ graphs realizing the same degree sequence .",
    "consider a graphical degree sequence @xmath21 on @xmath27 nodes .",
    "certainly , we can produce all graphs realizing this sequence by connecting all the stubs of a chosen node first , before moving on to another node with stubs to connect ( that is we finish with a node , before moving on ) . in this vein , now choose a node @xmath40 and connect one of its stubs to some other node @xmath134 .",
    "is the remaining degree sequence @xmath135 still graphical such that nodes @xmath40 and @xmath134 avoid another connection in subsequent connections of the other stubs ? certainly , as a necessary condition , @xmath136 has to be graphical as a sequence , since all subgraphs of a simple graph are simple , and thus if @xmath22 is a simple graph realizing @xmath21 with @xmath137 , then after removing this edge , the remaining graph is still simple .",
    "however , it is not sufficient that after making some connections from a node , the residual sequence to be graphical .",
    "one might still be forced to make multiple edges , as illustrated by the following example .",
    "consider the graphical sequence @xmath138 ( the path @xmath139 ,  ) as the degrees of the set of nodes @xmath140 ( @xmath141 , @xmath142 ) .",
    "connect nodes @xmath143 and @xmath61 .",
    "we certainly have not broken the graphical character yet , since we could still finish the path by connecting next @xmath143 to @xmath144 ( or to @xmath145 ) and @xmath61 to @xmath145 ( or to @xmath144 ) .",
    "the remaining sequence @xmath146 as a _ sequence of integers _ is graphical ( two edges ) .",
    "next , connect node @xmath144 to node @xmath145 .",
    "the remaining ( residual ) sequence is @xmath147 ( emanating from node @xmath143 and @xmath61 , respectively ) , _ graphical on its own _ , however , we can no longer connect nodes @xmath143 and @xmath61 , because the very first connection is already there .",
    "thus , after making one , or more connections from a node @xmath40 , how can we check that the next connection from @xmath40 will not break the graphical character ?",
    "theorem [ cg ] answers this question if we think of the connections already made from node @xmath40 as forbidden connections .",
    "that is , after the first connection of @xmath40 to @xmath134 take @xmath136 as @xmath21 in theorem [ cg ] and @xmath148 .",
    "then , to test whether the sequence reduced by the corresponding @xmath111 is graphical we can employ for example the erds - gallai theorem [ tm : eg ] , checking all the inequalities , or the havel - hakimi theorem [ tm : hh ] .",
    "if the test fails on the reduced sequence , one must disconnect @xmath40 from @xmath134 and reconnect it somewhere else .",
    "the graphical character of the original sequence guarantees that there is always a @xmath134 where the test will not fail .",
    "if , however , the remaining degree sequence is graphical with the constraint imposed by @xmath110 , we connect another stub of @xmath40 to some other node @xmath149 ( different from @xmath134 ) , adding an element to the forbidden set of connections @xmath110 .",
    "to check whether after the second connection the remaining sequence is still graphical with the constraint imposed by the new set @xmath150 , we proceed in exactly the same way , using theorem [ cg ] , repeating the procedure until all the stubs of node @xmath40 are connected away into edges . after this",
    "we can move on to some other node @xmath40 ( arbitrary ) from the remaining set of nodes and repeat the procedure .",
    "note that this procedure is not a real procedure in the sense that it does not prescribe which stubs to connect .",
    "it only tells us whether the connection we just made ( by whatever process ) has broken the graphical character . since every element from @xmath28",
    "can be realized by some sequence of connections , it is clear that if we specify a systematic way of going through all the possible connections while employing theorem [ cg ] , we will realize all elements of @xmath28 .",
    "however , taking all possible connections would be very inefficient .",
    "next we present a version of a more economical algorithm that constructs every labelled graph with degree sequence @xmath21 , and only once . for simplicity of the notation we will call the test for the graphical character via theorem [ cg ] , the `` cg test '' ( constrained graphicality test ) .",
    "the algorithm also exploits lemma [ shs ] , which guarantees preservation of graphicality for all adjacency sets _ to the left _ of a graphical one , thus avoiding costlier checks with eg or hh theorems for those adjacency sets .",
    "clearly , a labeled graph can be characterized by the sequence of its adjacency sets @xmath151 .",
    "this algorithm creates all the possible adjacency sets for node 1 , then _ for each one of those _ repeats the same procedure on the reduced sequence by that adjacency set ( in sense of definition [ reduced ] ) of _ at most @xmath152 nodes_.    [ uno ] given a graphical sequence @xmath153 @xmath154 ,    * create the rightmost adjacency set @xmath155 for node 1 : connect node @xmath156 to @xmath27 ( this never breaks graphicality ) .",
    "let @xmath157 .",
    "* * connect another stub of @xmath156 to @xmath38 .",
    "run the cg test . *",
    "* if it fails , make @xmath158 .",
    "repeat i.1 * * if passes , keep ( save ) the connection , make @xmath158 , and if @xmath40 has stubs left , repeat from i.1 .",
    "* create the set @xmath159 of all adjacency sets of node @xmath156 that are colexicographically smaller than @xmath155 and preserve graphicality : @xmath160 * for every @xmath161 create all graphs from the corresponding @xmath162 using this algorithm , where @xmath163 is the sequence reduced by @xmath164 .",
    "for simplicity of the notation , we will drop the @xmath165 from @xmath164 , tacitly assuming that it refers to the leftmost node 1 .",
    "observe that the ordering relation `` @xmath166 '' in definition [ 2sets ] is a partial order , while the colexicographic order `` @xmath167 '' is a total order over all adjacency sets , however , `` @xmath166 '' implies `` @xmath167 '' .",
    "it is not hard to see , that @xmath168 is colexicographically the largest ( `` rightmost '' ) sequence which still preserves graphicality . when constructing @xmath159 , checking graphicality with the eg or hh theorems is only needed for those adjacency sets , which are incomparable by the `` @xmath166 '' relationship to any of the current elements of @xmath159 , while for the rest graphicality is guaranteed by lemma [ shs ] .",
    "algorithm [ uno ] proceeds by attempting to connect all stubs of the largest degree node as much to the right as possible . depending on the degree sequence",
    ", it might happen that the cg test fails many times at step i. , until it finds @xmath168 .",
    "however , in that case , @xmath168 is located more towards the higher degree nodes ( towards left ) and thus the number of adjacency sets that preserve graphicality , namely @xmath169 is smaller and accordingly , the algorithm has fewer cases to run through in subsequent steps .",
    "the more heterogeneous is a degree sequence , the more likely this will happen .",
    "of course , it only makes sense to produce all graphs from @xmath28 for small graphs ( chemistry ) , or graphical sequences that do not admit too many solutions . an interesting question",
    "would then be finding the conditions on the sequence @xmath21 that would guarantee _ a given _ upper bound @xmath170 on the size of @xmath28 , @xmath171 . a possible starting point in this direction could be koren s @xcite characterization of sequences uniquely realizable by a simple graph .",
    "sequences that admit only a small number of realizations ( by labeled simple graphs ) would likely be  close \" in some sense to these special sequences .",
    "algorithm [ uno ] also provides a way to computationally enumerate all the labelled graphs @xmath172 realizing a degree sequence @xmath21 ( problem b ) of section [ intro ] ) .",
    "naturally , the following recursion holds : @xmath173 our graph construction process can be thought of as happening along the branches of a tree @xmath174 of depth at most @xmath152 : the internal nodes of this tree on the @xmath38th level are all the allowed adjacency sets ( from the corresponding @xmath175 set ) of the node with the largest residual degree ( the leftmost node ) .",
    "the reason this tree is of depth at most @xmath152 is because some other nodes ( other than the one with the largest residual degree ) in the process might loose all their stubs .",
    "a directed path towards a leaf of this tree corresponds to a graphical realization of @xmath21 , because we end up specifying all the adjacency sets along this path .",
    "based on this , during the realization of the graph , if we choose uniformly at random at every level of the tree within the children of a node , from the corresponding set @xmath175 , the probability of a final realization @xmath22 in this process will be given by the product : @xmath176 where @xmath177 is the randomly chosen adjacency set of the node with the largest residual degree , on the @xmath38-th level of @xmath174 . by convention @xmath178 , and @xmath179 .",
    "it is not hard to convince ourselves that the distribution in ( [ w ] ) is not uniform , and thus , this algorithm can not be used in this form to produce uniform samples from @xmath28 .",
    "however , theorem [ cg ] can be used to improve on a well - known , direct uniform sampling process , the molloy - reed ( m - r ) algorithm @xcite . in this process",
    ", one chooses among all the stubs uniformly at random , irrespectively to what node they belong to .",
    "this is repeated until either a self - loop , or a double edge is created , or a simple graph is finished . when there is a self - loop or double edge , the process is stopped , and the algorithm starts from the very beginning .",
    "the cg test can be used along the way to test for graphicality after every connection just made . in particular , assume that we just connected node @xmath40 with node @xmath80 .",
    "we then run the cg test centered on node @xmath40 ( adding the @xmath180 connection to the forbidden set from @xmath40 ) . if passes , we run the cg test on node @xmath80 as well .",
    "if it fails either on @xmath40 or @xmath80 , we can stop the process , before actually running into a conflict later . running into conflict usually happens towards the end , and this test can save us from possibly many unnecessary calls to the random number generator , speeding up the sampling algorithm .",
    "it is important to note , that if the cg test passes on both @xmath40 and @xmath80 , we actually do not know whether graphicality is broken or still preserved at that stage ! if the cg test fails , however , we know that graphicality was broken . the reason is because theorem [ cg ] gives us the sufficient and necessary conditions for the sequence to be graphical such that no multiple edges will be made with the already existing connections _ emanating from the same node_. it gives no such information for connections already made elsewhere ! of course , for degree sequences @xmath21 for which there is only a small number of labelled graphs realizing it ( compared to the total number @xmath181 of graphs that it produces ) , the m - r algorithm would search for needles in a haystack , and other ( mcmc ) methods will be necessary .    in summary ,",
    "we have given necessary and sufficient conditions for a sequence of integers @xmath182 to be graphical ( realizable by simple , undirected graphs ) avoiding multiple edges with an arbitrary star graph ( the forbidden graph ) @xmath183 , @xmath184 , centered on a node @xmath80 . in a more general context , our result gives for the first time a greedy construction for tutte s @xmath0-factor subgraphs within @xmath185 .",
    "it would be desirable if such a _ greedy _ construction existed for an arbitrary forbidden graph @xmath186 , not just for star - graphs , however , at this point this still seems to be a rather difficult problem .",
    "such an algorithm ( if greedy ) would further speed up the m - r sampling , because it would induce early rejections , as soon as they are made .",
    "our main theorem also led to a direct and systematic construction algorithm that builds _ all graphs _ realizing a given degree sequence @xmath21 . and finally , we mention that these studies can be extended to simple directed graphs as well ( there are two degree sequences in this case ) , however , the computations are considerably more involved , and they will be presented separately .      this project was supported in part by the nsf bcs-0826958 ( hk and zt ) , hdtra 201473 - 35045 ( zt ) and by hungarian bioinformatics mtkd - ct-2006 - 042794 , marie curie host fellowships for transfer of knowledge ( las and zt ) .",
    "elp was partly supported by otka ( hungarian nsf ) , under contract nos .",
    "nk62321 , at048826 and k 68262 , and las by nsf dms-0701111 .",
    "i m was supported by a bolyai postdoctoral stipend and otka grant f61730 ."
  ],
  "abstract_text": [
    "<S> degree - based graph construction is an ubiquitous problem in network modeling @xcite , ranging from social sciences to chemical compounds and biochemical reaction networks in the cell . </S>",
    "<S> this problem includes existence , enumeration , exhaustive construction and sampling questions with aspects that are still open today . here </S>",
    "<S> we give necessary and sufficient conditions for a sequence of nonnegative integers to be realized as a simple graph s degree sequence , such that a given ( but otherwise arbitrary ) set of connections from a arbitrarily given node are avoided . </S>",
    "<S> we then use this result to present a swap - free algorithm that builds _ all _ simple graphs realizing a given degree sequence . in a wider context , we show that our result provides a greedy construction method to build all the @xmath0-factor subgraphs ( tutte , @xcite ) embedded within @xmath1 , where @xmath2 is the complete graph and @xmath3 is a star graph centered on one of the nodes . </S>"
  ]
}