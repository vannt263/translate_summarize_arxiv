{
  "article_text": [
    "in section [ attacks ] we begin with a brief description of real world attacks , and describe an abstraction of the attack actions .",
    "section [ exploits ] delves in mores detail in the  attack and penetrate \" phase of an attack , in which the attacker exploits a vulnerability to gain access to a target machine .",
    "again , we show how to abstract and generalize the process of exploitation and payload execution . in section [ simulator ]",
    "we present the prototype for simulating network attacks , based on the implementation of multiplatform agents and the abstraction of vulnerabilities and exploits as communication channels .",
    "section [ performance ] deals with the tension between realism and performance in the simulation .",
    "finally we mention some applications of the simulator .      during a network intrusion , an attacker tries to gain access to software systems that require authorization ( for example , web servers , database servers or accounting systems ) .",
    "the intrusion may be illegal ( what people usually have in mind when speaking about intrusions ) , or may be an authorized audit performed by security professionals .",
    "the latter is called a network penetration test : a proactive and authorized attempt to compromise network security and access sensitive information by taking advantage of vulnerabilities .",
    "as networks evolve , and combine a multitude of interconnected technologies , the penetration test has become an accepted practice to evaluate the global security of a network ( ultimately assessing effectiveness of the deployed security countermeasures ) . the interesting point for us",
    "is that pentesters basically use the same tools and methodologies as unauthorized attackers , so we can focus on the former ( whose practices are also more documented ! )",
    "a successful attack depends on the ability to gather relevant information about the target network , including active internet protocol ( ip ) addresses , operating systems and available services .",
    "actions realized during this phase include :    *   network discovery : performed utilizing mechanisms including arp , tcp syn packets , icmp echo request , tcp connect and passive discovery . *   port scanning : an exhaustive scan of open and closed ports of all the network hosts . *   os identification : consists in recognizing the os of a remote host by analyzing its responses to a set of tests .",
    "classical nmap s fingerprinting database can be combined with a neural network to accurately match os responses to signatures , see @xcite .",
    "additional os identification capabilities are available for more specific situations . for instance",
    ", os detection utilizing the dce - rpc and smb protocols can identify windows machines more precisely .",
    "* other techniques available to human attackers are social engineering and google hacking ( using publicly available information to gain insight on the target organization ) .      during this phase , the attacker selects and launches remote exploits making use of data obtained in the information gathering step .",
    "an exploit is a piece of software that injects code in the vulnerable system s memory and modifies the execution flow to make the system run the exploit code . as we will see in section [ exploits ] ,",
    "the exploit can be thought of as a way to install an agent on a compromised host .",
    "the local information gathering step collects information about computers that the attacker has successfully compromised . during this phase ,",
    "the attacker may gather information about the os , network configuration , users and installed applications ; browse the filesystem on compromised systems ; view rights obtained and interact with compromised systems via shells .      during the privilege escalation phase ,",
    "the attacker attempts to penetrate deeper into a compromised computer by running local exploits in an attempt to obtain administrative privileges ( to gain root or superuser privileges ) .      after privilege escalation",
    ", the attacker can use the newly controlled host as a vantage point from which to run attacks deeper into the network . by sending instructions to an installed agent",
    ", the attacker can run local exploits to attack systems internally , rather than from across the network .",
    "he can view the networks to which a compromised computer is connected , and launch attacks from any compromised system to other computers on the same network , gaining access to systems with increasing levels of security .",
    "that is , the attacker executes the previous steps ( information gathering and attacking ) using the new agent as a source .",
    "the attackers needs to clean up his steps to avoid detection . towards this end",
    ", all the executed actions should minimize the noise produced , for example , by making modifications only in memory and by not writing files in the target s filesystem .",
    "after this brief review of the steps of a real world attack , we present here the model that we use as abstraction of an attack .",
    "the conceptual building blocks are assets , actions and agents",
    ".      an asset can represent anything that an attacker may need to obtain during the course of an attack .",
    "more precisely , it represents the knowledge that an attacker has of a real object or property of the network .",
    "examples of assets are : +   bannerasset ( banner , host , port ) + operatingsystemasset ( os , host ) + ipconnectivityasset ( source , target ) + tcpconnectivityasset ( source , target , port )    a bannerasset represents the banner that an attacker obtains when trying to connect to a certain port on a host .",
    "an operatingsystemasset represents the knowledge that an attacker has about the operating system of a host .",
    "an ipconnectivityasset represents the fact that an attacker is able to establish an ip connection between a source host and a target host ( given by their ip addresses ) .",
    "a tcpconnectivityasset represents the fact that an attacker is able to establish a tcp connection between a source host and a fixed port of a target host ( given by port number and ip address ) .",
    "the assets we consider are probabilistic .",
    "this allows us to represent properties which we guess are true with a certain probability or negative properties ( which we know to be false ) .",
    "for example , an action which determines the os of a host using banners ( osdetectbybannergrabber ) may give as result an operatingsystemasset os = linux with probability=0.8 and a second one with os = openbsd and probability=0.2 .",
    "another example , an applicationasset host=192.168.13.1 and application=#apache with probability=0 means that our agent has determined that this host is not running apache .",
    "these are the basic steps which form an attack .",
    "examples of actions include , but are not limited to : apache chunked encoding exploit , wuftp globbing exploit ( subclasses of exploit ) , banner graber , os detect by banner , os fingerprint , network discovery , ip connect and tcp connect .",
    "we review below the principal attributes of an action .",
    "an action has a goal and when executed successfully the action completes the asset associated with its goal .",
    "this is also called the",
    "_ action result_.    usually , an action is directed against a target , where the target is a computer or a network .",
    "but there are different types of goals like gathering information or establishing connectivity between two agents or hosts , where the notion of target is not so clear .",
    "thus the concept of goal is more general and allows us to speak about intermediate steps of an attack .",
    "it is also common to speak about the result of an action ( for example to increase access , obtain information , corrupt information , gain use of resources , denial of service ) , focusing on non authorized results .",
    "this is a particular case of our concept of goal .",
    "note that when an action completes the goal asset , we are taking into account only the expected result of the action .",
    "undesired results and other side effects fall into the category of noise .",
    "the _ requirements _ are assets that will be the goals of other attack actions , which must have been successfully executed before the considered action can be run .",
    "the requirements are the equivalent of children nodes in @xcite and subgoals in @xcite and @xcite .",
    "an abstract action must know what kind of assets it may satisfy and which goals it requires before running .",
    "these relations can be used to construct an attack graph . by analyzing of the attack graph ,",
    "the attacker can build a plan ( as a sequence of actions ) to reach the final objective . on the use of attack graphs for automated planning ,",
    "we refer the reader to @xcite .",
    "the environment conditions refer to system configuration or environment properties which may be necessary or may facilitate the execution of the action .",
    "we distinguish the environment conditions from the requirements , because the requirements express relations between actions ( which must be taken into account when planning a sequence of actions ) whereas the environment conditions refer to the  state of the world \" ( as far as the attacker is aware of it ) before the execution of the module , and do not imply previous actions .",
    "for example , an exploit of a buffer overflow that runs only on specific versions of an operating system , will have as requirement : `` obtain information about operating system version '' and as environment condition `` os = redhat linux ; version between 6.1 and 6.9 '' .",
    "these conditions are not necessary , as the action can be run anyway , but will dramatically increase its probability of success",
    ".      the execution of the action will produce _",
    "this noise can be network traffic , log lines in intrusion detection systems ( ids ) , etc . given a list as complete as possible of network sensors , we quantify the noise produced respective to each of these sensors .",
    "the knowledge of the network configuration and which sensors are likely to be active , allows us to calculate a global estimate of the noise produced by the action .    with respect to every network sensor ,",
    "the noise produced can be classified into three categories : irremovable noise , noise that can be cleaned if the action is successful ( or another subsequent action is successful ) , noise that can be cleaned even in case of failure .",
    "so we can also estimate the noise remaining after cleanup .",
    "of course , the _ stealthiness _ of an action will refer to the low level of noise produced .      the _ expected running time _ and _ probability of success _ depends on the nature of the action , but also on the environment conditions , so their values are updated every time the attacker receives new information about the environment .",
    "these values are necessary to take decisions and choose a path in the graph of possible actions . because of the uncertainties on the execution environment , we consider three values for the running time : minimum , average and maximum running time .",
    "together with the stealthiness and zero - dayness , these values constitute the cost of the action and are used to evaluate sequences of actions .",
    "the exploits are the most important actions during an attack .",
    "an exploit is a piece of code that attempts to compromise a workstation or desktop via a specific vulnerability . according to the literal meaning of exploit , it takes advantage and makes use of a hidden functionality . when used for actual network attacks ,",
    "exploits execute payloads of code that can alter , destroy or expose information assets .",
    "when examining an exploit , three main components can be distinguished ( see @xcite for more information ) .",
    "the attack vector is the mechanism the exploit uses to make a vulnerability manifest , in other words , how to reach and trigger the bug .",
    "for example , in the case of apache chunked encoding exploit , the attack vector is the tcp connectivity that must be established on port 80 to reach the application .      to obtain an unauthorized result",
    ", the exploit makes use of a vulnerability .",
    "this can be a network configuration vulnerability , or a software vulnerability : a design flaw or an implementation flaw ( buffer overflow , format string , race condition ) .",
    "the most classic example is the buffer overflow , first described in `` smashing the stack for fun and profit '' by aleph one ( 1996 ) .",
    "the questions for the attacker are : how to insert code and how to modify the execution flow to execute it ? in the example of a stack based buffer overflow , the code is inserted in a stack buffer and by overflowing the buffer , the attacker can overwrite the return address and jump to his code .      once he manages to trigger and exploit a bug , the attacker gains control of the vulnerable program .",
    "the payload is the functional component of the exploit , the code the attacker is interested in running .",
    "classical payloads allow attackers to :    * add a user account : on unix systems , it was done by adding a line to the system password file ( /etc / password ) or changing the password of root .",
    "however such changes are easily detected ( tripwire can detect them ) and to use the account the attacker needs connectivity through legitimate paths ( firewalls can block them ) .",
    "this classical payload is no longer used . *",
    "changes to system configuration : for example , to append a line to the internet services daemon ( inetd ) configuration file on unix systems ( /etc / inetd.conf ) in order to open a port on the compromised system , and later connect to the system via the newly opened port . *",
    "shellcode : this is the most popular and has become almost synonymous for  exploit payload \" .",
    "it comprises opening a shell ( a command interpreter ) , that the attacker can use to execute available commands .",
    "these payloads are more difficult to detect , but are also more difficult to write .",
    "see the article of aleph one @xcite for a recount on this technique . * network aware shellcode .",
    "if the shell is opened on a remote machine , the attacker has to find a way to communicate with the shell .",
    "a first solution is the _ bind shellcode _ or _ bindshell _ , which listens for incoming connections on a specified network port and protocol ( usually tcp ) .",
    "the problem is that firewalls or other filtering devices may block this connection .",
    "a second option is the _ reverse shell _ , that initiates the connection from the compromised system .",
    "the third option is the _ reuse socket shellcode _ , that reuses the connection method used to trigger and spawn the shell , thus making use of a communication channel that the attacker knows to work .",
    "writing payloads is a very difficult task , that requires solving multiple constraints simultaneously .",
    "the payload is a sequence of byte codes , so each payload will only work in a specific operating system and platform .",
    "depending on the attack vector , the payload may be sent to the vulnerable machine as an ascii ( american standard code for information interchange ) string ( or some protocol field ) , and thus must respect a particular grammar ( for example : byte 0 is forbidden , only 7-bit ascii is accepted , only alphanumeric characters are accepted , etc . )",
    "libraries have been developed to help exploit writers to generate shellcodes . the open source libraries",
    " mosdef \" and  inlineegg \" are two well known cases , with tools to cope with the restrictions . the payload is also typically limited in size ( for example the buffer size in the case of a buffer overflow ) , so the code that the attacker will run must fit in a few hundred bytes .",
    "if he wants to execute more complex applications , he must find another way .",
    "we present here the solution called `` syscall proxy '' ( developed by max caceres and others , see @xcite for more details ) .",
    "the idea is to build a sort of `` universal payload '' that allows an attacker to execute any system call on the vulnerable host . by installing a small payload ( a thin syscall server )",
    ", the attacker will be able to execute on his local host complex applications ( a fat client ) , with all system calls executed remotely .",
    "a software process usually interacts with certain resources : a file in disk , the screen , a networking card , a printer , etc .",
    "processes can access these resources through _ system calls _ ( _ syscalls _ for short ) .",
    "these syscalls are operating system services , usually identified with the lowest layer of communication between a user mode process and the operating system ( os ) kernel .",
    "different operating systems implement syscall services differently , sometimes depending on the processor s architecture .",
    "examples of main groups include unix and windows .",
    "unix systems use a generic and homogeneous mechanism for calling system services , usually in the form of a  software interrupt \" .",
    "syscalls are classified by number and arguments are passed either through the stack , registers or a mix of both .",
    "the number of system services is usually kept to a minimum ( about 270 syscalls can be seen in openbsd 2.9 ) , as more complex functionality is provided on higher user - level functions in the libc library . usually there s a direct mapping between syscalls and the related libc functions .    in windows",
    "the equivalent functionality is part of large user mode dynamic libraries .",
    "we ll refer to  windows syscalls \" to any function in any dynamic library available to a user mode process . for the sake of simplicity ,",
    "this definition includes higher level functions than those defined in ntdll.dll , and sometimes very far above the user / kernel limit .",
    "the resources that a process has access to , and the kind of access it has on them , defines the  context \" on which it is executed .",
    "for example , a process that reads data from a file might do so using the open , read and close syscalls .",
    "syscall proxying inserts two additional layers between the process and the underlying operating system .",
    "these layers are the _ syscall client _ layer and the _ syscall server _ layer .",
    "the syscall client layer acts as a link between the running process and the underlying system services .",
    "this layer is responsible for forwarding each syscall argument and generating a proper request that the syscall server can understand .",
    "it is also responsible for sending this request to the syscall server , usually through the internet , and returning back the results to the calling process .",
    "the syscall server layer receives requests from the syscall client to execute specific syscalls using the underlying operating system services .",
    "this layer marshals back the syscall arguments from the request in a way that the underlying os ( operating system ) can understand and calls the specific service .",
    "after the syscall finishes , its results are marshaled and sent back to the client , again through the internet .",
    "there are multiple connection methods between agents .",
    "the originating agent can use : connect to target ( similar to bindshell ) , connect from target ( similar to reverse shell ) , reuse connection and hypertext transfer protocol ( http ) tunneling .",
    "agents can also be chained together to reach network resources with limited connectivity .          in our attack model ,",
    "the abstraction of arbitrary syscall servers is the concept of agents .",
    "the agents are responsible for executing the attack actions .",
    "thus an attack typically begins with a local agent ( representing the attacker , which can interact with the local agent through a graphical console ) , and follows with the main steps of an attack ( as described in [ main_steps ] ) , where the successful exploitation of a vulnerability means installing an agent .",
    "the attacker is modeled as a set of connected agents , and exploits are modeled as probabilistic actions that depend on the details of target os and applications .",
    "a software agent can take several forms , examples of which include : scripts , toolkits or other kinds of programs .",
    "the _ autonomous agents _ who are able to take decisions and continue the attack without human intervention , are of particular interest .",
    "such autonomous agents require planning abilities , see @xcite      we contemplate different types of organizations between the agents .",
    "one scenario is given by a `` root agent '' who plans the attack and then gives the other agents orders ( of executing actions ) , eventually creating new agents if necessary , and asks the agents for feedback about action results in order to decide further steps .",
    "another scenario is when the root agent delegates responsibilities to the other agents , giving them higher level _",
    "missions_. to fulfill the mission , the agent will have to do his own planning and communicate with other agents .",
    "this scenario is likely to arise when stealthiness is a priority : communications are very expensive and it becomes necessary to rely on the agents to execute their missions without giving feedback ( or the smallest amount of feedback , or delayed feedback because of intermittent communication channels ) .",
    "the _ environment knowledge _ ( or simply _ environment _ ) is a collection of information about the computer network being attacked .",
    "naturally , this information is represented by assets . in the beginning",
    ", the environment contains only the local agent which will initiate the attack .",
    "the environment plays an important role during the planning phase and during the execution phase of an attack , since it continuously feedbacks the behavior of the agent .",
    "the execution of an _ attack action _ ( as defined in section [ actions ] ) makes use of the knowledge that the executing agent has of the environment .",
    "when the action is called , it begins by looking for an asset that completes its goal in the environment .",
    "if this is the case , the information of the existing asset is used to fulfill the goal , and the action returns a success signal , resulting in zero cost ( in terms of time , noise , success probability and stealthiness ) .",
    "note that two interesting graphs can be extracted from the environment knowledge : the network topology graph and the agent distribution graph , whose nodes are the agents involved in the attack and whose edges are the communication channels between agents .",
    "we now present our implementation of a network simulator specifically designed to simulate network attacks .",
    "our objective is to simulate very large networks , for example 2.000 machines simulated on a single desktop pc .",
    "it is of course not feasible to simulate all the network traffic , or to use a vmware server running simultaneously 2.000 images .",
    "the idea of our implementation is to focus on the point of view of the attacker . using our model of the attacker ,",
    "we can build a simulator which is realistic from his point of view .",
    "in particular , the simulator only generates information as requested by the attacker . by performing this lazy evaluation ,",
    "the main performance bottleneck comes from the ability of the attacker to request information from the network .",
    "the simulated scenarios are composed of machines , networking devices and vulnerabilities . supported machine components include , but are not limited to : windows workstations and servers , many unix systems , routers , proxies , firewalls and intrusion detection systems ( ids ) .",
    "each machine can be independently configured , and installed to run different software services , such as , but not limited to : web server , file transfer protocol ( ftp ) server , telnet and secure shell .",
    "new applications can be developed for the simulator platform using the usual development tools .",
    "network components are used to interconnect machines , and can simulate hubs , switches , vlans and dialup connections and their security characteristics .",
    "vulnerability descriptions are entered in the vulnerabilities database , to allow the simulation of the vulnerable application behavior .",
    "( there is no need to modify the actual application s code to reflect a vulnerability , nor to write any exploit code ) .",
    "aspects and types of vulnerabilities simulated include , but are not limited to : local / remote , denial of service / exploit / leakage , probabilistic / dependent on hidden parameters and noise level .      according to our attack model",
    ", an attacker can be effectively modeled by a set of agents .",
    "thus by simulating the behavior of the agents , we can simulate the behavior of the network ( this is transparent for the attacker ) .",
    "the whole environment is accessed by the attacker through the local agent , and interactions take place in the form of proxied system calls .",
    "the base of the simulator are agents that respond to proxycalls .",
    "the agents implement a syscall server for a specific operating system and platform , but all of them have the same interface : this is what we call  multiplatform syscall \" .",
    "so , if an attacker ( client ) can install a multiplatform syscall agent in a victim host , he does not care about the syscalls supported by the target host , the attacker merely needs to know the universal syscall interface exported by the agent .        in the simulator security model ,",
    "a _ vulnerability _ is a mechanism used to ( potentially ) access an otherwise restricted communication channel .",
    "an _ exploit _ is a  magic \" string that opens access to some vulnerable agent s channel .",
    "it can be simulated as a message with a symbolic identifier , sent to an application .",
    "depending on the environment conditions , the exploit database will determine the resulting behavior of the application .",
    "given a target machine @xmath0 , the simulator iterates the list - like structure of _ results _ in order . each result entry has conditions associated to it , so the simulator iterates the tree - like structure of _ requirements _ section and , if a match is found , the action ( install an agent , crash or reset ) is executed with probabilistic behavior .",
    "the execution of actions stops when an action is evaluated to true .      in the _ requirements _ section",
    ", you can use several kind of tags .",
    "the tags specify the conditions that have influence on the execution of the exploit ( that is on the result probabilities ) .",
    "example :    .... < requirement type=\"system \" id=\"req0 \" >    < os arch=\"i386 \" name=\"windows \" / >     <",
    "win > nt4</win >     < edition > server enterprise_server</edition >     < servicepack>6 6a</servicepack >   <",
    "/requirement > ....",
    "this states that one of the possibilities is that the target machine runs windows version nt4 , the edition should be  server \" or  enterprise_server \" and the service pack should be 6 or 6a .",
    "the requirements have a unique i d to identify them , in this case  req0 \" .",
    "another requirement concerns the target application :    .... < requirement type=\"application \" id=\"req1 \" >    < status > target</status >     < name > internet information services</name >     < version major=\"4 5 \" / >   < /requirement > ....    this states that the machine should be running internet information services ( iis ) , version major 4 or 5 , and this application is the target of the exploit .",
    "the possible status are : + 1 . _",
    "target _ : the application is the target of the exploit ( the most common case ) .",
    "_ running _ : the application should be running but is not necessarily the target of the attack .",
    "installed _ : the application should be installed but not necessarily running .",
    "not running _ : for example , a remote exploit will have more success probability if the target machine is in a network with no firewalls running .",
    "requirements can be combined , for example :    .... < requirement type=\"compose \" id=\"req2 \" >    < operator > logic_and</operator >     < operands > req0 req1</operands >   < /requirement > ....    the result of the ",
    "logic_and \" operation is a requirement stating that the target machine should be running windows nt4 server edition or enterprise_server edition , and running iis ( internet information services ) .",
    "there is also a  logic_or \" .",
    "the result is a list of the relevant probabilities , for example :    .... < result for=\"req1 \" >    < crash chance=\"0.00 \" what=\"os \" / >     < reset chance=\"0.00 \" what=\"os \" / >     < crash chance=\"0.10 \" what=\"application \" / >     < reset chance=\"0.00 \" what=\"application \" / >     <",
    "agent chance=\"0.75 \" / >   < /result > ....    in order , these are : the chance of crashing the machine , of resetting the machine ( reboot ) , of crashing the target application ( iis ) , of resetting the target application , and of successfully installing an agent .    to determine the result , we follow this procedure : processing the lines in order ; and for each positive probability , choose a random value between 0 and 1 .",
    "if the value is smaller than the chance attribute , the corresponding action is the result of the exploit .    in this example , we draw a random number to see if the application crashes . if the value is smaller that 0.10 , the application internet information services ( iis ) is crashed and the execution of the exploit is finished . otherwise , we draw a second number to see if an agent is installed .",
    "if the value is smaller than 0.75 , the agent is installed , otherwise there is no visible result .",
    "other possible results ( to be implemented ) are : + 1 . raise an intrusion detection system ( ids ) alarm .",
    "write some log in a network actor ( like a firewall , ids , router , etc ) .",
    "capture a session i d , cookie , credential or password .",
    "from a systemic view - point , we speak of simulation when the level of detail of interaction between components inside the system is mimicked , and emulation when only the interaction of the system with the environment is mimicked .",
    "these definitions depend on the level of abstraction , on a level of abstraction we can describe the behavior of the system as a black - box or we can describe the behavior of the components individually .    following this line of thought , the system implemented simulates networks in the socket abstraction level , and inside the network the behavior of machines is emulated from the communication angle .",
    "the emulation of computers is basic but complete , in the sense that a remote virtual user connecting to one of them can execute different processes and handle data files .",
    "there is a tension between realism and performance in the simulation . in this case , good performance is achieved by only simulating the syscalls / socket abstraction level .",
    "most actions work at the syscall level and attack upper levels of abstraction , whereas the network packet switching is not simulated .",
    "the network simulator was designed to be able to simulate networks of thousands of computers .",
    "each simulated machine has at least one thread .",
    "the goal was to have a simulator on a single desktop computer with a simulated traffic realistic from a penetration test point of view .",
    "it was not designed to simulate distributed denial of service ( ddos ) attacks as floods or worms but there is a possibility in that direction also , maybe in dedicated servers running the simulation .",
    "a hierarchy for file descriptors was developed , including a variety of sockets optimized for the simulation in one computer , called  socketdirect \" .",
    "socket direct is fast : as soon as a connection is established , the client keeps a filedescriptor pointing directly to the server s descriptor .",
    "routing is only executed during the connection .",
    "process control blocks ( pcb ) are created as expected , but are only used during connection establishment .",
    "there is support for transmission control protocol ( tcp ) and user datagram protocol ( udp ) sockets , and a central set of systems calls , including filesystem syscalls , to emulate memory in each machine of the network .",
    "data enters to the simulation through the socket subclass  socketreal \" , which wraps a real bsd ( berkeley software distribution ) socket of the underlying operating system .      the responsibility of the scheduler is to assign the central processing unit ( cpu ) resources to the different machines in the simulation and inside each machine to the different processes .",
    "the scheduling is non preemptive and round - robin .",
    "the scheduling iterates over the hierarchy machine / process / thread as a tree ( like a depth - first search ) .",
    "each machine has the possibility to run in round - robin , where running means that the machine runs its processes in round - robin . the same way running a process is giving all its threads the order to run until a syscall is needed , if possible . obviously depending on the state of each thread , they run , change state or finish execution .",
    "the central issue is that threads execute systems calls and then if possible continue their activity until they finish or another system call is required .",
    "simulated threads are real threads of the os ( operating system ) , simulated machines and processes are all running within the unique process of the simulator .",
    "thanks to this architecture , there is no loss of performance due to context switching ( descriptors and pointers remain valid when switching from one machine to the other ) .",
    "something to remark is that the simulator does nt have to use all the cpu when idle , so the scheduler was devised to sleep ( e.g. , 20ms ) the simulator after executing a constant number ( e.g. , 512 ) of machine runs ( runs to sleep ) .",
    "this leaves space for other programs interacting with the simulator to continue their normal activity in the desktop machine while the simulator is idle .",
    "another improvement was to change the runs to sleep dynamically in a exponential increment and linear back - off fashion , depending on a threshold of syscalls lost per sleep .",
    "this results in better overall response when there is simulated activity and less use of the cpu when there is no simulation activity .",
    "figures [ fig : syscalls1 ] and [ fig : syscalls2 ] show measurements that were done on a pentium d 2.66ghz machine with 1.5 gb of ram , running windows xp sp2 .",
    "the simulated scenario includes 100 networks of 10 machines each , so there are 1.000 machines running in the simulation . when responding to a tcp port scan or an os detection by banner grabber , the simulator answers between 700 and 900 syscalls per second .",
    "total running time of the modules ( on a single network ) lies between 100 and 120 seconds .          in order to handle thousand of files , avoiding wasting of huge disk space , the filesystem simulation",
    "is accomplished mounting template filesystems .",
    "template filesystem _ is a common file repository shared by a group of virtual machines .",
    "for example , all windows systems share a common windows file repository with the default installation provided by microsoft .",
    "these templates have read permission only , so when a machine needs to read or change a file , the file is copied to a local filesystem in that machine , this technique is well know as  copy on write \" .",
    "the fundamental idea is that if multiple callers ask for resources that are initially indistinguishable , you can give them pointers to the same resource .",
    "this function can be maintained until a caller tries to modify its copy of the resource , at which point a true private copy is created to prevent the changes from becoming visible to everyone else .",
    "all of this happens transparently to the callers .",
    "the primary advantage is that if a caller never makes any modification , no private copy needs to be created .    in order to improve the performance ,",
    "a file cache was implemented : the simulator saves the most recent accessed files ( or block of files ) in memory . in high scale simulated scenarios ,",
    "it is very common to have several machines doing the same task at ( almost ) the same time .",
    "for example , when the system starts up , all unix machines read the boot script from /etc / initd file ; if these kinds of files are in the system cache , the booting process is faster , because only few disk accesses are needed , even in scenarios of hundreds or thousands of simulated machines .",
    "we presented a network simulator focused on the attacker s point of view .",
    "the simulation is based on a model of network attacks , whose building blocks are assets , actions and agents . by making use of the proxy syscalls technology , and simulating multiplatform agents , we were able to implement a simulation that is both realistic and light - weight , allowing the simulation of networks with thousands of hosts .",
    "some applications of the simulator are :    * cyber attack modeling and analysis tool .",
    "the different security components can be configured to report attack evidence in the same way as the real world components , allowing , for example , post - attack forensics analysis and real - time detection exercises .",
    "* pentest training tool .",
    "a step by step tutorial for pentesters is hard to write because the user might not have a proper target network setting , or because the characteristics of the user s target network are unknown .",
    "the simulator can be used to deploy several complex scenarios in the user s computer , so that the user can follow the training on a shared scenario .",
    "* evaluation of countermeasures .",
    "consider a system administrator that has a set of measures which make certain attack actions less effective ( in our framework , a measure may reduce the probability of success of an attack action , or increase the noise it produces , for example by adding a new ids ) .",
    "he can then use the simulation to see if his system becomes safe after all the measures are deployed , or to find a minimal set of measures that make his system safe .",
    "javier burroni and carlos sarraute ,  outrepasser les limites des techniques classiques de prise dempreintes grace aux rseaux de neurones \" , symposium sur la scurit des technologies de linformation et des communications ( sstic ) , rennes , france , may 31-june 2 , 2006 ."
  ],
  "abstract_text": [
    "<S> in this work we present a prototype for simulating computer network attacks . our objective is to simulate large networks ( thousands of hosts , with applications and vulnerabilities ) while remaining realistic from the attacker s point of view . </S>",
    "<S> the foundation for the simulator is a model of computer intrusions , based on the analysis of real world attacks . </S>",
    "<S> in particular we show how to interpret vulnerabilities and exploits as communication channels . </S>",
    "<S> this conceptual model gives a tool to describe the theater of operations , targets , actions and assets involved in multistep network attacks . </S>",
    "<S> we conclude with applications of the attack simulator . </S>"
  ]
}