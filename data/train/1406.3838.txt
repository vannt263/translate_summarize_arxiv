{
  "article_text": [
    "given a point set @xmath0 in @xmath1 , the _ unit disk cover problem _",
    "( udc ) seeks to find the smallest set of unit disks that cover all of @xmath0 .",
    "this problem arises in applications to facility location , motion planning , and image processing @xcite .    in both the @xmath7 and @xmath8 norm ,",
    "udc is np - hard @xcite .",
    "a _ shifting strategy _ admits various polynomial time approximation algorithms in @xmath9 dimensions  for some arbitrarily large integer shifting parameter @xmath10 , it is possible to approximate to within @xmath11 @xcite . since these algorithms rely on optimally solving the problem in an @xmath12 square through exhaustive enumeration , they tend to have a slow time complexity that scales exponentially with @xmath10 , making them impractical for large data sets . at the cost of incurring a constant approximation factor , the speed of the algorithm may be improved by constraining the disk centers to a unit square grid within the @xmath12 square @xcite .",
    "if the disk centers are constrained to an arbitrary finite set of points , udc becomes the discrete unit disk covering problem ( dudc ) , which is also np - hard .",
    "however , dudc has a number of different approximation algorithms , with the current state - of - the - art achieving a constant factor of 15 @xcite .    in this paper",
    ", we present an algorithm that approximates udc in the plane with the euclidean and max norms by constraining the disk centers to a set of parallel lines .",
    "this algorithm is useable in practical settings and simple to implement .",
    "we show that , in the max norm , choosing a set of parallel lines distance @xmath3 apart achieves an approximation factor of 2 . in the euclidean norm ,",
    "choosing a set of parallel lines distance @xmath13 apart achieves an approximation factor of @xmath2 . in both norms ,",
    "the most costly step is simply from sorting the points .",
    "consequently , the run time and space of the algorithm is @xmath4 and @xmath5 respectively .",
    ".a history of approximation algorithms for the unit disk cover problem in @xmath7 .",
    "@xmath14 is the number of points in @xmath0 .",
    "the shifting parameter @xmath10 is a positive integer which may be arbitrarily large .",
    "@xmath15 is the number of circles in the optimal solution .",
    "@xmath16 is a constant between 3 and 6 .",
    "@xmath17 is a factor at least quadratic in @xmath18 and polynomial in the size of the approximation lattice . [",
    "cols=\"^,^,^,^\",options=\"header \" , ]",
    "here we explore a restricted variant of udc :    given a point set @xmath0 in @xmath1 , the _ line restricted unit disk cover _ problem ( lrudc ) seeks to find the smallest set of unit disks  each with _ centers on a given set of parallel lines @xmath19 _  that cover all of @xmath0 .    for certain carefully chosen sets of lines , lrudc can be solved efficiently using greedy methods . however , with no restrictions on the placement and number of parallel lines in @xmath19 , lrudc is np - hard by reduction from udc .    using @xmath20 parallel lines",
    ", udc reduces to lrudc .",
    "consider a circle arrangement @xmath21 consisting of unit radius circles centered at each of the points in the point set @xmath0 . for any circle @xmath22 in the optimal solution of udc , let @xmath23 be the face in @xmath21 in which the center of @xmath22 resides .",
    "observe that moving this center to any point in @xmath23 does not change the subset of points in @xmath0 that @xmath22 covers .",
    "if the set @xmath19 of parallel lines intersects all faces in @xmath21 , then the optimal line - restricted solution can have disks centered in the same set of faces as in the unrestricted case .",
    "hence , any optimal solution of lrudc for this set of lines is an optimal solution of udc .",
    "since there are only @xmath20 faces in @xmath21 , having one line for each of the faces suffices .    as an aside",
    ", it is unknown whether lrudc is np - hard if only @xmath5 parallel lines are used .",
    "in our approximation algorithms for udc , we use solutions to lrudc on narrow vertical strips . the set @xmath19 of restriction lines we use for lrudc",
    "will simply be uniformly spaced vertical lines . for each restriction line",
    "we will solve lrudc confined to the subset of @xmath0 within a thin strip around the line .",
    "all points in @xmath0 will be in some strip , and we will choose the spacing between restriction lines so that a good approximation to udc is obtained .",
    "the max norm is a special case , as unit circles in the max norm are axis - aligned squares of width 2 .",
    "we can take advantage of this fact to obtain a @xmath3-approximation algorithm .",
    "1 .   partition the plane into vertical strips of width @xmath3 , and let the restriction line set @xmath19 be the set of vertical lines running down the centre of the strips .",
    "2 .   for each non - empty strip",
    ", use the simple greedy procedure of inserting a square whose top edge is located at the topmost uncovered point . repeat until all points in the strip are covered .",
    "the asymptotic cost of the algorithm is only @xmath24 , as we need to sort the points by @xmath25-coordinate to partition them into the strips , and within each strip , we need to sort the points by @xmath26-coordinate to process the points in order of decreasing height .",
    "the correctness of the greedy procedure in step 2 is easy to see , and is described in some detail by @xcite .",
    "in fact , for this set of lines , this algorithm solves lrudc optimally .",
    "this is because the greedy procedure is optimal for each strip , and the strips are all _ independent _ from one another  meaning that no point will be covered by squares from two different strips .    .",
    "top : a point set optimally coverable by one square .",
    "bottom : a covering solution for each strip .",
    "dashed lines denote restriction lines in @xmath19.,title=\"fig:\",width=264 ] + @xmath27 + .",
    "top : a point set optimally coverable by one square .",
    "bottom : a covering solution for each strip .",
    "dashed lines denote restriction lines in @xmath19.,title=\"fig:\",width=264 ]    [ square ] this algorithm is a 2-approximation for udc in @xmath8 .    for convenience , we define an _",
    "@xmath19-restricted _ solution to be any line - restricted solution covering all the points of @xmath0 using the same set @xmath19 of lines as our algorithm , but not necessarily the same set of circles as the one produced by our algorithm .",
    "let opt be an optimal solution for udc in @xmath8 .",
    "each square in the optimal solution will intersect at most two strips , since each strip has the same width as the squares .",
    "we can construct an @xmath19-restricted solution , by simply using two @xmath19-restricted squares to cover each square in opt ( see figure [ fig3 ] ) .",
    "this uses exactly twice as many squares as opt .",
    "since our algorithm solves lrudc on @xmath19 optimally , it will be at least as good as the 2-approximation on each strip .",
    "as each strip is independent , our algorithm will be as good as the @xmath19-restricted solution over all strips .",
    "first , we present a simple @xmath28-approximation algorithm that forms the basis of our @xmath2-approximation algorithm .    1 .",
    "partition the plane into vertical strips of width @xmath13 . as before , let the restriction line set @xmath19 be the set of center lines of the strips .",
    "2 .   for each non - empty strip",
    ", use the simple greedy procedure of inserting a circle positioned as low as possible while still covering the topmost uncovered point .",
    "assume that all points in the strip are uncovered initially , and repeat until all points in the strip are covered .",
    "note that the only difference between the algorithm above and the one for @xmath8 is the width of the vertical strip . with a width of @xmath13",
    ", circles centred on a particular strip can cover points of neighbouring strips .",
    "hence the strips are no longer independent , and we run the greedy procedure in step 2 assuming that all the points in the strip are uncovered initially ( even though they may be covered by circles from different strips ) . alternatively , we could remove points already covered by neighbouring strips as we go , but this makes no difference to the approximation factor or the asymptotic run time of the algorithm .",
    "as before , parititioning the points into each strip is @xmath4 time . within each strip , the subprocedure of greedily covering the circles can be done in @xmath29 time , where @xmath30 is the number of points in the strip .",
    "this is achieved by transforming the point covering problem into a segment covering problem instead .",
    "the reduction is as follows : from each point @xmath31 in the strip draw a unit circle @xmath32 centred at @xmath31 .",
    "the circle @xmath32 intersects the restriction line of the strip in two points , creating a segment @xmath33 between the two points .",
    "if the centre of an @xmath19-restricted circle is placed anywhere on @xmath33 , it will cover @xmath31 .",
    "hence to cover all the points in the strip , we simply have to stab all the segments @xmath34 with points representing centres of @xmath19-restricted circles .",
    "the strategy of greedily covering the topmost point reduces to choosing the stabbing point as low as possible , while still stabbing the topmost unstabbed segment .",
    "this can be done in @xmath29 time via sorting the segments by @xmath26-coordinate .",
    "the correctness of the greedy subprocedure in step 2 follows from the same logic as section [ sec : max - norm - p3 ] .",
    "the argument that our algorithm is a 5-approximation is based on the following fact : for each circle @xmath22 in an optimal solution opt of udc , there exists an @xmath19-restricted solution which covers each @xmath22 entirely using at most five circles .",
    "furthermore , this solution is redundant in that the points of each strip are covered completely by @xmath19-restricted circles on that strip .",
    "we call such a solution _ oblivious _ , as it does not take into account points covered by circles of neighbouring strips . note that our algorithm produces a solution that is at least as good as any oblivious @xmath19-restricted solution , as each strip is solved optimally by our algorithm .",
    "it follows that our algorithm is also a 5-approximation .",
    "it is necessary in the worst case to cover @xmath22 entirely since an adversary may provide an input point set @xmath0 consisting of arbitrarily many points coverable by a single circle ( figures [ fig1 ] and [ fig2 ] ) .",
    "the following proofs use a straightforward application of geometry to establish bounds on the number of @xmath19-restricted circles to cover @xmath22 .",
    "there are two possible cases  either @xmath22 intersects two strips , or @xmath22 intersects three strips .",
    "[ 4c ] let opt be the set of optimal circles for udc .",
    "suppose that the centre of a circle @xmath35 does not lie within @xmath36 of a restriction line .",
    "then , any oblivious @xmath19-restricted solution will require at least four circles to cover @xmath22 .",
    "moreover , there exists an oblivious @xmath19-restricted solution which uses exactly four circles to cover @xmath22 .    without loss of generality ,",
    "let @xmath22 be centered at @xmath37 where @xmath38 .",
    "for @xmath39 in this range , @xmath22 intersects two strips . let the corresponding restriction lines be called @xmath40 and @xmath41 and be placed at @xmath42 and @xmath43 respectively . consider the strip boundary , a vertical line @xmath44 at @xmath45 .",
    "the intersection of @xmath22 with this line forms a segment of length greater than 1 but smaller than 2 . to cover @xmath22",
    "entirely , this segment must be covered . for both strips",
    "that @xmath22 intersects , the algorithm would cover this segment , as each strip is oblivious that the neighbouring strip may have covered the same segment .",
    "since each line - restricted circle can only cover a segment of length 1 on @xmath44 , each strip would need two circles , resulting in a total of 4 .",
    "it is easy to see that @xmath22 is covered by the four circles centred at @xmath46 , @xmath47 , @xmath48 , @xmath49 ( see figure [ fig1 ] ) .",
    "note that the obliviousness constraint is satisfied as the circles within each strip do not depend on circles from neighbouring strips to cover the points from @xmath22 .",
    "@xmath40 @xmath44 @xmath41 + @xmath27 + .",
    "top : a set of points optimally coverable by one circle .",
    "bottom : a covering solution for each strip .",
    "dashed lines denote restriction lines in @xmath19.,title=\"fig:\",width=283 ] + @xmath27 + .",
    "top : a set of points optimally coverable by one circle .",
    "bottom : a covering solution for each strip .",
    "dashed lines denote restriction lines in @xmath19.,title=\"fig:\",width=283 ]    [ 5c ] let opt be the set of optimal circles for udc .",
    "suppose that the centre of a circle @xmath35 lies within @xmath36 of a restriction line .",
    "then , any oblivious @xmath19-restricted solution will require at least five circles to cover @xmath22 .",
    "moreover , there exists an oblivious @xmath19-restricted solution which uses exactly five circles to cover @xmath22 .    without loss of generality ,",
    "let @xmath22 be centered at @xmath37 where @xmath50 .",
    "for @xmath39 in this range , @xmath22 intersects three strips .",
    "let the corresponding restriction lines be called @xmath40 , @xmath41 and @xmath51 and be placed at @xmath52 , @xmath42 and @xmath43 respectively . consider the two strip boundaries , vertical lines @xmath44 at @xmath53 and @xmath54 at @xmath45 .",
    "the intersection of @xmath22 with @xmath54 forms a segment centered at @xmath55 of length greater than 1 but smaller than 2 , and the intersection of @xmath22 with @xmath44 forms a segment centered at @xmath55 of length smaller than 1 . to cover @xmath22",
    "entirely , these segments must be covered .",
    "since each line - restricted circle can only cover a segment of length 1 on the strip boundary , and each strip is oblivious that the neighbouring strip may have covered the same segment , strips 2 and 3 would need two circles each and strip 1 would need one circle , resulting in a total of 5 .    finally , it is easy to see that @xmath22 is covered by the five circles centred at @xmath56 , @xmath46 , @xmath47 , @xmath48 , @xmath49 ( see figure [ fig2 ] ) .",
    "@xmath40 @xmath41 @xmath51 + @xmath27 + .",
    "top : a set of points optimally coverable by one circle .",
    "bottom : a covering solution for each strip .",
    "dashed lines denote restriction lines in @xmath19.,title=\"fig:\",width=340 ] + @xmath27 + .",
    "top : a set of points optimally coverable by one circle .",
    "bottom : a covering solution for each strip .",
    "dashed lines denote restriction lines in @xmath19.,title=\"fig:\",width=340 ]    [ 5app ] this algorithm is a @xmath28-approximation for udc in @xmath7 .",
    "since our algorithm solves each strip optimally , it produces a solution that is at least as good as any oblivious @xmath19-restricted solution .",
    "we have shown that there exists such a solution with an approximation factor of 5 , which follows directly from observations [ 4c ] and [ 5c ] .",
    "hence , our algorithm has an approximation factor of at most 5 .      to improve the 5-approximation algorithm to a @xmath2-approximation algorithm",
    ", we employ a `` smoothing '' technique . from the calculations in observation [ 5c ] ,",
    "the region where a circle @xmath22 in an optimal solution requires five circles to cover is only @xmath57 wide . in all other cases , @xmath22",
    "can be covered by only four circles .",
    "since @xmath57 is less than one - sixth of the width of the entire strip @xmath13 , it is intuitive that we can do better than a 5-approximation . here",
    ", we show that by shifting the strip partition , we can smooth out the regions that require 5-circles and achieve a @xmath2-approximation .    to be precise",
    ", we define a strip partition with shift @xmath16 to be the partition of @xmath1 into width @xmath13 vertical strips , where the boundaries of the strips are located at @xmath58 , @xmath59 . as usual , our restriction lines are in the centres of these strips .",
    "our algorithm with the smoothing technique is :    1 .   for @xmath60 , partition the plane into vertical strips of width @xmath13 with shift @xmath16 and",
    "use the 5-approximation algorithm .",
    "2 .   return the best of the six solutions obtained above .",
    "the algorithm with smoothing approximates is a @xmath2-approximation for udc in @xmath7 .",
    "let opt be the set of optimal circles for udc , and let @xmath61 be the six sets of shifted line sets used in our algorithm .",
    "for each of the six shifts , there exists an oblivious @xmath62-restricted solution .",
    "suppose that for @xmath63 , there are @xmath64 circles in opt with centers @xmath65 satisfying @xmath66 for @xmath67 , where @xmath68 .",
    "note that since these six ranges fill the plane , @xmath69 .    according to observations [ 4c ] and [ 5c ] , each solution has five circles for every circle in opt that has center @xmath65 satisfying @xmath70 and four circles for every other circle in opt .",
    "since the range in equation [ eq2 ] is a subrange of that in equation [ eq1 ] , it follows that an oblivious @xmath62-restricted solution of section [ l2p2approx ] uses no more than @xmath71 circles .    for @xmath63 ,",
    "let @xmath72 be the @xmath73-th candidate solution generated by our algorithm and let @xmath74 be the solution with fewest circles out of the 6 @xmath72 s .",
    "since each @xmath72 is at least as good as any oblivious @xmath62-restricted solution , we have the inequality : @xmath75\\\\ & = 4|\\textsc{opt}| + \\min_{i=1, .. ,6 } q_i\\\\ & \\leq 4|\\textsc{opt}| + \\frac{1}{6}|\\textsc{opt}| = \\frac{25}{6}|\\textsc{opt}|\\end{aligned}\\ ] ] hence the output of our algorithm is a @xmath2 approximation to the unit disk cover problem .",
    "the approximation algorithm outlined above can be applied to any @xmath6 norm  one simply has to figure out the worst case number of oblivious line - restricted circles to cover an arbitrary circle in the plane . for each norm , the optimal line spacing varies .",
    "however , our algorithm is guaranteed to produce constant factor approximations when the spacing less than @xmath3 .",
    "our algorithm can also be extended to higher dimensions .",
    "a natural extension is to use a collection of uniformly spaced parallel lines , and solve lrudc in a small tube surrounding each line . in this way",
    ", we can obtain approximations in arbitrarily large @xmath9 dimensions , albeit with an approximation factor that scales exponentially with @xmath9 .",
    "in particular , applying this technique to the @xmath8 norm gives a @xmath76-approximation in @xmath9 dimensions , matching an earlier result by @xcite .",
    "finally , our algorithm applies to covering objects more general than points , such as polygonal shapes .",
    "our proofs only rely on the fact that any optimal circle can be covered entirely with a constant number of oblivious line - restricted circles .",
    "the fact that we are covering points is not used .",
    "we presented a simple algorithm to approximate the unit disk cover problem within factor of @xmath2 in @xmath7 and within a factor of 2 in @xmath8 .",
    "the algorithm runs in @xmath4 time @xmath5 space , with the most time consuming step being a simple sorting of the input . on a practical level",
    ", we believe our algorithm has a good mix of performance and simplicity , with a typical implementation of no more than 30 lines of c++ .    we wonder what the best approximation an oblivious line - restricted approach can achieve for the unit disk cover problem . for the @xmath8 norm",
    ", we saw that 2 was the best possible approximation factor for lines spaced equally apart .",
    "similarly , one can show for the @xmath7 norm that a lower bound of @xmath77 is the best that can be done with an oblivious algorithm for equally spaced lines .",
    "it would be interesting to see if these lower bounds can be broken by an oblivious algorithm once the equal spacing condition is removed .",
    "finally , an analysis of the optimal spacing in other @xmath6 norms would be interesting as well .",
    "the authors would like to thank professors david kirkpatrick and will evans for their limitless patience and guidance , as well as kristina nelson for reading the early drafts .",
    "99 r. j. fowler , m. s. paterson , and s. l. tanimoto .",
    "optimal packing and covering in the plane are np - complete . _",
    "inform . process .",
    "_ , 12(3):133137 , 1981 . t. feder and d. h. greene .",
    "optimal algorithms for approximate clustering . in _ proc .",
    "20th acm sympos .",
    "theory comput .",
    "_ , pages 434444 , 1988 .",
    "d. s. hochbaum and w. maass .",
    "approximation schemes for covering and packing problems in image processing and vlsi .",
    "_ j. acm _ , 32:130136 , 1985",
    ". t. gonzalez .",
    "covering a set of points in multidimensional space . _ information processing letters _",
    ", 40(4):181188 , 1991 . h. brnnimann and m. t. goodrich .",
    "almost optimal set covers in finite vc - dimension . _ discrete comp",
    "_ 14:463479 , 1995 . m. franceschetti , m. cook , j. bruck . a geometric theorem for network design .",
    "_ ieee trans .",
    "_ 53(4):483489 , 2004 . m. franceschetti , m. cook , j. bruck . a geometric theorem for approximate disk covering algorithms",
    ". electronic report .",
    "r. fraser and a. lpez - ortiz .",
    "the within - strip discrete unit disk cover problem , _ proc .",
    "24th canadian conference on computational geometry _",
    ", pages 61 - 66 , 2012 ."
  ],
  "abstract_text": [
    "<S> given a point set @xmath0 in @xmath1 , the problem of finding the smallest set of unit disks that cover all of @xmath0 is np - hard . </S>",
    "<S> we present a simple algorithm for this problem with an approximation factor of @xmath2 in the euclidean norm and @xmath3 in the max norm , by restricting the disk centers to lie on parallel lines . </S>",
    "<S> the run time and space of this algorithm is @xmath4 and @xmath5 respectively . </S>",
    "<S> this algorithm extends to any @xmath6 norm and is asymptotically faster than known alternative approximation algorithms for the same approximation factor . </S>"
  ]
}