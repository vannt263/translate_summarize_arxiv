{
  "article_text": [
    "the basic principles of quantum mechanics are widely adopted in computation and communication . as a relative novel computation pattern",
    ", quantum computing@xcite brings the dawn of solving the so - called np problem because of the strong parallel computation power of quantum computing . and also , many basic principles of quantum mechanics , such as heisenberg uncertainty principle and quantum no - cloning theorem , provide quantum communication protocols the so - called provable security .",
    "now , some quantum communication protocols , especially quantum key distribution protocols , have already been commercially available .",
    "process algebra@xcite is well known in capturing traditional computation , especially parallelism and concurrence , in an interleaving pattern , such as ccs ( calculus of concurrent process)@xcite@xcite , csp ( communicating sequential processes)@xcite and acp ( algebra of communicating processes)@xcite . to unify quantum computing and classical computing under the same process algebra framework ,",
    "is attractive and has an important significance , because most quantum communication protocols involve quantum information and classical information , quantum computing and classical computing .    in this paper",
    ", we design an axiomatization called qacp for quantum processes with a quantum generalization of process algebra acp , which unifies quantum computing and classical computing .",
    "qacp consists of not only an operational semantics based on classical structural operational semantics , but also an equational logic , by use of which , most quantum communication protocols can be verified easily .",
    "this paper is organized as follows . in section [ relatedworks ] , we introduce the related works . in section [ pre ] , we recall some preliminaries , including basic concepts and conclusions about basic linear algebra , basic quantum mechanics , equational logic , structural operational semantics and process algebra acp . in section [ sosqp ] , we extend classical structural operational semantics to support quantum processes . the basic quantum process algebra ( bqpa )",
    "is introduced in section [ bqpa ] , quantum process algebra with parallelism ( qpap ) and algebra of quantum communicating processes ( aqcp ) are designed in section [ aqcp ] . to capture infinite computing in quantum processes , we discuss recursion in section [ recursion ] . to model silent step and abstract internal computation ,",
    "silent step and abstraction operator are introduced in section [ abstraction ] .",
    "we unify qacp and classical acp in section [ unifying ] .",
    "an example of the famous bb84 protocol@xcite is verified by use of qacp in section [ verification ] .",
    "qacp can be extended easily in an elegant way , which is shown in section [ extensions ] .",
    "finally , we conclude this paper in section [ conclusions ] .",
    "quantum process algebra provides formal tools for modeling , analysis and verification of quantum communication protocols , which combines quantum communications and quantum computing together .",
    "@xcite@xcite defined a language called cqp ( communicating quantum processes ) by adding primitives for quantum measurements and transformation of quantum states to @xmath3-calculus .",
    "an operational semantics and a type system for cqp were also presented to prove that the semantics preserves typing and typing guarantees that each qubit is owned by a unique process within a system .",
    "@xcite@xcite@xcite@xcite defined a language called qpalg ( quantum process algebra ) , in which , based on ccs@xcite@xcite , primitives of unitary transformations and quantum measurements were added to ccs .",
    "an operational semantics based on probabilistic branching bisimulation was given in qpalg .",
    "@xcite was introduced as a kind of algebra of pure quantum processes ( no classical data involved ) based on ccs .",
    "qccs aimed at providing a suitable framework , in which the mechanism of quantum concurrent computation can be understood , and interactions and conjugation of computation and communication in quantum systems can be observed . in qccs , quantum operations ( super operators ) were chosen to describe transformations of quantum states , and quantum variables and their substitutions were carefully treated .",
    "an operational semantics for qccs based on exact ( strong ) bisimulation and an approximation version of bisimulation were presented for qccs .",
    "based on @xcite , several kind of bisimulations were presented for qccs , such as probabilistic bisimulation@xcite , a kind of weak probabilistic bisimulation@xcite , open bisimulation@xcite and symbolic bisimulation @xcite@xcite .",
    "these bisimulations provided qcss with more semantic models . in some bisimulations , not only pure quantum data , but",
    "also classical data could be involved in qccs .    in this paper",
    ", we propose an axiomatization of quantum processes called qacp , which is a quantum generalization of process algebra acp .",
    "this work uses some results of the previous works , especially qccs , in the following ways .",
    "( 1 ) qacp still uses the concept of a quantum process configuration @xmath4 @xcite @xcite @xcite @xcite @xcite @xcite @xcite @xcite @xcite , which is usually consisted of a process term @xmath1 and state information @xmath2 of all ( public ) quantum information variables .",
    "( 2 ) like qccs , quantum operations are chosen to describe transformations of quantum states , and behave as the atomic actions of a pure quantum process .",
    "quantum measurements are treated as quantum operations , so probabilistic bisimulations are avoided .",
    "there are several innovations in this paper , we enumerate them as follows . ( 1 ) a weak bisimularity ( quantum branching bisimulation equivalence ) is established for quantum processes .",
    "this weak bisimularity is in a non - probabilistic way that follows @xcite and can be used to model silent step and abstract internal actions .",
    "( 2 ) we still use the framework of a quantum process configuration @xmath0 , but we treat it as two relative independent part : the structural part @xmath1 and the quantum part @xmath2 , because the establishment of a sound and complete theory is dependent on the structural properties of the structural part @xmath1 .",
    "we let the quantum part @xmath2 be the outcomes of execution of @xmath1 to examine and observe the function of the basic theory of quantum mechanics .",
    "we establish the relationship between quantum bisimularity and classical bisimularity , including strong bisimularity and weak bisimularity , which makes an axiomatization of quantum processes possible .",
    "( 3 ) we establish a series of axiomatizations of quantum process algebra , including bqpa ( basic quantum process algebra ) , qpap ( quantum process algebra with parallelism ) , aqcp ( algebra of quantum communicating processes ) , aqcp with guarded linear recursion , and @xmath5 with guarded linear recursion .",
    "though these axiomatizations are based on classical axiomatizations of acp which is based on the structural analysis the process @xmath1 , they are not trivial and ordinary , because it is also necessary to examine if the outcomes @xmath2 of execution of @xmath1 obey the basic quantum mechanics theory . for example",
    ", the associativity law of sequential composition @xmath6 , @xmath7 ( @xmath8 range over the collection of process terms ) , is based on the associativity of quantum operations . and the behaviors of the silent step @xmath9 in quantum processes and that in classical processes are different under the framework of quantum process configuration @xmath10 .",
    "( 4 ) in this paper , qacp and classical acp are unified under the framework of quantum process configuration @xmath10 .",
    "this unifying means that quantum information and classical information can be mixed in qacp and quantum computing and classical computing are unified in qacp .",
    "thus , qacp can be used widely for verification of quantum communication protocols , which involve not only quantum information , but also classical information .",
    "( 5 ) as a result of axiomatization , qacp has not only an operational semantics , but also an equation logic which makes the qacp can be used easily .",
    "qacp also inherits the modularity of acp , and can be extended in an elegant way .",
    "for convenience of the reader , we introduce some basic concepts about basic linear algebra , basic quantum mechanics ( please refer to @xcite for details ) , equational logic , structural operational semantics and process algebra acp ( please refer to @xcite and @xcite for more details ) .",
    "* definition [ bla].1 ( hilbert space)*. an isolated physical system is associated with a hilbert space , which is called the state space of the system .",
    "a finite - dimensional hilbert space is a complex vector space @xmath11 together with an inner product , which is a mapping @xmath12 satisfying : ( 1)@xmath13 with equality if and only if @xmath14 ; ( 2)@xmath15 ; ( 3 ) @xmath16 , where @xmath17 is the set of complex numbers , and @xmath18 denotes the conjugate of @xmath19 ( @xmath20 ) .    * definition [ bla].2 ( orthonormal basis)*. for any vector @xmath21 in @xmath11 , the length @xmath22 . a vector @xmath21 with @xmath23",
    "is called a unit vector in its state space . an orthonormal basis of a hilbert space",
    "@xmath11 is a basis @xmath24 with    @xmath25    * definition [ bla].3 ( trace of a linear operator)*. the trace of a linear operator @xmath26 on @xmath11 is defined as    @xmath27    * definition [ bla].4 ( tensor products)*. the state space of a composite system is the tensor product of the state space of its components .",
    "let @xmath28 and @xmath29 be two hilbert spaces , then their tensor product @xmath30 consists of linear vectors @xmath31 , where @xmath32 and @xmath33 .    for two linear operator @xmath34 on hilbert space @xmath28 , @xmath35 on hilbert space @xmath29 ,",
    "@xmath36 is defined as    @xmath37    where @xmath38 and @xmath39 .",
    "let @xmath40 and @xmath41 .",
    "then the inner product of @xmath42 and @xmath21 is defined as follows .",
    "@xmath43      * definition [ bqm].1 ( density operator)*. a mixed state of quantum system is represented by a density operator .",
    "a density operator in @xmath11 is a linear operator @xmath2 satisfying:(1 ) @xmath2 is positive , that is , @xmath44 for all @xmath21 ; ( 2 ) @xmath45 .",
    "let @xmath46 denote the set of all positive operators on @xmath11 .",
    "* definition [ bqm].2 ( unitary operator)*. the evolution of a closed quantum system is described by a unitary operator on its state space .",
    "a unitary operator is a linear operator @xmath47 on a hilbert space @xmath11 with @xmath48 , where @xmath49 is the identity operator on @xmath11 and @xmath50 is the adjoint of @xmath47 .    *",
    "definition [ bqm].3 ( quantum measurement)*. a quantum measurement consists of a collection of measurement operators @xmath51 , where @xmath52 is the measurement outcomes and satisfies    @xmath53    * definition [ bqm].4 ( quantum operation ( super operator))*. the evolution of an open quantum system can be described by a quantum operation . a quantum operation on a hilbert space @xmath11 is a linear operator @xmath54 from the space of linear operators on @xmath11 into itself satisfying : ( 1 ) @xmath55\\leq tr(\\varrho)$ ] for each @xmath56 ; ( 2 ) for any extra hilbert space @xmath57 , @xmath58 is positive if @xmath26 is a positive operator on @xmath59 , where @xmath60 is the identity operator in @xmath57 . if @xmath55= tr(\\varrho)$ ] for all @xmath56 , then @xmath54 is said to be trace - preserving .",
    "* definition [ bqm].5 ( relation between quantum operation and unitary operator)*.",
    "let @xmath47 be a unitary operator on the hilbert space @xmath11 , and @xmath61 for any @xmath56 .",
    "then @xmath54 is a trace - preserving quantum operation .    *",
    "definition [ bqm].6 ( relation between quantum operation and measurement operator)*.",
    "let @xmath51 be a quantum measurement on the hilbert space @xmath11 . for each @xmath52 ,",
    "let @xmath62 for any @xmath56 .",
    "the @xmath63 is a quantum operation and is not necessarily trace - preserving .",
    "we introduce some basic concepts about equational logic briefly , including signature , term , substitution , axiomatization , equality relation , model , term rewriting system , rewrite relation , normal form , termination , weak confluence and several conclusions .",
    "these concepts are coming from @xcite , and are introduced briefly as follows . about the details ,",
    "please see @xcite .",
    "* definition [ elp].1 ( signature)*. a signature @xmath64 consists of a finite set of function symbols ( or operators ) @xmath65 , where each function symbol @xmath66 has an arity @xmath67 , being its number of arguments .",
    "a function symbol @xmath68 of arity _ zero _ is called a constant , a function symbol of arity one is called unary , and a function symbol of arity two is called binary .",
    "* definition [ elp].2 ( term)*. let @xmath64 be a signature .",
    "the set @xmath69 of ( open ) terms @xmath70 over @xmath64 is defined as the least set satisfying : ( 1)each variable is in @xmath69 ; ( 2 ) if @xmath71 and @xmath72 , then @xmath73 .",
    "a term is closed if it does not contain variables .",
    "the set of closed terms is denoted by @xmath74 .    to obey the quantum no - cloning theorem of quantum information , substitution of quantum information must be carefully treated@xcite , which is required to be an one - to - one mapping and the passing of quantum information is always by name , but not by value .",
    "since process algebra acp mainly concerns the algebraic properties of actions or operations@xcite , but not data or information , the substitution of terms used in this paper is just the same as classical computing .",
    "though actions or operations manipulate data or information ultimately , it is the duty of actions or operations to obey the no - cloning theorem of quantum information .    *",
    "definition [ elp].3 ( substitution)*. let @xmath64 be a signature .",
    "a substitution is a mapping @xmath75 from variables to the set @xmath69 of open terms .",
    "a substitution extends to a mapping from open terms to open terms : the term @xmath76 is obtained by replacing occurrences of variables @xmath77 in t by @xmath78 .",
    "a substitution @xmath75 is closed if @xmath79 for all variables @xmath77 .    * definition [ elp].4 ( axiomatization)*. an axiomatization over a signature @xmath64 is a finite set of equations , called axioms , of the form @xmath80 with @xmath81 .    * definition [ elp].5 ( equality relation)*. an axiomatization over a signature @xmath64 induces a binary equality relation @xmath82 on @xmath69 as follows .",
    "( 1)(substitution ) if @xmath80 is an axiom and @xmath75 a substitution , then @xmath83 .",
    "( 2)(equivalence ) the relation @xmath82 is closed under reflexivity , symmetry , and transitivity .",
    "( 3)(context ) the relation @xmath82 is closed under contexts : if @xmath84 and @xmath66 is a function symbol with @xmath85 , then @xmath86 .",
    "* definition [ elp].6 ( model)*. assume an axiomatization @xmath87 over a signature @xmath64 , which induces an equality relation @xmath82 . a model for @xmath87 consists of a set @xmath88 together with a mapping @xmath89 .",
    "( 1)@xmath90 is sound for @xmath87 if @xmath80 implies @xmath91 for @xmath92 ; ( 2)@xmath90 is complete for @xmath87 if @xmath91 implies @xmath80 for @xmath92 .    *",
    "definition [ elp].7 ( term rewriting system)*. assume a signature @xmath64 .",
    "a rewrite rule is an expression @xmath93 with @xmath81 , where : ( 1)the left - hand side @xmath94 is not a single variable ; ( 2)all variables that occur at the right - hand side @xmath95 also occur in the left - hand side @xmath94 .",
    "a term rewriting system ( trs ) is a finite set of rewrite rules .    *",
    "definition [ elp].8 ( rewrite relation)*. a trs over a signature @xmath64 induces a one - step rewrite relation @xmath96 on @xmath69 as follows .",
    "( 1)(substitution ) if @xmath93 is a rewrite rule and @xmath75 a substitution , then @xmath97 .",
    "( 2)(context ) the relation @xmath96 is closed under contexts : if @xmath98 and f is a funtion symbol with @xmath85 , then @xmath99 .",
    "the rewrite relation @xmath100 is the reflexive transitive closure of the one - step rewrite relation @xmath96 : ( 1 ) if @xmath93 , then @xmath101 ; ( 2 ) @xmath102 ; ( 3 ) if @xmath101 and @xmath103 , then @xmath104 .    * definition [ elp].9 ( normal form)*. a term is called a normal form for a trs if it can not be reduced by any of the rewrite rules .    *",
    "definition [ elp].10 ( termination)*. a trs is terminating if it does not induce infinite reductions @xmath105 .",
    "* definition [ elp].11 ( weak confluence)*. a trs is weakly confluent if for each pair of one - step reductions @xmath106 and @xmath107 , there is a term @xmath108 such that @xmath109 and @xmath110 .    *",
    "theorem [ elp].1 ( newman s lemma)*. if a trs is terminating and weakly confluent , then it reduces each term to a unique normal form .",
    "* definition [ elp].12 ( commutativity and associativity)*. assume an axiomatization @xmath87 .",
    "a binary function symbol @xmath66 is commutative if @xmath87 contains an axiom @xmath111 and associative if @xmath87 contains an axiom @xmath112 .    *",
    "definition [ elp].13 ( convergence)*. a pair of terms @xmath94 and @xmath95 is said to be convergent if there exists a term @xmath108 such that @xmath104 and @xmath103 .",
    "axiomatizations can give rise to trss that are not weakly confluent , which can be remedied by knuth - bendix completion@xcite .",
    "it determines overlaps in left hand sides of rewrite rules , and introduces extra rewrite rules to join the resulting right hand sides , witch are called critical pairs .",
    "* theorem [ elp].2*. a trs is weakly confluent if and only if all its critical pairs are convergent .",
    "the concepts about structural operational semantics include labelled transition system ( lts ) , transition system specification ( tss ) , transition rule and its source , source - dependent , conservative extension , fresh operator , panth format , congruence , bisimulation , etc .",
    "these concepts are coming from @xcite , and are introduced briefly as follows . about the details , please see @xcite .",
    "we assume a non - empty set @xmath113 of states , a finite , non - empty set of transition labels @xmath26 and a finite set of predicate symbols .",
    "* definition [ sosp].1 ( labeled transition system)*. a transition is a triple @xmath114 with @xmath115 , or a pair ( s , p ) with @xmath116 a predicate , where @xmath117 . a labeled transition system ( lts ) is possibly infinite set of transitions .",
    "an lts is finitely branching if each of its states has only finitely many outgoing transitions .",
    "* definition [ sosp].2 ( transition system specification)*. a transition rule @xmath118 is an expression of the form @xmath119 , with @xmath120 a set of expressions @xmath121 and @xmath122 with @xmath123 , called the ( positive ) premises of @xmath118 , and @xmath3 an expression @xmath121 or @xmath122 with @xmath123 , called the conclusion of @xmath118 .",
    "the left - hand side of @xmath3 is called the source of @xmath118 .",
    "a transition rule is closed if it does not contain any variables . a transition system specification ( tss )",
    "is a ( possible infinite ) set of transition rules .    *",
    "definition [ sosp].3 ( proof)*. a proof from a tss @xmath124 of a closed transition rule @xmath119 consists of an upwardly branching tree in which all upward paths are finite , where the nodes of the tree are labelled by transitions such that : ( 1 ) the root has label @xmath3 ; ( 2 ) if some node has label @xmath125 , and @xmath126 is the set of labels of nodes directly above this node , then ( a ) either @xmath126 is the empty set and @xmath127 , ( b ) or @xmath128 is a closed substitution instance of a transition rule in @xmath124 .",
    "* definition [ sosp].4 ( generated lts)*. we define that the lts generated by a tss @xmath124 consists of the transitions @xmath3 such that @xmath129 can be proved from @xmath124 .",
    "* definition [ sosp].5*. a set @xmath130 of expressions @xmath131 and @xmath132 ( where @xmath95 ranges over closed terms , @xmath133 over @xmath26 and @xmath116 over predicates ) hold for a set @xmath54 of transitions , denoted by @xmath134 , if : ( 1 ) for each @xmath135 we have that @xmath136 for all @xmath137 ; ( 2 ) for each @xmath138 we have that @xmath139 .    *",
    "definition [ sosp].6 ( three - valued stable model)*. a pair @xmath140 of disjoint sets of transitions is a three - valued stable model for a tss @xmath124 if it satisfies the following two requirements : ( 1 ) a transition @xmath3 is in @xmath141 if and only if @xmath124 proves a closed transition rule @xmath142 where @xmath130 contains only negative premises and @xmath143 ; ( 2 ) a transition @xmath3 is in @xmath144 if and only if @xmath124 proves a closed transition rule @xmath142 where @xmath130 contains only negative premises and @xmath145 .    *",
    "definition [ sosp].7 ( ordinal number)*. the ordinal numbers are defined inductively by : ( 1 ) @xmath146 is the smallest ordinal number ; ( 2 ) each ordinal number @xmath147 has a successor @xmath148 ; ( 3 ) each sequence of ordinal number @xmath149 is capped by a limit ordinal @xmath19 .    *",
    "definition [ sosp].8 ( positive after reduction)*. a tss is positive after reduction if its least three - valued stable model does not contain unknown transitions .    *",
    "definition [ sosp].9 ( stratification)*. a stratification for a tss is a weight function @xmath150 which maps transitions to ordinal numbers , such that for each transition rule @xmath118 with conclusion @xmath3 and for each closed substitution @xmath75 : ( 1 ) for positive premises @xmath121 and @xmath122 of @xmath118 , @xmath151 and @xmath152 , respectively ; ( 2 ) for negative premise @xmath131 and @xmath132 of @xmath118 , @xmath153 for all closed terms @xmath154 and @xmath155 , respectively ;    * theorem [ sosp].1*. if a tss allows a stratification , then it is positive after reduction .    *",
    "definition [ sosp].10 ( process graph)*. a process ( graph ) @xmath1 is an lts in which one state @xmath94 is elected to be the root . if the lts contains a transition @xmath156 , then @xmath157 where @xmath158 has root state @xmath159 .",
    "moreover , if the lts contains a transition @xmath160 , then @xmath161 .",
    "( 1 ) a process @xmath162 is finite if there are only finitely many sequences @xmath163 .",
    "( 2 ) a process @xmath162 is regular if there are only finitely many processes @xmath164 such that @xmath163 .    *",
    "definition [ sosp].11 ( bisimulation)*. a bisimulation relation @xmath165 is a binary relation on processes such that : ( 1 ) if @xmath166 and @xmath167 then @xmath168 with @xmath169 ; ( 2 ) if @xmath166 and @xmath168 then @xmath167 with @xmath169 ; ( 3 ) if @xmath166 and @xmath161 , then @xmath170 ; ( 4 ) if @xmath166 and @xmath170 , then @xmath161 .",
    "two processes @xmath1 and @xmath171 are bisimilar , denoted by @xmath172 , if there is a bisimulation relation @xmath165 such that @xmath166 .",
    "* definition [ sosp].12 ( congruence)*. let @xmath64 be a signature . an equivalence relation @xmath165 on @xmath74 is a congruence if for each @xmath173 , if @xmath174 for @xmath175 , then @xmath176 .    *",
    "definition [ sosp].13 ( panth format)*. a transition rule @xmath118 is in panth format if it satisfies the following three restrictions : ( 1 ) for each positive premise @xmath177 of @xmath118 , the right - hand side @xmath154 is single variable ; ( 2 ) the source of @xmath118 contains no more than one function symbol ; ( 3 ) there are no multiple occurrences of the same variable at the right - hand sides of positive premises and in the source of @xmath118 .",
    "a tss is said to be in panth format if it consists of panth rules only .",
    "* theorem [ sosp].2*. if a tss is positive after reduction and in panth format , then the bisimulation equivalence that it induces is a congruence .    *",
    "definition [ sosp].14 ( branching bisimulation)*. a branching bisimulation relation @xmath165 is a binary relation on the collection of processes such that : ( 1 ) if @xmath166 and @xmath167 then either @xmath178 and @xmath179 or there is a sequence of ( zero or more ) @xmath9-transitions @xmath180 such that @xmath181 and @xmath182 with @xmath169 ; ( 2 ) if @xmath166 and @xmath168 then either @xmath178 and @xmath183 or there is a sequence of ( zero or more ) @xmath9-transitions @xmath184 such that @xmath185 and @xmath186 with @xmath169 ; ( 3 ) if @xmath166 and @xmath161 , then there is a sequence of ( zero or more ) @xmath9-transitions @xmath180 such that @xmath181 and @xmath187 ; ( 4 ) if @xmath166 and @xmath170 , then there is a sequence of ( zero or more ) @xmath9-transitions @xmath184 such that @xmath185 and @xmath188 . two processes",
    "@xmath1 and @xmath171 are branching bisimilar , denoted by @xmath189 , if there is a branching bisimulation relation @xmath165 such that @xmath166 .",
    "* definition [ sosp].15 ( rooted branching bisimulation)*. a rooted branching bisimulation relation @xmath165 is a binary relation on processes such that : ( 1 ) if @xmath166 and @xmath167 then @xmath168 with @xmath190 ; ( 2 ) if @xmath166 and @xmath168 then @xmath167 with @xmath190 ; ( 3 ) if @xmath166 and @xmath161 , then @xmath170 ; ( 4 ) if @xmath166 and @xmath170 , then @xmath161 .",
    "two processes @xmath1 and @xmath171 are rooted branching bisimilar , denoted by @xmath191 , if there is a rooted branching bisimulation relation @xmath165 such that @xmath166 .    *",
    "definition [ sosp].16 ( lookahead)*. a transition rule contains lookahead if a variable occurs at the left - hand side of a premise and at the right - hand side of a premise of this rule .",
    "* definition [ sosp].17 ( patience rule)*. a patience rule for the i - th argument of a function symbol @xmath66 is a panth rule of the form    @xmath192 .    *",
    "definition [ sosp].18 ( rbb cool format)*. a tss @xmath124 is in rbb cool format if the following requirements are fulfilled .",
    "( 1 ) @xmath124 consists of panth rules that do not contain lookahead . ( 2 ) suppose a function symbol @xmath66 occurs at the right - hand side the conclusion of some transition rule in @xmath124 .",
    "let @xmath193 be a non - patience rule with source @xmath194 .",
    "then for @xmath175 , @xmath195 occurs in no more than one premise of @xmath118 , where this premise is of the form @xmath196 or @xmath197 with @xmath198 .",
    "moreover , if there is such a premise in @xmath118 , then there is a patience rule for the i - th argument of @xmath66 in @xmath124 .",
    "* theorem [ sosp].3*. if a tss is positive after reduction and in rbb cool format , then the rooted branching bisimulation equivalence that it induces is a congruence .    *",
    "definition [ sosp].19 ( conservative extension)*.",
    "let @xmath199 and @xmath200 be tsss over signatures @xmath201 and @xmath202 , respectively .",
    "the tss @xmath203 is a conservative extension of @xmath199 if the ltss generated by @xmath199 and @xmath203 contain exactly the same transitions @xmath121 and @xmath122 with @xmath204 .    *",
    "definition [ sosp].20 ( source - dependency)*. the source - dependent variables in a transition rule of @xmath118 are defined inductively as follows : ( 1 ) all variables in the source of @xmath118 are source - dependent ; ( 2 ) if @xmath121 is a premise of @xmath118 and all variables in @xmath95 are source - dependent , then all variables in @xmath154 are source - dependent .",
    "a transition rule is source - dependent if all its variables are .",
    "a tss is source - dependent if all its rules are .    *",
    "definition [ sosp].21 ( freshness)*. let @xmath199 and @xmath200 be tsss over signatures @xmath201 and @xmath202 , respectively . a term in @xmath205",
    "is said to be fresh if it contains a function symbol from @xmath206 .",
    "similarly , a transition label or predicate symbol in @xmath200 is fresh if it does not occur in @xmath199 .    * theorem [ sosp].4*. let @xmath199 and @xmath200 be tsss over signatures @xmath201 and @xmath202 , respectively , where @xmath199 and @xmath203 are positive after reduction . under the following conditions , @xmath203 is a conservative extension of @xmath199 .",
    "( 1 ) @xmath199 is source - dependent . ( 2 ) for each @xmath207 , either the source of @xmath118 is fresh , or @xmath118 has a premise of the form @xmath121 or @xmath122 , where @xmath208 , all variables in @xmath95 occur in the source of @xmath118 and @xmath154 , @xmath133 or @xmath116 is fresh .",
    "acp@xcite is a kind of process algebra which focuses on the specification and manipulation of process terms by use of a collection of operator symbols . in acp",
    ", there are several kind of operator symbols , such as basic operators to build finite processes ( called bpa ) , communication operators to express concurrency ( called pap ) , deadlock constants and encapsulation enable us to force actions into communications ( called acp ) , liner recursion to capture infinite behaviors ( called acp with linear recursion ) , the special constant silent step and abstraction operator ( called @xmath209 with guarded linear recursion ) allows us to abstract away from internal computations .",
    "bisimulation or rooted branching bisimulation based structural operational semantics is used to formally provide each process term used the above operators and constants with a process graph .",
    "the axiomatization of acp ( according the above classification of acp , the axiomatizations are @xmath210 , @xmath211 , @xmath212 , @xmath212 + rdp ( recursive definition principle ) + rsp ( recursive specification principle ) , @xmath213 + rdp + rsp + cfar ( cluster fair abstraction rule ) respectively ) imposes an equation logic on process terms , so two process terms can be equated if and only if their process graphs are equivalent under the semantic model .",
    "acp can be used to formally reason about the behaviors , such as processes executed sequentially and concurrently by use of its basic operator , communication mechanism , and recursion , desired external behaviors by its abstraction mechanism , and so on .",
    "acp is organized by modules and can be extended with fresh operators to express more properties of the specification for system behaviors .",
    "these extensions are required both the equational logic and the structural operational semantics to be extended .",
    "then the extension can use the whole outcomes of acp , such as its concurrency , recursion , abstraction , etc .",
    "in the above section , operational semantics are described by labelled transitions among process configurations , and a process term is enough to represent a process configuration .",
    "but in quantum processes , to avoid the abuse of quantum information which may violate the no - cloning theorem , a quantum process configuration @xmath4 @xcite @xcite @xcite @xcite @xcite @xcite @xcite @xcite @xcite is usually consisted of a process term @xmath1 and state information @xmath2 of all ( public ) quantum information variables .",
    "though quantum information variables are not explicitly defined in qacp and are hidden behind quantum operations , more importantly , the state information @xmath2 is the effects of execution of a series of quantum operations on involved quantum systems , the execution of a series of quantum operations should not only obey the restrictions of the structure of the process terms , but also those of quantum mechanics principles . through the state information @xmath2 , we can check and observe the functions of quantum mechanics principles , such as quantum entanglement , quantum measurement , etc .",
    "so , the operational semantics of quantum processes should be defined based on quantum process configuration @xmath10 , in which @xmath214 of two state information @xmath2 and @xmath215 means equality under the framework of quantum information and quantum computing , that is , these two quantum processes are in the same quantum state .",
    "several important concepts used in this paper are following . here",
    ", we use @xmath216 to denote quantum operations in contrast to classical actions @xmath217 .",
    "* definition [ sosqp].1 ( quantum process configuration)*. a quantum process configuration is defined to be a pair @xmath10 , where @xmath1 is a process ( graph ) called structural part of the configuration , and @xmath56 specifies the current state of the environment , which is called its quantum part .",
    "* definition [ sosqp].2 ( quantum process graph)*. a quantum process ( graph ) @xmath10 is an lts in which one state @xmath94 is elected to be the root .",
    "if the lts contains a transition @xmath218 , then @xmath219 where @xmath220 has root state @xmath159 .",
    "moreover , if the lts contains a transition @xmath160 , then @xmath221 .",
    "( 1 ) a quantum process @xmath222 is finite if and only if the process @xmath162 is finite .",
    "( 2 ) a quantum process @xmath222 is regular if and only if the process @xmath162 is regular .",
    "* definition [ sosqp].3 ( quantum transition system specification)*. a quantum process transition rule @xmath118 is an expression of the form @xmath119 , with @xmath120 a set of expressions @xmath223 and @xmath224 with @xmath123 and @xmath225 , called the ( positive ) premises of @xmath118 , and @xmath226 , called structural part of @xmath120 and denoted as @xmath227 . and",
    "@xmath3 an expression @xmath223 or @xmath224 with @xmath123 and @xmath225 , called the conclusion of @xmath118 , and @xmath226 , called structural part of @xmath3 and denoted as @xmath228 .",
    "the left - hand side of @xmath3 is called the source of @xmath118 .",
    "@xmath229 is called the structural part of @xmath118 and denoted as @xmath230 . a quantum process transition rule @xmath118",
    "is closed if and only its structural part @xmath230 is closed . a quantum transition system specification ( qtss )",
    "is a ( possible infinite ) set of transition rules .    *",
    "definition [ sosqp].4 ( quantum bisimulation)*. a bisimulation relation @xmath165 is a binary relation on quantum processes such that : ( 1 ) if @xmath231 and @xmath232 then @xmath233 with @xmath234 ; ( 2 ) if @xmath231 and @xmath233 then @xmath232 with @xmath234 ; ( 3 ) if @xmath231 and @xmath221 , then @xmath235 ; ( 4 ) if @xmath231 and @xmath235 , then @xmath221",
    ". two quantum process @xmath10 and @xmath236 are bisimilar , denoted by @xmath237 , if there is a bisimulation relation @xmath165 such that @xmath231 .",
    "* definition [ sosqp].5 ( relation between quantum bisimulation and classical bisimulation)*. for two quantum processes , @xmath237 , with @xmath214 , if and only if @xmath172 and @xmath238 , where @xmath2 evolves into @xmath239 after execution of @xmath1 and @xmath215 evolves into @xmath240 after execution of @xmath171 .",
    "* definition [ sosqp].6 ( quantum branching bisimulation)*. a branching bisimulation relation @xmath165 is a binary relation on the collection of quantum processes such that : ( 1 ) if @xmath231 and @xmath232 then either @xmath241 and @xmath242 or there is a sequence of ( zero or more ) @xmath9-transitions @xmath243 such that @xmath244 and @xmath245 with @xmath234 ; ( 2 ) if @xmath231 and @xmath233 then either @xmath241 and @xmath246 or there is a sequence of ( zero or more ) @xmath9-transitions @xmath247 such that @xmath248 and @xmath249 with @xmath234 ; ( 3 ) if @xmath231 and @xmath221 , then there is a sequence of ( zero or more ) @xmath9-transitions @xmath243 such that @xmath244 and @xmath250 ; ( 4 ) if @xmath231 and @xmath235 , then there is a sequence of ( zero or more ) @xmath9-transitions @xmath247 such that @xmath248 and @xmath251 . two quantum processes @xmath10 and @xmath236 are branching bisimilar , denoted by @xmath252 , if there is a branching bisimulation relation @xmath165 such that @xmath231 .    * definition [ sosqp].7 ( relation between quantum branching bisimulation and classical branching bisimulation)*. for two quantum processes , @xmath252 , with @xmath214 , if and only if @xmath189 and @xmath238 , where @xmath2 evolves into @xmath239 after execution of @xmath1 and @xmath215 evolves into @xmath240 after execution of @xmath171 .    * definition",
    "[ sosqp].8 ( quantum rooted branching bisimulation)*. a rooted branching bisimulation relation @xmath165 is a binary relation on quantum processes such that : ( 1 ) if @xmath231 and @xmath232 then @xmath233 with @xmath253 ; ( 2 ) if @xmath231 and @xmath233 then @xmath232 with @xmath253 ; ( 3 ) if @xmath231 and @xmath221 , then @xmath235 ; ( 4 ) if @xmath231 and @xmath235 , then @xmath221 .",
    "two quantum processes @xmath10 and @xmath236 are rooted branching bisimilar , denoted by @xmath254 , if there is a rooted branching bisimulation relation @xmath165 such that @xmath231 .",
    "* definition [ sosqp].9 ( relation between quantum rooted branching bisimulation and classical rooted branching bisimulation)*. for two quantum processes , @xmath254 , with @xmath214 , if and only if @xmath191 and @xmath238 , where @xmath2 evolves into @xmath239 after execution of @xmath1 and @xmath215 evolves into @xmath240 after execution of @xmath171 .",
    "* definition [ sosqp].10 ( congruence)*. let @xmath64 be a signature and @xmath46 be the state space of the environment .",
    "an equivalence relation @xmath165 on @xmath255 is a congruence , i.e. , for each @xmath173 , if @xmath256 for @xmath175 , then @xmath257 .",
    "an equivalence relation @xmath165 on @xmath255 is a congruence , if for each @xmath173 , @xmath174 for @xmath175 , and @xmath176 .    *",
    "definition [ sosqp].11 ( quantum conservative extension)*. let @xmath199 and @xmath200 be qtsss over signature @xmath201 and @xmath258 , and @xmath202 and @xmath259 , respectively .",
    "the qtss @xmath203 is a conservative extension of @xmath199 if the ltss generated by @xmath199 and @xmath203 contain exactly the same transitions @xmath260 and @xmath261 with @xmath204 and @xmath262 , and @xmath263 .    *",
    "definition [ sosqp].12 ( relation between quantum conservative extension and classical conservative extension)*. the qtss @xmath203 is a quantum conservative extension of @xmath199 with transitions @xmath260 and @xmath261 , if its corresponding tss @xmath264 is a conservative extension of @xmath265 with transitions @xmath266 and @xmath122 .",
    "in the following , the variables @xmath267 range over the collection of process terms , the variables @xmath268 range over the set @xmath26 of atomic quantum operations , @xmath269 , @xmath270 are closed items , @xmath9 is the special constant silent step , @xmath271 is the special constant deadlock , and the predicate @xmath272 represents successful termination after execution of the quantum operation @xmath147 .",
    "bqpa includes three kind of operators : the execution of atomic quantum operation @xmath147 , the alternative composition operator @xmath273 and the sequential composition operator @xmath6 .",
    "each finite process can be represented by a closed term that is built from the set @xmath26 of atomic quantum operations , the alternative composition operator @xmath273 , and the sequential composition operator @xmath6 .",
    "the collection of all basic process terms is called basic quantum process algebra ( bqpa ) , which is abbreviated to bqpa .",
    "we give the transition rules under quantum transition system specification ( qtss ) for bqpa as follows .",
    "@xmath274    @xmath275    @xmath276    @xmath277    @xmath278    @xmath279    @xmath280    where @xmath281 represents the new state of a quantum system , whose origin state is @xmath2 , after the execution of the atomic quantum operation @xmath282 .",
    "* the first transition rule says that each atomic quantum operation @xmath282 can terminate successfully , and the state of the environment would be changed from @xmath2 to @xmath281 . *",
    "the next four transition rules say that @xmath283 can execute alternatively , that is , it can execute either @xmath94 or @xmath95 . *",
    "the last two transition rules say that @xmath284 can execute sequentially , that is , it executes @xmath94 in the first , after successful termination of @xmath94 , then execution of @xmath95 follows .",
    "we design an axiomatization @xmath285 for bqpa modulo quantum bisimulation equivalence as table [ axiomforbqpa ] shows .",
    ".axioms for bqpa [ cols= \" < , < \" , ]     * theorem [ extensions].3*. @xmath286 + rsp + rdp + cfar + qrn1-qrn4 is sound for @xmath5 with guarded linear recursion and renaming operators , modulo quantum rooted branching bisimulation equivalence .",
    "since quantum rooted branching bisimulation is both an equivalence and a congruence for @xmath5 with guarded linear recursion and renaming operators , only the soundness of the first clause in the definition of the relation @xmath82 is needed to be checked .",
    "that is , if @xmath80 is an axiom in @xmath286 + rsp + rdp + cfar + qrn1-qrn4 and @xmath75 a closed substitution that maps the variable in @xmath94 and @xmath95 to basic quantum process terms , then we need to check that @xmath287 .",
    "since axioms in @xmath286 + rsp + rdp + cfar + qrn1-qrn4 ( same as @xmath288 + rsp + rdp + cfar + qrn1-qrn4 ) are sound for @xmath289 with guarded linear recursion and renaming operators modulo rooted branching bisimulation equivalence , according to the definition of quantum rooted branching bisimulation , we only need to check if @xmath238 when @xmath214 , where @xmath2 evolves into @xmath239 after execution of @xmath290 and @xmath215 evolves into @xmath240 after execution of @xmath76 .",
    "we can find that every axiom in table [ axiomforr ] meets the above condition .",
    "* theorem [ extensions].4*. @xmath286 + rsp + rdp + cfar + qrn1-qrn4 is complete for @xmath5 with guarded linear recursion and renaming operators , modulo quantum rooted branching bisimulation equivalence .    to prove that @xmath286 + rsp + rdp + cfar + qrn1-qrn4 is complete for @xmath5 with guarded linear recursion and renaming operators modulo",
    "quantum rooted branching bisilumation equivalence , it means that @xmath291 implies @xmath80 .",
    "it was already proved that @xmath286 + rsp + rdp + cfar + qrn1-qrn4 ( same as @xmath288 + rsp + rdp + cfar + qrn1-qrn4 ) is complete for @xmath289 with guarded linear recursion and renaming operators modulo rooted branching bisimulation equivalence , that is , @xmath292 implies @xmath80 .",
    "@xmath291 with @xmath214 means that @xmath292 with @xmath214 and @xmath238 , where @xmath2 evolves into @xmath239 after execution of @xmath94 and @xmath215 evolves into @xmath240 after execution of @xmath95 , according to the definition of quantum rooted branching bisimulation equivalence .",
    "the completeness of @xmath286 + rsp + rdp + cfar + qrn1-qrn4 for @xmath289 with guarded linear recursion and renaming operators modulo rooted branching bisimulation equivalence determines that @xmath286 + rsp + rdp + cfar + qrn1-qrn4 is complete for @xmath5 with guarded linear recursion and renaming operators modulo quantum rooted branching bisimulation equivalence .",
    "we can see that qacp with renaming operator and acp with renaming operator can also be unified under the framework of quantum process configuration @xmath0 .",
    "in this paper , we extend the traditional structural operational semantics under the framework of quantum process configuration @xmath10 to support quantum processes . based on the relationship between quantum bisimularity and classical bisimularity",
    ", we establish a series of axiomatization for quantum processes called qacp .",
    "we also unify qacp and classical acp under the framework of quantum process configuration @xmath10 .",
    "it makes qacp can adapt to all quantum communication protocols .",
    "now , we point out some future directions . ( 1 ) quantum entanglement makes the processing of the silent step @xmath9 somewhat strange . the nature of influence of quantum entanglement for computation , especially for parallelism and concurrency ,",
    "should be considered carefully and deeply in future , because quantum entanglement is unique for quantum mechanics .",
    "( 2 ) other novel framework representing quantum processes should be proposed , not only the quantum process configuration @xmath10 .",
    "new framework will unify quantum computing and classical computing in a new way , which maybe capture the nature of quantum computing more naturally .",
    "( 3 ) qacp inherits the modularity of acp and makes it can be extended in an elegant fashion , in future , more properties can be extended in qacp .",
    "( 4 ) the axiomatization of qacp can be used to verify most quantum communication protocols easily and widely in future .",
    "m. lalire and p. jorrand . : _ a process algebraic approach to concurrent and distributed quantum computation : operational semantics .",
    "_ proceedings of the 2nd international workshop on quantum programming languages , tucs general publications , 2004 : 109126 .          c. h. bennett and g. brassard . : _ quantum cryptography : public - key distribution and coin tossing .",
    "_ proceedings of the ieee international conference on computer , systems and signal processing , 1984 , 175179 ."
  ],
  "abstract_text": [
    "<S> we establish an axiomatization for quantum processes , which is a quantum generalization of process algebra acp ( algebra of communicating processes ) . </S>",
    "<S> we use the framework of a quantum process configuration @xmath0 , but we treat it as two relative independent part : the structural part @xmath1 and the quantum part @xmath2 , because the establishment of a sound and complete theory is dependent on the structural properties of the structural part @xmath1 . </S>",
    "<S> we let the quantum part @xmath2 be the outcomes of execution of @xmath1 to examine and observe the function of the basic theory of quantum mechanics . </S>",
    "<S> we establish not only a strong bisimularity for quantum processes , but also a weak bisimularity to model the silent step and abstract internal computations in quantum processes . the relationship between quantum bisimularity and classical bisimularity </S>",
    "<S> is established , which makes an axiomatization of quantum processes possible . </S>",
    "<S> an axiomatization for quantum processes called qacp is designed , which involves not only quantum information , but also classical information and unifies quantum computing and classical computing . </S>",
    "<S> qacp can be used easily and widely for verification of most quantum communication protocols .    </S>",
    "<S> [ firstpage ]    quantum processes ; process algebra ; algebra of communicating processes ; axiomatization </S>"
  ]
}