{
  "article_text": [
    "the concept of `` separation kernel '' was introduced by john rushby in 1981 @xcite to create a secure environment by providing temporal and spatial separation of applications as well as to ensure that there are no unintended channels for information flows between partitions other than those explicitly provided .",
    "separation kernels decouple the verification of the trusted functions in the separated components from the verification of the kernels themselves .",
    "they are often sufficiently small and straightforward to allow formal verification of their correctness .",
    "the concept of separation kernel originates the concept of multiple independent levels of security / safety ( mils ) @xcite .",
    "mils is a high - assurance security architecture based on the concepts of separation @xcite and controlled information flow @xcite .",
    "mils provides means to have several strongly separated partitions on the same physical computer / device and enables existing of different security / safety level components in the same system .",
    "the mils architecture is particularly well suited to embedded systems which must provide guaranteed safety or security properties .",
    "an mils system employs the separation mechanism to maintain the assured data and process separation , and supports enforced security / safety policies by authorizing information flows between system components .",
    "the mils architecture is layered and consists of separation kernels , middleware and applications .",
    "the mils separation kernels are small pieces of software that divide the system into separate partitions where the middleware and applications are located , as shown in fig .",
    "[ fig : mils_arch ] .",
    "the middleware provides an interface to applications or a virtual machine enabling operating systems to be executed within partitions .",
    "the strong separation between partitions both prevents information leakage from one partition to another and provides fault - containment by preventing a fault in one partition from affecting another .",
    "mils also enables communication channels ( unidirectional or bidirectional ) to be selectively configured between partitions .",
    "separation kernels are first applied in embedded systems .",
    "for instance , they have been accepted in the avionics community and are required by arinc 653 @xcite compliant systems .",
    "many implementations of separation kernels for safety and security - critical systems have been developed , such as vxworks mils @xcite , integrity-178b @xcite , lynxsecure @xcite , lynxos-178 @xcite , pikeos @xcite , and open - source implementations , such as pok @xcite and xtratum @xcite .    in safety and security - critical domains , the correctness of separation kernels is significant for the whole system .",
    "formal verification is an rigorous approach to proving or disproving the correctness of the system w.r.t . a certain formal specification or property .",
    "the work in @xcite presents 62 industrial projects using formal methods over 20 years and the effects of formal methods on time , cost and quality of systems .",
    "the successful applications of formal methods in software development are increasing in academic and industries .",
    "security and safety are traditionally governed by well - established standards .    1 .   in the security domain ,",
    "verified security is achieved by common criteria ( cc ) @xcite evaluation , where eal 7 is the highest assurance level .",
    "eal 7 certification demands that formal methods are applied in requirements , functional specification , and high - level design .",
    "the low - level design may be treated semi - formally .",
    "the correspondence between the low - level design and the implementation is usually confirmed in an informal way .",
    "but for the purpose of fully formal verification , the verification chain should reach the implementation level . in 2007 ,",
    "the information assurance directorate of the u.s .",
    "national security agency ( nsa ) published the separation kernel protection profile ( skpp ) @xcite within the framework established by the cc @xcite .",
    "skpp is a security requirements specification for separation kernels .",
    "skpp mandates formal methods application to demonstrate the correspondence between security policies and the functional specification of separation kernels . 2 .",
    "in the safety domain , safety of software deployed in airborne systems is governed by rtca do-178b @xcite , where level a is the highest level .",
    "the new version do-178c @xcite was published in 2011 to replace do-178b .",
    "the technology supplements of do-178c recommend formal methods application to complement testing .",
    "although most of commercial products of separation kernels have been certified through do-178b level a and cc , we only find two cc eal 7 certified separation kernels , i.e. , lynxsecure and the aamp7 g microprocessor @xcite ( a separation kernel implemented as hardware ) . without fully verification , the correctness of the separation kernels can not be fully assured .",
    "many efforts have been paid on achieving verified separation kernels in this decade , such as formal verification of sysgo pikeos @xcite , integrity-178b kernel @xcite , ed ( embedded devices ) separation kernel of naval research laboratory @xcite , and honeywell deos @xcite . using logic reduction to create high dependable and safety - critical software was one of 10 breakthrough technologies selected by mit technology review in 2011 @xcite .",
    "they reported the l4.verified project in nicta ( national ict australia ) .",
    "the sel4 ( secure embedded l4 ) micro - kernel , which comprises 8,700 lines of c code and 600 lines of assembler code , is fully formally verified by the isabelle / hol theorem prover @xcite .",
    "they found 160 bugs in the c code in total , 16 of which are found during testing and 144 bugs during the c verification phase .",
    "this work provides successful experiences for formal verification of separation kernels and proves the feasibility of fully formal verification on small kernels .",
    "we could find a survey on formal verification of micro - kernels of general purpose operating systems @xcite , but a survey of separation kernel verification for safety and security - critical systems does not exist in the literature to date .",
    "considering that the correctness of separation kernels is crucial for safety and security - critical systems , this survey covers the research work on formal specification and verification of separation kernels ever since 2000 .",
    "we outline them in high - level including formal specification , models , and verification approaches . by comparing and discussing research work in detail",
    ", this survey aims at proving an useful reference for separation kernel verification projects .    in the next section ,",
    "we first introduce the concept of separation kernels and compare it to other types of kernels to clarity the relationship . in section [ sec : verify ] , literatures on formal specification and verification of separation kernels are surveyed including three categories : formalization of security policies and properties , formal specification and model of separation kernels , and formal verification of separation kernels . in section [ sec : summary ] , we summarize research work by detailed comparison and discussion .",
    "finally , we conclude this paper in section [ sec : conclude ] .",
    "this section first introduces the concept of separation kernel , and then gives the comparisons among different kernels such security kernels , partition kernels and hypervisors .",
    "separation kernel is a type of security kernels @xcite to simulate a distributed environment .",
    "separation kernels are proposed as a solution to develop and verify the large and complex security kernels that are intended to `` provide multilevel secure operation on general - purpose multi - user systems . ''",
    "`` the task of a separation kernel is to create an environment which is indistinguishable from that provided by a physically distributed system : it must appear as if each regime is a separate , isolated machine and that information can only flow from one machine to another along known external communication lines .",
    "one of the properties we must prove of a separation kernel , therefore , is that there are no channels for information flow between regimes other than those explicitly provided .",
    "@xcite '' based on separation kernels , the system security is archived partially through physical separation of individual components and mediation of trusted functions performed within some components .",
    "separation kernels decouple the verification of components from the kernels themselves .",
    "separation kernels provide their hosted software applications high - assurance partitioning and controlled information flow that are both tamperproof and non - bypassable @xcite .",
    "untrusted software in one partition may contain malicious code that attacks other partitions and separation kernels .",
    "kernels in general purpose operating systems usually can not represent these security policies and can not provide adequate protection against these attacks . in 2007 , the information assurance directorate of the u.s .",
    "national security agency ( nsa ) published the skpp @xcite to describe , in cc @xcite parlance , a class of modern products that provide the foundational properties of rushby s conceptual separation kernel .",
    "the skpp defines separation kernels as `` hardware and/or firmware and/or software mechanisms whose primary function is to establish , isolate and separate multiple partitions and control information flow between the subjects and exported resources allocated to those partitions . ''    unlike traditional operating systems services such as device drivers , file systems , network stacks , etc . , separation kernels provide very specific functionalities including enforcing data separation and information flow controls within a single microprocessor and providing both time and space partitioning .",
    "the security properties that must be enforced in separation kernels are relative simple .",
    "the security requirements for mils include four foundational security properties @xcite :    * data separation * : each partition is implemented as a separated resource .",
    "applications in one partition can neither change applications or private data of other partitions nor command the private devices or actuators in other partitions . this property is also known as `` data isolation '' .",
    "* information flow security * : information flows from one partition to others are from an authenticated source to authenticated recipients ; the source of information is authenticated to the recipients .",
    "this property is also known as `` control of information flow '' .",
    "* temporal separation * : it allows different components to share the same physical resource in different time slices .",
    "a resource is dedicated to one component for a period , then scrubbed clean and allocated to another component and so on .",
    "services received from shared resources by applications in one partition can not be affected by others .",
    "this property is also known as `` periods processing '' .    * fault isolation * : damage is limited by preventing a failure in one partition from cascading to any other partition .",
    "the properties of data separation , information flow security and fault isolation are all spatial properties .",
    "they are collectively called `` spatial separation '' properties .",
    "the data separation requires that memory address spaces / objects of a partition must be completely independent with other partitions . the information flow security is a modification of data separation .",
    "pure data separation is not practical and separation kernels define authorized communication channels between partitions for inter - partition communication .",
    "pure data isolation is permitted to be violated only through these channels .",
    "the consequences of a fault or security breach in one partition are limited by the data separation mechanisms .",
    "a faulty process in one partition does not affect processes in other partitions because addresses spaces of partitions are separated .",
    "separation kernels allow partitions to cause information flows , each of which comprises a flow between partitions .",
    "the allowed inter - partition information flows can be modeled as a `` partition flow matrix '' whose entries indicate the mode of the flow , such as read and write .",
    "the `` flow '' rules are passed to separation kernels in the form of configuration data interpreted during kernel initialization .",
    "for instance , a notional set of allowable information flows between partitions is illustrated in fig .",
    "[ fig : mils_arch ] .    _",
    "neat _ are famous properties considered for separation kernels .",
    "neat is the abbreviation of non - bypassable , evaluatable , always invoked and tamper proof @xcite :    * non - bypassable * : security functions can not be circumvented .",
    "it means that a component can not use another communication path , including lower - level mechanisms , to bypass the security monitor .",
    "* evaluatable * : security functions are small and simple enough to enable rigorous proof of correctness through mathematical verification .",
    "it means that components are modular , well designed , well specified , well implemented , small , and low complex , etc .    *",
    "always - invoked * : security functions are always invoked .",
    "it means each access / message is checked by the appropriate security monitors .",
    "security monitors check on not only the first access but also all subsequent accesses / messages .    * tamper proof * : the system controls `` modify '' rights to the security monitor code , configuration and data .",
    "it prevents unauthorized changes , either by subversive or poorly written code .    these concepts , although intuitive , are not necessarily easy to be formalised and proved directly .",
    "separation kernels are usually verified by proving properties of data separation , temporal separation , information flow security and fault isolation .",
    "the concern of the original separation kernel proposed by john rushby @xcite is security .",
    "the reason that the concept is first applied in embedded systems , in particular the avionic systems , is the acceptance of integrated modular avionics ( i m a ) @xcite in 1990s .",
    "i m a is the integration of physically separated functions on common hardware platforms . the integration is furthermore supported by the trend of more powerful multicore computers .",
    "the i m a can decrease the weight and power consumption of currently implemented systems while concurrently create new space for new functional components such as on - board entertainment .",
    "current embedded systems in avionics are already built in an i m a fashion .",
    "a major foundation of the i m a concept for operating systems and computing platforms is the separation of computer system resources into isolated computation compartments - called _ partitions_. computations in partitions have to run concurrently in a way that any unintended interference and interaction between them are impossible .",
    "thus , a partition is considered as a process with guaranteed processing performance and system resources .",
    "it is very similar to separation kernels .",
    "therefore , the concept of separation kernel is adopted in avionics as the kernel of partitioning operating systems for i m a .",
    "separation kernels in the community are also called `` partitioning kernels '' @xcite .",
    "the arinc 653 standard @xcite defines the standard interfaces of partitioning kernels . besides the security , partitioning kernels concern safety , which means a failure in one partition must not propagate to cause failure in other partitions .",
    "there are a set of kernel concepts similar to the separation kernel , which need to be clarified here .",
    "they are security kernel , partitioning kernel , and hypervisor .",
    "* security kernel @xcite    security kernels manage hardware resources , from which they create , export and protect abstractions ( e.g. , subjects / processes and memory objects ) and related operations .",
    "security kernels bind internal sensitivity labels to exported resources and mediate access by subjects to other resources according to a partial ordering of the labels defined in an internal policy module .",
    "separation kernels extend security kernels by _",
    "partitions_. separation kernels map the set of exported resources into partitions .",
    "resources in a given partition are treated equivalently w.r.t . the inter - partition flow policy .",
    "subjects in one partition are allowed to access resources in another partition .",
    "separation kernels enforce the separation of partitions and allow ( subjects in those ) partitions to cause flows , each of which , when projected to partition space , comprises a flow between partitions @xcite .    * partitioning kernel @xcite    partitioning kernels concern safety separation largely based on an arinc 653-style separation scheme . besides the information flow control , partitioning kernels concentrate on spatial and temporal partitioning . partitioning kernels",
    "provide a reliable protection mechanism for the integration of different application subsystems .",
    "they split a system into execution spaces that prohibit unintended interference of different application subsystems .",
    "reliable protection in both spatial domain and temporal domain is particularly relevant for systems where the co - existence of safety - critical and non safety - critical application subsystems shall be supported . partitioning on node level enforces",
    "fault containment , and thereby enables simplified replacement / update and increases reusability of software components .    in order to provide an execution environment that allows the execution of software components without unintended interference , temporal and spatial partitioning for both computational and communication resources are required .",
    "spatial partitioning ensures that a software component can not alter the code or private data of other software components .",
    "temporal partitioning ensures that a software component can not affect the ability of other software components to access shared resources . for the purpose of spatial partitioning , system memory is divided among partitions in a fixed manner .",
    "the idea is to take a processor to pretend several processors by completely isolating the subsystems .",
    "hard partitions are set up for each part of the system , and each partition has certain amount of memory allocated to it .",
    "each partition is forever limited to its initial fixed memory allocation , which can neither be increased nor decreased after system initialization .",
    "for the purpose of temporal partitioning , partitioning kernels run in a static style .",
    "they typically support a static table - driven scheduling approach @xcite that is very well suited for safety - critical and hard real - time systems since its static nature makes it possible to check the feasibility of the scheduling in advance .",
    "typical partitioning kernels are windriver vxworks 653 , greenhill integrity-178b , lynxos-178 , and pikeos .",
    "all these products are compliant with arinc 653 . in the following sections ,",
    "the notion `` separation kernel '' covers the original concept @xcite and the concept of partitioning kernel .",
    "* hypervisor @xcite    hypervisors or virtual machine monitors ( vmms ) provide a software virtualization environment in which other software , including operating systems , can run with the appearance of full access to the underlying system hardware , but in fact such access is under the complete control of hypervisors . in general",
    ", hypervisors are classified into two types @xcite : type 1 ( or native , bare metal ) hypervisor and type 2 ( or hosted ) hypervisor .",
    "hypervisors virtualize the hardware ( processor , memory , devices , etc . ) for hosted operating systems . therefore , general purpose operating systems can run on top of hypervisors directly .",
    "similar to the type i hypervisors , separation kernels achieve isolation of resources in different partitions by virtualization of shared resources , such that each partition is assigned as a set of resources that appear to be entirely its own . but",
    "traditional hypervisors are specifically designed for secure separation , and typically do not provide services for explicit memory sharing . moreover ,",
    "traditional hypervisors support interprocess communication only via emulated communication devices .",
    "hypervisors permit the deployment of legacy applications ( within a vm ) and new applications on the same platform . whilst separation kernels typically only support specific apis ( e.g. , arinc 653 ) for hosted applications .",
    "hypervisors have been introduced into embedded systems , so called embedded hypervisors in i m a systems .",
    "the application of embedded hypervisors are increasing .",
    "pikeos , wind river hypervisor and lynuxworks s lynxsecure are typical embedded hypervisors for safety and security - critical systems .    because of the overlapped functionalities between separation kernels and hypervisors , we also survey typical verification work of embedded hypervisors in this paper .",
    "due to the importance of security policies in mils architectures , we highlight typical definitions of security policies supported by separation kernels . in this section ,",
    "we first survey the formalizations of security policies and properties .",
    "then , we present formal specification and models of separation kernels . finally , we survey the formal verification of separation kernels .",
    "firstly , we distinguish the concepts of `` security policy '' , `` security property '' and `` security model '' . security policies or properties",
    "define security requirements of separation kernels .",
    "separation kernels are represented by security models @xcite , which are the abstraction of concrete kernel implementations .",
    "thus , security models of separation kernels are the formal models .",
    "security policies and properties are formulas represented in first- or high - order logics .",
    "preservation of them on security models means the security of separation kernels .",
    "this subsection presents the formalizations of security policies ( e.g. , mils and skpp ) and security properties ( e.g. , data separation , information flow security , and temporal separation ) .",
    "a formal specification of what the system allows , needs and guards against is called a formal policy .",
    "two typical security policies for mils architecture based on separation kernels are the inter - partition flow policy ( ipfp ) and the partitioned information flow policy ( pifp ) .",
    "the inter - partition flow policy is a sort of security policies for original separation kernel @xcite on mils .",
    "separation kernels map the set of exported resources into partitions : @xmath0 .",
    "the inter - partition flow policy @xcite can be expressed abstractly in a partition flow matrix , whose entries indicate the mode of the flow , @xmath1 .",
    "the mode indicates the direction of the flow , for instance @xmath2 means that the partition @xmath3 is allowed to write to any resource in @xmath4 .",
    "resources in a given partition are treated equivalently w.r.t . the inter - partition flow policy .",
    "`` skpp specifies the security functional and assurance requirements for a class of separation kernels . unlike those traditional security kernels which perform all trusted functions for a secure operating system , a separation kernel s primary security function is to partition ( viz .",
    "separate ) the subjects and resources of a system into security policy - equivalence classes , and to enforce the rules for authorized information flows between and within partitions .",
    "@xcite '' it mainly addresses security evaluations of separation kernels at eal 6 and eal 7 of cc .",
    "the skpp enforces pifp with requirements at the gross partition level as well as at the granularity of individual subjects and resources .",
    "a subset of the exported resources are active and are commonly referred to as _",
    "subjects_. flows occur between a subject and a resource , and between the subject s partition and the resource s partition , in a direction defined by a _",
    "mode_. in _ read _ mode , the subject is the destination of the flow . in _",
    "write _ mode the subject is the source of the flow . fig .",
    "[ fig : skpp ] illustrates an allocation of toe ( target of evaluation , a concept in cc ) resources .",
    "the resources inside of each rectangle are bound to that partition .",
    "allowed information flows are indicated by the directed arrows .",
    "for instance , subject 2 is allowed to write resource 6 and subject 3 is allowed to read resource 9 . by this policy abstraction ,",
    "subjects in a partition can have different access rights to resources in another partition .",
    "resources 7 , 8 and 10 illustrate this finer grained control of information flows .",
    "skpp defines a partition - to - partition policy ( @xmath5 ) and a subject - to - resource ( @xmath6 ) policy ( also known as a",
    "_ least privilege policy _ ) .",
    "flow rules , p2p and s2r , are associated with each policy :    @xmath7 \\\\ & p2p : [ sub\\_p : partition , res\\_p : partition , m : mode ] \\end{aligned}\\ ] ]    the pifp policy of skpp is :    @xmath8 ) = \\\\ & \\begin{aligned } s2&r_p \\in sys.policy \\rightarrow   ( \\\\ & s2r(s , r).m = allow \\",
    "& ( s2r(s , r).m = null \\wedge p2p(s.p , r.p).m = allow ) \\\\",
    "\\end{aligned}\\\\ & ) \\ \\wedge \\",
    "p2p_p \\in sys.policy \\rightarrow p2p(s.p , r.p).m = allow \\\\",
    "\\end{aligned}\\ ] ]    where @xmath9 indicates which policies are configured to be active . in the @xmath6 policy ,",
    "the @xmath10 rules override the @xmath11 rules everywhere except there is a null entry in the @xmath10 rule set .",
    "note that the @xmath6 policy is defined to reference the @xmath11 values regardless of whether the @xmath5 policy itself is active .",
    "the separation kernels of vxworks mils , lynxsecure , integrity-178b and pikeos meet the security functionalities and security assurance requirements in skpp .",
    "data separation requires that resources of a partition must be completely independent of other partitions .",
    "* mask separation properties    the dod of usa set out in 1997 to formally construct a separation kernel , a mathematically analyzed separation kernel ( mask ) @xcite , which has been used by motorola on its smart cards .",
    "mask regulates communication between processes based on separation policies .",
    "the separation policies of mask include two separation axioms : the _ communication policy _ and an anonymous policy . in the abstraction of the mask separation kernel , _ multiple cell abstraction ( mca ) _",
    "describes the system .",
    "the _ init _ and _ next _ operations evolve the system . _ cells _ and _ single cell abstraction ( sca ) _ are domains of execution or a context , which consist of a collection of strands .",
    "each strand is a stream of instructions to be executed when a message is input to a strand of a cell .",
    "the communication policy is as follows .",
    "@xmath12    where @xmath13 determines the sca corresponding to the cellid @xmath14 in the subscript , @xmath15 advances the system state by advancing the cell indicated by the subscript @xmath16 .",
    "the policy states that if the fiber of cell @xmath14 changes as the result of advancing the state of cell @xmath16 , it must be the case that @xmath16 is permitted to communicate with @xmath14 .",
    "the second separation constraint upon cells is as follows .",
    "@xmath17    the policy represents that if an action by cell @xmath16 is going to change the state of cell @xmath14 , the change in the state of @xmath14 depends only on the states of @xmath16 and @xmath14 . in other words ,",
    "the new state of @xmath14 is a function of the previous states of @xmath16 and @xmath14 .    * ed data separation properties    to provide evidence for a cc evaluation of the ed ( embedded devices ) separation kernel to enforce data separation , five subproperties , namely , no - exfiltration , no - infiltration , temporal separation , separation of control , and kernel integrity are proposed to verify the kernel @xcite .",
    "the top - level specification ( tls ) is used to provide a precise and understandable description of the allowed security - relevant external behavior and to make the assumptions on which the tls is explicitly based .",
    "tls is also to provide a formal context and precise vocabulary to define data separation properties . in tls",
    ", the state machine representing the kernel behavior is defined in terms of an input alphabet , a set of states , an initial state and a transform relation describing the allowed state transitions .",
    "the input alphabet contains internal events ( cause the kernel to invoke some process ) and external events ( performed by an external host ) .",
    "the state consists of the i d of a partition processing data , the values of the partition s memory areas and a flag to indicate sanitization of each memory area .",
    "the no - exfiltration property states that data processing in any partition can not influence data stored outside the partition , which is formulated as follows .",
    "@xmath18    where @xmath19 and @xmath20 are states and @xmath20 is the next state of @xmath19 transited by an event @xmath21 in the partition @xmath22 .",
    "@xmath23 is the internal event set of the partition @xmath22 .",
    "@xmath24 is the set of external events writing into or clearing the input buffers of the partition @xmath22 .",
    "@xmath25 is the set of external events reading from or clearing the output buffers of the partition @xmath22 . for any memory area @xmath26 of the system ( @xmath27 ) , @xmath26 is a memory area in the partition @xmath22 ( @xmath28 ) , if the value of @xmath26 in state @xmath19 and @xmath20 are not equal .",
    "the no - infiltration property states that data processing in a partition is not influenced by data outside that partition , which is formulated as follows .",
    "@xmath29    the separation of control property states that when data processing is in progress in a partition , no data is being processed in other partitions until processing in the first partition terminates , which is formulated as follows .",
    "@xmath30 where @xmath31 is the i d of the partition that is processing data in state @xmath19 .",
    "the kernel integrity property states when data processing is in progress in a partition , the data stored in the shared memory area do not change , which is formulated as follows .",
    "@xmath32 where @xmath33 is the single shared memory area and contains all programs and data not residing in any memory area of partitions , @xmath34 is the internal event set of the partition @xmath35 .      in the domain of operating systems , state - event based information flow security properties",
    "are often applied @xcite .",
    "we present two major categories of information flow security properties : the gwv policy and noninterference .",
    "* gwv policy    greve , wilding and vanfleet propose the gwv security policy in @xcite to model separation kernels .",
    "the separation axiom of this policy is as follows .",
    "@xmath36    where @xmath37 .",
    "the security policy requires that the effect on an arbitrary memory segment @xmath38 of the execution of one machine step is a function of the set of memory segments that are both allowed to interact with @xmath38 and are associated with the current partition . in this formula , the function @xmath39 extracts the values in a machine state that are associated with a memory segment .",
    "the function @xmath40 takes a list of segments and returns a list of segment values in a machine state .",
    "the function @xmath41 calculates the current partition given a machine state .",
    "the function @xmath42 models one step of computation of the machine state .",
    "it takes a machine state as the argument and returns a machine state that represents the effect of the single step .",
    "the function @xmath43 takes a memory segment name as the argument and returns a list of memory segments that are allowed to affect it .",
    "the function @xmath44 returns names of the memory segments associated with a particular partition .",
    "the detailed information about the meaning of a machine state and the @xmath42 function of states are explained in @xcite .",
    "the gwv security policy has been well known and accepted in industry @xcite .",
    "the pvs formalization of gwv policy has been provided by rushby @xcite .",
    "the gwv policy is changed / extended in @xcite .",
    "the @xmath43 function is weakened by allowing communication between segments of the same partition in @xcite as follows .",
    "@xmath45    the @xmath43 function is extended by a restriction considering partition names , @xmath46 , in @xcite .",
    "in addition , the gwv policy is extended by the @xmath47 .",
    "a subject is an active entity which operates on segments of a gwv partition .",
    "the extended gwv policy is as follows .",
    "@xmath48    where @xmath49 .",
    "the extended gwv policy has been applied to formally specify the pikeos @xcite .",
    "the gwv policy is only applicable to a class of systems in which strict temporal partitioning is utilized and kernel state can not be influenced by execution of code within partitions .",
    "the gwv theorem has been shown to hold for the aamp7 g s hardware - based separation kernel @xcite .",
    "the original gwv theorem is only applicable to such strict static schedulers .",
    "the gwv policy is sound but not complete @xcite . in gwv",
    ", @xmath43 function only expresses the direct interaction between segments .",
    "it is extended by multiple active `` agent '' in gwvr1 @xcite that moving data from one segment to another segment is under control of one agent .",
    "gwvr1 is similar to the @xmath50 function in @xcite . for more dynamic models , a more general gwv theorem , gwvr2 @xcite ,",
    "uses a more generalized influence between segments , the information flow graph , to specify the formal security policy .",
    "the information flow graph enables system analysis and can be used as foundation for application - level policies .",
    "the gwvr2 is used to formal analysis for the integrity-178b separation kernel @xcite .",
    "more theoretical discussion of gwvr1 and gwvr2 is in @xcite .",
    "* noninterference    the concept of noninterference is introduced in @xcite to provide a formal foundation for the specification and analysis of security policies and the mechanisms to enforce them .",
    "the intuitive meaning of noninterference is that a security domain @xmath51 can not interfere with a domain @xmath52 if no action performed by @xmath51 can influence subsequent outputs seen by @xmath52 .",
    "the system is divided into a number of _ domains _ , and the allowed information flows between domains are specified by means of an information flow policy @xmath53 , such that @xmath54 if information is allowed to flow from a domain @xmath51 to a domain @xmath52 .",
    "the standard noninterference is too strong and not able to model channel - control policies .",
    "thus , the intransitive noninterference is introduced , which uses a @xmath55 function to identify those actions in an action sequence @xmath56 that their domain may influence the domain @xmath51 .",
    "rushby @xcite gives a standard definition of intransitive noninterference as follows .",
    "@xmath57    where @xmath58 , defined based on @xmath55 , removes the actions from the action sequence @xmath56 that their domains can not interfere with @xmath51 directly or indirectly .",
    "a system is secure for the policy @xmath53 , if for each domain @xmath51 and each action sequence @xmath56 , the final states of executing @xmath56 and @xmath59 ( @xmath59 is the result of removing actions that their domain can not influence @xmath51 ) from the initial state @xmath60 are observed equivalently for @xmath51 .",
    "the intransitive noninterference is usually chosen to formally verify information flow security of general purpose operating systems or separation kernels @xcite .",
    "classical noninterference is concerned with the secrets that events introduce in the system state and that are possibly observed via outputs @xcite .",
    "although noninterference is adequate for some sorts of applications , there are many others considering the prevention of secret information leakage out of the domains it is intended to be confined to .",
    "language - based information flow security typically considers information leakage and has two domains : _ high _ and _ low_. it is generalized to arbitrary multi - domain policies in @xcite as a new notion _ nonleakage_. as pointed out in @xcite that it is important to combine language - based and state - event based security , and a new notion _ noninfluence _ which is combination of nonleakage with traditional noninterference @xcite is proposed in @xcite .",
    "a system is nonleaking if and only if for any states @xmath19 and @xmath61 and a domain @xmath51 , the final states after executing any action sequence @xmath56 in @xmath19 and @xmath61 are indistinguishable for @xmath51 if @xmath19 and @xmath61 are indistinguishable for all domains ( @xmath55 ) that may interfere with @xmath51 directly or indirectly during the execution of @xmath56 .",
    "the nonleakage is defined as follows .",
    "@xmath62    combination of noninterference and nonleakage introduces the notion _ noninfluence _ as follows .",
    "@xmath63    the _ nonleakage _ and _ noninfluence _ are applied in formal verification of sel4 separation kernel in @xcite .",
    "temporal separation usually concerns sanitization / period processing . a sanitization property ( called temporal separation ) on ed separation kernel",
    "is defined in @xcite as follows to guarantee that the data areas in a partition are clear when the system is not processing data in that partition .",
    "@xmath64    where @xmath31 is the i d of a partition that is processing data in state @xmath19 .",
    "when @xmath31 is 0 , it means that no data processing in any partition is in progress .",
    "@xmath65 means that all data areas in the partition @xmath35 are clear .",
    "satisfaction of this property implies that no data stored in the partition during one configuration of this partition can remain in any memory area of a later configuration .      as presented in previous subsections , security policies and properties for separation kernels",
    "have been studied in literature .",
    "they are formalized in different specification and verification systems , such as acl2 , isabelle / hol , and pvs .",
    "formal comparison of them to clarify the relationships can establish a substantial foundation for formal specification and verification of separation kernels .    in @xcite ,",
    "the notions of noninterference , nonleakage , and noninfluence are defined based on the same state machine and formally compared .",
    "the author states that noninfluence is semantically equal to the conjunction of noninterference and nonleakage .    in @xcite , the gwv policy and rushby s noninterference",
    "are formally compared in detail .",
    "the authors present a mapping between the objects and relations of the two models .",
    "the conclusion is that gwv is stronger than rushby s noninterference , i.e. , all systems satisfying gwv s separation also satisfy rushby s noninterference .      the formal specification and models of separation kernels present a significant contribution to formal verification . here",
    ", we only discuss the models for formally developing separation kernels .",
    "models targeted at formal verification are surveyed in the next subsection . in formal development , the specification may be used as a guide while the concrete implementation is developed during the design process .",
    "we present typical specification and models of separation kernels in turn .",
    "* craig s z model of separation kernel    following the earlier book on modeling operating system kernels @xcite that shows it is possible and relatively easy to specify small kernels and refine them to the running code , craig @xcite concerns entirely with the specification , design and refinement in z @xcite to executable code of operating system kernels , one of which is a separation kernel , to demonstrate that the refinement of formal specification of kernels is possible and quite tractable .",
    "craig provides a substantial work on a formal separation kernel model which delivers the majority of separation kernel requirements and functionalities @xcite , such as ( 1 ) process table for basic process management ; ( 2 ) process spatial separation in terms of non - overlapping address space allocation ; ( 3 ) communication channels by the means of an asynchronous kernel - based messaging system ; and ( 4 ) process temporal separation using a non - preemptive scheduler and the messaging system .",
    "the formal specification is relatively complete and the refinements reach the level at which executable code in a language such as c or ada can be read off from the z specification . separation kernels frequently need threads / tasks inside each partition . in the craig s model , it makes no mention of threads .",
    "it is considered that threads can be included by simple modifications to the specification .",
    "hardware is not the emphasis in their work .",
    "the intel ia32/64 hardware operations at a level of detail are specified in the model , which are adequate for the production of the tiny amounts of assembly code required to complete the kernel . finally ,",
    "all of the work in their book is done by hand including the specification and proofs .",
    "* z model of separation kernel in verified software project    formalization of separation kernels @xcite is part of a pilot project in modeling os kernels within an international grand challenge ( gc ) in verified software @xcite .",
    "the objective is to provide proofs of the correctness of a formal specification and design of separation kernels .",
    "they start from craig s formal model @xcite and take into account separation kernel requirements in @xcite and skpp @xcite .",
    "the craig s original model is typeset by hand and includes several manual proofs .",
    "the specification is augmented in @xcite using z notation @xcite by mechanising it in the z / eves theorem prover .",
    "all proofs in @xcite are also declared and proved using the z / eves prover . as a result , syntax errors in craig s specification are eliminated , model feasibility and api robustness are verified , and missing invariants and new security properties to guarantee correct operations are found .",
    "the upgraded formal model is fully proved mechanically .",
    "the upgraded formal model focuses on the core data structures within a separation kernel , such as the process table , queue and scheduler .",
    "craig s scheduler model is significantly improved .",
    "certain properties about the scheduler ( e.g. , the scheduler deadlock analysis ) are able to be formulated and proved by translating verbal requirements to mathematical invariants and improving design of the specification .",
    "* b model of a secure partitioning kernel    the b method @xcite has been used for the formal development of a secure partitioning kernel ( spk ) in the critical software company @xcite .",
    "the novelty of this work in the formal methods community is an extra challenge to apply the b method outside its usual application domains ( railway and automotive ) .    initially ,",
    "a complete development of a high - level model of the spk is built .",
    "the high - level model constitutes a complete architectural design of the system , and is animated and validated by prob @xcite .",
    "abstract model of spk in high - level consists of memory management , scheduling , kernel communication , flow policy , and clock .",
    "the validated high - level model can be refined for a completely and formally developed spk . as a first step , the pifp policy , which is part of the spk , is refined to a level from where c code can be automatically generated .",
    "the refinement process that leads to the implementation of the pifp is carried out with the assistance of atelier b. finally , an open source micro kernel , prex , is adopted to integrate the proposed pifp .",
    "they demonstrate the feasibility of applying formal methods only to parts of the system .",
    "* b model of os - k separation kernel    a separation kernel based operating system , os - k @xcite , has been designed for use in secure embedded systems by applying formal methods . the separation kernel layer and the additional os services on top of it",
    "are prototyped on the intel ia-32 architecture .",
    "the separation kernel is designed using two formal methods : the b method and the spin model checker .",
    "the b method is adopted as formal design , and spin for verification via model checking .",
    "the separation kernel layer provides several functions : partition management , inter - partition communication , access control for inter - partition communication , memory management , timer management , processor scheduling , i / o interrupt synchronization for device driver operation , and interrupt handling .",
    "the separation kernel provides the access - control function for inter - partition communication , which provides the only linkage between separated partitions . in the ia-32 architecture based implementation , two memory - protection features of the ia-32 architecture",
    "are utilized : the ring protection feature is used to protect the memory area of the separation kernel against access by the processes and the partition oss ; each partition is assigned a local descriptor table in which the partition segments are registered to isolate the partition memory spaces .",
    "the b models are also refined to an implementation by converting the non - deterministic sections to sequential processing .",
    "proof obligations of their b model are generated and verified in b4free tools .",
    "there are more than 2,700 proof obligations and almost all of them are proved automatically in b4free tools .",
    "* event - b model of arinc 653    the kernel interface defines operating system services provided to applications .",
    "formalization of the kernel interface could support formally modeling and verification of application software on top of separation kernels .",
    "arinc 653 @xcite aims at providing a standardized interface between separation kernels and application software , as well as a set of functionalities to improve safety and certification process of safety - critical systems .",
    "therefore , formalization and verification of arinc 653 has been considered in recent years . in @xcite , system functionality and",
    "all of 57 services specified in arinc 653 part 1 are formalized using event - b @xcite .",
    "they use the refinement structure in event - b to formalize arinc 653 in a stepwise manner and a semi - automatic translation from service requirements of arinc 653 into the low - level specification .",
    "the event - b specification has 2,700 loc .",
    "a set of safety properties are defined as invariants in event - b and verified on the specification .    *",
    "formal api specification of pikeos separation kernel    aiming at a precise model of pikeos and a precise formulation of the pikeos security policy , the euro - mils project releases a new generic specification of separation kernels  controlled interruptible separation kernel ( cisk ) @xcite .",
    "this specification contains several facets that are useful to implement separation kernels , such as interrupts , context switches between domains , and control .",
    "the initial specification is close to a mealy machine .",
    "the second - level specification adds the notion of separation and security policy . at the third - level , `` interruptible '' is introduced and calls to the kernel are no longer considered atomic .",
    "the final - level specification provides an interpretation of control that allows atomic kernel actions to be aborted or delayed .",
    "the specification is rich in detail , making it suitable for formal verification of realistic and industrial systems .",
    "the specification and proofs have been formalized in isabelle / hol . based on the cisk specification ,",
    "the formal api specification of the pikeos separation kernel has been provided aiming at the certification of pikeos up to cc eal7 @xcite .",
    "the formal api specification covers the ipc , memory , file provider , port , and event , etc .      as introduced in section [ sec :",
    "bg ] , the typical properties of separation kernels are data separation , information flow security , fault isolation , and temporal separation .",
    "the first three properties are collectively called `` spatial separation '' properties . therefore , we categorize formal verification work on separation kernels into spatial and temporal separation verification in this subsection",
    ".      most related work on formally verifying separation kernels consider both the data separation and information flow security . here",
    ", we present significant research work of spatial separation verification . due to the importance of data separation and information flow security properties for separation kernels",
    ", we finally highlight a general verification approach for these properties .",
    "* ed separation kenrel    a novel and practical approach to verify security of separation kernels code which substantially reduces the cost of verification is presented in @xcite .",
    "the objective of this project is to provide evidence for a cc evaluation of the ed ( embedded devices ) separation kernel to enforce data separation .",
    "the ed separation kernel contains 3,000 lines of c and assembly code .",
    "the code verification process consists of five steps : ( 1 ) producing a top - level specification ( tls ) using a state machine model .",
    "( 2 ) formally expressing the security property as the data separation property of the state machine model .",
    "( 3 ) formally verifying that the tls enforces data separation in tame ( timed automata modeling environment ) , a front end to the pvs theorem prover . ( 4 ) partitioning the code into three categories , in which it is identified as `` other code '' such code not corresponding to any behavior defined by the tls ; `` other code '' is ignored in the verification , therefore greatly simplifying the process .",
    "( 5 ) demonstrating that the kernel code conforms to the tls .",
    "they define two mapping functions to establish correspondence between the tls and kernel code .",
    "a mapping establishes correspondence between concrete states in the code and abstract states in the tls .",
    "another maps the preconditions and postconditions of the tls events to the preconditions and postconditions that annotate the corresponding event code .",
    "they adopt the natural language representation of the tls and the size of the tls is very small , which only takes 15 pages .",
    "it can simplify communication with the other stakeholders , changing the specification when the kernel behavior changed , translating the specification into tame and proving that the tls enforced data separation .",
    "they use 2.5 weeks to formulate the tls and the data separation property , 3.5 weeks to produce the tame model and formally verify that the tls enforces data separation , and 5 weeks to establish conformance between code and tls .",
    "the cost of formal verification is much lower than the verification effort on sel4 kernel @xcite where they translated almost all of source code to the isabelle / hol description .",
    "* aamp7 g microprocessor    the aamp7 g and its previous version aamp7 microprocessor of rockwell collins are hardware implementation of separation kernels . the aamp7 and aamp7 g design is mathematically proved to achieve mils using formal methods techniques as specified by eal 7 of cc @xcite .",
    "the aamp7 g provides a novel architectural feature , _ intrinsic partitioning _ , that enables the microprocessor to enforce an explicit communication policy between applications .",
    "rockwell collins has performed a formal verification of the aamp7 g partitioning system using the acl2 theorem prover .",
    "they first establish a formal security specification , aamp7 g gwv theorem , which is the intrinsic partitioning separation theorem @xcite .",
    "this theorem is an instantiation of gwv policy @xcite .",
    "then , they produce an abstract model of the aamp7 g s partitioning system and a low - level model that directly corresponds with the aamp7 g microcode . in the low - level model ,",
    "each line of microcode is modeled by how it updates the state of the partition - relevant machine .",
    "the entire aamp7 g model is approximately 3,000 lines of acl2 definitions .",
    "the aamp7 g gwv theorem is proved using acl2 .",
    "the proofs are decomposed into three main pieces : proofs to validate the correctness theorem , proofs to show that the abstract model meets the security specification , and proofs to show that the low - level model corresponds with the abstract model .",
    "the aamp7 g gwv theorem is shown as follows .",
    "the theorem involves abstract and functional ( low - level ) models of the aamp7 g .",
    "the theorem is about the behavior of the functional model , but they express the theorem about an abstract model of the aamp7 g that has been `` lifted '' from a functional model . in this way , the expression of the theorem is simplified .",
    "moreover , the behavior of the most concrete model of the aamp7 g is also presented to ensure that the theorem is about the `` real '' aamp7 g .    &",
    "secure_config(spex ) + & spex_hyp(spex , fun_st1 ) + & spex_hyp(spex , fun_st2 ) +    &    @xmath66 @xmath67    where @xmath68 , @xmath69 and @xmath70 .    *",
    "pikeos    pikeos @xcite is a powerful and efficient para - virtualization real - time operating system based on a separation microkernel .",
    "the verisoft xt project has an avionics subproject @xcite to prove functional correctness of all system calls of the pikeos at the source code level using the vcc verification tool .",
    "they propose a simulation theorem between a top - level abstract model and the system consisting of the kernel and user programs running in alternation on the real machine .",
    "they identify the correctness properties of all components in the trace that are needed for the overall correctness proofs of the microkernel .",
    "memory separation of the pikeos separation kernel has been formally verified on the source code level @xcite also using vcc .",
    "the desired memory separation property is easy to describe informally but infeasible to define directly in the specification language .",
    "therefore , they break down the high - level , non - functional requirement into functional memory manager properties that can be presented as a set of assertions for function contracts .    the gwv property has been applied to verify the pikeos separation kernel in @xcite .",
    "they extend the gvw property with _ subjects _ to resolve the problem that the same current partition can have different active tasks .",
    "they present a modular way to apply the gwv property for the two layers of pikeos . in the micro - kernel model ,",
    "the major abstractions are tasks and threads , which are corresponding to subjects and partitions in the extended gwv theorem respectively .",
    "the _ segment _ is instantiated as the physical address in the memory . in the separation kernel model , they add `` partitions '' and separated the tasks of micro - kernel model and physical address of the memory into different partitions .",
    "the modular and reusable application of the security policy reduces the number of formal models and hence the number of artefacts to certify .",
    "all models are formalised in isabelle / hol .",
    "* integrity-178b    the integrity-178b separation kernel of green hills software was formally analysed and obtained a cc certificate at the eal 6 + level on september 1 , 2008 @xcite . the integrity-178b evaluation requirements for eal 6 + specify five elements that are either formal or semi - formal : ( 1 ) the security policy model which is a formal specification of the relevant security properties of the system ; ( 2 ) functional specification which is a formal representation of the functional interfaces of the system ; ( 3 ) high - level design which is a semi - formal and abstract representation of the system ; ( 4 ) low - level design which is a semi - formal , but detailed representation of the system ; ( 5 ) representation correspondence to demonstrate the correspondence between pairs of the above four elements .",
    "considering that the original gwv theorem @xcite is only applicable to strict static kernels , they adopt the gwvr2 @xcite theorem as the security policy model because integrity-178b s scheduling model is much more dynamic .",
    "the gwvr2 theorem is @xmath71 .",
    "this theorem means that the @xmath72 and @xmath73 produce identical results for all inputs of interest .",
    "it implies that the graph used by @xmath73 completely captures information flows of the system .",
    "the system is modeled as a state transition system that receives the current state of the system as inputs , as well as any external inputs , and produces a new system state , as well as any external outputs .",
    "this state transition is expressed as @xmath74 , where the external inputs and outputs are also contained in the system state structure .",
    "the hardware - independent portion of the integrity-178b kernel is implemented in c code and formally modeled in acl2 which has one - to - one correspondence with the c source code .",
    "this simplifies the `` code - to - spec '' review during cc certification .",
    "the hardware - dependent code is not modeled and is subjected to a rigorous by hand review . in order to prove the gwvr2 theorem on the acl2 model , they first prove two lemmas w.r.t . each function in this model .",
    "the _ workhorse _ lemma states that the function s graph sufficiently captures the dependencies in the data flows of the function .",
    "the _ clearp _",
    "lemma states that all of the changes to state performed by a function are captured by the function s graph .",
    "once these two lemmas are proved , it is straightforward to prove the gwvr2 theorem .    *",
    "prosper separation kernel    the information flow security for a simple arm - based separation kernel , prosper , has been formally verified by proving the bisimulation between the abstraction specification and the kernel binary code , where communication between partitions is explicit and information flow is analyzed in presence of such communication channels @xcite .",
    "the prosper kernel consists of 150 lines of assembly code and 600 lines of c code .",
    "their system model only considers two partitions that are respectively executed on two separate special armv7 machines communicating via asynchronous message passing , a logical component , and a shared timer .",
    "the goal of verification is to show that there is no way for the partitions to affect each other directly or indirectly , except through the communication channel .",
    "it is assured by that a partition can not access the memory or register contents , by reading or writing , of the other partition , except that the communication is realized by explicit usage of the intended channel .",
    "the isolation theorem of their kernel is as follows .    @xmath75    where @xmath76 indicates the partition , @xmath77 and @xmath78 are initial memories of the two partitions respectively .",
    "@xmath79 ( real system ) indicates the implementation and @xmath35 ( ideal system ) is the abstraction model .",
    "the theorem means that the traces of each partition in abstraction and implementation layers are equivalent .",
    "the theorem is reduced to subsidiary properties : isolation lemmas of arm and user / handler .",
    "their three arm lemmas concerning the arm instruction set architecture assure that ( 1 ) behavior of the active partition is influenced only by those resources allowed to do so if an arm machine executes in user mode in a memory protected configuration , ( 2 ) the non - accessible resources not allocated to the active partition in user mode are not modified by the execution of this partition , ( 3 ) if an arm machine switches from a state in user mode to another in privileged mode , the conditions for the execution of the handler are prepared properly .",
    "their models are built on top of the cambridge arm hol4 model which is extended by a simple mmu unit .",
    "the isolation lemmas of arm are proved using the arm - prover , which is developed for the purpose in hol4 .",
    "the model of the ideal system , the formalization of the verification procedure , and the proofs of the theorems consist of 21k lines of hol4 code . during verification process ,",
    "several bugs are identified and fixed , such as the registers are not sanitized after the bootstrap , some of the execution flags are not correctly restored during the context switch .",
    "they verify the entire kernel at machine code level and avoid reliance on a c compiler .",
    "this approach can transparently verify code that mix c and assembly .",
    "* sel4 separation kernel    the sel4 microkernel , which is fully and formally verified in nicta @xcite , is extended as a separation kernel for security - critical domains in @xcite .",
    "the information flow security property is formally proved @xcite based on the results of verifying sel4 kernel @xcite .    to provide a separation kernel ,",
    "they minimally extend sel4 by adding a static partition - based scheduler and enforce requiring that sel4 be configured to prevent asynchronous interrupt delivery to user - space partitions which would introduce an information channel .",
    "the priority - based scheduling is changed to the partitioning scheduling that follows a static round - robin scheduling between partitions , with fixed - length time slices per partition , while doing dynamic priority - based round - robin scheduling of threads within each partition .    for information flow security",
    ", they adopt an extension of von oheimb s notion of _ nonleakage _ @xcite which is a variant of intransitive noninterference @xcite .",
    "nonleakage is defined as follows .",
    "@xmath80    it states that for two arbitrary and reachable states @xmath19 and @xmath61 , if the two states agree on the private state of the separation kernel scheduler ( @xmath81 ) , and for each entity in partition s extent in a partition set ( @xmath82 ) , the entity s state is identical in the two state @xmath19 and @xmath61 ( @xmath83 ) , then after performing @xmath84 transitions from @xmath19 and @xmath61 , the entities of partition @xmath85 in the new two states are identical ( @xmath86 ) .",
    "the partition set ( @xmath82 ) includes partitions that are permitted to send information to a specific partition @xmath85 when a sequence of @xmath84 transitions occur from a state @xmath19 .",
    "the security property assures that sel4 s c implementation enforces information flow security ( formula [ eq : sel4 ] ) .",
    "because information flow security is preserved by refinement , it allows to prove information flow security on sel4 s abstract specification and then concludes that it holds for sel4 s c implementation by the refinement relation between abstraction specification and implementation proved in @xcite .",
    "when proving information flow security on the abstract specification , they simplify the proofs by discharging proof obligations of * nonleakage * , _ unwinding conditions _ , that examines individual execution steps .",
    "the unwinding condition , called * confidentiality - u * as follows , is equivalent to * nonleakage * @xmath87    it means that the contents of each partition @xmath85 after each step depend only on the contents of the following partitions before the step : @xmath85 , @xmath88 and the currently running partition @xmath89 when it is allowed to send information to @xmath85 . in other words",
    ", information may flow to @xmath85 only from @xmath88 and the current partition in accordance with the information flow policy @xmath53 .",
    "the information flow policy @xmath90 holds if the access control policy allows the partition @xmath91 to affect any subject in @xmath92 s extent .",
    "this condition has been proven for the execution steps of their transition system in abstraction specification .",
    "they state that it is the first complete , formal , machine - checked verification of information flow security for the implementation of a general - purpose microkernel . unlike previous proofs of information flow security for separation kernels ,",
    "their verification is applied to the actual 8,830 lines of c code of sel4 , and so rule out the possibility of invalidation by implementation errors in this code .",
    "the proofs of information flow security are done in isabelle / hol by 27,756 lines of proof , and take a total effort of roughly 51 person - months .",
    "the proofs precisely describe how the general purpose kernel should be configured to enforce isolation and mandatory information flow control .",
    "* arinc 653 compliant separation kernels    a trend is to integrate safe and secure functionalities into one separation kernel . in order to develop arinc 653 compliant secure separation kernels ,",
    "it is necessary to assure security of the functionalities defined in arinc 653 . in @xcite",
    ", authors present a formal specification and its security proofs of separation kernels with arinc 653 channel - based communication in isabelle / hol .",
    "they provide a mechanically checked formal specification which comprises a generic execution model for separation kernels and an event specification which models all ipc services defined in arinc 653 .",
    "a set of information flow security properties and an inference framework to sketch out the implications of them are provided . finally , they find some covert channels to leak information in the arinc 653 standard and in two open - source arinc 653 compliant separation kernels , i.e. xtratum and pok .",
    "* spatial separation of hypervisors    hypervisors provide a software virtualization environment in which operating systems can run with the appearance of full access to the underlying system hardware , but in fact such access is under the complete control of hypervisors .",
    "hypervisors support cots operating systems and legacy / diverse applications on specific operating systems .",
    "hypervisors for safety and security - critical systems have been widely discussed @xcite .",
    "for instance , xtratum @xcite is a typical hypervisor for safety - critical embedded systems .",
    "similar to separation kernels , hypervisors mainly provide the memory separation for hosted operating systems .",
    "address separation protects the memory regions of one execution context by preventing other context from accessing these regions .",
    "it is a crucial property - in essence requiring that disjoint source addresses spaces be mapped to disjoint destination address spaces .",
    "separation is achieved by an address translation subsystem and sophisticated address translation schemes use multi - level page tables .",
    "separation kernels can employ shadow paging to isolate critical memory regions from an untrusted guest os .",
    "the kernel maintains its own trusted version of the guest s page table , called the shadow page table .",
    "the guest is allowed to modify its page table .",
    "however , the kernel interposes on such modifications and checks that the guest s modifications do not violate memory separation . a parametric verification technique @xcite is able to handle separation mechanisms operating over multi - level data structures of arbitrary size and with arbitrary number of levels .",
    "they develop a parametric guarded command language ( @xmath93 ) for modeling hypervisors and a parametric specification formalism , @xmath94 , for expressing security policies of separation mechanisms modeled in @xmath93 .",
    "the separation property states that the physical addresses accessible by the guest os must be less than the lowest address of the hypervisor protected memory .",
    "models of xen and shadowvisor are created in c and two properties are verified using cbmc ( a model checker for c ) : ( 1 ) the initial state of the system ensures separation ; ( 2 ) if the system started in a state that ensures separation , executing any of the guarded commands also preserves separation .",
    "hypervisors allow multiple guest operating systems to run on shared hardware and offer a compelling means of improving the security and the flexibility of software systems . in @xcite ,",
    "the strong isolation properties ensure an operating system can only read and modify its own memory and its behavior is independent of the state of other operating systems .",
    "the read isolation captures the intuition that no os can read memories that do not belong to it .",
    "the write isolation captures the intuition that an os can not modify memories that it does not own .",
    "the os isolation captures the intuition that the behavior of any os does not depend on other oss states .",
    "they formalize in the coq proof assistant an idealized model of a hypervisor and formally establish that the hypervisor ensures strong isolation properties .",
    "xenon @xcite is a high - assurance separation hypervisor built by naval research laboratory based on re - engineering the xen open - source hypervisor .",
    "the information flow security has been proposed for the xenon hypervisor @xcite as a the basis for formal policy - to - code modeling and evidence for a cc security evaluation .",
    "their security policy is an independence policy @xcite , which is preserved by refinement . considering that the original independence policy is defined in a purely event - based formalism that does not directly support refinement into state - rich implementations like hypervisor internals",
    ", they use the @xmath95 language to formalize the security policy .",
    "the xenon security policy defines separation between _ low _ and _ high _ as the independence of _ low _ s view from anything _ high _ might do .",
    "_ low _ and _ high _ are domains that contain the guest operating systems hosted by xenon .",
    "_ high _ guest operating systems can not only perform all possible sequences of _ high _ events including event sequences a well - behaved user would not generate , but also arbitrarily refuse to perform any of them as well . if this kind of arbitrary behavior by the _ high _ part of the system can not cause the _ low _ part of the system to behave in a non - deterministic way , _ high _ can not influence what _ low _ sees and there are no information flows from _ high _ to _",
    "low_. the formal security policy model is in heuristic use for re - engineering the internal design of xen into the internal design of xenon .",
    "mechanical proofs of the refinement between the @xmath95 security policy model and the xenon implementation have not been constructed .    * a general verification approach for spatial separation properties    from the literature of spatial separation verification",
    ", we could see that spatial separation properties are mostly formally verified using theorem proving technique .",
    "the data separation properties and gwv policy are formulated on individual execution steps of the system to observe the pre- or post - conditions of the execution step .",
    "they use the @xmath42 function ( see equation [ eq : mask_comm ] , [ eq : mask_comm2 ] and [ eq : gwv ] ) to represent one individual execution step",
    ". properties of noninterference , nonleakage and noninfluence are expressed in terms of sequences of actions and state transitions . in order to verifying the security of systems , the standard proofs of information flow security properties",
    "are discharged by proving a set of unwinding conditions @xcite that examine individual execution steps of the system .",
    "the unwinding theorem @xcite for security policies says if the system is _ output consistent _ , _ weakly step consistent _ and _ locally respects _ @xmath53 , the system is secure for policy @xmath53 .",
    "the three conditions are called _ unwinding conditions_. the unwinding theorem simplifies the security proofs by decomposing the global properties into unwinding conditions on each execution step .",
    "the three unwinding conditions are as follows , and the unwinding theorem states that @xmath96 .",
    "@xmath97    @xmath98    @xmath99    the general proofs of information flow security properties and unwinding conditions are available in @xcite and an application of them on a concrete separation kernel is available in @xcite .",
    "temporal separation ensures that the services provided by shared resources to applications in a partition can not be affected by applications in other partitions .",
    "it includes the performance of the resources concerned , as well as the rate , latency , jitter , and duration of scheduled access to them @xcite .",
    "the temporal separation becomes critical when being applied in safety - critical systems .",
    "the scheduler of separation kernels implements temporal separation since it is responsible for assigning processor time to partitions .",
    "temporal separation requires a two - level scheduler , partition level and process level , according to arinc 653 standard .",
    "the literature mainly deals with two issues for temporal separation : the schedulability analysis of two - level scheduling and correct implementation of the scheduler .",
    "the first one usually uses a compositional approach to formally specify and analyze the schedulability of real - time applications running under the two - level scheduling .",
    "the recent work is discussed in @xcite .",
    "it considers the application but not the separation kernels .",
    "our survey concerns with verification of separation kernels and the second one is discussed here .    *",
    "honeywell deos scheduler    the honeywell dynamic enforcement operating system ( deos ) is a microkernel - based real - time operating system that supports flexible i m a applications by providing both space partitioning at the process level and time partitioning at the thread level .",
    "the model checking and theorem proving approaches have been applied to the deos scheduler to analyze the temporal separation property @xcite .",
    "a core slice of the deos scheduling kernel contains 10 classes and over 1000 lines of actual code are first translated without abstraction from c++ into promela , which is the input language for the spin model checker .",
    "the temporal partitioning property of deos scheduler is that each thread in the kernel is guaranteed to have access to its complete cpu budget during each scheduling period .",
    "they use two approaches to analyze the time partitioning properties in the deos kernel .",
    "the first one is to place assertions over program variables to identify potential errors .",
    "the second approach is to use a liveness property , _ idle execution _ , presented by ltl .",
    "the liveness property specified as @xmath100(beginperiod - > ( ! \\ ; endperiod \\ ; u \\ ; idle))}$ ] , states that if there is slack in the system ( i.e. , the main thread does not have 100% cpu utilization ) , the idle thread should run during every longest period .",
    "this is a necessary condition of time partitioning .",
    "the size and complexity of this system limit them to analyze only one configuration at a time . to overcome this limitation and generalize the analysis to arbitrary configurations , they have turned to theorem proving approach and used the pvs theorem prover to analyze the deos scheduler @xcite .",
    "they model the operations of the scheduler in pvs and the execution timeline of deos using a discrete time state - transition system .",
    "properties of time partitioning ( tp ) are formulated as predicates on the set of states and proved to hold for all reachable states .",
    "the corresponding pvs proofs consist of the base step and the inductive step as follows .",
    "@xmath101 @xmath102    the @xmath103 predicate is defined as follows .",
    "@xmath104 @xmath105 @xmath106    the entire collection of theories has a total 1648 lines of pvs code and 212 lemmas .",
    "in addition to the inductive proofs of the time partitioning invariants , they use a feature - based technique to model state - transition systems and formulate inductive invariants .",
    "this technique facilitates an incremental approach to theorem proving that scales well to models of increasing complexity .    * a two - level scheduler for vxworks kernel    in @xcite ,",
    "a hierarchical scheduler executing in the windriver vxworks kernel has been modeled using task automata and model checked using the times tool .",
    "the two - level hierarchical scheduler uses periodic / polling servers ( ps ) and fixed priority preemptive scheduling ( fpps ) of periodic tasks for integrating real - time applications . in their framework , the _ global scheduler _ responds for distributing the cpu capacity to the servers ( the schedulable entity of a subsystem ) .",
    "servers are allocated a defined time ( budget ) of every predefined period .",
    "each server comprises a _ local scheduler _ which schedules the workload inside it , i.e. its tasks , when the server is selected for execution by the global scheduler .",
    "they use the task automata @xcite ( timed automata with tasks ) supported by the times tool to model the global scheduler , event handler , and each local scheduler for partitions .",
    "the event handler decouples the global scheduler from the variability of partition amount .",
    "they specify 5 and 4 properties in tctl ( timed computation tree logic ) for the global and local scheduler , respectively .    * an arinc653 scheduler modeled in aadl    in @xcite , aadl ( architecture analysis and design language )",
    "is used to model an arinc653 hierarchical scheduler for critical systems and cheddar is used to analyze the scheduling simulation on aadl specifications with hierarchical schedulers .",
    "aadl is a textual and graphical language support for model - based engineering of embedded real time systems that has been approved and published as sae standard .",
    "cheddar is a set of ada packages which aim at performing analysis of real time applications .",
    "the cheddar language allows the designer to define new schedulers into the cheddar framework .    in their arinc",
    "653 s two - levels hierarchical scheduling , the first - level static scheduling is fixed at design time , and the second scheduling level is related to the task scheduling where tasks of a given partition are scheduled with a fixed priority scheduler . in the aadl model , arinc 653 kernel , partitions , and tasks",
    "are modeled as a processor , processes , and threads , respectively .",
    "the specific cheddar properties are extended to the aadl model in order to describe the behavior of each aadl component in cheddar language and apply real time scheduling analysis tools .",
    "the behavior of each scheduler is modeled as a timed automaton in cheddar language . with the meta case tool platypus",
    ", they have designed a meta - model of ada 95 for cheddar and a model of the cheddar language . from these models ,",
    "they generate ada packages which are part of the cheddar scheduling simulation engine .",
    "these ada packages implement a cheddar program compiler and interpreter . then scheduling simulation analysis",
    "is performed on aadl specifications with hierarchical schedulers .    * a two - level scheduler for rtsj",
    "the real - time specification for java ( rtsj ) is a set of interfaces and behavioral specifications that allow for real - time computer programming in the java programming language .",
    "it is modified to allow applications to implement two - level scheduling mechanism where the first level is the rtsj priority scheduler and the second level is under application control @xcite .",
    "they also verify the two - level scheduler for rtsj using timed automata in the uppaal tool @xcite .",
    "the _ thread _ , _ basescheduler _ ( global scheduler ) , _ edfscheduler_(local scheduler ) and other components are presented by timed automata .",
    "five properties are verified on their model .",
    "three of them are to check the correctness of their model : ( 1 ) a thread s priority never takes an invalid value , ( 2 ) no thread can block due to locking after it starts , and ( 3 ) the system will always select a thread to run with higher absolute preemption level than the system ceiling , unless the selected thread is either currently locking a resource with higher ceiling than its apl or a thread that has just been released .",
    "the other two are liveness and deadlock free properties that state the system is livelock free and can never deadlock .",
    "we summarize the research work on formal specification and verification of separation kernels in table [ tbl : comparison_tab ] . in this table",
    ", `` @xmath107 '' means that the evidence for the data is not available and empty cells mean that the feature is not considered in the work .",
    "we compare seven features of them .",
    "the column `` target kernel '' is the object specified or verified in each work .",
    "the `` objective '' shows the concerns of each work , in which _ specification _ indicates that the work concentrates on formal specifying / developing / modeling separation kernels and _ verification _ on formally verifying separation kernels .",
    "some work aims at these two aspects together .",
    "the `` property '' indicates the policies or properties specified or verified in each work .",
    "the `` formal language '' indicates what s the formal language used when specifying or verifying the separation kernels .",
    "the `` approach '' indicates the formal specification or verification approaches used .",
    "the `` size '' shows the scale of the formal specification or verification proofs .",
    "the `` tools '' shows the software tools used in each work .     & * target kernel * & * objective * & * property * & * formal language * & * approach * & * size * & * tools * + department of defense @xcite & mask separation kernel &    [ cols= \" < \" , ]     & @xmath108 4,500 pages & czt @xmath95 tools + honeywell @xcite & deos scheduler & verification & temporal separation & promela & model checking & @xmath107 & spin + honeywell @xcite & deos scheduler & verification & temporal separation & pvs & theorem proving & 1648 loc of pvs , 212 lemmas & pvs theorem prover + malardalen univ .",
    "( sweden ) @xcite & a two - level scheduler for vxworks kernel & verification & temporal separation & task automata , tctl & model checking & @xmath107 & times tool + brest univ .",
    "( france ) @xcite & an arinc653 scheduler & verification & temporal separation & aadl , cheddar language & simulation analysis & @xmath107 & cheddar + york univ . ( uk ) @xcite & a two - level scheduler for rtsj & verification & temporal separation & timed automata & model checking & @xmath107 & uppaal tool +    [ tbl : comparison_tab ]        we have classified the properties of separation kernels as four categories : data separation , information flow security , temporal separation and fault isolation .",
    "the relationship among these properties is very important for formal specification and verification of separation kernels .",
    "we discuss the relationship here .",
    "the separation security properties , infiltration , mediation and exfiltration @xcite can be represented by the gwv separation axiom @xcite .",
    "exfiltration specifies that the private data of executing partition can not be written by or modify the private data of other partitions .",
    "mediation specifies that an executing partition can not use private data of one partition to modify private data of other partitions .",
    "infiltration specifies that an executing partition can not read private data of other partitions .",
    "the gwv policy implies the basic separation axioms of mask @xcite .",
    "the mask data separation properties consider the dependency of data in different partitions indirectly .",
    "they are based on a shared memory by which partitions influence with each other by external event .",
    "the mask data separation properties can be represented by the gwv policy , except the temporal separation property .",
    "the no - exfiltration property is a special case of exfiltration theorem in @xcite without the @xmath43 function .",
    "the no - infiltration property is equivalent to the infiltration theorem in @xcite on different abstract models .",
    "the separation of control property means that one step execution in a partition can not affect data on other partitions .",
    "its external event may affect the shared memory , but not memory areas in other partitions .",
    "it is a special case of exfiltration theorem in @xcite in the situation that partitions exchange data indirectly by the shared memory . for the kernel integrity property ,",
    "the shared memory is the data area of a special partition , then one step internal execution of other partitions could not affect this shared memory .",
    "this is a special case of the exfiltration theorem in @xcite .",
    "noninfluence is semantically equal to the conjunction of noninterference and nonleakage @xcite .",
    "gwv is stronger than noninterference @xcite .    finally , the shared resources and communication channels , etc .",
    ", among partitions can affect the scheduling in separation kernels .",
    "but the relationship among spatial separation and temporal separation is complicated and not clear now .",
    "it needs further study .",
    "the gwv policy proposed by rockwell collins has been considered as the security policy to provide evidence for the cc evaluation and is used in verification of industrial separation kernels , such as aamp7 g microprocessor , integrity-178b separation kernel and pikeos separation kernel .",
    "the separation security policies : infiltration , mediation and exfiltration @xcite can be presented by the gwv separation axiom @xcite .",
    "gwv is stronger than noninterference @xcite and supports intransitive noninterference @xcite as proved in @xcite . as an",
    "industrially applicable and practically proved security policy , the gwv policy is a useful property for verifying separation kernels and proving the policy could be considered as a trusted way for certification .      from table [ tbl : comparison_tab ]",
    ", we could see that most of verification work on spatial separation use the theorem proving approach .",
    "the reasons are ( 1 ) separation kernels for safety and security - critical systems need fully formal verification . whilst model checking approach is not competent because of its state space explosion problem ; ( 2 ) separation kernels usually are small and have thousands of lines of source code that make it is possible to be fully verified and theorem proving approach can be applied without too much cost ; ( 3 ) it is difficult to represent separation properties of separation kernels in property languages , such as ltl and ctl , in model checking approach ; ( 4 ) theorem proving approach on verifying operating system kernels exhibits good results . for instance , more than 140 bugs are found in the project of verifying the sel4 kernel .",
    "different to the theorem proving approach on spatial separation , verifying",
    "the temporal separation usually uses the model checking approach .",
    "the reason is that it is difficult to express _ time _ by logics in the theorem provers .",
    "however , the _ time _ can be conveniently represented in model checkers , such as the timed automata in the uppaal tool .",
    "the problem of model checking temporal separation is that size and complexity of separation kernels limit the approach to analyze only one configuration at a time .",
    "the global scheduler is verified with the local scheduler together and the verification result relies on the number of partitions .",
    "honeywell has faced this problem and uses the pvs theorem prover to analyze the deos scheduler @xcite .",
    "our opinion is that verifying temporal separation needs more study of theorem proving approach in the future .",
    "the capability and automation of specification and verification systems play key roles in enforcing security of separation kernels .",
    "theorem provers , such as isabelle / hol , hol4 and pvs , have been applied in formal verification of spatial separation properties .",
    "the expressiveness of formal notations in these provers is enough for spatial separation .",
    "a shortage is the low degree of verification automation . in model checking approach ,",
    "efforts have been paid on automatically formal verification of spatial separation properties on security systems .",
    "security policies are classified in @xcite .",
    "information flow security properties are not trace properties , but hyperproperties .",
    "they have developed a prototype model checker for hyperproperties in @xcite using the ocaml program language .",
    "the prototype is very preliminary and currently does not scale up to 1,000 states .",
    "it is even not applicable to formally verify abstract specification of separation kernels now .",
    "thus , automatically formal verification of separation kernels is attractive in the future .",
    "as studied in @xcite , correctness properties of the pikeos kernel are formulated as a simulation relation between the concrete system and an abstract model . as well as the functional properties , correctness properties of address translation , memory separation , techniques to handle assembly code , and assumptions on various components like the compiler ,",
    "hardware and implementation policies are identified as ingredients of operating system kernel correctness . for separation kernels ,",
    "the paper @xcite has summarized the separation kernel requirements according to the original definition @xcite and skpp extensions @xcite , which includes functionalities and security , separation and information flow , configuration , principle of least privilege , memory management , execution and scheduling , and platform considerations .",
    "we consider that properties of security , separation , information flow , memory , scheduling , etc .",
    ", are typical and important correctness properties of separation kernels , and there are still other correctness properties to be taken into account",
    ".      the two primary approaches to developing correct separation kernel are ( 1 ) formal development from top - level specification to low - level implementation by refinement and ( 2 ) formal verification of low - level implementation according to its specification . in formal methods , refinement is the verifiable transformation of high - level formal specification into low - level implementation and then into executable code .",
    "b @xcite and z @xcite are typical formal development methods for software .",
    "correctness of models in different abstract levels and correspondence between models of two neighboring levels assure the correctness of the design .",
    "the certifiable code generation guarantees the correspondence between the low - level implementation and the source code .",
    "the work @xcite employ this approach to develop correct separation kernels .",
    "due to the successful application in industrial projects @xcite , formal development of separation kernels by refinement into the low - level implementation can alleviate the manual review between the design and the implementation in safety and security certification .    in formal verification of separation kernels , the eal 7 of cc does not enforce formal verification on the source code level .",
    "therefore , many verification efforts on separation kernels are carried out on the abstract- or low - level models .",
    "establishing correspondence between the model and the source code of the implementation is typically by code review and not formally assured , such as cc evaluation of the integrity-178b separation kernel @xcite .",
    "others , such as @xcite , annotate the source code of separation kernels for formal verification . the work @xcite translates the source code manually / automatically to formal languages in theorem provers for reasoning .",
    "while the work @xcite verifies separation kernels on binary or assemble code level .",
    "as illustrated by the project of verifying sel4 kernel , fully formal verification shows better result and less certification cost ( for example eal 7 certification ) @xcite . due to the feasibility and successful experiences ,",
    "our opinion is to recommend fully formal verification on source code level .",
    "formal development based on b , z and other formal methods is recommended to develop new separation kernels .",
    "in this paper , we surveyed the research work on formal specification and verification of separation kernels , which covered the concepts , security policies , properties , formal specification and formal verification approaches .",
    "we aimed at presenting the framework and focuses of related work , so the details were not touched .",
    "future work includes the formal comparison of correctness properties , a formal model for separation kernels and efforts on fully formal verification .",
    "gjertsen t and nordbotten na .",
    "multiple independent levels of security ( mils)a high assurance architecture for handling information of different classification levels . technical report , ffi report , 2008 .",
    "wilding mm , greve da , richards rj , and hardin ds . formal verification of partition management for the aamp7 g microprocessor . in : _ design and verification of microprocessor systems for high - assurance applications _ , springer , 2010 , 175191 .",
    "baumann c , bormer t , blasum h , and tverdyshev s. proving memory separation in a microkernel by code level verification . in : _ proceedings of 14th ieee international symposium on object",
    "/ component / service - oriented real - time distributed computing workshops _",
    ", 2011 , 2532 .",
    "richards rj .",
    "modeling and security analysis of a commercial real - time operating system kernel . in : _",
    "design and verification of microprocessor systems for high - assurance applications _ , springer , 2010 , 301322 .",
    "heitmeyer cl , archer m , leonard ei , and mclean j. formal specification and verification of data separation in a separation kernel for an embedded system . in : _ proceedings of the 13th acm conference on computer and communications security _ , 2006 , 346355 .",
    "penix j , visser w , engstrom e , larson a , and weininger n. verification of time partitioning in the deos scheduler kernel . in : _ proceedings of the 22nd international conference on software engineering _ , 2000 , 488497 .",
    "ha v , rangarajan m , cofer d , rues h , and dutertre b. feature - based decomposition of inductive proofs applied to real - time avionics software : an experience report . in : _ proceedings of the 26th international conference on software engineering _ , 2004 , 304313 .",
    "klein g , elphinstone k , heiser g , andronick j , cock d , derrin p , elkaduwe d , engelhardt k , kolanski r , norrish m , et  al .",
    "sel4 : formal verification of an os kernel . in : _ proceedings of the acm sigops 22nd symposium on operating systems principles _ , 2009 , 207220 .",
    "martin w , white p , taylor fs , and goldberg a. formal construction of the mathematically analyzed separation kernel . in : _ proceedings of ieee international conference on automated software engineering _ , 2000 , 133141 .",
    "murray t , matichuk d , brassil m , gammie p , bourke t , seefried s , lewis c , gao x , and klein g. sel4 : from general purpose to a proof of information flow enforcement . in : _ proceedings of 34th ieee symposium on security and privacy _ , 2013 , 415 - 429 .",
    "ramirez a , schmaltz j , verbeek f , langenstein b , and blasum h. on two models of noninterference : rushby and greve , wilding , and vanfleet . in : _",
    "proceedings of computer safety , reliability , and security _ , 2014 , 246261 .",
    "zhao y , yang z , sanan d , and liu y. event - based formalization of safety - critical operating system standards : an experience report on arinc 653 using event - b . in : _ proceedings of ieee 26th international symposium on software reliability engineering _ , 2015 , 281292 .",
    "dam m , guanciale r , khakpour n , nemati h , and schwarz o. formal verification of information flow security for a simple arm - based separation kernel . in : _ proceedings of the acm sigsac conference on computer & communications security _ , 2013 , 223234 .",
    "zhao y , sanan d , zhang f , and liu y. reasoning about information flow security of separation kernels with channel - based communication . in : _ proceedings of the 22nd international conference on tools and algorithms for the construction and analysis of systems _ , 2016 , 791810 .",
    "franklin j , chaki s , datta a , and seshadri a. scalable parametric verification of secure systems : how to verify reference monitors without worrying about data structure size . in : _ proceedings of the 2010 ieee symposium on security and privacy _ , 2010 , 365379 .",
    "barthe g , betarte g , campo jd , and luna c. formally verifying isolation and availability in an idealized model of virtualization . in : _",
    "proceedings of international symposium on formal methods _ , 2011 , 231245 .",
    "carnevali l , lipari g , pinzuti a , and vicario e. a formal approach to design and verification of two - level hierarchical scheduling systems . in : _ proceedings of the 16th ada - europe international conference on reliable software technologies _ , 2011 , 118131 .",
    "asberg m , pettersson p , and nolte t. modelling , verification and synthesis of two - tier hierarchical fixed - priority preemptive scheduling . in : _",
    "proceedings of 23rd euromicro conference on real - time systems ( ecrts ) , 2011 _ , 2011 , 172181 .",
    "zerzelidis a and wellings a. getting more flexible scheduling in the rtsj . in : _ proceedings of the 9th ieee international symposium on object and component - oriented real - time",
    "distributed computing _ , 2006 , 88 .",
    "zerzelidis a and wellings a. model - based verification of a framework for flexible scheduling in the real - time specification for java . in : _ proceedings of the 4th international workshop on java technologies for real - time and",
    "embedded systems _ , 2006 , 2029 .",
    "clarkson m , finkbeiner b , koleini m , micinski k , rabe m , and snchez c. temporal logics for hyperproperties . in : _",
    "proceedings of international conference on principles of security and trust _ , 2014 , 265284 ."
  ],
  "abstract_text": [
    "<S> separation kernels are fundamental software of safety and security - critical systems , which provide to their hosted applications spatial and temporal separation as well as controlled information flows among partitions . </S>",
    "<S> the application of separation kernels in critical domain demands the correctness of the kernel by formal verification . to the best of our knowledge </S>",
    "<S> , there is no survey paper on this topic . </S>",
    "<S> this paper presents an overview of formal specification and verification of separation kernels . </S>",
    "<S> we first present the background including the concept of separation kernel and the comparisons among different kernels . then </S>",
    "<S> , we survey the state of the art on this topic since 2000 . </S>",
    "<S> finally , we summarize research work by detailed comparison and discussion .    </S>",
    "<S> real - time operating systems , separation kernel , survey , formal specification , formal verification </S>"
  ]
}