{
  "article_text": [
    "in this paper we continue the work that was started in @xcite .",
    "our focus is on easy special cases of otherwise difficult to evaluate polynomials , and their relation to various classes of arithmetic circuits .",
    "it is conjectured that the permanent and hamiltonian polynomials are hard to evaluate .",
    "indeed , in valiant s model @xcite these families of polynomials are both @xmath1-complete . in the boolean framework",
    "they are complete for the complexity class @xmath4 @xcite . however , for matrices of bounded treewidth the permanent and hamiltonian polynomials can efficiently be evaluated - the number of arithmetic operations being polynomial in the size of the matrix @xcite .",
    "an earlier result along these lines is related to computing weights of perfect matchings in a graph : the sum of weights of all perfect matchings in a weighted ( undirected ) graph is another hard to evaluate polynomial , but for planar graphs it can be evaluated efficiently due to kasteleyn s theorem @xcite .    by means of reductions",
    "these evaluation methods can all be seen as general - purpose evaluation algorithms for certain classes of polynomials . as an example , if an arithmetic formula represents a polynomial @xmath5 then one can construct a matrix @xmath6 of bounded treewidth such that :    * the entries of @xmath6 are variables of @xmath5 , or constants from the underlying field . *",
    "the permanent of @xmath6 is equal to @xmath5 .",
    "it turns out that the converse holds as well , so with respect to the computational complexity computing the permanent of a bounded treewidth matrix is equivalent to evaluating an arithmetic formula . in @xcite",
    "the following results ( with abuse of notation ) were established :    * permanent / hamiltonian(bounded treewidth matrix ) @xmath7 arithmetic formulas . * perfect matchings(planar matrix ) @xmath7 arithmetic skew circuits .",
    "one can also by similar techniques show that :    * perfect matchings(bounded treewidth matrix ) @xmath7 arithmetic formulas .",
    "other notions of graph `` width '' have been defined in the litterature besides treewidth , e.g. pathwidth , cliquewidth and rankwidth . here",
    "we would like to study the evaluation methods mentioned above , but considering matrices @xmath6 that have bounded pathwidth or bounded cliquewidth instead of bounded treewidth . in this paper we establish the following results :    * per / ham / perf .",
    "match.(bounded pathwidth matrix ) @xmath7 arithmetic skew circuits of bounded width @xmath7 arithmetic weakly skew circuits of bounded width @xmath7 arithmetic formulas . *",
    "arithmetic formulas @xmath8 per / ham / perfect matchings(bounded cliquewidth matrix ) @xmath8 @xmath0",
    ".    _ overview of the paper . _",
    "the second section of the paper introduces definitions used throughout the paper and provides some small technical results related to graph widths .",
    "in particular we show equivalence between the weighted definitions of cliquewidth , nlc - width and m - cliquewidth with respect to boundedness .",
    "sections 3 and 4 are devoted to the expressiveness of the permanent , hamiltonian , and perfect matchings of the graphs of bounded pathwidth and bounded weighted cliquewidth respectively .",
    "we prove in section 3 that permanent , hamiltonian , and perfect matchings limited to bounded pathwidth graphs express arithmetic formulas . in section 4 , we show that for all three polynomials the complexity is between arithmetic formulas and @xmath0 for graphs of bounded weighted cliquewidth .",
    "an _ arithmetic circuit _ is a finite , acyclic , directed graph .",
    "vertices have indegree 0 or 2 , where those with indegree 0 are referred to as _ inputs_. a single vertex must have outdegree 0 , and is referred to as _ output_. each vertex of indegree 2 must be labeled by either @xmath9 or @xmath10 , thus representing computation .",
    "vertices are commonly referred to as _ gates _ and edges as",
    "_ arrows_.    by interpreting the input gates either as constants or variables",
    "it is easy to prove by induction that each arithmetic circuit naturally represents a polynomial .    in this paper various subclasses of arithmetic circuits",
    "will be considered : for _ weakly skew _ circuits we have the restriction that for every multiplication gate , at least one of the incoming arrows is from a subcircuit whose only connection to the rest of the circuit is through this incoming arrow . for _ skew _ circuits we have the restriction that for every multiplication gate , at least one of the incoming arrows is from an input gate . for _ formulas",
    "_ all gates ( except output ) have outdegree 1 .",
    "thus , reuse of partial results is not allowed .    for a detailed description of various subclasses of arithmetic circuits , along with examples ,",
    "we refer to @xcite .",
    "the _ size _ of a circuit is the total number of _ gates _ in the circuit .",
    "the _ depth _ of a circuit is the length of the longest path from an input gate to the output gate .",
    "since the definition of pathwidth is closely related to the definition of treewidth ( bounded pathwidth is a special case of bounded treewidth ) we also include the definition of treewidth in this paper .",
    "treewidth for undirected graphs is commonly defined as follows :    let @xmath11 be a graph .",
    "a @xmath12-tree - decomposition of @xmath13 is :    * a tree @xmath14 .",
    "* for each @xmath15 a subset @xmath16 of size at most @xmath17 . * for each edge @xmath18 there is a @xmath15 such that @xmath19 .",
    "* for each vertex @xmath20 the set @xmath21 forms a ( connected ) subtree of @xmath22 .",
    "the treewidth of @xmath13 is then the smallest @xmath12 such that there exists a @xmath12-tree - decomposition for @xmath13 .",
    "+ a @xmath12-_path_-decomposition of @xmath13 is then a @xmath12-tree - decomposition where the `` tree '' @xmath22 is a path ( each vertex @xmath15 has at most one child in @xmath22 ) .",
    "here we show that cycles have pathwidth at most 2 by constructing a path - decomposition of @xmath13 where each @xmath23 has size at most 3 .",
    "let @xmath24 be the vertices of a graph @xmath13 which is a cycle .",
    "the edges of @xmath13 are @xmath25 .",
    "the vertex @xmath26 is contained in every @xmath23 of the path - decomposition .",
    "vertices @xmath27 and @xmath28 are contained in @xmath29 , vertices @xmath28 and @xmath30 are contained in @xmath31 , and so on .",
    "finally , vertices @xmath32 and @xmath33 are contained in @xmath34 .",
    "this gives a path - decomposition of @xmath13 of width 2 .",
    "the pathwidth ( treewidth ) of a directed , weighted graph is naturally defined as the pathwidth ( treewidth ) of the underlying , undirected , unweighted graph .",
    "the pathwidth ( treewidth ) of an @xmath35 matrix @xmath36 is defined as the pathwidth ( treewidth ) of the directed graph @xmath37 where @xmath38 , @xmath39 iff @xmath40 , and @xmath41 .",
    "notice that @xmath42 can have loops .",
    "loops affect neither the pathwidth nor the treewidth of @xmath42 but are important for the characterization of the permanent polynomial .",
    "although there exists many algorithmic results for graphs of bounded treewidth , there are still classes of `` trivial '' graphs that have unbounded treewidth .",
    "cliques are an example of such graphs .",
    "cliquewidth is a different notion of `` width '' for graphs , and it is more general than treewidth since graphs of bounded treewidth have bounded cliquewidth , but cliques have bounded cliquewidth and unbounded treewidth .",
    "we recall the definitions of cliquewidth , nlcwidth and m - cliquewidth for unweighted , undirected graphs .",
    "then we introduce the new notions of @xmath43-cliquewidth , @xmath43-nlcwidth and @xmath43-m - cliquewidth which are variants of the preceding ones for _ weighted , directed _ graphs .",
    "these graph widths are all defined using terms over an universal algebra .",
    "when we refer to parse - trees it means the parse - trees of these terms",
    ".    a graph @xmath13 has cliquewidth ( denoted @xmath44 ) at most @xmath12 iff there exists a set of source labels @xmath45 of cardinality @xmath12 such that @xmath13 can be constructed using a finite number of the following operations ( named clique operations ) :    * @xmath46 , @xmath47 ( basic construct : create a single vertex with label @xmath48 ) .",
    "* @xmath49 , @xmath50 ( rename all vertices with label @xmath48 to have label @xmath51 instead ) . *",
    "@xmath52 , @xmath50 , @xmath53 ( add edges between all couples of vertices where one of them has label @xmath48 and the other has label @xmath51 ) . *",
    "@xmath54 ( disjoint union of graphs ) .    using the clique algebra , the clique with four vertices @xmath55 is constructed by the following term using only two source labels",
    "; @xmath56 : @xmath57    a graph @xmath13 has nlcwidth ( denoted @xmath58 ) at most @xmath12 iff there exists a set of source labels @xmath45 of cardinality @xmath12 such that @xmath13 can be constructed using a finite number of the following operations ( named nlc operations ) :    * @xmath46 , @xmath47 ( basic construct : create a single vertex with label @xmath48 ) .",
    "* @xmath59 for any mapping @xmath60 from @xmath45 to @xmath45 ( for every source label @xmath47 rename all vertices with label @xmath48 to have label @xmath61 instead ) . * @xmath62 for any @xmath63 ( disjoint union of graphs to which are added edges between all couples of vertices @xmath64 ( with label @xmath65 ) , @xmath66 ( with label @xmath67 ) having @xmath68 ) .",
    "one important distinction between cliquewidth and nlcwidth on one side and m - cliquewidth ( to be defined below ) on the other side is that in the first two each vertex is assigned exactly _ one _ label , and in the last one each vertex is assigned a _ set _ of labels ( possibly empty ) .",
    "a graph @xmath13 has m - cliquewidth ( denoted @xmath69 ) at most @xmath12 iff there exists a set of source labels @xmath45 of cardinality @xmath12 such that @xmath13 can be constructed using a finite number of the following operations ( named m - clique operations ) :    * @xmath70 ( basic construct : create a single vertex with a set of labels @xmath6 , @xmath71 ) .",
    "* @xmath72 for any @xmath63 and any @xmath73 ( disjoint union of graphs to which is added edges between all couples of vertices @xmath64 , @xmath66 whose sets of labels @xmath74 contain a couple of labels @xmath75 such that @xmath68 . then the labels of vertices from @xmath76 are changed via @xmath77 and the labels of vertices from @xmath78 are changed via @xmath79 ) .",
    "it is stated in @xcite ( a proof sketch of this result is given in  @xcite , one of the inequalities is proven in @xcite ) that @xmath80 hence , cliquewidth , nlc - width and m - cliquewidth are equivalent with respect to boundedness .",
    "we have seen that the definition of pathwidth and treewidth for weighted graphs straight forward was defined as the width of the underlying , unweighted graph .",
    "this is a major difference compared to cliquewidth .",
    "we can see that if we consider non - edges as edges of weight 0 , then every weighted graph has a clique ( which has bounded cliquewidth 2 ) as its underlying , unweighted graph .",
    "our main motivation for studying bounded cliquewidth matrices is to obtain efficient algorithms for evaluating polynomials like the permanent and hamiltonian for such matrices .",
    "for this reason , it is not reasonable to define the cliquewidth of a weighted graph as the cliquewidth of the underlying , unweighted graph , because then computing the permanent of a matrix of cliquewidth 2 is as difficult as the general case .",
    "hence , we put restrictions on how weights are assigned to edges : edges added in the same operation between vertices having the same pair of labels , will all have the same weight .",
    "we now introduce the definitions of @xmath43-cliquewidth , @xmath43-nlcwidth and @xmath43-m - cliquewidth .",
    "we will consider simple , weighted , directed graphs where the weights are in some set @xmath43 . in the three following constructions , an arc from a vertex @xmath81 to a vertex @xmath82",
    "is only added by relevant operations if there is not already an arc from @xmath81 to @xmath82 .",
    "the operations that differ from the unweighted case are indicated by * bold * font .",
    "a graph @xmath13 has @xmath43-cliquewidth ( denoted @xmath83 ) at most @xmath12 iff there exists a set of source labels @xmath45 of cardinality @xmath12 such that @xmath13 can be constructed using a finite number of the following operations ( named @xmath43-clique operations ) :    * @xmath46 , @xmath47 ( basic construct : create a single vertex with label @xmath48 ) .",
    "* @xmath49 , @xmath50 ( rename all vertices with label @xmath48 to have label @xmath51 instead ) . * @xmath84 , @xmath50 , @xmath53 , @xmath85 ( add missing arcs of weight @xmath86 from all vertices with label @xmath48 to all vertices with label @xmath51 ) . * @xmath54 ( disjoint union of graphs ) .",
    "a graph @xmath13 has @xmath43-nlcwidth ( denoted @xmath87 ) at most @xmath12 iff there exists a set of source labels @xmath45 of cardinality @xmath12 such that @xmath13 can be constructed using a finite number of the following operations ( named @xmath43-nlc operations ) :    * @xmath46 , @xmath47 ( basic construct : create a single vertex with label @xmath48 ) . * @xmath59 for any mapping @xmath60 from @xmath45 to @xmath45 ( for every source label @xmath47 rename all vertices with label @xmath48 to have label @xmath61 instead ) . * @xmath62 for any partial function @xmath88 ( disjoint union of graphs to which are added arcs of weight @xmath86 for each couple of vertices @xmath89 , @xmath90 whose labels @xmath75 are such that @xmath91 ; the arc is from @xmath81 to @xmath82 if @xmath92 and from @xmath82 to @xmath81 if @xmath93 ) .    a graph @xmath13 has @xmath43-m - cliquewidth ( denoted @xmath94 ) at most @xmath12 iff there exists a set of source labels @xmath45 of cardinality @xmath12",
    "such that @xmath13 can be constructed using a finite number of the following operations ( named @xmath43-m - clique operations ) :    * @xmath70 ( basic construct : create a single vertex with set of labels @xmath6 , @xmath71 ) .",
    "* @xmath72 for any partial function @xmath88 and any @xmath95 ( disjoint union of graphs to which is added missing arcs of weight @xmath86 for each couple of vertices @xmath89 , @xmath90 whose sets of labels @xmath74 contain @xmath75 such that @xmath91 ; the arc is from @xmath81 to @xmath82 if @xmath92 and from @xmath82 to @xmath81 if @xmath93",
    ". then the labels of vertices from @xmath76 are changed via @xmath77 and the labels of vertices from @xmath78 are changed via @xmath79 ) .    in the last operation for @xmath43-m - cliquewidth ,",
    "there is a possibility that two ( or more ) arcs are added from a vertex @xmath81 to a vertex @xmath82 during the same operation and then the obtained graph is not simple . for this reason , we will consider as well - formed terms only the terms ( or parse - trees ) where this does not occur .",
    "the three preceding constructions of graphs can be extended to weighted graphs with loops by adding the basic constructs @xmath96 or @xmath97 which creates a single vertex with a loop of weight @xmath86 and label @xmath48 or set of labels @xmath6 .",
    "if @xmath13 is a weighted graph ( directed or not ) with loops and @xmath98 denotes the weighted graph ( directed or not ) obtained from @xmath13 by removing all loops , then one can easily show the following result .",
    "* @xmath99 .",
    "* @xmath100 . * @xmath101 .",
    "this justifies the fact that we overlook technical details for loops in the proof of the following theorem .",
    "theorem  [ weightedequiv ] shows that the inequalities between the three widths are still valid in the weighted case .",
    "it justifies our definitions of cliquewidth for weighted graphs . for the proof",
    "we collect the ideas in  @xcite and combine them with our definitions for weighted graphs .",
    "[ weightedequiv ] for any weighted graph @xmath13 , @xmath102    first inequality :    let @xmath13 be a weighted graph of @xmath43-nlcwidth at most @xmath12 and @xmath22 be a parse - tree constructing @xmath13 with @xmath43-nlc operations on a set of source labels @xmath45 of cardinality @xmath12 .",
    "we can consider without loss of generality that in @xmath22 :    * there are no two consecutive @xmath59 operations , otherwise we can replace @xmath22 by @xmath103 where the two consecutive nodes of @xmath22 with @xmath59 and @xmath104 operations on them have been replaced by one node @xmath105 ( @xmath106 ) . * no @xmath46 operation is followed by a @xmath59 operation , otherwise we can replace @xmath22 by @xmath103 where this two operations are replaced by @xmath107 where @xmath108 . * each @xmath62 operation",
    "is followed by exactly one @xmath59 operation , otherwise we can add an @xmath109 operation if there is none ( @xmath110 is the identity function from @xmath45 to @xmath45 ) .",
    "we can replace the @xmath43-nlc operation @xmath46 by the @xmath43-m - clique operation @xmath111 , and the consecutives @xmath43-nlc operation @xmath62 and @xmath59 by the @xmath43-m - clique operation @xmath112 where @xmath113 .",
    "it is clear that these replacements in @xmath22 will give a parse - tree constructing @xmath13 with @xmath43-m - clique operations on the same set of source labels @xmath45 of cardinality @xmath12 .",
    "hence , we have @xmath114 .",
    "second inequality :    let @xmath13 be a weighted graph of @xmath43-cliquewidth at most @xmath12 and @xmath22 be a parse - tree constructing @xmath13 with @xmath43-clique operations on a set of source labels @xmath45 of cardinality @xmath12 .",
    "we can consider without loss of generality that in @xmath22 :    * after a disjoint union operation @xmath54 all arcs in @xmath13 from @xmath64 to @xmath90 ( resp . from @xmath82 to @xmath81 )",
    "are added between the disjoint union operation @xmath54 and the first following operation @xmath115 of disjoint union or renaming .",
    "otherwise consider the first operation @xmath84 after @xmath115 adding an arc between a vertex @xmath116 from @xmath76 and a vertex @xmath117 from @xmath78 .",
    "we can add an operation @xmath118 before @xmath115 where @xmath119(resp .",
    "@xmath120 ) is the label in @xmath54 of the tail ( resp .",
    "head ) of the arc added by the operation @xmath84 .",
    "* each operation @xmath84 add at least one arc .",
    "* all @xmath84 operations are between a disjoint union operation @xmath54 and the first following operation @xmath115 of disjoint union or renaming .",
    "we can replace the @xmath43-clique operation @xmath46 by the @xmath43-nlc operation @xmath46 , and the @xmath43-clique operation @xmath49 by the @xmath43-nlc operation @xmath59 where @xmath121 and @xmath122 .",
    "finally each group consisting of a @xmath123 @xmath43-clique operation and the following @xmath84 @xmath43-clique operations can be replaced by the @xmath43-nlc operation @xmath124 where @xmath125 if there is an @xmath84 operation in the group .",
    "it is clear that these replacements in @xmath22 will give a parse - tree constructing @xmath13 with @xmath43-nlc operations on the same set of source labels @xmath45 of cardinality @xmath12 .",
    "hence , we have @xmath126 .",
    "last inequality :    let @xmath13 be a weighted graph of @xmath43-m - cliquewidth at most @xmath12 and @xmath22 be a parse - tree constructing @xmath13 with @xmath43-m - clique operations on a set of source labels @xmath45 of cardinality @xmath12 .",
    "let @xmath127 be a set of source labels of cardinality @xmath128 , @xmath129 where @xmath130 .",
    "we define three bijections @xmath131 , @xmath132 , and @xmath133 such that @xmath134 .",
    "we will denote by @xmath135 a sequence of @xmath136 @xmath43-clique operations realizing a function @xmath137 from @xmath127 to @xmath127 .",
    "we associate to each function @xmath88 a sequence @xmath138 consisting of @xmath139 ( resp .",
    "@xmath140 ) @xmath43-clique operations for all couples @xmath141 such that @xmath142 ( resp .",
    "@xmath143 ) , @xmath144 and @xmath145 .    we can replace the @xmath43-m - clique operation @xmath70 by the @xmath43-clique operation @xmath146 if @xmath147 and @xmath148 otherwise .",
    "each @xmath43-m - clique operation @xmath149 will be replaced by the following @xmath43-clique operations :    * apply @xmath150 to the subtree constructing @xmath78 .",
    "* make a @xmath123 @xmath43-clique operation . *",
    "apply @xmath138 . *",
    "apply @xmath151 . *",
    "apply @xmath152 .",
    "it is clear that these replacements in @xmath22 will give a parse - tree constructing @xmath13 with @xmath43-clique operations on the set of source labels @xmath127 of cardinality @xmath128 .",
    "hence , we have @xmath153 .      in this paper",
    "we take a graph theoretic approach to deal with permanent and hamiltonian polynomials .",
    "the reason for this is that a natural way to define pathwidth , treewidth or cliquewidth of a matrix @xmath154 is by the width of the graph @xmath42 ( see section [ sec : pathwidthandtreewidth ] ) , also see e.g.  @xcite .",
    "a _ cycle cover _ of a directed graph is a subset of the edges , such that these edges form disjoint , directed cycles ( loops are allowed ) .",
    "furthermore , each vertex in the graph must be in one ( and only one ) of these cycles .",
    "the _ weight _ of a cycle cover is the product of weights of all participating edges .",
    "[ permdef ] the _ permanent _ of an @xmath35 matrix @xmath36 is the sum of weights of all cycle covers of @xmath42 .",
    "the permanent of @xmath154 can also be defined by the formula @xmath155 the equivalence with definition  [ permdef ] is clear since any permutation can be written down as a product of disjoint cycles , and this decomposition is unique .",
    "the _ hamiltonian _",
    "polynomial @xmath156 is defined similarly , except that we only sum over cycle covers consisting of a _ single _ cycle ( hence the name ) .    there is a natural way of representing polynomials by permanents . indeed ,",
    "if the entries of @xmath154 are variables or constants from some field @xmath157 , then @xmath158 is a polynomial with coefficients in @xmath157 ( in valiant s terminology , @xmath137 is a projection of the permanent polynomial ) . in the next sections we study the power of this representation in the case where @xmath154 has bounded pathwidth or bounded cliquewidth .",
    "another combinatorial characterization of the permanent is by sum of weights of perfect matchings in a bipartite graph .",
    "we will use this connection to deduce results for the permanent from results for the sum of weights of perfect matchings and vice versa .",
    "let @xmath13 be a directed graph ( weighted or not ) .",
    "we define the _ inside - outside graph _ of @xmath13 , denoted @xmath159 , as the bipartite , undirected graph ( weighted or not ) obtained as follows :    * split each vertex @xmath160 in two vertices @xmath161 and @xmath162 ; * each arc @xmath163 ( of weight @xmath86 ) is replaced by an edge between @xmath161 and @xmath164 ( of weight @xmath86 ) .",
    "a loop on @xmath165 ( of weight @xmath86 ) is replaced by an edge between @xmath161 and @xmath162 ( of weight @xmath86 ) .",
    "it is well - known that the permanent of a matrix @xmath154 can be defined as the sum of weights of all perfect matchings of @xmath166 .",
    "we can see that the adjacency matrix of @xmath166 is @xmath167 .",
    "[ twio ] if @xmath13 has treewidth ( pathwidth ) @xmath12 , then @xmath159 has treewidth ( pathwidth ) at most @xmath168 .",
    "let @xmath169 be a @xmath12-tree(path)-decomposition of @xmath13 .",
    "it is clear that @xmath170 , where @xmath171 , is a tree(path)-decomposition of @xmath159 of width @xmath168 .",
    "[ cwio ] if @xmath13 has @xmath43-cliquewidth @xmath12 , then @xmath159 has @xmath43-cliquewidth at most @xmath172 .",
    "let @xmath22 be a parse - tree constructing @xmath13 with @xmath43-clique operations on a set of source labels @xmath45 of cardinality @xmath12 .",
    "we can replace the @xmath43-clique operation @xmath46 by the three operations @xmath173 , and the @xmath43-clique operation @xmath49 by the @xmath43-clique operations @xmath174 and @xmath175 .",
    "finally each @xmath84 @xmath43-clique operation can be replaced by the @xmath176 @xmath43-clique operation .",
    "it is clear that these replacements in @xmath22 will give a parse - tree constructing @xmath159 with @xmath43-clique operations on the set of source labels @xmath177 of size @xmath172 .",
    "in this section we study the expressive power of permanents , hamiltonians and perfect matchings of matrices of bounded pathwidth .",
    "we will prove that in each case we capture exactly the families of polynomials computed by polynomial size skew circuits of bounded width .",
    "a by - product of these proofs will be a proof of the equivalence between polynomial size skew circuits of bounded width and polynomial size _",
    "weakly _ skew circuits of bounded width .",
    "this equivalence can not be immediately deduced from the already known equivalence between polynomial size skew circuits and polynomial size weakly skew circuits in the unbounded width case  @xcite ( the proofs in  @xcite use a combinatorial characterization of the complexity of the determinant as the sum of weights of @xmath178-paths in a graph of polynomial size with distinguished vertices @xmath179 and @xmath180 . the additional difficulties to extend these proofs to circuits and graphs of bounded width would be equivalent to the ones we deal with ) .",
    "we will then prove that skew circuits of bounded width are equivalent to arithmetic formulas .",
    "an arithmetic circuit @xmath181 has _ bounded width _",
    "@xmath182 if there exists a finite set of totally ordered layers such that :    * each gate of @xmath181 is contained in exactly 1 layer .",
    "* each layer contains at most @xmath12 gates . * for every non - input gate of @xmath181 if that gate is in some layer @xmath183 , then both inputs to it are in layer @xmath184 .",
    "[ bwcircuittoperm ] the polynomial computed by a weakly skew circuit of bounded width can be expressed as the permanent of a matrix of bounded pathwidth .",
    "the size of the matrix is polynomial in the size of the circuit .",
    "all entries in the matrix are either 0 , 1 , constants of the polynomial , or variables of the polynomial .",
    "let @xmath181 be a weakly skew circuit of bounded width @xmath182 and @xmath185 the number of layers in @xmath181 .",
    "the directed graph @xmath13 we construct will have pathwidth at most @xmath186 ( each bag in the path - decomposition will contain at most @xmath187 vertices ) and the number of bags in the path - decomposition will be @xmath188 .",
    "@xmath13 will have two distinguished vertices @xmath179 and @xmath180 , and the sum of weights of all directed paths from @xmath179 to @xmath180 equals the value computed by @xmath181 .",
    "the vertex @xmath179 will be in all bags of the path - decomposition of @xmath13 .",
    "since @xmath181 is a weakly skew circuit we consider a decomposition of it into disjoint subcircuits defined recursively as follows : the output gate of @xmath181 belongs to the _",
    "main subcircuit_. if a gate in the main subcircuit is an addition gate , then both of its input gates are in the main subcircuit as well .",
    "if a gate @xmath189 in the main subcircuit is a multiplication gate , then we know that at least one input to @xmath189 is the output gate of a subcircuit which is disjoint from @xmath181 except for its connection to @xmath189",
    ". this subcircuit forms a _",
    "disjoint multiplication - input subcircuit_. the other input to @xmath189 belongs to the main subcircuit .",
    "if some disjoint multiplication - input subcircuit @xmath190 contains at least one multiplication gate , then we make a decomposition of @xmath190 recursively .",
    "note that such a decomposition of a weakly skew circuit not necessarily is unique ( nor does it need to be ) , because _ both _ inputs to a multiplication gate can be disjoint from the rest of the circuit , and then any one of these two can be chosen as the one that belongs to the main subcircuit .",
    "let @xmath191 be the disjoint subcircuits obtained in the decomposition ( @xmath192 is the main subcircuit ) .",
    "the graph @xmath13 will have a vertex @xmath193 for every gate @xmath189 of @xmath181 and @xmath194 additional vertices @xmath195 ( @xmath180 will correspond to @xmath193 where @xmath189 is the output gate of @xmath181 ) .",
    "for every gate @xmath189 in the subcircuit @xmath196 , the following construction will ensure that the sum of weights of directed paths from @xmath197 to @xmath193 is equal to the value computed at @xmath189 in @xmath181 .    for the construction of @xmath13 we process the _ decomposition _ of @xmath181 in a bottom - up manner .",
    "let subcircuit @xmath196 be a leaf in the decomposition of @xmath181 ( so @xmath196 consists solely of addition gates and input gates ) .",
    "assume that @xmath196 is located in layers @xmath198 through @xmath199 ( @xmath200 ) of @xmath181 .",
    "first we add a vertex @xmath197 to @xmath13 in bag @xmath201 , and for each input gate with value @xmath86 in the bottom layer @xmath199 of @xmath196 we add a vertex to @xmath13 also in bag @xmath201 along with an edge of weight @xmath86 from @xmath197 to that vertex .",
    "let @xmath183 range from @xmath201 to @xmath198 : add the already created vertex @xmath197 to bag @xmath202 and handle input gates of @xmath196 in layer @xmath183 as previously described .",
    "for each addition gate of @xmath196 in layer @xmath183 we add a new vertex to @xmath13 ( which is added to bags @xmath183 and @xmath202 of the path - decomposition of @xmath13 ) . in bag @xmath183",
    "we already have two vertices that represent inputs to this addition gate , so we add edges of weight 1 from both of these to the newly added vertex .",
    "the vertex representing the output gate of the circuit @xmath196 is denoted by @xmath203 .",
    "the sum of weighted directed paths from @xmath197 to @xmath203 equals the value computed by the subcircuit @xmath196 .",
    "let @xmath196 be a subcircuit in the decomposition of @xmath181 that contains multiplication gates .",
    "addition gates and input gates in @xmath196 are handled as before .",
    "let @xmath189 be a multiplication gate in @xmath196 in layer @xmath183 and @xmath204 the disjoint multiplication - input subcircuit that is one of the inputs to @xmath189 .",
    "we know that vertices @xmath205 and @xmath206 already are in bag @xmath183 , so we add an edge of weight 1 from the vertex representing the other input to @xmath189 to the vertex @xmath205 , and an edge of weight 1 from @xmath206 to a newly created vertex @xmath193 that represents gate @xmath189 , and then @xmath193 is added to bags @xmath183 and @xmath202 .    for every @xmath51 ( @xmath207 ) we need to show that only a constant number of vertices are added to bag @xmath51 during the entire process .",
    "every gate in layer @xmath51 of @xmath181 is represented by a vertex , and these vertices may all be added to bag @xmath51 . every gates in layer @xmath208",
    "are also represented by a vertex , and all of these are added to bag @xmath51 ( because they are used as input here ) .",
    "so far we have at most @xmath172 gate vertices in each bag .",
    "in addition a number of @xmath197 vertices are also added to bag @xmath51 . for each subcircuit",
    "@xmath204 that has a gate in layer @xmath51 or @xmath208 , we have the corresponding @xmath205 vertex in bag @xmath51 , so what remains is to show that at most @xmath209 disjoint subcircuits have a gate in layer @xmath51 or @xmath208 .",
    "each of these subcircuits are in exactly one of the following 3 sets :    * subcircuits that have a gate in layer @xmath51 , but none of them are multiplication gates . *",
    "subcircuits that do have a multiplication gate in layer @xmath51 . *",
    "subcircuits that have their root in layer @xmath208 .",
    "there are at most @xmath210 subcircuits in the set @xmath211 .",
    "otherwise , since two inputs to a multiplication gate are in different subcircuits and since subcircuits in @xmath211 are disjoint layer @xmath208 would contain at least @xmath212 gates and thus have width more than @xmath12 . by how subcircuits are constructed ,",
    "all subcircuits in @xmath213 are considered as the disjoint multiplication - input subcircuit of distinct multiplication gates in layer @xmath51 , so there are at least @xmath214 multiplication gates in layer @xmath51",
    ". since subcircuits in @xmath215 do not have multiplication gates in layer @xmath51 we have that @xmath216 .",
    "thus , at most @xmath217 distinct subcircuits have their @xmath197 vertex added to bag @xmath51 . note that in layer @xmath218 of @xmath181 we just have the output gate .",
    "this gate is represented by the vertex @xmath180 of @xmath13 which is in bag @xmath218 of the path - decomposition .",
    "the sum of weights of all directed paths from @xmath179 to @xmath180 in @xmath13 can by induction be shown to be equal to the value computed by @xmath181 .",
    "the final step in the reduction to the permanent polynomial is to add an edge of weight @xmath218 from @xmath180 back to @xmath179 and loops of weight @xmath218 at all nodes different from @xmath179 and @xmath180 .",
    "the proof of theorem  [ bwcircuittoperm ] can be modified to work for the hamiltonian polynomial as well .",
    "we adapt the idea used to show universality of the hamiltonian polynomial in @xcite . for the permanent polynomial",
    "each bag in the path - decomposition contains at most @xmath187 vertices ; for each of these vertices we now need to introduce one extra vertex in the same bag .",
    "in addition each bag must contain 2 more vertices in order to establish a connection to adjacent bags in the path - decomposition .",
    "in total each bag now contains at most @xmath219 vertices .",
    "[ bwcircuittomatch ] the polynomial computed by a weakly skew circuit of bounded width can be expressed as the sum of weights of perfect matchings of a symmetric matrix of bounded pathwidth .",
    "the size of the matrix is polynomial in the size of the circuit .",
    "all entries in the matrix are either 0 , 1 , constants of the polynomial , or variables of the polynomial .",
    "it is a direct consequence of theorem  [ bwcircuittoperm ] and lemma  [ twio ] .",
    "now we prove that the permanent , the hamiltonian , and the sum of weights of perfect matchings of a bounded pathwidth graph can be expressed as a skew circuit of bounded width .",
    "[ pathwidthhamtocircuit ] the hamiltonian of a matrix of bounded pathwidth can be expressed as a skew circuit of bounded width .",
    "the size of the circuit is polynomial in the size of the matrix .",
    "let @xmath154 be a matrix of bounded pathwidth @xmath12 and let @xmath42 be the underlying , directed graph .",
    "each bag in the path - decomposition of @xmath42 contains at most @xmath220 vertices .",
    "we refer to one end of the path - decomposition as the _ leaf _ of the path - decomposition and the other as the _ root _ ( recall that path - decompositions are special cases of tree - decompositions ) .",
    "we process the path - decomposition of @xmath42 from the leaf towards the root .",
    "the overall idea is the same as the proof of theorem 5 in @xcite  namely to consider weighted partial path covers ( i.e. partial covers consisting solely of paths ) of subgraphs of @xmath42 that are induced by the path - decomposition of @xmath42 . during the processing of the path - decomposition of @xmath42 at every level distinct from the root ,",
    "new partial path covers are constructed by taking one previously generated partial path cover and then add at most @xmath221 new edges , so all the multiplication gates we have in our circuit are skew . for any bag in the path - decomposition of @xmath42 we only need to consider a number of partial path covers that depends solely on @xmath12 , so the circuit we produce has bounded width . at the root",
    "we add sets of edges to partial path covers to form hamiltonian cycles .    [ pathwidthmatchtocircuit ] the sum of weights of perfect matchings of a symmetric matrix of bounded pathwidth can be expressed as a skew circuit of bounded width .",
    "the size of the circuit is polynomial in the size of the matrix .",
    "let @xmath154 be a symmetric matrix of bounded pathwidth @xmath12 and let @xmath42 be the underlying , undirected graph .",
    "each bag in the path - decomposition of @xmath42 contains at most @xmath220 vertices .",
    "we process the path - decomposition of @xmath42 from the leaf towards the root .",
    "the proof is very similar to the proof of theorem [ pathwidthhamtocircuit ]  namely to consider weighted matchings of subgraphs of @xmath42 that are induced by the matching of @xmath42 . during the processing of the matching of @xmath42 at every level distinct from the root ,",
    "new matchings are constructed by taking one previously generated matching and then add at most @xmath221 new edges , so all the multiplication gates we have in our circuit are skew . for any bag in the path - decomposition of @xmath42",
    "we only need to consider a number of matchings that depends solely on @xmath12 , so the circuit we produce has bounded width . at the root",
    "we sum only the weights of _ perfect _ matchings to obtain the output of the circuit .",
    "[ pathwidthtocircuit ] the permanent of a matrix of bounded pathwidth can be expressed as a skew circuit of bounded width .",
    "the size of the circuit is polynomial in the size of the matrix .",
    "it is a direct consequence of theorem  [ pathwidthmatchtocircuit ] and lemma  [ twio ] .",
    "a family of polynomials is computable by polynomial size skew circuits of bounded width if and only if it is computable by polynomial size weakly skew circuits of bounded width .",
    "it is trivial to see that a family of polynomials computed by polynomial size skew circuits of bounded width can be computed by polynomial size weakly skew circuits of bounded width .",
    "conversely , if a family of polynomials is computed by polynomial size weakly skew circuits of bounded width then by theorem [ bwcircuittoperm ] it can be expressed as the permanents of bounded pathwidth graphs which can be computed by polynomial size skew circuits of bounded width according to theorem  [ pathwidthtocircuit ] .    we need the following theorem from @xcite to prove the equivalence between polynomial size skew circuits of bounded width and polynomial size arithmetic formulas .",
    "[ formtolbs ] any arithmetic formula can be computed by a linear bijection straight - line program of polynomial size that uses three registers .",
    "let @xmath222 be a set of @xmath223 registers , a linear bijection straight - line ( lbs ) program is a vector of @xmath223 initial values given to the registers plus a sequence of instructions of the form    * @xmath224 , or *",
    "@xmath225 , or * @xmath226 , or * @xmath227 ,    where @xmath228 , @xmath229 , @xmath230 , @xmath231 is a constant , and @xmath232 are variables ( @xmath183 is the number of variables ) .",
    "we suppose without loss of generality that the value computed by the lbs program is the value in the first register after all instructions have been executed .",
    "[ formulaequisbw ] a family of polynomials is computable by polynomial size skew circuits of bounded width if and only if it is computable by a family of polynomial size arithmetic formulas .",
    "let @xmath233 be a family of polynomials computable by polynomial size skew circuits of bounded width , then by theorem [ bwcircuittoperm ] it can be expressed as the permanents of bounded pathwidth graphs . since graphs of bounded pathwith have bounded treewidth , we know by theorem 5 in  @xcite that it can be computed by a family of polynomial size arithmetic formulas .",
    "conversely , if @xmath233 is a family of polynomial size arithmetic formulas , then by theorem  [ formtolbs ] , it is computable by linear bijection straight - line programs of polynomial size that use three registers .",
    "we will modify these programs to obtain equivalent skew circuits of width 6 . at each step , the set of indices @xmath234 will be equal to @xmath235 .",
    "suppose the initial values of the three registers are @xmath236 , then the first layer of our skew circuit contains three input gates with the three values @xmath236 along with two others inputs which will be defined according to the next instruction in the straight - line program .",
    "if the next instruction is @xmath237 where @xmath238 is a variable or a constant , then we assign the values @xmath239 and @xmath238 to the two input gates not already defined in the current layer @xmath240 and we create a new layer @xmath188 with three addition gates corresponding to @xmath241 whose inputs are the gate corresponding to @xmath242 ( resp .",
    "@xmath243 ) in layer @xmath240 and the input with value @xmath239 in layer @xmath240 .",
    "we also put a multiplication gate whose inputs are the gate corresponding to @xmath242 and the input with value @xmath238 in layer @xmath240 . and we put again an input gate with value @xmath239 . then we create a new layer @xmath244 with three addition gates corresponding to @xmath241 whose inputs are the gate corresponding to @xmath242 ( resp .",
    "@xmath243 ) and the input with value @xmath239 for @xmath245 or the gate computing @xmath246 for @xmath247 in layer @xmath188 .",
    "we also put two others inputs which will be defined according to the next instruction .    if the next instruction is @xmath248 , then we need to create one more layer than in the first case .",
    "we first assign the values @xmath239 and @xmath238 to the two input gates not already defined in the current layer @xmath240 and we create a new layer @xmath188 with three addition gates corresponding to @xmath241 whose inputs are the gate corresponding to @xmath242 ( resp .",
    "@xmath243 ) in layer @xmath240 and the input with value @xmath239 in layer @xmath240 .",
    "we also put a multiplication gate whose inputs are the gate corresponding to @xmath242 and the input with value @xmath238 in layer @xmath240 .",
    "and we put again an input gate with value @xmath239 and another one with value @xmath249 .",
    "then we create an intermediate new layer @xmath244 with three addition gates corresponding to @xmath241 whose inputs are the gate corresponding to @xmath242 ( resp .",
    "@xmath243 ) and the input with value @xmath239 .",
    "we also put a multiplication gate whose inputs are the gate computing @xmath246 and the input with value @xmath249 in layer @xmath188 . and we put again an input gate with value @xmath239 .",
    "finally we create a new layer @xmath250 with three addition gates corresponding to @xmath241 whose inputs are the gate corresponding to @xmath242 ( resp .",
    "@xmath243 ) and the input with value @xmath239 for @xmath245 or the gate computing @xmath251 for @xmath247 in layer @xmath244 .",
    "we also put two others inputs which will be defined according to the next instruction .    in both cases , it is clear by induction that the three gates of the current layer corresponding to @xmath241 are computing the values in these registers if we execute the instructions treated so far .",
    "hence the result .",
    "in this section we study the expressive power of permanents , hamiltonians and perfect matchings of matrices that have bounded weighted cliquewidth .    we first prove that every arithmetic formula can be expressed as the permanent , hamiltonian , or sum of weights of perfect matchings of a matrix of bounded @xmath43-cliquewidth , using the results for the bounded pathwidth matrices and the following lemma .",
    "[ pwcw ] let @xmath13 be a weighted graph ( directed or not ) with weights in @xmath43 .",
    "if @xmath13 has pathwidth @xmath12 , then @xmath13 has @xmath43-cliquewidth at most @xmath252 .",
    "let @xmath169 be a @xmath12-path - decomposition of @xmath13 .",
    "we refer to one end of the path - decomposition as the _ leaf _ of the path - decomposition and the other as the _ root_. let @xmath253 be the subgraph of @xmath13 induced by the vertices in bags below @xmath23 .",
    "we prove by induction on the height of @xmath169 that every graph @xmath253 can be constructed by @xmath43-clique operations using at most @xmath252 distinct labels .",
    "moreover , at the end of this construction all vertices in bag @xmath23 have distinct labels and all other vertices have a _ sink _ label .    if @xmath254 then @xmath13 has at most @xmath220 vertices .",
    "we can create them with @xmath220 distinct labels and add independently each edge between two vertices using @xmath43-clique operations .",
    "suppose @xmath255 , let @xmath256 be the root and @xmath180 be its child .",
    "by induction , @xmath253 can be constructed by @xmath43-clique operations using at most @xmath252 distinct labels . for all vertex @xmath257 , we add a renaming operation which gives _ sink _ label to @xmath258 ( this renaming operation renames only @xmath258 since , by induction",
    ", @xmath258 has distinct label from other vertices ) .",
    "since @xmath259 and all vertices in @xmath260 have _ sink _ label , we can create the vertices of @xmath261 with distinct labels and add them by disjoint union to the current construction .",
    "it is now clear that all the vertices of @xmath262 have distinct labels thus we can add independently each edge between two vertices . hence the conclusion .",
    "[ formtopermclique ] every arithmetic formula can be expressed as the permanent of a matrix of @xmath43-cliquewidth at most @xmath263 and size polynomial in @xmath183 , where @xmath183 is the size of the formula .",
    "all entries in the matrix are either 0 , 1 , constants of the formula , or variables of the formula .",
    "let @xmath181 be a formula of size @xmath183 .",
    "due to the proof of theorem  [ formulaequisbw ] , we know that it can be computed by a skew circuit of width 6 and size @xmath264 .",
    "hence it is equal to the permanent of a graph of size @xmath264 , pathwidth at most @xmath265 by theorem  [ bwcircuittoperm ] , and @xmath43-cliquewidth at most @xmath266 by lemma  [ pwcw ] .",
    "for the hamiltonian the @xmath43-cliquewidth becomes @xmath267 instead .",
    "[ formtomatchclique ] every arithmetic formula can be expressed as the sum of weights of perfect matchings of a symmetric matrix of @xmath43-cliquewidth at most @xmath268 and size polynomial in @xmath183 , where @xmath183 is the size of the formula .",
    "all entries in the matrix are either 0 , 1 , constants of the formula , or variables of the formula .",
    "it is a direct consequence of theorem  [ formtopermclique ] and lemma  [ cwio ] .",
    "alternatively we can modify the constructions of bounded treewidth graphs expressing formulas in  @xcite .",
    "these modifications require more work than the preceding proofs but we obtain smaller constants since we obtain graphs of @xmath43-cliquewidth at most 13/34/26 ( instead of 22/45/44 ) whose permanent / hamiltonian / sum of weights of perfect matchings are equal to formulas .",
    "the proofs of these constants are given in the appendix .",
    "due to our restrictions on how weights are assigned in our definition of bounded @xmath43-cliquewidth it is not true that _ weighted _ graphs of bounded treewidth have bounded @xmath43-cliquewidth .",
    "in fact , if one tries to follow the proofs in @xcite that show that graphs of bounded treewidth have bounded cliquewidth , then one obtains that a weighted graph @xmath13 of treewidth @xmath12 has @xmath43-cliquewidth at most @xmath269 or @xmath270 .",
    "@xmath271 denotes the set of weights on the edges of @xmath13 and @xmath272 is the maximum degree of @xmath13 .",
    "weighted trees still have bounded weighted cliquewidth ( the bound is 3 ) , but we can show that there exists a family of weighted graphs with treewidth 2 and unbounded @xmath43-cliquewidth  @xcite .",
    "we now turn to the upper bound on the complexity of the permanent , hamiltonian , and sum of weights of perfect matchings of graphs of bounded weighted cliquewidth .",
    "we show that in all three cases the complexity is at most the complexity of .",
    "the decision version of the hamiltonian cycle problem has been shown to be polynomial time solvable in @xcite for matrices of bounded cliquewidth . here",
    "we extend these ideas in order to compute the hamiltonian polynomial efficiently ( in @xmath0 ) for bounded @xmath43-m - cliquewidth matrices .",
    "a _ path cover _ of a directed graph @xmath13 is a subset of the edges of @xmath13 , such that these edges form disjoint , directed , non - cyclic paths in @xmath13 .",
    "we require that every vertex of @xmath13 is in ( exactly ) one path . for technical reasons we allow `` paths '' of length 0 , by having paths that start and end in the same vertex .",
    "such constructions do _ not _ have the same interpretation as a loop .",
    "the _ weight _ of a path cover is the product of weights of all participating edges ( in the special case where there are no participating edges the weight is defined to be 1 ) .",
    "[ hamilcliquetocircuit ] the hamiltonian of an @xmath273 matrix of bounded @xmath43-m - cliquewidth can be expressed as a circuit of size @xmath264 and thus is in @xmath0 .",
    "let @xmath154 be an @xmath273 matrix of bounded @xmath43-m - cliquewidth .",
    "by @xmath13 we denote the underlying , directed , weighted graph for @xmath154 .",
    "the circuit is constructed based on the parse - tree @xmath22 for @xmath13 . by @xmath274",
    "we denote the subtree of @xmath22 rooted at @xmath180 for some node @xmath275 . by @xmath253",
    "we denote the subgraph of @xmath13 constructed from the parse - tree @xmath274 .    the overall idea is to produce a circuit that computes the sum of weights of all hamiltonian cycles of @xmath13 . to obtain this",
    "there will be non - output gates that compute weights of all path covers of all @xmath253 graphs , and then we combine these subresults .",
    "of course , the total number of path covers can grow exponentially with the size of @xmath253 , so we will not `` describe '' path covers directly by the edges participating in the covers .",
    "instead we describe a path cover of some @xmath253 graph by the labels associated with the start- and end - vertices of the paths in the cover . such a description",
    "do not uniquely describe a path cover , because two different path covers of the same graph can contain the same number of paths and all these paths can have the same labels associated .",
    "however , we do not need the weight of each individual path cover .",
    "if multiple path covers of some graph @xmath253 share the same description , then we just compute the sum of weights of these path covers .    for a leaf in the parse - tree @xmath22 of @xmath13",
    "we construct a single gate of constant weight 1 , representing a path cover consisting of a single `` path '' of length 0 , starting and ending in a vertex with the given labels . per definition",
    "this path cover has weight 1 .    for an internal node @xmath275",
    "the grammar rule describes which edges to add and how to relabel vertices .",
    "we obtain new path covers by considering a path cover from the left child of @xmath180 and a path cover from the right child of @xmath180 : for each such pair of path covers consider all subsets of edges added at node @xmath180 , and for every subset of edges check if the addition of these edges to the pair of path covers will result in a valid path cover . if it does , then add a gate that computes the weight of this path cover , by multiplying the weight of the left path cover , the weight of the right path cover and the total weight of the newly added edges .",
    "after all pairs of path covers have been processed , check if any of the resulting path covers have the same description - namely that the number of paths in some path covers are the same , and that these paths have the same labels for start- and end - vertices .",
    "if multiple path covers have the same description then add addition gates to the circuit and produce a single gate which computes the sum of weights of all these path covers .",
    "for the root node @xmath256 of @xmath22 we combine path covers from the children of @xmath256 to produce hamiltonian cycles , instead of path covers . finally , the output of the circuit is a summation of all gates computing weights of hamiltonian cycles .",
    "proof of correctness : the first step of the proof is by induction over the height of the parse - tree @xmath22 .",
    "we will show that for each non - root node @xmath180 of @xmath22 there is for every path cover description of @xmath253 a corresponding gate in the circuit that computes the sum of weights of all path covers of @xmath253 with that description .",
    "for the base cases - leaves of @xmath22 - it is trivially true .    for the inductive step we consider two disjoint graphs that are being connected with edges at a node @xmath180 of the parse - tree @xmath22 .",
    "edges added at node @xmath180 are _ only _ added in here , and not at any other nodes in @xmath22 , so every path cover of @xmath253 can be split into 3 parts : a path cover of @xmath276 , a path cover of @xmath277 and a polynomial number of edges added at node @xmath180 . consider a path cover description along with all path covers of @xmath253 that have this description .",
    "all of these path covers can be split into 3 such parts , and by our induction hypothesis the weights of the path covers of @xmath276 and @xmath277 are computed in already constructed gates .    in order to complete the proof of correctness we have to handle the root @xmath180 of @xmath22 in a special way . at the root",
    "we do not compute weights of path covers , but instead compute weights of hamiltonian cycles .",
    "every hamiltonian cycle of @xmath13 can ( similarly to path covers ) be split into 3 parts : a path cover of @xmath276 , a path cover of @xmath277 and a polynomial number of edges added at the root of @xmath22 . by our induction hypothesis all the needed weights are already computed .    the size of the circuit is polynomial since at each step the number of path cover descriptions is polynomially bounded once the @xmath43-m - cliquewidth is bounded .",
    "[ matchtovp ] the sum of weights of perfect matchings of an @xmath273 symmetric matrix of bounded @xmath43-nlcwidth can be expressed as a circuit of size @xmath264 and thus is in @xmath0 .",
    "let @xmath154 be an @xmath273 symmetric matrix of bounded @xmath43-nlcwidth .",
    "by @xmath13 we denote the underlying , undirected , weighted graph for @xmath154 .",
    "the circuit is constructed based on the parse - tree @xmath22 for @xmath13 . by @xmath274",
    "we denote the subtree of @xmath22 rooted at @xmath180 for some node @xmath275 . by @xmath253",
    "we denote the subgraph of @xmath13 constructed from the parse - tree @xmath274 .",
    "let @xmath12 be the @xmath43-nlcwidth of @xmath13 .",
    "we assume without loss of generality that @xmath22 is a parse - tree on the set of labels @xmath278 .",
    "the overall idea is much similar to that of theorem  [ hamilcliquetocircuit ] , namely to produce a circuit that computes the sum of weights of all perfect matchings of @xmath13 . to obtain this",
    "there will be non - output gates that compute weights of all matchings of all @xmath253 graphs , and then we combine these subresults .",
    "of course , the total number of matchings can grow exponentially with the size of @xmath253 , so we will not `` describe '' matchings directly by the edges participating in the covers .",
    "instead we describe a matching of some @xmath253 graph by the labels associated to the uncovered vertices .",
    "more precisely , for each matching of @xmath253 and each label @xmath48 we give the number of @xmath48-vertices which are not covered by the matching .",
    "such a description do not uniquely describe a matching , because two different matchings of the same graph can have the same number of uncovered vertices which have the same labels associated .",
    "however , we do not need the weight of each individual matching .",
    "if multiple matchings of some graph @xmath253 share the same description , then we just compute the sum of weights of these matchings .",
    "it is clear that the number of description needed is at most @xmath279 .    for a leaf @xmath280 in the parse - tree @xmath22 of @xmath13",
    "we construct a single terminal gate of constant weight 1 , representing an empty matching . the description associated to this gate",
    "is @xmath281 .    for an internal node @xmath275 with operation",
    "@xmath59 we just need to change the description of terminal gates in the circuit contructed so far .",
    "more precisely , if the description of the gate was @xmath282 then it becomes @xmath283    for an internal node @xmath275 with operation @xmath62 the grammar rule describes which edges to add .",
    "we first create a multiplication gate using the values of each couple of terminal gates of the left child @xmath240 of @xmath180 and the right child @xmath256 of @xmath180 .",
    "it corresponds to the weights of the disjoint unions of the matchings of @xmath240 and @xmath256 .",
    "there is at most @xmath284 such gates . to each gate , we associate a left and right description corresponding to the vertices from @xmath240 and @xmath256 .",
    "those gates are the new terminal gates .",
    "we put the following total order @xmath285 on the labels and the corresponding lexicographic order on the couples @xmath286 .",
    "we will consider that the edges added via @xmath287 are added by blocks corresponding to a couple @xmath286 ( all edges in the same block are added at the same time ) and that all blocks of edges are added sequentially in lexicographic order .",
    "thus we have at most @xmath288 steps of adding edges to consider .",
    "suppose @xmath289 .",
    "for the step corresponding to @xmath286 we obtain new matchings by considering each terminal gate @xmath290 .",
    "let @xmath291 and @xmath292 be the left and right description of @xmath290 .",
    "let @xmath293 .",
    "for all matching corresponding to @xmath290 and all @xmath294 between @xmath239 and @xmath295 we can obtain @xmath296 matchings by adding @xmath294 edges of weight @xmath297 between @xmath294 vertices among @xmath298 of @xmath299 and @xmath294 vertices among @xmath300 of @xmath301 .",
    "hence , for all @xmath302 we add a multiplication gate with inputs @xmath290 and the constant @xmath303 .",
    "this new gate @xmath304 has left and right description @xmath305 and @xmath306 .",
    "there are at most @xmath307 such new gates since @xmath308 .",
    "finally we make an addition tree computing the addition of the gates @xmath304 which have the same left and right description .",
    "each such tree needs at most @xmath309 new gates and there are at most @xmath310 trees .",
    "the outputs of these trees are the new terminal gates .",
    "when all the @xmath288 steps of adding edges are done we compute the description of each terminal gate as the sum of its left and right description then we put an addition tree computing the addition of the terminal gates which have the same global description .",
    "the outputs of these trees are the new terminal gates .",
    "finally , we obtain the output of the circuit at the root node @xmath256 of @xmath22 .",
    "it is the output of the terminal gate with description @xmath311 .",
    "proof of correctness : the first step of the proof is by induction over the height of the parse - tree @xmath22 .",
    "we will show that for each node @xmath180 of @xmath22 there is for every matching description of @xmath253 a corresponding gate in the circuit that computes the sum of weights of all matchings of @xmath253 with that description .",
    "for the base cases - leaves of @xmath22 - it is trivially true .    for the inductive step",
    "we consider two disjoint graphs that are being connected with edges at a node @xmath180 of the parse - tree @xmath22 .",
    "edges added at node @xmath180 are _ only _ added in here , and not at any other nodes in @xmath22 , so every matching of @xmath253 can be split into 3 parts : a matching of @xmath276 , a matching of @xmath277 and a polynomial number of edges added at node @xmath180 . consider a matching description along with all matchings of @xmath253 that have this description .",
    "all of these matchings can be split into 3 such parts , and by our induction hypothesis the weights of the path covers of @xmath276 and @xmath277 are computed in already constructed gates .",
    "the number of new gates added for each operation @xmath62 is at most @xmath312 .",
    "since the number of these operations is at most @xmath183 , we obtain a circuit of polynomial size .",
    "the permanent of an @xmath273 matrix of bounded @xmath43-m - cliquewidth can be expressed as a circuit of size @xmath264 and thus is in @xmath0 .",
    "it is a direct consequence of theorem  [ matchtovp ] and lemma  [ cwio ] .",
    "much of this work was done while u.  flarup was visiting the ens lyon during the spring semester of 2007 .",
    "this visit was partially made possible by funding from ambassade de france in denmark , service de coopration et daction culturelle , ref.:39/2007-csu 8.2.1 .",
    "10    m. ben - or and r. cleve .",
    "computing algebraic formulas using a constant number of registers . in stoc 1988 , proceedings of the twentieth annual acm symposium on theory of computing , pages 254257 acm ( 1988 ) .",
    "d. corneil and u. rotics . on the relationship between clique - width and treewidth .",
    "siam journal on computing 34 , pages 825847 ( 2005 ) .",
    "b. courcelle , j. engelfriet and g. rozenberg .",
    "context - free handle - rewriting hypergraph grammars . in graph - grammars and",
    "their application to computer science , pages 253268 , 1990 .",
    "b. courcelle , j.  a. makowsky and u. rotics . on the fixed parameter complexity of graph enumeration problems",
    "definable in monadic second - order logic .",
    "discrete applied mathematics 108 , pages 2352 ( 2001 ) .",
    "b. courcelle and s. olariu .",
    "upper bounds to the clique width of graphs . discrete applied mathematics 101 , pages 77114 ( 2000 ) .",
    "b. courcelle and a. twigg .",
    "compact forbidden - set routing . in stacs 2007 ,",
    "proceedings of the 24th international symposium on theoretical aspects of computer science , volume 4393 of lecture notes in computer science , pages 3748 springer verlag ( 2007 ) .",
    "w. espelage , f. gurski and e. wanke . how to solve np - hard graph problems on clique - width bounded graphs in polynomial time .",
    "lecture notes in computer science 2204 ( 2001 ) .",
    "u. flarup , p. koiran and l. lyaudet . on the expressive power of planar perfect",
    "matching and permanents of bounded treewidth matrices . in isaac 2007 ,",
    "18th international symposium on algorithms and computation , volume 4835 of lecture notes in computer science , pages 124136 springer verlag ( 2007 ) .",
    "o. johansson .",
    "clique - decomposition , nlc - decomposition , and modular decomposition - relationships and results for random graphs .",
    "congressus numerantium 132 , pages 3960 ( 1998 ) .",
    "p.  w. kasteleyn .",
    "graph theory and crystal physics . in f. harary , editor , graph theory and theoretical physics , pages 43110 .",
    "academic press ( 1967 ) .",
    "l. lyaudet and i. todinca . private communication ( 2007 ) .",
    "j.  a. makowsky and k. meer .",
    "polynomials of bounded treewidth .",
    "foundations of computational mathematics , proceedings of the smalefest 2000 , felipe cucker and j. maurice rojas , edts . , world scientific 2002 , pages 211250 ( 2002 ) .",
    "polynmes et coefficients .",
    "ph.d . thesis ( 2003 ) .",
    "g. malod and n. portier .",
    "characterizing valiant s algebraic complexity classes .",
    "in mfcs 2006 , proceedings of the 31st international symposium on mathematical foundations of computer science , volume 4162 of lecture notes in computer science , pages 704716 springer verlag ( 2006 ) .",
    "classes of arithmetic circuits capturing the complexity of computing the determinant .",
    "ieice transactions on information and systems , e75-d , p. 116 - 124",
    "( 1992 ) .",
    "l.  g. valiant .",
    "completeness classes in algebra . in proc .",
    "11th acm symposium on theory of computing , pages 249261 ( 1979 ) .",
    "l.  g. valiant .",
    "reducibility by algebraic projections . in logic and algorithmic ( an international symposium held in honour of ernst specker ) , pages 365380 .",
    "monographie @xmath313 30 de lenseignement mathmatique ( 1982 ) .",
    "l.  g. valiant .",
    "the complexity of computing the permanent .",
    "theoretical computer science 8 , pages 181201 ( 1979 ) .",
    "k - nlc graphs and polynomial algorithms . discrete applied mathematics 54 , pages 251266 ( 1994 ) .",
    "[ formtopermclique2 ] every arithmetic formula can be expressed as the permanent of a matrix of @xmath43-cliquewidth at most @xmath314 and size polynomial in @xmath183 , where @xmath183 is the size of the formula .",
    "all entries in the matrix are either 0 , 1 , constants of the formula , or variables of the formula .",
    "let @xmath181 be a formula of size @xmath183 .",
    "due to @xcite we know that @xmath181 can be expressed as the permanent of a matrix @xmath154 that has treewidth at most @xmath315 and size at most @xmath316 .",
    "let @xmath13 be the underlying graph of @xmath154 and let @xmath14 be the @xmath315-tree - decomposition of @xmath13 . with only a linear increase in size of @xmath22 we can assume that @xmath22 is a binary tree - decomposition .",
    "based on the tree - decomposition @xmath22 of @xmath13 we construct a graph @xmath317 of bounded @xmath43-cliquewidth such that ( with slight abuse of notation ) @xmath318 .",
    "a major difference between grammars for bounded treewidth matrices and grammars for bounded cliquewidth matrices is that we can not `` merge '' two vertices into a single vertex when dealing with grammars for bounded cliquewidth matrices . as a consequence",
    "the graphs @xmath13 and @xmath317 will not be isomorphic , but there will be a 1 to 1 correspondence between their cycle covers .    for every non - loop edge @xmath319 of @xmath13 there can be multiple nodes @xmath15 such that @xmath165 and @xmath258 both are in the set @xmath23 .",
    "we say that an edge @xmath319 of @xmath13 `` belong '' to a node @xmath15 , if @xmath180 is the node _ closest _ to the root of @xmath22 where @xmath165 and @xmath258 both are in @xmath23 ( for every edge such a node is uniquely defined ) .",
    "the general idea for the construction of @xmath317 is as follows : we process @xmath22 in a bottom - up manner . for a node @xmath15 we first construct subgraphs representing the children @xmath240 and @xmath256 of @xmath180",
    ", then we add the edges belonging to @xmath180 using a special labeling scheme for the vertices .",
    "we do not have a label in the grammar for each vertex of @xmath13 because this will not result in a constant number of labels .",
    "instead , since @xmath320 and @xmath321 we use labels to represent vertices in @xmath322 and @xmath262 and reuse these labels during the processing of @xmath22 .",
    "a vertex @xmath258 of @xmath13 is represented through multiple vertices in @xmath317 , but only two of them are `` active '' at any time during the construction of @xmath317 : one vertex of indegree 0 is managing edges leaving @xmath258 in @xmath13 , and one vertex of outdegree 0 is managing edges entering @xmath258 in @xmath13 . since @xmath322 and @xmath262 both have size at most 3 we then need the following labels for this scheme : _ left - a - in , left - a - out , left - b - in , left - b - out , left - c - in _ and _ left - c - out _ ( and 6 similar labels for _ right _ ) .",
    "in addition to that we also need a _ sink _ label , giving a total of 13 labels needed to construct @xmath317 .",
    "processing @xmath22 to construct @xmath317 : for a leaf @xmath180 of @xmath22 we construct 6 vertices ( or 4 , if @xmath323 ) , with the labels _ left - a - in , left - a - out , left - b - in , left - b - out , left - c - in _ and _ left - c - out _ ( assuming @xmath180 is the left child of its parent ) . for non - loop edges belonging to node @xmath180 ,",
    "e.g. a directed edge from the vertex represented with labels _ left - b - in / out _ to the vertex represented with labels _ left - a - in / out _ of weight @xmath86 , we then add edges ( actually just a single edge is added because both of the labels are only assigned to one vertex of @xmath317 ) from vertices with label _ left - b - out _ to vertices with label _ left - a - in _ of weight @xmath86 .",
    "next , if a vertex of @xmath13 , e.g. the vertex represented by _ left - b - in / out _ , is not present in @xmath324 ( @xmath294 being the parent of @xmath180 in @xmath22 ) , then we add an edge of weight 1 from _ left - b - in _ to _ left - b - out_. furthermore , if that vertex has a loop of weight @xmath86 we add an edge of weight @xmath86 from _ left - b - out _ to _ left - b - in_. in both cases we then rename _ left - b - out _ and _ left - b - in _ to _",
    "sink_.    for an internal node @xmath15 ( including the root of @xmath22 ) we first consider vertices of @xmath13 that are in both @xmath322 and @xmath262 , e.g. _ left - a - in / out _ and _ right - b - in / out _ represent the same vertex of @xmath13 .",
    "we assume that @xmath180 is the left child of its parent in @xmath22 .",
    "we add a loop of weight 1 to each of _ right - b - in _ and _ right - b - out_. then we add an edge of weight 1 from _ right - b - in _ to _ left - a - in _ and an edge of weight 1 from _ left - a - out _ to _ right - b - out_. then _ right - b - in _ and _ right - b - out _ are renamed to _",
    "sink_. next we add two vertices to @xmath317 for every vertex in @xmath23 that are not in @xmath322 nor @xmath262 .",
    "there will be `` available '' _ in / out _ labels for these two vertices , since in this case at least two other vertices were renamed to _ sink _ during processing of each child of @xmath180 .",
    "next we consider all edges of @xmath13 belonging to @xmath180 .",
    "assume there is a directed edge from the vertex represented by _ right - c - in / out _ to the vertex represented by _ left - b - in / out _ of weight @xmath86 , then we add an edge of weight @xmath86 from _ right - c - out _ to _ left - b - in_. last , if a vertex of @xmath13 , e.g. the vertex represented by _ left - b - in / out _ , is not present in @xmath324 ( @xmath294 being the parent of @xmath180 in @xmath22 ) or if @xmath180 is the root of @xmath22 then we add an edge of weight 1 from _ left - b - in _ to _ left - b - out_. furthermore , if that vertex has a loop of weight @xmath86 we add an edge of weight @xmath86 from _ left - b - out _ to _ left - b - in_. in both cases we then rename _ left - b - out _ and _ left - b - in _ to _",
    "sink_.    proof of correctness : a vertex @xmath258 of @xmath13 is represented through two disjoint sets of vertices in @xmath317 : one set of vertices managing edges entering @xmath258 in @xmath13 , and one set of vertices managing edges leaving @xmath258 in @xmath13 .",
    "we denote these sets of vertices in @xmath317 as @xmath325 and @xmath326 .",
    "a vertex of @xmath317 belong to @xmath325 if at some point during the processing of @xmath22 it were assigned an _ in _ label which was representing @xmath258 in @xmath13 . by our construction",
    "it is clear that every vertex of @xmath317 belong to either @xmath325 or @xmath326 for exactly 1 vertex @xmath258 of @xmath13 , and the set @xmath325 form a directed tree where all non - loop edges lead towards the root and have weight 1 .",
    "all non - root vertices in this tree have a loop of weight 1 .",
    "the set @xmath326 has equivalent properties , with the exception that non - loop edges lead towards the leaves instead of the root .",
    "now consider two vertices @xmath165 and @xmath258 of @xmath13 along with a directed edge of weight @xmath86 from @xmath165 to @xmath258 , and consider the trees @xmath327 and @xmath325 in @xmath317 . at some point in the construction of @xmath317 an edge of weight @xmath86 was added from a vertex in @xmath327 to a vertex in @xmath325 in @xmath317 , so there is a path of weight @xmath86 from the root of @xmath327 to the root of @xmath325 and all vertices of @xmath327 and @xmath325 not in this path have a loop of weight 1 .",
    "so in a cycle cover of @xmath13 where we include the edge from @xmath165 to @xmath258 we then have an equivalent path in @xmath317 and all remaining vertices in @xmath327 and @xmath325 are then covered by loops .",
    "in order to `` continue '' the construction of the path in @xmath317 we then also have an edge of weight 1 from the root of @xmath325 to the root of @xmath326 . in order to simulate loops in cycle",
    "covers of @xmath317 we have added an edge from the root of @xmath326 back to the root of @xmath325 of same weight as the loop in @xmath13 .",
    "so a loop in @xmath13 corresponds to a cycle of length 2 in @xmath317 , and then all other nodes in both @xmath325 and @xmath326 are covered by loops of weight 1 .",
    "it is then easy to verify that cycle covers in @xmath317 are in bijection with cycle covers of @xmath13 and the corresponding pairs of cycle covers have same weight .",
    "finally , note that between any two vertices of @xmath317 there is at most 1 edge so we can find a matrix @xmath328 such that the underlying graph of @xmath328 is equivalent to @xmath317 and then @xmath329 .",
    "[ formtohamclique2 ] every arithmetic formula can be expressed as the hamiltonian of a matrix of @xmath43-cliquewidth at most 34 and size polynomial in @xmath183 , where @xmath183 is the size of the formula .",
    "all entries in the matrix are either 0 , 1 , or constants of the formula , or variables of the formula .",
    "let @xmath181 be a formula of size @xmath183 . due to @xcite we know that @xmath181 can be expressed as the hamiltonian of a matrix @xmath154 that has treewidth at most @xmath330 and size at most @xmath331 .",
    "let @xmath13 be the underlying , weighted , directed graph for the matrix @xmath154 and let @xmath14 be the binary @xmath330-tree - decomposition of @xmath13 . with only a linear increase in size of @xmath22 we can assume that @xmath22 is a binary tree - decomposition .",
    "the overall idea is the same as in theorem  [ formtopermclique2 ] - namely to process the tree - decomposition @xmath22 of @xmath13 . since all @xmath332 in this tree - decomposition",
    "we instead need at least @xmath333 labels during the processing of @xmath22 to construct @xmath317 .    however , if we just use the exact same idea as in theorem  [ formtopermclique ] , then for every cycle cover in the produced graph many vertices are covered through loops . instead of introducing such loops we `` eliminate '' them using the same idea as in @xcite used for showing universality of the hamiltonian polynomial .",
    "we need 5 additional labels for this construction : _ left - h1 , left - h2 , right - h1 , right - h2 _ and _ temp _ , for a total of 34 labels . for a leaf @xmath180 of @xmath22",
    "we start the processing of @xmath180 by constructing two vertices and label them _ left - h1 _ and _ left - h2 _ ( assuming @xmath180 is the left child of its parent in @xmath22 ) , and add an edge of weight 1 from _ left - h1 _ to _ left - h2_. remaining processing of @xmath180 is done as before .    for an internal node @xmath180 of @xmath22 we first add an edge of weight 1 from _ left - h2 _ to _ right - h1 _ , rename _ left - h2 _ and _ right - h1 _ to _ sink _ , and rename _ right - h2 _ to _ left - h2 _ ( assuming @xmath180 is the left child of its parent in @xmath22 ) .",
    "some vertices , e.g. the vertex with label _ right - c - in _ , may have a loop added during the processing of @xmath180 .",
    "instead of adding such a loop we do the following : add a new vertex with label _ temp _ , add an edge of weight 1 from _ left - h2 _ to _ right - c - in _ , add an edge of weight 1 from _ right - c - in _ to _ temp _ , add an edge of weight 1 from _ left - h2 _ to _ temp _ , rename _ left - h2 _ to _ sink _ , rename _ temp _ to _ left - h2_. remaining processing of @xmath180 is done as before .",
    "when we reach the root @xmath256 of @xmath22 we consider any vertex of @xmath262 , e.g. the vertex represented by labels _",
    "left - a - in / out_. in the final step , instead of adding an edge of weight 1 from _ left - a - in _ to _ left - a - out _ , we add an edge of weight 1 from _ left - a - in _ to _ left - h1 _ and an edge of weight 1 from _ left - h2 _ to _ left - a - out_. now , for every hamiltonian cycle of @xmath13 we break up the equivalent cycle of @xmath317 and visit any remaining vertices of @xmath317 along a path of total weight 1 .",
    "[ formtomatchclique2 ] every arithmetic formula can be expressed as the sum of weights of perfect matchings of a symmetric matrix of @xmath43-cliquewidth at most @xmath334 and size polynomial in @xmath183 , where @xmath183 is the size of the formula .",
    "all entries in the matrix are either 0 , 1 , constants of the formula , or variables of the formula ."
  ],
  "abstract_text": [
    "<S> some 25 years ago valiant introduced an algebraic model of computation in order to study the complexity of evaluating families of polynomials . </S>",
    "<S> the theory was introduced along with the complexity classes @xmath0 and @xmath1 which are analogues of the classical classes @xmath2 and @xmath3 . </S>",
    "<S> families of polynomials that are difficult to evaluate ( that is , @xmath1-complete ) includes the permanent and hamiltonian polynomials .    in a previous paper </S>",
    "<S> the authors together with p. koiran studied the expressive power of permanent and hamiltonian polynomials of matrices of bounded treewidth , as well as the expressive power of perfect matchings of planar graphs . </S>",
    "<S> it was established that the permanent and hamiltonian polynomials of matrices of bounded treewidth are equivalent to arithmetic formulas . </S>",
    "<S> also , the sum of weights of perfect matchings of planar graphs was shown to be equivalent to ( weakly ) skew circuits .    </S>",
    "<S> in this paper we continue the research in the direction described above , and study the expressive power of permanents , hamiltonians and perfect matchings of matrices that have bounded pathwidth or bounded cliquewidth . </S>",
    "<S> in particular , we prove that permanents , hamiltonians and perfect matchings of matrices that have bounded pathwidth express exactly arithmetic formulas . </S>",
    "<S> this is an improvement of our previous result for matrices of bounded treewidth . </S>",
    "<S> also , for matrices of bounded weighted cliquewidth we show membership in @xmath0 for these polynomials . </S>"
  ]
}