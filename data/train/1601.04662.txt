{
  "article_text": [
    "applications of fast fourier transform ( fft ) have spread to a very diverse field in applied mathematics and electrical engineering and even the origin of the fft goes back to analysis of the rotation of helium molecule @xcite . by now j. dongarra and f. sullivan",
    "have categorized fft as one of the top 10 algorithms of the computer age which had the greatest influence on the development and practice of science and engineering in the 20@xmath2 century .",
    "fft is used to compute discrete fourier transform ( dft ) and its inverse efficiently . on the other hand dft implementation algorithms",
    "employ fft so fft and dft are sometimes used interchangeably .",
    "discrete sine transform ( dst ) is a fourier - related transform similar to the dft , but using a purely real matrix . among applications of the dft ;",
    "sine and cosine waves of the dft with different frequencies are used to classify the traffic monitoring sites into different seasonal patterns @xcite , dst has been identified as the method which generates better results for noise estimation as compared with discrete cosine transform ( dct ) and the dft @xcite , discrete fractional sine transform has identified as the method for generating fingerprint templates with high recognition accuracy @xcite , dct , dest , and dft can be approximated to the karhunen loeve transformation ( klt ) and the connection of klt to the color image compression @xcite , dst can be used to analyze image reconstruction via signal transition through a square - optical fiber lenses @xcite , spectral interference and additive wideband noise on the accuracy of the normalized frequency estimator can be investigated through discrete - time sine - wave @xcite , to mention a few .",
    "together with the above , the engagement of dct and dst in image processing , signal processing , finger print enhancement , quick response code ( qr code ) , and multimode interface can also be seen in e.g. , @xcite .",
    "the family of dft consists of eight versions ( i - viii ) of dct and dst and these versions appear depending on odd or even type and also with respect to different neumann and dirichlet boundary conditions @xcite .",
    "though there are eight versions , depending on applications in transform coding and digital filtering of signals , we consider dct and dst matrices as varying from i to iv types .",
    "let us consider four orthogonal types of dst having superscripts to denote the type of dst and a subscript to denote the order of dst in the matrix form ; @xmath3_{j,\\:k\\ : = 0}^{n-2 } ,   \\\\ dst - ii : & s_{n}^{ii }   = \\sqrt{\\frac{2}{n}}\\left [ \\epsilon_n(j+1)\\:{\\rm sin}\\:\\frac{(j+1)(2k+1)\\pi } { 2n }   \\right ] _",
    "{ j,\\:k\\:=0}^{n-1 } \\\\ dst - iii : & s_{n}^{iii}= \\sqrt{\\frac{2}{n}}\\left [ \\epsilon_n(k+1)\\:{\\rm sin}\\:\\frac{(2j+1)(k+1)\\pi } { 2n }   \\right ] _ { j,\\:k\\:=0}^{n-1 } , \\\\ dst - iv : & s_{n}^{iv } = \\sqrt{\\frac{2}{n}}\\left [ \\:{\\rm sin}\\:\\frac{(2j+1)(2k+1)\\pi } { 4n }   \\right ] _ { j,\\:k\\:=0}^{n-1 } \\end{array}\\ ] ] where @xmath4 , @xmath5 for @xmath6 and @xmath7 is an even integer . among dst i - iv transformations , @xmath8 and @xmath9 were introduced in @xcite and @xmath10 and its inverse @xmath11 were introduced in @xcite into digital signal processing .",
    "dst - ii is a complementary or alternative transform to dct - ii which is used in transform coding .",
    "like dft and dct , these dst matrices hold linearity , convolution - multiplication , and shift properties . among different mathematical techniques used to derive fast algorithms for discrete",
    "cosine and sine transformations , the polynomial arithmetic technique ( see e.g. @xcite ) and the matrix factorization technique ( see e.g. @xcite ) can be seen as the dominant techniques .",
    "apart from these two main techniques some other authors ( see e.g. @xcite ) have used different techniques like displacement approach and polynomial division in matrix form to derive factorizations for dct and dst .",
    "efficient algorithms for dct or dst of radix-2 length @xmath1 require about @xmath12 flops .",
    "such a dct or dst algorithm generates a factorization of these matrices having sparse and non - orthogonal matrices .",
    "thus , if the factorization for dct or dst does not preserve orthogonality the resulting dct or dst algorithms lead to inferior numerical stability ( see e.g. @xcite ) .",
    "the matrix factorization for dst i in @xcite used the results in @xcite to decompose dst i into dct and dst . also the decomposition for dct ii in @xcite",
    "is a slightly different version of the result in @xcite .",
    "though one can find orthogonal matrix factorization for dct and dst in @xcite , the resulting algorithms in @xcite are not completely recursive and hence do not lead to simple recursive algorithms .",
    "an alternative factorization for dct i - iv in @xcite and dst i - iv in @xcite can be seen in @xcite but the factorizations in the latter papers are not solely dependent on dct i - iv or dst i - iv .",
    "moreover @xcite has used the same factorization for dst - ii and dst - iv as in @xcite .",
    "however one can use these @xcite results to derive recursive , stable and radix-2 algorithms as stated in @xcite .",
    "in electrical engineering , control theory , system engineering , theoretical computer science , etc .",
    "signal flow graphs represent realizations of systems as electronic devices .",
    "the objective here is to build a device to implement or realize algebraic operations used in sparse and orthogonal factorization of fast and recursive dst i - iv algorithms .",
    "based on the factorization of dft , dct , and dst matrices one can design signal flow graphs such as : 8-point signal flow graphs on various fast dct and dst algorithms having sparse and/or orthogonal factorization in @xcite , signal flow graphs for forward and backward modified dct implementations with @xmath13 and also with mix - radix decomposition of @xmath13 in @xcite , fast dst - vii and dct - ii algorithms based signal flow graphs for @xmath14 points and @xmath15 points dct - ii in @xcite , signal flow graphs representation of the direct 2-d dct - ii and 2-d dst - ii computation and their inverses for @xmath16 , and @xmath17 block sizes in @xcite , signal flow graphs of the coordinate rotation digital computer - based @xmath1 points dct - ii , dct - iii and dst - ii , dst - iii in @xcite , signal flow graphs based jacob rotation for @xmath18 points dct - iv and modified dct - iv in @xcite , and signal flow graphs based on hybrid jacket - hadamard matrix for @xmath1 points dct - ii , dst - ii , and dft - ii in @xcite .",
    "however , there is no paper on signal flow graphs based on fast and completely recursive dst i - iv algorithms having sparse , scaled orthogonal factorization , rotation , rotation - reflection matrix factorizations and especially the generalization of @xmath1 points signal flow graphs covering all dst matrices of types i to iv . hence in this paper",
    "we modify the sparse and orthogonal factorizations of stable dst i - iv algorithms proposed in @xcite to derive fast ( compared to known algorithms ) , efficient , and completely recursive sole algorithms based on dst i - iv having sparse , scaled orthogonal , rotation , rotation - reflections matrices and to discuss the arithmetic complexity of these fast dst i - iv algorithms .",
    "furthermore , the paper presents generalized @xmath19 points signal flow graph for dst - i and @xmath1 points signal flow graphs for dst ii - iv based on the recursive dst i - iv algorithms . in section 2",
    "we modify the factorizations derived in @xcite to express fast , efficient , and completely recursive sole algorithms for dst i - iv having scaled orthogonal , sparse , rotation , rotation - reflection , and butterfly matrices .",
    "next , in section 3 , we derive a number of additions and multiplications required to compute these fast and efficient dst i - iv algorithms and illustrate the numerical results based on that . in section 4 , we develop and then generalize signal flow graphs for @xmath19 points dst - i algorithm and @xmath1 points dst ii - iv algorithms .",
    "this section presents fast , efficient , and completely recursive dst algorithms solely defined via dst i - iv having sparse , scaled orthogonal , rotational , and rotational - reflection factors by modifying radix-2 , recursive , and stable dst i - iv algorithms having sparse and orthogonal factors introduced in @xcite .",
    "the purpose of this is to significantly reduce the number of multiplications required to compute dst i - iv algorithms compared to the known fast , efficient , and stable dst algorithms having sparse factorizations .",
    "+   + by applying the permutation matrix to each sine transform matrix and using the trigonometric addition , complementary , and supplementary identities , one can derive the orthogonal matrix factorization for dst i - iv as in @xcite . in the following we state the collection of sparse and orthogonal matrices which are frequently used in this paper .",
    "for a given vector @xmath20 , let us introduce an involution matrix @xmath21 by @xmath22^t   \\end{array } , \\nonumber\\ ] ] a diagonal matrix @xmath23 by @xmath24^t & \\textrm{even\\:}n , \\\\",
    "\\left[x_0 , -x_1 , x_2 , -x_3,\\cdots , -x_{n-1 } , x_{n-1 } \\right ] ^t & \\textrm{odd\\:}n \\end{array }   \\right . \\nonumber\\ ] ] and , for @xmath25 an even - odd permutation matrix @xmath26 by @xmath27^t & \\textrm{even\\:}n , \\\\",
    "\\left[x_0,x_2,\\cdots , x_{n-1},x_1,x_3,\\cdots , x_{n-2 } \\right ] ^t & \\textrm{odd\\:}n .",
    "\\end{array } \\right .",
    "\\nonumber\\ ] ] for even integer @xmath28 , we introduce sparse and orthogonal matrices : @xmath29 , \\hspace{.2 in } { h}_{n}=\\frac{1}{\\sqrt{2}}\\left[\\begin{array}{rcr }   i_{\\frac{n}{2 } } &   & \\widetilde{i}_{\\frac{n}{2}}\\\\   \\\\",
    "i_{\\frac{n}{2 } } &   & -\\widetilde{i}_{\\frac{n}{2 } } \\\\",
    "\\end{array}\\right],\\ ] ] @xmath30 & \\\\    &   & -1 \\end{array}\\right ] \\left[\\begin{array}{cc }   \\widetilde{i}_{\\frac{n}{2 } } & \\\\    & d_{\\frac{n}{2 } } \\end{array}\\right],\\ ] ] and also a rotational - reflection matrix : @xmath31 where @xmath32_{k=0}^{\\frac{n}{2}-1}\\hspace{.2in}{\\rm and}\\hspace{.2 in } s_{\\frac{n}{2}}=\\left [ { \\rm sin } \\frac{(2k+1)\\pi}{4n } \\right ] _ { k=0}^{\\frac{n}{2}-1}.\\ ] ]      before developing dst matrix factorization based on fast , efficient , and completely recursive dst i - iv algorithms , let us state stable , simple , recursive , radix-2 dst i - iv algorithms having sparse and orthogonal factors derived in @xcite .",
    "+   + the algorithms for dst i - iv are stated in order @xmath33 , @xmath9 , @xmath34 and @xmath35 respectively . +   + in @xcite , orthogonal factorizations for types",
    "ii and iv of discrete sine transform matrices are given by    @xmath36    thus , the recursive algorithms for dst - ii and dst - iv can be stated via algorithms @xmath37 and @xmath38 respectively .",
    "@xmath39 +   + [ algo : s2 ] input : @xmath40 , @xmath41 .    1 .   if @xmath42 , then + @xmath43 .",
    "$ ] 2 .    if @xmath28 , then + @xmath44    output : @xmath45 .    @xmath46 +   + [ algo : s4 ]",
    "input : @xmath40 , @xmath41 .    1 .   if @xmath42 , then + @xmath47 .",
    "$ ] 2 .    if @xmath28 , then + @xmath48    output : @xmath49 .",
    "the transpose of dst - ii is dst - iii .",
    "thus dst - iii algorithm can be computed via algorithm @xmath37 .",
    "observe that this algorithm executes recursively with dst - ii and dst - iv algorithms .",
    "@xmath50 +   + [ algo : s3 ] input : @xmath40 , @xmath41 .    1 .   if @xmath42 , then + @xmath51 .",
    "$ ] 2 .    if @xmath28 , then + @xmath52    output : @xmath53 .     +   + following @xcite , orthogonal factorizations for type i discrete sine",
    "transform matrix is given by    @xmath54    thus , the recursive algorithm for dst - i can be stated via algorithm @xmath55 .",
    "note that this algorithm runs recursively with dst ii - iv algorithms .",
    "@xmath56 +   + [ algo : s1 ] input : @xmath40 , @xmath41 .    1 .",
    "if @xmath42 , then + @xmath57 2 .    if @xmath28 , then + @xmath58    output : @xmath59 .      in this section , we present fast , efficient , and completely recursive dst i - iv ( say ndst i - iv ) algorithms using dst i - iv algorithms stated via [ algo : s2 ] , [ algo : s4 ] , [ algo : s3 ] , and [ algo : s1 ] i.e. we introduce dst i - iv algorithms having sparse , scaled orthogonal , rotational , rotational - reflection factors so that dst i - iv are orthogonal w. r. t. the scale factor @xmath60 . in order to reduce number of multiplications",
    ", we move the factor @xmath61 in @xmath62 and @xmath63 without changing the rotation - reflection matrix @xmath64 so that we compute @xmath65 , and @xmath66 respectively .",
    "let us state the corresponding new algorithms via @xmath67 , @xmath68 , @xmath69 , and @xmath70 respectively .",
    "@xmath71 +   + [ algo : ms2 ] input : @xmath40 , @xmath41 .    1 .   if @xmath42 , then + @xmath72 .",
    "$ ] 2 .    if @xmath28 , then + @xmath73    output : @xmath74 .    @xmath68 +",
    "+ [ algo : ms4 ] input : @xmath40 , @xmath41 .    1 .   if @xmath42 , then + @xmath75 .",
    "$ ] 2 .    if @xmath28 , then + @xmath76    output : @xmath77 .    the fast , efficient , and completely recursive dst - iii algorithm can be computed using the dst - ii so that it runs recursively with @xmath67 and @xmath68 algorithms .",
    "@xmath78 +   + [ algo : ms3 ] input : @xmath40 , @xmath41 .    1 .   if @xmath42 , then + @xmath79 .",
    "$ ] 2 .    if @xmath28 , then + @xmath80    output : @xmath81 .    finally , the fast , efficient , and completely recursive dst i algorithm can be stated as follows .",
    "note that this algorithm runs recursively with @xmath67 , @xmath68 , and @xmath69 algorithms .",
    "@xmath82 +   + [ algo : ms1 ] input : @xmath40 , @xmath41 .    1 .   if @xmath42 , then + @xmath83 2 .    if @xmath28 , then + @xmath84    output : @xmath85 .      here",
    "we state examples for computing fast , efficient , and recursive dst i - iv algorithms having sparse , scaled orthogonal , rotational , and rotational - reflection matrix factorizations based on dst i - iv algorithms @xmath70 , @xmath67 , @xmath78 , and @xmath86 for @xmath87 . later in section [ sec : sfg ] , we use the factorizations for dst i - iv matrices to develop and generalize @xmath1 points signal flow graphs for dst i - iv algorithms .",
    "[ es32 ] by following algorithms @xmath88 , @xmath89 , @xmath90 , and @xmath91 , the factorization for dst - i given by :    @xmath92    where @xmath93,\\:\\sqrt{2}\\:s_2^{iv}=\\sqrt{2}\\:\\left[\\begin{array}{rr } { \\rm sin}\\frac{\\pi}{8 } & { \\rm cos}\\frac{\\pi}{8 } \\\\   { \\rm cos}\\frac{\\pi}{8 } & -{\\rm sin}\\frac{\\pi}{8 } \\end{array}\\right]\\ ] ] @xmath94 , \\ : \\sqrt{2}\\:\\widehat{h}_7=\\left[\\begin{array}{rrr } i_2 &   0 & \\tilde{i}_2 \\\\   0   & \\sqrt{2 } & 0   \\\\",
    "i_2 & 0   & -\\tilde{i}_2   \\end{array}\\right]\\ ] ]    [ es34 ] by following algorithms @xmath89 and @xmath91 , the factorization for dst - ii given by : @xmath95 where @xmath96,\\:q_4=\\begin{bmatrix } { \\rm sin}\\frac{\\pi}{16 } & 0&0 & { \\rm cos}\\frac{\\pi}{16}\\\\   0 & -{\\rm sin}\\frac{3\\pi}{16 } & -{\\rm cos}\\frac{3\\pi}{16}&0\\\\ 0 & -{\\rm cos}\\frac{3\\pi}{16 } & { \\rm sin}\\frac{3\\pi}{16}&0\\\\ -{\\rm cos}\\frac{\\pi}{16 } & 0 & 0&{\\rm sin}\\frac{\\pi}{16}\\\\   \\end{bmatrix}\\ ] ]    [ es36 ] by following algorithms @xmath89 , @xmath91 and @xmath90 , the factorization for dst - iii given by : @xmath97    [ es38 ] by following algorithms @xmath89 and @xmath91 , the factorization for dst - iv given by : @xmath98 where @xmath99\\ ] ] @xmath100",
    "the number of additions and multiplications required to compute dst i - iv algorithms via @xmath70 , @xmath67 , @xmath69 , @xmath86 are considered in this section .",
    "the number of additions and multiplications required to compute , say length @xmath1 , dst - ii algorithm ( @xmath67 ) are denoted by @xmath101 and @xmath102 respectively .",
    "note that the multiplication of @xmath103 and permutations are not counted . at the end of the section",
    "we illustrate numerical results based on the number of additions and multiplication required to compute these dst i - iv algorithms .      here",
    "we address the arithmetic cost of computing fast , efficient , and recursive dst i - iv algorithms having sparse , scaled orthogonal , rotational , and rotational - reflection factors .",
    "the complexity of computing these dst i - iv algorithms are expressed first by calculating the arithmetic complexity of dst - ii algorithm and then using it to compute the complexity of dst - iv , dst - iii and dst - i algorithms respectively .    [ ls41 ] let @xmath104 be given .",
    "if dst - ii algorithm ( @xmath67 ) is computed using algorithms @xmath89 and @xmath91 then the arithmetic cost of computing length @xmath1 dst - ii algorithm is given by @xmath105    from algorithms @xmath89 and @xmath91 @xmath106 referring the structures of @xmath107 , @xmath63 , and @xmath64 @xmath108 thus @xmath109 since @xmath110 we can obtain the second order linear difference equation with respect to @xmath111 @xmath112 solving the above under the initial conditions @xmath113 and + @xmath114 , one can obtain @xmath115 also using initial conditions @xmath116 and @xmath117 , one can derive the analogous result for the number of multiplications as @xmath118    [ lso1 - 41 ] let @xmath104 be given .",
    "if dst - iv algorithm ( ( @xmath68 ) ) is computed using algorithms @xmath89 and @xmath91 then the arithmetic cost of computing length @xmath1 dst - iv algorithm is given by @xmath119    the number of additions required to compute dst - iv algorithm @xmath91 can be found by evaluating ( [ as24 ] ) ; @xmath120 simplifying the above with ( [ cs2s4 ] ) at @xmath121 yields @xmath122 similarly , the number of multiplications required to compute new dst - iv algorithm can be found by evaluating ( [ as24 ] ) with ( [ cs2s4 ] ) at @xmath121 which yields @xmath123    the following result is trivial because the dst - iii algorithm ( @xmath69 ) was stated using the dst - ii algorithm ( @xmath67 ) .",
    "[ lso2 - 41 ] let @xmath104 be given .",
    "if dst - iii algorithm ( @xmath69 ) is computed using algorithms @xmath89 , @xmath90 and @xmath91 then the arithmetic cost of computing length @xmath1 dst - iii algorithm is given by @xmath124    using dst - iii algorithm @xmath90 and the arithmetic cost of dst - iv algorithm in corollary ( [ lso1 - 41 ] ) , it is possible to obtain the first order linear difference equation with respect to @xmath111 . by solving the said equation under initial conditions @xmath125 and @xmath126 respectively , one can obtain the same results as in corollary ( [ lso2 - 41 ] ) for the number of additions and multiplications involving in dst - iii algorithm .",
    "[ ls42 ] let @xmath104 be given .",
    "if dst - i algorithm ( @xmath127 ) is computed using algorithms @xmath88 , @xmath89 , @xmath90 and @xmath91 then the arithmetic cost of dst - i algorithms of length @xmath19 is given by @xmath128    referring dst - i algorithm @xmath88 @xmath129 following the structure of @xmath130 leads to @xmath131 using arithmetic cost of dst - iii ( [ cs2s4 ] ) at @xmath121 and ( [ ths13 ] ) , we can rewrite ( [ as13 ] ) @xmath132 since @xmath110 the above simplifies to the first order linear difference equation with respect to @xmath133 @xmath134 solving the above first order linear difference equation ( with respect to @xmath111 ) using the initial condition @xmath135 , one can obtain @xmath136 also using initial condition @xmath137 , one can derive the analogous result for the number of multiplications as @xmath138      the following numerical experiments are done to illustrate the number of additions and multiplications required to compute fast , efficient , and completely recursive dst i - iv algorithms having sparse , scaled orthogonal , rotational , and rotational - reflection factors .",
    "matrices are used with the sizes from @xmath139 to @xmath140 .",
    "these are implemented using matlab version 8.3 ( r2014a ) .",
    "+   + figure ( [ figcostadst ] ) and ( [ figcostmdst ] ) illustrate the number of additions and multiplications required to compute dst i - iv algorithms corresponding to lemma [ ls41 ] , corollary [ lso1 - 41 ] , corollary [ lso2 - 41 ] , lemma [ ls42 ] respectively with comparison to the @xmath141 operations .",
    "+   +    0.4 ) number of additions in computing dst i - iv algorithms with @xmath141 ( [ figcostmdst ] ) number of multiplications in computing dst i - iv algorithms with @xmath141 , title=\"fig : \" ]    0.4 ) number of additions in computing dst i - iv algorithms with @xmath141 ( [ figcostmdst ] ) number of multiplications in computing dst i - iv algorithms with @xmath141 , title=\"fig : \" ]",
    "in this section we use signal flow graphs to elaborate fast , efficient , and completely recursive dst i - iv algorithms having sparse , scaled orthogonal , rotation , rotation - reflection , butterfly matrices for @xmath142 and use those results to elaborate generalized @xmath1 points flow graphs for these dst algorithms .",
    "note that as stated in section [ sec : factor ] , we have developed dst i - iv algorithms to reduce the cost of multiplications .",
    "hence , based on the cheap cost of multiplication , we can develop signal flow graphs for these dst i - iv only by using few multipliers which is opposed to the existing dst i - iv flow graphs .",
    "+   + these signal flow graphs of dst algorithms are drawn with respect to the decimation - in - frequency having the input signal @xmath143 in order and output signal @xmath144 in scrambled .",
    "so for a given input signal @xmath143 , this section present signal flow graphs for output signal @xmath145 , and @xmath146 . as shown in the flow graphs , in each graph signal flows from the left to the right",
    "however , it is possible to convert the decimation - in - frequency dst algorithms into decimation - in - time dst algorithms applying multiplications before additions and using the identical computation complexity ( same as in section [ sec : cost ] ) as in decimation - in - frequency dst algorithms .",
    "+   + in each figure from [ figs1 ] until [ figgs4 ] , multiplication with -1 is denoted by a dotted line and notations @xmath147 , @xmath148 , and @xmath149 for positive integers @xmath150 and @xmath151 are used .",
    "let us state the signal flow graph for dst i - iv computed via @xmath70 , @xmath67 , @xmath78 , @xmath86 . here",
    "we draw the flow graphs for @xmath142 with the help of factorizations of dst i - iv algorithms as stated in section [ subs : fcalgo ] . +   + signal flow graphs for 15-point ndst - i ( @xmath152 ) and 16-point ndst ii - iv ( 4@xmath153 , 4@xmath154 , and 4@xmath155 ) algorithms",
    "are presented via figures [ figs1 ] , [ figs2 ] , [ figs3 ] , and [ figs4 ] .    ) , width=480,height=576 ]    ) , width=480,height=576 ]    ) , width=480,height=576 ]    ) , width=480,height=576 ]     +   + the flow graphs for 16-point ndst ii - iv algorithms stated via figures [ figs2 ] , [ figs3 ] , and [ figs4 ] , the input signals @xmath143 are in order and output signals @xmath144 are in bit - reversed order .",
    "thus in bit - reversed order , each output index is represented as a binary number and the indices bits are reversed .      here",
    "we present generalized @xmath0 points signal flow graph for dst - i and @xmath1 points signal flow graphs for dst ii - iv based on dst algorithms stated in the section [ subs : fcalgo ] and the flow graphs drawn in the section [ ss : s16s ] .",
    "the generalized signal flow graphs for fast and completely recursive dst i - iv algorithms can be illustrated via figures [ figgs1 ] , [ figgs2 ] , [ figgs3 ] , and [ figgs4 ]     points ndst - i ( @xmath156),width=480,height=307 ]     points ndst - ii ( @xmath157),width=480,height=307 ]     points ndst - iii ( @xmath158),width=480,height=307 ]     points ndst - iv ( @xmath159),width=480,height=307 ]",
    "in this paper , we have provided fast , efficient , and completely recursive dst i - iv algorithms , which are solely defined via dst i - iv , having sparse , scaled orthogonal , rotational , rotational - reflection , and butterfly matrices while providing the corresponding arithmetic complexity of the said algorithms . moreover ,",
    "the language of signal flow graphs is used to show the connection between factors of these dst algorithms and @xmath0 points dst - i flow graph and @xmath1 points dst ii - iv flow graphs .",
    "d. belega , d. dallet , and d. petri .",
    "accuracy of the normalized frequency estimation of a discrete - time sine - wave by the energy - based method .",
    "_ ieee transactions on instrumentation and measurement _ , 61(1):111 - 121 , 2012",
    ".        v. britanak .",
    "new universal rotation - based fast computational structures for an efficient implementation of the dct - iv / dst - iv and analysis / synthesis mdct / mdst filter banks . _ signal processing _ , 89:2213 - 2232 , 2009 .",
    "s. chakraborty and k. r. rao , fingerprint enhancement by directional filtering , in : _",
    "2012 9th international conference on electrical engineering / electronics , computer , telecommunications and information technology ( ecti - con)_,thailand , may 2012 , doi : 10.1109/ecticon.2012.6254113 .",
    "d. fan , x. meng , y. wang , x. yang , x. peng , w. he , g. dong and h. chen .",
    "optical identity authentication scheme based on elliptic curve digital signature algorithm and phase retrieval algorithm .",
    "_ applied optics _ ,",
    "52(23):5645 - 5652 , 2013 .",
    "h. b. kekre , t. k sarode , and j. k. save .",
    "column transform based feature generation for classification of image database . _ international journal of application or innovation in engineering and management _",
    ", 3(7):172 - 181 , 2014 .",
    "h. b. kekre , t. sarode , and p. natu .",
    "performance comparison of hybrid wavelet transform formed by combination of different base transforms with dct on image compression .",
    "image , graphics and signal processing _",
    ", 4:39 - 45 , 2014 .",
    "a. olshevsky , v. olshevsky , and j. wang . a comrade - matrix - based derivation of the eight versions of fast cosine and sine transforms . in : v. olshevsky(ed .",
    ") _ contemporary mathematics",
    "_ , 323:119 - 150 , ams publications , providence , ri , 2003 .",
    "le and l. w. cahill .",
    "the design of 4 @xmath161 4 multimode interfaces coupler based microring resonators on an soi platform .",
    "_ journal of telecommunications and information technology _ , 2:58 - 62 , 2009 .",
    "l. shen , c. lu , f. zhao , and w. liu .",
    "discrete fourier transformation for seasonal - factor pattern classification and assignment .",
    "_ ieee transactions on intelligent transportation systems _ , 14(2):511 - 516 , 2013 .",
    "s. m. perera and v. olshevsky .",
    "fast and stable algorithms for discrete sine transformations having orthogonal factors . in : m.g .",
    "cojocaru , i. s. kotsireas , r. n. makarov , r. v. n. melnik , and h. shodiev(eds . )",
    "_ interdisciplinary topics in applied mathematics , modeling and computational science",
    "_ , 117:347 - 354 , springer international , switzerland , 2015 .",
    "m. tasche and h. zeuner .",
    "roundoff error analysis for fast trigonometry transforms . in : g. anastassiou(ed . ) .",
    "_ handbook of analytic - computational methods in applied mathematics _",
    ", 357 - 406 , chapman and hall / crc press , boca raton , fl , 2000 .",
    "h. yoshimura .",
    "fingerprint templates with high recognition accuracy and high security generated by discrete fractional sine transform .",
    "in:_ieee international conference for internet technology and secured transactions _",
    ", 185 - 190 , abu dhabi , 2011 ."
  ],
  "abstract_text": [
    "<S> in this paper , fast and efficient discrete sine transformation ( dst ) algorithms are presented based on the factorization of sparse , scaled orthogonal , rotation , rotation - reflection , and butterfly matrices . </S>",
    "<S> these algorithms are completely recursive and solely based on dst i - iv . </S>",
    "<S> the presented algorithms have low arithmetic cost compared to the known fast dst algorithms . </S>",
    "<S> furthermore , the language of signal flow graph representation of digital structures is used to describe these efficient and recursive dst algorithms having @xmath0 points signal flow graph for dst - i and @xmath1 points signal flow graphs for dst ii - iv .    * </S>",
    "<S> ams classification : * 15a23 , 15b10 , 65f50 , 65t50 , 65y05 , 65y20 , 94a12 + </S>"
  ]
}