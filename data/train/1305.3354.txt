{
  "article_text": [
    "one of the most important problem to attain high performance in distributed system with heterogeneous clients is to balance the total loads of all the processing jobs among the whole system , such that the processing burdens of all clients are almost same .",
    "this is the classical problem of load balancing in distributed system .",
    "a distributed system can be considered as a collection of computing devices connected with communication links by which resources are shared among active users . in @xcite , the authors describe the load balancing problem as follows _  given the initial job arrival rates at each computer in the system find an allocation of jobs among the computers so that the response time of the entire system over all jobs is minimized\"_. this definition of load balancing problem can be viewed as the _ static load balancing _ , where the main assumption is that all information governing load - balancing decisions such as characteristics of jobs , the computing nodes and the communication links are knows at advance . here",
    "load - balancing decisions are made deterministically or probabilistically at compile time and remains constant during runtime .",
    "a variant of classic load balancing problem is the _ dynamic load balancing _ , where load balancing decisions are made at run time , and according to the current load of different computing devices , loads are transferred from one computing device to another dynamically at run time . in @xcite ,",
    "the authors have shown that static load balancing algorithms are more stable in compare to dynamic load balancing algorithms and it is easy to predict the behavior of static algorithms . in this paper we model such static load balancing algorithm for distributed system using congestion game model .",
    "the problem of load balancing in distributed system can be handled in three ways :    * _ global approach _ : a single decision maker optimizes the overall response time using some optimization techniques .",
    "this approach is also called as _ social optimum_.",
    "this is the most frequent literature in study and has been studied extensively using different techniques such as nonlinear optimization , polynomial optimization etc . * _ cooperative approach _ : this is based on classical cooperative game theory where the decision makers cooperate between themselves by sharing informations through message passing , and then take the decision using the utility and pay - off function . in @xcite , the authors have modeled the problem of load balancing in distributed system using cooperative game theoretic approach . * _ non - cooperative approach _ : here the decision is made using the pay - off and utility function , but the agents does not share any information between themselves . congestion game is a variant of non - cooperative games where each agent s strategy consists of a set of resources , and the cost of the strategy depends only on players using each resource .",
    "congestion games have attracted a good deal of attention , because they can model a large class of routing and resource allocation scenarios .",
    "another reason for using congestion games in resource allocation is that they possess _ pure nash equilibria _ @xcite . in general games ,",
    "nash equilibrium may involved mixed ( i.e. , randomized ) strategies for players , but congestion game always have a nash equilibrium in which each player sticks to a single strategy .",
    "but the problem with nash equilibrium in congestion game is that they are known to be _",
    "_ pls - complete__@xcite .",
    "so it is difficult to find a nash equilibrium in congestion games and so the convergence time is very high . in @xcite ,",
    "the authors describe a variant of congestion game , called @xmath0-congestion game which is an approximate version of pure congestion games , and have been proved to possess a better convergence rate .",
    "the authors have proved that @xmath0-nash dynamics in @xmath0-congestion game converge to an @xmath0-nash equilibrium within a finite number of steps .",
    "we have used the formulation of @xmath0-nash equilibrium , as described in @xcite , to model the problem of load balancing in distributed system as a resource sharing problem .",
    "we have studied the formulation of the problem and the existence of @xmath0-nash equilibrium for the problem .",
    "the problem of static load balancing for single class job distributed system has been studied extensively for global approach . in global approach",
    "the focus is to minimize the overall response time . in @xcite ,",
    "the authors have formulated the load balancing problem as a nonlinear optimization problem and have given an algorithm to solve that nonlinear optimization problem . in @xcite and @xcite , kim and",
    "kameda derived a more efficient algorithm to introduce the problem .",
    "an comparison between several static load balancing algorithms with respect to job dispatching strategy has been studied by tang and chanson , in @xcite .",
    "the load balancing problem using game theoretic approaches also has been studied both for cooperative and non - cooperative approach . in @xcite ,",
    "altman , kameda and hosokawa modeled distributed system as collection of nodes connected by either simplex or duplex connected links , and then described the dynamic load balancing problem for this system using game theoretic approach .",
    "they have established the proof for a unique nash equilibrium for routing games with the above mentioned distributed system model , under quite general assumption on the costs .",
    "for this , they have considered two different architectures , in one the nodes are connected using duplex link , and in another they are connected via two one - way communication links . in @xcite ,",
    "the authors have modeled the system as an m / m/1 queue , and then proposed an algorithm , called _",
    " cooperative static scheme\"_(coop ) , using nash bargaining solution , an interesting variant of cooperative game theoretic concepts and the solution of the problem using first order kuhn - tuker conditions .",
    "they have also compared their nash bargaining solution algorithm with the existent static and dynamic load balancing algorithms.there are very few literatures in studying the non - cooperative models for load balancing problems in distributed systems .",
    "@xcite studied non - cooperative games and derived load balancing algorithms for both single class and multi class job distributed systems . for single class job",
    ", they have proposed an algorithm for computing wardrop equilibrium , a variant of nash equilibrium where number of agents participating in the game is infinite . in @xcite",
    ", the author has modeled the load balancing problem as a stackelberg game , where one player acts as a leader and rest as followers .",
    "he has showed that optimal stackelberg strategy computing is np - hard and hence he formulated a near optimal solution . in @xcite ,",
    "the authors has proposed an uncoordinated load balancing algorithm for peer - to - peer system .",
    "they have analyzed the nash equlibrium under general latency function for a p2p system .    in this paper",
    "we have moved from these general game theoretic approaches , and modeled the problem as a congestion game , the most suitable strategy to model resource allocation problems using non - cooperative game models .",
    "the work of @xcite shows that finding a pure nash equilibrium is pls - complete , and hence the convergence time for congestion games , that always produces a pure nash equilibrium , is very high .",
    "again , for some initial strategies the shortest path to an equilibrium in the nash dynamics is exponentially long according to the the number of players . in @xcite , the authors has proposed a selfish load balancing problem using atomic congestion game , and have shown that the worst case ratio between a nash solution and a social optimum , which is referred several times as price of anarchy , is at most 2.5 .",
    "a recent advance in the field of congestion gaming model is @xmath0-congestion game . in @xcite ,",
    "the authors have studied these issues for congestion games , and proposed an approximation of pure congestion game , which they named as @xmath0-congestion game , where @xmath0-nash dynamics converges to an @xmath0-nash equilibrium within a finite number of steps under some bounded conditions .",
    "this work on the approximation on pure congestion game is the primary motivation behind our work to check how the load balancing problem can be well suited with the approximated congestion game , or the @xmath0-congestion game .",
    "we have used this version of congestion game to model our load balancing scheme .",
    "finally we have shown by simulation that using a proper , well chosen value of @xmath0 , we can reduce the number of iteration for congestion game to a very lower bound , and at this bound the load is well distributed among the processing nodes to minimize the processing time .",
    "in this paper we address the problem of load balancing in the general arena of _ congestion game _ , or more specifically an approximation of classical congestion game , called _",
    "@xmath0-congestion game_. a congestion game can be formally described as a finite set of players @xmath1 , each of which is assigned a finite set of _ strategies _ @xmath2 and a cost function @xmath3 that he wishes to minimize .",
    "a _ state _",
    "@xmath4 is any combination of strategies for the player . a state s is a _ pure nash equilibrium _ if for all players @xmath5 , @xmath6 for all @xmath7 .",
    "thus we can say that at a pure nash equilibrium , no player can improve his cost by unilaterally changing his strategy .",
    "it is well known that every finite game has a mixed nash equilibrium , but not a pure nash equilibrium . whereas congestion game always has pure nash equilibrium .    in case of congestion games ,",
    "players cost are based on the shared usage of a common set of resources ( also called edges , in terms of network congestion games ) r = @xmath8 .",
    "a player s strategy set @xmath9 is an arbitrary collection of subsets of r ; his strategy @xmath10 will be therefore a subset of r. each resource @xmath11 has an associated _ nondecreasing _ delay function @xmath12 .",
    "if t players are using the resource r , they will each incur a cost of @xmath13 . as a result in a state s = @xmath14 ,",
    "the cost of player @xmath5 is @xmath15 , where @xmath16 is the number of players using resource r under s ; i.e. @xmath17 .    in @xcite",
    ", the author has shown that in every congestion game , every sequence of improvement steps is finite .",
    "this proposition can be shown by a potential function argument , called the _",
    "rosenthal s potential function _",
    "@xmath18 , defined as @xmath19 this function has an interesting property that if player @xmath5 shifts strategy from @xmath20 to @xmath21 , the change in @xmath22 exactly mirrors the change in the player s cost : i.e. , @xmath23 .",
    "the consequence from this observation is that , if we follow an iterative process here , such that , at each step one player changes its strategy to lower his cost ( a nash dynamics ) , then the potential function @xmath22 will decrease until it reaches a local minimum , which must be a pure nash equilibrium .",
    "but this does not provide a bound on the number of such player moves required to reach a pure nash equilibrium in a congestion game ( so the congestion game is pls - complete ) , and this problem leads to the concept of a approximate nash equilibrium , which is @xmath0-nash equilibrium .",
    "in @xcite , the authors has studied and formulated the concept of @xmath0-nash dynamics and @xmath0-nash equilibrium .",
    "a state s is an @xmath0-nash equilibrium if no player can improve his cost by more than a factor of @xmath0 by unilaterally changing his strategy .",
    "the @xmath0-nash dynamics is a modification of pure nash dynamics , where players are permitted only @xmath0-moves , i.e. moves that improve the cost of the player by a factor of more than @xmath0 . to make @xmath0-nash dynamics concrete",
    ", the authors assume that among multiple players with @xmath0-moves available , at each step a move is made by the player with the largest incentive to move ; i.e. the player who can make the largest relative improvement in cost .",
    "for this reason they have also introduced @xmath24-bounded jump , where the delay function satisfies the condition @xmath25 for all @xmath26 and @xmath27 . in particular , a resource ( or edge ) with @xmath28 satisfies the @xmath24-bounded jump condition .",
    "they show that in such a condition , @xmath0-nash dynamics converge to an @xmath0-nash equilibrium within a finite number of steps , in fact in @xmath29 steps , where c is an upper bound on the cost of any player .",
    "this is the main motivation behind our work to use this modified approximate congestion gaming model to solve the load balancing problem in distributed system.we have the following theorem about @xmath0-nash equilibrium @xcite .",
    "[ theorem : epsilonnash ] for @xmath30 , a state s = @xmath31 is an @xmath0-nash equilibrium if for all player @xmath5 , @xmath32 for all @xmath7 .",
    "in a distributed system , some nodes act as the processor nodes , who process the jobs , and some nodes act as the load generator , who generates processes or jobs in a certain rate .",
    "we call the processor nodes as the servers , and the load generators as the client .",
    "it should be noted that in a typical distributed system , same node can act both as server and clients .",
    "but for the simplicity of modeling the system , we consider server and clients as separate nodes without the loss of generality , and our target is to assign the clients to the servers in a balanced way , such that the jobs generated at the clients are distributed almost equally among the servers and the overall system response time is minimized .",
    "hence we need to generate a bipartite graph with n servers and m clients as shown in the figure [ fig : systemmodel ] .",
    "we use following parameters to model our system : + @xmath33 = the maximum processing rate of server i. + @xmath34 = the actual or effective processing rate of server i. + @xmath35 = load generation rate at client j. + @xmath36 = fraction of the load assigned to server i by client j. + @xmath22 = @xmath37 which is total job arrival rate in complete distributed system . + here , j=1,2,",
    "... ,m and i=1,2, ... ,n .",
    "it is obvious that for each client j ; + @xmath38 = 1 ; where @xmath39 ; and i=1,2, ... ,m + our objective is to find the fraction @xmath36 for each client j ( j = 1, ... ,m ) such that the expected execution time of the jobs in the system is minimized .",
    "we have the following conditions ; + at each server i ; + @xmath40 ; which implies that actual processing rate at any instance at server i must be less than the processing rate capacity or the advertised processing rate of server i. + modeling each computer as an m / m/1 queuing system @xcite , + @xmath41 , where @xmath42 = average arrival rate of jobs at server i and @xmath43 denotes the expected execution time of jobs processed at server i. for m / m/1 queueing system , the above condition must be satisfied also which guarantees stability of the overall system . + in our case , @xmath44 + hence , @xmath45 + we can calculate the overall response time of client j as follows : + @xmath46 + our objective is to minimize the overall response time of the system .",
    "let for client j , the vector @xmath47 = @xmath48 be the load balancing strategy of client j. then the set s = @xmath49 corresponds to the strategy space or strategy profile of our load balancing game .",
    "the cost function of client i is @xmath50 , and the corresponding delay function at resource i is @xmath51 where t is the number of resources , that is number of servers in load balancing game .",
    "it is clear that the delay function depends on number of clients associated with the particular resource and the function is nondecreasing . at this point of instance",
    ", we have the following assumptions :    a.   _ each server i can tolerate up to a maximum job arrival rate @xmath52 . _ though in theory each server is capable to process jobs up to its processing rate , but in practice the performance of the system drops dramatically after a specific amount of load , because each server has to process some internal loads also .",
    "so this assumption is more likely to the real world scenario and required to proof the convergence of our @xmath0-congestion game .",
    "b.   _ there is a maximum job generation rate at the system @xmath53_. this assumption is also near to reality .    the convergence property for our load balancing @xmath0-congestion game can be shown using following theorem [ theorem : boundedjump ] .    _ * ( @xmath24-bounded jump condition ) * _ [ theorem : boundedjump ] the delay function for resource j , as given above is nondecreasing and satisfies the @xmath24-bounded jump condition for @xmath0-congestion game .    for resource @xmath54 , + @xmath55 , and + @xmath56 + hence,@xmath57 +",
    "this can be simplified as , + @xmath58 + so , it is clear that @xmath59 , so the delay function is nondecreasing . according to our assumptions , for each server j",
    ", we can get @xmath60 as ; + @xmath61 + clearly , @xmath62 for all server ( resources ) j. hence the @xmath24-bounded jump condition is satisfied .",
    "so in this game , the @xmath0-nash dynamics will converge to @xmath0-nash equilibrium within a finite number of steps .",
    "we define the potential function for our game which is similar to rosenthal s potential function , but with a multiplier in addition with the delay function .",
    "the multiplier comes because the overall response time of all the servers depends on a fraction of each client s load .",
    "the potential function @xmath63 with strategy set s of the system is as follows : + @xmath64 where m is the number of clients ( players ) and n is the number of servers ( resources ) .",
    "it is clear that the overall system response time depends only on those fractions for which the multiplication factor @xmath65 is nonzero .",
    "the cost function incurred at each client i with strategy set s is as given before ; + @xmath66    _ * ( existence of exact potential function ) * _ the potential function as defined above obeys the property of rosenthal s potential function , i.e. if player @xmath5 shifts strategy from @xmath67 to @xmath68 , the changes in @xmath22 exactly mirrors the change in the player s cost .    as @xmath69 for each client j , so the total weighted sum of the multipliers at both the cost function and potential function is always 1 , which is a constant value , and thus it does not incurs any change in the relative deference between potential functions and costs with two strategies @xmath67 and @xmath68 . at each independent move ,",
    "the change in the player s cost is equal to the change in total delay at all resources , as the delay at each resources reflects directly at the player s cost .",
    "hence from the structure of both the functions it is easy to conclude that , @xmath70 , which follows the theorem .",
    "it can be also checked easily that the cost function satisfies theorem [ theorem : epsilonnash ] , that is the cost can be increased always above a threshold given by the value of @xmath0 .",
    "hence it is clear that our load balancing game model converges to @xmath0-nash equilibrium within a finite steps .",
    "our objective is to minimize the potential function starting from a initial strategy @xmath71 , where each node independently tries to minimize its own cost function and that directly reflects the change in overall system response time which can be measured using the potential function as defined above .",
    "the optimization problem at each client i will be as follows ; + @xmath72 where @xmath47 is the current strategy profile for client j and s is the strategy set of the system .",
    "+ subjected to ; +   + @xmath73 , i=1,2, ...",
    ",n + @xmath69 + @xmath74 , i=1,2, ...",
    ",m +    from the above conditions it is clear that the servers with higher processing power should have higher fractions of jobs assign to it . if the computers are arranged in the decreasing order of their processing rates , then we get a partial order for client j as @xmath75 . now in real system , there will be some servers with low processing rates , where no load will be assigned .",
    "so after a index k , @xmath76 for i = k , k+1, ... ,n",
    ".    now when a client j runs its own optimization problem , the algorithm is given in ( algorithm [ algo : optimal]).each client node runs this algorithm independently to find out its own local optimum solution .",
    "* algorithm optimal : * + arrange the computers in decreasing order of their processing rates , @xmath77 + let @xmath78 + @xmath79    for the overall system optimization , we assume that the clients enter the system one after another .",
    "this assumption follows directly from the properties of potential function .",
    "the initial strategy set of the system is @xmath80 , and according to the property of @xmath0-nash equilibrium , the system converges within a finite number of steps with any initial strategy .",
    "one initial strategy can be that whole job of a node is assigned to its own server . with this initial strategy",
    "the system moves to a new state as ( algorithm [ algo : cong ] ) .",
    "the algorithm works as a greedy strategy where each node chooses the current best solution and according to the greedy property and reachability conditions of congestion games , the system guarantees to be terminated at @xmath0-nash equilibrium within a finite number of steps . here",
    "the system designer needs to choose @xmath0 according to the system design using practical simulation .",
    "* algorithm load_balance : * + @xmath81 exit when there is no change in cost , that is nash equilibrium has been reached .",
    "we have simulated the system using a program written in java programming language .",
    "each server has some maximum processing rates , and we use the random number generator to generate load at each clients . the unit of the processing rates of the server and the job generation rate at client is taken as number of jobs per second . for our simulation",
    "we have taken different situation with different number of servers with processing rates varying from small to large amount , and similarly for clients .",
    "we have maintained the dynamic nature of the system as much as possible while setting up the simulation environment .    to show that the load is balanced among the processing nodes , we have defined the metrics * load",
    "ratio*.the metrics is defined as follows , +   + @xmath82 ; + where , + @xmath83 = load ratio at server i , + @xmath84 = total load assigned at server i , + @xmath33 = maximum processing rate of server i , + @xmath34 = current effective processing rate of server i. +        in figure [ fig : converge ] we have shown two test cases with different set of processing rates at servers and job generation rates at clients .",
    "we can see from the figure , that after certain number of rounds , the system converges to the equilibrium state , and at the equilibrium state the cost is stable and minimized .",
    "note that congestion game always have a pure strategy nash equilibrium , and hence the nash equilibrium here is unique .",
    "values , width=432 ]     values , width=432 ]    in figure [ fig : cost ] and figure [ fig : rounds ] we have shown four different test cases where each test case has same number of clients and servers , but with different set of maximum processing rates and job generation rates . from figure",
    "[ fig : cost ] , we can see that at @xmath85 , all the systems converges to a state , where it gives minimum cost , and decreasing the value of @xmath0 does not improve the system cost .",
    "with @xmath85 , we can see from figure [ fig : rounds ] that the number of rounds required to converge at nash equilibrium state is smaller than number of rounds required for pure strategy congestion game , which is essentially with @xmath86 .",
    "thus we can see with properly chosen @xmath0 value , @xmath0-congestion game converges to nash equilibrium rapidly , but with same cost than the pure congestion game .            in figure",
    "[ fig : loadratio ] and figure [ fig : load ] we have shown the distribution of load among the server nodes .",
    "we have considered three cases , when the load is high , that is all clients generate jobs with high rates , when the load is low , that is job generation rate is low , and when the rate is average , that essentially follows the median of a gaussian distribution .",
    "we can see from the figures that when load is high , all the server nodes has been assigned some load , but when load is low , only the servers with high processing rates gets the load to make the system performance better .",
    "the servers with low processing rates are only considered when load is very high .",
    "hence we can have an effective distribution of loads among the processing nodes .",
    "in this paper we have proposed a completely new framework for load balancing using @xmath0-congestion game .",
    "we have shown the existence of pure nash equilibrium in such a game and proposed a greedy algorithm to solve the problem . in spite of modeling the problem using pure congestion game as it is pls - complete ,",
    "we have used the approximation of congestion game that converges to the equilibrium state within a finite number of steps .",
    "it should be noted that in @xcite , the authors have also proved that even for symmetric congestion games with the bounded jump condition on all edges , finding a nash equilibrium can still be pls - complete ; thus in this sense , bounded jumps are not a major restriction on the power of congestion games .",
    "this is a future motivation of study to check whether the processing overheads of @xmath0-congestion game is significantly larger than symmetric congestion game or not .",
    "finally we have simulated the system to show that with a properly chosen value of @xmath0 , the system converges rapidly to the nash equilibrium than the pure congestion game .",
    "we have also shown by simulation that the system distributes the load properly among the processing nodes , and hence the load balancing is achieved using a distributed manner .",
    "daniel grosu , anthony t. chronopoulos and ming - ying leung .",
    " load balancing in distributed system : an approach using cooperative games . \" in the proceedings of the international parallel and distributed processing symposium ( ipds 02 ) , 2002 .",
    "subhas suri , csaba d. toth , yunhong zhou .",
    " selfish load balancing and atomic congestion games . \" in the proceedings of the sixteenth annual acm symposium on parallelism in algorithms and architectures , 2004 .              c. kim and h. kameda .",
    " optimal static load balancing of multi - class jobs in a distributed computer system . \" in the proceedings of the 10th international conference on distributed computing systems , pages 562 - 569 , may 1990 ."
  ],
  "abstract_text": [
    "<S> the use of game theoretic models has been quite successful in describing various cooperative and non - cooperative optimization problems in networks and other domains of computer systems . in this paper </S>",
    "<S> , we study an application of game theoretic models in the domain of distributed system , where nodes play a game to balance the total processing loads among themselves . </S>",
    "<S> we have used congestion gaming model , a model of game theory where many agents compete for allocating resources , and studied the existence of nash equilibrium for such types of games . as the classical congestion game </S>",
    "<S> is known to be pls - complete , we use an approximation , called the @xmath0-congestion game , which converges to @xmath0-nash equilibrium within finite number of steps under selected conditions . </S>",
    "<S> our focus is to define the load balancing problem using the model of @xmath0-congestion games , and finally provide a greedy algorithm for load balancing in distributed systems . </S>",
    "<S> we have simulated our proposed system to show the effect of @xmath0-congestion game , and the distribution of load at equilibrium state . </S>"
  ]
}