{
  "article_text": [
    "space - time block codes have been widely investigated for wireless communication systems with multiple transmit and receive antennas . since the pioneering work by alamouti @xcite in 1998 , and the work by tarokh et al .",
    "@xcite , @xcite , orthogonal designs have become an effective technique for the design of space - time block codes ( stbc ) .",
    "the importance of this class of codes comes from the fact that they achieve full diversity and have the fast maximum - likelihood ( ml ) decoding .",
    "a complex orthogonal design ( cod ) @xmath12 $ ] is an @xmath2 matrix , and each entry is filled by @xmath3 or @xmath13 , @xmath14 , such that @xmath15 , where @xmath16 is the hermitian transpose and @xmath17 is the @xmath18 identity matrix . under this definition",
    ", the designs are said to be combinatorial , in the sense that there is no linear processing in each entry .",
    "when linear combination of variables are allowed , we call it generalized complex orthogonal design ( gcod )",
    ".    code rate @xmath9 and decoding delay @xmath19 are the two most important criteria of complex orthogonal space - time block codes .",
    "one important problem is , given @xmath20 , determine the tight upper bound of code rate , which is called maximal rate problem .",
    "another is , given @xmath20 , determine the tight lower bound of decoding delay @xmath19 when code rate @xmath9 reaches the maximal , which is called minimal delay problem .",
    "for combinatorial cods , where linear combination is not allowed , liang determined for a cod with @xmath21 or @xmath22 , the maximal possible rate is @xmath23 @xcite .",
    "liang gave an algorithm in @xcite to generate such cods with rate @xmath23 , which shows that this bound is tight .",
    "in @xcite , yuan et al . simplifies liang s proof on the upper bound of code rate slightly . the minimal delay problem",
    "are solved by adams et al . in @xcite , lower bound @xmath24 of decoding delay",
    "is proved for any @xmath21 or @xmath22 . in @xcite , adams et al .",
    "prove that when @xmath25 , decoding delay @xmath19 is lowered bound by @xmath26 .    besides some scattered constructions for relatively small number of antennas @xmath20 @xcite , @xcite , @xcite , several general methods to construct complex orthogonal designs have been proposed .",
    "liang s algorithmic construction in @xcite achieves the maximal rate for all @xmath20 , acheives the minimal delay when @xmath27 .",
    "but when @xmath28 , the delay is twice of the minimal delay . in @xcite , a different algorithmic method to generate complex orthogonal",
    "is proposed , which has the same code rate and decoding delay as liang s construction . in @xcite , a closed - form iterative construction of complex orthogonal designs",
    "was proposed , which achieves both the maximal rate and minimal delay .    for gcod , which allows linear combination in each entry ,",
    "little is known about the rate and delay . in @xcite",
    ", they proved that there does not exist rate 1 gcod when @xmath29 . in @xcite , wang and xia proved an upper bound @xmath30 of the code rate for gcods without equal weight condition , and an upper bound @xmath31 with equal weight condition when @xmath29 . and",
    "this result is the best as far as we know .",
    "the unfortunate property of cod is that for @xmath21 or @xmath22 transmit antennas , the codes with maximal rate @xmath32 has minimal decoding delay @xmath24(with exception @xmath33 where it is @xmath26 ) . for example , when @xmath34 , the minimal delay for a code with maximal rate is 6006 !",
    "therefore , it s meaningful to construct cods with smaller decoding delay by sacrificing code rate and investigate the tradeoff between code rate and decoding delay . for example , in @xcite , adams et al . considered a class of cods with rate @xmath35 and proved a lower bound on delay .    in this paper , by restricting to a specific type of cods which contains no submatrices @xmath7 or @xmath8 , which are called first type cods in the paper",
    ", we consider the most general problem that determining what parameters @xmath1 $ ] are achievable .",
    "not only all achievable parameters are determined , but also all their possible structures are also proved .",
    "it should be noticed that all cods with maximal rate are of first type , and thus it is not a very strict restriction .",
    "the organization of our paper is as follows . in section 2",
    ", we introduce the notions which will be used . in section 3",
    ", we review some basic definition and some known results about cods . in section 4",
    ", we present our explicit - form constructions .",
    "in section 5 , we prove our constructions in section 4 consist of all first type cods , up to equivalence operation and simple catenation operation . in section 5 , we give out the conclusions .",
    "in this section , we introduce some basic notions , which will be used in the sequel .    @xmath36 denotes the field of complex numbers , @xmath37 the field of real numbers and @xmath38 the field with two elements . adding over @xmath38 is denoted by @xmath39 to avoid ambiguity .",
    "all vectors are assumed to be column vectors . for any field @xmath40 , denoted by @xmath41 and @xmath42 the set of all @xmath20-dimensional vectors in @xmath40 and the set of all @xmath43 matrices in @xmath40 , respectively . for any vector @xmath44 ,",
    "denote by @xmath45 the transpose of @xmath46 . for any matrix @xmath47 ,",
    "denote by @xmath48 the transpose of @xmath49 and by @xmath50 the conjugate transpose of @xmath49 .",
    "denote by @xmath51 the submatrix consisting of @xmath52 , @xmath53 , @xmath54 , @xmath55 rows and the @xmath56 , @xmath57 , @xmath54 , @xmath58 columns of @xmath49 , and the submatrix consisting of the @xmath59 , @xmath60 ,  , @xmath61 rows and the @xmath62 , @xmath63 ,  , @xmath64 columns of @xmath49 , where @xmath65 and @xmath66 , respectively .",
    "we use @xmath67 for the @xmath68 element of the matrix @xmath49 . in this paper ,",
    "rows and variables are often indexed by vectors in @xmath69 .    for convenience ,",
    "let @xmath70 be the vector with @xmath71 bit occupied by @xmath72 and the others @xmath73 , i.e. , @xmath74 and let @xmath75 , i.e. , @xmath76    the weight of a vector in @xmath77 is defined as the number of ones in @xmath20 bits , i.e. , @xmath78 .",
    "furthermore , @xmath79 is defined as the sum of @xmath80 bit to @xmath81 bit , i.e. , @xmath82    in abuse of notation , we denote by @xmath83 $ ] the complex variable @xmath84 , up to negation and conjugation , i.e. , @xmath83 \\in \\ { z_j , -z_j , z^*_j , -z^*_j\\}.$ ] note that the same notation @xmath83 $ ] may represent different elements in the same paragraph .",
    "a @xmath1 $ ] complex orthogonal design @xmath0 is a @xmath2 rectangular matrix whose nonzero entries are @xmath85 or their conjugates @xmath86 where @xmath87 are indeterminates over @xmath36 , such that @xmath88 @xmath9 is called the code rate of @xmath0 , and @xmath19 is called the decoding delay of @xmath0 .    a matrix is called an alamouti @xmath89 if it matches the following form @xmath90 up to negation or conjugation of @xmath91 or @xmath84 .",
    "we say two rows share an alamout @xmath89 if and only if the intersection of the two rows and some two columns form an alamouti @xmath89 .",
    "the equivalence operations performed on any cod are defined as follows .    *",
    "\\1 ) rearrange the order the rows(``row permutation '' ) . *",
    "\\2 ) rearrange the order the columns ( `` column permutation '' ) .",
    "* \\3 ) conjugate all instances of certain variable ( `` instance conjugation '' ) . *",
    "\\4 ) negate all instances of certain variable ( `` instance negation '' ) .",
    "* \\5 ) change the index of all instances of certain variable ( `` instance renaming '' ) . *",
    "\\6 ) multiply any row by @xmath92 , ( `` row negation '' ) . *",
    "\\7 ) multiply any column by @xmath92 , ( `` column negation '' ) .",
    "it s not difficult to verify that , given a cod @xmath93 $ ] , after arbitrary equivalence operations , we will obtain another cod @xmath94 $ ] .",
    "and we say cod @xmath0 and @xmath95 are the same under equivalence operations .",
    "following the definition in @xcite , define an @xmath96-@xmath97 form by @xmath98 where @xmath99 .",
    "and we call it @xmath97 form for short .",
    "@xcite we say cod @xmath0 is in @xmath97 form if the submatrix @xmath97 can be created from @xmath0 through equivalence operations except for column permutation .",
    "equivalently , @xmath0 is in @xmath97 form if every row of @xmath97 appears within the rows of @xmath0 , up to possible negations or conjugations of all instances of @xmath91 and possible factors of @xmath92 .",
    "it is proved that @xcite that cod @xmath0 is in some @xmath97 form if and only if one row in @xmath0 matches one row of @xmath97 up to signs and conjugations .    in @xcite , liang proved the upper bound @xmath23 of code rate @xmath100 for any @xmath21 or @xmath22 , and obtained the necessary and sufficient condition to reach the maximal rate .",
    "[ thm : max_rate ] let @xmath21 or @xmath22",
    ". the rate of cod @xmath93 $ ] is upper bounded by @xmath23 , i.e. , @xmath101 .",
    "this bound is achieved if and only if for all @xmath102 , @xmath97 is an @xmath103-@xmath97 or @xmath104-@xmath97 form and there are no zero entries in @xmath105 , when @xmath106 ; @xmath97 is an @xmath107-@xmath97 form and there are no zero entries in @xmath105 , when @xmath21 .",
    "the lower bound on the decoding delay when code rate reaches the maximal is completely solved by adams et al . in @xcite and @xcite .",
    "let @xmath21 or @xmath22 . for cod",
    "@xmath93 $ ] , if the rate reaches the maximal , i.e. , @xmath108 , the delay @xmath19 is lower bounded by @xmath24 when @xmath109 ; by @xmath26 when @xmath25 .",
    "the technique in proving the lower bound @xmath24 is the observation and definition of zero pattern , which is a vector in @xmath77 defined with respect to one row where the @xmath71 bit is @xmath73 if and only if the element on column @xmath110 is @xmath73 .",
    "for example , when @xmath111 the first row has zero pattern @xmath112 , the second @xmath113 , the third @xmath114 , the fourth @xmath115 .",
    "next , we propose some new definitions .",
    "cod @xmath93 $ ] is a first type cod if it does not contain submatrix @xmath116 where @xmath117 .    in other words ,",
    "cod @xmath93 $ ] is of first type if for all @xmath117 , there is no zero entry in @xmath105 of its @xmath97 form . by theorem [ thm : max_rate ] , we can see all maximal - rate cods are in the first type .",
    "cod @xmath93 $ ] is called atomic if and only if there does not exist a cod which is a submatrix of @xmath0 consisting of some ( not all ) rows of @xmath0 .",
    "formally , @xmath93 $ ] is atomic if and only if for any integers @xmath118 , @xmath119 is a not cod .",
    "otherwise , @xmath93 $ ] is called non - atomic .    for an atomic cod",
    "@xmath12 $ ] , given any @xmath120 , there exist @xmath121 such that @xmath122 and @xmath123 share some common rows , @xmath123 and @xmath124 share some common rows , ... , @xmath125 and @xmath126 share some common rows .",
    "this condition is also sufficient for a cod to be atomic .    for cod @xmath0 , assume one row is in some atomic cod @xmath95 which consists of some rows of @xmath0 .",
    "if one variable is in @xmath95 , then all rows containing this variable is in @xmath95 .",
    "repeat this procedure until no more rows are added .",
    "finally , atomic cod @xmath95 is obtained . by the above algorithm",
    ", we can see cod @xmath0 can be decomposed into atomic ones in a unique way .",
    "for example , let @xmath0 consists of the first two columns of , i.e. , @xmath127 then @xmath0 can be decomposed into two atomic ones @xmath128    on the contrary to the decomposition of cod , given two ( or more ) cods with parameters @xmath129 $ ] and @xmath130 $ ] , we can construct a new cod with parameter @xmath131 $ ] by simply catenating them , i.e. , @xmath132 , and renaming certain variables of @xmath133 and @xmath134 to avoid conflicts if necessary .",
    "we call it catenation operation .",
    "in this section , we present explicit - form constructions of first type cods .",
    "the basic idea is first to construct a basic cod with rate @xmath135 and parameters @xmath136 $ ] , which are based on combinatorial methods by using vectors in @xmath137 .",
    "then , by choosing submatrices from the basic cod , we obtain cods with parameters @xmath138 = [ { n \\choose w-1}+{n \\choose w+1 } , n , { n \\choose w}],\\ ] ] where @xmath139 .",
    "note that , when @xmath140 , all maximal - rate , minimal - delay cods are contained in the above constructions .",
    "next , we consider @xmath28 . by padding an extra column on our basic cod ,",
    "we obtain cod with parameter @xmath141 $ ] . again , by choosing submatrices from the basic cod , we obtain cods with parameters @xmath142 $ ] , which are optimal .",
    "[ thm : gn ] let @xmath143 be @xmath144 matrix , where rows are indexed by vectors in @xmath137 and columns are indexed by @xmath145 . for all @xmath146 ,    * if @xmath147 , then @xmath148 , * if @xmath149 and @xmath150 , then @xmath151 , * if @xmath149 and @xmath152 , then @xmath153 ,    where @xmath154 and @xmath155 then @xmath143 is a cod with parameter @xmath136 $ ] .    it is sufficient to prove 1 ) every variable , up to negation or conjugation , appears exactly once in each column ; 2 ) any two different columns are orthogonal .    since for fixed @xmath110",
    ", @xmath156 takes nonzero values on @xmath157 different vectors @xmath158 . to prove 1 )",
    ", we only need to show @xmath159 is a surjective , i.e. @xmath160 . suppose to the contrary that there exists @xmath161 and @xmath162 where @xmath163 , @xmath164 and @xmath165 .",
    "expanding @xmath165 by definition , we have @xmath166 which is equivalent to @xmath167 if @xmath168 , then @xmath169 , which is contradicted with @xmath163 .",
    "if @xmath170 , then @xmath171 , which is contradicted with @xmath172 .    to prove any two different columns are orthogonal , it is sufficient to show that , every pair of nonzero entries in the same row are in an alamouti @xmath89",
    ".    let columns @xmath173 and @xmath174 be any row , satisfying @xmath175 .",
    "let @xmath176 , @xmath177 .",
    "since every variable appears exactly once in each column , we assume @xmath178 $ ] appears in the @xmath179 row in @xmath71 column , i.e. , @xmath180 .    by the assumption that @xmath178 $ ] appears in @xmath181",
    ", we have @xmath182 , i.e. , @xmath183 which implies @xmath184 noting that @xmath159 takes nonzero value on @xmath185 , @xmath186 and @xmath187 , we have @xmath188 . considering @xmath71 value in equality , we conclude @xmath189 .",
    "thus , @xmath190 taking @xmath191 into @xmath192 , we have @xmath193 therefore , submatrix @xmath194 could be written in either of the two following forms @xmath195 or @xmath196    now we calculate @xmath197 to check whether it is an alamouti @xmath89",
    ". first , let s calculate @xmath198 by .",
    "when @xmath110 is even , @xmath199 ; when @xmath110 is odd , @xmath200 .",
    "therefore , we have @xmath201 always holds .    then , @xmath202 in the last second step , @xmath203 is true because @xmath204 .",
    "therefore , @xmath205 holds and the submatrix @xmath194 is an alamouti @xmath89 , which implies column @xmath110 and column @xmath206 are orthogonal .    by taking out some submatrices",
    "form @xmath143 , we can get a series of atomic first type cods .",
    "[ thm : gnm ] given @xmath20 , for arbitrary integer @xmath139 , let @xmath207 where @xmath208 are all vectors in @xmath209 with weight @xmath210 and the @xmath211 bit @xmath73 , @xmath212 are all vectors in @xmath209 with weight @xmath213 and the @xmath211 bit @xmath72 . then @xmath214 is a cod with parameter @xmath215 $ ] .    since @xmath216 is a submatrix of the orthogonal design @xmath217 , it s sufficient to prove that if some variable exists on one column of @xmath214 then it exists on every column of @xmath214 .",
    "we will show that all variables with subscript weight @xmath218 exist on each column of @xmath214 .    for any @xmath219 such that @xmath220 for some @xmath221 , as @xmath222 , then @xmath223 if and only if @xmath224 .    for any @xmath219 such that @xmath152 , and @xmath149 for some @xmath225 , as @xmath226 ,",
    "then @xmath223 if and only if @xmath227 .    finally , there are @xmath228 rows taken and @xmath229 different variables in it .",
    "notice that , in the above constructions , @xmath230 is a trivial cod with rate @xmath73 and delay @xmath72 .    for fixed number of antennas @xmath20 ,",
    "the code rate @xmath231 is an increasing function of @xmath218 when @xmath232 , as well as the decoding delay @xmath229 .",
    "since the decoding delay @xmath233 grows very fast when @xmath218 is increasing , the sacrifice in rate might be worth the trade - off for a smaller decoding delay in practice .",
    "for example , let @xmath234 , @xmath235 respectively , we obtain codes with the parameters with rate decreasing and delay increasing in figure 1 .    like the alamouti @xmath89 in @xcite , certain cods enjoy a property known as transceiver signal linearization , which can facilitate decoding .",
    "this linearization allows the code to be backward compatible with existing signal processing techniques and standards , and allows for the design of low complexity interference suppressing filters and channel equalizers @xcite .",
    "it has been shown that a complex orthogonal design can achieve transceiver signal linearization if and only if each row in the code has either all conjugated entries or all non - conjugated entries @xcite , which is called conjugation separated .",
    "note that @xmath143 and @xmath214 are all conjugation separated and thus satisfy the transceiver signal linearization property .    when @xmath236 , it s possible to pad an extra column on @xmath237 to obtain a new cod .",
    "[ thm : on ] for positive integer @xmath238 even , let @xmath239 where @xmath240 and @xmath241 .",
    "then @xmath242 is a cod with parameter @xmath141 $ ] .    from theorem",
    "[ thm : gn ] , we claim columns in @xmath237 are pairwise orthogonal . by proving",
    "@xmath243 is orthogonal to the other columns , we can complete the proof .",
    "it s obvious that each variable exists on @xmath242 only once .",
    "it only remains to prove any two nonzero elements ( one is on @xmath244 ) in the same row are in an alamouti @xmath89 .",
    "consider column @xmath245 and column @xmath20 .",
    "for row @xmath246 and @xmath247 , @xmath248 and @xmath249 .",
    "since each variable exists in @xmath243 , there exists an integer @xmath250 such that @xmath251 , which is @xmath252 noting that @xmath253 , thus , @xmath254 which implies @xmath255 .",
    "now , we calculate the subscript of the variable in @xmath256 .",
    "@xmath257 which is equal to the subscript of variable in @xmath258 .",
    "therefore , the submatrix @xmath259 could be written as follows @xmath260 where @xmath261 and @xmath262 .",
    "let s check the signs to verify whether it s an alamouti @xmath89 .",
    "when @xmath110 is even , @xmath263    when @xmath110 is odd , @xmath264 therefore , @xmath265 holds and the submatrix @xmath259 an alamouti @xmath89 , which implies column @xmath110 and column @xmath20 are orthogonal .",
    "similar with the idea in theorem [ thm : gnw_main ] , by taking out some submatrices of @xmath242 , we can obtain new ones .",
    "[ thm : onm ] for positive integer @xmath238 even , let @xmath266 where @xmath208 are all vectors in @xmath77 with weight @xmath267 .",
    "then @xmath268 is a cod with parameter @xmath269 $ ] .    from theorem [ thm : on ] , we know @xmath270 is orthogonal .",
    "now we will prove that every variable with subscript weight @xmath271 exists on each column , which implies @xmath272 is a cod .    for @xmath273 and @xmath149 , since @xmath274 , then @xmath275 if and only if @xmath276 .    for @xmath277 and @xmath149 , since @xmath278 , then @xmath279 if and only if @xmath280 .    for the last column , since @xmath281 for @xmath253 , it s easy to see if @xmath282 , then @xmath283 and vice versa .",
    "it s worth noticing that , for a given row , there are both conjugated and non - conjugated nonzero entries in @xmath242 and @xmath268 , which violets the transceiver signal linearization property .    in @xcite , adams et al .",
    "proved that when @xmath284 , maximal rate cods with transceiver linearization can achieve the minimal delay , and when @xmath28 , it can not",
    ". our explicit - form constrictions are consistent with their results .",
    "the cods constructed by liang in @xcite , and by su and xia in @xcite is exactly @xmath285 , which achieves maximal rate and minimal delay when @xmath286 .",
    "the closed - form constructions in @xcite are exactly @xmath285 and @xmath268 , and therefore achieve maximal rate and minimal delay for any @xmath20 . the constructions in @xcite by adams et al .",
    "have rate @xmath135 and delay @xmath287 or @xmath288 , depending on the parity of @xmath20 modulo @xmath289 .",
    "those cods do not belong to first type , and have smaller decoding delay compared to @xmath214 with rate near @xmath135 .",
    "in @xcite , it is proved that in a cod with parameter @xmath290 $ ] when @xmath21 or @xmath22 , row @xmath161 and row @xmath162 share an alamout @xmath89 over column @xmath110 and @xmath206 if and only if the zero pattern of row @xmath161 and row @xmath162 are simultaneously nonzero exactly in columns @xmath110 and @xmath206 and never simultaneously zero or nonzero in any other column .",
    "in fact , it can be generalized for first type cod as follows .",
    "[ lem:0pat_to_sc ] for first type cod @xmath12 $ ] , @xmath291 and @xmath292 are the same , up to signs , implies that the zero pattern of row @xmath161 and that of row @xmath162 are different only at column @xmath110 and column @xmath206 ; @xmath291 and @xmath292 are conjugated , up to signs , implies that the zero pattern of row @xmath161 and that of row @xmath162 are the same only at column @xmath110 and column @xmath206 .    without loss of generality ,",
    "assume @xmath293 $ ] and @xmath294 $ ] , where @xmath295 $ ] represents an arbitrary element in @xmath296 . through some column permutation ,",
    "say @xmath297 , where @xmath298 is the set of all permutations on @xmath299 , we can transform @xmath0 into @xmath300 form , where @xmath301 and @xmath302 contains no zero entry .",
    "when @xmath303 , we know row @xmath161 and row @xmath162 are both in the upper or lower part of @xmath300 form .",
    "we can see that row @xmath161 and row @xmath162 have the same zero pattern except for column @xmath304 and @xmath305 after column permutation , which implies that row @xmath161 and row @xmath162 have the same zero pattern except for column @xmath306 and @xmath307 before column permutation .    when @xmath308 , we know row @xmath161 and row @xmath162 are in different parts ( upper or lower ) of @xmath300 form .",
    "we can see that the zero patterns of row @xmath161 and row @xmath162 are all different except for column @xmath304 and @xmath305 after column permutation , which implies the zero patterns of row @xmath161 and row @xmath162 are all different except for column @xmath306 and @xmath307 before column permutation .",
    "the next lemma states that in a first type cod , the existence of one zero pattern implies the existence of some other zero patterns , which will be used to prove the lower bound of decoding delay @xmath19 for first type cod .",
    "[ lem:01patern_transp ] let @xmath93 $ ] be a first type cod .",
    "if one zero pattern of some row is @xmath309 , then for any @xmath310 , there exists one row with zero pattern @xmath311 , such that @xmath312 and @xmath313 for all @xmath314 .",
    "furthermore , for any @xmath315 such that @xmath316 , there exists one row with zero pattern @xmath317 , such that @xmath318 .    * for the first part : * as when @xmath319 , the conclusion is trivial , we assume @xmath320 and @xmath321 . and , without loss of generality , assume the variable on that row in column @xmath110 is @xmath295 $ ] . through column permutation",
    "@xmath322 satisfying @xmath323 and @xmath324 , we can make this row the first row in @xmath300 form .",
    "recall @xmath300 form , we know the zero pattern of the second row is different from @xmath325 only in column 1 and 2 , which implies that it s different from @xmath161 only in column @xmath326 and @xmath327 before column permutation .",
    "* for the second part : * without loss of generality , assume the variable on that row in column @xmath110 is @xmath295 $ ] . through column permutation @xmath322 such that @xmath328 and @xmath324 , we can make this row the first row in @xmath300 form after column permutation .",
    "recall @xmath300 form , we know the zero pattern of the first row of the lower part is the same as @xmath325 only in column 1 and @xmath329 , which implies that it s only the same as @xmath161 in column @xmath326 and @xmath330 before column permutation .",
    "next lemma gives an lower bound of the decoding delay @xmath19 for first type cod when @xmath20 and the number of nonzero entries in some row are given .",
    "[ lem : lowbound_p_nw ] let @xmath93 $ ] be a first type cod .",
    "if one row in @xmath0 contains @xmath210 nonzero entries , then @xmath331 when @xmath332 ; and @xmath333 when @xmath334 .    furthermore , all zero patterns with weight @xmath210 or @xmath335 exists in @xmath0 .    according to the condition ,",
    "assume that one row in @xmath0 has zero pattern @xmath309 such that @xmath336 .",
    "then for any zero pattern @xmath317 with @xmath337 , there exists a permutation @xmath297 such that @xmath338 .",
    "since any permutation is a product of transpositions , then @xmath322 can be written as the product of transpositions .",
    "according to lemma [ lem:01patern_transp ] , we claim there exists one row in @xmath0 with zero pattern @xmath339 .",
    "again , by lemma [ lem:01patern_transp ] , the existence of zero pattern @xmath161 implies one row with zero pattern @xmath162 such that @xmath340 . by similar arguments in the last paragraph",
    ", we claim all zero patterns with weight @xmath335 exist . when @xmath341 , we know @xmath19 is lower bounded by the number of all zero patterns with weight @xmath210 and @xmath335 , i.e. , @xmath342 .",
    "when @xmath343 , we know @xmath19 is lower bounded by the number of all zero patterns with weight @xmath210 , i.e. , @xmath344 .    for first type cod , besides the lower bound , we can say more about the decoding delay @xmath19 , as the following lemma reveals .",
    "let @xmath93 $ ] be an atomic first type cod .",
    "if one row in @xmath0 contains @xmath210 nonzero entries , then @xmath19 is a multiple of @xmath345 when @xmath346 ; and @xmath19 is a multiple of @xmath347 when @xmath334 .    at first , we will show , for an atomic first type cod @xmath93 $ ] , if one row contains @xmath210 nonzero entries , then each row contains @xmath210 or @xmath335 nonzero entries .",
    "since @xmath0 is atomic , then , for any pair of @xmath348 , there exists @xmath349 such that @xmath122 and @xmath123 share some common rows , @xmath123 and @xmath124 share some common rows , ... , @xmath125 and",
    "@xmath126 share some common rows .",
    "note that , in some @xmath97 form of first type cod , if one row contains @xmath210 nonzero entries , then all rows in @xmath97 contains @xmath210 or @xmath335 nonzero entries . as @xmath350 and @xmath351 are taken arbitrarily , we claim every row of @xmath93 $ ] contains @xmath210 or @xmath335 nonzero entries .",
    "assume that zero pattern @xmath161 appears with maximal times @xmath351 , say , row @xmath352 have zero pattern @xmath161 .",
    "for any @xmath110 satisfying @xmath320 , there exists a column permutation @xmath322 on @xmath0 such that @xmath353 and @xmath354 .",
    "therefore , @xmath355 is in @xmath356 form , where @xmath357 $ ] appears in the first column of row @xmath355 after column permutation @xmath322 .",
    "since @xmath357 $ ] appears in the same column , @xmath358 , \\ldots , z[j_t]$ ] are all different , and thus form @xmath356 are mutually disjointed .",
    "now , we will show all zero patterns with weight @xmath210 exist @xmath351 times .",
    "recall @xmath97 form , we claim there are @xmath351 different rows with zero pattern @xmath162 , where @xmath162 is obtained by exchanging the value on @xmath71 and @xmath359 of @xmath161 with any @xmath360 . since any permutation can be written as the product of transpositions , repeat this procedure , we know all zero patterns with weight @xmath210 exists at least @xmath351 times . by the maximality of @xmath351",
    ", we claim all zero patterns with weight @xmath210 exists @xmath351 times .",
    "finally , we will show all zero patterns with weight @xmath335 exist @xmath351 times . for any @xmath361 , recall @xmath97 form , we claim there are @xmath351 different rows with zero pattern @xmath362 . following similar argument of the above paragraph , we claim all zero patterns with weight @xmath335 exists @xmath351 times .    therefore , we have @xmath363 when @xmath332 ; and @xmath364 when @xmath365 , where @xmath351 is a positive integer .",
    "next three lemmas are about the structure of cod @xmath214 and @xmath268 , and they will be used in the proof of theorem [ thm : gnw_main ] .",
    "[ lem : smalst_idx_row ] for @xmath366 and @xmath221 , @xmath367 $ ] is the variable with smallest index on row @xmath208 of @xmath143 , where @xmath368 , if and only if @xmath369 or @xmath370    by the definition of @xmath214 , we know that for all @xmath206 satisfying @xmath371 , @xmath372 $ ] , where @xmath373 .    therefore , if @xmath374 , for any @xmath361 , @xmath375 if and only @xmath376 @xmath377 ; if @xmath320 , for any @xmath321 , @xmath378 if and only if @xmath379 .",
    "[ lem : smalst_idx_bj ] for @xmath380 and @xmath381 , the smallest index of variables in @xmath382 form of @xmath143 is @xmath383 .",
    "we prove it by calculating the indexes of all variables in @xmath382 form directly . by the definition of @xmath143 , we know",
    "@xmath367 $ ] is in @xmath384 , where @xmath385 . for @xmath386 ,",
    "@xmath387 $ ] , where @xmath388 .    for what @xmath389 satisfying @xmath360",
    ", value @xmath390 reaches the minimal ?",
    "without loss of generality , assume @xmath374 and @xmath391 .",
    "it s easy to see that @xmath110 should be as small as possible and @xmath206 should be as big as possible . therefore , @xmath392 and @xmath393 , and @xmath394 is the smallest index of variables in @xmath382 form of @xmath143 .    for @xmath21 or @xmath22 , cods @xmath214 , @xmath139 , are all atomic .",
    "and when @xmath21 , @xmath271 even , cod @xmath268 is atomic .    if @xmath332 , @xmath214 has parameter @xmath395 $ ] . by lemma [ lem : lowbound_p_nw ] ,",
    "we know @xmath19 is minimal , and therefore @xmath214 is atomic .",
    "it s similar to prove @xmath268 is atomic , for @xmath21 , @xmath271 even .    for @xmath21 , cod @xmath396 , assume that there is an atomic cod @xmath0 consisting of some rows of @xmath396 .",
    "take one @xmath397 and @xmath150 , such that @xmath367 $ ] appears in @xmath0 . by the definition of @xmath396 ,",
    "@xmath367 $ ] appears in @xmath398 , where @xmath399 . for any @xmath206 ,",
    "satisfying @xmath400 , @xmath401 contains the variable with index @xmath402 .",
    "thus @xmath403 $ ] should exist in @xmath0 . since",
    "@xmath110 and @xmath206 are taken arbitrary if @xmath360 is satisfied , by repeating this procedure , we claim all variables with index weight @xmath404 appears in @xmath0",
    ". therefore @xmath405 , and the proof is complete .",
    "the next theorem is our main result , which determines the parameters as well as the structures of most atomic first type cods .",
    "[ thm : gnw_main ] let @xmath93 $ ] be an atomic cod , with some row containing @xmath210 nonzero entries , and @xmath332 .",
    "then , @xmath1=[{n \\choose w-1 } + { n \\choose w+1 } , n , { n \\choose w}]$ ] and @xmath0 is the same as @xmath214 under equivalence operation .",
    "we first present an example to illustrate our proof idea .",
    "for some atomic cod @xmath0 , with @xmath406 and @xmath407 , we will show how to prove it is the same as @xmath408 for convenience , we denote @xmath409 by @xmath410 , @xmath411 by @xmath412 , @xmath413 by @xmath414 .    since @xmath407",
    ", there is at least one row of @xmath0 which contains @xmath415 nonzero entries . without loss of generality ,",
    "we denote it by @xmath416 it can be achieved by instance renaming , instance conjugation and instance negation .    recalling @xmath300 form , we claim there exists one row of @xmath0 matches @xmath417 . at first",
    ", we can use row negation to make sure @xmath418 takes the same sign as that of @xmath214 , which is `` @xmath419 '' . by orthogonality ,",
    "the first row shares an alamouti @xmath89 with this row , which is @xmath420 .",
    "thus , @xmath421 should be @xmath422 .",
    "now we have determined two rows of @xmath0 as follows @xmath423    recalling @xmath300 form again , there must exist one row of @xmath0 matches @xmath424 . at first",
    ", we can use row negation to make sure @xmath418 takes the same sign as that of @xmath214 , which is `` @xmath425 '' . by orthogonality ,",
    "the first row shares an alamouti @xmath89 with this row , which is @xmath426 .",
    "thus , @xmath421 should be @xmath427 .",
    "now , we have determined three rows of @xmath0 as follows @xmath428    recalling @xmath429 form , there must exist one row of @xmath0 matches @xmath430 . at first",
    ", we can use row negation to make sure @xmath418 takes the same sign as that of @xmath214 , which is `` @xmath419 '' . by orthogonality ,",
    "the first row shares an alamouti @xmath89 with this row , which is @xmath431 , which implies @xmath421 should be @xmath432 .",
    "now , we have @xmath433 which is already a cod .",
    "since @xmath0 is atomic , we claim @xmath1 = [ 4 , 3 , 3]$ ] and it is the same as @xmath434 under equivalence operation .    applying the above method , for a general @xmath12 $ ] with some row containing @xmath210 nonzero entries , @xmath332 , we will prove that , using equivalence operation , we can transform @xmath0 to @xmath214 row by row in a specific order .",
    "we reorder the rows in @xmath214 first by order of the smallest index of the variables on that row in increasing , then by the order of the row index in increasing . we will use induction to prove that",
    ", @xmath0 is the same as @xmath214 under equivalence operation , and the induction parameter is the reordered rows of @xmath214 .",
    "* induction basis : * for the first row of @xmath214 , say row @xmath435 . in @xmath214 ,",
    "find one row with the zero pattern @xmath436 .",
    "note that lemma [ lem : lowbound_p_nw ] guarantees the existence of this row . since all variables exist for the first time , we can use instance renaming , instance conjugation and instance negation to make this row the same as the corresponding row of @xmath214 .",
    "* induction step : * for variable index @xmath437 and row @xmath438 $ ] , where @xmath439 .",
    "assume that there exists an equivalence operation on @xmath0 such that some rows of @xmath0 are the same as rows of @xmath214 which either has the smallest index less than @xmath162 or the smallest index @xmath162 and its row index less than @xmath162 , we will show it is true after row @xmath212 in @xmath214 is added .",
    "we claim @xmath440 $ ] already exists in former induction steps .",
    "otherwise , @xmath162 should have the smallest index of all variables , and lemma [ lem : smalst_idx_bj ] implies @xmath162 is unique and thus already appears on the first row in the induction step .",
    "therefore , by lemma [ lem : lowbound_p_nw ] , we know that there exists one row of @xmath0 having the same zero pattern as row @xmath212 of @xmath214 with the corresponding position occupied @xmath440 $ ] . since @xmath440 $ ] already exists , whether @xmath440 $ ] takes conjugation is already determined by the zero pattern @xmath441 .",
    "thus , we can use row negation to make sure @xmath440 $ ] takes the same sign the same as @xmath442 .",
    "we will show that for all the other nonzero entries on this row of @xmath0 ,    * either the variable exists for the first time ( and it ca nt be a used variable ) , which implies we can use instance renaming , instance conjugation and instance negation to make it the same as the corresponding one in @xmath214 , * or it s uniquely determined , including sign and conjugation , by the orthogonality of @xmath0 .",
    "for any @xmath443 , let s consider the entry on @xmath444 row and @xmath359 column of @xmath0 .",
    "by assumption that @xmath440 $ ] is the smallest - index variable in row @xmath212 , we know from lemma [ lem : smalst_idx_row ] , either @xmath445 or @xmath446 holds",
    ". we will discuss it in the following four cases separately .",
    "* case 1 : @xmath447 and @xmath448 for some @xmath449 .",
    "* let @xmath450 $ ] , where @xmath451 .",
    "we have @xmath452 since @xmath453 and @xmath454 , we have @xmath455 , which implies row @xmath456 is already determined . by the orthogonality of @xmath0 , submatrix @xmath457 & \\bigstar \\\\",
    "z[\\gamma ] & z[\\beta ] \\end{pmatrix}\\ ] ] should be an alamouti @xmath89 .",
    "thus @xmath421 should be @xmath458 $ ] and its conjugation and sign are uniquely determined by the other three entries .",
    "* case 2 : @xmath459 and @xmath460 .",
    "* let @xmath461 $ ] , where @xmath462 .",
    "thus @xmath463 .    to prove @xmath458 $ ] exists for the first time , it s sufficient to show that there is no determined rows with zero pattern matching one in @xmath464 form . since @xmath332 , any fixed row has a unique zero pattern .",
    "by lemma [ lem : smalst_idx_bj ] , we know that @xmath440 $ ] is the smallest index variable in @xmath465 form of @xmath214 , adding the fact that @xmath466 , which implies that @xmath458 $ ] exists for the first time .",
    "therefore , we can use instance renaming , instance conjugation and instance negation to make @xmath467 the same as @xmath468 .    * case 3 : @xmath469 and @xmath470 for some @xmath471 .",
    "* let @xmath450 $ ] , where @xmath472 .",
    "we have @xmath473 since @xmath474 and @xmath471 , we have @xmath475 , which implies row @xmath456 is already determined .",
    "following the same argument in * case 1 * , we know @xmath476 is uniquely determined .",
    "* case 4 : @xmath469 and @xmath477 .",
    "* let @xmath478 $ ] , where @xmath472 .",
    "we have @xmath479 note that @xmath472 and @xmath480 , which implies @xmath481 .",
    "therefore , row @xmath456 in @xmath0 is determined .",
    "following the same argument in * case 1 * , we know element in @xmath482 is uniquely determined .",
    "it is worth noting that the equivalence operations used in transform @xmath0 to @xmath214 does not contain column negations .",
    "this property will be used in the sequel .",
    "theorem [ thm : gnw_main ] does not consider the case when @xmath483 . to cover the final case",
    ", we need the following lemma first , which states when @xmath484 , cod with parameter @xmath485 $ ] does not exist . this result",
    "is first proved in @xcite .",
    "however , based on our explicit construction , we present another proof here .",
    "[ lem : m_odd_notexist ] when @xmath21 , @xmath271 odd , there does not exist cod with parameter @xmath1 = [ \\binom{n}{m-1 } , n , \\binom{n-1}{m-1}]$ ] .    assume to the contrary that there exists cod @xmath486 $ ] . by deleting the last column of @xmath0",
    ", we obtain a cod with parameter @xmath487 $ ] . by theorem [ thm : gnw_main ] , it is equivalent to @xmath488 .",
    "thus , by padding a column @xmath489 to @xmath488 , we can obtain a cod with parameter @xmath490 $ ] .",
    "now , we will show it is impossible .    by lemma [ lem : lowbound_p_nw ] , we know the zero pattern of @xmath0 is unique . by lemma [ lem:0pat_to_sc ] ,",
    "we know which variable should be in @xmath491 is uniquely determined by the zero pattern of this row .",
    "set @xmath492 , where @xmath493 .",
    "it is easy to verify that , for arbitrary @xmath494 , @xmath291 and @xmath491 are contained in the following alamouti @xmath495 where @xmath496 .",
    "a direct computation will verify @xmath497 and @xmath498 .",
    "thus , setting @xmath499 is valid .    calculating @xmath198 by definition ,",
    "we know that when @xmath110 is odd , @xmath500 ; when @xmath110 is even , @xmath501 .",
    "therefore , when @xmath110 is odd , we have @xmath502 ; when @xmath110 is even , we have @xmath503 .",
    "next , we will show a contradiction by calculating the relationship between @xmath504 and @xmath505 in two ways .",
    "* way 1 : * let @xmath506 initially . and let @xmath507 and @xmath508 .",
    "finally , we obtain the relationship between @xmath509 and @xmath510 . since @xmath511 if and only if @xmath110 is odd , we claim @xmath512    * way 2 : * let @xmath513 initially . and let @xmath514 and @xmath515 .",
    "finally , we obtain the relationship between @xmath509 and @xmath516 . since @xmath511 if and only if @xmath110 is odd , we claim @xmath517 which is contradicted with !    therefore ,",
    "it s impossible to pad an extra column to @xmath518 to obtain a @xmath519 $ ] a cod , and thus cod with parameter @xmath490 $ ] does not exist .",
    "now , we are ready to prove the final case . along with theorem [ thm : gnw_main ] ,",
    "we have determined the parameters and structures of all atomic cods .",
    "[ thm : gnm_main ] when @xmath21 , let @xmath12 $ ] be an atomic cod with some row containing @xmath267 nonzero entries",
    ". then @xmath520 = [ \\binom{n}{m-1 } , n , \\binom{n-1}{m-1}]$ ] or @xmath521 $ ] .",
    "when @xmath522=[2\\binom{n}{m-1 } , n , 2\\binom{n-1}{m-1}]$ ] , @xmath0 is the same as @xmath523 under equivalence operation .",
    "when @xmath1 = [ \\binom{n}{m-1 } , n , \\binom{n-1}{m-1}]$ ] , @xmath0 is the same as @xmath524 under equivalence operation and @xmath271 is even .    by deleting the last column of @xmath525 $ ] , we obtain a cod , say @xmath95 , with parameter @xmath526 $ ] . by theorem [ thm : gnw_main ] and the fact that no column negation is used , we know @xmath95 is the same as the catenation of @xmath351 cods @xmath488 under equivalence operation , which are denoted by @xmath527 . and we denote the last column by by @xmath528 , where @xmath529 and @xmath530 are in the same rows of @xmath0 . for the convenience of description ,",
    "we denote the row of @xmath0 by @xmath531 , and denote the variable index of @xmath0 by @xmath532 .",
    "let s consider padding the last column .",
    "for some variable @xmath533 , recalling lemma [ lem:0pat_to_sc ] and the fact that zero patterns of @xmath214 do not repeat , we know that it might be in row @xmath534 of @xmath0 for some @xmath535 and @xmath161 is uniquely determined .",
    "if @xmath536 $ ] , then @xmath537 $ ] and other variables @xmath538 $ ] on this row should be in an alamouti @xmath89 , which implies those @xmath538 $ ] are in @xmath539 . repeating this procedure , we can prove all variables in @xmath540 are in @xmath539 , because @xmath540 is atomic .",
    "therefore , @xmath541 is a cod .",
    "since @xmath0 is atomic , we claim @xmath542 . by lemma [ lem : m_odd_notexist ] ,",
    "we know @xmath271 is even .",
    "since the above procedure indicates the last column is uniquely determined , we claim atomic cod with parameter @xmath490 $ ] is unique under equivalence operation , which implies @xmath0 is equivalent to @xmath524 .    if @xmath543 $ ] for some @xmath544 , without loss of generality , letting @xmath545 , then @xmath546 $ ] and other variable @xmath538 $ ] on this row should be in an alamouti @xmath89 , which implies that those @xmath538 $ ] are in @xmath547 .",
    "repeating this procedure , we can prove all variables in @xmath540 appear in @xmath547 and all variables in @xmath548 appear in @xmath539 , because both @xmath540 and @xmath548 are atomic . therefore , @xmath549 is a cod .",
    "since @xmath0 is atomic , we claim @xmath550 . from the above procedure , we know @xmath539 and @xmath547",
    "are uniquely determined .",
    "therefore , atomic cod with parameter @xmath551 $ ] is unique under equivalence operation , which implies @xmath0 is equivalent to @xmath523 .",
    "[ thm : poss_para ] given positive integers @xmath552 , first type cod @xmath93 $ ] exists if and only if there exist nonnegative integers @xmath553 such that @xmath554 when @xmath555 , @xmath556 and @xmath557 when @xmath28 .",
    "* for the `` if '' direction : * when @xmath555 , assume that @xmath558 we can construct a cod achieving parameter @xmath522 $ ] by simply catenating @xmath559 atomic cods @xmath560 $ ] , @xmath561 .",
    "when @xmath28 , assume that @xmath556 and @xmath562 we can construct a cod achieving parameter @xmath522 $ ] by simply catenating @xmath559 atomic cods @xmath563 $ ] , @xmath564 , and @xmath565 atomic cods @xmath566 $ ] .",
    "* for the `` only if '' direction : * decompose cod @xmath0 into atomic ones . by theorem [ thm : gnw_main ] and theorem [ thm : gnm_main ] , we know that all atomic cods have parameter @xmath567 $ ] for @xmath561 , or @xmath568 $ ] when @xmath569",
    ".    say , when @xmath570 , there are @xmath559 atomic cods with parameter @xmath567 $ ] , @xmath571 .",
    "when @xmath28 , there are there are @xmath559 atomic cods have parameter @xmath572 $ ] , @xmath573 , @xmath574 atomic cods with parameter @xmath575 $ ] and @xmath576 atomic cods with parameter @xmath577 $ ] .",
    "finally , let @xmath578 .",
    "the following corollary characterizes all possible structures of first type cod , which has similar proof with theorem [ thm : poss_para ] . and",
    "thus the proof is omitted .",
    "let @xmath93 $ ] be a first type cod .",
    "then @xmath0 is equivalent to the catenation of @xmath579 times @xmath580 , @xmath581 , for some @xmath553 satisfying @xmath582 and @xmath583 when @xmath555 ; @xmath0 is equivalent to the catenation of @xmath579 times @xmath580 , @xmath584 and @xmath585 times @xmath268 , for some @xmath586 and @xmath585 satisfying @xmath587 and @xmath588 when @xmath28 .    furthermore , the number of non - equivalent cods equals the number of different of solutions of @xmath553 when @xmath140 , or @xmath589 when @xmath28 .    since all optimal cods , which achieves both the maximal rate and minimal delay , have parameters @xmath590 $ ] when @xmath591 ; have parameter @xmath592 $ ] when @xmath25 .",
    "and they are proved to be in first type .",
    "we can obtain the following corollary directly .",
    "let @xmath593 or @xmath22 .",
    "when @xmath555 , all maximal - rate , minimal - delay cods are the same as @xmath396 under equivalence operation ; when @xmath28 , all maximal - rate , minimal - delay cods are the same as @xmath268 under equivalence operation .    the uniqueness under equivalence operation of optimal cod for @xmath594 is already proved in @xcite by showing that all such cods with optimal parameters can be transformed in to a standard form .",
    "the uniqueness for the case @xmath25 is proved for the first time .    in @xcite ,",
    "three facts are proved    * for @xmath106 , let @xmath0 be a maximal rate , minimal delay cod .",
    "then , @xmath0 is equivalent to a cod that is conjugation - separated . * for @xmath21 ,",
    "let @xmath0 be a maximal rate cod with decoding delay @xmath24 .",
    "then no arrangement of @xmath0 is conjugation - separated .",
    "* it is possible to construct a maximum rate cod with any even number of columns that simultaneously achieves conjugation - separation and decoding delay @xmath26 .    by theorem [ thm : gnw_main ] , a @xmath595 $ ] cod is equivalent to @xmath396 , which conjugation - separated .",
    "thus , 1 ) is true . by theorem [ thm : gnm_main ] , we know cod @xmath596 $ ] is equivalent to @xmath268 . therefore , to prove 2 ) , it s sufficient to show @xmath268 is nt equivalent to a conjugation - separated cod . by the constructions of @xmath396 , 3 )",
    "we are immensely grateful to chen yuan for deciding the signs in theorem [ thm : gn ] .        s.  s.  adams , j.  davis , n.  karst , m.  k.  murugan , b.  lee , m.  crawford , c.  greeley , `` novel classes of minimal delay and low papr rate 1/2 complex orthogonal designs , '' ieee trans .",
    "theory , vol .",
    "2254 - 2262 , apr . 2011 .",
    "s.  s.  adams , n.  karst , m.  k.  murugan and t.  a.  wysocki , `` on transceiver signal linearization and the decoding delay of maximum rate complex orthogonal space - time block codes , '' ieee trans .",
    "theory , vol .",
    "3618 - 3621 , jun . 2011 .",
    "k. lu , s. fu , and x. g. xia , `` closed - form designs of complex orthogonal space - time block codes of rates ( k+1)/(2k ) for 2k-1 or 2k transmit antennas , '' ieee trans .",
    "theory , vol .",
    "12 , pp . 4340 - 4347 , dec .",
    "s. k. mohammed , b. s. rajan and a. chockalingam , `` on the maximal rate of non - square stbcs from complex orthogonal designs , '' in proc .",
    "ieee global telecommun .",
    "( globecom 07 ) , nov . 2007 , pp .",
    "1709 - 1713 .",
    "w.  su and x .- g .",
    "xia , `` two generalized complex orthogonal space - time block codes of rates 7/11 and 3/5 for 5 and 6 transmit antennas '' , ieee trans .",
    "theory , vol .",
    "313 - 316 , jan . 2002 .",
    "j. seberry , s. a. spence , and t. a. wysocki , `` a construction technique for generalized complex orthogonal designs and applications to wireless communications , '' linear algebra and its applications 405 ( 2005 ) 163 - 167 .",
    "l. c. tran , t. a. wysocki , j. seberry , a. mertins and s. s. adams , `` novel constructions of improved square complex orthogonal designs for eight transmit antennas , '' ieee trans .",
    "theory , vol ."
  ],
  "abstract_text": [
    "<S> complex orthogonal designs ( cods ) are used to construct space - time block codes . </S>",
    "<S> cod @xmath0 with parameter @xmath1 $ ] is a @xmath2 matrix , where nonzero entries are filled by @xmath3 or @xmath4 , @xmath5 , such that @xmath6 . </S>",
    "<S> define @xmath0 a first type cod if and only if @xmath0 does not contain submatrix @xmath7 or @xmath8 . </S>",
    "<S> it is already known that , all cods with maximal rate , i.e. , maximal @xmath9 , are of the first type .    in this paper </S>",
    "<S> , we determine all achievable parameters @xmath1 $ ] of first type cod , as well as all their possible structures . </S>",
    "<S> the existence of parameters is proved by explicit - form constructions . </S>",
    "<S> new cods with parameters @xmath10=[\\binom{n}{w-1}+\\binom{n}{w+1 } , n , \\binom{n}{w } ] ,   $ ] for @xmath11 , are constructed , which demonstrate the possibility of sacrificing code rate to reduce decoding delay . </S>",
    "<S> it s worth mentioning that all maximal rate , minimal delay cods are contained in our constructions , and their uniqueness under equivalence operation is proved . </S>"
  ]
}