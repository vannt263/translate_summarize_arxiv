{
  "article_text": [
    "we consider the advection - diffusion equation @xmath0 with @xmath1 , @xmath2 , @xmath3 and @xmath4 . for simplicity",
    "we assume the region @xmath5 is polygonal .",
    "we also assume @xmath6 and then we have a weak solution @xmath7 .",
    "it is well known that this problem can exhibit boundary or internal layers in the convection dominated regime and that for the standard continuous galerkin ( cg ) formulation these layers cause non - physical oscillations in the numerical solution .",
    "several adaptations to the cg method are effective but space does not allow their discussion here . we refer readers to @xcite for a full description of these approaches .",
    "discontinuous galerkin ( dg ) methods also offer a stable approach for approximating this problem .",
    "however the number of degrees of freedom required for dg methods is in general considerably larger than for cg methods .",
    "we describe an alternative approach also studied in @xcite .",
    "a dg method is applied on the layers and a cg method away from the layers .",
    "we call this approach the continuous - discontinuous galerkin ( cdg ) method .",
    "the hypothesis is that provided the layers are entirely contained in the dg region the instability they cause will not propagate to the cg region .",
    "note that in our formulation there are no transmission conditions at the join of the two regions .",
    "here we present the cdg method and discuss its implementation using the ` deal.ii `  finite element library .",
    "we additionally provide some numerical experiments to highlight the performance of the method .",
    "assume that we can identify a decomposition of @xmath8 where it is appropriate to apply the cg and dg methods respectively .",
    "we do not consider specific procedures to achieve this here , but generally it will be that we wish all boundary and internal layers to be within @xmath9 . identifying these regions can be done a priori in some cases or a posteriori based on the solution of a dg finite element method . consider a triangulation @xmath10 of @xmath5 which is split into two regions @xmath11 and @xmath12 where we will apply the cg and dg methods respectively . for simplicity",
    "we assume that the regions @xmath11 and @xmath12 are aligned with the regions @xmath13 and @xmath9 and the set @xmath14 contains edges which lie in the intersection of the two regions .",
    "call the mesh skeleton @xmath15 and the internal skeleton @xmath16 .",
    "define @xmath17 as the union of boundary edges and the inflow and outflow boundaries by @xmath18 where @xmath19 is the outward pointing normal .",
    "define @xmath20 ( resp .",
    "@xmath21 ) to be the intersection of @xmath17 with @xmath11 ( resp .",
    "@xmath12 ) . by convention",
    "we say that the edges of @xmath14 are part of the discontinuous skeleton @xmath22 and @xmath23 . with this convention",
    "there is potentially a discontinuity of the numerical solution at @xmath14 .",
    "elements of the mesh are denoted @xmath24 , edges ( resp .",
    "faces in 3d ) by @xmath25 and denote by @xmath26 and @xmath27 the diameter of an element and an edge , defined in the usual way .    the jump @xmath28 and average @xmath29 of a scalar or vector function on the edges in @xmath15 are defined as in , e.g. , @xcite .",
    "define the cdg space to be @xmath30 where @xmath31 is the space of polynomials of degree at most @xmath32 supported on @xmath24 .",
    "this is equivalent to applying the usual cg space on @xmath13 and a dg space on @xmath9 .",
    "we may now define the interior penalty cdg method : find @xmath33 such that for all @xmath34 @xmath35 where @xmath36 \\nonumber \\\\              & \\qquad + \\sum_{{\\ensuremath{e \\in { \\ensuremath{{\\mathcal{e}_h}}}}}}\\left [ \\int_e \\sigma \\frac{{\\varepsilon}}{h_e } { \\ensuremath{{\\ensuremath{\\llbracket u_h \\rrbracket } } } } { \\ensuremath{\\cdotp}}{\\ensuremath{{\\ensuremath{\\llbracket v_h \\rrbracket } } } } - \\int_e \\left ( { \\ensuremath{{\\ensuremath{\\ { \\ ! \\ ! \\ { { \\varepsilon}\\nabla u_h \\ }   \\ ! \\ ! \\ } } } } } { \\ensuremath{\\cdotp}}{\\ensuremath{{\\ensuremath{\\llbracket v_h \\rrbracket } } } } + { \\vartheta}{\\ensuremath{{\\ensuremath{\\ { \\ ! \\ ! \\ { { \\varepsilon}\\nabla v_h \\ }   \\ ! \\ ! \\ } } } } } { \\ensuremath{\\cdotp}}{\\ensuremath{{\\ensuremath{\\llbracket u_h \\rrbracket}}}}\\right ) \\right ] \\nonumber \\\\          b_a(u_h , v_h ) & = \\sum_{{\\ensuremath{e \\in { \\ensuremath{{\\mathcal{e}_h^o}}}}}}\\int_e b { \\ensuremath{\\cdotp}}{\\ensuremath{{\\ensuremath{\\llbracket v_h \\rrbracket } } } } u_h^- + \\sum_{e \\in { \\ensuremath{\\gamma^{\\text{out } } } } } \\int_e ( b { \\ensuremath{\\cdotp}}n ) u_h v_h \\nonumber      \\end{split}\\ ] ] and @xmath37 - \\sum_{e \\in { \\ensuremath{\\gamma^{\\text{in } } } } } \\int_e ( b { \\ensuremath{\\cdotp}}n)v_hg . \\nonumber\\ ] ] here @xmath38 is the penalization parameter and @xmath39 .",
    "note that through the definition of @xmath40 the edge terms are zero on @xmath41 and the method reduces to the standard cg fem . if we take @xmath42 , i.e. , the entire triangulation as discontinuous , we get the interior penalty ( ip ) family of dg fems ( see , e.g. , @xcite ) .",
    "the work of @xcite shows that the cg method is the limit of the dg method as @xmath43 .",
    "a reasonable hypothesis is that the solution to the cdg method is the limit of the solutions to the dg method as the penalty parameter @xmath43 on @xmath44 , i.e. , super penalising the edges in @xmath41 .",
    "call @xmath45 and @xmath46 the penalty parameters for edges in @xmath41 and @xmath22 respectively .",
    "call the numerical solution for the cdg problem @xmath47 .",
    "the solution to the pure dg problem on the same mesh is denoted @xmath48 where @xmath49 is the usual piecewise discontinuous polynomial space on @xmath10",
    ". then we have    [ thm : convergence ] the dg solution converges to the cdg solution of - as @xmath50 , i.e. , @xmath51    we do not prove this result here but direct readers to @xcite for a full discussion .",
    "although this result does not imply stability of the cdg method ( indeed , for the case where the @xmath13 region is taken to be the whole of @xmath5 it shows that the cdg method has the same problems as the cg method ) , but does indicate that investigation of the cdg method as an intermediate stage between cg and dg is justified .",
    "hence , it aids into building an understanding of the convergence and stability properties of the cdg method , based on what is known for cg and dg .",
    "this , in turn , is of interest , as the cdg method offers substantial reduction in the degrees of freedom of the method compared to dg .",
    "the cdg method poses several difficulties in implementation .",
    "one approach is to use the super penalty result of theorem [ thm : convergence ] to get a good approximation to the cdg solution .",
    "however this will give a method with the same number of degrees of freedom as dg .",
    "we therefore present an approach to implement the cdg method with the appropriate finite element structure .",
    "we discuss this approach with particular reference to the ` deal.ii `  finite element library @xcite .",
    "this is an open source library designed to streamline the creation of finite element codes and give straightforward access to algorithms and data structures .",
    "we also present some numerical experiments .",
    "the main difficulty in implementing a cdg method in ` deal.ii `  is the understandable lack of a native cdg element type . in order to assign degrees of freedom to a mesh in ` deal.ii `  the code must be initialised with a ` triangulation ` and then instructed to use a particular finite element basis to place the degrees of freedom .",
    "although it is possible to initialise a ` triangulation ` with the dg and cg regions set via the ` material_id ` flag , no appropriate element exists . in the existing ` deal.ii `  framework it would be difficult to code an element with the appropriate properties . a far more robust approach is to use the existing capabilities of the library and therefore allow access to other features of ` deal.ii `  .",
    "for instance without the correct distribution of degrees of freedom the resulting sparsity pattern of the finite element matrix would be suboptimal , i.e. , containing more entries than required by the theory and therefore reducing the benefit of shrinking the number of degrees of freedom relative to a dg method .",
    "the ` deal.ii `  library has the capability to handle problems with multiple equations applied to a single mesh such as the case of a elastic solid fluid interaction problem . in our case",
    "we wish to apply different methods to the same equation on different regions of the mesh , which is conceptually the same problem in the ` deal.ii `  framework .",
    "in addition we will use the @xmath52 capability of the library .",
    "the ` deal.ii `  library has the capability to create collections of finite elements , ` hp::fecollection ` . here",
    "multiple finite elements are grouped into one data structure .",
    "as the syntax suggests the usual use is for @xmath52 refinement to create a set of finite elements of the same type ( e.g. , scalar lagrange elements ` fe_q ` or discontinuous elements ` fe_dgq ` ) of varying degree .",
    "unfortunately it is not sufficient to create a ` hp::fecollection ` of cg and dg elements as the interface between the two regions will still be undefined . in order to create an admissible collection of finite elements we use ` fe_nothing `  .",
    "this is a finite element type in ` deal.ii `  with zero degrees of freedom . using the @xmath53 class we create two vector - valued finite element types @xmath54 and @xmath55 and",
    "combine them in a ` hp::fecollection ` .",
    "we apply the first @xmath53 on the cg region , and the second on the dg region .",
    "now when we create a ` triangulation ` initialised with the location of cg and dg elements the degrees of freedom can be correctly distributed according to the finite element defined by ` hp::fecollection ` .    when assembling the matrix for the finite element method we need only be careful that we are using the correct element of ` hp::fecollection ` and the correct part of @xmath53 .",
    "the most difficult case is on the boundary @xmath14 where from a dg element we must evaluate the contribution from the neighbouring cg element ( note that in the cdg method a jump is permissible on @xmath14 ) .",
    "if we implement the cdg method in ` deal.ii `  in this way we create two solutions : one for the ` fe_q`-`fe_nothing `  component and another for the ` fe_nothing `  -`fe_dgq ` component .",
    "consider a domain @xmath56 in @xmath57 , @xmath58 and @xmath59 .",
    "the dirichlet boundary conditions and the forcing function @xmath60 are chosen so that the analytical solution is @xmath61 this solution exhibits an exponential boundary layer along @xmath62 and @xmath63 of width @xmath64 , @xmath65 .",
    "we solve the finite element problem on a 1024 element grid and fix @xmath66 .",
    "this is larger than is required for stability ( see example 1 below ) but shows the behaviour of ` fe_nothing `  more clearly .",
    "we show each of the components of ` fe_system ` and the combined solution . for comparison we also show the dg finite element solution for the same problem .      one advantage of following the",
    "` deal.ii `  framework is that the data structures will allow the implementation of @xmath52 methods .",
    "in fact we can envisage the implementation of a @xmath67 method where at each refinement there is the possibility to change the mesh size , polynomial degree or the element type .",
    "we propose no specific scheme here but simply remark that implementing a @xmath67 method is relatively straightforward with the ` fe_nothing `  approach .",
    "we present two numerical experiments highlighting the performance of the cdg method .",
    "both examples present layers when @xmath68 is small enough . in each case",
    "we fix the region where the continuous method is to be applied then vary @xmath68 .",
    "this causes the layer to steepen . in the advection dominated regime ,",
    "i.e. , @xmath68 large and no steep layer present , we see the cdg solution approximates the true solution well . as we make @xmath68 smaller the layer forms and",
    "extends into the continuous region .",
    "as @xmath68 becomes smaller still the layer leaves the continuous region and the performance of the dg and cdg method is indistinguishable . in each experiment",
    "we pick the @xmath13 and @xmath9 regions so that with the given refinement the region @xmath12 consists of exactly one layer of elements and coincides with @xmath9 .",
    "consider again the problem with true solution presented above .",
    "we solve the finite element problem on a 1024 element grid and fix @xmath69 so exactly one row of elements is in @xmath9 .",
    "as we vary @xmath68 the layer sharpens and moves entirely into the dg region .",
    "as we can see from figure [ fig : example1a ] before the layer has formed the two methods perform well .",
    "as the layer begins to form with decreasing @xmath68 it is not entirely contained in the discontinuous region and the error peaks . as the layer sharpens further it",
    "is entirely contained in the discontinuous region and the difference between the two solutions becomes negligible .",
    "now we look at a problem with an internal layer .",
    "let the advection coefficient be given by @xmath70 and pick the boundary conditions and right hand side @xmath60 so that the true solution is @xmath71 where @xmath72 is the error function defined by @xmath73      in figure [ fig : example2a ] we notice same the same behaviour as in example 1 .",
    "if the layer exists it must be contained within the discontinuous region for the two methods to perform equivalently . in figure",
    "[ fig : example2b ] we can see the cdg solution for various @xmath68 with the oscillations clearly visible when @xmath78 . when the layer is sharpened , the oscillations disappear ."
  ],
  "abstract_text": [
    "<S> for the stationary advection - diffusion problem the standard continuous galerkin method is unstable without some additional control on the mesh or method . </S>",
    "<S> the interior penalty discontinuous galerkin method is stable but at the expense of an increased number of degrees of freedom . </S>",
    "<S> the hybrid method proposed in @xcite combines the computational complexity of the continuous method with the stability of the discontinuous method without a significant increase in degrees of freedom . </S>",
    "<S> we discuss the implementation of this method using the finite element library ` deal.ii `  and present some numerical experiments . </S>"
  ]
}