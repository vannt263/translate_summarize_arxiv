{
  "article_text": [
    "in this paper , we further investigate the model - checking problem of real - time formalisms with parameters . in recent works ,",
    "parametric real - time model - checking problems have been studied by several authors .",
    "alur et al study in  @xcite the analysis of discrete- and dense - timed automata where clocks are compared to parameters . for this class of parametric timed automata , they focus on the emptiness problem : are there concrete values for the parameters so that the automaton has an accepting run ? they show that when only one clock is compared to parameters , the emptiness problem is decidable . but this problem becomes undecidable when three clocks are compared to parameters .",
    "hune et al study in @xcite a subclass of parametric dense - timed automata ( l / u automata ) such that each parameter occurs either as a lower bound or as an upper bound .",
    "wang in  @xcite , emerson et al in  @xcite , alur et al in  @xcite and the authors of this paper in  @xcite study the introduction of parameters in temporal logics .",
    "the model - checking problem for tctl extended with parameters over discrete- and dense - timed automata ( without parameters ) is decidable . on the other hand ,",
    "only a fragment of ltl extended with parameters is decidable .",
    "unfortunately , in all those previous works , the parameters are _ only _ in the model ( expressed as a timed automaton ) or _ only _ in the property ( expressed as a temporal logic formula ) .",
    "nevertheless , when expressing a temporal property of a parametric system , it is _ natural _ to refer in the temporal formula to the parameters used in the system .    in this paper",
    ", we study the model - checking problem of the logic tctl _ extended with parameters _ over the runs of a _",
    "discrete_-timed automaton with _",
    "one parametric clock_. to the best of our knowledge , this is the first work that studies the model - checking and parameter synthesis problems with parameters both in the model and in the property .",
    "we restrict to one parametric clock since the emptiness problem for discrete - time automata with three parametric clocks is already undecidable ( see above , @xcite ) .",
    "the case of dense - timed automata with one parametric clock is not investigated in this paper .",
    "let us illustrate the kind of properties that we can express with a parametric temporal logic over a parametric timed automaton .",
    "the automaton @xmath0 of figure  [ fig : intro ]        is a discrete - timed automaton with one clock @xmath1 and two parameters @xmath2 and @xmath3 .",
    "here we explicitly model the elapse of time by transitions labeled by @xmath4 or @xmath5 .",
    "state @xmath6 is labeled with atomic proposition @xmath7 and in all other states this proposition is false .",
    "the possible runs of this automaton starting at @xmath6 are as follows .",
    "the control instantaneously leaves @xmath6 and goes through @xmath8 to come back in @xmath6 , the time spent in this cycle is constrained by the parameters @xmath2 and @xmath3 .",
    "in fact , the control has to leave @xmath9 at most @xmath2 time units after entering it and the control has to stay exactly @xmath3 time units in state @xmath10 . to express properties of those behaviors , we use tctl logic augmented with parameters .",
    "let us consider the next three formulae for configuration @xmath11 , i.e. the control is in state @xmath6 and clock @xmath1 has value @xmath4 :    a.   @xmath12 b.   @xmath13 c.   @xmath14    the _ parameter synthesis problem _ associated to formula @xmath15 , asks for which values of @xmath16 and @xmath17 , the formula is true at configuration @xmath11 . by observing the model and the formula , we can deduce the following constraint on the parameters : @xmath18 .",
    "this means that any cycle through the four states has duration bounded by @xmath19 .",
    "formula @xmath20 formalizes the next question `` in all the cases where the value assigned to parameter @xmath2 is greater than the value assigned to parameter @xmath3 , is it true that any cycle has a duration bounded by @xmath21 '' . as there is no free parameter in the question",
    ", the question has a yes - no answer .",
    "this is a _ model - checking problem_. for formula @xmath20 , the answer is yes in configuration @xmath11 .",
    "finally , formula @xmath22 lets parameter @xmath3 free and formalizes the question `` what are the possible values that can be given to @xmath3 such that for any value of @xmath23 , a cycle through the four states lasts at most @xmath24 time units '' .",
    "this is again a parameter synthesis problem and the answer is @xmath25 .    in this paper",
    ", we study the algorithmic treatment of such problems .",
    "our results are as follows . on the negative side , we show that the model - checking problem of tctl extended with parameters is _ undecidable _ over timed automata with _ only one _ parametric clock .",
    "the undecidability result needs _ equality in the logic_. on the positive side , we show that the model - checking problem becomes _ decidable _ and the parameter synthesis problem is solvable for a fragment of the logic where the equality is not allowed . our algorithm is based on automata theoretic principles and an extension of our method ( see @xcite ) to express durations of runs in a timed automaton using presburger arithmetic . as a corollary",
    ", we obtain the decidability of the emptiness problem for discrete - timed automata with one parametric clock proved by alur et al in  @xcite .",
    "all the formulae given in the example above are in the decidable fragment .",
    "the paper is organized as follows . in section 2",
    ", we introduce the model of one parametric clock discrete - timed automaton and the parametric extension of tctl that we consider . in section 3",
    ", we establish the undecidability of the model - checking problem if equality can be used in the logic and we show how to solve the problem algorithmically for a fragment of the logic where equality is not allowed .",
    "proofs of two important propositions introduced in section 3 are postponed to section 4 .",
    "we finish the paper in section 5 by drawing some conclusions .",
    "in this section , we introduce _ parameters _ in the automaton used to model the system _ as well as _ in the logic used to specify properties of the system .",
    "the automata are parametric timed automata as defined in @xcite with a _ discrete _ time domain and _ one _ parametric clock .",
    "the logic is parametric timed ctl logic as defined in @xcite .",
    "we introduce the problems that we want to solve and we conclude the section with an example .",
    "[ not : guard ] let @xmath26 be a fixed finite set of _ parameters _ @xmath27 that are _ shared _ by the automaton and the logical formulae .",
    "parameter valuation _ for @xmath26 is a function @xmath28 which assigns a natural number to each parameter @xmath29 . in the sequel ,",
    "@xmath30 mean any linear term @xmath31 , with @xmath32 and @xmath33 . a parameter valuation @xmath34 is naturally extended to linear terms by defining @xmath35 for any @xmath36 .",
    "we denote by @xmath1 the _ unique _ parametric clock .",
    "the same notation @xmath1 is used for both the clock and a value of the clock .",
    "a _ guard _",
    "@xmath37 is any conjunction of @xmath38 with @xmath39 .",
    "we denote by @xmath40 the set of guards .",
    "notation @xmath41 means that @xmath1 satisfies @xmath37 under valuation @xmath34 .",
    "we use notation @xmath42 for the set of _ atomic propositions_.      we recall the definition of one parametric clock discrete - timed automata as introduced in @xcite .",
    "we make the hypothesis that non - parametric clocks have all been suppressed by a technique related to the region construction , see  @xcite for details .",
    "[ def : timed_aut ] a _ parametric timed automaton _",
    "@xmath0 is a tuple @xmath43 , where @xmath44 is a finite set of _ states _ , @xmath45 is a finite set of _ edges _",
    ", @xmath46 is a _ labeling _ function and @xmath47 assigns an _",
    "@xmath48 to each state @xmath49 .",
    "a _ configuration _ of @xmath0 is a pair @xmath50 , where @xmath49 is a state and @xmath1 is a clock value .    whenever a parameter valuation @xmath34 is given , @xmath0 becomes a usual one - clock timed automaton denoted by @xmath51 .",
    "we recall the next definitions of transition and run in @xmath51 .",
    "[ def : config ] let @xmath34 be a parameter valuation . a _ transition _ @xmath52 between two configurations @xmath50 and @xmath53 , with time increment @xmath54 , is allowed in @xmath55 if ( 1 ) @xmath56 and @xmath57 , ( 2 ) there exists an edge @xmath58 such that @xmath59 and @xmath60 if @xmath61 , @xmath62 if @xmath63 .",
    "is first added to @xmath1 , guard @xmath37 is then tested , and finally @xmath1 is reset according to  @xmath64 . ]    a _ run _",
    "@xmath65 of @xmath51 is an infinite sequence of transitions @xmath66 such that @xmath67 .",
    "the _ duration _",
    "@xmath68 at configuration @xmath69 of @xmath70 is equal to @xmath71 .",
    "a _ finite run _",
    "@xmath70 is a finite sequence of transitions .",
    "it is shortly denoted by @xmath72 such that @xmath50 ( resp .",
    "@xmath53 ) is its first ( resp .",
    "last ) configuration .",
    "its _ duration _",
    "@xmath73 is equal to @xmath74 .",
    "formulae of _ parametric timed ctl logic _ ,  for short , are formed by a block of quantifiers over some parameters followed by a quantifier - free temporal formula .",
    "they are defined as follows .",
    "notation @xmath7 means any atomic proposition @xmath75 and @xmath76 are linear terms as before .",
    "[ def : syntax ] a  formula @xmath77 is of the form @xmath78 such that @xmath79 , @xmath80 , @xmath81 for each @xmath82 , @xmath83 , and @xmath84 is given by the following grammar @xmath85    note that usual operators @xmath86 and @xmath87 are obtained as @xmath88 and @xmath89 .",
    "we also use the following abbreviations : @xmath90 for @xmath91 , @xmath92 for @xmath93 , @xmath94 for @xmath95 , and @xmath96 for @xmath97 .",
    "we use notation qf-  for the set of _ quantifier - free _",
    "formulae @xmath84 of .",
    "the set of parameters of @xmath26 that are _ free _ in @xmath77 , that is , not under the scope of a quantifier , is denoted by @xmath98 .",
    "thus , for a qf-  formula @xmath84 , we have @xmath99 ( recall that @xmath26 is the set of parameters that appear in the formula _ and _ in the automaton ) .",
    "we now give the _ semantics _ of .",
    "[ def : semantics ] let @xmath100 be a parametric timed automaton and @xmath50 be a configuration of @xmath100 .",
    "let @xmath101 be a  formula . given a parameter valuation @xmath34 on @xmath98 , the _ satisfaction _ relation @xmath102",
    "is defined inductively as follows .",
    "if @xmath103 , then @xmath104 according to the following rules :    1 .",
    "@xmath105 iff there exists to ensure that time can progress in @xmath51 from that configuration . ]",
    "a run @xmath106 in @xmath51 with @xmath107 and @xmath108 2 .",
    "@xmath109 iff there exists a run @xmath110 in @xmath51 with @xmath107 and @xmath111 3 .",
    "@xmath112 iff @xmath113 4 .",
    "@xmath114 iff @xmath104 or @xmath115 5 .",
    "@xmath116 iff there exists a run @xmath117 in @xmath51 with @xmath107 and @xmath118 6 .",
    "@xmath119 iff there exists a run @xmath65 in @xmath51 with @xmath120 , there exists @xmath121 such that @xmath122 , @xmath123 and @xmath124 for all @xmath125 7 .",
    "@xmath126 iff for any run @xmath65 in @xmath51 with @xmath120 , there exists @xmath121 such that @xmath122 , @xmath123 and @xmath124 for all @xmath125    if @xmath127 , then @xmath102 iff there exists @xmath128 such that @xmath129 where @xmath130 is defined on @xmath131 by @xmath132 on @xmath98 and @xmath133 . if @xmath134 , then @xmath102 iff for all @xmath36 , @xmath129 where @xmath130 is defined on @xmath131 by @xmath132 on @xmath98 and @xmath133 .",
    "the problems that we want to solve in this paper are the following ones .",
    "the first problem is the model - checking problem for  formulae @xmath77 with _ no _ free parameters . in this case",
    ", we omit the index by @xmath34 in the satisfaction relation @xmath135 since no parameter ( neither in the automaton nor in the formula ) has to receive a valuation .    [ prob : model - checking ] the _ model - checking _",
    "problem is the following . given a parametric timed automaton @xmath100 and a  formula @xmath77 such that @xmath136 , given a configuration @xmath50 of @xmath100 , does @xmath137 hold ?",
    "the second problem is the more general problem of parameter synthesis for  formulae @xmath77 such that @xmath98 is _ any _ subset of @xmath26 .",
    "[ prob : parameter - synthesis ] the _ parameter synthesis _ problem is the following . given a parametric timed automaton @xmath100 and a configuration @xmath50 of @xmath100 , given a  formula @xmath77 , compute a symbolic representation of the set of parameter valuations @xmath34 on @xmath98 such that @xmath138 .",
    "we consider the example given in the introduction with the parametric timed automaton @xmath100 of figure [ fig : intro ] and the two  formulae respectively equal to @xmath139 and @xmath140 then @xmath141 , @xmath142 and @xmath143 .",
    "the model - checking problem  does @xmath144 hold \" has a yes answer .",
    "the parameter synthesis problem  for which parameter valuations @xmath34 on @xmath145 does @xmath146 hold \" receives the answer @xmath147 .",
    "we end section  [ sec ] by some comments on the definitions and the problems presented above .    1 .",
    "we consider timed automata with only one parametric clock for the following reason . in  @xcite ,",
    "the authors investigate the following emptiness problem , which is a particular case of problem  [ prob : model - checking ] : are there concrete values for the parameters so that a parametric timed automaton has an accepting run ?",
    "they show that the emptiness problem is decidable when there is one parametric clock , that this problem is open for two parametric clocks , and that it becomes undecidable for three parametric clocks .",
    "they illustrate the hardness of the two - clock emptiness problem by presenting connections with difficult open problems in logic and automata theory . + both discrete time and dense time",
    "are considered in  @xcite ( see @xcite for further results ) , whereas we only deal with discrete time in this paper .",
    "2 .   to solve problem  [ prob : model - checking ] , we use the same approach as in our paper @xcite where we propose a simple proof of the model - checking problem for  over timed - automata without parameters .",
    "we prove in @xcite that the durations of runs starting from a region and ending in another region can be defined by a formula of presburger arithmetic .",
    "it follows that the model - checking problem can be reduced to checking whether some sentence of presburger arithmetic is true or false . +",
    "this approach is different from the one used in @xcite when there is no parameter at all .",
    "we recall that in @xcite , an extra clock is added to the timed automaton and the model - checking is solved thanks to a labeling ( like for @xmath148 ) of the region graph of the augmented automaton . we have not investigated this kind of approach here , because the additional clock would be parametric , leading to two parametric clocks inside the automaton .",
    "linear terms @xmath149 are present in the definition of parametric timed automata ( inside the guards and the invariants ) as well as in the definition given for @xmath150 .",
    "more generally full presburger arithmetic is present in @xmath150 .",
    "alternative restricted definitions could be 1 .   for parametric timed automata : guards and invariants are restricted to conjunctions of @xmath151 , @xmath152 ( instead of any conjunction of @xmath38 ) ; 2 .   for @xmath150 :",
    "the restricted grammar @xmath153 is used instead of the grammar proposed in definition  [ def : syntax ] .",
    "+ in this way , the constraints over the parameters are restricted to comparisons with a parameter or with a constant , instead of comparisons with a linear term over parameters .",
    "+ however we observe in remark  [ rem ] below that the undecidability result about the model - checking problem is the same when using definitions  [ def : timed_aut ] and  [ def : syntax ] , or with the above restricted definitions .",
    "in this section , we prove that the model - checking problem is undecidable .",
    "the undecidability comes from the use of equality in the operators @xmath154 and @xmath155 .",
    "then for a fragment f-  of   where equality is forbidden , we prove that the model - checking problem becomes decidable . in this case",
    ", we also positively solve the parameter synthesis problem .",
    "our proofs use presburger arithmetic and its extension with integer divisibility .",
    "let us introduce the precise definition of the fragment f- .",
    "extended with @xmath156 and @xmath157 . we have found a mistake in the proof of the decidability of the model - checking for this fragment . ]",
    "[ def : fragment ] notation f-  is used to denote the fragment of  where the equality is forbidden in the operators @xmath158 and @xmath159 and the inequalities @xmath160 are forbidden in @xmath159 .",
    "more precisely , a f-  formula @xmath77 is of the form @xmath161 such that @xmath84 is given by the grammar @xmath162      we prove here that problem [ prob : model - checking ] is undecidable for .",
    "the proof relies on the undecidability of presburger arithmetic with divisibility .",
    "_ presburger arithmetic with divisibility _ is an extension of presburger arithmetic with integer divisibility relation .",
    "the additional divisibility relation is denoted by @xmath163 and means `` @xmath164 divides @xmath165 '' .",
    "every formula of presburger arithmetic with divisibility can be put into _ normal form _ : @xmath166 where @xmath167 belongs to @xmath168 , @xmath169 means that negation is optional and each @xmath170 is one of the following atomic formulae : @xmath15 @xmath171 , @xmath20 @xmath172 , @xmath22 @xmath163 such that @xmath149 is a linear term and @xmath173 . while presburger arithmetic has a decidable theory , presburger arithmetic with divisibility is undecidable  @xcite .",
    "[ thm : undecidable ] for any sentence @xmath174 of presburger arithmetic with divisibility , we can construct a parametric timed automaton @xmath0 , a configuration @xmath175 and a  formula @xmath77 such that @xmath174 is true iff the answer to the model - checking problem @xmath176 for @xmath100 is yes .",
    "let us make the assumption that the sentence @xmath174 is in normal form ( [ eq ] ) .",
    "we are going to construct a  formula @xmath77 and a parametric timed automaton @xmath100 .",
    "the set @xmath26 of parameters is equal to the set of all the variables used in @xmath174 .    for each subformula @xmath177 of the form @xmath171 or @xmath172",
    ", we define the  formula @xmath178 equal to @xmath177 . for each subformula @xmath177 of the form @xmath163",
    ", we construct the next parametric timed automaton @xmath179 and  formula @xmath178 . the automaton @xmath179 is given in figure  [ fig : div ] .    ]",
    "we label the unique initial state @xmath180 of this automaton by @xmath181 and the unique final @xmath182 state by @xmath183 .",
    "it is easy to see that there is a run @xmath70 from the initial configuration @xmath184 to the final configuration @xmath185 with duration @xmath186 iff @xmath187 . for formula @xmath178",
    ", we take @xmath188 .",
    "now we construct formula @xmath77 as follows @xmath189 we construct the automaton @xmath0 by first taking the union of all the previous automata @xmath179 ( introduced for the divisibility subformulae ) .",
    "we then merge their initial states into a unique state of @xmath0 that we call @xmath49 .",
    "the label @xmath190 of @xmath49 is the union of the labels @xmath181 .",
    "finally , we add a new state @xmath191 to @xmath0 and an edge @xmath192 from any final state @xmath182 of @xmath179 to state @xmath191 labeled with @xmath193 and without any guard and reset . to complete the construction , we add a self - loop @xmath194 on @xmath191 that allows time to progress .    it is easy to see that given @xmath0",
    ", we have @xmath195 iff @xmath174 is true .    as a direct consequence of theorem [ thm : undecidable ]",
    ", we have :    [ cor : undecidable ] the model - checking problem for  is undecidable .    in the previous proof",
    ", all the proposed  formulae @xmath178 only use the subscript @xmath196 in the operators @xmath197 and @xmath198 .",
    "it follows that the model - checking problem is already undecidable with the grammar @xmath199 instead of the grammar given in definition  [ def : syntax ] .",
    "[ rem ] given a sentence @xmath174 of presburger arithmetic with divisibility , we have shown in the proof of theorem  [ thm : undecidable ] how to construct a parametric timed automaton @xmath0 , a configuration @xmath175 and a  formula @xmath77 such that @xmath174 is true iff the answer to the model - checking problem @xmath176 for @xmath100 is yes .",
    "as mentioned in section  [ com ] ( see comment 3 ) , we could consider alternative restricted definitions for parametric timed automata and @xmath150 .",
    "we say that a parametric timed automaton is _ restricted _ and that a formula of @xmath150 is _ restricted _ if they respect the restricted definitions given in comment 3 of section  [ com ] .",
    "let us show that given a sentence @xmath174 of presburger arithmetic with divisibility , we can construct a restricted parametric timed automaton @xmath200 , a configuration @xmath175 and a restricted formula @xmath77 of @xmath150 such that @xmath174 is true iff the answer to the model - checking problem @xmath176 for @xmath100 is yes .",
    "the proof is in the same vein as the previous one .",
    "the sentence @xmath174 is supposed to be in normal form like in ( [ eq ] ) with each subformula @xmath177 of the form @xmath171 , @xmath172 , or @xmath163 .",
    "we first treat the case @xmath171 ( with hints on the construction with @xmath201 ) . instead of defining @xmath178 equal to @xmath177 as in the previous proof",
    ", we consider the restricted parametric timed automaton of figure  [ fig : presburger ] , and the restricted formula @xmath178 equal to @xmath202 .    ]",
    "the case @xmath172 is treated similarly : for the example of @xmath203 , the automaton is the one of figure  [ fig : presburger ] with an additional loop with label 1 on the rightmost location , and the formula is again equal to @xmath204 .",
    "finally the case @xmath163 is treated as in the previous proof since the automaton and the formula that were proposed are both restricted .",
    "it follows that the model - checking problem with the restricted definitions of parametric timed automata and logic  is still undecidable .",
    "notice that again all the proposed restricted formulae @xmath178 only use the equality in the operators @xmath197 and @xmath198 .",
    "in this section , we provide solutions to the model - checking problem and the parameter synthesis problem for f- .",
    "our approach is as follows .",
    "given a state @xmath49 and a formula @xmath84 of qf - f- to mention that @xmath84 is a quantifier free formula .",
    "] , we construct a presburger formula @xmath205 with @xmath1 and all @xmath206 as free variables such that @xmath207 for _ any _ valuation @xmath34 on @xmath26 and _ any _ value @xmath208 of the clock ( see theorem [ thm : main ] ) .",
    "solutions to problems [ prob : model - checking ] and [ prob : parameter - synthesis ] will be obtained as a corollary ( see corollaries [ cor:1 ] and [ cor:2 ] ) . for instance , the decidability of the model - checking problem will derive from the decidability of presburger arithmetic .",
    "indeed , if we denote by @xmath209 a f-  formula @xmath77 with no free parameters , then to test if @xmath176 is equivalent to test if the sentence @xmath210 is true .",
    "* example * consider the parametric timed automaton of figure [ fig : intro ] and the qf - f-  formula @xmath84 equal to @xmath12 .",
    "then @xmath211 .",
    "presburger formula @xmath212 is here equal to @xmath213 with no reference to @xmath1 since it is reset along the edge from @xmath6 to @xmath9 .",
    "thus @xmath214 for any clock value @xmath208 and any valuation @xmath34 such that @xmath215 . the model - checking problem @xmath216 has a yes answer for any @xmath208 because the sentence @xmath217 is true in presburger arithmetic .",
    "if clock @xmath1 was not reset along the edge from @xmath6 to @xmath9 , then the formula @xmath212 would be equal to @xmath218 and the above model - checking problem would have a yes answer iff @xmath219 , that is @xmath220 .    as indicated by this example , the presburger formula @xmath205 constructed from the qf - f-  formula @xmath84 is a boolean combination of terms of the form @xmath221 or @xmath38 where @xmath27 is a parameter , @xmath1 is the clock and @xmath149 is a linear term over parameters .",
    "formula @xmath205 must be seen as a _",
    "syntactic _ translation of formula @xmath84 into presburger arithmetic .",
    "the question  does @xmath222 hold \" with @xmath223 is translated into the question  is the presburger sentence @xmath224 true \" . at this point only , _",
    "semantic _ inconsistencies inside @xmath224 are looked for to check if this sentence is true or not .    our proofs require to work with a set @xmath225 of guards that is more general than in notation [ not : guard ] .",
    "[ not : ext_guard ] linear terms @xmath30 are any @xmath226 , with @xmath227 ( instead of @xmath228 ) .",
    "comparison symbol @xmath229 used in expressions like @xmath38 and @xmath230 belongs to the extended set @xmath231 . for any constant @xmath232 ,",
    "notation @xmath233 means @xmath234 and @xmath235 .",
    "equivalently , this means that there exists @xmath236 such that @xmath237 .",
    "notation @xmath238 means @xmath234 and @xmath239 .",
    "any @xmath38 is called an _ @xmath1-atom _ , any @xmath230 is called a _",
    "@xmath27-atom_. an _ @xmath1-conjunction _ is any conjunction of @xmath1-atoms , and a _",
    "@xmath27-conjunction _ is any conjunction of @xmath27-atoms .",
    "we denote by @xmath240 the set of _ boolean combinations _ of @xmath1-atoms and @xmath27-atoms .",
    "a _ guard _ is any element of @xmath240 .",
    "thus the set @xmath225 of notation [ not : guard ] is now equal to the set @xmath240 .    from now on ,",
    "it is supposed that the guards and the invariants appearing in parametric timed automata belong to the generalized set @xmath241 .",
    "it should be noted that the extension of @xmath229 to @xmath242 is only valid inside automata , and _ not _ inside  formulae .",
    "we shortly call _ automaton _ any parametric timed automaton @xmath100 .",
    "the next lemma states that any @xmath240 formula is a presburger formula .",
    "it also states that this formula can be rewritten in a particular form that will be useful later .",
    "[ lem : normal_form ] any @xmath240 formula is a presburger formula . it can be rewritten as a disjunction of conjunctions of @xmath1-atoms and @xmath27-atoms with @xmath229 limited to @xmath243 .",
    "operators @xmath244 and @xmath245 are easily rewritten in presburger arithmetic .",
    "even if linear terms @xmath30 contain constants in @xmath246 , any @xmath38 and @xmath230 can also be rewritten in presburger arithmetic .",
    "this shows that any @xmath240 formula is a presburger formula .    to rewrite a @xmath240 formula as described in the lemma ,",
    "it is first put into disjunctive normal form .",
    "second negation is suppressed in any @xmath247 as follows .",
    "this is done easily for @xmath248 .",
    "negation @xmath249 is replaced by @xmath250 .",
    "negation @xmath251 is equivalent to @xmath252 . similarly for @xmath253",
    ". third all inequalities @xmath254 and @xmath255 are replaced respectively by @xmath256 and @xmath257 . finally this formula is put into disjunctive normal form .",
    "let us now state our main result .",
    "[ thm : main ] let @xmath100 be an automaton and @xmath49 be a state of @xmath100 .",
    "let @xmath84 be a qf - f- .",
    "then there exists a @xmath240 formula @xmath205 with @xmath1 and all @xmath29 as free variables such that @xmath258 for any valuation @xmath34 on @xmath26 and any clock value @xmath208 .",
    "the construction of formula @xmath259 is effective .",
    "the proof of theorem [ thm : main ] is by induction on the way formula @xmath84 is constructed . before detailing its proof , we roughly give the main ideas .",
    "first , suppose for instance that along a run @xmath260 of @xmath51 showing that @xmath261 , some configuration , say @xmath262 , needs to satisfy @xmath263 with @xmath264 a subformula of @xmath84 .",
    "the automaton @xmath100 is modified into @xmath265 such that the invariant @xmath266 is",
    "_ _ augmented__. ] by the @xmath240 formula @xmath267 constructed by induction . along the run @xmath70",
    "seen in the modified automaton @xmath265 , the satisfaction relation @xmath268 holds automatically thanks to the augmented invariant of @xmath269 .",
    "second , what we also need is a @xmath240 formula that expresses the existence of an infinite run starting at a given configuration ( for operator @xmath270 for instance ) and another one that expresses the existence of a finite run @xmath70 starting and ending at given configurations such that @xmath271 ( for operator @xmath158 for instance ) .",
    "this is possible by the next two propositions .",
    "their proofs are postponed till section [ sec : durations ] .",
    "[ prop : progress ] let @xmath0 be an automaton and @xmath49 be a state .",
    "then there exists a @xmath240 formula @xmath272 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath273 iff there exists an infinite run in @xmath51 starting with @xmath175 .",
    "the construction of @xmath272 is effective .",
    "[ prop : lambda ] let @xmath0 be an automaton and @xmath274 be two states .",
    "let @xmath248 and @xmath149 be a linear term . then there exists a @xmath275 formula @xmath276 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath277 iff there exists a finite run @xmath278 in @xmath51 with @xmath279 .",
    "the construction of @xmath276 is effective .    for the proof of theorem [ thm : main ] , instead of the grammar given in definition [ def : fragment ] , we prefer to work with the grammar @xmath280 this grammar is equivalent because formula @xmath281 with @xmath282 can be replaced by @xmath283 $ ] , formula @xmath284 by @xmath285 $ ] , and formula @xmath286 by @xmath287 .",
    "it is not difficult to check that the semantics of the new operator @xmath288 is given by    @xmath289 iff there exists a run @xmath290 of @xmath51 with @xmath107 , there exists @xmath291 such that @xmath292 and @xmath293 for all @xmath294 .",
    "( of theorem [ thm : main ] ) .",
    "the proof is by induction on @xmath84 .    1 .",
    "if @xmath295 , then @xmath214 iff there exists an infinite run starting with @xmath175 and @xmath296 . therefore @xmath297 2 .",
    "similarly , if @xmath298 with @xmath299 , then @xmath300 3 .   if @xmath301 , then @xmath302 .",
    "if @xmath303 , then @xmath304 . 5 .",
    "let us treat @xmath305 . recall that @xmath306 iff there exists a transition @xmath307 such that @xmath308 and @xmath309 is the first configuration of an infinite run @xmath310 .",
    "let @xmath311 be the edge of @xmath312 that has lead to the transition @xmath307 .",
    "then ( see definition [ def : config ] ) , @xmath313 if @xmath314 , and @xmath315 if @xmath316 . by induction hypothesis ,",
    "@xmath317 has been constructed such that @xmath318 is true iff @xmath319 .",
    "the automaton @xmath100 is modified into an automaton @xmath320 as follows . a copy of @xmath191",
    "is needed to focus on the first configuration @xmath309 of @xmath310 . ]",
    "@xmath321 of @xmath191 is added to @xmath44 such that @xmath322 , @xmath323 .",
    "a copy @xmath324 is also added for each edge @xmath325 leaving @xmath191 . by proposition [ prop : progress ] applied to @xmath326 and @xmath321 , we get a @xmath327 formula @xmath328 such that @xmath329 is true iff there exists an infinite run in @xmath330 starting with @xmath331 . by construction of @xmath321",
    ", equivalently there exists an infinite run in @xmath51 starting with @xmath309 and such that @xmath332 .",
    "hence , the expected formula @xmath205 is equal to @xmath333 6 .",
    "the construction of formula @xmath259 for @xmath334 is in the same vein as the previous one .",
    "recall that @xmath335 iff there is an infinite run in @xmath51 with first configuration @xmath175 such that all its configurations satisfy @xmath264 .",
    "the automaton @xmath100 is here modified into @xmath326 as follows . for any state @xmath336 , @xmath337 is replaced by @xmath338 . by proposition [ prop :",
    "progress ] applied to @xmath326 , we get a formula @xmath339 such that @xmath340 is true iff there exists an infinite run in @xmath51 starting with @xmath175 and such that all its configurations satisfy @xmath264 .",
    "therefore formula @xmath205 is equal to @xmath341 7 .",
    "let us turn to formula @xmath342 with @xmath343 .",
    "we have @xmath214 iff either ( 1 ) @xmath344 , @xmath345 and @xmath175 is the first configuration of an infinite run , or ( 2 ) there exists a finite run @xmath346 such that @xmath279 , @xmath264 is satisfied at every configuration of @xmath70 distinct from @xmath309 , @xmath347 is satisfied at @xmath309 and @xmath309 is the first configuration of an infinite run . for any state @xmath336 , formulae @xmath348 and @xmath349",
    "have been constructed by induction hypothesis .",
    "so , in case ( 1 ) , with the same construction of @xmath326 as done before for operator @xmath350 ( with @xmath49 , @xmath347 instead of @xmath191 , @xmath264 ) , we have the next formula @xmath351 case ( 2 ) is more involved .",
    "the automaton @xmath100 is first modified into @xmath326 as for operator @xmath350 ( with @xmath352 instead of @xmath353 ) to get formula @xmath328 such that @xmath329 is true iff there exists an infinite run in @xmath51 starting with @xmath309 and such that @xmath354 .",
    "the automaton @xmath100 is then modified in another automaton @xmath355 in the following way .",
    "a copy @xmath356 of @xmath191 is added to @xmath44 as well as a copy of each edge of @xmath312 entering @xmath191 as entering @xmath356 ; we define @xmath357 and @xmath358 . of @xmath191",
    "is needed to focus on the last configuration @xmath309 of @xmath70 ; the augmented invariant is needed to express that @xmath347 is satisfied at @xmath309 and @xmath309 is the first configuration of an infinite run . ] for any state @xmath359 of @xmath44 , @xmath337 is replaced by @xmath360 . thanks to proposition [ prop : lambda ] applied to @xmath355 , we obtain a formula @xmath361 expressing the following : @xmath362 is true iff there exists in @xmath363 a finite run @xmath364 with @xmath365 .",
    "equivalently there exists in @xmath366 a finite run @xmath367 with @xmath368 such that @xmath264 is satisfied at every configuration of @xmath70 distinct from @xmath309 , @xmath347 is satisfied at @xmath309 and @xmath309 is the first configuration of an infinite run . for case",
    "( 2 ) , the expected formula is thus the disjunction @xmath369 therefore , putting together cases ( 1 ) and ( 2 ) , formula @xmath259 is the disjunction @xmath370 8 .",
    "finally , let @xmath84 be @xmath371 .",
    "then @xmath372 iff there exists a finite run @xmath373 such that @xmath374 , @xmath375 for each configuration @xmath376 of @xmath70 distinct from @xmath53 and @xmath53 is the first configuration of an infinite run .",
    "as done just before in case ( 2 ) , @xmath100 is modified into @xmath355 except that we use @xmath377 instead of @xmath328 in the definition of @xmath378 . by proposition [ prop : lambda ] ,",
    "formula @xmath259 is equal to @xmath379    the proof is completed since all the proposed formulae belong to @xmath380 and their construction is effective .",
    "solutions to the model - checking problem and the parameter synthesis problem are obtained as a corollary of theorem [ thm : main ] .",
    "[ cor:1 ] the model - checking problem for f-  is decidable .    let @xmath209 be a f-  formula @xmath77 with no free parameters . by theorem  [ thm : main ] , @xmath381 by lemma  [ lem : normal_form ] , formula @xmath382 is a presburger formula .",
    "as presburger arithmetic has a decidable theory and @xmath382 is a presburger sentence , the model - checking problem is decidable .",
    "the next corollary is straightforward .",
    "it states that the parameter synthesis problem is solvable .",
    "[ cor:2 ] let @xmath100 be an automaton and @xmath175 a configuration of @xmath100 .",
    "let @xmath383 with @xmath79 and let @xmath384 be a f-   formula .",
    "then the presburger formula @xmath385 with free variables in @xmath98 is an effective characterization of the set of valuations @xmath34 on @xmath98 such that @xmath386 .",
    "@xmath387    corollary  [ cor:2 ] has important consequences that we want to detail now .",
    "let us denote by @xmath388 the set of valuations @xmath34 on @xmath98 such that @xmath386 .",
    "let @xmath98 be equal to @xmath389 .",
    "presburger arithmetic has an effective quantifier elimination , by adding to the operations @xmath390 and @xmath391 all the congruences @xmath392 , @xmath232 .",
    "it follows the characterization of @xmath388 given above in corollary  [ cor:2 ] by @xmath393 can be effectively rewritten without any quantifier . on the other hand ,",
    "since presburger arithmetic has a decidable theory , any question formulated in this logic about @xmath394 is decidable .",
    "for instance , the question `` is the set @xmath394 non empty '' is decidable as it is formulated in presburger arithmetic by @xmath395 the question `` does the set @xmath388 contain all the valuations on @xmath98 '' is also decidable as it can be formulated as @xmath396 the question `` is the set @xmath388 finite '' is translated into @xmath397 and so on .",
    "the aim of this section is to prove propositions [ prop : progress ] and [ prop : lambda ] .",
    "this is achieved thanks to a precise description of the possible durations of finite runs in an automaton .",
    "several steps are necessary for this purpose .    in the first subsection",
    ", we show that we can work with automata put in some normal form .",
    "this normalization allows a simplified presentation of the proofs of the next subsections .    in subsections [ subsec : aut_transf ] and",
    "[ subsec : durations_free ] , we restrict to _ reset - free _ normalized automata , that is automata in which there is no reset of the clock . for this family of automata , we study the runs of the form @xmath398 such that @xmath399 , @xmath400 with @xmath401 , @xmath402 being two fixed subsets of states , and @xmath208 is a fixed clock value . in subsection [ subsec :",
    "aut_transf ] , a sequence of transformations is performed on the automata such that the @xmath1-atoms used in the automata are limited to equalities @xmath403 .",
    "these simplifications lead in subsection [ subsec : durations_free ] to the description by a presburger formula of the durations @xmath186 of runs @xmath404 , @xmath399 , @xmath405 .    in the last subsection ,",
    "we remove the reset - free restriction imposed to the automata and we study in details the durations @xmath186 of runs @xmath406 between two fixed states @xmath49 and @xmath191 .",
    "any such run @xmath70 can be decomposed into a sequence of runs @xmath407 , @xmath83 , according to the reset of the clock , that is the clock is reset at the beginning and the end of @xmath407 but not inside of @xmath407 .",
    "the duration @xmath186 of @xmath70 is thus the sum of the durations @xmath408 , @xmath409 .",
    "any @xmath408 falls into durations being studied in section [ subsec : durations_free ] .",
    "thanks to this description of any duration @xmath186 in terms of durations in reset - free automata , we are finally able to prove propositions [ prop : progress ] and [ prop : lambda ] .",
    "in subsections [ subsec : normalized ] , [ subsec : aut_transf ] and [ subsec : durations_free ] , we are going to perform a sequence of transformations on the automata @xmath0 that will _ preserve _ the set of runs in @xmath51 for any valuation @xmath34 , in the following sense . during a transformation , state @xmath49",
    "will possibly be splitted into several copies @xmath410 . runs before and after the splitting can be supposed identical .",
    "] up to a _ renaming _ of any @xmath410 into @xmath49 .      in this subsection ,",
    "the automata are put in some normal form .",
    "the aim of this normalization is a simplified presentation of the proofs in the rest of the paper .",
    "[ def : normalized ] an automaton @xmath100 is _ normalized _ if    1 .",
    "the guards labeling the edges and used in the invariants are limited to conjunctions of @xmath1-atoms and @xmath27-atoms with @xmath411 , 2 .   for any state @xmath412 , the edges @xmath413 entering @xmath49 are all labeled by the same @xmath37 and the same @xmath64 ( however @xmath414 can vary ) .",
    "[ prop : normalized ] any automaton @xmath100 can be effectively normalized such that the set of runs in @xmath51 is preserved for any valuation @xmath34 .",
    "let @xmath415 be a guard .",
    "by lemma [ lem : normal_form ] , it can be rewritten as a disjunction of @xmath416 formulae @xmath417 , @xmath418 , where each @xmath417 is a conjunction of @xmath1-atoms and @xmath27-atoms with @xmath419 . if @xmath37 labels the edge @xmath311 of @xmath100 , then we modify @xmath100 by splitting this edge into @xmath416 edges @xmath420 , @xmath418 . if @xmath421 for some state @xmath49 , we modify @xmath100 by splitting @xmath49 into @xmath416 states @xmath410 , @xmath83 , such that @xmath422 , @xmath423 and we accordingly split any edge that enters or leaves state @xmath49 .",
    "the first condition of definition  [ def : normalized ] is therefore satisfied .    for the second condition ,",
    "the construction is similar .",
    "suppose that there are several edges @xmath413 entering state @xmath49 with distinct couples @xmath424 .",
    "then @xmath49 is splitted into several copies ( one copy for one couple @xmath424 ) and all the edges entering @xmath49 are redirected to each copy , according to the couples @xmath424 .",
    "the copies of @xmath49 have the same @xmath425 and @xmath426 as @xmath49 .      in all this subsection",
    ", we assume the next hypothesis .",
    "* hypothesis ( @xmath427 ) * we assume that @xmath428 is a _ reset - free normalized _ automaton with a set @xmath429 of _ initial _ states and a set @xmath430 of _ final _ states .",
    "we also assume such that @xmath431 , no edge enters @xmath399 and no edge leaves @xmath400 .",
    "* remark * as @xmath100 is normalized and reset - free , given a state @xmath49 , all edges @xmath413 entering @xmath49 have the same guard @xmath37 and satisfy @xmath316 .",
    "it follows that we can move guard @xmath37 from these edges to the invariant @xmath426 of @xmath49 .",
    "indeed @xmath37 is simply erased from all the edges entering @xmath49 and added as a conjunction to @xmath426 . by this construction ,",
    "the set @xmath312 of edges of @xmath100 can be rewritten as a subset of @xmath432 , instead of @xmath433 ( see definitions  [ def : timed_aut ] and  [ def : config ] ) .    on the other hand , as @xmath100 is normalized , the invariant @xmath426 of any state @xmath49 is a conjunction of @xmath1-atoms and @xmath27-atoms",
    ". we can view @xmath426 as a _ set _ of @xmath1-atoms and @xmath27-atoms ( instead of a conjunction ) and we will often say that an @xmath1-atom or a @xmath27-atom _ belongs _ to @xmath49 ( instead of @xmath426 ) or _ appears _ in @xmath49 .    given a valuation @xmath34 and a clock value @xmath208 , we denote by @xmath434 the set of runs of @xmath51 of the form @xmath398 for some @xmath399 and @xmath400 .",
    "we are going to perform a sequence of transformations on @xmath0 that will preserve @xmath435 .",
    "the aim of these transformations is to simplify the form of the invariants used in the automaton .",
    "the invariant @xmath426 of any state @xmath436 will be a conjunction of at most one @xmath1-atom ( of the form @xmath403 ) and one @xmath27-conjunction",
    ". this simplification will be possible mainly because the automaton is reset - free ( see proposition [ prop : egalite ] ) .",
    "[ def : simplified ] a reset - free normalized automaton @xmath0 is _ simplified _ if    1 .   for all @xmath412 ,",
    "the invariant @xmath426 is equal to @xmath437 such that @xmath438 is an @xmath1-conjunction  and @xmath439 is a @xmath27-conjunction . among the @xmath1-atoms @xmath440 of @xmath438 , at most one",
    "is an equality @xmath403 . moreover , if @xmath441 , then @xmath438 contains no other @xmath1-atom @xmath442 with @xmath443 , and if @xmath444 ( resp .",
    "@xmath445 ) , then the other @xmath1-atoms of @xmath446 are of the form @xmath447 ( resp .",
    "@xmath448 ) .",
    "2 .   for any run @xmath449 ,",
    "for any @xmath1-atom @xmath450 , there exists at most one configuration @xmath53 of @xmath70 such that @xmath451 contains @xmath403 .",
    "this definition is illustrated by the next very simple example .",
    "* example * consider the simplified automaton @xmath100 of figure [ fig : ex ] with one initial state @xmath452 and one final state @xmath77 .",
    "the invariant of state @xmath359 has no component @xmath453 and its @xmath27-conjunction @xmath454 is limited to the @xmath27-atom @xmath455 .",
    "the other states of the automaton has no @xmath27-conjunction .",
    "they can have at most one @xmath1-atom which is an equality , like state @xmath49 containing the equality @xmath456 .",
    "the initial state @xmath452 can have @xmath1-atoms of the form @xmath457 but it has no such @xmath1-atom in this example .",
    "the final state @xmath77 has the @xmath1-atom @xmath458 .",
    "[ prop : egalite ] any reset - free normalized automaton @xmath100 can be effectively simplified such that the set @xmath459 is preserved for any valuation @xmath34 and any clock value @xmath208 .",
    "the proof of proposition [ prop : egalite ] needs several steps .",
    "the transformations described in the proof are based on standard constructions of automata theory .",
    "each of them will preserve @xmath459 for any valuation @xmath34 and any clock value @xmath208 .",
    "after each transformation , the resulting automaton will be again denoted by @xmath100 .    in the first step",
    ", we are going to suppress in each @xmath438 , for @xmath460 , all @xmath1-atoms of the form @xmath461 .    [ [ first - step ] ] first step + + + + + + + + + +    @xmath1-atoms @xmath461 .",
    "let us show that any @xmath1-atom @xmath461 belonging to some state @xmath49 can be suppressed at the cost of a new @xmath1-atom @xmath462 .",
    "the idea is the following . if @xmath463 for a certain @xmath464 is a linear term over the parameters , the value @xmath465 such that @xmath463 is not known whenever the parameter valuation @xmath34 is not fixed .",
    "] , then @xmath466 the automaton is transformed in a way to compute modulo @xmath467 .",
    "new states are of the form @xmath468 with @xmath412 and @xmath469 expressing that @xmath470 .",
    "formally we construct @xmath471 where @xmath472 , @xmath473 , @xmath474 , @xmath475 and @xmath476 iff @xmath477 and @xmath478 .",
    "function @xmath479 is defined as follows . for any @xmath480 ,",
    "let @xmath481 .",
    "if @xmath468 contains @xmath461 , suppress this state if @xmath482 , replace @xmath461 by @xmath462 if @xmath483 . if @xmath484 , add the @xmath1-atom @xmath485 and the @xmath27-atom @xmath486 to recall that @xmath463 and @xmath470 initially . as @xmath149 depends on the parameter valuation , value @xmath465 such that @xmath487 is not known in advance .",
    "therefore the final automaton is the disjoint union of the automata @xmath488 , with @xmath489 .",
    "the suppression of @xmath1-atoms @xmath490 in each @xmath438 is performed similarly . in the next step , we are going to suppress @xmath1-atoms @xmath491 .",
    "this will be possible everywhere except inside states @xmath444 .",
    "[ [ second - step ] ] second step + + + + + + + + + + +    @xmath1-atoms @xmath457 .",
    "let us consider a fixed @xmath1-atom @xmath457 .",
    "recall that the automaton is reset - free . along a run @xmath449 ,",
    "as soon as @xmath491 is satisfied at some configuration of @xmath70 , the next occurrences of @xmath457 are automatically satisfied and can be thus suppressed .",
    "the automaton is transformed in a way to count occurrences of @xmath491 thanks to a counter @xmath492 equal to @xmath4 ( @xmath5 or @xmath493 resp . ) in case of @xmath4 ( @xmath5 or @xmath493 and more resp . )",
    "occurrence(s ) of @xmath457 is ( are ) encountered . has value @xmath493 , any incrementation @xmath494 lets it at value @xmath493 . ] formally we construct @xmath495 where @xmath496 , @xmath497 , @xmath498 and @xmath499 for all @xmath412 and @xmath500 .",
    "sets @xmath501 and @xmath502 are defined as follows . for any @xmath444",
    ", state @xmath468 belongs to @xmath501 with @xmath503 if @xmath457 belongs to @xmath49 , and @xmath504 otherwise . for",
    "any @xmath505 , edge @xmath506 belongs to @xmath502 with @xmath507 if @xmath191 contains @xmath457 , and @xmath508 otherwise .",
    "finally , we suppress @xmath457 in any state @xmath509 containing it .    now , consider a run @xmath510 equal to @xmath511 such that some state @xmath512 contains @xmath491 .",
    "necessarily , @xmath513 and @xmath514 for @xmath515 by construction of @xmath265 .",
    "so @xmath1-atom @xmath457 is satisfied at configuration @xmath516 iff     : :    _ ( i ) _ either @xmath457 is satisfied at configuration    @xmath517 ,   : :    _ ( ii ) _ or @xmath403 is satisfied at some configuration    @xmath518 of @xmath310 such that    @xmath519 .    therefore , @xmath1-atom @xmath457 can be suppressed at the cost of a new @xmath1-atom @xmath403 ( see _ ( ii ) _ ) , except inside the initial state @xmath520 ( see _ ( i ) _ ) .",
    "this can be achieved by modifying @xmath265 into an automaton @xmath521 thanks to a construction which is not difficult but tedious , this will be not fully detailed .",
    "the automaton @xmath521 has three parts :    1 .",
    "a first part of @xmath521 has to deal with paths of @xmath265 that only contain states @xmath468 with @xmath522 , 2 .",
    "a second part has to deal with paths of @xmath265 starting with @xmath468 such that @xmath444 , @xmath523 , 3 .   and",
    "a third part has to deal with paths of @xmath265 containing some state @xmath468 such that @xmath524 , @xmath523 ; such paths are call _",
    "special_.    the first part of @xmath521 is obtained from @xmath265 by erasing all states @xmath468 with @xmath523 .",
    "the second part is obtained from @xmath265 by erasing all states @xmath468 such that @xmath524 , @xmath503 and all states @xmath468 such that @xmath444 , @xmath504 .",
    "we now discuss the third part of @xmath525 .",
    "the special paths of @xmath265 must be modified into two kinds of paths : either the @xmath1-atom @xmath457 is added to the initial state of the path ( see _ ( i ) _ ) , or the @xmath1-atom @xmath403 is added to some intermediate state of the path , which is situated between the initial state ( not included ) and state @xmath468 ( included ) ( see _ ( ii ) _ ) . in both cases , the @xmath1-atom @xmath457 must be deleted from @xmath468 .",
    "the third part of @xmath521 , first case , is obtained from @xmath265 by adding the @xmath1-atom @xmath457 to any state @xmath468 such that @xmath444 , @xmath504 and by deleting the @xmath1-atom @xmath457 from any state @xmath468 such that @xmath526 , @xmath503 ; it is also necessary to use a marker to verify that each accepting path of @xmath521 corresponds to a special path of @xmath265 .",
    "the third part of @xmath521 , second case , is obtained from @xmath265 as follows : the @xmath1-atom @xmath457 is deleted from any state @xmath468 such that @xmath524 , @xmath503 , all states @xmath468 with @xmath524 , @xmath504 are duplicated ( together with the edges entering and leaving @xmath468 ) such that the @xmath1-atom @xmath403 is added to one of the two copies of @xmath468 ; it is also necessary to use a marker to verify that each accepting path of @xmath525 corresponds to a special path of @xmath265 and passes through exactly one state containing the @xmath1-atom @xmath403 .",
    "the suppression of @xmath1-atoms @xmath462 can be performed in a similar way .",
    "note that here , as soon as the last ( instead of the first ) occurrence of @xmath462 is satisfied along a run @xmath527 , then the previous occurrences of @xmath462 are automatically satisfied .",
    "it follows that @xmath1-atoms @xmath462 can be suppressed everywhere except inside states @xmath445 .    at this point of the proof , for each state @xmath49 , ( 1 ) if @xmath528 , then the @xmath1-atoms contained in @xmath49 are of the form @xmath403 , ( 2 ) if @xmath444 , then they are of the form @xmath403 or @xmath457 , and ( 3 ) if @xmath445 , then they are the form @xmath403 or @xmath462 .",
    "it remains to prove two facts about @xmath1-atoms which are equalities .",
    "first for all @xmath412 , among the @xmath1-atoms contained in @xmath49 , at most one is an equality @xmath529 .",
    "second , for any run @xmath449 , for any @xmath1-atom @xmath403 , there exists at most one configuration @xmath53 of @xmath70 such that @xmath451 contains @xmath403 .",
    "[ [ third - step ] ] third step + + + + + + + + + +    @xmath1-atoms @xmath403 .",
    "the first fact can be easily proved .",
    "suppose that @xmath530 for some set @xmath531 of linear terms .",
    "let @xmath532 .",
    "then @xmath438 is equivalent to @xmath533 thus @xmath438 can be replaced by @xmath534 and @xmath535 by @xmath536 .",
    "let us prove the second fact .",
    "let @xmath70 be a run in @xmath537 .",
    "assume that there are in @xmath70 several configurations @xmath262 , @xmath83 such that @xmath269 contains a given @xmath1-atom @xmath538 .",
    "it follows that time does not progress from @xmath539 to @xmath540 , that is , @xmath541 for all @xmath82 .",
    "only the first occurrence of @xmath529 at state @xmath9 is useful , the next ones can be forgotten .",
    "therefore , @xmath100 is transformed in a way to count occurrences of @xmath403 and to remember any progress of time .",
    "as done before , a counter @xmath492 has value @xmath4 ( @xmath5 or @xmath493 resp . ) in case of @xmath4 ( @xmath5 or @xmath493 and more resp . )",
    "occurrences of @xmath403 .",
    "moreover , values @xmath5 and @xmath493 are indexed by @xmath390 if time has progressed since the first occurrence of @xmath403 .",
    "formally we construct @xmath542 where @xmath543 , @xmath544 , @xmath545 and @xmath481 for all @xmath412 and @xmath546 . for any @xmath444",
    ", state @xmath468 belongs to @xmath501 with @xmath503 if @xmath403 belongs to @xmath49 , and @xmath504 otherwise . for",
    "any @xmath505 , edge @xmath506 belongs to @xmath502 where @xmath547 is computed according table [ table : counter ] .",
    "@xmath548    if @xmath191 contains @xmath403    @xmath549 otherwise    finally , for any state @xmath468 containing @xmath403 , we suppress this state if @xmath550 , we suppress @xmath403 from this state if @xmath551 .",
    "indeed recall that counter @xmath493 indicates that it is at least the second occurrence of @xmath403 , and the presence of index @xmath390 means a progress of time since the first occurrence of @xmath403 .      in this subsection",
    ", we again make hypothesis ( @xmath427 ) . by proposition  [ prop : egalite ] , we know that the reset - free normalized automaton @xmath100 can be supposed simplified .",
    "thanks to this property of @xmath100 , we are going to construct a presburger formula describing all the possible durations of runs in @xmath459 in terms of the parameters .",
    "we need the next notation .",
    "let @xmath552 be a variable used to denote a duration and @xmath1 be a variable for a clock value .",
    "we call _ @xmath552-atom _ any @xmath553 or @xmath554 , with @xmath149 a linear term .",
    "a @xmath552-atom is of _ first type _ if it is of the form @xmath555 it is of _ second type _ if it is of the form @xmath556    a _ @xmath552-conjunction _ is a conjunction of @xmath552-atoms of second type .",
    "[ prop : lambda_reset_free ] let @xmath0 be a reset - free normalized automaton .",
    "there exists a presburger formula @xmath557 such that for any valuation @xmath34 and any clock value @xmath208 , there exists a run in @xmath459 with duration @xmath558 iff @xmath559 this formula is a disjunction of formulae of the form @xmath560 where @xmath561 is a first type @xmath552-atom , @xmath562 is a @xmath552-conjunction , @xmath563 is an @xmath1-conjunction  and @xmath564 is a @xmath27-conjunction .",
    "its construction is effective .",
    "let us explain this proposition on the next example .",
    "* example * consider the simplified automaton @xmath100 of figure [ fig : ex ] .",
    "we denote by @xmath558 the duration of any run @xmath398 in @xmath459 , where @xmath34 is a fixed parameter valuation .",
    "every run has to pass through state @xmath49 which contains the @xmath1-atom @xmath456 .",
    "let us study the possible durations @xmath565 of runs @xmath566 .",
    "each duration @xmath565 must be equal to @xmath567 . for runs @xmath568 using the cycle , constraint @xmath569 holds and @xmath565 has the form @xmath570 , @xmath571 . the unique run @xmath568 not using the cycle is not constrained and its duration equals @xmath572 .",
    "now any duration @xmath558 can be decomposed as @xmath573 , @xmath574 . due to the @xmath1-atom @xmath458 of state @xmath77",
    ", we get another constraint @xmath575 . in summary , we have    @xmath576 \\\\",
    "\\wedge & [ t_0 { \\equiv_{2,\\geq}}v(\\theta_1 ) - x_0 + 1 ] \\\\",
    "\\wedge & [ x_0 + t_0 \\leq v(\\theta_2 ) ] \\end{array}\\ ] ]    we get the next presburger formula @xmath557 @xmath577 \\\\",
    "\\wedge & [ t { \\equiv_{2,\\geq}}\\theta_1 + 1 - x ] \\\\",
    "\\wedge & [ t \\leq \\theta_2 - x ] \\end{array}\\ ] ] such that there exists a run in @xmath459 with duration @xmath558 iff @xmath578 is true .",
    "this formula is in the form of proposition [ prop : lambda_reset_free ] when it is rewritten as a disjunction of conjunctions of @xmath552-atoms , @xmath1-atoms and @xmath27-atoms .",
    "is equal to @xmath579 and @xmath562 is equal to @xmath580 . ]",
    "thanks to the previous example , we can give some ideas of the proof of proposition [ prop : lambda_reset_free ] .",
    "except for the initial and final states , the states of a simplified automaton contain at most one @xmath1-atom which is of the form @xmath403 .",
    "the proof will be by induction on these @xmath1-atoms .",
    "given an @xmath1-atom @xmath403 contained in some state @xmath49 , any run @xmath70 in @xmath459 passing through this state @xmath49 can be decomposed as @xmath581 and @xmath582 , for some @xmath583 and @xmath400 .",
    "its duration @xmath558 can also be decomposed as @xmath584 with the constraint that the clock value @xmath585 must satisfy @xmath538 .",
    "it follows that @xmath586 .",
    "the durations @xmath565 and @xmath587 and the related constraints will be computed by induction .",
    "when there is no @xmath1-atom in the automaton ( base case ) , only @xmath27-atoms can appear in states .",
    "runs will therefore be partitioned according to the set of @xmath27-atoms that constrain them .",
    "their durations will be described as fixed values or arithmetic progressions .",
    "( of proposition [ prop : lambda_reset_free ] ) . by proposition  [ prop :",
    "egalite ] , the reset - free normalized @xmath588 is assumed to be simplified .    1",
    ".   we can suppose that @xmath401 is reduced to one initial state @xmath452 and @xmath402 to one final state @xmath77 .",
    "at the end of the proof , it will remain to take a disjunction over @xmath399 and @xmath400 of the constructed formulae . from now on , we suppose that @xmath589 and @xmath590 .",
    "assumption_. we make the assumption that @xmath452 contains no @xmath1-atom and @xmath77 contains no @xmath1-atom @xmath462 . as @xmath100 is simplified , this means that for any state @xmath412 , either @xmath591 or @xmath438 equals some @xmath403 .",
    "the proof is done by induction on the @xmath1-atoms @xmath403 that appear as @xmath438 with @xmath592 . the formula @xmath557 that we will construct will have _ no _ @xmath552-conjunction , that is @xmath557 will be a disjunction of formulae of the form @xmath593 . + _ base case_. suppose that @xmath594 for all @xmath412 , that is @xmath595 .",
    "durations of runs in @xmath459 are thus independent on the clock values .",
    "they are simply equal to the number of edges labeled by @xmath596 along runs from @xmath452 to @xmath77 . and to each of these runs is associated a constraint which is the conjunction of the @xmath27-atoms contained in the states of the run",
    ". + the proof is based on the classical kleene theorem @xcite using the particular alphabet @xmath597 to any edge @xmath598 of @xmath100 corresponds the letter @xmath599 of @xmath600 .",
    "the concatenation @xmath601 of two letters @xmath602 and @xmath603 is defined as @xmath604 . thus a word over @xmath600 is equal to @xmath605 where @xmath552 is a positive integer ( a duration ) and @xmath606 is a @xmath27-conjunction  ( a constraint on the parameters ) . in particular ,",
    "the empty word is equal to @xmath607 .",
    "the star operation @xmath608 is defined as usual and the plus operation @xmath609 is defined by @xmath610 .",
    "we denote by @xmath611 the smallest family of languages containing @xmath600 and closed under @xmath601 and @xmath609 .",
    "the elements of a set @xmath612 have a simple form .",
    "the second components of these elements are all identical because operation @xmath613 is idempotent .",
    "the first components constitute a set which is the union of a finite set and a finite number of arithmetic progressions @xcite . in other words @xmath614",
    "is described by a disjunction of formulae of the form @xmath615 such that @xmath564 equals a fixed @xmath27-conjunction  @xmath606 and @xmath561 equals either @xmath616 or @xmath617 with @xmath618 .",
    "+ now by kleene s theorem applied to @xmath100 , we get a rational language over @xmath600 whose first components describe the durations of all runs of @xmath435 and the second components describe the related constraints .",
    "it is not difficult to prove that this rational language can be rewritten as a finite union of languages in @xmath611 .",
    "we thus get the required formula @xmath557 as a disjunction of formulae @xmath619 where @xmath561 is a first - type @xmath552-atom and @xmath564 is a @xmath27-conjunction .",
    "general case_. now consider a particular @xmath1-atom @xmath403 .",
    "let us denote by @xmath620 the set of states @xmath49 such that @xmath438 is equal to @xmath403 .",
    "as @xmath100 is simplified , any run @xmath70 of @xmath459 contains @xmath4 or @xmath5 state of @xmath620 ( see the second part of definition [ def : simplified ] ) .",
    "we are going to prove that the expected formula @xmath557 is equal to @xmath621 where @xmath622 describes durations of runs containing no state of @xmath620 , and @xmath623 describes durations of runs containing one occurrence of the state @xmath359 of @xmath620 .",
    "+ all runs containing no state of @xmath620 constitute the set @xmath624 of an automaton @xmath265 obtained from @xmath100 by erasing all states in @xmath620 .",
    "as @xmath265 has one @xmath1-atom less , @xmath625 can be constructed by induction hypothesis .",
    "+ let us now fix @xmath626 and a run @xmath449 that contains it .",
    "this run is decomposed into a run @xmath627 with duration @xmath565 , and a run @xmath628 with duration @xmath587 .",
    "duration @xmath558 of @xmath70 is equal to @xmath629 such that @xmath630 , @xmath631 and @xmath632 satisfies @xmath403 .",
    "durations @xmath565 and @xmath587 can be computed by induction in the following way .",
    "+ let us begin with @xmath565 .",
    "the automaton @xmath100 is modified into @xmath633 by erasing states of @xmath634 and edges leaving @xmath359 .",
    "invariant @xmath453 is replaced by @xmath635 .",
    "the new unique final state is @xmath359 .",
    "the new automaton has one @xmath1-atom less , so @xmath636 can be constructed by induction hypothesis such that @xmath637 is true .",
    "formula @xmath638 is a disjunction of formulae @xmath639 where @xmath640 is a first type @xmath552-atom , @xmath641 is an @xmath1-conjunction  and @xmath642 is a @xmath27-conjunction .",
    "suppose that @xmath640 is one among @xmath643 as @xmath632 satisfies @xmath403 and @xmath630 , then @xmath644 so in ( [ eq:1 ] ) , @xmath552 can be replaced by @xmath645 and ( [ eq:1 ] ) becomes @xmath646 thus @xmath640 becomes an @xmath1-atom or a @xmath27-atom .",
    "the modified formula @xmath647 is denoted by @xmath648 + let us now describe @xmath587 .",
    "we modify @xmath100 into @xmath649 by erasing states of @xmath634 and edges entering @xmath359 .",
    "formula @xmath453 is replaced by @xmath635 .",
    "the new unique initial state is @xmath359 . by induction hypothesis ,",
    "@xmath650 is constructed as a disjunction of formulae @xmath651 where @xmath652 is one among @xmath653 + recall that @xmath650 describes the duration @xmath587 of runs @xmath628 for which @xmath632 satisfies @xmath654 .",
    "thus in ( [ eq:3 ] ) , @xmath1 can be replaced by @xmath149 and ( [ eq:3 ] ) becomes @xmath655 this shows that @xmath652 is now of the form @xmath656 moreover @xmath657 becomes a @xmath27-conjunction  when @xmath1 is replaced by @xmath149 .",
    "the modified formula @xmath658 is denoted by @xmath659 + finally , we can describe @xmath660 . by ( [ eq:2 ] ) and ( [ eq:4 ] ) , it has the form @xmath661 + hence formula @xmath662 for @xmath558 is a disjunction of formulae @xmath593 such that @xmath561 has the form ( see ( [ eq:5 ] ) ) @xmath663 or @xmath664 and @xmath665 has the form ( see ( [ eq:1bis ] and ( [ eq:4bis ] ) ) @xmath666 .",
    "3 .   under the assumption that @xmath452 contains no @xmath1-atoms and",
    "@xmath77 contains no @xmath1-atom @xmath462 , we have constructed a formula @xmath557 with no @xmath552-conjunction .",
    "so we have to take into account the @xmath1-conjunction  @xmath667 and the @xmath1-atoms @xmath462 appearing in @xmath77 .",
    "thus @xmath208 must satisfy @xmath667 and @xmath668 must satisfy all @xmath462 in @xmath77 .",
    "it follows that the final formula is equal to @xmath669    [ rem : x=0 ] suppose that @xmath0 is an automaton such that @xmath670 equals @xmath671 for each initial state @xmath399",
    ". then formula @xmath557 of proposition [ prop : lambda_reset_free ] contains the @xmath1-atom @xmath672 ( see ( [ eq : x=0 ] ) ) .",
    "hence , if @xmath578 is true , then necessarily @xmath220 , which can been interpreted as a reset of the clock .",
    "this remark will be used in the next subsection .",
    "this subsection is devoted to the proofs of propositions [ prop : progress ] and [ prop : lambda ] .",
    "here there is no longer the restriction on the automaton given by hypothesis ( @xmath427 ) : it is _ any _ automaton as in definition [ def : timed_aut ] .",
    "this automaton is supposed to be normalized by proposition [ prop : normalized ] .",
    "thus , given a state @xmath49 , the edges @xmath413 entering @xmath49 all have the same @xmath64 .",
    "we call @xmath49 a _ reset - state _ in case @xmath61 . the set of reset - states of @xmath100 is denoted by @xmath673 .",
    "let @xmath674 be an automaton .",
    "let us fix two states @xmath675 , a parameter valuation @xmath34 , a clock value @xmath208 .",
    "we denote by @xmath676 the set of runs @xmath278 in @xmath51 .",
    "let us study this set .",
    "a run @xmath70 in @xmath677 possibly contains some reset - states .",
    "it thus decomposes as a sequence of @xmath678 runs @xmath407 , @xmath679 , such that for any @xmath82 , @xmath407 contains no reset - state , except possibly for the first and the last configurations of @xmath407 .",
    "the duration @xmath680 of each @xmath407 can be computed thanks to proposition [ prop : lambda_reset_free ] . for",
    "any @xmath82 , @xmath83 , let us denote by @xmath681 the presburger formula corresponding to @xmath408 which is a disjunction of formulae @xmath682 .",
    "so the total duration @xmath73 is equal to the sum @xmath683 .",
    "we will see that the durations @xmath186 of runs @xmath684 can be symbolically represented thanks to rational expressions on an alphabet whose letters are the formulae @xmath685 that appear in the @xmath681 s .",
    "thanks to this symbolic description and because our logic is the fragment f- , we will be able to prove propositions [ prop : progress ] and [ prop : lambda ] .",
    "it should be noted that the durations @xmath186 of runs @xmath686 can not be described by a presburger formula as in proposition [ prop : lambda_reset_free ] , otherwise the model - checking problem for   would be decidable ( see corollary [ cor : undecidable ] ) .",
    "let us now explain in details all these ideas .    in a first step ,",
    "we construct from @xmath100 several reset - free normalized automata as in hypothesis ( @xmath427 ) .",
    "the construction is a standard one in automata theory .",
    "runs @xmath407 mentioned before will be runs in these automata and their durations will be described thanks to proposition [ prop : lambda_reset_free ] .    [",
    "[ first - construction ] ] first construction + + + + + + + + + + + + + + + + + +    for each couple @xmath687 of states of @xmath100 such that @xmath688 and @xmath689 , we construct from @xmath100 the following reset - free automaton @xmath690 . the set @xmath691 of states is @xmath692 where @xmath693 are copies of @xmath694 .",
    "the unique initial state is @xmath695 and the unique final state is @xmath696 .",
    "let @xmath697 and @xmath698 .",
    "let @xmath699 be equal to @xmath337 if @xmath700 and to @xmath701-atom @xmath672 imposes a reset of the clock at state @xmath359 ( see remark [ rem : x=0 ] ) ] if @xmath702 .",
    "let @xmath703 be equal to @xmath704 if @xmath705 and to @xmath706 must satisfy hypothesis ( @xmath427 ) , no reset can appears on the edges ] if @xmath707 . the set @xmath502 of edges is the union of @xmath312 restricted to @xmath708 with the next set of new edges@xmath709 @xmath710 in this way , automaton @xmath711 satisfies hypothesis ( @xmath427 ) .",
    "let @xmath688 and @xmath689 .",
    "we define @xmath632 to be equal to @xmath208 if @xmath700 , and to @xmath4 if @xmath702 .",
    "the runs of @xmath712 are exactly the non - empty runs @xmath713 of @xmath51 that pass through no reset - state ( except possibly the first and the last states of the run ) .",
    "the durations of runs in @xmath712 are described by formula @xmath714 of proposition [ prop : lambda_reset_free ] .",
    "this formula is a disjunction @xmath715 of formulae @xmath716    for each couple @xmath717 and each @xmath82 , we _ associate _ a distinct letter @xmath718 to each formula @xmath719 .",
    "the set of all these letters is denoted by @xmath600 .",
    "we say that letter @xmath718 is a _ reset - letter _ if @xmath359 is a reset - state .",
    "the set of reset - letters is denoted @xmath720 .    in a second step ,",
    "we construct another automaton from @xmath100 in a way to show how a run of @xmath677 is decomposed into a sequence of runs @xmath407 according to reset - states of @xmath100 .",
    "this automaton will be a classical automaton @xcite .",
    "[ [ second - construction ] ] second construction + + + + + + + + + + + + + + + + + + +    we construct an automaton @xmath721 over the alphabet @xmath600 as follows .",
    "the set of states equals @xmath722 and the set of edges equals @xmath723 . the unique initial ( resp .",
    "final ) state is @xmath49 ( resp .",
    "@xmath191 ) .",
    "so , any run @xmath70 of @xmath677 is map into a path in @xmath721 from @xmath49 to @xmath191 which indicates how @xmath70 is decomposed according to reset - states of @xmath100 . the duration of @xmath70 is symbolically represented by the word that labels the corresponding path in @xmath721 .",
    "hence the set of durations of runs of @xmath677 is _ symbolically represented _ by the rational subset accepted by @xmath721 .",
    "we denote by @xmath724 this subset of @xmath725 .",
    "any word of @xmath726 has _ at most one _",
    "letter that is non reset ( the first letter of the word ) .",
    "we now study in details rational expressions over the alphabet @xmath600 and in particular the rational expression defining @xmath726 .",
    "[ [ rational - expressions ] ] rational expressions + + + + + + + + + + + + + + + + + + + +    let @xmath727 be denoting @xmath728 with @xmath729 denoting the empty word and @xmath611 be the smallest family closed under @xmath601 and @xmath390 , and containing @xmath600 .",
    "one can prove that any rational language over @xmath600 can be effectively rewritten as a finite union of languages in @xmath730 .",
    "therefore @xmath731 with @xmath732 such that @xmath733 .",
    "the set @xmath734 is decomposed into @xmath735 according to ( [ eq : a ] ) .",
    "an non empty word of @xmath726 is a sequence @xmath736 .",
    "the first letter @xmath737 describes runs from state @xmath49 to some reset - state @xmath738 , the clock value at @xmath49 is @xmath208 .",
    "each letter @xmath739 , @xmath740 , is a reset - letter .",
    "if @xmath741 , @xmath739 describes runs from reset - state @xmath742 to reset - state @xmath743 , the clock value at @xmath742 is @xmath4 .",
    "if @xmath744 , @xmath739 describes runs from reset - state @xmath745 to state @xmath191 , the clock value at @xmath745 is @xmath4 .",
    "let @xmath746 be the formula associated to each letter @xmath739 , @xmath747 ( see ( [ eq : decomp ] ) ) .",
    "whenever @xmath740 , @xmath748 contains the @xmath1-atom @xmath672 by remark [ rem : x=0 ] and definition of automaton @xmath711 . in this case , we prefer symbolically represents certain runs of @xmath734 .",
    "we are only interested in the initial clock value @xmath208 treated by formula @xmath748 of @xmath737 . ] to work with the equivalent formula @xmath749 such that @xmath1 has been replaced by @xmath4 in ( [ eq : lambda ] ) ( in particular , @xmath563 becomes a @xmath27-conjunction ) . in this formula",
    "@xmath750 is a @xmath552-atom of the form @xmath616 or @xmath617 , @xmath751 is a conjunction of @xmath552-atoms of the form @xmath752 and @xmath753 is a @xmath27-conjunction .",
    "the concatenation @xmath754 is interpreted as follows .",
    "it is the _ sum _ @xmath755 of the durations @xmath756 respectively described by @xmath757 .",
    "it is the _ conjunction _ of the related constraints @xmath758 formulae @xmath759 impose upper bounds on @xmath760 .",
    "the @xmath1-conjunction  imposes constraints on the clock value @xmath208 .",
    "the @xmath27-conjunction   @xmath761 impose constraints on the parameters .    in the next lemmas",
    ", we show that certain properties of runs in @xmath762 can be expressed in presburger arithmetics thanks to the symbolic representation @xmath763 of @xmath764 ( see ( [ eq : a ] ) and ( [ eq : b ] ) ) . after these lemmas , we will be fully equipped to prove propositions  [ prop : progress ] and  [ prop : lambda ] . note",
    "that proposition [ prop : lambda ] can only be proved with @xmath229 limited to @xmath765 , otherwise the model - checking problem for  would be decidable .    [",
    "lem : nonempty ] one can construct a @xmath240 formula @xmath766 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath767 is true iff @xmath764 is non empty .",
    "runs of @xmath764 have durations that are symbolically represented by the words of @xmath763 .",
    "let us construct formula @xmath768 by induction on the rational expression defining @xmath763 ( see ( [ eq : a ] ) ) .",
    "this formula will be equal to @xmath769 with @xmath770 an @xmath1-conjunction  imposing constraints on the clock and @xmath771 a @xmath27-conjunction   imposing constraints on the parameters .",
    "suppose @xmath772 , then @xmath773 equals @xmath774 is @xmath49 is a reset - state and @xmath775 otherwise . indeed , under these constraints , @xmath764 is non empty since it contains the empty run with the null duration .",
    "suppose that @xmath776 with @xmath777 and associated formula @xmath778 .",
    "recall that @xmath779 is one among the @xmath552-atoms @xmath616 , @xmath780 , @xmath617 or @xmath781 and that @xmath782 is of the form @xmath783 .",
    "it follows that the non emptiness of @xmath764 can be expressed thanks to the minimum duration @xmath616 ( @xmath780 resp . ) of runs in @xmath764 .",
    "then @xmath784    suppose now that @xmath785 with @xmath777 and @xmath786 .",
    "let us first prove by induction on the rational expression defining @xmath787 that @xmath788 equals some @xmath27-conjunction  @xmath789 since @xmath790 , that is , @xmath672 ( see ( [ eq : kappa ] ) ) .",
    "] let @xmath791 with @xmath792 .",
    "we obtain a formula similar to ( [ eq : nonempty ] ) where @xmath1 is replaced by @xmath4 ( see([eq : kappa ] ) ) , so @xmath793    suppose that @xmath794 and formulae @xmath795 , @xmath796 have been constructed by induction .",
    "then @xmath797 because the non emptiness of @xmath764 requires the non emptiness of both @xmath798 and @xmath799 .",
    "if @xmath800 , then @xmath801 because conjunction in an idempotent operation . finally for @xmath785 , we get @xmath802 where @xmath803 is formula ( [ eq : nonempty ] ) and @xmath771 is the formula just constructed for @xmath787 .",
    "[ lem : nonnull ] one can construct a @xmath240 formula @xmath804 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath805 is true iff @xmath764 contains a run with a non null duration .",
    "the proof is in the same vein as for lemma [ lem : nonempty ] with a similar form @xmath769 for @xmath806 .    if @xmath772 , then clearly @xmath807 . if @xmath776 with @xmath777 and associated formula @xmath808 .",
    "let us study as before formulae @xmath779 and @xmath782 , where @xmath809 . if @xmath779 equals @xmath616 , then @xmath552 is non null iff @xmath810 .",
    "then @xmath811 is the formula @xmath812 .",
    "when @xmath779 is @xmath780 , we have a similar formula with @xmath552 non null if @xmath813 .",
    "if @xmath779 equals @xmath814 , then a possible non null value for @xmath552 is either @xmath149 if @xmath815 or @xmath467 if @xmath816 .",
    "we get formula @xmath811 equal to @xmath817 a similar argument holds if @xmath779 equals @xmath818 .",
    "let @xmath785 , with @xmath777 and @xmath819 .",
    "let us first construct formula @xmath820 by induction on @xmath787 .",
    "this formula will be a @xmath27-conjunction . if @xmath821 with @xmath792 , we get a formula @xmath822 as for the case @xmath776 such that @xmath1 is replaced by @xmath4 .    if @xmath794 , then there exists a non null duration in @xmath787 iff there exists some duration in @xmath798 and some other in @xmath799 and one of them is non null .",
    "thus @xmath820 equals @xmath823 . if @xmath824 , then @xmath825 .",
    "finally , for @xmath785 , we get the formula @xmath826 .",
    "[ lem : nonzeno ] one can construct a @xmath240 formula @xmath827 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath828 is true iff @xmath764 contains runs with arbitrarily large durations .",
    "the proof is again similar .",
    "suppose @xmath772 , then clearly @xmath829 .",
    "let @xmath776 with @xmath777 and associated formula @xmath808 .",
    "if @xmath779 equals @xmath616 or @xmath780 , then @xmath830 . if @xmath779 equals @xmath814 or @xmath818 , then @xmath552 is arbitrarily large iff @xmath831 . in this case ,",
    "@xmath832 , otherwise @xmath830 .",
    "suppose now that @xmath785 .",
    "we begin to construct a @xmath27-conjunction   @xmath833 by induction on @xmath787 .",
    "if @xmath821 with @xmath792 , then the formula is as in the case @xmath776 with @xmath1 replaced by @xmath4 . if @xmath794 , then @xmath833 equals @xmath834 . if @xmath824 , then @xmath787 has arbitrarily large durations iff @xmath798 contains a non null duration , that is @xmath835 .",
    "thus we get for @xmath785 the formula @xmath836    [ lem : min ] one can construct a presburger formula @xmath837 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath838 is true iff @xmath558 is the minimum duration of runs of @xmath764 .",
    "this formula is equal to @xmath839 such that @xmath840 is of the form @xmath616 or @xmath780 , @xmath841 is an @xmath1-conjunction  and @xmath842 is a @xmath27-conjunction .    in this proof",
    ", we have to describe the minimum duration by the variable @xmath552 and the constraints on it by @xmath841 and @xmath842 .",
    "let @xmath772 , then @xmath843 is equal to @xmath844 if @xmath49 is a reset - state , and @xmath845 otherwise .",
    "let @xmath776 with @xmath777 . then looking at the form of @xmath779 , the minimum duration equals @xmath149 ( @xmath645 resp . )",
    "( see ( [ eq : nonempty ] ) and the sentence just before ) .",
    "therefore formula @xmath843 is equal to @xmath846    suppose @xmath785 .",
    "let us begin to construct formula @xmath847 the form of which will be @xmath848 . if @xmath821 with @xmath792 , then @xmath847 equals ( [ eq : min ] ) with @xmath1 replaced by @xmath4 . if @xmath794 , then the minimum duration in @xmath787 equals the sum of the minimum durations in @xmath798 and @xmath799 .",
    "hence , if @xmath849 and @xmath850 , then @xmath847 is equal to @xmath851 . if @xmath800 , then the minimum duration in @xmath787 is the minimum duration in @xmath798 , i.e. @xmath852",
    "let us come back to @xmath785 .",
    "let @xmath853 be equal to ( [ eq : min ] ) and @xmath847 be equal @xmath854 .",
    "then @xmath855 is equal to @xmath856 ( resp .",
    "@xmath857 ) .    in the next lemma , we are going to construct a formula @xmath858 that describes the maximum duration @xmath552 in @xmath763 .",
    "note that durations @xmath552 in @xmath763 can be arbitrarily large ( see lemma [ lem : nonzeno ] ) .",
    "we will thus denote symbolically by @xmath859 the ( non existing ) maximum duration .",
    "[ lem : max ] one can construct a formula @xmath860 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath861 is true iff @xmath558 is the maximum duration of runs of @xmath764 .",
    "this formula is equal to a disjunction of formulae @xmath862 such that @xmath863 is of the form @xmath616 , @xmath780 or @xmath859 , @xmath864 is an @xmath1-conjunction  and @xmath865 is a @xmath27-conjunction .    if @xmath772 , then @xmath866 is @xmath867 if @xmath49 is a reset - state , and to @xmath868 otherwise .",
    "let @xmath776 with @xmath777 .",
    "let us study @xmath779 and @xmath782 equal to @xmath869 .",
    "if @xmath779 is @xmath616 , then @xmath870 equals @xmath871 .",
    "a similar formula holds when @xmath779 equals @xmath780 .",
    "if @xmath779 is @xmath617 with @xmath831 , then @xmath870 equals @xmath872 .",
    "suppose that @xmath779 is @xmath617 with @xmath782 being a non empty conjunction @xmath869 .",
    "then the maximum duration is the greatest value @xmath873 , for some @xmath236 , which is less than or equal to the smallest among the @xmath874 s , denoted by @xmath875 .",
    "assume that @xmath876 and @xmath877 for some @xmath878 .",
    "if @xmath879 , then the maximum duration is given by formula @xmath863 equal to @xmath880 under the condition @xmath881 equal to @xmath882 , i.e. @xmath883 . if @xmath884 , then @xmath863 equals @xmath885 under the condition @xmath881 equal to @xmath886 .",
    "thus @xmath870 is a disjunction over the different possible values of @xmath887 and @xmath492 of formulae @xmath888 such that @xmath889 is the conjunction @xmath890 a similar argument can be done when @xmath779 is @xmath891 .",
    "let @xmath785 .",
    "let us first construct @xmath892 .",
    "this formula will contain no @xmath864 . if @xmath821 with @xmath792 , then all the proof done before for @xmath776 can be repeated with @xmath1 replaced by @xmath4 .",
    "suppose that @xmath794 and that @xmath893 and @xmath894 are a disjunction of formulae @xmath895 and @xmath896 respectively . if @xmath897 and @xmath898 , then @xmath899 contains the conjunction @xmath900 .",
    "if @xmath901 or @xmath902 , then @xmath899 contains the conjunction @xmath903 .",
    "suppose that @xmath800 , then the maximum duration equals @xmath904 if @xmath614 contains a non null duration ( see lemma [ lem : nonnull ] ) , and @xmath4 otherwise .",
    "thus @xmath899 is the formula @xmath905 .",
    "formula @xmath858 for @xmath785 can be easily constructed ( as done before for @xmath906 ) .",
    "( of proposition [ prop : progress ] ) .",
    "let us prove that one can construct a @xmath240 formula @xmath272 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath907 is true iff there exists an infinite run in @xmath51 starting with @xmath175 .",
    "such a run exists iff for some @xmath908 , there exist runs in @xmath677 with arbitrarily large durations . as @xmath909 ,",
    "this is equivalent to say that some @xmath764 contains runs with arbitrarily large durations . by lemma [ lem : nonzeno ]",
    ", it follows that formula @xmath272 is equal to @xmath910 .",
    "( of proposition [ prop : lambda ] ) .",
    "let @xmath911 be a linear term and @xmath912 .",
    "we have to show that there exists a @xmath240 formula @xmath913 such that for any valuation @xmath34 and any clock value @xmath208 , @xmath914 is true iff there exists a run in @xmath677 with duration @xmath915 .",
    "\\(1 ) we begin with @xmath916 . to test if there exists a run in @xmath677 with duration @xmath915 is equivalent to test that @xmath917 with @xmath918 being the minimum duration of runs in @xmath677 . by lemma [ lem : min ]",
    ", the minimum duration for each @xmath764 is expressed by formula @xmath843 .",
    "this formula is of the form @xmath919 with @xmath840 equal to @xmath616 or @xmath920 .",
    "therefore @xmath913 is equal to @xmath921 , where each @xmath922 is obtained by modifying @xmath923 as follows : any formula @xmath840 equal to @xmath616 ( @xmath924 resp . )",
    "is replaced by formula @xmath925 ( @xmath926 resp . ) .",
    "\\(2 ) we now turn to @xmath927 .",
    "the approach is similar but with the maximum ( instead of minimum ) duration . by lemma [ lem : max ]",
    ", the maximum duration for each @xmath764 is expressed by formula @xmath858 .",
    "this formula is a disjunction of formulae @xmath928 with @xmath863 equal to @xmath616 , @xmath929 or @xmath859 .",
    "it follows that @xmath913 is equal to @xmath921 , where each @xmath922 is obtained by modifying @xmath866 in the following way .",
    "if @xmath863 equals @xmath930 , @xmath780 or @xmath859 , then it is replaced by formula @xmath925 , @xmath931 or @xmath635 respectively .",
    "in this paper , we have completely studied the model - checking problem and the parameter synthesis problem of the logic , an extension of tctl with parameters , over one parametric clock discrete - timed automata . on the negative side",
    ", we showed that the model - checking problem is undecidable .",
    "the undecidability result needs equality in the logic . on the positive side",
    ", we showed that for the fragment f-  where the equality is not allowed , the model - checking problem becomes decidable and the parameter synthesis problem is solvable .",
    "our algorithm is based on automata theoretic principles and an extension of our method ( see @xcite ) to express durations of runs of a timed automaton using presburger arithmetic . with this approach , the model - checking problem and the parameter synthesis problem",
    "are syntactically translated into presburger arithmetic which has a decidable theory and an effective quantifier elimination .",
    "the model checking problem is translated into a presburger sentence inside which the presburger decidability process looks for semantic inconsistencies between the parameters and the parametric clock .",
    "the parameter synthesis problem asks for which values of the parameters is a f-  formula true at a given configuration of the timed automaton .",
    "thanks to presburger quantifier elimination , this problem is solved by expressing the values of the parameters in terms of the operations @xmath390 , @xmath391 and @xmath392 , @xmath232 .    to the best of our knowledge ,",
    "this is the first work that studies the model - checking and parameter synthesis problems with parameters both in the model ( timed automaton ) and in the property (  formula ) .",
    "the problems solved in this paper are important as it is very natural to refer in the properties of the system to parameters appearing in the model of the system .",
    "we illustrated in the introduction the kind of properties that can be expressed and automatically verified in our framework .",
    "future works could be the following ones .",
    "a first work is to give the precise bordeline between decidability and undecidability .",
    "is the model - checking decidable for the logic  such that equality is forbidden in the operators @xmath158 and @xmath155 ?",
    "no complexities issues are given in this paper and only the discrete time is considered .",
    "presburger theory is decidable with the high 3exptime complexity .",
    "more efficient algorithms should be designed for particular fragments of f- .",
    "the extension to dense timed models of the method proposed in this paper should be investigated .",
    "rajeev alur , kousha etessami , salvatore  la torre , and doron peled .",
    "parametric temporal logic for `` model measuring '' . in _ international colloquium of automata , languages and programming , icalp99 _ , volume 1644 of _ lecture notes in computer science _ , pages 159168 , 1999 .",
    "v.  bruyre , e.  dallolio , and j .- f .",
    "durations , parametric model - checking in timed automata with presburger arithmetic . in _ annual symposium on theoretical aspects of computer science , stacs03 _ , volume 2607 of _ lecture notes in computer science _ , pages 687698 .",
    "springer , 2003 .",
    "vronique bruyre and jean - franois raskin .",
    "real - time model - checking : parameters everywhere . in _",
    "23rd conference on foundations of software technology and theoretical computer science , fsttcs03 _ , volume 2914 of _ lecture notes in computer science _ , pages 100111 .",
    "springer , 2003 .",
    "joseph  s. miller .",
    "decidability and complexity results for timed automata and semi - linear hybrid automata . in _",
    "hybrid systems  computation and control , hscc00 _ , volume 1790 of _ lecture notes in computer science _ , pages 296309 .",
    "springer , 2000 ."
  ],
  "abstract_text": [
    "<S> in this paper , we study the model - checking and parameter synthesis problems of the logic tctl over discrete - timed automata where parameters are allowed both in the model ( timed automaton ) and in the property ( temporal formula ) . </S>",
    "<S> our results are as follows . on the negative side , we show that the model - checking problem of tctl extended with parameters is undecidable over discrete - timed automata with only one parametric clock </S>",
    "<S> . the undecidability result needs equality in the logic . on the positive side , we show that the model - checking and the parameter synthesis problems become decidable for a fragment of the logic where equality is not allowed . </S>",
    "<S> our method is based on automata theoretic principles and an extension of our method to express durations of runs in timed automata using presburger arithmetic . </S>"
  ]
}