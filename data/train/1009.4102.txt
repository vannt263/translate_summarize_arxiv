{
  "article_text": [
    "energy functions that depend on thousands of binary variables and decompose according to a graphical model @xcite into potential functions that depend on subsets of all variables have been used successfully for pattern analysis , e.g.  in the seminal works @xcite .",
    "an important problem is the minimization of the sum of potentials , i.e.  the search for an assignment of zeros and ones to the variables that minimizes the energy .",
    "this problem can be solved efficiently by dynamic programming if the graph is acyclic @xcite or its treewidth is small enough @xcite , and by finding a minimum s - t - cut @xcite if the energy function is ( permutation ) submodular @xcite . in general ,",
    "the problem is np - hard @xcite . for moderate problem sizes ,",
    "exact optimization is sometimes tractable by means of mixed integer linear programming ( milp ) @xcite .",
    "contrary to popular belief , some practical computer vision problems can indeed be solved to optimality by modern milp solvers ( cf .",
    "section  [ section : experiments ] ) .",
    "however , all such solvers are eventually overburdened when the problem size becomes too large . in cases where exact optimization is intractable , one has to settle for approximations .",
    "while substantial progress has been made in this direction , a deterministic non - redundant search algorithm that constrains the search space based on the topology of the graphical model has not been proposed before .",
    "this article presents a depth - limited exhaustive search algorithm , the lazy flipper , that does just that .",
    "the lazy flipper starts from an arbitrary initial assignment of zeros and ones to the variables that can be chosen , for instance , to minimize the sum of only the first order potentials of the graphical model . starting from this initial configuration , it searches for flips of variables that reduce the energy .",
    "as soon as such a flip is found , the current configuration is updated accordingly , i.e.  in a greedy fashion . in the beginning , only single variables are flipped . once a configuration is found whose energy can no longer be reduced by flipping of _ single _ variables , all those subsets of two and successively more variables that are connected via potentials in the graphical model are considered . when a subset of more than one variable is flipped , all smaller subsets that are affected by the flip are revisited .",
    "this allows the lazy flipper to perform an exhaustive search over all subsets of variables whose flip potentially reduces the energy .",
    "two special data structures described in section [ section : data - structures ] are used to represent each subset of connected variables precisely once and to exclude subsets from the search whose flip can not reduce the energy due to the topology of the graphical model and the history of unsuccessful flips .",
    "these data structures , the lazy flipper algorithm and an experimental evaluation of state - of - the - art optimization algorithms on higher - order graphical models are the main contributions of this article .",
    "overall , the new algorithm has four favorable properties : ( i ) it is strictly convergent .",
    "while a global minimum is found when searching through all subgraphs ( typically not tractable ) , approximate solutions with a guaranteed quality certificate ( section [ section : algorithm ] ) are found if the search space is restricted to subgraphs of a given maximum size .",
    "the larger the subgraphs are allowed to be , the tighter the upper bound on the minimum energy becomes .",
    "this allows for a favorable trade - off between runtime and approximation quality .",
    "( ii ) unlike in brute force search , the runtime of lazy flipping depends on the topology of the graphical model .",
    "it is exponential in the worst case but can be shorter compared to brute force search by an amount that is exponential in the number of variables .",
    "it is approximately linear in the size of the model for a fixed maximum search depth .",
    "( iii ) the lazy flipper can be applied to graphical models of any order and topology , including but not limited to the more standard grid graphs .",
    "directed bayesian networks and undirected markov random fields are processed in the exact same manner ; they are converted to factor graph models @xcite before lazy flipping .",
    "( iv ) only trivial operations are performed on the graphical model , namely graph traversal and evaluations of potential functions .",
    "these operations are cheap compared , for instance , to the summation and minimization of potential functions performed by message passing algorithms , and require only an implicit specification of potential functions in terms of program code that computes the function value for any given assignment of values to the variables .    experiments on simulated and real - world problems , submodular and non - submodular functions , grids and irregular graphs ( section [ section : experiments ] ) assess the quality of lazy flipper approximations , their convergence as well as the dependence of the runtime of the algorithm on the size of the model and the search depth .",
    "the results are put into perspective by a comparison with iterated conditional modes ( icm ) @xcite , belief propagation ( bp ) @xcite , tree - reweighted bp @xcite and a dual decomposition ansatz using sub - gradient descent methods @xcite .",
    "the lazy flipper is related in at least four ways to existing work .",
    "first of all , it generalizes iterated conditional modes ( icm ) for binary variables @xcite .",
    "while icm leaves all variables except one fixed in each step , the lazy flipper can optimize over larger ( for small models : all ) connected subgraphs of a graphical model .",
    "furthermore , it extends block - icm @xcite that optimizes over specific subsets of variables in grid graphs to irregular and higher - order graphical models .",
    "naive attempts to generalize icm and block - icm to optimize over subgraphs of size @xmath0 would consider all sequences of @xmath0 connected variables and ignore the fact that many of these sequences represent the same set .",
    "this causes substantial problems because the redundancy is large , as we show in section  [ section : data - structures ] .",
    "the lazy flipper avoids this redundancy , at the cost of storing one unique representative for each subset .",
    "compared to randomized algorithms that sample from the set of subgraphs @xcite , this is a memory intensive approach .",
    "up to 8  gb of ram are required for the optimizations shown in section  [ section : experiments ] . now that servers with much larger ram are available , it has become a practical option .",
    "second , the lazy flipper is a deterministic alternative to the randomized search for tighter bounds proposed and analyzed in 2009 by jung et al .",
    "exactly as in @xcite , sets of variables that are connected via potentials in the graphical model are considered and variables flipped if these flips lead to a smaller upper bound on the sum of potentials .",
    "in contrast to @xcite , unique representatives of these sets are visited in a deterministic order .",
    "both algorithms maintain a current best assignment of values to the variables and are thus related with the swendsen - wang algorithm @xcite and wolff algorithm @xcite .",
    "third , lazy flipping with a limited search depth as a means of approximate optimization competes with message passing algorithms @xcite and with algorithms based on convex programming relaxations of the optimization problem @xcite , in particular with tree - reweighted belief propagation ( trbp ) @xcite and sub - gradient descent @xcite .",
    "fourth , the lazy flipper guarantees that the best approximation found with a search depth @xmath1 is optimal within a hamming distance @xmath1 . a similar guarantee known as the single loop tree ( slt ) neighborhood @xcite",
    "is given by bp in case of convergence .",
    "the slt condition states that in any alteration of an assignment of values to the variables that leads to a lower energy , the altered variables form a subgraph in the graphical model that has at least two loops .",
    "the fact that hamming optimality and slt optimality differ can be exploited in practice .",
    "we show in one experiment in section  [ section : experiments ] that bp approximations can be further improved by means of lazy flipping .",
    "two special data structures are crucial to the lazy flipper .",
    "the first data structure that we call a _ connected subgraph tree ( cs - tree ) _ ensures that only _ connected _ subsets of variables are considered , i.e.  sets of variables which are connected via potentials in the graphical model .",
    "moreover , it ensures that every such subset is represented precisely once ( and not repeatedly ) by an ordered sequence of its variables , cf .",
    "the rationale behind this concept is the following : if the flip of one variable and the flip of another variable not connected to the first one do not reduce the energy then it is pointless to try a simultaneous flip of both variables because the ( energy increasing ) contributions from both flips would sum up .",
    "furthermore , if the flip of a disconnected set of variables reduces the energy then the same and possibly better reductions can be obtained by flipping connected subsets of this set consecutively , in any order .",
    "all disconnected subsets of variables can therefore be excluded from the search if the connected subsets are searched ordered by their size .",
    "finding a unique representative for each connected subset of variables is important .",
    "the alternative would be to consider all sequences of pairwise distinct variables in which each variable is connected to at least one of its predecessors and to ignore the fact that many of these sequences represent the same set .",
    "sampling algorithms that select and grow connected subsets in a randomized fashion do exactly this .",
    "however , the redundancy is large . as an example , consider a connected subset of six variables of a 2-dimensional grid graph as depicted in fig .",
    "[ figure : cs - tree]a .",
    "although there is only one connected set that contains all six variables , @xmath2 out of the @xmath3 possible sequences of these variables meet the requirement that each variable is connected to at least one of its predecessors .",
    "this 208-fold redundancy hampers the exploration of the search space by means of randomized algorithms ; it is avoided in lazy flipping at the cost of storing one unique representative for every connected subgraph in the cs - tree .",
    "the second data structure is a _ tag list _ that prevents the repeated assessment of unsuccessful flips .",
    "the idea is the following : if some variables have been flipped in one iteration ( and the current best configuration has been updated accordingly ) , it suffices to revisit only those sets of variables that are connected to at least one variable that has been flipped .",
    "all other sets of variables are excluded from the search because the potentials that depend on these variables are unaffected by the flip and have been assessed in their current state before .",
    "the tag list and the connected subgraph tree are essential to the lazy flipper and are described in the following sections , [ section : cs - tree ] and [ section : tag - lists ] . for a quick overview",
    ", the reader can however skip these sections , take for granted that it is possible to efficiently enumerate all connected subgraphs of a graphical model , ordered by their size , and refer directly to the main algorithm ( section [ section : algorithm ] and alg .",
    "[ algorithm : lazy - flipper ] ) .",
    "all non - trivial sub - functions used in the main algorithm are related to tag lists and the cs - tree and are described in detail now .",
    "subsets of variables in total in this example , only 40 of these subsets are connected . ]",
    "the cs - tree represents subsets of connected variables uniquely .",
    "every node in the cs - tree except the special root node is labeled with the integer index of one variable in the graphical model .",
    "the same variable index is assigned to several nodes in the cs - tree unless the graphical model is completely disconnected .",
    "the cs - tree is constructed such that every connected subset of variables in the graphical model corresponds to precisely one path in the cs - tree from a node to the root node , the node labels along the path indicating precisely the variables in the subset , and vice versa , there exists precisely one connected subset of variables in the graphical model for each path in the cs - tree from a node to the root node .    in order to guarantee by construction of the cs - tree that each subset of connected variables is represented precisely once ,",
    "the variable indices of each subset are put in a special order , namely the lexicographically smallest order in which each variable is connected to at least one of its predecessors .",
    "the following definition of these sequences of variable indices is recursive and therefore motivates an algorithm for the construction of the cs - tree for the lazy flipper . a small grid model and its complete cs - tree are depicted in fig .",
    "[ figure : cs - tree ] .",
    "[ definition : subset - representing - sequence ] given an undirected graph @xmath4 whose @xmath5 vertices @xmath6 are integer indices , every sequence that consists of only one index is called _ connected subset representing ( csr)_. given @xmath7 and a csr - sequence @xmath8 , a sequence @xmath9 of @xmath10 indices is called a _ csr - sequence _ precisely if the following conditions hold :    \\(i ) @xmath11 is not among its predecessors , i.e.  @xmath12 .",
    "\\(ii ) @xmath11 is connected to at least one of its predecessors , i.e.  @xmath13 .",
    "\\(iii ) @xmath14 .",
    "\\(iv ) if @xmath15 and @xmath11 could have been added at an earlier position @xmath16 to the sequence , fulfilling ( i)(iii ) , all subsequent vertices @xmath17 are smaller than @xmath11 , i.e. @xmath18    based on this definition , three functions are sufficient to recursively build the cs - tree @xmath19 of a graphical model @xmath20 , starting from the root node .",
    "the function @xmath21 = _",
    "growsubset_(@xmath22 ) appends to a node @xmath23 in the cs - tree the smallest variable index that is not yet among the children of @xmath23 and fulfills ( i)(iv ) for the csr - sequence of variable indices on the path from @xmath23 to the root node .",
    "it returns the appended node or the empty set if no suitable variable index exists .",
    "the function @xmath21 = _",
    "firstsubsetofsize_(@xmath24 ) traverses the cs - tree on the current deepest level @xmath25 , calling the function _ growsubset _ for each leaf until a node can be appended and thus , the first subset of size @xmath26 has been found .",
    "finally , the function @xmath21 = _",
    "nextsubsetofsamesize_(@xmath22 ) starts from a node @xmath23 , finds its parent and traverses from there in level order , calling _ growsubset _ for each node to find the length - lexicographic successor of the csr - sequence associated with the node @xmath23 , i.e.  the representative of the next subset of the same size .",
    "these functions are used by the lazy flipper ( alg .",
    "[ algorithm : lazy - flipper ] ) to _ construct _ the cs - tree .",
    "in contrast , the _ traversal _ of already constructed parts of the cs - tree ( when revisiting subsets of variables after successful flips ) is performed by functions associated with tag lists which are defined the following section .",
    "tag lists are used to tag variables that are affected by flips .",
    "a variable is affected by a flip either because it has been flipped itself or because it is connected ( via a potential ) to a flipped variable .",
    "the tag list data structure comprises a boolean vector in which each entry corresponds to a variable , indicating whether or not this variable is affected by recent flips . as the total number of variables can be large ( @xmath27 is not exceptional ) and possibly only a few variables are affected by flips , a list of all affected variables",
    "is maintained in addition to the vector .",
    "this list allows the algorithm to untag all tagged variables without re - initializing the entire boolean vector .",
    "the two fundamental operations on a tag list @xmath28 are _ _ tag__@xmath29 which tags the variable with the index @xmath30 , and _ _ untagall__@xmath31 .    for the lazy flipper ,",
    "three special functions are used in addition : given a tag list @xmath28 , a ( possibly incomplete ) cs - tree @xmath19 , the graphical model @xmath20 , and a node @xmath32 , @xmath33 tags all variables on the path from @xmath34 to the root node in @xmath19 , as well as all nodes that are connected ( via a potential in @xmath20 ) to at least one of these nodes .",
    "the function @xmath35 traverses the first level of @xmath19 and returns the first node @xmath34 whose variable is tagged ( or the empty set if all variables are untagged ) .",
    "finally , the function @xmath36 traverses @xmath19 in level order , starting with the successor of @xmath34 , and returns the first node @xmath37 for which the path to the root contains at least one tagged variable .",
    "these functions , together with those of the cs - tree , are sufficient for the lazy flipper , alg .",
    "[ algorithm : lazy - flipper ] .",
    "in the main loop of the lazy flipper ( lines 226 in alg .  [ algorithm : lazy - flipper ] ) , the size @xmath26 of subsets is incremented until the limit @xmath1 is reached ( line 24 ) . inside this main loop , the algorithm falls into two parts , the _ exploration part _ ( lines 311 ) and the _ revisiting part _ ( lines 1223 ) . in the exploration part , flips of previously unseen subsets of @xmath26 variables are assessed .",
    "the current best configuration @xmath38 is updated in a greedy fashion , i.e.  whenever a flip yields a lower energy . at the same time , the cs - tree is grown , using the functions defined in section [ section : cs - tree ] . in the revisiting part , all subsets of sizes @xmath39 through @xmath26 that are affected by recent flips are assessed iteratively until no flip of any of these subsets reduces the energy ( line 14 ) .",
    "the indices of affected variables are stored in the tag lists @xmath40 and @xmath41 ( cf .",
    "section [ section : tag - lists ] ) . in practice",
    ", the lazy flipper can be stopped at any point , e.g.  when a time limit is exceeded , and the current best configuration @xmath38 taken as the output .",
    "it eventually reaches configurations for which it is guaranteed that no flip of @xmath26 or less variables can yield a lower energy because all such flips that could potentially lower the energy have been assessed ( line 14 ) .",
    "such configurations are therefore guaranteed to be optimal within a hamming radius of @xmath26 :    given a function @xmath42 , a configuration @xmath43 , and @xmath7 , @xmath44 is called a",
    "_ _ hamming-__@xmath26 _ upper bound _ on the minimum of @xmath45 precisely if @xmath46 .",
    "@xmath47 ; cs - tree @xmath48root@xmath49 ; taglist @xmath50 , @xmath51",
    "for a comparative assessment of the lazy flipper , four optimization problems of different complexity are considered , two simulated problems and two problems based on real - world data . for the sake of reproducibility",
    ", the simulations are described in detail and the models constructed from real data are available from the authors as supplementary material .    the first problem is a ferromagnetic ising model that is widely used in computer vision for foreground vs.  background segmentation @xcite .",
    "energy functions of this model consist of first and second order potentials that are submodular .",
    "the global minimum can therefore be found via a graph cut .",
    "we simulate random instances of this model in order to measure how the runtime of lazy flipping depends on the size of the model and the coupling strength , and to compare lazy flipper approximations to the global optimum ( section  [ section : ising - model ] ) .",
    "the second problem is a problem of finding optimal subgraphs on a grid .",
    "energy functions of this model consist of first and fourth order potentials , of which the latter are not permutation submodular .",
    "we simulate difficult instances of this problem that can not be solved to optimality , even when allowing several days of runtime . in this",
    "challenging setting , lazy flipper approximations and their convergence are compared to those of bp , trbp and dd as well as to the lower bounds on local polytope relaxations obtained by dd ( section  [ section : optimal - subgraph - model ] ) .",
    "the third problem is a graphical model for removing excessive boundaries from image over - segmentations that is related to the model proposed in @xcite .",
    "energy functions of this model consist of first , third and fourth order potentials .",
    "in contrast to the grid graphs of the ising model and the optimal subgraph model , the corresponding factor graphs are irregular but still planar .",
    "the higher - order potentials are not permutation submodular but the global optimum can be found by means of milp in approximately 10 seconds per model using one of the fastest commercial solvers ( ibm ilog cplex , version  12.1 ) .",
    "since cplex is closed - source software , the algorithm is not known in detail and we use it as a black box . the general method used by cplex for milp is a branch - and - bound algorithm @xcite .",
    "100 instances of this model obtained from the 100 natural test images of the berkeley segmentation database ( bsd ) @xcite are used to compare the lazy flipper to algorithms based on message passing and linear programming in a real - world setting where the global optimum is accessible ( section  [ section:2d - segmentation - model ] ) .",
    "the fourth problem is identical to the third , except that instances are obtained from 3-dimensional volume images of neural tissue acquired by means of serial block face scanning electron microscopy ( sbfsem ) @xcite . unlike in the 2-dimensional case , the factor graphs are no longer planar . whether exact optimization by means of milp is practical",
    "depends on the size of the model . in practice ,",
    "sbfsem datasets consist of more than 2000@xmath52 voxels . to be able to compare approximations to the _ global _ optimum , we consider 16 models obtained from 16 sbfsem volume sub - images of only 150@xmath52 voxels for which the global optimum can be found by means of milp within a few minutes ( section  [ section:3d - segmentation - model ] ) .",
    "the ferromagnetic ising model consists of @xmath5 binary variables @xmath53 that are associated with points on a 2-dimensional square grid and connected via second order potentials @xmath54 ( @xmath55 : kronecker delta ) to their nearest neighbors .",
    "first order potentials @xmath56 relate the variables to observed evidence in underlying data .",
    "the total energy of this model is the following sum in which @xmath57 is a weight on the second order potentials , and @xmath58 indicates that the variables @xmath59 and @xmath60 are adjacent on the grid : @xmath61 for each @xmath62 , an ensemble of ten simulated ising models of @xmath63 variables is considered .",
    "the first order potentials @xmath64 are initialized randomly by drawing @xmath65 uniformly from the interval @xmath66 $ ] and setting @xmath67 .",
    "the exact global minimum of the total energy is found via a graph cut .    for each model ,",
    "the lazy flipper is initialized with a configuration that minimizes the sum of the first order potentials .",
    "upper bounds on the minimum energy found by means of lazy flipping converge towards the global optimum as depicted in fig .",
    "[ figure : ising - results ] .",
    "color scales and gray scales in this figure respectively indicate the maximum size and the total number of distinct subsets that have been searched , averaged over all models in the ensemble . it can be seen from this figure that upper bounds on the minimum energy are tightened significantly by searching larger subsets of variables , independent of the coupling strength @xmath68 .",
    "it takes the lazy flipper less than 100  seconds ( on a single cpu of an intel quad xeon e7220 at 2.93ghz ) to exhaustively search all connected subsets of 6  variables .",
    "the amount of ram required for the cs - tree ( in bytes ) is 24  times as high as the number of subsets ( approximately 50  mb in this case ) because each subset is stored in the cs - tree as a node consisting of three 64-bit integers : a variable index , the index of the parent node and the index of the level order successor ( section  [ section : cs - tree ] ) .    for @xmath69 ,",
    "configurations corresponding to the upper bounds on the minimum energy are depicted in fig .",
    "[ figure : ising - states ] . it can be seen from this figure that all connected subsets of falsely set variables are larger than @xmath1 . for a fixed maximum subgraph size @xmath1 ,",
    "the runtime of lazy flipping scales approximately linearly with the number of variables in the ising model ( cf .",
    "fig.[figure : runtime - scaling ] ) .    ) . compared to optimization by icm where only one variable is flipped at a time",
    ", the lazy flipper finds significantly tighter bounds by flipping also larger subsets .",
    "the deviations increase with the coupling strength @xmath68 .",
    "color scales and gray scales indicate the size and the total number of searched subsets.,title=\"fig:\",scaledwidth=49.0% ] ) . compared to optimization by icm where only one variable is flipped at a time",
    ", the lazy flipper finds significantly tighter bounds by flipping also larger subsets .",
    "the deviations increase with the coupling strength @xmath68 .",
    "color scales and gray scales indicate the size and the total number of searched subsets.,title=\"fig:\",scaledwidth=49.0% ] + ) . compared to optimization by icm where only one variable is flipped at a time",
    ", the lazy flipper finds significantly tighter bounds by flipping also larger subsets .",
    "the deviations increase with the coupling strength @xmath68 .",
    "color scales and gray scales indicate the size and the total number of searched subsets.,title=\"fig:\",scaledwidth=49.0% ] ) . compared to optimization by icm where only one variable is flipped at a time ,",
    "the lazy flipper finds significantly tighter bounds by flipping also larger subsets .",
    "the deviations increase with the coupling strength @xmath68 .",
    "color scales and gray scales indicate the size and the total number of searched subsets.,title=\"fig:\",scaledwidth=49.0% ] + ) . compared to optimization by icm where only one variable is flipped at a time",
    ", the lazy flipper finds significantly tighter bounds by flipping also larger subsets .",
    "the deviations increase with the coupling strength @xmath68 .",
    "color scales and gray scales indicate the size and the total number of searched subsets.,title=\"fig:\",scaledwidth=49.0% ] ) . compared to optimization by icm where only one variable is flipped at a time",
    ", the lazy flipper finds significantly tighter bounds by flipping also larger subsets .",
    "the deviations increase with the coupling strength @xmath68 .",
    "color scales and gray scales indicate the size and the total number of searched subsets.,title=\"fig:\",scaledwidth=45.0% ]    [ cols=\"^,^,^,^,^,^ \" , ]     s , @xmath70 subsets are stored in the cs - tree .",
    "dashed lines in the first plot show the result obtained when initializing the lazy flipper with the bp approximation at @xmath71s .",
    "this reduces the deviation from the global optimum at @xmath72  s from 0.4% on average over all models to 0.1%.,height=181 ]",
    "the optimum of a function of binary variables that decomposes according to a graphical model can be found by an exhaustive search over only the connected subgraphs of the model .",
    "we implemented this search , using a cs - tree to efficiently and uniquely enumerate the subgraphs .",
    "the c++ source code is available from http://hci.iwr.uni-heidelberg.de/software.php .",
    "our algorithm is guaranteed to converge to a global minimum when searching through all subgraphs which is typically intractable . with limited runtime",
    ", approximations can be found by restricting the search to subgraphs of a given maximum size .",
    "simulated and real - world problems exist for which these approximations compare favorably to those obtained by message passing and sub - gradient descent . for large scale problems ,",
    "the applicability of the lazy flipper is limited by the memory required for the cs - tree . however , for regular graphs , this limit can be overcome by an implicit representation of the cs - tree that is subject of future research .",
    "acknowledgement pending approval by the acknowledged individuals .",
    "in all experiments , the damping parameters for bp and trbp are chosen optimally from the set @xmath73 .",
    "the step size of the sub - gradient descent is chosen according to @xmath74 where @xmath75 and @xmath68 is chosen optimally from @xmath76 .",
    "the sequence of step sizes , in particular the function ( [ eq : step - size - sequence ] ) and @xmath77 could be tuned further . moreover , @xcite consider the primal - dual gap and @xcite smooth the sub - gradient over iterations in order to suppress oscillations .",
    "these measures can have substantial impact on the convergence .",
    "the upper bounds obtained by bp , trbp and dd do not decrease monotonously .",
    "after each iteration of these algorithms , we therefore consider the elapsed runtime and the current best bound , i.e.  the best bound of the current and all preceding iterations .",
    "all five algorithms are implemented in c++ , using the same optimized data structures for the graphical model and a visitor design pattern that allows us to measure runtime without significantly affecting performance .",
    "the same decomposition of each graphical model into tree models is used for trbp and dd .",
    "tree models are constructed in a greedy fashion , each comprising as many potential functions as possible .",
    "the procedure is generally applicable to irregular models with higher - order potentials : initially , all potentials of the graphical model are put on a _ white list _ that contains those potentials that have not been added to any tree model . a _ black list _ of already added potentials and a _ gray list _ of recently added potentials are initially empty . as long as there are potentials on the white list ,",
    "new tree models are constructed . for each newly constructed tree model ,",
    "the procedure iterates over the white list , adding potentials to the tree model if they do not introduce loops .",
    "added potentials are moved from the white list to the gray list . after all potentials from the white list have been processed ,",
    "potentials from the black list that do not introduce loops are added to the tree model .",
    "the gray list is then appended to the black list and cleared .",
    "the procedure finishes when the white list is empty .",
    "as recently shown in @xcite , decompositions into cyclic subproblems can lead to significantly tighter relaxations and better integer solutions .",
    "jung , k. , kohli , p. , shah , d. : local rules for global map : when do they work ? in bengio , y. , schuurmans , d. , lafferty , j. , williams , c.k.i . ,",
    "culotta , a. , eds . : advances in neural information processing systems 22 .",
    "( 2009 ) 871879            globerson , a. , jaakkola , t. : fixing max - product : convergent message passing algorithms for map lp - relaxations . in : advances in neural information processing systems ,",
    "cambridge , ma , usa , mit press ( 2007 ) 553560              moerkotte , g. , neumann , t. : analysis of two existing and one new dynamic programming algorithm for the generation of optimal bushy join trees without cross products . in : proceedings of the 32nd international conference on very large data bases .",
    "( 2006 )          martin , d. , fowlkes , c. , tal , d. , malik , j. : a database of human segmented natural images and its application to evaluating segmentation algorithms and measuring ecological statistics . in : proceedings of the 8th international conference on computer vision ( iccv ) .",
    "volume  2 .",
    "( 2001 ) 416423"
  ],
  "abstract_text": [
    "<S> this article presents a new search algorithm for the np - hard problem of optimizing functions of binary variables that decompose according to a graphical model . </S>",
    "<S> it can be applied to models of any order and structure . </S>",
    "<S> the main novelty is a technique to constrain the search space based on the topology of the model . </S>",
    "<S> when pursued to the full search depth , the algorithm is guaranteed to converge to a global optimum , passing through a series of monotonously improving local optima that are guaranteed to be optimal within a given and increasing hamming distance . for a search depth of 1 </S>",
    "<S> , it specializes to iterated conditional modes . between these extremes , a useful tradeoff between approximation quality and runtime is established . </S>",
    "<S> experiments on models derived from both illustrative and real problems show that approximations found with limited search depth match or improve those obtained by state - of - the - art methods based on message passing and linear programming . </S>"
  ]
}