{
  "article_text": [
    "answer set programming ( asp )  @xcite is a declarative programming paradigm which has been proposed in the area of non - monotonic reasoning and logic programming .",
    "the idea of asp is to represent a given computational problem by a logic program whose answer sets correspond to solutions , and then use a solver to find them .    despite the intrinsic complexity of the evaluation of asp , after twenty years of research many efficient asp systems have been developed .",
    "( e.g.  @xcite ) .",
    "the availability of robust implementations made asp a powerful tool for developing advanced applications in the areas of artificial intelligence , information integration , and knowledge management .",
    "these applications of asp have confirmed the viability of the use of asp .",
    "nonetheless , the interest in developing more effective and faster systems is still a crucial and challenging research topic , as witnessed by the results of the asp competition series ( see e.g.  @xcite ) .",
    "this paper reports on the recent improvements of the asp solver for propositional programs wasp  @xcite .",
    "the new version of wasp is inspired by several techniques that were originally introduced for sat solving , like the davis - putnam - logemann - loveland ( dpll ) backtracking search algorithm  @xcite , _ clause learning _",
    "@xcite , _ backjumping _",
    "@xcite , _ restarts _  @xcite , and _ conflict - driven heuristics _  @xcite .",
    "the mentioned sat - solving methods have been adapted and combined with state - of - the - art pruning techniques adopted by modern native asp solvers  @xcite .",
    "in particular , the role of boolean constraint propagation in sat - solvers is taken by a procedure combining the _ unit propagation _ inference rule with inference techniques based on asp program properties .",
    "in particular , support inferences are implemented via clark s completion , and the implementation of the well - founded operator is based on source pointers  @xcite .",
    "in the following , we overview the techniques implemented by the 2.0 version of wasp , focusing on the improvements to the core evaluation algorithms working on normal programs .",
    "then we compare the new implementation with the previous one .",
    "we also report on a preliminary experiment in which we compare the old and new versions of wasp with the latest version of clasp , which is the solver that won the 3rd and 4th edition of the asp competition .",
    "benchmarks were taken from the 3rd asp competition and belong to the np class , i.e. , the class of problems where the previous version of wasp was often not competitive with alternative solutions .",
    "the result show that wasp 2.0is substantially faster than wasp 1.0and is often competitive with clasp .",
    "let @xmath0 be a countable set of propositional atoms .",
    "literal _ is either an atom ( a positive literal ) , or an atom preceded by the _ negation as failure _ symbol @xmath1 ( a negative literal ) .",
    "the complement of a literal @xmath2 is denoted @xmath3 , i.e. , @xmath4 and @xmath5 for an atom @xmath6 .",
    "this notation extends to sets of literals , i.e. , @xmath7 for a set of literals @xmath8 .",
    "a _ program _ is a finite set of rules of the following form : @xmath9 where @xmath10 and each @xmath11 ( @xmath12 ) is an atom .",
    "the atom @xmath13 is called head , and the conjunction @xmath14 is referred to as body .",
    "rule @xmath15 is said to be regular if @xmath16 , where @xmath17 is a fixed atom in @xmath0 , and a constraint otherwise . for a rule @xmath15 of the form ( [ eq : rule ] ) , the following notation is also used : @xmath18 denotes the head atom @xmath13 ; @xmath19 denotes the set @xmath20 of body literals ; @xmath21 and @xmath22 denote the set of atoms appearing in positive and negative body literals , respectively ; @xmath23 is the clause representation of @xmath15 .    an _ interpretation _",
    "@xmath24 is a set of literals , i.e. , @xmath25 .",
    "intuitively , literals in @xmath24 are true , literals whose complements are in @xmath24 are false , and all other literals are undefined .",
    "@xmath24 is total if there are no undefined literals , and @xmath24 is inconsistent if @xmath26 or there is @xmath27 such that @xmath28 .",
    "an interpretation @xmath24 satisfies a rule @xmath15 if @xmath29 , while @xmath24 violates @xmath15 if @xmath30 .",
    "a _ model _ of a program @xmath31 is a consistent , total interpretation satisfying all rules of @xmath31 .",
    "the semantics of a program @xmath31 is given by the set of its _ answer sets _ ( or stable models ) @xcite , where an interpretation @xmath24 is an answer set for @xmath31 if @xmath24 is a subset - minimal model of the reduct @xmath32 obtained by deleting from @xmath31 each rule @xmath33 such that @xmath34 , and then by removing all the negative literals from the remaining rules .",
    "in this section we review the algorithms implemented in wasp 2.0 .",
    "the presentation is properly simplified to focus on the main principles .      the first step of the evaluation in wasp 2.0is a program transformation step .",
    "the input program first undergoes a clark s completion transformation step , and then is simplified applying techniques in the style of satelite @xcite . given a rule @xmath35 , let @xmath36 denote a fresh atom , i.e. , an atom not appearing elsewhere .",
    "the completion of @xmath31 , denoted @xmath37 , consists of the following clauses :    * @xmath38 for each atom @xmath6 occurring in @xmath31 , where @xmath39 are the rules of @xmath31 whose head is @xmath6 ; * @xmath40 and @xmath41 for each rule @xmath35 ; * @xmath42 } for each @xmath35 and @xmath43 .",
    "after the computation of clark s completion , _ simplification _ techniques are applied @xcite .",
    "these consist of polynomial algorithms for strengthening and for removing redundant clauses , and also include atoms elimination by means of clause rewriting .",
    "an answer set of a given propositional program @xmath37 is computed in wasp 2.0by using algorithm  [ alg : mg ] , which is similar to the dpll procedure in sat solvers .",
    "initially , interpretation @xmath24 is set to @xmath44 .",
    "function propagate ( line  [ ln : alg : propagate ] ) extends @xmath24 with those literals that can be deterministically inferred .",
    "this function returns false if an inconsistency ( or conflict ) is detected , true otherwise . when no inconsistency is detected , interpretation @xmath24 is returned if total ( lines  23 )",
    "otherwise , an undefined literal , say @xmath2 , is chosen according to some heuristic criterion ( line  5 ) .",
    "then computation then proceeds with a recursive call to computeanswerset on @xmath45 ( line  [ ln : alg : recursive ] ) . in case",
    "the recursive call returns an answer set , the computation ends returning it ( lines  [ ln : alg : isas][ln : alg : returnas ] ) . otherwise , the algorithm unrolls choices until consistency of @xmath24 is restored ( backjumping ; lines  [ ln : alg : isinco][ln : alg : returninco ] ) , and the computation resumes by propagating the consequences of the clause learned by the conflict analysis .",
    "conflicts detected during propagation are analyzed by procedure _",
    "analyzeconflictandlearnclauses _ ( line  [ ln : alg : analyze ] ) .",
    "the main algorithm is usually complemented with some heuristic techniques that control the number of learned clauses ( which may be exponential in number ) , and possibly restart the computation to explore different branches of the search tree . moreover ,",
    "a crucial role is played by the heuristic criteria used for selecting branching literals .",
    "wasp 2.0adopts the same branching and deletion heuristics of the sat solver minisat  @xcite .",
    "the restart policy is based on the sequence of thresholds introduced in @xcite .",
    "propagation and clause learning are described in more detail in the following .",
    "[ [ sec : propagation ] ] propagation .",
    "+ + + + + + + + + + + +    wasp 2.0implements two deterministic inference rules for pruning the search space during answer set computation .",
    "these propagation rules are named _",
    "unit _ and _ well - founded_. unit propagation is applied first ( line  1 of function propagate ) .",
    "it returns false if an inconsistency arises .",
    "otherwise , well - founded propagation is applied ( line  2 ) .",
    "function wellfoundedpropagation may learn an implicit clause in @xmath46 , in which case true is returned and unit propagation is applied on the new clause .",
    "when no new clause can be learned by wellfoundedpropagation , function propagate returns true to report that no inconsistency has been detected .",
    "more in details , unit propagation is as in sat solvers : an undefined literal @xmath2 is inferred by unit propagation if there is a rule @xmath15 that can be satisfied only by @xmath2 , i.e. , @xmath15 is such that @xmath47 and @xmath48 . concerning well - founded propagation , we must first introduce the notion of unfounded set .",
    "a set @xmath49 of atoms is _ unfounded _ if for each rule @xmath15 such that @xmath50 , at least one of the following conditions is satisfied : ( i ) @xmath51 ; ( ii ) @xmath52 ; ( iii ) @xmath53 .",
    "intuitively , atoms in @xmath49 can have support only by themselves .",
    "when an unfounded set @xmath49 is found , function wellfoundedpropagation learns a clause forcing falsity of an atom in @xmath49 .",
    "clauses for other atoms in @xmath49 will be learned on subsequent calls to the function , unless an inconsistency arises during unit propagation . in case of inconsistencies , indeed , the unfounded set @xmath49 is recomputed .",
    "[ [ sec : learning ] ] conflict analysis and learning .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    clause learning acquires information from conflicts in order to avoid exploring the same search branch several times .",
    "wasp 2.0adopts a learning schema based on the concept of the first unique implication point ( uip ) @xcite , which is computed by analyzing the so - called implication graph .",
    "roughly , the implication graph contains a node for each literal in @xmath24 , and arcs from @xmath54 to @xmath55 ( @xmath56 ; @xmath57 ) if literal @xmath55 is inferred by unit propagation on clause @xmath58 .",
    "each literal @xmath59 is associated with a _ decision level _ , corresponding to the depth nesting level of the recursive call to computeanswerset on which @xmath2 is added to @xmath24 .",
    "a node @xmath60 in the implication graph is a uip for a decision level @xmath61 if all paths from the choice of level @xmath61 to the conflict literals pass through @xmath60 .",
    "the first uip is the uip for the decision level of the conflict that is closest to the conflict .",
    "the learning schema is as follows : let @xmath62 be the first uip .",
    "let @xmath8 be the set of literals different form @xmath62 occurring in a path from @xmath62 to the conflict literals .",
    "the learned clause comprises @xmath62 and each literal @xmath2 such that the decision level of @xmath2 is lower than the one of @xmath62 and there is an arc @xmath63 in the implication graph for some @xmath64 .      in this section",
    "we compare wasp 2.0to wasp 1.0 .",
    "first of all we observe that wasp 1.0does not implement any program transformation phase , whereas wasp 2.0applies both clark s completion and program simplification in the style of  @xcite .",
    "the addition of this preprocessing step brings advantages in both terms of simplifying the implementation of the propagation procedure and in terms performance .",
    "the clark s completion introduces a number of clauses that represent support propagation , which is implemented natively in wasp 1.0instead .",
    "the subsequent program simplification step optimizes the program by eliminating redundant atoms ( also introduced by the completion ) and shrinking definitions .",
    "this results in a program that is usually easier to evaluate . concerning the well - founded operator both wasp 2.0and wasp 1.0compute unfounded sets according to the _ source pointers _",
    "@xcite technique .",
    "wasp 1.0 , which implements a native inference rule , immediately infers unfounded atoms as false , and updates a special implementation of the implication graph .",
    "in contrast , wasp 2.0 learns a clause representing the inference ( also called loop formula ) and propagates it with unit propagation .",
    "this choice combined with clark s completion allows to simplify conflict analysis , learning and backjumping . indeed , wasp 1.0implements specialized variants of these procedures that require the usage of complex data structures that are difficult to optimize .",
    "since in wasp 2.0literals are always inferred by the unitpropagation procedure , we could adopt an implementation of these strategies optimized as in modern sat solvers .",
    "finally both wasp 2.0and wasp 1.0implement conflict - driven branching heuristics .",
    "wasp 2.0uses a branching heuristic inspired to the one of minisat , while wasp 1.0uses an extension of the berkmin  @xcite heuristics extended by adding a look - ahead technique and an additional asp - specific criterion .",
    "[ cols= \" < , > , > , > , > , > , > , > , > , > , > , > \" , ]     in this section we report the results of an experiment assessing the performance of wasp 2.0 . in particular , we compare wasp 2.0with wasp 1.0and clasp .",
    "all the solvers used gringo 3.0.5 @xcite as grounder .",
    "claspand wasp 1.0has been executed with the same heuristic setting used in @xcite .",
    "concerning claspwe used the version 3.0.1 .",
    "the experiment was run on a mac pro equipped with two 3 ghz intel xeon x5365 ( quad core ) processors , with 4 mb of l2 cache and 16 gb of ram , running debian linux 7.3 ( kernel ver . 3.2.0 - 4-amd64 ) .",
    "binaries were generated with the gnu c++ compiler 4.7.3 - 4 shipped by debian .",
    "time limit was set to 600 seconds .",
    "performance was measured using the tools pyrunlim and pyrunner ( _ https://github.com/alviano/python_ ) .",
    "tested instances are among those in the system track of the 3rd asp competition  @xcite , in particular all instances in the np category .",
    "this category includes planning domains , temporal and spatial scheduling problems , combinatorial puzzles , graph problems , and a number of real - world domains in which asp has been applied .",
    "( see @xcite for an exhaustive description of the benchmarks . )",
    "table  [ tab : competition ] summarizes the number of solved instances and the average running times in seconds for each solver .",
    "in particular , the first two columns report the total number of instances ( # ) and the number of instances that are solved by all solvers ( # @xmath65 ) , respectively ; the remaining columns report the number of solved instances within the time - out ( sol . ) , and the running times averaged both over solved instances ( @xmath66 ) and over instances solved by all variants ( @xmath67 ) .",
    "we observe that wasp 2.0outperforms wasp 1.0 .",
    "in fact , wasp 2.0solved 17 instances more than wasp 1.0 , and also the improvement on the average execution time is sensible , with a percentage gain of around 64% on instances solved by all systems . on the other hand , claspis",
    "faster than wasp 2.0 , with a percentage gain of around 41 % on the same instances .",
    "moreover , claspsolved 4 instances more than wasp 2.0 .    analyzing the results in more detail ,",
    "there are some specific benchmarks where wasp 2.0and claspexhibit significantly performances .",
    "two of these problems are sokobandecision and weightassignmenttree , where claspsolved 3 and 2 instances more than wasp 2.0 , respectively , while wasp 2.0solved 2 instances more than claspin solitaire .",
    "we also note that the performance of wasp deteriored in disjunctivescheduling .",
    "this is due to the initial steps of the computation , and in particular to the simplification procedure , which in this case removes 80% of clauses and 99% of atoms .",
    "however , there are cases in which simplifications play a crucial role to improve performance of the answer set search procedure . for example , in hanoitower , where wasp 2.0performs better than other systems , more than half of the variables are removed in a few seconds .",
    "wasp 1.0is inspired by several techniques used in sat solving that were first introduced for constraint satisfaction and qbf solving .    some of these techniques were already adapted in non - disjunctive asp solvers like smodels@xmath68  @xcite , clasp  @xcite , smodels  @xcite , cmodels3  @xcite , and  @xcite .",
    "more in detail , wasp 2.0differs from cmodels3  @xcite that are based on a rewriting into a propositional formula and an external sat solver .",
    "wasp 2.0differs from  @xcite and the smodels variants , which features a native implementation of all inference rules .",
    "our new solver is more similar to clasp , but there are differences concerning the restart policy , constraint deletion and branching heuristics .",
    "wasp 2.0adopts as default a policy based on the sequence of thresholds introduced in @xcite , whereas claspemploys by default a different policy based on geometric series .",
    "concerning deletion of learned constraints , wasp 2.0adopts a criterion inspired by minisat , while claspimplements a technique introduced in glucose @xcite .",
    "moreover , claspadopts a branching heuristic based on berkmin  @xcite with a variant of the moms criterion which estimates the effect of the candidate literals in short clauses .",
    "in this paper we reported on the recent improvement of the asp solver wasp 1.0 .",
    "we described the main improvements on the evaluation procedure focusing on the improvements to the core evaluation algorithms working on normal programs .",
    "the new solver was compared with both its predecessor and the latest version of clasp on on benchmarks belonging to the np class , where wasp 1.0was not competitive .",
    "the result is very encouraging , since wasp 2.0improves substantially w.r.t .",
    "wasp 1.0and is often competitive with clasp .",
    "alviano , m. ; faber , w. ; leone , n. ; perri , s. ; pfeifer , g. ; and terracina , g. 2011 . the disjunctive datalog system dlv . in gottlob ,",
    ", _ datalog 2.0 _ , volume 6702 .",
    "springer berlin / heidelberg",
    ". 282301 .",
    "alviano , m. ; dodaro , c. ; faber , w. ; leone , n. ; and ricca , f. 2013 .",
    "wasp : a native asp solver based on constraint learning . in cabalar , p. , and son , t.  c. , eds .",
    ", _ lpnmr _ , volume 8148 of _ lncs _ , 5466 . springer .",
    "ward , j. , and schlipf , j.  s. 2004 . .",
    "in lifschitz , v. , and niemel , i. , eds . , _ proceedings of the 7th international conference on logic programming and non - monotonic reasoning ( lpnmr-7 ) _ , volume 2923 of _ lnai _ , 302313 . springer"
  ],
  "abstract_text": [
answer set programming ( asp ) is a declarative programming paradigm . </S>",
    "<S> the intrinsic complexity of the evaluation of asp programs makes the development of more effective and faster systems a challenging research topic . </S>",
    "<S> this paper reports on the recent improvements of the asp solver wasp . </S>",
    "<S> wasp is undergoing a refactoring process which will end up in the release of a new and more performant version of the software . </S>",
    "<S> in particular the paper focus on the improvements to the core evaluation algorithms working on normal programs . </S>",
    "<S> a preliminary experiment on benchmarks from the 3rd asp competition belonging to the np class is reported . </S>",
    "<S> the previous version of wasp was often not competitive with alternative solutions on this class . </S>",
    "<S> the new version of wasp shows a substantial increase in performance . </S>",
    "<S> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ </S>"
  ]
}