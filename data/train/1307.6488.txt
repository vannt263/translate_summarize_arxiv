{
  "article_text": [
    "high performance codes are becoming increasingly difficult to program , despite a proliferation of successful ( but incremental ) efforts to increase programmability and productivity for high performance computing ( hpc ) systems .",
    "the reasons for this range over several layers , beginning with the need for large , international collaborations to combine expertise from many different fields of science , to the need to address a wide variety of systems and hardware architectures to ensure efficiency and performance .    as heterogeneous and hybrid systems are becoming common in hpc systems , additional levels of parallelism need to be addressed , and the bar for attaining efficiency is being raised .",
    "three out of ten , and 62 of the top 500 of the fastest computers in the world use accelerators of some kind to achieve their performance  @xcite .",
    "more large heterogeneous systems are scheduled to be set up , especially including new intel xeon phi and nvidia k20x co - processors .    in this paper",
    "we present _ chemora _ , using an integrated approach addressing programmability and performance at all levels , from enabling large - scale collaborations , to separating physics , numerical analysis , and computer science portions , to disentangling kernel implementations from performance optimization annotations .",
    "chemorais based on the _ cactus _",
    "framework  @xcite , a well - known tool used in several scientific communities for developing hpc applications .",
    "cactus is a component - based framework providing key abstractions to significantly simplify parallel programming for a large class of problems , in particular solving systems of partial differential equations ( pdes ) on block - structured grids  i.e.  adaptive mesh refinement ( amr ) and multi - block systems ( see section [ sec : cactus ] below ) .",
    "chemoraenables existing cactus - based applications to continue scaling their scientific codes and make efficient use of new hybrid systems , without requiring costly re - writes of application kernels or adopting new programming paradigms . at the same time",
    ", it also provides a high - level path for newly developed applications to efficiently employ cutting - edge hardware architectures , without having to target a specific architecture .",
    "we wish to emphasize that the present work is merely the next step in the currently fifteen year - long history of the cactus framework .",
    "while finding ways to exploit the power of accelerators is perhaps the largest current challenge to increased code performance , it is really only the latest advance in an ever - changing evolution of computer architectures .",
    "suport for new architectures is typically added to the lower - level components of frameworks ( such as cactus ) by the framework developers , allowing the application scientist to take advantage of them without having to significantly rewrite code .    to create the chemoraframework , we have built on top of a number of existing modules that have not been written specifically for this project , as well as creating new modules and abstractions .",
    "the main research and development effort has been the integration of these modules , especially as regards accelerator interfaces , their adaptation for production codes as well as automatic optimizations to handle complicated numerical relativity codes .",
    "the result is that this framework allows the use of accelerator hardware in a transparent and efficient manner , fully integrated with the existing cactus framework , where this was not possible before .",
    "the full contribution to the described research work has been described in the section [ sec : contribution ] .",
    "the framework , along with introductory documentation , will be made publicly available @xcite .",
    "partial differential equations are ubiquitous throughout the fields of science and engineering , and their numerical solution is a challenge at the forefront of modern computational science .",
    "in particular , our application is that of _ relativistic astrophysics_. some of the most extreme physics in the universe is characterised by small regions of space containing a large amount of mass , and newton s theory of gravity is no longer sufficient ; einstein s theory of general relativity ( gr ) is required .",
    "for example , black holes , neutron stars , and supernovae are fundamentally relativistic objects , and understanding these objects is essential to our understanding of the modern universe .",
    "their accurate description is only possible using gr .",
    "the solution of einstein s equations of gr using computational techniques is known as _ numerical relativity _ ( nr ) .",
    "see @xcite for a recent review , and see @xcite for a detailed description of an open - source framework for performing nr simulations .",
    "one of the most challenging applications of nr is the inspiral and merger of a pair of orbiting black holes .",
    "gr predicts the existence of gravitational waves : ripples in spacetime that propagate away from heavy , fast - moving objects .",
    "although there is indirect evidence , these waves have not yet been directly detected due to their low signal strength .",
    "the strongest expected sources of gravitational waves are binary black hole and neutron star mergers , and supernova explosions precisely those objects for which gr is required for accurate modeling .",
    "several gravitational wave detectors @xcite are presently under construction and they are expected to see a signal within the next few years . the detection of gravitational waves will lead to an entirely new view of the universe , complementary to existing electromagnetic and particle observations .",
    "the existence and properties of expected gravitational wave sources will dramatically extend our knowledge of astronomy and astrophysics .",
    "nr models the orbits of the black holes , the waveforms they produce , and their interaction with these waves using the einstein equations .",
    "typically , these equations are split into a 3 + 1 form , breaking the four dimensional character of the equations and enabling the problem to be expressed as a time evolution of gravitational fields in three spatial dimensions .",
    "the einstein equations in the bssn formulation  @xcite are a set of coupled nonlinear partial differential equations with 25 variables  @xcite , usually written for compactness in abstract index form .",
    "when fully expanded , they contain thousands of terms , and the right hand side requires about 7900 floating point operations per grid point to evaluate once , if using eigth order finite differences .",
    "the simulations are characterised by the black hole mass , @xmath0 , a length , @xmath1 , and a time , @xmath2 .",
    "usually one uses units in which @xmath3 , allowing both time and distance to be measured by @xmath0 .",
    "typical simulations of the type listed above have gravitational waves of size @xmath4 , and the domain to be simulated is @xmath5@xmath6 in radius .",
    "for this reason , adaptive mesh refinement ( amr ) or multi - block methods are required to perform long - term bbh simulations .",
    "over 30 years of research in nr culminated in a major breakthrough in 2005  @xcite , when the first successful long - term stable binary black hole evolutions were performed .",
    "since then , the nr community has refined and optimized their codes and techniques , and now routinely runs binary black hole simulations , each employing hundreds or thousands of cpu cores simultaneously of the world s fastest supercomputers .",
    "performance of the codes is a critical issue , as the scientific need for long waveforms with high accuracy is compelling .",
    "one of the motivations of the chemoraproject was taking the nr codes into the era of computing with the use of accelerators ( in particular gpus ) and improving their performance by an order of magnitude , thus enabling new science .      to achieve sustained performance on hybrid supercomputers and reduce programming cost , various programming frameworks and tools have been developed , e.g. , merge  @xcite ( a library based framework for heterogeneous multi - core systems ) , zippy  @xcite ( a framework for parallel execution of codes on multiple gpus ) , bsgp  @xcite ( a new programming language for general purpose computation on the gpu ) , and cuda - lite  @xcite ( an enhancement to cuda that transforms code based on annotations ) .",
    "efforts are also underway to improve compiler tools for automatic parallelization and optimization of affine loop nests for gpus  @xcite and for automatic translation of openmp parallelized codes to cuda  @xcite .",
    "finally , openacc is slated to provide openmp - like annotations for c and fortran code .",
    "stencil computations form the kernel of many scientific applications that use structured grids to solve partial differential equations .",
    "this numerical problem can be characterised as the _ structured grids _",
    "`` berkeley dwarf '' @xcite , one of a set of algorithmic patterns identified as important for current and near - future computation .",
    "in particular , stencil computations parallelized using hybrid architectures ( especially multi - gpu ) are of particular interest to many researchers who want to leverage the emerging hybrid systems to speed up scientific discoveries .",
    "micik  @xcite proposed an optimal 3d finite difference discretization of the wave equation in a cuda environment , and also proposed a way to minimize the latency of inter - node communication by overlapping slow pci - express ( interconnecting the gpu with the host ) data exchange with computations .",
    "this may be achieved by dividing the computational domain along the slowest varying dimension .",
    "thibault @xcite followed the idea of a domain division pattern and implemented a 3d cfd model based on finite - difference discretization of the navier - stokes equations parallelized on a single computational node with 4 gpus .",
    "jacobsen @xcite extended this model by adding inter - node communication via mpi .",
    "they followed the approach described in micik  @xcite and overlapped the communication with computations as well as gpu - host with host - host data exchange .",
    "however , they did not take advantage of the full - duplex nature of the pci - express bus , which would have decreased the time spent for communication .",
    "their computational model also divides the domain along the slowest varying dimension only , and this approach is not suitable for all numerical problems . for example , for large computational domains",
    ", the size of the ghost zone becomes noticeable in comparison to the computed part of the domain , and the communication cost becomes larger than the computational cost , which can be observed in the non - linear scaling of their model",
    ".    notable work on an example stencil application was selected as a finalist of the gordon bell prize in sc 2011 as the first peta - scale result @xcite .",
    "shimokawabe et al",
    ".  demonstrated very high performance of 1.017 pflop / s in single precision using 4,000 gpus along with 16,000 cpu cores on tsubame 2.0 .",
    "nevertheless , a set of new and more advanced optimization techniques introduced in the chemoraframework as well as its capabilities to generate highly efficient multi - gpu stencil computing codes from a high - level problem description make this framework even more attractive for users of large - scale hybrid systems .",
    "physis @xcite addresses the problem of dividing the domain in all dimensions , and is these days seen as one of the most efficient frameworks for stencil computations over regular multidimensional cartesian grids in distributed memory environments . the framework in its current state , however",
    ", does not divide the domain automatically ; this has to be done manually at launch time .",
    "nevertheless , physis achieves very good scaling by taking advantage of memory transfers overlapped with computations .",
    "stencil computations are defined in the form of c - based functions ( or _ kernels _ ) with the addition of a few special macros that allow accessing values at grid points .",
    "the framework also uses cuda streams that allow for parallel execution of multiple kernels at the same time ; e.g.  regular and boundary kernels may be executed in parallel .",
    "data dependencies between stencil points are resolved statically , hence must be known beforehand , at compile time .",
    "the authors put a special emphasis on ease of use , and indeed the time needed to write an application in physis is relatively short .",
    "this framework was evaluated using three benchmark programs running on the tsubame  2.0 supercomputer , and proved to generate scalable code for up to 256 gpus .",
    "below , we compare chemorawith its dynamic compilation and auto - tuning methods to physis , and show that chemoraoutperforms physis in the area of automatically generated code for gpu clusters .",
    "this paper makes the following contributions :    * an overview of the chemoraframework for generating hybrid cpu / gpu cluster code from pde descriptions is presented and its performance is characterized . * a language for expressing differential equation models of physical systems suitable for generating hybrid cluster simulation code ( based on the existing code - generation package ) , was developed . *",
    "model - based gpu tile / thread configuration optimization techniques were developed , enabling the exploration of a large search space and the use of dynamic compilation ( performed once on the chosen configuration ) .",
    "* automatic hybrid execution gpu / cpu data staging techniques were developed ( the module ) .",
    "* gpu tuning techniques were developed for large kernel codes , such as register - pressure sensitive configuration .",
    "* the first demonstration binary black hole simulations using gpus in full gr were presented . since chemora has not yet been applied to the carpet amr driver , these are not suitable for production physics , but prove that existing codes used in numerical relativity can be adapted to chemora .",
    "chemoratakes a physics model described in a high level _ equation description language _ ( edl ) and generates highly optimized code suitable for parallel execution on heterogeneous systems .",
    "there are three major components in chemora : the cactus - carpet computational infrastructure , cakernel programming abstractions , and the kranc code generator .",
    "chemorais portable to many operating systems , and adopts widely - used parallel programming standards ( mpi , openmp and opencl ) and models ( vectorization and cuda ) .",
    "an architectural view of the chemoraframework is shown in figure  [ fig : chemora_arch ] .",
    "we describe the individual components below .",
    "the cactus computational framework is the foundation of chemora .",
    "cactus  @xcite is an open - source , modular , highly - portable programming environment for collaborative research using high - performance computing .",
    "cactus is distributed with a generic computational toolkit providing parallelization , domain decomposition , coordinates , boundary conditions , interpolators , reduction operators , and efficient i / o in different data formats .",
    "more than 30 groups worldwide are using cactus for their research work in cosmology , astrophysics , computational fluid dynamics , coastal modeling , quantum gravity , etc . the cactus framework is a vital part of the einstein toolkit  @xcite , an nsf - funded collaboration enabling a large part of the world - wide research in numerical relativity by providing necessary core computational tools as well as a common platform for exchanging physics modules .",
    "cactus is part of the software development effort for blue waters , and in particular the cactus team is working with ncsa to produce development interfaces and paradigms for large scale simulation development .",
    "one of the features of cactus relevant in this context is that it externalizes parallelism and memory management into a module ( called a _ driver _ ) instead of providing it itself , allowing application modules ( called _ thorns _ ) to function mostly independently of the system architecture .",
    "here we employ the _ carpet _",
    "driver  @xcite for mpi - based parallelism via spatial domain decomposition .",
    "carpet provides adaptive mesh refinement ( amr ) and multi - block capabilities , and has been shown to scale to more than 16,000 cores on current nersc and xsede systems .    in the typical cactus programming style for application modules , these modules consist either of _ global _ routines ( e.g.  reduction or interpolation routines ) , or _ local",
    "_ routines ( e.g.  finite differencing kernels ) .",
    "local routines are provided in the form of kernels that are mapped by the driver onto the available resources . at run time , a schedule is constructed , where cactus orchestrates the execution of routines as well as the necessary data movement ( e.g.  between different mpi processes ) . this execution model is both easy to understand for application scientists , and can lead to highly efficient simulations on large systems .",
    "below , we refine this model to include accelerators ( e.g.  gpus ) with separate execution cores and memory systems .",
    "the chemoraprogramming framework uses the cakernel @xcite , a set of high level programming abstractions , and the corresponding implementations .",
    "based on the cactus - carpet computational infrastructure , cakernel provides two major sets of programming abstractions : ( 1 ) _ grid abstractions _ that represent the dynamically distributed adaptive grid hierarchy and help to separate the application development from the distributed computational domain ; ( 2 ) _ kernel abstractions _ that enable automatic generation of numerical kernels from a set of highly optimized templates and help to separate the development , scheduling , and execution of numerical kernels .      the cactus flesh and the cactus computational toolkit contain a collection of data structures and functions that can be categorized into the following three grid abstractions , which commonly appear in high level programming frameworks for parallel block - structured applications  @xcite :    * the _ grid hierarchy ( gh ) _ represents the distributed adaptive gh .",
    "the abstraction enables application developers to create , operate and destroy hierarchical grid structures .",
    "the regridding and partitioning operations on a grid structure are done automatically whenever necessary . in cactus ,",
    "grid operations are handled by a driver thorn which is a special module in cactus . *",
    "a _ grid function ( gf ) _ represents a distributed data structure containing one of the variables in an application .",
    "storage , synchronization , arithmetic , and reduction operations are implemented for the gf by standard thorns .",
    "the application developers are responsible for providing routines for initialization , boundary updates , etc . * the _ grid geometry ( gg )",
    "_ represents the coordinates , bounding boxes , and bounding box lists of the computational domain .",
    "operations on the gg , such as union , intersection , refine , and coarsen are usually implemented in a driver thorn as well .",
    "the kernel abstractions enable automatic code generation with a set of highly optimized templates to simplify code construction .",
    "the definition of a kernel requires the following three components :    * a _ cakernel descriptor _ describes one or more numerical kernels , dependencies , such as grid functions and parameters required by the kernel , and grid point relations with its neighbors . the information provided in the descriptor is then used to generate a kernel frame ( macros ) that performs automatic data fetching , caching and synchronization with the host . *",
    "a _ numerical kernel _ uses kernel - specific auto - generated macros .",
    "the function may be generated via other packages ( such as kranc ) , and operates point - wise . *",
    "the _ cakernel scheduler _",
    "schedules cakernel launchers and other cakernel functions in exactly the same way as other cactus functions .",
    "data dependencies are evaluated and an optimal strategy for transferring data and performing computation is selected automatically .",
    "these kernel abstractions not only enable a simple way to write and execute numerical kernels in a heterogeneous environment , but also enable lower - level optimizations without modifying the kernel code itself .",
    "cakernel provides an abstraction of the hardware architecture , and chemora code is generated on top of this abstraction .",
    "the high level problem specification in the chemora framework may thus remain independent of the architecture .",
    "the support for new architectures is the responsibility of the chemora developers , and thus it is transparent to the end - user , who should not need to significantly modify their code once the underlying cakernel implementation has been modified .",
    "programming languages such as c or fortran offer a very low level of abstraction compared to the usual mathematical notation . instead of requiring physicists to write equations describing pdes at this level ,",
    "we introduce edl , a domain - specific language for specifying systems of pdes as well as related information ( initial and boundary conditions , constraints , analysis quantities , etc . )",
    "edl allows equations to be specified independent of their discretization , allows abstract index notation to be used as a compact way to write vectors and tensors , and does not limit the options for memory layout or looping order . for chemora , we designed edl from scratch instead of piggybacking it onto an existing language such as mathematica , haskell , or c++ so that we could choose a syntax that is easily understood by domain scientists , i.e.  physicists and engineers .",
    "edl has a very simple syntax , similar to c , but extended with a latex - like syntax for abstract index notation for vectors and tensors . sample [ fig : edl ] shows as an example the main part of specifying the scalar wave equation in a fully first order form ( assuming , for simplicity , the propagation speed is @xmath7 . ) in addition to specifying the equations themselves , edl supports constants , parameters , coordinates , auxiliary fields , and conditional expressions .    ....    ! \\color{forestgreen}{begin calculation } !",
    "! \\color{blue}{init } !",
    "u    = ! \\color{cyan}{0 } !",
    "rho = a exp(!\\color{cyan}{-1/2 } ! ( r / w)**!\\color{cyan}{2 } ! )    v_i = !",
    "\\color{cyan}{0 } ! ! \\color{forestgreen}{end calculation } !    ! \\color{forestgreen}{begin calculation } ! ! \\color{blue}{rhs } !",
    "d_t u    = rho    d_t rho = delta^ij d_i v_j    d_t v_i = d_i rho ! \\color{forestgreen}{end calculation } !    !",
    "\\color{forestgreen}{begin calculation } !",
    "! \\color{blue}{energy } !",
    "eps = ! \\color{cyan}{1/2 } ! ( rho**!\\color{cyan}{2 }",
    "! + delta^ij v_i v_j ) ! \\color{forestgreen}{end calculation } ! ... ....",
    "in addition to describing the system of equations , edl makes it possible to specify a particular discretization by specifying sets of finite differencing stencils .",
    "these stencil definitions remain independent of the equations themselves .",
    "the _ kranc _ code - generation package ( see section [ sec : kranc ] ) , written in mathematica and described below , has been enhanced in chemorato accept edl as its input language . via a j",
    "/ link interface to the piraha peg @xcite java parsing library , the edl is parsed into mathematica expressions equivalent to those traditionally used as input to kranc .",
    "the formal grammar which defines the syntax of the language is available as part of the kranc distribution , should other tools need to parse edl files .    in spite of its apparent simplicity ,",
    "the high - level description in edl captures everything that is needed to create a complete cactus module .",
    "metadata such as variable declarations , schedule items , and parameter definitions are extracted from edl , and implementation choices such as memory layout and loop traversal order are made automatically or even dynamically at run time ( see below ) .",
    "kranc is written in mathematica , and prior to chemorawas used by writing a script in the mathematica language to set up data structures containing equations and then call kranc mathematica functions to generate the cactus module .",
    "this allowed great flexibility , but at the same time required users to know the mathematica language , which in several ways is idiosyncratic and is unfamiliar to many users .",
    "additionally , the use of an imperative language meant that kranc was unable to reason about the input script in any useful manner ( for example for the purpose of reporting line numbers where errors were found ) . a new , simple ,",
    "declarative domain - specific language was therefore created which allowed a concise expression of exactly the information needed by kranc .",
    "existing languages familiar to the majority of scientists ( c , fortran , perl , python ) introduce a wide variety of features and semantics unnecessary for our application , and none of these are suitable for expressing equations in a convenient manner .",
    "the block structure of edl was inspired by fortran , the expression syntax by c , and the index notation for tensors by latex .",
    "we feel that the language is simple enough that it can be learned very quickly by reference to examples alone , and that there is not a steep learning curve .    by providing a high - level abstraction for an application scientist , the use of edl substantially reduce the time - to - solution , which includes : learning the software syntax , development time from a given system of equations to machine code , its parallelization on a heterogeneous architecture , and finally its deployment on production clusters .",
    "it also eliminates many potential sources of errors introduced by low level language properties , and thus reduces testing time .",
    "for further information about the total time - to - solution , see @xcite .",
    "translating equations from a high - level mathematical notation into c or fortran and discretizing them manually is a tedious , error - prone task . while it is straightforward to do for simple algorithms , this becomes prohibitively expensive for complex systems .",
    "we identify two levels of abstraction .",
    "the first is between the continuum equations and the approximate numerical algorithm ( discretization ) , and the second is between the numerical algorithm and the computational implementation .",
    "we employ _ kranc _",
    "@xcite as a code - generation package which implements these abstractions .",
    "the user of kranc provides a _",
    "kranc script _ containing a section describing the partial differential equations to solve , and a section describing the numerical algorithm to use .",
    "kranc translates this high - level description into a complete cactus module , including c++ code implementing the equations using the specified numerical method , as well as code and metadata for integrating this into the cactus framework .    by separating mathematical , numerical , and computational aspects",
    ", kranc allows users to focus on each of these aspects separately according to their specialization .",
    "although users can write kranc scripts directly in mathematica , making use of the edl shields them from the ( sometimes arcane ) mathematica syntax ( because they are required to follow a strict pattern for specifying pdes ) and provides them with much more informative ( high - level ) error messages . either the traditional mathematica language , or the new edl language , can be used with chemora for gpu code generation .",
    "kranc is able to :    * accept input with equations in abstract index notation ; * generate customized finite differencing operators ; * generate codes compatible with advanced cactus features such as adaptive mesh refinement or multi - block systems ; * check the consistency with non - kranc generated parts of the user s simulation ; * apply coordinate transformations , in particular of derivative operators , suitable for multi - block systems ( e.g.  @xcite ) ; * use symbolic algebra based on the high - level description of the physics system to perform optimizations that are inaccessible to the compiler of a low - level language ; * implement transparent openmp parallelization ; * explicitly vectorize loops for simd architectures ( using compiler - specific syntaxes ) ; * generate opencl code ( even independent of the cakernel framework described below ) ; * apply various transformations and optimizations ( e.g.  loop blocking , loop fission , multi - threading , loop unrolling ) as necessary for the target architecture .",
    "it is important to note that kranc does not simply generate the source code for a specific architecture that corresponds @xmath8 to its input .",
    "kranc has many of the features of a traditional compiler , including a front - end , optimizer , and code generator , but the code generated is c++/cakernel / cuda rather than machine code .",
    "the high - level optimizations currently implemented act on discretized systems of equations , and include the following :    * removing unused variables and expressions ; * transforming expressions to a normal form according to mathematical equivalences and performing _ constant folding _ ; * introducing temporaries to perform _ common subexpression elimination _ ; * splitting calculations into several independent calculations to reduce the instruction cache footprint and data cache pressure _ ( loop fission ) _ ; * splitting calculations into two , the first evaluating all derivative operators ( using stencils ) storing the result into arrays , the second evaluating the actual rhs terms but not using any stencils .",
    "this allows different loop optimizations to be applied to each calculation , but requires more memory bandwidth _ ( loop fission)_.    note in the above that a _ calculation _",
    "is applied to all grid points , and thus either loops over or uses multiple threads to traverse all grid points .",
    "also note that both the high - level and the low - level optimizations could in principle also be performed by an optimizing compiler . however , none of the currently available compilers for hpc systems are able to do so , except for very simple kernels .",
    "we surmise that the reason for this is that it is very difficult for a compiler to abstract out sufficient high - level information from code written in low - level languages to prove that these transformations are allowed by the language standard .",
    "a programmer is forced to make many ( ad - hoc ) decisions when implementing a system of equations in a low - level language such as c or c++ , and the compiler is then unable to revert these decisions and fails to optimize the code .",
    "it is surprising to see that these optimizations  which are in principle standard transformations among compiler builders  are ( 1 ) able to significantly improve performance , are ( 2 ) nevertheless not applied by current optimizing compilers , and are yet ( 3 ) so easily implemented in mathematica s language , often requiring less than a hundred lines of code .",
    "kranc is a developed and mature package . since its conception in 2002",
    ", it has been continually developed to adapt to changing computational paradigms .",
    "kranc is not just a theoretical tool . in the einstein toolkit",
    "@xcite , kranc is used to generate a highly efficient open - source implementation of the einstein equations as well as several analysis modules .",
    "all of the above features are used heavily by users of the toolkit , and hence have been well - tested on many production architectures , including most systems at nersc or in xsede .",
    "it is also important to note that chemora significantly reduces the time required to debug the application .",
    "the recommended approach for development using chemora is that the user s kranc script is considered the canonical source , and only this should be modified during development .",
    "the generated code should not be modified , as it will be completely regenerated each time kranc is run , so any hand - modifications of the generated code will be lost .",
    "unlike when writing a c++ program , every successfully - compiled kranc script should lead to correct computational ( though not necessarily physical ) code .",
    "hence the errors are limited to the application domain , for example an incorrect equation is solved . similarly ,",
    "use of a source - code level debugger is not typical when working with kranc , as the `` debugging '' happens at the level of the scientific results ( e.g. convergence tests and visualisation ) rather than at the level of programmatic bugs in the generated code . as such",
    ", kranc is treated as a black box by the application scientist , much as a compiler would be .      in order to use kranc as a component of chemora ,",
    "the code - generation backend was modified , and cakernel ( see section [ sec : cakernel ] ) was added as an output target .",
    "this change is essentially invisible to the application developer ; there is merely an additional option to generate cakernel code rather than c++ or opencl code .",
    "each calculation is then annotated with whether it runs on the host ( cpu ) or the device ( gpu ) .",
    "kranc also creates all metadata required by cakernel .",
    "additionally , the new edl language frontend was added to kranc .",
    "since gpu accelerators have to be governed by cpu(s ) , it is natural to attempt to exploit them by employing _",
    "hybrid codes_. in this case , kranc , generates both cpu and cakernel codes from the same script . at run time , each mpi process checks whether to attach itself to a gpu and perform its calculations there , or whether to use the cpu for calculations .",
    "this mechanism works in principle ; however , as the cactus driver currently assigns the same amount of work to each mpi process ( uniform load balancing ) , the large performance disparity between cpu and gpu has led to only minimal performance gains so far .",
    "we expect this issue to be resolved soon .",
    "the cakernel code generated by kranc consists of kernels , routines that operate on a single grid point .",
    "the cakernel parts of chemorause kranc - provided and run time information to generate efficient gpu executables from the numerical kernels , without requiring the user to set tuning parameters . at build time , numerical kernels are wrapped with frames , code that implements data staging and iteration , producing a source code package that is compressed and compiled into the cactus executable . at run time , cakernel makes use of information about the kernels provided by kranc as well as user parameters and information on the problem size to choose tiling , etc . with this information ,",
    "the code package is extracted , edited , compiled , loaded to the gpu , and run .",
    "this dynamic process results in lightweight gpu code that makes efficient use of gpu resources , including caches .",
    "cakernel uses several techniques to generate efficient gpu code which we shall elaborate in the following subsections .",
    "cpu and gpu tiling has been extensively studied , though often limited to specific stencils , @xcite .",
    "the goal for cakernel was to develop an automatic tile selection scheme that would work well not just for a few specific stencils , but any stencil pattern the user requested .",
    "the tile selection is based not just on the stencil shape but also on the number of grid variables and on the shape of the local grid .",
    "the resulting tile makes best use of the cache and potentially registers for minimizing data access .",
    "the discussion below provides highlights of the scheme ; details will be more fully reported elsewhere .",
    "the following discussion uses cuda terminology , see @xcite for background . the term will be used here to mean the portion of the grid assigned to a cuda block . in gpus ,",
    "higher occupancy means better latency hiding introduced by common memory access .",
    "that can be achieved with multiple blocks , but to maximize l1 cache reuse cakernel will favor a single large block , the maximum block size determined by a trial compilation of a numerical kernel . within that block size",
    "limit a set of candidate tile shapes are generated using simple heuristics , for example , by dividing the @xmath9 dimension of the local grid evenly , ( by 1 , 2 , @xmath10 ) and then for each tile @xmath9 length find all pairs of @xmath11 and @xmath12 lengths that fit within the block limit , where @xmath13 , @xmath11 , and @xmath12 are the tile shape in units of grid points .    given a candidate tile shape ,",
    "the number of cache lines requested during the execution of the kernel is computed .",
    "such a size is computed under the assumption that memory accesses are grouped by grid function and dimension ( for stencil accesses ) . as an illustration ,",
    "if the assumption holds a possible access pattern for grid functions @xmath14 and @xmath15 is @xmath16 , @xmath17 , @xmath18 , @xmath19 , while the pattern @xmath16 , @xmath19 , @xmath18 , @xmath17 violates the assumption because @xmath15 is between @xmath14 s accesses and for @xmath14 a dimension-@xmath9 stencil access interrupts dimension-@xmath20 accesses .",
    "request sizes are computed under different cache line assumptions , and the one or two that most closely match the cache are averaged .",
    "one survival assumption is that all lines survive ( no line is evicted ) during an iteration in which case the request size is the number of distinct lines the kernel will touch , after accounting for many special cases such as alignment .",
    "another survival assumption is that data accessed using stencils along one dimension ( say , @xmath9 ) will not survive until another dimension access ( say , @xmath20 ) ( e.g. , common lines might be evicted ) .",
    "the particular assumption to use is based on the size of the tile and cache .    skipping details ,",
    "let @xmath21 denote the overall request size .",
    "an cost is computed by first normalizing @xmath21 to the number of grid points , @xmath22 , where @xmath23 is the number of iterations performed by threads in the tile . to account for the lower execution efficiency with smaller tiles , a factor determined empirically as @xmath24 is used . the complete expression for",
    "the estimated cost is @xmath25 .",
    "the tile with the lowest estimated cost is selected .",
    "tiles chosen using this method are often much longer in the @xmath9 direction than other dimensions , because the request size includes the effect of partially used cache lines .",
    "if a stencil extends in all three dimensions and there are many grid functions , the tile chosen will be `` blocky '' .",
    "if there are fewer grid functions , the tile will be plate - shaped , since the request size accounts for cache lines that survive iterations in the axis orthogonal to the plate .",
    "the tile optimization is performed for the tile shape , but not for the number of iterations which so far is chosen empirically .",
    "a number of techniques are employed to minimize the size of the gpu kernels .",
    "dynamic compilation using program parameters and tile shape , seen by the compiler as constants , was very effective .",
    "another particularly useful optimization given the large size of the numerical kernels is -offset loads , in which a single base address is used for all grid functions .",
    "normally , the compiler reserves two 32-bit registers for the base address of each grid function , and uses two additional registers when performing index arithmetic since the overhead for indexing is significant .",
    "fortunately , the fermi memory instructions have a particularly large offset , at least 26 bits based on an inspection of fermi machine code ( which is still not well documented ) .",
    "( an offset is a constant stored in a memory instruction , it is added to a base address to compute the memory access address . ) with such generous offsets , it is possible to treat all grid functions ( of the same data type ) as belonging to one large array .      some numerical kernels are extremely large , and perform very poorly using standard techniques , primarily due to very frequent register spill / reload accesses .",
    "cakernel identifies and provides special treatment for such kernels .",
    "the kernels can be automatically identified using cakernel s integrated performance monitoring code by examining the number of local cache misses .",
    "( currently , they are automatically identified by examining factors such as the number of grid functions . )",
    "such fat kernels are handled using two techniques : they are launched in small blocks of 128 threads , and source - level code restructuring techniques are applied .",
    "launching in small blocks relieves some pressure on the l1 cache .",
    "( a dummy shared memory request prevents other blocks from sharing the multiprocessor . ) the source code restructuring rearranges source lines to minimize the number of live variables ; it also assigns certain variables to shared memory .",
    "cakernel provides performance monitoring using gpu event counters , read using the nvidia cupti api .",
    "if this option is selected , a report on each kernel is printed at the end of the run .",
    "the report shows the standard tuning information , such as warp occupancy and execution time , and also cache performance data . to provide some insight for",
    "how well the code is performing , the percentage of potential instruction execution and memory bandwidth used by the kernel is output .",
    "for example , a 90% instruction execution potential would indicate that the kernel is close to being instruction bound .",
    "we plan to use these data for automatic tuning , e.g.  to better identify fat kernels .",
    "most of the optimizations are highly effective , including dynamic compilation and fixed - offset loads .",
    "there are two areas where some potential has been left unexploited : tile shape , and the handling of fat kernels .",
    "automatic tile size selection greatly improves performance over manually chosen tile sizes , however kernels are still running at just 20% of execution utilization while exceeding 50% of available memory bandwidth , suffering l1 cache miss ratios well above what was expected .",
    "the primary weakness in tile selection is assuming an ordering of memory accesses that does not match what the compiler actually generates .",
    "( the compiler used was nvidia ` ptxas ` release 4.1 v0.2.1221 . ) for example , for a kernel with a @xmath26 stencil and a @xmath27 tile , the compiler interleaves @xmath28 accesses along the @xmath20 and @xmath29 axes . the cache can hold all grid points along one axis ( 273 cache lines would be needed in this example ) but not along two ( 483 cache lines ) .",
    "several solutions have been identified , including modifying the model to match compiler behavior , waiting for a better compiler , restructuring the code to obtain a better layout , or rescheduling the loads at the object - file level .",
    "one of the kernels performing the last step in the time evolution has over 800 floating point instructions in straight - line code .",
    "this executes at only 14% instruction utilization , suffering primarily from l1 cache misses on register spill / reload accesses .",
    "we address this via fixed offsets and other dynamic compilation techniques that reduce register pressure . a combination of source - level scheduling and shared memory use yielded from 5% to 10% better performance , and there seems to be a large potential for further improvement .      in large , complex applications based on component frameworks such as cactus , gpus and other accelerators are only useful to those components which perform highly parallel arithmetic computations",
    "as such , it is neither necessary nor useful to port the entire framework to run on gpus  in fact , much of the code in cactus - based applications is not numerical , but provides support in the form of organizing the numerical data .",
    "one approach to porting a component to run on a gpu is to identify the entry and exit points of that component , copy all required data to the gpu beforehand , and copy it back after the gpu computation .",
    "unfortunately , such data transfer is prohibitively slow , and the performance of this approach is not acceptable .",
    "instead , we track which data ( and which parts of the data ) is read and written by a particular routine , and where this routine executes ( host or gpu ) .",
    "data is copied only when necessary , and then only those portions that are needed .",
    "note that data is not only accessed for computations , but also by inter - process synchronization and i / o .    the metadata available for each cactus component ( or thorn ) already contains sufficient information in its schedule description for such tracking , and during chemorawe refined the respective declarations to further increase performance .",
    "this metadata needs to be provided manually for hand - written thorns , but can be deduced automatically e.g.  by kranc in auto - generated thorns .    in keeping with the cactus spirit ,",
    "it is a cactus component ( thorn ) that tracks which parts of what grid functions are valid where , and which triggers the necessary host  device copy operations that are provided by other , architecture - specific thorns .",
    "we tested our framework on different computational systems .",
    "unfortunately , clusters available to us at the time this paper was written were insufficient for the purpose of challenging scaling tests .",
    "_ cane _ is a heterogeneous cluster located at the pozna supercomputing and networking center .",
    "although it consists of 334 nodes , at the time we performed the tests only 40 of them were available as the cluster was still being set up .",
    "each node is equipped with two amd opteron 6234 2.7ghz processors ( with two numa nodes each ; 12 cores per cpu ) , 64 gb of main memory , and one nvidia m2050 gpu with 3 gb of ram .",
    "the computational nodes are interconnected by infiniband qdr network with the fat - tree topology ( 32gbit / s bandwidth ) .",
    "cuda 4.1 and gcc 4.4.5 were used for gpu and cpu code compilation , respectively .",
    "_ datura _ is an cpu - only cluster at the albert - einstein - institute in potsdam , germany .",
    "datura has 200 nodes , each consisting of two intel westmere 2.666ghz processors with 6 cores and 24 gb of memory .",
    "the nodes are connected via qdr infiniband ( 40gbit / s bandwidth ) .",
    "we used the intel compilers version 11.1.0.72 .",
    "we employed a simple cfd ( computational fluid dynamics ) benchmark application to compare the performance of chemoraand physis .",
    "this code solves the navier - stokes equations ; for details about the problem and its discretization see  @xcite , and for its implementation in cactus and cakernel see  @xcite .",
    "the setup consists of three stencil kernels : one that explicitly updates velocity values , one that iteratively solves the conservation of mass ( updating velocity and pressure ) , and one that updates the boundary conditions . for simplicity , we ran 4 iterations of the mass conservation kernel , and applied the boundary condition after each iteration .",
    "although the cfd code was written directly in cakernel native language and its performance was already reported along with our previous work  @xcite , we used cakernel s new optimization facilities in this work .",
    "these allowed us to obtain improved performance compared to our previous results as well as compared to similar , publicly available frameworks ( e.g.  physis ) .    to obtain statistically stable performance results ,",
    "as many as 1000 iterations were executed in each run .",
    "the cfd benchmark uses single - precision floating - point data , which provides sufficient accuracy for this test case .",
    "both frameworks use the gpus only for computation , and use cpus only for data transfer and management .",
    "figure  [ fig : sc12bench_cfd ] compares the scalability of the frameworks in this cfd benchmark .",
    "the problem size of the weak scaling test for each gpu was fixed at @xmath30 , and the performance was evaluated using 1 to 36 gpus with two - dimensional domain decompositions along the @xmath20 and @xmath29 directions .",
    "we present results for the best domain decompositions for each framework .",
    "the performance of both implementations increases significantly with increasing number of the gpu nodes .",
    "numerous optimizations in chemorasuch as dynamic compilation and auto - tuning allowed us to find the best gpu block size for the domain size , and execute on the correct number of warps to limit the number of l1 cache misses . as a result ,",
    "for a single gpu , chemoraobtained 90.5 gflop / s , whereas physis only obtained 43 gflop / s .",
    "this gap may be also due to the fact that physis does not make any use of shared memory on the gpus .",
    "figure  [ fig : sc12bench_cfd ] also compares the performance of the two frameworks in a strong scaling test .",
    "the problem size for this test was fixed at @xmath31 .",
    "both implementations scale up very well ; chemoraachieved 270 gflop / s and 1055 gflop / s for 4 and 36 gpus , respectively , whereas physis achieved 170 gflop / s and 965 gflop / s in the same configurations . the parallel efficiency ( when increasing the number of gpus from 4 to 36 ) is 43% and 63% for chemoraand physis , respectively .",
    "we demonstrate the integration of chemoratechnologies into our production - level codes by performing a numerical relativity ( nr ) simulation .",
    "this simulation of a binary black hole ( bbh ) merger event shows that our gpu - accelerated main evolution code can be seamlessly integrated into the pre - existing cpu framework , and that it is not necessary to port the entire framework to the gpu .",
    "it also demonstrates the use of the data management aspect of chemora , showing how data is copied between the host and the device on demand .",
    "analysis modules running on the cpu can make use of data generated on the gpu without significant modification .",
    "our production simulations differ from this demonstration only in their use of adaptive mesh refinement ( amr ) , which allows a much larger computational domain for a given computational cost .",
    "this allows the simulation of black hole binaries with larger separations , many more orbits before merger , and hence longer waveforms when amr is used .",
    "the initial condition consists of two black holes on a quasi - circular orbit about their common center of mass ( `` qc-0 '' configuration ) .",
    "this is a benchmark configuration ; in a production simulation , the black holes would have a much larger separation .",
    "this configuration performs approximately one orbit before the energy loss due to gravitational wave emission cause the black holes to plunge together and form a single , highly - spinning black hole .",
    "gravitational waves are emitted from the orbiting and merging system .",
    "these are evaluated on a sphere and decomposed into spherical harmonics .",
    "it is this waveform which is used in gravitational wave detection .",
    "we use a 3d cartesian numerical grid @xmath32 ^ 3 $ ] with @xmath33 evolved grid points . to ensure a balanced domain decomposition we run on 27 processes , corresponding to",
    "@xmath34 evolved points per process .",
    "this is the largest grid that fits in the 3 gb of gpu memory on cane , given the large number of grid variables required .",
    "all calculations are performed in double precision .",
    "we evolve the system using the ` mclachlan ` code ( see section [ sec : science ] above ) , using 8th order finite differencing and a 3rd order runge - kutta time integrator .",
    "any production cactus simulation makes use of a large number of coupled thorns ; e.g.  this simulation contains 42 thorns .",
    "most of these do not need to be aware of the gpu , cakernel , or the accelerator infrastructure . in our case , only ` mclachlan ` and the ` weylscal4 ` gravitational wave extraction thorns were running on a gpu .",
    "additional thorns , e.g.  tracking the location or shape of the black holes , were run on the cpu .",
    "we use 27 nodes of the cane cluster ( see section  [ sec : canedesc ] ) with one gpu per node .",
    "we do not run any cpu - only processes .",
    "[ fig : bbh ] shows the numerical simulation domain . on the @xmath35 plane we project the @xmath36 variable which represents gravitational waves .",
    "the black hole trajectories are shown as black curves near the center of the grid ; they end when the black holes merge into a single black hole located at the center .",
    "the sphere on which the multipolar decomposition of the gravitational waves is performed is also shown . in the insets , we show ( a ) the time evolution of the ( dominant ) @xmath37 mode of the gravitational radiation computed on the sphere at @xmath38 , and ( b ) the ( highly distorted ) shape of the common apparent horizon formed when the two individual black holes merge .",
    "table  [ tbl : bbhtimers ] shows a break - down of the total run time of the bbh simulation .",
    "the routines labeled in bold face run on the gpu .",
    "the times measured are averaged across all processes .",
    "the _ wait _ timer measures the time processes wait on each other before an interprocessor synchronization .",
    "this encapsulates the variance across processes for the non - communicating routines .",
    ".timer breakdown for the binary black hole simulation .",
    "routines in bold face ( 48% ) are executed on the gpu .",
    "[ cols= \" < , > \" , ]     we see that the interprocess synchronization is a significant portion ( 38% ) of the total run time on this cluster .",
    "one reason for this is that the large number of ghost zones ( 5 ) needed for partially - upwinded 8th order stencils require transmitting a large amount of data .",
    "this could likely be improved by using a cluster with more than one gpu or more gpu memory per node , as this would reduce the relative cost of inter - process communication relative to computation .",
    "we used part of the binary black hole simulation as a weak - scaling performance benchmark .",
    "we chose a local problem size that fitted into the gpu memory of cane ( see section  [ sec : canedesc ] ) , corresponding to @xmath39 evolved points plus boundary and ghost zones .",
    "we ran the benchmark on cane ( on gpus ) and datura ( on cpus ; see sec .",
    "[ sec : daturadesc ] ) , using between 1 and 48 nodes .",
    "figure  [ fig : s12bench_ml ] shows results comparing several configurations , demonstrating good parallel scalability for these core counts .",
    "one of cane s gpus achieved about twice the performance of one of its cpus , counting each numa node as a single cpu .        as a measurement unit",
    "we use time per grid point update per gpu ( or cpu ) .",
    "the best performance was achieved for a single gpu : 25 gflop / s , which is 5% of the m2050 gpu s peak performance of 515 gflop / s . on 40 nodes",
    ", we observed 50% scaling efficiency due to synchronization overhead , and achieved a total performance of 500 gflop / s .",
    "cpu performance tests were performed on both cane and datura .",
    "the total performance of the parallel openmp code , properly vectorized , was similar to the performance of a single gpu , with similar scaling factor .",
    "we note that our floating point operation counts consider only those operations strictly needed in a sequential physics code , and e.g.  do not include index calculations or redundant computations introduced by our parallelization .",
    "we have presented the chemoraproject , a component - based approach to making efficient use of current and future accelerator architectures for high - performance scientific codes . although the examples we present run on the gpu and use cuda , our work is general and will be applied e.g.  to opencl and other approaches in future work .",
    "using chemora , a scientist can describe a problem in terms of a system of pdes in our equation description language . a module for the cactus framework",
    "is then generated automatically by kranc for one or more target architectures .",
    "kranc applies many optimizations at code - generation time , making use of symbolic algebra , and the resulting source code can then be compiled on a diverse range of machines ( taking advantage of the established portability of cactus and the availability of cuda as a uniform gpu programming environment ) . at run - time",
    ", the cuda code is recompiled dynamically to enable a range of runtime optimizations .",
    "we have presented two case studies .",
    "the first is a computational fluid dynamics ( cfd ) code , and we demonstrated weak scaling using our infrastructure running on gpus .",
    "we also used the physis framework for this same problem and compared the scaling . chemorahas comparable or higher performance , a result we attribute to the dynamic optimizations that we employ .",
    "the second case study is a numerical relativity simulation based on the mclachlan code , a part of the freely available open - source ( gpl ) einstein toolkit ( et ) .",
    "mclachlan solves a significantly more complex set of equations , and integrates with many other components of the et .",
    "we performed a simulation of a binary black hole coalescence using the same codes and techniques as we would currently use in production cpu simulations , with the omission of adaptive mesh refinement ( amr ) , which is not yet adapted to chemora .",
    "we plan to implement amr and multi - block methods next .",
    "amr and multi - block are implemented in cactus in a way which is transparent to the application programmer , hence we expect that including amr in chemorawill be straightforward using the accelerator architecture developed in this work ( which maintains knowledge of which variables are valid on the host ( cpu ) and which on the device ( gpu ) ) . as with the time integration , we will implement only the basic low - level interpolation operators required for mesh refinement on the gpu , and the existing amr code carpet will marshal the required operations to the device .    with amr and/or multi - block methods , chemorawill",
    "be an even more compelling option for implementing scientific codes , and fields of science ( such as numerical relativity ) requiring the solution of complex systems of pdes will be able to reach a new level of performance .",
    "should the specifics of accelerator devices change in the future , the chemoraframework , much of which is general , should be easily adaptable to the new technology , and codes built with chemorawill have a head start in advancing computational science on the new platform .",
    "the authors would like to thank gabrielle allen and joel e. tohline at the cct and krzysztof kurowski at psnc for their vision , encouragement , and continuous support to this project .",
    "this work was supported by the ucoms project under award number mnisw ( polish ministry of science and higher education ) nr 469  1  n  - usa/2009 in close collaboration with u.s .",
    "research institutions involved in the u.s .",
    "department of energy ( doe ) funded grant under award number de - fg02 - 04er46136 and the board of regents , state of louisiana , under contract no .",
    "doe / leqsf(2004 - 07 ) and leqsf(2009 - 10)-enh - tr-14 .",
    "this work was also supported by nsf award 0725070 _ blue waters _",
    ", nfs awards 0905046 and 0941653 _ petacactus _ , nsf award 0904015 _ cigr _ , and nsf award 1010640 _ ng - chc _ to louisiana state university , and by the dfg grant sfb / transregio  7 `` gravitational - wave astronomy '' ."
  ],
  "abstract_text": [
    "<S> starting from a high - level problem description in terms of partial differential equations using abstract tensor notation , the _ chemora _ framework discretizes , optimizes , and generates complete high performance codes for a wide range of compute architectures . </S>",
    "<S> chemoraextends the capabilities of cactus , facilitating the usage of large - scale cpu / gpu systems in an efficient manner for complex applications , without low - level code tuning . </S>",
    "<S> chemoraachieves parallelism through mpi and multi - threading , combining openmp and cuda . </S>",
    "<S> optimizations include high - level code transformations , efficient loop traversal strategies , dynamically selected data and instruction cache usage strategies , and jit compilation of gpu code tailored to the problem characteristics . </S>",
    "<S> the discretization is based on higher - order finite differences on multi - block domains . </S>",
    "<S> chemora s capabilities are demonstrated by simulations of black hole collisions . </S>",
    "<S> this problem provides an acid test of the framework , as the einstein equations contain hundreds of variables and thousands of terms . </S>"
  ]
}