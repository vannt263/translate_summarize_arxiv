{
  "article_text": [
    "we build upon functional arithmetical systems @xmath10 and ( the light annotated ) @xmath11 from @xcite . while _ verifying system _",
    "@xmath10 basically is the arithmetic @xmath12 of berger , buchholz and schwichtenberg @xcite in a slightly different presentation which is more suitable for light functional synthesis and features full classical logic ( without strong existence ) and full extensionality , our @xmath10 is mostly a natural deduction presentation of the so - called from @xcite , basically a double - negation , -gentzen embedding of classical into heyting arithmetic @xmath13 .",
    "] , its light counterpart @xmath11 is only partly classical .",
    "moreover , the _ input system _",
    "@xmath11 is weakly extensional and its contraction ( and hence also induction ) rule is restricted for soundness of the ( light ) functional interpretation of @xmath11 into @xmath10 . in computing terms ,",
    "the program synthesis algorithm provided by the light dialectica ( of @xcite , as inherited from the one of @xcite ) terminates without error only modulo the above - mentioned restrictions on extensionality and contraction .    for ( light )",
    "modal functional synthesis we will use the same verifying system @xmath10 . the simpler input system @xmath14 is obtained by adding @xmath2 to a restricted variant of @xmath10 .",
    "this modal arithmetic will be proved sound via the _ modal dialectica interpretation_. the fully - fledged input system @xmath15 adds to @xmath14 all light universal quantifiers and is a modal extension of @xmath11 ; its soundness will be given by the light modal dialectica interpretation .",
    "we will not detail here the arithmetics @xmath10 and @xmath11 , but rather refer the reader to @xcite .",
    "we mostly enumerate the new items that are added in order to get @xmath14 and respectively @xmath15 . _",
    "( systems @xmath10 and @xmath11 are retaken in the appendix section ) _    the sets of finite types terms ( of s @xmath0 ) , formulas @xmath16 ( of @xmath10 ) and , with the addition of @xmath2 , formulas @xmath17 of @xmath14 and @xmath18 of @xmath15 are defined as follows : @xmath19 \\term\\quad & s , t & \\bndef x^\\rho \\bnor \\true^\\bool \\bnor \\false^\\bool    \\bnor \\zero^\\natt \\bnor \\succ^{\\natt\\natt } \\bnor \\if^{\\bool\\rho\\rho\\rho }   \\bnor \\rec^{\\natt\\rho(\\natt\\rho\\rho)\\rho } \\bnor ( \\lbda{x^\\rho } { t^\\sigma})^{\\rho\\sigma }   \\bnor ( t^{\\rho\\sigma } s^\\rho)^\\sigma\\\\[2pt ] \\fmla\\quad & a , b & \\bndef \\atom{t^\\bool }   \\bnor a\\limp b \\bnor a \\land b \\bnor \\fa x^\\rho a   \\bnor\\ , \\ex x^\\rho a\\;\\eqbdl\\;\\lnot\\fa x^\\rho\\lnot a\\\\[2pt ] \\fmlam\\quad & a , b & \\bndef \\atom{t^\\bool }   \\bnor a\\limp b \\bnor a \\land b \\bnor \\fa x^\\rho a \\bnor\\ , \\necsy a \\bnor \\cpossy a\\;\\eqbdl\\;\\wpossy a\\\\[2pt ] \\fmlaml\\quad & a , b & \\bndef \\atom{t^\\bool }   \\bnor a\\limp b \\bnor a \\land b \\bnor \\fa x^\\rho a \\bnor \\necsy a \\bnor\\ , \\fa_{\\set{\\eset,+,-,\\pm } } x^\\rho a \\end{aligned}\\ ] ] recall that we employ just two basic types : integers @xmath20 and booleans and use @xmath21 for building blocks for terms are the usual constructors for booleans ( @xmath22 ) and integers ( @xmath23 ) , case distinction and recursion the operator @xmath24 returns the set of free variables of its argument @xmath25 or @xmath26 .",
    "atomic formulas are decidable by definition , as they are identified with boolean terms .",
    "in particular , we have decidable falsity and truth as usual , we abbreviate by + for the necessity operator @xmath2 we have the following _ enhanced _ introduction rule , which applies to many more premise sequents than usual ( as the context @xmath27 may be inhabited , see also remark [ rmk_necintrorev ] in section [ sec_lmd ] for an extended motivation ) : + , + the following axioms of modal propositional logic @xmath1 are part of @xmath14 and @xmath15 : +   + in fact only @xmath28 is needed as axiom of our non - standard modal systems . of course , @xmath29 and @xmath30 were syntactically deducible from @xmath28 and respectively @xmath31 already in the propositional modal system @xmath1 , only using minimal logic ( the proof of @xmath30 also uses @xmath32 and the empty - context @xmath33 ) .",
    "it turns out that also @xmath31 and @xmath32 are easily deducible in @xmath14/@xmath34 just from @xmath28 ( and only using minimal logic ) , given our very liberal necessity introduction rule , see definition [ def_necintro ] below .",
    "note that stability @xmath35 needs to be restricted already for @xmath14 , due to the necessary restriction on contraction , see remark [ rmk_contraction ] further below , remark [ rmk_mvspsm ] in section [ sec_lmd ] and section 3.1 of @xcite .",
    "+ we denote by @xmath36 the so - called , since its translation by modal dialectica coincides with its modified realizability interpretation .    _",
    "[ def_mdi ] the interpretation does not change atomic formulas , assuming and are already defined , as an immediate consequence , _    _ [ def_lmdi ] the following are added to the above ( the deduced translation of @xmath37 is outlined below for use at the end of section [ sec_lmd ] ) : _    the light modal translation of formulas only adds @xmath38 to our light functional translation from @xcite .",
    "the definition of _ computation relevance _ of ( light ) modal formulas @xmath39 is basically the same as for non - modal formulas , relative to the enhanced syntactic context .",
    "namely , @xmath39 is _ realization relevant _ also under ( light ) modal dialectica if the tuple of witness variables @xmath40 of its translation @xmath41 is not empty and similarly @xmath39 is _ refutation relevant _ if the tuple of challenge variables @xmath42 is not empty .",
    "see remark 1 in section 3 of @xcite .",
    "correspondingly , @xmath39 is _ realization irrelevant _ if it is not realization relevant ( i.e. , @xmath40 is an empty tuple ) , and @xmath39 is _ refutation irrelevant _ if it is not refutation relevant ( i.e. , @xmath42 is an empty tuple ) , see also the more technical definition 1 in section 2 of @xcite .",
    "[ def_necintro ] _ the restriction on @xmath33 depends on programs synthesized from the proof of the premise @xmath39 of this rule , unless all formulas in the context @xmath27 are refutation irrelevant or @xmath39 is refutation irrelevant , see the paragraph following theorem [ soundness ] in section [ sec_lmd ] below .",
    "_ thus input proofs are inductively defined together with their extracted programs ( and their corresponding output proofs ) .    in an automated interactive search for modal input proofs of a given specification",
    ", we can temporarily allow @xmath33 and postpone the validity check for when the proof of its premise is fully constructed .",
    "this approach would be similar to the check in the actual minlog system , see @xcite , and to the so - called from @xcite .    for efficiency reasons ,",
    "we recommend the use of modal operators whenever possible instead of the above partly ( or non ) computational quantifiers @xmath43 , @xmath44 , @xmath45 and @xmath46 .",
    "thus it makes sense to study the ( pure ) modal dialectica in itself , as the use of such light quantifiers may not be necessary in many cases of interest",
    ". it should be much easier to construct a purely modal ( i.e. , without light quantifiers ) input proof , also for a ( semi ) automated proof - search algorithm .",
    "nevertheless , it is the light variant of modal dialectica which provides the larger range of possibilities , particularly for situations where the simpler , modal dialectica does not suffice .",
    "[ rmk_contraction ] we upgrade the restriction from @xcite on the _ computationally relevant contractions _ ( those on refutation relevant open assumptions @xmath39 ) , such that the interpretation @xmath47 must be decidable ( rather than strictly quantifier - free ) . in the new modal context",
    "one needs to take into account also the translation of the necessity operator , as this introduces new quantifiers .",
    "these may alter the decidability of the translated formula ( relative to the corresponding non - modal formula obtained by wiping out all instances of @xmath2 ) .",
    "e.g. , let @xmath48 be a decidable predicate s.t .",
    "@xmath49 is not decidable ( take kleene s @xmath50 predicate which is expressible in peano arithmetic , hence also in @xmath10 , so that @xmath51 expresses the halting problem )",
    ". then @xmath52 can be a contraction formula , whereas @xmath53 can not , as its translation is @xmath54 , an undecidable formula , since @xmath55 .",
    "+ on the other hand , both and can be contraction formulas , since @xmath56 is decidable .",
    "the following metatheorem gives the general pattern in which soundness theorems for dialectica - based interpretations can be expressed , in a natural deduction setting .",
    "[ soundness ] + let @xmath57 be a sequence of formulas of @xmath58 with @xmath59 all their free variables . if the sequent is provable in then terms @xmath60 can be automatically synthesized from its formal proof , such that the translated sequent is provable in where the following _ free variable condition _ holds : and here are tuples of fresh variables , equal avars share a common such tuple .    in @xcite the above was thoroughly proved for @xmath61 and @xmath62 . below we prove that ( meta)theorem [ soundness ] remains valid also for the pairs ( modal dialectica ) and ( light modal dialectica ) , which share the same @xmath62 .",
    "+ we can now complete the definition of @xmath33 : _ the restriction is that _",
    "@xmath63 _ in the translated premise sequent _ this ensures that the introduction rule @xmath64 can be applied for variables @xmath65 and thus the conclusion sequent is witnessed by the same realizers as the premise .",
    "axioms @xmath28 , @xmath29 , @xmath31 , @xmath30 and @xmath32 are realizable in @xmath10 under the ( light ) modal dialectica translation .",
    "* proof:*the translation of @xmath28 is @xmath66 and we can take @xmath67 to be the identity @xmath68 . similarly , the translation of @xmath29 is @xmath69 and we can take @xmath70 to be the projection @xmath71 . for @xmath31 and @xmath30 it is immediate that @xmath72 and also @xmath73 , thus the realizer is again the identity in both cases . in the translation of @xmath32 below , we take @xmath74 , which can easily be proved to be a realizer .    given the above lemma and comments , we have completely established the following :    theorem [ soundness ] .",
    "theorem [ soundness ] .",
    "the next result pictures the limits of our modal extension of dialectica interpretation .",
    "axiom @xmath75 is generally not realizable under the ( light ) modal dialectica translation .",
    "+    * proof:*the translation of @xmath76 is a formula of shape @xmath77 which only holds true when @xmath40 is the empty tuple , special case when @xmath76 requires no realizer at all .",
    "+ notice that @xmath78 is akin to berger s uniform existence @xmath79 from @xcite , where one does not care about the witness for @xmath80 ( which is actually deleted from the extraction ) .",
    "we can thus see @xmath81 as an extension of berger s tool to more general formulas than just existential ones . on the other hand",
    "there are situations when @xmath2 and @xmath81 are too general tools and separate annotations for each quantifier are a better answer for the problem at hand . in some of these cases",
    "it may still be possible to use the modal operators if one changes the input specification and its proof .",
    "[ rmk_necintrorev ] the usual restriction on the introduction rule for the necessity operator @xmath33 is that @xmath82 . in the natural deduction presentation of modal logic",
    ", @xmath33 can not be unrestricted or @xmath83 becomes a theorem , thus all occurrences of @xmath2 becoming redundant .",
    "our restriction on @xmath33 is strictly weaker , as , e.g. , allows any context @xmath27 whose formulas are all refutation irrelevant and any context at all if the conclusion is refutation irrelevant .",
    "thus , @xmath83 not only is possible in our pseudo - modal systems , it even defines a very interesting class of formulas , see below .",
    "[ def_necsyfmla ] formulas @xmath39 s.t .",
    "@xmath84 in @xmath14 or @xmath15 .    also due to @xmath28",
    ", it follows that @xmath85 for any necessary formula , thus placing @xmath2 in front of such @xmath39 would be logically redundant .",
    "we say that an occurrence of @xmath2 is _ meaningful _",
    "( i.e. , non - redundant ) in front of any formula that is not necessary .",
    "+ note that all refutation irrelevant formulas are necessary formulas .",
    "it is easy to see that some of the refutation relevant formulas are necessary , e.g. , @xmath86 and @xmath87 ( in fact any @xmath39 s.t . @xmath88 or @xmath89 in @xmath90 or @xmath34 ) .",
    "however , even if such formulas syntactically do require challengers , these functionals turn out to be redundant and can be soundly discarded by a @xmath2 , without the need to change any other component of the input proof .",
    "in fact , _ a formula @xmath39 is necessary iff it can be proved equivalent ( in @xmath90 or @xmath34 ) to a refutation irrelevant formula @xmath91_. indeed , for a necessary @xmath39 take @xmath92 . for the converse we can use the long implication @xmath93 , where for the last implication a contextless @xmath33 together with @xmath32 was used .",
    "+ therefore , the class captures those formulas whose negative computational content can always be erased regardless of the context in which they are used . on the other hand , there are cases when @xmath2 can soundly be applied to a non - necessary formula , leading to cleaner and more efficient extracted programs ( see section [ sec_ex ] below ) .",
    "[ rmk_mvspsm ] it would appear that our input arithmetic @xmath14 is able to prove new modal theorems and even sentences that are invalid in s semantics . on the other hand ,",
    "our restriction on contraction is not present in the usual first - order modal logic systems , thus some of the classical modal theorems will no longer be theorems of @xmath14 .",
    "therefore , _ we say that our input systems are rather than modal_. see @xcite for extensive comments on the design of formalisms for predicate modal logic , particularly on the yet - unsatisfactory definition of necessity introduction in natural deduction systems .",
    "contraction restriction notwithstanding , we give the optimal restriction for @xmath33 in view of automated program synthesis .",
    "however , this does not solve the issue for general , fully - fledged first - order modal logics .",
    "as first argued in @xcite , induction ( for natural numbers , but more generally also for lists , as naturals @xmath20 are a particular case of inductively defined lists ) should rather be treated in a modified realizability style whenever possible under dialectica extraction . in our non - standard modal context",
    "we can introduce the following _ modal induction _",
    "rule of systems @xmath14 and @xmath15 , which is defined with a kreisel implication at the step : +   + this is an upgrade of the similar rule from @xcite ( given at the linear logic sublevel , see also @xcite ) , as it allows for non - empty contexts . while the base context @xmath27 is unrestricted , the step context @xmath94 is made entirely of refutation irrelevant assumptions of shape @xmath95 .",
    "thus the step context restriction as for @xmath96 ( see appendix ) is bluntly satisfied , since this only concerned refutation relevant assumptions ( whose translations in @xmath10 had to be quantifier - free , as their decidability was needed for case distinction in their corresponding challenge realizers ) .",
    "note that if @xmath97 already is refutation irrelevant , placing @xmath2 in front of @xmath97 is somewhat redundant .",
    "we could refine @xmath98 by splitting the step context into @xmath99 which consists of refutation irrelevant assumptions not of shape @xmath95 and @xmath100 .",
    "nonetheless such @xmath99 were made of necessary formulas ( cf .",
    "definition [ def_necsyfmla ] ) .",
    "the treatment of @xmath98 under ( light ) modal dialectica is much easier than the one of @xmath96 .",
    "in fact @xmath98 is a good simplification of @xmath96 for situations when the whole context is made entirely of refutation irrelevant assumptions but @xmath101 is a refutation relevant formula .",
    "the challenger for @xmath101 in the step conclusion would be unneededly produced during the treatment of such @xmath96 , as it becomes no part of any of the witnesses for the conclusion sequent .",
    "placing @xmath2 in front of the negatively positioned @xmath101 thus ensures a minimal optimization brought by @xmath98 , in this particular case simply by elimination of redundancy : the conclusion witnessing terms are the same as for @xmath96 .    a more serious optimization concerns the challengers of @xmath102 for refutation relevant assumptions @xmath103 from the @xmath27 context .",
    "these are simply preserved by @xmath98 , while under @xmath96 they had to include the challengers for the step @xmath101 .",
    "if @xmath101 were refutation irrelevant , it would still make sense to use @xmath98 instead of @xmath96 , if one is not interested in the challengers for the refutation relevant assumptions from the step context .",
    "while for such particular @xmath96 we already have the preservation of challengers for refutation relevant assumptions strictly from @xmath27 , still challengers for the refutation relevant step assumptions are more complex in the conclusion sequent ( they include a meaningful recursion , even though here a challenger for the step negative @xmath101 is no longer comprised since it does not exist ) . thus @xmath98 can bring an improvement over @xmath96 by wiping out the step challengers altogether , should these not be needed in the global construction of the topmost realizers for the goal specification .",
    "it turns out that @xmath98 strictly optimizes @xmath96 in many ( if not most ) situations . yet",
    "@xmath96 will have to be used also in our non - standard modal context , practically whenever @xmath98 simply can not be applied for the goal at hand .",
    "the weak extensionality of modal input systems @xmath14 and @xmath15 can better be expressed by means of the following _ modal compatibility axiom _ ( the usual compatibility axiom , but with the outward implication changed to a kreisel implication ) @xmath104 by straightforward calculations , it is easy to see that @xmath105 is realizable under ( light ) modal dialectica by simple projection functionals , with the verification in the fully extensional @xmath10 given by the corresponding compatibility axiom @xmath106 , see @xcite .    in @xcite the following class of examples was considered : theorems of the form @xmath107 possibly with parameters , where the negative information on @xmath40 is irrelevant , while the one on @xmath42 is of our interest",
    ". then it must be possible to adapt the proof of to a proof in @xmath14 or @xmath15 of @xmath108 . as noticed by oliva in @xcite ,",
    "the fibonacci example first treated with dialectica in @xcite falls into this category .",
    "oliva also suggested an interesting example , which motivated the definition of our positively computational quantifier @xmath43 ( see @xcite ) : `` any infinite set @xmath109 of natural numbers contains numbers which are arbitrarily apart '' .",
    "the claim can be formalized as follows : @xmath110 this statement can be proved only via a contraction on the premise , and as a result @xmath111 is refuted by a term involving case distinction on @xmath112 . however ,",
    "if only the witnesses of @xmath113 and @xmath114 are needed , then the redundant challenge for @xmath111 can be discarded by using a @xmath2 in front of the premise , effectively applying a kreisel implication .",
    "this example is of the form and can be treated both with the hybrid dialectica from @xcite and with the extended light dialectica interpretation from @xcite .",
    "the example can be extended so that the premise becomes more involved @xcite : @xmath115 again , a contraction must be used , and two semi - computational quantifiers need to be applied to erase the negative computational content : @xmath116 however , this solution is not desirable , as the light annotations would only apply to a special class of binary relations @xmath117 for which the witness @xmath113 for @xmath118 does not depend computationally on the witness @xmath119 for @xmath120 for any @xmath121 , hence reducing the generality of the claim .",
    "one of the solutions would be to extend the light annotations to implications as in @xcite , however a much simpler and more elegant approach would be to use a kreisel implication .",
    "the negative content of the premise will be fully erased and the positive one will be fully preserved , achieving a modified realizability effect .",
    "we will consider another relevant case study , known as the `` integer root example '' , which was suggested by berger and schwichtenberg in @xcite : `` every unbounded integer function has an integer root function '' .",
    "the example can be formalized as follows : @xmath122 the claim can be proved by contradiction using induction on the formula @xmath123 . however , in addition to computing the integer root , the ( heavy ) dialectica also extracts a complicated recursive counterexample for @xmath111 , with a case distinction on each step @xcite .",
    "this term challenges the outermost premise , which forms the refutation relevant induction context shared by the base and the step formulas .",
    "the undesired negative content can be erased by a kreisel implication , which converts the context to a necessary one , allowing the application of the modal induction rule . as a result , only the integer root is extracted , and additional artifacts are omitted .",
    "note that , in contrast to the previous two examples , this proof is classical , so modified realizability is not applicable in this case .",
    "however , using @xmath124 would still achieve the same cleaning effect @xcite .",
    "modal dialectica provides the means of using both modified realizability and s dialectica at the same time for more efficient program extraction .",
    "this was already the case for the hybrid dialectica of @xcite , but here we eliminate the detour to the linear logic sublevel . disregarding the light quantifiers , ( pure )",
    "modal dialectica represents ( directly at the supra - linear logic level ) a good combination of the original proof interpretations , with the possibility of carrying out both in a sound way on certain input proofs .",
    "all one needs is that some implications of the input proof can be seen as kreisel implications .    a natural continuation of the work reported in this paper concerns the addition to our input systems of strong ( intuitionistic ) elements .",
    "besides the strong @xmath125 and its light associated @xmath126 ( originally from @xcite where it was denoted @xmath127 , see also @xcite ) , _ strong possibility _ @xmath128 also needs to be considered as the intuitionistic dual of necessity @xmath2 .    the following clauses",
    "would then be added to definition [ def_mdi ] for getting the _ strong modal dialectica _",
    "interpretation @xmath129 and @xmath130 , and further @xmath131 to definition [ def_lmdi ] in order to obtain the _",
    "strong light modal dialectica _ interpretation .",
    "intuitionistic ( light ) modal arithmetical systems will first be considered at input for program synthesis .",
    "then their enhanced classical counterparts will be interpreted , modulo some negative translation .",
    "such systems will soundly extend @xmath14 with @xmath128 and @xmath125 , and @xmath15 also with @xmath126 .",
    "nevertheless certain restrictions may need to be applied on @xmath14 and/or @xmath15 before attempting such extensions with intuitionistic elements .",
    "* acknowledgements : * our first reading of predicate modal logic was @xcite , a rare small and complete presentation of the topic , recommended by prof .",
    "schwichtenberg , to whom we are grateful .",
    "thanks to diana ratiu for providing us a copy of this book .",
    "many thanks to paulo oliva for valuable comments on an early draft of this paper .    10    j.  avigad and s.  feferman .",
    "gdel s functional ( `` dialectica '' ) interpretation . in s.",
    "r. buss , editor , _ handbook of proof theory _ ,",
    "volume 137 of _ studies in logic and the foundations of mathematics _ , pages 337405 .",
    "north holland , amsterdam , 1998 .",
    "u.  berger .",
    "program extraction from normalization proofs . in m.",
    "bezem , editor , _ typed lambda calculi and applications _ , volume 664 of _ lecture notes in computer science _ ,",
    "pages 91106 .",
    "springer verlag , 1993 .",
    "u.  berger and h.  schwichtenberg .",
    "program extraction from classical proofs . in d.",
    "leivant , editor , _ logic and computational complexity workshop ( lcc94 ) _ , volume 960 of _ lecture notes in computer science _",
    ", pages 7797 .",
    "springer , berlin , 1995 .",
    "u.  berger , h.  schwichtenberg , and w.  buchholz .",
    "refined program extraction from classical proofs .",
    ", 114:325 , 2002 .",
    "linear logic .",
    ", 50(1):1102 , 1987 .",
    "k.  gdel .",
    "ber eine bisher noch nicht bentzte erweiterung des finiten standpunktes .",
    "+ , 12:280287 , 1958 .",
    "hernest . .",
    "phd thesis , cole polytechnique and universitt mnchen , 2006 .",
    "http://www.cs.au.dk/~danher/teza/thesfull.pdf .",
    "light dialectica program extraction from a classical fibonacci proof .",
    "+ , 171(3):4353 , 2007 .",
    "hernest and p.  oliva .",
    "hybrid functional interpretations . in a.",
    "beckmann , c.  dimitracopoulos , and b.  lwe , editors , _ logic and theory of algorithms : 4th  computability in europe \" conference , athens , greece _ , volume 5028 of _ lecture notes in computer science _",
    ", pages 251260 .",
    "springer verlag , 2008 .",
    "hernest and t.  trifonov .",
    "light dialectica revisited . , 161:13791389 , 2010 .",
    "http://dx.doi.org/10.1016/j.apal.2010.04.008 .",
    "u.  kohlenbach . a note on spector s quantifier - free rule of extensionality .",
    "+ , 40:8992 , 2001 .",
    "g.  kreisel",
    ". interpretation of analysis by means of constructive functionals of finite types . in a.",
    "heyting , editor , _ constructivity in mathematics _ , pages 101128 .",
    "north holland , 1959 .",
    "s.  negri and j.  von plato .",
    "proof analysis .",
    "manuscript , 2009 .",
    "243 pp .",
    "p.  oliva .",
    "modified realizability interpretation of classical linear logic . in _ proceedings of the 22nd annual ieee symposium on logic in computer science_. ieee press , 2007 .",
    "p.  oliva .",
    "hybrid functional interpretations of linear and intuitionistic logic . ,",
    "http://dx.doi.org/10.1093/logcom/exq007 .",
    "k.  schtte . .",
    "springer , 1968 .",
    "h.  schwichtenberg .",
    "minlog system documentation .",
    "http://www.math.lmu.de/~logik/minlog/documentation.php , december 2011 .",
    "t.  trifonov .",
    "dialectica interpretation with fine computational control . in k.",
    "ambos - spies , b.  lwe , and w.  merkle , editors , _ mathematical theory and computational practice : 5th  computability in europe \" conference , heidelberg , germany _ , volume 5635 of _ lecture notes in computer science _ , pages 467477 .",
    "springer verlag , 2009 .",
    "t.  trifonov . .",
    "phd thesis , university of munich , germany , 2011 .",
    "a.  s. troelstra . , volume 344 of _ lecture notes in mathematics_. springer - verlag , 1973 .",
    ".basic axioms , with @xmath106 replaced by @xmath132 rule in @xmath11 [ cols=\"^,^ \" , ]",
    "we use a special ( abbreviated ) presentation of our systems , where proofs are represented as sequents meaning that formula @xmath91 is the root of the tree whose leaves @xmath27 are typed assumption variables ( abbreviated ) here formula @xmath39 is the type of the avar and @xmath27 is a multiset ( since there may be more leaves labeled with the same ) .      the logical rules of system @xmath10 are presented in table with the usual restriction on universal quantifier introduction @xmath133 that at @xmath134 $ ] denotes the multisubset of all occurrences of @xmath135 in the multiset of assumptions of the premise sequent of thus hence @xmath135 is no longer an assumption in the conclusion sequent of in the tree , this means that all the leaves labeled @xmath135 are inactivated ( or as one usually says in natural deduction terminology ) .",
    "whereas in @xmath10 alone we could have safely let all contractions be handled implicitly at in relationship with the architecture of input system @xmath11 ( see section [ sec_isys ] ) we are compelled to introduce for @xmath10 the _ contraction anti - rule _ in association with of @xmath11 , see table [ con - rules ] .",
    "we refer to contraction as , rather than because , despite the sequent - like representation of our calculi , in fact our formalisms are and in the directed tree the representation of explicit contractions is by convergent arrows that go in the direction which is reverse to the direction of all the other rules .",
    "we find it convenient to introduce induction for booleans and naturals as the rules presented in table here we assume that the induction variables @xmath136 and respectively @xmath137 do not occur freely in nor and that they do occur in the formula    computation in @xmath10 is expressed via the usual @xmath138-reduction rule plus rewrite rules defining the computational meaning of @xmath139 and @xmath140   \\if\\,\\false\\,s\\,t\\;&\\converts\\;t&\\qquad\\qquad   \\rec\\,(\\succ n)\\,s\\,t\\;&\\converts\\;t\\,n\\,(\\rec\\,n\\,s\\,t ) \\end{array}\\ ] ] since this typed term system is confluent and strongly normalizing ( cf .",
    "@xcite ) , we are free not to fix a particular evaluation strategy . for simplicity , we assume that all terms occurring in proofs are automatically in normal form .",
    "in fact , normalization is necessary only when matching terms in formulas .",
    "we only avoid introducing equality axioms @xmath141 as in @xcite and skip the corresponding easy applications of @xmath106 . when building proofs , some computation is thus carried out implicitly , behind the scene .",
    "using recursion at higher types we can define any provably total function of ground arithmetic , including decidable predicates such as equality @xmath142 for booleans and @xmath143 for natural numbers :    the @xmath144 construction allows us to view boolean programs as decidable predicates .",
    "given its logical meaning is settled by the truth axiom see table in this way we can define predicate equality at base types as for and further at higher types extensionally as usual it is straightforward to prove by induction on @xmath145 that @xmath146 is reflexive , symmetric and transitive at any type    to complete our system , we must include in @xmath10 also the compatibility ( i.e. , extensionality ) axiom see table note that ex falso quodlibet ( @xmath147 ) and stability ( @xmath148 ) are fully provable in @xmath10 ( cf .",
    "@xcite , by induction on using @xmath149 and @xmath150 ) .",
    "light formulas @xmath151 are built over usual formulas @xmath16 of @xmath10 by adding the three light universal quantifiers : the non - computational @xmath45 and the two semi - computational @xmath43 and in order to stress the distinction of @xmath11 from @xmath10 it is convenient to rename @xmath10 s @xmath152 to @xmath153 in @xmath11 ( which marks the whole computational content , both positive and negative ) @xmath154 thus , system @xmath11 refines the clone of @xmath10 ( also with @xmath132 for @xmath106 and for ) with introduction and elimination rules for the light quantifiers ( see table [ isys - rules ] ) .",
    "these are copies of the clone rules @xmath155 and but with the usual restriction on @xmath156 that @xmath157 enhanced with the following conditions referring to the    * at the rule , @xmath158 may be used computationally only positively , + @xmath158 must not be free in the _ challengers _ of the of + * at the rule , @xmath158 may be used computationally only negatively , + @xmath158 must not be free in the _ witnesses _ of the of + * at @xmath158 may not be used computationally at all , both and .    notice that the restrictions , and assume knowledge of the of whole proofs , in their full depth , thus forcing the definition of @xmath11 proofs to go inductively in parallel with the of part of their computational content ( namely free variables of the extracted terms ) .",
    "we simultaneously define the classes of _ realization irrelevant _ @xmath159 and _ refutation irrelevant _",
    "@xmath160 formulas as follows : @xmath161    one necessary change when adopting principles from is to replace @xmath106 with a weak compatibility rule .",
    "this is because dialectica is unable to interpret full extensionality ( cf .",
    "we here employ an upgraded variant of the @xmath132 rule from @xcite : @xmath162 where all formulas in @xmath163 are refutation irrelevant .",
    "the computationally irrelevant contractions in @xmath11 can safely be handled implicitly at the situation is different for those contractions whose formula is refutation relevant ( i.e. , the computationally relevant contractions ) , as we want to automatically ensure that their translation is decidable ( instead of leaving the task of decidability check to the user ) .",
    "we achieve this by including in @xmath11 the _ contraction anti - rule _ ( see table [ con - rules ] ) for all formulas @xmath39 that are refutation relevant and ( ) do not contain any nor this triggers the addition to of an explicit ( unrestricted ) contraction anti - rule which is needed in the construction of the verifying proof ( it only applies to quantifier - free formulas @xmath47 ) .",
    "the restriction ensures that all contraction formulas that require at least one challenger term for their will have quantifier - free ( hence decidable ) .",
    "their decidability is necessary for attaining soundness .",
    "being a purely syntactical criterion , does not admit formulas whose contain quantifiers , but could nevertheless be decidable ,    moreover , in order to avoid having any computationally relevant contractions implicit in thus , whenever a double occurrence of a refutation relevant assumption is created in a conclusion sequent by one of the binary rules of such sequent can not be directly a premise for the application of an(other ) @xmath11 rule : the anti - rule @xmath164 must be applied first , in order to eliminate the critical double .",
    "if is not satisfied and yet @xmath135 is a refutation relevant assumption occurring at least twice in some conclusion sequent , this is a dead end : such sequent can only be the root of the @xmath11 proof - tree .    while remains fully provable also in @xmath11 ( for all formulas @xmath165 ) the situation changes for in the case of many formulas",
    "@xmath39 that feature light quantifiers in certain places .",
    "as noted in @xcite , the usual proof in @xmath10 of @xmath148 ( constructed by induction on @xmath39 ) makes unavoidably use of contractions over for subformulas of and these are subject to the restriction for refutation relevant even when such obey , they may lead to the failure of restrictions , or . on",
    "the other hand @xmath148 is provable in @xmath11 for @xmath26 or @xmath39 conjunction - free .",
    "with each formula @xmath39 of @xmath11 we associate its : a not necessarily quantifier - free formula of @xmath10 where @xmath166 are tuples of fresh variables , not appearing in the variables @xmath40 in the superscript are called the _ witness variables _ , while the subscript variables @xmath42 are called the _",
    "challenge variables_. terms @xmath167 substituting witness variables ( like ) are called _ realizing terms _ or and terms @xmath168 substituting challenge variables ( like ) are called _ refuting terms _ or .",
    "intuitively , the of @xmath39 can be viewed as a game in which first ( @xmath125 ) and then ( @xmath169 ) make one move each by playing type - corresponding objects @xmath167 and @xmath168 for the tuples @xmath40 and respectively formula @xmath41 specifies the , here not necessarily decidable : eloise wins iff in our light context as well , has a winning move whenever @xmath39 is provable in the will explicitly provide it from the input @xmath11 proof of @xmath39 as a tuple of witnesses ( @xmath170 ) together with the _ verifying proof _ in of ( eloise wins by @xmath167 regardless of the instances @xmath168 for s @xmath42 ) .",
    "_ [ def_ldt ] the interpretation does not change atomic formulas , assuming @xmath41 and are already defined , the interpretation of the four universal quantifiers is ( upon renaming , we assume that quantified variables occur uniquely in a formula ) : since we get it is straightforward to compute that the length and types of the witnessing and challenging tuples are uniquely determined .",
    "_      we here give the of the weak compatibility rule @xmath171 where all formulas in @xmath163 are refutation irrelevant , the negative position in their is empty . by definition of equality at higher types , @xmath172 is @xmath173 , a purely universal formula .",
    "we are given that where @xmath174 , @xmath175 ( empty tuple ) , @xmath176 is @xmath172 and @xmath65 corresponds to @xmath177 , thus the above is more conveniently rewritten as to this we can apply the generalization rule , as @xmath65 are not free in the translated context @xmath178 ; indeed , @xmath65 are fresh variables and they could have appeared free only via terms @xmath179,  ,@xmath180 , were these not empty tuples ( hence the need for restricting the original context ) .",
    "we thus obtain @xmath181 and further apply the extensionality axiom to get @xmath182 .",
    "note that the axiom is required here , as @xmath178 may contain general formulas .",
    "with @xmath183 and @xmath184 we have thus constructed a verifying proof the new realizing terms @xmath185 are closed , hence the free variable condition trivially holds .      since the induction rule ( for naturals ) corresponds to a virtually unbounded number of contractions of each assumption from the step context @xmath186 ( cf .",
    "@xcite , see table [ ind - rules ] ) , its clone in the system @xmath11 is subject to a restriction like the one of namely , we need to require that _ all refutation relevant avars in @xmath186 satisfy _ .",
    "moreover , since the contractions on @xmath187 will be handled differently than for simple binary rules like @xmath188 or it is more convenient to require that naturals induction in @xmath11 implicitly contracts all its refutation relevant assumptions ( instead of using the explicit @xmath164 ) .",
    "we will use the notation @xmath189 for a special multiset union in which refutation relevant assumptions appear only once , even if they appear in both @xmath27 and thus the @xmath96 rule of @xmath11 is finally obtained by replacing with in the conclusion sequent of     a ( )  a(n ) a(n )  a(n ) +    we are given @xmath190}&\\prfg&\\ldint{a(\\zero)}{\\ur}{\\uy}\\end{aligned}\\ ] ] and @xmath191}&\\prfg & \\ldint{a(n)}{\\ux}{\\ut\\ux\\uv}\\ \\limp\\ \\ldint{a(\\succ n)}{\\us\\ux}{\\uv}\\end{aligned}\\ ] ] we show that @xmath192\\uv}\\;\\limp\\;\\ldint{a(n)}{\\utp[n]}{\\uv}\\,\\big)\\end{aligned}\\ ] ] is a theorem of where @xmath193&\\eqbdl&\\rec\\,n\\,r\\,(\\lambda n.s)\\end{aligned}\\ ] ] for every corresponding pair and will be constructed as functional terms depending on we here intentionally use the same variable that occurs freely in and implicitly , just denotes also will be constructed as the collection of all ( corresponding to ) and ( corresponding to ) .    let be a refutation relevant avar in let and/or be the challengers for in and/or if appears only in ( hence not in ) we define",
    "@xmath194&\\eqbd&\\rec\\,n\\,(\\lambda\\uv.\\ugmp[\\uv])\\ , \\big(\\lambda n , p,\\uv.p(\\uttpv)\\big ) \\end{aligned}\\ ] ] if appears in then the decidability of is needed at each recursive step to equalize the terms obtained by the recursive call with the corresponding terms thus the right stop point of the backwards construction is provided .",
    "in fact an implicit contraction over happens at each inductive step and guarantees that is decidable . for let @xmath195&\\eqbd&\\rec\\,n\\,(\\lambda\\uv.\\ugmp[\\uv])\\,\\big(\\lambda n , p,\\uv .",
    "\\if(\\ldint{b}{\\uzp}{\\udtp[\\utp;\\uv]})\\,\\big(p(\\uttpv)\\big)\\,\\udtp[\\utp;\\uv ] \\big)\\end{aligned}\\ ] ] and for we define its by replacing in the with canonical zeros . here",
    "are the challenge variables corresponding to formula notice that @xmath196\\ = \\",
    "s\\sspc\\tp[n]\\\\[3pt ] \\label{eqindthree } & \\prfg & \\dspc\\uztp[\\succ n]\\uv\\ = \\",
    "\\uztp[n](\\uttpv)\\\\[3pt ] \\label{eqindnew}&\\prfg & \\dspc\\uzts[\\succ n]\\uv\\ = \\   \\,\\if\\,(\\ldint{b}{\\uzp}{\\udtp[\\utp;\\uv]})\\ ; \\big(\\uzts[n](\\uttpv)\\big)\\ \\,\\udtp[\\utp;\\uv]\\end{aligned}\\ ] ] we attempt to extend to the whole by proving from the following @xmath197\\uv}&\\prfg & \\uzts[\\succ n]\\uv\\ = \\",
    "\\uzts[n](\\ut\\,\\utp\\uv)\\end{aligned}\\ ] ] we obtain this as an immediate consequence of @xmath198\\uv } & \\prfg&\\ldint{b}{\\uzp}{\\udtp[\\utp;\\uv]}\\end{aligned}\\ ] ] assuming by we get hence and + thus follows via ( which is fully available in the verifying system ) .",
    "we now prove by an assumptionless induction on let be the collection of all and those corresponding to for it is sufficient that @xmath199\\uv}&\\prfg & \\ldint{a(\\zero)}{\\utp[\\zero]}{\\uv}\\end{aligned}\\ ] ] which follows from since by definition we have and by definitions and we have  now given we want to prove @xmath200\\uv }   & \\prfg&\\ldint{a(\\succ n)}{\\utp[\\succ n]}{\\uv}\\end{aligned}\\ ] ] to we apply and via easy deductions in we get @xmath201 ( \\uttpv ) } & \\prfg&\\ldint{a(n)}{\\ut'[n]}{\\uttpv}\\end{aligned}\\ ] ] with and we can rewrite to @xmath202\\uv }   & \\prfg&\\ldint{a(n)}{\\ut'[n]}{\\uttpv}\\end{aligned}\\ ] ] in we substitute and get @xmath203}&\\prfg&\\ldint{a(n)}{\\utp[n ] } { \\ut\\utp\\uv}\\,\\limp\\,\\ldint{a(\\succ n)}{\\us\\utp[n]}{\\uv}\\end{aligned}\\ ] ] which gives by means of easy deductions using and    we have treated the most general situation , with all context sets and inhabited by refutation relevant assumptions , and conclusion formula accepting both witnesses and challengers .",
    "many particular situations amount to easier treatments , with simpler extracted terms .",
    "these can be obtained as simplifications of the general witnesses and challengers presented above , by means of the reduction properties of the empty tuple , which was denoted in @xcite .",
    "we outline below only those particular cases which are relevant in connection with the modal induction rule    * if contains no refutation relevant assumption , but is refutation relevant , then terms are no part of the realizers for the conclusion sequent , in this case only hence would be redundantly produced and a mechanism is needed to prevent their construction .",
    "this is ensured by @xmath2 in front of the step at + * if is refutation relevant , has no refutation relevant element but is refutation relevant inhabited , then and are empty .",
    "yet has to be produced as and includes which is no longer the case for + * if is refutation irrelevant then and are empty tuples .",
    "thus and simplifies to ( recall and possibly ) @xmath204&\\equiv&\\rec\\;n\\;\\ugmp\\,\\big(\\,\\lambda n , p\\,.\\ ; \\if\\,(\\ldint{b}{\\uzp}{\\udtp[\\utp]})\\ p\\ \\udtp[\\utp]\\,\\big)\\end{aligned}\\ ] ]",
    "a ( )  a(n)a(n ) ,  a(n ) +    we are given @xmath205 and @xmath206 since and from the latter we easily obtain @xmath207 with for every corresponding pair we show by induction on in with base context and step context that @xmath208}{\\uv}\\end{aligned}\\ ] ] as the base is given by and the step follows from with since thus challengers are simply preserved for and witnesses are easily constructed for in the conclusion sequent of    our modal induction rule is equivalent to a special case of since a can be placed in front of from the step sequent of the equivalence of the two formulations for the step sequent can easily be proved using and extracted terms are the same and the verifying proof only gets more direct ."
  ],
  "abstract_text": [
    "<S> we extend our light dialectica interpretation @xcite to usual and light modal formulas and prove it sound for pseudo - modal arithmetics based on s @xmath0 and classical @xmath1 . </S>",
    "<S> the range of this _ light modal dialectica _ </S>",
    "<S> interpretation is the usual ( non - modal ) classical arithmetic in all finite types . </S>",
    "<S> we also illustrate the use of the new tools for optimized program synthesis with new examples .    </S>",
    "<S> this recent work comes in addition to the program extraction technology outlined in our previous paper @xcite by adding a useful device for combining the effect of previous optimizations by semi- and non - computational quantifiers in a compact one - step content eraser , namely the modal operator @xmath2 ( and its weak co - modality @xmath3 ) . beside the seemingly cosmetic improvement , we bring the following new result : _ while the modal propositional axioms of system @xmath1 are realizable , the defining axiom of @xmath4 is generally not realizable under ( light ) modal dialectica . </S>",
    "<S> _    the use and interpretation of modal operators in this paper were inspired by work of oliva ( partly joint with the first author , see @xcite ) at the linear logic sublevel , see @xcite . </S>",
    "<S> it is no coincidence that , at formulas level , our interpretation of @xmath5 is syntactically the same as oliva s modified realizability interpretation of @xmath6 in intuitionistic linear logic . </S>",
    "<S> however , a bureaucratic detour would be needed in order to simulate @xmath5 in terms of @xmath6 , which seems less suitable for an efficient computer implementation .    </S>",
    "<S> the second author independently noticed the possibility of using the same supra - linear modal operators for light program extraction in @xcite , see also @xcite . </S>",
    "<S> however , the initiative of studying the full employment of @xmath2 for more efficient program synthesis in the formal context of a classical first - order modal logic ( in the sense of , @xcite ) belongs to the first author . as we will see , for our extractive purposes it is useful to depart from s original semantics for quantified modal logic . </S>",
    "<S> e.g. , the propositional fragments of our first - order modal systems are no longer modal , but purely boolean , as @xmath7 for propositional atoms @xmath8 </S>",
    "<S> . we thus design _ pseudo _ </S>",
    "<S> ( i.e. , non - standard ) modal arithmetics for program extraction , with relative soundness syntactically given via our ( light ) modal functional interpretation by the target system , namely classical predicate arithmetic with higher - type functionals , in a natural deduction presentation .    </S>",
    "<S> we stress the fact that we are only concerned with fragments of arithmetics without undecidable predicates : _ all propositional atoms of our systems are a priori decidable . _    for an easier presentation we will give up the prefix . throughout the paper , </S>",
    "<S> our modal arithmetics are pseudo - modal . </S>",
    "<S> note that soundness of s predicate modal logics ( e.g. , @xmath9 ) is proved non - constructively , using models , see @xcite . </S>"
  ]
}