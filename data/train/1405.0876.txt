{
  "article_text": [
    "answer set programming  @xcite(asp ) is a declarative language based on logic programming and non - monotonic reasoning .",
    "the applications of asp belong to several areas , e.g. , asp was used for solving a variety of hard combinatorial problems ( see e.g. ,  @xciteand  @xcite ) .",
    "nowadays , several efficient asp systems are available  @xcite .",
    "it is well - established that , for solving empirically hard problems , there is rarely a best algorithm / heuristic , while it is often the case that different algorithms perform well on different problems / instances .",
    "it can be easily verified ( e.g. , by analyzing the results of the asp competition series ) that this is the case also for asp implementations . in order to take advantage of this fact",
    ", one should be able to select automatically the `` best '' solver on the basis of the characteristics ( called _ features _ ) of the instance in input , i.e. , one has to consider to solve an _ algorithm selection problem _  @xcite .    inspired by the successful attempts  @xcite done in the neighbor fields of sat , qsat and csp , the application of algorithm selection techniques to asp solving was ignited by the release of the portfolio solver claspfolio  @xcite .",
    "this solver imports into asp the satzilla  @xcite approach . indeed , claspfolioemploys inductive techniques based on _ regression _ to choose the `` best '' configuration / heuristic of the solver clasp .",
    "the complete picture of inductive approaches applied to asp solving includes also techniques for learning heuristics orders  @xcite , solutions to combine portfolio and automatic algorithm configuration approaches  @xcite , automatic selection of a scheduling of asp solvers  @xcite ( in this case clasp configurations ) , and the multi - engine approach .",
    "the aim of a multi - engine solver  @xcite is to select the `` best '' solver among a set of efficient ones used as _ black - box engines_. the multi - engine asp solver me - aspwas proposed in  @xcite , and ports to asp an approach applied before to qbf  @xcite .    me - aspexploits inductive techniques based on _ classification _ to choose , on a per instance basis , an engine among a selection of black - box heterogeneous asp solvers .",
    "the first implementation of me - asp , despite not being highly optimized , already reached good performance .",
    "indeed , me - aspcan combine the strengths of its component engines , and thus it performs well on a broad set of benchmarks including 14 domains and 1462 ground instances ( detailed results are reported in  @xcite ) .    in this paper",
    "we report on @xmath0 a new optimized implementation of me - asp ; and on @xmath1 a first attempt of applying algorithm selection to the entire process of computing answer sets of non - ground programs . as a matter of fact ,",
    "the asp solutions available at the state of the art employing machine - learning techniques are devised to solve ground ( or propositional ) programs , and  to the best of our knowledge  no solution has been proposed that is able to cope directly with non - ground programs .",
    "note that asp programmers almost always write non - ground programs , which have to be first instantiated by a grounder .",
    "it is well - known that such instantiation phase can influence significantly the performance of the entire solving process . at the time of this writing",
    ", there are two prominent alternative implementations that are able to instantiate asp programs : dlv  @xcite and gringo  @xcite .",
    "once the peculiarities of the instantiation process are properly taken into account , both implementations can be combined in a multi - engine grounder by applying also to this phase an algorithm selection recipe , building on  @xcite .",
    "the entire process of evaluation of a non - ground asp program can be , thus , obtained by applying algorithm selection to the instantiation phase , selecting either dlvor gringo ; and , then , in a subsequent step , evaluating the propositional program obtained in the first step with a multi - engine solver .",
    "an experimental analysis reported in the paper shows that @xmath0 the new implementation of me - aspis substantially faster than the previous version ; and @xmath1 the straight application of the multi - engine recipe to the instantiation phase is already beneficial . at the same time , it remains space for future work , and in particular for devising more specialized techniques to exploit the full potential of the approach .",
    "we next overview the components of the multi - engine approach , and we report on the way we have instantiated it to cope with instantiation and solving , thus obtaining a complete multi - engine system for computing answer sets of non - ground asp programs .    * general approach . *",
    "the design of a multi - engine solver based on classification is composed of three main ingredients : @xmath0 a set of features that are significant for classifying the instances ; @xmath1 a selection of solvers that are representative of the state of the art and complementary ; and @xmath2 a choice of effective classification algorithms .",
    "each instance in a fairly - designed _ training set _ of instances is analyzed by considering both the features and the performance of each solvers .",
    "an inductive model is computed by the classification algorithm during this phase .",
    "then , each instance in a _ test set _ is processed by first extracting its features , and the solver is selected starting from these features using the learned model .",
    "note that , this schema does not make any assumption ( other than the basic one of supporting a common input ) on the engines .    * the me - aspsolver .",
    "* in  @xcite we described the choices we have made to develop the me - aspsolver . in particular , we have singled out a set of syntactic features that are both significant for classifying the instances and cheap - to - compute ( so that the classifier can be fast and accurate ) . in detail , we considered : the number of rules and number of atoms , the ratio of horn , unary , binary and ternary rules , as well as some asp peculiar features , such as the number of true and disjunctive facts , and the fraction of normal rules and constraints .",
    "the number of resulting features , together with some of their combinations , amounts to 52 . in order to select the engines we ran preliminary experiments  @xcite to collect a pool of solvers that is representative of the state - of - the - art solver ( sota ) , i.e. , considering a problem instance , the oracle that always fares the best among the solvers that entered the system track of the 3rd asp competition  @xcite , plus dlv .",
    "the pool of engines collected in me - asp is composed of 5 solvers , namely clasp , claspd , cmodels , dlv , and idp , as submitted to the 3rd asp competition .",
    "we experimented with several classification algorithms  @xcite , and proved empirically that me - aspcan perform better than its engines with any choice .",
    "nonetheless , we selected the k - nearest neighbor ( knn ) classifier for our new implementation : it was already used in me - asp  @xcite , with good performance , and it was easy to integrate its implementation in the new version of the system .",
    "* multi - engine instantiator .",
    "* concerning the automatic selection of the grounder , we selected : number of disjunctive rules , presence of queries , the total amount of functions and predicates , number of strongly connected and head - cycle free@xcite components , and stratification property , for a total amount of 11 features .",
    "these features are able to discriminate the class of the problem , and are also pragmatically cheap - to - compute . indeed , given the high expressivity of the language , non - ground asp programs ( which are usually written by programmers ) contain only a few rules .",
    "concerning the grounders , given that there are only two alternative solutions , namely dlvand gringo , we considered both for our implementation .    concerning the classification method , we used an implementation of the part decision list generator  @xcite , a classifier that returns a human readable model based on if - then - else rules .",
    "we used part because , given the relatively small total amount of features related to the non - ground instances , it allows us to compare the generated model with respect to the knowledge of a human expert .",
    "* multi - engine system me - asp@xmath3 .",
    "* given a ( non - ground ) asp program , the evaluation workflow of the multi - engine asp solution called me - asp@xmath3  is the following : @xmath0 non - ground features extraction , @xmath1 grounder selection , @xmath2 grounding phase , @xmath4 ground features extraction , @xmath5 solver selection , and @xmath6 solving phase on ground program .",
    "[ sec : benchs ]    in this section we report the results of two experiments conceived to assess the performance of the new versions of the me - aspsystem .",
    "the first experiment has the goal of measuring the performance improvements obtained by the new optimized implementation of the me - aspsolver .",
    "the second experiment assesses me - asp@xmath3and reports on the performance improvements that can be obtained by selecting the grounder first and then calling the me - aspsolver .",
    "me - asp and me - asp@xmath3are available for download at www.mat.unical.it/ricca/me-asp . concerning the hardware employed and the execution settings , all the experiments run on a cluster of intel xeon e31245 pcs at 3.30 ghz equipped with 64 bit ubuntu 12.04 , granting 600 seconds of cpu time and 2 gb of memory to each solver .",
    "the benchmarks used in this paper belong to the suite of benchmarks , encoded in the asp - core 1.0 language , of the 3rd asp competition .",
    "note that in the 4th asp competition  @xcite the new language asp - core 2.0 has been introduced .",
    "we still rely on the language of the 3rd asp competition given that the total amount of solvers and grounders supporting the new standard language is very limited with respect to the number of tools supporting asp - core 1.0 .",
    "* assessment of the new implementation of me - asp . * the original implementation of me - aspwas obtained by combining a general purpose feature extractor ( that we have initially developed for experimenting with a variety of additional features ) developed in java , with a collection of perl scripts linking the other components of the system , which are based on the _ rapidminer _ library .",
    "this is a general purpose implementation supporting also several classification algorithms .",
    "since the cpu time spent for the extraction of features and solver selection has to be made negligible , we developed an optimized version of me - asp .",
    "the goal was to optimize the interaction among system components and further improve their efficiency .",
    "to this end , we have re - engineered the feature extractor , enabling it to read ground instances expressed in the numeric format used by gringo .",
    "furthermore , we have integrated it with an implementation of the knn algorithm built on top of the ann library ( www.cs.umd.edu/~mount/ann ) in the same binary developed in c++ . this way the new implementation minimizes the overhead introduced by solver selection .",
    "we now present the results of an experiment in which we compare the old implementation of me - asp , labelled me - asp@xmath7 , with the new one , labelled me - asp@xmath8 . in this experiment , assessing solving performance , we used gringoas grounder for both implementations , and we considered problems belonging to the _ np _ and _ beyond np _ classes of the competition ( i.e. , the grounder and domains considered by me - asp@xmath7  @xcite ) .",
    "the inductive model used in me - asp@xmath8  was the same used in me - asp@xmath7(details are reported in  @xcite ) .",
    "the plot in figure  [ fig : plot ] ( top ) depicts the performance of both me - asp@xmath7and me - asp@xmath8(dotted red and solid blue lines in the plot , respectively ) .",
    "considering the total amount of _ np _ and _ beyond np _",
    "instances evaluated at the 3rd asp competition ( 140 ) , me - asp@xmath8solved 92 instances ( 77 _ np _ and 15 _ beyond np _ ) in about 4120 seconds , while me - asp@xmath7solved 77 instances ( 62 _ np _ and 15 _ beyond np _ ) in about 6498 seconds .",
    "we report an improvement both in the total amount of solved instances ( me - asp@xmath8is able to solve 66% of the whole set of instances , while me - asp@xmath8stops at 51% ) and in the average cpu time of solved instances ( about 45 seconds against 84 ) .",
    "the improvements of me - asp@xmath8are due to its optimized implementation .",
    "once feature extraction and solver selection are made very efficient , it is possible to extract features for more instances and the engines are called in advance w.r.t .",
    "what happens in me - asp@xmath7 .",
    "this results in more instances that are processed and solved by me - asp@xmath8within the timeout .",
    "* assessment of the complete system .",
    "* we developed a preliminary implementation of a grounder selector , which combines a feature extractor for non - ground programs written in java , and an implementation of the part decision list generator , as mentioned in the previous section .",
    "the grounder selector is then combined with me - asp@xmath8 .",
    "we now present the results of an experiment in which we compare me - asp@xmath3with me - asp@xmath8 , and the sotasolver .",
    "me - asp@xmath8coupled with dlv(resp .",
    "gringo ) is denoted by me - asp@xmath8(dlv ) ( resp .",
    "me - asp@xmath8(gringo ) ) . in this case we considered all the benchmark problems of the 3rd asp competition , including the ones belonging to the _ p _ class",
    ". indeed , in this case we are interested also in grounders performance , which is crucial in the _ p _ class .",
    "the plot in figure  [ fig : plot ] ( bottom ) shows the performance of the aforementioned solvers . in the plot",
    ", we depict the performance of me - asp@xmath8(dlv ) with a red dotted line , me - asp@xmath8(gringo ) with a solid blue line , me - asp@xmath3with a double dotted dashed yellow line , and , finally , with a dotted dashed black line we denote the performance of the sotasolver .",
    "looking at the plot , we can see that me - asp@xmath8(gringo ) solves more instances that me - asp@xmath8(dlv )  126 and 111 , respectively  while both are outperformed by me - asp@xmath3 , that is able to solve 134 instances .",
    "the average cpu time of solved instances for me - asp@xmath8(dlv ) , me - asp@xmath8(gringo ) and me - asp@xmath3is 86.86 , 67.93 and 107.82 seconds , respectively .",
    "looking at the bottom plot in figure  [ fig : plot ] , concerning the performance of the sotasolver , we report that it is able to solve 173 instances out of a total of 200 instances ( evaluated at the 3rd asp competition ) , highlighting room for further improving this preliminary version of me - asp@xmath3 . indeed ,",
    "the current classification model predicts gringofor most of the _ np _ instances , but having a more detailed look at the results , we notice that claspand idpwith gringosolve both 72 instances , while using dlvthey solve 93 and 92 instances , respectively . a detailed analysis of the performance of the various asp solvers with both grounders can be found in  @xcite .",
    "it is also worth mentioning that the output formats of gringo  and dlvdiffer , thus there are combinations grounder / solver that require additional conversion steps in our implementation .",
    "since the new feature extractor is designed to be compliant with the numeric format produced by gringo , if dlv  is selected as grounder then the non - ground program is instantiated twice . moreover , if dlv  is selected as grounder , and it is not selected also as solver , the produced propositional program is fed in gringo to be converted in numeric format .",
    "these additional steps , due to technical issues , result in a suboptimal implementation of the execution pipeline that could be further optimized in case both grounders would agree on a common output format .",
    "* conclusion . * in this paper we presented improvements to the multi - engine asp solver me - asp .",
    "experiments show that @xmath0 the new implementation of me - aspis more efficient , and @xmath1 the straight application of the multi - engine recipe to the instantiation phase is already beneficial .",
    "directions for future research include exploiting the full potential of the approach by predicting the pair grounder+solver , and importing policy adaptation techniques employed in  @xcite .",
    "* acknowledgments .",
    "* this research has been partly supported by regione calabria under project pia knowrex por fesr 2007- 2013 burc n. 49 s.s .",
    "n. 1 16/12/2010 , the italian ministry of university and research under pon project `` ba2know s.i .- lab '' n. pon03pe_0001 , the autonomous region of sardinia ( italy ) and the port authority of cagliari ( italy ) under l.r .",
    "7/2007 , tender 16 2011 project `` desctop '' , crp-49656 ."
  ],
  "abstract_text": [
    "<S> me - aspis a multi - engine solver for ground asp programs . </S>",
    "<S> it exploits algorithm selection techniques based on classification to select one among a set of out - of - the - box heterogeneous asp solvers used as black - box engines . in this paper </S>",
    "<S> we report on @xmath0 a new optimized implementation of me - asp ; and @xmath1 an attempt of applying algorithm selection to non - ground programs . </S>",
    "<S> an experimental analysis reported in the paper shows that @xmath0 the new implementation of me - aspis substantially faster than the previous version ; and @xmath1 the multi - engine recipe can be applied to the evaluation of non - ground programs with some benefits . </S>"
  ]
}