{
  "article_text": [
    "a _ turing machine _ refers to a hypothetical machine proposed by alan m. turing ( 19121954 ) in 1936 @xcite whose computations are intended to give an operational and formal definition of the intuitive notion of computability in the discrete domain .",
    "it is a digital device and sufficiently simple to be amenable to theoretical analysis and sufficiently powerful to embrace everything in the discrete domain that is intuitively computable . as if that were not enough , in the theory of computation many major complexity classes can be easily characterized by an appropriately restricted turing machine ; notably the important classes p and np and consequently the major question whether p equals np .",
    "turing gave a brilliant demonstration that everything that can be reasonably said to be computed by a human computer using a fixed procedure can be computed by such a machine .",
    "as turing claimed , any process that can be naturally called an effective procedure is realized by a turing machine .",
    "this is known as turing s thesis .",
    "enter alonzo church ( 19031995 ) . over the years",
    ", all serious attempts to give precise yet intuitively satisfactory definitions of a notion of effective procedure ( what church called effectively calculable function ) in the widest possible sense have turned out to be equivalent  to define essentially the same class of processes .",
    "the church - turing thesis states that a function on the positive integers is effectively calculable if and only if it is computable .",
    "an informal accumulation of the tradition in s. c. kleene ( 1952 ) @xcite has transformed it to the computability thesis : there is an objective notion of effective computability independent of a particular formalization .",
    "the informal arguments turing sets forth in his 1936 paper are as lucid and convincing now as they were then .",
    "to us it seems that it is the best introduction to the subject .",
    "it gives the intutions that lead up to the formal definition , and is in a certain sense a prerequisite of what follows .",
    "the reader can find this introduction in @xcite included in this volume .",
    "it begins withall arguments are bound to be , fundamentally , appeals to intuition , and for that reason rather unsatisfactory mathematically .",
    "the real question at issue is : ` what are the possible processes which can be carried out in computing ( a number ) ? ' the arguments which i shall use are of three kinds .    * a direct appeal to intuition . *",
    "a proof of equivalence of two definitions ( in case the new definition has a greater intuitive appeal ) . * giving examples of large classes of numbers which are computable .  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "we formalize turing s description as follows : a turing machine consists of a finite program , called the finite control , capable of manipulating a linear list of cells , called the tape , using one access pointer , called the head .",
    "we refer to the two directions on the tape as _",
    "right _ and _ left_. the finite control can be in any one of a finite set of states @xmath0 , and each tape cell can contain a 0 , a 1 , or a _ blank _ @xmath1 .",
    "time is discrete and the time instants are ordered @xmath2 with 0 the time at which the machine starts its computation . at any time",
    ", the head is positioned over a particular cell , which it is said to _",
    "scan_. at time 0 the head is situated on a distinguished cell on the tape called the _",
    "start cell _ , and the finite control is in a distinguished state @xmath3 . at time 0",
    "all cells contain @xmath1s , except for a contiguous finite sequence of cells , extending from the start cell to the right , which contain 0 s and 1 s .",
    "this binary sequence is called the _ input_. the device can perform the following basic operations :    1 .",
    "it can write an element from @xmath4 in the cell it scans ; and 2 .   it can shift the head one cell left or right .",
    "when the device is active it executes these operations at the rate of one operation per time unit ( a _ step _ ) . at the conclusion of each step ,",
    "the finite control takes on a state from @xmath0 .",
    "the device is constructed so that it behaves according to a finite list of rules .",
    "these rules determine , from the current state of the finite control and the symbol contained in the cell under scan , the operation to be performed next and the state to enter at the end of the next operation execution .",
    "the rules have format @xmath5 : @xmath6 is the current state of the finite control ; @xmath7 is the symbol under scan ; @xmath8 is the next operation to be executed of type ( 1 ) or ( 2 ) designated in the obvious sense by an element from @xmath9 ; and @xmath10 is the state of the finite control to be entered at the end of this step .    for",
    "now , we assume that there are no two distinct quadruples that have their first two elements identical , the device is deterministic .",
    "not every possible combination of the first two elements has to be in the set ; in this way we permit the device to perform ` no ' operation . in this case",
    "we say that the device halts .",
    "hence , we can define a turing machine by a mapping from a finite subset of @xmath11 into @xmath12 .",
    "given a turing machine and an input , the turing machine carries out a uniquely determined succession of operations , which may or may not terminate in a finite number of steps .",
    "strings and natural numbers are occasionally identified according to the pairing @xmath13 where @xmath14 denotes the empty string ( with no bits ) . in the following",
    "we need the notion of a _ self - delimiting _ code of a binary string .",
    "if @xmath15 is a string of @xmath16 bits , then its self - delimiting code is @xmath17 .",
    "clearly , the length @xmath18 . encoding a binary string self - delimitingly enables a machine to determine where the string ends reading it from left to right in a single pass and without reading past the last bit of the code .",
    "we can associate a partial function with each turing machine in the following way : the input to the turing machine is presented as an @xmath16-tuple @xmath19 consisting of self - delimiting versions of the @xmath20 s .",
    "the integer represented by the maximal binary string ( bordered by blanks ) of which some bit is scanned , or 0 if a blank is scanned , by the time the machine halts , is called the _ output _ of the computation . under this convention for inputs and outputs ,",
    "each turing machine defines a partial function from @xmath16-tuples of integers onto the integers , @xmath21 .",
    "we call such a function partial computable .",
    "if the turing machine halts for all inputs , then the function computed is defined for all arguments and we call it total computable .",
    "( instead of _ computable _ the more ambiguous _ recursive _ has also been used . )",
    "we call a function with range @xmath22 a _ predicate _ , with the interpretation that the predicate of an @xmath16-tuple of values is _ true _ if the corresponding function assumes value 1 for that @xmath16-tuple of values for its arguments and is _ false _ or _ undefined _ otherwise .",
    "hence , we can talk about _ partial ( total ) computable predicates_.      consider @xmath23 as a binary string .",
    "it is easy to see that the functions @xmath24 , @xmath25 , @xmath26 , and @xmath27 are partial computable .",
    "functions @xmath28 and @xmath29 are not total since the value for input 1111 is not defined .",
    "the function @xmath30 defined as 1 if @xmath31 and as 0 if @xmath32 is a computable predicate .",
    "consider @xmath23 as an integer .",
    "the following functions are basic @xmath16-place total computable functions : the _ successor _ function @xmath33 , the _",
    "zero _ function @xmath34 , and the _ projection _ function @xmath35 .",
    "the function @xmath36 is a total computable one - to - one mapping from pairs of natural numbers into the natural numbers .",
    "we can easily extend this scheme to obtain a total computable one - to - one mapping from @xmath37-tuples of integers into the integers , for each fixed @xmath37 .",
    "define @xmath38 .",
    "another total recursive one - to - one mapping from @xmath37-tuples of integers into the integers is @xmath39 .",
    "the class of algorithmically computable numerical functions ( in the intuitive sense ) coincides with the class of partial computable functions .",
    "originally intended as a proposal to henceforth supply intuitive terms such as ` computable ' and ` effective procedure ' with a precise meaning , the computability thesis has come into use as shorthand for a claim that from a given description of a procedure in terms of an informal set of instructions we can derive a formal one in terms of turing machines .",
    "it is possible to give an effective ( computable ) one - to - one pairing between natural numbers and turing machines .",
    "this is called an _ effective enumeration_. one way to do",
    "this is to encode the table of rules of each turing machine in binary , in a canonical way .",
    "the only thing we have to do for every turing machine is to encode the defining mapping @xmath40 .",
    "giving each element of @xmath41 a unique binary code requires @xmath7 bits for each such element , with @xmath42 .",
    "denote the encoding function by @xmath43 .",
    "then the quadruple @xmath44 is encoded as @xmath45 . if the number of rules is @xmath46 , then @xmath47 .",
    "we agree to consider the state of the first rule as the start state . the entire list of quadruples",
    ", @xmath48 is encoded as @xmath49 note that @xmath50 .",
    "( moreover , @xmath51 is self - delimiting , which is convenient in situations in which we want to recognize the substring @xmath52 as prefix of a larger string . )",
    "we order the resulting binary strings lexicographically ( according to increasing length ) .",
    "we assign an index , or gdel number , @xmath53 to each turing machine @xmath54 by defining @xmath55 if @xmath52 is the @xmath56th element in the lexicographic order of turing machine codes .",
    "this yields a sequence of turing machines @xmath57 that constitutes the effective enumeration .",
    "one can construct a turing machine to decide whether a given binary string @xmath23 encodes a turing machine , by checking whether it can be decoded according to the scheme above , that the tuple elements belong to @xmath58 , followed by a check whether any two different rules start with the same two elements .",
    "this observation enables us to construct _ universal _ turing machines .    a universal turing machine @xmath59 is a turing machine that can imitate the behavior of any other turing machine @xmath54 .",
    "it is a fundamental result that such machines exist and can be constructed effectively . only a suitable description of @xmath54 s finite program and input needs to be entered on @xmath59 s tape initially . to execute the consecutive actions that @xmath54 would perform on its own tape ,",
    "@xmath59 uses @xmath54 s description to simulate @xmath54 s actions on a representation of @xmath54 s tape contents .",
    "such a machine @xmath59 is also called _",
    "computation universal_. in fact , there are infinitely many such @xmath59 s .",
    "we focus on a universal turing machine @xmath59 that uses the encoding above .",
    "it is not difficult , but tedious , to define a turing machine in quadruple format that expects inputs of the format @xmath60 and is undefined for inputs not of that form .",
    "the machine @xmath59 starts to execute the successive operations of @xmath54 using p as input and the description @xmath52 of @xmath54 it has found so that @xmath61 for every @xmath54 and @xmath6 .",
    "we omit the explicit construction of @xmath59 .    for the contemporary reader there should be nothing mysterious in the concept of a general - purpose computer which can perform any computation when supplied with an appropriate program .",
    "the surprising thing is that a general - purpose computer can be very simple : m. minsky @xcite has shown that four tape symbols and seven states suffice easily in the above scheme . this machine can be changed to , in the sense of being simulated by , our format using tape symbols @xmath62 at the cost of an increase in the number of states .",
    "the last reference contains an excellent discussion of turing machines , their computations , and related machines .",
    "the effective enumeration of turing machines @xmath57 determines an effective enumeration of partial computable functions @xmath63 such that @xmath64 is the function computed by @xmath65 , for all @xmath56 .",
    "it is important to distinguish between a function @xmath66 and a name for @xmath66 .",
    "a name for @xmath66 can be an algorithm that computes @xmath66 , in the form of a turing machine @xmath54 .",
    "it can also be a natural number @xmath56 such that @xmath66 equals @xmath64 in the above list .",
    "we call @xmath56 an index for @xmath66 .",
    "thus , each partial computable @xmath66 occurs many times in the given effective enumeration , that is , it has many indices .",
    "turing s paper @xcite , and more so kurt gdel s paper @xcite , where such a result first appeared , are celebrated for showing that certain well - defined questions in the mathematical domain can not be settled by any effective procedure for answering questions .",
    "the following machine form of this undecidability result is due to turing and church : `` which machine computations eventually terminate with a definite result , and which machine computations go on forever without a definite conclusion ? ''",
    "this is sometimes called the halting problem .",
    "since all machines can be simulated by the universal turing machine @xmath59 , this question can not be decided in the case of the single machine @xmath59 , or more generally for any other individual universal machine .",
    "the following theorem due to turing @xcite , formalizes this discussion .",
    "let @xmath63 be the standard enumeration of partial computable functions and write @xmath67 if @xmath68 is defined and write @xmath69 otherwise .",
    "define @xmath70 as the _ halting set_.    the halting set @xmath71 is not computable .",
    "the theorem of turing on the incomputability of the halting set was preceded by ( and was intended as an alternative way to show ) the famous ( first ) incompleteness theorem of kurt gdel in 1931 @xcite .",
    "recall that a formal theory @xmath54 consists of a set of well - formed formulas , formulas for short . for convenience these formulas",
    "are taken to be finite binary strings . invariably , the formulas are specified in such a way that an effective procedure exists that decides which strings are formulas and which strings are not .",
    "the formulas are the objects of interest of the theory and constitute the meaningful statements . with each theory",
    "we associate a set of true formulas and a set of provable formulas .",
    "the set of true formulas is _ true _ according to some ( often nonconstructive ) criterion of truth .",
    "the set of provable formulas is _ provable _ according to some ( usually effective ) syntactic notion of proof .",
    "a theory @xmath54 is simply any set of formulas .",
    "a theory is axiomatizable if it can be effectively enumerated .",
    "for instance , its axioms ( initial formulas ) can be effectively enumerated and there is an effective procedure that enumerates all proofs for formulas in @xmath54 from the axioms .",
    "a theory is decidable if it is a recursive set .",
    "a theory @xmath54 is consistent if not both formula @xmath23 and and its negation @xmath72 are in @xmath54 .",
    "a theory @xmath54 is sound if each formula @xmath23 in @xmath54 is true ( with respect to the standard model of the natural numbers ) .",
    "hence , soundness implies consistency .",
    "a particularly important example of an axiomatizable theory is peano arithmetic , which axiomatizes the standard elementary theory of the natural numbers .",
    "there is a computably enumerable set , say the set @xmath71 defined above , such that for every axiomatizable theory @xmath54 that is sound and extends peano arithmetic , there is a number @xmath16 such that the formula `` @xmath73 '' is true but not provable in @xmath54 .    in his original proof",
    ", gdel uses diagonalization to prove the incompleteness of any sufficiently rich logical theory @xmath54 with a computably enumerable axiom system , such as peano arithmetic . by his technique he exhibits for such a theory an explicit construction of an undecidable statement @xmath74 that says of itself _",
    "i am unprovable in @xmath54_. the formulation in terms of computable function theory is due to a. church and s.c . kleene .",
    "turing s idea was to give a formal meaning to the notion of `` giving a proof . ''",
    "intuitively , a proof is a sort of computation where every step follows ( and follows logically ) from the previous one , starting from the input . to put everything as broad as possible , turing analyses the notion of ` computation ' from an ` input ' to an ` output ' and uses this to give an alternative proof of gdel s theorem .",
    "prominent examples of uncomputable functions are the kolmogorov complexity function and the universal algorithmic probability function .",
    "these are the fundamental notions in @xcite and , among others , @xcite .",
    "theoretically , every intuitively computable ( effectively calculable ) function is computable by a personal computer or by a turing machine . but a computation that takes @xmath75 steps on an input of length @xmath16 would not be regarded as practical or feasible .",
    "no computer would ever finish such a computation in the lifetime of the universe even with @xmath16 merely @xmath76 .",
    "for example , if we have @xmath77 processors each taking @xmath77 steps / second , then we can execute @xmath78 steps / year .",
    "computational complexity theory tries to identify problems that are feasibly computable .    in computational complexity",
    "theory , we are often concerned with languages . a language @xmath79 over a finite alphabet @xmath80 is simply a subset of @xmath81 .",
    "we say that a turing machine accepts a language @xmath79 if it outputs 1 when the input is a member of @xmath79 and outputs 0 otherwise .",
    "that is , the turing machine computes a predicate .",
    "let @xmath54 be a turing machine .",
    "if for every input of length @xmath16 we have that @xmath54 makes at most @xmath82 moves before it halts , then we say that @xmath54 runs in time @xmath82 , or has time complexity @xmath82 .",
    "if @xmath54 uses at most @xmath83 tape cells in the above computations , then we say that @xmath54 uses @xmath83 space , or has space complexity @xmath83 .    for convenience ,",
    "we often give the turing machine in figure  [ fig.turing ] a few more work tapes and designate one tape as a read - only input tape .",
    "thus , each transition rule will be of the form @xmath84 , where @xmath85 contains the scanned symbols on all the tapes , and @xmath86 are as above , except that an operation now involves moving maybe more than one head .",
    "we sometimes also make a turing machine nondeterministic by allowing two distinct transition rules to have identical first two components . that is , a nondeterministic turing machine may have different alternative moves at each step .",
    "such a machine accepts if one accepting path leads to acceptance .",
    "turing machines are deterministic unless it is explicitly stated otherwise .",
    "* @xmath87 $ ] is the set of languages accepted by multitape deterministic turing machines in time @xmath88 ; * @xmath89 $ ] is the set of languages accepted by multitape nondeterministic turing machines in time @xmath88 ; * @xmath90 $ ] is the set of languages accepted by multitape deterministic turing machines in @xmath91 space ; * @xmath92 $ ] is the set of languages accepted by multitape nondeterministic turing machines in @xmath91 space . * with @xmath93 running through the natural numbers : + p is the complexity class @xmath94 $ ] ; + np is the complexity class @xmath95 $ ] ; + pspace is the complexity class @xmath96 $ ] .    languages in p , that is , languages acceptable in polynomial time , are considered feasibly computable .",
    "the nondeterministic version for pspace turns out to be identical to pspace by savitch s theorem @xcite which states that @xmath92={\\rm dspace}[(s(n))^2]$ ] .",
    "the following relationships hold trivially , @xmath97 .",
    "it is one of the most fundamental open questions in computer science and mathematics to prove whether either of the above inclusions is proper .",
    "research in computational complexity theory focuses on these questions . in order to solve these problems ,",
    "one can identify the hardest problems in np or pspace .",
    "the bible of this area is @xcite .",
    "in the last three - quarter of a century the turing machine model has proven to be of priceless value for the development of the science of data processing .",
    "all theory development reaches back to this format .",
    "the model has become so dominant that new other models that are not polynomial - time reducible to turing machines are viewed as not realistic ( the so - called polynomial - time computability thesis ) .    without explaining terms , the _ random access machine _ ( ram ) with _ logarithmic cost _ , or _",
    "unit cost _ without multiplications , is viewed as realistic , while the unit cost ram with multiplications or the _ parallel random access machine _ ( pram ) are not so viewed .",
    "new notions , such as randomized computations as in r. motwani and p. raghavan @xcite ( like the fast primality tests used in internet cryptographical protocols ) are analysed using _ probabilistic _ turing machines .    in 1980",
    "the nobelist richard feynman proposed a _",
    "quantum computer _ , in effect an analogous version of a quantum system .",
    "contrary to digital computers ( classical , quantum , or otherwise ) , an analogue computer works with continuous variables and simulates the system we want to solve directly : for example , a wind tunnel with a model aircraft simulates the aeroflow and in particular nonlaminar turbulence of the aimed - for actual aircraft . in practice ,",
    "analogue computers have worked only for special problems . in contrast , the digital computer , where everything is expressed in bits , has proven to be universally applicable .",
    "feynman s innovative idea was without issue until d. deutsch @xcite put the proposal in the form of a quantum turing machine , that is , a digital quantum computer .",
    "this digital development exploded the area both theoretically and applied to the great area of _ quantum computing_."
  ],
  "abstract_text": [
    "<S> we describe the turing machine , list some of its many influences on the theory of computation and complexity of computations , and illustrate its importance . </S>"
  ]
}