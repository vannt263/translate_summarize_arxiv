{
  "article_text": [
    "the turing machine is probably the most well known of all models of computation .",
    "this particular model has many variations , that all lead to the same notion of computability .",
    "the easiest model is the turing machine with just one tape and one head , that we will consider in this paper .    from the point of view of computability ,",
    "this model is equivalent to all others . from the point of view of _ complexity",
    "_ , however , the situation is very different .",
    "indeed , it is well known @xcite that a language ( of finite words ) accepted by such a turing machine in _ linear _ time is always regular .",
    "more precisely , it can be proven that if such a turing machine is in time @xmath1 on all inputs , then there is a constant @xmath2 so that , on any input , the machine passes at most @xmath2 times in any given position",
    ".    we will consider in this paper the turing machine as a _ dynamical system _ : the execution is starting from _ any _ given configuration @xmath3 , ie any initial state , and any initial tape , and we will observe the evolution . while the turing machine is a model of computation , it is however quite important in the study of dynamical systems .",
    "it was intensively studied by kurka @xcite , and moore @xcite proved that they can be embedded in various `` real life '' dynamical systems . as an example , the uncomputability of the entropy of a turing machine , by blondel et al .",
    "@xcite can be use to deduce the uncomputability of the entropy of picewise - affine maps , proven by koiran @xcite in a different way .",
    "however , these undecidability results are usually obtained for turing machines with _ two tapes _ ; the basic idea is to use one tape to simulate a given turing machine @xmath4 , and to control the other tape , that will mostly do nothing computationally interesting .",
    "the _ computational complexity _ of the new turing machine will come from the first tape , but the _ dynamical complexity _ will come from the second tape .",
    "there is a reason why these results use turing machines with two tapes .",
    "we will prove indeed that some dynamical quantities for one - tape turing machines are actually _ computable _ , in the sense that there is an algorithm that given any @xmath0 will give an approximation upto @xmath0 .",
    "the two quantities we consider are the _ speed _ and the _ entropy _ of a turing machine .",
    "while the most theoretically important quantity is the entropy , we will concentrate our discussion in the introduction to the speed , which is easiest to conceive .",
    "the speed of a turing machine measures how fast the head goes to infinity .",
    "informally , the speed is greater than @xmath5 if we can find a configuration @xmath3 for which the turing machine is roughly in position @xmath6 after @xmath7 units of time .",
    "note that if @xmath5 is nonzero , this means that it takes us a time @xmath8 to be in position @xmath7 .",
    "now , if we recall a previous result , a turing machine with one tape with running time @xmath1 on all inputs does nothing interesting .",
    "we will prove , using the same techniques , that this also applies to the maximum speed : if the maximum speed is nonzero , hence the running time on _ some _ infinite configuration is ( asymptotically ) _ linear _ , then there is a _ regular _ ( ultimately periodic ) configuration that achieves this maximum speed .",
    "this paper is organized as follows . in the first section",
    ", we introduce the formal definitions of the speed and entropy of a turing machine . in the next section ,",
    "we proceed to prove the three main theorems : the speed and the entropy are computable , and the speed is actually a rational number , achieved by a ultimately periodic configuration .",
    "we assume the reader is familiar with turing machines .",
    "a ( one - tape ) turing machine @xmath4 is a ( total ) map @xmath9 where @xmath10 is a finite set called the set of states , and @xmath11 a finite alphabet .",
    "now , the best way to see it as a dynamical system might be unorthodox at first .",
    "the idea is to consider the turing machine as having a _ moving tape _ rather than a moving head : a _ configuration _ is then an element of @xmath12 , and the map @xmath4 on @xmath13 is defined as follows : @xmath14 where @xmath15 , @xmath16 and @xmath17 for all @xmath18 .",
    "this distinction is particularly important for the definition of the entropy to be technically correct .",
    "however it is best to consider the turing machines as we are used to , and we will say `` the turing machine is in position @xmath19 '' rather than `` the tape has moved @xmath19 positions to the right '' .      given a configuration @xmath20 , the _ speed _ of @xmath4 on @xmath3 is the average number of cells that are read per unit of time .",
    "formally , let @xmath21 be the number of _ different _ cells read during the first @xmath7 steps of the evolution of the turing machine @xmath4 on input @xmath3 .",
    "note that @xmath22 is subadditive : @xmath23 .",
    "@xmath24    we give two examples .    *",
    "consider a turing machine with two states @xmath25 .",
    "on @xmath26 , the turing machine goes to @xmath27 without changing the position of the head . on @xmath27",
    "the turing machine goes right and changes back to @xmath26 .",
    "then @xmath28 for all @xmath3 .",
    "* consider a turing machine with two states @xmath29 ( for left and right ) and two symbols @xmath30 . in state @xmath31 ,",
    "when the machine reads a symbol @xmath32 , it goes in the direction @xmath31.when the machine reads a symbol @xmath33 , it writes a symbol @xmath32 instead and changes direction . on input @xmath34 where @xmath35 contains only the symbol @xmath32",
    ", the turing machine will only go to the right , and @xmath36 . on input @xmath34 where @xmath35 contains",
    "only the symbol @xmath33 , the turing machine will zigzag , and will reach the @xmath7-th symbol to the right in time @xmath37 , hence will see only @xmath38 symbols in time @xmath7 , hence @xmath39 . on input @xmath34 where @xmath35 contains @xmath33",
    "only at all positions @xmath40 , the turing machine will have read ( for @xmath7 even ) @xmath41 symbols at time @xmath42 and @xmath43 , but only @xmath44 at time @xmath45 , and @xmath46 .",
    "this is illustrated on figure [ fig : laseule ] .",
    "( 46,46 ) ; ( -2,0 )  ( -2,47 ) ; ( -2,23 ) node[left ] @xmath47 ; ( 0,0 )  ( 0,46 ) ; ( 46,0 ) ",
    "( 46,46 ) ; ( -2,46 )  ( 46,46 ) ; ( 46,46 ) node[above ] @xmath7 ; ( 0,46 ) node[above ] @xmath48 ; ( 46,46 ) node[above ] @xmath7 ; ( -2,46 ) node[left ] @xmath7 ;    ( 0,0 )  ( 1,1 ) ",
    "( -1,3 )  ( 2,6 ) ",
    "( -2 , 10 )  ( 3,15 )  ( -3,21 )  ( 4,28 )  ( -4 , 36 )  ( 5 , 45 ) ; ( -14,0 )  ( -14,46 ) ; ( -14,23 ) node[left ] @xmath47 ; ( 0,0 )  ( 0,45 ) ; ( 5,0 )  ( 5,46 ) ; ( 0,46 ) node[above ] @xmath48 ; ( 5,46 ) node[above ] @xmath7 ; ( 10,45 )  ( -14,45 ) ; ( -14,46 ) node[left ] @xmath49 ;    ( 0,0 )  ( 1,1 )  ( -2,4 )  ( 4,10 )",
    " (-8 , 22 )  ( 16,46 ) ; ( -14,0 )  ( -14,47 ) ; ( -14,23 ) node[left ] @xmath47 ; ( 0,0 )  ( 0,46 ) ; ( -8,0 )  ( -8,46 ) ; ( 16,0 ) ",
    "( 16,46 ) ; ( 4,0 ) ",
    "( 4,46 ) ; ( 0,46 ) node[above ] @xmath48 ; ( 6r,46 ) node[above ] @xmath50 ; ( 16,46 ) node[above ] @xmath51 ; ( -8,46 ) node[above ] @xmath52 ; ( 20,46 )  ( -14,46 ) ; ( 20,34 )  ( -14,34 ) ; ( -14,46 ) node[left ] @xmath53 ; ( -14,34 ) node[left ] @xmath54 ;    now we define the speed of a turing machine as the maximum of its average speed on all configurations :    [ def : aprover ] @xmath55    the fact that all these definitions are equivalent , and that the maximum speed is indeed a maximum ( it is reached by some configuration ) , is a consequence of the subadditivity of @xmath56 , see ( * ? ? ?",
    "* theorem 1.1 ) or @xcite for a more combinatorial proof .",
    "we give here a direct proof , following @xcite ( the main difference is that a continuity argument is replaced by a finiteness argument ) .",
    "@xmath55    it is clear that the last two quantities are equal ( @xmath57 satisfies @xmath58 ) , and that they are larger than the others .",
    "let @xmath59 .",
    "we will prove that there exists @xmath3 so that @xmath60 for all @xmath7 , which will prove the theorem . by a compactness argument ,",
    "it is sufficient to prove that for all @xmath7 , there exists @xmath3 so that @xmath61 for all @xmath62 .",
    "( let @xmath63 be such a configuration , and take @xmath3 to be any limit point of @xmath64 ) .",
    "so suppose it is false for some @xmath7 .",
    "that is for all configurations @xmath3 , there exists @xmath62 so that @xmath65 .",
    "recall that @xmath66 is an integer between @xmath48 and @xmath2 , so that the left side of this equation , when @xmath2 and @xmath3 varies , can take only finitely many values .",
    "this means there exists @xmath67 so that for all configurations @xmath3 , there exists @xmath62 so that @xmath68 .",
    "now let @xmath3 be any configuration .",
    "there exists @xmath69 so that @xmath70 .",
    "applying the same reasoning to @xmath71 , we know there exists @xmath72 so that @xmath73 , etc",
    ".    by subadditivity of @xmath74 , this implies that for every @xmath75 , we have @xmath76 for some @xmath77 and some @xmath31 so that @xmath78 . hence @xmath79 . for @xmath80 ,",
    "this implies @xmath81 .",
    "this is true of all @xmath3 , so @xmath82 , a contradiction with the definition of @xmath5 .",
    "the ( topological ) entropy of a turing machine is a quantity that measures the complexity of the trajectories .",
    "it represents roughly the average number of bits needed to represent the trajectories .    for a configuration @xmath3 ,",
    "the _ trace _ of @xmath3 is the word @xmath83 where @xmath84 contains the letter in position @xmath48 of the tape and the state at the @xmath19-th step during the execution of @xmath4 on input @xmath3 .",
    "we note @xmath85 the trace of @xmath3 and @xmath86 the first @xmath7 letters of the trace .",
    "finally , we denote by @xmath87    then the entropy can be defined by    [ def : entropy ] @xmath88    the limit indeed exists and is equal to the infimum as latexmath:[$(\\log    specialized version for ( moving tape ) turing machines of the general definition of entropy , and was proven equivalent in @xcite .",
    "let s go back to the examples . in the first case , @xmath86 can take roughly @xmath90 different values , and @xmath91 . in the second case",
    ", it can be proven that the first @xmath7 letters of @xmath85 can contain at most @xmath92 symbols @xmath93 or @xmath94 ( the maximum is obtained starting from a configuration with only @xmath33 ) . as a consequence ,",
    "@xmath95 is of size at most @xmath96 so that @xmath97 .",
    "it is possible to give a definition for the entropy that is very similar to the speed .",
    "for this , we use _",
    "kolmogorov complexity_. the ( prefix - free ) kolmogorov complexity @xmath98 of a finite word @xmath99 is roughly speaking the length of the shortest program that outputs @xmath99 .",
    "we do not define precisely the kolmogorov complexity , see e.g. @xcite , but will use mainly the following easy results :    * for any alphabet @xmath11 , there exists constants @xmath3 and @xmath100 so that for all words @xmath101 over @xmath11 , @xmath102 and for all words @xmath103 , @xmath104 .",
    "* for any computable function @xmath105 , there exists a constant @xmath3 so that @xmath106 whenever @xmath107 is defined .    for a trace @xmath47 ,",
    "define the _ lower _ and _ upper complexity _ of @xmath47 by @xmath108 and @xmath109 .",
    "@xcite [ thm : brudno ] @xmath110    from this definition , it will not be surprising that we can obtain results on both speed and entropy using the same arguments .",
    "while this section is not strictly necessary for our result , it gives some intuition about what is happening , and an interesting relation between the two quantities .",
    "recall the definitions of the speed and the entropy , in terms of kolmogorov complexity .",
    "it is clear that @xmath86 depends only on the content of the cells visited during the @xmath7 first steps of the turing machine , and on the initial state . in particular @xmath111    as a consequence , we obtain    [ prop : limsup ] for all configurations @xmath3 , @xmath112 @xmath113 in particular @xmath114    for some turing machines ( as one of the examples ) , the inequality may be strict : this happens when there are some configurations of great speed , but not _ many _ of them .",
    "we can overcome this problem as follows .",
    "if @xmath4 is a turing machine over the alphabet @xmath11 and @xmath115 an other alphabet , we denote by @xmath116 the turing machine over the alphabet @xmath117 that works as @xmath4 works , without changing the @xmath115 component ( formally , the transition function satisfies @xmath118 if @xmath119 ) .",
    "@xmath120    first a few notations .",
    "if @xmath3 is a configuration ( a pair of a state and a word over @xmath121 for the turing machine @xmath4 and @xmath35 is a word over the alphabet @xmath115 , we denote by @xmath122 the configuration for the turing machine @xmath123 whose state is the state of @xmath3 , and the letter in position @xmath19 the pair @xmath124 .",
    "denote by @xmath125 the set of configurations of @xmath116 and @xmath126 the trace of the machine @xmath116 .",
    "let @xmath7 be an integer and @xmath3 a configuration of maximal speed .",
    "now @xmath127 is of size at least @xmath128 , as is witnessed by all configurations @xmath122 .",
    "hence , @xmath129 by taking a limit on both sides , we get the result .",
    "we obtain the main result of this section :    @xmath130    remark that @xmath131 and that @xmath132 , and combine the last two propositions .",
    "to finish , we evaluate more precisely @xmath133 . for this , we look at @xmath134 , the first @xmath7 bits of the trace of @xmath123 .",
    "@xmath95 is the first @xmath7 bits of the trace of @xmath4 , and is obtained from different initial configurations @xmath135 .",
    "let @xmath136 so that @xmath137 , then it is clear that @xmath138 , and @xmath139    now this last definition makes sense also when @xmath140 is not an integer .",
    "if we replace @xmath141 by @xmath99 in the last definition , we obtain what is called the ( topological ) _ pressure _ @xcite of @xmath142 , denoted @xmath143 . in the context of turing machines ,",
    "the pressure has therefore a nice interpretation , at least in the case where @xmath99 is the logarithm of an integer .",
    "in particular we recover @xmath144 and we obtain @xmath145 , which is also a consequence of a more general result , see ( * ? ? ? * theorem 1.2 ) .",
    "we will prove in this section that the speed and the entropy of a turing machine are computable .",
    "the proof goes as follows .",
    "first , by the definition of the speed as an infimum , we can compute a sequence @xmath22 so that @xmath146 .",
    "so it is sufficient to find a ( computable ) sequence @xmath147 so that @xmath148 to compute the speed ( find a @xmath7 so that @xmath149 )    to find such a sequence @xmath147 , it is sufficient to find configurations @xmath63 of near maximal speed . to do that , we need to better understand configurations of maximal speed .",
    "first , we will establish ( propositions [ prop : droite ] and [ prop : gauche ] ) that a configuration of maximal speed ( entropy ) can not do too many zigzags , and must be only finitely many times at any given position .",
    "the idea is that revisiting cells that were already visited is a loss of time ( and complexity ) , so the machine should avoid doing it .    in the same vein , we can prove that the zigzags must not be too large ( proposition [ prop : zig ] ) : the time of the first and last visit of a given cell must be roughly equivalent ( @xmath150 in the notation of this proposition ) .",
    "all this work allows us to redefine the problem as a graph problem : given a weighted ( infinite ) graph , find the path of minimum average weight ( proposition [ prop : graph ] ) .",
    "using the graph approach , we will then prove ( theorem [ thm : max ] ) that this average minimum weight can be well approximated by considering only _ finite _ graphs .",
    "finally , the speed and entropy for finite graphs are easy to compute ( theorems [ thm : speed ] and [ thm : entropy ] ) , which ends the proof .    in each section",
    ", the proofs will always be done first for the speed , then for the entropy .",
    "we deliberately choose to have similar proofs in both cases , to help to understand the proof for the entropy , which is more complex .",
    "in particular , some statements about the speed are probably a bit more elaborate than they need to be .",
    "the first step in the proof is to simplify the model : we will prove that to achieve the maximum speed ( resp .",
    "maximum complexity ) , we only need to consider configurations that never cross the origin , i.e. , that stay always on the same side of the tape .",
    "this is quite obvious , as changing from a position @xmath151 to a position @xmath152 costs at least @xmath153 steps , and might greatly reduce the average speed of the tm on this configuration .",
    "[ prop : droite ] let @xmath3 a configuration for which @xmath154 and suppose @xmath155 . then",
    ", during the computation on input @xmath3 , the head of @xmath4 is only finitely many times in any given position @xmath19 .",
    "we prove only the result for @xmath156 , the result for all @xmath19 follows by considering @xmath157 for some suitable @xmath47 .",
    "we suppose by contradiction that the head of @xmath4 is infinitely often in position @xmath48 .",
    "let @xmath2 be an integer .",
    "as @xmath155 , there must exist a time @xmath47 for which the head is in position @xmath158 .",
    "let @xmath47 be the first time when this happens .",
    "we may suppose w.l.o.g that at time @xmath47 the head is in position @xmath159 .",
    "now let @xmath160 be the next time the head was in position @xmath48 , and finally let @xmath161 be the time at which the head was at its rightmost position in the first @xmath160 steps .",
    "first , by definition @xmath162 .",
    "furthermore , @xmath163 .",
    "indeed by definition of @xmath47 , the leftmost position in the first @xmath161 steps is at most @xmath164 so we went further to the right than to the left in the first @xmath161 steps , so that the rightmost position is at least in poisiton @xmath165 .",
    "remark also that @xmath166 ( by definition ) .    from this",
    "we obtain    @xmath167 by taking a limsup on both sides we obtain @xmath168 a contradiction .    [",
    "prop : gauche ] let @xmath3 be a configuration for which @xmath169 and suppose @xmath170 .",
    "then for any position @xmath19 , the head of @xmath4 is only finitely many times in position @xmath19 .",
    "it s exactly the same proof .",
    "note that @xmath171 ( the first @xmath160 bits of @xmath85 can be recovered if we know only the first @xmath161 bits , and the number of bits we want to recover ) , and @xmath172 ( indeed @xmath173 where @xmath174 is the number of bits read during times @xmath175 , and @xmath176 ) , from which we get the same contradiction .",
    "these two propositions state that we only have to deal with configurations that never reach the position @xmath156 once they leave it at @xmath177 ( replace @xmath3 by @xmath178 for a suitable @xmath179 ) .",
    "if we deal with the disjoint union of the turing machine @xmath4 and its mirror ( exchange left and right ) @xmath180 , we may now assume , and we do in the rest of this section , that the maximum speed and complexity is reached with a configuration that never go to negative positions @xmath181 and , if @xmath155 ( resp .",
    "@xmath170 ) , that pass only finitely many times to any given position .",
    "recall that we suppose in the following sections that the maximum speed is obtained for a configuration that never go to negative positions .",
    "let call @xmath182 ( @xmath105 for first ) the first time we reach position @xmath7 .",
    "then the average speed on a configuration @xmath3 ( for which the turing machine never goes in negative positions ) can be defined equivalently as @xmath183 .",
    "we prove now a stronger statement .",
    "let s call @xmath184 the _ last _ time we reach position @xmath7 . if we never reach position @xmath185 , or if we reach it infinitely often , let @xmath186 ,    [ prop : zig ] @xmath187 @xmath188    if the speed ( resp .",
    "entropy ) is nonzero , the maximum is reached for some configuration @xmath3 for which @xmath184 is never infinite . in particular , for this configuration , @xmath150    it is clear that @xmath189 and @xmath190 ) are upper bounds , as @xmath191 and @xmath192 .",
    "in particular the result is true if @xmath193 ( resp .",
    "@xmath97 ) .",
    "we first deal with the speed .",
    "let @xmath3 be a configuration of maximum speed .",
    "by the previous subsection , we may suppose that @xmath3 never reaches negative positions .",
    "let @xmath194 .",
    "let @xmath179 be the rightmost position the head reaches before @xmath195 and @xmath196 the first time this position is reached .",
    "note that @xmath197 ( no negative position is ever reached )    from this we get @xmath198    note also that @xmath199 and @xmath200 ( we are at position @xmath201 at time @xmath196 and at position @xmath7 at time @xmath195 )    hence @xmath202 from which the result follows .    for the entropy , the proof is almost the same . from @xmath203",
    ", we get again that @xmath204 .",
    "now @xmath205 ( the first @xmath195 bits of @xmath85 can be recovered if we know @xmath195 and the first @xmath179 bits of @xmath3 , hence if we know the first @xmath7 bits of @xmath3 and the @xmath206 next bits ) , from which the result follows again .",
    "now the last technical tool we need are _ crossing sequences _ , introduced by hennie @xcite .",
    "first denote by @xmath207 the set of configurations @xmath3 on which :    * the turing machine never reaches any positions @xmath181 * the turing machine never reaches the position @xmath48 again once it leaves it at @xmath177 . * for any @xmath151 , the head of the turing is only finitely many times in position @xmath19 .",
    "the last sections prove that we only have to deal with configurations in @xmath207 .",
    "let @xmath3 be such a configuration .",
    "the _ crossing sequence _ at boundary @xmath19 is the sequences of states of the machine when its head cross the boundary between the @xmath19-th cell and the @xmath208-th cell .",
    "we denote by @xmath209 the crossing sequence at boundary @xmath19 .",
    "note that @xmath210 consists of a single state , which is the initial state of @xmath3 ( the machine never reaches the position @xmath48 anymore ) and @xmath209 is finite for @xmath151 .",
    "the main idea of the crossing sequences is that @xmath209 represents all the exchange of information between the positions @xmath211 and the positions @xmath212 of the tape .",
    "in particular , if @xmath213 for two configurations @xmath214 , and if we consider the configuration @xmath215 that is equal to @xmath3 upto @xmath19 then equal to @xmath100 ( shifted by @xmath216 so that the @xmath217-th cell of @xmath100 becomes the @xmath208-th cell of @xmath215 ) , then the turing machine on @xmath215 will behave exactly like @xmath3 on all positions less than @xmath19 , and as @xmath100 ( shifted ) on positions more than @xmath19 . hence the crossing sequences capture exactly the behaviour of the turing machine .",
    "we now consider the following labeled graph ( automaton ) @xmath218 : the vertices of @xmath218 are all finite words over the alphabet @xmath10 ( all possible crossing sequences ) , and there is an edge from @xmath35 to @xmath219 labeled by @xmath220 if @xmath35 and @xmath219 are _ compatible _ , in the sense that it looks possible to find a configuration and a position @xmath19 so that @xmath221 , @xmath222 and @xmath32 is the letter at position @xmath208 in @xmath3 ( said otherwise , @xmath35 and @xmath219 are two consecutive crossing sequences for some configuration @xmath3 ) .",
    "the exact definition is as follows .",
    "we define recursively two subsets @xmath223 and @xmath224 of @xmath225 as follows :    @xmath226 , @xmath227    if @xmath228 then @xmath229 iff @xmath230    if @xmath231 then @xmath232 iff @xmath233    if @xmath228 then @xmath234 iff @xmath230    if @xmath231 then @xmath235 iff @xmath233    then there is an edge from @xmath35 to @xmath219 labeled @xmath32 if and only if @xmath236 .    note that this echoes a similar definition for two - way finite automata given in @xcite where @xmath236 is called `` @xmath35 left - matches @xmath219 '' ( the note in example  2.15 is particularly relevant ) . the exact definition above is also hinted at in @xcite .",
    "let us explain briefly these conditions .",
    "suppose @xmath237 , and suppose that the turing machine at some point arrives in some cell @xmath19 from the left , in the state @xmath26 and sees @xmath32 .",
    "then by definition , the first symbol from @xmath209 must be @xmath26 . by definition of the local rule @xmath238",
    ", the turing machine will enter state @xmath27 and go right so that the first symbol in @xmath239 will be @xmath27 .",
    "now , the next time the turing machine will come into the cell @xmath19 , it must be coming from the right , and when it does it will see the symbol @xmath33 .",
    "this explains the rule @xmath232 iff @xmath233 , where @xmath35 and @xmath219 represent the crossing sequences after the second time the turing machines comes to the cell @xmath19 .",
    "now it is clear that a configuration @xmath3 defines a path in this graph @xmath218 , and that we can recover the speed of the configuration from the graph , as explained in the following .",
    "a _ path _ in the graph @xmath218 is a sequence @xmath240 where @xmath241 is a vertex of @xmath218 and @xmath84 a letter from @xmath11 so that @xmath242 for all @xmath243 .",
    "valid _ path is an infinite path ( @xmath244 ) so that @xmath245 consists of one single letter ( state ) .",
    "we denote by @xmath246 the set of valid paths of a graph @xmath218 .",
    "the following facts are obvious :    for any @xmath247 , @xmath248 is a valid path in @xmath218 .",
    "furthermore , for any valid path @xmath249 , there exists a configuration @xmath247 so that @xmath250 and @xmath209 is a prefix of @xmath241 .",
    "note that it is indeed possible for @xmath241 to be strictly larger than @xmath209 .",
    "now we explain how we can redefine the speed on the graph @xmath218 .",
    "if @xmath179 is a finite path ( @xmath251 is finite ) , the _ length _ of @xmath179 is @xmath252 , the _ weight _ of @xmath179 is @xmath253 , and the _ complexity _ of @xmath179 is @xmath254    if @xmath255 is an infinite path , and @xmath256 , the _ average speed _ of @xmath179 is @xmath257 and the _ average complexity _ of @xmath179 is @xmath258 .",
    "we define similarly @xmath259 and @xmath260 .",
    "now note that @xmath261 is bounded from below by the first time we go to the position @xmath7 , and from above by the last time we go to position @xmath7 .",
    "so by the previous section    [ prop : graph ] @xmath262 @xmath263    now to obtain the main theorems , let @xmath264 be the subgraph of @xmath218 obtained by taking only the vertices of size @xmath265 .",
    "[ thm : max ] @xmath266 @xmath267    this means we only have to consider finite graphs to compute the speed ( resp .",
    "entropy ) .",
    "we will prove in the next section that the speed and the entropy are computable for finite graphs , which will give the result .    before going to the proof , some intuition .",
    "let @xmath179 be a path of maximum speed @xmath155 .",
    "for the speed to be nonzero , vertices of large weight can not be too frequent in @xmath179 .",
    "now the idea is to _ bypass _ these vertices ( by using other paths in the graph @xmath218 ) to obtain a new path @xmath268 with almost the same average speed . for the speed , it s actually possible to obtain a path @xmath268 of the _ same _ speed ( this will be done in the next section ) .",
    "however , for the entropy , it is likely that these paths were actually of great complexity so that their removal gives us a path of smallest ( yet very near ) average complexity .",
    "first , the speed .",
    "one direction is obvious by definition .",
    "we suppose that @xmath269 , otherwise the result is trivial .",
    "let @xmath179 be a path of maximum speed .",
    "let @xmath2 be any integer so that @xmath270 . for any vertex @xmath35 and @xmath219 of size",
    "less or equal to @xmath2 so that @xmath179 goes through @xmath35 and @xmath219 in that order , choose some finite path @xmath271 from @xmath35 to @xmath219 .",
    "now let @xmath272 be an upper bound on the weights of all those paths .",
    "the idea is now simple : we will change @xmath179 so that it will not go through any vertices @xmath35 of size @xmath273 .",
    "we do it like this : whenever there is a vertex @xmath274 of size greater than @xmath272 , we will look at the last vertex @xmath35 before it of size less or equal to @xmath2 , and to the first vertex @xmath219 after it of size less or equal to @xmath2 , and we will replace the portion of this path by @xmath271 .",
    "let s call @xmath268 this new path .",
    "note that there must exist such a vertex @xmath219 , otherwise all vertices will be of size greater than @xmath2 after some time , which means the speed on @xmath179 is less than @xmath275 , a contradiction .",
    "now we prove this construction works .",
    "let @xmath7 be an integer so that for all @xmath276 .",
    "@xmath277    now let @xmath75 so that the vertex @xmath278 of @xmath179 is of size less than @xmath2 .",
    "we will look at how the @xmath75 first positions of @xmath179 where changed into @xmath268 .",
    "let @xmath279 be the position of the vertex @xmath278 in @xmath268 ( @xmath278 still appears in @xmath268 as we only change vertices of size greater than @xmath2 ) .    by the above inequality",
    ", it is clear that in the @xmath75 first position of the path @xmath179 , there is at most @xmath280 vertices of size greater than @xmath2 .",
    "this means that this portion of the path in @xmath268 is of length at least @xmath281 .",
    "furthermore , at each time , we replace a finite path by a path of smallest weight ( each path was of weight at least @xmath272 , and each new one is of weight at most @xmath272 ) .    as a consequence , for this new path @xmath268 we have @xmath282",
    "hence @xmath283 we have proven that some path in @xmath284 is at least @xmath285 to the optimal speed , which proves the result .",
    "the proof for the entropy is , as always , very similar .",
    "we start from @xmath286 , which guarantees that infinitely many vertices are of weight less than @xmath2 . as before",
    ", we will choose @xmath272 greater than all weights , but now also greater than @xmath287 .",
    "first , @xmath288 , so @xmath289 , so we may choose @xmath75 so that for all @xmath290 @xmath291    to simplify notations , let @xmath292 .",
    "we now have to evaluate @xmath293 .",
    "to recover @xmath294 from @xmath295 , we only need :    to know @xmath75    to know the positions of the paths that were cut .    to know the labels of what was cut    to know the labels of what was added instead    first , the positions .",
    "there are at most @xmath296 vertices of size at least @xmath272 , so we did at most @xmath296 cuts .",
    "the cuts can be described by two sets : the set of beginnings of the cuts , and the set of endings of the cuts .",
    "each set is of size at most @xmath296 . for a given size @xmath297",
    ", there are at most @xmath298 sets of size @xmath179 , so this can be described by a binary word of size at most the logarithm of this quantity ( upto a factor @xmath299 ) .",
    "second , what was cut .",
    "we only cut vertices of size at least @xmath2 , so this can be described by a single word of size at most @xmath300 .",
    "third , what was added . at each cut , we added one of the paths @xmath271",
    ". now there are at most @xmath301 words of size at most @xmath2 , hence are at most @xmath302 such paths , and there are at most @xmath296 cuts , so this can be described by a word of size at most @xmath303    thus    @xmath304    now @xmath305 and @xmath306    @xmath307 hence    @xmath308 where @xmath309 . now the quantity to the right tends to @xmath310 when @xmath2 tends to infinity ( recall that we choose @xmath272 greater than @xmath287 , which we need for the last term ) , which proves the result .",
    "now we can explain how to use the last result to prove the main theorems .",
    "the idea is that we can compute the speed @xmath189 from above , by the formula @xmath311 so it is sufficient to explain how to compute it from below and this comes precisely from the previous theorem .",
    "[ thm : speed ] there exists an algorithm that , given a turing machine @xmath4 and a precision @xmath0 , computes @xmath189 to a precision @xmath0 .",
    "we only have to explain how to compute the maximum speed for a finite graph @xmath218 .",
    "first , we may trim @xmath218 so that all vertices are reachable from a vertex of size @xmath312 .",
    "it is then obvious that the maximum speed is obtained by a path that goes to then follow a cycle of minimum average weight , so the maximum speed is exactly the inverse of the minimum average weight .",
    "this is easily computable , see @xcite for an efficient algorithm .",
    "we can say a bit more    the maximum speed of a turing machine @xmath189 is a rational number .",
    "it is reached by a configuration which is ultimately periodic .",
    "we suppose that @xmath155 otherwise the result is clear .",
    "we will prove that the sequence @xmath313 is stationary .",
    "let @xmath314 .",
    "let @xmath315    now we look at @xmath316 for some @xmath317 .",
    "the maximum is reached for some path that reach some cycle of minimum average weight .",
    "note that this cycle can not be of length greater than @xmath318 . indeed , denote by @xmath75 the length of this cycle .",
    "as there are at most @xmath301 vertices in this cycle of length at most @xmath2 , the average speed on this cycle is less than    @xmath319    now , there can not be any vertices in this cycle of length at least @xmath320 .",
    "otherwise the average speed would be less than    @xmath321    hence this cycle is already in @xmath284 .",
    "now if we look at the cycle of minimal average weight in @xmath284 that can be reached in @xmath218 , hence in @xmath322 from some @xmath323 , then it is clear that @xmath189 is exactly the inverse of the average weight of this cycle , and it is reached for some path @xmath179 in @xmath322 that reaches then follows this cycle .",
    "note that , while the maximum speed is a rational number , there is no algorithm that actually computes this rational number ( we are only able to approximate it up to any given precision ) .",
    "this can be proven by an adaptation of the proof of the undecidability of the existence of a periodic configuration in a turing machine @xcite .",
    "now we do the same for the entropy :    [ thm : entropy ]    there exists an algorithm that , given a turing machine @xmath4 and a precision @xmath0 , computes @xmath310 to a precision @xmath0 .",
    "we only have to explain how to compute the maximum complexity for a finite graph @xmath218 .",
    "however , we do not know how to do this in the whole generality .",
    "we will only prove how to do it for the graphs @xmath264 , that have an additional property : it is easy to see that they are weakly - deterministic , in the sense , that given two vertices @xmath35,@xmath219 and a word @xmath101 , there is at most one path from @xmath35 to @xmath219 .",
    "first we trim @xmath264 so that any vertex of @xmath264 is reachable from a vertex of size @xmath312 .    for a given @xmath2",
    ", we consider a set @xmath324 of infinite words over the alphabet @xmath325 defined as follows : a word is in @xmath326 if and only if it never contains more than @xmath327 consecutive letters in @xmath10 , never more than @xmath312 consecutive letters in @xmath328 , and all factors of the form @xmath329 satisfy than there is a vertex from @xmath330 to @xmath331 labeled by @xmath33 .",
    "now it it clear that if @xmath332 is an infinite path in @xmath264 , then @xmath333 is a word of @xmath324 .",
    "conversely , any word of @xmath324 , upto the deletion of at most @xmath334 letters at its beginning , represents a path in @xmath264 .    moreover , @xmath335 .",
    "indeed , we can recover all the states knowing only @xmath245 and @xmath336 , as the graph is weakly deterministic .",
    "furthermore , the length of @xmath337 is exactly @xmath338 .",
    "this means that the maximum complexity on the graph @xmath264 can be computed as : @xmath339    and this we know how to compute .",
    "indeed , @xmath324 is what is called a subshift of finite type ( it is defined by a finite set of forbidden words ) , for which the above quantity is exactly the entropy ( ! ) of @xmath324 @xcite , which is easy to compute , see e.g. , @xcite .    to better understand what we did in this theorem , the intuition is as follows : computing the entropy of the trace is difficult , but the trace can be approximated by taking only into account configurations for which we cross at most @xmath2 times the frontier between any two consecutive cells . for this approximation @xmath340 of the trace",
    ", we can reorder the letters inside the trace so that transitions corresponding to the same position are consecutive , and this does not change the entropy . however , it makes it easier to compute .",
    "the main open problem is of course to strengthen the last theorem , and actually characterise the exact numbers that can arise as entropies of turing machines",
    ". it can not be all nonnegative computable numbers , as an enumeration of turing machines would give us an enumeration of these numbers , which is impossible by an easy diagonalisation argument .",
    "the natural conjecture is that the supremum in the theorem is actually reached , which would prove that the numbers that arises as entropies of turing machines are exactly the numbers that arises as entropies of subshifts of finite type , which are well known .    finally , the situation for turing machines with two - tapes is not clear . of course , we know that the speed ( resp .",
    "entropy ) are not computable @xcite ( there is no algorithm that given a turing machine and a precision @xmath0 computes the speed upto @xmath0 ) , but we know of no example where the speed ( resp .",
    "the entropy ) is not a rational number ( resp .",
    "a computable real number ) ."
  ],
  "abstract_text": [
    "<S> we prove that the maximum speed and the entropy of a one - tape turing machine are computable , in the sense that we can approximate them to any given precision @xmath0 . </S>",
    "<S> this is contrary to popular belief , as all dynamical properties are usually undecidable for turing machines . </S>",
    "<S> the result is quite specific to one - tape turing machines , as it is not true anymore for two - tape turing machines by the results of blondel et al . , and uses the approach of crossing sequences introduced by hennie .    </S>",
    "<S> * keywords * : turing machines , dynamical systems , entropy , crossing sequences , automata . </S>"
  ]
}