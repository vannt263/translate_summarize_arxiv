{
  "article_text": [
    "simulation in this section is implemented in ns2 , using c++ and otcl as the programming language .",
    "the simulation is carried out on two network topologies including the geant network which has 23 nodes and 74 links and the sprintlink topology which has 30 nodes and 138 links from rocketfuel project [ 28 ] .",
    "for the two network topologies , we use the following method to set link capacity .",
    "all of the network nodes are divided into pop1 nodes and pop2 nodes .",
    "the pop1 node s degree is less than 3 ; and the pop2 node s degree is not less than 3 .",
    "if the link connecting one pop1 node , we set the link capacity as 2.5gbps ; if the link connecting two pop2 nodes , we set the link capacity as 10gbps .    in our work , to approve algorithm effectiveness we compare our proposed heate algorithm with pure energy - aware ospf ( ea - ospf ) algorithm and energy - aware flow allocation ( ea - fa ) algorithm . to improve energy efficiency in the hybrid network",
    ", ea - ospf only performs optimizing ospf link weight , and ea - fa algorithm only performs optimizing traffic splitting ratio in sdn - enabled switches . for all these three algorithms ,",
    "the traffic matrix is generated as eq.(12 ) [ 29 ] , where @xmath68 denotes the traffic flow from node @xmath69 to node @xmath70 , @xmath71 denotes the link capacity of link @xmath72 , and @xmath73 denotes the random figure between 0 and 0.1 .",
    "we randomly generate 50 traffic matrices .",
    "@xmath74    fig.4 and fig.5 show energy saving ratio vs number of sdns for geant network and sprintlink network , respectively .",
    "the definition of energy saving ratio in our study is the ratio of number of turned - off links to total number of links . from fig.4 and fig.5",
    ", we can see that energy saving ratio of heate and ea - fa increases rapidly with the increase of deployed sdn - enabled switches in the network .",
    "the reason is that with the increase of sdns , the central sdn controller can control more traffic flows and globally choose the optimal path for them to maximize energy saving .",
    "when the deployment of sdns is greater than a threshold ( i.e. , 16 nodes in the geant network and 21 nodes in the sprintlink network ) , the variation of energy saving ratio becomes relatively flat .",
    "this is because when the deployment of sdns reaches a threshold , an approximately optimal energy - saving flow allocation can be achieved .",
    "more sdn - enabled switches deployed into the network will make no obvious enhancement in energy saving .",
    "we demonstrate that when deploying the sdn at a small rate , we can obtain the most of the energy efficient benefit . since ea - ospf achieves energy efficiency by link weight optimization , the increase of number of sdns does not influence energy saving ratio of ea - ospf .",
    "fig.6 and fig.7 show energy saving ratio of three algorithms under different traffic matrices for geant network and sprint link network , respectively .",
    "we assume that the number of sdn - enabled switches is 6 in the hybrid network . from fig.6 and fig.7",
    ", we can see that heate saves more 13.2% energy consumption compared with ea - ospf , and more 21.7% energy consumption compared with ea - fa in average .",
    "this is because that the heate jointly optimizes the ospf link weight and traffic flow splitting ratio in the hybrid network .",
    "the above two procedures are interactive within the algorithm .",
    "thus the heate aggregates the uncontrollable flow and controllable flow onto partial links and turns off idle links .",
    "ea - ospf only optimizes ospf link weight , and ea - fa only optimizes traffic splitting ratio at sdns .",
    "so the energy - saving effect of the latter two algorithms is not as good as that of the heate .            in this paper",
    ", we study on energy - efficient traffic engineering problem in hybrid sdn / ip networks .",
    "since the problem to solve in our work is np - hard , we propose a novel heuristic heate ( hybrid energy - aware traffic engineering ) algorithm to solve this problem .",
    "the heate algorithm jointly optimizes ospf link weight of ip routers and traffic flow splitting ratio of sdn - enabled switch .",
    "thus traffic flow is aggregated onto partial links and the underutilized links can be turned off to save energy . by computer simulation results ,",
    "we show that our algorithm has a significant improvement in energy efficiency in hybrid sdn / ip networks .",
    "hong , s. kandula , r. mahajan , m. zhang , v. gill , m. nanduri , and r. wattenhofer , achieving high utilization with software - driven wan \" , in proceedings of the acm sigcomm 2013 conference on sigcomm .",
    "acm , 2013 , pp .",
    "15 - 26 .",
    "s. jain , a. kumar , s. mandal , j. ong , l. poutievski , a. singh , s. venkata , j. wanderer , j. zhou , m. zhuet al .",
    ", b4 : experience with a globally - deployed software defined wan \" , inproceedings of the acm sigcomm 2013 conference on sigcomm .",
    "acm , 2013 , pp .",
    "3 - 14 .",
    "l. m. correia , d. zeller , o.blume , d. ferling , y. jading , i. godor , g .",
    "auer , and l. van der perre , `` challenges and enabling technologies for energy aware mobile radio networks '' , ieee commun . mag .",
    "66 - 72 , nov . 2010 .",
    "w. fisher , m. suchara , and j. rexford , `` greening backbone networks : reducing energy consumption by shutting off cables in bundled links '' , in proc .",
    "1st acm sigcomm workshop green netw . , aug .",
    "2010 , pp .",
    "29 - 34 .",
    "r. bolla , r. bruschi , f. davoli , and f. cucchietti , `` energy efficiency in the future internet : a survey of existing approaches and trends in energy - aware fixed network infrastructures '' , communications surveys and tutorials , ieee , vol.13 , no.2 .",
    "h. hamann , t. van kessel , m. iyengar , j .- y .",
    "chung , w. hirt , m. schappert , a. claassen , j. cook , w. min , y. amemiya , v. lopez , j. lacey , and m. oboyle , `` uncovering energy - efficiency opportunities in data centers '' , ibm journal of research and development .",
    "vol.53 , no.3 , 2009 .",
    "marcelo r. nascimento , christian e. rothenberg , etc , `` virtual routers as a service : the routeflow approach leveraging software - defined networks '' , proceedings of the 6th international conference on future internet technologies , 2011 ."
  ],
  "abstract_text": [
    "<S> software defined networking ( sdn ) can effectively improve the performance of traffic engineering and has promising application foreground in backbone networks . </S>",
    "<S> therefore , new energy saving schemes must take sdn into account , which is extremely important considering the rapidly increasing energy consumption from telecom and isp networks . at the same time </S>",
    "<S> , the introduction of sdn in a current network must be incremental in most cases , for both technical and economic reasons . during this period </S>",
    "<S> , operators have to manage hybrid networks , where sdn and traditional protocols coexist . in this paper , we study the energy efficient traffic engineering problem in hybrid sdn / ip networks . </S>",
    "<S> we first formulate the mathematic optimization model considering sdn / ip hybrid routing mode . as the problem is np - hard </S>",
    "<S> , we propose the fast heuristic algorithm named heate ( hybrid energy - aware traffic engineering ) . in our proposed heate algorithm , </S>",
    "<S> the ip routers perform the shortest path routing using the distribute ospf link weight optimization . </S>",
    "<S> the sdns perform the multi - path routing with traffic flow splitting by the global sdn controller . </S>",
    "<S> the heate algorithm finds the optimal setting of ospf link weight and splitting ratio of sdns . </S>",
    "<S> thus traffic flow is aggregated onto partial links and the underutilized links can be turned off to save energy . by computer simulation results , </S>",
    "<S> we show that our algorithm has a significant improvement in energy efficiency in hybrid sdn / ip networks .    </S>",
    "<S> software defined networking , traffic engineering , network energy , ip networks .    </S>",
    "<S> [ [ sec : introd ] ]    defined network ( sdn ) is a new networking paradigm [ 1 - 3 ] with the control plane and the data plane separated , which allows operators to easily deploy network applications through a central controller in the control plane and to distribute the fine - grained policies into the switch flow table in the data plane through standard interfaces . in the sdn , </S>",
    "<S> a logically centralized controller that has a global network state is responsible for path selection and it communicates with the network - wide distributed forwarding elements by openflow protocol . </S>",
    "<S> google has reported that it is using a sdn to interconnect its world - wide data centers due to the ease , efficiency in achieving traffic engineering objectives [ 4 ] . </S>",
    "<S> it expects that the sdn architecture to realize better network capacity utilization and reduce time delay .    at present , fulfilling full sdn deployment is impossible for network operators in a short term as it requires a lot of modifications to current existing networking architecture and the replacement of `` old '' network equipments cause high cost . on the other hand , sdn comes with its own set of challenges and limitations , ranging from deployment obstacles to concerns on logic centralization guarantees , e.g. , in terms of resilience , robustness and scalability . </S>",
    "<S> thus the introduction of sdn in an existing network must be incremental in most cases . </S>",
    "<S> hybrid sdn model will be widely used in the future . as shown in fig.1 , in a hybrid sdn / ip network , </S>",
    "<S> the sdn - enabled switches and traditional ip routers co - exist , which are distinguished by whether supporting sdn protocols . </S>",
    "<S> the detailed description of the hybrid model is provided in subsection iii.b .    at the same time , energy consumption from the information and communication technologies ( ict ) sector , and in particular from telecom and isp networks , is increasing fast . to mitigate this problem , new schemes must adapt to such new environment of hybrid sdn / ip networks .    in this paper </S>",
    "<S> , we study the problem of energy - aware traffic engineering in hybrid sdn / ip networks . </S>",
    "<S> our objective is to minimize network energy consumption . in our considered hybrid network , </S>",
    "<S> we assume only one controller controls all sdn - enabled switches in the network , and the rest of the network nodes are ip routers running hop - by - hop routing using a standard routing protocol . in ip network , </S>",
    "<S> open shortest path first ( ospf ) is the most commonly used intra - domain internet routing protocol . </S>",
    "<S> the network operator assigns a weight to each link , and traffic flows are routed along the shortest path which are computed using these weights . </S>",
    "<S> ip network energy can be minimized by finding an optimal set of link weights [ 5 ] . </S>",
    "<S> in such a hybrid sdn / ip network , we propose energy - aware traffic engineering algorithm that the set of ospf link weights and traffic flow routing controlled by the sdn controller can be jointly optimized to achieve energy efficiency . </S>",
    "<S> we hope that the proposed algorithm can adaptively and dynamically manage traffic in a network to accommodate traffic varies and minimize network energy consumption . in general , the main contributions of our work can be summarized as follows :    - we first present a linear programming mathematic model to minimize the sdn / ip hybrid network energy . in this model , ip routers perform the shortest path routing by the set of link weight from ospf protocol ; sdn - enabled switches perform multi - path routing with traffic split by the central sdn controller .    </S>",
    "<S> - we also propose the fast heuristic algorithm named heate ( hybrid energy - aware traffic engineering ) . </S>",
    "<S> the heate algorithm mainly consists of two parts : the first part is the link weight optimization for ip routers based on neighboring region search and the second one is traffic flow splitting at the sdn - enabled switches by the global controller . </S>",
    "<S> the algorithm aggregates traffic flow onto partial links and turns off underutilized links for energy saving .    </S>",
    "<S> - we conduct extensive simulations to evaluate our proposed algorithm using real network topologies and traffic traces . </S>",
    "<S> we find that even when only a small number of sdn - enabled switches are deployed in the traditional ip network , a significant improvement in energy efficiency can be gained .    </S>",
    "<S> the rest of the paper is organized as follows . </S>",
    "<S> section [ section : related_work ] briefly describes the related work . </S>",
    "<S> the hybrid sdn / ip network architecture is presented in section iii . in section iv </S>",
    "<S> , we formulate a mathematical optimization model to minimize energy consumption in the hybrid network . </S>",
    "<S> the fast heate heuristic algorithm is presented in section v. the simulation results and the performance analysis are depicted in section vi . </S>",
    "<S> finally , conclusions are made in section vii .    </S>",
    "<S> [ [ section : related_work ] ]    there have been a number of works focused on saving energy in traditional networks . </S>",
    "<S> the energy saving problem of ospf protocol is studied in [ 6 ] , where a novel network - level strategy is proposed to save energy during low traffic periods . the solution in [ 6 ] </S>",
    "<S> is that only a subset of router shortest path trees ( spts ) are used to select the routing paths . the works in [ 7 - 9 ] focused on saving energy of networks in other scenarios . </S>",
    "<S> by selectively powering down individual cables of large bundled links , [ 9 ] developed and evaluated techniques that save energy in core networks . several easy - to - implement heuristics </S>",
    "<S> are also developed in this work . </S>",
    "<S> in addition , literature [ 7 ] and [ 8 ] studied energy saving in mobile radio networks and cellular access networks , respectively , and developed their own heuristic algorithms as well .    </S>",
    "<S> recently , some works studied the problem of saving energy in software - defined networks . </S>",
    "<S> lots of effort has gone into estimating the energy consumption at the different parts of a network , including core , transport and access [ 10 - 14 ] , data centers [ 15 - 16 ] , and end - user devices [ 17 ] . based on openflow , literature </S>",
    "<S> [ 18 ] focused on saving energy without explicit constraints , where they dynamically detected switches with minimal trafic and powered them off by consolidating the flows to other switches from them . </S>",
    "<S> literature [ 19 ] presented an openflow controller that created a loop - free layer-2 topology and reduced the network energy consumption by switching off inactive interfaces .    to the best of our knowledge , </S>",
    "<S> this is the first paper developing energy - aware traffic engineering techniques for hybrid sdn / ip networks . </S>",
    "<S> most of works in this area so far are focused on devising pure sdn , and ignore hybrid sdn architecture and corresponding application . </S>",
    "<S> a small number of works [ 20 - 22 ] studied the hybrid sdn network . in </S>",
    "<S> [ 20 ] , four hybrid sdn models ( i.e. , topology - based , service - based , class - based and integrated ) are defined and explored , and corresponding use cases ( including transition and long - term design use cases ) are described . </S>",
    "<S> the authors of [ 20 ] also provided a comparative analysis of the presented hybrid sdn models and showed that these models can mitigate the respective limitations of traditional and sdn ways . </S>",
    "<S> the authors of [ 21 ] considered traffic engineering in the case where a sdn controller controls only a few sdn forwarding elements in the network . </S>",
    "<S> the paper formulated the sdn controllers optimization problem for traffic engineering with partial deployment and developed fast fully polynomial time approximation schemes ( fp - tas ) for improving network capacity utilization . in [ 22 ] , the authors developed techniques to adapt traffic flows to network varies , anomaly - free update routing policies and incrementally deploy sdn in traditional networks . </S>",
    "<S> these techniques enable traffic engineering and policy routing at a fine - grained level .    </S>",
    "<S> the above works of hybrid sdn networks aim to maximize the network capacity utilization or reduce packet loss rate during flow table update . </S>",
    "<S> our paper first researches on improving energy efficiency for the hybrid sdn / ip network . to gain better energy - saving effect in sdn / ip hybrid networks </S>",
    "<S> , we jointly optimize the set of link weights among ip routers and traffic flow splitting ratio of sdn - enabled switches .    </S>",
    "<S> [ [ section : system_model ] ]    this section presents the sdn / ip hybrid network architecture which is the co - existence of traditional environment with sdn - enabled switches . </S>",
    "<S> first , we briefly describe sdn architecture . </S>",
    "<S> then the sdn / ip hybrid network model and routing mechanism are demonstrated respectively .      </S>",
    "<S> sdn architecture includes three layers : data - plane layer , control - plane layer and application layer . </S>",
    "<S> north - bound apis are used to communicate the control - plane layer with application layer and enable application layer provide different patterns of applications , such as routing calculation , traffic engineering , topology measurement , etc . </S>",
    "<S> the controller in control - plane layer collects the network information and manages flows going through sdn - enabled switches in the data - plane layer via south - bound apis .    </S>",
    "<S> the details of flow management are explained as follows . </S>",
    "<S> when a flow arrives at a sdn - enabled switch and can not match any flow entry in the flow table , the following actions will be carried out : ( 1 ) the first packet of the flow is sent by the switch to the controller , ( 2 ) the controller selects the forwarding path from the candidate paths for the flow , ( 3 ) the controller sends the calculated flow entries to the flow table at each switch along the appropriate path , ( 4 ) all subsequent packets in the flow that can match the flow entries in the flow table , are forwarded in the data plane along the path and do not need to be sent to the controller again . from the above actions , the routing flow tables at the sdn - enabled switches are computed by the controller . through the three - layer sdn architecture , central and fine - grained control for the network management over the traffic flows can be realized in a global network perspective .      </S>",
    "<S> similar to the previous works [ 21 , 22 ] , in this paper , we define the hybrid model on basis of route flow architecture [ 23 ] . </S>",
    "<S> the hybrid sdn model combines sdn - enabled devices with traditional existing networks . </S>",
    "<S> that is , the data forwarding plane consists of traditional ip routers and sdn - enabled switches . </S>",
    "<S> we distinguish between traditional ip routers and sdn - enabled switches according to whether support sdn protocols . </S>",
    "<S> the sdn - enabled switches are controlled by a sdn controller , which means the forwarding flow table of the sdn - enabled switches is computed by the controller . </S>",
    "<S> the ip routers use standard hop - by - hop routing protocol like ospf to forward data packets . to focus on the energy aware traffic engineering problem , </S>",
    "<S> we assume the sdn - enabled switches are already deployed , randomly and uniformly distributed . </S>",
    "<S> an example of hybrid sdn / ip network is depicted in fig.1 . </S>",
    "<S> solid lines represent data links which are used to forward data traffic in the data forwarding plane , while dashed lines represent channels used to send control traffic ( traffic to or from the controller ) . </S>",
    "<S> we assume that all the data links in the network are bidirectional and all link ospf weights are set to 1 . </S>",
    "<S> nodes 3 , 8 , 10 are sdn - enabled switches which are controlled by a sdn controller .          from the perspective of traditional ip routers , they regard the sdn - enabled switches as common ip routers . </S>",
    "<S> so when computing traffic forwarding paths of the traditional ip routers , the existence of sdn - enabled switches are externally transparent to other ip routers . </S>",
    "<S> the ip routers run ospf protocol , establish adjacency relation between them by sending a hello message , exchange network topology information such as link weights by utilizing link state advertisement ( lsa ) message , and update link - state database ( lsd ) which keeps the whole network topology information . </S>",
    "<S> finally all the ip routers maintain the same lsd , compute the shortest path trees , and establish routing table and forwarding information base ( fib ) according to the lsd . </S>",
    "<S> meanwhile , sdn - enabled switches send the network topology information to the sdn controller . </S>",
    "<S> the sdn controller knows the current ospf weights as well as the amount of traffic flows on each link . </S>",
    "<S> it computes the traffic routing based on the information . </S>",
    "<S> the sdn - enabled switch may has multiple next - hops for a destination . in fig.2 , we give an example of the routing path from all other nodes to node 5 for the network model of fig.1 . </S>",
    "<S> the solid lines represent the shortest path tree based on ospf protocol to switch 5 and the dotted lines represent the feasible path from sdn - enabled switches . for an ip router , </S>",
    "<S> there is only one feasible path to node 5 if ecmp ( equal cost multiple paths ) does not exist to the destination . for a sdn - enabled switch </S>",
    "<S> , there can be multiple paths that are associated with the outgoing links of the sdn - enabled switch .        </S>",
    "<S> [ [ section ] ]    a key factor of energy - aware traffic engineering problem is the network energy consumption model . </S>",
    "<S> there are two popular models to determine network energy consumption . </S>",
    "<S> one is powering down model , and the other is speed scaling model [ 24 ] . </S>",
    "<S> the former reduces energy consumption by turning off unnecessary network elements , such as line cards and routers , and the latter achieves energy saving by setting the processing speed of the network elements according to the traffic load . </S>",
    "<S> we focus on the powering down model in this paper . in this model , </S>",
    "<S> each network element has two opposite state : the active state at the full rates and the sleep state at the zero rates . </S>",
    "<S> the network element consumes corresponding energy in the active state and does not consume energy in the sleep state . </S>",
    "<S> we assume work elements consume the same energy when they operate in the active state . </S>",
    "<S> thus we can achieve energy efficiency by aggregating traffic flows onto a subset of links and turning off idle links which no traffic flow traverses through .    </S>",
    "<S> 8.5cm>=0.15x > = 0.85x notation &  description +    @xmath0 & the hybrid network * _ g _ * , where * _ n _ * is the set of network nodes and * _ l _ * is the set of directed physical links . </S>",
    "<S> + @xmath1 & the node in the hybrid network , and _ v , u , t _ @xmath2 * _ n_*. + @xmath3 & the weight of link @xmath4 . </S>",
    "<S> + @xmath5 & the total traffic flow of link @xmath4 . </S>",
    "<S> + @xmath6 & the capacity of link @xmath4 . </S>",
    "<S> + @xmath7 & the utilization of link @xmath4 . </S>",
    "<S> + @xmath8 & a large number . </S>",
    "<S> + @xmath9 & the maximum link utilization . </S>",
    "<S> + @xmath10 & the starting node of link @xmath4 . + @xmath11 & the terminating node of link @xmath4 . </S>",
    "<S> + @xmath12 & the traffic demand from node _ v _ to some other node _ t_. + @xmath13 & the traffic flows that are injected at a sdn - enabled switch @xmath14 to some destination _ t_. + @xmath15 & the sum of weight for the shortest path from node @xmath16 to node @xmath17 . </S>",
    "<S> + @xmath18 & the flow to node @xmath17 on link @xmath4 . </S>",
    "<S> + @xmath19 & the common value of non - zero flow from node @xmath16 to node @xmath17 assigned to links outgoing from @xmath16 and belonging to the shortest - paths from @xmath16 to @xmath17 . </S>",
    "<S> + @xmath20 & binary variable . </S>",
    "<S> it equals to 1 if and only if link @xmath4 is on a shortest - path to node @xmath17 </S>",
    "<S> . + @xmath21 & binary variable . </S>",
    "<S> it equals to 1 if link @xmath4 is selected to be an active link ; otherwise , it equals to 0 . </S>",
    "<S> + @xmath22 & the set of sdn switches in the network , and @xmath23 . </S>",
    "<S> + @xmath24 & the set of traditional ip routers in the network , and @xmath25 . </S>",
    "<S> +    [ table : notation ]    for clear presentation , we summarize the notations that will be used in the problem in table [ table : notation ] . the energy - aware traffic engineering problem in hybrid sdn / ip networks consists of two parts : the ospf link weight optimization at ip routers and traffic flow splitting at the sdn - enabled switches managed by the sdn controller . in the following , </S>",
    "<S> we first give the energy - aware traffic engineering optimization problem .    </S>",
    "<S> _ minimize : _ @xmath26    _ subject to : _ </S>",
    "<S> @xmath27 @xmath28 @xmath29 @xmath30 @xmath31 @xmath32 @xmath33 @xmath34 </S>",
    "<S> @xmath35 @xmath36    the objective function is to minimize the total energy consumption in the network . since we assume that every link consumes the same energy , the objective is converted to minimizing total number of active links in the hybrid network . </S>",
    "<S> constraint ( 2 ) and constraint ( 3 ) are flow conservation constraints that ensure the traffic flows are routed from source node to destination node . </S>",
    "<S> constraint ( 4 ) ensures the link load equals all traffic flows carried on it . </S>",
    "<S> constraint ( 5 ) states physical capacity constraints that guarantee the link load does not exceed the threshold of link capacity . </S>",
    "<S> constraint ( 6 - 10 ) guarantee traditional ip router has a unique next hop which is on the shortest path to destination and sdn switches may have multiple next hops . </S>",
    "<S> constraint ( 6 ) assures that if link @xmath4 belongs to one of the shortest - paths from traditional ip router @xmath10 to node @xmath17 , then its flow to node @xmath17 is equal to @xmath37-a common value to all links outgoing from ip router @xmath10 and belonging to the shortest - paths to destination @xmath17 . </S>",
    "<S> constraint ( 7 ) assures the zero flow to @xmath38 in the case when link @xmath4 is not on the shortest - path to @xmath17 . </S>",
    "<S> constraint ( 8) assures that if @xmath20 , then link @xmath4 is on the shortest - path to @xmath17 . </S>",
    "<S> constraint ( 9 ) assumes that if @xmath39 , then link @xmath4 is not on the shortest - path to @xmath17 . </S>",
    "<S> constraint ( 10 ) forces the shortest - path to be unique provided such a solution is feasible . constraint ( 6 - 10 ) only guarantee the next hop of the traditional ip routers are on the shortest path to destination , and sdn - enabled switches may have multiple next hops which may be not on the shortest path . constraint ( 11 ) </S>",
    "<S> restricts the range of link weights .    </S>",
    "<S> when the ospf link weight is fixed , the problem boils down to a multi - commodity linear programming problem , which can be solved in polynomial time [ 25 ] . </S>",
    "<S> however , the ospf link weights are undetermined , which adds up the complexity of the problem . </S>",
    "<S> it has been proved that optimizing of link weight setting is a np - hard problem [ 26 ] . </S>",
    "<S> our proposed model can be reduced to the ospf link weight optimization problem if traffic splitting ratio on all sdns is determined in advance . </S>",
    "<S> that is to say , comparing the constraints of the mathematic problem eq.(1 - 11 ) with that of the linear program eq.(1 - 9 ) in literature [ 26 ] , we can find the latter is a subset of the former . </S>",
    "<S> since the latter has already been proved to be a np - hard problem in [ 26 ] , the mathematic problem eq.(1 - 11 ) in this paper is also a np - hard problem .    [ [ section : heate ] ]    since the problem to solve in our work is np - hard , we propose the fast heuristic heate ( hybrid energy - aware traffic engineering ) algorithm that jointly optimizes link weights of ip routers and traffic splitting ratio at sdn - enabled switches to improve energy efficiency .    </S>",
    "<S> @xmath0 , @xmath12 , @xmath9 , initial link weight set @xmath40 . </S>",
    "<S> the set of active links @xmath41 . </S>",
    "<S> initialize @xmath42 ; run _ neighboring  region  search _ function to update link weight @xmath3 , where @xmath43 ; generate the shortest path tree from any other node to @xmath17 based on @xmath3 , find the first sdn - enabled switch @xmath14 in the shortest path and compute the injected flow at sdn - enabled switch @xmath13 ; run _ flow  alloction _ function at the sdn - enabled switch for @xmath13 ; try to delete the minimum utilization link @xmath4 from the network . </S>",
    "<S> if successful , @xmath44 and go back to line 2 ; else , * the algorithm ends and return @xmath41*.      the detail of heate algorithm is shown in alg.[algorithm : heatealg ] . </S>",
    "<S> since the ospf link weight and traffic splitting ratio are interdependent , we only fix one parameter to calculate the other parameter in the algorithm . </S>",
    "<S> the core of the algorithm is _ neighboring region search _ function ( line 2 ) and _ flow allocation _ function ( line 5 ) . </S>",
    "<S> the input of the algorithm includes the initial ospf link weight set @xmath40 ( in our study , we assume the initial link weight equals 1 ) . </S>",
    "<S> we first optimize link weight for energy efficiency using _ neighboring region search _ function ( line 2 ) . </S>",
    "<S> the detail of _ neighboring region search _ function is shown in alg.2 . </S>",
    "<S> thus the shortest path tree from other nodes to a special node is generated based on new link weight set @xmath40 . </S>",
    "<S> the injected flow to the first sdn - enabled switch on the path can be calculated . as sdn - enabled switch </S>",
    "<S> can split traffic to the destination @xmath17 , the algorithm calls _ flow allocation _ function to compute the traffic splitting ratio on outgoing links from the switch ( line 3 - 6 ) . </S>",
    "<S> the detail of _ flow allocation _ function is shown in alg.3 . after determining the traffic flow on ip routers and sdn - enabled switches , we can obtain the utilization of all links . </S>",
    "<S> we try to delete the minimum utilization link from the network to save energy . </S>",
    "<S> if successful , which means the utilization of residual links is less than the utilization threshold @xmath9 , we delete the link from the network and loop back to line 2 ; else the algorithm ends and the final result is returned .    the initial link weight set @xmath40=\\{@xmath3 } , the maximum link utilization @xmath9 . the new weight @xmath3 of link @xmath4 .    </S>",
    "<S> compute the shortest path routing in the network based on the link weight set @xmath40=\\{@xmath3 } ; compute the link utilization @xmath45 ; @xmath46 ; @xmath46 ; * return * @xmath3 .    as shown in alg.2 , _ neighboring region search _ function is to determine the searching area and adjustment method when updating link weight . </S>",
    "<S> according to the relationship between link weights and traffic flows , the function adjusts the link weights based on link utilization . at each iteration of link weight adjustment , </S>",
    "<S> the function distinguishes network links based on the link utilization into three categories : congested links ( the link utilization is bigger than @xmath9 ) , sleeping links ( the link utilization is less than @xmath47 ) , middle - utilization links ( the other links ) . for congested links , </S>",
    "<S> the function increases the weights to reduce the probability of being demand forwarding paths . </S>",
    "<S> it reduces link utilization and avoids network congestion . for sleeping links </S>",
    "<S> , the function also increases the weights to reduce the probability of being forwarding paths so that the link utilization can move toward zero direction for energy saving . for each iteration , </S>",
    "<S> the method of link weight adjustment is based on harmonic series [ 27 ] to improve searching efficiency and the number of iterations in the function is set to 10,000 .    the shortest path from other nodes to node @xmath17 , the traffic flow @xmath5 of all links of the path , the link capacity @xmath6 of all links of the path , the first sdn - enabled switch @xmath14 on the shortest path , the injected traffic flow @xmath13 , the link utilization threshold @xmath9 . </S>",
    "<S> the flow @xmath13 allocation among the multiple paths . </S>",
    "<S> for the first sdn - enabled switch @xmath14 , if there are @xmath48 outgoing links from @xmath14 , calculate the @xmath48-th shortest path from node @xmath14 to node @xmath17 and store them to set @xmath49 ; @xmath50 ; @xmath51 ; sort all paths of @xmath52 in the ascending order of available path capacity @xmath53 ; initialize : @xmath54 ; route the flow volume @xmath55}$ ] on the path @xmath56 $ ] ; @xmath57}=cap_{p[j]}-cap_{p[i]}$ ] ; @xmath58}$ ] ; @xmath59 ; * return * the flow allocation result for @xmath13 .    as shown in alg.3 </S>",
    "<S> , flow allocation function performs traffic splitting among multiple next hops in the first sdn - enabled switch on the shortest path to node . to save network energy , the aim of the function is to move traffic flow from low - utilization links to high - utilization links . </S>",
    "<S> we first compute the shortest paths from the sdn - enabled switch to the destination node , and then compute the available capacity of these paths ( line 1 - 7 ) . </S>",
    "<S> we prefer to allocate traffic flow on high - utilization path ( i.e. , the path with minimal available capacity ) to achieve flow aggregation . </S>",
    "<S> the flow allocation procedure continues until the flow volume is completely allocated among multiple paths . considering the shortest paths are not guaranteed to be disjointed </S>",
    "<S> , we use line 12 - 16 to calculate the real residual capacities of the jointed paths .    </S>",
    "<S> obviously , the algorithm complexity of heate is @xmath60 , where @xmath61 is the number of the nodes in the set of network nodes @xmath62 . considering that the flow in backbone networks will not change dramatically </S>",
    "<S> , heate will not be called very frequently . </S>",
    "<S> therefore , the energy consumption of running this algorithm can be ignored comparing to the saved energy by heate .      </S>",
    "<S> we use fig.3 as a simple example to illustrate our algorithm . </S>",
    "<S> the graph is a simple network topology . </S>",
    "<S> it has three nodes and node a is a sdn - enabled switch , and node b and c are both ip routers ( see fig.3(a ) ) . </S>",
    "<S> we assume the link capacity is set to 10 units , and @xmath9 is set to 0.8 . </S>",
    "<S> there are totally three traffic flows in the network . </S>",
    "<S> the traffic flows are given in the form ( source , destination , bandwidth units ) : @xmath63=(a , b,1 ) , @xmath64=(a , c,3 ) and @xmath65=(c , b,3 ) . </S>",
    "<S> the initial link weight is set to 1 . </S>",
    "<S> fig.3(b)-(d ) shows the procedure of _ neighboring region search _ function in the algorithm . </S>",
    "<S> fig.3(b ) shows the link load based on initial ospf link weight . </S>",
    "<S> since the initial link weight is set to 1 , the path of @xmath63 is a - b , the path of @xmath64 is a - c , and the path of @xmath65 is c - b . </S>",
    "<S> so the traffic load of link ( a , b ) , ( a , c ) and ( c , b ) is 1 unit , 3 units and 3 units , respectively . </S>",
    "<S> fig.3(c ) shows the link load based on the first - iteration adjusted link weight . </S>",
    "<S> since the load utilization of link ( a , b ) equals 0.1 and is less than the sleeping threshold ( @xmath66 ) , accordingly the weight of link ( a , b ) is changed to 2 ( see line 5 of _ neighboring region search _ function ) and other link weight is unchanged . </S>",
    "<S> then there exist two equal - cost paths from node a to node b : a - b and a - c - b . the traffic flow @xmath63 is equally spitted between two paths . </S>",
    "<S> therefore , the traffic load of ( a , b ) , ( a , c ) and ( c , b ) is 0.5 unit , 3.5 units and 3.5 units respectively . </S>",
    "<S> fig.3(d ) shows the link load based on the second - iteration adjusted link weight . </S>",
    "<S> since the load utilization of link equals 0.05 and is less than the sleeping threshold ( @xmath66 ) , accordingly the weight of link ( a , b ) is changed to 2.5 ( see line 5 of _ neighboring region search _ function ) and other link weight is unchanged . </S>",
    "<S> then the shortest path from node a to node b is a - c - b . </S>",
    "<S> so the traffic load of link ( a , b ) , ( a , c ) and ( c , b ) is 0 unit , 4 units and 4 units , respectively .    </S>",
    "<S> we note that neighboring region search function aggregates traffic flow onto partial links by two iterations of link weight adjustment in this sample . for large - scale network , </S>",
    "<S> more iteration times are needed to have effect . </S>",
    "<S> fig.3(e ) shows the shortest path from other nodes to node b. the solid lines are the shortest path based on the link weight of fig.3(d ) . because the flows pass through the sdn node </S>",
    "<S> can flexibly choose the outgoing links regardless of their weights , we use dotted lines to represent the extra possible links that the sdn node can split the flows to . in fig.3(f ) , we assume that a new node d joins in the network and new traffic flow @xmath67=(d , b,2 ) is generated . </S>",
    "<S> thus the injected flow on sdn node a to destination b is 2 units . </S>",
    "<S> the algorithm calls _ flow allocation _ function to calculate traffic splitting ratio for node a. since the load utilization of path ( a , b ) is zero , and load utilization of path ( a - c - b ) is 0.4 , the function prefers to choose the high - utilization path ( a - c - b ) carrying @xmath67 . at last , the traffic load of link ( a , b ) , ( a , c ) and ( c , b ) is 0 unit , 6 units and 6 units , respectively . </S>",
    "<S> the idle link ( a , b ) can be turned off for saving energy in the network . </S>"
  ]
}