{
  "article_text": [
    "the discontinuous galerkin ( dg ) method is one of the most powerful discretization techniques for solving partial differential equations ( pdes ) @xcite , especially for convection dominated problems , exhibiting localized phenomena like sharp traveling wave fronts , internal and boundary layers @xcite .",
    "the dg method has been applied for this kind of singularly perturbed linear and nonlinear pdes extensively using h - adaptive ( refinement and coarsening in space ) , p - adaptive ( enrichment of the local polynomial degree ) , hp - adaptive and space - time adaptive methods in the last two decades .",
    "another approach to deal with these kind of problems , is the r - method or moving mesh method . in the moving mesh method",
    "the grid points are relocated in the regions where the solution shows rapid variation , while keeping the number of the nodes fixed .",
    "the dg discretization is very flexible , since there is no continuity requirement between the inter - element boundaries , which makes it suitable as a moving mesh method on irregular meshes .",
    "most of the studies with moving mesh methods are limited to finite difference and continuous finite element discretization @xcite .",
    "there are only few publications dealing with dg moving mesh method .",
    "they include the interior penalty dg method for preprocessing the solutions of steady state diffusion - convection - reaction equations @xcite , and the local dg moving mesh method for hyperbolic conservation laws @xcite .",
    "in this paper we develop an adaptive dg moving mesh method for one dimensional semi - linear differential equations with traveling wave solutions of the form    [ model ] @xmath0 \\\\     u(x_l , t ) & =   u_l ,   \\ ; u(x_r , t ) = u_r ,   & t\\in ( t_0,t_f]\\\\      u(x , t_0 ) & = u_0 , & x\\in\\omega,\\end{aligned}\\ ] ]    where @xmath1\\subset\\mathbb{r}$ ] , @xmath2 and @xmath3 are the initial and final time instances , respectively , and @xmath4 denotes the diffusion coefficient .",
    "the model equation becomes the burgers equation with @xmath5 @xcite , burgers-fisher equation with @xmath6 @xcite and the schlgl or nagumo equation with @xmath7 @xcite .",
    "a moving mesh method has three main components ; the discretization of the physical pde , mesh strategy using monitor functions and discretization of the mesh equation .",
    "the discretization of physical pde is either coupled with the moving mesh equation or separated . in the quasi - lagrangian approach , a large system of the discretized pde and moving mesh equation are solved simultaneously by the standard ordinary differential equation ( ode ) solvers . instead , we use the rezoning approach by solving alternately the pde and mesh equation , which allows more flexibility ; mesh generation can be coded separately and embedded in the solution of the pde . since the mesh is updated at each time step , the physical pde has to be discretized at the next time step on the new mesh .",
    "we use the static rezoning approach with the same number of points at each time step @xcite in contrast to the dynamic rezoning @xcite where the number of mesh points is changed at every time step .",
    "therefore in the static rezoning approach the solutions from old to new mesh have to be interpolated .",
    "the paper is organized as follows . in the next section",
    "we describe briefly the dg method for the 1d model problem on a uniform fixed mesh . moving mesh adaption strategy and the adaptive moving mesh dg algorithm",
    "is presented in section  [ sec : moving ] .",
    "numerical results are given in section  [ sec : numeric ] to demonstrate the effectiveness of the proposed method .",
    "before giving the moving mesh strategy in section  [ sec : moving ] , in this section we describe the dg discretization of the model problem on a fixed uniform mesh @xmath8 consisting of @xmath9 elements ( sub - intervals ) @xmath10 $ ] , @xmath11 , and with the fixed mesh size @xmath12 .",
    "we use for the space discretization of the model problem on a fixed mesh the symmetric interior penalty galerkin ( sipg ) method @xcite which is a member of the family of dg methods .",
    "the dg methods use the space of piecewise discontinuous polynomials of degree at most @xmath13 : @xmath14 where @xmath15 is the space of polynomials of degree at most @xmath13 on an interval @xmath16 .",
    "since the functions in @xmath17 are discontinuous at the inter - element nodes , we define the jump and average of a piecewise function @xmath18 at the endpoints of @xmath16 , @xmath19 , respectively , as depicted in figure  [ fig_jump ] , @xmath20=v(x_n^- ) - v(x_n^+ ) \\ ; , \\quad \\ { v(x_n ) \\}=\\frac{1}{2 } ( v(x_n^- ) + v(x_n^+ ) ) , \\ ] ] with @xmath21 on the boundary nodes , the jump and average are defined as @xmath22=-v(x_0^+ ) , \\ ; \\ { v(x_0 ) \\}= v(x_0^+ ) , \\ ; [ v(x_{n_i})]=v(x_{n_i}^- ) , \\ ; \\ { v(x_{n_i } ) \\}= v(x_{n_i}^+).\\ ] ]    .[fig_jump],scaledwidth=70.0% ]    the sipg scheme is constructed by multiplying the continuous ( the solution @xmath23 is sufficiently smooth at the end points of @xmath16 ) equation by a test function @xmath24 and integrating by parts on each element @xmath16 , @xmath25 : @xmath26 by adding all @xmath9 equations , and using the definition of the jumps and , we obtain @xmath27   = 0.\\ ] ] one can verify that for @xmath28 @xmath29 = \\{\\epsilon u_x(x_{n})\\}[v(x_n ) ] + [ \\epsilon u_x(x_{n})]\\ { v(x_n)\\}.\\ ] ] using the identity and the fact that @xmath30=0 $ ] for all @xmath28 ( @xmath23 was sufficiently smooth at the end points of @xmath16 ) , we obtain @xmath31 = 0.\\ ] ] additionally , we have @xmath32=0 $ ] for all @xmath28 . then , adding the penalizing terms and the terms on the boundary nodes , @xmath33 , to both sides of by keeping them unknown on the left hand side and imposing the boundary conditions @xmath34 and @xmath35 on the right hand side , leads to the sipg formulation : @xmath36 in , @xmath37 and @xmath38 denote the symmetric bilinear form and the linear right hand side of the sipg scheme @xmath39 - \\{\\epsilon v_x(x_{n})\\}[u(x_n ) ] +   \\frac{\\sigma}{h}[u(x_{n})][v(x_n ) ] \\right ) , \\\\ l_h(v_h ) & = u_l \\left ( \\epsilon v_x(x_0 ) - \\frac{\\sigma}{h}v(x_0 ) \\right ) + u_r \\left ( \\frac{\\sigma}{h}v(x_{n_i } ) - \\epsilon v_x(x_{n_i } ) \\right),\\end{aligned}\\ ] ] where @xmath40 is the penalty parameter which should be sufficiently large @xcite in order to ensure the coercivity of the bilinear form .",
    "hence , sipg semi - discrete form of reads as : a.e .",
    "@xmath41 $ ] , for all @xmath42 , find @xmath43 such that    @xmath44      let @xmath45 denote the basis functions spanning the dg finite elements space @xmath17 for @xmath46 and @xmath25 , where @xmath47 stands for the local dimension depending on the polynomial order @xmath13 and is given by @xmath48 in 1d .",
    "the local nature of dg methods leads to the basis functions and the approximate solution of the form @xmath49 where @xmath50 are the time - dependent unknown coefficients .",
    "we substitute the second identity in into the system and we choose @xmath51 for @xmath46 and @xmath25 , which leads to the @xmath52 dimensional non - linear system of equations of in matrix - vector form @xmath53 where @xmath54 is the usual mass matrix and @xmath55 is the stiffness matrix related to the bilinear form @xmath56 .",
    "the vectors @xmath57 and @xmath58 are the non - linear vector of unknown coefficients @xmath59 corresponding to the integral of the nonlinear term in and the right hand side vector related to the linear form @xmath60 , respectively .",
    "the initial vector @xmath61 is found by using the equation and the second identity in .",
    "we solve the fully discrete system of , by applying the backward euler scheme to the semi - discrete system .",
    "let @xmath62 be the uniform partition of the time interval @xmath63 $ ] into j time - steps @xmath64 $ ] , @xmath65 , with the step size @xmath66 .",
    "let us denote the approximate coefficient vector @xmath67 of at the time @xmath68 by @xmath69 .",
    "then , the fully discrete formulation of the model is given as : for all @xmath70 , find @xmath71 such that @xmath72 which is solved by newton s method .",
    "in an adaptive moving mesh method the spatial mesh @xmath73 in varies with time @xmath74 consisting of @xmath9 elements @xmath10 $ ] , @xmath11 , of the mesh size @xmath75 . in the nodes",
    "@xmath76 belong to the fixed and uniform mesh @xmath77 on the auxiliary unit interval @xmath78 $ ] , together with the boundary conditions @xmath79 and @xmath80 .",
    "thus , in the adaptive moving mesh method , the mesh is adjusted as the time progresses in such a way that the mesh sizes @xmath81 get smaller in the sub - intervals where the error is large , while the mesh sizes @xmath81 are made coarser in the remaining part of the interval .",
    "the error indicator is chosen to relocate the mesh points where the solution shows large variations , based on the equidistribution principle , where a mesh @xmath82 with the mesh points @xmath83 is determined by satisfying the following relation @xmath84 in this way a continuous function @xmath85 on the interval @xmath86 $ ] can be distributed among the sub - intervals @xmath10 $ ] , @xmath87 . in , the function @xmath88",
    "is called the mesh density function , or monitor function , choice of which stands as the key point for an adaptive moving mesh method .",
    "the most popular choices for the monitor functions @xmath89 are @xcite    * * optimal * @xmath90 * * arc - length * @xmath91 * * curvature * @xmath92    with the intensity parameter @xmath93    finding a proper mesh @xmath82 using the equidistribution condition results in a system of so - called moving mesh partial differential equation ( mmpde ) @xcite    [ meshdensfunc ] @xmath94,\\\\ x(0,t ) & = x_l,\\quad x(1,t)=x_r , & t\\in ( t_0,t_f].\\end{aligned}\\ ] ]    the system is solved through the central finite differences @xmath95 for @xmath96 , where the spatial nodes @xmath97 are the unknown solutions of the nodes @xmath98 .",
    "the relaxation parameter @xmath99 is specified by the user for adjusting the response time of mesh movement according to the changes of the density function @xmath88 .",
    "the functions @xmath100 , @xmath101 , are computed through the discrete form of the monitor function @xmath102 .",
    "for instance , we have for the optimal monitor function @xmath103 where the terms @xmath104 are computed by the central difference approximations using the solutions at the mesh nodes @xmath105 . at each time step , further , the discrete monitor functions @xmath106 are smoothed by weighted averaging ( * ? ? ?",
    "* section 1.2 ) .",
    "there are different approaches @xcite of the adaptive moving mesh method for solving the fully discrete system , called the physical pde , and the mmpde .",
    "one common approach is solving both systems simultaneously using a quasi - lagrange approach . in this approach",
    ", the time derivative term requires a special attention since the mesh is assumed to move in a continuous manner by the time progresses . in such cases ,",
    "there occur an extra convective term which may cause difficulties .",
    "additionally , the solution of the both systems simultaneously needs the coupling of the systems , as a result the dimension of the system to be solved increases .",
    "another choice , which we use in this paper , is the alternate solution using a rezoning approach . in this case , the physical pde and the mmpde are separated from each other , which allows more flexibility as the mesh generation can be coded separately and embedded in the solution of the physical pde . in the static rezoning approach ,",
    "the change in the spatial mesh is derived in a discrete form similar to the solution @xcite . in each time step , first the mesh adaptation is handled using the solution on the old mesh , then the solution is obtained by solving the physical pde on the newly generated mesh .    in the case of dg method ,",
    "the unknown coefficient vectors have to satisfy @xmath107 in the physical pde with the discrete mesh density function in the mmpde . in general , it is difficult to use the coefficient vectors @xmath69 directly to compute the discrete mesh density functions @xmath106 , unless we use the lagrange nodal basis .",
    "let us choose the dg basis functions @xmath108 as the lagrange nodal basis functions , @xmath109 , @xmath87 . then , recalling the definitions of the limit terms at a node @xmath105 , we have the relations @xmath110 the relations originate from the fact that dg methods use discontinuous basis functions at the inter - element nodes . as a result , a dg approximation @xmath111 has two traces at an inter - element node @xmath105 from the neighboring sub - intervals @xmath16 and @xmath112 , as shown in figure  [ fig_jump ] , which are not the same in general .",
    "using the relations and recalling again the average definition in , we can accept the value of the approximate solution @xmath113 as @xmath114 in this way , the solutions of the physical pde will be consistent with the mmpde , where the computation of the discrete mesh density functions @xmath106 require the discrete approximations @xmath111 at the inter - element nodes @xmath105 , @xmath115 .    given the current spatial mesh @xmath116 , coefficient vector @xmath117 , the parameter @xmath99 and time - step size @xmath118 , do for @xmath70 ,    compute a temporary coefficient vector @xmath119 by solving the physical pde on the current mesh @xmath120 , according to , calculate the consistent values of @xmath121 using @xmath119 , compute the discrete mesh density functions @xmath122 using the values @xmath121 , find the mesh @xmath123 by solving the mmpde for the discrete mesh density functions @xmath122 , interpolate the coefficient vector @xmath117 to be used in the new mesh @xmath124 , compute the coefficient vector @xmath69 by solving the physical pde on the new mesh @xmath124 , go to next time step .",
    "the general algorithm is summarized in algorithm  [ alg ] .",
    "we start with an initial mesh @xmath125 ( possibly a uniform mesh ) .",
    "then on an arbitrary time - step @xmath64 $ ] , we , firstly , solve the physical pde on the mesh @xmath120 for an auxiliary solution @xmath119 .",
    "after , following the relation , we use the solution @xmath119 in the mmpde to obtain the new mesh @xmath126 .",
    "finally , we solve the physical pde on the mesh @xmath124 for the solution @xmath69 , and we proceed to the next time - step . on the other hand , the known solution vector @xmath117 will be no more consistent with the new mesh @xmath126 .",
    "this is a natural consequence of the alternate solution with rezoning approach . to make the known solution @xmath117 consistent with the updated spatial mesh @xmath126 , we interpolate it between the meshes @xmath120 and @xmath124 .",
    "the interpolation procedure is as follows : let @xmath116 be the current mesh and @xmath123 denote the updated mesh . for the sake of simplicity , let also @xmath127 with entries @xmath128 being the coefficient vector defined on the current mesh @xmath120 , and @xmath59 with entries @xmath129 denotes the interpolated coefficient vector of @xmath130 into the new mesh @xmath124 , @xmath46 , @xmath87 .",
    "the local nature of dg methods leads for any @xmath131 $ ] to @xmath132    on the other hand , using the lagrange basis functions , on an arbitrary element we obtain @xmath133 $ ] on the new mesh @xmath124 , uniformly distributed @xmath47 nodal degrees of freedoms @xmath134 such that @xmath135 for @xmath136 , and with @xmath137 . in other words ,",
    "the entries @xmath129 of the interpolated coefficient vector @xmath59 are the approximate function values @xmath138 at the nodal degrees of freedoms @xmath139 , @xmath87 , @xmath136 . for any nodal degrees of freedom @xmath139 on the new mesh @xmath124",
    ", we have to determine the intervals @xmath140 $ ] on the current mesh @xmath120 such that @xmath141",
    ". then , using the expansion , we will be able to obtain the entries of @xmath59 as @xmath142 .",
    "in this section we present several numerical examples demonstrating the effectiveness of the adaptive moving mesh dg method . in all of the examples ,",
    "the traveling wave solutions are computed by the optimal mesh density function , but the corresponding mesh trajectories are given for the optimal , arc - length and curvature mesh density functions .      the first test example is the burgers equation @xcite @xmath143 with homogeneous dirichlet boundary conditions on the space - time domain @xmath144\\times [ 0 , 1]$ ] with the diffusion constant @xmath145 . the initial condition is taken as @xmath146 , and linear dg basis functions are used .",
    "we set the time - step size @xmath147 , and we choose the relaxation parameter as @xmath148 .    moving mesh solutions in figure  [ ex1:mov ] are capable of resolving the sharp gradients of the moving fronts in contrast to the oscillatory solutions on the fixed mesh in figure  [ ex1:fix ] . in addition , in figure  [ ex1:mov ] ,",
    "mesh trajectories for the curvature and arc - length monitor functions show large variations with respect to time , whereas for the optimal monitor function the mesh trajectories are smooth .",
    "elements.[ex1:fix],scaledwidth=55.0% ]      consider the burgers-fisher equation @xcite @xmath149 with the exact solution @xmath150 in the space - time domain @xmath151\\times ( -0.2,0]$ ] .",
    "the parameters are @xmath152 , @xmath153 and @xmath154 .",
    "we use quadratic dg basis functions and @xmath155 spatial elements .",
    "the time step - size is taken as @xmath156 .    in figure",
    "[ ex2 ] , we give the solutions of burgers-fisher equation at different time instances for the optimal mesh density function , and the moving mesh trajectories obtained by different monitor functions . in table",
    "[ ex2:table ] the @xmath157-errors between the exact and numerical solutions are tabulated at different times .",
    "the results are very close to those in @xcite computed with the same settings .",
    ".burgers-fisher equation : @xmath157-errors [ cols=\"<,<,<,<,<,<,<\",options=\"header \" , ]",
    "in this paper we have developed an adaptive discontinuous galerkin moving mesh method for a class of one dimensional nonlinear pdes .",
    "the moving mesh equations are solved using the static rezoning approach with the lagrange dg basis functions in the algorithm  [ alg ] .",
    "numerical results for problems with different nature of traveling waves demonstrate the accuracy and effectiveness of the moving mesh dg method . as a future study we aim to extend the dg moving mesh to two dimensional problems in space ."
  ],
  "abstract_text": [
    "<S> in this paper , a moving mesh discontinuous galerkin ( dg ) method is developed for nonlinear partial differential equations ( pdes ) with traveling wave solutions . </S>",
    "<S> the moving mesh strategy for one dimensional pdes is based on the rezoning approach which decouples the solution of the pde from the moving mesh equation . </S>",
    "<S> we show that the dg moving mesh method is able to resolve sharp wave fronts and wave speeds accurately for the optimal , arc - length and curvature monitor functions . </S>",
    "<S> numerical results reveal the efficiency of the proposed moving mesh dg method for solving burgers , burgers-fisher and schlgl(nagumo ) equations . </S>"
  ]
}