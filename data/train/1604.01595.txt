{
  "article_text": [
    "higher - order grammars are an extension of regular and context - free grammars , where non - terminals may take trees or ( higher - order ) functions on trees as parameters .",
    "they were extensively studied in the 1980 s  @xcite , and recently reinvestigated in the context of model checking  @xcite and applied to program verification  @xcite .",
    "the present paper shows that the class of unsafe order-(@xmath0 ) word languages coincides with the class of `` frontier languages '' of unsafe order-@xmath1 tree languages . here",
    ", the frontier of a tree is the sequence of symbols that occur in the leaves of the tree from left to right , and the frontier language of a tree language consists of the frontiers of elements of the tree language . the special case where @xmath2 corresponds to the well - known fact that the frontier language of a regular tree language is a context - free language .",
    "the result has been proved by damm  @xcite for grammars with the safety restriction ( see  @xcite for a nice historical account of the safety restriction ) , but it has been open for unsafe grammars , to our knowledge .",
    "damm s proof relied on the safety restriction ( in particular , the fact that variable renaming is not required for safe grammars  @xcite ) and does not apply ( at least directly ) to the case of unsafe grammars .",
    "we instead use intersection types to transform an order-(@xmath0 ) word grammar @xmath3 to an order-@xmath1 tree grammar @xmath4 such that the frontier language of @xmath4 coincides with the language generated by @xmath3 .",
    "intersection types have been used for recent other studies of higher - order grammars and model checking  @xcite ; our proof in the present paper provides even more evidence that intersection types are a versatile tool for studies of higher - order grammars .",
    "compared with the previous work on intersection types for higher - order grammars , the technical novelties include : ( i ) our intersection types ( used in section  [ sec : leaf ] ) are mixtures of non - linear and linear intersection types and ( ii ) our type - based transformation involves global restructuring of terms .",
    "these points have made the correctness of the transformations non - trivial and delicate .",
    "as stressed by damm  @xcite at the beginning of his paper , the result will be useful for analyzing properties of higher - order languages by induction on the order of grammars .",
    "our result allows properties on ( unsafe ) order-@xmath1 languages to be reduced to those on order-@xmath5 tree languages , and then the latter may be studied by investigating those on the path languages of order-@xmath5 tree languages , which are order-@xmath5 word languages . as a demonstration of this , we discuss an application to ( a special case of ) the diagonal problem for unsafe languages  @xcite in section  [ sec : app ] , along with other applications .",
    "the rest of this paper is structured as follows .",
    "section  [ sec : pre ] reviews the definition of higher - order grammars , and states the main result .",
    "sections  [ sec : leaf ] and [ sec : leaf2 ] prove the result by providing the ( two - step ) transformations from order-@xmath6 word grammars to order-@xmath1 tree grammars .",
    "section  [ sec : app ] discusses applications of the result .",
    "section  [ sec : related ] discusses related work and section  [ sec : conc ] concludes the paper . for the space restriction",
    ", we omit some details and proofs , which are found in the full version  @xcite .",
    "this section defines higher - order grammars and the languages generated by them , and then explains the main result . most of the following definitions follow those in @xcite .",
    "a higher - order grammar consists of non - deterministic rewriting rules of the form @xmath7 , where @xmath8 is a non - terminal and @xmath9 is a simply - typed @xmath10-term that may contain non - terminals and terminals ( tree constructors ) .",
    "the set of _ simple types _ , ranged over by @xmath11 , is given by : @xmath12 .",
    "the order and arity of a simple type @xmath11 , written @xmath13 and @xmath14 , are defined respectively by : @xmath15 the type @xmath16 describes trees , and @xmath17 describes functions from @xmath18 to @xmath19 .",
    "the set of @xmath10-_terms _ , ranged over by @xmath9 , is defined by : @xmath20 . here",
    ", @xmath21 ranges over variables , @xmath8 over symbols called non - terminals , and @xmath22 over symbols called terminals .",
    "we assume that each terminal @xmath22 has a fixed arity ; we write @xmath23 for the map from terminals to their arities .",
    "a term @xmath9 is called an _ applicative term _ ( or simply a _ term _ ) if it does not contain @xmath10-abstractions .",
    "a ( simple ) type environment @xmath24 is a sequence of type bindings of the form @xmath25 such that if @xmath24 contains @xmath25 and @xmath26 in different positions then @xmath27 . in type environments ,",
    "non - terminals are also treated as variables .",
    "a @xmath10-term @xmath9 has type @xmath11 under @xmath24 if @xmath28 is derivable from the following typing rules .",
    "+     + we call @xmath9 a ( finite , @xmath23-ranked ) _ tree _ if @xmath9 is an applicative term consisting of only terminals , and @xmath29 holds .",
    "we write @xmath30 for the set of @xmath23-ranked trees , and use the meta - variable @xmath31 for a tree .",
    "we often omit type annotations and just write @xmath32 for @xmath33 .",
    "we consider below only well - typed @xmath10-terms of the form @xmath34 , where @xmath9 is an applicative term .",
    "we are now ready to define higher - order grammars .",
    "a _ higher - order grammar _ is a quadruple @xmath35 , where    @xmath23 is a ranked alphabet ;    @xmath36 is a map from a finite set of non - terminals to their types ;    @xmath37 is a finite set of _ rewriting rules _ of the form @xmath38 , where @xmath39 , @xmath9 is an applicative term , and @xmath40 holds for some @xmath41 as a sequence ; the condition @xmath40 does not depend on the order . ] .",
    "@xmath41 .",
    "@xmath42 is a non - terminal called _ the start symbol _ , and @xmath43 .",
    "the _ order _ of a grammar @xmath3 , written @xmath44 , is the largest order of the types of non - terminals .",
    "we sometimes write @xmath45 for the four components of @xmath3 .    for a grammar",
    "@xmath46 , the rewriting relation @xmath47 is defined by : +     + here , @xmath48t$ ] is the term obtained by substituting @xmath49 for the free occurrences of @xmath50 in @xmath9 .",
    "we write @xmath51 for the reflexive transitive closure of @xmath47 .    the _ tree language generated by _",
    "@xmath3 , written @xmath52 , is the set @xmath53 .",
    "we call a grammar @xmath3 a _ word grammar _ if all the terminal symbols have arity @xmath54 except the special terminal @xmath55 , whose arity is @xmath56 .",
    "the _ word language _ generated by a word grammar @xmath3 , written @xmath57 , is @xmath58 .",
    "the frontier word of a tree @xmath31 , written @xmath59 , is the sequence of symbols in the leaves of @xmath31 .",
    "it is defined inductively by : @xmath60 when @xmath61 , and @xmath62 when @xmath63 .",
    "the _ frontier language _ generated by @xmath3 , written @xmath64 , is the set : @xmath65 . in our main theorem",
    ", we assume that there is a special nullary symbol @xmath55 and consider @xmath66 as the empty word @xmath67 ; i.e. , we consider @xmath68 defined by : @xmath69    we note that the classes of order-0 and order-1 word languages coincide with those of regular and context - free languages respectively .",
    "we often write @xmath70 for the rule @xmath71 . when considering the frontier language of a tree grammar , we assume , without loss of generality , that the ranked alphabet @xmath23 has a unique binary symbol @xmath72 , and that all the other terminals have arity @xmath56 .    [ ex : grammar ] consider the order-2 ( word ) grammar @xmath73 , where @xmath74 consists of : @xmath75 @xmath42 is reduced , for example , as follows .",
    "@xmath76 the word language @xmath77 is @xmath78 .    consider the order-1 ( tree ) grammar @xmath79 , where @xmath80 consists of : @xmath81 the frontier language @xmath82 coincides with @xmath77 above .",
    "the following is the main theorem we shall prove in this paper .",
    "[ th : main ] for any order-@xmath6 word grammar @xmath3 ( @xmath83 ) , there exists an order-@xmath1 tree grammar @xmath4 such that @xmath84 .",
    "the converse of the above theorem also holds :    [ th : main - converse ] for any order-@xmath1 tree grammar @xmath4 such that no word in @xmath85 contains @xmath55 , there exists a word grammar @xmath3 of order at most @xmath0 such that @xmath84 .    since the construction of @xmath3 is easy , we sketch it here ; see appendix  [ sec : proofconversemaintheorem ] for a proof . for @xmath86 , the grammar @xmath3 is obtained by ( i ) changing the arity of each nullary terminal @xmath87 to one , i.e. , @xmath88 , ( ii ) replacing the terminal @xmath55 with a new non - terminal @xmath89 of type @xmath90 , defined by @xmath91 , and also the unique binary terminal @xmath72 with a new non - terminal @xmath92 of type @xmath93 , defined by @xmath94 , ( iii ) applying @xmath95-expansion to the right hand side of each ( original ) rule to add an order-0 argument , and ( iv ) adding new start symbol @xmath96 with rule @xmath97 . for example , given the grammar @xmath98 above",
    ", the following grammar is obtained : @xmath99    theorem  [ th : main ] is proved by two - step grammar transformations , both of which are based on intersection types . in the first step , we transform an order-@xmath6 word grammar @xmath3 to an order-@xmath1 tree grammar @xmath100 such that @xmath101 , where @xmath102 is the word language obtained from @xmath103 by removing all the occurrences of the special terminal @xmath55 ; that is , the frontier language of @xmath100 is almost the same as @xmath57 , except that the former may contain multiple occurrences of the special , dummy symbol @xmath55 . in the second step ,",
    "we clean up the grammar to eliminate @xmath55 ( except that a singleton tree @xmath55 may be generated when @xmath104 ) .",
    "the first and second steps shall be formalized in sections  [ sec : leaf ] and [ sec : leaf2 ] respectively .    for the target of the transformations , we use the following extended terms , in which a _ set _ of terms may occur in an argument position : @xmath105 here , @xmath106 is interpreted as just a shorthand for @xmath107 .",
    "intuitively , @xmath108 is considered a non - deterministic choice @xmath109 , which ( lazily ) reduces to @xmath110 non - deterministically .",
    "the typing rules are extended accordingly by : +    an _ extended higher - order grammar _ is the same as a higher - order grammar , except that each rewriting rule in @xmath37 may be of the form @xmath111 , where @xmath112 may be an applicative extended term . the reduction rule for non - terminals",
    "is replaced by : where the substitution @xmath113 is defined by : @xmath114 also , the other reduction rule is replaced by the following two rules :    note that unlike in the extended grammar introduced in @xcite , there is no requirement that each @xmath110 in @xmath108 is used at least once .",
    "thus , the extended syntax does not change the expressive power of grammars .",
    "a term set @xmath108 can be replaced by @xmath115 with the rewriting rules @xmath116 , where @xmath117 is the set of variables occurring in some of @xmath118 . in other words , for any order-@xmath1 extended grammar @xmath3 , there is an ( ordinary ) order-@xmath1 grammar @xmath4 such that @xmath119 .",
    "in this section , we show that for any order-@xmath6 grammar @xmath46 such that @xmath120 and @xmath121 for every @xmath122 , there exists an order-@xmath1 grammar @xmath4 such that @xmath123 and @xmath124 .    for technical convenience , we assume below that , for every type @xmath11 occurring in @xmath125 for some @xmath8 , if @xmath11 is of the form @xmath126 , then @xmath127 .",
    "this does not lose generality , since any function @xmath128 of type @xmath126 with @xmath129 can be replaced by the term @xmath130t$ ] of type @xmath131 ( without changing the order of the term ) , and any term @xmath9 of type @xmath16 can be replaced by the term @xmath132 of type @xmath133 , where @xmath134 is a non - terminal of type @xmath135 , with rule @xmath136 .",
    "see appendix  [ sec : transassumporder ] for the details of this transformation .",
    "see @xcite for the details of this transformation .",
    "the basic idea of the transformation is to remove all the order-0 arguments ( i.e. , arguments of tree type @xmath16 ) .",
    "this reduces the order of each term by @xmath54 ; for example , terms of types @xmath137 and @xmath138 will respectively be transformed to those of types @xmath16 and @xmath90 .",
    "order-0 arguments can indeed be removed as follows .",
    "suppose we have a term @xmath139 where @xmath140 .",
    "if @xmath141 does not use the order-0 argument @xmath142 , then we can simply replace @xmath139 with @xmath143 ( where @xmath143 is the result of recursively applying the transformation to @xmath141 ) .",
    "if @xmath141 uses the argument @xmath142 , the word generated by @xmath144 must be of the form @xmath145 , where @xmath146 is generated by @xmath142 ; in other words , @xmath141 can only append a word to the word generated by @xmath142 .",
    "thus , @xmath144 can be transformed to @xmath147 , which can generate a tree whose frontier coincides with @xmath145 ( if @xmath55 is ignored ) . as a special case",
    ", a constant word @xmath148 can be transformed to @xmath149 . as a little more complex example , consider the term @xmath150 , where @xmath8 is defined by @xmath151 . since @xmath8 uses the argument , the term @xmath150 is transformed to @xmath152 . since @xmath8 no longer takes an argument , we substitute @xmath55 for @xmath21 in the body of the rule for @xmath8 ( and apply the transformation recursively to @xmath148 ) . the resulting rule for @xmath8 is : @xmath153 .",
    "thus , the term after the transformation generates the tree @xmath154 .",
    "its frontier word is @xmath155 , which is equivalent to the word @xmath156 generated by the original term , up to removals of @xmath55 ; recall that redundant occurrences of @xmath55 will be removed by the second transformation .",
    "note that the transformation sketched above depends on whether each order-0 argument is actually used or not .",
    "thus , we introduce intersection types to express such information , and define the transformation as a type - directed one .",
    "simple types are refined to the following intersection types .",
    "@xmath157 we write @xmath158 for @xmath159 when @xmath160 .",
    "we assume some total order @xmath161 on intersection types , and require that @xmath162 whenever @xmath159 occurs in an intersection type .",
    "intuitively , @xmath163 describes a function that uses an argument according to types @xmath164 , and the returns a value of type @xmath165 . as a special case",
    ", the type @xmath166 describes a function that ignores an argument , and returns a tree .",
    "thus , according to the idea of the transformation sketched above , if @xmath21 has type @xmath166 , @xmath167 would be transformed to @xmath21 ; if @xmath21 has type @xmath137 , @xmath167 would be transformed to @xmath168 . in the last example above , the type @xmath90 should be interpreted as a function that uses the argument _ just once _ ; otherwise the transformation to @xmath168 would be incorrect .",
    "thus , the type @xmath16 should be treated as a linear type , for which weakening and dereliction are disallowed .",
    "in contrast , we need not enforce , for example , that a value of the intersection type @xmath137 should be used just once .",
    "therefore , we classify intersection types into two kinds ; one called _ balanced _",
    ", which may be treated as non - linear types , and the other called _ unbalanced _ , which must be treated as linear types . for that purpose",
    ", we introduce two refinement relations @xmath169 and @xmath170 ; the former means that @xmath165 is a balanced intersection type of sort @xmath11 , and the latter means that @xmath165 is an unbalanced intersection type of sort @xmath11 .",
    "the relations are defined as follows , by mutual induction ; @xmath171 may be @xmath56 .",
    "+     +     + a type @xmath165 is called _ balanced _ if @xmath169 for some @xmath11 , and called _ unbalanced _",
    "if @xmath170 for some @xmath11 . intuitively , unbalanced types describe trees or closures that contain the end of a word ( i.e. , symbol @xmath55 ) .",
    "intersection types that are neither balanced nor unbalanced are considered ill - formed , and excluded out .",
    "for example , the type @xmath172 ( as an intersection type ) is ill - formed ; since @xmath16 is unbalanced , @xmath90 must also be unbalanced according to the rules for arrow types , but it is actually balanced .",
    "note that , in fact , no term can have the intersection type @xmath172 in a word grammar .",
    "we write @xmath173 if @xmath169 or @xmath170 .",
    "we introduce a type - directed transformation relation @xmath174 for terms , where @xmath175 is a set of type bindings of the form @xmath176 , called a _ type environment _ , @xmath9 is a source term , and @xmath112 is the image of the transformation , which may be an extended term .",
    "we write @xmath177 for the union of @xmath178 and @xmath179 ; it is defined only if , whenever @xmath180 , @xmath165 is balanced . in other words , unbalanced types are treated as linear types , whereas balanced ones as non - linear ( or idempotent ) types .",
    "we write @xmath181 if @xmath165 is balanced for every @xmath182 .",
    "the relation @xmath174 is defined inductively by the following rules .",
    "+    ( a ) ( ) aa _ +    x.t:_1_k x__1x__k.u    in rule ( ) , a variable is replicated for each type .",
    "this is because the image of the transformation of a term substituted for @xmath21 is different depending on the type of the term ; accordingly , in rule ( ) , bound variables are also replicated , and in rule ( ) , arguments are replicated . in rule ( ) ,",
    "a non - terminal is also replicated for each type . in rules ( ) and ( ) , constants are mapped to themselves ; however , the arities of all the constants become @xmath56 . in these rules , @xmath175 may contain only bindings on balanced types .    in rule ( )",
    ", the first premise indicates that the function @xmath183 uses the argument @xmath9 according to types @xmath164 .",
    "since the image of the transformation of @xmath9 depends on its type , we replicate the argument to @xmath184 . for each type @xmath185 ,",
    "the result of the transformation is not unique ( but finite ) ; thus , we represent the image of the transformation as a _ set _ @xmath186 of terms .",
    "( recall the remark at the end of section  [ sec : pre ] that a set of terms can be replaced by an ordinary term by introducing auxiliary non - terminals . ) for example , consider a term @xmath187 .",
    "it can be transformed to @xmath188 under the type environment @xmath189 .",
    "note that @xmath171 in rule ( ) ( and also ( ) ) may be @xmath56 , in which case the argument disappears in the image of the transformation .    in rule ( ) ,",
    "as explained at the beginning of this section , the argument @xmath9 of type @xmath16 is removed from @xmath183 and instead attached as a sibling node of the tree generated by ( the transformation image of ) @xmath183 .",
    "accordingly , in rule ( ) , the binder for @xmath21 is removed and @xmath21 in the body of the abstraction is replaced with the empty tree @xmath55 . in rule ( ) ,",
    "type environments are shared .",
    "this is because @xmath190 represents the choice @xmath109 ; unbalanced ( i.e. linear ) values should be used in the same manner in @xmath118 .",
    "the transformation rules for rewriting rules and grammars are given by :    here , @xmath191\\!]}}$ ] is defined by : @xmath192\\ ! ] } } = { \\mathtt{o}}\\qquad \\mbox { ( if $ { \\mathtt{order}}({\\kappa } ) \\le 1 $ ) } \\\\ { \\mathbin{[\\![}({\\delta}_1\\land\\cdots\\land{\\delta}_k { \\rightarrow}{\\delta}){\\mathbin{::}}({\\kappa}_0\\to{\\kappa})\\mathbin{]\\ ! ] } } = { \\mathbin{[\\![}{\\delta}_1{\\mathbin{::}}{\\kappa}_0\\mathbin{]\\ ! ] } } { \\rightarrow}\\dots { \\rightarrow}{\\mathbin{[\\![}{\\delta}_k{\\mathbin{::}}{\\kappa}_0\\mathbin{]\\ ! ] } } { \\rightarrow}{\\mathbin{[\\![}{\\delta}{\\mathbin{::}}{\\kappa}\\mathbin{]\\ ! ] } }",
    "\\\\ \\mspace{520mu}\\mbox { ( if $ { \\mathtt{order}}({\\kappa}_0\\to{\\kappa})>1 $ ) } \\end{array}\\ ] ]    [ ex : tr1-gram1 ] recall the grammar @xmath193 in example  [ ex : grammar ] . for the term @xmath194 of the rule for @xmath8 , we have the following derivation : @xmath195{\\emptyset{\\vdash}\\lambda f.\\lambda x.{\\mathtt{a}}(f\\,x ) : ( { \\mathtt{o}}\\to{\\mathtt{o}})\\to{\\mathtt{o}}\\to{\\mathtt{o}}{\\rightarrow}\\lambda f_{{\\mathtt{o}}\\to{\\mathtt{o}}}.{\\mathtt{br}}\\,{\\mathtt{a}}\\,({\\mathtt{br}}\\,f_{{\\mathtt{o}}\\to{\\mathtt{o}}}\\,{\\mathtt{e } } ) } { \\infers[abs2]{f{\\mathbin{:}}{\\mathtt{o}}\\to{\\mathtt{o}}{\\vdash}\\lambda x.{\\mathtt{a}}(f\\,x):{\\mathtt{o}}\\to{\\mathtt{o}}{\\rightarrow}{\\mathtt{br}}\\,{\\mathtt{a}}\\,({\\mathtt{br}}\\,f_{{\\mathtt{o}}\\to{\\mathtt{o}}}\\,{\\mathtt{e } } ) } { \\infers[app2]{f{\\mathbin{:}}{\\mathtt{o}}\\to{\\mathtt{o } } , x{\\mathbin{:}}{\\mathtt{o}}{\\vdash}{\\mathtt{a}}(f\\,x):{\\mathtt{o}}{\\rightarrow}{\\mathtt{br}}\\,{\\mathtt{a}}\\,({\\mathtt{br}}\\,f_{{\\mathtt{o}}\\to{\\mathtt{o}}}\\,x_{{\\mathtt{o } } } ) } { \\infers[const1]{\\emptyset{\\vdash}{\\mathtt{a}}:{\\mathtt{o}}\\to{\\mathtt{o}}{\\rightarrow}{\\mathtt{a } } } { }   & \\infers[app2]{f{\\mathbin{:}}{\\mathtt{o}}\\to{\\mathtt{o } } , x{\\mathbin{:}}{\\mathtt{o}}{\\vdash}f\\,x:{\\mathtt{o}}{\\rightarrow}{\\mathtt{br}}\\,f_{{\\mathtt{o}}\\to{\\mathtt{o}}}\\,x_{{\\mathtt{o } } } }    { \\infers[var]{f{\\mathbin{:}}{\\mathtt{o}}\\to{\\mathtt{o}}{\\vdash}f:{\\mathtt{o}}\\to{\\mathtt{o}}{\\rightarrow}f_{{\\mathtt{o}}\\to{\\mathtt{o } } } } { } &      \\infers[var]{x{\\mathbin{:}}{\\mathtt{o}}{\\vdash}x:{\\mathtt{o}}{\\rightarrow}x_{\\mathtt{o } } } { } } } } } \\ ] ] notice that the argument @xmath21 has been removed , and the result of the transformation has type @xmath90 .",
    "the whole grammar is transformed to the grammar consisting of the following rules .",
    "@xmath196 here , we have omitted rules that are unreachable from @xmath197 .",
    "for example , the rule @xmath198 may be obtained from the following derivation , but it is unreachable from @xmath197 , since @xmath199 is never called with an argument of type @xmath200 . @xmath195{\\emptyset{\\vdash}\\lambda",
    "f.f(f\\,{\\mathtt{e } } ) : ( \\top\\to{\\mathtt{o}})\\land ( { \\mathtt{o}}\\to{\\mathtt{o}})\\to{\\mathtt{o}}{\\rightarrow}\\lambda f_{\\top\\to{\\mathtt{o}}}.\\lambda f_{{\\mathtt{o}}\\to{\\mathtt{o}}}. { \\mathtt{br}}\\,f_{{\\mathtt{o}}\\to{\\mathtt{o}}}\\,f_{\\top\\to{\\mathtt{o } } } } { \\infers[app2]{f{\\mathbin{:}}\\top\\to{\\mathtt{o } } , f{\\mathbin{:}}{\\mathtt{o}}\\to{\\mathtt{o}}{\\vdash}f(f\\,{\\mathtt{e}}):{\\mathtt{o}}{\\rightarrow}{\\mathtt{br}}\\,f_{{\\mathtt{o}}\\to{\\mathtt{o}}}\\,f_{\\top\\to{\\mathtt{o } } } } { \\infers[var]{f{\\mathbin{:}}{\\mathtt{o}}\\to{\\mathtt{o}}{\\vdash}f{\\rightarrow}f_{{\\mathtt{o}}\\to{\\mathtt{o } } } } { }   & \\infers[app1]{f{\\mathbin{:}}\\top\\to{\\mathtt{o}}{\\vdash}f\\,{\\mathtt{e}}:{\\mathtt{o}}{\\rightarrow}f_{\\top\\to{\\mathtt{o } } } } {   \\infers[var]{f{\\mathbin{:}}\\top\\to{\\mathtt{o}}{\\vdash}f:\\top\\to{\\mathtt{o}}{\\rightarrow}f_{\\top\\to{\\mathtt{o } } } } { } } } } \\ ] ]    the following theorem states the correctness of the first transformation . a proof is given in appendix  [ sec : proof - step1 ] .",
    "[ th : tr1-correctness ] let @xmath3 be an order-@xmath6 word grammar .",
    "if @xmath201 , then @xmath100 is an ( extended ) grammar of order at most @xmath1 .",
    "furthermore , @xmath101 .",
    "we now describe the second step for eliminating redundant symbols @xmath55 , which have been introduced by ( ) . by the remark at the end of section  [ sec : pre ] , we assume that the result of the first transformation is an ordinary grammar , not containing extended terms . we also assume that @xmath72 occurs only in the fully applied form .",
    "this does not lose generality , because otherwise we can replace @xmath72 by a new non - terminal @xmath92 and add the rule @xmath202 .",
    "the idea of the transformation is to use intersection types to distinguish between terms that generate trees consisting of only @xmath203 and @xmath55 , and those that generate trees containing other arity-0 terminals .",
    "we assign the type @xmath204 to the former terms , and @xmath205 to the latter .",
    "a term @xmath206 is transformed to ( i ) @xmath207 if both @xmath208 and @xmath141 have type @xmath205 ( where @xmath209 is the image of the transformation of @xmath49 ) , ( ii ) @xmath209 if @xmath49 has type @xmath205 and @xmath210 has type @xmath204 , and ( iii ) @xmath55 if both @xmath208 and @xmath141 have type @xmath204 . as in the transformation of the previous section ,",
    "we replicate each non - terminal and variable for each intersection type .",
    "for example , the nonterminal @xmath211 defined by @xmath212 would be replicated to @xmath213 and @xmath214 .",
    "we first define the set of intersection types by : @xmath215 we assume some total order @xmath161 on intersection types , and require that whenever we write @xmath216 , @xmath217 holds .",
    "we define the refinement relation @xmath218 inductively by : ( i ) @xmath219 , ( ii ) @xmath220 , and ( iii ) @xmath221 if @xmath222 and @xmath223 for every @xmath224 .",
    "we consider only types @xmath225 such that @xmath218 for some @xmath11 .",
    "for example , we forbid an ill - formed type like @xmath226 .    we introduce a type - based transformation relation @xmath227 , where @xmath228 is a type environment ( i.e. , a set of bindings of the form @xmath229 ) , @xmath9 is a source term , @xmath225 is the type of @xmath9 , and @xmath112 is the result of transformation . the relation is defined inductively by the rules below .",
    "+ , xxx _     +",
    "the transformation of rewriting rules and grammars is defined by :    here , @xmath230\\!]}}$ ] is defined by : @xmath231\\!]}}={\\mathbin{[\\![}{{\\mathtt{o}}_{+}}\\mathbin{]\\!]}}={\\mathtt{o}}\\qquad { \\mathbin{[\\![}{\\xi}_1\\land\\cdots\\land{\\xi}_k{\\rightarrow}{\\xi}\\mathbin{]\\ ! ] } } =   { \\mathbin{[\\![}{\\xi}_1\\mathbin{]\\!]}}{\\rightarrow}\\cdots{\\rightarrow}{\\mathbin{[\\![}{\\xi}_k\\mathbin{]\\!]}}{\\rightarrow}{\\mathbin{[\\![}{\\xi}\\mathbin{]\\ ! ] } } \\end{array}\\ ] ]    we explain some key rules . in ( )",
    "we replicate a variable for each type , as in the first transformation . the rules ( ) and ( ) are for nullary constants , which are mapped to themselves .",
    "we assign type @xmath204 to @xmath55 and @xmath205 to the other constants .",
    "the rule ( ) is for the binary tree constructor @xmath72 .",
    "as explained above , we eliminate terms that generate empty trees ( those consisting of only @xmath203 and @xmath55 ) .",
    "for example , if @xmath232 and @xmath233 , then @xmath208 may generate an empty tree ; thus , the whole term is transformed to @xmath234 .",
    "the rule ( ) replicates a terminal for each type , as in the case of variables .",
    "the middle and rightmost premises require that there is some body @xmath9 of @xmath8 that can indeed be transformed according to type @xmath225 . without this condition , for example , @xmath8 defined by the rule @xmath235",
    "would be transformed to @xmath236 by @xmath237 , but @xmath236 diverges and does not produce an empty tree .",
    "that would make the rule ( ) unsound : when a source term is @xmath238 , it would be transformed to @xmath239 , but while the original term does not generate a tree , the result of the transformation does . in short ,",
    "the two premises are required to ensure that whenever @xmath240 holds , @xmath9 can indeed generate an empty tree . in ( ) , the argument is replicated for each type .",
    "unlike in the transformation in the previous section , type environments can be shared among the premises , since linearity does not matter here .",
    "the other rules for terms are analogous to those in the first transformation .    in rule ( ) for grammars , we prepare a start symbol @xmath96 and add the rules @xmath241 .",
    "we remark that the rewriting rule for @xmath242 ( resp .",
    "@xmath243 ) is generated only if the original grammar generates an empty ( resp .",
    "non - empty ) tree .",
    "for example , in the extreme case where @xmath244 , we have @xmath245 , without any rules to rewrite @xmath242 or @xmath243 .    [",
    "ex : tr2-gram1 ] let us consider the grammar @xmath246 where @xmath247 , and @xmath37 consists of : @xmath248 it is the same as the grammar obtained in example  [ ex : tr1-gram1 ] , except that redundant subscripts on non - terminals and variables have been removed .",
    "the body of the rule for @xmath8 is transformed as follows .",
    "@xmath249{\\emptyset { \\vdash}\\lambda f.{\\mathtt{br}}\\,{\\mathtt{a}}\\,({\\mathtt{br}}\\,f\\,{\\mathtt{e}}):{{{\\mathtt{o}}_{+}}}\\to{{{\\mathtt{o}}_{+}}}{\\rightarrow}\\lambda f_{{{\\mathtt{o}}_{+}}}.{\\mathtt{br}}\\,{\\mathtt{a}}\\,f_{{{\\mathtt{o}}_{+ } } } } { \\infers[const2]{f{\\mathbin{:}}{{{\\mathtt{o}}_{+ } } } { \\vdash}{\\mathtt{br}}\\,{\\mathtt{a}}\\,({\\mathtt{br}}\\,f\\,{\\mathtt{e}}):{{{\\mathtt{o}}_{+}}}{\\rightarrow}{\\mathtt{br}}\\,{\\mathtt{a}}\\,f_{{{\\mathtt{o}}_{+ } } } }   { \\infers[const1]{f{\\mathbin{:}}{{{\\mathtt{o}}_{+ } } } { \\vdash}{\\mathtt{a}}:{{\\mathtt{o}}_{+}}{\\rightarrow}{\\mathtt{a } } } { } &   \\infers[const2]{f{\\mathbin{:}}{{{\\mathtt{o}}_{+ } } } { \\vdash}{\\mathtt{br}}\\,f\\,{\\mathtt{e}}:{{\\mathtt{o}}_{+}}{\\rightarrow}f_{{{\\mathtt{o}}_{+ } } } }   { \\infers[var]{f{\\mathbin{:}}{{{\\mathtt{o}}_{+ } } } { \\vdash}f:{{\\mathtt{o}}_{+}}{\\rightarrow}f_{{{\\mathtt{o}}_{+ } } } } { } &     \\infers[const0]{f{\\mathbin{:}}{{{\\mathtt{o}}_{+ } } } { \\vdash}{\\mathtt{e}}:{{\\mathtt{o}}_{\\epsilon}}{\\rightarrow}{\\mathtt{e } } } { } } } } \\ ] ] the whole rules are transformed to : @xmath250 here , we have omitted rules on non - terminals unreachable from @xmath96 .    if the rules for @xmath42 in the source grammar were replaced by : @xmath251 then @xmath252 and @xmath253 would become reachable . hence , the following rules generated from @xmath254 would also become reachable : @xmath255 from @xmath256 , many reachable rules would be generated .",
    "one of the rules is : @xmath257 which can be replaced by the following rules without extended terms : @xmath258    the following theorem claims the correctness of the transformation .",
    "the proof is given in appendix  [ sec : proof - step2 ] .",
    "the main theorem ( theorem  [ th : main ] ) follows from theorems  [ th : tr1-correctness ] , [ th : tr2-correctness ] , and the fact that any order-@xmath259 grammar with @xmath260 can be converted to an order-@xmath1 grammar by adding a dummy non - terminal of order @xmath1 .",
    "[ th : tr2-correctness ] let @xmath46 be an order-@xmath1 tree grammar .",
    "if @xmath261 , then @xmath4 is a tree grammar of order at most @xmath1 , and @xmath262 .",
    "as mentioned in section  [ sec : intro ] , many of the earlier results on higher - order grammars  @xcite were for the subclass called _ safe _ higher - order grammars . in safe grammars ,",
    "the ( simple ) types of terms are restricted to _ homogeneous types _",
    "@xcite of the form @xmath263 , where @xmath264 , and arguments of the same order must be supplied simultaneously .",
    "for example , if @xmath8 has type @xmath265 , then the term @xmath266 where @xmath267 is valid , but @xmath268 where @xmath269 is not : the partial application @xmath270 is disallowed , since @xmath8 expects another order-1 argument .",
    "_ unsafe _ grammars ( which are just called higher - order grammars in the present paper ) are higher - order grammars without the safety restriction .    for order-2 word languages , aehlig et al .",
    "@xcite have shown that safety is not a genuine restriction .",
    "our result in the present paper provides an alternative , short proof .",
    "given an unsafe order-2 word grammar @xmath3 , we can obtain an equivalent order-1 grammar @xmath4 such that @xmath84 .",
    "note that @xmath4 is necessarily safe , since it is order-1 and hence there are no partial applications .",
    "now , apply the backward transformation sketched in section  [ sec : pre ] to obtain an order-2 word grammar @xmath100 such that @xmath271 . by the construction of the backward transformation",
    ", @xmath100 is clearly a safe grammar : since the type of each term occurring in @xmath4 is @xmath272 , the type of the corresponding term of @xmath100 is @xmath273 .",
    "since all the arguments of type @xmath16 are applied simultaneously in @xmath4 , all the arguments of type @xmath90 are also applied simultaneously in @xmath100 .",
    "thus , for any unsafe order-2 word grammar , there exists an equivalent safe order-2 word grammar .",
    "the diagonal problem  @xcite asks , given a ( word or tree ) language @xmath274 and a set @xmath42 of symbols , whether for all @xmath1 , there exists @xmath275 such that @xmath276 . here",
    ", @xmath277 denotes the number of occurrences of @xmath22 in @xmath278 .",
    "a decision algorithm for the diagonal problem can be used for computing downward closures  @xcite , which in turn have applications to program verification .",
    "hague et al .",
    "@xcite recently showed that the diagonal problem is decidable for safe higher - order word languages , and clemente et al .",
    "@xcite extended the result for unsafe tree languages .",
    "for the single letter case of the diagonal problem ( where @xmath279 ) , we can obtain an alternative proof as follows .",
    "first , following the approach of hague et al .",
    "@xcite , we can use logical reflection to reduce the single letter diagonal problem for an unsafe order-@xmath1 tree language to that for the path language of an unsafe order-@xmath1 tree language .",
    "we can then use our transformation to reduce the latter to the single letter diagonal problem for an unsafe order-@xmath5 tree language .",
    "unfortunately , this approach does not apply to the general diagonal problem ; since the logical reflection in the first step yields an order-@xmath1 language of `` narrow '' trees  @xcite instead of words , we need to extend our translation from order-@xmath1 word languages to order-(@xmath280 ) tree languages to one from order-@xmath1 narrow tree languages to order-(@xmath280 ) tree languages .",
    "actually , that translation is the key of clemente et al.s proof of the decidability of the ( general ) diagonal problem  @xcite .      by using the result of this paper and the context - sensitivity of order-2 tree languages  @xcite",
    ", we can prove that any order-3 word language is context - sensitive , i.e. , the membership problem for an order-3 word language can be decided in non - deterministic linear space .",
    "given an order-3 word grammar @xmath3 , we first construct a corresponding order-2 tree grammar @xmath4 in advance . given a word @xmath278",
    ", we can construct a tree @xmath31 whose frontier word is @xmath278 one by one , and check whether @xmath281 . since the size of @xmath31 is linearly bounded by the length @xmath282 of @xmath278 , @xmath283 can be checked in space linear with respect to @xmath282 .",
    "thus , @xmath284 can be decided in non - deterministic linear space ( with respect to the size of @xmath278 ) .",
    "as already mentioned in section  [ sec : intro ] , higher - order grammars have been extensively studied in 1980 s  @xcite , but most of those results have been for safe grammars . in particular ,",
    "damm  @xcite has shown an analogous result for safe grammars , but his proof does not extend to the unsafe case .    as also mentioned in section  [ sec : intro ] , intersection types have been used in recent studies of ( unsafe ) higher - order grammars .",
    "in particular , type - based transformations of grammars and @xmath10-terms have been studied in @xcite .",
    "clement et al .",
    "@xcite , independently from ours , gave a transformation from an order-@xmath6 `` narrow '' tree language ( which subsumes a word language as a special case ) to an order-@xmath1 tree language ; this transformation preserves the number of occurrences of each symbol in each tree .",
    "when restricted to word languages , our result is stronger in that our transformation is guaranteed to preserve the order of symbols as well , and does not add any additional leaf symbols ( though they are introduced in the intermediate step ) ; consequently , our proofs are more involved .",
    "they use different intersection types , but the overall effect of their transformation seems similar to that of our first transformation .",
    "thus , it may actually be the case that their transformation also preserves the order of symbols , although they have not proved so .",
    "we have shown that for any unsafe order-@xmath6 word grammar @xmath3 , there exists an unsafe order-@xmath1 tree grammar @xmath4 whose frontier language coincides with the word language @xmath57 .",
    "the proof is constructive in that we provided ( two - step ) transformations that indeed construct @xmath4 from @xmath3 .",
    "the transformations are based on a combination of linear / non - linear intersection types , which may be interesting in its own right . as damm  @xcite suggested ,",
    "we expect the result to be useful for further studies of higher - order languages ; in fact , we have discussed a few applications of the result .",
    "we would like to thank takeshi tsukada for helpful discussions and thank pawel parys for information about the related work  @xcite .",
    "we would also like to thank igor walukiewicz for spotting an error in our argument on the diagonal problem in an earlier version of this paper .",
    "this work was supported by jsps kakenhi 23220001 and 15h05706",
    ".    10    klaus aehlig , jolie  g. de  miranda , and c .- h .",
    "safety is not a restriction at level 2 for string languages . in _ proceedings of fossacs 2005",
    "_ , volume 3441 of _ lncs _ , pages 490504 .",
    "springer , 2005 .",
    "william blum and c .- h .",
    "luke ong . the safe lambda calculus .",
    ", 5(1 ) , 2009 .",
    "lorenzo clemente , pawel parys , sylvain salvati , and igor walukiewicz .",
    "the diagonal problem for higher - order recusion schemes is decidable . in _ proceedings of lics 2016 _ , 2016 .",
    "wojciech czerwinski and wim martens . a note on decidable separability by piecewise testable languages . ,",
    "abs/1410.1042 , 2014 .",
    "werner damm .",
    "the io- and oi - hierarchies .",
    ", 20:95207 , 1982 .",
    "joost engelfriet .",
    "iterated stack automata and complexity classes . , 95(1):2175 , 1991 .",
    "joost engelfriet and heiko vogler .",
    "high level tree transducers and iterated pushdown tree transducers .",
    ", 26(1/2):131192 , 1988 .",
    "matthew hague , jonathan kochems , and c .- h .",
    "unboundedness and downward closures of higher - order pushdown automata . in _ proceedings of popl 2016",
    "_ , pages 151163 , 2016 .",
    "teodor knapik , damian niwinski , and pawel urzyczyn .",
    "deciding monadic theories of hyperalgebraic trees . in _",
    "tlca 2001 _ , volume 2044 of _ lncs _ , pages 253267 .",
    "springer , 2001 .",
    "naoki kobayashi .",
    "model checking higher - order programs . , 60(3 ) , 2013 .",
    "naoki kobayashi .",
    "pumping by typing . in _ proceedings of lics 2013",
    "_ , pages 398407 .",
    "ieee computer society , 2013 .",
    "naoki kobayashi , kazuhiro inaba , and takeshi tsukada .",
    "unsafe order-2 tree languages are context - sensitive . in _ proceedings of fossacs 2014 _ , volume 8412 of _ lncs _ , pages 149163 .",
    "springer , 2014 .",
    "naoki kobayashi , kazutaka matsuda , ayumi shinohara , and kazuya yaguchi .",
    "functional programs as compressed data . , 2013 .",
    "naoki kobayashi and c .- h .",
    "luke ong . a type system equivalent to the modal mu - calculus model checking of higher - order recursion schemes . in _ proceedings of lics 2009",
    "_ , pages 179188 .",
    "ieee computer society press , 2009 .",
    "gregory  m. kobele and sylvain salvati .",
    "the io and oi hierarchies revisited .",
    ", 243:205221 , 2015 .",
    "luke ong . on model - checking trees generated by higher - order recursion schemes . in _",
    "lics 2006 _ , pages 8190 .",
    "ieee computer society press , 2006 .",
    "pawel parys .",
    "how many numbers can a lambda - term contain ? in _ proceedings of flops 2014 _ , volume 8475 of _ lncs _ , pages 302318 .",
    "springer , 2014 .",
    "sylvain salvati and igor walukiewicz .",
    "typing weak msol properties . in andrew",
    "m. pitts , editor , _ proceedings of fossacs 2015 _ , volume 9034 of _ lncs _ , pages 343357 .",
    "springer , 2015 .",
    "thomas streicher . .",
    "world scientific , 2006 .",
    "takeshi tsukada and c .- h .",
    "compositional higher - order model checking via _ @xmath285_-regular games over bhm trees . in _ proceedings of csl - lics 14 _ , pages 78:178:10 .",
    "acm , 2014 .",
    "georg zetzsche .",
    "an approach to computing downward closures . in _ proceedings of icalp 2015",
    "_ , volume 9135 of _ lncs _ , pages 440451 .",
    "springer , 2015 .",
    "we give a proof of theorem  [ th : tr1-correctness ] in section  [ sec : app1-basic ] after preparing some basic definitions .",
    "lemmas for the proof are given after that . in section  [ sec : app1-basic ] we give basic lemmas . in sections  [ sec : lemmaforwarddirection ] and  [ sec : lemmabackwarddirection ] , we give main lemmas for forward and backward directions of the theorem , i.e. , left - to - right and right - to - left simulations , respectively .",
    "the both lemmas need one key lemma , which is given in section  [ sec : keylemma ] .    throughout this section ,",
    "we often write @xmath286 as @xmath287 . for @xmath183 , @xmath288 ,",
    "we write an iterated application @xmath289 as @xmath290 .",
    "we also write @xmath48 $ ] as @xmath291_{{i \\le k}}$ ] .",
    "the extended terms can be embedded into the simply typed @xmath10@xmath292-calculus with non - determinism and the same constants as the terminal symbols ( but without any non - terminals ) ; we represent also the non - determinism in this @xmath10@xmath292-calculus by the set - representation @xmath293 ( @xmath294 ) .",
    "the embedding transformation is given in the standard way : the mutual recursion allowed in a grammar is handled by using beki property of @xmath292-combinator .",
    "also for this @xmath10@xmath292-calculus , we consider call - by - name reduction .",
    "we call terms in this calculus simply _",
    "@xmath10@xmath292-terms _ , which are also ranged over by @xmath112 and @xmath295 ; but if we use @xmath112 and @xmath295 without mentioning where they range , they are meant to be extended applicative terms for a given grammar . through this transformation ,",
    "we identify extended terms in a grammar with the embedded @xmath10@xmath292-terms .",
    "we define _",
    "@xmath296-observational preorder _ @xmath297 and _ @xmath296-observational equivalence _",
    "@xmath298 as follows .",
    "first we define @xmath299 for trees as the least congruence ( w.r.t . the definition of trees ) satisfying @xmath300 and @xmath301 .",
    "now , for two @xmath10@xmath292-terms @xmath302 we define @xmath303 if , for any @xmath10@xmath292-term @xmath304 and for any tree @xmath31 such that @xmath305 , there exists @xmath306 such that @xmath307 and @xmath308 .",
    "and we define @xmath309 if @xmath303 and @xmath310 .",
    "we define the set @xmath311 of _ free variables _ of an extended term @xmath112 as follows : @xmath312 for a word @xmath313 , we define term @xmath314 inductively by : @xmath315 and @xmath316 .",
    "we write @xmath317 if the judgement is derived by using the following restricted rule instead of ( ) . clearly",
    ", if @xmath317 then @xmath318 . we use this restriction in the proof of the forward direction of the theorem .",
    "now we prove theorem  [ th : tr1-correctness ] , whose statement is : let @xmath3 be an order-@xmath6 word grammar .",
    "if @xmath201 , then @xmath100 is an ( extended ) grammar of order at most @xmath1 .",
    "furthermore , @xmath101 .",
    "the well - typedness of the right hand side term of every rewriting rule of @xmath100 can be proved straightforwardly ( in a way similar to lemma  [ lem : utr - typing ] in section  [ sec : keylemma ] ) . by induction on @xmath11",
    ", we can show that @xmath319\\!]}})\\le{\\mathtt{order}}({\\kappa})-1 $ ] if @xmath320 and @xmath319\\!]}})={\\mathtt{order}}({\\kappa})=0 $ ] otherwise .",
    "now we show @xmath101 .",
    "suppose @xmath321 , i.e. , @xmath322 .",
    "by lemma  [ lem : leaf - fwd ] , we have @xmath323 . by lemma  [ lem : red - fwd ] , we have @xmath112 such that @xmath324 with @xmath325 . by the transformation rule",
    ", @xmath112 must be @xmath197 .",
    "thus , we have @xmath326 , which implies @xmath327 as required .",
    "conversely , suppose @xmath327 , i.e. , @xmath328 with @xmath329 for some @xmath31 . by repeating lemma  [ lem : red - bwd ]",
    ", we have @xmath330 and @xmath331 with @xmath332 . by lemma",
    "[ lem : leaf - bwd ] , @xmath333 .",
    "thus , we have @xmath321 as required .",
    "[ lem : leaf - fwd ] @xmath334 .",
    "this follows by straightforward induction on @xmath1 .",
    "[ lem : leaf - bwd ] let @xmath9 be an applicative term . if @xmath335 then @xmath336 with @xmath337 .",
    "this follows by induction on the structure of @xmath31 .    * case @xmath338 : @xmath335 must have been derived by using ( ) . therefore @xmath339 as required . * case @xmath340 : @xmath335 must have been derived by using ( ) .",
    "thus , we have : @xmath341 by the condition @xmath342 , the head symbol of @xmath141 must be a terminal .",
    "( because the type environment is empty , the head can not be a variable , and because the output of transformation does not contain a non - terminal , the head can not be a non - terminal . )",
    "thus , @xmath141 is actually a terminal @xmath343 . by the induction hypothesis and @xmath344 , we have @xmath345 with @xmath346 .",
    "thus , we have @xmath347 , with @xmath348 as required .",
    "[ lem : context ] given two @xmath10@xmath292-terms @xmath349 where @xmath350 , we have @xmath303 iff for any closed terms @xmath351 of type @xmath352 , respectively , and for any @xmath31 such that @xmath353 , there exists @xmath306 such that @xmath354 and @xmath308 .",
    "( we write @xmath355 if the latter condition of this equivalence holds . )",
    "the proof is obtained by a trivial modification of the proof of the context lemma for pcf by a logical relation given in  @xcite .    the logical relation is between a cpo model and the syntax .",
    "the cpo model is the standard ( call - by - name ) cpo model extended with hoare powerdomain , which corresponds to may convergence .",
    "specifically , the interpretation @xmath356\\!]}$ ] of the base type @xmath16 is defined as @xmath357 where @xmath358 is the quotient set of the set of trees modulo @xmath299 , and @xmath359 is the powerset of @xmath358 .",
    "( this is the hoare powerdomain of the flat cpo @xmath360 . )",
    "the interpretation of function types is given by the usual continuous function spaces .",
    "the interpretation of the constants is given as follows : @xmath361\\!]}(l_1,l_2 ) & { : = } { \\{{[{\\mathtt{br}}\\,\\pi_1\\,\\pi_2]_{{\\sim_{\\mathrm{v}}}}}\\,|\\,{[\\pi_i]_{{\\sim_{\\mathrm{v } } } } } \\in l_i\\ } } \\qquad(l_1,l_2 \\in p({\\mathbb{v } } ) ) \\\\ { [ \\![a]\\ ! ] } & { : = } { \\{{[a]_{{\\sim_{\\mathrm{v}}}}}\\ } } \\qquad({\\sigma}(a)=0).\\end{aligned}\\ ] ]    now the logical relation @xmath362 is defined as below .",
    "let @xmath363 be the set of closed @xmath10@xmath292-terms of sort @xmath364 . then @xmath365\\ ! ] } \\times { \\mathrm{term}_{\\kappa}}$ ] is defined inductively as follows : @xmath366_{{\\sim_{\\mathrm{v}}}}}\\ ) } \\\\",
    "f\\,r_{\\kappa { \\rightarrow}\\kappa'}\\,u & \\quad\\text{if}\\quad \\text{for any \\(g \\in { [ \\![\\kappa]\\!]}\\ ) and \\(v \\in { \\mathrm{term}_{\\kappa}}\\),\\ , \\(g\\,r_{\\kappa}\\,v\\ ) implies \\(f(g)\\,r_{\\kappa'}\\,({{u}\\,}{v})\\).}\\end{aligned}\\ ] ]    for @xmath367 , we can show that @xmath368\\!]}\\,r_{\\kappa}\\,u ' \\quad\\longrightarrow\\quad u { \\lesssim}u'\\ ] ] whose proof is obtained in the same way as that of  ( * ? ? ?",
    "* theorem  5.1 ) .",
    "[ lem : envwellformed ] given @xmath369 where @xmath370 , @xmath371 is well - formed .    by straightforward induction on @xmath9 .",
    "[ lem : envu ] given @xmath318 and @xmath372 there exists @xmath373 such that @xmath374 .    by straightforward induction on @xmath9 .",
    "[ lem : precong ]    1 .   for any @xmath112 , @xmath234 , @xmath375 , and @xmath376 , @xmath377 2 .",
    "for any @xmath378 and @xmath379 , @xmath380    the both items can be easily shown by using the context lemma .",
    "[ lem : subst - monotone ] if @xmath303 , then @xmath381 .",
    "the proof is trivial from the definition of the contextual preorder @xmath297 .",
    "[ lem : subst - iter ]    if @xmath382 , then @xmath383 .    the proof is given by straightforward induction on @xmath112 .",
    "[ lem : strengthening ] given @xmath384 , if @xmath385 , then we also have @xmath317 and @xmath386 is balanced .",
    "this follows by straightforward induction on @xmath384 .",
    "[ lem : groundsbst ] given @xmath387 where @xmath388 and @xmath389 , @xmath390v ) { \\mathbin{*}}u { \\sim}[u / x_{{\\mathtt{o}}}]v\\,.\\ ] ] moreover , for any @xmath391 , @xmath31 , and a reduction sequence @xmath390v ) { \\mathbin{*}}u { \\longrightarrow}^p \\pi\\ ] ] there exists @xmath306 such that @xmath392v { \\longrightarrow}^p \\pi '   { \\sim_{\\mathrm{v}}}\\pi\\,.\\ ] ]    the above lemma is the key of the proof of theorem  [ th : tr1-correctness ] , and says that the variable @xmath393 occurs at the rightmost position in ( the trees of ) @xmath295 .",
    "for the proof of this lemma , we introduce a type system for the transformed grammar @xmath100 .",
    "the set of types is given by the following grammar .",
    "@xmath394 intuitively , @xmath395 is the type of trees that can occur only at the rightmost position of a tree while @xmath16 is the type of trees without any such restriction ; for example , if @xmath9 has type @xmath395 and @xmath396 has type @xmath16 , then @xmath397 is valid but @xmath398 is not .",
    "we define a notion of balance / unbalance , which is similar to that for the types @xmath165 : @xmath399 \\frac{{\\rho}\\text { is unbalanced } \\quad { \\rho}'\\text { is unbalanced}}{{\\rho}{\\rightarrow}{\\rho}'\\text { is balanced } } \\qquad \\frac{{\\rho}\\text { is balanced } \\quad { \\rho}'\\text { is unbalanced}}{{\\rho}{\\rightarrow}{\\rho}'\\text { is unbalanced}}\\end{gathered}\\ ] ] a type @xmath400 is _ well - formed _ if it is either balanced or unbalanced .",
    "we assume that all the types occurring below are well - formed .",
    "a type environment @xmath401 is a set of type bindings of the form @xmath402 .",
    "we write @xmath403 and say @xmath401 is _ balanced _ if @xmath400 is balanced for every @xmath404 .",
    "as before , we treat unbalanced types as linear types , i.e. , the union @xmath405 of @xmath406 and @xmath407 is defined only if @xmath408 .",
    "we define three type transformations @xmath409 , @xmath410 , and @xmath411 as follows : @xmath412 it is obvious that , if @xmath165 is balanced ( resp .",
    "unbalanced ) , then @xmath413 is balanced ( resp .",
    "unbalanced ) .",
    "then the typing rules are given as follows :     +     +    we prepare some lemmas for proving lemma  [ lem : groundsbst ] .",
    "[ lem : envwellformed2 ] if @xmath414 , then @xmath415 is well - formed .",
    "this follows by straightforward induction on the derivation @xmath414 .",
    "[ lem : rty - subst ] given  @xmath416   and  @xmath417 , we have @xmath418v:{\\rho}$ ] .    the proof is given by induction on @xmath295 .",
    "the base case is clear .",
    "the remaining case is application : we have rule ( ) @xmath419 where @xmath420 further we have ( ) @xmath421 where @xmath422 .",
    "now we perform a case analysis on whether @xmath423 is balanced or unbalanced .",
    "* case where @xmath423 is balanced : in this case , @xmath424 is balanced . by the induction hypotheses",
    ", we have @xmath425v ' : { \\rho}_1 { \\rightarrow}{\\rho}\\qquad ( { { \\phi}_1 \\setminus { \\{x'{\\mathbin{:}}{\\rho}'\\ } } } ) \\cup { \\phi } ' { \\vdash}[u / x']u'_i : { \\rho}_1 \\quad\\text{(for each \\({i \\le k}\\))}\\,.\\ ] ] and by ( ) , @xmath426v '   \\\\[10pt ] & \\infer { ( { { \\phi}_1 \\setminus { \\{x'{\\mathbin{:}}{\\rho}'\\ } } } ) \\cup { \\phi } ' { \\vdash}{\\{u'^{i}_{1},\\ldots , u'^{i}_{k_i}\\ } } : { \\rho}_1 } { ( { { \\phi}_1 \\setminus { \\{x'{\\mathbin{:}}{\\rho}'\\ } } } ) \\cup { \\phi } ' { \\vdash}u'^{i}_{j } : { \\rho}_1 \\quad\\text{(for each \\(j \\in { \\{1,\\ldots , k_{i}\\}}\\ ) ) } } & { \\{u'^{i}_{1},\\ldots , u'^{i}_{k_i}\\ } } = & \\   [ u / x']u'_i \\end{aligned}\\ ] ] then , by ( ) @xmath427u ' : { \\rho}_1\\ ] ] and by ( ) and ( ) , we have @xmath428v')([u / x']u ' ) : { \\rho}\\end{gathered}\\ ] ] where the linearity condition is obvious , since @xmath424 is balanced and @xmath429 * case where @xmath423 is unbalanced and @xmath430 : by the induction hypotheses , we have @xmath427u'_i : { \\rho}_1 \\quad\\text{(for each \\({i \\le k}\\))}\\ ] ] and by ( ) , similarly to the previous case , we have @xmath427u ' : { \\rho}_1\\,.\\ ] ] then by ( ) , we have @xmath431u ' ) : { \\rho}\\end{gathered}\\ ] ] as required ; here the linearity condition holds as follows : since @xmath423 is unbalanced , @xmath401 is balanced .",
    "now @xmath430 , and therefore @xmath432 and @xmath433 are balanced .",
    "* case where @xmath423 is unbalanced and @xmath434 : by the induction hypothesis , we have @xmath425v ' : { \\rho}_1 \\to { \\rho}\\,.\\ ] ] then by ( ) , we have @xmath435v')u ' : { \\rho}\\end{gathered}\\ ] ] as required ; here the linearity condition holds since @xmath436 and @xmath406 are balanced ( similarly to the previous case ) .",
    "[ lem : utr - typing ] for any @xmath437 , we have @xmath438 .",
    "the proof proceeds by straightforward induction on the derivation @xmath437 .",
    "note that , since if @xmath165 is balanced so is @xmath413 , @xmath181 implies @xmath439 .    case of ( ): @xmath440 the goal : @xmath441 is obtained by ( ) .",
    "case of ( ): @xmath442 the goal : @xmath443 is obtained by ( ) .",
    "case of ( ): @xmath444 the goal : @xmath445 is obtained by ( ) .",
    "case of ( ): @xmath446 the goal : @xmath447 is obtained by ( ) .    case of ( ): @xmath448 the induction hypotheses are @xmath449 where the latter are obtained through ( ) and ( ) .",
    "the goal : @xmath450 is obtained by ( ) .",
    "case of ( ): @xmath451 by the well - formedness , @xmath165 is unbalanced .",
    "hence , the induction hypotheses are @xmath452 the goal : @xmath453 is obtained by ( ) and ( ) .    case of ( ): @xmath454 the induction hypotheses are @xmath455 the goal : @xmath456 is obtained by ( ) .",
    "[ lem : refine - forget ]    1 .",
    "[ item : forget ] given @xmath457 , we have @xmath458 .",
    "[ item : forget - typing ] given @xmath174 , we have @xmath459 .",
    "[ item : forget - subst ] given @xmath460 , we have @xmath461u:{({\\delta})^{\\sharp}_{{\\mathtt{o}}}}$ ] .",
    "case of item  [ item : forget ] : the proof is given by straightforward induction on @xmath112 ; the base case is trivial , since for every terminal and non - terminal there is a typing rule for having a type of the form @xmath462 . in the case of application",
    ", we have rule ( ): @xmath463 this case is also clear by the induction hypotheses .",
    "case of item  [ item : forget - typing ] : by lemma  [ lem : utr - typing ] , @xmath464 . by item  [ item : forget ] , we have @xmath465 .    case of item  [ item : forget - subst ] : by item  [ item : forget - typing ] , we have @xmath466 . since @xmath467 , by lemma  [ lem : rty - subst ] , we have @xmath468u:{({\\delta})^{\\sharp}_{{\\mathtt{o}}}}$ ] .    [ lem : rty - sub - red ] given a reduction @xmath469 ,    1 .",
    "[ item : subred - unb ] if @xmath470 then @xmath471 , and 2 .",
    "[ item : subred - bal ] if @xmath472 then @xmath473 .    the proof is given by induction on @xmath112 simultaneously for the both items . since @xmath469 ,",
    "the head of @xmath112 is either @xmath72 or a non - terminal .",
    "case where the head of @xmath112 is @xmath72 : let @xmath474 .",
    "when @xmath475 is reduced , the case that @xmath475 is not a singleton is clear , since in the rule ( ) , the type parts and the environment parts of judgments are common .",
    "suppose @xmath476 and @xmath477 and @xmath478 .",
    "first we consider item  [ item : subred - unb ] . for @xmath479 , ( ) and",
    "( ) are used , i.e. , @xmath480 . in the derivation tree",
    ", @xmath481 becomes an environment of either @xmath234 or @xmath482 .",
    "if @xmath483 , by lemma  [ lem : envwellformed2 ] , @xmath484 is well - formed , which is a contradiction ; hence , we have @xmath485 by item  [ item : subred - bal ] of the induction hypothesis for @xmath234 , we have @xmath486 and hence @xmath487 as required .",
    "item  [ item : subred - bal ] is similar ( and easier ) ; and the case where @xmath482 is reduced is also similar .",
    "case where the head of @xmath112 is a non - terminal : let @xmath488 , @xmath489_{{i \\le \\ell}}v$ ] , and the rule used for @xmath490 be @xmath491 .",
    "suppose @xmath492 where @xmath493 for @xmath494 and @xmath495 and @xmath496 .",
    "in the case where @xmath497 is unbalanced , @xmath498 for all @xmath499 , and in the case where @xmath497 is balanced , @xmath500 for some ( unique ) @xmath501 .",
    "let @xmath502 for the hypothesis @xmath503 , ( ) are used @xmath504-times , and we have @xmath505    the rule used for   is ( ) or ( ): in the former case , we have @xmath506 i.e. , @xmath507 in the latter case , similarly we have @xmath508    meanwhile , since the rule @xmath491 in @xmath100 is produced by ( ) , there is a rule @xmath509 in @xmath3 such that @xmath510 therefore , by ( ) and/or ( ) , we have the following . @xmath511v ' & & \\mspace{-450mu}\\text{(when \\({\\delta}^0\\ ) is balanced ) } \\\\ & \\label{eq : xell } \\big(x'_1,\\ldots , x'_\\ell\\big ) = \\big((x_1)_{{\\delta}^1_1 } , \\dots , ( x_1)_{{\\delta}^1_{k_1 } } , \\dots , ( x_{m})_{{\\delta}^{m}_{1 } } , \\dots , ( x_{m})_{{\\delta}^{m}_{k_{m}}}\\big)\\,.\\end{aligned}\\ ] ]    from now on , the proof goes separately for each item .",
    "case of item  [ item : subred - unb ] : since @xmath512 , we have   and  . by  , @xmath497 is unbalanced , and so we have  . by   and",
    "lemma  [ lem : utr - typing ] with  ,  , and  , we have @xmath513 then , by  ,  , and lemma  [ lem : rty - subst ] , we have @xmath514_{{i \\le \\ell}}v : { \\mathtt{or}}\\ ] ] and by ( ) , we have @xmath515 as required .",
    "case of item  [ item : subred - bal ] : we have @xmath516 either by using  , lemma  [ lem : refine - forget]-[item : forget - typing ] , and   when @xmath497 is unbalanced , or by using  , lemma  [ lem : refine - forget]-[item : forget - subst ] , and   when @xmath497 is balanced . by   and",
    "lemma  [ lem : refine - forget]-[item : forget ] , we have @xmath517 by either   or  , we have @xmath518 hence , by lemma  [ lem : rty - subst ] , @xmath519_{{i \\le \\ell}}v : { \\mathtt{o}}\\ ] ] and by ( ) , we have @xmath520 as required .",
    "below , we write @xmath521 if @xmath522 does not hold for any @xmath295 .",
    "[ lem : keyctx ] for any @xmath295 such that @xmath523 , @xmath524 , and @xmath525v { \\longrightarrow^*}\\pi$ ] for some @xmath526 and @xmath31 , there exist @xmath527 such that @xmath528 .",
    "the proof proceeds by induction on @xmath295 .",
    "* case where the head of @xmath295 is a non - terminal @xmath8 : @xmath8 has a rewriting rule since @xmath525v { \\longrightarrow^*}\\pi$ ] , but it contradicts @xmath523 . * case where the head of @xmath295 is a variable : since @xmath524 , @xmath529 ; hence the result holds for @xmath530 .",
    "* case where the head of @xmath295 is a terminal @xmath22 : @xmath22 must have non - zero arity since @xmath531 can not be derived ; thus @xmath532 for some @xmath533 and @xmath534 . since @xmath535 , @xmath533 and @xmath534 must be singletons @xmath536 and @xmath537 , respectively . now @xmath203 must has type @xmath538 and hence we have @xmath539 and @xmath540 since if we had @xmath541 then @xmath484 would be well - formed by lemma  [ lem : envwellformed2 ] , which is a contradiction . also , since @xmath525v = { { \\mathtt{br}}}\\,([u / x_{\\mathtt{o}}]v_0)\\,([u / x_{\\mathtt{o}}]v_1 ) { \\longrightarrow^*}\\pi$ ] , there exist @xmath542 and @xmath378 such that @xmath543v_i ) { \\longrightarrow^*}\\pi_i$ ]",
    ". thus we can use the induction hypothesis for @xmath544 .",
    "now @xmath545 is closed and hence @xmath546 , but since @xmath547 , we have @xmath548 .    first note that , for any @xmath549 such that @xmath550 , we have @xmath551 .",
    "this is because , from the assumption @xmath387 , @xmath165 is unbalanced by lemma  [ lem : envwellformed ] , and hence we have @xmath551 by lemmas  [ lem : utr - typing ] and  [ lem : rty - sub - red]-[item : subred - unb ] .",
    "now we prove the goal of the current lemma by using the context lemma ( lemma  [ lem : context ] ) .    given @xmath525v { \\longrightarrow^*}\\pi$ ] , there exists @xmath549 such that @xmath552v ' { \\longrightarrow^*}\\pi\\,.\\ ] ] by lemma  [ lem : keyctx ] , there exist @xmath553 such that @xmath554 since @xmath392v ' = \\pi_1 { \\mathbin{*}}(\\pi_2 { \\mathbin{*}}\\cdots ( \\pi_n { \\mathbin{*}}u)\\cdots ) { \\longrightarrow^*}\\pi\\ ] ] there exist @xmath555 and @xmath306 such that @xmath556 therefore @xmath557v { \\mathbin{*}}u   = & \\   ( \\pi_1 { \\mathbin{*}}(\\pi_2 { \\mathbin{*}}\\cdots ( \\pi_n { \\mathbin{*}}{{\\mathtt{e}}})\\cdots ) ) { \\mathbin{*}}u \\\\ { \\longrightarrow^*}&\\   ( \\pi_1 { \\mathbin{*}}(\\pi_2 { \\mathbin{*}}\\cdots ( \\pi_n { \\mathbin{*}}{{\\mathtt{e}}})\\cdots ) ) { \\mathbin{*}}\\pi ' \\\\ { \\sim_{\\mathrm{v}}}&\\   \\pi_1 { \\mathbin{*}}(\\pi_2 { \\mathbin{*}}\\cdots ( \\pi_n { \\mathbin{*}}\\pi')\\cdots ) = \\pi.\\end{aligned}\\ ] ]    on the other hand , given @xmath558v){\\mathbin{*}}u { \\longrightarrow}^p \\pi$ ] , there exist @xmath559 , @xmath560 , @xmath561 , and @xmath562 such that @xmath563v { \\longrightarrow}^{p_0 } \\pi'_0 \\qquad \\pi'_0 { \\mathbin{*}}u { \\longrightarrow}^{p_1 }",
    "\\pi'_0 { \\mathbin{*}}\\pi'_1   = \\pi \\qquad p_0+p_1 = p\\,.\\ ] ] for @xmath564v { \\longrightarrow}^{p_0 } \\pi'_0 $ ] , we have @xmath549 such that @xmath565v ' { \\longrightarrow}^{p_3 } \\pi'_0 \\qquad p_2+p_3=p_0\\,.\\ ] ] by lemma  [ lem : keyctx ] , there exist @xmath553 such that @xmath554 since @xmath563v '   = \\pi_1 { \\mathbin{*}}(\\pi_2 { \\mathbin{*}}\\cdots ( \\pi_n { \\mathbin{*}}{{\\mathtt{e}}})\\cdots ) { \\longrightarrow}^{p_3 } \\pi'_0,\\ ] ] we have @xmath566 hence , @xmath567v { \\longrightarrow}^{p_2 } [ u / x_{\\mathtt{o}}]v ' = \\pi_1 { \\mathbin{*}}(\\pi_2 { \\mathbin{*}}\\cdots ( \\pi_n { \\mathbin{*}}u)\\cdots ) { \\longrightarrow}^{p_1 } \\pi_1 { \\mathbin{*}}(\\pi_2 { \\mathbin{*}}\\cdots ( \\pi_n { \\mathbin{*}}\\pi'_1)\\cdots)\\end{aligned}\\ ] ] i.e. , @xmath568v { \\longrightarrow}^{p }   \\pi_1 { \\mathbin{*}}(\\pi_2 { \\mathbin{*}}\\cdots ( \\pi_n { \\mathbin{*}}\\pi'_1)\\cdots ) { \\sim_{\\mathrm{v}}}\\pi'_0 { \\mathbin{*}}\\pi'_1 = \\pi.\\ ] ]      [ lem : desubst ] given @xmath569s { \\mathbin{:}}{\\delta}{\\rightarrow}v$ ] where @xmath9 is closed and @xmath183 and @xmath9 are applicative terms , there exist @xmath570 , and @xmath571 such that    1 .",
    "[ item : desubs ] @xmath572 2 .",
    "[ item : desubt ] @xmath573 3 .",
    "[ item : unb ] for each @xmath574 , if @xmath185 is unbalanced , @xmath186 is a singleton 4 .",
    "[ item : subs ] @xmath575_{{i \\le k } } { v^{\\bullet } } $ ] .",
    "the proof is by induction on @xmath183 and analysis on the last rule used for deriving @xmath569s { \\mathbin{:}}{\\delta}{\\rightarrow}v$ ] .",
    "case @xmath576 : since @xmath577x = ) \\ , t { \\mathbin{:}}{\\delta}{\\rightarrow}v$ ] and @xmath9 is closed , by lemma  [ lem : strengthening ] , we also have @xmath578 and @xmath175 is balanced . for item  [ item : desubs ] , we define @xmath579 , @xmath580 , and @xmath581 .",
    "we define @xmath582 for items  [ item : desubt ] and  [ item : unb ] .",
    "then , item  [ item : subs ] is clear .",
    "case @xmath583 , @xmath8 , or @xmath584 : since @xmath585 , @xmath586s = s$ ] .",
    "so we define @xmath587 , @xmath588 .",
    "case @xmath183 is an application : the last rule used for @xmath569s { \\mathbin{:}}{\\delta}{\\rightarrow}v$ ] is ( ) or ( ): @xmath589s'{\\mathbin{:}}{\\delta}'_1\\land\\cdots\\land { \\delta}'_{k'}{\\rightarrow}{\\delta}{\\rightarrow}v ' \\\\ { \\gamma}'_j{{\\vdash}_{\\mathrm{s}}}[t / x]t'{\\mathbin{:}}{\\delta}'_j{\\rightarrow}u'_j   \\quad\\text{(for each $ j \\in { \\{1,\\dots,{k'}\\}}$ ) }   } { { { \\gamma}'}\\cup{\\gamma}'_1\\cup\\cdots\\cup{\\gamma}'_{k'}{{\\vdash}_{\\mathrm{s}}}{{([t / x]s')}\\,}{([t / x]t ' ) } : { \\delta}{\\rightarrow}\\begin{cases } v'u'_1\\cdots u'_{k ' } & ( { { \\mathtt{order}}(t ' ) } \\ge 1 \\lor k'=0 ) \\\\ v ' { \\mathbin{*}}u'_1 & ( { { \\mathtt{order}}(t ' ) } = 0 \\land k'=1 ) \\end{cases } } \\end{minipage}}\\ ] ] where @xmath590 for each @xmath591 , the rule used last for @xmath592t'{\\mathbin{:}}{\\delta}'_j{\\rightarrow}u'_j$ ] is ( ): @xmath593t'{\\mathbin{:}}{\\delta}'_j{\\rightarrow}u'_{jh }   \\quad\\text{(for each $ h \\in { \\{1,\\dots,{k_j}\\}}$ ) }   \\\\ k_j=1\\mbox { if $ { \\delta}'_j$ is unbalanced } } { { \\gamma}'_j{{\\vdash}_{\\mathrm{s}}}[t / x]t'{\\mathbin{:}}{\\delta}'_j{\\rightarrow}{\\{u'_{j1},\\dots , u'_{jk_{j}}\\ } } ( = u'_j ) } \\end{minipage}}\\ ] ] hence , by induction hypotheses for @xmath594 and for @xmath396 , there exist @xmath595 , and @xmath596 such that @xmath597_{{i \\le k^0 } } { v'^{\\bullet}}\\end{gathered}\\ ] ] and for each @xmath591 and @xmath598 there exist @xmath599 , and @xmath600 such that @xmath601_{{i \\le k^{jh } } } { u_{jh}'^{\\bullet}}\\,.\\end{gathered}\\ ] ]    for each @xmath591 , by ( ) and a ( derived ) weakening rule , we have @xmath602 where , when @xmath603 is unbalanced , since @xmath604 we do not need the weakening rule ; when @xmath603 is balanced , by lemma  [ lem : envwellformed ] applied to  , @xmath605 must be balanced for each @xmath606 and @xmath607 , and hence we can use the weakening rule .",
    "now we define @xmath608 then , by ( ) or ( ) with   and  , we have @xmath609 where @xmath610 we define @xmath171 and @xmath611 as the following enumeration : @xmath612 thus we have obtained item  [ item : desubs ] . for each @xmath574",
    "we define @xmath613 by  ,  , and ( ) , for each @xmath574 we have @xmath614 where , when @xmath185 is unbalanced , we use   and   and we can show that if @xmath185 is unbalanced , then @xmath615 is a singleton as follows .",
    "the set is non - empty by the definition of @xmath185 .",
    "if @xmath616 is non - empty , it is a singleton , and we show that @xmath617 is empty . for every @xmath618 , @xmath606 , and @xmath619 , by lemma  [",
    "lem : envwellformed ] applied to   and   and the fact that @xmath620 is unbalanced for some @xmath619 , @xmath621 and @xmath622 must be balanced .",
    "hence , @xmath623 as @xmath185 is unbalanced .",
    "if @xmath617 is non - empty , similarly , @xmath616 is empty . to show that @xmath617 is a singleton , suppose @xmath624 . by lemma  [",
    "lem : envwellformed ] applied to  , @xmath625 and @xmath626 are unbalanced .",
    "hence @xmath627 from the well - formedness of @xmath628 , and we have also @xmath629 from  .",
    "therefore @xmath630 , and then @xmath631 .",
    "thus , we have obtained items  [ item : desubt ] and  [ item : unb ] .",
    "finally we show item  [ item : subs ] , i.e. , @xmath575_{i\\le k } { v^{\\bullet}}$ ] . in the case",
    "where @xmath632 , @xmath633_{{i \\le k^0}}{v'^{\\bullet } } ) } \\,}{{{\\overrightarrow { \\left\\ { [ u^{jh}_i / x_{{\\delta}^{jh}_i}]_{{i \\le k^{jh } } } { u_{jh}'^{\\bullet } } \\,\\middle|\\ , { h \\le k_j } \\right\\ } } } ^{{j \\le k ' } } } } } & & { \\text{(by~\\eqref{eq : desubih0-subs } and~\\eqref{eq : desubihjh - subs } ) } } \\\\ { \\lesssim}&\\ { { { ( [ u_i / x_{{\\delta}_i}]_{{i \\le k}}{v'^{\\bullet } } ) } \\,}{{{\\overrightarrow { \\left\\ { [ u_i / x_{{\\delta}_i}]_{{i \\le k}}{u_{jh}'^{\\bullet } } \\,\\middle|\\ , { h \\le k_j } \\right\\ } } } ^{{j \\le k ' } } } } } \\\\ = & \\ [ u_i / x_{{\\delta}_i}]_{i\\le k } { v^{\\bullet}}\\,.\\end{aligned}\\ ] ] in the case where @xmath634 , @xmath635_{{i \\le k^0 } } { v'^{\\bullet } } ) { \\mathbin{*}}([u^{11}_i / x_{{\\delta}^{11}_i}]_{{i \\le k^{11 } } } { u_{11}'^{\\bullet } } ) & & { \\text{(by~\\eqref{eq : desubih0-subs } and~\\eqref{eq : desubihjh - subs } , and now \\(k_1=1\\ ) ) } } \\\\ { \\lesssim}&\\ ( [ u_i / x_{{\\delta}_i}]_{{i \\le k } } { v'^{\\bullet } } ) { \\mathbin{*}}([u_i / x_{{\\delta}_i}]_{{i \\le k } } { u_{11}'^{\\bullet } } ) \\\\ = & \\ [ u_i / x_{{\\delta}_i}]_{i\\le k } { v^{\\bullet}}\\,.\\end{aligned}\\ ] ]    the following lemma states that the transformation relation ( up to @xmath297 ) is a left - to - right backward simulation relation .    [",
    "lem : red - fwd ] if @xmath636 and @xmath637 , then there exists @xmath112 such that @xmath638 with @xmath639 .    the proof is given by the induction on @xmath9 and by the case analysis of the reduction @xmath636 .",
    "case where @xmath339 : trivial .",
    "case where @xmath640 and @xmath641 : let the last rule used for @xmath636 be since @xmath642 is derived by  ( ) and  ( ) , we have @xmath643 such that @xmath644 .",
    "hence by the induction hypothesis for @xmath645 , there exists @xmath234 such that @xmath646 and @xmath647 .",
    "therefore we have @xmath648 with @xmath649 and @xmath650 .",
    "case where @xmath651 : let the last rule used for @xmath636 be and let @xmath652 . by the assumption on sorts , there exists unique @xmath259 such that @xmath653 , @xmath654 for all @xmath494 , and @xmath655 for all @xmath656 .",
    "let @xmath657 and @xmath658 ; then @xmath659s : { \\mathtt{o}}{\\rightarrow}v^{n+1}\\,.\\ ] ] hence by lemma  [ lem : desubst ] , for each @xmath660 , there exist @xmath661 such that @xmath662_{{j ' \\le j-1}}s : { \\mathtt{o}}{\\rightarrow}v^{j } \\\\",
    "& \\!\\!\\text { for each \\({i \\le k^j}\\ ) , if \\({\\delta}^{j}_{i}\\ ) is unbalanced , \\(u^{j}_{i}\\ ) is a singleton   } \\\\ & v^{j+1 } { \\lesssim}[u^j_i/{(x_{j})}_{{\\delta}^j_i}]_{{i \\le k^j } } v^{j}\\,.\\end{aligned}\\ ] ] note that for each @xmath663 , @xmath664 , and there is at most one @xmath663 such that @xmath665 by lemma  [ lem : envwellformed ] . by",
    "( ) , we have @xmath666 .",
    "since we have also @xmath667 ( @xmath668 ) for @xmath669 , by using  ( ) iteratively , we have @xmath670 then , since we have @xmath667 ( @xmath668 ) for @xmath671 , by using  ( ) where @xmath160 and/or  ( ) iteratively , we have @xmath672    meanwhile , since we have @xmath673_{{j ' \\le 0}}s : { \\mathtt{o}}{\\rightarrow}v^{1}$ ] , so do @xmath674_{{j ' \\le 0}}s : { \\mathtt{o}}{\\rightarrow}v^{1}$ ] , i.e. , @xmath675 now we define @xmath676v^1 & \\text{(\\(k_{j}>0\\ ) for some ( unique ) \\(j\\in{\\{m+1,\\dots , n\\}}\\ ) ) } \\\\ v^1 & \\text{(otherwise)}. \\end{cases}\\ ] ] by  iterating ( ) where @xmath160 and/or  ( ) , we have @xmath677 and by  iterating ( ) , we have @xmath678 hence , by ( ) , we have @xmath679 where @xmath680 .    by lemmas  [ lem : subst - monotone ] and  [ lem : subst - iter ] and since @xmath681_{{i \\le k^1 } } v^{1 }",
    "$ ] , we have @xmath682_{{i \\le k^{2}}}v^{2 } { \\lesssim}([u^1_i/{(x_{1})}_{{\\delta}^1_i}]_{{i \\le k^1 } } \\cup [ u^2_i/{(x_{2})}_{{\\delta}^2_i}]_{{i \\le k^2 } } ) v^{1 } $ ] . iterating this reasoning",
    ", we have @xmath683_{{i \\le k^1 } } \\cup\\cdots\\cup [ u^m_i/{(x_{m})}_{{\\delta}^m_i}]_{{i \\le k^m}})v^1\\,.\\ ] ] further , @xmath684_{{i \\le k^{m+1 } } } \\cup\\cdots\\cup   [ u^n_i/{(x_{n})}_{{\\delta}^n_i}]_{{i \\le k^n}})v^{m+1 } \\\\ = \\ & \\label{eq : subexp - subst2 } \\begin{cases } [ u^j_1/{(x_{j})}_{{\\mathtt{o}}}]v^{m+1 } & \\text{(\\(k_{j}>0\\ ) for some ( unique ) \\(j\\in{\\{m+1,\\dots , n\\}}\\ ) ) } \\\\ v^{m+1 } & \\text{(otherwise)}. \\end{cases}\\end{aligned}\\ ] ]    in the case where @xmath685 for some @xmath686 , we have @xmath687_{{i \\le k^1 } } \\cup\\cdots\\cup [ u^m_i/{(x_{m})}_{{\\delta}^m_i}]_{{i \\le k^m}})v^0\\big ) { \\mathbin{*}}u^j_1 & & { \\text{(by~\\eqref{eq : subexp - xformed - rule } ) } } \\\\ = \\ & \\big([{{\\mathtt{e}}}/{(x_j)}_{{\\mathtt{o}}}]([u^1_i/{(x_{1})}_{{\\delta}^1_i}]_{{i \\le k^1 } } \\cup\\cdots\\cup [ u^m_i/{(x_{m})}_{{\\delta}^m_i}]_{{i \\le k^m}})v^1\\big ) { \\mathbin{*}}u^j_1 & & { \\text{(by~\\eqref{eq : def - vzero } ) } } \\\\ { \\gtrsim}\\ & \\big([{{\\mathtt{e}}}/{(x_j)}_{{\\mathtt{o } } } ] v^{m+1}\\big ) { \\mathbin{*}}u^j_1 & & { \\text{(by~\\eqref{eq : subexp - subst } ) } } \\\\ { \\sim}\\ & [ u^j_1/{(x_j)}_{{\\mathtt{o}}}]v^{m+1 } & & { \\text{(lemma~\\ref{lem : groundsbst } ) } } \\\\ { \\gtrsim}\\ & v^{n+1 } = u ' & & { \\text{(by~\\eqref{eq : subexp - subst2})}}.\\end{aligned}\\ ] ] in the other case , we have @xmath688_{{i \\le k^1 } } \\cup\\cdots\\cup [ u^m_i/{(x_{m})}_{{\\delta}^m_i}]_{{i \\le k^m}})v^0 & & { \\text{(by~\\eqref{eq : subexp - xformed - rule } ) } } \\\\",
    "= \\ & ( [ u^1_i/{(x_{1})}_{{\\delta}^1_i}]_{{i \\le k^1 } } \\cup\\cdots\\cup [ u^m_i/{(x_{m})}_{{\\delta}^m_i}]_{{i \\le k^m}})v^1 & & { \\text{(by~\\eqref{eq : def - vzero } ) } } \\\\ { \\gtrsim}\\ & v^{m+1 }   & & { \\text{(by~\\eqref{eq : subexp - subst } ) } } \\\\ { \\gtrsim}\\ & v^{n+1 } = u ' & & { \\text{(by~\\eqref{eq : subexp - subst2})}}.\\end{aligned}\\ ] ]      for a given @xmath175 , we write @xmath689 for @xmath690 such that @xmath691 for some @xmath692 and @xmath693 .",
    "[ lem : substold ] given @xmath694 where @xmath370 and @xmath695 , and given @xmath696 for each @xmath574 , we have @xmath697s { \\mathbin{:}}{\\delta}{\\rightarrow } { } [ u_i / x_{{\\delta}_i}]_{{i \\le k } } v\\,.\\ ] ]    the proof is given by induction on @xmath694 .",
    "for any @xmath175 , we define @xmath698 .",
    "the base cases are clear ; in the case of variables , we use a derived rule of weakening for balanced environments .",
    "case of ( ): @xmath699 we have @xmath700 the rule used for @xmath701 is ( ): @xmath702    by the induction hypothesis for @xmath594 and @xmath396 , we have @xmath703s ' : { \\delta}'_1 \\land \\cdots \\land { \\delta}'_{k ' } { \\rightarrow}{\\delta}{\\rightarrow } { } [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_0 { \\rangle}}}v ' \\\\\\label{eq : sbsihjh - app1 } { { \\gamma}'_{j } \\setminus x } { \\vdash}[t / x]t ' : { \\delta}'_j { \\rightarrow } { }   [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_{j } { \\rangle}}}u'_{jh } \\qquad ( j \\in { \\{1,\\ldots , k'\\ } } , { h \\le k_j})\\end{gathered}\\ ] ] and by using ( ) , from  , we have @xmath704 t ' : { \\delta}'_j { \\rightarrow } { } \\cup_{{h \\le k_j } }   [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_{j } { \\rangle}}}u'_{jh } \\qquad ( j \\in { \\{1,\\ldots , k'\\}}).\\ ] ]    now @xmath705_{{i \\le k } } v & = { { { ( [ u_i / x_{{\\delta}_i}]_{{i \\le k } } v ' ) } \\,}{{{\\overrightarrow { \\cup_{{h \\le k_j } } [ u_i / x_{{\\delta}_i}]_{{i \\le k } } u'_{jh } } } ^{{j \\le k ' } } } } }    \\\\ & = { { { ( [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_0 { \\rangle } } } v ' ) } \\,}{{{\\overrightarrow { \\cup_{{h \\le k_j } } [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_{j } { \\rangle } } } u'_{jh } } } ^{{j \\le k ' } } } } }    \\\\ & = \\left\\ { { { { { v'^{\\bullet } } } \\,}{{{\\overrightarrow { \\cup_{{h \\le k_j } } [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_{j } { \\rangle } } } u'_{jh } } } ^{{j \\le k ' } } } } }    \\,\\middle|\\ , { v'^{\\bullet } } \\in [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_0 { \\rangle } } } v ' \\right\\}\\end{aligned}\\ ] ] where the second equation is shown by lemma  [ lem : envu ] . for any @xmath706_{i \\in { { \\langle}{\\gamma}'_0 { \\rangle } } } v'$ ] , by ( ) and  , we have @xmath707s ' : { \\delta}'_1 \\land \\cdots \\land { \\delta}'_{k ' } { \\rightarrow}{\\delta}{\\rightarrow}{v'^{\\bullet}}\\ ] ] and hence , by ( ) with  , we have @xmath708s')([t / x]t ' ) : { \\delta}{\\rightarrow } { { { { v'^{\\bullet } } } \\,}{{{\\overrightarrow { \\cup_{{h \\le k_j } } [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_{j } { \\rangle } } } u'_{jh } } } ^{{j \\le k'}}}}}\\ ] ] where the linearity condition is satisfied , as @xmath709 for @xmath710 . therefore , again by ( ) , @xmath708s')([t / x]t ' ) : { \\delta}{\\rightarrow}[u_i / x_{{\\delta}_i}]_{{i \\le k } } v\\ ] ] since @xmath711 and @xmath712s')([t / x]t')=[t / x]({{s'}\\,}{t'})$ ] , we have shown the required condition .",
    "case of ( ): @xmath713 we have @xmath714 the rule used for @xmath715 and @xmath716 is ( ): @xmath717 @xmath718    by the induction hypothesis for @xmath594 and @xmath396 , we have @xmath719s ' : { \\mathtt{o}}{\\rightarrow}{\\delta}{\\rightarrow } { } [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_0 { \\rangle}}}v'_h & & \\mspace{-100mu } ( { h \\le k_0 } ) \\mspace{100mu } \\\\\\label{eq : sbsihjh - app2 } & { { \\gamma}'_{1 } \\setminus x } { \\vdash}[t / x]t ' : { \\mathtt{o}}{\\rightarrow } { }   [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_{1 } { \\rangle}}}u'_h & & \\mspace{-100mu } ( { h \\le k_1 } ) \\mspace{100mu}\\end{aligned}\\ ] ] and by using ( ) ( going and back ) , from   and  , we have @xmath720s ' : { \\mathtt{o}}{\\rightarrow}{\\delta}{\\rightarrow } { } [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_0 { \\rangle}}}v ' \\\\ & { { \\gamma}'_{1 } \\setminus x } { \\vdash}[t / x]t ' : { \\mathtt{o}}{\\rightarrow } { }   [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_{1 } { \\rangle}}}u'\\end{aligned}\\ ] ] hence , by ( ) , we have @xmath721s')([t / x]t ' ) : { \\delta}{\\rightarrow}{\\mathtt{br}}\\ , ( [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_0 { \\rangle}}}v')\\ , ( [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_1 { \\rangle}}}u')\\ ] ] where the linearity condition is clear as shown in the previous case .",
    "since @xmath705_{{i \\le k } } v & = { \\mathtt{br}}\\ , ( [ u_i / x_{{\\delta}_i}]_{{i \\le k}}v')\\ , ( [ u_i / x_{{\\delta}_i}]_{{i \\le k}}u ' ) \\\\&= { \\mathtt{br}}\\ , ( [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_0 { \\rangle}}}v')\\ , ( [ u_i / x_{{\\delta}_i}]_{i \\in { { \\langle}{\\gamma}'_1 { \\rangle}}}u')\\end{aligned}\\ ] ] we have shown the required condition .",
    "the following lemma states that , roughly speaking , the transformation relation is a right - to - left forward simulation relation ; also , this can be seen as a form of subject reduction .    [ lem : red - bwd ] given @xmath722 where @xmath723 and @xmath724 , there exist @xmath396 , @xmath725 , @xmath306 and @xmath726 such that @xmath727 , @xmath728 , and @xmath729 .",
    "the proof is given by the induction on @xmath9 and by the case analysis of the head of @xmath112 . since @xmath730 , the head of @xmath112 must be @xmath72 or a non - terminal .",
    "case where @xmath731 : in the reduction @xmath732 suppose that @xmath733 and @xmath734 are chosen .",
    "the last rule used for @xmath735 is either ( ): @xmath736 or ( ): @xmath737 in the former case above , we can iterate this reasoning , and then there exist @xmath738 , @xmath594 , @xmath739 such that @xmath740 and the following :    the head of @xmath549 is not @xmath203 since if it is @xmath203 , by the same reasoning as above we have some @xmath741 and @xmath742 with @xmath743 which contradicts the well - formedness condition on types .",
    "hence , the head of @xmath549 must be a nullary terminal or a non - terminal .    in the case where the head of @xmath549 is a nullary terminal @xmath22 , by @xmath744",
    ", @xmath594 is a unary non - terminal and hence @xmath745 and @xmath746 .",
    "since @xmath549 is a tree , reduction of @xmath112 goes on @xmath725-side . thus there",
    "exist @xmath747 and @xmath306 such that @xmath748 and @xmath749 .    if @xmath750 , by the induction hypothesis for @xmath645 , there exist @xmath751 , @xmath752 , @xmath753 and @xmath754 such that @xmath755 then , we have @xmath756 if @xmath757 , @xmath758    in the case where the head of @xmath549 is a non - terminal , let @xmath759 .",
    "the rule used for @xmath760 is ( ) or ( ) ; in the latter case , we have : @xmath761 here if @xmath762 then @xmath763 . repeating this reasoning to the function side (",
    "i.e. , @xmath741 ) terminates at the case of ( ) .",
    "thus , there exist @xmath259 , @xmath764 , @xmath765 , @xmath766 such that @xmath767    for the reduction sequence @xmath768 , we can assume that @xmath769 for simplicity and that the first reduction of the reduction sequence is on @xmath549 .",
    "this does not lose generality since we can choose an argument to be reduced arbitrarily .",
    "suppose that @xmath549 is reduced by a rule @xmath770 .",
    "since this is produced by ( ) , there is a rule @xmath771 in @xmath3 such that @xmath772 then we have the following derivation tree :    where @xmath773 and @xmath774 is the codomain type of @xmath775 for each @xmath776 ; especially , for each @xmath777 , @xmath778 and @xmath779 thus we find that @xmath780    now @xmath781_{{i \\le \\ell } } v = [ { { \\mathtt{e}}}/x^{m'+1}_{{\\mathtt{o } } } ] [ u_i / x'_i]_{{i \\le \\ell } } v_0\\ ] ] and hence @xmath782 [ u_i / x'_i]_{{i \\le \\ell } } v_0 ) \\,u ' { \\longrightarrow}^{p-1 } \\pi\\ ] ] while @xmath783_{{j \\le n ' } } [ t''_j / x^{j}]_{{j \\le m ' } } s\\ , . \\ ] ] recall that @xmath784 ; hence by lemma  [ lem : substold ] , we have @xmath785_{{j \\le n ' } } [ t''_j / x^{j}]_{{j \\le m ' } } s : { \\mathtt{o}}{\\rightarrow}[u'/x^{m'+1}_{{\\mathtt{o}}}][u_i / x'_i]_{{i \\le \\ell } } v_0\\,.\\ ] ] thus we define @xmath786_{{j \\le n ' } } [ t''_j / x^{j}]_{{j \\le m ' } } s \\qquad u ' { : = } [ u'/x^{m'+1}_{{\\mathtt{o}}}][u_i / x'_i]_{{i \\le \\ell } } v_0\\,.\\ ] ] now by lemma  [ lem : substold ] @xmath787_{{j \\le m } } s : { \\mathtt{o}}{\\rightarrow}[u_i / x'_i]_{{i \\le \\ell } } v_0\\ ] ] and hence by the key lemma ( lemma  [ lem : groundsbst ] ) , @xmath788 ( [ u_i / x'_i]_{{i \\le \\ell } } v_0 ) { \\sim}&\\   ( [ { { \\mathtt{e}}}/x^{m'+1}_{{\\mathtt{o } } } ] ( [ u_i / x'_i]_{{i \\le \\ell } } v_0 ) ) { \\mathbin{*}}u'\\end{aligned}\\ ] ] but from   furthermore we have @xmath789 ( [ u_i / x'_i]_{{i \\le \\ell } } v_0 ) { \\longrightarrow}^{p-1 } \\pi ' { \\sim_{\\mathrm{v}}}\\pi\\ ] ] for some @xmath306 .",
    "case where the head of @xmath112 is non - terminal : this case is similar to the above case where the head of @xmath549 is a non - terminal ( and easier in the sense that we do not need the key lemma ) : replace @xmath549 , @xmath594 , @xmath790 with @xmath112 , @xmath9 , @xmath16 , respectively .",
    "in this section , we sometimes abbreviate a sequence @xmath791 to @xmath792 . we also write @xmath291_{i\\in { \\{1,\\ldots , k\\}}}$ ] for @xmath48 $ ] .",
    "we first prepare some lemmas .",
    "first , we show that the transformation preserves typing .",
    "we extend @xmath793\\!]}}$ ] to the operation on type environments by : @xmath794\\ ! ] } } = { \\{x_{{\\xi}}{\\mathbin{:}}{\\mathbin{[\\![}{\\xi}\\mathbin{]\\!]}}\\mid x{\\mathbin{:}}{\\xi}\\in { \\xi}\\}}$ ] .",
    "[ lem : tr2-preserves - types ] if @xmath227 , then @xmath794\\!]}}{\\vdash}u:{\\mathbin{[\\![}{\\xi}\\mathbin{]\\!]}}$ ] holds .",
    "this follows by straightforward induction on the derivation of @xmath227 .",
    "the relations @xmath795 and @xmath796 on ( extended ) terms and term sets are defined by :    it is clear that the two relations @xmath797 are pre - order relations .",
    "[ lem : desubstitution - tr2 ] let @xmath9 be an applicative term .",
    "if @xmath798t:{\\xi}{\\rightarrow}u$ ] , then @xmath799u'\\\\ { \\xi}{\\vdash}s:{\\xi}_i { \\rightarrow}u_i \\text { for each \\(i\\in{\\{1,\\ldots , k\\}}\\ ) } \\end{array}\\ ] ] for some @xmath800 . similarly ,",
    "if @xmath798t:{\\xi}{\\rightarrow}u$ ] , then @xmath801u'\\\\ { \\xi}{\\vdash}s:{\\xi}_i { \\rightarrow}u_i \\text { for each \\(i\\in{\\{1,\\ldots , k\\}}\\ ) } \\end{array}\\ ] ] for some @xmath802 .    the proof proceeds by simultaneous induction on the structure of @xmath9 .",
    "we first show that the latter property follows from the former one for the same @xmath9 .",
    "suppose @xmath798t:{\\xi}{\\rightarrow}{\\{u_1,\\ldots , u_\\ell\\}}$ ] , i.e. , @xmath798t:{\\xi}{\\rightarrow}u_j$ ] for each @xmath803 . by the former property",
    ", we have : @xmath804u'_j \\\\ { \\xi}{\\vdash}s:{\\xi}_{j , i}{\\rightarrow}u_{j , i } \\mbox { for each $ i\\in{\\{1,\\ldots , k_j\\}}$ } \\end{array}\\ ] ] for each @xmath803 .",
    "let @xmath805 , and : @xmath806 for each @xmath224 .",
    "then , the required result holds for @xmath807 .",
    "now , we show the former property ( using the latter property for strict subterms of @xmath9 ) .",
    "* case @xmath808 : in this case , we have @xmath809 .",
    "the result holds for @xmath810 , and @xmath811 .",
    "* case @xmath812 : we have @xmath813 .",
    "the result holds for @xmath160 and @xmath814 . *",
    "case where @xmath9 is a non - terminal or a constant : similar to the previous case . * case @xmath815 . in this case",
    ", we have : @xmath816t_j : { \\xi}'_j{\\rightarrow}u_j \\mbox { for each $ j\\in{\\{0,1\\}}$}\\\\ ( u,{\\xi } ) =   \\left\\ {    \\begin{array}{ll }      ( { \\mathtt{br}}\\,u_0\\,u_1 , { { \\mathtt{o}}_{+ } } ) & \\mbox { if \\({\\xi}'_0={\\xi}'_1={{\\mathtt{o}}_{+}}\\)}\\\\      ( u_j , { { \\mathtt{o}}_{+ } } ) & \\mbox { if \\({\\xi}'_j={{\\mathtt{o}}_{+}}\\ ) and \\({\\xi}'_{1-j}={{\\mathtt{o}}_{\\epsilon}}\\)}\\\\      ( { { \\mathtt{e } } } , { { \\mathtt{o}}_{\\epsilon } } ) & \\mbox { if \\({\\xi}'_0={\\xi}'_1={{\\mathtt{o}}_{\\epsilon}}\\)}\\\\    \\end{array}\\right . \\end{array}\\ ] ] by applying the induction hypothesis to @xmath798t_j : { \\xi}'_j{\\rightarrow}u_j$ ] , we obtain : @xmath817u_j'\\\\ { \\xi}{\\vdash}s:{\\xi}_{j , i}{\\rightarrow}u_{j , i } \\mbox { for $ j\\in { \\{0,1\\ } } , i\\in { \\{1,\\ldots , k_j\\}}$ } \\end{array}\\ ] ] let @xmath818 , and : @xmath806 for each @xmath224 . then , we have the required result for @xmath819 * case @xmath820 , where the head symbol of @xmath208 is not @xmath72 . in this case , we have : @xmath821t_0:{\\xi}'_1\\land \\cdots \\land{\\xi}'_\\ell\\to { \\xi}{\\rightarrow}u_0\\\\ { \\xi}{\\vdash}[s / x]t_1:{\\xi}'_j { \\rightarrow}v_j \\mbox { for each $ j\\in{\\{1,\\ldots,\\ell\\}}$ } \\end{array}\\ ] ] by applying the induction hypothesis ,",
    "we obtain @xmath822u_0'\\\\ { \\xi}{\\vdash}s:{\\xi}_{0,i}{\\rightarrow}u_{0,i } \\mbox { for each $ i\\in{\\{1,\\ldots , k_0\\}}$}\\\\ \\end{array}\\ ] ] and @xmath823v_j'\\\\ { \\xi}{\\vdash}s:{\\xi}_{j , i}{\\rightarrow}u_{j , i}\\mbox { for each $ i\\in{\\{1,\\ldots , k_j\\}}$ } \\end{array}\\ ] ] for each @xmath803 .",
    "let @xmath824 , and @xmath806 for each @xmath224 .",
    "then , we have the required result for @xmath825 .",
    "now we prove that the transformation is a left - to - right backward simulation .",
    "[ lem : tr2-g-simulated - by - g ] suppose @xmath261 .",
    "if @xmath826 with @xmath827 and @xmath828 , then there exist @xmath112 and @xmath829 such that @xmath830 with @xmath831 and @xmath832 .",
    "this follows by induction on the structure of @xmath183 , with case analysis on the head symbol of @xmath183 .",
    "* case where @xmath183 is of the form @xmath833 : in this case , we have : @xmath834 t \\end{array}\\ ] ] by lemma  [ lem : desubstitution - tr2 ] and @xmath835t:{\\xi}{\\rightarrow}u'$ ] , we have : @xmath836_{i\\in{\\{1,\\ldots , k\\}},j\\in{\\{1,\\ldots , m_i\\ } } } v\\\\ { \\vdash}s_i : { \\xi}_{i , j}{\\rightarrow}u_{i , j } \\end{array}\\ ] ] by the first condition , we have : @xmath837 where @xmath838 . thus , the required result holds for @xmath839 and the above @xmath829 .",
    "* case where @xmath183 is of the form @xmath840 : in this case , we have : @xmath841 by the induction hypothesis , we also have : @xmath842 with @xmath843 and @xmath844 .",
    "let @xmath845 .",
    "the required condition holds for @xmath846    [ lem : subterm - sim ] for applicative terms @xmath112 and @xmath295 , if @xmath847 and @xmath848 , then @xmath849 and @xmath850 for some @xmath549 .",
    "this follows by straightforward induction on term @xmath112 and case analysis on the shape of @xmath112 .",
    "* case @xmath851 : in this case @xmath852 and @xmath853 for each @xmath224 . since @xmath854 , we have @xmath855 such that @xmath856_{i\\in{\\{1,\\ldots , k\\}}}u_0 $ ] .",
    "we can show that @xmath857 and @xmath858 implies @xmath859u { \\preceq}[v / x]v$ ] , by induction on @xmath847 .",
    "hence , as required , @xmath860_{i\\in{\\{1,\\ldots , k\\}}}u_0 \\\\ { } [ u_i / x_i]_{i\\in{\\{1,\\ldots , k\\}}}u_0 { \\preceq}[v_i / x_i]_{i\\in{\\{1,\\ldots , k\\}}}u_0 . \\end{array}\\ ] ] * case @xmath861 : we consider only the case where @xmath862 is reduced ; the other cases are similar or clear .",
    "thus , @xmath863 and @xmath864 for some @xmath865 . since @xmath858 , @xmath866 for some @xmath534 and @xmath867 such that @xmath853 for @xmath868 . as @xmath869 , @xmath870 for some @xmath871 .",
    "hence by the induction hypothesis , there exists @xmath872 such that @xmath873 and @xmath874 .",
    "then the required result holds for @xmath875 .",
    "[ lem : tr2-ground - tree - fwd ] suppose @xmath261 .",
    "for any @xmath31 , there exist @xmath828 and @xmath306 such that @xmath876 and @xmath877    this follows by induction on @xmath31 :    * case @xmath878 : the result follows for @xmath879 and @xmath880 .",
    "* case @xmath338 : the result follows for @xmath881 and @xmath882 .",
    "* case @xmath883 : by induction hypothesis , we have @xmath884 such that @xmath885 for each @xmath886 .",
    "the result follows for @xmath887    the following lemma shows that the transformation is complete in the sense that for any tree generated by the source grammar , the tree obtained by removing @xmath55 can be generated by the target grammar .",
    "[ lem : tr2-completeness ] if @xmath261 , then @xmath888 .",
    "suppose @xmath889 , i.e. , @xmath890 for some tree @xmath31 such that @xmath891 . by lemma  [ lem : tr2-ground - tree - fwd ] , there exist @xmath828 and @xmath306 such that @xmath876 and @xmath892 by repeated applications of lemmas  [ lem : tr2-g-simulated - by - g ] and [ lem : subterm - sim ] , there exists @xmath112 such that @xmath893 and @xmath894 .",
    "we can easily show that for any @xmath31 and @xmath112 if @xmath895 then @xmath896 by induction on @xmath895 ; thus @xmath897 . if @xmath898 , then @xmath899 as required . if @xmath900 , then @xmath901 and hence @xmath902 as required .",
    "we now turn to prove the soundness of the transformation ( lemma  [ lem : tr2-soundness ] below ) .",
    "we again prepare several lemmas .",
    "[ lem : tr2:substitution ] suppose @xmath903 . if @xmath904 and @xmath905 for each @xmath224 , then @xmath798t:{\\xi}{\\rightarrow}[u_1/x_{{\\xi}_1},\\ldots , u_k / x_{{\\xi}_k}]u$ ] .",
    "this follows by induction on the derivation of @xmath904 , with case analysis on the last rule used .",
    "we discuss only the case for ( ) ; the other cases follow immediately from the induction hypothesis .",
    "* case ( ): in this case , @xmath906 if @xmath907 , then @xmath908u = { \\{u\\}}$ ] .",
    "@xmath798y:{\\xi}{\\rightarrow}u$ ] follows immediately from @xmath904 , as @xmath909y = y = t$ ] by the ( derived ) strengthening rule .",
    "+ if @xmath910 , then @xmath911 for some @xmath607 .",
    "we have @xmath908u = u_i$ ] .",
    "the required result @xmath798t:{\\xi}{\\rightarrow}u_i$ ] follows from @xmath909t = s$ ] and @xmath905 .",
    "* cases ( ) , ( ) , and ( ): similar to the previous case where @xmath907 . * cases ( ) and ( ): these cases are straightforward from induction hypotheses ; we consider only the case ( ) .",
    "we have : @xmath912 by the induction hypotheses and ( ) , we have : @xmath816t_0 : { \\xi}_1\\land \\cdots\\land { \\xi}_\\ell\\to { \\xi}{\\rightarrow}[u_1/x_{{\\xi}_1},\\ldots , u_k / x_{{\\xi}_k}]u_0 \\\\ { \\xi}{\\vdash}[s / x]t_1 : { \\xi}_j { \\rightarrow}[u_1/x_{{\\xi}_1},\\ldots , u_k / x_{{\\xi}_k}]v_j \\end{array}\\ ] ] hence , we have the required result by ( ) .",
    "next we show that the transformation is a right - to - left forward simulation .",
    "[ lem : tr2:fwdsim - right2left ] suppose @xmath261 .",
    "if @xmath848 with @xmath913 and @xmath828 , then there exists @xmath396 such that @xmath914 with @xmath915 .",
    "this follows by induction on the derivation of @xmath913 .",
    "we perform case analysis on the shape of @xmath9 .",
    "* case @xmath815 : we first consider the case where @xmath208 or @xmath141 has type @xmath204 .",
    "since @xmath916 , we have : @xmath917 for some @xmath918 . by the induction hypothesis",
    ", there exists @xmath919 such that @xmath920 and @xmath921 .",
    "the required result holds for @xmath922 , where @xmath923 .",
    "+ in the other case , for some @xmath918 , we have : @xmath924 by the induction hypothesis , there exists @xmath919 such that @xmath925 and @xmath920 .",
    "let @xmath926 .",
    "then , the result holds for @xmath927 .",
    "* @xmath928 : in this case , we have : @xmath929_{i\\in{\\{1,\\ldots , k\\}},j\\in{\\{1,\\ldots,\\ell_i\\}}}u_0 \\end{array}\\ ] ] by the condition @xmath930 , we have @xmath931 let @xmath932t_0 $ ] . by lemma  [ lem : tr2:substitution ] , we have @xmath915 and @xmath933 as required .",
    "[ lem : tr2:weak - normalization ] if @xmath934 , then @xmath935 for some @xmath31 such that @xmath936 .",
    "we define the unary logical relation @xmath937 by :    * @xmath938 if @xmath935 for some @xmath31 such that @xmath936 . *",
    "@xmath939 if @xmath935 for some @xmath31 such that @xmath940 .",
    "* @xmath941 if , whenever @xmath942 for every @xmath224 , @xmath943 .    for a substitution",
    "@xmath944 $ ] , we write @xmath945 if @xmath946 and @xmath947 . we write @xmath948 when @xmath949 implies @xmath950 .",
    "we show that , for every applicative term @xmath9 , @xmath227 implies @xmath948 , from which the result follows .",
    "the proof proceeds by induction on the derivation of @xmath227 , with case analysis on the last rule used .",
    "* cases for ( ) , ( ) , and ( ): trivial . * case for ( ): in this case , we have : @xmath951 then , @xmath952 follows from the induction hypotheses @xmath953 . * case for ( ): in this case , we have : @xmath954 to show @xmath955 , suppose @xmath956 for every @xmath224 and @xmath957 . by applying the induction hypothesis to the last condition , we have @xmath958 ( note that the derivation for @xmath959 is a sub - derivation for @xmath960 ; this is the reason why we have included the rightmost premise in the rule ( ) . ) therefore , we have @xmath961t_0)$ ] , which implies @xmath962 as required .",
    "* case for ( ): in this case , we have : @xmath963 suppose @xmath945 .",
    "we need to show @xmath950 . by applying the induction hypothesis to the transformation judgments for @xmath208 and @xmath141",
    ", we have @xmath964 and @xmath965 for every @xmath224 .",
    "thus , we have also @xmath966 and @xmath967 .",
    "therefore , we have @xmath950 as required .",
    "[ lem : tr2:fwd - sim - ground - tree ] if @xmath968 , then there exists @xmath31 such that @xmath935 and @xmath969    this follows by induction on the derivation of @xmath968 . since the output of transformation is a tree , the last rule used to derive @xmath968 must be ( ) , ( ) , or ( ) .",
    "the cases for ( ) and ( ) are trivial .",
    "if the last rule is ( ) , we have : @xmath815 with @xmath970 for @xmath918 .",
    "we perform case analysis on @xmath971 and @xmath972 .",
    "* case @xmath973 : in this case , @xmath974 and @xmath975 . for each @xmath918 , by the induction hypothesis there exists @xmath976 such that @xmath977 and @xmath978 .",
    "thus , we have @xmath935 , @xmath979 , and @xmath980 for @xmath981 . * case @xmath982 and @xmath983 for some @xmath918 . in this case , @xmath984 and @xmath975 . by the induction hypothesis",
    ", there exists @xmath976 such that @xmath977 , @xmath985 , and @xmath986 . by lemma  [ lem : tr2:weak - normalization ]",
    ", there exists @xmath987 such that @xmath988 and @xmath989 .",
    "thus , we have @xmath935 , @xmath985 , and @xmath980 for @xmath981 . *",
    "case @xmath990 . in this case ,",
    "@xmath991 and @xmath992 . by lemma  [ lem : tr2:weak - normalization ]",
    ", for each @xmath918 there exists @xmath993 such that @xmath994 and @xmath995 .",
    "thus , we have @xmath935 , @xmath991 , and @xmath996 for @xmath981 .",
    "we are now ready to prove soundness of the transformation .",
    "[ lem : tr2-soundness ] if @xmath261 , then @xmath997 .",
    ". then there exist @xmath999 and @xmath306 such that @xmath1000 and @xmath1001 now @xmath1002 for some @xmath112 , and so @xmath1003 . by ( ) , there exists @xmath9 such that @xmath1004 and @xmath1005 .",
    "hence , by ( ) , we have @xmath1006 . by repeated applications of lemma  [ lem : tr2:fwdsim - right2left ]",
    ", we have @xmath1007 and @xmath968 . by lemma  [ lem : tr2:fwd - sim - ground - tree ] , @xmath992 iff @xmath1008 , and we have @xmath1009 and @xmath1010 for some @xmath31 .",
    "thus , we have @xmath1011 and @xmath1010 as required .",
    "theorem  [ th : tr2-correctness ] the fact that @xmath4 is a tree grammar of order at most @xmath1 follows immediately from lemma  [ lem : tr2-preserves - types ] .",
    "@xmath262 follows immediately from lemmas  [ lem : tr2-completeness ] and [ lem : tr2-soundness ] .",
    "first we give a formal definition of the construction for theorem  [ th : main - converse ] .",
    "let @xmath1012 be an order-@xmath1 tree grammar such that no word in @xmath85 contains @xmath55 .",
    "we define a grammar @xmath46 as : @xmath1013 where @xmath89 , @xmath1014 , and @xmath42 are fresh non - terminals , and @xmath1015 is defined as follows .",
    "@xmath1016    if @xmath2 , then the above @xmath3 is an order-2 grammar .",
    "in this case , any occurrence of @xmath203 in @xmath4 must be fully applied , hence we replace @xmath1017 in the above definition with @xmath1018 and add a fresh non - terminal @xmath1019 and a rule @xmath1020 for each @xmath183 and @xmath9 such that @xmath1021 occurs in the right hand side of some rule of @xmath4 .",
    "we write this modified grammar as @xmath1022 .    for @xmath1023",
    "where @xmath1024 , @xmath1025    by definition we have @xmath1026 , and we can show by induction on @xmath9 that @xmath1027 implies @xmath1028 .    by the above lemma , we can show that @xmath3 is well - defined as a grammar , and clearly @xmath1029 ; thus @xmath3 is an order-@xmath6 grammar if @xmath294 .",
    "when @xmath2 , similarly we can show that @xmath1022 is an order-@xmath54 grammar .",
    "in the rest of this section , we show @xmath84 for @xmath1030 ; note that it is clear that @xmath1031 since the above modification for defining @xmath1022 is just unfolding of the ( unique ) rule for @xmath1014 .",
    "to show the goal , we use a logical relation for cpo semantics ( cf .",
    "e.g. , @xcite and the proof of lemma  [ lem : context ] in appendix  [ sec : app1-basic ] ) .",
    "first , recall from appendix  [ sec : app1-basic ] that we can embed a grammar @xmath3 into a @xmath10@xmath292-calculus , which we write as @xmath1032 , and here we use binary choice operators @xmath1033 to represent the finite nondeterminism ; thus , @xmath1032 is the @xmath10@xmath292-calculus that has the terminals of @xmath3 and @xmath1034 as constants .",
    "we extend the definition of @xmath1015 to @xmath1035 : @xmath1036    for a grammar @xmath3 , let @xmath1037 be the set of all the trees which consist of terminals of @xmath3 , and we define @xmath1038\\!]}_{{\\mathcal{g}}}$ ] as : @xmath1039\\!]}_{\\mathcal{g}}&{:=}(p({{\\mathbf{tr}_{{\\mathcal{g}}}}}),\\subseteq ) \\\\ { [ \\![\\kappa_1\\to\\kappa_2]\\!]}_{\\mathcal{g}}&{:=}{[\\![\\kappa_1]\\!]}_{\\mathcal{g}}{\\to}{[\\![\\kappa_2]\\!]}_{\\mathcal{g}}\\\\ { [ \\![a]\\!]}_{\\mathcal{g}}(l_1)\\cdots(l_n ) & { : = } { \\{a\\,\\pi_1\\,\\cdots\\,\\pi_n \\mid \\pi_i \\in l_i\\ } } \\in p({{\\mathbf{tr}_{{\\mathcal{g } } } } } )    \\qquad ( { \\sigma}(a)=n,\\ l_i \\in p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) ) \\ ] ] where @xmath1040 is the continuous function space from @xmath8 to @xmath1041 . the adequacy theorem , i.e. , @xmath1042\\!]}_{\\mathcal{g}}= { \\{\\pi \\mid t { \\longrightarrow^*}\\pi\\}}$ ] , holds as usual . ( @xmath1042\\!]}_{\\mathcal{g}}\\supseteq { \\{\\pi \\mid t { \\longrightarrow^*}\\pi\\}}$ ] is obtained by showing that @xmath1043 implies @xmath1042\\!]}_{\\mathcal{g}}\\supseteq { [ \\![t']\\!]}_{\\mathcal{g}}$ ] by induction on the derivation of @xmath1043",
    ". the converse immediately follows from the abstraction theorem ( i.e. , @xmath1042\\!]}\\,r_{\\kappa}\\,t$ ] for any @xmath1044 ) of the logical relation @xmath1045 given in the proof of lemma  [ lem : context ] in appendix  [ sec : app1-basic ] ( cf .",
    "* theorem  4.6 ) ) , with a trivial modification for the difference that here we are considering trees up to the equality rather than up to @xmath299 . )",
    "we consider a logical relation @xmath1046 between two models for @xmath1047 .",
    "one model is the model @xmath1038\\!]}_{{\\mathcal{g}}'}$ ] and we define another model @xmath1048\\!]}^{\\circ}}$ ] for @xmath1047 , a model reflecting the translation @xmath1015 .",
    "the interpretation of types is given by : @xmath1049\\!]}^{\\circ}}&{:=}{[\\![{{{\\mathtt{o}}}^{\\circ}}]\\!]}_{{\\mathcal{g } } } = p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) { \\to}p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) \\\\ { { [ \\![\\kappa_1\\to\\kappa_2]\\!]}^{\\circ}}&{:=}{{[\\![\\kappa_1]\\!]}^{\\circ}}{\\to}{{[\\![\\kappa_2]\\!]}^{\\circ}}.\\end{aligned}\\ ] ] for a constant @xmath1050 , the interpretation is given as @xmath1051\\!]}^{\\circ } } { : = } { [ \\![{{c}^{\\circ}}]\\!]}_{{\\mathcal{g}}}$ ] ; specifically , for terminals , @xmath1052\\!]}^{\\circ}}&{:=}{\\mathit{id } } : p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) { \\to}p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) \\\\ { { [ \\![a]\\!]}^{\\circ}}&{:=}(l \\mapsto { \\{a\\,\\pi \\mid \\pi \\in l\\ } } ) : p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) { \\to}p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) \\qquad   ( { \\sigma}'(a)=0,a\\neq { \\mathtt{e } } ) \\\\ { { [ \\![{{\\mathtt{br}}}]\\!]}^{\\circ}}&{:=}(f \\mapsto ( g \\mapsto f \\circ g ) ) : { { [ \\![{\\mathtt{o}}]\\!]}^{\\circ } } { \\to}{{[\\![{\\mathtt{o}}]\\!]}^{\\circ } } { \\to}{{[\\![{\\mathtt{o}}]\\!]}^{\\circ}}. \\ ] ] then , we can easily show that @xmath1053\\!]}_{{\\mathcal{g } } } = { { [ \\![t]\\!]}^{\\circ}}$ ] for any term @xmath9 , by induction on @xmath9 .",
    "the logical relation @xmath1046 is determined by @xmath1054 , which is defined as : @xmath1055\\!]}_{{\\mathcal{g } } ' } \\times { { [ \\![{\\mathtt{o}}]\\!]}^{\\circ } } = p({{\\mathbf{tr}_{{\\mathcal{g } } ' } } } ) \\times ( p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) { \\to}p({{\\mathbf{tr}_{{\\mathcal{g } } } } } ) ) \\\\ & l'\\,{r'}_{\\mathtt{o}}\\,f \\text { if for any \\(l \\in p({{\\mathbf{tr}_{{\\mathcal{g}}}}})\\ ) , } \\\\ & { { \\{{\\textbf{leaves}}(\\pi ) \\mid \\pi\\in l'\\}}{\\uparrow_{{\\mathtt{e } } } } } { \\cdot}{\\{a_1\\cdots a_n \\mid a_1(\\cdots ( a_n\\,{\\mathtt{e}})\\cdots ) \\in l\\ } } \\\\&= { \\{a_1\\cdots a_n \\mid a_1(\\cdots ( a_n\\,{\\mathtt{e}})\\cdots ) \\in f(l)\\}}\\end{aligned}\\ ] ] where @xmath1056 is the concatenation of word languages @xmath8 and @xmath1041 .",
    "if we show the abstraction theorem ( i.e. , @xmath1042\\!]}_{{\\mathcal{g}}'}\\,{r'}_\\kappa\\,{{[\\![t]\\!]}^{\\circ}}$ ] for any closed term @xmath9 ) , then we can show our goal as follows : since @xmath1057\\!]}^{\\circ } } = { [ \\![{{t}^{\\circ}}]\\!]}_{{\\mathcal{g}}}$ ] , @xmath1058\\!]}^{\\circ}}({\\{{\\mathtt{e}}\\ } } ) = { [ \\![{{s'}^{\\circ}}]\\!]}_{{\\mathcal{g } } } ( { [ \\![{\\mathtt{e}}]\\!]}_{{\\mathcal{g } } } )   = { [ \\![s']\\!]}_{{\\mathcal{g } } } ( { [ \\![{\\mathtt{e}}]\\!]}_{{\\mathcal{g } } } )   = { [ \\![s]\\!]}_{{\\mathcal{g } } } $ ] .",
    "now we have @xmath1059\\!]}_{{\\mathcal{g}}'}\\,{r'}_{\\mathtt{o}}\\,{{[\\![s']\\!]}^{\\circ}}$ ] , which means  with @xmath1060 and the adequacy  that @xmath1061 . by the assumption that no word in @xmath85 contains @xmath55",
    ", we have @xmath1062 .",
    "to show the abstraction theorem , we only have to show @xmath1063\\!]}_{{\\mathcal{g}}'}\\,{r'}\\,{{[\\![c]\\!]}^{\\circ}}$ ] for each constant @xmath1064 .",
    "the cases of @xmath55 , @xmath22 , and @xmath1034 are clear . as usual , the case of @xmath292 follows from showing that @xmath1054 is closed under the least upper bound of increasing chains and contains the bottom , which is clear . to show the case of @xmath203 , suppose that @xmath1065 and @xmath1066 ;",
    "then , for @xmath1067 , we have : @xmath1068\\!]}_{{\\mathcal{g}}'}(l'_1)(l'_2)\\}}{\\uparrow_{{\\mathtt{e } } } } } { \\cdot}{\\{a_1\\cdots a_n \\mid a_1(\\cdots ( a_n\\,{\\mathtt{e}})\\cdots ) \\in l\\ } } \\\\",
    "= \\ & { { \\{{\\textbf{leaves}}(\\pi ) \\mid \\pi\\in l'_1\\}}{\\uparrow_{{\\mathtt{e } } } } } { \\cdot}{{\\{{\\textbf{leaves}}(\\pi ) \\mid \\pi\\in l'_2\\}}{\\uparrow_{{\\mathtt{e } } } } } { \\cdot}{\\{a_1\\cdots a_n \\mid a_1(\\cdots ( a_n\\,{\\mathtt{e}})\\cdots ) \\in l\\ } } \\\\",
    "= \\ & { { \\{{\\textbf{leaves}}(\\pi ) \\mid \\pi\\in l'_1\\}}{\\uparrow_{{\\mathtt{e } } } } } { \\cdot}{\\{a_1\\cdots a_n \\mid a_1(\\cdots ( a_n\\,{\\mathtt{e}})\\cdots ) \\in f_2(l)\\ } } \\\\",
    "= \\ & { \\{a_1\\cdots a_n \\mid a_1(\\cdots ( a_n\\,{\\mathtt{e}})\\cdots ) \\in f_1(f_2(l))\\ } }",
    "\\\\ = \\ & { \\{a_1\\cdots a_n \\mid a_1(\\cdots ( a_n\\,{\\mathtt{e}})\\cdots ) \\in { { [ \\![{{\\mathtt{br}}}]\\!]}^{\\circ}}(f_1)(f_2)(l)\\}}.\\end{aligned}\\ ] ]",
    "let @xmath46 be a given word grammar . in this section ,",
    "we treat the non - terminals @xmath8 of @xmath3 differently from the variables @xmath21 .",
    "we first define a transformation of simple types by induction : @xmath1069 note that if @xmath1070 then @xmath1071 . we extend this transformation to simple type environments @xmath24 ; the extended transformation @xmath1072 is parameterized by a simple type @xmath11 : @xmath1073})}^{{\\triangleleft}}_{{\\kappa } } } & { : = } { [ \\,]}\\\\ { { ( { x{\\mathbin{:}}{\\kappa } ' , { \\mathcal{k}}})}^{{\\triangleleft}}_{{\\kappa } } } & { : = } \\begin{cases } { x{\\mathbin{:}}{{{\\kappa}'}^{{\\triangleleft } } } , { { ( { \\mathcal{k}})}^{{\\triangleleft}}_{{\\kappa } } } } & ( { \\kappa } ' \\neq { \\mathtt{o}}\\lor { \\mathtt{order}}{({\\mathcal{k}}\\to { \\kappa } ) } \\le 1 ) \\\\ { x{\\mathbin{:}}{\\mathtt{o}}\\to{\\mathtt{o } } , { { ( { \\mathcal{k}})}^{{\\triangleleft}}_{{\\kappa } } } } & ( { \\kappa } ' = { \\mathtt{o}}\\land { \\mathtt{order}}{({\\mathcal{k}}\\to { \\kappa } ) } > 1 ) \\end{cases } \\\\ { { ( { a{\\mathbin{:}}{\\kappa } ' , { \\mathcal{k}}})}^{{\\triangleleft}}_{{\\kappa } } } & { : = } { a{\\mathbin{:}}{{{\\kappa}'}^{{\\triangleleft } } } , { { ( { \\mathcal{k}})}^{{\\triangleleft}}_{{\\kappa } } } } \\end{aligned}\\ ] ] where @xmath1074 is defined by induction on @xmath24 : @xmath1075}\\to { \\kappa}{:=}{\\kappa}$ ] and @xmath1076 .",
    "let @xmath1077 be a fresh non - terminal of type @xmath172 .",
    "we define a transformation of derived terms in context ( so that the next lemma holds ) : @xmath1078 where suppose that we have @xmath1079 and @xmath1080            in the case where @xmath1087 and we have @xmath1079 , by the induction hypotheses , the types of @xmath1088 and @xmath1089 are @xmath1090 and @xmath1091 , respectively . since @xmath1092 @xmath1093 has type @xmath1094 .",
    "the grammar @xmath4 is well - defined : for any rule @xmath1095 in @xmath37 with @xmath1096 by the above lemma , we have @xmath1097 and we can show that @xmath1098 by induction on the length @xmath504 . hence , the new rule in @xmath1099 is well - typed ."
  ],
  "abstract_text": [
    "<S> higher - order grammars are an extension of regular and context - free grammars , where non - terminals may take parameters . they have been extensively studied in 1980 s , and </S>",
    "<S> restudied recently in the context of model checking and program verification . </S>",
    "<S> we show that the class of unsafe order-(@xmath0 ) word languages coincides with the class of frontier languages of unsafe order-@xmath1 tree languages . </S>",
    "<S> we use intersection types for transforming an order-(@xmath0 ) word grammar to a corresponding order-@xmath1 tree grammar . </S>",
    "<S> the result has been proved for safe languages by damm in 1982 , but it has been open for unsafe languages , to our knowledge . various known results on higher - order grammars can be obtained as almost immediate corollaries of our result .    version : </S>"
  ]
}