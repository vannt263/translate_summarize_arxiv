{
  "article_text": [
    "recent high precision experiments require , on the side of the theory , high - precision calculations resulting in the evaluation of higher loop diagrams in the standard model ( sm ) . for specific processes thousands of multiloop feynman diagrams do contribute , and it turns out to be impossible to perform these calculations by hand .",
    "this makes the request for automation a high - priority task .",
    "several different packages have been developed with different areas of applicability ( see a good review @xcite ) . for example ,",
    "feynarts / feyncalc @xcite are mathematica packages convenient for various aspects of the calculation of radiative corrections in the sm .",
    "there are several form packages for evaluating multiloop diagrams , like mincer @xcite , and a package @xcite for the calculation of 3-loop bubble integrals with one non - zero mass .",
    "other packages for automation are grace @xcite and comphep @xcite , which partially perform full calculations , from the process definition to the cross - section values",
    ".    a somewhat different approach is pursued by xloops @xcite .",
    "a graphical user interface makes xloops an ` easy - to - handle ' program package , but is mainly aimed to the evaluation of single diagrams . to deal with thousands of diagrams , it is necessary to use special techniques like databases and special controlling programs . in @xcite for evaluating more than 11000 diagrams the special database - like program minos was developed .",
    "it calls the relevant form programs , waits until they finished , picks up their results and repeats the process without any human interference .",
    "the package geficom @xcite , developed for computation of higher order processes involving a large number of diagrams , is based on cooperative usage of several software tools such as mathematica , form , fortran , etc .",
    "it seems impossible to develop an universal package , which will be efficient for all tasks .",
    "it appears absolutely necessary that various groups produce their own solutions of handling the problem of automation : various ways will be of different efficiency , have different domains of applicability , and last but not least , should eventually allow for completely independent checks of the final results .",
    "this point of view motivated us to seek our own way of automatic evaluation of feynman diagrams .",
    "our first step was dedicated to the automation of the muons two - loop anomalous magnetic moment ( amm ) @xmath0 . for this purpose",
    "the package tlamm was developed @xcite .",
    "the algorithm is implemented as a form - based program package . for generating and automatically evaluating any number of two - loop self - energy diagrams ,",
    "a special c - program has been written .",
    "this program creates the initial form - expression for every diagram generated by qgraf @xcite , executes the corresponding subroutines and sums up the various contributions . in the sm 1832 two - loop diagrams",
    "contribute in this case .",
    "the calculation of the bare diagrams is finished .",
    "our aim is to create some universal software tool for piloting the process of generating the source code in multi - loop order for analytical or numerical evaluations and to keep the control of the process in general .",
    "based on this instrument , we can attempt to build a complete package performing the computation of any given process in the framework of any concrete model .",
    "for the project called diana ( diagram analyser ) for the evaluation of feynman diagrams we have elaborated a special text manipulating language ( tm ) .",
    "the tm language is a very simple tex - like language for creating source code and organizing the interactive dialog .",
    "the program reads qgraf output . for each diagram it performs the tm - program , producing input for further evaluation of the diagram .",
    "thus the program :    reads qgraf output and for each diagram it :    1 .   determines the topology , looking for it in the table of all known topologies and distributes momenta .",
    "if we do not yet know all needed topologies , we may use the program to determine missing topologies that occur in the process .",
    "2 .   creates an internal representation of the diagram in terms of vertices and propagators .",
    "3 .   executes the tm - program to insert explicit expressions for the vertices , propagators etc .",
    "the tm - program produces input text for form ( or some other language ) , and executes the latter ( optionally ) .    using the tm language",
    ", advanced users can develop further extensions , e.g. including fortran , to create a postscript file for the picture of the current diagram , etc .",
    "+    the program operates as follows : first of all , it reads its configuration file , which may be produced manually or by diana as well .",
    "this file contains :    1 .",
    "the information about various settings ( file names , numbers of external particles , definition of key words , etc . ) 2 .",
    "momenta distribution for each topology .",
    "3 .   description of the model ( i.e. , all particles , propagators and vertices ) .",
    "tm - program .",
    "the tm - program is part of the configuration file .",
    "it starts with the directive    .... \\begin translate ....    then the program starts to read qgraf output . for each diagram it determines",
    "the topology , assigns indices and creates the textual representation of the diagram corresponding to the feynman integrand .",
    "all defined data ( masses of particles , momenta on each lines , etc . ) are stored in internal tables , and may be called by tm - program operators . at this point diana performs the tm - program .",
    "after that it starts to work with the next diagram .    when all diagrams are processed , the program may perform the tm - program a last time ( optionally ) .",
    "this may be used to do some final operations like summing up the results .",
    "use of the tm language makes diana very flexible .",
    "it is easy to work out various algorithms of diagram evaluation by specifying settings in the configuration file or even by a tm program .",
    "the typical flowchart may look like in fig .",
    "[ dianam ] .",
    "there is a possibility to use diana to perform the tm - program only , without reading qgraf output .",
    "if one specifies in the configuration file    .... only interpret ....    then diana will not try to read qgraf output , but immediately enters the tm - program .",
    "diana contains a powerful preprocessor .",
    "the user can create macros to hide complicated constructions .",
    "similar as latex provides the possibility for non - specialists to typeset high - quality texts using the tex language , these macros permit diana to work at very high level .",
    "the user can specify the model and the process , and diana will generate all necessary files .",
    "topologies are represented in terms of ordered pairs of numbers like ( fromvertex , tovertex ) ( see fig .",
    "[ topol1 ] ) .",
    "all external legs have negative numbers .",
    "these are supposed to begin with -1 .",
    "first one attaches all the numbers for the ingoing particles , and then for the outgoing ones .",
    "external legs must be connected with vertices of smallest possible identifying number .",
    "the number of an internal line corresponds to its position in the chain of pairs and the direction from the first to the second number in the pair : @xmath1 knowing thus the topology we can assign momenta . their distribution according to fig .",
    "[ topol1 ] , e.g. , is added like    .... topology a = ( -2,2)(-1,1)(5,1)(1,3)(3,4)(4,2)(2,5)(5,6)(3,6)(4,6 ) :    p1,p2,p3,p4,p5,p6,p7,p8 ; ....    this fixes directions and values of all momenta on internal lines .",
    "external lines must be known from the process definition . by convention",
    "the external lines must start with the highest negative number .",
    "all topologies have to be described in the configuration file .",
    "diana stores topologies in an internal table in some standard form .",
    "after reading a new diagram diana defines its topology , reduces the topology to the standard form and searches for the topology in the table . if diana fails to find the topology , it will not produce the feynman integrand for the diagram .",
    "similar to the tex language , all lines without special escape - characters ( `` @xmath2 '' ) are simply typed to the output file .",
    "so , to type `` hello , world ! '' in the file `` hello '' we may write down the following program :    .... \\program \\setout(hello ) hello , world ! ....",
    "the asterisk in the beginning of line is a comment :    .... * this is the comment ! ....    each word , the first character of which is the escape character , will be considered as a command .",
    "this feature makes this language very easy - to - use . in appendix",
    "a there is an example of a simple tm - program and the result of its performance .",
    "diana s preprocessor is run on the tm program before actual compilation .",
    "it permits the user to do textual substitutions ( with parameters ) , to perform conditional compilation , etc .",
    "for example , the following preprocessor directive    ....",
    "\\def(macroname ) . .",
    "\\enddef ....    sets the macrodefinition .",
    "after this directive you can just write    .... \\macroname ( ) ....    to invoke the macro . you can use macros with arguments :    .... \\macroname(a , b , c ) ....    in the macro body the arguments are available by the directive ` \\#(n ) ` , where `` n '' is the position of the argument . the argument `` 0 '' is the macro name , all extra arguments are empty strings .",
    "example :    .... only interpret \\begin translate \\def(example ) 0=\\#(0),1=\\#(1),2=\\#(2),3=\\#(3)\\enddef \\program \\offblanklines \\setout ( ) \\example(a , b ) \\end translate ....    the result is :    ....   0=example,1=a,2=b,3= ....    using macros we are able to create a high level macrolanguage similar to latex , which is the set of macrodefinitions under tex .",
    "the basic idea is again similar to latex , namely the use of _ styles_. instead of complicated tm programming one can use proper styles .",
    "the style file containing all macrodefinitions is just included in the beginning of the tm program .",
    "we have several such styles oriented to the use of form .",
    "the style `` create.tml '' has the purpose to create the tm program .",
    "the user has to prepare a file `` process.cnf '' , which contains the model and process specifications . reading this file",
    ", diana will generate all necessary other files .",
    "a typical example of such a file is the following .",
    ".... set _ processname = \" zbb \" set _",
    "qgrafname = \" qgraf \" set _",
    "syspath = \" /home",
    "/ u.ser / diana / tml/ \" system path = \" /home / u.ser / diana / tml/ \" only interpret    \\openlanguage(create.tml ) \\begin(program )    \\begin(model , gwsmassless.model ) \\end(model )    \\begin(process ) ingoing z(mu;p1 ) ; outgoing b(;k1),b(;k2 ) ; loops = 2 ; \\end(process )    \\begin(qgrafoptions ) options = onepi , nosnail ; \\end(qgrafoptions )    \\begin(tmlprogram , form.prg ) \\end(tmlprogram )    \\indices(mu , mu1,mu2,mu3,mu4,mu5,mu6,mu7 , mu8,mu9,mu10,mu11,mu12,mu13,mu14,mu15,mu16,mu17,mu18,mu19,mu20,mu21,mu22,mu23 ) \\vectors(p1,p2,p3,p4,p5,p6,p , q , q1,q2,k1,k2 )    \\end(program ) ....    this file contains all necessary information to create files for diana to proceed the process @xmath3 in the framework of the sm . in the following we explain details of the above file .",
    "directives of the type ` set var = \" val \" ` are used to set predefined preprocessor variables .",
    "thus , the directive    .... set _ processname = \" zbb \" ....    just defines the name of the process .",
    "it will be used as filename extension for all created files .    ....",
    "set _ qgrafname = \" qgraf \" ....    defines the command to invoke qgraf .",
    "the directives    .... set _ syspath = \" /home / u.ser / diana / tml/ \" system path = \" /home / u.ser / diana / tml/ \" ....    are used to define the path to files containing tm macros and subroutines .",
    "the value of the preprocessor variable ` _ syspath ` will be used by diana to define the line    .... system path = \" /home",
    "/ u.ser / diana / tml/ \" ....    in the created file `` settings.zbb '' . in principle in `` process.cnf '' and `` settings.zbb '' these two paths may be different .",
    "the directive    .... only interpret ....    tells diana not to read qgraf output but just to perform the tm program .",
    "the directive :    .... \\openlanguage(create.tml ) ....    is equivalent to the two directives    .... \\begin translate \\include(create.tml ) ....    the first one starts the tm language and the file ` create.tml ` contains all macro definitions and subroutines .",
    "in particular , it contains the definition of the macros ` \\begin ( ) ` and ` \\end ( ) ` .",
    "these macros form an environment depending on the first argument of the macro ` \\begin ( ) ` .",
    "the body of the tm program is supposed to be placed between    ....",
    "\\begin(program ) . .",
    "\\end(program ) ....    text after ` \\end(program ) ` will be ignored .    the environment    ....",
    "\\begin(model , gwsmassless.model ) \\end(model ) ....    defines the model description . instead of explicit definition , in this example the file `` gwsmassless.model ''",
    "this is a file containing a simplified version of the sm .",
    "it should be placed in the directory /home",
    "/ u.ser / diana / tml/ in order that diana can find it in `` process.cnf '' .",
    "the process definition is clear from    ....",
    "\\begin(process ) ingoing z(mu;p1 ) ; outgoing b(;k1),b(;k2 ) ; loops = 2 ; \\end(process ) ....    the following environment defines the options passed to qgraf @xcite :    .... \\begin(qgrafoptions ) options = onepi , nosnail ; \\end(qgrafoptions ) ....    the tm program for evaluating feynman diagrams must be placed in the environment    .... \\begin(tmlprogram ) \\end(tmlprogram ) ....    instead one may specify the file containing the tm program as second argument :    .... \\begin(tmlprogram , form.prg ) ....    here `` form.prg '' is the name of the file containing the standard tm program for evaluation of feynman diagrams by means of form .",
    "the macros ` \\indices ( ) ` and ` \\vectors ( ) ` specify used indices and vectors .",
    "suppose the executable files `` diana '' and `` qgraf '' are available from the system path and the files `` create.tml '' , `` gwsmassless.model '' , `` form.prg '' and `` process.cnf '' are situated in the directory `` /home",
    "/ u.ser / diana / tml/ '' or in the current directory .",
    "the user starts diana by means of the command    .... diana -c process.cnf ....    diana then generates several temporary files , invokes qgraf , defines all topologies of the process and distributes momenta as follows : the first line in each topology will carry momentum p1 , the second p2 , etc .",
    "three new files appear in the current directory : , `` qlist.zbb '' and `` settings.zbb '' .",
    "the file `` config.zbb '' contains the tm program for the evaluation of the feynman diagrams of the specific process under consideration .",
    "`` settings.zbb '' contains various optional settings , topologies and momenta description , the model and the process definition .",
    "it can be edited e.g. for the purpose of introducing proper integration momenta for the various topologies by replacing the pi s .",
    "the file `` qlist.zbb '' is the qgraf output file . to start the calculation of the feynman diagrams the user finally enters the command    .... diana -c config.zbb",
    "....    for the above example",
    "@xmath3 the topologies in the file `` settings.zbb '' are :    .... topology top1_=     ( -3,3)(-2,2)(-1,1)(1,2)(1,3)(1,4)(2,4)(3,4 ) :        p1,p2,p3,p4,p5 ; topology top2_=     ( -3,3)(-2,2)(-1,1)(1,3)(1,4)(1,4)(2,3)(2,4 ) :        p1,p2,p3,p4,p5 ; topology top3_=     ( -3,3)(-2,2)(-1,1)(1,2)(1,4)(1,4)(2,3)(3,4 ) :        p1,p2,p3,p4,p5 ; topology top4_=     ( -3,3)(-2,2)(-1,1)(1,4)(1,4)(2,3)(2,4)(3,4 ) :        p1,p2,p3,p4,p5 ; topology top5_=     ( -3,3)(-2,2)(-1,1)(1,4)(1,5)(2,4)(2,5)(3,4)(3,5 ) :        p1,p2,p3,p4,p5,p6 ; topology top6_=     ( -3,3)(-2,2)(-1,1)(1,2)(1,4)(2,5)(3,4)(3,5)(4,5 ) :        p1,p2,p3,p4,p5,p6 ; topology top7_=     ( -3,3)(-2,2)(-1,1)(1,3)(1,4)(2,4)(2,5)(3,5)(4,5 ) :        p1,p2,p3,p4,p5,p6 ; topology top8_=     ( -3,3)(-2,2)(-1,1)(1,4)(1,5)(2,3)(2,4)(3,5)(4,5 ) :        p1,p2,p3,p4,p5,p6 ; topology top9_=     ( -3,3)(-2,2)(-1,1)(1,2)(1,3)(2,4)(3,5)(4,5)(4,5 ) :        p1,p2,p3,p4,p5,p6 ; topology top10_=     ( -3,3)(-2,2)(-1,1)(1,2)(1,4)(2,3)(3,5)(4,5)(4,5 ) :        p1,p2,p3,p4,p5,p6 ; topology top11_=     ( -3,3)(-2,2)(-1,1)(1,3)(1,4)(2,3)(2,5)(4,5)(4,5 ) :        p1,p2,p3,p4,p5,p6 ; ....    the user must edit this file to set the desired integration momenta and the internal numeration of lines according to the rules described in sect .",
    "[ topologies ] . in the near future the pictorial representation of the topologies will be implemented .",
    "as next we give a detailed description of the file `` config.zbb '' .",
    "it contains the directive to include the file `` settings.zbb '' , several settings for various options and a skeleton of the form program in terms of the tm language .",
    "the following is a listing of the file .",
    "the whole tm - program is divided into different `` sections '' .",
    "each section will be performed only under proper conditions .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .... * this file is automatically generated by diana for the process zbb .",
    "\\include(settings.zbb )    * remove the following to avoid the generation of the protocol file : log file = log.zbb     * remove the following line to avoid debug information : debug on    extra call    \\openlanguage(specmode.tml ) \\begin(program , routines.rtn )    \\section(regular )    \\begin(initialization )    \\export(callform,\\ask(\\(call",
    "form?(y / n ) ) ) ) \\end(initialization )    \\begin(output,\\askfilename ( ) )     * * * * d\\counter ( )     * * * * ( diagram \\currentdiagramnumber ( ) )     \\blankline ( )     * set here your defines",
    "!     \\begin(foreach , i,1,\\numberofinternallines ( ) )        # define mm\\i ( ) \" \\mass(\\i ( ) ) \"        \\blankline ( )     \\end(foreach )     # define line \" \\numberofinternallines ( ) \"     # define fermionline \" \\maxfcount ( ) \"     # define topology \" \\topologyid ( ) \"     \\blankline ( )     functions \\functions ( ) ;     commuting \\commuting ( ) ;     l rq = \\integrand ( ) ;     \\blankline ( )     * here should be your form program !",
    "drop rq ;     g dia\\counter()=rq ;     .store     save dia\\counter().sto ;     .end",
    "\\end(output ) \\begin(special,\"\\import(callform)\"eq\"y \" )     \\execute(\\(form -l ) ! . ! ) \\end(special )    \\section(epilog )       \\begin(output )        # do j = 1,\\counter ( )          load dia'j'.sto ;          .store        # enddo        g rq =        # do j = 1,\\counter ( )           + dia'j '        # enddo        ;        .sort        print ;        .end",
    "\\end(output )       \\begin(special,\"\\import(callform)\"eq\"y \" )        \\execute(\\(form -l ) ! . ! )     \\end(special )    \\end(program ) .... _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the setting ` log file = log.zbb ` induces the creation of the protocol file `` log.zbb '' .",
    "if the user sets ` debug on ` , diana will produce a detailed record of the translation process .",
    "some information necessary for possible run - time diagnostics will be stored as well .",
    "the setting ` extra call ` forces diana to perform the tm - program once again after all diagrams are processed . in this case",
    "only the section ` epilog ` will be called ( see below ) .    in the next command",
    "the tm - program uses the macro - style `` specmode.tml '' :    .... \\openlanguage(specmode.tml ) ....    this style defines the `` sections '' mechanism : a tm - program may consist of several `` sections '' , each of them being performed only under certain conditions .",
    "so the generic structure of the tm - program looks like follows :    .... \\begin(program ) \\section(sectionname )     ( content ... ) . .",
    "\\end(program ) ....    the main section is `",
    "\\section(regular ) ` .",
    "it is performed to create form input for each diagram .    the section    ....",
    "\\section(epilog ) ....    will be performed during `` extra call '' after all diagrams have been processed . in the above example",
    "this section is used to sum up the final results .",
    "the whole tm - program is put into the environment    ....",
    "\\begin(program , routines.rtn ) \\end(program ) ....    it contains the argument `` routines.rtn '' .",
    "this is the name of a file containing various tm - functions and macros , which are loaded in this manner , e.g. + ` \\functions ( ) `  outputs a comma - separated list of all non - commuting functions occuring in the current diagram and + ` \\commuting ( ) `  outputs the list of all commuting functions .    in our example",
    "the global variable `` callform '' is defined by means of the function ` \\ask ( ) ` .",
    "this function outputs the argument to the screen waits for the user to reply `` y '' or `` n '' and returns `` y '' or `` n '' , respectively , i.e. `` callform '' then takes the value `` y '' or `` n '' .",
    "this action is placed in the environment    ....",
    "\\begin(initialization )   . . .",
    "\\end(initialization ) ....    and thus is performed only once .",
    "the section `` ` regular ` '' contains the skeleton of the form program .",
    "output , i.e. the form input , inside the environment    .... \\begin(output , filename )   . .",
    "\\end(output ) ....    is directed into the file `` filename '' . in the above example , instead of an explicit file name",
    ", we use the macro ` \\askfilename ( ) ` defined in the style file ` specmode.tml ` .",
    "this macro asks the filename from the user . for each diagram",
    "a filename of the type```d.frm ` '' will be expanded to `` ` d#.frm ` '' , where ` # ` is the number of the current diagram .",
    "thus , for diagram number 15 the file `` ` d15.frm ` '' will be created .",
    "note that this expansion is performed by the environment and not by the macro ` \\askfilename ( ) ` .",
    "the macro ` \\askfilename ( ) ` asks the file name only once in the case when the file name is not defined yet .",
    "it is impossible to change the file name once entered .    the macro ` \\counter ( ) ` counts the processed diagrams .",
    "it can differ from the diagram number ( produced by qgraf for the set of all diagrams ) returned by the operator ` \\currentdiagramnumber ( ) ` .",
    "the operator ` \\blankline ( ) ` returns a blank line .",
    "it must be used to obtain a blank line in the produced output because all blank lines in the tm - program are suppressed by default .",
    "there is the environment ` foreach ` providing a `` cycle with parameter '' .",
    "the content of the environment    ....",
    "\\begin(foreach , i,1,10 ) \\end(foreach ) ....    will be repeated 10 times .",
    "each time the macro ` \\i ( ) ` expands to the digit counter , i.e 1,2, ... 10 .    the built - in operator ` \\numberofinternallines()`returns for each diagram the number of internal lines ; the built - in operator ` \\maxfcount ( ) ` returns the number of connected fermion lines in the current diagram .    the macro ` \\integrand ( ) `",
    "is expanded in a sequence of tm - operators providing the feynman integrand for the current diagram .",
    "there is the environment ` special ` .",
    "it has the form    .... \\begin(special,<condition > )   . .",
    "\\end(special ) ....    the content of this environment will be performed only if ` < condition > ` evaluates to ` true ` .    in the folowing example this environment",
    "is used to call form :    .... \\begin(special,\"\\import(callform)\"eq\"y \" )     \\execute(\\(form -l ) ! . ! ) \\end(special ) ....    the macro ` \\execute ( ) ` expands the symbols ` ! . !",
    "` to the full file name ( e.g. , ` d15.frm ` ) . the expression ` ! .",
    "` is expanded to the file name without extension , and ` . !",
    "` is expanded to the extension .",
    "the macro ` \\execute ( ) ` calls the built - in tm - operator ` \\system ( ) ` to execute form . thus ,",
    "for the diagram number 15 , e.g. , the following command will be fulfilled :    .... form -l d15.frm ....    here we assume that the user has entered the filename `` d.frm '' .",
    "the section `` ` epilog ` '' uses the environment `` ` output ` '' without a second argument .",
    "the second argument is unnecessary because the file name is already defined .    in the `` extracall ''",
    "the environment `` ` output ` '' uses the filename exactly the user has specified it , answering the question from the macro ` \\askfilename ( ) ` , i.e. `` d.frm '' in this case .",
    "diana has many command line options . in particular",
    ", the user can specify the numbers of the diagrams to be evaluated .",
    "the command    .... diana -c config.zbb -b 451 -e 453 ....    tells diana to process diagrams number 451 , 452 and 453 . after executing this command four new files",
    "appear in the current directory .",
    "if the user has entered the file name `` d.frm '' these files are : `` d451.frm '' , `` d452.frm '' , `` d453.frm '' and `` d.frm '' .",
    "the content of the file `` d.frm '' looks like follows :    ....        # do j = 1,3          load dia'j'.sto ;          .store        # enddo        g rq =        # do j = 1,3           + dia'j '        # enddo        ;        .sort        print ;        .end   ....    it can be used by form to sum up the calculated diagrams .",
    "the file `` d452.frm '' looks like follows :    .... * * * * d2 * * * * ( diagram 452 )    * set here your defines !",
    "# define mm1 \" mmt \"    # define mm2 \" mmt \"    # define mm3 \" 0 \"    # define mm4 \" 0 \"    # define mm5 \" 0 \"    # define mm6 \" mmt \"    # define line \" 6 \" # define fermionline \" 2 \" # define topology \" top8 _ \"     functions f , ff ; commuting vv ; l rq =         ( -1)*f(2,1,mu1,1,0,1)*(-i_)*em*qd*ff(3,1,-p3,0)*i _ *         f(3,1,mu3,1,0,1)*(-i_)*em*qd*f(1,2,mu , gvu ,-",
    "gau,1)*(+i_)*em/2/s / c *         ff(1,2,-p1,mt)*i_*f(4,2,mu2,1,0,1)*(-i_)*em*qu*ff(6,2,-p6,mt)*i _ *         f(5,2,mu4,1,0,1)*(-i_)*em*qu*ff(2,2,+p2,mt)*i _ *         vv(4,mu1,mu2,+p4,0)*i_*vv(5,mu3,mu4,+p5,0)*i _ ;    * here should be your form program !",
    ".end ....    from the beginning of this file we can see that the macro ` \\counter ( ) ` produces the order number of the processed diagram , i.e. 2 , while the built - in tm operator ` \\currentdiagramnumber ( ) ` produces the number of the current diagram according to the qgraf file `` qlist.zbb '' i.e. 452 .    .... . .",
    "* -- # [ d452 : *       -1      * vx(b(-2),b(1),a(2 ) )      * vx(b(1),b(-4),a(3 ) )      * vx(t(5),t(4),z(-1 ) )      * vx(t(4),t(6),a(2 ) )      * vx(t(6),t(5),a(3 ) ) * * -- # ] d452 :   . . .",
    "-47 mm    in fig .",
    "[ d452 ] the qgraf output for the diagram number 452 is shown together with the corresponding graph .",
    "we can see that in this case there are two fermion lines , one corresponding to the external @xmath4 , while the second appears as closed fermion loop , the @xmath5 quark triangle .",
    "that is why the ` # define ` `` fermionline '' is equal to `` 2 '' .    in order to understand the feynman integrand structure in the above example we consider the simplified sm in use , i.e. the `` gwsmassless.model '' . in our example",
    "is contained in the file `` settings.zbb '' .",
    "the following notation is used : + em  electromagnetic coupling ( @xmath6 ) ; + s  @xmath7 ; + c  @xmath8 ; + mt , mw , mz , mh ",
    "masses ; + mmt , mmw , mmz , mmh ",
    "masses squared ; + qe , qu , qd  electric charges in units of the proton charge , i.e. -1 , 1/3 , -2/3 ; + gae , ganu , gau , gad  axial couplings ; + gve , gvnu , gvu , gvd  vector couplings ;    we have two ( c)functions for propagators : ff and vv .",
    "+ vector propagator : + vv (    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 1 .",
    "number of line + 2 .",
    "index of the first particle + 3 .",
    "index of the second particle + 4 .",
    "type ( 0  photon , 1  z , 2  w , 3gluon ) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    ) + fermion propagator : + ff (    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 1 .",
    "number of line + 2 .",
    "fermion line number + 3 .",
    "mass _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    ) + for vertices we have one commuting function v and one function f.    * the first argument always is the number of the vertex . *",
    "the last argument shows the type of the vertex : 0  scalar , 1  vector , 2  tensor , 3  vvv , 4  vvvv * the function f carries as second argument the fermion line number .",
    "for example , the fermion - vector - fermion vertex is : + f (    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 1 .",
    "number of line + 2 .  fermion line number + 3 .",
    "index + 4 .",
    "gv ( vector coupling ) + 5 .",
    "ga ( axial coupling ) + 6 .",
    "1 ( the type of vertex _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    )    note that the `` gwsmassless.model '' assumes a zero b quark mass ( see ` # define mm3 \" 0 \" ` ) .",
    "higher order loop calculations and/or multileg ones in one - loop order in the sm of electroweak interactions require the calculation of many complicated feynman diagrams , which is due to the large particle spectrum of the model .",
    "the number of diagrams can exeed many thousands .",
    "therefore the evaluation of such large number of diagrams needs to be automated in almost all respects .",
    "first of all an automation of the diagram generation is needed . since form , in our opinion ,",
    "is the most suitable language for such kind of calculations , we found it of urgent need to write a program for this purpose which directly produces `` form input '' , i.e. produces an algebraic representation of feynman diagrams in terms of their momentum representation , written in form format .",
    "this is what the presented program diana is able to do at present and we believe it will have wide applications . for an application of diana for the process @xmath9 see ( @xcite ) .",
    "* acknowledgments * we are grateful to m.  kalmykov and o.  veretin for helpful discussions .",
    "m.t was supported by bundesministerium fr forschung und technologie under ph/05 - 7bi92p 9 . and in part by rfbr @xmath1098 - 02 - 16923 .",
    "in this appendix we consider a `` pure '' tm - program _ without _ macrocoding .",
    "this should help to understand some basis of the tm language .        .... \\program \\setout(d\\currentdiagramnumber().frm ) # define dia \" \\currentdiagramnumber ( ) \" # define type \" \\type ( ) \" # define color \" \\color ( )",
    "\" # define lines \" \\numberofinternallines ( ) \" \\masses ( ) # include def.h l   r=\\integrand ( ) ; # call feynmanrules { } # call projection { } # call reducing{'type ' } # call table{'type ' } # call colorfactor{'color ' } .sort g dia'dia ' = r ; drop r ; .store save dia'dia'.sto ; .end \\setout(null ) \\system(\\(form -l ) d\\currentdiagramnumber().frm ) ....      only one type of data exists in the tm language .",
    "this is a string .",
    "all operators and functions return only one text string .",
    "they may have one or more arguments , or may have no argument at all .",
    "arguments are separated by commas .",
    "number of arguments is fixed for each operator or function .",
    "the default value returned by any function is an empty string .",
    "the following operators are built - in tm operators : + ` \\numberofinternallines ( ) `  returns the number of internal lines .",
    "+ ` \\currentdiagramnumber ( ) `  returns the order number of current diagram .",
    "+ ` \\setout(filename ) `  redirects output to the file `` filename '' .",
    "there is the special file `` null '' ; output redirected to this file never appears .",
    "if an empty string is used as argument of this operator , the output will appear at the terminal .",
    "the above operator always returns an empty string .",
    "+ ` \\system(cmd ) `  calls the operating system to perform the command `` cmd '' .",
    "it returns some integer number for the system status of this command . +",
    "an argument of any operator may contains an arbitrary number of other operators .",
    "all spaces in the operator arguments are suppressed .",
    "there is the special `` quotating operator '' without name , it just returns its argument without any change : ` \\(any text ) ` returns the string `` ` any text ` '' . in the above example",
    "it is used in the argument of the operator ` \\system ( ) ` to keep spaces .",
    "there are several built - in operators for manipulating integer numbers . in the above example of the function",
    "` \\masses ( ) ` the operator ` \\inc(i,1)`increments value of ` i ` by ` 1 ` and returns the new value . the operator ` \\numcmp(a , b ) ` returns `` ` < ` '' , `` ` > ` '' or `` ` = ` '' , depending on the numerical values of ` a ` and ` b `",
    ".    variables defined by the operator ` \\let ( ) ` are local w.r.t .",
    "tm - functions .",
    "the user can define global variables by means the operator ` \\export(var , val ) ` .",
    "global variables exist during processing all diagrams .",
    "they can be obtained by the operator ` \\import(val ) ` .    unlike built - in operators",
    ", the user - defined functions can produce some output to the current output file .",
    "the function ` \\masses ( ) ` , e.g. , returns an empty string , but it produces several lines placing them into the output file .",
    "that is why we use derictives ` \\- ` and ` \\+ ` : the former just suppresses any output while the latter again permits output .",
    "there are several kinds of `` controlling constructions '' .",
    "they are used to change the stream of the control .",
    "these are the well - known `` if '' , `` do '' , etc . in the function ` \\masses ( ) ` you can see how the post - condition cycle is used .    this tm - program will generate the form input for each diagram .",
    "for example , the corresponding part of the form program generated for diagram number 15 will be placed into the file `` d15.frm '' and looks like follows :    .... # define dia \" 15 \" # define type \" 4 \" # define color \" 3 \" # define lines \" 4 \" # define m1 \" mmh \" # define m2 \" mmw \" # define m3 \" mmw \" # define m4 \" mmh \" # include def.h l   r=         1*v(1,mu1,mu,2)*(-i_)*em^2/2/s*v(2,0)*(-i_)*1/4*em^2/s^2*mmh / mmw *         v(3,mu2,+q4-(+q3),1)*(-i_)*em/2/s*ss(1,0)*i_*vv(2,mu1,mu2,+q2,2)*i _ *         ss(3,2)*i_*ss(4,0)*i _ ; # call feynmanrules { } # call projection { } # call reducing{'type ' } # call table{'type ' } # call colorfactor{'color ' } .sort drop r ; g dia'dia ' = r ; .store save dia'dia'.sto ; .end ....            99 r.  harlander and m.  steinhauser , ttp98 - 41 , butp-98/28 , hep - ph/9812357",
    ". j.  kblbeck , m.  bhm and a.  denner , comp .",
    "phys . comm .",
    "60 ( 1990 ) 165 ;  r.  mertig , m.  bhm and a.  denner , comp .",
    "64 ( 1991 ) 345 .",
    "larin , f.v .",
    "tkachov , j.a.m .",
    "vermaseren , nikhef - h/91 - 18 .",
    "avdeev , comp .",
    "* 98 * ( 1996 ) 15 .",
    "t.  ishikawa _ et al _ , minami - taeya group `` grace manual '' , kek-92 - 19 , 1993 .",
    "boos _ et al _ , snutp 94 - 116 ( 1994 ) ; ( hep - ph/9503280 ) . l.  brcher _ et al _ , nucl.instrum .",
    "* a389 * ( 1997 ) 323 ;  a.  frink , j.g .",
    "krner and j.b .",
    "tausk , ( hep - ph/9709490 ) .",
    "t.  van ritbergen et al . , int . j. mod",
    ". phys . * c6 * ( 1995 ) 513 . m.  steinhauser , butp-98/26 , hep - ph/9811342 . l.v .",
    "avdeev , j.  fleischer , m.  yu .  kalmykov , m.  tentyukov , nucl.instrum .",
    "meth . a 389 ( 1997 ) 343 ; _ towards automatic analytic evaluation of diagrams with masses _ , comp.phys.comm . , ( hep - ph/9710222 ) ; l.v .",
    "avdeev , m.yu .",
    "kalmykov , nucl .",
    "b502 * ( 1997 ) 419 .",
    "p.  nogueira , j. comput .",
    "* 105 * ( 1993 ) , 279 .",
    "j.  fleischer , f.  jegerlehner , m.  tentyukov and o.l .",
    "veretin , hep - ph/9904256 j.  fleischer , m.yu .",
    "kalmykov and o.l .",
    "veretin , phys . lett .",
    "* b427 * ( 1998 ) 141 ; j.  fleischer , a.v .",
    "kotikov and o.l .",
    "veretin , hep - ph/9808242 , to be published in nucl",
    ". phys . * b*."
  ],
  "abstract_text": [
    "<S> a c - program diana ( diagram analyser ) for the automatic feynman diagram evaluation is presented . </S>",
    "<S> it consists of two parts : the analyzer of diagrams and the interpreter of a special text manipulating language . </S>",
    "<S> this language is used to create a source code for analytical or numerical evaluations and to keep the control of the process in general .    </S>",
    "<S> -2.0 cm -2.0 cm    * a feynman diagram analyser diana * + m.  tentyukov , j.  fleischer + fakultt fr physik , universitt bielefeld + d-33615 bielefeld , germany . </S>"
  ]
}