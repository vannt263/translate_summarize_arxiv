{
  "article_text": [
    "for any missing notation or reference let us refer to @xcite . for a graph @xmath7 ,",
    "let @xmath17 ( @xmath18 , respectively ) denote its vertex set ( edge set , respectively ) .",
    "for a subset @xmath19 , let @xmath20 @xmath21 is adjacent to some @xmath22 be the _ neighborhood of u in g _ , and @xmath23 be the _ anti - neighborhood of u in g_. if @xmath24 , then let us simply write @xmath25 instead of @xmath26 , and @xmath27 instead of @xmath28 .",
    "for @xmath19 let @xmath29 $ ] denote the subgraph of @xmath7 induced by @xmath30 .",
    "for a vertex @xmath31 and for a subset @xmath32 ( with @xmath33 ) , let us say that _ @xmath21 contacts @xmath30 _ if @xmath21 is adjacent to some vertex of @xmath30 , and _",
    "@xmath21 dominates @xmath30 _ if @xmath21 is adjacent to each vertex of @xmath30 .",
    "a _ component of @xmath7 _ is the vertex set of a maximal connected subgraph of @xmath7 .",
    "independent set _ ( or a _ stable set _ ) of a graph @xmath7 is a subset of pairwise nonadjacent vertices of @xmath7 .",
    "an independent set of @xmath7 is _ maximal _ if it is not properly contained in any other independent set of @xmath7 .    for a given graph @xmath34 , a graph",
    "@xmath7 is _ @xmath34-free _ if none of its induced subgraphs is isomorphic to @xmath34 ; in particular , @xmath34 is called a _ forbidden induced subgraph of @xmath7_. given two graphs @xmath7 and @xmath35 , @xmath36 denotes the disjoint union of @xmath7 and @xmath35 ; in particular , @xmath37 and in general , for @xmath4 , @xmath5 denotes the disjoint union of @xmath6 copies of @xmath7 .",
    "the following specific graphs are mentioned later .",
    "a _ chordless path _",
    "@xmath38 has vertices @xmath39 and edges @xmath40 for @xmath41 .",
    "a _ chordless cycle _ @xmath42 , @xmath43 , has vertices @xmath39 and edges @xmath40 for @xmath41 and @xmath44 .",
    "a @xmath45 is a complete graph of @xmath46 vertices .",
    "a @xmath47 is a complete bipartite graph whose sides respectively have one vertex , called the _ center _ of @xmath47 , and @xmath46 vertices , called the _ leaves _ of @xmath47 ( if @xmath48 then there are two trivial centers ) .",
    "@xmath49 is also called _",
    "claw_.    a _ fork _ ( sometimes called _ chair _ ) has vertices @xmath50 , and edges @xmath51 ( thus , a fork contains a claw as an induced subgraph ) .",
    "an _ apple _ is formed by a @xmath42 , @xmath52 , plus one vertex adjacent to exactly one vertex of the @xmath42 .    for indices",
    "@xmath53 , let @xmath54 denote the graph with vertices @xmath55 , @xmath56 , @xmath57 such that the subgraph induced by @xmath55 forms a @xmath58 @xmath59 , the subgraph induced by @xmath60 forms a @xmath61 @xmath62 , and the subgraph induced by @xmath63 forms a @xmath64 @xmath65 , and there are no other edges in @xmath54 . thus , _ claw",
    "_ is @xmath66 , and @xmath38 is isomorphic to e.g. @xmath67 .",
    "let @xmath7 be a given graph and let @xmath68 be a weight function on @xmath17 .",
    "for an independent set @xmath69 , its weight is @xmath70 .",
    "let @xmath71 independent in @xmath72 denote the maximum weight of any independent set of @xmath7 .",
    "the _ maximum weight independent set _",
    "( _ mwis _ ) problem asks for an independent set of @xmath7 of maximum weight .    if all vertices @xmath21 have the same weight @xmath73 , @xmath74 and mwis is called the _ mis _ problem .",
    "mwis is np - hard @xcite and remains np - hard under various restrictions , such as for triangle - free graphs @xcite and more generally for graphs without chordless cycle of given length @xcite , for cubic graphs @xcite and more generally for @xmath75-regular graphs @xcite , and for planar graphs @xcite .",
    "it can be solved in polynomial time for various graph classes , such as for @xmath76-free graphs @xcite and more generally perfect graphs @xcite , for claw - free graphs @xcite and more generally fork - free graphs @xcite and apple - free graphs @xcite , for @xmath11-free graphs @xcite and more generally @xmath13-free graphs for any constant @xmath6 ( by combining an algorithm generating all maximal independent sets of a graph @xcite and a polynomial upper bound on the number of maximal independent sets in @xmath13-free graphs @xcite ) , @xmath77claw - free graphs @xcite , and @xmath14-free graphs @xcite .",
    "furthermore mwis can be solved in polynomial time for @xmath78-free graphs as recently proved in @xcite .",
    "the first two polynomial time algorithms for mwis on claw - free graphs were introduced in 1980 by minty @xcite and independently by sbihi @xcite , then revisited by nakamura and tamura @xcite , and recently improved by faenza , oriolo , and stauffer @xcite , and by nobili and sassano @xcite with the best known time bound in @xcite .",
    "[ theo : claw]*@xcite * for claw - free graphs , the mwis problem can be solved in time @xmath79 .",
    "@xmath80    obviously , for every graph @xmath7 the following holds :    @xmath81 ) : v \\in v\\}\\ ] ]    thus , for any graph @xmath7 , mwis can be reduced to the same problem for the anti - neighborhoods of all vertices of @xmath7 .",
    "then we have :    [ k1 ] for any graph @xmath35 , if m(w)is can be solved for @xmath35-free graphs in polynomial time then m(w)is can be solved for @xmath82-free graphs in polynomial time .",
    "@xmath80    let us report the following result due to alekseev @xcite .",
    "let us say that a graph is of _ type @xmath83 _ if it is graph @xmath54 for some indices @xmath84 .",
    "[ theo : alekseev]*@xcite * let @xmath85 be a class of graphs defined by a finite set @xmath86 of forbidden induced subgraphs . if @xmath86 does not contain any graph every connected component of which is of type @xmath83 , then the m(w)is problem is _",
    "np_-hard for the class @xmath85 .",
    "alekseev s result implies that m(w)is is np - hard for @xmath87-free graphs @xmath88 the fact that m(w)is is np - hard for @xmath87-free graphs is already mentioned in @xcite .",
    "unless p = np , alekseev s result implies that for any graph @xmath35 , if m(w)is is polynomial time solvable for @xmath35-free graphs , then each connected component of @xmath35 is of type @xmath83 . by proposition [ k1 ] , for any graph",
    "@xmath35 , if m(w)is can be solved in polynomial time for @xmath35-free graphs then for any constant @xmath6 , m(w)is can be solved in polynomial time for @xmath89-free graphs .",
    "it follows that , since for any constant @xmath6 , m(w)is can be solved in polynomial time for @xmath13-free graphs @xcite , for fork - free graphs @xcite , for @xmath77claw - free graphs @xcite , for @xmath14-free graphs @xcite , and for @xmath78-free graphs @xcite , the minimal graphs @xmath35 of type @xmath83 for which the complexity of m(w)is for @xmath35-free graphs was open are : @xmath90 , @xmath91 , @xmath92 , @xmath93 , @xmath15 , @xmath16+claw , and thus , the minimal graph classes , defined by forbidding one induced subgraph , for which the complexity of m(w)is was open are :    * @xmath90-free graphs , @xmath91-free graphs , @xmath92-free graphs , @xmath93-free graphs , @xmath15-free graphs , @xmath16+claw - free graphs .    in this manuscript , we show that for any constant @xmath6 , mwis can be solved for @xmath6claw - free graphs in polynomial time .",
    "this extends the known results for mwis on claw - free graphs , @xmath13-free graphs for any constant @xmath6 , @xmath10+claw - free graphs , @xmath14-free graphs , and solves the open question for mwis on @xmath15-free graphs and on @xmath16+claw - free graphs .",
    "our approach is based on farber s approach showing that every @xmath11-free graph has @xmath12 maximal independent sets @xcite ( reported in section [ 2k2fr ] ) , which directly leads to a polynomial time algorithm to solve mwis for @xmath11-free graphs by dynamic programming .",
    "in this section let us refer to algorithm @xmath94 ( subsequently called algorithm alpha ) from @xcite which formalizes the aforementioned approach by farber @xcite ; our subsequent approach for mwis on @xmath6claw - free graphs is based on this algorithm .    for a @xmath11-free input graph @xmath7 , algorithm alpha produces a family @xmath95 of independent sets of @xmath7 , which can be computed in time @xmath96 and which contains @xmath12 members such that each maximal independent set of @xmath7 is contained in some member of @xmath95 .    for a graph @xmath97 with @xmath98 , a _ vertex ordering _",
    "@xmath99 of @xmath7 is a total ordering of the vertex set @xmath100 of @xmath7 .",
    "for such a vertex ordering @xmath99 of @xmath7 , let @xmath101 $ ] denote the subgraph of @xmath7 induced by the first @xmath102 vertices , @xmath103",
    ".    given a vertex ordering @xmath99 , at each loop @xmath102 , @xmath104 , algorithm alpha provides a family @xmath105 of subsets of @xmath106 ( by modifying @xmath95 at loop @xmath102 by extending some of its members or by adding new members ) such that each maximal independent set of @xmath107 is contained in some member of @xmath105 , and finally returns the family @xmath108 .",
    "* algorithm alpha * + * input : * a @xmath11-free graph @xmath7 and a vertex ordering @xmath99 of @xmath7 . + * output : * a family @xmath95 of subsets of @xmath17 .",
    "+   + @xmath109 ; + * for * @xmath110 * to * @xmath46 * do * + * begin * + 1 . [ extension of some members of @xmath95 ] + @xmath112 * do * + @xmath113 is an independent set * then * @xmath114 .",
    "[ addition of new members to @xmath95 ] + @xmath10 of @xmath107 containing @xmath115 ( i.e. , for each edge @xmath116 of @xmath107 ) * do * + @xmath117 ; + @xmath118 . +",
    "* end . *",
    "then the mwis problem can be solved for @xmath11-free graphs by the following algorithm .",
    "* algorithm @xmath11-free - mwis * + * input : * a @xmath11-free graph @xmath7 . + * output : * a maximum weight independent set of @xmath7 .    *",
    "execute algorithm alpha for @xmath7 .",
    "let @xmath95 be the resulting family of subsets of @xmath17 .",
    "* for each @xmath112 , compute a maximum weight independent set of @xmath119 $ ] ( note that each @xmath112 is an independent set since @xmath7 is @xmath11-free ) . then choose a best solution , i.e. , one of maximum weight .",
    "then one obtains the following result .",
    "* @xcite * for @xmath11-free graphs , the mwis problem can be solved in time @xmath120 by algorithm @xmath11-free - mwis . @xmath80",
    "first let us introduce a preparatory result . for each @xmath121 , let @xmath122 be the graph drawn in the subsequent figure .",
    "note that each @xmath122 contains an induced claw . for each @xmath121 ,",
    "let @xmath123 denote the set of white vertices of @xmath122 , let @xmath124 denote the set of black vertices of @xmath122 , and let @xmath125 denote the ( white ) vertex at the top of @xmath122 .",
    "[ figlk ]   for @xmath126,title=\"fig : \" ]    [ lemm : claw ] for a graph @xmath7 , assume that @xmath31 is a vertex such that @xmath21 is contained in an induced claw of @xmath7 and @xmath127 $ ] is claw - free .",
    "then for each maximal independent set @xmath69 of @xmath7 with @xmath128 , there is a @xmath121 such that @xmath129 for an induced subgraph @xmath122 of @xmath7 with @xmath21 = top@xmath130 .",
    "* let @xmath131 be a claw in @xmath7 with , say , @xmath132 .",
    "let @xmath69 be a maximal independent set of @xmath7 containing @xmath21 , and let @xmath133 .",
    "then for @xmath134 , @xmath135 is a maximal independent set of @xmath136 $ ] .",
    "let us distinguish between the following cases .",
    "* case 1 * @xmath119 $ ] is connected .    by assumption , @xmath21 is contained in an induced claw of @xmath7 .",
    "let us distinguish between two subcases .",
    "* case 1.1 @xmath21 is the center of @xmath131*.    since @xmath119 $ ] is claw - free , each of @xmath137 has at most two neighbors in @xmath135 .    *",
    "case 1.1.1 * if a vertex of @xmath137 , say @xmath138 , has two neighbors in @xmath135 , say @xmath139 then @xmath140 with @xmath141 , @xmath142 , and @xmath21 = top@xmath143 .",
    "* case 1.1.2 * if none of @xmath137 has a neighbor in @xmath135 then @xmath144 with @xmath145 and @xmath21 = top@xmath146 .    *",
    "case 1.1.3 * now assume that cases 1.1.1 and 1.1.2 are excluded .",
    "this means that one of @xmath137 , say without loss of generality @xmath138 , has exactly one neighbor in @xmath135 and @xmath147 and @xmath148 have at most one neighbor in @xmath135 .",
    "let @xmath149 for @xmath150 .",
    "note that not both of @xmath147 and @xmath148 are adjacent to @xmath151 since @xmath34 is claw - free , and in general , @xmath152 and @xmath148 do not have any common neighbor in @xmath135 .",
    "if @xmath153 then we have @xmath154 with @xmath155 and @xmath21 = top@xmath156 .",
    "if @xmath147 has exactly one neighbor in @xmath135 , say @xmath157 , and @xmath158 then if @xmath159 , we have @xmath160 with @xmath161 and @xmath21 = top@xmath162 , and if @xmath163 , we have @xmath164 with @xmath165 and @xmath21 = top@xmath166 , and similarly for the case when @xmath148 has exactly one neighbor in @xmath135 , and @xmath167 .",
    "finally , assume that both @xmath147 and @xmath148 have a neighbor in @xmath135 , i.e. , there are @xmath168 with @xmath169 and @xmath170 .    if @xmath171 are pairwise distinct then we have @xmath172 with @xmath173 and @xmath21 = top@xmath174",
    ".    now assume that @xmath175 ( recall that @xmath176 is impossible ) . without loss of generality ,",
    "let @xmath177 .",
    "then we have @xmath178 with @xmath179 and @xmath21 = top@xmath180 .",
    "* case 1.2 @xmath21 is a leaf of @xmath131*.    without loss of generality , let @xmath147 be the center of @xmath131 . since @xmath119 $ ] is claw - free , @xmath147 has at most two neighbors in @xmath135 , and if @xmath181 ( @xmath182 , respectively ) , the same holds for @xmath138 ( @xmath148 , respectively ) .    the following subcases are exhaustive by symmetry .    *",
    "case 1.2.1 * if @xmath183 then @xmath140 with @xmath184 and @xmath21 = top@xmath143 .",
    "* case 1.2.2 * if exactly one of @xmath185 is in @xmath135 , say without loss of generality , @xmath186 and @xmath187 ( and more generally , only one of the neighbors of @xmath147 is in @xmath135 - otherwise we have case 1.2.1 ) then @xmath148 has a neighbor in @xmath135 , say @xmath188 , since @xmath135 is a maximal independent set of @xmath136 $ ] .",
    "then clearly , @xmath188 is nonadjacent to @xmath138 and @xmath21 and is nonadjacent to @xmath147 ( otherwise @xmath147 would have two neighbors in @xmath135 )",
    ". then @xmath189 with @xmath190 and @xmath21 = top@xmath191 .",
    "* case 1.2.3 * now assume that cases 1.2.1 and 1.2.2 are excluded .",
    "thus , @xmath192 .",
    "then both @xmath138 and @xmath148 must have a neighbor in @xmath135 since @xmath135 is a maximal independent set of @xmath136 $ ] .",
    "if no neighbor of @xmath138 or @xmath148 in @xmath135 is adjacent to @xmath147 then both @xmath138 and @xmath148 have exactly one neighbor in @xmath135 , else a claw in @xmath119 $ ] would arise involving @xmath147 .",
    "let @xmath193 with @xmath149 , @xmath194 .    if @xmath159 then @xmath195 with @xmath196 and @xmath21 = top@xmath197 .    if @xmath177 then @xmath198 with @xmath199 and @xmath21 = top@xmath200",
    ".    now assume that , without loss of generality , a neighbor @xmath201 of @xmath138 is adjacent to @xmath147 .",
    "we claim :    \\(i ) @xmath188 is adjacent to @xmath148 , since otherwise case 1.2.2 holds with @xmath188 instead of @xmath138 ;    \\(ii ) @xmath138 and @xmath148 have at most one more neighbor in @xmath135 , and such a neighbor is non - adjacent to @xmath147 , since otherwise case 1.2.1 holds ( i.e. , @xmath147 has two neighbors in @xmath135 ) .    if neither @xmath138 nor @xmath148 have another neighbor in @xmath135 then @xmath202 with @xmath203 and @xmath21 = top@xmath204 .",
    "if there is @xmath150 with @xmath205 , @xmath149 and the only neighbor of @xmath148 in @xmath135 is @xmath188 then @xmath206 with @xmath207 and @xmath21 = top@xmath208 , and similarly if @xmath148 has two neighbors @xmath209 and @xmath138 has only neighbor @xmath201",
    ".    finally , if @xmath138 and @xmath148 have another neighbor in @xmath135 , say @xmath193 , @xmath210 with @xmath149 and @xmath194 then we have :    if @xmath159 then @xmath211 with @xmath212 and @xmath21 = top@xmath213 , and if @xmath163 then @xmath214 with @xmath215 and @xmath21 = top@xmath216 .",
    "* case 2 * : @xmath119 $ ] is not connected .",
    "this case can be treated similarly as case 1 in which @xmath119 $ ] is connected .",
    "if @xmath7 is not connected then we can solve mwis separately for each component of @xmath7 . if @xmath7 is connected and @xmath21 is the leaf of a claw then obviously , @xmath119 $ ] is connected .",
    "thus , we can assume that @xmath21 is the center of a claw @xmath131 , and we can follow the arguments of case 1 . for brevity let us omit the proof , which can be split into the subcases in which @xmath119 $ ] has two or three components . finally we have @xmath129 , for some @xmath217 , with @xmath21 = top@xmath130 . @xmath80      now we show that for claw+claw - free graphs , mwis can be solved in time @xmath218 .",
    "for this , we need the following notion :    [ defi : good family ] let @xmath7 be a graph and let @xmath95 be a family of subsets of @xmath17 . then @xmath95 is a _ good claw - free family of _",
    "@xmath7 if the following holds :    1 .   each member of @xmath95 induces a claw - free subgraph in @xmath7 .",
    "each maximal independent set of @xmath7 is contained in some member of @xmath95 .",
    "3 .   @xmath95 contains polynomially many members and can be computed in polynomial time .",
    "the basic step is the subsequent algorithm gamma(2 ) ( based on the corresponding algorithm alpha of section [ 2k2fr ] ) which , for any claw+claw - free ( i.e. , 2claw - free ) input graph @xmath7 , computes a good claw - free family @xmath95 of @xmath7 .",
    "the approach is based on farber s idea for mwis on @xmath11-free graphs described in algorithm alpha of section [ 2k2fr ] .",
    "* algorithm gamma(2 ) * + * input : * a claw+claw - free graph @xmath7 and a vertex - ordering @xmath99 of @xmath7 . + * output : * a good claw - free family @xmath95 of @xmath7 . + @xmath109 ; + * for * @xmath110 * to * @xmath46 * do * + * begin * + 1 .",
    "[ extension of some members of @xmath95 ] + @xmath112 * do * + @xmath219 $ ] is claw - free * then * @xmath114 .",
    "[ addition of new members to @xmath95 ] + induced @xmath122 of @xmath107 , @xmath121 , with @xmath115 = top@xmath130 * do * + compute a good claw - free family , say @xmath220 , of @xmath221 $ ] .",
    "+ @xmath222 , set @xmath223 . +",
    "*    [ prop : claw+claw ] step @xmath224 of algorithm gamma@xmath225 is well defined , i.e. , @xmath221 $ ] is claw - free and has a good claw - free family @xmath226formed by one member , namely , @xmath227 which can be computed in constant time .    *",
    "* subgraph @xmath221 $ ] is claw - free since @xmath7 is assumed to be claw+claw - free , each @xmath122 contains an induced claw and @xmath228 is defined as the anti - neighborhood of @xmath229 . then the subgraph @xmath221 $ ] has a good claw - free family ( formed by one member , namely , @xmath228 ) which can be computed in constant time .",
    "@xmath80    for proving the correctness and the time bound of algorithm gamma(2 ) , we need the following lemmas .",
    "[ lemmc:1 ] let @xmath7 be a claw+claw - free graph and let @xmath95 be the result of algorithm gamma@xmath225 .",
    "then we have :    * each member of @xmath95 induces a claw - free subgraph of @xmath7 . *",
    "each maximal independent set of @xmath7 is contained in some member of @xmath95 .",
    "* @xmath230 : each member of @xmath95 is created either in the initialization step as the empty set or in step 1 or step 2 of some loop .",
    "clearly , each member @xmath231 created in step  1 induces a claw - free subgraph in @xmath7 since each member of @xmath95 is extended in step 1 only if the extension preserves its claw - freeness . according to step 2 and to proposition  [ prop : claw+claw ] ,",
    "each member of @xmath95 created in step 2 is the disjoint union of a vertex subset of a claw - free subgraph , namely @xmath123 , and of a claw - free subgraph representing its anti - neighborhood @xmath228 , namely a member of a good claw - free family .",
    "therefore , each member of @xmath95 created in step 2 induces a claw - free graph .",
    "this completes the proof of statement @xmath230 .",
    "@xmath232 : by @xmath105 , let us denote the family @xmath95 resulting by the @xmath102-th loop of algorithm gamma(2 ) .",
    "let us show that for all @xmath233 , each maximal independent set of @xmath107 is contained in a member @xmath34 of @xmath105 . the proof is done by induction . for @xmath234 ,",
    "the statement is trivial .",
    "then let us assume that the statement holds for @xmath235 and prove that it holds for @xmath102 .",
    "let @xmath69 be a maximal independent set of @xmath107 .",
    "if @xmath236 , then by the induction assumption , @xmath69 is contained in some member of @xmath237 , and thus of @xmath105 , since each member of @xmath237 is a ( not necessarily proper ) subset of a member of @xmath105 .    if @xmath238 , then let us consider the following argument",
    ". by the induction assumption , let @xmath239 with @xmath240 .",
    "note that for all @xmath241 , @xmath242 , each member of @xmath243 induces a claw - free graph , as one can easily verify by an argument similar to the proof of statement @xmath230 .",
    "thus , @xmath119 $ ] is claw - free .    then let us consider the following two cases which are exhaustive by definition of algorithm gamma(2 ) .",
    "* case 1 * : @xmath219 $ ] is claw - free .",
    "then @xmath69 is contained in the set @xmath113 , which is a member of @xmath105 since it is generated by step 1 of the algorithm at loop @xmath102 .",
    "* case 2 * : @xmath219 $ ] is not claw - free .",
    "then by lemma [ lemm : claw ] , since @xmath119 $ ] is claw - free , there is a @xmath121 such that @xmath244 for an induced subgraph @xmath122 of @xmath107 with @xmath115 = top@xmath130 , and @xmath245 is contained in @xmath105 since it is generated by step 2 of algorithm gamma(2 ) at loop @xmath102 .",
    "@xmath80    [ lemmc:3 ] the family @xmath95 produced by algorithm gamma@xmath225 contains @xmath246 members and can be computed in @xmath247 time , which is also the time bound of algorithm gamma@xmath225 .",
    "* proof . *",
    "the members of @xmath95 are created either in the initialization step or in step 2 of all the loops of algorithm gamma(2 ) and then are possibly ( iteratively ) extended in step 1 of algorithm gamma(2 ) .    concerning the member created in the initialization step , i.e. , the empty set : this member is created in constant time and is possibly ( iteratively ) extended by step 1 of each loop in @xmath248 time ( and the number of loops is @xmath46 ) .",
    "then this member can be computed in @xmath249 time .    concerning the members created in step 2 of all the loops :",
    "such members are created with respect to all induced @xmath122 , @xmath250 ( the maximum number of vertices in any @xmath122 is 7 ) , of @xmath107 , i.e. , with respect to a family of @xmath251 subsets of @xmath107 ( in fact the algorithm produces the anti - neighborhoods of all @xmath122 for @xmath121 of @xmath107 just once since at loop @xmath102 all such @xmath122 contain @xmath115 ) .",
    "then for the respective anti - neighborhood , namely @xmath228 , of each such subset the algorithm computes a good claw - free family . by proposition [ prop : claw+claw ] , @xmath221 $ ] is claw - free and has a good claw - free family ( which contains one member and can be computed in constant time ) .",
    "therefore the cardinality of the family of such members is @xmath251 and all such members can be created in @xmath251 time ( since each such member can be created in step 2 in constant time ) .",
    "then such members are possibly ( iteratively ) extended in step 1 in @xmath248 time ( and the number of loops is @xmath46 ) .",
    "then such members can be computed in @xmath252 time .",
    "therefore , @xmath253 contains @xmath246 members and can be computed in @xmath247 time , which is also the time bound of algorithm gamma(2 ) .",
    "@xmath80    note that lemmas [ lemmc:1 ] and [ lemmc:3 ] directly imply the following .",
    "[ coro : claw+claw ] every claw+claw - free graph has a good claw - free family which can be computed by algorithm gamma@xmath225 .",
    "@xmath80    then the mwis problem can be solved for claw+claw - free graphs by the following algorithm .",
    "* algorithm mwis(2 ) * + * input : * a claw+claw - free graph @xmath7 . + * output : * a maximum weight independent set of @xmath7 .",
    "* execute algorithm gamma(2 ) for @xmath7 .",
    "let @xmath95 be the resulting family of subsets of @xmath17 .",
    "* for each @xmath112 , compute a maximum weight independent set of @xmath119 $ ] . then choose a best solution , i.e. , one of maximum weight .",
    "algorithm mwis@xmath225 is correct and can be done in @xmath218 time .    * proof . * _ correctness _ : by lemma [ lemmc:1 ] @xmath232 , algorithm mwis(2 ) is correct .    _",
    "time bound _ : by lemma [ lemmc:3 ] , step ( 1 ) can be executed in @xmath247 time . by lemma [ lemmc:3 ] , the family @xmath95 contains @xmath246 members .",
    "then , by lemma [ lemmc:1 ] @xmath230 and theorem [ theo : claw ] , step ( 2 ) can be executed in @xmath218 time .",
    "thus , algorithm mwis(2 ) can be executed in time @xmath218 .",
    "@xmath80    then one obtains the following result .",
    "[ theo : wis - claw+claw ] for claw+claw - free graphs , the mwis problem can be solved in time @xmath218 by algorithm mwis@xmath225 . @xmath80",
    "in this section we show that for any fixed @xmath4 , mwis for @xmath6claw - free graphs can be solved in polynomial time . for this",
    ", we first describe the subsequent algorithm gamma(@xmath6 ) , which for any @xmath6claw - free input graph @xmath7 computes a good claw - free family @xmath95 of @xmath7 .",
    "the approach recursively uses algorithm gamma@xmath254 for algorithm gamma(@xmath6 ) , starting with algorithm gamma(2 ) of subsection [ claw+clawfr ] .",
    "* algorithm gamma@xmath255 * + * input : * an @xmath6claw - free graph @xmath7 and a vertex - ordering @xmath99 of @xmath7 . +",
    "* output : * a good claw - free family @xmath253 of @xmath7 .",
    "+ @xmath109 ; + * for * @xmath110 * to * @xmath46 * do * + * begin * + 1 .",
    "[ extension of some members of @xmath95 ] + @xmath112 * do * + @xmath219 $ ] is claw - free * then * @xmath114 .",
    "[ addition of new members to @xmath95 ] + induced @xmath122 of @xmath107 , @xmath121 , with @xmath115 = top@xmath130 * do * + compute a good claw - free family , say @xmath220 , of @xmath221 $ ] by + algorithm gamma@xmath254 .",
    "+ @xmath222 , set @xmath223 . +",
    "*    * assumption 1 . * to prove the subsequent proposition [ prop : lclaw ] , lemmas [ lemmc:1l ] and [ lemmc:3l ] , and corollary [ coro : lclaw ]",
    ", we need to consider them as a _ unique _",
    "result , in order to give a proof by induction on @xmath6 . for @xmath6",
    "= 2 , the proof of proposition [ prop : lclaw ] , of lemmas [ lemmc:1l ] and [ lemmc:3l ] , and of corollary [ coro : lclaw ] is respectively that of proposition [ prop : claw+claw ] , of lemmas [ lemmc:1 ] and [ lemmc:3 ] , and of corollary [ coro : claw+claw ] .",
    "* subgraph @xmath221 $ ] is @xmath254claw - free since @xmath7 is @xmath6claw - free and since @xmath228 is defined as the anti - neighborhood of @xmath122 containing an induced claw .",
    "then by assumption 1 , i.e. , by corollary [ coro : lclaw ] with respect to @xmath256 , subgraph @xmath221 $ ] has a good claw - free family which can be computed by algorithm gamma@xmath254 . @xmath80",
    "* according to assumption  1 , the proof is similar to that of lemma  [ lemmc:1 ] , with proposition  [ prop : lclaw ] instead of proposition  [ prop : claw+claw ] and with algorithm gamma(@xmath6 ) instead of algorithm gamma(2 ) .",
    "@xmath80      * proof .",
    "* the members of @xmath95 are created either in the initialization step or in step 2 of all the loops of algorithm gamma(@xmath6 ) and then are possibly ( iteratively ) extended in step 1 of algorithm gamma(@xmath6 ) .",
    "concerning the member created in the initialization step , i.e. , the empty set , this member is created in constant time and is possibly ( iteratively ) extended by step 1 of each loop in @xmath248 time ( the number of loops is @xmath46 ) . then this member can be computed in @xmath249 time .    concerning the members created in steps 2 of all the loops ,",
    "such members are created with respect to all induced @xmath122 of @xmath7 , i.e. , with respect to a family of @xmath251 subsets of @xmath7 ( in fact , the algorithm produces the anti - neighborhoods of all @xmath122 for @xmath121 of @xmath107 just once since at loop @xmath102 all such @xmath122 contain @xmath115 as their top vertex ) .",
    "then for the respective anti - neighborhood , namely @xmath228 , of each such subset the algorithm computes a good claw - free family . by proposition [ prop : lclaw ] , @xmath221 $ ] is @xmath254claw - free and has a good claw - free family .",
    "therefore the cardinality of the family of such members is bounded by a polynomial and all such members can be created in polynomial time ( since each such member can be created in step  2 in polynomial time )",
    ". then such members are possibly ( iteratively ) extended in step  1 in @xmath248 time ( the number of loops is @xmath46 ) .",
    "thus , such members can be computed in polynomial time .",
    "then for @xmath6claw - free graphs , the mwis problem can be solved by the following algorithm . + * algorithm mwis(@xmath6 ) * + * input : * an @xmath6claw - free graph @xmath7 . +",
    "* output : * a maximum weight independent set of @xmath7 .",
    "* execute algorithm gamma@xmath255 for @xmath7 .",
    "let @xmath95 be the resulting family of subsets of @xmath17 .",
    "* for each @xmath112 , compute a maximum weight independent set of @xmath119 $ ] . then choose a best solution , i.e. , one of maximum weight .",
    "_ time bound _ : by lemma [ lemmc:3l ] , step ( 1 ) can be executed in polynomial time . by lemma  [ lemmc:3l ]",
    ", the family @xmath95 contains polynomially many members .",
    "then by lemma [ lemmc:1l ] @xmath230 and by theorem [ theo : claw ] , step ( 2 ) can be executed in polynomial time .",
    "thus , algorithm mwis@xmath255 can be executed in polynomial time .",
    "@xmath80          v.e .",
    "alekseev , on the local restriction effect on the complexity of finding the graph independence number , _ combinatorial - algebraic methods in applied mathematics _ , gorkiy university press , gorkiy ( 1983 ) 3 - 13 ( in russian ) .",
    "alekseev , on the number of maximal independent sets in graphs from hereditary classes , _ combinatorial - algebraic methods in discrete optimization _",
    ", gorkiy university press , gorkiy ( 1991 ) 5 - 8 ( in russian ) .",
    "alekseev , a polynomial algorithm for finding largest independent sets in fork - free graphs , _ discrete analysis and operations research _ ser . 1 , 6 ( 1999 ) 3 - 19 ( in russian ) , _ discrete applied mathematics _ 135 ( 2004 ) 3 - 16 .              y. faenza , g. oriolo , g. stauffer , an algorithmic decomposition of claw - free graphs leading to an o(@xmath257)-algorithm for the weighted independent set problem , extended abstract in : proceedings soda 2011 , pp . 630 - 646 .",
    "d. lokshtanov , m. vatshelle , y. villanger , independent sets in @xmath78-free graphs in polynomial time , http://www.ii.uib.no/@xmath258martinv/papers/isinp5free.pdf ; extended abstract in : proceedings of soda 2014 : 570 - 581 ."
  ],
  "abstract_text": [
    "<S> the maximum weight independent set ( mwis ) problem is a well - known np - hard problem . </S>",
    "<S> a popular way to study mwis is to detect graph classes for which mwis can be solved in polynomial time , with particular reference to hereditary graph classes , i.e. , defined by a hereditary graph property or equivalently by forbidding one or more induced subgraphs .    for graphs </S>",
    "<S> @xmath0 , @xmath1 denotes the disjoint union of @xmath2 and @xmath3 , and for a constant @xmath4 , @xmath5 denotes the disjoint union of @xmath6 copies of @xmath7 . a _ claw _ has vertices @xmath8 , and edges @xmath9 . </S>",
    "<S> mwis can be solved for claw - free graphs in polynomial time ; the first two polynomial time algorithms were introduced in 1980 by @xcite , then revisited by @xcite , and recently improved by @xcite , and by @xcite with the best known time bound in @xcite . </S>",
    "<S> furthermore mwis can be solved for the following extensions of claw - free graphs in polynomial time : fork - free graphs @xcite , @xmath10+claw - free graphs @xcite , and apple - free graphs @xcite .    </S>",
    "<S> this manuscript shows that for any constant @xmath6 , mwis can be solved for @xmath6claw - free graphs in polynomial time . </S>",
    "<S> our approach is based on farber s approach showing that every @xmath11-free graph has @xmath12 maximal independent sets @xcite , which directly leads to a polynomial time algorithm for mwis on @xmath11-free graphs by dynamic programming .    </S>",
    "<S> solving mwis for @xmath6claw - free graphs in polynomial time extends known results for claw - free graphs , for @xmath13-free graphs for any constant @xmath6 @xcite , for @xmath10+claw - free graphs , for @xmath14-free graphs @xcite , and solves the open questions for @xmath15-free graphs and for @xmath16+claw - free graphs being two of the minimal graph classes , defined by forbidding one induced subgraph , for which the complexity of mwis was an open problem .    </S>",
    "<S> institut fr informatik , universitt rostock , d-18051 rostock , germany . </S>",
    "<S> + ` ab@informatik.uni-rostock.de `    dipartimento di economia , universit degli studi `` g. dannunzio '' , pescara 65121 , italy . </S>",
    "<S> + ` r.mosca@unich.it `    _ ad laudem domini _ </S>"
  ]
}