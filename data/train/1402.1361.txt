{
  "article_text": [
    "the constraint programming ( cp ) community is witnessing the emergence of numerous new solvers , most of them coming up with new features . in this competitive context , integrating latest advances and ensuring software quality is challenging . from a more general point of view , spending effort on developing something already well handled by other libraries can be argued to be a waste of resource .",
    "@xmath0 @xcite and @xmath1 @xcite are two such solvers , respectively specialised on finite domains ( fd ) and continuous domains ( cd ) . while they already have some history , they have recently been completely re - engineered to brand new improved versions .",
    "this paper presents a bridge which has been made so that @xmath0 can use @xmath1 as a global constraint .",
    "the interval arithmetics provided by @xmath1 greatly enhances modeling possibilities of @xmath0 .",
    "it enables to express naturally the wide family of _ statistical constraints _",
    "@xcite , but also non - linear physics constraints as well as many continuous objective functions .",
    "this bridge enables to take advantage of the most recent advances of the cd community within @xmath0 for free .",
    "it saves development and maintenance resources , and contributes to the software quality . in this way , @xmath0 and @xmath1 developers can focus on what they do best , being respectively fd and cd reasonings , and users have access to the whole .",
    "@xmath0 is a java library for constraint satisfaction problems and constraint optimisation problems .",
    "this solver already has a long history and has been fully re - engineered this year , to a 3.0 version  @xcite .",
    "it roughly contains @xmath2 lines of code .",
    "the @xmath0 library contains numerous variables , constraints and search procedures , to provide wide modeling perspectives .",
    "most common variables are integer variables ( including binary variables and views @xcite ) but the distribution also includes set variables , graph variables and real variables .",
    "the constraint library provided by @xmath0 contains many global constraints , which gives a very expressive modeling language .",
    "the search process can also be greatly improved by various built - in search strategies ( such as domwdeg , abs , ibs , first - fail , etc . ) and some optimisation procedures ( lns , fast restart , etc . ) .",
    "moreover , @xmath0 natively supports explained constraints .",
    "last , several useful extra features , such as a flatzinc ( the target language of minizinc  @xcite ) parser and some viewing tools , are provided as well .",
    "@xmath0 is used by the academy for teaching and research and by the industry to solve real - world problems , such as program verification , data center management , timetabling , scheduling and routing .",
    "@xmath1 ( interval - based explorer ) is also a library for constraint satisfaction and optimization , but written in c++ and dedicated to continuous domains .",
    "this solver has been fully re - engineered to a 2.0 version this year  @xcite .",
    "@xmath1 consists of roughly @xmath3 lines of code .    from the perspective of solver cooperation , two features of @xmath1 are of interest : the modeling language and the _",
    "contractors_.    compared to @xmath0 , the modeling language is much simpler in the sense that constraints are either numerical equations or inequalities . however , the mathematical expression involved in a constraint can be of arbitrary complexity .",
    "the expression is obtained by composition of standard mathematical operators such as @xmath4 , @xmath5 , @xmath6 , @xmath7 , etc .",
    "( see  [ sec : interface ] ) .",
    "the modeling language also allows vector and matrix operations ; it shares some similarities with matlab on purpose .",
    "a contractor @xcite is the equivalent of a propagator in finite domain except that it is considered as a pure function : it takes a cartesian product of domains as input and returns a subset of it .",
    "@xmath1 contains a variety of built - in contractors for acheiving different level of bound consistency with respect to a set of numerical constraints such as hc4 , shaving , acid , x - newton , q - intersection , etc .",
    "finally , @xmath1 also comes with a default black - box solver and global optimizer for immediate usage .",
    "it is mainly used so far in academic labs for teaching and research .",
    "its main application field is global optimization and robotics .",
    "it is worth noticing that combining fd with cd in a cp solver is not new . since its early beginning",
    ", the @xmath0 solver has supported real variables , hence it has always been able to solve hybrid discrete continuous problems .",
    "however , these older versions included their own interval arithmetics implementation .",
    "another example is the @xmath8 @xmath9 solver @xcite , which has recently added floating variables to its distribution , by following the same approach .",
    "interestingly , it appeared that most of @xmath0 users and contributors were concerned by fd problems .",
    "thus , for historical reasons , the @xmath0 module over reals has not evolved much within the last years . in the meanwhile ,",
    "people working on continuous problems have proposed new solvers , such as @xmath1 , able to handle efficiently continuous non - linear equation systems . as a counterpart , such solvers are not competitive on problems involving finite domains , if ever they can handle them .",
    "if no theoretical pitfall stands in the way of implementing state - of - the - art cd techniques in @xmath0 , this would require significant resources and ensuring its maintenance over time is presumably even more expensive .",
    "moreover , it would require @xmath0 developers to have a high level of expertise on both fd and cd .",
    "a symmetric reasoning holds if one would like to implement advanced fd features within @xmath1 .",
    "thus , instead of reimplementing the wheel , it has been decided to make a bridge between @xmath0 and @xmath1 .",
    "this provides a very good trade - off between solver features and implementation effort .",
    "the choice of using @xmath1 within @xmath0 , instead of the opposite , is based on practical reasons .",
    "first of all , the functional architecture of contractors in @xmath1 enables to call them from another program very easily .",
    "second , @xmath0 has more variable types , hence using an opposite design would require a heavier interface . in particular , @xmath1 would have to implement finite domains .",
    "third , @xmath0 offers richer resolution options ( black - box search procedures , lns , explanations ... ) than @xmath1 so it is better to give the control of the search to @xmath0 .",
    "last , calling java from c++ is more cumbersome since a virtual machine has to be loaded prior to function calls .",
    "the bridge linking @xmath0 and @xmath1 is organised in a master - slave architecture where @xmath0 integrates @xmath1 within a global constraint .",
    "this constraint , referred to as ` realconstraint ` , has no particular semantics but is used as a shell to encapsulate continuous propagators .",
    "each equation system of the model is associated with one generic propagator , ` realpropagator ` , in @xmath0 and one contractor in @xmath1 .",
    "continuous expressions can embed integer variables by using views .",
    "@xmath0 drives the propagation algorithm : on domain modifications , targeted propagators are scheduled for a future execution . any call to the propagation algorithm of a ` realpropagator ` is then automatically delegated to @xmath1 contractors ; the resulting domain modifications , if any , are recovered and transmitted back to @xmath0 .",
    "@xmath1 contractors are called through the java native interface ( jni ) which enables a java program to call functions of a c++ library .",
    "comments apart , this native interface only includes @xmath10 lines of code , whence the easy maintenance . an overview of the @xmath0-@xmath1 framework is given in figure [ fig : bridge ] .",
    "= [ circle , draw = black ]    ( rv ) at ( 0,0 ) [ anchor = south , draw , thick , minimum width=2cm , minimum height=1cm , align = center , text width=2 cm ] ` real variable ` ; ( iv ) at ( 0,2.5 ) [ anchor = south , draw , thick , minimum width=2cm , minimum height=1cm , align = center , text width=2 cm ] ` integer variable ` ; ( rp ) at ( 6,0 ) [ anchor = south , draw , thick , minimum width=2cm , minimum height=1cm , align = center , text width=2 cm ] ` real propagator ` ; ( rc ) at ( 4,4 ) ` real constraint ` ; ( 4,-0.5 )  ( 4,4.5 )  ( 8,4.5 )  ( 8,-0.5 )  ( 4,-0.5 ) ; ( choco ) at ( -1,4.5 ) choco ; ( -2,-1 )  ( -2,5 )  ( 8.5,5 )  ( 8.5,-1 )  ( -2,-1 ) ; ( c ) at ( 6,-4 ) ` contractor ` ; ( ibex ) at ( -1,-2.5 ) ibex ; ( -2,-4.5 )  ( -2,-2 )  ( 8.5,-2 ) ",
    "( 8.5,-4.5 )  ( -2,-4.5 ) ; ( rp ) edge node[above ] ` domains ` ( rv ) ; ( rv ) edge node[right ] ` views ` ( iv ) ; ( rp ) edge node[right ] ` jni ` ( c ) ;    listing [ propagator ] provides the filtering algorithm of ` realpropagator ` . first , the propagator copies variable domain bounds in an array ( l. @xmath11 ) .",
    "second , it calls the ` contract ` method of the @xmath1 jni class ( see listing [ contract ] ) , with this array and the contractor identifier as input ( l. @xmath12 ) .",
    "this method updates the array of bounds in argument ( for a further filtering ) and returns an entailment statement .",
    "third , it incorporates these changes into variable domains and , possibly , fails or becomes silent ( l. @xmath13 ) . as any constraint of @xmath0 , a ` realconstraint ` can be reified .    regarding the management of object creations and java / c++ communication",
    ", this architecture does not bring any significant overhead .",
    "when the first ` realconstraint ` is created , the @xmath1 library is loaded once and for all by the system .",
    "each @xmath1 contractor is created once during the model creation , and its reference is kept in memory . calling an @xmath1 contractor from a @xmath0 propagator has no particular overhead but the translation of the java primitive double array which represents variable bounds to a native double array .",
    "this takes a linear time over the number of variables that are involved , which is presumably less or equal to the contractor time complexity .",
    ".... protected realvar [ ] vars ; protected final int contractoridx ; public void propagate(int event_mask ) throws contradictionexception {          // make variable domain bounds input array          double domains [ ] = new double[2 * vars.length ] ;          for ( int i = 0 ; i < vars.length ; i++ ) {              domains[2 * i ] = vars[i].getlb ( ) ;              domains[2 * i + 1 ] = vars[i].getub ( ) ;          }          // call ibex ( note that it overwrites the input array \" domains \" )          int result = ibex.contract(contractoridx , domains ) ;          switch ( result ) {              case ibex.fail : // trigger a failure                  contradiction(null , \" ibex failed \" ) ;              case ibex.contract : // filter domains                   for ( int i = 0 ; i < vars.length ; i++ ) {                      vars[i].updatebounds(domains[2 * i ] , domains[2 * i + 1 ] , acause ) ;                  }                  break ;              case ibex.entailed : // filter domains and",
    "become silent                  for ( int i = 0 ; i < vars.length ; i++ ) {                      vars[i].updatebounds(domains[2 * i ] , domains[2 * i + 1 ] , acause ) ;                  }                  setpassive ( ) ;                  break ;              default : //",
    "do nothing          } } ....    .... / * *   * call the contractor cont_index associated to a continuous ( in)equation system    * seen as a function of the form c(x_1, ... ,x_n ) , where x_1 ... x_n are n real variables   *    * @param cont_index       - number of the contractor ( in the order of creation )   * @param bounds - the bounds of domains under the following form :   *                  ( x1-,x1+,x2-,x2+, ... ,xn-,xn+ ) , where xi- ( resp .",
    "xi+ ) is the   *                  lower ( resp .",
    "upper ) bound of the domain of x_i .",
    "*                 * @return        the status of contraction or fail / entailment test .",
    "*   - fail :   no tuple satisfies c.    *   - entailed : the bounds of x may have been contracted .",
    "all remaining tuples satisfy c.     *   - contract : at least one bound of x has been reduced by more than 1% .",
    "*   - nothing : no bound has been reduced and nothing could be proven .   * / public native int contract(int cont_index , double bounds [ ] ) ;       ....    the expression of the continuous constraint ( equation or inequality ) is encoded in a simple string . to simplify the interpretation of this string by @xmath1 ,",
    "variables are represented by their indices , surrounded by braces .",
    "for instance , the constraint `` ( \\{0}+\\{1}+\\{2})/3=\\{3 } '' means that the fourth variable is the average of the three first ones .",
    "this framework handles any equation system involving the following operators :    .... + , - , * , / , = , < , > , < = , > = , sign , min , max , abs , sqr , sqrt , exp , log , pow ,   cos , sin , tan , acos , asin , atan , cosh , sinh , tanh , acosh , asinh , atanh , atan2 ....    this provides wide modeling perspectives .",
    "in particular , the family of _ statistical _ constraints , such as ` spread ` @xcite and ` deviation ` @xcite , can be expressed naturally and extended by using neither monolithic ad hoc algorithms nor reformulations .",
    "of course , in continuous domains , equations and inequalities are ubiquitous .",
    "besides being both simple and expressive , the use of strings enables to get very concise models . as a counterpart",
    ", it has no safeguard against user mistakes in the declaration of continuous constraints . hence building a framework which generates",
    "those strings may be a good perspective to make the use of this bridge safer .",
    "this section introduces the santa claus problem as a simple illustration of this framework . given a set of kids and a set of gifts , the santa claus problem consists of giving a gift to each child .",
    "the average deviation of gift values must be minimised so that the gift distribution is fair .    the @xmath0 model associated with this problem is given in listing [ model ] .",
    "it involves integer assignment decision variables as well as real variables related to the average and the average deviation of gift prices . in particular ,",
    "the objective variable is real , hence the hybrid nature of the problem . on the one hand ,",
    "the ` alldifferent ` constraint is typically not implemented in @xmath1 , as differences have no much meaning over reals . on the other hand ,",
    "the average and the average deviation constraints are straightforward to formulate as general @xmath1 arithmetic expressions .",
    "thus , we take the best from each solver .",
    "the possibility to have real views of integer variables enables to consider integer variables within continuous systems .",
    "hence , even on purely integer problems , this framework makes available a wide family of constraints , for free .    .... //",
    "input data int n_kids = 3 ; int n_gifts = 5 ; int [ ] gift_price = new int[]{11 , 24 , 5 , 23 , 17 } ; int min_price = 5 ; int max_price = 24 ;    //",
    "solver solver solver = new solver(\"santa claus \" ) ;    // fd variables //",
    "vf is the factory for variables ' declaration intvar [ ] kid_gift = vf.enumeratedarray(\"g2k \" , n_kids , 0 , n_gifts , solver ) ; intvar [ ] kid_price = vf.boundedarray(\"p2k \" , n_kids , min_price , max_price , solver ) ; intvar total_cost = vf.bounded(\"total cost \" , min_price*n_kids , max_price * n_kids , solver ) ;    //",
    "cd variable double precision = 1.e-4 ; realvar average = vf.real(\"average \" , min_price , max_price , precision , solver ) ; realvar average_deviation = vf.real(\"average_deviation \" , 0 , max_price , precision , solver ) ;    //",
    "continuous views of fd variables realvar [ ] realviews = vf.real(kid_price , precision ) ;    //",
    "kids must have different gifts //",
    "icf is the factory for integer constraints ' declaration solver.post(icf.alldifferent(kid_gift , \" ac \" ) ) ;    // compute cost for ( int i = 0 ;",
    "n_kids ; i++ ) {      solver.post(icf.element(kid_price[i ] , gift_price , kid_gift[i ] ) ) ; } solver.post(icf.sum(kid_price , total_cost ) ) ;    // compute the average and average deviation costs realvar [ ] allrv = arrayutils.append(realviews,new realvar[]{average , average_deviation } ) ; realconstraint ave_cons = new realconstraint(solver ) ; ave_cons.addfunction(\"({0}+{1}+{2})/3={3 } \" , allrv ) ; ave_cons.addfunction(\"(abs({0}-{3})+abs({1}-{3})+abs({2}-{3}))/3={4 } \" , allrv ) ; solver.post(ave_cons ) ;    // set search strategy ( selects smallest domains first ) solver.set(intstrategyfactory.firstfail_indomainmin(kid_gift ) ) ;    // find optimal solution ( the gift distribution should be fair ) solver.findoptimalsolution(resolutionpolicy.minimize , average_deviation ) ; ....    the output stream ( listing [ output ] ) then provides the following solution :    .... * * * * * * * * * optimal solution kids # 0 has received the gift # 4 at a cost of 17 euros kids # 1 has received the gift # 3 at a cost of 23 euros kids # 2 has received the gift # 1 at a cost of 24 euros total cost : 64 euros average : 21.333333333333332 euros per kid average deviation : 2.8888888888888866   ....",
    "we have proposed a bridge between @xmath0 and @xmath1 so that @xmath0 can use @xmath1 as a global constraint .",
    "we have shown that this framework offers wide modeling possibilities while being simple and generic .",
    "this work enables the fd and the cd communities to benefit from the work of each other and focus and their respective field of expertise .",
    "it enables to provide a rich and reliable solver while saving development and maintenance resources .",
    "jean - guillaume fages , narendra jussien , xavier lorca , and charles prudhomme .",
    "choco3 : an open source java constraint programming library .",
    "research report 13/1/info , ecole des mines de nantes , 2013 . to appear ."
  ],
  "abstract_text": [
    "<S> combining efficiency with reliability within cp systems is one of the main concerns of cp developers . </S>",
    "<S> this paper presents a simple and efficient way to connect @xmath0 and @xmath1 , two cp solvers respectively specialised on finite and continuous domains . </S>",
    "<S> this enables to take advantage of the most recent advances of the continuous community within @xmath0 while saving development and maintenance resources , hence ensuring a better software quality . </S>"
  ]
}