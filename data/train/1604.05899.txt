{
  "article_text": [
    "it is shown in @xcite that _ interleaved gabidulin codes _ of _ length _ @xmath4 and _ interleaving degree _",
    "@xmath5 can be error- and erasure - decoded by transforming the following _ skew polynomial _ @xcite matrix into _ weak popov form _ ( cf .  section  [ sec : preliminaries ] ) many divisions of skew polynomials of degree @xmath6 , which can be done in @xmath7 time @xcite.[fn : test ] ] : @xmath8    where the skew polynomials @xmath9 and the non - negative integers @xmath10 arise from the decoding problem and are known at the receiver . due to lack of space , we can not give a description of interleaved gabidulin codes , the mentioned procedure and the resulting decoding radius here and therefore refer to ( * ? ? ?",
    "* section  3.1.3 ) . by adapting row reduction algorithms known for polynomial rings",
    "@xmath11 $ ] to skew polynomials , a decoding complexity of @xmath12 can be achieved @xcite . in this paper",
    ", we adapt alekhnovich s algorithm @xcite for row reduction of @xmath11 $ ] matrices to the skew polynomial case .",
    "let @xmath13 be a finite field and @xmath14 an @xmath13-automorphism . a _ skew polynomial ring _ @xmath15}$ ] @xcite contains polynomials of the form @xmath16 , where @xmath17 and @xmath18 ( @xmath19 is the _ degree _ of @xmath20 ) , which are multiplied according to the rule @xmath21 , extended recursively to arbitrary degrees .",
    "this ring is non - commutative in general .",
    "all polynomials in this paper are skew polynomials .",
    "it was shown in @xcite for linearized polynomials and generalized in @xcite to arbitrary skew polynomials that two such polynomials of degrees @xmath22 can be multiplied with complexity @xmath23 in operations over @xmath13 , where @xmath3 is the matrix multiplication exponent .",
    "a polynomial @xmath20 has _ length _",
    "@xmath24 if @xmath25 for all @xmath26 and @xmath27 . we can write @xmath28 , where @xmath29 , and multiply @xmath30}$ ] by @xmath31 x^{\\deg a + \\deg a - \\operatorname{len}a - \\operatorname{len}b + 1}.$ ] computing @xmath32 with @xmath33 , @xmath34 is in @xmath35 ( cf .",
    "hence , @xmath20 and @xmath36 of length @xmath37 can be multiplied in @xmath38 time , although possibly @xmath39 .",
    "vectors @xmath40 and matrices @xmath41 are denoted by bold and small / capital letters .",
    "indices start at @xmath42 , e.g. @xmath43 for @xmath44 .",
    "@xmath45 is the matrix containing only one non - zero entry @xmath46 at position @xmath47 and @xmath48 is the identity matrix .",
    "we denote the @xmath49th row of a matrix @xmath41 by @xmath50 .",
    "the degree of a vector @xmath51}^{r}$ ] is the maximum of the degrees of its components @xmath52 and the degree of a matrix @xmath41 is the sum of its rows degrees @xmath53 .    the _ leading position _ ( lp ) of @xmath40 is the rightmost position of maximal degree @xmath54 . the _ leading coefficient _ ( lc ) of a polynomial @xmath20 is @xmath55 and the _ leading term _ ( lt ) of a vector @xmath40 is @xmath56 .",
    "a matrix @xmath57}^{{r}\\times { r}}$ ] is in _ weak popov form _ ( wpf ) if the leading positions of its rows are pairwise distinct .",
    "e.g. , the following matrix is in wpf since @xmath58 and @xmath59 @xmath60    similar to @xcite , we define an _ accuracy approximation to depth _ @xmath61 of skew polynomials as @xmath62 . for vectors , it is defined as @xmath63 and for matrices row - wise .",
    "e.g. , with @xmath41 as above , @xmath64    we can extend the definition of the length of a polynomial to vectors @xmath40 as @xmath65 and to matrices as @xmath66 . with this notation",
    ", we have @xmath67 , @xmath68 and @xmath69 .",
    "alekhnovich s algorithm @xcite was proposed for transforming matrices over ordinary polynomials @xmath11 $ ] into wpf . here",
    ", we show that , with a few modifications , it also works with skew polynomials . as in the original paper , we prove the correctness of algorithm  [ alg : recursion_dc ] ( main algorithm ) using the auxiliary algorithm  [ alg : base ] .    @xmath70 + [ alg : base ] input : module basis @xmath57}^{{r}\\times { r}}$ ] with @xmath71 + output : @xmath72}^{{r}\\times { r}}$ ] : @xmath73 is in wpf or @xmath74 + 1 .",
    "@xmath75 + 2 . while @xmath71 and @xmath41 is not in wpf + 3 .",
    "find @xmath76 such that @xmath77 and @xmath78 [ line : rb : st_start ] + 4 .",
    "@xmath79 and @xmath80 + 5 .",
    "@xmath81 and @xmath82 [ line : rb : tb ] + 6 .",
    "+    [ thm : base_alg ] algorithm  [ alg : base ] is correct and if @xmath84 , it is in @xmath85 .    inside the while loop ,",
    "the algorithm performs a so - called _ simple transformation _",
    "it is shown in @xcite that such an st on an @xmath15}$]-matrix @xmath41 preserves both its rank and row space ( this does not trivially follow from the @xmath11 $ ] case due to non - commutativity ) and reduces either @xmath86 or @xmath87 . at some point",
    ", @xmath41 is in wpf , or @xmath87 and likewise @xmath88 is reduced by one .",
    "the matrix @xmath83 keeps track of the sts , i.e. multiplying @xmath41 by @xmath89 from the left is the same as applying an st on @xmath41 . at termination , @xmath90 , where @xmath91 is the input matrix of the algorithm .",
    "since @xmath92 can be decreased at most @xmath93 times without changing @xmath88 , the algorithm performs at most @xmath93 sts . multiplying @xmath89 by a matrix @xmath94",
    "consists of scaling a row with @xmath95 and adding it to another ( target ) row . due to the accuracy approximation ,",
    "all monomials of the non - zero polynomials in the scaled and the target row have the same power , implying a cost of @xmath96 for each st .",
    "the claim follows .    we can decrease a matrix degree by at least @xmath97 or transform it into wpf by @xmath97 recursive calls of algorithm  [ alg : base ] .",
    "we can write this as @xmath98 , where @xmath99 for @xmath100 and @xmath101 if @xmath102 . as in @xcite , we speed this method up by two modifications . the first one is a divide-&-conquer ( d&c ) trick , where instead of reducing the degree of a `` @xmath103-reduced '' matrix @xmath73 by @xmath42 as above , we reduce a `` @xmath104-reduced '' matrix by another @xmath105 for an arbitrary @xmath104 . for @xmath106 , the recursion tree has a balanced workload .    [",
    "lem : recursion ] let @xmath107 and @xmath108 .",
    "then , @xmath109 \\cdot { \\mathbf{u}}.\\end{aligned}\\ ] ]    @xmath83 reduces reduces @xmath88 by at least @xmath104 or transforms @xmath41 into wpf .",
    "multiplication by @xmath110 $ ] further reduces the degree of this matrix by @xmath111 ( or @xmath73 in wpf ) .",
    "the second lemma allows to compute only on the top coefficients of the input matrix inside the divide-&-conquer tree , reducing the overall complexity .",
    "[ lem : approx ] @xmath112    arguments completely analogous to the @xmath11 $ ] case of ( * ? ? ?",
    "* lemma  2.7 ) hold .",
    "[ lem : ulength ] @xmath113 contains polynomials of length @xmath114 .",
    "the proof works as in the @xmath11 $ ] case , cf .",
    "* lemma  2.8 ) , by taking care of the fact that @xmath115 for all @xmath116 , @xmath117 .    @xmath118 + input : module basis @xmath57}^{{r}\\times { r}}$ ] with @xmath71 + output : @xmath72}^{{r}\\times { r}}$ ] : @xmath73 is in wpf or @xmath119 + 1 . if @xmath102 , then return @xmath120 + 2 .",
    "@xmath121 and @xmath122 + 3 .",
    "return @xmath123 [ line : matrix : mul:2 ] [ alg : recursion_dc ]    [ thm : main ] algorithm  [ alg : recursion_dc ] is correct and has complexity @xmath124 .",
    "correctness follows from @xmath125 by induction ( for @xmath102 , see theorem  [ thm : base_alg ] ) .",
    "let @xmath126 and @xmath127 .",
    "then , @xmath128    where ( i ) follows from the induction hypothesis , ( ii ) by lemma  [ lem : recursion ] , and ( iii ) by lemma  [ lem : approx ] .",
    "algorithm  [ alg : recursion_dc ] calls itself twice on inputs of sizes @xmath129 .",
    "the only other costly operations are the matrix multiplications in lines  2 and 3 of matrices containing only polynomials of length @xmath114 ( cf .",
    "lemma  [ lem : ulength ] ) . this costs .",
    "thus , we have to compute it naively in cubic time . ]",
    "@xmath93 times @xmath96 multiplications @xmath130 and @xmath93 times @xmath96 additions @xmath131 of polynomials of length @xmath114 , having complexity @xmath124 .",
    "the recursive complexity relation reads @xmath132 by the master theorem , we get @xmath133 . the base case operation @xmath120 with cost @xmath134 is called at most @xmath97 times since it decreases @xmath88 by @xmath42 each time . since @xmath135 , @xmath136 by theorem  [ thm : base_alg ] .",
    "hence , @xmath137 .",
    "the _ orthogonality defect _ @xcite of a square , full - rank , skew polynomial matrix  @xmath41 is @xmath138 , where @xmath139 is the `` determinant degree '' function , see  @xcite . a matrix @xmath41 in wpf",
    "has @xmath140 and @xmath141 is invariant under row operations .",
    "thus , if @xmath94 is in wpf and obtained from @xmath41 by simple transformations , then @xmath142 . with @xmath143 , this implies that @xmath144 is always in wpf .",
    "it was shown in @xcite that @xmath145 from equation has orthogonality defect @xmath146 , which implies the following theorem .",
    "@xmath147 is in wpf .",
    "this implies that we can decode interleaved gabidulin codes in factor is due to the divisions in the decoding algorithm , following the row reduction step ( see footnote  [ fn : test ] ) and can be omitted if @xmath148 . ]",
    "@xmath149 .",
    "table  [ tab : comparison ] compares the complexities of known decoding algorithms for interleaved gabidulin codes .",
    "which algorithm is asymptotically fastest depends on the relative size of @xmath1 and @xmath2 .",
    "usually , one considers @xmath150 , in which case the algorithms in this paper and in @xcite provide  to the best of our knowledge  the fastest known algorithms for decoding interleaved gabidulin codes .       in the case of gabidulin codes ( @xmath154 ) , we obtain an alternative to the _ linearized extended euclidean _ algorithm from @xcite of the same complexity .",
    "the algorithms are equivalent up to the implementation of a simple transformation .",
    "1 s.  puchinger , j.  rosenkilde  n  nielsen , w.  li , and v.  sidorenko , `` row reduction applied to rank - metric and subspace codes , '' _ des .",
    "codes cryptogr .",
    "_ , doi : 10.1007/s10623 - 016 - 0257 - 9 , arxiv preprint 1510.04728 , 2016",
    ". o.  ore , `` theory of non - commutative polynomials , '' _ ann .",
    "_ , pp . 480508 , 1933 . s.  puchinger and a.  wachter - zeh , `` fast operations on linearized polynomials and their applications in coding theory , '' _ submitted to : journal of symbolic computation _",
    ", 2016 , arxiv preprint 1512.06520 .",
    "v.  sidorenko and m.  bossert , `` fast skew - feedback shift - register synthesis , '' _ des .",
    "codes cryptogr .",
    "_ , vol .",
    "70 , no .  1 - 2 , pp . 55 - 67 , 2014",
    ". v.  sidorenko , l.  jiang , and m.  bossert , `` skew - feedback shift - register synthesis and decoding interleaved gabidulin codes , '' _ ieee trans .",
    "inf . theory _ ,",
    "57 , no .  2 ,",
    "pp . 621632 , 2011 .",
    "a.  wachter - zeh , `` decoding of block and convolutional codes in rank metric , '' ph.d .",
    "dissertation , ulm university and university of rennes , 2013 .",
    "m.  alekhnovich , `` linear diophantine equations over polynomials and soft decoding of reed  solomon codes , '' _ ieee trans .",
    "inf . theory _ ,",
    "51 , no .  7 , pp .",
    "22572265 , 2005 ."
  ],
  "abstract_text": [
    "<S> we prove that alekhnovich s algorithm can be used for row reduction of skew polynomial matrices . </S>",
    "<S> this yields an @xmath0 decoding algorithm for @xmath1-interleaved gabidulin codes of length @xmath2 , where @xmath3 is the matrix multiplication exponent , improving in the exponent of @xmath2 compared to previous results .    .... </S>",
    "<S> ....    gabidulin codes , characteristic zero , low - rank matrix recovery </S>"
  ]
}