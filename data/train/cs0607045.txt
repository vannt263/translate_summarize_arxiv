{
  "article_text": [
    "the classical one - dimensional bin packing is one of the oldest and most well - studied problems in computer science @xcite , @xcite . in the early 1970 s it was one of the first combinatorial optimization problems for which the idea of worst - case performance guarantees was investigated .",
    "it was also in this domain that the idea of proving lower bounds on the performance of online algorithm was first developed . in this paper",
    ", we consider a generalization of the classical bin packing problem : hypercube packing problem .",
    "[ [ problem - definition . ] ] * problem definition .",
    "* + + + + + + + + + + + + + + + + + + + + +    let @xmath0 be an integer .",
    "we receive a sequence @xmath1 of items @xmath2 .",
    "each item @xmath3 is a @xmath4-dimensional hypercube and has a fixed size , which is @xmath5 , i.e. , @xmath6 is the size of @xmath3 in any dimension .",
    "we have an infinite number of bins , each of which is a @xmath4-dimensional unit hypercube .",
    "each item must be assigned to a position @xmath7 of some bin , where @xmath8 and @xmath9 for @xmath10 .",
    "further , the positions must be assigned in such a way that no two items in the same bin overlap .",
    "note that for @xmath11 the problem reduces to the classic bin packing problem . in this paper",
    ", we study the _ online _ version of this problem , i.e. , each item must be assigned in turn , without knowledge of the next items .",
    "[ [ asymptotic - competitive - ratio . ] ] * asymptotic competitive ratio . * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to evaluate an online algorithms for bin packing , we use the standard measure _ asymptotic competitive ratio _ which is defined as follows .    given an input list _",
    "l _ and an online algorithm @xmath12 , we denote by @xmath13 and @xmath14 , respectively , the cost ( number of bins used ) by an optimal ( offline ) algorithm and the cost by online algorithm @xmath12 for packing list @xmath15 .",
    "the _ asymptotic competitive ratio _",
    "@xmath16 of algorithm @xmath12 is defined by @xmath17    [ [ previous - results . ] ] * previous results . * + + + + + + + + + + + + + + + + + + +    on the classic online bin packing , johnson , demers , ullman , garey and graham @xcite showed that the first fit algorithm has the competitive ratio 1.7 .",
    "yao @xcite gave an upper bound of 5/3 .",
    "lee and lee @xcite showed the harmonic algorithm has the competitive ratio 1.69103 and improved it to 1.63597 .",
    "ramanan , brown , lee and lee @xcite improved the upper bound to 1.61217 .",
    "currently , the best known upper bound is 1.58889 by seiden @xcite . on the lower bounds , yao @xcite showed no online algorithm has performance ratio less that 1.5 .",
    "brown @xcite and liang @xcite independently improved this lower bound to 1.53635 .",
    "the lower bound currently stands at 1.54014 , due to van vliet @xcite .",
    "on online hypercube packing , coppersmith and raghavan @xcite showed an upper bound of 43/16 = 2.6875 for online square packing and an upper bound 6.25 for online cube packing .",
    "the upper bound for square packing was improved to 395/162 @xmath18 2.43828 by seiden and van stee @xcite . for online cube packing , miyazawa and",
    "wakabayashi @xcite showed an upper bound of 3.954 .",
    "epstein and van stee @xcite gave an upper bound of 2.2697 for square packing and an upper bound of 2.9421 for online cube packing . by using a computer program ,",
    "the upper bound for square packing was improved to 2.24437 by epstein and van stee @xcite .",
    "they @xcite also gave lower bounds of 1.6406 and 1.6680 for square packing and cube packing , respectively .",
    "[ [ our - contributions . ] ] * our contributions .",
    "* + + + + + + + + + + + + + + + + + + + +    when the harmonic algorithm @xcite is extended into the online hypercube packing problem , the items of sizes @xmath19 are still the crucial items related to the asymptotic competitive ratio , where @xmath20 is sufficiently small . using the techniques in one dimensional bin packing , epstein and",
    "van stee @xcite combined the items of size in @xmath21 $ ] with the items of size in @xmath22 $ ] and improved the harmonic algorithm for hypercube packing , where @xmath23 is a specified number in @xmath24 . in this paper",
    ", we do not only consider the combinatorial packing for the items in @xmath21 $ ] and @xmath22 $ ] , but also other crucial items .",
    "based on the techniques in one dimensional bin packing algorithm super harmonic by seiden @xcite , we classify all the items into 17 groups and give a framework for online hypercube packing .",
    "to analyse our algorithm , we give a weighting system consisting of four weighting functions . by the weighting functions ,",
    "we show that for square packing , the asymptotic competitive ratio of our algorithm is at most 2.1439 which is better than 2.24437@xcite , for cube packing , the ratio is at most 2.6852 , which is also better than 2.9421@xcite .    * definition * : if an item @xmath3 of size ( side length ) @xmath25 , where @xmath26 is a fixed integer , then call @xmath3 _ small _ , otherwise _",
    "the following algorithm for packing small items is from @xcite , @xcite .",
    "the key ideas are below :    1 .",
    "classify all _ small _ squares into @xmath26 groups . in detail , for an item @xmath3 of size @xmath6 , we classify it into group @xmath27 such that @xmath28 $ ] , where @xmath29 and @xmath30 is an integer .",
    "exclusively pack items of the same group into bins , i.e. , each bin is used to pack items belonged to the same group . during packing",
    ", one bin may be partitioned into sub - bins .",
    "* definition * : an item is defined to be of type @xmath27 if it belongs to group @xmath27 . a sub - bin which received an item is said to be _",
    "used_. a sub - bin which is not used and not cut into smaller sub - bins is called _ empty_. a bin",
    "is called _ active _ if it can still receive items , otherwise _",
    "closed_.    given an item @xmath3 of type @xmath27 , where @xmath28 $ ] , _ algorithm _",
    "assignsmall(@xmath27 ) works as followings .    1 .",
    "if there is an empty sub - bin of size @xmath31 , then the item is simply packed there .",
    "2 .   else , in the current bin , if there is no empty sub - bin of size @xmath32 for @xmath33 , then close the bin and open a new bin and partition it into sub - bins of size @xmath34 . if @xmath35 then pack the item in one of sub - bins of size @xmath34 . else goes to next step .",
    "3 .   take an empty sub - bin of size @xmath32 for a maximum @xmath33 .",
    "partition it into @xmath36 identical sub - bins .",
    "if the resulting sub - bins are larger than @xmath31 , then take _ one _ of them and partition it in the same way .",
    "this is done until sub - bins of size @xmath31 are reached",
    ". then the item is packed into one such sub - bin .",
    "[ lemma : small ] in the above algorithm ,    \\i ) at any time , there are at most @xmath26 _ active _ bins .",
    "\\ii ) in each closed bin of type @xmath37 , the occupied volume is at least @xmath38 .",
    "so , roughly speaking , a small item with size @xmath39 takes at most @xmath40 bin .",
    "the key points in our online algorithm are    1 .",
    "divide all items into _ small _ and _ large _ groups . 2 .",
    "pack small items by algorithm assignsmall , pack large items by an extended super harmonic algorithm .    before giving our algorithm",
    ", we first give some definitions and descriptions about the algorithm , which are similar with the ones in @xcite , but some definitions are different from the ones in @xcite .    * classification of large items * : given an integer @xmath42 , let @xmath43 , where @xmath44 is a fixed integer .",
    "we define the interval @xmath45 to be @xmath46 $ ] for @xmath47 and say a large item @xmath3 of size @xmath6 has type @xmath27 if @xmath48 .    * definition * : an item of size @xmath49 has type @xmath50 , where @xmath51    * parameters in algorithm @xmath41 * : an instance of the algorithm is described by the following parameters : integers @xmath44 and @xmath52 ; real numbers @xmath53 , @xmath54 $ ] and @xmath55 , and a function @xmath56 .",
    "next , we give the operation of our algorithm , essentially , which is quite similar with the super harmonic algorithm @xcite . each _ large _ item of type @xmath57 is assigned a color , _ red _ or _ blue_. the algorithm uses two sets of counters , @xmath58 and @xmath59 , all of which are initially zero .",
    "@xmath60 keeps track of the total number of type @xmath27 items .",
    "@xmath61 is the number of type @xmath27 items which get colored red . for @xmath62 ,",
    "the invariant @xmath63 is maintained , i.e. the percentage of type @xmath27 items colored red is approximately @xmath64 .",
    "we first introduce some parameters used in super harmonic algorithm , then give the corresponding ones for @xmath4-dimensional packing .",
    "in one dimensional packing , a bin can be placed at most @xmath65 items with size @xmath66 . after packing @xmath67 type @xmath27 items , there is @xmath68 space left .",
    "the rest space can be used for red items .",
    "however , we sometimes use less than @xmath69 in a bin in order to simplify the algorithm and its analysis , i.e. , we use @xmath70 instead of the set of @xmath69 , for all @xmath27 .",
    "@xmath71 is the amount of space used to hold red items in a bin which holds blue items of type @xmath27 .",
    "we therefore require that @xmath72 satisfy @xmath73 .",
    "@xmath74 indicates that no red items are accepted . to ensure that every red item potentially can be packed , we require that @xmath75 for all @xmath27 such that @xmath76 , that is , there are no red items of type @xmath27",
    ". define @xmath77 if @xmath78 and @xmath79 , otherwise .",
    "this is the number of red item of type @xmath27 placed in a bin .    in @xmath4-dimensional packing , we place @xmath80 blue items of type @xmath27 into a bin and introduce a new parameter @xmath81 instead of @xmath82 .",
    "let @xmath83 this is the number of red items of type @xmath27 that the algorithm places together in a bin . in details ,",
    "if @xmath76 , then @xmath84 , i.e. , we do not pack type @xmath27 items as red items .",
    "so , in this case , we require @xmath85 . else if @xmath86 , then @xmath87 . if @xmath88 , we set @xmath89 .    here",
    ", we illustrate the structure of a bin for @xmath90 .    .",
    "the amount of area left is @xmath91 .",
    "the amount of this area actually used for red items is @xmath92 , where @xmath93 . ]    * naming bins : * bins are named as follows : @xmath94 we call these groups _ monochromatic _ , _ indeterminate blue _ , _ indeterminate red _ and _ bichromatic _ , respectively .",
    "and we call the monochromatic and bichromatic groups _ final _ groups",
    ".    the monochromatic group @xmath27 contains bins that hold only blue items of type @xmath27 .",
    "there is only one open bin in each of these groups ; this bin has fewer than @xmath80 items .",
    "the closed bins all contain @xmath80 items .",
    "the bichromatic group @xmath95 contains bins that contain blue items of type @xmath27 along with red items of type @xmath57 .",
    "a closed bin in this group contains @xmath80 type @xmath27 items and @xmath96 type @xmath57 items .",
    "there are at most three open bins .",
    "the indeterminate blue group @xmath97 contains bins that hold only blue items of type @xmath27 .",
    "these bins are all open , but only one has fewer than @xmath80 items .",
    "the indeterminate red group @xmath98 contains bins that hold only red items of type @xmath57 .",
    "these bins are all open , but only one has fewer than @xmath96 items .",
    "essentially , the algorithm tries to minimize the number of indeterminate bins , while maintaining all the aforementioned invariants .",
    "that is , we try to place red and blue items together whenever possible ; when this is not possible we place them in indeterminate bins in hope that they can later be so combined .",
    "* algorithm @xmath41 * : a formal description of algorithm @xmath41 is given as blow :    initialize @xmath99 and @xmath100 for @xmath101 .    for a small item @xmath3 ,",
    "call algorithm assignsmall .    for a large item @xmath3 :    @xmath102 , @xmath103 .",
    "if @xmath104 :    @xmath105 .",
    "color @xmath3 red .",
    "if there is an open bin in group @xmath106 with fewer than @xmath81 type @xmath27 items , then pack @xmath3 in this bin .    if there is an open bin in group @xmath107 with fewer than @xmath81 type @xmath27 items , then pack @xmath3 in this bin .",
    "else if there is some bin in group @xmath108 such that @xmath109 then place @xmath3 in it and change the group of this bin to @xmath107 .",
    "otherwise , open a new group @xmath110 bin and place @xmath3 in it .",
    "else :    color @xmath3 blue .",
    "if @xmath111 :    if there is an open bin in group @xmath27 with fewer than @xmath80 items , then place @xmath3 in it .    otherwise , open a new group @xmath27 bin and pack @xmath3 there .",
    "else :    if , for any @xmath57 , there is an open bin @xmath95 with fewer than @xmath80 items , then place @xmath3 in this bin .    else ,",
    "if there is some bin in group @xmath97 with fewer than @xmath80 items , then place @xmath3 in this bin .",
    "else , if there is some bin in group @xmath112 such that @xmath113 then pack @xmath3 in it and change the group of this bin to @xmath95 .",
    "otherwise , open a new group @xmath114 bin and pack @xmath3 there .",
    "in this section , we fix the parameters in the framework given in the last section for square packing and cube packing respectively . then we analyse the competitive ratios by a corresponding weighting system consisting of four weighting functions .",
    "let @xmath115 , i.e. , a _ small _ item has its side length as most @xmath116 . and the parameters in @xmath41 are given in the following tables .",
    "first we classify all the items into 17 groups by fixing the values of @xmath66 , where @xmath117 .",
    "then we calculate the number of blue type @xmath27 in a bin , @xmath118 .",
    "finally , we define the set @xmath70 and the function @xmath119 , which are related to how many red items @xmath120 can be accepted in a bin , where @xmath121 .",
    "note that @xmath64 which is the percentage of type @xmath27 items colored red will be given later .",
    "for square packing , we use a set of @xmath64 .",
    "while for cube packing , we use another set of @xmath64 .",
    "@xmath122 &   \\beta_i &   \\delta_i & \\phi(i ) & \\gamma_i \\\\",
    "\\hline     1   & ( 0.7 , 1 ]     & 1   &   0       &    0   & 0     \\\\",
    "% % \\hline     2   & ( 0.65 , 0.7 ] & 1   &   0.3     &    2   &    0 \\\\   % %   \\hline     3   & ( 0.60 , 0.65 ] & 1   &   0.35   &   3    &   0   \\\\ % %   \\hline    4    & ( 0.5 ,   0.60 ] & 1   &   0.4    &   4    &   0   \\\\",
    "% % \\hline    5    & ( 0.4 , 0.5 ] & 2    &   0      & 0     &   0 \\\\ % %   \\hline   6     & ( 0.35 , 0.4 ] & 2    &   0.2    & 1     &   1   \\\\ % %   \\hline   7     & ( 1/3 ,   0.35 ] & 2   &   0.3    & 2     &   1    \\\\",
    "% % \\hline   8     & ( 0.30 , 1/3 ]   & 3   &   0      & 0     &   0   \\\\",
    "% % \\hline   9     & ( 1/4 , 0.30 ]   & 3   &   0.1    & 0     &   1 \\\\ % % \\hline   10    & ( 1/5 , 1/4 ]   & 4   &   0      & 0     &   1 \\\\ % % % \\hline   11    & ( 1/6 , 1/5 ]   & 5   &   0      & 0     &   1   \\\\",
    "% % \\hline   12    & ( 1/7 ,   1/6 ]   & 6   &   0      & 0     &   1   \\\\   13    & ( 1/8 ,   1/7 ]   & 7   &   0      & 0     &   1   \\\\",
    "14    & ( 1/9 ,   1/8 ]   & 8   &   0      & 0     &   1   \\\\   15    & ( 0.1 ,   1/9 ]   & 9   &   0      & 0     &   1    \\\\   16    & ( 1/11 , 0.1 ]   & 10 &   0      & 0     &   2   \\\\   17    & ( 0 ,    1/11 ]   & * &   *      & *      &   *   \\\\",
    "\\hline   \\end{array } \\hspace{3 mm } \\begin{array}{|c|c|c| }   \\hline    j = \\phi(i ) & \\delta_j   &   \\textrm{red items accepted }",
    "\\\\   \\hline    1 &   0.20     &   11 .. 16    \\\\    2 &   0.30     &   9 .. 16    \\\\    3 &   0.35     &   7 , 9 .. 16    \\\\    4 &   0.40     &   6 .. 7 , 9 .. 16",
    "\\hline \\end{array}\\ ] ]    * observation : * by the above tables , in any dimension of a @xmath123 bin , the distance between the type 4 item and the opposite edge ( face ) of the bin is at least @xmath124 , since we pack a type 4 item in a corner of a bin .",
    "so , all red items with size at most 0.4 can be packed in @xmath123 bins .",
    "in the same ways , all red items with size at most 0.35 can be packed in @xmath123 and @xmath125 bins , all red items with size at most 0.30 can be packed in @xmath123 , @xmath125 , @xmath126 and @xmath127 bins , all red items with size at most 0.2 can be packed in @xmath123 , @xmath125 , @xmath126 , @xmath127 , @xmath128 bins .",
    "next we define the weight function @xmath129 for a given item @xmath3 with size @xmath39 .",
    "roughly speaking , a weight of an item is the maximal portion of a bin that it can occupy .",
    "given a small item @xmath3 with size @xmath39 , by lemma [ lemma : small ] , it occupies a @xmath130 bin .",
    "so , we define @xmath131    given a large item @xmath3 , we consider four cases to define its weight .",
    "let @xmath132 and @xmath133 be the number of bins containing blue items of type @xmath27 and red items of type @xmath27 , respectively .",
    "let @xmath134 be the number of indeterminate red group bins , i.e. , some bins like @xmath106 .",
    "if @xmath135 then there are some @xmath136 bins .",
    "let @xmath137 which is the type of the smallest red item in an indeterminate red group bin .",
    "let @xmath138 be the number of bins used by @xmath41 .",
    "* case 1 * : @xmath139 , i.e. , no indeterminate red bins .",
    "then every red item is packed with one or more blue items .",
    "therefore @xmath140 where @xmath141 is the number of bins for small items .",
    "since there are a constant number of active bins and every closed blue bin @xmath142 or @xmath143 contains @xmath144 items , we define the weighting function as below : @xmath145    * case 2 * : @xmath146 and @xmath147",
    ". then there are some bins @xmath148 and no other bins @xmath112 bins , where @xmath149 . since a type 4 item can be packed into a bin @xmath148 , it is impossible to have bins @xmath150 .",
    "if we count all @xmath151 bins as red bins , then @xmath152 else we count all @xmath151 bins as blue bins then    @xmath153 since there are a constant number of active bins and every closed blue bin @xmath142 or @xmath143 contains @xmath144 items , every closed red bin @xmath107 or @xmath106 contains @xmath154 items , we define the weighting functions for two subcases as below : @xmath155 and @xmath156    * case 3 * : @xmath146 and @xmath157",
    ". then there are some bins @xmath158 and no other bins @xmath112 , where @xmath159 . since a type 4 or a type 3 item can be packed into a bin @xmath158 , it is impossible to have bins @xmath150 and @xmath160 .",
    "if we count all @xmath151 and @xmath161 bins as red bins , then @xmath162 else we count all @xmath151 and @xmath161 bins as blue bins then    @xmath163 we define the weighting functions for two subcases as below : @xmath164 and @xmath165    * case 4 * : @xmath146 and @xmath166 .",
    "then there are some bins @xmath167 .",
    "since a type 2,3,4,7 item can be packed into a bin @xmath167 , it is impossible to have bins @xmath168 , @xmath160 , @xmath150 , @xmath169 .",
    "if we count these bins @xmath170 , @xmath161 , @xmath171 , @xmath172 as red bins , then @xmath173 we define the weighting function as below : @xmath174    * definition * : a set of items @xmath175 is a feasible set if all items in it can be packed into a bin . and , @xmath176    over all feasible sets @xmath175 , let @xmath177 and define @xmath178    we defined four sets of weighting functions for all items .",
    "this is a weighting system , which is a special case of general weighting system defined in @xcite .",
    "so , the following lemma follows directly from @xcite .",
    "[ lemma : upper ] the asymptotic performance ratio of @xmath41 is upper bounded by @xmath179 .      in this subsection ,",
    "we fix the parameters @xmath64 for square packing and cube packing respectively , and get the upper bounds of the asymptotic competitive ratios .",
    "* definition * let @xmath180 be the number of type @xmath27 items in a feasible set @xmath175 .",
    "given an item @xmath3 with size @xmath39 , define an efficient function @xmath181 as @xmath182 .",
    "the asymptotic performance ratio of @xmath41 for square packing is at most 2.1439 .    for square packing",
    ", we set parameters @xmath64 according to the following table .",
    "@xmath183    based on the values in the followint two tables , we calculate the upper bound of @xmath184 .",
    "@xmath185 & w_{1,1}(p ) & e_{1,1}(p )   & w_{2,1}(p ) & e_{2,1}(p ) & w_{2,2}(p ) & e_{2,2}(p )   \\\\   \\hline        1 & ( 0.7,1 ]    & 1      & 2.05    &    1      & 2.05    & 1      & 2.05      \\\\        2 & ( 0.65,0.7 ] & 1      & 2.37    &    1      & 2.37    & 1      & 2.37      \\\\        3 & ( 0.6,0.65 ] &   1      & 2.7778 &    1     & 2.7778 &    1      & 2.7778    \\\\        4 & ( 0.5,0.6 ] & 1      & 4       & 0        & 0       & 1      & 4          \\\\        5 & ( 0.4,0.5 ] & 1/4    & 1.5625 & 1/4      & 1.5625 & 1/4    & 1.5625      \\\\        6 & ( 0.35,0.4 ] & 0.22   & 1.8    & 0.26     & 2.123    & 0.26   & 2.123     \\\\        7 & ( 1/3,0.35 ] & 0.2    & 1.8       & 0.8/3    & 2.4    &   0.2      & 1.8    \\\\        8 & ( 0.3,1/3 ] &   1/9   & 1.235 &   1/9      & 1.235   &   1/9    & 1.235      \\\\        9 & ( 1/4,0.3 ] & 0.0829 & 1.327 & 0.1338 & 2.141 & 0.0829 & 1.327   \\\\     10 .. 17 & ( 0,1/4 ] & 1.235x^2 & 1.235   & 1.99x^2 & 1.99    & 1.235x^2 & 1.235     \\\\   % %      11 & ( 1/6,1/5 ] & 0.034 & 1.224    & 0.05067 & 1.824 & 0.034 & 1.224 \\\\ % %       12 & ( 1/7,1/6 ] & 0.025 & 1.225   & 0.03410   & 1.6705 & 0.025 & 1.225 \\\\        % %       13 & ( 1/8,1/7 ] & 0.01837 & 1.1756 & 0.02606   & 1.6679   & 0.01837 & 1.1756 \\\\    % %       14 & ( 1/9,1/8 ] & 0.9/64 & 1.2   & 0.02073   & 1.6791 & 0.9/64 & 1.2   \\\\     % %       15 & ( 0.1,1/9 ] & 0.1/9 & 1.2    & 0.017    & 1.7    &   0.1/9   & 1.2   \\\\          % %       16 & ( 1/11,0.1 ] & 0.0095 & 1.2   & 0.01089   & 1.3176   & 0.0095 & 1.2   \\\\    % %       17 & ( 0,1/11 ] & 1.2x^2 & 1.2   & 1.2x^2    & 1.2      & 1.2x^2   & 1.2 \\\\      \\hline   \\end{array}\\ ] ]    [ [ case-1 ] ]   case 1 : + + + + + + + +    @xmath186 .",
    "if @xmath187 , i.e. , no type @xmath188 items in @xmath175 , then @xmath189 else @xmath190 . then @xmath191 and @xmath192 , @xmath193 the last inequality follows from @xmath194 , @xmath195 and @xmath196 .",
    "[ [ case-2 ] ]   case 2 : + + + + + + + +    @xmath197 .",
    "if @xmath187 , i.e. , no type @xmath188 items in @xmath175 , then @xmath198 else @xmath199 . then no type @xmath200 items in @xmath175 .",
    "@xmath201 else @xmath202",
    ". then no type @xmath203 items in @xmath175 and @xmath204 and @xmath192 , @xmath205 the last inequality follows from @xmath195 and @xmath196 .",
    "else @xmath206 .",
    "then no type @xmath207 items in @xmath175 .",
    "@xmath208    @xmath185 & w_{3,1}(p ) & e_{3,1}(p )   & w_{3,2}(p ) & e_{3,2}(p )   & w_{4,1}(p ) & e_{4,1}(p ) \\\\",
    "\\hline        1 & ( 0.7,1 ]      &    1      & 2.05    & 1      & 2.05    & 1      & 2.05    \\\\        2 & ( 0.65,0.7 ]   &    1      & 2.37    & 1      & 2.37    & 0      & 0       \\\\        3 & ( 0.6,0.65 ]   &    0      & 0       & 1      & 2.7778 & 0      & 0       \\\\        4 & ( 0.5,0.6 ]    & 0        & 0       & 1      & 4       & 0      & 0     \\\\        5 & ( 0.4,0.5 ]    & 1/4      & 1.5625 & 1/4    & 1.5625 & 1/4    & 1.5625\\\\        6 & ( 0.35,0.4 ] & 0.26     & 2.123   & 0.26   & 2.123   & 0.26   & 2.123   \\\\        7 & ( 1/3,0.35 ]   & 0.8/3    & 2.4     & 0.8/3 & 2.4     & 0.2/3 & 0.6    \\\\        8 & ( 0.3,1/3 ]    &   1/9     & 1.235   &   1/9   & 1.235   &   1/9   &   1.235\\\\        9 & ( 1/4,0.3 ]    & 0.1338   & 2.141   & 0.0829 & 1.327 & 0.1338 & 2.141 \\\\   10 .. 17 & ( 1/5,1/4 ]    & 1.99x^2   & 1.99    & 1.235x^2 & 1.235 & 1.99x^2 & 1.99",
    "\\\\ % %       11 & ( 1/6,1/5 ]    & 0.05067 & 1.824   & 0.034 & 1.224   & 0.05067 & 1.824 \\\\ % %       12 & ( 1/7,1/6 ]    & 0.03410   & 1.6705 & 0.025 & 1.225 & 0.03410 & 1.6705 \\\\    % %       13 & ( 1/8,1/7 ]    & 0.02606 & 1.6679 & 0.01837 & 1.1756 & 0.02606 & 1.6679 \\\\ % %       14 & ( 1/9,1/8 ]    & 0.02073 & 1.6791 & 0.9/64 & 1.2 & 0.02073   & 1.6791 \\\\     % %       15 & ( 0.1,1/9 ]    & 0.017    & 1.7     &   0.1/9   & 1.2 & 0.017    & 1.7   \\\\    % %       16 & ( 1/11,0.1 ]   & 0.01089 & 1.3176 & 0.0095 & 1.2 & 0.01089   & 1.3176 \\\\   % %       17 & ( 0,1/11 ]     & 1.2x^2    & 1.2    & 1.2x^2   & 1.2    & 1.2x^2   & 1.2 \\\\       \\hline   \\end{array}\\ ] ]    [ [ case-3 ] ]   case 3 : + + + + + + + +    @xmath209 .",
    "if @xmath210 , i.e. , no type @xmath211 items in @xmath175 , then @xmath212 , @xmath213 else @xmath214 then @xmath215 , where @xmath216 , @xmath217 else @xmath199 . then no type @xmath200 items in @xmath175 , @xmath218 and @xmath219 .",
    "@xmath220 else @xmath221",
    ". then no type @xmath207 items in @xmath175 .",
    "@xmath222    [ [ case-4 ] ]   case 4 : + + + + + + + +    @xmath223 .",
    "so , @xmath224 .",
    "the asymptotic performance ratio of @xmath41 for cube packing is at most 2.6852 .    for cube packing , we set parameters @xmath64 and @xmath81 in the following table .",
    "@xmath225 here we set @xmath226 for @xmath227 .",
    "so , their weights are defined as @xmath228 .",
    "we first give two tables and then use them to calculate @xmath179 .",
    "@xmath185 & w_{1,1}(p ) & e_{1,1}(p )   & w_{2,1}(p ) & e_{2,1}(p ) & w_{2,2}(p ) & e_{2,2}(p ) \\\\   \\hline        1 & ( 0.7,1 ]     & 1      & 2.9155 &    1      & 2.9155 & 1       & 2.9155     \\\\        2 & ( 0.65,0.7 ] & 1      & 3.65    &    1      & 3.65    & 1       & 3.65      \\\\        3 & ( 0.6,0.65 ] & 1      & 4.63    &    1      &   4.63   & 1       &   4.63      \\\\        4 & ( 0.5,0.6 ]   & 1      & 8       & 0        & 0       &     1    & 8      \\\\        5 & ( 0.4,0.5 ]   & 1/8    & 1.9532 & 1/8      & 1.9532 & 1/8     & 1.9532 \\\\        6 & ( 0.35,0.4 ] & 0.11   & 2.5656 & 0.1272   & 2.966   & 0.1272 &   2.966   \\\\        7 & ( 1/3,0.35 ] & 0.1    & 2.7     & 0.1286   & 3.472   &    0.1   & 2.7   \\\\        8 & ( 0.3,1/3 ]   & 1/27   & 1.372   &   1/27    & 1.372   &   1/27   & 1.372 \\\\        9 & ( 1/4,0.3 ]   & 0.025 & 1.6     & 0.04211   & 2.6948 & 0.025   & 1.6",
    "\\\\        10 & ( 1/5,1/4 ] & 0.0124 & 1.55    & 0.01802 & 2.252   & 0.0124 & 1.55     \\\\        11 & ( 1/6,1/5 ] & 0.0068 & 1.4688 & 0.0093   & 2       & 0.0068 & 1.4688   \\\\ % %       12   & ( 1/7,1/6 ] & 1/216 & 1.59 & 1/216 & 1.59   & 1/216 & 1.59   & 1/216 & 1.59   \\\\        % %       13 & ( 1/8,1/7 ] & 1/7 ^ 3 & 1.5    & 1/7 ^ 3 & 1.5    & 1/7 ^ 3 & 1.5    & 1/7 ^ 3 & 1.5    \\\\    % %       14 & ( 1/9,1/8 ] & 1/8 ^ 3 & 1.43 & 1/8 ^ 3 & 1.43 & 1/8 ^ 3 & 1.43   & 1/8 ^ 3 & 1.43 \\\\     % %       15 & ( 0.1,1/9 ] & 1/9 ^ 3 & 1.38 & 1/9 ^ 3 & 1.38 & 1/9 ^ 3 & 1.38   & 1/9 ^ 3 & 1.38    \\\\          % %       16 & ( 1/11,0.1 ] & 0.001 & 1.331 & 0.001 & 1.331 & 0.001 & 1.331   & 0.001 & 1.331   \\\\         12 .. 17 & ( 0,1/6 ] & 1.59x^3 & 1.59 & 1.59x^3 & 1.59 & 1.59x^3 & 1.59   \\\\   \\hline   \\end{array}\\ ] ]    [ [ case-1 - 1 ] ]   case 1 : + + + + + + + +    @xmath229 .",
    "if @xmath230 , i.e. , no type @xmath211 items in @xmath175 , then @xmath231 , @xmath232 else @xmath233 . then @xmath215 , where @xmath216 , @xmath234 else @xmath199 .",
    "then no type @xmath200 items in @xmath175 and @xmath235 , @xmath236 else @xmath237 .",
    "then no type @xmath203 items in @xmath175 and @xmath238 , @xmath239 else @xmath240 .",
    "then @xmath241 and @xmath242 , @xmath243 the last inequality follows from @xmath244 and @xmath245 .",
    "[ [ case-2 - 1 ] ]   case 2 : + + + + + + + +    @xmath246 .    if @xmath247 , i.e. , no type @xmath211 items in @xmath175 , then @xmath231 , @xmath248 else @xmath249",
    ". then no type @xmath250 items in @xmath175 , @xmath251 else @xmath202",
    ". then no type @xmath203 items in @xmath175 and @xmath238 , @xmath252 else @xmath206",
    ". then no type @xmath207 items in @xmath175 and @xmath238 , @xmath253 the last inequality holds for @xmath254 and @xmath255 .",
    "@xmath185 &   w_{3,1}(p ) & e_{3,1}(p )   & w_{3,2}(p ) & e_{3,2}(p )   & w_{4,1}(p ) & e_{4,1}(p ) \\\\   \\hline        1   & ( 0.7,1 ]    &    1      & 2.9155 & 1       & 2.9155 & 1       & 2.9155    \\\\        2   & ( 0.65,0.7 ] &    1      & 3.65    & 1       & 3.65    & 0       & 0      \\\\        3   & ( 0.6,0.65 ] & 0        & 0       &    1     &   4.63   & 0       & 0       \\\\        4   & ( 0.5,0.6 ] & 0        & 0       & 1       & 8       & 0       & 0    \\\\        5   & ( 0.4,0.5 ] & 1/8      & 1.9532 & 1/8     & 1.9532 & 1/8     & 1.9532 \\\\        6   & ( 0.35,0.4 ] & 0.1272   & 2.966   & 0.1272 &   2.966 & 0.1272 & 2.966   \\\\        7   & ( 1/3,0.35 ] & 0.1286   & 3.472   & 0.1286 & 3.472   & 0.03    & 0.81 \\\\        8   & ( 0.3,1/3 ] &   1/27    & 1.372   &   1/27   & 1.372   &   1/27   & 1.372 \\\\        9   & ( 1/4,0.3 ] & 0.04211 & 2.6948 & 0.025   & 1.6     & 0.04211 & 2.6948",
    "\\\\        10 & ( 1/5,1/4 ] & 0.01802 & 2.252   & 0.0124 & 1.55    & 0.01802 & 2.252   \\\\        11 & ( 1/6,1/5 ] & 0.0093   & 2       & 0.0068 & 1.4688 & 0.0093 & 2",
    "\\\\ % %       12   & ( 1/7,1/6 ] & 1/216 & 1.59 & 1/216 & 1.59   & 1/216 & 1.59   & 1/216 & 1.59   \\\\        % %       13 & ( 1/8,1/7 ] & 1/7 ^ 3 & 1.5    & 1/7 ^ 3 & 1.5    & 1/7 ^ 3 & 1.5    & 1/7 ^ 3 & 1.5    \\\\    % %       14 & ( 1/9,1/8 ] & 1/8 ^ 3 & 1.43 & 1/8 ^ 3 & 1.43 & 1/8 ^ 3 & 1.43   & 1/8 ^ 3 & 1.43 \\\\     % %       15 & ( 0.1,1/9 ] & 1/9 ^ 3 & 1.38 & 1/9 ^ 3 & 1.38 & 1/9 ^ 3 & 1.38   & 1/9 ^ 3 & 1.38    \\\\          % %       16 & ( 1/11,0.1 ] & 0.001 & 1.331 & 0.001 & 1.331 & 0.001 & 1.331   & 0.001 & 1.331   \\\\",
    "12 .. 17 & ( 0,1/6 ] & 1.59x^3 & 1.59 & 1.59x^3 & 1.59 & 1.59x^3 & 1.59   \\\\   \\hline   \\end{array}\\ ] ]    [ [ case-3 - 1 ] ]   case 3 : + + + + + + + +    @xmath256 .",
    "if @xmath210 , i.e. , no type @xmath211 items in @xmath175 , then @xmath231 , @xmath257 else @xmath214 . then @xmath215 , where @xmath216 , @xmath258    else @xmath199 .",
    "then no type @xmath200 items in @xmath175 and @xmath235 , @xmath259    else @xmath221 .",
    "then no type @xmath260 items in @xmath175 .",
    "@xmath261    [ [ case-4 - 1 ] ]   case 4 : + + + + + + + +    @xmath262 .    if @xmath210 , i.e. , no type @xmath211 items in @xmath175 , @xmath263 and @xmath264 , @xmath265 else @xmath214",
    ". then @xmath215 , where @xmath216 . and @xmath266 , @xmath267 else @xmath190 . then @xmath268 , @xmath269    so , @xmath270 .",
    "in this page , we reduce the gaps between the upper and lower bounds of online square packing and cube packing . but the gaps are still large .",
    "it seems possible to use computer proof as the one in @xcite to get a more precise upper bound .",
    "but , the analysis becomes more complicated and more difficult than the one in @xcite , since we are faced to solve a two dimensional knapsack problem , rather than one dimensional knapsack problem @xcite .",
    "so , how to reduce the gaps is a challenging open problem ."
  ],
  "abstract_text": [
    "<S> in this paper , we study online multidimensional bin packing problem when all items are hypercubes . based on the techniques in one dimensional bin packing algorithm super harmonic by seiden </S>",
    "<S> , we give a framework for online hypercube packing problem and obtain new upper bounds of asymptotic competitive ratios . for square packing , </S>",
    "<S> we get an upper bound of 2.1439 , which is better than 2.24437 . for cube packing </S>",
    "<S> , we also give a new upper bound 2.6852 which is better than 2.9421 by epstein and van stee .    </S>"
  ]
}