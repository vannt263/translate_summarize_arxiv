{
  "article_text": [
    "conventional communication networks , like the internet , ensure transfer of information generated at some nodes to others .",
    "it is known that network coding affords throughput gain over routing in such networks @xcite , and given a network and the demanded source messages at each sink , the network coding problem is to design a network code that maximizes the rate of information transfer from the source nodes to the sinks .",
    "but in some networks , like a sensor networks for environmental monitoring , nodes may be interested not in the messages generated by some other nodes but in one or more functions of these messages . designing a network code that maximizes the frequency of target functions computation , called the _ computing capacity _ , per network use at the sinks",
    "is known as the _ network computing _",
    "problem @xcite .",
    "this subsumes the network coding problem as a special case .",
    "environmental monitoring in an industrial unit is an application of network computation where relevant parameter may include temperature and level of exhaust gases which may assist in preventing fire and poisoning due to toxic gases respectively .",
    "a simple way to perform network computation is to communicate all the messages relevant to the function required at each sink using either network coding or routing .",
    "this is not only highly inefficient in terms of bandwidth usage and power consumption but also undesirable in certain settings .",
    "for example , in an election , who voted whom is to be kept confidential but the sum total of votes received by each candidate is to be publicized .",
    "an efficient way is that function computation be performed _ in - network _ ,",
    "i.e. , in a distributed manner .",
    "the intermediate nodes on the paths between the sources and the sinks perform network coding and communicate coded messages such that the sinks may compute their desired functions without having to know the value of the arguments .",
    "for example , if the maximum temperature is of interest in a sensor network , then each sensor node need only communicate the maximum of its own temperature reading and the message it receives on its incoming edges , which may be raw measurements or maximum temperatures of some sets of nodes , and communicate it to its neighbor on the path towards the sink node ; the sink can then take maximum of the messages it receives to obtain the maximum temperature reading among all the nodes .",
    "thus , network computation is performed in a distributed fashion without having to communicate measurement of each sensor node to the sink .    in @xcite ,",
    "bounds on rate of computing symmetric functions ( invariant to argument permutations ) , like minimum , maximum , mean , median and mode , of data collected by sensors in a wireless sensor network at a sink node were presented . the notion of min - cut bound for the network coding problem @xcite",
    "was extended to the function computation problem in a directed acyclic network with multiple sources and one sink in @xcite .",
    "the case of directed acyclic network with multiple sources , multiple sinks and each sink demanding the sum of source messages was studied in @xcite ; such a network is called a sum - network .",
    "relation between linear solvability of multiple - unicast networks and sum - networks was established .",
    "furthermore , insufficiency of scalar and vector linear network codes to achieve computing capacity for sum - networks was shown .",
    "coding schemes for computation of arbitrary functions in directed acyclic network with multiple sources , multiple sinks and each sink demanding a function of source messages were presented in @xcite . in @xcite , routing capacity , linear coding capacity and nonlinear coding capacity for function computation in a multiple source single sink directed acyclic network were compared and depending upon the demanded functions and alphabet ( field or ring ) , advantage of linear network coding over routing and nonlinear network coding over linear network coding was shown .",
    "the index coding problem was introduced in @xcite and finds potential commercial application in dissemination of popular multimedia content in wireless ad hoc networks and using digital video broadcast .",
    "an instance of the index coding problem comprises a source , which generates a finite number of messages , and a set of receivers .",
    "each receiver knows a subset of messages , called the _ has - set _ , and demands another subset of messages , called the _ want - set_. the objective is to make a minimum number of encoded transmissions over a noiseless broadcast channel such that the demands of all the clients are satisfied upon reception of the same .",
    "graph theory has been extensively used to study this problem @xcite .",
    "the case where the _ has - sets _ includes linear combination of messages was studied in @xcite and @xcite ; such a scenario may arise if some clients fail to receive some coded transmissions , possibly due to power outage , bad weather , intermittent signal reception , etc . , and",
    "the transmitter will have to compute a new index code after every transmissions taking into account the updated caches , which may now include coded messages .",
    "the _ functional index coding problem _ was recently proposed in @xcite as a generalization of the conventional index coding problem . in a functional index coding problem ,",
    "the _ has- _ and _ want - sets _ of users may contain functions of messages rather than only a subset of messages as is the case in a conventional index coding problem .",
    "thus , the conventional index coding problem and the scenarios studied in @xcite and @xcite are special cases of the functional index coding problem . in @xcite",
    ", bounds on codebook size were obtained and a graph coloring approach to obtaining a _ functional index code _ was given .    in @xcite",
    ", it was shown that any network coding problem can be reduced to an index coding problem and that a network coding problem admits a linear solution if and only if a linear index code of a specific length ( determined by the network coding problem ) exists for the corresponding index coding problem .",
    "this relationship was extended to include nonlinear codes in @xcite . in @xcite ,",
    "a method , similar to that given in @xcite , to convert a network coding problem to an index coding problem was given .",
    "it was shown that a network code for the former problem exists if and only if an index code of a specific length ( determined by the network coding problem ) exists ; methods to convert an index code to a network code and vice versa were also given .",
    "in this paper , we explore the relationship of network computation and a class of functional index coding problems .",
    "the contributions of this paper are as follows :    1 .   in section  [ sec_fnc2fic ] ,",
    "we give a method to construct a functional index coding problem from a given network computation problem ( definition  [ nc_2_fic ] ) . in the resulting functional index coding problem ,",
    "only the _ want - sets _ of the clients include functions of messages and the _ has - sets _ are all subsets of the message set ( like in the conventional index coding problem ) .",
    "we show that a network code to perform in - network computation of the functions demanded by the sinks exists if and only if the corresponding functional index coding problem admits a solution of a specific length , which is determined by the original network ( theorem  [ thm_1 ] in section  [ sec_fnc2fic ] ) .",
    "we give a method to convert a functional index code for the obtained functional index coding problem into a network code for the original network computation problem and vice versa .",
    "thus , in order to obtain a network code for a given network computation problem , we convert it into a functional index coding problem , construct a functional index code , and then convert the functional index code to a network code for the given network computation problem .",
    "3 .   in section  [ sec_fic2fnc ] , we show that any functional index coding problem with only _ want - sets _ containing functions of messages can be converted as a network computation problem ( definition  [ fic_2_fnc ] ) .",
    "we prove that the functional index coding problem admits a solution of a specific length if and only if the network computation problem obtained from it admits a solution ( proposition  [ prop_2 ] ) .    in section  [ sec_prelims ] , relevant preliminaries of network computation and functional index coding problems are given .",
    "we conclude the paper with a summary of work presented and possible directions of future work in section  [ sec_disc ] .",
    "a brief overview of network computation and functional index coding problems are presented in this section . a @xmath0-ary finite field is denoted by @xmath1 and the set @xmath2 is denoted by @xmath3 $ ] , for some positive integer @xmath4 .",
    "all vectors are row vectors . a realization of a random variable @xmath5 taking value from @xmath6 , for some positive integer @xmath4 , is denoted by @xmath7 .",
    "a set containing one element @xmath8 is denoted by @xmath9 .",
    "a network is represented by a finite directed acyclic graph @xmath10 , where @xmath11 is the set of nodes and @xmath12 is the set of directed error - free links ( edges ) , where the edges in @xmath13 correspond to the links between the nodes in the network and the edges in @xmath14 correspond to the source messages generated in the network .",
    "the sets of incoming and outgoing links of a node @xmath15 are denoted by @xmath16 and @xmath17 respectively . for an edge @xmath18 from a node @xmath19 to @xmath20 , @xmath19 and @xmath20",
    "are called , respectively ,",
    "its tail and head and @xmath21 , i.e. , @xmath22 is the set of edges which terminate at the node at which @xmath23 originates .",
    "the network may have multiple source nodes and each may generate multiple messages .",
    "the source messages are represented by tailless edges @xmath24 that terminate at a source node . the total number of messages generated in the network is @xmath25 and are denoted by random variables @xmath26 , where , for every @xmath27 $ ] , @xmath28 is uniformly distributed over @xmath29 , for some positive integer @xmath30 .",
    "let @xmath31 .",
    "let @xmath32 .",
    "a realization of @xmath33 is denoted by @xmath34 , where @xmath35 for all @xmath27 $ ] and @xmath36 .",
    "the capacity of a link @xmath37 between nodes in the network is @xmath38 and @xmath39 is the associated random variable , i.e. , @xmath40 .",
    "note that for a source edge @xmath24 , the capacity is @xmath30 and the associated random variable is @xmath41 respectively .",
    "the set of sink nodes is denoted by @xmath42",
    ". a sink node @xmath43 demands @xmath44 functions @xmath45 , where @xmath46 for all @xmath47 $ ] .",
    "let @xmath48 .",
    "for a realization @xmath49 of @xmath33 , @xmath50 is the vector of function values sink @xmath43 wishes to compute .",
    "the demands are denoted by headless edges ( not included in @xmath51 ) originating at sink nodes .",
    "a network computation problem @xmath52 is specified by the underlying network , the source messages , and the demands of each sink .",
    "a network code @xmath53 for a network computation problem @xmath52 is an assignment of a _ local encoding kernels _",
    "@xmath54 to each edge @xmath37 and a decoding function @xmath55 to each sink @xmath56 . for any @xmath37",
    ", @xmath54 takes in @xmath57 as input argument and outputs @xmath39 , i.e. , @xmath58 for any sink @xmath56 , the decoding map @xmath55 takes in @xmath59 as input argument and outputs @xmath60 , i.e. , @xmath61 for every realization @xmath49 of @xmath33 , @xmath62 .    the _ global encoding kernels _ @xmath63 and the decoding functions @xmath64 give an alternate description of a network code . for any edge @xmath23 , @xmath65 maps @xmath33 to @xmath39 ( and thus , the distribution of @xmath39 depends upon the network code ) .",
    "given the local encoding kernels , the global encoding kernels for each edge can be defined by induction on an ancestral ordering of the edges in the graph as follows ( * ? ? ?",
    "ii ) . for every tailless edge @xmath66 denoting the source message @xmath28 , let @xmath67 be the global encoding kernel . then , for any edge @xmath37 , @xmath68 also , by , @xmath69 for every realization @xmath49 of @xmath33 , @xmath70 .",
    "an instance @xmath71 of a functional index coding problem comprises    1 .   a transmitter equipped with the message vector @xmath72 , where , for every @xmath27 $ ] , @xmath73 is uniformly distribute over @xmath29 for some positive integer @xmath30 and 2 .   a set of clients or receivers , @xmath74 , where @xmath75 for all @xmath76 . for any receiver @xmath77 , @xmath78 and @xmath79",
    "has- _ and _ want - sets _ respectively , where @xmath80 for @xmath81 and @xmath82 @xmath83 .",
    "let @xmath84 and @xmath85 .",
    "for a realization @xmath86 of @xmath5 at the transmitter , @xmath87 is the _ has - value _ known to @xmath77 and @xmath88 as the _ want - value _ @xmath77 is interested in computing .",
    "the conventional index coding problem correspond to the case in which all the _ has- _ and _ want - set _ are subsets of @xmath5 .",
    "the case in which the _ has - sets _ of the clients include linear combinations of messages and the _ want - sets _ are subsets of @xmath5 was considered in @xcite and @xcite .",
    "a functional index code for a given @xmath71 comprises an encoding map @xmath89 and a decoding function @xmath90 for every receiver @xmath91 , where @xmath92 and satisfies @xmath93 for every realization @xmath94 of @xmath5 , @xmath95 .",
    "here @xmath96 is the _ length _ of the functional index code .",
    "let @xmath97 denote the _ codebook _ of the code defined by @xmath98 .",
    "the transmitter broadcasts @xmath96 length codewords , @xmath99 , and the receivers use their respective decoding functions to obtain the values of their desired functions .",
    "the objective of code design is to minimize @xmath96 so that maximum throughput gain is achieved .",
    "in this section , we obtain a functional index coding problem from a network computation problem and show that a given network computation problem is feasible if and only if the corresponding functional index coding problem is .",
    "the proof technique followed is similar to that of ( * ? ? ? * th .  1 ) .",
    "[ nc_2_fic ] let @xmath100 be a network computation problem with @xmath101 messages @xmath26 , where , for every @xmath27 $ ] , @xmath28 is uniformly distributed over @xmath29 for some positive integer @xmath30 , the capacity of an edge @xmath37 is @xmath38 for some positive integer @xmath38 , and , every sink @xmath102 demands a set of @xmath44 functions , @xmath45 for some positive integer @xmath44 .",
    "a functional index coding problem @xmath103 can be obtained as follows :    1 .",
    "the transmitter has access to the message vector @xmath104 , where @xmath105}$ ] and @xmath106 .",
    "a message @xmath107 , @xmath27 $ ] , is uniformly distributed over @xmath29 and a message @xmath108 , @xmath37 , is uniformly distributed over @xmath109 for every @xmath37 .",
    "the quantities @xmath30 , @xmath27 $ ] , and @xmath38 , @xmath37 , are specified by the network computation problem @xmath110 .",
    "the set @xmath111 of @xmath112 clients is defined as follows : * @xmath113 , where the _ has- _ and _ want - sets _ of @xmath114 are @xmath115 and @xmath116 respectively for any @xmath37 . *",
    "@xmath117 , where the _ has- _ and _ want - sets _ of @xmath118 are @xmath119 and @xmath120 respectively for any @xmath102 . * the _ has - set _ of the client @xmath121 is @xmath122\\}$ ] and its _ want - sets _ is @xmath123 .",
    "note that in the functional index coding problem obtained from a network computation problem using the above definition    a.   the _ has - set _ of every receiver will be a subset of the messages @xmath124 and b.   only the _ want - sets _ of the receivers in @xmath125 , i.e. , the receivers corresponding to sinks in the starting network computation problem , will contain functions of messages .",
    "[ thm_1 ] for a given network computation problem @xmath100 , let @xmath103 be the corresponding functional index coding problem constructed using definition  [ nc_2_fic ] . then , a network code for @xmath110 exists if and only if a functional index code of length @xmath126 exists for @xmath127 .",
    "let @xmath128}n_k$ ] and @xmath129 . to prove the theorem",
    ", we will show that any network code for @xmath110 can be converted into a functional index code of length @xmath130 for @xmath127 and vice versa .    _ converting a network code into a functional index code : _ suppose there is a network code for @xmath110 and let @xmath131 , @xmath132 , and @xmath133 be its local encoding kernels , global encoding kernels , and decoding functions respectively .",
    "define a map @xmath134 by @xmath135 where @xmath136 , for any @xmath37 .",
    "we will verify that broadcasting @xmath137 satisfies all the receivers of @xmath127 by constructing a decoding map for each receiver using the local and global encoding kernels and the decoding functions specified by the network code .",
    "the length of this code is @xmath138 .    1 .",
    "a receiver @xmath139 knows @xmath140 and wants @xmath141 .",
    "note that @xmath142 and @xmath143 .",
    "the decoding map @xmath144 is obtained as follows : * compute @xmath145 for each @xmath146 using the known information @xmath147 and the broadcast message @xmath148 . *",
    "then , using , compute @xmath149 * the demanded message is @xmath150 .",
    "+ thus , for a receiver @xmath139 , the map @xmath151 satisfies and hence is a decoding function for @xmath114 .",
    "a receiver @xmath152 knows @xmath153 and wants @xmath154 .",
    "note that @xmath155 and @xmath156 .",
    "the decoding map @xmath157 is obtained as follows : * compute @xmath145 for each @xmath158 using the known information @xmath147 and the broadcast message @xmath148 . *",
    "then , by @xmath159 + thus , for a receiver @xmath152 , the map @xmath160 satisfies and hence is a decoding function for @xmath118 .",
    "3 .   since @xmath121 knows all @xmath107 , @xmath27 $ ] , and demands all @xmath108 , @xmath37 , the decoding function for receiver @xmath121 is @xmath161    thus , any network code for @xmath110 can be converted into a functional index code of length @xmath130 for @xmath127 using , , , and .",
    "we now prove the converse .",
    "_ converting a functional index code into a network code : _ assume that a functional index of length @xmath130 is given for @xmath103 , i.e. , an encoding map @xmath98 and decoding functions @xmath162 are specified .",
    "we will construct a network code for the network computation problem @xmath100 , i.e. , specify local encoding kernels for edges in @xmath13 and decoding functions for sinks in @xmath163 , using the given functional index code .",
    "let @xmath164 denote the codebook .",
    "since @xmath121 can decode its demanded messages , it must be true that @xmath165 for every @xmath166 and every @xmath167 such that @xmath168 ( otherwise , if @xmath169 ( say ) , then , given @xmath170 and the broadcast codeword @xmath171 , @xmath121 will not be able to distinguish between @xmath172 and @xmath173 ) . in a functional index coding problem",
    "@xmath71 , if , for some @xmath174 , @xmath175 and @xmath176 , then an encoding map @xmath98 must satisfy @xmath177 , otherwise the demands of @xmath178 will not be met ( * ? ? ?",
    "* prop .  1 ) .",
    "this constraint on the encoding map is referred to as the _ generalized exclusive law _",
    "* def .  3 ) .",
    "] thus , for each @xmath166 , the elements of @xmath179 are all distinct and hence @xmath180 .",
    "consequently , @xmath181 ( since @xmath182 and @xmath180 ) .",
    "thus , given any @xmath183 and any @xmath166 , there exists a unique realization @xmath184 of @xmath185 such that @xmath186 .",
    "specifically , let @xmath187 , where @xmath188 is the all zero @xmath130-tuple , and @xmath189 .",
    "note that @xmath190 ( since for each @xmath166 , there exists a unique @xmath184 with @xmath191 ) .",
    "let @xmath192 .",
    "then , by , for every @xmath193 @xmath194 for every receiver @xmath139 and @xmath195 for every receiver @xmath152 , and @xmath196 .    for an edge @xmath37 ,",
    "define a map @xmath197 by @xmath198 and for a sink @xmath102 , define a map @xmath199 by @xmath200 we will verify that @xmath201 is a network code for @xmath110 .",
    "let @xmath49 be an arbitrary realization of @xmath33 and @xmath202 be the element of @xmath203 such that @xmath204 .",
    "recall that a tailless edge @xmath24 , @xmath27 $ ] , represents a source message @xmath28 and that @xmath205 .",
    "first we will show that @xmath206 , i.e. , @xmath207 for every @xmath37 , by induction on an ancestral ordering of edges in @xmath13 as follows .",
    "let an edge @xmath37 originate at a source node such that @xmath208 ( or @xmath209 ) ( base case of induction ) .",
    "then , by and , @xmath210 now let for some edge @xmath37 , every @xmath146 satisfies @xmath211 ( induction hypothesis ) .",
    "then , again by and , @xmath212 thus , @xmath207 for every @xmath37 .",
    "now consider any @xmath102 .",
    "then , by and , @xmath213 which is the required function value at @xmath43 .    thus , and define a network code for @xmath110 .    in the proof of the converse of theorem  1 ,",
    "we chose @xmath171 to be @xmath188 to define a network code ( and ) . instead of @xmath188 , @xmath171 can be chosen to be any element of @xmath214 to define a network code .",
    "thus , for any @xmath215 , @xmath216 is a network code .",
    "consider the network computation problem given in fig .",
    "[ fig_fnc1 ] .",
    "there are @xmath217 source nodes each generating a @xmath218-bit long message and there is only one sink which wants to compute the maximum among the decimal equivalents of messages .",
    "all dashed and solid edges have capacity @xmath218 bits @xmath219 .",
    "by @xmath220 , we mean the maximum of the decimal equivalent .",
    "the local encoding kernels are given adjacent to the edges .",
    "the local and global encoding kernels of edges @xmath221 are given in table  [ tab_lekgek ] below .    .",
    "[ cols=\"^,^,^\",options=\"header \" , ]     the network computation problem obtained using definition  [ fic_2_fnc ] is given in fig .",
    "[ fig_fic3 ] .",
    "the capacity of each dash - dotted edge is @xmath222 .    .",
    "]    by proposition  [ prop_2 ] , a code for the network computation problem exists if and only if @xmath223 since minimum @xmath224 transmissions are required for the given functional index coding problem .",
    "a network code that satisfies all sink demands is obtained by assigning @xmath225 as the global encoding kernel of edge @xmath226 . upon receiving this coded message and the source messages on the incoming links ,",
    "each sink can compute the value of its desired function . @xmath227",
    "in this paper , we established a relationship between network computation problems and the class of functional index coding problems in which only the demands of the clients include functions of messages .",
    "we gave a method to convert any network computation problem into a functional index coding problem with some clients demanding functions of messages and proved that the network computation problem admits a solution if and only if all the clients demands in the corresponding functional index coding problem can be satisfied in a specific number of transmissions ( determined by the original network computation problem ) .",
    "we gave a method to convert a network code into a functional index code and vice versa .",
    "this means that algorithms to solve functional index coding problems can be used to obtain network codes for network computation problems .",
    "next , given a functional index coding problem in which some clients demand functions of messages but the side information of each client is a subset of the message set known to the transmitter , we construct a network computation problem and show that a functional index code of a specified length for the former problem exists if and only if a network code for the latter problem exists .",
    "in this paper , we have considered only the functional index coding problem in which only the demands of the clients include functions and not the side information known to them _ a priori_. a direction of future work is to find what kind of networks and problems can be obtained from and converted to the functional index coding problems in which the side information can also include functions of messages known to the transmitter .",
    "this work was supported partly by the science and engineering research board ( serb ) of department of science and technology ( dst ) , government of india , through j.c .",
    "bose national fellowship to b. sundar rajan .",
    "t. ho , m. mdard , r. ketter , d.  r. karger , m. effros , j. shi , and b. leong , `` a random linear network coding approach to multicast , '' _ ieee trans .",
    "inf . theory _ ,",
    "10 , pp . 4413 - 4430 , october 2006 .",
    "r. appuswamy , m. franceschetti , n. karamchandani , and k. zeger , `` linear codes , target function classes , and network computing capacity , '' _ ieee trans .",
    "inf . theory _ ,",
    "9 , pp . 5741 - 5753 , september 2013 .",
    "a. gupta and b.  s. rajan , `` error - correcting functional index codes , generalized exclusive laws and graph coloring , '' 16 october 2015 .",
    "[ online ] .",
    "available : http://arxiv.org/abs/1510.04820 .",
    "( part of this work has been accepted for presentation at _ ieee int .",
    "_ , kuala lumpur , malaysia , 2016 . )",
    "s. el  rouayheb , a. sprintson , and c. georghiades , `` on the index coding problem and its relation to network coding and matroid theory , '' _ ieee trans .",
    "inf . theory _ ,",
    "56 , no . 7 , pp . 3187 - 3195 , july 2010 ."
  ],
  "abstract_text": [
    "<S> in contrast to the network coding problem wherein the sinks in a network demand subsets of the source messages , in a network computation problem the sinks demand functions of the source messages . similarly , in the functional index coding problem , the side information and demands of the clients include disjoint sets of functions of the information messages held by the transmitter instead of disjoint subsets of the messages , as is the case in the conventional index coding problem . </S>",
    "<S> it is known that any network coding problem can be transformed into an index coding problem and vice versa . in this work , </S>",
    "<S> we establish a similar relationship between network computation problems and a class of functional index coding problems , viz . , those in which only the demands of the clients include functions of messages . </S>",
    "<S> we show that any network computation problem can be converted into a functional index coding problem wherein some clients demand functions of messages and vice versa . </S>",
    "<S> we prove that a solution for a network computation problem exists if and only if a functional index code ( of a specific length determined by the network computation problem ) for a suitably constructed functional index coding problem exists . and , that a functional index coding problem admits a solution of a specified length if and only if a suitably constructed network computation problem admits a solution .    </S>",
    "<S> network coding , network computation , in - network computation , index coding , functional index coding . </S>"
  ]
}