{
  "article_text": [
    "the present research represents a step in a programme whose goal is to study topological aspects of information and computation .",
    "time is a metric notion , and so any such topological aspects would presumably have no internal notion of time .",
    "we consider a notion of computation which is independent of time and which is natively formulated in terms of information .",
    "we construct a diagrammatic calculus whose elements we call _ tangle machines_. these were first defined in @xcite .",
    "a key feature of tangle machines is that they come equipped with a natural notion of _ equivalence _ which originates in the beautiful diagrammatic algebra of low dimensional topology .",
    "tangle machines serve in this paper as abstract flowcharts of information in computation .",
    "we prove that the computational paradigm that we propose contains turing machines and interactive proofs ( thus it does not ` lose anything ' ) , and it also contains additional models ( _ e.g. _ section  [ ss : tangip ] ) .",
    "the world we observe around us evolves along a time axis , so a tangle machine could not be used as a blueprint for a classical computer .",
    "time is a more nebulous concept in the quantum realm , however , and it might be that tangle machine constructions are relevant for adiabatic quantum computations or in other quantum contexts @xcite .",
    "in particular , they naturally incorporate the axiom of uniform no - cloning ( remark  [ r : nocloning ] in section  [ ss : quagma ] ) .",
    "the main relevance of our work would probably be to isolate and access natively topological aspects of classical and quantum computation .",
    "we also speculate that tangle machine computations can emerge physically via dynamical processes on a tangle machine , given a set of input colours , and that perhaps something like this actually occurs in nature .",
    "after all , natural computers are not turing machines .",
    "how might tangle machines manifest themselves in nature ?",
    "the authors make the following speculation .",
    "evolutionary biology provides an analogue to tangle machines in the notions of phenotype versus genotype @xcite .",
    "the external characteristics of an organism such as its appearance , physiology , morphology , as well as its behaviours are collectively known as a _",
    "phenotype_. the _ genotype _ on the other hand refers to the inherent and immutable information encoded in the genome . two phenotypes may look entirely different but may nevertheless share the same genotype .",
    "could information about an organism be encoded as a tangle machine , where equivalent machines represent different phenotypes which share the same genotype ? might the process of evolution of an organism be described by a series of basic transformations akin to the reidemeister moves exerted by the environment on the organism , which change its phenotype while preserving its genotype , along with occasional ` violent ' local moves on a current configuration which change its genotype ? might tangle machines describe a way in which nature process its information primitives its organisms",
    "?    there are two obvious advantages to a topological model of computation .",
    "the first is that it is very flexible by construction .",
    "bisimilar computations ( definition  [ d : bisimulation ] ) are represented by topologically equivalent objects , which are related in a simple way ( section  [ sec : lowdim ] ) .",
    "the second , which we do not discuss in this paper , is that we have a notion of _ topological invariants _ which are characteristic quantities which are intrinsic to a bisimilarity class of computations .    in the introduction",
    "we briefly introduce tangle machines in section  [ ss : whattm ] after which we state our main results in section  [ ss : results ] and give scientific context in section  [ ss : background ] .",
    "a tangle machine is built up out of _ registers _ each of which may hold an element of a set @xmath1 .",
    "the set @xmath1 comes equipped with a set @xmath2 of binary operations representing basic computations . for @xmath3",
    ", we read @xmath4 as ` the result of running the programme @xmath5 on input data @xmath6 ' .",
    "an alternative evocative image is that @xmath4 is a ` fusion of information @xmath6 with information @xmath7 using algorithm @xmath8 ' .",
    "our binary operations satisfy the following axioms which equip @xmath9 with what is called a _ quandle _ structure ( see section  [ ss : quagmadefn ] for this and extensions ) :    idempotence : :    @xmath10 for all @xmath11 and    for all @xmath3 .",
    "thus , @xmath6    can not concoct any new information from itself .",
    "reversibility : :    the map @xmath12 , which maps    each colour @xmath11 to a corresponding colour    @xmath13 , is a bijection for all    @xmath14 . in particular ,",
    "if    @xmath15 for some    @xmath16 and for some    @xmath3 , then @xmath17 . thus , the    input @xmath6 of a computation may uniquely be reconstructed    from the output @xmath4 together with the    programme @xmath5 .",
    "distributivity : :    for all @xmath16 and for all    @xmath18 :    @xmath19    this is the main property .",
    "it says that carrying out a computation    @xmath20 on an output    @xmath4 gives the same result as carrying out    that computation both on the input @xmath6 and also on the    state @xmath7 , and then combining these as    @xmath21 .    in the context of information ,",
    "this is a _ no double counting _",
    "property    @xcite .    later in this paper , in remark  [ r : nocloning ] in section  [ ss : quagma ] , we show that uniform _ no - cloning _ and _ no - deleting _ , which are fundamental properties of quantum information , follow from reversibility and distributivity for an appropriate colouring by a generalization of a quandle called a _",
    "quagma_. this observation argues for reversibility and distributivity as being nature s most fundamental information symmetries .",
    "the basic unit of computation in a tangle machine is an _ interaction _ representing multiple inputs @xmath22 independently fed into a programme @xmath5 as depicted in figure  [ f : kebaba ] .",
    "these are concatenated ( perhaps also with wyes ) to form a _",
    "tangle machine_ see section  [ s : tm ] .",
    "[ c]@xmath23[l]@xmath24[c]@xmath25[c]@xmath7[c]@xmath8[c]@xmath26[c]@xmath27[c]@xmath28 an interaction in a machine , where @xmath29 for @xmath30.,title=\"fig:\",width=115 ]    a _ tangle machine computation _ begins with an initialization of a specified set of _ input registers _ to chosen colours in @xmath1 .",
    "a disjoint set of _ output registers _ is chosen .",
    "if the colours of the input registers uniquely determine colours for the output registers , then the colours of the output registers are the result of the computation",
    ". otherwise the computation can not take place .",
    "see definition  [ d : tmcomputation ] and figure  [ f : samplecomputation ] ) .",
    "this provides a model of computation .",
    "more generally we may allow the result of the computation to be the ( possibly empty ) set of all possible colours out output registers .",
    "this level of generality is not required in this paper .",
    "[ c]@xmath31[c]@xmath32[c]@xmath33[c]@xmath34 [ c]@xmath35[c]@xmath36[c]@xmath37 a sample computation . determining colours for input registers",
    "@xmath35 and @xmath36 uniquely and instantaneously determines the colour for the output register @xmath37.,title=\"fig : \" ]    a tangle machine computation has the following features :    1 .   whereas the alphabet of a classical turing machine is discrete ( usually just @xmath38 and @xmath39 and maybe @xmath40 )",
    ", the alphabet @xmath1 of a tangle machine can be any set , discrete or not .",
    "two values of @xmath1 may be chosen to represent @xmath38 and @xmath39 , while the rest may represent something else perhaps electric signals .",
    "whereas a turing machine computation is sequential with each step depending only on the state of the read / write head and on the scanned signal , a tangle machine computation is instantaneous and is dictated by an oracle .",
    "time plays no role in a tangle machine computation .",
    "3 .   a tangle machine computation may or many not be deterministic ( colours may represent random variables and not their realizations ) , and it may or may not be bounded ( contain a bounded number of interactions ) .",
    "quandles and tangle machines are flexible enough to admit several different interpretations . in this paper , we use tangle machines to realize both logic gates ( deterministic , composing into perhaps unbounded computations ) and interactive proof computations ( probabilistic , bounded size ) .",
    "a tangle machine is flexible .",
    "there is a natural and intuitive set of local moves relating bisimilar tangle machine computations ( section  [ sec : lowdim ] ) .",
    "a tangle machine representation is abstract .",
    "a tangle machine computation takes place on the level of information itself , with no reference to time .",
    "the axioms of a quandle have intrinsic interpretation in terms of preservation and non - redundancy of information .",
    "the purpose of this note is to show the following theorems :    [ thm : boolean ] any binary boolean function can be realized by a tangle machine computation .",
    "this is neither hard nor new a previous such realization ( not with tangle machines but with coloured braids ) is recalled in section  [ ss : barrington ] .    by turing completeness of the boolean circuit model",
    ", we have the following :    tangle machines ( with an unbounded number of interactions ) are turing complete .    in section  [ s : turingsimulation ]",
    "we further prove the following .",
    "[ t : turingsimulation ] any turing machine can be simulated by a tangle machine .",
    "such a tangle machine is coloured by a quandle @xmath9 whose set of binary operations @xmath2 has cardinality @xmath41 where @xmath42 is the number of states in the finite control of the underlying turing machine .",
    "tangle machines , whose notion of computation is based on an oracle which produced output colours from input colours , can in - fact perform super - turing computations . see remark  [ r : superturing ] .",
    "colours of registers in tangle machines evolve at _ interactions_. if we bound the number of interactions , tangle machine computations include computations in a complexity class which we call @xmath43 which includes inside it a class which we call @xmath44 .",
    "letting @xmath45 denote the number of interactions in the machine , letting @xmath46 denote a ` noise parameter ' , and letting @xmath47 and @xmath48 denote _ completeness _ and _ soundness _ correspondingly ( see section  [ ss : introip ] ) , we have the following :    [ thm : existence ] @xmath49 where : @xmath50 with @xmath51 .",
    "the growth rate of @xmath45 is @xmath52 as @xmath53 .",
    "thus , tangle machine computations with bounded interactions can decide any language in class @xmath0 , which is known to equal @xmath54 @xcite .",
    "moreover , in the special setting of non - adaptive @xmath55bit probabilistically checkable proofs ( @xmath56 ) , there exists a tangle machine which achieves a better soundness parameter than the best known classical single - verifier non - adaptive @xmath55bit @xmath56 algorithm ( section  [ ss : pcphc ] ) . yet",
    "the soundness parameter for this tangle machine is above the conjectured lower limit .",
    "this suggests the possibility that tangle machines behave like very good single verifiers .",
    "finally , in section  [ sec : lowdim ] , we discuss equivalence of machines .",
    "machine equivalence formally parallels equivalence of tangled objects in low dimensional topology , and it gives us a formalism with which to discuss bisimulation .",
    "after justifying the definition , we introduce a notion of _ zero knowledge _ for machines , in which the proof is kept secure from untrusted verifiers at intermediate nodes .",
    "tangle machines are thus revealed to be a flexible model for computation .",
    "the first person to consider distributivity as an axiom of primary importance , and to suggest diagrammatic calculi for logic ( and perhaps by extension to computation ) was american philosopher charles saunders peirce .",
    "the following peirce quotation was pointed out by elhamdadi @xcite : `` these are other cases of the distributive principle  these formulae , which have hitherto escaped notice , are not without interest . ''",
    "@xcite .",
    "the idea to use diagrammatic calculi from low - dimensional topology to model computation was pioneered by louis kauffman , who used knot and tangle diagrams to study automata @xcite , nonstandard set theory , and lambda calculus @xcite .",
    "there is also a diagrammatic @xmath57 calculus formulation of virtual tangles @xcite .",
    "the diagrammatic calculus of braids ( braids are a special class of tangles ) also underlies topological quantum computing see _ e.g. _ @xcite .",
    "universal logic gates ( toffoli gates ) have been realized using coloured braids @xcite . this has led to a proposal for circuit obfuscation masking the true purpose of a circuit using braid equivalence @xcite .",
    "buliga has suggested to represent computations using a calculus of coloured tangles which is different from ours @xcite . in another direction ,",
    "a different diagrammatic calculus , originating in higher category theory , has been used in the theory of quantum information see _",
    "e.g. _ @xcite .    in our approach ,",
    "the tangle diagrams themselves are computers , representing a flowchart of information during a computation whose basic operations are distributive ( compare  @xcite ) .",
    "this is not a diagrammatic lambda calculus or pi calculus , but rather it is a natively low dimensional topological approach to computation . in this note",
    ", we relate this approach to other approaches by showing that tangle machine computation is turing complete , and in the bounded resource setting that it can decide any language in the complexity class @xmath0 .",
    "we begin in section  [ s : models ] by recalling relevant models of computation such as turing machines , @xmath0 , and @xmath56 .",
    "then , in section  [ s : tm ] , we recall the formalism of tangle machines @xcite .",
    "our definition is more general than the one used in that paper .",
    "next in section  [ s : turingcompleteness ] we show that tangle machines are turing complete , and we show in section  [ s : turingsimulation ] how tangle machines may simulate turing machines . restricting to a bounded resources setting ,",
    "we construct networks of deformed @xmath0 verifiers in section  [ s : deformingip ] , defining a complexity class @xmath44 . in section  [ sec : defip ] we show that @xmath58 .",
    "section  [ sec : efficientip ] shows how to make our network computations more efficient by getting rid of the global time axis , making use of a machine we call the hopf  chernoff machine .",
    "restricting further to a @xmath56 proofs , in section  [ sec : pcp ] we show that the hopf ",
    "chernoff machine gives us perfect completeness and a better soundness parameter than the best - known non - adaptive @xmath55bit @xmath56 verifier .",
    "finally , we define equivalence of machines in section  [ sec : lowdim ] , where we also discuss the tangle machine analogue of a zero knowledge proof .",
    "in this section , mainly to fix terminology and notation , we recall the notion of a turing machine ( section  [ ss : turing ] ) , of decidable languages ( section  [ ss : decidable ] ) , of interactive proof ( section  [ ss : introip ] ) , and of probabilistically checkable proof ( section  [ ss : intropcp ] ) .",
    "the theory of computation and complexity theory are based on the notion of a _",
    "turing machine _ @xcite .",
    "we recall its definition , following @xcite .",
    "a _ turing machine _ is a triple @xmath59 where    * @xmath60 is a finite set of symbols called the _ alphabet _ which contains a `` blank '' symbol .",
    "* @xmath61 is a finite set of `` machine states '' with @xmath62 and @xmath63 being , respectively , the initial and final ( halting ) states .",
    "* @xmath64 is a transition function .",
    "the set @xmath65 indicates the movement of a tape ( _ left _ , _ stationary _ , _ right _ ) , or equivalently indicates the movement of a reading / writing ( r / w ) head following a writing operation . for convenience and without loss of generality , we limit the alphabet to three colours , @xmath66 , where @xmath40 represents the blank symbol .",
    "a turing machine is composed of two primary units .",
    "finite control unit _ remembers the current state and determines the next state based on the current reading from a _",
    "memory unit_. the memory unit records symbols on a finite , possibly unbounded _",
    "tape_. reading and writing operations retrieve or modify a symbol in the current position of the r / w head along the tape .",
    "computable functions are the basic objects of study in computability theory . in the context of turing machines ,",
    "a partial function @xmath67 is _ computable _ if there exists a turing machine that terminate on the input @xmath6 ( _ input _ means tape content ) with the value @xmath68 stored on the memory tape if @xmath68 is defined , and which never terminates on input @xmath6 if @xmath68 is undefined .",
    "a related notion is the notion of a decidable language .",
    "a set @xmath69 , called a _ language _ , is said to be _ decided _ by turing machine @xmath70 if there exists a computable function @xmath67 satisfying @xmath71 if @xmath72 and @xmath73 if @xmath74 for all @xmath75 .",
    "a language is _",
    "decidable _ if it is decided by some turing machine .",
    "the _ interactive proof _ model of computation involves _ bounded resources _ , by which we mean that computations are constrained to make use of only a finite number of steps , polynomial in the length @xmath76 of the word @xmath75 @xcite .",
    "again , the goal is to determine whether @xmath72 or @xmath74 for a language @xmath77 .",
    "a _ verifier _",
    "@xmath78 interrogates a _ prover _ @xmath79 who claims to have a proof that @xmath72 .",
    "both the prover and the verifier are assumed to be honest and queries are assumed to be independent .",
    "we are given two parameters , _ completeness _ @xmath47 and _ soundness _",
    "@xmath48 , with @xmath80 $ ] . for the classical setting of @xmath81 we set @xmath82 and @xmath83 .",
    "the verifier @xmath78 believes that @xmath72 at time @xmath84 with probability @xmath85 .",
    "this belief is updated each time @xmath79 responds to a query , beginning from @xmath86 .",
    "we say that the statement @xmath72 is _ decided at time @xmath84 _ if :    @xmath87 \\text{\\emph{(soundness ) } } & x \\notin l \\ ; \\longrightarrow \\ ; \\pr(v_t=1 ) \\leq s. \\end{array}\\ ] ]    the class @xmath0 ( interactive polynomial time ) consists of those languages @xmath77 that are decidable in time @xmath45 polynomial in @xmath76 .",
    "a celebrated result in complexity theory states that @xmath0 equals @xmath54 , the class of problems solvable by a turing machine in polynomial space @xcite .",
    "the class @xmath0 can be expanded to the class @xmath88 in which the verifier has access to not one but many provers , which can be interrogated independently @xcite .",
    "it has been shown that @xmath88 equals the large class @xmath89 @xcite .",
    "the class @xmath90 is a restriction of @xmath0 in which the verifier is a polynomial - time turing machine with access to @xmath91 uniformly random bits and the ability to query only @xmath92 bits of the proof , with completeness @xmath47 and soundness @xmath48 @xcite .",
    "the celebrated @xmath56 theorem states that @xmath93 = \\mathrm{np}$ ] @xcite . for @xmath56 ,",
    "the prover is thought of as an oracle .",
    "we restrict to the case of @xmath55bit @xmath56 verifiers , _",
    "i.e. _ to those for which @xmath94 , and to those which are _ non - adaptive _ , _ i.e. _ for which verifier queries are independent of previous responses by the oracle",
    ".    the ideal @xmath56 verifier would have @xmath95 with minimal soundness @xmath48 . a simple and good @xmath55bit @xmath56 verifier with @xmath96 for arbitrarily small @xmath97 was designed by hstad @xcite .",
    "the current record is @xmath98 for an arbitrarily small @xmath97 @xcite .",
    "it is conjectures that the lowest possible value of @xmath48 is @xmath99 @xcite .",
    "in this section we define tangle machines , first ignoring colours ( section  [ ss : nocol ] ) and then , after defining the sets we colour with ( section  [ ss : quagmadefn ] ) , then with colours ( section  [ ss : tmcol ] ) , where we also define tangle machine computations .",
    "we define here a _ tangle machine _ , without colours , to be a diagram which occurs by concatenating ( connecting endpoints ) of a finite number of _ generators _ of the form in figure  [ f : generators ]",
    ". thickened lines in interactions ( figure  [ f : generators][f : interaction ] ) are called _",
    "agents _ , and each thin lines are called _",
    "patients_. only agents are directed , and their is no compatibility condition between directions of different agents .",
    ".28   generators for tangle machines are struts and interactions .",
    "generators for trivalent tangle machines are struts , interactions , and wyes.,title=\"fig:\",width=96 ]    .28   generators for tangle machines are struts and interactions .",
    "generators for trivalent tangle machines are struts , interactions , and wyes.,title=\"fig:\",width=96 ]    .28   generators for tangle machines are struts and interactions .",
    "generators for trivalent tangle machines are struts , interactions , and wyes.,title=\"fig:\",width=96 ]    arcs in a tangle machine , ending as an under - arcs passing under an agent or at a wye or at a machine endpoint ( thus `` continuing right through agents '' ) , are called _",
    "registers_. later on , registers will contain colours .",
    "_ tangle machines _ have struts and interactions as generators , whereas _",
    "trivalent tangle machines _ have struts , interactions , and wyes as generators .",
    "an example of a machine constructed by concatenation is presented in figure  [ f : concat ] . as in the theories of virtual knots and of w - knotted objects",
    ", concatenation lines may intersect @xcite .",
    "also , as in the theory of _ disoriented  tangles _ , no compatibility condition is imposed for directions of concatenated agents @xcite .",
    "concatenation of tangle machines . ]",
    "let @xmath1 be a set equipped with a family @xmath2 of binary operations which satisfy the following three axioms :    idempotence : :    @xmath10 for all @xmath11 and    for all @xmath3 .",
    "reversibility : :    the map @xmath12 , which maps    each colour @xmath11 to a corresponding colour    @xmath13 , is a bijection for all    @xmath14 . in particular ,",
    "if    @xmath15 for some    @xmath16 and for some    @xmath3 , then @xmath17 .",
    "distributivity : :    for all @xmath16 and for all    @xmath3 :    @xmath100    reversibility may be weakened by requiring only that @xmath5 be an injection for all @xmath7 , but not necessarily a surjection .",
    "this is indeed the case for the machines that we describe in the context of interactive proofs .",
    "the pair @xmath9 is called an _",
    "quagma_. it is called an _ quandle _ if the operations in @xmath2 distribute over one another , in the sense that :    @xmath101    for all @xmath18 .",
    "this definition is a variant of definitions found in @xcite .",
    "if we weaken reversibility to require only that @xmath5 be an injection for all @xmath102 and for all @xmath3 , the resulting structure is called a _ quandloid _ @xcite .",
    "quagmas , quandloids , and quandles serve as the content of registers in tangle machines .",
    "[ e : quantumgate ] colours might be elements of a group @xmath103 , and the operation might be conjugation : @xmath104 the pair @xmath105 is called a _",
    "conjugation quandle_. such quandles feature in knot theory , _",
    "e.g. _ @xcite .",
    "[ e : linearquandle ] colours might real numbers and the operations might be convex combinations : @xmath106 the pair @xmath107 is called a _ linear quandle_.      a _ colouring _ of a tangle machine @xmath70 is an assignment @xmath108 of a binary operation in @xmath2 to each agent and an assigment @xmath109 of an element of @xmath1 to each register , such that , at each interaction , the colour @xmath110 of the patient to the right of the agent ( according to the right - hand rule ) equals the colour of its corresponding patient to the left of the agent @xmath11 right - acted on by the colour of the agent @xmath102 via the operation of the agent @xmath3 : @xmath111{$_x$}\\psfrag{b}[c]{$_y$}\\psfrag{c}[l]{$_{x\\,{\\triangleright}\\ , y}$}\\includegraphics[width=80pt]{crosmk}\\end{minipage}\\ ] ] thus , an interaction ` realizes ' the action of the quagma or of the quandle .    to colour a trivalent tangle machines",
    ", @xmath1 has to come equipped with a complete ordering .",
    "we include also an assigment of either @xmath112 or @xmath113 to each wye , so that the exiting register of the wye is the maximum of the two inputs if the wye is labeled @xmath112 and is their minimum otherwise .",
    "we graphically denote a @xmath113 label with a white circle at the branch - point of the wye , and a @xmath112 label by a black circle .",
    "see figure  [ f : maxmingates ] .    .38 [ c]@xmath6 [ c]@xmath7 [ l]@xmath114   colouring wyes coloured by @xmath112 and @xmath113.,title=\"fig:\",width=124 ]    .38 [ c]@xmath6 [ c]@xmath7 [ l]@xmath115   colouring wyes coloured by @xmath112 and @xmath113.,title=\"fig:\",width=124 ]    the notion of tangle machine given above is more general than in @xcite , in which all tangle machines are quandle - coloured and without wyes .    finally , we come to the notion of a tangle machine computation .    [",
    "d : tmcomputation ] a _ computation _ of a ( trivalent ) tangle machine @xmath70 is :    1 .   a choice of a set @xmath116 of _ input registers _ in @xmath70 .",
    "2 .   a choice of a set @xmath117 of _ output registers _ in @xmath70 with @xmath118 .",
    "3 .   a colouring @xmath108 of all agents in @xmath70 ( and an assignment of either @xmath112 or @xmath113 to each wye ) .",
    "4 .   a colouring @xmath119 of all registers in @xmath116 .",
    "5 .   a unique ( oracle ) determination of a colouring @xmath120 of all registers in @xmath117 . if @xmath119 does not uniquely determine @xmath120 , the computation can not take place .",
    "our goal in this section is to realize the universal set of gates , @xmath121 and @xmath122 , as well as a _",
    "multiplexer _ which duplicates the content of a register , using tangle machines .",
    "this realizes the boolean circuit model , thus showing that tangle machines are turing complete .",
    "[ r : superturing ] a tangle machine computation , which is based on an oracle which tells us the colours of output registers given colours of input registers , can carry out super - turing computations .",
    "consider the conjugation quandle of a group @xmath103 with unsolvable conjugacy problem , and colour agents @xmath35 and @xmath36 by elements of @xmath103 .",
    "the colour of @xmath37 might not be turing computable , but the tangle machine computation computes it .",
    "@xmath111{$_{\\mathrm{in}_1}$}\\psfrag{b}[c]{$_{\\mathrm{out}}$}\\psfrag{c}[l]{$_{\\mathrm{in}_2}$}\\includegraphics[width=80pt]{crosm}\\end{minipage}\\ ] ]      choose the set of colours to be @xmath123 , equipped with a set @xmath2 of binary operations whose elements are the following :    @xmath124    @xmath125    the structure @xmath126 , henceforth referred to simply as @xmath1 , is a quagma .    to realize boolean logic ,",
    "let @xmath127 and @xmath128 stand in for the digits @xmath38 and @xmath39 correspondingly .",
    "incidentally , these happen to coincide with pauli spin matrices of quantum mechanics .",
    "a @xmath129 gate is described by a single interaction    @xmath130{$_{x}$ } \\psfrag{b}[c]{$_{\\mathrm{a_0 + a_1}}$ } \\psfrag{c}[l]{$_{\\neg x}$}\\includegraphics[width=80pt]{crosm}\\end{minipage } \\qquad \\qquad \\qquad \\small \\begin{tabular}{l*{2}{c}r } $ x$               & $ \\neg x$ \\\\",
    "\\hline $ a_0 $        & $ a_1 $ \\\\ $ a_1 $        & $ a_0 $ \\end{tabular}\\ ] ]    where the respective truth - table is shown to the right of the diagram .",
    "explicitly , @xmath131    the input is the register labeled @xmath132 , the output is the register labeled @xmath133 , and the remaining register is always coloured by the constant value @xmath134 .    realizing an @xmath135 gate can be split into several successive computations .",
    "let @xmath132 and @xmath136 be the inputs to the gate , and write @xmath137 for @xmath138 .",
    "the following instructions end up with the desired operation @xmath139",
    "@xmath140 2 .",
    "@xmath141 3 .",
    "@xmath142 4 .",
    "@xmath143    a tangle machine which realizes these steps is given below together with the respective truth - table .",
    "@xmath144{\\small $ { \\triangleright}_{_{0.5}}$ } \\psfrag{2}[c]{\\small $ _ { \\blacktriangleright}$ } \\psfrag{3}[c]{\\small $ \\phantom{a}{\\triangleright}_{_2}$ } \\psfrag{0}[c]{\\small $ \\mathbf{0}$ } \\psfrag{a}[c]{\\small $ x$ } \\psfrag{b}[c]{\\small $ y$ } \\psfrag{g}[c]{\\small $ \\beta_1 $ } \\psfrag{h}[c]{\\small $ \\beta_2 $ } \\psfrag{f}[c]{\\small $ \\beta_3",
    "$ } \\psfrag{c}[c]{\\small $ x \\wedge y$ } \\psfrag{s}[c]{\\small $ a_0+a_1 $ } \\psfrag{t}[c]{\\small $ a_0 $ } \\psfrag{u}[c]{\\small $ a_1 $ } \\includegraphics[width=0.7\\textwidth]{and_gate}\\ ] ] @xmath145    in addition to the universal set of gates we also need to be able to duplicate the content of a register .",
    "the conventional boolean circuit model includes junction points along wires .",
    "the tangle machine analogue for such a junction is a _",
    "multiplexer _ , that is a machine whose output colours are duplicates of the colour in one of its inputs .",
    "a multiplexer takes an input of the form @xmath146 , and outputs @xmath147 .",
    "the operation of a multiplexer is captured by the machine in figure  [ f : multiplexer ] .",
    "[ l]@xmath148 [ c]@xmath149 [ c]@xmath137 [ c]@xmath132 a multiplexer.,title=\"fig:\",scaledwidth=30.0% ]    [ r : nocloning ] two fundamental properties of quantum information are _ no - cloning _ and _ no - deleting_. the uniform version of no - cloning states that there does not exist a unitary operator @xmath150 for which @xmath151 for all states @xmath152 , where @xmath153 denotes the identity operator . the uniform version of no - deleting states that there does not exist a unitary operator @xmath154 for which @xmath155 for all states @xmath152 .",
    "both of these statements are captured by the quagma axioms .",
    "consider the quagma @xmath156 where @xmath1 is the set of invertible operators and @xmath157 is any binary operation which distributes over @xmath158 , _",
    "e.g. _ conjugation . if @xmath154 were a universal cloning operator with respect to @xmath157 , _",
    "i.e. _ if @xmath159 for all @xmath152 , then for any state @xmath152 both machines in figure  [ f : nocloning ] would carry out the same computation and in particular @xmath160 .",
    "but then @xmath161 , which is false in general .",
    "universal cloning violates distributivity_. no - deleting follows from no - cloning because if @xmath154 were a universal deleting operator with respect to @xmath157 then @xmath154 would also be a universal cloning operator with respect its inverse operation @xmath162 which exists thanks to reversibility .",
    "this would violate distributivity , because @xmath162 also distributes over @xmath158 as can be seen by applying @xmath163 to both sides of the equation : @xmath164 we parenthetically note that no - cloning and no - deleting are also captured by a different diagrammatic calculus , that of categorical quantum mechanics @xcite .",
    "[ r]@xmath165 [ r]@xmath166 [ c]@xmath150 [ l]@xmath167 [ c]@xmath168 [ c]@xmath168 [ c]@xmath168 [ c]@xmath168 [ l]@xmath169 [ c]@xmath168 [ c]@xmath168 [ c]@xmath158 [ c]@xmath157 universal cloning violates distributivity.,title=\"fig:\",scaledwidth=35.0% ]      realizing a universal set of logic gates is easier if we allow wyes , and may be realized with a quandle colouring .",
    "we colour our machines by elements of the quandle @xmath170 subject to the quandle operation @xmath171 ( this is a _ fox @xmath55colouring _ ) .",
    "we totally order @xmath1 by @xmath172 .",
    "colour - code @xmath38 as red , @xmath39 as blue , and @xmath40 as green . for",
    "this particular quandle the direction of the agent does not matter because the operation @xmath8 is its own inverse .",
    "let @xmath38 stand in for the digit zero and @xmath39 stand in for the digit one .",
    "a universal set of logic gates and a multiplexer can be obtained as in figure  [ f : gatesc ] , where an incoming arrow represents input and an outgoing arrow represents output .",
    ".28 [ c]@xmath132 [ cb]@xmath40 [ c]@xmath133   logic gates for the @xmath55colour approach .",
    "inputs are the colours on the left , and outputs are colours on the right.,title=\"fig:\",width=96 ]    .28 [ c]@xmath132 [ c]@xmath136 [ l]@xmath173   logic gates for the @xmath55colour approach .",
    "inputs are the colours on the left , and outputs are colours on the right.,title=\"fig:\",width=76 ]    .38 [ c]@xmath132[c]@xmath38   logic gates for the @xmath55colour approach .",
    "inputs are the colours on the left , and outputs are colours on the right.,title=\"fig:\",scaledwidth=70.0% ]      the @xmath135 gate constructed in section  [ ss : quagma ] was realized as a tangle machine coloured by a quagma which is not a quandle , and the @xmath135 gate of section  [ ss : wye ] used a wye .",
    "in fact , it is possible to realize a universal set of logic gates with a conjugation quandle coloured tangle machine without using wyes .",
    "the construction is based on barrington s theorem @xcite .",
    "following @xcite , appendix a of @xcite constructs a @xmath174 crossing @xmath175 strand braid coloured by the conjugation quandle of the finite simple group @xmath176 which realizes the toffoli gate that is a universal logic gate @xcite .",
    "this braid is made a tangle machine by interpreting each crossing as an interaction .",
    "three of its registers are inputs , three are outputs , and it contains a number of _ ancilla _ which are what we called _ control registers_.",
    "in this section , we show how to simulate a turing machine using a tangle machine .      in this section",
    "we make use of the linear quandle whose underlying set of elements @xmath1 is the set of the rational numbers and whose set of operations @xmath2 is :    @xmath177    there are several sub - machines that recur in the construction of a _ turing tangle machine _ ,",
    "the tangle machine analog of a turing machine . to simplify our diagrams",
    "we represent these sub - machines graphically .",
    "multiplexer : :    we indicate a multiplexer by splitting a strand .    @xmath178{\\small $ x$ }    \\includegraphics[width=0.15\\textwidth]{multi}\\ ] ] the multiplexer is    realized by composing diagrams of the form in figure  [ f : multiplexer ] .",
    "negation : :    @xmath179 .",
    "@xmath180{\\small $ x$ }    \\psfrag{c}[c]{\\small $ \\neg x$ }    \\psfrag{b}[c]{\\small $ 0.5 $ }    \\psfrag{d}[c]{\\small $ { \\triangleright}_2 $ }    \\psfrag{x}[c]{\\large $ \\neg$ }    \\includegraphics[width=0.5\\textwidth]{not1}\\ ] ] addition : :    @xmath180{\\small $ x$ }    \\psfrag{c}[c]{\\small $ y$ }    \\psfrag{b}[c]{\\small $ x+y$ }    \\psfrag{d}[c]{\\small $ { \\triangleright}_2 $ }    \\psfrag{s}[c]{\\small $ { \\triangleright}_{0.5}$ }    \\psfrag{0}[c]{\\small $ 0 $ }    \\psfrag{+}[c]{+ }    \\includegraphics[width=0.57\\textwidth]{addition}\\ ] ] indicator : :    if @xmath181 then@xmath182 , if    @xmath183 then @xmath184 , otherwise    @xmath185 . @xmath180{\\small $ x$ }    \\psfrag{b}[c]{\\small $ \\imath(x)$ }    \\psfrag{x}[c]{$\\neg$ }    \\psfrag{y}[c]{$\\ ; \\imath$ }    \\psfrag{m}[c]{\\small $ \\max$ }    \\psfrag{0}[c]{\\small $ 0 $ }    \\includegraphics[width=0.70\\textwidth]{ind1}\\ ] ] beta : :    a function @xmath186 which satisfies    @xmath187 , @xmath188 , and    @xmath189 .",
    "@xmath180{\\small $ x$ }    \\psfrag{b}[c]{\\small $ \\beta(x)$ }    \\psfrag{x}[c]{$\\neg$ }    \\psfrag{y}[c]{\\small $ \\ ; \\beta$ }    \\psfrag{m}[c]{\\small $ \\max$ }    \\psfrag{0}[c]{\\small $ 0 $ }    \\psfrag{s}[c]{\\small $ { \\triangleright}_2 $ }    \\psfrag{d}[c]{\\small $ { \\triangleright}_{0.5}$ }    \\includegraphics[width=0.70\\textwidth]{beta_fun}\\ ] ] selector : :    depending on the colour @xmath47 of a control strand , either    @xmath6 or @xmath7 emerges as the output ,    @xmath190 . to be precise , @xmath191 if @xmath192    and @xmath193 if @xmath95 .    @xmath180{\\small $ y$ }    \\psfrag{u}[c]{\\small $ \\ ; \\tau$ }    \\psfrag{b}[c]{\\small $ x$ }    \\psfrag{c}[c]{\\small $ c$ }    \\psfrag{z}[c]{\\small $ z$ }    \\psfrag{g}[c]{\\small $ s$ }    \\psfrag{x}[c]{$\\neg$ }    \\psfrag{y}[c]{\\small $ \\ ; \\beta$ }    \\psfrag{m}[c]{\\small $ \\max$ }    \\psfrag{0}[c]{\\small $ 0 $ }    \\psfrag{s}[c]{\\small $ { \\triangleright}_s$ }    \\psfrag{d}[c]{\\small $ { \\triangleright}_{0.5}$ }    \\includegraphics[width=0.85\\textwidth]{selector}\\ ] ] where    @xmath48 is an arbitrary constant whose value is greater than    @xmath40 .",
    "mask generating machine : :    this sub - machine is shown in figure  [ fig : mask ] .",
    "its input registers    are a register coloured by an integer @xmath194 called a    _ pointer _ , and a sequence of coloured registers together called a    _ mask_. its output registers are a register coloured @xmath195    and one register coloured @xmath38 for all other input coloured    registers , except for a single register coloured @xmath39 in    the @xmath195th position of the output .",
    "[ c]@xmath39 [ c]@xmath40 [ c]@xmath55 [ c]@xmath195 [ c]@xmath196 [ c]_mask _ [ c]@xmath197 [ c]@xmath198 [ c]@xmath199 [ c]@xmath113 [ c]@xmath38 [ c]@xmath200 [ c]@xmath158 [ c]@xmath201       the first step in realizing a turing machine is to mimic the finite control unit , _",
    "i.e. _ to simulate the transition function @xmath202 given the _",
    "current machine state _ @xmath203 and the _ symbol currently under the r / w head _ @xmath204 , the _ transition function _ determines the _ next machine state _ @xmath205 together with a pair of tape instructions : the _ symbol to be written _",
    "@xmath206 , and an @xmath207 movement of the head to its next position along the tape . without loss of generality",
    "we shall assume henceforth that the finite control states are all natural numbers , and in particular that @xmath208 .",
    "the basic building block of the finite control tangle machine is a _ hardwired transition _ , that is a function @xmath209 , @xmath210 where @xmath211 denote , respectively , the next assumed state and the tape instructions as specified in the definition of @xmath212 .",
    "the parameters @xmath213 and the respective output of @xmath212 , the triplet @xmath214 , are hardwired into the tangle machine realization of @xmath212 through the quandle parameters .",
    "see figure  [ fig : delta ] .",
    "[ c]@xmath215 [ c]@xmath216 [ c]@xmath197 [ c]@xmath217 [ l]_@xmath218th strand _ [ l]_@xmath219st strand _ [ c]@xmath220 [ c]@xmath38 [ l]@xmath221 [ l]@xmath222 [ l]@xmath223     the hardwired transition is symbolically represented as @xmath224{\\small $ q$ } \\psfrag{u}[c]{\\small $ u$ } \\psfrag{k}[c]{\\small $ \\ ; \\delta_{i , j}$ } \\psfrag{f}[c]{$\\bigg \\ } \\delta_{i , j}$ } \\includegraphics[width=0.25\\textwidth]{delta1}\\ ] ]    the transition function @xmath225 is constructed by combining several hardwired transitions .",
    "note that there are not more than @xmath226 possible transitions in the finite control ( @xmath42 states multiplied by @xmath55 input symbols ) .",
    "thus the number of distinct binary operations in @xmath2 does not exceed @xmath227 , which accounts for @xmath226 triplets @xmath228 and a few other operations required for realizing the memory unit .",
    "a detailed construction of the finite control sub - machine is shown in figure  [ fig : fc ] .",
    "[ c]@xmath203 [ c]@xmath204 [ c]@xmath229 [ c]@xmath230 [ c]@xmath231 [ c]@xmath232 [ c]@xmath233 [ c]@xmath234 [ c]@xmath235 [ l]@xmath205 [ l]@xmath206 [ l]@xmath207      the memory unit consists mainly of the tape logic .",
    "it accepts a finite , possibly unbounded set of registers whose colours are manipulated in the basis of commands @xmath206 and @xmath207 received from the finite control .",
    "the majority of the registers of the memory unit correspond to tape cells whose content is represented by colours from the set @xmath60 .",
    "we construct the memory ( tape ) reading and writing operations using a mask generating machine together with selector machines to output the colour of the @xmath236th register , either as it originally appeared or modified .",
    "see figure  [ fig : write ] .",
    "[ c]@xmath237 [ c]@xmath238 [ c]@xmath239 [ r]@xmath240 [ r]@xmath241 [ r]@xmath242 [ c]@xmath243 [ l]@xmath244 [ l]@xmath245 [ l]@xmath246 [ l]@xmath196 [ r]@xmath196 [ c]@xmath247 [ c]@xmath112 [ c]@xmath248 [ c]@xmath249 [ c]@xmath250    .48   is an arbitrary parameter.,title=\"fig:\",scaledwidth=74.0% ]    .48   is an arbitrary parameter.,title=\"fig:\",scaledwidth=74.0% ]    figure  [ fig : ts2 ] illustrates the memory unit , connected to the finite control unit .",
    "its inputs are :    1 .   an _ integer pointer _",
    "register coloured @xmath236 , indicating the current head position .",
    "2 .   a finite , possibly unbounded set of registers",
    "each of which represents a single ( memory ) cell on a tape .",
    "these tape registers are coloured @xmath251 .",
    "3 .   a pair of registers coloured correspondingly by a pair instructions @xmath252 , where @xmath206 denotes the symbol to be written in the current cell to which the head points ( which is numbered @xmath236 ) , and @xmath207 denotes the ( possibly zero ) increment to be added to @xmath236 , so that @xmath253 .",
    "the outputs of the memory unit are :    1 .",
    "the updated pointer @xmath254 .",
    "2 .   a finite , possibly unbounded set of registers whose colours",
    "@xmath255 have been all passed unchanged , except for a single cell whose content may have been modified .",
    "3 .   a strand coloured by @xmath256 , the content of the cell to which the head points in its new location @xmath254    [ c]_w _ [ c]@xmath257 [ c]_r _ [ c]@xmath206 [ c]@xmath207 [ c]_memory _ [ r]@xmath258 [ r]@xmath259 [ r]@xmath260 [ r]@xmath236 [ l]@xmath261 [ l]@xmath262 [ l]@xmath263 [ l]@xmath254 [ l]@xmath256 [ l]@xmath196 [ r]@xmath196 [ c]@xmath203 [ l]@xmath205 [ c]@xmath204 [ c]@xmath229     to simulate the sequential operation of a turing machine , copies of the finite control unit and of the memory unit are to concatenated in the obvious manner . concatenating @xmath264 copies of the machine in figure  [ fig : ts2 ] simulates @xmath264 successive computations of a turing machine ( see figure  [ fig : ts1 ] ) .",
    "this justifies naming such a procedure _",
    "iteration_.    [ c]_memory _ [ c]_finite control _       a halting state is a state for which : @xmath265 once arriving at a halting state , further iterations do not alter the memory content of the machine .",
    "the state @xmath266 represents an equilibrium which may or may not be reached for a given input sequence @xmath267 . a machine whose input registers are coloured by a halting state can be closed by concatenating respective inputs and outputs as shown in figure  [ fig : ts3 ] .",
    "[ c]_memory _ [ c]_finite control _",
    "the decision of a crowd can converge to a correct answer even when each individual has limited knowledge .",
    "this phenomenon is known as _ wisdom of the crowds _ @xcite . in line with ` the many being smarter than the few ' , we extend the notion of interactive proof systems  @xcite to a system in which a collection of verifiers interact to prove a claim together .",
    "might such a crowd of verifiers collaborate to prove more than could be proven by any individual verifier in the crowd ?",
    "consider a family of verifiers , each with a belief concerning whether @xmath72 or @xmath74 .",
    "we model the belief of each verifier @xmath268 at time @xmath84 as a bernoulli random variable @xmath269 whose realizations @xmath270 are either @xmath271 or @xmath272 .",
    "we interpret @xmath273 as ` @xmath268 believes at time @xmath84 that @xmath72 ' , and we interpret @xmath274 as ` @xmath268 believes at time @xmath84 that @xmath74 ' .",
    "consider an interaction at time @xmath84 with agent @xmath78 , one of whose patients is @xmath268 .",
    "the realization @xmath275 of @xmath276 may equal either the belief of the agent @xmath277 or the belief of the patient @xmath270 .",
    "in other words , @xmath268 either retains her belief or is ` convinced ' by @xmath78 to change her belief to that of @xmath78 ( we use female pronouns for the verifiers , who are all ` alices ' ) .",
    "whether or not @xmath78 ` succeeds in convincing @xmath268 ' depends on a message @xmath278 from a _ prover _",
    "@xmath279 with access to an _ oracle_. only the belief of patients changes at an interaction .",
    "the agents and the verifiers who do not participate in the interaction do not change their beliefs , so in particular @xmath280 always .",
    "there are three constants associated to the agent @xmath78 at an interaction at time @xmath84 : a _ completeness parameter _",
    "@xmath281 , a _ soundness parameter _ @xmath282 with @xmath283 , and a _ deformation parameter _ @xmath284 . for simplicity , we will assume that these three parameters are the same for all agents in the network , and @xmath285 will be written @xmath286 correspondingly .",
    "our basic requirement for an interaction is that the following pair of inequalities be satisfied :    @xmath287 \\text{\\emph{(deformed soundness ) } } & x \\notin l \\ ; \\longrightarrow \\ ; \\pr(w_{t+1 } = v_t \\mid v_t = v_t ) \\leq s{\\delta}. \\end{array}\\ ] ]    the deformed completeness and soundness , @xmath288 and @xmath289 , may both be below @xmath290 or may both be above @xmath290 and bounded away from @xmath39 .    in the limit @xmath291 , specific values of @xmath47 and of @xmath48 turn the pair of inequalities into familiar pairs of inequalities in interactive proof theory @xcite .",
    "for example , for @xmath292 and @xmath293 , where @xmath294 , we obtain the completeness and soundness constraints of an @xmath0 verification .      when keeping track of the beliefs of many different verifiers at many different times , it is cumbersome to work directly with ( [ eq : ipdef4 ] )",
    ". instead , we introduce a shorthand to keep track of the belief of a verifier , both if @xmath72 and also if @xmath74 , in a single expression",
    ".    the _ belief statistics _",
    "@xmath295 of verifier @xmath268 at time @xmath84 is written : @xmath296 where @xmath297 $ ] denotes the _ greatest lower bound _ for the belief of @xmath268 that @xmath72 at time @xmath84 conditioned on this belief indeed being true , and @xmath298 $ ] denotes the _ greatest lower bound _ for the belief of @xmath268 that @xmath74 at time @xmath84 conditioned on this opposite belief indeed being true .",
    "note that @xmath299 need not equal @xmath39 . in particular : @xmath300 x",
    "\\notin l \\ ; & \\longrightarrow \\ ; b\\leq \\pr(w_{t } = { \\left|\\mathrm{false}\\right ) } ) .",
    "\\end{array}\\ ] ]    an interaction between @xmath268 and @xmath78 at time @xmath84 concludes either with @xmath268 accepting the belief of @xmath78 or with @xmath268 sticking to her own belief . denoting by @xmath301 the probability ( or more precisely a lower bound on it ) of @xmath268 switching to the belief of @xmath78 in the next time - frame",
    ", the distribution of possible beliefs of @xmath268 in the next time - frame is described by :    @xmath302    belief statistics written as in facilitate calculations of probabilities across a network .",
    "this tool is used throughout the remainder of this note ( some examples would be given shortly ) . here",
    "we explain how and combine to give a compact way of representing _ two entirely different interactions _",
    ", one assuming @xmath72 and the other assuming @xmath74 . this may be slightly confusing at first , so the reader s attention is called to this point .    owing to , the probabilities anywhere in the network at time @xmath303 depend on the parameter @xmath301 .",
    "we may do all calculations and treat it as a formal parameter .",
    "having in mind that an interaction is ultimately a procedure terminating with the statistics in , the parameter @xmath301 is set either to @xmath288 or to @xmath289 depending on whether or not @xmath6 is in @xmath77 . to verify that a network _ decides _",
    "@xmath77 we repeat the computation twice , first for the case where @xmath304 and then for @xmath305 . in the former case",
    "we will be interested only in the coefficient of @xmath271 whereas in the latter case we will be interested only in the coefficient of @xmath272 .",
    "here is an illustrative calculation for a single interaction .",
    "let @xmath306 and @xmath307 .",
    "invoke using the completeness and soundness parameters in : first using @xmath308 and then using @xmath309 .",
    "hence , @xmath310 ( \\cdots ) { \\left|\\mathrm{true}\\right ) } + ( 1-s{\\delta}){\\left|\\mathrm{false}\\right ) } , & x \\notin l. \\end{array } \\right.\\ ] ] this interaction is said to decide @xmath77 only if @xmath311 and @xmath312 .",
    "verifiers in our framework are assumed to be implemented as probabilistic polynomial - time turing machines whose beliefs are either internal states or are stored on tapes . similarly , an interaction is a polynomial - time procedure .",
    "consider now a crowd of verifiers @xmath313 whose initial beliefs at time @xmath314 are @xmath315 .",
    "allow them to interact at times @xmath316 , subject to parameters @xmath317 and @xmath318 .",
    "we write @xmath70 for this sequence of interactions .",
    "a language @xmath69 is said to be _ decided _ by @xmath70 if @xmath70 contains a verifier @xmath78 whose belief at time @xmath45 is @xmath319 , such that for a fixed constant @xmath320 , we have :    @xmath321 x \\notin l \\longrightarrow b \\geq \\frac{1}{2 } + { \\left\\vertx\\right\\vert}^{-\\kappa}. \\end{array}\\ ] ]    this definition depends on the choice of @xmath320 .",
    "the class _ braided interactive polynomial time _ ( @xmath44 ) consists of those languages which are decidable for any fixed @xmath320 by some network @xmath70 in time @xmath45 , polynomial in @xmath76 .",
    "we denote this class @xmath322 where @xmath45 is _ the number of interactions in @xmath70_.    the definition of class @xmath44 is similar in spirit to the class @xmath323 .",
    "we will see below that it includes class @xmath0",
    ". letting reflect the class @xmath324 ( _ i.e. _ taking strict inequalities and right - hand constants equal to @xmath290 ) will result in networks that decide any @xmath325 .",
    "our networks admit a convenient diagrammatic description .",
    "we represent an interaction as a wire cutting through other wires ( see figure  [ fig : inter ] ) .",
    "the overcrossing wire , which becomes slightly thickened in an interaction , carries the belief statistics of an agent whereas the undercrossing wires carry the belief statistics of her patients .",
    "an example of many concatenated interactions is given in figure  [ f : rumour2 ] .",
    "[ c]@xmath295 [ c]@xmath326 [ r]@xmath327 [ l]@xmath328     [ c]@xmath329 [ c]@xmath330 [ c]@xmath331 [ c]@xmath332 [ c]@xmath38 [ c]@xmath39 [ c]@xmath40 [ c]@xmath55 [ c]@xmath333 [ c]@xmath334 [ c]@xmath335 [ c]@xmath336 [ c]@xmath337 [ c]@xmath338 [ c]@xmath339 [ c]@xmath340 [ c]@xmath341 [ c]@xmath342 [ c]@xmath343 [ c]@xmath344 [ c]@xmath345 [ c]_tangle machine _ [ c]_rumour - passing network _ [ c]_(flow of beliefs ) _ [ c]_time _",
    "the diagram representing the rumour passing network in figure  [ f : rumour2 ] is a _ braid _ , which is a special sort of _",
    "tangle_. here , such diagrams represent the flow of beliefs within a network of interacting machines ( verifiers ) .",
    "when many patients pass under a single agent , we define this to imply that for each patient , the belief sampled from that patient is _ independent _ of the belief sampled from every other patient , and the belief sampled from the agent to update that patient s belief is independent of the belief sampled from the agent to update every other agent s belief .",
    "to say the same thing in a different way , multiple patients under the same agent are independent and unsynchronized during that time - frame .",
    "we will discuss this point further in section  [ ss : reversibility ] .",
    "the capacity of a network to prove or disprove a claim is an emergent property .",
    "out of a number of uncertain interactions , none of which prove the claim , the truth may eventually materialize . as an example , consider the two pairs of two consecutive interactions pictured in figure  [ fig : pcpm ] .",
    "both sequences involve three verifiers , designated @xmath132 , @xmath136 and @xmath346 .",
    "their initial beliefs are shown at the bottom .",
    "[ c]@xmath347 [ c]@xmath348 [ c]@xmath349 [ c]@xmath350 [ c]@xmath351 [ c]@xmath352 [ c]@xmath353 [ c]_time _     ' '' ''    set the parameters to @xmath354 , @xmath355 , and @xmath356 .",
    "allow the verifiers to interact in the left diagram . at time",
    "@xmath357 , beliefs @xmath358 and @xmath359 of @xmath132 and of @xmath136 have been updated to @xmath360 and to @xmath361 ( @xmath346 does not change his belief ) .",
    "the distributions are : @xmath362 \\frac{21}{32}{\\left|\\mathrm{false}\\right ) } + \\frac{11}{32}{\\left|\\mathrm{true}\\right ) } , & x \\notin l. \\end{array } \\right.\\ ] ] hence , @xmath363 { \\left|x_2\\right ) } = \\left({\\left|x_0\\right)}^{{\\left|z_0\\right)}}\\right)^{\\left({\\left|y_0\\right)}^{{\\left|z_0\\right)}}\\right ) } & = \\frac{21}{32}{\\left|\\mathrm{false}\\right ) } +   \\frac{5}{8 } { \\left|\\mathrm{true}\\right ) } , & \\text{(right network)}. \\end{array}\\ ] ]    similarly ,    @xmath364    from this we see that @xmath132 decides correctly at time @xmath365 with probability at least @xmath366 or @xmath367 , depending on whether @xmath304 or @xmath74",
    ". both of these are greater that @xmath290 , so the pair of inequalities  [ eq : lang ] , for a suitable @xmath320 , a protocol underlied by the above interactions will succeed in deciding , at @xmath368 , whether or not @xmath72 .    note again that @xmath369 and we evaluate with @xmath370 for the coefficient of @xmath271 and with @xmath371 for the coefficient of @xmath272 .",
    "this is the same for all interactions in both diagrams .",
    "note that both diagrams in figure  [ fig : pcpm ] have the same _ initial beliefs _",
    "@xmath372 , @xmath373 , and @xmath374 and the same _ terminal beliefs _",
    "@xmath368 , @xmath375 , and @xmath376 , and differ only in the belief of @xmath132 at time @xmath377 .",
    "thus , these two diagrams underlie _ equivalent _ deformed interactive proofs , each of which can uniquely be reconstructed from the other , which decide the same languages , but which differ at an intermediate step .",
    "this equivalence is the topic of section  [ sec : lowdim ] .",
    "in this section , we show how we may deform an ip system with any soundness parameters @xmath378 , for any deformation parameter @xmath318",
    ". the completeness and soundness parameters of the deformed system will be @xmath379 and @xmath380 correspondingly .",
    "the deformation parameter @xmath46 serves to introduce noise between the prover and the verifiers . in the @xmath291 limit",
    "we recover @xmath0 , and the information obtained by a verifier at each interaction shrinks as @xmath53 . but",
    "theorem  [ thm : existence ] proves that we can recover @xmath0 from @xmath44 by concatenating many consecutive deformed interactions .    before describing how ip may be deformed",
    ", we outline the major differences between a single interaction in ip and braidip : + @xmath381      we present two approaches to deform an @xmath0 protocol .",
    "the end result is the same , but the ` story ' is different .",
    "we may think of a patient @xmath268 and an agent @xmath78 of an interaction at time @xmath84 as representing different aspects of a single verifier . in this approach we conceive of @xmath268 and @xmath78 as being a single unit @xmath382 .",
    "the verifier @xmath382 transmits to the prover @xmath279 the belief of both @xmath268 and @xmath78 .",
    "we may imagine @xmath268 and @xmath78 as litigants in a court case , presenting their claims to the judge @xmath279 , where @xmath268 is the defendant and @xmath78 is the plaintiff .",
    "if both @xmath268 and @xmath78 make the same claim , then @xmath279 throws the case out ( _ i.e. _ @xmath383 and @xmath384 ) . on the other hand , if @xmath78 disagrees with @xmath268 , then @xmath382 query the prover @xmath279 according to the original interactive protocol .",
    "if according to the original protocol , @xmath268 s claim should be accepted , then @xmath279 rules in @xmath268 s favour ( _ i.e. _ @xmath383 and @xmath384 ) .",
    "but if according to the original protocol @xmath268 s claim should be rejected and @xmath78 s claim should be accepted , then @xmath279 picks an integer uniformly at random between @xmath39 and @xmath264 .",
    "if the number @xmath279 picked is less than @xmath385 , then @xmath279 rules in favour of @xmath78 ( _ i.e. _ @xmath386 and @xmath384 ) .",
    "otherwise he rules in favour of @xmath268 .",
    "perhaps @xmath46 represents a chosen standard of ` reasonable doubt ' .",
    "constants @xmath48 and @xmath47 perhaps represent constants associated with the mechanics of the courthouse procedure .",
    "note that as @xmath291 , a single interaction involving two verifiers with opposite beliefs recovers ip .",
    "the following approach has an information - theoretic interpretation .",
    "consider the prover @xmath279 as an information source , the agent verifier @xmath78 as an encoder , and the patient verifier @xmath268 as a decoder .",
    "the query information transmitted from @xmath268 to @xmath279 is relayed via a perfect communication channel ( _ i.e. _ there is no loss of information in this direction ) .",
    "the replies from @xmath279 are passed on to @xmath78 who encodes them and transmits them back to @xmath268 , this time through a noisy channel .",
    "this means that the prover replies emerge corrupted on @xmath268 s end , which consequently influences her decision .",
    "introducing a noisy channel into the formalism restricts the information obtained by the patient verifier from the prover .",
    "it tempting to state that the combination prover - agent - noisy channel behaves like a mendacious agent , in that the agent @xmath78 decided whether to ` tell the truth ' or to ` lie ' to @xmath268 . but to think of @xmath78 as a mendacious agent is inaccurate .",
    "for one thing , the agent s strategy whether or not to reliably relay @xmath279 s replies to @xmath268 must account for the beliefs of both @xmath78 and @xmath268 , either one of which may not be correct .",
    "her behavior does not stem from her being more knowledgeable ; rather we may think of it as a manifestation of her own beliefs .",
    "it is important to note that although @xmath78 receives the replies from @xmath279 she is not allowed to use this information to update her own belief .",
    "one can think of protocols taking advantage of the fact that @xmath78 is not aware of @xmath268 s queries wherein this restriction follows naturally .",
    "for now it is enough to assume that @xmath78 will not use the prover replies for her own benefit .",
    "here is how such a protocol may run . upon disagreement between @xmath268 and @xmath78 , _",
    "i.e. _ @xmath387 , the patient @xmath268 sends her queries to @xmath279 .",
    "the replies to @xmath268 s queries are then sent by @xmath279 to the agent @xmath78 . at this point ,",
    "@xmath78 , who is a verifier much like @xmath268 , runs her own verification test on the prover replies .",
    "he obtains @xmath388 for accept / true and @xmath389 for reject / false . in case where @xmath388 she tampers with the prover replies such that when they are received by @xmath268 her verification would indicate @xmath277 with probability @xmath46 . in case where @xmath389 the agent @xmath78 tampers with the prover replies such that the test of @xmath268 would indicate @xmath390 .",
    "implicit in the above protocol is the fact that the capacity of @xmath78 to deceive @xmath268 is limited by @xmath78 s own belief .",
    "if her belief , @xmath277 , coincides with the true nature of claim then she may potentially have more power to deceive @xmath268 .",
    "[ c]@xmath276 [ c]@xmath78 [ c]@xmath279 [ c]@xmath391 [ c]@xmath392 [ c]@xmath393 [ c]@xmath394 [ c]@xmath39 [ c]@xmath46 [ c]@xmath395   and @xmath78 when @xmath387 .",
    "the channels between @xmath268 and @xmath78 are symmetric .",
    "the labels above edges indicate transition probabilities .",
    "the box of @xmath78 is divided into two sections representing her belief @xmath277 ( left section ) and the outcome of his verification @xmath278 ( right section).,title=\"fig:\",scaledwidth=90.0% ]    the protocol just described underlies a noisy symmetric channel between @xmath268 and @xmath78 . if @xmath388 , this channel is characterized by @xmath46 and has a capacity of @xmath396 , where @xmath397 is the shannon entropy of a bernoulli random variable with parameter @xmath46 .",
    "it induces a maximal loss of @xmath39 bit of information for @xmath398 .",
    "an illustration of the communication between the three parties patient - agent - prover is given in figure  [ fig : channel ] .",
    "the agents in our picture all receive messages from the same oracle .",
    "this essentially suggests that a network of interactions is a construct _ quantizing _ the oracle knowledge . at every location within the network only a quanta of this knowledge",
    "is used by way of interaction between a patient and an agent . later on we will show that although a single interaction may be limited in its capacity to prove the claim , the proof may yet emerge somewhere in the network depending on its topology . the triple patients - agent - oracle brings to mind some basic models of reasoning and information transfer .",
    "perhaps a patient is an entity whose beliefs reflect both prior knowledge and observations .",
    "the patient is exposed to a genuine phenomenon , which the patient has not seen before .",
    "the phenomenon , which is the metaphor for an oracle , is beyond the comprehension of the patient and hence a number of observations are collected in an attempt to reach a definitive conclusion .",
    "these observations , however , may be distorted by limitations of the patient measuring apparatus , or perhaps they contradict prevailing explanations and beliefs . in either",
    "cases observations contain , or otherwise introduce , uncertainty .",
    "observations are the metaphor for agents .",
    "what the patient tries to accomplish underlies the bayesian inference paradigm .",
    "here is another metaphor .",
    "a patient is a decoder , an oracle is an information source , and an agent is an encoder who relays the encoded oracle message through a noisy communication channel .",
    "alternatively , an agent - patient pair is a verifier and the oracle is a prover who relays a message through a noisy communication channel .",
    "all metaphors reflect knowledge transfer subject to uncertainties .",
    "the goal of this section is to prove theorem  [ thm : existence ] , repeated below for convenience .",
    "@xmath49 where : @xmath399 with @xmath51 .",
    "the growth rate of @xmath45 is @xmath52 as @xmath53 .",
    "we explicitly construct a configuration of interactions which decide a language @xmath77 in @xmath0 .",
    "this configuration , which is illustrated in figure  [ fig : pm ] for the case @xmath400 is a scaled up version of that in figure  [ fig : pcpm ] .",
    "it involves @xmath401 verifiers @xmath268 and @xmath402 , and @xmath45 interactions .",
    "the parameters of all interactions are the same , and are @xmath403 .",
    "[ c]@xmath404 [ c]@xmath405 [ c]@xmath406 [ c]@xmath407 [ c]@xmath408 [ c]@xmath409   theorem proving network with @xmath410 verifiers @xmath268 , @xmath411 , @xmath412 , @xmath413 , and @xmath414 , and @xmath333 interactions.,title=\"fig:\",scaledwidth=30.0% ]    let @xmath415 .",
    "the initial beliefs at time @xmath314 are set to @xmath416 and @xmath417    thus , at time zero there are two verifiers with opposite beliefs and @xmath418 verifiers whose initial belief is that the claim @xmath72 is 50% true and 50% false .    calculating the output statistic @xmath419 ( which occurs at time @xmath45 ) yields @xmath420 \\left ( \\frac{1}{2 } { \\left|\\mathrm{false}\\right ) } + \\frac{1}{2 } { \\left|\\mathrm{true}\\right ) }",
    "\\right ) + c{\\delta}{\\left|\\mathrm{true}\\right ) } , & x \\in l ; \\\\[0.5ex ] ( 1-s{\\delta})^\\chi { \\left|\\mathrm{false}\\right ) } + \\left [ 1 - s{\\delta}- ( 1-s{\\delta})^\\chi \\right ] \\left ( \\frac{1}{2 } { \\left|\\mathrm{false}\\right ) } + \\frac{1}{2 } { \\left|\\mathrm{true}\\right ) } \\right ) + s{\\delta}{\\left|\\mathrm{true}\\right ) } , & x \\notin l. \\end{array } \\right.\\ ] ] from we see that the configuration in figure  [ fig : pm ] decides @xmath77 if and only if : @xmath421 x \\notin l \\longrightarrow ( 1-s{\\delta})^\\chi > s{\\delta}. \\end{array}\\ ] ] from here we obtain the following bounds for @xmath45 : @xmath422 equation  [ eq : bounds ] follows upon noting that @xmath423 for any @xmath424 . therefore : @xmath425 for @xmath45 within these bounds , the above configuration decides @xmath77 .    equation   tells us that @xmath45 has approximately the same growth rate in @xmath76 as @xmath426 .",
    "by definition of @xmath44 , @xmath45 s growth rate is polynomial in the word length @xmath76 , and so therefore @xmath46 is asymptotically bounded below by approximately one over a polynomial in @xmath76 .",
    "we may extend class braidip by allowing each verifier to have its own ` local ' time parameter , so that a patient belief @xmath269 may interact with an agent belief @xmath427 for @xmath428 , and become updated to @xmath276 .",
    "@xmath178{\\small $ { \\left|v_s\\right)}$ } \\psfrag{a}[c]{\\small $ { \\left|w_t\\right)}$ } \\psfrag{c}[l]{\\small $ { \\left|w_{t+1}\\right)}$ } \\includegraphics[width=0.17\\textwidth]{crosmy}\\ ] ] we also allow verifiers to travel backwards or forwards in time and to update their previous or future beliefs , so that @xmath85 may be updated by agent @xmath427 to become @xmath429 , where @xmath85 and @xmath427 are beliefs of one and the same verifier .",
    "thus , each verifier may update their beliefs with past or future beliefs of itself ( via feedback loops ) or of other verifiers .",
    "we write @xmath70 for a network of such concatenated interactions , subject to parameters @xmath317 and @xmath318 .",
    "an example of such a network is given in section  [ sec : hopf ] .",
    "a language @xmath69 is said to be _ decided _ by @xmath70 if @xmath70 contains a verifier @xmath78 whose belief at time @xmath45 is @xmath319 , such that for a fixed constant @xmath320 the inequalities   are satisfied .",
    "the class _ tangled interactive polynomial time _ ( @xmath43 ) consists of those languages which are decidable for any fixed @xmath320 by some network @xmath70 which contains @xmath45 interactions , where @xmath45 is polynomial in @xmath76 .",
    "we denote this class @xmath430 . by theorem  [ thm : existence ] we know that @xmath431    we wonder about the connection between our classes @xmath44 and @xmath43 and multi - prover @xmath0 ( @xmath88 )  @xcite . in particular , we wonder whether @xmath432 or @xmath433 , particularly if we allow different interactions to have different parameters ( in this note all interactions are required to have the same parameters because that s all we need , but there is no obstruction to considering the more general case ) .",
    "consider an @xmath0 system whose soundness @xmath48 is nearly equal to its completeness @xmath47 but for a small constant @xmath434 that depends on the word length @xmath76 , _ i.e. _ @xmath435 . as @xmath436 ,",
    "the @xmath0 system becomes inefficient in the sense that it accepts every word with probability nearly @xmath47 regardless of its membership in @xmath77 .",
    "yet we can still construct a deformed @xmath0 system that decides @xmath77 .",
    "one may wonder how the number of interactions in such a system is affected by the decreasing gap @xmath434 .",
    "the number of interactions in a network of the form given in figure  [ fig : pm ] is implicit in theorem  [ thm : existence ] .",
    "fix @xmath318 and note from equation   that , as @xmath434 decreases , the values bounding @xmath45 become nearly identical . but",
    "@xmath45 is an integer , so the two bounds must have an integer between them . in general , that means that the distance between them is at least @xmath39 .",
    "therefore , the number of interactions grows as @xmath434 decreases .",
    "we may need to take @xmath53 as @xmath436 .",
    "in fact it can be shown that in this case @xmath437 which means that we require @xmath438 interactions .    can fewer interactions decide @xmath77 ?",
    "the configuration in figure  [ fig : hopfm ] decides @xmath77 for any @xmath434 using substantially less than @xmath439 interactions .",
    "this machine is a concatenation of a number of identical smaller configurations of interactions , denoted @xmath440 . when concatenated to form a single configuration , we require approximately @xmath441 copies of @xmath442 to decide @xmath77 ( the precise argument is given below ) .",
    "if we were to trace its colours ( probability generating functions ) we would notice that it behaves much like a repetition of a binary random experiment ( _ e.g. _ coin flipping ) , hence the magnitude of @xmath45 .",
    "we have named this configuration the _ hopf  chernoff configuration _ suggesting both to its structure and , to some extent , its functionality .",
    "[ c]@xmath443 [ c]@xmath444 [ c]@xmath445 [ c]@xmath446 [ c]@xmath447 [ c]@xmath448 [ l]@xmath449 [ l]@xmath450 [ c]@xmath451 [ c]@xmath442 [ c]@xmath452 [ c]@xmath453 [ l]@xmath454     [ thm : hopfm ] consider the configuration of interactions in figure  [ fig : hopfm ] which underlies a deformed @xmath0 system with completeness @xmath288 and soundness @xmath455 , where @xmath456 .",
    "there exists a pair of beliefs , @xmath457 and @xmath458 , independent of any other belief in the machine , such that for any given set of initial beliefs @xmath459 the machine decides any @xmath415 using @xmath460 submachines ( and @xmath461 interactions ) .",
    "in particular , letting @xmath462 { \\left|\\beta\\right ) } = \\left ( 1 - \\frac{1}{2 } c { \\delta}+ \\frac{1}{12 } \\epsilon { \\delta}\\right ) { \\left|\\mathrm{true}\\right ) } + \\left ( \\frac{1}{2 } c { \\delta}- \\frac{1}{12 } \\epsilon { \\delta}\\right ) { \\left|\\mathrm{false}\\right)}. \\end{array}\\ ] ] yields @xmath463 { \\left|\\mathrm{true}\\right)}+\\left[\\frac{1}{2 } - \\frac{1}{12}\\epsilon{\\delta}\\right]{\\left|\\mathrm{false}\\right ) } , & x \\in l ; \\\\[0.5ex ] \\left[\\frac{1}{2 } - \\frac{1}{12}\\epsilon{\\delta}\\right ] { \\left|\\mathrm{true}\\right)}+\\left[\\frac{1}{2 } + \\frac{1}{12}\\epsilon{\\delta}\\right]{\\left|\\mathrm{false}\\right ) } , & x \\notin l. \\end{array } \\right.\\ ] ] namely , @xmath464 { \\left|\\mathrm{true}\\right ) } + \\left[\\frac{1}{2 } + \\frac{1}{12}\\epsilon{\\delta}\\right ] { \\left|\\mathrm{false}\\right)}$ ] .",
    "let us begin by writing down the relations between the outputs @xmath465 and inputs @xmath466 of this machine .",
    "note that @xmath467 explicitly writing using the formal parameter @xmath301 yields @xmath468    letting @xmath469 , @xmath470 , equation underlies a linear dynamical system .",
    "it is easy to verify that the eigenvalues of the transition matrix @xmath471 all are within the unit circle , i.e. @xmath472 for any @xmath473 .",
    "that means that the system reaches a steady - state as @xmath474 .",
    "the steady - state can be obtained as follows .",
    "rewrite as @xmath475 and solve for @xmath167 and @xmath476 .",
    "thus , @xmath477    define @xmath478 { \\left|\\beta\\right ) } { \\stackrel{\\textup{\\tiny def}}{=}}b { \\left|\\mathrm{true}\\right ) } + ( 1-b ) { \\left|\\mathrm{false}\\right)}. \\end{array}\\ ] ] for the network to decide @xmath77 we require the steady - state of @xmath167 to satisfy @xmath479 for some @xmath480 . using both and",
    "this requirement translates into the following set of equations @xmath481 ( 3 - 2(c-\\epsilon){\\delta})\\left ( \\frac{1}{2}-\\sigma \\right ) = 2(1-(c-\\epsilon){\\delta } ) a + b , & x \\notin l. \\end{array}\\ ] ] where the fact that @xmath308 for @xmath304 and @xmath482 for @xmath305 has been used .",
    "solving for the coefficients @xmath206 and @xmath483 while assuming @xmath484 yields .",
    "the underlying output probabilities in are given by .    to complete the argument we need to show that the network converges within the stated number of iterations .",
    "it is sufficient to consider the case where the output probabilities are attained to within the order @xmath485 .",
    "growth rate of the system is linear in @xmath486 where @xmath487 denotes the largest eigenvalue of @xmath471 .",
    "simple calculation shows that @xmath488 which yields @xmath489 .",
    "chernoff configuration is a recursive structure which is guaranteed to converge irrespective of its initial beliefs @xmath459 .",
    "in fact it represents a two - dimensional homogeneous irreducible markov chain whose rate of convergence is @xmath490 .",
    "its stationary distribution , which depends on whether @xmath72 or @xmath74 , is given by . by virtue of its convergence properties",
    "we may just let it run forever ( _ i.e. _ @xmath491 ) knowing that it will eventually reach a stationary distribution not far from .",
    "for that reason we may as well substitute the open network in figure  [ fig : hopfm ] with its closed counterpart in figure  [ fig : chopfm ] .    [",
    "c]@xmath447 [ c]@xmath448 [ c]@xmath167 [ c]@xmath476",
    "in this section we specialize to non - adaptive @xmath55bit verifiers , to exhibit that tangle machines may exhibit better performance parameters than classical systems .",
    "we deform the hstad pcp verifier , which has @xmath95 and @xmath492 .",
    "suppose the two verifiers disagree , @xmath493 , where @xmath494 .",
    "in this case the interaction proceeds as follows .",
    "the patient verifier @xmath268 provides the addresses of three bits to @xmath279 .",
    "these bits are received by the agent verifier @xmath78 which computes a certificate @xmath278 , which is equal either to @xmath39 meaning ` accept ' or to @xmath257 meaning ` reject ' .",
    "the agent then flips one out of the three bits with the following probabilities :    * @xmath495 @xmath496 @xmath497",
    "@xmath498 @xmath78 flips a bit with probability @xmath395 .",
    "* @xmath495 @xmath496 @xmath499",
    "@xmath498 @xmath78 flips a bit with probability @xmath46 . *",
    "@xmath500 @xmath496 @xmath497",
    "@xmath498 @xmath78 flips no bit .",
    "* @xmath500 @xmath496 @xmath499",
    "@xmath498 @xmath78 flips a bit .",
    "the corrupted set of bits is then sent back to @xmath268 who computes her own certificate .",
    "this protocol realizes the communication channel in figure  [ fig : channel ] .      in this section",
    ", we construct a tangle machine whose interactions are deformed hstad verifiers , which has perfect accuracy and a completeness of @xmath501 . this is worse than the conjectured bound of @xmath502 , but better than the best - known classical non - adaptive @xmath55bit @xmath56 protocol , whose soundness is only around @xmath503 .",
    "thus , our machine behaves like a single very good verifier .",
    "our machine makes use of the hopf ",
    "chernoff configuration in figure  [ fig : hopfm ] .    1 .",
    "choose input beliefs @xmath459 , @xmath470 , arbitrarily from @xmath504 .",
    "assume @xmath95 and fix @xmath46 .",
    "2 .   let @xmath457 be a bernoulli distribution with parameter @xmath290 .",
    "draw a belief from @xmath457 for the top agent , and set the bottom agent to the negation of that belief .",
    "we colour the bottom agent as @xmath505 , which equals @xmath457 as a distribution , to diagrammatically signify what we are doing .",
    "3 .   do the following for @xmath506 , where @xmath507 : * using the underlying deformed @xmath56 verifier , perform the four interactions of the hopf  chernoff configuration to propagate the beliefs of the two verifiers from @xmath508 to @xmath509 according to the diagram below .",
    "@xmath510{\\small $ \\mathrm{in}_1^i$ } \\psfrag{v}[c]{\\small $ \\mathrm{in}_2^i$ } \\psfrag{1}[c]{\\small $ \\alpha$ } \\psfrag{2}[c]{\\small $ \\neg\\alpha$ } \\psfrag{g}[l]{\\small $ \\mathrm{out}_1^i$ } \\psfrag{h}[l]{\\small $ \\mathrm{out}_2^i$ } \\includegraphics[width=0.27\\textwidth]{hopfm5}\\ ] ] * set @xmath511 , @xmath470 .",
    "4 .   if the patient belief in the output @xmath512 then return @xmath271 , otherwise return @xmath272 .",
    "[ thm : hopfmalg ] the hopf ",
    "chernoff machine approaches perfect completeness and soundness at most @xmath513 as @xmath514 in particular , if we put deformed hstad verifiers at interactions , its soundness is at most @xmath515 .",
    "completeness : :    assume that @xmath304 and note that as    @xmath291 , so does @xmath516 .    in the limit where @xmath517 note that by the hopf ",
    "chernoff    swaps the beliefs @xmath457 and @xmath505    such that always @xmath518 and    @xmath519 .",
    "thus step ( iv ) of the algorithm    concludes with @xmath271 .",
    "soundness : :    the soundness of the algorithm bounds the probability that    @xmath520 in case where    @xmath305 .",
    "this probability is given by    @xmath521    although not truly essential , the algorithm assumes    @xmath522 .",
    "the conditional probabilities above can be bounded using as follows .",
    "take @xmath523 and assume that    @xmath524 . in    this case",
    "implies : @xmath525    on the other hand , letting    @xmath526 , the    same equation reads : @xmath527    this follows from the fact that the algorithm decides    @xmath304 if @xmath520    irrespective of the beliefs themselves .",
    "for that reason these    equations coincide , though for different values of    @xmath457 and @xmath167 . both describe a    failure of the algorithm to decide @xmath305 .",
    "the    theorem now follows from , and .",
    "[ d : bisimulation ] a tangle machines @xmath70 and @xmath528 which each come equipped with a distinguished set of input and output registers are _ bisimilar _ if any computation that can be carried out on @xmath70 can be carried out on @xmath528 and vice versa .    because computations are defined only with respect to the pre - chosen sets of input and of output registers , definition  [ d : bisimulation ] encapsulates what may be thought of as a _ weak _ notion of bisimulation ( no requirement is made on ` silent ' or ` internal ' interactions ) .    in section  [ ss : equivalence ]",
    "we formulate a set of local moves , such that any two machines related by these local moves are bisimilar . in section  [ ss : reversibility ]",
    "we discuss a feature of our formalism , that is the ` unsplittability ' of our agent registers . in section  [ ss : zeroknowledge ]",
    "we suggest an application of machine equivalence to define a notion of _ zero knowledge _ for tangle machines and to utilize it to construct @xmath43 machines which are ` more secure ' in a specific sense .",
    "we give an example in section  [ ss : equivexample ] .",
    "finally , in section  [ ss : equivwye ] , we extend our notion of machine equivalence to machines which may have wyes .",
    "the key property of tangle machines is that they admit a local notion of equivalence @xcite .",
    "two ( quandle coloured , without wyes ) tangle machines are _ equivalent _ if they are related by a finite sequence of the moves in figures  [ f : local_moves_machines ] and  [ f : local_moves_machines1 ] .",
    "it is forbidden for these moves to involve input and output registers of a computation .",
    "[ c]@xmath8 [ c]@xmath529 [ c]_i1 _ [ c]@xmath6 [ c]_vr1_[c]_vr2_[c]_vr3 _ [ c]_sv_[c]_i2_[c]_fm1_[c]_fm2_[c]_i3 _ [ c]_st _ [ c]_st _   cosmetic moves for machines .",
    "directions are not indicated , meaning that the moves are valid for any directions , and the same for colourings.,title=\"fig:\",scaledwidth=85.0% ]    [ c]_vr1_[c]_vr2_[c]_vr3 _ [ c]_sv_[c]_r1_[c]_r2_[c]_r3_[c]_uc _ [ c]_st _   reidemeister moves for machines , valid for any directions of the agents .",
    "it is forbidden for these moves to involve input and output registers of a computation.,title=\"fig:\",scaledwidth=85.0% ]    two machines related by the local moves in figure  [ f : local_moves_machines ] carry out identical computations , and it follows from the construction of an interaction that two machines related by @xmath530 differ only by a trivial computation at which ` nothing happens ' .",
    "thus , the interesting moves for us are @xmath531 and @xmath532 in figure  [ f : local_moves_machines1 ] , which we will say more about later on .",
    "first note that , for @xmath531 to make sense , all participating colours must be defined .",
    "this requirement is non - trivial for a machine coloured by a quandloid .    for a machine coloured by a quagma ,",
    "the @xmath532 move is replaced by the following    @xmath178{\\small $ _ { \\blacktriangleright}$ } \\psfrag{a}[c]{\\small $ { \\triangleright}$ } \\psfrag{c}[c]{\\small r3 } \\includegraphics[width=0.4\\textwidth]{quagma}\\ ] ]    for all @xmath18 satisfying @xmath533 for all @xmath16 .",
    "if we choose input and output registers to be machine endpoints , then equivalent machines have identical initial and terminal beliefs which implies that both machines have the same computational power in terms of deciding a language .",
    "nevertheless , the local behaviour of equivalent may be different , in that the colours of intermediate interactions in between the same initial and terminal statistics may be different in equivalent machines .",
    "as in the earlier example in figure  [ fig : pcpm ] , equivalent machines may two different prover strategies arriving at the same proof .",
    "to expand that example , figure  [ f : pm_rmoves ] features several equivalent prover strategies for the machine in figure  [ fig : pm ] all which are obtained by application of @xmath532 moves .",
    "[ c]@xmath534 [ c]@xmath535 [ c]@xmath536 [ c]@xmath537 [ c]@xmath538 [ c]@xmath539   equivalent prover strategies for the machine in figure  [ fig : pm].,title=\"fig:\",scaledwidth=80.0% ]      in this section we discuss the single agent which acts on numerous patients and can not be split .",
    "such an agent features in moves @xmath531 and @xmath532 , and distinguishes our approach _",
    "e.g. _ from w ",
    "tangles @xcite .",
    "the @xmath531 move tells us that computations are reversible , in the sense that any operation @xmath3 has an inverse operation @xmath540 such that no information is computed from @xmath541 for any @xmath542 . because we are working not only with colours but with realizations of belief statistics",
    ", we are saying more than just @xmath543 .",
    "we require that there be zero knowledge gain about realizations of @xmath541 from a realization of @xmath6 .",
    "@xmath544{\\small $ y$ } \\psfrag{c}[c]{\\small $ y$ } \\psfrag{e}[c]{\\small $ y$ } \\psfrag{h}[c]{\\small $ y$ } \\psfrag{b}[c]{\\small $ x$ } \\psfrag{d}[c]{\\small $ { x}$ } \\psfrag{f}[c]{\\small $ x$ } \\psfrag{i}[l]{\\small $ { { ( x { \\triangleright}y ) { \\triangleleft\\,}y}}$ } \\includegraphics[width=0.38\\textwidth]{r_two.eps}\\ ] ]    our formalism features agents that act on multiple patients .",
    "these actions are independent by definition .",
    "conversely , as we saw in section  [ sec : hopf ] , different agents may cooperate , for example by coordinating their realizations to be the same or to be opposed to one another .",
    "we do not impose the following a - priori reasonable generalization of @xmath531 .",
    "@xmath545{void_r2}\\ ] ]    one reason that we do not impose can be seen by considering the example in which the two agents in the machine on the left - hand side adopt the strategy of always offering the same realization .",
    "if the realization of the patient and of the agent coincide , we can compute the realizations of both other patients . if not then we can not .",
    "thus we can compute the colours of the remaining patients in for some realizations but not for others .",
    "this behaviour is not shared by the machine on the right hand side , in which colours the realizations of patients can never be computed unless they are already given .",
    "if the choice of realization is independent for both patients , _",
    "i.e. _ if there is only a single interaction , as in the case of ` honest ' @xmath531 , there is no such phenomenon , and no choice of realizations for input registers is distinguished from any other .",
    "note also that represents two distinct computations , each of which can be considered separately and each of which is non - trivial , which is not true for the right - hand side of the ` honest ' @xmath531 .",
    "for the same reason , we do not impose the following ` fake @xmath532 move ' :    @xmath546{void_r3}\\ ] ]      the theory of @xmath0 features the notion of a zero - knowledge proof @xcite .",
    "in a zero - knowledge proof , the information that may be gained by the verifier in the course of her interactions with the prover are restricted .",
    "this is useful when the verifier may not always be trustworthy .",
    "the definition makes use of a simulator which is an arbitrary feasible algorithm that is able to reproduce the transcript of such an interaction without ever interacting with the prover .",
    "we suggest the following definition as a @xmath43 analogue to the notion of zero knowledge .",
    "[ d : zeroknowledge ] a tangle machine @xmath70 that decides a language @xmath547 is said to be _",
    "zero knowledge _ if the following is satisfied .    1 .",
    "there are no intermediate interactions in @xmath70 that decides @xmath77 .",
    "there exists an equivalent machine @xmath528 which decides @xmath77 at one of its intermediate interactions .",
    "the idea of zero knowledge tangled @xmath0 parallels the authors model of fault - tolerant information fusion networks , except that there we wanted intermediate registers to ` know as much as possible ' whereas here we want them to ` know as little as possible ' @xcite .",
    "as a generic example , consider machines @xmath528 and @xmath70 in figure  [ fig : zero ] .",
    "both share the same initial and terminal belief statistics .",
    "the explicit structure of the machines is mostly irrelevant except that they both contain a submachine @xmath548 which we graphically represent by a blank disk , with the property that @xmath70 , @xmath528 , and some of @xmath548 s terminal statistics @xmath549 decide @xmath77 . in @xmath70 , the verifier @xmath346 is an agent to all initial states of @xmath548 and the resulting beliefs from this interaction are @xmath550 , @xmath551 . in @xmath528",
    "the same verifier is an agent to the terminal states of @xmath548 and the resulting beliefs from this interaction are characterized by @xmath549 .    that @xmath70 is zero - knowledge implies the proof should not appear somewhere within it",
    "assuming none of the @xmath552 decide @xmath77 , and neither do any intermediate belief states of @xmath548 , this requirement implies that none of the @xmath553 decide @xmath77 . on the other hand ,",
    "the machine @xmath528 shows us that an interaction between the terminal states of @xmath548 , some of which decide @xmath77 , with the agent @xmath346 are able to produce the proof .",
    "that is , some of @xmath554 decide @xmath77 .",
    "these requirements completely characterize the belief distribution @xmath555 .",
    "perhaps unsurprisingly , it turns out that @xmath556 .",
    "ideally we would require that @xmath548 reproduces the proof as if it was produced by @xmath70 itself .",
    "this requirement translates into @xmath557 for any @xmath558 that decides @xmath77 .",
    "as both sides of depend on the deformation parameter @xmath46 , this equation may be used to determine @xmath46 such that @xmath70 is zero - knowledge .",
    "below we give an example .",
    "[ c]@xmath70 [ c]@xmath528 [ c]@xmath559 [ c]@xmath558 [ c]@xmath548 [ c]@xmath560 [ c]@xmath561 [ c]@xmath562   is zero - knowledge .",
    "the proper submachine @xmath548 determines @xmath77.,title=\"fig:\",scaledwidth=80.0% ]      consider the two machines in figure  [ fig : zkm ] .",
    "assume they both employ a deformed ip system whose completeness and soundness are @xmath46 and @xmath563 .",
    "let @xmath564 and let us first see what the value of @xmath46 is for the machine to decide @xmath77 .",
    "the output @xmath368 of either machines is given by @xmath565 { \\left|\\mathrm{false}\\right ) } + \\left[{\\delta}(1-{\\delta})+\\frac{1}{2}{\\delta}\\right ] { \\left|\\mathrm{true}\\right ) } , & x \\in l ; \\\\[0.5ex ] \\left[(1-\\frac{1}{2}{\\delta})^2+\\frac{1}{4}{\\delta}\\right ] { \\left|\\mathrm{false}\\right ) } + \\left[\\frac{1}{2}{\\delta}(1-\\frac{1}{2}{\\delta})+\\frac{1}{4}{\\delta}\\right ] { \\left|\\mathrm{true}\\right ) } , & x \\notin l. \\end{array } \\right.\\ ] ] from which we conclude that @xmath566 .",
    "the machine on the right in this figure is zero - knowledge because @xmath567 does not decide @xmath77 : @xmath568 { \\left|\\mathrm{false}\\right ) } + \\frac{1}{2}{\\delta}{\\left|\\mathrm{true}\\right ) } , & x \\in l ; \\\\[0.5ex ] \\left[1-\\frac{1}{4}{\\delta}\\right ] { \\left|\\mathrm{false}\\right ) } + \\frac{1}{4}{\\delta}{\\left|\\mathrm{true}\\right ) } , & x \\notin l. \\end{array } \\right.\\ ] ] and on the other hand the submachine inside the small disk on the left decides @xmath77 : @xmath569 { \\left|\\mathrm{false}\\right ) } + { \\delta}{\\left|\\mathrm{true}\\right ) } , & x \\in l ; \\\\[0.5ex ] \\left[1-\\frac{1}{2}{\\delta}\\right ] { \\left|\\mathrm{false}\\right ) } + \\frac{1}{2}{\\delta}{\\left|\\mathrm{true}\\right ) } , & x \\notin l. \\end{array } \\right.\\ ] ]    [ c]@xmath561 [ c]@xmath348 [ c]@xmath570 [ c]@xmath571 [ c]@xmath351 [ c]@xmath352 [ c]@xmath353 [ c]_time _     if we further restrict the value of @xmath46 so as to satisfy , namely , @xmath572 we obtain @xmath573 which obviously contradicts the basic requirement of deciding @xmath77 .",
    "if we slightly relax this condition to allow a small discrepancy between the underlying distributions then we may take @xmath574 where @xmath575 is a statistical distance which potentially depends on @xmath6 .",
    "machines coloured by quagmas as machines with wyes also have a notion of equivalence , giving them a certain flexibility as a diagrammatic language .",
    "two trivalent machines are _ equivalent _ if they are related by a finite sequence of moves in figure  [ f : local_moves_machines ] , [ f : local_moves_machines1 ] , and [ f : wyer ] .",
    "[ c]_vyr1_[c]_yr3_[c]_vyr3 _   local moves for wyes .",
    "note that @xmath576 may reverse the label on the wye ( @xmath112 to @xmath113 or vice versa ) , depending on what the colours are.,title=\"fig:\",scaledwidth=50.0% ]",
    "in this paper we have suggested a turing - complete diagrammatic model of computation , in which computers are drawn as tangles of decorated coloured strings . with bounded resources",
    ", our ` tangle machines ' can decide any language in complexity @xmath0 , sometimes more efficiently than known classical single  verifier models .",
    "our machines admit a notion of equivalence that they inherit from low - dimensional topology , with equivalent machines representing bisimilar computations .",
    "topological invariants of our machines would be characteristic quantities for these computations which are invariant over bisimilarity classes .",
    "alagic , g. , jeffery , s. , & jordan , s. circuit obfuscation using braids . in _",
    "9th conference on the theory of quantum computation , communication and cryptography ( tqc 2014 ) _ ( eds .",
    "flammia & a.w .",
    "harrow ) , vol .",
    "141160 .",
    "ben - or , m. , goldwasser , s. , kilian , j. , & wigderson , a. 1988 multi prover interactive proofs : how to remove intractability assumptions . in _ proceedings of the 20th acm symposium on theory of computing _ , 113121 .",
    "buliga , m. 2011 braided spaces with dilations and sub - riemannian symmetric spaces . in _ geometry .",
    "exploratory workshop on differential geometry and its applications _ , ( d. andrica & s. moroianu ed . ) , cluj - napoca 2135 .",
    "buliga , m. , & kauffman , l. 2013 glc actors , artificial chemical connectomes , topological issues and knots . in _",
    "alife 14 : proceedings of the fourteenth international conference on the synthesis and simulation of living systems _ , 490497 .",
    "carmi , a.y . & moskovich , d. 2014 low dimensional topology of information fusion . in _",
    "bict14 : proceedings of the 8th international conference on bio - inspired information and communications technologies _ , acm / eai , 251258 .",
    "carmi , a.y . & moskovich , d. 2015 tangle machines .",
    "a _ * 2015 * , _ 471 _ , 20150111 .",
    "kauffman , l.h .",
    "1999 virtual knot theory .",
    "j. combinatorics _ * 20*(7 ) , 663690 .",
    "kauffman , l.h .",
    "& lomonaco jr , s.j .",
    "2004 braiding operators are universal quantum gates .",
    "_ new j. phys .",
    "_ , * 6*(1 ) , 134 .",
    "turing , a.m. 1937 _ on computable numbers , with an application to the entscheidungsproblem . _ p. lond .",
    "ser . 2 * 42 * , 230265 . ( and turing , a.m. 1938 _ on computable numbers , with an application to the entscheidungsproblem :  a correction_. p. lond .",
    "ser . 2 * 43 * , 544546 .",
    "zwick , u. 1998 approximation algorithms for constraint satisfaction problems involving at most three variables per constraint . in",
    "_ proceedings of the 9th acm - siam symposium on discrete algorithms _ , 201210 ."
  ],
  "abstract_text": [
    "<S> we suggest a diagrammatic model of computation based on an axiom of distributivity . </S>",
    "<S> a diagram of a decorated coloured tangle , similar to those that appear in low dimensional topology , plays the role of a circuit diagram . </S>",
    "<S> equivalent diagrams represent bisimilar computations . </S>",
    "<S> we prove that our model of computation is turing complete , and with bounded resources that it can decide any language in complexity class @xmath0 , sometimes with better performance parameters than corresponding classical protocols . </S>"
  ]
}