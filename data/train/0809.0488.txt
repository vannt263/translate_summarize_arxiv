{
  "article_text": [
    "determining the number of words of length @xmath0 on a given alphabet that avoid a certain ( contiguous ) subword is a classical combinatorial problem that can be solved , for example , by the principle of inclusion  exclusion .",
    "an approach to this question using generating functions is provided by the goulden  jackson cluster method @xcite , which utilizes only the self - overlaps ( or `` autocorrelations '' ) of the word being considered .",
    "a natural question is `` when do two words have the same avoiding generating function ? '' that is , when are the @xmath0-letter words avoiding ( respectively ) @xmath2 and @xmath3 equinumerous for all @xmath0 ?",
    "the answer is simple : precisely when their self - overlaps coincide .",
    "for example , the equivalence classes of length-@xmath4 words on the alphabet @xmath5 are as follows .",
    "@xmath6    in this paper we consider the analogous questions for plane trees .",
    "all trees in the paper are rooted and ordered .",
    "our focus will be on _ binary trees _  trees in which each vertex has @xmath7 or @xmath8 ( ordered ) children .",
    "a vertex with @xmath7 children is a _ leaf _ , and a vertex with @xmath8 children is an _",
    "internal _ vertex . a binary tree with @xmath0 leaves has @xmath9 internal vertices , and the number of such trees is the catalan number @xmath10 .",
    "the first few binary trees are depicted in figure  [ binarytrees ] .",
    "we use an indexing for @xmath0-leaf binary trees that arises from the natural recursive construction of all @xmath0-leaf binary trees by pairing each @xmath11-leaf binary tree with each @xmath12-leaf binary tree , for all @xmath13 . in practice",
    "it will be clear from context which tree we mean by , for example , ` @xmath14 ' .",
    "leaves . ]    conceptually , a binary tree @xmath15 _ avoids _ a tree pattern @xmath1 if there is no instance of @xmath1 anywhere inside @xmath15 .",
    "steyaert and flajolet @xcite were interested in such patterns in vertex - labeled trees .",
    "they were mainly concerned with the asymptotic probability of avoiding a pattern , whereas our focus is on enumeration .",
    "however , they establish in section  2.2 that the total number of occurrences of an @xmath16-leaf binary tree pattern @xmath1 in all @xmath0-leaf binary trees is @xmath17 in this sense , all @xmath16-leaf binary trees are indistinguishable ; the results of this paper refine this statement by further distinguishing @xmath16-leaf tree patterns by the number of @xmath0-leaf trees containing precisely @xmath11 copies of each .",
    "we remark that a different notion of tree pattern was later considered by flajolet , sipala , and steyaert @xcite , in which every leaf of the pattern must be matched by a leaf of the tree .",
    "such patterns are only matched at the bottom of a tree , so they arise naturally in the problem of compactly representing in memory an expression containing repeated subexpressions .",
    "the enumeration of trees avoiding such a pattern is simple , since no two instances of the pattern can overlap : the number of @xmath0-leaf binary trees avoiding @xmath1 depends only on the number of leaves in @xmath1 .",
    "see also flajolet and sedgewick ( * ? ? ?",
    "* note iii.40 ) .",
    "the reason for studying patterns in binary trees as opposed to rooted , ordered trees in general is that it is straightforward to determine what it should mean for a binary tree to avoid , for example , @xmath18 whereas _ a priori _ it is ambiguous to say that a general tree avoids @xmath19 namely , for general trees , ` matches a vertex with @xmath20 children ' for @xmath21 could mean either ` has exactly @xmath20 children ' or ` has at least @xmath20 children ' . for binary trees , these are the same for @xmath22 ,",
    "so there is no choice to be made .",
    "however , it turns out that the notion of pattern avoidance for binary trees induces a well - defined notion of pattern avoidance for general trees .",
    "this arises via the natural bijection @xmath23 between the set of @xmath0-leaf binary trees and the set of @xmath0-vertex trees ; using this bijection , one simply translates the problem into the setting of binary trees .    one main theoretical purpose of this paper is to provide an algorithm for computing the generating function that counts binary trees avoiding a certain tree pattern .",
    "this algorithm easily generalizes to count trees containing a prescribed number of occurrences of a certain pattern , and additionally we consider the number of trees containing several patterns each a prescribed number of times .",
    "all of these generating functions are algebraic .",
    "section  [ algorithms ] is devoted to these algorithms , which are implemented in treepatterns @xcite , a _",
    "package available from the author s website .",
    "by contrast , another main purpose of this paper is quite concrete , and that is to determine equivalence classes of binary trees .",
    "we say that two tree patterns @xmath24 and @xmath1 are _ equivalent _ if for all @xmath25 the number of @xmath0-leaf binary trees avoiding @xmath24 is equal to the number of @xmath0-leaf binary trees avoiding @xmath1 . in other words ,",
    "equivalent trees have the same generating function with respect to avoidance .",
    "this is the analogue of wilf equivalence in permutation patterns .",
    "each tree is trivially equivalent to its left ",
    "right reflection , but there are other equivalences as well .",
    "the first few classes are presented in section  [ inventory ] .",
    "the appendix contains a complete list of equivalence classes of binary trees with at most @xmath26 leaves , from which we draw examples throughout the paper .",
    "classes are named with the convention that class  @xmath27 is the @xmath20th class of @xmath16-leaf binary trees .",
    "we seek to understand equivalence classes of binary trees combinatorially , and this is the third purpose of the paper . by analogy with words , one might hope for a simple criterion such as `` @xmath24 and @xmath1 are equivalent precisely when the lengths of their self - overlaps coincide '' ; however , although the set of self - overlap lengths seems to be preserved under equivalence , this statement is not true , for @xmath28 corresponds to both classes  6.3 and 6.7 . in lieu of a simple criterion , we look for bijections . as discussed in section  [ dyckwords ] , in a few cases",
    "there is a bijection between @xmath0-leaf binary trees avoiding a certain pattern and dyck @xmath29-words avoiding a certain ( contiguous ) subword . in general ,",
    "when @xmath24 and @xmath1 are equivalent tree patterns , we would like to provide a bijection between trees avoiding @xmath24 and trees avoiding @xmath1 .",
    "conjecturally , all classes of binary trees can be established bijectively by _ top - down _ and _ bottom - up _ replacements ; this is the topic of section  [ replacementbijections ] .",
    "nearly all bijections in the paper are implemented in the package treepatterns .    aside from mathematical interest ,",
    "a general study of pattern avoidance in trees has applications to any collection of objects related by a tree structure , such as people in a family tree or species in a phylogenetic tree .",
    "in particular , this paper answers the following question .",
    "given @xmath0 related objects ( e.g. , species ) for which the exact relationships are nt known ,",
    "how likely is it that some prescribed ( e.g. , evolutionary ) relationship exists between some subset of them ?",
    "( unfortunately , it probably will not lead to insight regarding the practical question `` what is the probability of avoiding a mother - in - law ? '' ) alternatively , we can think of trees as describing the syntax of sentences in natural language or of fragments of computer code ; in this context the paper answers questions about the occurrence and frequency of given phrase substructures .",
    "the more formal way to think of an @xmath0-vertex tree is as a particular arrangement of @xmath0 pairs of parentheses , where each vertex is represented by the pair of parentheses containing its children .",
    "for example , the tree @xmath30 is represented by @xmath31 .",
    "this is the word representation of this tree in the alphabet @xmath32 .",
    "we do not formally distinguish between the graphical representation of a tree and the word representation , and it is the latter that is useful in manipulating trees algorithmically .",
    "( _ mathematica _ s pattern matching capabilities provide a convenient tool for working with trees represented as nested lists , so this is the convention used by treepatterns . )    informally , our concept of containment is as follows .",
    "a binary tree @xmath15 _ contains _",
    "@xmath1 if there is a ( contiguous , rooted , ordered ) subtree of @xmath15 that is a copy of @xmath1 . for example , consider @xmath33 none of the trees @xmath34 contains a copy of @xmath1 , while each of the trees @xmath35 contains precisely one copy of @xmath1 , each of the trees @xmath36 contains precisely two ( possibly overlapping ) copies of @xmath1 , and the tree @xmath37 contains precisely three copies of @xmath1 .",
    "this is a classification of binary trees with at most @xmath38 leaves according to the number of copies of @xmath1 .",
    "we might formalize this concept with a graph theoretic definition as follows .",
    "let @xmath1 be a binary tree .",
    "a _ copy _ of @xmath1 in @xmath15 is a subgraph of @xmath15 ( obtained by removing vertices ) that is isomorphic to @xmath1 ( preserving edge directions and the order of children ) .",
    "naturally , @xmath15 _ avoids _",
    "@xmath1 if the number of copies of @xmath1 in @xmath15 is @xmath7 .    an equivalent but much more useful definition is a language theoretic one , and to provide this we first distinguish a _ tree pattern _ from a tree .    by ` tree pattern ' , informally we mean a tree whose leaves are `` blanks '' that can be filled ( matched ) by any tree , not just a single vertex .",
    "more precisely , let @xmath39 , and let @xmath40 be the language on @xmath41 containing ( the word representation of ) every binary tree .",
    "consider a binary tree @xmath42 , and let @xmath1 be the word on the three symbols @xmath43 obtained by replacing each leaf @xmath44 in @xmath42 by @xmath40 .",
    "we call @xmath1 the _ tree pattern _ of @xmath42 .",
    "this tree pattern naturally generates a language @xmath45 on @xmath41 , which we obtain by interpreting the word @xmath1 as a product of the three languages @xmath46 .",
    "informally , @xmath45 is the set of words that match @xmath1 .",
    "we think of @xmath1 and @xmath45 interchangeably .",
    "( note that a tree is a tree pattern matched only by itself . )    for example , let @xmath47 then the corresponding tree pattern is @xmath48 , and the language @xmath45 consists of all trees of the form @xmath49 , where @xmath50 are binary trees .",
    "let @xmath51 denote the set of all finite words on @xmath41 .",
    "the language @xmath52 is the set of all binary trees whose word has a subword in @xmath45 .",
    "therefore we say that a binary tree @xmath15 _ contains _ the tree pattern @xmath1 if @xmath15 is in the language @xmath52 .",
    "we can think of this language as a multiset , where a given tree @xmath15 occurs with multiplicity equal to the number of ways that it matches @xmath53 .",
    "then the _ number of copies _ of @xmath1 in @xmath15 is the multiplicity of @xmath15 in @xmath52",
    ".    continuing the example from above , the tree @xmath54 contains @xmath8 copies of @xmath1 since it matches @xmath53 in @xmath8 ways : @xmath49 with @xmath55 and @xmath56 , and @xmath57 with @xmath58 and @xmath59 .",
    "our notation distinguishes tree patterns from trees : tree patterns are represented by lowercase variables , and trees are represented by uppercase variables . to be absolutely precise",
    ", we would graphically distinguish between terminal leaves @xmath44 of a tree and blank leaves @xmath40 of a tree pattern , but this gets in the way of speaking about them as the same objects , which is rather convenient .    in sections  [ algorithms ] and [ replacementbijections ] we will be interested in taking the intersection @xmath60 of tree patterns @xmath61 and @xmath62 ( by which we mean the intersection of the corresponding languages @xmath63 and @xmath64 )",
    ". the intersection of two or more explicit tree patterns can be computed recursively : @xmath65 , and @xmath66 .",
    "our primary goal is to determine the number @xmath67 of binary trees with @xmath0 vertices that avoid a given binary tree pattern @xmath1 , and more generally to determine the number @xmath68 of binary trees with @xmath0 vertices and precisely @xmath11 copies of @xmath1 .",
    "thus we consider two generating functions associated with @xmath1 : the _ avoiding generating function _ @xmath69 and the _ enumerating generating function _",
    "@xmath70 the avoiding generating function is the special case @xmath71 .",
    "[ enumerating ] @xmath72 is algebraic .",
    "the proof is constructive , so it enables us to compute @xmath73 , and in particular @xmath74 , for explicit tree patterns .",
    "we postpone the proof until section  [ algorithm - enumeratingsingle ] to address a natural question that arises : which trees have the same generating function ?",
    "that is , for which pairs of binary tree patterns @xmath24 and @xmath1 are the @xmath0-leaf trees avoiding ( or containing @xmath11 copies of ) these patterns equinumerous ?",
    "we say that @xmath24 and @xmath1 are _ avoiding - equivalent _ if @xmath75 .",
    "we say they are _ enumerating - equivalent _ if the seemingly stronger condition @xmath76 holds .",
    "we can compute these equivalence classes explicitly by computing @xmath74 and @xmath72 for , say , all @xmath16-leaf binary tree patterns @xmath1 . in doing this for binary trees with up to",
    "@xmath77 leaves , one comes to suspect that these conditions are in fact the same .    if @xmath24 and @xmath1 are avoiding - equivalent , then they are also enumerating - equivalent .    in light of this experimental result ,",
    "we focus attention in the remainder of the paper on classes of avoiding - equivalence , since conjecturally they are the same as classes of enumerating - equivalence .",
    "in this section we undertake an analysis of small patterns . we determine @xmath74 for binary tree patterns with at most @xmath4 leaves using methods specific to each .",
    "this allows us to establish the equivalence classes in this range .",
    "there is only one binary tree pattern with a single leaf , namely @xmath79 every binary tree contains at least one vertex , so @xmath80 .",
    "the number of binary trees with @xmath81 vertices is @xmath10 , so @xmath82      there is also only one binary tree pattern with precisely @xmath8 leaves : @xmath83 however , @xmath1 is a fairly fundamental structure in binary trees ; the only tree avoiding it is the @xmath78-vertex tree @xmath44 .",
    "thus @xmath84 , and @xmath85      there are @xmath87 binary trees with @xmath86 leaves , and they are equivalent by left ",
    "right reflection : @xmath88 there is only one binary tree with @xmath0 leaves avoiding @xmath89 namely the `` right comb '' @xmath90 .",
    "therefore for these trees @xmath91      among @xmath4-leaf binary trees we find more interesting behavior . there are @xmath92 such trees , pictured as follows .",
    "@xmath93 they comprise @xmath8 equivalence classes .",
    "the first equivalence class consists of the trees @xmath94 the avoiding generating function @xmath74 for each of these trees satisfies @xmath95 because the number of @xmath0-leaf binary trees avoiding @xmath14 is the motzkin number @xmath96 : @xmath97    this fact is presented by donaghey and shapiro @xcite as their final example of objects counted by the motzkin numbers .",
    "they provide a bijective proof which we reformulate here .",
    "specifically , there is a natural bijection between the set of @xmath0-leaf binary trees avoiding @xmath14 and the set of motzkin paths of length @xmath9  paths from @xmath98 to @xmath99 composed of steps @xmath100 , @xmath101 , @xmath102 that do not go below the @xmath103-axis .",
    "we represent a motzkin path as a word on @xmath104 encoding the sequence of steps under @xmath105 .",
    "let @xmath23 be the usual bijection from @xmath0-leaf binary trees to @xmath0-vertex general trees that operates by contracting every rightward edge . to obtain the motzkin path associated with a binary tree @xmath15 avoiding @xmath14 :    1 .",
    "let @xmath106 .",
    "no vertex in @xmath107 has more than @xmath8 children , since @xmath108 and @xmath15 avoids @xmath14 .",
    "2 .   create a word @xmath109 on @xmath104 by traversing @xmath107 in depth - first order ( i.e. , for each subtree visit first the root vertex and then its children trees in order ) ; for each vertex , record @xmath78 less than the number of children of that vertex .",
    "3 .   delete the last letter of @xmath109 ( which is @xmath110 ) .",
    "the resulting word contains the same number of @xmath110s and @xmath78s , and every prefix contains at least as many @xmath78s as @xmath110s , so it is a motzkin path .",
    "the steps are easily reversed to provide the inverse map from motzkin paths to binary trees avoiding @xmath14 .",
    "( for the larger context of this bijection , see stanley s presentation leading up to theorem 5.3.10 @xcite . )",
    "the second equivalence class consists of the three trees @xmath111 and provides the smallest example of nontrivial equivalence .",
    "symmetry gives @xmath112 . to establish @xmath113 ,",
    "for each of these trees @xmath1 we give a bijection between @xmath0-leaf binary trees avoiding @xmath1 and binary words of length @xmath114 . by composing these two maps",
    "we obtain a bijection between trees avoiding @xmath115 and trees avoiding @xmath116 .",
    "first consider @xmath117 if @xmath15 avoids @xmath116 , then no vertex of @xmath15 has four grandchildren ; that is , at most one of a vertex s children has children of its own .",
    "this implies that at each generation at most one vertex has children .",
    "since there are two vertices at each generation after the first , the number of such @xmath0-leaf trees is @xmath118 for @xmath119 : @xmath120 form a word @xmath121 corresponding to @xmath15 by letting the @xmath20th letter be @xmath7 or @xmath78 depending on which vertex ( left or right ) on level @xmath122 has children .",
    "now consider @xmath123 a `` typical '' binary tree avoiding @xmath115 looks like @xmath124 and is determined by the length of its spine and the length of each arm .",
    "starting from the root , traverse the internal vertices of a tree @xmath15 avoiding @xmath115 according to the following rule . always move to the right child of a vertex when the right child is an internal vertex , and if the right child is a leaf then move to the highest unvisited internal spine vertex . by recording @xmath7 and @xmath78 for left and right movements in this traversal , a word @xmath109 on @xmath125",
    "is produced that encodes @xmath15 uniquely .",
    "we have @xmath126 since we obtain one symbol from each internal vertex except the root .",
    "since every word @xmath109 corresponds to an @xmath0-leaf binary tree avoiding @xmath115 , there are @xmath118 such trees",
    ".    more formally , let @xmath127 be a map from binary trees to binary words defined by @xmath128 , where @xmath129 then the word corresponding to @xmath15 is @xmath130 .    for the inverse map @xmath131 , begin with the word @xmath132 . then read @xmath109 left to right .",
    "when the symbol @xmath78 is read , replace the existing @xmath133 by @xmath134 ; when @xmath7 is read , replace the existing @xmath133 by @xmath44 and the existing @xmath135 by @xmath132 .",
    "after the entire word is read , replace the remaining @xmath135 and @xmath133 with @xmath44 .",
    "one verifies that @xmath15 has @xmath0 leaves .",
    "the tree @xmath15 avoids @xmath115 because the left child of an @xmath133 vertex never has children of its own .",
    "we mention that in some cases the set of trees avoiding a pattern is in bijection to the set of dyck words avoiding a certain subword .",
    "for example , trees avoiding a pattern in class  4.1 are in bijection to dyck words avoiding the subword @xmath136 .",
    "recall @xmath23 from section  [ 4leafclasses ] .",
    "for @xmath137 we have @xmath138 whose corresponding dyck word is @xmath139 , and @xmath23 has the feature that @xmath15 contains @xmath137 if and only if the dyck word corresponding to @xmath140 contains @xmath136 .    in general",
    "there is a bijection between @xmath0-leaf binary trees avoiding @xmath1 and @xmath29-dyck words avoiding @xmath109 whenever @xmath109 is a characteristic feature of @xmath141 , that is , some feature of the tree that is preserved locally by @xmath23 .",
    "for example , for @xmath115 in class  4.2 we observe that @xmath142 and containing @xmath143 as a subword is necessary and sufficient for the corresponding tree to contain @xmath115 .",
    "thus binary trees avoiding a pattern in class  4.2 are in bijection to dyck words avoiding @xmath143 . other bijections can be found similarly : classes  5.2 , 5.3 , 6.3 , and 6.6 correspond to the words @xmath144 , @xmath145 , @xmath146 , and @xmath147 .",
    "notes on sequences counting dyck words avoiding a subword have been contributed by david callan and emeric deutsch to the encyclopedia of integer sequences @xcite .",
    "the subject appears to have begun with deutsch ( * ? ? ?",
    "* section  6.17 ) , who enumerated dyck words according to the number of occurrences of @xmath143 .",
    "sapounakis , tasoulas , and tsikouras @xcite have considered additional subwords . via",
    "the bijections just described , their results provide additional derivations of the generating functions @xmath74 .",
    "in this section we provide algorithms for computing algebraic equations satisfied by @xmath74 , @xmath72 , and the more general @xmath148 defined in section  [ algorithm - multiple ] .",
    "computing @xmath74 or @xmath72 for all @xmath16-leaf binary tree patters @xmath1 allows one to automatically determine the equivalence classes given in the appendix .",
    "we draw upon the notation introduced in section  [ definition ] .",
    "in particular , the intersection @xmath149 of two tree patterns plays a central role . recall that @xmath63 is the set of trees matching @xmath61 at the top level .",
    "the _ depth _ of a vertex in a tree is the length of the minimal path to that vertex from the root , and @xmath150 is the maximum vertex depth in the tree @xmath15 .      fix a binary tree pattern @xmath1 we wish to avoid . for a given tree pattern @xmath61 , we will make use of the generating function @xmath151 where @xmath152    the case @xmath153 was covered in section  [ 1leafclasses ] , so we assume @xmath154 .",
    "then @xmath155 for some tree patterns @xmath156 and @xmath157 .",
    "since @xmath158 matches @xmath1 precisely when @xmath159 matches @xmath156 and @xmath160 matches @xmath157 , we have @xmath161 the coefficient @xmath103 is the weight of the root vertex of @xmath162 that we destroy in separating this pattern into its two subpatterns .",
    "we now construct a polynomial ( with coefficients that are polynomials in @xmath103 ) that is satisfied by @xmath163 , the weight of the language of binary trees .",
    "the algorithm is as follows .",
    "begin with the equation @xmath164 the variable @xmath165 is `` new '' ; we havent yet written it in terms of other variables .",
    "so use equation  ( [ logicrule ] ) to rewrite @xmath165 . for each expression",
    "@xmath166 that is introduced , we compute the intersection @xmath149 .",
    "this allows us to write @xmath166 as @xmath167 for some pattern @xmath62 that is simply a word on @xmath168 ( i.e. , does not contain the @xmath169 operator ) .    for each new variable @xmath167",
    ", we obtain a new equation by making it the left side of equation  ( [ logicrule ] ) , and then as before we eliminate @xmath169 by explicitly computing intersections .",
    "we continue in this manner until there are no new variables produced .",
    "this must happen because @xmath170 , so since there are only finitely many trees that are shallower than @xmath1 , there are only finitely many variables in this system of polynomial equations .    finally , we compute a grbner basis for the system in which all variables except @xmath171 and @xmath172 are eliminated .",
    "this gives a single polynomial equation in these variables , establishing that @xmath74 is algebraic .",
    "let us work out an example .",
    "we use the graphical representation of tree patterns with the understanding that the leaves are blanks . consider the tree pattern @xmath173 from class  5.2 .",
    "the first equation is @xmath174 we have @xmath175 and @xmath176 , so equation  ( [ logicrule ] ) gives @xmath177 since @xmath178 for any tree pattern @xmath61 .",
    "the variable @xmath179 is new , so we put it into equation  ( [ logicrule ] ) : @xmath180 there are two new variables : @xmath181 we have no new variables , so we eliminate the four auxiliary variables @xmath182 from this system of five equations to obtain @xmath183      to prove theorem  [ enumerating ] , we make a few modifications in order to compute @xmath72 instead of @xmath74 .",
    "again @xmath184 but now @xmath185 for all @xmath15 .",
    "we modify equation  ( [ logicrule ] ) to become @xmath186 since in addition to accounting for the trees that avoid @xmath1 we also account for those that match @xmath1 , in which case @xmath187 is contributed .",
    "the rest of the algorithm carries over unchanged , and we obtain a polynomial equation in @xmath103 , @xmath187 , and @xmath188 .      a more general question is the following . given several binary tree patterns @xmath189 ,",
    "what is the number @xmath190 of binary trees containing precisely @xmath191 vertices , @xmath192 copies of @xmath193 , ",
    ", @xmath194 copies of @xmath195 ?",
    "we consider the enumerating generating function @xmath196 where @xmath197 and @xmath198 is the number of copies of @xmath199 in @xmath15 .",
    "( we need not assume that the @xmath199 are distinct . )",
    "this generating function can be used to obtain information about how correlated a family of tree patterns is .",
    "we have the following generalization of theorem  [ enumerating ] .    [ enumerating - multiple ]",
    "@xmath148 is algebraic .    keeping track of multiple tree patterns",
    "@xmath189 is not much more complicated than handling a single pattern , and the algorithm for doing so has the same outline .",
    "let @xmath200 with @xmath201 where again @xmath198 is the number of copies of @xmath199 in @xmath15 .",
    "let @xmath202 .",
    "first we describe what to do with each new variable @xmath167 that arises .",
    "the approach used is different than that for one tree pattern ; in particular , we do not make use of intersections .",
    "consequently , it is less efficient .",
    "let @xmath135 be the number of leaves in @xmath62 .",
    "if @xmath15 is a tree matching @xmath62 , then for each leaf @xmath40 of @xmath62 there are two possibilities : either @xmath40 is matched by a terminal vertex @xmath44 in @xmath15 , or @xmath40 is matched by a tree matching @xmath203 .",
    "for each leaf we make this choice independently , thus partitioning the language @xmath64 into @xmath204 disjoint sets represented by @xmath204 tree patterns that are disjoint in the sense that each tree matching @xmath62 matches precisely one of these patterns . for example",
    ", partitioning the pattern @xmath203 into @xmath205 patterns gives @xmath206    we need an analogue of equation  ( [ enlogicrule ] ) for splitting a pattern @xmath162 into the two subpatterns @xmath207 and @xmath208 .",
    "for this , examine each of the @xmath204 patterns that arose in partitioning @xmath62 .",
    "for each pattern @xmath209 whose language is infinite ( that is , the word @xmath61 contains the symbol @xmath40 ) and has @xmath210 , rewrite @xmath211 where ` @xmath61 matches @xmath199 ' means that every tree in @xmath63 matches @xmath199 ( so @xmath212 ) . if @xmath63 is infinite but @xmath213 , keep @xmath214 intact as a variable .    finally , for all tree patterns @xmath61 whose language is finite ( i.e. , @xmath61 is a tree ) , rewrite @xmath215    the algorithm is as follows . as before , begin with the equation @xmath164 at each step , take each new variable @xmath167 and obtain another equation by performing the procedure described : write it as the sum of @xmath204 other variables , split the designated patterns into subpatterns , and explicitly compute the weights of any trees appearing .",
    "continue in this manner until there are no new variables produced ; this must happen because we break up @xmath214 whenever @xmath210 , so there are only finitely many possible variables .",
    "eliminate from this system of polynomial equations all but the @xmath216 variables @xmath217 , @xmath218 , ",
    ", @xmath219 , and @xmath220 to obtain a polynomial equation satisfied by @xmath148 .",
    "in this section we address the question of providing systematic bijective proofs of avoiding - equivalence . given two equivalent binary tree patterns @xmath24 and @xmath1 , we would like to produce an explicit bijection between binary trees avoiding @xmath24 and binary trees avoiding @xmath1 .",
    "it turns out that this can often be achieved by structural replacements on trees .",
    "we start by describing an example in full , and later generalize .",
    "consider the trees @xmath221 in class  4.2 .",
    "the idea is that since @xmath0-leaf trees avoiding @xmath115 are in bijection to @xmath0-leaf trees avoiding @xmath116 , then somehow swapping all occurrences of these two tree patterns should produce a bijection .",
    "however , since the patterns may overlap , it is necessary to specify an order in which to perform the replacements .",
    "a natural order is to start with the root and work down the tree .",
    "more precisely , a _ top - down replacement _ is a restructuring of a tree @xmath15 in which we iteratively apply a set of transformation rules to subtrees of @xmath15 , working downward from the root .",
    "take the replacement rule to be @xmath222 where the variables represent trees attached at the leaves , rearranged according to the permutation @xmath223 .",
    "begin at the root : if @xmath15 itself matches the left side of the rule , then we restructure @xmath15 according to the rule ; if not , we leave @xmath15 unchanged .",
    "then we repeat the procedure on the root s ( new ) children , then on their children , and so on , so that each vertex in the tree is taken to be the root of a subtree which is possibly transformed by the rule .",
    "for example , @xmath224 shows the three replacements required to compute the image ( on the right ) of a tree avoiding @xmath115 .",
    "the resulting tree avoids @xmath116 .",
    "this top - down replacement is invertible .",
    "the inverse map is a _ bottom - up replacement _ with the inverse replacement rule , @xmath225 rather than starting at the root and working down the tree , we apply this map by starting at the leaves and working up the tree .",
    "we now show that the top - down replacement is in fact a bijection from trees avoiding @xmath115 to trees avoiding @xmath116 .",
    "it turns out to be the same bijection given in section  [ 4leafclasses ] via words in @xmath226 .",
    "assume @xmath15 avoids @xmath115 ; we show that the image of @xmath15 under the top - down replacement avoids @xmath116 .",
    "it is helpful to think of @xmath15 as broken up into ( possibly overlapping ) `` spheres of influence ''  subtrees which are maximal with respect to the replacement rule in the sense that performing the top - down replacement on the subtree does not introduce instances of the relevant tree patterns containing vertices outside of the subtree .",
    "it suffices to consider each sphere of influence separately .",
    "a natural focal point for each sphere of influence is the highest occurrence of @xmath116 .",
    "we verify that restructuring this @xmath116 to @xmath115 under the top - down replacement produces no @xmath116 above , at , or below the root of the new @xmath115 in the image of @xmath15 .    1 .",
    "since @xmath116 has depth @xmath8 , @xmath116 can occur at most one level above the root of the new @xmath115 while overlapping it .",
    "thus it suffices to consider all subtrees with @xmath116 occurring at level @xmath78 .",
    "there are two cases , @xmath227 the first case does not avoid @xmath115 , so it does not occur in @xmath15 .",
    "the second case may occur in @xmath15 .",
    "however , we do not want the subtree itself to match @xmath116 ( because we assume that the @xmath116 at level @xmath78 is the highest @xmath116 in this sphere of influence ) , so we must have @xmath228 .",
    "thus this subtree is transformed by the top - down replacement as @xmath229 the image does not match @xmath116 at the root , so @xmath116 does not appear above the root of the new @xmath115 .",
    "2 .   since @xmath15 avoids @xmath115 , every subtree in @xmath15 matching @xmath116 in fact matches the pattern @xmath230 .",
    "such a subtree is restructured as @xmath231 under the replacement rule , and the image does not match @xmath116 ( because @xmath232 is terminal ) .",
    "therefore the new @xmath115 can not itself match @xmath116 .",
    "a general subtree matching @xmath116 and avoiding @xmath115 is transformed as @xmath233 clearly @xmath116 can only occur in the image at or below the subtree @xmath234 .",
    "however , since @xmath234 is preserved by the replacement rule , any transformations on @xmath234 can be considered independently .",
    "that is , @xmath234 is the top of a different sphere of influence , so we need not consider it here .",
    "we conclude that @xmath116 does not occur below the root of the new @xmath115 .",
    "if we already knew that @xmath115 and @xmath116 are equivalent ( for example , by having computed @xmath74 as in section  [ algorithm - avoidingsingle ] ) , then we have now obtained a bijective proof of their equivalence .",
    "otherwise , it remains to show that if @xmath15 avoids @xmath116 , then performing the bottom - up replacement produces a tree that avoids @xmath115 ; this can be accomplished similarly .",
    "a natural question is whether for any two equivalent binary tree patterns @xmath24 and @xmath1 there exists a sequence of replacement bijections and left ",
    "right reflections that establishes their equivalence . for tree patterns of",
    "at most @xmath77 leaves the answer is `` yes '' , which perhaps suggests that these maps suffice in general .",
    "if @xmath24 and @xmath1 are equivalent , then there is a sequence of top - down replacements , bottom - up replacements , and left ",
    "right reflections that produces a bijection from binary trees avoiding @xmath24 to binary trees avoiding @xmath1 .    in this section",
    "we discuss qualitative results regarding this conjecture .    given two @xmath16-leaf tree patterns @xmath24 and @xmath1 , one can ask which permutations of the leaves give rise to a top - down replacement that induces a bijection from trees avoiding @xmath24 to trees avoiding @xmath1 .",
    "most permutations are not viable .",
    "candidate permutations can be found experimentally by simply testing all @xmath235 permutations of leaves on a set of randomly chosen binary trees avoiding @xmath24 ; one checks that the image avoids @xmath1 and that composing the top - down replacement with the inverse bottom - up replacement produces the original tree .",
    "this approach is feasible for small @xmath16 , but it is slow and does not provide any insight into why certain trees are equivalent .",
    "a question unresolved at present is to efficiently find all such bijections .",
    "we return briefly to the replacement rule of section  [ examplereplacementbijection ] to mention that a minor modification produces a bijection on the full set of binary trees .",
    "namely , take the two replacement rules @xmath236 again we perform a top - down replacement , now using both rules together .",
    "that is , if a subtree matches the left side of either rule , we restructure it according to that rule .",
    "of course , it can happen that a particular subtree matches both replacement rules , resulting in potential ambiguity ; in this case which do we apply ?",
    "well , if both rules result in the same transformation , then it does not matter , and indeed with our present example this is the case . to show this , it suffices to take the intersection @xmath237 of the two left sides and label the leaves to represent additional branches that may be present : @xmath238 now we check that applying each of the two replacement rules to this tree produces the same labeled tree , namely @xmath239 therefore we need not concern ourselves with which rule is applied to a given subtree that matches both . since the replacement rules agree on their intersection , the top - down replacement is again invertible and is therefore a bijection from the set of binary trees to itself . by the examination of cases in section  [ examplereplacementbijection ] , this bijection is an extension of the bijection between binary trees avoiding @xmath115 and binary trees avoiding @xmath116 .",
    "thus we may choose from two types of bijection when searching for top - down replacement bijections that prove avoiding - equivalence .",
    "the first type is from binary trees avoiding @xmath24 to binary trees avoiding @xmath1 , using one rule for the top - down direction and the inverse for the bottom - up direction ; these bijections in general do not extend to bijections on the full set of binary trees .",
    "the second type is a bijection on the full set of binary trees , using both rules in each direction , that induces a bijection from binary trees avoiding @xmath24 to binary trees avoiding @xmath1 .",
    "we conclude with a curious example in which two tree patterns can only be proven equivalent by a two - rule bijection that does not involve them directly .",
    "the trees @xmath240 in class  6.5 are avoiding - equivalent by the permutation @xmath241 , but neither @xmath242 nor its left ",
    "right reflection has an equivalence - proving permutation to @xmath243 , @xmath244 , or their left ",
    "right reflections .",
    "thus , this equivalence can not be established by a bijection that swaps @xmath26-leaf tree patterns .",
    "however , it can be established by a bijection that swaps @xmath4-leaf tree patterns : the previously mentioned bijection consisting of the two replacement rules @xmath245 induces a top - down replacement bijection from trees avoiding @xmath243 to trees avoiding @xmath246 .",
    "the reason is that @xmath243 and @xmath246 are formed by two overlapping copies of the class  4.2 trees @xmath247 respectively , and that @xmath243 and @xmath246 are mapped to each other under this bijection .",
    "i thank phillipe flajolet for helping me understand some existing literature , and i thank lou shapiro for suggestions which clarified some points in the paper . thanks to the referee for the reference to stanley s book .",
    "i am indebted to elizabeth kupin for much valuable feedback .",
    "her comments greatly improved the exposition and readability of the paper .",
    "in addition , the idea of looking for one - rule bijections that do not extend to bijections on the full set of binary trees is hers , and this turned out to be an important generalization of the two - rule bijections i had been considering .",
    "this appendix lists equivalence classes of binary trees with at most @xmath26 leaves . left ",
    "right reflections are omitted for compactness . for each class",
    "we provide a polynomial equation satisfied by @xmath248 ; an equation satisfied by @xmath74 is obtained in each case by letting @xmath249 .",
    "the data was computed by the _ mathematica _",
    "package treepatterns @xcite using singular via the interface package by manuel kauers and viktor levandovskyy @xcite .",
    "pre - computed data extended to @xmath250-leaf binary trees is now also available in treepatterns .",
    "the number of equivalence classes of @xmath16-leaf binary trees for @xmath251 is @xmath252 .",
    "philippe flajolet , paolo sipala , and jean - marc steyaert , analytic variations on the common subexpression problem , _ lecture notes in computer science : automata , languages , and programming _ * 443 * ( 1990 ) 220234 .",
    "ian goulden and david jackson , an inversion theorem for cluster decompositions of sequences with distinguished subsequences , _ journal of the london mathematical society _",
    "( second series ) * 20 * ( 1979 ) 567576 ."
  ],
  "abstract_text": [
    "<S> this paper considers the enumeration of trees avoiding a contiguous pattern . </S>",
    "<S> we provide an algorithm for computing the generating function that counts @xmath0-leaf binary trees avoiding a given binary tree pattern @xmath1 . equipped with this counting mechanism </S>",
    "<S> , we study the analogue of wilf equivalence in which two tree patterns are equivalent if the respective @xmath0-leaf trees that avoid them are equinumerous . </S>",
    "<S> we investigate the equivalence classes combinatorially . toward establishing bijective proofs of tree pattern equivalence </S>",
    "<S> , we develop a general method of restructuring trees that conjecturally succeeds to produce an explicit bijection for each pair of equivalent tree patterns . </S>"
  ]
}