{
  "article_text": [
    "braid monodromy is an important tool for computing invariants of curves and surfaces .",
    "it is used in the study of the topology of plane curve complements to compute the fundamental group @xcite,@xcite and explicitly defined in @xcite .",
    "it is also used for covering spaces @xcite and alexander polynomial @xcite . in @xcite",
    ", it is found that the braid monodromy defines not just the fundamental group but also the homotopy type .",
    "a. libgober also relates braid monodromy and homotopy type of curve complements @xcite . in @xcite , braid monodromy",
    "is also used to analyze connected components of the moduli space of surfaces of general type .",
    "the authors also had important results for the relationship between topology and braid monodromy in the particular case of nodal - cuspidal curves . in @xcite , the author",
    "generalized kulikov - teicher results .",
    "there are also works relating topology and braid monodromy by artal - carmona - cogolludo _ et al .",
    "kharlamov - kulikov studied on braid monodromy factorization @xcite .",
    "degtyarev used the grothendieck s _",
    "dessin denfants _ to compute the braid monodromy of trigonal curves and the plane curves with degree @xmath4 that have a singular point of multiplicity @xmath5 which are birationally equivalent to trigonal curves @xcite .",
    "although braid monodromy has a simple construction and is a widely used invariant , explicit computational algorithms have only been developed for some special cases . in @xcite",
    ", authors had an algorithm to compute the braid monodromy of real singular curves that have a cusp point .",
    "oka computed the braid monodromy for some special cases @xcite .",
    "bessis had more general algorithm used for exceptional braid groups @xcite .",
    "this algorithm resulted the vkcurve package in gap .",
    "for the complexified real arrangements , the braid monodromy is computed in @xcite .",
    "arvola computed the braid monodromy of an arbitrary complex arrangement @xcite . in @xcite , authors improved an algorithm for an almost real curve .",
    "artal - carmona - cogolludo had also algorithms for the case of real curves @xcite . in @xcite , authors computed the monodromy of an irreducible algebraic curve which led to the _ algcurves _ package in maple .",
    "amors computed the braid monodromy of branching divisor @xmath6 using the vertical projection based on numerical integration of a related differential equation @xcite .",
    "the alexander polynomial is an important topological invariant for curve complements .",
    "for example , in zariski s famous example , the sextic with 6 cusps where the cusps are on conic has the alexander polynomial @xmath7 whereas the sextic with 6 cusps where the cusps are not on conic has @xmath8 .",
    "although the alexander polynomial is very useful , there are few algorithms and implementations in literature to compute the alexander polynomials of curve complements . in @xcite , the alexander polynomial of @xmath9 in the case",
    "when @xmath9 is a 3-manifold fibered over a circle is computed using monodromies . in @xcite ,",
    "the authors wrote a computer program to calculate the alexander polynomial from braid monodromy of a given knot . in both papers , they used fox calculus and assumed that they know the braid monodromies already .    an @xmath0-gonal curve is a compact algebraic curve with a linear pencil of degree @xmath0 .",
    "it can also be defined as a plane algebraic curve given by @xmath10 where deg@xmath11 . moreover ,",
    "@xmath0-gonal curves are closely related with the plane curves with degree @xmath4 that have a singular point of multiplicity @xmath12 where @xmath13 . because , if one blows - up that singular point , the proper transform of the plane curve is an @xmath0-gonal curve in a rational ruled surface with an exceptional section .    in this paper",
    ", we propose a new method , named as the * * r**ectangular * * b**raid * * d**iagram ( rbd ) , to compute the braid monodromy of a completely reducible @xmath0-gonal curve . in this method",
    ", we construct the rectangular braid diagram of a given completely reducible @xmath0-gonal curve . using the diagram",
    ", we get the loops around its singular fibers and compute the braid monodromy on each loop using an adaptive step size method .",
    "experiments show that rbd method is more efficient and also comprehensive than the vkcurve @xcite .",
    "in addition to computing the braid monodromy , we present an algorithm to compute the alexander polynomial of @xmath0-gonal curves based on libgober s theorem in @xcite . hence ,",
    "using rbd and libgober s theorem , the alexander polynomial of completely reducible @xmath0-gonal curves can be computed by just using their defining polynomials .",
    "we furthermore give some examples for each computation .",
    "the paper is structured as follows : in section 2 , we give preliminaries and definitions . in section 3 , we introduce the rbd algorithm for braid monodromy computations and go over some examples . in section 4 , we present our algorithm that computes the alexander polynomial and continue with some examples . in section 5 , we compare rbd method with vkcurve . finally , conclusions are drawn in section 6 .",
    "let @xmath14 , be a hirzebruch surface i.e. a rational geometrically ruled surface with an exceptional section @xmath15 of self - intersection @xmath16 . denote the ruling by @xmath17 where the base @xmath18 is a genus 0 curve , i.e. @xmath19 . for a point @xmath20 in @xmath18 , denote the fiber @xmath21 by @xmath22 .",
    "an _ @xmath0-gonal curve _ is a reduced curve @xmath23 not containing @xmath24 or a fiber of @xmath25 as a component such that the restriction @xmath26 is a map of degree @xmath0 i.e. each fiber intersects with @xmath27 at @xmath0 points counting with multiplicities . in other words",
    ", they are the plane algebraic curves given by @xmath10 where deg@xmath28 .",
    "a _ singular fiber _ of an @xmath0-gonal curve @xmath29 is a fiber @xmath30 of @xmath25 intersecting @xmath31 in less than @xmath32 distinct points .",
    "hence , @xmath30 is singular either it passes through @xmath33 , or @xmath27 is tangent to @xmath30 or @xmath27 has a singular point in @xmath30 .    an @xmath0-gonal curve @xmath27 is _ completely reducible _ if it is defined by @xmath1 where @xmath34 $ ] for all @xmath35 and @xmath36 .",
    "let @xmath38 be the free group on @xmath0 generators .",
    "the _ braid group _ @xmath37 can be defined as the group of automorphisms @xmath39 with the following properties :    * each generator @xmath40 is taken to a conjugate of a generator ; * the element @xmath41 remains fixed .    in @xcite",
    ", artin showed that @xmath42=1 $ ] if @xmath43 and the action of @xmath37 on @xmath44 as follows :    @xmath45    one of the oldest and most well - known representation of the braid group is discovered by burau @xcite .",
    "the burau representation @xmath46 of @xmath37 can be described as the @xmath47 $ ] representation which maps the generators of @xmath37 as follows : +    @xmath48 @xmath49-t@xmath50i_n-3@xmath51 + @xmath52 @xmath53i_i-2@xmath54t@xmath55-t@xmath56i_n - i-2@xmath51 , @xmath57 , + @xmath58 @xmath59i_n-3@xmath60t@xmath55-t@xmath51    this representation will be used in chapter 4 to compute the alexander polynomial of the @xmath0-gonal curve complements .",
    "let @xmath29 be an @xmath0-gonal curve and @xmath61 be the ruling .",
    "let @xmath62 be the singular fibers of @xmath27 and @xmath24 be the exceptional section",
    ". denote @xmath63 , the image under the ruling of the corresponding singular fiber @xmath64 .",
    "take a monodromy domain @xmath65 where @xmath66 and @xmath67 is an embedded closed disk .",
    "wlog , we can assume that the interior of @xmath68 contains all @xmath69 s .",
    "pick a point @xmath70 such that the fiber @xmath71 is a nonsingular fiber .",
    "let @xmath72 . clearly , @xmath73 is equal to @xmath74 with @xmath0 punctures .",
    "let @xmath75 .",
    "we know that @xmath76 is the free group on @xmath0 generators i.e. @xmath77 where @xmath40 is the loop which covers @xmath78-th intersection of the fiber @xmath73 and the @xmath0-gonal curve @xmath27 .",
    "we should note that many different generator systems and their relations with braids exist for @xmath76 .",
    "a precise description about this will be done in section [ sec:3.1 ] .",
    "@xmath79 is the free group on @xmath80 generators i.e. @xmath81 where @xmath82 is the loop around @xmath83 .",
    "the restriction @xmath84 is a locally trivial fibration . for each @xmath85 , dragging the fiber @xmath30 along @xmath82 and keeping the base point results to the _ braid monodromy _",
    "homomorphism    @xmath86    since along any loop @xmath87 , the braid monodromy @xmath88 takes a generator @xmath89 to a conjugate of a generator while keeping the product of all generators is fixed , @xmath88 is in the braid group @xmath37 .",
    "each braid monodromy @xmath90 called _ the local braid monodromy _ of the singular fiber @xmath91 .",
    "the set of all local braid monodromies @xmath92 is called the _ global braid monodromy _ the @xmath0-gonal curve @xmath27 .",
    "in this section , we compute the global braid monodromy of the completely reducible @xmath0-gonal curve complements .",
    "let @xmath93 be a completely reducible @xmath0-gonal curve .",
    "the very first step to compute the braid monodromy is to find the singular fibers of the complement .",
    "these fibers are passing through either singular points of one irreducible component or intersections of these components . in our case",
    ", any irreducible component has no singular point by itself since @xmath94 .",
    "hence we only need to find the intersection points of these @xmath0 components @xmath95 .    after finding all singular fibers ,",
    "we choose a base point @xmath70 that should not be from one of the singular points and then find loops starting from @xmath20 and inclosing each singular point .",
    "next , we start to walk on each loop and find the change of the position of each strand , which comes from each irreducible component , and compute the corresponding braid element in @xmath37 for each position change and finally get all braid monodromies for each loop ( what we mean by  position change \" will be explained in coming section ) .",
    "there are mainly two parts of this algorithm .",
    "the first part is to find the loops for each singular point . to find them ,",
    "we construct the _ rectangular braid diagram_.      let @xmath96 be the set of all singular points and @xmath97 , i.e. the image of @xmath98 under the ruling map @xmath99 .",
    "we will compute the monodromy at infinity @xmath100 separately at the end . hence , if @xmath101 , take @xmath102 , else , set @xmath103 .    since @xmath104 , one can talk about the real and imaginary parts of the points in @xmath105 .",
    "let re@xmath106 and im@xmath106 be the set of all real and imaginary parts of each point in @xmath105 , respectively .",
    "there may be repeated values in these sets .",
    "for example , it is possible to have two conjugated singular points where they have the same real parts .",
    "first , we remove these repeated values in these sets . then , we sort all points in re@xmath106 and im@xmath106 .",
    "then , we find the mid - points @xmath107 and @xmath108 of each consecutive two points in re@xmath106 and im@xmath106 respectively and divide the plane by @xmath109 and @xmath110 into rectangular parts .",
    "moreover , we add the lines @xmath111 , and @xmath112 . as a result , we get the rectangular braid diagram .",
    "note that there is at most one singular point in each rectangular region .",
    "now , we need to find the loop for each singular point .",
    "first , we choose a base point @xmath20 on the intersection of the right - most vertical line and @xmath113-axis , say @xmath114 .",
    "we find the set of all rectangular regions that have a singular point in it , call it @xmath115 .",
    "let @xmath116 and take the rectangle @xmath117 that incloses @xmath118 .",
    "to create the corresponding loop @xmath119 , we start to move from the base point @xmath114 to the point @xmath120 where @xmath121 is the imaginary value of the top - right point of @xmath122 .",
    "then we move from @xmath123 to @xmath124 where @xmath125 is the top - right point of @xmath122 .",
    "after that , we continue to walk on @xmath122 in the counterclockwise direction and come back to @xmath125 .",
    "we follow the inverse of our previous move and return to the base point @xmath20 . as a consequence ,",
    "we construct the loop @xmath119 . furthermore , since @xmath126 ,",
    "i.e it is isomorphic to riemann sphere , to compute the monodromy at infinity @xmath100 , it is enough to take the loop that incloses @xmath105 . to do this ,",
    "take the smallest rectangle that incloses all the rectangles in @xmath115 , @xmath127 , and @xmath100 is equal to the monodromy around @xmath127 .",
    "hence , we get all the loops based on @xmath20 and incloses each point in @xmath128 .    note that since each irreducible component has no singular point and the coefficient of @xmath129 in @xmath27 is equal to @xmath8 for all @xmath113 , the analytic continuation holds in this construction .",
    "in other words , for every point @xmath130 on any loop , the corresponding fiber @xmath131 intersects with @xmath27 exactly at @xmath0 points .",
    "let @xmath27 be defined by @xmath132 .",
    "then its singular fibers are @xmath133 , @xmath134 , @xmath135 , @xmath136 , @xmath137 ( our algorithm uses the approximations of algebraic numbers as it happens here ) and its corresponding braid diagram is given in figure 1 .",
    ", width=377 ]      the second part of the rbd algorithm is computing the braid monodromy on each loop . to do this",
    ", we move on each loop with @xmath138 steps and in each step , we sort the real values of each strand and check whether the order changes or not ( if the real values of two strands coincide , we assume the order does not change ) .",
    "if the order changes in a step , we find out at which strands it happens .",
    "this gives the braid element .",
    "we take the exponent of the braid element positive if the strands moves counterclockwise and take negative otherwise . to check this orientation",
    ", we look at the imaginary values of the strands .    for example",
    ", if the order of the real values of @xmath139 and @xmath140 strands changes , it results either the braid element @xmath141 or @xmath142 .",
    "for the orientation , if the imaginary value of @xmath139 strand is smaller than the imaginary value of the @xmath140 strand , then there is a counterclockwise rotation which results @xmath141 .",
    "if not , it gives @xmath142 .",
    "we repeat this step along each loop .",
    "the step size @xmath138 has a big importance in getting the correct results and also in efficiency of the algorithm . in some cases ,",
    "the step size @xmath138 may not be small enough that it may miss some braid elements and we get wrong answers .",
    "on the other hand , the step size @xmath138 may be too small that causes unnecessary computations and it reduces the efficiency of algorithm .",
    "even these two cases may happen on the same curve .",
    "therefore , we need to choose @xmath138 for each step independently . here is the algorithm to choose it :    let @xmath143 be a completely reducible @xmath0-gonal curve , @xmath144 is a loop in its rectangular braid diagram and @xmath20 be its base point .",
    "first , start with a value for the step size , let @xmath145 .",
    "we need to investigate whether we miss braid elements on the interval @xmath146 . to do this ,",
    "we find upper bounds on how far each component @xmath147 for @xmath35 moves on @xmath146 .",
    "let @xmath148 where @xmath149 for @xmath150 .",
    "we have    @xmath151    set @xmath152 for all @xmath153 .",
    "we then check whether @xmath154 is true for all @xmath155 .",
    "if they are all true , we guarantee that there is at most one braid element in each step . if not , set @xmath156 and do the some process till @xmath154 is true for all @xmath155 .",
    "this is the last step of our algorithm .",
    "algorithm [ alg ] outlines the rbd algorithm .",
    "[ alg ]    let @xmath27 be a trigonal curve defined by @xmath157 .",
    "this curve has three singular fibers such as @xmath158 and @xmath159 .",
    "the corresponding braid monodromies are    @xmath160 ,    @xmath161 ,    @xmath162 ,    @xmath163 .",
    "in @xcite , the authors compute the local braid monodromy of the curve @xmath164 at @xmath165 .",
    "they state that two points ( corresponding to @xmath166 and @xmath167 ) do two counterclockwise full - twists and the third point ( corresponds to @xmath168 ) does counterclockwise full - twist around them , that is the braid monodromy is @xmath169 .",
    "when we use our algorithm , we found the monodromy as @xmath170 if we use the braid relation @xmath171 four times , we get the same monodromy .",
    "notice that in the previous example , the authors could only compute the local braid monodromy but we can compute the global monodromies using our algorithm .",
    "in this section , we compute the alexander polynomial of a completely reducible @xmath0-gonal curve using its global monodromy .",
    "our main reference for this section is @xcite .",
    "let @xmath27 be an @xmath0-gonal curve and @xmath172 be images of the singular fibers of @xmath27 under the ruling map .",
    "let @xmath46 be a @xmath4 dimensional linear representation of the braid group @xmath37 over the ring @xmath173 of laurent polynomials @xmath174 $ ] .",
    "define @xmath175 as the greatest common divisor of the order @xmath4 minors in the @xmath176 matrix of the map @xmath177id@xmath178 , where @xmath179 , @xmath180 is the loop enclosing @xmath181 and @xmath182 is the braid monodromy of the loop @xmath180 .",
    "we call this matrix the _ libgober matrix_. it takes @xmath183 to @xmath184 .",
    "now , we can state the following important theorem that we will use in our algorithm .    _",
    "@xcite if @xmath46 is the reduced burau representation then @xmath175 is equal to the alexander polynomial @xmath185 of @xmath27 multiplied by @xmath186 . _",
    "this invariant is defined for plane algebraic curves that have generic projections and an @xmath0-gonal curve may not have a generic projection .",
    "however , we can still use this theorem to compute the alexander polynomial because when @xmath46 is the reduced burau representation , @xmath177id@xmath178 is same with the matrix of fox derivative @xmath187id@xmath178 where @xmath188 are generators of the fundamental group of the curve complement and fox derivatives can be used in alexander polynomial computations for any plane curves .    in the previous section , we computed the global braid monodromy . since the reduced burau representation of @xmath37 is @xmath189 dimensional , we need to find the @xmath190 libgober matrix of the braid monodromies and compute the set @xmath9 of @xmath191 minors of this matrix .",
    "then we find the @xmath192 of all elements in @xmath9 and divide it by @xmath193 to get the corresponding alexander polynomial .",
    "first , we state one definition and one theorem that are important to interpret our results .",
    "the alexander polynomial of a curve @xmath27 is defined to be trivial if @xmath194 where @xmath80 is the number of irreducible components of @xmath27 .    _",
    "[ theorem ] assume that @xmath195 and @xmath196 intersect transversely and let @xmath197 .",
    "then the alexander polynomial @xmath198 of @xmath27 is given by @xmath199 where @xmath80 is the number of irreducible components of @xmath27 , i.e. , it is trivial @xcite .",
    "_    now , we state some examples that we have found out by using our algorithm .",
    "we show how we get the results in the very first example only since we use the same steps for the others .    as the first example , we take a trigonal curve where each component intersects transversely :    [ example::1 ] the alexander polynomial of the curve @xmath200 , whose real picture is given in figure [ fig:2 ] , is @xmath201 .",
    ", width=245 ]    there are totally six singular fibers of this curve at @xmath202 and , from the rectangular braid diagram technique , the braid monodromies are @xmath203 respectively .",
    "then , we compute the libgober matrix using the braid monodromies :    @xmath204t^2 - 1@xmath55-t+1@xmath205 t - 1@xmath206t^2 - t@xmath207 t - 1@xmath206t^2 - t@xmath207 t - 1@xmath208t^2 - t@xmath207 t - 1@xmath208t^2 - t@xmath209-t^2 + t@xmath210t^2 - 1@xmath211 -t^2 + t@xmath206t^2 - 1@xmath207t^4 - 1@xmath55t^5 - t^4@xmath2070@xmath212t^6 - 1@xmath213    as the final step , find the @xmath192 of all order 2 minors in the libgober matrix and divide it by the polynomial @xmath7 which gives the alexander polynomial    @xmath214    note that in example [ example::1 ] , the fundamental group also can easily be computed using its braid monodromy . in fact",
    ", it is abelian and this implies the triviality of the alexander polynomial .",
    "however , in general , computing the fundamental group is not an easy task .",
    "that is why the alexander polynomial is defined as an indeterminate invariant .",
    "furthermore , we realized that in some examples , alexander polynomial is also trivial even if there are some non - transversal intersections , see the following example .",
    "the alexander polynomial of the curve @xmath215 , whose real picture is given in figure [ fig:3 ] , is @xmath216 .    ,",
    "width=245 ]    hence , by the last example , we see that the converse of theorem [ theorem ] is not true in general",
    ".    moreover , any arrangement that are constructed by a conic and two lines that are tangent to that conic has the alexander polynomial @xmath217 any such arrangement is topologically equivalent to the curve in example [ example:3 ] .",
    "[ example:3 ] the alexander polynomial of the curve @xmath218 is @xmath219 .",
    "figure [ fig:4 ] is its real picture .    , width=245 ]    finally , any three curve arrangements that have only one intersection point , i.e. the curves in the form @xmath220 with @xmath2 , @xmath221 and distinct @xmath222 , also have non - trivial alexander polynomials that is @xmath223 see the following example .",
    "the alexander polynomial of the curve @xmath224 is @xmath225 .",
    "figure [ fig:5 ] is its real picture .",
    ", width=245 ]",
    "in this section , we compare the rbd method with vkcurve that can be also used to compute the braid monodromy of completely reducible @xmath0-gonal curves . in @xcite , the authors created the vkcurve package which is implemented in @xmath226 .",
    "we do the comparison for trigonal curves from degree 3 to 9 ( we take line - line - line arrangements for degree 3 , conic - line - line for degree 4 and so on ) .",
    "we generate random 50 polynomials for each degree and compute the average running times for each method .",
    "figure [ fig : c ] shows the results .",
    "as we see from figure [ fig : c ] , the gap of the run - time cost between these methods is marginal .",
    "vkcurve could not compute the braid monodromy of the trigonal curves that have degree bigger than 7 in one day while rbd computes around 10 seconds .",
    "furthermore , there are some trigonal curves with degree smaller than 7 where the vkcurve could not compute the braid monodromy again in one day .",
    "furthermore , vkcurve is implemented in an older version of @xmath226 and can not be used in the new version .",
    "this brings some limitations .",
    "for example , complex numbers and floating numbers are not defined in this version ( only the primitive @xmath0-th root of unity where @xmath227 is defined as complex numbers ) .",
    "moreover , in @xcite , the authors computes the braid monodromy however , this method can only compute the braid monodromy of curves up to degree 6 whereas rbd can compute for bigger degrees efficiently .",
    "in this paper , we developed and implemented an efficient algorithm to compute the braid monodromy of completely reducible @xmath0-gonal curves .",
    "we presented another algorithm using the idea in @xcite to compute the alexander polynomials of these curves .",
    "these algorithms are implemented in sage ( available from http://www.math.fsu.edu/@xmath228maktas/computingbraidmonodromy ) .",
    "a future task is to compute other invariants based on representations of the braid group of @xmath0-gonal curves .",
    "we would like to thank to e. hironaka for her encouragement and many fruitful discussions on this research .",
    "we would also like to show our gratitude to z.y .",
    "karatas and a. ergur for their help with proof reading the article .",
    "we are also grateful to the anonymous reviewers for their helpful and constructive comments that greatly contributed to improving the final version of the paper ."
  ],
  "abstract_text": [
    "<S> braid monodromy is an important tool for computing invariants of curves and surfaces . in this paper , </S>",
    "<S> the _ rectangular braid diagram ( rbd ) _ method is proposed to compute the braid monodromy of a completely reducible @xmath0-gonal curve , i.e. the curves in the form @xmath1 where @xmath2 and @xmath3 $ ] . </S>",
    "<S> also , an algorithm is presented to compute the alexander polynomial of these curve complements using burau representations of braid groups . </S>",
    "<S> examples for each computation are provided . </S>"
  ]
}