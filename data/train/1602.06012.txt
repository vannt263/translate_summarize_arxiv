{
  "article_text": [
    "_ combinatorial game theory _ is the study of games with :    * two players alternating turns , * no randomness , and * perfect information for both players .    a _",
    "ruleset _ is a pair of functions that determines which moves each player can make from some position .",
    "most games in this paper use _ normal play _ rules , meaning if a player ca nt make a move on their turn , they lose the game ( i.e. the last player to move wins ) .",
    "the two players are commonly known as _ left _ and _ right_. the rulesets discussed here include players assigned to different colors ( @xmath0  vs @xmath1  or @xmath2  vs @xmath3 ) .",
    "we use the usual method of distinguishing between them : left will play as @xmath0  and @xmath2 ; right plays @xmath1  and @xmath3 .    for more information on combinatorial game theory ,",
    "the reader is encouraged to look at @xcite and @xcite .",
    "_ algorithmic combinatorial game theory _ is the application of algorithms to combinatorial games .",
    "the difficulty of a ruleset is analyzed by studying the computational complexity of determining whether the current player has a winning strategy . in this paper , we show that many games are -complete , which means that no polynomial - time algorithm exists to determine the winnability of all positions unless such an algorithm exists for all problems .    usually determining the winnability of a ruleset is considered as the computational problem of the same name .",
    "we use that language here , e.g. saying  is -complete means that the associated winnability problem is -complete .",
    "all games considered in this paper exist in due to the max height of the game tree being polynomial * ? ? ? * .",
    "thus , by showing that any of these games are -hard , we also show that they are -complete .    for",
    "more on algorithmic combinatorial game theory , the reader is encouraged to reference @xcite .",
    "[ [ section ] ]    is a combinatorial ruleset played on a directed graph where each arc has three properties :    * color : which of the two players is allowed to flip it .",
    "* flipped : a boolean flag indicating whether it has already been flipped .",
    "each arc may be flipped only once . * weight : one of @xmath4 .",
    "an orientation of the arc is legal if each vertex in the graph has at total weight of incoming edges of at least 2 .",
    "a move consists of a player choosing an arc , @xmath5 , to flip where :    * the arc is that player s color , and * the arc has not yet been flipped , and * flipping the arc ( meaning the graph with @xmath6 replacing @xmath5 ) results in a legal orientation .",
    "the goal of  is for left to flip a goal edge .",
    "if they can flip this edge , then they win the game .",
    "otherwise , right wins .",
    "is -complete , even when :    * the graph is planar , and * only six types of vertices exist in the graph .",
    "these six vertex types are : and , or , choice , split , variable , and goal , named for the gadgets they represent in the proof of  hardness @xcite .",
    "the following is a description of each of these vertices .",
    "diagrams for each may be found in @xcite .    *",
    "variable : one of two edges ( one of each color ) may be flipped .",
    "s edge corresponds to setting the variable to _ true _ , @xmath3  sets it to _ false_. * goal : this is the @xmath2  edge that left needs to flip to win the game . * and : a vertex with two outward - oriented `` input '' edges and one inward - oriented `` output '' edge . in order to flip the output edge",
    ", both input edges must first be flipped . * or :",
    "another vertex with two inputs and one output , but here only one of the inputs must be flipped in order for the output to be flipped .",
    "* choice : one input edge which , when flipped to orient inwards , means one of two output edges may be flipped to orient outwards . *",
    "split : one input edge which , when flipped to orient inwards , allows both output edges to be flipped orienting outwards .    in order to use  as the source problem for a proof of -hardness , it is sufficient to show that gadgets that simulate each of the six  vertex types .",
    "we use this to reduce directly to and to show both are -complete . for more information about the structure of each of these gadgets ,",
    "the interested reader may reference @xcite .",
    "_ placement games _ on graphs are combinatorial rulesets played on graphs that fulfill all of these requirements :    * vertices are either marked or unmarked , * a move for a player consists of marking one of the vertices , and * marks may never be moved or removed.@xcite    since marks may never be moved or removed , the maximum number of plays made during a game is always @xmath7 , where @xmath7 is the number of vertices in the graph .",
    "thus , an algorithm to compute the winner of any placement game needs only a polynomial amount of space ; all placement games are in .",
    "the next three sections describe the three placement games considered in this paper : , , and .",
    "[ [ section-1 ] ]    is a partisan placement game where left and right alternately paint vertices with their color ( @xmath0  and @xmath1 ) with the restriction that two neighboring vertices may not have the same color .",
    "thus a single turn consists of painting an uncolored vertex not adjacent to another vertex of the player s color .",
    "a more formal definition is given in [ def : col ] .",
    "[ def : col ] is a ruleset played on any graph , @xmath8 , where @xmath9 is a coloring of vertices @xmath10 such that @xmath11 either @xmath12 or @xmath13 .",
    "an option for player @xmath14 is a graph @xmath15 with @xmath16    * @xmath17 , and * @xmath18 , and * @xmath19 s color .",
    "was devised in 19xx .",
    "its computational complexity has remained an open problem since the 1970 s .",
    "we show that is -complete , even for planar graphs , in [ sec : colishard ] .",
    "[ [ section-2 ] ]    is a partisan placement game where left and right alternately paint vertices using their color ( @xmath2  and @xmath3 ) with the restriction that each connected component of one color must be adjacent to an @xmath20  vertex .",
    "a more formal definition is given in [ def : nogo ] .",
    "[ def : nogo ] is a ruleset played on any graph , @xmath8 , where @xmath9 is a coloring of vertices @xmath21 such that @xmath22 connected single - color component @xmath23 where :    * @xmath24 , and * @xmath25 , and * @xmath26 .",
    "an option for player @xmath14 is a graph @xmath15 , where @xmath16    * @xmath17 , and * @xmath18 , and * @xmath19 s color .    and the same above property holds true , but using the new coloring @xmath27 : @xmath22 connected single - color ( as colored by @xmath27 ) component @xmath28 where :    * @xmath29 , and * @xmath30 , and * @xmath31 .    is the well - known version of played specifically on a grid - graph .",
    "our hardness proof applies only to the more general ; the computational complexity of the grid version remains an open problem .",
    "is itself a non - loopy variant where capturing moves are not allowed .",
    "( in , uncolored vertices adjacent to a connected component of one color are known as liberties .",
    "enforces that a liberty must always exist for each connected component . ) resolving the computational complexity has been considered an open problem since 2011 when a tournament was played among combinatorial game theorists at the banff international research station .",
    "[ [ section-3 ] ]    is a partisan placement game where left and right alternately paint vertices using their color ( @xmath2  and @xmath3 ) with the restriction that the newly - painted vertex must be adjacent to a vertex already painted that player s color .",
    "note that the initial position must contain both colored and uncolored vertices in order to have any options .",
    "[ def : fjords ] is a ruleset played on any graph , @xmath8 , where @xmath9 is a coloring of vertices @xmath21 .",
    "an option for player @xmath14 is a graph @xmath15 where @xmath32    * @xmath17 , and * @xmath18 , and * @xmath19 s color , and * @xmath33 s color .    is the generalized version of , which is played on a hexagonal grid with some edges and vertices removed . in the published version of",
    ", the initial configuration is generated through a randomized process , but once that is complete the remainder of the game ( as described here ) is strictly combinatorial .",
    "this paper only solves the general case ; the computational complexity of remains an open problem .",
    "next we show that is hard .",
    "[ theorem : colhardness ] determining whether the next player in has a winning strategy is -hard .    to complete this proof ,",
    "we reduce from 2-player to .",
    "the resulting position s graph will have two separate components : a section only left ( @xmath0 ) can play on and a section where both players will play that consists of the gadgets presented here .    the @xmath0-only component is a single star graph with @xmath34 rays ( we ll specify @xmath34 later ) and a single hub colored @xmath1 .",
    "this second section with the gadgets will be played in two stages . in the first stage ,",
    "the players first alternate choosing variable gadgets to play on , then @xmath1  finishes filling in the rest of the gadgets ( @xmath0  can not play on the other gadgets ) while @xmath0  plays on their separate component . when @xmath1  finishes correctly playing on the gadgets",
    ", they may be able to make a single last play on the goal gadget depending on whether they won the variable - selection phase .",
    "if they incorrectly play on the gadgets , then that will cost them one or more moves and @xmath0  will win .",
    "the basic gadget represents the orientable edge ( figure [ fig : edge ] ) .",
    "this is modeled by two connected vertices .",
    "if red colors the ` a ' or ` i ' vertex , this represents activating or leaving the edge inactive , respectively .",
    "all of the other gadgets use these edges as either inputs or outputs ( or both ) .",
    "red needs to play in each of the edges ( and other places ) in order to win the game .",
    "the remaining gadgets connect the edges to each other . in order to suffice for hardness ,",
    "we need only to implement the gadgets to represent vertices that represent variables , goal - edges , splitters , path choice , and and and or gates .    in order to complete the reduction",
    ", we need to show how to create gadgets from each of the relevant gadgets : variable , output - edge , or , and , choice , and split .",
    "the goal - edge gadget includes a pair of adjacent vertices , which are connected to an edge pair .",
    "( see figure [ fig : goaledge ] . )",
    "one of the vertices is colored blue , while the other remains uncolored and is adjacent to the inactive vertex in the input variable .",
    "this represents the edge that needs to be activated in order for @xmath1  to win the game .",
    "the or gadget , illustrated in figure [ fig : or ] , connects three edge gadgets ( two input and one output ) to a 4-clique . in the new clique ,",
    "one vertex is colored blue , another is connected to the active vertex of the output variable , and the remaining two are connected , one each , to the inactive vertices of the inputs .",
    "if either of the inputs is activated , then the output can be activated and the clique can also be played .",
    "( @xmath1  will need to play in each of these inner cliques to have a chance to win . ) otherwise , the clique can be played on only if the output variable is inactive .",
    "the and gadget , shown in figure [ fig : and ] , also connects two input edge gadgets to an output .",
    "the active vertex of the output is connected to each input inactive vertex . in order to activate the output variable ,",
    "both of the two input variables must be activated .        the choice gadget , figure [ fig : choice ] , connects one input edge gadget to two outputs .",
    "the active vertices of the outputs are adjacent to each other and both connected to the inactive vertex of the input .",
    "if the input is chosen to be active , then one of the outputs may be activated .",
    "( they can not both be activated , because the active vertices are adjacent . )",
    "the split gadget , shown in figure [ fig : split ] , is exactly the same as the choice gadget , except that the active vertices of the outputs are not adjacent .",
    "thus , if the input variable is activated , _ both _ outputs can be active .",
    "determining whether the next player in on planar graphs has a winning strategy is -hard .",
    "we can follow the same proof as in theorem [ theorem : colhardness ] .",
    "since is -hard on planar graphs , and the reduction preserves planarity , planar is also -hard .      in this section ,",
    "we prove that is -complete , even on planar graphs . since is a graph placement game",
    ", it is already in .",
    "it remains to show that is hard .      to prove the hardness of",
    ", we reduce from , which was shown to be -hard in [ theorem : colhardness ] .",
    "the reduction uses only two gadgets .",
    "it is -hard to determine whether the next player has a winning strategy in .",
    "let @xmath8 be an instance of .",
    "the result of the reduction on @xmath35 will be a graph @xmath36 defined as follows .    for each vertex , @xmath37 , in @xmath38 ,",
    "we include four vertices in @xmath39 : @xmath40 , a vertex painted @xmath2 ; @xmath41 , a vertex painted @xmath3 ; @xmath42 , an @xmath20``forbidden '' vertex that can never be painted ; and @xmath43 , a vertex that may be painted .",
    "( choosing to color @xmath43 corresponds to coloring vertex @xmath37 . )",
    "we also include the three edges @xmath44 , and @xmath45 in @xmath46 .",
    "this gadget is illustrated in [ fig : nogovertex ] .",
    "@xmath40 and @xmath41 will never be adjacent to any vertices aside from @xmath42 .",
    "if @xmath42 were to be colored , either @xmath40 or @xmath41 would be a connected component without a liberty .",
    "thus , @xmath42 can never be colored , and will always be a liberty for @xmath43 .    also , for each edge , @xmath47 , in @xmath48 , we include two vertices and four edges in @xmath49 to mimic the proper coloring rule in .",
    "this gadget is illustrated in [ fig : nogoedge ] and described more formally as follows .",
    "let @xmath50 and @xmath51 be vertices colored @xmath2and @xmath3 , respectively , then include the four edges @xmath52 , @xmath53 , @xmath54 , and @xmath55 .",
    "@xmath50 and @xmath51 will not be adjacent to any other vertices aside from @xmath56 and @xmath57 .",
    "if @xmath56 and @xmath57 have the same color , exactly one of the two new vertices @xmath50 or @xmath51 will be a connected component with no liberty .",
    "thus , they can not both be painted the same color .    using the definitions above",
    ", we can formally define @xmath39 , @xmath46 , and @xmath27 .",
    "first , @xmath39 :    * @xmath58 , * @xmath59 , * @xmath60 , * @xmath61 , so * @xmath62 .    and @xmath46 :    * @xmath63 , * @xmath64 , so * @xmath65 .    and @xmath27 :    * @xmath66 , * @xmath67 , * @xmath68 , * @xmath69 * * if @xmath70 , then @xmath71 * * if @xmath72 , then @xmath73 , and * * if @xmath74 , then @xmath75 .",
    "each possible move on @xmath76 for player @xmath14 cooresponds exactly to a move on @xmath77 for the same player , so the game trees and strategies for each are exactly the same . thus , is also -hard .",
    "determining whether the next player has a winning strategy in is -complete .",
    "since is a placement game , it is in .",
    "since it is both in and -hard , it is -complete .",
    "determining whether the next player has a winning strategy in is -complete when played on planar graphs .",
    "since is -complete on planar graphs , and the reduction gadgets do not require any additional crossing edges , the resulting board is also planar .",
    "thus , is also -complete on planar graphs .        for , we will also reduce from : for the reduction we must cover variable , split , choice , and , and or gadgets , as well as the final victory gadget . assuming the  position is the result of a reduction from ,",
    "thus players should choose the variables first , then play on the rest of the gadgets .      in order to enforce this , we ll add incentives to the variable gadgets so that they are all played before the other gadgets . each gadget for a variable @xmath78 will consist of a single vertex , @xmath79 , connected to both a black and white vertex as well as a separate clique of size @xmath80 , @xmath81 , as shown in [ fig : fjordsvariable ] .",
    "for further gadgets that use @xmath78 , @xmath79 will be included as the active input .",
    "other black and white - colored vertices exist in the remainder of the fjords graph , but @xmath80 will be large enough so that all variables will be chosen first .",
    "after all @xmath7 variables are chosen , we want each player to have cached @xmath82 `` moves '' in unclaimed vertices accessible only to them . in order to make this happen ,",
    "if @xmath7 is odd , we add an extra `` dummy '' variable gadget so that this balances out .      as with the reduction in [ sec : colishard ] , there are input / output vertex pairs ( with an active vertex and inactive vertex ) that are outputs to some gadgets and inputs to others . as in [ fig : fjordsio ] , all figures here will have the active vertex on the left an the inactive on the right .",
    "unlike the reductions , both players play in all pairs ( aside from variables , which do nt have an inactive vertex ) .",
    "the pair is active or inactive depending on where left plays .",
    "if the active vertex is @xmath2(and the inactive is @xmath3 ) , then the pair is active .",
    "otherwise , the pair is inactive .      at the other end of the fjords reduction",
    "is a single goal vertex , shown in [ fig : fjordsgoal ] .",
    "if the source  is winnable by left , then in the position , left will be able to move last by claiming this vertex because they activated the final input - output pair .      between the variables and the goal , a series of gadgets will be laid out to implement the formula .",
    "we enforce order on these by including decreasing incentives . for gadget @xmath83 with an output that is an input to gadget @xmath84 , @xmath83 will have a higher incentive , @xmath80 .",
    "just as with the variable gadgets , this will be realized as cliques @xmath81 attached to the gadget .",
    "since the source formula from has no negations , it is always better for left to choose to make an output active over inactive .",
    "( the same is true for right . )",
    "add more here ?    in order to complete the reduction , we must include gadgets for the choice , split , or , and and gadgets .",
    "the choice gadget allows left to choose between one of two outputs , but only if the output is active .",
    "( see [ fig : fjordschoice ] for an example . )",
    "since left goes first , if the input is active , they will be able to choose between the active outputs .",
    "right will then respond by claiming the other active output . left and right will then trade turns choosing the remaining inactive inputs .",
    "the split gadget copies the input pair into two output pairs and is shown in [ fig : fjordssplit ] . in this gadget ,",
    "whichever color is on the active input will get to choose both inactive outputs .      the or gadget , shown in [ fig : fjordsor ] , works as expected : if either of the inputs is active , then left may move to activate the output .",
    "otherwise , the output must be inactive .",
    "the and gadget , shown in [ fig : fjordsand ] , is the most surprising as it is not symmetric . in this gadget",
    ", both inputs must be active in order for it to be worth left s turn to color the active output vertex @xmath2 . clearly ,",
    "if the left - hand input is inactive , left wo nt have the chance to color that active input .",
    "it remains to consider the situation where the left - hand input is active and the right - hand input is inactive .    in this case , if left decides to activate the output , right can play on the inactive vertex .",
    "now right has cut off two extra vertices that can be taken later . even if left plays the rest of the game perfectly ,",
    "right will win .",
    "right can never be cut off from these two spaces , but left must be sure to occupy either the inactive output or the right - hand active input .      in order to finish putting the reduction together ,",
    "we need to prescribe incentives on each gadget so that it is played after its inputs are chosen .",
    "let @xmath85 be the number of non - variable gadgets . then :    * those @xmath85 gadgets will have incentives of @xmath86 , starting with the goal and building back from that .",
    "these are the sizes of the cliques connected to each output vertex .",
    "there are no cycles in the flow of the reduction , so we can order the gadgets this way .",
    "* since each gadget is worth at least three more `` points '' than any gadget off it s output(s ) , it is never worthwhile to play out of order : even for and gadgets where an extra two vertices could be gained by right playing out of order on the inactive vertex . * the variables will all have incentive @xmath87 so they are all worth playing at before any of the other gadgets .    [",
    "theorem : fjordsishard ] determining whether the next play has a winning strategy in is -hard .    by using the scheme and gadgets described above",
    ", we can always reduce from to .",
    "determining whether the next player has a winning strategy in is -complete .",
    "we can determine the winner of any placement game in .",
    "thus , by [ theorem : fjordsishard ] , is -complete .",
    "determining whether the next player has a winning strategy in on planar graphs is -complete .",
    "since the reduction from  preserves planarity , is also -hard on planar graphs .",
    "since it is in , it is also -complete .",
    "the main results of this paper are the computational hardness results for the three placement games , , and : all three are -complete . moreover , and are -complete on planar graphs .",
    "even similar placement games such as and are only known to be -complete on non - planar graphs , though those hardness results were known in the 1970 s @xcite .",
    "the hardness of is especially satisfying , as the problem has been open for decades without known progress . since the reduction proving hardness for starts from",
    ", we expect that will be useful as the source for other reductions .",
    "there is still many placement games with unknown computational complexity . in particular , it is still unknown whether ( on grid - graphs ) and ( on subgraphs of a hexagonal grid ) are computationally difficult",
    ". either of these would be a large improvement over the current result .",
    "erik  d. demaine and robert  a. hearn .",
    "playing games with algorithms : algorithmic combinatorial game theory . in michael  h.",
    "albert and richard  j. nowakowski , editors , _ games of no chance 3 _ , volume  56 of _ mathematical sciences research institute publications _ , pages 356 . cambridge university press , 2009 ."
  ],
  "abstract_text": [
    "<S> we show that three placement games , , , and , are -complete on planar graphs . </S>",
    "<S> the hardness of and is shown via a reduction from and is shown to be hard directly from . </S>"
  ]
}