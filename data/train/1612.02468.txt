{
  "article_text": [
    "mobile cloud computing is the emerging paradigm of recent decades that focuses on overcoming the inherent shortages of mobile devices regarding processing power , memory and battery via application offloading , by total or partial execution of mobile applications on a distant cloud .",
    "hence , the application offloading might not always be helpful because of the long physical distance between the mobile device and the cloud .",
    "the concept of the cloudlet  @xcite has been raised to response to this issue of distance .",
    "the cloudlet is a predefined cloud in proximity that consists of some static stations and is generally installed in public domains , but with no guaranty of availability near a mobile device .    as a solution to this cloud distance problem",
    ", we propose to offload application onto a spontaneous proximity cloud  ( spc ) - a cloud in the proximity of the mobile device , composed of a set of mobile devices in the vicinity .",
    "this spc is a collaborative group of moving devices in proximity with members that occasionally join and leave .",
    "the short distance between the mobile device and the spc overcomes the issue of latency in data transfer to distant clouds , especially in high network traffic conditions .",
    "offloading onto spc could also prevent imposing bandwidth allocation overhead onto a communication network that experiences a shortage of capacities , due to the continuous traffic growth . besides , the energy consumption of a 3 g cellular data interface , associated with the cloud , is 3 to 5 times much higher than wifi transmissions , used between mobile devices  @xcite@xcite .",
    "another motivating factor to use spc is the popularity of mobile devices .",
    "inadequate network coverage , natural or man - made disasters may damage the data centres and significant technical failures - such as experimented by amazon cloud  @xcite - can make remote clouds temporarily unavailable . while , because of the increasing number of mobile devices and the wide frequency of use - per user or household @xcite - a mobile device presents a great chance to be surrounded by a group of mobile devices . finally , the use of spc is a perfect incentive for green computing , with individual devices powered under the user responsibility that can use human body kinetic energy harvesting or solar panels  @xcite .",
    "we found all these factors motivating enough to design and implement acomma , an * * a**nt - inspired * * c**ollaborative * * o**ffloading * * m**iddleware for * * m**obile * * a**pplications , that performs offloading on either distant cloud or spc .",
    "acomma is an automated offloading middleware that takes offloading decisions dynamically by applying an ant - inspired bi - objective decision - making algorithm .",
    "the details of offloading onto distant cloud are already explained and evaluated in our previous article  @xcite . in this paper , we demonstrate that taking a decision in a mobile device can benefit to all the other mobile devices in the vicinity and so better the application execution performances .",
    "we create a decision cache composed of the execution trails of mobile applications and , by using learning - based decision - making algorithm , acomma could reuse previous offloading decisions instead of running its ant colony optimization ( aco ) decision - making algorithm .    in this paper",
    ", we focus on the extension of acomma in a way that it can be able to perform offloading in a collaborative manner . in collaborative offloading , instead of communicating with a distant cloud",
    ", the mobile device cooperates with spc s members , for either resource or data sharing .",
    "our main contributions consist of :    * developing a decision - making process performing multi - destination offloading . to this end",
    ", we need to modify the aco algorithm to take potential offloading decisions to remote clouds as well as mobile devices in the spc , without any lock - in considerations to the number of devices . in this case , the mobile devices collaborate for resource sharing . *",
    "developing a learned - based decision - making process to use the collaborative decision cache instead of the local cache . in this case , the mobile devices collaborate for data sharing .",
    "they share their local caches to create a richer collaborative cache that permits more efficient and relevant offloading decisions .",
    "the remainder of the paper is structured as follows : section 2 discusses the existing offloading approaches .",
    "section 3 explains the architecture of our proposed offloading middleware - acomma .",
    "section 4 and 5 show how acomma is enhanced to make mobile devices collaborate for resource and cache sharing .",
    "section 6 evaluates our offloading middleware under a range of scenarios and using different benchmarks .",
    "finally , section 7 provides a summary , conclusion and outline of future work .",
    "recently , delegating total or partial application execution to more powerful machines instead of local devices - known as application offloading - has attracted attention to overcome resource limitations and to save the battery of mobile devices .",
    "a significant amount of researches has been performed in this domain to propose solutions to bring the cloud to the vicinity of the mobile device maui  @xcite and thinkair  @xcite are the most prominent works in this domain .",
    "they are focusing on optimising energy consumption or execution time using linear programming .",
    "they use the virtual machine migration techniques to execute application methods onto the cloud . however , these virtualized environments are heavy for limited mobile devices .",
    "clonecloud@xcite is a lighter approach since it cuts the application into two thread level partitions using linear programming , with only one of them offloaded onto the cloud .",
    "some approaches perform offloading onto a closer surrogate , a cloudlet @xcite , that is composed of static stations . however , a cloudlet does not necessarily exist near a mobile device .",
    "few studies focused on the use of adjacent mobile devices as offloading surrogates .",
    "transient cloud@xcite uses the collective capabilities of nearby devices in an ad - hoc network to meet the needs of the mobile device .",
    "a modified hungarian method is applied as an assignment algorithm to assign tasks to devices that are to be run according to their abilities .",
    "the execution of each task by any device imposes some cost , and the assignment algorithm aims to find the minimum total cost assignment .",
    "to that end , @xcite has proposed a dynamic cost adjustment to balance the tasks based on costs between devices .",
    "miluzzo et al .",
    "@xcite proposed an architecture named mcloud that runs resource - intensive applications on collections of cooperating mobile devices and discuss its advantages .",
    "kassahun et al .",
    "@xcite have gone one step further and formulated a decision algorithm for global adaptive offloading .",
    "they implemented the program components on mobile devices set to optimise time to failure ( ttf ) while taking into account the limitations of the effectiveness of the program .",
    "having highlighted the benefits of collaboration for mobile task offloading , mtibaa et al . also implemented computational offloading schemes to maximise the longevity of mobile devices@xcite@xcite",
    "the proposed architecture of acomma makes application offloading possible onto remote clouds and spc as a single or multiple destination offloading process .",
    "the building blocks of acomma are illustrated in figure  [ fig : architecture ] .",
    "acomma considers a mobile application as a dependency graph , where the nodes represent the function / method calls of the application and the edges are their dependency in terms of function / method invocations .",
    "the offloading decision - making process partitions this call graph to define which function / method should be executed locally - on the mobile device , near - remotely - on a device of the spc , or far - remotely - on the distant cloud .",
    "the offloading middleware is composed of a group of services to offload this application .",
    "the _ offloading manager _ is in charge of taking offloading decisions using ( 1 ) an ant colony optimization algorithm for the initial decision - making or ( 2 ) string matching algorithm for learning - based decision - making . in the learning - based mode ,",
    "the decision - making relies on previous application execution traces , saved in a local or collaborative decision cache .",
    "coming to the collaborative mode , the _ collaboration service _ takes the responsibility of offloading onto spc with the help of _ offloading manager_. the _ collaboration service _ makes nearby devices collaborate using the neighbours information prepared by the _ discovery service_. this service finds the nearby devices and saves their address and information . to perform a dynamic offloading considering the current state of mobile devices",
    ", acomma needs to be aware of current conditions and requirements .",
    "the mobile devices information , such as the available battery and memory , and their environment such as the available networks , the available bandwidth , as well as cloud kind and theirs costs , are collected by _",
    "context monitoring service_. this contextual information helps acomma to choose in - between the spc or the remote clouds .",
    "as mentioned before , the decision - making process of acomma is based on the application call graph partitioning . to perform offloading onto spc ,",
    "the decision engine breaks apart the application into several parts - instead of two in traditional partitioning approaches , where each part represents an executing device .",
    "for example , figure  [ fig : partitioning ] shows the partitioning for offloading onto three nearby devices , where nodes a , c , f execute locally , node b executes on device a , node e and g execute on device b and finally mobile device c executes node d.        to perform such a graph partitioning for multi - destination offloading , the acomma collaboration service modifies the application call graph in a way that for each method , several nodes are added to the graph , depending on the number of potential executing devices , one for each device .",
    "the modification process of the call graph is shown in the figure  [ fig : transformation ] .        the original graph is composed of three nodes , where the start and end nodes ( node 1 and 3 ) have to execute locally .",
    "assuming that there are two devices in spc in addition to the current mobile device , the node 2 is then duplicated two times - as often as the number of possible execution targets .",
    "the acomma decision engine partitions the graph using an aco algorithm that finds the shortest path between the start and end points of the graph .",
    "the choice of the first path shows the local execution of method 2 on device a , where the choice of the second and the third path represents the execution of method 2 on device b and device c respectively .    finding shortest path",
    "is done according to weights assigned to the edges of the graph .",
    "since the different devices can have different optimisation goals , to reach a consensus in the objective function , we apply a multi - objective decision - making process - illustrated by a bi - objective decision - making with the execution cost of the related method regarding cpu usage and execution time.to take dynamic offloading decisions based on the current state , the shortest path is calculated for each function / method call in the total graph .",
    "learning is one of the primary functions of dynamic systems - such as in sensor networks and mobile networks .",
    "it is mainly used for the establishment of a relevant situation and the adaptations to the environment . in existing spc",
    ", the learning process stays local .",
    "we argue that , when a mobile device takes a decision , this decision could benefit to the other devices nearby .    to distribute the local decisions , we rely on a sharing decision cache .",
    "the sharing decision cache between nearby devices makes collaborative decisions possible . in this learning - based decision - making process , the mobile devices in the same state and environmental conditions could perform offloading in the same way as their neighbours .",
    "moreover , even if the execution conditions are not exactly the same , in case of common applications , the decision is relevant enough .    to take collaborative decisions , the collaborative cache is created by merging local cache of nearby devices .",
    "they could receive and send respecting different dissemination , merging and invalidating policies . for receiving neighbour s local decisions ,",
    "we propose on - demand , periodical and on - change policies .",
    "using an on - demand method , a mobile device broadcasts a cache request to the nearby devices whenever needed . in the periodic method ,",
    "each mobile device periodically sends their decision caches to their neighbours without any concerns about their requirement .",
    "also , in the on - change method , the source device sends its decision cache whenever it is modified either by adding a new execution trail or deleting old ones .",
    "the merge could be done simply by adding the new executing trail at the end of the local cache .",
    "alternatively , another way is to implement a collaborative cache with unique rows by deleting the duplicate traces .",
    "creating a weighted cache is also an implementation available .",
    "the weight of each executing trace corresponds to the number of decisions already taken - implying that an already optimisation decision have more chance to be reselected . as cache invalidation policies , we propose periodic and on - change methods .",
    "while the offloading decisions highly depend on the current status of the mobile device itself and its environment , the cache could reset when these conditions change .    applying different combinations of these policies for",
    "cache management may greatly impact the performance of acomma for offloading using collaborative decision - making .",
    "to evaluate the performance of acomma , we first test micro - benchmarks mathematical functions : matrix determinant and integral - consuming enough resources to make offloading valuable .",
    "their small number of methods helps us to trace function call executions accurately . to be closer to real applications",
    ", we also implement macro - benchmarks with popular offloading applications of chess and face recognition including monte carlo and eigenfaces algorithms  @xcite .    as mobile devices",
    ", we use samsung galaxy sii with 1,2 ghz dual - core processor and 2 gb of memory running android version 4.1.2 ( jelly bean ) and asus google nexus 7 pad with quad - core 1.2 ghz processor and 1 gb of memory running android version 5.1.1 ( lollipop ) . to successfully validate collaborative offloading of acomma using spc",
    ", we need to show that acomma can detect the spc and correctly dispatch the methods of running application between detected nearby devices according to their processing power .",
    "to evaluate the efficiency of offloading onto the spc , we apply a scenario where a galaxy sii makes offloading onto an spc that consists in 2 galaxy sii and 3 google nexus 7 pads .",
    "we compare the performance of offloading onto this spc with offloading onto a macbook pro with 8 gb of memory , a 250 gb hard disk and a 2,53 ghz intel processor dual - core as a remote server .",
    "this server has os x 10.9.5 mavericks as operating system .",
    "the result shows that the local execution is rather slow - 1200ms for the monte carlo application , and offloading onto the macbook presents a significant gain in terms of execution time - 60 - 70ms  @xcite .",
    "offloading to the spc - less powerful than a remote cloud , but with a better latency - results in a less efficient execution time - 100ms , but interesting enough to test the benefit of a collaborative cache .",
    "coming to the evaluation of dispatching onto spc , we ran determinant and integral 10 times with a spc composed of four devices in addition to the source device . in this scenario , d1 , d2",
    ", d3 - google nexus pads - and d4 - samsung galaxy sii - are offloading destination devices .",
    "figures  [ fig : offloading](a ) and  [ fig : offloading](b ) show the percentage of successful offloading for each application method . considering the four methods of integral benchmark",
    ", the method d is never offloaded .",
    "considering the five methods of determinant , method b and method c were always executed locally .",
    "these are the methods that consume a negligible amount of resources , when offloading them impose more cost to the system compared to their local execution .",
    "figures  [ fig : dispatch](a ) and  [ fig : dispatch](b ) shows the offloading proportion and the contribution of each device to the offloading process .",
    "as expected , in most of the cases the device d4 has the lighter portion of execution as it is the less powerful device .",
    "the devices d1 , d2 and d3 that have the same hardware characteristics , have almost the same execution contribution , even if their loads are not exactly equal .",
    "these results show that acomma is really context- and application - aware to make multi - destination offloading and to dispatch the application methods between spc s members correctly .    to evaluate the sharing benefits , we compare the execution time of the different benchmarks between aco and string matching based on a local cache  @xcite and the collaborative cache .",
    "we evaluate the decision - making based on the collaborative cache with an on - changed dissemination policy , and a unique weighted cache merge policy ( the invalidating policy has been shown to have a neglectable impact on results  @xcite ) .",
    "we run determinant , integral , face detection and monte - carlo 10 times for two series of inputs on galaxy sii .",
    "first , the aco algorithm offloads and populates the local cache with maximum 10 rows .",
    "secondly , when the source device has finished its executions , we run the same application on destination devices while making the offloading decision using collaborative cache and a string matching algorithm .",
    "the results in figure  [ fig : collaborative - cache ] show that learning - based decision - making using a collaborative cache is more efficient than using a local cache .",
    "the gain in terms of execution time depends on the graph size .",
    "small applications - determinant and integral - presents 30 - 40% gain ( 10ms ) and more complex ones - face recognition and monte carlo - up to 60% ( 35ms ) .",
    "in this work , we propose the spontaneous proximity cloud concept to offload applications onto mobile devices in the vicinity .",
    "we enriched our ant - inspired bi - objective offloading middleware , acomma , with a learning - based decision - making using a collaborative resource and data cache sharing .",
    "we evaluate the performance of acomma in collaborative mode with real benchmarks - face recognition and monte - carlo algorithms - and achieve 50% execution time gain .",
    "several issues need further work . testing the robustness and",
    "the scalability of the offloading to the mobility and connection interferences is a major one .",
    "a balance between the caching cost - storage and network - and the better decision to take has to be carefully studied .",
    "cuervo , e. , balasubramanian , a. , cho , d.k .",
    ", wolman , a. , saroiu , s. , chandra , r. , bahl , p. : maui : making smartphones last longer with code offload . in : proceeding of mobisys",
    "10 , pp . 4962 .",
    "acm , new york , usa , ( 2010 )      gao , b. , he , l. , liu , l. , li , k. , jarvis , s. : from mobiles to clouds : developing energy - aware offloading strategies for workflows . in : proceeding of 13th international conference on grid computing ( grid ) ,",
    "acm / ieee , pp .",
    "139146 , ( 2012 )    giurgiu , i. , riva , o. , juric , d. , krivulev , i. , alonso , g. : calling the cloud : enabling mobile phones as interfaces to cloud applications . in : proceeding of middleware 09 ,",
    "volume 5896 , pp .",
    "springer , berlin / heidelberg , ( 2009 )    golchay , r. , le moul , f. , ponge , j. , stouls , n. : automated application offloading through ant - inspired decision - making . in : proceedings of the 13th international conference on new technologies in distributed systems ( notere2016 ) , ieee , ( 2016 ) .",
    "kosta , s. , aucinas , a. , hui , p. , mortier , r. , zhang , x. : thinkair : dynamic resource allocation and parallel execution in the cloud for mobile code offloading . in : proceedings of infocom , pp .",
    "945953 , ieee , ( 2012 )    miluzzo , e. , ceres , r.c . , chen , y.f .",
    ": vision : mclouds - computing on clouds of mobile devices . in : proceedings of the third acm workshop on mobile cloud computing and services , mcs 12 , pp .",
    "acm , new york , usa , ( 2012 )    mtibaa , a. , abu  snober , m. , carelli , a. , beraldi , r. , alnuweiri , h. : collaborative mobile - to - mobile computation offloading . in : proceedings of the international conference on collaborative computing : networking , applications and worksharing ( collaboratecom ) , pp .",
    "460465 , ( 2014 )    mtibaa , a. , fahim , a. , harras , k.a . ,",
    "ammar , m.h . : towards resource sharing in mobile device clouds : power balancing across mobile devices . in : proceedings of the second acm sigcomm workshop on mobile cloud computing , pp .",
    "43(4):5156 , ( 2013 )    penner , t. , johnson , a. , van  slyke , b. , guirguis , m. , gu , q. : transient clouds : assignment and collaborative execution of tasks on mobile devices . in : proceedings of globecom 14 ,",
    ". 28012806 .",
    "ieee , ( 2014 )"
  ],
  "abstract_text": [
    "<S> the base motivation of mobile cloud computing was empowering mobile devices by application offloading onto powerful cloud resources . </S>",
    "<S> however , this goal ca nt entirely be reached because of the high offloading cost imposed by the long physical distance between the mobile device and the cloud . to address this issue </S>",
    "<S> , we propose an application offloading onto a nearby mobile cloud composed of the mobile devices in the vicinity - a spontaneous proximity cloud . </S>",
    "<S> we introduce our proposed dynamic , ant - inspired , bi - objective offloading middleware - acomma , and explain its extension to perform a close mobile application offloading . with the learning - based offloading decision - making process of acomma , combined to the collaborative resource sharing </S>",
    "<S> , the mobile devices can cooperate for decision cache sharing . </S>",
    "<S> we evaluate the performance of acomma in collaborative mode with real benchmarks - face recognition and monte - carlo algorithms - and achieve 50% execution time gain . </S>"
  ]
}