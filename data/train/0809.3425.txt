{
  "article_text": [
    "in recent years , there has been increasing interest in the study of structures that can be presented by automata .",
    "the underlying idea is to apply techniques of automata theory to decision problems that arise in logic and applications such as databases and verification .",
    "a typical decision problem is the model checking problem : for a structure @xmath4 ( e.g.  a graph ) , design an algorithm that , given a formula @xmath5 in a formal system and a tuple @xmath6 from the structure , decides if @xmath7 is true in @xmath4 . in particular , when the formal system is the first order predicate logic or the monadic second order logic , we would like to know if the theory of the structure is decidable .",
    "fundamental early results in this direction by bchi ( @xcite , @xcite ) and rabin ( @xcite ) proved the decidability of the monadic second order theories of the successor on the natural numbers and of the binary tree . there have been numerous applications and extensions of these results in logic , algebra @xcite , verification and model checking @xcite @xcite , and databases @xcite . moreover , automatic structures provide a theoretical framework for constraint databases over discrete domains such as strings and trees @xcite . using simple closure properties and the decidability of the emptiness problem for automata",
    ", one can prove that the first order ( and monadic second order ) theories of some well - known structures are decidable .",
    "examples of such structures are presburger arithmetic and some of its extensions , the term algebra , the real numbers under addition , finitely generated abelian groups , and the atomless boolean algebra .",
    "direct proofs of these results , without the use of automata , require non - trivial technical work .",
    "a structure @xmath8 is * automatic * if the domain @xmath9 and all the relations @xmath10 of the structure are recognised by finite automata ( precise definitions are in the next section ) .",
    "independently , hodgson @xcite and later khoussainov and nerode @xcite proved that for any given automatic structure there is an algorithm that solves the model checking problem for the first order logic .",
    "in particular , the first order theory of the structure is decidable .",
    "blumensath and grdel proved a logical characterization theorem stating that automatic structures are exactly those definable in the fragment of arithmetic @xmath11 , where @xmath12 and @xmath13 have their usual meanings and @xmath14 is a weak divisibility predicate for which @xmath15 if and only if @xmath16 is a power of @xmath17 and divides @xmath18 ( see @xcite ) . in addition , for some classes of automatic structures there are characterization theorems that have direct algorithmic implications .",
    "for example , in @xcite , delhomm proved that automatic well - ordered sets are all strictly less than @xmath0 . using this characterization",
    ", @xcite gives an algorithm which decides the isomorphism problem for automatic well - ordered sets .",
    "the algorithm is based on extracting the cantor normal form for the ordinal isomorphic to the given automatic well - ordered set .",
    "another characterization theorem of this ilk gives that automatic boolean algebras are exactly those that are finite products of the boolean algebra of finite and co - finite subsets of @xmath19 @xcite .",
    "again , this result can be used to show that the isomorphism problem for automatic boolean algebras is decidable .",
    "another body of work is devoted to the study of resource - bounded complexity of the model checking problem for automatic structures . on the one hand ,",
    "grdel and blumensath ( @xcite ) constructed examples of automatic structures whose first order theories are non - elementary . on the other hand ,",
    "lohrey in @xcite proved that the first order theory of any automatic graph of bounded degree is elementary .",
    "it is noteworthy that when both a first order formula @xmath20 and an automatic structure @xmath4 are fixed , determining if a tuple @xmath6 from @xmath4 satisfies @xmath5 can be done in linear time .",
    "there are also feasible time bounds on deciding the first order theories of automatic structures over the unary alphabet ( @xcite , @xcite ) .",
    "most current results demonstrate that automatic structures are not complex in various concrete senses .",
    "however , in this paper we use well - established concepts from both logic and model theory to prove results in the opposite direction .",
    "we now briefly describe the measures of complexity we use ( ordinal heights of well - founded relations , scott ranks of structures , and cantor - bendixson ranks of trees ) and connect them with the results of this paper .",
    "a relation @xmath21 is called * well - founded * if there is no infinite sequence @xmath22 such that @xmath23 for @xmath24 . in computer science , well - founded relations are of interest due to a natural connection between well - founded sets and terminating programs .",
    "we say that a program is * terminating * if every computation from an initial state is finite .",
    "this is equivalent to well - foundedness of the collection of states reachable from the initial state , under the reachability relation @xcite .",
    "the * ordinal height * is a measure of the depth of well - founded relations .",
    "since all automatic structures are also computable structures , the obvious bound for ordinal heights of automatic well - founded relations is @xmath25 ( the first non - computable ordinal ) . sections [ s : ranksoforders ] and [ s : rankswf ] study the sharpness of this bound .",
    "theorem [ thm : orderrank ] characterizes automatic well - founded partial orders in terms of their ( relatively low ) ordinal heights , whereas theorem [ thm : heightrank ] shows that @xmath25 is the sharp bound in the general case .",
    "[ thm : orderrank ] for each ordinal @xmath2 , @xmath2 is the ordinal height of an automatic well - founded partial order if and only if @xmath26 .",
    "[ thm : heightrank ] for each ( computable ) ordinal @xmath27 , there is an automatic well - founded relation @xmath4 with ordinal height greater than @xmath2 .",
    "section [ s : sr ] is devoted to building automatic structures with high scott ranks .",
    "the concept of scott rank comes from a well - known theorem of scott stating that for every countable structure @xmath4 there exists a sentence @xmath20 in @xmath28-logic which characterizes @xmath4 up to isomorphism @xcite .",
    "the minimal quantifier rank of such a formula is called the scott rank of @xmath4 . a known upper bound on the scott rank of computable structures",
    "implies that the scott rank of automatic structures is at most @xmath29 .",
    "but , until now , all the known examples of automatic structures had low scott ranks .",
    "results in @xcite , @xcite , @xcite suggest that the scott ranks of automatic structures could be bounded by small ordinals .",
    "this intuition is falsified in section [ s : sr ] with the theorem :    [ thm : scottrank ] for each computable ordinal @xmath2 there is an automatic structure of scott rank at least @xmath2 .    in particular , this theorem gives a new proof that the isomorphism problem for automatic structures is @xmath30-complete ( another proof may be found in @xcite ) .    in the last section ,",
    "we investigate the cantor - bendixson ranks of automatic trees .",
    "a * partial order tree * is a partially ordered set @xmath31 such that there is a @xmath13-minimal element of @xmath32 , and each subset @xmath33 is finite and is linearly ordered under @xmath13 .",
    "a * successor tree * is a pair @xmath34 such that the reflexive and transitive closure @xmath35 of @xmath36 produces a partial order tree @xmath37 .",
    "the * derivative * of a tree @xmath38 is obtained by removing all the nonbranching paths of the tree .",
    "one applies the derivative operation to @xmath38 successively until a fixed point is reached .",
    "the minimal ordinal that is needed to reach the fixed point is called the * cantor - bendixson ( cb ) rank * of the tree .",
    "the cb rank plays an important role in logic , algebra , and topology .",
    "informally , the cb rank tells us how far the structure is from algorithmically ( or algebraically ) simple structures .",
    "again , the obvious bound on @xmath39 ranks of automatic successor trees is @xmath25 . in @xcite",
    ", it is proved that the cb rank of any automatic partial order tree is finite and can be computed from the automaton for the @xmath13 relation on the tree .",
    "it has been an open question whether the cb ranks of automatic successor trees can also be bounded by small ordinals .",
    "we answer this question in the following theorem .    [",
    "thm : rectrees ] for @xmath40 there is an automatic successor tree of cb rank @xmath2 .",
    "the main tool we use to prove results about high ranks is the configuration spaces of turing machines , considered as automatic graphs .",
    "it is important to note that graphs which arise as configuration spaces have very low model - theoretic complexity : their scott ranks are at most @xmath41 , and if they are well - founded then their ordinal heights are at most @xmath19 ( see propositions [ ppn : configwf ] and [ ppn : configscott ] ) .",
    "hence , the configuration spaces serve merely as building blocks in the construction of automatic structures with high complexity , rather than contributing materially to the high complexity themselves .",
    "we thank moshe vardi who posed the question about ranks of automatic well - founded relations .",
    "we also thank anil nerode and frank stephan with whom we discussed scott and cantor - bendixson ranks of automatic structures .",
    "a ( relational ) * vocabulary * is a finite sequence @xmath42 , where each @xmath43 is a predicate symbol of arity @xmath44 , and each @xmath45 is a constant symbol .",
    "a * structure * with this vocabulary is a tuple @xmath46 , where @xmath47 and @xmath48 are interpretations of the symbols of the vocabulary .",
    "when convenient , we may omit the superscripts @xmath4 .",
    "we only consider infinite structures , that is , those whose universe is an infinite set .",
    "to establish notation , we briefly recall some definitions associated with finite automata .",
    "a * finite automaton * @xmath49 over an alphabet @xmath50 is a tuple @xmath51 , where @xmath36 is a finite set of * states * , @xmath52 is the * initial state * , @xmath53 is the * transition table * , and @xmath54 is the set of * final states*. a * computation * of @xmath4 on a word @xmath55 ( @xmath56 ) is a sequence of states , say @xmath57 , such that @xmath58 and @xmath59 for all @xmath60 . if @xmath61 , then the computation is * successful * and we say that the automaton @xmath49 * accepts * the word @xmath55 .",
    "the * language * accepted by the automaton @xmath49 is the set of all words accepted by @xmath49 . in general",
    ", @xmath62 is * finite automaton recognisable * , or * regular * , if @xmath63 is the language accepted by some finite automaton  @xmath49 .    to define automaton recognisable relations",
    ", we use @xmath64-variable ( or @xmath64-tape ) automata . an * @xmath64tape automaton *",
    "can be thought of as a one - way turing machine with @xmath64 input tapes @xcite .",
    "each tape is regarded as semi - infinite , having written on it a word over the alphabet @xmath50 followed by an infinite succession of blanks ( denoted by @xmath65 symbols ) .",
    "the automaton starts in the initial state , reads simultaneously the first symbol of each tape , changes state , reads simultaneously the second symbol of each tape , changes state , etc . , until it reads a blank on each tape .",
    "the automaton then stops and accepts the @xmath64tuple of words if it is in a final state .",
    "the set of all @xmath64tuples accepted by the automaton is the relation recognised by the automaton .",
    "formally , an @xmath64tape automaton on @xmath50 is a finite automaton over the alphabet @xmath66 , where @xmath67 and @xmath68 .",
    "the * convolution of a tuple * @xmath69 is the string @xmath70 of length @xmath71 over the alphabet @xmath66 which is defined as follows .",
    "its @xmath72th symbol is @xmath73 where @xmath74 is the @xmath72th symbol of @xmath75 if @xmath76 and @xmath65 otherwise .",
    "the * convolution of a relation * @xmath77 is the language @xmath78 formed as the set of convolutions of all the tuples in @xmath21 .",
    "an @xmath64ary relation @xmath79 is * finite automaton recognisable * , or * regular * , if its convolution @xmath80 is recognisable by an @xmath64tape automaton .",
    "[ dfn : automatic ] a structure @xmath81 is * automatic * over @xmath50 if its domain @xmath9 and all relations @xmath82 , @xmath83 , @xmath84 , @xmath85 are regular over @xmath50 . if @xmath86 is isomorphic to an automatic structure @xmath4 then we call @xmath4 an * automatic presentation * of @xmath86 and say that @xmath86 is * automatically presentable*.    the configuration graph of any turing machine is an example of an automatic structure . the graph is defined by letting the configurations of the turing machine be the vertices , and putting an edge from configuration @xmath87 to configuration @xmath88 if the machine can make an instantaneous move from @xmath87 to @xmath88 .",
    "examples of automatically presentable structures are @xmath89 , @xmath90 , @xmath91 , @xmath92 , the order on the rationals @xmath93 , and the boolean algebra of finite and co - finite subsets of @xmath94 . in the following , we abuse terminology and identify the notions of automatic  and automatically presentable  .",
    "many examples of automatic structures can be formed using the @xmath19-fold disjoint union of a structure @xmath4 ( the disjoint union of @xmath19 many copies of @xmath4 ) .",
    "@xcite[lm : omega - fold ] if @xmath4 is automatic then its @xmath19-fold disjoint union is isomorphic to an automatic structure .",
    "suppose that @xmath95 is automatic .",
    "define @xmath96 by @xmath97 it is clear that @xmath98 is automatic and is isomorphic to the @xmath19-fold disjoint union of @xmath4 .",
    "the class of automatic structures is a proper subclass of the computable structures .",
    "we therefore mention some crucial definitions and facts about computable structures .",
    "good references for the theory of computable structures include @xcite , @xcite .    a * computable structure * is @xmath99 whose domain and relations are all computable .",
    "the domains of computable structures can always be identified with the set @xmath19 of natural numbers . under this assumption ,",
    "we introduce new constant symbols @xmath100 for each @xmath101 and interpret @xmath100 as @xmath64 .",
    "we expand the vocabulary of each structure to include these new constants @xmath102 . in this context",
    ", @xmath4 is computable if and only if the * atomic diagram * of @xmath4 ( the set of gdel numbers of all quantifier - free sentences in the extended vocabulary that are true in @xmath4 ) is a computable set .",
    "if @xmath4 is computable and @xmath86 is isomorphic to @xmath4 then we say that @xmath4 is a * computable presentation * of @xmath86 .",
    "note that if @xmath86 has a computable presentation then @xmath86 has @xmath19 many computable presentations . in this paper",
    ", we will be coding computable structures into automatic ones .",
    "the ranks that we use to measure the complexity of automatic structures take values in the ordinals . in particular",
    ", we will see that only a subset of the countable ordinals will play an important role .",
    "an ordinal is called * computable * if it is the order - type of a computable well - ordering of the natural numbers .",
    "the least ordinal which is not computable is denoted @xmath25 ( after church and kleene ) .",
    "in this section we consider structures @xmath103 with a single binary relation .",
    "an element @xmath16 is said to be * @xmath21-minimal for a set @xmath104 * if for each @xmath105 , @xmath106 .",
    "the relation @xmath21 is said to be * well - founded * if every non - empty subset of @xmath9 has an @xmath21-minimal element .",
    "this is equivalent to saying that @xmath107 has no infinite chains @xmath108 where @xmath109 for all @xmath110 .",
    "a * ranking function * for @xmath4 is an ordinal - valued function @xmath111 such that @xmath112 whenever @xmath113 .",
    "if @xmath111 is a ranking function on @xmath4 , let @xmath114 .",
    "the structure @xmath4 is well - founded if and only if @xmath4 admits a ranking function .",
    "the * ordinal height * of @xmath4 , denoted @xmath115 , is the least ordinal @xmath2 which is @xmath116 for some ranking function @xmath117 on @xmath4 .",
    "an equivalent definition for the rank of @xmath4 is the following .",
    "we define the function @xmath118 by induction : for the @xmath21-minimal elements @xmath16 , set @xmath119 ; for @xmath120 not @xmath21-minimal , put @xmath121 .",
    "then @xmath118 is a ranking function admitted by @xmath4 and @xmath122 . for @xmath123 ,",
    "we write @xmath124 for the ordinal height of the structure obtained by restricting the relation @xmath21 to the subset @xmath125 .",
    "[ lm : comprank ] if @xmath126 , there is a computable well - founded relation of ordinal height @xmath2 .",
    "this lemma is trivial : the ordinal height of an ordinal @xmath2 is @xmath2 itself .",
    "since all computable ordinals are computable and well - founded relations , we are done .",
    "the next lemma follows easily from the well - foundedness of ordinals and of @xmath21 .",
    "the proof is left to the reader .",
    "[ lm : witnessrank ] for a structure @xmath103 where @xmath21 is well - founded , if @xmath127 and @xmath128 then there is an @xmath129 such that @xmath130 .    for the remainder of this section , we assume further that @xmath21 is a partial order . for convenience , we write @xmath13 instead of @xmath21",
    "thus , we consider automatic well - founded partial orders @xmath131 .",
    "we will use the notion of * natural sum of ordinals*. the natural sum of ordinals @xmath132 ( denoted @xmath133 ) is defined recursively : @xmath134 , @xmath135 , and @xmath133 is the least ordinal strictly greater than @xmath136 for all @xmath137 and strictly greater than @xmath138 for all @xmath139 .",
    "let @xmath140 and @xmath141 be disjoint subsets of @xmath9 such that @xmath142 . consider the partially ordered sets @xmath143 and @xmath144 obtained by restricting @xmath13 to @xmath140 and @xmath141 respectively .",
    "then , @xmath145 , where @xmath146 .",
    "we will show that there is a ranking function on @xmath9 whose range is contained in the ordinal @xmath147 . for each @xmath148 consider the partially ordered sets @xmath149 and @xmath150 obtained by restricting @xmath13 to @xmath151 and @xmath152 , respectively .",
    "define @xmath153 .",
    "we claim that @xmath111 is a ranking function .",
    "indeed , assume that @xmath154 .",
    "then , since @xmath13 is transitive , it must be the case that @xmath155 and @xmath156",
    ". therefore , @xmath157 and @xmath158 .",
    "at least one of these inequalities must be strict . to see this ,",
    "assume that @xmath159 ( the case @xmath160 is similar ) .",
    "then since @xmath161 , it is the case that @xmath162 by the definition of ranks",
    ". therefore , we have that @xmath163 .",
    "moreover , the image of @xmath164 is contained in @xmath147 .",
    "[ cr : partitionrank ] if @xmath165 and @xmath142 , where @xmath166 , then either @xmath167 or @xmath168 .",
    "khoussainov and nerode @xcite show that , for each @xmath64 , there is an automatic presentation of the ordinal @xmath169 .",
    "it is clear that such a presentation has ordinal height @xmath169 .",
    "the next theorem proves that @xmath0 is the sharp bound on ranks of all automatic well - founded partial orders .",
    "once corollary [ cr : partitionrank ] has been established , the proof of theorem [ thm : orderrank ] follows delhomm @xcite and rubin @xcite . + * theorem [ thm : orderrank ] .  *",
    "_ for each ordinal @xmath2 , @xmath2 is the ordinal height of an automatic well - founded partial order if and only if @xmath26 . _",
    "one direction of the proof is clear . for the other , assume for a contradiction that there is an automatic well - founded partial order @xmath170 with @xmath171 .",
    "let @xmath172 and @xmath173 be finite automata over @xmath50 recognizing @xmath9 and @xmath13 ( respectively ) . by lemma [ lm : witnessrank ] , for each @xmath174 there is @xmath175 such that @xmath176 .",
    "for each @xmath177 we define the set @xmath178 note that if @xmath179 is a limit ordinal then @xmath180 . we define a finite partition of @xmath181 in order to apply corollary [ cr : partitionrank ] .",
    "to do so , for @xmath182 , define @xmath183 .",
    "each set of the form @xmath181 can then be partitioned based on the prefixes of words as follows : @xmath184 ( all the unions above are finite and disjoint . ) hence , applying corollary [ cr : partitionrank ] , for each @xmath185 there exists a @xmath186 such that @xmath187 and @xmath188 .",
    "on the other hand , we use the automata to define the following equivalence relation on pairs of words of equal lengths : @xmath189 there are at most @xmath190 equivalence classes .",
    "thus , the infinite sequence @xmath191 , @xmath192 , @xmath84 contains @xmath193 , @xmath64 such that @xmath194 and @xmath195 .",
    "[ lm : isoxvu ] for any @xmath196 , if @xmath197 then @xmath198 .    to prove the lemma ,",
    "consider @xmath199 defined as @xmath200 . from the equivalence relation",
    ", we see that @xmath117 is well - defined , bijective , and order preserving .",
    "hence @xmath201 ( as partial orders ) .",
    "therefore , @xmath198 .    by lemma [ lm : isoxvu ] , @xmath202 , a contradiction with the assumption that @xmath194 .",
    "therefore , there is no automatic well - founded partial order of ordinal height greater than or equal to @xmath203 .",
    "in the forthcoming constructions , we embed computable structures into automatic ones via configuration spaces of turing machines .",
    "this subsection provides terminology and background for these constructions .",
    "let @xmath49 be an @xmath64-tape deterministic turing machine .",
    "the * configuration space * of @xmath49 , denoted by @xmath204 , is a directed graph whose nodes are configurations of @xmath49 .",
    "the nodes are @xmath64-tuples , each of whose coordinates represents the contents of a tape .",
    "each tape is encoded as @xmath205 , where @xmath206 are the symbols on the tape before and after the location of the read / write head , and @xmath207 is one of the states of @xmath49 .",
    "the edges of the graph are all the pairs of the form @xmath208 such that there is an instruction of @xmath49 that transforms @xmath209 to @xmath210 .",
    "the configuration space is an automatic graph .",
    "the out - degree of every vertex in @xmath204 is @xmath211 ; the in - degree need not be @xmath211 .",
    "a deterministic turing machine @xmath49 is * reversible * if @xmath204 consists only of finite chains and chains of type @xmath19 .",
    "@xcite [ lm : reverse ] for any deterministic @xmath211-tape turing machine there is a reversible @xmath41-tape turing machine which accepts the same language .",
    "( sketch ) given a deterministic turing machine , define a @xmath41-tape turing machine with a modified set of instructions .",
    "the modified instructions have the property that neither the domains nor the ranges overlap .",
    "the first tape performs the computation exactly as the original machine would have done .",
    "as the new machine executes each instruction , it stores the index of the instruction on the second tape , forming a history . once the machine enters a state which would have been halting for the original machine , the output of the computation is copied onto the third tape .",
    "then , the machine runs the computation backwards and erases the history tape .",
    "the halting configuration contains the input on the first tape , blanks on the second tape , and the output on the third tape .",
    "we establish the following notation for a @xmath41-tape reversible turing machine @xmath49 given by the construction in this lemma .",
    "a * valid initial configuration * of @xmath49 is of the form @xmath212 , where @xmath16 in the domain , @xmath213 is the empty string , and @xmath214 is the initial state of @xmath49 . from the proof of lemma [ lm : reverse ] , observe that a * final ( halting ) * configuration is of the form @xmath215 , with @xmath216 a halting state of @xmath49 .",
    "also , because of the reversibility assumption , all the chains in @xmath204 are either finite or @xmath19-chains ( the order type of the natural numbers ) .",
    "in particular , this means that @xmath204 is well - founded .",
    "we call an element of in - degree @xmath217 a * base * ( of a chain ) . the set of valid initial or final configurations is regular .",
    "we classify the components ( chains ) of @xmath204 as follows :    * * terminating computation chains * : finite chains whose base is a valid initial configuration ; that is , one of the form @xmath218 , for @xmath219 . * * non - terminating computation chains * : infinite chains whose base is a valid initial configuration . *",
    "* unproductive chains * : chains whose base is not a valid initial configuration .",
    "configuration spaces of reversible turing machines are locally finite graphs ( graphs of finite degree ) and well - founded .",
    "hence , the following proposition guarantees that their ordinal heights are small .    [ ppn : configwf ] if @xmath220 is a locally finite graph then @xmath221 is well - founded and the ordinal height of @xmath221 is not above @xmath19 , or @xmath221 has an infinite chain .",
    "suppose @xmath222 is a locally finite graph and @xmath221 is well - founded .",
    "for a contradiction , suppose @xmath223 .",
    "then there is @xmath224 with @xmath225 . by definition , @xmath226 .",
    "but , this implies that there are infinitely many elements @xmath221-below @xmath227 , a contradiction with local finiteness of @xmath222 .",
    "we are now ready to prove that @xmath25 is the sharp bound for ordinal heights of automatic well - founded relations .",
    "* theorem [ thm : heightrank ] .  *",
    "_ for each computable ordinal @xmath27 , there is an automatic well - founded relation @xmath4 with ordinal height greater than @xmath2 _",
    "the proof of the theorem uses properties of turing machines and their configuration spaces .",
    "we take a computable well - founded relation whose ordinal height is @xmath2 , and ",
    "embed \" it into an automatic well - founded relation with similar ordinal height .    by lemma [ lm : comprank ] , let @xmath228 be a computable well - founded relation of ordinal height @xmath2 . we assume without loss of generality that @xmath229 for some finite alphabet @xmath50",
    "let @xmath49 be the turing machine computing the relation @xmath230 . on each pair @xmath231 from the domain ,",
    "@xmath49 halts and outputs yes  or no  . by lemma",
    "[ lm : reverse ] , we can assume that @xmath49 is reversible .",
    "recall that @xmath232 is an automatic graph .",
    "we define the domain of our automatic structure to be @xmath233 .",
    "the binary relation of the automatic structure is : @xmath234 intuitively , the structure @xmath107 is a stretched out version of @xmath235 with infinitely many finite pieces extending from elements of @xmath236 , and with disjoint pieces which are either finite chains or chains of type @xmath19 .",
    "the structure @xmath107 is automatic because its domain is a regular set of words and the relation @xmath21 is recognisable by a @xmath17-tape automaton .",
    "we should verify , however , that @xmath21 is well - founded .",
    "let @xmath237 .",
    "if @xmath238 then since @xmath239 is well - founded , there is @xmath240 which is @xmath230-minimal .",
    "the only possible elements @xmath241 in @xmath242 for which @xmath243 are those which lie on computation chains connecting some @xmath244 with @xmath16 .",
    "since each such computation chain is finite , there is an @xmath21-minimal @xmath241 below @xmath16 on each chain .",
    "any such @xmath241 is @xmath21-minimal for @xmath242 . on the other hand , if @xmath245 , then @xmath242 consists of disjoint finite chains and chains of type @xmath19 .",
    "any such chain has a minimal element , and any of these elements are @xmath21-minimal for @xmath242 .",
    "therefore , @xmath107 is an automatic well - founded structure .",
    "we now consider the ordinal height of @xmath107 .",
    "for each element @xmath246 , an easy induction on @xmath247 , shows that @xmath248 .",
    "we denote by @xmath249 the ( finite ) length of the computation chain of @xmath49 with input @xmath250 . for any element @xmath251 in the computation chain which represents the computation of @xmath49 determining whether @xmath252 , we have   @xmath253 .   for any element @xmath241 in an unproductive chain of the configuration space , @xmath254 .",
    "therefore , since @xmath255 ,   @xmath256 .",
    "the scott rank of a structure is introduced in the proof of scott s isomorphism theorem @xcite . since then",
    ", variants of the scott rank have been used in the computable model theory literature . here",
    "we follow the definition of scott rank from @xcite .    for structure @xmath4 and tuples @xmath257 ( of equal length ) ,",
    "define    * @xmath258 if @xmath259 satisfy the same quantifier - free formulas in the language of @xmath4 ; * for @xmath260 , @xmath261 if for all @xmath128 , for each @xmath262 ( of arbitrary length ) there is @xmath263 such that @xmath264 ; and for each @xmath263 ( of arbitrary length ) there is @xmath262 such that @xmath264 .",
    "then , the * scott rank * of the tuple @xmath6 , denoted by @xmath265 , is the least @xmath266 such that for all @xmath267 , @xmath268 implies that @xmath269 . finally , the scott rank of @xmath4 , denoted by @xmath270 , is the least @xmath2 greater than the scott ranks of all tuples of @xmath4 .",
    "@xmath271 , @xmath272 , and @xmath273 .",
    "configuration spaces of reversible turing machines are locally finite graphs . by the proposition",
    "below , they all have low scott rank .    [",
    "ppn : configscott ] if @xmath274 is a locally finite graph , @xmath275 .",
    "the neighbourhood of diameter @xmath64 of a subset @xmath276 , denoted @xmath277 , is defined as follows : @xmath278 and @xmath279 is the set of @xmath280 which can be reached from @xmath276 by @xmath64 or fewer edges .",
    "the proof of the proposition relies on two lemmas .",
    "[ lm : configscott_1 ] let @xmath281 be such that @xmath282 . then for all @xmath64 , there is a bijection of the @xmath64-neighbourhoods around @xmath259 which sends @xmath6 to @xmath283 and which respects @xmath221 .    for a given @xmath64 , let @xmath284 .",
    "note that @xmath262 is a finite tuple because of the local finiteness condition .",
    "since @xmath282 , there is @xmath263 such that @xmath285 . if @xmath286 , we are done .",
    "two set inclusions are needed .",
    "first , we show that @xmath287 . by definition",
    ", we have that @xmath288 , and let @xmath289 witness this .",
    "then since @xmath285 , there are @xmath290 such that @xmath291 .",
    "in particular , we have that if @xmath292 , then also @xmath293 ( and likewise if the @xmath221 relation is in the other direction ) . hence , @xmath287 .",
    "conversely , suppose @xmath294 .",
    "let @xmath295 be witnesses and this will let us find a new element of @xmath296 which is not in @xmath262 , a contradiction .",
    "[ lm : configscott_2 ] let @xmath297 be a graph .",
    "suppose @xmath281 are such that for all @xmath64 , @xmath298 .",
    "then there is an isomorphism between the component of @xmath222 containing @xmath6 and that containing @xmath283 which sends @xmath6 to @xmath283 .",
    "we consider a tree of partial isomorphisms of @xmath222 .",
    "the nodes of the tree are bijections from @xmath296 to @xmath299 which respect the relation @xmath221 and map @xmath6 to @xmath283 .",
    "node @xmath111 is the child of node @xmath117 in the tree if @xmath300 , @xmath301 and @xmath302 .",
    "note that the root of this tree is the map which sends @xmath6 to @xmath283 .",
    "moreover , the tree is finitely branching and is infinite by lemma [ lm : configscott_1 ] .",
    "therefore , knig s lemma gives an infinite path through this tree .",
    "the union of all partial isomorphisms along this path is the required isomorphism .    to prove the proposition",
    ", we note that for any @xmath259 in @xmath303 such that @xmath282 , lemmas [ lm : configscott_1 ] and [ lm : configscott_2 ] yield an isomorphism from the component of @xmath6 to the component of @xmath283 that maps @xmath6 to @xmath283 . hence ,",
    "if @xmath282 , there is an automorphism of @xmath222 that maps @xmath6 to @xmath283 .",
    "therefore , for each @xmath304 , @xmath305 , so @xmath275 .",
    "let @xmath306 be a computable structure . recall that since @xmath236 is a computable set , we may assume it is @xmath307 for some finite alphabet @xmath50 .",
    "we construct an automatic structure @xmath4 whose scott rank is ( close to ) the scott rank of @xmath308 .",
    "since the domain of @xmath308 is computable , we assume that @xmath309 for some finite @xmath50 .",
    "the construction of @xmath4 involves connecting the configuration spaces of turing machines computing relations @xmath310 .",
    "note that proposition [ ppn : configscott ] suggests that the high scott rank of the resulting automatic structure is the main part of the construction because it is not provided by the configuration spaces themselves .",
    "the construction in some sense expands @xmath308 into an automatic structure .",
    "we comment that expansions do not necessarily preserve the scott rank .",
    "for example , any computable structure , @xmath308 , has an expansion with scott rank @xmath17 .",
    "the expansion is obtained by adding the successor relation into the signature .",
    "we detail the construction for @xmath311 .",
    "let @xmath312 be a turing machine for @xmath311 . by a simple modification of the machine",
    "we assume that @xmath312 halts if and only if its output is yes  . by lemma [ lm :",
    "reverse ] , we can also assume that @xmath312 is reversible .",
    "we now modify the configuration space @xmath313 so as to respect the isomorphism type of @xmath308 .",
    "this will ensure that the construction ( almost ) preserves the scott rank of @xmath308 .",
    "we use the terminology from subsection [ s : config ] .    *",
    "smoothing out unproductive parts*. the length and number of unproductive chains is determined by the machine @xmath312 and hence may differ even for turing machines computing the same set . in this stage , we standardize the format of this unproductive part of the configuration space .",
    "we wish to add enough redundant information in the unproductive section of the structure so that if two given computable structures are isomorphic , the unproductive parts of the automatic representations will also be isomorphic .",
    "we add @xmath19-many chains of length @xmath64 ( for each @xmath64 ) and @xmath19-many copies of @xmath19 .",
    "this ensures that the ( smoothed ) unproductive section of the configuration space of any turing machine will be isomorphic and preserves automaticity .",
    "we comment that adding this redundancy preserves automaticity since the operation is a disjoint union of automatic structures .",
    "* smoothing out lengths of computation chains*. we turn our attention to the chains which have valid initial configurations at their base .",
    "the length of each finite chain denotes the length of computation required to return a yes  answer .",
    "we will smooth out these chains by adding fans  to each base . for this",
    ", we connect to each base of a computation chain a structure which consists of @xmath19 many chains of each finite length .",
    "to do so we follow rubin @xcite : consider the structure whose domain is @xmath314 and whose relation is given by @xmath315 if and only if @xmath316 and @xmath18 is the least lexicographic successor of @xmath16 .",
    "this structure has a finite chain of every finite length . as in lemma",
    "[ lm : omega - fold ] , we take the @xmath19-fold disjoint union of the structure and identify the bases of all the finite chains .",
    "we get a fan  with infinitely many chains of each finite size whose base can be identified with a valid initial computation state .",
    "also , the fan has an infinite component if and only if @xmath311 does not hold of the input tuple corresponding to the base .",
    "the result is an automatic graph , @xmath317 , which extends @xmath313 .    *",
    "connecting domain symbols to the computations of the relation*. we apply the construction above to each @xmath311 in the signature of @xmath308 . taking the union of the resulting automatic graphs and adding vertices for the domain",
    ", we have the structure @xmath318 ( where we assume that the @xmath319 are disjoint ) .",
    "we assume without loss of generality that each @xmath312 has a different initial state , and denote it by @xmath320 .",
    "we add @xmath64 predicates @xmath321 to the signature of the automatic structure connecting the elements of the domain of @xmath308 with the computations of the relations @xmath311 : @xmath322 note that for @xmath323 , @xmath324 if and only if @xmath325 holds and all @xmath326 chains emanating from @xmath327 are finite .",
    "we have built the automatic structure @xmath328 two technical lemmas are used to show that the scott rank of @xmath4 is close to @xmath2 :    [ lm : equivtransfer ] for @xmath329 in the domain of @xmath308 and for ordinal @xmath2 , if @xmath330 then @xmath331 .",
    "let @xmath332 .",
    "we prove the stronger result that for any ordinal @xmath2 , and for all @xmath333 and @xmath334 , if the following assumptions hold    1 .",
    "[ asmp : c]@xmath330 ; 2 .",
    "[ asmp : i]@xmath335 ( hence the substructures in @xmath9 are isomorphic ) with @xmath336 ; and 3 .",
    "[ asmp : e]for each @xmath337 , each @xmath338 and each subsequence of indices of length @xmath339 , @xmath340    then @xmath341 . the lemma follows if we take @xmath342 ( the empty string ) .",
    "we show the stronger result by induction on @xmath2 . if @xmath343 , we need to show that for each @xmath344 , @xmath345 and that @xmath346 the first statement follows by assumption [ asmp : i ] , since the isomorphism must preserve the @xmath326 relations and maps @xmath347 to @xmath348 .",
    "the second statement follows by assumption [ asmp : e ] .",
    "assume now that @xmath349 and that the result holds for all @xmath128 .",
    "let @xmath333 and @xmath350 be such that the assumptions of the lemma hold .",
    "we will show that @xmath341 .",
    "let @xmath128 and suppose @xmath351 . by assumption",
    "[ asmp : c ] , there is @xmath352 such that @xmath353 . by the construction ( in particular , the smoothing steps )",
    ", we can find a corresponding @xmath354 such that assumptions [ asmp : i ] , [ asmp : e ] hold . applying the inductive hypothesis",
    ", we get that @xmath355 .",
    "analogously , given @xmath356 we can find the necessary @xmath357",
    ". therefore , @xmath358 .",
    "[ lm : crankhigher ] if @xmath359 , there is @xmath360 with @xmath361 .",
    "we use the notation @xmath362 to mean the subset of @xmath363 which corresponds to elements on fans associated with productive chains of the configuration space .",
    "we write @xmath364 to mean the subset of @xmath104 which corresponds to the unproductive chains of the configuration space .",
    "therefore , @xmath365 , a disjoint union .",
    "thus , we will show that for each @xmath323 , @xmath366 , @xmath367 there is @xmath360 such that @xmath361 .    given @xmath368 , let @xmath360 be a minimal element satisfying that @xmath369 and that @xmath370 .",
    "then we will show that @xmath371 is the desired witness .",
    "first , we observe that since the unproductive part of the structure is disconnected from the productive elements we can consider the two independently .",
    "moreover , because the structure of the unproductive part is predetermined and simple , for @xmath372 , if @xmath373 then @xmath374 . it remains to consider the productive part of the structure .",
    "consider any @xmath375 , @xmath376 satisfying @xmath377 .",
    "we claim that @xmath378 .",
    "it suffices to show that for all @xmath2 , for all @xmath379 , @xmath380 this is sufficient for the following reason . if @xmath381 then @xmath382 and hence @xmath383 . from this automorphism",
    ", we can define an automorphism of @xmath4 mapping @xmath384 to @xmath385 because @xmath386 and hence for each @xmath110 , the relative positions of @xmath387 and @xmath388 in the fans above @xmath389 and @xmath390 are isomorphic . therefore , @xmath391 .",
    "so , we now show that for all @xmath2 , for all @xmath379 , @xmath392 implies that @xmath393 .",
    "we proceed by induction on @xmath2 . for @xmath343 ,",
    "suppose that @xmath394 .",
    "this implies that for each @xmath110 and for each subsequence of length @xmath339 of the indices , the @xmath326-fan above @xmath395 has an infinite chain if and only if the @xmath326-fan above @xmath396 does .",
    "therefore , @xmath397 if and only if @xmath398 .",
    "hence , @xmath399 , as required . for the inductive step ,",
    "we assume the result holds for all @xmath128 .",
    "suppose that @xmath392 .",
    "let @xmath128 and @xmath400 .",
    "then @xmath401 so by definition there is @xmath402 such that @xmath403 .",
    "however , since @xmath404 , @xmath405 must be empty ( elements in @xmath406 can not be @xmath211-equivalent to elements in @xmath362 ) . then by the induction hypothesis , @xmath407 .",
    "the argument works symmetrically if we are given @xmath263 and want to find @xmath262 .",
    "thus , @xmath393 , as required .",
    "putting lemmas [ lm : equivtransfer ] and [ lm : crankhigher ] together , we can prove the main result about our construction .",
    "[ thm : sr ] let @xmath308 be a computable structure and construct the automatic structure @xmath4 from it as above",
    ". then @xmath408 .",
    "let @xmath409 be a tuple in the domain of @xmath308 .",
    "then , by the definition of scott rank , @xmath410 is the least ordinal @xmath2 such that for all @xmath411 , @xmath412 implies that @xmath413 ; and similarly for @xmath414 .",
    "we first show that @xmath415 .",
    "suppose @xmath416 .",
    "we assume for a contradiction that @xmath417 .",
    "consider an arbitrary @xmath375 ( the domain of @xmath308 ) such that @xmath418 . by lemma [ lm : equivtransfer ] ,",
    "but , the definition of @xmath420 as the scott rank of @xmath409 in @xmath4 implies that @xmath421",
    ". now , @xmath308 is @xmath422 definable in @xmath4 and therefore inherits the isomorphism .",
    "hence , @xmath423 .",
    "but , this implies that @xmath424 , a contradiction .",
    "so far , we have that for each @xmath323 , @xmath415 . hence , since @xmath425 , @xmath426    in the other direction",
    ", we wish to show that @xmath427 .",
    "suppose this is not the case .",
    "then there is @xmath428 such that @xmath429 . by lemma [ lm : crankhigher ]",
    ", there is @xmath360 such that @xmath430 , a contradiction .",
    "recent work in the theory of computable structures has focussed on finding computable structures of high scott rank .",
    "nadel @xcite proved that any computable structure has scott rank at most @xmath431 .",
    "early on , harrison @xcite showed that there is a computable ordering of type @xmath432 ( where @xmath433 is the order type of the rational numbers ) .",
    "this ordering has scott rank @xmath434 , as witnessed by any element outside the initial @xmath1 set .",
    "however , it was not until much more recently that a computable structure of scott rank @xmath1 was produced ( see knight and millar @xcite ) . a recent result of cholak , downey , and harrington gives the first natural example of a structure with scott rank @xmath25 : the computable enumerable sets under inclusion @xcite .",
    "there is an automatic structure with scott rank @xmath25 .",
    "there is an automatic structure with scott rank @xmath29 .",
    "we also apply the construction to @xcite , where it is proved that there are computable structures with scott ranks above each computable ordinal . in this case",
    ", we get the following theorem . + * theorem [ thm : scottrank ] .  *",
    "_ for each computable ordinal @xmath2 , there is an automatic structure of scott rank at least @xmath2 . _",
    "in this section we show that there are automatic successor trees of high cantor - bendixson ( cb ) rank .",
    "recall the definitions of partial order trees and successor trees from section [ s : intro ] .",
    "note that if @xmath435 is an automatic partial order tree then the successor tree @xmath436 , where the relation @xmath36 is defined by @xmath437 , is automatic .",
    "the * derivative * of a ( partial order or successor ) tree @xmath32 , @xmath438 , is the subtree of @xmath32 whose domain is @xmath439 by induction , @xmath440 , @xmath441 , and for @xmath420 a limit ordinal , @xmath442 .",
    "the * cb rank * of the tree , @xmath443 , is the least @xmath2 such that @xmath444 .",
    "the cb ranks of automatic partial order trees are finite @xcite .",
    "this is not true of automatic successor trees .",
    "the main theorem of this section provides a general technique for building trees of given cb ranks .",
    "before we get to it , we give some examples of automatic successor ordinals whose cb ranks are low .",
    "there is an automatic partial order tree ( hence an automatic successor tree ) whose cb rank is @xmath64 for each @xmath445 .    the tree @xmath446 is defined over the @xmath64 letter alphabet @xmath447 as follows .",
    "the domain of the tree is @xmath448 .",
    "the order @xmath449 is the prefix partial order .",
    "therefore , the successor relation is given as follows : @xmath450    note that if @xmath451 then the tree is empty , which is consistent with it having cb rank @xmath217 .",
    "it is obvious that @xmath446 is an automatic partial order tree .",
    "the rank of @xmath452 can be shown , by induction , to be equal to @xmath64 .",
    "the following examples code the finite rank successor trees uniformly into one automaton in order to push the rank higher .",
    "we begin by building an automatic successor tree @xmath453 of rank @xmath454 .",
    "we note that the cb ranks of all trees with at most countably many paths are successor ordinals .",
    "thus , @xmath453 will have countably many paths . later",
    ", we construct a tree of rank @xmath19 which must embed the perfect tree because its cb rank is a limit ordinal .",
    "there is an automatic successor tree @xmath453 whose cb rank is @xmath454 .",
    "informally , this tree is a chain of trees of increasing finite cb ranks .",
    "let @xmath455 with @xmath36 defined as follows : @xmath456    intuitively , the subtree of rank @xmath64 is coded by the set @xmath457 of nodes which contain exactly @xmath64 @xmath211s .",
    "by induction on the length of strings , we can show that @xmath458 and hence the domain of the tree is also @xmath459 .",
    "it is also not hard to show that the transitive closure of the relation @xmath36 satisfies the conditions of being a tree .",
    "it is also easy to see that @xmath453 is automatic .",
    "finally , we compute the rank of @xmath460 .",
    "we note that in successive derivatives , each of the finite rank sub - trees @xmath457 is reduced in rank by @xmath211 .",
    "therefore @xmath461 but , since each point in @xmath462 is on exactly one infinite path , @xmath463 , and this is a fixed - point . thus , @xmath464 , as required .",
    "the following example gives a tree @xmath465 of rank @xmath19 .",
    "the idea is to code the trees @xmath446 provided above into the leftmost path of the full binary tree .",
    "[ ex : limitord ] there is an automatic successor tree @xmath465 whose cb rank is @xmath19 .",
    "the tree is the full binary tree , where at each node on the leftmost branch we append trees of increasing finite cb rank .",
    "thus , define @xmath466 where @xmath36 is given as follows : @xmath467    proving that @xmath465 is an automatic successor tree is a routine check .",
    "so , we need only compute its rank .",
    "each derivative leaves the right part of the tree ( the full binary tree ) fixed .",
    "however , the trees appended to the leftmost path of the tree are affected by taking derivatives .",
    "successive derivatives decrease the rank of the protruding finite rank trees by @xmath211 .",
    "therefore , @xmath468 , a fixed point .",
    "thus , @xmath469 .    to extend these examples to higher ordinals , we consider the * product * operation on trees defined as follows .",
    "let @xmath470 and @xmath471 be successor trees .",
    "the product of these trees is the tree @xmath436 with domain @xmath472 and successor relations given by : @xmath473    the following is an easy proposition .",
    "assume that @xmath474 and @xmath475 are successor trees of cb ranks @xmath2 and @xmath266 , respectively , each having at most countably many paths .",
    "then @xmath476 has cb rank @xmath477 .",
    "moreover , if @xmath474 and @xmath475 are automatic successor trees then so is the product .    the examples and the proposition above yield tools for building automatic successor trees of cb ranks up to @xmath478 .",
    "however , it is not clear that these methods can be applied to obtain automatic successor trees of higher cb ranks .",
    "we will see that a different approach to building automatic successor trees will yield all possible cb ranks .",
    "we are now ready for the main theorem of this section .",
    "as before , we will transfer results from computable trees to automatic trees .",
    "we note that every computable successor tree @xmath436 is also a computable partial order tree . indeed , in order to compute",
    "if @xmath479 , we effectively find the distances of @xmath18 and @xmath16 from the root .",
    "if @xmath18 is closer to the root or is at the same distance as @xmath16 then @xmath480 ; otherwise , we start computing the trees above all @xmath120 at the same distance from the root as @xmath16 is",
    ". then @xmath18 must appear in one of these trees .",
    "thus , we have computed whether @xmath479 .",
    "hence , every computable successor tree is a computable partial order tree .",
    "however , not every computable partial order tree is a computable successor tree .",
    "we have the following inclusions : @xmath481 we use the fact that for each @xmath40 there is a computable successor tree of cb rank @xmath2 .",
    "this fact can be proven by recursively coding up computable trees of increasing cb rank .",
    "* theorem [ thm : rectrees ] .  *",
    "_ for @xmath40 there is an automatic successor tree of cb rank @xmath2 . _",
    "suppose we are given @xmath27 .",
    "take a computable tree @xmath482 of cb rank @xmath2 .",
    "we use the same construction as in the case of well - founded relations ( see the proof of theorem [ thm : heightrank ] ) .",
    "the result is a stretched out version of the tree @xmath482 , where between each two elements of the original tree we have a coding of their computation .",
    "in addition , extending from each @xmath219 we have infinitely many finite computation chains . those chains which correspond to output no  are not connected to any other part of the automatic structure .",
    "finally , there is a disjoint part of the structure consisting of chains whose bases are not valid initial configurations . by the reversibility assumption , each unproductive component of the configuration space",
    "is isomorphic either to a finite chain or to an @xmath19-chain . moreover , the set of invalid initial configurations which are the base of such an unproductive chain is regular .",
    "we connect all such bases of unproductive chains to the root and get an automatic successor tree , @xmath483 .",
    "we now consider the cb rank of @xmath483 .",
    "note that the first derivative removes all the subtrees whose roots are at distance @xmath211 from the root and are invalid initial computations .",
    "this occurs because each of the invalid computation chains has no branching and is not connected to any other element of the tree .",
    "next , if we consider the subtree of @xmath483 rooted at some @xmath219 , we see that all the paths which correspond to computations whose output is no  vanish after the first derivative .",
    "moreover , @xmath484 if and only if @xmath485 because the construction did not add any new infinite paths . therefore , after one derivative , the structure is exactly a stretched out version of @xmath486 .",
    "likewise , for all @xmath128 , @xmath487 is a stretched out version of @xmath488 .",
    "hence , @xmath489 .",
    "automatic successor trees have also been recently studied by kuske and lohrey in @xcite . in that paper , techniques similar to those above",
    "are used to show that the existence of an infinite path in an automatic successor tree is @xmath30-complete .",
    "in addition , kuske and lohrey look at graph questions for automatic graphs and show that the existence of a hamiltonian path is @xmath30-complete whereas the set cover problem is decidable .",
    "this paper studies the complexity of automatic structures . in particular , we seek to understand the difference in complexity between automatic and computable structures . we show that automatic well - founded partial orders are considerably simpler than their computable counterparts , because the ordinal heights of automatic partial orders are bounded below @xmath0 . on the other hand ,",
    "computable well - founded relations , computable successor trees , and computable structures in general can be transformed into automatic objects in a way which ( almost ) preserves the ordinal height , cantor - bendixson rank , or scott ranks ( respectively ) .",
    "therefore , the corresponding classes of automatic structures are as complicated as possible .",
    "bchi , j.r . on a decision method in restricted second - order arithmetic .",
    "international congress on logic , methodology and philosophy of science , 1960 _",
    "( e. nagel , p. suppes , a. tarski , eds . ) , 1 - 12 , stanford university press , 1962 .",
    "calvert , w. , s.s .",
    "goncharov , and j.f .",
    "computable structures of scott rank @xmath25 in familiar classes . _ advances in logic ( proc .",
    "north texas logic conference ) _ contemporary mathematics * 425 * , 49 - 66 , american mathematical society , 2007 .",
    "khoussainov , b. and r.a .",
    "effective model theory : the number of models and their complexity . _",
    "models and computability , invited papers from lc 1997 _",
    "cooper and j.k .",
    "truss , eds . ) lmslns * 259 * , 193 - 240 , cambridge university press ( cambridge , england ) , 1999 ."
  ],
  "abstract_text": [
    "<S> we study the complexity of automatic structures via well - established concepts from both logic and model theory , including ordinal heights ( of well - founded relations ) , scott ranks of structures , and cantor - bendixson ranks ( of trees ) . </S>",
    "<S> we prove the following results : 1 )  the ordinal height of any automatic well - founded partial order is bounded by @xmath0 ; 2 )  the ordinal heights of automatic well - founded relations are unbounded below @xmath1 , the first non - computable ordinal ; 3 )  for any computable ordinal @xmath2 , there is an automatic structure of scott rank at least @xmath2 . </S>",
    "<S> moreover , there are automatic structures of scott rank @xmath3 ; 4 )  for any computable ordinal @xmath2 , there is an automatic successor tree of cantor - bendixson rank @xmath2 . </S>"
  ]
}