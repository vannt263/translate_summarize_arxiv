{
  "article_text": [
    "temporal logics ( tl ) ( e.g. ,  @xcite , @xcite , @xcite , @xcite , @xcite ) have received a lot of attention in the research community . not only are they useful for specifying properties of systems , recent advances in model - checking allow effective automatic checking of models of systems against such properties , e.g. using tools like spin  @xcite and smv  @xcite .",
    "one important obstacle to using temporal logic is the ability to express complex properties correctly . to remedy this problem , dwyer and",
    "his colleagues have proposed a pattern - based approach to the presentation , codification and reuse of property specifications .",
    "the system allows patterns like `` @xmath0 is absent between @xmath1 and @xmath2 '' or `` @xmath2 precedes @xmath0 between @xmath1 and @xmath3 '' to be easily expressed in and translated between linear - time temporal logic ( ltl )  @xcite , computational tree logic ( ctl )  @xcite , quantified regular expressions ( qre )  @xcite , and other state - based and event - based formalisms .",
    "al . also performed a large - scale study in which specifications containing over 500 temporal properties were collected and analyzed .",
    "they noticed that over 90% of these could be classified under one of the proposed patterns  @xcite .    in earlier work  @xcite , we used the promela / spin framework to model the production cell system .",
    "we attempted to use the pattern - base approach to help us formalize properties of this system in ltl .",
    "however , we found that the approach could not be applied directly , because our properties used _ events _  changes of values of variables , e.g. , `` magnet should become deactivated '' , which we wanted to formalize as `` magnet is active now and will be inactive in the next state '' .",
    "we called such events _",
    "ltl is a temporal logic comprised of propositional formulas and temporal connectives @xmath4 ( `` always '' ) , @xmath5 ( `` eventually '' ) , @xmath6 ( `` next '' ) , and @xmath7 ( `` until '' ) . the first three operators are unary , while the last one is binary .",
    "@xmath7 is the _",
    "strong until _ ; that is , it requires that @xmath8 actually happen sometime in the future . in this context , we define edges as follows : @xmath9    ltl formulas containing events may have problems caused by the use of the `` next '' operator in the definition of edges .",
    "temporal formulas that make use of `` next '' may not be _ closed under stuttering _ ,",
    "i.e. their interpretation may be modified by transitions that leave the system in the same state ( `` stutter '' ) . as we discuss later in the paper",
    ", this is an essential property for effective use of temporal formulas .",
    "model - checking allows relatively novice users to verify correctness of their systems quickly and effectively .",
    "however , it is essential that these users are able to specify correctness criteria in the appropriate temporal logic .",
    "for example , effective use of spin  @xcite depends critically on being able to express such criteria in ltl . under the presence of events , it is often quite complex ( see  @xcite for a thorough discussion ) . in this paper",
    "we extend the properties of dwyer et .",
    "al . to include events in ltl properties .",
    "the rest of the paper is organized as follows : section  [ patternsystem ] overviews the pattern - based system .",
    "section  [ extensions ] presents our extension to the pattern - based system and discusses the extension process .",
    "section  [ cus ] contains an informal summary of our treatment of closure under stuttering and presents a set of theorems that allow syntactic checking of formulas for this property .",
    "in addition , it shows how to use these theorems to prove that our extensions of the pattern - based system are closed under stuttering .",
    "section  [ conclusion ] concludes the paper .",
    "in this section we survey the pattern - based approach . for more information",
    ", please refer to  @xcite .",
    "the patterns are organized hierarchically based on their semantics , as illustrated in figure  [ fig : hierarchy ] .",
    "some of the patterns are described below :    * universality * = blah a condition does not occur within a scope ; + * existence * a condition must occur within a scope ; + * universality * a condition occurs throughout a scope ; + * response * a condition must always be followed by another within a scope ; + * precedence * a condition must always be preceded by another within a scope .",
    "each pattern is associated with several _",
    "scopes _  the regions of interest over which the condition is evaluated .",
    "there are five basic kinds of scopes :    * d. * * between @xmath1 and @xmath3 * = the entire state sequence ; + * b. * the state sequence up to condition @xmath3 ; + * c. * the state sequence after condition @xmath1 ; + * d. * the part of the state sequence between condition @xmath1 and + condition @xmath3 ; + * e. * similar to the previous one , except that the designated + part of the state sequence continues even if the second condition does not + occur .",
    "these scopes are depicted in figure  [ fig : scopes ] .",
    "the scopes were initially defined in  @xcite to be closed - left , open - right intervals , although it is also possible to define other combinations , such as open - left , closed - right intervals .",
    "for example , an ltl formulation of the property `` @xmath2 precedes @xmath0 between @xmath1 and @xmath3 '' ( * precedence * pattern with `` between @xmath1 and @xmath3 '' scope ) is : @xmath10 even though the pattern system is formalism - independent  @xcite , in this paper we are only concerned with the expression of properties in ltl",
    "ltl is a state - based formalism , and thus the original pattern system does not specify the expression of events in ltl . in this section",
    "we show how to include reasoning about events to the pattern system .",
    "these events can be used for specifying conditions as well as for defining the bounding scopes .",
    "we start by introducing some notation that allows us a more compact representation of properties .",
    "we define the _ weak _ version of `` until '' as : @xmath11 that is , we no longer require @xmath8 to happen in the future ; if it does not , than @xmath12 should hold indefinitely .",
    "another useful operator is `` precedes '' : @xmath13 that is , we want @xmath12 to hold _ before _ @xmath8 does . note that in this case @xmath8 may never happen .",
    "also , we use @xmath14 to indicate @xmath15 , or @xmath16 . finally , we write @xmath17 and @xmath18 to indicate boolean values _ true _ and _ false _ , respectively .",
    "since our extension involves edges , we give a few relevant properties below : @xmath19 properties ( [ eq : aeu ] ) and ( [ eq : aed ] ) indicate that edges of the same type can not occur in every state of the system , whereas property ( [ eq : ueu ] ) allows us to replace an `` until '' with a propositional expression .",
    "we have explored the concept of edges in  @xcite , and list some of edge properties in the appendix .",
    "introducing edges into the patterns generates an explosion in the number of formulas : conditions can be state - based or edge - based , inclusive or exclusive , and the interval ends can be either opened or closed .",
    "our extension does not include all the possibilities , but rather a significant and representative set of them , as discussed below .",
    "we were able to extend five of the nine patterns : * absence * ( figure  [ fig : patab ] ) , * existence * ( figure  [ fig : pate ] ) , * universality * ( figure  [ fig : pata ] ) , * response * ( figure  [ fig : patr ] ) , * precedence * ( figure  [ fig : patp ] ) .",
    "for each of the five scopes , we list four formulas corresponding to the four combinations of state - based and edge - based conditions and interval bounds we have considered :    [ cols=\"^ , < , < \" , ]     combination 0 corresponds to the original formulation of @xcite , where all of @xmath0 , @xmath2 , @xmath1 and @xmath3 are state - based .",
    "the remaining three combinations are our extensions to the pattern system .",
    "we assume that multiple events can happen simultaneously , but only consider closed - left , open - right intervals , as in the original system . also , we consider events @xmath0 and @xmath2 to be exclusive in the * precedence * pattern and inclusive in the * response * pattern .",
    "we note , however , that it is perfectly possible to have formulas for all other combinations of interval bounds .",
    "down edges can be substituted for up edges without changing the formulas .",
    "we have modified several of the 0-formulas ( i.e. state - based conditions and intervals ) from their original formulations of @xcite to remove assumptions of interleaving and make them consistent with the closed - left , open - right intervals .",
    "note that in the case of the * universality * pattern , we do not list formulas for edge - based events as edges can not be universally present ( by ( [ eq : aeu ] ) and ( [ eq : aed ] ) ) .",
    "the four patterns that we did not extend are : * bounded existence * , * precedence chain * , * response chain * , * constrained chain*. while we considered the * bounded existence * pattern to be too convoluted to be useful in practice and thus not worth the effort of extending , the other three patterns were not extended for reasons that will become apparent in the next section .      what is involved in adding events to a property ? consider specifying the absence pattern under the `` between @xmath1 and @xmath3 scope '' where @xmath1 and @xmath3 are ( up ) edges .",
    "the original formula is @xmath20 this formula does not include @xmath0 when @xmath1 and @xmath3 occur simultaneously .",
    "this behavior is desired since the founding interval is half open and thus becomes empty when the two ends coincide .",
    "if we want to transform the condition and the interval bounds into edges , we may be tempted to use the formula : @xmath21    however , in order to effectively express properties containing edges , we need to realize that an edge is detected just _ before _ it occurs , as illustrated in figure  [ fig : edge ] that is , @xmath22 becomes true in the state where @xmath12 is false .",
    "thus , our formula has a problem : we start testing @xmath0 _ before _ the edge in @xmath1 because this is when we detect @xmath23 . we need to fix this by testing @xmath0 _ after _ the edge in @xmath1 : @xmath24 we fixed the above problem but introduced another : the new formula does not work correctly when @xmath23 and @xmath25 occur simultaneously",
    "this happens because we make sure that @xmath26 occurs one state too early .",
    "we need to fix the antecedent by making sure that the interval is non - empty : @xmath27 unfortunately , the resulting formula is still incorrect : if @xmath0 and @xmath26 occur simultaneously , then that occurrence of @xmath0 will be ignored since @xmath26 is detected in the state _ before _ the edge .",
    "this is not the intended behavior as the state before the edge is considered part of the interval .",
    "we need to fix it one more time : @xmath28 or better yet : @xmath29    note that we can avoid many complications of the sort discussed above if we add the `` previous '' modality , @xmath30 . using this new operator",
    ", we can detect edges just _",
    "after _ they occur : @xmath31 ( see figure  [ fig : edge ] ) .",
    "although having the `` previous '' operator can potentially simplify a number of properties , it is currently not supported by spin .",
    "the extension of the pattern system presented in section  [ extensions ] , is an important development , and we hope that the resulting patterns provide real value to the end user .",
    "still , can practitioners use our extensions directly , without worrying about any unexpected behavior ?",
    "the patterns that we have created in the previous section contain the `` next '' operator .",
    "thus , they may not be _ closed under stuttering_. intuitively , a formula is closed under stuttering when its interpretation is not modified by transitions that leave the system in the same state .",
    "for example , a formula @xmath32 is closed under stuttering because no matter how much we repeat states , we can not change the value of @xmath33 . on the other hand , the formula @xmath34 is not closed under stuttering .",
    "we can see that by considering a state sequence in which @xmath33 is true in the first state and false in the second .",
    "then @xmath35 is false if we evaluate it on this sequence , and true if we repeat the first state .",
    "closure under stuttering is an essential property of temporal formulas to ensure basic separation between abstraction levels and to enable powerful partial - order reduction algorithms utilized in mechanized checking , e.g.  @xcite .",
    "this property can be easily guaranteed for a subset of ltl that does not include the `` next '' operator  @xcite ; however , events can not be expressed in this subset .",
    "determining whether an ltl formula is closed under stuttering is hard : the problem has been shown to be pspace - complete  @xcite . a computationally feasible algorithm which can identify a subclass of closed under stuttering formulas has been proposed in  @xcite but have not yet been implemented ; without an implementation , one can not say how often the subclass of formulas identified by the algorithm is encountered in practice .",
    "several temporal logics that try to solve the problem have been proposed .",
    "such logics , e.g. tla  @xcite and mtl  @xcite , restrict the language so that all formulas expressed in it are , by definition , closed under stuttering .",
    "however , it is not clear if these languages are expressive enough for practical use .    in this section",
    "we briefly present a set of theorems that allow syntactic reasoning about closure under stuttering in ltl formulas and show how to apply them to our extensions of the pattern system . for a more complete treatment of closure under stuttering",
    ", please refer to  @xcite .",
    "the notation below is adopted from  @xcite . a sequence ( or string )",
    "is a succession of elements joined by semicolons .",
    "for example , we write the sequence comprised of the first five natural numbers , in order , as @xmath36 or , more compactly , as @xmath37 ( note the left - closed , right - open interval ) .",
    "we can obtain an item of the sequence by subscripting : @xmath38 .",
    "when the subscript is a sequence , we obtain a subsequence : @xmath39 .",
    "a state is modeled by a function that maps variables to their values , so the value of variable @xmath33 in state @xmath40 is @xmath41 .",
    "we denote the set of all infinite sequences of states as @xmath42 , and the set of natural numbers as @xmath43 .",
    "we say that an ltl formula @xmath44 is closed under stuttering when its interpretation remains the same under state sequences that differ only by repeated states .",
    "we denote an interpretation of formula @xmath44 in state sequence @xmath45 as @xmath46 , and a closed under stuttering formula as @xmath47 .",
    "@xmath47 is formally defined as follows :    [ eq : cus ] @xmath48    in other words , given any state sequence @xmath45 , we can repeat any of its states without changing the interpretation of @xmath44 .",
    "note that @xmath49 is a sequence of states that differs from @xmath45 only by repeating a state @xmath50 .      here",
    "we present several theorems that allow syntactic reasoning about closure under stuttering .",
    "first , we note that @xmath51 and @xmath52 can be used interchangeably when analyzing properties of the form @xmath53 thus , in what follows we will only discuss the @xmath52-edge .",
    "we start with a few generic properties of closure under stuttering : @xmath54 for example , ( [ cus - var])-([cus - imp ] ) indicate that all propositional formulas are closed under stuttering .",
    "the above properties do not include reasoning about formulas that contain the `` next '' operator .",
    "for those , we need the following theorem , proven in  @xcite :    [ thm : main ] @xmath55",
    "this theorem establishes an important relationship between the `` next '' operator , edges , and closure under stuttering .",
    "it gives rise to a number of corollaries that we found to be useful in practice .",
    "[ eq : cusee ] @xmath56",
    "if we take @xmath57 or @xmath58 respectively , we obtain two simplified versions : @xmath59 and @xmath60 these formulas represent an _ existence _ property : an event @xmath22 must happen and then @xmath8 , evaluated before or after the event , should hold .",
    "[ eq : cusae ] @xmath61    is similar to property  [ eq : cusee ] .",
    "its two simplified versions are @xmath62 and @xmath63 they express a _ universality _ property : whenever an event @xmath22 happens , @xmath8 , evaluated right before or right after the event , will hold .      all properties of figures  [ fig : patab]-[fig : patr ] have been shown to be closed under stuttering .",
    "this was done using general rules of logic and properties identified above .",
    "for example , consider checking a property @xmath28 for closure under stuttering .",
    "the proof goes as follows :    & ( qr r ( r p ) )     + &    ' '' ''     +    & ( qr ( ( rp ) r ) )     + &    ' '' ''     +    & ( q(rr)((rp)r ) )     + &    ' '' ''     +    & ( ( qr((rp)r ) ) ) + & ( q ( ( rp)r r ) )     + &    ' '' ''",
    "+    & ( ( qr ( ( rp)r ) ) )   + & ( q ( ( rp)r r ) )     + &    ' '' ''     +    & q r ( rp)r   + & q ( rp)r r     + &    ' '' ''     +    & q r rp r   + & q rp r r     + &    ' '' ''     +    & q r r p r    we have thus proved that @xmath64 although the property is fairly complicated , the proof is not long , is completely syntactic , and each step in the proof is easy .",
    "such a proof can potentially be performed by a theorem - prover with minimal help from the user .    as we noted earlier , we did not extend all patterns to include events .",
    "the reason is that * precedence chain * , * response chain * and * constrained chain * were not closed under stuttering even in their state - based formulations .",
    "consider , for example , the * response chain * pattern under the global scope , formalized as @xmath65 when we evaluate this formula on the state sequence @xmath45 :    @xmath66    we get @xmath17 because the antecedent is always @xmath18 .",
    "however , if we stutter the first state @xmath40 , we get the sequence @xmath67 :    @xmath68    the interpretation of the formula on this sequence is now @xmath18 because the antecedent is @xmath17 and the consequent is @xmath18 ( since @xmath69 is always @xmath18 ) . as stuttering causes a change in the interpretation of the formula , we can conclude that the formula is not closed under stuttering .",
    "in this paper we developed a concept of edges and used it to extend the pattern - based system of dwyer et .",
    "al . to reasoning about events .",
    "we have also presented a set of theorems that enable the syntax - based analysis of a large class of formulas for closure under stuttering .",
    "this class includes all ltl formulas of the patterns that appeared in this paper .",
    "since research shows that patterns account for 90% of the temporal properties that have been specified so far  @xcite , we believe that our approach is highly applicable to practical problems .    the goal of the pattern - based approach is to enable practitioners to easily codify complex properties into temporal logic .",
    "the extensions presented in this paper allow them to express events easily and effectively , without worrying about closure under stuttering .",
    "we hope that this work has moved us , as a community , one step closer to making automatic verification more widely usable .",
    "10    a.  bernstein and p.  k. harter .",
    "proving real time properties of programs with temporal logic . in _ proceedings of the eight symposium on operating systems principles _ , pages 111 .",
    "acm , 1981 .",
    "clarke , e.a .",
    "emerson , and a.p .",
    "sistla . . , 8(2):244263 , april 1986",
    "matthew  b. dwyer , george  s. avrunin , and james  c. corbett . .",
    "in _ proceedings of 2nd workshop on formal methods in software practice _ , march 1998 .",
    "matthew  b. dwyer , george  s. avrunin , and james  c. corbett . .",
    "in _ proceedings of 21st international conference on software engineering _ , may 1999 .",
    "b.  t. hailpern and s.  s. owicki . modular verification of computer communication protocols .",
    ", 1(com-31):5668 , 1983 .",
    "eric c.  r. hehner . .",
    "texts and monographs in computer science .",
    "springer - verlag , new york , 1993 .",
    "g.  j. holzmann and o.  kupferman . .",
    "in _ proceedings of spin96 _ , 1996 .",
    "holzmann . . , 23(5):279295 ,",
    "may 1997 .",
    "leslie lamport .",
    "specifying concurrent program modules .",
    ", 5:190222 , 1983 .",
    "leslie lamport . . , 16:872923 ,",
    "may 1994 .",
    "z.  manna and a.  pnueli . .",
    "technical report stan - cs-90 - 1321 , department of computer science , stanford university , 1990 . appeared in _ carnegie mellon computer science : a 25 year commemorative_.    z.  manna and a.  pnueli . .",
    "springer - verlag , 1992 .",
    "mcmillan . .",
    "kluwer academic , 1993 .",
    "abdelillah mokkedem and dominique mry .",
    "a stuttering closed temporal logic for modular reasoning about concurrent programs . in _",
    "temporal logic : first international conference , ictl 94 _ , number 827 in lecture notes in artificial intelligence , berlin , july 1994 .",
    "springer - verlag .",
    "kurt  m. olender and leon  j. osterweil .",
    ". , 16(3):268280 , march 1990 .",
    "j.  s. ostroff . .",
    "advanced software development series .",
    "research studies press ( john wiley & sons ) , 1990 .",
    "doron peled , thomas wilke , and pierre wolper . .",
    "in _ proceedings of concur 96 : 7th international conference on concurrency theory _ , august 1996 .",
    "dimitrie  o. pun .",
    "closure under stuttering in temporal formulas .",
    "master s thesis , department of computer science , university of toronto , toronto , ontario m5s 3g4 , canada , 1999 .",
    "dimitrie  o. pun and marsha chechik . .",
    "in _ proceedings of 4th international conference on requirements engineering _ , june 1999 .",
    "dimitrie  o. pun , marsha chechik , and bernd biechelle . .",
    "in _ proceedings of spin98 _ , november 1998 .",
    "we list a few representative properties of edges here . their proofs appear in  @xcite .",
    "@xcite also contains a comprehensive study of the concept of edges .",
    "edges are related : @xmath70"
  ],
  "abstract_text": [
    "<S> a pattern - based approach to the presentation , codification and reuse of property specifications for finite - state verification was proposed by dwyer and his colleagues in  @xcite . </S>",
    "<S> the patterns enable non - experts to read and write formal specifications for realistic systems and facilitate easy conversion of specifications between formalisms , such as ltl , ctl , qre . in this paper </S>",
    "<S> we extend the pattern system with _ events _  changes of values of variables in the context of ltl . </S>"
  ]
}