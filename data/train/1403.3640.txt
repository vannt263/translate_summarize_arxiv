{
  "article_text": [
    "a liquid junction potential develops when two solutions containing ions of different species and/or concentrations come into contact @xcite .",
    "although it may affect in a significant way several types of electrochemical measurements , it is very difficult to measure directly in a given experimental setup .",
    "hence a proper correction of the results for the presence of liquid junction potentials requires a tool for their theoretical calculation .",
    "commercial programs exist , specifically designed for biomedical applications @xcite , with which such a calculation can be performed , but to our knowledge until now there existed no open source software freely available to the scientific community , and easy to use in the most general situations .",
    "the program we are presenting in this paper is written in java and is available as an applet , with a simple and user - friendly graphical panel , at the site http://jljp.sourceforge.net . in order for the program to be run via a web browser",
    ", the java plugin must have been installed .",
    "we point out that the standard security settings on ms windows operating systems may prevent the operation of the program .",
    "this problem can be however easily solved by suitably modifying the java security options through the windows control panel .",
    "the free download of the package or of the source files from the site sourceforge.net is also possible .",
    "the program accepts as an input the ion concentrations at the boundaries of the junctions .",
    "the number @xmath0 of ion species that one can consider is free . for each of them",
    "one has to assign the electrical charge and the mobility .",
    "the former is a multiple of the elementary charge @xmath1 , and is therefore expressed as a relative integer @xmath2 .",
    "the latter is defined in general as the ratio @xmath3 between a drift velocity and the applied force which generates the drift , and is therefore expressed in units m s@xmath4 n@xmath4 .",
    "for all the most common ions these parameters are automatically provided by the software as soon as the ion s name is entered in the graphical panel . in general",
    "it is however also possible to introduce the values by hand .",
    "the final output is represented by the junction potential @xmath5 and by the ionic fluxes , i.e.  the number of ions of each species that flow through each section of the junction per unit time .",
    "the calculations are performed by numerically integrating the stationary nernst ",
    "planck equations @xcite in conditions of assumed local electrical quasi - neutrality at all points of the junction .",
    "this represents an additional advantage with respect to the available commercial software , which makes instead use of the less accurate henderson s equation @xcite .",
    "furthermore , our program also gives the possibility to deal with nonideal junctions , i.e.  with junctions in which the activity of the ions can not be identified with the concentration .",
    "this is normally the case whenever the concentrations are not so low . denoting with an index @xmath6 the ion species present in the junction , @xmath7 , it is possible to specify in an almost arbitrary way the functional dependence of the activity @xmath8 of an ion on its concentration @xmath9 , assuming that the dependence on the concentrations of the other ions can be neglected .",
    "this is done by giving as an input the analytical form of the function @xmath10 , which is used in the calculation of the junction potential as explained below .",
    "the nernst  planck equation describes the concentration profile of an ion which moves inside the liquid junction under the influence of diffusion and of the electric field . in a stationary regime and in the absence of chemical reactions , owing to the continuity equation the flux @xmath11 of the ion is constant along the junction .",
    "if @xmath12 is the length of the junction and @xmath13 the spatial coordinate , with @xmath14 , the nernst ",
    "planck equation for the @xmath13-dependent concentration @xmath9 is @xmath15 where @xmath16 is the diffusion coefficient of the ion , while @xmath1 , @xmath17 and @xmath18 are defined as above .",
    "if we suppose that the condition of electrical neutrality @xmath19 is satisfied at all points of the junction , then using ( [ npeq ] ) it is possible to express the electric field as @xmath20 where @xmath21 . taking into account that , as a consequence of ( [ neutrality ] ) , the concentration @xmath22 of the last ion can be expressed as a function of the others as @xmath23 , one finally obtains a system of @xmath24 differential equations in the unknowns @xmath25 : @xmath26    in the hypothesis mentioned above , that the activity @xmath8 depends only on @xmath9 , the diffusion coefficients can be expressed as @xmath27 where @xmath28 is boltzmann constant and @xmath29 the absolute temperature .",
    "the program calculates @xmath16 as a function of @xmath9 , by using in the right - hand side of the above equation the analytical expression provided by the user . by default",
    ", the program assumes that the ideal relationship @xmath30 holds .",
    "note that in such a case , the well - known einstein s relation @xmath31 is obtained .",
    "after the user has entered the values @xmath32 , @xmath33 , of the ion concentrations at the two sides a and b of the junction ( @xmath34 and @xmath35 being fixed by the condition of electrical neutrality ) , the program integrates the differential equations ( [ system ] ) for an initial guess of the parameters @xmath36 , taking the concentrations on side a as initial data .",
    "since it is assumed that the total electrical current through the junction vanishes , these parameters are subject to the condition @xmath37 as independent variable for the integration , the concentration @xmath38 of the first ion is taken in place of the coordinate @xmath13 , which does not appear on the right side of ( [ system ] ) .",
    "the procedure is automatically iterated for suitably modified values of the fluxes @xmath11 , until the concentration @xmath39 for @xmath40 are close to the assigned values @xmath41 within an acceptable tolerance .",
    "then , by using the equations ( [ system ] ) again , @xmath13 is in turn calculated as a function of @xmath38 . in this way the program obtains a value for the length @xmath12 of the junction and for the potential @xmath42",
    "the value of @xmath12 obtained in this way has actually no physical meaning .",
    "the fluxes @xmath36 , for which the boundary conditions on side b are satisfied , are in fact not univocally determined : their multiplication by an arbitrary numerical factor @xmath43 does not change either the concentrations or the junction potential , but only amounts to dividing by @xmath43 the length @xmath12 of the junction .",
    "it follows that only the values of @xmath44 , which are provided as the program s output together with @xmath5 , are independent of the arbitrary factor @xmath43 , and indeed represent the ion fluxes multiplied by the length of the junction .",
    "the actual length @xmath12 of the physical junction does not affect the value of the potential , and is not required as an input by the program .    in principle",
    "the results should be independent of the choice of the ion whose concentration is taken as independent variable . the user can verify this by repeating the calculations with different choices , and then comparing the results .",
    "it is obvious that , in order to suitably play the role of independent variable , the concentration of an ion must be a monotonic function of the position . to verify that this condition is fulfilled ,",
    "it is possible to inspect the concentration profiles along the junction , which can be also obtained as outputs from the program .",
    "we have applied our program to the case in which a solution 0.1 m of zinc chloride zncl@xmath45 is present on side b of the junction , while on side a there is a solution 0.1 m containing a mixture of potassium acetate koac and potassium chloride kcl . if we call @xmath46 the fraction of acetate with respect to the total solute on side a of the junction , for @xmath47 we have only kcl , while for @xmath48 we have only koac .",
    "the junction is supposed to be ideal . in fig .",
    "[ fig_numeric ] we report , as a function of @xmath46 , the liquid junction potential calculated either with our numerical software based on the nernst  planck equation , or according to the henderson formula . for @xmath46",
    "approaching 0 the numerical result converges to the value @xmath49 mv , which can also be obtained by analytical methods @xcite , since for @xmath47 only three ion species are present in the junction .",
    "the accordance with exact analytical solutions of the nernst ",
    "planck equations has also been verified for junctions with only two ionic species .",
    "these facts confirm the correctness of the numerical program .",
    "we see on the other hand that , for all values of @xmath46 , the junction potential is somewhat underestimated by the henderson formula ."
  ],
  "abstract_text": [
    "<S> we describe an open source software which we have realized and made publicly available at the website http://jljp.sourceforge.net . it provides the potential difference and the ion fluxes across a liquid junction between the solutions of two arbitrary electrolytes . </S>",
    "<S> the calculation is made by solving the nernst  </S>",
    "<S> planck equations for the stationary state in conditions of local electrical quasi - neutrality at all points of the junction . </S>",
    "<S> the user can arbitrarily assign the concentrations of the ions in the two solutions , and also specify the analytical dependence of the diffusion coefficient of each ion on its concentration . </S>"
  ]
}