{
  "article_text": [
    "in just a few years , peer - to - peer content distribution has come to generate a significant portion of the total internet traffic  @xcite .",
    "the widespread adoption of such protocols for delivering large data volumes in a global scale is arguably due to their scalability and robustness properties . understanding the mechanisms that affect the performance of such protocols and overcoming the existing shortcomings",
    "will ensure the continued success of 2p data delivery . to that end , this paper presents a detailed experimental study of the peer selection strategy in bittorrent , one of the most popular 2p content distribution protocols .",
    "recently , researchers have formulated analytical models for the problem of efficient data exchange among peers , and measurement studies using actual download traces have attempted to shed light into the success of bittorrent .",
    "however , certain properties of these studies have interfered with their accurate evaluation of the dynamics of algorithms and their impact on overall system performance .",
    "for example , analytical models can provide valuable insight , but they are typically based on unrealistic assumptions , such as giving all participants global system knowledge  @xcite ; actual download traces may differ substantially from the their predictions  @xcite .",
    "furthermore , most measurement studies have evaluated peers connected to public _ torrents_bittorrent download sessions  @xcite .",
    "they provide detailed data about the overall behavior of deployed bittorrent systems , however , the inherent limitations in collecting per - peer information in a public torrent obstructs the understanding of individual peer decisions during the download .",
    "et al . _",
    "@xcite recently attempted to evaluate those decisions , but only from the viewpoint of a single peer .    to overcome these limitations",
    ", we conduct extensive experiments on a private testbed and collect data from all peers in a controlled environment .",
    "in particular , we focus on the so - called _ choking algorithm _ for peer selection , which may be the driving factor behind bittorrent s high performance  @xcite .",
    "this approach allows us to examine the behavior of individual peers under a microscope and observe their decisions and interactions during the download .",
    "our main contribution is to demonstrate that the choking algorithm facilitates the formation of clusters of similar - bandwidth peers , ensures effective sharing incentives by rewarding peers who contribute data to the system , and maintains high upload utilization for the majority of the download duration .",
    "these properties have been hinted at in previous work ; this study constitutes their first experimental validation .",
    "we also show that , if the seed is underprovisioned , all peers tend to complete their download around the same time , independently of how much they upload .",
    "clusters are no longer formed , and , interestingly , high - capacity peers assist the seed in disseminating data to low - capacity ones , resulting in everyone maintaining high upload utilization .",
    "finally , based on our observations , we provide guidelines for seed provisioning by content providers , and discuss a tracker protocol extension that addresses an identified limitation of the protocol , namely the low upload utilization at the beginning of a torrent s lifetime .    the rest of this paper is organized as follows .",
    "section  [ background ] provides a description of the bittorrent protocol and an explanation of the choking algorithm , as implemented in the official bittorrent client .",
    "section  [ methodology ] describes our experimental methodology and the rationale behind the experiments , while section  [ results ] presents our results .",
    "section  [ discussion ] discusses seed provisioning guidelines and the proposed tracker protocol extension .",
    "lastly , section  [ related ] sets this study in the context of related work , and section  [ conclusion ] concludes .",
    "bittorrent is a peer - to - peer content distribution protocol that scales well with the number of participating peers .",
    "a system capitalizes on the upload capacity of each peer in order to increase global system capacity as the number of peers increases .",
    "a major factor behind s success is a built - in incentives mechanism , implemented by its _ choking algorithm _ , which is designed to encourage peers to contribute data .",
    "the rest of this section introduces the terminology used in the paper and describes s operation in detail , with a particular focus on the choking algorithm .",
    "the terminology used in the community is not standardized . for the sake of clarity , we define here the terms used throughout this paper .    *",
    "* torrent*. a _ torrent _ is the set of peers cooperating to download the same content using the protocol . * * tracker*. the _ tracker _ is the only centralized component of the system .",
    "it is not involved in the actual distribution of the content , but it keeps track of all peers currently participating in the download , and it collects statistics . * * pieces and blocks*. content transferred using is split into _ pieces _ , with each piece being split into multiple _",
    "although blocks are the transmission unit , peers can only share complete pieces with others . *",
    "* metainfo file*. the _ metainfo file _ , also called a torrent file , contains all the information necessary to download the content and includes the number of pieces , sha-1 hashes for all the pieces that are used to verify received data , and the ip address and port number of the tracker .",
    "* * interested and choked*. we say that peer @xmath0 is _ interested _ in peer @xmath1 when @xmath1 has pieces of the content that @xmath0 does not have . conversely , peer @xmath0 is _ not interested _ in peer @xmath1 when @xmath1 only has a subset of the pieces of @xmath0 .",
    "we also say that peer @xmath0 is _ choked _ by peer @xmath1 when @xmath1 decides not to send any data to @xmath0 .",
    "conversely , peer @xmath0 is _ unchoked _ by peer @xmath1 when @xmath1 is willing to send data to @xmath0 .",
    "note that this does not necessarily mean that peer @xmath1 is uploading data to @xmath0 , but rather that @xmath1 will upload to @xmath0 if @xmath0 issues a data request . *",
    "* peer set*. each peer maintains a list of other peers to which it has open tcp connections .",
    "we call this list the _ peer set _ , and it is also known as the neighbor set . * * local and remote peers*. when describing the choking algorithm , we take the viewpoint of a single peer , which we call the _ local peer_. we refer to the peers in the local peer s peer set as _ remote peers_. * * leecher and seed*. a peer can be in one of two states : the _ leecher _ state , when it is still downloading pieces of the content , and the _ seed _ state , when it has all the pieces and is sharing them with others . * * initial seed*. the _ initial seed _ is the first peer that offers the content for download",
    ". there can be more than one initial seeds . in this paper , however , we only consider the case of a single initial seed . *",
    "* rarest - first algorithm*. the _ rarest - first algorithm _ is the piece selection strategy used by clients .",
    "it is also known as the _ local _ rarest - first algorithm since it bases the selection on the available information locally at each peer .",
    "peers independently maintain a list of the pieces each of their remote peers has and build a _ rarest - pieces set _ containing the indices of the pieces with the least number of copies .",
    "this set is updated every time a remote peer announces that it acquired a new piece , and is used by the local peer to select the next piece to download . * * choking algorithm*. the _ choking algorithm _ , also known as the _ tit - for - tat algorithm _ , is the peer selection strategy used by clients .",
    "we provide a detailed description of this algorithm in section  [ choking_algorithm ] . * * official client*. the official client  @xcite , also known as the _ mainline _ client , was the first implementation and was initially developed by bram cohen , bittorrent s creator .      prior to distribution ,",
    "the content is divided into multiple pieces , and each piece into multiple blocks .",
    "the metainfo file is then created by the content provider . to join a torrent ,",
    "a peer @xmath2 retrieves the metainfo file out of band , usually from a well - known website , and contacts the tracker that responds with a peer set of randomly selected peers , possibly including both seeds and leechers .",
    "@xmath2 then starts contacting peers in this set and requesting different pieces of the content .",
    "most clients nowadays use the rarest - first algorithm for piece selection . in this manner",
    ", peer selects the next piece to download from its rarest - pieces set .",
    "a local peer determines which pieces its remote peers have based on _ bitfield _ messages exchanged upon establishing new connections , which contain a list of all the pieces a peer has .",
    "peers also send _ have _ messages to everyone in their peer set when they successfully receive and verify a new piece .",
    "a peer uses the choking algorithm to decide which peers to exchange data with .",
    "the algorithm generally gives preference to those peers who upload data at high rates .",
    "once per _ rechoke period _ , typically set to ten seconds , a peer re - calculates the data receiving rates from all peers in its peer set .",
    "it then selects the fastest ones , a fixed number of them , and uploads only to those for the duration of the period . in bittorrent parlance ,",
    "a peer unchokes the fastest uploaders via a _",
    "regular unchoke _ , and chokes all the rest .",
    "in addition , it unchokes a randomly selected peer via a so - called _ optimistic unchoke_. the logic behind this is explained in detail in section  [ choking_algorithm ] .",
    "seeds , who do not need to download any pieces , follow a different unchoke strategy .",
    "most implementations dictate that seeds unchoke those leechers that _ download _ data at the highest rates , in order to better utilize seed capacity in disseminating the content as efficiently as possible .",
    "however , the official bittorrent client recently introduced a modified unchoke algorithm in seed state , in version 4.0.0 .",
    "we perform the first detailed experimental evaluation of this modified algorithm and show that it enables a more uniform utilization of the seed bandwidth across all leechers .",
    "we now describe the choking algorithm in detail as implemented in the official client , version 4.0.2 .",
    "the algorithm was initially introduced to foster a high level of data exchange reciprocation and is one of the main factors behind bittorrent s fairness model : peers that contribute data to others at high rates should receive high download throughput , and _ free - riders _ , peers that do not upload , should be penalized by being unable to achieve high download rates .",
    "it is worth noting that , although the algorithm has been shown to perform well in a variety of scenarios , it has recently been found that it does not completely eliminate free - riding  @xcite . in particular , a peer may improve its download rates by downloading from seeds , acquiring a large view of the peers in the torrent , or benefiting from many optimistic unchokes .",
    "we discuss this issue further in section  [ sec : provi - sharing - incentives ] .    as we noted earlier",
    ", the choking algorithm is different for leechers and seeds .",
    "when in leecher state , a peer @xmath2 unchokes a fixed number of remote peers . unless specified explicitly by the user , this number of parallel uploads",
    "is determined by @xmath2 s upload bandwidth .",
    "for example , for an upload limit greater than or equal to 15 kb / s but less than 42 kb / s this number is set to 4 . for generality , in the following",
    "we assume that the number of parallel uploads is set to @xmath3 .    in leecher state , the choking algorithm",
    "is executed periodically at every rechoke period , i.e. , every ten seconds , and in addition , whenever an unchoked and interested peer leaves the peer set , or whenever an unchoked peer switches its interest state . as a result , the time interval between two executions of the algorithm can sometime be shorter than a rechoke period . every time the choking algorithm is executed",
    ", we say that a new _ round _ starts , and the following steps are taken .    1 .",
    "[ step : l1 ] the local peer orders interested remote leechers according to the rates at which it received data from them , and ignores leechers that have not sent any data in the last thirty seconds .",
    "these so - called _ snubbed _ peers are excluded from consideration in order to guarantee that only contributing peers are unchoked .",
    "[ step : l2 ] the @xmath4 leechers with the highest rates are unchoked via a",
    "_ regular unchoke_. 3 .",
    "[ step : l3 ] in addition , every three rounds , an interested candidate peer is chosen _ at random _ to be unchoked via an _",
    "optimistic unchoke_. if this peer is not unchoked via a regular unchoke , it is unchoked via an optimistic unchoke and the round completes .",
    "if this peer is already unchoked via a regular unchoke , a new candidate peer is chosen _ at random_. 1 .",
    "[ step : l3a ] if the candidate peer is interested in the local peer , it is unchoked via an optimistic unchoke and the round completes .",
    "[ step : l3b ] otherwise , the candidate peer is unchoked anyway , and step  [ step : l3a ] is repeated with a new randomly chosen candidate . the round completes when an interested peer is found or when there are no more peers to choose , whichever comes first .",
    "although more than @xmath3 peers can be unchoked by the algorithm , only @xmath3 interested peers can be unchoked in the same round .",
    "unchoking non - interested peers improves the reaction time in case one of those peers becomes interested during the following rechoke period ; data transfer can begin right away without waiting for the choking algorithm to be executed .",
    "furthermore , optimistic unchokes serve two major purposes .",
    "they function as a resource discovery mechanism to continually evaluate the upload bandwidth of peers in the peer set in an effort to discover better partners .",
    "they also enable new peers that do not have any pieces yet to bootstrap into the torrent by giving them some initial pieces without requiring any reciprocation .    in the seed state , older versions of the official client , as well as many current versions of other clients , perform the same steps as in leecher state , with the only difference being that the ordering in step  [ step : l1 ]",
    "is based on data transmission rates from the seed , rather than to it .",
    "consequently , peers with high download capacity are favored independently of their contribution to the torrent , a fact that could be exploited by free - riders  @xcite .    in version 4.0.0 ,",
    "the official client introduced a modified choking algorithm in seed state . according to this modified algorithm",
    ", a seed performs the same fixed number of @xmath3 parallel uploads as in leecher state , but with different peer selection criteria .",
    "the algorithm is executed periodically at every rechoke period , i.e. , every ten seconds , and in addition , whenever an unchoked and interested peer leaves the peer set , or whenever an unchoked peer switches its interest state .",
    "every time the choking algorithm is executed , a new round starts , and the following steps are taken .    1 .   [ step : s1 ] the local peer orders the interested and _ unchoked _ remote leechers according to the time it has sent them an unchoke message , most recently unchoked peers first .",
    "this is the initial time the local peer had unchoked them ; if the local peer keeps uploading to them for more than one rechoke periods , it does not send them additional unchoke messages .",
    "this step only considers leechers to which an unchoke message has been sent recently ( less than twenty seconds ago ) or leechers that have pending requests for blocks ( to ensure that they get the requested data as soon as possible ) . in case of a tie , leechers are ordered according to their download rates from the seed , fastest ones first , just like the old algorithm did .",
    "note that , as leechers do not upload anything to seeds , the notion of snubbed peers does not exist in seed state .",
    "[ step : s2 ] the number of optimistic unchokes to perform _ over the duration of the next three rechoke periods _ ,",
    "i.e. , thirty seconds , is determined using a heuristic .",
    "these optimistic unchokes are uniformly spread over this duration , performing @xmath5 optimistic unchokes per rechoke period . due to rounding issues",
    ", @xmath5 can be different for each of the three rechoke periods .",
    "for instance , when the number of parallel uploads is 4 , the heuristic dictates that only two optimistic unchokes be performed in the entire thirty - second period .",
    "thus , one optimistic unchoke is performed during each of the first two periods and none during the last .",
    "[ step : s3 ] at each rechoke period , the first @xmath6 leechers in the list from step  [ step : s1 ] are unchoked via regular unchokes .",
    "step  [ step : s1 ] includes the key feature of the modified algorithm in seed state . on the one hand , leechers are no longer unchoked based on their observed download rates from the seed , but mainly based on the last time an unchoke message was sent to them .",
    "thus , after a seed has been sending data to a leecher for six rechoke periods ( when the number of parallel uploads is 4 ) , it will stop doing so and select another leecher to serve . in this manner ,",
    "a seed will provide service to all leechers sooner or later , preventing any single leecher from monopolizing it .",
    "on the other hand , according to the official client s version notes , this modified choking algorithm in seed state also aims to reduce the amount of duplicate data a seed needs to upload before it has pushed out a full copy of the content into the torrent .",
    "it strives to achieve that by keeping leechers unchoked for six rechoke periods , in order to prevent high leecher turnover from resulting in the transmission of the same pieces to different leechers .",
    "interestingly , the most recent version of the official client has reverted back to the original choking algorithm in seed state .",
    "although the modified version of the algorithm we described here is more robust to modified free - riding implementations , it might be less efficient in torrents with compliant peers .",
    "since the company behind the official client has been targeting legal content distribution , where client alteration would arguably be harder , it may aim to optimize the implementation for this scenario .",
    "some other implementations have included a _ super - seeding _ feature with similar goals , in particular to assist a service provider with limited upload capacity in seeding a large torrent .",
    "a seed with this feature masquerades as a normal leecher with no data .",
    "as other peers connect to it , it will advertise a piece that it has never uploaded before or that is very rare .",
    "after uploading this piece to a given leecher , the seed will not advertise any new pieces to that leecher until it sees another peer s have message for the piece , indicating that the leecher has indeed shared the piece with others .",
    "this algorithm has anecdotally resulted in much higher seeding efficiencies by reducing the amount of duplicate pieces uploaded by the seed , and limiting the amount of data sent to peers who do not contribute  @xcite . a single seed running in this mode is rumored to be able to upload a full copy of the content after only uploading 105% of the content data volume .",
    "since the official client has not implemented this feature , our experiments do not measure its effect on the efficiency of the initial seed .",
    "we instead measure the number of duplicate pieces uploaded when employing the modified choking algorithm in seed state .",
    "all our experiments were performed in private torrents on the planetlab experimental platform  @xcite .",
    "planetlab s convenient tools for collecting measurements from geographically dispersed clients greatly facilitated our work .",
    "for instance , in order to deploy and launch bittorrent clients on planetlab nodes , we utilize the _ pssh _ tools  @xcite .",
    "planetlab nodes are typically not behind nats , so each peer in our experiments can be uniquely identified by its ip address .",
    "we chose to experiment on private torrents , as opposed to simulation , in order to examine both individual peer decisions and the resulting impact on the torrent .",
    "although simulation would have enabled us to run many more experiments , it would have been a difficult task to accurately model the dynamics of a bittorrent system .",
    "private torrents allow us to observe and record the behavior of all peers in real scenarios .",
    "we can also vary experimental parameters , such as peers upload rate limits , which helps us distinguish which factors are responsible for the observed behavior .",
    "we performed experiments with the different torrent configurations described in section  [ configurations ] .",
    "there are no agreed - upon parameters in the bittorrent community , so we set our experiment parameters empirically and based on current best practice . during each experiment , leechers download a single file of 113 mb that consists of 453 pieces , 256 kb each .    all our experiments were performed with peers that do not change their available upload bandwidth during the download , or disconnect before receiving a complete copy of the file . there is a single initial seed , and in all experiments , all leechers join the torrent at the same time , emulating a flash crowd scenario .",
    "although the behavior of the system might be different with other peer arrival patterns , we are interested in examining peer decisions under circumstances of high load .",
    "the initial seed stays connected to the torrent for the duration of the experiment , while leechers disconnect immediately after completing their download .",
    "we consider both a well - provisioned and an underprovisioned initial seed .",
    "seed upload capacity has already been shown to be critical to the performance at the beginning of a torrent s lifetime , before the seed has uploaded a complete copy of the content  @xcite . however , the impact of an initial seed with limited capacity on system properties is not clear . nevertheless , appropriate provisioning of initial seeds is of critical importance to content providers .",
    "we attempt to sketch recommendations on this issue in section  [ seed - provisioning ] based on our experimental results .",
    "the available bandwidth of planetlab nodes is relatively high for typical torrents .",
    "we define upload limits on the leechers and seed to model realistic scenarios , but _ do not define any download limits _ , nor do we attempt to match our upload limits to inherent limitations of planetlab nodes .",
    "thus , we might end up defining a high upload limit on a node that can not possibly send data that fast , due to network or other problems .",
    "our results include the effects of local network fluctuations , but we believe that the conclusions we draw are not predicated on such effects .",
    "our experiments utilize 41 planetlab nodes , of which 2 are located in canada and the rest are spread across the continental united states .",
    "we conduct all runs of an experiment consecutively in time on the same set of machines .",
    "we collect our measurements using a modified version of the official bittorrent implementation , instrumented to record interesting events and peer interactions .",
    "our instrumented client , which is based on version 4.0.2 of the official client ( released in may 2005 ) , is publicly available for download  @xcite .",
    "we collect a log of each message sent or received along with the content of the message , a log of each state change , the rate estimates for remote peers used by the choking algorithm , and other relevant information , such as the internal states of the choking algorithm .",
    "otherwise specified , we run our experiments with the default client parameters .",
    "we experimented with several torrent configurations .",
    "the parameters we changed from configuration to configuration are the upload rate limits for the seed and leechers and the upload bandwidth distribution of leechers . as mentioned before , leecher download bandwidth is never artificially limited ,",
    "although local network characteristics may impose an effective upload or download limit .",
    "we ran experiments with the following configurations .    * _ two - class_. leechers are divided into two categories with different upload limits .",
    "this configuration enables us to observe system behavior in highly bipolar scenarios .",
    "our experiments involve similar numbers of slow peers , with 20  kb / s upload limit , and fast peers , with 200  kb / s upload limit . * _ three - class_. leechers are divided into three categories with different upload limits .",
    "this configuration helps us identify the qualitative behavioral differences of more distinct classes of peers .",
    "our experiments involve similar numbers of slow peers , with 20  kb / s upload limit ; medium peers , with 50  kb / s upload limit ; and fast peers , with 200  kb / s upload limit .",
    "* _ uniform - increase_. upload limits are defined on leechers according to a uniform distribution , with a small 5 kb / s step .",
    "the slowest leecher has an upload limit of 20 kb / s , the second slowest a limit of 25 kb / s , and so on .",
    "this configuration provides insight into the behavior of torrents with more uniform distribution of peer bandwidth .",
    "our graphs in section  [ results ] correspond to experiments run with the three - class configuration , but the conclusions we draw accord well with the results of other experiments .",
    "we stress distinctions where appropriate .",
    "we also ran preliminary experiments where the initial seed disconnects after uploading an entire copy of the content , but leechers remain connected after they complete their download , serving as seeds for a short time .",
    "peers in these experiments have somewhat lower completion times thanks to the extra help from leechers in content dissemination , but appear otherwise similar .",
    "the goal of our experiments is to understand the dynamics of the choking algorithm . to that end , we consider four metrics .",
    "clustering : : :    the choking algorithm aims to encourage high peer reciprocation by    favoring peers who upload .",
    "therefore , we expect that peers will more    frequently unchoke other peers with similar upload capacities , since    those are the ones that can reciprocate with high enough rates . the    rules for peer selection by qiu _",
    "et al . _",
    "@xcite also support this    hypothesis .",
    "consequently , it is expected that the choking algorithm    converges towards good clustering shortly after the beginning of the    download by grouping together peers with similar upload capacity .",
    "this    behavior , however , is not guaranteed and has never been previously    verified experimentally .",
    "indeed , let s consider a simple example .",
    "peer    @xmath0 will unchoke peer @xmath1 if @xmath1    has been uploading data at a high rate to @xmath0 . in order    for @xmath1 to continue uploading to @xmath0",
    ",    @xmath0 should also start sending data to @xmath1 at a    high enough rate . the only way to initiate such a reciprocal    relationship is via an optimistic unchoke . yet , since optimistic    unchokes are performed at random , it is not clear whether and when    @xmath0 and @xmath1 will get a chance to interact .",
    "therefore , in order to preserve clustering , optimistic unchokes should    successfully initiate interactions between peers with similar upload    capacities .",
    "in addition , such interactions should persist despite    potential disruptions , such as optimistic unchokes by others or    network bandwidth fluctuations .",
    "sharing incentives : : :    a major goal of the choking algorithm is to give peers an incentive to    share data . the algorithm strives to encourage peers to contribute ,    since doing so will improve their own download rates .",
    "we evaluate the    effectiveness of these sharing incentives by measuring how peers    upload contributions affect their download completion time .",
    "we expect    that the more a peer contributes , the sooner it will complete its    download .",
    "however , we do not expect to observe strict _ data volume    fairness _",
    ", where all peers contribute the same amount of data ; peers    who upload at high rates may end up contributing more data than    others .",
    "they should be rewarded though , by completing their download    sooner .",
    "upload utilization : : :    upload utilization constitutes a reliable metric of efficiency in 2p    content distribution systems , since the total upload capacity of all    peers represents the maximum throughput the system can achieve as a    whole . as a result ,",
    "a 2p content distribution protocol should aim at    maximizing peers upload utilization .",
    "we are interested in measuring    this utilization in bittorrent systems , and identifying the factors    that can adversely affect it .",
    "seed service : : :    the modified choking algorithm in seed state bases its decisions on    the time peers have been waiting for seed service , in addition to    their download rates from the seed .",
    "thus , we expect to see uniform    sharing of the seed upload bandwidth among all peers",
    ". it should also    be impossible for fast leechers to monopolize the seed .",
    "we now report the results of representative experiments that demonstrate our main observations . for conciseness , we present only results drawn from the three - class torrent configuration , but our conclusions are consistent with our observations from other configurations as well .",
    "we first examine a scenario with a well - provisioned initial seed , i.e. , a seed that can sustain high upload rates .",
    "we expect this to be common for commercial torrents , whose service providers typically make sure there is adequate bandwidth to initially seed the torrent",
    ". an example might be red hat distributing its latest linux distribution .",
    "section  [ under_provisioned_seed ] shows that peer behavior in the presence of an underprovisioned initial seed can differ substantially .",
    "we consider an experiment with a single seed and 40 leechers : 13 slow peers ( 20  kb / s upload limit ) , 14 medium peers ( 50  kb / s upload limit ) , and 13 fast peers ( 200  kb / s upload limit ) .",
    "the seed , which is represented as peer 41 in the following figures , is limited to upload 200  kb / s , as fast as a fast peer .",
    "different peer upload limits are defined in order to model different levels of contribution .",
    "the results we report are based on thirteen experiment runs .",
    "although the official bittorrent implementation would set the number of parallel uploads based on the defined upload limit ( 4 for the slow , 5 for the medium , and 10 for the fast peers and the seed ) , we set this number to 4 for all peers , which in fact is what most other clients would do .",
    "this ensures homogeneous conditions in the torrent and makes it easier to interpret the results .                  as explained in section  [ rationale ] , we expect to observe clustering based on peers upload capacities .",
    "figure  [ fig : corr - unchoke - upload - onethird - seed-200 ] demonstrates that peers indeed form clusters .",
    "the figure plots the total time peers unchoked each other via a regular unchoke , averaged over all runs of the experiment .",
    "it is clear that peers in the same class cluster together , in the sense that they prefer to upload to each other .",
    "this behavior becomes more apparent when considering a metric such as the _ clustering index_. we define this for a given peer in a given class ( fast , medium , or slow ) as the ratio of the duration of regular unchokes to the peers of its class over the duration of regular unchokes to all peers .",
    "a high clustering index indicates a strong preference to upload to peers in the same class .",
    "figure  [ fig : clustering - index - onethird - seed - fast ] plots this index for all peers and demonstrates that peers prefer to unchoke other peers in their own class , thereby forming clusters .",
    "further experiments with upload limits following a uniform distribution also show that peers have a clear preference for peers with similar upload capacities .",
    "although from figure  [ fig : corr - unchoke - upload - onethird - seed-200 ] it might seem that slow peers show a proportionally stronger preference for their own class , this is an artifact of the experiment .",
    "slow peers take longer to complete their download ( as shown in figure  [ fig : completion - cdf - onethird - seed-200-class ] ) , and so they perform a higher number of regular unchokes on average than fast peers . also notice that medium peer 27 interacts frequently with slow peers .",
    "_ this peer s download capacity is inherently limited _",
    ", arguably due to machine or local network limitations , as seen in figure  [ fig : download - speed - onethird - seed-200 ] that plots observed peer download speeds over time . as a result",
    ", it stays connected to the torrent even after all other peers of its class have completed their download . during that last period it has to interact with slow leechers , since those are the only ones left .",
    "figure  [ fig : corr - unchoke - upload - onethird - seed-200 ] also shows that reciprocation is not necessarily mutual .",
    "slow peers frequently unchoke medium peers , but the favor is not returned . indeed , the slow peers unchoked medium peers for a total of 501,844 seconds , as shown by the relatively dark center - left partition . however , the medium peers unchoked slow peers for only 273,985 seconds , as shown by the lighter bottom - center .",
    "this lack of reciprocation is due to the fact that slow peers are of little use to medium ones , since they can not offer high enough upload rates .    in summary ,",
    "the choking algorithm facilitates clustering , where peers mostly interact with others in the same class , with the occasional exception of random optimistic unchokes .",
    "we now examine whether bittorrent s choking algorithm provides effective sharing incentives , in the sense that a peer who contributes more to the torrent is rewarded by completing its download sooner than the rest .",
    "figure  [ fig : completion - cdf - onethird - seed-200-class ] indeed demonstrates this to be the case .",
    "we plot the cumulative distribution of completion time for the three classes of leechers in the previous experiment .",
    "the vertical line in the figure represents the _ optimal completion time _ , the earliest possible time that any peer could complete its download .",
    "this is the time the seed finished uploading a complete copy of the content . on average ,",
    "this time is around 650 seconds for the experiment .",
    "fast leechers complete their download soon after the optimal completion time .",
    "medium and , especially , slow leechers take significantly longer to finish .",
    "contributing to the torrent enables a leecher to enter the fast cluster and receive data at higher rates .",
    "this in turn ensures a short download completion time . the choking algorithm does indeed foster reciprocation by rewarding contributing peers . in experiments with upload limits following a uniform distribution ,",
    "the peer completion time is also uniform : completion time decreases when a peer s upload contribution increases .",
    "this further indicates the algorithm s consistent properties with respect to effective sharing incentives .",
    "note , however , that this does not imply any notion of data volume fairness .",
    "fast peers end up uploading significantly more data than the rest .",
    "figure  [ fig : agg - amount - bytes - onethird - seed-200 ] , which plots the actual volume of uploaded data averaged over all runs , demonstrates that fast peers are the major contributors to the torrent .",
    "most of their bandwidth is expended on other fast peers , per the clustering principle .",
    "interestingly , the slow leechers end up downloading more data from the seed .",
    "the seed provides equal service to peers of any class , as we show in section  [ seed_service - fast ] , but slow peers have more opportunities than others to download from the seed , since they take longer to complete .    in summary",
    ", bittorrent provides effective incentives for peers to contribute , as doing so will reward a leecher with significantly higher download rates .",
    "recent studies  @xcite have shown that limited free - riding is possible in bittorrent under specific circumstances , although such free - riders do not appear to severely impact the quality of service for compliant peers",
    ". however , these studies do not significantly challenge the effectiveness of sharing incentives enforced by the choking algorithm .",
    "although free - riding is possible , such peers typically achieve lower download rates than they could if they followed the protocol . as a result ,",
    "if peers wish to obtain the highest possible rates , it is in their best interest to conform to the protocol .",
    "we now turn our attention to performance by examining whether the choking algorithm can maintain high utilization of peers upload bandwidth .",
    "figure  [ fig : up - util - cdf - onethird - seed-200 ] is a scatterplot of such utilization in the aforementioned setup .",
    "a utilization of 1 represents taking full advantage of the available upload capacity .",
    "average utilization for each of the thirteen runs is plotted once per minute .",
    "the metric is torrent - wide : for each minute , we sum the upload bandwidth used by the peers during that minute , and divide by the upload capacity available over that minute for all peers still connected at the minute s end .",
    "the total capacity decreases over time as peers complete their downloads and disconnect .",
    "utilization is low at the beginning and the end of the session , but close to optimal for the majority of the download .",
    "it rises slightly after approximately 15 minutes , which corresponds to when fast peers leave the torrent .",
    "perhaps the four - peer limit on parallel uploads restricts fast peers utilization . in any case , utilization is good overall .    in summary ,",
    "the choking algorithm , in cooperation with other bittorrent mechanisms such as rarest - first piece selection , does a good job of ensuring high utilization of the upload capacity of leechers during most of the download .",
    "low utilization during the startup period may pose a problem for small contents , for which it could dominate the total download time .",
    "we discuss a potential solution to this in section  [ tracker - extension ] .",
    "the official client introduced a modified choking algorithm in seed state , as described in section  [ choking_algorithm ] , although it reverted back to the original in the most recent version .",
    "the client s version notes claim that the modified algorithm aims to reduce the amount of duplicate data a seed needs to upload before it has pushed out a full copy of the content into the torrent .",
    "we study this modified algorithm for the first time and examine this claim .",
    "figure  [ fig : seed - sku - sru - seed-200 ] shows the duration of unchokes , both regular and optimistic , performed by the seed in a representative run of the aforementioned setup .",
    "leechers are unchoked in a uniform manner , regardless of upload speed .",
    "fast peers , those with higher peer ids , complete their download sooner , after which time the seed divides its upload bandwidth among the remaining leechers .",
    "leecher 8 is the last to complete ( as shown in figure  [ fig : download - speed - onethird - seed-200 ] ) , and receives exclusive service from the seed during the end of its download .",
    "we therefore see that the modified choking algorithm in seed state provides uniform service ; this is because it bases its unchoking decisions on the time peers have been waiting for seed service . as a result , the risk of fast leechers downloading the entire content and quickly disconnecting from the torrent is significantly reduced .",
    "furthermore , this behavior would mitigate the effectiveness of exploits that attempt to monopolize seeds  @xcite .    according to anecdotal evidence  @xcite",
    ", initial seeds using the old algorithm might have to upload 150% to 200% of the total content size before other peers become seeds .",
    "our experiments show that the modified algorithm avoids this problem .",
    "figure  [ fig : seed - unique - piece - seed-200 ] plots the number of pieces uploaded by the seed during the download session for a representative run .",
    "527 pieces are sent out before an entire copy of the content ( 453 pieces ) has been uploaded .",
    "thus , the duplicate piece overhead is around 14% , indicating that the modified choking algorithm in seed state avoids unnecessarily uploading duplicate pieces to a certain extent .",
    "this number was consistent across all our experiments , ranging from 11 to 15% .",
    "however , to the best of our knowledge , there has been no experimental evaluation of the corresponding overhead in the old algorithm , so it is not clear how much of an improvement this is .    in any case",
    ", 14% duplication represents an opportunity for improvement .",
    "the official client always issues requests for pieces in the rarest - pieces set in the same order . as a result",
    ", leechers might end up requesting the same piece from the seed at approximately the same time",
    ". it would be preferable for leechers to request rarest pieces in random order instead .",
    "we now turn our attention to a scenario with an underprovisioned initial seed and demonstrate that the seed upload capacity is critical to performance during the beginning of a torrent s lifetime .",
    "the experiment we present here involves a single seed and 39 leechers , 12 slow , 14 medium , and 13 fast .",
    "these nodes are different than the nodes used in the previous experiment .",
    "the initial seed , represented as peer 27 in the following figures , is in this case limited to 100  kb / s , instead of 200  kb / s .",
    "we set the number of parallel uploads again to four for the seed and all the leechers .",
    "the results we present are based on eight experiment runs and are consistent with our observations from experiments with other torrent configurations .",
    "peer behavior in the presence of an underprovisioned initial seed is substantially different than with a well - provisioned one .",
    "figure  [ fig : corr - unchoke - upload - onethird - seed - medium ] shows the total time peers unchoked each other via a regular unchoke , averaged over all runs of the experiment .",
    "in contrast to figure  [ fig : corr - unchoke - upload - onethird - seed-200 ] , there is no discernible clustering among peers in the same class .",
    "the lack of clustering in the presence of an underprovisioned initial seed becomes more apparent when considering the clustering index metric defined in section  [ clustering - fast ] .",
    "figure  [ fig : clustering - index - onethird - seed - medium ] shows this metric for all peers .",
    "they are all similar , indicating a lack of preference to unchoke peers in any particular class .",
    "figure  [ fig : cumul - interest - run1-seed - medium ] attempts to explain this behavior by plotting the peer availability of each peer to every other peer , averaged over all runs of the experiment .",
    "we define the _ peer availability _ of a downloading peer @xmath7 to an uploading peer @xmath8 as the ratio of the time @xmath8 was interested in @xmath7 to the time that @xmath7 spent in the peer set of @xmath8 .",
    "a peer availability of 1 means that the uploading peer was always interested in the downloading peer , while a peer availability of 0 means that the uploading peer was never interested in the downloading peer .",
    "we can see that the fast peers have poor peer availability to all other peers .",
    "this is because the seed is uploading new pieces at a low rate , so even if it uploaded only to fast peers , those would quickly replicate every piece as it was completed , remaining non - interested for the rest of the time .",
    "the same is not true for slow peers , however , since they upload even more slowly than the seed .",
    "in addition , when a fast leecher is unchoked by a slow leecher , it will always reciprocate with high rates , and thereby be preferred by the slow leecher . as a result",
    ", fast peers will get new pieces even from medium and slow peers . in this manner",
    ", fast peers prevent clustering by taking up slower peers unchoke slots and thus breaking any clusters that might be starting to form .",
    "this prevents medium and slow peers from clustering together , even though the seed is fast enough with respect to them .",
    "further experiments with other torrent configurations , including one with the initial seed further limited to 20  kb / s , confirm this conclusion .",
    "in summary , when the initial seed is underprovisioned , the choking algorithm does not enable peer clustering",
    ". we study in the next section how this lack of clustering affects the effectiveness of sharing incentives .",
    "we now examine how the lack of clustering affects the effectiveness of sharing incentives .",
    "in particular , we investigate whether fast peers still complete their download sooner than the rest .",
    "figure  [ fig : completion - cdf - onethird - seed - medium - class ] shows that this is no longer the case .",
    "most peers complete their download at approximately the same time .",
    "the points in the tail of the figure are due to a single slow peer , peer 8 , which completed its download last in every run .",
    "this planetlab node has a poor effective download speed independently of the choking algorithm , likely due to machine or local network limitations .",
    "all other peers , for all runs , complete their download less than 2,000 seconds after the beginning of a run . clearly , seed upload capacity is the performance bottleneck .",
    "once the seed finishes uploading a complete copy of the content , all peers complete soon thereafter . since uploading data to others",
    "does not shorten a peer s completion time , bittorrent s sharing incentives do not seem to be effective in this situation .",
    "fast peers are again the major contributors in the torrent , but in this case their upload bandwidth is expended equally across other fast and slower peers alike .",
    "figure  [ fig : agg - amount - bytes - onethird - seed - medium ] , which plots the amount of uploaded data between each peer pair , shows that fast peers made the most contributions , distributing their bandwidth evenly to all other peers .    in summary ,",
    "when the initial seed is underprovisioned , the choking algorithm does not provide effective incentives to contribute . nevertheless , the available upload capacity of fast peers is effectively utilized to replicate the pieces being uploaded by the seed .",
    "interestingly , even with a slow seed , upload utilization remains relatively high , as shown in figure  [ fig : up - util - cdf - onethird - seed - medium ] .",
    "leechers manage to exchange data productively among themselves once new pieces are downloaded from the seed , so that the lack of clustering does not degrade overall performance significantly .",
    "the bittorrent design seems to lead the system to do the right thing : fast peers contribute their bandwidth to reduce the burden on the initial seed , helping disseminate the available pieces to slower peers .",
    "although this destroys clustering , it improves overall efficiency , which is a reasonable trade - off given the situation .",
    "we also experimented with a seed limited to an upload capacity of 20  kb / s .",
    "figure  [ fig : up - util - cdf - onethird - seed - slow ] shows that , with this extremely low seed capacity , there are few new pieces available to exchange at any point in time , and each new piece gets disseminated rapidly after it is retrieved from the seed .",
    "the overall upload utilization is now low .",
    "slow peers exhibit slightly higher utilization than the rest , since they do not need many available pieces to use up their available upload capacity .    in summary , even in situations",
    "where the initial seed is underprovisioned , the global upload utilization can be high .",
    "however , our experiments only involve compliant clients , who do not try to adapt their upload contributions according to a utility function of the observed download speed . on the other hand , in an environment with free - riders and an underprovisioned seed",
    ", one might expect a lower upload utilization due to the lack of altruistic peer contributions .",
    "we now discuss two limitations of the choking algorithm that we identified through our experiments : the initial seed upload capacity is fundamental to the proper operation of the incentives mechanism , and peers take some time to reach full upload utilization at the beginning of the download session .",
    "when the initial seed is underprovisioned , the choking algorithm does not lead to the clustering of similar - bandwidth peers . even without clustering , however , we observed high upload utilization .",
    "interestingly , in the presence of a slow initial seed , the protocol mechanisms lead the fast leechers to contribute to the download of all other peers , fast or slow , thereby improving performance .    however , whenever feasible , one should engineer adequate initial seed capacity in order to allow fast leechers to achieve optimal performance .",
    "our results show that the lack of clustering occurs when fast peers can not maintain their interest in other fast peers . in order to avoid this situation ,",
    "the initial seed should _ at least be able to upload data at a speed that matches that of the fastest peers in the torrent_. this suggestion is of course a rule - of - thumb guideline , and assumes that the service provider knows a priori the maximum upload capacity of the peers that may join the torrent in the future . in practice ,",
    "reasonable bounds could be derived from measurements or from an analysis of deployed network technologies .",
    "further research is needed to evaluate the exact impact of initial seed capacity .",
    "we are currently developing an analytical model that attempts to express the effect of this parameter on peer performance .",
    "when a new leecher first joins the torrent , it connects to a random subset of already - connected peers that are returned by the tracker .",
    "however , in order to reach its optimal bandwidth utilization , this new leecher needs to exchange data with those peers that have a similar upload capacity to itself .",
    "if there are few such peers in the torrent , it may take some time to discover them , since this has to be done via random optimistic unchokes that occur only once every 30 seconds .",
    "consequently , it might be preferable to utilize the tracker in matching similar - bandwidth leechers . in this manner ,",
    "the duration of the discovery period could decrease and the upload utilization would be high even at the beginning of a peer s download . the new leecher could _ report its available upload capacity to the tracker when joining the torrent_. this parameter can be configured in the client software , or may possibly be the actual maximum upload rate measured during previous downloads .",
    "the tracker would then reply with a random subset of peers as usual , along with their upload capacities .",
    "the new leecher could optionally perform optimistic unchokes first to peers with similar upload capacity , in an effort to discover the best partners sooner .    using this new tracker protocol extension ,",
    "if the peer set contains only a few leechers with similar upload capacity , they will discover each other quickly .",
    "leechers should employ some means of detecting and punishing others who lie about their available upload capacity .",
    "for instance , if a leecher does not respond to an optimistic unchoke with an upload rate close to the one it announced to the tracker , that leecher will not be unchoked again for some period of time . in this manner ,",
    "the possibility of a remote leecher initiating a new interaction is left open , yet the benefit from free - riding behavior is limited since free - riders will eventually end up choked by most peers . since the tracker still returns a random subset of peers , independently of the advertised upload capacity , there is no risk of creation of disconnected clusters . in a collaborative environment , however , the tracker might even want to return peers based on their capacity , as previously proposed  @xcite , in order to speed up cluster creation even more .",
    "of course , although the proposed tracker extension is promising , further investigation is required to verify that it will work as expected .",
    "there has been a fair amount of work on the performance and behavior of bittorrent systems .",
    "bram cohen , the protocol s creator , has described bittorrent s main mechanisms and their design rationale  @xcite .",
    "there have been several measurement studies examining real bittorrent traffic .",
    "et al . _",
    "@xcite measure several peer characteristics derived from the tracker log for the redhat linux 9 iso image , including the number of active peers , the proportion of seeds and leechers , and the geographical spread of peers .",
    "they observe that while there is a correlation between upload and download rates , indicating that the choking algorithm is working , the majority of content is contributed by only a few leechers and the seeds .",
    "et al . _",
    "@xcite study the content availability , integrity , and download performance for torrents on an once - popular tracker website .",
    "they observe that the centralized tracker component could potentially be a bottleneck .",
    "et al . _",
    "@xcite study bittorrent sharing communities .",
    "they find that sharing - ratio enforcement and the use of rss feeds to advertise new content may improve peer contributions , yet torrents with a large number of seeds present ample opportunity for free - riding .",
    "furthermore , guo _ et al . _",
    "@xcite demonstrate that the peer arrival and departure rate is exponential , and that performance fluctuates widely in small torrents .",
    "inter - torrent collaboration is proposed as an alternative to providing extra incentives for leechers to stay connected after the completion of their download . a more recent study by legout _",
    "et al . _",
    "@xcite presents the results of extensive experiments on real torrents .",
    "they show that the rarest - first and choking algorithms play a critical role in bittorrent s performance , and claim that the replacement with a volume - based tit - for - tat algorithm , as proposed by other researchers  @xcite , is not appropriate .",
    "however , they do not identify the reasons behind the properties of the choking algorithm and fail to examine its dynamics due to the single - peer viewpoint .",
    "several analytical studies have formulated models for bittorrent - like protocols .",
    "et al . _",
    "@xcite provide a solution to a fluid model of bittorrent , where they study the choking algorithm and its effect on performance .",
    "they observe that optimistic unchoking may provide a way for peers to free - ride on the system .",
    "their model assumes peer selection based on global knowledge of all peers in the torrent , as well as uniform distribution of pieces .",
    "et al . _",
    "@xcite introduce a probabilistic model of bittorrent - like systems and argue that overall system performance does not depend critically on either altruistic peer behavior or the rarest - first piece selection strategy .",
    "et al . _",
    "@xcite characterize the complete design space of bittorrent - like protocols by providing a model that captures the fundamental trade - off between performance and fairness .",
    "whereas all these models provide valuable insight into the behavior of bittorrent systems , unrealistic assumptions limit their applicability in real scenarios  @xcite .",
    "other researchers have relied on simulations to understand bittorrent s properties .",
    "et al . _",
    "@xcite conducted an initial investigation of the impact of different peer arrival rates , peer capacities , and peer and piece selection strategies .",
    "et al . _",
    "@xcite utilize a discrete event simulator to evaluate the impact of bittorrent s core mechanisms and observe that the rate - based tit - for - tat strategy is ineffective in preventing unfairness in peer contributions .",
    "they also find that the rarest - first algorithm outperforms alternative piece selection strategies .",
    "however , they do not evaluate a peer set larger than 15 peers , whereas the official implementation has a default value of 80 .",
    "this may affect the results since the accuracy of the piece selection strategy is affected by the peer set size .",
    "furthermore , tian _ et al . _",
    "@xcite study peer performance towards the end of the download and propose a new peer selection strategy which enables more clients to complete their download after the departure of all the seeds .",
    "researchers have also looked into the feasibility of selfish behavior , when peers attempt to circumvent bittorrent mechanisms to gain unfair benefit .",
    "et al . _",
    "@xcite were the first to demonstrate that bittorrent exploits are feasible .",
    "they briefly describe an attack to the tracker and an exploit involving leechers lying about the pieces they have .",
    "et al . _",
    "@xcite argue that the choking algorithm is not sufficient to prevent free - riding and propose a new algorithm to enforce fairness in peers data exchanges .",
    "et al . _",
    "@xcite design and implement three exploits that allow a peer who does not contribute to maintain high download rates under specific circumstances . even though such selfish peers can obtain more bandwidth ,",
    "there is no considerable degradation of the overall system s quality of service .",
    "et al . _",
    "@xcite extend the work in  @xcite and demonstrate that limited free - riding is feasible even in the absence of seeds .",
    "they also describe selfish behavior in bittorrent sharing communities .",
    "in addition , sirivianos _",
    "et al . _",
    "@xcite evaluate an exploit based on maintaining a larger - than - normal view of the torrent .",
    "et al . _",
    "@xcite observe that high - capacity peers typically provide low - capacity ones with an unfair share of the data .",
    "they design a choking algorithm optimization that reallocates the superfluous upload bandwidth to others in order to maximize peer download rates .",
    "our work differs from all previous studies in its approach and results .",
    "we perform the first extensive experimental study of bittorrent in a controlled environment , by monitoring all peers in the torrent and examining peer behavior in a variety of scenarios .",
    "our results validate protocol properties that have not been previously demonstrated experimentally , and identify new properties related to the impact of the initial seed on clustering and sharing incentives .",
    "in this paper we presented the first experimental investigation of bittorrent systems that links per - peer decisions and overall torrent behavior .",
    "our results validate three bittorrent properties that , though believed to hold , have not been previously demonstrated experimentally .",
    "we show that the choking algorithm enables clustering of similar - bandwidth peers , fosters effective sharing incentives by rewarding peers who contribute , and achieves high peer upload utilization for the majority of the download duration .",
    "we also examined the properties of the modified choking algorithm in seed state and the impact of initial seed capacity on the overall system performance .",
    "in particular , we showed that an underprovisioned initial seed does not facilitate the clustering of peers and does not provide effective sharing incentives .",
    "however , even in such a case , the choking algorithm facilitates efficient utilization of the available resources by having fast peers help others with their download . based on our observations , we offered guidelines for content providers regarding seed provisioning , and discussed a proposed tracker protocol extension that addresses an identified limitation of the protocol .",
    "this work opens up many avenues for future research .",
    "we are currently developing an analytical model to express the impact of seed capacity on peer performance .",
    "it would also be interesting to run experiments with the old choking algorithm in seed state and compare its properties to the modified algorithm , especially with respect to the upload of duplicate pieces .",
    "in addition , we would like to investigate the impact of different numbers of regular and optimistic unchokes on the protocol s properties .",
    "it has recently been argued that there is a fundamental trade - off between these two kinds of unchokes  @xcite .",
    "the current values used by the protocol are intuition - based engineering choices ; we would like to conduct a systematic evaluation of system behavior under different parameter values .",
    "we wish to thank the anonymous reviewers and michael sirivianos for their invaluable feedback .",
    "n.  andrade , m.  mowbray , a.  lima , g.  wagner , and m.  ripeanu .",
    "influences on cooperation in bittorrent communities . in _ proc . of the workshop on economics of peer - to - peer systems ( p2pecon05 ) _ , philadelphia , pa , august 2005 .",
    "a. felber and e.  w. biersack .",
    "self - scaling networks for content distribution . in _ proc .",
    "of the international workshop on self- * properties in complex information systems ( self-*04 ) _ , bertinoro , italy , may 31june 2 , 2004 .",
    "m.  izal , g.  urvoy - keller , e.  w. biersack , p.  felber , a.  a. hamra , and l.  garcs - erice .",
    "dissecting bittorrent : five months in a torrent s lifetime . in _ proc .",
    "of pam04 _ , antibes juan - les - pins , france , april 2004 .",
    "j.  shneidman , d.  parkes , and l.  massoulie .",
    "faithfulness in internet algorithms . in _ proc . of the workshop on practice and theory of incentives and game theory in networked systems ( pins04 ) _ , portland , or ,",
    "september 2004 ."
  ],
  "abstract_text": [
    "<S> peer - to - peer protocols play an increasingly instrumental role in internet content distribution . </S>",
    "<S> it is therefore important to gain a complete understanding of how these protocols behave in practice and how their operating parameters affect overall system performance . </S>",
    "<S> this paper presents the first detailed experimental investigation of the peer selection strategy in the popular bittorrent protocol . by observing more than 40 nodes in instrumented private torrents , </S>",
    "<S> we validate three protocol properties that , though believed to hold , have not been previously demonstrated experimentally : the clustering of similar - bandwidth peers , the effectiveness of bittorrent s sharing incentives , and the peers high uplink utilization . </S>",
    "<S> in addition , we observe that bittorrent s modified choking algorithm in seed state provides uniform service to all peers , and that an underprovisioned initial seed leads to absence of peer clustering and less effective sharing incentives . based on our results , </S>",
    "<S> we provide guidelines for seed provisioning by content providers , and discuss a tracker protocol extension that addresses an identified limitation of the protocol . </S>"
  ]
}