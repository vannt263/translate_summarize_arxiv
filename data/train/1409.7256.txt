{
  "article_text": [
    "interactive graphics progresses us beyond the limitations of static statistical displays , in particular , for exploring multidimensional data . with a static image",
    ", we can only see one aspect of the data at a time .",
    "interactive graphics allows us to inspect data dynamically from multiple views .",
    "for example , we may draw a scatterplot of two variables and a stacked bar chart showing the proportions of missing values for the rest of the variables in a data set ( two stacked bars per variable ) .",
    "then we can highlight the bar that indicates the missing values of one variable , and the subset of points corresponding to these missing values in the scatterplot are highlighted immediately , so we can examine the conditional bivariate relationship in the scatterplot .",
    "the term `` interactive graphics '' can be ambiguous , as disclosed by @xcite in an editorial of _ computational statistics _",
    ": it may imply the direct manipulation of the graph itself , manipulation of the graph controls or even the command - line interaction with graphs .",
    "we primarily mean the direct manipulation on graphs , but other meanings still have their usefulness .",
    "for instance , we may change the bin width of a histogram through a slider or brush all the outliers in a scatterplot using a command line with a numeric criterion , achieving a higher degree of control than direct manipulation allows .",
    "the main tasks that an interactive statistical graphics system should support are as follows :    single display interactions , such as modifying the plot attributes ( brushing , zooming , panning , deletion ) and obtaining additional information ( querying graphical elements ) ;    linking between different displays of the same data set or related data sets .",
    "for example , suppose we have a scatterplot of the variable @xmath0 versus @xmath1 and a histogram of @xmath2 ( all three variables are from the same data set ) , when we highlight a subset of points in the scatterplot and we need to show the distribution of the subset of @xmath2 in the histogram as well .",
    "the first set of tasks is easier to solve  there are a lot of web applications that allow various single display interactions , for instance , gapminder @xcite , manyeyes @xcite , jmp @xcite and d3 @xcite .",
    "linked graphics , which is less common , allows changes across different displays as well as across different aggregation levels of the data .",
    "the key difficulty is how to let the plots be aware of each other s changes and respond both automatically and immediately .",
    "there are several types of linking between plots , one - to - one linking , categorical linking and geographical linking @xcite ; see @xcite , @xcite and @xcite for some early demonstrations and implementations .",
    "we will show how linking is related to , and achieved by , reactive programming in this paper .",
    "a number of stand - alone systems for interactive graphics exist .",
    "early systems include prim-9 , an interactive computer graphics system to picture , rotate , isolate and mask data in up to 9 dimensions @xcite .",
    "data desk @xcite and lisp - stat @xcite provided tight integration with interactive graphics as well as numerical modeling . in particular , lisp - stat is also a programmable environment like r @xcite , but , unfortunately , today r is the more popular choice .",
    "@xcite described a few desirable approaches toward programmable interactive graphics , which were not implemented in lisp - stat due to limitations of the toolkit .",
    "these are all relatively straightforward in the framework of r and qt @xcite .",
    "xgobi and ggobi ( @xcite ; @xcite ) , manet @xcite and mondrian @xcite support interactive displays of multivariate data , but lack extensibility and a tight integration with modeling in r. the * rggobi * package @xcite is an interface between r and ggobi based on the gtk+ toolkit .",
    "the * iplots * package @xcite provides high interaction statistical graphics ; it is written in java using the swing toolkit and communicates with r through the * rjava * package .",
    "one of the big challenges in the development of interactive statistical applications is to resolve a user s action on the data level .",
    "this is sometimes referred to as the `` plumbing '' of interactive graphics .",
    "@xcite ( @xcite , page 298 ) introduced the concept of a viewing pipeline for data plots .",
    "the pipeline takes the raw data , through transformation , standardization , randomization , projection , viewporting and graphical element in a plot .",
    "some components of the pipeline can be made implicit , such as the so - called `` window - to - viewport '' transformation ( i.e. , viewporting ) , due to technological advances in computer graphics toolkits .",
    "for example , qt can take care of such low - level details automatically .",
    "@xcite outlined a more general pipeline for interactive graphics , but it did not cover implementation details , which is the focus of this paper .",
    "the r package * cranvas * @xcite is an interactive graphics system built under the classical model / view / controller ( mvc ) architecture and adopts the reactive programming paradigm to achieve interactivity .",
    "figure  [ fig : pipeline ] shows a basic pipeline in the * cranvas * package and its most important components , mutaframes and metadata objects , which are `` reactive '' by design . the pipeline starts with a data source ( a mutaframe ) as the central commander of the system .",
    "any plot can modify the data source as the user interacts with the plot and , as soon as the mutaframe is modified , its reactive nature will propagate the changes to all other plots in the system automatically .",
    "in addition , each plot also has its own attributes that are described by the metadata beyond the mutaframes .",
    "a metadata object is also reactive , but it is only linked to a specific plot .",
    "for example , the bin width of a histogram is stored in its metadata , and when the user s action induces a change in this value , the histogram responds accordingly .",
    "the paper is organized as follows .",
    "we start with a discussion of the mvc design .",
    "section  [ sec : reactive ] describes the reactive programming paradigm relative to the mvc architecture , using * cranvas * as an example .",
    "section  [ sec : interaction ] provides specific examples of how interaction is realized .",
    "mvc is a software architecture design described originally by trygve reenskaug in the 1970s and in detail by @xcite .",
    "it is widely used in gui ( graphical user interface ) applications , including web applications @xcite .",
    "there have been a number of r packages utilizing the mvc architecture .",
    "for example , @xcite built an interactive gui system using the mvc design to explore linked data .",
    "the gui was based on the * rgtk * package , which later evolved into * rgtk2 * @xcite , and mvc was implemented in the * mvcclass * package .",
    "the main reason for the popularity of mvc is because it minimizes the dependencies between different components of an application .",
    "for example , let us assume that the model component consists of a data transformation , such as a square - root or log transformation .",
    "the model does not depend on the view , but the view depends on the model in the sense that if the data is changed or a different data transformation is chosen , the view has to be updated to reflect this change .",
    "the model developer therefore never needs to deal with the representation of the data on the screen .    in a traditional mvc design",
    ", the controller sends commands to both the model and the view to update their states .",
    "below is a minimal example in r code on how to brush a scatterplot under the mvc design .",
    "[ fig2 ]    when the user brushes the scatterplot , we can obtain the indices of the points under the brush rectangle ( denoted by ` i ` in the code above ) .",
    "then we pass the indices to the model to change the brush status ( the vector ` brushed ` ) and redraw the plot .        [ fig3 ]    decoupling the system into three components enables components to be accessed independently .",
    "for example , we can call the model or the view separately without modifying their source code .",
    "the problem with the traditional mvc design is that we have to be explicit about updating the model and the view in the controller . in the context of interactive graphics ,",
    "this can be a burden for developers .",
    "for instance , when there are multiple views in the system , the controller must notify all views explicitly of all of the changes in the system . when a new view is added to the system , the controller must be updated accordingly .",
    "below is what we normally do when we add a new view to the system .",
    "reactive programming is an object - oriented programming paradigm based on an event - listener model and targeted at the propagation of changes in data flows .",
    "we attach listeners on data objects such that ( different ) events will be triggered corresponding to changes in data . in the above example",
    ", the plot will be updated as soon as the object ` brushed ` is modified without the need to explicitly call ` view ( ) ` .",
    "this makes it much easier to express the logic of interactive graphics .",
    "we will discuss how it works and its application in * cranvas*. shiny @xcite is another application of reactive programming in the r community which makes it easy to interact between html elements and r , but it does not have a specific emphasis on statistical graphics .",
    "to provide interactive graphics in * cranvas * , there are two types of objects :    * data presented in the plots , often of a tabular form like data frames in r * metadata to store additional information of the plots such as the axis limits ; it is irregular like a list in r.    there are two approaches for making objects reactive : _ mutaframes _",
    "@xcite for the data object and _ reference classes _ @xcite for the metadata .",
    "the fundamental technique underlying them is the _ active binding _ in r , thanks to the work of the r core team ( in particular , luke tierney ) . for details ,",
    "see the documentation of ` makeactivebinding ` in r. both mutaframes and reference classes use active bindings to make elements inside them ( such as data columns or list members ) reactive whenever they are modified .",
    "active bindings allow events ( expressed as functions ) to be attached on objects and these events are executed when objects are assigned new values .",
    "below is an implementation with active bindings , expanding on the example code in the previous section .",
    "[ fig5 ]    we bind a function ` reactivemodel ( ) ` to the object ` reactivebrush ` through the base r function ` makeactivebinding ( ) ` .",
    "when we assign new values to the object ` reactivebrush ` , the function defined in ` reactivemodel ( ) ` will be called : inside the function , the logical variable ` b ` is modified by the indices ` i ` and the view is updated accordingly .",
    "the two lines below achieve the same goal as the mvc example in figure  [ fig : mvc - brush ] .",
    "[ fig6 ]        now our only task is to assign indices of the brushed points to ` reactivebrush ` , since the plot will be updated automatically .",
    "a real interactive graphics system is more complicated than the above toy example , but it shows the foundation of the pipeline .",
    "the two kinds of interactive objects in * cranvas * are explained in the next two sections , respectively .",
    "a mutaframe is an extension to the r data frame .",
    "they are mutable , which means that changes to its elements can be made anywhere regardless of the current environment . by comparison , a data frame",
    "can only be modified in the environment in which it was created , unless we use the nonlocal assignment operator ` < < - `",
    ". the difference is highlighted in the example below .",
    "[ fig8 ]    as we can see , ` mf ` can be modified inside ` f ( ) ` , but ` df ` can not , therefore , we can share the same mutaframe across multiple plots",
    ". another important feature of mutaframes is that we can attach listeners to them .",
    "a listener is essentially an r function which is called upon changes in the mutaframe . for interactive graphics , views",
    "are updated with listeners .",
    "below we create a mutaframe and attach a listener to it to redraw the scatterplot .",
    "[ fig9 ]    now whenever we update ` mf ` , the scatterplot will be updated accordingly . for example , we make a square - root transformation of the ` dist ` variable ( see figure  [ fig : mf - plots ] for the original plot and the transformed version ) .",
    "[ fig10 ]            a more complex but direct application of mutaframes is the example shown in the movie displayed in figure  [ tour ] : here , we see a two - dimensional grand tour @xcite through the flea data set provided in the * tourr * package @xcite .",
    "a two - dimensional tour consists of a series of projections into two - dimensional space . by choosing close consecutive projections ,",
    "a sense of continuity is preserved for the observer .",
    "this continuity allows us to identify clusters as groups of points that share a common fate ( e.g. , @xcite ) .",
    "internally , the movie is created by repeated changes to the @xmath1 and @xmath0 values displayed in a scatterplot , which are propagated to the view .",
    "[ fig13 ]    interactivity of a mutaframe can be propagated to its subsets , which allows multiple applications based on one mutaframe and its offsprings .",
    "for instance , we can select a subset of points in a scatterplot , obtain their indices and use the indices to subset the original mutaframe to draw a new plot .",
    "the new plot is then automatically connected with the original plot : when we interact with the new plot , the selection will be passed to the mutaframe and propagated to the original plot .",
    "this is similar to an example described in early work by @xcite .",
    "r reference classes were introduced in r version 2.12 .",
    "this made it possible to create objects with fields that can be accessed by reference .",
    "a consequence of this feature is that such objects can be used for storing metadata in the graphics system , and the data can be modified outside of plotting functions .",
    "for instance , we can store the axis limits in an object ` meta ` as ` meta$limits ` . in the terminology of reference classes , ` limits ` is called a _ field _ of ` meta ` . after the plot has been drawn , we are still able to modify its limits and the new limits will be available to the internal drawing subroutines of the plotting function .",
    "this is inconvenient , if not impossible , under the usual copy - on - modify semantics in r. the brushing example in figure  [ fig : mvc - brush ] is rewritten using reference classes .",
    "[ fig14 ]    we created a reference class object ` obj ` from the constructor ` objbrush ` , and this object has a field called ` .brushed ` which is a logical vector to store the brush status .",
    "the other field ` brushed ` is a function that acts as the controller : we can assign new values to it , and the view will be updated accordingly .",
    "we can also query the current brush status to , for example , explore the brushed subset of the data separately .",
    "the object ` obj ` can be modified anywhere in the system as desired , which is often not the case for normal r objects .",
    "we will show how reference classes work for interactions in single display applications later .",
    "what is more important is the extension by the * objectsignals * package @xcite based on reference classes .",
    "the objects created from this package are called `` signal objects , '' which are basically special reference classes objects with listeners attached on them .",
    "this is similar to mutaframes described before , but we can create objects of arbitrary structures .",
    "the difference between mutaframes and signal objects is similar to the difference between data frames and lists in r.      mutaframes and reference classes objects are extensively used in * cranvas * , although this may not be immediately obvious to the users .",
    "below we show some quick examples based on the ames housing data ( ames , ia , 20082012 ) .",
    "before we draw any plots in * cranvas * , we have to create a mutaframe using the function ` qdata ( ) ` .",
    "[ fig15 ]            the function ` qhist ( ) ` draws a histogram of the sale price , ` qbar ( ) ` draws a bar chart of the number of bathrooms , and ` qscatter ( ) ` draws a scatterplot of the sale price against the living area .",
    "all plotting functions have to take a ` data ` argument , which is a mutaframe . inside each function",
    ", listeners will be built on the data so changes in the plot can be propagated back to the data object and further passed to other plots .",
    "the returned value of a plotting function contains the signal object , which can be retrieved from the attributes of the returned value .",
    "the user can manipulate the signal object and the plot can respond to the changes because a number of listeners have been attached to it internally when we call the plotting function .",
    "figures  [ fig : hist ] and  [ fig : bar ] show the histogram and the bar chart from the above r code .",
    "we will present details about the reactive objects in the next section .",
    "in this section we show how some common interactions , including brushing , zooming and querying , etc , were implemented in * cranvas*. the data infrastructure is based on mutaframes and reference classes / signal objects , as introduced in the previous section .",
    "the actual drawing is based on the packages * qtbase * @xcite and * qtpaint * @xcite , which provide an interface from r to qt @xcite .",
    "interaction with a system involves user actions as the input to the system , then the system resolves the input information and responds to the user .",
    "interaction happens on multiple levels of user actions .",
    "the most common forms of interaction with a display are listed below in decreasing order of immediacy with which this interaction between the user and the display happens :    _ direct manipulation _ of graphical objects ( shneiderman , @xcite ; @xcite ; @xcite ) is at the heart of interactive graphics .",
    "direct manipulation is what we use only for the highest level of interaction , such as selection or brushing of elements . with a set of different modes ( querying , scaling mode as , for example , implemented in xgobi / ggobi ) ,",
    "a set of different or additional interactions can be incorporated at the highest level .",
    "another approach is to make use of visual cues , which suggest available interactions to the user , for example , changing the cursor upon entering the cue area .",
    "visual cues are usually associated with changes to the resolution of a representation or scales of a display .",
    "figure  [ fig : hist ] shows an example of a plot with visual cues .",
    "_ input devices _ such as a mouse or touch pad allow interaction beyond click selection .",
    "most toolkits support wheel events ( either through the presence of a mouse wheel , a mouse move with an additional modifier key or a touch gesture ) , and a wheel event often corresponds to the zooming of a plot .",
    "_ keystrokes _ can be used as shortcuts and for quick access to functions . figure  [ fig : cartogram ] shows an example of a key stroke interaction ( arrow keys and ) to move between a choropleth map of the united states and a population - based cartogram .",
    "_ functional access _ through the command - line : accessor functions allow us to get information about the state of objects ( e.g. , get the indices of selected elements ) .",
    "mutator functions enable the user to set a particular state for objects in a display ( e.g. , set highlighting color to red , set points to size 5 ) .",
    "we call this level of interaction `` indirect manipulation '' of graphics .    on the developer s side , the main idea behind resolving an interaction between the user and the display is to actually resolve the interaction at the level of the data , but make it appear as if the user had directly interacted with the graphical object .",
    "this is essentially what happens in * cranvas * when we interact with plots .",
    "all levels of interaction above are supported in * cranvas * , and both direct and indirect manipulation are available . at its core ,",
    "all kinds of manipulation end up as changes to the underlying data objects , which is described in the next section .",
    "figure  [ fig : mutaframe ] illustrates the first step in * cranvas * , to create a mutaframe .",
    "the function ` qdata ( ) ` in * cranvas * returns a mutaframe with additional columns .",
    "below is a simple example .        [ fig19 ]",
    "the data frame ` cars ` was augmented by columns such as ` .brushed ` and ` .color ` .",
    "the ` .brushed ` column indicates the brush status of graphical elements ( ` true ` means an element is brushed ) , and ` .color ` stores the colors of elements .",
    "it is up to a specific plot how to interpret these additional columns .",
    "for example , in scatterplots , because each row in the data corresponds to a point in the plot , points can be colored by ` .color ` and highlighted by the logical in ` .brushed ` . for a bar chart , displaying frequencies of a categorical variable , ` .brushed ` may result in a partially or fully highlighted bar when only a subset in a category is brushed .    each single display application in * cranvas * creates a plot and attaches listeners on the mutaframe at the same time .",
    "figure  [ fig : meta ] shows how a scatterplot is created from a mutaframe : before the ` qscatter ( ) ` function displays the plot , it binds the augmented columns in the mutaframe with the plot layers using listener functions , so that when these columns are updated , the plot can be updated .",
    "the qt graphics framework allows us to build a plot using layers , which makes it possible to update one component of a plot without having to update all others .",
    "this gives us a lot of performance gain , especially when we interact with plots of large numbers of elements . in * cranvas * , the ` .color ` column should update the main layer of points and the ` .brushed ` column controls the brush layer . see http://cranvas.org/2013/10/qt-performance/ for an example of brushing a scatterplot of three million points , which takes less than 0.01 second to render , and is highly responsive to the brush .",
    "the main plot layer of three million points is not redrawn when the brush moves over the plot , only the brush layer .    the other type of reactive data objects in * cranvas * are the metadata .",
    "such objects often contain plot - specific information , such as the names of variables in the plot and the axis limits , etc .",
    "when a plot is created , a copy of metadata is generated and associated with it .",
    "zooming ( http://cranvas.org/examples/qscatter.html ) is an example . behind the scenes",
    "the axis limits are modified in the metadata based on the mouse wheel event .",
    "since the data structure of metaobjects is flexible , its application can be broad .",
    "the * cranvas * package allows adding or customizing meta information to any displays .",
    "for example , the user can specify a function in the metaobject to generate text labels when querying a plot . in the following text",
    ", we use ` meta ` to denote a metadata object .",
    "this section describes the interactions supported in * cranvas * and how they are related to the reactive data objects .",
    "brushing and selection are interactions that highlight a subset of graphical elements in a plot .",
    "it is usually achieved by dragging a rectangle ( or other closed shape ) over a plot and the elements inside the rectangle are selected .",
    "the rectangle , when in the brushing mode , is persistent on the screen . for the selection mode ,",
    "the rectangle is transient , meaning that it disappears when the mouse is released .",
    "we use the ` qscatter ( ) ` function to illustrate the basic idea .",
    "we show a sketch using the pseudo code below .",
    "[ fig21 ]        there are two layers ` layer_main ` and ` layer_``brush ` in the plot .",
    "the brush layer is used to redraw the brushed points only , so that the main layer can stay untouched when points are highlighted .",
    "the key for brushing / selection is the listener added to the mutaframe ` data ` by ` add_listener ( ) ` : when the column ` x ` , ` y ` or ` .brushed ` is modified , the brush layer is updated ( changes in other columns will not affect the plot ) . adding the listener is denoted by the dashed arrow in figure  [ fig : meta ] .",
    "when the plot is brushed , the points under the brush are identified by the mouse events in qt and the ` .brushed ` variable in the mutaframe is modified .",
    "because of the listener associated with ` .brushed ` , the brush layer will be redrawn .",
    "therefore , the selection is actually handled with one step of backtracking : once the user draws a selection rectangle , we update ` .brushed ` immediately , which triggers the update of the brush layer . because this occurs in a fast pace , the user may have an illusion that the cursor directly selected the points .",
    "see figure  [ fig : one - one ] for an example of brushing scatterplots of the ames housing data ( r code is provided in the next section ) .",
    "the selection mode was used in these plots , so we do not see the brush rectangle . brushing mode",
    "was used in figure  [ fig : hist ] and the yellow rectangle illustrates brush position .    in the case of a histogram , bins are the graphical objects intersecting with a selection rectangle .",
    "the backtracking corresponds to identifying all records in the mutaframe falling within the limits of the selected bin .",
    "the binary variable ` .brushed ` is changed when the brush moves over the bins , and the change is propagated to all dependencies , which results in an update to all dependent views .",
    "one of the dependent views is the histogram itself , which shows highlighting in the form of superimposing a histogram of the highlighted records on top of the original histogram .",
    "what the user perceives as `` selecting '' bins is actually a reaction to a change in the internal brushing variable .      linking forms the core of communication between multiple views . by default , all views that involve variables from the same mutaframe are linked .",
    "linking within the same data set is implicitly one - to - one linking .    using the mutaframe ` qames ` from section  [ sec : reactive - cranvas ] ,",
    "two scatterplots are created ( figure  [ fig : one - one ] ) and illustrate one - to - one linking .",
    "[ fig23 ]        the selected property has extraordinarily large garage area , for the living area , and has a below average sale price .",
    "recall from the previous section that when a scatterplot is created , a listener to update the brush layer is attached to the mutaframe .",
    "it does not matter where the mutaframe is modified , all the brush layers will be updated if the ` .brushed ` variable in the mutaframe is modified . when we interact with either of the plots",
    ", the other plot will respond to the changes because both plots depend on the ` .brushed ` variable in the same mutaframe .",
    "it is feasible to extend this concept to link different sources or aggregation levels of the data .",
    "take the following two types of linking , for example :    _ categorical linking _",
    "means when we brush one or more observations in one category , all observations in this category are brushed ; this is achieved in the listener by setting all elements of ` .brushed ` in this category to ` true ` ;    _ knn linking _",
    "( @xmath3 nearest neighbor ) means when we brush an observation , its @xmath3 nearest neighbors under a certain distance metric are brushed as well ; again , this is nothing but setting the relevant elements in ` .brushed ` to ` true ` .",
    "they can be applied to a single data source ( called `` self - linking '' ) or multiple data sources . in the latter case ,",
    "the listener in one data object needs to update other data objects . in figure",
    "[ fig : linked ] , the map and the scatterplot use two different sources , and they are linked via categorical linking through the state names . each state in the map is described by multiple points defining the state boundary , but each state has only one observation in the scatterplot .",
    "if we brush california in the scatterplot , the whole polygon of california ( containing multiple locations ) is highlighted .",
    "on the other hand , if we brush a part of a state in the map , that means the whole state should be highlighted , which is an example of self - linking .",
    "linking can also be done on the same data with different aggregation levels , such as the raw data and binned data .",
    "the histogram in figure  [ fig : hist ] shows sales prices of all houses sold in the ames housing data .",
    "the yellow rectangle corresponds to an area - based selection of all houses with sales of $ 200k or more , which triggers a highlighting of corresponding houses in all displays of the ames housing data .",
    "this includes the histogram itself , where all bins intersecting with the selection rectangle are filled with highlighting color , and all bar charts of the number of bedrooms as shown in figure  [ fig : bar ] .          zooming and panning change or shift the scale of the view ,",
    "so we can see the data at different resolutions .",
    "this can be resolved directly without the need of interaction with the original data . in * cranvas * , the core of zooming and panning consists of simple changes to the metadata ` meta$limits ` .",
    "this is illustrated with the following pseudo code .",
    "[ fig26 ]    ` scatter ` is a constructor created from reference classes , containing a field named ` limits ` in ` meta ` .",
    "the key here is to set up the event ` meta$limitschanged ` : this event is triggered when ` meta$limits ` is modified and the axis limits of the main plot layer are replaced by the new value of ` meta$limits ` .",
    "the ` setlimits ( ) ` method is from qt , which is used to set new limits on a layer , and qt will update the view when the limits are changed .        in * cranvas * , ` meta$limits ` is modified by the mouse wheel event for zooming and by the mouse drag event for panning .",
    "figure  [ fig : zoom ] shows two screenshots of the original scatterplot and the zoomed version , respectively .        [ fig28 ]    a benefit of controlling the limits in this manner is that it is a local property of the plot , enabling the user to examine different resolutions in two different displays .",
    "querying / identifying is another interaction that can usually be resolved without information from the original data .",
    "querying of graphical objects involves , in a first step , the display of the corresponding values of the metadata . for the bar charts in figure  [ fig : bar ] , querying of the bins",
    "displays information , about the bin s level and the number of records it encompasses , as well as the proportion of the whole data that this bin contains .",
    "visual cues aid the user to learn about available interactions .",
    "figure  [ fig : hist ] shows several examples of visual cues in a histogram .",
    "both the anchor point and bin width are graphical representations of plotting parameters for the histogram .",
    "the anchor of a histogram is the lower limit of the leftmost bin .",
    "the bin width defines the interval at which breaks are made .",
    "interacting with either anchor or bin width cues produces horizontal shifts , which reset the actual values parametrizing the histogram .",
    "changes to the anchor allow for testing of instabilities in the display due to discreteness in the data .",
    "bin - width changes show the data at different levels of smoothness and therefore allow for a visualization of `` big '' picture marginal distributions at large bin widths and the investigation of small pattern features , such as multiple modes and gaps in the data , at small bin widths .",
    "examples for both of these interactions are available as movies in the supplementary material of this paper .",
    "the visual cues in this case also correspond to meta elements . specifically , the bin limits are stored in ` meta$breaks ` and the histogram layer is connected to the ` meta$breakschanged ` event .",
    "the anchor modifies ` meta$breaks ` when we drag it .",
    "the concept of mvc is made implicit in reactive programming .",
    "reactive data objects are used to manage the multiple views and interactions in the * cranvas * package .",
    "the * cranvas * package is built on graphics layers in qt ( frontend ) and reactive data objects in r ( backend ) .",
    "the plotting pipeline is expressed and attached to mutaframes as well as metadata objects . using the reactive programming model",
    ", the user does not need to pay attention to the whole pipeline , which makes it easy to extend this system .",
    "for example , implementing the tour is simply redrawing a scatterplot of the projected variables that keep changing because the mutaframe will update the view automatically upon changes .",
    "the future work of * cranvas * involves including more plot types such as hexbin plots and scatterplot matrices , allowing users to define how the system reacts to changes and adding a gui .",
    "the * qtbase * package has made it easy to build qt gui s in r. the gui widgets can be connected to the plots via reactive data objects .",
    "they do not need to know the internal structure of plots .",
    "this kind of modularity will make the system easier to maintain and extend than past graphics software .",
    "the * cranvas * package is available on github at https://github.com/ggobi/cranvas .",
    "we have movies showing some interactions that are available on the website http://cranvas.org ."
  ],
  "abstract_text": [
    "<S> one of the big challenges of developing interactive statistical applications is the management of the data pipeline , which controls transformations from data to plot . </S>",
    "<S> the user s interactions needs to be propagated through these modules and reflected in the output representation at a fast pace . each individual module may be easy to develop and manage , but the dependency structure can be quite challenging . </S>",
    "<S> the mvc ( model / view / controller ) pattern is an attempt to solve the problem by separating the user s interaction from the representation of the data . in this paper </S>",
    "<S> we discuss the paradigm of _ reactive programming _ in the framework of the mvc architecture and show its applicability to interactive graphics . under this paradigm , </S>",
    "<S> developers benefit from the separation of user interaction from the graphical representation , which makes it easier for users and developers to extend interactive applications . </S>",
    "<S> we show the central role of reactive data objects in an interactive graphics system , implemented as the r package * cranvas * , which is freely available on github and the main developers include the authors of this paper .    , </S>"
  ]
}