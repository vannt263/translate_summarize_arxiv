{
  "article_text": [
    "algorithmic pricing problems model the task of assigning revenue maximizing prices to a retailer s set of products given some estimate of the potential customers preferences in purely computational  @xcite , as well as strategic  @xcite settings .",
    "previous work in this area has mostly focused on settings in which these preferences are rather restricted , in the sense that products are either _ pure complements _  @xcite and every customer is interested in exactly one subset of products or _ pure substitutes _  @xcite , in which case each customer seeks to buy only a single product out of some set of alternatives .",
    "a customer s real preferences , however , are often significantly more complicated than that and therefore pose some additional challenges .    the modelling of consumer preferences has received considerable attention in the context of _ algorithmic mechanism design _",
    "@xcite and _ combinatorial auctions _",
    "the established models range from relatively simple bidding languages to bidders that are represented by oracles allowing certain types of queries , e.g. , revealing the desired bundle of items given some fixed set of prices .",
    "the latter would be a somewhat problematic assumption in the theory of pricing algorithms , where we usually assume to have access to a rather large number of potential customers through some sort of sampling procedure and , thus , are interested in preferences that allow for a compact kind of representation .",
    "in this paper we focus on customers that have non - trivial preferences , yet can be fully described by their _ types _ and _ budgets _ and do not require any kind of oracles .",
    "assume that a company owns a subset of the links in a given network .",
    "the remaining edges are owned by other companies and have fixed publicly known prices and some customer needs to purchase a path between two terminals in the network .",
    "since she is acting rational , she is going to buy the shortest path connecting her terminals .",
    "how should we set the prices on the priceable edges in order to maximize the company s revenue ?",
    "what if there is another customer , who needs to purchase , e.g. , a minimum cost spanning tree ?",
    "this type of pricing problem , in which preferences are implicitly defined in terms of some optimization problem , is usually referred to as _ stackelberg pricing _  @xcite . in the standard 2-player form",
    "we are given a _ leader _ setting the prices on a subset of the network and a _ follower _ seeking to purchase a min - cost network satisfying her requirements .",
    "we proceed by formally defining the model before stating our results .      in this paper",
    "we consider the following class of multi - player one - round games .",
    "let @xmath8 be a multi - graph .",
    "there are two types of players in the game , one _ leader _ and one or more _",
    "followers_. we consider two classes of _ edge _ and _ vertex games _ , in which either the edges or the vertices have costs . for most of the paper",
    ", we will consider edge games , but the definitions and results for vertex games follow analogously . in an edge game",
    ", the edge set @xmath9 is partitioned into two sets @xmath10 with @xmath11 .",
    "for each _ fixed - price _ edge @xmath12 there is a fixed cost @xmath13 .",
    "for each _ priceable _ edge @xmath14 the leader can specify a price @xmath15 .",
    "we denote the number of priceable edges by @xmath16 .",
    "each follower @xmath17 has a set @xmath18 of _ feasible subnetworks_. the _ weight _ @xmath19 of a subnetwork @xmath20 is given by the costs of fixed - price edges and the price of priceable edges , @xmath21 the _ revenue _",
    "@xmath22 of the leader from subnetwork @xmath23 is given by the prices of the priceable edges that are included in @xmath23 , i.e. , @xmath24 throughout the paper we assume that for any price function @xmath25 every follower @xmath26 can in polynomial time find a subnetwork @xmath27 of minimum weight .",
    "our interest is to find the pricing function @xmath28 for the leader that generates maximum revenue , i.e. , @xmath29 we denote the value of this maximum revenue by @xmath30 . to guarantee that the revenue is bounded and the optimization problem is non - trivial",
    ", we assume that there is at least one feasible subnetwork for each follower @xmath26 that is composed only of fixed - price edges . in order to avoid technicalities , we assume w.l.o.g . that among subnetworks of identical weight the follower always chooses the one with higher revenue for the leader .",
    "it is not difficult to see that in the 2-player case we also need followers with a large number of feasible subnetworks in order to make the problem interesting .",
    "[ prop ] given follower @xmath31 and a fixed subnetwork @xmath32 , we can compute prices @xmath25 with @xmath33 maximizing @xmath34 or decide that such prices do not exist in polynomial time . in the 2-player game , if @xmath35 , revenue maximization can be done in polynomial time .",
    "the proof of proposition  [ prop ] will appear in the full version .",
    "in general we will refer to the revenue optimization problem by stack .",
    "note that our model extends the previously considered pricing models and is essentially equivalent to pricing with general valuation functions , a problem that has independently been considered in  @xcite .",
    "every general valuation function can be expressed in terms of stackelberg network pricing on graphs , and our algorithmic results apply in this setting as well .      the single - follower shortest path stackelberg pricing problem ( stacksp ) has first been considered by labb et al .",
    "@xcite , who derive a bilevel lp formulation of the problem and prove np - hardness .",
    "roch et al .",
    "@xcite present a first polynomial time approximation algorithm with a provable performance guarantee , which yields logarithmic approximation ratios .",
    "bouhtou et al .",
    "@xcite extend the problem to multiple ( weighted ) followers and present algorithms for a restricted shortest path problem on parallel links .",
    "for an overview of most of the initial work on stackelberg network pricing the reader is referred to  @xcite .",
    "a different line of research has been investigating the application of stackelberg pricing to network congestion games in order to obtain low congestion nash equilibria for sets of selfish followers  @xcite .",
    "more recently , cardinal et al .",
    "@xcite initiated the investigation of the corresponding minimum spanning tree ( stackmst ) game , again obtaining a logarithmic approximation guarantee and proving apx - hardness .",
    "their _ single - price algorithm _ , which assigns the same price to all priceable edges , turns out to be even more widely applicable and yields similar approximation guarantees for any matroid based stackelberg game .",
    "the first result of our paper is a generalization of this result to general stackelberg games .",
    "the previous limitation to matroids stems from the difficulty to determine the necessarily polynomial number of candidate prices that can be tested by the algorithm .",
    "we develop a novel characterization of the small set of _ threshold prices _ that need to be tested and obtain a polynomial time @xmath36-approximation ( where @xmath37 denotes the @xmath0th harmonic number ) for arbitrary @xmath2 , which turns out to be perfectly tight for shortest path as well as minimum spanning tree games .",
    "this result is found in section  [ single - price ] .",
    "we then extend the analysis to multiple followers , in which case the approximation ratio becomes @xmath38 .",
    "this can be shown to be essentially best possible by an approximation preserving reduction from single - minded combinatorial pricing  @xcite . extending the problem even further , we also look at the case of multiple _ weighted _ followers , which arises naturally in network settings where different followers come with different routing demands",
    ". it has been conjectured before that no approximation essentially better than the number of followers is possible in this scenario .",
    "we disprove this conjecture by presenting an alternative analysis of the single - price algorithm resulting in an approximation ratio of @xmath39 .",
    "additionally , we derive a lower bound of @xmath40 for the weighted player case .",
    "this resolves a previously open problem from  @xcite .",
    "the results on multiple followers are found in section  [ multifollowers ] .    the generic reduction from single - minded to stackelberg pricing yields a class of networks in which we can price the vertices on one side of a bipartite graph and players aim to purchase minimum cost vertex covers for their sets of edges .",
    "this motivates us to return to the classical stackelberg setting and consider the 2-player bipartite vertex cover game ( stackvc ) .",
    "as it turns out , this variation of the game allows polynomial - time algorithms for exact revenue maximization using non - trivial algorithmic techniques .",
    "we first present an upper bound on the possible revenue in terms of the min - cost vertex cover not using any priceable vertices and the minimum portion of fixed cost in any possible cover . using iterated max - flow computations ,",
    "we then determine a pricing with total revenue that eventually coincides with our upper bound .",
    "these results are found in section  [ stackvc ] .",
    "finally , section  [ conclusions ] concludes and presents several intriguing open problems for further research . some of the proofs have been omitted due to space limitations .",
    "let us assume that we are faced with a single follower and let @xmath41 denote the cost of a cheapest feasible subnetwork for the follower not containing any of the priceable edges .",
    "clearly , we can compute @xmath41 by assigning price @xmath42 to all priceable edges and simulating the follower on the resulting network .",
    "the _ single - price algorithm _ proceeds as follows . for @xmath43",
    "it assigns price @xmath44 to all priceable edges and determines the resulting revenue @xmath45 . it",
    "then simply returns the pricing that results in maximum revenue .",
    "we present a logarithmic bound on the approximation guarantee of the single - price algorithm .",
    "[ t : single - price ] given any @xmath2 , the single - price algorithm computes an @xmath36-approximation with respect to @xmath30 , the revenue of an optimal pricing .",
    "the single - price algorithm has previously been applied to a number of different combinatorial pricing problems  @xcite .",
    "the main issue in analyzing its performance guarantee for stackelberg pricing is to determine the right set of candidate prices .",
    "we first derive a precise characterization of these candidates and then argue that the geometric sequence of prices tested by the algorithm is a good enough approximation . slightly abusing notation , we let @xmath25 refer to both price @xmath25 and the assignment of this price to all priceable edges .",
    "if there exists a feasible subnetwork for the follower that uses at least @xmath31 priceable edges , we let @xmath46 be the largest price at which such a subnetwork is chosen . if no feasible subnetwork with at least @xmath31 priceable edges exists , we set @xmath47 .",
    "as we shall see , these thresholds are the key to prove theorem  [ t : single - price ] .",
    "we want to derive an alternative characterization of the values of @xmath48 . for each @xmath49",
    "we let @xmath50 refer to the minimum sum of prices of fixed - price edges in any feasible subnetwork containing at most @xmath31 priceable edges , formally @xmath51 and @xmath52 . for ease of notation let @xmath53 .",
    "consider the set of points @xmath54 , @xmath55 on the plane .",
    "by @xmath56 we refer to a minimum selection of points spanning the upper convex hull of the point set .",
    "it is a straightforward geometric observation that we can define @xmath56 as follows :    [ fact : hul ] point @xmath57 belongs to @xmath56 if and only if @xmath58    we now return to the candidate prices . by definition",
    "we have that @xmath59 .",
    "we say that @xmath48 is _ true threshold value _ if @xmath60 , i.e. , if at price @xmath48 the subnetwork chosen by the follower contains exactly @xmath31 priceable edges .",
    "let @xmath61 denote the indices , such that @xmath62 are true threshold values and for ease of notation define @xmath63 .",
    "for an example , see figure  [ fig : convexhull ] .",
    "[ t : hull ] @xmath48 is true threshold value if and only if @xmath64 belongs to @xmath56 .    `` @xmath65 '' let @xmath48 be true threshold value , i.e. , at price @xmath48 the chosen subnetwork contains exactly @xmath31 priceable edges .",
    "we observe that at any price @xmath25 the cheapest subnetwork containing @xmath31 priceable edges has cost @xmath66 .",
    "thus , at price @xmath48 it must be the case that @xmath67 for all @xmath68 and @xmath69 for all @xmath70 .",
    "it follows that @xmath71 and , thus , we have that @xmath64 belongs to @xmath56 .",
    "`` @xmath72 '' assume now that @xmath64 belongs to @xmath56 and let @xmath73 consider any @xmath74 .",
    "it follows that @xmath75 since @xmath76 and , thus , the network chosen at price @xmath25 can not contain less than @xmath31 priceable edges .",
    "analogously , let @xmath77 .",
    "using @xmath78 we obtain @xmath79 and , thus , the subnetwork chosen at price @xmath25 contains exactly @xmath31 priceable edges .",
    "we conclude that @xmath48 is a true threshold .",
    "it is not difficult to see that the price @xmath25 defined in the second part of the proof of lemma  [ t : hull ] is precisely the threshold value @xmath48 .",
    "let @xmath62 be any true threshold .",
    "since points @xmath80 define the convex hull we can write that @xmath81 .",
    "we state this important fact again in the following lemma .",
    "[ t : thresholds ] for all @xmath82 it holds that @xmath83 .    from the fact that points @xmath84",
    "define the convex hull we know that @xmath85 , i.e. , @xmath86 is the largest of all @xmath87-values . on the other hand , each @xmath88 describes the maximum revenue that can be made from a subnetwork with at most @xmath31 priceable edges and , thus , @xmath89 is clearly an upper bound on the revenue made by an optimal price assignment .",
    "[ fact : opt ] it holds that @xmath90 .    by definition of the @xmath48 s",
    "it is clear that at any price below @xmath62 the subnetwork chosen by the follower contains no less than @xmath91 priceable edges .",
    "furthermore , for each @xmath62 the single - price algorithm tests a candidate price that is at most a factor @xmath92 smaller than @xmath62 .",
    "let @xmath93 , @xmath94 denote the revenue that results from assigning price @xmath95 or @xmath62 to all priceable edges , respectively .",
    "[ fact : prices ] for each @xmath62 there exists a price @xmath95 with @xmath96 that is tested by the single - price algorithm .",
    "especially , it holds that @xmath97    finally , we know that the revenue made by assigning price @xmath62 to all priceable edges is @xmath98 .",
    "let @xmath99 denote the revenue of the single - price solution returned by the algorithm .",
    "we have : @xmath100 this concludes the proof of theorem [ t : single - price ] .",
    "an instance of stackelberg shortest path , on which the analysis of the approximation guarantee of the single - price algorithm is tight .",
    "bold edges are priceable , vertex labels of regular edges indicate cost .",
    "the instance yields tightness of the analysis also for stackelberg minimum spanning tree . ]      the example in figure  [ fig : lowerbound ] shows that our analysis of the single - price algorithm s approximation guarantee is tight .",
    "the follower wants to buy a path connecting vertices @xmath101 and @xmath102 . in an optimal solution we set the price of edge @xmath103 to @xmath104 . then edges @xmath105 form a shortest path of cost @xmath106 . on the other hand ,",
    "assume that all edges @xmath105 are assigned the same price @xmath25 .",
    "every choice will lead to a revenue of at most @xmath0 .",
    "similar results apply if the follower purchases a minimum spanning tree instead of a shortest path .",
    "the best known lower bound for 2-player stackelberg pricing is found in  @xcite , where apx - hardness is shown for the minimum spanning tree case . to the authors best knowledge ,",
    "up to now no non - constant inapproximability results have been proven .",
    "we proceed by extending our results to multiple followers , in which case previous results on other combinatorial pricing problems yield strong lower bounds .",
    "in this section we extend our results on general stackelberg network pricing to scenarios with multiple followers . recall that each follower @xmath31 is characterized by her own collection @xmath107 of feasible subnetworks and @xmath4 denotes the number of followers .",
    "section  [ logk+logm ] extends the analysis from the single follower case to prove a tight bound of @xmath38 on the approximation guarantee of the single - price algorithm .",
    "in addition , it presents an alternative analysis that applies even in the case of weighted followers and yields approximation guarantees that do not depend on the number of followers .",
    "section  [ lowerbounds ] derives ( near ) tight inapproximability results based on known hardness results for combinatorial pricing .",
    "proofs are omitted due to space limitations .",
    "let an instance of stackelberg network pricing with some number @xmath108 of followers be given .",
    "we obtain a similar bound on the single - price algorithm s approximation guarantee .",
    "[ t : single - price - multi-1 ] the single - price algorithm computes an @xmath38-approximation with respect to @xmath30 , the revenue of an optimal pricing , for stack with multiple followers .",
    "the proof of theorem  [ t : single - price - multi-1 ] reduces the problem to the single player case .",
    "however , it relies essentially on the fact that we are considering the single - price algorithm .",
    "it does not imply anything about the relation of these two cases in general .",
    "[ m2 ] an even more general variation of stackelberg pricing , in which we allow multiple _ weighted _ followers , arises naturally in the context of network pricing games with different demands for each player .",
    "this model has been previously considered in  @xcite .",
    "formally , for each follower @xmath31 we are given her _ demand _ @xmath109 .",
    "given followers buying subnetworks @xmath110 , the leader s revenue is defined as @xmath111 it has been conjectured before that in the weighted case no approximation guarantee essentially beyond @xmath112 is possible @xcite .",
    "we show that an alternative analysis of the single - price algorithm yields ratios that do not depend on the number of followers .",
    "[ t : single - price - multi-2 ] the single - price algorithm computes an @xmath113-approximation with respect to @xmath30 , the revenue of an optimal pricing , for stack with multiple weighted followers .",
    "hardness of approximation of stackelberg pricing with multiple followers follows immediately from known results about other combinatorial pricing models .",
    "theorem  [ t : hardness1 ] is based on a reduction from the ( weighted ) unit - demand envy - free pricing problem with uniform budgets , which is known to be inapproximable within @xmath114 ( @xmath0 denotes the number of products )  @xcite .",
    "here we are given a universe of products and a collection of ( weighted ) customers , each of which buys the cheapest product out of some set of alternatives with a price not exceeding her budget .",
    "the resulting stackelberg game is an instance of the so - called _ river tariffication problem_. each player needs to route her demand along one out of a number of parallel links connecting her respective source and sink pair .",
    "one direct fixed price connection determines her maximum budget for purchasing a priceable link .",
    "theorem  [ t : hardness1 ] resolves an open problem from  @xcite .",
    "the construction is depicted in figure  [ fig : hardness1 ] .",
    "[ t : hardness1 ] the stackelberg network pricing problem with multiple weighted followers is hard to approximate within @xmath40 for some @xmath2 , unless np @xmath115 bptime(@xmath116 ) . the same holds for the river tariffication problem .",
    "theorem  [ t : hardness2 ] is based on a reduction from the single - minded combinatorial pricing problem , in which each customer is interested in a subset of products and purchases the whole set if the sum of prices does not exceed her budget .",
    "single - minded pricing is hard to approximate within @xmath117  @xcite , where @xmath4 and @xmath0 denote the numbers of customers and products , respectively .",
    "theorem  [ t : hardness2 ] shows that the single - price algorithm is essentially best possible for multiple unweighted followers .",
    "[ t : hardness2 ] the stackelberg network pricing problem with multiple unweighted followers is hard to approximate within @xmath118 for some @xmath2 , unless np @xmath119 bptime(@xmath116 ) .",
    "the same holds for bipartite stackelberg vertex cover pricing ( stackvc ) .",
    "the idea for the proof of theorem  [ t : hardness2 ] is illustrated in figure  [ fig : hardness2 ] .",
    "we define an instance of stackvc  in bipartite graphs .",
    "vertices on one side of the bipartition are priceable and represent the universe of products , vertices on the other side encode customers and have fixed prices corresponding to the respective budgets . for each customer",
    "we define a follower in the stackelberg game with edges connecting the customer vertex and all product vertices the customer wishes to purchase .",
    "now every follower seeks to buy a min - cost vertex cover for her set of edges .",
    "we proceed by taking a closer look at this special type of stackelberg pricing game and especially focus on the interesting case of a single follower .",
    "stackelberg vertex cover pricing is a vertex game , however , the approximation results for the single - price algorithm continue to hold .",
    "note that in general the vertex cover problem is hard , hence we focus on settings , in which the problem can be solved in polynomial time . in bipartite graphs",
    "the problem can be solved optimally by using a classic and fundamental max - flow / min - cut argumentation .",
    "if all priceable vertices are in one side of the partition , then for multiple followers there is evidence that the single - price algorithm is essentially best possible .",
    "our main theorem in this section states that the setting with a single follower can be solved exactly . as a consequence",
    ", general bipartite stackvc  can be approximated by a factor of 2 .",
    "[ theo : bip : one_side ] if for a bipartite graph @xmath120 we have @xmath121 , then there is a polynomial time algorithm computing an optimal price function @xmath28 for stackvc .",
    "before we prove the theorem , we mention that the standard problem of minimum vertex cover in a bipartite graph @xmath122 with disjoint vertex sets @xmath123 , @xmath124 and edges @xmath125 can be solved by the following application of lp - duality .",
    "the lp - dual is interpreted as a maximum flow problem on an adjusted flow network @xmath126 . in particular , @xmath126 is constructed by adding a source @xmath101 and a sink @xmath102 to @xmath122 and connecting @xmath101 to all vertices @xmath127 with directed edges @xmath128 , and @xmath102 to all vertices @xmath129 with directed edges @xmath130 .",
    "each such edge gets as capacity the cost of the involved original vertex - i.e. @xmath131 for @xmath132 or @xmath133 if @xmath134 .",
    "furthermore , all original edges of the graph are directed from @xmath123 to @xmath124 and their capacity is set to infinity .",
    "the value of a maximum @xmath101-@xmath102-flow equals the cost of a minimum cut , and in addition the cost of a minimum cost vertex cover of the graph @xmath122 ( for an example see figure  [ fig : vcopt ] ) .",
    "to obtain such a cover consider an _ augmenting @xmath101-@xmath102-path _ in @xmath126 , which is a path traversing only forward edges with slack capacity and backward edges with non - zero flow .",
    "the maximum flow can be computed by iteratively increasing flow along such paths .",
    "the vertices in the minimum vertex cover then correspond to incident edges in a minimum cut .",
    "in particular , the minimum vertex cover includes a vertex @xmath127 if the flow allows no augmenting @xmath101-@xmath135-path from @xmath101 to @xmath135 , i.e. if every path from @xmath101 to @xmath135 has at least one backward edge with no flow , or at least one forward edge without slack capacity .",
    "we use a similar idea to obtain the optimal pricing for stackvc .",
    "let @xmath136 and the values @xmath50 for @xmath137 denote the minimum sum of prices of fixed - price vertices in any feasible subnetwork containing at most @xmath31 priceable vertices .",
    "then , @xmath138 are again upper bounds on the revenue that can be extracted from a network that includes at most @xmath31 priceable vertices .",
    "we thus have @xmath139 .",
    "construct the flow network @xmath126 by adding nodes @xmath101 and @xmath102 set @xmath140 for all @xmath132 compute a maximum @xmath101-@xmath102-flow @xmath141 in @xmath126    suppose all priceable vertices are located in one partition @xmath142 and consider algorithm  [ algo : bip : onepartition ] .",
    "we denote by @xmath143 the cover calculated by algorithm  [ algo : bip : onepartition ] . at first , when computing the maximum flow on @xmath126 holding all @xmath140 , the algorithm obtains a flow of @xmath144 .",
    "we first note that in the following while - loop we will never face a situation , in which there is an augmenting @xmath101-@xmath102-path ( traversing forward edges with slack capacity and backward edges with non - zero flow ) starting with a fixed - price vertex .",
    "we call such a path a _ fixed _ path , while an augmenting @xmath101-@xmath102-path starting with a priceable vertex is called a _ price _ path .",
    "[ t : pricepath ] every augmenting path considered in the while - loop of algorithm  [ algo : bip : onepartition ] is a price path .",
    "we prove the lemma by induction on the while - loop and by contradiction .",
    "suppose that in the beginning of the current iteration there is no fixed path .",
    "in particular , this is true for the first iteration of the while - loop . then , suppose that after we have increased the flow over a price path @xmath145 , a fixed path @xmath146 is created .",
    "@xmath146 must include some of the edges of @xmath145 .",
    "consider the vertex @xmath147 at which @xmath146 hits @xmath145 . by following @xmath146 from @xmath101 to @xmath147 and @xmath145 from @xmath147 to @xmath102",
    "there is a fixed path , which must have been present before flow was increased on @xmath145 .",
    "this is a contradiction and proves the lemma .",
    "recall from above that the optimum cover contains a vertex @xmath127 if there is no augmenting @xmath101-@xmath135-path from @xmath101 to @xmath135 .",
    "in particular , this means that for a vertex @xmath148 the following two properties are fulfilled : ( 1 ) there is no slack capacity on edge @xmath128 ; ( 2 ) there is no augmenting @xmath101-@xmath135-path from @xmath101 over a different vertex @xmath149 .",
    "as the algorithm always adjusts the price of a vertex @xmath135 to equal the current flow on @xmath128 , only the violation of property  ( 2 ) can force a vertex @xmath150 to leave the cover .",
    "in particular , such an augmenting @xmath101-@xmath135-path must start with a fixed - price vertex , and it must reach @xmath135 by decreasing flow over one of the original edges @xmath151 for @xmath152 .",
    "we call such a path a _ fixed @xmath135-path_.    [ t : novpath ] algorithm  [ algo : bip : onepartition ] creates no fixed @xmath135-path for any priceable vertex @xmath132",
    ".    the proof of lemma [ t : novpath ] is similar to the proof of lemma [ t : pricepath ] and will appear in the full version . as there is no augmenting path from @xmath101 to any priceable vertex at any time , the following lemma is now obvious .",
    "@xmath143 includes all priceable vertices .",
    "_ proof of theorem  [ theo : bip : one_side ] . _",
    "finally , we can proceed to argue that the computed pricing is optimal .",
    "suppose that after executing algorithm  [ algo : bip : onepartition ] we increase @xmath131 over @xmath153 for any priceable vertex @xmath135 .",
    "as we are at the end of the algorithm , it does not allow us to increase the flow in the same way .",
    "thus , the adjustment creates slack capacity on all the edges @xmath128 for any @xmath132 and causes every priceable vertex to leave @xmath143 .",
    "the new cover must be the cheapest cover that excludes every priceable vertex , i.e. it must be @xmath154 and have cost @xmath41 . as we have not increased the flow , we know that the cost of @xmath143 is also @xmath41 .",
    "note that before starting the while - loop the cover was @xmath155 of cost @xmath144 . as all flow increase in the while - loop",
    "was made over price paths and all the priceable vertices stay in the cover , the revenue of @xmath143 must be @xmath156 .",
    "this is an upper bound on the optimum revenue , and hence the price function @xmath157 derived with the algorithm is optimal .",
    "finally , notice that adjusting the price of the priceable vertices in each iteration is not necessary .",
    "we can start with computing @xmath155 and for the remaining while - loop set all prices to @xmath42 .",
    "this will result in the desired flow , which directly generates the final price for every vertex @xmath135 as flow on @xmath128 .",
    "hence , we can get optimal prices with an adjusted run of the standard polynomial time algorithm for maximum flow in @xmath126 .",
    "this proves theorem  [ theo : bip : one_side ] .",
    "[ theo : bip : two_side ] there is a polynomial time @xmath158-approximation algorithm for bipartite stackvc .    in theorem",
    "[ theo : bip : two_side ] we use the previous analysis to get a @xmath158-approximation of the optimum revenue for general bipartite stackvc .",
    "this results in a @xmath159-approximation for any number of @xmath4 followers .",
    "in contrast , the analysis of the single - price algorithm is tight even for one follower and all priceable vertices in one partition .",
    "moreover , bipartite stackvc  for at least two followers is np - hard by a reduction from the highway pricing problem  @xcite .    -0.3",
    "there are a number of important open problems that arise from our work .",
    "we believe that the single - price algorithm is essentially best possible even for a single follower and general stackelberg pricing games . however , there is no matching logarithmic lower bound , and the best lower bound remains apx - hardness from  @xcite .",
    "in addition , we believe that for weighted followers a better upper bound than @xmath160 is possible , which would decrease the gap to the @xmath161 lower bound we observed . more generally , extending other algorithm design techniques to cope with pricing problems is a major open problem .",
    "t.  roughgarden .",
    "stackelberg scheduling strategies .",
    "_ siam j. on computing _ , 33(2 ) : 332350 , 2004 . c.  swamy .",
    "the effectiveness of stackelberg strategies and tolls for network congestion games . in _ proc . of 18th soda _"
  ],
  "abstract_text": [
    "<S> we study a multi - player one - round game termed stackelberg network pricing game , in which a _ leader _ can set prices for a subset of @xmath0 priceable edges in a graph . </S>",
    "<S> the other edges have a fixed cost . </S>",
    "<S> based on the leader s decision one or more _ </S>",
    "<S> followers _ optimize a polynomial - time solvable combinatorial minimization problem and choose a minimum cost solution satisfying their requirements based on the fixed costs and the leader s prices . </S>",
    "<S> the leader receives as revenue the total amount of prices paid by the followers for priceable edges in their solutions , and the problem is to find revenue maximizing prices . </S>",
    "<S> our model extends several known pricing problems , including single - minded and unit - demand pricing , as well as stackelberg pricing for certain follower problems like shortest path or minimum spanning tree . </S>",
    "<S> our first main result is a tight analysis of a single - price algorithm for the single follower game , which provides a @xmath1-approximation for any @xmath2 . </S>",
    "<S> this can be extended to provide a @xmath3-approximation for the general problem and @xmath4 followers . </S>",
    "<S> the latter result is essentially best possible , as the problem is shown to be hard to approximate within @xmath5 . </S>",
    "<S> if followers have demands , the single - price algorithm provides a @xmath6-approximation , and the problem is hard to approximate within @xmath7 for some @xmath2 . </S>",
    "<S> our second main result is a polynomial time algorithm for revenue maximization in the special case of stackelberg bipartite vertex cover , which is based on non - trivial max - flow and lp - duality techniques . </S>",
    "<S> our results can be extended to provide constant - factor approximations for any constant number of followers .    </S>",
    "<S> patrick briest    martin hoefer    piotr krysta </S>"
  ]
}