{
  "article_text": [
    "resource pooling and load balancing schemes are critical components of large - scale computer clusters .",
    "they must dispatch the flow of requests to the servers , accounting for various constraints ( e.g. , data availability or type of request ) . in this paper , we present a multi - server queue where such constraints are represented by some arbitrary bipartite graph of compatibilities between jobs and servers . specifically",
    ", there is a finite number of job classes , each being connected in the graph to the servers that can process the corresponding jobs .",
    "each server processes its jobs sequentially in fcfs order .",
    "the service rate of a job at any given time is the sum of the service rates of all servers processing this job , which means that there is no overhead induced by the resource pooling .",
    "a key result is that this multi - server queue is quasi - reversible .",
    "this does not only lead to explicit performance results but also allows us to design a novel scheduling algorithm achieving _ balanced fair _",
    "sharing of the service capacity .",
    "balanced fairness has first been proposed as a desirable bandwidth allocation in data networks @xcite and has more recently been applied to evaluate the performance of content - distribution networks @xcite .",
    "this resource allocation is known for its desirable insensitivity property , allowing the service provider to develop dimensioning rules based on average traffic only , and not on fine traffic statistics like the job size distribution .",
    "however , no scheduling algorithm has been proved so far to achieve this allocation , except in some specific cases where it coincides with proportional fairness @xcite .",
    "to the best of our knowledge , our scheduling algorithm is the first practical implementation of balanced fairness ; it may be viewed as an extension of the round - robin scheduling algorithm to multiple servers .",
    "we shall see that our multi - server queue belongs to the family of order independent ( oi ) queues @xcite , which are known to be quasi - reversible @xcite .",
    "in particular , the state of the queue has an explicit stationary distribution under the usual assumptions of poisson arrivals and exponential service times .",
    "moreover , the stationary distribution remains explicit in the presence of random routing , where jobs can leave or re - enter the queue upon service completion .",
    "our scheduling algorithm is directly inspired by this idea , the routing being reinterpreted in terms of job interruptions and resumptions . the resulting resource allocation is balanced fairness in the capacity region defined by the graph of compatibilities between jobs and servers ; in particular , the scheduling algorithm stabilizes the system whenever possible and makes it insensitive to the job size distribution beyond the mean .",
    "multi - server queues with specialized servers have already been considered in @xcite but these models assume that each job can be processed by only one server at a time . our model is closer to the multi - server queue with redundant requests introduced by gardner et al .",
    "@xcite , where the class of a job defines the set of servers on which it is replicated .",
    "when several replicas of the same job are in service simultaneously on different servers , their service times are independent and the first instance to be completed stops the others .",
    "it is easy to see that , under the assumption of exponential service times , both models are in fact equivalent . our objective is to relax this assumption and to make the system insensitive to the job size distribution .",
    "a key contribution of our paper is the scheduling algorithm that allocates resources according to balanced fairness and thus enforces the insensitivity property .",
    "the rest of the paper is organized as follows . in section",
    "[ sec : model ] , we introduce the model , recall the definition and main properties of oi queues , and provide the stability condition of our multi - server queue . in section [ sec : whittle ] , we derive the average service rates in the presence of reentrant jobs .",
    "this result is used in section [ sec : algo ] to design our scheduling algorithm .",
    "some numerical results are presented in section [ sec : num ] .",
    "section [ sec : ccl ] concludes the paper .",
    "we consider a multi - server queue with @xmath0 job classes and @xmath1 servers .",
    "the class of a job may identify a customer or a service ; it defines the set of servers that can process this job . for each @xmath2",
    ", class-@xmath3 jobs enter the queue as an independent poisson process of intensity @xmath4 .",
    "the job sizes are independent , exponentially distributed with mean @xmath5 .",
    "we assume for now that each job leaves the queue immediately after service completion .    for each @xmath2 , we denote by @xmath6 the set of servers that can process class-@xmath3 jobs .",
    "equivalently , these constraints can be represented as a bipartite graph of compatibilities between the @xmath0 job classes and the @xmath1 servers , where there is an edge between class @xmath3 and server @xmath7 if and only if @xmath8 .",
    "each job can be served in parallel by multiple servers and each server processes the job sequentially in fcfs order .",
    "hence , when there are several servers available for a job at its arrival , all these servers process this job .",
    "when the service of a job is complete , all the servers that were processing it are reallocated to the next job they can serve in the queue .",
    "there is no service preemption , so that at most one job of each class can be served at any given time .",
    "we describe the evolution of the sequence of jobs in the queue , ordered by their arrival times .",
    "thus the queue state is some sequence @xmath9 of length @xmath10 , where @xmath10 is the number of jobs in the queue and @xmath11 is the class of job in position @xmath12 , for each @xmath13 , starting from the head of the queue .",
    "@xmath14 denotes the empty state , with @xmath15 .",
    "when a job is in service on several servers , its service rate is the sum of the capacities of the servers that are processing it .",
    "denoting by @xmath16 the capacity of server @xmath7 for each @xmath17 , the total service rate in any state @xmath18 is thus given by @xmath19 for each @xmath13 , the job in position @xmath12 receives service at rate @xmath20 observe that the total service rate in state @xmath18 only depends on the set @xmath21 of active classes in state @xmath18 .",
    "hence , for each @xmath22 , we can denote by @xmath23 the service rate in any state @xmath18 whose set of active classes is @xmath24 .",
    "this is a submodular function , as a weighted cover set function @xcite .",
    "[ [ order - independent - queues . ] ] * order independent queues . * + + + + + + + + + + + + + + + + + + + + + + + + + + +    this multi - server queue turns out to be a special case of order independent queues .",
    "these were introduced by berezner and krzesinski @xcite as a new class of multi - class quasi - reversible queues .",
    "the description is the same as for the multi - server queue except that the total service rate @xmath25 can be any function of the queue state @xmath18 which satisfies the following properties :    * monotonicity : @xmath26 for any state @xmath18 and class @xmath3 , * order - independence :",
    "@xmath27 for any state @xmath18 and permutation @xmath28 of @xmath29 .",
    "additionally , it is assumed that @xmath30 and @xmath31 for all @xmath32 .",
    "the total service rate @xmath33 is allocated to jobs in the order of their arrival in the sense that the job in position @xmath12 receives service at rate @xmath34 .",
    "in particular , the service received by a job does not depend on the jobs arrived later in the queue .",
    "the queue state @xmath18 defines a markov process on @xmath35 .",
    "it follows from ( * ? ? ?",
    "* theorem 2.2 ) that the multi - server queue is quasi - reversible , with stationary measure @xmath36    [ [ aggregate - state . ] ] * aggregate state . * + + + + + + + + + + + + + + + + + +    like in @xcite , we consider the number of jobs of each class in the queue , independently of their arrival order .",
    "we denote by @xmath37 the corresponding aggregate state , where @xmath38 is the number of class-@xmath3 jobs in the queue .",
    "this defines a stochastic process on @xmath39 , which is not a markov process in general . with a slight abuse of notation",
    ", we refer to the stationary measure of the aggregate state @xmath40 as @xmath41 where @xmath42 denotes the vector of the numbers of jobs of each class in state @xmath18 .",
    "we also denote the set of active classes in any state @xmath40 by @xmath43 .",
    "it was proved in @xcite that the stationary measure of the aggregate state is given by @xmath44 where the function @xmath45 satisfies the recursion @xmath46 and , for each @xmath47 , @xmath48 @xmath49 being the @xmath0-dimensional vector with @xmath5 in component @xmath3 and @xmath50 elsewhere , for any @xmath2 .    [ [ stability - condition . ] ] * stability condition .",
    "* + + + + + + + + + + + + + + + + + + + + + +    the following key result is proved in the appendix .",
    "[ theo : stability ] the multi - server queue is stable , in the sense that the underlying markov process is ergodic , if and only if @xmath51    in the rest of the paper , we assume that this condition is satisfied and we denote by @xmath52 the stationary distribution of the queue state .",
    "since the multi - server queue is quasi - reversible , the stationary distribution of the queue state is not modified by the addition of routing between classes as long as the effective arrival rates remain constant .",
    "assume for instance that each job leaves the queue with probability @xmath53 and re - enters as a job of the same class with probability @xmath54 , for some @xmath55 $ ] .",
    "the external arrival rate of class-@xmath3 jobs is taken equal to @xmath56 so that their effective arrival rate remains equal to @xmath4 .",
    "the stationary distribution of the queue state @xmath18 is still given by , independently of @xmath53 .",
    "each job re - enters the queue @xmath57 times on average , which tends to infinity when @xmath58 .    in the limit ,",
    "it is not relevant to consider the instantaneous service rate of each job depending on its position in the queue ; the metric of importance is the service rate received _ on average _ by each job when the number of jobs of each class is given , that is in some given aggregate state @xmath40 .    [",
    "[ whittle - network . ] ] * whittle network .",
    "* + + + + + + + + + + + + + + + + + +    it follows from that the stationary distribution of @xmath40 is that of the state of a whittle network @xcite of @xmath0 queues with arrival rates @xmath59 and state - dependent service capacities @xmath60 the following two key results specify the relation between the average service rates in the multi - server queue ( per class ) and the service rates of this whittle network ( per queue ) .",
    "let @xmath61 be the service rate of the first class-@xmath3 job in state @xmath18 of the multi - server queue , for each @xmath2 .",
    "the service rate of queue @xmath3 in state @xmath40 of the equivalent whittle network is the expected service rate @xmath61 conditioned to the fact that @xmath62 , that is , @xmath63    let @xmath64 and @xmath2 such that @xmath65 .",
    "we have @xmath66 the quasi - reversibility of the multi - server queue ensures that the following partial balance equation is satisfied in any state @xmath9 ( see the proof of ( * ? ? ? * theorem 2.2 ) for more details ) : @xmath67 letting @xmath68 , we deduce that @xmath69 this equation remains valid for any state @xmath40 and class @xmath3 such that @xmath70 .",
    "[ coro : capa ] for each @xmath64 , the vector of service rates @xmath71 belongs to the capacity set @xmath72 and satisfies @xmath73    let @xmath64 . for all @xmath22",
    ", we have by , @xmath74 for @xmath75 , we have @xmath76 for each @xmath18 such that @xmath77 , so that the above inequality is an equality .    in view of corollary",
    "[ coro : capa ] , the average service rates are allocated according to balanced fairness in the capacity set @xmath78 @xcite .",
    "going back to the motivating example with re - entrant jobs , in the limit where @xmath58 , all jobs of class @xmath3 tend to be served at the same service rate in aggregate state @xmath40 , with total service rate @xmath79 .",
    "this corresponds to the above whittle network where each of the @xmath0 queues applies the processor - sharing service discipline .",
    "such a queueing system is known to have the insensitivity property in the sense that the stationary distribution @xmath52 is independent of the job size distribution beyond the mean .",
    "this property will be exploited in the next section to design a scheduling algorithm in computer clusters based on re - entrant jobs after forced service interruptions .",
    "we apply the previous results to the problem of resource sharing in computer clusters . consider a cluster of @xmath1 servers . for all @xmath17 ,",
    "we denote by @xmath80 the service capacity of server @xmath7 , in floating - point operations per second ( flops ) .",
    "any incoming job consists of some random number of floating - point operations , referred to as the job size , and is assigned some set of servers .",
    "this assignment , possibly random , may depend on the type of the job but not on the system state ( e.g. , the number of ongoing jobs ) .",
    "it is fixed for the entire life of the job in the system .",
    "the job can then be processed in parallel by any subset @xmath81 of the servers in its assignment , at rate @xmath82 .",
    "job sizes are assumed i.i.d .  with mean @xmath28 .",
    "[ [ balanced - fairness . ] ] * balanced fairness .",
    "* + + + + + + + + + + + + + + + + + + + +    we aim at sharing the service capacity of the cluster according to balanced fairness , so that the stationary distribution of the number of jobs of each class is independent of the job size distribution beyond the mean @xcite .",
    "it is a highly desirable property in practice , to make the system robust to the evolution of traffic characteristics .",
    "applying the fcfs service discipline to each server is clearly not suitable . for @xmath83 for instance",
    ", the system reduces to a single - server fcfs queue , which is known to be very sensitive to the job size distribution . for @xmath84 ,",
    "the system corresponds to the multi - server queue described in section [ sec : model ] , with service rates @xmath85 for all @xmath86 , provided job sizes are i.i.d .",
    "exponential with mean @xmath28 .",
    "we apply the idea of re - entrant jobs described in section [ sec : whittle ] .",
    "specifically , we interrupt each service after some exponential time and force the corresponding job to re - enter the queue as a new job of the same type , with the same server assignment , so that the service can be resumed later and the resources be reallocated .",
    "observe that , when job sizes are i.i.d .",
    "exponential with mean @xmath28 , the stationary distribution of the aggregate state remains unchanged by the quasi - reversibility of the oi queue .",
    "when the frequency of service interruptions increases , the resources tend to be shared fairly , in the sense of balanced fairness , and the stationary distribution becomes insensitive to the job size distribution beyond the mean . for @xmath83 for instance , the system tends to a single - server ps queue , which is known to have the insensitivity property . for @xmath84 ,",
    "the system tends to a whittle network of ps queues , which is also known to have the insensitivity property @xcite .",
    "[ [ scheduling - algorithm . ] ] * scheduling algorithm . * + + + + + + + + + + + + + + + + + + + + + + +    a single virtual queue is used to allocate servers to jobs .",
    "any incoming job is put at the end of the queue .",
    "each server @xmath7 interrupts the job in service , if any , after some exponential time with parameter @xmath87 , for some @xmath88 .",
    "observe that @xmath89 can be interpreted as the mean number of floating - point operations before service interruption .",
    "any interrupted job releases _ all _ servers that process this job and is moved to the end of the queue as a new job .",
    "the released resources are reallocated according to the same service discipline , accounting for the new order in the queue .",
    "note that the interrupted service may be resumed immediately or later , when some resources become available , depending on the state of the queue .",
    "+     +     +    the pseudo - code of the algorithm is given in algorithm [ algo ] , where @xmath90 denotes the activity state of server @xmath7 ( @xmath91 if server @xmath7 is idle and @xmath92 if server @xmath7 is processing a job of class @xmath3 ) and @xmath93 indicates the state of the timer that triggers service interruption at server @xmath7 ( when set on , the timer has an exponential distribution with parameter @xmath94 ) .",
    "the algorithm depends on a single parameter @xmath89 , which determines the mean number of service interruptions per job .",
    "this should be compared to the mean job size @xmath28 .",
    "specifically , the ratio @xmath95 corresponds to the mean number of service interruptions per job .",
    "when @xmath96 , services are frequently interrupted and the corresponding resource allocation tends to balanced fairness , as mentioned in section [ sec : whittle ] , an allocation that has the insensitivity property ; when @xmath97 , services are almost never interrupted and the service discipline is approximately fcfs per server , which is highly sensitive to the job size distribution .",
    "we shall see in the following section that , for large systems with random assignment , setting @xmath98 is in fact sufficient to get approximate insensitivity , i.e. , it is sufficient in practice to interrupt each job only _ once _ on average .",
    "in this section , we provide numerical results showing the performance of the algorithm described above .",
    "there are @xmath1 servers and @xmath0 job classes .",
    "class-@xmath3 jobs arrive according to a poisson process with intensity @xmath4 . to test the sensitivity of the system , we assume that the job size distribution is hyperexponential : any incoming job has an exponential distribution with mean @xmath99 with probability @xmath100 and an exponential distribution with mean @xmath101 with probability @xmath102 , for some @xmath103 such that @xmath104 . the mean number of service interruptions per job is @xmath95 , where @xmath105 is the mean job size and @xmath89 is the parameter of the algorithm used to set the random timers .    [ [ performance - metric . ] ]",
    "* performance metric . *",
    "+ + + + + + + + + + + + + + + + + + + + +    we measure the performance in terms of mean service rate .",
    "let @xmath79 be the service rate of class-@xmath3 jobs in state @xmath40 , as defined by .",
    "the mean service rate of any class-@xmath3 job is then given by : @xmath106 by conservation , we have : @xmath107 observe that @xmath108 can not exceed the maximum service rate of class-@xmath3 jobs , given by @xmath109    [ [ three - servers . ] ] * three servers .",
    "* + + + + + + + + + + + + + + + +    we first consider a toy example with @xmath110 servers and @xmath111 job classes .",
    "servers 1 and 2 are dedicated to job classes 1 and 2 , respectively , while server 3 is shared by all jobs . in view of theorem [ theo : stability ]",
    ", the stability condition is : @xmath112 define the corresponding loads : @xmath113 observing that the capacity set is that of a tree network @xcite , we deduce the mean service rates under balanced fairness : @xmath114 @xmath115 with @xmath116 . recall that these are the exact mean service rates when the job size distribution is exponential ( that is , @xmath117 ) .",
    "we resort to simulations to assess the performance of our allocation scheme for a hyperexponential job size distribution .",
    "specifically , we let @xmath118 , @xmath119 , @xmath120 , corresponding to mean job size @xmath121 and standard deviation approximately equal to @xmath122 .",
    "the results are shown in figure [ fig : n ] with respect to the load @xmath123 , for @xmath124 . in case ( a )",
    ", the system is symmetric and the maximum service rate is 2 for both classes ; in case ( b ) , the system is asymmetric : class-1 jobs ( top plot ) can be served by servers 1,3 and thus have a maximum service rate of 2 ; class-2 jobs ( bottom plot ) can be served by server 3 only and thus have a maximum service rate of 1 .",
    "the results for balanced fairness follow from - and correspond to an exponential job size distribution .",
    "each simulation point ( for @xmath125 ) follows from the average of @xmath126 independent runs , each corresponding to @xmath127 jumps of the corresponding markov process , after a warm - up period of @xmath127 points ; the corresponding confidence interval ( not shown on the figure ) does not exceed @xmath128 around the plotted point .",
    "observe that performance improves with @xmath129 , tending to balanced fairness as expected .",
    "for @xmath130 ( that is , 5 service interruptions per job on average ) , performance is very close to that of balanced fairness and approximately insensitive ( i.e. , very close to that obtained for an exponential job size distribution ) .",
    "[ [ large - system - with - random - assignment . ] ] * large system with random assignment . * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we now consider a large system of @xmath131 servers , each with unit service rate . each incoming job is assigned @xmath132 servers chosen uniformly at random , corresponding to @xmath133 job classes , as considered in @xcite .",
    "an explicit formula for the mean service rate was derived in @xcite .",
    "the simulation results are obtained in the same conditions as above .",
    "the results for @xmath134 and @xmath135 are shown in figure [ fig : random ] .",
    "we observe that performance is very close to that of balanced fairness , even for low values of @xmath129 .",
    "it is sufficient in practice to set @xmath98 , corresponding to only _",
    "one _ service interruption per job on average .",
    "we have introduced a new scheduling algorithm to allocate the resources of a computer cluster according to balanced fairness .",
    "this algorithm , which is based on service interruptions and resumptions , can be viewed as an extension of round - robin scheduling algorithm in the context of resource pooling .",
    "its performance was studied by considering a new queueing model where jobs can be processed in parallel by several servers .",
    "we have observed that the aggregate state of the queue is that of a whittle network , and deduced the stability condition .    for future work",
    ", we would like to assess the impact of the mean number of service interruptions on the sensitivity of the resulting resource allocation .",
    "we are also interested in exploring some variants of the model , including the presence of negative customers @xcite and batch services @xcite .    10    i.  adan , m.  boon , a.  bui , j.  mairesse , and g.  weiss . queues with skill based parallel servers and a fcfs infinite matching model .",
    ", 41(3):2224 , jan .",
    "s.  a. berezner and a.  e. krzesinski .",
    "order independent loss queues . , 23(1):331335 , 1996 .",
    "t.  bonald and a.  proutire . . , 2002",
    "t.  bonald and a.  proutire .",
    "insensitive bandwidth sharing in data networks .",
    ", 44(1):69100 , 2003 .",
    "t.  bonald and j.  virtamo . . , 2004",
    "r.  boucherie and n.  van dijk .",
    "product forms for queueing networks with state - dependent multiple job transitions .",
    ", pages 152187 , 1991 .",
    "r.  caldentey , e.  h. kaplan , and g.  weiss .",
    "infinite bipartite matching of servers and customers .",
    ", 41(3):695730 , 009 2009 .",
    "j.  edmonds .",
    "submodular functions , matroids , and certain polyhedra . in m.",
    "jnger , g.  reinelt , and g.  rinaldi , editors , _ combinatorial optimization  eureka , you shrink ! : papers dedicated to jack edmonds 5th international workshop aussois , france , march 59 , 2001 revised papers _ , pages 1126 .",
    "springer berlin heidelberg , berlin , heidelberg , 2003 .",
    "k.  gardner , m.  harchol - balter , a.  scheller - wolf , m.  velednitsky , and s.  zbarsky .",
    "redundancy - d : the power of d choices for redundancy . , 2016 .",
    "k.  gardner , s.  zbarsky , s.  doroudi , m.  harchol - balter , and e.  hyytia . reducing latency via redundant requests",
    ": exact analysis . in _ proceedings of acm sigmetrics 2015",
    "_ , pages 347360 , new york , ny , usa , 2015 .",
    "e.  gelenbe .",
    "g - networks with signals and batch removal . , 7(03):335342 , 1993 .    f.  kelly . .",
    "wiley , chichester , 1979 .",
    "f.  kelly , l.  massouli , and n.  walton .",
    "resource pooling in congested networks : proportional fairness and product form .",
    ", 63(1 - 4):165194 , 2009 .",
    "a.  e. krzesinski .",
    "order independent queues . in r.  j. boucherie and n.  m. van dijk ,",
    "editors , _ queueing networks : a fundamental approach _ , pages 85120 .",
    "springer us , boston , ma , 2011 .",
    "g.  l. nemhauser and l.  a. wolsey . .",
    "wiley - interscience , new york , ny , usa , 1988 .    r.  serfozo . .",
    "stochastic modelling and applied probability .",
    "springer new york , 1999 .    v.  shah and g.  de  veciana .",
    "high - performance centralized content delivery infrastructure : models and asymptotics .",
    ", 23(5):16741687 , oct 2015 .    v.  shah and g.  de  veciana .",
    "impact of fairness and heterogeneity on delays in large - scale centralized content delivery systems .",
    ", 83(3):361397 , 2016 .",
    "t.  h.  d. thi , j.  m. fourneau , and m.  a. tran .",
    "networks of order independent queues with signals . in _ 2013 ieee 21st international symposium on modelling , analysis and simulation of computer and telecommunication systems _ , pages 131140 , aug 2013 .",
    "j.  n. tsitsiklis and k.  xu .",
    "flexible queueing architectures . , 2015 .",
    "j.  visschers , i.  adan , and g.  weiss . a product form solution to a system with multi - type jobs and multi - type servers . , 70(3):269298 , 2012 .",
    "n.  s. walton et  al .",
    "flow - level convergence and insensitivity for multi - class queueing networks .",
    ", 2(1):115148 , 2012 .",
    "we prove theorem [ theo : stability ] which states that the multi - server queue is stable if and only if @xmath136      assume that @xmath137 for some non - empty set @xmath22 . for any @xmath138 such that @xmath139 , we also have @xmath140 since @xmath25 is non - decreasing , so that @xmath141 and by induction , @xmath142 where @xmath143 .",
    "hence we obtain @xmath144          the proof is by induction on @xmath149 . the condition is true for @xmath15 since @xmath150 .",
    "now let @xmath151 and assume that @xmath148 for all @xmath64 with @xmath152 .",
    "for each @xmath64 with @xmath153 , we obtain @xmath154 where the first inequality holds because @xmath145 satisfies and the second holds by the induction assumption . + assume that the stability condition is satisfied .",
    "the proof consists in choosing a function @xmath145 that satisfies the assumptions of lemma [ lem : min ] and such that @xmath155 in view of , there exists @xmath156 such that @xmath157 we can choose for instance @xmath158 now consider the balance function @xmath145 defined by @xmath159 we have @xmath146 and , for each @xmath138 , @xmath160 we can thus apply lemma [ lem : min ] to @xmath145 and we deduce that @xmath148 for all @xmath64 .",
    "it follows that @xmath161 which concludes the proof ."
  ],
  "abstract_text": [
    "<S> we represent a computer cluster as a multi - server queue with some arbitrary bipartite graph of compatibilities between jobs and servers . </S>",
    "<S> each server processes its jobs sequentially in fcfs order . </S>",
    "<S> the service rate of a job at any given time is the sum of the service rates of all servers processing this job . </S>",
    "<S> we show that the corresponding queue is quasi - reversible and use this property to design a scheduling algorithm achieving balanced fair sharing of the service capacity . + </S>",
    "<S> * keywords : * parallel processing , multi - server queues , balanced fairness , order independent queues , whittle networks </S>"
  ]
}