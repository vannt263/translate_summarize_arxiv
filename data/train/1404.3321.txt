{
  "article_text": [
    "the development of applications showing exascale performance proves to be very challenging . on one side , it comprises efforts to scale today s numerical algorithms , system software , and development tools with proven methods as well as the refactoring of non - optimal code pieces that would become bottlenecks in runs at larger scale . on the other side ,",
    "the development of exascale applications includes the search for qualitatively new approaches that reduce the computational complexity especially of algorithms with non - linear scaling for increasing processor counts .",
    "_ collaborative research into exascale systemware , tools & applications",
    "_ ( cresta ) is an eu fp7 project that concentrates on the study and solution of issues that are connected with the development towards exascale computing  @xcite .",
    "cresta chose an approach based on the co - design of advanced simulation applications and system software .",
    "the development of simulation codes has been flanked with the further development of necessary developer tools like parallel debuggers and performance analysis tools .",
    "cresta s co - design applications are running at the limits of available hpc computer installations while researchers create an ever - increasing demand for larger , respectively faster simulations and new application fields .",
    "this tension provides requirements and challenges for system software and tool developers .",
    "more demanding use cases can be used at the same time as test cases of new developments and are checkpoints to assess improvements though , for the time being still on current computers .",
    "additionally , this approach provides general lessons usable in more simulation applications like those developed in the _ swedish e - science research centre _ ( serc ) as well as in the development of future software development tools  @xcite .    in this paper , we present the results of a co - design activity focused on the simulation code nek5000 that aims at performance improvements of collective communication operations .",
    "nek5000 can be used for simulations of fluid flow , heat transfer and magnetohydrodynamics problems .",
    "it is an open - source code mainly developed at the mathematics and computer science division of the argonne national lab .",
    "nek5000 is a mature solver for incompressible navier - stokes equations .",
    "the numerical algorithm utilises high - order spatial discretisation with spectral elements and high - order semi - implicit time stepping for the calculations  @xcite .",
    "an important property of the algorithm is its fast convergence and the comparatively low complexity with respect to the number of grid points @xmath0 .",
    "the complexity limits are for the discretisation at @xmath1 .",
    "the computational work and memory accesses only require costs of @xmath2 and @xmath3 respectively  @xcite .",
    "the application has won the gordon bell prize in 1999 and many simulation projects on different hpc computer installations show its scalability up to one million cores . despite its excellent scaling behaviour , the crystal router still exposes areas for improvements .",
    "our on - going co - design activity aims at implementations of effective collective communication operations for large - scale runs as well as the reduction of the communication volume using a hybrid parallelisation scheme  @xcite .    in this paper , we present an analysis of the crystal router algorithm , which is the base of nek5000 s central communication module .",
    "it will allow to use this solution as a base for the implementation of alternative , improved collective communication operations .",
    "we identify bottlenecks and sketch strategies to overcome these .",
    "these new collective operations can be used also in other applications as well as a building block in a runtime - system , which helps to dynamically improve load balancing  @xcite .",
    "the remainder of this paper is organized as follows : after a discussion of related work in section 2 we describe the functionality of the crystal router in section 3 .",
    "benchmark results will be presented and discussed in section 4 .",
    "section 5 concludes the paper with an outlook on future work .",
    "al . developed efficient routines for personalized all - to - all exchange on infiniband clusters  @xcite .",
    "they use infiniband rdma operations combined with hypercube algorithms and achieved speedup factors of three for short messages of 32  b on 16 nodes .",
    "use infiniband s virtual lanes for the improvement of collective mpi operations in multi - core clusters  @xcite .",
    "these virtual lanes are used for balancing multiple send requests active at the same time and to increase the throughput for small messages .",
    "this implementation showed a performance improvement of 1020% .",
    "analyse the influence of synchronisation messages on the communication performance .",
    "those messages are used in collective operations to control of the exchange of large messages  @xcite .",
    "they found that contention of synchronisation messages accounts for a large portion of the operation s overall latency .",
    "their algorithm optimises the exchange and achieved improvements of 25% for messages between 32 and 64  kb length .",
    "propose a model of the memory - hierarchy in multi - core clusters that uses horizontal and vertical levels  @xcite .",
    "their experimental results show that this model is capable to predict the communication costs of collective operations more accurately than it ws possible before .",
    "they developed a methodology to optimize collective operations and demonstrated it with the implementation of a multi - core aware broadcast operation .",
    "the crystal router as developed by fox et .",
    "@xcite is an algorithm that allows sending messages of arbitrary length between arbitrary nodes in a hypercube network .",
    "it is advantageous especially in irregular applications where the exact nature of the communication is not known before it occurs or where the message emergence changes dynamically .",
    "communication operations in hypercube networks are often implemented by routing algorithms that iterate over the dimensions of the cube and execute in each step one point - to - point communication operation with the partner node at the other end of the respective edge . as explained for example in @xcite , the result of the binary xor function with the processor numbers of sender and receiver node as arguments provides a routing path that can be used to transport the message .",
    "therefore , messages can be delivered in algorithms following this pattern from each node to each other node in at most @xmath4 communication steps where @xmath4 is the dimensionality of the hypercube network . in our implementation , we interpret mpi processes as nodes of a hypercube network and use mpi ranks as processor numbers .",
    "it has been proven that such a choice of paths provides load balancing in the communication of several typical applications as well as it is optimal if all processors are used in a load balanced way @xcite .",
    "the crystal router has been developed to handle one typical situation of processes in hypercube networks . in each process",
    ", there is a set of messages , which must be sent to other processes .",
    "destination processes expect messages , but they know neither exactly how many messages will arrive nor from which processes they will be sent .",
    "nevertheless , the communication happens for many algorithms typically in communication phases between computations in a time - synchronised manner .",
    "one example is the irregularity in the communication of molecular dynamics algorithms .",
    "the real amount of data that has to be comunicated between neighbouring subdomains is not known before the data exchange itself .",
    "another example of slightly irregular communication can be found in finite elelement calculations where the meshes must be decomposed over several processors .",
    "this decomposition will be perfect only to a certain degree .",
    "therefore , the communication between the nodes holding the different subdomains will show some load - imbalance .",
    "_ algorithm 1 _ explains how the transport of messages between arbitrary processes works .",
    "first , all messages are stored in a buffer for outgoing messages of the sender process ( msg_out ) . during the iteration over the different channels ( i.e. the bits of rank numbers ) ,",
    "some messages will be transmitted in each iteration step according to their routing path .",
    "for that , those messages that must be transferred through a certain channel will be copied from msg_out to a common transfer buffer ( msg_next ) .",
    "the buffer msg_next of each process will be exchanged through the active channel of the current iteration step with the respective buffer of a partner process .",
    "thereafter , all messages that had to be routed from this partner over this channel can be found in msg_next .",
    "they will be inspected there .",
    "messages that are addressed to the receiving process will be copied into the buffer for incoming messages ( msg_in ) from where they can be accessed by the application code later .",
    "messages that have to be forwarded further in one of the following iteration steps will be kept and put into msg_out .",
    "* algorithm 1 * pseudocode of the crystal router algorithm , adapted from @xcite .",
    "* `  begin ` * `  crystal_router ` + `  ` * `  declare  buffer ` * `  msg_out ;  / *  buffer  for  messages  to  send  / ` + `  ` * `  declare  buffer ` * `  msg_in ;  / *  buffer  for  received  messages  / ` + `  ` * `  declare  buffer ` * `  msg_next ;  / *  buffer  for  messages  to  send  / ` + `  / *  in  the  next  communication  step  / ` + `  ` + `  ` * `  for  each ` * `  msg  in  msg_out  ` * `  do ` * + `  ` * `  if ` * `  dest_rank(msg )  = =  myrank  ` * `  then ` * + `  ` _ `  copy  msg  into  msg_in ; ` _ + `  ` * `  end  for ` * + `  ` * `  for  each ` * `  dimension  of  the  hypercube  i  =  0, ... ,d-1  ` * `  do ` * + `  ` * `  for  each ` * `  message  msg  in  msg_out  ` * `  do ` * + `  ` * `  if ` * `  ( dest_rank(msg)&myrank)`@xmath5 `  ` * `  then ` * + `  ` _ `  copy  msg  into  msg_next ; ` _ + `  ` * `  end  for ` * + `  ` _ `  exchange  buffer  msg_next  with  process(rank  = =  myrank`@xmath5 ` ) ; ` _ + `  ` * `  for  each ` * `  message  msg  in  msg_next  ` * `  do ` * + `  ` * `  if ` * `  dest_rank(msg )  = =  myrank  ` * `  then ` * + `  ` _ `  copy  msg  into  msg_in ; ` _ + `  ` * `  if ` * `  ` _ `",
    "msg  needs  to  be  routed  further ` _ `  ` * `  then ` * + `  ` _ `",
    "copy  msg  into  msg_out ; ` _ + `  ` * `  end  for ` * + `  ` * `  end  for ` * + * `  end ` * `  crystal_router `    summarizing , this algorithm guarantees message delivery between arbitrary processes within @xmath4 steps where @xmath4 is the dimensionality of the hypercube network .",
    "furthermore , it maximises the message lengths for each communication step by bundling messages that have a segment of their routing paths in common , provided that the necessary buffers can be allocated with a sufficient size .",
    "we developed a synthetic benchmark for the analysis of the original crystal router algorithm .",
    "its design has been based on the the communication pattern in nek5000 .",
    "there , elements usually have 26 neighbour elements .",
    "each of them could be located in a different process , i.e. processes have to exchange data with at least 26 neighbours due to spatial domain decomposition .",
    "the element distribution logic tries to keep neighbouring elements in processes on nodes near to each other , but , it is also possible that some elements will be placed on distant nodes .",
    "our benchmark allows to define the number of communication partners of each process as well as their distance in form of a stride that will be used to select them .",
    "selected nodes will exchange messages during the benchmark run .",
    "the overall number of spectral elements per node , which corresponds to a certain message length , could be adapted in order to test strong scaling . in the strong scaling case ,",
    "the volume - surface ratio of the elements located in one process causes a communication amount per node that is proportional to the number @xmath6 of processes with @xmath7 .",
    "the aggregated communication of the job then follows the function @xmath8 .",
    "the number of elements as well as the amount of communication per process remains constant for weak scaling .",
    "the aggregated communication of the parallel job will be limited by @xmath9 though .",
    "the measurements have been done on kth s system lindgren .",
    "it is a cray xe6 installation equipped with two amd opteron 6172 processors ( `` magny core '' ) and 32  gb ram per compute node .",
    "it has a size of 1516 nodes , i.e. 36384 cores , and provides 305  tflops peak performance .",
    "the system interconnect is a cray gemini network with a 3d - torus topology  @xcite .",
    "the first benchmark shows the performance of the crystal router for different message lenghts and numbers of nodes in comparison to the standard mpi library of lindgren .",
    "the benchmarked operation is a personalized all - to - all communication that is provided as mpi_alltoallv .",
    "the crystal router based implementation is called cr_alltoallv .",
    "the benchmark has been setup in such a way , that each mpi process communicates with its 26 nearest neighbours .",
    "the results for runs with 256 and 512 processes are shown in figure [ fig : fig1a ] .",
    "the results for 1024 and 2048 processes are shown in figure [ fig : fig1b ] .",
    "finally , figure [ fig : fig1c ] provides results for 4096 and 8192 processes .",
    "the crystal router based implementation cr_alltoallv is much faster than mpi_alltoallv in runs of all sizes especially for short , latency - bound messages .",
    "for example , @xmath10 are needed for a cr_alltoallv operation that lets each rank exchange 8 bytes with its partner processes in a run with 256 processes .",
    "the operation takes @xmath11 for 8192 processes .",
    "the ratio of these times is @xmath12 .",
    "the same operation needs @xmath13 for 256 processes and @xmath14 with 8192 processes with the function mpi_alltoallv .",
    "the ratio of the times is @xmath15 .",
    "this result demonstrates that sparse communication patterns involving all processes of a parallel program can be realised efficiently by the crysral router .",
    "the speed advantage of the crystal router becomes smaller for longer messages .",
    "the speeds of the mpi system function and of the crystal router are almost equal for the longest messages of 128 kb in the smallest test of 256 processes .",
    "the speed difference increases for this message length with an increasing processor count and reaches a factor of 19 for the largest run utilising 8192 processes .",
    "furthermore , the benchmarks show that the number of communication partners respectively the size of the stride do not noticeably influence the duration of the operation for the mpi system function .",
    "the crystal router implementation contrastingly is more sensitive to these parameters .",
    "figure [ fig : fig3 ] shows measurements for a varying stride length utilizing 2048 processes and transmitting messages of 8 resp .",
    "512 byte length .",
    "the crystal router needs an increasing runtime for increasing strides .",
    "this reflects that the increasing stride length between the communications causes increasing data amounts that must be transfered the processes that are located on other numa nodes , on other sockets and on other nodes .",
    "for example , the time needed for the communication operation with a stride of 24 ( i.e. each process communicates only with processes that reside on other nodes ) is compared to a 1-stride 59% longer for messages of 8 byte length , and it needs 51% more time for messages of 512 byte length .",
    "such a systematic trend could not be observed with the mpi routine .",
    "its variability is clearly smaller than 10% .",
    "figure [ fig : fig4 ] presents a benchmark that has been executed with 256 processes . here",
    ", the number of communication partners of the processes has been varied .",
    "the mpi system routine again does not show significant variations in their runtime .",
    "the crystal router implementation needs longer runtimes for an increasing number of communication partners per process .",
    "the result reflects the increasing communication volume that has to be processed by the constant number of processors .",
    "finally , the evaluation with respect to weak scaling in figure [ fig : fig5 ] demonstrates that cr_alltoallv scales very uniformly for short messages .",
    "its scaling behaviour is noticeable better than that of mpi_alltoallv .",
    "our analysis shows that the crystal router algorithm is beneficial for medium - sized and large parallel programs . it can unfold its capabilities compared to the function mpi_alltoallv especially in situations with sparse communication patterns and for large processor counts .",
    "its uniform scaling into ranges of large processor counts indicates that there are no effects of performance degeneration in the algorithm itself and that it can be a viable choice for the implementation of collective communication operations . however , several improvements of the original algorithm are needed , particularly    * the reduction of data copies , * the exploitation of multiple communication paths , and * the overlapping of data transfers with the processing of the messages .",
    "specifically on cray systems , the exploitation of multiple communication paths and the overlapping of data transfers with the process - internal message handling will provide significant performance improvements .",
    "the 3d - torus connects to each gemini chip with several links .",
    "the block transfer engine ( bte ) of the gemini chip allows to offload the transer of larger messages from the cpu .",
    "therefore , a refatcoring of the original algorithm using these hardware capabilities will extend the range of its applicability .",
    "we evaluated the original crystal router algorithm in an implementation of a personalized all - to - all communication on a recent computer architecture .",
    "it shows a superior exchange performance especially for short messages up to 4  kilobyte and parallel runs of medium and large sizes .",
    "it showed furthermore a uniform scaling over the whole range of job sizes .",
    "this is possible because it bundles short messages into larger packages that will be transferred at once .",
    "the influence of latency is reduced in that way , and mpi library optimisations with respect to the bandwidth of larger message lengths become useable for shorter messages too .",
    "the crystal router is sensitive slightly to the distance of the communicating processes and to a larger extend to the number of communication partners per process , i.e. the degree of sparsity .",
    "these comparatively small variations and the high overall efficiency that is achieved at the same time are an effect of the algorithm s properties .",
    "the message bundling and the algorithm design guarantee the message delivery within a fixed number of communication steps . finally , the hypercube algorithm involves all nodes equally into the transport of messages during each communication step .",
    "our benchmarks confirm that the crystal router algorithm could be used efficiently also on modern computer architectures , however , to make it ready for exascale , the efficiency on higher processor counts needs to be improved furthermore .",
    "we have sketched key aspects of these improvements , particularly the reduction of data copying and the use of multiple network connections .",
    "these improvements will make the cystal router based communication substrate a viable choice for exascale applications .",
    "we would like to thank for the support of this work through the projects _ collaborative research into exascale systemware , tools & applications _ ( cresta ) and _ swedish e - science research centre _ ( serc ) .",
    "li , b. , huo , z. , zhang , p. , meng , d. : multiple virtual lanes - aware mpi collective communication in multi - core clusters . in : high performance computing ( hipc ) ,",
    "2009 international conference on , pp.304311 , 16 - 19 dec .",
    "2009    li , q. , huo , z. , sun , n. : optimizing mpi alltoall communication of large messages in multicore clusters . in : parallel and distributed computing , applications and technologies ( pdcat ) ,",
    "2011 12th international conference on , pp.257262 , 20 - 22 oct .",
    "2011    schliephake , m. , aguilar , x. , laure , e. : design and implementation of a runtime system for parallel numerical simulations on large - scale clusters . in : procedia",
    "computer science , volume 4 , proceedings of the international conference on computational science , iccs 2011 , 2011 , pp .",
    "21052114    schliephake , m. , laure , e. : towards improving the communication performance of cresta s co - design application nek5000 . in : high performance computing , networking , storage and analysis ( scc ) , 2012 sc companion , pp.669674 , 10 - 16 nov .",
    "2012    sur , s. , hyun - wook , j , panda , d.k . : efficient and scalable all - to - all personalized exchange for infiniband - based clusters . in : parallel processing , 2004 .",
    "icpp 2004 . international conference on , pp.275282 vol.1 , 15 - 18 aug .",
    "2004      tufo , h.m .",
    ", fscher , p.f .",
    ": terascale spectral element algorithms and implementations \" gordon bell prize paper . in : proc . of the acm / ieee sc99 conf . on high performance networking and computing .",
    "ieee computer soc . , cdrom ( 1999 ) ."
  ],
  "abstract_text": [
    "<S> in order to achieve exascale performance it is important to detect potential bottlenecks and identify strategies to overcome them . for this , both applications and system software must be analysed and potentially improved . the eu fp7 project _ collaborative research into exascale systemware , tools & applications _ ( cresta ) chose the approach to co - design advanced simulation applications and system software as well as development tools . in this paper , we present the results of a co - design activity focused on the simulation code nek5000 that aims at performance improvements of collective communication operations . </S>",
    "<S> we have analysed the algorithms that form the core of nek5000 s communication module in order to assess its viability on recent computer architectures before starting to improve its performance . </S>",
    "<S> our results show that the crystal router algorithm performs well in sparse , irregular collective operations for medium and large processor number but improvements for even larger system sizes of the future will be needed . </S>",
    "<S> we sketch the needed improvements , which will make the communication algorithms also beneficial for other applications that need to implement latency - dominated communication schemes with short messages . </S>",
    "<S> the latency - optimised communication operations will also become used in a runtime - system providing dynamic load balancing , under development within cresta .    , collective operations , performance tuning </S>"
  ]
}