{
  "article_text": [
    "model transformation is a critical process in software construction and development .",
    "as increasingly larger software systems are being developed , there is tendency to have solid and effective tools to automatize the software development .",
    "the specification of a software can be formal and ( or ) graphical . for graphical formalisms , we can mention as example uml models , uml class diagram , uml activity diagram and interaction diagram . for the formal ones , logic",
    "are increasingly used due to their mathematical background .",
    "for example , petri - net is used as a graphical and a formal specification formalism .",
    "logic is the language of formal methods such that theorem proving and model checking . to facilitate and to link graphical and formal language",
    ", there is a massive need to make generic techniques for the transformation of graphical models to formal notations .",
    "the use of logic is difficult for non familiar with logical concepts and specification . as a result",
    ", there is a need to provide the possibility to make specifications in a modeling level .",
    "stakeholders can begin with a graphical model ( possibly with many system views ) .",
    "then , with an automatic and correct transformation they can produce a specification in a formal logic . in the context of logic , institution theory has emerged as a framework allowing their study and the different relation between them .    in our previous work @xcite",
    ", we used graph grammar to define an automatic transformation between uml ad and event - b . thanks to the notion of graph grammar , the automation aspect is given to the transformation .",
    "the semantic equivalence between source and target model is not proved .",
    "the reason is the absence of formal semantic for the source and the target formalism . to overcome this drawback",
    ", we use institution theory to make the required semantic for the source formalism which is uml ad .",
    "the first contribution aims to give institutional presentation of uml ad . in our knowledge , in the literature ,",
    "no proven institution for uml ad exists .",
    "this institutional presentation define a formal semantic of uml ad .",
    "in addition , this algebraic presentation of the source formalism will be a meta - level to study possible transformation to event - b models @xcite .",
    "thus , the study of some proprieties like model amalgamation and theory co - limits of this formalism will be enhanced @xcite .",
    "those notions play a key role in heterogeneous specification approaches .",
    "the uml ad institution may be used in a heterogeneous modeling language such uml diagram like in @xcite .",
    "the paper is organized as follows : in section 2 we present the related works .",
    "then in section 3 , we recall institution definition .",
    "section 4 shows how to prove that uml ad establish an institution .",
    "section 5 give an example of uml ad model and make focus in its institution . finally , the last section concludes our work .",
    "in literature , institution theory is largely used and studied .",
    "we have three category of works based on institution theory .",
    "the first category is interested on the use of institution theory and its known concepts in the development of an heterogeneous specification approaches .",
    "we mention the approach of the heterogeneous specification in the tool cafeobj @xcite .",
    "this approach is based on a cube on eight logic and twelve projections ( defined as a set of institution morphism and institution comorphism ) @xcite .",
    "it s inspired by the semantic based on diaconescu s notion of grothendieck institution @xcite .",
    "another approach is developed in the work of mossakowski @xcite @xcite .",
    "the heterogeneous logical environment developed by the author is formed by a number of logical systems .",
    "these logical systems are formalized as institutions linked with the concepts of institution morphism and comorphism .",
    "the second category of works focus on the use of institution theory in the specification of graphical formalism such as uml diagrams . in this category ,",
    "we mention the work present in @xcite @xcite @xcite @xcite .",
    "the approach defined by cengarle et al .",
    "aims to define a semantic for uml class diagram , uml interactions diagram and ocl .",
    "each diagram is described in its natural semantic because of the use of the algebraic formalization of each formalism .",
    "in addition , relations between diagrams are expressed via institution morphism and comorphism .",
    "we note here that this approach is inspired by mossakowski works in the heterogeneous institution setting .",
    "the third category of works uses this theory for a specific intention and a precise case study .",
    "the work in @xcite is a good candidate in this category where authors defined a heterogeneous framework of services oriented system , using institution theory .",
    "authors ( in @xcite ) aims to define a heterogeneous specification approach for service - oriented architecture ( soa ) .",
    "the developed framework consists of a several individual services specification written in a local logic .",
    "the specification of their interactions is written in a global logic .",
    "the two defined logics are described via institution theory and an institution comorphism is used to link the two defined institution .",
    "this approach is inspired by the work of mossakowski .",
    "another work is developed in @xcite where the authors propose to use institution to represent the logics underling owl and z. then , they propose a formal semantic for the transformation of owl to z specification via the use of institution comorphism .",
    "our proposed approach aims at first to give a semantic for uml ad via its representation as an institution . as a result",
    ", we propose to consolidate our approach given @xcite .",
    "thus , with the defined semantic the transformation of uml ad model to an event - b model can be semantically proven which means that the two model will be semantically equivalent .",
    "it s clear that the approach we propose do not tackle the problematic of heterogeneous specification environment like @xcite and in @xcite .",
    "the use of event - b is argued with the following reasons : +    * event - b is a formal method that supports interactive and automatic theorem proving .",
    "the resulted specification , after the transformation process , can be proved automatically .",
    "event - b as a theorem prover is seeing a continuous improvement by industrial society . * with the notion of refinement , we can perform successive refinements to the event - b model in order to obtain a pseudo code written in declarative language . *",
    "thanks to the notion of composition supported in event - b , we can define heterogeneous specification environment with different graphical formalism . with the notion of composition , system described with heterogeneous specification can be composed and then proved formally .    our work is inspired form @xcite .",
    "we are devoted to use uml ad as a formalism for applications modeling .",
    "this formalism will be represented as an institution .",
    "we intend to gain a formal semantic of uml ad thanks to its algebraic categorical presentation .",
    "the version of uml ad used in this paper is 2.0 . in literature , many approaches are proposed for the development of uml ad formal semantic .",
    "recent works which treated the newest version are the work of strrle in @xcite @xcite @xcite .",
    "strrle provides a formal definitions for the semantics of control - flow , procedure call , data - flow , and exceptions in uml 2.0 activities .",
    "the defined semantic is inspired by petri - net semantic .",
    "the choice of petri - net semantic by the authors is argued by the following reasons .    *",
    "the standard claims that in the version 2.0 of uml ad _ activities are redesigned to use a petri - like semantics instead of state machines_. * thanks to the formal foundation adequateness of petri - net to give a formal semantic for uml ad * in addition , in @xcite strrle have shown how standard petri - net tools may be applied to verify properties of uml 2.0 activity diagrams , using a petri - net semantics .    in our paper",
    ", we will not use any intermediate semantic for uml ad such using petri - net semantics .",
    "we provide a formal semantic of uml ad with mathematical notions in term of categorical abstract presentation . we get profit from this categorical presentation the next benefit :    * from this categorical presentation of the syntax and the semantic of uml ad",
    ", we can prove that uml ad can be written as an institution * we can use the defined institution for an heterogeneous specification tools like @xcite * because we use event - b as formal method for the verification of the uml ad we can use the concepts of institution comorphism and institution morphism to transform uml ad to event - b",
    "institution is an abstract concept invented by joseph goguen and rod brustall because of the important variety of logics .",
    "it provide a basis for reasoning about software specifications independent of the choice of the underlying logical system @xcite .",
    "it offers an abstract theoretic presentation of logic in a mathematical way .",
    "an institution consists of notions of signatures , models , sentences , with a technical requirement , called the satisfaction condition , which can be paraphrased as the statement that truth is invariant under change of notation @xcite . modeling the signatures of a logical system as a category , we get the possibility to translate sentences and models across signature morphisms .",
    "the satisfaction condition is essential for reuse of specifications : it states that all properties that are true of a specification remain true in the context of another specification which imports that specification .",
    "* definition 1 : * + _ an institution @xmath0 consists of : _    * _ a category @xmath1 whose objects are called signatures and the arrow are signature morphism .",
    "_ * _ a functor @xmath2 , this functor map each signature @xmath3 to the set whose elements are called sentences constructed over that signature .",
    "also sen map each signature morphism to function between sentences .",
    "_ * _ a functor @xmath4 , this functor map each signature @xmath3 to the category of models of this signature .",
    "also @xmath5 map each signature morphism to model homomorphism between models .",
    "_ * _ a relation @xmath6 giving for each sentences of a signature @xmath3 the models in which the sentences are true . _    _ the relation @xmath6 is called the satisfaction condition which can be interpreted like follows : + given a signature morphism @xmath7 : @xmath3 @xmath8 @xmath3 in the institution i. _ + _ for each model @xmath9 and e @xmath10 ) _ + _ @xmath11 _ +",
    "uml activity diagrams ( uml ad ) are graphical notation developed by the omg .",
    "it s used for the specification of workflow applications and to give details for an operation in software development .",
    "uml ad serve many purposes , during many phases of the software life cycle @xcite .",
    "they are intended for being used for describing all process - like structures , ( business processes ) , software processes , use case behaviors , web services , and algorithmic structures of programs .",
    "uml ad are thus applicable throughout the whole software life cycle , which means during business modeling , acquisition , analysis , design , testing , and operation , and in fact in many other activities .",
    "thus , they are intended for usage not just by software - architects and software - engineers , but also by domain specialists , programmers , administrators and so on . some works in the literature use to define an institution for uml diagrams , we mention @xcite @xcite @xcite @xcite .",
    "the cited works is devoted to define three institution for respectively uml class diagram , uml interactions diagram and ocl . in our paper , the semantic of uml ad",
    "will be based on the works of h. strrle .",
    "as we say in the previous section , the considered work is the more recent and relevant work in this context conformed with the standard .    with the version 2.0 of uml ad ,",
    "the meta - model for activities has been redesigned from scratch ( fig [ fig : dessin11 ] ) .",
    "the main concept underlying activity diagrams is now called activity @xcite .",
    "the meta - model defines six levels increasing expressiveness .",
    "the first level ( `` basic activities '' ) already includes control flow and procedurally calling of subordinate activities by activity nodes that are in fact actions ( see fig [ fig : dessin11 ] ) .",
    "this paper is restricted to basic activities .",
    "readers may refer to @xcite @xcite @xcite for more details about the syntax and the semantic of uml ad .",
    "next , we will prove that uml ad formalism can be written as an institution .",
    "activity as defined in @xcite is the coordination of elementary actions or it consists of one atomic action . besides , given a class diagram , methods are functions that uses attributes of the considered class",
    ". then , class diagram methods are functions or operations that changes the state of an object ( defined as an instance of the considered class ) . in this two cases",
    ", we consider an activity as a method of a class in uml class diagram or we consider an activity as a coordination of one action or more . as result",
    ", we can define a relation of hierarchy .",
    "this relation is defined between two activities activity a and activity b. + an activity hierarchy @xmath12 written as @xmath13 is a partial order with a set of activity names @xmath14 and a subclass relation @xmath15 . + given an activity hierarchy @xmath13 , a _",
    "a_-activity domain is a _",
    "a_-indexed family @xmath16 of sets of activity with @xmath17 if @xmath18 .",
    "we aim to prove that the activity hierarchies can be formalized as a category which can be done via it s formalization as a grothendieck construction and also as a monad .",
    "the two presentations of activity hierarchies as grothendieck construction and as a monad are shown in @xcite ( with replacing class hierarchies with activity hierarchies ) .",
    "an uml ad signature consists of a pair @xmath19 where @xmath12 is the activity hierarchy and @xmath20 is the set of activity edges .",
    "+ given a signature @xmath19 with @xmath13 , we define a set _ * t * _ of atomic formulas over @xmath3 by : + * * _ * t * _ : = skip @xmath21 seq(c , e , d)**with e @xmath22 and c , d @xmath23 _ a _ , + given uml ad signatures @xmath24 _ @xmath25 _ ) and @xmath26 _ @xmath27 _ ) .    we define a uml ad signature morphism @xmath28 as a morphism that maps activity node names to activity node names and maps activity edges to activity edges .",
    "we note here that activity node can be one of the following node :    * en : the set of executable nodes ( i.e. elementary actions ) ; * in or fn : the initial nodes or the final nodes * bn : the set of branch nodes , including both merge nodes and decision nodes * cn : the set of concurrency nodes , subsuming fork nodes and join nodes ; * on : the set of object nodes ;    as for activity edges may be a pair ae , of , where :    * ae : the set of plain activity edges between executable nodes and control nodes ; * of : the set of object flows between executable nodes and control nodes on the one hand , and object nodes on the other .",
    "signature morphism extend to atomic formulas over @xmath29 as follows : + * @xmath30 * + * @xmath7(seq(@xmath31,@xmath32,@xmath33=seq(@xmath34,@xmath35,@xmath36 * let @xmath37 _ e _ ) be an uml ad signature .",
    "x = ( @xmath38 .",
    "the language of propositional ( @xmath3,x ) formulas has the below form : + * _ * t * _ : = skip @xmath21 seq(c , e , d)*. + the language of first order ( @xmath3,x ) formulas has the form : + * @xmath39::=_t _ @xmath21 _ _ * t*__=_*t * _ @xmath40*. + @xmath3 sentences are closed formulas defined on ( @xmath3,x ) formulas .      in the standard , the semantic of uml ad",
    "is determined by a path expressing the trace of the execution . for",
    "the execution , a token will move from the initial activity node to the final activity node @xcite .",
    "each activity has its role in ad execution @xcite .",
    "first of all , a token in the initial node means the beginning of the execution of uml ad .",
    "then , the trace of the token will be defined by the outgoing edges of the initial node .",
    "when a token arrive to an executable node , it will trigger the action or the operation in this node . for the join node ,",
    "`` if there is a token offered on all incoming edges , then a token are offered on the outgoing edge '' .",
    "a fork node means that , `` when an offered token is accepted on all the outgoing edges , duplicates of the token are made and one copy traverses each edge '' . in the case of merge node and decision node , every edge ( s ) respectively incoming and outgoing",
    "is associated to a condition determining the condition of the activation of this edge . for merge node , `` if there is a token offered to only one of the incoming edges where the condition is true ( it s a sufficient condition ) , then a token are offered on the outgoing edge of the merge node '' .",
    "a decision node means that in the outgoing edge where the condition is true , an offered token will traverses this edge .",
    "a token that traverses a object node means the availability of the object ( variable ) needed to the execution of the coming activity .",
    "given a uml signature @xmath37 _ e _ ) with @xmath13 , a structure _ i _ for @xmath3 is a triple _ _",
    "i__=(@xmath41 ) where @xmath42=(@xmath43 is an activity domain for @xmath44 a domain of edges and @xmath45 : _ e _ @xmath46 is an interpretation function for edges .",
    "given a variable c a valuation @xmath47 for c in _",
    "i _ assigns values to variables .",
    "this means : + @xmath48    a sub - signature @xmath49 with @xmath50 induces a set of traces _",
    "t_(@xmath51,_i _ ) defined as follows : + _ t_(@xmath51,_i_)=\\{@xmath52 } + the set of @xmath53(_i_)of all traces is defined as : + @xmath53(_i_)=\\{@xmath54 } + the set @xmath55 of traces of an atomic formula _",
    "t _ over @xmath3 in the structure _ i _ under the valuation @xmath47 are inductively defined as follows : + t:=skip @xmath56=\\{@xmath57 } + t:=seq(c , e , d ) @xmath58    * _ * t * _ : = skip @xmath21 seq(c , e , d ) * with e @xmath22 and c , d @xmath23 _ a _ , +      let @xmath59 and @xmath60 be two uml ad signatures , an uml ad signature morphism @xmath28 , two structure @xmath61 a @xmath29-structure and @xmath62 a @xmath63-structure defined as @xmath64 ) and @xmath65 ) .",
    "semantic invariance under the change of notation is formulated as @xmath66 for any atomic formula @xmath67 over @xmath29 .",
    "this can be shown by induction on the structure of @xmath67 .",
    "+ @xmath68 + @xmath69    also we have _ t_(@xmath70      after this theoretic study of uml ad",
    ", we can prove that it form an institution .",
    "we can immediately observe that institutional presentation rely heavily on the institution of first order logic .    * proposition 1 : * + _ uml activity diagram form an institution presented as below : _",
    "* _ signatures declares activity nodes names , edges nodes names .",
    "_ * _ sentences are closed formulas where well formed formulas combines atomic formulas using the conjunction , negation , universal quantification and equality of variables .",
    "the atomic formulas associated to uml ad are uml ad branch ( connection between activity node names ) and it s composition using the operator seq . _ * _ model interprets each signature as follows : _ * * _ each activity node ( depending to activity node type ) as : _ * * * _ an instance of executable nodes if it denote the set en .",
    "_ * * * _ a truth valuation if it is initial nodes or the final nodes .",
    "_ * * * _ a valuation to true or false depending to the condition on the branch nodes ( including both merge nodes and decision nodes ) .",
    "_ * * * _ a valuation to true when it denote a concurrency nodes , subsuming fork nodes and join nodes . _ * * * _ an instance of object or an attributes on a object for object nodes . _ * * _ as for activity edges the interpretation : _ * * * _ an instance showing the end of execution of the activity node ( where this edge is defined as the outgoing connection ) and the beginning of the execution of another activity ( where this edge is defined as the incoming connection ) . _",
    "the example of the figure [ fig : dessin12 ] is presented in ( @xcite ) .",
    "it represent an uml ad model and uml class diagram . the later contain the different action(method ) used in the uml ad model . from the categorical theoretic presentation of uml ad in the previous subsection",
    ", we can identify the signatures , the sentences and the interpretation of the example [ fig : dessin12 ] .",
    "for the example ( fig [ fig : dessin12 ] ) the signatures declares activity node names initial node , receive order , fill order , ship goods , send invoice receive payment , close payment , final node , and split , or split , and join and or join . and split denote a subsuming fork . or split denote a decision node . and",
    "join denote a join nodes . or join denote a decision node . as for edges",
    ", the example declares e1 , e2 e3 , e4 , e5 , e6 , e7 , e8 , e9 , e10 , e11 , e12 , e13 .",
    "the sentence presented by the above example is the following closed formulas : + * seq(initial node , e1,receive order ) @xmath71 seq(receive order , e2,or split ) @xmath71 + seq(or split , e3,or join ) @xmath71 seq(or split , e4,fill order ) @xmath71 + seq(fill order , e5,and split ) @xmath71 seq(and split , e6,ship goods ) @xmath71 + seq(and split , e7,send invoice ) @xmath71 seq(ship goods , e8,and join ) @xmath71 + seq(send invoice , e9,receive payment ) @xmath71 seq(receive payment , e10,and join)@xmath71 + seq(and join , e11,or",
    "join)@xmath71 seq(or join , e12,close payment ) @xmath71 + seq(close payment , e13,final node)*. +",
    "in our paper , we investigated the use of institution theory in a modeling formalism .",
    "we are motivated by the fact that we want to borrow the verification of system requirement and uml ad properties to event - b .",
    "in other terms , we aim to verify properties inexpressible in uml ad model with the theorem prover event - b . the institution of uml ad work as a meta - modelling language for this formalism .",
    "in addition , uml ad model conformance with the meta - model ( formalism ) will be seen as a verification of the syntax correctness in the framework of uml ad institution . the defined syntax for uml ad do nt address the whole syntax such it s defined in the standard .",
    "as future work , we aim to add more aspects for the uml ad institution . then",
    ", we intend to prove an institution of event - b and an institution comorphism from uml ad institution to event - b institution .",
    "thus , the semantic equivalence between source and target model will full preserved ."
  ],
  "abstract_text": [
    "<S> giving a formal semantic to an uml activity diagram ( uml ad ) is a hard task . </S>",
    "<S> the reason of this difficulty is the ambiguity and the absence of a precise formal semantic of such semi - formal formalism . a variety of semantics exist in the literature having tackled the aspects covered by this language . </S>",
    "<S> we can give as example denotational , functional and compositional semantics . to cope with the recent tendency which gave a heterogeneous semantic to uml diagrams </S>",
    "<S> , we aim to define an algebraic presentation of the semantic of uml ad . in this work , </S>",
    "<S> we define a formal semantic of uml 2.0 ad based on institution theory . for uml ad formalism , which is a graphical language , no precise formal semantic </S>",
    "<S> is given to it . </S>",
    "<S> we use the institution theory to define the intended semantic . </S>",
    "<S> thus , the uml ad formalism will be defined in its own natural semantic .    </S>",
    "<S> institution theory ; uml 2.0 activity diagram ; formal semantic ; </S>"
  ]
}