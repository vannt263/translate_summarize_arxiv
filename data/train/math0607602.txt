{
  "article_text": [
    "the ( classical ) parking functions of length @xmath0 are sequences @xmath9 of nonnegative integers for which there is a permutation @xmath2 so that @xmath3 for all @xmath4 .",
    "this notion was first introduced by konheim and weiss @xcite in the study of the linear probes of random hashing function .",
    "the name comes from a picturesque description in @xcite of the sequence of preferences of @xmath0 drivers under certain parking rules .",
    "parking functions have many interesting combinatorial properties .",
    "the most notable one is that the number of parking functions of length @xmath0 is @xmath10 , cayley s formula for the number of labeled trees on @xmath11 vertices .",
    "this relation motivated much work in the early study of parking functions , in particular , combinatorial bijections between the set of parking functions of length @xmath0 and labeled trees on @xmath11 vertices .",
    "see @xcite for an extensive list of references .",
    "there are a number of generalizations of parking functions , for example , see @xcite for the double parking functions , @xcite for @xmath12-parking functions , and @xcite for parking functions associated with an arbitrary vector .",
    "recently , postnikov and shapiro @xcite proposed a new generalization , the _ @xmath7-parking functions _ , associated to a general connected digraph @xmath13 .",
    "let @xmath7 be a digraph on @xmath11 vertices indexed by integers from @xmath14 to @xmath0 .",
    "a @xmath7-parking function is a function @xmath15 from @xmath16 $ ] to @xmath17 , the set of non - negative integers , satisfying the following condition : for each subset @xmath18 $ ] of vertices of @xmath7 , there exists a vertex @xmath19 such that the number of edges from @xmath20 to vertices outside @xmath21 is greater than @xmath22 . for the complete graph @xmath23 , such defined functions are exactly the classical parking functions , where one views @xmath24 as the digraph with one directed edge @xmath25 for each pair @xmath26 . in @xcite chebikin and pylyavskyy",
    "constructed a family of bijections between the set of @xmath7-parking functions and the ( oriented ) spanning trees of that graph .",
    "perhaps the most important statistic of the classical parking functions is the ( reversed ) sum , that is , @xmath27 for a parking function @xmath28 of length @xmath0 .",
    "it corresponds to the number of linear probes in hashing functions @xcite , the number of inversions in labeled trees on @xmath29 $ ] @xcite , and the number of hyperplanes separating a given region from the base region in the extended shi arrangements @xcite , to list a few .",
    "it is also closely related to the number of connected graphs on @xmath29 $ ] with a fixed number of edges . in @xcite",
    "the second author gave a combinatorial explanation , which revealed the underlying correspondence between the classical parking functions and labeled , connected graphs .",
    "the main idea is to use breadth - first search to find a labeled tree on any given connected graph , and record such a search by a queue process .",
    "the objective of the present paper is to extend the result of @xcite to arbitrary graphs . for a general graph @xmath7 , a suitable tool to study all subgraphs of @xmath7 is the tutte polynomial .",
    "this is a generating function with two parameters , the internal and external activities , which are functions on the collection of spanning trees of @xmath7 .",
    "evaluating the tutte polynomial at various points provides combinatorial information about the graph , for example , the number of spanning trees , spanning forests , connected subgraphs , acyclic orientations , subdigraphs , etc .",
    "these many valuations make the tutte polynomial one of the most fundamental tools in algebraic graph theory",
    ".    an important approach to getting information about the tutte polynomial is to use partitions .",
    "this approach dates from the 1960 s , see crapo @xcite .",
    "more information on the history of tutte polynomial can be found in @xcite . also in that paper gessel and sagan proposed a number of new notions of external activity , along with a new way to partition the substructures of a given graph .",
    "the basic method is to use depth - first search to associate a spanning forest @xmath30 with each substructure to be counted .",
    "this process partitions the simplicial complex of all substructures ( ordered by inclusion ) into intervals , one for each @xmath30 .",
    "every interval turns out to be a boolean algebra consisting of all ways to add external active edges to @xmath30 . expressing the tutte polynomial in terms of sums over such intervals permits one to extract the necessary combinatorial information .    in @xcite gessel and",
    "sagan also mentioned another search , the _ neighbors - first search _ , and related the external activity determined by the neighbors - first search on a complete graph with @xmath11 vertices to the sum of ( classical ) parking functions of length @xmath0 .",
    "this connection was further explained in @xcite . in the present paper",
    "we extend this result to an arbitrary graph @xmath7 by developing the connection between tutte polynomial of @xmath7 and certain restricted functions defined on @xmath31 , the vertex set of @xmath7 .",
    "this is achieved by combining the two approaches mentioned before .",
    "first , we use breadth - first search to get a new partition of all spanning subgraphs of @xmath7 .",
    "each subgraph is associated with a spanning forest of @xmath7 , which allows us to get a new expression of the tutte polynomial in terms of breadth - first external activities of its spanning forests .",
    "second , we construct bijections between the set of all spanning forests of @xmath7 and the set of functions defined on @xmath31 with certain restrictions .",
    "one of such bijection , namely the one induced by breadth - first search with a queue , leads to the characterization of the ( breadth - first ) external activity of a spanning forest by the corresponding function .    to work with spanning forests ,",
    "we propose the notion of a @xmath7-multiparking function , a natural extension of the notion of a @xmath7-parking function .",
    "let @xmath7 denote a graph with a totally ordered vertex set @xmath31 .",
    "often we will take @xmath32=\\{1 , 2 , \\dots , n\\}$ ] . for simplicity and clarity , we assume that @xmath7 is a simple graph in most of the paper , except at the end of section 3 where we explain how our construction could be modified to apply for general directed graphs , with possible loops and multiple edges .",
    "this includes undirected graphs as special cases , as an undirected graph can be viewed as a digraph where each edge @xmath33 is replaced by a pair of arcs @xmath34 and @xmath35 .    for any subset @xmath36 , and vertex @xmath37 , define @xmath38 to be the cardinality of the set @xmath39 . here",
    "@xmath40 is the set of edges of @xmath7 .",
    "let @xmath7 be a simple graph with @xmath32 $ ] .",
    "g - multiparking function _ is a function @xmath41\\rightarrow \\mathbb{n } \\cup \\ {   \\infty \\}$ ] , such that for every @xmath36 either @xmath4 is the vertex of smallest index in @xmath21 , ( written as @xmath42 ) , and @xmath43 , or there exists a vertex @xmath44 such that @xmath45 .",
    "the vertices which satisfy @xmath46 in will be called _ roots of @xmath15 _ and those that satisfy ( in @xmath21 ) are said to be _ well - behaved _ in @xmath21 , and and will be used to refer , respectively , to these conditions hereafter .",
    "note that vertex @xmath47 is always a root .",
    "the @xmath7-multiparking functions with only one root ( which is necessarily vertex @xmath47 ) are exactly the @xmath7-parking functions , as defined by postnikov and shapiro .",
    "sections 2 and 3 are devoted to the combinatorial properties of @xmath7-multiparking functions . in ",
    "2 we construct a family of algorithmic bijections between the set @xmath48 of @xmath7-multiparking functions and the set @xmath49 of spanning forests of @xmath7 .",
    "each bijection is a process based on a choice function , ( c.f .",
    " 2 ) , which determines how the algorithm proceeds . in ",
    "3 we give a number of examples to illustrate various forms of the bijection .",
    "this includes the cases where there is a special order on @xmath31 , for instance _ depth - first search order _ , _ breadth - first search order _ , and a prefixed linear order , and the cases that the process possesses certain data structure , such as queue and stacks . at the end of  3",
    "we explain how the algorithm works for general directed graphs .",
    "section 4 is on the relation between @xmath7-multiparking functions and the tutte polynomial of @xmath7 .",
    "first , for each forest @xmath30 we give a characterization of @xmath30-redundant edges , which are edges of @xmath50 that are `` irrelevant '' in determining the corresponding @xmath7-multiparking function . using that we classify the edges of @xmath7 , and establish an equation between @xmath51 and sum of @xmath7-multiparking function , @xmath52 , and the @xmath30-redundant edges .",
    "then we use breadth - first search to partition all the subgraphs of @xmath7 into intervals .",
    "each interval consists of all graphs obtained by adding some breadth - first externally active edges to a spanning forest @xmath30 .",
    "the set of breadth - first externally active edges of @xmath30 are exactly the @xmath30-redundant edges of a certain type , which allows us to express the number of breadth - first externally active edges , and hence the tutte polynomial , by the values of corresponding @xmath7-multiparking function . in section 5 we exhibit some enumerative results related to @xmath7-multiparking functions  and substructures of graphs .",
    "in this section , we construct bijections between the set @xmath48 of @xmath7-multiparking functions and the set @xmath49 of spanning forests of @xmath7 . for simplicity , here we assume @xmath7 is a simple graph with @xmath32 $ ] .",
    "sub - forest _ @xmath30 of @xmath7 is a subgraph of @xmath7 without cycles .",
    "a leaf of @xmath30 is a vertex @xmath53 with degree 1 in @xmath30 .",
    "denote the set of leaves of @xmath30 by @xmath54 .",
    "let @xmath55 be the set of all ordered pairs @xmath56 such that @xmath30 is a sub - forest of @xmath7 , and @xmath57 .",
    "a _ choice function _",
    "@xmath58 is a function from @xmath55 to @xmath31 such that @xmath59 .",
    "examples of various choice functions will be given in  3 , where we also explain how the bijections work on a general directed graph , in which loops and multiple edges are allowed .",
    "as one can see , loopless undirected graphs can be viewed as special case there .",
    "fix a choice function @xmath58 . given a @xmath7-multiparking function @xmath60",
    ", we define an algorithm to find a spanning forest @xmath61 .",
    "explicitly , we define quadruples @xmath62 recursively for @xmath63 , where @xmath64 is the _ value function _ , @xmath65 is the set of _ processed _ vertices , @xmath66 is the set of vertices _ to be processed _ , and @xmath67 is a subforest of @xmath7 with @xmath68 , @xmath69 or @xmath66 consists of an isolated vertex of @xmath67 .",
    "* algorithm a*.    * * step 1 : initial condition .",
    "* let @xmath70 , @xmath71 be empty , and @xmath72 . *",
    "* step 2 : choose a new vertex @xmath73 . * at time @xmath74 , let @xmath75 , where @xmath58 is the choice function . *",
    "* step 3 : process vertex @xmath73 .",
    "* for every vertex @xmath76 adjacent to @xmath73 and @xmath77 , set @xmath78 .",
    "for any other vertex @xmath79 , set @xmath80 .",
    "let @xmath81 .",
    "update @xmath65 , @xmath66 and @xmath67 by letting @xmath82 , @xmath83 if @xmath84 , otherwise @xmath85 where @xmath79 is the vertex of the lowest - index in @xmath16 - p_{i}$ ] .",
    "let @xmath67 be a graph on @xmath86 whose edges are obtained from those of @xmath87 by joining edges @xmath88 for each @xmath89 .",
    "we say that the vertex @xmath73 is processed at time @xmath4 .",
    "iterate steps 2 - 3 until @xmath90 .",
    "we must have @xmath91 $ ] and @xmath92 .",
    "define @xmath93 by letting @xmath94 .",
    "if an edge @xmath95 is added to the forest @xmath67 as described in step 3 , we say that _",
    "@xmath76 is found by @xmath73 _ , and @xmath73 is the _ parent _ of @xmath76 , if @xmath96 .",
    "( in this paper , the parent of vertex @xmath73 will be frequently denoted @xmath97 . ) by step 3 , a vertex @xmath76 is in @xmath66 because either it is found by some @xmath73 that has been processed , and @xmath95 is the only edge of @xmath67 that has @xmath76 as an endpoint , or @xmath76 is the lowest - index vertex in @xmath16 - p_i$ ] and is an isolated vertex of @xmath67 . also , it is clear that each @xmath67 is a forest , since every edge @xmath98 in @xmath99 has one endpoint in @xmath100 . hence @xmath101 is well - defined and thus we have a well - defined map @xmath102 from @xmath103 to @xmath104 .",
    "the following proposition describes the role played by the roots of a @xmath7-multiparking function @xmath15 .",
    "[ root ] let @xmath15 be a @xmath7-multiparking function .",
    "each tree component @xmath105 of @xmath106 has exactly one vertex @xmath73 with @xmath107 .",
    "in particular , @xmath73 is the least vertex of @xmath105 .    in the algorithm",
    "a the value for a root of @xmath15 never changes , as @xmath108 .",
    "each nonroot vertex @xmath76 of @xmath105 is found by some other vertex @xmath73 , and @xmath109 is an edge of @xmath105 .",
    "as any tree has one more vertex than its number of edges , it has exactly one vertex without a parent . by the definition of algorithm",
    "a , this must be a root of @xmath15 .    to show that the root is the least vertex in each component , let @xmath110 be the roots of @xmath15 and suppose @xmath111 are the trees of @xmath112 , where @xmath113",
    "let @xmath114 be the tree of smallest index @xmath20 such that there is a @xmath115 with @xmath116 .",
    "then @xmath117 since the vertex @xmath47 is always a root .",
    "define @xmath118 .",
    "@xmath21 is thus a proper subset of @xmath32 $ ] . by assumption ,",
    "the vertex of least index in @xmath21 is not a root .",
    "therefore , @xmath21 must contain a well - behaved vertex ; that is , a vertex @xmath73 such that @xmath119 .",
    "note that all the edges counted by @xmath38 lead to vertices in the trees @xmath120 . by the structure of algorithm @xmath121 , all the vertices in the first @xmath122 trees",
    "are processed before the parent of @xmath73 is processed . but",
    "this means that by the time @xmath121 processes all the vertices in the first @xmath122 trees , @xmath123 , so @xmath73 should be adjacent to some vertex in one of the first @xmath122 trees .",
    "this is a contradiction .    from the above proof",
    "we also see that the forest @xmath112 is built tree by tree by the algorithm a. that is , if @xmath124 and @xmath114 are tree components of @xmath30 with roots @xmath125 , @xmath126 and @xmath127 , then every vertex of tree @xmath124 is processed before any vertex of @xmath114 .    to show that @xmath102 is a bijection",
    ", we define a new algorithm to find a @xmath7-multiparking function  for any given spanning forest , and prove that it gives the inverse map of @xmath102 .",
    "let @xmath7 be a graph on @xmath16 $ ] with a spanning forest @xmath30 .",
    "let @xmath128 be the trees of @xmath30 with respective minimal vertices @xmath129 .",
    "* algorithm b. *    * * step 1 .",
    "determine the process order @xmath130 .",
    "* define a permutation @xmath131 on the vertices of @xmath7 as follows .",
    "first , @xmath132 . assuming @xmath133 are determined , * * * case ( 1 ) * if there is no edge of @xmath30 connecting vertices in @xmath134 to vertices outside @xmath135 , let @xmath136 be the vertex of smallest index not already in @xmath135 ; * * * case ( 2 ) * otherwise , let @xmath137 , and @xmath138 be the forest obtained by restricting @xmath30 to @xmath139 .",
    "let @xmath140 .",
    "+ ( hereafter , when discussing process orders , we will write @xmath141 as @xmath142 . ) * * step 2 . define a @xmath7-multiparking function  @xmath143 .",
    "* set @xmath144 . for",
    "any other vertex @xmath73 , let @xmath145 be the minimal vertex in the tree containing @xmath73 , and @xmath146 be the unique path from @xmath73 to @xmath145 .",
    "set @xmath147 to be the cardinality of the set @xmath148 .    to verify that a function @xmath143 defined in this way is a @xmath7-multiparking function , we need the following lemma .",
    "[ lemma_2.1 ] let @xmath149 be a function .",
    "if @xmath150 obeys property or property and @xmath151 is a subset of @xmath21 containing @xmath73 , then @xmath73 obeys the same property in @xmath151 .",
    "if @xmath152 and @xmath73 is the smallest vertex in @xmath21 , then clearly it will still be the smallest vertex in @xmath151 .",
    "if @xmath73 is well - behaved in @xmath21 , then @xmath119 and as @xmath153 , we have @xmath154 .",
    "thus @xmath73 is well - behaved in @xmath151 .",
    "the _ burning algorithm _ was developed by dhar @xcite to determine if a function on the vertex set of a graph had a property called _ recurrence_. an equivalent description for @xmath7-parking functions is given in @xcite : we mark vertices of @xmath7 starting with the root @xmath47 .",
    "at each iteration of the algorithm , we mark all vertices @xmath73 that have more marked neighbors than the value of the function at @xmath73 .",
    "the function is a @xmath7-parking function if and only if all vertices are marked when this process terminates . here",
    "we extend the burning algorithm to @xmath7-multiparking functions , and write it in a linear form .    [ burning ]",
    "a vertex function is a @xmath7-multiparking function if and only if there exists an ordering @xmath155 of the vertices of a graph @xmath7 such that for every @xmath20 , @xmath156 satisfies either condition or condition in @xmath157 .",
    "we say that the vertices can be  thrown out \" in the order @xmath158 if they satisfy the condition described in the proposition . by the definition of @xmath7-multiparking function , it is clear that for a @xmath7-multiparking function , vertices can be thrown out in some order .",
    "conversely , suppose that for a vertex function @xmath149 the vertices of @xmath7 can be thrown out in a particular order @xmath159 .",
    "for any subset @xmath21 of @xmath31 , let @xmath12 be the maximal index such that @xmath160 .",
    "this implies @xmath161 .",
    "but @xmath162 satisfies either condition or condition in @xmath163 . by lemma [ lemma_2.1 ]",
    ", @xmath162 satisfies either condition or condition in @xmath21 . since @xmath21 is arbitrary , @xmath15 is a @xmath7-multiparking function .",
    "the algorithm b , when applied to a spanning forest of @xmath7 , yields a @xmath7-multiparking function  @xmath143 .",
    "let @xmath130 be the permutation defined in step 1 of algorithm b. we show that the vertices can be thrown out in the order @xmath164 .",
    "as @xmath165 , the vertex @xmath166 clearly can be thrown out .",
    "suppose @xmath167 can be thrown out , and consider @xmath162 .",
    "if @xmath168 , by case ( 1 ) of step 1 , @xmath162 is the smallest vertex not in @xmath169 . thus it can be thrown out .",
    "if @xmath170 , there is an edge of the forest @xmath30 connecting @xmath162 to a vertex @xmath76 in @xmath169 .",
    "suppose @xmath171 where @xmath172 . by definition of @xmath15",
    ", there are exactly @xmath173 edges connecting @xmath162 to the set @xmath174 . hence @xmath175 .",
    "thus @xmath162 can be thrown out as well .    by induction",
    "the vertices of @xmath7 can be thrown out in the order @xmath158 .",
    "define @xmath176 by letting @xmath177 .",
    "now we show that @xmath178 and @xmath179 are inverses of each other .",
    "[ bijection ] @xmath180 for any @xmath181 and @xmath182 for any @xmath183 .    first , if @xmath181 and @xmath112 , then by prop .",
    "[ root ] the roots of @xmath15 are exactly the minimal vertices in each tree component of @xmath30 .",
    "those in turn are roots for @xmath184 . in applying algorithm b to @xmath30",
    ", we note that the order @xmath185 is exactly the order in which vertices of @xmath7 will be processed when running algorithm a on @xmath15 .",
    "that is , @xmath186 , and @xmath136 is not a root of @xmath15 , then @xmath66 is the set of vertices which are adjacent ( via edges in @xmath30 ) to those in @xmath65 . by the construction of algorithm",
    "a , a vertex @xmath76 is found by @xmath73 if and only if there are @xmath187 many edges connecting @xmath76 to vertices that are processed before @xmath73 , or equivalently , to vertices @xmath79 with @xmath188 . since in @xmath106 , @xmath189 , we have @xmath180 .",
    "conversely , we prove that @xmath182 by showing that @xmath190 and @xmath30 have the same set of edges .",
    "first note that the minimal vertices of the tree components of @xmath30 are exactly the roots of @xmath191 , which then are the minimal elements of trees in @xmath106 .",
    "edges of @xmath30 are of the form @xmath192 , where @xmath73 is not a minimal vertex in its tree component .",
    "we now show that when applying algorithm a to @xmath184 , vertex @xmath73 is found by @xmath97 .",
    "note that @xmath193 . in the implementation of algorithm a , the _ valuation _ on @xmath73 drops by 1 for each adjacent vertex that is processed before @xmath73 .",
    "when it is @xmath97 s turn to be processed , @xmath194 drops from @xmath14 to @xmath195 .",
    "thus @xmath97 finds @xmath73 , and @xmath192 is an edge of @xmath190 .",
    "since the roots of the @xmath7-multiparking function  correspond exactly to the minimal vertices in the tree components of the corresponding forest , in the following we will refer to those vertices as _ roots of the forest_.",
    "the bijections @xmath196 and @xmath197 , as defined above via algorithms a and b , allow a good deal of freedom in implementation . in algorithm",
    "a , as long as @xmath58 is well - defined at every iteration of step 2 , one can obtain @xmath198 , @xmath199 , @xmath200 and @xmath201 and proceed . recall that @xmath58 is a function from @xmath55 , the set of ordered pairs @xmath56 , to @xmath31 such that @xmath59 , where @xmath30 is any sub - forest of @xmath7 ( not necessarily spanning ) and @xmath151 is a non - empty subset of @xmath54 or consists of an isolated point of @xmath30 .    when restricting to @xmath7-parking functions , ( i.e. , @xmath7-multiparking functions with only one root ) , the descriptions of the bijections @xmath102 and @xmath202 are basically the same as the ones given by chebikin and pylyavskyy @xcite , where the corresponding sub - structures in @xmath7 are spanning trees .",
    "however our family of bijections , each defined on a choice function @xmath58 , is more general than the ones in @xcite , which rely on a _ proper set of tree orders_. a proper set of tree orders is a set @xmath203 of linear orders on the vertices of @xmath105 , such that for any @xmath204 , @xmath205 , and if @xmath206 is a subtree of @xmath105 containing the least vertex , @xmath207 is a suborder of @xmath208 .",
    "our algorithms do not require there to be a linear order on the vertices of each subtree .",
    "in fact , for a spanning tree @xmath105 of a connected graph @xmath7 , the proper tree order @xmath208 , if it exists , must be the same as the one defined in step 1 of algorithm b. but in general , for two spanning trees @xmath105 and @xmath206 with a common subtree @xmath209 , the restrictions of @xmath208 and @xmath207 to vertices of @xmath209 may not agree .",
    "hence in general the choice function can not be described in terms of proper sets of tree orders .",
    "in addition , our description of the map @xmath102 , in terms of a dynamic process , provides a much clearer way to understand the bijection , and leads to a natural classification of the edges of @xmath7 which plays an important role in connection with the tutte polynomial ( c.f.4 ) .",
    "different choice functions @xmath58 will induce different bijections between @xmath103 and @xmath104 . in this section",
    "we give several examples of choice functions that have combinatorial significance .",
    "in example 1 we explain how to translate a proper set of tree orders into a choice function .",
    "hence the family of bijections defined in @xcite can be viewed as a subfamily of our bijections restricted to @xmath7-parking functions .",
    "the next three examples have appeared in @xcite .",
    "we list them here for their combinatorial significance .",
    "example 5 is the combination of breadth - first search with the @xmath210-sets equipped with certain data structures .",
    "it is the one used to establish connections with tutte polynomial in  4 .",
    "the last example illustrates a case where @xmath58 can not be expressed as a proper set of tree orders .",
    "we illustrate the corresponding map @xmath196 for examples 26 on the graph @xmath7 in figure [ graph - example ] .",
    "a @xmath7-multiparking function @xmath15 is indicated by  @xmath211 \" on vertices , where @xmath4 is the vertex label .",
    "@xmath212{mainexamplegraph } } \\end{picture}\\ ] ]    in each example , we will show the resulting spanning forest by darkened edges in @xmath7 . again",
    "each vertex will be labeled by a pair @xmath213 , where @xmath4 is the vertex labels , and @xmath214 , where @xmath215 . beneath that",
    ", a table will record the sets @xmath216 and @xmath217 for each time @xmath209 . in each @xmath216 ,",
    "the vertex listed first is the next to be processed .    * example 1 .",
    "* @xmath58 with a proper set of tree orders .",
    "+ we define the choice function that corresponds to a proper set of tree orders . here",
    "we should generalize to the proper set of forest orders , i.e. , a set of orders @xmath218 , defined on the set of vertices for each subforest @xmath30 of @xmath7 , such that for any @xmath219 , @xmath220 , and if @xmath138 is a subforest of @xmath30 with the same minimal vertex in each tree component , @xmath221 is a suborder of @xmath218 . in this case , define @xmath222 where @xmath73 is the minimal element in @xmath151 under the order @xmath218 .",
    "examples 24 are special cases of this kind .",
    "* example 2 . *",
    "@xmath58 with a given vertex ranking .",
    "+ given a vertex ranking @xmath223 define @xmath224 , where @xmath73 is the vertex in @xmath151 with minimal ranking .",
    "in particular , if @xmath225 is the identity permutation , then the vertex processing order is the _ vertex - adding order _ of @xcite . in this case , in step 2 of algorithm a , we choose @xmath73 to be the least vertex in @xmath226 and process it at time @xmath4 .",
    "the output of algorithm a is    @xmath227{givenvertexranking } } \\end{picture}\\ ] ] 1.4 in    the @xmath66 and @xmath65 for this instance are as follows .    [ cols=\"^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     for a spanning forest @xmath30 of @xmath7 , let us say that an edge @xmath228 is _ bfs - externally active _",
    "if @xmath229 .",
    "a crucial observation is made by spencer @xcite : an edge @xmath95 can be added to @xmath30 without changing the spanning forest under the bfs if and only if the two vertices @xmath73 and @xmath76 have been present in the queue at the same time . in our example of figure [ bfs_on_h ] ,",
    "edges @xmath230 and @xmath231 could be added back to @xmath30 .",
    "we write @xmath232 for the set of bfs - externally active edges .",
    "[ eactive ] if @xmath233 is any subgraph and @xmath30 is any spanning forest of @xmath7 then @xmath234    now consider the tutte polynomial . note that if @xmath235 , then @xmath236 . so @xmath237 and @xmath238 .",
    "hence if we fix a forest @xmath30 and sum over the corresponding interval @xmath239 $ ] , we have @xmath240 summing over all forests @xmath30 , we get @xmath241 or , equivalently , @xmath242    to evaluate @xmath232 , note that when applying bfs to a graph @xmath233 , the queue @xmath210 only depends on the spanning forest @xmath243 . given a forest @xmath30 , the processing order in @xmath210 is a total order @xmath244 on the vertices of @xmath30 satisfying the following condition : let @xmath245 be the tree components of @xmath30 with minimal elements @xmath246 . then ( 1 ) if @xmath73 is a vertex in tree @xmath124 , @xmath76 is a vertex in tree @xmath114 and @xmath247 , then @xmath248 . ( 2 ) among vertices of each tree",
    "@xmath124 , @xmath125 is minimal in the order @xmath249 . ( 3 ) for two non - root vertices @xmath250 in the same tree , @xmath248 if @xmath251 . in the case",
    "@xmath252 , @xmath248 whenever @xmath253 .    comparing with the examples in  3",
    ", we note that @xmath249 is exactly the order @xmath254 described in example 5 of  3 , as _ breadth - first order with a queue_. fix the choice function @xmath255 , the one associated to @xmath254 and consider the maps @xmath256 and @xmath197 .",
    "given @xmath30 , the condition that two vertices @xmath250 have been present at the queue @xmath210 at the same time when applying bfs to @xmath30 is equivalent to @xmath257 or @xmath258 .",
    "that is , an edge is bfs - externally active if and only if it is an @xmath30-redundant edge of type 3 , as defined in  4.1 .",
    "it follows that @xmath259 .    therefore by prop .",
    "[ edgecategorization ] , @xmath260 where @xmath261 is the corresponding @xmath7-multiparking function .",
    "note that @xmath262 , and @xmath263 , where @xmath264 is the number of roots of @xmath15 .",
    "therefore    [ new_tutte ] @xmath265 where the sum is over all @xmath7-multiparking functions .    for a @xmath7-multiparking function",
    "@xmath15 , where @xmath7 is a graph on @xmath0 vertices , we call the statistics @xmath266 the _ reversed sum _ of @xmath15 , denote by @xmath267 .",
    "the name comes from the corresponding notation for classical parking functions , see , for example , @xcite .",
    "theorem [ new_tutte ] expresses tutte polynomial in terms of generating functions of @xmath264 and @xmath267 . in @xcite gessel and",
    "sagan gave a similar expression , in terms of @xmath268 , the set of _ greatest - neighbor externally active _ edges of @xmath30 , which is defined by applying the greatest - neighbor depth - first search on subgraphs of @xmath7 . combining the result of @xcite ( formula 5 ) , we have @xmath269    that is , the three pairs of statistics , @xmath270 and @xmath271 for spanning forests , and @xmath272 for @xmath7-multiparking functions , are equally distributed .    remark .",
    "alternatively , one can prove theorem [ new_tutte ] by conducting _",
    "neighbors - first search _ ( nfs ) , a tree traversal defined in @xcite , and using @xmath273 , the choice function associated with the depth - first search order , ( c.f .",
    "example 3 , ",
    "the nfs is another algorithm that builds a spanning forest @xmath30 given an input graph @xmath233 .",
    "the following description is taken from @xcite .",
    "* let @xmath274 .",
    "* let @xmath73 be the least unmarked vertex in @xmath275 and mark v. * search @xmath73 by marking all neighbors of @xmath73 that have not been marked and adding to @xmath30 all edges from @xmath73 to these vertices .",
    "* recursively search all the vertices marked in nfs3 in increasing order , stopping when every vertex that has been marked has also been searched . *",
    "if there are unmarked vertices , then return to nfs2 .",
    "otherwise , stop .    the nfs searches vertices of @xmath233 in a depth - first manner but marks children in a locally breadth - first manner .",
    "figure [ nfs_on_h ] shows the result of nfs , when applies to the graph on the left of figure [ bfs_on_h ] .",
    "similarly , one defines @xmath276 , the set of edges _ externally active with respect to nfs _ , to be those edges @xmath228 such that @xmath277 .",
    "then prop .",
    "[ eactive ] and eq .",
    "hold again when we replace bfs with nfs , and @xmath232 with @xmath276 .",
    "now let @xmath273 and use the bijections @xmath278 and @xmath279 , one notices again that an edge is externally active with respect to nfs if and only if it is @xmath30-redundant of type 3 .",
    "and hence we get another proof of theorem [ new_tutte ] .",
    "an interesting specialization of theorem [ new_tutte ] is to consider @xmath280 , the restriction to spanning trees of @xmath7 and @xmath7-parking functions . for a @xmath7-parking function @xmath15 , or equivalently a @xmath7-multiparking function with exactly one root ( which is vertex 1 ) , @xmath281 and @xmath282 .",
    "hence @xmath283 .",
    "thus we obtain @xmath284    an equivalent form of this result , in the language of sand - pile models , was first proved by lpez @xcite using a recursive characterization of tutte polynomial . a bijective proof was given by cori and le borgne in @xcite by constructing a one - to - one correspondence between trees with external activity @xmath4 ( in tutte s sense ) to recurrent configurations of level @xmath4 , which is equivalent to @xmath7-parking functions with reversed sum @xmath4 .",
    "our treatment here provides a new bijective proof .",
    "in @xcite it is shown that , restricted to simple graphs , the greatest - neighbor externally active edges of @xmath30 are in one - to - one correspondence with certain inversions of @xmath30 . for a simple graph @xmath7 , view each tree @xmath105 of @xmath30 as rooted at its smallest vertex .",
    "an edge @xmath33 is greatest - neighbor externally active if and only if @xmath73 is a descendant of @xmath79 , and @xmath285 where @xmath76 is the child of @xmath79 on the unique @xmath286 path in @xmath30 , ( that is , @xmath287 ) .",
    "call such a pair @xmath288 a @xmath7-inversion . and denoted by @xmath289 the number of @xmath7-inversions of the forest @xmath30 .",
    "then we have the following corollary .    [ inv_rsum ]",
    "let @xmath290 be the set of spanning forests of @xmath7 with exactly @xmath12 tree components . and @xmath291 be the set of @xmath7-multiparking functions with @xmath12 roots .",
    "then @xmath292    in particular , when @xmath7 is the complete graph @xmath24 and @xmath293 , we have the well - known result on the equal - distribution of inversions over labeled trees , and the reversed sum over all classical parking functions of length @xmath0 , ( for example , see @xcite ) @xmath294 } y^{inv(t ) }   = \\sum_{\\alpha \\in p_n } y^{{n \\choose 2}-\\sum_{i=1}^n{\\alpha_i}},\\ ] ] where @xmath295 is the set of all ( classical ) parking functions of length @xmath0 .",
    "in this section we discuss some enumerative results on @xmath7-multiparking functions  and substructures of graphs .",
    "[ number_gpf ] the number of @xmath7-multiparking functions  with @xmath12 roots equals the number of spanning forests of @xmath7 with @xmath12 components .",
    "in particular , for connected graph @xmath7 , the number of @xmath7-multiparking functions  is @xmath296 . among them , those with an odd number of roots is counted by @xmath297 , and those with an even number of roots is counted by @xmath298 .",
    "the first two sentences follow directly from the bijections constructed in  2 , and theorem [ new_tutte ] . for the third sentence , just note that @xmath299 is the difference between the number of @xmath7-multiparking functions  with an odd number of roots , and those with an even number of roots .",
    "another consequence of theorem [ new_tutte ] and its proof is an expression for the number of spanning subgraphs with a fixed number of components and fixed number of edges , in terms of ( bfs)-external activity and @xmath7-multiparking functions .",
    "it is a generalization of the expectation formula in @xcite , which is the special case for complete graph @xmath300 .",
    "let @xmath7 be a connected graph .",
    "the number @xmath301 of spanning subgraphs @xmath233 with @xmath209 components and @xmath302 edges is given by @xmath303 where the first sum is over all spanning forests with @xmath209 components , and the second sum is over all @xmath7-multiparking functions  with @xmath209 roots .",
    "for any spanning forest @xmath30 with @xmath12 components , the number of spanning subgraphs @xmath233 with @xmath302 edges such that @xmath235 is given by @xmath304 .",
    "next we give a new expression of the @xmath305 in terms of classical parking functions .",
    "it enumerates the classical parking functions by the number of _ critical left - to - right maxima_. given a classical parking function @xmath306 , we say that a term @xmath307 is _ critical _ if in @xmath308 there are exactly @xmath20 terms less than @xmath20 , and exactly @xmath309 terms larger than @xmath20 .",
    "for example , in @xmath310 , the terms @xmath311 and @xmath312 are critical . among them , only @xmath311 is also a left - to - right maximum .",
    "let @xmath313 be the number of critical left - to - right maxima in a classical parking function @xmath308 .",
    "we have    [ opf ] @xmath314 where @xmath295 is the set of classical parking functions of length @xmath0 .",
    "let @xmath30 be a spanning forest on @xmath29 $ ] with tree components @xmath315 , where @xmath124 has minimal vertex @xmath125 , and @xmath316 .",
    "we define an operation @xmath317 which combines the trees @xmath128 by adding an edge between @xmath125 with @xmath318 for each @xmath319 , where @xmath318 is the vertex of @xmath320 that is maximal under the order @xmath321 .",
    "denote by @xmath322 the resulting tree .",
    "we observe that for the forest @xmath30 and the tree @xmath323 , the queue obtained by applying bfs are exactly the same .",
    "this implies that @xmath30 and @xmath323 have the same set of bfs - externally active edges .",
    "conversely , given @xmath105 and an edge @xmath324 where @xmath325 .",
    "we say the edge @xmath326 is _ critical _ in @xmath105 if @xmath327 .",
    "assume @xmath328 where @xmath329 and @xmath330 . by the definition of the merge operation",
    ", @xmath326 is critical if and only if @xmath76 is the maximal in @xmath331 under the order @xmath254 , and @xmath73 is vertex of the lowest index in @xmath332 . in terms of the queue obtained by applying bfs to @xmath105 , it is equivalent to the following two conditions : ( 1 ) there is a set @xmath66 such that @xmath333 , and @xmath73 does not belong to any other @xmath66 .",
    "( 2 ) @xmath73 is of minimal index among the set of vertices processed after @xmath73 .",
    "consider the maps @xmath196 and @xmath197 with @xmath334 and @xmath23 .",
    "let @xmath335 , and write @xmath15 as a sequence @xmath336 .",
    "( there is no need to record @xmath337 , as @xmath338 always . )",
    "then an edge @xmath288 is critical in @xmath105 if and only if ( 1 ) @xmath147 is critical in the sequence @xmath339 , and ( 2 ) @xmath340 for any vertex @xmath76 with @xmath341 .",
    "that is , @xmath147 is a left - to - right maximum in the sequence @xmath342 .",
    "now fix a spanning tree @xmath105 of @xmath24 and let @xmath343 be the set of spanning forests @xmath30 such that @xmath344",
    ". then an @xmath345 can be obtained from @xmath105 by removing any subset @xmath121 of critical edges , in which case @xmath346 .",
    "this , combined with the fact that @xmath347 , gives us @xmath348 where @xmath121 ranges over all subsets of critical edges of @xmath105 .",
    "under the correspondence @xmath349 and considering @xmath15 as a sequence @xmath339 , @xmath350 is just @xmath351 , and critical edges of @xmath105 correspond to critical left - to - right maxima of the sequence . hence the sum in equals @xmath352 theorem [ opf ] follows by summing over all trees on @xmath29 $ ] .",
    "finally , we use the breadth - first search to re - derive the formula for the number of subdigraphs of @xmath7 , which was first proved in @xcite using dfs , and extend the method to derive a formula for the number of subtraffics of @xmath7 .",
    "let @xmath7 be a graph",
    ". a _ directed subgraph _ or _ subdigraph _ of @xmath7 is a digraph @xmath13 that contains up to one copy of each orientation of every edge of @xmath7 . here for an edge @xmath33 of @xmath7 we permit both @xmath34 and @xmath35 to appear in a subdigraph .    for any subdigraph @xmath13 of @xmath7",
    ", we apply the bfs to get a spanning forest of @xmath13 .",
    "the only difference from the subgraph case is that when processing a vertex @xmath353 , we only add those unvisited vertices @xmath79 such @xmath354 is an edge of @xmath13",
    ".    if digraph @xmath13 has bfs forest @xmath30 , write @xmath355 .",
    "note that we can view @xmath30 as an oriented spanning forest , where each edge is pointing away from the root ( i.e. , the minimal vertex ) of the underlying tree component .",
    "say a directed edge @xmath356 is _ directed bfs externally active _ with respect to @xmath30 if @xmath357 .",
    "denote by @xmath358 the set of directed bfs - externally active edges .",
    "then we have the following basic proposition , which is the analog in the undirected case .",
    "if @xmath13 is any subdigraph and @xmath30 is any spanning forest of @xmath7 then @xmath359    now we characterize the directed bfs - externally active edges by the set @xmath232 , the bfs - externally active edges for the undirected graph @xmath7 .",
    "let @xmath33 be an edge of @xmath7 with @xmath360 .",
    "if @xmath361 , then the backward edge @xmath35 can be added without changing the result of ( directed ) breadth - first search , that is , @xmath362 . if @xmath363 , then both @xmath34 and @xmath35 are in @xmath358 .",
    "if @xmath33 is not in the forest @xmath30 or @xmath232 , then @xmath35 is in @xmath358 .",
    "together we have @xmath364 therefore    [ subgraph ] if @xmath7 has @xmath0 vertices , then @xmath365 where the sum is over all subdigraphs of @xmath7 .",
    "@xmath366    next we consider a slightly complicated problem .",
    "the _ sub - traffic _",
    "@xmath367 of @xmath7 , where @xmath367 is a partially directed graph on @xmath31 , is obtained from @xmath7 by replacing each edge @xmath33 of @xmath7 by ( a ) @xmath368 , ( b ) a directed edge @xmath34 , ( c ) a directed edge @xmath35 , ( d ) two directed edges @xmath34 and @xmath35 , or ( e ) an undirected edge @xmath33 .",
    "we proceed as we did before . for each subtraffic @xmath367",
    ", we apply the directed breadth - first search to get a spanning forest @xmath30 : the queue starts with the minimal vertex @xmath47 . at each iteration",
    ", we take the vertex @xmath353 at the head of the queue , remove @xmath353 from the queue , and add all unvisited vertices @xmath79 if @xmath369 or @xmath370 . add the directed edge @xmath354 to the forest @xmath30 if @xmath369 .",
    "otherwise , add the undirected edge @xmath371 to @xmath30 .",
    "the output is a forest @xmath16 $ ] in which each edge is either a directed edge oriented away from the minimal vertex of the underlying tree , or an undirected edge .",
    "let @xmath121 be the set of directed edges",
    ". denote by @xmath372 the output forest and write @xmath373 .",
    "note that @xmath374 is itself a sub - traffic of @xmath7 .    given a pair @xmath374 with directed edges @xmath375",
    ", we have the following characterization of edges that can be added to @xmath372 , without changing the bfs result , ( i.e. , @xmath376 . )    1 .   for each directed edge @xmath34 in @xmath377",
    ", we can add back @xmath35 without changing the result of the spanning forest .",
    "2 .   for each bf -",
    "externally active edge @xmath33 of @xmath30 , we can add back any one of @xmath378 and @xmath33 , or both @xmath34 and @xmath35 at the same time .",
    "3 .   for each edge not in @xmath379",
    ", we can add back one of the undirected edge @xmath33 and the direct @xmath34 if @xmath79 is processed after @xmath73 in the queue .",
    "there is no further restriction on how the edges can be added back in addition to the above mentioned cases .",
    "then we have    let @xmath7 be a connected graph .",
    "then @xmath380 where the sum is over all subtraffic of @xmath7 .",
    "@xmath381 where @xmath30 is over all spanning forests of @xmath7 , and @xmath121 is a subset of the edges of @xmath30 .",
    "a subtraffic @xmath367 has @xmath373 if and only if it is obtained from @xmath30 by adjoining some edges as described in the preceding three cases .",
    "considering the contribution of each type , we have @xmath382 hence @xmath383    by evaluating equation [ newtuttesum ] at @xmath384 , we derive a new evaluation of the tutte polynomial that counts the number of subtraffics @xmath367 on @xmath7 .",
    "the number of subtraffics on @xmath7 is equal to @xmath385 .",
    "the authors thank robert ellis and jeremy martin for helpful discussions and comments .",
    "we also thank ira gessel for helpful comments on tutte polynomials , and for sharing the unpublished portion of a preprint of @xcite with us .",
    "ellis , r. _ chip - firing games with dirichlet eigenvalues and discrete green s functions_. ph.d .",
    "thesis at university of california , san diego , 2002 .",
    "available at ` http://math.iit.edu/\\simrellis/papers/thesis.pdf `                              stanley , r. p. _ hyperplane arrangements , parking functions , and tree inversions _ , in b. sagan and r. stanley , eds . , `` mathematical essays in honor of gian - carlo rota , '' birkhuser , boston and basel , 1998 , pp .  359375 ."
  ],
  "abstract_text": [
    "<S> a parking function of length @xmath0 is a sequence @xmath1 of nonnegative integers for which there is a permutation @xmath2 so that @xmath3 for all @xmath4 . </S>",
    "<S> a well - known result about parking functions is that the polynomial @xmath5 , which enumerates the complements of parking functions by the sum of their terms , is the generating function for the number of connected graphs by the number of excess edges when evaluated at @xmath6 . in this paper </S>",
    "<S> we extend this result to arbitrary connected graphs @xmath7 . in general the polynomial that encodes information about subgraphs of @xmath7 </S>",
    "<S> is the tutte polynomial @xmath8 , which is the generating function for two parameters , namely the internal and external activities , associated with the spanning trees of @xmath7 . </S>",
    "<S> we define @xmath7-multiparking functions , which generalize the @xmath7-parking functions that postnikov and shapiro introduced in the study of certain quotients of the polynomial ring . </S>",
    "<S> we construct a family of algorithmic bijections between the spanning forests of a graph @xmath7 and the @xmath7-multiparking functions . </S>",
    "<S> in particular , the bijection induced by the breadth - first search leads to a new characterization of external activity , and hence a representation of tutte polynomial by the reversed sum of @xmath7-multiparking functions .    _ </S>",
    "<S> key words and phrases : _ parking functions , breadth - first search , tutte polynomial , spanning forest    _ mathematics subject classification . _ </S>",
    "<S> 05c30 , 05c05 </S>"
  ]
}