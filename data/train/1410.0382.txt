{
  "article_text": [
    "in a symmetrical key cryptosystem @xcite , such as aes ( advanced encryption standard ) , two users alice and bob must first agree on a common secret key .",
    "if alice communicates the secret key to bob , a third party , eve , might intercept the key , and decrypt the messages . in order to avoid such",
    "a situation alice and bob can use an asymmetric public key cryptosystem @xcite , which provides a secure mechanism to exchange information between two users .    in public key cryptography",
    "each user has a pair of cryptographic keys , consisting of a public key and a secret private key .",
    "these keys are related through a hard mathematical inversion problem , such that the private key can not be practically derived from the public key .",
    "the two main directions of public key cryptography are the public key encryption and the digital signatures .",
    "public key encryption is used to ensure confidentiality . in this case",
    ", the data encrypted with the public key can only be decrypted with the corresponding private key , and vice versa .",
    "digital signatures are used to ensure authenticity . in this case , any message signed with a user s private key can be verified by anyone having the user s public key , proving the authenticity of the message .",
    "a standard implementation of public key cryptography is based on the diffie - hellman ( dh ) key agreement protocol @xcite .",
    "the protocol allows two users to exchange a secret key over an insecure communication channel .",
    "the platform of the dh protocol is the multiplicative group @xmath0 of integers modulo a prime @xmath1 .",
    "the dh protocol can be described as following :    1 .",
    "alice and bob agree upon the public integer @xmath2 .",
    "alice chooses the secret integer @xmath3 .",
    "alice computes @xmath4 , and publishes @xmath5 .",
    "4 .   bob chooses the secret integer @xmath6 , 5 .",
    "bob computes @xmath7 , and publishes @xmath8 .",
    "alice computes the secret integer @xmath9 .",
    "bob computes the secret integer @xmath10 .",
    "it is obvious that both alice and bob calculate the same integer @xmath11 , which then can be used as a secret shared key for symmetric encryption , improving the performance of the communication channel , since symmetric - key algorithms are generally much faster .",
    "assuming that the eavesdropper eve knows @xmath12 and @xmath8 , she needs to compute the secret key @xmath13 , that is to solve the discrete logarithm problem : @xmath14 for the unknown @xmath3 .",
    "if @xmath1 is a very large prime of at least 300 digits , and @xmath3 and @xmath6 are at least 100 digits long , then the problem becomes computationally hard ( exponential time in @xmath15 ) , and it is considered infeasible . for",
    "maximum security @xmath1 should be a safeprime , i.e. @xmath16 is also a prime , and @xmath17 a primitive root of @xmath1 @xcite .",
    "an important short coming of traditional public key cryptosystems is the computation with very large numbers and prime numbers ( 300 digit ) , which is difficult and not very efficient . for similar key sizes ,",
    "the dh method has a similar key strength as the mathematically related rsa method @xcite , which is based on the hard integer factorization problem .",
    "currently , no classical algorithm that can factor large numbers efficiently is known , which makes the rsa and the dh methods , widely used cryptographic protocols .",
    "however , this problem can be solved on a quantum computer in polynomial time using shor s algorithm @xcite .",
    "therefore , the current public key cryptographic protocols are insecure if sufficiently large quantum computers become available , putting many sensitive systems like e - commerce and internet banking at risk .",
    "this is why there is an ongoing search for other methods , where similar key exchange mechanisms can be implemented more efficiently , and are immune to quantum algorithms attacks .    here",
    ", we propose a new public key cryptosystem based on strings only , which avoids the traditional number theory approach .",
    "the security of the proposed cryptosystem is ensured by a recursive encoding mechanism embedded in a quasi - commutative - random function , which is a composition of a quasi - commutative function with a pseudo - random function . also ,",
    "in this revised version of the paper we show that the eavesdropper s problem of the proposed cryptosystem has a solution based on the modular multiplicative inverse , and we give the details of the solution .",
    "let us consider the following set : @xmath18 where the total number of elements is even .",
    "for example , if the intention is to build a crytosystem based on strings where the characters @xmath19 are representable on a byte word ( 8 bits ) , then one can consider @xmath20 .",
    "however , we should emphasize that this choice is not a restriction , and the results obtained here are valid for any even integer @xmath21 .",
    "thus , we assume that any element : @xmath22 is a string of length @xmath23 defined over the set @xmath24 .",
    "a function @xmath25 is said to be _ quasi - commutative _",
    "if for any @xmath26 we have @xcite : @xmath27 for example , the function used in both dh and rsa algorithms : @xmath28 is quasi - commutative , because : @xmath29    here we consider the function @xmath30 defined as : @xmath31\\,\\mathrm{mod}\\ , p,\\quad w\\in\\mathbb{n}.\\ ] ] the function @xmath32 is quasi - commutative , since we have : @xmath33+\\beta=\\ ] ] @xmath34 @xmath35 @xmath36+\\alpha = g_{w}(g_{w}(\\xi,\\beta),\\alpha),\\ ] ] where we have omitted @xmath37 , in order to simplify the notation .",
    "the quasi - commutative property ensures that if one starts with an initial value @xmath38 and a set of values @xmath39 , then the result of the composition : @xmath40 would not change if the order of the values @xmath41 were permuted @xcite .    we should note that if the parameter @xmath42 is even , @xmath43 , @xmath44 , then the function @xmath32 does not have fixed points . * _ _ * in order to prove this , let us consider the fixed point equation :    @xmath31\\,\\mathrm{mod}\\ , p=\\xi,\\ ] ]    which is equivalent to @xmath45 and @xmath46 since @xmath47 is odd , @xmath42 must be also odd in order to have a solution of the above equation .",
    "for example , if @xmath48 then @xmath49 is a solution of the fixed point equation .",
    "similarly , if @xmath50 , then @xmath51 is a solution of the fixed point equation .",
    "however , if @xmath42 is even , then the fixed point equation has no integer solutions .",
    "thus , the parameter @xmath42 in the function @xmath32 must be even , @xmath43 , @xmath44 , in order to avoid a fixed point in repeated iterations .",
    "let us now consider the following problem .",
    "given a string `` seed '' : @xmath52 find a transformation @xmath53 , that generates a non - repeating and pseudo - random sequence of strings , through a recursive application : @xmath54    the transformation @xmath53 can be for example a cryptographic hash function , which is considered impossible to invert , a random number generator , or a chaotic deterministic function .",
    "here we prefer to use a secure cryptographic hash function , due to its ability to deal directly with input strings of any length .",
    "however , following a similar approach , one can also adapt a cryptographically secure random number generator ( for example aes ) , or a chaotic deterministic function .",
    "an ideal cryptographic hash function has the following properties : ( a ) it computes a hash value for any given string ; ( b ) it is impossible to invert , i.e. to generate a string that has a given hash ; ( c ) any change in the input string triggers a change in the hash value ; ( d ) it is impossible to find two different strings with the same hash value .",
    "therefore , a cryptographic hash function should provide a random transformation of the input string .",
    "typical hash functions that can be used for the role of the @xmath53 transformation are the standard sha-1 , sha-2 and sha-3 cryptographic hash functions , published by the national institute of standards and technology ( nist ) as a u.s .",
    "federal information processing standard ( fips ) .",
    "most cryptographic hash functions are designed to take a string of any length as input and produce a fixed - length hash string value . here",
    ", we assume that the computed output hash string has a fixed length @xmath55 , such that : @xmath56",
    "for any element @xmath38 and string @xmath57 we define the following recursive transformation : @xmath58 where @xmath59 according to the results from the previous sections , this transformation satisfies the quasi - commutative property .",
    "also , we should note that from the algorithmic point of view , the transformation @xmath60 can be calculated as following : @xmath61    let us now define a more complex transformation @xmath62 , as a composition of @xmath60 and @xmath53 .",
    "for any two strings @xmath63 and @xmath57 we define : @xmath64 with the components @xmath65 , @xmath66 , given by :    @xmath67    satisfying the quasi - commutative property , since @xmath60 is quasi - commutative .",
    "the whole transformation is also quasi - commutative , and algorithmically it can be computed as following : @xmath68 an important aspect of the @xmath62 function , is that each component @xmath69 of the input string @xmath70 is encoded using a different string @xmath71 obtained by recursively applying the pseudo - random cryptographic hash function @xmath53 to the secret string @xmath72 .",
    "since now all the necessary ingredients have been defined , the proposed key generation and exchange protocol can be formulated as following :    1 .",
    "alice and bob agree upon the public string @xmath73 .",
    "alice chooses the secret string @xmath74 .",
    "3 .   alice computes the string @xmath75 , and publishes @xmath5 .",
    "4 .   bob chooses the secret string @xmath76 .",
    "bob computes the string @xmath77 , and publishes @xmath8 .",
    "alice calculates the secret string @xmath78 .",
    "bob calculates the secret string @xmath79 .",
    "both alice and bob obtain the same secret key @xmath80 , since @xmath62 satisfies the quasi - commutativity property : @xmath81 the flow chart showing the above key generation and exchange protocol is given in figure 1 .",
    "also , the c code implementing the proposed key generation and exchange protocol , and a typical key exchange simulation example , are given in the appendix .",
    "assuming that the eavesdropper eve knows @xmath82 and @xmath8 the hard problem is to compute the strings @xmath83 and respectively @xmath84 .",
    "this is a hard problem , since even the length ( @xmath23 and @xmath85 ) of the strings is kept secret by alice and bob , and the security is ensured by the above described recursive encoding mechanism embedded in the quasi - commutative - random function @xmath62 , which is a composition of a quasi - commutative function @xmath60 with a pseudo - random function @xmath53 .",
    "the encoding mechanism can also be described with the following recursive equations for the evolution of @xmath3 and @xmath86 , @xmath66 : @xmath87 and respectively @xmath88\\mathrm{\\ , mod}\\ , p,\\ ] ] with the unknowns @xmath89 .",
    "we should note that for each @xmath66 , any permutation @xmath90 of @xmath91 is also a solution of the equation ( 24 ) . assuming that by chance eve finds a solution @xmath92 for the first equation , @xmath93 , which is in fact a permutation of a hash of @xmath3",
    ", then one may think that she may use the recursion equation ( 23 ) to find @xmath90 .",
    "this is not possible either , because the results @xmath90 obtained via @xmath94 are completely dependent on the order of the characters in the string @xmath92 .",
    "therefore , any permutation @xmath92 of @xmath95 will give a different result @xmath90 .",
    "the recursion @xmath94 gives the correct result if and only if @xmath96 .",
    "we assume that eve knows the public information @xmath5 and @xmath8 , and we show that she can use this information to find the shared secret key @xmath97 . since @xmath75 , for @xmath66 we consider : @xmath98\\mathrm{\\ , mod}\\ , p\\ ] ] where the quantity @xmath99 will act as alice s private key @xmath3 .",
    "from here we obtain : @xmath100 @xmath101 the calculation of the modular inverse is shown in the program from the appendix .",
    "we also have @xmath102 , and by replacing @xmath3 with @xmath103 we obtain the shared secret key : @xmath104\\mathrm{\\ , mod}\\ , p,\\quad k=0,1, ... ,k-1.\\ ] ]",
    "in conclusion , we have presented a new public key cryptosystem based on strings , which avoids the cumbersome key generation using the traditional number theory approach . the security mechanism for public and secret keys generation",
    "is ensured by a recursive encoding mechanism embedded in a quasi - commutative - random function , resulted from the composition of a quasi - commutative function with a pseudo - random function . also , in this revised version of the paper we have shown that the eavesdropper s problem of the proposed cryptosystem has a solution based on the modular multiplicative inverse , and we have given the details of the solution .",
    "the author would like to thank c. monico for his comments .",
    "1 douglas r. stinson , cryptography theory and practice , third edition , crc press , boca raton , florida , 2006 .",
    "w. diffie , m. hellman , new directions in cryptography , ieee transactions on information theory 22 ( 6 ) : 644654 ( 1976 ) .",
    "randall k. nichols , icsa guide to cryptography , mcgraw - hill , new york , 1999 .",
    "r. rivest , a. shamir , l. adleman , a method for obtaining digital signatures and public - key cryptosystems , communications of the acm 21 ( 2 ) : 120126 ( 1978 ) .",
    "p. w. shor , algorithms for quantum computation : discrete logarithms and factoring , proc .",
    "35nd annual symposium on foundations of computer science ( shafi goldwasser , ed . ) , ieee computer society press , 124 - 134 ( 1994 ) .",
    "j. benaloh , m. de mare , one - way accumulators : a decentralized alternative to digital signatures , advances in cryptology - eurocrypt93 , lncs , vol .",
    "765 , springer - verlag , 274 - 285 , 1993 .",
    "below we give the c code of the proposed cryptosystem and the solution of the eavesdropper s problem .",
    "unsigned char * z = sha512(s , n , 0 ) ;      y[0 ] = x[0 ] ;      for(n=0 ; n < sha512_digest_length ; n++ ) {          y[0 ] = ( w*z[n ] + 1)*y[0 ] + z[n ] ;      }      for(k=1 ; k < k ; k++ ) {          z = sha512(z , sha512_digest_length , 0 ) ;          y[k ] = x[k ] ;          for(n=0 ; n < sha512_digest_length ; n++ ) {              y[k ] = ( w*z[n ] + 1)*y[k ] + z[n ] ;          }      }      return y ; }              if ( !",
    "( initialized ) ) {      / * build a table of inverses .",
    "* /      for(i=0 ; i<256 ; i++ ) inv[i ] = 0 ;      for(i=0 ; i<256 ; i++ ) {        for(j=0 ; j<256 ; j++ ) {          if((i*j)%256 = = 1 ) {            inv[i ] = ( unsigned char)j ;            inv[j ] = ( unsigned char)i ;          }        }      }      initialized=1 ;    }    return inv[x ] ; }          for(j=0 ; j < k ; j++ ) {      e[j ] = ( a[j ] - g[j])*inversemod256(w*g[j ] + 1 ) ;      }    / * e[0], ... ,e[k-1 ] acts like alice 's private key .",
    "now find the shared secret key .",
    "* /    for(j=0 ; j < k ; j++ ) {       se[j ] = w*b[j]*e[j ] + b[j ] + e[j ] ;      }    printf(\"\\n\\neve has recovered the shared secret key:\\n \" ) ;    sprint(se , k ) ; } /*****************************************************/                        the code example ( keys.c ) has been tested on a linux pc , running ubuntu 14.04 lts , using the standard gcc compiler and openssl implementation of the secure socket layer ( ssl ) , and related cryptographic tools . in this example , the role of the secure cryptographic hash function @xmath53 is taken by the sha-2 function which provides hash strings with a length of 64 bytes ( 512 bits ) , and we set @xmath105 .        for illustration purposes , the results obtained for one instance run are given below in hexadecimal .",
    "one can see that both alice and bob compute the same secret key ( sa = sb ) , using completely different secret and public keys .",
    "one can can also see that eve can recover the secret key using the public information @xmath5 and @xmath8 .",
    "generator : public g 93444ff1380add6ae67dba5444e16cffa02679ba50e6c66cf72b18c7cf53d3 972253d02c303a12aef467f2d6d3f276f96b304951f6b64922ce10f121e353 06a68932d6c34584b8ac778e7f690478d434c2252a786e4c467e3d67629020",
    "36a99a0d6ddf91258b08b30a71b78345eb456b15bdd96203589f6aba308b    alice : secret key a 6634bc73a19c05c6270d79327f30b5c41bfa2f31b70993ba6132241b62af3d e4f93c8595414cbd4fc5efcef6a492119ec24255cbd50f2c0833476ae38433 7d704c13b198d0005ebfce546361650123a856ee7d651a859861f07be52342 938f7545274545850414d967753f6898e7be866423a0eabc01da37e6fd7a48 09bed630031bb6082f8f6fa4ced83cb596c21aba62047663dead49db27926c 504261535e175b8da6cb3275a36e2a393144f3934869f7261740023ed26e6f b1d0760fe7d19c8d9cce023f3d2d796e716c01bad6f8e0ed39e22b0b519a2e 6aa4115175addf127ce151b90eca278037283a0d211afa5afd25654e    bob : secret key b 93502a37617cad0e5bbf8a3c10434bdb6acb1293051fb41f190e1c3e736afe ba293e1ba5eb2a00aab43cbbf887966252a8f557c7a977e0b7931e2bfe1d32 4670d4eb5cfeeb06b227c1aaaf570d01ff0259c6acd0a66363c58e61e2c01a 31ee138decfe939e255549d4ac56d6ac582f7204ff196862    alice : public key a 5e47a84e9c3934d60b9c86eac559446036b4c3922eb5d69f6214d0ed571399 55e5f2a66019720222fd1c280a811f54fceca2c1f66d532cd35c0ed5a01c0f 0f7626a0f3981a163a79ed4caf92e2e992121a4ef84708f4a510555a140f5f 48f78dae89da8100ccb46a4140ceb1fd03cf382d99532c233a060c065985    bob : public key b 64f5bad9a33bc6fb07cf101e6ec86507d607daa28dec4878c47573d23b9bb4 76d04a6a0c37b400ab8f364b048b8fad94723ed81a0437c3fcc3373842e93d d0ad6743cce4138fcd7afe363ead967c6696b979dea48a65aa5a04d47d0133 1761eda41e9eeb6f45196e74d37bccc7c3b127898047dcf1440f3527e7f5    alice : shared secret key s = sa c96eed661ff0575fdec2acaca370ed58b4a1c0fab73f98b3b1cafb74035b8e 7097c7b8409ecc30078e551da81906ffed952800dd0fb65a918d19442b16c9 dd5d081d15ffcc4de31340d4ceeeecf51caca15a9c1b945d219c0c794bde4c dd0f6aefe28f1b9e321dbb07f6dade1f5b8b9ce154898e91d656134b6e27    bob : shared secret key s = sb c96eed661ff0575fdec2acaca370ed58b4a1c0fab73f98b3b1cafb74035b8e 7097c7b8409ecc30078e551da81906ffed952800dd0fb65a918d19442b16c9 dd5d081d15ffcc4de31340d4ceeeecf51caca15a9c1b945d219c0c794bde4c dd0f6aefe28f1b9e321dbb07f6dade1f5b8b9ce154898e91d656134b6e27    eve has recovered the shared secret key : c96eed661ff0575fdec2acaca370ed58b4a1c0fab73f98b3b1cafb74035b8e 7097c7b8409ecc30078e551da81906ffed952800dd0fb65a918d19442b16c9 dd5d081d15ffcc4de31340d4ceeeecf51caca15a9c1b945d219c0c794bde4c dd0f6aefe28f1b9e321dbb07f6dade1f5b8b9ce154898e91d656134b6e27 ...."
  ],
  "abstract_text": [
    "<S> traditional methods in public key cryptography are based on number theory , and suffer from problems such as dealing with very large numbers , making key creation cumbersome . here </S>",
    "<S> , we propose a new public key cryptosystem based on strings only , which avoids the difficulties of the traditional number theory approach . </S>",
    "<S> the security mechanism for public and secret keys generation is ensured by a recursive encoding mechanism embedded in a quasi - commutative - random function , resulted from the composition of a quasi - commutative function with a pseudo - random function . in this revised version of the paper </S>",
    "<S> we show that the eavesdropper s problem of the proposed cryptosystem has a solution , and we give the details of the solution .    </S>",
    "<S> unlimited analytics inc .    </S>",
    "<S> calgary , ab , canada    mircea.andrecut@gmail.com </S>"
  ]
}