{
  "article_text": [
    "the _ all - pairs shortest paths _ ( apsp ) problem is one of the most important , and most studied , algorithmic graph problems . given a weighted directed graph @xmath4 , on @xmath5 vertices and @xmath6 edges , where @xmath7 is a length ( or cost ) function defined on its edges , we would like to compute the _ distances _ between all pairs of vertices in the graph and a succinct representation of all _ shortest paths_. ( the length of a path is the sum of the lengths of the edges participating in the path . )    the apsp problem can be solved in @xmath8 worst - case time by running dijkstra s algorithm from each vertex of the graph .",
    "( see dijkstra @xcite , fredman and tarjan @xcite . ) a slightly better running time of @xmath9 was obtained by pettie @xcite , building on techniques developed by thorup @xcite .",
    "karger , koller and phillips @xcite and mcgeoch @xcite developed algorithms that run in @xmath10 time , where @xmath11 is the number of edges in the graph that are shortest paths .",
    "demetrescu and italiano @xcite ( see also thorup @xcite ) obtained a _ dynamic _",
    "apsp algorithm with an _ amortized _ vertex update time of @xmath12 .",
    "thorup @xcite obtained a dynamic algorithm with an @xmath13 _ worst - case _ vertex update time .",
    "vertex update _ may insert , delete and change the weight of edges that touch a given vertex  @xmath14 .",
    "an _ edge update _ may only insert , delete or change the weight of a single edge .",
    "the algorithms of demetrescu and italiano @xcite and thorup @xcite can be used , of course , to perform edge updates , but the updates times may still be @xmath12 and @xmath13 , respectively .",
    "many researchers developed apsp algorithms that work well on _ random _ instances , most notably complete directed graphs on @xmath0 vertices with random weights on their edges .",
    "the simplest such model , on which we focus in this paper , is the one in which all edge weights are drawn independently at random from the _ uniform _ distribution on @xmath1 $ ] .",
    "hassin and zemel @xcite and frieze and grimmett @xcite observed that , with very high probability , only the @xmath15 cheapest edges emanating from each vertex participate in shortest paths .",
    "thus , the apsp in this setting can be solved in @xmath16 expected time using the algorithms of karger _",
    "et al .  _",
    "@xcite and mcgeoch @xcite , or by simply selecting the @xmath15 cheapest edges emanating from each vertex and then running dijkstra s algorithm from each vertex . all these results actually hold in the more general setting in which edge weights are independent identically distributed random variables with a common cumulative distribution function  @xmath17 that satisfies @xmath18 and @xmath19 exists and is strictly positive .",
    "( the uniform distribution on @xmath1 $ ] with @xmath20 , and the _ exponential _ distribution , with @xmath21 clearly satisfy these conditions . ) furthermore , the running time of these algorithms is @xmath16 with _ high probability _ ,",
    "i.e. , probability that tends to  @xmath22 as @xmath0 tends to infinity , and not just in expectation .",
    "spira @xcite obtained an apsp algorithm with an expected running time of @xmath23 for complete directed graphs with edge weights drawn in an _ endpoint independent _ manner . more specifically , for each vertex  @xmath14 a sequence of  @xmath0 positive numbers is chosen by an arbitrary deterministic or probabilistic process .",
    "these  @xmath0 numbers are then assigned to the  @xmath0 edges emanating from  @xmath14 in a _ random _",
    "order , with all @xmath24 possible ordering being equally likely .",
    "bloniarz @xcite presented an improved algorithm with an expected running time of @xmath25 .",
    "moffat and takaoka @xcite and mehlhorn and priebe @xcite improved the expected running time to @xmath16 and showed that it also holds with high probability .",
    "cooper _ et al .  _",
    "@xcite obtained an apsp algorithm with an expected running time of @xmath16 in the _ vertex potential _ model in which edge weights may be both positive and negative .",
    "meyer @xcite , hagerup @xcite and goldberg @xcite obtained _ single - source shortest paths _ ( sssp ) algorithms with an expected running time of @xmath26 .",
    "the @xmath27-edge input graph may be arbitrary but its edge weights are assumed to be chosen at random from a common non - negative probability distribution . when the edge weights are independent , the running time of these algorithms is @xmath26 with high probability .",
    "friedrich and hebbinghaus @xcite presented an average case analysis of the dynamic apsp algorithm of demetrescu and italiano @xcite on random _ undirected _ graphs .",
    "the graphs in their analysis are chosen according to the @xmath28 model , in which each edge of the complete graph is selected with probability  @xmath29 , and edges of the random graph are given i.i.d .",
    "uniform random weights .",
    "they show that the expected edge update time is at most @xmath30 , for any @xmath31 .",
    "this bound is essentially tight when @xmath32 , i.e. , at the phase transition of the random graph , when the largest component is , with high probability , of size @xmath33 . when @xmath34 , they show that the expected update time is @xmath35 , for every @xmath31 .",
    "non - algorithmic aspects of distances and shortest paths in randomly weighted graphs were also a subject of intensive research in probability theory .",
    "we mention here only the results that are most relevant for us .",
    "davis and prieditis @xcite and janson @xcite showed that the expected distance of two vertices in a complete graph with random edge weights drawn independently from an _ exponential _ distribution with mean  @xmath22 ( i.e. , @xmath21 ) is exactly @xmath36 , where @xmath37 is the @xmath38-th harmonic number .",
    "the probability that a given edge is a shortest path between its endpoints is also exactly @xmath39 .",
    "exponential random variables are convenient to work with due to their _ memoryless _ property .",
    "the same asymptotic results hold when the edges weights are chosen independently and uniformly from @xmath1 $ ] . in the exponential case ,",
    "the tree of shortest paths from a given vertex has the same distribution as a _ random recursive tree _ on  @xmath0 vertices obtained using the following simple process : start with a root ; add the remaining @xmath40 vertices , each time choosing the parent of the new vertex uniformly at random among the vertices that are already in the tree .",
    "the expected _ depth _ of a vertex in such a tree , and hence the expected number of edges in a shortest path , is @xmath41 . for further results regarding recursive trees and shortest paths ,",
    "see devroye @xcite , smythe and mahmoud @xcite and addario - berry _ et al .  _",
    "@xcite .    in their survey on the algorithmic theory of random graphs , frieze and mcdiarmid @xcite state the following open problem ( research problem 22 on p.  28 ) :",
    "`` find a @xmath42 expected time algorithm for the all pairs problem under a natural class of distributions , e.g. , i.i.d .",
    "uniform on @xmath1 $ ] . ''",
    "we solve this open problem by giving an @xmath2 expected time algorithm for the problem , which is of course best possible .",
    "furthermore , our algorithm runs in @xmath2 time with high probability and works for both directed and undirected versions of the all - pairs shortest paths problem .",
    "our @xmath2-time apsp algorithm is a static version of the dynamic apsp algorithm of demetrescu and italiano @xcite ( see especially section  3.4 of @xcite ) with some modified data structures .",
    "the novel part of this paper is not the algorithm itself , but rather the probabilistic analysis that shows that it runs in @xmath2 time , in expectation and with high probability .",
    "we also obtain an @xmath3 upper bound on the expected time needed to update all shortest paths following a random edge update , i.e. , an update in which a random edge of the complete directed graph is selected and given a new random edge weight drawn uniformly at random from @xmath1 $ ] .",
    "the rest of the paper is organized as follows . in section  [ s - di ]",
    "we sketch the static and dynamic versions of the algorithm of demetrescu and italiano @xcite used in this paper .",
    "( complete descriptions of these algorithms are given in appendices  [ s - static ] and  [ s - dynamic ] . ) the crucial factor that determines the running time of these algorithms is the number of _ locally shortest paths _ in the graph .",
    "a path is a _ locally _ shortest path ( _ lsp _ ) if the paths obtained by deleting its first and last edge , respectively , are _",
    "shortest paths_. in section  [ s - dist ] we collect some known and some new results regarding the distances between vertices in randomly weighted graphs . using the results of section  [ s - dist ] , we show in section  [ s - lsp ] that the _ expected _ number of lsps in a complete directed graph with independent uniformly distributed random weights is @xmath2 . in section  [ s - high ]",
    "we show that the number of lsps is  @xmath2 _ with high probability_. sections  [ s - lsp ] and  [ s - high ] are the main sections of the paper . in section  [ s - heap ] we show that a fairly simple _ bucket _ based priority queue , with a constant amortized update time , in conjunction with the fact that the number of lsps is @xmath2 , in expectation and with high probability , yields the promised @xmath2-time apsp algorithm . in section  [ s - update ]",
    "we consider the expected time needed to perform _ random edge _ updates .",
    "interestingly , the arguments used in sections  [ s - high ] and  [ s - update ] are related , as they both focus on the expected number of shortest paths that _ change _ when a single edge is given a new random edge weight .",
    "( the link is the efron - stein inequality used in section  [ s - high ] . ) in section  [ s - concl ] we very briefly consider other random graph models . in particular , our algorithm still runs in @xmath2 expected time in the directed @xmath28 model , in which each edge is present with probability  @xmath29 , with independent uniformly distributed edge weights , at least when @xmath43 .",
    "we end in section  [ s - concl ] with some concluding remarks and open problems .",
    "our @xmath2 time bound , in expectation and with high probability , on the complexity of the solving the apsp problem on complete directed graphs with independent edge weight drawn uniformly from @xmath1 $ ] , and the @xmath44 expected time bound on the complexity of performing a random edge update are both obtained using variants of the dynamic apsp algorithm of demetrescu and italiano @xcite .    as our main result is the _ analysis _ of these variants , and not the variants themselves , we begin by sketching the main features of the variants we use , mentioning only what the reader needs to know to understand our analysis .",
    "a complete description of the algorithms is given in appendices  [ s - static ] and [ s - dynamic ] .",
    "( we believe that our variants are also of some interest , as they are not identical to the algorithms of @xcite . )    let @xmath4 be a weighted directed graph , where @xmath45 is a cost function defined on its edges .",
    "( we use weights and costs interchangingly . ) for simplicity , we assume that all shortest paths in  @xmath46 are _",
    "unique_. under essentially all probabilistic models considered in this paper , this assumption holds with probability  @xmath22 .",
    "( non - uniqueness of shortest paths can be dealt with as in @xcite . )",
    "we let @xmath47 denote the edge @xmath48 , and let @xmath49 denote the ( unique ) shortest path from  @xmath50 to  @xmath14 in the graph , if they exist .",
    "the key notion behind the algorithm of demetrescu and italiano @xcite is the notion of _ locally shortest paths_.    a path is a _ locally shortest path _ ( or _ lsp _",
    ", for short ) if the path obtained by deleting its first edge , and the path obtained by deleting its last edge , are both shortest paths .    more formally , if we let @xmath51 denote the path composed of the edge @xmath52 , followed by the shortest path from @xmath53 to  @xmath54 , and then by the edge @xmath55 , then @xmath51 is a locally shortest path if and only if @xmath56 and @xmath57 are both shortest paths .",
    "( if @xmath58 , then @xmath59 is an empty path . )",
    "an edge is considered to be a locally shortest path .",
    "( empty paths are considered to be shortest paths . )",
    "a shortest path is of course also a locally shortest path .",
    "a locally shortest path , however , is not necessarily a shortest path .",
    "we begin by describing a static version of the algorithm of demetrescu and italiano @xcite .",
    "let @xmath4 be a weighted directed graph .",
    "the algorithm constructs all shortest paths in  @xmath46 by essentially running dijkstra s algorithm in parallel from all vertices , while only examining lsps , as explained below .    for every @xmath60 ,",
    "the algorithm maintains a number @xmath61 $ ] which is the length of the shortest path from  @xmath50 to  @xmath14 found so far .",
    "initially @xmath61 $ ] is set to @xmath62 , if @xmath48 , or to @xmath63 , otherwise .",
    "each pair @xmath48 is inserted into a heap ( priority queue ) @xmath64 , with @xmath61 $ ] serving as its key .",
    "the heap @xmath64 holds all pairs of vertices @xmath65 such that at least one path from  @xmath50 to  @xmath14 in the graph was already discovered , but the shortest path from  @xmath50 to  @xmath14 was not yet declared .    in each iteration ,",
    "the algorithm extracts a pair @xmath65 with the smallest key in  @xmath64 . as in dijkstra",
    "s algorithm , @xmath61 $ ] is then the distance from  @xmath50 to  @xmath14 in  @xmath46 .",
    "the algorithm then examines lsps that _ extend _ the shortest path @xmath49 and checks whether they are shorter than the currently best available paths between their endpoints .",
    "( an extension of a path @xmath66 is a path obtained by adding an edge to its beginning or end . ) to efficiently find the lsps that extend a shortest path @xmath49 , the algorithm also maintains , in addition to @xmath61 $ ] , the following information for every @xmath60 :    @xmath67 $ ]  the _ second _ vertex on the shortest path from  @xmath50 to  @xmath14 found so far .    @xmath68 $ ]  the _ penultimate _",
    "( next to last ) vertex on the shortest path from  @xmath50 to  @xmath14 found so far .",
    "@xmath69 $ ]  a list of vertices @xmath70 for which @xmath71 is known to be a shortest path .    @xmath72 $ ]  a list of vertices @xmath70 for which @xmath73 is known to be a shortest path .",
    "if no path from  @xmath50 to  @xmath14 was found yet , then @xmath74=q[u , v]={null}$ ] .",
    "the lists @xmath75 $ ] and @xmath76 $ ] specify the _ left _ and _ right _ extensions of @xmath49 that are known to be shortest paths .",
    "clearly @xmath75 $ ] and @xmath76 $ ] are non - empty only after the shortest path @xmath49 was identified by the algorithm .",
    "suppose that @xmath51 , where @xmath77 $ ] and @xmath78 $ ] , was just identified as a shortest path . for every @xmath79 $ ] , @xmath71 is an lsp .",
    "similarly , for every @xmath80 $ ] , @xmath73 is an lsp .",
    "these paths are now examined by the algorithm .",
    "if , for example , a path @xmath71 is found to be shorter then the currently available path from  @xmath70 to  @xmath14 , or is the first path found from  @xmath70 to  @xmath14 , then @xmath81 $ ] , @xmath82 $ ] and @xmath83 $ ] are updated accordingly and the key of @xmath84 in  @xmath64 is decreased .",
    "( if @xmath84 is not already in  @xmath64 , it is inserted into  @xmath64 . )",
    "this is the gist of the static version of the algorithm of demetrescu and italiano @xcite , which , for concreteness , we refer to as algorithm . for a complete description and pseudo - code , see appendix  [ s - static ] .",
    "as algorithm  uses a priority queue , its running time depends on the characteristics of the priority queue used .",
    "for a specific implementation , we let @xmath85 and @xmath86 denote the ( amortized ) times of _ inserting _ an element , _ decreasing _ the key of a given element , and _ extracting _ an element of minimum key from a priority queue containing at most  @xmath0 elements .",
    "we next claim :    [ t - apsp-2 ] if all edge weights are positive and all shortest paths are unique , then algorithm  correctly finds all the shortest paths in the graph .",
    "algorithm  runs in @xmath87 time , where @xmath88 is the number of lsps in the graph , and uses only @xmath2 space .",
    "the proof of theorem  [ t - apsp-2 ] , which is essentially identical to the correctness proof given by demetrescu and italiano @xcite , can be found in appendix  [ s - static ] .",
    "if we use the fibonacci heaps data structure ( fredman and tarjan @xcite ) that supports  operations in @xmath15 amortized time , and all other operations in @xmath89 , amortized time , where @xmath0 is the number of elements in the heap , we get a running time of @xmath90 .",
    "there are , thus , two hurdles on our way to getting an expected @xmath2-time algorithm .",
    "first , we have to show that @xmath88 is @xmath2 , under natural probability distributions , in expectation and with high probability .",
    "we do that in sections  [ s - lsp ] and  [ s - high ] .",
    "second , we have to find a faster way of implementing heaps .",
    "we do that in section  [ s - heap ] using a _ bucket _ based implementation .",
    "the static algorithm of the previous section examines all locally shortest paths in a graph , but ( implicitly ) maintains only those that are currently shortest . the dynamic algorithm , on the other hand ,",
    "explicitly maintains all locally shortest paths , even if they are already known not to be shortest paths .    for every path @xmath66 ,",
    "we let @xmath91 $ ] be the path obtained by deleting the last edge of  @xmath66 , and @xmath92 $ ] be the path obtained by deleting the first edge of  @xmath66 .",
    "a path @xmath66 is represented by keeping its total cost , its first and last edges , and pointers to its subpaths @xmath91 $ ] and @xmath92 $ ] .",
    "the collection of all paths maintained by the algorithm is referred to as the _ path system_.    for every pair of vertices @xmath60 ,",
    "the dynamic algorithm maintains a heap @xmath93 $ ] that holds all the lsps connecting  @xmath50 and  @xmath14 found so far .",
    "the key of each path is its cost . as in the static case ,",
    "@xmath61 $ ] is the cost of the shortest path @xmath94 $ ] from  @xmath50 to  @xmath14 found so far .    for every lsp @xmath66 ,",
    "the dynamic algorithm maintains four lists of left and right extensions of  @xmath66 .",
    "the lists @xmath95 $ ] and @xmath96 $ ] contain left and right extensions of  @xmath66 that are known to be shortest paths .",
    "the lists @xmath97 $ ] and @xmath98 $ ] contain extensions of  @xmath66 that are known to be lsps .",
    "let @xmath99 be a set of edges whose costs are changed by an update operation .",
    "( we are mostly be interested in the case in which @xmath99 is composed of a single edge , but the description below is general . ) the dynamic algorithm recomputes all shortest paths as follows .",
    "first all lsps containing edges of  @xmath99 are removed from the path system .",
    "( note that each edge of  @xmath99 is an lsp , and is thus contained in the path system .",
    "all lsps containing edges of  @xmath99 can be found by recursively following the extension lists of these edges . )    for every pair of vertices @xmath60 such that the shortest path from  @xmath50 to  @xmath14 before the update passes through an edge of  @xmath99 , and was therefore removed from the path system , the algorithm finds the cheapest path in  @xmath93 $ ] , if at least one such path remains , and assigns it to @xmath94 $ ] .",
    "it then inserts the pair @xmath65 into a global heap  @xmath64 .",
    "the key of @xmath65 in  @xmath64 is the cost of @xmath94 $ ] .",
    "next , it recreates single - edge paths corresponding to the edges of  @xmath99 , with their new edge weights , and examines them .",
    "the dynamic algorithm now starts to construct new shortest paths . in each iteration",
    "it extracts from  @xmath64 a pair @xmath65 with the smallest key . as in the static case , the path @xmath94 $ ] is then a shortest path from  @xmath50 to  @xmath14 .",
    "lsp extensions of @xmath94 $ ] , obtained by combining @xmath94 $ ] with paths that are already known to be shortest paths , are now generated .",
    "if such an extension is shorter than the currently shortest available path containing its endpoints  @xmath53 and @xmath54 , then @xmath100 $ ] and @xmath101 $ ] are updated accordingly , and @xmath102 is inserted into  @xmath64 with the appropriate key .",
    "( if @xmath102 is already in  @xmath64 , its key is decreased . )",
    "an important difference between the dynamic variant used in this paper and the dynamic algorithm of demetrescu and italiano @xcite is that when a path @xmath66 stops being a shortest path , it , and all its extensions , are immediately removed from the path system .",
    "a similar dynamic variant was used by friedrich and hebbinghaus @xcite .",
    "the algorithm of demetrescu and italiano @xcite keeps such paths as _ historical _ and _ locally historical _ paths .",
    "( see also demetrescu _ et al .  _",
    "@xcite . )",
    "the most impressive feature of the dynamic algorithm of demetrescu and italiano @xcite is that its update time is proportional to the number of shortest and locally shortest paths that are destroyed and/or created by the update operation .",
    "the algorithm does not spend time on shortest paths that remain unchanged .",
    "let @xmath103 and @xmath104 be the sets of shortest and locally shortest paths destroyed by an update operation .",
    "similarly , let @xmath105 and @xmath106 be the sets of shortest and locally shortest paths that are created ( or recreated ) by an update operation .",
    "note that @xmath103 and @xmath105 , and @xmath104 and @xmath106 , are not necessarily disjoint , as paths passing through edges of  @xmath99 are first destroyed , and removed from the path system , but may then be recreated .",
    "let @xmath107 be an upper bound on the number of lsps that connect any given pair of vertices before and after the update .",
    "a complete description of the dynamic variant sketched here and its correctness proof are given in appendix  [ s - dynamic ] , where the following theorem is proved .",
    "( @xmath108 is the function that updates all shortest paths following a change in the costs of the edges of  @xmath99 . )",
    "[ t - dynamic ] the running time of @xmath108 is @xmath109 and @xmath110 are the ( amortized ) times of inserting , deleting , decreasing the key , extracting the element of minimum key , and finding the element of minimum key of a priority key containing at most  @xmath0 elements .",
    "we show in section  [ s - update ] that for a random edge update we have @xmath111,{\\mathbb{e}}[\\,|{\\mbox{$\\cal sp$}}^+|\\,]=o(\\log n)$ ] and that @xmath112,{\\mathbb{e}}[\\,|{\\mbox{$\\cal lsp$}}^+|\\,]=o(\\log^2 n)$ ] .",
    "we also show that @xmath113 , with high probability . using appropriate implementations of the priority queues ,",
    "we get an expected edge update time of @xmath44 .",
    "let @xmath114 be a complete directed graph on  @xmath0 vertices and let @xmath115 .",
    "we let @xmath116 be the random weight attached to the edge @xmath117 .",
    "we assume at first that @xmath116 is an _ exponential _ random variable with mean  @xmath22 , i.e. , @xmath118 .",
    "due to the memoryless property , dealing with exponentially distributed edge weights is easier than dealing directly with uniformly distributed edge weights .",
    "we later explain why all the results derived in this section for exponential edge weights also hold , asymptotically , for uniformly distributed edge weights . all @xmath119 random edge weights",
    "are assumed to be independent .",
    "( self - loops , if present , may be ignored . )",
    "let @xmath120 be the _ distance _ from  @xmath121 to  @xmath122 in the graph , i.e. , the length ( sum of weights ) on the shortest path @xmath123 in the graph .",
    "( the shortest path @xmath123 is unique with probability  @xmath22 . )",
    "note that @xmath120 is now also a random variable . for @xmath124 , we let @xmath125 be the distance from @xmath121 to the @xmath38-th closest vertex to  @xmath121",
    ".    let @xmath126 be the @xmath38-th _ harmonic number_. it is known that @xmath127 where @xmath128 is euler s constant .",
    "the following five lemmas can be found in janson @xcite .",
    "( the expectation of @xmath120 , but not the variance , can also be found in davis and prieditis @xcite ) .",
    "the lemmas in @xcite are stated for undirected graphs , but it is easy to check that they also hold for directed graphs .",
    "[ l - dk ] let @xmath129 and @xmath124 .",
    "then , @xmath130 where @xmath131 are i.i.d .",
    "exponential variables with mean  @xmath22 .",
    "[ l - dab ] let @xmath132 .",
    "then , @xmath133 where @xmath134 are i.i.d .",
    "exponential variables with mean  @xmath22 , and @xmath135 is chosen uniformly at random from @xmath136 .",
    "[ l - d ] let @xmath132 .",
    "then , @xmath137\\;=\\;\\frac{h_{n-1}}{n-1}\\;=\\ ; \\frac{\\ln n}{n } + o(\\frac{1}{n})\\quad,\\quad \\]][d(u , v)]=(1+o(1)),var[d(a , b)]= + o().@xmath138    [ l - max ] for any constant @xmath139 , we have @xmath140 = o(n^{3-c}\\log^2 n).$ ]    [ l - edge ] let @xmath132 . then , the probability that the edge @xmath141 is a shortest path is @xmath142 .",
    "the next two lemmas are new and might be interesting in their own right .",
    "they are used in section  [ s - high ] to show that the running time of algorithm  is @xmath2 with high probability . the proof that the expected running time of  is @xmath2 , given in section  [ s - lsp ] ,",
    "does not rely on them .",
    "[ l - tail ] let @xmath132 . if @xmath143 , then @xmath144 \\le 5n^{-\\alpha}$ ] .",
    "let @xmath145 .",
    "( we allow @xmath146 to be non - integral , in which case , we have @xmath147 . ) by lemma  [ l - dab ] we get that @xmath148 , where @xmath135 is uniformly distributed in @xmath136 .",
    "let @xmath149 .",
    "we clearly have @xmath150 \\;=\\ ; { \\mathbb{p}}[l > n - m ] \\;\\le\\ ; m / n \\;=\\ ; n^{-\\alpha}.\\eqno{(1)}\\ ] ] we now decompose @xmath151 now @xmath152 \\;\\le\\ ; { \\mathbb{p}}[x_1>\\alpha\\ln n ] \\;=\\ ; n^{-\\alpha}.\\eqno{(3)}\\ ] ] let @xmath153 .",
    "using our assumption that @xmath154 we get that @xmath155 now @xmath156=(1-\\lambda)^{-1}$ ] , for @xmath157 , so @xmath158 \\;=\\ ; { \\mathbb{e}}\\left[{{\\rm e}}^{\\sum_{i=2}^m x_i / i}\\right ] \\;=\\ ; \\prod_{i=2}^m { \\mathbb{e}}\\left[{{\\rm e}}^{x_i / i}\\right ] \\;=\\ ; \\prod_{i=2}^{m } \\left(1-\\frac{1}{i}\\right)^{-1 } \\;=\\ ; \\prod_{i=2}^m \\frac{i}{i-1 } \\;=\\ ; m.\\ ] ] therefore , @xmath159 \\;\\le\\ ; { \\mathbb{p}}[y\\ge \\ln n ] \\;=\\ ; { \\mathbb{p}}[{{\\rm e}}^y\\ge n ] \\;\\le\\ ; \\frac{{\\mathbb{e}}[{{\\rm e}}^y]}{n } \\;=\\ ; \\frac{m}{n } \\;=\\ ; n^{-\\alpha}. \\eqno{(4)}\\ ] ] let @xmath160",
    ". clearly , @xmath161 .",
    "we again have @xmath162 \\;=\\ ; \\prod_{i = m}^{n/2 } ( 1-\\frac{1}{i})^{-1 } \\;\\le\\ ; \\frac{n}{m } \\;=\\ ; n^\\alpha.\\ ] ] therefore , @xmath163 \\;\\le\\ ; { \\mathbb{p}}[z>2\\alpha\\ln n ] \\;=\\ ; { \\mathbb{p } } [ { { \\rm e}}^z\\ge n^{2\\alpha } ] \\;\\le\\ ; \\frac{{\\mathbb{e}}[{{\\rm e}}^z]}{n^{2\\alpha } } \\;=\\ ;   n^{-\\alpha}. \\eqno{(5)}\\ ] ] as @xmath164 and @xmath165 have exactly the same distribution , we also get that @xmath166 \\le n^{-\\alpha } \\eqno{(6)}\\ ] ] using ( 1)-(6 ) together , we get that @xmath167 \\le 5n^{-\\alpha}$ ] , we required .    no attempt to optimize the constants appearing the statement of lemma  [ l - tail ] .",
    "the condition @xmath154 in the lemma is satisfied for any fixed @xmath168 , when @xmath0 is large enough .",
    "it also holds when , say , @xmath169 .",
    "the proof of our next lemma relies on the following large deviation theorem of maurer @xcite .",
    "[ t - maurer ] let @xmath170 be non - negative independent random variables with finite first and second moments and let @xmath171 .",
    "let @xmath172 .",
    "then @xmath173-s\\ge t\\biggr ] \\le \\exp\\left(-\\frac{t^2 } { 2\\sum_{i=1}^n { \\mathbb{e}}[y_i^2 ] } \\right).\\ ] ]    for a vertex @xmath129 and @xmath174 , let @xmath175 be the _ ball _ of radius  @xmath176 centered at  @xmath121 .",
    "we next bound the probability that @xmath177 is exceptionally large .",
    "[ l - alpha ] for any @xmath129 , @xmath178 and @xmath179 we have @xmath180 \\;\\le\\ ; \\exp\\left(-\\frac{\\ln^2 c}{60 } \\right).\\ ] ]    note that @xmath181 if and only if @xmath182 . by lemma  [ l - dk ]",
    "we have @xmath183 , where @xmath131 are i.i.d .",
    "exponential variables with mean  @xmath22 .",
    "thus , @xmath184 \\;=\\ ; \\sum_{i=1}^{k}\\frac{1}{i(n - i ) } \\;>\\ ; \\frac{1}{n}\\sum_{i=1}^{k}\\frac{1}{i } > \\frac{\\ln k}{n}.\\ ] ] as @xmath185=2 $ ] , we have @xmath186 = \\sum_{i=1}^{k}\\frac{2}{i^2(n - i)^2}\\le \\sum_{i=1}^{n-1}\\frac{2}{i^2(n - i)^2 } \\le 2\\sum_{i=1}^{n/2}\\frac{2}{i^2(n - i)^2}\\le \\frac{16}{n^2}\\sum_{i=1}^{n/2}\\frac{1}{i^2}\\le \\frac{16}{n^2}\\frac{\\pi^2}{6}\\le \\frac{30}{n^2}.\\ ] ] with @xmath187 we get that @xmath188>\\frac{\\alpha\\ln n}{n}+\\frac{\\ln c}{n}$ ] and by theorem  [ t - maurer ] , with @xmath189 , we have @xmath190 \\;\\le\\ ; { \\mathbb{p}}\\left [ { \\mathbb{e}}[d_k ] - d_k\\ge \\frac{\\ln c}{n } \\right ] \\;\\le\\ ; \\exp\\left(- \\frac{\\left(\\frac{\\ln c}{n}\\right)^2}{\\frac{60}{n^2 } } \\right ) \\;=\\ ; \\exp\\left ( -\\frac{\\ln^2 c}{60 } \\right).\\ ] ]    as an immediate corollary , we get :    [ c - alpha ] for any @xmath129 , @xmath178 , @xmath31 and @xmath179 we have @xmath191 \\;=\\ ; o(n^{-c})\\;.\\ ] ]    the results of this section were derived under the assumption that the edge weights are exponential . however , as explained in detail in the beginning of section  2 of janson @xcite , the same results hold asymptotically also for the uniform distribution . for the sake of completeness",
    "we show how to deduce from lemma [ l - tail ] and corollary [ c - alpha ] similar claims for uniform distributions .",
    "let @xmath46 be a complete directed graph on @xmath0 vertices with independent uniformly distributed edge weights @xmath116 and let @xmath120 be the distance from @xmath121 to @xmath122 in this graph .",
    "define @xmath192 and let @xmath193 be a complete directed graph whose edge weights are @xmath194 .",
    "denote by @xmath195 the distance from  @xmath121 to  @xmath122 in @xmath193 .",
    "note that all the edges of @xmath193 have weights distributed as independent exponential random variables with mean @xmath22 and that the correspondence between @xmath46 and @xmath193 is a measure preserving transformation .",
    "it is easy to check that @xmath196 for all @xmath197 .",
    "suppose that @xmath46 has the property that @xmath198 .",
    "since @xmath199 , each such @xmath46 corresponds to a graph @xmath193 which also has @xmath200 .",
    "therefore by lemma [ l - tail ] the probability of this event is at most @xmath201 .",
    "suppose that @xmath122 is a vertex of @xmath46 satisfying @xmath202 .",
    "then , by the above inequality , we have that @xmath203 with @xmath204 . for any @xmath31 , let @xmath205 .",
    "then it is easy to check that @xmath206 .",
    "therefore all @xmath46 in which @xmath207 correspond to instances of @xmath193 in which @xmath208 . by corollary [ c - alpha ] the probability of this event is at most @xmath209 for any @xmath179 .",
    "let @xmath210 be the set of lsps in @xmath211 .",
    "our goal in this section is to show that @xmath212=o(n^2)$ ] .",
    "this would follow immediately from the following lemmas .",
    "[ l - abc ] let @xmath213 be three distinct vertices .",
    "the probability that @xmath214 is an lsp is @xmath215 .",
    "the path @xmath214 is an lsp if and only if both @xmath141 and @xmath216 are shortest paths . by lemma  [ l - edge ] , the probability that each one of the edges @xmath141 and @xmath216 is a shortest path is @xmath217 .",
    "unfortunately , the events `` @xmath141 is a shortest path '' and `` @xmath216 is a shortest path '' are _ not _ independent ( and probably positively correlated ) . to circumvent that ,",
    "let @xmath218 such that @xmath219 , @xmath220 , @xmath221 , @xmath222 and @xmath223 be a fixed partition of the vertex set @xmath224 .",
    "if @xmath141 and @xmath216 are shortest paths in  @xmath46 , then @xmath141 is clearly also a shortest path in @xmath225 $ ] , the subgraph of @xmath46 induced by  @xmath226 , and @xmath216 is also a shortest path in @xmath227 $ ] .",
    "these events are now independent , as the edge sets of @xmath225 $ ] and @xmath227 $ ] are disjoint . the probability that @xmath214 is an lsp is thus at most @xmath228 .",
    "[ l - abcd ] let @xmath229 be four distinct vertices .",
    "the probability that @xmath230 is an lsp is @xmath231 .",
    "if @xmath230 is an lsp , then by definition @xmath232    if @xmath230 is an lsp , then @xmath233 does not pass through @xmath121 or @xmath234 .",
    "( if , for example , @xmath233 passes through  @xmath121 , then @xmath235 is a subpath of @xmath233 , and @xmath236 is therefore not a shortest path , contradicting the assumption that @xmath230 is an lsp . )",
    "thus , @xmath237 , where @xmath238 is the distance from  @xmath122 to  @xmath239 when  @xmath121 and  @xmath234 are removed from the graph .",
    "we also clearly have @xmath240 and @xmath241 .",
    "thus , if @xmath230 is an lsp , then @xmath242 or equivalently @xmath243 it is thus sufficient to bound the probability that @xmath244 happens . for brevity ,",
    "let @xmath245 a crucial observation now is that @xmath246 and  @xmath247 do _ not _ depend on @xmath116 and @xmath248 .",
    "this follows from the fact that in each one of these distances one of  @xmath121 and  @xmath122 , and one of  @xmath239 and  @xmath234 , is removed from the graph .",
    "we can thus choose the random weights of the edges in two stages .",
    "first we choose the random weights of all edges _ except _ the two edges @xmath141 and @xmath249 .",
    "the values of @xmath246 and @xmath247 are then already determined .",
    "we then choose @xmath116 and @xmath248 , the random weights of the two remaining edges .",
    "as the choice of @xmath116 and @xmath248 is independent of all previous choices , and as @xmath116 and @xmath248 are independent and uniformly distributed in @xmath1 $ ] , we get that @xmath250 \\;=\\ ; e\\bigl[(y - x)^+\\cdot ( z - x)^+\\bigr ] \\;\\le\\ ; e\\bigl[|y - x||z - x|\\bigr],\\ ] ] where @xmath251 .",
    "( note that we are not assuming here that @xmath246 and @xmath247 are independent . they are in fact dependent . )    we next note that each of @xmath246 and @xmath247 is the distance between two given vertices in a randomly weighted complete graph on @xmath252 vertices .",
    "thus , @xmath253={\\mathbb{e}}[y]={\\mathbb{e}}[z]$ ] . by lemma  [ l - d ]",
    ", we have @xmath254={{\\rm var}}[y]={{\\rm var}}[z]\\;=\\;(1+o(1))\\frac{\\pi^2}{2n^2}.\\ ] ] now , @xmath250 \\;\\le\\ ; e\\bigl[|y - x||z - x|\\bigr ] \\;\\le\\ ; \\frac{1}{2}(e\\bigl[(y - x)^2\\bigr]+e\\bigl[(z - x)^2\\bigr]),\\ ] ] using the trivial inequality @xmath255 .",
    "all that remains , therefore , is to bound @xmath256 $ ] and @xmath257 $ ] .",
    "let @xmath258={\\mathbb{e}}[y]$ ] .",
    "then , @xmath259 & = & e\\bigl [ ( ( y-\\mu)-(x-\\mu))^2 \\bigr ] \\\\[3pt ]             & \\le & 2(e\\bigl[(y-\\mu)^2\\bigr]+e\\bigl[(x-\\mu)^2\\bigr])\\\\[3pt ]             & = & 2({{\\rm var}}[y]+{{\\rm var}}[x ] ) \\\\[3pt ]             & = & ( 1+o(1))\\frac{\\pi^2}{n^2 } , \\end{array}\\ ] ] using the inequality @xmath260 .",
    "exactly the same bound applies to @xmath261 $ ] . putting everything together",
    ", we get that @xmath262\\le ( 1+o(1))\\frac{\\pi^2}{n^2}$ ] .",
    "[ t - lsp ] @xmath212=\\theta(n^2)$ ]    the number of lsps of length  @xmath22 is exactly @xmath119 .",
    "( every edge is an lsp of length  @xmath22 . ) by lemma  [ l - abc ] , the expected number of lsps of length  @xmath263 is @xmath264 . by lemma  [ l - abcd ] ,",
    "the expected number of lsps of length greater than two is @xmath265 .",
    "experiments that we have done seem to suggest that @xmath212 $ ] is very close to @xmath266 .",
    "the results of this section were stated and proved for directed graphs .",
    "it is easy to check , however , that our methods can be also used to provide an all pairs shortest paths algorithm with a quadratic running time for the complete _ undirected _ graphs on  @xmath0 vertices with uniform edge weights .",
    "our goal in this section is to show that the number of lsps is @xmath2 asymptotically almost surely ( a.a.s ) , i.e. , that there exists a constant  @xmath239 such that @xmath267\\to 1 $ ] , as @xmath268 .",
    "let @xmath269 be the set of edges that are shortest paths .",
    "let @xmath270 be the maximum outdegree in the subgraph @xmath271 .",
    "( mcgeoch @xcite refers to @xmath271 as the _ essential _ subgraph . )",
    "we first show that @xmath272 , with very high probability .",
    "[ l - delta ] for every @xmath273 , we have @xmath274=o(n^{1-c/6})$ ] .",
    "let @xmath275 be the subgraph of  @xmath46 composed of all edges of weight at most @xmath276 , and let  @xmath277 be the maximum outdegree in  @xmath193 .",
    "the outdegree of each vertex in  @xmath193 is binomially distributed with parameters  @xmath0 and @xmath276 .",
    "a special case of chernoff bound ( see , e.g. , @xcite , p.  64 ) states that if @xmath278 is a binomial variable with @xmath258 $ ] , then @xmath279\\le { \\rm e}^{-\\mu/3}$ ] .",
    "thus , the probability that the degree of a given vertex exceeds @xmath280 is at most @xmath281 .",
    "thus @xmath282\\le n^{1-c/6}$ ] .",
    "now , @xmath283 only if at least one distance in  @xmath46 is greater than @xmath276 . by lemma  [ l - max ] , the probability that this happens is at most @xmath284",
    ". for @xmath273 we have @xmath285 .",
    "the following lemma is trivial and can also be found in demetrescu and italiano @xcite .",
    "[ l - simple ] if all shortest paths are unique , then @xmath286",
    ".    every lsp is obtained by appending an edge which is itself a shortest path to some shortest path .",
    "the number of shortest path in a graph is at most @xmath287 ( assuming uniqueness ) and each one of these shortest path can be extended by at most  @xmath270 edges .",
    "note that lemmas  [ l - delta ] and  [ l - simple ] imply that the number of lsps is @xmath16 with high probability . to improve this bound to @xmath2",
    "we need to work harder .",
    "let @xmath288 be a ( small ) constant .",
    "we say that a shortest path @xmath66 is _ @xmath289-short _ if and only if its length is at most @xmath290 , and _",
    "@xmath289-long _ , otherwise .",
    "similarly , we say that an lsp  @xmath66 is _ @xmath289-short _ if both shortest paths  @xmath91 $ ] and  @xmath92 $ ] obtained by removing its first edge and last edge are short , and _",
    "@xmath289-long _ , otherwise .",
    "let @xmath291 , @xmath292 , @xmath293 , @xmath294 be the sets of @xmath289-short and @xmath289-long shortest and locally shortest paths .",
    "( note that these sets depend on the parameter  @xmath289 . )    clearly , @xmath295 .",
    "we estimate separately the number of @xmath289-long lsps and the number of @xmath289-short lsps .",
    "we begin by bounding the number of @xmath289-long shortest paths and locally shortest paths .",
    "[ l - long - sp ] for every @xmath288 , we have @xmath296=o(n^{2-\\beta/12})$ ] .    by lemma  [ l - tail ] , with @xmath297 , we get that for any @xmath132 we have @xmath298 \\;=\\ ; o(n^{-\\beta/12})\\;.\\ ] ] the lemma follows by the linearity of expectation .",
    "[ l - long - lsp ] for every @xmath288 , we have @xmath299=o(n^{2-\\beta/12}\\ln n)$ ] .    using the same argument used in the proof of lemma  [ l - simple ] , we get that @xmath300 . by lemma  [ l - delta ]",
    "we get @xmath301 \\;\\le\\ ; { \\mathbb{e } } [ \\delta |{\\mbox{$\\cal sp$}}^l| ] \\;\\le\\ ; c\\ln n \\cdot { \\mathbb{e } } [ |{\\mbox{$\\cal sp$}}^l| ] + n^{1-c/6 } n^3\\;.\\ ] ] letting @xmath302 and using lemma  [ l - long - sp ] we get that @xmath299=o(n^{2-\\beta/12}\\ln n)$ ] , as required .",
    "[ l - pr - lsp_l ] for every @xmath288 we have @xmath303=o(n^{-\\beta/12}\\ln n)$ ]",
    ".    follows from lemma  [ l - long - lsp ] using markov s inequality .",
    "we next show that @xmath304 with high probability .",
    "to do that we use the _ efron - stein inequality _",
    "( see , e.g. , boucheron _ et al .  _",
    "@xcite ) to bound @xmath305 $ ] .    [ t - efron ]",
    "let @xmath306 , where @xmath307 are independent random variables .",
    "for any @xmath308 , let @xmath309 be a random variable with the same distribution as @xmath310 but independent from @xmath307 , and let @xmath311 .",
    "then , @xmath312 \\;\\le\\ ; \\frac12",
    "\\sum_{i=1}^m e\\left [ \\bigl(z - z'_i\\bigr)^2\\right].\\ ] ]    in our case , we have @xmath313 , @xmath307 are the random edge weights , and @xmath314 . for every edge @xmath315 , we need to compute the second moment of the random variable @xmath316 , where @xmath317 and @xmath318 are the sets of @xmath289-short lsps when all edges other than  @xmath315 are assigned the _ same _ random edge weights , while @xmath315 is assigned two independent edge weights . due to symmetry",
    ", the second moment of @xmath316 does not depend on  @xmath315 . for brevity",
    ", we write @xmath319 and @xmath320 , instead of @xmath317 and @xmath318 , when the @xmath315 is clear from the context . we similarly define @xmath321 and @xmath322 to be the corresponding sets of @xmath289-short shortest paths .",
    "if @xmath323 and  @xmath324 are two sets , then @xmath325 , where @xmath326 is the _ symmetric difference _ of the two sets .",
    "we thus focus our attention on @xmath327 .",
    "we begin by looking at @xmath328 .",
    "let @xmath329 and @xmath330 be the set of @xmath289-short shortest paths that _ pass _ through  @xmath315 with the two choices of the weight of  @xmath315 .",
    "[ l - spe ] for every edge @xmath315 we have @xmath331 .",
    "let @xmath332 and @xmath333 be the two costs of  @xmath315 .",
    "suppose at first that @xmath334 .",
    "a @xmath289-short shortest path that stops being @xmath289-short shortest path when the cost of  @xmath315 is increased from  @xmath332 to  @xmath333 must pass through  @xmath315 .",
    "thus , @xmath335 and hence @xmath336 .",
    "the only paths in @xmath337 are paths that replace paths from @xmath338 .",
    "thus , we also have @xmath339 . under the assumption @xmath334 we thus get @xmath340 .",
    "if @xmath341 , we similarly get that @xmath342 . in both cases we have @xmath331",
    "we next estimate @xmath343 and @xmath344 . as they both have the same distribution , we omit the subscript .",
    "[ l - zero ] for every @xmath288 , we have @xmath345=o(\\frac{\\ln n}{n})$ ] .",
    "the set @xmath346 is non - empty only if @xmath315 is a shortest path between its endpoints , which by lemma  [ l - edge ] only happens with probability @xmath347 .",
    "our next goal is to show that @xmath348 , with high probability , for any @xmath349 .",
    "[ l - spp - e ] for every @xmath288 , and every @xmath349 , we have @xmath350 = o(n^{-c})$ ] , for every @xmath179 .",
    "let @xmath351 be a fixed edge .",
    "let @xmath352 be the set of pairs @xmath65 such that @xmath353 is a shortest path of length at most @xmath354 .",
    "clearly @xmath355 .",
    "for a fixed integer @xmath176 , and @xmath356 , let @xmath357 be the sets of vertices of distances at most @xmath358 to  @xmath121 and from  @xmath122 , respectively .",
    "note that @xmath359 , while @xmath360 , in the graph in which all edge directions are reversed .",
    "clearly @xmath361 by corollary  [ c - alpha ] , we have @xmath362 , for every  @xmath363 , with a probability of at least @xmath364 , for every @xmath179 .",
    "it thus follows that @xmath365 , again with this very high probability . letting  @xmath176 sufficiently large and  @xmath366 sufficiently small",
    ", we get the claim of the lemma .",
    "lemmas  [ l - zero ] and  [ l - spp - e ] allow us to bound @xmath367 $ ] .",
    "[ l - e - spp-2 ] for every @xmath288 , and every @xmath349 we have @xmath367=o(n^{2(1+\\beta')-1}\\ln n)$ ] .    for succinctness ,",
    "let @xmath368 and @xmath369 .",
    "we always have @xmath370 . using lemma  [ l - spp - e ] with @xmath371 , we have @xmath372 \\;\\le\\ ; { \\mathbb{p}}[0<x\\le a]\\cdot a^2 + { \\mathbb{p}}[x >",
    "a]\\cdot n^4 \\;=\\ ; o\\left(\\frac{\\ln n}{n}\\cdot n^{2(1+\\beta ' ) } + n^{-4}\\cdot n^4\\right ) \\;=\\ ; o\\left(n^{2(1+\\beta')-1}\\ln n\\right).\\ ] ]    we can finally get back to estimating @xmath327 .",
    "let @xmath373 and @xmath374 be the maximum outdegrees in the essential graph , i.e. , the subgraph composed of the edges that are shortest paths , under the two independent choices of the weight of  @xmath315 .",
    "let @xmath375 .",
    "by lemma  [ l - delta ] we have @xmath274=o(n^{1-c/6})$ ] , for every @xmath273 .",
    "[ l - oplus ] for every @xmath288 we have @xmath376 .",
    "suppose that @xmath377 .",
    "then either @xmath91\\in { \\mbox{$\\cal sp$}}^s_0\\smallsetminus { \\mbox{$\\cal sp$}}^s_1 $ ] or @xmath92\\in { \\mbox{$\\cal sp$}}^s_0\\smallsetminus { \\mbox{$\\cal sp$}}^s_1 $ ] .",
    "each shortest path in @xmath321 has at most @xmath373 pre - extensions and at most @xmath373 post - extensions that are locally shortest paths .",
    "thus , @xmath378 .",
    "similarly , @xmath379 , and the lemma follows .    for every @xmath288 , every @xmath349 , and every edge  @xmath315 we have @xmath380 = o\\left(n^{2(1+\\beta')-1}\\ln^3 n\\right).\\ ] ]    by lemmas  [ l - spe ] and  [ l - oplus ] we have @xmath381 @xmath382 since both @xmath383 , from lemma  [ l - delta ] with @xmath384 we have @xmath385 & \\leq & o\\left ( \\ln ^2 n\\cdot { \\mathbb{e}}[|{\\mbox{$\\cal sp$}}^s(e)|^2]+ { \\mathbb{p}}[\\delta>24\\ln n ] \\cdot n^4\\right)\\\\ & = & o\\left(\\ln ^2 n\\cdot { \\mathbb{e}}[|{\\mbox{$\\cal sp$}}^s(e)|^2]+n^{-3 } \\cdot n^4\\right).\\end{aligned}\\ ] ] the claim now follows from lemma  [ l - e - spp-2 ] .    using the efron - stein inequality ( theorem  [ t - efron ] ) we thus get :    [ l - var ] for every @xmath288 and every @xmath349 we have @xmath386 = o\\left(n^{2(1+\\beta')+1 } \\ln^3 n\\right)$ ] .",
    "[ t - hp ] there is a constant @xmath239 such that @xmath387=o(n^{-1/26})$ ] .",
    "let @xmath388 .",
    "by lemma  [ l - pr - lsp_l ] we get that @xmath389 \\;=\\ ; o(n^{-\\beta/12}\\ln n ) \\;=\\ ; o(n^{-1/25}\\ln n ) \\;.\\eqno{(7)}\\ ] ] let @xmath390 , where @xmath31 is tiny . by lemma  [ l - var ]",
    "we get that @xmath391 \\;=\\ ; o\\left(n^{2(1+\\beta')+1 } \\ln^3 n\\right ) \\;=\\ ; o(n^{99/25 + 2\\epsilon}\\ln^3 n ) \\;=\\ ; o(n^{99/25 + 3\\epsilon } ) .\\ ] ] by theorem  [ t - lsp ] we have @xmath212=\\theta(n^2)$ ] . by lemma  [ l - long - lsp ]",
    ", we have @xmath392 . as @xmath212 = { \\mathbb{e}}[|{\\mbox{$\\cal lsp$}}^s|]+{\\mathbb{e}}[|{\\mbox{$\\cal lsp$}}^l|]$ ]",
    ", we get that @xmath393=\\theta(n^2)$ ] .    by chebyshev s inequality ( see , e.g. , @xcite ) , for every random variable  @xmath278 we have @xmath394 \\;\\le\\ ; { \\mathbb{p}}[|x-{\\mathbb{e}}[x]|\\ge { \\mathbb{e}}[x]]\\;\\le\\ ; \\frac{{{\\rm var}}[x]}{{\\mathbb{e}}[x]^2}\\;.\\ ] ] for @xmath395 , and using the facts that @xmath396=\\theta(n^2)$ ] and @xmath305=o(n^{99/25 + 3\\epsilon})$ ] , we thus get @xmath397\\right ] \\;\\le\\ ; \\frac{{{\\rm var}}\\left[|{\\mbox{$\\cal lsp$}}^s|\\right]}{{\\mathbb{e}}\\left[|{\\mbox{$\\cal lsp$}}^s|\\right]^2 } \\;=\\ ; o(n^{-1/25 + 3\\epsilon})\\;. \\eqno{(8)}\\ ] ] as @xmath398 , combining ( 7 ) and ( 8) and choosing @xmath366 small enough , we get the claim of the theorem .",
    "we believe that for every @xmath399 there exists  @xmath239 such that @xmath400=o(n^{-a})$ ] .",
    "proving , or disproving , this claim would require new techniques .",
    "in this section we describe an implementation of the algorithm of section  [ ss - static ] ( and appendix  [ s - static ] ) that runs in @xmath2 time in expectation and with high probability .",
    "this is done using a simple observation of dinic @xcite and a simple bucket - based priority queue implementation that goes back to dial @xcite .",
    "let @xmath401 be the minimal edge weight in the graph .",
    "we claim that algorithm  of section  [ ss - static ] remains correct if instead of requiring that the pair @xmath65 extracted from the heap  @xmath64 is a pair with minimal @xmath402 , we only require that @xmath403 for every other pair @xmath102 in  @xmath64 .",
    "the proof is a simple modification of the proof of theorem  [ t - apsp-2 ] given in appendix  [ s - static ] .",
    "this observation , in the context of dijkstra s algorithm , dates back to dinic @xcite . along with many more ideas ,",
    "this observation forms the basis for the linear _ worst - case _ time single - source shortest paths algorithm for undirected graphs obtained by thorup @xcite .",
    "it is also used by hagerup @xcite to obtain a simple linear _ expected _ time algorithm for single source shortest paths , simplifying results of meyer @xcite and goldberg @xcite .    in our setting ,",
    "edge weights are drawn independently and uniformly at random from @xmath1 $ ] .",
    "the probability that the minimal edge weight is smaller than @xmath404 is clearly at most @xmath405 .",
    "if this unlikely event happens , we simply use an @xmath16 time implementation based on fibonacci heaps",
    ". this only contributes @xmath406 to the expected running time of the algorithm .",
    "we assume now that @xmath407 .",
    "for every @xmath60 , we let @xmath408 and use @xmath409 , instead of @xmath402 , as the key of @xmath65 in  @xmath64 .",
    "we implement the heap  @xmath64 as follows .",
    "( there are many possible variants .",
    "we describe the one that seems to be the most natural . )",
    "we use @xmath410 buckets @xmath411 .",
    "bucket @xmath412 , for @xmath413 , is a linked list holding pairs @xmath65 for which @xmath414 .",
    "bucket @xmath415 is a special _ leftover _ bucket that holds all pairs @xmath65 for which @xmath416 .",
    "it is again implemented as a linked list .",
    "we also maintain the index  @xmath38 of the bucket from which the last minimal pair was extracted .",
    "the implementation of a  operation is trivial . to insert a pair @xmath65 into  @xmath64 , we simply add @xmath65 to @xmath412 , where @xmath417 .",
    "a  operation is also simple .",
    "we simply remove @xmath65 from its current bucket and move it to the appropriate bucket .",
    "( each pair has a pointer to its position in its current bucket , so these operations take constant time . )",
    "an  operation is implemented as follows .",
    "we sequentially scan the buckets , starting from  @xmath418 , until we find the first non - empty bucket . if the index of this bucket is less than  @xmath135 , we return an arbitrary element from this bucket and update  @xmath38 if necessary",
    ". if the first non - empty bucket is @xmath415 , the leftover bucket , we insert all the elements currently in @xmath415 into a comparison - based heap and use it to process all subsequent heap operations .",
    "( we show below that in our setting , we would very rarely encounter this case . )",
    "this implementation of the  operation is correct as the priority queue that we need to maintain is _ monotone _ , in the sense that the minimal key contained in the priority queue never decreases .",
    "this follows immediately from then fact that keys of new pairs inserted into  @xmath64 , or decreased keys of existing pairs in  @xmath64 are always larger than the key of the last extracted pair .",
    "the total time spent on implementing all heap operations , until all buckets @xmath419 are empty , is clearly @xmath420 , where @xmath421 is the number of heap operations performed . by theorem  [ t - apsp-2 ]",
    "we have @xmath422 . by theorem  [ t - lsp ] we have @xmath212=o(n^2)$ ] . by theorem  [ t - hp ]",
    ", there is constant  @xmath239 such that @xmath387 = o(n^{-1/60})$ ] . as @xmath410 ,",
    "the number of operations here is @xmath2 , both in expectation and with high probability .",
    "all that remains , therefore , is to show that the probability that @xmath415 will be the only non - empty bucket is tiny .",
    "note that this happens if and only if there is a pair @xmath60 for which @xmath423 . by lemma  [ l - max ] , this probability is @xmath209 for every @xmath179 . if this extremely unlikely event happens , the running time is only increased to @xmath16 , which has a negligible effect on the expected running time of the whole algorithm .",
    "we have thus obtained :    the expected running time of algorithm , when implemented using a bucket - based priority queue , and when run on a complete directed graph with edge weights selected uniformly at random from @xmath1 $ ] is @xmath2 .",
    "furthermore , there is a constant @xmath179 such that the probability that the running time of the algorithm exceeds @xmath424 is @xmath425 .",
    "in this section we consider the expected time needed to update all shortest paths following a _ random edge update _ ,",
    "i.e. , an update operation that chooses a random edge  @xmath315 of the complete directed graph , uniformly at random , and assigns it a new random weight , independent of all previous weights chosen , drawn uniformly at random from @xmath1 $ ] .    recall that @xmath103 and @xmath104 are the sets of shortest and locally shortest paths destroyed by an update operation , and that @xmath105 and @xmath106 are the sets of shortest and locally shortest paths that are created ( or recreated ) by an update operation .",
    "more specifically , we have @xmath426 where , as in section  [ s - high ] , @xmath427 and @xmath428 are the sets of shortest paths before and after the update of  @xmath315 , and @xmath429 and @xmath430 are the sets of shortest paths , before and after the update , that pass through  @xmath315 . the sets @xmath431 , @xmath432 , @xmath433 and @xmath434 , are the corresponding sets of locally shortest paths .",
    "our main goal is to bound the expected sizes of the sets @xmath103 , @xmath105 , @xmath104 and @xmath106 .",
    "this , in conjunction with theorem  [ t - dynamic ] , would supply an upper bound on the expected update time . by symmetry ,",
    "it is easy to see that @xmath435={\\mathbb{e}}[|{\\mbox{$\\cal sp$}}^+|]$ ] and @xmath436={\\mathbb{e}}[|{\\mbox{$\\cal lsp$}}^+|]$ ] .",
    "we can thus concentrate on estimating @xmath435 $ ] and @xmath436 $ ] .",
    "let @xmath315 be the random edge updated by a random edge update operation .",
    "for every @xmath60 , let  @xmath437 $ ] and  @xmath438 $ ] be the shortest path from  @xmath50 to  @xmath14 before and after the update .",
    "let @xmath439\\}$ ] , for @xmath440 , be the set of pairs of vertices connected , before and after the update , by a shortest path passing through  @xmath315 .",
    "( note that @xmath441 , for @xmath440 . )",
    "it is easy to see that @xmath437\\in { \\mbox{$\\cal sp$}}^-$ ] if and only if @xmath442 $ ] or @xmath443 $ ] .",
    "thus , @xmath444 \\mid ( u , v)\\in b_0\\cup b_1\\}$ ] and similarly @xmath445 \\mid ( u , v)\\in b_0\\cup b_1\\}$ ] . in particular @xmath446 .",
    "more importantly , @xmath447 to bound @xmath435={\\mathbb{e}}[|{\\mbox{$\\cal sp$}}^+|]$ ] it is thus enough to bound @xmath448={\\mathbb{e}}[|{\\mbox{$\\cal sp$}}_1(e)|]$ ] .",
    "[ l - length ] the expected number of edges on a shortest path between two random vertices is @xmath449 .",
    "when edge weights are exponential , the expected number of edges on a shortest path between two random vertices is exactly equal to the average depth of a vertex in a random recursive tree of size  @xmath0 .",
    "( see , e.g. , janson @xcite . )",
    "it is known that this average depth is @xmath449 ( moon @xcite ) .",
    "the same asymptotic result holds also under the uniform distribution .",
    "( see section  2 of janson @xcite . )",
    "the expected number of shortest paths that pass through a random edge @xmath315 is @xmath449 .    for every @xmath60 ,",
    "let @xmath94 $ ] be the shortest path from  @xmath50 to  @xmath14 , and let @xmath450|$ ] be the number of edges on it .",
    "for every edge @xmath315 of the complete graph , let @xmath451 be the set of shortest paths that pass through  @xmath315 .",
    "by symmetry we have @xmath452 = e\\biggl[\\frac{1}{n(n-1)}\\sum_{e ' } |{\\mbox{$\\cal sp$}}(e')|\\biggr ] = e\\biggl[\\frac{1}{n(n-1)}\\sum_{u\\ne v } |\\pi[u , v]|\\biggr]={\\mathbb{e}}[|\\pi[u , v]|].\\ ] ] by lemma  [ l - length ] , we get that @xmath453 = ( 1+o(1))\\ln n$ ] .    following a random edge update",
    ", we have @xmath435={\\mathbb{e}}[|{\\mbox{$\\cal sp$}}^+|]\\le ( 2+o(1))\\ln n$ ] .",
    "let @xmath270 be the maximal degree of the essential graph @xmath271 defined in the previous section .",
    "lemma  [ l - delta ] says that with high probability @xmath272 .",
    "[ t - elsp ] following a random edge update we have @xmath436={\\mathbb{e}}[|{\\mbox{$\\cal lsp$}}^+|]=o(\\log^2 n)$ ]",
    ".    clearly @xmath454 if and only if @xmath91\\in { \\mbox{$\\cal sp$}}^-$ ] or @xmath92\\in { \\mbox{$\\cal sp$}}^-$ ] .",
    "each shortest path has at most @xmath455 lsp extensions .",
    "thus @xmath456 . by lemma  [ l - delta ] , we have @xmath457=o(n^{-3})$ ] . as @xmath88 is always at most  @xmath458",
    ", we get @xmath436\\le 48\\ln n\\cdot { \\mathbb{e}}[|{\\mbox{$\\cal sp$}}^-|]+ n^{-3}\\cdot n^3 = o(\\log^2 n)$ ] .",
    "we believe that the @xmath44 bound in theorem  [ t - elsp ] can be improved , possibly to @xmath15 , and leave it as an open problem .",
    "the expected running time of a random edge update , when a fibonacci heap is used to implement the global heap , and simple linked lists are used to implement the local heaps , is @xmath44 .",
    "we presented an algorithm that solves the apsp problem on complete directed graphs with random edges weights in @xmath2 time with high probability .",
    "the expected running time of the algorithm is also @xmath2 .",
    "this solves an open problem of frieze and mcdiarmid @xcite .",
    "we also presented a dynamic algorithm that performs random edge updates in @xmath44 expected time .",
    "it is an interesting open problem whether this can be improved to @xmath15 .",
    "our results also hold in the directed @xmath28 model in which each edge is selected with probability  @xmath29 , where @xmath43 .",
    "selected edges are again assigned independent , uniformly distributed , weights .",
    "similarly , it is easy to see that our results apply when edge weights are _ integers _ chosen uniformly at random from , say , @xmath459 , where @xmath0 is the number of vertices .",
    "the last author would like to thank camil demetrescu , giuseppe italiano and mikkel thorup for many illuminating discussions .",
    "10    l.  addario - berry , n.  broutin , and g.  lugosi .",
    "the longest minimum - weight path in a complete graph . , 19(1):119 , 2010 .",
    "bloniarz . a shortest - path algorithm with expected time @xmath460 . , 12(3):588600 , 1983 .",
    "s.  boucheron , g.  lugosi , and o.  bousquet .",
    "concentration inequalities . in _",
    "advanced lectures on machine learning _ , pages 208240 , 2003 .    c.  cooper ,",
    "a.  frieze , k.  mehlhorn , and v.  priebe .",
    "average - case complexity of shortest - paths problems in the vertex - potential model .",
    ", 16(1):3346 , 2000 .",
    "r.  davis and a.  prieditis .",
    "the expected length of a shortest path .",
    ", 46(3):135141 , 1993 .    c.  demetrescu , p.  faruolo , g.f .",
    "italiano , and m.  thorup .",
    "does path cleaning help in dynamic all - pairs shortest paths ? in _ proc .  of 14th esa _ , pages 732743 , 2006",
    ".    c.  demetrescu and g.f",
    ". italiano . a new approach to dynamic all pairs shortest paths .",
    ", 51(6):968992 , 2004 .    c.  demetrescu and g.f .",
    "experimental analysis of dynamic all pairs shortest path algorithms .",
    ", 2(4):578601 , 2006 .",
    "l.  devroye . branching processes in the analysis of the heights of trees . , 24(3):277298 , 1987 .",
    "r.b . dial .",
    "algorithm 360 : shortest - path forest with topological ordering .",
    ", 12(11):632633 , 1969 .",
    "dijkstra . a note on two problems in connexion with graphs .",
    ", 1:269271 , 1959 .    e.a .",
    "economical algorithms for finding shortest paths in a network . in y.",
    "popkov and b.  shmulyian , editors , _ transportation modeling systems _ , pages 36?44 .",
    "institute for system studies , moscow , cis , 1978 .",
    "fredman and r.e .",
    "fibonacci heaps and their uses in improved network optimization algorithms . , 34(3):596615 , 1987 .",
    "t.  friedrich and n.  hebbinghaus .",
    "average update times for fully - dynamic all - pairs shortest paths . in _ proc .  of 19th",
    "isaac _ , pages 692703 , 2008 .",
    "a.  frieze and c.  mcdiarmid .",
    "algorithmic theory of random graphs .",
    ", 10(1 - 2):542 , 1997 .",
    "a.m. frieze and g.r .",
    "the shortest - path problem for graphs with random arc - lengths .",
    ", 10:5777 , 1985 .",
    "goldberg . a practical shortest path algorithm with linear expected time .",
    ", 37(5):16371655 , 2008 .",
    "t.  hagerup .",
    "simpler computation of single - source shortest paths in linear average time .",
    ", 39(1):113120 , 2006 .",
    "r.  hassin and e.  zemel . on shortest paths in graphs with random weights .",
    ", 10(4):557564 , 1985 .",
    "s.  janson .",
    "one , two and three times @xmath461 for paths in a complete graph with random weights .",
    ", 8(4):347361 , 1999 .",
    "karger , d.  koller , and s.j .",
    "phillips . finding the hidden path : time bounds for all - pairs shortest paths .",
    ", 22:11991217 , 1993 .",
    "a.  maurer .",
    "a bound on the deviation probability for sums of non - negative random variables .",
    ", 4(1):article 15 , 6 pp .",
    "( electronic ) , 2003 .",
    "all - pairs shortest paths and the essential subgraph . , 13:426441 , 1995 .",
    "k.  mehlhorn and v.  priebe . on the all - pairs shortest - path algorithm of moffat and takaoka . , 10(1 - 2):205220 , 1997 .",
    "u.  meyer .",
    "average - case complexity of single - source shortest - paths algorithms : lower and upper bounds .",
    ", 48(1):91134 , 2003 .",
    "m.  mitzenmacher and e.  upfal . .",
    "cambridge university press , 2005 .",
    "a.  moffat and t.  takaoka .",
    "an all pairs shortest path algorithm with expected time @xmath462 .",
    "16(6):10231031 , 1987 .    j.  w. moon .",
    "the distance between nodes in recursive trees . in",
    "_ combinatorics ( proc .",
    "british combinatorial conf .",
    "wales , aberystwyth , 1973 ) _ , pages 125132 .",
    "london math .",
    "lecture note ser .",
    "cambridge univ .",
    "press , london , 1974 .",
    "s.  pettie .",
    "a new approach to all - pairs shortest paths on real - weighted graphs .",
    ", 312(1):4774 , 2004 .",
    "smythe and h.m .",
    "a survey of recursive trees .",
    ", ( 51):129 , 1995 .    p.m. spira . a new algorithm for finding all shortest paths in a graph of positive arcs in average time @xmath463 . , 2(1):2832 , 1973 .",
    "m.  thorup .",
    "undirected single - source shortest paths with positive integer weights in linear time .",
    ", 46:362394 , 1999 .",
    "m.  thorup .",
    "fully - dynamic all - pairs shortest paths : faster and allowing negative cycles . in _ proc .  of 9th swat _ , pages 384396 , 2004 .",
    "m.  thorup .",
    "worst - case update times for fully - dynamic all - pairs shortest paths . in _ proc .  of 37th stoc _ , pages 112119 , 2005 .",
    "@headings oddhead evenheadoddhead oddfootevenfootoddfoot",
    "in this section we give a full description , and a correctness proof , of the static version of the demetrescu and italiano @xcite used in this paper .",
    "pseudo - code of the algorithm , called , is given in figure  [ f - apsp ] .",
    "the input to the algorithm is a weighted directed graph @xmath4 , where @xmath45 assigns positive weights ( or costs ) to the edges of the graph .",
    "the algorithm in figure  [ f - apsp ] works correctly only under the assumption that all shortest paths are _",
    "unique_. under essentially all probabilistic models considered in this paper , this assumption holds with probability  @xmath22 .",
    "algorithm  is also interesting , however , in non - probabilistic settings . for a simple way of dispensing with the uniqueness assumption , without increasing the running time of the algorithm by more than a constant factor , see demetrescu and italiano @xcite .",
    "we next prove theorem  [ t - apsp-2 ] of section  [ s - di ] , which we repeat for the convenience of the reader .",
    "if all edge weights are positive and all shortest paths are unique , then algorithm  correctly finds all the shortest paths in the graph .",
    "algorithm  runs in @xmath87 time , where @xmath88 is the number of lsps in the graph , and uses only @xmath2 space .",
    "it is easy to check that each stage during the operation of the algorithm , @xmath61 $ ] corresponds to some path from  @xmath50 to  @xmath14 in the graph and that this path , or an even shorter path , can be traced using the  @xmath29 and  @xmath464 fields .",
    "thus , the distances returned by the algorithm can never be too small .",
    "it is also easy to check that the keys of the pairs @xmath65 extracted from  @xmath64 form a non - decreasing sequence and that a pair @xmath65 removed from  @xmath64 is never inserted to  @xmath64 again .",
    "thus , the algorithm always terminates .",
    "assume , for the sake of contradiction , that the algorithm fails to find a shortest path @xmath49 , for some @xmath60 .",
    "let @xmath49 be a shortest shortest - path not found by the algorithm .",
    "( in other words , if @xmath59 is shorter than @xmath49 , then @xmath59 is found by the algorithm . )",
    "if @xmath49 is simply the edge @xmath47 , then we immediately get a contradiction , as the algorithm starts by setting @xmath61 $ ] to @xmath62 ( and @xmath74 $ ] to @xmath14 , and @xmath465 $ ] to  @xmath50 ) , for every @xmath48 .",
    "thus , the algorithm does find the shortest path @xmath466 , a contradiction .",
    "assume , therefore , that @xmath467 is composed of at least two edges .",
    "( if it is composed of exactly two edges , then @xmath58 . )",
    "clearly @xmath56 and @xmath57 are also shortest paths and their length is strictly smaller than the length of @xmath49 , as @xmath468 .",
    "thus , by the our assumptions , @xmath56 and @xmath57 are discovered by the algorithm . when the second of these is discovered , the algorithm examines the path @xmath467 and sets @xmath61 $ ] to its length .",
    "also @xmath65 is added to  @xmath64 if it is not already there .",
    "as there is no shorter path from @xmath50 to  @xmath14 in the graph , the values of @xmath61 $ ] , @xmath74 $ ] and @xmath465 $ ] would never be changed again , contradicting the assumption that the algorithm does not find the shortest path from  @xmath50 to  @xmath14 .",
    "we next analyze the running time of algorithm . each pair @xmath65 is inserted and extracted from the priority queue  @xmath64 at most once .",
    "the total cost of these operations is @xmath469 .",
    "all paths considered by the algorithm are lsps .",
    "the algorithm examines each lsp exactly once . for each lsp",
    "it performs a constant number of operations followed perhaps by a  operation .",
    "the total cost of all these operations is @xmath470 .",
    "the complexity of all other operations is negligible .    finally , to see that the algorithm uses only @xmath2 space , note that the removal of a pair @xmath65 from the heap  @xmath64 causes the insertion of only two elements to lists @xmath471 $ ] and",
    "@xmath472 $ ] . as each pair",
    "@xmath65 is extracted at most once , the total size of all these lists is @xmath2 .",
    "as explained , one of the main differences between the static and dynamic algorithms is that the dynamic algorithm explicitly maintains all lsps in a _ path system _ , and does not just examine them .",
    "paths are created by the three constructors @xmath473 , @xmath474 and @xmath475 given in figure  [ f - path ] .",
    "@xmath473 generates a path of length @xmath476 containing the vertex  @xmath14 .",
    "@xmath474 generates a path composed of the edge  @xmath315 .",
    "@xmath475 takes two paths  @xmath477 and  @xmath478 such that @xmath479=l[\\pi_2]$ ] and constructs a path  @xmath66 such that @xmath91=\\pi_1 $ ] and @xmath92=\\pi_2 $ ] .",
    "the new path  @xmath66 is composed of the first edge of  @xmath477 followed by  @xmath478 , or equivalently , by @xmath477 followed by the last edge of  @xmath478 .                              the lists @xmath95 $ ] and @xmath96 $ ] are similar to the lists @xmath75 $ ] and @xmath76 $ ] used by the static algorithm .",
    "this time , however , they contain actual paths and not vertices .",
    "the lists @xmath97 $ ] and @xmath98 $ ] contain all lsps , already constructed , obtained by extending @xmath66 by one edge at its beginning or end , respectively .    the initialization function of the dynamic version , called - , is given in figure  [ f - update ] .",
    "it is similar to the static  algorithm .",
    "it too uses a global heap  @xmath64 that stores pairs of vertices for which shortest paths are sought . for every @xmath492 , we let @xmath493 $ ] be the empty path consisting of  @xmath14 . for every edge @xmath494 , we let  @xmath495 $ ] denote the path consisting of  @xmath315 . for every two vertices @xmath60 ,",
    "the dynamic algorithm maintains the following information :            the initialization function -  starts with some obvious initializations .",
    "( for every @xmath60 , it sets  @xmath94 $ ] to @xmath499 , sets @xmath61 $ ] to @xmath63 , sets @xmath93 $ ] to an empty heap , etc . ) for every @xmath494 it then creates the path @xmath495 $ ] , by calling @xmath474 , and then _ examines _ it by calling @xmath500)$ ] , given in figure  [ f - examine ] .",
    "the function @xmath501 receives a newly created lsp connecting two vertices  @xmath502 $ ] and  @xmath503 $ ] .",
    "it starts by inserting it into the heap @xmath93 $ ] with key @xmath504 $ ] .",
    "it then checks whether @xmath66 is the first available lsp from  @xmath50 to  @xmath14 , or whether it is shorter than all existing lsps between @xmath50 and  @xmath14 .",
    "if @xmath66 is shorter than  @xmath94 $ ] , the shortest available path from  @xmath50 to  @xmath14 , then @xmath94 $ ] is clearly not a shortest path .",
    "the algorithm thus sets @xmath505 $ ] to @xmath506 .",
    "it then removes all extensions of  @xmath94 $ ] from the system , if there are any .",
    "this is done by a call to @xmath507,{{\\tt false}})$ ] which we discuss later . finally , if @xmath66 is currently the shortest available path from  @xmath50 to  @xmath14 ,  updates @xmath94 $ ] and @xmath61 $ ] accordingly .",
    "it also inserts @xmath65 into the global heap , if it is not already there , or decreases its key to @xmath504 $ ] .",
    "( we assume that @xmath508 does exactly that , i.e. , inserts an item into a heap with a given key , or decreases its key , if the item is already in the heap . )",
    "-  then calls  which is also given in figure  [ f - update ] .",
    "repeatedly removes a pair @xmath65 with the smallest key from the global heap  @xmath64 .",
    "the corresponding path @xmath94 $ ] is then a shortest path .",
    "the call @xmath509 is then made .",
    "the function @xmath509 receives a newly discovered shortest path .",
    "it sets to @xmath510 $ ] to true .",
    "it inserts @xmath66 to the lists @xmath511 $ ] and @xmath512 $ ] , as @xmath66 is now a shortest path left extension of @xmath92 $ ] and a shortest path right extension of @xmath91 $ ] .",
    "( note that @xmath66 is already contained in @xmath513 $ ] and @xmath514 $ ] at this stage . )",
    "most importantly , @xmath509 now constructs lsps extensions of  @xmath66 and examines each one of them .",
    "( these operations may add new pairs into the global heap  @xmath64 . )",
    "updates are performed by calling , also given in figure  [ f - update ] .",
    "@xmath108 assigns the edges of  @xmath99 new edges weights and recomputes all shortest paths .",
    "@xmath108 starts by removing all paths that pass through edges of  @xmath99 .",
    "this done by calling @xmath515,{{\\tt true}})$ ] , for every .",
    "( function @xmath516 is discussed below . )",
    "these removals create a list  @xmath323 of pairs @xmath65 that lost their shortest path .",
    "for every @xmath517 , a call is made to @xmath518 .",
    "paths corresponding to all edges of  @xmath99 are recreated , with their new costs , and these edge paths are examined .",
    "all updated shortest paths are then obtained by a call to .",
    "@xmath518 , given in figure  [ f - removepaths ] , receives a pair of vertices @xmath65 such that the shortest path from  @xmath50 to  @xmath14 has just been destroyed .",
    "it finds the shortest path  @xmath66 in @xmath93 $ ] , if there is one , and performs the necessary updates .",
    "( note that @xmath66 is not necessarily the shortest path from  @xmath50 to  @xmath14 .",
    "it is just the shortest path currently available . )    finally , paths and their extensions are removed from the path system by the functions  and  also given in figure  [ f - removepaths ] . to remove a path  @xmath66 from the path system",
    ", @xmath519 deletes @xmath66 from @xmath93 $ ] , where @xmath502 $ ] and @xmath503 $ ] are the endpoints of  @xmath66",
    ". it also deletes  @xmath66 from @xmath514 $ ] and @xmath513 $ ] .",
    "if  @xmath66 is marked as a shortest path , i.e. , @xmath510={{\\tt true}}$ ] , then  @xmath66 is also removed from @xmath520 $ ] and @xmath511 $ ] . finally , if @xmath510={{\\tt true}}$ ] and @xmath521 , then @xmath65 is inserted into a list  @xmath323 of pairs who lost their shortest paths .",
    "@xmath522 removes all the extensions of  @xmath66 from the path system , by calling @xmath523 , for every @xmath524\\cap r[\\pi]$ ] .",
    "theorem  [ t - dynamic ] now follows by examining the operation of the algorithm .",
    "when a shortest path is destroyed it is removed from its local heap . in some cases , the shortest path in the local heap",
    "is found and a pair @xmath65 is inserted into the global heap .",
    "the total cost of these operations is at most @xmath525 , where @xmath107 is an upper bound on the size of the local heaps .",
    "each new shortest path is extracted from the global heap at a total cost of @xmath526 .",
    "each lsp destroyed is removed from its local heap at a cost of @xmath527 .",
    "finally , each lsp created is inserted into the appropriate local heap and possibly causes a decrease - key operation on the global heap , a total cost of @xmath528 ."
  ],
  "abstract_text": [
    "<S> we present an all - pairs shortest path algorithm whose running time on a complete directed graph on  @xmath0 vertices whose edge weights are chosen independently and uniformly at random from @xmath1 $ ] is  @xmath2 , in expectation and with high probability . </S>",
    "<S> this resolves a long standing open problem . </S>",
    "<S> the algorithm is a variant of the dynamic all - pairs shortest paths algorithm of demetrescu and italiano . </S>",
    "<S> the analysis relies on a proof that the number of _ locally shortest paths _ in such randomly weighted graphs is @xmath2 , in expectation and with high probability . </S>",
    "<S> we also present a dynamic version of the algorithm that recomputes all shortest paths after a random edge update in @xmath3 expected time . </S>"
  ]
}