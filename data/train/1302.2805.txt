{
  "article_text": [
    "in online computation , we face the challenge of designing algorithms that work in environments where parts of the input are not known while parts of the output ( that may heavily depend on the yet unknown input pieces ) are already needed . the standard way of evaluating the quality of online algorithms is by means of _ competitive analysis _ , where one compares the outcome of an online algorithm to the optimal solution constructed by a hypothetical optimal offline algorithm .",
    "since deterministic strategies are often proven to fail for the most prominent problems , randomization is used as a powerful tool to construct high - quality algorithms that outperform their deterministic counterparts .",
    "these algorithms base their computations on the outcome of a random source ; for a detailed introduction to online problems we refer the reader to the literature  @xcite .    the most common way to measure the performance of randomized algorithms is to analyze the worst - case expected outcome and to compare it to the optimal solution . with offline algorithms , a statement about",
    "the expected outcome is also a statement about the _ outcome with high probability _ due to markov s inequality and the fact that the algorithm may be executed many times to amplify the probability of success  @xcite .",
    "however , this amplification is not possible in online settings . as online algorithms only have one attempt to compute a reasonably good result , a statement with respect to the expected value of their competitive ratio may be rather unsatisfying . as a matter of fact , for a fixed input",
    ", it might be the case that such an algorithm produces results of a very high quality in very few cases ( i.e. , for a rather small number of random choices ) , but is unacceptably bad for the majority of random computations ; still , the expected competitive ratio might suggest a better performance . thus ,",
    "if we want to have a certain guarantee that some randomized online algorithm obtains a particular quality , we must have a closer look at its analysis .",
    "in such a setting , we would like to state that the algorithm does not only perform well on average , but `` almost always . ''",
    "besides a theoretical formalization of the above statement , the main contribution of this paper is to show that , for a broad class of problems , the existence of a randomized online algorithm that performs well in expectation immediately implies the existence of a randomized online algorithm that is virtually as good with high probability .",
    "our investigations , however , need to be detailed in order to face the particularities of the framework .",
    "first , we show that it is not possible to measure the probability of success with respect to the input size , which might be considered the straightforward approach .",
    "many of the known randomized online algorithms are naturally divided into some kind of _ phases _ ( e.g. , the algorithm for metrical task systems from borodin et al .",
    "@xcite , the marking algorithm for paging from fiat et al .",
    "@xcite , etc . ) where each phase is processed and analyzed separately . since the phases are independent , a high probability result ( i.e. , with a probability converging to @xmath1 with an increasing number of phases ) can be obtained . however , the definition of these phases is specific to each problem and algorithm . also , there are other algorithms ( e.g. , the optimal paging algorithm from achlioptas et al .",
    "@xcite and many workfunction - based algorithms ) that use other constructions and that are not divided into phases . as we want to establish results with high probability that are independent of the concrete algorithms , we thus have to measure this probability with respect to another parameter ; we show that the cost of an optimal solution is a very reasonable quantity for this purpose",
    ".    then again it turns out that , if we consider general online problems , the notions of the expected outcome and an outcome with high probability are still not related in any way , i.e. , we define problems for which these two measures are incomparable . hence , we carefully examine both to which parameter the probability should relate and which properties we need the studied problem to fulfill to again allow a division into independent phases ; finally , this allows us to construct randomized online algorithms that perform well with a probability tending to @xmath1 with a growing size of the optimal cost .",
    "we show that this technique is applicable for a wide range of online problems .",
    "classically , results concerning randomized online algorithms commonly analyze their expected behavior ; there are , however , a few exceptions , e.g. , leonardi et al .",
    "@xcite analyze the tail distribution of algorithms for call control problems , and maggs et al .",
    "@xcite deal with online distributed data management strategies that minimize the congestion in certain network topologies .      in section  [ sec : prelim ]",
    ", we define the class of symmetric online minimization problems and present the main result ( theorem  [ thm : exptohp ] ) .",
    "the theorem states that , for any symmetric problem which fulfills certain natural conditions , it is possible to transform an algorithm with constant expected competitive ratio @xmath2 to an algorithm having a competitive ratio of @xmath3 with high probability ( with respect to the cost of an optimal solution ) .",
    "section  [ sec : mainthm ] is devoted to proving theorem  [ thm : exptohp ] .",
    "we partition the run of the algorithm into phases such that the loss incurred by the phase changes can be amortized ; however , to control the variance within one phase , we need to further subdivide the phases .",
    "modelling the cost of single phases as dependent random variables , we obtain a supermartingale that enables us to apply the azuma - hoeffding inequalityand thus to obtain the result .",
    "these investigations are followed by applications of the theorem in section  [ sec : applications ] where we show that our result is applicable for task systems and that for the @xmath0-server problem on unbounded metric spaces , no comparable result can be obtained .",
    "we further elaborate on the tightness of our result in section  [ sec : discussion ] .",
    "we use the following definitions of online algorithms @xcite that deal with online minimization problems .",
    "[ dfn : online - alg ] consider an initial configuration @xmath4 and an input sequence @xmath5 .",
    "an _ online algorithm _ @xmath6computes the output sequence @xmath7 , where @xmath8 for some function @xmath9 .",
    "the _ cost _ of the solution @xmath10 is denoted by @xmath11 .    for the ease of presentation",
    ", we refer to the tuple that consists of the initial configuration and the input sequence , i.e. , @xmath12 , as the input of the problem .",
    "even though the initial configuration is not explicitly introduced in the definition in @xcite , it is often very natural , and it is used in the definitions of some well - known online problems ( e.g. , the @xmath0-server problem @xcite ) . as we see later , the notion of an initial configuration plays an important role in the relationship between different variants of the competitive ratio .",
    "since , for the majority of online problems , deterministic strategies are often doomed to fail in terms of their output quality , randomization is used in the design of online algorithms  @xcite .",
    "formally , randomized online algorithms can be defined as follows .    a _ randomized online algorithm _ @xmath13 computes the output sequence @xmath14 such that @xmath15 is computed from @xmath16 , where @xmath17 is the content of the random tape , i.e. , an infinite binary sequence where every bit is chosen uniformly at random and independent of the others . by @xmath18",
    "we denote the random variable ( over the probability space defined by @xmath17 ) expressing the cost of the solution @xmath19 .    the efficiency of an online algorithm is usually measured in terms of the competitive ratio as introduced by sleator and tarjan  @xcite .",
    "an online algorithm is @xmath2-_competitive _",
    ", for some @xmath20 , if there exists a constant @xmath21 such that , for every initial configuration @xmath4 and each input sequence @xmath22 , @xmath23 , where @xmath24 denotes the value of the optimal solution for the given instance ; an online algorithm is _ optimal _ if it is @xmath1-competitive with @xmath25 .",
    "when dealing with randomized online algorithms we compare the expected outcome to the one of an optimal algorithm .",
    "a randomized online algorithm @xmath13 is @xmath2-competitive _ in expectation _ if there exists a constant @xmath21 such that , for every initial configuration @xmath4 and input sequence @xmath22 , @xmath26 \\le    r\\cdot { {   \\ifthenelse{\\equal{i , x}{\\empty } } {     \\ensuremath{{\\ensuremath{\\mathrm{cost}}\\xspace}}({\\ensuremath{\\texttt{\\textsc{opt}}}\\xspace})\\xspace   } {     \\ensuremath{{\\ensuremath{\\mathrm{cost}}\\xspace}}_{i , x}({\\ensuremath{\\texttt{\\textsc{opt}}}\\xspace})\\xspace   } } } + \\alpha$ ] .    in the sequel , we analyze the notion of _ competitive ratio with high probability_. before stating the definition , however , we quickly discuss what parameter the high probability should relate to .",
    "as already mentioned , a natural way would be to define an event to have high probability if the probability that it appears tends to @xmath1 with increasing input length ( i.e. , the number of requests ) .",
    "however , this does not seem to be very useful ; consider , e.g. , the well - known paging problem  @xcite with cache size @xmath0 ( we describe and study paging more thoroughly in subsection  [ subsec : paging ] ) : for any input @xmath22 of length @xmath27 and any competitive ratio @xmath2 and any @xmath28 , there is an input @xmath29 of length @xmath30 formed by repeating every request @xmath28 times .",
    "hence , for any algorithm , the performance on @xmath22 and @xmath29 is the same .",
    "this implies that there is no randomized algorithm for paging that achieves a competitive ratio of less than @xmath0 with a probability approaching @xmath1 with growing @xmath27 .",
    "let @xmath31 and suppose that there exists @xmath32 and a randomized online algorithm @xmath33that , for any input @xmath22 with @xmath34 is @xmath2-competitive with probability @xmath35 , for some function @xmath9 that tends to infinity with growing @xmath27 .",
    "thus , there is a randomized online algorithm @xmath36 that is @xmath2-competitive on every instance @xmath29 independent of its length with this probability .",
    "in particular , if there exists such an algorithm , then there exists a randomized online algorithm @xmath37that is @xmath2-competitive on instances of length @xmath0 with probability @xmath35 , for any @xmath27 .",
    "now consider the following instance that consists of @xmath0 requests and let the cache be initialized with pages @xmath38 ; an adversary requests page @xmath39 at the beginning and a unique page in the next @xmath40 time steps .",
    "clearly , there exists an optimal solution with cost @xmath1 . in every time step in which a page fault occurs",
    ", @xmath37 , using its random source , chooses a page to evict to make space in the cache .",
    "since the adversary knows @xmath37 s probability distribution , without loss of generality , we assume that @xmath37chooses every page with the same probability .",
    "note that there exists a sequence @xmath41 of `` bad '' choices that causes @xmath37to have cost @xmath0 . in the first time step , @xmath37chooses the bad page with probability at least @xmath42 ; with probability at least @xmath43 , it chooses the bad pages in the first and the second time step and so on . clearly , the probability that it chooses the bad sequence is at least @xmath44 . but",
    "this immediately contradicts that @xmath37performs well on this instance with probability @xmath45 , for arbitrarily large  @xmath27 .    then again , for the practical use of paging algorithms , the instances where also the optimal algorithm makes faults are of interest .",
    "hence , it seems reasonable to define the term _ high probability _ with respect to the cost of an optimal solution . in this paper",
    ", we use a strong notion of high probability requiring the error probability to be subpolynomial .",
    "[ dfn : compwhp ] a randomized online algorithm @xmath33is @xmath2-competitive _ with high probability _ ( w.h.p . for short )",
    "if , for any @xmath46 , there exists a constant @xmath21 such that for all initial configurations and inputs @xmath12 it holds that @xmath47\\le\\left(2 + { {   \\ifthenelse{\\equal{i , x}{\\empty } } {     \\ensuremath{{\\ensuremath{\\mathrm{cost}}\\xspace}}({\\ensuremath{\\texttt{\\textsc{opt}}}\\xspace})\\xspace   } {     \\ensuremath{{\\ensuremath{\\mathrm{cost}}\\xspace}}_{i , x}({\\ensuremath{\\texttt{\\textsc{opt}}}\\xspace})\\xspace   } } } \\right)^{-\\beta}.\\ ] ]    first , note that the purpose of the constant @xmath48 on the right - hand side of the formula is to properly handle inputs with a small ( possibly zero ) optimum . the choice of the particular constant is somewhat arbitrary ( however , it should be greater than @xmath1 ) since the @xmath21 term on the left - hand side hides the effects .",
    "we now show that the two notions of the expected and the high - probability competitiveness are incomparable .",
    "let @xmath49 $ ] denote the set @xmath50 .    1 .",
    "on the one hand , there are problems for which the competitive ratio w.h.p . is better than the expected one .",
    "consider , e.g. , the following problem .",
    "there is a unique initial configuration @xmath4 and the input sequence consists of @xmath51 bits @xmath52 .",
    "an online algorithm has to produce one - bit answers @xmath53 .",
    "if , for every @xmath54 $ ] , it holds that @xmath55 , the cost is @xmath56 , otherwise the cost is @xmath57 , which is optimal . a straightforward algorithm that guesses each bit with probability @xmath58 has probability @xmath59 to be optimal on every input",
    "+ consider some @xmath46 ; let @xmath60 be the smallest integer such that @xmath61 and let @xmath62 . for any input of length @xmath63 we have @xmath64\\le\\frac{1}{2^n }          \\le\\frac{1}{(n+3)^\\beta}\\le\\frac{1}{(2 + { {   \\ifthenelse{\\equal{i , x}{\\empty } } {     \\ensuremath{{\\ensuremath{\\mathrm{cost}}\\xspace}}({\\ensuremath{\\texttt{\\textsc{opt}}}\\xspace})\\xspace   } {     \\ensuremath{{\\ensuremath{\\mathrm{cost}}\\xspace}}_{i , x}({\\ensuremath{\\texttt{\\textsc{opt}}}\\xspace})\\xspace   } } } ) ^\\beta}.\\ ] ] for inputs of length at most @xmath60 , any solution has a cost of at most @xmath21 , so @xmath65=0.\\ ] ] hence , the algorithm is @xmath1-competitive w.h.p .",
    "+ however , for any algorithm , there is an input such that the probability of guessing the whole sequence is at least @xmath66 , so the expected cost is at least @xmath67 .",
    "since the optimum is at most @xmath51 , any algorithm has an expected competitive ratio of at least @xmath68 2 .   on the other hand",
    ", the following problem shows that sometimes the expected performance is better than the one we get w.h.p .",
    "in fact , we show that the gap between these two measures can be arbitrarily large . consider a problem with @xmath27 requests , where the first @xmath69 ones are just dummy requests that serve for padding , and the last one is @xmath70 for some positive integer @xmath71 that depends on @xmath27 .",
    "the answer @xmath72 has to be a number from the interval @xmath73 .",
    "the cost is @xmath27 if @xmath74 , and @xmath75 otherwise .",
    "an algorithm that chooses @xmath72 uniformly at random pays @xmath27 with probability @xmath76 and @xmath75 with probability @xmath77 ; hence the expected cost is @xmath78 .",
    "however , there is always an input such that the probability to pay @xmath75 is at least @xmath77 . for any @xmath0 , we can choose @xmath79 .",
    "then , no algorithm can achieve a solution with cost better than @xmath80 with probability at least @xmath81 . since the optimal cost is @xmath27 ,",
    "there is no algorithm with competitive ratio @xmath82 w.h.p . , but there is one with an expected competitive ratio of @xmath48 .",
    "however , the problems used in the previous examples were quite artificial ; many real - world online problems share additional properties that guarantee a closer relationship between the expected and high - probability behavior . in what follows ,",
    "we thus focus on so - called _ partitionable _ problems .",
    "[ dfn : partitionable ] an online problem is called _ partitionable _ if there is a non - negative function @xmath83 such that , for any initial configuration @xmath4 , the sequence of requests @xmath84 , and the corresponding solutions @xmath85 , we have @xmath86    in other words , for a partitionable problem , the cost of a solution is the sum of the costs of particular answers , and the cost of each answer is independent of the future input and output .",
    "the partitionability allows us to speak of the cost of a subsequence of the outputs .",
    "a problem can only fail to be partitionable if the cost may decrease with additional request - answer pairs .",
    "we can , however , transform every online problem into a partitionable one by introducing a dummy request at the end as a unique end marker .",
    "this way , we can assign a value of zero to all answers but the last one .",
    "therefore , the partitionability condition stated in this way causes no restriction on the online problem . however , we further restrict the behavior , and it will be convenient to think in terms of the `` cost of a particular answer . ''",
    "[ dfn : req - bounded ] let the function @xmath83 be defined as in definition  [ dfn : partitionable ] .",
    "a partitionable problem is called _ request - bounded _ if , for some constant @xmath87 , we have @xmath88    note that for any partionable problem there is a natural notion of a state ; for instance , it is the content of the memory for the paging problem , the position of the servers for the @xmath0-server problem , etc .",
    "now we provide a general definition of this notion . by @xmath89 , we denote the concatenation of two sequences @xmath90 and @xmath71 ; @xmath91denotes the empty sequence .",
    "[ dfn : state ] consider two initial configurations @xmath4 and @xmath92 , two sequences of requests @xmath5 and @xmath93 , and two sequences of outputs @xmath94 and @xmath95 .",
    "the triples @xmath96 and @xmath97 are equivalent if , for any sequence of requests @xmath98 and a sequence of outputs @xmath99 , the input @xmath100 is valid with a solution @xmath101 if and only if the input @xmath102 is valid with a solution @xmath103 , and the cost of @xmath104 is the same for both solutions .",
    "a _ state _ @xmath105 of the problem is an equivalence class over the triples @xmath96 .",
    "let @xmath96 be some triple in @xmath105 .",
    "by @xmath106 we denote the sequence of outputs @xmath107 such that @xmath108 is a valid solution of the input @xmath109 and the cost @xmath110 of @xmath107 is minimal , where @xmath111 is the configuration determined by @xmath96 .",
    "a state @xmath105 is an _ initial _",
    "state if and only if it contains some triple @xmath112 .",
    "we chose this definition of states as it covers best the properties of online computations as we need them in our main theorem .",
    "an alternative definition could use task systems with infinitely many states , but the description would become less intuitive ; we will return to task systems in section  [ sec : task ] .    from now on we sometimes slightly abuse notation and write @xmath113 instead of @xmath114 if the configuration @xmath111 corresponds to a triple in @xmath105 , as it is sufficient to know the state @xmath105 instead of @xmath111 in order to determine the value of the function . intuitively , a state from definition  [ dfn : state ] encapsulates all information about the ongoing computation of the algorithm that is relevant for evaluating the efficiency of the future processing . usually , the state is naturally described in the problem - specific domain ( content of cache , current position of servers , set of jobs accepted so far , etc . ) .",
    "note , however , that the internal state of an algorithm is a different notion since it may , e.g. , behave differently if the starting request had some particular value .",
    "the following properties are crucial for our approach to probability amplification .",
    "[ dfn : opt - bounded ] a partitionable online problem is called _ opt - bounded _ if there exists a constant @xmath115 such that @xmath116 .",
    "note that the definition of opt - boundedness implies that any request sequence @xmath22 is valid .",
    "in particular , the request sequence may end at any time .",
    "[ dfn : symmetric ] an online problem is called _ symmetric _",
    "if it is partitionable and every state is initial .",
    "formally , any partitionable problem may be transformed into a symmetric one simply by redefining the set of initial states .",
    "however , this transformation may significantly change the properties of the problem .",
    "now we are going to state the main result of this paper , namely that , under certain conditions , the expected competitive ratio of symmetric problems can be achieved w.h.p .",
    "[ thm : exptohp ] consider a opt - bounded symmetric online problem for which there is a randomized online algorithm @xmath117 with constant expected competitive ratio @xmath2 .",
    "then , for any constant @xmath118 , there is a randomized online algorithm @xmath119 with competitive ratio @xmath3 w.h.p .",
    "( with respect to the optimal cost ) .",
    "we prove this theorem in the subsequent section .",
    "for ease of presentation , we first provide a proof for a restricted setting where the online problem at hand is also request - bounded .",
    "the algorithm @xmath119 simulates @xmath6and , on some specific places , performs a _",
    "reset _ operation : if a part @xmath29 of the input has been read so far , and a corresponding output @xmath107 has been produced , @xmath120 belongs to the same state as @xmath121 , for some initial configuration @xmath92 , because we are dealing with a symmetric problem ; hence , @xmath6can be restarted by @xmath119 from @xmath92 .",
    "the general idea to boost the probability of acquiring a low cost is to perform a reset each time the algorithm incurs too much cost and to use markov s inequality to bound the probability of such an event .",
    "however , the exact value of how much is `` too much '' depends on the optimal cost of the input which is not known in advance .",
    "therefore , the input is first partitioned into _ phases _ of a fixed optimal cost , and then each phase is cut into _ subphases _ based on the cost incurred so far .",
    "a reset may cause an additional expected cost of @xmath122 for the subsequent phase compared to an optimal strategy starting from another state , where @xmath115 is the constant of the opt - boundedness ( definition  [ dfn : opt - bounded ] ) , i.e. , @xmath115 bounds the different costs between two optimal solutions for a fixed input for different states .",
    "we therefore have to ensure that the phases are long enough so as to amortize this overhead .    from now on",
    "let us consider @xmath123 , @xmath2 , @xmath115 , and @xmath87 to be fixed constants ; recall that @xmath87 originates from the request - boundedness property of the online problem at hand ( definition  [ dfn : req - bounded ] ) .",
    "the algorithm @xmath119 is parameterized by two parameters @xmath124 and @xmath125 that depend on @xmath123 , @xmath2 , @xmath115 , and @xmath87 .",
    "these parameters control the length of the phases and subphases , respectively , such that @xmath126 delimits the optimal cost of one phase and @xmath127 delimits the cost of the solution computed by @xmath119 on one subphase ; we require that @xmath128 .",
    "consider an input sequence @xmath5 , an initial configuration @xmath4 , and let the optimal cost of the input @xmath12 be between @xmath129 and @xmath130 for some integer @xmath0 . then @xmath22 can be partitioned into @xmath0 phases @xmath131 , @xmath132 in such a way that @xmath133 is the minimal index for which the optimal cost of the input @xmath134 is at least @xmath135 .",
    "it follows that the optimal cost for one phase is at least @xmath136 and at most @xmath126 , with the exception of the last phase which may be cheaper .",
    "note that this partition can be generated by the online algorithm itself , i.e. , @xmath119 can determine when a next phase starts .",
    "there are only two reasons for @xmath119 to perform a reset : at the beginning of each phase and after incurring a cost exceeding @xmath125 since the last reset .",
    "hence , @xmath119 starts each phase with a reset , and the processing of each phase is partitioned into a number of subphases each of cost at least @xmath125 ( with the exception of the possibly cheaper last subphase ) and at most @xmath127 .",
    "now we are going to discuss the cost of @xmath119 on a particular input .",
    "let us fix the input @xmath12 which subsequently also fixes the indices @xmath137 .",
    "let @xmath138 be a random variable denoting the state of the problem ( according to definition  [ dfn : state ] ) just before processing request @xmath139 , and let @xmath140 , @xmath141 , be a random variable denoting the cost of @xmath119 incurred on the input @xmath142 .",
    "the following claim is obvious .",
    "if @xmath119 performs a reset just before processing @xmath139 , then @xmath138 captures all the information from the past @xmath140 depends on . in particular ,",
    "if we fix @xmath143 , @xmath140 does not depend on @xmath144 , for any @xmath145 and any state @xmath105 .",
    "the overall structure of the proof is as follows .",
    "we first show in lemma  [ lm : wexp ] that the expected cost incurred during a phase ( conditioned by the state in which the phase was entered ) is at most @xmath146 , where @xmath147 .",
    "we can then consider variables @xmath148 such that @xmath149 where @xmath150 is the cost of the @xmath151th phase , clipped from above by some logarithmic bound , i.e. , @xmath152 for some suitable constant @xmath153 .",
    "we show in lemma  [ lm : martingale ] that @xmath148 form a bounded supermartingale , and then use the azuma - hoeffding inequalityto conclude that @xmath154 is unlikely to be much larger than @xmath155 . by a suitable choice of the free parameters",
    ", this implies that @xmath154 is unlikely to be much larger than the expected cost of @xmath117 .",
    "finally , we show that w.h.p .",
    "@xmath154 is the cost of the algorithm @xmath119 .    in order to argue about the expected cost of a given phase in lemma  [ lm : wexp ] ,",
    "let us first show that a phase is unlikely to have many subphases .",
    "for the rest of the proof , let @xmath156 be the random variable denoting the number of subphases of phase @xmath157 .",
    "[ lm : xprob ] for any @xmath151 , @xmath105 , and any @xmath158 it holds that @xmath159\\le p^{\\delta-1}$ ] .    the proof is done by induction on @xmath160 . for @xmath161",
    "the statement holds by definition .",
    "let @xmath162 denote the index of the first request after @xmath163 subphases , with @xmath164 , and @xmath165 if there are less than @xmath153 subphases .",
    "in order to have at least @xmath166 subphases , the algorithm must enter some suffix of phase @xmath151 at position @xmath167 and incur a cost of more than @xmath125 ( see fig .",
    "[ fig : subphases ] ) .",
    "hence , @xmath168 = { } & { \\ensuremath{\\mathrm{pr}}\\mathopen{}}[{\\ensuremath{\\overline{n}}}_{\\delta-1}<n_{i+1}-1\\mid s_{n_i}=s]\\\\      & \\cdot { \\ensuremath{\\mathrm{pr}}\\mathopen { } } [ w({\\ensuremath{\\overline{n}}}_{\\delta-1},n_{i+1}-1)>d \\mid { \\ensuremath{\\overline{n}}}_{\\delta-1}<n_{i+1}-1\\wedge s_{n_i}=s].\\nonumber    \\end{aligned}\\ ] ]     subphases.,width=377 ]    the fact that @xmath169 means that there are at least @xmath170 subphases , i.e. , @xmath171 =   { \\ensuremath{\\mathrm{pr}}\\mathopen{}}[x_{i}\\ge\\delta-1\\mid   s_{n_i}=s ] \\le p^{\\delta-2 }    \\end{aligned}\\ ] ] by the induction hypothesis .",
    "further , we can decompose @xmath172 \\\\      & = \\sum_{i',s'\\atop n_i\\le i'<n_{i+1}-1 }         { \\ensuremath{\\mathrm{pr}}\\mathopen { } } [ w({\\ensuremath{\\overline{n}}}_{\\delta-1 } , n_{i+1}-1)>d \\mid { \\ensuremath{\\overline{n}}}_{\\delta-1}=i'\\wedge s_{i'}=s'\\wedge s_{n_i}=s]\\nonumber\\\\      & \\quad\\cdot { \\ensuremath{\\mathrm{pr}}\\mathopen{}}[{\\ensuremath{\\overline{n}}}_{\\delta-1}=i'\\wedge s_{i'}=s ' \\mid   { \\ensuremath{\\overline{n}}}_{\\delta-1}<n_{i+1}-1\\wedge s_{n_i}=s].\\nonumber    \\end{aligned}\\ ] ] now let us argue about the probability @xmath173.\\ ] ] the algorithm @xmath119 performed a reset just before reading @xmath174 , so it starts simulating @xmath6from state @xmath175",
    ". however , in the optimal solution , there is some state @xmath176 associated with position @xmath177 such that the cost of the remainder of the @xmath151th phase is at most @xmath126 . due to the assumption of the theorem ,",
    "the optimal cost on the input @xmath178 starting from state @xmath175 is at most @xmath179 , and the expected cost incurred by @xmath6is at most @xmath180 . using markov s inequality ,",
    "we get @xmath181 \\le \\frac{r(c + f + b)}{d}=p.\\ ] ] plugging   into  , and then together with   into   yields the result .",
    "now we can argue about the expected cost of a phase .",
    "[ lm : wexp ] for any @xmath151 and @xmath105 it holds that @xmath182\\le\\mu$ ] .",
    "let @xmath162 be defined as in the proof of lemma  [ lm : xprob ] .",
    "using the same arguments , we have that the expected cost of a single subphase is @xmath183 \\le r(c+f+b).\\ ] ] conditioning and decomposing by @xmath162 and @xmath175 , we get that @xmath184 \\le r(c+f+b).\\ ] ] finally , let @xmath185 if @xmath186 , or @xmath187 if @xmath188 .",
    "this gives @xmath189   = \\sum_{c=1}^\\infty { \\ensuremath{\\mathbbm{e}}\\mathopen { } } [ q_{i , c } \\mid s_i = s ] \\\\      & = \\sum_{c=1}^\\infty { \\ensuremath{\\mathbbm{e}}\\mathopen { } } [ q_{i , c } \\mid s_i = s \\wedge x_i\\ge c]\\cdot { \\ensuremath{\\mathrm{pr}}\\mathopen{}}[x_i\\ge c]\\\\      & \\le \\sum_{c=1}^\\infty r(c+f+b ) p^{j-1 } = r(c+f+b)/(1-p ) .",
    "\\end{aligned}\\ ] ]    once the expected cost of a phase is established , we can construct the supermartingale as follows .",
    "[ lm : martingale ] for any constant @xmath190 , the sequence @xmath148 is a supermartingale .",
    "consider a fixed @xmath153 .",
    "we have to show that for each @xmath151 , @xmath191\\le z_i$ ] . from the definition of the @xmath192",
    "s it follows that @xmath193 .",
    "consider any elementary event @xmath194 from the probability space , and let @xmath195 , for @xmath196 be the values of the corresponding random variables .",
    "we have @xmath197(\\xi ) = { \\ensuremath{\\mathbbm{e}}\\mathopen { } } [ z_{i+1}\\mid z_0=z_0,\\dots , z_i = z_i]\\\\      & = { \\ensuremath{\\mathbbm{e}}\\mathopen { } } [ z_i+{\\overline{w}}_{i+1}-\\mu\\mid z_0=z_0,\\dots , z_i = z_i ]      = z_i-\\mu+{\\ensuremath{\\mathbbm{e}}\\mathopen{}}[{\\overline{w}}_{i+1}\\mid z_0=z_0,\\dots , z_i = z_i]\\\\      & \\textstyle = z_i-\\mu+\\sum_s{\\ensuremath{\\mathbbm{e}}\\mathopen{}}[{\\overline{w}}_{i+1}\\mid z_0=z_0,\\dots , z_i = z_i , s_{n_{i+1}}=s]\\\\      & \\quad\\cdot{\\ensuremath{\\mathrm{pr}}\\mathopen{}}[s_{n_{i+1}}=s \\mid z_0=z_0,\\dots , z_i = z_i]\\\\      & \\textstyle \\le z_i-\\mu+\\sum_s{\\ensuremath{\\mathbbm{e}}\\mathopen{}}[w(n_{i+1},n_{i+2}-1)\\mid s_{n_{i+1}}=s]\\cdot{\\ensuremath{\\mathrm{pr}}\\mathopen{}}[s_{n_{i+1}}=s \\mid z_0=z_0,\\dots , z_i = z_i]\\\\      & \\textstyle \\le z_i-\\mu+\\mu\\sum_s{\\ensuremath{\\mathrm{pr}}\\mathopen{}}[s_{n_{i+1}}=s \\mid z_0=z_0,\\dots , z_i = z_i]=z_i = z_i(\\xi ) ,    \\end{aligned}\\ ] ] where the last inequality is a consequence of lemma  [ lm : wexp ] .",
    "now we can use the following special case of the azuma - hoeffding inequality  @xcite .",
    "[ lm : azuma ] let @xmath198 be a supermartingale , such that @xmath199 .",
    "then for any positive real @xmath200 , @xmath201\\le\\exp\\mathopen{}\\left(-\\frac{t^2}{2k\\gamma^2}\\right).\\ ] ]    in order to apply lemma  [ lm : azuma ] , we need the following bound .",
    "[ clm : martbound ] let @xmath0 be such that @xmath202 .",
    "for any @xmath151 it holds that @xmath203 .",
    "we are now ready to prove the subsequent lemma .",
    "[ lm : mainbound ]",
    "let @xmath0 be such that @xmath202 .",
    "there is a constants @xmath124 ( depending on @xmath87 , @xmath115 , @xmath123 , @xmath2 ) such that @xmath204\\le\\exp\\mathopen{}\\left(-\\frac{k\\left((1+\\varepsilon)rc-\\mu\\right)^2}{2c^2\\log^2k}\\right).\\ ] ]    applying lemma  [ lm : azuma ] for any positive @xmath200 , we get @xmath205\\le\\exp\\mathopen{}\\left(-\\frac{t^2}{2kc^2\\log^2k}\\right).\\ ] ] noting that @xmath206 , and choosing @xmath207 the statement follows .",
    "the only remaining task is to verify that @xmath208 , i.e. , that there is a constant @xmath125 such that @xmath209 let us choose @xmath124 such that @xmath210",
    ". then @xmath211 , and it is possible to choose @xmath125 such that both @xmath212 as required , and @xmath213 thus , we have @xmath214 and therefore @xmath215 and the claim follows .    to get to the statement of the main theorem , we show the following technical bound .",
    "[ lm : expprob ] for any @xmath153 , and @xmath216 there is a @xmath217 such that for any @xmath218 @xmath219    note that the left - hand side is of the form @xmath220 for some positive constant @xmath221 .",
    "clearly , for any @xmath216 and large enough @xmath0 , it holds that @xmath222 .    combining lemmata  [ lm : mainbound ] and  [ lm : expprob ]",
    ", we get the following result .",
    "[ crlr : probzk ] there is a constant @xmath124 ( depending on @xmath87 , @xmath115 , @xmath123 , @xmath2 ) such that for any @xmath216 there is a @xmath217 such that for any @xmath218 we have @xmath204\\le\\frac{1}{2(2+kc)^\\beta}.\\ ] ]    in order to finish the proof of the main theorem we show that w.h.p . , @xmath154 is actually the cost of the algorithm @xmath119 .",
    "[ lm : zcost ] for any @xmath216 there is a @xmath153 and a @xmath223 such that for any @xmath224 @xmath225\\le\\frac{1}{2(2+kc)^\\beta}.\\ ] ]    since @xmath226 the event that @xmath227 happens exactly when there exists some @xmath157 such that @xmath228 .",
    "consider any fixed @xmath157 .",
    "since the cost of a subphase is at most @xmath127 , it holds that @xmath229 . from lemma  [ lm : xprob ]",
    "it follows that for any @xmath153 , @xmath230\\le{\\ensuremath{\\mathrm{pr}}\\mathopen{}}\\left[x_j\\ge\\left\\lceil\\frac{c\\log k}{f+d}\\right\\rceil\\right ]       \\le p^{\\frac{c\\log k}{f+d}-1}.\\ ] ] consider the function @xmath231 it is decreasing , and @xmath232 .",
    "hence , it is possible to find a constant @xmath153 , and a @xmath223 such that for any @xmath224 it holds that @xmath233 from that it follows that @xmath234 and @xmath235 i.e. , @xmath236 thus , for this choice of @xmath153 and @xmath223 , it holds that @xmath230\\le p^{\\frac{c\\log k}{f+d}-1}\\le\\frac{1}{2k(2+kc)^\\beta}.\\ ] ] using the union bound , we conclude that the probability that the cost of any phase exceeds @xmath237 is at most @xmath238 .",
    "using the union bound , combining lemma  [ lm : zcost ] and corollary  [ crlr : probzk ] , and noting that the cost of the optimum is at most @xmath130 , we get the following statement .",
    "there is a constant @xmath124 such that for any @xmath216 there a @xmath239 such that for any @xmath240 it holds @xmath241\\le\\frac{1}{(2+kc)^\\beta}.\\ ] ]    to conclude the proof by showing that for any @xmath216 there is some @xmath21 such that @xmath242\\le\\frac{1}{(2+kc)^\\beta}\\ ] ] holds for all @xmath0 , we have to choose @xmath21 large enough to cover the cases of @xmath243 .",
    "for these cases , @xmath244 , and hence the expected cost of @xmath6is at most @xmath245 , and due to lemma  [ lm : wexp ] , the expected cost of @xmath119 is constant .",
    "the right - hand side @xmath246 is decreasing in @xmath0 , so it is at least @xmath247 , which is again a constant .",
    "from markov s inequality it follows that there exists a constant @xmath21 such that @xmath248<\\frac{1}{(2+k_2c)^\\beta}\\ ] ] finishing the proof of the restricted setting .",
    "all that is left to do is to show how to handle problems that are not request - bounded .",
    "the main idea is to apply the restricted theorem  [ thm : exptohp ] to a modified request - bounded version of the given problem .",
    "we then have to show that there is a modified version of the algorithm such that the computed solution has an expected competitive ratio close to the original one for the modified problem . by ensuring that _ any _ solution to the modified problem translates to a solution of the original problem with at most the same competitive ratio",
    ", it is enough to apply our theorem to the modified problem to obtain an analogous result for the original problem .",
    "let @xmath249 be an opt - bounded symmetric problem ; then @xmath249 is described entirely by the feasible request - answer pairs ( depending on the states ) , by its set of states @xmath250 , and by costs of all request - answer pairs for all states .",
    "note that an expected @xmath2-competitive online algorithm @xmath6for @xmath249 has to have an expected competitive ratio of @xmath2 for every request - answer pair .",
    "let @xmath251 denote the cost to give @xmath252 as answer on request @xmath253 when in state @xmath105 of the problem @xmath249 .",
    "let @xmath254 be the set of all possible answers .",
    "then we define the _",
    "@xmath255-truncated _ version @xmath256 of @xmath249 as follows .",
    "let @xmath105 be a state and @xmath253 be a request ; we set @xmath257 i.e. , the minimal cost to answer @xmath253 when in state @xmath105 . in @xmath256",
    "we assign the cost @xmath258 , if @xmath259 and @xmath260 otherwise .",
    "we define all request - answer pairs of @xmath256 such that @xmath261 to have a cost of @xmath262 .",
    "both @xmath249 and @xmath256 have the same remaining feasible request - answer pairs for each state .",
    "note that any algorithm that gives an answer of cost @xmath262 with nonzero probability can not be competitive and that due to the modifications of the cost function , some distinct states of @xmath249 may become a single state of @xmath256 .",
    "we will abuse notation and ignore this fact because it does not change the proof .",
    "thus we assume that both problems have the same set of states .",
    "we continue with some insights that help us to choose useful values for @xmath263 and @xmath264 .",
    "[ claim : bounds ] given an expected @xmath2-competitive algorithm @xmath6for @xmath249 , for any @xmath265 there is a @xmath266-competitive online algorithm @xmath37for @xmath249 such that the cost @xmath251 for any @xmath252 provided by @xmath37is at most @xmath267 . furthermore",
    ", if @xmath268 , @xmath37may ignore the destination state and give a minimum cost answer greedily .    let @xmath175 be the state selected after @xmath105 by an optimal solution and let @xmath176 be the state when giving a greedy answer of cost @xmath269 .",
    "let @xmath270 , @xmath271 , and @xmath272 be the costs of the respective optimal solutions when starting from @xmath105 , @xmath175 , or @xmath176 .",
    "we first note that the optimal answer that leads from @xmath105 to @xmath175 can have a cost of at most @xmath273 as otherwise , by the opt - boundedness , choosing greedily and moving to @xmath176 would be a better solution .",
    "the sum of probabilities of @xmath6to select an answer of cost at least @xmath274 is at most @xmath275 where the parameter @xmath21 is due to the definition of the competitive ratio .",
    "otherwise the expected value would be too high if the adversary chooses to only send a single request .",
    "we set @xmath276 to satisfy the @xmath160-closeness to the expected competitiveness .",
    "we now show how to handle large values of @xmath269 . to be @xmath2-competitive",
    ", we can afford a cost of @xmath277 if we choose the first answer greedily and apply @xmath6for all remaining requests , the expected cost of the solution is at most @xmath278 therefore , if @xmath279 , the modified solution is @xmath2-competitive .",
    "the claim suggests to set @xmath280 and @xmath281 , where we chose @xmath282 . from now on @xmath256 is the @xmath255-truncated version of @xmath249 with these values of @xmath263 and @xmath264 .    as before , let @xmath6be an online algorithm for @xmath249 that computes a solution with expected competitive ratio at most @xmath2 .",
    "we design an algorithm @xmath283for @xmath256 as follows .",
    "suppose in state @xmath105 of @xmath256 , the adversary requests @xmath253 . then @xmath283simulates @xmath6 in state @xmath105 on @xmath253 within @xmath249 . if @xmath259 and the answer @xmath252 has a cost smaller than @xmath264 , the answer of @xmath284 is @xmath252 .",
    "otherwise @xmath283ignores the answer of @xmath6and answers greedily while ignoring the destination state , and performing a reset subsequently .",
    "it is clear that all answers of @xmath283are feasible for @xmath256 .",
    "we first show that the expected competitive ratio of @xmath283for @xmath256 is at most @xmath285 . for each round with @xmath286",
    ", the claim follows directly from claim  [ claim : bounds ] using that any answer in @xmath249 with cost higher than @xmath264 neither affects an optimal answer nor the algorithm s answer due to the claim . otherwise , if @xmath287 , the competitive ratio of the greedy answer is at most @xmath2 , using the same argumentation as in the proof of the second part of claim  [ claim : bounds ] .    to summarize",
    ", @xmath256 is a symmetric , opt - bounded , and request - bounded problem and @xmath283is an expected @xmath288-competitive algorithm for @xmath256 .",
    "therefore , we can apply the restricted theorem  [ thm : exptohp ] as proven in the last section with an error of @xmath289 and with @xmath283to show that there is an algorithm @xmath119 that is @xmath290-competitive for @xmath256 w.h.p .",
    "finally we show that the competitive ratio in @xmath249 for any sequence of answers on any request string can not be larger than the competitive ratio of the same sequence in @xmath256 .",
    "observe that a string of answers is optimal for @xmath249 if and only if it is optimal for @xmath256 . due to the opt - boundedness",
    ", an optimal solution can not have any answer on request @xmath253 from state @xmath105 that has a cost larger than @xmath291 in @xmath249 or larger than @xmath292 in @xmath256 .",
    "therefore the parameter @xmath264 does not influence any optimal solution in @xmath256 and it can not be an advantage to give an answer in @xmath249 that is set to a cost of @xmath262 in @xmath256 . in each time step ,",
    "the difference of the cost of any answer @xmath252 in @xmath249 and @xmath256 given any state @xmath105 and request @xmath253 is fixed to exactly @xmath293 as long as the answer has finite cost .",
    "thus , any improvement of the answer sequence in one of the problems translates to an improvement in the other one .",
    "let @xmath294 be an optimal sequence of answers and @xmath295 be the corresponding sequence of states .",
    "then it is sufficient to show that for each @xmath151 , the competitive ratio of @xmath119 for @xmath249 is at most as high as the competitive ratio for @xmath256 . for any @xmath151 ,",
    "let us fix a state @xmath105 and a request @xmath253 .",
    "let @xmath252 be the answer given by @xmath119 .",
    "then the competitive ratio in @xmath256 is @xmath296 . if @xmath286 , the cost of both the optimal answer and the algorithmic answer , and therefore also the ratio , is identical in @xmath249 and @xmath256 .",
    "otherwise , the ratio in @xmath249 is @xmath297 where the last inequality uses that any competitive ratio is at least one .",
    "we now discuss the impact of theorem  [ thm : exptohp ] on task systems , the @xmath0-server problem , and paging . despite being related , these problems have different flavors when analyzing them in the context of high probability results .",
    "finally , we show that there are also problems that do not directly fit into our framework but nevertheless allow for high probability results for specific algorithms .",
    "the properties of online problems needed for theorem  [ thm : exptohp ] are related to the definition of task systems .",
    "there are , however , some important differences .    to analyze the relation ,",
    "let us recall the definition of task systems as introduced by borodin et al .",
    "we are given a finite state space @xmath298 and a function @xmath299 that specifies the ( finite ) cost to move from one state to another .",
    "the requests given as input to a task system are a sequence of @xmath300-vectors that specify , for each state , the cost to process the current task if the system resides in that state .",
    "an online algorithm for task systems aims to find a schedule such that the overall cost for transitions and processing is minimized . from now on we will call states in @xmath298 _ system states _ to distinguish them from the states of definition  [ dfn : state ] .",
    "the main difference between states of definition  [ dfn : state ] and system states is that states and the distances between states depend on the requests provided as input and on the answers given by the online algorithm ; this way there may be infinitely many states .",
    "states are also more general than system states in that we may forbid specific state transitions .",
    "[ thm : tasksys ] let @xmath6be a randomized online algorithm with expected competitive ratio @xmath2 for task systems .",
    "then , for any @xmath301 , there is a randomized online algorithm @xmath119 for task systems with competitive ratio @xmath3 w.h.p .",
    "( with respect to the optimal cost ) .    in a task system ,",
    "the system states are exactly the states according to our definition , because the optimal future cost only depends on the current system state and a future request has the freedom to assign individual costs to each of the system states . in other words , an equivalence class @xmath105 from definition  [ dfn : state ]",
    "( i.e. , one state ) consists of exactly one unique system state . to apply theorem  [ thm : exptohp ] , we choose the constant @xmath115 of the theorem to be @xmath302 .",
    "this way , the problem is opt - bounded as one transition of cost at most @xmath115 is sufficient to move to any system state used by an optimal computation .",
    "the problem is clearly partitionable according to definition  [ dfn : partitionable ] as each round is associated with a non - negative cost .",
    "the adversary may also stop after an arbitrary request .",
    "the remaining condition of theorem  [ thm : exptohp ] that every state is initial formally conflicts with the definition of task systems , because usually there is a unique initial configuration that corresponds to a state @xmath303 .",
    "this problem is easy to circumvent by relabeling the states before each run ( reset ) of the algorithm , i.e. , we construct an algorithm @xmath304 that is used instead of @xmath117 .",
    "when starting the computation , @xmath304 determines the mapping and simulates the run of @xmath117 on the mapped instance .",
    "thus we are able to use theorem  [ thm : exptohp ] on @xmath304 and the claim follows .      the @xmath0-server problem , introduced by manasse et al .",
    "@xcite , is concerned with the movement of @xmath0 servers in a metric space .",
    "each request is a location and the algorithm has to move one of the servers to that location .",
    "if the metric space is finite , this problem is well known to be a special metrical task system .",
    "the states are all combinations of @xmath0 locations in the metric space and the distance between two states is the corresponding minimum cost to move servers such that the new locations are reached . each request is a vector where all states but those containing the correct destination have a processing time @xmath262 and the states containing the destination have processing time zero . using theorem  [ thm : tasksys ]",
    "this directly implies that all algorithms with a constant expected competitive ratio for the @xmath0-server problem in a finite metric space can be transformed into algorithms that have almost the same competitive ratio w.h.p .",
    "if the metric space is infinite , an analogous result is still valid except that we have to bound the maximum transition cost by a constant .",
    "this is the case , because the proof of theorem  [ thm : tasksys ] uses the finiteness of the state space only to ensure bounded transition costs .    without the restriction to bounded distances , in general we can not obtain a competitive ratio much better than the deterministic one w.h.p .",
    "[ thm : server ] let @xmath305 be a metric space with @xmath306 constant , @xmath307 be the initial position of all servers , @xmath308 a constant and let @xmath2 be the infimum over the competitive ratios of all deterministic online algorithms for the @xmath0-server problem in @xmath305 for instances with at most @xmath308 requests .",
    "for every @xmath301 , there is a metric space @xmath309 where for any randomized online algorithm @xmath33for the @xmath0-server problem there is an oblivious adversary against which the solution of @xmath33has a competitive ratio of at least @xmath310 with constant probability .",
    "we obtain @xmath309 as follows .",
    "the set @xmath311 is composed of copies of @xmath312 .",
    "let , for each @xmath313 , @xmath314 denote the @xmath151th copy of @xmath315 in @xmath311 together with the point @xmath105 ( i.e. , @xmath105 is in each of the sets @xmath314 ) .",
    "this way @xmath316 . for any pair of points @xmath317 with copies @xmath318 in @xmath314 ,",
    "we set @xmath319 ; we call @xmath151 the _ scaling factor _ of @xmath314 . for any @xmath320 ,",
    "the distance between points in distinct copies of @xmath315 is @xmath321 .",
    "this way @xmath309 is a metric and we can choose freely a scaling factor for the cost function @xmath28 .",
    "we now describe an adversary @xmath322that uses oblivious adversaries for deterministic online algorithms as black boxes and has two parameters @xmath91 and @xmath323 that specify lower bounds on the number of requests and the cost of the optimal offline solution .",
    "@xmath322starts with @xmath91 requests of the point @xmath105 in @xmath315 ( i.e. , the optimal cost after the first @xmath91 requests is zero ) .",
    "note that we can not assume @xmath91 to be a constant .",
    "afterwards the adversary starts a second phase where it simulates a deterministic adversary in a suitably scaled copy of @xmath315 .",
    "we assume without loss of generality that any considered algorithm is _ lazy _ , i.e. , it answers requests by only moving at most one server ( see manasse et al .",
    "we choose as scaling factor @xmath324 .",
    "@xmath322sends all subsequent requests in @xmath325 .    due to the laziness assumption , after the first @xmath91 requests there are at most @xmath326 different possibilities to answer the subsequent @xmath308 requests ( we can view an answer simply as the index of one of the @xmath0 servers ) .",
    "adding also all shorter request sequences , by the geometric series there are at most @xmath327 possible answer sequences .",
    "analogously , there are less than @xmath328 possible request sequences of length at most @xmath308 in @xmath325 .",
    "thus , the total number of algorithms behaving differently within at most @xmath308 requests is less than @xmath329 and therefore constant .",
    "@xmath322may choose one of at most @xmath330 deterministic algorithms to play against .",
    "he analyzes the probability distribution of @xmath33 s strategies after the first @xmath91 requests .",
    "then he selects one of the @xmath330 algorithms that corresponds to the strategy run by @xmath33with maximal probability . with @xmath322 s choice of the algorithm",
    ", the competitive ratio of @xmath33is at least @xmath310 with constant probability at least @xmath331 and the choice of @xmath157 ensures that the optimal cost is at least @xmath323 .",
    "if we allow the metric to be infinite , then there is no @xmath332-competitive online algorithm w.h.p .",
    "for the @xmath0-server problem for any constant @xmath123 .",
    "we simply use that the lower bound of manesse et al .",
    "@xcite satisfies the properties of theorem  [ thm : server ] .      in the paging problem",
    "there is a cache that can accommodate @xmath0 memory pages and the input consists of a sequence of requests to memory pages . if the requested page is in the cache , it can be served immediately , otherwise some page must be evicted from the cache , and be replaced by the requested page ; this process is called a _ page fault_. the aim of a paging algorithm is to generate as few page faults as possible .",
    "each request generates either cost @xmath187 ( no page fault ) or @xmath1 ( page fault ) , and the overall cost is the sum of the costs of the requests .",
    "paging can be seen as a @xmath0-server problem restricted to uniform metrics where all distances are exactly one . in particular , the transition costs in that metric are bounded .",
    "hence , the assumptions discussed in the previous subsection are fulfilled , meaning that for any paging algorithm with expected competitive ratio @xmath2 there is an algorithm with competitive ratio @xmath333 w.h.p .",
    "note that the marking algorithm is analyzed based on phases that correspond to @xmath39 distinct requests , and hence the analysis of the expected competitive ratio immediately gives the @xmath334 competitive ratio also w.h.p . however , e.g. , the optimal algorithm with competitive ratio @xmath335 due to achlioptas et al .",
    "@xcite is a distribution - based algorithm where the high probability analysis is not immediate ; theorem  [ thm : exptohp ] gives an algorithm with competitive ratio @xmath336 w.h.p .",
    "also in this case .      in section  [ sec : discussion ] we will show that none of the conditions of theorem  [ thm : exptohp ] can be omitted .",
    "however , there are problems that do not fit the assumptions of the theorem , and still can be solved almost optimally by specific randomized online algorithms with high probability .",
    "we use , however , a weaker notion of high probability than in the previous sections .    consider the problem _ job shop scheduling with unit length tasks _ ( jssfor short ) defined as follows : we are given a constant number of @xmath27 _ jobs _ @xmath337 to @xmath338 that consist of @xmath339 _ tasks _ each .",
    "each such task needs to be processed on a unique one of @xmath339 _ machines _ which are identified by their indices @xmath340 , and we want to find a schedule with the following properties . processing one task takes exactly @xmath1 time unit and , since all jobs need every machine exactly once , we may represent them as permutations @xmath341 of the machine indices , where @xmath342 for every @xmath343 and @xmath344 .",
    "all @xmath345 arrive in an online fashion , that is , the @xmath346th task of @xmath345 is not known before the @xmath0th task is processed .",
    "obviously , as long as all jobs request different machines , the work can be parallelized .",
    "if , however , at one time step , some of them ask for the same machine , all but one of them have to be delayed .",
    "the cost of a solution is given by the total time needed for all jobs to finish all tasks ; the goal is to minimize this time ( i.e. , the overall makespan ) .    in the following ,",
    "we use a graphical representation that was introduced by brucker  @xcite .",
    "let us first consider only two jobs @xmath347 and @xmath348 . consider an @xmath349-grid where we label the @xmath22-axis with @xmath347 and the @xmath350-axis with @xmath348 .",
    "the cell @xmath351 models that , in the corresponding time step , @xmath347 processes a task on machine @xmath352 while @xmath348 processes a task on @xmath353 . a feasible schedule for the induced instance of jssis a path that starts at the upper - left vertex of the grid and leads to the bottom right vertex .     and two strategies .",
    "obstacles are marked by filled cells.,width=226 ]    it may use diagonal edges whenever @xmath354 .",
    "however , if @xmath355 , both @xmath347 and @xmath348 ask for the same machine at the same time and therefore , one of them has to be delayed . in this case",
    ", we say that @xmath347 and @xmath348 collide and call the corresponding cells in the grid _ obstacles _",
    "( see fig .",
    "[ fig : jssexample ] for an example with @xmath356 ) .",
    "if an algorithm has to delay a job , we say that it _ hits an obstacle _ and may therefore not make a diagonal move , but either a horizontal or a vertical one . in the first case , @xmath348 gets delayed , in the second case , @xmath347 gets delayed .",
    "note that , since @xmath347 and @xmath348 are permutations , there is exactly one obstacle per row and exactly one obstacle per column for every instance , therefore , @xmath339 obstacles overall for any instance .",
    "the graphical representation generalizes naturally to the @xmath27-dimensional case .",
    "the problem has been studied previously , for instance in  @xcite .",
    "hromkovi et al .",
    "@xcite showed the existence of a randomized online algorithm @xmath33that achieves an expected competitive ratio of @xmath357 , for @xmath358 , assuming that it knows @xmath339 .",
    "@xmath33depends on diagonals in the grid ; intuitively ( in two or three dimensions ) , a diagonal in the grid is the sequence of integer points on a line that is parallel to the line from the coordinate @xmath359 to @xmath360 .",
    "more precisely , let @xmath83 be the convex hull of the grid .",
    "then a diagonal is a sequence of integer points @xmath361 such that @xmath362 is in the facet of @xmath249 that contains the origin @xmath359 , @xmath363 is in the facet containing the destination @xmath360 , none of the two points is in a smaller - dimensional face , and we obtain @xmath364 from @xmath365 by increasing each coordinate by exactly one . as shown by hromkovi et al .",
    "@xcite , the number of diagonals that start at points with all coordinates at most @xmath2 is exactly @xmath366 .",
    "a diagonal template @xmath125 with respect to @xmath2 and @xmath28 is a sequence of consecutive points in the grid that starts from @xmath359 , moves to @xmath362 , visits each point of @xmath28 and finally moves to the destination @xmath360 . to reach @xmath362 , @xmath125 delays each job",
    "@xmath345 by @xmath367 time units in the begining and delays each job @xmath345 by @xmath368 time units upon reaching the last point of the diagonal .",
    "thus , a schedule that follows a diagonal template without delays has a length of exactly @xmath369 . a diagonal strategy with respect to a diagonal template",
    "@xmath125 is a minimum - length schedule that visits each point of @xmath125 .",
    "note that an online algorithm has all necessary information to run a diagonal strategy , because when reaching an obstacle , all possible ways to the subsequent point are available ; an example of a diagonal strategy is depicted in fig .",
    "[ fig : jssexample ] .",
    "the randomized algorithm @xmath33fixes the value @xmath2 and chooses uniformly at random a diagonal @xmath28 with @xmath370 ; then it follows the corresponding diagonal strategy .    for any @xmath371",
    "there is an online algorithm for jssthat is @xmath372-competitive with probability @xmath373 , for any @xmath374 .",
    "we already mentioned that @xmath33chooses one of @xmath366 diagonals .",
    "it is also known that the total number of delays in all diagonal strategies caused by obstacles is at most @xmath375 @xcite .",
    "clearly , any schedule has a length of at least @xmath339 .",
    "thus , in order to be @xmath372-competitive , we need a diagonal strategy such that @xmath376 , where @xmath28 is the number of delays due to obstacles .",
    "let @xmath71 be the number of diagonals considered by the algorithm such that the corresponding diagonal strategies have more than @xmath377 delays caused by obstacles . then",
    ", to show our claim , we have to ensure that @xmath378 .",
    "the value of @xmath71 is maximized if we assume that any diagonal has either no obstacles or the delay is exactly @xmath379 .",
    "therefore , @xmath380 since the dimension @xmath27 is a constant , the claim follows from @xmath381",
    "as mentioned above , our result holds with large generality as many well - studied online problems meet the requirements we imposed .",
    "however , the assumptions of theorem  [ thm : exptohp ] require that the problem at hand    1 .   is partitionable , 2",
    ".   every state is equivalent to some initial state , and [ enum : init ] 3 .",
    "@xmath382 [ enum : optb ]    as stated before , partitionability is not restrictive ; every problem can be presented as a partitionable one .",
    "we now show that removing any of the conditions [ enum : init ] and [ enum : optb ] allows for a counterexample to the theorem . for the purpose of this discussion ,",
    "let @xmath105 and @xmath175 in condition  [ enum : optb ] range over all _ initial _ states to have it defined also for non - symmetric problems .",
    "first , let us consider the following online problem where condition [ enum : init ] is violated , i.e. , where not every state is equivalent to some initial state .",
    "there are @xmath383 requests @xmath384 .",
    "the request @xmath385 is a dummy request .",
    "the request @xmath386 is a test : if @xmath387 the test is _ passed _",
    ", otherwise the test is _ failed _ ; the cost of @xmath388 and @xmath389 is always zero . for the remaining requests @xmath84 we have @xmath390",
    "the cost of @xmath15 , for @xmath391 , is @xmath1 if the test has been passed , or if @xmath392 .",
    "otherwise , the cost of @xmath15 is @xmath393 .",
    "the cost of @xmath394 is zero .",
    "the problem is clearly partitionable .",
    "there are six states : the initial state , then two possible states to guess the test , then one state for processing all requests with the test passed , and two states for processing requests with the test failed , based on the value of the previous answer . from any state , however , the optimal value of the remaining sequence of @xmath339 requests is between @xmath339 and @xmath395 . a randomized online algorithm that guesses each time independently has probability @xmath58 to pass the test incurring a cost of @xmath27 , and probability @xmath58 to fail , in which case , for any subsequent request",
    ", it pays 1 with probability @xmath58 , and @xmath393 with probability @xmath58 . putting everything together",
    ", the expected cost is @xmath396 , so @xmath397 . on the other hand , for any randomized algorithm",
    ", there is an input for which it has probability at least @xmath58 of failing the test , and then on each request probability at least @xmath58 of a wrong guess . from symmetry arguments we conclude that , once the test is failed , the probability that the algorithm makes at least @xmath398 wrong guesses is at least @xmath58 .",
    "hence , with probability at least @xmath399 the cost of the algorithm is at least @xmath400 , so it can not be @xmath153-competitive w.h.p . for any @xmath401 .",
    "next , let us remove condition  [ enum : optb ] .",
    "we have seen a hint to the necessity in theorem  [ thm : server ] , but currently no randomized online algorithm for the @xmath0-server problem is known to have a competitive ratio better than @xmath402 independent of the size of the metric space . therefore we give a second unconditional argument .",
    "let us consider the following problem : the states are pairs @xmath403 where @xmath404 , @xmath405 , and any state can be an initial one .",
    "processing the request @xmath406 in state @xmath403 produces the answer @xmath407 ; the cost of @xmath15 is @xmath408 if @xmath409 , and @xmath410 if @xmath411 .",
    "after processing the request , the new state is @xmath412 .",
    "it is easy to verify that the problem is partitionable and that the states are in accord with definition  [ dfn : state ] . also , it is easy to check that the worst - case expected ratio of the algorithm that produces random answers is @xmath48 . on the other hand ,",
    "consider inputs that start from state @xmath413 with @xmath414 .",
    "the optimal cost is @xmath415 , however , any randomized algorithm has probability at least @xmath399 of incurring cost @xmath416 ( by failing the two last requests ) .",
    "our result opens several new questions .",
    "for instance , our results , so far , are only shown for minimization problems . also note that our analysis does not hold for the notion of _ strict _ competitiveness ( i.e. , @xmath25 ) for arbitrary input sizes .",
    "furthermore , the assumption that all input strings are feasible for all states ( implied by the opt - boundedness ) may allow for relaxations .    until now , we only focused on upper bounds on the competitive ratio . our results , however , also open a potential lower bound technique : if a problem satisfies our requirements , a lower bound w.h.p .",
    "implies a lower bound of almost the same quality in expectation . in this context",
    "it is natural to ask for the requirements of problems for a complementary result .",
    "how can we determine the class of problems such that each algorithm that is @xmath2-competitive w.h.p . can be transformed into an algorithm that is almost @xmath2-competitive in expectation ?    finally , we would like to suggest the terminology to call a randomized online algorithm @xmath6__totally _ _ @xmath2-competitive if , for any positive constant @xmath123 , @xmath6is @xmath153-competitive in expectation and we may use theorem  [ thm : exptohp ] to construct an online algorithm that is @xmath417-competitive w.h.p .",
    "analogously , an online problem is totally @xmath153-competitive if it admits a totally @xmath2-competitive algorithm .",
    "10 k.  azuma .",
    "weighted sums of certain dependent random variables .",
    "_ thoku mathematical journal _ , 19(3):357367 , 1967 .",
    "d.  achlioptas , m.  chrobak , and j.  noga .",
    "competitive analysis of randomized paging algorithms .",
    "_ theoretical computer science _ , 234(1 - 2):203218 , 2000 .",
    "bckenhauer , d.  komm , r.  krlovi , r.  krlovi , and t.  mmke . on the advice complexity of online problems . in _ proc .  of the 20th international symposium on algorithms and computation ( isaac  2009 ) _ , _ lncs _ 5878 , pp",
    ".  331340 .",
    "springer - verlag , 2009 .",
    "a.  borodin and r.  el - yaniv .",
    "_ online computation and competitive analysis_. cambridge university press , 1998 .",
    "a.  borodin , n.  linial , and m.  e.  saks .",
    "an optimal on - line algorithm for metrical task system .",
    "_ journal of the acm _",
    ", 39(4):745763 , 1992 .",
    "p.  brucker .",
    "an efficient algorithm for the job - shop problem with two jobs . _ computing _ , 40(4):353359 , 1988 .",
    "a.  fiat , r.  m.  karp , m.  luby , l.  a.  mcgeoch , d.  d.  sleator , and n.  e.  young .",
    "competitive paging algorithms . _",
    "journal of algorithms _",
    ", 12(4):685699 , 1991 . w.  hoeffding .",
    "probability inequalities for sums of bounded random variables .",
    "_ journal of the american statistical association _",
    ", 58(301):1330 , 1963 . j.  hromkovi . _ design and analysis of randomized algorithms_. springer - verlag , berlin , 2005",
    ". j.  hromkovi , t.  mmke , k.  steinhfel , and p.  widmayer .",
    "job shop scheduling with unit length tasks : bounds and algorithms . _ algorithmic operations research _",
    ", 2(1):114 , 2007 . s.  irani and a.  r.  karlin . on online computation .",
    "approximation algorithms for @xmath418-hard problems , chapter 13 _ , pp .  521564 .",
    "pws publishing company , 1997 .",
    "d.  komm and r.  krlovi .",
    "advice complexity and barely random algorithms . in _ proc .  of the 37th international conference on current trends in theory and practice of computer science ( sofsem  2011 ) _ , _ lncs _ 6543 , pp .",
    "springer - verlag , 2011 .",
    "e.  koutsoupias .",
    "the @xmath0-server problem .",
    "_ computer science review _ , 3(2):105118 , 2009 . s.  leonardi , a.  marchetti - spaccamela , a.  presciutti , and a.  rosn . on - line",
    "randomized call control revisited .",
    "_ siam journal on computing _",
    ", 31(1):86112 , 2001 . b.  m.  maggs , f.  meyer auf der heide , b.  voecking , and m.  westermann . exploiting locality for networks of limited bandwidth . in _ proc .  of the 38th ieee symposium on foundations of computer science ( focs  1997 ) _ , pp",
    "284293 , 1997 . m. s. manasse , l. a. mcgeoch , and d. d. sleator .",
    "competitive algorithms for on - line problems .",
    "_ journal of algorithms _",
    ", 11(2):208230 , 1990 .",
    "d.  d.  sleator and r.  e.  tarjan . amortized efficiency of list update and paging rules .",
    "_ communications of the acm _ , 28(2):202208 , 1985 ."
  ],
  "abstract_text": [
    "<S> we study the relationship between the competitive ratio and the tail distribution of randomized online minimization problems . to this end </S>",
    "<S> , we define a broad class of online problems that includes some of the well - studied problems like paging , @xmath0-server and metrical task systems on finite metrics , and show that for these problems it is possible to obtain , given an algorithm with constant expected competitive ratio , another algorithm that achieves the same solution quality up to an arbitrarily small constant error a with high probability ; the `` high probability '' statement is in terms of the optimal cost . </S>",
    "<S> furthermore , we show that our assumptions are tight in the sense that removing any of them allows for a counterexample to the theorem . </S>",
    "<S> in addition , there are examples of other problems not covered by our definition , where similar high probability results can be obtained . </S>"
  ]
}