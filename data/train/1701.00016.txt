{
  "article_text": [
    "what do document clustering , recommender systems , and audio signal processing have in common ?",
    "all of them are problems that involve finding patterns buried in noisy data . as a result , these three problems are common applications of algorithms that solve non - negative matrix factorization , or nmf @xcite .",
    "non - negative matrix factorization involves factoring some matrix @xmath0 , usually large and sparse , into two factors @xmath1 and @xmath2 , usually of low rank @xmath3 because all of the entries in @xmath0 , @xmath1 , and @xmath2 must be non - negative , and because of the imposition of low rank on @xmath1 and @xmath2 , an exact factorization rarely exists .",
    "thus nmf algorithms often seek an approximate factorization , where @xmath4 is close to @xmath0 . despite the imprecision , however , the low rank of @xmath1 and @xmath2 forces the solution to describe @xmath0 using fewer parameters , which tends to find underlying patterns in @xmath0 .",
    "these underlying patterns are what make nmf of interest to a wide range of applications .    in the decades since nmf was introduced by seung and lee @xcite , a variety of algorithms have been published that compute nmf @xcite .",
    "however , the non - deterministic nature of these nmf algorithms make them difficult to test .",
    "first , nmf asks for approximations rather than exact solutions , so whether or not an output is correct is somewhat subjective .",
    "although cost functions can quantitatively indicate how close a given solution is to being optimal , most algorithms do not claim to find the globally optimal solution , so whether or not an algorithm gives useful solutions can be ambiguous .",
    "secondly , all of the algorithms produced so far are stochastic algorithms , so running the algorithm on the same input multiple times can give different outputs if they use different random number sequences .",
    "thirdly , the algorithms themselves , though often simple to implement , can have very complex behavior that is difficult to understand . as a result",
    ", it can be hard to determine whether a proposed algorithm really `` solves '' nmf .",
    "this paper proposes some test cases that nmf algorithms should solve verifiably .",
    "the approach uses very simple input , such as matrices that have exact non - negative factorizations , that reduce the space of possible solutions and ensure that the algorithm finds correct patterns with little noise .",
    "in addition , small perturbations of these simple matrices are also used , to ensure that small variations in the matrix @xmath0 do not drastically change the generated solution .",
    "suppose nmf is applied to a non - negative matrix @xmath0 to get non - negative matrices @xmath1 and @xmath2 such that @xmath6 . if @xmath0 is chosen to have an exact non - negative factorization , then the optimal solution satisfies @xmath7 .",
    "furthermore , if @xmath0 is simple enough , most `` good '' nmf algorithms will find the exact solution .",
    "for example , suppose @xmath8 is a non - negative square diagonal matrix , and the output @xmath9 and @xmath10 is also specified to be square .",
    "let the diagonal @xmath11 matrix @xmath8 be denoted @xmath12 , where @xmath13 is an @xmath14-dimensional vector , so that the diagonal entries @xmath15 are @xmath16 .",
    "it is easy to show that @xmath9 and @xmath10 must be monomial matrices ( diagonal matrices under a permutation ) @xcite . ignoring the permutation and similarly denoting @xmath17 and @xmath18 , then @xmath19 for applicable @xmath20 .",
    "such diagonal matrices @xmath8 were given as input to the known nmf algorithms described in the next section , and all of the algorithms successfully found exact solutions in the form of monomial matrices for @xmath9 and @xmath10 .",
    "one way to analyze the properties of an algorithm is to perturb the input by a small amount @xmath21 and see how the output changes .",
    "formally , if the input @xmath8 gives output @xmath22 , then the output generated from @xmath23 can be approximated as @xmath24 .",
    "it is assumed that @xmath5 is sufficiently small that @xmath25 terms are negligible .    for the test case ,",
    "the nonzero entries of @xmath26 were chosen to be the on the superdiagonal ( the first diagonal directly above the main diagonal ) .",
    "this matrix is denoted as @xmath27 , where @xmath28 is an @xmath29-dimensional vector such that @xmath30 .",
    "the resulting matrix @xmath23 has @xmath31 entries on its main diagonal , @xmath32 entries on the superdiagonal , and zeroes elsewhere .",
    "it is assumed that all the vector entries @xmath16 and @xmath33 are of comparable magnitude .",
    "three published nmf algorithms were implemented and run with input of the form @xmath34 as described above .",
    "algorithm 1 was the multiplicative update algorithm described by seung and lee in their groundbreaking paper @xcite , which was run for @xmath35 iterations in each test .",
    "algorithm 2 was the als algorithm described in @xcite , and which was run for @xmath35 iterations as well .",
    "algorithm 3 was a gradient descent method as described by guan and tao @xcite , and was run for @xmath36 iterations .",
    "these three algorithms were chosen because they were representative and easy - to - implement algorithms of three distinct types .",
    "many published nmf algorithms are variations of these three algorithms .",
    "the experiments began with the simplest nontrivial case , in which @xmath0 is a @xmath37 matrix with only three nonzero entries , with fixed @xmath38 $ ] and @xmath39 $ ] , while @xmath5 was varied over several different values .",
    "each of the algorithms used randomness in the form of initial seed values for @xmath1 and @xmath2 .",
    "the random seeds were held constant as @xmath5 varied . as a result ,",
    "the outputs from the algorithms with different values of @xmath5 were comparable within each test case .    for the @xmath37 case",
    ", it is possible to enumerate all of the non - negative exact factorizations of @xmath0 . given that the factors @xmath1 and @xmath2 are also @xmath37 matrices , they can be written as shown below .",
    "@xmath40 \\left [ \\begin{array}{cc } r & s \\\\ t & u \\end{array } \\right ] = \\left [ \\begin{array}{cc } 1 & \\epsilon \\\\ & 1 \\end{array } \\right]\\ ] ] multiplying the matrices directly produces the the following four equations : @xmath41 recall that all entries must be non - negative , so from equation ( 5 ) , either @xmath42 or @xmath43 must be 0 , and either @xmath44 or @xmath45 must be 0 .",
    "furthermore , it can not be that @xmath46 because that would contradict equation ( 6 ) , and it can not be that @xmath47 because that would contradict equation ( 3 ) .",
    "thus two cases remain : @xmath48 and @xmath49 .",
    "substituting @xmath48 into equations ( 3 ) , ( 4 ) , and ( 6 ) and solving for @xmath43 , @xmath50 , and @xmath51 gives @xmath52 likewise , substituting @xmath49 into ( 3 ) , ( 4 ) , and ( 6 ) and solving for @xmath50 , @xmath45 , and @xmath51 to gives @xmath53 observe that these two solutions look similar .",
    "in fact , they differ merely by a permutation . in the first case ,",
    "@xmath1 and @xmath2 have the same main diagonal and superdiagonal format as @xmath0 , and can be written in matrix notation as @xmath54 \\left [ \\begin{array}{cc } \\frac{1}{\\mathbf{w}_0(1 ) } & \\frac{1}{\\mathbf{w}_0(1)}(\\epsilon - \\frac{\\mathbf{w}_1(1)}{\\mathbf{w}_0(2 ) } ) \\\\ & \\frac{1}{\\mathbf{w}_0(2 ) } \\end{array } \\right]\\ ] ] the second case can be written as @xmath55 , where @xmath56 is the permutation matrix @xmath57 $ ] .",
    "all three of the algorithms tested gave solutions of this form 1000 times out of 1000 , for each of several values of @xmath5 .",
    "the consistency of the solutions enabled further analysis .",
    "the change in the solution can be measured by the change in the three parameters @xmath58 , @xmath59 , and @xmath60 ( ignoring the permutation if present ) .",
    "figure 1 shows the change in each of the three parameters from the base case @xmath8 for several different values of @xmath5 when input into algorithm 1 .",
    "each of the values is the arithmetic mean of the corresponding values generated from 1000 different random seeds .    .",
    "as @xmath5 approaches zero on the right of the graph , the values of the slopes converge , showing that for sufficiently small @xmath5 , each of the parameters is linear in @xmath5 . ]    of course , the precise values depend on the distribution of randomness used .",
    "but notice that as @xmath5 approaches 0 , the values of the three parameters become very nearly linear in @xmath5 .",
    "the results for algorithms 2 and 3 were very similar - they also showed linearity of the parameters in @xmath5 , with comparable slopes .",
    "however , @xmath60 was not always linear in @xmath5 , even for small @xmath5 . in some cases , the difference approached 0 much more quickly . to see why this occurred ,",
    "consider that the entries in @xmath2 could have been chosen to be the parameters rather than the entries in @xmath1 . also , recall that in the base case @xmath8 , in which @xmath61 , @xmath62 since both entries are off the diagonal .",
    "thus , when either is linear in @xmath5 , they are of the form @xmath63 for some slope @xmath64 . since the solution is exact , it can be deduced that @xmath65 therefore , in the cases that @xmath60 approaches 0 very quickly , since @xmath58 approaches a large , stable value as @xmath5 approaches 0 , @xmath66 must be nearly linear in @xmath5 .",
    "so in the cases that @xmath60 is not linear in @xmath5 , its symmetrical counterpart , @xmath66 , is . to simplify this complication out of the data , the parameters in @xmath1",
    "were chosen when @xmath60 was closer to linearity in @xmath5 , and the parameters in @xmath2 were chosen when @xmath66 was closer to linearity in @xmath5 .    curiously , although it was possible for @xmath60 and @xmath66 to `` split '' the nonlinearity so that both were somewhat linear , this rarely occurred .",
    "all three algorithms preferred to make one of them very close to linear at the expense of the other .",
    "when @xmath60 approached zero very rapidly , by equations ( 3 ) and ( 4 ) , @xmath67 , and similarly , when @xmath66 is negligible , @xmath68 .",
    "next , different values for the entries of @xmath13 and @xmath28 were tried , so they had a range of entries rather than all 1 s . the algorithms all behaved similarly ; up to permutation , they satisfied the following formula @xmath54 \\left [ \\begin{array}{cc } \\frac{\\mathbf{a}_0(1)}{\\mathbf{w}_0(1 ) } & \\frac{\\mathbf{a}_1(1)}{\\mathbf{w}_0(1)}(\\epsilon - \\frac{\\mathbf{w}_1(1)\\mathbf{a}_0(2)}{\\mathbf{a}_1(1)\\mathbf{w}_0(2 ) } ) \\\\ & \\frac{\\mathbf{a}_0(2)}{\\mathbf{w}_0(2 ) } \\end{array } \\right]\\ ] ] note that equation ( 9 ) is just a special case of this equation in which @xmath69 .",
    "the same phenomena was also observed in which the algorithm usually made one of @xmath60 and @xmath66 be nearly linear in @xmath5 and the other approach zero rapidly , rather than having both entries be non - negligible .",
    "as long as the entries of @xmath13 and @xmath28 are roughly on the order of 1 , the algorithms operated similarly .",
    "the next case examined set @xmath0 to be a @xmath70 matrix .",
    "using similar logic to the @xmath37 case , it can be deduced that any exact factorization of @xmath0 is likely to be of the form @xmath71 \\left [ \\begin{array}{ccc } \\mathbf{h}_0(1 ) & \\mathbf{h}_1(1 ) & \\\\ & \\mathbf{h}_0(2 ) & \\mathbf{h}_1(2 ) \\\\ & & \\mathbf{h}_0(3 ) \\end{array } \\right]\\ ] ] indeed , all three algorithms always gave solutions of this form .",
    "in fact , most of the time there were two more zero entries than necessary - either @xmath60 or @xmath66 , and either @xmath72 or @xmath73 .",
    "this is similar to the way that @xmath60 or @xmath66 often approached 0 rapidly in the @xmath37 case . to note another similarity to the @xmath37 case ,",
    "whenever @xmath74 was significant and @xmath75 was not , @xmath74 was very close to @xmath76 - in similar situations @xmath75 was approximately @xmath77 .    as a result , there were 4 distinct configurations of the nonzero elements in the solutions , as given by figure 2 .",
    "[ cols=\"^,^\",options=\"header \" , ]     note that type iv appears to be an inexact solution ; since it has positive @xmath60 and @xmath73 , the entry at position @xmath78 in the product @xmath79 would have to be nonzero .",
    "however , both @xmath60 and @xmath73 , like all entries on the superdiagonal , are @xmath80 , so @xmath81 is @xmath82 , and is considered negligible .",
    "in fact , most of the solutions generated by the algorithms had nonzero values for entries that were supposed to be zero , but for this analysis anything below @xmath82 was considered negligible .",
    "each algorithm was run 100 times on the @xmath70 input with @xmath83 $ ] , @xmath84 $ ] , and @xmath85 .",
    "the solutions were categorized by the solution type in figure 2 .",
    "the distributions of the solutions by algorithm type are given in figure 2 .",
    "note that some solutions did not have two negligible entries among @xmath60 , @xmath72 , @xmath66 , and @xmath73 , in which case the smaller entry was ignored for the sake of sorting - this accounted for about 20% of the three algorithms , the majority occurring in algorithm 1 .",
    "being a @xmath70 matrix by where the non - negligible entries in the solution were .",
    "this chart shows how often each algorithm generated a solution of each type out of 100 cases .",
    "type ii ( in which @xmath2 is diagonal ) was the most common among all the algorithms , but by differing amounts . ]",
    "it is significant to note that even the solutions that did nt fall cleanly into a `` type '' still satisfied the pattern given in ( 12 ) .",
    "it seems that an nmf algorithm should satisfy this pattern , but little more is required .",
    "next , entries in @xmath13 and @xmath28 , were changed as in the @xmath37 case .",
    "as long as the entries were @xmath31 ( as opposed to @xmath80 or @xmath86 ) , the behavior of the algorithms was similar .",
    "finally , @xmath0 larger than @xmath70 were examined .",
    "several different sizes of matrices were tested , ranging from @xmath87 to @xmath88 , always keeping @xmath0 , @xmath1 , and @xmath2 square , with positive entries only on the main diagonal and the superdiagonal .",
    "the experiments followed the same general pattern ; nonzero entries in @xmath1 and @xmath2 appeared only on the main diagonal and superdiagonal . using similar logic to the @xmath37 and @xmath70 cases , it can be shown that these are the only exact solutions . however , in practice , as the matrices get larger , exceptions to this pattern become more common , particularly in algorithm 3 .",
    "the general rule seems to mostly hold ( over half the time ) until @xmath0 becomes around @xmath88 .",
    "note , however , that because the run - time of the algorithms are cubic in the size of the matrix , at best , the sample size for large matrices is small .",
    "since all three algorithms , which cover a variety of approaches to nmf , had a lot in common in their solutions , it is propose that these inputs @xmath0 could be used as a test case of an nmf algorithm implementation . in this section , it is proposed how such test cases could be executed .",
    "the test begins with input of the form @xmath89 @xmath0 is square , and preferably somewhere between @xmath70 and @xmath90 in size , although bigger inputs may be useful as well .",
    "the entries should vary between tests .",
    "each test should start by using @xmath61 so that @xmath0 is diagonal .",
    "the results of this test should have @xmath1 and @xmath2 monomial - only one nonzero element in each row and column .",
    "ignore entries that are below @xmath91 , for the entirety of testing , as any such entries are negligible .",
    "if @xmath1 or @xmath2 is not monomial , or if the product @xmath4 is not equal to @xmath0 to within a negligible margin of error , the algorithm fails the test . otherwise , the generated solution can be used to find the permutation matrix @xmath56 that makes @xmath92 and @xmath93 diagonal by replacing the nonzero entries of @xmath2 with 1 s .",
    "since @xmath7 is diagonal , @xmath92 is also diagonal , and since @xmath94 is diagonal , so is @xmath93 . knowing @xmath56 will make the rest of the testing much simpler since it is easier to identify whether a solution is of the form given above when it is not permuted .",
    "next , run the test again using a positive value for @xmath5 ; @xmath85 seems to work well , although using a variety of @xmath5 is also recommended .",
    "make sure to use the same random seeds that were used in the @xmath61 test to produce corresponding output . then check that the @xmath1 and @xmath2 given by the algorithm are such that @xmath92 and @xmath93",
    "have nonzero entries only on the two diagonals that they are supposed to .",
    "if this does nt hold , changing @xmath5 might have changed which permutation returns @xmath1 and @xmath2 to the proper form , so check again ; this happens more commonly among larger matrices than smaller ones .",
    "however , if @xmath1 and @xmath2 really do break the form , or @xmath95 , the algorithm fails the test on this input .",
    "otherwise , it passes .",
    "note that even widely accepted algorithms do fail these tests occasionally , especially with matrices larger than @xmath90 , so it s advisable to perform the test many times to get a more accurate idea of an algorithm s performance .",
    "this paper proposes an approach to the problem of testing nmf algorithms by running the algorithms on simple input that can produce an exact non - negative factorization , and perturbations of such input .",
    "in particular , square matrices with @xmath31 entries on the main diagonal and @xmath96 entries on the superdiagonal are proposed , because they have exact solutions that can enumerated mathematically , or because they are perturbations of matrices with exact solutions .",
    "the test cases have been used as input on three known nmf algorithms that represent a variety of algorithms , and all of them behaved similarly , which suggests testable , quantifiable behaviors that many nmf algorithms share .",
    "these test cases offer one approach for testing candidate nmf implentations to help determine whether it behaves as it should .",
    "the authors would like to thank dr .",
    "alan edelman for providing and overseeing this research opportunity , and dr .",
    "vijay gadepally for his advice and expertise .",
    "rainer gemulla , erik nijkamp , peter  j. haas , and yannis sismanis , _ large - scale matrix factorization with distributed stochastic gradient descent _ , proceedings of the 17th acm sigkdd international conference on knowledge discovery and data mining ( new york , ny , usa ) , kdd 11 , acm , 2011 , pp .",
    "6977 .",
    "daniel  d. lee and h.  sebastian seung , _ algorithms for non - negative matrix factorization _ , advances in neural information processing systems 13 ( t.  k. leen , t.  g. dietterich , and v.  tresp , eds . ) , mit press , 2001 , pp",
    ".  556562 .",
    "suvrit sra and inderjit  s. dhillon , _ generalized nonnegative matrix approximations with bregman divergences _ , advances in neural information processing systems 18 ( y.  weiss , b.  schlkopf , and j.  c. platt , eds . ) , mit press , 2006 , pp .  283290 .",
    "wenwu wang , _ instantaneous vs. convolutive non - negative matrix factorization : models , algorithms and applications _",
    ", machine audition : principles , algorithms and systems : principles , algorithms and systems ( 2010 ) , 353 ."
  ],
  "abstract_text": [
    "<S> non - negative matrix factorization ( nmf ) is a problem with many applications , ranging from facial recognition to document clustering . </S>",
    "<S> however , due to the variety of algorithms that solve nmf , the randomness involved in these algorithms , and the somewhat subjective nature of the problem , there is no clear `` correct answer '' to any particular nmf problem , and as a result , it can be hard to test new algorithms . </S>",
    "<S> this paper suggests some test cases for nmf algorithms derived from matrices with enumerable exact non - negative factorizations and perturbations of these matrices . </S>",
    "<S> three algorithms using widely divergent approaches to nmf all give similar solutions over these test cases , suggesting that these test cases could be used as test cases for implementations of these existing nmf algorithms as well as potentially new nmf algorithms . </S>",
    "<S> this paper also describes how the proposed test cases could be used in practice . </S>"
  ]
}