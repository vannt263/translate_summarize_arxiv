{
  "article_text": [
    "the two central questions addressed in this paper are the following . given regular expressions @xmath0 over an alphabet @xmath1 ,    1 .   what is the complexity of constructing a regular expression @xmath2 defining @xmath3 , that is , the complement of @xmath4 ?",
    "2 .   what is the complexity of constructing a regular expression @xmath5 defining @xmath6 ?    in both cases , the naive algorithm takes time double exponential in the size of the input .",
    "indeed , for the complement , transform @xmath4 to an nfa and determinize it ( first exponential step ) , complement it and translate back to a regular expression ( second exponential step ) . for the intersection there is a similar algorithm through a translation to nfas , taking the crossproduct and a retranslation to a regular expression .",
    "note that both algorithms do not only take double exponential time but also result in a regular expression of double exponential size . in this paper",
    ", we exhibit classes of regular expressions for which this double exponential size increase can not be avoided . furthermore ,",
    "when the number @xmath7 of regular expressions is fixed , @xmath5 can be constructed in exponential time and we prove a matching lower bound for the size increase .",
    "in addition , we consider the fragments of one - unambiguous and single - occurrence regular expressions relevant to xml schema languages  @xcite .",
    "our main results are summarized in table  [ tab : overview ] .",
    "the main technical part of the paper is centered around the generalization of a result by ehrenfeucht and zeiger  @xcite .",
    "they exhibit a class of languages @xmath8 each of which can be accepted by a dfa of size @xmath9 but can not be defined by a regular expression of size smaller than @xmath10 .",
    "the most direct way to define @xmath11 is by the dfa that accepts it : the dfa is a graph consisting of @xmath12 states , labeled 0 to @xmath13 , which are fully connected and the edge between state @xmath14 and @xmath15 carries the label @xmath16 .",
    "it now accepts all paths in the graph , that is , all strings of the form @xmath17 .",
    "note that the alphabet over which @xmath11 is defined grows quadratically with @xmath12 .",
    "we generalize their result to a four - letter alphabet .",
    "in particular , we define @xmath18 as the binary encoding of @xmath11 using a suitable encoding for @xmath16 and prove that every regular expression defining @xmath18 should be at least of size @xmath19 .",
    "as integers are encoded in binary the complement and intersection of regular expressions can now be used to separately encode @xmath20 ( and slight variations thereof ) leading to the desired results . in @xcite the same generalization as obtained here is attributed to waizenegger  @xcite .",
    "unfortunately , we believe that proof to be incorrect as we discuss in the full version of this paper . although the succinctness of various automata models have been investigated in depth  @xcite and more recently those of logics over ( unary alphabet ) strings  @xcite , the succinctness of regular expressions has hardly been addressed . for the complement of a regular expression an exponential lower bound",
    "is given by ellul et al  @xcite .",
    "for the intersection of an arbitrary number of regular expressions petersen gave an exponential lower bound  @xcite , while ellul et al  @xcite mention a quadratic lower bound for the intersection of two regular expressions . in fact , in @xcite , it is explicitly asked what the maximum achievable blow - up is for the complement of one and the intersection of two regular expressions ( open problems 4 and 5 ) .",
    "although we do not answer these questions in the most precise way , our lower bounds improve the existing ones by one exponential and are tight in the sense that the target expression can be constructed in the time class matching the space complexity of the lower bounds .",
    "succinctness of complement and intersection relate to the succinctness of semi - extended ( ) and extended regular expressions ( ) .",
    "these are regular expressions augmented with intersection and both complement and intersection operators , respectively .",
    "their membership problem has been extensively studied @xcite .",
    "furthermore , non - emptiness and equivalence of is non - elementary @xcite . for , inequivalence is -complete @xcite , and non - emptiness is -complete @xcite even when restricted to the intersection of a ( non - constant ) number of regular expressions @xcite .",
    "several of these papers hint upon the succinctness of the intersection operator and provide dedicated techniques in dealing with the new operator directly rather than through a translation to ordinary regular expressions  @xcite .",
    "our results present a double exponential lower bound in translating to and therefore justify even more the development for specialized techniques .",
    "a final motivation for this research stems from its application in the emerging area of xml - theory  @xcite . from a formal language viewpoint ,",
    "xml documents can be seen as labeled unranked trees and collections of these documents are defined by schemas .",
    "a schema can take various forms , but the most common ones are document type definitions ( dtds )  @xcite and xml schema definitions ( xsds )  @xcite which are grammar based formalisms with regular expressions at right - hand sides of rules  @xcite .",
    "many questions concerning schemas reduce to corresponding questions on the classes of regular expressions used as right - hand sides of rules as is exemplified for the basic decision problems studied in @xcite and @xcite .",
    "furthermore , the lower bounds presented here are utilized in  @xcite to prove , among other things , lower bounds on the succinctness of existential and universal pattern - based schemas on the one hand , and single - type edtds ( a formalization of xsds ) and dtds , on the other hand . as the dtd and xml schema specification require regular expressions occurring in rules to be _",
    ", formalized by brggemann - klein and wood in terms of one - unambiguous regular expressions  @xcite , we also investigate the complement and intersection of those .",
    "in particular , we show that a one - unambiguous regular expressions can be complemented in polynomial time , whereas the lower bounds concerning intersection carry over from unrestricted regular expressions .",
    "a study in @xcite reveals that most of the one - unambiguous regular expression used in practice take a very simple form : every alphabet symbol occurs at most once .",
    "we refer to those as single - occurrence regular expressions ( sores ) and show a tight exponential lower bound for intersection .",
    ".overview of the size increase for the various operators and subclasses .",
    "all non - polynomial complexities are tight . [ cols=\"<,^,^,^\",options=\"header \" , ]     * outline . * in section  2",
    ", we introduce the necessary notions concerning ( one - unambiguous ) regular expressions and automata . in section  3",
    ", we extend the result by ehrenfeucht and zeiger to a fixed alphabet using the family of languages @xmath21 . in section  4",
    ", we consider the succinctness of complement . in section  5",
    ", we consider the succinctness of intersection of several classes of regular expressions . we conclude in section  6 .",
    "a version of this paper containing all proofs is available from the authors webpages .",
    "by @xmath22 we denote the natural numbers without zero . for the rest of the paper , @xmath1 always denotes a finite alphabet . a _ @xmath1-string _ ( or simply string ) is a finite sequence @xmath23 of @xmath1-symbols .",
    "we define the length of @xmath24 , denoted by @xmath25 , to be @xmath12 .",
    "we denote the empty string by @xmath26 .",
    "the set of _ positions of @xmath24 _ is @xmath27 and the _ symbol of @xmath24 at position @xmath14 _ is @xmath28 . by @xmath29",
    "we denote the _ concatenation _ of two strings @xmath30 and @xmath31 . as usual , for readability , we denote the concatenation of @xmath30 and @xmath31 by @xmath32 .",
    "the set of all strings is denoted by @xmath33 and the set of all non - empty strings by @xmath34 .",
    "a _ string language _ is a subset of @xmath33 . for two string languages @xmath35",
    ", we define their concatenation @xmath36 to be the set @xmath37 .",
    "we abbreviate @xmath38 ( @xmath14 times ) by @xmath39 .",
    "the set of _ regular expressions _ over @xmath1 , denoted by , is defined in the usual way : @xmath40 , @xmath26 , and every @xmath1-symbol is a regular expression ; and when @xmath41 and @xmath42 are regular expressions , then @xmath43 , @xmath44 , and @xmath45 are also regular expressions .    by @xmath46",
    "we denote the class of _ extended regular expressions _ , that is , extended with intersection and complementation operators .",
    "so , when @xmath41 and @xmath42 are -expressions then so are @xmath47 and @xmath48 . by and we denote re extended solely with the intersection and complement operator , respectively .    the language defined by an extended regular expression @xmath4 , denoted by @xmath49 , is inductively defined as follows : @xmath50 ; @xmath51 ; @xmath52 ; @xmath53 ; @xmath54 ; @xmath55 ; @xmath56 ; and @xmath57 .    by @xmath58 , and @xmath59 , with @xmath60 , we abbreviate the expression @xmath61 , and @xmath62 ( @xmath7-times ) , respectively . for a set @xmath63 , we abbreviate by @xmath64 the regular expression @xmath65 .",
    "we define the _ size _ of an extended regular expression @xmath4 over @xmath1 , denoted by @xmath66 , as the number of @xmath1-symbols and operators occurring in @xmath4 disregarding parentheses .",
    "this is equivalent to the length of its ( parenthesis - free ) reverse polish form @xcite .",
    "formally , @xmath67 , for @xmath68 , @xmath69 , and @xmath70 .",
    "other possibilities considered in the literature for defining the size of a regular expression are : ( 1 ) counting all symbols , operators , and parentheses @xcite ; or , ( 2 ) counting only the @xmath1-symbols",
    ". however , ellul et al .",
    "@xcite have shown that for regular expressions ( so , without @xmath71 and @xmath72 ) , provided they are preprocessed by syntactically eliminating superfluous @xmath40- and @xmath26-symbols , and nested stars , the three length measures are identical up to a constant multiplicative factor .",
    "for extended regular expressions , counting only the @xmath1-symbols is not sufficient , since for instance the expression @xmath73 does not contain any @xmath1-symbols .",
    "therefore , we define the size of an expression as the length of its reverse polish form .",
    "as mentioned in the introduction , several xml schema languages restrict regular expressions occurring in rules to be _",
    ", formalized by brggemann - klein and wood  @xcite in terms of one - unambiguity .",
    "we introduce this notion next .",
    "to indicate different occurrences of the same symbol in a regular expression , we mark symbols with subscripts . for instance , the _ marking _ of @xmath74 is @xmath75 .",
    "we denote by @xmath76 the marking of @xmath4 and by @xmath77 the subscripted symbols occurring in @xmath76 .",
    "when @xmath4 is a marked expression , then @xmath78 over @xmath1 is obtained from @xmath4 by dropping all subscripts .",
    "this notion is extended to words and languages in the usual way .",
    "a regular expression @xmath4 is _ one - unambiguous _",
    "iff for all strings @xmath79 , and all symbols @xmath80 , the conditions @xmath81 and @xmath82 imply @xmath83 .",
    "for instance , the regular expression @xmath84 , with marking @xmath85 , is not one - unambiguous .",
    "indeed , the marked strings @xmath86 and @xmath87 both in @xmath88 do not satisfy the conditions in the previous definition .",
    "the equivalent expression @xmath89 , however , is one - unambiguous .",
    "the intuition behind the definition is that positions in the input string can be matched in a deterministic way against a one - unambiguous regular expression without looking ahead .",
    "for instance , for the expression @xmath89 , the first @xmath90 of an input string is always matched against the leading @xmath90 in the expression , while every subsequent @xmath90 is matched against the last @xmath90 .",
    "unfortunately , one - unambiguous regular languages do not form a very robust class as they are not even closed under the boolean operations  @xcite .",
    "the following subclass captures the class of regular expressions occurring in xml schemas on the web  @xcite :    a _ single - occurrence regular expression ( sore ) _ is a regular expression where every alphabet symbol occurs at most once .",
    "in addition , we allow the operator @xmath91 which defines @xmath92 .    for instance , @xmath93 is a sore while @xmath94 is not .",
    "clearly , every sore is one - unambiguous .",
    "note that sores define local languages and that over a fixed alphabet there are only finitely many of them .      a non - deterministic finite automaton",
    "( nfa ) @xmath95 is a 4-tuple @xmath96 where @xmath97 is the set of states , @xmath98 is the initial state , @xmath99 is the set of final states and @xmath100 is the transition relation .",
    "we write @xmath101 when @xmath24 takes @xmath95 from state @xmath102 to @xmath103 .",
    "so , @xmath24 is accepted by @xmath95 if @xmath104 for some @xmath105 .",
    "the set of strings accepted by @xmath95 is denoted by @xmath106 .",
    "the size of an nfa is @xmath107 .",
    "an nfa is _ deterministic _ ( or a dfa ) if for all @xmath108 , @xmath109 .",
    "we make use of the following known results .",
    "[ theo : regular - operations ] let @xmath110 be nfas over @xmath1 with @xmath111 for @xmath112 , and @xmath113 .    1 .",
    "[ theo : regular - operations-1 ] a regular expression @xmath4 , with @xmath114 , can be constructed in time @xmath115 , where @xmath116 is the number of states of @xmath117  @xcite .",
    "[ theo : regular - operations-4 ] a dfa @xmath118 with @xmath119 states , such that @xmath120 , can be constructed in time @xmath121 @xcite .",
    "[ theo : regular - operations-5 ] a dfa @xmath118 with @xmath119 states , such that @xmath122 , can be constructed in time @xmath121 @xcite .",
    "[ theo : regular - operations-7 ] let @xmath123 .",
    "an nfa @xmath118 with @xmath124 states , such that @xmath125 , can be constructed in time @xmath126 @xcite .",
    "[ theo : regular - operations-6 ] let @xmath127 . an nfa @xmath118 with @xmath128 states ,",
    "such that @xmath125 , can be constructed in time exponential in the size of @xmath4 @xcite .",
    "we first introduce the family @xmath8 defined by ehrenfeucht and zeiger over an alphabet whose size grows quadratically with the parameter @xmath12",
    "@xcite :    [ def : ehr ] let @xmath129 and @xmath130 .",
    "then , @xmath11 contains exactly all strings of the form @xmath131 where @xmath60 .",
    "a way to interpret @xmath11 is to consider the dfa with states @xmath132 which is fully connected and where the edge between state @xmath14 and @xmath15 is labeled with @xmath16 .",
    "the language @xmath11 then consists of all paths in the dfa .",
    "are considered .",
    "we use our slightly modified definition as it will be easier to generalize to a fixed arity alphabet suited for our purpose in the sequel . ]",
    "ehrenfeucht and zeiger obtained the succinctness of dfas with respect to regular expressions through the following theorem :    [ theo : ehrenfeucht ] for @xmath133 , any regular expression defining @xmath11 must be of size at least @xmath10 .",
    "furthermore , there is a dfa of size @xmath134 accepting @xmath11 .",
    "our language @xmath18 is then the straightforward binary encoding of @xmath11 that additionally swaps the pair of indices in every symbol @xmath16 .",
    "thereto , for @xmath135 , define the function @xmath136 as @xmath137 where @xmath138 and @xmath139 denote the @xmath140-bit binary encodings of @xmath14 and @xmath15 , respectively . note that since @xmath141 , @xmath14 and @xmath15 can be encoded using only @xmath140-bits .",
    "we extend the definition of @xmath136 to strings in the usual way : @xmath142 .",
    "we are now ready to define @xmath18 .",
    "[ def : k ] let @xmath143 .",
    "for @xmath144 , let @xmath145 .",
    "for instance , for @xmath146 , @xmath147 and thus @xmath148    we generalize the previous theorem as follows :    [ lem : size - reg - fixed ] for any @xmath129 , with @xmath149 ,    1 .",
    "any regular expression defining @xmath18 is of size at least @xmath150 ; and , 2 .",
    "there is a dfa @xmath151 of size @xmath152 defining @xmath18 .",
    "the construction of @xmath151 is omitted .",
    "the rest of this section is devoted to the proof of theorem  [ lem : size - reg - fixed](1 ) .",
    "it follows the structure of the proof of ehrenfeucht and zeiger but is technically more involved as it deals with binary encodings of integers .",
    "we start by introducing some terminology .",
    "let @xmath153 .",
    "we say that @xmath154 is the _ start - point _ of @xmath24 and @xmath155 is its _ end - point_. furthermore , we say that @xmath24 _ contains _ @xmath14 or @xmath14 _ occurs in _",
    "@xmath24 if @xmath14 occurs as an index of some symbol in @xmath24 .",
    "that is , @xmath16 or @xmath156 occurs in @xmath24 for some @xmath15 . for instance , @xmath157 , has start - point 0 , end - point 1 , and contains 0 , 1 and 2 .",
    "the notions of contains , occurs , start- and end - point of a string @xmath24 are also extended to @xmath18 .",
    "so , the start and end - points of @xmath158 are the start and end - points of @xmath24 , and @xmath24 contains the same integers as @xmath158 .    for a regular expression @xmath4 , we say that @xmath14 is a _ sidekick _ of @xmath4 when it occurs in every non - empty string defined by @xmath4 .",
    "a regular expression @xmath159 is a starred subexpression of a regular expression @xmath4 when @xmath159 is a subexpression of @xmath4 and is of the form @xmath160 .",
    "now , the following lemma holds :    [ lem : always - contains ] any starred subexpression @xmath159 of a regular expression @xmath4 defining @xmath18 has a sidekick .",
    "we now say that a regular expression @xmath4 is _ normal _ if every starred subexpression of @xmath4 has a sidekick .",
    "in particular , any expression defining @xmath18 is normal .",
    "we say that a regular expression @xmath4 _ covers _ a string @xmath24 if there exist strings @xmath161 such that @xmath162 . if there is a greatest integer @xmath163 for which @xmath4 covers @xmath164 , we call @xmath163 the _ index _ of @xmath24 in @xmath4 and denote it by @xmath165 . in this case",
    "we say that @xmath4 is _",
    "@xmath24-finite_. otherwise , we say that @xmath4 is _",
    "@xmath24-infinite_. the index of a regular expression can be used to give a lowerbound on its size according to the following lemma .",
    "[ lemma : index ] for any regular expression @xmath4 and string @xmath24 , if @xmath4 is @xmath24-finite , then @xmath166.-symbols occurring in it .",
    "however , since our length measure also contains these @xmath1-symbols , this lemma still holds in our setting . ]",
    "now , we can state the most important property of @xmath18 .    [",
    "lem : size - induct ] let @xmath167 . for any @xmath168 of cardinality @xmath7 and @xmath169",
    ", there exists a string @xmath170 with start- and end - point @xmath14 only containing integers in @xmath171 , such that any normal regular expression @xmath4 which covers @xmath24 is of size at least @xmath172 .",
    "the proof is by induction on the value of @xmath7 . for @xmath173 , @xmath174",
    "then , define @xmath175 , which satisfies all conditions and any expression covering @xmath24 must definitely have a size of at least 2 .    for the inductive step , let @xmath176 .",
    "define @xmath177 and let @xmath178 be the string given by the induction hypothesis with respect to @xmath179 ( of size @xmath180 ) and @xmath181 .",
    "note that @xmath182 .",
    "further , define @xmath183 and set @xmath184 then , @xmath170 , has @xmath14 as start and end - point and only contains integers in @xmath171 .",
    "it only remains to show that any expression @xmath4 which is normal and covers @xmath24 is of size at least @xmath185 .",
    "fix such a regular expression @xmath4 .",
    "if @xmath4 is @xmath178-finite for some @xmath186",
    ". then , @xmath187 by construction of @xmath24 . by lemma  [ lemma : index ] ,",
    "@xmath188 and we are done .    therefore , assume that @xmath4 is @xmath178-infinite for every @xmath189 . for every @xmath186 , consider all subexpressions of @xmath4 which are @xmath178-infinite .",
    "it is easy to see that all minimal elements in this set of subexpressions must be starred subexpressions . here and in the following",
    ", we say that an expression is minimal with respect to a set simply when no other expression in the set is a subexpression . indeed",
    ", a subexpression of the form @xmath90 or @xmath26 can never be @xmath178-infinite and a subexpression of the form @xmath190 or @xmath191 can only be @xmath178-infinite if @xmath41 and/or @xmath42 are @xmath178-infinite and is thus not minimal with respect to @xmath178-infinity . among these minimal starred subexpressions for @xmath178 , choose one and denote it by @xmath192 .",
    "let @xmath193 .",
    "note that since @xmath4 is normal , all its subexpressions are also normal . as in addition",
    "each @xmath192 covers @xmath178 , by the induction hypothesis the size of each @xmath192 is at least @xmath194 .",
    "now , choose from @xmath195 some expression @xmath192 such that @xmath192 is minimal with respect to the other elements in @xmath195 .    as @xmath4 is normal and",
    "@xmath192 is a starred subexpression of @xmath4 , there is an integer @xmath15 such that every non - empty string in @xmath196 contains @xmath15 . by definition of the strings",
    "@xmath197 , there is some @xmath198 , @xmath199 , such that @xmath198 does not contain @xmath15 .",
    "denote by @xmath200 the starred subexpression from @xmath195 which is @xmath198-infinite .",
    "in particular , @xmath192 and @xmath200 can not be the same subexpression",
    ".    now , there are three possibilities :    * @xmath192 and @xmath200 are completely disjoint subexpressions of @xmath4 .",
    "that is , they are both not a subexpression of one another . by induction",
    "they must both be of size @xmath201 and thus @xmath202 .",
    "* @xmath200 is a strict subexpression of @xmath192 .",
    "this is not possible since @xmath192 is chosen to be a minimum element from @xmath195 .",
    "* @xmath192 is a strict subexpression of @xmath200 .",
    "we show that if we replace @xmath192 by @xmath26 in @xmath200 , then @xmath200 is still @xmath198-infinite .",
    "it then follows that @xmath200 still covers @xmath198 , and thus @xmath200 without @xmath192 is of size at least @xmath194 . as @xmath203 as well it follows that @xmath204 .",
    "+ to see that @xmath200 without @xmath192 is still @xmath198-infinite , recall that any non - empty string defined by @xmath192 contains @xmath15 and @xmath15 does not occur in @xmath198 .",
    "therefore , a full iteration of @xmath192 can never contribute to the matching of any number of repetitions of @xmath198 .",
    "so , @xmath200 can only lose its @xmath198-infinity by this replacement if @xmath192 contains a subexpression which is itself @xmath198-infinite .",
    "however , this then also is a subexpression of @xmath200 and @xmath200 is chosen to be minimal with respect to @xmath198-infinity , a contradiction .",
    "we can only conclude that @xmath200 without @xmath192 is still @xmath198-infinite .",
    "since by lemma  [ lem : always - contains ] any expression defining @xmath18 is normal , theorem  [ lem : size - reg - fixed](1 ) directly follows from lemma  [ lem : size - induct ] by choosing @xmath205 , @xmath206 .",
    "this concludes the proof of theorem  [ lem : size - reg - fixed](1 ) .",
    "it is known that extended regular expressions are non - elementary more succinct than classical ones  @xcite .",
    "intuitively , each exponent in the tower requires nesting of an additional complement . in this section",
    ", we show that in defining the complement of a single regular expression , a double - exponential size increase can not be avoided in general .",
    "in contrast , when the expression is one - unambiguous its complement can be computed in polynomial time .",
    "[ theo : size - complement ]    1 .   for every regular expression @xmath4 over @xmath1 , a regular expression @xmath159 with @xmath207 can be constructed in time @xmath208 .",
    "2 .   let @xmath1 be a four - letter alphabet .",
    "for every @xmath129 , there is a regular expressions @xmath209 of size @xmath210 such that any regular expression @xmath4 defining @xmath211 is of size at least @xmath212 .",
    "\\(2 ) take @xmath1 as @xmath213 , that is , @xmath214 .",
    "let @xmath215 .",
    "we define an expression @xmath209 of size @xmath210 , such that @xmath216 . by theorem  [ lem :",
    "size - reg - fixed ] , any regular expression defining @xmath20 is of size exponential in @xmath19 , that is , of size @xmath212 . by @xmath217}$ ] we abbreviate the expression @xmath218 , with a _ nesting depth _ of @xmath219 .",
    "we then define @xmath209 as the disjunction of the following expressions :    * all strings that do not start with a prefix in @xmath220 : @xmath221 } + ( 0 + 1)^{[0,n-1]}(\\$ + \\#)\\sigma^ * + ( 0 + 1)^n(0 + 1 + \\#)\\sigma^*\\ ] ] * all strings where a @xmath222 is not followed by a string in @xmath223 : @xmath224}(\\ # + \\$ ) +     \\sigma^n(0 + 1+\\$)\\big)\\sigma^*\\ ] ] * all strings where a non - final @xmath225 is not followed by a string in @xmath220 : @xmath226}(\\ # + \\$ ) +     \\sigma^n(0 + 1+\\#)\\big)\\sigma^*\\ ] ] * all strings that do not end in @xmath225 : @xmath227 * all strings where the corresponding bits of corresponding blocks are different : @xmath228    it should be clear that a string over @xmath214 is matched by none of the above expressions if and only if it belongs to @xmath20 .",
    "so , the complement of @xmath209 defines exactly @xmath20 .",
    "the previous theorem essentially shows that in complementing a regular expression , there is no better algorithm than translating to a dfa , computing the complement and translating back to a regular expression which includes two exponential steps .",
    "however , when the given regular expression is one - unambiguous , a corresponding dfa can be computed in quadratic time through the glushkov construction  @xcite eliminating already one exponential step .",
    "the proof of the next theorem shows that the complement of that dfa can be directly defined by a regular expression of polynomial size .",
    "[ theo : comp - uab - poly ] for any one - unambiguous regular expression @xmath4 over an alphabet @xmath1 , a regular expression @xmath159 defining @xmath229 can be constructed in time @xmath230 , where @xmath12 is the size of @xmath4 .",
    "let @xmath4 be a one - unambiguous expression over @xmath1 .",
    "we introduce some notation .    *",
    "the set @xmath231 contains all @xmath1-symbols which are not the first symbol in any word defined by @xmath4 , that is , @xmath232 .",
    "* for any symbol @xmath233 , the set @xmath234 contains all @xmath1-symbols of which no marked version can follow @xmath235 in any word defined by @xmath76 .",
    "that is , @xmath236 . *",
    "the set @xmath237 contains all _ marked _ symbols which are the last symbol of some word defined by @xmath76 .",
    "formally , @xmath238 .",
    "we define the following regular expressions :    * @xmath239 * for every @xmath233 , let @xmath240 be the expression defining @xmath241 .",
    "that is , all prefixes of strings in @xmath76 ending in @xmath235 . then , let @xmath242 define @xmath243 .",
    "we are now ready to define @xmath159 : @xmath244 it can be shown that @xmath159 can be constructed in time cubic in the size of @xmath4 and that @xmath159 defines the complement of @xmath4 .",
    "the latter is proved by exhibiting a direct correspondence between @xmath159 and the complement of the glushkov automaton of @xmath4 .",
    "we conclude this section by remarking that one - unambiguous regular expressions are not closed under complement and that the constructed @xmath159 is therefore not necessarily one - unambiguous .",
    "in this section , we study the succinctness of intersection . in particular",
    ", we show that the intersection of two ( or any fixed number ) and an arbitrary number of regular expressions are exponentially and double exponentially more succinct than regular expressions , respectively .",
    "actually , the exponential bound for a fixed number of expressions already holds for single - occurrence regular expressions , whereas the double exponential bound for an arbitrary number of expressions only carries over to one - unambiguous expressions . for single - occurrence expressions",
    "this can again be done in exponential time .    in this respect ,",
    "we introduce a slightly altered version of @xmath18 .",
    "[ def : k - f ] let @xmath245 . for all @xmath129 , @xmath246 .",
    "we also define a variant of @xmath11 which only slightly alters the @xmath16 symbols in @xmath11 .",
    "thereto , let @xmath247 and set @xmath248 and @xmath249 , where @xmath7 is even .",
    "[ def : k - g ] let @xmath129 and @xmath250 .",
    "then , @xmath251 .",
    "note that paths in @xmath252 are those in @xmath11 where every odd position is promoted to a circled one @xmath253 , and triangles labeled with the non - circled positions are added .",
    "for instance , the string @xmath254 is mapped to the string @xmath255 .",
    "we make use of the following property :    [ lem : size - reg - fixed - fg ] let @xmath129 .    1 .",
    "[ lem : size - reg - fixed - f ] any regular expression defining @xmath256 is of size at least @xmath19 .",
    "[ lem : size - reg - fixed - g ] any regular expression defining @xmath252 is of size at least @xmath10 .",
    "the next theorem shows the succinctness of the intersection operator .",
    "[ theo : size - intersection - two ]    1 .   for any @xmath60 and regular expressions @xmath257",
    ", a regular expression defining @xmath258 can be constructed in time @xmath259 , where @xmath260 .",
    "2 .   for every @xmath129 , there are sores @xmath209 and @xmath261 of size @xmath9 such that any regular expression defining @xmath262 is of size at least @xmath10 .",
    "3 .   for each @xmath127",
    "an equivalent regular expression can be constructed in time @xmath263 .",
    "4 .   for every @xmath129 , there are one - unambiguous regular expressions @xmath264 , with @xmath265 , of size @xmath210 such that any regular expression defining @xmath266 is of size at least @xmath212",
    "let @xmath267 be sores .",
    "a regular expression defining @xmath268 can be constructed in time @xmath269 , where @xmath270 .",
    "\\(2 ) let @xmath129 .",
    "by lemma  [ lem : size - reg - fixed - fg]([lem : size - reg - fixed - g ] ) , any regular expression defining @xmath271 is of size at least @xmath10 .",
    "we define sores @xmath209 and @xmath261 of size quadratic in @xmath12 , such that @xmath272 .",
    "we start by partitioning @xmath273 in two different ways . to this end , for every @xmath274 , define @xmath275 , @xmath276 , @xmath277 , and , @xmath278 . then , @xmath279 further , define @xmath280 and @xmath281    now , @xmath209 checks that every string consists of a sequence of blocks of the form @xmath282 , for @xmath283 , ending with a @xmath284 , for @xmath274 .",
    "it thus sets the format of the strings and checks whether the circled indices are equal .",
    "further , @xmath261 checks whether the non - circled indices are equal and whether the triangles have the correct indices . since the alphabet of @xmath252 is of size @xmath9 , also @xmath209 and @xmath261",
    "are of size @xmath9 .",
    "\\(4 ) let @xmath129 .",
    "we define @xmath265 one - unambiguous regular expressions of size @xmath210 , such that their intersection defines @xmath285 . by lemma  [ lem : size - reg - fixed - fg]([lem : size - reg - fixed - f ] ) , any regular expression defining @xmath285 is of size at least @xmath212 and the theorem follows . for ease of readability , we denote @xmath286 simply by @xmath1 .",
    "the expressions are as follows .",
    "there should be an even length sequence of blocks : @xmath287 for all @xmath288 , the @xmath289th bit of the two numbers surrounding an odd @xmath225 should be equal : @xmath290 for all @xmath288 , the @xmath289th bit of the two numbers surrounding an even @xmath225 should be equal : @xmath291 clearly , the intersection of the above expressions defines @xmath285 . furthermore , every expression is of size @xmath292 and is one - unambiguous as the glushkov construction translates them into a dfa  @xcite .",
    "in this paper we showed that the complement and intersection of regular expressions are double exponentially more succinct than ordinary regular expressions . for complement",
    ", complexity can be reduced to polynomial for the class of one - unambiguous regular expressions although the obtained expressions could fall outside that class . for intersection ,",
    "restriction to sores reduces complexity to exponential .",
    "it remains open whether there are natural classes of regular expressions for which both the complement and intersection can be computed in polynomial time ."
  ],
  "abstract_text": [
    "<S> we study the succinctness of the complement and intersection of regular expressions . in particular , we show that when constructing a regular expression defining the complement of a given regular expression , a double exponential size increase can not be avoided . </S>",
    "<S> similarly , when constructing a regular expression defining the intersection of a fixed and an arbitrary number of regular expressions , an exponential and double exponential size increase , respectively , can in worst - case not be avoided . </S>",
    "<S> all mentioned lower bounds improve the existing ones by one exponential and are tight in the sense that the target expression can be constructed in the corresponding time class , i.e. , exponential or double exponential time . </S>",
    "<S> as a by - product , we generalize a theorem by ehrenfeucht and zeiger stating that there is a class of dfas which are exponentially more succinct than regular expressions , to a fixed four - letter alphabet . when the given regular expressions are one - unambiguous , as for instance required by the xml schema specification , the complement can be computed in polynomial time whereas the bounds concerning intersection continue to hold . for the subclass of single - occurrence regular expressions </S>",
    "<S> , we prove a tight exponential lower bound for intersection .    </S>",
    "<S> wouter gelade    frank neven </S>"
  ]
}