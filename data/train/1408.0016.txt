{
  "article_text": [
    "writing a specification in a controlled natural language without any tool support is a difficult task since the author needs to learn and remember the restrictions of the controlled language . over the last decade , a number of different techniques and tools  @xcite have been proposed and implemented to minimise the learning effort and to support the writing process of controlled natural languages .",
    "the most promising approach to alleviate these habitability problems is the use of a predictive text editor  @xcite that constrains what the author can write and provides predictive feedback that guides the writing process of the author . in this paper , we present the architecture of a web - based predictive text editor being developed for the controlled natural language peng@xmath0@xcite .",
    "the text editor uses an event - driven model - view - controller based architecture to satisfy a number of user entry and display requirements .",
    "these requirements include the display of multiple sets of lookahead categories for different sentence completions , the deletion of typed words , the addition of new content words to the lexicon and the handling of anaphoric expressions .",
    "additionally , the text editor displays a paraphrase for each input sentence and displays the evolving answer set program  @xcite .",
    "the peng@xmath0 system is based on a client - server architecture where the predictive editor runs in a web browser and communicates via an http server with the controlled natural language processor ; the language processor uses in our case an answer set programming ( asp ) tool as reasoning service ( fig .",
    "1 ) :     system , scaledwidth=100.0% ]    the communication between the predictive editor and the http server occurs asynchronously with the help of ajax technologies and by means of json objects .",
    "the predictive editor is implemented in javascript and jquery .",
    "the http server as well as the controlled natural language processor are implemented in swi prolog .",
    "the prolog server translates json objects into json terms and vice versa so that these terms can be processed directly by the language processor .",
    "the language processor incrementally translates the controlled language input via discourse representation structures  @xcite into an asp program and sends this asp program to the asp tool _ clingo _",
    "@xcite that tries to generate one or more satisfiable answer sets for the program .",
    "swi - prolog provides a series of libraries for implementing http server capabilities .",
    "our server is based on this technology and can be operated as a stand - alone server on all platforms that are supported by swi - prolog .",
    "the following code fragment illustrates how an http server is created , a port ( ` 8085 ` ) specified , and a request ( ` request ` ) dispatched using a handler registration ( ` http_handler/3 ` ) :    ....     server(port ) : - http_server(http_dispatch , [ port(port ) ] ) .",
    ": - http_handler('/peng/ ' , handle , [ ] ) .",
    "handle(request ) : - ...     : - server(8085 ) . ....    in our case",
    ", we can now connect via ` http://localhost:8085/peng/ ` from the web browser to the server that uses specific javascript and stylesheet handlers to load the predictive editor and to establish the communication between the editor and the controlled language processor .",
    "the predictive editor is implemented in javascript and jquery , with the superfish plug - in providing pull - down menu functionality .",
    "these technologies allow the editor to be run in most browsers , which in conjunction with the capabilities of a potentially remote language processor coded in prolog , provides a highly portable system .",
    "data communication with the server provides for both command functions , such as file saving and loading , as well as data transfer between the language processor and the predictive editor system . the json data for parsing sent from the predictive editor to the http server includes the current token of a word form , its position in the relevant sentence and relevant sentence number .",
    "for each word form or completed sentence submitted by the predictive editor , the lookahead categories and word forms along with the output of the language processor are returned .",
    "an overview of a typical predictive editor display is presented in figure 2 .",
    "command function menus are presented at the top , below which is the main text input field displaying the current sentence .",
    "lookahead categories for the available sentence completion are highlighted using the pull - down menus . below these lookahead categories",
    "is a display summarising relevant information in the system , at both the client and server .",
    "first is a summary of previously entered text at the client side .",
    "second are the generated paraphrases at the server , with any anaphoric references being highlighted ( which may also be accessed from the pull - down menus ) . third is a summary of the current answer set program for the input , followed by the final section of output from answer set tool _",
    "the editor allows entering text specifications manually by typing in the text entry field , plus using pull - down menus of lookahead categories to enter text into the input field .",
    "the reasons for allowing direct input of text include that some users , especially those experienced in the structure of the controlled natural language , can type faster than they can enter via menus , even with some level of auto - completion .",
    "additionally , the system allows entering new content words into the lexicon , via the text field , that do not appear in the displayed lookahead categories .",
    "the controlled natural language processor of the peng@xmath0 system consists of a chart parser , a unification - based grammar , a lexicon and a spelling corrector .",
    "the chart parser is initialised for the first time when the author moves the cursor into the textfield of the predictive editor and reset at the beginning of each new sentence and generates lookahead categories using the grammar and the lexicon of the controlled language processor .",
    "these lookahead categories inform the author of a specification how to start a sentence and are generated dynamically for each word form that the author enters into the textfield of the editor .",
    "this mechanism guarantees that the author can only input word forms and construct sentences that follow the rules of the controlled language .",
    "if a word is misspelled , then the spelling corrector is used to generate a list of candidates that occur in the lexicon .",
    "if a content word is not in the lexicon , then the author can add this word to the lexcion during the specification process .    the controlled natural language peng@xmath0  @xcite that the author uses as input language has been designed as a high - level interface language to asp programs . in certain aspects",
    "the language peng@xmath0 is similar to peng light  @xcite and attempto controlled english  @xcite , since it uses a version of discourse representation theory ( drt ) , in the spirit of  @xcite , as intermediate representation language .",
    "however , peng@xmath0 does not rely on full first - order logic ( fol ) as target language as the use of drt would suggest but on the language for asp programs .",
    "the language of fol is in some respects more expressive than the language of asp but unfortunately fol is not adequate for representing commonsense knowledge , because fol can not deal with non - monotonic reasoning .",
    "asp , on the other hand , allows us to represent and process commonsense knowledge because of its unique connectives and non - monotonic entailment relation . beyond that",
    ", asp is still expressive enough to represent function - free fol formulas of the ` \\exists^{*}\\forall^ { * } ` prefix class in form of a logic program  @xcite .",
    "below is an example specification in peng@xmath0 that uses a default rule in ( 5 ) , a cancellation axiom in ( 6 ) , and sentence with strong negation in ( 7 ) :    * sam is a child .",
    "* john is the father of sam and alice is the mother of sam . *",
    "every father of a child is a parent of the child . *",
    "every mother of a child is a parent of the child . *",
    "parents of a child normally care about the child . *",
    "if a parent of a child is provably absent then the parent abnormally cares about the child .",
    "* john does not care about sam .",
    "* alice is absent .",
    "of course , the specific features of the asp language have an impact on what we can express on the level of the controlled natural language and therefore rely on the support of the predictive editor .",
    "since we are interested in specifying commonsense theories in peng@xmath0 , we need a non - monotonic reasoning service .",
    "asp is a relatively novel logic - based knowledge representation formalism that has its roots in logic programming with negation , deductive databases , non - monotonic reasoning and constraint solving  @xcite .",
    "an asp program consists of a set of rules of the following form :    * ` l_{0 } ; ... ; l_{k } : - l_{k+1 } , ... , l_{m } , not l_{m+1 } , ... , not l_{n } ` .",
    "where all ` l_{i } ` s are literals .",
    "a literal is an atom or its negation .",
    "a positive atom has the form ` p(t_{1 } , ... , t_{n } ) ` where ` p ` is a predicate symbol of arity ` n ` and ` t_{1 } , ... , t_{n } ` are object constants or variables .",
    "a negative atom has the form ` -p(t_{1 } , ... , t_{n } ) ` where the symbol ` - ` denotes strong negation .",
    "the symbol ` : - ` stands for an implication .",
    "the expression on the left - hand side of the implication is called the _",
    "head _ of the rule and the expression on the right - hand side is called the _ body _ of the rule .",
    "the head may consist of an epistemic disjunction of literals denoted by the symbol ` ; ` .",
    "literals in the body may be preceded by negation as failure denoted by the symbol ` not ` .",
    "the head or the body of a rule can be empty .",
    "a rule with an empty head is called an _ integrity constraint _ and a rule with an empty body is called a _",
    "fact_. for instance , the example specification in section 3.1 is translated automatically via discourse representation structures in the subsequent asp program :    ....     child(sam ) .",
    "father(john , sam ) .",
    "mother(alice , sam ) .",
    "parent(a , b ) : - father(a , b ) , child(b ) .",
    "parent(c , d ) : - mother(c , d ) , child(d ) .",
    "care(e , f ) : - parent(e , f ) , child(f ) , not ab(d_care(e , f ) ) ,                   not -care(e , f ) .",
    "ab(d_care(g , h ) ) : - parent(g , h ) , child(h ) , not -absent(g ) .",
    "-care(john , sam ) .",
    "absent(alice ) . ....",
    "in addition to the generic requirements outlined in section 2.3 , a number of detailed user input and system display requirements for the lookahead categories are determined to aid in the design of the predictive editor architecture .",
    "the main requirements are that the system should allow appropriate editing of information already entered , that the lookahead categories for a particular sentence position are displayed until all possibilities are no longer possible and that the lookahead categories for the next sentence position are displayed as soon as the relevant options are possible .",
    "these requirements are presented in detail in the following sections .        * * requirement e.1.1 : * the system will allow deletion of characters or words already typed , or all or part of a sentence not yet _",
    "submitted_. ( this deletion will be referred to as _ backward editing _ ) .    * * requirement e.2.1 : * a new sentence is not commenced ( via the chart parser being reset ) until a _ submit _ or an _ enter _ event or a beginning of sentence character / word occurs after an end - of - sentence marker ( full stop or question mark ) .",
    "a new sentence being commenced means that the previous sentence has been _ submitted_.    * * requirement e.3.1 : * a user is allowed to enter a content word not in the lexicon and force its submission to the language processor as the next content word .    *",
    "* requirement e.3.2 : * a user may enter a misspelt word that is yet to be _ completed _ with the word still subject to _ backward editing_.    * * requirement e.4.1 : * a word is _ completed _ if it followed by a space or directly by a valid punctuation character which in turn is followed by a space or sentence _ submission_. this latter requirement of a space after the punctuation allows the system to distinguish the state from the case of an _ incomplete _ misspelt word with an erroneous punctuation character at the end .",
    "* * requirement d.1.1 : * before and whilst a word is being entered at position a ( or for a new sentence commencing at position a ) , the system should display all the lookahead categories for position a until all of those categories are no longer possible .    *",
    "* assertion d.1.1 : * all lookahead categories for position a are no longer possible if the next non - punctuation word at position a+1 has commenced , or a word is _ completed _ according to requirement e.4.1 .",
    "* * requirement d.2.1 : * the system should display the lookahead categories for position a+1 when a word entered at position a matches the lookahead categories for position a.    note that in terms of displaying one set of lookahead categories for a particular word , requirements d.1.1 and d.2.1 are not mutually exclusive , that is there occur system states where the lookahead categories at position a and position a+1 need to be displayed concurrently .    * * assertion d.2.1 : * if a word at position a matches the lookahead categories for position a , then other lookahead categories for position a may still be possible .",
    "some examples are presented to help clarify the requirements detailed above .",
    "the two main cases which are catered for are the existence of subsets within the lookahead categories for one sentence position and the allowed juxtaposition of punctuation directly after a word without an intervening space .    for the case of subsets in lookahead categories , consider the commencement of a sentence and the above two display requirements d.1.1 and d.2.1 .",
    "initial lookahead categories may include  the \" ,  there is \" ,  a \" ,  thelma \" ,  john \" and  johnathan \" for example , which according to d.1.1 should all be displayed by the system .",
    "a user entering the characters  the \" would then satisfy requirement d.2.1 , whereby the lookahead categories for the next position would be displayed . if these categories included the word  child \" , the user could enter this word and the entered text would be  the child \" , illustrating that a display of this sentence completion option was necessary .",
    "however , the original situation of the user entering the characters  the \" may have been the precursor to the entry of the words  there is \" or even  thelma \" .",
    "thus even though requirement d.2.1 is satisfied after the entry of  the \" , requirement d.1.1 still holds for the presentation of the original lookahead categories whilst the user completes this entry , thus illustrating assertion d.2.1 . whether the user has entered  thelma \" or  the \" without a subsequent character , requirement e.4.1 has not been satisfied , so a user may _ backward edit _ from the word ",
    "thelma \" back to  the \" or",
    " thelma\"/the \" back to  a \" .    for the case of juxtaposition of word forms with punctuation and requirements e.4.1 and d.2.1",
    ", the lexicon and grammar allows phrases such as  john , thelma and pete are parents . \" . here",
    ", a word is followed directly by punctuation , so that once the characters  john \" are entered , according to requirement d.2.1 , the system must display the options for the next lookahead categories which include the comma which could be clicked or typed directly .",
    "alternatively , a user may have been intending to type  johnathan \" , so as for the case of subsets must see the original set of lookahead categories .",
    "if a user accidentally hit the comma on the fifth character , leaving  john , \" ( john comma ) , as the current word , the system should still display the original lookahead categories , including  johnathan \" , as the word has not been _ completed _ according to requirement e.4.1 .",
    "the predictive editor is designed to meet the requirements of the peng@xmath0 system , the asynchronous client - server communications , the different modes of the editor input as well as user entry and system display requirements .",
    "the architecture of the predictive editor is based approximately on that of a _ model - view - controller _ ( mvc ) system  @xcite in terms of separation and independence .",
    "the _ model _ includes the currently active sentence , including that entered by the user and that submitted to the http server , all previously entered sentences and all data ( including lookahead categories ) received from the language processor via the http server .",
    "the model also stores all variables relevant to determining the state of the system .",
    "the _ view _ includes the events - triggered input text field , the pull - down menu display of lookahead categories and the input of word forms via mouseover selection",
    ". it also displays the overall model of entered sentences and the asp model generated by the language processor .    the _ controller _ synchronises all functions , and importantly monitors for the need of a state change in the _ model _ , such as when the user has input data that is different from the currently active sentence and if so , whether to submit new data to the server or not .",
    "additionally , the _ controller _ co - ordinates loading of all the returned lookahead categories into data structures and determines which of these lookahead categories are displayed to the user as dependent on the current state of the system .",
    "a key issue with the implementation of the mvc architecture is the requirement to have event - driven data processing and control to be compatible with the asynchronous ajax communication between the predictive editor and the http server and events - triggered predictive editor input .",
    "when content words are submitted to the http server via json data , the predictive editor system must wait until corresponding lookahead data is returned by the server .",
    "once this information is received , it may then be stored in the model and only then can the _ controller _ process this model data to determine if the model state variables should be changed and update the display if necessary .",
    "to implement this , the _ controller _ organises run - time execution of events in a pipe and filter architecture , where each element of the pipe is a data structure containing the relevant primary data for that event , the relevant processing function and an optional link to the next data structure in the pipe .    whilst this may not be a classical mvc implementation",
    ", it provides a robust method of ensuring model data is in a consistent state for process control .",
    "thus for the above example of sending a new content word to the server , the ajax send / receive routine will trigger the return data storage event , which when complete will trigger the model state change assessment functionality , which when complete may cause a trigger of the display of the next lookahead categories to the display .",
    "any multi - stage data processing may also be organised as a pipe and filter structure using the above data structures , with the next stage of the processing function only allowed once the model data from the previous processing function becomes stable .      as with many client - server systems ,",
    "some model data is stored and processed at the predictive editor client side to allow for optimal processing and control .",
    "the model data is stored in objects defined by javascript functions , with appropriate object methods declared to allow for this data to be processed conveniently and allowing functionality beyond the capabilities of using raw json objects for storage .",
    "for example , the model data includes stack objects ( containing stacks of anything from word forms to whole sentences ) , individual send and received objects plus a single object of correlated send and receive data .",
    "methods can detect if a beginning or end of sentence token is present , or whether a word form matches a lookahead category and whether it is also a subset of another lookahead category ( such as  the \" being a subset of  there \" ) .",
    "display objects allow storage of different sets of lookahead categories and the ability to switch the display from ` displayed ' to ` hidden ' and vice versa .",
    "given the user entry and system display requirements discussed section 4.1 and generic requirements presented in section 2.3 , the control system for the predictive editor has been designed to allow displaying of multiple lookahead categories for different sentence completions and strict control over when data entered by a user is ultimately committed to the server .",
    "the currently active sentence is stored in two forms , namely from a tokenisation of the user input and from a summary of the data submitted to the server . by comparing a stack of the set of tokens in each sentence ,",
    "a difference stack is generated to aid the controller in determining a change in the model state .",
    "any newly entered valid words , or changes in the current word are assessed for submission , or alternately earlier submitted tokens / words may be removed and new tokens sent in their place ( such as in the case of _ backward editing _ ) .",
    "as discussed regarding requirement d.2.1 in section 4.1 , if an entered word matches a lookahead category for that position , the controller automatically submits this word to the server and retrieves the next set of lookahead categories for this new token .",
    "however , this data transfer is just the predictive editor gathering information and does nt directly synchronise with the totality of the display to the user . if the controller does nt detect a word completion , or finds that at least one lookahead category from the previous word is still possible , the previous lookahead categories are not cleared as per assertion d.2.1 .    as described in section 5.3 ,",
    "display data structures allow easy addition and display of data and hiding of data as necessary . as well as automatically submitting a word matching the current lookahead categories , a word matching the previous set of lookahead categories where the previous word is a subset of the new word will also trigger an automatic submission of the token to the http server .",
    "this would be the case for  thelma \" being typed after ",
    "the \" has been submitted to the server and lookahead categories already returned for the next sentence position .",
    "recall from requirement e.3.1 that a user may forcibly submit a word form to the language processor that does not correspond to the lexicon .",
    "when this occurs , the language processor may offer a set of spelling suggestions ( assuming that an incorrect word has been submitted by mistake ) or the predictive editor will offer an option to add this new word to the lexicon in this current context . if the user selects to add a word , then the position in the sentence , the lexical category and the new word form are collected and sent to the server where the new word is added to the lexicon .",
    "the new word is then parsed again by the language processor and a new set of lookahead categories is generated and sent to the predictive editor .",
    "the current predictive editor may be extended for multiple users in line with the web - based portability of the system .",
    "a user login would allow for a number of features , such as a user - group based lexicon depending on the nature of the specification system for that group ( e.g. medical , engineering , automotive , etc . ) .",
    "additionally , an individual could have their own extended lexicon for any content words added to the lexicon .",
    "a user could set a level of knowledge for their grammar , which would aid in controlling the complexity of the pull - down menus , in that instead of displaying all possible lexical categories , a user with limited knowledge could display a smaller number of less - technial word categories , such as  function words \" instead of individual groups such as  adjective \" ,  adverb \" ,  noun \" , etc .",
    "the user login could be used to set preferences for any further adjustable enhancements .",
    "in this paper , we introduced the architecture of a web - based predictive text editor developed for the peng@xmath0 system .",
    "this system is suitable for writing non - monotonic specifications that have the expressive power of answer set programs .",
    "the web - based predictive editor supports the writing process of these specifications and is based on a portable client - server architecture and is predominantly implemented in javascript .",
    "an event - driven model - view - controller based architecture was used for the editor , allowing strict control of system functionality to satisfy a set of user entry and display requirements that included the display of multiple sets of lookahead categories for different sentence completions .",
    "the predictive editor allows for new content words to be added to the lexicon and supports the selection of anaphoric expressions an extension of a user login would allow tailoring of preferences and a user - based lexicon .",
    "fuchs , n.e .",
    ", kaljurand , k. , kuhn , t. : attempto controlled english for knowledge representation . in : c. baroglio , p.a .",
    "bonatti , j. maluszynski , m. marchiori , a. polleres , s. schaffert , ( eds . ) , _ reasoning web _ , fourth international summer school 2008 , lncs 5224 , pp . 104124",
    "( 2008 )            lierler , y. , lifschitz , v. : logic programs vs. first - order formulas in textual inference . in : _ proceedings of the 10th international conference on computational semantics ( iwcs 2013 ) _ , potsdam , germany , pp .",
    "340346 , ( 2013 )            schwitter , r. : the jobs puzzle : taking on the challenge via controlled natural language processing . in : _",
    "journal of theory and practice of logic programming _ , vol .",
    "13 , special issue 4 - 5 , pp .",
    "487501 ( 2013 )"
  ],
  "abstract_text": [
    "<S> in this paper , we describe the architecture of a web - based predictive text editor being developed for the controlled natural language peng@xmath0 . </S>",
    "<S> this controlled language can be used to write non - monotonic specifications that have the same expressive power as answer set programs . in order to support the writing process of these specifications , </S>",
    "<S> the predictive text editor communicates asynchronously with the controlled natural language processor that generates lookahead categories and additional auxiliary information for the author of a specification text . </S>",
    "<S> the text editor can display multiple sets of lookahead categories simultaneously for different possible sentence completions , anaphoric expressions , and supports the addition of new content words to the lexicon . </S>"
  ]
}