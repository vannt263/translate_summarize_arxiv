{
  "article_text": [
    "originally formulated by koopmans and beckmann ( 1957 ) , the qap is np - hard and is considered to be one of the most difficult problems to be solved optimally .",
    "it was defined in the following context : a set of @xmath0 facilities are to be located at @xmath0 locations . the quantity of materials which flow between facilities @xmath1 and @xmath2 is @xmath3 and the distance between locations @xmath1 and @xmath2 is @xmath4 .",
    "the problem is to assign to each location a single facility so as to minimize ( or maximize ) the cost @xmath5 where @xmath6 represents the location to which @xmath1 is assigned .",
    "the qap formulation has since been applied to such diverse problems as the optimal assignment of classes to classrooms ( dickey and hopkins , 1972 ) , design of dna microarrays ( de carvalho and rahmann , 2006 ) , cross species gene analysis ( kolar , et al . , 2008 ) ,",
    "creation of hospital layouts ( elshafei , 1977 ) , and assignment of components to locations on circuit boards ( steinberg , 1961 ) .",
    "in addition to being important in its own right , the qap includes such other combinatorial optimization problems as the traveling salesman problem and graph partitioning as special cases .",
    "there is an extensive literature that addresses the qap and which is reviewed in pardalos et al .",
    "( 1994 ) , cela ( 1998 ) , anstreicher ( 2003 ) , loiola et al .",
    "( 2007 ) , james et al .",
    "( 2009 ) and burkhard et al .",
    "the qap is exceedingly hard to solve optimally . with the exception of specially constructed cases ,",
    "optimal algorithms have solved only relatively small instances with @xmath7 .",
    "various heuristic approaches have been developed and applied to problems typically of size @xmath8 or less . by contrast , a travelling salesman problem consisting of almost 25,000 towns in sweden has been solved exactly ( applegate et al . , 2007 ) .",
    "the simulated annealing heuristic was first applied to the qap by burkhard and rendl ( 1984 ) and was refined by connolly ( 1990 ) .",
    "the heuristic consists of swapping locations of two facilities .",
    "proposed swaps can either be determined randomly or selected according to some sequential enumeration of all possible swaps . for each proposed swap , @xmath9 , the change in cost for the potential swap ,",
    "is calculated .",
    "the swap is made if @xmath9 is negative or if @xmath10 where @xmath11 is an analog of temperature in physical systems that is slowly decreased according to a specified _ cooling schedule _ after each iteration and @xmath12 is a uniformly distributed random variable between 0 and 1 . randomly making moves which increase the cost",
    "is done to help escape from local minima .    in traditional implementations of the heuristic , the cost of making a swap is calculated from scratch when the swap is considered in order to determine if the swap should be made .",
    "the computational complexity of this calculation is @xmath13 ; and if the sa run is composed of @xmath14 iterations , the complexity is @xmath15 .",
    "we can write the time needed to execute @xmath14 iterations as @xmath16 where @xmath17 is a constant .",
    "the approach we take here is to attempt to reduce the complexity by maintaining a matrix @xmath18 of costs of each possible swap .",
    "this approach is motivated by the work of taillard ( 1991 ) , who applied a similar approach in the application of another heuristic , tabu search , to the qap .",
    "our @xmath18_-matrix approach _ is as follows :    * initialize by creating a matrix @xmath19 containing the cost of swapping @xmath20 and @xmath21 for all @xmath20 and @xmath21 , given a current assignment @xmath22 .",
    "* in each iteration , retrieve the cost @xmath23 of the proposed swap @xmath24 .",
    "* if the proposed swap is not made in a given iteration , go to ( b ) . *",
    "if the proposed swap is made in a given iteration , update @xmath19 to reflect the swap costs given the new permutation and go to ( b ) .",
    "* end after @xmath14 iterations .",
    "the number of iterations in which a swap is performed divided by the total number of iterations is known as the _ acceptance rate _ @xmath25 .",
    "the computational complexity of our approach has the following contributions .    *",
    "retrieving the value of @xmath23 is of complexity @xmath26 . * assuming an acceptance rate , @xmath25 , the matrix @xmath23 must be updated @xmath27 times .",
    "the complexity of updating @xmath19 is @xmath28 as described in [ complexity ] .",
    "thus the complexity of our approach is @xmath29 and we can write the cpu time of our approach @xmath30 as @xmath31 where @xmath32 and @xmath33 are constants .",
    "the performance improvement factor of our approach relative to the traditional approach is then @xmath34 for large @xmath0 .    from eq .",
    "( [ f ] ) we see that the performance improvement is critically dependent on the acceptance rate @xmath25 .",
    "the constants @xmath17 and @xmath32 are independent of the problem instance , depending only on the sa implementation ; for our implementation @xmath35 . for our approach to be beneficial , @xmath36 must have a value @xmath37 and thus @xmath25 must satisfy @xmath38 it is useful to consider an _ instantaneous acceptance rate _ , @xmath39 , defined as the number of swaps performed in a window of iterations around iteration @xmath1 divided by the size of the window .",
    "our numerical experiments indicate that @xmath39 decreases with increasing @xmath1 as the sa run progresses ( see [ accapp ] ) .",
    "for this reason , our program uses the traditional approach until an iteration at which @xmath39 satisfies eq .",
    "( [ critical ] ) and then begins using the more efficient @xmath18-matrix approach .    for tabu search , a swap is made only after all possible @xmath40 swaps are analyzed .",
    "thus for tabu search , the acceptance rate , @xmath41 and the performance improvement is of o(n ) .",
    "however , for simulated annealing @xmath42 is a function of the qap instance and the number of iterations performed in a run .",
    "we know of no method of determining the acceptance rate _ a priori_. hence , in section [ acceptancerate ] we measure @xmath25 for different qap instances and various values of @xmath14 to get a sense of the performance improvement we can expect .",
    "we perform numerical experiments on two classes of qap instances : random instances and structured instances .",
    "the random instances are created in the same manner as the taixxa instances ( taillard , 1991 ) in qaplib ( burkard et al .",
    "1997 ) ; the @xmath43 and @xmath44 matrices are symmetric with zero diagonal ; the matrix elements are chosen from independent uniform distributions .",
    "the structured instances are the taixxxe instances created by taillard ( drezner et al . , 2005 ) designed to model real - world applications which are difficult to treat using iterative heuristics such as sa ; the instances are composed of matrices which are not random they are available at http://mistic.heig-vd  .ch",
    "/ taillard/.    all runs were performed on systems with intel xeon 2.4 ghz processors .",
    "to get an idea of the performance improvement we may expect , we measure the acceptance rate for a range of problem sizes and number of iterations for the problem instances discussed above .",
    "we use the c++ implementation written by taillard that implements the sa heuristic of connolly(1990 ) .",
    "taillard s code is available at http://mistic.heig-vd.ch/taillard/ .      in fig .",
    "[ pacc](a ) , we plot the acceptance rates @xmath25 for the random instances versus the number of iterations performed for various problem sizes .",
    "we note that @xmath25 decreases with increasing @xmath14 until reaching a minimum after which @xmath25 increases slowly .",
    "the location of the minimum in @xmath25 is dependent on @xmath0 ; the larger the problem size , the higher the number of iterations at which the minimum is reached . in [ accrapp ] , we provide insights into this behavior .",
    "we also note that for large numbers of iterations , @xmath25 is lower for larger problem sizes .",
    "this is fortuitous because from eq .",
    "( [ f ] ) a lower value of @xmath25 is needed to achieve the same performance improvement factor if @xmath0 is increased .      in fig .",
    "[ pacc](b ) , we plot the acceptance rate for the structured instances .",
    "the overall behavior is the same as for the random instances , but after the minimum is reached , @xmath25 does not increase with @xmath14 . in [ accsapp ] ,",
    "we provide explain this behavior . also for instances of approximately the same size",
    ", @xmath25 is higher for the structured instances than for the random instances .",
    "this implies that the performance improvement for the structured instances will not be as great as for the random instances .",
    "we use the taillard code as a base for our implementation described in section [ approach ] . for the random instances , in fig .",
    "[ pxxxr ] we plot cpu time vs the number of iterations for the traditional approach and for our @xmath18-matrix approach .",
    "note that the times for the traditional approach are linear with the number of iterations , consistent with eq .",
    "( [ trad ] ) .",
    "the @xmath18-matrix approach results are coincident with those of the traditional approach until eq .",
    "( [ critical ] ) is satisfied , at which point it is more efficient to use the @xmath18 matrix . from this point on , the @xmath18-matrix approach",
    "cpu times are lower than those of the traditional approach .",
    "similar results hold for the structured instances as shown in fig .",
    "[ pxxxs ] .    in fig .",
    "[ ps ] , we plot the measured performance improvement @xmath45 for random and structured instances . there is no performance improvement until the number of iterations @xmath46 .",
    "this reflects the fact that below this number of iterations eq . ( [ critical ] ) does not hold and the traditional method is used .",
    "we see that the relative performance of the @xmath18-matrix approach improves with increasing problem size , from which we can infer from eq .",
    "( [ f ] ) that the acceptance rate decreases faster than the problem size as the problem size increases .",
    "we develop an implementation of the simulated annealing heuristic for the quadratic assignment problem which runs significantly faster than the traditional implementation ; the simulated annealing concept and algorithm for the qap are unchanged .",
    "our approach is motivated by the work of taillard ( 1991 ) who took a similar approach in implementing tabu search for the quadratic assignment problem . that the technique has not been applied to sa until now may be due to the fact that it does not provide significant benefit unless a large number of iterations are applied to a large qap instance",
    "; this is now possible with the improvement of computing capabilities over the last 20 years .",
    "being able to perform sa with a large number of iterations on large qap instances is important because ( a ) many real world problems are significantly larger than the size of problems to which sa has been traditionally applied and ( b ) the quality of the sa solution improves as the number of iterations is increased ( paul , 2010 ) .",
    "also , in paul ( 2010 ) it was shown that for high quality solutions , the performance of sa is superior to that of tabu search .",
    "the current work makes this finding stronger because of the improved performance of sa .",
    "@xmath47{p128.eps } \\includegraphics[width={8.0cm}]{p256.eps } \\\\",
    "\\includegraphics[width={8.0cm}]{p512.eps } \\includegraphics[width={8.0cm}]{p1024.eps } \\\\",
    "\\includegraphics[width={8.0cm}]{p2048.eps } \\includegraphics[width={8.0cm}]{p4096.eps } \\\\",
    "\\end{array } $ ]     +   +",
    "following taillard ( 1991 ) , starting from an assignment of facilities @xmath22 let the resulting assignment after swapping facilities @xmath12 and @xmath48 be @xmath49 .",
    "that is : @xmath50 for a symmetrical matrix with a null - diagonal , the cost @xmath23 of swapping @xmath12 and @xmath48 is : @xmath51    to calculate @xmath52 for any @xmath20 and @xmath21 with complexity o(n ) , we can use equation ( [ eqfull ] ) . for asymmetric matrices or matrices with non - null diagonals , a slightly more complicated version of equation ( [ eqfull ] ) also of complexity o(n )",
    "is given by burkhard and rendl ( 1984 ) .",
    "in the case that @xmath20 and @xmath21 are different from @xmath12 or @xmath48 , we can calculate @xmath52 with complexity @xmath26 with @xmath53 using the value @xmath19 calculated in the previous iteration .",
    "since there are @xmath28 matrix entries with @xmath20 and @xmath21 different from @xmath12 or @xmath48 , these contribute complexity @xmath28 to the @xmath18 matrix update .",
    "there are @xmath13 entries with @xmath20 and @xmath21 not different from @xmath12 or @xmath48 each of which requires the @xmath13 calculation of eq .",
    "( [ eqfull ] ) .",
    "these entries thus also contribute complexity @xmath28 and the overall complexity of updating @xmath18 is @xmath28 .",
    "because the performance improvement depends critically on the acceptance rate as shown in eq .",
    "( [ f ] ) , here we explore the behavior of the acceptance rate as shown in fig .",
    "[ pacc ] . in order to do this ,",
    "we first provide more details of the cooling schedule of the sa algorithm ( connolly , 1990 ) and describe how an sa run progresses .",
    "the details of the cooling schedule are as follows : at the start of each heuristic run , the temperature is set to a high value @xmath54 . after each iteration",
    ", the temperature is reduced using the recursive relation @xmath55 where @xmath56 to reach a desired final temperature @xmath57 when all iterations are exhausted .",
    "note from eq .",
    "( [ beta ] ) that the temperature decreases in smaller steps for larger @xmath14 .",
    "the temperature decrease may end before @xmath57 is reached if a specified number , @xmath58 , of consecutive iterations in which no swap is performed is encountered .",
    "we denote the temperature at which this occurs as @xmath59 .    at the beginning of an sa run ,",
    "the initial qap configuration is random and there are relatively many moves which will result in a cost decrease . as the run progresses , the number of moves which will result in a lower cost decreases . also as the run progresses , the decreasing temperature results in a lower frequency of swaps with a positive incremental cost @xmath9 .",
    "thus the instantaneous acceptance rate @xmath39 ( defined in section [ approach ] ) decreases as the run progresses .",
    "eventually if the number of iterations @xmath14 specified for the run is large enough , the number of consecutive iterations in which a swap is not performed will exceed the specified limit @xmath58 and the temperature and @xmath39 will no longer decrease .    with this background",
    "we now discuss the behavior of the acceptance rates @xmath25 shown in fig .",
    "[ pacc ] for both the random and structured instances .      to study the acceptance rate @xmath25 at a more granular level , for various values of @xmath14 , fig .",
    "[ pir ] plots the instantaneous acceptance rate @xmath39 versus the iteration number @xmath1 for @xmath60 ; plots for other values of @xmath0 are similar . for @xmath61 , the plots for",
    "each value of @xmath14 eventually reach constant values @xmath62 .",
    "the plots become constant at the iteration at which no swaps have been performed in the previous @xmath58 iterations at which point the temperature is fixed at @xmath59 .",
    "we also note that the constant values @xmath62 increase with increasing @xmath14 .",
    "this behavior can be understood by plotting @xmath59 . for the random @xmath60 instance , in fig .",
    "[ ptx ] we plot @xmath59 as function of @xmath14 and  note that @xmath59 increases with increasing @xmath14 .",
    "this reflects the fact that because of the the slower cooling for larger number of iterations , sa finds a deeper local minima from which it can not escape easily at a higher temperatures for larger @xmath14 .",
    "the increase in @xmath62 as @xmath14 increases explains the increase in @xmath25 for larger values of @xmath14 in fig .",
    "[ pacc ] ( a ) .    for @xmath63 , the plots in fig .",
    "[ pir ] terminate at lower and lower values as @xmath14 increases .",
    "this explains the initial decrease in the acceptance rate as a function of @xmath14 in fig .",
    "[ pacc](a ) .",
    "the plots do not reach a constant value and terminate at a higher value than plots with @xmath64 .",
    "this occurs because despite the low temperatures at the end of run which inhibit cost - raising swaps , there are sufficient numbers of cost - reducing swaps to maintain a relatively high value of @xmath39 .      as with the random instances , in order to understand the behavior in fig .",
    "[ pacc](b ) we must study the instantaneous acceptance rate @xmath39 . for various values of @xmath14 , fig .",
    "[ pis ] plots @xmath39 versus the @xmath1 .",
    "as opposed to the random instances , all plots decrease monotonically and never level off to a constant value .",
    "this behavior is explained by the fact that for the structured instances studied , the limit @xmath58 on the number of consecutive iterations in which no swap is made is never reached ; there are always low cost swaps which can be made .",
    "the temperature always decreases to @xmath57 and as the temperature decreases @xmath39 decreases . because the plots in fig .",
    "[ pis](b ) for larger @xmath14 all scale with the number of iterations , the value reached by the plots in fig . [ pacc](b ) remain constant for large @xmath14 .",
    "similar to the behavior for the random instances and for the same reason , for @xmath65 , the @xmath39 plots terminate at a higher value than plots with @xmath61 . as with the random instances , this explains the initial decrease in the acceptance rate as a function of @xmath14 in fig .",
    "[ pacc ] ( b ) .",
    "instance , instantaneous acceptance rate vs iteration number @xmath1 for ( from left to right ) @xmath66 and @xmath67 .",
    "( b ) detail for @xmath68 ( black ) , @xmath69 ( medium gray ) , @xmath70 ( light gray ) .",
    ", title=\"fig : \" ] +   instance , instantaneous acceptance rate vs iteration number @xmath1 for ( from left to right ) @xmath66 and @xmath67 .",
    "( b ) detail for @xmath68 ( black ) , @xmath69 ( medium gray ) , @xmath70 ( light gray ) .",
    ", title=\"fig : \" ] +     instance , temperature @xmath59 versus number of iterations , i , specified for run .",
    "@xmath59 is the temperature at which the specified number of consecutive iterations in which a swap is not performed is encountered .",
    "the temperature is not lowered below this value . ]",
    "instance , instantaneous acceptance rate vs iteration number @xmath1 for ( from left to right ) @xmath66 and @xmath67 .",
    "( b ) detail for @xmath71 and @xmath70 .",
    ", title=\"fig : \" ] +   instance , instantaneous acceptance rate vs iteration number @xmath1 for ( from left to right ) @xmath66 and @xmath67 .",
    "( b ) detail for @xmath71 and @xmath70 .",
    ", title=\"fig : \" ] +",
    "the c++ program which implements the sa heuristic described in this article can be found , in the online version , at doi : xxxxxx .",
    "anstreicher , k. , 2003 .",
    "recent advances in the solution of quadratic assignment problems . mathematical programming 97 , 27 - 42 .                de carvalho jr . , s. a. , rahmann , s. , 2006 .",
    "microarray layout as a quadratic assignment problem . in hudson ,",
    "d. _ et al .",
    "_ german conference on bioinformatics ( gcb ) _ , _ lecture notes in infomatics_. p-83 , 1120 .",
    "drezner , z. , hahn , p.m .",
    ", taillard  .",
    "d. , 2005 .",
    "recent advances for the quadratic assignment problem with special emphasis on instances that are difficult for meta - heuristic methods .",
    "annals of operations research 139 , 65 - 94 .",
    "james , t. , rego , c. , glover , f. , 2009a .",
    "multistart tabu search and diversification strategies for the quadratic assignment problem .",
    "ieee tran . on systems ,",
    "man , and cybernetics part a : systems and humans 39 , 579 - 596 .",
    "pardalos , p. m. , pitsoulis , l. s. , resende , m. g. c. , 1997 .",
    "algorithm 769 : fortran subroutines for approximate solution of sparse quadratic assignment problems using grasp .",
    "acm transactions on mathematical software ( toms ) 23 , 196 - 208 ."
  ],
  "abstract_text": [
    "<S> the quadratic assignment problem ( qap ) is one of the most difficult combinatorial optimization problems . </S>",
    "<S> one of the most powerful and commonly used heuristics to obtain approximations to the optimal solution of the qap is simulated annealing ( sa ) . </S>",
    "<S> we present an efficient implementation of the sa heuristic which performs more than 100 times faster then existing implementations for large problem sizes and a large number of sa iterations . </S>"
  ]
}