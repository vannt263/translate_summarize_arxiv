{
  "article_text": [
    "with the proliferation of smart mobile devices , computationally intensive applications , such as online gaming , video conferencing and 3d modeling , are becoming prevalent .",
    "however , the mobile devices normally possess limited resources , e.g. , limited battery energy and computation capability of local cpus , and thus may suffer from unsatisfactory computation experience .",
    "mobile - edge computing ( mec ) emerges as a promising remedy . by offloading the computation tasks to the physically proximal mec servers ,",
    "the quality of computation experience , e.g. , the device energy consumption and the execution delay , could be greatly improved @xcite .",
    "computation offloading policies play critical roles in mec , and determine the efficiency and achievable computation performance @xcite . specifically , as computation offloading requires wireless data transmission , optimal computation offloading policies should take the time - varying wireless channel into consideration . in @xcite ,",
    "a stochastic control algorithm adapted to the wireless channel condition was proposed to decide the offloaded software components .",
    "a game - theoretic computation offloading approach for multi - user mec systems was proposed in @xcite , and this study was extended to multi - cell settings in @xcite . besides , the energy - delay tradeoff in cloud computing systems with heterogeneous types of computation tasks and multi - core mobile devices was investigated using lyapunov optimization techniques in @xcite and @xcite , respectively .",
    "in addition , a dynamic computation offloading policy for mec systems with mobile devices powered by renewable energy was developed in @xcite .    for most mobile applications ,",
    "the execution time is in the range of tens of milliseconds , which is much longer than the time duration of a channel block , whose typical value is a few milliseconds . in other words ,",
    "the execution process may experience multiple channel blocks , which makes the computation offloading policy design a highly challenging two - timescale stochastic optimization problem .",
    "in particular , in a larger timescale , whether to offload a task to the mec server or not needs to be decided , while in a smaller timescale , the transmission policy for offloading the input data of an application should adapt to the instantaneous wireless channel condition . to handle this issue , an initial investigation for two - timescale computation",
    "offloading policy design was conducted in @xcite , which , however , only considered to minimize the energy consumption of executing a single computation task and the queueing delay incurred by multiple tasks was ignored . moreover , with mec , the potential of executing multiple tasks concurrently should be fully exploited in order to utilize the local and cloud computation resources efficiently and improve the quality of computation experience to the greatest extent .    in this paper , we will investigate an mec system that allows parallel computation task execution at the mobile device and at the mec server .",
    "the execution and computation offloading processes of the computation tasks running at the mobile device may be across multiple channel blocks , and the generated but not yet processed tasks are waiting in a task buffer .",
    "the average delay of each task and the average power consumption at the mobile device under a given computation task scheduling policy are first analyzed using markov chain theory .",
    "we then formulate the power - constrained delay minimization problem .",
    "an efficient one - dimensional search algorithm is developed to find the optimal stochastic computation offloading policy .",
    "simulation results show that the proposed stochastic computation task scheduling policy achieves substantial reduction in the execution delay compared to the baseline schemes .",
    "the rest of this paper is organized as follows .",
    "we introduce the system model in section ii . the average execution delay and the power consumption of the mobile device under a given stochastic computation task scheduling policy",
    "are analyzed in section iii . in section iv ,",
    "a power - constrained delay minimization problem is formulated and the associated optimal task scheduling policy is obtained .",
    "simulation results are shown in section v and conclusions are drawn in section vi .",
    ", scaledwidth=48.0% ]    we consider a mobile - edge computing ( mec ) system as shown in fig .",
    "[ fig : system - model ] , where a mobile device is running computation - intensive and delay - sensitive applications with the aid of an mec server .",
    "this mec server could be a small data center installed at the wireless access point . by constructing a virtual machine associated with the mobile device",
    ", the mec server can execute the computation tasks on behalf of the mobile device @xcite .",
    "the cpu and the transmission unit ( tu ) at the mobile device are of particular interests , which can execute the computation tasks locally and transmit the input data of the computation tasks to the mec server for cloud computing , respectively . besides , due to the limited battery size and in order to prolong the device lifetime , we assume that the average power consumption at the mobile device is constrained by @xmath0 .",
    "we assume that time is divided into equal - length time slots and the time slot length is denoted as @xmath1 . at the beginning of each time slot , with probability @xmath2 , a new task is generated .",
    "the computation tasks can either be executed at the mobile device by the local cpu or be offloaded to the mec server for cloud computing .",
    "the arrived but not yet executed tasks will be queued in a task buffer with a sufficiently large capacity @xmath3 .",
    "denote @xmath4,v_{c}\\left[t\\right]\\in\\{0,1\\}$ ] as the computation task scheduling decision indicators for the @xmath5th time slot , i.e. , if a task is decided to be sent to the local cpu ( mec server ) in the @xmath5th time slot , @xmath4=1 $ ] ( @xmath6=1 $ ] ) ; otherwise @xmath4=0 $ ] ( @xmath6=0 $ ] ) .",
    "thus , there are four possible computation task scheduling decisions , i.e. , @xmath7,v_{c}\\left[t\\right]\\right)|\\left(0,1\\right),\\left(1,0\\right),\\left(1,1\\right),\\left(0,0\\right)\\}$ ] . in each time slot",
    ", the decision is made by the mobile device , and the dynamic of the task buffer can be expressed as @xmath8=\\min\\{\\left(q\\left[t\\right]-v_{l}\\left[t\\right]-v_{c}\\left[t\\right]\\right)^{+}+a\\left[t\\right],q\\ } , t=1,\\cdots , \\label{qdynamic}\\ ] ] where @xmath9 , @xmath10 $ ] is the number of computation tasks in the buffer at the beginning of the @xmath5th time slot , and @xmath11\\in\\{0,1\\}$ ] is the task arrival indicator , i.e. , if a task arrives at the @xmath5th time slot , we have @xmath11=1 $ ] ; otherwise , we have @xmath11=0 $ ] .",
    "* i ) local computation model : * we assume that the cpu at the mobile device is operating at frequency @xmath12 ( in hz ) if a task is being executed , and its power consumption is given by @xmath13 ( in w ) ; otherwise , the local cpu is idle and consumes no power .",
    "the number of required cpu cycles for executing a task successfully is denoted as @xmath14 , which depends on the types of mobile applications @xcite .",
    "in other words , @xmath15 time slots are needed to complete a task .",
    "we use @xmath16\\in \\{0,1,\\cdots , n-1\\}$ ] to denote the processing state of the local cpu , where @xmath16=0 $ ] means the local cpu is idle , while @xmath16= n$ ] ( @xmath17 ) indicates that one task is being processed at the local cpu , and @xmath18 more time slots are required to complete the task .",
    "for instance , @xmath16=n-1 $ ] indicates that the task will be completed at the end of time slot @xmath5 and the local cpu will be available for a new task starting from the @xmath19th time slot .    *",
    "ii ) cloud computation model : * in order to offload a computation task to the mec server , all the input data of the task should be successfully delivered to the mec server over the wireless channel . without loss of generality , we assume the input data of each task consists of @xmath20 equal - size data packets and each packet contains @xmath21 bits . for simplicity , on - off power control is adopted .",
    "we assume the channel side information is available at the mobile device , and thus a packet can be successfully transmitted to the mec server if the achievable throughput in the @xmath5th time slot , @xmath22,p_{\\rm{tx}}\\right)$ ] , is no smaller than the packet size , i.e. , @xmath22,p_{\\rm{tx}}\\right)=b\\log_{2}\\left(1+\\frac{\\gamma\\left[t\\right ] p_{\\rm{tx}}}{n_{0}b}\\right)\\geq r$ ] , where @xmath23 $ ] is the channel power gain in the @xmath5th time slot , @xmath24 is the transmit power , @xmath25 is the system bandwidth and @xmath26 is the noise power spectral density at the receiver ; otherwise , the transmitter will be silent and consume no power .",
    "we use @xmath27\\in\\{0,1,\\cdots , m\\}$ ] to represent the state of the tu , where @xmath27=0 $ ] means that the tu is available for offloading a task to the mec server , and @xmath27=m \\left(1\\leq m\\leq m\\right)$ ] means that the @xmath28th packet of one task is scheduled to transmit in time slot @xmath5 .",
    "when all the input bits are successfully received , the mec server begins to execute the task .",
    "assume that the mec server is equipped with a multi - core cpu so that concurrent execution of multiple tasks is feasible .",
    "similar to local computation , @xmath29 time slots are required for completing the task at the mec server , where @xmath30 denotes the cpu - cycle frequency at the mec server .",
    "besides , we denote the delay for feeding back the computation results as @xmath31 , which is viewed as a constant .",
    "in the considered system , the system state @xmath32 $ ] can be characterized by a triplet , i.e. , @xmath33=(q[t],c_{t}[t],c_{l}[t])$ ] .",
    "thus , the state space @xmath34 can be expressed as @xmath35 , where `` @xmath36 '' denotes the cartesian product . in the following",
    ", we will introduce the stochastic computation task scheduling policy , and analyze the average delay of each task and the average power consumption at the mobile device using markov chain theory .      in order to minimize the average delay of each task and to meet the average power constraint ,",
    "the mobile device should make the computation task scheduling decision at each time slot , i.e. , whether to schedule a task for local computing or to offload it to the mec server . to characterize the computation task scheduling policy , we introduce a set of probabilistic parameters @xmath37 where @xmath38,\\forall \\bm{\\tau}\\in\\mathcal{s},k=1,2,3,4 $ ] , which is a mapping from the system state to the probability space .",
    "the superscript @xmath39 in @xmath37 indicates the four possible decisions as mentioned in section ii - a .",
    "in particular , @xmath40 refer to the computation task scheduling decision @xmath41 , respectively .",
    "it is straightforward that each computation task can only be scheduled for local computing ( cloud computing ) when the local cpu ( tu ) is idle .",
    "when the task buffer is empty , i.e. , @xmath42=0 $ ] , there is no task to be scheduled , i.e. , @xmath43 for @xmath44 and @xmath45 . in the following , we consider the cases with @xmath10>0 $ ] assuming different availabilities of the cpu and tu at the mobile device .",
    "* case i : * @xmath46=c_{t}[t]=0 $ ] . in this case , both the local cpu and the transmitter are idle .",
    "thus , at most two computation tasks can start to be processed , i.e. , one for local computing and the other for computation offloading . given the system state @xmath32=(q[t],c_{t}[t],c_{l}[t])=(i,0 , 0)$ ] ( @xmath47 )",
    ", the computation task scheduling policy can be expressed as @xmath48,v_{l}[t])=\\begin{cases } ( 0,1 ) & w.p.\\ , g_{\\bm{\\tau}}^{1},\\\\ ( 1,0 ) & w.p.\\ , g_{\\bm{\\tau}}^{2},\\\\ ( 1,1 ) & w.p.\\ , g_{\\bm{\\tau}}^{3},\\\\ ( 0,0 ) & w.p.\\,(1-\\sum_{k=1}^{3}g_{\\bm{\\tau}}^{k } ) .",
    "\\end{cases } \\label{casei1}\\ ] ] when there is only one task buffered in the queue , i.e. , @xmath49 , decision @xmath50 is infeasible and thus the computation task scheduling policy can be expressed as @xmath48,v_{l}[t])=\\begin{cases } ( 0,1 ) & w.p.\\ , g_{\\bm{\\tau}}^{1},\\\\ ( 1,0 ) & w.p.\\ , g_{\\bm{\\tau}}^{2},\\\\ ( 0,0 ) & w.p.\\,(1-\\sum_{k=1}^{2}g_{\\bm{\\tau}}^{k } ) .",
    "\\end{cases } \\label{casei2}\\ ] ]    * case ii : * @xmath46=0 $ ] and @xmath51 > 0 $ ] .",
    "the local cpu is idle while the transmitter is occupied .",
    "thus , the mobile device can decide whether to start to compute one task locally or to remain idle .",
    "hence , @xmath52 ( @xmath53 ) , the computation task scheduling policy can be expressed as @xmath48,v_{l}[t])=\\begin{cases } ( 0,1 ) & w.p.\\ , g_{\\bm{\\tau}}^{1},\\\\ ( 0,0 ) & w.p.\\,(1-g_{\\bm{\\tau}}^{1 } ) .",
    "\\end{cases } \\label{caseii}\\ ] ]    * case iii : * @xmath46 > 0 $ ] and @xmath51=0 $ ] .",
    "the transmitter is idle and the mobile device decides whether to send one computation task to the mec server over the wireless link .",
    "hence , the task scheduling policy can be represented by @xmath48,v_{l}[t])=\\begin{cases } ( 1,0 ) & w.p.\\ , g_{\\bm{\\tau}}^{2},\\\\ ( 0,0 ) & w.p.\\,(1-g_{\\bm{\\tau}}^{2 } ) .",
    "\\end{cases } \\label{caseiii}\\ ] ]    * case iv : * @xmath46>0 $ ] and @xmath51>0 $ ] . both the local cpu and the tu",
    "are occupied , and @xmath54,v_{l}[t])=(0,0)\\}=g_{\\bm{\\tau}}^{4}=1 $ ] .",
    "it is worthwhile to note that the performance of the mec system depends on the adopted computation offloading policy , which can be characterized by the set of parameters @xmath37 and the optimal computation offloading policy will be developed in section iv .      in this subsection",
    ", we will analyze the average delay of each task and the average power consumption at the mobile device by modeling the mec system as a markov chain .",
    "let @xmath55 denote the one - step state transition probability from state @xmath56 to @xmath57 .",
    "it can be checked under a given computation task scheduling policy @xmath58 .",
    "thus , the steady - state distribution @xmath59 can be obtained by solving the following linear equation set @xcite : @xmath60    * average delay : * as each computation task experiences a waiting stage and a processing stage ( either local or cloud computing ) after its arrival , according to the little s theorem @xcite , the average queueing delay can be expressed as @xmath61=i\\}=\\frac{1}{\\alpha}\\sum\\limits _",
    "{ i=0}^{q}i\\sum\\limits _ { m=0}^{m}\\sum\\limits _ { n=0}^{n-1}\\pi_{(i , m , n)},\\label{eq : queuing_time}\\ ] ] where @xmath2 denotes the task arrival rate and @xmath62=i\\}=\\sum_{m=0}^{m+1}\\sum_{n=0}^{n}\\pi_{(i , m , n)}$ ] .",
    "recall that the local execution time for each task is @xmath63 time slots , and the processing time of cloud computing includes the time spent on transmitting the input data of the task @xmath64 , the execution time at the mec server @xmath65 , as well as the time of feeding back the computation result @xmath66 , i.e. , @xmath67 where the average transmission time for each computation task is given by @xmath68 in ( [ eq : tx_time ] ) , @xmath69,p_{\\rm{tx}}\\right)\\geq r\\}$ ] denotes the probability that the channel in not in outage .",
    "consequently , the average processing time of each task can be expressed as @xmath70 where @xmath71 denotes the proportion of computation tasks that are executed locally at the mobile device in the long run and can be computed according to the following equation : @xmath72 where the state sets @xmath73 are defined as @xmath74 , @xmath75 and @xmath76 , respectively .",
    "therefore , the average delay of each computation task is the sum of the queueing delay and the processing latency , which can be written as @xmath77    * average power consumption : *    let @xmath78 and @xmath79 denote the probabilities of local computations and successful packet transmissions with power consumptions @xmath13 and @xmath80 , respectively , given the system state @xmath81 .",
    "thus , the average power consumption at the mobile device is given by @xmath82 where the power coefficients @xmath78 and @xmath79 for each state @xmath56 can be expressed as @xmath83 and @xmath84 respectively .",
    "the derivation of the power coefficients @xmath78 and @xmath79 is deferred to appendix [ sec : power_cof_state ] .",
    "therefore , by averaging over all the state @xmath85 , we have @xmath86 with the average power coefficients given by @xmath87 and @xmath88 , respectively .",
    "in this section , we will formulate an optimization problem to minimize the average delay of each computation task subject to the average power constraint at the mobile device .",
    "an optimal algorithm will then be developed for the formulated optimization problem .",
    "based on the delay and power analysis in section iii - b , the power - constrained delay minimization problem can be formulated in @xmath89 : @xmath90{cl } \\mathcal{p}_{1}:\\min\\limits_{\\{g_{\\bm{\\tau}}^{k}\\ } } & \\bar{t}=\\frac{1}{\\alpha}\\sum\\limits _",
    "{ i=0}^{q}i\\sum\\limits _ { m=0}^{m}\\sum\\limits _ { n=0}^{n-1}\\pi_{(i , m , n)}+\\eta n+(1-\\eta)t_{c}\\\\ \\ \\ \\ \\ { \\rm{s.t . } } & \\begin{cases } \\bar{p}\\leq\\bar{p}_{max } , & \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ( \\mathrm{a})\\\\ \\sum_{\\bm{\\tau}{'}\\in\\mathcal{s}}\\chi_{\\bm{\\tau}{'},\\bm{\\tau}}\\pi_{\\bm{\\tau}{'}}=\\pi_{\\bm{\\tau}},\\,\\bm{\\tau}\\in\\mathcal{s } , & \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\   ( \\mathrm{b})\\\\ \\sum\\limits _ { i=0}^{q}\\sum\\limits _ { m=0}^{m}\\sum\\limits _ { n=0}^{n-1}\\pi_{(i , n , m)}=1 , & \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\   ( \\mathrm{c})\\\\ \\sum_{k=1}^{4}g_{(i , m , n)}^{k}=1,\\,\\forall i , m , n , & \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ( \\mathrm{d})\\\\ g_{(i , m , n)}^{k}\\geq0,\\,\\forall i , m , n , k , & \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ( \\mathrm{e } ) \\end{cases } \\end{array}\\label{eq : opt_problem}\\ ] ] where ( [ eq : opt_problem].a ) is the average power constraint , ( [ eq : opt_problem].b ) and ( [ eq : opt_problem].c ) denote the balance equation set , and @xmath71 is given by ( [ eq : prob_eta ] ) . it is worthwhile to note that once @xmath37 is determined , @xmath91 can be obtained according to ( [ eq : steady_state ] ) . however , as @xmath89 is non - convex , the optimal solution is not readily available . in the following",
    ", we will reformulate @xmath89 into a series of linear programming ( lp ) problems in order to obtain its optimal solution .",
    "first , we define the occupation measure @xmath92 as @xmath93 , which is the probability that the system is in state @xmath94 while decision @xmath39 is made @xcite . by definition , @xmath95 , and thus @xmath96 .    by replacing @xmath97 with @xmath98 in @xmath89 ,",
    "we obtain an equivalent formulation of @xmath89 as follows : @xmath90{cl } \\mathcal{p}_{2}:\\min\\limits _ { \\bm{x},\\eta } & \\bar{t}=\\frac{1}{\\alpha}\\sum\\limits_{\\bm{\\tau}\\in\\mathcal{s}}\\sum\\limits _ { k=1}^{4}i\\cdot x_{\\bm{\\tau}}^{k}+\\eta n+(1-\\eta)t_{c}\\\\ \\ \\ \\ \\ { \\rm{s.t . } } & \\begin{cases } \\nu_{loc}(\\bm{x})p_{loc}+\\beta\\nu_{tx}(\\bm{x})p_{tx}\\leq\\bar{p}_{max } , & \\ \\ \\ \\ \\   ( \\mathrm{a})\\\\ \\gamma(\\bm{x},\\eta)=0 , & \\ \\ \\ \\ \\ ( \\mathrm{b})\\\\ f_{\\bm{\\tau}}(\\bm{x})=0,\\,\\forall\\bm{\\tau}=(i , m , n)\\in\\mathcal{s } , & \\ \\ \\ \\ \\   ( \\mathrm{c})\\\\ \\sum\\limits _ { i=0}^{q}\\sum\\limits _ { m=0}^{m}\\sum\\limits _ { n=0}^{n-1}\\sum\\limits _ { k=1}^{4}x_{(i , m , n)}^{k}=1 , & \\ \\ \\ \\ \\   ( \\mathrm{d})\\\\ x_{(i , m , n)}^{k}\\geq0,\\forall i , m , n , k,\\,\\eta\\in[0,1 ] , & \\ \\ \\ \\ \\ ( \\mathrm{e } ) \\end{cases } \\end{array}\\label{eq : lp_problem}\\ ] ] where @xmath99 and @xmath100 are linear functions of the variables @xmath101 given by @xmath102 and @xmath103 respectively , and @xmath104 and @xmath105 can be expressed as @xmath106 and @xmath107 respectively .",
    "denotes the probability that the current system state is @xmath108 and decision @xmath39 is made , while the system state in the next time slot is @xmath56 , which is independent with @xmath37 in contrast to @xmath109 .",
    "note that @xmath110 . ]",
    "the optimal solution and the optimal value of @xmath111 are denoted as @xmath112 and @xmath113 , respectively .",
    "once @xmath114 is known , the optimal computation task scheduling policy @xmath115 can be obtained as @xmath116    due to the product form of @xmath71 and @xmath117 in ( [ eq : lp_problem].b ) , @xmath111 is still a non - convex problem .",
    "fortunately , we observe that for a given value of @xmath71 , @xmath111 reduces to an lp problem in terms of variables @xmath92 .",
    "therefore , we can first obtain the optimal solution @xmath118 for arbitrary @xmath119 $ ] and conduct a one - dimensional search for the optimal @xmath120 .",
    "detailed procedures for solving @xmath111 are summarized in algorithm [ alg : lp_linesearch ] .",
    "set @xmath121 and @xmath122 as a sufficiently large integer ;    solve the lp problem ( [ eq : lp_problem ] ) with a fixed @xmath71 ;    obtain the optimal solution @xmath118 and the optimal value @xmath123 ;    update the variable @xmath124 ;    find the optimal solution ( @xmath125 ) with @xmath126 and @xmath127 .",
    "in this section , we evaluate the performance of the proposed stochastic computation task scheduling policy by simulations . in simulations ,",
    "we assume that the input data size of each task is @xmath128 kbits and @xmath129 cpu cycles @xcite .",
    "the path - loss constant is set to be @xmath130 .",
    "each task is encapsulated into one packet , and thus @xmath131 and @xmath132 bits .",
    "in addition , we set @xmath133 ms , @xmath134 mhz , @xmath135 w , @xmath136 w , @xmath137 ghz , and @xmath138 ghz .",
    "the time @xmath66 is approximated as zero , and thus @xmath139 , @xmath140 , @xmath141 , @xmath142 w , @xmath143 , and @xmath144 .",
    ", scaledwidth=45.0% ]    , scaledwidth=45.0% ]    we introduce three baseline task scheduling policies , including the * local execution policy * , which executes all the computation tasks locally at the mobile device ; the * cloud execution policy * , where all the tasks are offloaded to the mec server for cloud computing ; and the * greedy offloading policy * , where the mobile device schedules the computation tasks waiting in the buffer to the local cpu or the mec server for task executions whenever the local cpu or tu is idle .",
    "the average delay @xmath145 and the proportion of computation tasks that are executed locally at the mobile device @xmath71 achieved by different computation task scheduling policies are shown in fig.@xmath146[fig : delay_arrival ] and fig.@xmath146[fig : eta_arrival ] , respectively .",
    "it can be observed from the figures that , the average delays ( proportions of tasks executed locally ) achieved by the local execution , cloud execution and the optimal policy , increase with the average computation task arrival rate @xmath2 , which is in accordance with our intuition .",
    "in contrast , the behavior of the greedy offloading policy is sharply different from that of the other three policies : less computation tasks are scheduled to the local cpu , and @xmath71 decreases with @xmath2 , as shown in fig.@xmath146[fig : eta_arrival ] .",
    "this is due to the fact that the execution time required by mec is much smaller than that by the local cpu , i.e. , @xmath147 .",
    "when @xmath2 increases , more arrived tasks should be sent to the mec server for faster completion to adapt to the increasing task arrival rate .",
    "consequently , the average delay achieved by the greedy offloading policy fluctuates since the average queueing delay increases with @xmath2 , while the processing time of each task @xmath148 decreases with @xmath2 .",
    "when the local ( cloud ) execution policy is applied , @xmath71 equals @xmath149 ( @xmath150 ) , and hence the execution time @xmath148 ( c.f . ) is a constant .",
    "thus , the average delay @xmath151 is solely determined by the average queueing delay and increases with the task arrival rate .",
    "when the optimal offloading policy is applied , @xmath152 when @xmath153 as shown in fig.@xmath146[fig : eta_arrival ] .",
    "in this case , the mobile device prefers to schedule all the tasks for cloud computing since the cloud execution time @xmath154 is much smaller than the local execution time @xmath63 and no parallel execution is needed .",
    "with @xmath2 grows beyond 0.12 , more tasks should be sent to the local cpu in a way that parallel local and cloud executions can be fully exploited to adapt to the increased task arrival rate .",
    "therefore , the average delay increases with the task arrival rate due to the increase of the processing time and queueing delay .",
    "when @xmath2 approaches @xmath155 , the behaviour of the optimal scheduling policy converges to the greedy offloading policy . among all the policies , the proposed optimal scheduling policy achieves the minimum average delay , and meanwhile , it enjoys the largest stable region , i.e. , it is capable of accommodating the maximum task arrival rate @xmath2 .",
    "this is because our proposed task scheduling policy employs parallel local and cloud executions in a delay - optimal manner .",
    "in this paper , we proposed a stochastic computation task scheduling policy for mec systems , incorporating different timescales in the task execution process and the channel fading process .",
    "based on the analysis of the average delay and the average power consumption at the mobile device , we developed an efficient one - dimensional search algorithm to find the optimal task scheduling policy .",
    "it was found that our proposed stochastic task scheduling policy achieves the minimum average delay in various scenarios compared to three baseline policies . for future investigation ,",
    "it would be interesting to extend this work to more general mec systems .    [ [ the - state - transition - probabilities - of - the - markov - chain - sectransition_prob ] ] the state transition probabilities of the markov chain [ sec : transition_prob ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~      * case i : * @xmath51=c_{l}[t]=0 $ ] . in this case , both the local cpu and the tu are idle and each of them is available for processing a new task . when at least two computation tasks are waiting in the task buffer , one of four",
    "computation task scheduling decisions can be chosen with probability @xmath156 , as presented in ( [ casei1 ] ) . by jointly considering all possible task arrival states and channel states , for any given @xmath157 ( @xmath158 )",
    ", the state transition probabilities can be expressed as @xmath159 where the state mapping function @xmath160 is defined as @xmath161 for example , state @xmath162 will transfer to state @xmath163 with probability @xmath164 , when one new task arrives at the task buffer and one waiting task is sent to the local cpu .",
    "when there is just one task in the task buffer , the mobile device has three possible decisions : local execution , cloud execution and remaining idle , as given by ( [ casei2 ] ) . accordingly , for @xmath165 , the state transition probability can be written as        when the task buffer is empty , neither local execution nor cloud execution is needed . in this case , the system state transits due to one new task arrival , and accordingly the state transition probability can be simplified as @xmath167    * case ii : * @xmath51>0 $ ] and @xmath46=0 $ ] . in this case , the local cpu is available to execute a new task while the task offloading is in process .",
    "when there is at least one packet in the task buffer , i.e. , @xmath168 ( @xmath169 ) , the computation task scheduling policy is given by ( [ caseii ] ) .",
    "accordingly , the state transition probabilities can be written as      when the task buffer is empty , there exist four possible state transitions with their transition probabilities given by @xmath171 depending on whether there are one new task arrival and one successful packet delivery .",
    "* case iii : * @xmath51=0 $ ] and @xmath46>0 $ ] .",
    "when the local cpu is busy in task execution while the tu is idle , the decision on task offloading is made with probability @xmath172 when the task buffer is non - empty , as shown in ( [ caseiii ] ) .",
    "similarly , the state transition probabilities can be obtained as              * case iv : * @xmath51>0 $ ] and @xmath46>0 $ ] . in this case",
    ", both of the local cpu and the tu are busy in processing . for @xmath81 ( @xmath179 , @xmath180,@xmath181 ) ,",
    "there also exist four possible state transitions with their transition probabilities given by        [ [ the - power - coefficients - mu_bmtauloc - and - mu_bmtautx - secpower_cof_state ] ] the power coefficients @xmath78 and @xmath79 [ sec : power_cof_state ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~      * case i : * @xmath51=c_{l}[t]=0 $ ] .",
    "when there are at least two computation tasks in the task buffer , local execution and task offloading are conducted with probabilities @xmath183 and @xmath184 , respectively .",
    "thus , for @xmath157 ( @xmath185 ) , the power coefficients , i.e. , the probabilities of consuming the execution power @xmath13 and transmission power @xmath80 , are given by @xmath186 and @xmath187 , respectively .",
    "when the system is in state @xmath165 , the local execution ( task offloading ) is conducted with probability @xmath188 @xmath189 .",
    "thus , we have @xmath190 and @xmath191 . when the task buffer is empty , i.e. , @xmath192 , the power coefficients are @xmath193 since no power is consumed for neither local execution nor task offloading .",
    "* case ii : * @xmath51>0 $ ] and @xmath46=0 $ ] .",
    "when the task buffer is non - empty , a computation task can be scheduled for local execution with probability @xmath188 and a packet of one task will be successfully transmitted to the mec server with probability @xmath194 .",
    "therefore , the power coefficients are equal to @xmath190 and @xmath195 . when the task buffer is empty , the power coefficients are equal to @xmath196 and @xmath195 for @xmath197 ( @xmath198 ) .",
    "* case iii : * @xmath51=0 $ ] and @xmath46>0 $ ] . in this case , the local cpu is executing one task while the tu is available for delivering one packet of a new task successfully delivered with probability @xmath199 when the task buffer is non - empty .",
    "hence , we have @xmath200 and @xmath191 for @xmath174 ( @xmath201 ) . when the task buffer is empty , the power coefficients are equal to @xmath200 and @xmath202 for @xmath177 ( @xmath178 ) .",
    "* case iv : * @xmath51>0 $ ] and @xmath46>0 $ ] .",
    "the power coefficients are @xmath200 and @xmath195 , since the local cpu is busy and one packet of a task will be successfully delivered with probability @xmath194 .",
    "s. barbarossa , s. sardellitti , and p. d. lorenzo , `` communicating while computing : distributed mobile cloud computing over 5 g heterogeneous networks , '' _ ieee signal process . mag .",
    "31 , no . 6 , pp .",
    "45 - 55 , nov . 2014 .",
    "s. sardellitti , g. scutari , and s. barbarossa , `` joint optimization of radio and computational resources for multicell mobile - edge computing , '' _ ieee trans .",
    "signal inf . process . over netw .",
    "_ , vol . 1 , no",
    "89 - 103 , jun .",
    "j. kwak , y. kim , j. lee , and s. chong , `` dream : dynamic resource and task allocation for energy minimization in mobile cloud systems , '' _ ieee j. sel .",
    "areas commun . _ ,",
    "2510 - 2523 , dec . 2015 .",
    "w. zhang , y. wen , k. guan , d. kilper , h. luo , and d. wu , `` energy - optimal mobile cloud computing under stochastic wireless channel , '' _ ieee trans .",
    "wireless commun .",
    "_ , vol.12 , no .",
    "9 , pp . 4569 - 4581 , sep ."
  ],
  "abstract_text": [
    "<S> mobile - edge computing ( mec ) emerges as a promising paradigm to improve the quality of computation experience for mobile devices . </S>",
    "<S> nevertheless , the design of computation task scheduling policies for mec systems inevitably encounters a challenging two - timescale stochastic optimization problem . </S>",
    "<S> specifically , in the larger timescale , whether to execute a task locally at the mobile device or to offload a task to the mec server for cloud computing should be decided , while in the smaller timescale , the transmission policy for the task input data should adapt to the channel side information . in this paper </S>",
    "<S> , we adopt a markov decision process approach to handle this problem , where the computation tasks are scheduled based on the queueing state of the task buffer , the execution state of the local processing unit , as well as the state of the transmission unit . by analyzing the average delay of each task and the average power consumption at the mobile device , we formulate a power - constrained delay minimization problem , and propose an efficient one - dimensional search algorithm to find the optimal task scheduling policy . </S>",
    "<S> simulation results are provided to demonstrate the capability of the proposed optimal stochastic task scheduling policy in achieving a shorter average execution delay compared to the baseline policies .    mobile - edge computing , task scheduling , computation offloading , execution delay , qoe , markov decision process . </S>"
  ]
}