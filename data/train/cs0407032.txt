{
  "article_text": [
    "software defined radio ( sdr ) @xcite refers to the concept of implementing various broadcast / telecommunications standards in software , and running them on the same general purpose hardware .",
    "the hardware may be general purpose processors such as the intel pentium series , or may be reconfigurable hardware processors such as the xilinx virtex series field programmable gate arrays ( fpga ) .",
    "the promise of sdr has been that devices will become easily adaptable and upgradeable , since only a software module download is needed for the device to support a different broadcast / telecommunications standard .",
    "project proteus @xcite was initiated by the dsp technology centre of ngeeann polytechnic ( singapore ) to develop a low - cost pc - based reconfigurable computing platform , one application of which is sdr .",
    "a common limitation of many reconfigurable platforms is that only applications which are fully aware of the existence of this reconfigurable hardware are able to take full advantage of it .",
    "for example , an application would normally have to be written to specifically utilize the application programming interface ( api ) exposed by the proteus software platform ( psp ) @xcite to control , reconfigure , or exchange data with the reconfigurable device .",
    "this represents a major barrier to being able to realize the full benefit offered by a pc - based reconfigurable computing platform .",
    "greatest benefit can only be derived if even typical native applications written for the operating system ( os ) , and not aware of the underlying psp , can still utilize this functionality .",
    "for example , the internet explorer program running on windows xp should be able to connect to the internet transparently , using the proteus platform with a modem software module downloaded .",
    "it can only do so if the os is able to view the modem software module deployed by the psp as a full - fledged hardware modem device .",
    "this paper introduces the use of proteus virtual devices to virtualize the existence of hardware , corresponding to the downloaded software module on the psp , to the underlying os .",
    "this allows typical os applications to transparently utilize the reconfigurable platform as though a corresponding full - fledged hardware device actually exists .",
    "section [ sectpsparch ] introduces the architecture of the psp , section [ sectpvdd ] describes how a proteus virtual device exposes reconfigurable hardware functionality to native os applications , section [ sectexample ] illustrates its use with a virtual modem device and the windows hyperterminal application , and finally section [ sectconclusion ] concludes the paper .",
    "the proteus software platform ( psp ) has been divided into four main component blocks : the psp core , which holds the common set of interfaces and functionality , and three other components : the proteus application , hardware abstraction modules ( hams ) , and software modules .",
    "this segmentation is illustrated in figure [ figpspinterface ] .",
    "a hardware abstraction module ( ham ) serves as the layer of abstraction between the psp core and the underlying hardware .",
    "any hardware device can therefore be utilized by the psp through a ham .",
    "a software module is a package of one or more algorithms that are deployed to the reconfigurable hardware by the psp , as and when desired by the end - user .",
    "the software module may be a simple algorithm such as a fast fourier transform , or a full telecommunications standard such as gsm or bluetooth .    when a software module has been selected by the user for deployment",
    ", the psp will resolve the type of hardware available ( such as fpgas ) via the ham , and match them with compatible algorithm implementations from the software module .",
    "the proteus application represents the high - level pc application that has been written to utilize the psp api to control the platform operation , and to present a graphical user interface to the end - user .",
    "however , we wish to avoid this need for a user to interact with the reconfigurable platform via the user - interface of the proteus application . the next section describes how this transparency of use is introduced via the proteus virtual devices .",
    "an operating system abstracts underlying hardware from native user applications .",
    "these applications indirectly utilize hardware via the api exposed by the os . at the hardware end",
    ", a device driver has to be written to allow the os to control and exchange data with the hardware .",
    "this set of layers and interfaces is illustrated in figure [ figapplayers ] .",
    "as an example , when an email client application wishes to connect to the internet , it signals this requirement to the os .",
    "the os then identifies a suitable hardware device that can establish an internet connection , and utilizes the corresponding device driver to perform this task .    therefore , to allow native os applications transparent use of reconfigurable hardware as full - fledged ordinary hardware devices , a redirection has to be introduced at the device driver layer .",
    "this redirection will pass all calls from various device drivers to the same general purpose reconfigurable hardware .",
    "effectively , these device drivers will represent virtual devices because no specific hardware exists for that driver alone - all the virtual device drivers redirect their calls to a common reconfigurable hardware device , which dynamically reconfigures itself according to the requesting driver .",
    "this concept is illustrated in figure [ figreconfapplayers ] .        to arbitrate between multiple requests for use of the reconfigurable hardware , and to control download of the software module corresponding to the driver invoked by the os , all interfacing between the reconfigurable hardware and the virtual device driver",
    "is done over the psp , as shown in figure [ figpvdapplayers ] . the virtual device represented by the os - specific driver",
    "is therefore termed a proteus virtual device.        a proteus virtual device therefore appears to the os to be a full - fledged hardware device , when in fact it redirects all communications to the software module downloaded to the psp .",
    "for example , figure [ figdevicemanager ] shows the device manager of windows xp with a proteus virtual modem device driver installed ; this appears to the os as a full - fledged hardware modem device , when internally it actually links up with the modem software module downloaded to the psp .",
    "a simplified illustration of this is shown in figure [ figmodemsoftwaremodule ] .",
    "each proteus virtual device is distributed as a ham , which includes the os - specific driver and an os - specific native library .",
    "the psp accesses the proteus virtual device driver via the native library .",
    "since proteus virtual device drivers act as interfaces over which data is exchanged between the os application and the psp , there is a need to open two handles to the virtual device , one for the os application and the other for the psp .",
    "each microsoft windows driver model ( wdm ) @xcite driver will have a device object structure created for it by the os , to represent the device for which a handle has been opened .",
    "a handle can be retained by a single application only , so after a handle has been opened by the native user application , a second shadow device object has to be created for the handle passed to the psp .",
    "the device object associated with the first handle opened by the native user application is called the actual device object.    when a read or write operation is performed on a handle , the data is exchanged through ringbuffers shared by both handles / device objects .",
    "this is possible because a windows driver is shared among all device objects created - the same read / write handlers are called , but in the context of the device object corresponding to the handle used .",
    "the shadow device object exists for the sole purpose of allowing another handle to be opened - all other fields of the device extension ( other than the pointers to the ringbuffers ) are not used . using the virtual modem device as an example , figure [ figshadowdevice ] illustrates this set - up of device objects and the data exchange between the native user application and the psp , via the handles opened to each device object .",
    "to demonstrate the operation of a proteus virtual device , a virtual modem device ham has been developed .",
    "the microsoft windows hyperterminal application can be used to transparently establish a connection using the proteus virtual modem device .    the psp is firstly started to deploy a modem software module .",
    "this causes the virtual modem device ham native library to open a handle to the proteus virtual modem device , and the os to create the shadow device object. once this is done , hyperterminal can be started .",
    "since the os views the proteus virtual modem device as a full - fledged hardware device , the proteus virtual modem device can be selected as the device to be used in the hyperterminal connect to dialog , as shown in figure [ fighyperterminal ] . entering any number to dial and clicking",
    "ok will start the connection process .",
    "this causes the second handle to the device to be opened by hyperterminal , and the os to create the actual device object.    data exchanged with the psp can be observed in the java debug output window , as shown in figure [ figpspdebug ] .",
    "the simple at parser provided with the modem software module will return the connect string when it receives the atd command from hyperterminal during this connect process .",
    "this paper has described a technique of using proteus virtual devices to expose reconfigurable hardware in a transparent manner for use by typical native os applications .",
    "this feature allows pc - based reconfigurable platforms to be fully leveraged on by the many existing os applications that were developed to utilize only full - fledged hardware devices .",
    "special thanks to the proteus team , especially to philip wong , kelvin lim , kelly choo , and andreas weisensee .",
    "thanks also to chua beng koon and lim choo min of ngeeann polytechnic s electronic and computer engineering division , for their support of this project .",
    "this work was funded by the ngeeann kongsi ( singapore ) and ngeeann polytechnic s innovation & enterprise office ."
  ],
  "abstract_text": [
    "<S> many reconfigurable platforms require that applications be written specifically to take advantage of the reconfigurable hardware . in a pc - based environment </S>",
    "<S> , this presents an undesirable constraint in that the many already available applications can not leverage on such hardware . </S>",
    "<S> greatest benefit can only be derived from reconfigurable devices if even native os applications can transparently utilize reconfigurable devices as they would normal full - fledged hardware devices . </S>",
    "<S> this paper presents how proteus virtual devices are used to expose reconfigurable hardware in a transparent manner for use by typical native os applications .    </S>",
    "<S> murray and balemi : using the document class ieeetran.cls    reconfigurable computing , virtual device , native applications </S>"
  ]
}