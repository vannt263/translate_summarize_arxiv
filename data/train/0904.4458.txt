{
  "article_text": [
    "_ mastermind _  @xcite is a game played between two players  a _ codemaker _ and a _ codebreaker_using colored pegs .",
    "( see figure  [ fig - mastermind ] . )",
    "viewed mathematically , mastermind is abstracted as a game where the codemaker selects a plaintext string , @xmath0 , of length @xmath1 , whose elements are selected from an alphabet of size @xmath2 . for consistency with the board game , the members of this alphabet are often referred to as `` colors . '' the codemaker and codebreaker both know the values of @xmath1 and @xmath2 , and play consists of the codebreaker repeatedly making guesses , @xmath3 , about the identity of @xmath0 . for each guess , @xmath4 the codemaker provides a score on how well @xmath4 matches @xmath0 . in _",
    "double - count _ mastermind , which is the standard version based on the board game , this score consists of a pair of two numbers :    * a _ black _ count , @xmath5 , which is the number of elements in @xmath4 and @xmath0 that match in both value and location .",
    "that is , @xmath6=q[j]\\}|.\\ ] ] * a _ white _ count , @xmath7 , which is the number of elements in @xmath4 that appear in @xmath0 but in different locations than their locations in @xmath4 .",
    "that is , letting @xmath8 denote an arbitrary permutation , @xmath9=q[j]\\}|\\,-\\,b(v_i).\\ ] ]    in _ single - count _ mastermind , which has been less studied , the codebreaker is given only the black count , @xmath5 , for each guess , @xmath4 .",
    "( note that it is impossible to solve the problem given only white - count scores . )",
    "the goal is for the codebreaker to discover @xmath0 using a small a number of guesses .",
    "the original mastermind game was invented in 1970 by meirowitz , as a board game having holes for vectors of length @xmath10 and @xmath11 colored pegs .",
    "knuth  @xcite subsequently showed that this instance of the mastermind game can be solved in five guesses or less .",
    "chvtal  @xcite studied the combinatorics of general mastermind , showing that it can be solved in polynomial time , in the @xmath12 case , using @xmath13 guesses , and chen _ et al . _",
    "@xcite showed how this bound can be improved , in this case , to @xmath14 guesses .",
    "stuckman and zhang  @xcite showed that is np - complete to determine if a sequence of guesses and responses in general double - count mastermind is satisfiable .",
    "goodrich  @xcite shows that single - count ( black - peg ) mastermind satisfiability is np - complete and that a specific vector @xmath0 can be guessed using a single - count ( black - peg ) query vector that is of length @xmath15 .",
    "several researchers have explored privacy - preserving data querying methods that can be applied to character strings ( e.g. , see  @xcite ) .",
    "in particular , atallah _",
    "et al . _",
    "@xcite and atallah and li  @xcite studied privacy - preserving protocols for edit - distance string comparisons , such as in the longest common subsequence ( lcs ) problem  @xcite , where each party learns the score for the comparison , but neither learns the contents of the string of the other party .",
    "such comparisons are common in dna sequence alignment comparisons , for example .",
    "troncoso - pastoriza _ et al . _",
    "@xcite described a privacy - preserving protocol for searching for a certain regular - expression pattern in a dna sequence .",
    "in last - year s oakland conference , jha _ et al . _",
    "@xcite give privacy - preserving protocols for computing edit distance similarity scores between two genomic sequences , improving the privacy - preserving edit distance algorithm of szajda _ et al . _",
    "single - count matching results between two strings can be done in a privacy - preserving manner , as well , using privacy - preserving set intersection , e.g. , using the method of freedman _",
    "et al . _",
    "@xcite , vaidya and clifton  @xcite or sang and shen  @xcite .",
    "the string matching problem can also be done using privacy - preserving dot product computations  @xcite or even general multi - party computation protocols ( e.g. , see  @xcite ) or systems  @xcite .",
    "et al . _",
    "@xcite study a secure mulitparty method for comparing a genomic sequence against every sequence in a genomic database , providing a score indicating the match strength between the query sequence and each sequence in the database .    in terms of the framework of this paper ,",
    "the closest previous work is that of du and atallah  @xcite , who studied a privacy - preserving protocol for querying a string @xmath0 in a database of strings , @xmath16 , where comparisons are based on approximate matching ( but not sequence - alignment ) .",
    "their protocols assume that the parties are honest - but - curious , however , so that , for instance , the database owner can not introduce fake strings in his database whose intent is to discover the identity of the query string , @xmath0 .",
    "the attack model we explore in this paper , on the other hand , allows for `` cheating '' in the comparison protocol , so that @xmath16 can introduce strings whose sole purpose is to help him discover the identity of @xmath0 .      in this paper",
    "we study the _ mastermind attack _ on string data , which is a way that a genomic querier , bob , can `` play '' a type of mastermind game with an unknown string , @xmath0for which @xmath0 s owner , alice , thinks that she is comparing with bob in a privacy - preserving manner  but instead bob is discovering the full identity of @xmath0 .",
    "the attack scenario is that alice repeatedly participates in privacy - preserving comparisons of @xmath0 to iteratively compare @xmath0 with strings provided by bob .",
    "all is learned from each comparison is the score measuring the similarity of the two strings ( @xmath0 and a string @xmath4 provided by bob ) , with the score for each string comparison being revealed to bob ( and possibly also alice ) before the next comparison begins .",
    "bob s goal is to learn the complete identity of @xmath0 with a reasonably small of comparisons .",
    "we distinguish two versions of this attack scenario . in the first scenario ,",
    "the comparison between @xmath0 and each string @xmath4 provided by bob is scored according to the single - count ( black - peg ) straight - match score , @xmath6=q[j]\\}|.\\ ] ] in our second scenario , which is more common in genomic databases , the comparison between @xmath0 and each @xmath4 provided by bob is scored according to a sequence - alignment score , @xmath17=q[k]\\}|,\\ ] ] where @xmath18 is an ordered index set of pairs of integers so that if @xmath19 appears before @xmath20 in @xmath18 , then @xmath21 and @xmath22 .",
    "this is also known as the _ longest common subsequence _ ( lcs )  @xcite score between @xmath0 and @xmath4 .",
    "( see figure  [ fig : matches ] . ) incidentally , as we observe below , levenshtein edit distance scores are strongly related to the lcs score , and our attack scenarios should be able to be translated to this other measure , as well .",
    "there are a number of motivating usage environments that could be susceptible to mastermind attacks .",
    "for example , bob could be a genomic database owner , storing genomic strings for a number of individuals , and alice could be a database user who is searching bob s database to find the closest match to a string @xmath0 of interest .",
    "bob could , for instance , be the owner of a database of dna from every male attending a certain university and alice could be an fbi agent searching through that database for a match with dna evidence gathered after a sexual assault .",
    "both parties in this example are likely to be under legal restrictions not to reveal the complete identity of their strings unless there is a match . in another example",
    ", alice could be the owner of a database of genomic sequences and bob could be an attacker trying to learn the identity of a string @xmath0 in alice s database , e.g. , which bob can identify only by an anonymized index , @xmath23 . in this case , bob repeatedly does queries with each of his strings , @xmath4 , indexing into alice s database using the name `` @xmath23 '' to locate @xmath0 and get alice to do a privacy - comparison of @xmath0 with @xmath4 .",
    "bob could , for instance , be an employer trying to learn the genomic sequence of a prospective employee , charlie , by querying a university dna sequence database owned by alice , which he could query simply knowing the index of charlie s dna in alice s database ( e.g. , bob might be able to infer this index from charlie s student number ) . in every case",
    ", bob gets to ask alice to compare her string , @xmath0 , to each of his query strings , @xmath4 , in a privacy - preserving manner until these comparisons have leaked enough information that he can easily infer the identity of @xmath0 .      in this paper",
    "we study various aspects of the mastermind attack , deriving the following results .    *",
    "we show that the problem of determining whether a sequence of mastermind responses has a valid solution is np - complete even if each response is a sequence - alignment response .    at first",
    ", this might seem to provide some security for the privacy of the unknown string , @xmath0 , for it implies a degree of intractability to the problem of learning a query string @xmath0 just from mastermind responses involving @xmath0 .",
    "unfortunately , as was learned with knapsack cryptosystems  @xcite , having the security of a system be based on the difficulty of solving an np - complete problem is no guarantee that it is safe in practice . indeed , such is the case for the security of genomic sequences being susceptible to the mastermind attack .",
    "we show that character strings can be discovered by surprisingly short sequence of guesses .",
    "in particular , we also provide the following results :    * we show that an arbitrary query string , @xmath0 , of length @xmath1 from an alphabet of size @xmath2 , can be discovered with @xmath24 queries , each of which reports the result of a sequence - alignment ( lcs ) test . such queries are common in genomic applications .",
    "we also show that this bound can be further improved if the distribution of characters in the alphabet follows zipf s law  @xcite .",
    "* we show how a mastermind attacker can take advantage of known distributional information for genomic data .",
    "armed with distributional knowledge about a query string , @xmath0 , with respect to a reference string , @xmath25 , such as the revised cambridge reference sequence , rcrs ( genbank accession number : ac 000021 ) , the mastermind attacker can discover @xmath0 much quicker than in the general cases , using either single - count or sequence - alignment responses .",
    "* we provide experimental analysis of the distribution - based mastermind attack for genomic data , showing that , for a case study involving mitochondrial dna ( mtdna ) , either single - count responses or sequence - alignment responses , the attack works surprisingly well .",
    "given the relative abundance of mtdna data , and its ethnic sensitivity , we focus our experiments on 1000 human mtdna sequences , showing that most can be discovered with a mastermind attack of just a few hundred guesses , even though mtdna sequences are typically over 16,500 bp long .",
    "given that current mtdna databases already have thousands of members ( e.g. , see  @xcite ) , this experimental analysis shows that it would be relatively easy for an attacker , bob , to interleave an undetected mastermind attack with privacy - preserving responses to actual sequences .",
    "we conclude by discussing some of the issues that would have to be addressed in order to defeat mastermind attacks on genomic data , as well as some possible directions for future research .",
    "throughout this paper , we assume that the attacker , bob , can learn the value of either a straight - match score , @xmath5 , or a sequence - alignment score , @xmath26 , between the unknown string , @xmath0 , and each of his given strings , @xmath4 .",
    "these are not the only types of scores of interest with respect to genomic data , however .",
    "so , before we discuss the privacy risks of genomic data from mastermind attacks that use the @xmath27 or @xmath28 functions as scores , let us discuss two other kinds of score functions and how they could alternatively be used for similar attacks .",
    "there are a number of score functions that measure the similarity between two strings .",
    "we review two here , including how they can be reduced to similarity measures using the functions @xmath27 or @xmath28 , for comparing two strings , @xmath0 and @xmath29 .    * _ hamming distance : _ the hammming distance , @xmath30 , between @xmath0 and @xmath29 , is given by @xmath31\\not = q[j]\\}|.\\ ] ] that is , the two strings @xmath0 and @xmath29 are aligned in way that disallows insertions and deletions , and a score is computed based on the number of substitutions needed to convert @xmath0 to @xmath29 .",
    "note that , given a hamming distance score , @xmath30 , we can compute a straight - match score as @xmath32 . *",
    "_ levenshtein distance : _ the levenshtein distance , @xmath33 , between @xmath0 and @xmath29 , which is a kind of _ edit distance _",
    ", is the minimum number of insertions , deletions , and substitutions needed to convert @xmath0 into @xmath29 ( or vice versa ) .",
    "note that , given a levenshtein distance score , @xmath33 , we can compute a sequence - alignment score as @xmath34    thus , the mastermind attacks we mention in this paper apply equally well to systems that support string comparisons using hamming distance or levenshtein distance .",
    "as mentioned above , stuckman and zhang  @xcite show that double - count mastermind satisfiability is np - complete and goodrich  @xcite shows that single - count ( black - peg ) mastermind satisfiability is also np - complete ( which applies equally well for hamming distance ) .    in the sequence - alignment mastermind satisfiability problem",
    ", we are given a collection of mastermind queries , @xmath35 , and the responses , @xmath36 , each of which is said to report the sequence - alignment ( lcs ) score between each @xmath4 and an unknown vector , @xmath0 .",
    "we are asked to determine if there indeed exists a vector @xmath0 that satisfies all of these responses .",
    "[ thm : np ] sequence - alignment mastermind satisfiability is np - complete .",
    "our proof is an adaptation of the np - completeness proof of goodrich  @xcite showing that single - count ( black - peg ) mastermind satisfiability is np - complete .",
    "it is easy to see that sequence - alignment mastermind satisfiability is in np .",
    "for example , we could nondeterministically guess a vector @xmath0 and then test in polynomial time whether it satisfies all the responses , @xmath36 .    to prove that sequence - alignment mastermind satisfiability is np - hard",
    ", we provide a reduction from 3-dimensional matching ( 3 dm ) , which is a well - known np - complete problem ( e.g. , see  @xcite ) . in the 3 dm problem , we are given three sets , @xmath37 , @xmath38 , and @xmath39 , of @xmath40 elements each .",
    "in addition , we are given a set @xmath41 of @xmath42 triples , @xmath43 , whose elements are respectively taken from the three sets , @xmath44 , @xmath45 , and @xmath46 . the problem is to determine if there is a subset of triples such that each element in @xmath44 , @xmath45 , and @xmath46 appears in exactly one triple in this subset .",
    "suppose , then , that we are given an instance of the 3 dm problem , as described above",
    ". we consider the unknown vector , @xmath0 , to consist of the following vector of variables : @xmath47 where the semi - colons are used for the sake of notation to separate the four sections in the unknown vector , @xmath0 .",
    "we perform our reduction by constructing a sequence of guess vectors , @xmath48 , together with their sequence - alignment responses , @xmath49 , so that there is a satisfying vector @xmath0 for these responses if and only if there is a solution to the given instance of the 3 dm problem .",
    "our construction begins by setting the number of colors , @xmath2 , to be @xmath50 . intuitively , there is a color associated with each triple in @xmath41 , plus a `` null '' color , @xmath51 , which is guaranteed to appear nowhere in our unknown vector , @xmath0 , and a separator color , @xmath52 , which occurs in every other ( even - indexed ) position of @xmath0 .",
    "we begin our sequence of queries with four special `` enforcer '' queries .",
    "the first two of these are @xmath53 which has response @xmath54 , and @xmath55 which has response @xmath56 .",
    "intuitively , @xmath57 enforces the fact that the null color , @xmath51 , appears nowhere in the unknown vector , and @xmath58 enforces the fact that the separator color , @xmath52 , appears exactly often enough to separate every other ( non-@xmath52 ) character in the unknown vector .",
    "so as to better understand the characteristics of the other queries , let us set @xmath59 , the number of @xmath52 colors in our unknown vector @xmath0 .",
    "we then define two additional enforcer queries , @xmath60 which has response @xmath61 , and @xmath62 which has response @xmath63 .",
    "intuitively , @xmath64 enforces a counting rule that exactly @xmath40 of the @xmath65 s will be set to @xmath66 , and @xmath67 enforces a counting rule that the remaining @xmath68 of the @xmath65 s will be set to @xmath69 . for each triple , @xmath70",
    ", we construct three query vectors , as follows .",
    "@xmath71    @xmath72 @xmath73 ,    where the @xmath74 is in position @xmath75 in the first group and the @xmath69 is in position @xmath76 in the fourth group .",
    "this vector has response , @xmath77 .",
    "@xmath78    @xmath79 @xmath73 ,    where the @xmath74 is in position @xmath80 in the second group and the @xmath69 is in position @xmath76 in the fourth group .",
    "this vector has response , @xmath81 .",
    "@xmath82    @xmath83 @xmath84 @xmath85 ,    where the @xmath74 is in position @xmath86 in the third group and the @xmath69 is in position @xmath76 in the fourth group .",
    "this vector has response , @xmath87 .",
    "intuitively , these three responses collectively form a `` chooser '' gadget , where we will either have @xmath88 or the three variables @xmath89 , @xmath90 , and @xmath91 , will each be set to have color @xmath74 ( and @xmath92 ) .",
    "moreover , note that there are @xmath42 odd - index positions in the @xmath41 , and each of them has to match either a @xmath69 or @xmath66 color .",
    "this reduction can clearly be done in polynomial time .",
    "so all that remains is for us to show that it works .",
    "suppose , then , that there is a possible solution to the given instance of 3 dm . then for each chosen triple , @xmath70 , we can assign colors @xmath92 , @xmath93 , @xmath94 , and @xmath95 , which will satisfy each of the @xmath96 , @xmath97 , and @xmath98 vector responses for this value of @xmath74 .",
    "likewise , setting @xmath88 will satisfy each of the @xmath96 , @xmath97 , and @xmath98 vector responses for a triple @xmath99 that is not chosen .",
    "finally , given that there are @xmath40 chosen vectors , we will satisfy the four preliminary vector responses as well .",
    "suppose , alternatively , that we have a vector @xmath0 that satisfies all our vector responses .",
    "we know that each @xmath100 , @xmath101 , and @xmath102 must be assigned a color other than @xmath51 .",
    "moreover , every even - indexed position in @xmath0 must be assigned the color @xmath52 and every odd - indexed position must be a color other than @xmath52 , because there are exactly @xmath59 instances of @xmath52 in @xmath0 and we have introduced a query that enforces the fact that there is exactly one non-@xmath52 color between every consecutive pair of @xmath52-colored positions . since there are only @xmath50 colors , this implies each odd - indexed position @xmath103 , @xmath104 , and @xmath105 must be assigned a color corresponding to a triple number , @xmath74 , that is , it is not assigned @xmath51 or @xmath52 . if the corresponding @xmath92 , then in order to have satisfied the vectors @xmath96 , @xmath97 , and @xmath98 , we must have set @xmath93 , @xmath94 , and @xmath95 , which implies we can include the triple @xmath106 in our matching .",
    "if @xmath88 , then we do not include this triple in our matching . by the vector responses @xmath64 and @xmath67 , we know that the number of triples chosen in this way is exactly @xmath40 . thus , we have found a valid 3-dimensional matching .",
    "thus , it is extremely unlikely that we will be able to find a polynomial - time algorithm that can always satisfy arbitrary mastermind sequence - alignment query strings , or even single - count queries  @xcite .",
    "unfortunately , this is not the same as a guarantee of security for the kinds of query strings that would result from an interaction between a mastermind attacker , bob , and a character string owner , alice , where bob is trying to learn alice s string , @xmath0 , through a sequence of privacy - preserving string comparisons . for we show , in the sections that follow , that such query strings , @xmath0 , can be discovered fairly efficiently using the mastermind attack .",
    "recall that in a _ sequence - alignment _ query we wish to compare two strings @xmath0 and @xmath29 , where the score for a match is the length of the longest common subsequence ( lcs )  @xcite between @xmath0 and @xmath29 .",
    "several researchers have studied this problem and have come up with privacy - preserving protocols to determine such scores ( e.g. , see  @xcite ) . in this section ,",
    "we show that performing such a series of sequence - alignment queries with bob is susceptible to a type of mastermind attack of its own .",
    "suppose we are given an unknown string @xmath0 of length @xmath1 over an alphabet of size @xmath2 , the members of which we call `` colors .",
    "'' suppose further that we are going to engage in a protocol with bob to test @xmath0 against strings provided by bob , where each test returns the length of a longest common subsequence between @xmath0 and one of bob s strings .",
    "that is , we score matches using the sequence - alignment scoring function , @xmath107 , for a guess vector @xmath29 , which is the length of a longest common subsequence between @xmath29 and @xmath0 .",
    "we are interested in this section on studying an efficient scheme for bob to discover @xmath0 using this query scheme .",
    "a mastermind - attack algorithm for bob begins as follows :    * bob begins by guessing @xmath2 vectors , @xmath108 , with each vector @xmath4 consisting of elements of all the same color , @xmath109 .",
    "the subsequence alignment score for each of the initial guesses will tell bob the cardinality of each color in @xmath0 .",
    "let us now imagine that we reorder the colors so that they are listed @xmath66 to @xmath2 in nondecreasing order of how often they each appear in @xmath0 .",
    "thus , color @xmath66 is now the least frequent color in @xmath0 and @xmath2 is the most frequent color .",
    "our algorithm continues by incrementally building up a vector @xmath110 , such that @xmath110 either completely matches all its characters with @xmath0 ( in the specified order ) or it misses by just one character .",
    "initially , we set @xmath110 to be a vector consisting of exactly @xmath111 elements of color @xmath66 , so that if we were to guess @xmath110 , then we would get a score of @xmath112 . we allow indexing and insertion into @xmath110 so that we can add a character before the @xmath109th element in @xmath110 for @xmath113 to @xmath114 ( with an insertion `` before '' position @xmath114 taken to mean an insertion just after position @xmath115 , the last position in @xmath110 ) .",
    "our algorithm for bob s mastermind attack continues shown in figure  [ fig : alg - mast ] .",
    "set @xmath113 \\{position in @xmath110 where to insert items } set @xmath116 \\{count of number of items of color @xmath117 found } add a color @xmath117 item just before the @xmath109th item in @xmath110 .",
    "make a guess for @xmath110 to learn the value of @xmath118 .",
    "increment @xmath109 and @xmath23 .",
    "remove the color @xmath117 item before @xmath109 .",
    "increment @xmath109 .",
    "note inductively that , at the end of each iteration of the the while - loop , every character in @xmath110 matches in @xmath0 , that is , @xmath119 .",
    "thus , any time the if - statement finds that @xmath120 , then we have just added an item of color @xmath117 in a place where it can not match any item without causing a previously - matched neighboring item to mis - match what it previously could match .",
    "therefore , in each iteration of the for - loop , the algorithm correctly finds all the places where items of color @xmath117 fit with respect to items of colors @xmath66 to @xmath121 .",
    "so , when the algorithm completes , we have @xmath122 ; that is , we have learned @xmath0 .",
    "consider now the analysis of this algorithm .",
    "note that in each iteration of the while - loop , we increment @xmath109 , our index into @xmath110 , and that at the end of the while loop the length of @xmath110 is @xmath123 , where @xmath117 is the index of the for - loop .",
    "thus , the total number of queries made is at most @xmath124 which is the same as @xmath125 since each term @xmath126 appears @xmath127 times in the double sum .",
    "let us perform a substitution of variables , where we let @xmath128 denote the cardinalities of the colors in @xmath0 in nonincreasing order , so @xmath129 is the most frequent color and @xmath130 is the least frequent .",
    "then we can rewrite the total number of queries performed to be bounded by @xmath131 note that , by definition , @xmath132 , for otherwise , @xmath133 could not be the @xmath109th largest - cardinality color .",
    "thus , the total number of queries is at most @xmath134 this is the number of tests done by bob , the mastermind attacker , making no additional assumptions about the distribution of colors in the query string , @xmath0 .",
    "this analysis can be refined , however , if the colors are distributed in @xmath0 according to zipf s law  @xcite , which in this context would imply that @xmath135 where @xmath136 is the @xmath1-th harmonic number of order @xmath74 , @xmath137 and @xmath74 is between @xmath66 and @xmath138 , inclusive . in this case , the total number of guesses done by bob would be at most @xmath139 for @xmath140 .",
    "thus , we have the following :    [ thm : seq - align - q ] given an unknown length-@xmath1 string @xmath0 , defined on an alphabet of size @xmath2 , a malicious mastermind attacker can discover @xmath0 in polynomial time using @xmath141 sequence - alignment tests tests against @xmath0 , each of which reveals only the length of a longest common subsequence between @xmath0 and the test string match . if the cardinalities of elements of @xmath0 follow zipf s law , with parameter @xmath140 , then a malicious mastermind attacker can discover @xmath0 using at most @xmath142 sequence - alignment tests .",
    "up to this point , we have focused on how the mastermind attacker , bob , could learn a general string @xmath0 using the types of queries typically asked of genomic databases , even if those queries are privacy preserving . in this section ,",
    "we explore how bob can significantly improve the effectiveness of the mastermind attack if he exploits information , which is publicly available , about the distributions of the character strings of interest .",
    "moreover , to drive the point home , we provide a case study showing the effectiveness of such mastermind attacks on a real - world genomic database , in the section that follows .",
    "genomic sequences typically have a great deal of similarity .",
    "indeed , recent compression schemes have shown that it is effective to view a genomic sequence with respect to a compression scheme that represents a sequence in terms of its differences with a reference sequence , @xmath25 ( e.g. , see  @xcite ) .",
    "that is , we can start from a reference sequence , @xmath25 , which contains the most common components of a typical genomic sequence .",
    "then we define each other sequence , @xmath0 , in terms of its differences with @xmath25 .",
    "each difference is defined by an index location , @xmath109 , in @xmath25 and an operation to perform at that location , such as a substitution , insertion , or deletion .",
    "this difference pattern is present , for example , in human mitochondrial dna , which is the type of genomic data we use in our case study .",
    "this type of of dna , which , as we have already mentioned , is inherited only through the maternal line and is already available in sequenced form in sizeable enough quantities to support obfuscated mastermind attacks .",
    "moreover , because it is passed only though the maternal line , it functions as a highly tuned notion of race , allowing researchers in some cases to trace a person s ancestry to individual villages .",
    "thus , mitochondrial dna is highly sensitive from a privacy - protection viewpoint .",
    "as shown in recent work of baldi _ et al . _",
    "@xcite , mitochondrial dna sequences can be encoded in significantly - compressed form by using a standard reference sequence  @xcite .",
    "this reference sequence , @xmath143 , is 16,568 bp long .",
    "so , in terms of the notation used above , we have @xmath144 and @xmath145 , since there are 4 types of base pairs possible .",
    "but these parameters suggest that there is more variation in the data than actually occurs .",
    "in fact , the vulnerability of dna sequences to the mastermind attack is much worse than this in practice .",
    "for example , there are a limited number of locations along the reference sequence where any changes appear statistically in the mitochondrial dna data .",
    "so let us use @xmath146 to denote the number of different possible locations where any query sequence might differ from the reference sequence , @xmath25 .",
    "worse yet , from a privacy - preservation standpoint , the average number of difference between any human dna sequence and the reference is orders of magnitude smaller than @xmath146 in practice .",
    "( we explore these statistics in detail below . ) here we show how a mastermind attack can exploit these statistical properties of genomic data .      in this section ,",
    "we explore the version of the mastermind attack where the attacker , bob , engages in a series of privacy - preserving protocols with alice , each of which reveals only the single - count straight - match score between alice s string , @xmath0 , and strings provided by bob , in an iterative online fashion ( recall figure  [ fig : matches]a ) . in the attack model",
    "we consider , bob is allowed to use self - constructed sequences in comparisons with @xmath0 , from which he learns the value of @xmath5 for each of his query strings , @xmath4 .    given additional knowledge of the distributional properties of dna data , we can construct a mastermind attack to take this knowledge into consideration .",
    "in this case , we make the assumption that the unknown string , @xmath0 , differs from a reference string @xmath25 only through a relatively small number substitutions , which is true for example , for 45% of the mitochondrial dna data .",
    "( we will explore the more general case later in this section . )    our algorithm is an adaptation of an algorithm of goodrich  @xcite for solving the boardgame version of mastermind to the specific case of a mastermind attack on a string @xmath0 relative to a reference string @xmath25 .",
    "we begin the attack for bob by having him perform a query against @xmath0 with a reference sequence , @xmath25 . for any string ,",
    "@xmath0 , let @xmath147 denote the number of substitutional differences @xmath0 has with the reference sequence , @xmath25 .",
    "note , then , that our first query ( for the reference string @xmath25 itself ) allows us to determine the value of @xmath147 , using the formula @xmath148 for example , @xmath25 could be a genomic sequence derived from a sequencing of the dna of a specific reference human or it could be a canonical genomic reference sequence derived from analyzing commonalities among a number of human sequences .",
    "even though few humans have presently had their complete genomes sequenced  @xcite , any of these could serve as a reference , @xmath25 , for a mastermind attack on a complete genome sequence . for the more wide - spread instances of mitochondrial dna , the revised cambridge reference sequence ( rcrs ) ( genbank accession number : ac 000021 ) is commonly used as a mtdna reference sequence  @xcite , and it could serve as the sequence @xmath25 in a mastermind attack on a mitochondrial dna sequence .",
    "imagine that we cyclically order the @xmath2 characters in our alphabet , so , for instance , if our alphabet is \\{a , c , g , t } , then we could use the cyclic ordering ( a , c , g , t , a , c , g , t,@xmath149 ) . note that this ordering allows us to choose any character as a base color ,",
    "i.e. , a `` color @xmath69 , '' and then specify all other characters as offsets from that base .",
    "for example , in the dna case , we could pick `` c '' as the base , color @xmath69 , in which case `` g '' becomes color @xmath66 , `` t '' becomes color @xmath138 , and `` a '' becomes color @xmath150 . or we could pick `` t '' as the base , color @xmath69 , in which case `` a '' becomes color @xmath66 , `` c '' becomes color @xmath138 , and `` g '' becomes color @xmath150 .    in the context of a mastermind attack , we consider each character , @xmath151 , in the reference sequence , @xmath25 , to be color `` 0 '' for that position , @xmath109 . viewed mathematically , we can then number the @xmath152 remaining characters , according to our cyclic ordering , as offsets from these respective color @xmath69 s . assuming that bob s first guess , of @xmath25 , is not a perfect match for the query sequence , @xmath0 , then we can view bob s remaining task as that of determining the cardinality and location of all the non - zero offset values for positions in @xmath25 .",
    "in fact , if we think of the characters in the respective positions of @xmath25 as the respective color @xmath69 s for those positions , then we can view the remaining task as that of determining the locations of the colors @xmath69 through @xmath152 .",
    "after bob makes his initial guess using @xmath25 , we then have him perform @xmath152 additional queries , each of which is a vector of elements that are all the same offset from @xmath25 , i.e. , a vector of all the same `` colors '' with respect to @xmath25 , but only at the @xmath146 places that are statistically possible locations for a substitution .",
    "thus , let us assume we can view @xmath0 as now consisting of just the @xmath146 places where substitutions may occur ( for the other locations we simply repeat a guess for color @xmath69 every time ) .",
    "this allows us to initially know the cardinality , @xmath153 , of every ( offset ) color in the ( compressed ) unknown vector , @xmath0 . if any @xmath154",
    ", then we remove the color @xmath109 from our alphabet of colors , and update the value of @xmath2 accordingly .",
    "the remainder of bob s computation proceeds as a recursive divide - and - conquer algorithm , which is similar in structure to the approach of  @xcite .",
    "the generic problem is to determine the offset values of all the elements in a range @xmath155 $ ] , which initially is the entire vector @xmath156 $ ] , assuming we know the values of @xmath153 , of every color in @xmath155 $ ] , and each @xmath157 .",
    "if @xmath158 , we are done ; so let us assume without loss of generality that @xmath159 .",
    "in addition , we assume inductively that we know , @xmath160 , the number of instances of color @xmath69 outside of the range @xmath155 $ ] . initially , of course ,",
    "@xmath161 .",
    "given this initial setup , we split @xmath155 $ ] into @xmath162 $ ] and @xmath163 $ ] , where @xmath42 is in the middle of the interval @xmath164 $ ] .",
    "the main challenge , then , is to provide for @xmath162 $ ] and @xmath163 $ ] the same setup we had for @xmath155 $ ] .",
    "this setup can be accomplished by determining the cardinalities , @xmath165 and @xmath166 , of every color that respectively appears in @xmath162 $ ] and @xmath163 $ ] .",
    "we do this with a series of @xmath152 additional queries , where we guess that the elements in @xmath162 $ ] are of color @xmath109 , for @xmath167 , and that the rest of @xmath0 is of color @xmath69 .",
    "let the values of these queries be denoted as @xmath168 , and note that , at this point , we know the following : @xmath169 thus , we can determine @xmath170 , as @xmath171 for @xmath170 is counted @xmath2 times in the sum of @xmath172 and all the @xmath173 s , and the sum of the @xmath174 s is @xmath175 , by equation  ( [ eq-3 ] ) .",
    "given the value of @xmath170 , we can then determine all the @xmath174 values , by using equation  ( [ eq-1 ] ) for @xmath176 and equation  ( [ eq-2 ] ) for @xmath177 .",
    "moreover , once we have all these @xmath174 values , we can determine the values , @xmath178 , using equation  ( [ eq-1 ] ) .",
    "finally , we can determine the values @xmath179 and @xmath180 and use these respectively for the role of @xmath160 in @xmath162 $ ] and @xmath163 $ ] .",
    "this gives us all the values necessary to then recursively determine @xmath162 $ ] and @xmath163 $ ] .",
    "of course , if the @xmath126 values for either of these subproblems are all @xmath69 , except for one ( which would be equal to the size of this problem ) , then there is no need to recursively solve this problem ; so we would not perform a recursive call in this case .",
    "let us , therefore , analyze the number of vector guesses performed by this algorithm . ignoring for the time being the initial set of @xmath2 guesses , note that we only continue to search if we are guaranteed to be honing in on a substitution .",
    "thus , adding back the initial @xmath2 guesses , we get that the total number of guesses is at most @xmath181 thus , we have the following .",
    "[ thm : deterministic2 ] given an unknown length-@xmath1 sequence @xmath0 , defined on an alphabet of size @xmath2 , with @xmath0 having @xmath146 possible locations of deviation from a reference sequence , @xmath25 , a malicious mastermind attacker can discover @xmath0 in polynomial time using @xmath182 guesses , each of which reveals only the number of positions where @xmath0 and the test sequence match and where @xmath147 denotes the number of substitutions that would transform @xmath25 into @xmath0 .    as we note in section  [ sec : experiments ] , this performance is more than adequate to show that nearly half of all mitochondrial dna data in our case study are vulnerable to this version of the mastermind attack .",
    "before we provide those statistics , however , let us study how the mastermind attack with sequence - alignment queries can be streamlined to exploit dna data distributions .",
    "as mentioned above , roughly half of the sequences in the mitochondrial dna data set include insertions and/or deletions in addition to substitutions in the reference sequence , @xmath25 .",
    "thus , we discuss in this subsection how we can modify the mastermind attack algorithm of section  [ sec : align ] to take advantage of the distributional properties common in genomic data sets , so as to discover a query sequence that can have arbitrary kinds of differences with the reference sequence , @xmath25 . in this case , we view differences with @xmath25 procedurally as _ events _ , each of which is either a singleton deletion , or an arbitrary - length insertion , which would transform @xmath25 into the query sequence , @xmath0 .",
    "( note : for this algorithm , we view a substitution as actually occurring as a deletion event followed by an insertion event . )    in this case , we run the attack algorithm in two phases . in phase  1",
    ", we aim to discover all the deletion events , and in phase  2 , we aim to discover all the insertion events . in both phases , we make the simplifying assumption that insertion and deletion events are disjoint .",
    "that is , they do nt overlap or interfere with one another .",
    "this assumption is based on the fact that these events come from a statistical characterization of genomic sequences , which is designed to keep events disjoint ( for overlapping events are better subdivided further and considered as separate sub - events ) .",
    "so , for example , we assume that there is no insertion event that is then followed by a deletion event that then removes part of the sequence that was just inserted .",
    "we begin by performing a guess for the reference sequence , @xmath25 .",
    "armed with the sequence - alignment score , @xmath183 , for @xmath25 , we then perform a divide - and - conquer computation to find all the deletion events that occur in going from @xmath25 to @xmath0 .",
    "note that if we next perform a guess @xmath29 for a collection of deletion events at some subset of the @xmath146 statistically possible ( deletion ) locations in @xmath25 , then we can detect how many deletions actually occurred at these locations .",
    "moreover , note that the insertion events do nt change this score , since the insertions and deletions do not interfere , by assumption . for each deletion event that is present in one of the queried locations ,",
    "then our score will not change with respect to the score for @xmath25 , and , for each location that should not be deleted , we will record a score for @xmath29 that is one worse than that for @xmath25 .",
    "thus , we can determine the number of deletion events for any test we do by the difference between the score we observe and the score we would expect if all of the deletions are removing actual matches .",
    "that is , if we test for @xmath184 singleton deletion events in @xmath29 , then the number that actually occur is @xmath185 , where @xmath28 is the sequence - alignment score function .",
    "let @xmath186 be a set of boolean variables , such that @xmath187 is 1 if and only if the @xmath109th statistically possible deletion event in @xmath25 actually occurs in going from @xmath25 to @xmath0 .",
    "we can perform a divide - and - conquer search in @xmath188 to determine which of the @xmath187 s are 1 .",
    "we begin by testing for all the deletion events in @xmath188 .",
    "this gives us the number of @xmath66 s in @xmath188 .",
    "we then perform a test for every deletion event in @xmath189 , which by deduction gives us the number in @xmath190 .",
    "we then recursively determine the number in either or both of these two sets so long as there is at least one deletion event in that set .",
    "thus , we perform a divide - and - conquer parallel `` binary '' search for each of the exact locations of singleton deletions .",
    "once we have completed this computation for @xmath25 , with queries against @xmath0 , we will have determined the locations of all the deletion events from @xmath25 to @xmath0 , including those deletions that are really substitution events .",
    "thus , this set of guesses uses at most @xmath191 tests , where @xmath192 is the set of ( singleton ) deletion events in going from @xmath25 to @xmath0 .",
    "once we know the locations of all the deletions in going from @xmath25 to @xmath0 , we perform a second set of binary searches , just among these locations , to find the locations among this group that are actually the sites of substitution events .",
    "let us now define @xmath193 to be the reference sequence resulting from performing the events we discovered in phase  1 .",
    "in particular , we perform a binary search for each of the @xmath2 colors , with respect to @xmath193 , searching , for each color @xmath109 , in the statistically possible insertion locations in @xmath193 where we improve our score by adding a single character of color @xmath109 .",
    "note that there may be more than a single character of color @xmath109 inserted at this location , but it is sufficient to do a single character query to determine that there is an insertion here , since there is a non - deleted element between every possible insertion location in @xmath193 .    since we continue to perform recursive binary - type searches for any insertion locations that actually cause insertions , then the the set of additional guesses we do in this part of the second phase is at most @xmath194 , where @xmath195 is the number of insertion events .    at this point in the algorithm ,",
    "we know where all the insertion events are located , but we do nt know the full extent of each of their sizes .",
    "so for each location , we perform a set of @xmath2 guesses of length @xmath138 to see if we get a higher score by considering a longer insertion .",
    "if there are no differences from the singleton queries , then we can infer the length of the insertion from the previous queries .",
    "otherwise , we perform a set of @xmath2 guesses of length @xmath150 , @xmath196 , and so on , until we observe no change from the previous set of guesses . thus , with a total number of guesses equal to @xmath197 , where @xmath198 is the total size of all the insertion events , we discover the length of each insertion event . to complete the computation ,",
    "then , we perform a miniature version of our algorithm from section  [ sec : align ] at each location determined to be to site of an insertion event .",
    "each such computation requires @xmath199 guesses , where @xmath42 is the length of the insertion .",
    "thus , the total number of guesses made in this part of phase  2 is @xmath200 .",
    "therefore , we have the following .",
    "[ thm : align2 ] given an unknown length-@xmath1 sequence @xmath0 , defined on an alphabet of size @xmath2 , with @xmath0 having @xmath146 possible locations of deviation from a reference sequence , @xmath25 , a malicious mastermind attacker can discover @xmath0 in polynomial time using @xmath201 guesses , each of which reveals only the number of positions where @xmath0 and the test sequence match , using sequence - alignment lcs tests , where    * @xmath192 is the number of deletion events , * @xmath195 is the number of insertion events , * @xmath198 is the total length of all insertion events .",
    "we are at the point where hundreds of thousands of people have had their mitochondrial dna ( mtdna ) sequenced  @xcite , which is typically about 16,500 base pairs ( bp ) long , whereas the entire diploid human genome is roughly 6 billion bp long .",
    "interestingly , since mtdna is transferred only along the maternal line , scientists have used differences from a reference mtdna sequence as a way to plot human migration from the earliest days of the modern human species .",
    "( see figure  [ fig : migration ] . )        because of this knowledge of migration patterns and its correlation to known mtdna mutations , given someone s mtdna sequence , it is possible to trace their maternal ancestry back to individual villages  @xcite , just by identifying differences in their mtdna to a reference sequence , e.g. , rcrs ( see figure  [ fig : rcrs ] ) .",
    "in other words , mtdna alone is sufficient to determine a person s ethnic background with incredible accuracy .",
    "thus , we are at a point where privacy is a real concern with respect to genomic sequences , and this concern is sure to increase in the future .",
    ".... gatcacaggtctatcaccctattaa ccactcacgggagctctccatgcat ttggtattttcgtctggggggtatg cacgcgatagcattgcgagacgctg gagccggagcaccctatgtcgcagt atctgtctttgattcctgcctcatc ... atctggttcctacttcagggtcata aagcctaaatagcccacacgttccc cttaaataagacatcacgatg ....    in addition to ethnicity , there are , of course , other privacy concerns with respect to genomic data , including sensitive information related to disease susceptibility , and possible genetic influences on sexual orientation , personality , addiction , and intelligence . concerns that employers or insurers will use genetic information to screen those at high risk for a disease are already a public concern and stories involving such risks are widespread in the press .",
    "indeed , the u.s .",
    "government and several states have already created laws dealing with dna data access , and many more are considering such legislation .",
    "thus , there is a need for technologies that can safeguard the privacy and security of genomic data .",
    "fortunately , several researchers have started exploring privacy - preserving data querying methods that can be applied to genomic sequences ( e.g. , see  @xcite ) .",
    "that is , cryptographic techniques can be used to allow for queries to be performed in a way that answers the specific question  such as a score rating the quality of a query for dna matching or sequence alignment  but does not reveal any other information about the data , such as race or disease risk of the individual whose dna is being queried .",
    "the purpose of this case study is to show that , while being sufficient for single - shot comparisons of dna sequences , such cryptographic techniques have a weakness when they are employed repeatedly .",
    "specifically , we explore in this section how the mastermind attack allows a genomic querier , bob , to iteratively discover the full identity of a genomic query sequence , @xmath0 , with surprising efficiency , even if each comparison of @xmath0 with bob s sequences are done using cryptographic privacy - preserving protocols .",
    "it is not surprising that iterated privacy - preserving sequence comparisons leak some information about the sequences being compared ; what is surprising is how quickly the mastermind attack can work , especially on genomic data .    to demonstrate the vulnerability of real - world dna data to the mastermind attack , we have performed a case study of our distribution - based mastermind attack algorithms .",
    "we used 1000 human mitochondrial sequences downloaded from a recent version of genbank ( http://www.ncbi.nlm.nih.gov/genbank/index.html ) .",
    "we focused on the sequences alone , ignoring any header and other information , and have simulated mastermind attacks on each one .",
    "the revised cambridge reference sequence ( rcrs ) ( genbank accession number : ac 000021 ) was also downloaded and used as the reference sequence  @xcite .",
    "the reference sequence is 16,568 bp long .",
    "all the sequences were aligned to the reference sequence and , for each sequence , the indices of the location of each variation were recorded together with the type ( substitution , insertion , deletion ) and content of each variation .",
    "this step is also essential if one is interested in compressing the data  @xcite , for example .",
    "statistics for the number of substitutions , deletions , and insertions for this data set of 1000 mtdna sequences is given in table  [ tbl : stat1 ] .",
    "l|cc & * mean * & * standard dev .",
    "* +    ' '' ''    * substitutions * & 28.00 & 18.38 + * deletions * & 0.90 & 2.46 + * insertions * & 0.95 & 1.10 +    of the 1000 sequences , 453 have only substitution events with respect to the reference sequence , @xmath143 .",
    "so we used this subset of 453 sequences to test the simulated performance of the method of theorem  [ thm : deterministic2 ] .",
    "the distribution of the number of substitutions in each of these sequences is shown in figure  [ fig : subs ] .",
    ".,width=288 ]    note that these frequencies do not follow a normal distribution , which shows the importance of our using real - world data , such as this , rather than randomly - generated or simulated data",
    ". the statistical diversity of the mtdna data is actually a reflection of the racial diversity of the people whose mtdna data is included in our data set .",
    "that is , edit distance from the reference sequence , @xmath143 , across the human species , is not uniformly or normally distributed . instead ,",
    "edit distance from rcrs is a reflection of human migration patterns , as illustrated in figure  [ fig : migration ] .",
    "the 45.3% of the sampled mtdna sequences with substitution - only modifications from rcrs are exactly the set of sequences that can be effectively discovered by the single - count mastermind attack of theorem  [ thm : deterministic2 ] .",
    "thus , we simulated the performance of this attack on each one of these sequences and tabulated the number of guesses that would be needed in each case in order to discover the complete identity of each sequence .",
    "interestingly , 90% of the simulated substitution - only mastermind attacks completed with 375 guesses or less .",
    "the complete distribution of single - count mastermind attack lengths for this data set are shown in figure  [ fig : subonly ] .",
    "all 1000 sampled mtdna sequences were then used to test the performance of the method of theorem  [ thm : align2 ] .",
    "sequence - alignment mastermind attacks were simulated for each such mtdna sequence while the number of sequence - alignment tests were counted for each .",
    "interestingly , 90% of these simulated subsequence - alignment mastermind attacks completed with 875 guesses or less . and some completed with much fewer than this .",
    "the complete distribution of sequence - alignment mastermind attack lengths for this data set is shown in figure  [ fig : subseq ] .",
    "we have shown that , even though the single - count and sequence - alignment mastermind satisfiability problems are np - complete , one can effectively mount mastermind attacks on arbitrary genomic sequences just by knowing basic information about the length of the sequences and the number of characters in the alphabet used to construct those sequences . moreover ,",
    "if one has some basic statistical information about these sequences , relative to a reference sequence , then one can mount the mastermind attack with surprising effectiveness .",
    "in fact , we provided a case study suggesting that such attacks are already possible and surprisingly efficient for mtdna sequences .",
    "one conclusion to draw from this work is that privacy - preserving protocols for performing a query with a sequence , @xmath0 , against a genomic database , @xmath16 , should take into account the entire set of comparisons  @xcite , with @xmath0 and the sequences in @xmath16 , rather than relying on the privacy - preservation of each individual comparison in turn .",
    "for example , in the usage model where bob is a user querying a genomic database , the mastermind attack is weakened if it is difficult for bob to know the index of the sequences he is comparing against  for example , if the database owner , alice , presents her sequences in a different random order each time .",
    "such an obfuscation does not defeat the mastermind attack , however , if bob is able to use other reasoning inferences to match scores of his query sequences across multiple queries in alice s database of sequences .    in terms of further exploration of the vulnerability of genomic data to the mastermind attack , one interesting direction for future",
    "work would be to test the vulnerability of entire human genomes to the mastermind attack , once we have enough completed genomes to do such an experimental study .",
    "in addition , other directions for future research therefore could include new , efficient privacy - preserving schemes for querying entire genomic databases with respect to sequence - alignment queries . such results would negate the privacy - exposing vulnerabilities of the mastermind attack .",
    "we would like to thank pierre baldi for suggesting the security of genomic data as an important research question and for providing the mitochondrial dna data used in our experiments , including the characterizations in terms of the reference sequence , rcrs .",
    "we would also like to thank david eppstein , daniel hirschberg , stas jarecki , and michael nelson for helpful discussions regarding the topics of this paper .",
    "this research was supported in part by the national science foundation under grants 0724806 , 0713046 , and 0847968 . some of the results of this paper appeared in preliminary form as  @xcite , albeit with some flawed arguments for justifying previous versions of theorems  [ thm : seq - align - q ] and  [ thm : align2 ] .",
    "michael t. goodrich is a fellow of the ieee and chancellor s professor at the university of california , irvine , where he has been a faculty member in the department of computer science since 2001 .",
    "he received his b.a . in mathematics and computer science from calvin college in 1983 and his phd in computer sciences from purdue university in 1987 , and he worked as a professor in the department of computer science at johns hopkins university from 1987 - 2001 .",
    "his research is directed at algorithms for solving large - scale problems motivated from information assurance and security , the internet , information visualization , and geometric computing ."
  ],
  "abstract_text": [
    "<S> we study the degree to which a character string , @xmath0 , leaks details about itself any time it engages in comparison protocols with a strings provided by a querier , bob , even if those protocols are cryptographically guaranteed to produce no additional information other than the scores that assess the degree to which @xmath0 matches strings offered by bob . </S>",
    "<S> we show that such scenarios allow bob to play variants of the game of mastermind with @xmath0 so as to learn the complete identity of @xmath0 . </S>",
    "<S> we show that there are a number of efficient implementations for bob to employ in these mastermind attacks , depending on knowledge he has about the structure of @xmath0 , which show how quickly he can determine @xmath0 . </S>",
    "<S> indeed , we show that bob can discover @xmath0 using a number of rounds of test comparisons that is much smaller than the length of @xmath0 , under reasonable assumptions regarding the types of scores that are returned by the cryptographic protocols and whether he can use knowledge about the distribution that @xmath0 comes from . </S>",
    "<S> we also provide the results of a case study we performed on a database of mitochondrial dna , showing the vulnerability of existing real - world dna data to the mastermind attack .    </S>",
    "<S> * keywords : * character strings , mastermind , mitochondrial dna .    </S>",
    "<S> = 1 </S>"
  ]
}