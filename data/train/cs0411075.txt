{
  "article_text": [
    "computer processors have for many years been designed based on the von - neumann or harvard architectures .",
    "software to be run on these processors are compiled into a set of processor - specific instructions , which are loaded during run - time and executed sequentially .",
    "such sequential processing of an instruction every few clock cycles works well enough for typical pc applications such as text editors , which have low data processing requirement .",
    "however , pcs are also often used for computationally intensive high - throughput data processing , especially in scientific research work .",
    "the sequential nature of the typical pc processor , such as the intel pentium , becomes a major processing bottleneck in such situations .",
    "the solution to this problem has been to use processors with greater clockspeeds , or to network several of these pcs together into a cluster or computational grid @xcite .",
    "more recently , there has been an increasing interest in the use of reconfigurable hardware chips for such compute intensive data processing .",
    "these chips , such as field programmable gate arrays ( fpgas ) , possess a fundamentally different architecture from the typical von - neumann or harvard type processors . the algorithms to be executed",
    "are normally defined in a hardware description language and compiled into a bitstream , which will be downloaded to the fpga as and when use of the algorithm is desired .",
    "this bitstream download will reconfigure the hardware logic on the fpga accordingly , allowing data passed into the fpga to be processed in hardware , in parallel .",
    "several reconfigurable computing research projects @xcite @xcite @xcite focus on developing new , improved designs of reconfigurable chips .",
    "other groups @xcite @xcite @xcite utilize off - the - shelf fpgas , such as those from xilinx @xcite , and work on issues such as logic placement and routing optimization @xcite .",
    "project proteus @xcite was initiated by the dsp technology centre of ngeeann polytechnic to develop a low - cost fpga - based reconfigurable computing platform for typical pcs , with a portable software platform layer and using off - the - shelf hardware components .",
    "the hardware is designed for fast fpga reconfiguration operations , with minimal physical hardware component count and complexity , while maintaining the desirable features of a reconfigurable platform such as configuration bitstream readback and dynamic reconfigurability features .",
    "this paper discusses the requirements and design of this hardware architecture .",
    "section [ sectdesignconsiderations ] describes the requirements of the reconfigurable computing platform hardware architecture and how this compares to existing solutions , section [ sectsystemarchitecture ] discusses the architectural issues addressed and the design of the hardware , section [ sectexperiments ] presents some experimental results on the fpga resource requirements , and finally section [ sectconclusion ] concludes this paper .",
    "to understand the architecture of the hardware , it will be useful to first discuss the requirements imposed by its intended use and desired features .",
    "firstly , the reconfigurable computing platform is intended to be pc - based .",
    "the fpga will therefore be accessed over a common pc bus such as pci-33 , pci - x , firewire or usb .",
    "a suitable bus has to be selected that is fast enough to transfer both data to be processed , and the fpga reconfiguration bitstream .",
    "since there are such a wide variety of pc bus interface standards , it is also desirable for the pc interface core to be swappable to other standards , depending on what is available on the pc side .",
    "secondly , a major goal of this work has been to develop a system that allows for fast reconfiguration of the fpga by the pc .",
    "this is with the view that the proteus software platform @xcite running on the pc acts as a supervisor , downloading algorithms in the form of reconfiguration bitstreams to the fpga as and when desired .",
    "this has to be fast because in a processing chain of algorithms , we may have a scenario where data is first processed by a particular algorithm on the fpga before the results are returned to the pc , and the fpga has to be reconfigured with the next algorithm in the processing chain to continue processing of that data in the next step",
    ". fast reconfiguration will minimise the delay introduced by this reconfiguration step .",
    "thirdly , it is desirable to keep the physical hardware design simple , with as low a component count as possible",
    ". this will contribute towards one of the goals of keeping the development costs of this platform low .",
    "one way in which this can be done is to run both the pc interface core and the algorithm implementation on the same fpga .",
    "however , this will bring about the additional requirement that the part of the fpga holding the algorithm should be reconfigurable dynamically and independently of the pc interface , even with both on the same chip . to keep the hardware design simple , each hardware board also need not have multiple fpgas because the software platform allows the concurrent use of fpgas on multiple boards .",
    "other reconfigurable platform architectures have been developed , but none satisfies all the requirements given in this section .",
    "for example , blodget et .",
    "al @xcite have designed a self - reconfiguring platform for embedded systems which utilises a soft processor core within the fpga instead of an external pc .",
    "@xcite have developed a system that uses the rs-232 port to transfer configuration data to the fpga , the low transfer speed of which is a limiting factor in reconfiguration performance .",
    "considering the requirements set out in section [ sectdesignconsiderations ] , the hardware architecture was designed to utilise the pci bus and the self reconfiguration capability of the xilinx virtex ii fpga .",
    "the pci bus is commonly found in typical pcs , and allows the hardware to be fully powered from the bus itself .",
    "this removes the need for additional power - supply circuits , and avoids electric current separation issues in pci signalling .",
    "in addition , the high - throughput of the bus ( 132mbyte / sec for the 33mhz 32-bit pci ) allows for fast transfer of the reconfiguration bitstream from the pc to the fpga . the maximum rate at which a bitstream can be transferred over the selectmap bus to reconfigure a xilinx virtex ii fpga is 50mbyte / sec , so the pci bus can easily allow for operation of the selectmap bus at its maximum speed .",
    "using the self reconfigurability feature of the fpga allows one part of the fpga to hold the pci interface , while the other holds the downloaded algorithm .",
    "this allows the hardware board to remain very simple , removing the need for a separate pci interface chip .",
    "this approach also reduces the number of possible points of system failure caused by physical connections . at the same time",
    ", the xilinx modular design flow @xcite allows the pci interface and algorithm parts to be developed and tested independently , even though both are on the same fpga .",
    "the combination of these features satisfies all the three requirements of using a common pc bus standard , fast fpga reconfiguration timings , and a simple physical hardware board .",
    "the details of the system architecture are explained below .      as described in the third design consideration of section [ sectdesignconsiderations ]",
    ", it is desirable for the physical hardware to be kept as simple as possible .",
    "the hardware board was therefore designed with only two main components - the fpga and a flash ram chip , as shown in figure [ fighardware ] .",
    "the fpga is placed as close as possible to the physical pci interface , so that it will satisfy the pci specification requirements for signal line lengths .",
    "the flash memory chip holds the fpga s initial configuration bitstream , which is downloaded to the fpga through the selectmap interface upon power - up .",
    "this is necessary because sram - based fpgas are volatile and lose their configuration when power is removed .",
    "this initial configuration bitstream holds the logic for the pci interface core and the self - reconfiguration controller .    once the initial configuration is done , the host pc may download partial bitstreams over the pci bus to reconfigure the fpga according to the desired algorithm .",
    "in designing the physical hardware , it was decided that only a single fpga would be included on each board .",
    "other hardware designs exist that use arrays of fpgas , but these introduce additional design issues in interchip connectivity , communication protocol specification , and task distribution . with the increase in the density and available logic area of fpgas in recent years , complex algorithms can now be easily contained in a single fpga .    having a single chip solution benefits the algorithm designer in that he will not need to be concerned with the complexity of breaking his design down into various parts for each fpga , and constraining communications between these parts to the interchip signal lines that have been routed . in an event where more than one fpga is needed",
    ", the proteus software platform can utilize multiple boards concurrently .",
    "the use of a single fpga to hold both the pci core and the desired algorithm involves partitioning the chip into two modules - a fixed part and a reconfigurable part .",
    "the fixed part holds the pci core and configuration controller , and is defined by the initial full bitstream downloaded from the flash upon bootup . the reconfigurable part is dynamically configured according to the desired algorithm , via a corresponding partial bitstream download from the pc .",
    "this effectively uses the fpga as a partial self - reconfigurable system , with the fixed part configuration controller internally performing this dynamic reconfiguration operation on the reconfigurable part .",
    "both these parts are linked via bus - macros @xcite , which provide a well - defined physical interface of signal lines .",
    "figure [ figpartition ] shows the partitioning of the fpga for these four main components .",
    "the xilinx virtex 2 xc2v3000 was used for the prototype developed .",
    "the architecture of the virtex 2 family requires module areas to span the full height of the chip .",
    "reconfiguration granularity is thus restricted to full columns , and modules correspondingly have only a 1-dimensional flexibility of area placement .",
    "the fixed part is constrained to occupy the right - most columns because the internal configuration access port ( icap ) in a virtex 2 fpga is located at the lower - right corner .",
    "the icap is used by the configuration control logic to reconfigure the reconfigurable part of the chip .",
    "the io pin pads used by the pci core are accordingly lined up along the right side border of the fpga .      in implementing algorithms for the reconfigurable part",
    ", it will be undesirable and inconvenient if the entire design ( including the fixed part ) has to be compiled and tested as a whole each time .",
    "the xilinx modular design flow allows each module ( the fixed part and the reconfigurable part ) to be developed , tested , and debugged independently . only the reserved module area and the bus - macro interface have to remain consistent , and are defined in the common top - level information used in individual module designs .",
    "the module area constraints are used in the place - and - route ( par ) step to define the module boundaries , outside of which logic placement and signal routing is disallowed .    from the individual module design , a partial bitstream can be created that represents the configuration information for a single module .",
    "this partial bitstream created for the reconfigurable part",
    "is dynamically downloaded from the pc to reconfigure the corresponding portion on the fpga , according to the desired algorithm .    the full",
    "bitstream derived from the design of the top - level and fixed part is stored on the flash for the initial boot - up configuration of the fpga .",
    "although xilinx has stated @xcite that it is not possible to use the pci core in the modular design flow , this work has shown that it is actually possible to do so .",
    "the configuration controller of the fixed part uses the internal configuration access port ( icap ) of the xilinx virtex 2 fpga to perform self - reconfiguration .",
    "this process is carried out without influence of the host pc s cpu .",
    "the configuration controller obtains the reconfiguration data from a memory location shared with the pc .",
    "this avoids having to place a restriction on the configuration bitstream size based on the available on - chip fpga ram . in other self - reconfigurable systems",
    "@xcite @xcite , a limited amount of on - chip memory is used to store the reconfiguration data .",
    "this results in the self - reconfiguration process taking a long time because of the need to iteratively load portions of the configuration bitstream and incrementally reconfigure the fpga .",
    "a second limitation is in the throughput of the link over which the reconfiguration bitstream is sent - this often becomes a bottleneck in the speed of reconfiguration if a low throughput connection is used , such as in @xcite where an rs232 serial line is used .    in this work",
    ", the bus - master capability of the pci core allows for direct use of the pc s memory , which is large enough to hold an entire configuration bitstream .",
    "the data is transferred in a continuous stream over the pci bus to the icap , removing the need for incremental reconfiguration and offering the fastest possible speed of reconfiguration over the high - throughput pci bus .",
    "the icap uses the select map bus protocol , so the configuration controller has to act as a bridge between that and the pci bus . to provide for clock independence between these parts , on - chip dual - port block rams ( brams ) are used as a buffer .",
    "this technique avoids the need to exchange ownership of a shared ram space between the pci interface and the select map interface as done in our previous work @xcite , thereby minimizing the latency time in accessing the icap .",
    "the prototype implementation uses two brams ( on a virtex 2 xc2v3000 ) for a total buffer size of 256x32bit .",
    "internally , the configuration controller works with 32-bit items to match the width of the pci bus .",
    "a multiplexer segments each of these 32-bit items into four single byte items , for passing on to the select map bus that is 8-bit wide . in the event where the pci bus fails to deliver sufficient data to the buffer in time",
    ", the controller pauses the operation by stopping the configuration clock .",
    "it is resumed once data is available again .",
    "the pci interface is used for two purposes : to transfer partial reconfiguration bitstreams to the fpga , and to exchange data with the algorithm downloaded to the fpga .",
    "both of these transfers can use the bus - master feature of the pci bus , which allows direct shared access to the pc s ram to obtain data .",
    "this ensures that the design on the fpga is not limited by the small amount of on - chip ram , and provides for the fastest possible direct data transfer from the pc .",
    "the design of the fixed part which allows for this is shown in figure [ figfixedpartdesignconcept ] .",
    "the major components of the fixed part include the fixed part control section , reconfig part control section , common part control section , stream data section , and select map data section .",
    "the fixed part contains the control logic necessary for busmaster mode access of the pci bus .",
    "it also handles all communication with the device driver , and transports data to / from the reconfigurable part .",
    "the fixed part acts as a bridge between the packet oriented transfer of the shared pci bus and the continuous data stream transfer with the reconfigurable part .",
    "the fixed part is split into three control sections - the common part control , reconfig part control , and fixed part control , and two data sections - stream data and select map data .",
    "the common part control holds pci access specific functions and contains the interrupt generation logic .",
    "the reconfig part control allows the reconfigurable part to easily implement static registers that can be individually addressed , read from , and written to . using these registers , the reconfigurable part may obtain setup values from the pc side and report back status information .",
    "the reconfigurable part may also invoke interrupts via the fixed part design .",
    "the fixed part control section controls the pci bus / reconfigurable part data transfer tasks .",
    "the data sections each hold dual - port block rams ( brams ) to buffer data between the pci bus and the reconfigurable part .",
    "the dual - port feature allows the brams to be accessed from different clock domains on each side .",
    "one port is accessed from the pci side and driven with the pci clock , while the other port is accessed from the reconfigurable part and driven with the clock from that .",
    "a buffer size of 256x32bits for each stream port has been found sufficient to contain the access latency of the pci bus .",
    "the functional blocks of the fixed part control section is shown in figure [ figfixedpartcontrol ] .",
    "the fixed part control contains a busmaster initiator and a busmaster address provider .",
    "the busmaster initiator starts bus - master data transfers with the allocated ram on the pc , over the pci bus .",
    "this is done at each transfer event , which are triggered on the fill status of the internal bram buffers .",
    "the busmaster address provider keeps track of the pci addressing , and is needed because a transfer on the shared pci bus can be interrupted at any time .",
    "when such an interruption happens the transfer has to be restarted at the next address , after the bus is available again .",
    "the transfer arbitration block schedules the utilization of the pci interface by the four possible stream targets - upstream , downstream , select map read , and select map write .",
    "all the four targets utilize the same pci interface , so the transfer arbitration block uses a simple scheduling algorithm to equally allocate data transfer requests - one target is not allowed to request the pci interface twice in a row if multiple requests are pending .",
    "each stream target has a corresponding control section , which generate data transfer requests and monitor the status of the bram buffers in the data sections .",
    "the fixed part design as described in the previous section was compiled for a xilinx xc2v3000ff1152 - 4 fpga using the xilinx ise 6.2 .",
    "figure [ figfloorplanner ] shows a screen capture of the ise floorplanner with the regions of the fpga allocated for the fixed part in yellow , and that for the reconfigurable part in blue .",
    "figure [ figscreencapture ] is a screen capture from the ise fpga editor , showing the resources used by the fixed part .",
    "a total of 2211 slices ( out of a total of 14336 ) and 3 brams are used , taking up about 15% of the xc2v3000 .",
    "this paper has presented a reconfigurable computing platform hardware architecture that satisfies the design requirements of being pc based , allowing for fast reconfiguration over the pci bus , and simplicity of physical hardware design .",
    "we gratefully acknowledge the funding support provided by the ngee ann kongsi ( singapore ) and ngee ann polytechnic s innovation & enterprise office .",
    "special thanks to the rest of the proteus team - philip wong , kelvin lim and kelly choo ."
  ],
  "abstract_text": [
    "<S> field programmable gate arrays ( fpgas ) have recently been increasingly used for highly - parallel processing of compute intensive tasks . this paper introduces an fpga hardware platform architecture that is pc - based , allows for fast reconfiguration over the pci bus , and retains a simple physical hardware design . </S>",
    "<S> the design considerations are first discussed , then the resulting system architecture designed is illustrated . </S>",
    "<S> finally , experimental results on the fpga resources utilized for this design are presented .    </S>",
    "<S> murray and balemi : using the document class ieeetran.cls    reconfigurable computing , hardware frameworks , project proteus </S>"
  ]
}