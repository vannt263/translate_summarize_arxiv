{
  "article_text": [
    "for systems that involve grains , fluids , and deformable solids , a key challenge is to determine reasonable methodologies to couple very distinct numerical techniques . on their own ,",
    "systems of dry grains are commonly simulated using the discrete element method ( dem ) , wherein each grain s position is evolved by newton s laws applied by way of contact interactions with other grains . for fluids , a variety of approaches exist including finite volume methods , finite difference methods , and the lattice boltzman method ( lbm ) , which are based on updating fluid data on an eulerian background set . while the former two methods directly simulate navier - stokes , the latter utilizes a lattice discretization of the boltzmann equation , which approaches navier - stokes under the proper refinement . as for solids , in the large deformation limit ,",
    "finite - element methods are commonly used , typically based on a moving lagrangian node set .",
    "systems that mix particles , fluids , and deformable solids require development of methods that allow proper momentum exchange between these disparate representations , which can be computationally quite complex if not reduced",
    ". however , because the particles can enter a dense - packed state , we do not wish to reduce the particle - fluid mixture to a simplified dilute - suspension continuum model .",
    "the purpose of this paper is three - fold :    1 .",
    "we introduce a reduced - order method that permits continuum deformable solid models , represented with finite - elements , to interact with both grains and fluid in a dynamic environment .",
    "the fluid - particle implementation is based on a joint lbm - dem method similar to those used in @xcite .",
    "lbm is well - suited to this problem because of its ease dealing with many moving boundaries .",
    "the solid interaction method introduced uses data interpolation to map deformed solid configurations from separate , individual solid deformation tests to the in - situ solid as it interacts with particles and fluid .",
    "because of the inherent complexity in multi - material modeling , the ability to remove the need to simulate large zones of the computational domain can be advantageous , as long as the macro - physics in those zones can be properly represented otherwise .",
    "herein , we introduce an lbm sub - routine that allows us to remove a large zone of the computational fluid domain and replace it with a global analytical form , which handshakes back to the lbm simulation domain appropriately .",
    "+ 3 .   as a key example of",
    "where these methods may come to use , we demonstrate their usage in two different piston - valve geometries . in both piston - valve geometries",
    ", a large piston pushes a particle - laden fluid through a passive valve .",
    "the valve is spring - loaded , and opens when the slurry pressure beneath is large enough .",
    "the deformable solid aspect comes into play because the valve has a rubber component along its bottom , which is intended to make a seal with the valve seat .",
    "we conduct a systematic parameter study of valve behavior under variations in particle size , input packing fraction , and polydispersity as well as variations in fluid viscosity and piston speed .",
    "we consider two types of valve setups : ( 1 ) a ` pressure valve ' , in which the valve separates a zone of pressurized slurry above it from a zone of low pressure below it .",
    "slurry pushed through the valve is hence pressurized as it passes through .",
    "( 2 ) a ` safety valve ' , whose goal is to ensure the pressure in a flowing conduit does not exceed a critical limit . here , the valve is placed adjacent to a flowing conduit and remains closed unless the pressure is high enough .",
    "figure  [ fig : opned_closed ] shows mid - simulation snapshots of both valve setups , showing particles , fluid stream lines , rubber deformation , and the geometry of the valve and frame .",
    "note that we exploit symmetry about the @xmath0-plane and simulate only half the domain .    ) , deformable solid ( colored according to equivalent shear strain @xmath1 ) , valve ( dark gray ) , and frame ( light gray ) .",
    "a spring ( not shown ) applies a downward force on the valve . ]    in testing our method , we provide numerical validations of the new techniques introduced .",
    "we also perform validations of the lbm approach in the simulated valve geometry . in analyzing valve simulation results ,",
    "we provide physical commentary where possible to justify various observations .",
    "the discrete - element method ( dem ) is already a mature tool that is applied in conjunction with experiments both for a better understanding of the micromechanics of granular materials and as a means of @xmath2 experimentation when laboratory experiments are unavailable . in a similar vein",
    ", the inclusion of a fluid at the subgranular scale in dem simulations provides a powerful tool in the broad field of fluid - grain mixtures . obviously , the available computational power and research time restrict considerably the number of particles or the size of a physical system .    in the case of dry granular materials ,",
    "statistically representative samples are obtained and simulated with @xmath3 of particles in 2d @xcite . despite enhanced kinematic constraints ,",
    "2d simulations often lead to novel physical insights and realistic behaviors that can be easily generalized to 3d configurations",
    ". however , with fluid in the pore space , 2d simulations are much less reliable in the dense regime since the pore space is discontinuous with zero permeability .",
    "this two - dimensional flaw can be partially repaired by adding artificially a permeable layer on the particles .",
    "but only 3d simulations may account for a realistic behavior of particle - fluid mixtures with their natural permeability .",
    "moreover , complex geometries / boundaries relating to realistic engineering problems can not be fully captured in 2d simulations or symmetric 2d extensions ( e.g. axis - symmetry ) ; only 3d approaches can handle such problems in full generality .",
    "we developed a 3d fluid dynamics algorithm based on the lattice boltzmann method ( lbm ) .",
    "this algorithm was interfaced with a dem algorithm with a standard linear spring - dashpot - friction model of contact between particles .",
    "the combined lbm - dem method for particle - laden fluid is then further coupled to a deformable solid domain using finite elements to model a rubber - like behavior .",
    "the rubber coupling is intentionally simplified .    within actual computer power",
    ", it is still a significant challenge to model the entirety of most engineering systems and problems .",
    "certain sub - scale details and complex interactions are unnecessary to capture the macroscale system response for a given loading .",
    "we utilize symmetric boundaries ( where possible ) and a variety of techniques to shrink the system size and average - up sub - scale phenomena . specifically in this work : to handle sub - scale behavior in the fluid we use a large - eddy - simulation ( les ) technique ( see sect .",
    "[ subsec : lbm ] ) , to mimic a large fluid domain outside the focus region we have created a technique we denote _ zoom - in with effective boundaries _ ( zieb ) ( see sect .",
    "[ subsec : zoominlinktech ] ) , and to reduce simulation time we developed a weak coupling to the rubber domain based on a _ neo - hookean _ model developed in abaqus .",
    "the last part is computed separately and only the result is imported into lbm - dem simulation ; the coupling and description of this part is expounded in sec .",
    "[ subsec : lbmdemrubbercoupling ] .",
    "the dem is based on the assumption of elastic solids with damping and frictional contact behavior @xcite .",
    "newton s equations of motion are integrated for all degrees of freedom with simple force laws expressing the normal and friction forces as explicit functions of the elastic deflection defined from the relative positions and displacements at contact points .",
    "we treat all quasi - rigid solids in the domain using this dem description , including grains , the valve , and solid system boundaries .",
    "correspondingly , all solid - on - solid contact forces ( e.g. grain on grain , grains on valve , grain on solid wall ) are obtained using dem contact laws .",
    "the valve and system walls are discretized as a kinematically constrained connected mesh of polyhedral solid ` particles ' .    to simplify contact interactions ,",
    "we assume linear elastic normal and tangential contact forces characterized by a normal stiffness @xmath4 and tangential stiffness @xmath5 .",
    "this is applied to all contact interactions , e.g. between spheres , polyhedra , or sphere - polyhedra , though the stiffnesses can vary depending on the two objects in contact .",
    "in additional to the elastic part , a dissipative part of the contact force is necessary @xcite . in our model",
    ", we use a linear visco - elastic law for normal damping and a linear visco - elasto - plastic law for tangential damping and friction forces where the plastic part uses a coulomb law .",
    "the visco - elastic law is modeled by a parallel spring - dashpot model .",
    "the contact normal force is defined as : @xmath6 where @xmath7 is the contact normal vector and @xmath8 is the relative velocity along the contact normal .",
    "@xmath9 represents a viscosity parameter with a value that depends on the normal restitution coefficient between grains . according to coulomb s law",
    "the friction force is given by : @xmath10 and @xmath11 where @xmath12 is the friction coefficient , @xmath13 is the tangential relative velocity , and @xmath14 is a viscosity parameter , which depends on the tangential restitution coefficient .    the equations of motion ( both linear and angular momentum balance ) are integrated according to a velocity verlet scheme @xcite .",
    "the lbm is based on a material representation of fluids as consisting of particle distributions moving and colliding on a lattice @xcite .",
    "the partial distribution functions @xmath15 are introduced to represent the probability density of a fluid particle at the position @xmath16 with a velocity @xmath17 at time @xmath18 along discrete direction @xmath19 .",
    "the three components of @xmath20 are given in tab .",
    "[ tab : civalue ] .",
    "rrr rrr rrr rrr rrr rrr rr @xmath19 & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & 13 & 14 & 15 & 16 & 17 & 18 + @xmath21 & 0 & -1 & 0 & 0 & -1 & -1 & -1 & -1 & 0 & 0 & 1 & 0 & 0 & 1 & 1 & 1 & 1 & 0 & 0 + @xmath22 & 0 & 0 & -1 & 0 & -1 & 1 & 0 & 0 & -1 & -1 & 0 & 1 & 0 & 1 & -1 & 0 & 0 & 1 & 1 + @xmath23 & 0 & 0 & 0 & -1 & 0 & 0 & -1 & 1 & -1 & 1 & 0 & 0 & 1 & 0 & 0 & 1 & -1 & 1 & -1 +    the lattice boltzmann method is often non - dimensionalized when applied to physical problems .",
    "the governing macroscopic equations are given in terms of lattice units : @xmath24 where @xmath25 is the lattice spacing , @xmath26 is the lattice speed with @xmath27 the time step , and @xmath28 is the fluid density at zero pressure . for the following , we will describe the method in lattice units .",
    "figure  [ fig : schemalattice ] shows a cartesian grid where the meshing scheme d3q19 , corresponding to 18 space directions in 3d used in our simulations , is represented . in lbm ,",
    "the scheme d3q19 is defined for each node where the distribution functions evolve according to a set of rules , which are constructed so as to ensure the conservation equations of mass , momentum and energy ( with dissipation ) , so as to recover the navier - stokes equations @xcite .",
    "this holds only when the wave lengths are small compared to the lattice spacing @xcite .",
    "at each lattice node , the fluid density @xmath29 and momentum density @xmath30 are defined as @xmath31 @xmath32 and the temperature is given by @xmath33 where @xmath34 is the number of space dimensions , @xmath35 is particle mass , and @xmath36 is the boltzmann constant .",
    "the equilibrium state is assumed to be governed by the maxwell distribution : @xmath37 \\label{eqn : maxw}\\ ] ] where @xmath38 is the mean velocity . by expanding ( eq .",
    "[ eqn : maxw ] ) to order 2 as a function of @xmath39 , which is the local mach number with @xmath40 being the lbm sound velocity , a discretized form of the maxwell distribution is obtained and used in the lbm : @xmath41 \\label{eq : equilibre_maxwell_boltzmann}\\ ] ] where the factor @xmath42 , @xmath43 and the rest of @xmath44 . @xmath45",
    "depend on the scheme with the requirement of rotational invariance @xcite .",
    "the lbm sound speed is then given by @xmath46 .",
    "the velocities evolve according to the boltzmann equation . in its",
    "discretized form , it requires an explicit expression of the collision term .",
    "we used the bhatnagar - gross - krook ( bgk ) model in which the collision term for each direction @xmath19 is simply proportional to the distance from the maxwell distribution @xcite : @xmath47 where @xmath48 is a characteristic time .",
    "hence , for the d3q19 scheme , we have a system of @xmath49 discrete equations governing the distribution functions : @xmath50 these equations are solved in two steps . in the collision step ,",
    "the variations of the distribution functions are calculated from the collisions : @xmath51 where the functions @xmath52 designate the post - collision functions . in the streaming step , the new distributions are advected in the directions of their propagation velocities : @xmath53    the above equations imply an equation of state @xcite : @xmath54 the kinematic viscosity is then given by @xcite @xmath55 \\label{eq : viscositelbm}\\ ] ] with the requirement @xmath56 .",
    "as discussed in @xcite , the lattice boltzmann method holds only when the pressure wave lengths are small compared to the lattice spacing unit .",
    "this imposes a limitation on mach number @xmath57 and therefore fluid speeds higher than the sound speed can not be simulated .",
    "in nature , for a given fluid we have : sound speed @xmath58 , density @xmath28 and viscosity @xmath59 . from eq .",
    "[ eq : collision_step ] , we need the relaxation time @xmath48 .",
    "this is related to @xmath60 , @xmath59 and @xmath25 by : @xmath61 equation .",
    "[ eq : tauphyslbm ] shows that since @xmath60 and @xmath59 are fixed from fluid properties , only @xmath25 can be used to ensure the stability of lbm , which becomes unstable when @xmath62 .",
    "numerically , there is a limitation in computer capability regarding the smallest value of @xmath25 . to handle this , a _ sub - grid turbulent model _",
    "based on les with a smagorinsky turbulence model is used @xcite .",
    "the viscosity formulation is : @xmath63 = c_s^2\\left[\\tau +   \\tau_{_t } - \\frac12\\right]\\ ] ] where @xmath64 is the sub - grid les viscosity and @xmath65 is the sub - grid les lbm relaxation time .",
    "the les viscosity is calculated from the filtered strain rate tensor @xmath66 and a filter length scale @xmath67 through the relation @xmath68 where @xmath69 is the smagorinsky constant . in lbm , @xmath70 is obtained from the second momentum @xcite @xmath71 as @xmath72 , where @xmath73 . from @xmath70 and @xmath74 , @xmath65 is expressed as :    @xmath75\\ ] ]    where the filter length scale @xmath76 is the spatial lattice discretization .",
    "there exist different techniques to model fluid - structure interaction .",
    "the most used in cfd is stress integration , however , in lbm the preferred approach is based on momentum exchange @xcite .",
    "this approach is simple in lbm , since in lbm each node already contains information about the derivatives of the hydrodynamic variables in each distribution function @xmath77 @xcite . due to the presence of a solid boundary , after the collision step but before the streaming step , we know the population of @xmath77 except those which reflect off the solid wall as shown in fig .",
    "[ fig : fluideparticule_cb ] ( @xmath78 ) . in our simulations , we use the method developed by bouzidi @xcite , which mimics a macroscopic no - slip condition . for clarity",
    ", we describe the interaction rules using lattice units .",
    "this means that the time step is @xmath79 , the space discretization is @xmath79 , etc . out of the characteristic scales",
    ", we will denote , around the fluid - solid boundary , @xmath21 as position and the subscripts @xmath80 , @xmath81 , and @xmath82 respectively will indicate either the _ fluid _ or _ solid _ domain and the _ fluid - solid boundary_. we present the method in simplified 1d form . for more clarity in the way",
    "momenta are exchanged between fluid and solid domains , let us introduce @xmath83 . according to the lbm scheme ( collide and stream sect .",
    "[ subsec : lbm ] ) in the presence of a solid wall , we have two scenarios depending on the wall position @xmath84 ( see fig .",
    "[ fig : fluideparticule_cb ] ) :    1 .",
    "@xmath85 where fluid leaves node @xmath86 , reflects off the wall , and reaches @xmath86 again in time less than @xmath27 .",
    "2 .   @xmath87 where fluid leaves node @xmath86 , reflects off the wall , and reaches @xmath86 again in time greater than @xmath27 .    to handle these scenarios ,",
    "we introduce a fictitious node @xmath88(see fig .",
    "[ fig : fluideparticule_cb ] ) such that after streaming , a fluid particle leaving @xmath88 arrives at @xmath86 exactly in time @xmath27 .        as shown in fig .",
    "[ fig : fluideparticule_cb ] , if @xmath86 is the last fluid node before we reach the solid boundary , @xmath89 should be a solid node .",
    "let @xmath90 be the distribution function such that @xmath90 is the opposite direction of @xmath19 where @xmath19 is the direction oriented from fluid node to solid boundary . by using a linear interpolation ,",
    "@xmath90 is expressed as follow :    @xmath91    where @xmath92 corresponds to the distribution function of @xmath77 after the collision step but before streaming and @xmath93 .",
    "the term @xmath94 is calculated from the boundary velocity and is zero if the boundary is stationary .",
    "@xmath94 is calculated by considering that the fluid velocity @xmath95 evolves linearly between @xmath96 and @xmath97 .",
    "if @xmath98 is the boundary velocity , @xmath95 is then defined by    @xmath99    at first order in @xmath95 .",
    "the equilibrium value of @xmath77 is given by @xmath100 where @xmath101 is constant and depends on the lattice discretization scheme @xcite .",
    "using a linear interpolation , @xmath94 is given by : @xmath102 hydrodynamic forces acting on the structure are calculated by using momentum exchange @xcite .",
    "let @xmath103 and @xmath104 be fluid and solid momentum calculated near the boundary .",
    "the exchanged momentum is given by : @xmath105 @xmath103 and @xmath104 are calculated as follows : @xmath106 @xmath107 where @xmath34 is the space dimension , and @xmath108 and @xmath109 are respectively the fluid and the solid distribution functions . to be clear",
    ", @xmath109 is constructed at a lattice point occupied by solid by taking the solid velocity @xmath110 and density @xmath111 and assigning a maxwell equilibrium distribution , per eq .",
    "[ eq : equilibre_maxwell_boltzmann ] . the hydrodynamic force @xmath112 and torque @xmath113",
    "are then given by : @xmath114 @xmath115 where @xmath116 is the distance between the center - of - mass of the solid domain and the boundary node @xmath84 .",
    "unlike the coupling between lbm and dem , the lbm - rubber and dem - rubber coupling is indirect .",
    "we focus our explanation below on the case of a rubber ring component of a valve , but the idea can be generalized to other cases .",
    "a first simulation is performed using abaqus from which the deformed rubber shape and reaction force of the valve seat on the rubber are saved for many states of rubber compression .",
    "this simulation uses no fluid or particles .",
    "the abaqus simulation consists of compressing the rubber ring geometry against the bare valve seat ( see inset of fig .  [",
    "fig : force_vs_displacement ] ) .",
    "the rubber is simulated as a nearly incompressible neo - hookean elastic solid with a strain energy @xmath117 ( per unit reference volume ) given by @xmath118 where @xmath119 is the first deviatoric strain invariant defined as @xmath120 , the deviatoric stretches are given by @xmath121 , @xmath122 is the total volume ratio , and @xmath123 are the principal stretches .",
    "the ( small - strain ) shear modulus is @xmath124 and bulk modulus is @xmath125 .",
    "a frictionless contact between rubber and valve seat is used for simplicity .",
    "figure  [ fig : abq_deform_snapshot ] shows several snapshots during the abaqus simulation and fig .",
    "[ fig : force_vs_displacement ] gives the seat net - force on rubber as a function of ( downward ) displacement @xmath126 of the rubber ring , @xmath127 .",
    "we index each deformed rubber configuration by the value of @xmath126 it corresponds to .",
    "the abaqus tests are performed under quasi - static conditions but we also assume damping can exist such that upward the force on the rubber satisfies the relation @xmath128        . ]    then , the data from the abaqus simulation is used in a weak coupling routine to describe rubber configurations when the ring takes part in a slurry simulation . in short ,",
    "the method determines which of the deformed rubber configurations from the stand - alone abaqus tests is the best representation of the actual deformed rubber state at that moment in the slurry problem .",
    "hence , the utility of this method lies in the fact that the rubber deformation that occurs in the actual slurry problem largely resembles the modes of deformation seen in a purely solid compression experiment .",
    "situations where the rubber surface becomes heavily locally deformed could be problematic for this approach .    from the lbm - dem point of view",
    ", the rubber is composed of tetrahedra ; this allows us to compute contact forces for dem and the exchanged momentum for lbm as if it were a simple collection of polyhedral objects .",
    "since the abaqus simulation is performed without fluid or particles , to use its solutions we need to deduce an effective upward force from lbm - dem acting on the bottom rubber surface , which can then be referenced against the abaqus data to infer a deformed rubber shape .",
    "the effective force is needed because the rubber in the abaqus simulations has contact only with the valve seat , whereas in the slurry case , there can be additional forces from fluid and particles extending to the lateral surfaces of the rubber .",
    "key to our routine is to identify two subsets of the exposed rubber surface , denoted surface a and surface b. surface a is the part that makes contact with the valve seat and surface b remains free in the abaqus simulations ( see left fig  .[fig : abq_coupling_config ] ) .",
    "in particular , surface @xmath129 and @xmath130 are geometrically defined using the the last frame of the abaqus simulation where the rubber is fully compressed . in the slurry case , we add uniform hydrostatic stress to the observed rubber loading distribution until the mean normal stress acting on surface b vanishes .",
    "this leaves us with a loading state that resembles one from abaqus .",
    "because the rubber is essentially incompressible , changing the hydrostatic stress uniformly along the surface does not affect the deformed rubber configuration . to be specific , we compute the normal stress on surface @xmath129 using @xmath131 and on surface @xmath130 using @xmath132 where @xmath133 is the stress from hydrodynamic , particle , and valve - seat forces and @xmath134 is the normal vector on section @xmath135 . since the rubber deformation is caused by the shear part of the stress , we uniformly subtract the traction @xmath136 from all normal stresses acting on the rubber .",
    "this modified loading now resembles the abaqus loading ( inset fig .",
    "[ fig : force_vs_displacement ] ) in which only an upward force on surface @xmath129 exists .",
    "therefore , we define the effective upward force on surface @xmath129 as @xmath137 .    the rubber shape is updated using a four step loop , which is performed after particle positions and fluid data are updated .",
    "the goal of the iteration routine is to implicitly solve eq .",
    "[ constit ] for @xmath126 so that the effective force from particles , fluid , and the valve seat on the final rubber state matches the force from eq .",
    "[ constit ] .",
    "* step 1 : compute effective upward force @xmath138 from fluid , particle , and valve - seat interactions on rubber given the current guess for @xmath126 * step 2 : use this force and eq .",
    "[ constit ] to update to a new guess for @xmath126 . *",
    "step 3 : check if new and old @xmath126 differ by less than a tolerance .",
    "if so break , if not update the rubber shape based on the new @xmath126 . * step 4 : update applied force on surfaces @xmath129 and @xmath130 according to the rubber shape given by the new guess for @xmath126 .",
    "we assume that fluid forces do not change throughout the iteration procedure .",
    "this is true by assuming a small incremental rubber shape change between iterates , so only particle and valve - seat forces on the rubber are updated during step 4 .    in step 2",
    "we utilize the following update rule @xmath139 \\frac{\\delta",
    "t}{\\eta } + \\delta}{1 + \\frac{\\nu}{\\eta } } \\label{eqn : rubber_eqn_2}\\ ] ] where @xmath140 is the actual displacement of the rubber at the beginning of the time - step .",
    "the coefficient @xmath141 is numerically selected to aid convergence . note that if the updated value of @xmath126 matches the value inputted , then eq .",
    "[ constit ] is solved .",
    "the update rule above attempts to move @xmath126 toward such a solution with each pass through the iteration loop .",
    "we check convergence of @xmath126 ( step 3 ) using a tolerance that is scaled by the error of the first iterate , @xmath142 , where @xmath143 is the value obtained for @xmath126 after the first pass of the loop .",
    "we use simple linear interpolation to compute values of @xmath127 when @xmath126 is between two neighboring values from the abaqus output .     and @xmath130 , and the initial and final shape of the rubber as it proceeds through the iteration loop to solve eq .",
    "[ constit ] , with a representation of particles in contact shown .",
    "the right figure gives a 1d analog of the model to compute the rubber deformation . ]",
    "the third step consists of updating the rubber shape using the new guess for @xmath126 obtained in step 2 .",
    "again , a linear interpolation is applied as is done for @xmath127 . for the shape , we export the abaqus mesh , which allows the interpolation .",
    "for example , if the new @xmath126 lies directly between two frames of the abaqus data , the rubber shape is updated by moving the nodes of the rubber to positions halfway between those of the neighboring frames .",
    "the fourth step consists of recomputing the contact force between the tetrahedra representing the rubber , and the particles / valve - seat .",
    "the contact force is computed using eq .",
    "[ eq : normal_force ] for the normal part and eq .",
    "[ eq : friction_force ] for the tangential part .",
    "one specificity here is that we do not update @xmath144 during the coupling loop routine unless when @xmath145 where @xmath146 . a schematic model of one update through the iteration loop",
    "is presented in fig .",
    "[ fig : abq_coupling_config ] ( left ) and a 1d mechanical model of the treatment of the rubber interaction is visualized in fig .",
    "[ fig : abq_coupling_config ] ( right ) .      the numerical method described in previous sections",
    "is implemented using the algorithm displayed in fig .",
    "[ fig : algo ] . note that we compute the valve acceleration by enjoining the applied force and mass of the rubber and valve components together in the verlet update ; rubber deformations are not included in the calculation of net acceleration of the valve / rubber composite as they are small compared to the movement of the valve overall . as shown in fig .",
    "[ fig : algo ] , the lbm step is computed in parallel with dem force calculation and rubber force calculation .          the _ zoom - in with effective boundaries _ ( zieb ) technique replaces a fluid reservoir / domain with an analytical solution that interacts dynamically with the remainder of the domain .",
    "the challenge is to determine the correct effective dynamics at the fictitious interface , and to transfer the analytical result to lbm distribution functions . in this study",
    "we model valves , which can be positioned far from the pump that leads the slurry to the valve .",
    "the goal is to avoid having to calculate flow in the expansive pump region . from a computational point of view",
    ", one might assume a simple input velocity boundary condition should solve the problem , however , for a compressible fluid , the imposed flow and pressure may depend on the total removed volume and feedback with the dynamics within the valve system .",
    "in this section , we first detail how to obtain the analytical solution then explain how to implement this solution as an lbm boundary condition .      ) and the closest virtual lattice point ( at @xmath147 ) .",
    ", width=336 ]    per fig .",
    "[ virtual ] , we assume the virtual ( i.e. removed ) domain is a cylinder and piston . the cylinder is initially full of fluid and has total volume @xmath148 . as the piston moves , fluid is pushed into the simulated domain .",
    "let the movement of the piston be given by some prescribed @xmath149 , where @xmath150 measures the piston displacement .",
    "the cross - sectional area of the piston ( and cylindrical domain ) is @xmath151 .",
    "the piston velocity , @xmath152 , is simply defined from the time - derivative of @xmath150 .",
    "define as @xmath153 the mean in - flowing fluid velocity component on the interface between the domains .",
    "let @xmath29 be the average density of fluid in the virtual cylinder between the piston head and the interface .",
    "further , we make the simplifying assumption that in the cylinder region the fluid density is in fact uniform , such that it is equal to @xmath29 throughout .",
    "conservation of fluid mass in the cylinder domain can be expressed by balancing the mass rate within the cylinder against the mass flux into the simulated domain :    @xmath154      \\label{eq : mass_conv}\\ ] ]    in a fully continuum framework , the above equation would need to be augmented with momentum balance in order to provide the in - flowing velocity , @xmath153 , at the fictitious interface .",
    "however , using the lbm description , we can update @xmath153 in another way , which is consistent with momentum balance on the small scale .      at a given time @xmath155",
    ", we assume @xmath156 is given in the cylinder domain and is equal to the density at @xmath157 , where , per fig .",
    "[ virtual ] , @xmath157 is the lattice point in the simulated domain that is adjacent to the interface with the virtual domain .",
    "we suppose the velocity at @xmath157 is the interfacial velocity @xmath158 .",
    "both density and velocity at time @xmath155 at @xmath157 are defined by eq .",
    "[ dens ] and [ momentum ] through distribution functions @xmath159 .",
    "the distribution functions are updated to @xmath160 under the following procedure , which is applied after the collision step but before streaming .",
    "first we update and store the density @xmath161 at @xmath157 using explicit integration of eq .",
    "[ eq : mass_conv ] :    @xmath162 \\label{eq : ziebdesity8}\\ ] ]    next , a partial lbm streaming step is performed at @xmath157 using the distributions at time @xmath155 . during this",
    "step @xmath157 streams to and from its neighboring ` real ' lattice points within the simulated domain .",
    "however , it only streams out of the interface with the virtual domain and does not receive any distributions from the virtual domain .",
    "define @xmath163 as the density at @xmath157 after this partial streaming step .",
    "the next step is to back - solve the needed distributions to be streamed in from the virtual domain in order to guarantee the final density at @xmath157 equals @xmath161 .",
    "for example , consider a setup as shown in fig .",
    "[ virtual ] and suppose the fictitious interface is normal to the @xmath164 direction ( see fig .",
    "[ fig : schemalattice ] ) . after the partial streaming step ,",
    "updated ( though not finalized ) distribution values exist for all the @xmath77 except for the values associated to @xmath165 and @xmath166 .",
    "these five distribution values are all unknown after the partial streaming step . to compute them ,",
    "first we modify only the value of the @xmath167 distribution , which is the distribution that streams into the simulated domain normal to the fictitious boundary : @xmath168 this advects all the missing density at @xmath169 from a fictitious node @xmath147 ( see bottom of fig .  [",
    "virtual ] ) . with these distributions ,",
    "the velocity at time @xmath160 is computed at @xmath157 according to @xmath170 . because the distributions in the @xmath171 and @xmath166 directions are still unknown at this point , the maxwell equilibrium function eq .",
    "[ eq : equilibre_maxwell_boltzmann ] is then used to redistribute all the distributions at @xmath157 to a more natural , equilibrium state .",
    "this updates all the distributions to their final values , at @xmath160 .",
    "we notice here that the initial value of @xmath29 at the beginning of the simulation should be a normalized value ( in lattice units ) otherwise an additional step of normalizing by the physical fluid reference density will be necessary before using it in eq .",
    "[ eq : mass_conv ] and eq .",
    "[ eq : ziebdesity9 ] .",
    "we first test some of the individual components of the routine . in this section ,",
    "we provide separate numerical validations of the zieb technique , the rubber deformation model , and the lbm .",
    "to validate the zieb method , we performed an analysis of fluid flow in a geometry comprised of a piston driving fluid passing through a narrow restriction .",
    "this flow field is then compared to that obtained using a `` virtual piston '' in which the domain containing the moving piston is removed and in its place an effective boundary condition from zieb is used , see fig .",
    "[ fig : zoomnlink_config ] .",
    "the real piston begins positioned such that the fluid volume between the piston and input section is @xmath172 ; the same @xmath148 is used in eq .",
    "[ eq : ziebdesity8 ] for the virtual piston .",
    "we use @xmath173 and @xmath174 . as input parameters",
    ", we use a ( pressure - free ) fluid density @xmath175 , dynamic viscosity @xmath176 and a smagorinsky constant of @xmath177 for the sub - grid turbulence model @xcite .",
    "figure  [ fig : velocity_density_opened ] shows the comparison between the two simulations regarding fluid velocity and the normalized input fluid density computed in the same domain ( see fig .  [",
    "fig : zoomnlink_config ] ) .",
    "the agreement is strong , even the time - dependent fluctuations , confirming the correctness of the zieb method .",
    "the test of the rubber coupling and rubber deformation is performed running a loading / unloading test without fluid . a force ( loading / unloading ) @xmath178",
    "is directly applied on the valve which presses the rubber into contact with twelve frozen spheres ( see fig .  [",
    "fig : rubberloadunloadtest ] ) .",
    "two phases are considered : a loading phase with @xmath179 then an unloading phase with @xmath180 .",
    "we use a frictionless contact type between the rubber and spheres where normal stiffness is set to @xmath181 and no normal damping is used to insure that all dissipation comes from internal rubber damping . the rubber coupling parameters ( eq .",
    "[ eqn : rubber_eqn_2 ] ) are set to @xmath182 and @xmath183 .",
    "the valve density is set to 7850 @xmath184 and the rubber density to @xmath185 .",
    "the time step is set to @xmath186 .",
    "[ fig : rubberloadunloadtest ] shows the loading / unloading force , the reaction force @xmath138 of spheres on the rubber , the displacement @xmath126 ( right inset ) and the corresponding force @xmath127 .",
    "the agreement of @xmath178 , @xmath187 , and @xmath138 after a relaxation time verifies the coupling .",
    "the last test is focused on verifying the fluid lbm simulation by comparing flow of fluid in the rubber channel of a pressure - valve assembly against an analytical flow solution ( recall fig .",
    "[ fig : opned_closed ] ) .",
    "we can run a simulation where the fluid viscosity is large , such that the flow in the channel will be in the stokes limit . to aid in calculating an analytical solution",
    ", we treat the flow as radially directed and assert the lubrication approximation . in view of fig .",
    "[ fig : opned_closed ] for the definition of the @xmath22 direction , we obtain the following system of equations , which includes momentum and mass balance under the lubrication limit :    @xmath188    this is solved by @xmath189 where @xmath129 is an undetermined constant and @xmath190 where @xmath69 is a constant and @xmath129 is the same as in the velocity field equation . from the @xmath191 equation , the pressure difference @xmath192 between @xmath193 and outer at @xmath194 ( see fig .  [",
    "fig : channel_velocity_pressure ] ) is given by : @xmath195 .",
    "using @xmath196 , @xmath197 and @xmath198 , we find @xmath199 ( see fig .  [",
    "fig : channel_velocity_pressure ] left ) from our numerical data , giving @xmath200 .",
    "hence , the predicted pressure difference is @xmath201 which is quite close to the obtained pressure difference from the simulation ( @xmath202 , see fig .",
    "[ fig : channel_velocity_pressure ] right ) .",
    "[ fig : channel_velocity_pressure_vs_r ] shows the analytical solution as a function of @xmath203 in comparison with the numerical data and agreement is found . in this test ,",
    "the fluid density is @xmath175 and dynamic viscosity is @xmath204 .",
    "the valve density is set to @xmath205 and the rubber density to @xmath185 .",
    "we use zieb on the input section ( see fig .  [",
    "fig : system_cofig ] ) with a virtual piston velocity of @xmath206 , and we apply a constant pressure of @xmath207 at the output section ( see fig .  [",
    "fig : system_cofig ] ) .",
    "we present numerical examples utilizing the valve geometries presented in fig .  [",
    "fig : system_cofig ] .",
    "the two systems are used to mimic a safety and pressure valve .",
    "the different parts and their corresponding names are presented in fig .",
    "[ fig : system_cofig ] .",
    "their dimensions are given in appendix  [ app : dimension ] .",
    "the valve is spring - loaded from above .",
    "initially , the valve is closed due to force from the spring ( and prescribed overpressure above in the pressure - valve geometry ) .",
    "the spring s force - displacement relation is chosen to be non - linear and is expressed as follows : @xmath208 ; @xmath209 is the stiffness , @xmath210 is the preload spring displacement , @xmath126 is the load displacement and @xmath211 is the spring maximum compression .",
    "the fluid region above the valve begins unpressurized in the safety - valve case and pressurized by the selected @xmath212 in the pressure - valve case . for each simulation , both for safety and pressure valve , we start by introducing fluid through the input section beneath valve domain using the zieb technique at constant virtual piston velocity @xmath213 .",
    "when the beneath valve domain reaches a large enough pressure , it will overcome the spring - load ( and possible top pressure ) on the valve to open it .",
    "we continue displacing the virtual piston and then turn off @xmath213 when we assume that the flow has reached a steady state .",
    "we then wait until the valve is closed .",
    "we check the behavior of the valve systems with and without particles but the closure phenomena is only investigated for the case where we have particles .    in the presence of particles , we start with a constant packing fraction in the domain beneath the valve corresponding to the imposed packing fraction @xmath214 at the input section . during the simulation , each particle that exits the simulated domain",
    "is removed and each new particle introduced at the input section starts with the fluid input velocity as its initial velocity . to control the input particle flow , we insert grains to ensure that the input particle packing fraction is constant within a width of @xmath215 from the interface with the virtual domain .",
    "we introduce / remove particles in the simulated system every 50 steps .",
    "physical parameters involved in the valve problem are displayed in tab .",
    "[ tab : summarizedparamvalvebh ] ) , which include the geometry of the valve system ( e.g. safety - valve or pressure - valve ) , each of which has fixed size dimensions ( see appendix ) . for all tests , we fix the solid density of particles @xmath216 , ( pressure - free ) fluid density @xmath217 ( small - strain ) rubber shear modulus @xmath218 and bulk modulus @xmath219 , rubber damping @xmath220 , rubber@xmath221valve mass @xmath222 , and valve spring stiffness @xmath223 .",
    "since mono - disperse particles may induce a crystallisation phenomena at higher packing , a random size distribution is used uniformly between @xmath224 and @xmath225 .",
    "the distribution may be described by a mean particle size @xmath226 and polydispersity @xmath227 .",
    "llllllll particles & & valve + rubber & & fluid & & system + mean diameter & @xmath228 $ ] & mass & @xmath229 $ ] & dynamic viscosity & @xmath230 $ ] & system geometry & @xmath231 $ ] + solid density & @xmath232 $ ] & rubber shear modulus & @xmath233 $ ] & pressure - free density & @xmath234 $ ] & system size & @xmath235 $ ] + polydispersity & @xmath236 $ ] & rubber bulk modulus & @xmath237 $ ] & output pressure & @xmath238 $ ] & piston speed & @xmath239 $ ] + input packing fraction & @xmath240 $ ] & valve spring stiffness & @xmath241 $ ] & & + & & rubber damping & @xmath242 $ ] & & & & +    to generalize the valve dynamics and flow behavior , we choose the natural units of our system to be the input section radius @xmath243 = r$ ] for length , time @xmath244 = \\sqrt{\\rho_{_f } r^3/k_{_v}}$ ] and mass @xmath245 = \\rho_{_f } r^3 $ ] .",
    "from these units , a dimensionless parametric space is represented by : + @xmath246 + where @xmath247 is the system geometry .",
    "taking into account the fixed parameters , the dimensionless parametric space we will explore is described by the following groups : + @xmath248 + the second group is only relevant to pressure valves and the latter five can be independently controlled through the selection of @xmath249 , and @xmath250 .",
    "the parameters for all tests are summarized in tab .",
    "[ tab : spacerangeopenclosednp ] and tab .",
    "[ tab : spacerangeopenclosedyp ] . as indicated in the tables ,",
    "the tests are conducted in order to observe the dependence of the valve behavior on each of @xmath251 and @xmath214 independently ; for each variable , a sequence of tests is performed where it is varied over a range while the others are held fixed .",
    "c|c geo@xmath252safety valve & geo@xmath252pressure valve +    lc|c & range & fixed + @xmath59 & 1e-03 to 3.16e+01 &    ll name & value +    @xmath212 & 0 + @xmath213 & 12.5 + @xmath253 & 0 + @xmath254 & 0 + @xmath214 & 0 +     +    @xmath213 & 1 to 12.5 &    .range of parameters investigated for safety and pressure valve simulations without particles .",
    "all units are in @xmath255 , [ \\text{m } ] , [ \\text{s}]$ ] .",
    "[ cols= \" < , < \" , ]      +     +    the contact model ( dem solver and dem - rubber coupling ) , fluid turbulence model ( les ) and numerical parameters are displayed in tab .",
    "[ tab : contactcouplingnumericalparameter ]    2    lll stiffness & normal & tangantial + seat - valve & 1e+11 & 0 + seat - rubber & 1e+06 & 0 + seat - particle & 1e+07 & 0.8e+07 + valve - particle & 1e+07 & 0.8e+07 + rubber - particle & 1e+05 & 0.8e+05 + particle - particle & 1e+07 & 0.8e+07 +    ll friction coefficient & + seat - valve & 0 + seat - rubber & 0 + seat - particle & 0.4 + valve - particle & 0.4 + rubber - particle & 0.4 + particle - particle & 0.4 +    lll damping & normal & tangantial + seat - valve & 1e+03 & 0 + seat - rubber & 0 & 0 + seat - particle & 3 & 0 + valve - particle & 3 & 0 + rubber - particle & 0 & 0 + particle - particle & 3 & 0 +    ll rubber and numerical parameters + smagorinsky constant & 0.4000 + lattice speed & 2.5e+03 + fluid space discretization & 3.0e-04 + dem time step & 5.0e-08 + numerical rubber convergence ( @xmath141 ) & 1.0e+01 + & +      in this section , we discuss the effect of fluid viscosity , piston velocity , and input packing fraction on the opening , steady flow , and closure behavior of the valve for a pressure valve configuration . as shown in tab .",
    "[ tab : spacerangeopenclosednp ] and tab .",
    "[ tab : spacerangeopenclosedyp ] , when varying a parameter of interest , we fix the others to a control set taken from @xmath206 , @xmath256 , @xmath257 and @xmath258 .",
    "we will focus our analysis on the pressure valve and will give a brief analysis of the results for the safety valve in sec .",
    "[ sec : safetyvalvelift ] .      during the opening phase",
    ", we observe a delay between the initiation of the piston and the initiation of valve opening .",
    "the effect is not due to packing fraction fig .",
    "[ fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] ( left ) , polydispersity fig .  [",
    "fig : closed_np_lift_d_xxoxxx ] ( left ) or mean particle diameter fig .  [ fig : closed_np_lift_d_xxoxxx ] ( right ) , rather , the delay increases with fluid viscosity fig .",
    "[ fig : np_closed_lift_eta_v_xxoxxx ] ( left ) , and decreases when piston velocity increases fig .",
    "[ fig : np_closed_lift_eta_v_xxoxxx ] ( right ) ( simulation without particles ) and fig .",
    "[ fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] ( right ) ( simulation with particles ) .",
    "the lack of dependence of the delay time on particle inputs is because the mean particle diameter is bigger than the initial valve lift so it does not modify fluid behavior in the valve - rubber channel ( see schematic in fig .",
    "[ fig : np_closed_prb_conf ] ) .",
    "the more dominant effect is negative suction pressure , which develops in the valve - rubber channel as the valve initially displaces upward , as shown in fig .",
    "[ fig : np_closed_pressure_bc_br_vs_t_zoom ] .",
    "the delay increases with increasing viscosity because this increases the suction force due to lubrication effects in the narrow valve - rubber channel . at the same time , in the beneath valve region where the fluid domain is not thin , the pressure is mostly independent of viscosity as we observe in fig .",
    "[ fig : np_closed_pressure_eta_v_xxoxxx ] ( left ) where before the first peak of the valve lift ( fig .",
    "[ fig : np_closed_lift_eta_v_xxoxxx ] ( left ) ) the pressure evolution is the same .              and @xmath206 .",
    "( without particles ) . ]",
    "increasing the piston velocity reduces the delay because the suction pressure in the valve - rubber channel is balanced by faster growth of the beneath valve pressure .",
    "figure  [ fig : np_closed_pressure_eta_v_xxoxxx ] ( right ) shows that during the pressurization phase , the pressure slope increases with piston velocity , as expected .",
    "the valve displacement begins to approach a steady value ( with or without oscillations ) after the first peak in valve lift ( @xmath259 ) and ends when the piston motion is stopped at @xmath260 . as shown in fig .",
    "[ fig : np_closed_lift_eta_v_xxoxxx ] , the steady lift position , for the simulations without particles , increases with fluid viscosity and piston velocity . for lower viscosity",
    ", the valve has an ` underdamped ' response characterized by decaying oscillations , whereas for larger viscosities , an ` overdamped ' response can be seen ( see fig .",
    "[ fig : np_closed_lift_eta_v_xxoxxx ] ( left ) ) .",
    "the presence of particles can modify the valve lift behavior .",
    "figure  [ fig : closed_np_lift_d_xxoxxx ] ( left ) shows that virtually no effect on valve lift is observed for different polydispersity in the range we tested . increasing the mean diameter of particles , fig .",
    "[ fig : closed_np_lift_d_xxoxxx ] ( right ) , increases the steady lift position but this appears to be primarily a particle size effect ; after the initial upward motion of the valve , the valve descends downward and is stopped by a monolayer of mobile particles in the rubber channel , which holds the valve position at roughly @xmath261 high .",
    "further tests would be needed at higher fixed piston speeds to determine if the valve positioning depends more robustly on @xmath253 .",
    "tests involving variation of the packing fraction or the piston velocity , fig .",
    "[ fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] , show a non - trivial valve lift behavior in which three approximate regimes can be identified :    1 .   a lower input particle flux behavior : @xmath262 .",
    "2 .   a transition input particle flux behavior : @xmath263 .",
    "3 .   a higher input particle flux behavior : @xmath264 .    where the input flux is defined by @xmath265 .                in the first regime",
    ", we observe a simple particle suspension flow through the valve and rubber channel with a quasi - constant lift as shown in fig .",
    "[ fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] .",
    "the beneath valve packing fraction shows also a quasi - constant value fig .",
    "[ fig : closed_yp_bvpackingfraction_sf_xxoxxx_v_xxoxxx ] .",
    "this regime is observed for @xmath266 ( from fig .",
    "[ fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] ) .",
    "the second regime is characterized by unsteady motion of the valve that oscillates between notably disparate high and low positions .",
    "this regime , for the range of parameters we tested , appears to be limited by @xmath267 and @xmath268 . to better understand the valve lift behavior in this regime",
    "let us analyze the lift for @xmath269 .",
    "figure  [ fig : closed_yp_lift_packing_0o1250 ] and fig .",
    "[ fig : closed_yp_pressure_0o1250 ] show the time dependence of the lift , beneath valve packing fraction , and beneath valve pressure .",
    "notice that the peaks and valleys of the beneath valve pressure and packing fraction are relatively in sync .",
    "the peaks in the lift plot are delayed with respect to those of the pressure and packing fraction .",
    "this can be understood as follows : when the valve position is low , particles aggregate under the valve and as they do so , they form something of a ` plug ' that causes the pressure beneath the valve to build up .",
    "when the pressure is sufficiently high , the valve will open up to release the pressure , which causes the backed - up grains beneath the valve to escape through the open valve .",
    "when this happens it causes the beneath valve packing fraction and the pressure to decrease , which immediately allows the valve to recover to its initial lift ( fig .",
    "[ fig : closed_yp_lift_packing_0o1250 ] , fig .",
    "[ fig : closed_yp_pressure_0o1250 ] ) .",
    "this phenomena can be distinguished from the lower input particle flux regime , in that in the lower flux case , the flux of grains into the system is not enough to back - up sufficiently under the valve and induce a pressure build - up .        .",
    "]    . according to fig .",
    "[ fig : closed_yp_lift_packing_0o1250 ] ( right ) , the first two packing fraction peaks correspond to @xmath270 and @xmath271 , and the first two valley correspond to @xmath272 and @xmath273 . ]",
    "figure  [ fig : closed_yp_packingsmapshot_0o1250 ] shows several snapshots of the beneath valve region for @xmath269 ( from fig .  [ fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] ( left ) ) . according to fig .",
    "[ fig : closed_yp_lift_packing_0o1250 ] ( right ) , the first two packing fraction peaks correspond to @xmath270 and @xmath271 , and the first two valleys to @xmath272 and @xmath273 .",
    "the rest of the snapshots correspond to the time between the peaks and the valley . comparing the first packing fraction peak and the first valve lift peak in fig .",
    "[ fig : closed_yp_packingsmapshot_0o1250 ] , we observe a delay ; the first peak in packing fraction occurs at @xmath270 , and the peak for valve lift occurs between @xmath274 and @xmath272 .",
    "using fig .",
    "[ fig : closed_yp_lift_packing_0o1250 ] , we find that the delay is @xmath275 . the same delay is observed for all peaks and valleys .",
    "contrary to the valve lift , between the pressure and packing fraction peak / valleys , no delay is observed .",
    "this is in agreement with the lift behavior fig .",
    "[ fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] where the valve lift is a consequence of the packing fraction / pressure evolution .",
    "the third regime of valve behavior corresponds to a high particle flux such that the beneath valve slurry develops a sustainably high pressure able to push and hold the valve at a maximal lift .",
    "this is observed for @xmath276 on fig .",
    "[ fig : closed_yp_bvpackingfraction_sf_xxoxxx_v_xxoxxx ] ( left ) from @xmath277 .    out of the three phases ,",
    "one outlier phenomenon is observed for @xmath278 .",
    "in fact , fig .  [",
    "fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] ( right ) shows that when the valve is opened , from @xmath279 to @xmath280 , we have a constant but small lift . during this phase",
    ", it turns out that a portion of the particles are stuck at the entrance of the valve channel but without entering fully into the channel . the force from these stuck particles and",
    "fluid pressure is enough to hold open the valve at a constant lift .      in this section ,",
    "we focus on the closure phase of the valve simulations with particles in order to investigate the effect particles have on the final lift of the valve and to study the degree to which particles become stuck in the valve - rubber channel , which could have detrimental effects on valve performance in practice .",
    "since the rubber plays the role of a seal between valve and seat , preventing grain trapping during closure could be a key design goal in such systems .",
    "the closure phase starts when the piston velocity @xmath213 is turned off . in the range of the parametric study we investigated ,",
    "the final lift is mostly affected by the mean particle diameter @xmath253 as shown in fig .",
    "[ fig : closed_yp_stuck_lift_dmean_poly ] ( for @xmath253 and @xmath254 ) and fig .",
    "[ fig : closed_yp_stuck_lift_packing_vp ] ( for @xmath214 and @xmath213 ) .",
    "this behavior is simply explained by the fact that the closing valve squeezes out all but a monolayer of particles , which become stuck in the valve channel as illustrated in fig .",
    "[ fig : closing_stuck_particles ] where a zoom - in on the valve channel shows how geometrically the lift depends on the stuck particle diameter @xmath253 . using the size of particles and the geometry of the valve channel fig .",
    "[ fig : closing_stuck_particles ] , we calculated the envelope giving the maximum lift ( upper bound ) and minimum lift ( lower bound ) which should be obtained if only big particles ( with @xmath281 ) or small particles ( with @xmath282 ) were stuck .",
    "the two bounds are given by :    @xmath283    where @xmath284 is either @xmath281 or either @xmath282 and @xmath285 is the valve channel inclination as shown on fig .",
    "[ fig : closing_stuck_particles ] .",
    "@xmath286 is obtained from fig .",
    "[ fig : seat ] ( detail b ) .",
    "as expected , the final lift is always between these two limits .",
    "figure  [ fig : closed_yp_stuck_lift_packing_vp ] ( right ) for @xmath278 shows a lift of @xmath287 which is less than the minimum lift ( @xmath288 ) for the smallest particle diameter in the polydispersity to travel through the valve .",
    "in fact here , as discussed previously in section _ quasi - steady open valve phase _ for the effect of @xmath213 on the lift , no particle flow is observed in the valve / rubber channel since the lift is less than one particle diameter .",
    "therefore , when @xmath213 is turned off , the rubber descent is unimpeded by grains .",
    "once the rubber makes contact with the valve seat , the fluid beneath the valve can not escape and therefore a pressure and residual lift of @xmath287 remains , which is the lift when the rubber is in contact with the seat with zero deformation .",
    "we give here a first quantitative view on which variables  among @xmath289 and @xmath213  matter most in affecting the quantity of particles that get stuck beneath the valve during closure .",
    "figure  [ fig : closed_yp_stuck_norm_dmean_poly ] and fig .",
    "[ fig : closed_yp_stuck_norm_packing_vp ] show the projected area of particles on the seat ( beneath valve - rubber area ) normalized by the beneath valve - rubber area , i.e. the ` normalized area of stuck particles ' ( nasp ) . on these four figures ,",
    "we find that @xmath214 matters most whereas there is little variation due to changes in @xmath281 , @xmath213 and @xmath254 .    we can assume the packing fraction in the open valve channel , during the quasi - steady valve phase , is bounded below by @xmath214 . as the valve descends during closure , particles are squeezed out and , as a further lower bound , we can approximate that a single monolayer at the same packing fraction @xmath214 remains .",
    "this implies the total number of stuck particles in the rubber - valve channel is approximated by : @xmath290 where the final lift is given by @xmath291 , and @xmath129 is the projected rubber - valve area .",
    "the projected total particle area is : @xmath292 normalizing the @xmath293 by @xmath129 , we obtain : @xmath294    the above lower bound formula assumes that the final packing fraction of grains stuck in the valve is greater than the input value , @xmath214 . in our tests",
    "we have observed that this is always true except for the one outlier case mentioned previously ( @xmath278 , fig .",
    "[ fig : closed_yp_lift_v_xxoxxx_sf_0o040_080_0o125_0o150_0o175 ] ( right ) ) where no particles travel through the channel because the beneath valve fluid pressure is less than the necessary pressure to open the valve to a lift greater than @xmath295 .",
    "this case is observed in fig .",
    "[ fig : closed_yp_stuck_norm_packing_vp ] ( left ) ( @xmath278 ) where the normalized stuck area is zero .",
    "if particles get stuck , they can also potentially break depending on the force of contact with the valve and seat , and grain properties such as the particle size and strength .",
    "a loose approximation of the possible volume of debris created can be made by assuming stuck particles all break .",
    "this may be expressed in terms of the final lift and the nasp , and then normalized by @xmath296 , giving @xmath297 where @xmath129 is the valve - rubber projected area .    supposing the lift obeys eq .",
    "[ eq : lift ] where @xmath298 and nasp obeys eq .",
    "[ eq : nasp ] , we suggest the debris variable is approximated by : @xmath299 figure  [ fig : closed_yp_stuck_debris_packing_dmean ] ( left ) shows the debris as a function of @xmath253 and fig .",
    "[ fig : closed_yp_stuck_debris_packing_dmean ] ( right ) as a function of @xmath214 .",
    "we show comparisons to our approximate formula ( eq .  [ eq : debris2 ] ) .",
    "many of the behaviors in the safety valve configuration mimic those of the pressure valve . here",
    "we summarize the safety valve data .",
    "the used input parameters are resumed in tab .",
    "[ tab : spacerangeopenclosednp ] for the simulations without particles and tab .",
    "[ tab : spacerangeopenclosedyp ] for the simulations with particles .",
    "figure  [ fig : np_opened_lift_eta_v_xxoxxx ] shows the time evolution of the valve lift for different fluid viscosity ( left ) and for different piston velocity @xmath213 ; both simulations are without particles .",
    "the delay at the beginning of the simulation is less marked because of the absence of the above valve pressure .",
    "the steady lift shows many of the same behaviors as the pressure valve , except there can be non - zero @xmath213 ( 1 m / s and 2.5 m / s ) and the valve may not ever open since the open end beneath the valve can prevent the beneath - valve pressure from building up enough to overcome the valve s spring force to open it .         the three observed regimes for the pressure valve during the steady lift are also evidenced here as shown in fig .",
    "[ fig : opened_yp_lift_v_xxoxxx_sf_xxoxxx ] for different @xmath214 and @xmath213 .",
    "the @xmath300 and @xmath301 need to be calculated here taking into account the outgoing flux through the modular closure of the safety valve system .",
    "this then becomes : @xmath302 where @xmath303 is calculated from the input region and @xmath304 is calculated from the flux of outgoing particles through both outlet sections .",
    "figure  [ fig : opened_np_lift_d_xxoxxx ] ( left ) shows the time evolution of the valve lift for different @xmath254 where a small deviation in different values of @xmath254 is observed .         as shown in fig .",
    "[ fig : closing_stuck_particles ] , the envelope of the final lift can be predicted by @xmath305 , @xmath306 however , if the stuck particles are not entirely lodged in the valve channel , this prediction is wrong .",
    "this is the case in fig .",
    "[ fig : opened_np_lift_d_xxoxxx ] ( right ) for @xmath307 where the final lift is less than the observed lift for @xmath308 . figure  [ fig:_force_dmax_01o6e03_1 _ ] shows that in fact no particles are fully stuck in the valve channel but there are some stuck in the rubber channel , as indicated by a non - zero normal force @xmath309 .",
    "we see in fig .",
    "[ fig:_force_dmax_01o6e03_1 _ ] that even though contact exists between a partially stuck particle and the valve channel region , the total force coming from the valve channel is close to @xmath310 whereas the total force observed in the rubber channel is close to @xmath311 ; this means that the main force balancing the valve spring force comes from the rubber channel and therefore , the final lift is overpredicted by the previous formula , @xmath305 .          showing ( partially ) stuck particle in the valve entry and normal forces , @xmath312 , supported by all particles . ]",
    "the obtained results for both valves suggest that we may need more investigation with a broader range of particle input parameters to better make a comparison between the safety and the pressure valve geometries .",
    "in this paper , we have presented a detailed implementation of a 3d dem - lbm - rubber coupling in two complex valve geometries . with different focused tests ,",
    "we have validated the implemented methods .",
    "the coupling of the three types of materials shows a good agreement with our physical predictions .",
    "we also have demonstrated the validity of the zieb technique , which allowed us to run simulations without having to simulate the entire domain    simulations performed without particles give realistic behaviors .",
    "we observe a lubrication effect causing suction that delays the opening of the valve after piston motion commences .",
    "we find that increasing fluid viscosity increasingly overdamps the valve lift , reducing or removing the valve oscillations in the quasi - steady regime .",
    "we have validated a stokesian pressure drop across the valve channel when the fluid being driven through is sufficiently viscous .    in the simulations performed with particles in the pressure valve geometry",
    ", we found , for the steady lift portion , three qualitative lift behaviors .",
    "the different regimes appear to be governed by the total particle flux , which combines the imposed piston velocity @xmath213 and packing fraction @xmath214 through a flux @xmath313 .",
    "the flux variable appears to indicate when the open - valve dynamics transition from a steady value of small lift , to an oscillating value that traverses between high and low positions , to a steady high lift value .",
    "further investigation may be needed to calibrate the robustness of the @xmath314 variable in determining qualitative valve dynamics .",
    "the valve closure was also investigated , which occurs when the ( virtual ) piston motion is stopped .",
    "the pressure valve shows a dependency of the final lift on particle size and we give a prediction of the lift envelope based on the minimum and maximum particle sizes in the polydispersity .",
    "we show that if the maximum lift during the open phase does not exceed @xmath315 , the final lift at closure can be less than @xmath316 because the particles are not entirely stuck in the valve channel .",
    "lastly we demonstrate the robustness of the approach by switching to a safety valve configuration , in which the above - valve region is not pressurized and the below - valve region has another exit .",
    "similar qualitative behaviors are observed as compared to the pressure valve , both with and without particles , albeit at different specific values of the piston speed and input particle packing fraction .",
    "this work was supported by aro grant w911 nf-15 - 1 - 0598 and schlumberger technology corporation .",
    "pm and kk would like to thank j .- y .",
    "delenne ( inra , umr iate montpellier ) for his helpful and useful discussions on dem - lbm coupling and sachith dunatunga for his help in streamlining the numerics .",
    "conflict of interest : the authors declare that they have no conflict of interest .",
    "in this appendix , we give the safety and pressure valve configuration and the dimensions .",
    "units are millimeters @xmath317 and degrees @xmath318 ."
  ],
  "abstract_text": [
    "<S> a numerical method for particle - laden fluids interacting with a deformable solid domain and mobile rigid parts is proposed and implemented in a full engineering system . </S>",
    "<S> the fluid domain is modeled with a lattice boltzmann representation , the particles and rigid parts are modeled with a discrete element representation , and the deformable solid domain is modeled using a lagrangian mesh . </S>",
    "<S> the main issue of this work , since separately each of these methods is a mature tool , is to develop coupling and model - reduction approaches in order to efficiently simulate coupled problems of this nature , as occur in various geological and engineering applications . </S>",
    "<S> the lattice boltzmann method incorporates a large - eddy simulation technique using the smagorinsky turbulence model . </S>",
    "<S> the discrete element method incorporates spherical and polyhedral particles for stiff contact interactions . </S>",
    "<S> a neo - hookean hyperelastic model is used for the deformable solid . </S>",
    "<S> we provide a detailed description of how to couple the three solvers within a unified algorithm . </S>",
    "<S> the technique we propose for rubber modeling / coupling exploits a simplification that prevents having to solve a finite - element problem each time step . </S>",
    "<S> we also develop a technique to reduce the domain size of the full system by replacing certain zones with quasi - analytic solutions , which act as effective boundary conditions for the lattice boltzmann method . </S>",
    "<S> the major ingredients of the routine are are separately validated . to demonstrate the coupled method in full , we simulate slurry flows in two kinds of piston - valve geometries . </S>",
    "<S> the dynamics of the valve and slurry are studied and reported over a large range of input parameters .    </S>",
    "<S> example.eps gsave newpath 20 20 moveto 20 220 lineto 220 220 lineto 220 20 lineto closepath 2 setlinewidth gsave .4 setgray fill grestore stroke grestore </S>"
  ]
}