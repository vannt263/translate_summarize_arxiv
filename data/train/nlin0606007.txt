{
  "article_text": [
    "every physically relevant computational model must be mapped into physical space - time and _ vice versa _",
    "@xcite . in this line of thought , von neumann s self - reproducing cellular automata @xcite have been envisioned by zuse @xcite and other researchers @xcite as `` calculating space ; '' i.e. , as a locally connected grid of finite automata  @xcite capable of universal algorithmic tasks , in which intrinsic  @xcite observers are embedded  @xcite .",
    "this model is conceptually discreet and noncontinuous and resolves the eleatic `` arrow '' antinomy @xcite against motion in discrete space by introducing the concept of information about the state of motion in between time steps .",
    "alas , there is no direct physical evidence supporting the assumption of a tessellation of configuration space or time . given enough energy , and without the possible bound at the planck length of about @xmath0 m",
    ", physical configuration space seems to be potentially infinitely divisible .",
    "indeed , infinite divisibility of space - time has been utilized for proposals of a kind of `` zeno oracle ''  @xcite , a progressively accelerated turing machine  @xcite capable of hypercomputation  @xcite .",
    "such accelerated turing machines have also been discussed in the relativistic context  @xcite .",
    "in general , a physical model capable of hypercomputation by some sort of `` zeno squeezing '' has to cope with two seemingly contradictory features : on the one hand , its infinite capacities could be seen as an obstacle of evolution and therefore require a careful analysis of the principal possibility of motion in finite space and time _ via _ an infinity of cycles or stages . on the other hand ,",
    "the same infinite capacities could be perceived as an advantage , which might yield algorithms beyond the turing bound of universal computation , thus extending the church - turing thesis .",
    "the models presented in this article unify the connectional clarity of von neumann s cellular automaton model with the requirement of infinite divisibility of cell space . informally speaking ,",
    "the scale - invariant cellular automata presented `` contain '' a multitude of `` spatially '' and `` temporally '' ever decreasing copies of themselves , thereby using different time scales at different layers of cells .",
    "the cells at different levels are also capable to communicate , i.e. , exchange information , with these copies , resulting in ever smaller and faster cycling cells .",
    "the second model is based on petri nets which can enlarge themselves .",
    "the advantage over existing models of accelerated turing machines  which are just turing machines with a geometrically progression of accelerated time cycles  resides in the fact that the underlying computational medium is embedded into its environment in a uniform and homogeneous way . in these new models , the entire universe , and not just specially localized parts therein , is uniformly capable of the same computational capacities .",
    "this uniformity of the computational environment could be perceived as one further step towards the formalization of continuous physical systems  @xcite in algorithmic terms . in this respects ,",
    "the models seem to be closely related to classical continuum models , which are at least in principle capable of unlimited divisibility and information flows at arbitrary small space and time dimensions . at present however , for all practical purposes , there are finite bounds on divisibility and information flow .    to obtain a taste of some of the issues encountered in formalizing this approach , note that an infinite sequence of ever smaller and faster cycling cells leads to the following situation . informally speaking ,",
    "let a _ self - similar cellular automaton _",
    "be a variant of a one - dimensional elementary cellular automaton , such that each cell is updated twice as often as its left neighbor .",
    "the cells of a self - similar cellular automaton can be enumerated as @xmath1 .",
    "starting at time 0 and choosing an appropriate time unit , cell @xmath2 is updated at times @xmath3 .",
    "remarkably , this definition leads to indeterminism . to see this ,",
    "let @xmath4 be the state of cell @xmath5 at time @xmath6 .",
    "now , the state @xmath7 depends on @xmath8 , which itself depends on @xmath9 and so on , leading to an infinite regress . in general , in analogy",
    "to thomson s paradox  @xcite , this results in an undefined or at least nonunique and thus indeterministic behavior of the automaton .",
    "this fact relates to the following variant of zeno s paradox of a runner , according to which the runner can not even get started  @xcite .",
    "he must first run to the half way point , but before that he must run half way to the half way point and so on indefinitely . whereas zeno s runner can find rescue in the limit of convergent real sequences",
    ", there is no such relieve for the discrete systems considered .",
    "later on , two restrictions on self - similar automata ( build from scale - invariant cellular automata ) are presented , which are sufficient conditions for deterministic behavior , at least for finite computations .",
    "furthermore , a similar model based on a variant of petri nets will be introduced , that avoids indeterminism and halts in the infinite limit , thereby coming close to the spirit of zeno s paradox .",
    "the article is organized as follows .",
    "section [ sec - tm ] defines the turing machine model used in the remainder of the article , and introduces two hypercomputing models : the accelerated and the right - accelerated turing machine . in section [ chap : sica ] self - similar as well as scale - invariant cellular automata are presented .",
    "section [ chap : hypercomputer ] is devoted to the construction of a hypercomputer based on self - similar cellular automata .",
    "there is a strong resemblance between this construction and the right - accelerated turing machine , as defined in section [ sec - tm ] .",
    "a new computing model , the self - similar petri net is introduced in section [ chap : petri ] .",
    "this model features a step - to - step equivalence to self - similar cellular automata for finite computations , but halts in the infinite case .",
    "the same construction as in section [ chap : hypercomputer ] is used to demonstrate that self - similar petri nets are capable of hypercomputation .",
    "the final section contains some concluding remarks and gives some directions for future research .",
    "the turing machine is , beside other formal systems that are computationally equivalent , the most powerful model of classical computing  @xcite .",
    "we use the following model of a turing machine @xcite .    formally , a _",
    "turing machine _ is a tuple @xmath10 , where @xmath11 is the finite set of states , @xmath12 is the finite set of tape symbols , @xmath13 is the set of input symbols , @xmath14 is the start state , @xmath15 is the blank , and @xmath16 is the set of final states . the next move function or transition function @xmath17 is a mapping from @xmath18 to @xmath19 , which may be undefined for some arguments .",
    "the turing machine @xmath20 works on a tape divided into cells that has a leftmost cell but is infinite to the right .",
    "let @xmath21 .",
    "one step ( or move ) of @xmath20 in state @xmath22 and the head of @xmath20 positioned over input symbol @xmath23 consists of the following actions : scanning input symbol @xmath23 , replacing symbol @xmath23 by @xmath24 , entering state @xmath25 and moving the head one cell either to the left ( @xmath26 ) or to the right ( @xmath27 ) . in the beginning , @xmath20 starts in state @xmath28 with a tape that is initialized with an input word @xmath29 , starting at the leftmost cell , all other cells blank , and the head of @xmath20 positioned over the first symbol of @xmath30 .",
    "we need sometimes the function @xmath17 split up into three separate functions : @xmath31 .",
    "the configuration of a turing machine @xmath20 is denoted by a string of the form @xmath32 , where @xmath33 and @xmath34 . here",
    "@xmath22 is the current state of @xmath20 , @xmath35 is the tape content to the left , and @xmath36 the tape content to the right of the head including the symbol that is scanned next .",
    "leading and trailing blanks will be omitted , except the head has moved to the left or to the right of the non - blank content .",
    "let @xmath32 and @xmath37 be two configurations of @xmath20 .",
    "the relation @xmath38 states that @xmath20 with configuration @xmath32 changes in one step to the configuration @xmath37 .",
    "the relation @xmath39 denotes the reflexive and transitive closure of @xmath40 .",
    "the original model of a turing machine as introduced by alan turing contained no statement about the time in which a step of the turing machine has to be performed .",
    "in classical computation , a `` yes / no''-problem is therefore decidable if , for each problem instance , the answer is obtained in a finite number of steps .",
    "choosing an appropriate time scheduling , the turing machine can perform infinitely many steps in finite time , which transcends classical computing , thereby leading to the following two hypercomputing models .",
    "the concept of an accelerated turing machine was independently proposed by bertrand russell , ralph blake , hermann weyl and others ( see refs .",
    "@xcite ) .",
    "an accelerated turing machine is a turing machine which performs the @xmath41-th step of a calculation in @xmath42 units of time .",
    "the first step is performed in time 1 , and each subsequent step in half of the time before . since @xmath43",
    ", the accelerated turing machine can perform infinitely many steps in finite time .",
    "the accelerated turing machine is a hypercomputer , since it can , for example , solve the halting problem , see e.g. , ref .  @xcite .",
    "if the output operations are not carefully chosen , the state of a cell becomes indeterminate , leading to a variation of thomson s lamp paradox .",
    "the open question of the physical dynamics in the limit reduces the physical plausibility of the model .",
    "the following model of a hypercomputing turing machine has a different time scheduling , thereby avoiding some of the paradoxes that might arise from the previous one .",
    "let the cells of the tape be numbered from the left to the right @xmath44 .",
    "a right - accelerated turing machine is a turing machine that takes @xmath42 units of time to perform a step that moves the head from cell @xmath45 to one of its neighbor cells .",
    "[ th - right - acc - tm ] there exists a right - accelerated turing machine that is a hypercomputer .",
    "let @xmath46 be a universal turing machine .",
    "we construct a turing machine @xmath47 that alternates between simulating one step of @xmath46 and shifting over the tape content one cell to the right .",
    "we give a sketch of the construction , ref .",
    "@xcite contains a detailed description of the used techniques .",
    "the tape of @xmath47 contains one additional track that is used to mark the cell that is read next by the simulated @xmath46 .",
    "the finite control of @xmath47 is able to store simultaneously the state of the head of @xmath46 as well as a tape symbol of @xmath46 .",
    "we assume that the input of @xmath46 is surrounded by two special tape symbols , say @xmath48 . at the start of a cycle , the head of @xmath47 is initially positioned over the left delimiter @xmath48 .",
    "@xmath47 scans the tape to the right , till it encounters a flag in the additional track that marks the head position of @xmath46 . accessing the stored state of @xmath46",
    ", @xmath47 simulates one step of @xmath46 thereby marking either the left or the right neighbor cell as the cell that has to be visited next in the simulation of @xmath46 .",
    "if necessary , a blank is inserted left to the right delimiter @xmath48 , thereby extending the simulated tape of @xmath46 . afterwards",
    "the head of @xmath47 moves to the right delimiter @xmath48 to start the shift over that is performed from the right to the left .",
    "@xmath47 repeatedly stores the symbols read in its finite control and prints them to the cell to the right . after the shift over ,",
    "the head of @xmath46 is positioned over the left delimiter @xmath48 which finishes one cycle .",
    "we now give an upper bound of the cycle time .",
    "let @xmath41 be the number of cells , from the first @xmath48 to the second one .",
    "without loss of generality we assume that @xmath49 contains the left @xmath48 .",
    "@xmath47 scans from the left to the right and simulates one step of @xmath46 which might require to go an additional step to the left . if cell @xmath50 is to be read next , the head of @xmath46 can not move to the right , otherwise it would fall off the tape of @xmath46 . therefore the worst case occurs if the cell @xmath51 is marked as cell that @xmath46 has to be read next . in this case",
    "we obtain @xmath52 .",
    "the head of @xmath47 is now either over cell @xmath53 , or over cell @xmath45 if a insertion was performed .",
    "the shift over visits each cell @xmath54 three times , and @xmath49 two times .",
    "therefore the following upper bound of the time of the shift over holds : @xmath55 .",
    "we conclude that if the cycle started initally in cell @xmath45 it took less than time @xmath56 .",
    "if @xmath46 halts on its input , @xmath47 finishes the simulation in a time less than @xmath57 .",
    "@xmath47 therefore solves the halting problem of turing machines .",
    "we remark that if @xmath46 does not halt , the head of @xmath47 vanishes in infinity , leaving a blank tape behind .",
    "a right - accelerated turing machine is , in contrast to the accelerated one , in control over the acceleration .",
    "this can be used to transfer the result of a computation back to slower cells .",
    "the construction of an infinite machine , as proposed by davies  @xcite , comes close to the model of a right - accelerated turing machine , and his reasoning shows that a right - accelerated turing machine could be build within a continuous newtonian universe .",
    "_ cellular automata _ are dynamical systems in which space and time are discreet . the states of cells in a regular lattice are updated synchronously according to a local deterministic interaction rule .",
    "the rule gives the new state of each cell as a function of the old states of some `` nearby '' neighbor cells .",
    "each cell obeys the same rule , and has a finite ( usually small ) number of states . for a more comprehensive introduction to cellular automata",
    ", we refer to refs .",
    "@xcite .",
    "a _ scale - invariant cellular automaton _ operates like an ordinary _ cellular automaton _ on a cellular space , consisting of a regular arrangement of cells , whereby each cell can hold a value from a finite set of states . whereas the cellular space of a cellular automaton consists of a regular one- or higher dimensional lattice , a scale - invariant cellular automaton operates on a cellular space of recursively nested lattices which can be embedded in some euclidean space as well .",
    "the time behavior of a scale - invariant cellular automaton differs from the time behavior of a cellular automaton : cells in the same lattice synchronously change their state @xcite , but as cells are getting smaller in deeper nested lattices , the time steps between state changes in the same lattice are assumed to _ decrease _ and approach zero in the limit .",
    "thereby , a finite speed of signal propagation between adjacent cells is always maintained .",
    "the scale - invariant cellular automaton model gains its computing capabilities by introducing a local rule that allows for interaction between adjacent lattices @xcite .",
    "we will introduce the scale - invariant cellular automaton model for the one - dimensional case , the extension to higher dimensions @xcite is straightforward .",
    "a scale - invariant cellular automaton , like a cellular automaton , is defined by a cellular space , a topology that defines the neighborhood of a cell , a finite set of states a cell can be in , a time model that determines when a cell is updated , and a local rule that maps states of neighborhood cells to a state .",
    "we first define the cellular space of a scale - invariant cellular automaton . to this end , we make use of standard interval arithmetic . for a scalar @xmath58 and a ( half - open ) interval @xmath59",
    "set : @xmath60 and @xmath61 .",
    "we denote the unit interval @xmath62 by @xmath63 .    the cellular space @xmath64 , the set of all cells of the scale - invariant cellular automaton , is the set @xmath65 .",
    "the neighborhood of a cell @xmath66 is determined by the following operators @xmath67 .",
    "for a cell @xmath68 in @xmath64 let @xmath69 be the left neighbor , @xmath70 the right neighbor , @xmath71 the parent , @xmath72 the left child , and @xmath73 the right child of @xmath66 .",
    "the predicate @xmath74 is true if and only if the cell @xmath66 is the left child of its parent .",
    "the cellular space @xmath64 is the union of all lattices @xmath75 , where @xmath76 is an integer .",
    "this topology is depicted in fig .",
    "[ fig:1-dim - interaction ] . for notational",
    "convenience , we introduce a further operator , this time from @xmath64 to @xmath77 , that maps a cell to its both child cells : @xmath78 .",
    "we remark that according to the last definition for each cell either @xmath74 or @xmath79 is true .",
    "later on , we will consider scale - invariant cellular automata where not each cell has a parent cell . if @xmath68 is such a cell , we set by convention @xmath80 if @xmath81 , otherwise @xmath82 .",
    "all cells in lattice @xmath83 are updated synchronously at time instances @xmath84 where @xmath5 is an integer .",
    "the time interval between two cell updates in lattice @xmath83 is again a half - open interval @xmath85 and the cycle time , that is the time between two updates of the cell , is therefore @xmath86 .",
    "a simple consequence of this time model is that child cells cycle twice as fast and the parent cell cycle half as fast as the cell itself .",
    "the time scale @xmath87 is the set of all possible time intervals , which is in the one - dimensional case equal to the set @xmath64 : @xmath88 .",
    "the temporal dependencies of a cell are expressed by the following time operators @xmath89 . for a time",
    "inverval @xmath90 let @xmath91 , @xmath92 , @xmath93 , and @xmath94 .",
    "the predicate @xmath95 is true if and only if the state change of a cell at the beginning of @xmath6 occurs simultaneously with the state change of its parent cell .",
    "the usage of time intervals instead of time instances , has the advantage that a time interval uniquely identifies the lattice where the update occurs .",
    "[ fig : timeops ] depicts the temporal dependencies of a cell : to the left it shows a coupled state change , to the right an uncoupled one .",
    "we remark that we denoted space and time operators by the same symbols , even if their mapping is different . in applying these operators",
    ", we take in the remainder of this paper care , that the context of the operator is always clearly defined .    at any time",
    ", each cell is in one state from a finite state set @xmath96 .",
    "the cell state in a given time interval is described by the state function @xmath97 , which maps cells and time intervals to the state set .",
    "the space - time scale @xmath98 of the scale - invariant cellular automaton describes the set of allowed pairs of cells and time intervals : @xmath99 .",
    "then , the state function @xmath100 can be expressed as a mapping @xmath101 .",
    "the local rule describes the evolution of the state function .",
    "for a cell @xmath66 and a time interval @xmath6 , where @xmath102 is in @xmath98 , the evolution of the state is given by the local rule @xmath103 of the scale - invariant cellular automaton @xmath104    in accordance with the definition , the expanded form of a expression of the kind @xmath105 is @xmath106 .",
    "the local rule @xmath103 is a mapping from @xmath107 to @xmath96 . beside the dependencies on the states of the neighbor cells ,",
    "the new state of the cell further depends on whether the cell is the left or the right child of its parent cell and whether the state change is coupled or uncoupled to the state change of its parent cell .",
    "formally , a scale - invariant cellular automaton @xmath108 is denoted by the tuple @xmath109 .",
    "there are some simplifications of the local rule possible , if one allows for a larger state set .",
    "for instance , the values of the predicates @xmath110 and @xmath111 could be stored as substate in the initial configuration .",
    "if the local rule accordingly updates the value of @xmath111 , the dependencies on the boolean predicates could be dropped from the local rule .",
    "as noted in the introduction the application of the local rule in its general form might lead to indeterministic behavior .",
    "the next subsection introduces two restrictions of the general model that avoid indeterminism at least for finite computations .",
    "a special case of the local rule is a rule of the form @xmath112 , which is the constituting rule of a one - dimensional 3-neighborhood cellular automaton . in this case , the scale - invariant cellular automaton splits up in a sequence of infinitely many nonconnected cellular automata .",
    "this shows that the scale - invariant cellular automaton model is truly an extension of the cellular automaton model and allows us to view a scale - invariant cellular automaton as an infinite sequence of interconnected cellular automata .",
    "we now examine the signal speed that is required to communicate state changes between neighbor cells . to this end , we select the middle point of a cell as the source and the target of a signal that propagates the state change of a cell to one of its neighbor cells .",
    "a simple consideration shows that the most restricting cases are the paths from the space time points @xmath113 , @xmath114 , @xmath115 to @xmath116 if not @xmath95 .",
    "the simple calculation delivers the results @xmath117 , and @xmath118 , respectively , hence a signal speed of 1 is sufficient to deliver the updates in the given timeframe .",
    "a more general examination takes also the processing time of a cell into account .",
    "if a cell in @xmath83 takes time @xmath119 to process their inputs and if we assume a finite signal speed of @xmath120 , the cycle time of a cell in @xmath83 must be at least @xmath121 . in sum , as long as the processing time is proportional to the diameter of a cell , we can always find a scaling factor @xmath122 , such that the scale - invariant cellular automaton has cycle times that conform to the time scale @xmath87 .",
    "the construction of a hypercomputer in section [ chap : hypercomputer ] uses a simplified version of a scale - invariant cellular automaton , which we call a self - similar cellular automaton .    a _ self - similar cellular automaton _ has the cellular space @xmath123 , the time scale @xmath124 , and the finite state set @xmath96 .",
    "the space - time scale of a self - similar cellular automaton is the set @xmath125 .",
    "the self - similar cellular automaton has the following local rule : for all @xmath126 @xmath127    the local rule @xmath103 is a mapping from @xmath128 to @xmath96 .",
    "formally , a self - similar cellular automaton @xmath108 is denoted by a tuple @xmath109 . by restricting the local rule of a scale - invariant cellular automaton",
    ", a self - similar cellular automaton can also be constructed from a scale - invariant cellular automaton .",
    "consider a scale - invariant cellular automaton whose local rule does not depend on the cell neighbors @xmath129 , @xmath130 , and @xmath131 .",
    "then , the resulting scale - invariant cellular automaton contains the self - similar cellular automaton as subautomaton .",
    "we introduce the following notation for self - similar cellular automata .",
    "we index a cell @xmath132 by the integer @xmath133 , that is a cell with index @xmath76 has a cyle time of @xmath134 .",
    "we call the cell @xmath135 the upper neighbor and the cell @xmath136 the lower neighbor of cell @xmath76 . time instances can be conveniently expressed as a binary number .",
    "if not stated otherwise , we use the cycle time of cell 0 as time unit .",
    "we noted already in the introduction that the evolution of a scale - invariant cellular automaton might lead to indeterministic behavior .",
    "we offer two solutions , one based on a special quiescent state , the other one based on a dynamically growing lattice .",
    "a state @xmath22 in the state set @xmath96 is called a quiescent state with regard to the short - circuit evaluation , if @xmath137 , where the question mark sign `` @xmath138 '' either represents an arbitrary state or a boolean value , depending on its position .",
    "whenever a cell is in state @xmath22 , the cell does not access its lower neighbor .",
    "the cell remains as long in the quiescent state as long as the upper neighbor is in the quiescent state , too .",
    "this modus of operandi corresponds to the short - circuit evaluation of logical expressions in programming languages like c or java .",
    "if the self - similar cellular automaton starts in an initial configuration of the form @xmath139 at cell @xmath140 , the infinite regress is interrupted , since cell @xmath141 evolves to @xmath22 without being dependent on cell @xmath142 .",
    "let @xmath22 be a state in the state set @xmath96 , called the quiescent state .",
    "a dynamically growing self - similar cellular automaton initially starts with the finite set of cells @xmath143 and the following boundary condition .",
    "whenever cell @xmath140 or the cell with the highest index @xmath76 is evolved , the state of the missing neighbor cell is assumed to be @xmath22 .",
    "the self - similar cellular automaton dynamically appends cells to the lower end when needed : whenever the cell with the highest index @xmath76 enters a state that is different from the quiescent state , a new cell @xmath136 is appended , initialized with state @xmath22 , and connected to the cell @xmath76 . to be more specific :",
    "if @xmath76 is the highest index , and cell @xmath76 evolves at time @xmath144 to state @xmath145 , a new cell @xmath136 in state @xmath22 is appended .",
    "the cell performs its first transition at time @xmath146 , assuming state @xmath22 for its missing lower neighbor cell .",
    "we note that the same technique could also be applied to append upper cells to the self - similar cellular automaton , although in the remainder of this paper we only deal with self - similar cellular automata which are growing to the bottom .",
    "both enhancements ensure a deterministic evaluation either for a configuration where only a finite number of cells is in a nonquiescent state or for a finite number of cells .    a configuration of a self - similar cellular automaton @xmath108 is called finite if only a finite number of cells is different from the quiescent state .",
    "let @xmath147 be a finite configuration and @xmath148 the next configuration in the evolution that is different to @xmath147 .",
    "@xmath148 is again finite .",
    "we denote this relationship by @xmath149 .",
    "the relation @xmath150 is again the reflexive and transitive closure of @xmath151 .",
    "a self - similar cellular automaton as a scale - invariant cellular automaton can not halt by definition and runs forever without stopping .",
    "the closest analogue to the turing machine halting occurs , when the configuration stays constant during evolution .",
    "such a configuration that does not change anymore is called final .",
    "in this section , we shall construct an accelerated turing machine based on a self - similar cellular automaton . a self - similar cellular automaton which simulates the turing machine @xmath47 specified in the proof of theorem  [ th - right - acc - tm ] in a step - by - step manner",
    "is a hypercomputer , since the resulting turing machine is a right - accelerated one .",
    "we give an alternative construction , where the shift over to the right is directly embedded in the local rule of the self - similar cellular automaton .",
    "the self - similar cellular automaton will simultaneously simulate the turing machine and shift the tape content down to faster cycling cells .",
    "the advantages of this construction are the smaller state set as well as a resulting faster simulation .",
    "let @xmath10 be an arbitrary turing machine .",
    "we construct a self - similar cellular automaton @xmath152 that simulates @xmath20 as follows .",
    "first , we simplify the local rule by dropping the dependency on @xmath153 , obtaining @xmath154 the state set @xmath96 of @xmath155 is given by @xmath156 we write @xmath157 for an element @xmath158 in @xmath159 , @xmath160 for an element @xmath161 in @xmath18 , and @xmath162 for an element @xmath163 in @xmath164 . to simulate @xmath20 on the input @xmath165 in @xmath166 , @xmath167",
    ", @xmath155 is initialized with the sequence @xmath168 starting at cell 0 , all other cells shall be in the quiescent state @xmath169 .",
    "if @xmath170 , @xmath155 is initialized with the sequence @xmath171 , and if @xmath172 , the empty word , @xmath155 is initialized with the sequence @xmath173 .",
    "we denote the initial configuration by @xmath174 , or by @xmath175 if we want to emphasize the dependency on the input word @xmath30 .",
    "the computation is started at time 0 , i.e. the first state change of cell @xmath76 occurs at time @xmath134 .    the elements @xmath176 and @xmath177 act as head of the turing machine including the input symbol of the turing machine that is scanned next . to accelerate the turing machine , we have to shift down the tape content to faster cycling cells of the self - similar cellular automaton , thereby taking care that the symbols that represent the non - blank content of the turing machine tape are kept together .",
    "we achieve this by sending a pulse , which is just a symbol from a subset of the state set , from the left delimiter @xmath178 to the right delimiter @xmath179 and back .",
    "each zigzag of the pulse moves the tape content one cell downwards and triggers at least one move of the turing machine .",
    "furthermore a blank is inserted to the right of the simulated head if necessary .",
    "the pulse that goes down is represented by exactly one element of the form @xmath180 , or @xmath181 , the upgoing pulse is represented by the element @xmath182 .    the specification of the values for the local rule @xmath103 for all possible arguments is tedious , therefore we use the following approach . a coupled transition of two neighbor cells can perform a simultaneous state change of the two cells . if the state changes of these two neighbor cells is independent of their other neighbors , we can specify the state changes as a transformation of a state pair into another one .",
    "let @xmath183 be elements in @xmath96 .",
    "we call a mapping of the form @xmath184 a block transformation . the block transformation",
    "@xmath184 defines a function mapping of the form @xmath185 and @xmath186 for all @xmath187 in @xmath96 .",
    "furthermore , we will also allow block transformations that might be ambiguous for certain configurations .",
    "consider the block transformations @xmath184 and @xmath188 that might lead to an ambiguity for a configuration that contains @xmath189 . instead of resolving these ambiguities in a formal way",
    ", we will restrict our consideration to configurations that are unambiguous .",
    "the evolution of the self - similar cellular automaton @xmath155 is governed by the following block transformations :    1 .",
    "_ pulse moves downwards . _",
    "set @xmath190 @xmath191 @xmath192 if @xmath193 set @xmath194 @xmath195 @xmath196 if @xmath197 set @xmath198 @xmath199 @xmath200 set @xmath201 @xmath202 @xmath203 2 .",
    "_ pulse moves upwards_. set @xmath204 @xmath205 @xmath206    if to a certain cell no block transformation is applicable the cell shall remain in its previous state .",
    "furthermore , we assume a short - circuit evaluation with regard to the quiescent state : @xmath207 , whereby the lower neighbor cell is not accessed .      [ cols=\"^,^,^,^,^,^ \" , ]     we illustrate the working of @xmath155 by a simple example .",
    "let @xmath208 be the formal language consisting of strings with @xmath41 0 s , followed by @xmath41 1 s : @xmath209 .",
    "a turing machine that accepts this language is given by @xmath210 @xcite with the transition function depicted in fig .",
    "[ fig : example - delta ] .",
    "note that @xmath208 is a context - free language , but @xmath20 will serve for demonstration purposes .",
    "the computation of @xmath20 on input @xmath211 is given below : @xmath212 fig .",
    "[ fig : example - hyper - sca-2 ] depicts the computation of @xmath155 on the turing machine input 01 .",
    "the first column of the table specifies the time in binary base .",
    "@xmath155 performs 4 complete pulse zigzags and enters a final configuration in the fifth one after the turing machine simulation has reached the final state @xmath213 .",
    "[ fig : evolution ] depicts the space - time diagram of the computation .",
    "it shows the position of the left and right delimiter ( gray ) and the position of the pulse ( black ) .",
    "we split the proof that @xmath155 is a hypercomputer into several steps .",
    "we first show that the block transformations are well - defined and the pulse is preserved during evolution . afterwards",
    "we will prove that @xmath155 simulates @xmath20 correctly and we will show that @xmath155 represents an accelerating turing machine .",
    "let @xmath214 be the set of elements that represent the downgoing pulse , @xmath215 be the singleton that contains the upgoing pulse , @xmath216 , and @xmath217 the remaining elements .",
    "the following lemma states that the block transformations are unambiguous for the set of configurations we consider and that the pulse is preserved during evolution .",
    "if the finite configuration @xmath147 contains exactly one element of @xmath218 then the application of the block transformations [ tr : start - state ]  [ tr : up - lhd ] is unambiguous and at most one block transformation is applicable .",
    "if a configuration @xmath148 with @xmath219 exists , then @xmath148 contains exactly one element of @xmath218 as well .",
    "note that the domains of all block transformations are pairwise disjoint .",
    "this ensures that for all pairs @xmath220 in @xmath221 at most one block transformation is applicable . block transformations [ tr : start - state ]  [ tr : new - blank ] are all subsets or elements of @xmath222 , block transformation [ tr : reflection - right ] is element of @xmath223 , block transformations [ tr : up ] and [ tr : up - state ] are subsets of @xmath224 , and finally block transformation [ tr : up - lhd ] is element of @xmath225 .",
    "since the domain is either a subset of @xmath226 or @xmath227 the block transformations are unambiguous if @xmath147 contains at most one element of @xmath218",
    ". a configuration @xmath148 with @xmath219 must be the result of the application of exactly one block transformation . since each block transformation preserves the pulse",
    ", @xmath148 contains one pulse if and only if @xmath147 contains one .",
    "we introduce a mapping @xmath228 that aims to decode a self - similar cellular automaton configuration into a turing machine configuration .",
    "let @xmath147 be a finite configuration .",
    "then @xmath229 is the string in @xmath230 that is formed of @xmath147 as following :    1 .   all elements in @xmath231 are omitted .",
    "all elements of the form @xmath157 are replaced by @xmath23 and all elements of the form @xmath232 or @xmath233 are replaced by the two symbols @xmath22 and @xmath23 .",
    "all other elements of the form @xmath23 are added as they are .",
    "4 .   leading or trailing blanks of the resulting string are omitted .",
    "the following lemma states that @xmath155 correctly simulates @xmath20 .",
    "let @xmath50 , @xmath51 be configurations of @xmath20 . if @xmath234 , then there exist two finite configurations @xmath235 , @xmath236 of @xmath155 such that @xmath237 , @xmath238 , and @xmath239 . especially if the initial configuration @xmath174 of @xmath155 satisfies @xmath240",
    ", then there exists a finite configuration @xmath236 of @xmath155 , such that @xmath238 and @xmath241 .",
    "if @xmath50 has the form @xmath242 we consider without loss of generality @xmath243 .",
    "therefore let @xmath244 .",
    "if @xmath245 or @xmath246 and @xmath247 we choose @xmath248 .",
    "if @xmath246 and @xmath249 we insert an additional blank : @xmath250 . in any case @xmath251 holds .",
    "we show the correctness of the simulation by calculating a complete zigzag of the pulse for the start configuration : @xmath252 .",
    "the number of the block transformation that is applied , is written above the derivation symbol .",
    "we split the zigzag up into three phases .    1",
    ".   pulse moves down from the left delimiter to the left neighbor cell of the simulated head .",
    "+ for @xmath253 we obtain @xmath254 + if @xmath255 the pulse piggybacked by the left delimiter @xmath256 is already in the left neighbor cell of the head and this phase is omitted .",
    "2 .   downgoing pulse passes the head .",
    "+ if in the beginning of the zigzag the head was to the right of the left delimiter then @xmath257 if @xmath258 no further block transformation is applicable and the configuration is final .",
    "the case @xmath259 will be handled later on .",
    "we now continue the derivation  [ der : start ] . if @xmath260 then @xmath261 + if @xmath262 then @xmath263 we distinguish two cases : @xmath245 and @xmath246 .",
    "if @xmath245 then @xmath264 if the next steps of @xmath20 are moving the head again to the right , block transformation [ tr : right-2 ] will repeatedly applied , till the head changes its direction or till the head is left of the right delimiter @xmath179 . if the turing machine @xmath20 changes its direction before the right delimiter is reached , we obtain @xmath265 or if the direction change happens just before the right delimiter then @xmath266 if @xmath267 or if the right - moving head hits the right delimiter the derivation has the following form @xmath268 which inserts a blank to the right of the simulated head .",
    "downgoing pulse is reflected and moves up . + we proceed from configurations of the form @xmath269 .",
    "then @xmath270 which finishes the zigzag .",
    "note that the continuation of derivations [ der : right ] and [ der : new - blank ] is handled by the later part of derivation [ der : up ] .",
    "we also remark that the zigzag has shifted the whole configuration one cell downwards .",
    "all block transformations except transformations [ tr : right-2 ] and [ tr : left-1 ] keep the @xmath228-value of the configuration unchanged .",
    "block transformations [ tr : right-2 ] and [ tr : left-1 ] correctly simulate one step in the calculation of the turing machine @xmath20 : if @xmath271 , @xmath272 , and @xmath273 then @xmath274 .",
    "let @xmath275 be the resulting configuration of the zigzag .",
    "we conclude that @xmath276 holds .",
    "we have chosen @xmath235 in such a way that at least one step of @xmath20 is performed , if @xmath20 does not halt , either by block transformation [ tr : right-2 ] or [ tr : left-1 ] . if @xmath20 does not halt the configuration after the zigzag is again of the form @xmath252 . the case @xmath246 and",
    "@xmath277 is excluded by derivation [ der : new - blank ] , which inserts a blank to the right of the head , if @xmath277 .",
    "this means that @xmath275 has the same form as @xmath235 and that any subsequent zigzag will perform at least one step of @xmath20 as well if @xmath20 does not halt .",
    "in summary , we conclude that @xmath155 reaches after a finite number of zigzags a configuration @xmath236 such that @xmath238 . on the other hand , if @xmath20 halts , @xmath155 enters a final configuration since derivations [ der : tm - step - left ] or [ pulse - passed ] are not applicable anymore and the pulse can not cross the simulated head .",
    "since we have chosen @xmath174 to be of the same form as @xmath235 in the beginning of the proof , the addendum of the lemma regarding the initial configuration is true .",
    "next , the time behavior of the self - similar cellular automaton @xmath155 will be investigated .",
    "let @xmath278 be a finite configuration of @xmath155 that starts in cell @xmath76 .",
    "if @xmath20 does not halt , the zigzag of the pulse takes 3 cycles of cell @xmath76 and @xmath155 is afterwards in a finite configuration @xmath279 that starts in cell @xmath136 .    without loss of generality , we assume that the finite configuration starts in cell 0 .",
    "we follow the zigzag of the pulse , thereby tracking all times , compare with fig .",
    "[ fig : example - hyper - sca-2 ] and fig .",
    "[ fig : evolution ] .",
    "the pulse reaches at time 1 cell 1 , and at time @xmath280 cell 2 .",
    "in general , the downgoing pulse reaches cell @xmath281 in time @xmath282 . at time",
    "@xmath283 the cell @xmath141 changes to @xmath181 which marks the reversal of direction of the pulse .",
    "the next configuration change ( @xmath284 ) occurs at @xmath285 .",
    "the pulse @xmath182 reaches cell @xmath286 in time @xmath287 and in general cell @xmath281 in time @xmath288 . the final configuration change of the zigzag ( @xmath289 ) that marks also the beginning of a new pulse zigzag occurs synchronously in cell 0 and cell 1 at time 3 .",
    "we remark that the overall time of the pulse zigzag remains unchanged if the simulated head inserts a blank between the two delimiters .",
    "[ th - rca ] if @xmath20 halts on @xmath30 and @xmath155 is initialized with @xmath175 then @xmath155 enters a final configuration in a time less than 6 cycles of cell 0 , containing the result of the calculation between the left and right delimiter .",
    "if @xmath20 does not halt , @xmath155 enters after 6 cycles of cell 0 the final configuration that consists of an infinite string of the quiescent element : @xmath290 .",
    "@xmath155 needs 3 cycles of cell 0 to perform the first zigzag of the pulse .",
    "after the 3 cycles the configuration is shifted one cell downwards , starting now in cell 1 .",
    "the next zigzag takes 3 cycles of cell 1 which are 3/2 cyles of cell 0 , and so on .",
    "each zigzags performs at least one step of the turing machine @xmath20 , if @xmath20 does not halt .",
    "we conclude that if @xmath20 halts , @xmath108 enters a final configuration in a time less than @xmath291 cycles of cell 0 .",
    "if @xmath20 does not halt , the zigzag disappears in infinity after 6 cycles of cell 0 leaving a trail of @xmath169 s behind .",
    "if @xmath20 is a universal turing machine , we immediately obtain the following result , which proves that @xmath155 is a hypercomputer for certain turing machines @xmath20 .",
    "let @xmath46 be a universal turing machine .",
    "then @xmath292 solves the halting problem for turing machines .",
    "initialize @xmath292 with an encoded turing machine @xmath20 and an input word @xmath30 .",
    "then @xmath155 enters a final configuration with the result of @xmath20 on @xmath30 in less than 6 cycles of cell 0 if and only if @xmath20 halts .    in the current form of turing machine simulation",
    "the operator has to scan a potentially unlimited number of cells to determine whether @xmath20 has halted or not , which limits its practical value .",
    "if @xmath20 has halted , we would like to propagate at least this fact back to the upper cells .",
    "the following obvious strategy fails in a subtle way . add a rule to @xmath155 that whenever @xmath176 has no next move , replaces it by the new symbol @xmath293 .",
    "add the rule @xmath294 to @xmath155 that propagates @xmath293 upwards to cell @xmath140 .",
    "the propagation upwards is only possible if we change also the block transformation [ tr : up - lhd ] to @xmath295 , thereby introducing a new symbol @xmath296 that is not subject of the short - circuit evaluation .",
    "the last point , even if necessary , causes the strategy to fail , since if @xmath155 does not halt , @xmath155 is after 6 cycles in the configuration @xmath297 that leads to indeterministic behavior of @xmath155 .",
    "this is in so far problematic , since we can not be sure whether a state @xmath293 in cell @xmath140 is really the outcome of a halting turing machine or the result of indeterministic behavior . instead of enhancing the self - similar cellular automaton model",
    ", we will introduce in the next section a computing model that is computational equivalent for finite computations , but avoids indeterminism for infinite computations .",
    "the evolution of a cellular automaton as well as the evolution of a self - similar cellular automaton depends on an extrinsic clock representing a global time that triggers the state changes .",
    "since a self - similar cellular automaton can not halt , a self - similar cellular automaton is forced to perform a state change , even if no state with a causal relationship to the previous one exists , leading to indeterministic behavior , as described in the introduction . in this section ,",
    "we present a model based on petri nets , the self - similar petri nets , with a close resemblance to self - similar cellular automata . even though petri nets in general are not deterministic , there exist subclasses that are . as will be shown below",
    ", self - similar petri nets are deterministic .",
    "they are also capable of hypercomputing , but compared to self - similar cellular automata , their behavior differ in the limit . whereas a self - similar cellular automaton features indeterministic behavior , the self - similar petri net halts .",
    "petri introduced petri nets in the 1960s to study asynchronous computing systems .",
    "they are now widely used to describe and study information processing systems that are characterized as being concurrent , asynchronous , distributed , parallel , nondeterministic , and/or stochastic .",
    "it is interesting to note that very early , and clearly ahead of its time , petri investigated the connections between physical and computational processes , see e.g. , ref .",
    "@xcite . in",
    "what follows , we give a brief introduction to petri nets to define the terminology . for a more comprehensive treatment",
    "we refer to the literature ; e.g. , to ref .  @xcite .",
    "a petri net is a directed , weighted , bipartite graph consisting of two kinds of nodes , called places and transitions .",
    "the weight @xmath298 is the weight of the arc from place @xmath25 to transition @xmath6 , @xmath299 is the weight of the arc from transition @xmath6 to place @xmath25 .",
    "a marking assigns to place @xmath25 a nonnegative integer @xmath76 , we say that @xmath25 is marked with @xmath76 tokens .",
    "if a place @xmath25 is connected with a transition @xmath6 by an arc that goes from @xmath25 to @xmath6 , @xmath25 is an input place of @xmath6 , if the arc goes from @xmath6 to @xmath25 , @xmath25 is an output place .",
    "a petri net is changed according to the following transition ( firing ) rule :    1 .",
    "a transition @xmath6 may fire if each input place @xmath25 of @xmath6 is marked with at least @xmath298 tokens , and 2 .   a firing of an enabled transition @xmath6 removes @xmath298 tokens from each input place @xmath25 of @xmath6 , and adds @xmath299 tokens to each output place @xmath25 of @xmath6 .",
    "formally , a petri net @xmath300 is a tuple @xmath301 where @xmath218 is the set of places , @xmath302 is the set of transitions , @xmath303 is the set of arcs , @xmath304 is the weight function , and @xmath305 is the initial marking .    in graphical representation , places are drawn as circles and transitions as boxes . if a place is input place of more than one transition , the petri net becomes in general indeterministic , since a token in this place might enable more than one transition , but only one can actually fire and consume the token .",
    "the subclass of petri nets given in the following definition avoids these conflicts and is therefore deterministic . in a standard petri net ,",
    "tokens are indistinguishable . if the petri net model is extended so that the tokens can hold values , the petri net is called a colored petri net .    a marked graph is a petri net such that each place has exactly one input transition and exactly one output transition .",
    "a colored petri net is a petri net where each token has a value .",
    "it is well - known that cellular automata can be modeled as colored petri nets . to do this , each cell of the cellular automaton",
    "is replaced by a transition and a place for each neighbor .",
    "the neighbor transitions send their states as token values to their output places , which are the input places of the transition under consideration .",
    "the transition consumes the tokens , calculates the new state , and send its state back to its neighbors .",
    "a similar construction can be done for self - similar cellular automata , leading to the class of self - similar petri nets .     underlying graph of a self - similar petri net . ]",
    "a _ self - similar petri net _ is a colored petri net with some extensions .",
    "a self - similar petri net has the underlying graph partitioned into cells that is depicted in fig .",
    "[ petri ] .",
    "we denote the transition of cell @xmath41 by @xmath306 , the place to the left of the transition by @xmath307 , the place to the right of the transition by @xmath308 and the central place , in the figure the place above the transition , by @xmath309 .",
    "let @xmath96 be a finite set , the state set , @xmath310 be the quiescent state , and @xmath103 be a ( partial ) function @xmath311 .",
    "the set @xmath312 is the value set of the tokens .",
    "tokens are added to a place and consumed from the place according to a first - in first - out order .",
    "initially , the self - similar petri net starts with a finite number of cells @xmath313 , and is allowed to grow to the right .",
    "the notation @xmath314 defines the following action : create a token with value @xmath315 and add it to place @xmath25 .",
    "the firing rule for a transition in cell @xmath41 of a self - similar petri net extends the firing rule of a standard petri net in the following way :    1 .",
    "if the transition @xmath306 is enabled , the transition removes token @xmath316 from place @xmath307 , token @xmath317 from @xmath309 and tokens @xmath318 from @xmath308 .",
    "the value of token @xmath319 shall be of the form @xmath320 in @xmath321 , the other token values @xmath322 and @xmath323 shall be in @xmath96 .",
    "if the tokens do not conform , the behavior of the transition is undefined .",
    "2 .   the transition calculates @xmath324 .",
    "( left boundary cell ) _ if @xmath325 then @xmath326 , @xmath327 , @xmath328 , @xmath329 .",
    "( inner cell ) _ if @xmath330 and @xmath41 is not the highest index , then : @xmath331 , @xmath332 , @xmath333 , @xmath334 .",
    "( right boundary cell ) _",
    "if @xmath41 is the highest index then : 1 .   _",
    "( quiescent state ) _ [ firing - rule - quiescent ] if @xmath335 then @xmath336 , @xmath337 , @xmath338 , @xmath338 2 .   _",
    "( new cell allocation ) _ if @xmath145 then a new cell @xmath339 is created and connected to cell @xmath41 . furthermore : @xmath331 , @xmath332 , @xmath338 , @xmath333 , @xmath334 , @xmath340 , @xmath341 , @xmath341 .",
    "formally , we denote the self - similar petri net by a tuple @xmath342 .",
    "a self - similar petri net is a marked graph and therefore deterministic .",
    "the initial markup is chosen in such a way that initially only the rightmost transition is enabled .",
    "( initial markup ) let @xmath343 be an input word in @xmath344 and let @xmath300 be a self - similar petri net with @xmath41 cells , whereby @xmath345 . the initial markup of the petri net is as follows :    * @xmath346 , ( @xmath347 , @xmath348 ) for @xmath349 , ( @xmath350 , @xmath351 ) for @xmath352 * @xmath353 for @xmath354 , @xmath355 for @xmath356 , * @xmath357 for @xmath358 , @xmath359 for @xmath360 , and @xmath338 .",
    "note that the place @xmath308 is initialized with two tokens .",
    "we identify the state of a cell with the value of its @xmath361-token",
    ". if @xmath361 is empty , because the transition is in the process of firing , the state shall be the value of the last consumed token of @xmath361 .     token flow in a self - similar petri net .",
    "]    fig .",
    "[ token - flow ] depicts the token flow of a self - similar petri net consisting of @xmath362 cells under the assumption that the self - similar petri net does not grow .",
    "tokens that are created and consumed by the same cell are not shown .",
    "the numbers indicate whether the firing is uncoupled ( 0 ) or coupled ( 1 ) .",
    "the only transition that is enabled in the begin is @xmath363 , since @xmath364 was initialized with 2 tokens .",
    "the firing of @xmath363 bootstraps the self - similar petri net by adding a second token to @xmath365 , thereby enabling @xmath366 , and so on , until all transitions have fired , and the token flow enters periodic behavior .",
    "we now compare self - similar petri nets with self - similar cellular automata .",
    "we call a computation finite , if it involves either only a finite number of state updates of a self - similar cellular automaton , or a finite number of transition firings of a self - similar petri net , respectively .",
    "[ lemma : comp - equivalence ] for finite computations , a dynamically growing self - similar cellular automaton @xmath109 and a self - similar petri net @xmath342 are computationally equivalent on a step - by - step basis if the start with the same number of cells and the same initial configuration .",
    "let @xmath300 be a self - similar petri net which has @xmath41 cells initially .",
    "for the sake of the proof consider an enhanced self - similar petri net @xmath367 that is able to timestamp its token .",
    "a token @xmath368 of @xmath367 does not hold only a value , but also a time interval .",
    "we refer to the time interval of @xmath368 by @xmath369 and to the value of @xmath368 by @xmath370 .",
    "we remark that the timestamps serve only to compare the computations of a self - similar cellular automaton and a self - similar petri net and do not imply any time behavior of the self - similar petri net .",
    "the firing rule of @xmath367 works as for @xmath300 , but has an additional pre- and postprocessing step :    * _ ( preprocessing ) _ let @xmath317 , @xmath316 , @xmath371 , and @xmath372 be the consumed token , where the alphabetical subscript denotes the input place and the numerical subscript the order in which the tokens were consumed . calculate @xmath373 , where @xmath374 is the inverse time operator of @xmath375 .",
    "if @xmath376 or @xmath377 or @xmath378 the firing fails and the transition becomes permanently disabled . * _ ( postprocessing ) _ for each created token @xmath368 , set @xmath379 .",
    "the initial marking must set the @xmath6-field , otherwise the first transitions will fail . for the initial tokens in cell @xmath76 ,",
    "set @xmath380 for both tokens in place @xmath381 , @xmath382 , and @xmath383 .",
    "set @xmath384 for the second token in @xmath308 .",
    "the firings of cell @xmath76 add tokens with timestamps @xmath385 to the output place @xmath386 .",
    "if transition @xmath387 does not fail , the state function for the arguments @xmath388 and @xmath389 is well - defined : @xmath390 if cell @xmath76 has produced or was initialized in place @xmath391 with a token @xmath368 with @xmath379 and @xmath392 .",
    "let @xmath97 be the state function of the scale - invariant cellular automaton @xmath108 .",
    "due to the initialization , the two state functions are defined for the first @xmath41 cells and first time intervals @xmath393 .",
    "assume that the values of @xmath100 and @xmath394 differ for some argument or that their domains are different .",
    "consider the first time interval @xmath395 where the difference occurs : @xmath396 , or exactly one of @xmath397 or @xmath398 is undefined .",
    "if there is more than one time interval choose an arbitrary one of these . since @xmath395 was the first time interval where the state functions differ , we know that @xmath399 , @xmath400 , @xmath401 , and @xmath402 .",
    "we handle the case that the values of the state functions are different or that @xmath394 is undefined for @xmath403 whereas @xmath100 is .",
    "the other case ( @xmath394 defined , but not @xmath100 ) can be handled analogously .",
    "if @xmath404 , we conclude that tokens with timestamps @xmath405 , @xmath406 , @xmath407 , @xmath408 were sent to cell @xmath76 , and no other tokens were sent afterwards to cell @xmath76 , since the timestamps are created in chronological order .",
    "hence , the precondition of the firing rule is satisfied and we conclude that @xmath409 , which contradicts our assumption .",
    "the allocation of new cells introduces some technicalities , but the overall strategy of going back in time and concluding that the conditions for a state change or cell allocation were the same in both models works here also .",
    "we complete the proof , by the simple observation that @xmath300 and @xmath367 perform the same computation .",
    "the proof can be simplified using the following more abstract argumentation .",
    "a comparison of fig .",
    "[ token - flow ] with fig .",
    "[ fig : timeops ] shows that each computation step has in both models the same causal dependencies .",
    "since both computers use the same rule to calculate the value of a cell , respectively the value of a token , we conclude that the causal nets @xcite of both computations are the same for a finite computation , and therefore both computers yield the same output , in case the computation is finite .",
    "a large number of different approaches to introducing time concepts to petri nets have been proposed since the first extensions in the mid 1970s .",
    "we do not delve into the depths of the different models , but instead , define a very simple time schedule for the class of self - similar petri nets .",
    "a timed self - similar petri net is a self - similar petri net that fires as soon as the transition is enabled and where a firing of an enabled transition @xmath387 takes the time @xmath134 . in the beginning of the firing ,",
    "the tokens are removed from the input places , and at the end of the firing the produced tokes of the firing are simultaneously entered into the output places .",
    "this time model can be satisfied if the cells of the timed self - similar petri net are arranged as the cells of a self - similar cellular automaton . under the assumption of a constant token speed , a firing time that is proportional to the cell length , and an appropriate unit of time we yield again cycle times of @xmath134 .",
    "we now come back to the simulation of turing machines and construct a hypercomputing timed self - similar petri net , analogous to the hypercomputing self - similar cellular automaton in section [ chap : hypercomputer ] .",
    "let @xmath10 be an arbitrary turing machine .",
    "let @xmath96 be the state set that we used in the simulation of a turing machine by a self - similar cellular automaton , and let @xmath103 the local rule that is defined by the block transformations [ tr : start - state ] - [ tr : up - lhd ] , without the short - circuit evaluation . by lemma [ lemma : comp - equivalence ]",
    "we know that the timed self - similar petri net @xmath410 simulates @xmath20 correctly for a finite number of turing machine steps .",
    "hence , if @xmath20 halts on input @xmath30 , @xmath411 enters a final configuration in less than 6 cyles of cell 0 .",
    "we examine now the case that @xmath20 does not halt . a pivotal difference between a self - similar cellular automaton and a self - similar petri net",
    "is the ability of the latter one to halt on a computation .",
    "this happens if all transitions of the self - similar petri net are disabled .",
    "[ lemma : apn - halting ] let @xmath10 be an arbitrary turing machine and @xmath30 an input word in @xmath166 .",
    "if @xmath20 does not halt on @xmath30 , the timed self - similar petri net @xmath411 halts on @xmath175 after 6 cycles of cell 0 .    as long as the number of cells is finite , the boundary condition  [ firing - rule - quiescent ] of the firing rule adds by each firing two tokens to the @xmath391-place of the rightmost cell that successively enable all other transitions as well .",
    "this holds no longer for the infinite case .",
    "let @xmath20 be a turing machine , and @xmath30 an input word , such that @xmath20 does not halt on @xmath30 .",
    "we consider again the travel of the pulse zigzags down to infinity for the timed self - similar petri net @xmath411 with initial configuration @xmath175 , thereby tracking the marking of the @xmath391-places for times after the zigzag has passed by .",
    "the first states of cell @xmath140 are @xmath256 , @xmath178 , @xmath178 , and @xmath169 , including the initial one .",
    "the state @xmath169 is the result of the firing at time 3 , exhausting thereby the tokens in place @xmath412 . at time 3",
    "the left delimiter ( @xmath256 ) of the pulse zigzag is now in cell 1 .",
    "cell 1 runs from time 3 on through the same state sequence @xmath256 , @xmath178 , @xmath178 , and @xmath169 , thereby adding in summary 4 tokens to @xmath412 . after creating the token with value @xmath169 ,",
    "@xmath413 is empty as well .",
    "we conclude that after the zigzag has passed by a cell , the lower cell sends in summary 4 tokens to the upper cell , till the zigzag has left the lower cell as well .",
    "for each cell @xmath76 these four tokens in @xmath414 enable two firings of cell @xmath76 thereby adding two tokens to @xmath415 .",
    "these two tokens of @xmath415 enable again one firing of cell @xmath416 thereby adding one token to @xmath417 .",
    "we conclude that each cell fires 3 times after the zigzag has passed by and that the final marking of each @xmath391 is one .",
    "hence , no @xmath391 has the necessary two tokens that enable the transition , therefore all transitions are disabled and @xmath411 halts at time 6 .    since @xmath411 halts for nonhalting turing machines , there are no longer any obstacles that prevent the construction of the proposed propagation of the halting state back to upper cells .",
    "we replace block transformation [ tr : start - state ] with the following two and add one new .",
    "if @xmath193 set @xmath418    if @xmath197 or @xmath419 is not defined set @xmath420    if @xmath419 is not defined set @xmath421    the following definition propagates the state @xmath293 up to cell @xmath140 : @xmath422 we denote the resulting timed self - similar petri net by @xmath423 .",
    "the following theorem makes use of the apparently paradoxical fact , that @xmath423 halts if and only if the simulated turing machine does not halt .",
    "let @xmath46 be a universal turing machine .",
    "then @xmath424 solves the halting problem for turing machines .",
    "consider a turing machine @xmath20 and an input word @xmath30 .",
    "initialize @xmath424 with @xmath425 where @xmath426 is the encoding of @xmath20 and @xmath30 . if @xmath20 does not halt on @xmath30 , @xmath424 halts at time 6 by lemma  [ lemma : apn - halting ] .",
    "if @xmath20 halts on @xmath30 , then one cell of @xmath424 enters the state @xmath293 by block transformation  [ tr : h ] or  [ tr : down - to - head2 ] according to theorem  [ th - rca ] and lemma  [ lemma : comp - equivalence ] and taking the changes in @xmath103 into account . the mapping  [ eq : h - up ] propagates @xmath293 up to cell 0 .",
    "an easy calculation shows that cell 0 is in state @xmath293 , in time 7 or less .",
    "we have proven that @xmath424 is indeed a hypercomputer without the deficiencies of the scale - invariant cellular automaton - based hypercomputer .",
    "we end this section with two remarks .",
    "the timed self - similar petri net @xmath411 sends a flag back to the upper cells , if the simulated turing machine halts . strictly speaking ,",
    "this is not necessary , if the operator is able to recognize whether the timed self - similar petri net has halted or not . on the other hand ,",
    "a similar construction is essential , if the operator is interested in the final tape content of the simulated turing machine . transferring the whole tape content of the simulated turing machine upwards , could be achieved by implementing a second pulse that performs an upwards - moving zigzag .",
    "the construction is even simpler as the described one , since the tape content of the turing machine becomes static as soon as the turing machine halts .",
    "the halting problem of turing machines is not the only problem that can be solved by self - similar cellular automata , scale - invariant cellular automata , or timed self - similar petri nets , but is unsolvable for turing machines .",
    "a discussion of other problems unsolvable by turing machines and of techniques to solve them within infinite computing machines , can be found in davies  @xcite .",
    "we have presented two new computing models that implement the potential infinite divisibility of physical configuration space . these models are purely information theoretic and do not take into account kinetic and other effects . with these provisos , it is possible , at least in principle , to use the potential infinite divisibility of space - time to perform hypercomputation , thereby extending the algorithmic domain to hitherto unsolvable decision problems .",
    "both models are composed of elementary computation primitives .",
    "the two models are closely related but are very different ontologically .",
    "a cellular automaton depends on an _ extrinsic _ time requiring an _ external _ clock and a rigid synchronization of its computing cells , whereas a petri net implements a causal relationship leading to an _ intrinsic _ concept of time .",
    "scale - invariant cellular automata as well as self - similar petri nets are built in the same way from their primitive building blocks .",
    "each unit is recursively coupled with a sized - down copy of itself , potentially leading to an infinite sequence of ever decreasing units .",
    "their close resemblance leads to a step - by - step equivalence of finite computations , yet their ontological difference yields different behaviors for the for the case that the computation involves an infinite number of units : a scale - invariant cellular automaton exhibits indeterministic behavior , whereas a self - similar petri net halts .",
    "two supertasks which operate identically in the finite case but differ in their limit is a puzzling observation which might question our present understanding of supertasks .",
    "this may be considered an analogy to a theorem @xcite in recursive analysis about the existence of recursive monotone bounded sequences of rational numbers whose limit is not a computable number .",
    "one striking feature of both models is their scale - invariance .",
    "the computational behavior of these models is therefore the first example for what might be called scale - invariant or self - similar computing , which might be characterized by the property that any computational space - time pattern can be arbitrary squeezed to finer and finer regions of space and time .",
    "although the basic definitions have been given , and elementary properties of these new models have been explored , a great number of questions remain open for future research .",
    "the construction of a hypercomputer was a first demonstration of the extraordinary computational capabilities of these models .",
    "further investigations are necessary to determine their limits , and to relate them with the emerging field of hypercomputation  @xcite",
    ". another line of research would be the investigation of their phenomenological properties , analogous to the statistical mechanics of cellular automata  @xcite .",
    "m.  margenstern and k.  morita , `` a polynomial solution for 3-sat in the space of cellular automata in the hyperbolic plane , '' journal of universal computer science * 5 * , 563573 ( 1999 ) .",
    "j.  durand - lose , `` abstract geometrical computation for black hole computation , '' in _ machines , computations , and universality , 4th international conference , mcu 2004 , saint petersburg , russia , september 21 - 24 , 2004 , revised selected papers _ , m.  margenstern , ed .",
    "( springer , 2005 ) , pp .",
    "i.  nmeti and g.  dvid , `` relativistic computers and the turing barrier , '' applied mathematics and computation * 178 * , 118142 ( 2006 ) , special issue on hypercomputation .",
    "o.  bournez and m.  l. campagnolo , `` a survey on continuous time computations , '' in _ new computational paradigms . changing conceptions of what is computable _ , s.  cooper , b.  lwe , and a.  sorbi , eds .",
    "( springer verlag , new york , 2008 ) , pp .",
    "383423 .",
    "h.  gutowitz , `` cellular automata : theory and experiment , '' physica * d45 * , 3483 ( 1990 ) , previous ca conference proceedings in _ international journal of theoretical physics _",
    "* 21 * , 1982 ; as well as in _ physica _ , * d10 * , 1984 and in * complex systems * * 2 * , 1988 .",
    "e.  specker , `` nicht konstruktiv beweisbare stze der analysis , '' the journal of smbolic logic * 14 * , 145158 ( 1949 ) , reprinted in @xcite ; english translation : _ theorems of analysis which can not be proven constructively_."
  ],
  "abstract_text": [
    "<S> two novel computing models based on an infinite tessellation of space - time are introduced . </S>",
    "<S> they consist of recursively coupled primitive building blocks . </S>",
    "<S> the first model is a scale - invariant generalization of cellular automata , whereas the second one utilizes self - similar petri nets . </S>",
    "<S> both models are capable of hypercomputations and can , for instance , `` solve '' the halting problem for turing machines . </S>",
    "<S> these two models are closely related , as they exhibit a step - by - step equivalence for finite computations . on the other hand , they differ greatly for computations that involve an infinite number of building blocks : the first one shows indeterministic behavior whereas the second one halts . </S>",
    "<S> both models are capable of challenging our understanding of computability , causality , and space - time . </S>"
  ]
}