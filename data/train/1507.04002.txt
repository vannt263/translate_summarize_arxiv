{
  "article_text": [
    "in this paper we present the  software tool .",
    "first , we provide the motivation and a short description .",
    "we then present the natural deduction system as it is done in a popular textbook @xcite and as is it done in  by looking at its formalization in isabelle .",
    "this illustrates the differences between the two approaches .",
    "we also present the semantics of first - order logic as formalized in isabelle , which was used to prove the proof system of  sound .",
    "thereafter we explain how  is used to construct a natural deduction proof .",
    "lastly , we compare  to other natural deduction assistants and consider how  could be improved .",
    "we have been teaching a bachelor logic course  with logic programming  for a decade using a textbook with emphasis on tableaux and resolution @xcite .",
    "we have started to use the proof assistant isabelle @xcite and refutation proofs are less preferable here .",
    "the proof system of natural deduction @xcite with the introduction and elimination rules as well as a discharge mechanism seems more suitable .",
    "the natural deduction proof system is widely known , used and studied among logicians throughout the world .",
    "however , our experience shows that many of our undergraduate computer science students struggle to understand the most difficult aspects .",
    "this also goes for other proof systems .",
    "the formal language of logic can be hard to teach our students because they do not have a strong theoretical mathematical background . instead",
    ", most of the students have a good understanding of concrete computer code in a programming language .",
    "the syntax used in isabelle is in many ways similar to a programming language , and therefore a clear and explicit formalization of first - order logic and a proof system may help the students in understanding important details .",
    "formalizations of model theory and proof theory of first - order logic are rare , for example @xcite .",
    "we present the natural deduction assistant  with a formalization in the proof assistant isabelle of its proof system .",
    "it can be used directly in a browser without any further installation and is available here :    http://nadea.compute.dtu.dk/    is open source software developed in typescript / javascript and stored on github .",
    "the formalization of its proof system in isabelle is available here :    http://logic-tools.github.io/    once  is loaded in the browser  about 250 kb with the jquery core library  no internet connection is required . therefore  can also be stored locally .",
    "we display the natural deduction proofs in two different formats .",
    "we present the proof in an explicit code format that is equivalent to the isabelle syntax , but with a few syntactic differences to make it easier to understand for someone trying to learn isabelle . in this format , we present the proof in a style very similar to that of fitch s diagram proofs .",
    "we avoid the seemingly popular gentzen s tree style to focus less on a visually pleasing graphical representation that is presumably much more challenging to implement .",
    "we find that the following requirements constitute the key ideals for any natural deduction assistant .",
    "it should be :    * easy to use .",
    "* clear and explicit in every detail of the proof .",
    "* based on a formalization that can be proved at least sound , but preferably also complete .",
    "based on this , we saw an opportunity to develop  which offers help for new users , but also serves to present an approach that is relevant to the advanced users .    in a paper considering the tools developed for teaching logic over the last decade @xcite ,",
    "the following is said about assistants ( not proof assistants like isabelle but tools for learning / teaching logicassistants are characterized by a higher degree of interactivity with the user .",
    "they provide menus and dialogues to the user for interaction purposes .",
    "this kind of tool gives the students the feeling that they are being helped in building the solution .",
    "they provide error messages and hints in the guidance to the construction of the answer .",
    "many of them usually offer construction of solution in natural deduction proofs . [ ... ] they are usually free licensed and of open accesswe think that this characterization in many ways fits . while  might not bring something new to the table in the form of delicate graphical features , we emphasize the fact that it has some rather unique features such as a formalization of its proof system in isabelle .",
    "we consider natural deduction as presented in a popular textbook on logic in computer science @xcite .",
    "first , we take a look substitution , which is central to the treatment of quantifiers in natural deduction",
    ".      the following definition for substitution is used in ( * ? ? ?",
    "*  topgiven a variable @xmath0 , a term @xmath1 and a formula @xmath2 we define @xmath3 $ ] to be the formula obtained by replacing each free occurrence of variable @xmath0 in @xmath2 with @xmath1 .",
the usual side conditions that come with rules using this substitution seem to be omitted . in (",
    "*  top ) , we are shortly after given the following definition of what it means that @xmath1 must be free for @xmath0 in @xmathgiven a term @xmath1 , a variable @xmath0 and a formula @xmath2 , we say that @xmath1 is free for @xmath0 in @xmath2 if no free @xmath0 leaf in @xmath2 occurs in the scope of @xmath4 or @xmath5 for any variable @xmath6 occurring in @xmath1 .",
the following quote ( * ? ? ?",
    "*  bottom ) from the same book emphasizes how it seems more preferable , due to the high level of complexity , to avoid the details of these important side conditionsit might be helpful to compare @xmath1 is free for @xmath0 in @xmath2 with a precondition of calling a procedure for substitution . if you are asked to compute @xmath3 $ ] in your exercises or exams , then that is what you should do ; but any reasonable implementation of substitution used in a theorem prover would have to check whether @xmath1 is free for @xmath0 in @xmath2 and , if not , rename some variables with fresh ones to avoid the undesirable capture of variables .",

we find that this way of presenting natural deduction proof systems leaves out some important notions that the students ought to learn . in our formalization such notions and their complications",
    "become easier to explain because all side conditions of the rules are very explicitly stated .",
    "we see it as one of the major advantages of presenting this formalization to students .",
    "we now present the natural deduction rules as described in the literature , again using @xcite .",
    "the first 9 are rules for classical propositional logic and the last 4 are for first - order logic .",
    "intuitionistic logic can be obtained by omitting the rule _ pbc _",
    "( proof by contradiction , called `` boole '' later ) and adding the @xmath7-elimination rule ( also known as the rule of explosion ) @xcite .",
    "the rules are as follows :              side conditions to rules for quantifiers :    @xmath13 : @xmath14 can not occur outside its box ( and therefore not in @xmath15 ) .",
    "@xmath16 : @xmath1 must be free for @xmath0 in @xmath2 .",
    "@xmath17 : @xmath1 must be free for @xmath0 in @xmath2 .",
    "@xmath18 : @xmath14 is a new variable which does not occur outside its box .",
    "in addition there is a special copy rule @xcitea final rule is required in order to allow us to conclude a box with a formula which has already appeared earlier in the proof . [ ... ] the rule ` copy ' allows us to repeat something that we know already . we need to do this in this example , because the rule @xmath19 requires that we end the inner box with @xmath20 .",
    "the copy rule entitles us to copy formulas that appeared before , unless they depend on temporary assumptions whose box has already been closed . though a little inelegant",
    ", this additional rule is a small price to pay for the freedom of being able to use premises , or any other ` visible ' formulas , more than once . _",
the copy rule is not needed in our formalization due to the way it manages assumptions .",
    "as it can be seen , there are no rules for truth , negation or biimplication , but the following equivalences can be used : @xmath21 the symbols @xmath22 and @xmath23 are arbitrary formulas .",
    "one of the unique features of  is that it comes with a formalization in isabelle of its proof system .",
    "the terms and formulas of the first - order logic language are defined as the data types and ( later abbreviated and , respectively ) .",
    "the type represents predicate and function symbols ( later abbreviated ) .",
    "@  l +   +   +    truth , negation and biimplication are abbreviations . in the syntax of our formalization",
    ", we refer to variables by use of the de bruijn indices . that is , instead of identifying a variable by use of a name , usually @xmath0 , @xmath6 , @xmath24 etc .",
    ", each variable has an index that determines its scope .",
    "the use of de bruijn indices instead of named variables allows for a simple definition of substitution .",
    "furthermore , it also serves the purpose of teaching the students about de bruijn indices .",
    "note that we are not advocating that de bruijn indices replace the standard treatment of variables in general .",
    "it arguably makes complex formulas harder to read , but the pedagogical advance is that the notion of scope is exercised .",
    "provability in  is defined inductively as follows :        @xmath27 { { \\textsf{ok r a}}}{{\\textsf{ok ( dis p q ) a } } ~~&~~ { \\textsf{ok r ( p \\ # a ) } } ~~&~~ { \\textsf{ok r ( q \\ # a)}}}\\ ] ]        @xmath30 { { \\textsf{ok q a}}}{{\\textsf{ok ( exi p ) a } } & ~ { \\textsf{ok q ( ( sub 0 ( fun c [ ] ) p ) \\ # a ) } } & { \\textsf{news c ( p\\#q\\#a)}}}\\ ] ]    @xmath31 { { \\textsf{ok ( exi p ) a}}}{{\\textsf{ok ( sub 0 t p ) a}}}\\ ] ]      means that the formula follows from the list of assumptions and means that is a member of . the operator is between the head and the tail of a list .",
    "checks if the identifier does not occur in the any of the formulas in the list and returns the formula where the term has been substituted for the variable with the de bruijn index . instead of writing we could also use the syntax @xmath33 , even in isabelle , but we prefer a more programming - like approach . in the types we use @xmath34 for function spaces .",
    "the definitions of , and are as follow :    @  l +   +   +   +   +   +   +   +   +   +   +   +   +   +   +   +   +   +   +    @  l +   +   +   +   +   +   +   +   +   +   +   +   +   +   +   +   +   +   +      to give meaning to formulas and to prove  sound we need a semantics of the first - order logic language .",
    "this semantics is defined in the formalization in isabelle , and it is thus not part of the tool itself .",
    "we present the semantics below .",
    "is the environment , i.e. a mapping of variables to elements .",
    "maps function symbols to the maps they represent .",
    "these maps are from lists of elements of the universe to elements of the universe .",
    "likewise , maps predicate symbols to the maps they represent . is a type variable that represents the universe . in",
    "can be instantiated with any type .",
    "for instance , it can be instantiated with the natural numbers , the real number or strings .",
    "@  l +   +   +   +   +   +   +   +   +   +   +   + semantics e f g ( p ) = ( x. semantics ( % n. if n = 0 then x else e ( n  1 ) ) f g p ) + semantics e f g ( p ) = ( x. semantics ( % n. if n = 0 then x else e ( n  1 ) ) f g p )    most of the cases of should be self - explanatory , but the case is complicated .",
    "the details are not important here , but in the case for it uses the universal quantifier ( ) of isabelle s higher - order logic to consider all values of the universe",
    ". it also uses the lambda abstraction operator ( % ) to keep track of the indices of the variables .",
    "likewise , the case for uses the existential quantifier ( ) of isabelle s higher - order logic .",
    "we have proved soundness of the formalization in isabelle ( shown here as a derived rule ) : @xmath35{{\\textsf{semantics e f g p}}}{{\\textsf{ok p [ \\,]}}}\\ ] ] this result makes  interesting to a broader audience since it gives confidence in the formulas proved using the tool .",
    "we now describe the core features of  from the perspective of the user .",
    "that is , we uncover how to use  to conduct and edit a proof as well as how proofs are presented .    in order to start a proof",
    ", you have to start by specifying the goal formula , that is , the formula you wish to prove . to do so",
    ", you must enable editing mode by clicking the edit button in the top menu bar .",
    "this will show the underlying proof code and you can build formulas by clicking the red  symbol . alternatively , you can load a number of tests by clicking the load button .    at all times , once you have fully specified the conclusion of any given rule , you can continue the proof by selecting the next rule to apply .",
    "again you can do this by clicking the the red  symbol . furthermore ,  allows for undoing and redoing editing steps with no limits .",
    "all proofs are conducted in backward - chaining mode .",
    "that is , you must start by specifying the formula that you wish to prove .",
    "you then apply the rules inductively until you reach a proof  if you can find one .",
    "the proof is finished by automatic application of the rule once the conclusion of a rule is found in the list of assumptions .    to start over on a new proof",
    ", you can load the blank proof by using the load button , or you can refresh the page . please note that any unsaved work will then be gone .",
    "in  we present any given natural deduction proof ( or an attempt at one ) in two different types of syntax .",
    "one syntax follows the rules as defined in section [ dedrules ] and is closely related to the formalization in isabelle , but with a redefined and more simple syntax in terms of learning .",
    "the proof is not built as most often seen in the literature about natural deduction .",
    "usually , for each rule the premises are placed above its conclusion separated by a line .",
    "we instead follow the procedure of placing each premise of the rule on separate lines below its conclusion with an additional level of indentation .",
    "@xmath36 { p \\land ( p \\rightarrow q ) \\rightarrow q } {      \\infer      { q }      {          \\infer          { p \\rightarrow q }          {              \\infer[^{(1 ) } ]              { p \\land ( p \\rightarrow q ) }              { }          }          &          \\infer          { p }          {              \\infer[^{(1 ) } ]              { p \\land ( p \\rightarrow q ) }              { }          }      } } \\ ] ]",
    "throughout the development of  we have considered some of the natural deduction assistants currently available .",
    "several of the tools available share some common flaws",
    ". they can be hard to get started with , or depend on a specific platform . however , there are also many tools that each bring something useful and unique to the table .",
    "one of the most prominent is panda , described in @xcite .",
    "panda includes a lot of graphical features that make it fast for the experienced user to conduct proofs , and it helps the beginners to tread safely .",
    "another characteristic of panda is the possibility to edit proofs partially before combining them into a whole .",
    "it definitely serves well to reduce the confusion and complexity involved in conducting large proofs .",
    "however , we still believe that the way of presenting the proof can be more explicit . in , every detail",
    "is clearly stated as part of the proof code . in that sense",
    ", the students should become more aware of the side conditions to rules and how they work .",
    "another tool that deserves mention is proofweb @xcite which is open source software for teaching natural deduction .",
    "it provides interaction between some proof assistants ( coq , isabelle , lego ) and a web interface .",
    "the tool is highly advanced in its features and uses its own syntax .",
    "also , it gives the user the possibility to display the proof in different formats .",
    "however , the advanced features come at the cost of being very complex for undergraduate students and require that you learn a new syntax .",
    "it serves as a great tool for anyone familiar with natural deduction that wants to conduct complex proofs that can be verified by the system .",
    "it may , on the other hand , prove less useful for teaching natural deduction to beginners since there is no easy way to get started . in , you are free to apply any ( applicable ) rule to a given formula , and thus , beginners have the freedom to play around with the proof system in a safe way . furthermore , the formalized soundness result for the proof system of  makes it relevant for a broader audience , since this gives confidence in that the formulas proved with the tool are actually valid .",
    "in  there is support for proofs in propositional logic as well as first - order logic .",
    "we would also like to extend to more complex logic languages , the most natural step being higher - order logic .",
    "this could be achieved using the cakeml approach @xcite .",
    "other branches of logic would also be interesting , and the possibilities are numerous .",
    "apart from just extending the natural deduction proof system to support other types of logic , another option is to implement other proof systems as well .",
    "because the  tool has a formalization in isabelle of its proof system , we would like to provide features that allow for a direct integration with isabelle .",
    "for instance , we would like to allow for proofs to be exported to an isabelle format that could verify the correctness of the proofs .",
    "a formal verification of the implementation would require much effort , but perhaps it could be reimplemented on top of isabelle ( although probably not in typescript / javascript ) .",
    "we would like to extend  with more features in order to help the user in conducting proofs and in understanding logic .",
    "for example , the tool could be extended with step - by - step execution of the auxiliary primitive recursive functions used in the side conditions of the natural deduction rules .",
    "so far only a small group of computer science students have tested , but it will be classroom tested with around 60 bachelor students in the next semester . currently the tool has no support for student assignments and automatic feedback and/or grading . the tool could be extended such that the students are evaluated and perhaps given a score based on the proofs they conduct .",
    "it is not obvious how this could best be implemented .",
    "we hope to find the resources for the development of such features but already now we think that the tool has the potential to be one of the main ways to teach logic in mathematics and computer science .",
    "we would like to thank stefan berghofer for discussions about the formalization of natural deduction in isabelle .",
    "we would also like to thank andreas halkjr from and andreas viktor hess for comments on the paper .",
    "jrgen villadsen , anders schlichtkrull and andreas viktor hess .",
    "meta - logical reasoning in higher - order logic . accepted at 29th international symposium logica , hejnice monastery , czech republic , 15 - 19 june 2015 .",
    "olivier gasquet , franois schwarzentruber and martin strecker .",
    "panda : a proof assistant in natural deduction for all .",
    "a gentzen style proof assistant for undergraduate students .",
    "lecture notes in computer science 6680 , 8592 .",
    "springer 2011 ."
  ],
  "abstract_text": [
    "<S> we present a new software tool for teaching logic based on natural deduction . </S>",
    "<S> its proof system is formalized in the proof assistant isabelle such that its definition is very precise . </S>",
    "<S> soundness of the formalization has been proved in isabelle . </S>",
    "<S> the tool is open source software developed in typescript / javascript and can thus be used directly in a browser without any further installation . </S>",
    "<S> although developed for undergraduate computer science students who are used to study and program concrete computer code in a programming language we consider the approach relevant for a broader audience and for other proof systems as well . </S>"
  ]
}