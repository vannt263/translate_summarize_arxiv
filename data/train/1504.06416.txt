{
  "article_text": [
    "in this paper , we consider array - based spatially - coupled low - density parity - check ( sc - ldpc ) codes as introduced in @xcite and subsequently studied in @xcite from the perspective of _ absorbing sets_. array ldpc codes were originally proposed by fan in @xcite and are specified by two integers @xmath0 and @xmath1 , where @xmath0 is an odd prime and @xmath2 .    spatial coupling was first introduced in the coding theory literature by felstrm and zigangirov in @xcite , where they proposed convolutional ldpc or sc - ldpc codes .",
    "these codes have very good belief propagation ( bp ) decoding thresholds due to the phenomenon of _ threshold saturation_. for instance , in @xcite , it was shown that for binary memoryless channels , the bp decoding threshold _ saturates _ to the maximum _ a posteriori _ decoding threshold of the underlying ensemble . since the original work by fan @xcite , several authors have considered the _ structural _ properties ( including the minimum distance @xmath8 ) of array ldpc codes ( see , e.g. , @xcite ) . for high rate and moderate length ,",
    "these codes perform well under iterative decoding , and they are also well - suited for practical implementation due to their regular structure @xcite .    in this work ,",
    "we present several tight upper bounds on the _ optimal _ minimum distance of array - based sc - ldpc codes for coupling length at least two and @xmath4 , that are independent of @xmath0 and that are valid for all values of @xmath5 where @xmath6 depends on @xmath1 .",
    "also , these bounds ( and intermediate results in their proofs ) can in some cases be used to quickly remove large parts of the search space when searching for _ optimal _ _ cutting vectors_. for small values of @xmath0 ( @xmath4 ) we present the results of an exhaustive search over all cutting vectors , showing that a careful selection can increase the minimum distance significantly , especially for @xmath9 .",
    "we remark that the iterative decoding performance of these codes , for instance , on additive white gaussian noise channels , is typically dominated by minimum absorbing sets and their multiplicities .",
    "however , improved decoding methods and ultimately maximum - likelihood decoding will not be trapped in absorbing sets and thus overcome the shortcomings of standard iterative decoding , in which case the minimum distance ( and its multiplicity ) will become an important performance metric .",
    "the array ldpc code @xmath10 , with parameters @xmath0 and @xmath1 , has length @xmath11 and can be defined by the parity - check matrix @xmath12\\ ] ] where @xmath13 is the @xmath14 identity matrix and @xmath15 the @xmath14 permutation matrix @xmath16.\\ ] ] since the number of ones in each row of the matrix in ( [ eq : pcmatrix ] ) is @xmath0 and the number of ones in each column is @xmath1 , the array ldpc codes are @xmath17-regular codes .",
    "furthermore , its rank is @xmath18 , from which it follows that the dimension of @xmath10 is @xmath19 .    in @xcite , a new representation for @xmath20",
    "was introduced . in particular , since each column of the parity - check matrix @xmath20 has @xmath1 blocks and each block is a permutation of @xmath21 , where @xmath22 denotes the transpose of its argument , we can represent each column as a vector of integers between @xmath23 and @xmath24 , where @xmath25 i.e. , the @xmath26-positions are associated with the integers modulo @xmath0 .",
    "furthermore , it follows from ( [ eq : pcmatrix ] ) and the integer representation in ( [ eq : rep ] ) that any column in an array ldpc code parity - check matrix is of the form @xmath27 where @xmath28 ^ 2 $ ] and , for notational convenience , for any positive integer @xmath29 , @xmath30 \\triangleq \\{0,1,\\dots , l-1\\}$ ] .",
    "thus , a column can be specified by two integers @xmath31 and @xmath32 .",
    "also , note that since there are @xmath11 distinct columns in an array ldpc code parity - check matrix , any pair @xmath28 ^ 2 $ ] specifies a valid column .    in the following ,",
    "it is also convenient to consider the parity - check matrix in ( [ eq : pcmatrix ] ) as an @xmath33 array of @xmath14 permutation matrices with _ row group _ indices @xmath34 $ ] and _ column group _ indices @xmath35 $ ] , from which it follows that each column can be uniquely indexed by the pair @xmath36 , where @xmath35 $ ] is the index of the column group and @xmath37 $ ] is the index within a column group . likewise , each row can be uniquely indexed by the pair @xmath38 , where @xmath34 $ ] is the index of the row group and @xmath37 $ ] is the index within a row group .",
    "array - based sc - ldpc codes can be constructed from array ldpc codes by a special type of _ edge spreading _ or _ unwrapping _ procedure @xcite specified by a `` cutting '' vector @xmath39 , where @xmath40 .",
    "the purpose of the cutting vector is to generate two parity - check matrices @xmath41 and @xmath42 , each of size @xmath43 and initially filled with zeros , as follows :    * for each @xmath44 , @xmath34 $ ] , the @xmath14 permutation matrices in row group @xmath45 and column group @xmath46 , @xmath47 , of @xmath20 are copied into the corresponding positions in @xmath41 . * similarly , for each @xmath44 , @xmath34 $ ] , the @xmath14 permutation matrices in row group @xmath45 and column group @xmath46 , @xmath48 , of @xmath20 are copied into the corresponding positions in @xmath42 .    if @xmath49 , @xmath50 , and @xmath51 , the matrices @xmath41 and @xmath42 become @xmath52\\ ] ] and @xmath53.\\ ] ]    for a given positive integer @xmath29 ( the coupling length ) and a cutting vector @xmath54 , an array - based sc - ldpc code is defined by the parity - check matrix @xmath55\\ ] ] of size @xmath56 .    as for the uncoupled case ,",
    "it is convenient to consider the convolutional parity - check matrix in ( [ eq : scpcmatrix ] ) as a @xmath57 array of @xmath14 permutation and all - zero matrices in which @xmath58 consecutive rows ( resp .  @xmath11 consecutive columns )",
    "are referred to as a row ( resp .",
    "section_. within each row ( resp .",
    "column ) section , the rows ( resp .",
    "columns ) correspond to a row ( resp .",
    "column ) group . in summary , each column can be indexed by a triple @xmath59 , where @xmath60 $ ] is the column section index , @xmath35 $ ] is the column group index within column section @xmath61 , and @xmath37 $ ] is the column index within column group @xmath46 in column section @xmath61 .",
    "similarly , each row can be indexed by a triple @xmath62 , where @xmath63 $ ] is the row section index , @xmath34 $ ] is the row group index within row section @xmath61 , and @xmath37 $ ] is the row index within row group @xmath45 in row section @xmath61 .    note that as for the uncoupled matrix in ( [ eq : pcmatrix ] ) , all columns in @xmath64 contain exactly @xmath1 ones and each row in row sections @xmath65 contains exactly @xmath0 ones .",
    "however , the rows in row sections @xmath23 and @xmath29 can have fewer than @xmath0 ones .    in the following",
    ", we will denote the binary linear code defined by the coupled parity - check matrix @xmath64 in ( [ eq : scpcmatrix ] ) by @xmath66 and its corresponding minimum ( resp .  stopping ) distance by @xmath67 ( resp .",
    "@xmath68 ) .",
    "it was shown in ( * ? ? ?",
    "* theorem 5 ) that the minimum distance @xmath67 of @xmath66 is bounded below by the minimum distance @xmath69 of @xmath10 for all cutting vectors @xmath54 .",
    "now , let us define the optimal minimum distance of an array - based sc - ldpc code as the highest minimum distance over all possible cutting vectors as the coupling length @xmath29 tends to infinity , i.e. , @xmath70 where @xmath71",
    "in this section , we derive upper bounds on @xmath72 for @xmath73 and @xmath4 , that are independent of @xmath0 and that hold for all values of @xmath5 where @xmath6 depends on @xmath1 .",
    "now , define the _ range _ of a sorted ( in nondecreasing order ) sequence of column group indices @xmath74 of length @xmath75 as @xmath76 } \\left ( j_{l}^{\\rm gr}-\\left(j_{(l+1 ) \\bmod n}^{\\rm gr } -   q \\left \\lceil \\frac{n-1-l}{n-1 } \\right \\rceil \\right ) \\right ) + 1.\\ ] ] furthermore , define @xmath77 } \\left ( \\left(\\zeta_{(j+1 ) \\bmod m}-\\zeta_{j}\\right )   \\bmod q \\right ) \\notag \\\\ j_{\\rm max}(\\boldsymbol{\\zeta } ) & \\triangleq   \\operatorname*{arg\\,max}_{j \\in [ m-1 ] } \\left ( \\left(\\zeta_{(j+1 ) \\bmod m}-\\zeta_{j}\\right ) \\bmod q \\right ) \\notag\\end{aligned}\\ ] ] for a given cutting vector @xmath54 .",
    "let @xmath78 , @xmath79 , and @xmath80 .",
    "then , the range of @xmath81 is @xmath82      [ th : m3 ] the minimum distance @xmath83 , for @xmath73 and @xmath84 , is upper - bounded by @xmath85 .",
    "the proof is based on the template codeword from ( * ? ? ? * theorem 4 ) . for convenience of the reader ,",
    "we restate the corresponding _ template support matrix _ below @xmath86\\ ] ] where @xmath87 , @xmath88 \\setminus \\{0\\}$ ] , and @xmath37 $ ] with @xmath89 , and where all operations are taken modulo @xmath0 .",
    "the template support matrix is obtained by extracting the columns of the parity - check matrix corresponding to the support set of the underlying codeword . when constructing this matrix , the integer representation of the columns from ( [ eq : form ] )",
    "is used .",
    "now , a column of the general form @xmath90 , @xmath91 $ ] , in this matrix has column group index of @xmath32 . thus , the sequence of column group indices corresponding to the template matrix in ( [ eq : templatem3 ] ) is @xmath92 for @xmath93 and @xmath94 , we get the following sorted sequence @xmath95    since array ldpc codes are quasi - cyclic with period @xmath0 , _ cyclically incrementing _ a sequence of column group indices @xmath96 of length @xmath75 of a codeword in an array ldpc code by an integer @xmath97 results in the valid sequence @xmath98 of column group indices of a codeword that is obtained by cyclically shifting the given codeword by @xmath99 positions to the right . if the range of a sorted ( in nondecreasing order ) sequence of column group indices corresponding to a codeword in the uncoupled array ldpc code is at most @xmath100 , it can always be cyclically incremented so that the corresponding codeword has coordinates with column group index @xmath46 within @xmath101 when @xmath102 , and within @xmath103 when @xmath104 . consequently",
    ", there will exist a codeword in the coupled code ( for all @xmath73 ) with all coordinates within the same column section when @xmath102 , or within two consecutive column sections when @xmath104 .",
    "thus , since @xmath105 , there will exist a codeword in the sc - ldpc code of weight @xmath85 for all cutting vectors @xmath54 as long as @xmath106 since @xmath107 for @xmath108 and @xmath109 for @xmath49 , the smallest @xmath0 that satisfies this inequality is @xmath110 , and the result follows since the range of ( [ eq : groupindexseqm3 ] ) for @xmath84 is constant .",
    "consider the case of @xmath79 , @xmath50 , and the template support matrix in ( [ eq : templatem3 ] ) for @xmath93 and @xmath94 .",
    "the sorted ( in nondecreasing order ) sequence of column group indices is @xmath111 which has range @xmath112 . by cyclically incrementing this sequence by two ,",
    "we get @xmath113 .",
    "the corresponding support matrices ( both of which correspond to codewords ) are @xmath114 \\text { and } \\left [ \\begin{smallmatrix } 0 & 0 & 2 & 2 & 5 & 5 \\\\ 2 & 0 & 2 & 1 & 1 & 0 \\\\ 4 & 0 & 2 & 0 & 4 & 2 \\end{smallmatrix } \\right]\\ ] ] respectively . for the cutting vector @xmath115",
    ", we have @xmath116 , @xmath117 , @xmath118 , and @xmath119 = \\left [ \\begin{mysmallmatrix } \\bm{i } & \\bm{i } & \\bm{i } & \\bm{i } & \\bm{0 } & \\bm{0 } & \\cellcolor{lightcyan}{\\bm{0 } } & \\vline & & & & & & & \\\\ \\bm{i } & \\bm{p } & \\bm{p}^2 & \\bm{p}^3 & \\bm{p}^4 & \\bm{0 } & \\bm{0 } & \\vline & & & & & & & \\\\",
    "\\bm{i } & \\bm{p}^2 & \\bm{p}^4 & \\bm{p}^6 & \\bm{p } & \\bm{p}^3 & \\bm{0 } & \\vline & & & & & & & \\\\",
    "\\\\[-0.5ex]\\hline \\\\[+0.5ex ] \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{i } & \\bm{i } & \\color{blue}{\\bm{i } } & \\vline & \\color{blue}{\\bm{i } } & { \\bm{i } } & \\color{blue}{\\bm{i } } & \\color{blue}{\\bm{i } } & \\bm{0 } & \\bm{0 } & \\bm{0 } \\\\",
    "\\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{p}^5 & \\color{blue}{\\bm{p}^6 } & \\vline & \\color{blue}{\\bm{i } } & { \\bm{p } } & \\color{blue}{\\bm{p}^2 } & \\color{blue}{\\bm{p}^3 } & \\bm{p}^4 & \\bm{0 } & \\bm{0 } \\\\",
    "\\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\color{blue}{\\bm{p}^5 } & \\vline & \\color{blue}{\\bm{i } } & { \\bm{p}^2 } & \\color{blue}{\\bm{p}^4 } & \\color{blue}{\\bm{p}^6 } & \\bm{p } & \\bm{p}^3 & \\bm{0 } \\\\ \\\\[-0.5ex]\\hline \\\\[+0.5ex ] & & & & & & &   \\vline & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{i } & \\bm{i } & \\bm{i } \\\\ & & & & & & & \\vline & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{p}^5 & \\bm{p}^6 \\\\ & & & & & & & \\vline & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{0 } & \\bm{p}^5 \\end{mysmallmatrix }   \\right].\\ ] ] from the highlighted blue columns in the matrix above we can identify a weight-@xmath85 codeword corresponding to the sequence @xmath113 of column group indices mentioned above . for other cutting vectors like @xmath120",
    ", we get @xmath121 , which is less than the range , and there will be no codewords of the type in ( [ eq : templatem3 ] ) with @xmath93 and @xmath94 ( there are for @xmath122 and @xmath94 ) in the coupled code .    by combining lemma  [ th : m3 ] with ( * ? ? ?",
    "* corollary 6 ) , we get the following theorem .    [",
    "th : m3equal ] for @xmath73 and @xmath84 , the minimum distance @xmath123 .",
    "[ th : m4 ] the minimum distance @xmath125 , for @xmath73 and @xmath126 , is upper - bounded by @xmath127 .",
    "the proof follows the same main idea of the proof of lemma  [ th : m3 ] above using the template support matrix ( @xmath128 ) @xmath129\\ ] ] which we have found using the algorithm from @xcite .",
    "the remaining technical details are omitted for brevity .",
    "note that the template support matrix for @xmath124 given in fig .  3 in @xcite will fail to prove the above result , since the sorted ( in nondecreasing order ) sequence of column group indices has range @xmath130 for @xmath131 .",
    "as a consequence , the template matrix in fig .  3 in @xcite can only prove an upper bound of @xmath127 for @xmath132 .",
    "there is a codeword of weight @xmath127 in @xmath133 , @xmath84 , for all positive integers @xmath73 and cutting vectors @xmath54 if one of the following conditions are true .    1 .",
    "@xmath134 and @xmath135 .",
    "2 .   @xmath136 and @xmath137 .",
    "3 .   @xmath138 and @xmath139 .",
    "4 .   @xmath140 and @xmath141 .",
    "5 .   @xmath142 .    the proof is omitted due to lack of space .",
    "[ lem:1 ] the minimum distances @xmath143 and @xmath144 , for @xmath73 , are both upper - bounded by @xmath127 .",
    "for the case @xmath145 , the number of cutting vectors that satisfy none of the five conditions in proposition  [ prop:1 ] is only @xmath146 , while the total number of possible cutting vectors is @xmath147 .",
    "thus , by running the algorithm from @xcite , adapted to the case of sc codes , on these @xmath146 cases we have verified that there are indeed codewords of weight @xmath127 for all cutting vectors , and the result follows .    for @xmath148 ,",
    "there are no cutting vectors that satisfy none of the five conditions in proposition  [ prop:1 ] , from which it follows that @xmath149 for all positive integers @xmath73 .    by combining lemmas  [",
    "th : m4 ] and [ lem:1 ] , ( * ? ? ?",
    "* theorem 5 ) , and ( * ? ? ? * corollary  4.2 ) , we get the following theorem .    [",
    "th : m4real ] for @xmath73 and @xmath150 , the minimum distance @xmath151 .",
    "[ th : m5 ] the minimum distance @xmath152 , for @xmath73 and @xmath153 , is upper - bounded by @xmath154 .    the proof follows the same main idea of the proofs of lemmas  [ th : m3 ] and [ th : m4 ] above using the template support matrix from fig .  4 in @xcite , and is omitted for brevity .",
    "note that there appears to be no equivalent to proposition  [ prop:1 ] ( except for the last condition ) for @xmath7 , since the template support matrix from fig .  4 in @xcite ( which is used for the proof of theorem  [ th : m5",
    "] ) does not have the required structure . also , the algorithm from @xcite was not able to identify other nonequivalent template support matrices with a suitable structure .",
    "this has also been `` confirmed '' by the fact that for @xmath155 we have been able to identify a cutting vector that gives a minimum distance of @xmath156 ( see table  [ table : scarrayldpc ] ) .",
    "[ th : m5_1 ] the minimum distance @xmath152 , for @xmath73 and @xmath157 , is upper - bounded by @xmath158 .",
    "the proof follows the same main idea of the proofs of lemmas  [ th : m3 ] and [ th : m4 ] and theorem  [ th : m5 ] above using a template support matrix which was found using the algorithm from @xcite . due to lack of space , the actual template support matrix and the technical details of the proof",
    "are omitted .",
    "in this section , we present some numerical results for the cases @xmath50 , @xmath109 , and @xmath112 .      by performing an exhaustive search over all cutting vectors @xmath54 the optimal minimum distance",
    "@xmath159 was determined for @xmath160 ( see table  [ table : scarrayldpc ] ) . for each of these values of @xmath0 ,",
    "the @xmath8-optimal cutting vector is not unique , i.e. , there are several cutting vectors that give the best minimum distance . for instance",
    ", for @xmath49 , we found ( for @xmath161 ) the @xmath162-optimal ( where @xmath162 denotes stopping distance ) cutting vectors displayed in table  [ table : q5m3cutting ] .",
    "for each cutting vector , in the second and fourth columns we have tabulated the corresponding minimum and stopping distance , respectively .",
    "the corresponding multiplicities are tabulated in the third ( minimum distance ) and fifth ( stopping distance ) columns .",
    "note that the _ optimal _ cutting vector @xmath163 for @xmath164 and @xmath165 absorbing sets from @xcite is also optimal when it comes to minimum / stopping distance , since it gives the optimal minimum / stopping distance of @xmath127 .",
    "however , it gives slightly more stopping sets of size @xmath127 ( see table  [ table : q5m3cutting ] ) . on the other hand , for @xmath79 , the _ optimal _ cutting vector @xmath166 for @xmath164 and @xmath165 absorbing sets from @xcite",
    "is _ not _ optimal when it comes to minimum distance , since it gives a minimum distance of only @xmath85 ( the optimal minimum distance is @xmath167 ) . for @xmath168 ,",
    "@xmath8-optimal cutting vectors that also give the lowest possible minimum distance multiplicity , denoted as @xmath169-optimal cutting vectors , are displayed within the parentheses in the sixth column of table  [ table : scarrayldpc ] ( first and second row , respectively ) .    for @xmath84",
    ", it follows from theorem  [ th : m3equal ] that the optimal minimum distance is @xmath85 .",
    "also , all cutting vectors give a minimum distance of @xmath85 , but possibly with different multiplicities .",
    "-3.0ex    ccccc + [ -2.0ex ] @xmath54 & @xmath170 & mult . &",
    "@xmath171 & mult .",
    "+   + [ -2.0ex ] + [ -2.0ex ] @xmath172 & 10 & 20 & 10 & 65 + @xmath173 & 10 & 20 & 10 & 65 + @xmath174 & 10 & 19 & 10 & 59 + @xmath175 & 10 & 19 & 10 & 59 + @xmath176 & 10 & 20 & 10 & 65 + @xmath177 & 10 & 20 & 10 & 65      by performing an exhaustive search over all cutting vectors @xmath54 ( with the help of proposition  [ prop:1 ] to reduce the search space when @xmath178 ) the optimal minimum distance @xmath179 was determined for @xmath180 . for each of these values of @xmath0 ,",
    "the @xmath8-optimal cutting vector is not unique , i.e. , there are several cutting vectors that give the best minimum distance .",
    "for instance , for @xmath79 , we found ( for @xmath161 ) the @xmath162-optimal cutting vectors displayed in table  [ table : q7m4cutting ] .",
    "for each cutting vector , in the second and fourth columns we have tabulated the corresponding minimum and stopping distance , respectively .",
    "the corresponding multiplicities are tabulated in the third ( minimum distance ) and fifth ( stopping distance ) columns . for @xmath180 , the optimal minimum distance and",
    "corresponding @xmath169-optimal cutting vectors ( displayed within the parentheses ) are given in the fourth column of table  [ table : scarrayldpc ] ( the first eight rows , respectively ) .",
    "for @xmath150 , it follows from theorem  [ th : m4real ] that @xmath181 .",
    "-3.0ex    ccccc + [ -2.0ex ] @xmath54 & @xmath182 & mult .",
    "& @xmath183 & mult .",
    "+   + [ -2.0ex ] + [ -2.0ex ] @xmath184 & 14 & 30 & 14 & 401 + @xmath185 & 14 & 30 & 14 & 695 + @xmath186 & 14 & 29 & 14 & 393 + @xmath187 & 14 & 30 & 14 & 695 + @xmath188 & 14 & 30 & 14 & 401    -3.0ex    clclclc + [ -2.0ex ] @xmath0 & @xmath189 & @xmath190 & @xmath179 & @xmath191 & @xmath159 & @xmath192 +   + [ -2.0ex ] + [ -2.0ex ] 5 & & & @xmath193 @xmath194 & @xmath167 & @xmath193 @xmath195 & @xmath85 + 7 & @xmath196 @xmath197 & 12 & @xmath196 @xmath198 & @xmath167 & @xmath199 @xmath200 & @xmath85 + 11 & @xmath201 @xmath202 & 10 & @xmath196 @xmath203 & @xmath127 & @xmath204 & @xmath85 + 13 & @xmath205 @xmath206 & 12 & @xmath207 @xmath208 & @xmath127 & @xmath204 & @xmath85 + 17 & @xmath209 , @xmath201 , or @xmath205 @xmath210 & 12 & @xmath207 @xmath211 & @xmath127 & @xmath204 & @xmath85 + 19 & @xmath209 or @xmath201 @xmath212 & 12 & @xmath207 @xmath213 & @xmath127 & @xmath204 & @xmath85 + 23 & @xmath209 @xmath214 & 12 & @xmath207 @xmath215 & @xmath127 & @xmath204 & @xmath85 + 29 & @xmath216 @xmath217 & 12 & @xmath207 @xmath218 & @xmath127 & @xmath204 & @xmath85 + 31 & @xmath216 @xmath219 & 12 & @xmath193 & @xmath127 & @xmath204 & @xmath85 + 37 & @xmath216 @xmath220 & 12 & @xmath193 & @xmath127 & @xmath204 & @xmath85 + 41 & @xmath216 @xmath221 & 12 & @xmath193 & @xmath127 & @xmath204 & @xmath85 + 43 & @xmath216 @xmath222 & 12 & @xmath193 & @xmath127 & @xmath204 & @xmath85 + 47 & @xmath216 @xmath223 & 12 & @xmath193 & @xmath127 & @xmath204 & @xmath85 + 53 & @xmath196 @xmath224 & 12 & @xmath193 & @xmath127 & @xmath204 & @xmath85 + @xmath225 & @xmath207 & 12 & @xmath193 & @xmath127 & @xmath204 & @xmath85 + @xmath226 & @xmath193 or @xmath207 & 10 or 12 & @xmath193 & @xmath127 & @xmath204 & @xmath85      for @xmath79 , we have performed an exhaustive search over all possible cutting vectors .",
    "the optimal minimum distance @xmath227 is @xmath156 and a @xmath169-optimal cutting vector is displayed within the parentheses in the second column of table  [ table : scarrayldpc ] ( second row ) . for @xmath228 and @xmath229 ,",
    "the optimal minimum distance is as high as @xmath230 and @xmath231 , respectively , and @xmath8-optimal cutting vectors are shown within the parentheses in the second column of table  [ table : scarrayldpc ] ( third and fourth row , respectively ) . for @xmath232 and @xmath130 , upper and lower bounds on the optimal minimum distance , tabulated in the second column of table  [ table : scarrayldpc ] ,",
    "have been established from an exhaustive search over all cutting vectors .",
    "the displayed values are bounds since we were not able to exhaustively enumerate all codewords of weight at most @xmath233 , when @xmath234 , for a given cutting vector , for these two values of @xmath0 . within the parentheses a corresponding cutting vector ( which establishes the upper bound ) is also tabulated .",
    "the lower bounds were determined by running the algorithm from @xcite , adapted to the case of sc codes , for the specific cutting vectors displayed within the parentheses . for @xmath235 , the tabulated values ( in the second column of table  [ table : scarrayldpc ] )",
    "are again the exact values of @xmath189 and also ( within the parentheses ) @xmath8-optimal ( @xmath169-optimal for @xmath155 ) cutting vectors are displayed . for @xmath236 , @xmath237 , which follows from theorem  [",
    "th : m5 ] , ( * ? ? ?",
    "* table  i ) , and theorem  5 in @xcite . for @xmath238",
    ", it follows from theorem  [ th : m5 ] , corollary  4.4 in @xcite , and theorem  5 in @xcite that @xmath189 is either @xmath127 or @xmath154 , although we conjecture it to be @xmath154 .",
    "in this work , we have studied in detail the minimum distance of array - based sc - ldpc codes .",
    "several tight upper bounds on the optimal minimum distance for coupling length @xmath73 and @xmath4 , that are independent of @xmath0 and that are valid for all values of @xmath239 where @xmath6 depends on @xmath1 , have been presented .",
    "furthermore , we have conducted an exhaustive search over all cutting vectors for small values of @xmath0 ( @xmath4 ) which shows that by carefully selecting the cutting vector , the minimum distance ( when @xmath0 is not very large ) can be significantly increased , especially for @xmath7 .    an interesting topic for future work is to consider the correlation with absorbing sets . in particular , will a @xmath169-optimal cutting vector also be _ close - to - optimal _ when it comes to problematic absorbing sets , and/or vice - versa ?",
    "d.  g.  m. mitchell , l.  dolecek , and d. j. costello , jr .",
    ", `` absorbing set characterization of array - based spatially coupled ldpc codes , '' in _ proc .",
    "ieee int .",
    "inf .  theory ( isit ) _ , honolulu , hi , jun./jul .",
    "2014 , pp . 886890 .",
    "s.  kudekar , t.  richardson , and r.  l. urbanke , `` spatially coupled ensembles universally achieve capacity under belief propagation , '' _ ieee trans .  inf .",
    "theory _ , vol .",
    "59 , no .  12 , pp .",
    "77617813 , dec . 2013 .",
    "l.  dolecek , z.  zhang , v.  anantharam , m.  j. wainwright , and b.  nikolic , `` analysis of absorbing sets and fully absorbing sets of array - based ldpc codes , '' _ ieee trans .",
    "theory _ , vol .",
    "56 , no .  1 ,",
    "181201 , jan . 2010 .",
    "p.  bhagawat , m.  uppal , and g.  choi , `` fpga based implementation of decoder for array low - density parity - check codes , '' in _ proc .",
    "acoustics , speech , and signal processing ( icassp ) _ , vol",
    ".  5 , philadelphia , pa , mar .",
    "2005 , pp .",
    "a.  e. pusane , r.  smarandache , p.  o. vontobel , and d. j. costello , jr .",
    ", `` deriving good ldpc convolutional codes from ldpc block codes , '' _ ieee trans .  inf .",
    "theory _ , vol .",
    "57 , no .  2 ,",
    "835857 , feb .",
    "e.  rosnes ,  .",
    "ytrehus , m.  a. ambroze , and m.  tomlinson , `` addendum to `` an efficient algorithm to find all small - size stopping sets of low - density parity - check matrices '' , '' _ ieee trans .",
    "theory _ , vol .",
    "58 , no .  1 ,",
    "164171 , jan . 2012"
  ],
  "abstract_text": [
    "<S> an array low - density parity - check ( ldpc ) code is a quasi - cyclic ldpc code specified by two integers @xmath0 and @xmath1 , where @xmath0 is an odd prime and @xmath2 . </S>",
    "<S> the exact minimum distance , for small @xmath0 and @xmath1 , has been calculated , and tight upper bounds on it for @xmath3 have been derived . in this work , </S>",
    "<S> we study the minimum distance of the spatially - coupled version of these codes . in particular , several tight upper bounds on the _ optimal _ minimum distance for coupling length at least two and @xmath4 , that are independent of @xmath0 and that are valid for all values of @xmath5 where @xmath6 depends on @xmath1 , </S>",
    "<S> are presented . </S>",
    "<S> furthermore , we show by exhaustive search that by carefully selecting the _ edge spreading _ or _ unwrapping _ procedure , the minimum distance ( when @xmath0 is not very large ) can be significantly increased , especially for @xmath7 . </S>"
  ]
}