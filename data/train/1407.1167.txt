{
  "article_text": [
    "leader - follower games , which were introduced by von stackelberg in the far 1934  @xcite , have recently received a considerable attention from the computer science community .",
    "this is mainly due to the fact that the internet is a vast electronic market composed of millions of independent end - users ( i.e. , the followers ) , whose actions are by the way influenced by a limited number of owners of physical / logical portions of the network ( i.e. , the leaders ) , that can set the price for using their own network links . in particular , in a scenario in which the leaders know in advance that the followers will allocate a communication subnetwork enjoying some criteria ,",
    "a natural arising problem is that of analyzing how the leaders can optimize their pricing strategy .",
    "games of this latter type are widely known as _ stackelberg network pricing games _ ( snpgs ) .",
    "when only 2 players ( i.e. , a leader and a follower ) are involved , a snpg can be formalized as follows : we are given a graph @xmath0 , whose edge set is partitioned into a set @xmath1 of _ red _ edges and a set @xmath2 of _ blue _ edges , and an edge cost function @xmath8 for red edges only , while blue edges need instead to be priced by the leader . in the following , we assume that @xmath9 and @xmath10",
    ". then , the leader moves first and chooses a pricing function @xmath11 for her edges , in an attempt to _ maximize _ her objective function @xmath12 , where @xmath13 denotes the decision which will be taken by the follower , consisting in the choice of a subgraph of @xmath3 .",
    "this notation stresses the fact that the leader s problem is implicit in the follower s decision . once observed the leader s choice",
    ", the follower reacts by selecting a subgraph @xmath14 of @xmath3 which _ minimizes _ his objective function @xmath15 , parameterized in @xmath16 .",
    "note that the leader s strategy affects both the follower s objective function and the set of feasible decisions , while the follower s choice only affects the leader s objective function .",
    "quite naturally , we assume that @xmath17 is _ price - additive _ , i.e. , @xmath18 .",
    "this means , the leader decides edge prices having in mind that her revenue equals the overall price of her selected edges .",
    "therefore , the 2-player game can be equivalently thought ( as we will do in the rest of the paper ) as a _ bilevel _",
    "optimization problem in which an optimal value of @xmath17 has to be computed .",
    "[ [ previous - work . ] ] _ previous work . _",
    "+ + + + + + + + + + + + + + + +    the most immediate snpg is that in which we are given two specified nodes in @xmath3 , say @xmath19 , and the follower wants to travel along a _",
    "shortest path _ in @xmath3 between @xmath20 and @xmath21 ( see @xcite for a survey ) .",
    "this problem has been shown to be -hard  @xcite , as well as not approximable within a factor of @xmath22 unless @xmath23  @xcite , while an @xmath24-approximation algorithm is provided in  @xcite .",
    "for the case of multiple followers ( each with a specific source - destination pair ) , labb _ et al . _",
    "@xcite derived a bilevel lp formulation of the problem ( and proved -hardness ) , while grigoriev _",
    "@xcite presented algorithms for a restricted shortest path problem on parallel edges .",
    "furthermore , when all the followers share the same source node , and each node in @xmath3 is a destination of a single follower , then the problem is known as the _ stackelberg single - source shortest paths tree _ game . in this game ,",
    "the leader s revenue for each selected edge is given by its price multiplied by the number of paths  emanating from the source  it belongs to , and in @xcite it was proved that finding an optimal pricing for the leader s edges is -hard , as soon as @xmath25 .",
    "another basic snpg , which is of interest for this paper , is that in which the follower wants to use a _ minimum spanning tree _",
    "( mst ) of @xmath3 . for this game , known as _ stackelberg mst _ ( ) game , in @xcite the authors proved the -hardness already when the number of red edge costs is 2 , and gave a @xmath26-approximation algorithm , where @xmath27 is the number of distinct red costs",
    ", @xmath28 is the number of blue edges selected by the follower in an optimal pricing , and @xmath29 is the maximum ratio between red costs . in a further paper @xcite",
    ", the authors proved that the problem remains -hard even if @xmath3 is planar , while it can be solved in polynomial time once that @xmath3 has bounded treewidth .",
    "we point out that a structural property about , which will also hold for our generalized version we are going to present , is that the hardness in finding an optimal solution lies in the selection of the optimal set of blue edges that will be purchased by the follower , since once that a set of blue edges is part of the final mst , then their best possible pricing can be computed in polynomial time , as shown in  @xcite .",
    "notice that all the above examples fall within the class of snpgs handled by the general model proposed in @xcite , encompassing all the cases where each follower aims at optimizing a polynomial - time network optimization problem in which the cost of the network is given by the sum of prices and costs of contained edges .",
    "nevertheless , snpgs for models other than this one have been studied in  @xcite .    [",
    "[ our - results . ] ] _ our results .",
    "_ + + + + + + + + + + + + + +    in this paper we analyze some meaningful specializations and generalizations of , which shed some more light on the computational complexity of the game . for the sake of presenting our results in a unifying framework , we start by defining the aforementioned generalized version of .",
    "first of all , notice that given any instance of , this can be simplified into an equivalent instance in which we compute a red mst of @xmath3 , and then we discard all the red edges not belonging to it ( see also @xcite ) . then , the _ budgeted _  game is a 2-player game defined as follows .",
    "we are given a tree @xmath30 of @xmath31 nodes where each ( red ) edge @xmath32 has a fixed non - negative cost @xmath33 . moreover , we are given a non - negative _ activation cost _",
    "@xmath34 for each ( blue ) edge @xmath35 , and a budget @xmath36 .",
    "the game , denoted by @xmath37 , consists of two phases . in the first phase the leader selects a set @xmath38 of edges to add to @xmath39 such that the budget is not exceeded , i.e. , @xmath40 , and then prices them with a price function @xmath41 having in ming that , in the second phase , the follower will take the weighted graph @xmath42 resulting from the first phase , and will compute a mst @xmath43 of @xmath3 .",
    "then , the leader will collect a revenue of @xmath44 .",
    "our goal is to find a strategy for the leader which maximizes her revenue .",
    "notice that using this more general definition , the original  game can be rephrased as a @xmath37 game in which @xmath39 is any red mst of @xmath3 , @xmath36 is equal to 0 , and the activation cost for an edge not in @xmath45 is equal to 0 if it belongs to @xmath2 , otherwise it is equal to any positive value .    in this paper , we prove the following results :    1 .",
    "@xmath46 with only 2 distinct red costs can be solved optimally , where the first 0 in the argument is used to denote the fact that @xmath47 is identically equal to 0 ; in other words , this is a special case of   with only two red edge costs in which the input graph is complete ; 2 .",
    "@xmath46 can be approximated within @xmath48 , for any @xmath5 when the red edges form a path ; 3 .",
    "@xmath46 can be approximated within @xmath49 , for any @xmath5 , in general ; 4 .",
    "@xmath37 admits a @xmath50-approximation algorithm , for any @xmath51 , where @xmath27 , @xmath28 and @xmath29 are as previously defined for , and @xmath6 denotes the _ radius _ of @xmath39 w.r.t .",
    "the number of edges , once @xmath39 is rooted at its center .",
    "we point out that all the above problems have an application counterpart , since the @xmath46 class of problems models the case in which the leader retains the potentiality to activate ( at no cost ) any missing connection in the network , while clearly result ( 4 ) complements the approximation ratio given in  @xcite whenever the radius of the red tree is bounded , which might well happen in practice .",
    "finally , notice also that @xmath46 is a specialization of the general , for which however we were not able to prove whether the problem is in @xmath52 or not .",
    "therefore , this remains a challenging open problem .",
    "the rest of the paper is organized by providing each of the above results in a corresponding section , followed by a concluding section listing some interesting problems left open .",
    "in this section we present an exact polynomial - time algorithm for @xmath46 when the cost of any red edge belongs to the set @xmath53 , with @xmath54 .",
    "notice that this case is already -hard for @xcite . for the sake of clarity",
    ", we will first present the algorithm and the analysis when the red tree is actually a path .",
    "the extension to the general case will be derived in the subsequent subsection .",
    "now , we present an exact algorithm for @xmath46 on a red path @xmath55 with costs in @xmath53 , with @xmath54 .",
    "we call a subpath @xmath56 of @xmath55 an _ @xmath57-block _",
    "if @xmath56 has all edges of cost @xmath57 , and @xmath56 is maximal ( w.r.t .",
    "inclusion ) .",
    "we say that an @xmath57-block is _ good _ if its length is greater than or equal to 3 , _ bad _ otherwise .",
    "let @xmath58 be the number of bad blocks of @xmath55 .",
    "we first present an algorithm achieving a revenue of @xmath59 , where @xmath60 denotes the sum of costs of edges of @xmath55 , and then we show that such a revenue is actually an upper bound to the optimal revenue .    for technical convenience ,",
    "we only consider instances where @xmath55 has at least @xmath61 edges . clearly , the solutions for the remaining instances can be easily computed .",
    "the algorithm uses the following four rules .",
    "each rule considers a subpath of @xmath55 and specifies a feasible solution for the subpath , i.e. , a set of blue edges incident to the vertices of the subpath with a corresponding pricing .",
    "the solutions corresponding to the rules are shown in figure [ fig : a - b - path_rules ] .",
    "rule 1 : : :    let @xmath56 be a subpath of @xmath55 containing only    one @xmath57-block , and this @xmath57-block is good . we    can obtain revenue @xmath62 from @xmath56 by adding    blue edges only within @xmath56 . rule 2 : : :    let @xmath56 be a subpath of @xmath55 containing only    one @xmath57-block and this @xmath57-block is bad . we    can compute a solution with revenue @xmath63 from    @xmath56 .",
    "rule 3 : : :    let @xmath56 be a subpath of @xmath55 containing one    @xmath57-block , and this @xmath57-block is the last bad    block of @xmath55 .",
    "moreover @xmath56 has at least one    more edge of cost @xmath64 that either precedes or follows the    @xmath57-block .",
    "we can obtain a revenue of    @xmath65 from @xmath56 by using a star of    blue edges centered at the left or right endvertex of @xmath55 ,    depending on the position of the edge of cost @xmath64 .",
    "notice    that the endvertices of @xmath56 might be followed by other    good blocks .",
    "rule 4 : : :    let @xmath66 be two edge - disjoint subpaths of    @xmath55 each containing only one @xmath57-block .",
    "assume    that both @xmath57-blocks are bad and @xmath67    contains an edge of cost @xmath64 whose removal separates the    two @xmath57-blocks .",
    "we can obtain a revenue of    @xmath68 from @xmath67 and    @xmath69 .",
    "notice that @xmath67 and @xmath69    do not need to be adjacent .     a path of @xmath70 edges each having a cost of @xmath71 .",
    "an edge with label @xmath72\\eta$ ] represents @xmath73 blue edges each having a price of @xmath71 .",
    "observe that , except for rule 2 , all red ( path ) edges with cost @xmath57 will be discarded by the follower .",
    "concerning rule 2 , the follower will select only a single red edge of cost @xmath57 ( of the shown subpath ) .",
    "the left endvertex of the path of rule 3 corresponds to one endvertex of @xmath55 . ]",
    "our algorithm is as follows .",
    "if @xmath74 then we split @xmath55 into subpaths each of them containing exactly one @xmath57-block .",
    "then we apply rule 1 or rule 2 to each subpath , depending on whether the @xmath57-block in the subpath is good or bad . hence",
    ", this solution yields a revenue of @xmath75 .",
    "now , consider the case @xmath76 .",
    "let @xmath77 be the bad @xmath57-blocks contained in @xmath55 from left to right w.r.t one of the endvertices .",
    "we first consider the case where @xmath78 , i.e. , there are at least two bad blocks .",
    "the algorithm splits @xmath55 into subpaths such that ( i ) each subpath contains exactly one @xmath57-block , ( ii ) for every @xmath79 , subpath containing @xmath80 has an edge of cost @xmath64 incident to its right endvertex , and ( iii ) if @xmath58 is odd , the subpath containing @xmath81 has an edge of cost @xmath64 incident to its left endvertex .. ] let @xmath82 be the subpath containing @xmath83 .",
    "the algorithm uses rule 4 for every pairs of subpaths @xmath84 , @xmath85 , and rule 1 for every subpath containing a good @xmath57-block . finally , if @xmath58 is odd , we apply rule 3 for @xmath86 when @xmath87 ( we can apply rule 3 since property ( iii ) above holds ) , while we use rule 2 when @xmath88 . it is easy to see that the revenue of this solution coincides with @xmath89 .",
    "concerning the case @xmath90 , then either @xmath55 has no bad blocks , and then a revenue of @xmath60 can be obtained , or there exists only one bad block @xmath91 . in this latter case :    * if @xmath92 , let @xmath56 be any subpath containing @xmath91 ; then , solve @xmath56 using rule 2 .",
    "* otherwise , if @xmath93 , let @xmath56 be a subpath containing @xmath91 and a suitable additional edge of cost @xmath64 ; then , use rule 3 on @xmath56 .",
    "finally , split @xmath94 into subpaths , each contaning one good @xmath57-block , and solve them using rule 1 . by doing",
    "so we obtain a revenue of @xmath95 .",
    "now , we show that the revenue computed by the above algorithm is the optimal revenue @xmath96 :    [ thm : ub for a - b path ] @xmath97 .",
    "let @xmath98 be the number of red edges of cost @xmath57 .",
    "let @xmath99 be the tree computed by the follower w.r.t .",
    "an optimal solution .",
    "moreover , let @xmath100 and @xmath101 be the bad and the good blocks of @xmath55 , respectively .",
    "we denote by @xmath102 and @xmath103 the number of edges of @xmath83 and @xmath104 , respectively . moreover ,",
    "for an edge @xmath105 , @xmath106 will denote the unique path in @xmath99 between @xmath107 and @xmath108 ( observe that @xmath106 may be the path containing only edge @xmath109 ) .",
    "for each @xmath110 and @xmath111 , consider the _",
    "@xmath112 , and the _ good tree _",
    "let @xmath114 .",
    "observe that for each @xmath115 , we have : ( i ) @xmath116 and @xmath117 are trees and every edge has cost @xmath57 , ( ii ) @xmath118 and @xmath119 , and ( iii ) @xmath120 , or @xmath116 contains at least @xmath121 edges .",
    "let us consider the following graph @xmath122 , and let @xmath123 be the number of nodes of @xmath124 .",
    "clearly , @xmath124 is a forest .",
    "moreover , each connected component of @xmath124 is either a single tree of @xmath125 or it consists of the union of at least two trees in @xmath125 .",
    "let us consider the set @xmath126 of `` unmerged '' bad trees , i.e. , @xmath127 .",
    "we define @xmath128 .",
    "observe that each tree in @xmath126 is in the set @xmath129 of connected components of @xmath124 .",
    "let @xmath21 be the number of the remaining connected components of @xmath124 , i.e. , @xmath130 .",
    "as each bad tree not in @xmath126 has been merged with some other tree , we have @xmath131 .    in order to relate @xmath21 to the number @xmath123 of nodes of @xmath124",
    ", we define @xmath132 .",
    "notice that @xmath133 is a lower bound to the number of red edges in @xmath124 .",
    "we now give a lower bound to @xmath123 .",
    "since @xmath124 spans all @xmath57-blocks ( which are pairwise vertex disjoint ) , and since property ( iii ) holds , we have that @xmath134 . therefore , since @xmath124 has @xmath135 edges of cost @xmath57 , and using @xmath136 , we have : @xmath137 to see why the latter inequality holds , one can consider the different parity of @xmath58 and @xmath138 for each of the following three cases : @xmath74 , @xmath139 , and @xmath140 .",
    "hence , from the above lemma , we have :    @xmath46 can be solved in polynomial time when the red edges form a path and their costs are in @xmath53 .",
    "we now extend the previous result by providing an optimal polynomial - time algorithm for @xmath46 when the red costs belong to the set @xmath53 , and @xmath39 is a tree .",
    "let @xmath54 , and let @xmath39 be a red tree with costs in @xmath53 . in a similar fashion as before , we call a subtree @xmath141 of @xmath39 an _ @xmath57-block _",
    "if @xmath141 has all edges of cost @xmath57 , and @xmath141 is maximal ( w.r.t .",
    "inclusion ) .",
    "we say that an @xmath57-block is _ bad _ if it is a star , _ good _ otherwise .",
    "let @xmath58 be the number of bad blocks of @xmath39 .",
    "as the upper bound to the maximum revenue @xmath96 shown in lemma  [ thm : ub for a - b path ] still holds , we now present a general algorithm achieving a revenue equal to the given upper bound .",
    "the four rules used by the algorithm are similar to the ones used in the algorithm for the path and they are shown in figure [ fig : a - b - tree_rules_1 ] and [ fig : a - b - tree_rules_2 ] , along with the corresponding revenues .    our algorithm is as follows .",
    "if @xmath74 , then we split @xmath39 into subtrees , each of them containing exactly one @xmath57-block .",
    "then we apply rule 1 or rule 2 to each subtree , depending on whether the @xmath57-block in the subtree is good or bad .",
    "clearly , this solution yields a revenue of @xmath142    . ]    .",
    "notice that in rule 4 , while there is a blue edge between @xmath107 and @xmath143 , there is no edge between @xmath108 and @xmath144 . ]    now , consider the case @xmath76 .",
    "let @xmath145 be the bad @xmath57-blocks contained in @xmath39 .",
    "the algorithm splits @xmath39 into subtrees such that ( i ) each subtree contains exactly one @xmath57-block , ( ii ) there exists a permutation @xmath146 of the bad @xmath57-blocks such that for every @xmath79 , subtree containing @xmath147 has an edge of cost @xmath64 along the ( unique ) path joining @xmath147 with @xmath148 , and ( iii ) if @xmath58 is odd , the subtree containing @xmath149 has an edge of cost @xmath64 .",
    "let @xmath116 be the subtree containing @xmath150 .",
    "the algorithm uses rule 4 for every pair of subtrees @xmath151 , @xmath152 , rule 1 for every subtree containing a good @xmath57-block .",
    "finally , if @xmath58 is odd , we apply rule 3 for @xmath153 when @xmath87 , while we use rule 2 when @xmath88 . from this , we have :    @xmath46 can be solved in polynomial time when red edge costs are in @xmath53 .",
    "here we design a @xmath154-approximation algorithm for @xmath46 when the tree @xmath39 is actually a path , say @xmath55 .",
    "let then @xmath55 be the path of red edges .",
    "the idea of the algorithm is to consider three possible solutions and pick the best one .",
    "we will argue that the revenue of such a solution is at least a fraction @xmath155 of the cost of almost the entire path .",
    "more precisely , we select a cheap subpath @xmath156 of @xmath55 of length 2 or 3 , and we then compute a solution achieving a revenue of at least @xmath157 .",
    "let @xmath158 be the length of @xmath55 , and let @xmath159 be the red edges of @xmath55 in the order of traversing @xmath55 from an endpoint to the other one .",
    "moreover , let us set @xmath138 to 2 , if @xmath160 is even , and to 3 otherwise .",
    "let @xmath82 be the subpath of @xmath55 of length @xmath138 starting from @xmath161 , i.e. , @xmath82 consists of the edges @xmath162 .",
    "let @xmath156 be the subpath with minimum cost among @xmath163 , @xmath164 .",
    "if we remove @xmath156 from @xmath55 , we obtain two paths of even length , say @xmath165 and @xmath166 . at most one of @xmath165 and @xmath166",
    "may be empty .",
    "let us assume for the ease of presentation that both paths are non - empty ( similar arguments hold when this does not happen ) , and let @xmath167 and @xmath168 be the length of @xmath165 and @xmath166 , respectively",
    ". moreover , let @xmath169 and @xmath170 be the nodes of @xmath165 and @xmath166 , respectively .",
    "the two end - nodes of @xmath156 are @xmath171 and @xmath172 .",
    "let @xmath173 and @xmath174 .",
    "finally , let @xmath144 be an internal node of @xmath156 ( see figure [ fig : path ] ) .",
    "consists of 2 edges . ]",
    "let @xmath175 , and let @xmath176 .",
    "notice that @xmath177 .",
    "the first solution we consider is @xmath178    and the price function is defined as @xmath179 , and @xmath180 .",
    "notice that this solution obtains a revenue @xmath181 .",
    "the second solution is a star centered in the node @xmath144 ; more precisely : @xmath182    and the prices are defined as @xmath183 , and @xmath184 .",
    "notice that this solution obtains a revenue of @xmath185    finally , the third solution is the following : @xmath186    and the pricing is as follows : @xmath187 , @xmath188 , and @xmath189 .",
    "hence , the corresponding revenue is : @xmath190    hence , we have : @xmath191    from which it follows that the revenue @xmath192 is at least @xmath193 .",
    "now , observe that by construction we have    @xmath194    and hence @xmath195 .",
    "denoting by @xmath96 the optimal revenue , and observing that the cost of the red tree is always an upper bound to @xmath96 , we then have @xmath196    we have proved the following :    @xmath46 can be approximated within a factor of @xmath197 , for any @xmath198 , when the red edges form a path .",
    "we point out that our algorithm is asymptotically tight with respect to the adopted upper - bound scheme .",
    "an example is the path in which @xmath199 , and @xmath200 , for every @xmath201 .",
    "it is easy to see that for this path the revenue obtained by an optimal solution is 2 , while the total cost of the path is 3 .",
    "in this section we design an algorithm that achieves an approximation ratio of @xmath202 for the general @xmath46 game .",
    "the idea of the algorithm is to partition the red tree into suitable subtrees for which we can guarantee a revenue of at least @xmath203 of the cost of each one of them .",
    "let @xmath30 be the red tree .",
    "we say that @xmath204 is a partition of @xmath39 into @xmath138 subtrees if ( i ) each @xmath116 is a subtree of @xmath39 , ( ii ) @xmath205 , and ( iii ) for each @xmath206 , @xmath207 .",
    "it is easy to see that once @xmath39 is partitioned into subtrees as specified above , we can solve locally a @xmath46 game for each red subtree of the partition , and then solve the original problem by joining together all the local solutions ( by maintaining the corresponding pricing ) .",
    "indeed , the union of all the trees associated with the local solutions is clearly a spanning tree of @xmath3 .",
    "hence , we can claim the following    [ lm : decomposition_property ] let @xmath208 be a partition of @xmath39 into @xmath138 subtrees . for each @xmath73 , let @xmath209 be the revenue returned by a local solution of @xmath116 . then",
    ", the revenue which can be obtained for @xmath39 is at least @xmath210 .",
    "moreover , we can prove the following :    [ lm : decomposition_alg ] let @xmath39 be a tree rooted at a node @xmath20 .",
    "there always exists a partition of @xmath39 into @xmath138 subtrees @xmath208 such that    * @xmath211 has at most 2 edges and at least one of them is incident to @xmath20 ; * for every @xmath212 , @xmath213 is either ( i ) a path of 3 or 4 edges , or ( ii ) a star with at least 3 edges .    moreover , this partition can be found in polynomial time .",
    "we provide a polynomial - time algorithm that finds the partition of the lemma .",
    "let @xmath214 denote the depth of @xmath215 in @xmath39 , i.e. , the number of edges of the path ( in @xmath39 ) between @xmath20 and @xmath215 .",
    "we denote by @xmath216 the set of the children of @xmath215 .",
    "moreover , we use @xmath217 to denote the parent of @xmath215 . we proceed in phases . in phase @xmath218",
    ", we find a subtree @xmath213 by applying one of the rules below ( we consider them in order ) , then we remove @xmath213 from @xmath39 and we move to the next phase .",
    "we stop when no rule can be applied .",
    "let @xmath219 be the set of leaves of @xmath39 with depth equal to the current height of @xmath39 .",
    "the rules are the following ( see figure [ fig : rules ] ) :    rule 1 : : :    if there exists a node @xmath220 with    @xmath221 and such that @xmath215 has at least one    sibling , then @xmath213 is the star with edge set    @xmath222 ; rule 2 : :    if there exists a node @xmath220 with    @xmath221 such that @xmath217 has a sibling    @xmath223 and @xmath223 is a leaf , then @xmath213    is the path with edge set    @xmath224 ; rule 3 : : :    if there exists a node @xmath220 with    @xmath221 such that @xmath217 has a sibling    @xmath223 and @xmath223 is not a leaf , then let    @xmath225 be the unique child of @xmath223    ( @xmath225 must be unique otherwise rule 1 would apply ) . then ,    @xmath213 is the path with edge set    @xmath226 ; rule 4 : : :    if there exists a node @xmath220 with    @xmath227 , then @xmath213 is the path with edge    set    @xmath228 ; rule 5 : : :    if @xmath39 is a star with at least 3 edges , then    @xmath229 .",
    "now , assume that the last phase is phase @xmath230 , then we set @xmath211 equal to the remaining tree @xmath39 .",
    "if there is no edge left , we set @xmath211 equal to the empty subtree .",
    "it is easy to see that if @xmath211 is non - empty , it must have at most 2 edges , and one of them must be incident to @xmath20 . moreover , since each phase takes polynomial time and each @xmath213 with @xmath231 contains at least one edge , the claim follows .        the following lemmas allow us to obtain a revenue of at least @xmath232 for each subtree @xmath233 , of the decomposition .",
    "[ lm : star ] let @xmath234 be a star with at least 3 edges , then we can obtain a revenue of at least @xmath235 .",
    "let @xmath20 be the center of the star , and let @xmath236 be the leaves ordered such that @xmath237 .",
    "the set of blue edges @xmath238 yields a revenue of @xmath239 , since @xmath240 .",
    "[ lm : path ] let @xmath55 be a path of 3 or 4 edges , then we can obtain a revenue of at least @xmath241 .",
    "let us consider the path of 3 edges first .",
    "let @xmath242 be the edge costs .",
    "if the cost of the middle edge is @xmath243 , we can easily obtain a revenue of @xmath244 .",
    "assume that the cost of the middle edge is not @xmath243 . in figure",
    "[ fig : path3_4 ] three solutions are shown .",
    "the corresponding revenues are : @xmath245 .",
    "a trivial calculation shows that the maximum of the three revenues is at least @xmath246 .",
    "now , we consider a path of 4 edges .",
    "let @xmath247 be the costs of the edges from left to right .",
    "we set @xmath248 .",
    "assume w.l.o.g .",
    "that @xmath249 .",
    "three solutions are shown in figure [ fig : path3_4 ] .",
    "the corresponding revenues are : @xmath250 , the maximum of which is easy to see to be at least @xmath241 .",
    "we are now ready to prove the following :    @xmath46 can be approximated within a factor of @xmath202 , for any constant @xmath198 .",
    ", we can restrict ourselves to the case @xmath251 , since otherwise to find an optimal solution we can always use an exhaustive search algorithm that tries all the possible sets of blue edges and prices them at the optimum ( remember this can be done in polynomial time @xcite ) . for each @xmath215 , let @xmath252 .",
    "we root @xmath39 at a node @xmath20 minimizing @xmath253 .",
    "then we decompose @xmath39 using the algorithm given in lemma [ lm : decomposition_alg ] , and we solve locally each @xmath213 with @xmath254 .",
    "let @xmath255 be the corresponding obtained revenue , and observe that @xmath256",
    ".    as lemma  [ lm : decomposition_property ] together with lemmas  [ lm : star ] and  [ lm : path ] implies that the total revenue @xmath257 is at least @xmath258 , and since @xmath259 , we obtain    @xmath260",
    "in this section , we study the general @xmath37 .",
    "first , we will argue that for this generalized version , the very same approximation ratio as that of the original game can be achieved , since the _ single - price algorithm _ defined in @xcite can be easily adapted to provide an approximation of @xmath261 for @xmath37 as well , where @xmath27 is the number of distinct red costs , @xmath28 is the number of blue edges selected by the follower in an optimal solution , and @xmath29 is the maximum ratio between red costs .",
    "then we focus on the case in which @xmath39 is a tree of radius @xmath6 ( measured w.r.t .",
    "the number of edges ) once rooted at its center .",
    "for this case , we show that the problem remains -hard even for constant values of @xmath6 , as well as approximable within a factor of @xmath262 .",
    "let @xmath27 denote the number of distinct red costs , and let @xmath263 denote these costs . to extend the single - price algorithm , we proceed as follows .",
    "we consider the complete graph consisting of the union of the red tree and all the potential blue edges . for each @xmath218 between @xmath264 and @xmath27 , we set the price of every potential blue edge to @xmath265 , and we compute a spanning tree by a slightly modification of kruskal s algorithm as follows . in the phase in which the algorithm considers all the edges of cost @xmath265 , we break tightness in favor of blue edges , and among the blue edges , we prefer those with smaller activation cost .",
    "as soon as we consider a blue edge exceeding the budget @xmath36 , we delete that edge and all the remaining blue edges , and we go on with kruskal s algorithm . the solution for",
    "a given @xmath218 will be the set of all picked blue edges which will be priced to @xmath265 .",
    "then we pick @xmath218 such that the corresponding revenue is maximum , and we return the corresponding solution .",
    "it turns out that the same analysis given in @xcite can be applied here .",
    "hence , we have :    the above algorithm achieves an approximation ratio of @xmath266 for @xmath37 .",
    "we now study @xmath37 when @xmath39 is a tree that once rooted at its center , say @xmath172 , has height / radius @xmath6 .",
    "first , we observe that the reduction the authors in  @xcite used to prove that @xmath267 is -hard already when @xmath39 is a path can be modified to show the following :    @xmath267 is -hard even if @xmath39 is a star",
    ".    we show an approximation - preserving reduction from @xmath267 for the case in which @xmath39 is a path to @xmath267 for the case in which @xmath39 is a star .",
    "our reduction works only for the hard instances constructed in  @xcite .",
    "the hard instances given in  @xcite are constructed from instances of the _ set cover problem _ in the following way .",
    "let @xmath268 be a set of objects and let @xmath269 be a set of subsets of @xmath270 such that @xmath271 , for every @xmath272 .",
    "@xmath39 is a path of @xmath273 vertices @xmath274 with edge set @xmath275 .",
    "the fixed cost @xmath33 of an edge @xmath32 is @xmath276 if @xmath277 or @xmath278 , 1 otherwise .",
    "let @xmath279 be the set of blue edges .",
    "our reduction works as follows .",
    "we take the above hard instance for @xmath267 on red paths , we add a vertex @xmath172 and we replace the red tree @xmath39 by a star of red edges centered at @xmath172 .",
    "let @xmath141 denote the star of red edges .",
    "the fixed cost @xmath280 of an edge @xmath109 is 2 if @xmath281 , 1 otherwise .",
    "first observe that for every @xmath282 , @xmath283 is acyclic iff @xmath284 is acyclic .",
    "let @xmath282 be a set of blue edges such that @xmath283 is acyclic .",
    "the revenue yielded by @xmath38 in both instances of @xmath267 is the same , as the price of an edge @xmath285 in both instances is 2 iff @xmath286 is the only edge in @xmath38 which is incident to @xmath287",
    ". the claim follows .    in the remaining of the section",
    "we will show the existence of a @xmath7-approximation algorithm . before starting ,",
    "recall that once that a set @xmath38 of activated edges is part of the final mst , then the optimal pricing for each @xmath288 can be computed in polynomial time , as observed in ( see  @xcite ) .",
    "more precisely , this can be done by computing efficiently @xmath289 where @xmath290 is the set of ( simple ) cycles containing edge @xmath109 in the graph @xmath291 . with a little abuse of notation , in the following",
    "we will denote by @xmath292 the revenue yielded by the above optimal pricing @xmath293 .",
    "the main idea of the algorithm is to reduce the problem instance to @xmath6 instances in which the red trees are stars . with a little abuse of notation , in each of the @xmath6 instances ,",
    "the leader is sometimes allowed to activate edges which are parallel to red edges .",
    "we denote by @xmath294 the set of vertices at level @xmath73 in @xmath39 , and by @xmath295 the set of edges in @xmath39 going from vertices in @xmath296 to their parents .",
    "let @xmath116 be a red star obtained by identifying all red edges in @xmath39 but those in @xmath295 . with a little abuse of notation , when edge @xmath297 is identified , and w.l.o.g .",
    "@xmath223 is the parent of @xmath215 , we assume that the corresponding vertex is labeled with @xmath223 . thus , according to this assumption , we have that @xmath116 is a star centered at @xmath172 with @xmath298 as leaves .",
    "the cost of a red edge @xmath299 in @xmath116 is @xmath300 , where @xmath223 is the parent of @xmath215 in @xmath39 .",
    "let @xmath301 be the connected components in @xmath302 .",
    "w.l.o.g . , assume @xmath303 .",
    "let @xmath304 be a blue edge connecting @xmath305 and @xmath306 with cheapest activation cost .",
    "let @xmath307 . notice that this set contains edges that the leader can activate in the original instance of the problem .",
    "we now map them to their counterpart in @xmath116 , namely let @xmath308 be the set of blue edges the leader is allowed to activate in @xmath116 .",
    "the activation cost of an edge @xmath309 is @xmath310 .",
    "the auxiliary instance corresponding to level @xmath73 is shown in figure [ fig:2_h_approx ] .     corresponding to level @xmath73 .",
    "vertices in the tree @xmath311 are identified .",
    "when two or more edges between the same two trees are present , only the one with smallest activation cost is preserved . ]",
    "let @xmath312 be an optimal solution for the leader on input instance @xmath39 and let @xmath313 be the corresponding edges in @xmath116 .",
    "let @xmath314 , and denote by @xmath315 the set of connected components of @xmath316 .",
    "we start by proving an upper bound on the revenue yielded by @xmath312 .",
    "[ lm : upper bound on the leader s revenue ] @xmath317 . ]    observe that for every @xmath318 not containing vertex @xmath172 , at least one red edge @xmath299 , for some @xmath319 , has to be contained in any mst of @xmath320 .",
    "thus , for some @xmath319 , at least one edge @xmath297 where @xmath223 is the parent of @xmath215 in @xmath39 has to be contained in any mst of @xmath321 . as @xmath300 , the claim follows by summing over all components @xmath322 for all @xmath73 s .",
    "the key idea of our algorithm is to find a set @xmath38 of blue edges whose overall activation cost does not exceed the budget , and such that @xmath323 is a forest of stars .",
    "more precisely , for every @xmath324 , the algorithm first finds a set @xmath325 such that @xmath326 and @xmath327 is a forest of stars ; then , it considers the set @xmath328 of the corresponding blue edges for the original instance .",
    "observe that ( i ) @xmath329 is still a forest of stars and ( ii ) the overall activation cost of the edges in @xmath330 equals that of the edges in @xmath331 .",
    "furthermore , using equation  ( [ eq : optimal pricing for set of leader s edges ] ) , we can derive the following lemma , which claims that when we map @xmath332 back to @xmath330 the obtained revenue can not decrease :    [ lm : converted solution ] @xmath333 .",
    "we now give a lower bound of the revenue that can be obtained from @xmath332 .",
    "the bound trivially follows from ( [ eq : optimal pricing for set of leader s edges ] ) :    [ lm : revenue of a blue star ] let @xmath334 .",
    "then , @xmath335 .",
    "next lemma essentially shows that there exists a solution for @xmath116 which is a forest of stars yielding a revenue of at lest a half of the optimal revenue for @xmath116 .",
    "[ lm : decomposition of cycle trees ] let @xmath336 and let @xmath337 .",
    "there exists a polynomial time algorithm that finds two sets @xmath338 and @xmath339 such that ( i ) @xmath340 , ( ii ) both @xmath341 and @xmath342 are forests of stars , and ( iii ) @xmath343 .",
    "let @xmath344 be the graph induced by edge set @xmath345 .",
    "let @xmath346 be any of the @xmath21 connected components in @xmath344 , and let @xmath347 be any spanning tree in @xmath346 . as @xmath347 is a bipartite graph , it is possible to partition the set of its vertices into two sets @xmath348 and @xmath349 in polynomial time .",
    "moreover , by the connectivity of @xmath347 , every vertex @xmath350 ( @xmath351 ) is adjacent to some vertex in @xmath352 , and thus it is easy to find a set @xmath353 of edges in @xmath347 such that @xmath354 is a forest of stars with centers in @xmath355 and leaves in @xmath352 .",
    "therefore , for @xmath356 , @xmath357 are two sets of edges satisfying ( i ) and ( ii ) . furthermore , @xmath358 . as a consequence , from lemma  [ lm : revenue of a blue star ] , ( iii )",
    "is also satisfied .    to compute @xmath331 , the algorithm does the following .",
    "our algorithm uses the well - known @xmath359 for the _ knapsack problem _ to compute a @xmath360-approximate solution @xmath287 for the following instance of knapsack . for each @xmath361 , consider the blue edge @xmath362 incident to @xmath361 with cheapest activation cost .",
    "we create an object @xmath363 of profit @xmath364 and volume @xmath365 ; we say that @xmath109 is associated with the object @xmath363 . finally , the volume of the knapsack is @xmath36 .",
    "denote by @xmath366 the input instance of knapsack .",
    "the solution @xmath287 for @xmath366 identifies a set of blue edges , namely @xmath367 .",
    "the algorithm then uses the decomposition algorithm described in lemma  [ lm : decomposition of cycle trees ] to find two subsets of edges @xmath338 and @xmath339 , and then it sets @xmath331 to @xmath338 if @xmath368 , and to @xmath339 otherwise .",
    "the pseudocode of the algorithm is given in algorithm  [ alg : knapsack like algorithm ] .",
    "compute a @xmath360-approximate solution @xmath287 for the knapsack instance @xmath366    @xmath369    compute @xmath338 and @xmath339 w.r.t . @xmath345 as explained in lemma  [ lm : decomposition of cycle trees ]    @xmath328    the best of the @xmath330 s    algorithm  [ alg : knapsack like algorithm ] computes a @xmath7-approximate solution in polynomial time for @xmath37 , for any constant @xmath198 .",
    "remind that @xmath370 , where @xmath371 are obtained by mapping the edges of an optimal solution @xmath312 to the blue edges of the auxiliary instance @xmath116 . in order to show a lower bound for the profit of the optimal solution of @xmath366",
    ", we define a feasible solution @xmath372 as follows : for each connected component @xmath124 of @xmath316 , let @xmath373 be the vertex that minimizes @xmath374 , and consider any spanning tree @xmath375 of @xmath124 rooted at @xmath215 . notice that for each @xmath376 we have an object @xmath363 whose volume is at most @xmath377 , where @xmath378 denotes the parent of @xmath361 in @xmath375 .",
    "add such objects to the solution @xmath372 .",
    "once we have considered all the connected components of @xmath316 , the solution @xmath372 contains a set of objects of total volume at most @xmath36 ( since the solution @xmath312 is feasible ) . moreover , by construction , the profit of @xmath372 must be at least @xmath379    we now bound the revenue @xmath380 .",
    "since , from lemma [ lm : converted solution ] and lemma [ lm : decomposition of cycle trees ] , @xmath381 , we have that @xmath382    by summing over all levels and using lemma [ lm : upper bound on the leader s revenue ] , we obtain @xmath383    this completes the proof .",
    "in this paper we have presented a collection of results concerning some interesting variants of the classic @xmath267 game .",
    "many intriguing problems are left open . among the others , we list the following : ( i ) is @xmath46 -hard ?",
    "( ii ) can we design a better approximation algorithm for @xmath46 ?",
    "( iii ) can we prove a stronger inapproximability result for @xmath37 than the one holding for ?",
    "( iv ) what can we say about @xmath37 for instances with uniform activation costs ? is the problem -hard ? can we design and can we extend our results for @xmath46 ? ( v ) finally , and most importantly , does @xmath267 admit a constant factor approximation algorithm ?",
    "d. bil , l. gual , g. proietti , and p. widmayer , computational aspects of a 2-player stackelberg shortest paths tree game , _ proc . of the 4th int .",
    "workshop on internet & network economics ( wine ) _ , vol .",
    "5385 of lncs , springer , 251262 , 2008 .",
    "p. briest and s. khanna , improved hardness of approximation for stackelberg shortest - path pricing , _ proc . of the 6th int .",
    "workshop on internet & network economics ( wine ) _ , vol .",
    "6484 of lncs , springer , 444454 , 2010 .",
    "j. cardinal , e.d .",
    "demaine , s. fiorini , g. joret , i. newman , and o. weimann , the stackelberg minimum spanning tree game on planar and bounded - treewidth graphs , _ journal of combinatorial optimization _ , 25(1 ) : 1946 , 2013 .",
    "a. grigoriev , s. van hoesel , a. van der kraaij , m. uetz , and m. bouhtou , pricing network edges to cross a river , _ proc . of the 3rd workshop on approximation and online algorithms ( waoa ) _ , vol .",
    "3351 of lncs , springer , 140153 , 2005 ."
  ],
  "abstract_text": [
    "<S> let be given a graph @xmath0 whose edge set is partitioned into a set @xmath1 of _ red _ edges and a set @xmath2 of _ blue _ edges , and assume that red edges are weighted and form a spanning tree of @xmath3 . </S>",
    "<S> then , the _ stackelberg minimum spanning tree _ ( ) problem is that of pricing ( i.e. , weighting ) the blue edges in such a way that the total weight of the blue edges selected in a minimum spanning tree of the resulting graph is maximized .  is known to be -hard already when the number of distinct red weights is 2 . in this paper </S>",
    "<S> we analyze some meaningful specializations and generalizations of , which shed some more light on the computational complexity of the problem . </S>",
    "<S> more precisely , we first show that if @xmath3 is restricted to be _ complete _ , then the following holds : ( i ) if there are only 2 distinct red weights , then the problem can be solved optimally ( this contrasts with the corresponding -hardness of the general problem ) ; ( ii ) otherwise , the problem can be approximated within @xmath4 , for any @xmath5 . afterwards </S>",
    "<S> , we define a natural extension of , namely that in which blue edges have a non - negative _ activation cost _ associated , and it is given a global _ activation budget _ that must not be exceeded when pricing blue edges . here , after showing that the very same approximation ratio as that of the original problem can be achieved , we prove that if the spanning tree of red edges can be rooted so as that any root - leaf path contains at most @xmath6 edges , then the problem admits a @xmath7-approximation algorithm , for any @xmath5 .    </S>",
    "<S> * keywords : * communication networks , minimum spanning tree , stackelberg games , network pricing games . </S>"
  ]
}