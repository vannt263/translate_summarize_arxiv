{
  "article_text": [
    "during the workshop on generalizations of de bruijn cycles and gray codes at the banff international research station in december 2004 , ron graham proposed problem 480 : de bruijn tori @xcite . in short , a de bruijn torus is an @xmath5 @xmath4-ary array embedded on a torus in which every possible @xmath6 array appears exactly once .",
    "these types of tori or grids are extremely useful in many applications , such as robotic vision @xcite and projected touch screens @xcite .",
    "while much work has been done on the existence of these tori ( see @xcite , for example ) , current methods require more efficient decoding algorithms . to cope with these difficulties ,",
    "new constructions were developed that produced alternative window sizes and shapes instead of rectangular subarrays .",
    "for example , in @xcite a construction with a cross - shaped window was developed with a decoding algorithm that allowed for a far more efficient location discovery method . in this paper",
    ", we expand on this work and show a wider range of window options . with our new construction",
    ", we reduce the brute - force complexity of @xmath7 for a @xmath4-ary grid with window size @xmath8 down to @xmath9 .",
    "coupled with recent work on the infamous problem of ranking de bruijn sequences , by choosing appropriate sequences to base our grid off of , this complexity may be reduced even further down to @xmath10 ( using results from @xcite ) or @xmath11 ( using results from @xcite ) .    in section [ background ]",
    "we provide the necessary definitions and relevant background .",
    "section [ torus ] develops new results on the de bruijn torus problem , while section [ ucycles ] generalizes this problem from de bruijn sequences to universal cycles .",
    "finally , section [ futurework ] explores possible future research directions in this area .",
    "for the unfamiliar reader , we provide the following definitions and brief history of this research problem .    a @xmath4-ary * de bruijn sequence * of order @xmath0 is a string @xmath12 such that every @xmath0-tuple over the alphabet @xmath13= \\{1,2,\\ldots , d\\}$ ] appears exactly once as @xmath14 .",
    "de bruijn sequences are often cyclic , meaning that the last letter is adjacent to the first , and @xmath0-tuples are allowed to ` wrap around ' from end to beginning . in this case , the sequences are often called de bruijn cycles .",
    "a * de bruijn array * ( or @xmath15-array ) is an @xmath5 @xmath4-ary array in which every window of size @xmath6 appears exactly once . a *",
    "de bruijn torus * is a de bruijn array in which the last row is adjacent to the first row , and similarly the last column is adjacent to the first column .",
    "note that any de bruijn torus can be easily converted to a de bruijn array , but not necessarily vice versa .",
    "a * pseudo - random sequence * is a @xmath4-ary de bruijn sequence of order @xmath0 that is missing the term @xmath16 and is developed from a linear feedback shift register based on a primitive polynomial of degree @xmath0 .",
    "@xcite a * pseudo - random array * is an array in which every _ nonzero _ window appears exactly once , and we will call it an @xmath15-pnarray .    a generalization of de bruijn sequences that allows for combinatorial objects other than simply @xmath4-ary words is a universal string , introduced in @xcite .    a * universal string * , or ustring , over a set of combinatorial objects @xmath17 , each of order @xmath0 , is a sequence @xmath18 in which each object is represented exactly once as a consecutive substring @xmath19 .    as with de bruijn sequences ,",
    "if a universal string is cyclic and wraps around ( i.e. subscript addition is modulo @xmath1 ) , we call it a * universal cycle * or * ucycle*. with respect to our previous definitions , a de bruijn cycle is simply a universal cycle with @xmath17 equal to the set of all @xmath4-ary strings of length @xmath0 .",
    "past work in this area concerns pseudo - random and de bruijn arrays and tori with rectangular windows .",
    "these results are summarized succinctly below .",
    "there exists an @xmath15-array whenever :    * _ @xcite _ @xmath20 , where either @xmath21 , or @xmath22 if @xmath23 . *",
    "_ @xcite _ if @xmath4 has prime decomposition @xmath24 and we define @xmath25 , then @xmath26 and @xmath27 .",
    "there exists an @xmath15-pnarray whenever :    * _ @xcite _ @xmath28 , and gcd@xmath29 .",
    "these results mostly concern the problem of existence and do not explicitly discuss algorithms or complexity for locating specific structures . to deal with the decoding problem ,",
    "several others considered alternative window shapes .",
    "this method will be explored and generalized in the following section .",
    "additionally , it is conjectured in @xcite that the following necessary conditions are also sufficient .    _",
    "_ there exists an @xmath15-array whenever :    1 .",
    "@xmath30 ( only if it is a torus ) , 2 .   @xmath31 or @xmath32 , and 3 .",
    "@xmath33 or @xmath34 .",
    "in order to use the structures defined in section 2 for applications like robot location , we must be able to determine efficiently where a particular subsequence occurs .",
    "a partial solution to this problem is presented in @xcite , in which the authors consider cross - shaped block patterns rather than a rectangular subarray .",
    "these cross - shaped patterns have a set of consecutive blocks horizontally and a set of consecutive blocks vertically , and these sets overlap in exactly one block .",
    "that is , if we have @xmath0 horizontal blocks and @xmath3 vertical blocks , the cross contains a total of @xmath35 blocks . in this section",
    ", we will present this approach and expand upon it to allow for a more generalized set of pattern rules . in the next section",
    ", we will also consider universal cycles over other types of combinatorial objects instead of solely using de bruijn sequences over @xmath4-ary strings .",
    "we begin with some more definitions .",
    "let @xmath36 be a group of order @xmath4 .",
    "define an equivalence relation on @xmath37 ( or @xmath4-ary @xmath0-tuples ) as follows .",
    "we set @xmath38 if and only if @xmath39 for some @xmath40",
    ". then we define the * quotient de bruijn string * , @xmath41 , to be a string of length @xmath42 such that every equivalence class has exactly one representative appear exactly once in @xmath41 .",
    "for example , a quotient string for binary de bruijn sequences is known as the half de bruijn sequence .",
    "this string utilizes the equivalence relation given by @xmath43 if and only if @xmath44 with the bitwise addition performed modulo 2 . for a good discussion on the computational complexity of constructing these half de bruijn sequences ( otherwise known as complement - free de bruijn sequences ) ,",
    "see @xcite . for quotient",
    "de bruijn strings over larger alphabets , we provide the following result .",
    "let @xmath36 be a group of order @xmath4 with operation ` @xmath45 ' .",
    "let @xmath46 be a @xmath4-ary de bruijn sequence for @xmath47-tuples .",
    "define the string @xmath48 such that @xmath49",
    ". then @xmath50 is a quotient de bruijn string .",
    "first , we note that the equivalence classes for @xmath4-ary strings have size @xmath4 , and the union of all equivalence classes for @xmath4-ary strings of length @xmath0 has size @xmath51 .",
    "thus since @xmath50 contains @xmath42 different strings , we need only show that no two representatives from the same equivalence class appear in @xmath50 .    to show this , we proceed by contradiction and suppose that strings @xmath52 and @xmath53 appear starting in positions @xmath54 and @xmath55 in @xmath50 , respectively .",
    "then we have the following equalities .",
    "@xmath56    and    @xmath57    note that these simplify down to the following .",
    "@xmath58    thus if both @xmath52 and @xmath53 appear in @xmath50 , then the @xmath47-tuple @xmath59 appears twice in @xmath60 , which contradicts that @xmath60 is a de bruijn sequence .",
    "we will use these quotient strings in the construction of a torus , as defined below .",
    "let @xmath17 be a universal cycle for a set of objects over an alphabet of size @xmath4 , and let @xmath61 be a quotient string for a ( possibly different ) set of objects over the same alphabet of size @xmath4 .",
    "the @xmath62 * grid * ( or * torus * ) is the rectangular grid with rows labeled from @xmath63 to @xmath64 and columns labeled from @xmath63 to @xmath65 , and where the entry in row @xmath66 and column @xmath2 is @xmath67 where ` @xmath45 ' denotes the binary operation for a group @xmath36 of order @xmath4 utilizing symbols from our common alphabet .",
    "for example , when considering binary de bruijn sequences , there will be @xmath68 columns and @xmath69 rows , and addition will be in @xmath70 .",
    "when considering patterns in the @xmath71 torus , we will use the following definition of block patterns , which will be possible window patterns for our grids .",
    "a @xmath71 * block pattern * in a @xmath62 torus is a selection of entries ( or * blocks * ) within a subarray of dimension @xmath71 .",
    "here and in other literature this is often also referred to as a * window*. when considering not just the general shape of a block pattern but a specific instance of a block pattern in a grid , we say that the block pattern is * filled*.    for example , one possible block pattern in a @xmath72 region is given in figure [ bp ] . in this example , the black blocks represent our block pattern .",
    "several of the latest de bruijn torus results utilize cross - shaped patterns .",
    "these are patterns that contain @xmath0 consecutive blocks in one row , @xmath3 consecutive blocks in one column , and one block in common for a total of @xmath35 blocks . for a cross - shaped block pattern ,",
    "the following theorem gives a nice result .",
    "[ etzioncross ] _",
    "@xcite _ let @xmath50 be a binary de bruijn sequence of order @xmath0 and @xmath61 be a half de bruijn sequence of order @xmath3 .",
    "produce the @xmath73 grid using binary addition .",
    "fix some block pattern @xmath74 that is a @xmath71 cross ( i.e. @xmath0 entries in one row , @xmath3 entries in one column , overlapping in exactly one block ) . then in the constructed grid we can find every binary - filled block pattern",
    "@xmath74 exactly once .    we will generalize theorem [ etzioncross ] so that the block pattern is not required to be cross - shaped , but is required to have certain horizontal and vertical projections , as well as a few additional restrictions on the connection graph for the given block pattern . from a given block pattern ,",
    "we want to create a graph in which blocks correspond to nodes , edges correspond to nearest neighbors in the north / south / east / west directions .",
    "the * connection graph * for a @xmath71 block pattern is created as follows . for each block in the block pattern , draw a node .",
    "we then draw undirected edges corresponding to nearest neighbors in each direction ( north , south , east , and west ) .",
    "figure [ bp ] shows a block pattern and its corresponding connection graph . in order to consider finding patterns that will satisfy de bruijn - type properties",
    ", we will need a few more definitions .    at ( 0,3 ) ; at ( 1,3 ) ; at ( 2,3 ) ; at ( 1,2 ) ; at ( 3,2 ) ; at ( 2,0 ) ;    ( 0,0 ) grid ( 4,4 ) ;    \\(1 ) at ( 0,3 ) ; ( 2 ) at ( 1,3 ) ; ( 3 ) at ( 2,3 ) ; ( 4 ) at ( 1,2 ) ; ( 5 ) at ( 3,2 ) ; ( 6 ) at ( 2,0 ) ;    \\(1 ) edge node [ left ] ( 2 ) ( 2 ) edge node [ left ] ( 3 ) ( 2 ) edge node [ left ] ( 4 ) ( 3 ) edge node [ left ] ( 6 ) ( 4 ) edge node [ right ] ( 5 ) ;    the * projection * of an @xmath75 block pattern on the horizontal is given as a binary @xmath76-sequence in which entry @xmath66 equals @xmath63 if and only if there is at least one block used in column @xmath66 for @xmath77 $ ] .",
    "similarly , the projection on the vertical is a binary @xmath78-sequence in which we consider the rows instead of columns .",
    "when considering a filled block pattern , we replace the 0 s with ` - ' and the 1 s with the appropriate row or column entry .",
    "for example , in figure [ dbgex ] , the row projection is @xmath79 and the column projection is @xmath80 .",
    "now we may consider block patterns with non - consecutive projections , rather than simply the standard de bruijn sequence .",
    "one variation used will be combs and their corresponding sequences .",
    "a * comb * of order @xmath0 is a binary sequence @xmath81 such that it contains exactly @xmath0 ones .",
    "we will represent the comb as a sequence of indices for the non - zero entries , i.e. the comb @xmath82 corresponds to sequence @xmath83 $ ] .",
    "we think of combs as a modified window . for standard de bruijn sequences ,",
    "we use the comb @xmath84 .",
    "however , an alternative comb for binary de bruijn sequences for strings of length 3 is @xmath85 $ ] . following the notation of @xcite , this corresponds to the window ` o*o*o ` .",
    "one de bruijn sequence for this comb is the following .",
    "@xmath86 this window produces the following sequence of binary triples : @xmath87 , @xmath88 .",
    "de bruijn sequences for given comb patterns have been studied in the literature .",
    "for example , see @xcite .",
    "note that our projection must match the structure of the objects used to create the torus . in terms of our example in figure [ dbgex",
    "] , this means that we must have a binary de bruijn sequence for strings of length 3 with comb @xmath89 $ ] and a binary quotient string for strings of length 3 with comb @xmath90 $ ] .",
    "the following theorem is our main result , and serves to generalize theorem [ etzioncross ] from @xcite .",
    "instead of using simple @xmath91 cross shaped block patterns , our result allows for a wide variety of block patterns , from block patterns containing @xmath35 blocks in an @xmath91 subgrid to block patterns of @xmath35 block contained in a much larger subgrid with a variety of gaps in their projections ( i.e. the projections are combs ) .    [ tree ]",
    "let @xmath92 be a de bruijn sequence for strings of length @xmath0 over an alphabet of size @xmath4 with a given comb pattern @xmath93 .",
    "let @xmath61 be a quotient string over the same alphabet of size @xmath4 with comb pattern @xmath94 for strings of length @xmath3 .",
    "place @xmath35 blocks on the grid in a block pattern @xmath74",
    "so the connection graph for @xmath74 is a tree , and so that the horizontal projection of @xmath74 corresponds to @xmath93 and the vertical projection of @xmath74 corresponds to @xmath94 .",
    "then the grid @xmath95 produced by @xmath96 and addition modulo @xmath4 contains every possible @xmath35 binary combination in block pattern @xmath74 exactly once .",
    "the total number of possible @xmath97 combinations is @xmath98 .",
    "we know that @xmath92 has length @xmath51 and @xmath61 has length @xmath99 , so our grid has size @xmath98 . thus if we show that we can find any @xmath97-string in our block pattern , we are done .",
    "since our connection graph is a tree , label our blocks @xmath100 so that @xmath101 is a root and every child appears after its parent .",
    "this can be done using a breadth - first search method .",
    "fill in the blocks in this order arbitrarily with bits to make an arbitrary @xmath97-binary string @xmath102 .",
    "if our string is to appear in the grid , we can determine all row / column labels as follows .",
    "suppose @xmath101 appears in row labelled @xmath103",
    ". then @xmath101 must be in column @xmath104 modulo @xmath4 .",
    "as we work through the list in this fashion , each block @xmath105 must have exactly one of the row or column labels assigned as we reach it in the list .",
    "call the known label @xmath106 . then the remaining label to be determined",
    "will always be @xmath107 .",
    "thus we can determine the projection sequence @xmath108 for the row labels and @xmath109 for the column labels , all solely based on our original label @xmath103 . since @xmath92 is a de bruijn sequence , we know that @xmath110 must appear in @xmath92 for all choices of @xmath111 . since @xmath61 is a quotient string ,",
    "exactly one of @xmath112 must appear .",
    "if @xmath112 appears , our block pattern for this @xmath97 combination appears in @xmath113 \\times [ ( c_1-x)(c_2-x ) \\ldots ( c_n - x)]$ ] .",
    "we now give the following example with @xmath114 and @xmath115 .",
    "suppose that our alphabet is @xmath116 which will correspond to white / black , respectively .",
    "let our comb patterns be the following : @xmath117 $ ] and @xmath118 $ ] .",
    "let @xmath119 and @xmath120 .",
    "we construct the following torus @xmath95 from @xmath96 .",
    "@xmath121    we will construct our grid so as not to require wrap - around , and paint the tiles black / white according to our instruction .",
    "this produces the grid shown in figure [ dbgex ] .",
    "now suppose that in this grid we are looking for the specific block pattern shown next to the grid in the figure .",
    "we also include the connection graph in the figure .",
    "if our top left red block appears in column @xmath103 , then we get the column / row values shown on the relevant rows and columns .    at ( 0,2 ) ; at ( 0,6 ) ; at ( 1,2 ) ; at ( 1,6 ) ; at ( 2,2 ) ; at ( 2,6 ) ; at ( 5,2 ) ; at ( 5,6 ) ; at ( 8,2 ) ; at ( 8,6 ) ; at ( 9,2 ) ; at ( 9,6 ) ; at ( 10,2 ) ; at ( 10,6 ) ;    at ( 3,0 ) ; at ( 3,1 ) ; at ( 3,3 ) ; at ( 3,4 ) ; at ( 3,5 ) ; at ( 3,7 ) ; at ( 3,8 ) ; at ( 3,9 ) ; at ( 4,0 ) ; at ( 4,1 ) ; at ( 4,3 ) ; at ( 4,4 ) ; at ( 4,5 ) ; at ( 4,7 ) ; at ( 4,8 ) ; at ( 4,9 ) ; at ( 6,0 ) ; at ( 6,1 ) ; at ( 6,3 ) ; at ( 6,4 ) ; at ( 6,5 ) ; at ( 6,7 ) ; at ( 6,8 ) ; at ( 6,9 ) ; at ( 7,0 ) ; at ( 7,1 ) ; at ( 7,3 ) ; at ( 7,4 ) ; at ( 7,5 ) ; at ( 7,7 ) ; at ( 7,8 ) ; at ( 7,9 ) ; at ( 11,0 ) ; at ( 11,1 ) ; at ( 11,3 ) ; at ( 11,4 ) ; at ( 11,5 ) ; at ( 11,7 ) ; at ( 11,8 ) ; at ( 11,9 ) ;    ( 0,0 ) grid ( 12,10 ) ;    at ( 14,8 ) ; at ( 15,8 ) ; at ( 18,8 ) ; at ( 15,5 ) ; at ( 18,2 ) ;    ( 14,2 ) grid ( 19,9 ) ;    at ( 14.5,9.5 ) @xmath103 ; at ( 13.5,8.5 ) @xmath103 ; at ( 13.5,5.5 ) @xmath122 ; at ( 13.5,2.5 ) @xmath122 ; at ( 15.5,9.5 ) @xmath122 ; at ( 18.5,9.5 ) @xmath122 ;    \\(1 ) at ( 20,8.5 ) ; ( 2 ) at ( 21,8.5 ) ; ( 3 ) at ( 23,8.5 ) ; ( 4 ) at ( 21,5.5 ) ; ( 5 ) at ( 23,2.5 ) ;    \\(1 ) edge node [ left ] ( 2 ) ( 2 ) edge node [ left ] ( 3 ) ( 2 ) edge node [ left ] ( 4 ) ( 3 ) edge node [ right ] ( 5 ) ;    first , we look at the vertical projection given by @xmath123 . where does a sequence of type @xmath79 appear ?",
    "in position / row 4 as @xmath124 .",
    "this sets our value @xmath125 .",
    "next , the horizontal projection given by @xmath126 . where does the sequence @xmath127 appear ?",
    "in position / column 5 .",
    "this gives us the position of our robot on the grid , shown in figure [ dbgexs ] .    at ( 0,2 ) ; at ( 0,6 ) ; at ( 1,2 ) ; at ( 1,6 ) ; at ( 2,2 ) ; at ( 2,6 ) ; at ( 5,2 ) ; at ( 5,6 ) ; at ( 8,2 ) ; at ( 8,6 ) ; at ( 9,2 ) ; at ( 9,6 ) ; at ( 10,2 ) ; at ( 10,6 ) ;    at ( 3,0 ) ; at ( 3,1 ) ; at ( 3,3 ) ; at ( 3,4 ) ; at ( 3,5 ) ; at ( 3,7 ) ; at ( 3,8 ) ; at ( 3,9 ) ; at ( 4,0 ) ; at ( 4,1 ) ; at ( 4,3 ) ; at ( 4,4 ) ; at ( 4,5 ) ; at ( 4,7 ) ; at ( 4,8 ) ; at ( 4,9 ) ; at ( 6,0 ) ; at ( 6,1 ) ; at ( 6,3 ) ; at ( 6,4 ) ; at ( 6,5 ) ; at ( 6,7 ) ; at ( 6,8 ) ; at ( 6,9 ) ; at ( 7,0 ) ; at ( 7,1 ) ; at ( 7,3 ) ; at ( 7,4 ) ; at ( 7,5 ) ; at ( 7,7 ) ; at ( 7,8 ) ; at ( 7,9 ) ; at ( 11,0 ) ; at ( 11,1 ) ; at ( 11,3 ) ; at ( 11,4 ) ; at ( 11,5 ) ; at ( 11,7 ) ; at ( 11,8 ) ; at ( 11,9 ) ;    ( 0,0 ) grid ( 12,10 ) ;    at ( 4,6 ) ; at ( 5,6 ) ; at ( 8,6 ) ; at ( 5,3 ) ; at ( 8,0 ) ;    ( 4,0 ) to ( 4,7 ) to ( 9,7 ) to ( 9,0 ) to ( 4,0 ) ;    finally , we provide a larger , non - binary example in figure [ 25x25 ] .",
    "this figure is a de bruijn torus for @xmath128 with @xmath115 and @xmath129 over the group @xmath130 .",
    "this torus will work to locate any of the following block patterns ( amongst others ) that contain four blocks .",
    "note that _ not _ included is the two - by - two square , as this would give a connection graph that contains a cycle .    , @xmath115 , @xmath129 , and @xmath131 , accompanied by some valid block patterns .",
    "]    ( 0,3 ) grid ( 14,6 ) ;    ( 0,6 ) to ( 2,6 ) to ( 2,5 ) to ( 1,5 ) to ( 1,3 ) to ( 0,3 ) to ( 0,6 ) ;    ( 3,6 ) to ( 4,6 ) to ( 4,5 ) to ( 5,5 ) to ( 5,4 ) to ( 4,4 ) to ( 4,3 ) to ( 3,3 ) to ( 3,6 ) ;    ( 6,3 ) to ( 6,4 ) to ( 7,4 ) to ( 7,6 ) to ( 8,6 ) to ( 8,3 ) to ( 6,3 ) ;    ( 9,6 ) to ( 10,6 ) to ( 10,5 ) to ( 11,5 ) to ( 11,3 ) to ( 10,3 ) to ( 10,4 ) to ( 9,4 ) to ( 9,6 ) ;    ( 12,6 ) to ( 14,6 ) to ( 14,5 ) to ( 13,5 ) to ( 13,4 ) to ( 12,4 ) to ( 12,6 ) ; ( 13,3 ) to ( 13,4 ) to ( 14,4 ) to ( 14,3 ) to ( 13,3 ) ;    let s consider an example on this figure .",
    "suppose that our block pattern is given , and we have filled it in as shown below .",
    "( 3,3 ) grid ( 5,6 ) ;    ( 3,6 ) to ( 4,6 ) to ( 4,5 ) to ( 5,5 ) to ( 5,4 ) to ( 4,4 ) to ( 4,3 ) to ( 3,3 ) to ( 3,6 ) ;    at ( 3,3 ) 0 ; at ( 3,4 ) 1 ; at ( 3,5 ) 0 ; at ( 4,4 ) 3 ;    at ( 5,4 ) or ;    at ( 6,3 ) ; at ( 6,5 ) ; at ( 6,4 ) ; at ( 7,4 ) ;    ( 6,3 ) grid ( 8,6 ) ;    if we assign the first column to have label @xmath103 , then we get the horizontal projection is @xmath132 and the vertical projection is @xmath133 .",
    "we begin with the vertical projection . this could be any of the following ( one for each choice of @xmath103 ) : @xmath134 .",
    "note that only @xmath135 appears , and it appears in rows 5 - 7 from the bottom .",
    "thus we have @xmath136 .",
    "next we find the horizontal projection @xmath137 , which appears in columns 8 - 9 from the left .",
    "hence we find our entry in the submatrix shown below .",
    "( 3,3 ) grid ( 5,6 ) ;    ( 3,6 ) to ( 4,6 ) to ( 4,5 ) to ( 5,5 ) to ( 5,4 ) to ( 4,4 ) to ( 4,3 ) to ( 3,3 ) to ( 3,6 ) ;    at ( 3,3 ) 0 ; at ( 3,4 ) 1 ; at ( 3,5 ) 0 ; at ( 4,4 ) 3 ; at ( 4,5 ) 2 ; at ( 4,3 ) 2 ;    at ( 5,4 ) or ;    at ( 6,3 ) ; at ( 6,5 ) ; at ( 6,4 ) ; at ( 7,4 ) ; at ( 7,5 ) ; at ( 7,3 ) ;    ( 6,3 ) grid ( 8,6 ) ;    this decoding algorithm is summarized below .",
    "note that this algorithm provides us with an @xmath138 search method , instead of the the standard @xmath139 , as is needed for arbitrary grids as well as pseudorandom arrays .",
    "determine vertical projection set search quotient string for vertical projection determine horizontal projection search de bruijn sequence for horizontal projection    vertical location , horizontal location    note that theorem [ tree ] requires that our connection graph be a tree .",
    "if it is not a tree , then it is either disconnected , or it contains a cycle .",
    "we investigate each of these situations independently .",
    "let @xmath92 be a de bruijn sequence for @xmath4-ary strings of length @xmath0 with a given comb pattern @xmath93 .",
    "let @xmath61 be a quotient string with comb pattern @xmath94 for @xmath4-ary strings of length @xmath3 .",
    "suppose that @xmath36 is a group of order @xmath4 .",
    "place @xmath35 blocks on the grid in a block pattern @xmath74 so the connection graph for @xmath74 is a forest made up of @xmath140 components , and so that the horizontal projection of @xmath74 corresponds to @xmath93 and the vertical projection of @xmath74 corresponds to @xmath94 .",
    "then the grid @xmath95 produced by @xmath96 using the group @xmath36 contains every possible @xmath35 @xmath4-ary combination in block pattern @xmath74 exactly @xmath141 times .",
    "we first note that each component will have its own vertical ( and corresponding horizontal ) projection .",
    "label the components as @xmath142 . using our column / row labeling procedure outlined in the proof of theorem [ tree ]",
    ", we will find column and row labels for each component in terms of a single variable ( associated with whichever row / column started our algorithm ) .",
    "suppose that the labeling for @xmath143 is given in terms of @xmath144 , and the vertical projection in terms of @xmath144 is given by @xmath145 while the horizontal projection is given as @xmath146 .",
    "that is , we get a projection labeling similar to the example shown below .",
    "note that this example is simplified so that the components are grouped clearly .",
    "it could instead be the case that your projections are not consecutive rows / columns , but mixed .",
    "( 8,0 ) rectangle ( 10,2 ) ; ( 5,3 ) rectangle ( 7,5 ) ; ( 3,5 ) rectangle ( 5,7 ) ;    at ( 4,6 ) 1 ; at ( 6,4 ) 2 ; at ( 9,1 ) @xmath140 ; at ( 7,2 ) @xmath147 ;    ( 3,0 ) rectangle ( 10,7 ) ;    ( 1,0 ) rectangle ( 2,2 ) ; at ( 1,1 ) @xmath148 ; at ( 1,2 ) @xmath149 ; ( 1,3 ) rectangle ( 2,5 ) ; at ( 1,4 ) @xmath150 ; ( 1,5 ) rectangle ( 2,7 ) ; at ( 1,6 ) @xmath151 ;    ( 3,8 ) rectangle ( 5,9 ) ; at ( 4,8 ) @xmath152 ; ( 5,8 ) rectangle ( 7,9 ) ; at ( 6,8 ) @xmath153 ; at ( 7,8 ) @xmath154 ; ( 8,8 ) rectangle ( 10,9 ) ; at ( 9,8 ) @xmath155 ;    as stated previously , each of these projections is dependent on the input variable @xmath156 $ ] .",
    "we must find a @xmath3-tuple in the quotient de bruijn string such that each @xmath145 has an equivalence class representative in the correct location . considering all possible combinations of all possible equivalence class representatives ,",
    "there are @xmath157 different possible strings that we must look for in our quotient string @xmath61 . however , since only one from each equivalence class appears in @xmath61 , we will able to locate exactly @xmath141 of them in @xmath61 , and these will be total vertical projections for the connection graph .",
    "each one of these total vertical projections appearing in @xmath61 will produce a corresponding total horizontal projection .",
    "hence the pattern we are attempting to locate will in fact appear @xmath141 times in our grid .",
    "let @xmath92 be a de bruijn sequence for @xmath4-ary strings of length @xmath0 with a given comb pattern @xmath93 .",
    "let @xmath61 be a quotient string with comb pattern @xmath94 for @xmath4-ary strings of length @xmath3 .",
    "suppose that @xmath36 is a group of order @xmath4 .",
    "place @xmath35 blocks on the grid in a block pattern @xmath74",
    "so the connection graph for @xmath74 contains a cycle , and so that the horizontal projection of @xmath74 corresponds to @xmath93 and the vertical projection of @xmath74 corresponds to @xmath94 .",
    "then there exists an @xmath35 @xmath4-ary combination in block pattern @xmath74 that can not be found within the grid @xmath95 produced by @xmath96 using group @xmath36 .",
    "suppose that our connection graph contains a cycle .",
    "then there exists a block @xmath105 in the connection graph that has two neighbors preceding it in the ordering that was determined . call these neighbors @xmath158 and @xmath159 .",
    "when we determine the row and column labels for our blocks , depending on some variable @xmath103 , the blocks @xmath158 and @xmath159 provide a row label @xmath160 and a column label @xmath161 for @xmath105 .",
    "when we are given a filled - in block pattern to locate in the grid , we will only be able to find block patterns in which the entry for @xmath105 is equal to @xmath162 .",
    "that is , if @xmath163 , we must have @xmath164 .",
    "note that this will completely determine our value for @xmath103 , and so our vertical projection will be specific and can not be replaced with a different representative from the same equivalence class . as exactly one representative from each class appears in @xmath61",
    ", this implies that for exactly one choice of @xmath165 $ ] we can find the filled - in block pattern , but for the @xmath166 other choices we can not .",
    "we now consider using other combinatorial objects rather than @xmath4-ary strings .",
    "this requires us to jump from the world of de bruijn sequences to the land of universal cycles . to start",
    ", we generalize our definition of quotient strings to consider objects other than @xmath4-ary strings .",
    "let @xmath17 be a set of combinatorial objects , and suppose that we have an equivalence relation defined over the set that provides a partition of @xmath17 into parts @xmath167 .",
    "a * quotient string * for @xmath17 is a string that contains exactly one consecutive substring from each part exactly once .",
    "it is essentially a universal cycle for a set of equivalence class representatives .",
    "we now consider @xmath3-permutations .",
    "for this we introduce a few new definitions .",
    "a * difference pattern * for a @xmath3-permutation of @xmath168 $ ] given by @xmath169 is the string @xmath170 where @xmath171 .",
    "a * difference sequence * for @xmath3-permutations of @xmath168 $ ] is a universal string over all possible difference patterns for @xmath3-permutations of @xmath168 $ ] .",
    "the difference sequence for @xmath3-permutation is the quotient string that we will use to produce grids .",
    "a necessary requirement for this is a proof that such difference sequences exist .",
    "there exists a difference sequence for @xmath3-permutations of @xmath168 $ ] for all @xmath172 with @xmath173 .",
    "first , we will construct the transition digraph , @xmath174 , for difference patterns for @xmath3-permutations of @xmath168 $ ] , with the following vertex and edge sets .",
    "_ vertices : _",
    "@xmath175 where @xmath176 is a difference pattern for a @xmath3-permutation of @xmath168 $ ] for some @xmath177 .",
    "_ edges : _",
    "@xmath178 , where @xmath179 is a valid difference pattern for a @xmath3-permutation of @xmath168 $ ] .    as is standard practice in the universal cycle literature , we will show that this graph is eulerian by illustrating that it is both balanced and weakly connected . once this graph is known to be eulerian",
    ", we can find a difference sequence for @xmath3-permutations of @xmath168 $ ] simply by following any euler tour in @xmath174 . to prove that @xmath174 is eulerian",
    ", we construct a second ( separate but related ) digraph , @xmath180 .",
    "this graph @xmath180 is the transition digraph for @xmath3-permutations of @xmath168 $ ] is the graph with the following vertex and edge sets .    _",
    "vertices : _",
    "@xmath181 where @xmath182 is a @xmath3-permutation of @xmath168 $ ] for some @xmath183 .",
    "_ edges : _",
    "@xmath184 where @xmath185 is a @xmath3-permutation of @xmath168 $ ] .",
    "now that we have both digraphs defined , we show a special relationship between @xmath174 and @xmath180 by looking at the mapping @xmath186 , which maps each @xmath3-permutation s prefix to the prefix of its difference pattern",
    ". this mapping is equivalent to contracting each difference pattern s equivalence class in @xmath180 to produce @xmath174 . to prove that this statement is true",
    ", we need only show that there is an edge from @xmath187 to @xmath188 if and only if there is an edge from @xmath189 to @xmath190 , the corresponding difference sequences .",
    "first , we note that @xmath191 where @xmath192 for @xmath193 $ ] , and @xmath194 where @xmath195 for @xmath196 .",
    "hence @xmath197 , and so we have @xmath198 in @xmath174 .",
    "for the reverse , suppose that we have an edge @xmath199 in @xmath174",
    ". then the difference pattern @xmath200 corresponds to a class of @xmath3-permutations of @xmath168 $ ] of the form @xmath201 ( for any @xmath202 $ ] ) .",
    "these @xmath3-permutations correspond to the following edges in @xmath180 .",
    "@xmath203 @xmath204 thus our mapping @xmath205 performs as stated . in other words , @xmath205 maps classes of @xmath0 vertices in @xmath180 to one representative in @xmath174 , and maps classes of @xmath0 edges in @xmath180 to one edge in @xmath174 .",
    "next , from @xcite , we know that @xmath180 is eulerian .",
    "now we can use our mapping @xmath205 to prove that @xmath174 is eulerian too , as the @xmath3-permutation digraph is connected if and only if @xmath174 is connected .",
    "lastly , because of our mapping @xmath205 , it is clear that the @xmath174 is balanced if and only if @xmath180 is balanced .",
    "hence the @xmath174 is eulerian .",
    "now that we know the correct quotient string exists , we use a construction similar to that in theorem [ tree ] to produce our main result for this section .",
    "let @xmath92 be a universal cycle for @xmath3-permutations of @xmath168 $ ] and let @xmath50 be a difference string for @xmath206-permutations of @xmath168 $ ] .",
    "let @xmath36 be a group of order @xmath0 , with elements labelled by @xmath168 $ ] and operation @xmath207 .",
    "construct the torus for @xmath208 over @xmath36 and call it @xmath95 .",
    "fix a block pattern @xmath74 such that we have @xmath3 blocks horizontally and @xmath206 blocks vertically .",
    "fill block pattern @xmath74 with elements from @xmath36 arbitrarily such that the @xmath3 horizontal blocks form a @xmath3-permutation and the @xmath206 vertical blocks form an @xmath206-permutation .",
    "then this filled block pattern must appear exactly once in @xmath95 .",
    "we now provide an example and consider the following .",
    "if we want to produce a torus for @xmath209-permutations of @xmath210 $ ] , we need a universal cycle for this set ( for the horizontal ) and a difference string as well ( for the vertical ) . in this example , we will use the klein-4 group for our group @xmath36 , with addition given by the following group table .",
    "@xmath211    our universal cycle is given by @xmath212 , and our quotient string is given by @xmath213 .",
    "then our @xmath214 torus is the following @xmath215 grid .",
    "@xmath216    for example , in the example for 2-permutations of @xmath210 $ ] , consider our grid constructed previously and the marked block pattern .    at ( 0,0 ) 3 ; at ( 1,0 ) 2 ; at ( 2,0 ) 0 ; at ( 3,0 ) 2 ; at ( 4,0 ) 1 ; at ( 5,0 ) 3 ; at ( 6,0 ) 1 ; at ( 7,0 ) 0 ; at ( 8,0 ) 3 ; at ( 9,0 ) 0 ; at ( 10,0 ) 1 ; at ( 11,0 ) 2 ;    at ( 0,1 ) 1 ; at ( 1,1 ) 0 ; at ( 2,1 ) 2 ; at ( 3,1 ) 0 ; at ( 4,1 ) 3 ; at ( 5,1 ) 1 ; at ( 6,1 ) 3 ; at ( 7,1 ) 2 ; at ( 8,1 ) 1 ; at ( 9,1 ) 2 ; at ( 10,1 ) 3 ; at ( 11,1 ) 0 ;    at ( 0,2 ) 0 ; at ( 1,2 ) 1 ; at ( 2,2 ) 3 ; at ( 3,2 ) 1 ; at ( 4,2 ) 2 ; at ( 5,2 ) 0 ; at ( 6,2 ) 2 ; at ( 7,2 ) 3 ; at ( 8,2 ) 0 ; at ( 9,2 ) 3 ; at ( 10,2 ) 2 ; at ( 11,2 ) 1 ;    ( 0,0 ) grid ( 12,3 ) ; ( 0,3 ) to ( 2,3 ) to ( 2,1 ) to ( 1,1 ) to ( 1,2 ) to ( 0,2 ) to ( 0,3 ) ;",
    "there are many directions for future research to consider .",
    "one of the most obvious concerns our original motivation from problem 480 @xcite : how do we modify our methods to allow for cycles in the connection graph ?",
    "the original task is to use a block pattern that is simply a rectangle , which potentially contains many cycles .",
    "corresponding to our variations that utilize universal cycles , there are many open problems simply by consider the various combinatorial objects that have been ` ucycled ' .",
    "for example , these could consider subsets , partitions , weak orders , etc .",
    "the vast literature on ucycles provides plenty of opportunities for future work .",
    "finally , when we consider the real - world applications we must allow for things like sensor failure . is there any way to build redundancy into our tori so that if utilized for robotic vision ( self - detection for robots on the grid ) , can our methods handle the failure of one sensor ( i.e. losing one block in our block pattern ) ?",
    "alternatively , can we make this method robust to rotations ?",
    "in other words , if the robot rotates @xmath217 , is it still able to self - locate ?",
    "t. kociumaka , j. radoszewski , and w. rytter , `` computing the @xmath3th lyndon word and decoding lexicographically minimal de bruijn sequence '' , _ lecture notes in computer science _ , * 8486 * ( 2014 ) , 726 - 737 ."
  ],
  "abstract_text": [
    "<S> the de bruijn torus ( or grid ) problem looks to find an @xmath0-by-@xmath1 binary matrix in which every possible @xmath2-by-@xmath3 submatrix appears exactly once . the existence and construction of these binary matrices was determined in the 70 s , with generalizations to @xmath4-ary matrices in the 80 s and 90 s . </S>",
    "<S> however , these constructions lacked efficient decoding methods , leading to new constructions in the early 2000 s . </S>",
    "<S> the new constructions develop cross - shaped patterns ( rather than rectangular ) , and rely on a concept known as a half de bruijn sequence . in this paper </S>",
    "<S> , we further advance this construction beyond cross - shape patterns . </S>",
    "<S> furthermore , we show results for universal cycle grids , based off of the one - dimensional universal cycles introduced by chung , diaconis , and graham , in the 90 s . </S>",
    "<S> these grids have many applications such as robotic vision , location detection , and projective touch - screen displays . </S>"
  ]
}