{
  "article_text": [
    "let @xmath0 be a qbf in _ prenex cnf ( pcnf ) _ where @xmath1 with @xmath2 is the prefix containing quantified propositional variables @xmath3 and @xmath4 is a quantifier - free cnf . given a pcnf @xmath0 , an _",
    "unsatisfiable core ( uc ) _ of @xmath5 is an unsatisfiable pcnf @xmath6 such that @xmath7 and @xmath8 .",
    "the prefix @xmath9 is obtained from @xmath10 by deleting the quantified variables which do not occur in @xmath11 .",
    "a _ _ minimal unsatisfiable core ( muc ) _ _ of @xmath5 is an unsatisfiable core @xmath12 of @xmath5 where , for every @xmath13 , the pcnf @xmath14 is satisfiable .    _",
    "incremental solving _ is crucial for the computation of mucs in the context of propositional logic ( sat ) , e.g.  @xcite .",
    "modifications of a cnf by adding and deleting clauses in incremental solving are typically implemented by _ selector variables _ and _ assumptions _  @xcite .",
    "an added clause @xmath15 is augmented by a fresh selector variable @xmath16 so that actually @xmath17 is added . via the solver api",
    ", the user assigns these variables as assumptions under which the cnf is solved to control whether a clause is effectively present in the cnf .",
    "different from the assumption - based approach , the sat solver zchaff  @xcite provides an api to modify the cnf by adding and removing _ groups _ ( sets ) of clauses .",
    "clauses are associated with an integer i d of the group they belong to .    in assumption - based incremental",
    "solving , clause groups may be emulated by augmenting all clauses in a group by the same selector variable .",
    "the user must specify the necessary assumptions via the api in all forthcoming solver invocations to enable and disable the right groups .",
    "in contrast to that , zchaff allows to delete groups by a single api function call . in terms of usability , we argue that incremental solving by a clause group api is less error - prone , more accessible to inexperienced users , and facilitates the integration of the solver in other tools .",
    "we present a novel clause group api of our qbf solver depqbf ( version 4.0 or later ) in the style of zchaff .",
    "different from zchaff , we implemented clause groups based on selector variables and assumptions to combine the conceptual simplicity of zchaff s api with state of the art assumption - based incremental solving . as a novel feature of our api , the handling of selector variables and assumptions",
    "is entirely carried out by the solver and is hidden from the user .",
    "our approach is applicable to any sat or qbf solver supporting assumptions .",
    "based on the novel clause group api of depqbf , we implemented a tool to compute mucs of pcnfs , a problem which has not been considered so far .",
    "results on benchmarks used in the qbf gallery 2014 illustrate the applicability of the clause group api for muc computation of pcnfs .",
    "depqbf is a solver for pcnfs based on the qbf - specific variant of the dpll algorithm  @xcite with learning  @xcite . since version  3.0  @xcite",
    ", depqbf supports incremental qbf solving via an api to add and remove clauses in a stack - based way ( cf .",
    "fig .  3 in @xcite ) .",
    "this api is suitable for solving incremental encodings where clauses added most recently tend to be removed again in subsequent solver calls , like reachability problems such as conformant planning  @xcite or bounded model checking  @xcite .",
    "the new clause group api of depqbf , however , allows to add and delete clauses _ arbitrarily _ , which is necessary for the incremental computation of mucs of pcnfs .",
    "we first present our novel approach to keeping selector variables invisible to the user , which is a unique feature of depqbf . to this end , we distinguish between selector variables and variables in the encoding .",
    "let @xmath18 be a sequence of pcnfs .",
    "we consider variables over which the pcnfs @xmath19 are defined as _ user variables _ because they are part of the problem encoding represented by @xmath20 . when solving @xmath20 incrementally , _",
    "selector variables _ used to augment clauses in @xmath19 are not part of the original encoding .",
    "variables @xmath21 are stored in an array @xmath22 indexed by an integer i d @xmath23 of @xmath21 such that @xmath24 = v$ ] .",
    "user and selector variables reside in separate sections of @xmath22 :"
  ],
  "abstract_text": [
    "<S> we consider the incremental computation of minimal unsatisfiable cores ( mucs ) of qbfs . to this end , we equipped our incremental qbf solver depqbf with a novel api to allow for incremental solving based on clause groups . </S>",
    "<S> a clause group is a set of clauses which is incrementally added to or removed from a previously solved qbf . </S>",
    "<S> our implementation of the novel api is related to incremental sat solving based on selector variables and assumptions . </S>",
    "<S> however , the api entirely hides selector variables and assumptions from the user , which facilitates the integration of depqbf in other tools . </S>",
    "<S> we present implementation details and , for the first time , report on experiments related to the computation of mucs of qbfs using depqbf s novel clause group api . </S>"
  ]
}