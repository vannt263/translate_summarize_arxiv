{
  "article_text": [
    "an _ out - tree _ is an oriented tree with only one vertex of in - degree zero called the _",
    "root_. the @xmath2-out - tree problem is the problem of deciding for a given parameter @xmath2 , whether an input digraph contains a given out - tree with @xmath7 vertices . in their seminal work on color coding alon , yuster , and",
    "zwick @xcite provided fixed - parameter tractable ( fpt ) randomized and deterministic algorithms for @xmath2-out - tree . while alon , yuster , and zwick @xcite only stated that their algorithms are of runtime @xmath8",
    ", however , it is easy to see ( see appendix ) , that their randomized and deterministic algorithms are of complexity instead of @xmath9 , i.e. , @xmath10 hides not only constants , but also polynomial coefficients . ]",
    "@xmath11 and @xmath5 , where @xmath12 .",
    "the main results of @xcite , however , were a new algorithmic approach called color coding and a randomized @xmath13 algorithm for deciding whether a digraph contains a path with @xmath2 vertices ( the @xmath2-path problem ) .",
    "chen et al .",
    "@xcite and kneis et al .",
    "@xcite developed a modification of color coding , divide - and - color , that allowed them to design a randomized @xmath14-time algorithm for @xmath2-path .",
    "divide - and - color in kneis et al .",
    "@xcite ( and essentially in chen et al .",
    "@xcite ) is ` symmetric ' , i.e. , both colors play similar role and the probability of coloring each vertex in one of the colors is 0.5 . in this paper , we further develop divide - and - color by making it asymmetric , i.e. , the two colors play different roles and the probability of coloring each vertex in one of the colors depends on the color . as a result , we refine the result of alon , yuster , and zwick by obtaining randomized and deterministic algorithms for @xmath2-out - tree of runtime @xmath15 and @xmath16 respectively .",
    "it is worth to mention here two recent related results on @xmath2-path due to koutis @xcite and williams @xcite based on an algebraic approach .",
    "koutis @xcite obtained a randomized @xmath17-time algorithm for @xmath2-path and williams @xcite extended his ideas resulting in a randomized @xmath18-time algorithm for @xmath2-path . while the randomized algorithms based on color coding and divide - and - color are not difficult to derandomize , it is not the case for the algorithms of koutis @xcite and williams @xcite .",
    "thus , it is unknown whether there are deterministic algorithms for @xmath2-path of runtime @xmath17 .",
    "moreover , it is not clear whether the randomized algorithms of koutis @xcite and williams @xcite can be extended to solve @xmath2-out - tree .    while we believe that the study of fast algorithms for @xmath2-out - tree is a problem interesting on its own , we provide an application of our deterministic algorithm .",
    "the vertices of an out - tree @xmath0 of out - degree zero ( nonzero ) are _ leaves _ ( _ internal vertices _ ) of @xmath0 .",
    "an _ out - branching _ of a digraph @xmath19 is a spanning subgraph of @xmath19 which is an out - tree .",
    "the minimum leaf problem is to find an out - branching with the minimum number of leaves in a given digraph @xmath20 this problem is of interest in database systems @xcite and the hamilton path problem is its special case .",
    "thus , in particular , minimum leaf is np - hard . in this paper",
    "we will study the following parameterized version of minimum leaf : given a digraph @xmath19 and a parameter @xmath2 , decide whether @xmath19 has an out - branching with at least @xmath2 internal vertices .",
    "this problem denoted @xmath2-int - out - branching was studied for symmetric digraphs ( i.e. , undirected graphs ) by prieto and sloper @xcite and for all digraphs by gutin et al .",
    "gutin et al .",
    "@xcite obtained an algorithm of runtime @xmath21 for @xmath2-int - out - branching and asked whether the problem admits an algorithm of runtime @xmath22 note that no such algorithm has been known even for the case of symmetric digraphs @xcite . in this paper , we obtain an @xmath23-time algorithm for @xmath2-int - out - branching using our deterministic algorithm for @xmath2-out - tree and an out - tree generation algorithm .    for a set @xmath24 of vertices of a subgraph @xmath25 of a digraph @xmath19 , @xmath26 and",
    "@xmath27 denote the sets of out - neighbors and in - neighbors of vertices of @xmath24 in @xmath25 , respectively .",
    "sometimes , when a set has a single element , we will not distinguish between the set and its element .",
    "in particular , when @xmath25 is an out - tree and @xmath1 is a vertex of @xmath25 which is not its root , the unique in - neighbor of @xmath1 is denoted by @xmath28 . for an out - tree @xmath0 , @xmath29 denotes the set of leaves in @xmath0 and @xmath30 stands for the set of internal vertices of @xmath0 .",
    "in this section , we introduce and analyze a new randomized algorithm for @xmath2-out - tree that uses divide - and - color and several other ideas .",
    "we provide an analysis of its complexity and a short discussion of its derandomization . we omit proofs of several lemmas of this section .",
    "the proofs can be found in appendix .",
    "the following lemma is well known , see @xcite .",
    "[ balanced ] let @xmath0 be an undirected tree and let @xmath31 be a weight function on its vertices .",
    "there exists a vertex @xmath32 such that the weight of every subtree @xmath33 of @xmath34 is at most @xmath35 , where @xmath36 .",
    "consider a partition @xmath37 where @xmath38 and all @xmath39 are nonnegative integers and a bipartition @xmath40 of the set @xmath41 let @xmath42 given a set @xmath43 with a nonnegative integer weight @xmath39 for each element @xmath44 , we say that a bipartition @xmath45 of @xmath46 is _ greedily optimal _ if @xmath47 does not decrease by moving an element of one partite set into another .",
    "the following procedure describes how to obtain a greedily optimal bipartition in time @xmath48 . for simplicity",
    "we write @xmath49 as @xmath50 .",
    "let @xmath51 , @xmath52 .",
    "choose such an element @xmath53 with a largest @xmath39 .",
    "@xmath54 and @xmath55 return @xmath40 .",
    "[ largecomp ] let @xmath46 be a set of size @xmath56 with a nonnegative integer weight @xmath39 for each @xmath44 .",
    "the algorithm * * @xmath57 finds a greedily optimal bipartition @xmath58 in time @xmath59 .",
    "this lemma is proved in appendix .",
    "now we describe a new randomized algorithm for @xmath2-out - tree .",
    "let @xmath19 be a digraph and let @xmath0 be an out - tree on @xmath2 vertices .",
    "let us specify a vertex @xmath60 and a vertex @xmath61 .",
    "we call a copy of @xmath0 in @xmath19 a _ @xmath0-isomorphic _ tree .",
    "we say that a @xmath0-isomorphic tree @xmath62 in @xmath19 is a @xmath63-tree if @xmath64 plays the role of @xmath65 .    in the following algorithm * *",
    ", we have several arguments other than the natural arguments @xmath0 and @xmath19 .",
    "two arguments are vertices @xmath65 and @xmath66 of @xmath0 , and the last argument is a pair consisting of @xmath67 and @xmath68 , where @xmath69 and @xmath70 s are pairwise disjoint . the argument @xmath65 indicates that we want to return , at the end of the current procedure , the set of vertices @xmath71 such that there is a @xmath63-tree for every @xmath72 . the fact that @xmath73 means two points : we have a @xmath0-isomorphic tree in @xmath19 , and the information @xmath71 we have can be used to construct a larger tree which uses the current @xmath0-isomorphic tree as a building block . here , @xmath71 is a kind of ` joint ' .    the arguments @xmath67 and @xmath68 form a set of information on the location in @xmath19 of the vertices playing the role of @xmath74 obtained in the way we obtained @xmath71 by a recursive call of the algorithm .",
    "let @xmath75 be a @xmath0-isomorphic tree ; if for every @xmath76 , @xmath75 is a @xmath77-tree for some @xmath78 and @xmath79 , we say that _ @xmath75 meets the restrictions on @xmath80_. the algorithm * * intends to find the set @xmath71 of vertices such that for every @xmath72 , there is a @xmath63-tree which meets the restrictions on @xmath80 ; for illustration , see figure [ fig1 ] .",
    "the basic strategy is as follows .",
    "we choose a pair @xmath81 and @xmath82 of subtrees of @xmath0 such that @xmath83 and @xmath81 and @xmath82 share only one vertex , namely @xmath84 .",
    "we call such @xmath84 a _ splitting vertex_. we call recursively two ` * * ' procedures on subsets of @xmath85 to ensure that the subtrees playing the role of @xmath81 and @xmath82 do not overlap .",
    "the first call ( line 15 ) tries to find @xmath86 and the second one ( line 18 ) , using the information @xmath86 delivered by the first call , tries to find @xmath71 . here",
    "@xmath65 is a vertex specified as an input for the algorithm * * . in the end , the current procedure will return @xmath71 .",
    "a splitting vertex can produce several subtrees , but there are many ways to divide them into two groups ( @xmath81 and @xmath82 ) . to make the algorithm more efficient",
    ", we try to obtain as ` balanced ' a partition ( @xmath81 and @xmath82 ) as possible .",
    "the algorithm * * is used to produce a pretty ` balanced ' bipartition of the subtrees .",
    "moreover we introduce another argument to have a better complexity behavior .",
    "the argument @xmath66 is a vertex which indicates whether there is a predetermined splitting vertex .",
    "if @xmath87 , we do not have a predetermined splitting vertex so we find one in the current procedure .",
    "otherwise , we use the vertex @xmath66 as a splitting vertex .",
    "set @xmath88 if @xmath76 , @xmath89 otherwise .",
    "find @xmath90 such that the weight of every subtree @xmath33 of @xmath91 is at most @xmath35 ( see lemma [ balanced ] ) * else * @xmath92 @xmath93:=tree - bipartition@xmath94 .",
    "@xmath95 , @xmath96 .",
    "color all vertices of @xmath70 in white .",
    "color all vertices of @xmath70 in black .",
    "( i.e. , @xmath98 , see ( [ par2 ] ) and the definition of @xmath99 afterwards ) * then * @xmath100 @xmath101 , @xmath102 * else * @xmath103 , @xmath104 .",
    "@xmath105 . color the vertices of @xmath106 in white or black such that for each vertex the probability to be colored in white is @xmath107 if @xmath108 , and @xmath109 otherwise .",
    "let @xmath110 ( @xmath111 ) be the set of vertices of @xmath19 colored in white ( black ) .",
    "@xmath112find - tree@xmath113,d[v_w],v_w , v^*,l\\cap u_w,\\{x_u : u\\in l\\cap u_w\\})$ ] @xmath114 , @xmath115 .",
    "@xmath116find - tree@xmath117,d[v_b\\cup s],v_b , t,(l\\cap u_b),\\{x_u : u\\in ( l\\cap u_b)\\})$ ] .",
    "return @xmath71 .",
    "@xmath119 , @xmath120 .",
    "@xmath121all leaf vertices of @xmath0}. choose a vertex @xmath122 s.t . @xmath123 .",
    "@xmath124 ; @xmath125 .",
    "@xmath71    let @xmath126 be the root of @xmath0 . to decide whether @xmath19 contains a copy of @xmath0",
    ", it suffices to run * * @xmath127 .",
    "[ argument ] during the performance of find - tree(@xmath128 ) , the sets @xmath70 , @xmath76 are pairwise disjoint .",
    "we prove the claim inductively .",
    "for the initial call , trivially the sets @xmath70 , @xmath76 are pairwise disjoint since @xmath129 .",
    "suppose that for a call find - tree(@xmath130 ) the sets @xmath131 , @xmath132 are pairwise disjoint .",
    "for the first subsequent call in line 15 , the sets are obviously pairwise disjoint .",
    "consider the second subsequent call in line 18 .",
    "if @xmath133 before line 17 , the claim is true since @xmath134 returned by the first subsequent call is contained in @xmath86 . otherwise , observe that @xmath135 for all @xmath136 and they are pairwise disjoint . since @xmath137 ,",
    "the sets @xmath70 for all @xmath136 together with @xmath86 are pairwise disjoint .",
    "@xmath138 are the subtrees of @xmath91 . @xmath139 .",
    "@xmath140 , @xmath141 .",
    "@xmath40:=**@xmath142 @xmath143 , @xmath144 .",
    "* else * @xmath145 , @xmath146 .",
    "@xmath143 , @xmath144 . * else * @xmath145 , @xmath146 .",
    "@xmath149 , @xmath150 . * else * @xmath151 , @xmath152 .",
    "@xmath93 .",
    "[ treebip ] consider the algorithm * * and let @xmath93 be a bipartition of @xmath153 obtained at the end of the algorithm .",
    "then the partition @xmath95 and @xmath96 of @xmath154 has the the following property .",
    "\\1 ) if @xmath155 , moving a component @xmath156 from one partite set to the other does not decrease the difference @xmath157 .",
    "\\2 ) if @xmath158 , either exchanging @xmath84 and the component @xmath159 or moving a component @xmath156 , @xmath160 from one partite set to the other does not decrease the difference @xmath157 .    let us consider the property 1 ) .",
    "the bipartition @xmath93 is determined in the first ` if ' statement in line 3 of * * .",
    "then by lemma [ largecomp ] the bipartition @xmath93 is greedily optimal , which is equivalent to the statement of 1 ) .",
    "let us consider the property 2 ) .",
    "first suppose that the bipartition @xmath93 is determined in the second ` if ' statement in line 5 of * * .",
    "the exchange of @xmath84 and the component @xmath159 amounts to moving the element @xmath161 in the algorithm * * .",
    "since @xmath93 is returned by * * and thus is a greedily optimal bipartition of @xmath46 , any move of an element in one partite set would not decrease the difference @xmath162 and the statement of 2 ) holds in this case .",
    "secondly suppose that the bipartition @xmath93 is determined in the third ` if ' statement in line 8 of * * .",
    "in this case we have @xmath163 and thus exchanging @xmath159 and @xmath84 and amounts to moving the element @xmath84 in the algorithm * * . by the same argument as above ,",
    "any move of an element in one partite set would not decrease the difference @xmath162 and again the statement of 2 ) holds .",
    "consider the following equation : @xmath164 let @xmath165 be one of its roots . in line 10 of the algorithm * * , if @xmath166 we decide to pass the present splitting vertex @xmath84 as a splitting vertex to the next recursive call which gets , as an argument , a subtree with greater weight .",
    "lemma [ autobalance ] justifies this execution .",
    "it claims that if @xmath166 , then in the next recursive call with a subtree of weight @xmath167 , we have a more balanced bipartition with @xmath84 as a splitting vertex .",
    "actually , the bipartition in the next step is good enough so as to compensate for the increase in the running time incurred by the biased ( ` @xmath166 ' ) bipartition in the present step .",
    "we will show this later .",
    "[ autobalance ] suppose that @xmath84 has been chosen to split @xmath0 for the present call to * * such that the weight of every subtree of @xmath91 is at most @xmath35 and that @xmath168 .",
    "let @xmath107 be defined as in line @xmath169 and assume that @xmath170 .",
    "let @xmath171 such that @xmath172 and let @xmath173,t[u_b \\cup \\{v^*\\}]\\}$ ] such that @xmath174 and @xmath175 .",
    "let @xmath176 play the role of @xmath107 in the recursive call using the tree @xmath177 . in this case",
    "the following holds : @xmath178    let @xmath179 be defined as in the statement .",
    "note that @xmath180 .",
    "let @xmath181 and note that @xmath182 and that the following holds @xmath183    we now consider the following cases .    _ case 1 .",
    "@xmath184 : _ in this case @xmath185 , a contradiction .",
    "@xmath186 : _ in this case @xmath187 , which implies that @xmath188",
    ". therefore @xmath189 and @xmath190 , a contradiction .",
    "@xmath191 : _ let @xmath192 denote the components in @xmath91 and without loss of generality assume that @xmath193 and @xmath194 . note that by lemma [ treebip ] we must have @xmath195 or @xmath196 for all @xmath197 except possibly for one set @xmath198 ( containing @xmath65 ) , which may have @xmath199 ( if @xmath200 ) .",
    "let @xmath201 be chosen such that @xmath202 , @xmath203 and @xmath204 is minimum possible with these constraints .",
    "we first consider the case when @xmath205 . by the above ( and the minimality of @xmath206 ) we note that @xmath207 ( as either @xmath198 , which is defined above , or @xmath84 may belong to @xmath208 , but not both ) . as @xmath209",
    "we note that @xmath210 . as @xmath211 ( by the statement in our theorem ) this implies that @xmath212 and @xmath213 and @xmath214 .",
    "if @xmath215 contains at least two distinct components with weight at least @xmath216 then @xmath217 , a contradiction . if @xmath215 contains no component of weight at least @xmath216 then @xmath188 and @xmath218 , a contradiction",
    "so @xmath215 contains exactly one component of weight at least @xmath216 . by the minimality of @xmath204 we note that @xmath219 , a contradiction to @xmath191 .",
    "therefore we can assume that @xmath220 , which implies the following ( the last equality is proved above ) @xmath221    as @xmath222 , we note that @xmath223 .    for the selection of the splitting vertex @xmath84 we have two criteria in the algorithm * * : ( i ) _ ` found ' _ criterion : the vertex is found so that the weight of every subtree @xmath33 of @xmath91 is at most @xmath35 . (",
    "ii ) _ ` taken - over ' _ criterion : the vertex is passed on to the present step as the argument @xmath66 by the previous step of the algorithm .",
    "the following statement is an easy consequence of lemma [ autobalance ] .",
    "[ twosteppass ] suppose that @xmath168 . if @xmath84 is selected with ` taken - over ' criterion , then @xmath224 .",
    "for the initial call find - tree(@xmath128 ) we have @xmath87 and thus , the splitting vertex @xmath84 is selected with the ` found ' criterion .",
    "we will prove the claim by induction .",
    "consider the first vertex @xmath84 selected with then ` taken - over ' criterion during the performance of the algorithm .",
    "then in the previous step , the splitting vertex was selected with ` found ' criterion and thus in the present step we have @xmath224 by lemma [ autobalance ] .",
    "now consider a vertex @xmath84 selected with the ` taken - over ' criterion .",
    "then in the previous step , the splitting vertex was selected with the ` found ' criterion since otherwise , by the induction hypothesis we have @xmath224 in the previous step , and @xmath225 has been passed on as the argument @xmath66 for the present step .",
    "this is a contradiction .",
    "due to corollary [ twosteppass ] the vertex @xmath84 selected in line 3 of the algorithm * * functions properly as a splitting vertex . in other words",
    ", we have more than one subtree of @xmath91 in line 4 with positive weights .    [ split ]",
    "if @xmath226 , then for each of @xmath227 and @xmath228 found in line 5 of by * * we have @xmath229 and @xmath230 .",
    "for the sake of contradiction suppose that one of @xmath231 and @xmath232 is zero .",
    "let us assume @xmath233 and @xmath234 .",
    "if @xmath84 is selected with ` found ' criteria , each component in @xmath235 $ ] has a weight at most @xmath35 and @xmath235 $ ] contains at least two components of positive weights .",
    "then we can move one component with a positive weight from @xmath228 to @xmath227 which will reduce the difference @xmath236 , a contradiction .",
    "the same argument applies when @xmath237 and @xmath238 .",
    "consider the case when @xmath84 is selected with ",
    "taken - over \" criteria .",
    "there are three possibilities .",
    "@xmath239 : _ in this case we obtain a contradiction with corollary  [ twosteppass ] .",
    "@xmath240 : _ in the previous step using @xmath241 , where @xmath242 , the splitting vertex @xmath84 was selected with  found \" criteria .",
    "then by the argument in the first paragraph , we have @xmath243 .",
    "a contradiction follows from lemma  [ autobalance ] .",
    "@xmath244 : _ first suppose that @xmath245 .",
    "note that @xmath246-v^*$ ] or @xmath235 $ ] contains a component of weight @xmath247 since otherwise we can move a component with a positive weight from one partite set to the other and reduce @xmath236 .",
    "considering the previous step using @xmath241 , where @xmath242 , the out - tree @xmath0 is the larger of @xmath248 and @xmath249 .",
    "we pass the splitting vertex @xmath84 to the larger of the two only when @xmath250 .",
    "so when @xmath251 , we have @xmath252 and thus @xmath253 , and when @xmath254 we have @xmath255 and thus @xmath256 . in either case , however , @xmath257 contains a component with a weight greater than @xmath258 , contradicting to the choice of @xmath84 in the previous step ( recall that @xmath84 is selected with ` found ' criteria in the previous step using @xmath259 ) .",
    "secondly suppose that that @xmath260 then @xmath237 and @xmath238 .",
    "we can reduce the difference @xmath236 by moving the component with a positive weight from @xmath227 to @xmath228 , a contradiction .",
    "therefore for each of @xmath227 and @xmath228 found in line 5 of by * * we have @xmath229 and @xmath230 .",
    "[ correct ] given a digraph @xmath19 , an out - tree @xmath0 and a specified vertex @xmath60 , consider the set @xmath71 ( in line 22 ) returned by the algorithm find - tree(@xmath130 ) . if @xmath72 then @xmath19 contains a @xmath63-tree that meets the restrictions on @xmath80 .",
    "conversely , if @xmath19 contains a @xmath63-tree for a vertex @xmath61 that meets the restrictions on @xmath80 , then @xmath71 contains @xmath261 with probability larger than @xmath262 .",
    "lemma [ split ] guarantees that the splitting vertex @xmath84 selected at any recursive call of * * really ` splits ' the input out - tree @xmath0 into two nontrivial parts , unless @xmath263 .",
    "first we show that if @xmath72 then @xmath19 contains a @xmath63-tree for a vertex @xmath61 that meets the restrictions on @xmath80 . when @xmath264 , using lemma [ argument ] it is straightforward to check from the algorithm that the claim holds .",
    "assume that the claim is true for all subsequent calls to * * .",
    "since @xmath265 for some @xmath266 returned by a call in line 18 , the subgraph @xmath267 $ ] contains a @xmath268$]-isomorphic @xmath63-tree @xmath269 meeting the restrictions on @xmath270 by induction hypothesis .",
    "moreover , @xmath271 when @xmath272 is returned and this implies that there is a vertex @xmath273 such that @xmath269 is a @xmath274-tree . since @xmath273 , induction hypothesis implies that the subgraph @xmath275 $ ] contains a @xmath246$]-isomorphic @xmath274-tree , say @xmath276 .",
    "consider the subgraph @xmath277 . to show that @xmath75 is a @xmath0-isomorphic @xmath63-tree in d",
    ", it suffices to show that @xmath278 .",
    "indeed , @xmath279 , @xmath280 and @xmath281 .",
    "thus if two trees @xmath276 and @xmath269 share vertices other than @xmath282 , these common vertices should belong to @xmath86 . since @xmath269 meets the restrictions on @xmath270 , we have @xmath283 .",
    "hence @xmath282 is the only vertex that two trees @xmath276 and @xmath269 have in common .",
    "we know that @xmath282 plays the role of @xmath84 in both trees .",
    "therefore we conclude that @xmath75 is @xmath0-isomorphic , and since @xmath261 plays the role of @xmath65 , it is a @xmath63-tree .",
    "obviously @xmath75 meets the restrictions on @xmath80 .",
    "secondly , we shall show that if @xmath19 contains a @xmath63-tree for a vertex @xmath61 that meets the restrictions on @xmath80 , then @xmath71 contains @xmath261 with probability larger than @xmath262 . when @xmath264 , the algorithm * * is deterministic and returns @xmath71 which is exactly the set of all vertices @xmath261 for which there exists a @xmath63-tree meeting the restrictions on @xmath80 .",
    "hence the claim holds for the base case , and we may assume that the claim is true for all subsequent calls to * * .",
    "suppose that there is a @xmath63-tree @xmath75 meeting the restrictions on @xmath80 and that this is a @xmath284-tree , that is , the vertex @xmath285 plays the role of @xmath84 .",
    "then the vertices of @xmath75 corresponding to @xmath227 , say @xmath276 , are colored white and those of @xmath75 corresponding to @xmath228 , say @xmath269 , are colored black as intended with probability @xmath286 .",
    "when we hit the right coloring for @xmath0 , the digraph @xmath275 $ ] contains the subtree @xmath276 of @xmath75 which is @xmath246$]-isomorphic and which is a @xmath284-tree . by induction hypothesis ,",
    "the set @xmath134 obtained in line 15 contains @xmath285 with probability larger than @xmath287 .",
    "note that @xmath276 meets the restrictions on @xmath288 .",
    "if @xmath289 , the restrictions delivered onto the subsequent call for * * in line 17 contains @xmath285 . since @xmath75 meets the restrictions on @xmath80 confined to @xmath290 and it is a @xmath284-tree with @xmath291 , the subtree @xmath269 of @xmath75 which is @xmath268$]-isomorphic meets all the restrictions on @xmath80 . hence by induction hypothesis , the set @xmath266 returned in line 18 contains @xmath261 with probability larger than @xmath287 .",
    "the probability @xmath292 that @xmath266 , returned by * * in line 18 at an iteration of the loop , contains @xmath261 is , thus , @xmath293 after looping @xmath294 times in line 12 , the probability that @xmath71 contains @xmath261 is at least @xmath295 observe that the probability @xmath292 does not depend on @xmath107 and the probability of coloring a vertex white / black .",
    "the complexity of algorithm * * is analyzed in the following theorem . its proof given in appendix",
    "is based on lemmas [ split ] and [ autobalance ] .",
    "[ th1 ] algorithm * * has running time @xmath296 , where @xmath297 and @xmath298 , and @xmath299 and @xmath300 are defined and bounded as follows : @xmath301    derandomization of the algorithm * * can be carried out using the general method presented by chen et al .",
    "@xcite and based on the construction of @xmath302-universal sets studied in @xcite ( for details , see appendix ) . as a result",
    ", we obtain the following :    there is a @xmath303 time deterministic algorithm that solves the @xmath2-out - tree problem , where @xmath304",
    "a _ @xmath2-internal out - tree _ is an out - tree with at least @xmath2 internal vertices .",
    "we call a @xmath2-internal out - tree _ minimal _ if none of its proper subtrees is a @xmath2-internal out - tree , or _ minimal @xmath2-tree _ in short .",
    "the rooted minimal @xmath2-tree problem is as follows : given a digraph @xmath19 , a vertex @xmath282 of @xmath19 and a minimal @xmath2-tree @xmath0 , where @xmath2 is a parameter , decide whether @xmath19 contains an out - tree rooted at @xmath282 and isomorphic to @xmath305 recall that @xmath2-int - out - branching is the following problem : given a digraph @xmath19 and a parameter @xmath2 , decide whether @xmath19 contains an out - branching with at least @xmath2 internal vertices .",
    "finally , the @xmath2-int - out - tree problem is stated as follows : given a digraph @xmath19 and a parameter @xmath2 , decide whether @xmath19 contains an out - tree with at least @xmath2 internal vertices .",
    "[ minimaltree ] let @xmath0 be a @xmath2-internal out - tree .",
    "then @xmath0 is minimal if and only if @xmath306 and every leaf @xmath307 is the only child of its parent @xmath308 .",
    "assume that @xmath0 is minimal .",
    "it can not have more than @xmath2 internal vertices , because otherwise by removing any of its leaves , we obtain a subtree of @xmath0 with at least @xmath2 internal vertices . thus @xmath306 .",
    "if there are sibling leaves @xmath282 and @xmath261 , then removing one of them provides a subtree of @xmath0 with @xmath309 internal vertices .",
    "now , assume that @xmath306 and every leaf @xmath307 is the only child of its parent @xmath308 . observe that every subtree of @xmath0 can be obtained from @xmath0 by deleting a leaf of @xmath0 , a leaf in the resulting out - tree , etc .",
    "however , removing any leaf @xmath66 from @xmath0 decreases the number of internal vertices , and thus creates subtrees with at most @xmath310 internal vertices .",
    "thus , @xmath0 is minimal .",
    "in fact , lemma [ minimaltree ] can be used to generate all non - isomorphic minimal @xmath2-trees .",
    "first , build an ( arbitrary ) out - tree @xmath259 with @xmath2 vertices . then extend @xmath259 by adding a vertex @xmath311 for each leaf @xmath312 with an arc @xmath313 .",
    "the resulting out - tree @xmath33 satisfies the properties of lemma [ minimaltree ] .",
    "conversely , by lemma [ minimaltree ] , any minimal @xmath2-tree can be constructed in this way .    * generating minimal @xmath2-tree ( gmt ) procedure *    \\a .",
    "generate a @xmath2-vertex out - tree @xmath259 and a set @xmath314    \\b .",
    "for each leaf @xmath315 , add a new vertex @xmath311 and an arc @xmath313 to @xmath33 .",
    "due to the following simple observation , to solve @xmath2-int - out - tree for a digraph @xmath19 it suffices to solve rooted minimal @xmath2-tree for each vertex @xmath316 and each minimal @xmath2-tree @xmath0 rooted at @xmath317    [ containmintree ] any @xmath2-internal out - tree rooted at @xmath126 contains a minimal @xmath2-tree rooted at @xmath126 as a subdigraph .",
    "similarly , the next two lemmas show that to solve @xmath2-out - branching for a digraph @xmath19 it suffices to solve rooted minimal @xmath2-tree for each vertex @xmath318 and each minimal @xmath2-tree @xmath0 rooted at @xmath319 where @xmath134 is the unique strong connectivity component of @xmath19 without incoming arcs .",
    "@xcite a digraph @xmath19 has an out - branching rooted at vertex @xmath320 if and only if @xmath19 has a unique strong connectivity component @xmath134 of @xmath19 without incoming arcs and @xmath321 one can check whether @xmath19 has a unique strong connectivity component and find one , if it exists , in time @xmath322 , where @xmath38 and @xmath323 are the number of vertices and arcs in @xmath19 , respectively .",
    "[ extension ] suppose a given digraph @xmath19 with @xmath38 vertices and @xmath323 arcs has an out - branching rooted at vertex @xmath126 . then any minimal @xmath2-tree rooted at @xmath126 can be extended to a @xmath2-internal out - branching rooted at @xmath126 in time @xmath322 .",
    "let @xmath0 be a @xmath2-internal out - tree rooted at @xmath126",
    ". if @xmath0 is spanning , there is nothing to prove . otherwise , choose @xmath324 .",
    "since there is an out - branching rooted at @xmath126 , there is a directed path @xmath325 from @xmath126 to @xmath282 .",
    "this implies that whenever @xmath326 , there is an arc @xmath77 with @xmath32 and @xmath327 . by adding the vertex @xmath261 and the arc @xmath77 to @xmath0",
    ", we obtain a @xmath2-internal out - tree and the number of vertices @xmath0 spans is strictly increased by this operation . using breadth - first search starting at some vertex of @xmath154",
    ", we can extend @xmath0 into a @xmath2-internal out - branching in @xmath328 time .",
    "since @xmath2-int - out - tree and @xmath2-int - out - branching can be solved similarly , we will only deal with the @xmath2-int - out - branching problem .",
    "we will assume that our input digraph contains a unique strong connectivity component @xmath134 .",
    "our algorithm called _ ioba _ for solving @xmath2-int - out - branching for a digraph @xmath19 runs in two stages . in the first stage ,",
    "we generate _ all _ minimal @xmath2-trees .",
    "we use the gmt procedure described above to achieve this . at the second stage , for each @xmath318 and each minimal @xmath2-tree @xmath0 , we check whether @xmath19 contains an out - tree rooted at @xmath282 and isomorphic to @xmath0 using our algorithm from the previous section .",
    "we return true if and only if we succeed in finding an out - tree @xmath25 of @xmath19 rooted at @xmath318 which is isomorphic to a minimal @xmath2-tree .    in the literature ,",
    "mainly rooted ( undirected ) trees and not out - trees are studied .",
    "however , every rooted tree can be made an out - tree by orienting every edge away from the root and every out - tree can be made a rooted tree by disregarding all orientations .",
    "thus , rooted trees and out - trees are equivalent and we can use results obtained for rooted trees for out - trees .",
    "otter @xcite showed that the number of non - isomorphic out - trees on @xmath2 vertices is @xmath329 .",
    "we can generate all non - isomorphic rooted trees on @xmath2 vertices using the algorithm of beyer and hedetniemi @xcite of runtime @xmath330 . using the gmt procedure",
    "we generate all minimal @xmath2-trees .",
    "we see that the first stage of ioba can be completed in time @xmath331 .    in the second stage of ioba",
    ", we try to find a copy of a minimal @xmath2-tree @xmath0 in @xmath19 using our algorithm from the previous section .",
    "the running time of our algorithm is @xmath3 .",
    "since the number of vertices of @xmath0 is bounded from above by @xmath332 , the overall running time for the second stage of the algorithm is @xmath333 .",
    "thus , the overall time complexity of the algorithm is @xmath334 .",
    "we can reduce the complexity with a more refined analysis of the algorithm . the major contribution to",
    "the large constant 96 in the above simple analysis comes from the running time of our algorithm from the previous section .",
    "there we use the upper bound on the number of vertices in a minimal @xmath2-tree .",
    "most of the minimal @xmath2-trees have less than @xmath310 leaves , which implies that the upper bound @xmath332 on the order of a minimal @xmath2-tree is too big for the majority of the minimal @xmath2-trees .",
    "let @xmath335 be the running time of ioba .",
    "then we have    @xmath336    a minimal @xmath2-tree @xmath33 on @xmath337 vertices has @xmath338 leaves , and thus the out - tree @xmath259 from which @xmath33 is constructed has @xmath2 vertices of which @xmath338 are leaves . hence the number of minimal @xmath2-trees on @xmath337 vertices is the same as the number of non - isomorphic out - trees on @xmath2 vertices with @xmath338 leaves . here",
    "an interesting counting problem arises",
    ". let @xmath339 be the number of non - isomorphic out - trees on @xmath2 vertices with @xmath161 leaves .",
    "enumerate @xmath339 . to our knowledge ,",
    "such a function has not been studied yet . leaving it as a challenging open question , here we give an upper bound on @xmath339 and use it for a better analysis of @xmath335 .",
    "in particular we are interested in the case when @xmath340 .",
    "consider an out - tree @xmath259 on @xmath341 vertices which has @xmath342 internal vertices and @xmath343 leaves .",
    "we want to obtain an upper bound on the number of such non - isomorphic out - trees @xmath259 .",
    "let @xmath344 be the subtree of @xmath259 obtained after deleting all its leaves and suppose that @xmath344 has @xmath345 leaves .",
    "assume that @xmath346 and notice that @xmath342 and @xmath345 are integers .",
    "clearly @xmath347 .",
    "each out - tree @xmath259 with @xmath343 leaves can be obtained by appending @xmath348 leaves to @xmath344 so that each of the vertices in @xmath349 has at least one leaf appended to it .",
    "imagine that we have @xmath350 and @xmath351 distinct boxes .",
    "then what we are looking for is the number of ways to put @xmath352 balls into the boxes so that each of the first @xmath345 boxes is nonempty .",
    "again this is equivalent to putting @xmath353 balls into @xmath342 distinct boxes .",
    "it is an easy exercise to see that this number equals @xmath354    note that the above number does not give the exact value for the non - isomorphic out - trees on @xmath2 vertices with @xmath348 leaves .",
    "this is because we treat an out - tree @xmath344 as a labeled one , which may lead to us to distinguishing two assignments of balls even though the two corresponding out - trees @xmath259 s are isomorphic to each other .",
    "a minimal @xmath2-tree obtained from @xmath259 has @xmath352 leaves and thus @xmath355 vertices . with the upper bound @xmath356 on the number of @xmath344 s by @xcite , by ( [ eq1 ] ) we have the following :",
    "@xmath357 the term in the sum over @xmath346 above is maximized when @xmath358 , which yields @xmath359 thus , we conclude with the following theorem .",
    "@xmath2-int - out - branching is solvable in time @xmath360 .",
    "in this paper we refine the approach of chen et al .",
    "@xcite and rossmanith @xcite based on divide - and - color technique .",
    "our technique is based on a more complicated coloring and within this technique we refined the result of alon et al .",
    "@xcite for the @xmath2-out - tree problem .",
    "it is interesting to see if this technique can be used to obtain faster algorithms for other parameterized problems .    as a byproduct of our work",
    ", we obtained the first @xmath23 for @xmath2-int - out - branching .",
    "we used the classical result of otter @xcite that the number of non - isomorphic trees on @xmath2 vertices is @xmath331 .",
    "an interesting combinatorial problem is to refine this bound for trees having @xmath361 leaves for some @xmath362 .",
    "10    n. alon , r. yuster and u. zwick , color - coding . _ journal of the acm _ 42 ( 1995 ) , 844856 .",
    "j. bang - jensen and g. gutin , digraphs : theory , algorithms and apllications , 2nd ed .",
    ", springer - verlag , london , 2008 .",
    "t. beyer and s.m .",
    "hedetniemi , constant time generation of rooted trees .",
    "_ siam j. computing _ 9 ( 1980 ) , 706712 .",
    "j. chen , s. lu , s .- h .",
    "sze , and f. zhang , improved algorithms for path , matching , and packing problems , proc .",
    "18th acm - siam symposium on discrete algorithms ( soda 2007 ) , pp .",
    "298 - 307 , 2007 .",
    "f. r. k. chung , separator theorems and their applications , in paths , flows , and vlsi - layout ( bonn , 1988 ) , springer - verlag , berlin , pp .",
    "1734 , 1990 .",
    "a. demers and a. downing , minimum leaf spanning tree .",
    "us patent no . 6,105,018 , august 2000 .",
    "g. gutin , i. razgon and e.j .",
    "kim , minimum leaf out - branching problems .",
    "aaim08 _ , lecture notes comput .",
    "sci . 5034 ( 2008 ) , 235246 .",
    "j. kneis , d. molle , s. richter , and p. rossmanith , divide - and - color .",
    "wg06 _ , lecture notes comput .",
    "4271 ( 2006 ) , 5867 .",
    "i. koutis , faster algebraic algorithms for path and packing problems .",
    "icalp08 _ , lecture notes comput .",
    "5125 ( 2008 ) , 575586 .",
    "m. naor , l. j. schulman and a. srinivasan , splitters and near - optimal derandomization , proc .",
    "symp . found .",
    "( 1995 ) , 182193    a. nilli , perfect hashing and probability , _ combinatorics prob .",
    "_ 3 ( 1994 ) , 407409 .",
    "r. otter , the number of trees .",
    "49 ( 1948 ) , 583599 .",
    "e. prieto and c. sloper , either / or : using vertex cover structure in desigining fpt - algorithms - the case of @xmath2-internal spanning tree , _ proc .",
    "wads2003 _ , lect .",
    "notes comput.sci .",
    "2748 ( 2003 ) , 465483 .",
    "e. prieto and c. sloper , reducing to independent set structure - the case of @xmath2-internal spanning tree , _ nordic journal of computing _ 15 ( 2005 ) , 308318 .",
    "r. williams , finding a path of length @xmath2 in @xmath363 time . to appear in inform .",
    "proc . letters .",
    "let @xmath364 be a vertex @xmath2-coloring of a digraph @xmath19 and let @xmath0 be a @xmath2-vertex out - tree contained in @xmath19 ( as a subgraph )",
    ". then @xmath154 and @xmath0 are _ colorful _ if no pair of vertices of @xmath0 are of the same color .    the following algorithm of @xcite verifies whether @xmath19 contains a colorful out - tree @xmath25 such that @xmath25 is isomorphic to @xmath0 , when a coloring @xmath365 is given .",
    "note that a @xmath2-vertex subgraph @xmath25 will be colorful with a probability of at least @xmath366 .",
    "thus , we can find a copy of @xmath0 in @xmath19 in @xmath367 expected iterations of the following algorithm .",
    "an out - tree @xmath0 on @xmath2 vertices , a specified vertex @xmath126 of @xmath19 @xmath368 for each vertex @xmath282 of @xmath19 , which is a family of all color sets that appear on colorful copies of @xmath0 in @xmath19 , where @xmath282 plays the role of @xmath126 insert @xmath369 into @xmath368 .",
    "return @xmath368 for each vertex @xmath282 of @xmath19 .",
    "choose an arc @xmath370 .",
    "let @xmath33 and @xmath371 be the subtrees of @xmath0 obtained by deleting @xmath372 , where @xmath33 and @xmath371 contains @xmath373 and @xmath374 , respectively .",
    "call @xmath375 . call @xmath376 .",
    "compose the family of color sets @xmath368 as follows : @xmath377 if @xmath378 return @xmath368 for each vertex @xmath282 of @xmath19 .",
    "let @xmath392 be a family of vertex @xmath2-colorings of a digraph @xmath19 .",
    "we call @xmath392 an",
    "_ @xmath302-family of perfect hashing functions _ if for each @xmath393 , @xmath394 , there is a coloring @xmath395 such that @xmath24 is colorful with respect to @xmath396 one can derandomize the above algorithm of alon et al . by using any @xmath302-family of perfect hashing functions in the obvious way .",
    "the time complexity of the derandomized algorithm depends of the size of the @xmath302-family of perfect hashing functions .",
    "let @xmath397 denote the minimum size of an @xmath302-family of perfect hashing functions .",
    "nilli @xcite proved that @xmath398 it is unclear whether there is an @xmath302-family of perfect hashing functions of size @xmath399 @xcite , but even if it does exist , the running time of the derandomized algorithm would be @xmath400      first we want to show that the values @xmath39 chosen in line 3 of the algorithm do not increase during the performance of the algorithm .",
    "the values of @xmath39 do not increase because the values of the difference @xmath47 do not increase during the performance of the algorithm .",
    "in fact , @xmath47 strictly decreases . to see this ,",
    "suppose that the element @xmath401 is selected in the present step . if @xmath402 , then obviously the difference @xmath47 strictly decreases .",
    "else if @xmath403 , we have @xmath404 .    to see that the algorithm returns a greedily optimal bipartition @xmath40 , it is enough to observe that for the final bipartition @xmath40 , moving any element of @xmath405 or @xmath406 does not decrease @xmath47 .",
    "suppose that the last movement of the element @xmath407 makes @xmath408 .",
    "then a simple computation implies that @xmath409 since the values of @xmath39 in line 3 of the algorithm do not increase during the performance of the algorithm , @xmath410 for every @xmath411 , the movement of any element in @xmath405 would not decrease @xmath47 . on the other hand",
    "suppose that @xmath412 . by the definition of the algorithm , for every @xmath413 with a positive weight we have @xmath414 and",
    "thus the movement of any element in @xmath406 would not decrease @xmath47 .",
    "hence the current bipartition @xmath40 is greedily optimal .",
    "now let us consider the running time of the algorithm . sorting the elements in nondecreasing order of their weights",
    "will take @xmath59 time .",
    "moreover , once an element is moved from one partite set to another , it will not be moved again and we move at most @xmath56 elements without duplication during the algorithm .",
    "this gives us the running time of @xmath59 .",
    "let @xmath415 denote the number of times the `",
    "if'-statement in line @xmath416 of algorithm * * is false ( in all recursive calls to * * ) .",
    "we will prove that @xmath417 , @xmath418 is a constant whose value will determined later in the proof . this would imply that the number of calls to * * where the ` if'-statement in line @xmath416 is true is also bounded by @xmath419 as if line @xmath416 is true then we will have two calls to * * ( in lines @xmath420 and @xmath421 ) .",
    "we can therefore think of the search tree of algorithm 3 as an out - tree where all internal nodes have out - degree equal two and therefore the number of leaves is grater than the number of internal nodes .",
    "observe that each iteration of the for - loop in line 12 of algorithm * * makes two recursive calls to * * and the time spent in each iteration of the for - loop is at most @xmath422 . as the time spent in each call of * * outside the for - loop",
    "is also bounded by @xmath422 we obtain the desired complexity bound @xmath423 .",
    "thus , it remains to show that @xmath424 .",
    "first note that if @xmath425 or @xmath426 then line @xmath416 is false exactly once ( as there are no recursive calls ) and @xmath427 .",
    "if @xmath428 , then line 1 is false a constant number of times by lemma [ split ] and let @xmath406 be the minimal integer such that @xmath424 for both @xmath429 and 4 .",
    "thus , we may now assume that @xmath430 and proceed by induction on @xmath2 .",
    "_ case 2 , @xmath446 : _ in this case we will specify the splitting vertex when we make recursive calls using the larger of @xmath227 and @xmath228 ( defined in line @xmath447 of algorithm * * )",
    ". let @xmath448 denote the @xmath432-value in such a recursive call .",
    "by lemma [ autobalance ] we note that the following holds :      analogously to case 1 ( as @xmath450 is a decreasing function in @xmath448 when @xmath451 ) we note that the @xmath80-values for these recursive calls are bounded by the following , where @xmath452 ( which implies that @xmath453 ) :          let @xmath458 denote the bottom right - hand side of the above equality ( for any value of @xmath432 ) . by the definition of @xmath300 we note that @xmath459 , which implies that @xmath460 . by the definition of @xmath299 and the fact that if @xmath461 then @xmath462 , we obtain the following :                      in this subsection we discuss the derandomization of the algorithm * * using the general method presented by chen et al .",
    "@xcite and based on the construction of @xmath302-universal sets studied in @xcite .",
    "an @xmath302-universal set @xmath471 is a set of functions from @xmath472 $ ] to @xmath473 , such that for every subset @xmath474,|s|=k$ ] the set @xmath475 is equal to the set @xmath476 of all the functions from @xmath134 to @xmath473 .",
    "we explain how proposition [ propuniversalsets ] is used to achieve a deterministic algorithm for the @xmath2-out - tree problem .",
    "let @xmath479 .",
    "first , we construct an @xmath302-universal set @xmath471 of size @xmath480 ( this can be done in time @xmath481 ) .",
    "then we call the algorithm * * but replace steps 13 and 14 by the following steps :      note that this replacement makes the algorithm * find - tree * become deterministic . then , since @xmath471 is a @xmath302-universal set and if there is a subgraph isomorphic to @xmath0 in @xmath19 , there is a function in @xmath471 such that the vertices corresponding to @xmath227 in @xmath19 with be colored in white while the vertices corresponding to @xmath228 will be colored in black . using induction on @xmath2",
    ", we can prove that this deterministic algorithm correctly returns the required tree at the condition that such a tree exists in the graph .",
    "we can also derive the running time of this deterministic algorithm to find a complexity of @xmath303 ."
  ],
  "abstract_text": [
    "<S> an out - tree @xmath0 is an oriented tree with only one vertex of in - degree zero . </S>",
    "<S> a vertex @xmath1 of @xmath0 is internal if its out - degree is positive . </S>",
    "<S> we design randomized and deterministic algorithms for deciding whether an input digraph contains a given out - tree with @xmath2 vertices . </S>",
    "<S> the algorithms are of runtime @xmath3 and @xmath4 , respectively . </S>",
    "<S> we apply the deterministic algorithm to obtain a deterministic algorithm of runtime @xmath5 , where @xmath6 is a constant , for deciding whether an input digraph contains a spanning out - tree with at least @xmath2 internal vertices . </S>",
    "<S> this answers in affirmative a question of gutin , razgon and kim ( proc . </S>",
    "<S> aaim08 ) . </S>"
  ]
}