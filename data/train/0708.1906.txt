{
  "article_text": [
    "the problem of solving numerically the so - called evolution equations of the parton distribution functions ( pdfs ) in quantum chromodynamics ( qcd ) is revisited again and again in all effort of providing more precise perturbative qcd predictions for the experiments in the large hadron collider ( lhc ) and other hadron colliders ( e.g.  tevatron ) . in this work",
    "we intend to present a methodology of solving qcd evolution equations using monte carlo techniques for several types of the evolutions , the resulting numerical results , including the comparisons with other non - mc numerical methods .",
    "two decades ago , when first attempts of solving numerically and precisely the evolution time dependence of the parton distribution functions ( pdfs ) according to the dglap  @xcite equations were made , it was unthinkable that the monte carlo techniques could be used for this purpose .",
    "it was simply because the computers were too slow by several orders of the magnitude .",
    "instead , various faster techniques were developed , based mainly on dividing the evolution time into short periods and using discrete grid in @xmath6-space  they are presently still widely used .",
    "nowdays , with much faster computers , it is perfectly feasible to solving numerically the qcd evolution equations with 34 digit precision for dglap and other types of evolutions , albeit it is still much slower than with other techniques .    one may therefore ask the following question : does the mc technique of solving qcd evolution equations have some advantages over other techniques which makes it worth to pursue in spite of its slowness ? in our opinion the mc technique offers certain unique advantages . let us mention the most important ones : although numerical statistical error is usually bigger than for other methods , this error is very stable and robust , not prone to any effects related to finite grid or time slicing .",
    "another advantage of the mc method is that for many types of partons one may solve the evolution equations for all parton types simultaneously , without the need of diagonalizing kernels , that is using pdfs in the basis of gluon , singlet quark and several types of the non - singlet quark components , and then recombining that back .",
    "finally , the biggest potential advantage is that in the mc method one can devise mapping of the evolution time and other variables into four - momenta , hence to set - up the starting point for constructing a more realistic treatment of the multiparton emission shower , thet is the so - called parton shower mc .",
    "also , the extensions from orthodox dglap towards more complicated kernels / evolutions featuring small @xmath6 resummations , such as ccfm  @xcite , can be treated with the mc techniques more easily than with other methods .",
    "it should be stressed that this work is closely related with another work of ref .",
    "in fact the mc programs of this work are exploited in ref .",
    "@xcite to test more complicated mc techniques of solving evolution equations .",
    "the main difference between this work and ref .",
    "@xcite is that here we concentrate on the markovian class of mc solutions , while ref .",
    "@xcite elaborates on the class of non - markovian techniques , in which the parton energy fraction @xmath6 and its type @xmath7 are constrained ( predefined ) .",
    "the markovian mc is better suited for the final - state parton cascade while the constrained mc of ref .",
    "@xcite is better for the initial state cascade , for instance in hadron colliders ( @xmath8/@xmath9 boson production ) .",
    "our paper is organized as follows : in section  2 we present general form of evolution equations and their iterative solutions . in section  3",
    "we describe in detail three markovian algorithms for solving these equations .",
    "section  4 contains details on evolution kernels and form - factors . in section  5",
    "we give some remarks on monte carlo implementations of the above algorithms .",
    "section  6 is devoted to the chebyshev polynomials method of solving the evolution equations .",
    "in section  7 we present our numerical results .",
    "finally , section  8 summerizes the paper .",
    "in this work we shall cover several types of the qcd evolution equations ranging from dglap  @xcite to ccfm  @xcite and their extensions .",
    "the generic evolution equation covering all types of qcd evolution of our interest reads @xmath10 the parton distribution function ( pdf ) is @xmath11 , with @xmath6 being the fraction of the hadron momentum carried by the parton and @xmath12 being the type ( flavour ) of the parton .",
    "the so called evolution time @xmath13 represents in qcd logarithm of the energy scale @xmath14 determined by hard scattering process probing pdf .",
    "the case of the ll dglap case @xcite is recovered with the following identification @xmath15 where @xmath16 is the lowest order dglap kernel .    in the compact operator ( matrix )",
    "notation eq .",
    "( [ eq : genevoleq ] ) reads @xmath17 given a known @xmath18 at the initial time @xmath19 , the formal solution at any later time @xmath20 is provided by the time ordered exponential @xmath21 the _ time - ordered exponential _ evolution operator reads and @xmath22 .",
    "the inverse ordering will be similarly denoted with @xmath23 . ]",
    "@xmath24 where @xmath25 and the multiplication of the operators is defined as follows @xmath26 from now on we adopt the following notation .",
    "] : @xmath27    in the case of the kernel split into two components , @xmath28 the solution of eq .",
    "( [ eq : timex ] ) can be reorganized as follows in @xmath29 ceases at the closing bracket , but validity scope of indiced variables , like @xmath30 , extends until the formula s end . the use of eq .",
    "( [ eq : clarity ] ) is understood accordingly . ]",
    "@xmath31   { \\bf g}_{{\\bf k}^b}(t , t_{n})\\ ;    \\left[\\prod_{i=1}^n      { \\bf k}^a(t_{i } )      { \\bf g}_{{\\bf k}^b}(t_{i},t_{i-1 } )   \\right ] { \\bf d}(t_0 ) , \\\\ & { \\bf g}_{{\\bf k}}(t , t_{0 } ) = { \\bf g}_{{\\bf k}^b}(t , t_0)\\ ; + \\sum_{n=1}^\\infty   \\left[\\prod_{i=1}^n \\int_{t_{i-1}}^{t}dt_i\\right ]   { \\bf g}_{{\\bf k}^b}(t , t_{n})\\ ;    \\left[\\prod_{i=1}^n      { \\bf k}^a(t_{i } )      { \\bf g}_{{\\bf k}^b}(t_{i},t_{i-1 } )   \\right ] , \\end{split}\\ ] ] where @xmath32 is the evolution operator of eq .",
    "( [ eq : torder ] ) of the evolution with the kernel @xmath33 . formal proof of identities in eq .",
    "( [ eq : timex2 ] ) can be found in ref .",
    "@xcite .",
    "monte carlo method can not efficiently deal with the non - positive distributions , hence resummation of negative virtual part in the evolution kernel is a necessary preparatory step .",
    "it will be done with help of identity of eq .",
    "( [ eq : timex2 ] ) .",
    "we are going resum ( negative ) diagonal virtual part @xmath34 in the kernel @xmath35 at this point we do not need to be very specific about @xmath36  we only remark that due to infrared ( ir ) singularity at @xmath37 and @xmath38 it includes ir cut - off , typically @xmath39 , causing @xmath40 to be also @xmath41-dependent .    thanks to diagonality of the kernel @xmath42 , the corresponding time - ordered exponential is easily calculable @xmath43 inserting the above in eq .",
    "( [ eq : timex2 ] ) we obtain @xmath44   { \\bf g}_{{\\bf k}^v}(t , t_{n})\\ ;    \\left[\\prod_{i=1}^n      { \\bf k}^r(t_{i } )      { \\bf g}_{{\\bf k}^v}(t_{i},t_{i-1 } )   \\right ] { \\bf d}(t_0).\\ ] ] more compact notation is obtained with the prescription @xmath45 and @xmath46 .",
    "evolution equations and their time ordered solutions do not require any assumptions about the normalization of pdfs and kernels . however , markovian monte carlo methods are inherently based on the unitary normalization of the probability distributions ( for the forward step ) . hence , we concentrate on the evolution equations which are supplemented with some conservation rule , providing time - independent normalization condition . for dglap",
    "it is the momentum sum rule which is obeyed exactly and is exploited to this end ( it can also be used for the ccfm class models ) .",
    "it will be also formulated in terms of the compact operator formalism .",
    "let us define operator ( vector ) @xmath47 acting from the left side @xmath48 the momentum sum rule can be stated as the following time conservation law : @xmath49 inserting evolution equation one obtains immediately @xmath50 the sufficient condition for the above to be true is the following property of the kernel @xmath51 for any @xmath52 and @xmath7 . in particular we have @xmath53 , from which we can derive immediately the virtual part of the kernel @xmath54 from @xmath55 also follows the following usefull identity @xmath56 which provides immediately @xmath57 .",
    "the aim is now to transform eq .",
    "( [ eq : timex3 ] ) into a form better suited for the monte carlo evaluation , using markovian algorithm .",
    "the basic problem is to show how to change the integration order from @xmath58 to @xmath59 , taking into account non - commutative character of the product of the kernels in the time ordered exponentials .    it is convenient not only to change the order of the @xmath60-integration but also to transpose simultaneously ( temporarily ) both sides of eq .",
    "( [ eq : timex3 ] ) @xmath61   \\bar{\\bf g}_{{\\bf k}^v}(t , t_{n } ) .",
    "\\end{split}\\ ] ] in the next step we isolate the integration over @xmath62 , the outermost one , @xmath63   \\bar{\\bf g}_{{\\bf",
    "k}^v}(t , t_{n } ) \\bigg\\}. \\end{split}\\ ] ] closer look into second line in the above equation reveals and shifting indices @xmath64 and @xmath65 by one . ] that it represents again the time ordered evolution operator @xmath66 ( with @xmath67 ) .",
    "we obtain therefore @xmath68 transposition can be now removed and the integral over @xmath62 is pulled out @xmath69 the above result can be also presented as an integral equation for the evolution operator @xmath70 this can be inserted back into eq .",
    "( [ eq : timex6 ] ) many times .",
    "the following example shows three levels of the nesting @xmath71 \\\\ \\times &   { \\bf k}^r(t_{1 } )   { \\bf g}_{{\\bf k}^v}(t_{1},t_{0 } ) + { \\bf g}_{{\\bf k}^v}(t , t_{0})\\delta_{t_1=t } \\bigg ) { \\bf d}(t_0 ) .",
    "\\end{split}\\ ] ] it should be stressed that integration over @xmath62 is now the external one and in the mc it will be generated as a first one .",
    "if the above nesting is continued to the level @xmath72 , then one may argue that the contribution from the term with @xmath73 for large @xmath74 decreases like @xmath75 , hence in the markovian mc we may use the following formula `` truncated '' at large fixed @xmath74 playing a role of a dummy technical parameter : @xmath76 \\\\ \\times &   { \\bf k}^r(t_{1 } )   { \\bf g}_{{\\bf k}^v}(t_{1},t_{0 } ) + { \\bf g}_{{\\bf k}^v}(t , t_{0})\\delta_{t_1=t } \\bigg ) { \\bf d}(t_0 ) , \\end{split}\\ ] ] where the integration over @xmath77 was consumed by @xmath78 .",
    "the above identity will be instrumental in constructing mmc algorithm in the following section .",
    "for the monte carlo method one needs a ( sum of ) scalar multi - dimensional integral . for the straightforward markovian algorithm we shall take the following multi - integral @xmath79",
    "the aim is to generate with the mc method all internal integration variables in the above equation .",
    "then , the histogram of the variable @xmath80 and flavour type @xmath81 is evaluated in the high statistic mc run .",
    "such a histogram is defined by means of inserting dirac delta functions in the above multi - integral : @xmath82 where @xmath65 is the dimensionality of the integral in @xmath83 .      as a warm - up exercise",
    "let us insert @xmath84 of eq .",
    "( [ eq : evol0 ] ) into @xmath85 and check how the identity @xmath86 is recovered through explicit integration over @xmath62 @xmath87 in the above the most essential was the use of @xmath88 in the first step , because it has allowed to decouple @xmath62-integration from the integrations inside @xmath89 .",
    "next , @xmath90 was employed , then the evolution equation for @xmath91 and finally @xmath92 was also used",
    ". the decoupled inner integrations are explicitly present in the following iterative formula @xmath93 \\\\ \\times &   { \\bf k}^r(t_{1 } )   { \\bf g}_{{\\bf k}^v}(t_{1},t_{0 } ) + \\bar{\\bf e}{\\bf g}_{{\\bf k}^v}(t , t_{0})\\delta_{t_1=t } \\bigg ) { \\bf d}(t_0 ) .",
    "\\end{split}\\ ] ] again , we would like to stress that the order of the integration starting from @xmath62 and ending with @xmath94 is exactly the one which will be realized in the markovian monte carlo algorithm .      in the markovian mc",
    "we are going to generate @xmath30 , one after another , starting from @xmath62 until for certain @xmath65 , @xmath95 , @xmath96 is reached is large and fixed .",
    "formally , @xmath97 is understood . ] . for this to be feasible in the markovian mc",
    ", we have to show with the same algebra as in eq .",
    "( [ eq : evol5 ] ) , that all integrals over @xmath30 are properly normalized to momentum fraction normalization factor . ]",
    "@xmath98 , starting with the innermost @xmath99 and finishing with outermost @xmath100 . following the above warm - up example",
    "one can show that the integration over @xmath62 decouples completely from all inner integrations over @xmath101 and , therefore , can be generated independently as a first variable in the mc algorithm .    in the mc generation , whenever @xmath102 term is encountered for the first time ,",
    "the real parton emission chain is terminated .",
    "more precisely , for all @xmath103 one may formally define @xmath104 , but they are dummy ( not used ) .    in ref .",
    "@xcite it was stated , that every standard ( classic ) mc algorithm can be reduced to a superposition of only three elementary methods : mapping of variables , weighting - rejecting and branching . as seen in fig .",
    "[ fig : mmc1 ] , where the above basic mmc algorithm is depicted using graphical notation of ref .",
    "@xcite , it is indeed a superposition of branching and mapping  every box typically includes more elementary methods ( typically mappings and branchings ) .",
    "what still remains is to define in a more detail the distribution of all three variables of @xmath105 of the single markovian step after generating @xmath106 in the preceding step : @xmath107    + x_{i-1}\\delta_{t_{i}=t }     e^{-\\phi_{f_{i-1}}(t , t_{i-1 } ) } \\bigg\\ } \\\\ & = \\int\\limits_{t_{i-1}}^{t } dt_i   \\sum_{f_i }   \\int dx_i\\ ; \\omega(t_i",
    ", f_i , x_i|t_{i-1},f_{i-1},x_{i-1 } ) . \\end{split}\\ ] ] let us also show the above distribution in a form immediately suitable for the mc generation @xmath108 , \\end{split}\\ ] ] where virtual form - factor is evaluated using real emission kernels and split into contributions from various transition channels according to @xmath109 given an uniform random number @xmath110 , generation of @xmath30 is done by means of solving the equation @xmath111 for @xmath30 , within the range @xmath112 $ ] .",
    "the remaining range @xmath113 $ ] is mapped into a single point @xmath114 , that is the point where the distribution proportional to @xmath115 resides .",
    "flavour index @xmath116 is generated according to normalized discrete probability distribution @xmath117 .",
    "finally , variable @xmath118 is generated according to the normalized integrand of @xmath119 in eq .",
    "( [ eq : probstep ] ) .    the above markovian mc algorithm of fig .",
    "[ fig : mmc1 ] is completely standard and very well known .",
    "practical problem is that the generation of @xmath30 , for more complicated kernels than in dglap case requires numerical evaluation and inversion of the form - factor @xmath120 .",
    "generation of @xmath116 is always rather trivial . on the other hand , generation of @xmath118",
    "can be also nontrivial .",
    "the above problems can be solved , at least partly , by more sophisticated versions of the markovian mc , generally using mc weights , see next section .      in the simplest markovian mc method with weighted events , which will be referred to as an _ internal loop mmc _",
    ", the real emission kernel in the distribution used in the generation of @xmath118 is replaced by the simplified one @xmath121 , such that @xmath122 .",
    "variables @xmath118 are generated according to normalized distribution @xmath123 where @xmath124 is also simpler than @xmath125 .",
    "the above simplification is corrected by the mc weight @xmath126 which is used in the local rejection loop , for every forward step separately , using uniform random number @xmath127 : if @xmath128 then generation of @xmath118 is repeated . in this method generation of @xmath30",
    "is still done using the exact sudakov form - factor @xmath129 .",
    "this type of mmc algorithm is shown schematically in fig .",
    "[ fig : mmc2 ] and it is essentially a particular realization of the basic algorithm of fig .",
    "[ fig : mmc1 ] . in the second method , which will be referred to as a _",
    "global loop mmc _ the approximate form - factor @xmath130 is used for generation of both @xmath30 , @xmath116 and @xmath118 .",
    "global correcting weight @xmath131 is applied at the very end of the markovian chain . however , the weight is not just @xmath132 , but it can be deduced as follows . according to eq .",
    "( [ eq : probstep ] ) the normalized probability of the forward step @xmath133 reads @xmath134 the desired distribution of all variables in mmc event with @xmath65 emission is @xmath135 however , in the actual global loop mmc method the distribution of these variables ( before applying correcting mc weight ) is the following @xmath136 where barring means substitution of exact kernels and form - factors with the approximate ones : @xmath137 , @xmath138 .",
    "global correcting mc weight is , therefore , just the usual ratio of the exact and approximate distributions @xmath139    the above weight is tested against the random number after the entire mc event generation is completed , see the external return loop in fig .",
    "[ fig : mmc3 ] .",
    "note that , although approximate form - factor @xmath140 and its inverse is used here for generation of @xmath30 , the exact form - factor is still needed to calculate the global weight and @xmath141 . ] .",
    "finally , we are going to derive the third method which will be referred to as _",
    "mmc with pseudo - emissions_. this method is also known in the literature under the name of the _ markovian mc algorithm with veto _ or shortly _",
    "veto algorithm_. in this case we do the following modification of the evolution kernel @xmath142 where @xmath143 is positive and its magnitude is judiciously chosen as the integral difference of the exact kernel @xmath144 and the approximate kernel @xmath145 ( typically the same as in the previous methods ) @xmath146 in this way we are artificially adding to the real emission kernel finite positive contributions , which represents real emission of a gluon with exactly zero momentum ! this extra real emission is compensated immediately and exactly by enlarging negative virtual correction . since the total evolution kernel remains unchanged , @xmath147 the same time - ordered exponential solution remains valid , @xmath148 .",
    "however , the difference will occur when resumming virtual negative corrections , because we are now resumming the enlarged @xmath149 .",
    "the basic solution used as a starting point for mmc now reads @xmath150   { \\bf g}_{\\tilde{\\bf k}^v}(t , t_{n})\\ ;    \\left[\\prod_{i=1}^n      \\tilde{\\bf k}^r(t_{i } )      { \\bf g}_{\\tilde{\\bf k}^v}(t_{i},t_{i-1 } )   \\right ] { \\bf d}(t_0 ) , \\\\ & \\{{\\bf g}_{\\tilde{\\bf k}^v}(t , t')\\}_{ff'}(x , u )    = \\delta_{ff'}\\delta_{x = u}\\ ; e^{-\\tilde\\phi_f(t , t'|x)},\\qquad \\tilde\\phi_f(t , t'|x)=\\int_{t'}^{t } dt''\\ ; \\tilde{\\euscript{k}}^v_{ff}(t'',x ) .",
    "\\end{split}\\ ] ]    the momentum sum rule still holds and can be used to evaluate modified form - factor @xmath151 obviously , @xmath152 was adjusted such that @xmath153 holds .",
    "the immediate important gain is that simplified form - factor @xmath154 is used to generate @xmath30 , instead of more complicated @xmath155 .",
    "however , there is one more possible gain from @xmath153 in the algorithm of generating @xmath116 and @xmath118 .",
    "due to @xmath156 , the probability of choosing @xmath116 should be @xmath157 the next @xmath118 should be generated according to @xmath158 , including singular part proportional to @xmath159 .",
    "however , generating @xmath118 and @xmath116 according to this distribution can be inconvenient and the following clever trick may be helpful .",
    "let us consider for a moment the internal loop mmc algorithm with @xmath160 for which @xmath118 is generated according to @xmath161 .",
    "give uniform random number @xmath127 , the fraction of mc events obeying @xmath128 will be @xmath162 .",
    "now , due to @xmath163 this fraction happens to be exactly the same as the fraction of events @xmath164 located in the @xmath159 term !    one can therefore proceed almost exactly as in the internal loop mmc algorithm , that is generate @xmath116 according to @xmath165 and @xmath118 according to kernel @xmath166 , and next , for events with @xmath128 , instead of repeating generation of @xmath116 and @xmath118 for the same @xmath30 , one sets @xmath167 and @xmath168 ( zero momentum real gluon ! ) and proceeds to generation of the next @xmath169 .",
    "this completes description and derivation of the algorithm of mmc with _ pseudo - emissions_. the advantage of this algorithm is that the numerical evaluation and inversion of the possibly complicated exact form - factor @xmath170 is not required  only the simplified version @xmath171 is used .",
    "this type of mmc algorithm with pseudo - emissions is shown schematically in fig .",
    "[ fig : mmc4 ] .    comparing to other derivations of the veto mmc ,",
    "in our derivation we reduce veto mmc to the standard mmc without the need of repetition of the the explicit resummation of the contributions form @xmath172s ( which is typically done in the derivations of veto mmc in the literature ) .",
    "we believe that the proof presented here is both simpler and more rigorous .",
    "finally let us comment on one purely technical point .",
    "one may get false impression that the above algorithm with pseudo - emissions visualized in fig .  [",
    "fig : mmc4 ] can not be reduced to a superposition of the three elementary methods of ref .",
    "in fact it can be done rather easily  the above algorithm is just a variant of the basic algorithm of fig .",
    "[ fig : mmc1 ] , in which the branch with @xmath173 representing emission of another type of real gluon @xmath172 with exactly zero momentum is present .",
    "our main interest is in the ccfm - like evolution with the evolution time being rapidity and running coupling constant @xmath174 dependent on the transverse momentum of the emitted gluon .",
    "the ll dglap will be shown as a reference case , while another with rapidity ordering and @xmath175-dependent @xmath174 will be also discussed . as a useful intermediate case between ccfm and dglap . running coupling constant @xmath176",
    "is taken in the ll approximation .",
    "all three types of evolution in this work are essentially the same as in ref .",
    "@xcite , so we shall reduce to a minimum presentation of the corresponding three kernels and form - factors .",
    "as already stressed we define explicit mapping of the evolution variables to four - momenta , because of possible applications in the parton shower mcs",
    ". it will be the same as in ref .",
    "@xcite and is basically that of ccfm model  @xcite .",
    "we define @xmath177 to be the momenta of emitted partons , whereas @xmath178 denote the virtual partons along the emission tree .",
    "the initial hadron carries @xmath179 . for each emitted parton",
    "we define @xmath180 consequently , the transverse momentum of emitted massless parton reads @xmath181 this suggests the convenient definition of the rapidity - based evolution time as @xmath182 now , the transverse momentum of the emitted parton ( in units of @xmath183 ) becomes : @xmath184      in the following we are going to define matrix elements of the kernels @xmath185 starting with the real emission part @xmath36 .",
    "it includes implicitly ir cut - off @xmath186 .",
    "the virtual part @xmath187 will be determined unambiguously by imposing momentum sum rule .",
    "it includes implicitly @xmath188 .",
    "we will use as a basic building block the real emission part of the ll dglap kernel . in order to facilitate numerical calculation",
    "it is decomposed as follows @xmath189 ( @xmath190 ) , with the coefficients @xmath191 and functions @xmath192 defined in ref .",
    "let us start with pure bremsstrahlung case , real emission part .",
    "_ case ( a ) _ : dglap ll is introduced here as a reference case : @xmath193 where @xmath194 is infinitesimally small and @xmath190 .    _ case ( b )",
    "_ : the argument in @xmath174 is @xmath195 ; as advocated in ref .  @xcite . for the ir cut - off we use @xmath196 : @xmath197    _ case ( c ) _ : the coupling constant @xmath174 depends on the transverse momentum @xmath198 , while for an ir cut - off we choose @xmath199 .",
    "the kernel reads : @xmath200    the generalized kernels beyond the case of the pure bremsstrahlung , for the quark - gluon transitions , valid for all three cases @xmath201 , we define as follows @xmath202 where @xmath174 in the flavour changing elements have no @xmath175- or @xmath203-dependence and the ir cut - off @xmath204 is the same as in the bremsstrahlung case .",
    "note that the case ( c ) is fully compatible with the ccfm evolution  @xcite , except that for the gluon gluon transitions ( bremsstrahlung ) the non - sudakov form - factor assuring the compatibility with bfkl @xcite is not shown ( although it is already present in the mc program ) .    as in ref .",
    "@xcite , for cases ( b ) and ( c ) , we also introduce slightly modified version of the quark - gluon changing kernels elements : @xmath205 with the same arguments of @xmath174 and ir cut - off as for gluonstrahlung .",
    "new variants are referred to as cases ( b ) and ( c ) .",
    "one can go back from cases ( b ) and ( c ) to ( b ) and ( c ) by means of applying well behaving mc weight .",
    "sudakov form - factor resulting from resummation of the virtual part in the kernel was defined in eq .",
    "( [ eq : phidef ] ) .",
    "the virtual part of the kernel is determined through momentum sum rule , see eq .",
    "( [ eq : kernv ] ) , leading to the following expression @xmath206 where @xmath207 and @xmath208 , see also eq .",
    "( [ eq : phireal ] ) .    following decomposition of the ll kernel into three parts @xmath209 the sudakov form - factor for practical reasons",
    "is split into three corresponding parts : @xmath210    we show in the following explicit expressions for the above form - factor components for most complicated case ( c ) , referring the reader to ref .",
    "@xcite for simpler cases ( a ) and ( b ) : @xmath211 where @xmath212 , @xmath213 , @xmath214 , while function @xmath215 is defined in appendix of ref .",
    "@xcite in terms of log functions .",
    "two other components @xmath216 and @xmath217 are evaluated numerically for every mc event .",
    "this is feasible , provided one integration is performed analytically ( typically that over @xmath218 ) and second integration is done numerically , see ref .",
    "@xcite for the details .      in all three cased ( a  c ) the distributions of the single forward step ( parton emission ) are relatively simple",
    " they are build out of ll dglap kernels and @xmath174 depending on @xmath30 @xmath219 or @xmath220 .",
    "the same distributions enter into form - factor of eq .",
    "( [ eq : formfactor ] ) .",
    "practical problems in the mc implementations are not so much in the distribution shapes as in the kinematic limits",
    ". we shall therefore concentrate in the following on this subject . for this purpose we will draw the limits of the available phase space in the emission of several gluons in the two - dimensional sudakov logarithmic",
    "plane parametrized with variables @xmath221 and @xmath222 simultaneously .",
    "the same integration limits are used in the calculation of the form - factors . the translation from evolution times and lightcone variables , @xmath223 , to rapidities and transverse momenta , @xmath224 ,",
    "will be done using mapping of section .",
    "( [ sec : kinematics ] ) in all three cases ( a  c ) .    in in fig .",
    "[ fig : sudakc ] we start with case ( c ) .",
    "the total emission phase space has triangular shape and is limited by maximum rapidity ( from right ) minimum @xmath203 ( from below ) and conservation of lightcone plus variable , @xmath225 . within the above phase space , momenta of three emitted gluons",
    "@xmath226 are represented by the black numbered circles .",
    "they are ordered in rapidity .",
    "the integration domains for the four consecutive form - factors @xmath227 in the forward step distributions in eqs .",
    "( [ eq : omega1][eq : omega2 ] ) are also shown in fig .",
    "[ fig : sudakc ] as a triangle and three trapezoids .",
    "it is now interesting to compare the phase - space limits in the sudakov plane between the case ( c ) and the two other cases ( a ) and ( b ) .",
    "the corresponding plots are shown in fig .",
    "[ fig : sudakab ] .",
    "the main difference is in the shape of the lower infrared ( ir ) boundary of the emission phase space . in the case",
    "( a ) of dglap it is at the same distance @xmath228 from the upper limit , hence rhomboid shapes with the variable widths and constant heights . in case ( b )",
    "the ir limit in @xmath203 is lowered by the factor @xmath98 which grows after every emission , hence we see the trapezoids with the lower boundary descending deeper and deeper into smaller @xmath203 .",
    "the above illustrates also why the construction of the mmc programs evolution type ( b ) served the role of an intermediate step on the way from dglap to ccfm .",
    "last not least , let us show kinematic limits in the extreme case of one @xmath229 .",
    "this limit is treated in ccfm evolution better than in dglap , because ccfm in this limit coincides with the bfkl evolution  @xcite .",
    "such a case is illustrated in fig .",
    "[ fig : sudakch ] , where the second emitted gluon is very hard , that is with high @xmath203 , in fact larger than the scale of the hard process .",
    "( in this part of the phase space the non - sudakov form - factor plays significant role . )",
    "the above kinematic region is properly included in the mmc case ( c ) and also in the cmc of ref .",
    "studies of the dglap evolution , case ( a ) , using the markovian mcs were already covered in refs .",
    "@xcite in particular nlo case was extensively studied in ref .",
    "the main aim of these papers was to show that mc method , although slower , is equally precise and more versatile as compared to older non - mc techniques , for example grid method based qcdnum16",
    "these mmcs were also used to test first examples of the constrained mcs  @xcite for dglap - type evolution .",
    "the main advantage of mc method turns out to be very good and stable estimator of the error .",
    "the slowness of mmcs is mainly the problem in any attempt of fitting deep - inelastic @xmath230 data . here",
    ", special pretabulation procedures are necessary , see refs .",
    "the above studies of the evolution type ( a ) using mmcs were fairly complete , hence there is no need to repeat them here .",
    "as already said , we do not show / repeat in this work tests of mmc type ( a ) and we will limit numerical results to comparisons of mmc versus non - mc program apcheb @xcite for evolutions class ( b ) and ( c ) . it should be stressed that apcheb was originally working only for dglap and was upgraded to evolutions type ( b ) and ( c ) for the purpose of the tests with mmcs .",
    "comparisons of mmc and cmc programs for evolutions type ( b ) and ( c ) were also done and have been presented in ref .  @xcite . in this way we have in our disposal three completely different programs ( sometimes even four ) which solve numerically evolution equations of all three types ( a ) , ( b ) and ( c ) and provide identical results within precision of @xmath231 !      historically , the mmc for evolution type ( b ) with @xmath232 and ir cutoff @xmath233 was developed first , before ccfm - like scenario ( c ) . while testing first versions of mmc type ( c ) the following observation was helpful .",
    "examining carefully the propability distributions of the single forward step @xmath234 of eqs .",
    "( [ eq : omega1],[eq : probstep ] ) one may notice that the whole additional dependence on the @xmath98 variable in @xmath235 can be absorbed into @xmath236 and @xmath237 : @xmath238 of course , this is the consequence of the relations @xmath239 and @xmath240 . as a results , we could in the tests of mmc class ( c ) _ reuse _ the mmc for  @xmath241 by means of reseting @xmath242 and @xmath243 , before generating each single forward step .",
    "the above trick was quite helpful in testing mmc class ( c ) , for pure bremsstrahlung .",
    "in the previous section the monte carlo method for solving the evolution equations was presented . for the sake of the comparison",
    ", we are going to present an alternative method based on the expansion in the chebyshev polynomials .",
    "we start from the general form ( [ eq : genevoleq ] ) of the evolution equations [ eq : num1 ] _",
    "t d_f(t , x)=__0 ^ 1 duk_f(t , x , u)d_(t , u ) with the kernel ( [ eq : evkernel ] ) .",
    "the momentum sum rule ( [ eq : momsumrule ] ) imposed on the parton distributions allows to determine the virtual part of the kernel ( [ eq : evkernel ] ) from the condition ( [ eq : kernelsum ] ) . as a result",
    ", we arrive at the most general form of the evolution equations _",
    "t ( xd_f(t , x))&=&__0 ^ 1 du xk_f^r(t , x , u)d_(t , u ) + [ eq : num7 ] & -&d_f(t , x)__0 ^ 1 du uk_f^r(t , u , x ) .    as an illustration",
    ", we consider in detail the evolution equations for the case ( c ) from section [ sec : threekern ] .",
    "the evolution parameter @xmath60 in this case is related to the rapidity @xmath244 of the emitted real parton by the relation ( [ eq : tevol ] ) , which now reads k_t=2e_h^-y(u - x)=^t(u - x ) . here",
    "@xmath52 and @xmath6 are the longitudinal momentum fraction before and after the emission . in the leading logarithmic approximation",
    "the real emission kernel takes the form [ eq : num10 ] xk_f^r(t , x , u)= p_f^(0 ) ( ) ( u - x ) , where @xmath245 are the leading order splitting functions . in order to avoid the landau pole in @xmath246 , we assume that the transverse momenta of the emitted partons are bounded from below , [ eq : num11 ] k_t_qcd .",
    "this further restricts the momentum fractions @xmath52 for the real emission ( see the theta function in eq .",
    "( [ eq : kernbremsc ] ) ) : [ eq : num12 ] ux+^-t . changing the integration variable , @xmath190",
    ", we obtain for the real emission part of the evolution equations ( [ eq : num7 ] ) [ eq : num13 ] _",
    "_ x^z^r(x , t)dz p_f^(0)(z)d_(t , ) , with the upper integration limit given by [ eq : num14 ] z^r(x , t)= > x.    for the virtual part of the evolution equations we interchange @xmath247 in the kernel ( [ eq : num10 ] ) .",
    "now , the conditions which restrict the @xmath52-values read [ eq : num15 ] u < x ,  k_t=^t(x - u ) .",
    "changing the integration variable , @xmath248 , in the second integral of eqs .",
    "( [ eq : num7 ] ) , we obtain for the virtual term [ eq : num16 ] -xd_f(t , x)__0^z^v(x , t ) dz zp_f^(0)(z ) , where now [ eq : num17 ] z^v(x , t)=1-^-t>0 . in summary , we find the following evolution equations _",
    "t ( xd_f(t , x))&= & _ _ x^z^r(x , t)dz p_f^(0)(z)d_(t , ) + [ eq : num18 ] & -&xd_f(t , x)__0^z^v(x , t ) dz zp_f^(0)(z ) . these equations are complicated enough to be solved only numerically . in the next section",
    "we will present the method based on the expansion in the chebyshev polynomials .      in this method we use the chebyshev polynomials defined by [ eq : cheb1 ] t_k(y)=(k(y ) ) ,  y. the index @xmath249 denotes the polynomial order . fixing the order , @xmath250 , we consider the equation @xmath251 .",
    "it has @xmath74 roots ( nodes ) given by [ eq : cheb2 ] y_i=(i-1/2 ) ,  i=1,2,  ,n .",
    "these roots allow to define the following discrete orthogonality relation for the set of the chebyshev polynomials @xmath252 : [ eq : cheb3 ] _",
    "i=1^nt_j(y_i ) t_k(y_i)=c_j_jk , where @xmath253 .",
    "the coefficients @xmath254 and @xmath255 .    a function @xmath256 with @xmath257 $ ] can be approximated with the help of the specified set of chebyshev polynomials in following way [ eq : cheb4 ] f(x)_n=1^n v_nc_nt_n-1(y(x ) ) , where @xmath258 , @xmath259 and @xmath260 is an arbitrary , invertible function which transforms @xmath261\\to [ -1,1]$ ] .",
    "the coefficients @xmath262 of the expansion can be calculated from the orthogonality relation ( [ eq : cheb3 ] ) , [ eq : cheb5 ] c_n=_i=1^n f(x_i)t_n-1(y_i ) , where @xmath263 are images of the roots ( [ eq : cheb2 ] ) in the interval @xmath261 $ ] . from relations ( [ eq : cheb4 ] ) and ( [ eq : cheb5 ] ) we see that one only needs the values @xmath264 at the chebyshev nodes to reconstruct the function at any other @xmath265 $ ] .",
    "this observation is a starting point of the method of the solution of the evolution equations ( [ eq : num18 ] ) .",
    "we simply solve them at the chebyshev nodes @xmath266 .",
    "therefore , writing eqs .",
    "( [ eq : num18 ] ) in a prototype form , [ eq : cheb6 ] = _ x_k^z(x_k , t)dzp(t , z)d(t , x_k / z ) , we consider the finite set of the first order differential equations for @xmath267 .",
    "the integration on the r.h.s . needs the values of @xmath268 at any point , thus we use the chebyshev approximation [ eq : cheb7 ] d(t , x_k / z)_n=1^n_i=1^n v_nd(t , x_i)t_n-1(y_i)t_n-1(y(x_k / z ) ) . substituting into ( [ eq : cheb6 ] ) ,",
    "we find the following set of equations [ eq : cheb8 ] = _ i=1^n_ki(t)d(t , x_i ) which can easily be solved numerically @xcite .",
    "the matrix @xmath269 in these equations , [ eq : cheb9 ] _",
    "ki(t)=_n=1^n v_nt_n-1(y_i)_x_k^z(x_k , t)dzp(t , z)t_n-1(y(x_k / z ) ) , is computed numerically in the process of finding the solution of eqs .",
    "( [ eq : cheb8 ] ) .",
    "the differential equations which we consider need initial conditions at some initial scale @xmath270 .",
    "they are usually specified analytically such that the initial values @xmath271 at the chebyshev nodes are easily calculated .",
    "the results of the comparison of the solutions of the evolution equations obtained using the monte carlo and chebyshev methods are discussed in the next sextion .",
    "in general , a very good agreement between the results of these two methods is found .",
    "although our mmc program was systematically tested against non - mc programs apcheb and qcdnum16 for all evolution types ( a  c ) , we shall show examples of the numerical results for the more sophisticated and difficult evolution types ( b ) and ( c ) .",
    "[ fig : mmc - apcheb - z ] demonstrates distributions @xmath272 from mmc and apcheb  @xcite programs and the corresponding ratios mmc / apcheb for the evolution type ( b ) , that is with @xmath273 .",
    "the four curves represent @xmath272 for @xmath274gev .",
    "the upper plots are for @xmath275 , gluon while lower plots are for @xmath276 , quarks and antiquarks taken together .",
    "the starting quark and gluon distribution at @xmath277gev are defined exactly the same as in previous works of refs .",
    "results for all @xmath278gev were obtained in the single mc run of @xmath279 mc events .",
    "as we see the distributions from two programs agree within the statistical mc error of about @xmath280 .    in fig .",
    "[ fig : mmc - apcheb - kt ] we show the same type of comparison of mmc and apcheb , but for evolution type ( c ) .",
    "again precision agreement within the statistical mc error is reached .    for the ll dglap , case ( a ) , we have reproduced results of ref .",
    "@xcite with smaller statistical errors and removing certain numerical biases which were seen in this paper in the gluon case , @xmath275 .",
    "we do not show explicitly the corresponding numerical results .",
    "we have developed and tested markovian mc programs for two additional types of the qcd evolution equations , in addition to dglap .",
    "one of them is identical with the so - called all - loop ccfm ( modulo non - sudakov form - factor ) .",
    "the corresponding mc programs were tested to a high - precision level by means of comparison with the other non - mc program apcheb .",
    "mmc of this work is also used to test another class of the constrained mcs in other independent works , for the same class to qcd evolutions .",
    "the aim of these exercises is to build basis for the new parton shower implementations .",
    "the mapping of the evolution variables into four - momenta was also introduced and tested .",
    "lipatov , _ sov .",
    "phys . _ * 20 * ( 1975 ) 95 ; + v.n .",
    "gribov and l.n .",
    "lipatov , _ sov .",
    "phys . _ * 15 * ( 1972 ) 438 ; + g. altarelli and g. parisi , _ nucl .",
    "* 126 * ( 1977 ) 298 ; + yu .",
    "l. dokshitzer , _ sov .",
    "* 46 * ( 1977 ) 64 .",
    "s.  jadach , m.  skrzypek , and z.  was , ( 2006 ) , hep - ph/0701174 .",
    "s.  jadach , practical guide to onte arlo , 1999 , physics/9906056 , eprint physics/9906056 , also available from http://home.cern.ch/@xmath281jadach ( unpublished ) .",
    "k.  golec - biernat , s.  jadach , w.  placzek , and m.  skrzypek , acta phys . polon . *",
    "b37 * , 1785 ( 2006 ) , hep - ph/0603031 .",
    "d.  amati , a.  bassetto , m.  ciafaloni , g.  marchesini , and g.  veneziano , nucl .",
    "b173 * , 429 ( 1980 ) .",
    "lipatov , _ sov .",
    "* 23 * ( 1976 ) 338 ; + e.a .",
    "kuraev , l.n .",
    "lipatov and v.s .",
    "fadin , _ sov .",
    "* 45 * ( 1977 ) 199 ; + i.i .",
    "balitsky and l.n .",
    "lipatov , _ sov .",
    "_ * 28 * ( 1978 ) 822 ; + l.n .",
    "lipatov , _ sov .",
    "* 63 * ( 1986 ) 904 .",
    "s.  jadach and m.  skrzypek , acta phys . polon . *",
    "b35 * , 745 ( 2004 ) , hep - ph/0312355 .",
    "s.  jadach and m.  skrzypek , nucl .",
    "* 157 * , 241 ( 2006 ) .",
    "w.  placzek , k.  golec - biernat , s.  jadach , and m.  skrzypek , ( 2007 ) , arxiv:0704.3344 [ hep - ph ] .",
    "m.  botje , : a fast evolution program , 1977 , zeus note 97 - 066 , http://www.nikhef.nl/  h24/qcdcode/.    s.  jadach and m.  skrzypek , comput .",
    "* 175 * , 511 ( 2006 ) , hep - ph/0504263 .",
    "s.  jadach and m.  skrzypek , acta phys . polon . *",
    "b36 * , 2979 ( 2005 ) , hep - ph/0504205 .",
    "h.  jung and g.  p. salam , eur .",
    "j. * c19 * , 351 ( 2001 ) , hep - ph/0012143 .",
    "k.  golec - biernat , , the fortran code available on the request from the author , unpublished ."
  ],
  "abstract_text": [
    "<S> this work covers methodology of solving qcd evolution equation of the parton distribution using markovian monte carlo ( mmc ) algorithms in a class of models ranging from dglap to ccfm . </S>",
    "<S> one of the purposes of the above mmcs is to test the other more sophisticated monte carlo programs , the so - called constrained monte carlo ( cmc ) programs , which will be used as a building block in the parton shower mc . </S>",
    "<S> this is why the mapping of the evolution variables ( eikonal variable and evolution time ) into four - momenta is also defined and tested . </S>",
    "<S> the evolution time is identified with the rapidity variable of the emitted parton . </S>",
    "<S> the presented mmcs are tested independently , with @xmath0 precision , against the non - mc program apcheb especially devised for this purpose .    </S>",
    "<S> * ifjpan - iv-07 - 09 + cern - ph - th/2007 - 142 *    * solving qcd evolution equations + in rapidity space with *     + markovian monte carlo @xmath1    * k.  golec - biernat@xmath2,s .  </S>",
    "<S> jadach@xmath3 , + w.  paczek@xmath4 and m.  skrzypek@xmath3 *    _ @xmath5institute of nuclear physics , polish academy of sciences , + ul .  radzikowskiego 152 , 31 - 342 cracow , poland . _ +   +   +    _ submitted to acta physica polonica _    * ifjpan - iv-07 - 09 + cern - ph - th/2007 - 142 + august  2007 *    @xmath1this work is partly supported by the eu grant mtkd - ct-2004 - 510126 in partnership with the cern physics department and by the polish ministry of scientific research and information technology grant no 620/e-77/6.pr ue / die 188/2005 - 2008 . </S>"
  ]
}