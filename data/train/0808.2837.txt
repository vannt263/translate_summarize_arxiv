{
  "article_text": [
    "many interesting data transmission and storage systems can be modeled as channels that introduce burst errors . assuming a list decoder at the receiver side , we study requirements that a code must satisfy in order to be suitable for data transmission over such channels , in particular , we investigate lower bounds on the code redundancy .",
    "as we will see , the resulting bounds depend on the structure of the code , i.e. , we obtain different lower bounds for linear codes and group codes on the one hand , and for unstructured codes on the other hand . these bounds can be seen as generalizations of the classical reiger bound  @xcite . finally , we show that reed ",
    "solomon codes achieve the above - mentioned redundancy lower bound for linear codes . for proving this latter result",
    ", we will derive a generalization of the known formula for the resultant of two polynomials , to a larger number of polynomials that have a certain structure .",
    "we start by presenting several definitions that will be used throughout this work .",
    "let @xmath0 be an alphabet of size @xmath1 and assume hereafter without loss of generality that @xmath0 is a finite abelian group .",
    "the set of words of length @xmath2 over @xmath0 is denoted by @xmath3 ( which is a group under the operation of component - by - component addition of elements of @xmath0 ) .",
    "we say that a word @xmath4 is a _",
    "@xmath5-burst _ if either @xmath6 ( the all - zero word ) or the indexes @xmath7 and @xmath8 of the first and last nonzero entries in @xmath9 satisfy @xmath10 .    let @xmath11 be a code of length @xmath2 over @xmath0 .",
    "a _ decoder _ for @xmath11 is a mapping @xmath12 , where @xmath13 denotes the power set of @xmath11 .",
    "the _ list size _ of a decoder @xmath14 is the largest size of @xmath15 over all @xmath16 .",
    "we say that @xmath14 _ detects _ any single @xmath5-burst error if for every codeword @xmath17 and every @xmath5-burst @xmath4 , @xmath18 such a decoder for @xmath11 exists if and only if for any two distinct codewords @xmath19 , the difference @xmath20 is not a @xmath5-burst .",
    "we say that @xmath14 _ corrects _ any single @xmath5-burst error if for every codeword @xmath17 and every @xmath5-burst @xmath4 , @xmath21    an _",
    "@xmath22-burst list decoder _ for @xmath11 is a decoder for @xmath11 of list size at most @xmath23 that corrects any single @xmath5-burst error",
    ". such a decoder exists if and only if there are no @xmath24 distinct pairs @xmath25 where each @xmath26 is a codeword , each @xmath27 is a @xmath5-burst , and @xmath28    for the case @xmath29 ( conventional single @xmath5-burst decoding ) , we have the well - known reiger bound , which states that if a code @xmath11 has a @xmath30-burst list decoder then the redundancy of @xmath11 , @xmath31 is at least @xmath32 ( the bound is usually stated for linear codes ",
    "see for example  @xcite or  @xcite  although it holds for nonlinear codes as well ) .",
    "the reiger bound holds even under the restriction that the burst errors are _ phased _",
    "@xcite , namely , the support of the @xmath5-burst error is contained in one of the following sets @xmath33 ( assuming that entry indexes start at @xmath34 ) : @xmath35 when non - overlapping @xmath5-blocks over @xmath0 are regarded as symbols of the alphabet @xmath36 , a phased @xmath5-burst error becomes a single symbol ( random ) error over @xmath36 .",
    "when @xmath0 is a field , then reed  solomon codes over @xmath0 attain the reiger bound and , in fact , they are optimal also for the deterministic correction of multiple burst errors ( for probabilistic correction , see  @xcite ) .    building upon a result by parvaresh and vardy  @xcite , guruswami and rudra presented in  @xcite a construction of codes that have a polynomial - time list decoder that corrects any pattern of up to @xmath37 errors , where @xmath38 is the code redundancy and @xmath39 is any fixed small positive real .",
    "the guruswami ",
    "rudra scheme is , in fact , a list decoder for reed ",
    "solomon codes that corrects multiple _ phased _ burst errors .    in this work ,",
    "we consider the problem of list decoding of single burst errors that are not necessarily phased . in section  [ sec : reigerbound ] , we present lower bounds on the redundancy of codes that have @xmath22-burst list decoders . in most cases , we will assume that the code also has a decoder that detects any single @xmath5-burst error .",
    "in sections  [ sec : tools][sec : rsbound ] , we show that reed ",
    "solomon codes attain the respective lower bound for linear codes .    in practice",
    ", the code @xmath11 serves as the set of images of an _ encoding mapping _",
    "@xmath40 , where @xmath41 is the set of messages to be transmitted through the ( noisy ) channel . in the context of list decoding",
    ", the mapping @xmath42 does not have to be lossless ( i.e. , one - to - one ) , but then , in determining the list size of a decoder @xmath14 , we need to count each codeword @xmath43 in @xmath15 a number of times which equals the number of pre - images of @xmath43 in @xmath41 ( equivalently , the list size is the largest number of distinct _ messages _ that are returned by the decoder ) .",
    "however , when using a many - to - one encoder , the decoding can be ambiguous even when no errors have occurred .",
    "such a feature is undesirable in virtually all practical applications : if ambiguity is to be allowed ( through the decoding into a list of size greater than @xmath44 ) , then it should be limited only to cases where errors have occurred  as the probability of that to happen is presumed to be small ( yet not negligible ) .",
    "therefore , our definition of the list size of @xmath14 assumes that the encoding is lossless , thereby allowing us to regard codewords as messages . and ,",
    "as said earlier , we will also want the decoder to be able to tell whether a burst error has occurred .",
    "since we focus in this paper on the case of a single burst error , any @xmath22-burst list decoder can be implemented by enumerating over the location of the first nonzero entry in the burst error , thereby effectively transforming the burst error into a burst _",
    "erasure_. now , in the case of linear codes , erasure decoding amounts to computing a syndrome and solving linear equations and , so , erasures can be decoded in polynomial time . hence",
    ", @xmath22-burst list decoders for linear codes always have a polynomial - time implementation ( although for some linear codes we may get faster implementations by taking advantage of the specific structure of the code ) .",
    "most of the section will be devoted to generalizing the classical reiger bound to our list - decoding setup .",
    "interestingly , as we have already mentioned , the resulting lower bounds depend on the structure of the code .",
    "we emphasize that these differences in lower bounds are not spurious : we will show ( by example ) that there are indeed unstructured codes whose redundancy is lower than the redundancy that is required for group or linear codes .    for completeness reasons ,",
    "we start this section by presenting a generalization of the classical sphere - packing bound to our list - decoding setup .",
    "however , unless the codes are long , namely have a block length of at least @xmath45 , this generalized sphere - packing bound will not be better than the generalized reiger bound .      given an alphabet @xmath0 of size @xmath46 , denote by @xmath47 the number of @xmath5-bursts in @xmath3 ; for @xmath48 , this number is given by @xmath49 the following sphere - packing type bound for burst list decoding is proved very similarly to its symbol - error counterpart in  @xcite .",
    "[ thm : spherepackingbound ] let @xmath11 be a code of length @xmath2 over an alphabet of size @xmath1 and let @xmath5 and @xmath23 be positive integers",
    ". then @xmath11 has an @xmath22-burst list decoder only if the redundancy @xmath38 of @xmath11 satisfies @xmath50    for @xmath51 , the lower bound in theorem  [ thm : spherepackingbound ] is smaller than @xmath52 . in this section ,",
    "we obtain reiger - type bounds , which turn out to be better for lengths @xmath2 that are smaller than @xmath45 .",
    "a code @xmath11 of length @xmath2 over ( a finite abelian group ) @xmath0 is called a _ group code _ over @xmath0 if it is a subgroup of the group @xmath3 . in particular ,",
    "if @xmath0 is a field , then every linear code over @xmath0 is a group code over @xmath0 .    for group codes , the conditions for the existence of decoders that detect or correct any single @xmath5-burst",
    "are simplified .",
    "specifically , a group code @xmath11 has a decoder that detects any single @xmath5-burst if and only if the all - zero codeword is the only @xmath5-burst in @xmath11 . and",
    "such a code has an @xmath22-burst list decoder if and only if no @xmath24 distinct @xmath5-bursts belong to the same coset of @xmath11 within @xmath3",
    ". in particular , if @xmath11 is a linear code over a field @xmath0 , then these @xmath5-bursts can not have the same syndrome ( with respect to any parity - check matrix of @xmath11 ) .",
    "the following theorem is a generalization of the reiger bound to burst list decoders for group codes .",
    "[ thm : reigerbound ] let @xmath11 be a group code of length @xmath2 over @xmath0 and let @xmath5 and @xmath23 be positive integers that satisfy the following three conditions :    1 .   [ item : bound1 ] @xmath53 .",
    "[ item : bound2 ] there is a decoder for @xmath11 that detects any single @xmath5-burst error .",
    "[ item : bound3 ] there is an @xmath22-burst list decoder for @xmath11 .",
    "then the redundancy @xmath38 of @xmath11 satisfies @xmath54     * proof .",
    "* our proof strategy will be to show that if @xmath38 is not large enough , then we can exhibit @xmath24 distinct pairs @xmath55 of codewords @xmath26 and @xmath5-bursts @xmath27 that add up to the same word .",
    "writing @xmath56 , we therefore suppose that @xmath57 , or , equivalently , @xmath58 let @xmath59 be disjoint subsets of integers where each @xmath33 consists of @xmath5 consecutive elements from @xmath60 ; condition  [ item : bound1 ] indeed guarantees that such subsets exist",
    ". for @xmath61 , denote by @xmath62 the set of all words in @xmath3 whose support is contained in @xmath33 , and define the set @xmath63 by @xmath64 { } \\\\ & & \\left .",
    "{ { { { \\bm{v}}}}}_i \\in { { \\mathcal{s}}}_i \\quad \\textrm{for $ i = 0 , 1 , \\ldots , \\ell$ } \\right\\ } \\ ; .\\end{aligned}\\ ] ] note that @xmath63 is a subset of @xmath65 and that @xmath66 where the inequality follows from  ( [ eq : contradicting ] ) .",
    "this means that @xmath67 is greater than the number of cosets of the subgroup @xmath68 of @xmath69 under the component - by - component addition of elements of @xmath3 . by the pigeon - hole principle",
    ", there must be two distinct elements in @xmath63 , say @xmath70 and @xmath71 which are in the same coset of @xmath72 .",
    "write @xmath73 for @xmath61 ; then @xmath74 for all @xmath7 and @xmath75    next , we claim that @xmath76 for all @xmath77 .",
    "otherwise , since @xmath78 , there had to be an index @xmath77 for which @xmath79 yet @xmath80 .",
    "but then , @xmath81 thereby contradicting condition  [ item : bound2 ] , as @xmath11 would have a codeword that is a nonzero @xmath5-burst .",
    "( it can be easily seen that @xmath82 is nonzero also , but we will not need this fact in the sequel . )    as our next step , we claim that @xmath83 for all @xmath84 : indeed , since @xmath85 , then @xmath86 implies that both @xmath27 and @xmath87 are zero , which is impossible .    for @xmath61 ,",
    "define the words @xmath88 iteratively by @xmath89 and @xmath90 since @xmath11 is a group code , it follows from  ( [ eq : badword ] ) that each @xmath26 is in fact a codeword of @xmath11 .",
    "thus , we have found @xmath24 distinct pairs @xmath25 where each @xmath26 is a codeword of @xmath11 , each @xmath27 is a @xmath5-burst , and @xmath28 this , in turn , contradicts condition  [ item : bound3 ] .",
    "[ rem : linear ] if @xmath11 is a linear code over the field @xmath91 , then its redundancy @xmath38 is always an integer . in this case , the lower bound of theorem  [ thm : reigerbound ] can be written as @xmath92 furthermore , when @xmath11 is linear and @xmath93 , then condition  [ item : bound2 ] is actually implied by condition  [ item : bound3 ] .",
    "observe that in the proof of theorem  [ thm : reigerbound ] , we did not make any assumptions on the sets @xmath59 , other than satisfying the following two properties : ( i )  these sets are disjoint , and ( ii )  each @xmath33 consists of @xmath5 consecutive elements from @xmath60 .",
    "if we now select any particular @xmath24 sets @xmath59 that satisfy these two properties , then theorem  [ thm : reigerbound ] still holds even if the burst error is restricted _ a priori _ to have support that is contained in one of the sets @xmath33 . in particular , if the subsets @xmath33 are taken as in  ( [ eq : ji ] ) , then we get that theorem  [ thm : reigerbound ] holds also for the restricted case of phased burst errors .",
    "as pointed our earlier , when we regard nonoverlapping @xmath5-blocks over @xmath0 as symbols of the alphabet @xmath36 , a phased @xmath5-burst error becomes a single symbol error .",
    "assuming that @xmath5 divides @xmath2 , the proof of theorem  [ thm : reigerbound ] then implies that the code @xmath11 , when regarded as a code of length @xmath94 over @xmath36 , has a decoder that detects a single error and a list decoder of size @xmath23 that corrects a single error , only if the redundancy of @xmath11 is at least @xmath95 .",
    "in fact , this is precisely the statement we get when we plug in @xmath96 in theorem  [ thm : reigerbound ] .",
    "when there is no such _ a priori _ restriction on the location of the burst errors , then condition  [ item : bound1 ] in theorem  [ thm : reigerbound ] can include more pairs @xmath22 : the next theorem is a modification of theorem  [ thm : reigerbound ] where condition  [ item : bound1 ] is relaxed from @xmath53 to @xmath97 for pairs @xmath22 in which @xmath23 divides @xmath5 .",
    "[ thm : reigerbound ] theorem  [ thm : reigerbound ] holds also when condition  [ item : bound1 ] therein is relaxed to include pairs @xmath22 such that @xmath98 and @xmath99 .",
    "* again , the proof strategy will be to show that if @xmath38 is not large enough , then we can exhibit @xmath24 distinct pairs of codewords and @xmath5-bursts that add up to the same word .",
    "writing @xmath56 and @xmath100 , we therefore assume that @xmath101 , or , equivalently , latexmath:[\\[\\label{eq : contradicting ' }    partition @xmath11 into @xmath103 subsets @xmath104 , where @xmath105 ranges over @xmath106 : each subset @xmath104 consists of all codewords of @xmath11 whose @xmath107-suffix equals @xmath105 . clearly , there is at least one word @xmath108 for which @xmath109 where the strict inequality follows from  ( [ eq : contradicting ] ) .",
    "we let @xmath110 denote the set of all @xmath111-prefixes of the codewords in @xmath112 ; note that @xmath110 is a code of length @xmath113 over @xmath0 , and since @xmath11 satisfies the conditions of the theorem , then so does @xmath110 .",
    "let @xmath59 be defined by @xmath114 for every @xmath77 we have @xmath115 .",
    "since the length of @xmath110 is @xmath116 and its size is greater than @xmath117 , we conclude by the pigeon - hole principle that @xmath110 must contain two distinct codewords , say @xmath118 and @xmath119 , which agree on all positions except possibly those that are indexed by @xmath120 .",
    "@xmath121{\\makebox[4ex]{${{{{\\bm{y}}}}}_{#1}$ } } \\begin{array}{cc|cccccccccccc| } \\cline{3 - 14 } { { { { \\bm{c}}}}}_0 & & \\b & \\y{\\ell+1 } & \\y{\\ell+2 } & \\cdots & \\y{2\\ell-2 } & \\y{2\\ell-1 } & \\y{2\\ell } \\\\",
    "\\cline{3 - 14 } { { { { \\bm{c}}}}}_1 & & \\y{1 } & \\b & \\y{\\ell+2 } & \\y{\\ell+3 } & \\cdots & \\y{2\\ell-1 } & \\y{2\\ell } \\\\",
    "\\cline{3 - 14 } { { { { \\bm{c}}}}}_2 & & \\y{1 } & \\y{2 } & \\b & \\y{\\ell+3 } & \\y{\\ell+4 } & \\cdots & \\y{2\\ell } \\\\",
    "\\cline{3 - 14 } \\multicolumn{14}{c } { } \\\\ \\vdots & \\multicolumn{1}{c } { } & \\vdots & \\vdots & & \\ddots & \\multicolumn{5}{c } { } & \\ddots & & \\multicolumn{1}{c}{\\vdots } \\\\ \\multicolumn{14}{c } { } \\\\ \\cline{3 - 14 } { { { { \\bm{c}}}}}_{\\ell-1 } & & \\y{1 } & \\y{2 } & \\cdots & \\y{\\ell-2 } & \\y{\\ell-1 } & \\b & \\y{2\\ell } \\\\",
    "\\cline{3 - 14 } { { { { \\bm{c}}}}}_\\ell & & \\y{1 } & \\y{2 } & \\y{3 } & \\cdots & \\y{\\ell-1 } & \\y\\ell & \\b \\\\ \\cline{3 - 14 } \\end{array}\\ ] ]    for @xmath61 , define the codewords @xmath122 iteratively by @xmath89 and @xmath123 thus , for every @xmath77 , the codewords @xmath26 and @xmath124 agree on all positions except possibly those that are indexed by @xmath120 .",
    "let @xmath125 be such that it agrees with @xmath126 on its last @xmath127 positions and with @xmath128 on its first @xmath5 positions .",
    "write @xmath129 where each @xmath130 is a @xmath131-block over @xmath0 . from the construction of the codewords",
    "@xmath26 we get by a simple backward induction on @xmath7 that the @xmath132-prefix of @xmath26 is given by @xmath133{\\makebox[3ex]{${{{{\\bm{y}}}}}_{#1}$ } } ( \\ , \\y{1 } \\;|\\ ; \\y{2 } \\;|\\ ; \\ldots \\;|\\ ; \\y{i } \\ , ) \\ ; .\\ ] ] similarly , by a forward induction on @xmath7 it follows that the @xmath134-suffix of @xmath26 is given by @xmath133{\\makebox[6ex]{${{{{\\bm{y}}}}}_{#1}$ } } ( \\ , \\y{\\ell+i+1 } \\;|\\ ; \\y{\\ell+i+2 } \\;|\\ ; \\ldots \\;|\\ ; \\y{2\\ell } \\ , ) \\ ; .\\ ] ] thus , the configuration of the codewords @xmath135 is as shown in figure  [ fig : badcodewords ] .    define @xmath136 . from figure",
    "[ fig : badcodewords ] we readily see that the support of @xmath27 is contained in @xmath33 and , so , @xmath27 is a @xmath5-burst . obviously , @xmath137 which means that we will establish the contradiction once we show that the codewords @xmath135 are all distinct .",
    "indeed , suppose that @xmath138 are distinct yet @xmath139 for some @xmath140 .",
    "since @xmath141 , we must actually have @xmath142 .",
    "but then it follows from figure  [ fig : badcodewords ] that the two ( distinct ) codewords @xmath26 and @xmath143 would share the @xmath23 blocks @xmath144 and , as such , they would differ on at most @xmath5 positions , thereby contradicting condition  [ item : bound2 ] .",
    "one may ask if condition  [ item : bound1 ] in theorems  [ thm : reigerbound ] and  [ thm : reigerbound ] can be further relaxed to requiring only that @xmath97 ( without restricting @xmath5 to be an integer multiple of @xmath23 ) .",
    "the code we present in appendix  [ sec : appa ] shows that , in general , theorems  [ thm : reigerbound ] and  [ thm : reigerbound ] no longer hold under such a relaxation .",
    "the lower bound on the redundancy in theorems  [ thm : reigerbound ] and  [ thm : reigerbound ] applies to group codes .",
    "as the next example shows , this bound does not apply to general codes .",
    "[ ex : n=4,tau = ell=2 ] let @xmath0 be an alphabet of size @xmath1 and consider the code @xmath11 of length @xmath145 and size @xmath146 over @xmath0 which is defined as the union of the following two sets : @xmath147 and @xmath148 we claim that @xmath11 satisfies conditions  [ item : bound2][item : bound3 ] of theorem  [ thm : reigerbound ] , for @xmath149 . indeed",
    ", every two distinct codewords @xmath19 either differ on each of their first three positions ( if @xmath150 ) , or on each of their last three positions ( if @xmath151 ) , or on both their first and last positions ( if @xmath152 and @xmath153 ) ; in either case , the difference @xmath20 is not a @xmath154-burst and therefore condition  [ item : bound2 ] is satisfied .    as for condition  [ item : bound3 ] , suppose to the contrary that there exist three distinct codewords @xmath155 and respective three @xmath154-bursts @xmath156 such that @xmath157 since @xmath11 has been shown to satisfy condition  [ item : bound2 ] , the supports of @xmath158 , @xmath159 , and @xmath160 have to be distinct , which means that @xmath126 , @xmath161 , and @xmath162 can be assumed to take the form shown in figure  [ fig : badcodewords ] , with @xmath163 , @xmath164 , @xmath165 , and @xmath166 now being elements of @xmath0 .",
    "in particular , @xmath126 and @xmath161 agree on their last position , which is possible only if both belong to @xmath167 . similarly , @xmath161 and @xmath162 agree on their first position , implying that both belong to @xmath168 .",
    "thus , @xmath161 belongs to both @xmath167 and @xmath168 , which is a contradiction since these sets are disjoint .",
    "now , the redundancy of @xmath11 equals @xmath169 and , for @xmath170 , this number is smaller than @xmath171 , which is the lower bound we get for @xmath149 in theorem  [ thm : reigerbound ] .",
    "in fact , example  [ ex : n=4,tau = ell=2 ] attains the lower bound in the next result ( which applies to list size @xmath154 ; we will generalize this bound to larger @xmath23 in theorem  [ thm : reigerboundeveryell ] below ) .",
    "@xmath172{\\makebox[4ex]{$y_{#1}$ } } \\begin{array}{cc|cccccccccc| } \\cline{3 - 12 } { { { { \\bm{c}}}}}'_0 & & \\b & \\y{\\ell+1 } & \\y{\\ell+2 } & \\cdots & \\y{2\\ell-2 } & \\y{2\\ell-1 } \\\\",
    "\\cline{3 - 12 } { { { { \\bm{c}}}}}'_1 & & \\y{1 } & \\b & \\y{\\ell+2 } & \\y{\\ell+3 } & \\cdots & \\y{2\\ell-1 } \\\\ \\cline{3 - 12 } { { { { \\bm{c}}}}}'_2 & & \\y{1 } & \\y{2 } & \\b & \\y{\\ell+3 } & \\y{\\ell+4 } & \\cdots \\\\ \\cline{3 - 12 } \\multicolumn{12}{c } { } \\\\ \\vdots & \\multicolumn{1}{c } { } & \\vdots & \\vdots & & \\ddots & \\multicolumn{4}{c } { } & \\ddots & \\multicolumn{1}{c}{\\vdots } \\\\ \\multicolumn{12}{c } { } \\\\ \\cline{3 - 12 } { { { { \\bm{c}}}}}'_{\\ell-1 } & & \\y{1 } & \\y{2 } & \\cdots & \\y{\\ell-2 } & \\y{\\ell-1 } & \\b \\\\ \\cline{3 - 12 } \\end{array}\\ ] ]    [ prop : reigerboundell=2 ] let @xmath11 be a code of length @xmath2 over an alphabet of size @xmath1 and let @xmath5 be a positive integer that satisfies the following three conditions :    1 .",
    "@xmath5 is even and @xmath99 .",
    "[ item : boundell=2 ] there is a decoder for @xmath11 that detects any single @xmath5-burst error .",
    "3 .   there is a @xmath173-burst list decoder for @xmath11 .",
    "then the redundancy @xmath38 of @xmath11 satisfies @xmath174 in particular , @xmath175 .",
    "* proof . *",
    "write @xmath176 , and suppose to the contrary that @xmath177 ; namely , latexmath:[\\[\\label{eq : contradictingell=2 }    @xmath110 be the code of length @xmath113 as defined in the proof of theorem  [ thm : reigerbound ] ; recall that since @xmath11 satisfies the three conditions of the theorem , then so does @xmath110 . from  ( [ eq : contradictingell=2 ] )",
    "we get that @xmath179 that is , latexmath:[\\[\\label{eq : code ' }     let @xmath43 be a codeword of @xmath11 .",
    "we say that a codeword @xmath181 in @xmath11 is a _ right _",
    "( respectively , _ left _ ) _ neighbor _ of @xmath43 if @xmath43 and @xmath182 share the same suffix ( respectively , prefix ) of length @xmath131 .",
    "let @xmath183 ( respectively , @xmath184 ) be the set of all codewords of @xmath110 that have no right ( respectively , left ) neighbors . since the @xmath131-suffixes of the elements of @xmath183 must all be distinct , we must have @xmath185 .",
    "from  ( [ eq : code ] ) it follows that the set @xmath186 is nonempty ; hence , there is at least one @xmath131-block that does not appear as a @xmath131-suffix in any element in @xmath183 .",
    "thus , @xmath187 and , since the same upper bound applies to @xmath188 , we get @xmath189 we conclude that @xmath110 contains a codeword @xmath161 that has both a right neighbor @xmath126 and a left neighbor @xmath162 , and by condition  [ item : boundell=2 ] these two neighbors must be distinct . yet the codewords @xmath126 , @xmath161 , and @xmath162 form the violating configuration of figure  [ fig : badcodewords ] , thereby reaching a contradiction .",
    "the next lemma will be used to generalize proposition  [ prop : reigerboundell=2 ] to larger @xmath23 .",
    "[ lem : reigerboundtau = ell ] let @xmath23 be an integer greater than @xmath44 and let @xmath11 be a code of length @xmath190 over an alphabet of size @xmath46 .",
    "suppose that @xmath11 satisfies conditions  [ item : bound2][item : bound3 ] in theorem  [ thm : reigerbound ] for @xmath191",
    ". then @xmath192     * proof .",
    "* we prove the lemma by induction on @xmath23 . for any integer @xmath193 ,",
    "we denote by @xmath194 the size of the largest code @xmath11 of length @xmath190 that satisfies the conditions of the lemma .",
    "the induction base ( @xmath195 ) follows by substituting @xmath196 and @xmath197 in proposition  [ prop : reigerboundell=2 ] : we get @xmath198 .    turning to the induction step ,",
    "given an integer @xmath199 , let @xmath11 be a code of length @xmath190 and size @xmath194 that satisfies the conditions of the lemma .",
    "let the set @xmath167 consist of all codewords @xmath43 in @xmath11 with the property that no codeword in @xmath200 agrees with @xmath43 on its first @xmath201 positions",
    ". denote by @xmath168 the complement set @xmath202 .",
    "let @xmath203 be the set of all distinct @xmath204-prefixes of the words in @xmath168 .",
    "no element in @xmath203 can appear as an @xmath204-prefix in any codeword in @xmath167 and , so , @xmath205 since @xmath11 has a decoder that detects any single @xmath23-burst error , no two distinct words in @xmath168 can have the same @xmath23-prefix , which means that at most @xmath46 words in @xmath168 can share the same @xmath204-prefix .",
    "hence , @xmath206 and , so , @xmath207    for any element @xmath208 in the alphabet @xmath0 of @xmath11 , let @xmath209 denote the set of all codewords in @xmath168 that end with @xmath208 .",
    "there exists at least one element @xmath210 for which @xmath211 let the mapping @xmath212 be defined by @xmath213 namely , @xmath214 deletes ( punctures ) the entries of its argument at the @xmath23th and @xmath215th positions .",
    "denote by @xmath110 the set of images of this mapping : @xmath216 since @xmath217 satisfies condition  [ item : bound2 ] for @xmath191 , then @xmath110 has to satisfy that condition for @xmath218 ; furthermore , @xmath214 is bijective and , so , @xmath219 or @xmath220 combining the latter inequality with  ( [ eq : mell ] ) we thus get @xmath221    next , we show that @xmath110 has an @xmath222-burst list decoder . if this were not the case , then there would be a word @xmath223 in @xmath224 and respective @xmath23 words @xmath225 in @xmath110 that would form the violating configuration shown in figure  [ fig : badcodewords ] .",
    "the respective pre - images @xmath226 , all belonging to @xmath168 ( and hence to @xmath11 ) , would then look like the first @xmath23 rows in the configuration of figure  [ fig : badcodewords ] ( with each block @xmath227 therein replaced by the element @xmath228 of @xmath0 ) .",
    "recall , however , that since @xmath168 is the complement set of @xmath167 , each codeword in @xmath168 agrees on the first @xmath201 positions with at least one other codeword in @xmath168 . in particular , there is a codeword @xmath229 that agrees with @xmath230 on its first @xmath201 positions .",
    "the codeword @xmath128 could therefore serve as the last row in figure  [ fig : badcodewords ] , thereby contradicting the fact that @xmath11 has an @xmath231-burst list decoder .",
    "we conclude that @xmath110 has an @xmath222-burst list decoder and , so , @xmath232    combining the latter inequality with  ( [ eq : code1 ] ) we get @xmath233 the result now follows by the induction hypothesis on @xmath234 .",
    "[ thm : reigerboundeveryell ] let @xmath11 be a code of length @xmath2 over an alphabet of size @xmath1 and let @xmath23 and @xmath5 be positive integers that satisfy the following three conditions :    1 .",
    "@xmath98 , @xmath193 , and @xmath99 .",
    "2 .   there is a decoder for @xmath11 that detects any single @xmath5-burst error .",
    "3 .   there is an @xmath22-burst list decoder for @xmath11 .",
    "then the redundancy @xmath38 of @xmath11 satisfies @xmath235     * proof . *",
    "denote by @xmath0 the alphabet of @xmath11 , and let @xmath110 be defined as in the proof of theorem  [ thm : reigerbound ] .",
    "then @xmath110 is a code of length @xmath32 over @xmath0 which satisfies conditions  [ item : bound2][item : bound3 ] and latexmath:[\\[\\label{eq : code'tau = ell }    write @xmath100 . by grouping together non - overlapping @xmath131-blocks over @xmath0",
    ", we now regard @xmath110 as a code of length @xmath190 over @xmath237 . as such",
    ", @xmath110 satisfies the conditions of lemma  [ lem : reigerboundtau = ell ] for an alphabet of size @xmath238 .",
    "hence , @xmath239 which readily implies with  ( [ eq : codetau = ell ] ) that @xmath240 thus , the redundancy @xmath38 of @xmath11 satisfies @xmath241 as claimed .    in all our bounds",
    ", we have assumed that the code @xmath11 has a decoder that detects any single @xmath5-burst error ( condition  [ item : bound2 ] in all theorems ) .",
    "we have also mentioned in remark  [ rem : linear ] that when @xmath11 is linear and @xmath93 , then condition  [ item : bound2 ] is actually implied by condition  [ item : bound3 ] .",
    "one could therefore ask whether condition  [ item : bound2 ] is at all necessary in order to obtain our bounds .",
    "the next example answers this question affirmatively : it exhibits a code that does not satisfy condition  [ item : boundell=2 ] and it violates the bound of proposition  [ prop : reigerboundell=2 ] .",
    "[ ex : n=4,tau = ell=2 ] let @xmath0 be an alphabet of size @xmath1 , select @xmath242 to be a nonzero element in @xmath0 , and consider the code @xmath11 of length @xmath145 and size @xmath243 over @xmath0 which is defined as the union of the following two sets : @xmath244 and @xmath245 we show that @xmath11 has a @xmath246-burst list decoder ( while obviously , there is no decoder for @xmath11 that can detect any single @xmath154-burst error ) .",
    "suppose to the contrary that there exist three distinct codewords @xmath155 and respective three @xmath154-bursts @xmath156 such that @xmath157 since no two codewords in @xmath11 share the same @xmath154-suffix , there can be at most one @xmath154-burst ",
    "say @xmath158whose last two entries are zero . by symmetry , @xmath160",
    "( say ) is the only @xmath154-burst whose first two entries are zero .",
    "thus , @xmath159 can be zero only in its first and last positions , which brings us to the configuration of figure  [ fig : badcodewords ] ; namely , @xmath126 and @xmath162 are distinct right and left neighbors of @xmath161 ( see the proof of proposition  [ prop : reigerboundell=2 ] ) . however , this is impossible , since each codeword in @xmath11 has exactly one neighbor ( which is both a left neighbor and a right neighbor ) .",
    "note that the redundancy of @xmath11 equals @xmath247 , which is smaller than the lower bound that we get for @xmath196 in proposition  [ prop : reigerboundell=2 ] .",
    "the code in example  [ ex : n=4,tau = ell=2 ] attains the next bound .",
    "[ prop : withoutcondition2 ] let @xmath11 , @xmath46 , and @xmath5 be as in proposition  [ prop : reigerboundell=2 ] , except that @xmath11 is not required to satisfy condition  [ item : boundell=2 ] .",
    "then the redundancy @xmath38 of @xmath11 satisfies @xmath248     * proof .",
    "* we follow the steps of the proof of proposition  [ prop : reigerboundell=2 ] , except that  ( [ eq : contradictingell=2 ] ) is replaced by @xmath249 and  ( [ eq : code ] ) by @xmath250 let @xmath251 be the set of all codewords in @xmath110 that have a right neighbor which is also a left neighbor . by condition  [ item : bound3 ] , each codeword in @xmath251 has exactly one such neighbor ( which , obviously , is also an element of @xmath251 ) .",
    "also , no codeword in @xmath251 can have an ordinary neighbor ( left or right ) in @xmath252 , ( or else we would get the violating configuration of figure  [ fig : badcodewords ] ) .",
    "in particular , no @xmath131-suffix ( respectively , @xmath131-prefix ) of a codeword in @xmath251 can appear as such in a codeword that belongs to either @xmath183 or @xmath184 ( where @xmath183 and @xmath184 are as in the proof of proposition  [ prop : reigerboundell=2 ] ) .",
    "therefore , @xmath253 and , so , @xmath254 we conclude that @xmath110 contains a codeword @xmath161 that has a right neighbor @xmath126 and a left neighbor @xmath162 , and these neighbors are distinct . but",
    "this brings us again to the configuration in figure  [ fig : badcodewords ] , thereby reaching a contradiction .",
    "the example presented in appendix  [ sec : appa ] shows that , in general , theorem  [ thm : reigerboundeveryell ] and proposition  [ prop : withoutcondition2 ] no longer hold if we omit from condition  [ item : bound1 ] the assumption that @xmath5 is an integer multiple of @xmath23 .",
    "this section develops the tools that will be used in section  [ sec : rsbound ] to show that reed ",
    "solomon codes attain the bound  ( [ eq : reigerboundlinear ] ) .",
    "in particular , theorem  [ thm : determinant ] below presents a generalization of the known formula for the resultant of two polynomials , to a larger number of polynomials that have a certain structure .    for a field @xmath0 and an integer @xmath255 , denote by @xmath256 $ ] the set of all polynomials over @xmath0 of degree less than @xmath255 in the indeterminate @xmath257 .",
    "let @xmath0 be the finite field @xmath258 and let @xmath38 be a positive integer .",
    "fix @xmath259 to be a nonzero element in @xmath0 with multiplicative order at least @xmath38 , and let @xmath260 be a vector whose @xmath24 entries are all nonzero elements of @xmath0 .",
    "let @xmath261 be positive integers such that @xmath262 for @xmath61 , define @xmath263 and for an indeterminate @xmath257 , denote by @xmath264 the expression @xmath265 we regard @xmath264 as a univariate polynomial over @xmath0 in the indeterminate @xmath257 , with @xmath266 serving as a parameter .    in this section , we prove the following result .",
    "[ thm : tool ] the following two conditions are equivalent :    there exist polynomials @xmath267 , \\quad 0 \\le i",
    "\\le \\ell \\ ; , \\ ] ] not all zero , such that @xmath268    for some distinct @xmath7 and @xmath255 in the range @xmath269 and some integer @xmath270 in the range @xmath271 , @xmath272     * proof .",
    "* this theorem is implied by the considerations in the following paragraphs , in particular by theorem  [ thm : determinant ] .    for each @xmath273 , write @xmath274 ( where @xmath275 is a function of @xmath266 ) , and define @xmath276 to be the following @xmath277 echelon matrix over @xmath0 : @xmath278 then , ( [ eq : poldeg])([eq : polsum ] )",
    "can be expressed in matrix form as @xmath279 where each @xmath118 is a row vector in @xmath280 , and at least one of these vectors is nonzero .",
    "equivalently , @xmath281 where @xmath282 is a nonzero vector in @xmath283 and @xmath284 is the following @xmath285 matrix over @xmath0 : @xmath286    [ thm : determinant ] for some nonzero constant @xmath287 ( which depends on @xmath259 but not on @xmath288 ) , @xmath289    to prove the latter theorem , we regard @xmath288 as a vector of indeterminates and @xmath290 as a multivariate polynomial over @xmath0 . the properties of this polynomial are summarized in lemmas  [ lem : nonzero][lem : factor ] below , and theorem  [ thm : determinant ] will then follow as a direct corollary of these properties .    given a vector @xmath291 , we denote by @xmath292 the @xmath293 vandermonde matrix @xmath294 we will use the notation @xmath295 for @xmath296 .    [",
    "lem : nonzero ] the multivariate polynomial @xmath297 is not identically zero .",
    "* we find an assignment @xmath298 for @xmath288 for which @xmath299 .",
    "for @xmath61 , define the partial sums @xmath300 and @xmath301 taking the product of @xmath302 and @xmath303 , one can check that the nonzero columns of the resulting @xmath277 matrix @xmath304 are indexed by integers @xmath8 in the range @xmath305 . furthermore ,",
    "the @xmath306 columns that are indexed by @xmath307 ( with @xmath308 ) form a @xmath309 nonsingular matrix @xmath310 which is obtained by multiplying a vandermonde matrix to the right by a diagonal matrix ; specifically : @xmath311 it follows that the respective matrix @xmath312 has a block - triangular form and , so , @xmath313    [ lem : degree ] for each @xmath61 , the degree of @xmath266 in @xmath297 is at most @xmath314 .     * proof . * by inspecting the matrix @xmath315 we see that the largest contribution to the degree of @xmath266 can be made by the leftmost ( main ) diagonal in @xmath276 : the product of the elements along that diagonal is @xmath316 and , so , the degree of @xmath266 in @xmath297 can be at most @xmath314 .",
    "[ lem : factor ] for every distinct @xmath317 , the multivariate polynomial @xmath297 is divisible by @xmath318     * proof .",
    "* due to symmetry , it suffices to prove the lemma assuming @xmath319 . hereafter in this proof , we fix @xmath255 to be some element in @xmath320 . while it is not too difficult to see that @xmath321 is a factor of @xmath297 , we also need to establish the multiplicity of that factor .",
    "we do this by introducing @xmath322 new indeterminates which are given by the entries of the following vector @xmath323 : @xmath324 we define the respective polynomials @xmath325 and regard them as univariate polynomials in the indeterminate @xmath257 over the field @xmath326 namely , @xmath327 is the rational function field over @xmath0 where the indeterminates are all the entries of @xmath288 and @xmath323 , except for @xmath328 .",
    "( the analysis in the sequel will involve univariate polynomials in the indeterminate @xmath328 over @xmath327 , as well as the rational function field @xmath329 . ) notice that when we substitute @xmath330 , we get @xmath331    let @xmath332 be the @xmath333 matrix over @xmath327 whose rows are given by the coefficients of @xmath334 , for @xmath335 ( i.e. , entry @xmath336 in @xmath332 is the coefficient of @xmath337 in @xmath334 ) .",
    "it follows from  ( [ eq : sigma0m0 ] ) that when we substitute @xmath338 , then @xmath339 and @xmath340 are related by @xmath341 where @xmath342 is a @xmath343 lower - triangular matrix having @xmath44 s along its main diagonal .",
    "let @xmath344 be the following @xmath285 matrix over the field @xmath329 : @xmath345 from  ( [ eq : s0a0 ] ) we get that , in @xmath329 , @xmath346    let @xmath347 be the following univariate polynomial in the indeterminate @xmath328 over @xmath327 : @xmath348 we verify that for every @xmath349 and every @xmath350 in the range @xmath351 the element @xmath352 is a root of @xmath347 .",
    "we do this by demonstrating that for any such @xmath270 and @xmath350 , the rows of @xmath353 are linearly dependent over @xmath327 .",
    "specifically , we exhibit nonzero @xmath354 and @xmath355 such that @xmath356 given @xmath270 and @xmath350 , let @xmath357 be the following univariate polynomial over @xmath327 : @xmath358 since @xmath359 we have @xmath360 so we can take @xmath282 to be the vector of coefficients of @xmath357 .",
    "we readily get that @xmath361 hence , ( [ eq : uv ] ) holds when @xmath9 is taken as a unit vector having @xmath44 at position @xmath350 .",
    "we conclude that , over @xmath327 , the polynomial @xmath347 is divisible by @xmath362 substituting @xmath363 , it follows that @xmath364 is divisible by @xmath365 and , by  ( [ eq : dets])([eq : f ] ) , so is @xmath297 .     *",
    "* the right - hand side of  ( [ eq : determinant ] ) factors over @xmath0 as follows : for every distinct @xmath317 and every @xmath349 , the term @xmath366 has multiplicity @xmath367 in the right - hand side of  ( [ eq : determinant ] ) ( for @xmath368 , we regard @xmath369 and @xmath370 as the same term ) . by lemma  [ lem : factor ]",
    "we then get that the right - hand side of  ( [ eq : determinant ] ) divides @xmath297 . furthermore , for each @xmath371 , the degree of @xmath266 in the right - hand side of  ( [ eq : determinant ] ) equals @xmath372 hence , by lemmas  [ lem : nonzero ] and  [ lem : degree ] we conclude that that the right - hand side of  ( [ eq : determinant ] ) actually equals @xmath297 .    the exact expression for @xmath373 is given in appendix  [ sec : appb ] .",
    "for @xmath29 ( in which case @xmath374 ) , the matrix @xmath315 is the sylvester matrix  @xcite of the polynomials @xmath375 and @xmath376 ( up to reversal of the order of the rows and columns ) , and theorem  [ thm : determinant ] then provides the known formula for the resultant of these polynomials  @xcite .    for @xmath377 ( in which case @xmath378 for all @xmath7 ) ,",
    "the matrix @xmath315 is related to the @xmath285 vandermonde matrix @xmath379 by @xmath380 where @xmath381 is the transpose of @xmath379 and where @xmath382 does not depend on @xmath288 and is zero below its main anti - diagonal .",
    "theorem  [ thm : determinant ] then provides the known formula for the determinant of a square vandermonde matrix .",
    "the goal of this section is to show that the well - known reed  solomon codes achieve the generalized reiger bound for linear codes ( see  equation  ( [ eq : reigerboundlinear ] ) in remark  [ rem : linear ] ) .",
    "let @xmath0 be the finite field @xmath258 and let @xmath259 be an element of multiplicative order @xmath2 in @xmath0 . for a nonnegative integer @xmath383 , denote by @xmath384 the @xmath385 $ ] reed  solomon code over @xmath0 with a parity - check matrix @xmath386",
    "the following theorem shows that @xmath384 attains the bound  ( [ eq : reigerboundlinear ] ) .",
    "[ thm : rsbound ] let @xmath23 and @xmath5 be positive integers such that @xmath387 then there is an @xmath22-burst list decoder for @xmath384 .     * proof .",
    "* we will assume in the proof that  ( [ eq : rsbound ] ) holds with equality ; otherwise , just reduce @xmath38 to the right - hand side of  ( [ eq : rsbound ] ) . recalling the coset characterization of @xmath5-burst errors in section  [ sec : gen : reiger : bound : group :",
    "codes:1 ] , we suppose to the contrary that there exist @xmath24 distinct row vectors @xmath388 such that @xmath389 where the support of each @xmath27 is contained in a subset @xmath390 here each @xmath391 is an integer in the range @xmath392 . we observe that since the minimum distance of @xmath384 is @xmath393 , for every distinct @xmath317 we must have @xmath394 which readily implies that for @xmath395 , @xmath396 thus , for every distinct @xmath317 , @xmath397 where @xmath398    the sum of the sizes of the sets @xmath33 is @xmath399 , and this value may be smaller than @xmath400 in case @xmath5 is not divisible by @xmath23 . for convenience in the sequel , we will now artificially expand some of the sets @xmath33 by one , by adding the element @xmath401 , so that the sum of the sizes becomes exactly @xmath400 .",
    "letting @xmath402 be the size of ( the possibly expanded ) @xmath33 and defining @xmath403 we have @xmath404 ( see  ( [ eq : mui ] ) ) .",
    "denote by @xmath405 the @xmath406 sub - matrix of @xmath407 which is formed by the columns of @xmath408 that are indexed by @xmath33 , namely : @xmath409 define the @xmath285 matrix @xmath410 by @xmath411{$i_i$ } & \\makebox[2ex]{$0 $ } \\\\",
    "\\hline \\multicolumn{2}{c}{a_i(\\alpha^{\\lambda_i } ) } \\end{array } \\right ) \\ ; , \\ ] ] where @xmath412 is a @xmath413 identity matrix and @xmath414 is given by  ( [ eq : ai ] ) .",
    "notice that @xmath415 and , so , the product @xmath416 results in an @xmath406 matrix @xmath417 which takes the following form : @xmath418 specifically , the first @xmath402 rows of this matrix form a nonsingular square vandermonde matrix , whereas the remaining @xmath306 rows are all zero .",
    "consider the following @xmath419 matrix @xmath420 : @xmath421{\\multicolumn{1}{|c|}{\\makebox[2ex]{$#1 $ } } } b =   \\left ( \\ ; \\renewcommand{\\arraystretch}{2.0 } \\newcommand{\\bigzero}{\\textrm{\\huge{0 } } } \\arraycolsep2.5ex \\begin{array}{ccccc } \\cline{1 - 2 } \\matblock{h_0 } & \\matblock{-h_1 } & & \\multicolumn{2}{c}{\\bigzero }      \\\\ \\cline{1 - 3 } \\matblock{h_0 } & & \\matblock{-h_2 } & &                                  \\\\ \\cline{1 - 1}\\cline{3 - 3 } \\vdots          & & & \\ddots           &                                  \\\\ \\cline{1 - 1}\\cline{5 - 5 } \\matblock{h_0 } &   \\multicolumn{2}{c}{\\bigzero } & & \\matblock{-h_\\ell } \\\\",
    "\\cline{1 - 1}\\cline{5 - 5 } \\end{array } \\ ;",
    "\\right ) \\ ; .\\ ] ] next , we multiply @xmath420 to the left by an @xmath419 block - diagonal matrix @xmath422 which contains the blocks @xmath423 along its main diagonal : @xmath421{\\multicolumn{1}{|c|}{\\makebox[2ex]{$#1 $ } } } t b =   \\left ( \\ ; \\renewcommand{\\arraystretch}{2.0 } \\newcommand{\\bigzero}{\\textrm{\\huge{0 } } } \\arraycolsep2.5ex \\begin{array}{ccccc } \\cline{1 - 2 } \\matblock{z_1 } & \\matblock{-y_1 } & & \\multicolumn{2}{c}{\\bigzero }      \\\\ \\cline{1 - 3 } \\matblock{z_2 } & & \\matblock{-y_2 } & &                                  \\\\ \\cline{1 - 1}\\cline{3 - 3 } \\vdots          & & & \\ddots           &                                  \\\\ \\cline{1 - 1}\\cline{5 - 5 } \\matblock{z_\\ell}&\\multicolumn{2}{c}{\\bigzero } & & \\matblock{-y_\\ell } \\\\",
    "\\cline{1 - 1}\\cline{5 - 5 } \\end{array } \\ ;",
    "\\right ) \\ ; , \\ ] ] where @xmath417 is given by  ( [ eq : yi ] ) and @xmath424 our contradicting assumption  ( [ eq : samesyndrome ] ) implies that @xmath420 has dependent columns and is therefore singular .",
    "this , in turn , implies the singularity of the @xmath425 matrix @xmath426 which is formed by taking the last @xmath306 rows of each @xmath427 and stacking them together for all @xmath428 ( notice that @xmath429 ) .",
    "hence , there exist row vectors @xmath430 , not all zero , such that @xmath431 and @xmath432 equivalently , there exist polynomials @xmath433 \\ ; , \\quad 1 \\le i \\le \\ell \\ ; , \\ ] ] not all zero , such that @xmath434 but the latter condition means that the polynomial @xmath435 ( which is in @xmath436 $ ] ) is divisible by @xmath437 ; namely , there exists a @xmath438 $ ] such that @xmath439 we then get from theorem  [ thm : tool ] that there exist distinct @xmath317 such that @xmath440 this , however , contradicts  ( [ eq : lambda ] ) .    [ [ section ] ]",
    "we demonstrate here that , in general , theorems  [ thm : reigerbound ] and  [ thm : reigerbound ] no longer hold if condition  [ item : bound1 ] therein is relaxed to requiring only that @xmath97 .",
    "specifically , we present an example of a linear code @xmath11 of length @xmath441 and redundancy @xmath442 over @xmath91 which satisfies conditions  [ item : bound2 ] and  [ item : bound3 ] in the theorem for @xmath195 and @xmath443 . for these parameters , condition  [ item : bound1 ] in theorems  [ thm : reigerbound ] and  [ thm : reigerbound ] is violated , and the redundancy lower bounds in these theorems indeed do not hold . in particular , the specialized redundancy lower bound  ( [ eq : reigerboundlinear ] ) for linear codes in remark  [ rem : linear ] does not hold either .",
    "the code @xmath11 is generated by the matrix @xmath444 where the stars stand hereafter for arbitrary elements of @xmath0 . since the rows of @xmath445 form a diagonal band of @xmath446-bursts , it follows that none of the nonzero codewords of @xmath11 is a @xmath145-burst and , so , @xmath11 satisfies condition  [ item : bound2 ] of theorem  [ thm : reigerbound ] .",
    "furthermore , if @xmath447 for distinct codewords @xmath448 and nonzero @xmath171-burst errors @xmath158 and @xmath159 , then the leftmost entries in @xmath158 and @xmath159 have to be at least two positions apart .",
    "( similarly , the rightmost entries in @xmath158 and @xmath159 have to be at least two positions apart . )",
    "we next show that a violating configuration @xmath449 can not exist ( for distinct @xmath155 ) by distinguishing between several cases .    _",
    "case  1 : _ suppose to the contrary that there exists a violating configuration with error words of the form @xmath450 and assume without loss of generality that @xmath451 .",
    "then , from @xmath452 we deduce that @xmath126 takes the form @xmath453 which means that @xmath126 has to be a nonzero scalar multiple of the first row of @xmath445 .",
    "also , from @xmath454 we get that @xmath455 which means that @xmath162 is a nonzero scalar multiple of the third row in @xmath445 .",
    "therefore , the fourth position in @xmath126 is zero while it is nonzero in @xmath162 , and this , in turn , implies that the fourth position in @xmath456 is nonzero also .",
    "yet , the latter contradicts the fact that @xmath457 .",
    "_ case  2 : _ suppose now that the violating configuration takes the form @xmath458 ( @xmath158 and @xmath159 are as in case  1 , yet the support of @xmath160 is shifted one position to the right ) . assuming again that @xmath451 , we get that @xmath126 has to be a nonzero scalar multiple of the first row of @xmath445 while @xmath162 has to be a nonzero linear combination of the last two rows of @xmath445 . hence , the fifth position in @xmath456 can not be zero , yet this contradicts the fact that @xmath457 .",
    "there are two other violating configurations to consider , which are obtained by reversing the order of coordinates in the error patterns covered by cases  1 and  2 .",
    "the proof of contradiction remains the same due to the symmetries of @xmath445 .",
    "the code @xmath11 also serves to demonstrate that for @xmath459 , theorem  [ thm : reigerboundeveryell ] becomes false if we remove from condition  [ item : bound1 ] therein the assumption that @xmath5 is an integer multiple of @xmath23 .",
    "a similar statement holds for proposition  [ prop : withoutcondition2 ] and @xmath460 .",
    "for the sake of completeness , we compute here the constant @xmath373 which appears in the right - hand side of  ( [ eq : determinant ] ) in theorem  [ thm : determinant ] .",
    "we continue where we left off in the proof of lemma  [ lem : nonzero ] and obtain an expression for @xmath461 using  ( [ eq : dethata ] ) .    to this end , we first compute the determinant of the matrix @xmath310 defined in  ( [ eq : xi ] ) : @xmath462 { } \\cdot \\bigl .",
    "\\prod_{t = s+1}^{\\mu_i-1 }   ( \\alpha^{r_{i-1 } + t } - \\alpha^{r_{i-1 } + s } ) \\bigr ) \\\\ & = & ( -1)^{\\mu_i \\tau_i } \\prod_{s=0}^{\\mu_i-1 }   \\bigl ( \\prod_{t=0}^{\\tau_i-1 } ( \\alpha^{r_i + t } - \\alpha^{r_{i-1 } + s } ) \\bigr .",
    "\\\\ & & \\makebox[10ex ] { } \\cdot \\prod_{t = s+1}^{\\mu_i-1 }   ( \\alpha^{r_{i-1 } + t } - \\alpha^{r_{i-1 } + s } ) \\bigr ) \\\\ & = & ( -1)^{\\mu_i \\tau_i } \\prod_{s=0}^{\\mu_i-1 }   \\prod_{t = s+1}^{r-1 } ( \\alpha^{r_{i-1 } + t } - \\alpha^{r_{i-1 } + s } ) \\\\ & = & ( -1)^{\\mu_i ( r - \\mu_i ) } \\cdot \\alpha^{r_{i-1 } \\mu_i ( r - ( \\mu_i+1)/2 ) } \\\\ & & \\makebox[10ex ] { } \\cdot \\prod_{s=0}^{\\mu_i-1 }   \\prod_{t = s+1}^{r-1 } ( \\alpha^t - \\alpha^s ) \\ ; .\\end{aligned}\\ ] ] plugging the latter expression into  ( [ eq : dethata ] ) ( and noting that @xmath463 is always even ) , we obtain @xmath464 { } \\cdot \\bigl ( \\prod_{i=0}^\\ell \\prod_{s=0}^{\\mu_i-1 }   \\prod_{t = s+1}^{r-1 } ( \\alpha^t - \\alpha^s )   \\bigr ) \\nonumber \\\\ \\label{eq : altdethata } & = & \\frac{\\alpha^{p - q}}{\\det(v_r ) } \\prod_{i=0}^\\ell \\prod_{s=0}^{\\mu_i-1 }   \\prod_{t = s+1}^{r-1 } ( \\alpha^t - \\alpha^s ) \\ ; , \\end{aligned}\\ ] ] where @xmath465 and @xmath466      from  ( [ eq : determinant ] ) we get @xmath470 { } \\\\ & = & \\kappa(\\alpha ) \\cdot \\prod_{0 \\le i < k \\le \\ell } \\prod_{s=0}^{\\mu_i-1 } \\prod_{t=0}^{\\mu_k-1 } ( \\alpha^{r_k + s } - \\alpha^{r_i + t } ) \\\\ & = & \\kappa(\\alpha ) \\cdot \\alpha^n \\cdot \\prod_{0 \\le i < k \\le \\ell } \\prod_{s=0}^{\\mu_i-1 } \\prod_{t=0}^{\\mu_k-1 } ( \\alpha^{r_k -t - 1 } - \\alpha^{r_i - s - 1 } ) \\\\ & = & \\kappa(\\alpha ) \\cdot \\alpha^n \\cdot \\prod_{0 \\le i < k \\le \\ell } \\prod_{s=0}^{\\mu_i-1 } \\prod_{t=0}^{\\mu_k-1 } ( \\alpha^{r_{k-1 } + t } - \\alpha^{r_{i-1 } + s } ) \\\\ & = & \\kappa(\\alpha ) \\cdot \\alpha^n \\cdot \\det(v_r ) \\\\ & & \\makebox[10ex ] { } { } \\cdot   \\bigl ( \\prod_{i=0}^\\ell \\prod_{s=0}^{\\mu_i-1 } \\prod_{t = s+1}^{\\mu_i-1 } ( \\alpha^{r_{i-1 } + t } - \\alpha^{r_{i-1 } + s } ) \\bigr)^{-1 } \\\\ & = & \\kappa(\\alpha ) \\cdot \\alpha^n \\cdot \\det(v_r ) \\\\ & & \\makebox[10ex ] { } { } \\cdot   \\left ( \\prod_{i=0}^\\ell \\bigl ( \\alpha^{r_{i-1 } \\mu_i(\\mu_i-1)/2 } \\det(v_{\\mu_i } ) \\bigr ) \\right)^{-1 } \\\\ & = & \\kappa(\\alpha ) \\cdot \\alpha^{n - q } \\cdot \\det(v_r ) \\bigl ( \\prod_{i=0}^\\ell \\det(v_{\\mu_i } ) \\bigr)^{-1 } \\ ; .\\end{aligned}\\ ] ] the last expression should be equal to  ( [ eq : altdethata ] ) ; so , @xmath471 { } \\\\ & = & \\frac{\\delta({{\\textrm{\\boldmath{$\\beta$}}}}^ * ) \\cdot \\alpha^{q - n}}{\\det(v_r ) } \\prod_{i=0}^\\ell \\det(v_{\\mu_i } ) \\\\ & = & \\frac{\\alpha^{p - q+q - n}}{(\\det(v_r))^2 } \\bigl ( \\prod_{i=0}^\\ell \\det(v_{\\mu_i } ) \\bigr ) \\prod_{i=0}^\\ell \\prod_{s=0}^{\\mu_i-1 }   \\prod_{t = s+1}^{r-1 } ( \\alpha^t - \\alpha^s ) \\\\ & = & \\frac{\\alpha^{p - n}}{(\\det(v_r))^2 } \\prod_{i=0}^\\ell \\left ( ( \\det(v_{\\mu_i}))^2 \\prod_{s=0}^{\\mu_i-1 }   \\prod_{t=\\mu_i}^{r-1 } ( \\alpha^t - \\alpha^s ) \\right ) \\ ; , \\end{aligned}\\ ] ] where @xmath472            a.  vardy and f.  parvaresh , `` correcting errors beyond the guruswami ",
    "sudan radius in polynomial time , '' in _ proc .  of the 46th symp .",
    "foundations of computer science ( focs ) _ , pittsburgh , pa , 2005 , pp .  285294 .    v.  guruswami and a.  rudra , `` explicit codes achieving list decoding capacity : error - correcting up to the singleton bound , '' in _ proc .  of the 38th annual acm symp .",
    "theory of computing ( stoc ) _ , seattle , wa , 2006 , pp ."
  ],
  "abstract_text": [
    "<S> a generalization of the reiger bound is presented for the list decoding of burst errors . </S>",
    "<S> it is then shown that reed  </S>",
    "<S> solomon codes attain this bound .    </S>",
    "<S> * keywords : * burst errors , list decoding , reiger bound , reed </S>",
    "<S>  solomon codes , resultant . </S>"
  ]
}