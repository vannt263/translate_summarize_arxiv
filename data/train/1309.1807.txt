{
  "article_text": [
    "aggregate nearest neighbor ( ann ) searching @xcite , also called group nearest neighbor searching , is a generalization of the fundamental nearest neighbor searching problem @xcite , where the input of each query is a set of points and the result of the query is based on applying some _ aggregate _ operator ( e.g. ,  and ) on all query points . in this paper , we consider the ann searching on the  operator for both @xmath4 and @xmath5 metrics in the plane .",
    "for any two points @xmath17 and @xmath18 , let @xmath19 denote the distance between @xmath17 and @xmath18 .",
    "let @xmath0 be a set of @xmath1 points in the plane .",
    "given any query set @xmath2 of @xmath3 points , the ann query asks for a point @xmath17 in @xmath0 such that @xmath20 is minimized , where @xmath20 is the _ aggregate function _ of the distances from @xmath17 to the points of @xmath2 .",
    "the aggregate functions commonly considered are , i.e. , @xmath21 , and , i.e. , @xmath22 . if the operator for @xmath23 is  ( resp .",
    ", ) , we use ( resp . , ) to denote the problem .    in this paper , we focus on  in the plane for both @xmath4 and @xmath5 versions where the distance @xmath19 is measured by @xmath4 and @xmath5 metrics , respectively .",
    "previously , only heuristic and approximation algorithms were given for both versions .",
    "for the @xmath4 version , we build a data structure of @xmath6 size in @xmath7 time , such that each query can be answered in @xmath8 time . for the @xmath5 version ,",
    "we build a data structure in @xmath7 time and @xmath9 space , such that each query can be answered in @xmath10 time , and alternatively , we build a data structure in @xmath11 time and space for any @xmath12 , such that each query can be answered in @xmath13 time .    furthermore , we extend our result for the @xmath4 version to the following  _ top-@xmath14 _ queries .",
    "in addition to a query set @xmath2 , each top-@xmath14 query is also given an integer @xmath14 with @xmath15 , and the query asks for the @xmath14 points @xmath17 of @xmath0 whose values @xmath20 are the smallest .",
    "we build a data structure of @xmath6 size in @xmath7 time , such that each @xmath4  top-@xmath14 query can be answered in @xmath16 time .      for , papadias et al .",
    "@xcite presented a heuristic minimum bounding method with worst case query time @xmath24 for the @xmath5 version . recently ,",
    "@xcite gave more results on the @xmath5  ( the queries were called _ group enclosing queries _ ) . by using @xmath25-tree @xcite , li et al .",
    "@xcite gave an exact algorithm to answer queries , and the algorithm is very fast in practice but theoretically the worst case query time is still @xmath24 .",
    "@xcite also gave a @xmath26-approximation algorithm with query time @xmath8 and the algorithm works for any fixed dimensions , and they further extended the algorithm to obtain a @xmath27-approximation result . to the best of our knowledge , we are not aware of any previous work that is particularly for the @xmath4 . however , li et al . @xcite proposed the _ flexible _ ann queries , which extend the classical ann queries , and they provided an @xmath28-approximation algorithm that works for any metric space in any fixed dimension .    for , a @xmath29-approximation solution is given in @xcite for the @xmath5 version .",
    "agarwal et al .",
    "@xcite studied nearest neighbor searching under uncertainty , and their results can give an @xmath27-approximation solution for the @xmath5  queries .",
    "they @xcite also gave an exact algorithm that can solve the @xmath4  problem and an improvement based on their work has been made in @xcite .",
    "there are also other heuristic algorithms on ann queries , e.g. , @xcite .",
    "comparing with @xmath1 , the value @xmath3 is relative small in practice .",
    "ideally we want a solution that has a query time @xmath30 .",
    "our @xmath4  solution is the first - known exact solution and is likely to be the best - possible . comparing with the heuristic result @xcite with @xmath31 worst case query time , our @xmath5  solution use @xmath30 query time for small @xmath3 ; it should be noted that the methods in @xcite uses only @xmath6 space while the space used in our approach is larger .    in the following ,",
    "we give our algorithm for the @xmath4  queries in section [ sec : l1 ] and its extension to the top-@xmath14 is also given in the same section .",
    "our result for the @xmath5 metric is presented in section [ sec : l2 ] .",
    "in this section , we present our solution for the @xmath4 version of  queries as well as its extension to the top-@xmath14 queries .",
    "we first focus on the  queries . given any query point set @xmath2 , our goal is to find the point @xmath32 such that @xmath21 is minimized for the @xmath4 distance @xmath19 , and we denote by @xmath33 the above sought point .    for each point",
    "@xmath17 in the plane , denote by @xmath34 the farthest point of @xmath2 to @xmath17 .",
    "we show below that @xmath34 must be an extreme point of @xmath2 along one of the four _ diagonal _ directions : northeast , northwest , southwest , southeast .",
    ": @xmath2 consists of all points except @xmath17 and @xmath35 is in the fourth quadrant . ]    : @xmath2 consists of all points except @xmath17 and @xmath35 is in the fourth quadrant . ]",
    "let @xmath36 be a ray directed to the `` northeast '' , i.e. , the angle between @xmath37 and the @xmath38-axis is @xmath39 .",
    "let @xmath35 be an extreme point of @xmath2 along @xmath36 ( e.g. , see fig .",
    "[ fig : extreme ] ) ; if there is more than one such point , we let @xmath35 be an arbitrary such point .",
    "similarly , let @xmath40 , @xmath41 , and @xmath42 be the extreme points along the directions northwest , southwest , and southeast , respectively .",
    "let @xmath43 .",
    "note that @xmath44 may have less than four _ distinct _",
    "points if two or more points of @xmath44 refer to the same ( physical ) point of @xmath2 .",
    "the following lemma shows that @xmath20 is determined only by the points of @xmath44 .",
    "[ lem:10 ] for any point @xmath17 in the plane , @xmath45 holds .",
    "let @xmath17 be any point in the plane .",
    "if @xmath46 , the lemma simply follows , otherwise , we show below that there exists a point @xmath47 such that @xmath48 , which proves the lemma .",
    "the vertical line and horizontal line through the point @xmath17 partition the plane into four quadrants . without loss of generality ,",
    "we assume @xmath34 is in the first quadrant ( i.e. , the northeast quadrant ) including its boundary , and we denote the quadrant by @xmath25 . recall that @xmath49 is an extreme point of @xmath2 along the northeast direction . depending on whether @xmath50 , there are two cases .    1 .",
    "if @xmath50 , since @xmath35 is an extreme point of @xmath2 along the northeast direction , we have @xmath51 . due to @xmath52 ,",
    "@xmath53 holds .",
    "2 .   if @xmath54",
    ", then since @xmath34 is in @xmath25 , by the definition of @xmath35 , @xmath35 is either in the second quadrant or in the fourth quadrant . without loss of generality , we assume @xmath35 is in the fourth quadrant ( e.g. , see fig .  [",
    "fig : fourth ] ) .",
    "+ let @xmath55 be the line through @xmath35 with slope @xmath56 and denote by @xmath57 the line segment that is the intersection of @xmath55 and @xmath25 . according to the definition of the @xmath4 distance measure , all points on @xmath57 have the same @xmath4 distance to @xmath17 , and we denote by @xmath58 the @xmath4 distance between @xmath17 and any point on @xmath57 . since @xmath35 is an extreme point of @xmath2 along the northeast direction , all points of @xmath2 are below or on the line @xmath55 .",
    "this implies @xmath59 for any @xmath60 , and in particular , @xmath61 . on the other hand , @xmath35 is on @xmath55 and @xmath54 , we have @xmath62 .",
    "hence , we obtain @xmath53 .",
    "the lemma thus follows .",
    "based on lemma [ lem:10 ] , for any point @xmath17 in the plane , to determine @xmath20 , we only need to consider the points in @xmath44 .",
    "note that a point may have more than one farthest point in @xmath2 .",
    "if @xmath17 has only one farthest point in @xmath2 , then @xmath34 is in @xmath44 .",
    "otherwise , @xmath34 may not be in @xmath44 , and for convenience we re - define @xmath34 to be the farthest point of @xmath17 in @xmath44 .    for each @xmath63 , let @xmath64 , i.e. , @xmath65 consists of the points of @xmath0 whose farthest points in @xmath2 are @xmath66 , and let @xmath67 be the nearest point of @xmath66 in @xmath65 . to find @xmath33 , we have the following lemma .",
    "[ lem:20 ] @xmath33 is the point @xmath68 for some @xmath69 with @xmath70 , such that @xmath71 holds for any @xmath63 .",
    "recall that @xmath33 is the point @xmath32 such that the value @xmath72 is minimized . by their definitions , we have the following : @xmath73 the lemma thus follows .",
    "based on lemma [ lem:20 ] , to determine @xmath33 , it is sufficient to determine @xmath67 for each @xmath63 . to this end , we make use of the farthest voronoi diagram @xcite of the four points in @xmath44 , which is also the farthest voronoi diagram of @xmath2 by lemma [ lem:10 ] .",
    "denote by @xmath74 the farthest voronoi diagram of @xmath44 .",
    "since @xmath44 has only four points , @xmath74 can be computed in constant time , e.g. , by an incremental approach .",
    "each point @xmath75 defines a cell @xmath76 in @xmath74 such that every point @xmath77 is farthest to @xmath66 among all points of @xmath44 . in order to compute the four points @xmath67 with @xmath78",
    ", we first show in the following that each cell @xmath76 has certain special shapes that allow us to make use of the segment dragging queries @xcite to find the four points efficiently .",
    "note that for each @xmath63 , @xmath79 and thus @xmath67 is the nearest point of @xmath80 to @xmath66 .",
    "in fact , the following discussion also gives an incremental algorithm to compute @xmath74 in constant time .",
    "we first briefly discuss the bisectors of the points based on the @xmath4 metric .",
    "in fact , the @xmath4 bisectors have been well studied ( e.g. , @xcite ) and we discuss them here for completeness and some notation introduced here will also be useful later when we describe our algorithm .",
    "for any two points @xmath18 and @xmath81 in the plane , define @xmath82 as the region of the plane that is the locus of the points farther to @xmath18 than to @xmath81 , i.e. , @xmath83 .",
    "the _ bisector _ of @xmath18 and @xmath81 , denoted by @xmath84 , is the locus of the points that are equidistant to @xmath18 and @xmath81 , i.e. , @xmath85 . in order to discuss the shapes of the cells of @xmath74",
    ", we need to elaborate on the shape of @xmath84 , as follows .",
    "let @xmath86 be the rectangle that has @xmath18 and @xmath81 as its two vertices on diagonal positions ( e.g. , see fig .",
    "[ fig : bisector ] ) .",
    "in the special case where the line segment @xmath87 is axis - parallel , the rectangle @xmath86 is degenerated into a line segment and @xmath84 is the line through the midpoint of @xmath87 and perpendicular to @xmath87 .",
    "below , we focus on the general case where @xmath87 is not axis - parallel . without loss of generality , we assume @xmath18 and @xmath81 are northeast and southwest vertices of @xmath86 , and other cases are similar .",
    "( the solid curve ) for @xmath18 and @xmath81 . in ( c ) , since @xmath86 is a square , the two shaded quadrants are entirely in @xmath84 , but for simplicity , we only consider the two vertical bounding half - lines as in @xmath84 . ]    the bisector @xmath84 consists of two half - lines and one line segment in between ( e.g. , see fig .",
    "[ fig : bisector ] ) ; the two half - lines are either both horizontal or both vertical .",
    "more specifically , let @xmath55 be the line of slope @xmath56 that contains the midpoint of @xmath87 .",
    "let @xmath88 , and @xmath89 and @xmath90 are on the boundary of @xmath86 .",
    "note that if @xmath86 is a square , then @xmath89 and @xmath90 are the other two vertices of @xmath86 than @xmath18 and @xmath81 ; otherwise , neither @xmath89 nor @xmath90 is a vertex .",
    "we first discuss the case where @xmath86 is not a square ( e.g. , see fig .",
    "[ fig : bisector ] ( a ) and ( b ) ) .",
    "let @xmath91 be the line through @xmath89 and perpendicular to the edge of @xmath86 that contains @xmath89 .",
    "the point @xmath89 divides @xmath91 into two half - lines , and we let @xmath92 be the one that doest not intersect @xmath86 except @xmath89 .",
    "similarly , we define the half - line @xmath93 .",
    "note that @xmath92 and @xmath93 must be parallel .",
    "the bisector @xmath84 is the union of @xmath92 , @xmath94 , and @xmath93 .    if @xmath86 is a square , then @xmath89 and @xmath90 are both vertices of @xmath86 ( e.g. , see fig .  [ fig : bisector ] ( c ) ) . in this case ,",
    "a quadrant of @xmath89 and a quadrant of @xmath90 belong to the bisector @xmath84 , but for simplicity , we consider @xmath84 as the union of @xmath94 and the two vertical bounding half - lines of the two quadrants .",
    "we call @xmath94 the _ middle segment _ of @xmath84 and denote it by @xmath95 . if @xmath84 contains two vertical half - lines , we call @xmath84 a _ v - bisector _ and refer to the two half - lines as _ upper half - line _ and _ lower half - line _ , respectively , based on their relative positions ; similarly , if @xmath84 contains two horizontal half - lines , we call @xmath84 an _ h - bisector _ and refer to the two half - lines as _ left half - line _ and _ right half - line _ , respectively .    for any point @xmath17 in the plane",
    ", we use @xmath96 to denote the line through @xmath18 with slope @xmath97 , @xmath98 the line through @xmath18 with slope @xmath56 , @xmath99 the horizontal line through @xmath18 , and @xmath100 the vertical line through @xmath18 .      in the following ,",
    "we discuss the shapes of the cells of @xmath74 .",
    "a subset @xmath101 of @xmath2 is _ extreme _ if it contains an extreme point along each of the four diagonal directions .",
    "the set @xmath44 is an extreme subset .",
    "a point @xmath18 of @xmath44 is _ redundant _ if @xmath102 is still an extreme subset .",
    "for simplicity of discussion , we remove all redundant points from @xmath44 .",
    "for example , if @xmath35 and @xmath40 are both extreme points along the northeast direction ( and @xmath40 is also an extreme point along the northwest direction ) , then @xmath35 is redundant and we simply remove @xmath35 from @xmath44 ( and the new @xmath35 of @xmath44 now refers to the same physical point as @xmath40 ) .",
    "consider a point @xmath103 . without loss of generality ,",
    "we assume @xmath104 and the other cases can be analyzed similarly .",
    "we will analyze the possible shapes of @xmath105 .",
    "we assume @xmath44 has at least two distinct points since otherwise the problem would be trivial .",
    "we further assume @xmath106 since otherwise the analysis is much simpler . according to their definitions , @xmath35 must be above the line @xmath107 ( e.g. , see fig .  [",
    "fig : position ] ) .",
    "however , @xmath35 can be either above or below the line @xmath108 . in the following discussion , we assume @xmath35 is below or on the line @xmath108 and the case where @xmath35 is above @xmath108 can be analyzed similarly . in this case",
    "@xmath109 is a v - bisector ( i.e. , it has two vertical half - lines ) .",
    "is above @xmath107 and below or on @xmath108 .",
    "the bisector @xmath110 is a v - bisector ( i.e. , it has two vertical half - lines ) . ]",
    "we first introduce three _ types _ of regions ( i.e. , _ type - a , type - b _ , and _ type - c _ ) , and we will show later that @xmath105 must belong to one of the types . each type of region is bounded from the left or below by a polygonal curve @xmath111 consisting of two half - lines and a line segment of slope @xmath112 in between ( the line segment may be degenerated into a point ) .        1 .   from top to bottom , the polygonal curve @xmath111 consists of a vertical half - line followed by a line segment of slope @xmath56 and then followed by a vertical half - line extended downwards ( e.g. , see fig .",
    "[ fig : regiontypes ] ( a ) ) .",
    "the region on the right of @xmath111 is defined as a _ type - a _ region .",
    "2 .   from top to bottom , the polygonal curve @xmath111 consists of a vertical half - line followed by a line segment of slope @xmath56 and then followed by a horizontal half - line extended rightwards ( e.g. , see fig .  [",
    "fig : regiontypes ] ( b ) ) .",
    "the region on the right of and above @xmath111 is defined as a _ type - b _ region .",
    "3 .   from top to bottom , the polygonal curve @xmath111 consists of a vertical half - line followed by a line segment of slope @xmath97 and then followed by a vertical half - line extended downwards ( e.g. , see fig .  [",
    "fig : regiontypes ] ( c ) ) .",
    "the region on the right of @xmath111 is defined as a _ type - c _ region .    in each type of the regions ,",
    "the line segment of @xmath111 is called the _ middle segment_.",
    "denote by @xmath113 the upper endpoint of the middle segment and by @xmath114 the lower endpoint ( e.g. , see fig .",
    "[ fig : regiontypes ] ) .",
    "again , the middle segment may be degenerated to a point .",
    "the following lemma shows that @xmath105 must belong to one of the three types of regions .    :",
    "( a ) a type - a region ; ( b ) a type - b region ; ( c ) a type - c region . ]",
    "[ lem:30 ] the cell @xmath105 must be one of the three types of regions . further ( e.g. , see fig .",
    "[ fig : cellpos ] ) , if @xmath105 is a type - a region , then @xmath105 is to the right of @xmath115 and @xmath114 is on @xmath116 ; if @xmath105 is a type - b region , then @xmath105 is to the right of @xmath115 and above @xmath116 ; if @xmath105 a type - c region , then @xmath105 is to the right of @xmath115 and @xmath113 is on @xmath116 .    for any point @xmath18 in the plane",
    ", we use @xmath117 to denote the @xmath118-coordinate of @xmath18 and use @xmath119 to denote the @xmath38-coordinate of @xmath18 .",
    "the proof is essentially an incremental approach to construct the cell @xmath105 .",
    "we first discuss the case where @xmath120 ( e.g. , see fig .",
    "[ fig : cell1 ] ) . consider the bisector @xmath110 , which is a v - bisector in this case ( i.e. , the two half - lines of @xmath110 are vertical ) .",
    "first of all , if @xmath35 and @xmath41 are the only distinct points of @xmath44 , then @xmath105 is @xmath121 and thus @xmath105 is a type - a region .",
    "further , @xmath105 is to the right of @xmath115 and @xmath114 is on @xmath116 .",
    "the lemma thus follows .",
    "below , we assume @xmath40 is also distinct and the case where @xmath42 is distinct is similar .     and the intersection @xmath122 . ]     and the intersection @xmath122 . ]    according to their definitions , @xmath40 must be above @xmath107 , below @xmath123 , and above @xmath108 ( e.g. , see fig .",
    "[ fig : cell1 ] ) ; note that @xmath40 can not be on any of the above three lines since otherwise @xmath44 would have a redundant point .",
    "we analyze the shape of the intersection @xmath124 .",
    "let @xmath89 be the intersection of @xmath108 and @xmath123 .",
    "let @xmath90 be the intersection of @xmath115 and @xmath123 . depending on whether @xmath40 is in the triangle @xmath125",
    ", there are two cases .    * if @xmath126 , then @xmath127 .",
    "since @xmath40 is above the line @xmath107 , the bisector @xmath128 is an h - bisector . since the rectangle @xmath129 is on the left of @xmath115 and the bisector @xmath109 is to the right of @xmath115 , only the right half - line of @xmath128 intersects @xmath109 at a point either on the upper half - line or on the middle segment of @xmath109 . in either case , the intersection @xmath124 is a type - b region that is above @xmath116 and to the right of @xmath115 . * if @xmath41 is strictly inside @xmath125 ( e.g. , see fig .  [",
    "fig : cell1 ] ) , then the bisector @xmath128 is an h - bisector and its middle segment @xmath130 is of slope @xmath56 .",
    "we claim that the line containing @xmath130 is to the left of the line containing @xmath131 .",
    "this can be proved by basic geometric techniques , as follows .",
    "+ since @xmath40 is in the interior of @xmath125 , we extend @xmath132 until it hits a point on the segment @xmath94 and let @xmath81 be the above point . since @xmath81 is on @xmath123 , the middle segment @xmath133 is exactly on the line containing @xmath131 .",
    "since @xmath134 , the claim follows .",
    "+ the claim implies that the middle segment @xmath130 does not intersect @xmath109 .",
    "since the left horizontal half - line of @xmath128 is on the left of @xmath115 , it does not intersect @xmath109 either .",
    "hence , only the right horizontal half - line of @xmath128 intersects @xmath109 , again at a point on the upper half - line or the middle segment of @xmath109 .",
    "therefore , the intersection @xmath124 is a type - b region , which is above @xmath116 and to the right of @xmath115 .    in summary ,",
    "the intersection @xmath124 is a type - b region that is above @xmath116 and to the right of @xmath115 .",
    "if there is no such a distinct point @xmath42 , we are done with proving the lemma . in the following ,",
    "we assume there is a distinct point @xmath135 .",
    "hence , the cell @xmath105 is @xmath122 .    according to their definitions",
    ", @xmath42 must be below @xmath123 , above @xmath107 , and below @xmath136 ( e.g. , see fig .",
    "[ fig : cell20 ] ) .",
    "note that the bisector @xmath137 must be a v - bisector . depending on whether @xmath138 , there are two cases .    * if @xmath138 ( e.g. , see fig .",
    "[ fig : cell20 ] ) , then each point of the rectangle @xmath139 is below or on the line @xmath116 .",
    "hence , only the upper vertical line of @xmath137 is possible to intersect @xmath124 . recall that @xmath140 is a type - b region .",
    "if the vertical half - line of @xmath137 intersects @xmath124 , then the cell @xmath105 , which is @xmath122 , is a type - b region , otherwise @xmath141 is also a type - b region . in either case",
    ", @xmath105 is above @xmath116 and to the right of @xmath115 .",
    "the lemma thus follows . * if @xmath142 , then @xmath42 is in the triangle formed by the three lines @xmath116 , @xmath123 , and @xmath136 .",
    "the middle segment of @xmath137 is of slope @xmath56 .",
    "we claim that the middle segment @xmath143 must be in the rectangle @xmath144 and is to the left of the middle segment @xmath131 .",
    "indeed , let @xmath145 be the intersection of @xmath116 and @xmath123 .",
    "let @xmath146 be the lower endpoint of @xmath131 . by the definition of the middle segments ,",
    "@xmath146 is the midpoint of @xmath147 .",
    "since the lower edge of @xmath139 is contained in @xmath147 and @xmath42 is below @xmath123 , we can obtain the claim above .",
    "+ the claim implies that neither the middle segment nor the lower vertical half - line of @xmath137 can intersect @xmath109 .",
    "therefore , only the upper vertical half - line of @xmath137 can intersect @xmath140 .",
    "therefore , as in the first case , @xmath105 is a type - b regions that is above @xmath116 and to the right of @xmath115 .",
    "the lemma thus follows .",
    "we have proved the lemma for the case where @xmath120 .",
    "next , we consider the case where @xmath148 ( e.g. , see fig .",
    "[ fig : cell40 ] ) .",
    "the analysis is similar and we briefly discuss it below .    in this case , the middle segment @xmath131 is of slope @xmath97 .",
    "if there is no other distinct point in @xmath44 , then @xmath149 and @xmath105 is a type - c region that is to the right of @xmath115 and @xmath113 ( i.e. , the upper endpoint of the middle segment ) is on @xmath150 , which proves the lemma .",
    "below , we assume @xmath40 is another distinct point and the case for @xmath42 is similar .     and both @xmath40 and @xmath42 are shown . ]     and both @xmath40 and @xmath42 are shown . ]",
    "again , @xmath40 must be above @xmath107 , below @xmath123 , and above @xmath108 .",
    "the bisector @xmath128 is an h - bisector ( e.g. , see fig .  [",
    "fig : cell40 ] ) .",
    "let @xmath55 be the vertical line containing the upper half - line of @xmath109 .",
    "we claim that @xmath40 must be to the left of @xmath55 .",
    "to prove the claim , it is sufficient to show that the point @xmath89 is to the left of @xmath55 , where @xmath89 is the intersection of @xmath123 and @xmath108 . to this end , we first show that @xmath89 must be on @xmath151 , where @xmath151 is the vertical line containing the lower vertical half - line of @xmath109 . to see this , consider the triangle @xmath152 where @xmath90 is the intersection of @xmath153 and @xmath108 . according to the definition of the middle segment of @xmath109 , the lower endpoint of @xmath131",
    "is the midpoint of @xmath154 .",
    "further , since @xmath94 is of slope @xmath97 and @xmath155 is of slope @xmath56 , the angle @xmath156 and the euclidean lengths of @xmath94 and @xmath155 are the same",
    ". therefore , @xmath89 is on @xmath151 .",
    "since @xmath131 is of slope @xmath97 , @xmath151 is to the left of @xmath55 .",
    "the claim is proved .",
    "since @xmath40 must be above @xmath116 , the above claim implies that only the right horizontal half - line of @xmath128 intersects @xmath109 and the intersection is on the upper vertical line of @xmath109 .",
    "therefore , @xmath157 is a type - b region that is above @xmath116 and to the right of @xmath115 .",
    "in fact , @xmath157 is a degenerate type - b region as its boundary consists of a vertical half - line and a horizontal half - line .",
    "if there is no such a distinct point @xmath42 in @xmath44 , we are done with proving the lemma . in the following , we assume @xmath42 is another distinct point , and thus @xmath158 .    again , @xmath42 must be below @xmath136 , above @xmath107 , and below @xmath123 ( e.g. , see fig .",
    "[ fig : cell30 ] ) .",
    "the bisector @xmath137 must be a v - bisector .",
    "since no point of the rectangle @xmath139 is above the line @xmath116 and @xmath157 is above @xmath116 , only the upper vertical line of @xmath137 is possible to intersect @xmath157 .",
    "regardless of whether the upper vertical line of @xmath137 intersects @xmath157 , @xmath105 is always a ( degenerate ) type - b region that is above @xmath153 and to the right of @xmath115 .",
    "the lemma is thus proved .",
    "recall that our goal is to compute @xmath159 , which is the nearest point of @xmath160 to @xmath41 . based on lemma [ lem:30 ] , we can compute the point @xmath159 in @xmath161 time by making use of the segment dragging queries @xcite .",
    "the details are given in lemma [ lem:40 ] .",
    "[ lem:40 ] after @xmath7 time and @xmath6 space preprocessing on @xmath0 , the point @xmath159 can be found in @xmath162 time .    before giving the algorithm",
    ", we briefly discuss the _ segment dragging queries _ that will be used by our algorithm .        given a set @xmath163 of @xmath1 points in the plane , we introduce two types of segment dragging queries : the _ parallel - track queries _ and the _ out - of - corner queries _ ( e.g. , fig .  [",
    "fig : segdrag ] ) . for each parallel - track query ,",
    "we are given two parallel vertical or horizontal lines ( as `` tracks '' ) and a line segment of slope @xmath112 with endpoints on the two tracks , and the goal is to find the first point of @xmath163 hit by the segment if we drag the segment along the two tracks .",
    "for each out - of - corner query , we are given two axis - parallel tracks forming a perpendicular corner , and the goal is to find the first point of @xmath163 hit by dragging out of the corner a segment of slope @xmath112 with endpoints on the two tracks .",
    "for the parallel - track queries , as shown by mitchell @xcite , we can use chazelle s approach @xcite to answer each query in @xmath162 time after @xmath7 time and @xmath6 space preprocessing on @xmath163 . for the our - of - corner dragging queries ,",
    "by transforming it to a point location problem , mitchell @xcite gave an algorithm that can answer each query in @xmath162 time after @xmath7 time and @xmath6 space preprocessing on @xmath163 .",
    "in the sequel , we present our algorithm for the lemma by using the above segment dragging queries .",
    "our goal is to find @xmath159 , which is the closest point of @xmath160 to @xmath41 .",
    "depending on the type of the @xmath105 as stated in lemma [ lem:30 ] , there are three cases .    1",
    ".   if @xmath105 is a type - a region , we further decompose @xmath105 into three subregions ( e.g. , see fig .",
    "[ fig : partition ] ( a ) ) by introducing two horizontal half - lines going rightwards from @xmath113 and @xmath114 ( i.e. , the endpoints of the middle segment of the boundary of @xmath105 ) , respectively .",
    "we call the three subregions the _ upper _ , _ middle _ , and _ lower _ subregions , respectively , according to their heights . to find @xmath159 , for each subregion @xmath164",
    ", we compute the closest point of @xmath165 to @xmath41 , and @xmath159 is the closest point to @xmath41 among the three points found above . +   for segment - dragging queries . ]",
    "+ for the upper subregion , denoted by @xmath166 , according to lemma [ lem:30 ] , @xmath166 is in the first quadrant of @xmath41 .",
    "therefore , @xmath41 s closest point in @xmath167 is exactly the answer of the out - of - corner query by dragging a segment of slope @xmath56 from the corner of @xmath166 .",
    "+ for the middle subregion , denoted by @xmath168 , according to lemma [ lem:30 ] , @xmath168 is in the first quadrant of @xmath41 .",
    "therefore , @xmath41 s closest point in @xmath169 is exactly the answer of the parallel - track query by dragging the middle segment of the boundary of @xmath105 rightwards . + for the lower subregion , denoted by @xmath170 , according to lemma [ lem:30 ] , @xmath170 is in the fourth quadrant of @xmath41 .",
    "therefore , @xmath41 s closest point in @xmath171 is exactly the answer of the out - of - corner query by dragging a segment of slope @xmath97 from the corner of @xmath170 .",
    "+ therefore , in this case we can find @xmath159 in @xmath162 time after @xmath7 time and @xmath6 space preprocessing on @xmath0 .",
    "2 .   if @xmath105 is a type - b region , we further decompose @xmath105 into two subregions ( e.g. , see fig .",
    "[ fig : partition ] ( b ) ) by introducing a horizontal half - line rightwards from @xmath113 . to find @xmath159 , again ,",
    "we find the closest point to @xmath41 in each of the two sub - regions . + according to lemma [ lem:30 ] , both subregions are in the first quadrant of @xmath41 . by using the same approach as the first case , @xmath41 s closest point in the upper subregion",
    "can be found by an out - of - corner query and @xmath41 s closest point in the lower subregion can be found by a parallel - track query .",
    "if @xmath105 is a type - c region , the case is symmetric to the first case and we can find @xmath159 by using two out - of - corner queries and a parallel - track query .    as a summary , we can find @xmath159 in @xmath162 time after @xmath7 time @xmath6 space preprocessing on @xmath0 .",
    "the lemma thus follows .    by combining lemmas [ lem:20 ] and [ lem:40 ]",
    ", we have the following theorem .    [ theo:10 ]",
    "given a set @xmath0 of @xmath1 points in the plane , after @xmath7 time and @xmath6 space preprocessing , we can answer each @xmath4  query in @xmath8 time for any set @xmath2 of @xmath3 query points .    as preprocessing , we build data structures for answering the segment dragging queries on @xmath0 @xcite .",
    "the preprocessing takes @xmath7 time and @xmath6 space .",
    "given any query set @xmath2 , we first determine @xmath44 in @xmath172 time .",
    "then , we compute the farthest voronoi diagram @xmath74 in constant time , e.g. , by the incremental approach given in this paper . then , for each @xmath63 , we compute the point @xmath67 by lemma [ lem:40 ] in @xmath162 time . finally , @xmath33 can be determined by lemma [ lem:20 ] .",
    "we extend our result in theorem [ theo:10 ] to the top-@xmath14 queries .",
    "all notations here follow those defined previously . consider any value @xmath14 with @xmath15 .",
    "for each point @xmath103 , e.g. , @xmath104 as defined earlier , our algorithm will find @xmath14 points from @xmath160 nearest to @xmath41 in sorted order by their distances to @xmath41 . if @xmath173 , all points of @xmath160 will be reported and no other points will be reported .",
    "due to @xmath174 , we will obtain at most @xmath175 points , and among them the @xmath14 points with the smallest values @xmath20 are the sought points for the top-@xmath14 query , which can be found in additional @xmath176 time since the above @xmath175 points are reported as four sorted lists by their values @xmath20 . the following lemma finds the @xmath14 points of @xmath160 nearest to @xmath41 and the algorithms for other points of @xmath44 are similar .    [ lem:400 ] after @xmath7 time and @xmath6 space preprocessing on @xmath0 , the @xmath14 points of @xmath160 nearest to @xmath41 can be found in @xmath177 time and these points are reported in sorted order by their distances to @xmath41 .",
    "we assume @xmath178 since the case @xmath179 can be easily solved .",
    "for ease of exposition , we also make a general position assumption that no two points of @xmath0 lie on the same line of slope @xmath97 or @xmath56 , and our approach can be generalized to handle the general case .",
    "we follow the discussion in the proof of lemma [ lem:40 ] . as preprocessing",
    ", we build the segment - dragging query data structures @xcite , which takes @xmath7 time and @xmath6 space .",
    "recall that the shape of the cell @xmath105 has three types .",
    "we assume @xmath105 is a type - a and the other two types can be handled analogously .",
    "let @xmath180 be the @xmath14 points of @xmath160 nearest to @xmath41 in the increasing order by their distances to @xmath41 , and our algorithm will report them in this order .    recall that to find @xmath181 , we partition @xmath105 into three subregions @xmath166 , @xmath168 , and @xmath170 , and for each subregion @xmath164 , we find the nearest point of @xmath165 to @xmath41 ; we call the above point the _ candidate point _ for @xmath181",
    ". let @xmath182 denote the set of the above three candidate points .",
    "the point of @xmath182 nearest to @xmath41 is @xmath181 .",
    "below we discuss how to find @xmath183 .",
    "we first remove @xmath181 from @xmath182 .",
    "next , we will find three new candidate points and insert them to @xmath182 , such that @xmath183 is the nearest point of @xmath182 to @xmath41 .",
    "the details are given below .",
    "depending on which subregion of @xmath105 the point @xmath181 belongs to , there are three cases .    1 .",
    "if @xmath184 , let @xmath17 be the second nearest point of @xmath185 to @xmath41 . it is easy to see that @xmath183 must be one of the points in @xmath186 .",
    "recall that @xmath181 is found by dragging a segment @xmath57 of slope @xmath56 out of the corner of @xmath166 ( i.e. , @xmath113 , see fig .  [",
    "fig : partition ] ) .",
    "after @xmath57 hits @xmath181 , if we keep dragging @xmath57 , @xmath17 is the next point that will be hit by @xmath57 . to find @xmath17 ,",
    "unfortunately we can not use the same out - of - corner segment dragging query data structure @xcite because the data structure only works when the triangle formed by @xmath113 and @xmath57 does not contain any point in its interior ( see @xcite for more details on this ) .",
    "instead , we use the following approach . +   into three regions : @xmath187 , @xmath188 , and @xmath189 . ]",
    "+ at the moment @xmath57 hits @xmath181 , let @xmath190 be the subset of @xmath166 to the right and above of @xmath57 , i.e. , @xmath190 is @xmath166 excluding the triangle formed by @xmath113 and @xmath57 ( e.g. , see fig .  [",
    "fig : topkcase1 ] ) .",
    "we partition @xmath190 into three subregions in the following way ( e.g. , see fig .",
    "[ fig : topkcase1 ] ) .",
    "let @xmath191 be the region of @xmath190 on the left of the vertical line through @xmath41 .",
    "let @xmath192 be the region of @xmath190 below the horizontal line through @xmath41 .",
    "let @xmath193 be the remaining part of @xmath190 .",
    "for simplicity of discussion , we assume the region @xmath194 does not contain the point @xmath181 for any @xmath195 .",
    "+ denote by @xmath196 the nearest point to @xmath41 in @xmath197 , for each @xmath195 .",
    "hence , one of @xmath196 for @xmath198 must be @xmath17 , i.e. , the second nearest point of @xmath199 to @xmath41 .",
    "we insert the above three points to @xmath182 , and consequently , @xmath183 is the point of @xmath182 nearest to @xmath41 .",
    "it remains to find the above three points .",
    "+ the point @xmath181 partitions @xmath57 into two sub - segments : let @xmath200 be the sub - segment bounding @xmath187 and @xmath201 be the one bounding @xmath188 .",
    "the point @xmath202 can be found by a parallel - track segment dragging query by dragging the segment @xmath200 upwards .",
    "however , there is an issue for the approach .",
    "since @xmath181 is an endpoint of @xmath200 , the above query may still return @xmath181 as the answer .",
    "we use a little trick to get around the issue . due to our general position assumption that no two points lie on the same line of slope @xmath112",
    ", @xmath200 does not contain any other point of @xmath0 than @xmath181 . instead of dragging @xmath200",
    ", we drag another segment @xmath203 which can be viewed as shifting @xmath200 upwards by a sufficiently small value @xmath204 .",
    "we can determine @xmath204 in the preprocessing step such that there is no point of @xmath0 strictly between the @xmath56-sloped line containing @xmath200 and the @xmath56-sloped line containing @xmath203 .",
    "for example , one way to determine such a @xmath204 is to sort all points of @xmath0 by their projections to any line of slope @xmath97 and then find the minimum distance between any two adjacent projections .",
    "hence , the point @xmath202 is the first point hit by dragging @xmath203 upwards .",
    "+ similarly the point @xmath205 can also be found by a parallel - track segment dragging query and the same trick is applicable .",
    "+ for the point @xmath206 , it can be found by an out - of - corner segment dragging query .",
    "note that the corner in this case is the point @xmath181 , and thus the query may also return @xmath181 as the answer .",
    "this issue can also be easily resolved as follows .",
    "the data structure in @xcite for answering the out - of - corner segment dragging queries reduces the problem into a point location problem in a planar subdivision . for the above out - of - corner segment dragging query",
    ", we will need to locate a vertex corresponding to @xmath181 in the planar subdivision and the vertex is incident to two faces : one face is for @xmath181 and the other is for @xmath206 .",
    "hence , to return @xmath206 as the answer , we only need to report the face that does not correspond to @xmath181 . + as a summary , we can insert three new points into @xmath182 such that @xmath183 is the nearest point of @xmath182 to @xmath41 , and the three points are found by three segment - dragging queries , each taking @xmath162 time . 2 .",
    "if @xmath207 , we use the similar approach . recall that @xmath208 is found by dragging a parallel - track segment @xmath57 of slope @xmath56 rightwards .",
    "let @xmath17 be the second nearest point of @xmath169 to @xmath41 . clearly , @xmath183 is the nearest point of @xmath186 to @xmath41 . to find @xmath17 ,",
    "after @xmath57 hits @xmath181 , we can keep dragging @xmath57 rightwards and @xmath17 is the next point that will be hit by @xmath57 .",
    "hence , at the moment @xmath57 hits @xmath181 , the point @xmath17 can be found by another parallel - track segment dragging query by dragging @xmath57 rightwards . here , since @xmath181 is on @xmath57 , to avoid issue that the query returns @xmath181 as the answer , we use the same trick as in the first case , i.e. , instead of dragging @xmath57 , we drag a segment @xmath209 that is @xmath204 distance to the right of @xmath57 .",
    "if @xmath207 , the case is symmetric to the first case and we omit the details .    in summary , we can insert at most three new points into @xmath182 such that @xmath183 is the nearest point of @xmath182 to @xmath41 , and the three points are found by three segment - dragging queries , each taking @xmath162 time .    to find the third nearest point @xmath210",
    ", we use the similar approach . in general , to determine @xmath211 with @xmath212 , we have a candidate set @xmath182 such that @xmath211 is the nearest point of @xmath182 to @xmath41 .",
    "after @xmath211 is determined , we remove it from @xmath182 , and then to find @xmath213 , we find at most three new points by segment - dragging queries and insert them to @xmath182 in the similar approach as above , such that @xmath213 is the nearest point of @xmath182 to @xmath41 .",
    "we use a min - heap to maintain the candidate set @xmath182 , where the `` key '' of each point of @xmath182 is its distance to @xmath41 .",
    "note that the size of @xmath182 is no more than @xmath214 in the entire algorithm and @xmath215 .",
    "hence , the running time of the entire algorithm is @xmath177 .",
    "the lemma thus follows .    by the preceding discussion and lemma [ lem:400 ]",
    ", we have the following theorem .    [ theo:20 ]",
    "given a set @xmath0 of @xmath1 points in the plane , after @xmath7 time and @xmath6 space preprocessing , we can answer each @xmath4  top-@xmath14 query in @xmath16 time for any set @xmath2 of @xmath3 query points and any integer @xmath14 with @xmath15 .",
    "in this section , we present our results for the @xmath5 version of  queries . given any query point set @xmath2 , our goal is to find the point @xmath32 such that @xmath21 is minimized for the @xmath5 distance @xmath19 , and we use @xmath33 to denote the sought point above .",
    "we follow the similar algorithmic scheme as in the @xmath4 version .",
    "let @xmath216 be the set of points of @xmath2 that are on the convex hull of @xmath2 .",
    "it is commonly known that for any point @xmath17 in the plane , its farthest point in @xmath2 is in @xmath216 , and in other words , the farthest voronoi diagram of @xmath2 , denoted by @xmath74 , is determined by the points of @xmath216 @xcite .",
    "note that the size of @xmath74 is @xmath217 @xcite .",
    "consider any point @xmath218 .",
    "denote by @xmath76 the cell of @xmath18 in @xmath74 .",
    "the cell @xmath76 is a convex and unbounded polygon @xcite .",
    "let @xmath219 be the closest point of @xmath220 to @xmath18 .",
    "similarly to lemma [ lem:20 ] , we have the following lemma .",
    "consider any point @xmath224 . to find @xmath219 , we first triangulate the cell @xmath76 and let @xmath225 denote the triangulation .",
    "for each triangle @xmath226 , we will find the closest point to @xmath18 in @xmath227 , denoted by @xmath228 .",
    "consequently , @xmath219 is the closest point to @xmath18 among the points @xmath228 for all @xmath226 .",
    "out goal is to determine @xmath33 . to this end , we will need to triangulate each cell of @xmath74 and compute @xmath228 for each @xmath226 and for each @xmath224 .",
    "since the size of @xmath74 is @xmath217 , which is @xmath172 , we have the following lemma .",
    "[ lem:45 ] if the closest point @xmath228 to @xmath18 in @xmath227 can be determined in @xmath229 time for any triangle @xmath230 and any point @xmath18 in the plane , then @xmath33 can be found in @xmath231 time .    in the following , we present our algorithms for computing @xmath228 for any triangle @xmath230 and any point @xmath18 in the plane .",
    "if we know the voronoi diagram of the points in @xmath227 , then @xmath228 can be determined in logarithmic time .",
    "hence , the problem becomes how to maintain the voronoi diagrams for the points in @xmath0 such that given any triangle @xmath230 , the voronoi diagram information of the points in @xmath232 can be obtained efficiently . to this end , we choose to augment the @xmath6-size simplex range ( counting ) query data structure in @xcite , as shown in the following lemma .",
    "we first briefly discuss the data structure in @xcite and then augment it for our purpose .",
    "note that the data structure in @xcite is for any fixed dimension and our discussion below only focuses on the planar case , and thus each simplex below refers to a triangle .    a _ simplicial partition _ of the point set @xmath0 is a collection @xmath236 , where the @xmath65 s are pairwise disjoint subsets ( called the _ classes _ of @xmath237 ) forming a partition of @xmath0 , and each @xmath238 is a possibly unbounded simplex containing the points of @xmath65 .",
    "the _ size _ of @xmath237 is @xmath14 .",
    "the simplex @xmath238 may also contain other points in @xmath0 than those in @xmath65 .",
    "a simplicial partition is called _ special _ if @xmath239 , i.e. , all the classes are of roughly the same size .",
    "the data structure in @xcite is a partition tree , denoted by @xmath240 , based on constructing special simplicial partitions on @xmath0 recursively ( e.g. , see fig .",
    "[ fig : partitiontree ] ) .",
    "the leaves of @xmath240 form a partition of @xmath0 into constant - sized subsets .",
    "each internal node @xmath241 is associated with a subset @xmath242 ( and its corresponding simplex @xmath243 ) of @xmath0 and a special simplicial partition @xmath244 of size @xmath245 of @xmath242 .",
    "we assume the root of @xmath240 is associated with @xmath0 and its corresponding simplex is the entire plane .",
    "the _ cardinality _ of @xmath242 ( i.e. , @xmath246 ) is stored at @xmath247 .",
    "each internal node @xmath247 has @xmath245 children that correspond to the classes of @xmath244 .",
    "thus , if @xmath247 is a node lying at a distance @xmath248 from the root of @xmath240 , then @xmath249 , and the depth of @xmath240 is @xmath250 .",
    "it is shown in @xcite that @xmath240 has @xmath6 space and can be constructed in @xmath7 time .        for each query simplex @xmath230 , the goal is to compute the number of points in @xmath227 .",
    "we start from the root of @xmath240 . for each internal node @xmath247",
    ", we check its simplicial partition @xmath244 one by one , and handle directly those contained in @xmath230 or disjoint from @xmath230 ; we proceed with the corresponding child nodes for the other simplices .",
    "each of the latter ones must be intersected by at least one of the lines bounding @xmath230 . if @xmath247 is a leaf node , for each point @xmath17 in @xmath242 , we determine directly whether @xmath251 .",
    "each query takes @xmath252 time @xcite .    for our purpose ,",
    "we augment the partition tree @xmath240 in the following way . for each node @xmath247 , we compute and maintain the voronoi diagram of @xmath242 , denoted by @xmath253 .",
    "since at each level of @xmath240 the point subsets @xmath242 s are pairwise disjoint , comparing with the original tree , our augmented tree has @xmath6 additional space at each level . since @xmath240 has @xmath250 levels , the total space of our augmented tree is @xmath9 . for the running time , we claim that the total time for building the augmented tree is still @xmath7 although we have to build voronoi diagrams for the nodes .",
    "indeed , let @xmath254 denote the time for building the voronoi diagrams in the entire algorithm .",
    "we have @xmath255 , and thus , @xmath256 by solving the above recurrence .",
    "consider any query triangle @xmath230 and any point @xmath18 .",
    "we start from the root of @xmath240 . for each internal node @xmath247 ,",
    "we check its simplicial partition @xmath244 , i.e. , check the children of @xmath247 one by one .",
    "consider any child @xmath257 of @xmath247 .",
    "if @xmath258 is disjoint from @xmath230 , we ignore it .",
    "if @xmath258 is contained in @xmath230 , then we compute in @xmath162 time the closest point of @xmath259 to @xmath18 ( and its distance to @xmath18 ) by using the voronoi diagram @xmath260 stored at the node @xmath257 .",
    "otherwise , we proceed with the node @xmath257 recursively .",
    "if @xmath247 is a leaf node , for each point @xmath17 in @xmath242 , we compute directly the distance @xmath261 if @xmath262 .",
    "finally , @xmath228 is the closest point to @xmath18 among all points whose distances to @xmath18 have been computed above .",
    "comparing with the original simplex range query on @xmath230 , we have @xmath162 additional time on each node @xmath257 if @xmath258 is contained in @xmath230 , and clearly the number of such nodes is bounded by @xmath252 .",
    "hence , the total query time for finding @xmath228 is @xmath263 , which is @xmath252 .",
    "the lemma thus follows .",
    "similar augmentation may also be made on the @xmath6-size simplex data structure in @xcite and the recent randomized result in @xcite .",
    "if more space are allowed , by using duality and cutting trees @xcite , we can obtain the following result .      by using duality and cutting trees ,",
    "an @xmath11-size data structure can be built in @xmath11 time for any @xmath12 such that each simplex range ( counting ) query can be answered in @xmath264 time @xcite .",
    "we can augment the data structure in a similar way as in lemma [ lem:50 ] .",
    "we only sketch it below .",
    "the data structure in @xcite has three levels . in the third level",
    ", each tree node maintains the cardinality of the corresponding canonical subset of points . for our purpose",
    ", we explicitly maintain the voronoi diagram for each canonical subset in the third level .",
    "hence , our augmented data structure has four levels . the preprocessing time and",
    "the space are the same as before .",
    "the query algorithm is similar as before and the difference is that when a canonical subset of points are all in the query triangle @xmath230 , instead of counting the cardinality of the canonical subset , we determine the closest point to @xmath18 in the canonical subset by using the voronoi diagram of the canonical subset .",
    "hence , the total time of our query algorithm is @xmath265 time .    to reduce the query time",
    ", a commonly known approach is to use cutting trees with nodes having degrees @xmath266 for a certain small constant @xmath267 .",
    "therefore , the heights of the trees are constant rather than logarithmic , and consequently , the total query time becomes @xmath162 .",
    "note that we can use a point location data structure @xcite to determine in logarithmic time the child in which we continue the search , but this does not affect the preprocessing time and space asymptotically .",
    "the lemma thus follows .",
    "given a set @xmath0 of @xmath1 points in the plane , after @xmath233 time and @xmath234 space preprocessing , we can answer each @xmath4  query in @xmath10 time for any set @xmath2 of @xmath3 query points ; alternatively , after @xmath11 time and space preprocessing for any @xmath12 , we can answer each @xmath5  query in @xmath13 time .",
    "h.  li , h.  lu , b.  huang , and z.  huang .",
    "two ellipse - based pruning methods for group nearest neighbor queries . in _ proc . of the 13th annual acm international workshop on geographic information systems _ , pages 192199 , 2005 .",
    "y.  luo , h.  chen , k.  furuse , and n.  ohbo .",
    "efficient methods in finding aggregate nearest neighbor by projection - based filtering . in _ proc . of the 12nd international conference on computational science and its applications _ , pages 821833 , 2007 ."
  ],
  "abstract_text": [
    "<S> we study the aggregate / group nearest neighbor searching for the operator in the plane . for a set @xmath0 of @xmath1 points and a query set @xmath2 of @xmath3 points </S>",
    "<S> , the query asks for a point of @xmath0 whose maximum distance to the points in @xmath2 is minimized . </S>",
    "<S> we present data structures for answering such queries for both @xmath4 and @xmath5 distance measures . </S>",
    "<S> previously , only heuristic and approximation algorithms were given for both versions . </S>",
    "<S> for the @xmath4 version , we build a data structure of @xmath6 size in @xmath7 time , such that each query can be answered in @xmath8 time . for the @xmath5 version , </S>",
    "<S> we build a data structure in @xmath7 time and @xmath9 space , such that each query can be answered in @xmath10 time , and alternatively , we build a data structure in @xmath11 time and space for any @xmath12 , such that each query can be answered in @xmath13 time . </S>",
    "<S> further , we extend our result for the @xmath4 version to the top-@xmath14 queries where each query asks for the @xmath14 points of @xmath0 whose maximum distances to @xmath2 are the smallest for any @xmath14 with @xmath15 : we build a data structure of @xmath6 size in @xmath7 time , such that each top-@xmath14 query can be answered in @xmath16 time .    </S>",
    "<S> = 14.0pt </S>"
  ]
}