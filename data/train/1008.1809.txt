{
  "article_text": [
    "answer set programming ( asp ; @xcite ) has been shown to be a useful approach for knowledge representation and non - monotonic reasoning in various applications that include difficult combinatorial search , among them graph theoretic problems , planning , model checking , and problems from bioinformatics .",
    "asp combines an expressive but simple modelling language , able to encode all search problems within the first three levels of the polynomial hierarchy , with high - performance solving capacities @xcite .",
    "in fact , asp solvers have experienced dramatic improvements in their performance @xcite and compete with the best boolean satisfiability ( sat ; @xcite ) solvers .",
    "however , many combinatorial search problems exhibit symmetries which can frustrate a search algorithm to fruitlessly explore independent symmetric subspaces .",
    "various instance families , such as the _ pigeon hole _ problem , are known to require exponential time for resolution and backtracking algorithms @xcite .",
    "indeed , state - of - the - art asp solvers take a very long time to solve those instances ( section [ sec : exp ] ) .",
    "once their symmetries are identified , it is possible to avoid redundant computational effort by pruning parts of the search space through symmetry - breaking .",
    "symmetry - breaking also addresses post - processing : where symmetries induce equivalence classes in the solution space , symmetric solutions can be discarded .",
    "problems like the _ all - interval series _ taken from the csplib  @xcite have plenty symmetric solution .",
    "however , all solutions to the original problem can be reconstructed from the answer sets under symmetry - breaking .",
    "in this paper we break the problem of symmetry - breaking down into two parts : ( 1 ) identifying symmetries and ( 2 ) breaking the identified symmetries .",
    "we adopt existing theoretical foundations on introducing symmetry - breaking constraints ( sbc ) for sat instances in conjunctive normal form ( cnf ) that exhibit symmetries @xcite . as to sat , the basic idea is to detect irredundant generators of the group of permutational symmetries using a reduction to coloured graph automorphism . for each such generator ,",
    "an sbc is constructed and added to the original cnf formula .",
    "the key contribution of our work is a reduction of symmetry detection for disjunctive logic programs to the automorphisms of a coloured digraph , and an asp representation of sbc which is linear in the number of problem variables .",
    "furthermore , we formulate symmetry - breaking answer set solving as preprocessing and demonstrate its computational impact on difficult combinatorial search problems .",
    "the remainder of this paper is organized as follows .",
    "we start by giving the necessary background notions of asp and group theory . in turn , sections  [ sec : sd ] and  [ sec : sb ] cover symmetry detection and symmetry - breaking for asp , respectively . in section  [ sec : psb ] we motivate partial symmetry - breaking , in section  [ sec : exp ] we empirically evaluate our approach .",
    "section  [ sec : con ] draws conclusions .",
    "a _ ( disjunctive ) logic program _ over a set of primitive propositions @xmath0 is a finite set of _ rules _ @xmath1 of the form @xmath2 where and @xmath3 are _ atoms _ for @xmath4 , @xmath5 , and @xmath6 .",
    "literal _ is an atom @xmath7 or its default negation @xmath8 .",
    "let @xmath9 be the _ head _ of @xmath1 and @xmath10 the _ body _ of @xmath1 .",
    "for a set of literals @xmath11 , define @xmath12 and @xmath13 .",
    "the set of atoms occurring in a logic program @xmath14 is denoted by @xmath15 , and the set of bodies in @xmath14 is @xmath16 . for regrouping bodies sharing the same head atom @xmath7 ,",
    "define @xmath17 .",
    "the semantics of a logic program is given by its answer sets .",
    "a set @xmath18 is an _ answer set _ of a logic program @xmath14 over @xmath0 , if @xmath19 is a @xmath20-minimal model of the _ reduct _",
    "@xcite @xmath21 a rule of form ( [ form : rule ] ) can be seen as a constraint on the answer sets of a program , stating that if @xmath22 are in the answer set and none of @xmath23 are included , then one of @xmath24 must be in the set .",
    "clearly , an answer set induces a truth assignment on the atoms in @xmath14 .",
    "the semantics of important extensions to logic programs , such as integrity constraints , is given through program transformations that introduce additional propositions @xcite .",
    "integrity constraint _ of the form @xmath25 is a short hand for a rule with an unsatisfiable head , and thus forbids its body to be satisfied in any answer set .",
    "consider the logic programs @xmath26 and @xmath27 , both have two answer sets @xmath28 and @xmath29 , where @xmath30 observe , that @xmath26 and @xmath27 remain invariant under a swap of atoms @xmath7 and",
    "@xmath31 which is what we call a symmetry . in this work we will only deal with symmetries that can be thought of as permutations of atoms .",
    "[ ex : allint ] the _ all - interval series problem _ is to find a permutation of the @xmath32 integers from @xmath33 to @xmath34 such that the difference of adjacent numbers are also all - different .",
    "we encode the all - interval series problem introducing propositional variables @xmath35 and @xmath36 for the @xmath37 integer variables taking values @xmath38 , and @xmath39 auxiliary variables taking values @xmath40 to represent the differences between adjacent numbers , respectively .",
    "furthermore , we require both sets of variables to have pairwise different values ( all - different constraint ) .",
    "@xmath41 note that above encoding for the all - different constraint corresponds to its _ support encoding _",
    "it remains invariant under complex permutation of atoms ( see example  [ ex : allintsym ] ) .",
    "intuitively , a symmetry of a discrete object is a transformation of its components that leaves the object unchanged . by a symmetry of an answer set program we mean a permutation of its atoms that does not change the logic program , in particular , maps rules to rules . in principle",
    ", such a permutation can affect arbitrarily many atoms at once , for instance , as in the case of a complete cyclic shift .",
    "symmetries are studied in terms of groups .",
    "group _ is an abstract algebraic structure  @xmath42 , where @xmath43 is a set closed under a binary associative operation  @xmath44 such that there is a _ unit _",
    "element and every element has a unique _ inverse_. often , we abuse notation and refer to the group  @xmath43 , rather than to the structure @xmath42 . a subset @xmath45 of @xmath43 is referred to as a _ subgroup _ of @xmath43 if @xmath45 is closed under the binary operation of @xmath43 .",
    "a set of group elements @xmath46 such that any other group element in @xmath43 can be expressed in terms of their product is called a _ generating set _ and the elements of @xmath45 are called _ generators _ of @xmath43 .",
    "a generator is _ redundant _ if it can be expressed in terms of other generators",
    "irredundant _ generating set does not contain redundant generators , and provides an extremely compact representation of the group .",
    "in fact , representing groups by sets of generators always ensures exponential compression .",
    "any irredundant generating set for a finite group @xmath43 , such that @xmath47 , contains at most @xmath48 elements",
    ".    a _ permutation _ of a set  @xmath49 is a bijection @xmath50 .",
    "indeed , the set of permutations form a group under composition , denoted as @xmath51 .",
    "it is easy to see that the composition of two permutations is a permutation , that the composition of permutations is associative , that the composition with the _ identity _ never changes a permutation , and that every permutation has a unique inverse .",
    "the image of @xmath52 under a permutation @xmath53 is denoted as @xmath54 , and for @xmath55 define @xmath56 .",
    "the _ orbits _ of @xmath11 under @xmath53 are the set of elements of @xmath49 to which @xmath11 can be mapped by ( repeatedly ) applying @xmath53 .",
    "orbits under a permutation define an equivalence relation on @xmath49 .",
    "analogously , for vectors @xmath57 define @xmath58 , and sets of sets @xmath59 such that @xmath60 for @xmath61 define @xmath62 .    for a logic program @xmath14",
    ", we define the _ symmetric group _ of @xmath14 , @xmath63 , to be the group of all permutations of the atoms that occur in @xmath14 .",
    "we will make use of the _ cycle notation _ where a permutation is a product of disjoint cycles .",
    "a cycle  @xmath64 means that the permutation maps @xmath65 to @xmath66 , @xmath66 to @xmath67 , and so on , finally @xmath32 back to @xmath65 .",
    "an element that does not appear in any cycle is understood as being mapped to itself .",
    "table [ fig : graphs ] provides some examples . finally , we define the _ support _ @xcite of a permutation as those elements that are not mapped to themselves .    as to symmetry - breaking answer set solving ,",
    "given a logic program @xmath14 , we are interested in the subgroup of the symmetric group of @xmath14 which elements leave @xmath14 unchanged . obviously , a symmetry of a logic program preserves answer sets .",
    "a symmetry of a logic program @xmath14 is a permutation of its atoms that does not change @xmath14 .",
    "[ ex : allintsym ] there are four symmetries in the all - interval series problem : ( 1 ) the identity , ( 2 ) reversing the series ( variable symmetry ) , ( 3 ) reflecting the series by substracting each element from @xmath34 ( value symmetry ) , and ( 4 ) doing both .",
    "it is easy to see that ( 2 ) and ( 3 ) form a group of generators . indeed , we can find both symmetries in our encoding ( see example  [ ex : allint ] ) given in cycle notation below .",
    "@xmath68 intuitively , the circles in the first three lines of @xmath69 simply swap the first and the last variable , the second and the last but one variable , etc . , value by value to reverse the series , where the remaining circles adjust the auxiliary variables , i.e. , swap the differences value by value , respectively .",
    "the circles in @xmath70 swap the values @xmath33 and @xmath34 , @xmath65 and @xmath71 , etc .",
    ", for each variable to reflect the series",
    ". obviously , the permutations @xmath69 and @xmath70 represent ( 2 ) and ( 3 ) , respectively , and do not change the logic program .",
    "our approach for detecting symmetries of a logic program is through reduction to , and solution of , an associated graph automorphism problem ( gap ) .    given a graph @xmath72 , where @xmath73 is a set of vertices and @xmath74 is a set of edges .",
    "an _ automorphism _ ( symmetry ) of @xmath43 is a permutation of its vertices that maps edges to edges , and non - edges to non - edges .",
    "edge orientation must be preserved in case @xmath43 is a directed graph .",
    "a further extension considers vertex colourings , where symmetries must map each vertex into a vertex with the same colour .",
    "more formally , given a partition of the vertices @xmath75 , the _ automorphism group _ of @xmath43 @xcite is @xmath76 .",
    "we will think of the partition @xmath53 as a _ colouring _ of the vertices .",
    "the _ ( coloured ) graph automorphism problem _ ( gap ) is to find all symmetries of a given graph , for instance , in terms of generators .",
    "it is not known to have any polynomial time solution , and is conjectured to be strictly between the complexity classes p and np @xcite , thus potentially easier than computing answer sets .",
    "a practical algorithm for graph automorphism has been implemented in _ nauty _",
    "@xcite and significantly improved in the systems _ saucy _  @xcite .",
    "a quite natural gap encoding for detecting symmetries of logic programs is based on their body - atom graph .",
    "the _ body - atom graph",
    "_ @xmath77 of a logic program @xmath14 is a directed graph with vertices @xmath78 , and labelled edges @xmath79 , @xmath80 , and @xmath81 .",
    "the body - atom graph has been shown to be a suitable representation of a logic program @xcite .",
    "however , we modify the body - atom graph by introducing additional vertices for negated atoms to circumvent labelled edges .    c@c    [ circle , inner sep=0pt , minimum size=5.0 mm , > = stealth ] ( b ) at ( 0.0 , 0.0 ) [ draw ] @xmath82 ; ( a1 ) at ( -1.5 , 0.5 ) [ draw ] @xmath83 ; ( al ) at ( -1.5,-0.5 ) [ draw ] @xmath84 ; ( b1 ) at ( 1.5 , 1.5 ) [ draw ] @xmath85 ; ( bm ) at ( 1.5 , 0.5 ) [ draw ] @xmath86 ; ( nc1 ) at ( 1.5,-0.5 ) [ draw ] ; ( nc1 ) at ( 1.5,-0.5 ) [ ] @xmath87 ; ( ncn ) at ( 1.5,-1.5 ) [ draw ] ; ( ncn ) at ( 1.5,-1.5 ) [ ] @xmath88 ; ( -1.5 , 0.125 )  ( -1.5,-0.125 ) ; ( 1.5 , 1.125 )  ( 1.5 , 0.875 ) ; ( 1.5,-1.125 )  ( 1.5,-0.875 ) ; ( b )  ( a1 ) ; ( b ) ",
    "( al ) ; ( b1 )  ( b ) ; ( bm ) ",
    "( b ) ; ( nc1 ) ",
    "( b ) ; ( ncn )  ( b ) ;    &    [ circle , inner sep=0pt , minimum size=5.0 mm , > = stealth ] at ( 1.5,-0.5 ) [ fill , color = lightgray ] ; at ( 1.5,-1.5 ) [ fill , color = lightgray ] ; at ( -3.0 , 0.5 ) [ fill , color = lightgray ] ; at ( -3.0,-0.5 ) [ fill , color = lightgray ] ; at ( 3.0 , 1.5 ) [ fill , color = lightgray ] ; at ( 3.0 , 0.5 ) [ fill , color = lightgray ] ; ( b ) at ( 0.0 , 0.0 ) [ draw , rectangle ] @xmath82 ; ( a1 ) at ( -1.5 , 0.5 ) [ draw ] @xmath83 ; ( al ) at ( -1.5,-0.5 ) [ draw ] @xmath84 ; ( na1 ) at ( -3.0 , 0.5 ) [ draw ] ; at ( -3.0 , 0.5 ) [ ] @xmath89 ; ( nal ) at ( -3.0,-0.5 ) [ draw ] ; at ( -3.0,-0.5 ) [ ] @xmath90 ; ( b1 ) at ( 1.5 , 1.5 ) [ draw ] @xmath85 ; ( nb1 ) at ( 3.0 , 1.5 ) [ draw ] ; at ( 3.0 , 1.5 ) [ ] @xmath91 ; ( bm ) at ( 1.5 , 0.5 ) [ draw ] @xmath86 ; ( nbm ) at ( 3.0 , 0.5 ) [ draw ] ; at ( 3.0 , 0.5 ) [ ] @xmath92 ; ( nc1 ) at ( 1.5,-0.5 ) [ draw ] ; at ( 1.5,-0.5 ) [ ] @xmath87 ; ( ncn ) at ( 1.5,-1.5 ) [ draw ] ; at ( 1.5,-1.5 ) [ ] @xmath88 ; ( c1 ) at ( 3.0,-0.5 ) [ draw ] @xmath93 ; ( cn ) at ( 3.0,-1.5 ) [ draw ] @xmath94 ; ( -1.5 , 0.125 )  ( -1.5,-0.125 ) ; ( 1.5 , 1.125 )  ( 1.5 , 0.875 ) ; ( 1.5,-1.125 ) ",
    "( 1.5,-0.875 ) ; ( -3.0 , 0.125 )  ( -3.0,-0.125 ) ; ( 3.0 , 1.125 ) ",
    "( 3.0 , 0.875 ) ; ( 3.0,-1.125 )  ( 3.0,-0.875 ) ; ( a1 ) ",
    "( na1 ) ; ( al )  ( nal ) ; ( b )  ( a1 ) ; ( b )  ( al ) ; ( b1 )  ( b ) ; ( bm ) ",
    "( b ) ; ( b1 )  ( nb1 ) ; ( bm )  ( nbm ) ; ( nc1 )  ( b ) ; ( ncn ) ",
    "( b ) ; ( c1 )  ( nc1 ) ; ( cn )  ( ncn ) ;    in our gap encoding every atom in @xmath15 is represented by two vertices of colour @xmath65 and @xmath66 that correspond to the positive and negative literals , respectively .",
    "every rule is represented by a ( body ) vertex of colour @xmath67 , a set of directed edges that connect the vertices of the literals that appear in the rule s body to its body vertex , and a set of directed edges that connect the body vertex to the vertices of the atoms ( positive literals ) that appear in the head of the rule . to ensure consistency , that is , @xmath7 maps to @xmath31 if and only if @xmath8 maps to @xmath95 for any atoms @xmath7 and @xmath31 , vertices of opposite literals are mated by a directed edge from the positive literal to the negative literal .",
    "the choice of three vertex colours insures that body vertices can only be mapped to body vertices , and positive ( negative ) literal vertices can only be mapped to positive ( negative ) literal nodes . to conclude , given a logic program @xmath14 consisting of @xmath96 rules and @xmath97 literals over @xmath32 atoms , the gap encoding for detecting symmetries of @xmath14 is constructed by @xmath98 vertices and @xmath99 edges .",
    "examples are given in fig .",
    "[ fig : graphs ] .    since graph automorphism algorithms are sensitive to the number of vertices of an input graph , our construction can be optimised to reduce the number of graph vertices while preserving its automorphism group .",
    "a first simplification is achieved by modelling rules with an empty body and a single head atom , so - called _ facts _ , by a ( forth ) colour for the vertex corresponding to the head atom instead of using ( empty ) body vertices .",
    "furthermore , rules with a single head atom and a 1-literal body are modelled using a directed edge from the vertex corresponding to the literal of the body to the vertex corresponding to the head atom .",
    "observe that this optimisation may connect a literal vertex to a positive literal vertex , where consistency edges connect positive literal vertices to their negative mates .",
    "therefore , unintended mappings between 1-literal body edges and consistency edges are impossible . for the special case of a 1-literal body and an empty head ,",
    "we connect the literal vertex to the special node @xmath100.    c@c    [ circle , inner sep=0pt , minimum size=5.0 mm , > = stealth ] at ( 0.0,0.0 ) [ fill , color = lightgray ] ; at ( 3.0,1.5 ) [ fill , color = lightgray ] ; ( lna ) at ( 0.0,0.0 ) [ draw ] @xmath8 ; ( la ) at ( 0.0,1.5 ) [ draw ] @xmath7 ; ( b2 ) at ( 1.5,0.0 ) [ rectangle , draw ] 2 ; ( b1 ) at ( 1.5,1.5 ) [ rectangle , draw ] 1 ; ( lb ) at ( 3.0,0.0 ) [ draw ] @xmath31 ; ( lnb ) at ( 3.0,1.5 ) [ draw ] @xmath95 ; ( lna ) ",
    "( b2 ) ; ( b2 )  ( lb ) ; ( lnb )  ( b1 ) ; ( b1 )  ( la ) ; ( la )  ( lna ) ; ( lb ) ",
    "( lnb ) ;    &    [ circle , inner sep=0pt , minimum size=5.0 mm , > = stealth ] at ( 0.0,0.0 ) [ fill , color = lightgray ] ; at ( 4.5,1.5 ) [ fill , color = lightgray ] ; ( lna ) at ( 0.0,0.0 ) [ draw ] @xmath8 ; ( la ) at ( 1.5,0.0 ) [ draw ] @xmath7 ; ( b1 ) at ( 1.5,1.5 ) [ rectangle , draw ] 1 ; ( b2 ) at ( 3.0,0.0 ) [ rectangle , draw ] 2 ; ( lb ) at ( 3.0,1.5 ) [ draw ] @xmath31 ; ( lnb ) at ( 4.5,1.5 ) [ draw ] @xmath95 ; ( la )  ( b2 ) ; ( b1 )  ( lb ) ; ( lb )  ( b2 ) ; ( b1 )  ( la ) ; ( la )  ( lna ) ; ( lb )  ( lnb ) ;     + original 3-coloured graph of @xmath26 & original 3-coloured graph of @xmath27 +    [ circle , inner sep=0pt , minimum size=5.0 mm , > = stealth ] at ( 0.0,0.0 ) [ fill , color = lightgray ] ; at ( 3.0,1.5 ) [ fill , color = lightgray ] ; ( lna ) at ( 0,0 ) [ draw ] @xmath95 ; ( la ) at ( 0,1.5 ) [ draw ] @xmath31 ; ( b2 ) at ( 1.5,0 ) [ rectangle , draw ] 1 ; ( b1 ) at ( 1.5,1.5 ) [ rectangle , draw ] 2 ; ( lb ) at ( 3,0 ) [ draw ] @xmath7 ; ( lnb ) at ( 3,1.5 ) [ draw ] @xmath8 ; ( lna )  ( b2 ) ; ( b2 ) ",
    "( lb ) ; ( lnb ) ",
    "( b1 ) ; ( b1 )  ( la ) ; ( la )  ( lna ) ; ( lb )  ( lnb ) ;    &    [ circle , inner sep=0pt , minimum size=5.0 mm , > = stealth ] at ( 0.0,0.0 ) [ fill , color = lightgray ] ; at ( 4.5,1.5 ) [ fill , color = lightgray ] ; ( lna ) at ( 0.0,0.0 ) [ draw ] @xmath95 ; ( la ) at ( 1.5,0.0 ) [ draw ] @xmath31 ; ( b1 ) at ( 1.5,1.5 ) [ rectangle , draw ] 1 ; ( b2 ) at ( 3.0,0.0 ) [ rectangle , draw ] 2 ; ( lb ) at ( 3.0,1.5 ) [ draw ] @xmath7 ; ( lnb ) at ( 4.5,1.5 ) [ draw ] @xmath8 ; ( la )  ( b2 ) ; ( b1 )  ( lb ) ; ( lb )  ( b2 ) ; ( b1 )  ( la ) ; ( la )  ( lna ) ; ( lb )  ( lnb )",
    ";     + @xmath101 & @xmath102 +",
    "recall that symmetries of a logic program @xmath14 induce equivalence classes in the solution space ( orbits ) . given",
    "an answer set of @xmath14 , all sets to which it can be mapped by symmetries , must be answer sets of @xmath14 .",
    "similarly , symmetries always map non - answer sets to non - answer sets .",
    "therefore , it is sufficient to reason about one representative from every equivalence class .",
    "symmetry - breaking amounts to selecting some representatives from every equivalence class and constructing rules , composed into a symmetry - breaking constraint , that is only satisfied on those representatives . a _ full _ sbc selects exactly one representative from each orbit , otherwise we call an sbc _ partial_. the most common approach is to order all elements from the solution space lexicographically , and to select the lexicographically smallest element , the _ lex - leader _ , from each orbit as its representative ( cf .",
    "@xcite ) . a _",
    "lex - leader symmetry - breaking constraint _ is an sbc that is satisfied only on the lex - leaders of orbits",
    ".    we will assume a total ordering on the atoms @xmath103 of a logic program @xmath14 and consider the induced lexicographic ordering on the truth assignments , i.e. their interpretation as unsigned integers .",
    "the most common approach for accomplishing the construction of a lex - leader sbc is by encoding a _ permutation constraint _ ( pc ) for every permutation @xmath53 , where @xmath104 a careful analysis reveals some possibilities to reduce the size of permutation constraints ( cf .",
    "the first corresponds to atoms that are mapped to themselves by the permutation , i.e. , @xmath105 .",
    "this makes the consequent of the implication unconditionally true . for sparse symmetries",
    ", one can significantly reduce the size of the permutation constraint with a restriction of the pc construction to only those atoms that are in the support of @xmath53 .",
    "a second possibility corresponds to the lexicographically biggest atom in each cycle of @xmath53 .",
    "assume a cycle @xmath106 on the atoms of some index set @xmath107 .",
    "using equality propagation on the portion of the permutation constraint where @xmath108 , we get @xmath109 which is tautologous .",
    "hence , we can further restrict the index set in the pc by excluding the lexicographically biggest atom in each cycle .    through _ chaining _ which includes additional atoms , we achieve a pc representation that is linear in the number of atoms ( cf .",
    "@xcite ) : @xmath110 finally , we encode above permutation constraint in asp that is satisfied for the lex - leader in the orbit induced by @xmath53 as follows @xmath111 where @xmath112 . the lex - leader symmetry - breaking constraint that breaks every symmetry in a logic program",
    "can now be constructed by conjoining all of its permutation constraints .",
    "we illustrate our pc encoding on the symmetries detected for the previous examples @xmath26 and @xmath27 . since both permutations @xmath113 and @xmath69 ( see fig .",
    "[ fig : graphs ] ) map @xmath7 to @xmath31 and vice versa , they share the same lex - leader sbc which is as simple as follows ( assuming @xmath7 is lexicographically greater than @xmath31 ) : @xmath114 observe that the ordering on the atoms of a logic program @xmath14 induces a preference relation on the answer sets of @xmath14 under symmetry - breaking . here",
    ", the ordering selects @xmath28 as the representative of the set of all answer sets symmetric to @xmath28 , hence , eliminating the answer set @xmath29 .",
    "breaking all symmetries may not speed up search because there are often exponentially many of them . a better trade - off",
    "may be provided by breaking _",
    "enough _ symmetries @xcite .",
    "irredundant generators are good candidates because they can not be expressed in terms of each other , and implicitly represent all symmetries .",
    "hence , breaking all symmetries in a generating set can eliminate all problem symmetries .",
    "however , this does not hold in general .",
    "in fact , it has been shown that even when breaking all symmetries is polynomial , there exists cases where for which sbcs based on any irredundant generating set fail to break all symmetry @xcite",
    ".    we can further reduce the size of symmetry - breaking constraints by restricting the construction of permutation constraints up to the @xmath115-th atom in each permutation @xcite .",
    "consider the all - interval series problem encoded as in example  [ ex : allint ] and the generators @xmath69 and @xmath70 from example  [ ex : allintsym ] .",
    "the symmetry - breaking constraint , where both permutation constraints are restricted to the second atom , is given through the following , where @xmath116 are new atoms . @xmath117",
    "our approach to symmetry - breaking answer set solving has been implemented within the preprocessor _",
    "sbass_. it accepts a logic program in _ smodels _ format  @xcite produced by a grounder , e.g. _ lparse _ and _ gringo _ , and incorporates the graph automorphism tool _ saucy _ ( 2.1 ) for detecting irredundant generators of the group of permutational symmetries . in return , _ sbass _ outputs the given program together with symmetry - breaking constraints , again in _",
    "smodels _ format , which can be applied to any suitable answer set solver , e.g. _ smodels _ and _ clasp_. note that _ sbass _ provides several options , for instance , to print detected generators in cycle notation or statistics .    to evaluate our approach , we conducted experiments on asp encodings of several difficult combinatorial search problems .",
    "experiments consider the answer set solver _ clasp _ ( 1.3.2 ) on instances with symmetry - breaking in terms of generators , i.e. , instances preprocessed by _ sbass _ , and without symmetry - breaking . to explore the impact of partial sbc ,",
    "we also tried restrictions on the construction of permutation constraints up to the @xmath115-th support in a permutation , denoted as _ clasp_@xmath118 .",
    "all tests were run on a 2.00  ghz pc under linux , where each run was limited to 600 s time and 1 gb ram , preprocessing excluded .",
    "however , we also report the runtime for _ sbass _ and give the number of generators .",
    "the latter gives an impression about the size of the search space implicitly pruned through symmetry - breaking . in the experiments below",
    "we generally compare the runtime for testing the existence of an answer set to a given problem .",
    "the _ pigeon hole problem _ is to show that it is impossible to put @xmath32 pigeons into @xmath34 holes if each pigeon must be put into a distinct hole .",
    "this problem is provably exponentially hard for any resolution based method , but is tractable using symmetries ( all the pigeons are interchangeable and all the holes are interchangeable ) .",
    "we encoded the pigeon hole problem based on the support encoding for the all - different constraint @xcite , as follows , where @xmath119 is taken to mean that pigeon @xmath120 is assigned hole @xmath121 : @xmath122 the runtimes for various sizes of @xmath32 are shown in table [ tab : php ] .",
    "although symmetry - breaking has a positive impact , the runtime even with _",
    "clasp_@xmath123 is still exponentially growing with the number of pigeons . here , symmetry - breaking on the generating set returned by _",
    "saucy _ does not break all problem symmetries .",
    "we enforced _",
    "saucy _ to compute a different set of generators , denoted as _",
    "clasp_@xmath124 , and got a polynomial runtime . on such problems ,",
    "full sbcs are essential .",
    ".runtime results in seconds for pigeon hole problems .",
    "[ tab : php ] [ cols=\"^,^,^,^,^,^,^,^,^ \" , ]",
    "we have investigated symmetry - breaking in the context of answer set programming .",
    "in particular , we proposed a reduction from symmetry detection of disjunctive logic programs to the automorphisms of a coloured digraph .",
    "our techniques were formulated as a completely automated flow that ( 1 ) starts with a logic program , ( 2 ) detects all of its permutational symmetries , ( 3 ) represents all symmetries implicitly and always with exponential compression , ( 4 ) adds symmetry - breaking constraints that do not affect the existence of answer sets , and ( 5 ) can be applied to any existing asp system without changing its code , which allows for programmers to select the solvers that best fit their needs .",
    "we have empirically evaluated symmetry - breaking on difficult combinatorial search problems and got promising results . in many cases , sbc lead to significant pruning of the search space and",
    "yield solutions to problems which are otherwise intractable .",
    "we also observe a significant compression of the solution space which makes symmetry - breaking attractive whenever all solutions have to be post - processed .    motivated by this success future work concerns an extension to choice rules and weight constraints @xcite .",
    "however , one should not expect symmetry - breaking answer set solving to give improvement on all benchmark classes .",
    "many asp benchmarks have large numbers of symmetries , but can be solved so quickly that the symmetry detection and -breaking overhead is not justified .",
    "furthermore , it is often reasonable to assume that the symmetries for a problem are known . for particular symmetries , there are more efficient breaking methods ( cf .",
    "this is also target to future work .",
    "aloul , f.a . ,",
    "ramani , a. , markov , i.l . , sakallah , k.a .",
    ": solving difficult instances of boolean satisfiability in the presence of symmetry .",
    "ieee transactions on cad of integrated circuits and systems 22(9 ) , 11171137 ( 2003 )                              leone , n. , pfeifer , g. , faber , w. , eiter , t. , gottlob , g. , perri , s. , scarcello , f. : the dlv system for knowledge representation and reasoning .",
    "acm transactions on computational logic 7 , 499562 ( 2002 )"
  ],
  "abstract_text": [
    "<S> in the context of answer set programming , this paper investigates symmetry - breaking to eliminate symmetric parts of the search space and , thereby , simplify the solution process . </S>",
    "<S> we propose a reduction of disjunctive logic programs to a coloured digraph such that permutational symmetries can be constructed from graph automorphisms . </S>",
    "<S> symmetries are then broken by introducing symmetry - breaking constraints . </S>",
    "<S> for this purpose , we formulate a preprocessor that integrates a graph automorphism system . </S>",
    "<S> experiments demonstrate its computational impact . </S>"
  ]
}