{
  "article_text": [
    "palindromic substrings are a well - studied topic in stringology and combinatorics on words . since a single character is a palindrome , there are always between @xmath6 and @xmath7 non - empty palindromic substrings in a string of length @xmath6 .",
    "there are only @xmath8 possible centers of those substrings , however ",
    ", the @xmath6 individual characters and the @xmath9 gaps between them  so many algorithms involving palindromic substrings still run in subquadratic time .",
    "for example , manacher  @xcite gave a linear - time algorithm for listing all the palindromic prefixes of a string .",
    "apostolico , breslauer and galil  @xcite observed that manacher s algorithm can be used to list in linear time all maximal palindromic substrings , which are those that can not be extended without changing the position of the center .",
    "other linear - time algorithms for this problem were given by jeuring  @xcite and gusfield  @xcite . since any palindromic substring",
    "is contained within the maximal palindromic substring with the same center , the list of all maximal palindromic substrings can be viewed as a linear - space representation of all palindromic substrings . for more discussion of algorithms involving palindromes , we refer the reader to jeuring s recent survey  @xcite .",
    "palindromes are a useful tool for investigating string complexity ; see , e.g. ,  @xcite .",
    "a natural measure of the asymmetry of a string @xmath10 is its palindromic length @xmath11 , which is the minimum number of palindromic substrings into which @xmath10 can be factored .",
    "that is , @xmath11 is the minimum number @xmath12 such that there exist palindromes @xmath13 whose concatenation @xmath14 .",
    "for example , @xmath15 and @xmath16 .",
    "notice that , since a single character is a palindrome , @xmath11 is always well - defined and lies between 0 and @xmath17 , or 1 and @xmath17 if @xmath10 is non - empty .",
    "in fact , @xmath18 ) - 1 \\leq { \\ensuremath{\\mathsf{pl}}}(s [ 1 .. i + 1 ] ) \\leq { \\ensuremath{\\mathsf{pl}}}(s [ 1 .. i ] ) + 1 $ ] for @xmath19 : first , if @xmath20 $ ] is a factorization of @xmath21 $ ] into @xmath12 palindromic substrings , then @xmath22 , s [ h + 1 .. i]$ ] is a factorization of @xmath23 $ ] into @xmath24 palindromic substrings ; second , if @xmath25 is a factorization of @xmath23 $ ] into @xmath12 palindromic substrings , then @xmath26 $ ] is a factorization of @xmath21 $ ] into @xmath24 palindromic substrings .",
    "we became interested in palindromic length because of a recent conjecture by frid , puzynina and zamboni  @xcite .",
    "some infinite strings ( e.g. , the regular paperfolding sequence ) are highly asymmetric in that they contain only a finite number of distinct palindromic substrings ; see  @xcite for more discussion . for such strings ,",
    "the palindromic length of any finite substring is proportional to that substring s length .",
    "in contrast , for other infinite strings ( e.g. , the infinite power of any palindrome ) , the palindromic length of any finite substring is bounded .",
    "frid et al .",
    "conjectured that all such infinite strings are ( ultimately ) periodic .",
    "it is easy to compute @xmath11 in quadratic time via dynamic programming .",
    "alatabbi , iliopoulos and rahman  @xcite recently gave a linear - time algorithm for computing a minimum factorization of @xmath10 into _ maximal _ palindromic substrings , when such a factorization exists ; it does not exist for , e.g. , @xmath27 .",
    "even when such a factorization exists , it may consist of more than @xmath11 substrings ; e.g. , @xmath28 can be factored into @xmath29 , @xmath30 and @xmath31 but can not be factored into fewer than four maximal palindromic substrings .    in this paper",
    ", we give an @xmath0-time and @xmath1-space algorithm for factoring @xmath10 into @xmath11 palindromic substrings .",
    "the average case time complexity is in fact linear , but the worst case is @xmath32 , which we show by an analysis of the palindromic structure of zimin words  ( * ? ? ?",
    "* chapter  5.4 ) .    independently of us , i , sugimoto , inenaga , bannai and takeda  @xcite discovered essentially the same algorithm .",
    "also , kosolobov , rubinchik and shur  @xcite have recently described an algorithm recognizing strings with a given palindromic length .",
    "their result can be used for computing the palindromic length of a string @xmath10 in @xmath33 time .",
    "we start by describing a simple algorithm for computing @xmath11 in @xmath34 time and @xmath1 space using the observation that , for @xmath35 , @xmath36 ) = \\min_i \\left\\ { \\rule{0ex}{2ex } { \\ensuremath{\\mathsf{pl}}}(s [ 1 .. i - 1 ] ) + 1\\ : \\",
    "j,\\ \\mbox{\\(s [ i .. j]\\ ) is a palindrome } \\right\\}\\,.\\ ] ] we compute and store an array @xmath37 $ ] , where @xmath38=0 $ ] and @xmath39={\\ensuremath{\\mathsf{pl}}}(s[1 .. i])$ ] for @xmath40 . at each step",
    "@xmath41 , we compute the set @xmath42 of the starting positions of all palindromes ending at @xmath41 from the set @xmath43 using the observation that @xmath44 $ ] , @xmath45 , is a palindrome if and only if @xmath46 $ ] is a palindrome and @xmath47 = s [ j]$ ] .",
    "the algorithm is given in figure  [ fig - quadratic - algorithm ] .    00 : = = = = = = ( @xmath48 $ ] ) + 1:@xmath38 \\la 0 $ ] + 2:@xmath49 + 3:@xmath50 @xmath6 + 4:@xmath51 + 5:@xmath52 + 6:@xmath53 @xmath54=s[j]$ ] + 7:@xmath55 + 8:@xmath56 @xmath57=s[j]$ ] + 9:@xmath58 + 10:@xmath59 + 11:@xmath60 \\la j$ ] + 12:@xmath52 + 13:@xmath60 \\la \\min({\\ensuremath{\\mathsf{pl}}}[j],{\\ensuremath{\\mathsf{pl}}}[i-1]+1)$ ] + 14:@xmath61 $ ]    the space requirement is clearly @xmath1 . during the @xmath41th step of the algorithm ,",
    "we use time @xmath62 , so for all the steps we use total time proportional to the number of palindromic substrings in @xmath10 . for most strings",
    "the time is linear ( see theorem  [ thrm : average ] ) but the worst case is quadratic , e.g. , for @xmath63 or @xmath64 .",
    "it is straightforward to modify the algorithm so that it produces an actual minimum palindromic factorization of @xmath10 , without increasing the running time or space by more than a constant factor .",
    "in this section , we replace the representation @xmath42 of the palindromes ending at @xmath41 with a more compact representation @xmath65 that needs only @xmath66 space and can be computed in @xmath66 time from @xmath67 .",
    "the representation is based on combinatorial properties of palindromes .",
    "a string @xmath68 is a _ border _ of a string @xmath69 if @xmath68 is both a prefix of @xmath69 and a suffix of @xmath69 , and a _ proper _ border if @xmath70 .",
    "the following easy lemmas establish a connection between borders and palindromes .",
    "[ lemm : palbor ] let @xmath68 be a suffix of a palindrome @xmath69 .",
    "then @xmath68 is a border of @xmath69 iff @xmath68 is a palindrome .",
    "[ lemm : pallongbor ] let @xmath69 be a string with a border @xmath68 such that @xmath71 . then @xmath69 is a palindrome iff @xmath68 is a palindrome .",
    "a positive integer @xmath72 is a _ period _ of a string @xmath69 if there exists a string @xmath73 of length @xmath74 such that @xmath69 is a factor of @xmath75 .",
    "it is well known that @xmath68 is a proper border of @xmath69 if and only if @xmath76 is a period of @xmath69 .",
    "this , together with lemma  [ lemm : palbor ] , implies the following connection between periods and palindromes .",
    "[ lemm : palper ] let @xmath68 be a proper suffix of a palindrome @xmath69 . then @xmath76 is a period of @xmath69 iff @xmath68 is a palindrome . in particular",
    ", @xmath76 is the smallest period of @xmath69 iff @xmath68 is the longest palindromic proper suffix of @xmath69 .",
    "now we are ready to state and prove the key combinatorial property of palindromic suffixes .",
    "[ lemm : gap - properties ] let @xmath69 be a palindrome , @xmath68 the longest palindromic proper suffix of @xmath69 and @xmath77 the longest palindromic proper suffix of @xmath68 .",
    "let @xmath78 and @xmath79 be strings such that @xmath80 and @xmath81",
    ". then    1 .",
    "@xmath82 ; 2 .   if @xmath83 then @xmath84 ; 3 .   if @xmath85 then @xmath86 .",
    "( 11,-2 ) rectangle ( 14,-1 ) ; ( 0,-1 ) rectangle ( 11,0 ) ;    ( 0,0 ) rectangle ( 20,1 ) ; ( 11,-1 ) rectangle ( 20,0 ) ; ( 14,-2 ) rectangle ( 20,-1 ) ;    ( 10 , 0.5 ) node @xmath69 rectangle ( 10 , 0.5 ) ; ( 15.5 , -0.5 ) node @xmath68 rectangle ( 15.5 , -0.5 ) ; ( 5.5 , -0.5 ) node @xmath78 rectangle ( 5.5 , -0.5 ) ; ( 17 , -1.5 ) node @xmath77 rectangle ( 17 , -1.5 ) ; ( 12.5 , -1.5 ) node @xmath79 rectangle ( 12.5 , -1.5 ) ;    ( 0 , 1 ) .. controls ( 6 , 4 ) and ( 14 , 4 ) .. ( 20 , 1 ) ; ( 11 , 1 ) .. controls ( 13.5 , 2.5 ) and ( 17.5 , 2.5 ) .. ( 20 , 1 ) ; ( 14 , 1 ) .. controls ( 15.5 , 2 ) and ( 18.5 , 2 ) .. ( 20 , 1 ) ;    ( 11 , 0 )  ( 11 , 1 ) ; ( 14 , -1 )  ( 14 , 1 ) ;    see figure  [ fig : lemm - gap - properties ] for an illustration .",
    "\\(1 ) by lemma  [ lemm : palper ] , @xmath87 is the smallest period of @xmath69 , and @xmath88 is the smallest period of @xmath68 .",
    "since @xmath68 is a factor of @xmath69 , either @xmath89 or @xmath90 is a period of @xmath68 too , and thus it can not be smaller than @xmath91 .",
    "\\(2 ) by lemma  [ lemm : palbor ] , @xmath68 is a border of @xmath69 and thus @xmath79 is a prefix of @xmath69 .",
    "let @xmath73 be a string such that @xmath92 .",
    "then @xmath77 is a border of @xmath73 and @xmath93 , see figure  [ fig : lemm - gap - properties2 ] .",
    "since we assume @xmath83 , we must have @xmath94 .",
    "suppose to the contrary that @xmath95 .",
    "then @xmath96 , and by lemma  [ lemm : pallongbor ] , @xmath73 is a palindrome .",
    "but this contradicts @xmath68 being the longest palindromic proper suffix of @xmath69 .",
    "\\(3 ) in the proof of ( 2 ) we saw that @xmath79 is a prefix of @xmath69 , and so is @xmath78 by definition .",
    "thus @xmath86 if @xmath85 .",
    "( 6,-2 ) rectangle ( 9,-1 ) ; ( 0,2 ) rectangle ( 3,3 ) ; ( 0,-1 ) rectangle ( 6,0 ) ;    ( 0,0 ) rectangle ( 20,1 ) ; ( 0,1 ) rectangle ( 14,2 ) ; ( 3,2 ) rectangle ( 14,3 ) ; ( 3,3 ) rectangle ( 20,4 ) ; ( 6,-1 ) rectangle ( 20,0 ) ; ( 9,-2 ) rectangle ( 20,-1 ) ;    ( 10,0.5 ) node @xmath69 rectangle ( 10,0.5 ) ; ( 7,1.5 ) node @xmath68 rectangle ( 7,1.5 ) ; ( 8.5,2.5 ) node @xmath77 rectangle ( 8.5,2.5 ) ; ( 1.5,2.5 ) node @xmath79 rectangle ( 1.5,2.5 ) ; ( 11.5,3.5 ) node @xmath73 rectangle ( 11.5,3.5 ) ; ( 13,-0.5 ) node @xmath68 rectangle ( 13,-0.5 ) ; ( 3,-0.5 ) node @xmath78 rectangle ( 3,-0.5 ) ; ( 14.5,-1.5 ) node @xmath77 rectangle ( 14.5,-1.5 ) ; ( 7.5,-1.5 ) node @xmath79 rectangle ( 7.5,-1.5 ) ;    ( 14,1.5 )  ( 20,1.5 ) ; ( 17 , 1.4 ) node[above ] @xmath90 rectangle ( 17 , 1.4 ) ;    we will use the above lemma to establish the properties of the set @xmath42 . let @xmath97 with @xmath98 . by _",
    "gap _ we mean the difference @xmath99 of two consecutive values in @xmath42 .",
    "the following result has been proven in  @xcite but we provide a proof for completeness .    [",
    "corr : number - of - gaps ] the sequence of gaps in @xmath42 is non - increasing and there are at most @xmath66 distinct gaps .    for any @xmath100 $ ] ,",
    "if we let @xmath101 $ ] , @xmath102 $ ] and @xmath103 $ ] , we have the situation of lemma  [ lemm : gap - properties ] with gaps of @xmath90 and @xmath91 .",
    "the sequence of gaps is non - increasing by lemma  [ lemm : gap - properties](1 ) .",
    "if we have a change of gap , i.e. , @xmath83 , we must have @xmath104 by lemma  [ lemm : gap - properties](2 ) , i.e. , the length of the palindromic suffix is halved in two steps .",
    "this can not happen more than @xmath66 times .",
    "we will partition the set @xmath42 by the gaps into @xmath66 consecutive subsets , each of which can be represented in constant space since it forms an arithmetic progression . for any positive integer @xmath105 , we define @xmath106 , and @xmath107 .",
    "each non - empty @xmath108 is represented by the triple @xmath109 .",
    "let @xmath65 be the list of such triples in decreasing order of @xmath105 .",
    "the list @xmath65 is a full representation of @xmath42 of size @xmath110 .",
    "we will show that @xmath65 can be computed from @xmath67 in @xmath111 time . in the quadratic - time algorithm ,",
    "each element @xmath112 of @xmath43 was either eliminated or replaced by @xmath113 in @xmath42 .",
    "the following lemma shows that the decision to eliminate or replace can be made simultaneously for all elements of a partition @xmath114 .",
    "see figure  [ fig : g - repr - example ] for an example .",
    "[ lemm : groups ] let @xmath115 and @xmath116 be two consecutive elements of @xmath114",
    ". then @xmath117 iff @xmath118 .    by definition , @xmath119 , and",
    "the predecessor of @xmath115 in @xmath42 is @xmath120 .",
    "using the definitions from the proof of lemma  [ corr : number - of - gaps ] , we have the situation of lemma  [ lemm : gap - properties](3 ) , which implies that @xmath121=s[p_{i+1}-1]=c$ ] .",
    "thus , @xmath122 iff @xmath123=c$ ] iff @xmath124 .    thus , when computing @xmath65 , each triple @xmath125 will be either eliminated or replaced by @xmath126 .",
    "the resulting sequence of triples is @xmath127 = s[j ] \\}\\,,\\ ] ] which is a full representation of all palindromes longer than two in @xmath42 .",
    "however , the triples in @xmath128 may no longer perfectly correspond to the partitions @xmath108 because the gaps may have changed . specifically , if the smallest element @xmath115 in @xmath114 is replaced by @xmath129 but its predecessor @xmath120 in @xmath43 is eliminated , then @xmath129 is not in @xmath108 but it is , at this point , represented by the triple @xmath130 .",
    "note that only the smallest element of each partition can be affected by this .",
    "in such cases , we separate the first element into its own triple , i.e. , we replace @xmath130 with @xmath131 and ( if @xmath132 ) @xmath133 , where @xmath134 is the new gap preceding @xmath129 in @xmath42 .",
    "we will also add separate triples to represent palindromes of lengths one and ( possibly ) two .",
    "let @xmath135 be the sequence of triples obtained from @xmath128 by the above process ( see lines 821 in figure  [ fig - algorithm ] ) .",
    "it represents exactly the palindromes in @xmath42 and the @xmath105-values are now correct , but there may be multiple triples with the same @xmath105 . thus we obtain the final sequence @xmath65 from @xmath135 by merging triples with the same @xmath105 .",
    "the full procedure for computing @xmath65 from @xmath67 is shown on lines  430 in figure  [ fig - algorithm ] and the example of computation is given in figure  [ fig : g - update - example ] .",
    "each triple is processed in constant time and the number of triples never exceeds @xmath111 .",
    "@xmath136 can be computed from @xmath67 in @xmath137 time .",
    "in this section , we will show how to compute @xmath60 $ ] from @xmath138 $ ] and @xmath65 in @xmath139 time .",
    "the key to fast computation of @xmath65 was the close relation between @xmath108 and @xmath114 .",
    "now we will rely on the relation between @xmath108 and @xmath140 captured by the following result .    if @xmath141 for @xmath142 , then @xmath143 .",
    "[ lemm : gpl - correctness ]    by definition , @xmath141 is equivalent to saying that @xmath144 , and we need to show that @xmath145 .",
    "we will show first that @xmath146=\\{i , i+\\delta,\\dots , i+(k-2)\\delta\\}$ ] and then that @xmath147=\\emptyset$ ] .    since @xmath148 $ ] and @xmath149 $ ] are palindromes and @xmath68 is the longest proper border of @xmath69 , @xmath150=y = s[i .. j]$ ] .",
    "thus for all @xmath151 $ ] , @xmath152 iff @xmath153 ( see figure  [ fig : gpl - correctness-1 ] ) .",
    "in particular , the gaps in both cases are the same and for all @xmath154 $ ] , @xmath155 iff @xmath156 . thus @xmath146",
    "= \\{i , i+\\delta,\\dots , i+(k-2)\\delta\\}$ ] .    we still need to show that @xmath147=\\emptyset$ ] , which is true if and only if @xmath157 .",
    "suppose to the contrary that @xmath158 $ ] is a palindrome and let @xmath159 $ ] .",
    "then @xmath160={{w}^r}$ ] , the reverse of @xmath73 .",
    "since @xmath161 $ ] and @xmath162 $ ] are palindromes too , we have that @xmath163=w$ ] and @xmath164={{w}^r}$ ] .",
    "finally , since @xmath77 is a palindrome , @xmath165=wz{{w}^r}$ ] is a palindrome ( see figure  [ fig : gpl - correctness-2 ] ) .",
    "this implies that @xmath166 and thus @xmath167 , which is a contradiction .    by the above lemma ,",
    "@xmath168 whenever @xmath169 .",
    "thus we can compute @xmath170 + 1 : i\\in p_{j,\\delta}\\}$ ] from @xmath171 in constant time .",
    "we will store the value @xmath172 in an array @xmath173 $ ] at the position @xmath174 .",
    "note that @xmath175 is the predecessor of @xmath176 in @xmath42 and the position is shared by @xmath171 ( when @xmath177 ) .",
    "the following lemma shows that the position is not overwritten by another value between the rounds @xmath178 and @xmath41 .",
    "see figure  [ fig : gpl - example ] for an example .",
    "let @xmath179 .",
    "for all @xmath180 $ ] , @xmath181 .",
    "[ lemm : no - overwriting - lemma ]    suppose to the contrary that @xmath182 for some @xmath180 $ ] , i.e. , @xmath183 $ ] is a palindrome . then @xmath184 $ ] for @xmath185",
    "is a palindrome too ( see figure  [ fig : no - overwriting - lemma ] ) . since @xmath186 and @xmath187 , this contradicts @xmath175 being the predecessor of @xmath188 in @xmath189 .",
    "( 0,0 ) rectangle ( 4,1 ) ; ( 4,0 ) rectangle ( 6,1 ) ; ( 6,0 ) rectangle ( 14,1 ) ; ( 14,0 ) rectangle ( 18,1 ) ; ( 18,0 ) rectangle ( 20,1 ) ;    ( 17.6,0 ) node[below ] @xmath12 rectangle ( 17.6,0 ) ; ( 19.8,0 ) node[below ] @xmath41 rectangle ( 19.8,0 ) ; ( 13.1,0 ) node[below ] @xmath190 rectangle ( 13.1,0 ) ; ( 7.1,0 ) node[below ] @xmath191 rectangle ( 7.1,0 ) ; ( 0.4,0 ) node[below ] @xmath175 rectangle ( 0.4,0 ) ;    ( 0 , 1 ) .. controls ( 5,5 ) and ( 13,5 ) .. ( 18 , 1 ) ; ( 4 , 1 ) .. controls ( 7,2.5 ) and ( 11,2.5 ) .. ( 14 , 1 ) ;    ( 0,1.5 )  ( 4,1.5 ) ; ( 14,1.5 )  ( 18,1.5 ) ;    ( 2 , 1.5 ) node[above ] @xmath192 rectangle ( 2 , 1.5 ) ; ( 16 , 1.5 ) node[above ] @xmath192 rectangle ( 16 , 1.5 ) ;    ( 0,1.5 )  ( 0,1 ) ; ( 4,1.5 )  ( 4,1 ) ; ( 14,1.5 )  ( 14,1 ) ; ( 18,1.5 )  ( 18,1 ) ;    00 : = = = = = = ( @xmath48 $ ] ) + 1:@xmath38 \\la 0 $ ] + 2:@xmath193 + 3:@xmath50 @xmath6 + 4:@xmath194 + 5:@xmath195 + 6:@xmath53 @xmath54=s[j]$ ] + 7:@xmath196 //",
    "appends the given triple + 8:@xmath197 + 9:@xmath198// makes @xmath199 big enough to act as @xmath200 + 10:@xmath201 + 11:@xmath202 + 12:@xmath203 + 13:@xmath132 + 14:@xmath204 + 15 : + 16:@xmath205 + 17:@xmath206 + 18:@xmath207 @xmath57=s[j]$ ] + 19:@xmath208 + 20:@xmath209 + 21:@xmath210 + 22:@xmath193 + 23:@xmath211 // removes and returns the first triple + 24:@xmath212 + 25:@xmath213 + 26:@xmath214 + 27 : + 28:@xmath215 + 29:@xmath216 + 30:@xmath215 + 31:@xmath60 \\la j$ ] + 32:@xmath195 + 33:@xmath217 + 34:@xmath218 + 1 $ ] + 35:@xmath132 + 36:@xmath219)$ ] + 37:@xmath220 + 38:@xmath221 \\la m$ ] + 39:@xmath60 \\la \\min({\\ensuremath{\\mathsf{pl}}}[j],m)$ ] + 40:@xmath61 $ ]    the full algorithm is given in figure  [ fig - algorithm ] .",
    "the running time of round @xmath41 is @xmath222 . since @xmath223 for all @xmath41",
    ", we obtain the following result .",
    "the palindromic length of a string of length @xmath6 can be computed in @xmath224 time and @xmath1 space .    as with the quadratic - time algorithm ,",
    "the algorithm can be modified to produce an actual minimum palindromic factorization without an asymptotic increase in time or space complexities : we need only store with each palindromic length in @xmath225 and @xmath226 , the length of the last palindrome in the corresponding minimum factorization .",
    "the algorithm is also online in the sense that the string is processed from left to right and , for each @xmath41 , the character @xmath123 $ ] is processed in @xmath66 time , after which we can report the palindromic length @xmath227)$ ] in constant time and the corresponding factorization in @xmath228 ) } \\right)}}$ ] time .",
    "in this section , we show that the average case time complexity of the algorithm is linear , but that the worst case is indeed @xmath32 .",
    "[ thrm : average ] the average case time complexity of the algorithms in figure  [ fig - quadratic - algorithm ] and in figure  [ fig - algorithm ] is @xmath1 .",
    "consider the set @xmath229 of the @xmath230 strings of length @xmath6 over an alphabet @xmath231 of size @xmath232 .",
    "all of them have a palindromic suffix of length one , @xmath233 of them have a palindromic suffix of length two , and the same number have a palindromic suffix of length three ( assuming @xmath234 ) .",
    "more generally , for @xmath235 , the number of strings with a palindromic suffix of length @xmath236 is @xmath237 when @xmath236 is even and @xmath238 when @xmath236 is odd .",
    "then the total number of palindromic suffixes in @xmath229 is @xmath239 therefore the average number of palindromes ending at any position is less than three , and both algorithms spend a constant time on average for processing each position .",
    "we show the worst case complexity of the algorithm by constructing a family of strings based on the zimin words  ( * ? ? ?",
    "* chapter  5.4 ) .",
    "let @xmath240 , and @xmath241 for @xmath242 .",
    "the limit of this sequence is the infinite zimin word @xmath243 . for a non - negative integer @xmath6 , let @xmath244 be the number of 1-bits in the binary representation of @xmath6 .",
    "for example , @xmath245 , @xmath246 , @xmath247 and @xmath248 .",
    "[ lm : zimin ] the prefix @xmath249 $ ] of the infinite zimin word @xmath250 has exactly @xmath244 suffix palindromes .    from the definition , it is easy to see that the prefix @xmath249 $ ] has a unique factorization of the form @xmath251 = z_{i_k}(i_{k}+1 ) \\cdot z_{i_{k-1}}(i_{k-1}+1 ) \\cdots z_{i_2}(i_2 + 1 )    \\cdot z_{i_1}(i_1 + 1)\\ ] ] where @xmath252 .",
    "for example , @xmath253=z_34z_12 $ ] .",
    "since the length of a factor @xmath254 is @xmath255 , we must have that @xmath256 .",
    "thus @xmath257 are the positions of 1-bits in the binary representation of @xmath6 , and @xmath258 .",
    "let @xmath259 for @xmath260 $ ] . clearly , @xmath261 $ ] is a palindrome of length @xmath262 centered at @xmath263=(i_k+1)$ ] .",
    "for example , @xmath264=21412 $ ] is a palindrome centered at @xmath265=4 $ ] . since @xmath263 $ ] is the only occurrence of @xmath266 in @xmath249 $ ] , there can be no other suffix palindromes with a starting position in @xmath267 $ ] . by a similar argument",
    ", there is exactly one suffix palindrome with a starting position in @xmath268 $ ] , the one centered at @xmath269=(i_{k-1}+1)$ ] , and so on . in total , @xmath249 $ ] has exactly @xmath236 suffix palindromes .",
    "the running time of the algorithm in figure  [ fig - algorithm ] for input @xmath249 $ ] is @xmath32 .    by lemma  [ lm : zimin ] ,",
    "@xmath270 $ ] has exactly @xmath271 suffix palindromes , i.e. , @xmath272 . from the proof it is easy to see that each of the suffix palindromes",
    "is at least twice as long as the next shorter suffix palindrome .",
    "thus there are no two identical gaps in @xmath42 and @xmath273 . since the algorithm spends @xmath274 time in round @xmath41 , the total time complexity is @xmath275 , which is @xmath276  @xcite .",
    "many thanks to the organizers and participants of the stringmasters 2013 workshops in verona and prague , and to the anonymous reviewers . this research was partially supported by the italian miur project prin 2010lya9rh , `` automi e linguaggi formali : aspetti matematici e applicativi '' , and by the academy of finland through grant 268324 and grant 118653 ( algodan ) .",
    "t.  i , s.  sugimoto , s.  inenaga , h.  bannai , and m.  takeda . computing palindromic factorizations and palindromic covers on - line . in _ proceedings of the 25th symposium on combinatorial pattern matching ( cpm )",
    "_ , volume 8486 of _ lncs _ , pages 150161 .",
    "springer , 2014 .",
    "w.  matsubara , s.  inenaga , a.  ishino , a.  shinohara , t.  nakamura , and k.  hashimoto .",
    "efficient algorithms to compute compressed longest common substrings and compressed palindromes . , 410(8 - 10):900913 , 2009 ."
  ],
  "abstract_text": [
    "<S> we give an @xmath0-time , @xmath1-space algorithm for factoring a string into the minimum number of palindromic substrings . </S>",
    "<S> that is , given a string @xmath2 $ ] , in @xmath0 time our algorithm returns the minimum number of palindromes @xmath3 such that @xmath4 . </S>",
    "<S> we also show that the time complexity is @xmath1 on average and @xmath5 in the worst case . </S>",
    "<S> the last result is based on a characterization of the palindromic structure of zimin words .    </S>",
    "<S> string algorithms , palindromes , factorization </S>"
  ]
}