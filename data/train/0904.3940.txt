{
  "article_text": [
    "complex systems are characterized by a division in subsystems , which in turn contain other subsystems in a hierarchical fashion .",
    "herbert a. simon , already in 1962 , pointed out that such hierarchical organization plays a crucial role both in the generation and in the evolution of complex systems  @xcite .",
    "many complex systems can be described as graphs , or networks , where the elementary parts of a system and their mutual interactions are nodes and links , respectively  @xcite . in a network ,",
    "the subsystems appear as subgraphs with a high density of internal links , which are loosely connected to each other .",
    "these subgraphs are called communities and occur in a wide variety of networked systems  @xcite .",
    "communities reveal how a network is internally organized , and indicate the presence of special relationships between the nodes , that may not be easily accessible from direct empirical tests .",
    "communities may be groups of related individuals in social networks  @xcite , sets of web pages dealing with the same topic  @xcite , biochemical pathways in metabolic networks  @xcite , etc .    for these reasons , detecting communities in networks has become a fundamental problem in network science .",
    "many methods have been developed , using tools and techniques from disciplines like physics , biology , applied mathematics , computer and social sciences . however , there is no agreement yet about a set of reliable algorithms , that one can use in applications .",
    "the main reason is that current techniques have not been thoroughly tested .",
    "usually , when a new method is presented , it is applied to a few simple benchmark graphs , artificial or from the real world , which have a known community structure .",
    "the most used benchmark is a class of graphs introduced by girvan and newman  @xcite .",
    "each graph consists of @xmath0 nodes , which are divided into four groups of @xmath1 : the probabilities of the existence of a link between a pair of nodes of the same group and of different groups are @xmath2 and @xmath3 , respectively .",
    "this benchmark is a special case of the _ planted @xmath4-partition model",
    ". however , it has two drawbacks : 1 ) all nodes have the same expected degree ; 2 ) all communities have equal size . these features are unrealistic , as complex networks are known to be characterized by heterogeneous distributions of degree  @xcite and community sizes  @xcite . in a recent paper  @xcite ,",
    "we have introduced a new class of benchmark graphs , that generalize the benchmark by girvan and newman by introducing power law distributions of degree and community size .",
    "most community detection algorithms perform very well on the benchmark by girvan and newman , due to the simplicity of its structure .",
    "the new benchmark , instead , poses a much harder test to algorithms , and makes it easier to disclose their limits .",
    "most research on community detection focuses on the simplest case of undirected and unweighted graphs , as the problem is already very hard .",
    "however , links of networks from the real world are often directed and carry weights , and both features are essential to understand their function  @xcite . moreover , in real graphs communities are sometimes overlapping  @xcite , i. e. they share vertices .",
    "this aspect , frequent in certain types of systems , like social networks , has received some attention in the last years  @xcite .",
    "finding communities in networks with directed and weighted edges and possibly overlapping communities is highly non - trivial .",
    "many techniques working on undirected graphs , for instance , can not be extended to include link direction .",
    "this implies the need of new approaches to the problem . in any case , once a method is designed , it is important to test it against reliable benchmarks . since the new benchmark of ref .",
    "@xcite is defined for undirected and unweighted graphs , we extend it here to the directed and weighted cases . for any type of benchmark",
    ", we will include the possibility to have overlapping communities .",
    "sawardecker et al .",
    "have recently proposed a different benchmark with overlapping communities where the probability that two nodes are linked grows with the number of communities both nodes belong to  @xcite .    our algorithms to create the benchmark graphs have a computational complexity which grows linearly with the number of links and",
    "reduce considerably the fluctuations of specific realizations of the graphs , so that they come as close as possible to the type of structure described by the input parameters .",
    "we use our benchmark to make some testing of modularity optimization  @xcite , which is well defined in the case of directed and weighted networks  @xcite .    in section  [ sec1 ]",
    "we describe the algorithms to create the new benchmarks .",
    "tests are presented in section  [ sec2 ] .",
    "conclusions are summarized in section  [ sec3 ] .",
    "we start by presenting the algorithm to build the benchmark for undirected graphs with overlaps between communities",
    ". then we extend it to the case of weighted and directed graphs .",
    "the aim of this section is to describe the algorithm to generate undirected and unweighted benchmark graphs , where each node is allowed to have memberships in more communities .",
    "the algorithm consists of the following steps :    1 .",
    "we first assign the number @xmath5 of memberships of node @xmath6 , i.e. the number of communities the node belongs to .",
    "of course , if each node has only one membership , we recover the benchmark of ref .",
    "@xcite ; in general we can assign the number of memberships according to a certain distribution .",
    "next , we assign the degrees @xmath7 by drawing @xmath8 random numbers from a power law distribution  @xcite with exponent @xmath9 .",
    "we also introduce the @xmath10 @xmath11 : @xmath12 is the internal degree of the node @xmath6 , i. e. the number of neighbors of node @xmath6 which have at least one membership in common with @xmath6 . in this way , the internal degree is a fixed fraction of the total degree for all the nodes . of course , it is straightforward to generalize the algorithm to implement a different rule ( one can introduce a non linear functional dependence , individual mixing parameters , etc . ) .",
    "the community sizes @xmath13 are assigned by drawing random numbers from another power law with exponent @xmath14 .",
    "naturally , the sum of the community sizes must equal the sum of the node memberships , i. e. @xmath15 .",
    "furthermore @xmath16 and @xmath17 , where @xmath8 is the number of nodes and @xmath18 the number of communities .",
    "at this point , we have to decide which communities each node should be included into .",
    "this is equivalent to generating a bipartite network where the two classes are the @xmath18 communities and the @xmath8 nodes ; each community @xmath19 has @xmath20 links , whereas each node has as many links as its memberships @xmath5 ( fig .",
    "[ bipart ] ) .",
    "+ [ ht ]   schematic diagram of the bipartite graph used to assign nodes to their communities .",
    "each node has as many stubs as the number of communities it belongs to , whereas the number of stubs of each community matches the size of the community .",
    "the memberships are assigned by joining the stubs on the left with those on the right.,title=\"fig : \" ] + the network can be easily generated with the configuration model  @xcite . to build the graph",
    ", it is important to take into account the constraint @xmath21 where the sum is relative to the communities including node @xmath6 .",
    "this condition means that each node can not have an internal degree larger than the highest possible number of nodes it can be connected to within the communities it stays in .",
    "we perform a rewiring process for the bipartite network until the constraint is satisfied . for some choices of the input parameters",
    ", it could happen that , after some iterations , the constraint is still unsatisfied . in this case one can change the sizes of the communities , by merging some of them , for instance .",
    "it turns out that this is not necessary in most situations and that , when it is , the perturbations introduced in the community size distributions are not too large . in general , it is convenient to start with a distribution of community sizes such that @xmath22 and @xmath23 .",
    "+ so far we assigned an internal degree to each node but it has not been specified how many links should be distributed among the communities of the node .",
    "again , one can follow several recipes ; we chose the simple equipartition @xmath24 , where @xmath25 is the number of links which @xmath6 shares in community @xmath19 , provided that @xmath6 holds membership in @xmath19 .",
    "some adjustments may be necessary to assure @xmath26 which is the strong version of eq .",
    "[ constraint_weak ] .",
    "3 .   before generating the whole network , we start generating @xmath18 subgraphs , one for each community . in fact",
    ", our definition of community @xmath19 is nothing but a random subgraph of @xmath27 nodes with degree sequence @xmath28 , which can be built via the configuration model , with a rewiring procedure to avoid multiple links .",
    "note that eq .",
    "[ constraint_strong ] is necessary to generate the configuration model , but in general not sufficient .",
    "for one thing , we need @xmath29 to be even .",
    "this might cause a change in the degree sequence , which is generally not appreciable .",
    "once each subgraph is built , we obtain a graph divided in components .",
    "note that because of the overlapping nodes , some components may be connected to each other , and in principle the whole graph might be connected .",
    "furthermore , if two nodes belong simultaneously to the same two ( or more ) communities , the procedure may set more than one link between the nodes . a rewiring strategy similar to that described below suffices to avoid this problem .",
    "the last step of the algorithm consists in adding the links external to the communities . to do this ,",
    "let us consider the degree sequence @xmath30 , where simply @xmath31 .",
    "we want to insert randomly these links in our already built network without changing the internal degree sequences . in order to do so",
    ", we build a new network @xmath32 of @xmath8 nodes with degree sequence @xmath30 , and we perform a rewiring process each time we encounter a link between two nodes which have at least one membership in common ( fig .  [ rewire ] ) , since we are supposed to join only nodes of different communities at this stage .",
    "+ [ ht ]   scheme of the rewiring procedure necessary to build the graph @xmath32 , which includes only links between nodes of different communities .",
    "( top ) if two nodes ( @xmath33 and @xmath34 ) with a common membership are neighbors , their link is rewired along with another link joining two other nodes @xmath35 and @xmath36 , where @xmath35 does not have memberships in common with @xmath33 , and @xmath36 is a neighbor of @xmath35 not connected to @xmath34 . in the final configuration ( bottom ) , the degrees of all nodes are preserved , and the number of links between nodes with common memberships has decreased by one ( since @xmath33 and @xmath34 are no longer connected ) , or it has stayed the same ( if @xmath34 and @xmath36 , which are now neighbors , have common memberships).,title=\"fig : \" ]   scheme of the rewiring procedure necessary to build the graph @xmath32 , which includes only links between nodes of different communities . ( top )",
    "if two nodes ( @xmath33 and @xmath34 ) with a common membership are neighbors , their link is rewired along with another link joining two other nodes @xmath35 and @xmath36 , where @xmath35 does not have memberships in common with @xmath33 , and @xmath36 is a neighbor of @xmath35 not connected to @xmath34 . in the final configuration ( bottom ) , the degrees of all nodes are preserved , and the number of links between nodes with common memberships has decreased by one ( since @xmath33 and @xmath34 are no longer connected ) , or it has stayed the same ( if @xmath34 and @xmath36 , which are now neighbors , have common memberships).,title=\"fig : \" ] + let us assume that @xmath33 and @xmath34 are in the same community and that they are linked in @xmath32 ; we pick a node @xmath35 which does not share any membership with @xmath33 , and we look for a neighbor of @xmath35 ( call it @xmath36 ) which is not neighbor of @xmath34 .",
    "next , we replace the links @xmath37 and @xmath38 with the new links @xmath39 and @xmath40 .",
    "this rewiring procedure can decrease the number of internal links of @xmath32 or leaving it unchanged ( this happens only when @xmath34 and @xmath36 have one membership in common ) but it can not increase it .",
    "this means that after a few sweeps over all the nodes we reach a steady state where the number of internal links is very close to zero ( if no node has @xmath41 , the internal links of @xmath32 are just a few and one sweep is sufficient ) .",
    "[ fig_internal_degree_g_ext ] shows how the number of internal links decreases during the rewiring procedure .",
    "finally , we have to superimpose @xmath32 on the previous one .    in our previous work about benchmarking  @xcite , we discussed the dispersion of the internal degree around the fixed value @xmath42 . in this case ,",
    "if the number of internal links of @xmath32 goes to zero , the only reason not to have a perfectly sharp function for the distribution of the mixing parameters of the nodes in specific realizations of the new benchmark is a round - off problem , i.e. the problem of rounding integer numbers .",
    "[ ht ]    other benchmarks , like that by girvan and newman , are based on a similar definition of communities , expressed in terms of different probabilities for internal and external links .",
    "one may wonder what is the connection between our benchmark and the others .",
    "it is not difficult to compute an approximation of how the probability of having a link between two nodes in the same community depends on the mixing parameter @xmath11 .",
    "in the configuration model , the probability to have a connection between nodes @xmath6 and @xmath43 with @xmath44 and @xmath45 links respectively is approximately @xmath46 , provided that @xmath47 and @xmath48 .",
    "if the approximation holds , our prescription to assign @xmath25 allows us to compute the probability that @xmath6 and @xmath43 get a link in the community @xmath19 : @xmath49 where @xmath50 is the number of internal links in the community ( we recall that @xmath5 is the number of memberships of node @xmath6 ) .",
    "if @xmath6 and @xmath43 share a number @xmath51 of memberships and all the respective @xmath52 are small , the probability that they get a link somewhere can be approximated with the sum over all the common communities .",
    "the final result is @xmath53 where @xmath54 , and @xmath19 runs only over the common memberships of the nodes .    on the other hand ,",
    "if @xmath6 and @xmath43 do not share any membership , the probability to have a link between them is : @xmath55 where @xmath56 is the number of external links in the network .",
    "the equation holds only if the rewiring process does not affect too much the probabilities , i.e. if the communities are small compared to the size of the network .",
    "these results are based on some assumptions which are likely to be not exactly , but only approximately valid . anyway , carrying out the right calculation is far from trivial and surely beyond the scope of this paper .",
    "we conclude this section with a remark about the complexity of the algorithm .",
    "the configuration model takes a time growing linearly with the number of links @xmath57 of the network .",
    "if the rewiring procedure takes only a few iterations , like it happens in most instances , the complexity of the algorithm is @xmath58 ( fig .",
    "[ comp ] ) .    [ ht ]      in order to build a weighted network , we first generate an unweighted network with a given topological mixing parameter @xmath11 and then we assign a positive real number to each link .    to do this we need to specify two other parameters , @xmath59 and @xmath60 .",
    "the parameter @xmath59 is used to assign a strength @xmath61 to each node , @xmath62 ; such power law relation between the strength and the degree of a node is frequently observed in real weighted networks  @xcite .",
    "the parameter @xmath60 is used to assign the internal strength @xmath63 , which is defined as the sum of the weights of the links between node @xmath6 and all its neighbors having at least one membership in common with @xmath6 .",
    "the problem is equivalent to finding an assignment of @xmath57 positive numbers @xmath64 such to minimize the following function : @xmath65 here @xmath61 and @xmath66 indicate the strengths which we would like to assign , i.e. @xmath62 , @xmath63 , @xmath67 ; @xmath68 are the total , internal and external strengths of node @xmath6 defined through its link weights , i.e. @xmath69 , @xmath70 , @xmath71 , where the function @xmath72 if nodes @xmath6 and @xmath43 share at least one membership , and @xmath73 otherwise .",
    "we have to arrange things so that @xmath61 and @xmath66 are consistent with the @xmath68 .",
    "for that we need a fast algorithm to minimize @xmath74 .",
    "we found that the greedy algorithm described below can do this job well enough for the cases of our interest .    1 .   at the beginning @xmath75 , @xmath76",
    ", so all the @xmath68 are zero",
    "we take node @xmath6 and increase the weight of each of its links by an amount @xmath77 , where @xmath78 indicates the sum of the links weights resulting from the previous step , i. e. before we increment them . in this way , since initially @xmath79 , the weights of the links of @xmath6 after the first step take the ( equal for all ) value @xmath80 , and @xmath81 by construction , condition that is maintained along the whole procedure .",
    "we update @xmath68 for the node @xmath6 and its neighbors .",
    "still for node @xmath6 we increase all the weights @xmath82 by an amount @xmath83 if @xmath72 and by an amount @xmath84 if @xmath85 .",
    "again we update @xmath68 for the node @xmath6 and its neighbors .",
    "these two steps assure to set the contribute of node @xmath6 in @xmath74 to zero .",
    "we repeat steps ( 2 ) and ( 3 ) for all the nodes .",
    "two remarks are in order .",
    "first , we want each weight @xmath86 ; so we update the weights only if this condition is fulfilled .",
    "second , the contribute of the neighbors of node @xmath6 in @xmath74 will change and , of course , it can increase or decrease .",
    "for this reason , we need to iterate the procedure several times until a steady state is reached , or until we reach a certain value . with our procedure the value of @xmath74 decreases at least exponentially with the number of iterations , consisting in sweeps over all network links .",
    "[ figvar ] ) .    for the distribution of the weights @xmath82",
    ", we expect the averages @xmath87 and @xmath88",
    ". note that these expressions can be related to the mixing parameters in a simple way ( fig .  [ avwei ] ) :    @xmath89    [ !",
    "h ]    since @xmath74 decreases exponentially , the number of iterations needed to reach convergence has a slow dependence on the size of the network so it does not contribute much to the total complexity , which remains @xmath58 ( fig .  [ comp2 ] ) .",
    "[ ht ]    [ !",
    "h ]      it is quite straightforward to generalize the previous algorithms to generate directed networks .",
    "now , we have an indegree sequence @xmath90 and an outdegree sequence @xmath91 but we can still go through all the steps of the construction of the benchmark for undirected networks with just some slight modifications . in the following , we list what to change in each point of the corresponding list in section  [ sec21 ] .    1",
    ".   we decided to sample the indegree sequence from a power law and the outdegree sequence from a @xmath92-distribution ( with the obvious constraint @xmath93 ) .",
    "we need to define the internal in- and outdegrees @xmath94 and @xmath95 with respect to every community @xmath19 , which can be done by introducing two mixing parameters . for simplicity one can set them equal .",
    "it is necessary that eq .",
    "[ constraint_strong ] holds for both @xmath90 and @xmath91 .",
    "3 .   we need to use the configuration model for directed networks , and the condition that @xmath29 should be even is replaced by @xmath96 ; because of this condition it might be necessary to change @xmath94 and/or @xmath95 .",
    "we decided to modify only @xmath95 , whenever necessary .",
    "the rewiring procedure can be done by preserving both distributions of indegree and outdegree , for instance , by adopting the following scheme : before rewiring , @xmath33 points to @xmath34 and @xmath36 to @xmath35 ; after rewiring , @xmath33 points to @xmath35 and @xmath36 to @xmath34 .    in order to generate directed and weighted networks , we use the following relation between the strength @xmath61 of a node and its in- and outdegree : @xmath97 . given a node @xmath6 , one considers all its neighbors , regardless of the link directions ( note that @xmath6 may have the same neighbor counted twice if the link runs in both directions ) .",
    "otherwise , the procedure to insert weights is equivalent .    in directed networks",
    ", the directedness of the links may reflect some interesting structural information that is not present in the corresponding undirected version of the graph .",
    "for instance there could be flows , represented by many links with the same direction running from one subgraph to another : such subgraphs might correspond to important classifications of the nodes .",
    "our directed benchmark is based on the balance between the numbers of internal and external links , and it does not seem suitable to generate graphs with flows .",
    "however , this is not true : flows can be generated by introducing proper constraints on the number of incoming and outgoing links of the communities .",
    "suppose we want to generate a network with two communities only , where the nodes of community @xmath98 point to nodes of community @xmath99 but not vice versa and there are a few random connections among nodes in the same community .",
    "we could use our algorithm in this way : first we build separately the two subgraphs ; then we set @xmath100 for nodes in the community @xmath98 and @xmath101 for nodes in community @xmath99 and build @xmath102 .",
    "if there are more communities , one first builds as many subgraphs as necessary and then links them according to the desired flow patterns .",
    "methods based on mixture models  @xcite may detect this kind of structures .",
    "methods based on a balance between internal and external links , like ( directed ) modularity optimization may have problems",
    ". for example ( fig .  [ direx ] ) , consider a network with three communities @xmath33 , @xmath34 , @xmath35 , with @xmath103 nodes in each community , each node with @xmath104 in - links and @xmath104 out - links on average ; nodes in @xmath33 point to @xmath99 nodes in @xmath34 , nodes in @xmath34 point to @xmath99 nodes in @xmath35 , and nodes in @xmath35 point to @xmath99 nodes in @xmath33 ; each node points to @xmath98 node in its own community .",
    "the modularity of this partition is @xmath105 , therefore the optimization would give a different partition , as the maximum modularity for a graph is usually positive .",
    "[ ht ]   example of directed graph with a flow running in a cycle between three groups of nodes .",
    "the directedness of the links enables to distinguish the three groups , and there are methods able to detect them .",
    "standard community detection methods , instead , are likely to fail .",
    "for instance , the value of the directed modularity for the partitions in the three groups is zero , whereas the maximum modularity for the graph is positive and corresponds to a different partition.,title=\"fig : \" ]",
    "here we present some tests of community detection methods on our benchmark graphs .     graph realizations . ]",
    "we focused on two techniques : modularity optimization , because it is one of very few methods that can be extended to the cases of directed and weighted graphs  @xcite ; the clique percolation method ( cpm ) by palla et al .",
    "@xcite , a popular method to find community structure with overlapping communities .",
    "the optimization of modularity was carried out by using simulated annealing  @xcite .",
    "[ ht ]    to measure the similarity between the built - in modular structure of the benchmark and the one delivered by the algorithm we adopt the _ normalized mutual information _",
    ", a measure borrowed from information theory  @xcite .",
    "we stress that other choices for the similarity measure are possible ( for a survey , see  @xcite ) and that we use the normalized mutual information for two main reasons : 1 ) it is regularly used in papers about community detection , so one has a clear idea of the performance of the algorithms by looking at the results , compared to similar plots ; 2 ) it has been recently extended to the case of overlapping communities  @xcite , whereas most other measures have no such extension .",
    "[ figdirected ] shows the result for the directed ( unweighted ) benchmark graphs , without overlapping communities .",
    "the plot shows a very similar pattern as that observed in the undirected case  @xcite .    for the weighted benchmark ( still without overlapping communities ) we can tune two parameters , @xmath11 and @xmath60 .",
    "[ figwei1 ] refers to networks where we set @xmath106 , while in fig .",
    "[ figwei2 ] we set @xmath107 . since , for @xmath108 , @xmath11 is smaller for the networks of fig .",
    "[ figwei1 ] than for those in fig .",
    "[ figwei2 ] , we would expect to see better performances of modularity optimization in fig .",
    "[ figwei1 ] in the range @xmath109 .",
    "instead , we get the opposite result .",
    "the reason is that the links between communities carry on average more weight when @xmath110 than when @xmath106 , and this enhances the chance that mergers between small communities occur , leading to higher values of modularity  @xcite .",
    "because of such mergers , the partition found by the method can be quite different from the planted partition of the benchmark .",
    "all other parameters are the same as in fig .",
    "[ figwei1 ] .",
    "each point corresponds to an average over @xmath111 graph realizations.,title=\"fig : \" ]    [ ht ]   nodes , the other parameters are @xmath112 , @xmath113 , @xmath114 and @xmath115.,title=\"fig : \" ]    [ ht ]   nodes , the other parameters are the same used for the graphs of fig .",
    "[ figov1].,title=\"fig : \" ]    in figs .",
    "[ figov1 ] and [ figov2 ] we show the results of tests performed with the cpm on our benchmarks with overlapping communities . in this case , the mixing parameter @xmath11 is fixed and one varies the fraction of overlapping nodes between communities .",
    "we have run the cpm for different types of @xmath116-cliques ( @xmath116 indicates the number of nodes of the clique ) , with @xmath117 .",
    "in general we notice that triangles ( @xmath118 ) yield the worst performance , whereas @xmath119- and @xmath120-cliques give better results . in the two top diagrams community sizes range between @xmath121 and @xmath122 , whereas in the bottom diagrams the range goes from @xmath123 and @xmath124 . by comparing the diagrams in the top with those in the bottom we see that the algorithm performs better when communities are ( on average ) smaller .",
    "the networks used to produce fig .  [ figov1 ] consist of @xmath125 nodes , whereas those of fig .",
    "[ figov2 ] consist of @xmath126 nodes . from the comparison of fig .",
    "[ figov1 ] with fig .",
    "[ figov2 ] we see that the algorithm performs better on networks of larger size .",
    "in this paper we have introduced new benchmark graphs to test community detection methods on directed and weighted networks .",
    "the new graphs are suitable extensions of the benchmark we have recently introduced in ref .",
    "@xcite , in that they account for the fat - tailed distributions of node degree and community size that are observed in real networks .",
    "furthermore we have equipped all our new benchmark graphs with the option of having overlapping communities , an important feature of community structure in real networks . with this work we have provided researchers working on the problem of detecting communities in graphs with a complete set of tools to make stringent objective tests of their algorithms , something which is sorely needed in this field .",
    "we have developed and carefully tested a software package for the generation of each class of benchmark graphs , all of which can be freely downloaded  @xcite .",
    "l. danon , j. duch , a. arenas and a. daz - guilera , in _ large scale structure and dynamics of complex networks : from information technology to finance and natural science _ , eds . g. caldarelli and a. vespignani ( world scientific , singapore , 2007 ) , pp 93114 .",
    "we stress that , since the exponent @xmath9 can be arbitrarily chosen , in the limit of large @xmath9 one converges to a @xmath92-function , so all nodes have the same degree .",
    "the same holds for the distribution of community sizes , which is characterized as well by a tunable power - law exponent @xmath14 .",
    "therefore , our benchmark is a true generalization of the benchmark by girvan and newman , which is recovered in the limit where the exponents are infinitely large ."
  ],
  "abstract_text": [
    "<S> many complex networks display a mesoscopic structure with groups of nodes sharing many links with the other nodes in their group and comparatively few with nodes of different groups . </S>",
    "<S> this feature is known as community structure and encodes precious information about the organization and the function of the nodes . </S>",
    "<S> many algorithms have been proposed but it is not yet clear how they should be tested . </S>",
    "<S> recently we have proposed a general class of undirected and unweighted benchmark graphs , with heterogenous distributions of node degree and community size . </S>",
    "<S> an increasing attention has been recently devoted to develop algorithms able to consider the direction and the weight of the links , which require suitable benchmark graphs for testing . in this paper </S>",
    "<S> we extend the basic ideas behind our previous benchmark to generate directed and weighted networks with built - in community structure . </S>",
    "<S> we also consider the possibility that nodes belong to more communities , a feature occurring in real systems , like social networks . as a practical application </S>",
    "<S> , we show how modularity optimization performs on our new benchmark . </S>"
  ]
}