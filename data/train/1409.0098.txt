{
  "article_text": [
    "facility location problems are widely investigated in the fields of operations research and theoretical computer science .",
    "the @xmath2-center problem is a classic one in this line of investigation . given a graph @xmath3 with positive edge lengths , a supply set @xmath4 , and a demand set @xmath5 , the @xmath2-center problem asks for @xmath2 elements @xmath6 from @xmath4 such that @xmath7 is minimized , where @xmath8 denotes the distance from @xmath9 to @xmath10 in @xmath3 .",
    "conventionally , @xmath11 , where @xmath12 and @xmath13 are the set of vertices and _ points _ of @xmath3 , respectively . a point of a graph is a location on an edge of the graph , and is identified with the edge it locates on and the distance to an end vertex of the edge .",
    "the @xmath2-center problem in general graphs , for arbitrary @xmath2 , is np - hard  @xcite , and the best possible approximation ratio is 2 , unless np = p  @xcite .",
    "when @xmath2 is fixed or the network topology is specific , many efficient algorithms were proposed  @xcite .",
    "there are many generalized formulations of the center problem , like the capacitated center problem  @xcite and the minmax regret center problem  @xcite .",
    "the backup center problem is formulated based on the _ reliability model _",
    "@xcite , in which the deployed facilities may sometimes fail , and the demands served by these facilities have to be reassigned to functioning facilities . more precisely , in the backup @xmath2-center problem , facilities may fail with _ failure probabilities _ @xmath14 .",
    "given that the facilities do not fail simultaneously , the goal is to find @xmath2 locations that minimize the expected value of the maximum distance over all vertices to their closest functioning facility .",
    "we leave the formal problem definition to section  [ section : pre ] .",
    "the backup @xmath2-center problem is np - hard since it is a generalized formulation of the @xmath2-center problem . for @xmath15 , wang et al .",
    "@xcite proposed a linear time algorithm for the problem on trees . when the edges are of identical length , hong and kang  @xcite proposed a linear time algorithm on interval graphs .",
    "recently , bhattacharya et al .  @xcite consider a weighted formulation of the backup 2-center problem , in which each vertex is associated with a nonnegative weight , and the distance from vertex @xmath0 to @xmath1 is weighted by the weight of @xmath0 .",
    "they proposed @xmath16- , @xmath17- , @xmath18- , and @xmath19-time algorithms on paths , trees , cycles , and unicycles , respectively , where @xmath20 is the number of vertices .    in this paper , we focus on the weighted backup 2-center problem on a tree and design a linear time algorithm to solve this problem .",
    "the algorithm is asymptotically optimal , and therefore improves the current best result on trees , given by bhattacharya et al .",
    "the strategy of our algorithm is _ prune - and - search _ , which is widely applied in solving distance - related problems  @xcite .",
    "the rest of this paper is organized as follows . in section  [ section :",
    "pre ] , we formally define the problem and briefly review the result given by bhattacharya et al .",
    "@xcite . based on their observations , a further elaboration on the objective function is given . in section  [ section :",
    "linear ] , we design the linear time algorithm , and concluding remarks are given in section  [ section : conclusion ] .",
    "let @xmath21 be a tree , on which each vertex @xmath1 is associated with a nonnegative weight @xmath22 , and each edge is associated with a nonnegative length .",
    "a location on an edge is identified as a _ point _ , and the set of points of @xmath23",
    "is denoted by @xmath13 .",
    "the unique path between two points @xmath0 and @xmath1 is denoted by @xmath24 , and the _ distance _ @xmath25 between two points @xmath0 and @xmath1 is defined to be the sum of lengths of the edges on @xmath24 .",
    "the _ weighted distance _ from vertex @xmath0 to point @xmath26 is defined as @xmath27 .",
    "eccentricity _ of a point @xmath26 is defined as @xmath28 and the point with minimum eccentricity is said to be the _ weighted center _ of @xmath23 .",
    "note that the weighted center of a tree is unique . for @xmath29 , the eccentricity of a vertex @xmath26 w.r.t .",
    "@xmath30 is defined as @xmath31 let @xmath32 and @xmath33 be two points of @xmath23 .",
    "the partition @xmath34 of @xmath12 is defined as @xmath35 , where @xmath36 and @xmath37 .",
    "a _ weighted 2-center _ consists of two points @xmath38 and @xmath39 minimizing @xmath40 where @xmath41 .",
    "we denote a weighted 2-center by @xmath42 . unlike the weighted center of a tree",
    ", there may be more than one weighted 2-center .",
    "now we are ready to define the weighted backup 2-center problem .    given a tree @xmath21 and two real numbers @xmath43 and @xmath44 in @xmath45 , the weighted backup 2-center problem asks for a point pair @xmath46 minimizing @xmath47 , where @xmath48 and @xmath41 .    to ease the presentation",
    ", we assume that @xmath49 . with the assumption , minimizing @xmath50",
    "is equivalent to minimizing @xmath51 , where @xmath52 we note here that all the proofs in this paper can immediately be extended to the case where failure probabilities are different .",
    "moreover , @xmath53 and @xmath54 are not restricted to be deployed on different points .",
    "if @xmath53 and @xmath54 are identical , the point must be the weighted center , as shown in proposition  [ proposition : b2center_identical ] .",
    "[ proposition : b2center_identical ] let @xmath46 be a weighted backup 2-center of tree @xmath23 . if @xmath53 and @xmath54 are identical , then it is the weighted center of @xmath23 .",
    "let @xmath55 be the weighted center of @xmath23 .",
    "suppose to the contrary that @xmath56 , but @xmath57 .",
    "since @xmath56 , we have @xmath58 , and therefore @xmath59 which contradicts that @xmath46 is a weighted backup 2-center .    when computing a weighted backup 2-center , any vertex with weight zero can be treated as a point on an edge , and any edge @xmath60 with length zero can be contracted to be a vertex with weight @xmath61 . with this manipulation , an instance with `` nonnegative constraints '' on vertex weights and edge lengths can be reduced to one with `` positive constraints '' , and there is a straightforward correspondence between the solutions .",
    "therefore , in the discussion below , we may focus on the instances with positive vertex weights and edge lengths .      .",
    "the number beside each vertex and each edge is the weight of the vertex and the length of the edge , respectively .",
    "edges with no number aside are of length one.,width=2 ]    throughout the rest of this paper , we use the tree given in figure  [ figure : tree ] as an illustrative example .",
    "in addition , weighted centers and weighted 2-centers are referred to as centers and 2-centers , respectively , for succinctness .",
    "the algorithm of bhattacharya et al . depends on the following observations .",
    "[ lemma : solution_location ] let @xmath42 be any 2-center . there is a weighted backup 2-center @xmath46 such that @xmath53 ( resp .",
    "@xmath54 ) lies on a path between @xmath38 ( resp .",
    "@xmath39 ) and @xmath55 .",
    "[ lemma : left_equal_right ] if @xmath62 , then @xmath63 holds for a weighted backup 2-center @xmath46 on a tree , where @xmath64 .    by lemma  [ lemma : solution_location ] , we may focus the nontrivial case where @xmath65 .",
    "the path @xmath66 is embedded onto the @xmath9-axis with each point @xmath26 on @xmath66 corresponding to point @xmath67 on the @xmath9-axis . for simplicity",
    ", we use @xmath66 to denote both the set of points on this path and the corresponding set of points on the @xmath9-axis . for each vertex @xmath1 , the _ cost function _",
    "@xmath68 is defined as @xmath69    clearly , @xmath70 is a v - shape function .",
    "assume that the minimum of @xmath70 occurs at  @xmath71 .",
    "let @xmath72 and @xmath73 be defined as @xmath74 and let the upper envelopes of @xmath75 and @xmath76 be denoted by @xmath77 and @xmath78 , respectively .",
    "an example is given in figure  [ figure : envelopes_and_quasiconvex](a ) .     and",
    "@xmath78 of the tree @xmath23 given in figure  [ figure : tree ] .",
    "dotted curves are functions @xmath70 , and solid curves are @xmath77 and @xmath78 .",
    "( b ) function @xmath79 with different failure probabilities @xmath80 . the failure probability @xmath80 ranges from @xmath81 to @xmath82.,width=4 ]    in the algorithm of bhattacharya et al . , they focus on processing the information within the path from @xmath38 to @xmath39 , where @xmath42 is a 2-center satisfying the following property .    [",
    "property : center_2center ] for the center @xmath55 , we have @xmath83 . in addition , there is a 2-center @xmath42 satisfying @xmath84 and @xmath85 , where @xmath86 .",
    "property  [ property : center_2center ] holds due to the continuity of the solution space , i.e. , the set of points of @xmath23 .",
    "moreover , it can be derived from property  [ property : center_2center ] that for any point pair @xmath87 with @xmath88 , @xmath89 , and @xmath90 , the partition @xmath91 satisfies @xmath92 since @xmath42 is a 2-center . as a result ,",
    "bhattacharya et al . gave an algorithm to compute a weighted backup 2-center on a tree @xmath23 .",
    "we summarize it as in @xmath93 .",
    "@xmath94 center of @xmath23 @xmath95 2-center of @xmath23 compute @xmath77 and @xmath78 each bending point @xmath96 @xmath97 , where @xmath98 evaluate @xmath99 , and keep the minimum @xmath87    this algorithm runs in @xmath17 time , where @xmath20 is the number of vertices .",
    "the bottleneck is the computation of @xmath77 and @xmath78 .",
    "once @xmath77 and @xmath78 are computed , the remainder can be done in @xmath16 time since there are @xmath16 _ bending points _ , at which the function @xmath100 is not differentiable w.r.t .",
    "@xmath9 . while processing @xmath96 from left to right , the corresponding @xmath101 moves monotonically to the left , and therefore a one - pass scan is sufficient to find the optimal solution .",
    "readers can refer to  @xcite for details . to improve the time complexity , we elaborate on some properties of the objective function below .",
    "as in  @xcite , the discussion below focuses on the behavior of the objective function on @xmath66 .",
    "we observe that the objective function possesses a good property ( the quasiconvexity , given in lemma  [ lemma : quasiconvex ] ) when @xmath38 and @xmath39 satisfy certain restrictions .",
    "the existence of such a 2-center is proved in proposition  [ proposition : two_center_equal ] .",
    "[ proposition : two_center_equal ] for any tree @xmath21 , there is a 2-center @xmath42 satisfying @xmath102 , where @xmath86 .",
    "let @xmath103 be a 2-center , and we embed @xmath104 onto the @xmath9-axis as in section  [ section : review ] .",
    "without loss of generality assume that @xmath105 , where @xmath106 , and it follows that @xmath107 due to the continuity of @xmath108 .",
    "we claim that one can have the requested 2-center by moving @xmath109 , towards @xmath110 along @xmath108 , to a point @xmath26 such that @xmath111 .",
    "let @xmath112 .",
    "clearly , @xmath113 and @xmath114 , and @xmath115 .",
    "suppose to the contrary that @xmath116 is not the requested 2-center .",
    "it follows that either ( i ) @xmath116 is not a 2-center , or ( ii ) @xmath117 . for ( i )",
    ", there is a vertex @xmath0 in @xmath118 satisfying @xmath119 a contradiction . for ( ii )",
    ", it can be derived that @xmath120 , which contradicts the definition of @xmath26 .",
    "any 2-center @xmath42 with @xmath102 satisfies @xmath121 .",
    "once a 2-center is computed , @xmath42 can then be computed in linear time , based on the arguments in the proof of proposition  [ proposition : two_center_equal ] .    in the rest of this paper , we assume that @xmath42 is a 2-center satisfying @xmath102 , where @xmath86 .",
    "next , we elaborate on @xmath77 and @xmath78 . as noted in  @xcite , both @xmath77 and @xmath78 are piecewise linear . on a path ,",
    "both @xmath77 and @xmath78 are obviously continuous and convex .",
    "it also holds on @xmath66 in a tree , as shown in lemma  [ lemma : continuity ] .",
    "is not continuous .",
    "all vertices are of weight @xmath122 except the bottom one , whose weight is @xmath123 .",
    "numbers beside edges are the edge lengths . clearly , @xmath77 is not continuous at @xmath26.,width=1 ]    [ lemma : continuity ] let @xmath42 be a 2-center of a tree satisfying @xmath121 , where @xmath86 .",
    "the function @xmath77 and @xmath78 are continuous and convex on @xmath66 .    because of symmetry , we prove the lemma only for @xmath77 , and we claim that @xmath77 is continuous .",
    "the convexity then follows since @xmath77 is the upper envelope of half lines of positive slope .",
    "suppose to the contrary that @xmath77 is not continuous .",
    "there is a point @xmath26 , with @xmath124 , satisfying @xmath125 let @xmath126 .",
    "clearly , at point @xmath26 we have @xmath127 it follows that @xmath128 since otherwise @xmath129",
    ". however , for @xmath130 , we have @xmath131 which leads to a contradiction .",
    "notice that lemma  [ lemma : continuity ] does not hold for all 2-centers .",
    "an example is given in figure  [ figure : discontinuity ] .",
    "by lemma  [ lemma : left_equal_right ] , an optimal solution occurs at the point pair @xmath132 satisfying @xmath133 , @xmath134 , and @xmath135 .",
    "thus , we may focus on the single variable function @xmath136 , defined as @xmath137 to design an efficient algorithm , we expect some good properties on @xmath79 .",
    "unlike the eccentricity function @xmath138 , function @xmath79 is not convex on @xmath139 ( see figure  [ figure : envelopes_and_quasiconvex](b ) ) .",
    "fortunately , it is quasiconvex .",
    "moreover , for any interval @xmath140 $ ] with @xmath141 , if there is no more than one point at which @xmath79 attains the minimum , then @xmath79 is strictly quasiconvex on @xmath140 $ ] ( see lemma  [ lemma : quasiconvex ] ) .",
    "[ lemma : quasiconvex ] for @xmath142 , the following statements hold .",
    "* @xmath143 implies @xmath144 ; * @xmath145 implies @xmath146 .",
    "we prove only the statement that @xmath143 implies @xmath144 .",
    "the other statement can be proved in a similar way . with the assumption that @xmath143 , we have @xmath147 and therefore @xmath148 thus , @xmath144 .",
    "we note here that lemma  [ lemma : quasiconvex ] holds for function @xmath149 in a symmetric manner , where @xmath150 this property will be used in designing our algorithm , and its proof is similar to that of lemma  [ lemma : quasiconvex ] .",
    "the bottleneck on the time complexity of the algorithm of bhattacharya et al . is the computation of @xmath77 and @xmath78 .",
    "fortunately , due to the strict quasiconvexity of @xmath79 and the piecewise linearity of @xmath77 and @xmath78 , one can apply the strategy of prune - and - search  @xcite to obtain an optimal solution in linear time .",
    "the quasiconvexity of a function @xmath151 implies that a local minimum of @xmath151 is the global minimum of @xmath151 , and the idea of the prune - and - search algorithm is to search the local minimum over an interval @xmath152 $ ] , which is guaranteed to contain the solution . in the search procedure , @xmath152 $ ] is recursively reduced to a subinterval , and once it is reduced , the size of the instance can also be pruned with a fixed proportion . in more detail",
    ", the following steps are executed in each recursive call :    1 .",
    "[ step : choose_point ] choose a point @xmath153 in @xmath152 $ ] appropriately .",
    "initially , @xmath152=[c_1 , c]$ ] .",
    "[ step : search_direction ] determine whether @xmath154 , @xmath155 , or @xmath156 .",
    "[ step : discard ] depending on the result of step  [ step : search_direction ] , update @xmath152 $ ] , and discard a subset of vertices without affecting the local optimality of @xmath53 over the updated interval .    during the execution",
    ", we claim that the following invariant is maintained . recall that for any point @xmath26 in @xmath139 , @xmath157 is a point in @xmath158 such that @xmath135 .    in each recursive call ,",
    "the @xmath159-tuple @xmath160 satisfies    * @xmath161 $ ] ; * for each @xmath162 $ ] , @xmath163 , @xmath164 , @xmath165 , and @xmath166 .",
    "the invariant was maintained by the procedure @xmath167 , as shown later in section  [ subsection : analysis ] .",
    "we note here that to guarantee the efficiency , the steps above have to be repeated in a symmetric manner ( @xmath168 )",
    ". the reason will be clear after the elaboration below . to ease the presentation",
    ", we assume that the failure probability @xmath80 can be accessed globally by each procedure .",
    "the details of steps  [ step : choose_point ] and  [ step : discard ] are given in section  [ subsection : step1and3 ] , that of step  [ step : search_direction ] is given in section  [ subsection : step2 ] , and the analysis of the algorithm is given in section  [ subsection : analysis ] .      .",
    "in the execution , every two vertices in @xmath169 , from left to right , is paired in the partition @xmath170 , @xmath171 , and @xmath153 is chosen as @xmath172 ( the mean of 3 and @xmath173 ) .",
    "( b ) the instance after the execution of @xmath174 .",
    "hollow circles denote the discarded elements from @xmath175 .",
    "notice that elements in @xmath176 and @xmath177 need not be sorted.,width=4 ]    the proportion of vertices discarded at step  [ step : discard ] depends essentially on how the point @xmath153 at step  [ step : choose_point ] is chosen . according to the piecewise linearity of @xmath77 and @xmath78 , the discarded proportion can be guaranteed based on the following simple property .",
    "[ property : prune_and_search ] consider two linear functions @xmath178 and @xmath179 with @xmath180 .",
    "we have @xmath181 if and only if @xmath182 .",
    "similar to the idea in  @xcite , for @xmath183 , we arbitrarily partition @xmath169 into @xmath184 pairs of vertices , and a single one if @xmath185 is odd , and let this partition be denoted by @xmath170",
    ". moreover , let @xmath186 and @xmath187 , where @xmath188 denotes the point at which @xmath189 and @xmath190 intersect .",
    "if @xmath191 , the median of @xmath192 , is chosen at step  [ step : choose_point ] , then after step  [ step : search_direction ] , @xmath193 vertices can be discarded without affecting the optimality of @xmath53 in either @xmath194 $ ] or @xmath195 $ ] .",
    "we implement the above mentioned steps by @xmath196 and @xmath197 , where @xmath196 pairs vertices in @xmath176 and @xmath177 , respectively , and choosing the median @xmath191 ; based on the result and the updated interval containing the solution , i.e. , @xmath152 $ ] , @xmath197 does the process of discarding vertices .",
    "an illustration is given in figure  [ figure : reduceinstance1 ] .",
    "@xmath198 @xmath199 @xmath200 the median of @xmath201 @xmath202    @xmath203 @xmath204 @xmath205 @xmath152 $ ] is updated , so either @xmath206 or @xmath207 each element @xmath9 in @xmath208 @xmath209 and @xmath210 @xmath211 @xmath212 each element @xmath9 in @xmath213 @xmath209 and @xmath214 @xmath215 @xmath216 each element @xmath9 in @xmath208 @xmath209 and @xmath217 @xmath218 @xmath212 each element @xmath9 in @xmath213 @xmath209 and @xmath219 @xmath220 @xmath216 @xmath221    we use @xmath222 to denote a sufficiently small value such that the following relation holds . for two",
    "linear function @xmath151 and @xmath223 , @xmath224 where @xmath225 and @xmath226 . as a result",
    ", no exact value has to be specified for @xmath222 in @xmath197 .",
    "this convention is also adopted in section  [ subsection : step2 ] .",
    "step  [ step : search_direction ] can be done via evaluating @xmath227 and @xmath228 . due to the quasiconvexity of @xmath79 ( lemma  [ lemma : quasiconvex ] ) , we have that    * if @xmath229 , then @xmath230 ; * if @xmath231 , then there exists @xmath232 .",
    "recall that @xmath233 , where @xmath234 . for a point @xmath26 on @xmath139 ,",
    "the evaluation of @xmath235 can be done via computing @xmath236 , @xmath237 , and @xmath238 .",
    "according to the claim of invariant , for @xmath239 $ ] , we have @xmath240 clearly , @xmath236 and @xmath237 can be computed in time linear to @xmath241 and @xmath242 , respectively .",
    "if @xmath157 is given , then @xmath238 can also be computed in @xmath243 time .",
    "it remains to show how @xmath157 is determined .    given a value @xmath244 , since @xmath245 , the point @xmath26 on @xmath158 satisfies @xmath246 if and only if @xmath247 therefore , for @xmath239 $ ] , determining @xmath157 can be done in @xmath248 time , and @xmath238 can then be computed in @xmath243 time .",
    "formally , the procedure of evaluating @xmath79 at point @xmath26 in @xmath152 $ ] is given as @xmath249 .",
    "@xmath250 @xmath251 @xmath252 @xmath253 @xmath254    the evaluation of @xmath255 at a given point @xmath26 can be done symmetrically , and the details are omitted .      with the procedures given in sections  [ subsection : step1and3 ] and  [ subsection :",
    "step2 ] , we may implement the idea given in the beginning of section  [ section : linear ] , which recursively reduces the size of the problem instance .",
    "the procedure is given as @xmath167 .",
    "@xmath256 [ line : choose_median ] @xmath257 @xmath258",
    "@xmath259 @xmath260 @xmath261 @xmath262 [ line : discard_critical_vertices ] @xmath263    an example is given in figure  [ figure : reduceinstance1 ] . since",
    "@xmath153 is chosen as the median of @xmath264 ( line  [ line : choose_median ] ) , it can be derived that a fixed proportion of vertices in @xmath175 are discarded after the execution of @xmath197 ( line  [ line : discard_critical_vertices ] ) . moreover , together with property  [ property : prune_and_search ] , it can be easily derived that for @xmath239 $ ] , @xmath235 remains unchanged .",
    "we summarize these properties in lemma  [ lemma : discarded_portion ] .",
    "[ lemma : discarded_portion ] after the execution of @xmath265 , at least @xmath266 vertices of @xmath175 are discarded , where @xmath267 and @xmath268 . moreover",
    ", the procedure maintains the invariant , the 6-tuple @xmath160 , in which    * @xmath161 $ ] ; * for @xmath239 $ ] , @xmath269 , @xmath270 , @xmath271 , @xmath272 .",
    "notice that after the execution of @xmath265 , only a proportion of @xmath175 is discarded . to ensure that a fixed proportion of the instance is pruned , in a symmetric manner",
    ", one can apply a similar procedure to discard a proportion of @xmath273 , as noted in the beginning of section  [ section : linear ] .",
    "we name the corresponding procedure as @xmath168 .",
    "@xmath168 is the same as @xmath167 except it evaluates @xmath255 instead of @xmath79 ( see lines  2 and  3 of @xmath167 ) .    with @xmath167 and @xmath168 ,",
    "one may recursively reduce the size of the instance until the instance is small enough . for small instance with both @xmath274 and @xmath275 ,",
    "we compute the solution by evaluating @xmath79 at all bending points in @xmath152 $ ] since @xmath79 is piecewise linear .",
    "we denote this procedure by @xmath276 .",
    "the integration is given as @xmath277 , and the procedure for computing a weighted backup 2-center is given as @xmath278 .",
    "the correctness and time complexity are analyzed in theorem  [ theorem : correctness_and_time ] .",
    "@xmath274 and @xmath279 @xmath280 @xmath281 [ line : reducebegin ] @xmath282 @xmath283 [ line : reduceend ]    @xmath94 center of @xmath23 @xmath284 2-center of @xmath23 with the property in proposition  [ proposition : two_center_equal ] @xmath285 @xmath12 is the vertex set of @xmath23    [ theorem : correctness_and_time ] the weighted backup 2-center problem on a tree can be solved in linear time by @xmath278 .",
    "let @xmath21 with @xmath286 .",
    "by lemma  [ lemma : solution_location ] , @xmath287 $ ] and @xmath288 $ ] , and thus @xmath289 , @xmath290 , @xmath291 , and @xmath292 are initialized accordingly as in @xmath278 . besides , by definition , we have @xmath293 and @xmath294 . with lemma  [ lemma : discarded_portion ] ,",
    "the initialization of @xmath295 and @xmath296 guarantees @xmath235 , for @xmath162 $ ] , is computed correctly .",
    "similar arguments hold for the initialization of @xmath297 and @xmath298 .    for the time complexity , both the center and the 2-center",
    "can be computed in @xmath16 time  @xcite . for @xmath277 ,",
    "let @xmath267 , @xmath268 , @xmath299 , and @xmath300 .",
    "lines  [ line : reducebegin][line : reduceend ] of @xmath277 are executed if either @xmath301 or @xmath302 .",
    "together with lemma  [ lemma : discarded_portion ] , it can be derived that @xmath303 where the equality holds when @xmath304 , @xmath305 , @xmath306 , and @xmath307 . as a result ,",
    "let the execution time of @xmath285 be @xmath308 , where @xmath309 .",
    "it follows from  ( [ eq : proportion ] ) that @xmath310 therefore , @xmath311 .",
    "in this paper , we propose a linear time algorithm to solve the weighted backup 2-center problem on a tree , which is asymptotically optimal . based on the observations given by bhattacharya et al .",
    "@xcite , `` good properties '' of the objective function are further derived . with these properties ,",
    "the strategy of prune - and - search can be applied to solve this problem . for future research , the hardness of the backup @xmath2-center problem on trees is still unknown , even for the unweighted case .",
    "it worth investigation on this direction .",
    "the author would also like to thank professor kun - mao chao , ming - wei shao , and jhih - heng huang for fruitful discussions .",
    "hung - lung wang was supported in part by most grant 103 - 2221-e-141 - 004 , from the ministry of science and technology , taiwan .",
    "ben - moshe , b. , bhattacharya , b. , shi , q. : an optimal algorithm for the continuous / discrete weighted 2-center problem in trees .",
    "7th latin american symposium on theoretical informatics ( lncs 3887 ) , valdivia , chile , pp .",
    "166177 ( 2006 ) .",
    "bhattacharya , b. , de , m. , kameda , t. , roy , s. , sokol , v. , song , z. : back - up 2-center on a path / tree / cycle / unicycle .",
    "20th international conference on computing and combinatorics ( lncs 8591 ) , atlanta , ga , usa , pp . 417428 ( 2014 ) ."
  ],
  "abstract_text": [
    "<S> in this paper , we are concerned with the weighted backup 2-center problem on a tree . </S>",
    "<S> the backup 2-center problem is a kind of center facility location problem , in which one is asked to deploy two facilities , with a given probability to fail , in a network . </S>",
    "<S> given that the two facilities do not fail simultaneously , the goal is to find two locations , possibly on edges , that minimize the expected value of the maximum distance over all vertices to their closest functioning facility . in the weighted setting , </S>",
    "<S> each vertex in the network is associated with a nonnegative weight , and the distance from vertex @xmath0 to @xmath1 is weighted by the weight of @xmath0 . with the strategy of prune - and - search , </S>",
    "<S> we propose a linear time algorithm , which is asymptotically optimal , to solve the weighted backup 2-center problem on a tree . </S>"
  ]
}