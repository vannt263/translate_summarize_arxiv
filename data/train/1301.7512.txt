{
  "article_text": [
    "we study the weighted @xmath4-center problem for a set of @xmath1 points on a real line .",
    "let @xmath5 , @xmath6 be a set of @xmath1 points on a real line @xmath7 .",
    "for each @xmath8 with @xmath9 , the point @xmath10 has a weight @xmath11 . for a point @xmath12 on @xmath7 , denote by @xmath13 the coordinate of @xmath12 on @xmath7 , which we also refer to as the @xmath7-coordinate of @xmath12 . for two points @xmath12 and @xmath14 on @xmath7 ,",
    "let @xmath15 be the _ distance _ between @xmath12 and @xmath14 .",
    "further , for a set @xmath16 of points and a point @xmath14 on @xmath7 , define @xmath17 . given @xmath18 and an integer @xmath19 , the weighted _ one - dimensional @xmath4-center _ problem seeks to determine a set @xmath16 of @xmath4 points on @xmath7 such that the value @xmath20 is minimized .",
    "we use  to denote this problem .",
    "also , the points in @xmath21 are called _ centers _ , and the points in @xmath18 are called _ demand points_. the _ unweighted version _ of  is the case where all points have the same weight .",
    "if @xmath22 is required , then the case is called the _ discrete version_.    although many variants of the  problem are np - hard @xcite , some special cases are solvable in polynomial time .",
    "megiddo and tamir @xcite presented an @xmath23 time algorithm for the unweighted  problem on a tree of @xmath1 nodes , and the running time can be reduced to @xmath24 by applying cole s parametric search @xcite .",
    "later , frederickson @xcite gave a linear time algorithm for the unweighted  problem on a tree .",
    "jeger and kariv @xcite gave an @xmath25 time algorithm for the weighted  problem on a tree .",
    "for the weighted  problem on a real line ( i.e. , the problem ) , bhattacharya and shi @xcite recently proposed an algorithm with a time bound linear in @xmath1 but exponential in @xmath4 .",
    "in addition , the discrete weighted  problem on a tree is solvable in @xmath24 time @xcite and the discrete unweighted  problem on a tree is solvable in @xmath3 time @xcite .",
    "tamir @xcite indicated that the discrete weighted  can be solved in @xmath0 time by using the procedure given in the last section of @xcite .",
    "below , unless otherwise stated ,  always refers to the weighted version .    in this paper",
    ", we solve the  problem in @xmath0 time , which is faster than the @xmath25 time result @xcite when they are applied to .",
    "our result is also better than the solution in @xcite for large @xmath4 since the running time in @xcite is exponential in @xmath4 .",
    "in fact , we can show that the problem has an @xmath2 time lower bound , and therefore , our @xmath0 time algorithm is optimal .",
    "further , if all points in @xmath18 are given sorted on @xmath7 and their weights are also sorted , we solve  in @xmath26 time , which is in favor of small @xmath4 . for example , if @xmath27 for any @xmath28 ( which is true in many applications ) , our algorithm runs in @xmath3 time .    in addition , our techniques also yield an efficient data structure for processing queries for finding a lowest point in the common intersection of a certain subset of half - planes , which we call the",
    "_ 2-d sublist lp queries_. since the 2-d sublist lp query is a basic geometric problem , our data structure may be interesting in its own right .",
    "we model the  problem as a problem of approximating a set of weighted points by a step function in the plane @xcite .",
    "two algorithms were given in @xcite for this point approximation problem with the time bounds of @xmath24 and @xmath29 , respectively .",
    "consequently , the  problem can be solved in @xmath30 time",
    ".    however , the  problem has some special properties that allow us to develop faster solutions .",
    "specifically , after the geometric transformations , a key component to solving the problem is the following _ 2-d sublist lp query _ problem : given a set of @xmath1 upper half - planes , @xmath31 , in the plane , for each query @xmath32 ( @xmath33 ) , compute a lowest point @xmath34 in the common intersection of all half - planes in @xmath35 .",
    "a data structure was proposed in @xcite for this problem , which can be built in @xmath0 time and answers each query in @xmath36 time . on the  problem",
    ", we observe that the input half - plane set @xmath37 has a special property that the intersections between the @xmath38-axis and the bounding lines of the half - planes are ordered from left to right according to the half - plane indices in @xmath37 .",
    "exploiting this special property and using the compact interval trees @xcite , we design a new data structure for this special case of the 2-d sublist lp queries , which can be built in @xmath0 time and can answer each query in @xmath39 time .",
    "this new data structure allows us to solve the  problem in @xmath0 time .",
    "since the 2-d sublist lp query problem is a very basic problem , our new data structure may find other applications as well .",
    "we should mention that very recently , by using cole s parametric search @xcite , fournier and vigneron @xcite gave an @xmath0 time algorithm for the above point approximation problem @xcite .",
    "thus , by combining our problem modeling and the algorithm in @xcite , the  problem can be solved in @xmath0 time . however , as pointed out in @xcite , the parametric search approach in @xcite is quite complicated and involves large constants , and thus the algorithm in @xcite is mainly of theoretical interest .",
    "in contrast , our approach is much simpler and more practical .    in the following , we present the high - level scheme of our algorithm in section [ sec : algorithms ] . in section [ sec : chreduction ]",
    ", we model our problem as the 2-d sublist lp queries and present our data structure .",
    "section [ sec : conclusion ] concludes the paper and discusses the lower bound of the problem .    for simplicity of discussion",
    ", we make a general position assumption that no two points in @xmath18 are at the same position on @xmath7 .",
    "we also assume the weight of each point in @xmath18 is positive and finite .",
    "these assumptions are only for ease of exposition and our algorithms can be easily extended to the general case .",
    "in this section , we discuss the high - level framework of our algorithm . as pointed out in @xcite , it is possible that there is more than one optimal solution for the  problem .",
    "our algorithm focuses on finding one optimal solution .",
    "for any two points @xmath12 and @xmath14 on @xmath7 with @xmath40 ( recall that @xmath13 is the coordinate of @xmath12 on l , and similarly for @xmath41 ) , denote by @xmath42 $ ] the ( closed ) interval of @xmath7 between @xmath12 and @xmath14 .",
    "we first sort all points of @xmath18 from left to right on @xmath7 . without loss of generality ( wlog ) ,",
    "let @xmath43 be the sorted order in increasing coordinates on @xmath7 .",
    "for any two points @xmath44 with @xmath45 , denote by @xmath46 the interval @xmath47 $ ] .",
    "let @xmath48 be the value of @xmath49 for an optimal solution of .",
    "suppose @xmath21 is the center set in an optimal solution ; for a demand point @xmath50 and a center @xmath51 , if @xmath52 , then we say that @xmath12 can be _ served _ by @xmath53 .",
    "it is easy to see that there is an optimal solution @xmath21 such that each center of @xmath21 is in @xmath54 $ ] .",
    "further , as discussed in @xcite , there is an optimal solution @xmath21 such that the points of @xmath18 are partitioned into @xmath4 intervals @xmath55 by integers @xmath56 , each interval @xmath57 contains exactly one center @xmath58 , and for each point @xmath59 , @xmath60 holds . in other words , each center of @xmath21 serves a subset of consecutive demand points in @xmath18 .",
    "for any two integers @xmath8 and @xmath61 with @xmath33 , denote by @xmath62 the subset of points of @xmath18 in the interval @xmath46 , i.e. , @xmath63 ( @xmath64 for @xmath65 ) .",
    "consider the following _ weighted 1-center _ problem : find a single center ( i.e. , a point ) @xmath53 in the interval @xmath66 $ ] such that the value of @xmath67 is minimized .",
    "let @xmath68 denote the minimum value of @xmath69 for this weighted 1-center problem .    for solving the  problem ,",
    "our strategy is to determine @xmath70 integers @xmath71 such that the value of @xmath72 is minimized and this minimized value is @xmath48 .",
    "note that in the above formulation , for each value @xmath68 , exact one center is determined in the interval @xmath46 . to solve this problem , we reduce it to a planar weighted point approximation problem @xcite in the next subsection .",
    "we first review the planar weighted point approximation problem and then show our problem reduction .",
    "let @xmath73 be a point set in the plane with @xmath74 , and each point @xmath75 be associated with a weight @xmath76 .",
    "assume the points in @xmath77 are ordered increasingly by their @xmath38-coordinates .",
    "suppose @xmath78 is a step function ( i.e. , a peicewise constant function , e.g. , see fig .  [",
    "fig : sfpf ] ) which we use to approximate the points of @xmath77 ( in other words , we fit the step function @xmath78 to the point set @xmath77 ) . the _ weighted vertical distance _ between any point @xmath79 and @xmath78 is defined as @xmath80 ( see fig .  [",
    "fig : sfpf ] ) .",
    "the approximation error of @xmath78 , denoted by @xmath81 , is defined as @xmath82 .",
    "the _ size _ of @xmath78 is the number of its horizontal line segments .",
    "given an integer @xmath19 , the _ point approximation problem _ seeks a step function @xmath78 to approximate the points of @xmath77 such that the size of @xmath78 is at most @xmath4 and the error @xmath83 is minimized . in @xcite ,",
    "this problem is referred to as the _ weighted step function min-@xmath84 problem _ , denoted by .",
    "here we also use  to denote this problem .",
    "we now show that the  problem can be reduced to .",
    "consequently ,  algorithms can be used to solve .",
    "indeed , consider the demand point set @xmath85 for  with the points ordered increasingly by their coordinates on @xmath7 .",
    "for each demand point @xmath10 , @xmath9 , we create a point @xmath86 in a 2-d euclidean plane @xmath87 ( i.e , the @xmath38-coordinate of @xmath75 in @xmath87 is the index @xmath8 and its @xmath88-coordinate @xmath89 in @xmath87 is the coordinate of @xmath90 on @xmath7 ) , and let the weight of @xmath75 be that of @xmath90 ( i.e. , @xmath91 ) .",
    "let @xmath77 be the set of @xmath1 weighted points thus created in @xmath87 .",
    "the next lemma states the relation between  and the reduced instance of .",
    "[ lem:00 ] an optimal solution @xmath92 for  on @xmath77 in @xmath87 corresponds to an optimal solution @xmath93 for  on @xmath18 .",
    "further , once having @xmath92 , @xmath93 can be obtained in @xmath3 time .",
    "for any two integers @xmath8 and @xmath61 with @xmath33 , let @xmath94 ( @xmath95 for @xmath65 ) .",
    "consider the following problem : find a value @xmath96 for one single horizontal line segment with @xmath96 as its @xmath88-coordinate such that the value of @xmath97 is minimized ( where @xmath98 ) .",
    "let @xmath99 denote the minimized value of @xmath100 .",
    "let @xmath101 be the approximation error of an optimal solution for  on @xmath77 .",
    "it is easy to see that computing an optimal solution for  on @xmath77 is equivalent to determining @xmath70 integers @xmath71 such that the value of @xmath102 is minimized and this minimized value is @xmath101 . according to the way that we create the point set @xmath77 from the demand point set @xmath18 , each value",
    "@xmath99 is exactly equal to the value @xmath68 , which is the minimized value of @xmath69 for the weighted 1-center problem on the demand point subset @xmath62 by determining the value of @xmath53 .",
    "further , we have shown that to find an optimal solution for  on @xmath18 , it suffices to determine @xmath70 integers @xmath103 such that the value of @xmath104 is minimized and the minimized value is @xmath48 .",
    "the above discussion shows that to find an optimal solution for  on @xmath18 , it suffices to find an optimal solution for on @xmath77 ; further , @xmath105 .",
    "given an optimal solution @xmath92 for  on @xmath77 , below we show how to obtain an optimal solution @xmath93 for  on @xmath18 from @xmath106 in linear time .",
    "note that @xmath92 is a step function with @xmath4 steps ( i.e. , horizontal line segments ) .",
    "let @xmath107 and @xmath108 .",
    "for each @xmath109 , suppose the @xmath61-th step of @xmath92 has a @xmath88-coordinate @xmath110 and covers the points of @xmath77 from @xmath111 to @xmath112 , i.e. , for each point @xmath113 with @xmath114 , the vertical line through @xmath115 intersects the @xmath61-th horizontal segment of @xmath92 .",
    "we obtain @xmath93 for  on @xmath18 as follows . for each @xmath109 ,",
    "the @xmath61-th center @xmath116 is put at the position @xmath110 on @xmath7 ( i.e. , @xmath117 ) , which serves the demand points of @xmath18 from @xmath118 to @xmath119 .",
    "thus , once @xmath92 is available , @xmath93 can be obtained in @xmath3 time .",
    "based on lemma [ lem:00 ] , to compute a set @xmath21 of @xmath4 centers for @xmath18 to minimize the value @xmath49 , it suffices to solve the corresponding wsf problem on @xmath77 and @xmath4 .",
    "specifically , after an optimal step function @xmath78 for @xmath77 is obtained , each horizontal segment of @xmath78 defines a center on @xmath7 whose coordinate is equal to the @xmath88-coordinate of that horizontal segment of @xmath78 in @xmath87 .",
    "to apply the wsf algorithms to the  problem , we need a data structure for answering queries @xmath120 with @xmath121 .",
    "suppose such a data structure can be built in @xmath122 time and can answer each query @xmath68 in @xmath123 time ; then we say the time bounds of the data structure are @xmath124 .",
    "the two lemmas below follow from the results in @xcite .",
    "[ lem:10]_@xcite _ suppose there is a data structure for the queries @xmath68 with time bounds @xmath124 ; then the  problem is solvable in @xmath125 time .",
    "[ lem:20]_@xcite _ suppose there is a data structure for the queries @xmath68 with time bounds @xmath124 ; then the  problem is solvable in @xmath126 time .",
    "refer to @xcite for the details of the algorithms in the above two lemmas . by the above two lemmas , lemma [ lem:100 ] follows .",
    "[ lem:100 ] suppose there is a data structure for the queries @xmath68 with time bounds @xmath124 ; then the  problem can be solved in @xmath127 time .",
    "a data structure based on fractional cascading @xcite was given in @xcite for answering the queries @xmath68 with time bounds @xmath128 .",
    "consequently , by lemma [ lem:100 ] , the  problem is solvable in @xmath129 time . in section [ sec : chreduction ] , we develop a data structure for processing the queries @xmath68 with time bounds @xmath130 , which allows us to solve in @xmath0 time .",
    "the reason why we can solve the  problem faster than simply applying the  algorithms @xcite is that the  instance constructed above from the problem  has a special property : the @xmath88-coordinates of the points @xmath131 are increasing .",
    "as shown in section [ sec : chreduction ] , this special property allows us to design a new data structure for the @xmath68 queries with time bounds @xmath130 .",
    "note that this special property does not hold for the general problem studied in @xcite .",
    "in this section , we present a data structure with time bounds @xmath130 for answering the @xmath68 queries . in the following , we first model the problem of computing @xmath68 as the problem of finding a lowest point in the common intersection of a set of half - planes ( i.e. , the 2-d sublist lp query ) .",
    "consider a point subset @xmath132 with @xmath45 .",
    "recall that @xmath133 . to compute @xmath68 , we need to find a point @xmath53 such that the value @xmath134 is minimized and @xmath68 is the minimized value .",
    "consider an arbitrary point @xmath135 on @xmath7 . since @xmath136 , each point @xmath137 defines two constraints : @xmath138 and @xmath139 .",
    "consider a 2-d @xmath140-coordinate system with @xmath7 as the @xmath38-axis .",
    "for each point @xmath141 , the inequality @xmath142 defines two ( upper ) half - planes : @xmath143 and @xmath144 .",
    "note that the two lines bounding the two half - planes intersect at the point @xmath145 on @xmath7 .",
    "based on the above discussion , if @xmath146 is a lowest point in the common intersection of the @xmath147 ( upper ) half - planes defined by the points in @xmath62 , then @xmath148 and @xmath149 is the coordinate of an optimal center @xmath53 on @xmath7 for @xmath62 .",
    "figure  [ fig : cone ] shows an example in which each ",
    "cone \" is the intersection of the two upper half - planes defined by a point in @xmath62 .",
    "clearly , this is an instance of the 2-d linear programming ( lp ) problem , which is solvable in @xmath150 time @xcite .",
    "however , we can make the computation faster by preprocessing .",
    "let @xmath151 be the set of @xmath152 ( upper ) half - planes defined by the @xmath1 points in @xmath18 , such that for each @xmath9 , the demand point @xmath90 defines @xmath153 and @xmath154 .",
    "then to compute @xmath68 , it suffices to find the lowest point @xmath34 in the common intersection of the half - planes defined by the points in @xmath62 , i.e. , the half - planes in @xmath155 .    , @xmath156 , and @xmath157 .",
    "the point @xmath34 is the lowest point in the common intersection . ]",
    "we actually consider a more general problem : given in the plane a set of @xmath1 upper half - planes @xmath31 , each query @xmath32 with @xmath33 asks for a lowest point @xmath34 in the common intersection of all half - planes in @xmath158 .",
    "we call this problem the _ 2-d sublist lp query_. based on our discussion above , if we solve the 2-d sublist lp query problem , then the @xmath68 queries for the  problem can be processed as well in the same time bound .",
    "a data structure for the 2-d sublist lp query problem with time bounds @xmath159 was given in @xcite .    yet",
    ", the 2-d sublist lp query problem for  is special in the following sense .",
    "for each half - plane @xmath160 for , we call the @xmath38-coordinate of the intersection point between @xmath7 ( i.e. , the @xmath38-axis ) and the line bounding @xmath161 the _ @xmath38-intercept _ of @xmath161 ( or its bounding line ) .",
    "as discussed above , for each point @xmath141 , the @xmath38-intercepts of both the half - planes @xmath162 and @xmath163 defined by @xmath145 are exactly the point @xmath145 .",
    "since all points of @xmath18 are ordered along @xmath7 from left to right by their indices , a special property of @xmath164 is that the @xmath38-intercepts of all half - planes in @xmath164 are ordered from left to right on @xmath7 by the indices of the half - planes . for a set @xmath37 of half - planes for a 2-d sublist lp query problem instance ,",
    "if @xmath37 has the above special property , then we say that @xmath37 is _",
    "@xmath38-intercept ordered_. below , we show that if @xmath37 is @xmath38-intercept ordered , then there is a data structure for the specific 2-d sublist lp query problem with time bounds @xmath130 . henceforth , we assume that @xmath37 is an @xmath38-intercept ordered half - plane set . in the  problem , since all the point weights for @xmath18 are positive finite values , the bounding line of each half - plane in @xmath164 is neither horizontal nor vertical .",
    "thus , we also assume that no bounding line of any half - plane in @xmath37 is horizontal or vertical . again , this assumption is only for simplicity of discussion . in the next section ,",
    "we solve the 2-d sublist lp queries by reducing it to computing the convex hull of a query sub - path of a given simple path @xcite . given a simple path in the plane , based on compact interval trees , data structures are proposed in @xcite to compute ( in logarithmic time ) the convex hull of a query subpath that is specified by the indices of the beginning vertex and the end vertex of the subpath , and the convex hull is represented ( by a compact interval tree ) such that standard convex hull queries on it can be done in @xmath39 time .",
    "for each half - plane @xmath165 , we denote by @xmath166 the bounding line of @xmath167 ; let @xmath168 be the set of the bounding lines of the half - planes in any subset @xmath169 .",
    "our problem reduction utilizes a duality transformation @xcite , which is a technique commonly used in computational geometry , as follows .",
    "suppose we have a _ primary _ plane @xmath170 .",
    "for each point @xmath171 , it corresponds to a line @xmath172 in the _ dual _ plane @xmath173 ; the line is also called the _ dual _ of the point and vice versa .",
    "similarly , each line @xmath174 in @xmath170 corresponds to a point @xmath175 in @xmath173 .",
    "suppose all half - planes in @xmath37 are in the primary plane @xmath170 . by duality , we can obtain a set @xmath176 of points in the dual plane @xmath173 corresponding to the lines in @xmath177 .",
    "for each query @xmath32 on @xmath37 , our goal is to locate the lowest point @xmath34 in the common intersection of all half - planes in @xmath178 ( note that due to our assumption that no line in @xmath177 is horizontal , there is only one lowest point in the common intersection ) . since all half - planes in @xmath37 are upper half - planes , an observation is that @xmath34 is also the lowest point of the upper envelope of the arrangement of the lines in @xmath179 .",
    "denote by @xmath180 the above upper envelope for @xmath179 .",
    "denote by @xmath181 the set of points ( in the dual plane @xmath173 ) dual to the lines in @xmath179 .",
    "let @xmath182 denote the lower hull of the convex hull of @xmath181 .",
    "it is commonly known @xcite that the dual of @xmath180 is exactly @xmath182 ( in the dual plane @xmath173 ) . therefore ,",
    "if we have a representation of @xmath182 that can support standard binary - search - based queries , then we can compute the lowest point @xmath34 in logarithmic time accordingly .",
    "one may attempt to design a data structure for querying the lower hull on any subset @xmath181 of @xmath176 . however , there are difficulties when doing so  directly \" , which will be explained later .",
    "instead , we use an  indirect \" approach , as follows .",
    "recall that we have assumed the bounding line of any half - plane in @xmath37 is not vertical or horizontal .",
    "we partition the half - plane set @xmath37 into two subsets @xmath183 and @xmath184 such that a half - plane @xmath167 of @xmath37 is in @xmath183 ( resp . ,",
    "@xmath184 ) if and only if the slope of @xmath166 is negative ( resp . ,",
    "positive ) .",
    "accordingly , for each subset @xmath178 , we also have @xmath185 and @xmath186 , and we define the envelopes @xmath187 and @xmath188 accordingly .",
    "since the bounding lines of all half - planes in @xmath185 have negative slopes , the upper envelope @xmath187 is monotone decreasing from left to right .",
    "similarly , the upper envelope @xmath188 is monotone increasing from left to right . hence , it is easy to see that the lowest point @xmath34 is the _ single _ intersection of @xmath187 and @xmath188",
    ". let @xmath189 and @xmath190 be the sets of points in the dual plane corresponding to the lines in @xmath191 and @xmath192 , respectively .",
    "denote by @xmath193 and @xmath194 the lower hulls of @xmath189 and @xmath190 , respectively . by duality",
    ", the intersection of @xmath187 and @xmath188 corresponds exactly to the common tangent line of the two lower hulls @xmath193 and @xmath194 such that both hulls are above the tangent line . note that since all lines in @xmath195 have negative slopes , by duality , all points in @xmath189 are to the left of the @xmath88-axis in the dual plane , and thus the lower hull @xmath193 is to the left of the @xmath88-axis .",
    "similarly , the lower hull @xmath194 is to the right of the @xmath88-axis .",
    "namely , the two lower hulls @xmath193 and @xmath194 are on different sides of the @xmath88-axis .",
    "this property can make our computation of their tangent line easier .    in summary ,",
    "if we can represent both @xmath193 and @xmath194 in such a way that the common tangent line can be found efficiently , then @xmath34 can be obtained immediately .",
    "our remaining task is to derive a way to support convex hull ( or lower hull ) queries on any subset of consecutive points in @xmath196 ( and similarly on @xmath197 ) .",
    "our result is that a data structure can be built in @xmath0 time such that given any @xmath45 , the lower hull @xmath193 can be obtained ( implicitly ) in @xmath39 time and is represented in a way that supports binary - search - based queries ( e.g. , compute the common tangent of it and another lower hull , say @xmath194 ) .",
    "the details are given below .",
    "without loss of generality , we assume the bounding lines of the half - planes in @xmath37 all have negative slopes ( i.e. , @xmath198 ) and the other case can be handled analogously .",
    "suppose the bounding line of each @xmath165 corresponds to the point @xmath199 in the dual plane @xmath173 .",
    "let @xmath200 be the path by connecting all pairs of two consecutive points in @xmath176 by line segments , i.e. , connecting @xmath201 to @xmath202 for @xmath203 .",
    "consider the line segment connecting @xmath201 and @xmath202 and the line segment connecting @xmath204 and @xmath205 ; then the two segments are _ adjacent _ to each other if @xmath206 or @xmath207 .",
    "the following lemma [ lem : simple ] shows that the path @xmath200 is a simple path , that is , any two line segments of @xmath200 that are not adjacent do not intersect .",
    "as can be seen from the proof of lemma [ lem : simple ] , we note that the correctness of lemma [ lem : simple ] heavily relies on two properties of @xmath37 : ( 1 ) @xmath37 is @xmath38-intercept ordered ; ( 2 ) the slopes of the bounding lines of the half - planes in @xmath37 are all negative ( or positive ) . without either property above",
    ", the lemma would not hold , and the second property also explains why we need to partition the original set @xmath37 into @xmath183 and @xmath184 .",
    "[ lem : simple ] the path @xmath200 is a simple path .    consider two segments @xmath208 and @xmath209 where @xmath208 connects @xmath201 and @xmath202 and @xmath209 connects @xmath204 and @xmath205 .",
    "suppose @xmath208 and @xmath209 are not adjacent . to prove the lemma , it is sufficient to show @xmath208 and @xmath209 does not intersect . since @xmath208 and @xmath209 are not adjacent , either @xmath210 or @xmath211 . without loss of generality ,",
    "assume @xmath210 .",
    "note that @xmath208 and @xmath209 are in the dual plane @xmath173 .",
    "it is commonly known @xcite that the dual of @xmath208 in the primary plane @xmath170 is the _",
    "double wedge _ bounded by the lines @xmath166 and @xmath212 such that the double wedge does not contain a vertical line ( e.g. , see fig .",
    "[ fig : doublewedge ] ) ; we denote the double wedge by @xmath213 .",
    "similarly , the dual of @xmath209 is the double wedge @xmath214 bounded by @xmath215 and @xmath216 .     and",
    "@xmath214 ( the shaded regions ) in the primary plane @xmath170 corresponding to the two segments @xmath208 and @xmath209 in the dual plane @xmath173 .",
    "the two segments @xmath217 and @xmath218 are their intersections with the @xmath38-axis . ]",
    "assume to the contrary the two segments @xmath208 and @xmath209 intersect each other , say , at a point @xmath12 .",
    "then , @xmath12 corresponds to a line in the primary plane @xmath170 , which is in the common intersection of the two double wedges @xmath213 and @xmath214 .",
    "however , we claim that the common intersection of @xmath213 and @xmath214 does not contain any line , which incurs contradiction .",
    "hence , @xmath208 can not intersect @xmath209 and the lemma follows .",
    "below , we prove the above claim .",
    "suppose to the contrary there is a line @xmath219 contained in @xmath220 .",
    "denote by @xmath217 ( resp . , @xmath218 ) the intersection of the @xmath38-axis and @xmath213 ( resp . , @xmath214 ) , e.g. ,",
    "see fig .  [",
    "fig : doublewedge ] .",
    "hence , both @xmath217 and @xmath218 are line segments on the @xmath38-axis .",
    "since the intersection of @xmath215 and the @xmath38-axis is strictly to the right of the intersection of @xmath212 and the @xmath38-axis ( since @xmath37 is @xmath38-intercept ordered ) , @xmath217 does not intersect @xmath218 . since the slopes of both @xmath166 and @xmath212 are negative , a line contained in @xmath213 must intersect @xmath217 , and thus the line @xmath219 intersects @xmath217 ( due to @xmath221 ) .",
    "similarly , @xmath219 also intersects @xmath218 .",
    "hence , we obtain that @xmath219 intersects both @xmath217 and @xmath218 .",
    "since both @xmath217 and @xmath218 lie in @xmath38-axis and @xmath217 does not intersect @xmath218 , the line @xmath219 has to be the @xmath38-axis .",
    "however , since the slopes of both @xmath166 and @xmath212 are negative , the double wedge @xmath213 can not contain the @xmath38-axis and thus can not contain @xmath219 .",
    "therefore , we obtain contradiction and the claim follows .    in light of lemma",
    "[ lem : simple ] , we can utilize the results in @xcite . given a simple path in the plane , _ compact interval tree _",
    "data structures are proposed in @xcite to compute the convex hull of a query subpath that is specified by the indices of the beginning vertex and the end vertex of the subpath .",
    "if applied to @xmath200 in our problem , then after spending @xmath222 time sorting the points in @xmath176 by their @xmath38-coordinates , we have the following results : a data structure can be constructed in @xmath223 time that can compute the lower hull @xmath182 for any query @xmath32 in @xmath39 time and @xmath182 is represented ( by a compact interval tree ) such that any standard convex hull queries on @xmath182 can be done in @xmath39 time , where the _ standard convex hull queries _ includes point - in - polygon tests , finding intersections with lines , finding tangents through query points , finding extreme vertices in a query direction , detecting intersections of two polygons , and finding common tangents of two convex hulls .",
    "further , another data structure of construction time @xmath3 and query time @xmath224 is also given in @xcite ; in addition , there is also a data structure of construction time @xmath225 and query time @xmath226 by making trade - off between the construction and query @xcite .",
    "both data structures are applicable to our problem .    by duality",
    ", the @xmath38-coordinate of each point @xmath199 corresponds to the slope of the line @xmath166 .",
    "thus , a sorted order of the points in @xmath176 by @xmath38-coordinate corresponds to a sorted order of the bounding lines of the half - planes in @xmath37 by slope .",
    "the following lemma summarizes our discussions above .",
    "[ lem : summary ] in @xmath0 time , we can build a data structure that can answer each 2-d sublist lp query in @xmath39 time .",
    "further , if the bounding lines of the half - planes in @xmath37 are sorted by their slopes , then there exist three data structures for the 2-d sublist lp queries , whose construction time complexities are @xmath3 , @xmath225 , and @xmath223 , respectively , and query time complexities are @xmath224 , @xmath227 , and @xmath39 , respectively .    according to the reduction procedure from the  problem to the planar points approximation problem @xcite , the slopes of the bounding lines of the half - planes in @xmath37 correspond to the weights of the points in the input point set @xmath18",
    ". therefore , we have the following corollary .",
    "there exists a data structure of time complexity @xmath228 for the @xmath68 queries .",
    "further , if the points of @xmath170 are sorted on the line @xmath7 and the weights of the points in @xmath170 are also sorted , then we have three data structures for the @xmath68 queries of time complexities @xmath229 , @xmath230 , and @xmath231 , respectively .    by lemma [ lem:100 ]",
    ", we have the following result for the problem .",
    "[ theo : continuous ] the  problem is solvable in @xmath0 time .",
    "further , if the points of @xmath170 are sorted on @xmath7 and the weights of the points in @xmath170 are also sorted , then the  is solvable in @xmath232 time .",
    "therefore , if the points of @xmath170 are sorted on the line @xmath7 and the weights of the points in @xmath170 are also sorted , for small @xmath4 ( e.g. , @xmath233 , which is true in many applications ) , the problem is solvable in @xmath3 time .",
    "in this paper , we give an @xmath0 time algorithm for the k - center problem on a real line . in certain special cases , we can solve the problem in linear time .    as suggested by tamir @xcite ,",
    "when @xmath234 , the discrete unweighted  is equivalent to the min gap problem , i.e. , finding the closest pair of neighbors in @xmath18 .",
    "hence , there is an @xmath0 time lower bound on the discrete version .",
    "in fact , by the reduction from the min gap problem , we can also show that the continuous unweighted  also has an @xmath0 lower bound on the running time .",
    "indeed , in any optimal solution @xmath235 for @xmath234 , there must be a center at the middle position of the closest pair of neighbors in @xmath18 , and that center serves both neighbors ; further , any other center in @xmath235 serves one and only one demand point in @xmath18 .",
    "therefore , given an optimal solution @xmath235 , since the demand points served by each center are known , the two demand points served by the same center are the closest neighbors in @xmath18 .",
    "we thus obtain the @xmath0 time lower bound on the continuous unweighted .",
    "note that the linear time algorithms for the unweighted continuous / discrete k - center problem on trees @xcite do not violate the @xmath0 time lower bound discussed above because the tree structure already gives a partial order of the nodes in the tree .",
    "an open problem is whether the techniques given in this paper can be extended to the tree structure .",
    "b.  ben - moshe , b.  bhattacharya , and q.  shi .",
    "an optimal algorithm for the continuous / discrete weighted 2-center problem in trees . in _ proc . of the 7th latin american conference on theoretical informatics _ , pages 166177 , 2006 .",
    "b.  bhattacharya and q.  shi .",
    "optimal algorithms for the weighted @xmath12-center problems on the real line for small @xmath12 . in _ proc . of the 10th international workshop on algorithms and data structures _ , pages 529540 , 2007 .",
    "d.z . chen and h.",
    "approximating points by a piecewise linear function : i. in _ proc .",
    "of the 20th international symposium on algorithms and computation ( isaac ) _ , volume 5878 of _ lecture notes in computer science _ , pages 224233 .",
    "springer , 2009 .",
    "d.z . chen and h.",
    "efficient algorithms for the weighted @xmath4-center problem on a real line . in _ proc . of the 22nd international symposium on algorithms and computation ( isaac ) _ , volume 7074 of _ lecture notes in computer science _ , pages 584593 .",
    "springer , 2011 .",
    "parametric search and locating supply centers in trees . in _ proc . of the 2nd international workshop on algorithms and data structures _ ,",
    "volume 519 of _ lncs _ , pages 299319 .",
    "springer - verlag , 1991 ."
  ],
  "abstract_text": [
    "<S> we present an @xmath0 time algorithm for the ( weighted ) problem of @xmath1 points on a real line . </S>",
    "<S> we show that the problem has an @xmath2 time lower bound , and thus our algorithm is optimal . </S>",
    "<S> we also show that the problem is solvable in @xmath3 time in certain special cases . </S>",
    "<S> our techniques involve developing efficient data structures for processing queries that find a lowest point in the common intersection of a certain subset of half - planes . </S>",
    "<S> this subproblem is interesting in its own right and our solution for it may find other applications . </S>"
  ]
}