{
  "article_text": [
    "nominal techniques are an approach to variables in syntax and semantics which give variables denotational reality as _ names_. the semantics underlying nominal techniques are _ nominal sets _",
    "@xcite , which identify variable symbols with names or ( for set theorists ) _ urelemente_. we may call names / urelemente _ atoms _ and we write the set of all atoms as @xmath0 .    according to nominal techniques , syntax and semantics both ` contain ' atoms , in a sense made formal by a notion of _ support _",
    "( see definition  [ defn.nominal.set ] ) .",
    "the original applications of nominal sets and nominal terms @xcite admitted only finite support ( the interested reader can find more applications listed on @xcite ) .",
    "permissive - nominal terms and models generalise this by allowing infinite support ( based on a set of finitely representable but still infinite supporting sets called _ permission sets _ ) .",
    "precise definitions will come later . for the benefit of the reader already familiar with nominal techniques we give a simple schematic for how this fits together : @xmath1 both models and syntax seem better - behaved in the permissive case : we avoid the conditional reasoning typical of more traditional finitely - supported nominal techniques .",
    "is fresh for @xmath2 ' @xcite , whereas ` permissive - nominal algebra ' uses just equations @xcite . ]",
    "this makes it possible to unify the semantic and syntactic notions of @xmath3-equivalence and freshness , to ` just quotient ' terms by @xmath3-equivalence , and to cleanly add universal quantification .",
    "some complex mathematical proofs become dramatically simpler .",
    "precise examples are cited in the conclusions of this paper .",
    "so permissive - nominal techniques are arguably nicer to work with , but ` ordinary ' nominal techniques are arguably more elementary ( no infinities to confuse the reader)and they are sufficient for many applications .",
    "we indicate subset inclusions in the schematic above because models with finite support are special cases of models with infinite support , and it has been shown by arguments on syntax how to map from ` ordinary ' nominal syntax to permissive - nominal syntax ( * ? ? ?",
    "* section  4 ) .",
    "but what about the other way around ?    in this paper , we explore models with differently - sized sets of atoms , give constructions to move from ` larger ' to ` smaller ' support , and test when these size transformations can and can not be internally detected by the logics concerned .",
    "the main two results are theorems  [ thrm.fin.nonfin ] and  [ thrm.pnl.fin.nonfin]these follow from two technical results , theorem  [ thrm.pull.out.l ] and lemma  [ lemm.l.varsigma ] .    because our arguments are based on models , it is fairly easy to apply them to different syntaxes . in this paper",
    "we use the two examples studied in previous work by the author and others : nominal algebra @xcite ( an equality reasoning system whose term language is nominal terms ) and permissive - nominal logic ( ditto , for first - order logic ) @xcite . see also a recent survey paper , which covers both of these in a uniform presentation @xcite .      in section  [ sect.perns ]",
    "we briefly introduce permissive - nominal sets , with examples .",
    "these will be our semantic universe in this paper ; nominal sets from @xcite are a special case .    in section  [ sect.nominal.terms.syntax ]",
    "we introduce permissive - nominal terms : signatures , terms , @xmath3-equivalence , and their interpretation in permissive - nominal sets .",
    "the critical definition is definition  [ defn.interpret.terms ] , which maps from syntax to semantics .",
    "section  [ sect.models.with.finite.support ] shows how to reduce the size of the support of a interpretation with ` large ' support , to obtain a interpretation with ` smaller ' support .",
    "this requires some interesting technical constructions .",
    "notably , we consider atoms - abstraction by a list of atoms @xmath4x$ ] ( definition  [ defn.abstraction.x ] ) , and a permutative notion of restricting a permutation @xmath5 ( definition  [ defn.pi.s ] ) .",
    "in section  [ sect.two.comm ] are three technical commutation results : the common theme is that reducing the size of the support of a interpretation commutes with the structure of that interpretation .",
    "section  [ sect.completeness.fin ] proves our first main theorem , that permissive - nominal algebra is complete over finitely - supported interpretations ( theorem  [ thrm.fin.nonfin ] ) .",
    "section  [ sect.pnl ] introduces a novel notion of ` medium support ' ( definition  [ defn.medium ] ) and proves our second main theorem , that permissive - nominal logic over interpretations with medium support has the same validity as over interpretations with finite support ( theorem  [ thrm.pnl.fin.nonfin ] ) .",
    "we discuss what this means in subsection  [ subsect.pnl.relevance ] .",
    "section  [ sect.shift ] discusses how the precise design of permission sets and permutations affects the proofs of this paper .",
    "we find that the results are delicate : even quite small changes can break the proofs ( propositions  [ prop.upgrade.zero.fail ] and  [ prop.upgrade.fail ] ) .",
    "we conclude with a technical discussion of our results , related work , and future work .",
    "we start with the basic definitions of permission sets , permissive - nominal sets , and then we give some examples .",
    "[ defn.nz ] write @xmath6 for the natural numbers . and @xmath7 for the integers .",
    "[ defn.atoms ] for each @xmath8 fix a pair of disjoint countably infinite sets of * atoms * @xmath9 and @xmath10 . write @xmath11 @xmath12 will range over _ distinct _ atoms : we call this the * permutative * convention .",
    "[ defn.swap ] [ def.permutation ] [ def.nontriv ] given @xmath13 for some @xmath8 write @xmath14 for the * swapping * bijection on atoms mapping @xmath15 to @xmath16 , @xmath16 to @xmath15 , and any other @xmath17 to @xmath18 .    if @xmath19 is a bijection on atoms",
    "define @xmath20 .",
    "write @xmath21 for the group of bijections ( finitely ) generated by swappings , and call these bijections * permutations*.    write @xmath22 for the * composition * of @xmath19 and @xmath23 ( so @xmath24 ) .",
    "write @xmath25 for the * identity * permutation ( so @xmath26 always )",
    ".    a bijection @xmath19 on atoms is a permutation if and only if    @xmath27 if and only if @xmath28 .    @xmath20 is finite .",
    "[ defn.pointwise ] if @xmath29 define the * pointwise * action by @xmath30 .",
    "[ defn.the.comb ] a * permission set * @xmath31 is a set of the form @xmath32 .",
    "@xmath33 will range over permission sets .",
    "the choices made in definitions  [ def.permutation ] and  [ defn.the.comb ] make theorems  [ thrm.fin.nonfin ] and  [ thrm.pnl.fin.nonfin ] work .",
    "these choices are possible within the framework of @xcite .",
    "[ defn.perm.set ] a * set with a permutation action * @xmath34 is a pair @xmath35 of a * carrier set * @xmath36 and a group action on the carrier set @xmath37 , written infix as @xmath38 . and",
    "@xmath39 for every @xmath19 and @xmath23 and every @xmath40 . ]",
    "[ defn.support ] say @xmath29 * supports * @xmath41 when for every ( finite ) permutation @xmath42 , if @xmath43 for all @xmath44 then @xmath45 .",
    "[ defn.nominal.set ] a * permissive - nominal set * is a set with a permutation action such that every element has a unique least supporting set @xmath46 such that @xmath47 for some permission set @xmath31 .",
    "we call this the * support * of @xmath48 .",
    "@xmath34 , @xmath49 will range over permissive - nominal sets .",
    "in fact , if @xmath40 has _ some _ supporting set @xmath50 , then it has a _ least _ one ; see e.g. ( * ? ? ?",
    "* theorem  4.3 ) .    [ defn.restrict ]",
    "if @xmath19 is a permutation and @xmath29 write @xmath51 for the * restriction * of @xmath19 to @xmath52 .",
    "this is the partial function such that @xmath53 when @xmath54 , and is undefined otherwise .",
    "[ lemm.supp.restricted ] suppose @xmath34 is a nominal set .",
    "suppose @xmath40 and @xmath29 supports @xmath48",
    ".    then @xmath55 implies @xmath56 .    from the definition of support ,",
    "considering @xmath57 .",
    "[ lemm.supp.pi.x ] suppose @xmath34 is a permissive - nominal set and @xmath41",
    ". then @xmath58 .    by a routine calculation using the group action .",
    "we conclude with a useful condition for checking whether @xmath59 :    [ corr.notinsupp ] suppose @xmath34 is a permissive - nominal set and @xmath41 .",
    "suppose @xmath60 .",
    "then @xmath61 if and only if @xmath62 .",
    "suppose @xmath60 .",
    "the right - to - left implication is by the definition of support . for the left - to - right implication",
    ", we prove the contrapositive .",
    "suppose @xmath59 .",
    "by lemma  [ lemm.supp.pi.x ] @xmath63 . by our suppositions ,",
    "it follows that @xmath65 .",
    "we briefly consider examples of permissive - nominal sets , which will be useful shortly .",
    "[ defn.atoms.perm ] @xmath0 the set of atoms can be considered a permissive - nominal set with a natural permutation action @xmath66 .    in the case of @xmath0",
    "only , we will be lax about the distinction between the set , and the permissive - nominal set with its natural permutation action .",
    "[ defn.abstraction.sets ] suppose @xmath34 is a permissive - nominal set and @xmath67 is a set of atoms .",
    "suppose @xmath40 and @xmath68 .",
    "define * atoms - abstraction * @xmath69x$ ] and @xmath70{\\mathsf}x$ ] by :    r@  l [ a]x = & \\{(a , x)}\\{(b,(b  a)x)ba _ @xmath71(x ) } +    [ a]x = & [ ( a)]x    ( compare definition  [ defn.abstraction.sets ] with definition  [ defn.abstraction.x ] . )    in the definition of @xmath69x$ ] in definition  [ defn.abstraction.sets ] recall that by our permutative convention @xmath72 . an equivalent and more compact way of writing this is @xmath69x=\\{(\\pi(a),\\pi{{\\cdot}}x)\\mid \\pi\\in{\\ensuremath{\\text{$\\mathit{fix}$}}}({\\ensuremath{\\text{$\\mathit{supp}$}}}(x){\\setminus}\\{a\\})\\}$ ] where @xmath73 .",
    "[ lemm.supp.abstraction ]    @xmath70{\\mathsf}x$ ] is a permissive - nominal set .",
    "@xmath69x{=}[a]x'$ ] if and only if @xmath74 , for @xmath75 and @xmath76 .",
    "@xmath69x{=}[a']x'$ ] if and only if @xmath77 and @xmath78 , for @xmath79 and @xmath80 .",
    "[ defn.times ] if @xmath81 are permissive - nominal sets for @xmath82 then define @xmath83 by : @xmath84    [ lemm.properties.of.support ]    @xmath85 .",
    "@xmath86x)={\\ensuremath{\\text{$\\mathit{supp}$}}}(x)\\setminus\\{a\\}$ ] .",
    "@xmath87 .",
    "proofs are as in @xcite or @xcite .",
    "[ defn.sort.sig ] a * sort - signature * is a tuple @xmath88 of * name * and * base * sorts @xmath89 and @xmath90 .",
    "@xmath91 will range over name sorts ; @xmath92 will range over base sorts .",
    "a * sort language * is defined by    : : = ( ,  , ) .",
    "[ defn.term.signature ] a * term - signature * over a sort - signature @xmath88 is a tuple @xmath93 where :    @xmath94 is a set of * constants*.    @xmath95 is a set of * unknowns*.    @xmath96 is a set of * term - formers*.    @xmath97 assigns    to each constant @xmath98 a base sort @xmath99 which we may write @xmath100 ,    to each unknown @xmath101 a sort @xmath3 which we write may @xmath102 , and    to each @xmath103 a * term - former arity * @xmath104 , where @xmath3 and @xmath99 are in the sort - language determined by @xmath88 .",
    "@xmath105 assigns to each constant a set @xmath106 .",
    "[ defn.signature ] a * ( nominal terms ) signature * @xmath107 is then a tuple @xmath108 .",
    "we may write @xmath109 just as @xmath110 .",
    "[ defn.syntax ] [ defn.terms ] for each signature @xmath111 , define * terms * over @xmath107 by :    c@c@c    ( aa _ ,  a ) a :    &    ( @xmath112(c)= ) c :    &    ( @xmath112(x)= ) x :     +    r:(@xmath113(f)= ( ) ) f(r ) :    &    r_1:_1    r_n:_n ( r_1, ",
    ",r_n):(_1,  ,_n )    &    r:(aa _ ,  a ) r : [ ]    we may write @xmath114 as @xmath115 .    [ defn.fa ] define * free atoms * and the * permutation action * , and * free variables * on terms @xmath116 as follows :    @xmath117(a ) = & \\{a } & @xmath117(f(r ) ) = & @xmath117(r ) + @xmath117(c ) = & @xmath118(c ) & @xmath117((r_1, ",
    ",r_n ) ) = & _ 1 in @xmath117(r_i ) + @xmath117(x ) = & a^_^ < & @xmath117([a]r ) = & @xmath117(r)\\{a } + a=&(a ) & f(r)=&f(r ) + ( c)=&()c & ( r_1,  ,r_n)=&(r_1,  ,r_n ) + ( x)=&()x & [ a]r=&[(a)]r + @xmath119(a ) = & & @xmath119(f(r ) ) = & @xmath119(r ) + @xmath119(c ) = & & @xmath119((r_1, ",
    ",r_n ) ) = & _ 1 in @xmath119(r_i ) + @xmath119(x ) = & \\{x } & @xmath119([a]r ) = & @xmath119(r )    in definition  [ defn.fa ] we in effect give every unknown permission set @xmath120 ( so that @xmath121 ) .",
    "we obtain the effect of an unknown with permission set @xmath32 just by writing @xmath122 .",
    "this simplified design makes proposition  [ prop.commute.pi ] easier to express .",
    "it corresponds roughly to ( * ? ? ?",
    "* example  3.1.7(2 ) ) .",
    "[ lemm.pi.ftma ] @xmath123 .",
    "[ lemm.fa.pi.r ] if @xmath124 for all @xmath125 then @xmath126 .",
    "a * congruence * is an equivalence relation @xmath127 such that if @xmath128 then @xmath129 and @xmath130 and @xmath69r\\mathrel{r}[a]s$ ] .",
    "* @xmath3-equivalence * is then the least congruence such that if @xmath131 then @xmath132",
    ". then @xmath133(b\\ a){{\\cdot}}r{=_{\\scriptstyle\\alpha}}[a]r$ ] ,  and if @xmath134 then @xmath135 ,  and if @xmath136 then @xmath137 . ]",
    "we do not quotient terms by @xmath3-equivalence .",
    "the syntax @xmath69r$ ] is a formal pair of @xmath15 and @xmath116 .",
    "so for example , @xmath69x$ ] and @xmath133(b\\ a){{\\cdot}}x$ ] for @xmath138 are different concrete terms .",
    "in fact , we never use @xmath3-equivalence @xmath139 directly in this paper ( it would be needed if we proved soundness and completeness , but these proofs are in other papers and are not included here ) .",
    "however @xmath139 lurks in the background , hard - wired into the denotation : it can be proved that if @xmath140 then @xmath116 and @xmath141 will always denote the same element in definition  [ defn.interpret.terms ] .",
    "[ defn.f.equivar ] suppose @xmath34 and @xmath49 are permissive - nominal sets and @xmath142 is a function .",
    "call @xmath143 * equivariant * when @xmath144 for all permutations @xmath42 and @xmath40 .    [ defn.interpretation ] suppose @xmath88 is a sort - signature ( definition  [ defn.sort.sig ] ) .    a * interpretation * @xmath145 for @xmath88 consists of an assignment of a permissive - nominal set @xmath146 to each sort @xmath3 in @xmath88 , along with equivariant maps    for each @xmath147 an equivariant and injective map @xmath148 which we write @xmath149 ,    for each @xmath147 and @xmath3 an equivariant and injective map @xmath70{{\\llbracket \\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr i}}$}}}}\\to{{\\llbracket [ \\nu]\\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr i}}$}}}}$ ] which we write @xmath69^{{{\\hspace{-.1ex}\\scalebox{.65}{${\\ensuremath{\\mathscr i}}$}}}}x$ ] , and    for each @xmath150 for @xmath82 an equivariant and injective map @xmath151 which we write @xmath152 .",
    "[ defn.sigma.interpretation ] suppose @xmath153 is a signature ( definition  [ defn.signature ] ) .",
    "a * ( @xmath107-)interpretation * @xmath145 for @xmath107 , or * @xmath107-algebra * , consists of the following data :    an interpretation for the sort - signature @xmath88 ( definition  [ defn.interpretation ] ) .    for every @xmath154 with @xmath155 an equivariant function @xmath156 from @xmath146 to @xmath157 .",
    "an assignment of a @xmath158 to @xmath159 , such that @xmath160 .",
    "[ defn.valuation ] suppose @xmath145 is a @xmath107-algebra .",
    "a * valuation * @xmath161 to @xmath145 is an equivariant function on unknowns @xmath95 such that for each unknown @xmath2 ,   @xmath162 .",
    "@xmath161 will range over valuations .",
    "[ defn.interpret.terms ] suppose @xmath145 is a @xmath107-algebra .",
    "suppose @xmath161 is a valuation to @xmath145 .",
    "extend @xmath145 to an * interpretation * on terms @xmath163 ( where of course @xmath116 is a term in the signature @xmath107 ) by :    a _",
    "^ = & a^ & ( r ) _",
    "^ = & f^(r _",
    "^ ) + _ ^ = & c^ & ( r_1,  ,r_n ) _ ^ = & ( r_1 _ ^,  ,r_n _ ^)^ + x _",
    "^ = & ( x ) & r _",
    "^ = & [ a]^r _ ^    lemmas  [ lemm.sort.r ] to  [ lemm.supp.r ] are proved by routine inductions :    [ lemm.sort.r ] if @xmath164 then @xmath165 .",
    "[ lemm.fv.varsigma ] if @xmath166 for every @xmath167 then @xmath168 .    [ lemm.pi.r.model ]",
    "@xmath169 .",
    "[ lemm.supp.r ] @xmath170",
    ".    looking ahead , later on in section  [ sect.completeness.fin ] , we use interpretations to define a notion of validity with respect to a model or a collection of models , written @xmath171 and @xmath172 .",
    "in this section we show how , given an interpretation @xmath173 , to build an interpretation @xmath174{\\ensuremath{\\mathscr h}}$ ] with ` smaller ' support .    @xmath174{\\ensuremath{\\mathscr h}}$ ] will have ` almost the same structure ' as @xmath173 . if two terms have a distinct denotation in @xmath173 then their interpretation in @xmath174{\\ensuremath{\\mathscr h}}$ ] is also distinct ( proposition  [ prop.ft ] , which is essentially theorem  [ thrm.pull.out.l ] combined with lemma  [ lemm.equality.of.abstractions.x ] ) .    as we shall see in section  [ sect.completeness.fin ]",
    ", this result can be leveraged to proofs of completeness with respect to interpretations with finite support , assuming completeness with respect to all interpretations .",
    "the idea of the construction is simple : in definition  [ defn.abstraction.x ] we take @xmath173 and abstract all but finitely many atoms in its elements  in definition  [ defn.f ] we show how to combine this with the interpretation of the term - formers of @xmath173 .    one way to think of this , is that we replace atoms by numerical indexes ( where @xmath15 is identified with its position in the infinite list of abstractions which we impose ) .",
    "we can think of @xmath174{\\ensuremath{\\mathscr h}}$ ] as an abstract ` de bruijn indexes ' version of @xmath173 , where we recall that de bruijn indexes are a method of representing object - level variables as numerical indexes @xcite typically applied concretely to formal syntax rather than to models .",
    "more on this in the conclusions .",
    "[ defn.l ] choose a fixed but arbitrary enumeration @xmath175 of some subset of @xmath120since atoms are countable , this can be done .",
    "write this enumeration as a list , @xmath176 $ ] . with a @xmath177 .",
    "of course this does not matter , but it does allow the diagram in section  [ sect.shift ] to make geometric sense . ]",
    "define a permissive - nominal set @xmath178 ( parameterised by @xmath179 ) by : @xmath180\\qquad\\qquad\\qquad\\quad\\ \\ ,    \\\\",
    "\\end{array}\\ ] ] @xmath181 will range over elements of @xmath182 .",
    "it is very easy to check that @xmath178 is indeed a permissive - nominal set , and that @xmath183 is equal to the atoms in @xmath181",
    ".    we will be most interested in the cases of definition  [ defn.l ] when @xmath179 enumerates all of @xmath120 ( section  [ sect.completeness.fin ] ) and when @xmath179 enumerates ` half ' of @xmath120 ( section  [ sect.pnl ] ) .",
    "however , nothing in the mathematics below will depend on this .",
    "if @xmath29 define @xmath184 by : @xmath185    [ defn.abstraction.x ] suppose @xmath34 is a permissive - nominal set and @xmath40 .",
    "suppose @xmath186 .",
    "define @xmath4x$ ] and @xmath187{\\mathsf}x$ ] as follows :",
    "r@  l [ l]x = & \\{(l , x ) @xmath188(@xmath71(x ) @xmath71(l ) ) } +    [ l]x = & [ l]x    @xmath4x$ ] and @xmath187{\\mathsf}x$ ] mirror @xmath69x$ ] and @xmath189{\\mathsf}x$ ] from definition  [ defn.abstraction.sets ] , and have broadly similar properties .",
    "the idea of abstracting over infinitely many atoms was investigated in @xcite ( see equation ( 2 ) in subsection  2.1 ) .",
    "[ lemm.equality.of.abstractions.x ] suppose @xmath34 is a permissive - nominal set and @xmath190 .",
    "suppose @xmath186 .",
    "then @xmath4x=[l]y$ ] if and only if @xmath191 .    clearly",
    "if @xmath191 then @xmath4x=[l]y$ ] .",
    "suppose @xmath4x=[l]y$ ] . by construction @xmath192x$ ] , so also @xmath192y$ ] .",
    "it follows that there exists @xmath19 such that @xmath193 and @xmath194 , and @xmath195 . from @xmath193",
    "follows that @xmath196 .",
    "it follows that @xmath197 and so by lemma  [ lemm.supp.restricted ] that @xmath198 .",
    "[ lemm.abstraction.support.x ] suppose @xmath34 is a permissive - nominal set and @xmath40 .",
    ".    then @xmath199x ) = { { \\ensuremath{\\text{$\\mathit{supp}$}}}}(x ) { \\setminus } { { \\ensuremath{\\text{$\\mathit{supp}$}}}}(l)$ ] .    by properties of the group action if @xmath200 then @xmath201x=[\\pi{{\\cdot}}l]\\pi{{\\cdot}}x$ ] .",
    "now suppose @xmath202 and choose any @xmath16 fresh ( so @xmath203 ) .",
    "it is easy to use lemma  [ lemm.supp.pi.x ] to verify that every @xmath204x$ ] satisfies @xmath205 whereas every @xmath206x$ ] satisfies @xmath207 .",
    "it follows that @xmath208x\\neq [ l]x$ ] and so by corollary  [ corr.notinsupp ] @xmath209x)$ ] .",
    "[ corr.lx.pns ] @xmath187{\\mathsf}x$ ] from definition  [ defn.abstraction.x ] _ is _ a permissive - nominal set .    that it is a set with a permutation action is clear . that every element has a supporting permission set follows from lemma  [ lemm.abstraction.support.x ] .",
    "[ lemm.at.l ] suppose @xmath34 is a permissive - nominal set .",
    "suppose @xmath210{\\mathsf}x|$ ] and @xmath186 is such that @xmath211 . then there exists a unique element , write it @xmath212 , such that @xmath213(\\hat x{\\mvat}l)$ ] .",
    "by lemma  [ lemm.equality.of.abstractions.x ] @xmath214 is unique if it exists .",
    "suppose @xmath215 . by construction ( definition  [ defn.abstraction.x ] ) @xmath216x'$ ] for some @xmath217 and @xmath218 . by construction ( definition  [ defn.l ] )",
    "@xmath219 for some @xmath19 .",
    "is composed of a single orbit under the permutation action . ]",
    "it is also a fact that since @xmath215 and ( by lemma  [ lemm.abstraction.support.x ] ) @xmath220 , we can suppose without loss of generality that @xmath221 .",
    "it follows that @xmath213\\pi^{\\ensuremath{{\\text{-}1}}}{{\\cdot}}x'$ ] and so @xmath214 exists and is equal to @xmath222 .",
    "[ lemm.factor.out ] suppose @xmath223{\\mathsf}x|$ ] .",
    "then for any @xmath181 such that @xmath224 ,  there exist @xmath225 such that @xmath226x_i$ ] for @xmath82 .",
    "we use lemma  [ lemm.at.l ] and take @xmath227 .      intuitively , @xmath5 ( definition  [ defn.pi.s ] ) is the ` smallest ' permutation to agree with @xmath19 on @xmath31 .",
    "@xmath5 is ` trying ' to be @xmath228 ( definition  [ defn.restrict ] ) but @xmath5 is a total function and furthermore is a permutation .",
    "the main result is theorem  [ thrm.leq.least ] , and we use @xmath5 in theorem  [ thrm.pull.out.l ] .    as nominal techniques demonstrate , permutations are an attractive way to handle name - binding .",
    "think of @xmath5 as a version of @xmath228 that we can use if we want to stay in the world of permutations .",
    "[ xmpl.pi/s ] suppose @xmath229 ( so @xmath19 maps @xmath15 to @xmath16 to @xmath18 to @xmath230 to @xmath231 to @xmath15 , and @xmath232 to @xmath233 to @xmath232 ) .",
    "then : @xmath234 suppose @xmath235 .",
    "then @xmath236    recall the definitions of @xmath237 and @xmath19 from definition  [ def.nontriv ] .",
    "[ defn.pi.s ] represent permutations @xmath19 as cycles ; so we write @xmath19 as a finite set of finite cycles indexed by @xmath238 where cycle number @xmath239 has length @xmath240 : @xmath241 define @xmath5 as that permutation obtained as follows :    delete from the cycle representation of @xmath19 above any atom @xmath15 such that @xmath242 .",
    "that is , if there is any part of a cycle of the form ` @xmath243 ' where @xmath244 , @xmath245 , and @xmath246 , then we replace it with ` @xmath247 ' .",
    "repeat , until we can not proceed .",
    "if there is any part of a cycle of the form ` @xmath248 ' where @xmath249 and @xmath250 but @xmath245 and @xmath246 , break the cycle into two subcycles as follows :  ` @xmath251 ' .    in words :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @xmath5 is obtained from @xmath19 by eliding sequences of three or more consecutive atoms not in @xmath31 , and then by splitting cycles at any two consecutive atoms not in @xmath31 . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    @xmath5 is well - defined .    at each step the size of @xmath252 reduces , so the rewrite system is terminating .",
    "it is not hard to check that rewrites are locally confluent .",
    "the result follows by newman s lemma @xcite .",
    "[ defn.pi|s ] define @xmath253 when :    @xmath254    @xmath255    for every cycle with atoms @xmath256 in @xmath23 , there is a cycle with atoms @xmath257 in @xmath19 such that @xmath258 .",
    "it is easy to verify that @xmath259 is a transitive reflexive relation .",
    "@xmath259 is not antisymmetric : if @xmath260 and @xmath261 and @xmath262 then @xmath263 and @xmath264 yet @xmath265 .",
    "[ thrm.leq.least ]    1 .",
    "@xmath5 is the unique @xmath259-least permutation beneath @xmath19 .",
    "2 .   as a corollary , @xmath266 and if @xmath267 and @xmath268 then @xmath269 .    by construction @xmath5 contains only those atoms , in the smallest possible cycles , necessary to agree with @xmath19 and @xmath270 on @xmath31 .",
    "given an interpretation @xmath173 and a list of atoms @xmath271 , we are interested in ` subtracting ' @xmath271 from the support of @xmath173 , in some sense .",
    "the main definition is definition  [ defn.f ] , which builds an interpretation with smaller support out of an interpretation . for",
    "the cases we care about , ` smaller support ' will mean finite support ; this will come later in lemmas  [ lemm.lx.ordinary ] and  [ lemm.lx.medium.ordinary ] , which are then used in theorems  [ thrm.fin.nonfin ] and theorem  [ thrm.pnl.fin.nonfin ] respectively .",
    "here , we give the relevant construction .",
    "[ defn.f ] given a signature @xmath107 ,  a @xmath107-interpretation @xmath173 ,  and a list @xmath272 construct a @xmath107-interpretation @xmath174{\\ensuremath{\\mathscr h}}$ ] as follows :    @r@  l@r@  l _ ^=&\\{[l]xl|l| ,  x_^ } + a^= & [ l](a^ )  ( @xmath71(l)a ) & f^([l]x ) = & [ l]f^(x ) + ( [ l]x_1,  ,[l]x_n)^= & [ l](x_1,  ,x_n)^ & [ a]^([l]x ) = & [ l]([a]^x ) + c^= & [ m]c^    a couple of comments on definition  [ defn.f ] :    the index @xmath271 of @xmath174{\\ensuremath{\\mathscr h}}$ ] is only used to interpret constants @xmath257 .",
    "we have to choose _ some _ list of atoms to abstract ",
    "if our language did not admit non - equivariant constants , as was the case for the original urban - pitts - gabbay syntax from @xcite or its permissive variant from e.g. @xcite , then we could just write @xmath187{\\ensuremath{\\mathscr h}}$ ] .    in the case of tuples ,",
    "we know we can write every element in the form @xmath4x_i$ ] for @xmath82 for some @xmath273 , by lemma  [ lemm.factor.out ] .    [ prop.f.finite.interpretation ] @xmath174{\\ensuremath{\\mathscr h}}$ ] from definition  [ defn.f ] is an interpretation .",
    "it is routine to check that every condition in definitions  [ defn.interpretation ] and  [ defn.sigma.interpretation ] is satisfied .",
    "the next step is to build valuations to @xmath174{\\ensuremath{\\mathscr h}}$ ] .",
    "this is definition  [ defn.l.varsigma ] and proposition  [ prop.varsigma.z.is.a.valuation ] .",
    "[ defn.l.varsigma ] suppose @xmath161 is a valuation to @xmath173 and @xmath186 .",
    "define @xmath4\\varsigma$ ] by :    ( [ l])(x ) = [ l]((x ) )    [ prop.varsigma.z.is.a.valuation ] if @xmath161 is a valuation to @xmath173 then @xmath4\\varsigma$ ] is a valuation to @xmath174{\\ensuremath{\\mathscr h}}$ ] .",
    "consider an unknown @xmath2 . by assumption @xmath274 and @xmath275 .",
    "by construction in definitions  [ defn.the.comb ] and  [ defn.abstraction.x ] ,  @xmath276 is finite so by lemma  [ lemm.abstraction.support.x ] ,  @xmath199\\varsigma(x))$ ] is finite .",
    "the result follows .",
    "theorem  [ thrm.pull.out.l ] ,  lemma  [ lemm.l.varsigma ] ,  and proposition  [ prop.commute.pi ] are three commutation results . in sections  [ sect.completeness.fin ] and  [ sect.pnl ]",
    "we will use these as the technical ` engine ' behind main theorems such as theorems  [ thrm.fin.nonfin ] and  [ thrm.pnl.fin.nonfin ] .",
    "first , we need a technical tool @xmath277 .",
    "we need this to express the side - condition @xmath278 in theorem  [ thrm.pull.out.l ] , and the side - condition @xmath279 in proposition  [ prop.commute.pi ] . without these side - condition",
    ", the results would not hold .",
    "[ defn.atomsof ] define @xmath277 inductively by :    r@  l@r@  l @xmath280(a)=&\\{a } & @xmath280(f(r))=&@xmath280(r ) + @xmath280(c)=&@xmath281(/@xmath118(c ) ) & @xmath280((r_1, ",
    ",r_n))=&@xmath280(r_i ) + @xmath280(x)=&@xmath281(/a^_^ < ) & @xmath280([a]r)= & @xmath280(r)\\{a }    @xmath277 collects the atoms ` explicit ' in @xmath116 . contrast this with ` free atoms of ' @xmath282 from definition  [ defn.fa ] which collects the atoms ` potentially ' in @xmath116 .",
    "for instance , @xmath283 and is infinite , but @xmath284 .",
    "this is because @xmath2 mentions no atoms explicitly , but intuitively it could be instantiated for any term with atoms in @xmath285 .",
    "recall from definition  [ defn.l ] the construction of @xmath178 , parameterised over some @xmath179 .",
    "[ thrm.pull.out.l ] suppose @xmath186 and @xmath286",
    ". then @xmath287\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[l]{\\ensuremath{\\mathscr h}}$ } } } = [ l]{\\llbracket r \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}$ ] .",
    "by induction on @xmath116 :    * _ _ the case @xmath15.__we reason as follows : + a _ ^ = & [ l]a^ & ,  a@xmath71(l ) + = & [ l]a _ ^ & + we know @xmath288 because we assumed @xmath278 , and @xmath289 . * _ _ the case @xmath122.__we reason as follows : + x _ ^= & [ l](x ) & + = & ( /a^_^<)[l](x ) & + = & [ l](/a^_^<)(x ) & + = & [ l](x ) & + = & [ l]x _ ^ & + the fact above follows since we assumed @xmath290 . * _ _ the case @xmath69r$ ] , where @xmath291.__we reason as follows : + r _ ^ = & [ a]^r _ ^ & + = & [ a]^[l]r _ ^ & + = & [ l]([a]^r _ ^ ) & + = & [ l]r _ ^ & * _ _ the case @xmath292.__we reason as follows : + c _",
    "^ = & [ l]c^ & + = & ( /@xmath118(c))[l]c^ & + = & [ l](/@xmath118(c))c^ & + = & [ l]c^ & + = & [ l]c _ ^ & + the fact above follows since we assumed @xmath293 .",
    "* _ _ the case @xmath294.__we reason as follows : + ( r_1,  ,r_n ) _ ^ = & ( r_1 _ ^,  ,r_n _ ^)^ & + = & ( [ l]r_1 _ ^,  ,[l]r_n _ ^)^ & + = & [ l](r_1 _ ^,  ,r_n _ ^)^ & + = & [ l](r_1,  ,r_n ) _ ^ & * _ the case @xmath295  _ is routine .      [ defn.varsigma.xx ] given an interpretation @xmath173 , a valuation @xmath161 to @xmath173 , and some @xmath2 and @xmath296 with @xmath297 , define @xmath298 $ ] by : @xmath299(x)=x\\qquad \\varsigma[x{:=}x](y)=\\varsigma(y)\\ ] ]    [ lemm.l.varsigma ] suppose @xmath161 , @xmath2 , and @xmath48 are as in definition  [ defn.varsigma.xx ] .",
    ". then @xmath300\\varsigma)[x{{:= } } [ l]x ] ) = [ l](\\varsigma[x{{:= } } x]).\\ ] ]    by routine calculations .",
    "[ defn.varsigma.pi ] suppose @xmath161 is a valuation .",
    "suppose @xmath19 is a permutation such that @xmath301 .",
    "define @xmath302 by    ( ) ( x)=(x ) .",
    "[ prop.commute.pi ] suppose @xmath301 and @xmath279",
    ". then @xmath303 .    by a routine induction on @xmath116 similar to that in theorem  [ thrm.pull.out.l ] :    _ _ the case @xmath15.__by assumption @xmath304 .",
    "_ _ the case @xmath305.__by assumption @xmath306 . since @xmath301 it is a fact that @xmath307",
    ". the result follows .    _ _ the case @xmath69r$ ] , where @xmath291.__by assumption @xmath304 .    _ _ the case @xmath308.__as for @xmath305 .    _ the cases",
    "@xmath294 and @xmath295  _ are routine .",
    "we now have everything we need to set up two notions of validity @xmath309 and @xmath310 ( definition  [ defn.m.ment.fin ] ) and prove our main result , that they are equal ( theorem  [ thrm.fin.nonfin ] ) .",
    "suppose @xmath116 and @xmath141 are terms in @xmath107 , which is the signature of an interpretation @xmath173 .",
    "write @xmath311 when @xmath312 .",
    "write @xmath171 when @xmath311 for every valuation @xmath161 to @xmath173 .",
    "[ nttn.last.permission.set ] for the rest of this section , we will take @xmath179 from definition  [ defn.l ] to enumerate all of @xmath120 .",
    "we write the @xmath178 so generated by definition  [ defn.l ] as @xmath313 .",
    "recall the construction of @xmath174{\\ensuremath{\\mathscr h}}$ ] from definition  [ defn.f ] .",
    "[ prop.ft ] suppose @xmath116 and @xmath141 are terms in @xmath107 , which is the signature of an interpretation @xmath173 .",
    "suppose @xmath314 .",
    "then :    if @xmath315 then @xmath174{\\ensuremath{\\mathscr h}}\\not{\\vdash}r = s$ ] .    if @xmath171 then @xmath174{\\ensuremath{\\mathscr h}}{\\vdash}r = s$ ] .    for",
    "the first part , suppose @xmath315 .",
    "so there exists a valuation @xmath161 to @xmath173 such that @xmath316 .",
    "choose some @xmath181 such that @xmath317 .",
    "we can do this , because @xmath277 and @xmath318 are finite . by theorem  [ thrm.pull.out.l ] @xmath287\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[m]{\\ensuremath{\\mathscr h}}$}}}=[l]{\\llbracket r \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}$ ] and @xmath319\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[m]{\\ensuremath{\\mathscr h}}$}}}=[l]{\\llbracket s \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}$ ] . by lemma  [ lemm.equality.of.abstractions.x ] @xmath4{\\llbracket r \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}\\neq [ l]{\\llbracket s \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}$ ] .",
    "it follows that @xmath287\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[m]{\\ensuremath{\\mathscr h}}$}}}\\neq{\\llbracket s \\rrbracket_{\\scalebox{.6}{$[l]\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[m]{\\ensuremath{\\mathscr h}}$}}}$ ] .",
    "for the second part , suppose that @xmath171 and suppose @xmath320 is a valuation to @xmath174{\\ensuremath{\\mathscr h}}$ ] .",
    "choose some @xmath321 such that @xmath322 we can do this since all the sets on the right - hand side of @xmath323 are finite .    using lemmas",
    "[ lemm.factor.out ] and  [ lemm.fv.varsigma ] there exists a valuation @xmath161 to @xmath173 such that @xmath324{\\ensuremath{\\mathscr h}}$}}}={\\llbracket r \\rrbracket_{\\scalebox{.6}{$[l]\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[m]{\\ensuremath{\\mathscr h}}$}}}$ ] and @xmath325{\\ensuremath{\\mathscr h}}$}}}={\\llbracket s \\rrbracket_{\\scalebox{.6}{$[l]\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[m]{\\ensuremath{\\mathscr h}}$}}}$ ] .",
    "we now reason using theorem  [ thrm.pull.out.l ] and lemma  [ lemm.equality.of.abstractions.x ] , as in the first part .",
    "the model @xmath174{\\ensuremath{\\mathscr h}}$ ] is composed of ordinary  i.e . finitely - supported ",
    "nominal sets , in the sense of @xcite :    [ lemm.lx.ordinary ] every @xmath4x\\in{{\\llbracket \\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[m]{\\ensuremath{\\mathscr h}}$}}}}$ ] has finite support .",
    "it suffices to observe lemma  [ lemm.abstraction.support.x ] and note that by assumption @xmath46 is contained in a permission set , and by assumption in notation  [ nttn.last.permission.set ] @xmath183 is a permission set , and by construction permission sets differ finitely from one another .",
    "definition  [ defn.pernat ] is standard , e.g. from @xcite ( nominal ) or @xcite ( permissive - nominal ) :    [ defn.pernat ] a * ( permissive-)nominal algebra theory * @xmath326 is a pair of a signature @xmath107 and a set of equality axioms @xmath327 .",
    "( so elements of @xmath327 are pairs @xmath328 . )    suppose @xmath173 is a @xmath107-interpretation ( definition  [ defn.sigma.interpretation ] ) .",
    "write @xmath329 to mean that for every valuation @xmath161 to @xmath173 and every @xmath330 ,  @xmath312 .",
    "[ defn.interp.finsupp ] suppose @xmath107 is a signature and @xmath331 is a @xmath107-interpretation .",
    "say that @xmath331 has * finite support * when for every sort @xmath3 in @xmath107 and every @xmath332 , it is the case that @xmath46 is finite .",
    "[ defn.m.ment.fin ] suppose @xmath326 is a theory .",
    "then :    define @xmath333 to mean that @xmath334 implies @xmath335 , for every @xmath107-interpretation @xmath331 with finite support .",
    "define @xmath336 to mean that @xmath329 implies @xmath171 , for every @xmath107-interpretation @xmath173 .",
    "[ thrm.fin.nonfin ] suppose that @xmath337 is a @xmath107-theory .",
    "then @xmath338 if and only if @xmath172 .",
    "the right - to - left implication is immediate since an interpretation with finite support is an interpretation .    for the left - to - right implication",
    "we prove the contrapositive .",
    "suppose @xmath339 .",
    "so there is an interpretation @xmath173 such that @xmath329 and a valuation @xmath161 to @xmath173 such that @xmath316 .",
    "choose any @xmath314 . by part  2 of proposition  [ prop.ft ] @xmath174{\\ensuremath{\\mathscr h}}{\\vdash}{\\ensuremath{\\mathsf{t}}}$ ] . by part  1 of proposition  [ prop.ft ] @xmath174{\\ensuremath{\\mathscr h}}\\not{\\vdash}r = s$ ] , and by lemma  [ lemm.lx.ordinary ] we are done .",
    "permissive - nominal algebra is sound and complete with respect to permissive - nominal models ( the proof is by a herbrand construction ; see ( * ? ? ? * subsection  7.5 ) ) .",
    "so the relevance of theorem  [ thrm.fin.nonfin ] is to give completeness also with respect to interpretations with finite support .",
    "permissive - nominal logic ( * pnl * ) extends signatures with * proposition - formers * @xmath340 with arity @xmath3 .",
    "it is ` first - order logic over ( permissive-)nominal terms ' .",
    "full details can be found in @xcite or ( * ? ? ?",
    "* section  9 ) . here , we only give the necessary outline .",
    "pnl * propositions * are defined by    , : : = x.p(r )    where we insist that @xmath164 ( where @xmath3 is the arity of @xmath340 ) .",
    "[ defn.u.equivariant ] if @xmath34 is a nominal set and @xmath341 call @xmath342 * equivariant * when @xmath343 for all @xmath40 and all permutations @xmath19 .",
    ", if we consider @xmath342 as a function to truth - values @xmath344 , such that @xmath345 and @xmath346 for all @xmath19 . ]",
    "definition  [ defn.phi.interp ] corresponds to e.g. ( * ? ? ?",
    "* definition  5.11 ) .",
    "[ defn.phi.interp ] an interpretation @xmath173 maps a term to an element of a permissive - nominal set as in definition  [ defn.interpret.terms ] , and maps each @xmath340 to an equivariant subset @xmath347 .",
    "this extends to propositions @xmath348 just as in first - order logic where @xmath349 is a truth - value @xmath350 or @xmath351 , as follows :    @xmath352 ( the syntax ) is equal to @xmath351 ( the truth - value ) .",
    "the pnl of @xcite is classical , so @xmath353 is interpreted as ` not @xmath349 or @xmath354 ' .",
    "@xmath355 is equal to ` @xmath356 is an element of @xmath357 ' .",
    "the only non - obvious case is the universal quantifier , which gets a denotation as follows : @xmath358$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$ } } } \\mid x\\in{{\\llbracket { { \\ensuremath{\\text{$\\mathit{sort}$}}}}(x ) \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}},\\ { { \\ensuremath{\\text{$\\mathit{supp}$}}}}(x)\\subseteq{{\\mathbb a^{\\hspace{-.3ex}{}_{{}^<}}}}\\}\\ ] ] this is non - obvious because the @xmath359 in @xmath360 quantifies only over @xmath48 with support in @xmath285 . more discussion on this in the conclusions .",
    "three distinct notions of validity will interest us .",
    "they are parameterised by ` how many atoms ' they allow in support .",
    "this is definition  [ defn.medium.valid ] ; to express it , we need definition  [ defn.medium ] .",
    "[ defn.medium ] for each @xmath8 fix some set @xmath361 such that @xmath362 and @xmath363 are both infinite .",
    "write @xmath364 and :    say that @xmath365 has * medium * support when @xmath366 for some @xmath19 .",
    "say that @xmath173 has * medium * support when for every sort @xmath3 and every @xmath365 ,  @xmath48 has medium support .",
    "the point of definition  [ defn.medium ] is that @xmath48 with medium support may have infinite support , but this support can not exhaust the atoms in @xmath120 . but did we not see this already in definition  [ defn.atoms ] when we split @xmath0 into @xmath120 and @xmath367 ?",
    ", but pnl has a @xmath359 , so that now ( and unlike was the case in permissive - nominal algebra ) we have to worry about exhausting all the atoms in @xmath120 within nested quantifiers .",
    "to see this idea made concrete , consider the proof of proposition  [ prop.not.necessarily ] .",
    "[ defn.medium.valid ]    write @xmath368 to mean that @xmath369 for every interpretation @xmath173 and valuation @xmath161 to @xmath173 .",
    "write @xmath370 to mean that @xmath371 for every interpretation @xmath173 with medium support and valuation @xmath161 to @xmath173 .",
    "write @xmath372 to mean that @xmath373 for every interpretation @xmath331 with finite support and valuation @xmath161 to @xmath331 .",
    "[ prop.not.necessarily ] @xmath368 implies @xmath370 .",
    "the reverse implication does not necessarily hold .",
    "the first part is immediate since an interpretation with medium support is also an interpretation .    for the second part it suffices to provide a counterexample .",
    "suppose a base sort @xmath99 and name sort @xmath91 and variables @xmath374 and @xmath375 .",
    "suppose a predicate @xmath376 with intended meaning ` is fresh for'/`is not in the support of ' .",
    "consider the formula @xmath377 .",
    "then @xmath372 and @xmath370 , but not @xmath368 ; it might be that @xmath378 where @xmath181 lists all atoms in @xmath120 , so there exists no atom in @xmath120 ( by definition  [ defn.phi.interp ] , @xmath379 ranges over atoms in @xmath120 ) that is not in @xmath183 .",
    "the rest of this section is devoted to proving that @xmath370 if and only if @xmath372 ( theorem  [ thrm.pnl.fin.nonfin ] ) .",
    "we discuss the relevance of these results in subsection  [ subsect.pnl.relevance ] .",
    "[ nttn.last.medium.set ] for the rest of this section , we will take @xmath179 from definition  [ defn.l ] to enumerate @xmath380 .",
    "we write the @xmath178 generated by definition  [ defn.l ] as @xmath381 .",
    "[ defn.fmi ] given a pnl interpretation @xmath173 with medium support and a list @xmath382 , generate a pnl interpretation @xmath174{\\ensuremath{\\mathscr h}}$ ] by extending definition  [ defn.f ] such that    p^ = \\{[l]x xp^ ,  l|l^| } .    where does the @xmath271 in @xmath174{\\ensuremath{\\mathscr h}}$ ] appear on the right - hand side here ? it does not : @xmath271 is only used to reduce the support of the interpretations of constant symbols ; see definition  [ defn.f ] .",
    "pnl only allows equivariant ( definition  [ defn.u.equivariant ] ) interpretation of proposition - formers .",
    "if we considered a flavour of pnl in which proposition - formers could receive non - equivariant interpretation ( so that in the syntax we would allow terms of the form @xmath383 ) , then definition  [ defn.fmi ] would mention @xmath271 on the right .",
    "this makes no difference to expressivity since we can emulate the effect of a non - equivariant proposition - former using @xmath384 .",
    "our design follows the path of the simplest definitions and proofs .",
    "[ lemm.lx.medium.ordinary ] every @xmath4x\\in{{\\llbracket \\alpha \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[m]{\\ensuremath{\\mathscr h}}$}}}}$ ] has finite support .    as for lemma  [ lemm.lx.ordinary ] , but now using notation  [ nttn.last.medium.set ] and our assumption that @xmath365 has medium support .",
    "[ defn.pnl.atoms ] extend @xmath277 ( definition  [ defn.atomsof ] ) to propositions @xmath385 inductively by :    r@  l@r@  l @xmath280()= & & @xmath280()=&@xmath280()@xmath280 ( ) + @xmath280(p(r))=&@xmath280(r ) & @xmath280(x.)=&@xmath280 ( )    lemma  [ lemm.pnl.pi ] extends proposition  [ prop.commute.pi ] to predicates , and is needed for proposition  [ prop.pnl.mentfin.to.ment ] .",
    "recall from definition  [ defn.varsigma.pi ] the definition of @xmath302 :    [ lemm.pnl.pi ] suppose @xmath161 is a valuation to an interpretation @xmath173 .",
    "suppose @xmath348 is a predicate and @xmath19 a permutation such that @xmath301 and @xmath386",
    ".    then @xmath387 .    by a routine induction on @xmath348 .",
    "we consider two cases :    _ the case of @xmath388 .",
    "_ by definition @xmath389 if and only if @xmath390 . by proposition  [ prop.commute.pi ] @xmath303 . by assumption @xmath357 is equivariant ( definition  [ defn.u.equivariant ] ) .    _ _ the case of @xmath360.__@xmath391$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}\\mid x\\in{\\llbracket { { \\ensuremath{\\text{$\\mathit{sort}$}}}}(x ) \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}},\\ { { \\ensuremath{\\text{$\\mathit{supp}$}}}}(x)\\subseteq{{\\mathbb a^{\\hspace{-.3ex}{}_{{}^<}}}}\\ } \\\\",
    "= & \\bigwedge\\{{\\llbracket \\phi \\rrbracket_{\\scalebox{.6}{$(\\pi{{\\circ}}\\varsigma)[x{{:=}}\\pi{{\\cdot}}x]$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}\\mid x\\in{\\llbracket { { \\ensuremath{\\text{$\\mathit{sort}$}}}}(x ) \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}},\\ { { \\ensuremath{\\text{$\\mathit{supp}$}}}}(x)\\subseteq{{\\mathbb a^{\\hspace{-.3ex}{}_{{}^<}}}}\\ } \\\\ = & \\bigwedge\\{{\\llbracket \\phi \\rrbracket_{\\scalebox{.6}{$\\pi{{\\circ}}(\\varsigma[x{{:=}}x])$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}\\mid x\\in{\\llbracket { { \\ensuremath{\\text{$\\mathit{sort}$}}}}(x ) \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}},\\ { { \\ensuremath{\\text{$\\mathit{supp}$}}}}(x)\\subseteq{{\\mathbb a^{\\hspace{-.3ex}{}_{{}^<}}}}\\ } \\\\",
    "= & \\bigwedge\\{{\\llbracket \\phi \\rrbracket_{\\scalebox{.6}{$\\varsigma[x{{:=}}x]$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}\\mid x\\in{\\llbracket { { \\ensuremath{\\text{$\\mathit{sort}$}}}}(x ) \\rrbracket_{\\scalebox{.6}{$$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}},\\ { { \\ensuremath{\\text{$\\mathit{supp}$}}}}(x)\\subseteq{{\\mathbb a^{\\hspace{-.3ex}{}_{{}^<}}}}\\ } \\\\",
    "= & { \\llbracket { \\forall x.}\\phi \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$ } } } \\end{array}\\ ] ]    [ lemm.fa.atoms.bound ] @xmath392 and @xmath393 .    by a routine induction on definitions  [ defn.atomsof ] and  [ defn.pnl.atoms ] and by a routine calculation using part  2 of theorem  [ thrm.leq.least ] for the base case of @xmath122 .",
    "[ prop.pnl.mentfin.to.ment ] suppose @xmath348 is a proposition ,  @xmath173 is a pnl interpretation with medium support ( definition  [ defn.medium ] ) ,  and @xmath161 is a valuation to @xmath173 .",
    "suppose @xmath29 is a finite set of atoms such that @xmath394 , and suppose @xmath395 and @xmath396 .",
    "then @xmath369 if and only if @xmath4{\\ensuremath{\\mathscr h}},[l]\\varsigma{\\vdash}\\phi$ ] .    by induction on @xmath348 .",
    "we consider a selection of cases :    * _ _ the case of @xmath388.__we consider the two implications separately .",
    "+ @xmath397   suppose @xmath4{\\ensuremath{\\mathscr h}},[l]\\varsigma{\\vdash}{\\mathsf{p}}(r)$ ] .",
    "this means that @xmath287\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[l]{\\ensuremath{\\mathscr h}}$}}}\\in{\\mathsf{p}}^{{{\\hspace{-.1ex}\\scalebox{.65}{$[l]{\\ensuremath{\\mathscr h}}$}}}}$ ] . by theorem  [ thrm.pull.out.l ]",
    "@xmath287\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[l]{\\ensuremath{\\mathscr h}}$}}}=[l]{\\llbracket r \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}$ ] ( note that @xmath398 ) , and so by definitions  [ defn.fmi ] and  [ defn.abstraction.x ] @xmath399 for some @xmath400 .",
    "by equivariance of @xmath357 it immediately follows that @xmath401 and so that @xmath402 .",
    "+ @xmath403   now suppose @xmath402 , so that by definition @xmath404 . as in the previous paragraph by theorem  [ thrm.pull.out.l ] @xmath4{\\llbracket r \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}}={\\llbracket r \\rrbracket_{\\scalebox{.6}{$[l]\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[l]{\\ensuremath{\\mathscr h}}$}}}$ ] .",
    "it follows by definition  [ defn.pnl.atoms ] that @xmath287\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{$[l]{\\ensuremath{\\mathscr h}}$}}}\\in{\\mathsf{p}}^{{{{\\hspace{-.1ex}\\scalebox{.65}{$[l]{\\ensuremath{\\mathscr h}}$}}}}}$ ] .",
    "* _ _ the case of @xmath360.__again we consider the two implications separately : + @xmath397suppose @xmath405 .",
    "unpacking definitions , this means there is some @xmath406 with @xmath297 and @xmath407\\not{\\vdash}\\phi$ ] . + by inductive hypothesis @xmath4{\\ensuremath{\\mathscr h}},[l](\\varsigma[x{{:= } } x])\\not{\\vdash}\\phi$ ] .",
    "we can use lemma  [ lemm.l.varsigma ] to write @xmath4(\\varsigma[x{{:=}}x])$ ] as @xmath408\\varsigma)[x{{:= } } [ l]x]$ ] .",
    "furthermore , by assumption @xmath409 so by lemma  [ lemm.abstraction.support.x ] @xmath199x)\\subseteq{\\mathbb a^{\\hspace{-.3ex}{}_{{}^<}}}\\setminus{{\\ensuremath{\\text{$\\mathit{supp}$}}}}(l)\\subseteq{\\mathbb a^{\\hspace{-.3ex}{}_{{}^<}}}$ ] .",
    "it follows by definition  [ defn.phi.interp ] that @xmath4{\\ensuremath{\\mathscr h}},[l]\\varsigma\\not{\\vdash}{\\forall x.}\\phi$ ] .",
    "+ @xmath403suppose @xmath4{\\ensuremath{\\mathscr h}},[l]\\varsigma\\not{\\vdash}{\\forall x.}\\phi$ ] . unpacking definition  [ defn.phi.interp ]",
    "this means there are @xmath410 and @xmath411 such that @xmath412x')\\subseteq{{\\mathbb a^{\\hspace{-.3ex}{}_{{}^ < } } } } \\quad\\text{and}\\quad   [ l]{\\ensuremath{\\mathscr h}},([l]\\varsigma)[x{{:=}}[l']x']\\not{\\vdash}\\phi.\\ ] ] if @xmath413x')\\cap{{\\ensuremath{\\text{$\\mathit{supp}$}}}}(l)=\\varnothing$ ] then we may use lemma  [ lemm.at.l ] and write @xmath414x'$ ] as @xmath4(([l']x'){\\mvat}l)$ ] and deduce by inductive hypothesis that @xmath415 .",
    "+ otherwise , we choose some @xmath23 that maps @xmath413x')\\cap{{\\ensuremath{\\text{$\\mathit{supp}$}}}}(l)\\neq\\varnothing$ ] to a set of atoms in @xmath285 that is disjoint from @xmath416 , and @xmath23 fixes all other atoms .",
    "this is possible because by construction @xmath413x')$ ] is finite and @xmath417 is infinite ( recall that @xmath418 is assumed infinite ) . using lemma  [ lemm.pnl.pi ] @xmath419{\\ensuremath{\\mathscr h}},([l]\\varsigma)[x{{:=}}\\pi'{{\\cdot}}([l']x')]\\not{\\vdash}\\phi.\\ ] ] we now proceed as in the case where @xmath413x ' ) \\cap { { \\ensuremath{\\text{$\\mathit{supp}$}}}}(l ) = \\varnothing$ ] .",
    "* _ _ the case of @xmath420.__suppose @xmath421 .",
    "this means that @xmath415 or @xmath422 . by inductive hypothesis",
    "this is if and only if @xmath4{\\ensuremath{\\mathscr h}},[l]\\varsigma\\not{\\vdash}\\phi$ ] or @xmath4{\\ensuremath{\\mathscr h}},[l]\\varsigma{\\vdash}\\psi$ ] . in either case @xmath4{\\ensuremath{\\mathscr h}},[l]\\varsigma{\\vdash}\\phi{{\\rightarrow}}\\psi$ ] ,",
    "and we are done .",
    "[ thrm.pnl.fin.nonfin ] @xmath372 if and only if @xmath370 .    the right - to - left implication is immediate , just as in theorem  [ thrm.fin.nonfin ] .",
    "the left - to - right implication follows using proposition  [ prop.pnl.mentfin.to.ment ] and lemma  [ lemm.lx.medium.ordinary ] .",
    "it will help to establish some new terminology :    suppose @xmath34 is a set with a permutation action and @xmath40 .",
    "say the element @xmath40 is * finite - namespace * when @xmath46 is finite .",
    "similarly say @xmath34 is finite - namespace when every @xmath40 has finite support .",
    "this is synonymous with @xmath34 being a nominal set in the sense of @xcite ; cf .",
    "also definition  [ defn.interp.finsupp ] .",
    "say @xmath48 is * @xmath380-namespace * when @xmath366 for some @xmath19 .",
    "similarly say that @xmath34 is @xmath380-namespace when every @xmath40 is @xmath380-namespace .",
    "this is synonymous with _",
    "medium _ support from definition  [ defn.medium ] .",
    "say @xmath48 is * @xmath120-namespace * when @xmath423 for some @xmath19 .",
    "similarly say that @xmath34 is * @xmath120-namespace * when every @xmath40 is @xmath380-namespace .",
    "this is synonymous with @xmath34 being a permissive - nominal set in the sense of definition  [ defn.nominal.set ] or @xcite .",
    "similarly we will call interpretations finite - namespace , @xmath380-namespace , and @xmath120-namespace in accordance with the support of their underlying sets .",
    "the relevance of theorem  [ thrm.pnl.fin.nonfin ] is that a pnl predicate is valid over @xmath380-namespace interpretations if and only if it is valid over finite - namespace interpretations .- namespace interpretations ( and thus also not valid of all @xmath120-namespace interpretations ) . nominal logic , of course , is a first - order theory ; an axiomatisation in first - order logic similar to the axiomatisation of fraenkel - mostowski sets from which it is descended .",
    "what makes the languages of this paper different is that they are purpose - built using the dedicated new syntax of ( permissive-)nominal terms .",
    "]    the pnl of @xcite has a sequent system giving a notion of logical entailment which is proved sound and complete for @xmath309 , that is , for the collection of @xmath120-namespace interpretations .",
    "this differs from the validity @xmath424 , which is validity over @xmath380-namespace interpretations ( those with medium support ) .",
    "this is a more restricted class of models .",
    "medium support is a new idea to the theory of pnl .",
    "when models are restricted , more statements become valid ( usually ) . in this case",
    "we get a family of theorems , which is exemplified by proposition  [ prop.not.necessarily ] .",
    "it remains to devise a complete proof system for pnl over medium support .",
    "we would not speculate on whether large or medium support is ` better ' ; we suspect that the situation is similar to the intuitionistic / classical question of whether to allow double negation elimination : sometimes we may want it and sometimes we may not .",
    "the value of theorem  [ thrm.pnl.fin.nonfin ] is that it tells us that @xmath380 is as small as we need go in exploring validity : restricting models of pnl further to smaller namespaces , and in particular to finite support , will not give us any extra valid propositions . as we shall argue in the conclusions , working with sets with infinite support",
    "is often easier than working with sets with finite support , so this matters .    and",
    "note the obvious : once we carried out our constructions and applied them to permissive - nominal algebra , we could re - use them for permissive - nominal logic with a relatively slight effort of two pages of mathematics in subsection  [ subsect.fin.med ] .",
    "in definition  [ defn.the.comb ] we followed @xcite and took permission sets to be sets of the form @xmath32 .",
    "this captures a simple assertion language about the atoms permitted in unknowns .",
    "the results in this paper are sensitive to the expressivity of this language : if we make it slightly more powerful then the results in this paper fail .",
    "if we follow e.g. @xcite and take permission sets to be sets of the form @xmath425 where @xmath426 and @xmath427 are finite , then the results in this paper fail .",
    "this genuinely enlarges the set of permission sets ( and so makes the assertion language which they represent , more expressive ) .",
    "for instance , if @xmath428 then there is no finite permutation @xmath19 such that @xmath429 .",
    "write @xmath430 for the set of all sets of atoms differing finitely from @xmath120 as just described .",
    "[ prop.upgrade.zero.fail ] there exists a theory @xmath431 in permissive - nominal algebra with permission sets from @xmath432 , and an assertion @xmath433 in that theory , such that @xmath434 and @xmath435 ( where models are permissive - nominal sets with permission sets in @xmath432 ) .",
    "assume one base type @xmath99 and one term former @xmath436 with @xmath437 .",
    "assume an axiom @xmath438 where @xmath439 .",
    "assume an unknown @xmath440 with @xmath441 and @xmath442 where @xmath428 .",
    "then :    * @xmath443 .",
    "+ for suppose @xmath331 is an interpretation of @xmath337 with finite support : then for any @xmath444 , there is some finite @xmath19 with @xmath445 , hence by our single axiom @xmath446 and by equivariance @xmath447 , since @xmath448 has empty support .",
    "* however , @xmath449 .",
    "+ to see this , interpret @xmath99 to be the set @xmath450 , interpret @xmath448 by @xmath451 , and take @xmath452 .",
    "initially we used @xmath430 ; notably in @xcite .",
    "however , in later papers such as @xcite we preferred the design of definition  [ defn.the.comb ] because it seemed to make some proofs easier to express . in the light of the results of this paper we can",
    "now better understand the significance of our design choices : proposition  [ prop.upgrade.zero.fail ] suggests that our design in definition  [ defn.the.comb ] is mathematically more elementary and somewhat closer to the design ` nominal terms + finitely - supported nominal sets ' from the previous literature .",
    "that is , the design of definition  [ defn.the.comb ] and @xcite is the closest ` permissive ' version of traditional nominal techniques , and the design of @xcite is slightly but measurably more expressive .      in the presence of infinite permutations , the results in this paper fail .",
    "we sketch the mathematics involved , starting with a justification of why infinite permutations are an interesting case to consider",
    ".    for simplicity assume a single sort of atom .",
    "[ defn.shift ] suppose @xmath453 and @xmath454 .",
    "assume a bijection @xmath455 on atoms mapping @xmath120 to @xmath456 and such that @xmath457 is infinite ( we can do this because we assumed that @xmath0 is countable ) .",
    "we illustrate an example : @xmath458 &   a_{{\\text{-}}5 } \\ar@/^1pc/@{<-}[r ] &   a_{{\\text{-}}4 } \\ar@/^1pc/@{<-}[r ] &   a_{{\\text{-}}3 } \\ar@/^1pc/@{<-}[r ] &   a_{{\\text{-}}2 } \\ar@/^1pc/@{<-}[r ] &   a_{{\\text{-}}1 } \\ar@/^1pc/@{<-}[r ] &   a \\ar@/^1pc/@{<-}[rr ] &   a_{1 } \\ar@(ld , rd ) &   a_{2 } \\ar@/^1pc/@{<-}[rr ] &   a_{3 } \\ar@(ld , rd ) &   a_{4 } \\ar@/^1pc/@{<-}[rr ] &   a_{5 } \\ar@(ld , rd ) & a_{6 } } $ } \\ ] ] call @xmath455 a * shift*-permutation .",
    "@xmath455 has a measurable and favourable effect on the mathematics and algorithmics of nominal syntax .",
    "for instance :    * @xmath455 nontrivially increases the deductive power of @xmath359 in pnl ( * ? ? ?",
    "* subsection  2.7 ) .",
    "+ if @xmath439 where @xmath459 then @xmath460 does not entail @xmath461 without @xmath455 , but it _ does _ entail @xmath461 _ with _ @xmath455 ( for @xmath462 having an appropriate arity ) .",
    "this extra power is irrelevant if we only care about finitely - supported models , which is why the issue has not arisen in previous work . *",
    "_ shift_-permutations can be used to obtain a particularly concise unification algorithm ( * ? ? ?",
    "* section  4 ) .    for",
    "more discussion see ( * ? ? ?",
    "* subsection  3.6 ) .",
    "this extra power is not particularly expensive : we can do what we are used to in nominal techniques , in the presence of @xmath455 .",
    "indeed , the results of @xcite are parameterised over a permutation group general enough to admit @xmath455 because this was _ easier _ than excluding it .",
    "in particular the specific design of the nominal unification algorithm and hsp result there , are shorter and simpler because of their use of @xmath455 .    however , in the presence of @xmath455 the results of this paper fail .",
    "proposition  [ prop.upgrade.fail ] gives an example of a signature for which permissive - nominal algebra @xmath309 ( all permissive - nominal models ) is complete , but @xmath310 ( models with finite support ) are not . in order to state this result",
    "we must ` upgrade ' the material in this paper with @xmath455 .    to augment sections  [ sect.perns ] and  [ sect.nominal.terms.syntax ] with a shift permutation @xmath455",
    ", we proceed as follows :    in definition  [ def.permutation ] permutations are finitely generated by swappings _ and _ @xmath455 ( they remain finitely representable , but @xmath237 is now not always finite ) .",
    "write @xmath463 for the group of bijections generated by swappings and @xmath455 .    in definition  [ defn.perm.set ]",
    "assume the permutation action has type @xmath464 .",
    "so permissive - nominal sets have an action by swappings and @xmath455 .    in definition  [ defn.support ]",
    "we say that @xmath29 supports @xmath41 when for every permutation @xmath465 , if @xmath43 for all @xmath44 then @xmath45.[multiblock footnote omitted ]    in the examples of subsection  [ subsect.pn.sets.examples ] extend for the extra permutations in the natural way .",
    "so @xmath66 for @xmath465 and @xmath466x=[\\pi(a)]\\pi{{\\cdot}}x$ ] for @xmath465 .    in definition  [ defn.terms ]",
    "extend terms also with the extra permutations .",
    "so @xmath122 is a term for @xmath465 .",
    "the permutation action definition  [ defn.fa ] extends in the natural way .    we extend the notion of equivariance ( definition  [ defn.f.equivar ] ) with the extra permutations .",
    "so @xmath143 is _ equivariant _ when @xmath144 for all permutations @xmath465 and @xmath40 . *",
    "finite equivariance*. it is possible to be equivariant for finite permutations but not for @xmath455 .",
    "the proof of proposition  [ prop.upgrade.fail ] will depend on this . ]",
    "[ prop.upgrade.fail ] there exists a theory @xmath431 in permissive - nominal algebra with @xmath467 , and an assertion @xmath433 in that theory , such that @xmath434 and @xmath435 ( where models are permissive - nominal sets with @xmath467 ) .",
    "assume no term - formers and one base type @xmath99 .",
    "assume @xmath459 and a shift permutation @xmath455 bijecting @xmath120 with @xmath456 , as illustrated just after definition  [ defn.shift ] .",
    "assume an axiom @xmath468 where @xmath469 .",
    "then :    if @xmath331 is a model of @xmath337 with finite support then @xmath470 for every @xmath444 . for suppose there exists @xmath48 with @xmath471 . by equivariance",
    "we may ( apply a permutation to @xmath48 to ) assume without loss of generality that @xmath472 .    now choose some @xmath473 and",
    "choose some @xmath19 mapping @xmath46 to a subset of @xmath120 and such that specifically @xmath474 .",
    "by our axiom , @xmath475 .",
    "it follows by calculations on permutations that @xmath476 and so by corollary  [ corr.notinsupp ] that @xmath477 , a contradiction .",
    "thus , @xmath478 .",
    "@xmath479 . to see this consider the elements @xmath480 with the pointwise action , for every @xmath481 ( where @xmath482 is the integers ; see definition  [ defn.nz ] ) .",
    "it is a fact that @xmath483 , but it is also a fact that @xmath484 .",
    "we interpret @xmath99 to be the set @xmath485 and see that @xmath483 for every @xmath239 so the axiom @xmath468 is valid , but @xmath486 so @xmath487 .",
    "this observation is exactly the _ fuzzy support _ noted in @xcite , see also remark  3.3 from @xcite .",
    "[ rmrk.where.fail ] where do the proofs fail ?",
    "failure occurs in the interaction of @xmath277 ( definition  [ defn.atomsof ] ) with theorem  [ thrm.pull.out.l ] .",
    "the reasonable definition for @xmath488 is @xmath489 , which is infinite .",
    "this gives us infinitely many atoms to avoid in order to guarantee @xmath490 in theorem  [ thrm.pull.out.l ] .",
    "thus , @xmath199{\\llbracket r \\rrbracket_{\\scalebox{.6}{$\\varsigma$}}^{\\hspace{-.1ex}\\scalebox{.55}{${\\ensuremath{\\mathscr h}}$}}})$ ] need not be finite .    as a corollary we can clarify something that is evident but only semi - formal in previous work : permissive - nominal terms with @xmath455 are strictly more expressive than permissive - nominal terms without @xmath455 , and also strictly more expressive than ` ordinary ' nominal terms .",
    "we have seen permissive - nominal sets and how , given a permissive - nominal set @xmath34 , we can build a corresponding nominal set @xmath187{\\mathsf}x$ ] from @xmath34 by applying to each @xmath40 an infinite simultaneous atoms - abstraction abstracting all but finitely many of the atoms in @xmath46 .",
    "we have used this to translate between interpretations with differently sized sets of support , and we have used this translation to translate between different notions of validity for permissive - nominal syntaxes .    it can be easier to work with permissive - nominal models  even dramatically easier . to see an example , compare the direct completeness proof for nominal algebra with respect to finitely - supported models in @xcite ( subsections  4.3 and  4.4 ; over five pages including a ` trick ' ) with the completeness proof for the permissive - nominal algebra used in this paper with respect to permissive - nominal models in @xcite ( subsection  7.5 ; under two pages , and the maths is straightforward ) .",
    "even more extreme , compare the proof of the nominal hspa theorem from @xcite ( twenty - eight pages ) with the permissive - nominal hsp theorem from @xcite ( five pages ) .",
    "what this means is that  based on this author s experience  even if the reader is interested specifically in finitely - supported models , it might be shorter and cleaner to prove completeness with respect to some flavour of infinitely - supported permissive - nominal models first , and then to use this paper off - the - shelf .",
    "the technical construction at the heart of this paper , @xmath187{\\mathsf}x$ ] from definition  [ defn.abstraction.x ] , is arguably reminiscent of de bruijn indexes @xcite . given an @xmath40 with infinite support , we form @xmath4x$ ] where @xmath491 is finite . in doing this , we in effect convert all but finitely many of the atoms in @xmath46 into numerical indexes , where @xmath15 is identified by the position in @xmath181 at which it occurs ( if any ) .    of course this is not a literal replacement in @xmath48 , since we assume no internal structure .",
    "but since nominal elements have names , binding these names in order corresponds to turning them into numerical indexes .",
    "an explicit connection is made in ( * ? ? ?",
    "* section  4 ) as mentioned below .",
    "translations between nominal abstract syntax , name - carrying syntax , and de bruijn syntax were given in ( * ? ? ?",
    "* section  4 ) .",
    "the precise definition used in this paper is different and tailored to our intended application ( we restrict to the subset of abstractions such that @xmath199x)$ ] is finite ) , and of course , we concentrate on things other than abstract syntax .    the notion of not - necessarily - finite support was also raised in @xcite , and cheney took up the suggestion in @xcite .",
    "the _ support ideals _ considered there are not quite the same as the permission sets considered here ( for instance , permission sets in this paper are never finite , and the emphasis on well - orderings is absent in cheney s work ) , but the spirit of the maths is similar .      a non - evident connection exists between @xmath4x$ ] and unknowns , which this paper has not explored . in a separate paper we demonstrate how a model of unknowns @xmath2 is given by infinite well - orderings of permission sets @xcite .",
    "now @xmath178 from definition  [ defn.l ] is a _ single permutation orbit _ under finite permutations of some list @xmath179 of atoms .",
    "this author calls this a _",
    "namespace_@xmath178 is a namespace , that is , a set of sets of atoms ( in order ) obtained by permuting _",
    "finitely _ many of them at a time .",
    "we go from @xmath34 to @xmath187{\\mathsf}x$ ] essentially by abstracting a namespace , and because an unknown identifies a namespace , this can be read as a ( level 1 ) abstraction of ( the atoms in ) a level 2 variable .",
    "this paper does not make anything of these connections , but they exist in the background . at some point",
    ", we hope to produce a broader account which will bring the threads in the various papers together and makes clearer the overall picture . for",
    "now , the results in this paper have independent interest as discussed above .",
    "we concluded the technical part of this paper in section  [ sect.shift ] by discussing _ shift_-permutations .",
    "these infinite permutations are useful and mathematically well - behaved , but they mark a point at which permissive - nominal techniques go strictly beyond the expressivity of nominal techniques , and this is made formal : we saw in section  [ sect.shift ] how the results of section  [ sect.completeness.fin ] depend on permutations @xmath19 being finite and when we include infinite permutations in syntax , the results begin to fail .",
    "this is reasonable and as it should be .",
    "so a lesson we can draw from this paper and from the translation in ( * ? ? ?",
    "* section  4 ) is this : permissive - nominal terms with finite permutations are essentially the same thing as ( but somewhat better - behaved than ) ` ordinary ' nominal terms ; permissive - nominal terms with possibly infinite permutations are different , and they are strictly more expressive .",
    "one curious aspect of our proofs is that the function @xmath492 from definition  [ defn.atomsof ] , which plays a role in section  [ sect.two.comm ] , is not invariant under @xmath3-equivalence .",
    "for instance , @xmath493x)=\\{a\\}$ ] and @xmath494(b\\ a){{\\cdot}}x)=\\{b , a\\}$ ] ( where @xmath459 and @xmath428 ) .    it is shown in @xcite and @xcite that valuations @xmath161 ( definition  [ defn.valuation ] ) can be thought of as ( finite-)equivariant maps out of _ moderated _ unknowns @xmath122 considered as a permissive - nominal set .",
    "the non - equivariance of @xmath492 is an artefact of the fact that the syntax of this paper amounts to choosing @xmath495 as a representative of the permutation equivalence class @xmath496 .",
    "permissive - nominal syntax is _ already _ non - equivariant , because for each unknown - up - to - permutations we have chosen a canonical representative @xmath2 .",
    "the results of this paper are reminiscent of the upwards and downwards lwenheim - skolem theorems , which express that a first - order theory can not ` count ' the cardinality of its infinite models @xcite .",
    "the construction of this paper can be read as saying that first - order permissive - nominal syntax with finite permutations can not ` count ' the cardinality of its supporting sets .",
    "we believe it would be fairly easy to strengthen and generalise this result to the following : first - order nominal syntax can not ` count ' the cardinality of the set of atoms or its supporting sets , so long as these are no smaller than the permutations in that syntax . making this formal would require us to be just a little systematic but it should not be too hard using a free construction  and the syntax should be a natural generalisation sufficient to subsume permissive - nominal algebra and permissive - nominal logic .    more generally , we can also ask how the group of permutations can be independently enlarged or restricted in syntax and in the denotation . for instance , in this paper we have considered syntax and semantics using the _ same _ group of permutations .",
    "but the semantics could allow more permutations than the syntax , e.g. we could allow _ shift _ in the denotation ( this is useful to ` make support smaller ' in some element ) , but not in the syntax ( so that we might avoid the issues discussed in subsection  [ subsect.shift ] and specifically in remark  [ rmrk.where.fail ] ) .",
    "in short , we see this paper as the first of a family of similar results which may become useful if and when further variations on logics based on nominal terms , and their models , are developed .",
    "we leave these thoughts to future work .",
    "gilles dowek and murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#pernl-cv[permissive nominal logic ] . in _ proceedings of the 12th international acm sigplan symposium on principles and practice of declarative programming ( ppdp 2010 ) _ , pages 165176 , 2010 .",
    "gilles dowek , murdoch  j. gabbay , and dominic  p. mulligan .",
    "http://www.gabbay.org.uk/papers.html#perntu-jv[permissive nominal terms and their unification : an infinite , co - infinite approach to nominal techniques ( journal version ) ] .",
    ", 18(6):769822 , 2010 .",
    "murdoch  j. gabbay .",
    "http://www.gabbay.org.uk/papers.html#twolns[two-level nominal sets and semantic nominal terms : an extension of nominal set theory for handling meta - variables ] .",
    "published online .",
    "murdoch  j. gabbay and aad mathijssen .",
    "http://www.gabbay.org.uk/papers.html#forcie[a formal calculus for informal equality with binding ] . in",
    "wollic07 : 14th workshop on logic , language , information and computation _ , volume 4576 of _ lecture notes in computer science _ , pages 162176 .",
    "springer , july 2007 ."
  ],
  "abstract_text": [
    "<S> by operations on models we show how to relate completeness with respect to permissive - nominal models to completeness with respect to nominal models with finite support . </S>",
    "<S> models with finite support are a special case of permissive - nominal models , so the construction hinges on generating from an instance of the latter , some instance of the former in which sufficiently many inequalities are preserved between elements . </S>",
    "<S> we do this using an infinite generalisation of nominal atoms - abstraction .    </S>",
    "<S> the results are of interest in their own right , but also , we factor the mathematics so as to maximise the chances that it could be used off - the - shelf for other nominal reasoning systems too . </S>",
    "<S> models with infinite support can be easier to work with , so it is useful to have a semi - automatic theorem to transfer results from classes of infinitely - supported nominal models to the more restricted class of models with finite support .    in conclusion , </S>",
    "<S> we consider different permissive - nominal syntaxes and nominal models and discuss how they relate to the results proved here .    </S>",
    "<S> permissive - nominal techniques , infinite support , nominal algebra , permissive - nominal logic , completeness . </S>"
  ]
}