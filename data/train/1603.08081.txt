{
  "article_text": [
    "the bilateral filter was introduced by tomasi and manduchi in @xcite as a non - linear extension of the classical gaussian filter .",
    "the bilateral filter employs a range kernel along with a spatial kernel for performing edge - preserving smoothing of images . since its introduction",
    ", the bilateral filter has found widespread applications in image processing , computer graphics , computer vision , and computational photography @xcite - @xcite .    in this paper",
    ", we will consider a general form of the bilateral filter where an arbitrary kernel is used for the range filtering , and a box or gaussian kernel is used for the spatial filtering @xcite . in particular , consider an image @xmath0 , where @xmath1 is a finite rectangular lattice .",
    "the output of the bilateral filter @xmath2 is given by @xmath3 where @xmath4 is the range kernel and @xmath5 is the spatial kernel .",
    "the spatial kernel is usually a gaussian @xcite , @xmath6 the window @xmath7 of the spatial kernel is a local neighbourhood of the origin . for example , @xmath8 ^ 2 $ ] for the gaussian kernel , where @xmath9 .",
    "the original proposal in @xcite was to use a gaussian range kernel given by @xmath10 in more recent work , exponential range kernels have been used @xcite .",
    "the direct computation of requires @xmath11 operations per pixel .",
    "in fact , the direct computation is slow for practical settings of @xmath12 @xcite . to address this issue ,",
    "researchers have come up with various fast algorithms @xcite - @xcite .",
    "while some of these algorithms can reduce the complexity to @xmath13 operations per pixel for any arbitrary @xmath12 , there is , however , no available guarantee on the approximation quality that can be achieved using these algorithms .",
    "in fact , as reported in @xcite , a poor approximation can lead to visible distortions in the filtered image . only recently , a quantitative analysis of yang s fast algorithm was presented in @xcite .    in section [ sec : sbf ] , we recall the idea of constant - time bilateral filtering using fourier ( complex exponential ) kernels @xcite . in this work ,",
    "we build on this idea to propose a new algorithm for approximating using the shiftable fourier basis .",
    "the contribution of this work is not the fast algorithm itself , but rather the approximation scheme in section [ sec : pfa ] , and the subsequent approximation guarantee in section [ sec : fa ] .",
    "the approximation scheme can be applied to _ any _ arbitrary range kernel that has a pointwise - convergent fourier series . in this respect ,",
    "we note that all previous approaches based on shiftable approximation were restricted to gaussian range kernels @xcite .",
    "we provide some representative results concerning the speed and accuracy of the resulting algorithm in section [ sec : sim ] , where we also compare the empirical accuracy of the filtering with the bounds predicted by our analysis .",
    "it was demonstrated in @xcite that the bilateral filter can be decomposed into a series of gaussian convolutions using shiftable functions . in particular , since our present interest is in the shiftable complex exponential , consider the function @xmath14 where @xmath15 . by setting as the range kernel @xmath4 , we can decompose the numerator in as @xmath16 where @xmath17 it is clear that a similar decomposition can be obtained for the denominator of .",
    "we readily recognize to be a gaussian convolution .",
    "as is well - known , the gaussian convolution in can be efficiently implemented at constant - time complexity ( with respect to @xmath18 ) using separability and recursion @xcite . in summary",
    ", we can decompose the bilateral filtering into a series of gaussian filtering .",
    "the fast _ shiftable _ algorithm resulting from this decomposition is summarized in algorithm [ algo1 ] .",
    "we use @xmath19 in line [ conj ] to denote the complex - conjugate of @xmath20 . in line",
    "[ conv ] , we use @xmath21 and @xmath22 to denote the gaussian filtering of the images @xmath23 and @xmath20 . to avoid confusion , we note that the formal structure of algorithm [ algo1 ] is somewhat different from that of the shiftable algorithms in @xcite . while the cosine and sine components of the complex exponential were used in @xcite , we work directly with the complex exponential in algorithm [ algo1 ] . note that we have abused notation in using @xmath24 to denote the shiftable approximation of in algorithm [ algo1 ] .",
    "* initialize * : set @xmath25 and @xmath26 for all @xmath27 set @xmath28 for all @xmath27 .    if the range kernel is not shiftable , one can approximate it using a shiftable function .",
    "for example , the shiftable raised - cosines were used in @xcite to approximate the gaussian kernel .",
    "shiftable approximation using polynomials was later presented in @xcite .",
    "more recently , the classical fourier basis was used for this purpose in @xcite .",
    "the above approximations , however , come with the following shortcomings : @xmath29 they are customized to work with the gaussian kernel , and can not be extended to general range kernels , such as the exponential kernel @xcite . even for the gaussian kernel ,",
    "the proposal in @xcite requires one to compute the coefficients of the fourier series .",
    "this is computationally intensive ( e.g. , requires numerical integration , or some analytical properties particular to the kernel ) , and can not be done on - the - fly .",
    "indeed , the authors in @xcite work with an approximation of the fourier coefficients , which is only valid for small @xmath30 .",
    "@xmath29 notice that , in most applications of the bilateral filter , the argument @xmath31 in assumes discrete values .",
    "this should be taken into consideration while designing the shiftable approximation .",
    "the approximations in @xcite , however , do not necessarily guarantee that the approximation error at these discrete points are within some user - defined tolerance .",
    "this makes it difficult to quantify the overall filtering accuracy . in this paper",
    ", we propose a rather simple optimization principle , which has an efficient implementation .",
    "this provides us with the desired control on the numerical accuracy of the overall filtering .",
    "we now explain how the above shortcomings can be fixed . as noted above , the argument @xmath31 in takes on the values @xmath32 as @xmath33 and @xmath34 varies over the image . in particular , @xmath31 takes values in @xmath35 , where @xmath36 thus , @xmath37 is the dynamic range of the image measured over the window @xmath7 , which is typically smaller than the full dynamic range",
    ". we can compute @xmath37 using the fast algorithm in @xcite ; the run - time of the algorithm does not depend on the size of @xmath7 . without loss of generality , we assume that the range kernel @xmath4 is symmetric .",
    "the problem is that of approximating @xmath4 using a shiftable function over the half - interval @xmath38 $ ] .",
    "we propose to use the shiftable fourier basis for this purpose .",
    "in particular , we fix some order @xmath39 , and consider the shiftable function @xmath40 where @xmath41 .",
    "as is well - known , using the identity @xmath42 , we can write as in , where @xmath43 , and @xmath44 for @xmath45 .",
    "the key difference with @xcite is with respect to the rule used to set the coefficients @xmath46 in .",
    "these are set to be the standard fourier coefficients of @xmath4 in @xcite . in keeping with the arguments presented in earlier , we take a different approach and instead try to minimize the error @xmath47 at the discrete points @xmath48 . in particular",
    ", we consider the problem of finding @xmath46 that minimizes the gross error @xmath49 this is the classical linear least - squares problem , where the unknowns are @xmath46 . indeed , using matrix - notation , we can write as @xmath50 , where @xmath51 , @xmath52 is the discretization of @xmath4 at the points @xmath48 , and the columns of @xmath53 are the corresponding discretization of the basis functions in . in particular , let us denote @xmath54 the following fact is the basis of our approximation algorithm to be discussed next .",
    "[ prop ] assume that the fourier series of the range kernel converges pointwise on the interval @xmath55 $ ] .",
    "that is , for @xmath56 $ ] , @xmath57 where @xmath46 in are the fourier coefficients of @xmath4 .",
    "then @xmath58 decays to zero as @xmath59 .",
    "indeed , let @xmath60 be the error in when @xmath61 is taken to be the @xmath62-th order fourier approximation of @xmath4 .",
    "then , by optimality , we have @xmath63 .",
    "since , by assumption , @xmath64 as @xmath59 , the proposition follows .",
    "we note that the fourier series converges pointwise for any continuously - differentiable function , e.g. , gaussian and polynomials .",
    "convergence is also guaranteed for functions that are continuous and piecewise - differentiable @xcite , such as the exponential .",
    "thus , the assumption in proposition [ prop ] covers the commonly used kernels @xcite .",
    "proposition [ prop ] suggests the following numerical scheme : we fix some user - defined tolerance @xmath65 .",
    "we begin with @xmath66 , and solve to get @xmath58 .",
    "if @xmath67 , we stop .",
    "else , we increase @xmath62 by one and proceed , until @xmath68 . in other words ,",
    "we solve a series of least - squares problems , where the basis matrix @xmath53 at each step is obtained by augmenting the @xmath53 in the previous step .",
    "the whole process can be efficiently implemented using a recursive version of the modified qr algorithm @xcite .",
    "the main idea is that can be computed by solving @xmath69 using back - substitution , where @xmath70 is the qr - decomposition of @xmath53 . in the recursive computation , @xmath71 , and @xmath72 at each iteration",
    "is computed from the corresponding quantities in the previous iteration using cheap operations .",
    "an adaptation of this recursive algorithm to our problem is provided in algorithm [ algo2 ] . in steps",
    "[ sample1 ] and [ sample2 ] , we discretize the kernel and the incoming fourier basis . in step [ rk ] , @xmath73 denotes the @xmath74-th component of @xmath75 .",
    "suppose we are given a range kernel @xmath4 and tolerance @xmath76 .",
    "we compute the approximation order @xmath62 and the corresponding coefficients @xmath46 using algorithm [ algo2 ] .",
    "this gives us the corresponding kernel @xmath61 in , which is used to approximate using algorithm [ algo1 ] .",
    "in particular , the approximation provided by algorithm [ algo1 ] is given by @xmath77 by construction , for all @xmath48 , @xmath78 similar to @xcite , we consider the @xmath79 ( worst - case ) error @xmath80 our goal is to bound , which provides us with an estimate of the pixelwise difference between the outputs of the exact and the approximate bilateral filter .",
    "in fact , a simple analysis ( cf . appendix ) give us the following result .",
    "@xmath81    in other words , the filtering error is essentially within a certain factor of the kernel approximation error @xmath76 .",
    "to arrive at , we have assumed that the weights of the spatial filter add up to unity .",
    "indeed , this assumption can be made since the spatial filter appears in both the numerator and denominator of and .",
    "@xmath41 @xmath35 @xmath82_{t \\in \\lambda_t } \\in \\mathbb{r}^{t+1}$ ] [ sample1 ] * initialize * : @xmath66 set @xmath83 to be the all - ones vector @xmath84 @xmath85 @xmath86 @xmath87 @xmath88",
    "all simulations reported here were performed using matlab 8.4 on a macbook air with 1.3 ghz intel core i5 processor and 4 gb memory .",
    "the typical run - time of algorithm [ algo2 ] was between @xmath89-@xmath90 milliseconds ( depending on the order @xmath62 ) for the simulations reported in this section .",
    "this is a small fraction of the overall run - time of algorithm [ algo1 ] .",
    "indeed , the time required to filter a single @xmath91 image with a gaussian kernel is already about @xmath92 milliseconds . in figure",
    "[ approx1 ] , we give an example of the approximation result obtained using algorithm [ algo2 ] with @xmath93 . in figure",
    "[ approx2 ] , we compare the coefficients obtained using algorithm [ algo2 ] with that obtained by expanding the raised - cosines @xcite into .",
    "notice that the former decays much more rapidly and hence requires fewer terms .",
    "we present some results on the _ barbara _ image for which @xmath37 was computed to be @xmath94 .",
    "we note that the run - time of the direct implementation of depends only on the image size and @xmath18 . on the other hand ,",
    "the run - time of the proposed algorithm depends on @xmath37 , tolerance @xmath76 , image size , and @xmath30 .",
    "the fact that the run - time is almost independent of @xmath18 ( constant - time algorithm ) is evident from the results in table [ table1 ] .",
    "the small fluctuations are essentially due to the variable padding required to handle the boundary conditions for the spatial filtering .",
    ".run - time for the @xmath91 _ barbara _ image at different @xmath18 and fixed @xmath95 .",
    "the run - time of the direct implementation is @xmath96 seconds . [",
    "cols=\"^,<,<,<,<,<,<,<\",options=\"header \" , ]",
    "this work was supported by the startup grant awarded by the indian institute of science .",
    "the authors would like to thank the anonymous reviewers for their comments and suggestions .",
    "in this section , we outline the main steps in the derivation of . we write as @xmath97 , where @xmath98 and @xmath99 similarly , we write as @xmath100 , where @xmath101 and @xmath102 then @xmath103 can be expressed as @xmath104.\\ ] ] from , we have @xmath105 . on the other hand , note that @xmath106 .",
    "this is because @xmath107 is given by the convex combination of @xmath108 .",
    "therefore , from , we get @xmath109 .    to obtain a lower - bound for @xmath110 in",
    ", we note that @xmath111 where we have used the non - negativity of the range and spatial kernels .",
    "therefore , using the inverse triangle inequality , we get @xmath112 bilateral filtering , '' _ proc .",
    "ieee conference on computer vision and pattern recognition _",
    "557 - 564 , 2009 ."
  ],
  "abstract_text": [
    "<S> it was demonstrated in earlier work that , by approximating its range kernel using shiftable functions , the non - linear bilateral filter can be computed using a series of fast convolutions . </S>",
    "<S> previous approaches based on shiftable approximation have , however , been restricted to gaussian range kernels . in this work , </S>",
    "<S> we propose a novel approximation that can be applied to _ any _ range kernel , provided it has a pointwise - convergent fourier series . </S>",
    "<S> more specifically , we propose to approximate the gaussian range kernel of the bilateral filter using a fourier basis , where the coefficients of the basis are obtained by solving a series of least - squares problems . </S>",
    "<S> the coefficients can be efficiently computed using a recursive form of the qr decomposition . by controlling the cardinality of the fourier basis , </S>",
    "<S> we can obtain a good tradeoff between the run - time and the filtering accuracy . </S>",
    "<S> in particular , we are able to guarantee sub - pixel accuracy for the overall filtering , which is not provided by most existing methods for fast bilateral filtering . </S>",
    "<S> we present simulation results to demonstrate the speed and accuracy of the proposed algorithm .    bilateral filter , shiftability , fourier basis , fast algorithm , accuracy . </S>"
  ]
}