{
  "article_text": [
    "phylogenetic networks have become increasingly more prominent in the literature as they correctly allow the evolution of certain collections of present - day species to be described with reticulation ( non - tree - like ) events .",
    "however , the evolution of a particular gene can generally be described without reticulation events . as a result ,",
    "analysing the tree - like information in a phylogenetic network has become a common task .",
    "central to this task is that of deciding if a given phylogenetic network @xmath1 infers a given rooted binary phylogenetic tree on the same collection of taxa . in this paper , we show that if @xmath1 is a so - called reticulation - visible network , then there is a polynomial - time algorithm for making this decision .",
    "this resolves a problem left open in  @xcite and  @xcite . in the rest of the introduction",
    ", we formally state this result as well as the other main result which concerns the number of vertices in a reticulation - visible network .    throughout the paper",
    ", @xmath0 denotes a non - empty finite set . for @xmath6 , a _",
    "phylogenetic network on @xmath0 _ is a rooted acyclic digraph with no parallel arcs and the following properties :    a.   the root has out - degree two ; b.   vertices of out - degree zero have in - degree one , and the set of vertices with out - degree zero is @xmath0 ; and c.   all other vertices either have in - degree one and out - degree two , or in - degree two and out - degree one .    if @xmath7 , then @xmath1 consists of the single vertex in @xmath0 .",
    "the vertices in @xmath1 of out - degree zero are called _",
    "leaves_. furthermore , the vertices of @xmath1 with in - degree two and out - degree one are called _ reticulations _ , while the vertices of in - degree one and out - degree two are called _",
    "tree vertices_. the arcs directed into a reticulation are _ reticulation arcs _ ; all other arcs are called _ tree arcs_. note that , what we have called a phylogenetic network is sometimes referred to as a _ binary _",
    "phylogenetic network .",
    "a _ rooted binary phylogenetic @xmath0-tree _ is a phylogenetic network on @xmath0 with no reticulations .",
    "let @xmath1 be a phylogenetic network on @xmath0 and let @xmath2 be a rooted binary phylogenetic @xmath0-tree .",
    "we say that @xmath1 _ displays _",
    "@xmath2 if @xmath2 can be obtained from @xmath1 by deleting arcs and vertices , and contracting degree - two vertices . to illustrate , in fig .",
    "[ display ] , the phylogenetic network @xmath1 on @xmath8 displays the rooted binary phylogenetic @xmath0-tree @xmath2 .",
    "the particular problem of interest is the following :    tree containment + _ instance : _ a phylogenetic network @xmath1 on @xmath0 and a rooted binary phylogenetic @xmath0-tree @xmath2 .",
    "+ _ question : _ does @xmath1 display @xmath2 ?    in general , tree containment is np - complete  @xcite even when the instance is highly constrained  @xcite .    let @xmath1 be a phylogenetic network on @xmath0 with root @xmath9 .",
    "a vertex @xmath10 in @xmath1 is _ visible _ if there is a leaf @xmath11 in @xmath0 with the property that every directed path from the root to @xmath11 traverses @xmath10 , in which case , we say _",
    "@xmath11 verifies the visibility of @xmath10 _ ( or , more briefly , _",
    "@xmath11 verifies @xmath10 _ ) .",
    "if every reticulation in @xmath1 is visible , then @xmath1 is a _ reticulation - visible network_. in fig .",
    "[ display ] , @xmath1 is a reticulation - visible network .",
    "for example , the visibility of the leftmost reticulation is verified by @xmath12 .",
    "observe that this reticulation is not verified by @xmath13 as there is a path from the root of @xmath1 to @xmath13 that avoids it .",
    "for the reader familiar with tree - child networks , @xmath1 is tree - child network if and only if every vertex in @xmath1 is visible  ( * ? ? ?",
    "* lemma  2 ) .",
    "thus tree - child networks are a proper subclass of reticulation - visible networks .",
    "it was shown in  @xcite that there exists a polynomial - time algorithm for tree containment if @xmath1 is a tree - child network . here",
    "we generalise that result to reticulation - visible networks .",
    "the next theorem is the first main result of the paper .",
    "let @xmath1 be a phylogenetic network on @xmath0 and let @xmath2 be a rooted binary phylogenetic @xmath0-tree .",
    "then tree containment for @xmath1 and @xmath2 can be decided in polynomial time .",
    "[ decision ]    it is shown in  @xcite that a reticulation - visible network on @xmath0 has at most @xmath14 reticulations .",
    "the second of the two main results sharpens this result .",
    "let @xmath1 be a reticulation - visible network @xmath1 on @xmath0 and let @xmath15",
    ". then @xmath1 has at most @xmath16 vertices in total and at most @xmath17 reticulations .",
    "moreover , these bounds are sharp for all integers @xmath18 .",
    "[ sharp ]    the paper is organised as follows .",
    "the next section consists of concepts that will be used in the description of the algorithm that establishes theorem  [ decision ] .",
    "called treedetection , the description of this algorithm and the proof of its correctness is given in section  [ algorithm ] . in section  [ running ] , we analyse the algorithm s running time and show that treedetection completes in @xmath19 steps . together",
    "sections  [ algorithm ] and  [ running ] constitute the proof of theorem  [ decision ] .",
    "the last section , section  [ visible ] , contains the proof of theorem  [ sharp ] . throughout the paper , notation and terminology follows semple and steel  @xcite .",
    "let @xmath1 be a phylogenetic network , and let @xmath20 and @xmath10 be vertices in @xmath1 .",
    "if @xmath20 and @xmath10 are joined by an arc @xmath21 , we say @xmath20 is a _ parent _ of @xmath10 and , conversely , @xmath10 is a _ child _ of @xmath20 .",
    "more generally , if @xmath20 and @xmath10 are joined by a directed path from @xmath20 to @xmath10 , we say @xmath20 is an _ ancestor _ of @xmath10 and , conversely , @xmath10 is a _ descendant _ of @xmath20 .",
    "furthermore , if @xmath20 is neither an ancestor nor descendant of @xmath10 , we say @xmath20 and @xmath10 are _ non - comparable_. a _ backward path _ in @xmath1 from @xmath10 to @xmath20 is an underlying path @xmath22 such that , for all @xmath23 , we have that @xmath1 contains the arc @xmath24 .",
    "observe that if there is a backward path in @xmath1 from @xmath10 to @xmath20 , then @xmath20 is an ancestor of @xmath10 .",
    "an _ up - down path _",
    "@xmath25 in @xmath1 from @xmath10 to @xmath20 is an underlying path @xmath26 such that , for some @xmath27 , we have that @xmath28 is a backward path from @xmath10 to @xmath29 and @xmath30 is a ( directed ) path from @xmath29 to @xmath10 .",
    "the vertex @xmath29 is the _ peak _ of @xmath25 .",
    "also , a _ tree path _ in @xmath1 from @xmath20 to @xmath10 is a ( directed ) path such that , except possibly @xmath20 , every vertex on the path is either a tree vertex or a leaf .",
    "lastly , the _ length _ of a ( directed ) path , a backward path , an up - down path , and a tree path is the number of edges in the path .",
    "let @xmath1 be a phylogenetic network on @xmath0 .",
    "a @xmath31-element subset @xmath32 of @xmath0 is a _ cherry _ in @xmath1 if there is an up - down path of length two between @xmath33 and @xmath34 .",
    "equivalently , @xmath32 is a cherry if the parent of @xmath33 and the parent of @xmath34 are the same .",
    "for a cherry @xmath32 in @xmath1 , let @xmath35 be obtained from @xmath1 by deleting @xmath33 and @xmath34 , and their incident arcs , and labelling their common parent ( now itself a leaf ) with an element not in @xmath0 .",
    "we say that @xmath35 has been obtained from @xmath1 by _ reducing the cherry @xmath32_.    let @xmath1 be a phylogenetic network on @xmath0 and let @xmath2 be a rooted binary phylogenetic @xmath0-tree .",
    "suppose that @xmath1 displays @xmath2 .",
    "then there is a subgraph @xmath36 of @xmath1 that is a subdivision of @xmath2 .",
    "we say @xmath36 is an _ embedding _ of @xmath2 in @xmath1 .",
    "observe that any embedding of @xmath2 in @xmath1 can be formed by deleting exactly one incoming arc at each reticulation and deleting any resulting degree - one vertex that is not a leaf of @xmath1 .",
    "we refer to the action of deleting one of the two incoming arcs at a reticulation as _ resolving the reticulation_.",
    "in this section , we present the algorithm treedetection .",
    "this algorithm takes as input a reticulation - visible network @xmath1 on @xmath0 and a rooted binary phylogenetic @xmath0-tree @xmath2 and , as we establish in this section , outputs * yes * if @xmath1 displays @xmath2 and * no * if @xmath1 does not display @xmath2 .",
    "we begin with some further preliminaries .",
    "let @xmath1 be a phylogenetic network on @xmath0 with root @xmath9 .",
    "let @xmath37 and @xmath38 be distinct elements in @xmath0 .",
    "we define the vertex @xmath39 of @xmath1 to be the reticulation at minimum path length from @xmath9 such that @xmath37 verifies @xmath39 and no other element of @xmath0 verifies @xmath39 .",
    "if there is no such reticulation , we define @xmath39 to be @xmath37 .",
    "furthermore , we define @xmath40 to be the vertex at maximum path length from @xmath9 such that both @xmath37 and @xmath38 verify @xmath40 .",
    "note that @xmath39 and @xmath40 are both well defined since if @xmath41 and each element of @xmath42 verifies vertices @xmath20 and @xmath10 of @xmath1 , then it must be that either @xmath20 is an ancestor of @xmath10 or @xmath10 is an ancestor of @xmath20 .",
    "briefly , treedetection proceeds by picking a cherry @xmath43 of the targeted rooted binary phylogenetic tree @xmath2 and then considering how the leaves @xmath37 and @xmath38 are related in @xmath1 .",
    "there are various cases to consider , but in most cases we can either declare * no * directly , or we find an arc of @xmath1 that can be deleted so that the resulting phylogenetic network displays @xmath2 if and only if @xmath1 displays @xmath2 . in the remaining cases , we can delete the leaf @xmath38 from both @xmath1 and @xmath2 so that the resulting phylogenetic network displays the resulting rooted binary phylogenetic tree if and only if @xmath1 displays @xmath2 . in any case , if we can not immediately declare * no * , we reduce the size of @xmath1 by either a vertex or an arc and , by iterating the procedure , we eventually reduce the problem to the trivial case @xmath7 .",
    "the algorithm treedetection consists of a number of subroutines .",
    "these subroutines are partitioned into three types .",
    "the first type consists of @xmath44 subroutines which we refer to as the _",
    "easy cases_. the other two types are referred to as _ special cases_. the second type consists of @xmath45 subroutines and the third type consists of @xmath46 subroutines . we first give a top - level description of treedetection before detailing the cases and their subroutines .    * input : * a reticulation - visible network @xmath1 on @xmath0 and a rooted binary phylogenetic @xmath0-tree @xmath2 . * output : * * yes * if @xmath1 displays @xmath2 , and * no * otherwise .    with the top - level description of the algorithm established",
    ", we now turn to the details of the various cases . if @xmath47 , let @xmath43 be a cherry in @xmath2 whose distance from its root is maximised .",
    "we then have the following ` easy ' cases ( each one holding only if the preceeding cases do not hold ) . subroutines for each easy case as well as their justifications are given in section  [ easycases ] .",
    "easy cases    * the @xmath31-element subset @xmath43 is a cherry in @xmath1 . * for some @xmath48 , we have @xmath49 . * for @xmath50",
    ", we have @xmath51 is an ancestor of @xmath52 . * for @xmath53",
    ", there is an ancestor @xmath54 of @xmath51 that is verified by @xmath55 but not by @xmath56 .",
    "* for some @xmath57 , there is a descendant @xmath20 of @xmath51 that is a reticulation not verified by @xmath55 . * for @xmath50",
    ", there is a reticulation @xmath20 that is an ancestor of @xmath51 but not of @xmath56 .",
    "* for some @xmath58 , there are two non - comparable reticulations @xmath20 and @xmath54 that are descendants of @xmath40 and ancestors of @xmath51 .",
    "we establish in lemma  [ inspecialcase ] below that if we are not in one of ( ec1)(ec7 ) , then we must be in one of the three situations illustrated in fig .",
    "[ situations ] . here",
    ", figs  [ situations](i)(iii ) is a subgraph of the phylogenetic network at the completion of ( ec1)(ec7 ) .",
    "more precisely , each of these subgraphs consists of all ( directed ) paths from @xmath40 to either @xmath37 or @xmath38 .",
    "solid lines correspond to edges .",
    "dashed lines between named vertices correspond to ( directed ) paths with no reticulations unless one of the named vertices is @xmath20 .",
    "note that @xmath39 and @xmath59 are the parents of @xmath37 and @xmath38 , respectively . in situations  2 and  3 ,",
    "the structure of the subgraph immediately ` below ' @xmath40 is not completely determined .",
    "two key vertices in the analysis to follow are those labelled @xmath60 and @xmath61 in fig .  [ situations ] .",
    "if there is a reticulation on any path between @xmath40 and @xmath39 , then there is a unqiue maximal reticulation @xmath20 by ( ec7 ) . in this case",
    "we define @xmath62 to be the parent of @xmath39 on the path from @xmath20 to @xmath39 and @xmath63 to be the other parent of @xmath39 .",
    "if there is no reticulation , let the children of @xmath40 be @xmath64 and @xmath65 and define @xmath62 to be the parent of @xmath39 on the path from @xmath64 to @xmath39 , @xmath63 to be the parent of @xmath39 on the path from @xmath65 to @xmath39 .",
    "in each case define @xmath66 likewise .",
    "then @xmath60 is the ancestor of @xmath62 and @xmath67 at maximal distance from @xmath40 and @xmath68 is the ancestor of @xmath63 and @xmath69 at maximal distance from @xmath40 .",
    "( the proof of lemma  [ inspecialcase ] shows that these are well defined . )    for each situation , the crucial feature we will need to consider is the structure outside of the cherry @xmath43 in @xmath2 . since @xmath43 was chosen to be at maximal distance from the root , the sibling of the parent of @xmath37 and @xmath38 in @xmath2 is either a leaf @xmath70 or the parent of leaves @xmath70 and @xmath71 , where @xmath72 is a cherry .",
    "first , we consider the case that the sibling is a single leaf @xmath70 .",
    "let @xmath73 be the reticulation in @xmath1 at minimum path length from the root such that @xmath70 verifies @xmath73 and no other element verifies @xmath70 .",
    "if there is no such reticulation , define @xmath73 to be @xmath70 .",
    "let @xmath74 be the first reticulation on a path from @xmath73 to @xmath70 ( including @xmath73 itself ) that is not an ancestor of @xmath37 or @xmath38 .",
    "note that @xmath75 if no such vertex exists .",
    "furthermore , @xmath70 verifies @xmath74 , otherwise some other leaf would verify it , and this leaf would also verify @xmath73 .",
    "the first of the special cases is detailed below .",
    "the corresponding subroutines and their justifications are given in section  [ specialcasealgs ] .",
    "special case : single leaf sibling    * the leaf @xmath70 is not a descendant of @xmath40 .",
    "* there is a descendant @xmath20 of @xmath74 that is a reticulation and not verified by @xmath70 .",
    "* there is an ancestor @xmath20 of @xmath74 that is a reticulation and not an ancestor of @xmath37 or @xmath38 .",
    "* the leaf @xmath70 does not verify @xmath40 .",
    "the fifth subroutine deals with the case when none of ( sc1.1)(sc1.4 ) hold , in which case , @xmath76 .",
    "denote the parents of @xmath74 as @xmath77 and @xmath78 .",
    "let @xmath79 be the unique vertex at maximal distance from @xmath40 that is an ancestor of @xmath77 and an ancestor of either @xmath37 or @xmath38 .",
    "likewise , let @xmath80 be the unique vertex at maximal distance from @xmath40 that is an ancestor of @xmath78 and an ancestor of either @xmath37 or @xmath38 .",
    "for each of @xmath79 and @xmath80 either it is an ancestor of @xmath60 or an ancestor of @xmath68 , or it lies on one of the following ( directed ) paths : @xmath60 to @xmath62 , call it @xmath81 ; @xmath60 to @xmath67 , call it @xmath82 ; @xmath68 to @xmath63 , call it @xmath83 ; and @xmath68 to @xmath69 , call it @xmath84 . with these definitions ,",
    "we identify an arc to delete from @xmath1 , or a vertex to delete from both @xmath2 and @xmath1 .",
    "the appropriate deletions are given in table  [ singlectable ] , while justification for these deletions is given in section  [ specialcasealgs ] . in the table",
    ", we denote that @xmath79 ( respectively , @xmath80 ) is an ancestor of a vertex @xmath20 by @xmath85 .",
    ".table showing the actions to perform on @xmath1 and @xmath2 to create @xmath35 and @xmath36 depending on the locations of @xmath79 and @xmath80 in each of situations 13 when the sibling of the parent of @xmath37 and @xmath38 is a single leaf @xmath70 .",
    "if the entry corresponding to the subcase we are in contains a single arc @xmath86 , then @xmath87 and @xmath88 . if the entry contains the leaf @xmath38 , then @xmath89 and @xmath90 .",
    "[ cols=\"^,^,^,^,^\",options=\"header \" , ]     [ cherryctable ]      here we present the subroutines for each of ( ec1)(ec7 ) with justification following each subroutine . throughout the presentation of these subroutines , as well as",
    "those presented for the two special cases , whenever we delete an arc or a leaf from @xmath1 or @xmath2 , we additionally contract any resulting degree - two vertex .",
    "suppose @xmath43 is a cherry in @xmath1 .",
    "then any embedding of @xmath36 in @xmath35 can be extended to an embedding of @xmath2 in @xmath1 by appending @xmath38 to the arc incident with @xmath37 in both @xmath35 and @xmath36 , and including the new edge in the embedding .",
    "conversely , any embedding of @xmath2 in @xmath1 gives rise to an embedding of @xmath36 in @xmath35 by deleting @xmath38 , its incident arc , and contracting the resulting degree - two vertex .",
    "* requirement : * easy cases 1 does not apply , and @xmath91 for some @xmath48 .",
    "[ algstep5a ] [ algstep5b ] [ algstep5bii ]    if there is a tree path from @xmath92 to a leaf @xmath93 , then every rooted binary phylogenetic @xmath0-tree embedded in @xmath1 must display the rooted triple @xmath94 . since @xmath50 is a cherry in @xmath2 ,",
    "no embedding of @xmath2 in @xmath1 can exist . thus returning *",
    "no * in line  3 is correct .",
    "so assume that there is no such tree path from @xmath92 .",
    "then there is a tree path from @xmath92 to a parent @xmath95 of a reticulation @xmath20 .",
    "assume @xmath96 .",
    "observe that @xmath20 is not a descendant of @xmath52 , otherwise @xmath55 would also verify @xmath52 contradicting the definition of @xmath52 . thus @xmath20 is verified by some leaf @xmath93 .",
    "note that we can choose @xmath97 since @xmath96 and @xmath20 is not a descendant of @xmath52 .",
    "now an embedding of a rooted binary phylogenetic @xmath0-tree in @xmath1 that uses arc @xmath98 would display the rooted triple @xmath94 if @xmath52 is not a descendant of @xmath20 , and @xmath99 if @xmath52 is a descendant of @xmath20 .    on the other hand , if @xmath100",
    ", then it is easily seen that if there is an embedding of @xmath2 that does not use arc @xmath98 , then there is also an embedding of @xmath2 that uses arc @xmath98 .",
    "thus in both cases there is an embedding of @xmath2 in @xmath1 if and only if there is an embedding of @xmath2 in @xmath35 .",
    "the justifications for the next three subroutines are similar to that for subroutine 2 and are omitted .",
    "* requirement : * easy cases 12 do not apply , and @xmath51 is an ancestor of @xmath52 for @xmath101 .    *",
    "requirement : * easy cases 13 do not apply and , for some @xmath48 , there is an ancestor @xmath54 of @xmath51 which is verified by @xmath55 but not by @xmath56 .",
    "* requirement : * easy cases 14 do not apply and , for some @xmath48 , there is a path @xmath25 from @xmath51 to a reticulation not verified by @xmath55 .",
    "* requirement : * easy cases 15 do not apply and , for @xmath50 , there is a reticulation @xmath20 that is an ancestor of @xmath51 but not an ancestor of @xmath56 .",
    "since @xmath20 is an ancestor of @xmath51 it must be verified by some leaf @xmath102 . but @xmath20 is not an ancestor of @xmath56 , so @xmath97 . if an embedding of @xmath2 uses the arc @xmath103 , then it must display the rooted triple @xmath94 ; a contradiction .",
    "thus there is an embedding of @xmath2 in @xmath1 if and only if there is an embedding of @xmath2 in @xmath35 .",
    "* requirement : * easy cases 16 do not apply , and there are two non - comparable reticulations @xmath20 and @xmath54 that are descendants of @xmath40 and , for some @xmath48 , ancestors of @xmath51 .    without loss of generality , we may assume @xmath20 and @xmath54 are at maximal distance from @xmath40 , that is , there is no reticulation @xmath104 that is a descendant of @xmath20 such that @xmath104 and @xmath54 satisfy the conditions of the requirement and , likewise , no reticulation @xmath105 that is a descendant of @xmath54 such that @xmath20 and @xmath105 satisfy the conditions of the requirement . since @xmath20 and @xmath54 are descendants of @xmath40 , neither is verified by both @xmath37 and @xmath38 and so , by ( ec4 ) , neither is verified by @xmath37 or by @xmath38 .",
    "thus there are leaves @xmath106 such that @xmath107 verifies @xmath20 and @xmath108 verifies @xmath54 . since @xmath20 and @xmath54 are non - comparable , @xmath109 as not all paths to a single leaf can go through two non - comparable vertices .",
    "by ( ec6 ) , each of @xmath20 and @xmath54 is an ancestor of both @xmath37 and @xmath38 .",
    "suppose first that there is a reticulation @xmath104 that is on a path from @xmath20 to @xmath51 .",
    "take @xmath104 to be such a reticulation at shortest distance to @xmath20 . by our assumption",
    ", @xmath104 can not be non - comparable with @xmath54 , so it must be a descendant of both @xmath54 and @xmath20 .",
    "furthermore , @xmath104 must be verified by some @xmath110 .",
    "since @xmath2 must display at most one of @xmath111 and @xmath112 ; we delete the appropriate reticulation arc incident with @xmath104 so that there is an embedding of @xmath2 in @xmath1 if and only if there is an embedding of @xmath2 in @xmath35 .    by symmetry",
    ", we may now assume that there is no reticulation that is on a path from @xmath20 to @xmath51 or from @xmath54 to @xmath51 .",
    "let @xmath92 be the parent of @xmath51 that is a descendant of @xmath20 , and let @xmath113 be the parent of @xmath51 that is a descendant of @xmath54 .",
    "note that these are well defined by our latest assumption and , also , @xmath114 since @xmath20 and @xmath54 are non - comparable . if an embedding of @xmath2 uses arc @xmath115 , it must display the rooted triple @xmath116 , and if it uses arc @xmath117 , it must display the rooted triple @xmath118 . at most one of these rooted triples",
    "is displayed by @xmath2 .",
    "thus , with @xmath35 as constructed , there is an embedding of @xmath2 in @xmath1 if and only if there is an embedding of @xmath2 in @xmath35 .",
    "we first show that if none of ( ec1)(ec7 ) hold , then we are indeed in one of situations  1 , 2 , and 3 .",
    "thereafter , we present the subroutines and their justifications for the special cases .",
    "[ inspecialcase ] let @xmath6 , and let @xmath1 be a phylogenetic network on @xmath0 and let @xmath2 be a rooted binary phylogenetic @xmath0-tree .",
    "let @xmath43 be a cherry in @xmath2 whose distance from its root is maximised .",
    "if none of ( ec1)(ec7 ) applies , then one of situations  @xmath119 , @xmath31 , and @xmath120 applies .",
    "let @xmath48 .",
    "suppose first that the parent of @xmath55 is a tree vertex @xmath10 . then there is a tree - path from @xmath10 that reaches either a parent of a reticulation @xmath20 not verified by @xmath55 , or a leaf @xmath102 . by ( ec2 ) , @xmath121 , so ec5 excludes the tree - path reaching a parent of a reticulation @xmath20 . but then @xmath11 verifies every vertex that @xmath55 verifies ( except @xmath55 itself ) , contradicting the definition of @xmath51 .",
    "now suppose that the parent of @xmath55 is a reticulation @xmath122 .",
    "let the parents of @xmath54 be @xmath123 and @xmath124 , and note that @xmath123 and @xmath124 are both tree vertices since parents of reticulations are not visible .",
    "the vertex @xmath51 must be an ancestor of both @xmath123 and @xmath124 . by ( ec5 )",
    ", @xmath123 can not have a path to a reticulation other than @xmath54 .",
    "but then @xmath123 must have a tree path to a leaf @xmath11 that verifies @xmath51 ; a contradiction .",
    "it now follows that @xmath51 is the parent of @xmath55 for all @xmath125 .",
    "the vertex @xmath40 can not be a reticulation , as its child would also be verified by @xmath37 and @xmath38 .",
    "thus @xmath40 has two children @xmath64 and @xmath65 , neither of which is verified by both @xmath37 and @xmath38 .",
    "furthermore , by ( ec4 ) , neither @xmath64 nor @xmath65 is verified by exactly one of @xmath37 and @xmath38 .",
    "hence there is a ( directed ) path from @xmath64 to each of @xmath37 and @xmath38 , and also from @xmath65 to each of @xmath37 and @xmath38 .    except for @xmath39 and @xmath59 , suppose that there are no reticulations on any path between @xmath40 and @xmath39 and between @xmath40 and @xmath59 . then the paths from @xmath64 to each of @xmath37 and @xmath38 are unique , and the paths from @xmath65 to each of @xmath37 and @xmath38 are unique .",
    "denote the parent of @xmath39 on the path from @xmath64 to @xmath37 by @xmath62 , and the parent of @xmath39 on the path from @xmath65 to @xmath37 by @xmath63 .",
    "similarly , denote by @xmath67 and @xmath69 the parents of @xmath59 .",
    "let @xmath60 be the last vertex on the path from @xmath64 to @xmath62 that is an ancestor of @xmath38 , and let @xmath68 be the last vertex on the path from @xmath68 to @xmath63 that is an ancestor of @xmath38 .",
    "( possibly @xmath126 or @xmath127 . )",
    "thus , if , apart from @xmath39 and @xmath59 , there are no reticulations on any path between @xmath40 and @xmath37 , and between @xmath40 and @xmath38 , then we are in situation  1 .",
    "now suppose that , in addition to @xmath39 and @xmath59 , there is a reticulation on a path between @xmath40 and @xmath39 or between @xmath40 and @xmath59 .",
    "let @xmath20 be such a reticulation at maximal distance from @xmath40 . by ( ec6 )",
    ", @xmath20 is an ancestor of both @xmath37 and @xmath38 . by ( ec7 ) , every other reticulation on a path from @xmath40 to @xmath39 or from @xmath40 to @xmath59 that is not @xmath39 or @xmath59 is an ancestor of @xmath20 .",
    "by maximality , the paths from @xmath20 to @xmath37 and from @xmath20 to @xmath38 are unique .",
    "let the parent of @xmath39 on the path from @xmath20 to @xmath37 be @xmath62 and let the parent of @xmath59 on the path from @xmath20 to @xmath38 be @xmath67 .",
    "let @xmath60 be the last vertex on the path from @xmath20 to @xmath62 that is an ancestor of @xmath38 .",
    "let @xmath63 and @xmath69 be the other parents of @xmath39 and @xmath59 , respectively .",
    "let @xmath68 be the ancestor of @xmath63 and @xmath69 at maximal distance from @xmath40 .",
    "note that @xmath68 is well defined . to see this ,",
    "assume that there were two possibilities @xmath68 and @xmath128 , both ancestors of @xmath63 and @xmath69 , and at maximal distance from @xmath40 .",
    "by maximality , @xmath68 and @xmath128 are non - comparable , so there would have to be a reticulation where the paths from @xmath68 and @xmath128 to @xmath63 merge , and where the paths from @xmath68 and @xmath128 to @xmath69 merge .",
    "these two reticulations would also have to be non - comparable , contradicting the exclusion of ( ec7 ) .    if @xmath68 is not an ancestor of @xmath20 , then we are in situation  2 .",
    "if @xmath68 is an ancestor of @xmath20 , then we are in situation  3 .",
    "we now present the subroutines for the special case when the sibling of the parent of @xmath37 and @xmath38 in @xmath2 is a single leaf @xmath70 .",
    "[ sc:1 ]    * requirement : * the leaf @xmath70 is not a descendant of @xmath40 .",
    "this is valid since any embedding of @xmath2 in @xmath1 must have the last common ancestor of @xmath37 and @xmath70 as an ancestor of @xmath40 .",
    "thus there are no paths ( in the embedding ) from @xmath40 to any leaves other than @xmath37 and @xmath38 , so we can resolve @xmath39 either way without changing the result of the embedding . in particular , @xmath1 displays @xmath2 if and only if @xmath35 displays @xmath2 .",
    "the justification of the next subroutine is similar to that given for easy case  2 and is omitted .",
    "* requirement : * there is a path @xmath25 from @xmath74 to a reticulation not verified by @xmath70 .    *",
    "requirement : * there is an ancestor @xmath20 of @xmath74 that is a reticulation and not an ancestor of @xmath37 or @xmath38 .    since @xmath20 is an ancestor of @xmath74 , but not an ancestor of @xmath37 or @xmath38 , we must have @xmath129 , and so @xmath20 must be verified by some leaf @xmath130 .",
    "since @xmath20 is not an ancestor of @xmath37 or @xmath38 , it follows that @xmath93 .",
    "if an embedding of @xmath2 uses the arc @xmath131 , then it must display the rooted triple @xmath132 ; a contradiction .",
    "thus there is an embedding of @xmath2 in @xmath1 if and only if there is an embedding of @xmath2 in @xmath35 .",
    "* requirement : * the leaf @xmath70 does not verify @xmath40 .",
    "if @xmath70 does not verify @xmath40 , then there is a ( directed ) path @xmath25 from an ancestor of @xmath40 to @xmath74 not via @xmath40 , and @xmath77 is on this path .",
    "if we are in situation  2 or situation  3 , then there is no embedding of @xmath2 in @xmath1 that uses arc @xmath131 .",
    "otherwise , the embedding of @xmath2 displays the rooted triple @xmath133 , where @xmath11 is a leaf verifying @xmath20 ; a contradiction .",
    "if we are in situation  1 and there is an embedding of @xmath2 that uses arc @xmath131 , then in the embedding the last common ancestor of @xmath37 and @xmath70 is an ancestor of @xmath40 , so ( as above ) we could adjust the embedding by resolving @xmath134 either way and it would still be valid . by ( sc1.3 ) , there is an unique path @xmath135 from @xmath40 to @xmath74 .",
    "now @xmath135 can not use vertex @xmath60 and vertex @xmath68 , so we can resolve @xmath39 or @xmath59 towards the ancestor not on @xmath135 and @xmath74 towards its parent on @xmath135 , and still have a valid embedding , but one not using arc @xmath131 .",
    "thus there is an embedding of @xmath2 in @xmath1 if and only if there is an embedding of @xmath2 in @xmath35 .    to complete the analysis of the first special case , we present that last of its subroutines and justify the actions in table  [ singlectable ] .",
    "[ sc1.5 ]    * requirement : * easy cases 17 and special cases",
    "1.11.4 do not apply .",
    "the sibling of the parent of @xmath37 and @xmath38 in @xmath2 is a single leaf @xmath70 .",
    "if an embedding of @xmath2 in @xmath1 uses the arc @xmath131 and @xmath79 is on the path @xmath81 or @xmath82 , then @xmath39 and @xmath59 will have to resolve towards @xmath63 and @xmath69 .",
    "otherwise , the embedding does not have a vertex whose leaf descendants are just @xmath37 and @xmath38 .",
    "hence , if each of @xmath79 and @xmath80 lie on @xmath81 or @xmath82 , then we can delete @xmath136 .",
    "similarly , if each of @xmath79 and @xmath80 lie on @xmath83 or @xmath84 , then we can delete @xmath137 .",
    "if we are in situation  1 , and @xmath79 lies on @xmath81 or @xmath82 and @xmath80 lies on @xmath83 or @xmath84 , then , in an embedding of @xmath2 in @xmath1 , the last common ancestor of @xmath37 and @xmath70 would be @xmath40 which ever way we resolved @xmath74 .",
    "thus , in any of these cases , there is no path to a leaf other than @xmath37 , @xmath38 , and @xmath70 from @xmath40 and so , if an embedding exists , one exists with @xmath74 resolved each way ( and @xmath39 and @xmath59 resolved accordingly ) .",
    "thus , we can delete @xmath138 .",
    "similar argument holds if we are in situation  1 , and @xmath79 lies on @xmath83 or @xmath84 and @xmath80 lies on @xmath81 or @xmath82 .    if we are in situations  2 or  3 , and @xmath79 lies on @xmath83 or @xmath84 , no embedding of @xmath2 can resolve @xmath74 towards @xmath77 .",
    "this follows as then @xmath39 and @xmath59 would have to resolve towards @xmath62 and @xmath67 and , if @xmath107 is a leaf that verifies @xmath20 ( note @xmath139 ) , then the embedding of @xmath2 in @xmath1 would display the rooted triple @xmath140 ; a contradiction .",
    "so we can delete arc @xmath131 .",
    "similarly , if we are in situations  2 or  3 , and @xmath80 lies on @xmath83 or @xmath84 , then we can delete arc @xmath141 .",
    "now suppose @xmath79 is an ancestor of @xmath60 ( denoted @xmath142 in the table ) .",
    "then , if an embedding of @xmath2 in @xmath1 uses the arc @xmath131 and arc @xmath117 , the last common ancestor of @xmath37 and @xmath70 in the embedding would be an ancestor of @xmath79 .",
    "thus there is no path to a leaf other than @xmath37 , @xmath38 , and @xmath70 from @xmath79 and so an embedding exists with @xmath39 and @xmath59 resolved towards @xmath62 and @xmath67 , respectively .",
    "similarly , if @xmath79 is an ancestor of @xmath68 and an embedding of @xmath2 in @xmath1 exists using arcs @xmath138 and @xmath136 , then one exists with @xmath39 and @xmath59 resolved towards @xmath63 and @xmath69 , respectively .",
    "a symmetric argument holds with @xmath80 instead of @xmath79 .",
    "thus if @xmath79 is an ancestor of @xmath60 and @xmath80 lies on @xmath83 or @xmath84 ( or vice versa ) , then we can delete arc @xmath137 and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 . likewise ,",
    "if @xmath79 is an ancestor of @xmath68 and @xmath80 lies on @xmath81 or @xmath82 , then we can delete arc @xmath136 .",
    "also , if both @xmath79 and @xmath80 are ancestors of @xmath60 , we can delete arc @xmath117 , and if both are ancestors of @xmath68 , we can delete arc @xmath115 . in each of the last three subcases ,",
    "the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 .",
    "if @xmath79 is an ancestor of @xmath60 and @xmath80 lies on @xmath81 or @xmath82 , and an embedding of @xmath2 in @xmath1 exists that resolves @xmath74 towards @xmath78 , then in this embedding @xmath39 and @xmath59 must resolve towards @xmath63 and @xmath69 , respectively , in which case , in the embedding , the last common ancestor of @xmath37 and @xmath70 is @xmath40 in situation  1 , and an ancestor of @xmath20 in situations  2 and  3 . in situation  1 , we could therefore resolve @xmath74 towards @xmath77 without changing the topology of the embedded tree . in situations  2 and  3 , if @xmath139 , where @xmath107 is a leaf that verifies @xmath20 , then the embedding displays the rooted triple @xmath143 ; a contradiction .",
    "thus @xmath144 , and therefore @xmath79 lies on the path from @xmath20 to @xmath60 .",
    "we can therefore resolve @xmath74 towards @xmath77 without changing the topology of the embedded tree .",
    "it follows that in either case , we can delete arc @xmath141 and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 .",
    "a similar argument holds if we interchange the roles of @xmath79 and @xmath80 , in which case , we delete the arc @xmath145 .",
    "a symmetric argument holds in situation  1 if @xmath79 is an ancestor of @xmath68 and @xmath80 lies on @xmath83 or @xmath84 ( or vice versa ) .",
    "the remaining subcase is that @xmath79 is an ancestor of @xmath60 and @xmath80 is an ancestor of @xmath68 , or vice versa .",
    "we now show that @xmath146 displays @xmath147 if and only if @xmath1 displays @xmath2 . in any embedding of @xmath147 in @xmath146",
    ", there is a vertex whose leaf descendants are precisely @xmath37 and @xmath70 .",
    "also , in the embedding , the peak of the embedded path from @xmath37 to @xmath70 must be an ancestor of either @xmath60 or @xmath68 , since there is no ( directed ) path from either to @xmath70 .",
    "if this peak is an ancestor of @xmath60 , then we can extend this embedding to an embedding of @xmath2 in @xmath1 by adding arcs @xmath148 and @xmath149 , while if it is an ancestor of @xmath68 , then we extend the embedding to such an embedding by adding arcs @xmath150 and @xmath149 .",
    "these must still be valid embeddings since there is a tree path from @xmath60 to @xmath67 , and from @xmath68 to @xmath69 , so in the embedding @xmath38 is in the correct location .",
    "conversely , any embedding of @xmath2 in @xmath1 gives rise to an embedding of @xmath147 in @xmath146 by deleting @xmath38 and its incoming arc .",
    "this completes the justification of table  [ singlectable ] .",
    "finally , we describe the subroutines for the special case when the sibling of the parent of @xmath37 and @xmath38 in @xmath2 is the parent of a second cherry @xmath72 .",
    "* requirement : * the vertices @xmath151 and @xmath40 are non - comparable .    if @xmath151 and @xmath40 are non - comparable , then , in any embedding of @xmath2 in @xmath1 , the last common ancestor of @xmath37 and @xmath70 is an ancestor of @xmath40 , and so there are no paths in the embedding from @xmath40 to any leaf @xmath11 other than @xmath37 and @xmath38 ; otherwise , the embedding displays the rooted triple @xmath133 .",
    "thus , we can resolve @xmath39 either way , and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 .",
    "* requirement : * the vertex @xmath151 is not on one of the paths from @xmath40 to either @xmath39 or @xmath59 .    if @xmath151 is not on one of the paths from @xmath40 to either @xmath39 or @xmath59 , then , in any embedding of @xmath2 in @xmath1 , the last common ancestor of @xmath37 and @xmath70 is an ancestor of @xmath151 , and so there are no paths in the embedding from @xmath151 to a leaf @xmath11 other than @xmath70 and @xmath71 ; otherwise the embedding displays the rooted triple @xmath132 .",
    "therefore we can resolve @xmath73 either way , and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath152 .",
    "* requirement : * there is a reticulation @xmath20 that is an ancestor of @xmath153 or @xmath154 but it is not an ancestor of @xmath37 or @xmath38 .",
    "reticulation @xmath20 must be verified by some leaf @xmath155 since @xmath20 is a descendant of @xmath151 and an ancestor of @xmath73 and @xmath156 , but not an ancestor of either @xmath37 or @xmath38 .",
    "thus any embedding that resolves @xmath73 towards @xmath20 would display the rooted triple @xmath132 ; a contradiction .",
    "we now justify the final actions in table  [ cherryctable ] .",
    "[ sc2.4 ]    * requirement : * easy cases 17 and special cases 2.12.3 do not apply .",
    "the sibling of the parent of @xmath37 and @xmath38 in @xmath2 is the parent of a cherry @xmath72 .",
    "if an embedding of @xmath2 in @xmath1 uses the arc @xmath157 and @xmath158 is on the path @xmath81 or @xmath82 , then @xmath39 and @xmath59 will have to resolve towards @xmath63 and @xmath69 , respectively , so that the embedding contains a vertex whose leaf descendants are @xmath37 and @xmath38 .",
    "likewise , if @xmath158 is an ancestor of @xmath60 and @xmath159 , so that @xmath70 and @xmath71 do not meet before reaching an ancestor of @xmath37 , then an embedding of @xmath2 in @xmath1 that uses arc @xmath157 implies @xmath39 and @xmath59 will have to resolve towards @xmath63 and @xmath69 , respectively ; otherwise , one of the rooted triples @xmath160 and @xmath161 would be displayed by the embedding .",
    "the same outcomes hold if replace @xmath162 and @xmath158 with @xmath163 and @xmath164 , respectively , in the hypotheses .",
    "thus if both @xmath158 and @xmath164 are of type  1 , we can delete @xmath136 since , either way @xmath73 resolves , the embedding can not use that arc , and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 . similarly ,",
    "if both @xmath158 and @xmath164 are of type  2 , we can delete @xmath117 .",
    "if we are in situation  1 and , without loss of generality , @xmath158 is type  1 and @xmath164 is type  2 , then , in an embedding of @xmath2 in @xmath1 , the last common ancestor of @xmath37 and @xmath70 would be @xmath40 which ever way we resolved @xmath73 .",
    "thus , in any such embedding , there is no path to a leaf other than @xmath37 , @xmath38 , @xmath70 , and @xmath71 from @xmath40 and so , if an embedding exists , one exists with @xmath73 resolved each way ( and @xmath39 and @xmath59 resolved accordingly ) .",
    "thus we can delete @xmath157 , and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 .",
    "if we are in situations  2 or  3 , and @xmath158 is of type  2 , then no embedding of @xmath2 in @xmath1 can resolve @xmath165 towards @xmath77 .",
    "this follows as then @xmath39 and @xmath59 would have to resolve towards @xmath62 and @xmath67 , respectively .",
    "but then if @xmath107 is a leaf that verifies @xmath20 , and noting that @xmath166 , the embedding would display the rooted triple @xmath140 ; a contradiction .",
    "so we can delete arc @xmath157 , and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 .",
    "similarly , if @xmath164 is of type  2 , we can delete arc @xmath163 .",
    "now suppose @xmath158 is of type  3 .",
    "then if an embedding of @xmath2 in @xmath1 uses the arc @xmath157 and arc @xmath117 , it follows that the last common ancestor of @xmath37 and @xmath70 in this embedding would be an ancestor of @xmath158 .",
    "thus in such an embedding there is no path to a leaf other than @xmath37 , @xmath38 , @xmath70 , and @xmath71 from @xmath158 , and so an embedding also exists with @xmath39 and @xmath59 resolved towards @xmath62 and @xmath67 .",
    "similarly , if @xmath158 is of type  4 and an embedding of @xmath2 in @xmath1 exists using arcs @xmath157 and @xmath136 , then one exists with @xmath39 and @xmath59 resolved towards @xmath63 and @xmath69 .",
    "a symmetric argument holds with @xmath164 instead of @xmath158 .",
    "thus if @xmath158 is of type  3 and @xmath80 is of type  2 ( or vice versa ) , we can delete arc @xmath137 , and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 . likewise ,",
    "if @xmath158 is of type  4 and @xmath164 is of type  1 ( or vice versa ) , we can delete arc @xmath115 .",
    "also , if both @xmath158 and @xmath164 are of type  3 , we can delete arc @xmath137 , and if both are of type  4 , we can delete arc @xmath136 . in each of the last three subcases , the resulting phylogenetic network displays @xmath2 if and only if @xmath1 displays @xmath2 .",
    "suppose that @xmath158 is of type  3 and @xmath164 is of type  1 , and that an embedding of @xmath2 in @xmath1 exists that resolves @xmath73 and @xmath156 towards @xmath78 and @xmath167 , respectively .",
    "then , in this embedding , @xmath39 and @xmath59 must resolve towards @xmath63 and @xmath69 , respectively , and the last common ancestor of @xmath37 and @xmath70 is @xmath40 in situation  1 , and an ancestor of @xmath20 in situation  2 and  3 . in situation  1 , we could therefore resolve @xmath73 and @xmath156 towards @xmath77 and @xmath168 without changing the topology of the embedded tree . in situations  2 and  3 ,",
    "if @xmath169 , where @xmath107 is a leaf that verifies @xmath20 , then the embedding displays the rooted triple @xmath143 ; a contradiction .",
    "thus , in situations  2 and  3 , we may assume @xmath170 , and therefore @xmath158 lies on the path from @xmath20 to @xmath60 .",
    "we can therefore resolve @xmath73 to @xmath77 without changing the topology of the embedding of @xmath2 .",
    "regardless of the situation , we can delete arc @xmath163 , and the resulting phylogenetic network on @xmath0 displays @xmath2 if and only if @xmath1 displays @xmath2 .",
    "a similar argument holds if @xmath158 is of type  1 and @xmath164 is of type  3 , in which case , we delete @xmath157 .",
    "a symmetric argument holds in situation  1 if @xmath158 is of type  4 and @xmath164 is of type  2 ( or vice versa ) .",
    "the remaining case is that @xmath158 is of type 3 and @xmath164 is of type  2 ( or vice versa ) .",
    "an identical argument to that given to justify the entries in table  [ singlectable ] corrsponding to deleting the leaf @xmath38 in the first special case applies .",
    "in particular , this gives that @xmath146 displays @xmath147 if and only if @xmath1 displays @xmath2 .",
    "in this section we consider the running time of the treedetection algorithm .",
    "the input to the algorithm is a reticulation - visible network @xmath1 on a finite set @xmath0 and a rooted binary phylogenetic @xmath0-tree @xmath2 . traditionally running times in phylogenetics",
    "are given in terms of the size of the taxa set , @xmath171 , although the representation of a general phylogenetic network may be much larger that @xmath172 .",
    "however in the case of reticulation - visible networks , the number of vertices of the network is at most @xmath4 , and so the input in this case is of size @xmath172 ( see theorem  [ sharp ] ) .",
    "clearly determining if @xmath7 can be done in constant time , and finding a cherry @xmath173 in @xmath2 can be done in linear time .",
    "the main body of the algorithm then boils down to determining which of several cases occurs , and then running a specific subroutine .",
    "we first show that we can determine which case occurs in @xmath174 steps . to check the easy cases we need to know the vertices @xmath134 and @xmath40 , and their ancestors and descendants .",
    "for each vertex of @xmath1 we prepare a list of :    * all ancestors * all descendants * all those descendants that verify the vertex * all those descendants reachable by a tree - path .",
    "we also order the vertices by distance of the vertex from the root ; since there are less than @xmath175 vertices altogether , this can be done in @xmath174 steps using a depth first search .",
    "we can then scan through the list in order to determine @xmath134 and @xmath40 , by checking whether each vertex satisfies the conditions .",
    "further scanning through the list and applying simple checks at each vertex can determine which , if any , of the easy cases occurs , and since we only need compare at most two vertices ( ec7 ) , this can all be achieved in @xmath174 steps .    depending on whether the sibling of the cherry @xmath173 is a single leaf @xmath70 or another cherry @xmath176 , we must then check which of several special cases occurs .",
    "however , once we have identified @xmath74 , or @xmath177 , by looking through the lists above , it is again a matter of checking whether vertices with certain straightforward conditions on their ancestors and descendants exist or not , and this can be done in @xmath174 steps .    finally , each of the subroutines either returns * no * or modifies @xmath1 and possibly @xmath2 before recursively calling treedetection . determining whether to return * no * or make the modifications can be accomplished in @xmath174 steps , since they again require at most checking the existence of vertices with specific ancestor or descendant conditions , possibly including reachability by a tree - path , but since the network is of linear size , this is can be done , and then any modifications of @xmath1 and @xmath2 are only by deleting a constant number of arcs or vertices .",
    "this analysis includes determining which row of the final tables is appropriate , since we can identify the vertices @xmath178 , or @xmath179 by scanning through the vertex list and checking straightforward ancestor / descendant conditions , and then determining which of the rows is applicable is again checking ancestor and descendant conditions on these vertices , e.g. we can tell if a vertex is on a path from @xmath60 to @xmath62 by checking if it is a descendant of @xmath60 and an ancestor of @xmath62 .",
    "thus the entire algorithm breaks down into a constant number of checks , each of which can be accomplished in @xmath174 steps , followed by a small modification to @xmath1 and possibly @xmath2 , and a recursive call to treedetection on an input that is smaller in either the number of reticulations or the size of the leaf set .",
    "since the number of reticulations is linear in @xmath171 , there can be at most @xmath172 recursive calls , and so the entire algorithm completes in @xmath19 steps .",
    "in this section , we establish theorem  [ sharp ] .    let @xmath1 be a reticulation - visible network on @xmath0 with @xmath180 vertices in total and @xmath181 reticulations .",
    "let @xmath15 .",
    "we first show that @xmath182 and @xmath183 the proof of these two inequalities is by induction on @xmath184 . if @xmath185 , then @xmath1 consists of a single vertex , and  ( [ ineq1 ] ) and  ( [ ineq2 ] ) hold .",
    "suppose that @xmath186 , and that  ( [ ineq1 ] ) and  ( [ ineq2 ] ) hold for all reticulation - visible networks with fewer leaves .",
    "first assume that @xmath1 has a cherry @xmath43 .",
    "let @xmath35 be the network obtained from @xmath1 by reducing @xmath43 .",
    "since every vertex in @xmath1 is visible , it follows that every vertex in @xmath35 is visible , and so @xmath35 is a reticulation - visible network .",
    "therefore , as @xmath35 has @xmath187 vertices , @xmath181 reticulations , and @xmath188 leaves , it follows by the induction assumption that @xmath189 and @xmath190 , so @xmath191 and @xmath192 thus ( [ ineq1 ] ) and  ( [ ineq2 ] ) hold .",
    "now assume that @xmath1 does not contain a cherry .",
    "let @xmath10 be a reticulation in @xmath1 such that amongst all reticulations in @xmath1 it is at maximum distance from the root @xmath9 .",
    "let @xmath25 be a path from @xmath9 to @xmath10 that realises this maximum distance . by maximality and the assumption that @xmath1 has no cherry , the child vertex of @xmath10 is a leaf , @xmath11 say .",
    "also , note that , as @xmath1 is reticulation visible , neither parent of @xmath10 is a reticulation .",
    "let @xmath35 be the network obtained from @xmath1 by deleting the vertices @xmath10 and @xmath11 and their incident arcs , contracting any resulting degree - two vertices , and then replacing any parallel arcs with a single arc and contracting any degree - two vertices resulting from this replacement .",
    "since the final step in this process could not have created any further parallel arcs , it is easily seen that @xmath35 is a phylogenetic network on @xmath193 .",
    "furthermore , in the process of obtaining @xmath1 from @xmath35 , we initially lose @xmath119 reticulation and @xmath46 vertices in total .",
    "additionally , at most two pairs of parallel arcs are replaced with a single arc .",
    "each such replacement , loses @xmath119 reticulation and @xmath31 vertices in total .",
    "thus , if @xmath194 and @xmath195 denotes the total number of vertices and the number of reticulations in @xmath35 , we have @xmath196 and @xmath197    we next show that either @xmath35 or a phylogenetic network obtained from @xmath1 in an analogous way is reticulation visible , thereby obtaining a phylogenetic network that satisfies the induction assumptions .",
    "let @xmath64 and @xmath65 denote the parents of @xmath10 . if @xmath11 does not verify the visibility of any reticulation other than @xmath10 in @xmath1 , then @xmath35 is reticulation visible",
    ". therefore , suppose that @xmath11 also verifies the visibility of a reticulation @xmath54 in @xmath1 , where @xmath198 .",
    "without loss of generality , we may assume that @xmath64 is the last parent of @xmath10 on @xmath25 .",
    "if @xmath64 is an ancestor of @xmath65 , then @xmath25 is not a path of maximum distance from @xmath9 to @xmath10 , so either @xmath64 is a descendant of @xmath65 or @xmath64 is non - comparable to @xmath65 . in either case",
    ", this implies that @xmath64 has a child vertex , not equal @xmath10 , that is not an ancestor of @xmath10 .",
    "let @xmath199 denote this child vertex . by the maximality of @xmath25 and",
    "the assumption that @xmath1 has no cherries , @xmath199 is either a leaf or a reticulation .",
    "if @xmath199 is a leaf , then , as every path in @xmath1 from @xmath9 to @xmath11 passes through @xmath54 , every path in @xmath1 from @xmath9 to @xmath199 also passes through @xmath54 .",
    "it now follows that if @xmath199 is a leaf , @xmath35 is reticulation visible .",
    "therefore suppose that @xmath199 is a reticulation . by the maximality of @xmath25 and",
    "the assumption that @xmath1 has no cherries , the child of @xmath199 is a leaf , @xmath200 say . let @xmath201 be the network obtained from @xmath1 by deleting @xmath199 and @xmath200 and their incident arcs , contracting any resulting degree - two vertices , and then replacing any parallel arcs with a single arc and contracting any degree - two vertex resulting from this replacement .",
    "as above , if @xmath202 and @xmath203 denote the total number of vertices and the number of reticulations in @xmath201 , then @xmath204 and @xmath205    if @xmath200 does not verify the visibility of any reticulation other than @xmath199 in @xmath1 , then , instead of applying the inductive step to @xmath10 , apply the inductive step to @xmath199 . in particular , @xmath201 is reticulation visible and therefore satisfies the induction assumptions .",
    "thus we may assume that @xmath200 also verifies the visibility of a reticulation @xmath105 in @xmath1 , where @xmath206 .",
    "now every path in @xmath1 from @xmath9 to @xmath11 passes through @xmath54 , in particular , every path in @xmath1 from @xmath9 to @xmath11 using the arc directed into @xmath64 passes through @xmath54 . in turn",
    ", this implies that every path in @xmath1 from @xmath9 to @xmath200 using the arc directed into @xmath64 passes through @xmath54 .",
    "we deduce that either @xmath54 is an ancestor of @xmath105 or @xmath105 is an ancestor of @xmath54 in @xmath1 .",
    "if @xmath54 is an ancestor @xmath105 in @xmath1 , then every path in @xmath1 from @xmath9 to @xmath200 passes through @xmath54 , and so @xmath35 is reticulation visible , in which case , @xmath35 satisfies the induction assumptions .",
    "on the other hand , if @xmath105 is an ancestor of @xmath54 in @xmath1 , then every path in @xmath1 from @xmath9 to @xmath11 passes through @xmath105 , and so @xmath201 is reticulation visible , in which case , @xmath201 satisfies the induction assumptions .    without loss of generality",
    ", we may assume that the induction assumptions hold for @xmath35 .",
    "by induction , and ( [ eqn1 ] ) and ( [ eqn2 ] ) , it follows that @xmath207 so @xmath208 , and @xmath209 so @xmath210 .",
    "hence  ( [ ineq1 ] ) and  ( [ ineq2 ] ) hold .    to show that the upper bounds  ( [ ineq1 ] ) and  ( [ ineq2 ] ) are sharp for all integers @xmath18 , consider the reticulation - visible network shown in fig .",
    "[ 2sharp ] . here",
    "the bound is tight for when @xmath211 .",
    "for all integers @xmath212 , an analogous example can be constructed by replacing a leaf with a complete copy of this network .",
    "the resulting network is reticulation - visible , and the number of leaves has increased by  @xmath119 , the number of reticulations has increased by  @xmath120 , and the total number of vertices has increased by  @xmath213 , thereby retaining the tightness of the bound .",
    "of course , if @xmath185 , then @xmath1 consists of a single vertex and the bounds hold exactly .",
    "p.  gambette , a.  d.  m.  gunawan , a.  labarre , s.  vialette , l.  zhang .",
    "locating a tree in a phylogenetic network in quadratic time . in : _",
    "19th ann .",
    "( recomb15 ) _ , lecture notes in computer science , vol .  9029 , pp .",
    "96107 , 2015 ."
  ],
  "abstract_text": [
    "<S> let @xmath0 be a finite set , @xmath1 be a reticulation - visible network on @xmath0 , and @xmath2 be a rooted binary phylogenetic tree . we show that there is a polynomial - time algorithm for deciding whether or not @xmath1 displays @xmath2 . </S>",
    "<S> furthermore , for all @xmath3 , we show that @xmath1 has at most @xmath4 vertices in total and at most @xmath5 reticulation vertices , and that these upper bounds are sharp . </S>"
  ]
}