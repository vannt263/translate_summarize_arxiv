{
  "article_text": [
    "given a graph @xmath8 , its _ metric dimension _ is the cardinality of a smallest set @xmath9 such that for every pair @xmath10 , there is a @xmath11 such that the length of a shortest path from @xmath5 to @xmath4 is different from the length of a shortest path from @xmath5 to @xmath6 . in this case",
    "we say that @xmath12 are _ resolved _ by @xmath5 and @xmath13 .",
    "elements of the set @xmath13 are called _ landmarks_. a set @xmath14 that resolves all pairs of vertices is called a _ resolving set_. the problem of finding the metric dimension of a given graph @xmath0 is called _ metric dimension _ , but is also known as _",
    "harary s problem _ , and the _ locating number _ or _ rigidity _",
    "the problem was defined independently by harary and melter  @xcite and slater  @xcite , and has received a lot of attention from researchers in different disciplines ( see e.g.  @xcite and references therein ) .",
    "for example , a recent survey by bailey and cameron  @xcite notes an interesting connection to group theory and graph isomorphism .",
    "computing the metric dimension has proved to be a hard problem , and there are very few results on the computational complexity of the problem .",
    "the decision version of metric dimension is known to be np - complete on general graphs  @xcite .",
    "khuller  et al .",
    "@xcite gave a linear - time algorithm to compute the metric dimension on a tree .",
    "characterizations for graphs with metric dimension @xmath15 and @xmath16 are also given in the same work .",
    "moreover , @xcite also provides a @xmath17-approximation algorithm for the metric dimension of any graph .",
    "beerliova  et al .",
    "@xcite proved that the metric dimension of a general graph can not be approximated within @xmath18 , unless p@xmath19np .",
    "hauptmann  et al .",
    "@xcite improved on this by giving a @xmath20 inapproximability result under mild complexity assumptions .",
    "they also show that determining the metric dimension is apx - hard for bounded - degree graphs , and apx - complete for superdense graphs ( graphs for which the complement is a sparse graph ) . to the best of our knowledge",
    ", no further results are known about the complexity of this problem .",
    "[ [ our - results ] ] our results + + + + + + + + + + +    in the present work , we narrow the tractability gap of metric dimension . from the hardness side , we show that metric dimension on planar graphs , called planar metric dimension , is np - hard , even for bounded degree planar graphs . even though garey and johnson considered metric dimension over 30 years ago in their book  ( * ? ? ? * problem gt61 ) , but the complexity of the planar version of the problem remained unknown thus far . from the algorithmic side , we show that there is a polynomial - time algorithm to find the metric dimension of outerplanar graphs .",
    "this significantly improves the 15-year - old algorithm on trees by khuller  et al .",
    "@xcite .",
    "our algorithm for outerplanar graphs presents a leap forward in the type of problems that can be solved on such graphs .",
    "many graph problems , e.g.  independent set , are _ local _ in the sense that a vertex has direct effect on its neighbors only  indirectly the effect propagates farther .",
    "the main obstacle in the metric dimension problem is that it is _ nonlocal _ : a landmark can resolve faraway vertices .",
    "this means that standard approaches fail to work for it . in her seminal paper",
    ", baker writes that the dynamic programming technique therein `` _ will work for problems that involve local conditions on nodes and edges _ ''",
    "this does not include metric dimension .",
    "for the same reason , the generalizations of baker s work by eppstein  @xcite and courcelle  @xcite do not apply either , and a different kind of approach is necessary .    the crux then to both our hardness and algorithmic results is our ability to constrain the effects of a landmark to a small area .",
    "the np - hardness proof constructs a specific family of planar graphs for which metric dimension is essentially a local problem .",
    "the algorithm uses a tree structure to traverse the graph , together with several data structures that track the influence of landmarks on other vertices .",
    "the structures that we employ differ significantly from the ones used in standard bounded - treewidth techniques , moreover , whereas outerplanar graphs have constant treewidth  @xcite , the tree structure used in our approach leads to a decomposition that can have arbitrary width .",
    "we believe that our algorithmic techniques present a generalization of baker s work , and are of independent interest .",
    "in particular , they might lead to ( new ) algorithms for a broad class of non - local problems ( see also section  [ conc ] ) .",
    "[ [ overview - of - the - np - hardness - proof ] ] overview of the np - hardness proof + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    as a corollary of the work by dahlhaus et al .",
    "@xcite , we prove a new version of planar 3-sat to be np - complete .",
    "we reduce this problem to metric dimension .",
    "this is done by constructing a planar graph consisting of clause gadgets and variable gadgets .",
    "let @xmath21 be the number of variables .",
    "each variable gadget must have 4 landmarks , 3 at known , specific locations , but for the fourth we have three different choices .",
    "they correspond to the variable being true , false , or undefined .",
    "these @xmath22 landmarks are a metric base if and only if they resolve all pairs in clause gadgets , which happens only if they correspond to a satisfying truth assignment of the sat - instance .",
    "[ [ overview - of - the - algorithm ] ] overview of the algorithm + + + + + + + + + + + + + + + + + + + + + + + + +    first , we characterize resolving sets in outerplanar graphs by giving two necessary and sufficient requirements for an arbitrary vertex set to be a resolving set .",
    "then , taking as a base the dual of the biconnected components of the graph @xmath0 , we define a tree @xmath23 .",
    "vertices of @xmath23 corresponds to faces and cut vertices of @xmath0 , and edges to inner edges and bridges of @xmath0 .",
    "the algorithm uses dynamic programming to process @xmath23 , starting at the leaves and advancing towards the root .",
    "data structures called _ boundary conditions _ and _ configurations _ are used on edges and vertices of @xmath23 , respectively , to describe how the landmarks are positioned .",
    "boundary conditions track the effects of landmarks placed in the already processed part of the graph and the possible effects of sets of landmarks to placed in the unexplored paths of the graphs .",
    "the main algorithmic novelty lies in the configurations , which control the process of combining the boundary conditions on edges towards children of the current vertex @xmath24 into a boundary condition on the edge towards the parent of @xmath25 .",
    "the configurations highly depend on the vertices of @xmath0 represented by @xmath25 .",
    "however , even though the number of vertices of @xmath0 represented by @xmath25 might be unbounded , we can show that the total number of relevant configurations is only polynomial .",
    "the use of configurations also presents a stark contrast with the techniques used in bounded treewidth algorithms , where the combination process commonly is a simple static procedure .    [ [ preliminaries ] ] preliminaries + + + + + + + + + + + + +    for basic notions and results in graph theory , we refer the reader to any textbook on the topic , e.g.  @xcite .",
    "all graphs are finite , undirected , and unless otherwise stated , connected .",
    "we use the notation @xmath26 to denote an edge from @xmath27 to @xmath28 . by distance",
    "@xmath29 we mean the graph distance .",
    "the vertex and edge sets of @xmath30 are denoted by @xmath31 and @xmath32 , respectively .",
    "recall that a graph is _ planar _ if and only if it does not contain a subgraph that is a subdivision of @xmath33 or @xmath34 , and it is _ outerplanar _ if and only if it does not contain a subdivision of @xmath35 or @xmath36 .",
    "a graph @xmath0 has a _ cut vertex _ if the removal of that vertex disconnects the graph into two components .",
    "a graph is a _ biconnected _ if it has no cut vertices .",
    "if @xmath0 is a biconnected outerplanar graph , @xmath0 has a planar embedding in which the edges on the boundary of the outer face form a hamiltonian cycle .",
    "we call those edges _ outer edges _ and the rest of the edges are called _",
    "inner edges_. given @xmath0 and @xmath37 , @xmath38 denotes the set of neighbors of @xmath28 in @xmath0 .",
    "given a set @xmath39 , we denote by @xmath40 the power set of @xmath39 .",
    "it is well known that @xmath41-sat is np - complete ( see  @xcite ) .",
    "we require a special planar version of @xmath41-sat to be np - complete .",
    "let @xmath42 be a boolean formula , which uses the set of variables @xmath43 and has the set of clauses @xmath44 . then the graph @xmath45 , where @xmath46 , is the _ clause - variable graph _ of @xmath42 .",
    "with the notation @xmath47 we mean that variable @xmath28 ( or its negation ) occurs in clause @xmath44 .",
    "observe that @xmath48 is always bipartite .",
    "[ thm : dahlhaus ] the problem of deciding whether a boolean formula @xmath42 is satisfiable is np - complete , even if    * every variable occurs in exactly three clauses ( twice positive , once negative ) , * every clause contains two or three distinct variables , and * @xmath48 is planar .    as a corollary of theorem  [ thm : dahlhaus ] , we get the following result , which is the starting point of our work .",
    "[ thm : planar3sat ] the problem of deciding whether a boolean formula @xmath42 is satisfiable is np - complete , even if    * every variable occurs exactly once negatively and once or twice positively , * every clause contains two or three distinct variables , * every clause with three distinct variables contains at least one negative literal , and * @xmath48 is planar .",
    "we call this decision problem @xmath15-negative planar 3-sat",
    ".    let @xmath42 be a boolean formula satisfying the constraints of theorem  [ thm : dahlhaus ] . by modifying @xmath42 we will construct a formula @xmath49 that fulfills all the constraints of the theorem statement and is satisfiable if and only if @xmath42 is satisfiable .",
    "we only need to eliminate those clauses containing three positive literals .",
    "suppose that @xmath50 is such a clause of @xmath42 with distinct variables @xmath51 .",
    "now add a new variable @xmath52 , and replace the original clause by the clauses @xmath53 and @xmath54 this completes the construction of @xmath49 .",
    "as this construction replaces some edges of @xmath55 with paths , it preserves planarity .",
    "given a satisfying truth assignment of @xmath42 , we get a satisfying assignment of @xmath49 by setting @xmath56 .",
    "a satisfying assignment of @xmath49 implies a satisfying assignment of @xmath42 .",
    "so @xmath49 is satisfiable if and only if @xmath42 is .",
    "the theorem now follows straightforwardly from theorem  [ thm : dahlhaus ] .    to prove that planar metric dimension is np - hard",
    ", we will give a reduction from @xmath15-negative planar 3-sat .",
    "the idea behind the graph constructed in this reduction is the following .",
    "given an instance @xmath42 of @xmath15-negative planar 3-sat , we first find a planar embedding of its clause - variable graph @xmath48 .",
    "we then replace each variable vertex of @xmath48 by a _ variable gadget _",
    "( see figure  [ fig : var ] ) , and each clause vertex of @xmath48 by a _ clause gadget _",
    "( see figure  [ fig : clause ] ) . by identifying vertices of variable gadgets and vertices of clause gadgets in an appropriate way ( see figure  [ fig : bigone ] ) , we obtain a planar graph @xmath57 that will be our instance of planar metric dimension .",
    "we now describe our construction in detail .",
    "consider a planar embedding of @xmath48 , which can be found in linear time  @xcite .",
    "we first replace each variable vertex of @xmath48 by a variable gadget . in figure",
    "[ fig : var ] , the vertices marked by unfilled circles will be identified with vertices from a clause gadget later on .",
    "there are three groups ( connected components ) of such vertices in the figure .",
    "the groups containing vertices @xmath58 and @xmath59 will be identified with vertices in clause gadgets where this variable appears positively in the corresponding clause ; the group containing @xmath60 will be identified with vertices in clause gadgets where this variable appears negatively . by rotating and contorting the variable gadget appropriately",
    ", we can ensure that the three groups point into the right direction ( i.e.  the negative - appearance group faces the clause vertex where the variable appears negatively ) .",
    "next , we replace the clause vertices by clause gadgets . the exact gadget we use",
    "depends on whether the clause contains two or three variables ( see figure  [ fig : clause ] ) .",
    "we restrict our description to the three - variable case , as the two - variable case is similar and simpler . in figure",
    "[ fig : clause ] , the vertices marked by unfilled circles will be identified with vertices from a variable gadget .",
    "there are again three groups of such vertices , one for each variable occurring in the clause .",
    "obviously , we will identify the @xmath61-vertex of a variable group with the @xmath61-vertex of a clause group , and the same for the @xmath62-vertices .",
    "we call this _ matching_. it is not entirely straightforward to do this matching in a manner that preserves planarity . consider the way in which the groups and the @xmath61 and @xmath62 vertices appear on the boundary of the clause gadget .",
    "in figure  [ fig : clause ] , the pairs appear in order @xmath63 clockwise starting from the top .",
    "as illustrated in figure  [ fig : case2 ] , @xmath64 is also possible .",
    "the remaining two alternatives , @xmath65 and @xmath66 are to be avoided .",
    "this is accomplished by choosing a variable appearing negatively in the clause and mirroring the corresponding variable gadget around the axis @xmath67@xmath68 ( see figure  [ fig : var ] ) .",
    "this does not affect our ability to connect the variable to other clauses .",
    "this completes the construction .",
    "call the resulting graph @xmath57 , which is planar and has bounded degree by construction .",
    "we remark that each variable appears once negatively in @xmath42 , and once or twice positively .",
    "so if the variable appears only twice , then @xmath69 or @xmath70 in the corresponding variable gadget will not be identified with a group of vertices in a clause gadget .    in figure",
    "[ fig : bigone ] we can see an example of the reduction and the resulting planar graph from the specific instance of @xmath15-negative planar 3-sat @xmath71 .    we now make several observations about the graph @xmath57 and the way landmarks need to be positioned on it .",
    "each @xmath62-vertex is contained in a triangle , say with other vertices @xmath72 .",
    "observe that @xmath73 and @xmath74 can only be resolved by a landmark on @xmath73 or @xmath74 .",
    "we call these _ forced landmarks_. in fact , in any smallest set of landmarks exactly one of @xmath72 will be a landmark .",
    "then it follows by construction that @xmath57 requires exactly @xmath75 forced landmarks , where @xmath21 is the number of variables of @xmath42 .    using the forced landmarks",
    ", we can resolve most pairs of vertices , as shown by the following lemma .",
    "we say that @xmath67 , @xmath76 , @xmath77 , @xmath78 and @xmath68 are _ strictly inside _ the variable gadget .",
    "[ lem : forced ] let @xmath79 be a pair of vertices , which is not @xmath80 , @xmath81 , @xmath82 or @xmath83 from the same gadget .",
    "then the pair is resolved by forced landmarks .",
    "it is straightforward to check the cases where both @xmath4 and @xmath6 are in the same clause or variable gadget .",
    "there are two remaining cases : either @xmath79 are in different clause gadgets , or @xmath4 is strictly inside a variable gadget and @xmath6 outside that gadget .",
    "consider the first case , that is , @xmath12 are in different clause gadgets . denote the gadget containing @xmath4 by @xmath84 , and the gadget containing @xmath6 by @xmath85 .",
    "let @xmath86 be a forced landmark that is closest to @xmath4 , and let @xmath87 be a forced landmark that is closest to @xmath6 . without loss of generality , @xmath88 .",
    "we will show that @xmath89 .",
    "since @xmath79 are in distinct clause gadgets , the shortest path @xmath90 from @xmath6 to @xmath86 crosses at least one variable gadget @xmath91 , and enters it through a group @xmath92 .",
    "let @xmath93 be the first vertex of @xmath94 that occurs on @xmath90 , and let @xmath95 be the forced landmark in the triangle connected to @xmath62 . if @xmath96 , then @xmath90 contains at least two edges in @xmath91 , and if @xmath97 , @xmath90 contains at least one edge in @xmath91 . in either case",
    "@xmath90 also contains at least one edge in @xmath84 . since @xmath98 , @xmath99 , in both cases the inequality @xmath100 holds .",
    "hence @xmath101 .",
    "now consider the second case , and assume that @xmath4 is strictly inside the variable gadget in figure  [ fig : z1z3 ] .",
    "if @xmath6 is in the picture , it can be readily verified that @xmath4 and @xmath6 are resolved by the forced landmarks of the variable gadget .",
    "we claim that if @xmath6 is outside of the picture , then @xmath102 , where @xmath103 and @xmath104 are the forced landmarks in the triangles attached to @xmath105 and @xmath106 respectively .",
    "this implies that @xmath103 or @xmath104 is at distance at least four from @xmath6 , whereas the distance of @xmath103 and @xmath104 to @xmath4 is at most three , implying that @xmath4 and @xmath6 are resolved .",
    "to prove the claim , note that if shortest paths from @xmath6 to @xmath107 and @xmath108 both contain @xmath109 ( or equivalently @xmath110 ) , then @xmath111 .",
    "now consider the case where shortest paths from @xmath6 to @xmath112 include @xmath113 respectively .",
    "any path from @xmath109 to @xmath110 that is not contained in the figure must cross at least two clause gadgets and one variable gadget , so it has length at least @xmath114 .",
    "this gives @xmath115 , and @xmath102 .",
    "it remains to analyze how the pairs excluded in lemma  [ lem : forced ] can be resolved .",
    "this will rely on the satisfiability of @xmath42 of course ( as described below ) , but the following auxiliary lemma is crucial .",
    "[ lem : variablelandmark ] all pairs of vertices that are strictly inside a variable gadget are resolved if and only if there is a landmark strictly inside the variable gadget .",
    "it is easy to check that a landmark that is strictly inside a variable gadget together with the forced landmarks resolves all pairs of vertices that are strictly inside the gadget .",
    "if no landmark is strictly inside the variable gadget , then a shortest path from any landmark @xmath5 to @xmath116 or @xmath76 contains @xmath117 or @xmath118 .",
    "but then @xmath119 .    this lemma and the forced landmarks together imply that @xmath57 has metric dimension at least @xmath22 . with this fact in mind , we present the proof of our main result .",
    "planar metric dimension is np - complete , even on bounded - degree graphs .",
    "let @xmath42 be an instance of @xmath15-negative planar 3-sat with @xmath21 variables .",
    "construct the graph @xmath57 in the manner described before .",
    "constructing @xmath57 clearly takes time polynomial in the number of variables and clauses of @xmath42 .",
    "we now claim that @xmath57 has metric dimension @xmath22 if and only if @xmath42 is satisfiable .",
    "assume that a satisfying truth assignment for @xmath42 is given .",
    "place @xmath75 forced landmarks .",
    "if a variable has value true , place a landmark on @xmath67 in the corresponding gadget ; otherwise , place a landmark on @xmath68 .",
    "after applying lemmata  [ lem : forced ] and  [ lem : variablelandmark ] , we only need to check that pairs @xmath120 are resolved .",
    "but each such pair is resolved by the landmark strictly inside the variable that satisfies the corresponding clause , and we are done .",
    "now assume that the metric dimension is @xmath22 .",
    "we will construct a satisfying assignment for @xmath42 .",
    "each variable gadget contains exactly one landmark , which is on @xmath121 , @xmath122 , or @xmath68 .",
    "if the landmark is on @xmath121 , set the variable to true .",
    "if the landmark is on @xmath68 , set it to false .",
    "otherwise the variable can be arbitrarily set to either true or false .",
    "it remains to show that because the pairs @xmath120 are resolved , the truth assignment is satisfying .",
    "note that a landmark @xmath5 resolves pair @xmath120 if a shortest path from a landmark to either of them enters the clause gadget through some @xmath123 .",
    "if a shortest path from landmark @xmath5 to @xmath124 or @xmath125 intersects more than one clause gadget , it leaves the first clause through an @xmath62-vertex , after which it enters all subsequent ones through an @xmath62-vertex .",
    "but then @xmath120 in the final clause are not resolved .",
    "it follows that a landmark @xmath5 resolves @xmath124 and @xmath125 only if it is in an adjacent variable gadget and the corresponding variable satisfies the corresponding clause .",
    "following the claim , the reduction should construct @xmath57 as the graph for the instance of planar metric dimension and set @xmath126 to @xmath22 .",
    "in this section , we prove that metric dimension can be solved in polynomial time on outerplanar graphs .",
    "so let @xmath0 be an outerplanar graph , given together with an outerplanar embedding .",
    "note that a metric base of a disconnected graph is the union of metric bases of its component ( with one exception : isolated vertices , an edgeless graph of @xmath21 vertices has metric dimension @xmath127 ) .",
    "so we can safely assume that @xmath0 is a connected graph .",
    "we can also assume that it has at least three vertices .",
    "as a technical trick we sometimes treat the midpoint of an inner edge @xmath128 as an actual vertex .",
    "the distances from this _ midpoint vertex _ @xmath129 are such that @xmath130 and @xmath131 .",
    "we first give a characterization of the effects of resolving sets in vertices and faces of outerplanar graphs . to this end",
    ", we introduce some notation .",
    "a _ bifurcation point _ associated with @xmath132 is a vertex @xmath28 farthest from @xmath5 such that @xmath28 is on shortest path from @xmath5 to both @xmath4 and @xmath6 .",
    "more formally , @xmath28 is a bifurcation point if it is on shortest paths @xmath133 , @xmath134 , and if any shortest paths @xmath135 , @xmath136 intersect only in @xmath28 .",
    "notice that in an outerplanar graph the bifurcation point for each triple of vertices is unique .",
    "we define the function @xmath137 as @xmath138 in other words , a neighbor @xmath93 of @xmath28 is in @xmath139 if for every @xmath3 , @xmath28 is on some shortest path @xmath140 ( but not necessarily on every shortest path . ) any pair @xmath141 is left unresolved by landmarks in @xmath13 .",
    "so any resolving set @xmath13 satisfies the following :    [ req : g ] any vertex @xmath142 must have @xmath143 .",
    "if @xmath0 is a tree , then the requirement is sufficient .",
    "the following lemma gives an alternative , simpler correctness proof for the algorithm by khuller  et al .",
    "@xcite .",
    "[ lem : tree ] if @xmath0 is a tree with at least three vertices , then a set @xmath1 is a resolving set if and only if it satisfies requirement  [ req : g ] .",
    "we have already seen that any resolving set @xmath13 satisfies requirement  [ req : g ] .",
    "now assume that requirement  [ req : g ] is satisfied .",
    "we pick any two vertices @xmath144 and show that they are resolved .",
    "since @xmath0 has at least 3 vertices , there is at least one vertex @xmath142 with degree at least 2 . since @xmath145 , @xmath13 is not empty .    choose any landmark @xmath3 .",
    "if @xmath5 resolves @xmath79 , we are done .",
    "otherwise , let @xmath28 be the bifurcation point associated with @xmath132 , and let @xmath146 be the successors of @xmath28 on the shortest paths @xmath147 ( see fig .",
    "[ fig : tree ] ) . since @xmath148",
    ", we have @xmath149 . by assumption",
    ", @xmath150 can not contain both @xmath151 and @xmath152 . without loss of generality @xmath153 .",
    "then there is a landmark @xmath154 with @xmath155 , and furthermore @xmath156 .",
    "as stated earlier , the major difficulty of the metric dimension problem is that it is non - local .",
    "this is why lemma  [ lem : tree ] is useful .",
    "although stopping short of giving an actual local characterization of resolving sets , it does make the effects of a resolving set local enough to devise a polynomial - time algorithm for trees .",
    "our algorithm relies on a generalization of lemma  [ lem : tree ] to outerplanar graphs . in this case requirement",
    "[ req : g ] no longer implies that @xmath13 is a resolving set . for example , if @xmath0 is an even cycle and @xmath13 contains two antipodal vertices , then requirement  [ req : g ] is satisfied , but @xmath13 is not a resolving set .",
    "therefore we need another requirement that provides an additional condition for the effects of a resolving set on the faces of outerplanar graphs .",
    "first , we need some auxiliary definitions and lemmas .",
    "let @xmath157 be a landmark , and let @xmath44 be either a single edge or a cycle  in particular , it may be a face .",
    "the _ representative _ of @xmath5 on @xmath44 is the element of @xmath158 closest to @xmath5 , if it is unique .",
    "otherwise outerplanarity implies that there are two closest vertices , which are adjacent . in this case",
    "the representative is the midpoint of those two vertices .",
    "we can make the following observations .",
    "let @xmath44 , @xmath159 be cycles such that @xmath160 and @xmath159 is a face . if two vertices have the same representative on @xmath44 , then they must have the same representative on @xmath159 as well .",
    "[ lem : crossing ] let @xmath0 be a graph , and let @xmath161 .",
    "if neither @xmath5 nor @xmath154 resolves the pair @xmath79 and there exist intersecting shortest paths @xmath133 , @xmath162 , then a bifurcation point of @xmath132 is also a bifurcation point of @xmath163 .",
    "assume that @xmath93 is a vertex which is both on some shortest path @xmath133 and some shortest path @xmath162 .",
    "let @xmath28 be a bifurcation point of @xmath164 . then there exist shortest paths @xmath133 , @xmath162 both containing both @xmath28 and @xmath93 .",
    "we need to show that @xmath28 is also in the intersection of some pair of shortest paths @xmath134 , @xmath165 .",
    "the proof relies on the fact that the equality @xmath166 holds if and only if @xmath167 is on a shortest path from @xmath168 to @xmath169 .    by the triangle inequality and since neither @xmath5 nor @xmath170 resolve @xmath12 , @xmath171 therefore equality holds in the triangle inequality , and the claim follows .",
    "we are now ready to present the other necessary requirement .",
    "[ req : cycle ] let @xmath25 be a face of an outerplanar graph @xmath0 and let @xmath1 have exactly two representatives @xmath172 on @xmath25 .",
    "let @xmath173 and @xmath174 be the landmarks with representative @xmath175 which occur first and last on the walk along the outer face starting at @xmath176 , and define @xmath177 , @xmath178 analogously .",
    "assume that neither @xmath179 nor @xmath180 resolves @xmath79 , and that shortest paths @xmath181 , @xmath182 do not intersect .",
    "let @xmath28 be the bifurcation point of @xmath183 , let @xmath27 be the bifurcation point of @xmath184 , etc .",
    ", as in fig .",
    "[ fig : spaths ] . by assumption , @xmath185 .",
    "therefore the shortest paths @xmath186 , @xmath187 , @xmath188 , @xmath189 form a cycle @xmath44 ( see again fig .",
    "[ fig : spaths ] ) .",
    "if @xmath25 is inside the cycle @xmath44 , then one of @xmath190 must resolve the pair @xmath79 .",
    "note that the representatives of @xmath173 and @xmath177 on @xmath44 are @xmath28 and @xmath61 , respectively .",
    "the assumption that @xmath0 is outerplanar is essential for requirement  [ req : cycle ] and lemma  [ lem : cycle ] below .",
    "in particular , the definition of @xmath191 , as well as the use of representatives in the proof of lemma  [ lem : cycle ] , relies on outerplanarity .",
    "[ lem : cycle ] if @xmath0 is an outerplanar graph , then any resolving set @xmath1 satisfies requirement  [ req : cycle ] .",
    "assume that @xmath13 is a resolving set , and that @xmath192 are as in requirement  [ req : cycle ] .",
    "without loss of generality , there is a @xmath193 with representative @xmath175 on @xmath25 such that @xmath194 .",
    "now define @xmath195 as in requirement  [ req : cycle ] .",
    "assume that neither @xmath173 nor @xmath177 resolves @xmath4 and @xmath6 .",
    "then we can define @xmath196 as in requirement  [ req : cycle ] .",
    "observe that the vertices @xmath28 and @xmath61 are the only vertices of @xmath44 that do not resolve @xmath4 and @xmath6 .",
    "therefore , while landmark @xmath173 has representative @xmath28 on @xmath44 , @xmath107 does not .",
    "because of the location of @xmath197 on the outer cycle , the representative of @xmath174 on @xmath44 is not @xmath28 either ( see fig .  [",
    "fig : spaths3 ] ) .",
    "the representative of @xmath174 on @xmath44 can not equal @xmath61 , as @xmath174 and @xmath177 have distinct representatives on @xmath25 .",
    "therefore the representative of @xmath174 resolves @xmath4 and @xmath6 , and so does @xmath174 itself .",
    "now we are ready to generalize lemma  [ lem : tree ] to outerplanar graphs .",
    "this is a crucial result , since it characterizes resolving sets in a manner that allows dynamic programming .",
    "[ lem : main ] if @xmath0 is an outerplanar graph , then a set @xmath1 is a resolving set if and only if it satisfies requirements  [ req : g ] and  [ req : cycle ] .",
    "we have already seen that any resolving set satisfies the requirements .",
    "so assume that @xmath1 satisfies the requirements , and choose any @xmath144 .",
    "we show that there exists a @xmath3 that resolves the pair @xmath12 .    as in lemma",
    "[ lem : tree ] , @xmath13 is non - empty .",
    "choose @xmath3 arbitrarily .",
    "if @xmath5 resolves @xmath4 and @xmath6 , we are done ; so assume that it does not .",
    "as in lemma  [ lem : tree ] , let @xmath28 be the bifurcation point of @xmath198 , and let @xmath146 be successors of @xmath28 on some shortest paths @xmath147 respectively .",
    "by requirement  [ req : g ] , there is a @xmath199 such that , without loss of generality , @xmath200 .",
    "if @xmath154 resolves @xmath4 and @xmath6 , we are done .",
    "so assume otherwise .",
    "if there exist intersecting shortest paths @xmath133 , @xmath162 , then by lemma  [ lem : crossing ] , @xmath28 is on a shortest path @xmath165 .",
    "then @xmath151 is also on such a path , and @xmath201 , a contradiction .",
    "therefore no such pair of intersecting shortest paths exists .",
    "define @xmath196 as in requirement  [ req : cycle ] , and let @xmath25 be a face inside @xmath44 .",
    "if there exists a @xmath202 whose representative on @xmath25 is distinct from the representatives of @xmath107 and @xmath154 , then its representative on @xmath44 is neither @xmath28 nor @xmath61 .",
    "hence @xmath108 resolves @xmath12 .",
    "if such a landmark @xmath108 does not exist , then requirement",
    "[ req : cycle ] implies the claim .",
    "we now introduce first of the the data structures that we need in our algorithms .",
    "the _ weak dual _ of an outerplanar graph @xmath0 is a graph which has the faces of @xmath0 , except the unbounded outer face , as vertices .",
    "two faces are adjacent if they share an edge .",
    "the weak dual of a biconnected outerplanar graph is a tree .",
    "the _ generalized dual tree _",
    "@xmath203 of an outerplanar graph @xmath0 is defined as follows .",
    "@xmath23 contains the weak dual of @xmath0 , and also contains the subgraph of @xmath0 induced by all cut vertices and vertices of degree one . for any cut vertex contained in a biconnected component",
    ", there is an edge from the vertex to an arbitrary incident face of the component .",
    "observe that the resulting graph is a tree ( see fig .",
    "[ fig : extdualtree ] for an example ) . according to this definition ,",
    "a cut vertex is a vertex of both @xmath0 and @xmath23 .",
    "let any vertex of @xmath23 be the root , denoted by @xmath204 .",
    "we now associate a subset of @xmath31 with any vertex or edge of @xmath23 .",
    "if @xmath205 is a face , the set @xmath206 consists of the vertices on the face . if @xmath25 is a cut vertex or a leaf , @xmath206 consists of that vertex . if both endpoints of @xmath207 are vertices of @xmath0 , then @xmath208 consists of those vertices",
    "otherwise , let either endpoint of @xmath209 is a face .",
    "let @xmath210 , and define @xmath211 .",
    "removing an edge @xmath212 divides @xmath23 into two components , @xmath213 and @xmath214 , where @xmath213 is the one containing @xmath25 .",
    "define @xmath215 as the subgraph of @xmath0 corresponding to @xmath213 .",
    "formally , it is the subgraph of @xmath0 induced by @xmath216 .",
    "thus @xmath0 is divided into two subgraphs @xmath215 , @xmath217 . if @xmath218 are adjacent faces , the subgraphs share two vertices . if @xmath25 is a face and @xmath219 a cut vertex ( or the other way around ) , then the subgraphs share one vertex .",
    "otherwise they do not intersect .",
    "define @xmath220 as the subgraph of @xmath0 induced by @xmath221 .",
    "then we can divide @xmath0 into two nonintersecting subgraphs , @xmath220 and @xmath217 .",
    "the following lemma is immediate from the definitions .",
    "[ lem : dualstructure ] given neighbors @xmath222 , @xmath215 and @xmath217 are connected subgraphs of @xmath0 , and any path from @xmath215 to @xmath217 intersects @xmath223 .    given a landmark @xmath5 , let @xmath224 be the set of pairs in @xmath225 resolved by @xmath5 .",
    "[ lem : repr ] let @xmath226 .",
    "assume @xmath227 and denote @xmath228 .",
    "then @xmath229 , where @xmath230 is the representative of @xmath5 on @xmath209 .",
    "let @xmath231 and @xmath232 . if @xmath233 or @xmath152 , then @xmath234 . if @xmath235 , then @xmath236 . so for any @xmath237 , we have @xmath238 .",
    "let @xmath239 be an edge .",
    "if @xmath209 corresponds to an edge @xmath240 with midpoint @xmath241 , then @xmath242 .",
    "assume that @xmath243 .",
    "so , we have @xmath244 without loss of generality , we assume that @xmath245",
    ". then @xmath246 putting these equations together implies that @xmath247 , that is , @xmath248 .",
    "let @xmath25 be a dual vertex and @xmath249 its parent .",
    "we use _ boundary conditions _ to describe the relation of landmarks in @xmath250 to @xmath251 , and vice versa .",
    "boundary conditions can be seen as an abstract data structure which depends on @xmath252 and satisfies the following :    1 .",
    "it consists of two components , one of which depends on landmarks in @xmath251 , and the other on landmarks in @xmath253 .",
    "the components are called _ upper _ and _ lower _ boundary conditions , respectively .",
    "2 .   it determines which pairs in @xmath251 are resolved by landmarks in @xmath253 , and vice versa .",
    "if @xmath250 contains landmarks with a representative @xmath28 on @xmath25 , then the boundary condition specifies which such landmarks occur first and last on a walk along the outer boundary of @xmath250 starting at @xmath28 .",
    "4 .   for any @xmath254",
    ", it specifies whether the set @xmath255 is empty or not .",
    "the number of possible boundary conditions is polynomial .",
    "the first and the second properties are necessary to be able to run a dynamic programming algorithm along @xmath23 .",
    "the third and fourth properties are needed when verifying requirements  [ req : cycle ] and [ req : g ] , respectively .",
    "the last property is needed to ensure that the algorithm runs in polynomial time .",
    "let us consider the implementation of this data structure .",
    "let @xmath256 , @xmath257 .",
    "the boundary condition of @xmath209 is a tuple @xmath258 the set @xmath259 consists of the representatives of @xmath260 on @xmath209 , and @xmath261 consists of the representatives of @xmath262 on @xmath209 .",
    "the set @xmath263 consists of all the first and last landmarks with given representative as property 3 in above requires .",
    "note that @xmath261 is technically redundant , since @xmath263 determines its value . as an optimization",
    ", @xmath263 could be omitted in some cases .",
    "the value of @xmath264 depends on the properties of the set @xmath265 if @xmath266 contains a vertex @xmath4 which is not a neighbor of @xmath152 , then @xmath267 . if @xmath268 with @xmath269 , then @xmath270 .",
    "otherwise @xmath271 and @xmath272 .",
    "we define @xmath273 similarly , with the roles of @xmath151 and @xmath152 interchanged .    the implementation of boundary conditions described above has properties 15 given above .    a boundary condition @xmath274 can be divided into an upper boundary condition @xmath259 and a lower boundary condition @xmath275 , so property 1 holds .",
    "property 2 follows from lemma  [ lem : repr ] .",
    "property 3 follows from the definition of @xmath263 .    to verify that property 4 is satisfied , consider @xmath276",
    "this set is empty if either @xmath270 and @xmath277 , or if @xmath272 . otherwise , the set is nonempty .",
    "we can interchange @xmath151 and @xmath152 , and the same holds . so",
    "property 4 is satisfied .",
    "it remains to verify property 5 is satisfied .",
    "there are ( at most ) @xmath278 edges @xmath209 , and for each such edge there are @xmath279 possible values of @xmath259 , @xmath279 possible values of @xmath261 , @xmath41 possible values of @xmath264 , @xmath41 possible values of @xmath273 , and @xmath280 for @xmath263 .",
    "therefore property 5 holds .      while a boundary condition describes how the landmarks are placed in relation to a dual edge @xmath209 , a _ configuration",
    "_ describes their relation to a dual vertex @xmath25 .",
    "there are three quite different cases , depending on whether @xmath25 is a cut vertex of @xmath0 , a face with two representatives , or a face with at least three representatives .",
    "the last - mentioned case is quite complicated .",
    "a configuration @xmath13 associated with @xmath25 is designed to satisfy following :    1 .   for any @xmath281",
    ", it determines which pairs of vertices in @xmath217 are resolved by landmarks in @xmath215 .",
    "it contains enough information to verify that @xmath25 satisfies requirement  [ req : cycle ] .",
    "the total number of configurations is polynomial .",
    "essentially , a configuration determines which vertices of @xmath206 are landmarks , and which boundary conditions are allowed for edges @xmath212 .",
    "implementation of this data structure starts by extending the concept of representative to take into account the branch of the dual that contains the landmark yielding the representative .",
    "formally , the _ extended representative _ of @xmath3 on @xmath25 is a pair @xmath282 .",
    "here @xmath230 is the representative of @xmath5 on @xmath25 .",
    "moreover , if @xmath283 , then @xmath284 ; otherwise , @xmath219 is the neighbor of @xmath25 such that @xmath285 .    given a face @xmath25 and vertex @xmath286 , there are at most four values of @xmath219 such that @xmath282 is a valid extended representative , namely @xmath25 , at most two neighboring faces , and at most one neighboring cut vertex .",
    "for example , in fig .",
    "[ fig : extdualtree ] , if @xmath287 , @xmath219 can be @xmath288 , @xmath289 , @xmath290 , or @xmath291",
    ".    we can now define the configurations for each of the three cases .",
    "let @xmath13 be a set of landmarks and @xmath25 a dual vertex which corresponds to a cut vertex @xmath142 .",
    "let @xmath292 consist of all extended representatives of @xmath13 on @xmath25 .",
    "the configuration associated with @xmath293 is the pair @xmath294 .",
    "this is said to be a _ configuration of type i_.    in this case , any extended representative has pattern @xmath295 with @xmath296 .",
    "hence the total number of configurations of type i would be @xmath297",
    ". however , from here on we only consider the ones that fulfill requirement  [ req : g ] .",
    "then there is at most one @xmath281 such that @xmath298 .",
    "therefore the total number of configurations of type i is @xmath299 .",
    "let @xmath13 be a set of landmarks and @xmath25 a face such that @xmath13 has two representatives on @xmath25 .",
    "let @xmath300 , where the landmarks are defined as in requirement  [ req : cycle ] .",
    "let the configuration associated with @xmath25 and @xmath13 be the pair @xmath294 .",
    "this is said to be a _ configuration of type ii_.    in this case the number of configurations clearly is @xmath301 .    the remaining case ,",
    "a face with more than two representatives , is the most intricate because of combinatorial explosion : on a face of @xmath21 vertices , there are up to @xmath302 possible sets of representatives .",
    "[ def : typeiii ] let @xmath13 be a set of landmarks and @xmath25 a face such that @xmath13 has more than two representatives on @xmath25 .",
    "the configuration associated with @xmath303 is a pair @xmath294 , where @xmath292 is computed by the ( nondeterministic ) algorithm  [ alg : cc ] .",
    "this is said to be a _ configuration of type iii_.    dual vertex @xmath25 , set @xmath13 let @xmath304 be the set of representatives of @xmath13 on @xmath25 .",
    "choose @xmath305 at maximal mutual distance .",
    "choose @xmath306 which is , if possible , not on a shortest path @xmath307 .",
    "@xmath308 choose @xmath309 which is on a different shortest path than @xmath310[li : cc - hz4 ] @xmath311 [ li : cc - loop ] @xmath312 [ li : cc - add ] let @xmath292 consist of all extended representative corresponding to elements of @xmath313 @xmath292    as an example of a configuration of type iii , consider fig .",
    "[ fig : conf - ex ] .    note that algorithm  [ alg : cc ] is a part of a mathematical definition .",
    "it is not actually used in any computations .",
    "algorithm  [ alg : cc ] is given a set of landmarks and then produces a configuration . in our computations to find a metric base ( algorithm  [ alg : main ] ) , we proceed in the opposite direction : we iterate over pairs @xmath294 , and for each of them , we produce a set of landmarks , if possible .",
    "the following lemma shows that we can restrict to sets @xmath292 such that @xmath314 , and furthermore the set @xmath315 must satisfy @xmath316 . because @xmath314 , the total number of configurations of type iii that we need to iterate over in our computations thus is @xmath317 .",
    "[ lem : typeiii ] algorithm  [ alg : cc ] produces a set @xmath292 with @xmath314 , such that @xmath292 determines the upper boundary condition of @xmath318 for any child @xmath219 of @xmath25 .",
    "if @xmath25 has parent @xmath249 , @xmath292 also determines the component @xmath261 of the lower boundary condition of @xmath319 .",
    "we first show that @xmath314 .",
    "initially , @xmath313 will consist of three elements",
    ". either line  [ li : cc - hz4 ] adds one more element , or the loop on lines  [ li : cc - loop][li : cc - add ] adds at most two elements .",
    "so @xmath320 , and @xmath321 .",
    "we now verify the effect of @xmath292 on the boundary conditions described in the lemma statement .",
    "observe that , by lemma  [ lem : repr ] , any two landmarks with the same extended representative have the same effect on the boundary conditions in definition  [ def : typeiii ] .",
    "therefore it is indeed justified to talk about the upper / lower boundary condition determined by @xmath292 .",
    "we first prove the following auxiliary claim .",
    "_ claim 1 : _ any @xmath322 is on a shortest path @xmath323 for some @xmath324 .",
    "+ _ proof : _ if every representative is in shortest a path @xmath307 , the claim holds .",
    "otherwise , @xmath310 is selected so that it is not in the shortest path @xmath307",
    ". then shortest path @xmath325 and @xmath326 intersect only in @xmath175 , because otherwise @xmath327 , contradicting the choice of @xmath175 and @xmath176 . also shortest paths @xmath328 ,",
    "@xmath329 intersect only in @xmath176 .",
    "hence the shortest paths cover all vertices in @xmath206 .",
    "this proves the claim .",
    "we now prove that @xmath292 determines the upper boundary condition of @xmath318 for any child @xmath219 of @xmath25 .",
    "so let @xmath219 be a child of @xmath25 , let @xmath330 , and let @xmath331 .",
    "let @xmath259 be the upper boundary condition of @xmath13 on @xmath209 , and let @xmath332 be the upper boundary condition of @xmath292 on @xmath209 .",
    "we need to show that @xmath333 .",
    "the inclusion @xmath334 holds if and only if there is a @xmath335 such that @xmath336 and @xmath230 has representative @xmath25 on @xmath209 .",
    "similarly , @xmath337 if there is @xmath3 with such an extended representative .    since @xmath292 corresponds to a subset of @xmath13 , @xmath338 . to show inclusion in the other direction , consider @xmath337 . by definition",
    "there is @xmath3 with @xmath339 that has representative @xmath28 on @xmath209 .",
    "denote the representative of @xmath5 on @xmath25 by @xmath230 . by claim 1 , @xmath230 is on a shortest path @xmath340 , for some @xmath324 .",
    "we distinguish several cases .",
    "* case 1 : * @xmath341 .",
    "+ since @xmath339 , @xmath342 , and thus @xmath343 .",
    "if one of @xmath344 has representative @xmath28 on @xmath209 ( say @xmath345 ) , then it must have an extension @xmath346 with @xmath336 ( as in figure  [ fig : typeiii - c1 ] . )",
    "therefore @xmath334 and we are done .",
    "so suppose that neither has representative @xmath28 on @xmath209 .",
    "then the representative of both @xmath345 and @xmath347 on @xmath209 is @xmath241 ( the midpoint of @xmath348 ) . by construction",
    ", this implies that @xmath349 .",
    "in particular , one of @xmath350 equals @xmath241 and the other is antipodal to it ( see fig .  [",
    "fig : typeiii - c22 ] ) . then either @xmath351 or @xmath352 has representative @xmath28 on @xmath209 , and we are done .    *",
    "case 2 : * @xmath353 .",
    "+ we distinguish two subcases .",
    "* case 2a : * @xmath354 .",
    "+ in this case , either one of @xmath355 equals @xmath230 , or not . if one of @xmath355 equals @xmath230 , then @xmath356 , and we are done . otherwise , @xmath357 and @xmath358 ( see fig .  [",
    "fig : typeiii - c2 ] ) , and the sets are equivalent in the equivalence relation used for boundary conditions .    *",
    "case 2b : * @xmath343 .",
    "+ in this case , @xmath359 and @xmath347 both have representative @xmath241 or @xmath28 on @xmath209 .",
    "we again distinguish several subcases .",
    "* case 2b - i : * @xmath359 and @xmath347 both have representative @xmath241 on @xmath209 .",
    "+ in this case , the shortest path @xmath323 is not unique .",
    "hence either @xmath310 or @xmath360 has representative @xmath28 on @xmath209 ( see fig .  [",
    "fig : typeiii - c22 ] ) , and we are done .    * case 2b - ii : * both @xmath359 and @xmath361 have representative @xmath28 on @xmath209 .",
    "+ in this case , at least one of them ( say @xmath347 ) has an extension @xmath362 with @xmath336 ( see figure  [ fig : typeiii - c3 ] ) .",
    "hence @xmath334 .    *",
    "case 2b - iii : * @xmath345 has representative @xmath28 on @xmath209 , @xmath347 has representative @xmath241 on @xmath209 .",
    "+ in this case , either @xmath363 or not .",
    "if @xmath363 , then line  [ li : cc - add ] of construct - conf adds an element to @xmath313the set @xmath364 is not empty because it contains @xmath230and thereby ensures that @xmath334 .",
    "otherwise , @xmath345 has an extension @xmath346 with @xmath336 ( see figure  [ fig : typeiii - c4 ] ) .",
    "hence @xmath334 .",
    "this completes the case analysis .",
    "it follows that @xmath365 .",
    "we note that exactly the same arguments hold when @xmath219 is not a child of @xmath25 but its parent @xmath249 .",
    "even if both boundary conditions for edges @xmath366 , @xmath367 are allowed by a specific configuration , they may contradict each other .",
    "this happens when there is @xmath368 , and the boundary conditions disagree about the value of @xmath139 .",
    "hence , the algorithm will only process boundary conditions that agree with each other and with the configuration .    as a tool for avoiding such disagreements ,",
    "we define a coarser variant of the function @xmath369 .",
    "the function @xmath370 describes which part of the generalized dual contains @xmath139 .",
    "let @xmath371 .",
    "then @xmath372 notice that as long as requirement  [ req : g ] holds , the function is well defined .",
    "[ lem : conf - h ] the configuration associated with @xmath25 and @xmath13 determines for any @xmath371 whether the equation @xmath373 holds .",
    "recall that @xmath373 if @xmath374 .",
    "if the configuration @xmath294 is of type i , i.e. , @xmath25 corresponds to a single vertex of @xmath0 , then @xmath373 is not possible .",
    "otherwise , @xmath25 is a face . by lemma  [ lem : repr ] , @xmath375 , where @xmath304 is the set of representatives of @xmath13 on @xmath25 .",
    "if @xmath376 is of type ii , then it determines @xmath304 , and we are done . hence the configuration is of type iii .",
    "let @xmath377 . then @xmath378 .",
    "we claim that @xmath379 .",
    "let @xmath380 be neighbors . if @xmath381 , then there is @xmath3 with @xmath382 .",
    "as shown in the proof of lemma  [ lem : typeiii ] , the representative of @xmath5 on @xmath25 is on a shortest path @xmath307 for some @xmath383 .",
    "both of them also satisfy @xmath384 .",
    "hence @xmath385 .",
    "if @xmath385 , there is @xmath386 with @xmath387 .",
    "replace @xmath230 with any vertex @xmath3 that has representative @xmath230 on @xmath25 , and the inequality still holds .",
    "hence @xmath381 .",
    "the algorithm works in a dynamic programming manner , by finding optimal resolving sets of subgraphs @xmath250 with given boundary conditions .",
    "formally , assume that we are given a vertex @xmath24 and boundary condition @xmath388 on the edge @xmath389 , where @xmath249 is the parent of @xmath25 .",
    "let @xmath390 be a set @xmath262 , where @xmath13 is a minimal resolving set with boundary condition @xmath391 , if such a set exists",
    ". otherwise @xmath392 .",
    "for notational convenience , we let @xmath393 and @xmath394 for any @xmath395 .",
    "the values of @xmath396 are computed in a recursive manner : the computation of @xmath396 uses the values of @xmath397 , where @xmath219 is a child of @xmath25 .",
    "the basic idea is to iterate over all configurations on @xmath25 . for every configuration",
    ", we then find an optimal function @xmath398 and an optimal set of landmarks .",
    "first , we introduce several subroutines .",
    "algorithm  [ alg : is ] ( intermediate - sol ) is given a configuration @xmath294 , a boundary condition @xmath391 , and a function @xmath398 , and it returns an optimal set of landmarks .",
    "configuration @xmath294 , boundary condition @xmath391 , function @xmath398 @xmath399 initialize @xmath400 to the set of landmarks on @xmath206 as described by @xmath294 @xmath401 $ ] such that @xmath388 agrees with @xmath402 @xmath403 $ ] @xmath404    algorithm  [ alg : is ] runs in polynomial time and correctly computes an optimal set of landmarks given a configuration @xmath405 , a boundary condition @xmath391 , and a function @xmath398 .",
    "we first consider the complexity of algorithm  [ alg : is ] .",
    "the consistency checks run in linear time .",
    "the for - loop runs over @xmath278 neighbors , and for each neighbor , there are @xmath301 potential boundary conditions .",
    "hence it runs in polynomial time .",
    "next we argue that algorithm  [ alg : is ] is correct .",
    "it returns only if a resolving set of @xmath250 with the given parameters does not exist .",
    "the algorithm explicitly verifies that requirement  [ req : cycle ] is satisfied .",
    "requirement  [ req : g ] is verified implicitly by constructing a solution which agrees with @xmath398 . by assumption",
    "the requirements are satisfied in subgraphs @xmath217 .",
    "therefore lemma  [ lem : main ] states that a non- return value of algorithm  [ alg : is ] is a resolving set of @xmath250 . assuming that the values of @xmath406 for all children @xmath219 of @xmath25 have been computed correctly , the returned set will be an optimal set under the conditions given in the lemma statement .    given a configuration @xmath294 and a boundary condition @xmath391 , the next subroutine finds an optimal function @xmath398 . by lemma  [ lem : conf - h ]",
    ", the configuration determines whether @xmath373 holds or not .",
    "also @xmath391 restricts some values of @xmath398 .",
    "otherwise , the value of @xmath407 may be @xmath408 or @xmath219 , where @xmath219 is a suitable neighbor of @xmath25 , and the task is to determine which one of these is optimal .",
    "it turns out that the optimum can be found by a greedy algorithm ( algorithm  [ alg : opt ] ) .",
    "configuration @xmath294 , boundary condition @xmath391 @xmath409 @xmath410 \\gets $ ] the appropriate value @xmath411",
    "@xmath410 \\gets \\emptyset$ ] [ li : hloop ] @xmath412 find @xmath126 that minimizes @xmath413 such that[li : bcopt ] + @xmath410 $ ] and @xmath414 $ ] differ only for @xmath415 .",
    "if possible , choose a solution with @xmath416 = \\emptyset$ ] for the last ( in clockwise order ) element @xmath417 @xmath418 @xmath419 \\neq \\emptyset\\}$ ] intermediate - sol@xmath420    [ lem : optbc ] algorithm  [ alg : opt ] runs in polynomial time and returns a smallest resolving set of @xmath250 that agrees with the parameters .",
    "the for - loops run over @xmath421 cases .",
    "the subroutine @xmath422 runs in polynomial time . since @xmath423",
    ", there is a constant number of possibilities for @xmath126 in each iteration .",
    "therefore @xmath424 runs in polynomial time .",
    "we need to prove that the function @xmath398 constructed by @xmath424 is optimal .",
    "let @xmath425 be an optimal function , and define @xmath426 as follows .",
    "if @xmath427 after @xmath428 iterations of the loop in line  [ li : hloop ] , then @xmath429 = h[v]$ ]",
    ". otherwise , @xmath429 = h^o[v]$ ] . therefore @xmath430 and @xmath431 , where @xmath432 .",
    "first note that changing the value of @xmath410 $ ] from some other value to @xmath408 increases the value of @xmath433 by at most one . to see this ,",
    "let @xmath13 be the original return value with @xmath434 .",
    "then @xmath435 is an resolving set with @xmath436 .    to conclude the proof ,",
    "we show that @xmath437 let @xmath438 be as in the algorithm and consider the @xmath439-th iteration of the second for - loop in @xmath424 .",
    "observe that @xmath426 and @xmath440 differ only in @xmath441 .",
    "if they differ in @xmath442 , then @xmath443 = \\emptyset$ ] and changing the value to @xmath444 $ ] does not increase the target value . then ,",
    "if @xmath445 , we first replace @xmath446 with @xmath408 and then with @xmath447 . by the argument above , the first change may increase the size by at most one .",
    "the second change must decrease the size , because otherwise the optimization made in line  [ li : bcopt ] would not change @xmath448 $ ] . therefore the changes do not increase the size of the corresponding resolving set .    finally , we are ready to present the main algorithm ( algorithm  [ alg : main ] ) and its correctness proof .",
    "graph @xmath0 , its generalized dual tree @xmath23",
    "@xmath449 \\gets \\mbox{\\sc nil}$ ]",
    "@xmath450 [ li : rloop ] @xmath449 \\gets \\mbox{opt}(v ' , r , { \\bf r})$ ] [ li : setm ] @xmath451 @xmath452 @xmath400    algorithm  [ alg : main ] correctly computes the values of @xmath449 $ ] , and returns a metric base in polynomial time .",
    "the algorithm runs in polynomial time , because there is a polynomial number of dual vertices , boundary conditions , and configurations .",
    "we prove by induction that @xmath449 $ ] is computed correctly .",
    "assume that the values of @xmath453 $ ] have been computed correctly for any child @xmath219 of @xmath25 .",
    "then , because opt ( algorithm  [ alg : opt ] ) works correctly , the value of @xmath449 $ ] will be computed correctly .",
    "similarly , the return value will be computed correctly , since opt works correctly and uses correct values of @xmath454 $ ] .",
    "we have proved that metric dimension is np - hard for planar graphs , even when the graph has bounded degree .",
    "we also gave a polynomial - time algorithm to solve the problem on outerplanar graphs .",
    "our algorithm is based on an innovative use of dynamic programming which allows us to deal with _ global problems _ ( in the sense described in the introduction ) , and which may be amendable to other such problems .",
    "one possible candidate is the _ identifying codes problem_. let @xmath455 . then given as input a graph @xmath0 and an integer @xmath456 , the identifying codes problem is to find a smallest @xmath457 such that @xmath458 for all @xmath142 , and @xmath459 for all distinct @xmath460 .",
    "this problem is known to be np - hard for general and planar graphs , and to have polynomial - time algorithms for cycles , paths , and trees ( see  @xcite and references therein ) .",
    "we believe that the techniques developed in the present paper can yield a polynomial - time algorithm for the identifying codes problem on outerplanar graphs when @xmath73 is part of the input .",
    "we also pose some open problems for metric dimension .",
    "first , it would be nice to extend our results to @xmath126-outerplanar graphs .",
    "unfortunately , the technique described in the present paper does not seem to generalize in this direction , as edges and cut vertices are no longer convex separators in this case . even if the problem turns out to be solvable on @xmath126-outerplanar graphs by a polynomial - time algorithm , it is not clear that such an algorithm could be used to derive a polynomial - time approximation scheme for planar metric dimension .",
    "the quest for such an approximation scheme or even for a constant approximation algorithm is an interesting challenge in its own right .",
    "another interesting line of research is the _",
    "parameterized complexity _ of metric dimension .",
    "daniel lokshtanov  @xcite posed this problem at a recent dagstuhl seminar on parametrized complexity .",
    "moreover , he conjectured that the problem could be @xmath461$]-complete .",
    "we hope that our results can serve as a starting point for further study in this direction .",
    "99 d.  auger , i.  charon , o.  hudry and a.  lobstein , complexity results for identifying codes in planar graphs .",
    "17 , 691710 , 2010 .",
    "bailey , p.j .",
    "cameron base size , metric dimension and other invariants of groups and graphs .",
    "43 ( 2 ) : 209 - 242 , 2011",
    ". z.  beerliova , t.  eberhard , t.  erlebach , a.  hall , m.  hoffmann , m.  mihalak , l.  ram , network discovery and verification .",
    "24 , 21682181 , 2006 . b.  baker , approximation algorithms for np - complete problems on planar graphs .",
    "41 , 153180 , 1994 .",
    "h.  l.  bodlaender , classes of graphs with bounded treewidth .",
    "36 , 116125 , 1988 . b.  courcelle , graph rewriting : an algebraic and logic approach .",
    "_ handbook of theoretical computer science _ ,",
    "b , 194242 , elsevier science , 1990 .",
    "g.  chartrand , l.  eroh , m.a .",
    "johnson , o.r .",
    "oellemann , resolvability in graphs and the metric dimension of a graph .",
    "105 , 99113 , 2000 .",
    "e.  dahlhaus , d.s  johnson , c.h .",
    "papadimitriou , p.d .",
    "seymour , m.  yannakakis , the complexity of multiterminal cuts .",
    "_ siam j.  computing _ 23 , 864894 , 1994 .",
    "r.  diestel , .",
    "springer - verlag , 2000 .",
    "d.  eppstein , diameter and treewidth in minor - closed graph families .",
    "_ algorithmica _ 27 , 275191 , 2000 .",
    "garey , d.s .",
    "johnson , .",
    "freeman , 1979 .",
    "f.  harary , r.a .",
    "melter , the metric dimension of a graph .",
    "_ ars combinatoria _ 2 , 191195 , 1976 . m.  hauptmann , r.  schmied , c.  viehmann , on approximation complexity of metric dimension problem .",
    "_ j.  discrete algorithms _ , in press , 2011 .",
    "j.  hopcroft , r.e .",
    "tarjan , efficient planarity testing .",
    "_ jacm _ 21 , 549568 , 1974 .",
    "johnson , personal communication .",
    "s.  khuller , b.  raghavachari , a.  rosenfeld , landmarks in graphs .",
    "70 , 217229 , 1996 .",
    "d.  lokshtanov , metric dimension . in : open problems from dagstuhl seminar 09511 , e.  d.  demaine , m.  t.  hajiaghayi , d.  marx , editors , 2009 .",
    "available at http://erikdemaine.org/papers/dagstuhlfpt2009open/paper.pdf p.  slater , leaves of trees .",
    "14 , 549559 , 1975 ."
  ],
  "abstract_text": [
    "<S> the metric dimension of a graph @xmath0 is the size of a smallest subset @xmath1 such that for any @xmath2 there is a @xmath3 such that the graph distance between @xmath4 and @xmath5 differs from the graph distance between @xmath6 and @xmath5 . </S>",
    "<S> even though this notion has been part of the literature for almost 40 years , the computational complexity of determining the metric dimension of a graph is still very unclear . </S>",
    "<S> essentially , we only know the problem to be np - hard for general graphs , to be polynomial - time solvable on trees , and to have a @xmath7-approximation algorithm for general graphs . in this paper , we show tight complexity boundaries for the metric dimension problem . we achieve this by giving two complementary results . </S>",
    "<S> first , we show that the metric dimension problem on bounded - degree planar graphs is np - complete . </S>",
    "<S> then , we give a polynomial - time algorithm for determining the metric dimension of outerplanar graphs . </S>"
  ]
}