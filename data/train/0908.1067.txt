{
  "article_text": [
    "this is a research on the interface between topology and graph theory with applications to motion planning algorithms in robotics .",
    "we consider moving objects as zero - size points travelling without collisions along fixed tracks forming a graph , say on a factory floor or road map .",
    "we prefer to call these objects ` robots ' , although the reader may use a more neutral and abstract word like ` token ' .    for practical reasons we study discrete analogues of configuration spaces of graphs , where robots can not be very close to each other , roughly one edge apart .",
    "this discrete approach reduces the motion planning of real ( not zero - size ) vehicles to combinatorial questions about ideal robots moving on a subdivided graph .",
    "first we recall basic notions .",
    "a _ graph _",
    "@xmath0 is a 1-dimensional finite cw complex , whose 1-cells are supposed to be open .",
    "the 0-cells and open 1-cells are called _ vertices _ and _ edges _ , respectively .",
    "if the endpoints of an edge @xmath1 are the same then @xmath1 is called a _ loop_.",
    "a _ multiple _ edge is a collection of edges with the same distinct endpoints .",
    "the topological _ closure _ @xmath2 of an edge @xmath1 is the edge @xmath1 itself with its endpoints .",
    "the _ degree _ @xmath3 of a vertex @xmath4 is the number of edges attached to @xmath4 , i.e. a loop contributes 2 to the degree of its vertex .",
    "vertices of degrees  1 and  2 are _ hanging _ and _ trivial _ , respectively .",
    "vertices of degree at least 3 are _",
    "essential_. a _ path _ ( a _ cycle _ , respectively ) of length @xmath5 in @xmath0 is a subgraph consisting of @xmath5 edges and homeomorphic to a segment ( a circle , respectively ) .",
    "a _ tree _ is a connected graph without cycles .",
    "the direct product @xmath6 ( @xmath7 times ) has the product structure of a ` cubical complex ' such that each product @xmath8 is isometric to a euclidean cube @xmath9^k$ ] , where @xmath10 is the topological closure of a cell of @xmath0 .",
    "the dimension @xmath5 is the number of the cells @xmath11 that are edges of @xmath0 . the _ diagonal _ of the product @xmath12 is @xmath13    [ def : topconfigurationspaces ] let @xmath0 be a graph , @xmath7 be a positive integer .",
    "the _ ordered topological _",
    "configuration space @xmath14 of @xmath7 distinct robots in @xmath0 is @xmath15 .",
    "the _ unordered topological _ configuration space @xmath16 of @xmath7 indistinguishable robots in @xmath0 is the quotient of @xmath14 by the action of the permutation group @xmath17 of @xmath7 robots .",
    "the ordered topological space @xmath18,2)$ ] is the unit square without its diagonal @xmath19 ^ 2 { { \\ ; | \\;}}x\\neq y\\}$ ] , which is homotopy equivalent to a disjoint union of 2 points .",
    "topological spaces @xmath20 are _ homotopy _ equivalent if there are continuous maps @xmath21 , @xmath22 such that @xmath23 , @xmath24 can be connected with @xmath25 , @xmath26 , respectively , through continuous families of maps . in particular , @xmath27 is _ contractible _ if @xmath27 is homotopy equivalent to a point .",
    "a space @xmath27 can be homotopy equivalent to its subspace @xmath28 through a _",
    "deformation retraction _ that is a continuous family of maps @xmath29 , @xmath30 $ ] , such that @xmath31 , i.e. all @xmath32 are fixed on @xmath28 , @xmath33 and @xmath34 .",
    "the unordered topological space @xmath35,2)\\approx \\{(x , y)\\in[0,1]^2 { { \\ ; | \\;}}x < y\\}$ ] is contractible to a single point . more generally , @xmath18,n)$ ] has @xmath36 contractible connected components , while @xmath35,n)$ ] deformation retracts to the standard configuration @xmath37 , @xmath38 , in @xmath9 $ ] .",
    "if a connected graph @xmath0 has a vertex of degree at least 3 then the configuration spaces @xmath14 , @xmath16 are path - connected .",
    "we swap robots @xmath39 near such a vertex as shown in figure  [ fig : permuterobotstriod ] .     without collisions on the triod @xmath40 ]",
    "[ def : graphbraidgroups ] given a connected graph @xmath0 having a vertex of degree at least @xmath41 , the _ graph braid _",
    "groups @xmath42 and @xmath43 are the fundamental groups @xmath44 and @xmath45 , respectively , where arbitrary base points are fixed .    for the triod @xmath40 in figure  [ fig : permuterobotstriod ] ,",
    "both configuration spaces @xmath46 , @xmath47 are homotopy equivalent to a circle , see example  [ exa : topconf2pointt ] , i.e. @xmath48 , @xmath49 , although @xmath50 can be considered as an index  2 subgroup @xmath51 of @xmath48 .",
    "[ def : discconfigurationspaces ] the _ ordered discrete _",
    "space @xmath52 consists of all the products @xmath53 such that each @xmath11 is a cell of @xmath0 and @xmath54 for @xmath55 .",
    "the _ unordered discrete _ space @xmath56 is the quotient of @xmath52 by the action of @xmath17 .    the _ support _ @xmath57 of a subset @xmath58 is the minimum union of closed cells containing @xmath59 .",
    "for instance , the support of a vertex or open edge coincides with its topological closure in @xmath0 , while the support of a point interior to an open edge @xmath1 is @xmath2 , i.e. the edge @xmath1 with its endpoints .",
    "a configuration @xmath60 is _ safe _ if @xmath61 whenever @xmath55 .",
    "then @xmath52 consists of all safe configurations : @xmath62 .",
    "a path in a graph @xmath0 is _ essential _ if it connects distinct essential vertices of @xmath0 .",
    "a cycle in @xmath0 is _ essential _ if it contains a vertex of degree more than 2 .",
    "since only connected graphs are considered , a non - essential cycle coincides with the whole graph .",
    "subdivision theorem  [ the : subdivision ] provides sufficient conditions such that the configuration spaces @xmath63 deformation retract to their discrete analogues @xmath64 , respectively",
    ". then @xmath65 .    [ the : subdivision ] ( * ? ? ?",
    "* theorem  2.1 ) let @xmath0 be a connected graph , @xmath66 .",
    "the discrete spaces @xmath64 are deformation retracts of the topological configuration spaces @xmath67 , respectively , if both conditions ( [ the : subdivision]a ) and ( [ the : subdivision]b ) hold :    ( [ the : subdivision]a ) every essential path in @xmath0 has at least @xmath68 edges ;    ( [ the : subdivision]b ) every essential cycle in @xmath0 has at least @xmath68 edges .    the conditions above imply that @xmath0 has at least @xmath7 vertices , so @xmath69 .",
    "a strengthened version of subdivision theorem  [ the : subdivision ] for @xmath70 only requires that @xmath0 has no loops and multiple edges ( * ? ? ?",
    "* theorem  2.4 ) .",
    "hence the topological configuration spaces of 2 points on the kuratowski graphs @xmath71 deformation retract to their smaller discrete analogues , which are easy to visualise , see figure  [ fig : kuratowskigraphs ] .    in @xmath72",
    ", if the 1st robot is moving along an edge @xmath73 , then the 2nd robot can be only in the triangular cycle @xmath74 , which gives in total 10 triangular tubes @xmath75 forming the oriented surface of genus 6 .",
    "similarly , computing the euler characteristic , we may conclude that @xmath76 is the oriented surface of genus 4 .",
    "these are the only graphs without loops whose discrete configuration spaces @xmath77 are closed manifolds , see ( * ? ? ?",
    "* corollary  5.8 ) .     and",
    "@xmath78      there are two different approaches to computing graph braid groups suggested by abrams @xcite and farley , sabalka ( * ? ? ?",
    "* theorem  5.3 ) . in the former approach a graph braid group splits as a graph of simpler groups , which gives a nice global structure of the group and proves that , for instance , the graph braid groups are torsion free ( * ? ? ?",
    "* corollary  3.7 on p.  25 ) .",
    "the latter approach based on the discrete morse theory by forman @xcite writes down presentations of graph braid groups retracting a big discrete configuration space to a smaller subcomplex .",
    "we propose another local approach based on classical seifert ",
    "van kampen theorem  [ the : seifertvankampen ] .",
    "presentations are computed step by step starting from simple graphs and adding edges one by one , which allows us to update growing networks in real - time .",
    "resulting algorithm  [ alg : graphbraidgroups ] expresses generators of graph braid groups in terms actual motions of robots , i.e. as a list of positions at discrete time moments .",
    "we also design motion planning algorithm  [ alg : motionplanningunordered ] connecting any configurations of @xmath7 robots .",
    "its complexity is linear in the number of edges and quadratic in the number of robots .",
    "[ alg : graphbraidgroups ] there is an algorithm writing down a presentation of the graph braid group @xmath43 and representing generators by actual paths between configurations of robots , see step - by - step instructions in subsection  [ subs : motionplanningunordered ] .",
    "according to ( * ? ? ? *",
    "theorem  5.6 ) , the braid groups of planar graphs having only disjoint cycles have presentations where each relator is a commutator , not necessarily a commutator of generators . demonstrating the power of algorithm  [ alg : graphbraidgroups ]",
    ", we extend this result to a wider class of light planar graphs . a planar connected graph @xmath0",
    "is called _ light _ if any cycle @xmath79 has an open edge @xmath80 such that all cycles from @xmath81 do not meet @xmath82 .",
    "any loop or multiple edge provides an edge @xmath80 satisfying the above condition .",
    "figure  [ fig : triangulargraph ] shows a non - light planar graph with 4 choices of a ( dashed ) edge @xmath80 and corresponding ( fat ) cycles from @xmath81 . removing the closure @xmath83 from @xmath0 is equivalent to removing the endpoints of @xmath80 and all open edges attached to them .     ]",
    "[ cor:2pointgroups ] the braid group @xmath84 of any light planar graph @xmath0 has a presentation where each relator is a commutator of motions along disjoint cycles .    a stronger version of corollary  [ cor:2pointgroups ] with a geometric description of generators and relators is given in proposition  [ pro:2pointgroupsunordered ] in the case of unordered robots .",
    "* outline . * in section",
    "[ sect : discretespaces ] we consider basic examples and recall related results .",
    "section  [ sect : fundamentalgroupsunordered ] introduces the engine of propositions  [ pro : addhangingedgeunordered ] , [ pro : stretchhangingedgeunordered ] , [ pro : createcyclesunordered ] updating presentations of graph braid groups by adding edges one by one . section  [ sect : computinggroupsunordered ] lists step - by - step instructions to compute a presentation of an arbitrary graph braid group . as an application",
    ", we geometrically describe presentations of 2-point braid groups of light planar graphs .",
    "further open problems are stated in subsection  [ subs : openproblems ] .",
    "* acknowledgements . *",
    "the author thanks michael farber for useful discussions and lucas sabalka sending an early version of his manuscript @xcite .",
    "in this section we discuss discrete configuration spaces in more details and construct them recursively in lemmas  [ lem : recursiveconstructionunordered ] and  [ lem : recursiveconstructionordered ] .",
    "further we assume that @xmath66 .      in this subsection",
    "we describe configuration spaces of 2 points on the triod @xmath40 comprised of 3 hanging edges @xmath85 attached to the vertex @xmath4 , see figure  [ fig : triod2pointproducts ] .     and",
    "@xmath86 , @xmath87 , @xmath88 ]    [ exa : topconf2pointt ] the ordered topological space @xmath46 is the union of three 3-page books @xmath89 , @xmath90 , @xmath91 shown in the right pictures of figure  [ fig : triod2pointproducts ] without the diagonal @xmath92 .",
    "then @xmath46 consists of the 6 symmetric rectangles @xmath93 ( @xmath55 ) and 6 triangles from the squares @xmath94 , @xmath95 , after removing their diagonals , see the left picture of figure  [ fig : triod2pointspaces ] and ( * ? ? ?",
    "* example  6.26 ) .     and its discrete analogue @xmath96 ]    [ exa : discconf2pointt ] the ordered topological space @xmath46 deformation retracts to the polygonal circle in the right picture of figure  [ fig : triod2pointspaces ] , which is the ordered discrete space @xmath96 having 12 vertices @xmath97 ( @xmath55 ) and @xmath98 , @xmath99 , @xmath95 , symmetric under the permutation of factors .",
    "the unordered spaces @xmath100 are quotients of the corresponding ordered spaces by the rotation through @xmath101 and are homeomorphic to the same spaces @xmath102 , respectively .",
    "hence the graph braid groups @xmath48 , @xmath49 can be computed using the simpler discrete spaces @xmath103 , which is reflected in subdivision theorem  [ the : subdivision ] .      in this subsection",
    "we explain recursive constructions of discrete configuration spaces that will be used in section  [ sect : fundamentalgroupsunordered ] to compute their fundamental groups .",
    "[ exa : recursive2pointt ] we show how to construct the unordered space @xmath104 adding the closed edge @xmath105 to the subgraph @xmath106 $ ] . if both robots @xmath39 are not in the open edge @xmath107 , then @xmath108 , where @xmath109 $ ] , i.e. either @xmath110 , @xmath111 $ ] or @xmath112,2)$ ] .",
    "the robot @xmath113 can not be close to @xmath114 by definition  [ def : discconfigurationspaces ] , e.g. if @xmath115 then @xmath116 , i.e. @xmath117 or @xmath118",
    ". then @xmath119\\times v_1)\\cup { { \\mathrm{\\bf ud}}}([0,1],2)\\cup(\\{v_2,v_3\\}\\times\\bar e_1),\\ ] ] where the segments @xmath120 and @xmath121 are glued at the endpoints @xmath122 and @xmath123 , respectively .",
    "up to a homeomorphism , we get 2 arcs attached at theirs endpoints to a solid triangle without one side , see the left picture of figure  [ fig : attachcylinder ] .     ]",
    "the argument of example  [ exa : recursive2pointt ] motivates the following notion .",
    "the _ neighbourhood _",
    "@xmath124 of an open edge @xmath125 consists of @xmath2 and all open edges attached to the endpoints of @xmath1 . for instance , the complement to the neighbourhood @xmath126 in the triod @xmath40 consists of the hanging vertices @xmath127 , see the left picture of figure  [ fig : triod2pointproducts ] .",
    "[ exa : recursive2pointg ] extending the recursive idea of example  [ exa : recursive2pointt ] , we construct the unordered 2-point space @xmath128 of any connected graph @xmath0 .",
    "fix an open edge @xmath129 with vertices @xmath130 and consider the case when one of the robots , say @xmath114 , stays in @xmath1 , then @xmath131 , because @xmath113 can not be in the same edge @xmath1 and also in the edges adjacent to @xmath1 .",
    "if both robots @xmath39 are not in @xmath1 then @xmath132 is in the smaller unordered space @xmath133 .",
    "then @xmath128 is a union of smaller subspaces : @xmath134 where the cylinder @xmath135 is glued to @xmath133 along the subgraphs @xmath136 and @xmath137 .",
    "the reduction above extends to a general recursive construction in lemma  [ lem : recursiveconstructionunordered ] .",
    "lemmas  [ lem : recursiveconstructionunordered ] and [ lem : recursiveconstructionordered ] are discrete analogues of ghrist s construction of the ordered topological space @xmath14 ( * ? ? ?",
    "* lemma  2.1 ) .",
    "[ lem : recursiveconstructionunordered ] let a graph @xmath0 have an open edge @xmath1 with vertices @xmath130",
    ". then the unordered discrete space @xmath56 is homeomorphic to ( see figure  [ fig : attachcylinder ] ) @xmath138 the cylinder @xmath139 is glued to @xmath140 along @xmath141    in the space @xmath56 of all safe configurations @xmath142 consider the smaller subspace @xmath140 , where @xmath143 for each @xmath38 .",
    "the complement @xmath144 consists of configurations with(say ) @xmath145 . here",
    "the index @xmath7 is not important since the robots are not ordered . by definition  [ def : discconfigurationspaces ] , the other robots @xmath146 , i.e. the complement is @xmath147 the bases of the last cylinder are subspaces of the smaller configuration space : @xmath148 the cylinder @xmath149 represents motions when the @xmath7-th robot moves along @xmath1 , while the other robots remain in @xmath150 .",
    "further in sections  [ sect : fundamentalgroupsunordered ] and  [ sect : computinggroupsunordered ] the simpler unordered case is considered .",
    "we believe that our approach literally extends to the ordered case using similar lemma  [ lem : recursiveconstructionordered ] with @xmath7 cylinders indexed by @xmath38 since the robots are ordered .",
    "[ lem : recursiveconstructionordered ] let a graph @xmath0 have an open edge @xmath1 with vertices @xmath130 . then the ordered discrete space @xmath52 is homeomorphic to ( see figure  [ fig : attachcylinder ] ) @xmath151 @xmath152 is glued to @xmath153 @xmath154 @xmath155      in this subsection we recall general results on homotopy types of configuration spaces .",
    "recall that a topological space @xmath27 is _ aspherical _ or a @xmath156 space if it has a contractible universal cover , in particular @xmath157 for @xmath158 .",
    "a covering @xmath159 is _ universal _ if the cover @xmath28 is simply connected . then the covering @xmath160 has the _ universal _ property that , for any covering @xmath161 , there is another covering @xmath162 whose composition with @xmath161 gives the original covering @xmath159 .",
    "[ pro : asphericity ] _ ( asphericity of configuration spaces , ghrist ( * ? ? ?",
    "* corollary  2.4 , theorem  3.1 ) for topological spaces and abrams @xcite for discrete spaces ) _ every component of @xmath163 is aspherical",
    ".    ghrist ( * ? ? ?",
    "* corollary  2.4 , theorem  3.1 ) proves the above result for the ordered topological space @xmath14 , which implies the same conclusion for @xmath16 , because the universal cover of a component of @xmath16 is a universal cover of some component of @xmath14 as mentioned by abrams ( * ? ? ?",
    "* the proof of corollary  3.6 ) .",
    "proposition  [ pro : dimension ] implies that the homotopy type of discrete spaces depends on the graph @xmath0 , but not on the number @xmath7 of robots .",
    "it was proved by ghrist ( * ? ? ?",
    "* theorems 2.6 and 3.3 ) for the ordered topological space @xmath14 , which easily extends to the unordered case .",
    "the circle @xmath164 is excluded below , because its unordered space @xmath165 is contractible , while @xmath166 deformation retracts to a disjoint union of @xmath167 configurations indexed by permutations of @xmath7 robots up to cyclic shifts .",
    "[ pro : dimension ] _ ( homotopy type of topological configuration spaces ) _ if a connected graph @xmath0 is not homeomorphic to @xmath164 and has exactly @xmath168 essential vertices , then @xmath14 and @xmath16 deformation retract to @xmath168-dimensional complexes .",
    "for instance , the configuration spaces of 2 robots in the triod @xmath40 having a single essential vertex deformation retract to a 1-dimensonal circle , see examples  [ exa : topconf2pointt ] , [ exa : discconf2pointt ] .",
    "in this section we compute graph braid groups showing how their presentations change by seifert  van kampen theorem  [ the : seifertvankampen ] after adding new edges to a graph .",
    "let @xmath20 be open path - connected subsets of @xmath169 such that @xmath170 is also path - connected .",
    "if @xmath20 are not open in @xmath169 , they usually can be replaced by their open neighbourhoods that deformation retract to @xmath20 , respectively .",
    "assume that @xmath171 have a common base point .",
    "if @xmath172 is a finite vector of elements then a group presentation has the form @xmath173 , where the relator @xmath174 ( a vector of words in the alphabet @xmath172 ) denotes the vector relation @xmath175 .",
    "we give the practical reformulation of the seifert ",
    "van kampen theorem ( * ? ? ?",
    "* theorem  3.6 on p.  71 ) .",
    "[ the : seifertvankampen ] _",
    "( seifert  van kampen theorem ( * ? ? ?",
    "* theorem  3.6 on p.  71 ) ) _ + if presentations @xmath176",
    ", @xmath177 are given and @xmath178 is generated by ( a vector of ) words @xmath172 , then the group @xmath179 has the presentation @xmath180 , where @xmath181 are obtained from the words @xmath172 by rewriting them in the alphabets @xmath182 , @xmath183 , respectively .    as an example , consider the 2-dimensional torus @xmath169 , where @xmath27 is the complement to a closed disk @xmath184 , while @xmath28 is a open neighbourhood of @xmath184 , i.e. @xmath185 is an annulus .",
    "then @xmath27 is homotopically equivalent to a wedge of 2 circles , i.e. @xmath186 is free , @xmath187 is trivial and @xmath188 , hence @xmath189 as @xmath190 represents the boundary of @xmath184 .",
    "we will write down presentations of the fundamental groups @xmath191 step by step adding edges to the graph and watching the changes in the presentations .",
    "the base of our recursive computation is the contractible space @xmath192,n)$ ] of @xmath7 robots in a segment whose fundamental group is trivial .",
    "in proposition  [ pro : addhangingedgeunordered ] we glue a hanging edge to a vertex of degree at least 2 , e.g. to an internal vertex of @xmath9 $ ] , which may create an essential vertex . in proposition",
    "[ pro : stretchhangingedgeunordered ] we add a hanging edge to a hanging vertex of degree  1 , which does not create an essential vertex . in example",
    "[ exa : createcyclesunordered ] and proposition  [ pro : createcyclesunordered ] we attach an edge creating cycles .",
    "algorithm  [ alg : graphbraidgroups ] computing graph braid groups is essentialy based on propositions  [ pro : addhangingedgeunordered ] , [ pro : stretchhangingedgeunordered ] , [ pro : createcyclesunordered ] showing how a presentation is gradually becoming more complicated .",
    "we start with the degenerate case when a tree @xmath59 is obtained by adding a hanging edge @xmath1 to some internal vertex @xmath4 of @xmath9 $ ] .",
    "assume that @xmath9 $ ] is subdivided into at least @xmath193 subedges , otherwise the discrete configuration space @xmath194 since @xmath7 robots occupy at least @xmath7 distinct vertices .",
    "choose a hanging ( open ) edge @xmath195 attached to a hanging vertex @xmath196 and vertex @xmath4 of degree at least 3 .",
    "if the vertex @xmath4 has degree @xmath3 then @xmath197 consists of @xmath198 disjoint subtrees , some of them could be points .",
    "hence @xmath199 splits into @xmath198 subspaces @xmath200 , where @xmath201 may vary from @xmath202 to @xmath198 .",
    "fix base points : @xmath203     to a non - hanging vertex @xmath4 ]    we also fix a base point @xmath204 , which can be chosen as @xmath205 for simplicity . in @xmath199 find a path @xmath206 from @xmath207 to @xmath208 , a path @xmath209 from @xmath210 to @xmath211 , @xmath212 , see figure  [ fig : addhangingedge ] and motion planning algorithm  [ alg : motionplanningunordered ] in subsection  [ subs : motionplanningunordered ] .",
    "the base configurations @xmath213 are connected by the motion @xmath214 when @xmath193 robots stay fixed at @xmath215 and 1 robot moves along @xmath2 , see figure  [ fig : addhangingedge ] .",
    "adding @xmath216 at the start and end of the motion @xmath214 , respectively , we get the @xmath198 paths @xmath217 going from @xmath207 to @xmath210 in @xmath218 , @xmath212 . for a loop @xmath219 representing a motion of @xmath193 robots , the loop @xmath220 denotes the motion when @xmath193 robots follow @xmath221 and one robot remains fixed at @xmath196 .",
    "[ pro : addhangingedgeunordered ] _ ( adding a hanging edge @xmath1 to a non - hanging vertex @xmath4 ) _ + in the notations above and for presentations @xmath222 and @xmath223 the group @xmath224 is generated by @xmath225 , @xmath226 , @xmath227 , @xmath228    by the recursive construction from lemma  [ lem : recursiveconstructionunordered ] one has @xmath229 since @xmath230 splits into the vertex @xmath196 and the remaining subgraph @xmath231 , then the space @xmath232 consists of the 2 connected components @xmath233 , where all robots are in @xmath231 , and @xmath234 , where one robot is at @xmath196 .",
    "the non - connected cylinder @xmath235 splits into @xmath198 cylinders @xmath236 connecting @xmath233 and @xmath234 since the complement @xmath197 is obtained from @xmath59 by removing @xmath130 and all open edges attached to the vertex @xmath4 of degree @xmath3 .",
    "add the cylinders @xmath236 to the subspace @xmath233 , which does not affect the group @xmath237 , because the cylinders deformation retract to their bases @xmath238 . to apply seifert ",
    "van kampen theorem  [ the : seifertvankampen ] correctly , add all the paths @xmath217 to the resulting union , which gives the @xmath239 new generators @xmath240 , @xmath241 .",
    "consider the space @xmath234 as a subspace of @xmath218 .",
    "formally a loop @xmath242 becomes the loop @xmath243 from @xmath244 , where one robot remains fixed at @xmath196 .",
    "the same argument applies to the relator @xmath245 .",
    "no other relations appear as the intersection of @xmath246 and @xmath247 contracts to @xmath207 .",
    "now take the union with the remaining subspace @xmath234 , which adds the generators and relations of @xmath248 .",
    "the resulting intersection deformation retracts to the wedge of the @xmath198 bases @xmath249 , so each generator @xmath250 gives a relation between the words representing the loops @xmath251 in the spaces @xmath233 and @xmath234 .",
    "in the latter space the loop can be conjugated by @xmath217 , which replaces @xmath210 by the base point @xmath252 , we may set @xmath253 .",
    "notice that the loops @xmath254 live in @xmath233 with the base point @xmath207 and can be expressed in terms of the generators @xmath255 .",
    "so the last equality in the presentation is a valid relation between new generators .      in this subsection",
    "we show how the presentation of a braid group changes after stretching a hanging edge of a tree .",
    "first we consider the degenerate case of stretching a hanging edge @xmath1 of the triod @xmath40 in the top left picture of figure  [ fig : stretchhangingedge ] .",
    "[ exa : stretchhangingedgeunordered ] let @xmath59 be the tree obtained by adding a hanging edge @xmath256 to the hanging vertex @xmath196 of the triod @xmath40 in the top left picture of figure  [ fig : stretchhangingedge ] , i.e. @xmath257 , where @xmath258 is the only hanging vertex of @xmath256 in the tree @xmath59 .",
    "the complement @xmath259 consists of 2 hanging edges distinct from @xmath1 and meeting at the centre @xmath4 of the triod @xmath40 .",
    "we compute the braid group @xmath260 using @xmath48 from example  [ exa : discconf2pointt ] . by lemma  [ lem : recursiveconstructionunordered ]",
    "the unordered space @xmath261 has the form @xmath262 where the 2 components of @xmath263 are connected by the band @xmath264 .",
    "first we apply seifert  van kampen theorem  [ the : seifertvankampen ] to the union @xmath265 , which keeps the fundamental group unchanged , i.e. isomorphic to @xmath48 , because the union deformation retracts to @xmath104 .",
    "then we apply the same trick taking the union with @xmath266 , which leads to @xmath267 for the same reasons .    ]",
    "proposition  [ pro : stretchhangingedgeunordered ] below extends example  [ exa : stretchhangingedgeunordered ] to a general tree @xmath59 .",
    "choose an ( open ) edge @xmath268 with a hanging vertex @xmath258 and vertex @xmath196 of degree  2 .",
    "fix a base point : @xmath269 let @xmath270 be the motion from @xmath271 to @xmath272 in @xmath218 , when @xmath193 robots stay fixed at @xmath207 , while 1 robot moves along @xmath273 , see the right picture of figure  [ fig : stretchhangingedge ] . then , for a loop @xmath274 , both loops @xmath275 and @xmath276 pass through the base point @xmath277 .",
    "[ pro : stretchhangingedgeunordered ] _ ( stretching a hanging edge ) _",
    "+ in the notations above and for presentations @xmath278 and @xmath279 @xmath280 @xmath281    by the recursive construction from lemma  [ lem : recursiveconstructionunordered ] one has @xmath282 where the cylinder @xmath283 is glued to @xmath284 along the bases @xmath285 and @xmath286 .",
    "since @xmath256 is hanging then @xmath287 has 2 components : the hanging vertex @xmath258 and remaining tree @xmath257 , hence @xmath288 .",
    "since the edge @xmath1 is hanging in @xmath289 before stretching then the complement @xmath287 and cylinder @xmath290 are connected .",
    "adding the cylinder to @xmath291 does not change the presentation of the fundamental group , because the cylinder deformation retracts to its base in @xmath291 .",
    "then add @xmath292 meeting the previous union along @xmath285 .    by seifert ",
    "van kampen theorem  [ the : seifertvankampen ] to get a presentation of @xmath224 with the base point @xmath271 , we add the generators @xmath293 and relations @xmath294 coming from the group @xmath295 .",
    "add the new relations @xmath296 saying that the generators of the group @xmath297 after adding the stationary @xmath7-th robot become homotopic through the subspace @xmath290 .      in this subsection",
    "we extend our computations to graphs containing cycles .",
    "first we show how the braid group changes if an edge is added at 2 vertices of a triod .",
    "[ exa : createcyclesunordered ] let @xmath0 be the graph obtained from the triod @xmath40 in the top left picture of figure  [ fig : createcycles ] by adding the edge @xmath80 at the vertices @xmath298 . by lemma  [ lem : recursiveconstructionunordered ] one",
    "has @xmath299 geometrically the band @xmath300 is glued to the hexagon @xmath104 as shown in the bottom left picture of figure  [ fig : createcycles ] . to compute the graph braid group @xmath84 we first add to the band @xmath300 the motions @xmath301 connecting the base configuration @xmath302 to @xmath303 , @xmath304 , respectively .",
    "this adds a generator to the trivial fundamental group of the contractible band @xmath300 .",
    "second we add the union @xmath305 to @xmath104 , which gives @xmath128 .",
    "the intersection of the spaces attached above has the form @xmath306 and is contractible , i.e. @xmath84 is the free product of @xmath307 and @xmath308 .",
    "creating cycles ]    proposition  [ pro : createcyclesunordered ] extends example  [ exa : createcyclesunordered ] to a general graph excluding the case @xmath309 .",
    "choose an ( open ) edge @xmath310 with vertices @xmath298 such that @xmath311 is connected .",
    "let @xmath312 consist of @xmath5 connected components .",
    "then @xmath313 splits into @xmath5 subspaces @xmath314 , where @xmath315 .",
    "fix base points @xmath316 and @xmath317 .",
    "denote by @xmath318 the motion such that one robot goes along the path @xmath319 from @xmath320 to @xmath321 , while the other robots remain fixed at @xmath317 , see the right picture of figure  [ fig : createcycles ] in the case @xmath322 when we may skip the index @xmath201 .",
    "take paths @xmath323 going from @xmath207 to @xmath324 , respectively , in @xmath325 , see algorithm  [ alg : motionplanningunordered ] .",
    "then @xmath326 is a loop with the base point @xmath207 in the space @xmath56 .",
    "[ pro : createcyclesunordered ] _ ( adding an edge @xmath80 creating cycles ) _ given presentations @xmath327 the group @xmath328 is generated by @xmath172 , @xmath326 subject to @xmath175 and @xmath329    the @xmath5 subspaces @xmath314 can be disconnected , but they are in a 1 - 1 correspondence with the connected components of @xmath312 . each of the cylinders @xmath330 meets the subspace @xmath325 at the bases @xmath331 and @xmath332",
    "first we add to each cylinder @xmath330 the union of the paths @xmath333 connecting the bases to @xmath334 , see figure  [ fig : createcycles ] .",
    "the fundamental group of @xmath335 is isomorphic to the free product of @xmath336 and @xmath337 generated by the loop @xmath326 .",
    "second we add to @xmath325 each union @xmath335 .",
    "the intersection of the spaces attached above has the form @xmath338 and is homotopically a wedge of 2 copies of the base @xmath314 . by siefert ",
    "van kampen theorem  [ the : seifertvankampen ] we express the loops @xmath339 and @xmath340 generating the fundamental group of the intersection in terms of the loops from @xmath341 in the latter space these loops are conjugated by @xmath326 as required , i.e. homotopic through the cylinder @xmath330 .",
    "if the vector of generators @xmath174 is empty , i.e. the groups @xmath342 are trivial , then no new relations are added in proposition  [ pro : createcyclesunordered ] .",
    "at the end of subsection  [ subs : motionplanningunordered ] we give step - by - step instructions of algorithm  [ alg : graphbraidgroups ] computing presentations of graph braid groups .",
    "the computing algorithm is based on the technical propositions from section  [ sect : fundamentalgroupsunordered ] and auxiliary algorithms from subsection  [ subs : motionplanningunordered ] below . as a theoretical application , in proposition  [ pro:2pointgroupsunordered ]",
    "we extend the result about 2-point braid groups of graphs with only disjoint cycles ( * ? ? ?",
    "* theorem  5.6 ) to a wider class of graphs including all light planar graphs .",
    "proposition  [ pro : addhangingedgeunordered ] requires a collision free motion connecting two configurations of @xmath7 robots .",
    "take a connected graph @xmath0 and number its vertices .",
    "we will work with discrete configuration spaces assuming that at every discrete moment all robots are at vertices of a graph @xmath0 and in one step any robot can move to an adjacent vertex if it is not occupied .",
    "the output contains positions of all robots at every moment .    to describe planning algorithm  [ alg : motionplanningunordered ] we introduce auxiliary definitions and searching algorithms  [ alg : extremerobots ] , [ alg : neighbourrobot ] .",
    "the @xmath343-th robot is called _ extreme _ in a given configuration @xmath344 if the remaining robots are in one connected component of @xmath345 .",
    "one configuration may have several extreme robots , e.g. on a segment there are always 2 extreme robots , while on a circle every robot is extreme .      for each robot",
    "@xmath348 we visit all vertices of @xmath345 remembering the robots we have seen .",
    "if not all robots were seen then the robot @xmath348 is not extreme and we check a robot from a smaller connected component of @xmath345 , which has fewer edges than @xmath0 .",
    "hence we will inevitably find an extreme robot , which requires in total not more than @xmath346 steps for each @xmath38 .",
    "a robot @xmath349 is a _",
    "neighbour _ of a robot @xmath348 if a shortest path from @xmath349 to @xmath348 has the minimal number of edges among all shortest paths from @xmath349 to robots @xmath350 for @xmath351 . for @xmath7 robots on a segment each of the 2 extreme robots has a unique neighbour , while on a circle each robot has 2 neighbours .",
    "a shortest path to a neighbour does not contain other robots , i.e. the corresponding motion is collision free .",
    "we travel on @xmath0 in a ` spiral way ' starting from @xmath348 , i.e. first we visit all vertices adjacent to @xmath348 and check if there is another robot @xmath349 at one of them , which can be a neighbour of @xmath348 . if not then repeat the same procedure recursively for all these adjacent vertices . in total",
    "we pass through not more than @xmath346 edges of @xmath0 .      for simplicity",
    "we assume that all robots are at vertices of degree  2 , otherwise we may subdivide edges of the graph @xmath0 and move a robot to an adjacent vertex of degree 2 .",
    "this increases the number @xmath346 of edges by not more than @xmath354 .",
    "_ assume that the found extreme robot , say @xmath356 , is from the final configuration , otherwise swap the roles of initial and final positions .",
    "using algorithm  [ alg : extremerobots ] of complexity @xmath352 , find a shortest path from @xmath356 to its neighbour , say @xmath357 , from the initial configuration .",
    "then safely move @xmath357 towards @xmath356 along the shortest path avoiding collisions and keeping fixed all other robots from the initial configuration .",
    "_ step 3 . _ remove from the graph @xmath0 the robot @xmath356 at a vertex of degree  2 and all open edges attached to @xmath356 reducing the problem to a smaller graph with @xmath193 robots .",
    "the new graph remains connected since the robot @xmath356 was extreme .",
    "return to _ step 1 _ applying the recursion @xmath193 times , which gives @xmath353 operations in total .    in algorithm",
    "[ alg : motionplanningunordered ] the quadratic complexity in the number of robots seems to be asymptotically optimal , because avoiding collisions between @xmath7 robots should involve some analysis of their pairwise positions .",
    "start from @xmath7 robots on a segment subdivided into @xmath193 subsegments , when the configuration space @xmath192,n)$ ] is a single point and @xmath358,n)$ ] is trivial .",
    "construct the graph @xmath0 adding edges one by one and updating presentations of resulting graph braid groups by propositions  [ pro : addhangingedgeunordered ] , [ pro : stretchhangingedgeunordered ] and [ pro : createcyclesunordered ] .",
    "when we need a motion connecting 2 configurations , we apply motion planning algorithm  [ alg : motionplanningunordered ] .",
    "every generator is represented as a list of vertices where robots are located at every discrete moment .",
    "the first part of lemma  [ lem:2pointtreegroupsunordered ] without computing the rank was obtained by the global approach of abrams ( * ? ? ?",
    "* corollary  ) .",
    "the second part was claimed by farber ( * ? ? ?",
    "* theorems  9 , 10 ) . both parts follow from our local step - by - step computations .",
    "induction on the number of edges of @xmath59",
    ". the base @xmath360 $ ] is trivial . in the inductive step notice that trees are contractible , hence their fundamental groups are trivial and for @xmath70 the vectors @xmath361 ( with indices @xmath201 ) are empty in propositions  [ pro : addhangingedgeunordered ] and  [ pro : stretchhangingedgeunordered ] .",
    "the vectors @xmath174 are also empty , because they can only come from 2-point braid groups of smaller trees .",
    "so the braid group @xmath260 is free .",
    "the only generators of @xmath260 are @xmath240 , @xmath362 , coming from proposition  [ pro : addhangingedgeunordered ] , which gives @xmath363 generators in total after attaching all edges to each vertex @xmath4 of degree @xmath3 .",
    "the kuratowski graphs @xmath71 in figure  [ fig : kuratowskigraphs ] do not satisfy lemma  [ lem : chooseedge ] , because the complement to the neighbourhood of any edge @xmath73 ( @xmath364 , respectively ) is the triangular ( rectangular , respectively ) cycle intersecting any cycle @xmath365 .    [",
    "lem : chooseedge ] any light planar graph can be constructed from a tree by adding edges as follows : an open edge @xmath80 added to the new graph @xmath0 creates a cycle @xmath82 not meeting any cycle from @xmath312 having all its cycles in one connected component .",
    "recall that a planar connected graph @xmath0 is light if any cycle @xmath79 has an edge @xmath80 such that all cycles from @xmath81 ( or , equivalently , @xmath312 ) do not meet @xmath82 . for",
    "a given light planar graph @xmath0 , take any cycle @xmath82 and corresponding edge @xmath80 .",
    "the smaller graph @xmath311 is light planar , because it has fewer cycles satisfying the same condition .",
    "we may also assume that all cycles of the subgraph @xmath312 are in one connected component , otherwise it splits as in the left picture of figure  [ fig : chooseedge ] .",
    "indeed , the open edge @xmath80 can not split @xmath0 since @xmath80 belongs to the cycle @xmath79 .",
    "then we may choose another cycle from a component of @xmath312 with a smaller number of edges etc .",
    "remove edges one by one until the light planar graph becomes a tree .",
    "the original graph can be reconstructed by reversing the procedure above .",
    "the construction from lemma  [ lem : chooseedge ] is also applicable to some non - light planar graphs .",
    "the right picture of figure  [ fig : chooseedge ] shows 3 stages of such a construction , where the closed edge @xmath83 is dashed and the corresponding subgraph @xmath312 has fat edges .",
    "the biggest graph fails to be light planar because of the cycle bounding the grey triangle .",
    "for the same graph and dashed edge @xmath80 , one can choose another cycle @xmath82 that does not meet the only ( triangular ) cycle from @xmath312 .",
    "lemma  [ lem : chooseedge ] implies that corollary  [ cor:2pointgroups ] for unordered robots is a particular case of more technical proposition  [ pro:2pointgroupsunordered ] , which holds for all graphs constructed as described above .",
    "[ pro:2pointgroupsunordered ] for any graph @xmath0 constructed from a tree as in lemma  [ lem : chooseedge ] , let @xmath168 be the first betti number of @xmath0 .",
    "the braid group @xmath84 has a presentation with @xmath366 generators subject to commutator relations , where the sum is over all vertices @xmath367 of degree at least 3 .",
    "a geometric description follows .",
    "@xmath368 at each vertex @xmath367 fix an edge @xmath369 . for any unordered pair of other edges @xmath370 at the same vertex @xmath4 , @xmath212 , one generator of @xmath84 swaps 2 robots in the triod @xmath371 using the collision free motion shown in figure  [ fig : permuterobotstriod ] .",
    "@xmath368 denote by @xmath372 disjoint open edges of @xmath0 such that @xmath373 is a tree .",
    "the remaining @xmath168 generators of @xmath84 correspond to cycles @xmath374 passing through the selected edges @xmath372 , respectively , when one robot stays at a base point and the other robot moves along a cycle @xmath375 without collisions .      by subdivision theorem  [ the : subdivision ] to compute the 2-point braid group @xmath84 , we may assume that @xmath0 has no loops and multiple edges removing extra trivial vertices of degree  2 .",
    "induction on the first betti number @xmath168 .",
    "base @xmath376 is lemma  [ lem:2pointtreegroupsunordered ] , where every generator @xmath240 coming from proposition  [ pro : addhangingedgeunordered ] is represented by a loop swapping 2 robots near a vertex of degree at least 3 as shown in figure  [ fig : permuterobotstriod ] .    in the induction step , for an edge @xmath310 from lemma  [ lem : chooseedge ] , we show how a presentation of @xmath84 differs from a presentation of @xmath377 satisfying the conditions by the induction hypothesis .",
    "since all cycles of @xmath312 are in one connected component then @xmath322 in proposition  [ pro : createcyclesunordered ] and we skip the index @xmath201 .",
    "so we add 1 new generator @xmath378 that conjugates the loops @xmath379 and @xmath380 .",
    "geometrically , @xmath378 represents a motion when the 1st robot stays away from the 2nd robot that completes a cycle @xmath381 containing @xmath80 .",
    "it remains to show that the loops @xmath382 and @xmath383 are homotopic , i.e. the new relator is a commutator .",
    "take the cycle @xmath365 from the construction of lemma  [ lem : chooseedge ] .",
    "since @xmath82 does not meet all cycles from @xmath312 , then we may move the 2nd robot along @xmath384 from @xmath385 to @xmath386 without collisions with the 1st robot moving along the cycles @xmath182 generating @xmath387 .",
    "this gives a free homotopy from @xmath382 to @xmath388 .    during",
    "the motion @xmath389 the 1st robot is fixed at the base point @xmath210 in @xmath312 , the 2nd moves along @xmath384 avoiding all cycles of @xmath312 . in proposition",
    "[ pro : createcyclesunordered ] we may choose the path @xmath390 from @xmath207 to @xmath391 in @xmath392 so that @xmath393 . then the loops @xmath379 and @xmath380 are homotopic with the fixed base point @xmath394 .",
    "our experience shows that presentations of planar graph braid groups may naturally contain relators that are not commutators if there are no enough disjoint cycles .",
    "so we state the problem opposite to ( * ? ? ?",
    "* conjecture  5.7 ) saying that all 2-point braid groups of planar graphs have presentations where all relators are commutators ."
  ],
  "abstract_text": [
    "<S> we design an algorithm writing down presentations of graph braid groups . </S>",
    "<S> generators are represented in terms of actual motions of robots moving without collisions on a given graph . </S>",
    "<S> a key ingredient is a new motion planning algorithm whose complexity is linear in the number of edges and quadratic in the number of robots . </S>",
    "<S> the computing algorithm implies that 2-point braid groups of all light planar graphs have presentations where all relators are commutators . </S>"
  ]
}