{
  "article_text": [
    "the enumeration of self - avoiding polygons ( saps ) is a classical problem in statistical mechanics and combinatorics .",
    "exact results have thus far largely required the restriction of saps to sub - classes that are in some way _ convex_. in two dimensions , convexity means that the perimeter is equal in length to the length of the minimum bounding rectangle ( mbr ) .",
    "column - convexity means that any vertical cross - section may only intersect the polygon twice , such that all columns are connected .",
    "examples of convex and column - convex polygons can be seen in figure  [ fig : convex_examples ] .",
    "convex polygons on two - dimensional lattices have been studied extensively by lin @xcite and bousquet - mlou @xcite and many exact results are known including the full area - perimeter generating function . in 1997 , bousquet - mlou and guttmann @xcite gave exact results for convex polygons in three dimensions and a method for their enumeration in arbitrary dimensions @xcite .",
    "enting @xcite described polygons as almost - convex if their perimeter differs from the perimeter of their minimum bounding rectangle by twice their ` concavity index ' , @xmath0 .",
    "such polygons are called _",
    "@xmath0-convex _ polygons and are characterised by having up to @xmath0 indentations in their perimeter .",
    "examples of 1-convex and 2-convex polygons can be found in figure  [ fig : almost_examples ] .",
    "enting derived the asymptotic behaviour of the number of @xmath0-convex polygons according to their perimeter , @xmath5 for @xmath6 .",
    "the results were confirmed for the case @xmath7 ( i.e. convex polygons ) by the known perimeter generating function .",
    "subsequently , lin  @xcite derived the exact generating function for 1-convex polygons , using a ` divide and conquer ' technique introduced to the problem of convex animals ( the interior of a convex sap ) by klarner and rivest @xcite .",
    "his result provided support for a conjecture in @xcite , giving the next term in the asymptotic expansion for the number of polygons with perimeter @xmath5 and concavity index @xmath8    this is the second in a series of papers that look at families of @xmath0-convex polygons . in the first @xcite we outlined the 50-year history of polygon enumeration on the square lattice before re - deriving the generating functions for 1-convex polygons in an effort to generalise the methodology and extend the results to osculating and neighbour - avoiding polygons .",
    "polygon models have long been used to model vesicles , with self - avoiding polygons being the canonical model @xcite . associating a fugacity with the _ area _ of the polygon ,",
    "a phase transition occurs , so that at sufficiently high fugacity , the polygons change from the self - avoiding class to the convex class .",
    "the introduction of @xmath0-convex polygons permits the exploration of this phase transition in greater detail .",
    "firstly , we find the ( unsurprising ) result that @xmath0-convex polygons , for @xmath0 finite , have the same fractal dimension ( and hence are in the same universality class ) as convex polygons , that is to say , the fractal dimension remains unchanged at 2 ( as compared to the value @xmath9 for self - avoiding polygons ) .",
    "secondly , the @xmath0-convex model permits one to associate a fugacity with the concavity index @xmath0 , and this would be the polygon analogue of the stiffness in self - avoiding walk models of polymer stretching .",
    "it is however not our purpose to study this aspect of the problem here .",
    "ideally , one would like to predict how the form of the generating functions changes as the concavity index grows .",
    "this would help us understand what happens in the scaling limit as the concavity index grows in proportion to the perimeter .    in 2000 , in unpublished work , we conjectured , on the basis of long series expansions , the ( isotropic ) generating function for the case @xmath10 in this paper , we describe the numerical procedure that led to this conjecture , and proceed to prove it .",
    "indeed , we do so for the full anisotropic generating function , in which steps in the @xmath2 and @xmath3 directions are distinguished . in so doing , we develop tools that allow for the case @xmath4 to be studied , though we do not do so .",
    "in section  [ s_enum ] we describe the series expansions that allowed us to conjecture the exact result , and also , not incidentally , to provide checks on our rigorous results in the process of proving our conjecture . in the following section we introduce the methodology used to derive our results , followed by examples of its application .",
    "we enumerate all the separate building blocks required in the factorisation of 2-convex polygons .",
    "the intermediate results , as well as much of the detail , are omitted for reasons of conciseness and clarity .",
    "these may be found together with the equivalent staircase and unimodal results in @xcite and @xcite , where the presented results first appeared .",
    "in this section we briefly summarise some definitions and notation used in the remainder of the paper .",
    "directed walks ( dws ) : square lattice walks that take either positive or negative steps in each of the horizontal and vertical directions , but not both . for example , a walk that only steps up and to the left is directed .",
    "generating functions : if the number of polygons ( in a given class ) with perimeter @xmath5 is @xmath11 then the associated isotropic generating function is @xmath12 . for polygons on the square lattice",
    "the perimeter is always even and we shall therefore study the _ half - perimeter _ generating functions @xmath13 . in more generality",
    "we distinguish between the number of steps in the @xmath2 and @xmath3 directions and study the full anisotropic generation functions , @xmath14 , where @xmath15 is the number of polygons with @xmath16 horizontal steps and @xmath17 vertical steps .",
    "the half - perimeter operator : we denote by @xmath18 the operator that converts the perimeter generating function to the half - perimeter generating function . @xmath19 ( resp .",
    "@xmath20 ) converts only the direction counted by @xmath2 ( resp .",
    "@xmath3 ) .",
    "( for a full definition , see @xcite . )",
    "we therefore have @xmath21 = e_x\\left[e_y\\left[f(x , y)\\right]\\right]\\ ] ] where @xmath22 = ( f(\\sqrt{x},y)+f(-\\sqrt{x},y))/2.\\ ] ] if @xmath2 or @xmath3 ( or a function of @xmath2 or @xmath3 ) is asterisked , then the operator only takes the half - perimeter of the non - asterisked generating function .",
    "that is , @xmath23 = e_x\\left[f(x , y)\\right]\\big|_{y\\rightarrow x}.\\ ] ] for example , @xmath24 = ( 1-x)/(1 - 3x+x^2)$ ] and , more generally , @xmath25 = g(x ) e_x[f(x)],\\ ] ] which extends naturally to the multivariate case .",
    "this allows the conversion from the perimeter generating function to the half - perimeter generating function for different factors of a polygon separately .",
    "minimum bounding rectangle ( mbr ) : this is the smallest rectangle which encloses the polygon .",
    "the polygons in figure  [ fig : almost_examples ] have a @xmath26 mbr while the polygon in figure  [ fig : convex_def ] has a @xmath27 mbr .",
    "sides : a convex polygon can be factored , as per figure  [ fig : convex_def ] , into four overlapping dws : from @xmath28 to @xmath29 , from @xmath30 to @xmath31 , and so on .",
    "these are the maximal directed factors of the polygon , and we refer to them as the _ sides _ of the polygon .",
    "arcs : an _ arc _ of a convex polygon is made up of a pair of adjacent sides . that is , it a maximal partially - directed factor of the polygon .",
    "referring to figure  [ fig : convex_def ] , the top _ arc _ is the path from @xmath28 to @xmath31 , passing through @xmath32 and @xmath33 , and similarly for the bottom , left , and right arcs .",
    "indents : an indent occurs in a side when the dw takes a step in the ` wrong ' direction .",
    "we refer to such walks as ` almost - directed ' . as an example , consider the part of the perimeter on the top - right side , which , when the polygon is traversed anti - clockwise , only takes steps up and to the left .",
    "an indent would occur if this walk were to take steps down ( or to the right ) and then resume taking steps up and to the left .",
    "we shall distinguish between indents in the vertical and horizontal directions . in figure",
    "[ fig : almost_examples]a the polygon has a single vertical indent while the polygon in figure .",
    "[ fig : almost_examples]b has both a vertical and horizontal indent .",
    "a walk taking @xmath34 steps in the ` wrong ' direction followed by @xmath35 steps in the ` correct ' direction produces an indent @xmath36 deep .",
    "note that a vertical indent may contain a horizontal indent and vice versa .",
    "several years ago two of us ( ij and ajg ) found the exact generating function , @xmath37 for 2-convex polygons numerically from exact enumerations for 2-convex polygons and some simpler sub - classes .",
    "we found the solution by counting the number of 2-convex polygons by using a program designed to enumerate saps @xcite . this program counts the number of saps by perimeter having a given mbr . from this data it is trivial to extract the 2-convex data .",
    "however , with the computational resources available at the time , we could not get a series long enough to find the generating function directly ( we counted 2-convex polygons up to perimeter 110 yielding 48 non - zero terms ) .",
    "we therefore enumerated three sub - classes , namely 2-convex polygons with one vertical indent 2 deep on the top arc , 2-convex polygons with two vertical indents 1 deep on the top arc , and 2-convex polygons with vertical indents 1 deep on the top and bottom arcs .",
    "the programs used in these enumerations were simple generalisations of the one used by guttmann and enting @xcite to count convex polygons .",
    "we then used the series for these sub - classes to find the respective generating functions @xmath38 , @xmath39 and @xmath40 .",
    "finally , we looked at the ` remainder ' of the full 2-convex case @xmath41 , which counts cases of 2-convex polygons with vertical and horizontal indents 1 deep , and managed to find the generating function ( and hence the full 2-convex generating function ) .",
    "we found the solution to the special cases via a judicious guess for the form of the generating functions . from lin @xcite , the isotropic generating function for 1-convex polygons",
    "is :    @xmath42    from this it is reasonable to expect that the generating function for 2-convex polygons @xmath37 and the special cases @xmath38 and so on are of a similar form , @xmath43/d(x)$ ] , where @xmath44 , @xmath45 and @xmath46 are polynomials .",
    "in particular we expect the denominator @xmath46 to be similar to the one in the above expression , but with larger exponents and possibly involving further simple factors .",
    "if we can find @xmath46 then @xmath44 and @xmath45 can be found simply from a formal series expansion using polynomials with unknown coefficients . by equating the terms in this formal series with",
    "the known series for say @xmath38 we find a set of linear equations for the unknown polynomial coefficients .",
    "here we give some further details of how we found the generating function @xmath38 .",
    "we calculated the number of convex polygons with an indent 2 deep on the top arc to perimeter 216 .",
    "this gives us the first 100 non - zero terms in the half - perimeter generating function .",
    "our first task is to determine the denominator @xmath46 .",
    "we did this by analysing the singularities of @xmath38 using differential approximants .",
    "our analysis showed that the series has singularities at @xmath47 with exponents @xmath48 and @xmath49 ( this confirms that at the dominant singularity we have a square - root correction term ) , at @xmath50 ( the first root of @xmath51 ) with exponents @xmath48 and @xmath52 , at @xmath53 with exponents @xmath54 and @xmath55 , and at @xmath56 ( the second root of @xmath51 ) with exponent @xmath48 .",
    "the conclusion is that in this case @xmath57 . by inserting this into the general form and equating terms in the formal expansion with those of @xmath38 we found a solution with polynomials @xmath44 and @xmath45 of degree 18 and 17 , respectively , with @xmath45 containing the factors @xmath58 , the latter of these factors was indicated by the exponents found at @xmath50 .",
    "the polynomials are : @xmath59    similarly we found the generating functions for the other three special cases @xmath39 , @xmath40 and @xmath60 .",
    "the only additional point worth noting is that the denominator in the case of @xmath60 contains the extra factor @xmath61 .",
    "collating these results we find that :    @xmath62    where @xmath63    in the next sections we show how to prove this result for the general anisotropic case .",
    "following from section  [ s_defs ] , one may describe convex polygons as a series of four non - intersecting dws that make up the four sides of the polygon .",
    "( to see this , we refer to figure  [ fig : convex_def ] . )",
    "if one of these sides has no steps in the interior of the mbr , this means that the polygon touches one of the corners of the mbr .",
    "this sub - class of convex polygons is referred to as directed - convex or unimodal",
    ". we could therefore define this class of polygons as having only three sides .",
    "similarly , staircase polygons are formed of two dws that start and end at diagonally opposite corners of the mbr .",
    "finally , pyramids and stack polygons also have two sides formed by dws , but these are adjacent sides , with a straight base or side edge .",
    "( stack polygons are simply pyramids on their sides . )",
    "such classes of convex polygons were depicted in figure  [ fig : convex_examples ] .    for notational convenience ,",
    "let us now define some well - known generating functions , where @xmath2 ( resp .",
    "@xmath3 ) counts the horizontal ( resp .",
    "vertical ) steps .",
    "the generating function for pairs of intersecting dws that begin and end at the same points ( referred to as staircase _ festoons _ )",
    "we denote as @xmath64 where @xmath65 .",
    "the staircase polygon generating function we denote as @xmath66 we note that the unimodal generating function is simply @xmath67 .",
    "now , by defining @xmath68 we can re - express all our almost - convex polygon generating functions as expressions with terms that are simply the quotient of polynomial functions of @xmath69 and @xmath70 .",
    "this is achieved via the transformation of variables @xmath71 for example , we have @xmath72      the temperley method is central to the enumeration of partially convex polygons .",
    "the so - called ` functional - temperley ' method allowed bousquet - mlou @xcite to enumerate classes of column - convex polygons .",
    "it differs from the temperley method in that it can be used to concatenate several large enumerable parts of the polygon , rather than individual columns .",
    "in particular the concatenated building blocks may be different types of polygons .",
    "a variation @xcite allowed for the enumeration of certain classes of animals , represented as heaps of dimers .",
    "rechnitzer @xcite identified these methods as equivalent , the superiority of one over the other lying in its ease of use and appropriateness to the recurrence relation underlying the problem .",
    "we call distinct enumerable parts of the polygons _ factors _ , due to our ability to factorise the polygons into such parts by separating them at unique factorisation points . in this paper",
    ", we use _ factorisation lines _ , which we define by extending the interior edge of the indentations of almost - convex polygons into lines that bisect the lattice ( see figure  [ fig:1-convex ] . )",
    "the approach that has been used repeatedly by lin @xcite in the enumeration of convex polygons is to build them up vertically , block by block .",
    "the functional - temperley method can therefore be used in this case .",
    "one tool which can be used to ` join ' polygonal blocks together is the hadamard product .",
    "( for a full description , see @xcite . )",
    "this is particularly useful when a few blocks need to be joined in a non - recurring manner .",
    "we use the hadamard product in calculating most of the generating functions in this paper .    consider two series , @xmath73 and @xmath74 , denote by @xmath75 the _ hadamard product _ with respect to @xmath76 , then @xmath77 the _ restricted hadamard product _ with respect to @xmath76 is defined as @xmath78 for notational convenience , we will refer to this as a _ hadamard join _",
    "( over @xmath76 ) , or simply a ` join ' .",
    "hence , the hadamard product over a given variable , say @xmath79 , is the operator which ` joins ' generating functions by matching the perimeters enumerated by @xmath79 .",
    "this is equivalent to joining the polygons by matching the edges of the respective polygons , such that they overlap , and then removing the overlapping edges , forming a single , larger polygon . we can also match the edge column , rather than the edge perimeter .",
    "for example , if we enumerate staircase and stack polygons according to their right perimeter , total perimeter and area , we can join them , making the neighbouring columns overlap . making the transformation @xmath80 and dividing by @xmath2",
    ", so that the overlapping column is not double - weighted , we form unimodal polygons , as in figure  [ fig : hadamard ] .",
    "it is straight - forward to show the following properties of restricted hadamard products @xcite .",
    "[ [ it - is - distributive ] ] it is distributive : + + + + + + + + + + + + + + + + + + +    @xmath81    [ [ it - follows - the - product - rule ] ] it follows the product rule : + + + + + + + + + + + + + + + + + + + + + + + + + + + +    @xmath82    [ [ it - evaluates - simply - at - poles ] ] it evaluates simply at poles : + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    @xmath83    we showed in @xcite how @xmath69 and @xmath70 can be used to simply express the generating functions for staircase polygons with fixed steps in the corner .",
    "the generating function @xmath84 counts staircase polygons that start with @xmath85 horizontal steps and end with @xmath86 vertical ones ( or _ vice versa _ ) .",
    "this allows us to enumerate parts of polygons with specific sequences of steps along the joins .",
    "moreover , because we can express the generating functions for all factors of almost - convex polygons as the quotient of polynomial expressions of @xmath69 and @xmath70 , evaluating the joins generally becomes straight - forward by separating the poles in the denominator using partial fractions .",
    "one way of inserting indents in convex polygons is to distinguish a step for the location of the indent and then make the appropriate adjustment to the generating function .",
    "we therefore factorise the polygon at the distinguished step by extending a line perpendicular to it .",
    "when an indent is joined to a staircase factor ( as per figure  [ fig:1-stair ] ) , the adjustment required for the indent is independent of its location .",
    "we distinguish between the walk forming the indent and the rest of that side of the polygon . in the case of a vertical indent ( as depicted in the figure ) , the indent starts with the vertical step at the same height as the distinguished step preceding the non - directed vertical step(s ) , and includes all steps up to ( but not including ) the distinguished step .",
    "we refer to it as the _ indent factor_. we note that a single , @xmath0-deep indent factor is therefore in the form of a pyramid .    as mentioned above , the generating function for staircase polygons with @xmath85 ( resp .",
    "@xmath86 ) fixed horizontal ( resp .",
    "vertical ) steps in one corner is @xmath84 . as each extra fixed step along the factorisation line contributes @xmath69 to the generating function",
    ", the contribution of the indent factor to these otherwise staircase polygons ( which are called 1-staircase polygons ) is therefore @xmath87 .",
    "we therefore define the 1-deep indent generating function to be @xmath88 and , for @xmath89 , the @xmath0-deep indent generating function is @xmath90    the height - independent insertion of indents can be extended to unimodal polygons . whereas staircase polygons can be separated into two halves  one with only positive steps , the other with only negative steps  unimodal polygons are defined by the fact that their positive horizontal steps occur before the negative ones , and similarly for the vertical steps .",
    "this means that if the unimodal polygon intersects itself , a staircase factor is formed . and",
    "so , if we factor a unimodal polygon along the base of a vertical indent on the left arc ( as per the staircase factorisation shown in figure  [ fig:1-stair ] ) , the indent must be a part of a staircase factor to the bottom - left and is therefore enumerated by @xmath91 .",
    "this leads us to the following proposition .    the generating function for bimodal @xmath0-staircase ( resp .",
    "@xmath0-unimodal ) polygons that are rooted in the bottom left corner and whose single @xmath0-deep indent is vertical and on the left arc is @xmath92 where @xmath93 ( resp .",
    "@xmath94 ) .",
    "this argument can be extended to enumerate unimodal polygons with two distinct indents on the same side .",
    "to construct such polygons , one may insert both indents at a distinguished height , and then mark a second height where we would like the second indent . we can therefore try to form the desired polygons by translating the closest of the two indents to the second of the distinguished heights . in @xcite",
    ", we point out that if the second indent lies below the first , this downward translation may cause the polygon to intersect . furthermore",
    ", in the other case , an upward translation will mean that the bottom arc of the polygon will not go above the original position of the translated indent .",
    "we show , however , that the missing polygons in one case are equal in number to the extra polygons in the other case .",
    "this intriguing fact leads to the following proposition .",
    "the generating function for 2-staircase ( resp .",
    "2-unimodal ) polygons that are rooted in the bottom left corner and with distinct vertical indents on the left arc is @xmath95        an important notion in deriving exact generating functions for almost - convex polygons is that of the so - called ` folding ' of dws .",
    "this notion is simply a way of describing the combinatorial objects enumerated by the enumerative methods developed in @xcite .",
    "these methods use the half - perimeter operator defined in section  [ s_defs ] to enumerate intersecting convex polygons , and then remove those that intersect .",
    "we are therefore interested in the enumeration of these intersecting polygons .",
    "we begin by considering dws , which are enumerated by @xmath96 where @xmath2 ( resp .",
    "@xmath3 ) counts the horizontal ( resp .",
    "vertical steps ) .",
    "if we then only consider those with an even number of horizontal steps , we can find either a vertex or a series of vertical steps that have half of these horizontal steps to the left , and half to the right .",
    "we can then fold the walk vertically at this point by reflecting all the steps to the left over to the right .",
    "( the axis of reflection is the vertical line that goes through the half - way point . )",
    "this walk is now half as wide as it was , and its generating function is therefore @xmath97.\\ ] ] by removing those that have a horizontal step after the fold , we obtain self - avoiding walks , which is an example of standard inclusion - exclusion techniques , @xmath98.\\ ] ] adding a width - one column to its side then gives us stack polygons ( that is , sideways pyramids ) .",
    "now , folding vertically as well allows us to make the walk end at its origin , forming a polygon . forcing the polygon to start with a horizontal step and end with a vertical one ( or _ vice versa _ ) then gives the following generating function for ( possibly intersecting ) unimodal polygons : @xmath99.\\ ] ]    finally , by distinguishing a horizontal step after which we fold ( rather than choosing the half - way point ) forces a second fold on the other side of the walk in order to make its width equal to half its original width .",
    "this means that the resulting polygon does not necessarily visit any corner of the mbr , and we are left with ( possibly intersecting ) convex polygons .",
    "the resulting generating function is @xmath100,\\ ] ] which is the @xmath101 case of bousquet - mlou and guttmann s multi - dimensional result ( lemma 2.2 , @xcite ) .",
    "folding walks is therefore a simple way of enumerating intersecting polygons ( or factors of polygons , for that matter ) with convexity requirements .",
    "this will allow us , in the following section , to enumerate 1-convex polygons in a direct , closed - form expression that is combinatorially interpretable .",
    "this provides us with an example of the methods required for the enumeration of the various sub - classes of 2-convex polygons .",
    "however , first we need to be able to fold one factor within a polygon ( that is joined directly to another factor ) without our methods breaking down . and",
    "for this we need `` wrapping '' ...      ` wrapping ' refers to folding a single factor of a polygon that has been constructed by joining multiple factors together . as an example consider 1-unimodal polygons formed by joining a staircase bottom factor to a unimodal top factor and an indent factor .",
    "the total height of the polygon is given by the sum of the heights of the top and bottom factors .",
    "the total width of the polygon is measured by adding the width of the top factor to the width of the bottom factor _ that lies to the left of the top factor_. in the 1-unimodal case , the generating function for the bottom factor is therefore @xmath102 , where @xmath103 is the length of the join .    in this case , the unimodal factor is enumerated as a folded walk , as per the previous section .",
    "however , we will sometimes fold the fixed steps of the polygon , leaving a chain of double - bonds of fixed steps around the fold , as shown in figure  [ fig : wrapping](a ) . if the join is of length @xmath103 , then there are @xmath103 fixed horizontal steps in each of the top and bottom factors that are identified , but are then removed and do not form part of the polygon . and so , if there are fewer than @xmath103 horizontal steps in the rest of the top unimodal factor , as depicted in the figure , then the contribution to the polygon is a pyramid of width @xmath104 , with a weight of @xmath105 .",
    "importantly , although those fixed steps are not part of the polygon itself , they do contribute to the weight .",
    "this is because the width of the polygon here is given by the top factor .",
    "when the @xmath18 operator folds the top factor , in order to keep the bottom factor joined to the top factor , it must therefore also be folded .",
    "we say that we have _ wrapped _ the bottom factor .",
    "we can therefore see that the fixed steps along the join that were folded to form double - bonds and whose width is counted in the resulting generating function is the projection of the wrapped part of the bottom factor .",
    "this is shown in figure  [ fig : wrapping](b ) .",
    "we therefore need not make any adjustment , as the width is enumerated correctly .",
    "finally , the required ` 1-unimodal ' polygons are obtained by translating the fixed vertical step below the join to the right edge of the polygon ( as shown in red in figure  [ fig : wrapping](b ) ) to ensure that the polygons are self - avoiding .    in conclusion , without needing to make any extra adjustment , wrapping allows us to enumerate almost - unimodal polygons with a single indent in the left side by _ only _ enumerating staircase polygons joined to unimodal ones .",
    "this is because the wrapping action also creates polygons that are composed of a unimodal bottom factor joined to a pyramid top factor .",
    "as an example of the above wrapping technique , we derive the generating function of 1-convex polygons with their indent on the top arc .",
    "it provides a much simpler derivation of the result than the method used in @xcite .",
    "we begin by adopting lin s factorisation of 1-convex polygons ( see @xcite ) by extending a line along the base of the indent , as in figure  [ fig:1-convex ] .",
    "we enumerate these polygons by following the inclusion - exclusion argument of @xcite , enumerating all the required polygons , including those that intersect , and then excluding those that intersect .",
    "the factorisation gives top and bottom unimodal factors that can be enumerated as walks that may be wrapped such that the bottom factor extends furthest to the right .",
    "the generating function of polygons of the form shown in part ( a ) of the figure can be expressed as @xmath106}-u^nv{e\\bigg[\\frac{xy}{1-x - y}{}\\bigg ] } \\right )   \\\\",
    "\\cdot \\left (      { e\\bigg[\\frac{x^{n+1}y^2}{1-x - y}{\\left(\\frac{x^2/(1-y)}{1-x^2/(1-y)}\\right)^2      \\left(\\frac{x}{1-y}\\right)^{n-1}}\\bigg]}- \\frac{u^{n+2}v}{(1-u)^2}{e\\bigg[\\frac{xy}{1-x - y}{}\\bigg ] } \\right ) \\nonumber \\\\ - 2x{\\mbox{\\,$\\mathcal{s}$}}^3z^3\\left(\\frac{1}{1-x}+uz\\right )    \\left(1+\\frac{v}{1-u}\\right).\\end{aligned}\\ ] ] the length of the join is taken to be @xmath5 .",
    "the term in the first line is the generating function for the unimodal top factor , with a base of at least length @xmath5 .",
    "the term @xmath107 enumerates dws that are folded by the e operator to form the unimodal factor .",
    "we note that due to the vertical symmetry , when this top factor is of height one , some polygons may be double - counted , giving the term @xmath108 , the @xmath109 forcing the top factor in the symmetric case to be of at least height two .",
    "the second line enumerates the bottom factor and the indent .",
    "again , using an inclusion - exclusion approach , we fold a walk to form the unimodal polygon and then exclude the intersecting cases . as the width along the join",
    "is already counted in the top factor , we adjust for the length of the join with the term @xmath110 .",
    "we then fix the horizontal steps of the indent factor , which can not be folded , giving the term @xmath111 rather than the expected @xmath112 , which can be folded .",
    "we recognise the last term in both of the first two lines as the exclusion cases when the polygons intersects in the top - right or bottom - left corner .",
    "the last term comes from the possibility of intersection in the bottom - right corner .    from the wrapping principle outlined in the previous section ,",
    "when the top factor has the form of a pyramid , the fixed steps along the join may have been folded .",
    "this then wraps the bottom factor , making it convex in shape , such that it extends further to the right than the top factor .",
    "we finish by expanding the brackets , so that we may evaluate the sums and write the expression in a closed form .",
    "however , the indent may extend further to the left than the bottom factor , as shown in part ( b ) of the figure , and therefore requires an adjustment term . and",
    "so , moving all terms incorporating @xmath5 into the @xmath18 operators and expanding the brackets in the summand , we can then complete the summation .",
    "this then allows us to add the term @xmath113 that enumerates the indent for the required adjustment to give the following expression for the generating function :    @xmath114 } \\nonumber \\\\    - \\frac{4xyv}{\\delta } { e\\bigg[\\frac { } { } { { \\left(\\frac{x^*y}{1-x^*-y}\\right)}^2      { \\left(\\frac{(1-y)^2}{(1-y)^2-x^*}+\\frac{x^*}{1-x^*}\\right ) } \\frac{u^*}{1-u^*-y}}\\bigg ] } \\nonumber \\\\     - \\frac{2xyu^2v}{(1-u)^2\\delta } { e\\bigg[\\frac{x(1-x)y^*}{(1-x)^2-y^ * } {      { \\left(1+\\frac{y^*}{(1-x)^2}\\right ) } \\frac{x}{1-x - v^*}}\\bigg ] } \\nonumber\\\\   + 2 v { \\mbox{\\,$\\mathcal{s}$}}z { \\left ( \\frac{2x{\\mbox{\\,$\\mathcal{s}$}}}{\\delta}\\right)}^2 - 2x{\\mbox{\\,$\\mathcal{s}$}}^3z^3\\left(\\frac{1}{1-x}+uz\\right )    \\left(1+\\frac{v}{1-u}\\right).\\end{aligned}\\ ] ]",
    "we generalise lin s factorisation of 1-convex polygons by extending a factorisation line along the base of _ each _ indent .",
    "this allows each case to be enumerated by joining factors along these lines .",
    "when the indents are in the same direction , there are three main factors plus two indents .",
    "when the indents are in different directions , we divide the lattice into four quadrants .",
    "we say the quadrant in the top - right is the first , and order the remaining quadrants in an anti - clockwise fashion .",
    "to break - up the problem into enumerable parts , similar to lin , we adopt a ` divide and conquer ' approach and classify sub - classes of 2-convex polygons according to the relative direction and position of the indents ( that is , which side they lie on ) .",
    "we obtain the generating functions of symmetric classes by reflection and rotation . without loss of generality",
    "we assume that one indent is vertical and on the top - left side .",
    "this leaves us with one of nine cases : firstly the indent can have depth two , secondly when there are two indents each of depth one , we have to consider eight combinations of the direction and location of the second indent .",
    "however , the two cases where the second indent is in a different direction and on one of the adjacent sides are equivalent after a rotation . we are therefore left with eight distinct cases to evaluate .",
    "there is a possible ambiguity when an indent factor is adjacent to the mbr .",
    "for example , in the case where there is a vertical indent on the base of the polygon as well as on the top - left side , the indent on the base may be considered as on either side of the bottom arc .",
    "we arbitrarily chose that such cases be enumerated by the class whose indented sides are closest together .",
    "this example is therefore enumerated by the case where the indents are on adjacent sides , and not on opposite sides of the polygon .",
    "we now briefly consider these eight cases in turn .",
    "almost - convex polygons with a single indent we refer to as ` bimodal ' due to the two modes ( in the same sense as ` unimodal ' ) adjacent to the indent . in section [ s_1-convex ] we enumerated 1-convex polygons , which are the simplest case of bimodal polygons .",
    "bimodal 2-convex polygons , which have a single 2-deep indent , can be enumerated _",
    "mutatis mutandis_. for the generating function , see section  2 of @xcite .",
    "when the indents are on the same side ( on the top - left ) , we join unimodal top and bottom factors to a staircase factor in the middle .",
    "this implies that the top factor extends furthest to the right .",
    "( see figure  [ fig:2-convex ] . )",
    "this creates three blocks separated by two factorisation lines .",
    "each pair of blocks are joined by matching the top and base edges along the factorisation line dividing them . since there is an indent factor in the top block",
    ", horizontal steps must be added on either side of the indent so their perimeters match . in this way the length of the join , counted by the parameter @xmath79 , is equal to the top perimeter of the middle staircase factor . whenever the join is defined in this way , in order to enumerate the indent , a term @xmath115 is included on one side of the hadamard product in the expression for the generating function .",
    "indeed , this term appears in the majority of expressions involving 2-convex polygons .",
    "fortunately , such joins can be re - expressed in terms of the first three moments of the generating function with the indent omitted .        in order to match lengths correctly along the bottom",
    "join ( defined as the length of the base of the middle staircase factor and enumerated by the parameter @xmath76 ) we append horizontal steps to the bottom factor . in this example ,",
    "the length of both joins are defined as the length of the middle factor along the factorisation lines , as indicated by the shaded regions in figure  [ fig:2-convex ] .",
    "the choice for the definition of the join is determined by the generating functions of the top and bottom factors , which are simple rational expressions in terms of @xmath79 and @xmath76 .",
    "this is generally simpler than trying to adjust the middle factor to match the other factors .    in using standard inclusion - exclusion techniques for enumerating the top and bottom unimodal factors",
    ", wrapping ensures that the cases where the middle or bottom factor extends furthest to the right are included .",
    "this means that the bottom factor may intersect ( forming a unimodal loop ) to the bottom - right .",
    "this is a powerful example of the robustness of the wrapping methodology  we fold the top factor , wrapping not just the middle factor , but the bottom factor as well , such that it can be the one to extend furthest to the right .",
    "we now complete the enumeration to serve as an example for the following cases .",
    "we only give some details here , as there are dozens of very complicated formulae in all , each using the same principles in their derivation .",
    "we outline each of the remaining cases to the minimum extent that would be necessary to reproduce the results .",
    "we break the problem into two parts : when the indents are at the same height and when they are not .",
    "the latter case is enumerated by the following expression , and the former follows _ mutatis mutandis_.",
    "@xmath116 }          - \\frac{2xy}\\delta \\cdot \\frac{sv}{1-s - v } \\right ) } \\frac{s^2}{(1-s)^3 }      \\",
    "\\odot_s\\ \\bar s(s , t)\\ \\nonumber \\\\",
    "\\odot_t\\ \\frac 1{1-t } { e\\bigg[\\frac{ty^2}{1-t - y}{{\\left(\\frac{(1-y)^2}{(1-y)^2-x^*}+\\frac{x^*}{1-x^*}\\right ) } { \\left(\\frac{x^*}{1-x^*-y}\\right)}^2\\,}\\bigg ] }      \\\\",
    "\\nonumber      - \\frac{2xy}\\delta { \\left (          { \\left ( \\frac{y^4}2 { \\frac{\\partial}{\\partial y } } { \\mathcal{i}}^2 { \\frac{\\partial}{\\partial y } } \\frac 1{y^2 } { \\left(xyz - \\frac{xy}{1-x}\\right ) } \\right ) }          + v^2 { \\mbox{\\,$\\mathcal{s}$}}z^2 { \\mathcal{i}}^2 { \\left({\\mbox{\\,$\\mathcal{s}$}}z + \\frac v{1-x}\\right ) }      \\right)},\\end{aligned}\\ ] ]    where @xmath117 is the generating function of staircase polygons by base and top perimeter .",
    "the expression to the left of the join in the first line enumerates the top factor , with the indent enumerated by @xmath115 .",
    "the first term in the @xmath18 operator enumerates the ( possibly intersecting ) unimodal folded walks , with the term @xmath118 counting the fixed steps along the join ( weighted by @xmath119 , but divided by @xmath120 to adjust for the width already enumerated by the middle factor ) .",
    "the term @xmath109 ensures that it is at least of height one .",
    "the inclusion - exclusion principle then lends us to exclude the intersecting case enumerated in the second term .",
    "the second line enumerates the bottom factor , obtained by folding a stack polygon ( a reflection in the horizontal axis ) .",
    "this ensures that the indent is not wrapped .",
    "the first term is the part of the stack polygon under the join .",
    "the last term is the part under the indents .",
    "the second term enumerates the part of the polygon that extends to the left , including the possibility that the bottom factor is a pyramid and that the indent factor extends furthest to the left .",
    "finally , the terms in the last line enumerate the exclusion cases .",
    "the first term counts the polygons that intersect in the bottom - left corner .",
    "the 2-unimodal factor is enumerated by distinguishing the heights where the indents are placed , thus explaining the derivatives .",
    "the center term of the derivative is the generating function for unimodal polygons of at least height two .",
    "the last term counts polygons intersecting in the bottom - right corner .",
    "this term is obtained by summing the generating functions for each possible configuration of the indents , using the known generating function for staircase polygons with fixed steps in the corner .      in this case",
    "the top factor must be a pyramid .",
    "we break the enumeration into two parts depending on whether both indents are at the same height or at different heights . for the latter case , illustrated in figure  [ fig : case3 ] ,",
    "we assume that the top - left indent is higher than the top - right one . the symmetrical case can be obtained by reflection .    in part ( c ) of the figure",
    ", we reproduce the situation from case 2 ( the indents are on the same side ) where the top factor is a pyramid ( such that the middle factor is wrapped ) . reflecting the indented top pyramid factor vertically we recover the form of the polygons shown in part ( a ) . alternatively ,",
    "drawing the factorisation line under the top indent , flipping both the indent and the top factor gives the polygons shown in part ( b ) .",
    "we can therefore use the expression for the generating function for case 2 , with a slight modification to the first term , which becomes @xmath121 } + \\frac{p(s , y)}{1-x},\\ ] ] where @xmath122 is the pyramid generating function .",
    "the pyramid term comes from the possibility that the indent extends furthest to the right .",
    "the last term in the @xmath18 operator excludes those cases from case 2 that were not wrapped and therefore did not have the pyramid top factor now required .",
    "we divide this case into three parts according to whether the top - left indent is above , next to or below the bottom - right indent ( see figure  [ fig : case4 ] . )",
    "when the top indent is above the bottom one , and either the top or bottom factor is of height one , the indents can be considered to be on adjacent sides , and we do not include them in this case .",
    "therefore , all of the above calculations must be done for top and bottom factors of height at least two .    [ cols=\"^,^,^ \" , ]     when the top indent is below the other ( see part ( a ) of the figure ) , the enumeration does not require wrapping and has no complications ; it can be obtained by simply joining the three appropriate factors together .",
    "when the indents are next to one another ( see part ( b ) of the figure ) , the enumeration is even simpler .",
    "however , when the indents are level the top indent may be either to the left _ or the right _ of the bottom - right indent .",
    "the latter case means that the indents interweave ( see part ( c ) of the figure ) .",
    "now consider the situation where the top - left indent is above the other one .",
    "when wrapping , in order to keep the polygon self - avoiding , we usually translate the fixed vertical step from below the join to the fold ( see figure  [ fig : wrapping](b ) ) .",
    "however , when wrapping the bottom factor as well we need to make an adjustment to the length of the bottom join ( see part ( e ) of the figure ) .",
    "moreover , when the middle factor is a pyramid , it is possible that the indent extends furthest to the right ( see part ( f ) of the figure ) .",
    "this case presents a complication not met earlier in our enumeration . proceeding as usual",
    "would involve simultaneously joining an indent and unimodal factor to both the top and bottom of a staircase middle factor .",
    "when the middle factor extends furthest either to the left or right wrapping generates these polygons .",
    "however , this requires wrapping both sides of the middle staircase factor independently , which is not possible as the calculations diverge .",
    "( for further discussion , we refer to section 7.2.1 of @xcite . ) we can therefore only use wrapping on one side , and must break up the calculation of the bottom factor into two parts depending on whether it is unimodal or pyramid .    finally , note that when the middle factor extends furthest to both the left and right , it is convex in form .",
    "this requires the enumeration of convex polygons according to both base and top - most horizontal segment .",
    "this can be achieved by adopting a ` divide and conquer ' approach and joining pyramid factors to unimodal ones , or by solving recurrence relations .",
    "( the generating function by perimeter and area , solved by the aforesaid recurrence relations , already exists in the literature @xcite . )",
    "this case is similar to the previous one , when the bottom factor was a pyramid . reflecting the bottom factor and indent",
    "the correct form is produced as shown in figure  [ fig : case5 ] .",
    "we can proceed by joining a unimodal top factor to a unimodal middle factor , which in turn is joined to a pyramid bottom factor .",
    "wrapping again generates the cases where the bottom factor extends furthest to the right .",
    "the enumeration of the different parts of this case follows the same approach as the previous case , except that the top and bottom factors may be of height one . also , the interwoven case is somewhat different , as the top and bottom factors are joined directly .",
    "in defining these eight cases we have assumed that the top indent is on the top - left side .",
    "when multiplying by two to obtain the generating function for the symmetric case ( where the top indent is on the top - right side ) , we double - count polygons whose top and bottom indents are adjacent to the mbr ( i.e. they form the topmost segment and the base ) .",
    "we must therefore adjust for this case when adding up the generating functions at the end .      when the indents are in different directions and on the same side they form either a locally convex or concave region , depending on their order .",
    "this is shown in figure  [ fig : case6 ] .",
    "first consider the locally concave case . aside from the walk between the two indents ,",
    "the polygon can either enter the first or the third quadrant , but not both .",
    "if the polygon does not enter the third quadrant then it has only three factors : two unimodal ones joined to the staircase factor with the indents .",
    "when it passes through the third quadrant , the indents and the connecting walk of the first quadrant are joined to unimodal factors in the second and fourth quadrants .",
    "these are in turn joined by a directed walk in the third quadrant . making the expressions for the second and fourth quadrants factor into two parts , one independent of the horizontal join , the other independent of the vertical join , allows the calculation of the generating function .",
    "this is a good example of how wrapping works in both directions to generate all the required polygons .",
    "when the indents form a convex region , the polygon does not enter the first quadrant , except in the case where the indents intersect and there are two steps in the first quadrant ( as shown in the second diagram in part ( b ) of the figure ) .",
    "the two cases are evaluated separately , but the second is a simple version of the first .",
    "a unimodal factor and an indent in each of the second and fourth quadrants are joined to a staircase factor in the third quadrant .",
    "the evaluation is straightforward and wrapping gives the remaining polygons .",
    "we enumerate this case by breaking it up into parts classified by the relative height of the indents .",
    "we say that the indents are _ next to _ each other if the _ holes _ formed overlap in height . if the vertical projection of the _ humps _ formed by the indent overlap , we say that they are _ adjacent_. and so , the horizontal indent is either above , next to , adjacent to or below the vertical indent ( see figure  [ fig : case7 ] ) .",
    "the cases where the polygon extends furthest to the left in the third quadrant are all evaluated using the usual inclusion - exclusion and wrapping arguments .",
    "when the horizontal indent is above the vertical one , the polygon may extend furthest to the left in the second quadrant ( as shown in part ( e ) of the figure ) .",
    "we need to enumerate 1-unimodal polygons whose indent is in the corner according to their base .",
    "this can be done by joining an almost - pyramid polygon to a unimodal one .",
    "these are then joined to the bottom factor together with an indent factor , noting that the indent may extend further to the right than the bottom factor .",
    "the final case is enumerated in a similar fashion to the previous case .",
    "the sub - classes defined by the relative heights of the indents are shown in figure  [ fig : case8 ] .",
    "the indents need not lie along the mbr and thus the factors in the same quadrant as an indent must be of height or width at least two",
    ".    there is , however , one special case to consider , depicted in part ( e ) of the figure , namely when the polygon does not enter the third quadrant .",
    "this is an interesting case because the horizontal and vertical joins ( over @xmath79 and @xmath76 respectively ) must be done _",
    "simultaneously_. we can not proceed is the usual way and are forced to re - evaluate our approach and come up with a new way to evaluate such constructions .",
    "we solve this problem by generating the factor in the first quadrant as a staircase factor and wrapping it along the factorisation lines to form a convex factor .",
    "this is achieved by adding double - bonds joined to the staircase factor next to the indent factors , so that it wraps back along the double bonds , forming a convex polygon .",
    "the length of the horizontal ( vertical ) join is counted by @xmath79 ( @xmath76 ) .",
    "each horizontal double - bond has two steps , contributing @xmath123 to the weight of the join , as well as a weight of @xmath124 for the fact that it wraps the staircase back , reducing its width by one .",
    "this means that the expression for the bottom factor in the join includes the term @xmath125 .",
    "other expressions including @xmath123 rather than just @xmath79 have been evaluated preciously by simplifying the other side of the join and re - expressing it in terms of derivatives .",
    "now what is on the other side of the join is the staircase factor , which can not be simplified as it has to be joined to both the bottom and left factors at the same time .",
    "we are therefore forced to simplify the terms including @xmath123 or @xmath126 .",
    "however since @xmath127 $ ] , the expression inside the @xmath18 operator can be changed into a form we can evaluate simply .",
    "the remaining cases are obtained using the above methodology by wrapping a directed walk in the first quadrant .",
    "when the top indent is above the bottom one the unimodal factor in the third quadrant must be of width and height at least two .      in the above derivations",
    ", the direction and position of one of the indents was chosen arbitrarily , such that the direction and position of the other determined which sub - class the polygon belongs to . therefore ,",
    "when the two indents are in different directions , the cardinality of the set of possible combinations of direction and location for the fixed indent is four .",
    "when the indents are in the same direction , both directions are enumerated by the generating functions . if the indents are on the same edge , the cardinality is two .",
    "if they are opposite , it is one .",
    "we therefore obtain the generating function for 2-convex polygons by summing the results , multiplying each term by the cardinality of the class it counts .",
    "this gives the following generating function for 2-convex polygons ( available in a maple / mathematica friendly format at http://www.ms.unimelb.edu.au/~iwan/polygons/series/2-convex-anisotropic.txt ) : @xmath128 @xmath129 + @xmath130",
    "following lin s approach to enumerating 1-convex polygons , one can factorise almost - convex polygons by extending lines along the base of all indents . then , using a ` divide and conquer ' approach , it is possible to then enumerate the various sub - classes .    by looking at the form of the various factors , it is possible to guess what the form of the resulting generating functions will be .",
    "one can then obtain the generating functions by directly enumerating the series to a sufficiently high order and then solving the set of linear equations corresponding to the presumed form .",
    "we presented some techniques that are invaluable in enumerating the factors exactly .",
    "the most important technique is that of ` wrapping ' , which allows the generation of quite complex objects out of simply enumerable components .",
    "it is easily implemented when using an inclusion - exclusion approach to enumerating unimodal factors , which made it essential in enumerating 2-convex polygons .",
    "these techniques have allowed us to reduce the enumeration of 1-convex polygons , as well as many sub - classes of 2-convex polygons , to a single , combinatorially interpretable expression .",
    "going forward , it is not realistic to factorise almost - convex polygons for high concavity indices as we have done here , as there will be an exponential growth in the number of cases to evaluate",
    ". it would be more sensible to restrict the size of each indentation first , and then generalise these cases . eventually , defining operators that can add more and more complex indentations in the side of convex polygons and looking at the effect on the asymptotic growth of their number seems to be the most appropriate path to understand how convex polygons become general saps .",
    "we gratefully acknowledge financial support from the australian research council ."
  ],
  "abstract_text": [
    "<S> polygons are described as almost - convex if their perimeter differs from the perimeter of their minimum bounding rectangle by twice their ` concavity index ' , @xmath0 . </S>",
    "<S> such polygons are called _ </S>",
    "<S> @xmath0-convex _ polygons and are characterised by having up to @xmath0 indentations in their perimeter . </S>",
    "<S> we first describe how we conjectured the ( isotropic ) generating function for the case @xmath1 using a numerical procedure based on series expansions . </S>",
    "<S> we then proceed to prove this result for the more general case of the full anisotropic generating function , in which steps in the @xmath2 and @xmath3 direction are distinguished . in so doing , we develop tools that would allow for the case @xmath4 to be studied . </S>"
  ]
}