{
  "article_text": [
    "in most modern production industries and service systems , various kinds of disruptions will occur , such as order cancellations , new order arrivals , machine breakdown , and labor or material shortages .",
    "an ideal scheduling system is expected to effectively adjust an originally planned schedule to account for such disruptions , in order to minimize the effects of the disruption on overall performance .",
    "the extent of an alteration to the originally planned schedule , to be minimized , becomes either a second objective function ( e.g. , to model measurable costs ) , or is formulated as a constraint to model hard - to - estimate costs , which may be incorporated into to the original objective function .    in this paper , we investigate the single machine scheduling problem with the objective to minimize the total weighted completion time .",
    "rescheduling arises because of unexpected machine unavailability , which we represent as an unavailable time interval .",
    "this unavailability is revealed to the production planner after the given set of jobs has already been scheduled but processing has not begun .",
    "the production planner wishes to reschedule the jobs to minimize the alteration to the originally planned schedule , measured as the maximum time deviation between the original and the new schedules for all jobs .",
    "the maximum time deviation is taken both as a constraint and as part of the objective function ; that is , the maximum time deviation is bounded above by a given value , and the new objective function is to minimize the sum of the total weighted completion time and the weighted maximum time deviation .",
    "we formally present our rescheduling problem in what follows , including definitions and notation to be used throughout the paper .",
    "we are given a set of jobs @xmath0 , where the job @xmath1 has an integer weight @xmath2 and requires an integer _ non - preemptive _ processing time @xmath3 on a single machine , with the original objective to minimize the _",
    "total weighted completion time_. this problem is denoted as @xmath4 under the three - field classification scheme  @xcite , where @xmath5 denotes the completion time of the job @xmath1 .",
    "it is known that the _ weighted shortest processing time _",
    "( wspt ) rule gives an optimal schedule for the problem @xmath4 .",
    "we thus assume that the jobs are already sorted in the wspt order , that is , @xmath6 , and we denote this order / schedule as @xmath7 , referred to as the _ original _ schedule ( also called the _ pre - planned _ schedule , or _ pre - schedule _ , in the literature ) .",
    "the rescheduling arises due to a machine disruption : the machine becomes unavailable in the time interval @xmath8 $ ] , where @xmath9 .",
    "we assume , without loss of generality , that this information is known to us at time zero , so no job is yet processed .",
    "( otherwise , one may remove those processed jobs from consideration , and for the partially processed job , either run it to completion and remove it , or stop processing it immediately . )",
    "let @xmath10 be a schedule after resolving the machine disruption .",
    "that is , no job of @xmath11 is processed in the time interval @xmath8 $ ] in @xmath10 . as in the existing literature , we use the following notation : for each job @xmath1 ,    @xmath12 : the starting time of the job @xmath1 in the schedule @xmath10 ;    @xmath13 : the completion time of the job @xmath1 in the schedule @xmath10 , and thus @xmath14 ;    @xmath15 : the completion time of the job @xmath1 in the original schedule @xmath7 ;    @xmath16 : the _ time deviation _ of the job @xmath1 in the two schedules .",
    "let @xmath17 denote the _ maximum time deviation _ for all jobs .",
    "when it is clear from the context , we simplify the terms @xmath12 , @xmath13 , @xmath18 and @xmath19 to @xmath20 , @xmath5 , @xmath21 and @xmath22 , respectively .",
    "the time deviation of a job measures how much its actual completion time is off the originally planned , and thus it can model the penalties resulted from the delivery time change to the satisfaction of the customers , as well as the cost associated with the rescheduling of resources that are needed before delivery . in our problem , the time deviation is both taken as a constraint , that is @xmath23 for a given upper bound @xmath24 , and added to the objective function to minimize @xmath25 , for a given balancing factor @xmath26 .",
    "that is , the goal of rescheduling is to minimize the sum of the weighted maximum time deviation and the total weighted completion time .",
    "thus , our problem is denoted as @xmath27 under the three - field classification scheme  @xcite , where the first field `` @xmath28 '' denotes a single machine with a single unavailable time period , the second field `` @xmath23 '' indicates the constraint on the maximum time deviation , and the last field is the objective function .",
    "we next review major research on the variants of the rescheduling problem , inspired by many practical applications . to name a few such applications , bean _ et al . _",
    "@xcite investigated an automobile industry application , and proposed a heuristic _ match - up _ scheduling approach to accommodate disruptions from multiple sources .",
    "et al . _",
    "@xcite studied the gerry scheduling and rescheduling system that supports space shuttle ground processing , using a heuristic constraint - based iterative repair method .",
    "et al . _",
    "@xcite considered a shipyard application , where the goal for rescheduling is to store large steel plates for efficient access by two non - crossing portal cranes that move the plates to appropriate places .",
    "et al . _",
    "@xcite , aytug _ et al . _",
    "@xcite , herroelen and leus  @xcite and yang _",
    "et al . _",
    "@xcite provided extensive reviews of the rescheduling literature , including taxonomies , strategies and algorithms , for both deterministic and stochastic environments .    in a seminal paper on rescheduling theory for a single machine , hall and potts",
    "@xcite considered the rescheduling problem required to deal with the arrival of a new set of jobs , which disrupts the pre - planned schedule of the original jobs .",
    "such a problem is motivated by the unexpected arrival of new orders in practical manufacturing systems .",
    "first , the set of original jobs has been optimally scheduled to minimize a cost function , typically the maximum lateness or the total completion time ; but no job has yet been executed . in this case",
    ", promises have been made to the customers based on the schedule .",
    "then an unexpected new set of jobs arrives before the processing starts ; the production planner needs to insert the new jobs into the existing schedule seeking to minimize change to the original plan .",
    "the measure of change to the original schedule is the maximum or total sequence deviation , or the maximum or total time deviation . for both cases",
    " where the measure of change is modeled only as a constraint , or where the measure of change is modeled both as a constraint and is added to the original cost objective  the authors provide either an efficient algorithm or an intractability proof for several problem variants .",
    "yuan and mu  @xcite studied a rescheduling problem similar to the one in @xcite , but with the objective to minimize the makespan subject to a limit on the maximum sequence deviation of the original jobs ; they show that such a solution is polynomial time solvable .",
    "et al . _",
    "@xcite considered an extension of the rescheduling problem in @xcite , where the arrivals of multiple new sets of jobs create repeated disruptions to minimize the maximum lateness of the jobs , subject to a limit on the maximum time deviation of the original jobs ; they proved the np - hardness and presented several approximation algorithms with their worst - case performance analysis .",
    "hall and potts  @xcite also studied the case where the disruption is a delayed subset of jobs ( or called _ job unavailability _ ) , with the objective to minimize the total weighted completion time , under a limit on the maximum time deviation ; they presented an exact algorithm , an intractability proof , a constant - ratio approximation algorithm , and a fully polynomial - time approximation scheme ( fptas ) .",
    "et al . _",
    "@xcite studied the case where the disruption is the arrival of new jobs and the machine needs a setup time to switch between processing an original job and processing a new job ; their bi - criterion objective is to minimize the makespan and to minimize the maximum ( or total ) positional deviation or the maximum ( or total ) time deviation , with certain assumptions on the setup times .",
    "they presented a number of polynomial time exact algorithms and intractability proofs for several problem variants .",
    "zhao and yuan  @xcite examined the case where the disruption is the arrival of new jobs which are associated with release dates , formulated a bi - objective function to minimize the makespan and to minimize the total sequence deviation , under a limit on the total sequence deviation ; they presented a strongly polynomial - time algorithm for finding all pareto optimal points of the problem .",
    "liu and ro  @xcite considered the same machine disruption as ours  the machine is unavailable for a period of time  but with the objective to minimize the makespan ( or the maximum job lateness ) and the weighted maximum time deviation , under a limit on the maximum time deviation ; they presented a pseudo - polynomial time exact algorithm , a @xmath29-approximation algorithm , and an fptas .",
    "et al . _",
    "@xcite studies the rescheduling problem on multiple identical parallel machines with multiple machine disruptions , and the bi - criterion objective is to minimize the total completion time and to minimize the total virtual tardiness ( or the maximum time deviation ) ; in addition to hardness results , they presented a two - dimensional fptas when there is exactly one machine disruption .    among all related research in the above",
    ", the work of liu and ro  @xcite is the most relevant to our work in terms of the scheduling environment , and the work of hall and potts  @xcite is the most relevant in terms of the original objective function .",
    "our problem @xmath27 includes three interesting special cases , some of which have received attention in the literature : when the given bound @xmath24 is sufficiently large , the time deviation constraint becomes void and our problem reduces to the total cost problem @xmath30 ; when the time deviation factor @xmath31 , our problem reduces to the constrained rescheduling problem , without the need to minimize the time deviation ; and finally , when the given bound @xmath24 is sufficiently large and the time deviation factor @xmath31 , our problem reduces to the classic scheduling problem with a machine unavailability period @xmath32  @xcite , which is np - hard .",
    "the rest of the paper is organized as follows : in section  2 , we derive structural properties that are associated with the optimal solutions to our rescheduling problem @xmath27 . in section  3 ,",
    "we present a pseudo - polynomial time exact algorithm . in section  4 , we first develop another slower pseudo - polynomial time exact algorithm solving the special case where @xmath31 , this is , the problem @xmath33 . based on this slower exact algorithm , we present an fptas for our general rescheduling problem . the fptas is an integration of a linear number of fptases .",
    "we conclude our paper in the last section , with some final remarks .",
    "firstly , from the np - hardness of the classic scheduling problem with a machine unavailability period @xmath32  @xcite , we conclude that our rescheduling problem @xmath27 is also np - hard .",
    "recall that we are given a set of jobs @xmath0 , where each job @xmath1 has a positive weight @xmath2 and a positive processing time @xmath3 , in the wspt order , a machine unavailability period @xmath8 $ ] with @xmath9 , an upper bound @xmath24 on the maximum time deviation , and a balancing factor @xmath26 .",
    "all these @xmath2 s , @xmath3 s , @xmath34 , @xmath35 , @xmath24 are integers , and @xmath36 is a rational number . for any feasible schedule @xmath10 to the rescheduling problem , from @xmath23",
    "we conclude that for every job @xmath1 , @xmath37 . for ease of presentation , we partition @xmath10 into two halves , similar to the existing literature : the prefix of the schedule @xmath10 with the jobs completed before or at time @xmath34 is referred to as the _ earlier schedule _ of @xmath10 , and the suffix of the schedule @xmath10 with the jobs completed after time @xmath35",
    "is referred to as the _ later schedule _ of @xmath10 .",
    "we assume , without loss of generality , that with the same @xmath22 , all the jobs are processed as early as possible in @xmath10 ( to achieve the minimum possible total weighted completion time ) .",
    "let @xmath38 denote an optimal schedule to the rescheduling problem .",
    "let @xmath39    using the original schedule @xmath40 , we compute @xmath41 i.e. , @xmath42 is the first job in @xmath7 completed strictly after time @xmath34 and @xmath43 is the first job in @xmath7 starting processing at or after time @xmath35 .",
    "one clearly sees that if @xmath44 is void , then no rescheduling is necessary ; in the sequel , we always assume that the job @xmath42 exists .",
    "nevertheless we note that @xmath45 could be void , which means that all the jobs start processing strictly before time @xmath35 in @xmath7",
    ".    we may furthermore assume the following relations hold among @xmath46 and @xmath24 , to ensure that the rescheduling problem is non - trivial : @xmath47 for a quick proof , firstly , if @xmath48 , then no job can be processed before the machine unavailability period and thus the schedule @xmath7 remains optimal except that the job processing starts at time @xmath35 instead of time @xmath49 ; secondly , if @xmath50 , then no rescheduling is necessary .",
    "lastly , from the definition of the job @xmath42 in eq .",
    "( [ eq2 ] ) , we conclude that at least one job among @xmath51 must be completed after time @xmath35 in any feasible rescheduling solution , with its time deviation at least @xmath52",
    ". therefore , @xmath53 , as otherwise no feasible solution exists .",
    "there is a very regular property of our target optimal schedules to the rescheduling problem , stated in the following lemma .",
    "[ lemma01 ] there exists an optimal schedule @xmath38 for the rescheduling problem @xmath27 , in which    ( a ) : :    the jobs in the earlier schedule are in the same order as they appear    in @xmath7 ; ( b ) : :    the jobs in the later schedule are also in the same order as they    appear in @xmath7 .    by contradiction ,",
    "assume @xmath54 is the first pair of jobs for which @xmath55 precedes @xmath1 in @xmath7 , i.e. @xmath56 , but @xmath1 immediately precedes @xmath55 in the earlier schedule of @xmath38 .",
    "let @xmath57 denote the new schedule obtained from @xmath38 by swapping @xmath1 and @xmath55 .",
    "if @xmath58 , then @xmath59 too , and thus @xmath60 due to @xmath61 ; if @xmath62 and @xmath63 , then @xmath64 due to @xmath65 ; lastly if @xmath62 and @xmath66 , then @xmath67 and @xmath68 .",
    "that is , @xmath57 is also a feasible reschedule",
    ".    furthermore , the weighted completion times contributed by @xmath55 and @xmath1 in @xmath57 is no more than those in @xmath38 , implying the optimality of @xmath57 .",
    "it follows that , if necessary , after a sequence of job swappings , we will obtain an optimal reschedule in which the jobs in the earlier schedule are in the same order as they appear in @xmath7 .",
    "the second part of the lemma can be similarly proved ( see the appendix a ) .",
    "there are several more properties in the following lemma  [ lemma02 ] , which are important to the design and analysis of the algorithms to be presented .",
    "most of these properties also hold for the optimal schedules to a similar makespan rescheduling problem @xmath69  @xcite .",
    "we remark that the makespan is only a part of our objective , and the original schedule for the makespan scheduling problem @xmath69 can be arbitrary .",
    "however , for our problem , the jobs in @xmath7 are in the special wspt order .",
    "our goal is to compute an optimal schedule satisfying ( the properties stated in ) lemmas  [ lemma01 ] and [ lemma02 ] , and thus we examine only those feasible schedules @xmath10 satisfying lemmas  [ lemma01 ] and [ lemma02 ] .",
    "recall that we assume , for every feasible schedule @xmath10 to the rescheduling problem with the same @xmath22 , all the jobs are processed as early as possible in @xmath10 ( to achieve the minimum possible total weighted completion time ) .",
    "however this does not rule out the possibility that the machine would idle .",
    "in fact , the machine has to idle for a period of time right before time @xmath34 , if no job can be fitted into this period for processing ; also , the machine might choose to idle for a period of time and then proceeds to process a job , in order to obtain a smaller @xmath22 .",
    "in the sequel , our discussion is about the latter kind of machine idling .",
    "the good news is that there are optimal schedules in which the machine has at most one such idle time period , as shown in the following lemma  [ lemma02 ] .",
    "this makes our search for optimal schedules much easier .",
    "[ lemma02 ] there exists an optimal schedule @xmath38 for the rescheduling problem @xmath27 , in which    ( a ) : :    @xmath70 for each job    @xmath1 in the earlier schedule ; ( b ) : :    the machine idles for at most one period of time in the earlier    schedule ; ( c ) : :    each job in the earlier schedule after the idle time period is    processed exactly @xmath22 time units earlier than    in @xmath7 ; ( d ) : :    the jobs in the earlier schedule after the idle time period are    consecutive in @xmath7 ; ( e ) : :    the job in the earlier schedule right after the idle time period has a    starting time at or after time @xmath35 in    @xmath7 ; ( f ) : :    the machine does not idle in the later schedule ; ( g ) : :    the first job in the later schedule reaches the maximum time deviation    among all the jobs in the later schedule",
    ".    item ( a ) is a direct consequence of lemma  [ lemma01 ] , since the jobs in the earlier schedule are in the same order as they appear in @xmath7 , which is the wspt order .",
    "proofs of ( b)(g ) are similar to those in @xcite , where they are proven for an arbitrary original schedule , while the wspt order is only a special order . for completeness ,",
    "the proofs are included in the appendix b.    among the jobs @xmath51 , we know that some of them will be processed in the later schedule of the optimal schedule @xmath38 . by lemma  [ lemma01 ] , we conclude that the first job in the later schedule is from @xmath51 .",
    "we use @xmath71 to denote this job , and consequently @xmath72 remains as the prefix of the earlier schedule .",
    "the time deviation of @xmath71 is @xmath73 ( which could be used to further narrow down the candidates for @xmath71 ) .",
    "[ coro03 ] in an optimal schedule @xmath38 satisfying lemmas  [ lemma01 ] and [ lemma02 ] , suppose the job @xmath71 is the first job in the later schedule .",
    "for each @xmath74 , if the job @xmath1 is in the earlier schedule , then its time deviation @xmath21 is less than @xmath75 .    from the definition of @xmath45 in eq .",
    "( [ eq2 ] ) , we know that @xmath76 , and therefore its time deviation is @xmath77 .",
    "in this section , we develop an exact algorithm dp-1 for the rescheduling problem @xmath27 , to compute an optimal schedule @xmath38 satisfying lemmas  [ lemma01 ] and [ lemma02 ] . the key idea is as follows : by lemma  [ lemma02](g ) , we first guess the job @xmath71 that starts processing at time @xmath35 in @xmath38 , with its time deviation @xmath73 . from this initial partial schedule",
    ", our algorithm constructs some feasible full schedules satisfying lemmas  [ lemma01 ] and [ lemma02 ] . to guarantee that our algorithm constructs an optimal full schedule in pseudo - polynomial time",
    ", we use a `` hash '' function to map a partial schedule into a quadruple , such that only one partial schedule per quadruple is used in the computation , to be described in detail in the following . at the end",
    ", the full schedule with the minimum objective function value is returned as the solution @xmath38 .",
    "we notice from lemmas  [ lemma01 ] and [ lemma02](a ) that the time deviations of the jobs in the earlier schedule of @xmath38 are non - decreasing , with the first @xmath78 ones being @xmath49 s . from the constraint @xmath23 ,",
    "the last job in the schedule @xmath7 that can possibly be in the earlier schedule of @xmath38 is @xmath79 with @xmath80    we use @xmath81 to denote the total processing time of the first @xmath82 jobs in @xmath7 : @xmath83    the exact algorithm dp-1 is a dynamic programming , that sequentially assigns the job @xmath84 to the partial schedules on the first @xmath85 jobs @xmath86 ; each such partial schedule is described ( hashed ) as a quadruple @xmath87 , where @xmath88 , no machine idling period in the earlier schedule , @xmath89 is the total processing time of the jobs in the earlier schedule , @xmath90 is the index of the last job in the earlier schedule , and @xmath91 is the total weighted completion time of the jobs in the partial schedule .",
    "note that only one , though arbitrary , partial schedule is saved by dp-1 for each quadruple .",
    "for ease of presentation , we partition the jobs into four subsequences : @xmath92 from lemma  [ lemma01 ] and eq .",
    "( [ eq4 ] ) , we know that @xmath93 is a prefix of the earlier schedule and @xmath94 is a suffix of the later schedule , and thus dp-1 takes care of only the jobs of @xmath95 .",
    "let @xmath96 denote the total weighted completion time of the jobs in @xmath93 , and @xmath97 denote the total weighted completion time of the jobs in @xmath94 by starting the job processing at time @xmath49 .",
    "the ( only ) starting partial schedule for dp-1 is described as @xmath98 in which the job @xmath71 starts processing at time @xmath35 . in general , given a quadruple @xmath87 with @xmath99 , that represents a partial schedule on the first @xmath85 jobs , dp-1 assigns the next job @xmath84 of @xmath95 as follows to generate at most three new partial schedules each described as a quadruple @xmath100 . furthermore ,",
    "if a non - empty machine idling period is inserted in the earlier schedule of a new partial schedule , then the partial schedule is directly completed optimally to a full schedule using lemma  [ lemma02](d ) .",
    "* @xmath84 is added in the later schedule to obtain a partial schedule described as : @xmath101 in which @xmath102 .",
    "the feasibility holds since @xmath103 by lemma  [ lemma02](g ) .",
    "* case 2 . *",
    "if @xmath84 can fit in the earlier schedule , that is @xmath104 and @xmath105 , then we add @xmath84 in the earlier schedule without inserting a machine idling period to obtain a feasible partial schedule described as : @xmath106 in which @xmath107 and @xmath108 . from corollary",
    "[ coro03 ] , for @xmath109 we have @xmath110 and thus no need for checking the second inequality .",
    "* case 3 . *",
    "if @xmath111 and @xmath112 , then we add @xmath84 in the earlier schedule and insert a non - empty machine idling period right before it .",
    "the following lemma  [ lemma04 ] states that the exact length of the machine idling period can be determined in @xmath113-time , and during the same time , the partial schedule is directly optimally completed into a full schedule using lemma  [ lemma02](d ) .",
    "lastly , for every quadruple @xmath87 with @xmath114 representing a partial schedule on the first @xmath115 jobs , the algorithm dp-1 completes it by assigning all the jobs of @xmath94 in the later schedule , starting at time @xmath116 , to obtain a full schedule described as the quadruple @xmath117 for which the maximum time deviation is @xmath118 and the objective function value is @xmath119    [ lemma04 ] when the job @xmath84 is added in the earlier schedule of a partial schedule described as @xmath87 and a non - empty machine idling period is inserted before it , then    ( a ) : :    the minimum possible length of this period is    @xmath120 ; ( b ) : :    the maximum possible length of this period is    @xmath121 ,    @xmath122 ; ( c ) : :    the exact length can be determined in @xmath113-time ; ( d ) : :    during the same time an optimal constrained full schedule is achieved    directly .",
    "@xmath123 is a trivial lower bound given that all job processing times are positive integers .",
    "next , if @xmath124 , then we can not process @xmath84 immediately at time @xmath89 as this would result in a time deviation greater than the given upper bound @xmath24 ; and the earliest possible starting time is @xmath125 , leaving a machine idling period of length @xmath126 .",
    "this proves item ( a ) .",
    "the maximum possible length for the period is no more than @xmath127 , for otherwise @xmath128 would be less than @xmath129 .",
    "however , @xmath130 contradicts lemma  [ lemma01 ] and lemma  [ lemma02](a ) that suggest the jobs in the earlier schedule should have non - decreasing time deviations ; @xmath110 contradicts lemma  [ lemma02](c ) that @xmath131 .",
    "also , since @xmath84 is added to the earlier schedule , the length of the idling period has to be at most @xmath132 .",
    "this proves item ( b ) .",
    "let @xmath133 and @xmath134 .",
    "for each value @xmath135 $ ] , we 1 ) start processing @xmath84 at time @xmath136 , 2 ) then continuously process succeeding jobs in the earlier schedule until the one wo nt fit in , and 3 ) lastly process all the remaining jobs in the later schedule .",
    "this gives a full schedule , denoted as @xmath137 , with the total weighted completion time denoted @xmath138 , and the maximum time deviation @xmath139 .",
    "its objective function value is @xmath140 .",
    "it follows that the interval @xmath141 $ ] can be partitioned into @xmath113 sub - intervals , such that for all values in a sub - interval say @xmath142 $ ] , the jobs assigned to the earlier schedule are identical ; and consequently the objective function value @xmath143 is a linear function in @xmath82 , where @xmath144 .",
    "it follows that among all these full schedules , the minimum objective function value must be achieved at one of @xmath145 and @xmath146 .",
    "that is , we in fact do not need to compute the full schedules @xmath137 s with those @xmath82 s such that @xmath147 , and consequently there are only @xmath113 full schedules to be computed .",
    "these sub - intervals can be determined as follows : when @xmath148 , let the jobs fit into the earlier schedule after the machine idling period be @xmath149 , then the first sub - interval is @xmath150 $ ] , where @xmath151 is the completion time of @xmath152 in the full schedule @xmath137 ; the second sub - interval is @xmath153 $ ] ; the third sub - interval is @xmath154 $ ] ; and so on , until the last interval hits the upper bound @xmath155 .",
    "the optimal length of the machine idling period is the one @xmath156 that minimizes @xmath143 , among the @xmath113 computed full schedules , and we obtain a corresponding constrained optimal full schedule directly from the partial schedule described as the quadruple @xmath87 .",
    "[ thm05 ] the algorithm dp-1 solves the rescheduling problem @xmath27 , with its running time in @xmath157 , where @xmath158 is the number of jobs , @xmath8 $ ] is the machine unavailable time interval , @xmath159 is the total job processing time , and @xmath160 is the maximum weight of the jobs .    in the above",
    ", we presented the dynamic programming algorithm dp-1 to compute a full schedule for each quadruple @xmath161 satisfying lemmas  [ lemma01 ] and [ lemma02 ] , under the constraint that the job @xmath71 starts processing at time @xmath35 .",
    "the final output schedule is the one with the minimum @xmath162 , among all the choices of @xmath71 such that @xmath163 .",
    "its optimality lies in the quadruple representation for the partial schedules and the recurrences we developed in eqs .",
    "( [ eq7][eq10 ] ) .",
    "there are @xmath164 choices for @xmath71 , and for each @xmath71 we compute a partial schedule for each quadruple @xmath87 , where @xmath88 or @xmath165 , @xmath166 , @xmath167 , and @xmath168 .",
    "since one partial schedule leads to at most three other partial schedules , and each takes an @xmath169-time to compute , the overall running time is @xmath157 .",
    "the route to the fptas for the rescheduling problem @xmath27 is as follows : we first consider the special case where @xmath31 , that is @xmath33 , where the maximum time deviation is only upper bounded by @xmath24 but not taken as part of the objective function , and design another exact algorithm , denoted as dp-2 , using a different dynamic programming recurrence ; then we develop from the algorithm dp-2 an fptas for the special case ; lastly , we use the fptas for the special case multiple times to design an fptas for the general case .      in this special case",
    ", we have stronger conclusions on the target optimal schedule @xmath38 than those stated in lemma [ lemma02 ] , one of which is that if there is a machine idling period in the earlier schedule of @xmath38 , then @xmath170 .",
    "this follows from the fact that we may start processing the jobs after the idling period one time unit earlier , if @xmath171 , to decrease the total weighted completion time .",
    "we conclude this in the following lemma .",
    "[ lemma06 ] there exists an optimal schedule @xmath38 for the rescheduling problem @xmath33 , in which if the machine idles in the earlier schedule then @xmath170 .",
    "the new exact algorithm dp-2 heavily relies on this conclusion ( and thus it does not work for the general case ) .",
    "dp-2 has a running time complexity worse than dp-1 , but it can be readily developed into an fptas .",
    "the framework of the new algorithm dp-2 is the same , and we continue to use the notations defined in eqs .",
    "( [ eq4][eq6 ] ) .",
    "but now we use a new quadruple @xmath172 to describe a partial schedule on the first @xmath85 jobs , where @xmath88 , no machine idling period in the earlier schedule , @xmath173 is the maximum job completion time in the earlier schedule , @xmath174 is the maximum job completion time in the later schedule , and @xmath91 is the total weighted completion time of the jobs in the partial schedule .    starting with guessing @xmath71 ( from the pool @xmath51 ) to be",
    "the job started processing at time @xmath35 , such that @xmath73 , the ( only ) corresponding partial schedule is described as the quadruple @xmath175 in general , given a quadruple @xmath172 with @xmath99 representing a partial schedule on the first @xmath85 jobs , the algorithm dp-2 assigns the next job @xmath84 of @xmath95 as follows to generate at most three new partial schedules each described as a quadruple @xmath176 . furthermore ,",
    "if a non - empty machine idling period is inserted in the earlier schedule of a new partial schedule , then it is directly completed optimally into a full schedule using lemma  [ lemma02](d ) .",
    "* @xmath84 is added in the later schedule to obtain a partial schedule described as : @xmath177 in which @xmath178 .",
    "the feasibility holds since @xmath103 by lemma  [ lemma02](g ) .",
    "* case 2 . *",
    "if @xmath84 can fit in the earlier schedule , that is @xmath179 and @xmath180 , then we add @xmath84 in the earlier schedule without inserting a machine idling period to obtain a feasible partial schedule described as : @xmath181 in which @xmath182 and @xmath183 . from corollary",
    "[ coro03 ] , for @xmath109 we have @xmath110 and thus no need for checking the second inequality .",
    "* case 3 . *",
    "if @xmath184 , then we add @xmath84 in the earlier schedule and insert a non - empty machine idling period of length @xmath185 right before it .",
    "( that is , start processing @xmath84 at time @xmath125 . ) then continuously process succeeding jobs up to @xmath79 in the earlier schedule , and lastly process all the remaining jobs in the later schedule .",
    "this gives a full schedule with the maximum time deviation @xmath170 , described as the quadruple @xmath186 , where @xmath187 @xmath188 where @xmath189 denotes the total weighted completion time of the jobs in @xmath190 , @xmath191 by starting the job processing at time @xmath49 .",
    "lastly , for every quadruple @xmath172 with @xmath114 representing a partial schedule on the first @xmath115 jobs , the algorithm dp-2 completes it by assigning all the jobs of @xmath94 in the later schedule , starting at time @xmath174 , to obtain a full schedule described as the quadruple @xmath192 for which the maximum time deviation is guaranteed to be no more than @xmath24 .",
    "[ thm07 ] the algorithm dp-2 solves the rescheduling problem @xmath33 in @xmath193-time , where @xmath158 is the number of jobs , @xmath8 $ ] is the machine unavailable time interval , @xmath159 is the total job processing time , and @xmath160 is the maximum weight of the jobs .    in the above , we see that the dynamic programming algorithm dp-2 computes a full schedule for each quadruple @xmath186 satisfying lemmas  [ lemma01 ] and [ lemma02 ] and an extra property that if there is a machine idling period in the earlier schedule then @xmath170 , under the constraint that the job @xmath71 starts processing at time @xmath35 .",
    "the final output schedule is the one with the minimum @xmath194 , among all the choices of @xmath71 such that @xmath163 .",
    "similarly to the proof of theorem  [ thm05 ] , the optimality lies in the quadruple representation for the partial schedules and the recurrences we developed in eqs .",
    "( [ eq12][eq15 ] ) .",
    "there are @xmath164 choices for @xmath71 , and for each @xmath71 we compute all partial schedules described as @xmath172 , where @xmath195 , @xmath196 , @xmath197 , and @xmath168 .",
    "since one partial schedule leads to at most three other partial schedules , and each takes an @xmath169-time to compute , the overall running time is @xmath193 .",
    "we remark that if the purpose is to compute an optimal schedule only , the algorithm dp-2 can be an order faster than the exact algorithm dp-1 in theorem  [ thm05 ] , by dropping the third entry @xmath174 to run in @xmath198-time .      in this subsection",
    ", we convert the exact algorithm dp-2 in the last subsection into an fptas by the sparsing technique .",
    "we assume the job @xmath71 is scheduled to start processing at time @xmath35 , and we have a positive real value @xmath199 .",
    "the algorithm is denoted as approx@xmath200 , which guarantees to return a feasible schedule such that its total weighted completion time is within @xmath201 of the constrained optimum , under the constraint that the job @xmath71 is scheduled to start processing at time @xmath35 .       * step 1 .",
    "*   set @xmath202 note that a partial schedule is described as the quadruple @xmath172 , where @xmath195 , @xmath203 or @xmath204 , @xmath197 , and @xmath205 , where @xmath206 is the total weight .",
    "let @xmath207 ( @xmath208 ; @xmath209 , respectively ) denote the above lower and upper bounds on @xmath173 ( @xmath174 ; @xmath91 , respectively ) ; let @xmath210 and split the interval @xmath211 $ ] into subintervals @xmath212 , \\",
    "i_2^i = ( l^i \\delta , l^i \\delta^2 ] , \\",
    "\\ldots , \\ i_{r_i}^i = ( l^i \\delta^{r_i } , u^i ] , \\mbox { for } i = 1 , 2 , 3.\\ ] ]",
    "we define a three - dimensional box @xmath213 ) \\times [ r_2 ] \\times [ r_3],\\ ] ] where @xmath214 $ ] and @xmath215 \\triangleq \\{1 , 2 , \\ldots , r\\}$ ] for any positive integer @xmath216 .",
    "each @xmath85 such that @xmath88 or @xmath165 is associated with a box @xmath217 , denoted as @xmath85-@xmath217 for simplicity , where @xmath218 ) \\times [ r_2 ] \\times [ r_3]$ ] ; all these boxes are initialized empty .",
    "* step 2 . *",
    "the starting partial schedule is described as @xmath219 in eq .",
    "( [ eq12 ] ) , which is then saved in the box @xmath220-@xmath217 where @xmath221 , @xmath222 , and @xmath223 .    in general , for each non - empty box @xmath85-@xmath217 with @xmath99 , denote the saved quadruple as @xmath172 , which describes a partial schedule on the first @xmath85 jobs such that there is no machine idling period in the earlier schedule , @xmath173 is the maximum job completion time in the earlier schedule , @xmath174 is the maximum job completion time in the later schedule , and @xmath91 is the total weighted completion time of the jobs in the partial schedule .",
    "the algorithm approx@xmath200 performs the same as the exact algorithm dp-2 to assign the next job @xmath84 of @xmath95 to generate at most three new partial schedules each described as a quadruple @xmath176 .",
    "furthermore , if a non - empty machine idling period is inserted in the earlier schedule of a new partial schedule , then it is directly completed optimally into a full schedule @xmath186 using lemma  [ lemma02](d ) . for each resultant @xmath176 ( the same for @xmath186 ) the algorithm checks whether or",
    "not the box @xmath224-@xmath217 , where @xmath225 , @xmath226 , and @xmath227 , is empty or not ; if it is empty , then the quadruple is saved in the box , otherwise the box is updated to save the one having a smaller @xmath228 between the old and the new quadruples .       * step 3 . *   for each box @xmath158-@xmath217 , where @xmath218 ) \\times [ r_2 ] \\times [ r_3]$ ] , if there is a saved quadruple @xmath186 , then there is a constrained full schedule with the total weighted completion time @xmath194 . here",
    "the constraint is that the job @xmath71 starts processing at time @xmath35 .",
    "the algorithm approx@xmath200 scans through all the boxes associated with @xmath158 , and returns the quadruple having the smallest total weighted completion time , denoted as @xmath229 .",
    "the corresponding constrained full schedule can be backtracked .",
    "[ thm08 ] algorithm approx@xmath200 is a @xmath201-approximation for the rescheduling problem @xmath33 under the constraint that the @xmath71 starts processing at time @xmath35 ; its time complexity is @xmath230 .",
    "the proof of the performance ratio is done by induction .",
    "assume that @xmath231 is the path of quadruples computed by the exact algorithm in theorem  [ thm07 ] that leads to the constrained optimal solution for the problem @xmath33 .",
    "the induction statement is for each @xmath85 , @xmath88 or @xmath165 , there is a quadruple @xmath172 saved by the algorithm approx@xmath200 , such that @xmath232 , @xmath233 , @xmath234 .",
    "the base case is @xmath235 , and the statement holds since there is only one partial schedule on the first @xmath220 jobs , described as @xmath236 in eq .",
    "( [ eq12 ] ) .",
    "we assume the induction statement holds for @xmath85 , where @xmath88 , that is , there is a quadruple @xmath172 saved by the algorithm approx@xmath200 , such that @xmath237    when @xmath238 , from this particular quadruple @xmath172 , we continue to assign the job @xmath239 as in the exact algorithm in subsection 4.1 . in case 1 where @xmath84 is added in the later schedule to obtain a partial schedule described as in eq .",
    "( [ eq13 ] ) , we have @xmath240 assume this quadruple falls in the box @xmath85-@xmath217 , then the quadruple @xmath241 saved in this box by the algorithm approx@xmath200 must have @xmath242 if @xmath243 leads to @xmath244 also by adding @xmath84 in the later schedule , then we have @xmath245 from eqs .",
    "( [ eq18][eq21 ] ) and @xmath246 , we have @xmath247    similarly , in case 2 where @xmath84 is added in the earlier schedule without inserting a machine idling period to obtain a feasible partial schedule described as in eq .",
    "( [ eq14 ] ) , we can show that if @xmath243 leads to @xmath244 also in this way , then there is a saved quadruple @xmath241 by the algorithm approx@xmath200 such that eq .",
    "( [ eq22 ] ) holds .    in case 3 where @xmath184 , @xmath84 is added in the earlier schedule , and a non - empty machine idling period of length @xmath185",
    "is inserted right before it , the algorithm continuously processes succeeding jobs up to @xmath79 in the earlier schedule , and lastly process all the remaining jobs in the later schedule .",
    "when @xmath114 , the algorithm completes the quadruple by assigning all the jobs of @xmath94 in the later schedule , starting at time @xmath174 , to obtain a full schedule described as in eq .",
    "( [ eq15 ] ) .",
    "we can similarly show that if @xmath243 leads to @xmath248 directly , or if @xmath243 leads to @xmath244 , and so on , then eventually to @xmath248 , then there is also a saved quadruple @xmath249 by the algorithm approx@xmath200 such that eq .",
    "( [ eq22 ] ) holds with @xmath158 replacing @xmath250 .",
    "we therefore finish the proof of the induction statement .",
    "lastly we use the inequality @xmath251 for @xmath252 to bound the ratio @xmath253 .",
    "that is , the total weighted completion time of the output full schedule by the algorithm approx@xmath200 is @xmath254    for the time complexity , note that for each @xmath85 such that @xmath88 or @xmath165 , there are @xmath255 boxes associated with it ; for a saved quadruple @xmath172 , it takes @xmath169 time to assign the job @xmath84 , leading to at most three new quadruples @xmath176 , each is used to update the corresponding box associated with @xmath250 .",
    "it follows that the total running time is @xmath256 .",
    "note from the definitions of @xmath257 s , and @xmath258 , that @xmath259 .",
    "enumerating all possible @xmath260 choices of @xmath71 , that is calling the algorithm approx@xmath200 @xmath260 times , the full schedule with the minimum @xmath229 is returned as the final solution .",
    "the overall algorithm is denoted as approx@xmath261 .",
    "[ coro09 ] algorithm approx@xmath261 is a @xmath201-approximation for the problem @xmath33 ; its time complexity is @xmath262 .      in this subsection",
    ", we derive an fptas for the general rescheduling problem @xmath27 by invoking multiple times the approximation algorithm approx@xmath200 for the special case @xmath31 .",
    "the job @xmath71 starts processing at time @xmath35 .",
    "it follows that the maximum time deviation is bounded @xmath263 , and we use @xmath264 to split the interval @xmath265 $ ] into subintervals @xmath266 , \\",
    "i_2 ^ 4 = ( \\delta_a ( 1+\\epsilon ) , \\delta_a ( 1+\\epsilon)^2 ] , \\",
    "i_{r_4}^4 = ( \\delta_a ( 1+\\epsilon)^{r_4 } , k],\\ ] ] where @xmath267 .",
    "let @xmath268 , for @xmath269 , and @xmath270 .",
    "using @xmath271 as the upper bound on the maximum time deviation , that is , @xmath271 replaces @xmath24 , our algorithm calls approx@xmath200 to solve the problem @xmath272 , by returning a constrained full schedule of the total weighted completion time within @xmath201 of the minimum .",
    "we denote this full schedule as @xmath273 .",
    "the final output full schedule is the one of the minimum objective function value among @xmath274 , which is denoted as @xmath275 with the objective function value @xmath276 .",
    "we denote our algorithm as approx@xmath277 .",
    "[ thm10 ] algorithm approx@xmath277 is a @xmath201-approximation for the general rescheduling problem @xmath27 ; its time complexity is + @xmath278 .",
    "let @xmath38 denote an optimal schedule for the problem with the objective function value @xmath279 , satisfying lemmas  [ lemma01 ] and [ lemma02 ] .",
    "suppose the job starts processing at time @xmath35 in @xmath38 is @xmath71 , and the maximum time deviation in @xmath38 is @xmath280 . we thus conclude that @xmath38 is also a constrained optimal schedule for the problem by replacing the upper bound @xmath24 with @xmath281 , i.e. , @xmath282 , under the constraint that @xmath71 starts processing at time @xmath35 .",
    "consider the value @xmath268 such that @xmath283 .    clearly , for the schedule @xmath273 found by the algorithm approx@xmath200 to the problem @xmath272 , it has the total weighted completion time @xmath284 and the maximum time deviation @xmath285 .",
    "it follows that @xmath286    note that we call the algorithm approx@xmath200 for all possible values of @xmath220 , and for each @xmath220 we call the algorithm @xmath287 times ( using the inequality @xmath288 ) .",
    "thus from theorem  [ thm08 ] the total running time of the algorithm approx@xmath277 is in @xmath289",
    "we investigated a rescheduling problem where a set of jobs has already been scheduled to minimize the total weighted completion time on a single machine , but a disruption causes the machine become unavailable for a given time interval .",
    "the production planner needs to reschedule the jobs without excessively altering the originally planned schedule .",
    "the degree of alteration is measured as the maximum time deviation for all the jobs between the original and the new schedules .",
    "we studied a general model where the maximum time deviation is taken both as a constraint and as part of the objective function .",
    "we presented a pseudo - polynomial time exact algorithm based on dynamic programming and an fptas .",
    "we remark that the fptas is developed from another slower exact algorithm for the special case where the maximum time deviation is not taken as part of the objective function , which gives us room to properly sample the maximum time deviation .",
    "w.l . was supported by k. c. wong magna found in ningbo university , the china scholarship council ( grant no .",
    "201408330402 ) , and the ningbo natural science foundation ( 2016a610078 ) .",
    "t.l . was supported by brain canada and nsf china ( grant nos .",
    "61221063 and 71371129 ) .",
    "r.g . was supported by nserc canada .",
    "g.l . was supported by nserc canada and nsf china ( grant no .",
    "61672323 ) .",
    "( item ( b ) of lemma  [ lemma01 ] ) by contradiction , assume @xmath54 is the first pair of jobs for which @xmath55 precedes @xmath1 in @xmath7 , i.e. @xmath56 , but @xmath1 immediately precedes @xmath55 in the later schedule of @xmath38 .",
    "let @xmath57 denote the new schedule obtained from @xmath38 by swapping @xmath1 and @xmath55 .",
    "if @xmath58 , then @xmath59 too , and thus @xmath60 due to @xmath61 ; if @xmath62 and @xmath63 , then @xmath64 due to @xmath65 ; lastly if @xmath62 and @xmath66 , then @xmath67 and @xmath68 . that is , @xmath57 is also a feasible reschedule .",
    "furthermore , the weighted completion times contributed by @xmath55 and @xmath1 in @xmath57 is no more than those in @xmath38 , implying the optimality of @xmath57 .",
    "if follows that , if necessary , after a sequence of job swappings we will obtain an optimal reschedule in which the jobs in the earlier schedule are in the same order as they appear in @xmath7 .",
    "item ( a ) is a direct consequence of lemma  [ lemma01 ] , since the jobs in the earlier schedule are in the same order as they appear in @xmath7 , which is the wspt order .",
    "that is , for the job @xmath1 in the earlier schedule of @xmath38 , if all the jobs @xmath55 , for @xmath290 , are also in the earlier schedule , then @xmath291 ; otherwise , @xmath292",
    ".    for item ( b ) , assume the machine idles before processing the jobs @xmath42 and @xmath43 , with @xmath42 preceding @xmath43 in the earlier schedule .",
    "we conclude from lemma  [ lemma01 ] and item ( a ) that if @xmath293 ( or @xmath294 , respectively ) , then moving the starting time of the job @xmath43 ( @xmath42 , respectively ) one unit ahead will maintain the maximum time deviation and decrease the total weighted completion time , which contradicts the optimality of @xmath38 .",
    "it follows that we must have @xmath295 ; in this case , if there is any job @xmath1 with @xmath296 in the later schedule , it can be moved to the earlier schedule to decrease the total weighted completion time , which again contradicts the optimality of @xmath38",
    ". therefore , there is no job @xmath1 with @xmath296 in the later schedule , which together with @xmath295 imply that the machine does not idle before processing the job @xmath43 .    item ( c ) is clearly seen for the same reason used in the last paragraph , that firstly their time deviations have to be the same , and secondly if this time deviation is less than @xmath22 , one can then move their starting time one unit ahead to decrease the total weighted completion time while maintaining the maximum time deviation , thus contradicting the optimality of @xmath38 .",
    "let the job in the earlier schedule right after the idle time period be @xmath1 . clearly , there is a job @xmath71 with @xmath297 in the later schedule of @xmath38 , due to the machine idling .",
    "the time deviation for @xmath71 is @xmath298 . if @xmath76 , then @xmath299 , a contradiction .",
    "this proves item ( e ) that @xmath300",
    ".    item ( f ) is clearly seen from lemma  [ lemma01 ] and the optimality of @xmath38 , that if the machine idles then it can start processing the jobs after the idling period earlier to decrease the total weighted completion time , while maintaining or even decreasing the maximum time deviation ."
  ],
  "abstract_text": [
    "<S> we investigate a single machine rescheduling problem that arises from an unexpected machine unavailability , after the given set of jobs has already been scheduled to minimize the total weighted completion time . </S>",
    "<S> such a disruption is represented as an unavailable time interval and is revealed to the production planner before any job is processed ; the production planner wishes to reschedule the jobs to minimize the alteration to the originally planned schedule , which is measured as the maximum time deviation between the original and the new schedules for all the jobs . </S>",
    "<S> the objective function in this rescheduling problem is to minimize the sum of the total weighted completion time and the weighted maximum time deviation , under the constraint that the maximum time deviation is bounded above by a given value . </S>",
    "<S> that is , the maximum time deviation is taken both as a constraint and as part of the objective function . </S>",
    "<S> we present a pseudo - polynomial time exact algorithm and a fully polynomial time approximation scheme , the latter of which is the best possible given that the general problem is np - hard . </S>"
  ]
}