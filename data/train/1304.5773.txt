{
  "article_text": [
    "an instance of the graph isomorphism ( gi ) problem is specified by two @xmath0-vertex graphs @xmath1 and @xmath2 and the challenge is to determine whether there exists a permutation of the vertices of @xmath1 that preserves adjacency and transforms @xmath3 .",
    "when such a permutation exists , the graphs are said to be isomorphic ; otherwise they are non - isomorphic .",
    "gi has been heavily studied in computer science @xcite .",
    "polynomial classical algorithms exist for special cases of gi , still it has not been possible to prove that gi is in p. although it is known that gi is in np , it has also not been possible to prove that it is np - complete .",
    "the situation is the same for integer factorization ( if)it belongs to np , but is not known to be in p or to be np - complete .",
    "gi and if are believed to be of comparable computational difficulty .    if and gi have also been examined from the perspective of quantum algorithms and both have been connected to the hidden subgroup problem ( hsp ) @xcite . for",
    "if the hidden subgroup is contained in an abelian parent group ( @xmath6 group of units modulo n ) , while for gi the parent group is non - abelian ( @xmath7 symmetric group on @xmath8 elements ) .",
    "while fourier sampling allows the abelian hsp to be solved efficiently , strong fourier sampling does not allow an efficient solution of the non - abelian hsp over @xmath9 @xcite . at this time",
    "an efficient quantum algorithm for gi is not known .",
    "a number of researchers have considered using the dynamics of physical systems to solve instances of gi .",
    "starting from physically motivated conjectures , these approaches embed the structure of the graphs appearing in the gi instance into the hamiltonian that drives the system dynamics . in ref .",
    "the systems considered were classical , while refs .",
    "@xcite worked with quantum systems .",
    "* building on refs .",
    "@xcite and @xcite , refs .",
    "@xcite and @xcite proposed using multi - particle quantum random walks ( qrw ) on graphs as a means for distinguishing pairs of non - isomorphic graphs .",
    "numerical tests of this approach focused on gi instances involving strongly regular graphs ( srg ) .",
    "the adjacency matrix for each srg was used to define the hamiltonian @xmath10 that drives the qrw on the graph @xmath1 .",
    "the walkers can only hop between vertices joined by an edge in @xmath1 .",
    "the propagator @xmath11 $ ] is evaluated at a fixed time @xmath12 for each srg associated with a gi instance .",
    "the two propagators are used to define a comparison function that is conjectured to vanish for isomorphic pairs of srgs , and to be non - zero otherwise .",
    "@xcite and @xcite examined both interacting and non - interacting systems of quantum walkers and found that : ( i )  no non - interacting qrw with a fixed number of walkers can distinguish all pairs of srgs ; ( ii )  increasing the number of walkers increases the distinguishing power of the approach ; and ( iii )  two - interacting bosonic walkers have more distinguishing power than both one and two non - interacting walkers .",
    "no analysis was provided of the algorithm s runtime @xmath13 versus problem size @xmath0 in the limit of large problem size @xmath5 , and so the computational complexity of this gi algorithm is currently unknown .",
    "note that for isomorphic pairs of graphs , this algorithm can not determine the permutation(s ) connecting the two graphs , nor the automorphism group of a given graph .",
    "finally , no discussion of the algorithm s experimental implementation is given .",
    "* the gi algorithm presented in ref .",
    "@xcite is based on adiabatic quantum evolution : here the problem hamiltonian is an ising hamiltonian that identifies the qubits with the vertices of a graph , and qubits @xmath14 and @xmath15 interact antiferromagnetically only when vertices @xmath14 and @xmath15 in the graph are joined by an edge .",
    "it was conjectured that the instantaneous ground - state encodes enough information about the graph to allow suitably chosen measurements to distinguish pairs of non - isomorphic graphs .",
    "physical observables that are invariant under qubit permutations are measured at intermediate times and the differences in the dynamics generated by two non - isomorphic graphs are assumed to allow the measurement outcomes to recognize the graphs as non - isomorphic .",
    "the algorithm was tested numerically on ( mostly ) srgs , and it was found that combinations of measurements of the : ( i )  spin - glass order parameter , ( ii )  @xmath16-magnetization , and ( iii )  total average energy allowed all the non - isomorphic pairs of graphs examined to be distinguished . ref .",
    "@xcite did not determine the scaling relation for the runtime @xmath13 versus problem size @xmath0 for @xmath5 , and so the computational complexity of this algorithm is currently unknown.the algorithm is also unable to determine the permutation(s ) that connect a pair of isomorphic graphs , nor the automorphism group of a given graph .",
    "@xcite discussed the experimental implementation of this algorithm and noted that the measurements available on the d - wave hardware do not allow the observables used in the numerical tests to be measured on the hardware .",
    "in this paper we present a quantum algorithm that solves arbitrary instances of gi .",
    "the algorithm also provides a novel approach for determining the automorphism group of a given graph .",
    "the gi quantum algorithm is constructed by first converting an instance of gi into an instance of a combinatorial optimization problem whose cost function , by construction , has a zero minimum value when the pair of graphs in the gi instance are isomorphic , and is positive when the pair are non - isomorphic .",
    "the specification of the gi quantum algorithm is completed by showing how the combinatorial optimization problem can be solved using adiabatic quantum evolution . to test the effectiveness of this gi quantum algorithm we numerically simulated its schrodinger dynamics .",
    "the simulation results show that it can correctly : ( i )  distinguish pairs of non - isomorphic graphs ; ( ii )  recognize pairs of isomorphic graphs and determine the permutation(s ) that connect them ; and ( iii )  find the automorphism group of a given graph .",
    "we also discuss the experimental implementation of the gi algorithm , and show how it can be leveraged to give a quantum algorithm that solves arbitrary instances of the ( np - complete ) sub - graph isomorphism ( sgi ) problem . as explained in section  [ sec4 ] , calculation of the runtime for an adiabatic quantum algorithm in the limit of large problem size",
    "is a fundamental open problem in adiabatic quantum computing .",
    "it is thus not presently possible to determine the computational complexity of adiabatic quantum algorithms in general , nor , consequently , of the specific adiabatic quantum algorithms presented here .",
    "however , because adiabatic quantum computing has been shown to be equivalent to the circuit - model of quantum computing @xcite , the development of adiabatic quantum algorithms continues to be of great interest . just as with the gi algorithms of refs .",
    "@xcite-@xcite , our gi algorithm also has unknown complexity .",
    "however , unlike the algorithms of refs .",
    "@xcite-@xcite , the gi algorithm presented here : ( i )  encodes the gi instance explicitly into the cost function of a combinatorial optimization problem which is solved using adiabatic quantum evolution without introducing physical conjectures ; and ( ii )  determines the permutation(s ) connecting two isomorphic graphs , and the automorphism group of a given graph .",
    "as we shall see , our gi algorithm can be implemented on existing d - wave hardware using established embedding procedures @xcite .",
    "such an implementation is in the works and will be reported elsewhere .",
    "the structure of this paper is as follows . in section  [ sec2 ]",
    "we give a careful presentation of the gi problem , and show how an instance of gi can be converted to an instance of a combinatorial optimization problem whose solution ( section  [ sec3 ] ) can be found using adiabatic quantum evolution . to test the performance of the gi quantum algorithm introduced in section  [ sec3 ] , we numerically simulated its schrodinger dynamics and the results of that simulation are presented in section  [ sec4 ] . in section  [ sec5 ]",
    "we describe the experimental implementation of the gi algorithm , and in section  [ sec6 ] we show how it can be used to give a quantum algorithm that solves arbitrary instances of the np - complete problem known as subgraph isomorphism . finally , we summarize our results in section  [ sec7 ] .",
    "two appendices are also included .",
    "the first briefly summarizes the quantum adiabatic theorem and its use in adiabatic quantum computing , and the second reviews the approach to embedding the problem hamiltonian for an adiabatic quantum algorithm onto the d - wave hardware that was presented in ref .  @xcite .",
    "in this section we introduce the graph isomorphism ( gi ) problem and show how an instance of gi can be converted into an instance of a combinatorial optimization problem ( cop ) whose cost function has zero ( non - zero ) minimum value when the pair of graphs being studied are isomorphic ( non - isomorphic ) .      a graph @xmath1 is specified by a set of vertices @xmath17 and a set of edges @xmath18 .",
    "we focus on _ simple _ graphs in which an edge only connects distinct vertices , and the edges are undirected",
    ". the _ order of _",
    "@xmath1 is defined to be the number of vertices contained in @xmath17 , and two vertices are said to be _ adjacent _ if they are connected by an edge .",
    "if @xmath16 and @xmath19 are adjacent , we say that @xmath19 is a _ neighbor _ of @xmath16 , and vice versa .",
    "the _ degree _ @xmath20 of a vertex @xmath16 is equal to the number of vertices that are adjacent to @xmath16 .",
    "the _ degree sequence _ of a graph lists the degree of each vertex in the graph ordered from largest degree to smallest .",
    "a graph @xmath1 of order @xmath0 can also be specified by its _",
    "adjacency matrix _",
    "@xmath21 which is an @xmath22 matrix whose matrix element @xmath23 if the vertices @xmath14 and @xmath15 are ( are not ) adjacent . for simple graphs",
    "@xmath24 and @xmath25 since edges only connect distinct vertices and are undirected .",
    "two graphs @xmath1 and @xmath2 are said to be _ isomorphic _ if there is a one - to - one correspondence @xmath26 between the vertex sets @xmath17 and @xmath27 such that two vertices @xmath16 and @xmath19 are adjacent in @xmath1 if and only if their images @xmath28 and @xmath29 are adjacent in @xmath2 .",
    "the graphs @xmath1 and @xmath2 are non - isomorphic if no such @xmath26 exists .",
    "since no one - to - one correspondence @xmath26 can exist when the number of vertices in @xmath1 and @xmath2 are different , graphs with unequal orders are always non - isomorphic .",
    "it can also be shown that if two graphs are isomorphic , they must have identical degree sequences",
    ".    we can also describe graph isomorphism in terms of the adjacency matrices @xmath21 and @xmath30 of the graphs @xmath1 and @xmath2 , respectively .",
    "the graphs are isomorphic if and only if there exists a permutation matrix @xmath31 of the vertices of @xmath1 that satisfies @xmath32 where @xmath33 is the transpose of @xmath31 .",
    "it is straight - forward to show that if @xmath1 and @xmath2 are isomorphic , then a permutation matrix @xmath31 exists that satisfies eq .",
    "( [ gicond ] ) . to prove the `` only if '' statement , note that the @xmath14-@xmath15 matrix element of the rhs is @xmath34 .",
    "( [ gicond ] ) is thus satisfied when a permutation matrix @xmath31 exists such that @xmath35 .",
    "thus eq .",
    "( [ gicond ] ) is simply the condition that @xmath31 preserve adjacency . since",
    "a permutation is a one - to - one correpondence , the existence of a permutation matrix @xmath31 satisfying eq .",
    "( [ gicond ] ) implies @xmath1 and @xmath2 are isomorphic .",
    "thus , the existence of a permutation matrix @xmath31 satisfying eq .",
    "( [ gicond ] ) is an equivalent way to define graph isomorphism .",
    "the graph isomorphism ( gi ) problem is to determine whether two given graphs @xmath1 and @xmath2 are isomorphic .",
    "the problem is only non - trivial when @xmath1 and @xmath2 have the same order and so we focus on that case in this paper .",
    "a permutation @xmath26 of a finite set @xmath36 is a one - to - one correspondence from @xmath37 which sends @xmath38 such that @xmath39 , and @xmath40 for @xmath41 .",
    "the permutation @xmath26 can be written @xmath42 where column @xmath14 indicates that @xmath26 sends @xmath43 . since the top row on the rhs of eq .",
    "( [ permdef ] ) is the same for all permutations , all the information about @xmath26 is contained in the bottom row .",
    "thus we can map a permutation @xmath26 into an integer string @xmath44 , with @xmath45 and @xmath46 for @xmath41 .",
    "for reasons that will become clear in section  [ sec2c ] , we want to convert the integer string @xmath44 into a binary string @xmath47 .",
    "this can be done by replacing each @xmath48 in @xmath49 by the unique binary string formed from the coefficients appearing in its binary decomposition @xmath50 here @xmath51 .",
    "thus the integer string @xmath49 is transformed to the binary string @xmath52 where @xmath53 .",
    "the binary string @xmath47 has length @xmath54 , where @xmath55 thus we can identify a permutation @xmath26 with the binary string @xmath47 in eq .",
    "( [ permbinstr ] ) .",
    "let @xmath56 be the hamming space of binary strings of length @xmath54 .",
    "this space contains @xmath57 strings , and we have just seen that @xmath58 of these strings @xmath47 encode permutations @xmath26 . our last task is to define a mapping from @xmath56 to the space of @xmath22 matrices @xmath31 with binary matrix elements @xmath59 . the mapping is constructed as follows :    1 .",
    "let @xmath60 be a binary string in @xmath56 .",
    "we parse @xmath61 into @xmath0 substrings of length u as follows : @xmath62 2 .   for each substring @xmath63 ,",
    "construct the integer @xmath64 3 .   finally , introduce the integer string @xmath65 , and define the @xmath22 matrix @xmath66 to have matrix elements @xmath67 where @xmath68 , and @xmath69 is the kronecker delta",
    ".    note that when the binary string @xmath61 corresponds to a permutation , the matrix @xmath66 is a permutation matrix since the @xmath70 formed in step  @xmath71 will obey @xmath72 and @xmath73 for @xmath41 . in this case , if @xmath21 is the adjacency matrix for a graph @xmath1 , then @xmath74 will be the adjacency matrix for a graph @xmath2 isomorphic to @xmath1 .",
    "on the other hand , if @xmath61 does not correspond to a permutation , then the adjacency matrix @xmath75 must correspond to a graph @xmath2 which is not isomorphic to @xmath1 .",
    "the result of our development so far is the establishment of a map from binary strings of length @xmath54 to @xmath22 matrices ( viz .",
    "linear maps ) with binary matrix elements .",
    "when the string is ( is not ) a permutation , the matrix produced is ( is not ) a permutation matrix .",
    "finally , recall from stirling s formula that @xmath76 which is the number of bits needed to represent @xmath58 .",
    "our encoding of permutations uses @xmath77 bits and so approaches asymptotically what is required by stirling s formula .",
    "as seen above , an instance of gi is specified by a pair of graphs @xmath1 and @xmath2 ( or equivalently , by a pair of adjacency matrices @xmath21 and @xmath30 ) . here",
    "we show how a gi instance can be transformed into an instance of a combinatorial optimization problem ( cop ) whose cost function has a minimum value of zero if and only if @xmath1 and @xmath2 are isomorphic .",
    "the search space for the cop is the hamming space @xmath56 of binary strings @xmath61 of length @xmath54 which are associated with the integer strings @xmath78 and matrices @xmath66 introduced in section  [ sec2b ] .",
    "the cop cost function @xmath79 contains three contributions @xmath80 the first two terms on the rhs penalize integer strings @xmath81 whose associated matrix @xmath66 is not a permutation matrix , @xmath82 where @xmath69 is the kronecker delta .",
    "we see that @xmath83 when @xmath84 for some @xmath14 , and @xmath85 when @xmath86 for some @xmath41 .",
    "thus @xmath87 if and only if @xmath66 is a permutation matrix .",
    "the third term @xmath88 adds a penalty when @xmath89 : @xmath90 here @xmath91 is the @xmath92-norm of @xmath93 . in the numerical simulations discussed in section  [ sec4 ] , the @xmath94-norm is used , though any @xmath92-norm would be acceptable .",
    "thus , when @xmath1 and @xmath2 are isomorphic , @xmath95 , and @xmath66 is the permutation of vertices of @xmath1 that maps @xmath3 .",
    "putting all these remarks together , we see that if @xmath96 for some integer string @xmath78 , then @xmath1 and @xmath2 are isomorphic and @xmath66 is the permutation that connects them .",
    "on the other hand , if @xmath97 for all strings @xmath78 , then @xmath1 and @xmath2 are non - isomorphic .",
    "we have thus converted an instance of gi into an instance of the following cop :    graph isomorphism cop : : :    given the @xmath0-vertex graphs @xmath1 and    @xmath2 and the associated cost function    @xmath79 defined above , find an integer string    @xmath98 that minimizes @xmath79 .    by construction : ( i )  @xmath99 if and only if @xmath1 and @xmath2 are isomorphic and @xmath100 is the permutation matrix mapping @xmath3 ; and ( ii )  @xmath101 if and only if @xmath1 and @xmath2 are non - isomorphic .    before moving on ,",
    "notice that if @xmath102 , then @xmath99 since @xmath1 is certainly isomorphic to itself . in this case",
    "@xmath100 is an automorphism of @xmath1 .",
    "we shall see that the gi quantum algorithm to be introduced in section  [ sec3 ] provides a novel approach for finding the automorphism group of a graph .",
    "a quantum algorithm is an algorithm that can be run on a realistic model of quantum computation @xcite .",
    "one such model is adiabatic quantum computation @xcite which is based on adiabatic quantum evolution @xcite .",
    "the adiabatic quantum optimization ( aqo ) algorithm @xcite is an example of adiabatic quantum computation that exploits the adiabatic dynamics of a quantum system to solve a cop ( see appendix  [ appendixqat ] for a brief overview ) .",
    "the aqo algorithm uses the optimization problem cost function to define a problem hamiltonian @xmath103 whose ground - state subspace encodes all problem solutions .",
    "the algorithm evolves the state of an @xmath104-qubit register from the ground - state of an initial hamiltonian @xmath105 to the ground - state of @xmath103 with probability approaching @xmath106 in the adiabatic limit .",
    "an appropriate measurement at the end of the adiabatic evolution yields a solution of the optimization problem almost certainly .",
    "the time - dependent hamiltonian @xmath107 for global aqo is @xmath108 where @xmath109 is the algorithm runtime , and adiabatic dynamics corresponds to @xmath110 .    to map the gi cop onto an adiabatic quantum computation , we begin by promoting the binary strings @xmath61 to computational basis states ( cbs ) @xmath111 .",
    "thus each bit in @xmath61 is promoted to a qubit so that the quantum register contains @xmath112 qubits .",
    "the cbs are defined to be the @xmath113 eigenstates of @xmath114 .",
    "the problem hamiltonian @xmath103 is defined to be diagonal in the cbs with eigenvalue @xmath79 , where @xmath78 is the integer string associated with @xmath115 : @xmath116 note that ( see section  [ sec2c ] ) the ground - state energy of @xmath103 will be zero if and only if the graphs @xmath1 and @xmath2 are isomorphic .",
    "we will discuss the experimental realization of @xmath103 in section  [ sec5 ] .",
    "the initial hamiltonian @xmath105 is chosen to be @xmath117 where @xmath118 and @xmath119 are the identity and x - pauli operator for qubit @xmath120 , respectively .",
    "the ground - state of @xmath105 is the easily constructed uniform superposition of cbs .",
    "the quantum algorithm for gi begins by preparing the @xmath104 qubit register in the ground - state of @xmath105 and then driving the qubit register dynamics using the time - dependent hamiltonian @xmath107 . at the end of the evolution",
    "the qubits are measured in the computational basis .",
    "the outcome is the bit string @xmath121 so that the final state of the register is @xmath122 and its energy is @xmath123 , where @xmath124 is the integer string derived from @xmath121 . in the adiabatic limit , @xmath123 will be the ground - state energy , and if @xmath125 ( @xmath126 ) the algorithm decides @xmath1 and @xmath2 are isomorphic ( non - isomorphic ) .",
    "note that any real application of aqo will only be approximately adiabatic .",
    "thus the probability that the final energy @xmath123 will be the ground - state energy will be @xmath127 .",
    "in this case the gi quantum algorithm must be run @xmath128 times so that , with probability @xmath129 , at least one of the measurements will return the ground - state energy .",
    "we can make @xmath130 arbitrarily close to @xmath106 by choosing @xmath131 sufficiently large .",
    "in this section we present the results of a numerical simulation of the dynamics of the gi adiabatic quantum algorithm ( aqa ) . because the gi aqa uses @xmath132 qubits , and these simulations",
    "were carried out using a classical digital computer , we were limited to gi instances involving graphs with order @xmath133 . although we would like to have examined larger graphs , this simply was not practical .",
    "note that the @xmath134 simulations use @xmath135 qubits .",
    "these simulations are at the upper limit of @xmath136-@xmath137 qubits at which simulation of the full adiabatic schrodinger dynamics is feasible @xcite . to simulate a gi instance with graphs of order @xmath138 requires a @xmath139 qubit simulation which is well beyond what can be done practically .",
    "the protocol for the simulations presented here follows refs .",
    "@xcite .",
    "as explained in appendix  [ appendixqat ] , the runtime for an adiabatic quantum algorithm is related to the minimum energy gap arising during the course of the adiabatic quantum evolution .",
    "thus , determining the runtime scaling relation @xmath13 versus problem size @xmath0 in the asymptotic limit ( @xmath140 ) , reduces to determining the minimum gap scaling relation @xmath4 for large @xmath0 .",
    "this , however , is a well - known , fundamental open problem in adiabatic quantum computing , and so it was not possible to determine the asymptotic runtime scaling relation for our gi aqa . although our numerical simulations could be used to compute a runtime for each of the gi instances considered below , we did not do so for two reasons .",
    "first , as noted above , the gi instances that can be simulated using a digital computer are limited to graphs with no more than seven vertices .",
    "these instances are thus far from the large problem - size limit @xmath5 , and so the associated runtimes tell us nothing about the asymptotic performance of the gi aqa .",
    "second , it is well - known that the minimum energy gap encountered during adiabatic quantum evolution ( and which largely determines the runtime ) is sensitive to the particular hamiltonian path followed by the adiabatic quantum evolution .",
    "determining the optimal hamiltonian path which yields the largest minimum gap , and thus the shortest possible runtime , is another fundamental open problem in adiabatic quantum computing . as a result , the hamiltonian path used in the numerical simulations ( i.  e.  the linear interpolating hamiltonian @xmath107 in eq .",
    "( [ tdham ] ) ) will almost certainly be non - optimal , and so the runtime it produces will also , almost certainly , be non - optimal , and thus a poor indicator of gi aqa performance .    in section  [ sec4a ] we present simulation results for simple examples of isomorphic and non - isomorphic graphs .",
    "these examples allow us to illustrate the analysis of the simulation results in a simple setting .",
    "section  [ sec4b ] then presents our simulation results for non - isomorphic instances of : ( i )  iso - spectral graphs ; and ( ii )  strongly regular graphs .",
    "finally , section  [ sec4c ] considers gi instances where @xmath141 .",
    "clearly , all such instances correspond to isomorphic graphs since the identity permutation will always map @xmath142 and preserve adjacency .",
    "the situation is more interesting when @xmath1 has symmetries which allow non - trivial permutations as graph isomorphisms .",
    "these self - isomorphisms are referred to as graph automorphisms , and they form a group known as the automorphism group @xmath143 of @xmath1 . in this final subsection",
    "we use the gi aqa to find @xmath143 for a number of graphs . to the best of our knowledge , using a gi algorithm to find @xmath143 is new . in all gi instances considered in this section , the gi aqa correctly : ( i )",
    "distinguished non - isomorphic pairs of graphs ; ( ii )  recognized isomorphic pairs of graphs ; and ( iii )  determined the automorphism group of a given graph .      here",
    "we present the results of a numerical simulation of the gi aqa applied to two simple gi instances . in section  [ sec4a1 ] ( section  [ sec4a2 ] )",
    "we examine an instance of two non - isomorphic ( isomorphic ) graphs . for the isomorphic instance we also present the permutations found by the gi aqa that transforms @xmath1 into @xmath2 while preserving adjacency .      here",
    "we use the gi aqa to examine a gi instance in which the two graphs @xmath1 and @xmath2 are non - isomorphic .",
    "the two graphs are shown in figure  [ fig1 ] .",
    "( 90,15)(0,-1 ) ( 10,12.5 ) ( 20,12.5 ) ( 10,2.5 ) ( 20,2.5 ) ( 10,2.5)(0,1)10 ( 20,2.5)(0,1)10 ( 10,2.5)(1,0)10 ( 10,12.5)(1,0)10 ( 8,13)@xmath144 ( 8,1.0)@xmath145 ( 21.2,13)@xmath106 ( 21.2,1.0)@xmath71 ( 14.5,-1 ) * *    ( 47.5,12.5 ) ( 57.5,12.5 ) ( 47.5,2.5 ) ( 57.5,2.5 ) ( 45.5,13)@xmath144 ( 45.5,1.0)@xmath145 ( 58.7,13)@xmath106 ( 58.7,1.0)@xmath71 ( 47.5,2.5)(0,1)10 ( 47.5,2.5)(1,0)10 ( 47.5,12.5)(1,-1)10 ( 47.5,2.5)(1,1)10 ( 52,-1)@xmath146    each graph contains @xmath147 vertices and @xmath147 edges , however they are non - isomorphic . examining figure  [ fig1 ]",
    "we see that the degree sequence for @xmath1 is @xmath148 , while that for @xmath2 is @xmath149 . since these degree sequences are different we know that @xmath1 and @xmath2 are non - isomorphic .",
    "finally , the adjacency matrices @xmath21 and @xmath30 for @xmath1 and @xmath2 , respectively , are : @xmath150    the gi aqa finds a non - zero final ground - state energy @xmath151 , and so correctly identifies these two graphs as non - isomorphic .",
    "it also finds that the final ground - state subspace has a degeneracy of @xmath152 .",
    "the linear maps associated with the @xmath152 cbs that span this subspace give rise to the lowest cost linear maps of @xmath1 relative to @xmath2 . as these graphs are not isomorphic , these lowest cost maps have little inherent interest and so we do not list them .      here",
    "we examine the case of two isomorphic graphs @xmath1 and @xmath2 which are shown in figure  [ fig2 ] .",
    "( 90,15)(0,-1 ) ( 10,12.5 ) ( 20,12.5 ) ( 10,2.5 ) ( 20,2.5 ) ( 10,2.5)(0,1)10 ( 20,2.5)(0,1)10 ( 10,2.5)(1,0)10 ( 10,12.5)(1,0)10 ( 10,12.5)(1,-1)10 ( 8.0,13)@xmath144 ( 8.0,1.0)@xmath145 ( 21.2,13)@xmath106 ( 21.2,1.0)@xmath71 ( 14.5,-1 ) * *    ( 47.5,12.5 ) ( 57.5,12.5 ) ( 47.5,2.5 ) ( 57.5,2.5 ) ( 45.5,13)@xmath144 ( 45.5,1.0)@xmath145 ( 58.7,13)@xmath106 ( 58.7,1.0)@xmath71 ( 47.5,2.5)(0,1)10 ( 47.5,2.5)(1,0)10 ( 47.5,12.5)(1,0)10 ( 47.5,12.5)(1,-1)10 ( 47.5,2.5)(1,1)10 ( 52,-1)@xmath146    each graph contains @xmath147 vertices and @xmath153 edges , and both graphs have degree sequence @xmath154 . by inspection of figure  [ fig2 ] ,",
    "the associated adjacency matrices are , respectively , @xmath155 for these two graphs , the gi aqa finds a vanishing final ground - state energy @xmath156 and so recognizes @xmath1 and @xmath2 as isomorphic .",
    "it also finds that the final ground - state subspace has a degeneracy of @xmath147 .",
    "the four cbs that span this subspace give four binary strings @xmath61 .",
    "these four binary strings in turn generate four integer strings @xmath78 which are , respectively , the bottom row of four permutations ( see eq .",
    "( [ permdef ] ) ) .",
    "thus , not only does the gi aqa recognize @xmath1 and @xmath2 as isomorphic , but it also returns the @xmath147 graph isomorphisms @xmath157 that transform @xmath158 while preserving adjacency : @xmath159 we will next explicitly show that @xmath160 is a graph isomorphism ; the reader can easily check that the remaining @xmath145 permutations are also graph isomorphisms .",
    "the permutation matrix @xmath161 associated with @xmath160 is @xmath162 under @xmath160 , @xmath1 is transformed to @xmath163 which is shown in figure  [ fig3 ] .",
    "( 90,15)(0,-1 ) ( 10,12.5 ) ( 20,12.5 ) ( 10,2.5 ) ( 20,2.5 ) ( 10,2.5)(0,1)10 ( 20,2.5)(0,1)10 ( 10,2.5)(1,0)10 ( 10,12.5)(1,0)10 ( 10,12.5)(1,-1)10 ( 8,13)@xmath144 ( 8,1.0)@xmath145 ( 21.2,13)@xmath106 ( 21.2,1.0)@xmath71 ( 14.5,-1 ) * *    ( 32,7.5)@xmath164    ( 47.5,12.5 ) ( 57.5,12.5 ) ( 47.5,2.5 ) ( 57.5,2.5 ) ( 45.5,13)@xmath144 ( 45.5,1.0)@xmath106 ( 58.7,13)@xmath71 ( 58.7,1.0)@xmath145 ( 47.5,2.5)(0,1)10 ( 47.5,2.5)(1,0)10 ( 47.5,12.5)(1,0)10 ( 47.5,12.5)(1,-1)10 ( 57.5,2.5)(0,1)10 ( 49,-1)@xmath165    it is clear from figure  [ fig3 ] that vertices @xmath16 and @xmath19 are adjacent in @xmath1 if and only if @xmath166 and @xmath167 are adjacent in @xmath163 . the adjacency matrix for @xmath163 is @xmath168 which is easily shown to be @xmath169 this agrees with the adjacency shown in @xmath163 in figure  [ fig3 ] . comparison with eq .",
    "( [ twoadmat2 ] ) shows that @xmath170 .",
    "thus the permutation @xmath160 does map @xmath1 into @xmath2 and preserve adjacency and so establishes that @xmath1 and @xmath2 are isomorphic .",
    "finally , note that @xmath1 and @xmath2 are connected by exactly @xmath147 graph isomorphisms .",
    "examination of figure  [ fig2 ] shows that the degree-@xmath145 vertices in @xmath1 are vertices @xmath144 and @xmath71 , while in @xmath2 they are vertices @xmath144 and @xmath145 .",
    "since the degree of a vertex is preserved by a graph isomorphism , vertex @xmath144 in @xmath1 must be mapped to vertex @xmath144 or @xmath145 in @xmath2",
    ". then vertex @xmath71 ( in @xmath1 ) must be mapped to vertex @xmath145 or @xmath144 ( in @xmath2 ) , respectively .",
    "this then forces vertex @xmath106 to map to vertex @xmath106 or @xmath71 , and vertex @xmath145 to map to vertex @xmath71 or @xmath106 , respectively .",
    "thus only @xmath147 graph isomorphism are possible and these are exactly the @xmath147 graph isomorphisms found by the gi aqa which appear in eq .",
    "( [ perms1 ] ) .      in this subsection we present gi instances involving pairs of non - isomorphic graphs . in section  [ sec4b1 ]",
    "we examine two instances of isospectral graphs ; and in section  [ sec4b2 ] we look at three instances of strongly regular graphs .",
    "we shall see that the gi aqa correctly distinguishes all graph pairs as non - isomorphic .",
    "the spectrum of a graph is the set containing all the eigenvalues of its adjacency matrix .",
    "two graphs are iso - spectral if they have identical spectra .",
    "non - isomorphic iso - spectral graphs are believed to be difficult to distinguish @xcite .",
    "here we test the gi aqa on pairs of non - isomorphic iso - spectral graphs .",
    "the non - isomorphic pairs of iso - spectral graphs examined here appear in ref .",
    "+ it is known that no pair of graphs with less than @xmath153 vertices is iso - spectral @xcite .",
    "figure  [ fig4 ]    ( 90,15)(0,-2 ) ( 10,12.5 ) ( 10,2.5 ) ( 20,12.5 ) ( 20,2.5 ) ( 15,7.5 ) ( 10,2.5)(0,1)10 ( 20,2.5)(0,1)10 ( 10,2.5)(1,0)10 ( 10,12.5)(1,0)10 ( 8.5,13)@xmath144 ( 8.5,1)@xmath145 ( 20.7,13)@xmath106 ( 20.7,1)@xmath71 ( 14.6,8.5)@xmath147 ( 14.5,-1.5 ) * *    ( 42.5,12.5 ) ( 37.5,2.5 ) ( 47.5,2.5 ) ( 40.5,2.5 ) ( 44.5,2.5 ) ( 37.5,2.5)(1,2)5 ( 47.5,2.5)(-1,2)5 ( 40.5,2.5)(1,5)2 ( 44.5,2.5)(-1,5)2 ( 42.1,13.5)@xmath144 ( 47.5,0.4)@xmath106 ( 44.3,0.4)@xmath71 ( 39.9,0.4)@xmath145 ( 36.7,0.4)@xmath147 ( 42,-1.5)@xmath146    shows a pair of graphs @xmath1 and @xmath2 with @xmath153 vertices which are isospectral and yet are non - isomorphic .",
    "although both have @xmath153 vertices and @xmath147 edges , the degree sequence of @xmath1 is @xmath171 , while that of @xmath2 is @xmath172 .",
    "since they have different degree sequences , it follows that @xmath1 and @xmath2 are non - isomorphic .",
    "the adjacency matrices @xmath21 and @xmath30 for @xmath1 and @xmath2 , respectively , are : @xmath173 it is straight - forward to show that @xmath21 and @xmath30 have the same characteristic polynomial @xmath174 and so @xmath1 and @xmath2 are iso - spectral .",
    "numerical simulation of the dynamics of the gi aqa finds a non - zero final ground - state energy @xmath175 , and so the gi aqa correctly distinguishes @xmath1 and @xmath2 as non - isomorphic graphs .",
    "+ the pair of graphs @xmath1 and @xmath2 in figure  [ fig5 ]    ( 90,20)(0,-5 ) ( 10,12.5 ) ( 10,2.5 ) ( 20,12.5 ) ( 20,2.5 ) ( 15,7.5 ) ( 15,-2.5 ) ( 10,2.5)(0,1)10 ( 20,2.5)(0,1)10 ( 10,2.5)(1,1)5 ( 10,12.5)(1,-1)5 ( 15,7.5)(1,1)5 ( 15,7.5)(1,-1)5 ( 15,-2.5)(0,1)10 ( 8.5,13)@xmath144 ( 8.5,1)@xmath106 ( 16,-2.5)@xmath71 ( 20.7,13)@xmath147 ( 20.7,1)@xmath145 ( 14.6,8.5)@xmath153 ( 14.5,-5 ) * *    ( 37.5,7.5 ) ( 40,7.5 ) ( 47.5,7.5 ) ( 45,7.5 ) ( 42.5,12.5 ) ( 42.5,2.5 ) ( 37.5,7.5)(1,0)2.5 ( 45,7.5)(1,0)2.5 ( 42.5,2.5)(0,1)10 ( 40,7.5)(1,-2)2.5 ( 42.5,2.5)(1,2)2.5 ( 40,7.5)(1,2)2.5 ( 42.5,12.5)(1,-2)2.5    ( 36,8)@xmath144 ( 39,8)@xmath106 ( 42.1,13.5)@xmath71 ( 42.1,0.5)@xmath145 ( 45.3,8)@xmath147 ( 48,8)@xmath153 ( 42,-5)@xmath146    are iso - spectral and non - isomorphic . to see this , note that although both graphs have @xmath176 vertices and @xmath177 edges , the degree sequence of @xmath1 is @xmath178 , while that of @xmath2 is @xmath179 . since their degree sequences are different , @xmath1 and @xmath2 are non - isomorphic .",
    "the adjacency matrices @xmath21 and @xmath30 of @xmath1 and @xmath2 , respectively , are : @xmath180 both @xmath21 and @xmath30 have the same characteristic polynomial @xmath181 which establishes that @xmath1 and @xmath2 are iso - spectral .",
    "numerical simulation of the dynamics of the gi aqa finds a non - zero final ground - state energy @xmath182 , and so the gi aqa correctly distinguishes @xmath1 and @xmath2 as non - isomorphic graphs .      as we saw in section  [ sec2a ] ,",
    "the degree @xmath20 of a vertex @xmath16 is equal to the number of vertices that are adjacent to @xmath16 .",
    "a graph @xmath1 is said to be @xmath131-_regular _ if , for all vertices @xmath16 , the degree @xmath183 .",
    "a graph is said to be _ regular _ if it is @xmath131-regular for some value of @xmath131 .",
    "finally , a _ strongly regular _",
    "graph is a graph with @xmath184 vertices that is @xmath131-regular , and for which : ( i )  any two adjacent vertices have @xmath185 common neighbors ; and ( ii )  any two non - adjacent vertices have @xmath186 common neighbors .",
    "the set of all strongly regular graphs is divided up into families , and each family is composed of strongly regular graphs having the same parameter values @xmath187 . in this subsection",
    "we apply the gi aqa to pairs of non - isomorphic strongly regular graphs .",
    "an excellent test for this algorithm would be two non - isomorphic strongly regular graphs belonging to the _ same _ family as such graphs would then have the same order and degree sequence .",
    "unfortunately , to find a family containing _ at least _ two non - isomorphic strongly regular graphs requires going to a family containing @xmath152-vertex graphs .",
    "for example , the family @xmath188 contains two non - isomorphic strongly regular graphs .",
    "since the gi aqa uses @xmath189 qubits , simulation of its quantum dynamics on @xmath152-vertex graphs requires @xmath190 qubits .",
    "this is hopelessly beyond the @xmath136@xmath137 qubit limit for such simulations discussed in the introduction to section  [ sec4 ] .",
    "as noted there , this hard limit restricts our simulations to graphs with no more than @xmath177 vertices .",
    "now the number of connected strongly regular graphs with @xmath191 is @xmath192 , respectively . for each of the values @xmath193 ,",
    "the strongly regular graphs are non - isomorphic as desired , however , each graph belongs to a _",
    "different _ family . in light of the above remarks , the simulations reported in this subsection are restricted to pairs of connected non - isomorphic strongly regular graphs with @xmath193",
    ". ideally we would have simulated the gi aqa on the above pair of @xmath152-vertex strongly regular graphs , however the realities of simulating quantum systems on a classical computer made this test well beyond reach .",
    "+ in figure  [ fig6 ]    ( 90,16)(0,-2 ) ( 15,12.5 ) ( 10,7.5 ) ( 15,2.5 ) ( 20,7.5 ) ( 10,7.5)(1,1)5 ( 20,7.5)(-1,1)5 ( 10,7.5)(1,-1)5 ( 20,7.5)(-1,-1)5    ( 14.7,13.5)@xmath144 ( 8,8)@xmath145 ( 20.7,8)@xmath106 ( 15.7,0.7)@xmath71 ( 13.5,-3 ) * *    ( 52.5,12.5 ) ( 52.5,2.5 ) ( 47.5,7.5 ) ( 57.5,7.5 )    ( 52.2,13.5)@xmath144 ( 45.5,8)@xmath145 ( 58.2,8)@xmath106 ( 53.2,0.7)@xmath71    ( 47.5,7.5)(1,1)5 ( 47.5,7.5)(1,-1)5 ( 52.5,12.5)(1,-1)5 ( 52.5,2.5)(1,1)5 ( 47.5,7.5)(1,0)10 ( 52.5,2.5)(0,1)10 ( 51,-3)@xmath146    we show two strongly regular @xmath147-vertex graphs @xmath1 and @xmath2 .",
    "the parameters for @xmath1 are @xmath194 , @xmath195 , @xmath196 , and @xmath197 ; while for @xmath2 they are @xmath194 , @xmath198 , @xmath199 , and @xmath200 .",
    "it is clear that @xmath1 and @xmath2 are non - isomorphic since they contain an unequal number of edges and different degree sequences .",
    "the adjacency matrices @xmath21 and @xmath30 for @xmath1 and @xmath2 are , respectively , @xmath201 numerical simulation of the gi aqa dynamics finds a non - zero final ground - state energy @xmath151 and so the gi aqa correctly distinguishes @xmath1 and @xmath2 as non - isomorphic .",
    "+ in figure  [ fig7 ]    ( 90,18)(0,-3 ) ( 10,7.5 ) ( 10,2.5 ) ( 20,7.5 ) ( 20,2.5 ) ( 15,12.5 )    ( 10,2.5)(0,1)5 ( 20,2.5)(0,1)5 ( 10,2.5)(1,0)10 ( 10,7.5)(1,1)5 ( 20,7.5)(-1,1)5    ( 14.6,13.5)@xmath144 ( 8,1)@xmath145 ( 21.2,8)@xmath106 ( 21.2,1)@xmath71 ( 8,8)@xmath147    ( 14.5,-3 ) * *    ( 57.5,2.5 ) ( 47.5,7.5 ) ( 57.5,7.5 ) ( 47.5,2.5 ) ( 52.5,12.5 )    ( 47.5,7.5)(1,1)5 ( 57.5,7.5)(-1,1)5 ( 47.5,2.5)(1,2)5 ( 57.5,2.5)(-1,2)5 ( 47.5,2.5)(0,1)5 ( 57.5,2.5)(0,1)5 ( 47.5,2.5)(1,0)10 ( 47.5,7.5)(1,0)10 ( 47.5,2.5)(2,1)10 ( 47.5,7.5)(2,-1)10    ( 52.1,13.5)@xmath144 ( 58.7,8)@xmath106 ( 58.7,1)@xmath71 ( 45.5,1)@xmath145 ( 45.5,8)@xmath147    ( 52,-3)@xmath146    we show two strongly regular @xmath153-vertex graphs @xmath1 and @xmath2 .",
    "the parameters for @xmath1 are @xmath202 , @xmath195 , @xmath196 , and @xmath203 ; while for @xmath2 they are @xmath202 , @xmath204 , @xmath205 , and @xmath200 .",
    "it is clear that @xmath1 and @xmath2 are non - isomorphic since they contain an unequal number of edges and different degree sequences .",
    "the adjacency matrices @xmath21 and @xmath30 for @xmath1 and @xmath2 are , respectively , @xmath206 numerical simulation of the gi aqa dynamics finds a non - zero final ground - state energy @xmath207 and so the gi aqa correctly distinguishes @xmath1 and @xmath2 as non - isomorphic .",
    "+ in figure  [ fig8 ]    ( 90,20)(0,-5 ) ( 10,12.5 ) ( 10,2.5 ) ( 20,12.5 ) ( 20,2.5 ) ( 5,7.5 ) ( 25,7.5 )    ( 10,2.5)(1,1)10 ( 10,12.5)(1,-1)10 ( 10,2.5)(1,0)10 ( 10,12.5)(1,0)10 ( 5,7.5)(1,1)5 ( 5,7.5)(1,-1)5 ( 25,7.5)(-1,1)5 ( 25,7.5)(-1,-1)5 ( 5,7.5)(1,0)20    ( 8.5,13)@xmath144 ( 8.5,1)@xmath147 ( 20.7,13)@xmath106 ( 20.7,1)@xmath145 ( 25.7,8)@xmath71 ( 3.5,8)@xmath153 ( 14.5,-5 ) * *    ( 40.5,7.5 ) ( 38.3,7.3)@xmath145    ( 43.5,9.5 ) ( 43.8,9.8)@xmath147    ( 55.5,7.5 ) ( 56.2,8)@xmath106    ( 43.5,5.5 ) ( 44,4.2)@xmath153    ( 37.5,13.5 ) ( 36,14)@xmath144    ( 37.5,1.5 ) ( 35.5,1)@xmath71    ( 37.5,1.5)(1,2)3 ( 37.5,13.5)(1,-2)3 ( 37.5,1.5)(0,1)12 ( 40.5,7.5)(3,2)3 ( 40.5,7.5)(3,-2)3 ( 43.5,5.5)(0,1)4 ( 43.5,9.5)(-3,2)6 ( 43.5,5.5)(-3,-2)6 ( 55.5,7.5)(-6,1)12 ( 55.5,7.5)(-6,-1)12 ( 55.5,7.5)(-3,1)18 ( 55.5,7.5)(-3,-1)18    ( 44,-5)@xmath146    we show two strongly regular @xmath176-vertex graphs @xmath1 and @xmath2 .",
    "the parameters for @xmath1 are @xmath208 , @xmath198 , @xmath196 , and @xmath209 ; while for @xmath2 they are @xmath208 , @xmath204 , @xmath199 , and @xmath210 .",
    "it is clear that @xmath1 and @xmath2 are non - isomorphic since they contain an unequal number of edges and different degree sequences .",
    "the adjacency matrices @xmath21 and @xmath30 for @xmath1 and @xmath2 are , respectively , @xmath211 numerical simulation of the gi aqa dynamics finds a non - zero final ground - state energy @xmath207 and so the gi aqa correctly distinguishes @xmath1 and @xmath2 as non - isomorphic .",
    "as noted in the section  [ sec4 ] introduction , we can find the automorphism group @xmath143 of a graph @xmath1 using the gi aqa by considering a gi instance with @xmath141 . to the best of our knowledge",
    ", such an application of a gi algorithm is new . here",
    "the self - isomorphisms are permutations of the vertices of @xmath1 that map @xmath142 while preserving adjacency .",
    "since @xmath1 is always isomorphic to itself , the final ground - state energy will vanish : @xmath212 .",
    "the set of cbs @xmath111 that span the final ground - state subspace give rise to a set of binary strings @xmath61 that determine the integer strings @xmath213 ( see section  [ sec2b ] ) that then determine the permutations @xmath214 , @xmath215 which are all the elements of @xmath143 . by construction ,",
    "the order of @xmath143 is equal to the degeneracy of the final ground - state subspace . in this subsection",
    "we apply the gi aqa to the : ( i )  cycle graphs @xmath216 ; ( ii )  grid graph @xmath217 ; and ( iii )  wheel graph @xmath218 , and show that it correctly determines the automorphism group for all of these graphs .      a _ walk _",
    "@xmath219 in a graph is an alternating sequence of vertices and edges @xmath220 , @xmath221 , @xmath222 , @xmath223 , @xmath224 , @xmath225 , @xmath226 , where the edge @xmath227 connects @xmath228 and @xmath229 for @xmath230 .",
    "a walk @xmath219 is denoted by the sequence of vertices it traverses @xmath231 .",
    "finally , a walk @xmath232 is a _ cycle _ if @xmath233 ; @xmath234 ; and the vertices @xmath229 with @xmath235 are distinct from each other and @xmath220 . a cycle with @xmath8 vertices is denoted @xmath236 .",
    "the automorphism group of the cycle graph @xmath236 is the dihedral group @xmath237 .",
    "the order of @xmath237 is @xmath238 , and it is generated by the two elements @xmath239 and @xmath240 that satisfy the following relations , @xmath241 where @xmath242 is the identity element . because @xmath239 and @xmath240 are generators of @xmath237 , each element @xmath243 of @xmath237 can be written as a product of appropriate powers of @xmath239 and @xmath240 : @xmath244    we now use the gi aqa to find the automorphism group of the cycle graphs @xmath236 for @xmath245 .",
    "we will see that the gi aqa correctly determines @xmath246 for these graphs .",
    "we will work out @xmath247 in detail , and then give more abbreviated presentations for the remaining cycle graphs as their analysis is identical .",
    "+ : the cycle graph @xmath247 appears in figure  [ fig9 ] .",
    "( 30,17)(0,-1 ) ( 10,12.5 ) ( 10,2.5 ) ( 20,12.5 ) ( 20,2.5 )    ( 10,2.5)(0,1)10 ( 20,2.5)(0,1)10 ( 10,2.5)(1,0)10 ( 10,12.5)(1,0)10 ( 8.5,13)@xmath144 ( 8.5,1)@xmath145 ( 20.7,13)@xmath106 ( 20.7,1)@xmath71    ( 14.5,-1)@xmath248    it contains @xmath147 vertices and @xmath147 edges ; has degree sequence @xmath148 ; and adjacency matrix @xmath249    numerical simulation of the gi aqa applied to the gi instance with @xmath250 and @xmath141 found a vanishing final ground - state energy @xmath251 .",
    "the gi aqa thus correctly identifies @xmath247 as being isomorphic to itself .",
    "the simulation also found that the final ground - state subspace is @xmath252-fold degenerate .",
    "table  [ table1 ]    .[table1]automorphism group @xmath253 of the cycle graph @xmath247 as found by the gi aqa .",
    "the first row lists the integer strings @xmath254 determined by the labels of the eight cbs @xmath111 that span the final ground - state subspace ( see text ) .",
    "each string @xmath78 determines a graph automorphism @xmath214 via eq .",
    "( [ permdefsec4c ] ) .",
    "the second row associates each integer string @xmath78 in the first row with a graph automorphism @xmath214 .",
    "it identifies the two strings that give rise to the graph automorphisms @xmath239 and @xmath240 that generate @xmath253 , and writes each graph automorphism @xmath214 as a product of an appropriate power of @xmath239 and @xmath240 .",
    "note that @xmath242 is the identity automorphism , and the product notation assumes the rightmost factor acts first .",
    "+ [ cols=\"^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     lists the integer strings @xmath255 that result from the twelve cbs @xmath111 that span the final ground - state subspace ( see sections  [ sec2b ] and [ sec3 ] ) . each integer string @xmath78 fixes the bottom row of a permutation @xmath214 ( see eq .",
    "( [ permdefsec4c ] ) ) which is a graph automorphism of @xmath218 .",
    "the demonstration of this is identical to the demonstration given for @xmath247 and so will not be repeated here .",
    "just as for @xmath253 , the graph automorphisms in table  [ table6 ] are all the elements of @xmath256 which is seen to have order @xmath257 .",
    "note that this is the same as the order of the dihedral group @xmath258 .",
    "we now show that @xmath256 is isomorphic to the dihedral group @xmath258 by showing that the graph automorphisms @xmath259 and @xmath260 generate @xmath256 , and satisfy the generator relations ( eq .  ( [ dihedralrels ] ) ) for @xmath258 .",
    "the second and fourth rows of table  [ table6 ] establish that @xmath239 and @xmath240 are the generators of @xmath256 as they show that each element of @xmath256 is a product of an appropriate power of @xmath239 and @xmath240 , and that all possible products of powers of @xmath239 and @xmath240 appear in these two rows .",
    "following the discussion for @xmath247 , it is a simple matter to show that @xmath239 corresponds to a @xmath261 clockwise rotation about vertex @xmath176 of @xmath218 .",
    "thus @xmath176 applications of @xmath239 rotates @xmath218 by @xmath262 which leaves it invariant .",
    "thus @xmath263 which is the first of the generator relations in eq .  ( [ dihedralrels ] ) .",
    "similarly , @xmath240 can be shown to correspond to a reflection of @xmath218 about a vertical axis passing through vertex @xmath176 of @xmath218 .",
    "thus two applications of @xmath240 leave @xmath218 invariant .",
    "thus @xmath264 which is the second generator relation in eq .  ( [ dihedralrels ] ) . finally , using table  [ table6 ] , direct calculation as in eqs .",
    "( [ testrel1 ] ) and ( [ testrel2 ] ) shows that @xmath265 which establishes the final generator relation in eq .",
    "( [ dihedralrels ] ) .",
    "we see that @xmath239 and @xmath240 generate @xmath256 and satisfy the generator relations for @xmath258 and so generate a @xmath257 element group isomorphic to @xmath258 . in summary",
    ", we have shown that the gi aqa found all twelve graph automorphisms of @xmath218 , and that the group formed from these automorphisms is isomorphic to the dihedral group @xmath258 which is the correct automorphism group for @xmath218 .",
    "in this section we express the gi problem hamiltonian @xmath103 in a form more suitable for experimental implementation .",
    "we saw in section  [ sec2c ] that the eigenvalues of @xmath103 are given by the cost function @xmath79 which is reproduced here for convenience : @xmath266 with @xmath267 @xmath268 here @xmath65 is the integer string derived from the binary string @xmath269 via eqs .",
    "( [ parsestr ] ) and ( [ substr2int ] ) with @xmath270 .",
    "the matrix @xmath66 was defined in eq .",
    "( [ sigmatelm ] ) as @xmath271 note that @xmath272 can be written more compactly as @xmath273 we see from eqs .",
    "( [ costfuncdefv2])([c3def ] ) and ( [ bettersigmaij ] ) that the @xmath78-dependence of @xmath79 enters through the kronecker deltas .",
    "this type of @xmath78-dependence is not well - suited for experimental implementation and so our task is to find a more convenient form for the kronecker delta .",
    "we begin with @xmath274 in the case where @xmath275 . here",
    "we write @xmath276 which can be checked by inserting values for @xmath277 and @xmath278 . now consider @xmath279 when @xmath78 and @xmath131 are @xmath280-bit integers .",
    "the binary decompositions of @xmath78 and @xmath131 are @xmath281 for @xmath78 and @xmath131 to be equal , all their corresponding bits must be equal .",
    "thus we can write @xmath282    eq .",
    "( [ integerkron ] ) allows each kronecker delta appearing in @xmath79 to be converted to a polynomial in the components of the integer string @xmath78 . from eqs .",
    "( [ c1def ] ) and ( [ c2def ] ) we see that @xmath283 and @xmath284 are each @xmath285-local . for @xmath88",
    "we must write @xmath286 in a form that makes the kronecker deltas explicit . using eq .",
    "( [ bettersigmaij ] ) , we have @xmath287 inserting eq .",
    "( [ integerkron ] ) into eq .",
    "( [ sasmatelm ] ) , we see that @xmath288 is @xmath289-local . if we use the @xmath94-norm ( @xmath290-norm ) in eq .",
    "( [ c3def ] ) , then we see that @xmath88 is @xmath289-local ( @xmath291-local ) .",
    "the number of terms in @xmath79 , and thus in @xmath103 , follows straight - forwardly from eqs .",
    "( [ c1def])-([c3def ] ) . starting with @xmath283",
    ", there is a term for each value of @xmath14 and @xmath239 that appears in the sum .",
    "there are thus @xmath292 terms in @xmath283 . from eq .",
    "( [ mdef ] ) , @xmath293 , where @xmath294 and @xmath0 is the number of vertices in each graph appearing in the gi instance .",
    "it follows from the definition of @xmath280 that @xmath295 and so @xmath296 .",
    "recall from section  [ sec3 ] that the number of qubits @xmath297 needed for an @xmath0-vertex gi instance is @xmath298 .",
    "thus @xmath299 , where @xmath300 is an appropriate constant .",
    "thus @xmath301 .",
    "a similar analysis shows that the number of terms in @xmath284 is @xmath302 .",
    "finally , @xmath88 is the @xmath92-norm of an @xmath22 matrix . for the @xmath94-norm used in our simulations ,",
    "the number of terms in @xmath88 is @xmath303 . following the above analysis",
    ", this gives @xmath304 .",
    "putting everything together gives that the total number of terms associated with @xmath79 , and so also @xmath103 , is @xmath305 .",
    "the initial hamiltonian @xmath105 contains one term for each qubit ( see eq .",
    "( [ hidef ] ) ) and so the number of terms in @xmath105 is @xmath297 .",
    "thus the total number of terms in the full time - dependent hamiltonian h(t ) is @xmath306 and so scales quadratically with the number of qubits @xmath297 .",
    "clearly , the degree of difficulty associated with experimentally implementing a quantum algorithm depends strongly on the architecture of the hardware on which it is to be run .",
    "the simplest situation would be an architecture which allows an arbitrary number of qubits to be simultaneously coupled , independently of where they were located on the processor .",
    "unfortunately , such a hardware architecture does not presently exist . for hardware platforms designed to run adiabatic quantum optimization algorithms ,",
    "the d - wave hardware is furthest along @xcite .",
    "each qubit on the d - wave processor couples to at most six neighboring qubits , and only two - qubit ising coupling interactions are possible .",
    "the initial hamiltonian @xmath105 ( see eq .",
    "( [ hidef ] ) ) is easily programmed onto the hardware . however ,",
    "a problem hamiltonian @xmath103 which is not of ising form is more challenging , requiring an embedding procedure that : ( i )  reduces all @xmath131-local interactions with @xmath307 to @xmath71-local form ; and ( ii )  two - qubit coupling interactions that match the hardware s chimera coupling - graph . a procedure for carrying out this reduction based on ref .",
    "@xcite is described in appendix  [ appendixembed ] .",
    "alternative approaches appear in refs .",
    "@xcite and @xcite .",
    "an instance of the subgraph isomorphism ( sgi ) problem consists of an @xmath0-vertex graph @xmath1 and an @xmath8-vertex graph @xmath308 with @xmath309 .",
    "the question to be answered is whether @xmath1 contains an @xmath8-vertex subgraph that is isomorphic to @xmath308 .",
    "the sgi problem is known to be np - complete and is believed to be more difficult to solve than the gi problem . here",
    "we show how an instance of sgi can be converted into an instance of a cop whose cost function has a minimum value that vanishes when @xmath1 contains a subgraph isomorphic to @xmath308 , and is greater than zero otherwise .",
    "the sgi cost function will be seen to be a natural generalization of the gi cost function given in eqs .",
    "( [ costfuncdef])([c3defv0 ] ) .",
    "the sgi cop can then be solved using adiabatic quantum evolution as was done for the gi problem .    as with the gi problem",
    ", we would like to determine whether there exists an isomorphism @xmath26 of @xmath1 that produces a new graph @xmath310 that contains @xmath308 as a subgraph .",
    "just as with the gi problem , we consider linear maps @xmath66 ( see eqs .",
    "( [ parsestr])([sigmatelm ] ) ) that transform the adjacency matrix @xmath21 of @xmath1 to @xmath311 .",
    "we then search @xmath310 to determine whether there is a subset of @xmath8 vertices that yields a subgraph that is equal to @xmath308 .    to begin the process of converting an sgi instance into an instance of a cop ,",
    "let : ( i )  @xmath239 label all the @xmath312 ways of choosing @xmath8 vertices from the @xmath0 vertices in @xmath310 ; and ( ii )  @xmath313 ( @xmath314 ) be an @xmath8-component ( @xmath0-component ) vector whose @xmath14-th ( @xmath315-th ) component is @xmath106 , and all other components are @xmath144 .",
    "thus @xmath239 labels the choice @xmath316 of @xmath8 vertices out of the @xmath0 vertices of @xmath310 .",
    "we now show that an @xmath317 matrix @xmath318 can be used to form an @xmath319 matrix @xmath320 whose matrix elements are the matrix elements of @xmath321 associated with the @xmath8 vertices appearing in @xmath239 . to that purpose ,",
    "define @xmath322 @xmath323 where @xmath324 it follows from these definitions that @xmath325 thus the matrix elements @xmath326 are precisely the matrix elements @xmath327 associated with all possible pairs of vertices drawn from @xmath328 .",
    "the matrix @xmath320 is thus the adjacency matrix for the subgraph @xmath329 composed of the vertices appearing in @xmath239 , along with all the edges in @xmath310 that join them . with @xmath320",
    ", we can , as in the gi problem , test whether @xmath329 is equal to @xmath308 by checking whether @xmath330 vanishes or not .",
    "here @xmath30 is the adjacency matrix of the graph @xmath308 , and @xmath331 is the @xmath92-norm of @xmath332 .",
    "we can now define a cost function whose minimum value vanishes if and only if @xmath1 contains a subgraph @xmath243 that is isomorphic to @xmath308 . because the transformation @xmath66 must be a permutation matrix when @xmath243 is isomorphic to @xmath308 , we again introduce the penalty functions @xmath283 and @xmath284 used in the gi cop to penalize those integer strings @xmath78 that produce a @xmath66 that is not a permutation matrix : @xmath333 the final penalty function @xmath88 for the sgi problem generalizes the one used in the gi problem .",
    "it is defined to be @xmath334 where the product is over all @xmath312 ways of choosing @xmath8 vertices out of @xmath0 vertices .",
    "note that @xmath88 vanishes if and only if @xmath1 contains an @xmath8-vertex subgraph isomorphic to @xmath308 .",
    "this follows since , if @xmath1 contains an @xmath8-vertex subgraph @xmath243 isomorphic to @xmath308 , there exists a permutation @xmath214 of @xmath1 that has an @xmath8-vertex subgraph that is equal to @xmath308 .",
    "thus , for this @xmath78 , there is a choice @xmath239 of @xmath8 vertices that gives a subgraph for which @xmath335 .",
    "it follows from eq .",
    "( [ c3defv2 ] ) that @xmath95 . on the other hand ,",
    "if @xmath336 , it follows that at least one of the factor on the rhs of eq .",
    "( [ c3defv2 ] ) vanishes .",
    "thus there is a choice @xmath239 of @xmath8 vertices for which @xmath337 .",
    "thus @xmath338 , and so @xmath1 has a subgraph isomorphic to @xmath308 .",
    "the cost function for the sgi problem is now defined to be @xmath339 where @xmath283 , @xmath284 , and @xmath88 are defined in eqs .",
    "( [ c1defv2])([c3defv2 ] ) .",
    "this gives rise to the following cop :    subgraph isomorphism cop : : :    given an @xmath0-vertex graph @xmath1 and an    @xmath8-vertex graph @xmath308 with    @xmath309 , and the associated cost function    @xmath79 defined in eq .",
    "( [ costfuncv2 ] ) , find an integer    string @xmath98 that minimizes @xmath79 .    by construction : ( i )  @xmath99 if and only if @xmath1 contains a subgraph isomorphic to @xmath308 , and @xmath100 is the permutation matrix that transforms @xmath1 into a graph @xmath310 that has @xmath308 as a subgraph ; and ( ii )  @xmath101 otherwise .    as with the gi cop , the sgi cop can be solved using adiabatic quantum evolution .",
    "the quantum algorithm for sgi begins by preparing the @xmath340 qubit register in the ground - state of @xmath105 ( see eq .",
    "( [ hidef ] ) ) and then driving the qubit register dynamics using the time - dependent hamiltonian @xmath341 . here",
    "the problem hamiltonian @xmath103 is defined to be diagonal in the computational basis @xmath111 and to have associated eigenvalues @xmath79 , where @xmath78 is found from @xmath61 according to eqs .",
    "( [ parsestr])([substr2int ] ) . at the end of the evolution",
    "the qubits are measured in the computational basis .",
    "the outcome is the bit string @xmath121 so that the final state of the register is @xmath122 and its energy is @xmath123 , where @xmath124 is the integer string derived from @xmath121 . in the adiabatic limit",
    ", @xmath123 will be the ground - state energy , and if @xmath125 ( @xmath126 ) the algorithm concludes that @xmath1 contains ( does not contain ) a subgraph isomorphic to @xmath308 . in the case where @xmath1 does contain a subgraph isomorphic to @xmath308",
    ", the algorithm also returns the permutation @xmath342 that converts @xmath1 to the graph @xmath343 that contains @xmath308 as a subgraph .",
    "note that any real application of aqo will only be approximately adiabatic .",
    "thus the probability that the final energy @xmath123 will be the ground - state energy will be @xmath127 .",
    "in this case the sgi quantum algorithm must be run @xmath344 times so that , with probability @xmath345 , at least one of the measurements will return the ground - state energy .",
    "we can make @xmath130 arbitrarily close to @xmath106 by choosing @xmath131 sufficiently large .",
    "in this paper we have presented a quantum algorithm that solves arbitrary instances of the graph isomorphism problem and which provides a novel approach for finding the automorphism group of a graph .",
    "we numerically simulated the algorithm s quantum dynamics and showed that it correctly : ( i )  distinguished non - isomorphic graphs ; ( ii )  recognized isomorphic graphs ; and ( iii )  determined the automorphism group of a given graph .",
    "we also discussed the quantum algorithm s experimental implementation , and showed how it can be generalized to give a quantum algorithm that solves arbitrary instances of the np - complete subgraph isomorphism problem .",
    "as explained in appendix  [ appendixqat ] , the minimum energy gap for an adiabatic quantum algorithm largely determines the algorithm s computational complexity . determining this gap in the limit of large problem size is currently an important open problem in adiabatic quantum computing ( see section  [ sec4 ] ) .",
    "it is thus not possible to determine the computational complexity of adiabatic quantum algorithms in general , nor , consequently , of the specific adiabatic quantum algorithms presented in this paper .",
    "adiabatic quantum computing has been shown to be equivalent to the circuit - model of quantum computing @xcite , and so development of adiabatic quantum algorithms continues to be of great interest .",
    "we thank w. g. macready and d. dahl for many interesting discussions , and f. g. thanks t. howell iii for continued support .",
    "the question of how the state of a physical system changes when the system s environment undergoes a slow variation is an old one . for quantum systems ,",
    "the answer is contained in the quantum adiabatic theorem which was proved by born and fock not long after the birth of quantum mechanics @xcite .",
    "subsequent work relaxed a number of the assumptions underlying the original proof @xcite , thereby widening the theorem s range of validity .",
    "as the physical setting for the quantum adiabatic theorem occurs often , it forms the foundation for many important applications in atomic , molecular , and chemical physics .",
    "recently , it has been used as the basis for a novel alternative approach to quantum computing known as adiabatic quantum computing @xcite . in this appendix",
    "we provide a brief review of the quantum adiabatic theorem ( appendix  [ appa1 ] ) and then describe how it is used in adiabatic quantum computing ( appendix  [ appa2 ] ) .",
    "consider a quantum system coupled to an environment that changes slowly over a time @xmath109 .",
    "the dynamical evolution of its state @xmath346 is determined by the schrodinger equation , which will be driven by a slowly - varying hamiltonian @xmath107 .",
    "the system s hilbert space is assumed to be finite - dimensional with dimension @xmath347 .",
    "thus at each instant @xmath12 there will be @xmath347 instantaneous energy eigenstates @xmath348 satisfying @xmath349 with @xmath350 .",
    "now suppose that we initially prepare the quantum system in the instantaneous energy eigenstate @xmath351 of the initial hamiltonian @xmath352 .",
    "the quantum adiabatic theorem states that , in the limit @xmath110 , the final state @xmath353 will be ( to within a phase factor ) the instantaneous energy eigenstate @xmath354 of the final hamiltonian @xmath355 .",
    "note that in our discussions of adiabatic quantum computing , the initial state will always be the ground state of @xmath352 : @xmath356 , separating the two lowest instantaneous energy - levels proves to be extremely important in adiabatic quantum computing .",
    "although it is possible to prove the quantum adiabatic theorem for systems with a vanishing energy gap @xcite , the rate of convergence to the adiabatic limit can be arbitrarily slow .",
    "on the other hand , when the gap @xmath357 is non - vanishing for @xmath358 , it is possible to estimate how large @xmath109 must be for the dynamics to be effectively adiabatic .",
    "starting from the observation that for adiabatic dynamics there will be negligible probability to find the quantum system at @xmath359 in an energy - level other than the ground state , a straightforward analysis @xcite leads to the following adiabaticity constraint : @xmath360 where @xmath361 , \\label{mingapdef}\\end{aligned}\\ ] ] @xmath362 , and @xmath363 .",
    "the quantity @xmath364 is the minimum energy gap arising during the adiabatic evolution .",
    "the quantum adiabatic theorem provides a mechanism for traversing a path @xmath346 through hilbert space that begins at a given state @xmath365 and ends at a desired final state @xmath366 . to see this ,",
    "let @xmath105 and @xmath367 be local hermitian operators whose ground states are @xmath365 and @xmath366 , respectively .",
    "an hermitian operator is local if it couples at most @xmath131 particles , with @xmath131 finite .",
    "suppose that we can apply a time - dependent hamiltonian @xmath107 over a time - interval @xmath368 , with @xmath369 , and @xmath370 .",
    "suppose further that we prepare our quantum system in the ground state @xmath371 of @xmath105 , and then apply @xmath107 to it .",
    "in the limit @xmath372 , the quantum adiabatic theorem guarantees that the system at time @xmath109 will be in the desired state @xmath366 .",
    "the outcome is thus a continuous path from @xmath365 to @xmath366 .      to connect this discussion to quantum computing ,",
    "imagine that there is a computational problem we would like to solve , and that we are able to construct a local hamiltonian @xmath367 whose ground state @xmath373 encodes the solution to our problem .",
    "often , the computational basis states can be chosen to be the eigenstates of @xmath103 .",
    "our gi problem hamiltonian @xmath103 is an example of such a hamiltonian ( see section  [ sec3 ] ) .",
    "let @xmath105 be a local hamiltonian operator whose ground state @xmath365 is easy to prepare ( e.  g.  see eq .",
    "( [ hidef ] ) ) . in adiabatic quantum computing , the procedure presented in the preceding paragraph is applied with latexmath:[$|\\psi ( 0)\\rangle =     @xmath105 to @xmath367 ( in the space of hermitian operators ) .",
    "originally , ref .",
    "@xcite chose @xmath107 to linearly interpolate from @xmath105 to @xmath367 : @xmath375 writing @xmath362 and @xmath363 gives @xmath376 more general interpolation schemes are possible : @xmath377 , where we require @xmath378 ( @xmath379 ) and @xmath380 ( @xmath381 ) .",
    "see , for example , refs .  .",
    "by choosing @xmath109 sufficiently large , the final state @xmath382 can be brought arbitrarily close to @xmath366 .",
    "an appropriate measurement then yields @xmath383 with probability close to @xmath106 , and thus yields the desired solution to our computational problem .",
    "adiabatic quantum computing thus finds the solution to a computational problem by homing in on the ground state @xmath366 of @xmath367 which encodes the solution .",
    "the homing mechanism is provided by the quantum adiabatic theorem .",
    "it has been shown that adiabatic quantum computing has the same computational power as the circuit model for quantum computing @xcite .",
    "it thus provides an important alternative approach to quantum computing that is especially well suited to problems that reduce to quantum state generation .",
    "we are now in a position to state the protocol for the adiabatic quantum evolution ( aqe ) algorithm @xcite :    1 .",
    "prepare an @xmath8-qubit quantum register in the ground state @xmath371 of @xmath105 .",
    "2 .   at @xmath384 , apply @xmath107 to the quantum register for a time @xmath109 .",
    "3 .   at time @xmath359 ,",
    "measure the qubits in the computational basis .",
    "because the computational basis states are typically the eigenstates of @xmath367 , the final measurement leaves the qubits in an eigenstate of @xmath367 . in the adiabatic limit @xmath110 , the final measurement leaves the qubits in the ground - state of @xmath367 ( which encodes the solution we are trying to find ) with probability @xmath385 .",
    "now for large , but finite @xmath109 , the schrodinger dynamics is approximately adiabatic .",
    "thus , with probability @xmath127 , the measurement returns the problem solution . in this case the aqe algorithm must be run more than once .",
    "suppose we run it @xmath386 times .",
    "the probability that we do _ not _ get the problem solution in _ any _ of the @xmath386 runs is @xmath387 .",
    "we can make this probability take an arbitrarily small value @xmath388 by choosing @xmath389 .",
    "thus with probability arbitrarily close to @xmath106 , one of the @xmath386 measurement results will yield the problem solution .    the adiabaticity constraint",
    "( see eq .",
    "( [ adcon ] ) ) specifies a lower bound which the runtime @xmath109 must exceed if the schrodinger dynamics is to be effectively adiabatic . in all applications of interest to date , the matrix element @xmath93 appearing in this",
    "constraint scales polynomially with problem size @xmath0 .",
    "so long as this is true , eq .",
    "( [ adcon ] ) indicates that the scaling behavior of the runtime @xmath13 is determined by the scaling behavior of the minimum gap @xmath4 .",
    "now , if at @xmath384 the quantum register is prepared in the ground state of the initial hamiltonian @xmath352 , and its dynamics is effectively adiabatic , its state at later times will be effectively restricted to the subspace spanned by the instantaneous ground and first excited states .",
    "standard arguments @xcite indicate that , in the absence of symmetry , these two energy - levels will typically not cross .",
    "thus the minimum gap @xmath4 will typically not vanish , and eq .  ( [ adcon ] ) indicates that an effectively adiabatic dynamics can be obtained with finite @xmath13 . an algorithm , classical or quantum , is said to efficiently ( inefficiently ) solve a computational problem if its runtime scales polynomially ( super - polynomially ) with problem size . thus",
    ", if @xmath4 scales inverse polynomially ( super - polynomially ) with @xmath0 , then @xmath13 will scale polynomially ( super - polynomially ) with @xmath0 , and the aqe algorithm will be an efficient ( inefficient ) algorithm .",
    "we see that the scaling behavior of the minimum gap @xmath4 largely controls the computational complexity of the aqe algorithm .",
    "this appendix briefly describes the embedding procedure used in ref .",
    "@xcite to program a non - ising problem hamiltonian @xmath103 onto a d - wave one processor .",
    "the processor architecture is shown in fig .",
    "[ qubitfig ] .",
    "array of unit cells , with each unit cell containing 8 qubits . within a unit cell ,",
    "each of the @xmath147 qubits in the left - hand partition ( lhp ) connects to all @xmath147 qubits in the right - hand partition ( rhp ) , and vice versa .",
    "a qubit in the lhp ( rhp ) of a unit cell also connects to the corresponding qubit in the lhp ( rhp ) in the units cells above and below ( to the left and right of ) it .",
    "most qubits couple to 6 neighbors .",
    "qubits are labeled from 1 to 128 , and edges between qubits indicate couplers which may take programmable values .",
    "grey qubits indicate usable qubits , while white qubits indicate qubits which , due to fabrication defects , could not be calibrated to operating tolerances and were not used .",
    ", width=264 ]      as discussed in section  [ sec3 ] , the gi algorithm presented in this paper constructs @xmath103 to : ( i )  be diagonal in the computational basis @xmath390 ; and ( ii )  have eigenvalues @xmath391 , where @xmath392 , @xmath104 is the number of qubits , and @xmath391 is given by eqs .",
    "( [ costfuncdefv2])-([c3def ] ) with @xmath393 .",
    "the cost function @xmath391 is not yet ready for experimental implementation for two reasons .",
    "first , there are @xmath131-qubit interactions with @xmath394 which can not be implemented as the processor can only couple pairs of qubits ; and second , two - qubit couplings may not correspond to available couplings on the processor ( see fig .  [ qubitfig ] ) .",
    "procedures for removing each of these obstacles are presented , respectively , in appendices  [ appendixb1 ] and [ appendixb2 ] .",
    "we summarize these procedures in appendix  [ appendixb3 ] . to keep the discussion concrete",
    ", we examine a single @xmath131-qubit coupling term @xmath395 with @xmath396 .",
    "the resulting procedure must then be applied to each term in @xmath391 .",
    "+      here we describe how to reduce a @xmath131-qubit coupling term @xmath397 with @xmath396 to a sum of @xmath71-qubit ( viz .",
    "pairwise ) coupling terms .",
    "we first show how to reduce a @xmath145-qubit coupling term to pairwise coupling terms ( appendix  [ appendixb11 ] ) , and then use lessons learned to reduce the @xmath131-qubit term @xmath21 to pairwise coupling ( appendix  [ appendixb12 ] ) .",
    "we begin by showing how to reduce a @xmath145-qubit coupling term @xmath398 to pairwise coupling by introducing : ( i )  an ancillary variable @xmath278 which takes only two values @xmath399 ; and ( ii )  the penalty function @xmath400 notice that @xmath401 ( @xmath402 ) when the input values for @xmath403 , @xmath404 , and @xmath278 satisfy @xmath405 ( @xmath406 ) .",
    "now consider the quadratic cost function @xmath407 for given values of @xmath186 , @xmath403 , and @xmath404 .",
    "for @xmath186 sufficiently large , @xmath408 is minimized when the value of @xmath278 satisfies the equality constraint @xmath409 . as noted above , for this optimal value of @xmath278 , the penalty function @xmath410 , and",
    "so the optimum cost @xmath411 is @xmath412 where @xmath413 has been used in going from the first to the second line .",
    "thus , for values of @xmath278 satisfying the equality constraint @xmath414 , the cost function @xmath408 , which is a sum of @xmath71-qubit coupling terms , reproduces the @xmath145-qubit coupling term @xmath398 . by choosing @xmath186 sufficiently large , values of @xmath278 that do not satisfy the equality constraint can be pushed to large cost ( viz .",
    "energy ) , making such @xmath278 values inaccessible during adiabatic quantum evolution .      to reduce the @xmath131-qubit coupling term @xmath395 to pairwise coupling",
    "we : ( i )  introduce ancillary bit variables @xmath415 ; and ( ii )  impose the constraints @xmath416 and @xmath417 ( @xmath418 ) through the penalty function @xmath419 where @xmath420 , @xmath421 and @xmath422 is defined in eq .",
    "( [ penfunceq ] ) .",
    "the quadratic cost function @xmath423 is defined to be @xmath424 we require that the optimal values @xmath425 satisfy the @xmath426 imposed constraints so that @xmath427 . for optimal values , the cost function evaluates to @xmath428 where ( in the interests of clarity ) we have introduced the constraints one at a time in going from one line to the next . here",
    "@xmath186 is a penalty weight whose value is chosen large enough to freeze out non - optimal values of @xmath429 and @xmath430 during adiabatic quantum evolution .",
    "thus , for values of @xmath429 and @xmath430 satisfying the @xmath426 equality constraints , and for @xmath186 sufficiently large , the cost function @xmath423 , which is a sum of @xmath71-qubit coupling terms , reproduces the @xmath131-qubit coupling term @xmath395 as desired .",
    "a cost function with only pairwise coupling such as results from the procedure described in appendix  [ appendixb1 ] may still not be experimentally realizable on a d - wave processor as the pairwise couplings arising in @xmath423 may not match the two - qubit couplings available on the processor .",
    "the primal graph of a quadratic cost function such as @xmath423 is the graph whose vertices are the qubit variables , and whose edges indicate pairwise - coupled qubits",
    ". an arbitrary primal graph can be embedded into a sufficiently large qubit graph having the structure of fig .",
    "[ qubitfig ] . an embedding maps a primal graph vertex to one or more vertices in the qubit graph , where the image vertices",
    "form a connected subgraph of the qubit graph .",
    "the string of connected qubits are linked together with strong ferromagnetic couplings so that in the lowest energy state , these qubits have identical bloch vectors . for example , to couple qubits 104 and 75 in fig .",
    "[ qubitfig ] ( which are not directly coupled ) with coupling strength @xmath431 , we ferromagnetically couple qubits 104 , 112 , and 107 using strongly negative @xmath432 and @xmath433 values .",
    "qubits 107 and 75 are directly coupled by the processor and so the desired coupling @xmath431 is applied to the edge ( viz .",
    "coupler @xmath434 ) connecting qubits 107 and 75 : @xmath435 .",
    "the ferromagnetic chain thus effects the desired coupling of qubits 104 and 75 .",
    "this embedding procedure must be carried out for each pair of primal graph vertices joined by an edge whose associated qubits are not directly coupled in the processor architecture .      by combining the procedures described in this appendix it is possible to transform any cost function @xmath391 into a quadratic cost function with pairwise couplings that matches the couplings specified by the processor architecture .",
    "the trade - off is the introduction of ancilla qubits that are needed to reduce the coupling interactions to pairwise coupling and to match the @xmath71-qubit couplings available on the processor .",
    "d. aharonov , w. van dam , j. kempe , z. landau , s. lloyd , and o. regev , _",
    "45th annual ieee symposium on foundations of computer science ( focs04 ) _ , edited by e.  upfal ( ieee , los alamitos , ca , 2004 ) , p.  42 .",
    "friedrichs , k. o. , 1953 , _ special topics in quantum theory _ , lecture notes , courant institute of mathematical science , new york university ; 1955 , _ on the adiabatic theorem in quantum theory ,",
    "part  i _ , courant institute of mathematical sciences , new york university ; 1956 , _ on the adiabatic theorem in quantum theory , part  ii _ , courant institute of mathematical science , new york university ."
  ],
  "abstract_text": [
    "<S> in the graph isomorphism ( gi ) problem two @xmath0-vertex graphs @xmath1 and @xmath2 are given and the task is to determine whether there exists a permutation of the vertices of @xmath1 that preserves adjacency and transforms @xmath3 . if yes , then @xmath1 and @xmath2 are said to be isomorphic ; otherwise they are non - isomorphic . </S>",
    "<S> the gi problem is an important problem in computer science and is thought to be of comparable difficulty to integer factorization . in this paper </S>",
    "<S> we present a quantum algorithm that solves arbitrary instances of gi and which also provides a novel approach to determining all automorphisms of a given graph . </S>",
    "<S> we show how the gi problem can be converted to a combinatorial optimization problem that can be solved using adiabatic quantum evolution . </S>",
    "<S> we numerically simulate the algorithm s quantum dynamics and show that it correctly : ( i ) distinguishes non - isomorphic graphs ; ( ii ) recognizes isomorphic graphs and determines the permutation(s ) that connect them ; and ( iii ) finds the automorphism group of a given graph @xmath1 . </S>",
    "<S> we then discuss the gi quantum algorithm s experimental implementation , and close by showing how it can be leveraged to give a quantum algorithm that solves arbitrary instances of the np - complete sub - graph isomorphism problem . </S>",
    "<S> the computational complexity of an adiabatic quantum algorithm is largely determined by the minimum energy gap @xmath4 separating the ground- and first - excited states in the limit of large problem size @xmath5 . </S>",
    "<S> calculating @xmath4 in this limit is a fundamental open problem in adiabatic quantum computing , and so it is not possible to determine the computational complexity of adiabatic quantum algorithms in general , nor consequently , of the specific adiabatic quantum algorithms presented here . </S>",
    "<S> adiabatic quantum computing has been shown to be equivalent to the circuit - model of quantum computing , and so development of adiabatic quantum algorithms continues to be of great interest . </S>"
  ]
}