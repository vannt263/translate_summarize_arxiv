{
  "article_text": [
    "multimedia interaction systems inherently concurrent can be modeled using concurrent process calculi .",
    "process calculi are useful to describe formally the behavior of concurrent systems , and to prove properties about the systems .",
    "process calculi has been applied to the modeling of spatially - explicit ecological systems @xcite and interactive multimedia systems @xcite .",
    "for instance , using ` ntcc ` @xcite , we can model reactive systems with synchronous , asynchronous and/or non - deterministic behavior . `",
    "ntcc ` and extensions have been used to model interactive systems such as : an audio processing framework @xcite , machine improvisation @xcite , @xcite , @xcite , and interactive scores @xcite , @xcite . although there are three interpreters for ` ntcc ` , they are not suitable for real - time ( rt ) interaction .",
    "it means that they are not able to interact with the user without letting him experience noticeable delays in the interaction . on the other hand",
    ", we can program rt systems for multimedia interaction and signal processing using c++ .",
    "unfortunately , using c++ requires long development time . to overcome that problem , programming languages such as pu - re data ( pd ) @xcite and max / msp @xcite , provide a graphical interface to program rt systems and several apis for concurrent programming .",
    "although pd and max support concurrency , it is a hard task to trigger or halt the execution of a process based on multiple criteria . using pd or max",
    ", it is hard to express : `` process @xmath0 is going to do an action @xmath1 until a condition @xmath2 is satisfied '' , when condition @xmath2 is a complex condition resulting from many other processes actions .",
    "such condition would be hard to express ( and even harder to modify afterwards ) using the graphical patch paradigm .",
    "for instance , condition @xmath2 can be a conjunction of these criteria : ( 1 ) the user has played on a certain tonality , ( 2 ) has played the chord g7 , and ( 3 ) played the note f # among the last four .",
    "using ` ntcc ` , we can represent the complex condition @xmath2 presented above as the conjunction of constraints ( @xmath3 ) .",
    "each constraint ( i.e. , mathematical condition ) represents a criterion .",
    "in addition , each criterion can be represented declaratively .",
    "for instance , the criterion ( 2 ) can be represented by the constraint `` g7 is on the set of played chords '' ( @xmath4 ) .",
    "for that reason , we propose using ` ntcc ` to manage concurrency in pd and max , executing ` ntcc ` models on + _ _ ntccrt__. on _ ntccrt _ , ` ntcc ` models can be automatically compiled as an _ external _ ( i.e. , a binary plugin ) for pd or max .    additionally , the externals can be specified textually using common lisp or graphically using openmusic @xcite .",
    "we argue that concurrent visual programming , usually based on process calculi ( such as cordial @xcite ) , makes the power of concurrency available for a wider range of users .      our framework _ ntccrt _ ( http://ntccrt.sourceforge.net ) is composed by the following components . the ` ntcc ` interpreter written in c++ and interfaces for both common lisp and openmusic .",
    "in addition , we provide the implementation of two real - life applications .",
    "the remainder of this paper is structured as follows .",
    "section 2 intuitively explains the semantic of ` ntcc ` agents and gives some examples of simple ` ntcc ` processes modeling multimedia interaction .",
    "section 3 explains related work on ` ntcc ` interpreters and threading apis available for pd and max .",
    "section 4 discusses two applications of _ ntccrt _ to model a multimedia interaction and a signal processing system .",
    "section 5 explains our results .",
    "finally , section 6 gives concluding remarks and proposes future works .",
    "a family of process calculi is concurrent constraint programming ( ccp ) @xcite , where a system is modeled in terms of variables and constraints over some variables . furthermore , there are agents reasoning about partial information ( by the means of constraints ) about the system variables contained on a common _",
    "store_.    ccp is based on the idea of a _ constraint system_. a constraint system includes a set of ( basic ) constraints and a relation ( i.e. , entailment relation @xmath5 ) to deduce a constraint based on the information supplied by other constraints .",
    "a ccp system usually includes several constraint systems for different variable types .",
    "there are constraint systems for different variable types such as sets , trees , graphs and natural numbers .",
    "a constraint system providing arithmetic relations over natural numbers is known as finite domain ( fd ) .",
    "for instance , using a fd constraint system we can deduce the constraint @xmath6 from the constraints @xmath7 and @xmath8 .    although we can choose an appropriate constraint system to model any problem , in ccp it is not possible to delete nor change information accumulated in the store .",
    "for that reason , it is difficult to perceive a notion of discrete time , useful to model reactive systems ( e.g. , machine improvisation ) communicating with an environment .    `",
    "ntcc ` introduces to ccp the notion of discrete time as a sequence of _ time - units_. each time - unit starts with a _ store _ ( possibly empty ) supplied by the environment , then ` ntcc ` executes all processes scheduled for that time - unit .",
    "in contrast to ccp , in ` ntcc ` , variables changing values along time can be modeled explicitly . in ` ntcc ` , we can have a variable @xmath9 taking different values on each time - unit .",
    "to model that in ccp , we would have to create a new variable @xmath10 each time we change the value of @xmath9 .",
    "for instance , a system that plays sequentially the notes of the c major chord can be modeled in ` ntcc ` as `` in the first time - unit , let @xmath11 ; in the second time - unit , let @xmath12 ; and in the third time - unit , let @xmath13 '' . using ccp , we would represent it as `` let @xmath14 , let @xmath15 , and let @xmath16 '' .",
    "following , we give some examples of how the computational agents of ` ntcc ` can be used with a fd constraint system .",
    "a summary can be found in table [ tab : ntccagents ] .    using",
    "the `` tell '' , it is possible to add constraints such as @xmath17 , meaning that @xmath18 must be equal to 60 or @xmath19 , meaning that @xmath20 is an integer between 60 and 100 .",
    "the `` when '' can be used to describe how the system reacts to different events . for instance , @xmath21 @xmath22 @xmath23 @xmath24 is a process reacting as soon as the pitch sequence c , e , g has been played , adding the constraint @xmath25 to the store in the current time - unit .",
    ".`ntcc ` agents [ cols=\"<,<\",options=\"header \" , ]     parallel composition allows us to represent concurrent processes .",
    "for instance , @xmath26 @xmath27 @xmath28 @xmath21 @xmath29 @xmath23 @xmath26 @xmath30 is a process telling the store that @xmath18 is 62 and concurrently assigning the instrument to one , since @xmath18 is in first octave .",
    "the `` next '' is useful when we want to model variables changing through time .",
    "for instance , @xmath31 @xmath32 @xmath23 @xmath33 @xmath26 @xmath34 , means that if @xmath18 is equal to 60 in the current time - unit , it will be different from 60 in the next time - unit .",
    "the `` unless '' is useful to model systems reacting when a condition is not satisfied or it can not be deduced from the store .",
    "for instance , @xmath35 @xmath32 @xmath33 @xmath26 @xmath36 reacts when @xmath37 is false or when @xmath37 can not be deduced from the store ( e.g. , @xmath18 was not played in the current time - unit ) , telling the store in the next time - unit that @xmath38 is not 60 .",
    "the `` star '' ( * * * ) may be used to delay the end of a process indefinitely , but not forever .",
    "for instance , @xmath39 @xmath40 .",
    "the `` bang '' ( @xmath41 ) executes a certain process in every @xmath42-@xmath43 after its execution .",
    "for instance , @xmath41@xmath26 @xmath44 .",
    "the * @xmath45 * is used to model non - deterministic choices .",
    "for instance , @xmath41 @xmath46 * when * @xmath47 * do * @xmath26 + @xmath48 models a system where each time - unit , it chooses a note among the notes played previously that belongs to the c major chord .",
    "finally , a basic recursion can be defined in ` ntcc ` with the form @xmath49 , where @xmath50 is the process name and @xmath51 is restricted to call @xmath50 at most once and such call must be within the scope of a `` next '' .",
    "the reason of using `` next '' is that ` ntcc ` does not allow recursion within a time - unit .",
    "recursion is used to model iteration and recursive definitions .",
    "for instance , using this basic recursion , it is possible to write a function to compute the factorial function .",
    "in this section , we present related work about concurrency support for pd and max , and available ` ntcc ` interpreters .      to program concurrent applications on max and pd",
    ", we can use their message passing apis .",
    "we can also create externals in c++ .",
    "in fact , we can use any existing threading api for c++ to write externals for both , pd and max .",
    "there is also a native api for max 5 sdk .",
    "another way to write an external is using the flext library .",
    "flext provides a unique interface to write , in the c++ language , externals dealing with both , pd and max .",
    "there are three interpreters available for ` ntcc ` : lman @xcite used as a framework to program lego@xmath52 robots , ntccsim @xcite used to model and verify properties of biological systems , and rueda s interpreter @xcite for multimedia interaction .    the first attempt to execute a multimedia interaction + ` ntcc ` model",
    "was made by the authors of lman in 2003 .",
    "they ran a ` ntcc ` model to play a sequence of pitches with fixed durations in lman . recently , in 2006 , rueda et al .",
    "ran `` a concurrent constraint factor oracle model for music improvisation '' ( @xmath53 ) on rueda s interpreter @xcite .",
    "both , @xmath54 and _ rueda s interpreter _ ran the model giving the expected output . however , they were not capable of executing multimedia interaction systems in real - time .",
    "_ ntccrt _ is our framework to specify and execute ` ntcc ` models .",
    "our first version of _ ntccrt _ allowed us to specify ` ntcc ` models in c++ and execute them as stand - alone programs .",
    "current version offers the possibility to specify a ` ntcc ` model on either lisp , openmusic or c++ .",
    "it is also possible to execute ` ntcc ` models as a stand - alone program or as an external object for pd or max .",
    "in addition to its portability , @xmath55 was carefully designed to support finite domain , finite sets and rational trees constraint systems .",
    "those constraint systems can be used to represents complex data structures ( e.g. , automata and graphs ) commonly used in computer music .",
    "_ ntccrt _ works on two modes , one for writing the models and another one for executing those models .      in order to write a ` ntcc ` model in _ ntccrt _ , the users may write them directly in c++ , using a parser that takes common lisp macros or writing a graphical `` patch '' in openmusic . using either of these representations , it is possible to generate a stand - alone program or an external ( fig [ fig : developingmode ] ) .      to execute a _ ntccrt _",
    "program , we can proceed in two different ways .",
    "we can create a stand - alone program or we can create an external for either pd or max . an advantage of using the externals lies on using control signals and the message passing api provided by pd and max to synchronize any _ graphical object _ with the _ ntccrt _ external .    to handle musical instrument digital interface ( midi ) streams we use the predefined functions in pd or max to process midi .",
    "then , we connect the output of those functions to the _ ntccrt _ external .",
    "we also provide an interface for midishare @xcite , useful when running stand - alone programs .",
    "_ ntccrt _ is written in c++ and it uses flext to generate the externals for either max or pd , and gecode @xcite for constraint solving and concurrency control .",
    "gecode is an efficient constraint solving library , providing efficient propagators ( narrowing operators reducing the set of possible values for some variables ) .",
    "the basic principle of _ ntccrt _ is encoding the `` when '' , @xmath45 and `` tell '' processes as gecode propagators .",
    "the other processes are simulated by storing them into queues for each time - unit .",
    "although gecode was designed to solve combinatorial problems , toro found out in @xcite that writing the `` when '' and the @xmath45 processes as propagators , gecode can manage all the concurrency needed to represent ` ntcc ` .",
    "following , we explain the encoding of the `` tell '' and the `` when '' .    to represent the `` tell '' , we define a super class @xmath56 . for _ ntccrt",
    "_ , we provide three subclasses to represent these processes : * tell * ( @xmath57 ) , * tell * ( @xmath58 ) , and * tell * ( @xmath59 ) .",
    "other kind of `` tells '' can be easily defined by inheriting from the @xmath56 superclass and declaring an @xmath60 method .",
    "we have a _ when propagator _ for the `` when '' and a _ when _ class for calling the propagator . a process * when * @xmath2 * do * @xmath61",
    "is represented by two propagators : @xmath62 ( a reified propagator for the constraint @xmath2 ) and * if * @xmath63 * then * @xmath61 * else * @xmath64 ( the _ when propagator _ ) .",
    "the _ when propagator _ checks the value of @xmath63 .",
    "if the value of @xmath63 is true , it calls the _ execute _ method of @xmath61 .",
    "otherwise , it does not take any action .",
    "figure [ fig : whenprop ] shows how to encode the process * when * @xmath65 * do * @xmath61 using our _ when propagator_.",
    "we selected two real - life applications to show the relevance of using _ ntccrt _ externals in pd .",
    "_ ccfomi _ shows us how we can use _ ntccrt _ to interact in real - time with a human player .",
    "finally , a signal processing application shows us how a _ ntccrt external _ can send control signals to trigger signal processing filters .",
    "machine improvisation usually consider building representations of music , either by explicit coding of rules or applying machine learning methods.an interactive machine improvisation system capable of real - time perform two activities concurrently : stylistic learning and stylistic simulation .",
    "rueda et al .",
    "define in @xcite , stylistic learning as the process of applying machine learning methods to musical sequences in order to capture salient musical features and organize these features into a model . on the other hand , stylistic simulation as the process of producing musical sequences stylistically consistent with the learned material .",
    "a machine improvisation system using ` ntcc ` is _",
    "ccfomi_. _ ccfomi _ executes both phases concurrently , uses ` ntcc ` to synchronize both phases of the improvisation , and uses the _ factor oracle _",
    "( @xmath66 ) to store the information of the learned sequences .",
    "@xmath66 is a finite state automaton constructed in linear time and space .",
    "it has two kind of transitions ( _ links _ ) .",
    "_ factor links _ are going forward and following them is possible to recognize at least all the factors from a sequence . _",
    "suffix links _ are going backwards and they connect repeated patterns of the sequence .",
    "further formal definitions about @xmath66 can be found in @xcite . following , we give a brief description of _ ccfomi _ taken from @xcite .",
    "_ ccfomi _ is divided in three subsystems : learning ( add ) , improvisation ( improv ) and playing ( player ) running concurrently .",
    "in addition , there is a synchronization process ( sync ) in charge of synchronization .",
    "_ ccfomi _ has three kind of variables to represent the partially built @xmath66 automaton : variables @xmath67 are the set of labels of all currently existing _ factor links _ going forward from @xmath68 .",
    "variables @xmath69 are _ suffix links _ from each state @xmath70 and variable",
    "@xmath71 give the state reached from @xmath68 by following a _ factor link _ labeled @xmath72 .    in our implementation of _ ccfomi",
    "_ , the variables @xmath73 and @xmath71 are modeled as infinite rational trees @xcite with unary branching .",
    "that way , we can add new elements to @xmath74 and @xmath75 dynamically .",
    "rational trees have been subject of multiple researches to construct a constraint system based on them .",
    "using this constraint system is possible to post the constraints + @xmath76 , @xmath77 , @xmath78 to model a list of three elements [ @xmath79 .",
    "following , we explain some _ ccfomi _ processes .",
    "the @xmath80 process ( specified in @xcite ) is in charge of building the @xmath66 by creating the _ factor links _ and the _ suffix links_. this process models the learning phase .",
    "the learning and the simulation phase must work concurrently . in order to achieve that",
    ", it is required that the simulation phase only takes place once the subgraph is completely built .",
    "the @xmath81 process is in charge of doing the synchronization between the simulation and the learning + phase to preserve that property .    synchronizing both phases is greatly simplified by the use of constraints .",
    "when a variable has no value , the `` when '' processes depending on it are blocked .",
    "therefore , the @xmath81 process is `` waiting '' until @xmath82 is greater or equal than one .",
    "it means that the @xmath83 process has played the note @xmath70 and the @xmath80 process can add a new symbol to the @xmath66 .",
    "the condition @xmath84 is because the first _ suffix link _ of the fo is equal to -1 and it can not be followed in the simulation phase . + @xmath85 @xmath86 + * when * @xmath87 * do * + ( @xmath88 @xmath28 * next * @xmath89 ) + @xmath28 * unless * @xmath87 * next * @xmath90 + the @xmath83 ( specified in @xcite ) process simulates a human player .",
    "it decides , non - deterministically , each time - unit between playing a note or not .",
    "when running this model in pd , we replace this process by receiving an input ( e.g. , a midi input ) from the environment .",
    "the improvisation process @xmath91 starts from state @xmath68 and probabilistically , chooses whether to output the symbol @xmath92 or to follow a backward link @xmath93 .",
    "another probabilistic version of this process can be found in @xcite .    for this work ,",
    "we have modeled @xmath91 as a simpler improvisation process .",
    "we are more interested in showing the synchronization between the improvisation phases , than showing how we can control the choice among _ suffix links _ and _ factor links _ based on a probabilistic distribution .",
    "for that reason , choices in our @xmath91 process are made non - deterministically .",
    "+ @xmath94 @xmath86 + * when * @xmath95 * do * * next * + ( * tell * ( @xmath96 ) @xmath28 @xmath97 ) + @xmath28 * when * @xmath98 * do * * next * + ( ( * tell * ( @xmath96 ) @xmath28 @xmath97 ) + + @xmath99 * when * @xmath100 * do * + ( * tell * ( @xmath101)@xmath28 @xmath102 ) ) + @xmath28 * unless * @xmath103 * next * @xmath94 + the system is modeled as the @xmath83 and the @xmath81 process running in parallel with a process waiting until @xmath104 symbols have been played to launch the @xmath91 process",
    ". + @xmath105 @xmath86 !",
    "* tell*(@xmath106 ) @xmath28 @xmath107 + @xmath28 @xmath108 @xmath28 @xmath109      ` ntcc ` was used in the past as an audio processing framework @xcite . in that work , valencia and",
    "rueda showed how this modeling formalism gives a compact and precise definition of audio stream systems .",
    "they argued that it is possible to model an audio system and prove temporal properties using the temporal logic associated to ` ntcc ` .",
    "they proposed that a ` ntcc ` model , where each time - unit can be associated to processing the current sample of a sequential stream .",
    "unfortunately , in practice it is difficult to implement that model because it will require to execute 44100 time - units per second to process a 44.1 khz audio stream .",
    "this is not possible using our interpreter and using the other ` ntcc ` interpreters neither .",
    "another approach to give formal semantics to audio processing is the visual audio processing language @xmath110 @xcite .",
    "faust semantics are based on an algebra of block diagrams .",
    "this gives a formal and precise meaning to the operation programed there .",
    "our approach is different , we use a _ ntccrt _ external for pd or max to synchronize the graphical objects in charge of audio , video or midi processing in pd .",
    "for instance , the ` ntcc ` external decides when triggering a graphical object in charge of applying a delay filter to an audio stream and it will not allow other graphical objects to apply a filter on that audio stream , until the delay filter finishes its work .",
    "our system is composed by a collection of @xmath104 filters and @xmath111 objects ( midi , audio or video streams ) .",
    "when a filter @xmath112 is working on an object @xmath113 , another filter can not work on @xmath113 until @xmath112 is done .",
    "a filter @xmath112 is activated when a condition over its input is true .",
    "that condition is easily represented by a constraint .",
    "our system is composed by the infinite rational tree variables @xmath114 , @xmath115 and @xmath116 representing lists .",
    "@xmath117 represents the identifiers of the filter working on the object @xmath118 .",
    "@xmath119 represents when the object @xmath118 has finished its work .",
    "values for @xmath120 are updated each time - unit with information from the environment .",
    "@xmath121 represents the conditions necessary to launch filter @xmath112 , based on information received from the environment .",
    "finally , @xmath122 represents the set of filters waiting to work on the object @xmath113 .",
    "note that @xmath123 is a reference to the position @xmath118 of the list @xmath114 ( same with @xmath115 and @xmath116 ) .",
    "next , we explain the definitions of our system .",
    "objects are represented by _",
    "idleobject _ and _ busyobject_. an object is @xmath124 until it non - deterministically chooses a filter from the @xmath122 variable .",
    "after that , it will remain @xmath125 until the @xmath126 constraint can be deduced from the store .",
    "+ @xmath127 @xmath86 + * when * @xmath128 * do * * next * @xmath129 + @xmath28 * unless * @xmath128 * next * @xmath127 + @xmath28 @xmath130 * when * @xmath131 * do * * tell * @xmath132 + @xmath129 @xmath86 + * when * @xmath126 * do * @xmath127 + @xmath28 * unless * @xmath126 * next * @xmath129 + filters are represented by the definitions _ idlefilter _ , _ waitingfilter _ and _ busyfilter_. a filter is @xmath124 until it can deduce that @xmath133 .",
    "@xmath121 can be a condition based on multiple criteria .",
    "+ @xmath134 @xmath86 + * when * @xmath133 * do * @xmath135 + @xmath28 * unless * @xmath133 * next * @xmath134 + a filter is @xmath136 when the information for launching it can be deduced from the store , but it has not yet control over the object @xmath113 .",
    "when it can control the object , it calls the definition _",
    "busyfilter_. + @xmath137 @xmath86 + * when * @xmath138 * do * @xmath139 + @xmath28 * unless * @xmath138 * next * + @xmath137 @xmath28 * tell * @xmath140 + a filter is @xmath125 until it can deduce that the filter finished working on the object associated to it",
    ". + @xmath139 @xmath86 + * when * @xmath126 * do * @xmath134 + @xmath28 * unless * @xmath126 * next * @xmath139 + filter definitions can be written in openmusic using a graphical `` patch '' ( fig [ fig : philo2 ] ) .",
    "the following definition models a situation with two objects and four filters .",
    "the external generated for this model can control all kind of objects and filters , represented by graphical objects in pd .",
    "+ @xmath141 @xmath86 + @xmath142 @xmath28 @xmath143 @xmath28 @xmath144 + @xmath28 @xmath145 @xmath28 @xmath146 @xmath28 @xmath147 +",
    "we ran @xmath53 as an stand - alone application over an intel 2.8 ghz imac using mac os 10.5.2 and gecode 2.2.0 .",
    "each time - unit took an average of 20 ms , scheduling around 880 processes per time - unit .",
    "we simulated 300 time - units and we ran each simulation 100 times in our tests .",
    "pachet argues in @xcite that an improvisation system able to learn and produce sequences in less than 30ms is appropriate for real - time interaction . since our implementation of _ ccfomi",
    "_ has a response time of 20ms in average , we conclude that it is capable of real - time interaction for a 300 ( or less ) time - units simulation .    for this work",
    ", we made all the test under mac os x using pd .",
    "since we are using gecode and flext to generate the externals , they could be easily compiled to other platforms and for max .",
    "this is due to gecode and flext portability .",
    "in this paper , we present _ ntccrt _ as a framework to manage concurrency in max and pd .",
    "in addition , we present two real - life applications , a machine improvisation system and a signal processing system .",
    "we ran both applications creating _ ntccrt _ external objects for pd .",
    "we want to encourage the use of process calculi to develop reactive systems .",
    "for that reason , this research focuses on developing real - life applications with ` ntcc ` and showing that our interpreter _ ntccrt _ is a user - friend - ly tool , providing a graphical interface to specify ` ntcc ` models and compiling them to efficient c++ programs capable of real - time interaction in pd .",
    "we argue that using process calculi ( such as ` ntcc ` ) to model , verify and execute reactive systems decreases the development time and guarantees correct process synchronization , in contrast to the graphical patch para - digm of max or pd .",
    "we argue that using that paradigm is difficult and time - demanding to synchronize processes depending on complex conditions . on the other hand , using ntccrt ,",
    "we can model such systems with a few graphical boxes in openmusic or with a few lines in common lisp , representing complex conditions by constraints .",
    "one may argue that although we can synchronize _ ntccrt _ with an external clock ( e.g. , a metronome object ) provided by max or pd , this does not solve the problem of simulating models when the clock step is shorter than the time necessary to compute a time - unit . to solve this problem",
    ", sarria proposed to develop an interpreter for the real time concurrent constraint ( ` rtcc ` @xcite ) calculus , which is an extension of ` ntcc ` capable of modeling _ time - units _ with fixed duration .",
    "one may also argue that we encourage formal verification for ` ntcc ` , but there is not an existing tool to verify these models automatically , not even semi - automatically . to solve this problem ,",
    "prez and rueda proposed to develop a verification tool for the probabilistic timed concurrent constraint ( ` pntcc ` @xcite ) calculus .",
    "currently , they are able to generate an input for prism @xcite based on a ` pntcc ` model .    in the future",
    ", we would like to explore the ideas proposed by sarria , prez and rueda .",
    "moreover , we want to extend our implementation to support ` pntcc ` and ` rtcc ` , and to generate an input for spin @xcite based on a ` ntcc ` model .",
    "we want to thank to arshia cont for giving us this idea of using _ ntccrt _ in pd and max ; fivos maniatakos , jorge prez and carlos toro - bermdez for their valuable reviews on this paper ; and jean bresson , gustavo gutirrez , and the gecode developers for their help during the development of _ ntccrt_."
  ],
  "abstract_text": [
    "<S> writing multimedia interaction systems is not easy . </S>",
    "<S> their concurrent processes usually access shared resources in a non - deterministic order , often leading to unpredictable behavior . using pure data ( pd ) and max / msp is possible to program concurrency , however , it is difficult to synchronize processes based on multiple criteria . </S>",
    "<S> process calculi such as the non - deterministic timed concurrent constraint ( ntcc ) calculus , overcome that problem by representing multiple criteria as constraints . </S>",
    "<S> we propose using our framework ntccrt to manage concurrency in pd and max . </S>",
    "<S> ntccrt is a real - time capable interpreter for ntcc . using ntccrt externals ( binary plugins ) in pd we ran models for machine improvisation and signal processing . </S>"
  ]
}