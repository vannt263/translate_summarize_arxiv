{
  "article_text": [
    "automotive engine assembly is a heavily automated and complex process that is controlled in a distributed fashion .",
    "each assembly plant consists of several machines ( or operations / stations ) that are extensively inter - connected and are programmed to automatically execute the various operations necessary to manufacture an automotive engine .",
    "the distributed control system maintains elaborate logs regarding the time - evolving conditions of all machines in the plant , the status of different operations performed on a particular engine , the throughput statistics of the plant , etc . in this paper , we present an application that uses temporal data mining techniques for analyzing these time - stamped logs to help in fault analysis and root - cause diagnosis .",
    "the application presented here is currently being used on a regular basis in engine assembly plants of general motors .",
    "the data records in manufacturing systems are mainly time - stamped records that take one of two forms : event - based records ; time - based records .",
    "machine faults logs are event - based records that report change in machine state from running state to down state .",
    "these records signify the behaviour observations of a machine as it unfolds , but lack the resolution that is needed to represent the dynamics of the change .",
    "an engine plant consists of several machining and assembly lines .",
    "each line is divided into several zones which are usually separated by off - line buffers .",
    "a zone contains a group of machines which are physically and/or logically interrelated .",
    "[ fig : lomo ] shows the layout of a typical engine assembly line .",
    "engine manufacturing is a sequential process as the engine and its components undergo a sequence of operations .",
    "each machine performs one or more operations on the engine .",
    "the line is controlled by a distributed control system .",
    "each operation itself is divided into a sequence of controlled steps .",
    "for example , the ` drill operation ' can be divided into the following steps : clamp the part , advance the tool , start drilling , monitor final depth , return the tool and unclamp the part .",
    "all these are controlled steps in the sense that there are some conditions prescribed for each step which must be satisfied to move to the following step ; otherwise a machine fault occurs . for example , associated with every step is a time limit .",
    "if the time taken by a step exceeds this limit , a machine fault occurs .",
    "another reason why a machine fault may be reported is if some precondition of the operation step changes during the operation .",
    "for example , the part can get unclamped while the tool is still engaged .",
    "all such fault conditions identified automatically by the control system are logged into appropriate databases . in general , faults would result in reduced throughput ( because , e.g. , some operations may have to be redone ) or may even result in stoppage of the line .",
    "the plant floor engineers have to constantly monitor the fault alarms and decide on the manual corrective actions needed to keep the line running smoothly .",
    "the machine fault logs are a time - ordered sequence of faults that have occurred .",
    "each station or machine is identified by a _ machine _ or _",
    "station code_. whenever possible , the exact _ subsystem _ in the machine that reports the fault is also recorded . for each different fault that a machine can report",
    "there is a unique _ fault _ ( or _ error code _ ) .",
    "thus , each fault record in the log has the following fields : ( 1 )  operation , ( 2 )  subsystem , ( 3 )  fault , ( 4 )  occurred time , and ( 5 )  resolved time .",
    "the first three fields take values from a finite , hierarchically arranged alphabet and the last two time fields record the corresponding date and time up to a resolution of one second .",
    "[ fig : datasnapshot ] shows a snapshot of the data logs . here",
    "the subsystem and fault codes are combined under the `` error '' column .",
    "also , this snapshot quotes `` durations '' of the faults ( computed as the difference between occurred and resolved times ) instead of the start and end times .",
    "the control system is programmed to recover from some faults automatically while for some other faults manual intervention is necessary .",
    "the fault logs record both types of faults .          in the past",
    ", machine fault logs were used in the work floor in many ways .",
    "the simplest way was to rank faults that occurred in a line based on their frequencies in some given period ( say , for example , in the immediate past week ) .",
    "another way was to rank them in decreasing order of ` downtimes ' ; mttr mean time to repair or mcbf main cycle between failures .",
    "when trying to fix a specific fault , the plant maintenance group look at the frequency and downtime histories of that particular fault , trying to ascertain whether this fault has repeatedly caused problems in the past ( and if it has , the engineers investigate the maintenance records to find out how the problem was fixed on those occasions and try out the same or improved solutions ) . however , all these kinds of so - called single variable analyses were only capable of capturing individual fault characteristics .",
    "[ fig : single - variable ] shows a typical screen shot of the fault statistics that the plant maintenance group can access when trying to fix some fault condition in the assembly plant .",
    "however , the problem that the plant maintenance group face on a regular basis can be much more complex . at times of machine faults , sometimes the last fault that brings the line to a halt is neither the root - cause nor is it sufficiently indicative of it .",
    "further , any kind of summary of the machine faults - log based on simple single variable statistics is limited in its expressive power , and is unable to be of help to the plant maintenance group .",
    "an important analysis tool in such situations would be one that can unearth temporal correlations _ between _ faults .",
    "( based on past experience , it is well known that such correlations exist , although these are not immediately apparent from the faults log ) . by looking at the logs",
    ", it should be possible to ask questions like , is there a frequently occurring fault , say b , that typically follows the fault , a , within a 5 minute interval ? are there any such significant correlations among the faults being logged , that is indicative of where the actual root - cause of the current fault may lie ?",
    "for example , if most occurrences of a are followed by a b , or alternately most occurrences of a are preceded by a b , then it is quite likely that one of them is a root - cause of the other .    the main difficulty in estimating the relevant joint statistics from the data is that the total number of fault possibilities are often quite large and it becomes computationally infeasible to systematically estimate all possible correlations in the data .",
    "this makes data mining an ideal tool for such analysis .",
    "data mining algorithms are tailor - made to efficiently estimate only the strong correlations that stand out in the data ( by saving computational effort that would otherwise have been wasted in estimation of all the weaker correlations ) .",
    "in particular , since our application demands the search for time - ordered correlations ( that could indicate , e.g. , whether a follows b or b follows a ) we resort to temporal data mining algorithms for analysis of the engine assembly plant data .",
    "temporal data mining @xcite is concerned with the exploration of large sequential databases for hidden and unsuspected structures or patterns that are ( typically ) previously unknown , but interesting and useful to the data owner .",
    "sequential databases are available in several application domains ranging from stock market analysis to bioinformatics @xcite . here",
    "our interest is in the machine faults log which is a time - ordered sequence of faults that occurred in the line . by analyzing these large volumes of data we can find useful temporal correlations among fault occurrences which can , in turn , be used for root cause diagnostics . as stated earlier ,",
    "a machine fault log is a time - ordered sequence of faults that occurred in a line , where each fault is recorded using a _ code _ from an extensive ( and often hierarchically arranged ) alphabet . from a data mining perspective , it is of interest to ask which combinations of faults tend to occur frequently together with or without some prescribed time constraints between occurrences of different faults .",
    "such analysis can be of great help in identifying root causes for recurrent problems and hence is useful for suggesting process improvements .",
    "in this paper we show that the framework of frequent episode discovery @xcite is well - suited for identifying such recurrent fault correlations in the machine fault logs .",
    "we describe a temporal data mining system for analyzing logs from engine plants using the frequent episodes framework .",
    "the framework of frequent episodes in event streams provides a good abstraction for mining useful temporal patterns from time - ordered data @xcite .",
    "an episode is a short ordered sequence of _ events _ where each event is tagged with an event - type from an appropriate alphabet . in case of",
    "the machine faults data , the alphabet is the set of codes required to uniquely locate and identify the fault in the line .",
    "an episode is said to occur in a given data stream if the events that constitute the episode appear in the data with the same order as prescribed in the episode .",
    "the frequency of an episode is a measure of how often the episode occurs in the data and episodes whose frequency exceeds some threshold are declared as _",
    "frequent episodes_. we consider the problem of discovering all frequent episodes in a given sequence of faults logged .",
    "frequent episodes are readily interpretable as significant fault co - occurrences which are useful in the analysis of the fault logs . using these frequent episodes ,",
    "it is possible to generate a list of online alerts to help locate root causes for persistent problems .",
    "since the list of alerts is much smaller than the original machine fault logs , and since it is also easier to read and interpret , it has been found to be of great use to the plant engineers for fault diagnostics .",
    "the temporal data mining techniques described in this paper have been incorporated into a fault diagnosis system which is used on a regular basis on the work floor of one of gm s engine plants ( and is scheduled for adoption in several other plants ) .",
    "the paper is organized as follows .",
    "[ sec : tdmf ] presents details of the data mining framework used for mining the fault logs .",
    "[ sec-3 ] describes how to incorporate prior knowledge of the plant floor engineers into the application and how to structure the output of the data mining analysis in order to make it useful for the plant engineers . in sec .",
    "[ sec : r ] , we discuss some sample results obtained to highlight the effectiveness of temporal data mining in this application .",
    "the machine fault logs used in this application were from three lines in the engine assembly plant ",
    "the engine block machining line , the engine head machining line and the final engine assembly line . based on the physical layout of machines",
    ", it is known that there can be no meaningful correlations among machine faults across these different lines .",
    "therefore , as a preprocessing step , the data is partitioned into these three categories before analyzing it .",
    "once this is done , fault records within each category can be sorted based on the times of occurrence to yield _ fault sequences _ that can each be separately subjected to temporal data mining analysis .    as mentioned earlier , using the frequent episodes framework it is possible to discover all fault correlations that occur repeatedly in the data . some of these correlations may already be known to the plant engineers , while some others may not .",
    "it is the unknown correlations that plant engineers are most interested in . for the data mining effort to be effective in such an application ,",
    "the episode discovery algorithms have to be properly augmented with heuristic knowledge of plant engineers .",
    "this is needed to make sure that the final output is useful and the plant engineers are not flooded with many irrelevant correlations .    in this section , we provide an overview of our temporal data mining method . since the algorithms are reported elsewhere @xcite we do not provide details of the algorithms here . in the next section",
    "we discuss how we incorporate some application specific knowledge and how we provide the final outputs of the data mining analysis .",
    "the framework of frequent episodes is introduced in @xcite as a generic method to discover certain temporal patterns in categorical time series data .",
    "the input to the frequent episode discovery algorithm @xcite is an _ event sequence _",
    ", @xmath0 @xmath1 , where each @xmath2 denotes an _ event _ with _ event type _ , @xmath3 , coming from some finite alphabet of event types and @xmath4 representing the time of occurrence of the event . for the engine plant data ,",
    "there are various ways to constitute the alphabet of event types . for example",
    ", just the operation code in each fault record could be used as the event type and an event sequence could be constituted by simply considering the sequence of machines that reported faults .",
    "alternately , if we want to describe faults in greater detail , the subsystem and/or fault code(s ) may also be appended to the operation code to obtain the event type corresponding to each fault record .",
    "the alphabet in such a case would be the collection of all possible combinations of operation , subsystem and fault codes .",
    "the temporal data mining toolbox that was developed for this application provides the user with both options .",
    "an _ episode _ , @xmath5 , is an ordered collection ( or sequence ) of event types , and is denoted by @xmath6 , where each @xmath7 is an event type , arrows define the ordering among the event types and @xmath8 denotes the size of @xmath5 .",
    "further , any subsequence of the episode @xmath5 , defines a _ subepisode _ of @xmath5 .",
    "episode @xmath6 is said to occur in a data sequence , @xmath9 , if the event types , @xmath7 , that constitute it appear in @xmath9 in the same order as in @xmath5 .",
    "we note here that the events of type @xmath10 etc . do not have to appear _ consecutively _ for the episode @xmath5 to occur .",
    "there can be other events in between .",
    "for example , the following is an event sequence containing ten events : @xmath11 there are four occurrances of the episode @xmath12 in this data sequence .    in the engine data ,",
    "an episode is simply a collection of faults occurring in a time - ordered fashion .",
    "thus , the structure of episodes readily captures temporal correlations among faults in a simple manner .",
    "the objective of the data mining process here is to discover all _ frequent episodes _ where an episode is frequent if its _ frequency _ exceeds a threshold .",
    "the frequency of an episode is some measure of how often it occurs in the data sequence .",
    "there are many ways to define the episode _ frequency _ @xcite . in general",
    ", it is computationally inefficient to count all occurrances of an episode @xcite .",
    "the motivation for defining different frequency measures is to be able to efficiently count the frequencies of a set of candidate episodes through a single pass over the data stream while ensuring that higher frequency would mean higher number of occurrances of an episode . in @xcite ,",
    "frequency is defined as the number of fixed - width sliding windows over the data that contain at least one occurrence of the episode . in the example sequence given by ( [ eq : seqex ] ) ,",
    "if we take a window width of eight , then the frequency of @xmath13 is two .",
    "( this is because the occurrance constituted by the events : @xmath14 is present in two windows , namely , @xmath15 $ ] and @xmath16 $ ] while none of the other occurrances can fit in a window of width eight ) . in @xcite ,",
    "the frequency is defined as the maximum number of _ non - overlapped _",
    "occurrences of the episode in the sequence , where , two occurrences are said to be non - overlapped if no event associated with one occurrence appears in between those of the other . in the example sequence given by ( [ eq : seqex ] ) , there are two non - overlapped occurrances of the episode @xmath17 .",
    "( these two occurrances are constituted by the events : @xmath14 and @xmath18 ) .",
    "the non - overlapped occurrences - based frequency is computationally much more efficient than the windows - based count @xcite .",
    "it is also theoretically more elegant .",
    "it allows for a formal connection between episode discovery and learning of stochastic generative models ( for the data source ) in terms of some specialized hidden markov models ( hmms ) @xcite and this , in turn , allows one to easily assess the statistical significance of the discovered frequent episodes .",
    "also , in our application of analyzing fault sequences , if episodes are to capture some underlying causative temporal correlations , counting only non - overlapped occurrances is intuitively appealing .",
    "hence , in our application , we adopt this non - overlapped occurrences - based count as the frequency definition for episodes .",
    "an episode with _",
    "high _ frequency essentially indicates a _ strong _ correlation among an ordered sequence of faults in that it happen repeatedly and hence may be a useful indicator of some underlying fault condition .",
    "often , we may prescribe an additional constraint , called expiry time , under which we count an occurrance only if the time span of the occurrance is less than some prespecified threshold . in the earlier example , if we have an expiry time of 8 time units , then there is only one non - overlapped occurrance of the episode @xmath13 .",
    "we note here that the window width in the windows - based frequency @xcite can be thought of as an expiry time constraint .",
    "however , if the actual span of the occurrance is much less than the window width then an episode with only one occurrance can still have a large frequency because it stays in many consecutive windows .",
    "this problem is not there with the non - overlapped occurrances based frequency .",
    "moreover , it is computationally more efficient to count non - overlapped occurrences and we use this frequency definition in our application .",
    "the discovery of all frequent episodes in an event stream can be efficiently carried out using a level - wise apriori - style procedure that is popular in most of the frequent - pattern - discovery methods in data mining .",
    "such a method is feasible if the frequency measure used is such that the frequency of an episode is less than or equal to that of each of its subepisodes .",
    "( both the frequency measures mentioned above have this property ) .",
    "this gives rise to the key observation : the necessary ( though not sufficient ) condition for an @xmath8-node episode to be frequent is that each of its @xmath19-node subepisodes are frequent .",
    "this is very effective in controlling the combinatorial explosion in generating a set of @xmath8-node candidate episodes for frequency counting as explained below .",
    "the method of frequent episode discovery consists of performing the two steps of _ candidate generation _ and _ frequency counting _ , repeatedly , once for every successively larger size of episodes .",
    "first , all _ frequent _ episodes of size @xmath20 are found by building a simple histogram for the various faults that occurred in the data .",
    "these are then combined to obtain _ candidate _ episodes of size @xmath21 using a candidate generation procedure @xcite .",
    "the next step involves frequency counting of the candidates just generated and this is done through one pass over the data stream using the finite state automata based algorithm as described in @xcite .",
    "once frequent episodes of size @xmath21 are thus obtained , they are used to construct candidate episodes of size @xmath22 and by one more pass over the data we count the frequencies of all the candidates to obtain the frequent 3-node episodes and so on .",
    "this process is repeated till eventually , episodes of all required sizes are discovered .",
    "the objective of candidate generation algorithm is to present to the frequency counting step , as few candidates as possible without missing any episode that would be frequent .",
    "as explained earlier , an episode can be frequent only if all its subepisodes were earlier found frequent in the previous level of the algorithm .",
    "this is what is exploited in the candidate generation step for constructing @xmath23-node candidates from @xmath8-node frequent episodes .",
    "we build the candidates by taking all possible pairs of @xmath8-node frequent episodes that have @xmath24 nodes common and combine each such pair to yield @xmath23-node candidates .",
    "such a candidate generation procedure can control the combinatorial explosion because , as the size of episodes grows , the number of frequent episodes falls rapidly ( if we choose our frequecy threshold well ) . in the frequency",
    "counting algorithms , occurrance of any episode in the data is recognized by having finite state automata for that episode .",
    "for example , the automaton associated with the episode @xmath12 would first wait for an event of type @xmath25 so as to transit into its first state and then wait for an event of type @xmath26 and so on .",
    "when the automaton transits into its final state , one occurrance would be recognized .",
    "since there are many candidate episodes and since we may have to track multiple potential occurrances of each episode , there would be many such active automata at any time .",
    "the algorithm consists of going through the event sequence and for each event , efficiently managing all the needed state transitions of these automata .",
    "the details of the algorithms are available in @xcite .      in the formalism",
    "described so far , it is implicitly assumed that events are instantaneous .",
    "that is why , in the event sequence , each event is associated with only one number denoting its time of occurrance .",
    "however , in our application , different faults persist for different durations .",
    "the faults sequence data contains two time stamps for each record , namely , the start time and the resolved time for each fault . the durations for which different faults persist is , in general , important in unearthing useful temporal correlations .",
    "hence we need to extend the formalism to the case where different events persist for different durations of time .",
    "such an extension has been developed @xcite and this is the framework that is actually used .",
    "( this extended formalism is , in fact , motivated by the application described here ) .    in the extended framework ,",
    "the event sequence is of the form @xmath27 @xmath28 , where @xmath3 is the event type as earlier and @xmath4 and @xmath29 denote , respectively , the start and end times of @xmath30 event .",
    "we will call @xmath31 as the dwelling time of @xmath30 event .",
    "the episodes in the new framework , called generalized episodes , contain , in addition to an ordered sequence of event types , a set of time intervals that prescribe the allowed dwelling times for events that constitute an occurrance of the episode .",
    "for example , a two node episode here could be represented as @xmath32 . for an ocurrance of such an episode in the data stream",
    "we need an event of type @xmath25 whose dwelling time is in the interval @xmath33 which is followed some time later by an event of type @xmath26 whose dwelling time is in the interval @xmath34 .",
    "( in general , it is possible to associate a finite union of intervals with each node in the episode ) .",
    "the time intervals that we can associate with any node in an episode come from a finite collection of disjoint time intervals provided by the user .",
    "this set of intervals essentially prescribes the different time durations for events that are sought to be distinguished and can be used to analyze the data stream in different time granularities .    for the generalized episode mining",
    "also we use the same frequency , namely the number of non - overlapping occurrances of the episode .",
    "the two step procedure of candidate generation and frequency counting is the method used for discovering frequent generalized episodes also .",
    "however , both candidate generation as well as frequency counting become more complicated because of the need to handle time durations of events .",
    "the details of the algorithms can be found in @xcite .      as mentioned earlier ,",
    "frequent episodes are those whose frequency is above a threshold .",
    "thus , the frequency threshold is a critical parameter for the frequent episode discovery algorithm . in this subsection",
    "we mention some theoretical results based on which it is possible to automatically arrive at a reasonable frequency threshold .",
    "earlier we noted that episodes with higher frequencies are likely to represent more important correlations among a set of repeatedly occurring faults and hence are more useful to the plant engineers during fault diagnosis .",
    "this aspect has been actually formalized in a statistical sense in @xcite .",
    "this is done by defining a special class of hidden markov models ( hmms ) called episode generating hmms ( eghs ) and defining an association from episodes to eghs .",
    "it was proved that under this association , the more frequent episode is associated with the egh that has higher likelihood of generating the given event sequence .",
    "( here , frequency is the number of non - verlapped occurrances of the episode ) .",
    "this theoretical connection facilitates a test of statistical significance for frequent episodes discovered .",
    "this test is a simple one that requires nothing more than the output of the frequency counting algorithm to determine significance of an episode .",
    "more specifically , for a given probability of error , an episode must have a particular _ minimum _ frequency in the event stream for it to be regarded as significant .",
    "this minimum frequency needed depends only on the number of nodes in the episode , length of the data stream , the size of the alphabet for describing event types and the allowed probability of error . for error probability",
    "less than @xmath35 , the minimum frequency needed does not vary much with the error probability and it is close to @xmath36 , where @xmath37 is the length of event stream , @xmath8 is the size of the episode and @xmath38 is the size of the alphabet .",
    "this is therefore a good initial choice for frequency threshold in frequent episode discovery and we always use this for preliminary analysis of data .",
    "( see @xcite for details of this analysis ) .",
    "in fact , this threshold is often found to be very good even for final analysis , although the user always has the option to set a higher threshold for frequency whenever necessary .",
    "the theoretical analysis for arriving at this frequency threshold ( as presented in @xcite ) is valid only for the case of instantaneous events .",
    "however , even in case of events with time durations ( and hence for generalized episode discovery ) , the same threshold is found to be very effective in our application .      in general , our frequent episode discovery algorithms ( for instantaneous events ) do not require any user - defined input parameters . while the candidate generation algorithm of @xcite only requires the set of frequent episodes from the previous level as input , the frequency counting algorithm of @xcite requires the event stream , the current set of candidates and a frequency threshold as input . as was just described in sec .",
    "[ sec : soe ] , the frequency threshold can be set automatically .",
    "as stated earlier , in our application the durations of events are important and hence we actually use the generalized episode framework . hence , one input needed from the user is the set of time durations that are sought to be distinguished .",
    "in addition , it is often found useful to impose one more temporal constraint on the episode discovery which we call expiry time constraint .",
    "these are explained in this subsection .    *",
    "expiry time : as per our definition of episode occurrence , even events separated by arbitrarily large time interval can still constitute occurrence of an episode .",
    "however , faults ( which are the events for us ) that occur far from each other are unlikely to have any causative relationship and hence we do not want to count occurrences of episodes which are constituted by such events . to ensure that faults widely separated in times are not counted as an occurrence of an episode",
    ", it is possible to prescribe an _ expiry time _ for episodes .",
    "this is a user - defined parameter which bounds the time difference between the first and last events within a single occurrence of the episode .",
    "thus , now the frequency of an episode would be the maximum number of non - verlapped occurrances of an episode such that each occurrence satisfies the expiry time constraint .",
    "this extra constraint is easily incorporated into the frequency counting procedure as is indicated in @xcite . *",
    "the set of possible durations : for mining engine assembly data , based on inputs from plant engineers , we bucket the time durations of events into the following four intervals : @xmath39 $ ] , @xmath40 $ ] , @xmath41 $ ] and @xmath42 $ ] .",
    "the s behind these time durations are the dynamics of fault recovery .",
    "the duration of the event depends on the fault types and the tactical decision by the maintenance group .",
    "further , plant engineers are not interested in long events of one particular type , or short events of another type , etc .",
    "the generalized episodes discovery algorithms of @xcite are capable of handling all such special cases within the same unified framework , and these algorithms are incorporated into the temporal data mining toolbox .",
    "in the previous section , we described how the framework of frequent episode discovery allows for a theoretically elegant and computational efficient temporal analysis of machine fault logs in automative engine assembly plants .",
    "however , it is important to note that it is a model - free technique and as is the case with any such method , the technique will be really useful , only after considerable effort is put in to incorporate explicit domain - specific knowledge into the data mining system .",
    "we perform this through pre - filtering of the data and post - filtering of the results from frequent episode discovery . in this section , we describe some of the details of how such information is incorporated into our application . .",
    "for a data mining technique to be effective in any application , it is always necessary to ` clean up ' the data and filter out the noise .",
    "this will help in ensuring that the output of the data mining analysis is useful and is not cluttered with too much of irrelevant information .",
    "the machine faults logged sometimes contain ` spurious ' records in the form of some _ zero duration _ faults .",
    "these records occurred due to communication problem between the machine controller and the data network data collection system or due to programming error in the controller .",
    "these records need to be removed from the data before analysis .",
    "also , plant floor engineers are not interested in unearthing correlations involving faults with large durations ( i.e.  time difference between resolved time and occurrence time of the fault is large ) .",
    "both these duration constraints can be handled by requiring that the duration of any fault considered for analysis lies within some user - defined time interval .",
    "for example , if the user specifies this duration constraint by the time interval @xmath43 $ ] , this would mean that only non - zero duration faults with duration within 1800 seconds are considered and all other fault records are filtered out of the episode discovery process .",
    "events that create faults of very long durations are typically not correlated with any other faults .",
    "they are random events depending on variables such as buffer status in the machining lines or unscheduled breaks in the assembly lines .",
    "another important prefiltering operation is to determine the granularity of the alphabet ( or codes ) used to describe the data . as was mentioned earlier in sec .",
    "[ sec : tdmf ] , the event sequence input to the frequent episode discovery can be constituted in many ways . we could either use or ignore the fault codes in the fault logs , and correspondingly , the data mining analysis would operate at either the faults level or station ( or machine ) level .",
    "in addition , there are many logical ways to group the machines in the assembly plant - line - wise , zone - wise , based on whether the machine is manual or automatic , etc .",
    "one could either choose to analyze all of the data that is logged or simply choose data corresponding to one or more logical groups . if the user is looking for patterns specifically within one such logical group , then applying this restriction as a prefilter can significantly help speed - up the process of frequent episode discovery due to a reduction in length of the data stream .",
    "another important prefilter that is applied on the data sequence is to remove some specific fault codes that the plant engineers know carry no serious information .",
    "for example , some machines may be programmed to go down when some other fault occurs .",
    "these fault occurrences would be part of some kind of plant logic or machine logic and it is useless to look for patterns involving one or more of these .",
    "these cases include machine faults such as e - stop faults , i / o faults and communication faults .",
    "so we remove all such machine and/or fault codes before starting any data mining analysis .",
    "most data mining methods that aim at discovering frequent patterns usually come up with a large number of frequent patterns .",
    "this is particularly true in large application domains such as the one we consider here .",
    "hence , to make the method effective and useful to the plant engineer , we have to use application specific heuristics to focus attention on patterns that are likely to be of interest .",
    "these heuristics are based on the knowledge that plant engineers have about the assembly process .",
    "the frequent episode discovery process throws up a wide variety of fault correlations as output . of these , from the point of view of fault diagnosis and root cause analysis , there are two kinds of fault correlations ( or episodes ) that are particularly interesting .",
    "we refer to them as _ multiple machine faults _ and _ individual machine faults_. a multiple machines fault correlation refers to one involving at least two different machines .",
    "multiple machine fault correlations can in - turn be of two types , namely , those that involve multiple machines along with their zone controller , and those that involve neighboring machines in general .",
    "by contrast , an individual machine fault correlation refers to a sequence of faults reported from the same machine .",
    "our episode discovery method is programmed to look for only those episodes that satisfy these structural restrictions .",
    "an important aspect of this categorization of fault correlations is that plant floor engineers require to use different parameter values when looking for these different types of fault correlations .",
    "for example , the expiry time for individual faults is computed as the difference between the end - time of the first event and the start - time of the last event in the episode s occurrence ; whereas , for machine faults , the expiry time is taken as the difference between the start - times of the first and last events in the episode s occurrence .",
    "the reason for this is as follows .",
    "when considering individual faults , we are looking at faults occurring within the same machine and the same machine can not simultaneously be in two states .",
    "so it is reasonable to consider the time duration between the end of the first and the beginning of the last event in the occurrence . in case of multiple machine faults ,",
    "the events in the occurrence can very well overlap and hence the difference between start times is a more useful indicator .",
    "our application incorporates all such special flexibilities .    from the point of view of the user ,",
    "the utility of restricting the output to only episodes with these special kinds of structures ( namely machine faults and individual faults ) is that the number of frequent episodes output is significantly reduced thereby enhancing the readability of the final fault correlation reports .",
    "these kinds of fault correlations , in a sense , lead to ` actionable ' output from the data mining algorithm .",
    "when plant floor engineers look at correlations other than these , they find it difficult to interpret them and so they can not find use for them during fault diagnosis .      .",
    "the error code corresponding to event @xmath25 ( i.e.  the first node of the 2-node episode ) is given in column  2 , and a description of the corresponding error is given in column  3 .",
    "columns 5 and 6 describe the same things for event @xmath26 ( i.e.  the second node of the 2-node episode ) .",
    "confidence of the rule `` @xmath25 causes @xmath26 '' , @xmath44 , is reported in column  4 .",
    "similarly , confidence of the rule `` @xmath26 causes @xmath25 '' , @xmath45 , is reported in column  7.,height=480 ]    an important aspect of any data mining application is the issue of what should be the output of the analysis .",
    "the frequent episode discovery algorithm outputs a list of frequent episodes discovered in the data stream . hence , one possibility is to present this list in a suitably sorted order .",
    "this is one of the modes in which our application can be run .",
    "everyday , the frequent episode discovery is run on a window of past data ( e.g. , the immediate past one week ) and the list of frequent episodes ( which denote some temporal correlations detected ) , are output to the user . fig .",
    "[ fig : typical - tdminer - output ] shows a typical output from our application listing some frequent 2-node episodes .",
    "such a list of frequent episodes is found to be a useful routine report for the plant engineers .",
    "this output also shows which of the frequent episodes involve faults that contributed most for the downtime during this time period .",
    "the frequent episodes in this output are sorted not only by their frequency but also based on what we call as scores of the episodes .",
    "the score of frequent episode is a new measure of the possibile utility of a discovered episode and it is explained below .    in general , the frequent pattern discovery in data mining is aimed at generating useful rules to capture regularities in the data .",
    "the frequent episodes discovered can be used to construct rules like `` @xmath46 implies @xmath5 '' where @xmath46 is a subepisode of @xmath5 ( and both are frequent ) @xcite .",
    "the frequency threshold used for episode discovery is basically a minimum support requirement for these rules .",
    "the _ rule confidence _",
    ", as always , is the fraction of frequency of @xmath46 to that of @xmath5 .",
    "we use such rule formalism to come up with two more heuristic figures of merit ( in addition to the frequency ) for each of the frequent episodes . for this",
    "we consider , for each frequent episode , @xmath5 , rules of the form `` @xmath47 implies @xmath5 '' where @xmath47 denotes the subepisode of @xmath5 obtained by dropping its @xmath48 node .",
    "we define the _ best confidence score _ of a frequent @xmath8-node episode , @xmath5 , as the maximum confidence among rules of the form `` @xmath47 implies @xmath5 '' for all @xmath49 .",
    "an episode s best confidence score , being simply the confidence of the best rule that it appears in , is thus a measure of its inferential power .",
    "similarly , we define the _ worst confidence score _ of a frequent @xmath8-node episode , @xmath5 , as the minimum confidence among rules of the form `` @xmath47 implies @xmath5 '' for all @xmath49 .",
    "this figure of merit , in a sense , measures the strength of the weakest inference that can be made using the given episode .",
    "recall that , when analyzing the gm data , we already use one threshold for the frequency ( which is basically an input parameter to the frequent episodes discovery process ) .",
    "in addition , now , we specify two more thresholds for the best and worst confidence scores respectively . only if the frequency exceeds the frequency threshold and both the best and worst confidence scores , exceed their own corresponding thresholds , will an episode be finally presented as an output to the user .",
    "as stated earlier , one of the modes in which our system runs is to discover and present to the user a set of frequent episodes ( with their frequencies and scores ) over a data slice . another useful and novel mode of employing frequent episode discovery in this application is what we call an alert generation system .",
    "this system can be deployed as a software agent integrated in a computerized maintenance management system such as maximo .",
    "this integration can be significant to react to the identified faults correlations and reduce the risk of losing throughput .    our alert generation system , based on frequent episode discovery , indicates , on a daily basis , which episodes seem to be dominating the data in the recent past .",
    "this alert generation system is based on a sliding window analysis of the data . every day ,",
    "the frequent episode discovery algorithms are run for faults logged in some fixed - length history ( say , data corresponding to the immediate past one week ) .",
    "since this is done on a daily basis , for each day we have a set of frequent episodes and their scores .",
    "based on the frequencies and scores of the episodes discovered over a sequence of days , we use the following heuristic to generate alerts : `` whenever an episode exhibits a non - decreasing frequency trend for some period ( of say 4 days ) with its frequency and score above some user - defined thresholds , generate an alert on that episode . ''",
    "thus , each day the system provides the plant engineers with a list of alerts for the day .",
    "this list has been found very useful for online fault analysis and root cause diagnosis .",
    "as indicated earlier , our method of frequent episode discovery along with the heuristics ( based on knowledge of plant engineers ) to prune the set of frequent episodes , resulted in a useful tool whereby a small enough set of episodes are presented to the user .",
    "such a system is currently being used in one of the plants and the outputs provided are found to be useful to the user . in this section we provide some discussion on assessing the usefulness of this system along with a couple of examples .",
    "the system was first tested extensively on historical data before it was actually deployed .",
    "here we took data corresponding to a few months and obtained the set of frequent episodes , which were then assessed for `` interestingness '' by the plant engineers .",
    "the fault correlations were qualitatively analyzed by using the engineers experience and prior knowledge about the manufacturing process .",
    "three categories were identified and each fault correlation in the output was classified into one of the following :    * _ well - known episodes : _ these correspond to correlations that are very well - known and that routinely occur in the plant .",
    "some of these episodes may occur because , e.  g. , the controller is programmed to bring down some stations when a particular machine fails .",
    "these episodes carry no new information and hence are not particularly useful to the plant engineers .",
    "however , it is seen that our algorithms regularly throw up such episodes , which shows that the frequent episodes framework is effective in identifying correlations that are known to exist in the data .",
    "this resulted in building confidence of the plant engineers in the capabilities of the system . in the final system that we implemented ,",
    "a post - processing step flags these episodes as `` well - known '' and removes them from the eventual list of episodes presented to the user . * _ expected episodes : _ these correspond to correlations that have been observed and learnt by the plant engineers through their past experience in the assembly plant .",
    "these episodes are useful during online fault diagnosis but are already part of the troubleshooting heuristic knowledge in the assembly plant .",
    "our system has been throwing up many such episodes also which is indicative of the framework s capability as a fault diagnosis tool . * _ unexpected episodes : _ these are correlations that past experience in the assembly plant can not immediately explain , and for this very reason , are of greatest interest from a data mining view point .",
    "the real utility of the frequent episode framework lies in discovering unexpected episodes early , so that , the root cause of a recurring problem can be quickly located and solved , thereby facilitating better throughput in the assembly plant .",
    "the algorithm was assessed to be useful because it discovered a few such unexpected episodes in historic data .",
    "these were unexpected in the sense that at the time these occurred , the problem could not be immediately resolved .",
    "however , subsequent troubleshooting has unearthed the root cause and thus , when we ran our algorithms on the historic data , these episodes could be recognized as very interesting correlations discovered by the algorithm .",
    "we describe , later in this section , some examples of useful unexpected correlations discovered by the algorithm .    through this process of assessment of frequent episodes output by the algorithm we were able to conclude that the algorithm is a useful tool for fault analysis and root cause diagnosis .",
    "it is noted here that this classification of frequent episodes into well - known , expected and unexpected episodes is a continuous ongoing process . with time and with repeated indications of certain causative relationships among faults ,",
    "it is possible that episodes that were once regarded as unexpected can now be classified as expected episodes .",
    "such a situation may arise , for example , when a new machine is installed in the plant , characteristics of which are as yet unknown to the plant engineers . in the next section",
    "we give an example of one such instance , when our algorithms unearthed a correlation involving a new machine and which the plant engineers considered as a very useful discovery .",
    "as was mentioned earlier , the temporal data mining system described in this paper is currently being used as a fault diagnosis tool on the work floor of one gm s engine assembly plants . in this section",
    ", we present a couple of non - trivial ( unexpected ) fault correlations that were discovered in the data  the first is a multiple machines fault correlation unearthed during analysis of some historic data , and the second is an individual faults correlation ( cf .",
    "[ sec : mzaif ] ) that was found after the system was deployed online for fault diagnosis .",
    "when evaluating the utility of our temporal data mining techniques for analysis of the engine plant data , the algorithms were run on some historic machine fault logs from the period of january - april 2004 .",
    "here is an example of a fault correlation in this data slice which could have saved the plant engineers more than two weeks of troubleshooting .",
    "some time during the second week of march 2004 , the plant started facing throughput problems due to repeated failure in a particular station ( referred to as station @xmath25 in this discussion ) .",
    "the root cause for this problem was actually elsewhere in station @xmath26 and this was eventually identified only around the @xmath50 of april 2004 .",
    "an analysis of the machine faults log ( using our frequent episode discovery technique ) showed that the episode @xmath51 was one of the frequent episodes during this period . the analysis is pictorially depicted in fig .",
    "[ fig : co ] starting with @xmath52 march 2004 . the graph plots the cumulative frequency of episode @xmath51 against the date of analysis . in the third week of march 2004 ,",
    "frequency of episode @xmath51 exceeds the frequency threshold , @xmath53 , and hence is regarded by our algorithm as statistically significant ( cf .",
    "[ sec : soe ] ) .",
    "soon after , an alert was generated for this episode because it exhibited an increasing trend of frequency and the frequency and score requirements were met .",
    "thus , if our temporal data mining based fault analysis system had been used in the plant during march - april 2004 , the plant engineers could have been alerted about the rising significance of this multiple machine faults correlation , about two and a half weeks before it was eventually identified by them as the root cause correlation . based on the effective down - time of station @xmath25 due to station @xmath26",
    ", it is estimated that an additional 55 engines could have been built during this time by avoiding these faults .",
    "this is an example of one of the fault correlations whose discovery in the historic data was influential in the final decision by the plant to adopt the technique as a routine tool for fault diagnosis on the factory floor .",
    "next we present an example of an interesting individual faults correlation that was discovered after our system was deployed for online use . during march 2005 ,",
    "the plant was having problems because of a robot ( referred to here as station @xmath54 ) going into a fault mode ( with fault code denoted by @xmath55 here ) from which recovery was not possible without manual intervention .",
    "the fault record ` @xmath56 ' was being repeatedly logged , but the engineers were unable to identify the root cause because this robot , @xmath54 , was newly installed in the plant and so there was very little experience available about its failure patterns to fall back upon . the temporal data mining algorithms , however , identified the root cause of the problem through a significant frequent episode , @xmath57 , in the data .",
    "once the problem @xmath58 was fixed in the station @xmath54 , the fault @xmath55 stopped occurring and smooth running of the line was resumed .",
    "in this paper we have presented an application of temporal data mining in the manufacturing domain .",
    "time - stamped faults logged in an engine assembly plant are mined using the frequent episodes discovery framework .",
    "the faults logged are first partitioned based on the physical layout of machines in the plant , to obtain fault sequences that can be subjected to temporal data mining analysis .",
    "the frequent episode discovery algorithms of @xcite are run on these sequences and the _ significant _ frequent episodes ( or fault correlations ) reported to the plant engineers to assist them in fault diagnosis .",
    "the engineers are particularly interested in fault correlations with certain specific structures and these heuristics are used to filter the frequent episodes output by the system .",
    "our algorithms have been incorporated into a fault diagnosis toolbox in one of gm s engine assembly plants .",
    "the performance of these algorithms was first assessed on some historic data and was considered useful by the plant engineers as an aid for routine troubleshooting on the work floor .",
    "we have reported in this paper , one example of a pattern discovered during historic data analysis .",
    "an interesting aspect of our data mining framework is that there is no need for any detailed modeling of the underlying manufacturing process .",
    "apart from some simple heuristics based on the plant engineers experience , we do not use any other knowledge of the data generation process .",
    "this advantage is highlighted in the second example result reported in sec .",
    "[ sec : seed ] , where the root cause of a problem was in a new machine that was installed in the plant whose characteristics was not yet known to the plant engineers .",
    "this result , we believe , is in the true spirit of one the goals of data mining , namely , to unearth from the data , useful ( non - trivial ) information that was previously unknown to the data owner .    to our knowledge , this is the first instance of the application of temporal datamining in the manufacturing domain . due to the complex interactions among the components in any modern manufacturing system",
    ", such data mining analyses should prove to be useful in many other settings as well .",
    "we hope that the description of our application as reported here would help other practitioners in engineering such applications .",
    "p.  tino , c.  schittenkopf , and g.  dorffner , `` temporal pattern recognition in noisy non - stationary time series based on quantization into symbolic streams : lessons learned from financial volatility trading ( url : citeseer.nj.nec.com / tino00temporal.html ) , '' 2000 .",
    "r.  agrawal , k.  i. lin , h.  s. sawhney , and k.  shim , `` fast similarity search in the presence of noise , scaling and translation in time series databases , '' in _ proceedings of the 21st international conference on very large data bases ( vldb95 ) _ , ( zurich , switzerland ) , pp .",
    "490501 , sept 1115 1995 .",
    "r.  agrawal and r.  srikant , `` mining sequential patterns , '' in _ proceedings of the 11th international conference on data engineering _ , ( taipei , taiwan ) , ieee computer society , washington , dc , usa , mar . 1995 .",
    "s.  laxman , p.  s. sastry , and k.  p. unnikrishnan , `` discovering frequent episodes and learning hidden markov models : a formal connection , '' _ ieee transactions on knowledge and data engineering _ , vol .",
    "17 , pp .  15051517 , nov .",
    "s.  laxman , p.  s. sastry , and k.  p. unnikrishnan , `` discovering frequent generalized episodes when events persist for different durations , '' _ ieee transactions on knowledge and data engineering _ , vol .",
    "19 , sept . 2007 .",
    "s.  laxman , _ discovering frequent episodes : fast algorithms , connections with hmms and generalizations_. phd thesis , dept . of electrical engineering ,",
    "indian institute of science , bangalore , india , mar .",
    "s.  laxman , p.  s. sastry , and k.  p. unnikrishnan , `` a fast algorithm for finding frequent episodes in event streams , '' in _ proceedings of the 13th international conference on knowledge discovery and data mining ( kdd07 ) , san jose _ , aug . 2007 ."
  ],
  "abstract_text": [
    "<S> engine assembly is a complex and heavily automated distributed - control process , with large amounts of faults data logged everyday . </S>",
    "<S> we describe an application of temporal data mining for analyzing fault logs in an engine assembly plant . </S>",
    "<S> frequent episode discovery framework is a model - free method that can be used to deduce ( temporal ) correlations among events from the logs in an efficient manner . </S>",
    "<S> in addition to being theoretically elegant and computationally efficient , frequent episodes are also easy to interpret in the form actionable recommendations . </S>",
    "<S> incorporation of domain - specific information is critical to successful application of the method for analyzing fault logs in the manufacturing domain . </S>",
    "<S> we show how domain - specific knowledge can be incorporated using heuristic rules that act as pre - filters and post - filters to frequent episode discovery . </S>",
    "<S> the system described here is currently being used in one of the engine assembly plants of general motors and is planned for adaptation in other plants . to the best of our knowledge , this paper presents the first real , large - scale application of temporal data mining in the manufacturing domain . </S>",
    "<S> we believe that the ideas presented in this paper can help practitioners engineer tools for analysis in other similar or related application domains as well . </S>"
  ]
}