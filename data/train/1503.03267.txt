{
  "article_text": [
    "in environments like ms excel , the set of built - in features designed to support the users when testing or debugging their spreadsheet programs is quite limited .",
    "examples of the few available features include the visualization of individual cell dependencies or the markup of cells containing suspicious formulas ( `` smells '' in the sense of @xcite or @xcite ) . over the last decades a variety of different tools and techniques",
    "were proposed in the research literature to help the user avoid , locate and remove errors in spreadsheets  @xcite .",
    "the proposed approaches range from intelligent visualizations over test case generation to the application of novel debugging techniques .",
    "many of these testing and debugging approaches assume that the users are able to provide test cases , which contain the expected values for the output cells of their spreadsheets @xcite ; some techniques require the user at least to reliably indicate if an output cell value or a test case is correct or faulty @xcite . providing expected values or even assessing the correctness of individual values",
    "might , however , be challenging for the user in particular when the spreadsheets are large and when no known - to - be - correct test cases are available .",
    "we therefore propose to ( automatically ) modularize the spreadsheet under investigation and ask the user for feedback on the correctness of calculations of smaller and more comprehensible spreadsheet _ fragments_. these fragments in some sense correspond to the concept of _ unit tests _ in standard software development processes based on which the correctness of smaller functional parts of the program can be validated .    the proposed fragment extraction approach is also related to automated refactoring techniques for long methods in imperative programs based , e.g. , on control flow and data flow graphs like in @xcite .",
    "however , spreadsheets have no standard control flow graphs and the data flow graphs are much simpler , because the formulas in the cells do not directly change the values of other cells .",
    "existing refactoring approaches therefore can not be directly applied and further investigations are required to assess how these methods can be adapted to be applicable for the special and defined structure of spreadsheets .",
    "consider the example in figure [ fig : figure_1 ] , which shows the dependency structure of a typical financial calculation sheet adapted from @xcite . in the upper part of the spreadsheet ( fragment a )",
    ", monthly sales data are aggregated with the help of a number of copy - equivalent rows . in the lower part ( fragment b ) , further data aggregation is done and additional calculations are made on the aggregate values . structurally or semantically",
    "different cells are denoted by differently styled circles , e.g. , the empty circles denote input cells or fixed parameters .",
    "let us assume that the spreadsheet developer observes that the `` final outcome '' in the lower right part of the spreadsheet ( cell z ) only meets his expectations for some but not all tested input value constellations .",
    "however , providing the exact expected values  as required by some automated debugging methods @xcite  might be cumbersome for the user and error - prone in particular when the spreadsheet is complex .",
    "in this example , we could  as indicated in figure [ fig : figure_1 ]  have two fragments that can be tested individually and in the case of fragment a use one row of the spreadsheet as a representative for the other copy - equivalent rows . these fragments could be defined manually by the user ; in our work , we are , however , interested in techniques to automatically identify possible fragments and provide adequate tool support .",
    "as spreadsheet developers are usually not it experts or programmers , special care has to be taken when designing a tool for fragment - based testing and debugging .",
    "we therefore plan to integrate the sketched techniques in our model - based debugging plug - in to excel called @xcite . when using this tool , the users can stay within their usual spreadsheet environment ; appropriate user - oriented metaphors for those concepts that are not part of typical spreadsheet tools ( like test cases , fragments , or unit tests ) , however , still have to be found and evaluated with users .",
    "another open question in that context is related to the optimal complexity of the fragments a user should work on .",
    "if the fragments are too small , test cases for too many fragments have to be defined by the user ; if they are complex and span major parts of the spreadsheet , the cognitive effort for the user when providing the test cases might be too high .",
    "the main goal of our work is to develop algorithms and heuristics to automatically extract potentially overlapping fragments that are manageable in size and in the best case semantically connected .",
    "these fragments can then for example serve as a basis for the manual or automated creation of test cases , e.g. , using property - based testing techniques @xcite , where the goal is to automatically create test cases which falsify user - specified properties of the output values . in another scenario ,",
    "the fragments can be used to inspect parts of the spreadsheet which are considered to be `` suspicious '' as a result of a diagnosis or smell detection technique .",
    "we are currently exploring the following fragment construction strategies .      in figure",
    "[ fig : figure_1 ] , only the last four cells on the right of fragment a ( including cell x ) contain formulas .",
    "when the right - most cells of each row are considered suspicious , it can be sufficient to create a fragment which comprises _ one representative row _",
    ", so that the user only has to create one test case for all rows .",
    "on the other hand , the left - most cell of fragment b ( cell y ) is based on the values of several copy - equivalent cells and , e.g. , corresponds to the sum of the monthly sales figures .",
    "if we defined this cell and a subset of its inputs as another fragment c ( not shown in figure [ fig : figure_1 ] ) , the fragment could contain two or more of the copy - equivalent rows such that the user can validate the correctness of the aggregation function , which would be impossible when there is only one input row . with this second technique",
    "the user could , however , miss range errors such as an omitted cell of a sum .",
    "fragments of manageable size like fragment b in figure [ fig : figure_1 ] can be obtained by limiting the depth and maybe also the breadth of the dependency paths leading to a suspicious cell .",
    "the depth limitation could be based on simple path length restriction heuristics or based on structural or semantic considerations , e.g. , by observing that we encounter a set of copy - equivalent cells .",
    "existing techniques developed for spreadsheet visualization and comprehension could be applicable in that context .",
    "the provision of adequate tool support when testing or debugging a calculation fragment is finally a crucial part of our approach . from a ui perspective",
    ", one could for example create a new worksheet which only contains the cells and formulas of the fragment under investigation .",
    "this could however remove context information , as neighboring cells outside the fragment would not be visible . therefore , we propose to only visually dim the cells outside the fragment and make them read - only to help the user focus on the current task .    for debugging purposes , our model - based diagnosis approach presented in @xcite can be used to find the possible causes whenever there is a discrepancy between the expected and the calculated value of an output cell of a fragment . because of the small sizes of the fragments , we conjecture that the combination of these approaches could help to quickly find the faulty formulas .",
    "in addition , the proposed test and debugging environment should be able to automatically create appropriate test cases which are easy to validate manually .",
    "again , existing approaches for test case generation from the literature should be applied .",
    "note that when creating these test cases , input values have to be generated only for the cells at the fragment borders ( e.g. , cell y in fragment b ) . the developed software environment and excel plug - in has furthermore to be extended in a way that test cases can be easily stored , adapted and automatically executed , e.g. , for regression testing .",
    "we argue that providing exact values for expected calculation outcomes in spreadsheet testing and debugging scenarios might be too challenging for users in some situations .",
    "we therefore propose to further investigate approaches in which the given spreadsheet is decomposed into smaller fragments which can be more easily validated by the user ."
  ],
  "abstract_text": [
    "<S> a number of automated techniques and tools were proposed in the research literature over the years which aim to support the spreadsheet developer in the process of testing and debugging a faulty spreadsheet . </S>",
    "<S> one underlying assumption of many of these approaches is that the spreadsheet developer is capable of providing test cases or is at least reliably able to determine whether a calculated value in a certain cell is correct given the current set of inputs .    </S>",
    "<S> since real - world spreadsheets can be complex , we argue that these assumptions might be too strong in some situations . </S>",
    "<S> we therefore propose to support the user during testing and debugging by automatically computing _ spreadsheet fragments _ of manageable size . </S>",
    "<S> the spreadsheet developer can then verify the correctness of a smaller set of formulas for which the calculated output can be more easily validated . </S>"
  ]
}