{
  "article_text": [
    "the ideas of stack sorting and sorting by stacks in series were introduced by knuth in @xcite . in this",
    "he showed that the permutations of length @xmath2 which could be sorted by one stack is the @xmath4 catalan number .",
    "these permutations are the ones that avoid the permutation 231 .",
    "we say that a permutation is _",
    "sortable by a single stack _",
    "if starting at the beginning of a permutation we can put the entries in a stack and remove them from the stack to the output as necessary by a `` last in , first out '' method to get the identity permutation while always keeping the elements in the stack in an increasing order from top to bottom .    _",
    "the permutation 4132 is stack sortable .",
    "_    so when we refer to _ stack sorting using @xmath0 stacks in series _ , we use the same monotonicity rules for each stack , but once the elements leave a stack , they go directly into the next stack .",
    "the elements are put into the output when they have passed through all stacks .",
    "( the elements pass through the stacks from right to left . )    in @xcite , west introduced a right - greedy algorithm to sort permutations by @xmath0 stacks in series .",
    "( the right - greedy algorithm always takes the rightmost legal move . )",
    "he showed that the permutations that it sorted are exactly those that are @xmath0-stack sortable , that is , the permutations that are sorted after running them through one stack @xmath0 times .",
    "( when running the permutation through the stack each time , we use the optimal algorithm for 1-stack sorting , that is , only remove elements from the stack if the next element can not enter the stack without violating the increasing order condition . )",
    "later , atkinson , murphy , and ru@xmath5kuc used a left - greedy algorithm ( always taking the leftmost legal move ) for sorting permutations using two stacks in series in @xcite .",
    "they showed that using this algorithm would sort any permutation that could be sorted by 2 stacks in series .",
    "this allowed them to count the number of such permutations of a given length @xmath2 .",
    "they also determined that these sortable permutations were a closed class .",
    "that is , a permutation was sortable by two stacks in series ( using the left - greedy algorithm ) if and only if it avoided an infinite basis of unsortable permutations .    for more information on stack sorting ,",
    "the reader is encouraged to consult @xcite or @xcite .    in this paper",
    ", we show any permutation that can be sorted by the right - greedy algorithm on @xmath0 stacks in series can be sorted by the left - greedy algorithm on @xmath0 stacks in series . a lower bound on the number of permutations that can be sorted by @xmath0 stacks in series",
    "is shown as well .",
    "we present examples showing that there are many permutations that can be sorted by the left - greedy algorithm , but not the right - greedy algorithm on @xmath0 stacks in series for @xmath1 .",
    "also , examples will be presented showing that the left - greedy algorithm is not optimal for more than two stacks in series and the permutations that are sorted by the left - greedy algorithm for more than two stacks are not a closed class .",
    "the fact that any permutation that can be sorted by the right - greedy algorithm will also be sorted by the left - greedy algorithm on @xmath0 stacks in series will follow from the subsequent lemma .",
    "it is already known for the case when @xmath6 , since both algorithms are the same and when @xmath7 since the left - greedy algorithm is again known to be optimal .",
    "* note : * we will say that an algorithm _ fails _ when we can not move any element to a stack without violating the increasing condition on the stacks , nor can we move the next element of the identity permutation into the output .",
    "define the _",
    "@xmath8 critical moment _ to be the time right before the element @xmath9 would enter the stacks or when the algorithm fails , whichever happens first .",
    "suppose we have @xmath0 stacks in series and let @xmath10 be a permutation .",
    "for every @xmath11 , at the @xmath8 critical moment each element of the permutation is at least as far left by the left - greedy algorithm as it would be by the right - greedy algorithm at its @xmath8 critical moment .",
    "* note : * the output may be considered the furthest left position and the input would be the furthest right position .    * proof : * we use induction on the @xmath8 critical moment .",
    "it is clear that the lemma is true for when @xmath12 and when @xmath13 .",
    "so suppose it is true for @xmath14 and show for @xmath15 .",
    "if @xmath9 can not enter the stacks by the left - greedy algorithm , then let @xmath16 be the first element of the permutation that could not enter the stacks .",
    "if the left - greedy algorithm failed before @xmath16 entered the stacks for @xmath17 , then the right greedy algorithm must have failed before @xmath16 could enter also .",
    "otherwise the induction hypothesis condition would be false since @xmath16 would be further left at the @xmath8 critical moment . if @xmath18 , then there exists a @xmath19 in the rightmost stack when using the left - greedy algorithm .",
    "however if the right - greedy algorithm got even this far without being stuck , then @xmath20 must be in the rightmost stack by this algorithm as well by the induction hypothesis .",
    "therefore the right - greedy algorithm fails by this point also , so the lemma trivially holds for all subsequent @xmath9 s including @xmath21 .",
    "so we may assume that @xmath9 can enter the stacks by the left - greedy algorithm .",
    "also , since we are still trivially done if the right - greedy algorithm fails before @xmath9 enters the stacks , we may assume @xmath9 can enter the stacks by the right - greedy algorithm as well .",
    "so when using the induction hypothesis , we may assume that the stacks using the right - greedy algorithm are as in figure [ rightstacks1 ] , with all elements being at least as far left in the stacks using the left - greedy algorithm as those using the right - greedy algorithm .",
    "when @xmath9 enters the first stack by each algorithm , we still have the condition that each element is at least as far left by the left - greedy algorithm as by the right - greedy algorithm since no elements move left except for @xmath9 moving into the first stack in both algorithms .",
    "the condition continues to hold if we carry out the left - greedy algorithm until it is time for @xmath21 to enter the stacks or the algorithm fails since we are only moving elements left in the stacks using the left - greedy algorithm .",
    "so we now have the stacks that use the left - greedy algorithm being as shown in figure [ leftstacks2 ] and the stacks that use the right - greedy algorithm as shown in figure [ rightstacks2 ] .    now",
    "if when we carry out the right - greedy algorithm until @xmath21 should enter or the algorithm fails and we end up with all elements no further left than they were by the left - greedy algorithm , then we are done .",
    "so suppose there is an element @xmath22 such that @xmath22 was in the @xmath23 stack by the left - greedy algorithm at this point , but @xmath22 moves further left by the right - greedy algorithm before @xmath21 enters . choose @xmath22 to be the first element that this happens for ( in the order of the steps of the right - greedy algorithm ) and look at what is happening when @xmath22 moves from the @xmath23 stack to the @xmath24 stack .",
    "we first note that if such an element exists , the @xmath24 stack is actually a stack and not the output .",
    "this is because @xmath22 would not be in the last stack by the left - greedy algorithm since any element that has already had all elements smaller than it enter the stacks , leaves by the left - greedy algorithm before a new element enters .",
    "thus no element can leave the stacks by the right - greedy algorithm that has not also left by the left - greedy algorithm .",
    "since @xmath22 did not move to the @xmath24 stack by the left - greedy algorithm , there must be an element @xmath25 @xmath22 in the @xmath24 stack at this point by this algorithm . as all elements are no further left by the right - greedy algorithm at the point",
    "when we are about to move @xmath22 from the @xmath23 stack to the @xmath24 stack , it must be that @xmath26 is to the right of @xmath22 at this point using the right - greedy algorithm .",
    "so the stacks sorted by the left - greedy algorithm must be as in figure [ leftstacks3 ] and the stacks sorted by the right - greedy algorithm must be as in figure [ rightstacks3 ] at this point .",
    "because @xmath26 is in the stacks and further right than @xmath22 , if @xmath26 could have moved , it would have priority over @xmath22 by the right - greedy algorithm .",
    "if @xmath26 was not the top element of its stack at this point , then the smaller element at the top of the stack would have priority over @xmath22 .",
    "so there must be a @xmath27 at the top of the stack directly to the left of @xmath26 .",
    "likewise , since @xmath28 is to the right of @xmath22 and it also did nt move , there must be a @xmath29 at the top of the stack directly to the left of @xmath28 as seen in figure [ rightstacks4 ] .",
    "this process continues until we have @xmath22 directly to the left of @xmath30 for some @xmath31 .",
    "but then moving @xmath30 to the @xmath23 stack above @xmath22 would be a further right move than moving @xmath22 .",
    "this is a contradiction to the assumption that moving @xmath22 was the next move by the right - greedy algorithm .",
    "so there is no element that moves further left by the right - greedy algorithm than by the left - greedy algorithm at the @xmath32 critical moment",
    ". therefore the lemma is proved .",
    "any permutation sorted by the right - greedy algorithm on @xmath0 stacks in series is also sorted by the left - greedy algorithm on @xmath0 stacks in series .",
    "* proof : * this argument follows that of the previous lemma in the case of failure at the @xmath8 critical moment .",
    "if the left - greedy algorithm fails , let @xmath9 be the first element of the permutation that could not enter the stacks .",
    "then there exists a @xmath19 in the rightmost stack using the left - greedy algorithm .",
    "however if the right - greedy algorithm got even this far without being stuck , then @xmath20 must be in the rightmost stack by this algorithm as well by the previous lemma",
    ". therefore the right - greedy algorithm also fails .",
    "so to see that the left - greedy algorithm sorts more permutations than the right - greedy algorithm when @xmath1 , we simply need an example of a permutation that is not sortable by t stacks in series using the right - greedy algorithm , but is sortable on @xmath0 stacks using the left - greedy algorithm .",
    "_ for @xmath1 , the permutation @xmath33 is not sortable by @xmath0 stacks in series when using the right - greedy algorithm , but is sortable by @xmath0 stacks in series by the left - greedy algorithm . in fact",
    ", the left - greedy algorithm only needs two stacks in series to sort this permutation regardless of what @xmath0 is . _",
    "[ first ]    let @xmath34 be sortable by the left - greedy algorithm on @xmath35 stacks in series . inserting @xmath2 anywhere in the permutation will result in a permutation @xmath36 that is stack sortable by the left - greedy algorithm by @xmath0 stacks in series .",
    "* proof : * since @xmath37 is sortable on only @xmath38 stacks in series by the left - greedy algorithm , we know that if we try to sort our augmented permutation @xmath36 with the left - greedy algorithm on @xmath0 stacks , as each element in @xmath36 is about to enter the stacks until ( possibly ) after @xmath2 enters , the rightmost stack will be empty .",
    "this is because the left - greedy algorithm would always move the elements in the stacks left before allowing a new element to enter .",
    "so if we could not get one of the original elements of @xmath37 to move out this first stack ( before @xmath2 has the possibility of interfering ) , @xmath37 would not be sortable by the left - greedy algorithm on @xmath38 stacks . because of this , it is clear that all elements up to and including @xmath2 of @xmath36 will enter the stacks by the left - greedy algorithm .",
    "_ claim : _ if we ignore the moves made by @xmath2 , the left - greedy algorithm on @xmath36 proceeds exactly the same way as it does on @xmath37 when we try to sort both by @xmath0 stacks .",
    "_ proof of claim : _ this is evident until the element @xmath2 enters the stacks when sorting @xmath36 . if there is some discrepancy , let moving @xmath22 from the @xmath23 stack to the @xmath24 stack be the first move made on @xmath36 that does not match that on @xmath37 .",
    "say moving @xmath39 from the @xmath40 stack to the @xmath41 stack is the corresponding move on @xmath37 . because the previous moves all corresponded before this point , each element @xmath42 is in the same position for both permutations until we make this move .",
    "note that neither @xmath22 , nor @xmath39 can be leaving the stacks for the output at this time .",
    "this is because both permutations have the same output and if one permutation has an element other than @xmath2 at the top of the leftmost stack , the other has the same element there .",
    "so if the element should be the next out , it is the leftmost move for both .",
    "case 1 : @xmath43 then moving @xmath22 from the @xmath23 stack to the @xmath24 stack is the further left move .",
    "but then @xmath22 should have been able to move when the left - greedy algorithm was applied to @xmath37 as well since there can be no additional elements in the @xmath24 stack for @xmath37 that are not there for @xmath36 .",
    "case 2 : @xmath44 the same argument as in case 1 holds because the only extra element that could be in the @xmath41 stack for @xmath36 is @xmath2 and since all the other elements are smaller , @xmath2 can not prevent another element from moving left .",
    "this completes the proof of the claim .",
    "so since we know @xmath2 can enter the @xmath0 stacks for the permutation @xmath36 using the left - greedy algorithm and all elements @xmath45 can enter the @xmath0 stacks for the permutation @xmath37 by the left - greedy algorithm , by the claim we know all the elements of @xmath36 can enter the @xmath0 stacks when using the left - greedy algorithm . hence @xmath36 is sortable by @xmath0 stacks using the left - greedy algorithm .",
    "it is even easier to show the result is true if we allow any algorithm to be used to sort the permutation .",
    "[ second ]    let @xmath34 be sortable by some algorithm on @xmath35 stacks in series . inserting @xmath2 anywhere in the permutation will result in a permutation @xmath36 that is stack sortable by @xmath0 stacks in series .",
    "* proof : * since we only needed @xmath38 stacks in series to sort @xmath37 by some algorithm * , we may consider an algorithm on @xmath36 that proceeds exactly as * does on the elements originally in @xmath37 except that when the elements first come in , they move one stack further left than they originally stopped . that is , for the elements @xmath42 , the first stack is essentially skipped .",
    "this leaves the first stack open for @xmath2 to enter .",
    "we leave @xmath2 in that first stack until all the other elements have left the stacks and then finally we move @xmath2 through the remaining @xmath35 stacks and into the output , sorting @xmath36 .",
    "( all other elements that enter the stacks after @xmath2 may easily move past @xmath2 since they are smaller than @xmath2 . )    this method of constructing permutations that are sortable by @xmath0 stacks in series does not work if we only want to allow the right - greedy algorithm to sort the permutation .",
    "_ consider the permutation @xmath46 which is sortable by 1 stack using the right - greedy algorithm .",
    "putting @xmath47 into the third position results in the permutation @xmath48 which is not sortable by the right - greedy algorithm on two stacks in series .",
    "_    we can also start with permutations that are sortable by @xmath0 stacks in series to get others that are as well .",
    "let @xmath37 be a permutation of length @xmath49 that is sortable by @xmath0 stacks in series using the left - greedy algorithm .",
    "we may insert @xmath2 into any one of the first @xmath0 positions or into the last position to get a new permutation @xmath36 that is also sortable by @xmath0 stacks using the left - greedy algorithm .    *",
    "proof : * this is clear for when @xmath2 is put in the last position .",
    "so suppose @xmath2 was inserted into one of the first @xmath0 positions .",
    "it is clear that @xmath2 may enter the stacks at its turn since there are at most @xmath38 elements ahead of @xmath2 and there are @xmath0 stacks .",
    "the remainder of the proof follows exactly as the proof for lemma 3.1 .",
    "let @xmath50 .",
    "then the number of permutations of length @xmath2 that are sortable by @xmath0 stacks in series ( using the left - greedy algorithm ) is at least @xmath51 .",
    "* proof : * every permutation of length @xmath52 is sortable by @xmath0 stacks in series using the left - greedy algorithm .",
    "we may insert @xmath53 into any of the first @xmath0 positions or into the last position to get a permutation of length @xmath53 that can be sorted using the left - greedy algorithm on @xmath0 stacks in series .",
    "repeat with @xmath54 .",
    "this gives us @xmath55 .",
    "once again , the previous proposition will also hold for sorting permutations on @xmath0 stacks in series using any algorithm that works . however , we first need the following lemma .",
    "suppose @xmath56 is a permutation that can be sorted by @xmath0 stacks in series by some algorithm .",
    "then there is an algorithm that never needs to leave an empty stack to the left of an element already in the stacks at the @xmath8 critical moment for any given @xmath57 .",
    "* proof : * suppose not . then given an algorithm with a minimal number of stacks left empty at a minimal number of critical moments that does work ,",
    "consider the first critical moment a stack must be left empty .",
    "let @xmath16 be an element in the first nonempty stack to the right of an empty stack .",
    "move @xmath16 one place to the left .",
    "notice that any algorithm that works , can still proceed as before since @xmath16 does not block any element that would have been able to move to left of it had it not been moved .",
    "hence the algorithm still works with one less empty stack at a critical moment .",
    "this is a contradiction .",
    "let @xmath37 be a permutation of length @xmath49 that is sortable by @xmath0 stacks in series .",
    "we may insert @xmath2 into any one of the first @xmath0 positions or into the last position to get a new permutation @xmath36 that is also sortable by @xmath0 stacks .",
    "* proof : * this is clearly true when we insert @xmath2 into the last position .",
    "so assume that @xmath2 was inserted into one of the first @xmath0 positions .",
    "since we do not need to leave empty stacks , it is clear that we may follow an algorithm that works for @xmath37 and @xmath2 can enter the stacks as there are at most @xmath38 elements ahead of it .",
    "after that we may leave @xmath2 in the first stack until we are done carrying out the remainder of the algorithm since @xmath2 will not interfere with any other elements moving into the stacks . finally , move @xmath2 through the remaining stacks and into the output to finish sorting @xmath36 .",
    "however , we do not always get a permutation that is sortable by the right - greedy algorithm when we insert @xmath2 into one of the first @xmath0 positions of a permutation of length @xmath49 that is sortable by the right - greedy algorithm on @xmath0 stacks in series . ( inserting an @xmath2 at the end of such a permutation",
    "is easily seen to produce another permutation that is sortable by @xmath0 stacks in series using the right - greedy algorithm . )    _ the permutation 6372451 is sortable by the right - greedy algorithm by three stacks in series , but 68372451 is not . _",
    "although the left - greedy algorithm sorts any permutation that can be sorted by @xmath0 stacks in series for @xmath6 and @xmath7 , the left - greedy algorithm is not optimal when @xmath3 .",
    "also , the permutations sorted by the left - greedy algorithm are not a closed class when @xmath3 .",
    "( since it is known by @xcite that the permutations sorted by @xmath0 stacks in series is a closed class , this is actually enough to show that the left - greedy algorithm is not optimal for @xmath3 . )",
    "_ let @xmath61 . while it can be seen that the permutation @xmath59 is not sortable by @xmath0 stacks in series using the left - greedy algorithm , the permutation @xmath62 which contains @xmath59 is sortable using the left - greedy algorithm by @xmath0 stacks in series . _          99 m.d .",
    "atkinson , m.m .",
    "murphy , n.  ru@xmath5kuc , sorting with two ordered stacks in series , _ theoretical computer science , _ * 289 * ( 2002 ) , 205 - 223 .",
    "m.  bna , combinatorics of permutations , _ c.r.c . press , _ 2004 .",
    "m.  bna , a survey of stack sorting disciplines , _ electronic journal of combinatorics , _ * 9(2 ) * ( 2002 - 2003 ) a1 .",
    "knuth , fundamental algorithms , the art of computer programming , vol . 1 , 2nd ed .",
    ", addison - wesley , reading , ma 1973 .",
    "_ world scientific , _ 2002 .",
    "j.  west , sorting twice through a stack , _ theoretical computer science , _ * 117 * ( 1993 ) 303 - 313 ."
  ],
  "abstract_text": [
    "<S> we show that the left - greedy algorithm is a better algorithm than the right - greedy algorithm for sorting permutations using @xmath0 stacks in series when @xmath1 . </S>",
    "<S> we also supply a method for constructing some permutations that can be sorted by @xmath0 stacks in series and from this get a lower bound on the number of permutations of length @xmath2 that are sortable by @xmath0 stacks in series . </S>",
    "<S> finally we show that the left - greedy algorithm is neither optimal nor defines a closed class of permutations for @xmath3 . </S>"
  ]
}