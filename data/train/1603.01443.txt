{
  "article_text": [
    "the international monetary fund ( imf ) was formed in 1944 at the bretton woods conference .",
    "currently this international organization consists of 188 countries as members .",
    "its highest decision - making body , i.e. , the _ board of governors _ , makes its decisions by weighted voting .",
    "the weights are composed of _ basic votes _ , which are equal for each member and sum up to 5.502 percent of the total votes , and one additional vote for each special drawing right ( sdr ) of 100,000 of a member country s quota ( the imf term for the country s financial stake , c.f .",
    "@xcite ) . on january 26 , 2016",
    ", the conditions for the sdrs were increased at the board reform amendment , which drastically changed the corresponding voting weights . in general",
    "the weight of a country can be a poor proxy for its influence in a weighted voting game .",
    "to this end , so - called power indices were introduced in order to measure the _ influence _ or _ power _ of a committee member in a committee making its decisions via binary voting , i.e. , each member can say yes or no to a given proposal . as the idea of power and influence is not defined unambiguously , several power indices were introduced in the literature .",
    "arguably , the shapley - shubik and the banzhaf index are two of the most frequently applied power indices .",
    "unfortunately , the evaluation of such a power index is a computational hard problem in general .. ] and indeed , we are not aware of any paper , where either the shapley - shubik or the banzhaf index of the imf board of governors has been computed exactly .",
    "approximation procedures were applied in @xcite .",
    "the _ executive board _ was , e.g. , studied in @xcite .",
    "in this paper we will compute the exact numerical values of both power indices for the imf board of governors corresponding to voting weights slightly after and before the meeting on january 26 , 2016 . as the quota and voting shares will change as members pay their quota increases , see https://www.imf.org/external/np/sec/memdir/members.aspx , we list the used voting weights in tables  [ table_voting_weights_part1]-[table_voting_weights_part4 ] .",
    "algorithms for the efficient computation of power indices in voting games have been studied extensively in the literature . by looping over all @xmath0 subsets of players , the shapley - shubik index of a fixed player",
    "can be easily computed in @xmath1 time .",
    "the straight - forward computation of the banzhaf index of a fixed player can be performed in @xmath2 time . for weighted voting games these computation complexities",
    "were reduced to @xmath3 and @xmath4 in @xcite , respectively .",
    "assuming that all weights are integers and taking the sum of voting weights @xmath5 into account , more refined complexity results can be obtained . several algorithms based on generating functions",
    "were implemented in ` mathematica ` , see @xcite .",
    "those algorithms are fast if the subsets of players attain only few different weight sums .",
    "the number of different weight sums is clearly upper bounded by @xmath6 .",
    "if almost all possible weight sums are attained , then one can use the related but conceptually easier concept of dynamic programming , see @xcite for a survey . with this",
    ", the shapley - shubik index of fixed player can be determined in @xmath7 time and @xmath8 space , where @xmath9 denotes the _ quota _ of a weighted voting game .",
    "the banzhaf index of a fixed player can be computed in @xmath8 time and @xmath10 space . in @xcite these complexity bounds",
    "are maintained for the computation of the respective power indices for all @xmath11 players .",
    "we slightly improve upon these complexity bounds by replacing @xmath12 by @xmath13 , so that we obtain an acceleration of a factor of @xmath14 .",
    "the memory requirements are reduced by the same factor . ]",
    "provide an easy to understand description , and extend the analysis to further power indices . for practical efficiency",
    "we go into low - level details of the algorithms and discuss their impact on the running time for the imf example .",
    "the remaining part of this paper is structured as follows . in section  [ sec_preliminaries ]",
    "we briefly introduce simple games as models for voting systems and some related notation . after introducing the defining equations for the power indices , we consider algorithms for their computation in section  [ sec_algorithms ] .",
    "these are essentially based on counting the number of coalitions per weights and size by dynamic programming techniques . after stating our computational results in subsection  [ subsec_computational_results ] we draw a conclusion in section  [ sec_conclusion ] .",
    "the weights of the considered voting games and the resulting power distributions are outsourced into an appendix due to their large size .",
    "let @xmath15 be the set of players .",
    "a _ simple game _ ( on @xmath16 ) is a mapping @xmath17 with @xmath18 , @xmath19 , and @xmath20 for all @xmath21 .",
    "a subset @xmath22 is called _ coalition _ and represents the set of yes - voters .",
    "a coalition @xmath23 is called _ winning _ if @xmath24 and _ losing _ otherwise .",
    "a simple game @xmath25 is _ weighted _ if there exist @xmath26 such that @xmath24 iff @xmath27 for all @xmath22 , where @xmath28 .",
    "the @xmath29 are called _ weights _ ( for player  @xmath30 ) and @xmath12 is called _",
    "quota_. we write @xmath31 $ ] and remark that weights and quota are far from being unique , so that we speak of a representation @xmath32 for @xmath25 . a representation with @xmath33 , @xmath34 is called _",
    "integer representation_. it is well known that each weighted game admits an integer representation .",
    "be a representation of @xmath25 , let @xmath35 the maximum weight of losing coalition and @xmath36 the minimum weight of a winning coalition .",
    "increase the weights by at most @xmath37 so that they become rational numbers . as quota chose an arbitrary rational number strictly between the new minimum weight of a winning coalition and the new maximum weight of a losing coalition .",
    "multiplication with the common denominator yields an integer representation of @xmath25 . ]",
    "we speak of a _ minimum sum integer representation _ if the sum of weights is minimized within the class of all integer representations .",
    "those representations need not to be unique in general if the number of players is not too small , see e.g.  @xcite . if @xmath38 for all @xmath39 we write @xmath40 , which defines a partial order . if this ordering is complete we call the simple game @xmath25 _ complete _ and remark that all weighted games are complete .",
    "a player @xmath41 is called a _ null player _ ( in a simple game @xmath25 ) , iff @xmath42 for all @xmath43 .",
    "two players @xmath44 are called _ equivalent _ , denoted as @xmath45 , if @xmath40 and @xmath46 . if each winning coalition contains a certain player @xmath30 , she is called _",
    "veto player_.    next we briefly introduce the used power indices",
    ". the _ shapley - shubik _ index of player @xmath30 is given by @xmath47 the _ absolute banzhaf index _ of player @xmath30 is given by @xmath48 if we call a coalition @xmath43 an _ @xmath30-swing _ if @xmath23 is losing and @xmath49 winning , then @xmath50 is equal to the number of @xmath30-swings divided by the number of coalitions with(out ) player  @xmath30 .",
    "normalizing to sum @xmath51 , we obtain the ( relative ) _ banzhaf index _ of player  @xmath30 : @xmath52 the two power indices have the property that they sum up to one and assign a value of zero to a player if and only if she is a null player .",
    "since it is np - hard to decide whether a player is a null player in a given weighted game , see e.g.  @xcite , the computation of the used power indices is at least np - hard .",
    "we remark that the equivalent players attain the same shapley - shubik or banzhaf index .",
    "assume that we have a weighted game @xmath53 $ ] on @xmath11 players in integer representation , where we set @xmath54 . as the complexity of our subsequent algorithms will depend on @xmath55",
    "it would be beneficial to have a minimum sum integer representation at hand .",
    "however , it is not clear if minimizing the integer representation pays off for the computation of power indices , c.f .",
    "@xcite , where this is proposed as a promising strategy .",
    "so , here we propose to perform the following computationally cheap preprocessing steps at the very least .",
    "at first we reduce the weights that are larger then the quota by setting @xmath56 and @xmath57 for all @xmath41 .",
    "next we guarantee that the weights are not too much larger than @xmath58 .",
    "if @xmath59 , then player @xmath30 is a vetoer and we set @xmath60 , @xmath61 , and @xmath62 for all @xmath63 . both operations can be performed in @xmath64 .",
    "the power indices used in this paper do not only assign zero power to all null players but are _ null player preserving _ , i.e. , if @xmath65 arises from @xmath25 by adding null player @xmath30 , then we have @xmath66 for all @xmath67 .",
    "nevertheless , it is np - hard to detect null players we can efficiently remove players with a zero weight , so that we can assume @xmath68 in the following , i.e. , we have @xmath69 .",
    "let @xmath70 denote the number of coalitions of a given weighted game @xmath25 attaining weight @xmath71 . by algorithm  [ alg : coalitions_per_weight_forward ]",
    "we can compute @xmath70 for all @xmath72 in @xmath8 time and @xmath73 space , where we assume that we have precomputed the terms @xmath74 for all @xmath41 .          for the ease of notation",
    "we assume that the basic arithmetic operations for integers not too much larger than @xmath5 can be performed in @xmath79 time and space .",
    "however , the values stored in @xmath70 can grow very quickly , i.e. , we have @xmath80 .",
    "so , we should count @xmath81 for each addition or subtraction . to avoid technical complications in the exposition and in order to be comparable with the related literature",
    "we also assume that all basic arithmetic operations for integers can be performed in constant time . from a practical point of view",
    "we have to deal with the corresponding problems nevertheless . in our application of the imf",
    "we have @xmath82 , so that the values of @xmath70 do not fit into the standard , simple data types on a 64-bit system .",
    "since the overhead of a general - purpose arbitrary - precision arithmetic is quite large , we directly implement the most frequently used basic operations as follows .",
    "we choose different primes @xmath83 , such that all occurring numbers are between @xmath84 and @xmath85 . during the computation",
    "we perform all basic operations modulo @xmath86 for all @xmath87 . for the final result we can recover the real integers behind by applying the chinese remainder theorem . for our example of the imf we choose @xmath88 , @xmath89 , @xmath90 , and @xmath91 . for small @xmath71 ,",
    "has the advantage that the computations can be performed using the standard , simple data type ` unsigned long ` in ` c++ ` .",
    "our choices are indeed the largest possibilities , see e.g.  https://primes.utm.edu/lists/2small/0bit.html .",
    "we remark that a nave checking of the primality of the @xmath86 was performed in @xmath92  seconds .",
    "we implement @xmath93 as @xmath94 and @xmath95 . ]    the number of losing coalitions is given by @xmath96 and the number of winning coalitions is given by @xmath97 .",
    "since the total number of coalitions is @xmath0 , both numbers can be determined in @xmath98 time and @xmath99 space .    for the computation of the banzhaf index we need to know either the number @xmath100 of coalitions with weight sum @xmath71 that contain player  @xmath30 or the number @xmath101 of coalitions with weight sum @xmath71 that do not contain player @xmath30 . for a fixed player @xmath30 we set @xmath102 for @xmath103 .",
    "by looping from @xmath29 to @xmath104 we can recursively compute @xmath105 , so that @xmath106 .",
    "alternatively , we set @xmath107 for all @xmath108 and recursively compute @xmath109 by looping from @xmath110 to @xmath12 , so that @xmath111 .        by @xmath112 we denote the number of coalitions of weight @xmath71 and cardinality @xmath113 ( for a given weighted game @xmath25 ) .",
    "algorithm  [ alg : coalitions_per_weight_forward ] and algorithm  [ alg : coalitions_per_weight_backward ] can be easily adopted to this end . the running time and",
    "the memory requirements both increase by a factor of @xmath11 , since @xmath114 .",
    "we remark @xmath115 for @xmath116 or @xmath117 , assuming @xmath118 .",
    "time and space in a preprocessing step . ]",
    "these known values can be taken into account in the boundaries of the for - loops to save time and memory . by extending the definition and recursion for @xmath101 , @xmath119 to @xmath120 , @xmath121 ,",
    "we can state @xmath122 of course we can precompute the factorials and the product of the @xmath123 pairs of factorials . in our fixed - precision arithmetic",
    "we first compute the sums over the @xmath124 or @xmath125 and then switch to arbitrary - precision arithmetic . for @xmath126 . ]",
    "some real - world voting systems are expressed as the intersection of , say @xmath129 , weighted voting games @xmath130 , i.e. , a coalition is winning if and only if it is winning in all sub - games @xmath130 .",
    "let @xmath131 be the weights sums and @xmath132 be the quotas of the sub - games .",
    "by easily extending our counting functions @xmath70 and @xmath112 to @xmath133 and @xmath134 we can go along the same lines as in the previous two subsections and obtain algorithms with the same complexity bounds if we formally set @xmath135 .",
    "this number may grow very quickly even for moderate values of @xmath129 , so that it may be crucial to choose a representation with a small number @xmath129 of sub - games .",
    "we remark that the smallest possible integer @xmath129 ( for a simple game ) is called _",
    "we have applied the described algorithms for the four weighted voting games arising from the two different sets of voting weights of the imf in 2015 and 2016 , see tables  [ table_voting_weights_part1]-[table_voting_weights_part4 ] , and quotas of either 85% or 50% of the respective weight sums .",
    "are used , see e.g.  @xcite.]all computations were performed on an intel(r ) core(tm ) i7 - 3720qm cpu with a clock speed of 2.60  ghz and 8  gb ram . as a a general - purpose programming language we have chosen c++ and used the cln - library for the arbitrary - precision arithmetic parts",
    ".    for 2016 and super - majority , i.e. , @xmath136 , algorithm 1 needed 4.73 seconds and algorithm 2 needed 0.67 seconds .",
    "the acceleration factor for using the described tailored fixed - precision arithmetic over an arbitrary - precision arithmetic is slightly larger than @xmath137 .",
    "using pointers instead of the stl class ` vector ` results in a speed - up of roughly @xmath138 .",
    "the number of winning coalitions is given by 4506727722110247822679513808100007271801182981184082 .",
    "the entire banzhaf computation , based on algorithm 2 , for all players was performed in less than 3  seconds .",
    "the corresponding ssi computation took less than 7  minutes .",
    "we have listed the power distributions for the years 2015 and 2016 , the cases of super - majority and simple majority , the power indices @xmath139 and @xmath127 in tables  [ table_voting_power_part1]-[table_voting_power_part4 ] using a precision of five decimal digits for the output .",
    "the power of a few countries seem to coincide , which is a numerical artefact , except for france ( @xmath140 ) and the united kingdom ( @xmath141 ) .",
    "to be more precise , those two countries have the same weights in both 2015 and 2016 , so that they are equivalent for all values of the quota @xmath12 . for super - majority and simple majority",
    "all other countries are inequivalent , which may be seen at the exact values of either the banzhaf or the shapley - shubik index .",
    "we have written out the exact integers @xmath142 for the super - majority case in tables  [ table_exact_bz_85_part1]-[table_exact_bz_85_part4 ] . as predicted by theory ,",
    "all values have the same parity . for the exact values of @xmath143 we have @xmath144 as an example for the united states in 2015 in the super - majority case .",
    "the remaining exact values can be obtained from the author upon request .    having a closer look at the different power distributions we observe that the choice of the power index or the quota as well as the modified weights have a significant impact .",
    "the dominance of the united states has further increased from 2015 to 2016 .",
    "interestingly enough , the banzhaf power in the super - majority cases shows almost no difference to , e.g. , japan , which is different for the shapley - shubik index . to obtain a more complete , but still compact , overview about the differences we have introduced @xmath145 , @xmath146 , and @xmath147 , where @xmath148 , @xmath149 , and @xmath150 denotes the corresponding weighted game of the imf .",
    "we evaluate those values on the entire set of countries @xmath16 and on all countries except the biggest five ( united states , japan , germany , france , united kingdom ) @xmath151 , see table  [ table_differences ] ."
  ],
  "abstract_text": [
    "<S> the international monetary fund is one of the largest international organizations using a weighted voting system . </S>",
    "<S> the weights of its 188 members are determined by a fixed amount of basic votes plus some extra votes for so - called special drawing rights ( sdr ) . on january 26 , 2016 </S>",
    "<S> , the conditions for the sdrs were increased at the 14th general quota review , which drastically changed the corresponding voting weights . however , since the share of voting weights in general is not equal to the influence , of a committee member on the committees overall decision , so - called power indices were introduced . </S>",
    "<S> so far the power distribution of the imf was only computed by either approximation procedures or smaller games than then entire board of governors consisting of 188 members . </S>",
    "<S> we improve existing algorithms , based on dynamic programming , for the computation of power indices and provide the exact results for the imf board of governors before and after the increase of voting weights . tuned low - level details of the algorithms allow the repeated routine with sparse computational resources and can of course be applied to other large voting bodies . </S>",
    "<S> it turned out that the banzhaf power shares are rather sensitive to changes of the quota .    </S>",
    "<S> * keywords : * power indices , weighted voting games , international monetary fund , shapley - shubik index , banzhaf index , empirical game theory + * msc : * 91b12 , 91a12 </S>"
  ]
}