{
  "article_text": [
    "* background . *",
    "the graph theory indeed presents relevance with abstract relation among objects .",
    "since author wrote the bots algorithm for graph traversal at april , 2012 , author still studies this problem .",
    "we find the fact that an instance can be computed by bots algorithm without concern the graph classes .",
    "we guess that there is a logic model support this phenomenon , which leads to the approach possess the capacity of data - oriented .",
    "the strategy of equivalent visiting is posed so that we can quantify the process of graph traversal with monotone decreasing function .",
    "the uniform data structure of graph is set up with the method of partition of set , and this core idea may be used to solve other problems of graph , such as graph partition and graph coloring .",
    "it makes these problems may present a quantified model for the abstract relation . and this abstract logic model can guarantee algorithms possess much more general and stronger .",
    "+  * related * work .",
    "we formally state the binary relation on graph",
    ". this relation contribution can be underlying basis for this model .",
    "we repeatedly abstract the basic relation for our new logical mode , and obtain new classes or new properties of relation in new model .",
    "these algorithms we given always may have no associated with weights to each edge or arc .",
    "it makes the new relation is easy to present a practical instance . the theoretical proof and computing of relation",
    "are transformed to algebra of sets .",
    "furthermore , these algorithms present more reliable , intuitive , simple and high precision , although they are heuristic approaches .",
    "first , we introduce bost and obots algorithms , which runtime complexity both are @xmath0",
    ". they can exactly compute any connected graph classes , including difficult mixed graph .",
    "all connected instances may be explored by these algorithms without recursive method as _",
    "_ dynamic programming__@xcite , such that greatly reduce the complexity of program .",
    "we can really and easily achieve the aim of parallel and distributed computing for graph traversal .",
    "graph partition may be independent of weight not like kernighan lin algorithm@xcite , although its runs on time complexity @xmath1 . in this thesis ,",
    "the graph partition actually is a method of cutting graph .",
    "you can arbitrarily choose the nodes on instance for your research of ai , network flow , graph color , physical problems and etc .",
    "it makes the abstract relation among nodes be partition on a sequence of domains for your model of problem .",
    "graph coloring is not a simple labeling each vertex on instance .",
    "it becomes a logical problem for how to cut graph and let those vertices be partitioned to two classes .",
    "author gives two speed - up algorithms bogpc and boerc , which can run in @xmath2 and @xmath3 respectively .",
    "we prove that their precision can be less than and equal to a constant on an instance .",
    "+ * overview .",
    "* author will follow this format : defining objects , exploring the features of objects , proving algorithm , giving pseudocode , computing runtime complexity of approach and finally present exp .",
    "on instance . in these process , we give the discussion or summary to express author s viewpoint with problem .",
    "then this paper is organized as follows .",
    "firstly preliminary knowledge is in section 2 .",
    "section 3 introduces basic definition , properties , method and proofs for graph , including pseudocode of bots and obots , experiments . at the end",
    "give the solving problem of natural number bocps .",
    "the definition and method of graph partition are stated in section 4 . similarly , there are pseudocode , algorithmic complexity and experiment .",
    "section 5 proposes definition of edge and model of graph coloring .",
    "finally we give the formula of graph coloring . of cause",
    ", there show the algorithms bogpc and boerc with concerning complexity .",
    "we will evaluate those algorithms about probabilistic of exploring minimum chromatic value .",
    "the paper is concluded by a summary , a conjecture of _ russell paradox _ and future work in section 6 .",
    "in this paper , we are interested in the connected graph . for each vertex @xmath4 on instance",
    ", there can be at least a path between @xmath4 and the others .",
    "we set each vertex can be labeled with number .",
    "let @xmath5 be a collection of vertices having @xmath6 .",
    "we reserve the letter _",
    "n _ and the term @xmath7 for the number of vertices on an instance",
    ". +  * * partition of a set.**@xcite given a no - empty universal set @xmath8 , there exists a family of sets @xmath9 , which is the partition of @xmath8 , if and only if these following conditions hold :    1 .",
    "@xmath10 2 .",
    "@xmath11 3 .",
    "@xmath12    * * equivalent class partition.**@xcite if there is a binary relation @xmath13 on set @xmath8 , then there is a unique partition set @xmath9 of the set @xmath8 . for each component @xmath14 ,",
    "such that there are properties of reflexivity , symmetry and transitivity among all elements in set @xmath15 with respect to @xmath13 .",
    "+  * * cartesian product.**@xcite given @xmath16 sets @xmath17 , there exists a multiplying sets @xmath18 and return _",
    "n - ordered _ vectors set @xmath19 , in which for these members @xmath20 such that @xmath21 .",
    "given a no - empty and connected graph @xmath22 and vertices set @xmath5 .",
    "consider a pair @xmath23 . if there is a binary relation to characterize a behavior of traversal from vertex @xmath4 to vertex @xmath24 .",
    "we define the binary relation as traversal relation , denote by @xmath25 .",
    "we write the form @xmath26 and @xmath27 to represent this relation on pair @xmath28 .",
    "the ordered pair @xmath29 denotes a direction of left to right .",
    "we reserve the notation @xmath30 equal to the first member in ordered pair , and then one equals to @xmath31 .",
    "[ t1 ] if there is a no - empty traversal relation @xmath25 on an instance @xmath32 , then @xmath33 .",
    "given an instance @xmath32 .",
    "let @xmath25 be a traversal relation on instance . as described in definition of cartesian product , for each pair",
    "@xmath34 such that there is @xmath35 .",
    "observe if pair @xmath36 then @xmath37 .",
    "assume that there is a pair @xmath38 .",
    "then we have @xmath39 , a contradiction to definition of traversal relation .",
    "+    it is obviously that there are some properties in traversal relation as follow :    1 .",
    "reflexivity : if @xmath40 , then there may be @xmath41 .",
    "anti - symmetry : if @xmath27 , then there may be @xmath42 .",
    "anti - transitivity : if @xmath43 , then there may be @xmath44 .",
    "let @xmath25 be a traversal relation on instance @xmath32 . for each vertex @xmath40 such that there may be @xmath45 with definition of cartesian product . then observe that there may be pair @xmath46 with @xmath37 as theorem[t1 ] .",
    "hence , @xmath25 may have property of reflexivity .",
    "consider a pair @xmath42 and there is @xmath27 .",
    "observe that we can not say @xmath47 hence , there is no property of symmetry in @xmath25 .",
    "when there are three vertices @xmath48 and pair @xmath44 , similarly we can not say pair @xmath49 with pairs @xmath50 .",
    "we prove there is no transitive relation in @xmath25 and finish this proof .",
    "+    let @xmath51 be a subset of set @xmath25 . if @xmath52 , for two arbitrary components @xmath53 such that @xmath54 .",
    "we call set @xmath51 _ unit subgraph_. @xmath55 denotes the collection of unit subgraphs .",
    "we reserve the subscript of set @xmath51 equal to the one of first member of each component in set @xmath51 .",
    "+    [ t2 ] let @xmath55 be a collection of unit subgraphs on a traversal relation @xmath25 .",
    "then set @xmath55 is the partition of set @xmath25 .",
    "let @xmath55 be a collection of unit subgraphs on traversal relation @xmath25 .",
    "we aim to prove three conditions hold for set @xmath55 on set @xmath25 .",
    "hence , first we can let set @xmath56 .",
    "consider there is an isolated vertex @xmath57 .",
    "it is certainly that pairs @xmath58 with the definition of traversal relation .",
    "hence for each component @xmath59 , there is no such case @xmath60 with @xmath61 by the definition of unit subgraph .",
    "consider a pair @xmath62 . as the definition of unit subgraph",
    ", there naturally may have a component @xmath59 such that @xmath63 , which subscript is @xmath64 .",
    "hence , we have that @xmath65 and @xmath66 .",
    "assume @xmath67 and having a pair @xmath68 .",
    "there certainly may exist a component @xmath69 and introduce pair @xmath70 to @xmath71 , thus observe there may be @xmath72 , a contradiction . hence @xmath73 and @xmath74 .",
    "consider two components @xmath75 with @xmath76 such that @xmath77 .",
    "assume to @xmath78 .",
    "set a pair @xmath79 .",
    "as the definition of unit subgraph , observe there can be @xmath80 , contradicts the given condition of @xmath76 .",
    "hence @xmath81 . to sum up above ,",
    "set @xmath55 is the partition of set @xmath25 .",
    "+    [ t3 ] unit subgraph is a cartesian product set .",
    "let @xmath82 be a unit subgraph .",
    "we have a term to characterize it as follow @xmath83 the form can be written as follow @xmath84 observe that set @xmath82 is a cartesian product set . +    as the form",
    ", we call term @xmath85 _ root set _ , denote by @xmath86 . call the right set _ leaf set _ , denote by @xmath87 . therefore , the unit subgraph @xmath82 can be abbr . by @xmath88",
    ".    * claim . *",
    "the cardinality of a multiple set is the number of difference members , not be the quantity of members .",
    "we reserve the notation @xmath89 or @xmath90 to represent a component in a multi - set , the @xmath91 is the count of element @xmath92 and @xmath93 .",
    "we call _ group _ for a component containing same and repeated elements .",
    "we define the group minus as that @xmath94 , if and only if @xmath95 .",
    "then the difference value is 0 if @xmath96 .    if there is a multiple set @xmath97 and @xmath98 , i.e. for each pairs @xmath99 such that @xmath100 , then we call set @xmath97 _ multiple traversal relation_. for convenience , we use @xmath101 denote each group in set @xmath97 . the notation @xmath91 is the count of the pairs @xmath102",
    ". +    let @xmath103 be a subset of multiple traversal relation @xmath97 . if @xmath104 , then for two groups @xmath105 such that @xmath54 .",
    "we call set @xmath103 _ weighted unit subgraph _ , and reserve the subscript of set @xmath103 equals to the one of first element of each pair in set @xmath103 . the collection of weighted unit subgraphs we denote by @xmath106",
    ". +    [ t6 ] let @xmath97 be a multiple traversal relation and @xmath106 be a collection of weighted unit subgraphs on set @xmath97 .",
    "then set @xmath106 is the partition of set @xmath97 .",
    "let @xmath106 be a collection of weighted unit subgraphs on multiple traversal relation @xmath97 .",
    "as the definition of weighted unit subgraph , for a group @xmath107 and @xmath108 , there may be @xmath109 such that group @xmath110 may be introduced to set @xmath103 . hence observe @xmath111 if @xmath112 .",
    "if there is @xmath113 , then at least we can have a group @xmath114 . summarizing above ,",
    "it is certainly that there may be a component @xmath109 such that group @xmath115 can be introduced to @xmath103 hence , @xmath116 and @xmath117 .",
    "consider two components @xmath118 with @xmath76 such that @xmath119 .",
    "assume to @xmath120 and at least a pair @xmath121 .",
    "then , we have @xmath80 a contradiction to given condition @xmath76 as described in definition of weighted unit subgraph . hence @xmath122 . for satisfying three conditions for set @xmath106 on set @xmath97 , we understand set @xmath106 is the partition of set @xmath97 .",
    "+    [ d1 ] there is a no - empty traversal relation @xmath25 on graph @xmath22 .",
    "consider each pair @xmath23 and a trail @xmath123 on instance . if the pair @xmath28 lies on trail @xmath123 with a constraint of direction respect to the traversal relation @xmath25",
    ", then we call this constraint _ traversal visiting_.",
    "+    [ t4 ] there is a no - empty multiple traversal relation @xmath97 on an instance g(v ) .",
    "then set @xmath97 characterizes the traversal visiting among all vertices on instance .",
    "given an instance @xmath32 .",
    "let @xmath97 be a multiple traversal relation on it .",
    "consider each pair @xmath124 . if there is a group @xmath125 and no group @xmath126",
    ", it is obviously that there is no traversal visiting on direction @xmath127 , i.e. there is impossible for ordered pair @xmath127 to lie on each trail on instance .",
    "we call this pair _ directed graph_. let @xmath128 .",
    "when @xmath129 , we say there exists a bidirected traversal visiting between pair @xmath130 ; the case is a _",
    "simple graph_. if @xmath131 and @xmath132 , then there are several bidirected and equal visiting to each other",
    ". observe the case is a _ multi - graph_. for @xmath133 and @xmath134 , then there may be unequal visiting opportunities between the pair .",
    "this instance is usually called _",
    "mixed graph_. +    [ t5 ] there is @xmath135 and @xmath136 on an instance @xmath32 .",
    "let @xmath97 be multiple traversal relation and @xmath25 be traversal relation on an instance .",
    "as the described in definition of multiple traversal relation , we have @xmath98 . for each group @xmath137",
    ", there is @xmath138 , if and only if @xmath139 .",
    "then @xmath135 , similarly prove @xmath136 .",
    "+    with theorem[t4 ] , consider given a connected graph , there can be these data structures on it as follow : @xmath140  * claim .",
    "* we reserve the abbr .",
    "@xmath141 or @xmath142 to represent a connected instance with no - empty set @xmath25 or @xmath97 respectively",
    ". +  * section summary . * in this section , author constructs the basic logic for graph , that is @xmath37 with the property of reflexive . in following",
    ", author will gradually abstract the subset of traversal relation to construct new relation for problems . the new glossary _ unit subgraph",
    "_ indeed is an equivalent class partition in set @xmath25 , because there are three properties of reflexivity , symmetry and transitivity in relation of equal first element of each pair in unit subgraph . in set",
    "theory , the equivalent class also is the partition of set , but it is the unique partition of set respect to certain relation . therefore it is the essential data structure for our research in this paper with the feature of uniqueness .",
    "lemma[t5 ] states a fact that all connected graphs can be viewed as an instance of mixed graph on traversal visiting , such that the exact graph traversal algorithms we will show has to cover all connected graph , which method is data - oriented only .",
    "+      there exist two demands for graph traversal , traversing vertices and traversing edges . in this paper",
    ", author only introduces the problem of traversing vertices .",
    "because the data of traversing edges are huge , and the method is similar to traversing vertices too . +      as the definition[d1 ] of traversal visiting , we define a characteristic function @xmath143 as follow @xmath144 because of the case @xmath135 with lemma[t5 ] , therefore we must consider the group weight @xmath145 . then the characteristic function @xmath146 will be converted to map the group with weight to the binary set as follow @xmath147 now when the program enumerates the possible vertices , the program only needs to scan the leaf sets and checks the weights .",
    "the characteristic function @xmath148 provides a method of judgment to ensure enumerating valid vertices .",
    "let @xmath8 be the subset of leaf set .",
    "the weighted unit subgraph is entry parameter .",
    "we define the enumerating operator @xmath149 as follow @xmath150    let @xmath151 be a subset of set @xmath25 . if @xmath152 . for two arbitrary pairs",
    "@xmath153 such that @xmath154 , then we call set @xmath151 _",
    "visiting set_. the collection of visiting sets we denote by @xmath155 ; and reserve the subscript of component in set @xmath155 equals to the one of then element in each pair in native component .",
    "use @xmath156 to denote the set of all first elements in pairs and the then elements set is @xmath157 .",
    "it is easy to prove visiting set is a cartesian product set like unit subgraph .",
    "+    [ a1 ] let @xmath155 be a collection of visiting sets on set @xmath25 . then set @xmath155 is the partition of set @xmath25 .",
    "there is a collection @xmath155 of visiting sets on set @xmath25 . as the described in definition of visiting set , for a pair @xmath62",
    ", then there may exist a visiting set @xmath158 and @xmath159 .",
    "hence , observe that for each component @xmath160 , there may be @xmath161 and @xmath162 .",
    "assume to @xmath163 and at least a pair @xmath164 .",
    "there may be a visiting set @xmath165 such that pair @xmath166 can be introduced to set @xmath167 .",
    "hence there is a contradiction of @xmath168 then , @xmath169 .",
    "consider two components @xmath170 with @xmath76 such that @xmath171 .",
    "assume to @xmath172 and a pair @xmath173 .",
    "with definition of visiting set , we can have @xmath174 a contradiction to given condition of @xmath76 .",
    "hence @xmath175 summarizing , we can understand set @xmath155 is the partition of set @xmath25 . indeed , the proof is in same fashion with unit subgraph , because they both are two equivalent classes on set @xmath25 . +    let @xmath176 be a subset of set @xmath97 . if @xmath177 .",
    "for two arbitrary groups @xmath178 , such that there is @xmath154 .",
    "we call the set @xmath176 _ multiple visiting set _ , the collection of multiple visiting sets denote by @xmath179 . we reserve the subscripts of components in set",
    "@xmath179 equals to the ones of then elements in each group in native component .",
    "+    [ a2 ] let @xmath179 be a collection of multiple visiting sets on set @xmath97 .",
    "then set @xmath179 is the partition of set @xmath97 .",
    "indeed we aim to prove three conditions hold for set @xmath179 on set @xmath97 . with the same fashion of proof in theorem[t6 ] , it is clearly for us to prove the fact on set @xmath97 .",
    "here we need not do the repeated work again .",
    "+    let @xmath180 be a collection of cartesian product of set @xmath5 on an instance @xmath181 , having @xmath182 with @xmath183 .",
    "let @xmath184 be a member in set @xmath180 .",
    "if for each ordered pair @xmath185 lies on sequence @xmath184 , such that there is ordered pair @xmath186 , then we call sequence @xmath184 _ connected path_. +    [ p ] let @xmath184 be a connected path on graph @xmath181 and @xmath179 be a collection of multiple traversal visiting sets .",
    "if there is such an approach of cutting graph , for each group @xmath187 such that @xmath188 , then we call this approach _ equivalent visiting_. sequence @xmath184 is called _ equivalent visiting path_. +    with definition[p ] , we define the equivalent visiting operator @xmath189 as follow    @xmath190    [ a3 ] let @xmath184 be an equivalent visiting path on graph @xmath181 .",
    "there is an approach of equivalent visiting on path @xmath184 .",
    "consider a group @xmath191 and @xmath192 .",
    "then the weight @xmath91 may be converged to 0 by invoking equivalent visiting operator @xmath189 if group @xmath193 lies on @xmath184 and @xmath194 .",
    "let @xmath184 be an equivalent visiting path on an instance @xmath181 , on which there is an approach of equivalent visiting .",
    "we set there is a component @xmath195 with @xmath192 .",
    "consider a group @xmath196 .",
    "if @xmath197 , we can understand that equivalent visiting operator @xmath189 do nothing inducing from the inner characteristic function @xmath198 , as definitions of these functions .",
    "+ if @xmath199 , then the @xmath91 may be self - subtract - one and returned by operator @xmath189 inducing from inner function @xmath200 .",
    "consider the vertex group @xmath187 with @xmath201 . as described in definition of equivalent",
    "visiting , this case can lead to @xmath202 , such that there is @xmath203 by iteratively invoking operator @xmath189 .",
    "when @xmath204 , the function @xmath205 would return with nothing , thus we can understand that while for @xmath206 , the function @xmath189 can not continue to compute @xmath91 as the inducing from function @xmath207 .",
    "hence , the @xmath91 can be converged to 0 .",
    "+    [ a4 ] let @xmath179 be a collection of multiple visiting sets and @xmath184 be an equivalent visiting path on instance . if for each component @xmath195 and each group @xmath208 such that @xmath209 , then for each vertex group @xmath210 and @xmath211 , we have @xmath212 .",
    "let @xmath179 be a collection of multiple visiting sets and @xmath184 be an equivalent visiting path on instance @xmath181 .",
    "for each component @xmath195 , we let @xmath213 represent all weights of groups in set @xmath176 .",
    "consider vertex @xmath211 and having group @xmath210 with @xmath201 . as the definition of equivalent visiting",
    ", there is @xmath214 . because the @xmath215 , we have that @xmath216 for @xmath217 .",
    "it implies the fore equation can be view as an iterative equation @xmath218 with @xmath219 .",
    "let @xmath220 . when @xmath221 , for each @xmath222 such that there is @xmath223",
    ". then we have each @xmath224 with lemma[a3 ] , and the number set @xmath225 converges at 0 . for each weight of group",
    "@xmath166 is equal to 0 , the enumerating function @xmath226 can not introduce vertex @xmath4 to path @xmath184 as a valid vertex again .",
    "then for each vertex @xmath4 , such that at most there are @xmath227 possibilities on path @xmath184 .",
    "namely , @xmath212 .",
    "if @xmath228 , we can set @xmath151 is a constant , then @xmath229 with formula @xmath214 .",
    "hence , the case does not exist with respect to invoking enumerating functiuon @xmath226 .",
    "because of this theorem shows the maximum possibility of visiting a vertex , author call it _",
    "equivalent visiting maximum value theorem_. +    [ a5 ] let @xmath184 be an equivalent visiting path on a finite and no - empty instance @xmath181 . then path @xmath184 can be convergent .    given a finite and no - empty graph @xmath181 .",
    "let @xmath184 be an equivalent visiting path .",
    "consider each group @xmath210 with @xmath201 , then there is @xmath211 such that @xmath230 .",
    "further we can understand the term equals to @xmath231 with set @xmath179 is partition of set @xmath97 as theorem[a2 ] .",
    "let @xmath232 and @xmath151 be a constant .",
    "we can see sequence @xmath184 as a discrete point - sequence for iterated function @xmath233 , and have    @xmath234    observe the function @xmath233 is iterative and monotone decreasing with input @xmath151 . because of instance being finite , therefore @xmath233 can be convergent at 0",
    ". then path @xmath184 converges , to which function @xmath226 can not introduce any vertex with all weights equal to 0 .",
    "similarly consider the end - node @xmath235 on current path @xmath184 with @xmath236 .",
    "for each group @xmath237 , if each @xmath91 equals to 0 , even nor @xmath233 converges at 0 , then path similarly converges .",
    "assume the path is infinite .",
    "as the described in theorem[a4 ] , there are infinite weights , and then it implies that at least a number of a pair is infinity .",
    "then , this assumption contradicts the condition of finite instance .",
    "+    [ a6 ] let @xmath184 be an equivalent visiting path on graph @xmath181 and @xmath179 be a collection of multiple visiting sets .",
    "consider each maximum weight @xmath238 in each component @xmath195 . then @xmath239",
    ".    given a finite and no - empty graph @xmath181 .",
    "let @xmath184 be an equivalent visiting path on graph @xmath22 . with lemma[a5",
    "] , the path @xmath184 is convergent .",
    "consider each component @xmath195 , in which the maximum weight of group is @xmath238 .",
    "with theorem[a4 ] , we understand that each vertex @xmath57 can lie on path @xmath184 for at most @xmath238 possibilities .",
    "hence there is @xmath240 , if @xmath241 as described in lemma[a5 ] .",
    "+ consider there is such case , of which each weight of group in weighted unit subgraph equals to 0 as input for enumerating function @xmath226 .",
    "the function @xmath226 can return with nothing .",
    "the path @xmath184 can be forced to converge even nor @xmath241 .",
    "its length can be shorter than @xmath242 .",
    "hence , @xmath239 it holds .",
    "+    [ a7 ] if there are self - cycles on an instance @xmath243 , then they are invalid traversal visiting on equivalent visiting .    given a no - empty graph @xmath244 .",
    "let @xmath57 and pair @xmath245 .",
    "there is pair @xmath246 and its weight equals 1 as the definitions of unit subgraph and visiting set . if there is an approach of equivalent visiting on instance . when the vertex @xmath235 lies on path @xmath184 , as the definition of equivalent visiting , we have @xmath247 . then the weight of pair @xmath248 will be forced to subtract 1 , such that enumerating operator @xmath226 can not introduce vertex @xmath235 again .",
    "hence , the approach can not traverse self - cycle , i.e. the self - cycle equals to an empty traversal visiting on instance .",
    "+    here author briefly shows the viewpoint about the case of self - cycle on simple graph : the self - cycle at least is an instance of _",
    "russell paradox_. look at the term @xmath246 above .",
    "when we partition the set @xmath25 with the relations of @xmath54 or @xmath154 , we can not say the self - cycle is arriving or leaving on vertex .",
    "thus the method of equivalent visiting on simple graph would filter out self - cycle as the symmetry relation of leaving and arriving .    on an instance , if an approach obtains those equivalent visiting paths depend on iteratively and alternately invoking enumerating function @xmath226 and equivalent visiting function @xmath189 to enumerate vertices and modify the traversal relations , we call this approach _ based on table search _ , abbr . by _",
    "bots_.    [ a8 ]",
    "the approach bots can enumerate every equivalent visiting path on a simple graph @xmath244 .",
    "given a no - empty graph @xmath244 .",
    "let @xmath184 be a connected path on graph .",
    "consider a pair @xmath249 with @xmath250 .",
    "if vertex @xmath235 lies on path @xmath184 , bots would invoke operator @xmath189 such that @xmath251 with lemma[a5 ] .",
    "if having pair @xmath252 , then there can be @xmath253 , moreover its weight equals to 0 .",
    "but for pair @xmath254 such that it weight is still 1 .",
    "hence , bots can introduce vertex @xmath255 to path @xmath184 by invoking the function @xmath226 to scan the leaf set in subgraph @xmath82 .",
    "hence , function @xmath189 can not affect this work of function @xmath226 . with the weight of pair @xmath256(@xmath257 )",
    "is equal to 0 , while the bots scan the leaf set in subgraph @xmath258 , it can not enumerate vertex @xmath235 as the next valid vertex . the method of equivalent",
    "visiting prevents repeated visiting , but not to block enumerating vertices , which weights are equal to 1 .",
    "+ consider the reasons of search terminating .",
    "let vertex @xmath235 be current node on path @xmath184 .",
    "if @xmath259 , as the described in theorem[a4 ] the enumerating operator @xmath226 can return with nothing , then the length of path @xmath184 may be less than or equal to @xmath260 . if @xmath261 , then the path is a dead - end path . otherwise , the path is a hamiltonian path .",
    "namely , the bots may enumerate all connected paths on graph @xmath22 .",
    "+    author gave two equivalent classes for traversal relation , so that we can define two operators on these classes .",
    "their works can interactively constraint each other , according to the constraint of traversal visiting and method of equivalent visiting .",
    "consequently , the approach of bots has no necessary to be a recursive method . because there is not any demand of traversing a mixed graph or multi - graph , therefore author",
    "will not argument those problems in this paper .",
    "hence all works stop at simple graph traversal .      here",
    "we will discuss the problem on the level of program .",
    "summarize the augments above , we can obtain some conclusions as follow : the traversal relation can be organized as a table , in which unit subgraph can be a unit of data .",
    "we can evaluate the longest length of path .",
    "when the enumerating function returns an empty set , we know this search work on current path is over .",
    "hence , we need define three set for approach as follow : first is the set _ stack _ , in which there are the path waiting for search . set _",
    "p _ is second , which is a path containing a sequence of vertices in process of current exploring . and",
    "then set _ r _ stores the final results and returns finally .",
    "the following pseudocode for the approach is given as algorithm    [ cols=\"<\",options=\"header \" , ]     with rough viewpoint , program need do much more works of comparing among arrays to remove the repeated data .",
    "such that the price of runtime and memory increase quickly .",
    "because of @xmath262 on dodecahedron figure , therefore it must at least enumerate civss for two times .",
    "let @xmath263 represent the first loop , and similarly the second one has @xmath264 .",
    "then there exists a combination formula @xmath265 such that we have a number of combination @xmath266 , i.e. there is a search breadth of 3969 .",
    "we can evaluate the number of combination for a given instance as follow @xmath267 we can let @xmath268 , then complexity is @xmath269 .",
    "it is similar to the current approaches .",
    "* summary . * in this work we studied how to cut graph actually , with such logic structure @xmath270 .",
    "we proved that some problems can be quantified so that it can be a basic relation model for applications .",
    "similarly , we proved some axioms in current theory and show why some things are so hard to us .",
    "the algorithmic contribution focused on the data - structure such that solve the problem of general . in the process , the equivalent class , unit subgraph is the keypoint .",
    "it let us freely choose the method to abstract basic relation for construct new logic model .",
    "for example we abstract the edge relation from it , and finally construct two classes , with those properties of symmetry and transitivity .",
    "in fact , there are more methods to abstract this binary relation for problems such as ai , flow network , tsp . due to limited space of page",
    ", author can not continue to do these works .",
    "* future * work . a wide range of possible future work exists for present abstract relation among those objects , e.g. tsp .",
    "we give the cutting graph by bogpc or boerc . for among each civs",
    ", those edges are the bridges between two arbitrary domains of vertices , and for those domains indeed , there exists the relation of inequivalence - color among them .",
    "it lets us may have a nice condition to use the _ greedy algorithm _ to exactly solve this problem , so that graph coloring is not a pure problem of graph theory .",
    "further for ai , we can use graph partition to characterize the process of solving some problems based on @xmath271 conditions .",
    "finally , we pose the conjecture in following",
    ". +  * conjecture .",
    "* there are two binary relation @xmath13 and @xmath272 with @xmath273 on a universal set @xmath274 , which lead to two equivalent classes @xmath275 and @xmath276 on @xmath274 respectively .",
    "if for @xmath277_{\\rho}\\cap [ a_i]_{\\bar{\\rho}}$ ] such that @xmath278 , then @xmath279 is _",
    "russell paradox_. + _ reason",
    ". _ self - cycle appears in graph traversal but vanishing in edge relation . and traversal relation justly possesses property of reflexivity without symmetry , to contrary for edge relation . and we can find the equivalent classes for traversal relation in @xmath280 , but not on edge relation .",
    "99 bellman , r. ( 1960 ) , `` combinatorial processes and dynamic programming '' , in bellman , r. , hall , m. , jr .",
    "( eds . ) , combinatorial analysis , proceedings of symposia in applied mathematics 10 , american mathematical society , pp .",
    "kernighan , b. w. ; lin , shen ( 1970 ) .",
    "`` an efficient heuristic procedure for partitioning graphs '' .",
    "bell systems technical journal 49 .",
    "lucas , john f. ( 1990 ) .",
    "introduction to abstract mathematics .",
    "rowman & littlefield .",
    "isbn 9780912675732 .",
    "burnstein , ilene ( 2003 ) , practical software testing , springer - verlag , p. 623",
    ", isbn 0 - 387 - 95131 - 8 hazewinkel , michiel , ed .",
    "( 2001 ) , `` direct product '' , encyclopedia of mathematics , springer , isbn 978 - 1 - 55608 - 010 - 4"
  ],
  "abstract_text": [
    "<S> in this paper , author uses set theory to construct a logic model of abstract figure from binary relation . based on the uniform quantified structure , </S>",
    "<S> author gives two logic system for graph traversal and graph coloring respectively , moreover shows a new method of cutting graph . around this model , </S>",
    "<S> there are six algorithms in this paper including exact graph traversal , algebra calculation of natural number , graph partition and graph coloring . </S>"
  ]
}