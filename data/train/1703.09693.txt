{
  "article_text": [
    "the study of networks has become increasingly relevant in our understanding of the technological , natural , and social sciences .",
    "this is owing to the fact that many important systems in these areas can be described in terms of networks @xcite , where vertices represent the system s individual components , e.g. computer routers , neurons , individuals , etc . and where edges represent interactions or relationships between these components .",
    "an essential feature of the large majority of these networks is that they have a dynamic topology , i.e. a structure of interactions that evolves over time @xcite .",
    "the structure of social networks , for instance , change over time as relationships are formed and dissolved . in information networks such as the www the network s structure changes as information is created , updated , and linked .",
    "although understanding the mechanisms that govern this structural evolution is fundamental to network science , these mechanisms are still poorly understood .",
    "consequently , predicting a network s eventual structure , function , or whether the network is likely to fail at some point are all currently out of reach for even simple networks .    in an attempt to determine which processes cause changes in a network s structure we are lead to the following link prediction problem : given a network , which of the _ links _",
    ", i.e. edges between existing vertices , are likely to form in the near future . here",
    "we adopt the standard convention that links are to be predicted solely on the basis of the network s current topology ( see , for instance , @xcite ) .",
    "importantly , the link prediction problem can be used to study more than just which edges will appear in a network .",
    "it can also be used to predict which of the non - network edges are , in fact , in the network but currently undetected . similarly , it can be used to detect which of the current network edges have been falsely determined to be a part of the network .",
    "this notion of link prediction is of central importance in numerous applications .",
    "companies such as facebook , twitter , and google need to know the current state and efficiently predict the future structure of the networks they use to accurately sort and organize data @xcite .",
    "biologists need to know whether biochemical reactions are caused by specific sets of enzymes to infer causality and so on @xcite .",
    "the barrier in determining whether network links truly exist in these and other settings , is that testing and discovering interactions in a network requires significant experimental effort in the laboratory or in the field @xcite .",
    "similarly , determining experimentally when and where a new link will form may also be impractical , especially if the precise mechanism for link formation is unknown .",
    "for these reasons it is important to develop models for link prediction .    at present",
    ", there is an ever increasing number of proposed methods for predicting network links @xcite .",
    "not surprisingly , certain methods more accurately predict the formation of links in certain networks when compared with others . additionally , each of these methods has a runtime that scales differently with the size of the network . in our experiments",
    ", we discover that a number of link predictors have a runtime that is so high that it effectively prohibits their use on moderately large networks .    here",
    "we propose a class of link predicting algorithms that scale to large networks .",
    "this method , which we refer to as the _ approximate resistance distance predictor _ , integrates a spectral embedding of the network with a known algorithm for efficiently finding the @xmath0 closest pairs of points in euclidean space .",
    "the spectral embedding aspect of the algorithm is derived as a low - rank approximation of the effective resistance between network vertices , as in @xcite .",
    "the @xmath0 closest pairs component of the algorithm is taken from @xcite and can be used to predict links based on this embedding .    here",
    "we compare the prediction accuracy and runtime of this method against several well - known algorithms on a number of coauthorship networks and a social network consisting of a small subset of facebook users .",
    "we find that our method is achieves the best accuracy on some networks and scales to networks that many other link predictors can not .",
    "the paper is structured as follows . in section [ sec : linkpred ] we describe the link prediction problem and outline a number of standard link prediction algorithms . in section [ sec : spectral ]",
    "we introduce the method of resistance distance embedding and prove that it is optimal as a low rank approximation of effective resistance ( see proposition [ prop : resistance_distance_approx ] ) . in section [ sec : setup ]",
    "we describe the experimental setup .",
    "section [ sec : results ] numerical results comparing the performance of the resistance distance embedding algorithm to other algorithms are given . section vi concludes with some closing remarks including a number of open questions for future work .",
    "the link prediction problem can be stated as follows . given a connected graph @xmath1 , and @xmath0 , the number of predicted nonadjacent links , we seek @xmath0 pairs of vertices which are most likely to become connected . while the choice of @xmath0 depends on the application , we adopt the convention that @xmath2 .",
    "the general paradigm for link prediction is to compute a similarity metric @xmath3 on each vertex pair @xmath4 .",
    "the predicted links are then the @xmath0 @xmath5 for which @xmath3 is maximal . by contructing a matrix from the scores ,",
    "we obtain a _ graph kernel_. we can also go in the other direction .",
    "any real @xmath6 matrix , where @xmath7 , defines a score function on pairs of vertices , and can be used for link prediction .",
    "we now give a sampling of existing link prediction algorithms .      a _ local method _ for link prediction",
    "is an algorithm that uses vertex neighborhoods to compute similarity .    *",
    "common neighbors : * common neighbors simply assigns @xmath8 where @xmath9 is the neighbor set for @xmath10 .",
    "* jaccard s coefficient : * jaccard s coefficient is a normalized version of common neighbors that takes into account the total number of neighbors for both vertices .",
    "it is given by @xmath11    * preferential attachment : * preferential attachement is based on the idea that highly connected nodes are more likely to form links , an observed pattern in coathourship networks @xcite .",
    "this leads to @xmath12    * adamic - adar : * @xmath13    * resource allocation : * @xmath14      _ path - based methods _ consider all or a subset of the paths between two vertices to compute similarity .",
    "unlike local similarity measures , they can capture global information about the network .",
    "* shortest path : * this link predictor defines @xmath3 as the negated length of the shortest path from @xmath15 to @xmath16 .    *",
    "katz : * the katz metric counts all paths between two nodes , and discounts the longer paths exponentially .",
    "define @xmath17 to be the set of all paths of length @xmath18 from @xmath15 to @xmath16 . then given a weight @xmath19 ,    @xmath20",
    "a closed form for the associated graph kernel is given by @xmath21 = @xmath22 , where @xmath23 is the adjacency matrix of @xmath24 .",
    "a _ random walk _ on g starts at some node x and iteratively moves to new nodes with uniform probability .",
    "there are a multitude of link predictors based on random walks .",
    "these are some of the fundamental ones .",
    "* hitting and commute time : * the _ hitting time _",
    "@xmath25 is the expected number of steps required to reach @xmath16 in a random walk starting at @xmath15 .",
    "commute time is defined as @xmath26 . negated hitting time",
    "can be used as a link predictor , but the hitting time is assymetric in general , so we use instead the negated commute time , which is symmetric .    the commute time and its variants will be discussed further in section [ sec : spectral ] .",
    "* rooted page rank : * a problem with hitting and commute time is that random walks can become lost exploring distant portions of the graph .",
    "rooted page rank deals with this problem by introducing random resets . given a root node @xmath15 , we consider a random walk starting at @xmath15 . at each step , with probability @xmath27 the walk returns back to @xmath15 .",
    "with probability @xmath28 the walk proceeds to a random neighbor . given a root node @xmath15 , for each other node @xmath16 ,",
    "@xmath3 is defined as the stationary probability of @xmath16 under the random walk rooted at @xmath15 .",
    "the corresponding graph kernel is given by @xmath29 , where @xmath30 is the degree matrix and @xmath23 is the adjacency matrix .",
    "many link predictors , such as katz , require the computation of a matrix inverse .",
    "this is heinously expensive for large networks , as it is cubic in the number of vertices .",
    "one way to circumvent such problems is via a low - rank approximation of the score matrix .",
    "we investigate such a low - rank approximation for the commute - time or resistance distance kernel in the next section .",
    "even the simpler local predictors such as common neighbors or preferential attachment face difficulties at scale .",
    "this is because for sufficiently large networks , it is not possible to compute scores for each pair of vertices and then find the maximal ones . instead",
    ", efficient search techniques must be employed to search only a small subset of the potential links in order to find those of maximal score . in section",
    "[ sec : spectral ] we will demonstrate how a class of graph embedding based predictors can efficiently find the @xmath0 links of maximal score .",
    "we begin by deriving the _ approximate resistance distance link predictor _ as a best low - rank approximation to commute time and show how to evaluate its link prediction scores with a spectral embedding .",
    "we then show that this link predictor is part of a family of graph embedding based link predictors that use the @xmath0 closest pairs algorithm to efficiently find the links of maximal score .",
    "finally , we discuss efficient ways to compute the spectral embedding upon which the approximate resistance distance predictor relies .",
    "let @xmath31 = @xmath32 be the laplacian matrix of a graph @xmath33 , and let @xmath34 = @xmath35 .",
    "let @xmath36 be the moore - penrose inverse of l. then the commute time is given by @xmath37 where the quantity @xmath38 is known as the _ effective resistance _ or the _ resistance distance _ @xcite . since resistance distance differs from commute - time by a ( network - dependant ) constant scaling factor , they can be used interchangeably for link prediction .    for many networks ,",
    "@xmath24 is too large to compute @xmath36 exactly , so an approximation must be used .",
    "a natural choice is a best rank-@xmath39 approximation to @xmath36 for some fixed dimension @xmath39 .",
    "the resulting approximation of the resistance distances is closely related to distances between points in euclidean space .",
    "[ prop : resistance_distance_approx]let @xmath39 be a positive integer and let @xmath33 be a connected , undirected graph .",
    "then @xmath40 a best rank-@xmath39 approximation @xmath41 of @xmath36 , and a map @xmath42 so that @xmath43 @xmath44 , @xmath45 .",
    "we call this map the _ resistance distance embedding_.    @xmath46 for a connected graph , the laplacian matrix is positive semidefinite , with eigenvalues @xmath47 and corresponding eigenvectors @xmath48",
    ". then we have the spectral decompositions @xmath49 and @xmath50 hence , @xmath51 is a best rank-@xmath39 approximation to @xmath36 in the 2-norm . then note @xmath52 @xmath53 @xmath54 @xmath55 where @xmath56^{t } \\in r^{d}\\ ] ]    we define the _ approximate resistance distance link predictor _ of dimension @xmath39 by setting @xmath57 where @xmath41 and @xmath58 are defined as in proposition [ prop : resistance_distance_approx ] .    in the next section , we will see that the approximate resistance distance link predictor is part of a class of link predictors that avoid brute - force search when predicting links .",
    "the resistance distance embedding is a special case of a _ graph embedding _",
    ", which is a map @xmath58 from @xmath59 to @xmath60 , @xmath39 a positive integer .",
    "we can use graph embeddings to create link predictors .",
    "a natural choice is to set @xmath3 = @xmath61 , ( so maximizing score corresponds to minimizing distance ) .",
    "we refer to this score function as the _",
    "euclidean score_.    if @xmath58 is the resistance distance embedding , then link prediction with the euclidean score is equivalent to the approximate resistance distance predictor . recall that the approximate resistance distance score function is @xmath62 .",
    "the @xmath0 predicted links of maximal score correspond to the @xmath0 nonadjacent pairs of vertices @xmath4 for which @xmath62 is maximal .",
    "these are precisely the @xmath0 links for which @xmath63 is minimal and are predicted with the euclidean score .",
    "link prediction with the euclidean score is related to the @xmath0 _ closest pairs problem_. the closest pairs problem is as follows .",
    "given a set of vectors @xmath64 we seek the k unordered pairs @xmath65 of minimal distance ( here we use the euclidean norm but any @xmath66 norm can be used , @xmath67 ) .",
    "there is an algorithm to solve this problem in @xmath68 @xcite .",
    "we can think of the link prediction problem as the closest pairs problem applied to the set of vectors @xmath69 , with the additional constraint that the best pairs must correspond to non - edges in @xmath24 .",
    "the extra constraint can be handled by finding the @xmath70 closest pairs , then selecting the best @xmath0 which are non - edges .",
    "as there can be no more than @xmath71 edges , this approach is sure to work .",
    "we then have the worst - case complexity bound of @xmath72    recalling that we require @xmath2 , and assuming that @xmath24 is connected so @xmath73 , this complexity bound can be simplified to @xmath74 for large , sparse networks , @xmath75 , and this is a tremendous speedup over the @xmath76 brute - force approach .",
    "* cosine similarity score : * another link prediction score function that can be derived from a graph embedding is the cosine similarity score , defined by @xmath77    if the cosine similarity score is used , the link prediction problem can still be solved without brute - force search .",
    "it is equivalent to the link prediction problem with euclidean score on a modified graph embedding .",
    "the modified embedding is obtained from the original by normalizing the embedding vectors as follows .",
    "[ prop : cosine_score ] given a graph embedding @xmath78 , the link prediction problem using @xmath79 is equivalent to the link prediction problem with the euclidean score function on the modified embedding given by @xmath80 .",
    "@xmath46 let @xmath44 .",
    "note @xmath81 we have @xmath82 @xmath83 this shows that minimizing euclidean distance for the modified embedding is the same as maximizing cosine similarity score on the original , so link prediction with euclidean score on the modified embedding is equivalent to link prediction with the cosine similarity score on the original .",
    "this section introduced a class of link predictors that avoid a brute - force search when predicting links .",
    "these link predictors rely on a precomputed graph embedding .",
    "the graph embedding needs to be efficiently computable in order for the overall prediction algorithm to be fast .",
    "we are concerned with link predictors that rely on the resistance distance embedding .",
    "consequently , rapid computation of this particular graph embedding is the subject of the next section .",
    "computing the resistance distance embedding of dimension @xmath39 requires finding the smallest @xmath39 nonzero eigenvalues and associated eigenvectors of the laplacian matrix @xmath31 .",
    "fortunately , specialized , efficient algorithms exist for this problem which exploit the positive semi - definiteness and sparsity of @xmath31 .",
    "these include tracemin - fiedler @xcite and a multilevel solver mc73_fiedler @xcite .",
    "tracemin - fiedler is simpler to implement , and is also parallelizable , so we use it in our experiments .",
    "in this section we compare the performance of our link prediction algorithm to others on several large social networks . in a social network , nodes correspond to persons or entities .",
    "edges correspond to an interaction between nodes , such as coauthouring a paper or becoming linked on a social media website .",
    "* arxiv high energy physics theory ( hep - th ) : * this network is a coauthorship network obtained from the konect network collection . @xcite .",
    "* arxiv high enery physics phenomenology ( hep - ph ) : * this is another coauthorship network from the konect network collection @xcite .    *",
    "facebook friendship ( facebook ) : * this social network consists of a small subset of facebook users , where edges represent friendships @xcite .",
    "* arxiv condensed matter physics ( cond - mat ) : * this dataset was obtained from mark newman s website @xcite , and is also a coathourship network . unlike the other datasets , the edges are not timestamped .",
    "in order to perform link prediction , we partition edges into a training set and a test set .",
    "edges in the training set occur before those in the test set and are used to construct a training graph .",
    "we run link prediction algorithms on the training graph to predict the contents of the test set . in most cases",
    ", edges have timestamps , and we can choose a cutoff time to partition the edges .",
    "for one network ( cond - mat ) the edges are not timestamped",
    ". however , there are two versions of the cond - mat network available .",
    "one contains all collaborations up to 2003 .",
    "the second is an updated network with all collaborataions up to 2005 .",
    "we use the first network as the training graph .",
    "the test set consists of all edges in the second network for which both nodes are in the earlier network .",
    "choosing the cutoff between the training and test edges is somewhat arbitrary .",
    "if too few edges are used for training , link predictors will struggle .",
    "if too few are left for testing , then results may be statistically insignificant .",
    "see table [ table : train_net_stats ] for a comparison of the training networks and original networks .",
    ".training network statistics [ cols=\"^,^,^,^ \" , ]",
    "we present a link prediction framework that can scale to very large networks by avoiding the quadratic costs inherent in methods that exhaustively search all candidate pairs of nonadjacent nodes .",
    "we investigated the performance of a set of predictors based on this framework and the spectrum and eigenvectors of the graph s laplacian matrix .",
    "these methods achieved high levels of accuracy on certain real - world link prediction tasks , and scaled well to networks with tens of thousands of nodes and millions of edges .",
    "we emphasize that there are many other possible graph embeddings to invesitigate .",
    "virtually all the runtime of our spectral link predictors is spent computing the resistance distance embedding .",
    "the @xmath0 closest pairs component of our algorithm is very fast in practice , with nearly linear temporal complexity in the number of edges replacing the resistance distance embedding with one that is cheaper to compute could potentially produce link predictors that can scale to much larger networks than the ones we consider in this paper .",
    "our approximate resistance distance link predictor was derived as a low - rank approximation of resistance distance , an established link prediction score that is expensive to compute .",
    "many other well - known predictors are expensive to compute , such as katz and rooted page rank .",
    "there is much room to explore low - rank approximations of such predictors and investigate whether they can be converted into accurate , scalable , graph embedding based , link predictors of the form we considered .",
    "+   + * funding * + this work was supported by the defense threat reduction agency [ grant number hdtra1 - 15 - 1 - 0049 ] .",
    "quercia , d. , askham , h. & crowcroft , j. ( 2012d ) tweetlda : supervised topic classification and link prediction in twitter . in",
    "_ proceedings of the 4th annual acm web science conference _ , pp . 247250 .",
    "acm .",
    "fouss , f. , pirotte , a. , renders , j .-",
    "m . & saerens , m. ( 2007h ) random - walk computation of similarities between nodes of a graph with application to collaborative recommendation .",
    "_ ieee transactions on knowledge and data engineering _ , * 19*(3 ) .",
    "manguoglu , m. , cox , e. , saied , f. & sameh , a. ( 2010k ) tracemin - fiedler : a parallel algorithm for computing the fiedler vector . in",
    "international conference on high performance computing for computational science _ , pp .",
    "449455 . springer ."
  ],
  "abstract_text": [
    "<S> many link prediction algorithms require the computation of a similarity metric on each vertex pair , which is quadratic in the number of vertices and infeasible for large networks . </S>",
    "<S> we develop a class of link prediction algorithms based on a spectral embedding and the @xmath0 closest pairs algorithm that are scalable to very large networks . </S>",
    "<S> we compare the prediction accuracy and runtime of these methods to existing algorithms on several large link prediction tasks . </S>",
    "<S> our methods achieve comparable accuracy to standard algorithms but are significantly faster . </S>",
    "<S> link prediction ; graph embedding ; commute time ; resistance distance ; closest pairs . </S>"
  ]
}