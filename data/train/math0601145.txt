{
  "article_text": [
    "much recent work has been done on the knot invariants defined by counting homomorphisms from a knot quandle into a finite target quandle ( @xcite , @xcite , etc . ) .",
    "a _ quandle _ is the algebraic structure obtained by assigning a generator to each arc in an oriented knot diagram with a binary operation at each crossing  specifically , set @xmath2 when @xmath3 is the overcrossing arc , @xmath4 the arc on the right - hand side of @xmath3 when looking in the positive direction of the oriented arc @xmath3 , and @xmath5 is the arc on the left - hand side of @xmath3 .",
    "the axioms are then derived from the reidemeister moves , resulting in an algebraic structure which is an invariant of knot type .",
    "it is well - known that the knot quandle is a complete invariant of classical knot type up to reflection , though in general quandle - equivalent knots need not be ambient isotopic .",
    "one way of strengthening the resulting invariant is to repeat the procedure used to derive the quandle definition from knot diagrams with _ semiarcs _ in place of arcs  instead of dividing our oriented knot diagram into arcs by breaking the diagram at the undercrossing points , we now also break it at overcrossing points",
    ". these semiarcs are oriented edges in the underlying 4-valent graph of the knot diagram .",
    "if we think of the two inbound semiarcs as the inputs to binary operations , then at each crossing we have two output semiarcs ; since there are two types of crossings , this yields four binary operations . comparing the semiarc labels around the edge of the circle before and after a minimal set of oriented reidemeister moves gives us a set of axioms .",
    "the resulting algebraic structure is called a _ biquandle _ ; see @xcite , @xcite , @xcite , and @xcite , for example .    in this paper ,",
    "we study finite biquandles using a matrix notation similar to the quandle matrix notation in @xcite ; these finite biquandles define invariants of virtual and classical knots via homomorphism counting much like finite groups and finite quandles .",
    "the paper is organized as follows : in section [ sec : biq ] , we give the biquandle definition and prove some results about finite biquandles . in section [ sec : inv ] we define the biquandle counting invariant and our biquandle matrix notation . in section [ sec : invex ] we exhibit finite biquandles whose counting invariants distinguish the virtual trefoil and various kishino knots from the unknot , and a biquandle whose counting invariant distinguishes a virtual knot from its reflection and from its reverse ( sometimes called the _ knot inverse _ ) . in section",
    "[ last ] we describe our algorithms for finding finite biquandles and computing the counting invariant , and we give a classification of finite biquandles with up to 4 elements .",
    "a file containing the maple code used to obtain these results can be obtained at the first author s website at ` www.esotericka.org/quandles ` .",
    "we wish to thank the referee for helpful suggestions and comments .",
    "we begin by recalling a definition from @xcite .",
    "@xmath6     @xmath7     @xmath8 @xmath9     @xmath10    this definition is obtained by dividing an oriented knot or link diagram at every crossing point to obtain a collection of _",
    "these semiarcs are the edges of the knot diagram considered as a 4-valent graph enhanced with crossing information .",
    "the two inbound semiarcs then operate on each other to yield the two outbound semiarcs , with different operations at positive and negative crossings as depicted in figure 1 .",
    "the axioms are then transcriptions of a minimal set of oriented reidemeister moves which are sufficient to generate any other oriented reidemeister move .",
    "axioms ( 1 ) and ( 2 ) come from the direct and reverse type ii moves respectively , axiom ( 3 ) comes from the two type iii moves with all positive and all negative crossings , and axiom ( 4 ) comes from the type i move .",
    "@xmath11    let @xmath12 be a biquandle and define the _ obverse _ of @xmath12 , @xmath13 , to be the algebra obtained from @xmath12 by interchanging the right operations with the left ones , and let the _ flip _ of @xmath12 , @xmath14 , be the algebra obtained by interchanging the upper operations with the lower operations .",
    "then @xmath15 , @xmath16 and @xmath17 are also biquandles .    here",
    "we only need to observe that the set of axioms is symmetrical under the operation of interchanging the right and left operations and upper and lower operations .",
    "inspection shows that this hold for axioms ( 1 ) , ( 3 ) and ( 4 ) . to see that axiom ( 2 ) also satisfies this symmetry , consider the following equivalent reformulation of axiom ( 2 ) :     @xmath18@xmath19    we will also need the following definition ( see @xcite or @xcite ) :    as expected , we have the following :    the knot biquandle of the obverse of a knot is the obverse of the biquandle of the original knot .",
    "the knot biquandle of the flip of a knot , that is , of the knot viewed from the other side of its supporting surface , is the flip of the biquandle of the original knot .",
    "if a knot is classical , then flipping is an ambient isotopy and the resulting biquandle must be isomorphic to its flip .",
    "if a virtual knot is non - classical , however , the flip of its biquandle may not be isomorphic to the original knot biquandle .",
    "let @xmath12 be a biquandle .",
    "then the automorphism groups @xmath20 , @xmath21 , @xmath22 and @xmath23 are all isomorphic .",
    "let @xmath24 be an automorphism .",
    "then for all @xmath25 , we have @xmath26 @xmath27 @xmath28 , and @xmath29",
    ". then when viewed as a map from @xmath15 to itself , switching the right and left operations both before and after applying the map @xmath30 gives us back the same set of equalities , and @xmath31 .",
    "similarly for the other cases .    to define biquandle presentations in terms of generators and relations , for a finite set @xmath32 we start by defining the set of _ biquandle words in @xmath32 _",
    ", @xmath33 , to be the set which includes all elements of @xmath32 together with all finite strings of the forms @xmath34 where @xmath35 .",
    "then the _ free biquandle on @xmath32 _ is the set of equivalence classes in @xmath33 under the equivalence relation generated by the relations required by the biquandle axioms above , e.g. @xmath36 , @xmath37 , @xmath38 , etc .",
    "a _ finitely presented biquandle _ is then the quotient of the free biquandle on a finite set @xmath32 by the equivalence relation generated by a finite list of equivalences of biquandle words , which we may call _ explicit relations _ to distinguish them from the required by the biquandle axioms .",
    "see @xcite for more on the universal algebra of biquandles .    for any virtual knot diagram @xmath39",
    ", we obtain a presentation of the _ knot biquandle _ by assigning a distinct generator to every semiarc and obtaining a pair of relations at every crossing according to the diagrams in figure 1 .",
    "the knot biquandle is then quotient of the free biquandle on the set of semi - arcs in the virtual knot diagram by the set of relations at each crossing ; it is an invariant of virtual isotopy by construction .",
    "in particular , if we number the semiarcs in a knot biquandle sequentially following the orientation of the knot , then every relation is of the form @xmath40 and we can unambiguously specify a knot biquandle as a vector whose @xmath41th entry is the operation in the explicit relation with input @xmath41 . this vector notation can easily be translated into a gauss code ( @xcite ) or an sokq presentation ( @xcite ) .    every virtual knot or link biquandle is knotlike . unlike the knot quandle , given a knotlike biquandle presentation we can reconstruct the virtual knot or link it comes from up to strictly virtual moves .",
    "this is consistent with the following conjecture ( see @xcite ) :    the knot biquandle is complete invariant of virtual link type .",
    "that is , if two knotlike biquandle presentations are related by tietze moves , then the resulting virtual link diagrams are related by virtual isotopy moves .    as with other algebraic invariants of knots and links , direct comparison of isomorphism types of biquandles given by presentations is generally difficult .",
    "thus , we seek invariants of biquandle isomorphism type , which are naturally also knot invariants .",
    "one such invariant is the counting invariant associated to a finite biquandle , described in the following section .",
    "let @xmath42 be a finite biquandle and @xmath39 a finitely presented biquandle , e.g. a knot biquandle .",
    "as with groups and quandles , we have the following theorem ( see also @xcite ) :    the cardinality @xmath43 of the set of homomorphisms from @xmath39 to @xmath42 is an invariant of biquandle isomorphism type and hence an invariant of virtual isotopy .    if @xmath44 is an isomorphism then for every @xmath45 we have @xmath46 and for every @xmath47 we have @xmath48 .",
    "hence we have both @xmath49 and @xmath50 , so @xmath51 .",
    "thus , for every finite biquandle @xmath42 , the number of homomorphisms into @xmath42 is an invariant of virtual ( and hence classical ) knot type . in order to find and evaluate such invariants , then , we need a way of representing finite biquandles . in @xcite , finite quandles @xmath52 of order @xmath0",
    "are represented as @xmath53 matrices with @xmath54 where @xmath55 . to represent finite biquandles as matrices , we use the following block matrix notation .",
    "@xmath56 \\qquad \\mathrm{where } \\qquad   m^l_{ij } = k_l,\\quad   x_{k_l}=\\left\\{\\begin{array}{ll } x_i^{\\bar{x_j } } , & l=1 , \\\\",
    "x_i^{x_j } , & l=2 , \\\\ ( x_i)_{\\bar{x_j } } , & l=3 , \\\\ ( x_i)_{x_j } , & l=4 .",
    "\\end{array}\\right.\\ ] ]    @xmath57\\ ] ] @xmath58,\\quad bt_3 = \\left[\\begin{array}{ccc|ccc }   1 & 1 & 1 & 1 & 1 & 1 \\\\ 2 & 2 & 2 & 2 & 2 & 2 \\\\ 3 & 3 & 3 & 3 & 3 & 3   \\\\ \\hline   1 & 1 & 1 & 1 & 1 & 1 \\\\ 2 & 2 & 2 & 2 & 2 & 2 \\\\ 3 & 3 & 3 & 3 & 3 & 3   \\end{array}\\right ] , \\quad \\mathrm{etc.}\\ ] ]    even though the biquandle axioms , unlike the quandle axioms , do not require uniqueness of right inverses under the four biquandle operations , we have    [ fb1 ] if @xmath12 is a finite biquandle , then the right inverses under each of the four actions are unique .    axiom ( 2 )",
    "part ( v ) says that for every @xmath25 there is a @xmath5 such that @xmath59 .",
    "that is , for a given element @xmath60 , every element of @xmath12 must appear at least once in the column of @xmath3 in the @xmath61 block of the matrix of @xmath12 .",
    "since there are only @xmath0 available positions and @xmath0 elements which must appear , every element appears exactly once .",
    "similarly for @xmath62 .    to see uniqueness for @xmath63 , note that axiom 2 part ( iii ) is equivalent to `` for all @xmath25 there exist @xmath64 such that @xmath65 and @xmath66 . '' in particular",
    ", every element @xmath3 must appear in some row @xmath5 in column @xmath4 , and as before we have uniqueness .",
    "similarly for @xmath67 .",
    "thus , we have one easily checked condition for a block matrix to be the matrix of a finite biquandle , namely that each block must have columns which are permutations .",
    "the condition arising from the type i move is also easy to check visually :    [ fb2 ] if @xmath68 is one of the four submatrices of a finite biquandle , then every row of @xmath68 has exactly one entry equal to its column number in @xmath68 .",
    "axiom ( 4 ) implies that every row contains at least one entry which equals its column number .",
    "now suppose row @xmath41 has @xmath69 and @xmath70",
    ". then since every column is a permutation , no entry appears more than once in a column , so no other row has a @xmath71 in column @xmath71 or a @xmath72 in column @xmath72 . then of the remaining @xmath73 rows , at most @xmath74 have an entry equal to its column number , and @xmath68 is not a biquandle submatrix .",
    "let @xmath12 be a finite biquandle .",
    "if the lower submatrices of @xmath12 are both trivial matrices @xmath75 , i.e. if @xmath76 and @xmath77 for all @xmath78 , then the upper submatrices of @xmath12 form a quandle matrix and its dual .",
    "if the lower operations are trivial , then the biquandle axioms reduce to    for every @xmath25 we have @xmath79 and @xmath80    for all @xmath25 there is an @xmath81 such that @xmath82 and a @xmath83 such that @xmath84 .    for every triple @xmath85 we have @xmath86 and @xmath87 .    for every @xmath4 in @xmath12",
    ", we have @xmath88 and @xmath89    but these are just the quandle axioms ; ( 1 ) and ( 2 ) together give us quandle axiom ( ii ) , while ( 3 ) is quandle axiom ( iii ) for a quandle and its dual , and ( 4 ) is quandle axiom ( i ) for a quandle and its dual .    let @xmath90 be a finite quandle . then there is a corresponding finite biquandle with matrix @xmath91,\\ ] ] where @xmath92 is the matrix of @xmath90 , and @xmath93 is the matrix of the dual of @xmath90 , and @xmath75 is the matrix of the trivial quandle of order @xmath0 .",
    "such a biquandle is self - obverse iff @xmath90 is self - dual , and self - flip iff @xmath90 is trivial .",
    "a biquandle with both lower ( or both upper ) operations trivial is really a quandle in disguise , which we call a _ quandle biquandle _ or a _",
    "qbiq_. thus , to find new knot invariants using finite biquandles , we seek biquandles in which the lower ( or upper ) operations are non - trivial ; we call such biquandles _ non - quandle biquandles _ or _",
    "non qbiqs_.    in the next section we give a few examples to illustrate the usefulness of biquandle counting invariants .",
    "to compute the counting invariant we first obtain a presentation of the knot biquandle for the virtual knot or link in question .",
    "we represent such a presentation with a _ biquandle presentation matrix _ in which each short - form relation fills in an entry in one of the biquandle submatrices , and the remaining entries are zero .",
    "thus , an @xmath0-crossing knot or link has a @xmath94 biquandle presentation matrix with exactly @xmath95 non - zero entries .    [ un ] @xmath96.\\ ] ]    [ vt ] @xmath97.\\ ] ]    the counting invariant for a non - quandle biquandle can give us information not present in the knot quandle .",
    "for instance , the virtual trefoil in example [ vt ] has trivial knot quandle ( though it has nontrivial jones polynomial ) ; however , the biquandle counting invariant with target biquandle @xmath98\\ ] ] distinguishes the virtual trefoil from the unknot , as we have @xmath99 where @xmath100 and @xmath101 are the biquandles of the unknot and the virtual trefoil as described above .",
    "@xmath102.\\ ] ]    note that , unlike quandles and groups , for a given pair of biquandles there may or may not be a homomorphism between the pair ; thus a biquandle counting invariant can take any non - negative integer value , including zero .",
    "indeed , we have    let @xmath42 be a finite biquandle and let @xmath103 be the number of elements of @xmath42 which are idempotent in all four operations .",
    "then for any finitely presented biquandle @xmath12 , the counting invariant with target @xmath42 satisfies @xmath104    if @xmath105 is idempotent in all four operations , that is , if @xmath106 then for any biquandle @xmath12 with @xmath0 generators , the constant map sending all generators to @xmath4 satisfies any possible list of relations and hence is always a biquandle homomorphism .",
    "attempting to compute a complete list of finite biquandles even for small order quickly becomes computationally very resource - hungry . to find suitable finite target biquandles for use in counting invariants , then , it can be helpful to look for _ biquandle completions_.    since filling in a zero amounts to adding a new explicit short relation , a completion is actually a finite quotient of the original biquandle .",
    "in particular , a completion of the presentation matrix of a knotlike biquandle @xmath107 is a finite quotient biquandle @xmath42 onto which there is a surjective homomorphism . more generally , for any labelling of the semi - arcs in a knot diagram with numbers @xmath108 such that no two crossings have the same input labels",
    ", we can form the resulting biquandle presentation matrix and look for completions .    as with quandles , knot biquandles",
    "are connected , though link biquandles in general are not .",
    "hence , for finding new knot invariants , we are primarily concerned with finding finite connected non - quandle biquandles .",
    "of particular interest are finite non - quandle biquandles which are not self - flip and not self - obverse . as with quandles and groups , two isomorphic biquandles",
    "define the the same knot invariant ; however , the flip or the obverse of a non self - flip or non self - obverse biquandle generally defines a different invariant from that defined by the original .",
    "our results in section [ last ] indicate that all biquandles with order @xmath109 are self - obverse .",
    "non self - obverse biquandles can be used to distinguish some virtual knots from their obverses  if @xmath110 or equivalently if @xmath111 , then @xmath39 is not isotopic to its obverse .",
    "@xmath112.\\ ] ]    in the last section we describe an algorithm for finding finite biquandles , including completions , and give a classification of all finite biquandles with up to 4 elements .",
    "a file called ` biquandles-maple.txt ` containing maple code implementing the following algorithm is available for download at ` www.esotericka.org/quandles ` ; we have chosen not to include it here as it is rather lengthy .    our code represents a finite biquandle internally as a vector of four matrices rather than one large block matrix . our first program , `",
    "biqtest ` , checks a list of four @xmath53 matrices for the biquandle axioms , returning `` true '' if the list represents a finite biquandle and `` false '' if any axiom is not satisfied .",
    "much of the work in finding finite biquandles is done by ` biqfill ` , which takes as input a biquandle pattern consisting of four @xmath53 matrices with entries in @xmath113 .",
    "an entry of zero counts as a blank ; our matrix notation lets the entries act both as biquandle elements and as submatrix row and column numbers .",
    "overall , ` biqfill ` is a loop controlled by two variables , a `` changed '' counter and a `` contradiction '' counter .",
    "the program systematically checks a working biquandle pattern for each of the axioms .",
    "when the contradiction marker is set , the program skips the remaining checks , exits the loop and reports `` false '' . setting the `` changed '' counter to `` true ''",
    "tells the program to repeat the loop , propagating the changed value through the matrix .",
    "biquandle axioms ( 1 ) and ( 3 ) each assert that various biquandle words corresponding to entries in the matrices should be equal ; if enough entries are non - zero to determine the positions of the two entries in question , the entries are compared .",
    "if the two entries are equal , the algorithm moves on ; if one is zero and the other non - zero , the zero entry is changed to match the non - zero entry and the `` changed '' counter is set to true ; if both entries are non - zero and not equal , then the `` contradiction '' counter is set to true .",
    "axiom ( 2 ) makes assertions about the right inverses of the various biquandle operations ; ` biqfill ` tests for these , again setting the contradiction counter if the pattern violates one of the axioms and filling in zeroes when possible . for axiom",
    "( 4 ) , the contradiction counter is set to `` true '' if any row has no zeroes and no entry equal to its column number or if any row has more than one entry equal to its column number . when a row has one entry equal to its column number , the corresponding entry in the upper or lower matrix is checked and filled in or the contradiction counter is set as appropriate .",
    "the equations in axiom ( 3 ) come from the oriented versions of the third reidemeister move with all three crossings of the same sign . to speed up the search algorithm",
    ", we include the equations arising from the other oriented reidemeister iii moves , which are consequences of axioms ( 1)-(3 ) . finally , `",
    "biqfill ` checks each column , looking for any which have only one zero ; such zeroes are filled in or contradictions detected with the program ` avail ` , which finds the smallest available entry for the specified positions which does not contradict propositions [ fb1 ] and [ fb2 ] or returns `` false '' if no such entry exists . if the `` contradiction '' counter evaluates to `` true '' at any point ,",
    "the loop is exited and ` biqfill ` returns `` false . '' at the end of the loop , if the `` changed '' counter evaluates to `` true '' then the loop is repeated ; if not , the program reports the new pattern and exits .",
    "the program ` biqlist ` takes a starting biquandle pattern and starts a working list .",
    "the program removes the first biquandle pattern from the working list , then uses ` bfindzero ` and ` ratezero ` to find the zero entry most likely to complete a row , column , or reidemeister iii word , then systematically fills in the zero with each possible entry returned by ` avail ` . for each such value",
    ", the pattern is run through ` biqfill ` and any patterns returned are added to the end of the working list .",
    "when a pattern has no remaining zeroes , it is transferred to the output list ; when the working list is empty , the program reports the output list . `",
    "biqlist ` is useful for finding biquandle completions for knot biquandles , and we used it to find all biquandles of order 2 , 3 and 4 as well as several biquandles of orders 5 and 6 .    to compute the biquandle counting invariant , we use ` bhomlist ` which represents a map @xmath114 as a vector @xmath115 $ ] where @xmath116 this program starts with a vector of all zeroes and keeps a working list of vectors , systematically filling in zeroes with each possible entry and using ` bhomfill ` to propagate the values through the vector as required by the homomorphism conditions , removing any maps which violate the homomorphism conditions . once all zeroes have been filled in , each completed homomorphism is moved to the output list , and once the working list is empty , the output list is reported .",
    "the program ` bhomcount ` reports the cardinality of the list output by ` bhomlist ` , that is , the value of the counting invariant for the input presentation and target biquandles .",
    "` bhomlist ` can compute the set of homomorphisms from any biquandle presentation matrix to any finite biquandle . since a finite biquandle matrix is itself a presentation matrix",
    ", we can use ` bhomlist ` to determine whether any pair of finite biquandles are isomorphic and to compute the automorphism group of any finite biquandle . `",
    "bisolist ` lists the isomorphisms from one finite biquandle to another , giving an empty list if the two are non - isomorphic . `",
    "baut ` computes the automorphism group of a finite biquandle .    `",
    "obv ` gives the obverse of a biquandle matrix , ` flip ` gives the flip .",
    "the program ` breducelist ` takes a list of biquandles and removes any which are isomorphic to previous biquandles on the list , their flips , their obverses , or their obverse flips . for long lists of biquandles , it may be necessary to split the list into smaller lists first .",
    "we used ` biqlist ` and ` breducelist ` to classify finite biquandles of order 2 , 3 and 4 ; the results are lists in tables [ t1 ] through [ t8 ] .",
    "there are 36 biquandles of order 3 , which comprise 15 isomorphism classes .",
    "five of these are isomorphic to the flip , obverse , or obverse flip of one of the ten listed biquandles of order 3 .",
    "there are 744 biquandles of order 4 , which reduce to 64 when isomorphic copies , flips and obverses are removed . in the interest of space , we have listed only the non - quandle biquandles of order 4 . in the tables we have noted whether a biquandle is self - flip and listed the automorphism groups computed with ` baut ` ."
  ],
  "abstract_text": [
    "<S> we describe a way of representing finite biquandles with @xmath0 elements as @xmath1 block matrices . any finite </S>",
    "<S> biquandle defines an invariant of virtual knots through counting homomorphisms . </S>",
    "<S> the counting invariants of non - quandle biquandles can reveal information not present in the knot quandle , such as the non - triviality of the virtual trefoil and various kishino knots . </S>",
    "<S> we also exhibit an oriented virtual knot which is distinguished from both its obverse and its reverse by a finite biquandle counting invariant . </S>",
    "<S> we classify biquandles of order 2 , 3 and 4 and provide a url for our maple programs for computing with finite biquandles .    </S>",
    "<S> keywords : finite biquandles , virtual knots , knot invariants    2000 msc : 57m25 , 57m27 </S>"
  ]
}