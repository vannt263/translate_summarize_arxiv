{
  "article_text": [
    "in this section we provide definitions for a model of nondeterministic computation by automata with an auxiliary read - only memory .",
    "the definitions fix an informal idea explained in the introductory section .",
    "they follow the standard way of definition for computational models .    a _ memory model _ is a directed graph @xmath9 , the initial cell @xmath10 and a marking map @xmath11 from the edges of the graph to some finite set @xmath12 .",
    "the marking map satisfies the following conditions :    * @xmath13 for @xmath14 ( different edges outgoing from the same vertex have different marks ) ; * for each @xmath15 and @xmath16 there is an edge @xmath17 such that @xmath18 .    in other words ,",
    "the map @xmath19 restricted to the set of edges outgoing from a vertex is a bijection .    for any finite alphabet @xmath20 _ a memory content _",
    "@xmath21 is a map @xmath22 .",
    "an _ @xmath23-head automaton @xmath24 with an auxiliary memory of model @xmath25 _ is characterized by    * a finite state set @xmath26 , * a finite input alphabet @xmath27 , * a finite memory alphabet @xmath20 , * a transition function @xmath28 , which maps a @xmath29-tuple ( the current state , symbols of the input word under the heads , the symbol in the current memory cell ) to a @xmath29-tuple ( a new state , a motion command for each head , a command of changing memory cell ) , * the initial state @xmath30 , * the set of accepting states @xmath31 .",
    "heads can move along the input words by one position per step .",
    "so , a _ motion command _ for a head is an element from the set @xmath32",
    ". a _ command of changing memory cell _ is just an element of the marking set @xmath12 or an empty command ( do not change the cell ) .",
    "an automaton @xmath24 operates on an input word @xmath33 in natural way .",
    "we assume that the input word is extended by markers @xmath34 of the beginning and the end of the word .",
    "the automaton starts from the initial state @xmath35 , the initial position of each head is the leftmost symbol of the input word , the initial memory cell is @xmath36 .",
    "the automaton applies the transition function on each step of operation to modify its state , head positions and a memory cell . for a fixed content of the auxiliary memory it generates a sequence of configurations .",
    "the automaton stops iff it reaches an accepting state .",
    "the automaton @xmath24 _ accepts _ the input word @xmath37 iff for some memory content @xmath21 it stops an operation .",
    "the automaton _ recognizes _ the language @xmath38 iff for any @xmath39 it accepts @xmath37 and for any @xmath40 it do not accept @xmath37 .",
    "we denote by @xmath41 the class of languages recognized by automata with an auxiliary memory of model @xmath25 .",
    "we denote by @xmath42 the subclass of languages recognized by automata with @xmath23 heads .      as a specific case of a nondeterministic memory one",
    "can regard deterministic automata equipped with a worm - memory ( write once , read many ) .",
    "such an automaton should fill a new memory cell by a symbol when it enter the cell the first time .",
    "in further operation it can not change the cell .",
    "let s introduce a formal definition suitable for our purposes .",
    "a _ worm - memory automaton on memory model @xmath25 _ is characterized by    * a finite state set @xmath26 , * a finite input alphabet @xmath27 , * a finite memory alphabet @xmath43 , * a transition function @xmath28 , which maps a @xmath29-tuple ( the current state , symbols of the input word under the heads , the symbol in the current memory cell ) to a @xmath29-tuple ( a new state , a motion command for each head , a command of changing memory cell ) , * the initial state @xmath30 , * the set of accepting states @xmath31 , * the set of writing states @xmath44 . * a filling memory function @xmath45 ,    at the start of operation all memory cells are void .",
    "a worm - memory automaton operates in the same way as a nondeterministic @xmath25-automaton except the moments of entering a writing state . in that moment",
    "the filling function is applied to the current state of the automaton .",
    "if the current memory cell is visited at first time then the value of the filling function is assigned to the cell and the automaton continues operation by application of the transition function . an attempt to change the content of a cell visited before causes the error as well as an attempt to apply the transition function being at a void cell . in the case of an error",
    "the automaton stops the operation and do not accept the input word .",
    "so , during a successful operation the automaton enters a new memory cell in a writing state .",
    "also note that if the automaton writes the non - void symbol @xmath46 to the cell containing the symbol @xmath46 then no error occurs .",
    "we call this property ` a freedom of writing the same ' .",
    "we denote by @xmath47 the class of languages recognized by deterministic automata with an auxiliary worm - memory of model @xmath25 .",
    "[ dfainnfa ] @xmath48 .",
    "let @xmath24 be a worm-@xmath25 automaton recognizing the language @xmath38 and @xmath26 is the state set of @xmath24 .",
    "the state set of a nondeterministic @xmath25-automaton @xmath49 recognizing the language @xmath38 is @xmath50 , where @xmath51 is an additional rejecting state .",
    "the transition function of @xmath49 coincide with the transition function of @xmath24 except writing states and the rejecting state . in a writing state",
    "@xmath52 the automaton compares the content @xmath46 of the current memory cell with @xmath53 .",
    "if @xmath54 then the value of transition function is the same as for the automaton @xmath24 . otherwise , the transition leads to the rejecting state . in the rejecting state",
    "the automaton do nothing and the rejecting state is absorbing .",
    "an operation of the worm-@xmath25 automaton @xmath24 on an input word @xmath37 gives a partial memory content @xmath55 for memory cells visited during the operation .",
    "we denote by @xmath56 the set of memory contents extending @xmath57 .",
    "in other words , each memory content @xmath58 has in each cell visited by @xmath24 during the operation on the word @xmath37 the symbol written by @xmath24 .",
    "let @xmath39 .",
    "the automaton @xmath49 accepts the word @xmath37 on any memory content from the set @xmath56 .",
    "indeed , it operates exactly in the same way as @xmath24 on this memory content .",
    "let @xmath40 .",
    "let s consider the cases of memory content for the nondeterministic automaton @xmath49 .",
    "@xmath49 is operating on @xmath58 . in this case",
    "its operation is also the same as for @xmath24 .",
    "here we use the property of freedom of writing the same .",
    "so , @xmath49 do not accept .",
    "@xmath49 is operating on @xmath59 . in this case",
    "@xmath60 for some memory cell @xmath61 visited by the automaton @xmath24 .",
    "following the operation of the @xmath24 choose the first such memory cell @xmath62 . before entering @xmath62 operation @xmath24 and @xmath49",
    "is the same .",
    "when entering @xmath62 the automaton @xmath49 reads a symbol @xmath63 , where @xmath64 is the current state due to the choice of @xmath62 .",
    "it means that @xmath49 goes to the rejecting state and do not accept the word @xmath37 on the memory content @xmath65 .",
    "let @xmath66 be an infinite 1-way tape ( fig .",
    "[ pic-1way ] ) .",
    "the class @xmath67 is just the class @xmath3 . indeed",
    ", a @xmath66-automaton can read a symbol from the guess tape once .",
    "this symbol can be used to make a nondeterministic choice in a transition relation for the case of the standard definition of nondeterministic automaton .",
    "note also , that @xmath68 because we can simply ignore the symbols written to the 1-way tape .    ]    0.1    ]      let @xmath69 be an infinite 2-way tape ( fig .  [ pic-2way ] ) . for graphs of fan - out",
    "@xmath70 we should also indicate the marking of edges . in the case of @xmath69",
    "the marking is natural : mark ` @xmath71 ' is placed on the edges going from a vertex @xmath8 to the vertex @xmath72 , mark ` @xmath73 ' is placed on the edges going into the opposite direction .",
    "it was mentioned above that @xmath74 because @xmath69-automata is almost the same as nonerasing nondeterministic stack automata and nensa recognize the class @xmath1  @xcite .",
    "the only difference between nensa and @xmath69-automata is an ability of nensa to make arbitrary nondeterministic transitions while an @xmath69-automaton should follow data read from the guess tape .",
    "it means that @xmath69-automata are weaker than nensa , so @xmath75 .",
    "the reverse inclusion is valid even for deterministic @xmath69-automata .",
    "indeed , a deterministic @xmath69-automaton is able to write a computational history of a turing machine computation on a polynomially bounded space . for this purpose the automaton should move on distances polynomially bounded by the input size .",
    "but many heads are equivalent to logarithmic space and it is easy to count polynomially many times using logarithmic memory .",
    "thus , @xmath76 ( the last inclusion is due to lemma  [ dfainnfa ] ) .",
    "the memory model @xmath77 is pictured on the fig .",
    "[ pic-1.5way ] .",
    "edges going to the right are marked by ` @xmath71 ' and edges going to the initial vertex are marked by ` @xmath73 ' .",
    "[ 1.5det = p ] @xmath78 .",
    "we start from two simple observations .",
    "[ return - moves ] let @xmath24 be a @xmath77-automaton and @xmath79 be the number of its states . then any accepting computation of @xmath24 includes no more than @xmath79 moves to the initial cell .",
    "after each return move the automaton @xmath24 scans the same tape content and its behavior is deterministic .",
    "so , if @xmath24 starts the scan process from the same state twice it loops and never reach an accepting state .    thus , the number of return moves is no more than the number of the states .",
    "[ fresh - cells ] let @xmath24 be a worm-@xmath77 automaton , @xmath80 be the number of heads , @xmath8 be the length of the input word @xmath37 and @xmath79 is the number of the states of @xmath24 .",
    "if @xmath24 accepts @xmath37 then between two subsequent return moves the automaton visits no more than @xmath81 new cells .",
    "there are no more than @xmath81 surface configurations of @xmath24 .",
    "surface configurations are tuples ( state , positions of heads ) .",
    "if the automaton pass through more than @xmath81 new cells , some surface configuration occurs twice .",
    "it means that the automaton loops and moves to the right infinitely .",
    "now we are ready to prove theorem  [ 1.5det = p ] .",
    "the inclusion @xmath82 follows from the fact that a worm-@xmath77 automaton is able to simulate a worm-@xmath69 automaton on a polynomially bounded part of the memory tape .",
    "for this purpose one can use a polynomially bounded counter keeping the index of the current position on the guess tape .",
    "when the @xmath69-automaton goes to the left , the simulating @xmath77-automaton returns to the initial position along the ` @xmath73 ' marked edge and makes the required number of steps to the right according to the value of the position counter .    in this way",
    "worm-@xmath77 automaton can write down a computational history of a deterministic turing machine computation polynomially bounded in time .",
    "now we prove the reverse inclusion .",
    "let @xmath83 , @xmath24 be a worm-@xmath77 automaton recognizing @xmath38 , @xmath26 be the state set of @xmath24 , @xmath80 be the number of heads , @xmath8 be the length of the input word @xmath37 .",
    "it follows from lemma  [ return - moves ] and proposition  [ fresh - cells ] that an accepting computation of @xmath24 uses no more than @xmath84 cells .",
    "so , the automaton works on polynomially bounded auxiliary read only tape .",
    "it means that the total number of steps in an accepting computation is also polynomially bounded .",
    "it does not exceed @xmath85 .",
    "polynomially bounded in space and time computation of @xmath77-automaton can be simulated in polynomial time .",
    "theorem  [ 1.5det = p ] shows that deterministic @xmath77-automata are much weaker than deterministic @xmath69-automata . as for nondeterministic automata",
    ", 1.5-way tape provides the same computational power as 2-way tape .",
    "[ 1.5=pspace ] @xmath86 .",
    "the statement is obvious in one direction : @xmath87 .    to prove the reverse inclusion",
    "we show that a @xmath77-automaton is able to check correctness of a computational history for a turing machine computation on a polynomially - bounded space .    without loss of generality",
    "we assume that the machine uses the binary alphabet @xmath88 . recall that a computational history is a sequence of a turing machine configurations .",
    "a configuration is a word of form @xmath89 , where @xmath90 is the tape content to the left of the head position , @xmath64 is the state of the machine , @xmath91 is a currently read symbol , and @xmath51 is the tape content to the right of the head position .",
    "it is convenient to fix a length of a configuration . that is possible because we simulate a space bounded computation . for a computation on a space @xmath92",
    "it is sufficient to deal with configurations of length @xmath93 .",
    "each step of computation changes the configuration of the machine .",
    "we will describe this change using arithmetic encoding of binary words  @xcite .",
    "namely , a word @xmath94 is encoded by a positive integer @xmath95 written in binary as @xmath96 .",
    "we will encode a configuration @xmath89 by a 4-tuple @xmath97 , where @xmath98 denote the word @xmath51 is the reversal of the word @xmath51 .",
    "changes of these data during a computation step are represented in the following table :    cccc + @xmath99&@xmath64&@xmath91&@xmath100 +   + @xmath101&@xmath102&@xmath103 & @xmath104 +   + @xmath99&@xmath64&@xmath91&@xmath100 +   + @xmath105&@xmath102&@xmath106 & @xmath107    it is clear from the table that correctness of a computational history in the arithmetic encoding is equivalent to very simple arithmetic relations between neighbor pairs of configurations in the history .",
    "depending on the pair @xmath108 and parities of @xmath99 , @xmath100 each relation has a form @xmath109 where @xmath110 is the old value and @xmath111 is the new value of @xmath99 or @xmath100 .",
    "recall that we consider a computational history of a computation on a polynomially bounded space .",
    "so , @xmath112 , @xmath113 , where @xmath8 is the input length .",
    "thus , the relations   can be verified by calculations modulo @xmath114 .",
    "this fact follows from the chinese remainder theorem and the prime number theorem  @xcite .",
    "now we are ready to describe a @xmath77-automaton verifying a computational history on the input word @xmath115 using a space @xmath92 .",
    "the automaton expects a guess in form @xmath116 where @xmath117 , @xmath118 , @xmath119 , @xmath120 , @xmath121 , @xmath122 are components of the @xmath123th configuration in the computational history , @xmath124 is a final state of the simulated turing machine .",
    "the function @xmath125 is the unary encoding of the number @xmath99 , i.e. @xmath126 , where @xmath127 is the special symbol .",
    "the automaton makes @xmath128 stages of computation .",
    "on the @xmath4th stage it verifies relations modulo @xmath4 .",
    "it should verify the correctness of the the first block of the guess and the relations  .",
    "the correctness of the first block on the input word @xmath129 means that @xmath130 , @xmath131 and @xmath132 .",
    "note that the right hand sides of these equalities can be computed modulo @xmath4 on a logarithmic memory without using the guess tape .",
    "after that the automaton computes residues modulo @xmath4 for the lengths of @xmath133 and @xmath134 in natural way : go along a word and count modulo @xmath4 .",
    "the relations   are verified in the same manner : the automaton keeps in its logarithmic memory residues modulo @xmath4 of lengths @xmath135 , @xmath136 as well as @xmath120 , @xmath121 and compares them to the data of @xmath137th block computing residues modulo @xmath4 in natural way .",
    "if all checks are passed successfully for each residue and the state @xmath124 is a final state of the turing machine then the automaton accepts the word @xmath37 .",
    "otherwise , it rejects ( say , moves to the right infinitely ) .",
    "it is clear from the construction that if the simulated turing machine accepts the word @xmath37 then the automaton also accepts it .",
    "now suppose that the automaton accepts a word  @xmath37 .",
    "it means that there is a guess in form   such that the automaton accepts @xmath37 on this guess .",
    "because all relations   are true and the first block corresponds to the input we conclude that taking lengths @xmath135 , @xmath136 modulo @xmath138 give us the valid accepting computational history on the input @xmath37 .",
    "a simulation in theorem  [ 1.5=pspace ] fails for a nondeterministic turing machine computation . in the deterministic case",
    "there is the unique valid computational history for the computation on the input word  @xmath37 . in the nondeterministic case",
    "there are several computation paths .",
    "so , correctness modulo small integers do no imply the total correctness .",
    "let @xmath139 be an infinite binary word .",
    "a modification @xmath140 of the 1.5-way guess tape differs from @xmath77 in the edge marking .",
    "the mark ` @xmath71 ' is assigned to the edges outgoing to the right from the vertex @xmath8 iff @xmath141 .",
    "the rest of edges are marked by ` @xmath73 ' .",
    "the marked graph @xmath140 bears an information about the word @xmath139 .",
    "there are continually many infinite binary words .",
    "so , it is natural to expect non - decidable languages in some classes @xmath142 .",
    "we present an example in the next theorem .",
    "let @xmath38 be a tally language ( all its words are @xmath143 )",
    ". denote by @xmath144 the infinite word such that @xmath145 and @xmath146 iff @xmath147 . then @xmath148 .",
    "a  @xmath140-automaton recognizing @xmath38 expects a guess in a special form : each vertex contains an information about the direction of the edge marked by ` @xmath71 ' and the initial vertex has a special root label .",
    "the automaton should be able to verify the correctness of the guess .",
    "the algorithm of guess verification for the first @xmath149 vertices checks the root label in the initial vertex and after that it makes @xmath149 moves ` to the right ' according to the instructions of the guess , then it makes ` the return move ' also following the instructions of the guess .",
    "if the root label appears on the last step only then the automaton adopts the guess .",
    "otherwise , it reject the guess as well as the input .",
    "it is easy to see that the algorithm indeed adopts the guesses of the form described above because any wrong instruction leads the automaton to the initial cell .    after verification step",
    "the automaton can move along the guess tape following the instructions of the guess .",
    "it accepts the input word @xmath143 iff @xmath149th instruction do not lead to the initial cell .",
    "one can put a restriction on the form of a guess . in the proofs above we already use this technique . in this section",
    "we consider the notion of nondeterminism that arises in the restricted guess settings .",
    "let @xmath150 be a subset of possible memory contents .",
    "we say that an automaton @xmath24 _ accepts a word @xmath37 with a @xmath151-restricted guess _ iff it accepts @xmath37 working on some memory content @xmath21 from the set @xmath151 .",
    "we denote by @xmath152 the corresponding class of languages recognizable by @xmath25-automata with a @xmath151-restricted guess .    of course , in general @xmath153 .",
    "for example , let @xmath151 is the set of all valid computational histories of a turing machines .",
    "then @xmath154 contains all recursively enumerable languages .",
    "indeed , a @xmath69-automaton can verify the correctness of the first block of the history and the correctness of all local changes of the machine state and symbols around it .",
    "it is sufficient by the definition of the restriction .    to guarantee the inclusion",
    "@xmath155 it is sufficient to construct an automaton @xmath156 that checks compatibility of memory content @xmath57 in visited cells with the set @xmath151 .",
    "compatibility means that @xmath57 can be extended to some @xmath157 .",
    "below we apply this idea in specific cases .",
    "we are interested in restrictions that describe subclasses of @xmath41 . as an example of this kind of restriction we introduce",
    "_ sparse guesses_.    [ [ sparse - guess . ] ] sparse guess .",
    "+ + + + + + + + + + + + +    suppose that @xmath158 .",
    "a  @xmath80-sparse guess contains no more than @xmath80 symbols from the @xmath159 .",
    "we denote by @xmath160 the set of @xmath80-sparse guesses .",
    "below we consider sparse guesses for tape memories .",
    "an informal idea of guess verification described above gives us in the case of the 1.5-way guess tape the following lemma .",
    "@xmath161 for any @xmath80 .",
    "let @xmath38 be a language recognized by a @xmath77-automaton @xmath24 with a @xmath160-guess .",
    "an automaton @xmath49 recognizing @xmath38 with the unrestricted guess runs in parallel the automaton @xmath24 and a special _ verifying automaton _ @xmath156 .",
    "the automaton @xmath156 has rejecting states which are absorbing . if @xmath156 is in a rejecting state then @xmath49 rejects .",
    "otherwise , it accepts if @xmath24 accepts .",
    "the automaton @xmath156 do not move itself .",
    "it looks at memory cells passed in motion of the automaton @xmath24 and change its state .",
    "informally , it keeps an information about the number of non - zero symbols to the left of the current position .",
    "so , the states of the @xmath156 are the set @xmath162 .",
    "the state @xmath163 is rejecting and thus is absorbing .    at the start and after each return",
    "move the state @xmath156 is set to @xmath164 ( except the case of state @xmath163 ) . after reading a non - zero symbol and passing to the right",
    "@xmath156 changes the state @xmath123 by @xmath165 provided @xmath166 .    if @xmath39 then the automaton @xmath24 accepts it on a guess @xmath167 .",
    "the automaton @xmath49 is also accepts @xmath37 on a guess @xmath168 because the state @xmath163 of the automaton @xmath156 can not be reached .",
    "if @xmath40 then no @xmath160-guess can enforce the automaton @xmath24 to accept @xmath37 .",
    "the same holds for @xmath49 and @xmath160-guesses .",
    "suppose now that @xmath49 accepts on a guess @xmath169 . by construction @xmath49",
    "do not visit more than @xmath80 different cells filled by non - zero symbols ( otherwise , the automaton @xmath156 rejects ) .",
    "let @xmath170 be the memory content of cells visited by @xmath49 during the accepting computation .",
    "then @xmath57 can be extended to some memory content @xmath171 .",
    "the automaton @xmath24 works on the @xmath65 in the same way as @xmath49 .",
    "in particular , it accepts on this guess .",
    "so , @xmath39 and we come to a contradiction .",
    "thus , @xmath49 rejects on any guess .",
    "the following inclusions are proved along the same lines .",
    "[ 1<=k ] @xmath172 .",
    "let @xmath38 be a language recognized by a @xmath77-automaton @xmath24 with a @xmath173-guess .",
    "now we construct for @xmath174 an automaton @xmath49 that recognizes @xmath38 with @xmath160-guess .",
    "the automaton @xmath49 runs in parallel @xmath24 and a verifying automaton @xmath156 counting the number of non - zero symbols read .",
    "the construction of @xmath156 is the same as in the proof of the previous lemma .",
    "but now the state @xmath175 is rejecting for @xmath156 .    if @xmath39 then the automaton @xmath24 accepts it on a guess @xmath168 .",
    "the automaton @xmath49 is also accepts @xmath37 on a guess @xmath176 such that it coincides with @xmath168 in cells visited by @xmath24 .",
    "if @xmath40 then no @xmath160-guess can enforce the automaton @xmath24 to accept @xmath37 .",
    "the same holds for @xmath49 : @xmath49 works in the same way as @xmath24 until reading the second non - zero symbol in which case the @xmath49 rejects .",
    "thus , @xmath177 .",
    "now we give a characterization of the classes @xmath178 .",
    "[ npw1.5 ] @xmath179 for @xmath180 .",
    "the proof of theorem  [ npw1.5 ] is splitted naturally into two parts .",
    "[ npinu1w1.5 ] @xmath181 .",
    "let @xmath38 be an @xmath6-language .",
    "it means that there is a ( deterministic ) turing machine @xmath25 and a polynomial @xmath4 such that for any @xmath39 there is a certificate @xmath111 of polynomial size in the length of @xmath37 ( @xmath182 ) such that @xmath25 accepts the input pair @xmath183 and for any @xmath40 there are no such certificate .",
    "a history of computation of @xmath25 on the input pair @xmath184 can be verified by a multi - head 2-way automaton @xmath156 with the indexed access to the history .",
    "it means that @xmath156 is equipped by a logarithmically small query tape which is read / write .",
    "the automaton @xmath156 has a special query state .",
    "entering this state @xmath156 sends a query to the storage containing a string and receives in answer the value of the @xmath123th symbol of the string , where @xmath123 is written in binary on the query tape .",
    "it is easy to see that using polynomially small counters the automaton can verify a computational history of of polynomial size .",
    "now we are going to simulate the indexed access by a @xmath173-guess .",
    "in other words , we construct a @xmath77-automaton @xmath185 such that for any sequence @xmath186 , where @xmath187 and @xmath188 , there is a @xmath173-guess @xmath189 such that the automaton @xmath185 can restore @xmath190 operating on the guess @xmath189 .    at first we note that using a space @xmath92 one can compute the @xmath80th prime number @xmath191 for @xmath192 , where @xmath193 is the absolute constant .",
    "indeed , the check of primality of an integer @xmath8 written in binary on the space @xmath194 can be done by use of @xmath195 additional memory ( containing auxiliary counters ) .",
    "thus , using one more counter to keep the number of the last prime found one can compute @xmath191 on the space @xmath196 . from the prime number theorem  @xcite",
    "we conclude that @xmath197 , hence , @xmath198 and for sufficiently large @xmath80 the computation can be done on space @xmath199 .",
    "the automaton @xmath185 works in the following way . to compute a value of @xmath190 it computes @xmath200 on its own logarithmic memory .",
    "then it starts a motion along the guess tape and counts modulo @xmath200 . when it reaches the non - zero symbol it returns the current residue modulo @xmath200 as the value of @xmath190 if @xmath201 .",
    "otherwise , it rejects .",
    "the chinese remainder theorem implies that for any sequence @xmath190 there is an integer @xmath202 such that @xmath203 for all @xmath204 .",
    "so , @xmath185 returns correct values of @xmath190 on the guess @xmath205 .",
    "the @xmath77-automaton @xmath206 with a @xmath173-guess recognizing the language @xmath38 is combined from the automata @xmath156 and @xmath185 .",
    "it substitute calls of @xmath185 instead of queries of @xmath156 .    by construction , if @xmath39 then @xmath206 accepts it .",
    "let @xmath207 .",
    "consider an operation of @xmath206 on the input @xmath37 .",
    "possible results of operation @xmath185 form a sequence @xmath208 and the @xmath156 part of the automaton @xmath206 verifies it as a valid computational history .",
    "thus , the automaton @xmath206 rejects because there are no accepting computation .",
    "[ ukinnp ] @xmath209 for any @xmath80 .",
    "we should construct a nondeterministic polynomial time algorithm to verify that a @xmath77-automaton @xmath24 accepts an input word @xmath37 on some guess @xmath167 .    from @xmath24 and @xmath37",
    "we construct in deterministic polynomial time an auxiliary automaton @xmath210 .",
    "the states of @xmath210 are surface configurations of @xmath24 , i.e. @xmath211-tuples ( a state of @xmath24 , head positions ) .",
    "so the number of states of @xmath210 is polynomially bounded .",
    "the automaton @xmath210 moves along the 1.5-way guess tape in the same way as the automaton @xmath24 do on the input @xmath37 except steps that do not change a memory cell .",
    "following along the transitions of the automaton @xmath24 one can determine the next ` moving ' step in polynomial time .",
    "the automaton @xmath210 jumps to this step immediately . accepting states of @xmath210 are surface configurations such that @xmath24 is in an accepting state .",
    "hence the problem is reduced to verification that there is a @xmath160-guess such that @xmath210 accepts on this guess . for this purpose",
    "we need the following claim .",
    "* claim 1 . *",
    "if @xmath210 accepts on some @xmath160-guess then it accepts on a @xmath160-guess of exponential length .",
    "consider an operation of @xmath210 on the guess @xmath212 .",
    "let @xmath202 be @xmath213 , where @xmath214 is the number of the states of @xmath210 .",
    "let s prove an intermediate claim .",
    "* claim 2 . * the operation of @xmath210 on the guess @xmath215 gives the same result as the operation of @xmath210 on the guess @xmath216 provided @xmath217 for @xmath218 and @xmath219 for @xmath220 .",
    "indeed , a sequence of states of @xmath210 working on a part of the tape filled by zeroes is obtained by iterations of a map @xmath221 .",
    "after @xmath222 iterations the sequence @xmath223 became periodic .",
    "the period depends on @xmath64 but in any case it is a divisor of @xmath202 .",
    "claim  2 is proved .",
    "now the claim  1 follows from the bound @xmath224 .",
    "( actually , the bound is more more tight . )",
    "note that the parameters @xmath225 of an exponentially bounded guess can be written in binary nondeterministically in polynomial time .    to complete a proof we construct a ( deterministic ) polynomial time algorithm verifying that @xmath210 accepts on the guess with parameters @xmath225 .    by lemma  [ return - moves ]",
    "there are no more than @xmath214 return moves during an accepting operation of @xmath210 .",
    "so , the algorithm can call a procedure @xmath226 that by a state @xmath64 determine the behavior of @xmath210 starting from the initial cell : either it reaches an accepting state or it makes the return move to the state @xmath102 .",
    "this procedure can be constructed easily using calls of the simpler procedure @xmath227 answering the same question concerning a behavior of the automaton on the part of tape filled by zeroes .",
    "more exactly , an input of the procedure is an integer @xmath110 written in binary and a state @xmath228 .",
    "the procedure @xmath227 should output the result of operation in one of three following forms :    * @xmath210 reaches an accepting state working on the part @xmath229 of the tape without return moves ; * @xmath210 reaches a return state and goes to the initial cell in the state @xmath102 ; * @xmath210 passes the part @xmath229 and leaves it in the state @xmath102 .    to answer these questions the procedure @xmath227 represents the map @xmath230 in a boolean matrix form and applies fast algorithm of matrix exponentiation",
    "let @xmath231 be a modified automaton such that all accepting and return states of @xmath210 are changed by absorbing states .",
    "let @xmath232 be a boolean matrix of @xmath230 for the automaton @xmath231 : @xmath233 iff @xmath234 .",
    "the boolean matrix multiplication is defined similarly to the usual matrix multiplication but addition and multiplication are changed by disjunction and conjunction respectively .",
    "the boolean multiplication is associative due to distributive law for disjunction and conjunction .",
    "so , a boolean power @xmath235 can be computed in time @xmath236 in usual way : by writing binary representation of @xmath8 and using subsequent squaring .",
    "let @xmath102 be an accepting or return state .",
    "then it can be easily verified by a straightforward induction that    * @xmath237 if @xmath102 is not reached during the operation of @xmath231 on the string @xmath238 , * @xmath239 if @xmath102 is reached during the operation of @xmath231 on the string @xmath240 , where @xmath241 .",
    "computing boolean powers of @xmath232 helps to choose between the above variants ( a)(c ) .    indeed ,",
    "if @xmath242 for each accepting or return state then we have the variant ( c ) .",
    "the state @xmath102 in question is in this case the only state such that @xmath243 .",
    "otherwise , some accepting or return state is reached within the region @xmath229 . to determine the state we apply a binary search to find out the smallest @xmath8 such that @xmath239 for some accepting or return state @xmath102 .",
    "looking at the state @xmath102 we can easily distinguish the variants ( a ) and ( b ) and compute the data required in each case .    from lemmata  [ 1<=k ] ,  [ npinu1w1.5 ] ,  [ ukinnp ] we conclude that @xmath244    in similar way it is possible to determine the result of operation of a @xmath77-automaton on a guess containing polynomially many non - zero symbols .",
    "[ ukw2 ] @xmath245 for any @xmath80 .",
    "the idea is the same as for lemma  [ 1<=k ] .",
    "we use a combined automaton that runs in parallel the recognizing and the verifying automata .",
    "the latter should be modified to include the moves to the left .",
    "the modification is straightforward .",
    "the class @xmath246 is rather weak .",
    "the reason is the absence of the root label in the initial cell . using a non - zero symbol as the root label",
    "we obtain a subclass of @xmath246 that coincides with the class @xmath247 of languages recognized by deterministic 2-way counter automata with a logarithmic auxiliary memory .",
    "the inclusion @xmath248 follows from the cook theorem  @xcite .",
    "the cook theorem claims that @xmath249 where @xmath250 is the class of languages recognized by deterministic 2-way pushdown automata with a logarithmic auxiliary memory and @xmath251 is the class of languages recognized by nondeterministic 2-way pushdown automata with a logarithmic auxiliary memory .    to upperbound the class @xmath246 we state a rather obvious proposition .",
    "[ trajectory ] a trajectory of motion of a 2-way automaton @xmath210 along the tape filled by zeroes either became periodic with the period width bounded by @xmath214 , where @xmath214 is the number of the states of @xmath210 , or is an infinite repetition of right shifts by a distance @xmath92 along periodically repeated route . here",
    "@xmath252 .",
    "after @xmath253 steps a sequence of states became periodic . from this moment of time one of variants listed in the proposition became true .",
    "@xmath254 , where @xmath255 is the class of languages recognized by nondeterministic 2-way counter automata with a logarithmic auxiliary memory .",
    "let @xmath256 is recognized by a @xmath69-automaton  @xmath24 with an @xmath173-guess .",
    "proposition  [ trajectory ] implies that if @xmath24 accepts the input word @xmath37 on some @xmath173-guess then it accepts the word @xmath37 on a guess such that a non - zero symbol is placed at polynomially bounded distance from the initial cell .",
    "( look at the behavior of the automaton after visiting the non - zero symbol the first time . )",
    "the auxiliary counter automaton @xmath210 guesses nondeterministically the distance between the initial cell and the cell containing the non - zero symbol and keeps it in its logarithmic auxiliary memory . after that @xmath210 simulates an operation of @xmath24 .",
    "the counter helps to simulate a behavior of @xmath24 when @xmath24 is to the right of the non - zero symbol . for the rest moments of time @xmath257 simulates the behavior of @xmath24 using the auxiliary memory .",
    "it keeps a polynomially bounded counter indicating the position of @xmath24 on the guess tape to the left of the non - zero symbol .",
    "the second inclusion in theorem follows from the cook theorem mentioned above .",
    "theorem  [ npw1.5 ] implies that @xmath258 because two non - zero symbols can be used to mark the initial cell and provide a @xmath173-guess for a @xmath77-automaton .",
    "the latter can be simulated by a @xmath69-automaton working on a guess of this kind .",
    "using proposition  [ trajectory ] one can prove the reverse statement .",
    "the proof is similar to the proof of lemma  [ ukinnp ] .",
    "an arbitrary guess is replaced by an exponentially bounded guess . after that one can develop an algorithm computing the result of operation on an exponentially bounded guess represented by parameters @xmath225 as in the proof of lemma  [ ukinnp ] .",
    "so , we came to the theorem    @xmath259 for @xmath174 .",
    "in this final section we briefly outline several interesting variants of memory models and possible extensions of definitions .",
    "let @xmath12 be a monoid generated by a set @xmath260 .",
    "then the memory of type @xmath261 is defined by the cayley graph of the monoid @xmath25 : the vertex set is @xmath12 , an edge marked @xmath262 goes from a vertex @xmath110 to the vertex @xmath263 .",
    "1-way and 2-way tapes are examples of monoid memory .",
    "it follows immediately from definitions that @xmath264 .",
    "also it is easy to see that @xmath265 . for the inclusion @xmath266 one should apply a useful trick converting a tape infinite in both directions to a tape infinite to one direction . for the reverse inclusion",
    "it is useful to use a root labeling . walking around @xmath267 ,",
    "an automaton is able to check that there is the only one vertex labeled as the root in the region visited .          from an @xmath25-automaton @xmath24",
    "one can construct in polynomial time an automaton @xmath210 with polynomially many states that walks on @xmath25 in the same way as @xmath24 do .",
    "the construction is in fact described in the proof of lemma  [ ukinnp ] .",
    "the halting problem for an @xmath25-automata @xmath210 is in fact a problem of conditional reachability in the state graph of @xmath210 .",
    "correctness conditions stem from the fact that if the automaton comes to the same cell of memory it should follow the same guess symbol stored in the cell .",
    "in other words , a route @xmath272 along the state graph of @xmath210 induces a route @xmath273 along the memory graph .",
    "the route is correct if all transitions in moments corresponding to the same cell @xmath61 go along the edges with the same mark @xmath274 .",
    "let put this more formally .",
    "for any route @xmath275 along the state graph the corresponding route @xmath273 along the memory graph introduces an equivalence relation between positions in the route : @xmath276 iff @xmath277 . on the other hand ,",
    "the route @xmath275 determines the word @xmath189 in the alphabet @xmath278 of form @xmath279 , where @xmath280 , @xmath281 are memory edge mark and memory symbol corresponding to the step @xmath123 .",
    "define a language @xmath282 as the language of words @xmath283 generated by routes from the start state to some accepting state . by definition the language @xmath282 is regular .",
    "the halting words are in the language @xmath282 .",
    "a  word is halting iff @xmath284 for all @xmath285 such that @xmath286 .        to enumerate halting automata",
    "the enumeration algorithm starts an enumeration of all pairs @xmath289 , @xmath290 . for each pair",
    "the algorithm computes the relation @xmath288 and checks the correctness conditions . if the conditions hold then the algorithm outputs  @xmath210 .                on the other hand ,",
    "a @xmath291-automaton is able to verify the correctness of computational history of an arbitrary turing machine computation .",
    "the automaton expects a guess containing subsequent turing machine configurations in subsequent rows of @xmath291 .",
    "correctness of computational history in this form is a conjunction of local conditions that can be verified by the automaton walking on @xmath291 .",
    "note that even for a sparse encoding two heads on the 2-way guess tape are too much and we get @xmath298 .",
    "indeed , two parts of an arbitrary length can be used to simulate an automaton with two counters .",
    "but such an automaton is able to make an universal computation ."
  ],
  "abstract_text": [
    "<S> in this paper we consider a nondeterministic computation by deterministic multi - head 2-way automata having a read - only access to an auxiliary memory . </S>",
    "<S> the memory contains additional data ( a guess ) and computation is successful iff it is successful for some memory content .    also we consider the case of restricted guesses in which a guess should satisfy some constraint .    </S>",
    "<S> we show that the standard complexity classes such as , ,  , @xmath0 , @xmath1 can be characterized in terms of these models of nondeterministic computation . </S>",
    "<S> these characterizations differ from the well - known ones by absence of alternation .    </S>",
    "<S> * keywords : * automaton , nondeterminism , language , complexity class .    </S>",
    "<S> the standard way to define a nondeterministic computation by an automaton or a turing machine is to change a transition function by a transition relation . in a nondeterministic state of a computational device </S>",
    "<S> a computation branches into several computation paths .    </S>",
    "<S> there is another way to introduce a nondeterminism . </S>",
    "<S> suppose that a computational device has an additional data ( a _ guess _ or a _ certificate _ or a _ proof of correctness _ ) and performs a deterministic computation operating with an input data and a guess data .    </S>",
    "<S> sometimes these variants of introducing nondeterminism lead to equivalent computational models . </S>",
    "<S> the class @xmath0 , for example , can be defined in both ways using turing machines .    </S>",
    "<S> if we restrict computational power of a computational device these variants may differ drastically . </S>",
    "<S> the aim of this paper is to investigate models of nondeterminism based on the second variant for multi - head 2-way automata .    </S>",
    "<S> it is well - known that computation abilities of multi - head 2-way automata are equivalent to turing machines with a logarithmically bounded memory . </S>",
    "<S> so , they recognize languages from the class @xmath2 .    </S>",
    "<S> nondeterministic ( in the sense of transition relation ) multi - head 2-way automata recognize languages from the class @xmath3 . </S>",
    "<S> one can rewrite a definition of a nondeterministic automaton using the second way of introducing nondeterminism . </S>",
    "<S> let s imagine that a guess data are written on an auxiliary tape , which is 1-way read - only . </S>",
    "<S> it is easy to see that using an 1-way guess tape leads to an equivalent definition of a nondeterministic automaton .    in this paper </S>",
    "<S> we consider a more general model of an auxiliary read - only memory ( see definitions in section  [ aam ] ) . </S>",
    "<S> guess data are stored in cells of a memory and at each moment of time an automaton has an access to the exactly one memory cell . </S>",
    "<S> possible transitions between memory cells form a directed graph ( _ the memory graph _ ) </S>",
    "<S> . an automaton can choose between finite number of variants only . </S>",
    "<S> so , the natural condition on the memory graph is a finite fan - out in each vertex ( i.e. a memory cell ) .    </S>",
    "<S> the most natural variant of the auxiliary memory is a 2-way tape . </S>",
    "<S> the corresponding computational model appears to be very close to nonerasing nondeterministic stack automata ( nensa )  @xcite . </S>",
    "<S> similarly to multi - head nensa , the automata with 2-way read only guess tape recognize all languages from the class @xmath1 .    </S>",
    "<S> it is possible to define in our settings a deterministic computation as a specific case of a nondeterministic one . </S>",
    "<S> the deterministic automata with 2-way guess tape are similar to nonerasing deterministic stack automata ( nedsa ) and also recognize the languages from the class @xmath1 .    </S>",
    "<S> we focus our attention on a more restricted memory model , so - called 1.5-way tape . </S>",
    "<S> it was used in research of quantum automata  @xcite . for classic automata 1.5-way </S>",
    "<S> tape means an 1-way tape with an additional possibility to return into the first cell .    the nondeterministic automata with 1.5-way tape also recognize the class @xmath1 ( theorem  [ 1.5=pspace ] below ) . </S>",
    "<S> but deterministic automata with this memory type recognize the class  only ( theorem  [ 1.5det = p ] ) . </S>",
    "<S> these results show that the 1.5-way guess tape is potentially more suitable to characterize various complexity classes .    </S>",
    "<S> also we introduce a nondeterministic computation with a restricted guess . </S>",
    "<S> an example of restricted guess is a </S>",
    "<S> _ sparse guess_. sparseness of a guess means that a guess tape contains the only one ( or finitely many ) non - empty symbol and the rest symbols stored on the tape are empty . using this model of a nondeterministic computation gives the class @xmath0 .    </S>",
    "<S> an interesting feature of all these results is a formal absence of resource bounds in characterizations of resource - bounded classes such as  , </S>",
    "<S> @xmath0 and so on . </S>",
    "<S> it should be noted that there is a primary result of this sort : many heads are equivalent to logarithmic space . </S>",
    "<S> the rest of results are based on this fact .    </S>",
    "<S> the main technical tool in study of the 1.5-way tape is calculations modulo polynomially bounded integer . </S>",
    "<S> these calculations can be performed on logarithmic space . to compute a length of a part of the guess tape we use the simple algorithm : </S>",
    "<S> go along the part and increase a counter modulo @xmath4 . </S>",
    "<S> the latter operation can be done on logarithmic space . </S>",
    "<S> the length can be restored from these data due to the chinese remainder theorem .    </S>",
    "<S> there are many results on characterizations of complexity classes in terms of some sort of automata . </S>",
    "<S> the classes , ,  </S>",
    "<S> , @xmath1 have the well - known characterizations by deterministic , nondeterministic , alternating and synchronized alternating 2-way automata  @xcite . </S>",
    "<S> there are also characterizations of @xmath0 , the polynomial hierarchy and some other complexity classes in terms of alternating auxiliary stack automata  @xcite .    </S>",
    "<S> our results differ from these characterization because the models considered in this paper do not use alternation .    </S>",
    "<S> it is worth to mention a paper  @xcite , which contains the characterizations of @xmath5 , @xmath6 and @xmath7 in terms of nondeterminism and so close to our results . </S>",
    "<S> the difference is in the nature of nondeterminism introduced . in  @xcite nondeterministic colorings of @xmath8-dimensional words </S>",
    "<S> are considered . </S>",
    "<S> contrary , our main results concern the case of 1-dimensional guess memory .    </S>",
    "<S> the rest of paper is organized in the following way . in section  [ aam ] </S>",
    "<S> we introduce our basic computational model : multi - head 2-way automata with a nondeterministic auxiliary memory . </S>",
    "<S> section  [ nondetmemory ] contains results about the 1-way , the 1.5-way and the 2-way guess tapes . in section  </S>",
    "<S> [ restricted - guess ] we introduce a model of a restricted guess formally and give characterizations of @xmath0 in terms of this model . </S>",
    "<S> section  [ final ] contains some additional remarks on possible variants of defining nondeterministic computation . </S>"
  ]
}