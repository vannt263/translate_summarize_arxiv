{
  "article_text": [
    "a poset @xmath12 can be identified with a transitive directed graph on its elements .",
    "the poset @xmath13 is a _ semiorder _",
    "if for some utility function @xmath14 we have @xmath15 if and only if @xmath16 . semiorders were introduced as a possible mathematical model for preference in the social sciences .",
    "a first possible model for preference is the _ weak orders _ , in which each element is assigned a utility value , such that @xmath17 is preferred to @xmath18 iff the value of @xmath17 is greater than the value of @xmath18 .",
    "this was viewed as too restrictive ; many preference relationships can not be modeled by a weak order .",
    "semi - orders were designed to model imprecision in the valuation function ; we may be indifferent between elements not only if they have exactly the same values , but also if the difference between the values is smaller than some threshold .",
    "there is a great deal of literature on the subject of semiorders and preference ; see the books  @xcite .    in this paper",
    ", we propose a generalization , a _",
    "double threshold semiorder_. when it is modeled by a graph , it is a _",
    "double threshold graph_.    our original motivation for defining double threshold graphs comes from an attempt to deal with an issue in mathematical psychology .",
    "intuitively , it is natural to think that preference is transitive ; if one prefers @xmath19 to @xmath20 and @xmath20 to @xmath21 , then one `` should '' prefer @xmath19 to @xmath21",
    ". however , a variety of evidence exists showing that preferences are not always transitive .",
    "this has led to a great deal of discussion ; for a summary of this issue , see @xcite .",
    "viewpoints range from the idea that the intuitive notion that preference is transitive are simply wrong and must be thrown away entirely to questioning whether what was being measured in the non - transitive findings was really a preference relation . between these two views ,",
    "there has been work on finding mathematical models which explain non - transitive preference ; fishburn @xcite gives some possible models .",
    "one approach to mathematical modeling is to try to give a reasonable model of extremely non - transitive preference ; the famous cyclic voter s paradoxes can be viewed as a model of preference which can allow not just non - transitivity , but also cycles .    unlike these approaches , we generalize semi - orders to allow non - transitivity , but we require that the given set of preferences continue to be acyclic .",
    "in other words , we consider any preference relation represented by a directed acyclic graph ( a _ dag _ ) . as in the case of semiorders , we assume that reported preferences are influenced by an underlying hidden utility function , which may be approximate , imperfectly known by a subject , or otherwise fail to capture all factors influencing a report of a preference",
    ".    one of our objectives is to provide tools to allow social scientists to obtain a measure of the departure of a subject s reported pairwise preferences from a model where preferences are driven exclusively by an underlying hidden utility function , as well as derive an assignment of utility values that has the most explanatory power , in a sense that we define within a new model that we propose .",
    "formally , we loosen the definition of a semiorder by allowing two thresholds @xmath5 and @xmath6 such that @xmath22 , and finding a valuation @xmath1 for each element @xmath0 . for two elements @xmath0 and @xmath3 , @xmath23 is not reported as a preference if @xmath24 , @xmath23 can freely be reported as a preference or not if @xmath25 , and @xmath23 is reported as a preference if @xmath26 .",
    "let a _ satisfying utility function _ or a _ satisfying assignment of @xmath27 values _ for @xmath28 be a utility function @xmath27 that meets these constraints .",
    "this accommodates within the model the well - known phenomenon in the literature on perception that there is can be a range of differences between the minimum perceptible one that are perceived unreliably .",
    "if a dag can be represented with thresholds @xmath28 , then it can be with any pair @xmath29 of thresholds such that @xmath30 , since a solution @xmath27 for @xmath28 can be turned into a solution for @xmath29 by rescaling all @xmath27 values by the factor @xmath31 .",
    "therefore , for any pair @xmath10 of thresholds , the question of whether a particular dag can be represented with them depends on the ratio @xmath32 ; larger ratios allow representations of more dags .",
    "henceforth , given a graph @xmath33 , let @xmath34 denote the number of vertices and @xmath35 the number of edges .",
    "when @xmath33 is understood , we may denote these as @xmath36 and @xmath37 . for a dag @xmath33 ,",
    "let @xmath38 denote the minimum ratio of @xmath9 such that @xmath33 has a satisfying utility function for @xmath10 .",
    "when @xmath33 or the preference relation it models is understood , let us denote it by @xmath11 .",
    "this provides a measure of the degree to which a given set of preferences depart from a semiorder .",
    "an acyclic preference relation is a @xmath28-_semiorder _ if it has a satisfying utility function for @xmath28 , that is , if @xmath39 .",
    "when the preference relation is modeled as a graph , we say the graph is a @xmath10 _ double threshold graph_. we show that for any dag @xmath33 , @xmath40 where @xmath41 and @xmath42 are integers such that @xmath43 , allowing @xmath5 , @xmath6 , and the utility function to have small integer values . also , for any dag , @xmath44 and @xmath45 is always satisfiable , so @xmath46 .",
    "an example of when bound is tight is when @xmath33 is a directed path .",
    "thus , the classes of dags with @xmath11 bounded by different values give a nested hierarchy of dags , starting with semiorders . for each class in the hierarchy , we give a characterization of the class in terms of a set @xmath47 of forbidden subgraphs for the class .    when @xmath33 has no satisfying utility function for @xmath5 , @xmath6 , we show how to return a forbidden subgraph in @xmath48 as a certificate of this in @xmath49 time , where @xmath32 , and an @xmath50 bound for finding @xmath11 . for @xmath51 , a satisfying assignment , together with a certificate from @xmath52 for small @xmath53 , give a certificate that @xmath54 , and these take @xmath50 time to produce .",
    "if @xmath11 is is less than @xmath55 , @xmath33 must be transitive .",
    "the converse is not true : it is easy to show that the class of posets does not have bounded @xmath11 .",
    "consider a chain @xmath56 in a poset and a vertex @xmath57 that is is incomparable to the others ; @xmath58 . even though they are transitive , some posets are not good models of a preference relation that is based on an underlying utility function .",
    "although we show that bounding @xmath11 can make some np - complete problems tractable , bounded ratio double threshold graphs are in one sense enormously larger than semiorders .",
    "semiorders correspond to graphs can be represented with ratio 1 .",
    "these graph classes both have implicit representations @xcite , implying that there are @xmath59 such graphs on a set of @xmath36 labeled vertices .",
    "by contrast , every height 1 directed graph can be represented with ratio @xmath60 : for each vertex @xmath0 , assign @xmath61 if is it a source or @xmath62 if it is a sink and make the thresholds @xmath63 .",
    "the number of graphs with ratio @xmath11 for any @xmath11 greater than or equal to 1 is @xmath64 .",
    "the _ underlying undirected graph _ of a dag is the symmetric closure , that is , the undirected graph obtained by ignoring the orientations of the edges . in this paper",
    ", we say that a dag is _ connected _ if its underlying undirected graph is connected .",
    "similarly , by a _ clique _ , _ coloring _ , _ independent set _ , or _",
    "clique cover _ of a dag , we mean a clique , coloring , independent set or clique cover of the underlying undirected graph .",
    "hardness results about these problems on undirected graphs also apply to dags , since every undirected graph @xmath33 is the underlying undirected graph of the dag obtained by assigning an acyclic orientation to @xmath33 s edges .",
    "finding a maximum independent set or clique in a dag takes polynomial time if the dag is transitive ( a poset ) , hence if it is a semiorder , but for arbitrary dags , there is no polynomial - time approximation algorithm for finding a independent set or clique whose size is within a factor of @xmath65 of the largest unless p = np  @xcite .",
    "however , for a connected dag @xmath33 , we give an @xmath66 algorithm for finding a maximum clique , and an approximation algorithm that finds a clique whose size is within a desired factor of @xmath41 of that of a maximum clique in @xmath67 time .",
    "we show that finding a maximum independent set is still np - hard when @xmath68 , but we give an polynomial - time approximation algorithm that produces an independent set whose size is within a factor of @xmath69 of the optimum .",
    "we give approximation bounds of @xmath70 for minimum coloring and minimum clique cover , which also have no polynomial algorithms for finding an @xmath71 approximation for arbitrary dags unless p = np .",
    "thus , @xmath11 is a measure of the complexity of a dag from a computational standpoint .",
    "a concept similar to @xmath11 was given previously by gimbel and trenk in  @xcite .",
    "they were developed a generalization of weak orders to partial orders that corresponds to the special case of a @xmath72 transitive dag .",
    "not assuming transitivity requires us to use different algorithmic methods , but our bounds improve their main bounds for the special case from @xmath73 and @xmath74 to @xmath75 .",
    "most of their structural results are disjoint from ours because they are relevant to partial orders and their underlying undirected graphs , the _ comparability graphs . _",
    "the constraints that must be satisfied by a utility function @xmath27 are as follows :    * @xmath76 if @xmath77 is an edge ; * @xmath78 if @xmath17 and @xmath18 are unrelated .",
    "we will impose the following _ upper - bound _ constraints :    * @xmath79 for all @xmath80 .",
    "the upper - bound constraints can not affect the existence of a satisfying assignment of @xmath27 values , since , for any satisfying assignment , an arbitrary constant can be subtracted from all of the @xmath27 values to obtain a new satisfying assignment .",
    "this is a special case of a linear program , a _ system of difference constraints _ , where each constraint is an upper bound on the difference of two variables .",
    "this reduces to the problem of finding the weight of a least - weight path ending at each vertex in a graph derived from the constraints , as described in  @xcite , where there is a satisfying assignment if and only if the graph of the reduction has no negative - weight cycle . applying the reduction to our problem",
    "yields a graph @xmath81 , where @xmath82 ( see figure  [ fig : gd ] ) .",
    "@xmath81 has an edge of weight @xmath83 of weight @xmath84 for each edge @xmath23 of @xmath33 , and edges @xmath77 and @xmath85 of weight @xmath6 for each pair @xmath86 such that neither of @xmath77 and @xmath85 is an edge of @xmath33 .",
    "a negative cycle in @xmath81 proves that the system is not satisfiable ; otherwise , for each @xmath87 , assigning @xmath1 to be the minimum weight of any path ending at @xmath0 gives a satisfying assignment for @xmath28 .",
    "the single - source least - weight paths problem where some weights are negative can be solved in @xmath88 time , but @xmath81 has @xmath89 edges , so a direct application of this approach takes @xmath90 time to find a satisfying assignment or produce a negative - weight cycle .     in @xmath81",
    "are acyclic . ]",
    "let us distinguish the _ weight _ of a cycle or path , which is sum of weights of its edges , from the _ length _ , which is the number of edges .",
    "a negative - weight cycle of @xmath81 is a cycle where the ratio of edges of weight @xmath84 to edges of weight @xmath6 is greater than @xmath9 .",
    "this gives a certificate that a dag is not a @xmath10 double threshold graph as follows .",
    "let @xmath77 be a _ hop _ in @xmath33 if neither @xmath77 nor @xmath85 is an edge of @xmath33 .",
    "a negative cycle of @xmath81 is a simple cycle @xmath91 such that for each consecutive pair @xmath92 ( mod k ) , @xmath92 is either a directed edge of @xmath33 or a hop , and the ratio of edges to hops exceeds @xmath9 .",
    "let us call a simple cycle of edges and hops a _ forcing cycle _ , and the ratio of edges to hops its _ forcing ratio_. this shows that @xmath11 is equal to the maximum forcing ratio of any forcing cycle of @xmath81 .",
    "if @xmath51 , then there must be such a cycle where the ratio of directed edges to hops is exactly equal to @xmath9 , as illustrated in figure  [ fig : forbiddencycle ] , since this corresponds to a cycle of weight 0 in @xmath81 .",
    "such a cycle , together with a satisfying assignment of utility values , gives a certificate that @xmath54 . in the figure",
    ", a labeling satisfying the constraints for @xmath93 and @xmath94 serves as a certificate that @xmath95 , while the forcing cycle @xmath96 has five edges and three hops , and serves as a certificate that @xmath97 . together",
    "they are a certificate that @xmath98 .",
    "such that @xmath98 .",
    "the number next to each vertex is the value of the utility function , conforming to @xmath93 and @xmath94 .",
    "the cycle @xmath96 is a cycle of directed edges and hops in which the ratio of edges to hops is 5/3 .",
    "there no cycle with fewer edges that has this property . ]",
    "[ thm : ij ] for a dag @xmath33 , @xmath99 for integers @xmath100 such that @xmath43 .",
    "this follows from the fact that @xmath101 and is the ratio of the number @xmath42 of edges to the number @xmath41 of hops on a forcing cycle .    aside from showing that optimum values of @xmath5 and @xmath6 can be expressed as small integers , the theorem gives an immediate @xmath102 bound for finding @xmath11 by binary search on the @xmath103 possible values of @xmath11 implied by the theorem , spending @xmath104 time at each probe to test whether the ratio is satisfiable .",
    "once @xmath11 is known , a satisfying assignment of utility values for @xmath51 , together with a forcing cycle with forcing ratio equal to @xmath11 gives a certificate that the claimed value of @xmath11 is correct .",
    "we give @xmath50 bounds for for these results in section  [ sect : faster ] .",
    "in the book  @xcite , spinrad introduced the class of _",
    "@xmath105-clique extendable orderings _ of the vertices of undirected graphs .",
    "we give a complete treatment and analysis of time bounds here .",
    "two sets _ overlap _ if they intersect and neither is a subset of the other .",
    "let @xmath106 be an ordering of the vertices of a graph , @xmath8",
    ". for @xmath107 let us say that @xmath108 _ ends with @xmath109 _ if the elements of @xmath109 are the last elements of @xmath108 in @xmath110 , that is , if no element of @xmath111 occurs after an element of @xmath109 .",
    "@xmath108 _ begins with @xmath109 _ if @xmath108 ends with @xmath109 in @xmath112 .",
    "an ordering @xmath106 of vertices of a graph @xmath8 is @xmath105-clique extendable ordering of @xmath33 if , whenever @xmath113 and @xmath114 are overlapping two cliques of size @xmath105 , @xmath115 , and @xmath116 begins with @xmath117 and ends with @xmath118 in @xmath110 , then @xmath19 and @xmath20 are adjacent and @xmath116 is a clique .    this is a generalization of transitivity , since dag is transitive if and only if its topological sorts are two - clique extendable orderings , hence a graph is a comparability graph if and only if it has a two - clique extendable orderings . in  @xcite",
    ", it is shown that three - clique extendable orderings arise naturally in connection with visibility graphs , and that it takes polynomial time to find a maximum clique in a graph , given a three - clique extendable ordering . a polynomial - time generalization for @xmath105-clique extendable orderings",
    "is implied ; we give details and a time bound next .",
    "[ lem : kext ] if @xmath106 is a @xmath105-clique extendable ordering of a graph @xmath33 and @xmath113 and @xmath114 are overlapping cliques of any size greater than or equal to @xmath105 , such that @xmath119 and @xmath116 begins with @xmath120 and ends with @xmath121 in @xmath110 , then @xmath116 is a clique .",
    "it suffices to show that every element of @xmath120 is adjacent to every element of @xmath121 .",
    "let @xmath0 be an arbitrary element of @xmath122 , @xmath3 be an arbitrary element of @xmath121 , and @xmath123 be any @xmath124 elements of @xmath125 . then @xmath126 and @xmath127 are two @xmath105-cliques and , by the definition of a @xmath105-clique extendable ordering , their union is a clique , and @xmath0 and @xmath3 are adjacent .    [ cor : dp ] if @xmath106 is a @xmath105-clique extendable ordering of a graph @xmath33 , @xmath113 is a @xmath105-clique ending with @xmath128 and @xmath123 is a largest clique of @xmath33 ending with the @xmath129-clique @xmath130 , then @xmath131 is a largest clique of @xmath33 ending with @xmath113 .    for any clique @xmath114 ending with @xmath113 ,",
    "@xmath132 is a clique ending with @xmath130 .",
    "@xmath133 , which is a clique by lemma  [ lem : kext ] .",
    "corollary  [ cor : dp ] is the basis of the recurrence for a dynamic programming algorithm for finding a maximum clique of @xmath33 , given a @xmath105-clique extendable ordering .",
    "we enumerate all @xmath105 cliques and then label each @xmath105-clique @xmath134 with the maximum size @xmath135 of a clique that ends with @xmath134 .",
    "if @xmath136 is the left - to - right ordering of a @xmath105 clique in the ordering , then its label is one plus the maximum of the labels of cliques of the form @xmath137 .",
    "the size of the maximum clique of @xmath33 is the maximum of the labels .",
    "details and the proof of the following resulting time bound are given in the appendix :    [ thm : kexttime ] given a @xmath105-clique extendable ordering of a graph @xmath33 , a maximum clique can be found in @xmath138 time .",
    "it is easy to see that when the vertices of @xmath33 have positive weights , the problem of finding a maximum weighted clique can be solved in the same time bound , using a trivial variant of corollary  [ cor : dp ] .",
    "we now show that restricting attention to dags such that @xmath11 is bounded by a constant makes some otherwise np - hard problems easy .",
    "this supports the view of @xmath11 as a measure of complexity of a dag .",
    "by contrast , for most similar attempts to measure complexity of a graph or graph representation , the measurement is np - hard to compute ; examples include dimension of a poset , interval number , boxicity , and many others ; see @xcite .",
    "[ thm : k - extendable ] let @xmath33 be a dag and @xmath139 . a topological sort of @xmath33",
    "is is a @xmath105-clique extendable ordering .",
    "let @xmath140 be a topological sort , and let @xmath27 be a satisfying utility function for @xmath10 such that @xmath51 .",
    "let @xmath141 and @xmath142 be the left - to - right orderings of two @xmath105-cliques @xmath143 and @xmath134 . then @xmath144 is a directed path in @xmath33 , hence @xmath145 , @xmath146 is an edge and @xmath147 is a clique .",
    "[ cor : exact ] it takes @xmath148 time to find a maximum clique in a connected dag @xmath33 .    to avoid an additive @xmath50 term , run the dynamic programming algorithm on a topological sort under the assumption that it is a 2-extendable ordering in @xmath149 time by theorem  [ thm : kexttime ] , and return the result if it is a clique . otherwise , do the same under the assumption that it is a 3-extendable ordering , in @xmath150 time",
    ". if a max clique has not yet been returned , @xmath151 by theorem  [ thm : k - extendable ] , so compute @xmath11 in @xmath152 time , which is now subsumed by the bound we want to show . a topological",
    "sort is a @xmath153 extendable ordering by theorem  [ thm : k - extendable ] , so it takes @xmath154 time to find a maximum clique by theorem  [ thm : kexttime ] .",
    "even if @xmath11 is bounded by a moderately large constant , this bound could be prohibitive in practice , but it also gives an approximation algorithm that allows a tradeoff between time and approximation factor :    [ cor : cliqueapprox ] given a connected dag @xmath33 and integer @xmath41 such that @xmath155 , a clique whose size is within a factor of @xmath41 of the size of a maximum clique can be found in @xmath156 time .",
    "let @xmath157 be the result of removing the edges @xmath158 and @xmath159 .",
    "a satisfying function @xmath27 for @xmath33 and thresholds @xmath160 is also a satisfying function for @xmath157 and thresholds @xmath161 , so @xmath162 .",
    "applying theorems  [ thm : kexttime ] and  [ thm : k - extendable ] , we get a maximum clique of @xmath157 in @xmath156 time .",
    "a maximum clique of @xmath33 induces a directed path @xmath163 in @xmath33 , and @xmath164 is a clique of @xmath157 , so the size of a maximum clique in @xmath157 is within a factor of @xmath41 of the size of a maximum clique in @xmath33 .    if @xmath165 , a maximum independent set in @xmath33 can be obtained in polynomial time , since @xmath33 is transitive  @xcite .",
    "however , zhisheng xu has shown that even when @xmath166 , the problem is np - hard  @xcite .",
    "this is seen as follows .",
    "it is np - complete to decide whether a 3-colorable graph has an independent set of a given size @xmath105 , even when the 3-coloring is given  @xcite .",
    "given such a graph @xmath157 , @xmath105 , and three - coloring , let @xmath167 , @xmath168 , and @xmath169 be the three color classes .",
    "every edge @xmath170 has endpoints in two of the classes ; orient @xmath170 from the endpoint in the class with the smaller subscript to the endpoint in the class with the larger subscript . doing this for all edges results in a dag @xmath33 such that @xmath166 , since , for each vertex @xmath0 , if @xmath171 , assigning @xmath172 gives a satisfying assignment of utility values for @xmath173 and @xmath44 .",
    "there is an independent set of size @xmath105 in @xmath33 if and only if there is one in @xmath157 .",
    "[ lem : is ] for @xmath33 in the class of dags where @xmath174 , there is a polynomial @xmath105-approximation algorithm for the problem of finding a maximum independent set in @xmath33 .",
    "find a satisfying assignment of utility values for @xmath28 such that @xmath175 , then find an interval of the form @xmath176 such that the size of the set @xmath114 whose @xmath27 values are in the interval is maximized .",
    "@xmath114 is an independent set , since no pair of them has @xmath27 values that differ by @xmath5 .",
    "return these vertices as an independent set .",
    "for the approximation bound , let @xmath113 be a maximum independent set .",
    "the @xmath27 values of @xmath113 lie in an interval of the form @xmath177 $ ] , which is a subset of the union @xmath178 , of @xmath105 intervals of the form @xmath179 , hence @xmath180 .",
    "proofs of the following make similar use of the availability of satisfying @xmath27 values and are given in the appendix :    [ thm : coloring ] for @xmath33 in the class of dags where @xmath181 , there is a polynomial @xmath105-approximation algorithm for the problem of finding a minimum coloring of @xmath33 .",
    "[ thm : ccover ] for @xmath33 in the class of dags where @xmath182 , there is a polynomial @xmath105-approximation algorithm for the problem of finding a minimum clique cover of @xmath33 .",
    "in this section , we first show how to find a satisfying assignment of utility values for given thresholds @xmath10 , in @xmath49 time , where @xmath32 .",
    "we then show how to find @xmath11 in @xmath50 time . by solving the second problem to find @xmath11 , then selecting @xmath10 such that @xmath51 and solving the first , we get the certificates for @xmath11 , that is , a satisfying assignment and a cycle such that the ratio of edges to hops is @xmath11 , which comes from a zero - weight cycle in @xmath81",
    ".    for both of these problems , we use the following . when @xmath33 is an arbitrary directed graph where each vertex @xmath0 has a weight @xmath184 and each edge @xmath185 has a weight @xmath186 , it takes @xmath149 time to find @xmath187 is an edge of @xmath188 for each vertex @xmath18 of @xmath33 .",
    "let us call this the _ general relaxation procedure_. in the special case where @xmath33 is a dag , it takes @xmath149 time to find @xmath189 , where @xmath190 is the minimum weight of any path from @xmath17 to @xmath18 ( @xmath191 is a path of weight 0 ) .",
    "this can be used to solve the single - source shortest paths problem on a connected dag in @xmath149 time  @xcite .",
    "let us call this the _ dag variant _ of the relaxation procedure .    in a graph with edge weights ,",
    "let the _ length _ of a walk be the number of occurrences of edges on the walk and its _ weight _ be the sum of weights of occurrences of edges .",
    "if an edge occurs @xmath105 times on the walk , it contributes @xmath105 to the length , and if its weight is @xmath192 , it contributes @xmath193 to the weight and @xmath193 to the number of ( occurrences of ) edges of weight @xmath192 on the walk .",
    "the bellman - ford algorithm is a dynamic programming algorithm that works as follows on a connected graph @xmath33 where a vertex @xmath194 has been added that has an edge of weight zero to all other vertices .",
    "let @xmath195 be the minimum weight of any walk from @xmath194 to @xmath18 that has at most @xmath196 edges .",
    "@xmath195 is just the minimum weight of any walk of length at most @xmath41 in @xmath33 ending @xmath18 ; henceforth we omit @xmath194 from the discussion .",
    "@xmath197 for all @xmath198 . during the `` @xmath199 pass ''",
    "the algorithm computes @xmath195 as @xmath200 .",
    "this is just an instance of the general relaxation procedure where @xmath201 and the loop @xmath202 is considered to be an edge of weight 0 for each @xmath198 .",
    "if there is no negative cycle , there is always a path ending at @xmath18 that is a minimum - weight walk ending at @xmath18 , so @xmath203 gives the minimum weight of any path ending at @xmath18 .",
    "if there is a negative cycle , this is detected when @xmath204 for some @xmath18 , indicating a walk of length @xmath36 of smaller weight of any path , which must have a negative cycle on it . by annotating the dynamic programming entries with suitable pointers , it is possible to find such a cycle within the same bound .",
    "the @xmath36 passes to compute @xmath205 for all @xmath18 each take @xmath149 time , for a total of @xmath88 time .",
    "to exploit the structure of @xmath81 to improve the running time , we let @xmath206 denote the minimum weight of any path that has at most @xmath41 edges of weight @xmath6 , rather than at most @xmath41 edges in total .",
    "we use the elements @xmath206 , rather than the elements of @xmath195 , as the elements of the dynamic programming table .",
    "let us call this _ reindexing the dynamic programming table_. we obtain @xmath207 by assigning @xmath208 and running the dag variant of the relaxation procedure on the edges of weight @xmath84 , since they are acyclic . for pass @xmath41 such that @xmath209 , any improvements obtained by allowing an @xmath199 edge of weight @xmath6 are computed with the general relaxation procedure , where loops are considered to be edges of weight 0 , and , after this ,",
    "any additional improvements obtained by appending additional edges of weight @xmath84 are computed by the dag variant of the relaxation procedure .    because every vertex has a walk of length and weight 0 ending at it , @xmath210 for @xmath211 .",
    "therefore , for @xmath209 , if @xmath212 , the ratio of edges of weight @xmath84 to edges of weight @xmath6 is greater than @xmath32 .",
    "any such walk must have more than @xmath213 edges of weight @xmath84 , hence length greater than @xmath214 .",
    "therefore , if there is no negative cycle in @xmath81 , for @xmath215 , @xmath216 , and a negative cycle occurs if @xmath217 for this @xmath41 and some @xmath18 .",
    "a negative cycle can be found by the standard technique of annotating the results of the relaxation operations with pointers to earlier results .",
    "the advantage of reindexing the table is that the algorithm now takes @xmath218 passes instead of @xmath36 of them .    to get the @xmath49 bound , it remains to show how to perform each pass in @xmath149 time .",
    "the bottleneck is evaluating @xmath219 is an edge of weight @xmath220 for the general relaxation step .",
    "since all of the edges have the same weight , we rewrite this as @xmath221 where @xmath0 minimizes @xmath222 for all @xmath17 such that @xmath223 . to evaluate this",
    ", we just have to find @xmath0 . at the beginning of the pass ,",
    "we radix sort the vertices in ascending order of @xmath224 , giving list @xmath225 .",
    "to compute @xmath226 , we mark the vertices that have an edge to @xmath18 , then traverse @xmath225 until we find @xmath0 as the first unmarked vertex we encounter , then unmark the vertices that have edges to @xmath18 .",
    "this takes time proportional to the in - degree of @xmath18 , hence @xmath149 time for all vertices in the pass .",
    "to find @xmath38 , we use the fact that that if @xmath51 , the corresponding weighting of @xmath81 will give it a zero - weight cycle .    for arbitrary @xmath28 ,",
    "let the _ mean weight _ of a directed cycle or path of length at least one in @xmath81 be the weight of the cycle divided by the number of edges .",
    "the minimum mean weight of a cycle is the _ minimum cycle mean_. subtracting a constant @xmath21 from the weight of all edges in @xmath81 subtracts @xmath21 from the mean weight of every cycle and path of length at least one .",
    "for arbitrary @xmath5 and @xmath6 , weighting @xmath81 in accordance with @xmath227 in place of @xmath10 has the same effect of subtracting @xmath21 from the weights of all edges .",
    "thus , for arbitrary @xmath10 , if @xmath21 is the minimum cycle mean of the corresponding weighting of @xmath81 , then @xmath228 . finding @xmath11 reduces to finding the minimum cycle mean in the weighting of @xmath81 obtained from an arbitrarily assigned @xmath28 .    in a directed graph @xmath33 with edge weights ,",
    "let @xmath229 be the minimum weight of any walk of length _ exactly _ @xmath41 ending at @xmath18 . in  @xcite , karp showed the following :    [ thm : karp ] the minimum cycle mean of a directed graph with edge weights is + @xmath230 $ ] .",
    "karp actually shows this when an arbitrary vertex @xmath194 is selected and @xmath229 is defined to be the minimum weight of all walks of length @xmath41 from @xmath194 to @xmath18 , but if it is true for walks beginning at an arbitrary vertex @xmath194 , then it is true when @xmath194 is allowed to vary over all vertices of @xmath231 .",
    "omitting @xmath194 from consideration in this way in his proof gives a direct proof of this variant of his theorem .",
    "he reduces the problem to the special case where @xmath33 is strongly connected by working on each strongly - connected component separately , but the only purpose of this in his proof is to ensure that there is a path from @xmath194 to all other vertices , and this is unnecessary when @xmath194 is allowed to vary over all vertices .",
    "@xmath229 can be computed by a trivial variant of bellman - ford , by using the recurrence @xmath232 in place of @xmath233 .",
    "the only difference from the algorithm of section  [ sect : bf ] is that loops of the form @xmath202 are not considered to be edges .",
    "computing @xmath234 for all @xmath198 takes @xmath36 passes , each of which applies the general relaxation operation , for a total of @xmath88 time .",
    "an obstacle to an @xmath50 bound that we did not have in section  [ sect : bf ] is that the expression of theorem  [ thm : karp ] requires @xmath89 computations , which is not @xmath50 .",
    "we again reindex the dynamic programming table ( section  [ sect : bf ] ) , letting @xmath235 denote the minimum - weight walk ending at @xmath18 in @xmath81 that has _ exactly _",
    "@xmath41 edges of weight @xmath6 .",
    "we compute the values in passes , computing @xmath235 for each @xmath198 during pass @xmath41 . as in section  [ sect",
    ": bf ] , each pass takes takes @xmath149 time ; the only change is that in the general relaxation step , loops are not considered to be edges .",
    "we claim that @xmath236 passes suffice , but a new difficulty is knowing when to stop , since , unlike @xmath237 of the section  [ sect : bf ] , @xmath11 is not known in advance .",
    "a walk with @xmath41 edges of weight @xmath6 and weight @xmath235 has @xmath41 edges of weight @xmath6 , so it must have @xmath238 edges of weight @xmath84 . its length , @xmath239 , can be computed as @xmath240 in @xmath241 time .",
    "let a term @xmath235 be _ term of interest _ if @xmath242 , that is , if it corresponds to a _ walk of interest _ of length @xmath36 .",
    "we use the following reindexed variant of karp s theorem , which says that it suffices to compute an inner maximum over a smaller set , and only for terms of interest .",
    "the proof is the one karp gives , reindexed , and omitting reference to a start vertex @xmath194 by allowing the start vertex to vary over all vertices . for completeness , we give the modified proof in the appendix .",
    "[ thm : karp2 ] in @xmath81 , the minimum mean weight of a cycle is equal to + @xmath243    the solution is given as algorithm  [ alg : mcm ] . during the @xmath199 pass , the algorithm computes @xmath235 for all @xmath198 . before proceeding to the next pass ,",
    "it updates a partial computation of the expression of theorem  [ thm : karp2 ] , computing @xmath244 for each the terms of interest @xmath235 that has been computed during the pass , and keeping track of the minimum of these computations so far .",
    "let a term of interest @xmath235 be _ critical _ if the minimum cycle mean is equal to @xmath244 .",
    "the strategy of the algorithm is to return the minimum it has found so far once it detects that a critical term has been evaluated .",
    "critical walk _ be a walk of length @xmath36 giving rise to a critical term .",
    "[ lem : meanbound ] in @xmath81 , the mean weight of a critical walk is less than or equal to the minimum cycle mean .    the proof is given in the appendix .    given a dag @xmath33",
    ", it takes @xmath50 time to find @xmath11 .",
    "the basis of this is algorithm  [ alg : mcm ] . for a term of interest , @xmath235 , the mean weight of the corresponding walk is @xmath245 , which is an increasing function of @xmath41 .",
    "thus , once this exceeds the minimum value , @xmath246 , found so far a critical term has been found and is already reflected in the value of @xmath246 .",
    "thus , algorithm  [ alg : mcm ] returns the minimum cycle mean .",
    "the minimum cycle mean is the ratio of edges of weight @xmath84 to edges of weight @xmath6 on a cycle of minimum mean .",
    "this must also be true for a critical walk , by lemma  [ lem : meanbound ] .",
    "this ratio for the walks of interest in pass @xmath41 is @xmath247 , so the algorithm halts before the first pass @xmath248 such that @xmath249 , and @xmath250 .",
    "thus , algorithm  [ alg : mcm ] halts after @xmath236 passes .    using the approach of section  [",
    "sect : bf ] , the operations in a pass take @xmath149 time except for evaluating @xmath251 for terms @xmath235 of interest . for any vertex @xmath18 , @xmath235 is a term of interest for at most one value of @xmath41 .",
    "therefore , the cost of evaluating @xmath251 for terms of interests is bounded by the total number of dynamic programming table entries @xmath252 for @xmath253 and @xmath254 computed by the algorithm , which is the number @xmath36 of them computed in each pass times @xmath236 passes .",
    "this is @xmath255 .",
    "@xmath256 @xmath257 : = @xmath258 for all @xmath198    999 thomas h cormen , charles e leiserson , ronald l rivest , clifford stein , introduction to algorithms , mit 2009 norishige chiba , takao nishizeki , _ arboricity and subgraph listing algorithms _",
    ", siam j. comput .",
    "* 14 * ( 1985 ) , 210223 .",
    "peter  c. fishburn , _ intransitive indifference with unequal indifference intervals _",
    "* 7 * ( 1970 ) , 144149 .",
    "peter  c. fishburn , _ interval representation for interval orders and semiorders , _ j. math",
    "* 10 * ( 1973 ) , 91105 .",
    "peter c. fishburn , interval orders and interval graphs : study of partially ordered sets , wiley ( 1895 ) peter c. fishburn , _ nontransitive preferences in decision theory _ , journal of risk and uncertainty * 4 * ( 1991 ) , 113134 john  g. gimbel , ann n. trenk , on the weakness of an ordered set , siam j. discrete math , * 11 * ( 1998 ) , 655663 .",
    "fanica gavril , maximum weight independent sets and cliques in intersection graphs of filaments , information processing letters * 11 * ( 2000 ) , 181188 .",
    "johan hastad , clique is hard to approximate within @xmath65 , acta math .",
    "* 182 * ( 1999 ) , 105 - 142 .",
    "richard karp , a characterization of the minimum cycle mean in a digraph , discrete mathematics * 23 * ( 1978 ) , 309311 .",
    "j. kratochvil , j. nesetril , independent set and clique problems in intersection - defined classes of graphs , comment.math.univ.carolinae * 31 * ( 1990 ) , 8593 .",
    "duncan  r. luce , _ semiorders and a theory of utility discrimination , _ econometrica , * 24 * ( 1956 ) , 178191 .",
    "r.  m. mcconnell , k. mehlhorn , s. nher , p. schweitzer \" , certifying algorithms , computer science reviews * 5 * ( 2011 ) , 119161 .",
    "marc pirlot , ph vincke , semiorders : properties , representations , applications , theory and decision library .",
    "series b : mathematical and statistical methods * 36 * , kluwer ( 1997 ) jeremy p. spinrad , efficient graph representations , fields institute monographs * 19 * , american mathematical society ( 1991 ) ann n. trenk , on @xmath105-weak orders : recognition and a tolerance result , _ discrete math _ , * 181 * ( 1998 ) , 223237 . zhisheng xu , personal communication .",
    "* theorem  [ thm : kexttime ] : * _ given a @xmath105-clique extendable ordering of a graph @xmath33 , a maximum clique can be found in @xmath138 time .",
    "_    let @xmath140 be the @xmath105-clique extendable ordering .",
    "there are @xmath259 cliques in a connected graph with @xmath37 edges , and they can be enumerated in @xmath138 time  @xcite . if there are no @xmath105-cliques , a maximum clique can be found in @xmath138 time by applying this algorithm to find all @xmath41-cliques for @xmath260 .    otherwise , we denote each @xmath105-clique with a tuple @xmath261 where @xmath262 are the elements of the clique and @xmath263 in the @xmath105-extendable ordering .",
    "we order the cliques lexicographically by the reverse of its tuple ( cliques sharing the last @xmath264 members are consecutive in the list ) .",
    "the lexicographic sort takes @xmath138 time , since there are @xmath259 of them .",
    "this list serves as the dynamic programming table , which has one entry for each @xmath105 clique .",
    "in addition we create a _ block _ , identified as @xmath265 for each nonempty block of cliques that share @xmath265 as their rightmost @xmath124 elements ; they are consecutive in the dynamic programming table .",
    "this block is _ relevant _ to each @xmath105-clique of the form @xmath266 .",
    "we precompute a pointer from each clique to its relevant block by lexicographically sorting the cliques by their first @xmath124 elements in reverse order .",
    "this order is the order of their blocks in the table , so traversing this list and the table concurrently allows assignment of the pointers from cliques to their relevant blocks @xmath138 time .",
    "the dynamic programming labels each @xmath105-clique with the size of the maximum clique of @xmath33 ending with its @xmath105 elements , and each block with the maximum of the labels of cliques in the block .",
    "this can be done in lexicographic order : when the last clique in a block has been labeled , the block is labeled with the maximum of the labels of the cliques in the block , and when clique @xmath261 is reached , its label is one plus the maximum of the labels in its relevant block @xmath267 , which is already labeled .",
    "traversing the table performing these operations , using the precomputed pointers to blocks , takes @xmath259 time .",
    "the maximum label of any @xmath105-clique tells the size of a maximum clique in the graph .",
    "let @xmath268 be a @xmath105-clique with maximum label . to reconstruct the maximum clique of the graph , note that the last @xmath124 elements of this clique are @xmath269 .",
    "find the remaining elements , as follows : recursively find all but the last @xmath124 elements of the largest clique ending on a @xmath105-clique in @xmath134 s relevant block , which is empty if @xmath134 has no relevant block , and add @xmath270 to this result .",
    "let @xmath0 be the lowest value assigned by the algorithm to any of the vertices , and let @xmath3 be the highest .",
    "partition the interval @xmath271 $ ] into _ buckets _ of the form @xmath271 \\cap [ x + it_1 , x+(i+1)t_1)$ ] for @xmath211 . for each bucket , return the vertices whose @xmath27 values lie in each bucket as the color classes .",
    "let @xmath18 be a vertex such that @xmath272 .",
    "in an optimum coloring , @xmath273 , removal of the color class containing @xmath18 removes a subset of the set of vertices in the first @xmath105 buckets since it is an independent set .",
    "removal of the color classes of the returned coloring that correspond to the first @xmath105 buckets advances the minimum @xmath27 value among the remaining vertices by @xmath274 .",
    "removal of the of the color class in an optimum coloring containing @xmath18 advances it by at most that much . by induction on the number of vertices",
    ", we may assume that the number of remaining color classes of the returned coloring is at most @xmath105 times the number of color classes in the remainder of @xmath273 .",
    "thus , for every color class in an optimum coloring , there are at most @xmath105 in the coloring returned by the algorithm .",
    "let @xmath3 be a value such that @xmath275 $ ] contains the @xmath27 values of a maximum number of vertices .",
    "select @xmath18 from among the vertices whose @xmath27 value lie in @xmath275 $ ] .",
    "select @xmath276 so that for @xmath277 , @xmath278 minimizes @xmath279 over all vertices @xmath0 such that @xmath280 .",
    "select @xmath281 such that for @xmath277 , @xmath282 maximizes @xmath283 over all vertices @xmath0 such that @xmath284 .",
    "let @xmath134 be the union of these two sets . because the pairwise differences in @xmath27 values are greater than @xmath6 , @xmath134 is a clique .",
    "let this be one of the cliques in the clique cover .",
    "remove it from the set of vertices , and recurse on the remaining vertices to get the remaining cliques of the cover .    to see that this has an approximation ratio of at most @xmath105 ,",
    "let @xmath113 be the set of vertices whose @xmath27 values are in @xmath275 $ ] .",
    "each clique of the clique cover returned by the algorithm removes one vertex from @xmath113 . in a minimum clique cover",
    ", each pair of vertices must have @xmath27 values that differ by at least @xmath5 .",
    "thus , no clique can contain more than @xmath105 vertices from @xmath113 .",
    "the clique cover returned by the algorithm has at most @xmath105 times the number of cliques as a minimum clique cover .",
    "let @xmath10 be assigned arbitrarily . since we may apply the result separately to each strongly connected component of @xmath81",
    ", we may assume that @xmath81 is strongly connected .",
    "let @xmath285 be the result of subtracting @xmath21 from every edge weight in @xmath81 . the mean weight of @xmath286 , hence its total weight , is 0 in @xmath285 .",
    "since they all have the same length @xmath36 , the paths of interest in @xmath81 are the same as they are in @xmath285 .    out of all paths ending at a vertex on @xmath286 ,",
    "let @xmath12 be one of minimum weight in @xmath285 , let @xmath287 be its weight in @xmath285 , and let @xmath288 be the last vertex of @xmath12 .",
    "let @xmath289 be the walk of length @xmath290 obtained by walking round and round @xmath286 , starting at @xmath17 , let @xmath18 be the last vertex of @xmath289 , and let @xmath108 be the walk of length @xmath36 obtained by concatenating @xmath12 and @xmath289 .",
    "let @xmath194 be the first vertex of @xmath108 .    in @xmath285 ,",
    "the weight @xmath192 of @xmath108 is equal to the minimum weight of a walk of any length ending at @xmath18 , which is seen as follows .",
    "suppose there is a walk @xmath289 of weight @xmath291 , ending at @xmath18 .",
    "let @xmath292 be the weight of the portion of @xmath286 directed from @xmath17 to @xmath18 , and let @xmath293 be the weight of the portion of @xmath286 directed from @xmath18 to @xmath17 . since @xmath286 has weight 0 , @xmath294 .",
    "appending to @xmath289 the portion of @xmath286 from @xmath18 to @xmath17 gives a walk ending at @xmath17 of weight @xmath295 , and , since @xmath286 has weight 0 , this is just @xmath287 . removing any cycles from this walk",
    ", we get a path of weight @xmath287 , contradicting that @xmath12 is a path of minimum weight to @xmath17 .",
    "thus , @xmath108 is a walk of interest in @xmath285 , hence in @xmath81 . in @xmath285 , since there is a walk of length 0 and weight @xmath258 ending at @xmath18 , so the weight of @xmath108 in @xmath285 , hence its mean weight in @xmath285 is at most the minimum cycle mean of 0 in in @xmath285 .",
    "its mean weight in @xmath81 is at most the minimum cycle mean of @xmath81 .",
    "since the edges of weight @xmath84 are acyclic there is at least one edge of weight @xmath6 on @xmath286 .",
    "since @xmath108 has length @xmath36 and @xmath286 is the only cycle on it , @xmath108 makes at least one complete revolution of @xmath286 , and the weight of @xmath108 is @xmath235 for some @xmath209 .",
    "therefore , @xmath242 and @xmath235 is a term of interest , and the mean weight of its walk of interest is the minimum cycle mean .",
    "suppose @xmath242 . because there are no negative cycles",
    ", there is a minimum - weight walk ending at @xmath18 whose length is less than @xmath36 . let its weight be @xmath297 .",
    "also , @xmath299 , so @xmath300 , and @xmath301 .",
    "equality holds if and only if @xmath302 .",
    "we complete the proof by showing that there exists @xmath18 such that there exists @xmath41 where @xmath242 and @xmath302 .",
    "let @xmath286 be a cycle of weight zero and let @xmath192 be a vertex on @xmath286 .",
    "let @xmath303 be a path of weight @xmath304 ending at @xmath192 .",
    "then @xmath303 , followed by any number of repetitions of @xmath286 , is also a minimum - weight walk to its endpoint .",
    "after sufficiently many repetitions of @xmath286 , such an initial part of length @xmath36 will occur ; let its endpoint be @xmath305 .",
    "then @xmath306 for some @xmath41 , and @xmath307 . choosing @xmath308 , the proof is complete .",
    "* proof of theorem  [ thm : karp2]*. reducing the weight of each edge weight by a constant @xmath21 reduces the minimum cycle mean by @xmath21 , and @xmath309 is reduced by @xmath310 . if @xmath242 , @xmath311 is reduced by @xmath21 , and @xmath312 is reduced by @xmath21 .",
    "the minimum cycle mean and this expression are affected equally .",
    "choosing @xmath21 to be the minimum cycle mean and then applying the lemma , we complete the proof ."
  ],
  "abstract_text": [
    "<S> a _ semiorder _ is a model of preference relations where each element @xmath0 is associated with a utility value @xmath1 , and there is a threshold @xmath2 such that @xmath3 is preferred to @xmath0 iff @xmath4 . </S>",
    "<S> these are motivated by the notion that there is some uncertainty in the utility values we assign an object or that a subject may be unable to distinguish a preference between objects whose values are close . </S>",
    "<S> however , they fail to model the well - known phenomenon that preferences are not always transitive . also , if we are uncertain of the utility values , it is not logical that preference is determined absolutely by a comparison of them with an exact threshold . </S>",
    "<S> we propose a new model in which there are two thresholds , @xmath5 and @xmath6 ; if the difference @xmath7 less than @xmath5 , then @xmath3 is not preferred to @xmath0 ; if the difference is greater than @xmath6 then @xmath3 is preferred to @xmath0 ; if it is between @xmath5 and @xmath6 , then then @xmath3 may or may not be preferred to @xmath0 . </S>",
    "<S> we call such a relation a double - threshold semiorder , and the corresponding directed graph @xmath8 a double threshold digraph . </S>",
    "<S> every directed acyclic graph is a double threshold graph ; bounds on @xmath9 give a nested hierarchy of subclasses of the directed acyclic graphs . in this paper </S>",
    "<S> we characterize the subclasses in terms of forbidden subgraphs , and give algorithms for finding an assignment of of utility values that explains the relation in terms of a given @xmath10 or else produces a forbidden subgraph , and finding the minimum value @xmath11 of @xmath9 that is satisfiable for a given directed acyclic graph . </S>",
    "<S> we show that @xmath11 gives a measure of the complexity of a directed acyclic graph with respect to several optimization problems that are np - hard on arbitrary directed acyclic graphs . </S>"
  ]
}