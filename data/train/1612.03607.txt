{
  "article_text": [
    "while both undirected and directed graphs are important in many applications , there are significantly more algorithmic and structural results for undirected graphs than for directed ones .",
    "the main reason is likely to be the fact that most problems on digraphs are harder than those on undirected graphs .",
    "the situation has begun to change : recently there appeared a number of important structural results on digraphs , see e.g. @xcite .",
    "however , the progress was less pronounced with algorithmic results on digraphs , in particular , in the area of parameterized algorithms .    in this paper , we introduce a new decomposition for digraphs and show its usefulness by solving an open parameterized problem on digraphs by bang - jensen , saurabh and simonsen @xcite .",
    "we believe that our decomposition will prove to be helpful for obtaining further algorithmic and structural results on digraphs .",
    "a digraph @xmath2 is an _ out - tree _",
    "( an _ in - tree _ ) if @xmath2 is an oriented tree with just one vertex @xmath3 of in - degree zero ( out - degree zero ) .",
    "the vertex @xmath3 is the _ root _ of @xmath4 a vertex @xmath5 of an out - tree ( in - tree ) is called a _ leaf _ if it has out - degree ( in - degree ) zero .",
    "if an out - tree ( in - tree ) @xmath2 is a spanning subgraph of a digraph @xmath6 then @xmath2 is an _ out - branching _ ( an _ in - branching _ ) of @xmath0 .",
    "it is well - known that a digraph @xmath0 contains an out - branching ( in - branching ) if and only if @xmath0 has only one strongly connected component with no incoming ( no outgoing ) arc @xcite .",
    "a well - known result in digraph algorithms , due to edmonds , states that given a digraph @xmath0 and a positive integer @xmath7 , we can decide whether @xmath0 has @xmath7 arc - disjoint out - branchings in polynomial time  @xcite .",
    "the same result holds for @xmath7 arc - disjoint in - branchings .",
    "inspired by this fact , it is natural to ask for a  mixture \" of out- and in - branchings : given a digraph @xmath0 and a pair @xmath8 of ( not necessarily distinct ) vertices , decide whether @xmath0 has an arc - disjoint out- branching @xmath9 rooted at @xmath10 and an in - branching @xmath11 rooted at @xmath5 .",
    "we will call this problem arc- disjoint branchings .",
    "thomassen proved ( see @xcite ) that the problem is np - complete and remains np - complete if we add the condition that @xmath12 .",
    "the same result still holds for digraphs in which the out - degree and in - degree of every vertex equals two @xcite .",
    "the problem is polynomial - time solvable for tournaments @xcite and for acyclic digraphs @xcite .",
    "the single - root special case ( i.e. , when @xmath12 ) of the problem is polynomial time solvable for quasi - transitive digraphs is quasi - transitive if for every @xmath13 there is at least one arc between @xmath14 and @xmath15 , i.e. either @xmath16 or @xmath17 or both . ] @xcite and for locally semicomplete digraphs is locally semicomplete if for every @xmath18 there is at least one arc between @xmath19 and @xmath15 and for every @xmath20 there is at least one arc between @xmath19 and @xmath15 .",
    "tournaments and directed cycles are locally semicomplete digraphs . ]",
    "an out - branching @xmath21 and an in - branching @xmath22 are called _",
    "@xmath1-distinct _ if @xmath23 .",
    "bang - jensen , saurabh and simonsen @xcite considered the following parameterization of arc - disjoint branchings .",
    "@xmath1-distinct branchings input : & a digraph @xmath0 , an integer  @xmath1 .",
    "+ question : & are there @xmath1-distinct out - branching @xmath21 and in - branching @xmath22 ?",
    "they proved that @xmath1-distinct branchings is fixed - parameter tractable ( fpt)-distinct branchings means that the problem can be solved by an algorithm of runtime @xmath24 , where @xmath25 omits not only constant factors , but also polynomial ones , and @xmath26 is an arbitrary computable function .",
    "the books @xcite are excellent recent introductions to parameterized algorithms and complexity . ]",
    "when @xmath0 is strongly connected and conjectured that the same holds when @xmath0 is an arbitrary digraph .",
    "earlier , bang - jensen and yeo @xcite considered the version of @xmath1-distinct branchings where @xmath21 and @xmath22 must have the same root . ] and asked whether this version of @xmath1-distinct branchings , which we call single - root @xmath1-distinct branchings , is fpt .",
    "the problem abstracts a quite natural situation in wireless networks : such networks are best modeled as directed because of the inherent asymmetry in sending data ( a task consuming a lot of energy ) and receiving data ( a task that consumes very little energy ) .",
    "rooted in - branchings in this network correspond to routing strategies for aggregation and rooted out - branchings for dissemination of data @xcite . in this scenario ,",
    "the problem of finding an in- and out - branchings with few common arcs solves a natural congestion - type problem .",
    "the first key idea of this paper is to relate @xmath1-distinct branchings to the problem of deciding whether a digraph has an out - branching with at least @xmath1 leaves via a simple lemma ( see lemma  [ lemma : leaves - branch ] ) .",
    "the lemma and the following two known results on out - branchings with at least @xmath1 leaves allow us to solve the problem of bang - jensen and yeo @xcite and to provide a shorter proof for the above - mentioned result of bang - jensen , saurabh and simonsen @xcite ( see theorem  [ thm : strong ] ) .",
    "@xcite[thm : alon ] let @xmath0 be a strongly connected digraph .",
    "if @xmath0 has no out - branching with at least @xmath1 leaves , then the ( undirected ) pathwidth of @xmath0 is bounded by @xmath27 .",
    "@xcite [ thm : kleaf ] we can decide whether a digraph @xmath0 has an out - branching with at least @xmath1 leaves in time @xmath28 .",
    "the general case of @xmath1-distinct branchings seems to be much more complicated .",
    "we first introduce a version of @xmath1-distinct branchings called @xmath1-rooted distinct branchings , where the roots @xmath3 and @xmath29 of @xmath21 and @xmath22 are fixed , and add arc @xmath30 to @xmath0 ( provided the arc is not in @xmath0 ) to make @xmath0 strongly connected .",
    "this introduces a complication : we may end up in a situation where @xmath0 has an out - branching with many leaves , and thereby potentially unbounded pathwidth , but the root of the out - branching is not @xmath3 . to deal with this situation , our goal will be to _ reconfigure _ the out - branching into an out - branching rooted at @xmath3 . in order to reason about this process , we develop a new digraph decomposition we call the _ rooted cut decomposition_. the cut decomposition of a digraph @xmath0 rooted at a given vertex @xmath31 consists of a tree @xmath32 rooted at @xmath31 whose nodes are some vertices of @xmath0 and subsets of vertices of @xmath0 called _ diblocks _ associated with the nodes of @xmath32 .    out strategy is now as follows . if @xmath32 is _ shallow _",
    "( i.e. , it has bounded height ) , then any out - branching with sufficiently many leaves can be turned into an out - branching rooted at @xmath3 without losing too many of the leaves . on the other hand , if @xmath32 contains a path from the root of @xmath32 with sufficiently many non - degenerate diblocks ( diblocks with at least three vertices ) , then we are able to show immediately that the instance is positive .",
    "the remaining and most difficult issue is to deal with digraphs with decomposition trees that contain long paths of diblocks with only two vertices , called _ degenerate _ diblocks . in this case , we employ two reduction rules which lead to decomposition trees of bounded height .",
    "the paper is organized as follows . in the next section ,",
    "we provide some terminology and notation on digraphs used in this paper . in section  [ sec : scd ] , we prove theorem  [ thm : strong ] . section  [ sec : any ] is devoted to proving that rooted @xmath1-distinct branchings is fpt for all digraphs using cut decomposition and theorems  [ thm : alon ] and  [ thm : kleaf ] .",
    "we conclude the paper in section  [ sec : conclusion ] , where some open parameterized problems on digraphs are mentioned .",
    "let us recall some basic terminology of digraph theory , see @xcite .",
    "a digraph @xmath0 is _ strongly connected _",
    "( _ connected _ ) if there is a directed ( oriented ) path from @xmath14 to @xmath19 for every ordered pair @xmath33 of vertices of @xmath0 .",
    "equivalently , @xmath0 is connected if the underlying graph of @xmath0 is connected .",
    "a vertex @xmath5 is a _ source _ ( _ sink _ ) is its in - degree ( out - degree ) is equal to zero .",
    "it is well - known that every acyclic digraph has a source and a sink @xcite .    in this paper , we exclusively work with digraphs , therefore we assume all our graphs , paths , and trees to be directed unless otherwise noted . for a path  @xmath34 of length",
    "@xmath35 we will employ the following notation for subpaths of  @xmath36 : @xmath37 : = x_i\\ldots x_j$ ] for  @xmath38 is the _ infix _ of  @xmath36 from  @xmath39 to  @xmath40 . for paths  @xmath41 and  @xmath42",
    "we denote by  @xmath43 their _",
    "concatenation_. for rooted trees  @xmath2 and some vertex  @xmath44 , @xmath45 stands for the subtree of  @xmath2 rooted at  @xmath14 ( see figure  [ fig : fins ] ) .",
    "subtree notation  @xmath45 for  @xmath44 ( left ) and the fins  @xmath46 for a path  @xmath47 in  @xmath2 ( right ) . ]",
    "we will frequently partition the nodes of a tree around a path in the following sense ( _ cf .",
    "_ figure  [ fig : fins ] ) :    let  @xmath2 be a tree rooted at  @xmath31 and  @xmath48 a path from  @xmath49 to some node  @xmath50 .",
    "the _ fins _ of  @xmath36 are the sets  @xmath51 defined as @xmath52    a set  @xmath53 in a digraph  @xmath0 is _ bi - reachable _ from a vertex  @xmath31 if for all  @xmath54 there exist two internally vertex - disjoint paths from  @xmath31 to  @xmath5 .    given a digraph  @xmath0 and a vertex  @xmath31 , we can compute the set of vertices that are bi - reachable from  @xmath31 in polynomial time using network flows .",
    "let us prove a simple fact on a link between out / in - branchings with many leaves and @xmath1-distinct branchings , which together with a structural result of alon _ et al .",
    "_ @xcite and an algorithmic result for the maximum leaf out - branching problem @xcite gives a short proof that both versions of @xmath1-distinct branchings are fpt for strongly connected digraphs .",
    "[ lemma : leaves - branch ] let @xmath0 be a digraph containing an out - branching and an in - branching .",
    "if @xmath0 contains an out - branching ( in - branching )  @xmath2 with at least  @xmath55 leaves , then every in - branching ( out - branching )  @xmath56 of  @xmath0 is @xmath1-distinct from  @xmath2 .",
    "we will consider only the case when @xmath2 is an out - branching since the other case can be treated similarly .",
    "let @xmath56 be an in - branching of @xmath0 and let @xmath57 be the set of all leaves of @xmath2 apart from the one which is the root of @xmath56 .",
    "observe that all vertices of @xmath57 have outgoing arcs in @xmath56 and since in @xmath2 the incoming arcs of @xmath57 are the only arcs incident to @xmath57 in @xmath2 , the sets of the outgoing arcs in @xmath56 and incoming arcs in @xmath2 do not intersect .",
    "we will use the following dynamic programming result from @xcite .",
    "[ lem : dp ] let @xmath58 be a digraph of ( undirected ) treewidth @xmath59",
    ". then @xmath1-distinct branchings on @xmath58 can be solved in time @xmath60 .",
    "note that if a digraph @xmath0 is a positive instance of single - root @xmath1-distinct branchings then @xmath0 must be strongly connected as an out - branching and an in - branching rooted at the same vertex form a strongly connected subgraph of @xmath0 .",
    "[ thm : strong ] @xmath1-distinct branchings and single - root @xmath1-distinct branchings on strongly connected digraphs can be solved in time @xmath61 .",
    "the proof is essentially the same for both problems and we will give it for single - root @xmath1-distinct branchings .",
    "let @xmath0 be an input strongly connected digraph by theorem  [ thm : kleaf ] using an @xmath28-time algorithm we can find an out - branching @xmath21 with at least @xmath55 leaves , or decide that @xmath0 has no such out - branching .",
    "if @xmath21 is found , the instance of single - root @xmath1-distinct branchings is positive by lemma  [ lemma : leaves - branch ] as any in - branching @xmath22 of @xmath0 is @xmath1-distinct from @xmath21 . in particular",
    ", we may assume that @xmath22 has the same root as @xmath21 ( a strongly connected digraph has an in - branching rooted at any vertex ) .",
    "now suppose that @xmath21 does not exist .",
    "then , by theorem  [ thm : alon ] the ( undirected ) pathwidth of  @xmath0 is bounded by  @xmath62 .",
    "thus , by lemma [ lem : dp ] the instance can be solved in time @xmath61 .",
    "in this section , we fix a digraph  @xmath0 with terminals @xmath63 and simply talk about _ rooted out - branchings ( in - branchings ) _ whose root we implicitly assume to be @xmath3 ( @xmath29 ) . similarly , unless otherwise noted , a _ rooted out - tree ( in - tree ) _ is understood to be rooted at  @xmath3 ( @xmath29 ) .    the problem in which @xmath21 and @xmath22 must be rooted at @xmath3 and @xmath29",
    ", respectively , will be called the problem . clearly , to show that both version of are fpt it is sufficient to prove the following :    [ thm : main ] is fpt for arbitrary digraphs .    in the rest of this section",
    ", @xmath64 will stand for an instance of ( in particular , @xmath0 is an input digraph of the problem ) and @xmath58 for an arbitrary digraph .",
    "let us start by observing what further restrictions on @xmath0 can be imposed by polynomial - time preprocessing .",
    "let @xmath64 be an instance of . recall that @xmath0 contains an out - branching ( in - branching ) if and only if @xmath0 has only one strongly connected component with no incoming ( no outgoing ) arc .",
    "as a first preprocessing step , we can decide in polynomial time whether @xmath0 has a rooted out - branching and a rooted in - branching . if not , we reject the instance .",
    "note that this in particular means that in a non - rejected instance , every vertex in  @xmath0 is reachable from  @xmath3 and @xmath29 is reachable from every vertex .",
    "next , we test for every arc  @xmath65 whether there exists at least one rooted in- or out - branching that uses  @xmath66 as follows : since a maximal - weight out- or in - branching for an arc - weighted digraph can be computed in polynomial time @xcite , we can force the arc  @xmath66 to be contained in a solution by assigning it a weight of 2 and every other arc weight 1 .",
    "if we verify that @xmath66 indeed neither appears in any rooted out - branching or in - branching , we remove  @xmath66 from  @xmath0 and obtain an equivalent instance of .    after this polynomial - time preprocessing",
    ", our instance has the following properties : there exists a rooted out - branching , there exists a rooted in - branching , and every arc of  @xmath0 appears in some rooted in- or out - branching .",
    "we call such a digraph with a pair  @xmath63 _ reduced_.",
    "lastly , by the following lemma we may assume that our instance is strongly connected by incurring a factor of two in the application of lemma  [ lemma : leaves - branch ] .",
    "[ lemma : strongly - connected - instance ] let @xmath64 be reduced and let  @xmath67 be the digraph obtained from  @xmath0 by adding the arc  @xmath30 to it . then  @xmath68 is a positive instance of if and only if  so is @xmath64 .",
    "furthermore , if  @xmath67 contains an out - tree ( in - tree ) with at least  @xmath7 leaves , then @xmath0 contains an out - tree ( in - tree ) with at least  @xmath69 leaves .",
    "for the first claim , simply note that any rooted out - branching of  @xmath67 can not use the arc  @xmath30 and the same holds for rooted in - branchings .    for the second claim , assume  @xmath2 is an out - tree in  @xmath0 with  @xmath7 leaves",
    ". assume  @xmath70 ( otherwise the claim follows trivially ) .",
    "let  @xmath71 and  @xmath72 be the two out - trees obtained by deleting the arc  @xmath30 from  @xmath2 .",
    "both are out - trees in  @xmath0 and one of them contains at least  @xmath69 leaves , as claimed .",
    "the first claim of lemma  [ lemma : strongly - connected - instance ] shows that we may assume that @xmath0 is strongly connected in .",
    "this implies the following simple claim required for further references .",
    "[ lem : treeext ] let @xmath0 be an input digraph of . then every rooted out - tree with @xmath73 leaves can be extended into a rooted out - branching with at least @xmath73 leaves .    in summary",
    ", we enforce the following properties for  @xmath64 by polynomial- time preprocessing :    1 .   every arc of  @xmath0 is contained in at least one rooted in - branching or rooted out - branching , 2 .",
    "@xmath0 is strongly connected .",
    "we work towards the following win - win scenario : either we find an out - tree with  @xmath74 leaves that can be turned into a rooted out - tree with at least  @xmath55 leaves , or we conclude that every out - tree in  @xmath0 has less than  @xmath74 leaves .",
    "we refer to the process of turning an out - tree into a rooted out - tree as a _",
    "reconfiguration_. in the process we will develop a new digraph decomposition , the _ rooted cut - decomposition _ , which will aid us in reasoning about reconfiguration steps and ultimately lead us to a solution for the problem .    to make the notion of a bi - reachable set easier to use ,",
    "the decomposition will employ a slightly broader notion as follows .",
    "let @xmath58 be a digraph with at least two vertices , and let @xmath75 such that every vertex of @xmath58 is reachable from @xmath31 .",
    "let @xmath76 be the set of all vertices that are bi - reachable from @xmath31 .",
    "the _ directed block ( diblock ) @xmath77 of @xmath31 in @xmath58 _ is the set @xmath78 $ ] , i.e. , the bi - reachable vertices together with all out - neighbors of @xmath31 and @xmath31 itself .",
    "note that according to the above definition a diblock must have at least two vertices .",
    "the following statement provides us with an easy case in which a reconfiguration is successful , that is , we can turn an arbitrary out - tree into a rooted out - tree without losing too many leaves .",
    "later , the obstructions to this case will be turned into building blocks of the decomposition .",
    "[ lemma : re - root ] let  @xmath79 be the diblock of  @xmath3 and let  @xmath2 be an out - tree of  @xmath0 whose root  @xmath31 lies in  @xmath80 with @xmath7 leaves .",
    "then there exists a rooted out - tree with at least  @xmath81 leaves .",
    "we may assume that @xmath82 . in case",
    "@xmath2 contains  @xmath3 as a leaf , we remove  @xmath3 from  @xmath2 for the remaining argument and hence will argue about the  @xmath83 remaining leaves .    if @xmath31 is bi - reachable from @xmath3 , consider two internally vertex - disjoint paths  @xmath84 from  @xmath3 to  @xmath31 .",
    "one of the two paths necessarily avoids half of the  @xmath83 leaves of @xmath85 ; let without loss of generality this path be  @xmath36 .",
    "let further  @xmath57 be the set of those leaves of  @xmath85 that do _ not _ lie on  @xmath36 .",
    "if @xmath86 , let @xmath87 .",
    "we construct the required out - tree @xmath56 as follows : first , add all arcs and vertices of  @xmath36 to  @xmath56 .",
    "now for every leaf  @xmath88 , let @xmath89 be the unique path from  @xmath31 to  @xmath5 in  @xmath85 and let @xmath90 be the segment of @xmath89 from the last vertex @xmath14 of @xmath89 contained in @xmath2 .",
    "add all arcs and vertices of  @xmath90 to  @xmath56 .",
    "observe that @xmath91 as @xmath5 can not be in @xmath56 already . since @xmath89 and thus @xmath90 contains no leaf of @xmath57 other than @xmath5 , in the end of the process , all vertices of @xmath57 are leaves of @xmath56 . since @xmath92 , the claim follows .",
    "note that the definition of diblocks can be understood in terms of network flows .",
    "let @xmath93 consider the vertex - capacitated version of @xmath58 where @xmath31 and @xmath5 both have capacity 2 , and every other vertex has capacity 1 , for some @xmath94 .",
    "then @xmath5 is contained in the diblock of @xmath31 in @xmath58 if and only if the max - flow from @xmath31 to @xmath5 equals 2 .",
    "dually , by menger s theorem , @xmath5 is _ not _ contained in the diblock if and only if there is a vertex @xmath95 such that all @xmath31-@xmath5 paths @xmath36 intersect @xmath10 .",
    "this has the following simple consequence regarding connectivity inside a diblock .",
    "[ lemma : bi - reachable - pair ] fix  @xmath75 and let  @xmath96 be the diblock of @xmath31 in @xmath58 .",
    "then for every pair of distinct vertices @xmath97 , there exist an @xmath31-@xmath14-path  @xmath98 and an @xmath31-@xmath19-path  @xmath99 that intersect only in  @xmath31 .    if @xmath100 , then clearly the claim holds since every vertex in @xmath77 is reachable from @xmath31 .",
    "otherwise , add a new vertex @xmath15 with arcs @xmath101 and @xmath102 , and note that the lemma holds if and only if @xmath15 is bi - reachable from @xmath31 .",
    "if this is not true , then by menger s theorem there is a vertex @xmath103 , @xmath104 , such that all paths from @xmath31 to @xmath15 , and hence to @xmath14 and @xmath19 , go through @xmath5 .",
    "but as noted above , there is no cut - vertex @xmath105 for @xmath31-@xmath14 paths , and no cut - vertex @xmath106 for @xmath31-@xmath19 paths .",
    "we conclude that @xmath15 is bi - reachable from @xmath31 , hence the lemma holds .",
    "next , we will use lemma  [ lemma : bi - reachable - pair ] to show that given a vertex @xmath31 , the set of vertices not in the diblock @xmath77 of @xmath31 in @xmath58 partitions cleanly around @xmath77 .",
    "[ lemma : partition - bottlenecks ] let @xmath75 be given , such that every vertex of @xmath58 is reachable from @xmath31 .",
    "let @xmath107 be the diblock of @xmath31 in @xmath58 .",
    "then @xmath108 partitions according to cut vertices in @xmath77 , in the following sense : for every @xmath109 , there is a unique vertex @xmath110 such that every path from @xmath31 to @xmath5 intersects @xmath77 for the last time in @xmath14 . furthermore , this partition can be computed in polynomial time .    assume towards a contradiction that for  @xmath109 there exist two @xmath31-@xmath5-paths  @xmath111 that intersect  @xmath77 for the last time in distinct vertices  @xmath112 , respectively .",
    "we first observe that @xmath113 , since the second vertices of @xmath114 and @xmath115 are contained in @xmath77 by definition . by lemma  [ lemma",
    ": bi - reachable - pair ] , we may assume that @xmath116 \\cap p_2[r , x_2 ] = \\{r\\}$ ] .",
    "but then  @xmath114 and  @xmath115 intersect for the first time outside of  @xmath77 in some vertex  @xmath117 ( potentially in  @xmath118 ) .",
    "this vertex is , however , bi - reachable from  @xmath31 , contradicting our construction of  @xmath77 .",
    "hence there is a vertex @xmath119 such that every path from @xmath31 to @xmath5 intersects @xmath77 for the last time in @xmath14 , with @xmath120 , and clearly this vertex is unique .",
    "finally , the set @xmath77 can be computed in polynomial time , and given @xmath77 it is easy to compute for each @xmath119 the set of all vertices @xmath121 ( if any ) for which @xmath14 is a cut vertex .",
    "we refer to the vertices @xmath119 that are cut vertices in the above partition as the _ bottlenecks of @xmath77_. note that @xmath31 itself is not considered a bottleneck in @xmath77 . using these notions",
    ", we can now define a _ cut decomposition _ of a digraph @xmath58 .",
    "[ def : decomp ] let  @xmath58 be a digraph and  @xmath31 a vertex such that every vertex in  @xmath58 is reachable from  @xmath31 .",
    "( @xmath31-rooted ) cut decomposition _ of @xmath58 is a pair  @xmath122 where @xmath32 is a rooted tree with @xmath123 and @xmath124 , @xmath125 for each @xmath126 , is a collection of diblocks associated with the nodes of @xmath2 , defined and computed recursively as follows .    1 .",
    "let @xmath77 be the diblock of @xmath31 in @xmath58 , and let @xmath127 be the set of bottlenecks in @xmath77 .",
    "let @xmath128 be the corresponding partition of @xmath108 .",
    "2 .   for every @xmath129 ,",
    "let @xmath130 be the @xmath14-rooted cut decomposition of @xmath131 $ ] .",
    "@xmath32 is the tree with root node @xmath31 , where @xmath57 is the set of children of @xmath31 , and for every @xmath129 the subtree of @xmath32 rooted at @xmath14 is @xmath132 .",
    "4 .   @xmath133 .    furthermore , for every node @xmath126 , we define @xmath134 as the set of all vertices contained in diblocks associated with nodes of the subtree @xmath132 .",
    "figure  [ fig : decomp ] provides an illustration to definition  [ def : decomp ] .",
    "[ fig : decomp ]     [ lemma : decomposition - well - defined ] let a digraph @xmath58 and a root @xmath75 be given , such that every vertex of @xmath58 is reachable from @xmath31 .",
    "then the @xmath31-rooted cut decomposition @xmath135 of @xmath58 is well - defined and can be computed in polynomial time .",
    "furthermore , the diblocks cover @xmath136 , i.e. , @xmath137 , and for every node @xmath126 , every vertex of @xmath138 is reachable from @xmath14 in @xmath139 $ ] .    by lemma  [ lemma : partition - bottlenecks ] ,",
    "the root diblock @xmath77 as well as the set @xmath140 of bottlenecks and the partition @xmath128 are well - defined and can be computed in polynomial time .",
    "also note that for each @xmath129 , @xmath141 , and every vertex of @xmath142 $ ] is reachable from @xmath14 in @xmath143 by the definition of the partition .",
    "hence the collection of recursive calls made in the construction is well - defined , and every digraph @xmath143 used in a recursive call is smaller than @xmath58 , hence the process terminates .",
    "finally , for any two distinct bottlenecks @xmath144 we have @xmath145 .",
    "thereby , distinct nodes of @xmath32 are associated with distinct vertices of @xmath58 , @xmath146 , and the map @xmath147 is well - defined .",
    "it is also clear that the whole process takes polynomial time .",
    "we collect some basic facts about cut decompositions .",
    "[ lemma : cut - decomposition - props ] let a digraph @xmath58 and a vertex @xmath75 be given , and let @xmath148 be the @xmath31-rooted cut decomposition of @xmath58 .",
    "then the following hold .    1 .   the sets @xmath149 are all non - empty and partition @xmath150 .",
    "2 .   for distinct nodes",
    "@xmath151 , if @xmath14 is the parent of @xmath19 in @xmath32 then @xmath152 ; in every other situation , @xmath153 .",
    "3 .   for every node @xmath126 ,",
    "the following hold : [ item : cut - prop-3 ] 1 .",
    "if @xmath19 is a child of @xmath14 in @xmath32 , then any arc leading into the set @xmath154 from @xmath155 will have the form @xmath156 where @xmath157 .",
    "2 .   if @xmath19 , @xmath158 are distinct children of @xmath14 in @xmath32 , then there is no arc between @xmath154 and @xmath159 .    in particular , every arc of @xmath58 is either contained in a subgraph of @xmath58 induced by a diblock @xmath160 , or it is a _ back arc _ going from a diblock @xmath161 to a diblock @xmath160 , where @xmath14 is an ancestor of @xmath19 in @xmath32 .",
    "for the first claim , the sets @xmath162 are non - empty by definition ; we show the partitioning claim . by lemma  [ lemma : partition - bottlenecks ] , for every @xmath94 either @xmath163 or there is exactly one bottleneck @xmath119 such that @xmath164 in the construction of the decomposition . also note that in the latter case , @xmath165 since @xmath119 . applying the argument recursively and using that the diblocks cover @xmath136 , by lemma  [ lemma : decomposition - well - defined ]",
    ", we complete the proof of the partitioning claim .",
    "for the second claim , the partitioning claim implies that if @xmath166 for distinct nodes @xmath151 , then either @xmath167 or @xmath168 , i.e. , @xmath5 must be a bottleneck .",
    "this is only possible in the situation described .    for claim 3(b ) , first consider the diblock @xmath77 and the partition @xmath169 given by lemma  [ lemma : partition - bottlenecks ] .",
    "we show that for any two distinct sets @xmath170 , @xmath171 of the partition , there is no arc between @xmath170 and @xmath171 .",
    "suppose for a contradiction that there is such an arc @xmath172 , @xmath173 , @xmath174 .",
    "by lemma  [ lemma : bi - reachable - pair ] , there are paths @xmath98 and @xmath99 in @xmath77 that intersect only in @xmath31 , and by lemma  [ lemma : decomposition - well - defined ] , there are paths @xmath175 from @xmath14 to @xmath10 in @xmath170 and @xmath89 from @xmath19 to @xmath5 in @xmath171 .",
    "but then the paths @xmath176 and @xmath177 form two @xmath31-@xmath5 paths that are internally vertex - disjoint , showing that @xmath103 , contrary to our assumptions .",
    "since the decomposition is computed recursively , this also holds in every internal node of @xmath32 .    for claim 3(a ) , let @xmath172 be an arc such that @xmath178 and @xmath179 .",
    "moreover , let @xmath180 and @xmath181 .",
    "by construction of cut decomposition , there is a path @xmath182 from @xmath183 to @xmath158 in @xmath32 containing nodes @xmath14 and @xmath19 .",
    "let @xmath184 be the second node in @xmath185 ( just after @xmath183 ) .",
    "thus , there is a path @xmath36 from @xmath184 to @xmath5 in @xmath58 containing the vertices of @xmath185 apart from @xmath183 .",
    "assume that @xmath186 .",
    "then by lemma  [ lemma : bi - reachable - pair ] , there is an @xmath183-@xmath10-path @xmath187 and an @xmath183-@xmath184-path @xmath188 of @xmath58 which intersect only at @xmath183 .",
    "then @xmath189 and @xmath190 are internally vertex - disjoint paths from @xmath183 to @xmath5 .",
    "this means that @xmath5 must be in @xmath191 , a contradiction unless @xmath192 , @xmath193 and @xmath168 . if @xmath194 , then @xmath36 and @xmath172 are internally vertex - disjoint paths from @xmath10 to @xmath5 .",
    "this means that @xmath5 must be in @xmath195 , a contradiction unless @xmath192 and @xmath168 .    as we saw , for every diblock @xmath161 , @xmath196 , any path `` into '' the diblock must go via the bottleneck vertex @xmath19 .",
    "by induction , for any @xmath197 , every node of @xmath32 from @xmath31 to @xmath19 represents a bottleneck vertex that is unavoidable for paths from @xmath31 to @xmath5 .",
    "more formally , the following holds in cut decompositions :    [ lemma : ancestor - bottlenecks ] let  @xmath198 be the cut decomposition of @xmath58 rooted at  @xmath31 .",
    "fix a diblock  @xmath160 for  @xmath126 .",
    "consider a path  @xmath36 in @xmath58 from  @xmath31 to  @xmath199 and let  @xmath200 be the sequence of bottleneck vertices that  @xmath36 encounters .",
    "then  @xmath201 with  @xmath202 is the path from  @xmath31 to  @xmath14 in  @xmath32 .",
    "we prove the claim by induction over the depth  @xmath203 of  @xmath14 in  @xmath32 .",
    "if  @xmath204 then any path from  @xmath31 to  @xmath103 contains  @xmath31 itself and hence the base case for  @xmath205 holds .",
    "consider a diblock  @xmath160 , @xmath126 where  @xmath14 has distance  @xmath203 to  @xmath31 in  @xmath32 and let  @xmath19 be the parent of  @xmath14 in  @xmath32 .",
    "we assume the induction hypothesis holds for diblocks at depth  @xmath206 , hence it holds for  @xmath161 in particular .",
    "because  @xmath207 , this implies that every path from  @xmath31 to  @xmath14 will contain all ancestors of  @xmath14 in  @xmath32 . since by construction every path from  @xmath31 to a vertex  @xmath199 needs to pass through  @xmath14 , the inductive step holds .",
    "this proves the claim .    as an immediate consequence",
    ", we can identify arcs in cut decompositions that can not participate in any rooted out - branching .",
    "[ cor : marked - out - arcs ] let  @xmath198 be the cut decomposition of rooted at  @xmath31 and let @xmath208 be all the arcs that originate in a diblock  @xmath160 and end in an ancestor  @xmath5 of  @xmath14 on @xmath32 . then for every out - tree  @xmath2 rooted at @xmath31 we have  @xmath209 .",
    "fix a bottleneck vertex  @xmath210 of the decomposition and let the arc  @xmath172 be in an out - tree  @xmath2 rooted at @xmath31 .",
    "there must exist a path  @xmath211 from  @xmath3 to  @xmath10 that is part of  @xmath2 . by lemma  [ lemma : ancestor - bottlenecks ] , this path will contain the vertex  @xmath5 .",
    "but then  @xmath5 is an ancestor of  @xmath10 in  @xmath2 and therefore the arc  @xmath172 can not be part of  @xmath2 , which is a contradiction .",
    "the decomposition actually restricts paths even further : a path that starts at the root and visits two bottleneck vertices  @xmath33 ( in this order ) can not intersect any vertex of @xmath154 before visiting @xmath19 and can not return to any set @xmath212 , @xmath213 , after having left it .",
    "[ lemma : between - bottlenecks ] let  @xmath198 be the cut decomposition of @xmath58 rooted at  @xmath31 . fix a diblock  @xmath160 for  @xmath126 . consider a path  @xmath36 from  @xmath31 to  @xmath199 and let  @xmath214 be the path from  @xmath215 to  @xmath216 in  @xmath32 .",
    "let further  @xmath217 be the fins of  @xmath185 in  @xmath32 .",
    "then the subpath @xmath218 \\setminus \\{x_{i+1}\\}$ ] is contained in the union of diblocks of @xmath219 for  @xmath220 .    by lemma  [ lemma : ancestor - bottlenecks ]",
    "we know that the nodes of  @xmath185 appear in  @xmath36 in the correct order , hence the subpath  @xmath218 $ ] is well - defined .",
    "let us first show that the subpath  @xmath218\\setminus \\{x_{i+1}\\}$ ] can not intersect any diblock associated with  @xmath221 . by lemma  [ lemma : cut - decomposition - props ] ,",
    "the only arcs from  @xmath222 into diblocks below  @xmath223 connect to the bottleneck  @xmath223 itself .",
    "since  @xmath223 is already the endpoint of  @xmath218 $ ] , this subpath can not intersect the diblocks of  @xmath221 .",
    "this already proves the claim for  @xmath224 ; it remains to show that it does not intersect diblocks of  @xmath225 for @xmath226 .",
    "the reason is similar : since the bottleneck  @xmath39 is already part of  @xmath218 $ ] , this subpath could not revisit  @xmath222 if it enters any diblock  @xmath161 for a proper ancestor  @xmath19 of  @xmath39 in @xmath32 .",
    "we conclude that therefore it must be , with the exception of the vertex  @xmath223 , inside the diblocks of the fin  @xmath219 .",
    "[ cor : avoid - half ] for every vertex  @xmath227 and every set  @xmath228 of non - bottleneck vertices there exists a path  @xmath36 from  @xmath31 to  @xmath10 such that  @xmath229 .    assume that  @xmath157 and let  @xmath230 be a path from  @xmath202 to  @xmath231 in  @xmath32 . let further  @xmath232 be the fins of  @xmath185 in  @xmath32 .",
    "we partition the set  @xmath233 into  @xmath234 where  @xmath235 for  @xmath236 .",
    "lemma  [ lemma : between - bottlenecks ] allows us to construct the path  @xmath36 iteratively : any path that leads to  @xmath10 will pass through bottlenecks  @xmath237 in succession and visit only diblocks associated with  @xmath219 in the process . since there are two internally vertex - disjoint paths between  @xmath237 for  @xmath238",
    ", we can always choose the path that has the smaller intersection with  @xmath239 . stringing these paths together , we obtain the claimed path  @xmath36 .",
    "we want to argue that one of the following cases must hold : either the cut decomposition has bounded height and we can ` re - root ' any out - tree with many leaves into a rooted out - tree with a comparable number of leaves , or we can directly construct a rooted out - tree with many leaves . in both cases",
    "we apply lemmas  [ lemma : leaves - branch ] and  [ lem : treeext ] to conclude that the instance has a solution .",
    "this approach has one obstacle : internal diblocks of the decomposition that contain only two vertices .",
    "let  @xmath240 be the cut decomposition rooted at  @xmath3 .",
    "we call a diblock  @xmath160 _ degenerate _ if  @xmath14 is an internal node of  @xmath32 and  @xmath241 .",
    "let us first convince ourselves that a long enough sequence of non - degenerate diblocks provides us with a rooted out - branching with many leaves .",
    "[ lemma : win - non - degen - path ] let  @xmath198 be the cut decomposition rooted at  @xmath3 of @xmath58 and let @xmath19 be a node in  @xmath32 such that the path  @xmath242 from  @xmath3 to  @xmath19 in  @xmath32 contains at least  @xmath7 nodes whose diblocks are non - degenerate",
    ". then  @xmath58 contains an out - tree rooted at @xmath3 with at least  @xmath7 leaves .",
    "we construct an @xmath3-rooted out - tree @xmath2 by repeated application of lemma  [ lemma : bi - reachable - pair ] .",
    "let @xmath243 , @xmath244 , @xmath245 be a sequence of nodes in @xmath242 whose diblocks are non - degenerate , and for each @xmath246 let @xmath247 be the node after @xmath39 in @xmath242 .",
    "we construct a sequence of @xmath3-rooted out - trees @xmath71 ,",
    "@xmath244 , @xmath248 such that for @xmath238 , the vertex @xmath39 is a leaf of @xmath249 , and @xmath249 contains @xmath250 leaves .",
    "first construct @xmath71 as a path from @xmath3 to @xmath243 , then for every @xmath251 we construct an out - tree @xmath252 from @xmath249 as follows .",
    "let @xmath253 , which exists since @xmath222 is non - degenerate , and let @xmath254 , @xmath255 be a pair of paths in @xmath256 $ ] from @xmath39 to @xmath247 and to @xmath257 respectively , which intersect only in @xmath39 .",
    "such paths exist by lemma  [ lemma : bi - reachable - pair ] , and since @xmath39 is a leaf of @xmath249 , lemma  [ lemma : ancestor - bottlenecks ] implies that @xmath249 is disjoint from @xmath258 . hence the paths can be appended to @xmath249 to form a new @xmath31-rooted out - tree @xmath252 in @xmath58 which contains a leaf in every diblock @xmath259 , @xmath260 .",
    "finally , note that the final tree @xmath248 contains two leaves in @xmath261 , hence @xmath248 is an @xmath31-rooted out - tree with @xmath7 leaves .",
    "the next lemma is the last assertion that we will use to prove shortly that is fpt for digraphs @xmath0 whose cut decomposition rooted at @xmath3 contains no degenerate diblocks .",
    "[ lemma : win - bounded - height ] let  @xmath198 be the cut decomposition of @xmath0 rooted at  @xmath3 such that @xmath32 is of height  @xmath203 and let @xmath2 be an out - tree rooted at some vertex  @xmath31 with  @xmath7 leaves",
    ". then we can construct an out - tree  @xmath262 rooted at  @xmath3 with at least  @xmath263 leaves .",
    "assume that  @xmath31 is contained in the diblock  @xmath160 of the decomposition and let  @xmath264 be a path from  @xmath265 to  @xmath266 in  @xmath32 .",
    "let  @xmath57 be the leaves of  @xmath2 and let  @xmath267 . clearly , @xmath268 .",
    "applying corollary  [ cor : avoid - half ] with  @xmath269 and  @xmath270 , we obtain a path  @xmath271 in @xmath0 from @xmath3 to @xmath31 that avoids half of  @xmath272 .",
    "we construct  @xmath262 in a similar fashion to the proof of lemma  [ lemma : re - root ] .",
    "we begin with  @xmath273 , then for every leaf  @xmath274 , proceed as follows : let @xmath89 be the unique path from  @xmath31 to  @xmath5 in  @xmath2 and let @xmath90 be the segment of @xmath89 from the last vertex @xmath14 of @xmath89 contained in @xmath262 .",
    "add all arcs and vertices of  @xmath90 to  @xmath262 .",
    "since @xmath89 and thus @xmath90 contains no leaf of @xmath272 other than @xmath5 , in the end of the process , all vertices of @xmath275 are leaves of @xmath262 . since @xmath276 , we conclude that  @xmath262 contains at least  @xmath277 leaves , as claimed .",
    "the next lemma demonstrates that using lemma  [ lemma : win - bounded - height ] and a number of other results we can prove that if the height of @xmath203 of the cut decomposition of @xmath0 is upper - bounded by a function in @xmath1 , then on @xmath0 is fpt .",
    "this shows that to prove that in general it suffices to consider separately the cases of bounded @xmath203 and unbounded @xmath203 . to provide an appropriate bound on @xmath203 we will use further results on degenerate diblocks provided in section  [ sec :",
    "degenerate ] .",
    "[ thm : boundedd ] let @xmath198 the cut decomposition rooted at @xmath3 of height @xmath203 .",
    "if @xmath278 for some function @xmath279 of @xmath1 only , then we can solve on @xmath0 in time @xmath280 .    by theorem  [ thm : kleaf ] , in time @xmath281 we can decide whether @xmath0 has an out - branching with",
    "at least @xmath282 leaves .",
    "if @xmath0 has such an out - branching , then by lemma  [ lemma : win - bounded - height ] @xmath0 has a rooted out - tree with at least @xmath55 leaves .",
    "this out - tree can be extended to a rooted out - branching with at least @xmath55 leaves by lemma  [ lem : treeext ] .",
    "so by lemma  [ lemma : leaves - branch ] , @xmath64 is a positive instance if and only if @xmath0 has a rooted in - branching , which can be decided in polynomial time .",
    "if @xmath0 has no out - branching with at least @xmath282 leaves , by theorem  [ thm : alon ] the pathwidth of @xmath0 is @xmath283 and thus by lemma  [ lem : dp ] we can solve on @xmath0 in time @xmath280 .",
    "( note that for the dynamic programming algorithm of lemma  [ lem : dp ] we may fix roots of all out - branchings and all in - branchings of @xmath0 by adding arcs @xmath284 and @xmath285 to @xmath0 , where @xmath286 and @xmath287 are new vertices . )      here is a key notion for our study of degenerate diblocks .",
    "let  @xmath198 be a cut decomposition of @xmath0 .",
    "we call a path  @xmath185 in  @xmath32 _ monotone _ if it is a subpath of a path from the root of  @xmath32 to some leaf of  @xmath32 .",
    "we call a path  @xmath185 in  @xmath32 _ degenerate _ if it is monotone and every diblock  @xmath160 , @xmath288 is degenerate .",
    "let @xmath64 be a strongly connected reduced instance of . as observed in section  [ sec : preprocessing ] , we can verify in polynomial time whether an arc participates in _ some _ rooted in- or out - branching .",
    "let  @xmath289 be those arcs that do not participate in any rooted out - branching and @xmath290 those that do not participate in any rooted in - branching .",
    "since @xmath64 is a reduced instance , we necessarily have that  @xmath291 , a fact we will use frequently in the following .",
    "corollary  [ cor : marked - out - arcs ] provides us with an important subset of  @xmath292 : every arc that originates in a diblock  @xmath160 of the cut decomposition and ends in a bottleneck vertex that is an ancestor of  @xmath14 on @xmath32 is contained in  @xmath292 .",
    "let us first prove some basic properties of degenerate paths .",
    "[ lemma : degen - path - props ] let  @xmath293 be a degenerate path of  @xmath198 of @xmath0 rooted at  @xmath3 .",
    "then the following properties hold :    1 .",
    "every rooted out - branching contains  @xmath294 , 2 .",
    "every arc  @xmath295 with  @xmath296 is contained in  @xmath292 , and 3 .",
    "there is no arc from  @xmath39 @xmath297 to  @xmath161 in @xmath0 , where  @xmath19 is a descendant of  @xmath39 on @xmath32 , except for the arc @xmath298 .",
    "every rooted out - branching contains in particular the last vertex  @xmath245 of the path . by lemma  [ lemma : ancestor - bottlenecks ]",
    ", it follows that @xmath185 is contained in the out - branching as a monotone path , hence it contains  @xmath294 .",
    "consequently , no ` back - arc ' @xmath295 with  @xmath296 can be part of a rooted out - branching and thus it is contained in  @xmath292 .    for the third property ,",
    "note that all arcs from @xmath39 except back arcs are contained in @xmath222 .",
    "since @xmath222 is degenerate there can be only one such arc .",
    "for the remainder of this section , let us fix a single degenerate path  @xmath293 .",
    "we categorize the arcs incident to  @xmath185 as follows :    1 .",
    "let  @xmath299 contain all ` upward arcs ' that originate in  @xmath185 and end in some diblock  @xmath161 where  @xmath19 is an ancestor of  @xmath243 , 2 .",
    "let  @xmath300 contain all ` on - path arcs ' @xmath295 , @xmath296 , and 3 .",
    "let  @xmath301 contain all ` arcs from below ' that originate from some diblock  @xmath161 where  @xmath19 is a ( not necessarily proper ) descendant of  @xmath245 .    by lemma  [ lemma : degen - path - props ]",
    ", this categorization is complete : no other arcs can be incident to  @xmath185 in a reduced instance . by the same lemma",
    ", we immediately obtain that  @xmath302 .",
    "we will now apply certain reduction rules to  @xmath64 and prove in the following that they are safe , with the goal of bounding the size of  @xmath185 by a function of the parameter  @xmath1 .",
    "* reduction rule 1 * if there are two arcs  @xmath303 with  @xmath304 , remove  @xmath305 .",
    "rule 1 is safe .",
    "since  @xmath64 is reduced , the arcs  @xmath306 and  @xmath305 can not be in  @xmath292 .",
    "pick any rooted out - branching  @xmath2 that contains the arc  @xmath305 . by lemma  [ lemma : degen - path - props ]",
    ", we have that  @xmath307 , therefore we can construct an out - branching  @xmath56 by exchanging the arc  @xmath305 for the arc  @xmath306 . since a )",
    "no rooted in - branching contains either of these two arcs , b ) no out - branching can contain both , and c ) the number of leaves in  @xmath2 and  @xmath56 are the same , we conclude that  @xmath308 is equivalent to  @xmath64 and thus rule 1 is safe .",
    "[ cor : few - useless - up - arcs ] let  @xmath64 be reduced with respect to rule 1 . then we either find a solution for  @xmath64 or @xmath309 .",
    "let  @xmath58 be the heads of the arcs  @xmath310 .",
    "since rule  1 was applied exhaustively , no vertex in  @xmath58 is the head of two arcs  @xmath310 ; therefore  @xmath311 .",
    "note that any arc in  @xmath310 can not be contained in @xmath292 , therefore @xmath58 does not contain any bottleneck vertices . applying corollary  [ cor",
    ": avoid - half ] , we can find a path  @xmath312 from  @xmath3 to  @xmath245 that avoids half of the vertices in  @xmath58 .",
    "thus we can add half of  @xmath58 as leaves to  @xmath312 using the arcs from  @xmath310 .",
    "thus if  @xmath313 , we obtain a rooted out - tree with at least  @xmath314 leaves ( this count includes  @xmath245 ) , which by lemmas  [ lemma : leaves - branch ] ,  [ lemma : strongly - connected - instance ] and  [ lem : treeext ] imply that the original instance has a solution .",
    "we conclude that otherwise @xmath315 .",
    "[ lemma : a - plus - tails ] let  @xmath293 be a degenerate path .",
    "assume  @xmath316 and that @xmath64 is reduced with respect to rule 1 .",
    "let further  @xmath317 be those vertices of  @xmath185 that are tails of the arcs in  @xmath299 .",
    "we either find that  @xmath64 has a solution or that  @xmath318 .    for every vertex  @xmath319 with an arc @xmath320 , we construct a path  @xmath321 from  @xmath39 to  @xmath29 that contains @xmath322 as follows : since @xmath323 , there exist a rooted in - branching @xmath324 that contains  @xmath322 .",
    "we let  @xmath325 be the path from  @xmath39 to  @xmath29 in  @xmath324 .",
    "each path  @xmath321 does not intersect vertices in diblocks of  @xmath326 .",
    "since  @xmath321 leaves  @xmath185 via the first arc  @xmath322 , it can not use the arc  @xmath298 . since this is the only arc that leads to vertices in diblocks of  @xmath326 , the claim follows .",
    "+ let us relabel the just constructed paths to  @xmath327 such that they are sorted with respect to their start vertices on  @xmath185 .",
    "that is , for  @xmath304 the first vertex of  @xmath328 appears before the first vertex of  @xmath329 on  @xmath185 .",
    "we iteratively construct rooted in - trees @xmath330 with the invariant that a ) @xmath331 has exactly  @xmath250 leaves and b ) does not contain any vertex of  @xmath185 below the starting vertex of @xmath328 . choosing  @xmath332",
    "clearly fulfills this invariant . to construct  @xmath331 from  @xmath333 for  @xmath334 , we simply follow the path  @xmath328 up to the first intersection with  @xmath333 . since  @xmath335 , such a vertex must eventually exist . by the above claim , @xmath328 does not contain any vertex below its starting vertex on  @xmath185 , thus both parts of the invariant remain true .    we conclude that  @xmath336 is a rooted in - tree with @xmath7 leaves , where @xmath7 is the number of vertices in  @xmath233 that have at least one upwards arc not contained in  @xmath337 . for  @xmath338 , lemmas  [ lemma : leaves - branch ] ,  [ lemma : strongly - connected - instance ] and  [ lem : treeext ] imply that the original instance has a solution . otherwise , @xmath339 . by corollary  [ cor : few - useless - up - arcs ] , we may assume that  @xmath340 .",
    "taken both facts together , we conclude that either @xmath341 , or we can construct a solution .    we will need the following simple observation .",
    "[ lemma : root - below ] let  @xmath293 be a degenerate path such that the in - branching root  @xmath29 lies in some diblock of  @xmath342 . then  @xmath343 and  @xmath344",
    ".    in every in - branching rooted at @xmath29 , a vertex  @xmath39 , @xmath345 of  @xmath185 will necessarily be the parent of  @xmath346 .",
    "accordingly , no arc originating at a vertex of  @xmath185 can be part of any in - branching implying that  @xmath347 . by lemma  [ lemma : degen - path - props ] , @xmath300 is additionally contained in  @xmath292 and thus in a reduced instance we necessarily have that  @xmath344 .",
    "[ lemma : a - zero - tails ] let  @xmath293 be a degenerate path and assume that  @xmath316 .",
    "let further  @xmath348 be those vertices of  @xmath185 that are tails of the arcs in  @xmath300 .",
    "we either find that  @xmath64 has a solution or we have  @xmath349 .    we will construct a rooted in - tree that contains @xmath350 arcs from @xmath300 .",
    "since no rooted out - branching contains any such arc , this will prove that the instance is positive provided @xmath351 .",
    "note in particular that we are not concerned with the number of leaves of the resulting tree .",
    "first associate every vertex  @xmath352 with an arc  @xmath353 , where we choose  @xmath354 to be the vertex closest to  @xmath5 .",
    "let  @xmath355 be the heads of all arcs in  @xmath299 and let  @xmath356 be the tails of all arcs in  @xmath299 .",
    "let  @xmath357 be the vertex that appears first on  @xmath185 among all vertices in  @xmath358 .",
    "since  @xmath359 , @xmath360 can not be contained in  @xmath337 .",
    "accordingly there exists a path  @xmath175 from  @xmath10 to  @xmath29 that uses the arc  @xmath360 .",
    "note that  @xmath175 leaves  @xmath185 through an @xmath299-arc whose tail lies between  @xmath361 and  @xmath10 on  @xmath185 .",
    "note that the segment  @xmath362 $ ] , by our choice of  @xmath10 , does not contain any vertex of  @xmath358 .",
    "we now construct the _ seed in - tree _  @xmath363 as follows .",
    "we begin with  @xmath175 and add the arc @xmath364 for every vertex  @xmath365 where  @xmath366 .",
    "next , we add every vertex @xmath367 to  @xmath363 by finding a path from  @xmath5 to  @xmath29 and attach this path up to its first intersection with  @xmath363 .",
    "since  @xmath5 lies above  @xmath361 in the decomposition , this path can not intersect any vertex in  @xmath358 .",
    "we form an in - forest  @xmath368 from the arcs of @xmath363 and all arcs  @xmath369 , @xmath370 that are not in  @xmath363 .",
    "every in - tree @xmath371 has the following easily verifiable properties :    1 .",
    "its root is the highest vertex in the decomposition among all vertices  @xmath372 ( recall lemma  [ lemma : cut - decomposition - props ] ) , 2 .",
    "its root is either  @xmath29 or a vertex  @xmath354 with  @xmath352 , and 3 .",
    "every segment  @xmath373 $ ] of  @xmath185 contained in  @xmath2 has no vertex of  @xmath233 or  @xmath358 with the possible exception of @xmath374 .",
    "we will maintain all three of these properties while constructing a sequence of in - forests  @xmath375 where each in - forest in the sequence will have less roots than its predecessor ( here @xmath376 stands for @xmath377 being a subgraph of @xmath378 ) .",
    "we stop the process when the number of roots drop to one .    the construction of  @xmath379 from  @xmath377 for  @xmath226 works as follows .",
    "let  @xmath380 be the in - tree with the _ lowest _ root in the in - forest . by assumption , @xmath377 has at least two roots , thus it can not be  @xmath29 and therefore , by part b ) of our invariant , is a vertex  @xmath354 with  @xmath352 . now from  @xmath354 onwards , we walk along the path  @xmath185 until we encounter a vertex  @xmath15 that is either 1 ) the tail of an arc  @xmath299 or 2 ) a vertex of the in - forest  @xmath377 . in the former case ,",
    "we use the segment  @xmath381 $ ] to connect  @xmath2 to a vertex in  @xmath355 via the @xmath299-arc emanating from  @xmath15 .",
    "since all vertices in  @xmath355 are part of the seed in - tree  @xmath363 this preserves all three parts of the invariant and  @xmath382 .",
    "consider the second case : we encounter a vertex  @xmath15 that is part of some tree  @xmath383 .",
    "let us first eliminate a degenerate case :    the trees  @xmath56 and  @xmath2 are distinct .    assume towards a contradiction that  @xmath384 . in that case , there is no single vertex between  @xmath354 and  @xmath15 that is either the tail of an  @xmath299 or @xmath300-arc .",
    "if  @xmath15 is such that @xmath385 ( for example @xmath386 ) , we already obtain a contradiction : the arc  @xmath387 can not possibly be part of any in - branching rooted at  @xmath29 , contradicting the fact that it is not in  @xmath337 .",
    "otherwise , @xmath388 for some @xmath389 . by assumption ,",
    "@xmath390 , thus there exists a path @xmath391 which contains both the arc @xmath392 as well as the arc @xmath369 .",
    "therefore , the vertex @xmath393 must lie below @xmath5 on @xmath36 .",
    "furthermore , the path @xmath391 can not contain any vertex above @xmath354 by property a ) of the invariant .",
    "it follows that the subpath @xmath394 $ ] is entirely contained in @xmath2by property c ) of the invariant , none of the vertices ( except @xmath5 ) in this subpath can be in @xmath233 or @xmath358 .",
    "since the same was true for the subpath @xmath395 $ ] , we conclude that the whole subpath @xmath396 $ ] contains no vertex of @xmath233 or @xmath358 .",
    "this contradicts our assumption that @xmath397 and we conclude that @xmath2 and @xmath56 must be distinct . + by our choice of  @xmath2 , the vertex  @xmath15 can not be the root of  @xmath56 .",
    "accordingly , we can merge  @xmath2 and  @xmath56 by adding the path  @xmath398 $ ] .",
    "this concludes our construction of  @xmath379 .",
    "since the root of  @xmath56 lies above all vertices of  @xmath2 , part 1 ) of the invariant remains true .",
    "we did not change a non - root to a root in this construction , thus part 2 ) remains true .",
    "the one segment of  @xmath398 $ ] we added to merge  @xmath2 and  @xmath56 did not , by construction , contain any vertex of  @xmath358 or  @xmath233 , with the exception of the last vertex  @xmath15 , hence part 3 ) remains true .",
    "finally , we clearly have that  @xmath382 and the latter contains one less root than the former .",
    "the process clearly terminates with some in - forest  @xmath399 which contains a single in - tree  @xmath324 .",
    "the root of this in - tree is necessarily  @xmath29 .",
    "note further that  @xmath368 contained all  @xmath350 arcs  @xmath360 , @xmath357 ; therefore  @xmath324 contains those arcs , too .",
    "since all of these arcs are in  @xmath292 , we arrive at the following : either  @xmath349 , as claimed , or we found a rooted in - tree that avoids at least  @xmath1 arcs with every rooted out - branching , in other words , as solution to  @xmath64 .",
    "taking lemma  [ lemma : a - plus - tails ] and lemma  [ lemma : a - zero - tails ] together , we see that only  @xmath400 vertices of a degenerate path are tails of arcs in  @xmath299 or  @xmath300 .",
    "the following lemma now finally lets us deal with degenerate paths : we argue that those parts of the path that contain none of these few ` interesting ' vertices can be contracted .",
    "* reduction rule 2 * if  @xmath373 \\subseteq \\hat p$ ] is such that no vertex in  @xmath373 $ ] is a tail of arcs in  @xmath401 , contract  @xmath373 $ ] into a single vertex .",
    "rule 2 is safe .",
    "simply note that every vertex in  @xmath373 $ ] has exactly one outgoing arc .",
    "we already know that every arc of  @xmath185 must be contained in every rooted out - branching , now we additionally have that all arcs in  @xmath373 $ ] are necessarily contained in every rooted in - branching .",
    "we conclude that rule  2 is safe .",
    "we summarize the result of applying rules  1 and  2 .",
    "[ lem : last ] let  @xmath185 be a degenerate path in an instance reduced with respect to rules  1 and  2 . then  @xmath402 .    by lemmas  [ lemma : a - plus - tails ] and  [ lemma : a - zero - tails ] ,",
    "the number of vertices on  @xmath185 that are tails of either  @xmath299 or @xmath300 is bounded by @xmath403 . between each pair of such vertices",
    ", we can have at most one vertex that is not a tail of such an arc .",
    "we conclude that  @xmath404 , as claimed .",
    "now we can prove the main result of this paper .",
    "+ * proof of theorem  [ thm : main]*. by lemma  [ lemma : strongly - connected - instance ] , we may assume that @xmath0 is strongly connected .",
    "consider the longest monotone path @xmath185 of @xmath32 .    by lemma  [ lemma :",
    "win - non - degen - path ] , if @xmath185 has at least @xmath55 non- degenerate diblocks , then @xmath0 has a rooted out - tree with at least @xmath55 leaves .",
    "this out - tree can be extended to a rooted out - branching with at least @xmath55 leaves by lemma  [ lem : treeext ] .",
    "thus , by lemma  [ lemma : leaves - branch ] , @xmath64 is a positive instance if and only if @xmath0 has a rooted in - branching , which can be decided in polynomial time .",
    "now assume that @xmath185 has at most @xmath1 non - degenerate diblocks . by lemma  [ lem : last ]",
    "we may assume that before , between and after the non- degenerate diblocks there are @xmath400 degenerate diblocks .",
    "thus , the height of @xmath32 is @xmath405 .",
    "therefore , by lemma  [ thm : boundedd ] , the time complexity for theorem  [ thm : main ] is @xmath406 .",
    "we showed that the rooted @xmath1-distinct branchings problem is fpt for general digraphs parameterized by @xmath1 , thereby settling open question of bang - jensen _ et al .",
    "the solution in particular uses a new digraph decomposition , the _ rooted cut decomposition _ , that we believe might be useful for settling other problems as well .    we did not try to optimize the running time of the algorithm of theorem  [ thm : main ] . perhaps , a more careful handling of degenerate diblocks may lead to an algorithm of running time @xmath61 . regarding the motivation by application wireless sensor networks",
    ", it would further be interesting whether the problem can be computed or approximated in a distributed fashion .",
    "let us complete the paper by mentioning some digraph problems , which are still open .",
    "bang - jensen _ et al . _",
    "@xcite asked what is the parameterized complexity of the following problem : given a strongly connected digraph @xmath0 and a number ( parameter ) @xmath1 , can we delete @xmath1 arcs from @xmath0 such that @xmath0 remains strongly connected .",
    "earlier , bang - jensen and yeo @xcite asked whether the following problem is fpt : given a strongly connected digraph @xmath0 and a number ( parameter ) @xmath1 , can we path- contract @xmath1 arcs from @xmath0 such that @xmath0 remains strongly connected",
    ". _ path - contraction _ of an arc @xmath407 of @xmath0 results in a digraph obtained from @xmath0 by replacing @xmath14 and @xmath19 with a new vertex @xmath5 , deleting all arcs incident to either @xmath14 or @xmath19 and adding arc @xmath172 if arc @xmath408 is in @xmath0 and arc @xmath409 if arc @xmath410 is in @xmath0 .",
    "note that path - contraction  preserves \" directed paths .",
    "consider the following problem introduced by bezkov , curticapean , dell and fomin @xcite .",
    "for given vertices @xmath3 and @xmath29 of a digraph @xmath411 , and an integer ( parameter ) @xmath412 decide whether @xmath0 has an ( @xmath413)-path in @xmath0 that is at least @xmath1 longer than a shortest ( @xmath413)-path . if  at least \" is replaced by  exactly \" , then the problem is fpt @xcite .",
    "however , it is unknown whether the original problem is even in xp .",
    "k.  brczi , s.  fujishige , and n.  kamiyama .",
    "a linear - time algorithm to find a pair of arc - disjoint spanning in - arborescence and out - arborescence in a directed acyclic graph .",
    ", 109(23 - 24):12271231 , 2009 ."
  ],
  "abstract_text": [
    "<S> an out - branching and an in - branching of a digraph @xmath0 are called @xmath1-distinct if each of them has @xmath1 arcs absent in the other . </S>",
    "<S> bang - jensen , saurabh and simonsen ( 2016 ) proved that the problem of deciding whether a strongly connected digraph @xmath0 has @xmath1-distinct out - branching and in- branching is fixed - parameter tractable ( fpt ) when parameterized by @xmath1 . </S>",
    "<S> they asked whether the problem remain fpt when extended to arbitrary digraphs . </S>",
    "<S> bang - jensen and yeo ( 2008 ) asked whether the same problem is fpt when the out - branching and in - branching have the same root .    by linking the two problems with the problem of whether a digraph has an out - branching with </S>",
    "<S> at least @xmath1 leaves ( a leaf is a vertex of out - degree zero ) , we first solve the problem of bang - jensen and yeo ( 2008 ) . </S>",
    "<S> we then develop a new digraph decomposition called the rooted cut decomposition and using it we prove that the problem of bang - jensen et al . </S>",
    "<S> ( 2016 ) is fpt for all digraphs . </S>",
    "<S> we believe that the _ rooted cut decomposition _ will be useful for obtaining other results on digraphs . </S>"
  ]
}