{
  "article_text": [
    "a classic algorithmic problem on a graph @xmath0 with @xmath1 distinct pairs of vertices @xmath2 is to find vertex - disjoint paths @xmath3 such that @xmath4 connects @xmath5 and @xmath6 .",
    "known as the disjoint paths problem , it is np - complete on general graphs  @xcite , but can be solved in @xmath10 time for any fixed integer @xmath1",
    "@xcite ( i.e.  it is fixed - parameter tractable ) .",
    "a generalization of this problem is induced disjoint paths : given @xmath1 distinct pairs of vertices @xmath2 in a graph @xmath0 , find paths @xmath3 such that @xmath4 connects @xmath5 and @xmath6 for @xmath7 and the paths are _ mutually induced _ , that is , no two paths @xmath11 have common or adjacent vertices ( except perhaps their end - vertices ) .",
    "the induced disjoint paths problem indeed generalizes the disjoint paths problem , since the latter can be reduced to the former by subdividing every edge of the graph .",
    "this makes the problem much harder : induced disjoint paths is np - complete even for instances with @xmath12  @xcite , and thus in particular is not fixed - parameter tractable unless p = np .",
    "the hardness of both disjoint paths and induced disjoint paths on general graphs inspired research on their complexity on structured graph classes . on the negative side ,",
    "disjoint paths remains np - complete on line graphs  @xcite and split graphs  @xcite , induced disjoint paths remains np - complete on claw - free graphs  @xcite , and both problems remain np - complete on planar graphs  @xcite . in these cases , however , fixed - parameter algorithms are known  @xcite . on the positive side ,",
    "polynomial - time algorithms for disjoint paths exist on graphs of bounded treewidth  @xcite and graphs of cliquewidth at most  @xmath13  @xcite , and for induced disjoint paths on at - free graphs  @xcite and chordal graphs  @xcite .",
    "we focus on the complexity of induced disjoint paths on circular - arc graphs . recall that a _ circular - arc graph _",
    "@xmath0 has a _ representation _ in which each vertex of @xmath0 corresponds to an arc of a circle , and two vertices of @xmath0 are adjacent if and only if their corresponding arcs intersect .",
    "circular - arc graphs generalize _ interval graphs _ , which have a representation in which each vertex corresponds to an interval of the line , and two vertices are adjacent if and only if their corresponding intervals intersect .",
    "the complexity of disjoint paths is known : it is np - complete already on interval graphs  @xcite . in contrast , for induced disjoint paths , the authors of the present work recently showed a polynomial - time algorithm on circular - arc graphs  @xcite , and a polynomial - time algorithm on interval graphs is implied by that work , as well as by the polynomial - time algorithms on at - free graphs  @xcite and chordal graphs  @xcite .",
    "these algorithms , however , do not fully settle the complexity of induced disjoint paths on circular - arc graphs ( and interval graphs ) , because the question whether a linear - time algorithm exists has been left open .    in this paper",
    ", we exhibit a linear - time algorithm for induced disjoint paths on circular - arc graphs .",
    "this improves on the known algorithm on circular - arc graphs as well as the known algorithms for interval graphs .",
    "we also introduce a generalization of induced disjoint paths called requirement induced disjoint paths , which is to find @xmath14 paths that connect @xmath5 and @xmath6 for @xmath7 , such that all paths are mutually induced .",
    "we present a linear - time algorithm for requirement induced disjoint paths on interval graphs . to solve these problems , our algorithms first preprocesses the instance . some of the preprocessing rules build on our earlier work on induced disjoint paths  @xcite , but special care is required to adapt them for requirement induced disjoint paths and to execute them in linear time .",
    "most preprocessing rules , however , are novel . after the preprocessing stage ,",
    "the algorithms identify a set of candidate paths for each pair @xmath2 .",
    "for each candidate path for a pair @xmath2 , we add an arc with color @xmath15 that corresponds to the path to an auxiliary graph .",
    "finally , we show that it suffices to find an independent set in this auxiliary graph that contains @xmath14 arcs of each color .",
    "we show that the algorithms perform all stages in linear time .",
    "we only consider finite undirected graphs that have no loops and no multiple edges .",
    "we refer to the textbook of diestel  @xcite for any standard graph terminology not defined here .",
    "let @xmath16 be a graph .",
    "for a set @xmath17 , the graph @xmath18 $ ] denotes the subgraph of @xmath0 _ induced by _",
    "@xmath19 , that is , the graph with vertex set @xmath19 and edge set @xmath20 .",
    "we write @xmath21 $ ] .",
    "we denote the ( open ) neighborhood of a vertex @xmath22 by @xmath23 and its closed neighborhood by @xmath24=n_g(u)\\cup \\{u\\}$ ] .",
    "we denote the neighborhood of a set @xmath25 by @xmath26 and @xmath27=u\\cup n_g(u)$ ] .",
    "we denote the degree of a vertex @xmath22 by @xmath28 .",
    "let @xmath32 be a path ( we call such a path a _ @xmath33-path _ ) .",
    "the vertices @xmath34 and @xmath35 are the _ ends _ or _ end - vertices _ of @xmath36 , and the vertices @xmath37 are the _ inner vertices _ of @xmath36 .",
    "we say that an edge @xmath38 , @xmath39 , is an _ inner chord _ of @xmath36 if @xmath40 or @xmath41 is an inner vertex of @xmath36 .",
    "distinct paths @xmath42 in a graph @xmath0 are _ mutually induced _ if :    * each @xmath43 has no inner chords ; * any distinct @xmath44 may only share vertices that are ends of both paths ; * no inner vertex @xmath22 of any @xmath43 is adjacent to a vertex @xmath45 of some @xmath46 for @xmath47 , except when @xmath45 is an end - vertex of both @xmath43 and @xmath8 .",
    "notice that condition  ( i ) may be assumed without loss of generality .",
    "this definition is more general than the definition in section  [ s - intro ] , as it allows the end - vertices of distinct paths to be the same or adjacent .",
    "we can now formally state our decision problem ( where a _ terminal _ is some specified vertex ) .         in step  10",
    ", we essentially show that such an instance can be solved in polynomial time on interval graphs if for any two vertices @xmath48 with @xmath49 there is no vertex @xmath45 with @xmath50 and @xmath51 .",
    "however , on general interval graphs , this problem becomes np - complete .",
    "we show in fact that the problem is already np - complete on disjoint unions of double stars ( i.e.  graphs obtained from two disjoint stars by joining the central vertices ) , which form a subclass of interval graphs .",
    "we reduce from 3-sat .",
    "consider an instance of 3-sat with @xmath52 variables @xmath53 and @xmath54 clauses @xmath55 .",
    "we construct a graph @xmath0 and a function @xmath56 as follows .",
    "for each @xmath57 , we create two adjacent vertices @xmath57 and @xmath58 with @xmath59 . for each @xmath60",
    ", we create three vertices and set @xmath61 of these vertices to @xmath62 .",
    "we then make these three vertices adjacent to the corresponding literal vertices ( for example , if @xmath60 contains @xmath63 , then we join the first vertex with the vertex @xmath57 , the second with @xmath64 and the third with @xmath65 ) .",
    "this completes the construction .",
    "note that it is indeed a disjoint union of double stars .",
    "the correctness can be seen as follows : we set @xmath57 to true if and only if the vertex @xmath57 is not in the independent set .",
    "it is easy to show that multicolored independent set is fixed - parameter tractable on interval graphs : guess an ordering of the colors , and for each choice , run a procedure similar to the one described for step  10 . a faster algorithm",
    "can be obtained using dynamic programming ."
  ],
  "abstract_text": [
    "<S> the induced disjoint paths problem is to test whether a graph @xmath0 with @xmath1 distinct pairs of vertices @xmath2 contains paths @xmath3 such that @xmath4 connects @xmath5 and @xmath6 for @xmath7 , and @xmath4 and @xmath8 have neither common vertices nor adjacent vertices ( except perhaps their ends ) for @xmath9 . </S>",
    "<S> we present a linear - time algorithm for induced disjoint paths on circular - arc graphs . for interval graphs , </S>",
    "<S> we exhibit a linear - time algorithm for the generalization of induced disjoint paths where the pairs @xmath2 are not necessarily distinct . </S>"
  ]
}