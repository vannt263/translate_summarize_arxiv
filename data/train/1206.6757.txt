{
  "article_text": [
    "the importance of security is nowadays well recognized and mechanisms to enforce it are being developed and adopted within enterprises . however , this is not sufficient to ensure that security requirements are met , as such mechanisms have to be correctly configured and maintained at operations time . in fact , a significant share of vulnerabilities results from security misconfiguration , as shown by data breach reports such as  @xcite , @xcite and projects such as the owasp top 10  @xcite .",
    "the reason is that activities targeting the creation and maintenance of a secure setup , such as patch or configuration management , are labor - intense and error - prone .",
    "software vendors , for instance , issue an increasing number of security advisories , while users , on the other hand , struggle to understand if a given vulnerability is exploitable under their particular conditions and requires immediate patching . as another example ,",
    "configuration best - practice provided as prose documentation and supposingly supporting system admininistrators , is often very broad and ambiguous .    due to such difficulties",
    ", configuration validation is needed to gain assurance about system security , but again , often requires manual intervention , and thus is time - consuming and limited to samples .",
    "new trends focus on providing standards for security automation , e.g. , the security content automation protocol ( scap , @xcite ) , provided by the national institute of standard and technology ( nist ) , whose specifications receive a lot of attention in the scope of the configuration baseline for it products used in us federal agencies  @xcite .",
    "scap comprises a language that allows the specification of machine - readable security checks to facilitate the detection of vulnerabilities caused by misconfiguration . while this represents an important step towards the standardization and exchange of security knowledge , scap focus on the granularity of hosts and operating systems , and as such can not be easily applied to fine - granular and distributed system components independent from their environment , e.g. , a java web application ( jwa ) .",
    "furthermore , scap does not leverage standards and technologies in the area of system and configuration management , in order to , for instance , separate check logic and information about configuration retrieval .    to address these limitations and make the advantages of scap available to web security experts , we propose a scap - based language and approach for the declarative specification and execution of checks for sets of fine - granular components depending on each other in a distributed environment .",
    "moreover we separate the check logic from the retrieval of the configuration values for which we rely on existing system management procedures and technologies , e.g. , configuration management databases ( cmdb ) as defined in the it infrastructure library ( itil ) .",
    "each check is essentially a set of tests over software component properties - such as the release and patch level - and configuration settings that determine a system component s behavior .",
    "though this is not a limitation of the language , we focus on security checks , i.e. , one of the most important usages is the detection of security vulnerabilities . as an example , the language allows the specification of a check to express that the deployment descriptor of any jwa deployed in a servlet container supporting a servlet specification version of at least 3.0 must have the ` http - only ` flag enabled , to prevent the access of client - side scripts to session cookies .",
    "this paper is structured as follows .",
    "[ sec : uc ] introduces a sample system based on common open source software ( oss ) , introduces a set of scenarios for configuration validation , and derives requirements for a configuration validation language . sect .",
    "[ sec : sota ] presents state - of - the - art with regard to the specification of security checks for software and configuration vulnerabilities .",
    "[ sec : lang ] presents the configuration validation language , while sect .",
    "[ sec : approach ] describes our approach .",
    "the paper concludes with an outlook on future work in sect .",
    "[ sec : concl ] .",
    "this section outlines an example landscape composed of a custom application on top of common oss , and herewith prototypic for many real - life systems .",
    "an overview about network topology and installed software components is shown in fig .  [",
    "fig : app_system - diagram ] .",
    "the service provider acme operates this landscape for its application service `` einvoice '' , which allows customers to manage electronic invoices , and to make them available to their business partners through the internet .",
    "the application front - end for managing and accessing invoices is implemented as a jwa .",
    "instances of the application , each dedicated to one customer , are deployed in tomcat , in customer - specific context roots .",
    "tomcat instances run inside an internal    figurec0pt     subnet , and are proxied by the apache http server installed on a physical machine connected to the dmz .",
    "requests for a customer - dedicated sub - domain of acme.com are forwarded by the reverse - proxy to the respective , customer - dedicated instance of the jwa via the apache jserv protocol ( ajp ) .",
    "another machine running in the internal network hosts a ldap server for the management of user accounts , as well as a mysql database used for persistency .",
    "as the system is prototypic , so are the tasks related to configuration management and validation . in the following , we will describe different scenarios for configuration validation , different in terms of periodicity , urgency ( response time ) , validation scope , and authorship of configuration checks .",
    "* vulnerability assessment ( s1 ) .",
    "* this scenario focuses on the detection of known vulnerabilities . upon disclosure of a new security vulnerability of off - the - shelf applications or software libraries ,",
    "system administrators need to investigate the susceptibility of their system .",
    "first , they need to check for the presence of affected release and patch levels",
    ". this can be difficult in case of software libraries embedded into off - the - shelf applications as their presence is often unknown .",
    "second , they need to check whether additional conditions for a successful exploitation are met .",
    "such conditions often concern specific configuration settings of the affected software , as well as the specific usage context and system environment .",
    "the automation of both activities with help of machine - readable vulnerability checks decreases time and effort required to discover a system vulnerability , and at the same time increases the precision with which the presence of vulnerabilities can be detected .",
    "precision is important as organizations are typically reluctant to apply patches or other measures in a productive environment unless absolutely necessary .",
    "such checks would represent a valuable complement to textual descriptions published by security researchers or software vendors in vulnerability databases such as the nvd  @xcite . as an example",
    ", cve-2011 - 3190 reports a vulnerability in the ajp connector implementation of several tomcat releases  @xcite , which , however , only applies under certain conditions , e.g. , if certain connector classes are used , and reverse proxy and tomcat do not use a shared secret .",
    "a machine check looking at the tomcat release level and related configuration settings could be easily provided by the application vendor ( apache software foundation ) .",
    "an example for a critical security bug in a software library is cve-2012 - 0392 which describes a vulnerability in apache struts , a common framework to support the model - view - controller paradigm in jwas .",
    "the detection of this vulnerability is made more problematic by the fact that end - users typically do not know if applications installed in their environment make use of such library , and they can not rely on the presence of a well - established security response process at each of their application vendors . thus security bugs may be dormant in libraries without the service operator being aware .",
    "* configuration best - practice ( s2 ) .",
    "* this scenario focuses on establishing if best practices are followed . during operations time , system administrators need to periodically check whether the system configurations follow best - practices , for single and distributed system components .",
    "today , these are often described in prose and evolve over time thus requiring continuous human intervention",
    ". examples of best - practices are the tomcat security guide from owasp  @xcite , and the sans recommendations for securing java deployment descriptors  @xcite .",
    "[ ex : sans ] sans recommends to configure the cookie - based session handling for jwas ( ` < cookie - config > ` section of the deployment descriptor ) , i.e. , _ ( i ) _ preventing the access to session cookies ( ` < http - only > ` set to ` true ` ) , and _",
    "( ii ) _ transmitting cookies securely ( ` < secure > ` set to ` true ` ) . in particular",
    "the ` http - only ` flag is an example of recommendation that only applies after the release 3.0 of the servlet specification .",
    "configuration best - practices may also cover a set of distributed components , e.g. , the how - to about apache http server as a reverse proxy for apache tomcat  @xcite . a language supporting the specification of such best - practice checks should support the flexible adoption to a specific environment .",
    "a recommendation related to the session timeout , for instance , may be refined by an organization to reflect its particular policy .    * compliance with configuration policy ( s3 ) . *",
    "this scenario focuses on the periodic validation of landscape specific configuration implementing the designed policy .",
    "such a configuration includes a set of mandated configuration settings that an organization expects to be active in its system . as an example , the configuration that enforce the acme s access control policy embraces configuration settings of several distributed system components , e.g. , the realm definition of each tomcat instance , as well as the deployment descriptor of each java application instance .",
    "in particular the deployment descriptor has to allow the role ` admin - role ` to access to the url path ` /manager/ * ` .",
    "moreover the realm of tomcat has to refer to the ldap server located at 192.168.2.1 .",
    "this example illustrates that configuration checks aiming to assess compliance with a given configuration policy strongly reflect a particular system and environment , and are therefore authored internally to the organization rather than by externals , as in the previous scenarios .",
    "a language for supporting the above scenarios have to fullfill the following requirements .",
    "( rl )    [ rl:1 ] the language must support the definition of configuration checks for diverse software components ( e.g. , network - level firewalls or application - level access control systems ) and diverse technologies .",
    "[ rl:2 ] the language must be expressive enough to cover new technologies or configuration formats without requiring extensions .",
    "this would avoid the need to update the language interpreter every time a new extension is published .",
    "[ rl:3 ] it must be possible to specify target components by defining conditions over properties such as name , release , and supported specification , or over the existence of relationships between components .",
    "this is necessary in cases where externally provided checks must be applied to all instances of the affected software components ( scenarios s1 and s2 ) .",
    "[ rl:4 ] motivated by scenario s3 , it must be possible to specify target components by referring to specific instances of a software component .",
    "[ rl:5 ] it must be possible to validate the configurations of different , potentially distributed system components within one check .    [ rl:6 ] checks must be uniquely identifiable , declarative , standardized and certifiable , to support trusted knowledge exchange among security tools and stakeholders , e.g. , software vendors , experts , auditors , or operations staff .",
    "[ rl:7 ] the language must support parametrization in order to adopt externally provided checks to a specific configuration policy .",
    "[ rl:8 ] the specification of checks must be separated from the collection of the involved configuration settings from a given managed domain .",
    "prior art for the definition of the configuration validation language comprises several specifications out of the security content automation protocol ( scap ) , as well as proprietary languages supported by vulnerability and patch scanners .",
    "scap  @xcite is a suite of specifications that support automated configuration , vulnerability and patch checking , as well as security measurement .",
    "some of the specifications are widely applied in industry , e.g. , the common vulnerabilities and exposures ( cve , ` http://cve.mitre.org ` ) , and those related to configuration validation will be discussed with regard to above - described requirements .",
    "note that several approaches assess a system s overall security level by analyzing and reasoning about the potential combination of individual vulnerabilities ( exploits ) by an adversary  @xcite , @xcite .",
    "though referring to scap specifications , these approaches do not look into the vulnerability specification itself , but use the language and related tools merely for the discovery of individual vulnerabilities .    * common platform enumeration * ( cpe , ` http://cpe.mitre.org ` ) is a xml - based standard for the specification of structured names for information technology systems , software , platforms , and packages .",
    "it allows the definition of names representing classes of platforms which can be compared in order to establish if , e.g. , two names are equal or if one of the names represents a subset of the systems represented by the other .",
    "cpe 2.3 , the latest version , consists of four modular specifications which work together in layers : _ ( i ) _ cpe naming providing a formal name format , _",
    "( ii ) _ cpe language allowing the description of complex platforms , _ ( iii ) _ cpe matching providing a method for checking names against a system , and _",
    "( iv ) _ cpe dictionary binding text and tests to a name .",
    "while the specifications cpe naming and cpe matching allow the definition and comparison of single software components according to properties such as vendor or product name , the cpe language specification does not meet ( rl3 ) with regard to component relations .",
    "it supports the specification of a complex platform through a logical condition over several cpe names , but the semantics of their relationship is not explicitly defined .",
    "the typical interpretation used in many cve entries is that a complex platform condition is met as soon as all software components are installed on the same machine .",
    "this interpretation , however , is in many cases not sufficient to state that a vulnerability exists .",
    "cve-2003 - 0042 , for instance , is only exploitable if tomcat actually uses a given jdk version , the mere presence of both components on the same system is not sufficient .",
    "this interpretation is even more misleading if vulnerabilities are caused by combinations of client - side and server - side components , e.g. , cve-2012 - 0287 .",
    "a special kind of relationship is the composition of software components , e.g. , in the case of java libraries .",
    "today , each vendor of an application that embeds a vulnerable library needs to issue a dedicated cve , as cpe insufficient to detect the use of a given library ( in an application ) .    *",
    "open vulnerability assessment language * ( oval ,  @xcite ) defines a language for the definition of security tests detecting the presence of vulnerabilities or configuration issues on a computer system ( machine ) .",
    "it defines several xml schemas : _ ( i ) _ oval system characteristics represent system configuration information that is subject to testing , _ ( ii ) _ oval definitions specify conditions for the presence of a specified machine state ( vulnerability , configuration , patch state , etc . ) , _ ( iii ) _ oval results report the assessment result , i.e. , the comparison of oval definitions and oval system characteristics .",
    "since oval already fulfills some of the before - mentioned requirements , the language proposed in sect .",
    "[ sec : lang ] is to a good extent based on oval concepts . according to scap design goals , the language supports standardized , unambiguous , and exchangeable representations of configuration checks ( rl6 ) as well as variables for parametrization ( rl7 )",
    "however , a significant limitation is that oval checks ( like cpe ) work on the granularity of machines ( computer systems ) .",
    "this impacts several other requirements . with regard to ( rl1 ) , it is difficult , sometimes impossible , to write configuration checks for fine - granular system components independently from their software computing environment ( container ) , e.g. , jwas .",
    "the reason is that generic oval objects from the ` independent schema ` ( e.g. , ` textfilecontent54_object ` ) are relative to the machine s file system , which varies from one servlet container to the other the definition of container - specific objects ( e.g. , ` spwebapplication_object ` for microsoft sharepoint ) , on the other hand , restricts the use of checks to dedicated environments . requirement ( rl2 ) is not fulfilled as oval requires the extension of several schemas to address new software components .",
    "this either requires tool vendors to constantly update the language interpreter , or leads to a fragmented market where tools only support a subset of the language .",
    "we believe that the broad adoption of oval could be reached more easily by the use of generic types ( rl2 ) , e.g. , on the basis of xml , herewith leveraging the fact that it is used for many application - level configuration formats . with regard to ( rl3 ) , ( rl4 ) and ( rl5 ) it is impossible in oval to specify a target for checks that look at distributed components , since the execution of a set of oval definitions and their tests are meant to be executed on a single machine .",
    "furthermore , oval does not clearly separate check logic from the retrieval of the actual configuration values ( rl8 ) , herewith missing to leverage industry efforts in the area of it service and application management ( itsam ) .",
    "the deployment descriptor of a jwa , for instance , can be retrieved by several means and potentially from different sources ( the actual component , or a configuration store with copies ) .",
    "the mixture of these concerns makes the work of check authors difficult and error prone , as they can not focus on the check logic ( e.g. , the session configuration of a deployment descriptor ) , but also care for the retrieval of values , e.g. , the identification of a file path depending on installation directories and environment variables . to allow the separation of these concerns , the check language itself must be agnostic to potential configuration sources , the latter being cared for by administrators .    as representative vulnerability and patch scanner , we consider nessus ( http://www.tenable.com/products/nessus ) , which is a widely adopted tool and comes with a proprietary syntax for the definition of so - called audit checks .",
    "organizations can either write custom checks according to this language , or subscribe to a commercial feed to receive compliance checks tailored for a variety of standards and regulations , e.g. , pci dss  ( https://www.pcisecuritystandards.org ) .",
    "having comparable expressivity , checks written in this proprietary language can be transformed into scap content , which is why nessus and similar tools were scap - validated by the mitre .",
    "scap and nessus proprietary language also have in common that they focus on operating systems , which makes it difficult to specify checks on a more fine - granular level , i.e. , for objects which can not be easily identified relative to the os : _ custom items _ for windows and unix require , for instance , the specification of file paths which is not necessarily possible for jwa or web services ; _ built - in _ checks for unix hide the configuration source from the check author , but instead of making the source customizable , it is hard - coded ( rl9 ) .",
    "checks considering distributed system components are not supported at all ( rl5 ) .",
    "nessus does also not allow to condition the applicability of the check on the basis of component properties ( e.g. , release level ) or component relationships ( rl3 ) but only on the basis of hard - coded keywords such as ` unix ` . as a proprietary language , processed only by nessus , it is not extensible by 3rd parties ( rl3 ) , nor standardized ( rl4 ) .",
    "the configuration validation language allows the definition of checks for selected software components and addresses the use cases presented in sect .",
    "[ sec : uc ] .",
    "it includes the definition of the checks as well as of their results .",
    "this section introduces all the concepts used within the language , and defines the extensions we carried out over the oval standard .",
    "we formally define the semantics of the language without binding to a specific syntax .",
    "notice that in the definitions we only consider the parts of the oval standard which are extended by our language . as",
    "oval is xml - based , a straightforward implementation of our formalism is an xml serialization .",
    "[ fig : lang - diagram ] shows the main concepts of the configuration validation language .",
    "the concepts are organized into three main areas .",
    "the check and target areas concern the definition of the configuration checks and of the affected software components , resp .",
    ", the system area contains elements corresponding to actual configurations and components of a managed domain .        the _ check _ area ( top left of fig .  [",
    "fig : lang - diagram ] ) concerns the definition of checks in the form of tests comparing an expected and an actual value .",
    "this area relies on the oval standard  @xcite .",
    "the concepts we borrow and extend are shown in fig .",
    "[ fig : lang - diagram ] and prefixed with `` oval '' . in a nutshell ,",
    "a definition is characterized by an arbitrary complex boolean combination of tests and a test defines an evaluation involving an object ( possibly containing a set of other objects ) and zero or more states . as described in sect .",
    "[ sec : sota ] , the existing oval objects do not fulfill requirements ( rl2 ) , and ( rl8 ) . to fulfill them",
    ", we defined a new test , object , and state , generic enough to apply to multiple configurations of multiple software components and independent from the collection mechanisms . the test and state we defined",
    "are not shown in fig .",
    "[ fig : lang - diagram ] as it is the object , ` xml config object ` , that contains the major contributions . the ` xml config object ` is characterized by three attributes : the ` type ` denoting a type of configuration relevant for a software component , the ` schema ` denoting the format in which the configurations are represented , and ` query ` expressing how to identify the object within the configuration .",
    "such object also overcomes the oval drawbacks about ( rl1 ) discussed in sect .",
    "[ sec : sota ] .",
    "[ ex : flag ] the ` xml config object ` can be used to specify the recommendation described in ex .",
    "[ ex : sans ] . in the excerpt",
    "below , type ( line 2 ) indicates that the configuration considered is a deployment descriptor ( computing environment independent ) , schema ( line 3 ) refers to the location of the schema for the deployment descriptor of j2ee web application and the xpath query ( line 4 ) points to the ` http - only ` configuration .    ....",
    "< xmlconfiguration_object id=\"oval : sans.security : obj:1 \" >    <",
    "type > deployment descriptor</type >    < schema > http://java.sun.com / xml / ns / j2ee</schema >    <",
    "query>//*session - config/*cookie - config/*http - only / text()</query > < /xmlconfiguration_object > ....    by modifying only the query element , all the other recommendation of ex .",
    "[ ex : sans ] can be specified . moreover , by modifying also the type and schema , our object can be used for any other xml based configuration .",
    "the expected value for the configuration is defined through a ` xmlconfiguration_state ` defining ` true ` as expected value for the ` http - only ` tag .",
    "finally , the oval test , ` xmlconfiguration_test ` , contains the object and state above which are used to evaluate the configuration .",
    "[ def : od ] an oval definition @xmath0 is a set of oval tests .",
    "[ ex : od ] the oval definition checking for the sans recommendations described in ex .",
    "[ ex : sans ] is a set of tests , one for each recommendation , i.e , @xmath1 .    according to oval",
    ", a definition is a boolean combination of tests .",
    "as sans requires all recommendations to be followed , all the tests involved are characterized by an or boolean relation in order to raise an alarm whenever one of the recommendation is not followed .",
    "@xmath2 ( line 3 ) is described in ex .",
    "[ ex : flag ] .",
    "all other tests can be analogously defined .    ....",
    "< definition id=\"oval : sans.security : def:1 \" >    < criteria operator=\"or \" >     < criterion test_ref=\"oval : sans.security : tst:1 \" comment=\"httponly flag\"/ >     < criterion test_ref=\"oval : sans.security : tst:2 \" comment=\"secure",
    "flag\"/ >    < /criteria",
    "/definition > ....    the _ target _ area ( top right of fig .",
    "[ fig : lang - diagram ] ) allows the definition of targets for the checks .",
    "target definition _ is an abstract concept representing either a software component or a relation which can be defined over software components or relations themselves .",
    "a _ software component _ is characterized by a set of conditions on specific properties such as those in tab .",
    "[ tab : propr ] ( left side ) .",
    "a _ relation _ defines the relationship between software components .",
    "we distinguish three kinds of relations .",
    "a static relation , i.e. , `` composed of '' , which allows to represent the internal structure of a software .",
    "run - time relations , i.e. , `` deployed in '' and `` communicates with '' , which allow to define relations among software components running in a landscape . finally , boolean relations ( and , or ) combine either static or dynamic relations .",
    "dynamic and boolean relations can be nested whereas the static relation can only be applied to software components .",
    "these types of relations , combined with the possibility to nest them , allow to define a set of software components satisfying an arbitrary complex expression .",
    "[ def : sc ] a software component @xmath3 is a set of conditions . a condition @xmath4 is a tuple @xmath5 , where    * @xmath6 is a property name , * @xmath7 is an operator , * @xmath8 is a value for the property .",
    ".properties description [ cols=\"<,<,<,<\",options=\"header \" , ]     we define @xmath9 as the set of numbered relations where any relation can occur an arbitrary number of times and is uniquely identified by a natural number . in the examples we omit the natural number when no ambiguity arises .",
    "[ def : td ] a target definition is a tuple @xmath10 where    * @xmath11 is a set of software components ( cf . def .",
    "[ def : sc ] ) , * @xmath12 is a set of numbered relations , * @xmath13 is a total and acyclic function mapping a relation into the pair of elements , denoted as @xmath14 and @xmath15 , sharing the relation ( either software components or relations ) .",
    "a target definition @xmath10 is _ valid _ iff @xmath16 when @xmath17 .",
    "[ ex : td ] sans applies to jwas developed according to one of the releases of the servlet specification and deployed in a web application container supporting such specification .",
    "in particular the recommendations in ex .  [ ex : sans ] refer to the release 3.0 . according to def .",
    "[ def : sc ] , a software component for the web application container can be defined as the set containing a single condition referring to the supported specification , @xmath18 .",
    "as the recommendation applies to all jwas therein deployed , the software component for the web application can be specified as an empty set @xmath19 . finally , the target definition , according to def .",
    "[ def : td ] , can be expressed as @xmath20 where @xmath21 , @xmath22 , and @xmath23 , @xmath24 .",
    "we extend the oval standard by referring each oval definition to a target definition , i.e. , to a set of related software components , and referring each oval test contained in the definition to a software component of the target definition .",
    "thus we fulfill requirements ( rl3 ) and ( rl5 ) .",
    "we name the resulting new artifact _",
    "check definition_. note that this artifact is not represented by a single class in fig .",
    "[ fig : lang - diagram ] but it involves several of the concepts therein presented and formalized above .",
    "[ def : od ] and [ def : td ] provide the building blocks for the check definition .",
    "[ def : cd ] a check definition is a tuple @xmath25 where    * @xmath0 is an oval definition , * @xmath10 is a target definition , * @xmath26 is a total function that maps an oval test included in the definition @xmath27 into the software component to which it applies defined for the target definition @xmath28 .",
    "[ ex : cd ] given @xmath29 and @xmath30 defined in ex .",
    "[ ex : od ] and ex .",
    "[ ex : td ] resp . , a check definition for sans recommendations on cookies is @xmath31 where @xmath32 for all @xmath33 .    the _ system _ area ( bottom of fig .",
    "[ fig : lang - diagram ] ) contains the concepts characterizing systems in a landscape and their configurations . a _ system component _ represents a single installation of a software component in a specific domain .",
    "as the purpose is to identify its configurations , the system component is defined as a set of attributes denoting how the configurations can be retrieved .",
    "the configurations required are given by the oval tests which are defined for software components .",
    "to evaluate the tests , the objects they contain have to be retrieved for each installation of the software component , i.e. , for each system component .",
    "the tests to be performed on system components are defined through the test mapping .",
    "the set of attributes necessary to collect a configuration is given by the collector ( more details about how system components are derived starting from the target definition and the collector can be found in sect .",
    "[ sec : approach ] ) . by allowing the separation of the check logic from the attributes needed for the collection ,",
    "our language fulfills requirement ( rl8 ) .",
    "[ def : c ] a collector is a tuple @xmath34 where @xmath35 is a set of conditions , @xmath36 is a set of properties , and @xmath37 is a query over oval objects .",
    "[ ex : c ] a collector for web applications deployment descriptor has to define the set of attributes for retrieving the deployment descriptor of the web application installed in the landscape .",
    "several alternatives are viable , e.g. , accessing a shared file system via the universal naming convention ( unc ) or relying on the jmx interface of tomcat .",
    "these alternatives can be defined as two collectors , @xmath38 @xmath39 where @xmath40 is the same for both as they apply to the same software component , and @xmath41 is an xpath query over the xml serialization of the object ( omitted for the sake of brevity ) .",
    "a system component @xmath42 is a set of attributes .",
    "an attribute is a tuple @xmath43 , where @xmath6 and @xmath8 are properties and values , resp .",
    "[ ex : si ] the check definition for sans in ex .",
    "[ ex : cd ] includes the software component @xmath19 defined in ex .",
    "[ ex : td ] which is referred to by an ` xml config test ` .",
    "moreover the web application installed in the managed domain of fig .",
    "[ fig : app_system - diagram ] are characterized by the property of supporting the servlet specification 3.0 .",
    "thus the collector defined in ex .",
    "[ ex : c ] can be used for establishing the set of attributes of the resulting system components . by using @xmath44 ,",
    "the resulting system component for one installation of the einvoice web application sold by acme is @xmath45 . by using @xmath46 ,",
    "the resulting system component is @xmath47 .",
    "a system test is @xmath48 where    * @xmath49 is a set of system components , * @xmath50 is an oval definition , i.e. , a set of tests , * @xmath51 is a set of test mappings defining which test of the definition applies to which system component .",
    "[ ex : st ] the check definition @xmath31 defined in ex .",
    "[ ex : cd ] originates several system tests , one for each set of software components installed in the managed domain fulfilling the target definition @xmath30 .",
    "given , @xmath1 , @xmath20 , and @xmath32 , a system test defining the tests to be performed for one possible installation of the software components is @xmath52 where @xmath53 , and @xmath54 .",
    "notice that no system component for @xmath55 is included in @xmath56 as no tests apply to it .",
    "the system test refers a test to specific system , thus ( rl4 ) is met .    finally , the _ oval item _ in fig .",
    "[ fig : lang - diagram ] represents the configuration collected from a system component for the oval object defined in the oval test . by evaluating such items according to the test , a boolean result for the test is produced .",
    "based on the test results , the boolean result of the definition is also evaluated . differently from oval , our oval items may derive from different system , however this does not affect the evaluation algorithm defined in  @xcite , which we rely on .",
    "a check definition originates several system tests , each one originating a check result .",
    "a check result is a tuple @xmath57 where    * @xmath48 is a system test , * @xmath58 is a function that maps test mappings into its result ,",
    "i.e. , the boolean values true ( @xmath59 ) or false ( @xmath60 ) .",
    "the language presented in sect .",
    "[ sec : lang ] separates the checks logic from the systems to which they apply . in this section",
    "we establish the link between these two aspects , thereby describing how the checks can be instantiated and executed in a concrete landscape .",
    "the overall approach is outlined in fig .",
    "[ fig : approach ] . external and internal authors ( from the perspective of an organization ) can define , independently from the landscape , checks @xmath61 ( def .",
    "[ def : cd ] ) for known vulnerabilities affecting software components ( cf .",
    "( s1 ) ) , and for best practices of single or multiple software components sharing relations ( cf .",
    "an additional input is the set of collector definitions @xmath62 , that has to be provided by system administrators as creates the link between the software components used in the checks and the attributes of system components which allow the collection of the configurations .",
    "the ` td evaluator ` module has in input the above artifacts and is responsible for producing all the system tests @xmath63 defining which test has to be executed on which system component . to produce the system test artifact ,",
    "the ` td evaluator ` relies on a ` data source ` , an authoritative source of information about the software components installed in a managed domain .",
    "we assume a single ` data source ` to provide information about several aspects of the managed domain , ranging from the properties of installed software ( e.g. product names and vendors ) , or the internal structure of applications ( e.g. linked libraries ) , up to architectural details on the deployment or the network interaction among different pieces of software .",
    "since such information is often scattered over several repositories within an organization ( e.g. , cmdbs ) , the ` data source ` is a federated set of views over these repositories , which constitute the interface to our language .",
    "figurec0pt     although strong , this assumption is not unrealistic . indeed ,",
    "several theoretical formulations of this problem are tackled in literature on data integration  @xcite@xcite .",
    "furthermore the increasing adoption of standards such as dmtf s cmdbf  @xcite demonstrates the practical feasibility of configuration data federation .",
    "the system test can also be manually provided by system administrators in case of checks for selected system components ( cf .",
    "scenario ( s3 ) ) .",
    "system tests are then processed by the ` oval processor ` module that interprets the oval content and collects the objects defined for each system component within @xmath63 .",
    "the configurations collected from distributed systems are then evaluated and check results @xmath64 are produced , highlighting existing misconfiguration issues ( if any ) .",
    "a key step of the approach is the generation of the system tests based on the data source . in the following we",
    "formally define the interpretation of target definitions w.r.t . a data source , which provides information about the properties of software components deployed within a managed domain .",
    "we then describe how this leads to the generation of system tests .",
    "informally a data source  can be seen as a particular instantiation of software component  properties  ( cf .",
    "[ def : sc ] ) and target definition  relations ( cf .",
    "[ def : td ] ) for a managed domain .",
    "let @xmath65 be the domain of instances of software components , namely software component identifiers , containing one unique symbol for each software component installed in a given managed domain .",
    "the data source  then maps every software component identifier  to the actual values of its properties and links it to the other software component identifiers it is related to .",
    "a data source  is the pair of sets @xmath66 .",
    "@xmath67 contains a partial function @xmath68 for each property  @xmath69 , while @xmath70 includes a relation @xmath71 for each symbol @xmath72 .",
    "[ ex : dsi ] figure  [ fig : dsinst ] depicts a tabular representation of the data source  @xmath73 for the example landscape of fig .",
    "[ fig : app_system - diagram ] . due to space limitations , only a subset of the properties  listed in tab .",
    "[ tab : propr ] and relations of tab .",
    "[ tab : rel ] are considered .",
    "a software component  can be seen as a simple conjunctive query ranging over properties of software deployed within a managed domain .",
    "the data source  provides the necessary views on the managed domain  to answer such a query .",
    "the answer consists of the set of software component identifiers matching to all the conditions within the software component . if it contains no conditions , the answer is the entire domain of software component identifiers @xmath65 .",
    "this evaluation is performed by the data source  interpretation of software components , given by the mapping @xmath74 : @xmath75 a target definition @xmath76 is instead a more complex selection predicate ( cf .",
    "[ def : td ] ) and there can be several sets of software component identifiers which satisfy it .",
    "the interpretation of @xmath28 over a data source @xmath77 , @xmath78 , provides all such sets .",
    "this is done by relying on two interpretation functions , one providing the sets of software component identifiers , and one providing a function that maps each software component identifier to the corresponding software component .",
    "the interpretation function @xmath79 associates every @xmath80 and @xmath81 to a powerset of software component identifiers , as defined in and , respectively .",
    "notice that this function depends both on the data source @xmath77 and the function @xmath82 that carries the structure of target definition expressions .",
    "@xmath83    similarly , the interpretation function @xmath84 maps every @xmath80 and @xmath85 to a function @xmath86 associating each software component identifier  to the corresponding software component , according to and .",
    "@xmath87    finally , the evaluation function for a valid target definition  @xmath88 over the data source  @xmath77 , @xmath89 , associates a @xmath28 to the pair @xmath90 , where @xmath91 is a powerset of software component identifiers and @xmath86 a function mapping every @xmath92 to a @xmath93 . as expressed in",
    ", the definition of @xmath94 relies on the aforementioned recursive interpretation functions of all the elements within the target definition  expression , starting , in the general case , from the only relation @xmath95 which never appears in the @xmath82 co - domain . in case @xmath96 , we know from def .",
    "[ def : td ] that @xmath97 and therefore @xmath98 is the only element being interpreted .",
    "@xmath99    [ ex : tdsem ] we hereby compute the interpretation of the target definition  @xmath30 , introduced in ex .",
    "[ ex : td ] , w.r.t .",
    "the data source  @xmath73 , shown in ex .",
    "[ ex : dsi ] .",
    "first , we recognize ( eq .  ) that @xmath100 , since @xmath101 .    in order to obtain @xmath102 , according to , we now need to compute the two following terms :    a.   @xmath103 ; b.   @xmath104 + @xmath105 + @xmath106 .",
    "we then have @xmath107 .",
    "analogously , by applying , we obtain @xmath108 .    as last step , the ` td evaluator ` needs to identify one or more system tests , mapping each oval test to the system componentcarrying the information about how to collect the object .",
    "a check definition @xmath109 is defined for the target definition  @xmath28 , being interpreted over a data source  resulting in a pair @xmath110 .",
    "every @xmath111 is a set of software component identifiers satisfying the @xmath28 expression .",
    "therefore one system test has to be created for every such set @xmath112 .",
    "when the ` td evaluator ` processes a check definition , it must identify a _ matching collector _",
    "@xmath113 , among the set @xmath62 of all the ones defined for a given managed domain .",
    "this has to be done for every software component identifier  @xmath114 , and provides the set of properties @xmath115 necessary to collect the to - be - checked configurations for specific oval objects from @xmath116 .",
    "for this reason , every @xmath117 ( cf .",
    "[ def : c ] ) references a software component  @xmath118 and contains a xpath query @xmath119 , matching to the xml serialization of the oval objects it applies to .",
    "we write @xmath120 whenever the xml serialization of all the oval objects referenced within an oval test @xmath121 satisfy the xpath query @xmath119 .    given a collector property set @xmath115 and a software component identifier  @xmath116 , eq",
    ".   defines how to retrieve the corresponding system component  from a data source  @xmath77 , through the interpretation function @xmath122 . @xmath123",
    "the conditions required to determine whether a collector matches to a software component identifier  are now formalized by the following definition .",
    "[ def : mcoll ] for a @xmath109 , where @xmath124 , let @xmath125 be an interpretation of @xmath28 over @xmath77 and @xmath126 be the inverse of @xmath127 , mapping every @xmath128 to the set @xmath129\\tau(t)={\\mathit{sc}}\\}$ ] .",
    "we then say that  @xmath130  matches  to  @xmath131 ,  iff @xmath132    given the interpretation @xmath133 of a target definition  within a check definition @xmath109 , we are now in a position to associate each @xmath111 to a system test @xmath134 , constructed as follows .",
    "( i ) @xmath27 is the same oval definition contained in @xmath61 .",
    "( ii ) every element @xmath135 is a system component , i.e. a collection of attributes associated to properties of the software component identifier  which allows to collect configuration information from it . for every @xmath114 we first need to find a matching collector @xmath136 carrying such set of properties @xmath137 , and we then retrieve the system component  @xmath138 , i.e. the attributes corresponding to the properties in @xmath137 , from the data source  @xmath77 .",
    "( iii ) @xmath139 maps every test @xmath140 to a system component  @xmath135 .",
    ".   finally specifies how the system test s components @xmath141 and @xmath142 , informally described above , are built by the ` td evaluator ` .",
    "@xmath143    let us consider the check definition @xmath144 , introduced in ex .",
    "[ ex : cd ] , and the data source interpretation of its target definition @xmath145 , which has been derived in ex .",
    "[ ex : tdsem ] .",
    "three sets of software component identifiers satisfy the target definition , namely @xmath146 , hence three system tests will be created . among those ,",
    "we shall only discuss , for brevity , the system tests @xmath147 and @xmath148 , related to @xmath149 and @xmath150 resp .    for the sake of this example",
    "we extend the data source @xmath151 such that it includes the properties required by the collectors ( cf .",
    "[ ex : c ] ) .",
    "let such an extended data source be @xmath152 , where : @xmath153 , @xmath154 , @xmath155 , and @xmath156 .    according to def .",
    "[ def : mcoll ] the collector @xmath46 matches to the software component identifier  @xmath157 ( and not to @xmath158 ) , as ( i ) @xmath159 , ( ii ) @xmath160 , @xmath161 , @xmath161 are all defined in @xmath77 ( while this is not the case for @xmath158 ) , and ( iii ) both @xmath162 and @xmath163 hold . from analogous reasoning",
    "it follows that @xmath44 matches to @xmath158 ( and not to @xmath157 ) .    by applying",
    "we finally derive that @xmath164 , as anticipated in ex .",
    "[ ex : si ] and  [ ex : st ] .",
    "analogously , we obtain @xmath165 .",
    "this paper presents a formal approach to specify and execute declarative and unambiguous checks able to detect vulnerabilities caused by system misconfiguration .",
    "this paper extends the state of the art on configuration validation as security checks can be specified for fine - granular components in a distributed environment and separate the check logic from the configuration retrieval .",
    "a proof of concept has been developed to explore the feasibility of our approach at the example of owasp and sans recommendations for jwa , using a cmdb as data source for resolving target definitions , and jmx for the collection of configuration settings . in future work",
    ", we will evaluate the prototype in near - world environments that comprise a greater numbers of system components .",
    "furthermore , we plan to generate security checks and checklists in an automated fashion to facilitate scenario ( s3 ) , where checks are used for gaining assurance about compliance with system - specific configuration policies .",
    "this would allow to gain assurance without the need to manually author check on a low technical level .",
    "lastly , we intent to investigate the usage in cloud scenarios , were cloud providers could use and offer a corresponding tool for ensuring the security of consumer - managed resources .",
    "waltermire , d. , quinn , s. , scarfone , k. : the technical specification for the security content automation protocol ( scap ) : scap version 1.1 .",
    "nist , http://csrc.nist.gov/publications/nistpubs/800-126-rev1/sp800-126r1.pdf ( 2011 )"
  ],
  "abstract_text": [
    "<S> many tools and libraries are readily available to build and operate distributed web applications . while the setup of operational environments is comparatively easy , practice shows that their continuous secure operation is more difficult to achieve , many times resulting in vulnerable systems exposed to the internet . authenticated vulnerability scanners and validation tools represent a means to detect security vulnerabilities caused by missing patches or misconfiguration , but current approaches center much around the concepts of hosts and operating systems . </S>",
    "<S> this paper presents a language and an approach for the declarative specification and execution of machine - readable security checks for sets of more fine - granular system components depending on each other in a distributed environment . </S>",
    "<S> such a language , building on existing standards , fosters the creation and sharing of security content among security stakeholders . </S>",
    "<S> our approach is exemplified by vulnerabilities of and corresponding checks for open source software commonly used in today s internet applications . </S>"
  ]
}