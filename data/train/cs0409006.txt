{
  "article_text": [
    "modern cosmology is based on general relativity ( gr ) and einstein equations .",
    "gr requires lengthy ( or cumbersome ) calculations which could be solved by computer algebra methods . during the years",
    ", a plethora of ca platforms was used for gr purposes , as reduce ( with excalc package ) , sheep or maxima ( see for example in @xcite , @xcite or @xcite ) . although some advantages as flexibility and speed were obvious , recently , platforms as maple or mathematica are preferred by those working in the field , due to their more advanced graphical facilities - for a comparison between maple and reduce see @xcite .    in the last years , an increased interest in theoretical cosmology is visible because of the new facts revealed by the experimental astrophysics , mainly in the sense that the universe is actually in an accelerated expansion period - the so called `` cosmic acceleration '' ( see @xcite ) . in order to fit these new facts with the standard model of the universe",
    "some new mechanisms are proposed , based on dark - matter , dark - energy and/or cosmological constant hypothesis .",
    "new models are proposed in the literature practically on a daily basis demanding new specific tools and libraries from the computational science , including ca applications specially designed for theoretical cosmology .",
    "thus we concentrate here in symbolic manipulation of einstein equations with maple and grtensorii package ( see at * http://grtensor.org * ) .",
    "we packed our procedures in a specific library , containing all the necessary ingredients for theoretical cosmology - friedmann equations , a scalar field minimally coupled with gravity and other matter fields terms to be used specifically .",
    "the article is organized as follows : next section 2 introduces shortly grtensorii package and his main facilities .",
    "then section 3 presents how we implemented non - vacuum einstein equations in a specific form for cosmology ( based on friedmann - robertson - walker - frw metric ) with the stress - energy tensor components designed for interacting with gravity matter and one real scalar field separately added .",
    "the last section is dedicated to some new results we obtained with our maple libraries in the so called `` reverse - technology '' @xcite method for treating inflation and cosmic expansion triggered by a real scalar field .",
    "our library , called cosmo , can be provided by request to the authors .",
    "we mainly used maple 7 and maple9 versions but as far as we know the library can be used with other maple environments starting with maple v.",
    "grtensorii is a free package from * http://grtensor.org * for the calculation and manipulation of components of tensors and related objects , embedded in maple . rather than focus upon a specific type or method of calculation",
    ", the package has been designed to operate efficiently for a wide range of applications and allows the use of a number of different mathematical formalisms .",
    "algorithms are optimized for the individual formalisms and transformations between formalisms has been made simple and intuitive .",
    "additionally , the package allows for customization and expansion with the ability to define new objects , user - defined algorithms , and add - on libraries .",
    "the geometrical environment for which grtensorii is designed is a riemannian manifold with connection compatible with the riemannian metric .",
    "thus there are special commands and routines for introducing and calculating geometrical objects as the metric , christoffel symbols , curvature ( ricci tensor and scalar ) and the einstein tensor - as for a couple of examples . manipulating with indices and",
    "extracting tensor components are easy to do from some special commands and conventions .",
    "grtensorii has a powerful facility for defining new tensors , using their natural definitions . as for an example , for calculating the bianchi identities @xmath0 ( where @xmath1 is the einstein tensor defined with the ricci tensor @xmath2 and the ricci scalar @xmath3",
    ", @xmath4 is the metric and we denoted with the semicolon @xmath5 the covariant derivative of the metric compatible connection ) we can use a short sequence of grtensorii commands for calculating the left side of eq .",
    "[ bianchi ] :    .... > grtw ( ) ; > qload(rob_sons ) ; > grdef(`bia { ^i } : = g { ^i ^j ; j } ` ) ; > grcalc(bia(up ) ) ; grdisplay(bia(up ) ) ; ....    actually above , the first two commands are for starting the grtensorii package and loading the frw metric ( previously constructed and stored in a special directory - grtensorii provides also an entire collection of predefined metrics , but the user can also define his owns using a * gmake ( ... ) * command ) .",
    "the last line contains two commands , for effectively calculating the new * bia(up ) * tensor and for displaying the results .",
    "if the metric in discussion is compatible with the connection the * bia ( ) * tensor must have all components vanishing .",
    "the central point of any calculation with grtensorii is * grcalc ( ) * command",
    ". often large terms result in individual tensor components which need to be simplified . for this * gralter ( ) * and * grmap ( ) * commands are provided equiped with several simplifying options , mainly coming from the simplifying commands of maple and some specific to grtensorii .",
    "actually the user is free to choose his own simplification strategy inside these commands .",
    "special libraries are also available for doing calculation in different frames or basis and in newman - penrose formalism .",
    "as we mentioned earlier , in modern cosmology we are using the friedmann - robertson - walker metric ( frw ) , having the line element in spherical coordinates @xmath6\\ ] ] as a generic metric for describing the dynamics of the universe . here",
    "@xmath7 is a constant with arbitrary value , positive ( for closed universes ) , negative ( for open universe ) and zero for flat universes .",
    "usually , this constant is taken @xmath8 , @xmath9 or @xmath10 respectively .",
    "@xmath11 is called scale factor , and is only function of time , due to the homogeneity and isotropy of space as in standard model of the universe is presumed .",
    "the dynamic equations are obtained introducing ( [ frw ] ) in the non - vacuum einstein equations , namely @xmath12 where @xmath13 is the cosmological constant , @xmath14 the stress - energy tensor , g the gravitational constant , @xmath15 the speed of light and @xmath16 .",
    "the matter content of the universe is given by the stress - energy tensor @xmath17 which we shall use as : @xmath18 where the stress - energy tensor of a scalar field minimally coupled with gravity and the stress - energy tensor of the matter ( other than the scalar field ) have the form of a perfect fluid , namely : @xmath19 above the scalar field pressure and density are @xmath20 here we used the 4-velocities @xmath21 obviously having @xmath22 .",
    "introducing all these in ( [ ee ] ) and defining the hubble function ( usually called hubble constant ) and the deceleration factor as @xmath23 where a dot means time derivative and @xmath24 is the initial ( actual ) scale factor , we should obtain the dynamical equations describing the behavior of the universe , the so called friedmann equations .",
    "the whole package will contain also the conservation laws equations and the klein - gordon equation for the scalar field , separately .",
    "we composed a sequence of grtensorii commands for this purpose .",
    "first , defining the 4-velocities , the scalar field functions and the einstein equations , we have    .... > restart;grtw();qload(rob_sons ) ; >",
    "grdef(`u { i } : = -c*kdelta { i $ t } ` ) ; > grdef(`scal : = phi(t ) ` ) ; > grdef(`t1 { i j } : = scal { , i } * scal { , j } -          g { i j } * ( g { ^a ^b } * scal { , a } * scal { , b } +                                            v(t))/2 ` ) ; > grdef(`tt1 { i j } : = ( epsilonphi(t)+                         pphi(t))*u { i } * u { j } +                         pphi(t)*g { i j } ` ) ; > pphi(t):=diff(phi(t),t)^2/2/c^2-v(t)/2 ; > epsilonphi(t):=diff(phi(t),t)^2/2/c^2+v(t)/2 ; > grdef(`test { i j } : = t1 { i j } - tt1 { i j } ` ) ; > grcalc(test(dn , dn ) ) ; grdisplay(test(dn , dn ) ) ;   > grdef(`t2 { i j } : = ( epsilon(t ) + p(t))*u { i } * u { j } +                                             p(t)*g { i j } ` ) ; >",
    "grdef(`t { i j } : = t1 { i j } + t2 { i j } ` ) ; > grdef(`cons { i } : = t { i ^j ; j } ` ) ; grcalc(cons(dn ) ) ; > ecukg:=grcomponent(box[scal ] , [ ] ) -dv(t)/2 ; >",
    "grdef(`ein { i j } : = g { i j } - 8*pi*g*t { i j } /c^4 ` ) ; > grcalc(ein(dn , dn ) ) ; gralter(ein(dn , dn),expand ) ; ....    here we defined twice the stress - energy components for the scalar field , due to the possibility of a direct definition ( * t1 ( ) * ) and through the corresponding density and pressure ( * tt1 ( ) * ) . because we are working in a coordinate frame",
    ", these must have equal components and we can check it through * test(dn , dn ) * tensor as having vanishing components .",
    "finally the total stress - energy tensor and the einstein equations are defined , as it is obvious .",
    "separately we defined the conservation law - equation ( * cons ( ) * ) as the contracted covariant derivative of the stress - energy tensor and the klein - gordon equation for the scalar field - as the unique component of the dalembertian and adding a special function of the derivative of the potential in terms of the scalar field * dv(t)*. we shall treat this as an extra variable to be extracted solving the equations .    next step is to extract , one by one the components of * ein(dn , dn ) * as the final form of ( [ ee ] ) through a sequence of * grcomponent * commands followed by certain simplifications and rearrangements of terms .",
    "as some of the equations are identical we shall restrict only to two of them , coupled with conservation and klein - gordon equations . as a result we denoted with * ecunr1 * and * ecunr2 * the independent einstein equations and with * ecunr3 * the conservation law equation ( * ecukg * remains as it is ) .",
    "we also provided a separate equation ( * ecnur22 * ) for one of the above terms written with the acceleration factor * q(t)*. then comes a series of substitution commands for casting the equations in terms of the hubble function , deceleration factor and geometrical factor defined as @xmath25 :    .... > ecunr1:=expand(simplify(subs(k = k(t)*rr(t)^2,ecunr1 ) ) ) ; > ecunr2:=expand(simplify(subs(k = k(t)*rr(t)^2,ecunr2 ) ) ) ; > ecunr1:=subs(diff(rr(t),t)=h(t)*rr(t),ecunr1 ) ; > ecunr22:=subs(diff(rr(t),t , t)=-2*h(t)^2*rr(t)*q(t ) ,                                                 ecunr2 ) ; > ecunr22:=subs(diff(rr(t),t)=h(t)*rr(t),ecunr22 ) ; >",
    "ecunr2:=subs(diff(rr(t),t)=h(t)*rr(t),ecunr2 ) ; >",
    "ecunr2:=expand(ecunr2 ) ; >",
    "ecunr2:=subs(diff(rr(t),t)=h(t)*rr(t),ecunr2 ) ; >",
    "ecunr3:=subs(diff(rr(t),t)=h(t)*rr(t),ecunr3 ) ; >",
    "ecukg:=subs(diff(rr(t),t)=h(t)*rr(t),ecukg ) ; ....      .... > parse(cat(\"save \" , substring(convert([anames ( ) ,                     \" cosmo.m\"],string),2 .. -2)),statement ) ; ....    having this library stored , every - time one need the above equations , it can load fast through a * read * command .",
    "it provides all the functions and variables directly without running all the stuff we presented here above .",
    "thus , the * cosmo.m * library provides all the necessary environment for doing calculation within the standard model of cosmology , with frw metric and a scalar field and other matter variables included . for these last ones",
    "there are some functions left undefined ( * epsilon(t ) * and * p(t ) * ) where the user can define other matter fields than the scalar field to be included in the model - even a second scalar field and/or the cosmological constant as describing the dark - energy content of the universe .",
    "thus our library can be used in more applications than those we presented in the next section . in the same purpose , we left in the library some of the original equations unprocessed - having different names - as for example the components of the einstein tensor ( * ein(dn , dn ) * ) .",
    "thus the user can finally save his own library , expanding the class of the possible applications of our * cosmo * library .",
    "as an example , we shall next point out some results we obtained by using this library for the so called `` reverse - technology '' @xcite treatment of inflation triggered by the scalar field .",
    "in the standard treatment of cosmological models with scalar field , it is prescribed a certain potential function for the scalar field ( taking into account some physical reasons specific to the model processed ) and then the dynamical friedmann equations are solved ( if it is possible ) to obtain the time behavior of the scale factor of the universe . as recently some authors pointed out ,",
    "a somehow `` reverse '' method @xcite is also interesting , where the time behavior of the scale factor is `` a priori '' prescribed ( as a function of time which will model the supposed time behavior of the universe in inflation or in cosmic accelerated expansion ) then solving the friedmann equations we can extract the shape of the corresponding potential for the theory .",
    "this is the so called `` reverse technology '' and we shall use it here to illustrate the usage of our * cosmo.m * library .    we shall concentrate ourselves to the case of no matter variables other than the scalar field . in this case",
    "we solve first equations ( [ ecunr1 ] ) and ( [ ecunr2 ] ) for the potential @xmath31 and @xmath32 , not before denoting the last one with a special intermediate maple function called * d2phi(t ) * with * subs * command :    .... > ecunr1:=subs(diff(phi(t),t)^2=d2phi(t),ecunr1 ) ; >",
    "ecunr2:=subs(diff(phi(t),t)^2=d2phi(t),ecunr2 ) ; >",
    "solve({ecunr1,ecunr2},{v(t),d2phi(t ) } ) ; ....    thus we have @xcite : @xmath33\\ ] ] @xmath34\\ ] ] here and in the following pages we have , as usual geometrical units @xmath35 . here",
    "we shall process one of the examples pointed out in ellis and madsen article @xcite , namely that one of de sitter exponential expansion , where @xmath36 thus ( [ pot ] ) and ( [ dotphi2 ] ) became @xmath37 after simple evaluations of the corresponding maple expressions .",
    "it is obvious that @xmath38 can be simply obtained by square root of the above expression and can also be integrated to give the potential as : @xmath39 the result is that , after evaluating the einstein equations we have automatically satisfied * ecunr1 * , * ecunr2 * and * ecunr3 * and the klein gordon equation has the form : @xmath40 the last one is used to express the * dv(t ) * by solving it , and it is a point to check the calculation if this expression is equal to that one obtained directly from the potential . but this checking can be done only if we express , after a sequence of simple * subs * and * solve * commands , the potential @xmath31 and his derivative @xmath41 in terms of the scalar field , more precisely in terms of @xmath42 .",
    "the result is @xmath43 @xmath44 these results are in perfect agreement with the well - known results from @xcite .",
    "we processed in the same way more examples , some of them completely new .",
    "our purpose was to produce maple programs for processing the `` reverse - technology ''",
    "@xcite-@xcite method for these type of potentials with matter added to the model , especially dust or radiative matter .",
    "although the steps for computing are the same , there are two points of the calculations where troubles can appear and the solution is not straightforward .",
    "the first one is the integration of the * dphi(t ) * obtained as the square root of * d2phi(t)*. sometime it is not trivial to do this , so in several cases we used approximation techniques , by evaluating the cosmological functions at the initial time .",
    "our main purpose was to produce good initial data for numerical solving the einstein equations ( with the cactus code , for example ) thus these approximations can be a good solution for short time after the initial time . the second trouble point is to evaluate the potential in terms of the scalar field , namely to extract the time variable from it . sometimes here",
    "we have transcendental equations and again some approximation methods can solve the problem . because these results are not in the topic of this article we plan to report them in a future article .",
    "special thanks to one of the referees who revealed many week points of our article . this work was partially supported by the romanian space agency ( grant nr .",
    "258/2002 - 2004 ) and the albert einstein institute , potsdam , germany ."
  ],
  "abstract_text": [
    "<S> the article mainly presents some results in using maple platform for computer algebra ( ca ) and grtensorii package in doing calculations for theoretical and numerical cosmology .    68w30 , 83c05 , 85a40    _ keywords and phrases : _ computer algebra , general relativity , cosmology </S>"
  ]
}