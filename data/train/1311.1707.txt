{
  "article_text": [
    "we consider simple undirected graphs . if not specified otherwise , standard graph - theoretic terminology and notations are used ( e.g. , see @xcite ) .",
    "we are interested in the classical packings and packing numbers of graphs as introduced in @xcite , and their generalization , called limited packings and limited packing numbers , respectively , as presented in @xcite . in the literature , the classical packings are often referred to under different names : for example , as ( distance ) @xmath12-packings @xcite , closed neighborhood packings @xcite or strong stable sets @xcite .",
    "they can also be considered as generalizations of independent ( stable ) sets which , following the terminology of @xcite , would be ( distance ) @xmath13-packings .",
    "formally , a vertex set @xmath0 in a graph @xmath1 is a",
    "_ @xmath2-limited packing _",
    "if for any vertex @xmath3 , @xmath14 \\cap x\\right| \\le k,\\ ] ] where @xmath5 $ ] is the closed neighbourhood of @xmath6 . the _",
    "@xmath2-limited packing number _ @xmath7 of a graph @xmath1 is the maximum size of a @xmath2-limited packing in @xmath1 . in these terms , the classical ( distance ) @xmath12-packings are @xmath13-limited packings , and hence @xmath15 , where @xmath16 is the 2-packing number .    the problem of finding a @xmath12-packing ( @xmath13-limited packing ) of maximum size is shown to be @xmath11-complete by hochbaum and schmoys @xcite . in @xcite",
    ", it is shown that the problem of finding a maximum size @xmath2-limited packing is @xmath11-complete even for the classes of split and bipartite graphs .    graphs usually serve as underlying models for networks .",
    "a number of interesting application scenarios of limited packings are described in @xcite , including network security , market saturation , and codes .",
    "these and others can be summarized as secure location or distribution of facilities in a network . in a more general sense , these problems can be viewed as ( maximization ) facility location problems to place / distribute in a given network as many resources as possible subject to some ( security ) constraints .",
    "@xmath12-packings ( @xmath13-limited packings ) are well - studied in the literature from the structural and algorithmic point of view ( e.g. , see @xcite ) and in connection with other graph parameters ( e.g. , see @xcite ) . in particular ,",
    "several papers discuss connections between packings and dominating sets in graphs ( e.g. , see @xcite ) .",
    "although the formal definitions for packings and dominating sets may appear to be similar , the problems have a very different nature : one of the problems is a maximization problem not to break some ( security ) constraints , and the other is a minimization problem to satisfy some reliability requirements .",
    "for example , given a graph @xmath1 , the definitions imply a simple inequality @xmath17 , where @xmath18 is the domination number of @xmath1 ( e.g. , see @xcite ) .",
    "however , the difference between @xmath16 and @xmath18 can be arbitrarily large as illustrated in @xcite : @xmath19 for the cartesian product of complete graphs , but @xmath20 .    in this paper",
    ", we develop the probabilistic method for @xmath2-limited packings in general and for @xmath12-packings ( @xmath13-limited packings ) in particular . in section 2",
    "we present the probabilistic construction and use it to derive two lower bounds for the @xmath2-limited packing number @xmath7 .",
    "the construction implies a randomized algorithm to find @xmath2-limited packings satisfying the lower bounds .",
    "the algorithm and its analysis are presented in section 3 .",
    "section 4 shows that one of the lower bounds is asymptotically sharp .",
    "finally , section 5 provides upper bounds for @xmath7 , e.g. in terms of the @xmath2-tuple domination number @xmath21 .    notice that the probabilistic construction and approach are different from the probabilistic constructions used for independent sets and deriving the lower bounds for the independence number @xmath22 in @xcite , pp.2728,9192 . in terms of packings , an independent set in a graph @xmath1 is a distance @xmath13-packing : for any two vertices in an independent set , the distance between them in @xmath1 is greater than @xmath13 . to the best of our knowledge ,",
    "the proposed probabilistic method is a new approach to work on packings and related maximization problems .",
    "let @xmath9 = @xmath23 denote the maximum vertex degree in a graph @xmath1 .",
    "notice that @xmath24 when @xmath25 .",
    "we define @xmath26 in what follows , we put @xmath27 if @xmath28 .",
    "the following theorem gives a new lower bound for the @xmath2-limited packing number .",
    "it may be pointed out that the probabilistic construction used in the proof of theorem [ th1 ] implies a randomized algorithm for finding a @xmath2-limited packing set , whose size satisfies the bound of theorem [ th1 ] with a positive probability ( see algorithm 1 in section 3 ) .    [ th1 ] for any graph @xmath1 of order @xmath8 with @xmath29 , @xmath30    let @xmath31 be a set formed by an independent choice of vertices of @xmath1 , where each vertex is selected with the probability @xmath32    for @xmath33 , we denote @xmath34 for each set @xmath35 , we form a set @xmath36 in the following way . for every vertex @xmath37 ,",
    "we take @xmath38 neighbours from @xmath39 and add them to @xmath36 .",
    "such neighbours always exist because @xmath40 .",
    "it is obvious that @xmath41    for @xmath42 , let us denote @xmath43 for each set @xmath44 , we form a set @xmath45 by taking @xmath46 neighbours from @xmath39 for every vertex @xmath47 .",
    "we have @xmath48    let us construct the set @xmath0 as follows : @xmath49 it is easy to see that @xmath0 is a @xmath2-limited packing in @xmath1 .",
    "the expectation of @xmath50 is @xmath51 & \\ge & { \\mathbf e}\\left[|a| - \\sum_{m = k}^{\\delta}|a'_m| - \\sum_{m = k+1}^{\\delta}|b'_m|\\right]\\\\ & \\ge & { \\mathbf e}\\left[|a| - \\sum_{m = k}^{\\delta}(m - k+1 ) |a_m|   - \\sum_{m = k+1}^{\\delta}(m - k)|b_m|\\right]\\\\ & = & pn - \\sum_{m = k}^{\\delta}(m - k+1){\\mathbf e}[|a_m| ]   - \\sum_{m = k+1}^{\\delta}(m - k){\\mathbf e}[|b_m|].\\end{aligned}\\ ] ]    let us denote the vertices of @xmath1 by @xmath52 and the corresponding vertex degrees by @xmath53",
    ". we will need the following lemma :    [ lemma1 ] if @xmath54 , then , for any vertex @xmath55 , @xmath56    the inequality ( [ eq2 ] ) holds if @xmath57 .",
    "it is also true if @xmath58 because in this case @xmath59 .",
    "thus , we may assume that @xmath60 now , it is easy to see that inequality ( [ eq2 ] ) is equivalent to the following : @xmath61    further , @xmath62 implies @xmath63 , where @xmath64 .",
    "taking into account that @xmath65 , we obtain @xmath66 or @xmath67 thus , @xmath68 we have @xmath69 , which is equivalent to @xmath70",
    ". therefore , @xmath71 as required in ( [ eq3 ] ) .",
    "@xmath72    now we go on with the proof of theorem [ th1 ] . by lemma [ lemma1 ] ,",
    "@xmath73   & = &   \\sum_{i=1}^n { \\mathbf p}[v_i\\in a_m]\\\\     & = &   \\sum_{i=1}^n p \\pmatrix{d_i \\cr m } p^m ( 1-p)^{d_i - m}\\\\   & \\le & p^{m+1 } \\sum_{i=1}^n \\pmatrix{\\delta \\cr m } ( 1-p)^{\\delta - m } \\\\   & = & p^{m+1 } ( 1-p)^{\\delta - m } { c}_m n\\end{aligned}\\ ] ] and @xmath74   & = &   \\sum_{i=1}^n { \\mathbf p}[v_i\\in b_m]\\\\     & = &   \\sum_{i=1}^n ( 1-p ) \\pmatrix{d_i \\cr m } p^m ( 1-p)^{d_i - m}\\\\   & \\le & p^{m } \\sum_{i=1}^n \\pmatrix{\\delta \\cr m } ( 1-p)^{\\delta - m+1 } \\\\   & = & p^{m } ( 1-p)^{\\delta - m+1 } { c}_m n.\\end{aligned}\\ ] ]    taking into account that @xmath75 , we obtain @xmath51 & \\ge & pn - \\sum_{m = k}^{\\delta}(m - k+1 ) p^{m+1 } ( 1-p)^{\\delta - m } { c}_m n    - \\sum_{m = k+1}^{\\delta+1}(m - k)p^m ( 1-p)^{\\delta - m+1 } { c}_m n\\\\ & = & pn - \\sum_{m=0}^{\\delta - k}(m+1 ) p^{m+k+1 } ( 1-p)^{\\delta - m - k } { c}_{m+k } n\\\\ & & \\qquad\\qquad\\qquad\\qquad   - \\sum_{m=0}^{\\delta - k}(m+1)p^{m+k+1 } ( 1-p)^{\\delta - m - k } { c}_{m+k+1 } n\\\\ & = &   pn - \\sum_{m=0}^{\\delta - k}(m+1 ) p^{m+k+1 } ( 1-p)^{\\delta - m - k}n \\left({c}_{m+k } + { c}_{m+k+1}\\right)\\\\ & = &   pn - p^{k+1}n \\sum_{m=0}^{\\delta - k}(m+1 ) { \\tilde c}_{m+k+1 } p^{m } ( 1-p)^{\\delta - k - m}.\\\\\\end{aligned}\\ ] ]    furthermore , @xmath76    we obtain @xmath51 & \\ge & pn - p^{k+1}n \\sum_{m=0}^{\\delta - k } { \\delta - k \\choose m } { \\tilde c}_{k+1 } p^{m } ( 1-p)^{\\delta - k - m}\\\\ & = & pn - p^{k+1}n { \\tilde c}_{k+1 } \\\\ & = & pn(1- p^{k } { \\tilde c}_{k+1 } ) \\\\ & = & { k n \\over { \\tilde c}_{k+1 } ^{1/k } \\ ; ( 1+k)^{1 + 1/k } } \\;.\\end{aligned}\\ ] ] since the expectation is an average value , there exists a particular @xmath2-limited packing of size at least @xmath77 , as required .",
    "the proof of the theorem is complete .",
    "@xmath72    the lower bound of theorem [ th1 ] can be written in a simpler but weaker form as follows :    for any graph @xmath1 of order @xmath8 , @xmath78    it is not difficult to see that @xmath79 and , using stirling s formula , @xmath80{2\\pi k}\\ ; { k\\over e}.\\ ] ] by theorem [ th1 ] , @xmath81{2\\pi k}\\ ; k \\over 1+k } >",
    "{ k n \\over e ( 1+\\delta)^{1 + 1/k}}.\\ ] ] note that @xmath82{2\\pi k}\\ ; k \\over 1+k } = { \\sqrt[2k]{2\\pi k } \\over 1 + 1/k } > 1 $ ] .",
    "the last inequality is obviously true for @xmath83 , while for @xmath84 it can be rewritten in the equivalent form : @xmath85 .",
    "a pseudocode presented in algorithm [ alg : k - limited ] explicitly describes a randomized algorithm to find a @xmath2-limited packing set , whose size satisfies bound ( [ main_bound ] ) with a positive probability .",
    "notice that algorithm [ alg : k - limited ] constructs a @xmath2-limited packing by recursively removing unwanted vertices from the initially constructed set @xmath31 .",
    "this is different from the probabilistic construction used in the proof of theorem 1 .",
    "the recursive removal of vertices from the set @xmath31 may be more effective and efficient , especially if one tries to remove overall as few vertices as possible from @xmath31 by maximizing intersections of the sets @xmath36 ( @xmath86 ) and @xmath45 ( @xmath87 ) .",
    "algorithm [ alg : k - limited ] can be implemented to run in @xmath88 time . to compute the probability @xmath89{\\pmatrix{\\delta \\cr k } ( \\delta + 1)}}}$ ] , the binomial coefficient @xmath90 can be computed by using the dynamic programming and pascal s triangle in @xmath91 time using @xmath92 memory .",
    "the maximum vertex degree @xmath9 of @xmath1 can be computed in @xmath93 time , where @xmath94 is the number of edges in @xmath1 .",
    "then @xmath95 can be computed in @xmath96 steps .",
    "it takes @xmath97 time to find the initial set @xmath31 . computing the intersection numbers @xmath98 and removing unwanted vertices of @xmath99 s from @xmath31",
    "can be done in @xmath100 steps . finally , checking whether @xmath0 is maximal or extending @xmath0 to a maximal @xmath2-limited packing can be done in @xmath100 time : try to add vertices of @xmath101 to @xmath0 recursively one by one , and check whether the addition of a new vertex @xmath102 to @xmath0 violates the conditions of a @xmath2-limited packing for @xmath6 or at least one of its neighbours in @xmath1 with respect to @xmath103 .",
    "thus , overall algorithm [ alg : k - limited ] takes @xmath88 time , and , since @xmath104 in general , it is linear in the graph size ( @xmath105 ) when @xmath106 .",
    "[ alg : k - limited ]    also , this randomized algorithm for finding @xmath2-limited packings in a graph @xmath1 can be implemented in parallel or as a local distributed algorithm . as explained in @xcite , this kind of algorithms",
    "are especially important , e.g. in the context of ad hoc and wireless sensor networks .",
    "we hope that this approach can be also extended to design self - stabilizing or on - line algorithms for @xmath2-limited packings .",
    "for example , a self - stabilizing algorithm searching for maximal @xmath12-packings in a distributed network system is presented in @xcite .",
    "notice that self - stabilizing algorithms are distributed and fault - tolerant , and use the fact that each node has only a local view / knowledge of the distributed network system .",
    "this provides another motivation for efficient distributed search and algorithms to find @xmath2-limited packings in graphs and networks .",
    "we now show that the lower bound of theorem [ th1 ] is asymptotically best possible for some values of @xmath2 .",
    "let @xmath107 = @xmath108 denote the minimum vertex degree in a graph @xmath1 .",
    "the bound of theorem [ th1 ] can be rewritten in the following form for @xmath109 : @xmath10{\\pmatrix{\\delta \\cr k } ( \\delta + 1 ) } } .\\ ] ] combining this bound with the upper bound of lemma @xmath110 from @xcite , we obtain that for any connected graph @xmath1 of order @xmath8 with @xmath111 , @xmath112{\\pmatrix{\\delta \\cr k } ( \\delta + 1 ) } } \\times { k \\over k+1 } n   \\;\\le\\ ; l_k(g)\\ ;",
    "\\le \\;{k \\over k+1 } n.\\ ] ] notice that the upper bound in the inequality ( [ ineq5 ] ) is sharp ( see @xcite ) , so these bounds provide an interval of values for @xmath7 in terms of @xmath2 and @xmath9 when @xmath113 . for regular graphs , @xmath114 , and ,",
    "when @xmath115 , we have @xmath116{\\pmatrix{\\delta \\cr k } ( \\delta + 1 ) } } =   { 1 \\over \\left(k+1\\right)^{1/k } } \\longrightarrow 1\\ \\quad\\mbox{as } \\quad \\ k \\to \\infty.\\ ] ] therefore , theorem [ th1 ] is asymptotically sharp in regular connected graphs for @xmath115 .",
    "a similar statement can be proved for the situation when @xmath117 .",
    "thus , the following result is true :    [ asym_sharp ] when @xmath8 is large there exist graphs such that @xmath118",
    "as mentioned earlier , @xmath119 . in @xcite , the authors provide several upper bounds for @xmath7 , e.g. @xmath120 for any graph @xmath1 . using the well - known bound ( see e.g. @xcite ) @xmath121 we obtain @xmath122 even though this bound does not work well when @xmath2 is ` close ' to @xmath107 , it is very reasonable for small values of @xmath2 .",
    "we now prove an upper bound for the @xmath2-limited packing number in terms of the @xmath2-tuple domination number .",
    "a set @xmath0 is called a _",
    "@xmath2-tuple dominating set _ of @xmath1 if for every vertex @xmath3 , @xmath123\\cap x|\\ge k$ ] .",
    "the minimum cardinality of a @xmath2-tuple dominating set of @xmath1 is the _ @xmath2-tuple domination number _ @xmath21 .",
    "the @xmath2-tuple domination number is only defined for graphs with @xmath124 .",
    "we prove inequality ( [ upper_bound ] ) by contradiction .",
    "let @xmath0 be a maximum @xmath2-limited packing in @xmath1 of size @xmath7 , and let @xmath126 be a minimum @xmath2-tuple dominating set in @xmath1 of size @xmath21 .",
    "we denote @xmath127 , i.e. @xmath128 and @xmath129 .",
    "assume to the contrary that @xmath130 , thus @xmath131 .    since @xmath126 is @xmath2-tuple dominating set , each vertex of @xmath31 is adjacent to at least @xmath2 vertices of @xmath126 .",
    "hence the number of edges between @xmath31 and @xmath132 is as follows : @xmath133 now , every vertex of @xmath134 is adjacent to at most @xmath2 vertices of @xmath0 , because @xmath0 is a @xmath2-limited packing set .",
    "therefore , the number of edges between @xmath134 and @xmath135 satisfies @xmath136 we obtain @xmath137 i.e. @xmath138 . by eliminating the edges between @xmath31 and @xmath134 , we conclude that @xmath139    now , let us consider an arbitrary vertex @xmath140 and denote @xmath141 . since @xmath128 is a @xmath2-limited packing set",
    ", we obtain @xmath142 , and hence @xmath143 . on the other hand",
    ", @xmath129 is @xmath2-tuple dominating set , so @xmath144 .",
    "therefore , @xmath145 .",
    "thus , @xmath146 for any vertex @xmath140 .",
    "we obtain , @xmath147 a contradiction .",
    "we conclude that @xmath148 .",
    "notice that it is possible to have @xmath149 in the statement of theorem [ th2 ] , which is not covered by theorem [ th1 ] .",
    "then @xmath114 , which implies the graph is regular . however , @xmath150 for @xmath151 . in non - regular graphs , @xmath152 , and @xmath153",
    "to satisfy the conditions of theorem [ th1 ] as well ."
  ],
  "abstract_text": [
    "<S> we consider ( closed neighbourhood ) packings and their generalization in graphs . </S>",
    "<S> a vertex set @xmath0 in a graph @xmath1 is a _ @xmath2-limited packing _ if for any vertex @xmath3 , @xmath4 \\cap x\\right| \\le k , $ ] where @xmath5 $ ] is the closed neighbourhood of @xmath6 . </S>",
    "<S> the _ </S>",
    "<S> @xmath2-limited packing number _ @xmath7 of a graph @xmath1 is the largest size of a @xmath2-limited packing in @xmath1 . </S>",
    "<S> limited packing problems can be considered as secure facility location problems in networks . in this paper </S>",
    "<S> , we develop a new probabilistic approach to limited packings in graphs , resulting in lower bounds for the @xmath2-limited packing number and a randomized algorithm to find @xmath2-limited packings satisfying the bounds . </S>",
    "<S> in particular , we prove that for any graph @xmath1 of order @xmath8 with maximum vertex degree @xmath9 , @xmath10{\\pmatrix{\\delta \\cr k } ( \\delta + 1 ) } } .\\ ] ] the problem of finding a maximum size @xmath2-limited packing is known to be @xmath11-complete even in split or bipartite graphs .    </S>",
    "<S> _ keywords : _ k - limited packings ; the probabilistic method ; lower and upper bounds ; randomized algorithm </S>"
  ]
}