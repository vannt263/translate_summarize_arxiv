{
  "article_text": [
    "the majority of the algorithms used for astrophysical fluid flow are first developed and described in journals devoted to applied math .",
    "traditionally , astrophysics students are not exposed to these journals in their coursework , and their different target audience makes it difficult for a new astrophysics graduate student to come up to speed on the nuances of the methods . furthermore , often the goals of publicly - available production hydrodynamics codes , e.g. flash  @xcite or castro  @xcite , are not aligned with the needs of a teaching code . in particular , performance and breadth of options",
    "are favored over simplicity and clarity .",
    "the best way to learn computational methods for hydrodynamics is to code them up yourself , or to make _ substantial _ modifications to the internals of existing code . for the latter",
    ", it helps to have a simple code as a starting point .",
    "here we describe pyro  ( short for _",
    "py_thon hyd_ro _ ) .",
    "pyro  provides solvers for :    * linear advection * compressible hydrodynamics * elliptic pdes via multigrid * implicit diffusion * incompressible hydrodynamics    all solvers are 2-d and second - order accurate in space and time .",
    "we chose 2-d because some of the key design issues in writing a solver are not present in the simpler 1-d algorithms . furthermore",
    ", 2-d offers sufficient complexity that the transition to 3-d is then straightforward for a student .",
    "finally , 2-d allows for an exploration of grid effects and instabilities in the solver that 1-d does not allow .",
    "while there is a large variety of different methods for each of these systems of equations , we pick a single method representative of those used in astrophysics and implement it .",
    "given the choice between clarity and performance , we take clarity .",
    "variations and enhancements are left as exercises for students .    when solving a system of pdes , continuous derivatives are replaced by their discretized counterparts , either by making reference to an underlying grid , or by using a collection of particles to represent the functional distribution .",
    "within astrophysics , both grid base and particle - base methods are popular , and each has their own strengths and weaknesses ( see e.g.  @xcite and references therein ) .",
    "we focus here on structured grids  logically cartesian grids where any zone can be references by a single integer in each dimension .",
    "structured grids are popular because the geometries of our domains are generally not complex , and because structured grids can make good use of modern cache - based architectures . both finite - difference and finite - volume methods are structured - grid discretizations popular in astrophysics .",
    "a finite - volume method represents the data as an average within a volume ( or zone ) while a finite - difference grid stores the function value at a specific point .",
    "these differences arise from whether we choose to work with the integral form ( finite - volume ) or differential form ( finite - difference ) of our system of equations .",
    "we note that a cell - centered finite - difference grid is equivalent to a finite - volume grid to second - order in @xmath0 .",
    "we choose the finite - volume grid here , and use the convention that zone centers are indicated by an integer , @xmath1 , while the interfaces are marked by a half - integer ( @xmath2 on the left and @xmath3 on the right ) .",
    "figure  [ fig : grids ] illustrates the grid in 1-d .",
    "there are a number of excellent books that explain the basic theory of numerical solution of pdes , like @xcite for finite - volume methods and @xcite for multigrid , but students also need hands - on experience , to experiment , break , and tweak the algorithms .",
    "little details , like the number of ghost cells needed for different parts of the algorithm are often not obvious to new students , so a basic starting platform from which they can build on provides a good introduction .",
    "pyro  is written to help fill this need .",
    "pyro  is freely - available at    .... http://bender.astro.sunysb.edu/hydro_by_example/ ....    the core algorithms implemented in pyro",
    "are not new  the new part of pyro  is the focus on teaching the methods to the next generation of students through a clean , robust implementation and hands - on activities . the purpose of this paper is to give an overview of the algorithms pyro  provides , show some results from the various test problems , demonstrating the validity of the methods we implement , and provide ideas for extensions to help new students to the field build their understanding .",
    "this paper is complemented by detailed notes describing the derivation and implementation of the various methods , available on the pyro  website , and , of course , the freely - available source code itself .",
    "python provides an attractive platform for quickly testing out different ideas .",
    "it is easy to use , freely - available , and with the numpy  package , a powerful language for manipulating arrays of data .",
    "however , being an interpreted language , the best performance is attained when you allow numpy  to work on entire arrays of data instead of explicitly looping over the individual elements .",
    "there are some instances when the numpy  array notation can look cumbersome , and hide from simple inspection the differencing being done .",
    "for example , consider constructing a second - derivative as : @xmath4 if we have a numpy  array a , with appropriate ghost cells , and use the integers lo and hi to refer to the first and last valid cells , then we can write this in slice - notation as :    .... d2a_dx2[lo : hi+1 ] = a[lo+1:hi+2 ] - \\                 2.0*a[lo   : hi+1 ] + \\                     a[lo-1:hi ] d2a_dx2 [ : ] = d2a_dx2[:]/dx**2 ....    this is efficient in python , but makes the underlying index notation we are used to seeing in papers hidden .",
    "for more complex constructions , with nonlinear switches ( e.g.  if conditions ) , the numpy  form can be complex . to strike the right balance in terms of clarity and use of numpy s advanced features , we implement some kernels in fortran , using f2py to interface with python . wherever fortran is used , we enforce the following design rule : the fortran functions must be completely self - contained , with all information coming through the interface .",
    "no external dependencies are allowed .",
    "each pyro  module will have ( at most ) a single fortran file and can be compiled into a library via a single f2py command line invocation .",
    "there are two fundamental classes in pyro  that manage the data .",
    "the grid2d class describes the grid , providing the basic coordinate information and the ccdata2d class describes the data that lives on the grid . building",
    "a ccdata2d object takes a grid2d object at initialization and has methods to register variables that live on the grid .",
    "each variable can have its own boundary condition types and methods exist for getting pointers to a single variable , filling ghost cells , restricting and prolonging a data to a new grid ( used by the multigrid solver ) , printing data to the screen ( useful only for small grids ) , and writing the data to disk .",
    "each solver is given its own directory , with problems/ and tests/ sub - directories .",
    "the former holds the initial condition routines and default parameters for each of the problems known to that solver .",
    "the latter stores benchmark output and is used for the built - in regression testing .    [ cols=\"<,<,<\",options=\"header \" , ]     one of the concepts that comes out of the code is how similar the solution methodology is for the different pde systems .",
    "the grid requirements / data locations are the same , the boundary conditions types are analogous , and even the overall flowchart of the main driver is the same . for all time - dependent solvers ( excepting multigrid ) the basic flowchart is :    * parse runtime parameters * setup the grid * set the initial conditions for the data on the grid * do any necessary pre - evolution initialization * evolve while @xmath5 or @xmath6 : * * fill boundary conditions * * get the timestep * * evolve for a single timestep * * t = t + dt ; n = n + 1 * * output * * visualization    this allows us to have a single driver for all the solvers .",
    "pyro  is run as :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ./pyro.py [ _ options _ ] _ solver _ _ problem _ _ infile _ [ _ runtime - options _ ] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    where _ solver _ is one of advection , compressible , diffusion , or incompressible .",
    "the _ problem _ gives the name of the problem whose initial conditions we use ",
    "these vary by solver ( see table  [ tab : problems ] ) .",
    "finally the _ infile _ overrides any default runtime parameters for the run .",
    "runtime parameters are defined both in the main pyro  directory and for each solver and problem in plain text files that are parsed at runtime .",
    "optionally , runtime parameters defaults can also be overridden at the end of the commandline .",
    "i / o is done simply using the python pickle module on the main data object .",
    "finally , by default , runtime visualization is enabled using the matplotlib plotting library .",
    "the output is updated each timestep to allow students to see the progression of their simulations as they run .",
    "this is very useful for seeing the effects of boundary conditions and different choices of initial conditions as well as for chasing down bugs .",
    "astronomy students benefit from learning basic `` safe practices '' from software engineering  @xcite .",
    "pyro  facilitates this in three ways .",
    "first , support for regression testing is built in . in its simplest form , regression testing means comparing the current solution to a known benchmark solution , and looking for differences .",
    "when pyro  is run with the make_benchmark option , it will automatically store a benchmark solution for the problem in the solver s tests/ sub - directory .",
    "when run with the compare_benchmark option , the current results will be compared zone - by - zone with the stored benchmark , and any differences will be reported .",
    "second , many of the component modules that make up pyro  have their own unit tests .",
    "finally , as is increasingly the case in astrophysics ( see e.g.  the castro  code , @xcite ) it is obtained via a distributed version control system ( git in our case ) , immediately immersing students in version control  each student s clone of the pyro  repo acts as its own git repo that they can interact with directly .",
    "here we give an overview of the methods pyro  implements and show some verification tests .",
    "the linear advection equation represents the simplest hyperbolic pde : @xmath7 the solution is trivial  any initial function profile simply advects unchanged with a velocity @xmath8 .",
    "this make advection an excellent test bed of numerical methods .",
    "advection also provides a good path toward understanding how to extend to multi - dimensions .",
    "there are two approaches here : dimensional splitting and unsplit reconstruction . in dimensional",
    "splitting , the fluxes at the interfaces are constructed without any knowledge of the flow in the transverse direction .",
    "each directional update operates on the state left behind by the previous update and the order of directions is alternated to give second - order accuracy  @xcite .",
    "this is the easiest way to extend from one - dimension to multi - dimensions , because you can use the 1-d methodology largely unchanged .",
    "however , split methods do not preserve symmetries as well ( see , e.g.  @xcite ) . in an unsplit reconstruction",
    ", each interface state explicitly sees the change carried in the transverse direction , and the state is updated by the fluxes in each direction all at once .",
    "we follow the unsplit ctu method  @xcite for advection .",
    "we summarize this method in a little detail below because the same procedure comes into play again for our compressible and incompressible solvers .",
    "the basic idea is simple  taylor expand in space and time to get the time - centered interface state and use this to evaluate the fluxes through the interfaces .",
    "for example , the left state at the @xmath9 interface is built starting with the data in cell @xmath10 as @xmath11 the last term here is the transverse flux difference and captures the change in @xmath12 in the transverse direction . without this term , if we advect diagonally , we would not ` see ' the upwind state .",
    "the @xmath13 term is the limited slope of @xmath12limiting ensures that we do nt have any over- or under - shoots when we advect ( although see @xcite for details about limiting in multi - dimensions ) .",
    "a number of different choices of limiters are described in the literature .",
    "we use the 4th - order mc limiter from @xcite .",
    "we rewrite this as : @xmath14 where the @xmath15 state represents the prediction to the interface without regard to the transverse term .",
    "the basic idea of the ctu method is to first construct these ` hat ' states on all interfaces , then solve the riemann problem at each interface to find the ` transverse ' state , @xmath16this is the unique state on each interface .",
    "so far however , we did not consider the transverse term in eq .",
    "[ eq : advstate ] .",
    "this transverse term is constructed using the @xmath17 edge states and added to the @xmath18 states giving us the full interface state @xmath19 .",
    "this is illustrated graphically in figure  [ fig : unsplitstates ] .",
    "a similar reconstruction gives the predicted state just to the right of the interface , @xmath20 , building from the data in the @xmath21 cell .",
    "the final state on the interface , @xmath22 is attained by calling the riemann solver again .",
    "for advection , the riemann solve is simply upwinding , but for other systems it is more complex .",
    "the states in the @xmath23-direction are computed analogously .",
    "this then allows us to increment our solution : @xmath24    the timestep constraint is simply @xmath25 where @xmath26 is the cfl number .          the simplest test is to advect a smooth distribution diagonally across our grid for one period .",
    "since the profile should be unchanged , we can define the error simply as the difference between the final and initial profile , and look at the norm of the error to assess the convergence . a smooth problem is chosen so as to reduce the effects of the limiters  we choose a gaussian : @xmath27}\\ ] ] where @xmath28 are the coordinates of the center of the domain and @xmath29 is a width parameter . we choose @xmath30 .",
    "figure  [ fig : advect ] shows the solution after 1 period with @xmath31 , a cfl number of 0.8 , and for one resolution ( @xmath32 ) along with a convergence plot of the error as a function of resolution , showing that we are nearly second - order accurate .",
    "the departure from perfect second - order convergence arises from the use of limiters .      with this basic solver , there are a number of exercises / extensions that students can perform to improve their understanding :    * compare convergence with limiting to no limiting .",
    "* how does the solution change if the transverse flux difference is left out ? * implement a dimensionally split version and compare to the unsplit .",
    "* convert the solver to the inviscid burger s equation ( @xmath33 ) and look at shocks and rarefactions .",
    "compressible hydrodynamics is described by the euler equations : @xmath34 here , @xmath35 is the density , @xmath36 is the velocity vector , @xmath37 is the pressure , and @xmath38 is the total specific energy , related to the specific internal energy , @xmath39 , via @xmath40 we include a gravitational source , with @xmath41 the constant gravitational acceleration .",
    "we need an equation of state to close the system .",
    "we assume a gamma - law : @xmath42    the solution procedure we adopt is the unsplit piecewise - linear method described in @xcite . this same algorithm is also one of the hydrodynamics options in the castro  code  @xcite . while formally less accurate than the widely - used piecewise parabolic method , ppm  @xcite ,",
    "piecewise linear reconstruction is more approachable for new students , and upgrading to ppm is straightforward once the details are understood ( see @xcite for a good discussion ) .",
    "the algorithm follows the advection update closely .",
    "again , interface states are constructed by doing a taylor expansion to the half - time , interface state .",
    "now however , the normal part of the prediction is done in terms of the primitive variables , @xmath43 , instead of the conserved variables .",
    "a characteristic projection is done on the state and only the jumps moving toward the interface are added to the interface state .",
    "these preliminary interface states are converted back to the conserved variables and the transverse flux difference is added .",
    "an initial construction of the normal interface states is used to construct the fluxes for the transverse difference .",
    "our implementation follows @xcite .",
    "we also include the flattening of the profiles near shocks and artificial viscosity from that paper .",
    "one confusing aspect of these methods for new students is the characteristic projection .",
    "writing the primitive variable system as @xmath44 , the jump in a primitive variable , @xmath45 can be expressed in terms of the left and right eigenvectors , @xmath46 and @xmath47 of @xmath29 as : @xmath48 @xcite provides an excellent introduction to this concept . typically in this sum",
    ", we only include the terms where the waves are moving toward the interface of interest ( determined by the sign of the eigenvalues ) .",
    "most papers write only the analytic result of multiplying out @xmath49 ( e.g.  see the @xmath50 s in eqs .",
    "3.6 , 3.7 in @xcite ) . for clarity , and to enable exploration , in pyro",
    ", we explicitly construct the left and right eigenvectors and multiply them through in the code , to illustrate exactly what the solution procedure is doing .",
    "the riemann problem for compressible hydrodynamics is considerably more complex than linear advection .",
    "there are 3 waves that result from the system ( corresponding to the @xmath51 , @xmath52 , and @xmath53 eigenvalues of @xmath29 ) , and each wave , @xmath54 , carries a jump in the state proportional to @xmath55 .",
    "the solution to the riemann problem looks at wave structure to determine the solution in - between the various waves and evaluates the wavespeeds to determine which state is on the interface .",
    "this state is then used to construct the fluxes through the interface . because of the expense of the full riemann solve , approximate riemann solvers are often used .",
    "we use the riemann problem described in @xcite , and alternately the hllc method from @xcite .",
    "sod problem with 128 zones compared to the exact solution at t = 0.2 .",
    "we show a slice through the center of the domain along @xmath56 .",
    "this example was run with : ./pyro.py compressible sod inputs.sod.x ]    the sod shock tube  @xcite illustrates all three types of hydrodynamic waves : a rarefaction , contact , and shock wave .",
    "this problem is a standard test of hydrodynamics solvers because exact solutions are possible .",
    "we compare to the result from the exact riemann solver in @xcite .",
    "figure  [ fig : sod ] shows the results from a simulation on a @xmath57 grid with the initial discontinuity in the @xmath56-direction .",
    "the cfl number was 0.8 and @xmath58 .",
    "the shock is very steep , the contact is smeared out a bit ( there is no self - steepening mechanism for contacts , so this is commonly seen ) .",
    "overall the solution matches the analytic profile well .",
    "angle - averaged profiles for the sedov problem for a @xmath59 simulation at @xmath60 .",
    "the solid line is the exact solution . ]",
    "the sedov - taylor blast wave is a good test of the symmetry - preservation of the method .",
    "a large amount of energy , @xmath61 , is placed at a point in a uniform medium .",
    "the blast wave should stay circular ( in 2-d ) , with the density evacuating and the pressure reaching a constant at the center .",
    "an analytic solution was worked out for this problem @xcite .",
    "a good description of the solution is given in @xcite  we compare to the solution from that paper .",
    "a difficulty with the sedov problem on a 2-d cartesian grid is that the point that the energy is deposited to will be square on the grid , leading to some grid effects .",
    "we take the standard approach of converting the energy into a pressure contained in a circular region : @xmath62 to further reduce grid effects , we sub - divide each zone into @xmath63 sub - zones and test whether each sub - zone falls inside the perturbed radius , and average over the sub - zones to get a single pressure for the zone .",
    "we choose @xmath64 , @xmath65 , and @xmath58 .",
    "we run on a @xmath59 grid with a cfl number of 0.8 .",
    "figure  [ fig : sedov2d ] shows the various fluid quantities .",
    "we see a nice circular blast wave , but some grid effects are seen aligned with the coordinate axes . the angle - averaged data ( profiles as a function of radius ) are shown in figure  [ fig : sedov ] .",
    "we see very good agreement with the exact solution .",
    "the rayleigh - taylor instability places a dense fluid over a lighter fluid in a gravitational field .",
    "given an initial perturbation , the dense fluid drops down and the lighter fluid buoyantly rises upward .",
    "our initial conditions are : @xmath66 the pressure is given by hydrostatic equilibrium , which for constant @xmath41 integrates easily giving : @xmath67 the perturbation is given in the @xmath23-velocity : @xmath68        periodic boundary conditions are used in the horizontal direction .",
    "we use hydrostatic boundary conditions in the vertical direction .",
    "this is one example of where the treatment of the boundary is solver - dependent , so the compressible solver provides a method that is called from the main mesh module to extend the functionality of the boundary filling .",
    "for this boundary condition , the density and @xmath56- and @xmath23-momenta are simply copied from the last valid zone inside the domain ( a zero - gradient ) .",
    "the energy is filled in the ghost cells by first constructing the pressure in the zone just inside the boundary and then using hydrostatic equilibrium to integrate this pressure into the ghost cells .",
    "since the density and gravity are constant , this integration is trivial .",
    "this pressure is then used to construct the total energy in the ghost cells .",
    "this method is similar to that from @xcite .    figure  [ fig : rt ] shows the results for a @xmath69 zone grid with a cfl of 0.8 .",
    "we see that this single mode rt is very symmetric , and in good agreement with the results shown in @xcite .      after understanding the basic algorithm",
    ", there are a number of extensions that can be done to build a deeper understanding of the method .",
    "* compare the solutions with and without limiting .",
    "* limit on the characteristic variables instead of the primitive variables ( see @xcite ) .",
    "* add passively advected species to the solver .",
    "* add an external heating term to the equations .",
    "* add 2-d axisymmetric coordinates ( r - z ) to the solver . * swap the piecewise linear reconstruction for piecewise parabolic ( ppm ) .",
    "* add different riemann solvers to the algorithm .",
    "l2 norm of the error for the multigrid test problem , showing second - order accuracy .",
    "this example was run with the mg_test.py script in the multigrid module . ]",
    "multigrid is a popular technique for solving elliptic problems in simulation codes ( a widely - used example is the poisson problem for the gravitational potential ) .",
    "the pyro  multigrid solver solves a constant - coefficient helmholtz equation of the form : @xmath70 the choice @xmath71 gives the classic poisson equation .",
    "the text of @xcite provides an excellent introduction to multigrid techniques .",
    "most of it , however , is geared toward finite - difference grids , where solution values exist explicitly on the boundary . for",
    "cell - centered / finite - volume grids ( see figure  [ fig : grids ] ) , the implementation of the restriction and prolongation operations differs , as does the enforcement of the boundary conditions .",
    "in fact , boundary conditions for cell - centered grids is probably the most common place that mistakes are made .",
    "a good way to test this all is to get pure relaxation working first , and converging to second - order .",
    "multigrid simply accelerates the convergence of the relaxation , so if the relaxation routine is not right , then there is no point going further .",
    "pyro  provides an easy test bed for experimenting with these ideas .    to make the code simple , we restrict ourselves to pure v - cycles and solve on square domains with the number of zones a power of 2 .",
    "red - black gauss - seidel relaxation is done .",
    "the restriction operation is simply averaging the four fine cells into the corresponding coarse cell . for prolongation , we create centered - slopes in each direction centered for every coarse cell and use a bilinear interpolation ( without the cross @xmath72 term ) to fill each of the four finer cells .",
    "furthermore , we only support homogeneous dirichlet or neumann boundary conditions .",
    "the grid is coarsened until we get down to a @xmath73 grid , at which point the residual equation is solved by pure relaxation , doing , by default , 50 smoothing iterations on the @xmath73 grid .",
    "for homogeneous dirichlet boundary conditions , the goal is to have the solution be 0 exactly at the interface of the zone touching the domain boundary . consider the left boundary ( see figure  [ fig : grids ] ) : we want @xmath74 .",
    "the standard approach ( to second - order accuracy ) is to average the adjacent cells to that interface , and set this to zero , giving : @xmath75 a similar construction is done at the upper boundary in @xmath56 , and for the boundaries in @xmath23 .",
    "neumann bcs are done in a similar fashion  we construct a difference that is centered at the interface , so to second - order , we have @xmath76 inhomogeneous boundary conditions would be treated similarly , but now the boundary value itself will appear in the expression for the ghost cell .      to test the multigrid solver ,",
    "we solve a poisson problem with a known analytic solution .",
    "this example comes from @xcite : @xmath77\\end{aligned}\\ ] ] solved on a unit square with @xmath78 on the boundary .",
    "the analytic solution in this case is : @xmath79 we continue to cycle until the relative error ( l2 norm of the residual / l2 norm of the source ) is less than @xmath80 .",
    "figure  [ fig : mg ] shows l2-norm of the absolute error of our solution compared to the analytic solution for a variety of resolutions .",
    "we see perfect second - order convergence .      * instead of doing multigrid ,",
    "run with smoothing only and look at how long it takes to converge .",
    "* implement inhomogeneous bcs .",
    "* experiment with different bottom solvers .",
    "many phenomena can be described by the diffusion equation : @xmath81 including thermal diffusion / conduction and viscosity . here , @xmath82 is the diffusion coefficient , which we will take to be constant , and @xmath83 is the scalar quantity being diffused .",
    "the diffusion solver uses multigrid to solve an implicit crank - nicolson ( centered in time ) discretization of the diffusion equation : @xmath84 grouping all the @xmath85 terms on the left , we find : @xmath86 this is in the form of a constant - coefficient helmholtz equation , eq .",
    "[ eq : helmholtz ] , with @xmath87 an update over a single timestep is achieved by simply calling the multigrid solver . since this",
    "solver is implicit , there is no timestep limit for stability , but accuracy will of course be better with a smaller timestep . for this solver ,",
    "the cfl number in the driver , @xmath88 , is based on the explicit timestep limit : @xmath89 where @xmath90 is needed for a standard explicit discretization of the diffusion equation .",
    "radial profile of the diffusion of a gaussian shown every @xmath91 starting with @xmath92 , using @xmath93 and a @xmath59 grid .",
    "the analytic solution is shown as the gray line .",
    "we see excellent agreement .",
    "this example was run with : ./pyro.py diffusion gaussian inputs.gaussian . ]",
    "an initial gaussian profile remains a gaussian under the action of diffusion , with the amplitude decreasing and width increasing .",
    "this allows us to test the diffusion solver against the analytic solution ( see , e.g.  @xcite ) : @xmath94/k(t+t_0 ) } + \\phi_1\\ ] ] for the initial conditions , we take @xmath95 , @xmath96 , and @xmath97 .",
    "we run with @xmath98 .",
    "figure  [ fig : diff ] shows the angle - averaged radial profile at several different times together with the analytic solution for a run on a @xmath59 grid with @xmath93 .",
    "we see excellent agreement .",
    "there are a number of straightforward exercises and extensions    * experiment with different - sized timesteps and initially discontinuous data .",
    "* implement a non - constant diffusion coefficient solver . *",
    "compare crank - nicolson to backwards euler .",
    "the equations of incompressible flow are : @xmath99 incompressible flow adds a additional complexity to our systems  now an elliptic constraint is present on the velocity field that must also be satisfied at each timestep .",
    "it is also an important stepping - stone toward understanding low mach number methods , used for both smallscale combustion @xcite and stratified flows @xcite .",
    "pyro s incompressible solver follows a second - order projection methodology ( see , @xcite ) .",
    "a projection method relies on the fact that any vector field , @xmath100 can be decomposed into a divergence - free part , @xmath101 , and the gradient of a scalar : @xmath102 the idea is that we first use the same unsplit advection techniques as with linear advection and compressible flow to update @xmath36 to the new time , giving a velocity field @xmath100 that does not yet satisfy the divergence constraint . by taking the divergence of eq .",
    "[ eq : decomp ] , we get a poisson equation for the scalar @xmath83 needed to correct our velocity field and make it divergence free : @xmath103 this is then solved using multigrid , resulting in the new divergence - free velocity field .",
    "there are a lot of variations on this idea .",
    "first , approximate projections make use of discretizations of the divergence , @xmath104 , and gradient , @xmath105 operators that together are not the same as the discretized laplacian , @xmath106 ( i.e. @xmath107 ) .",
    "this approximation however can result in a more robust discretization .",
    "finally , some methods put @xmath83 at the nodes of the cells while others make it cell - centered .",
    "we choose the latter here , as a cell - centered discretization allows us to reuse our existing multigrid solver .",
    "an additional complexity is that a projection is also done on the predicted half - time , interface velocities that are used to construct the flux  this is needed for stability to cfl numbers of unity  @xcite .",
    "the implementation in pyro  is pieced together from a variety of sources .",
    "@xcite describes a cell - centered method , but with an exact projection ( with a larger , decoupled stencil ) .",
    "@xcite describes an approximate projection method , but with a node - centered final projection .",
    "we follow this paper closely up until the projection .",
    "we then do the cell - centered projection described in @xcite ( and martin s phd thesis ) .",
    "all of these method are largely alike , aside from how the discretization of the final projection is handled .",
    "the advective part follows the ctu methodology from the advection solver very closely ( but the riemann solver is now that of burger s equation instead of the linear advection equation ) .",
    "convergence of the incompressible solver .",
    "these tests were run with ./pyro.py incompressible converge inputs.converge.32 , and then with the inputs.converge.64 and inputs.converge.128 inputs files . ]",
    "a standard convergence test for incompressible flow was described by @xcite . there , the initial velocity field is : @xmath108 and the solution at a later time is @xmath109 by comparing the numerical solution to the analytic solution , we can compute the error .",
    "we use a fixed @xmath110 and run at several resolutions .",
    "figure  [ fig : incomp_converge ] shows the results .",
    "we see nearly second - order convergence  the departure is due to the use of the limiters .      * add viscosity to the system .",
    "this will require doing 2 parabolic solves ( one for each velocity component ) .",
    "these solves will look like the diffusion operation , and will update the provisional velocity field .",
    "* switch to a variable density system  @xcite .",
    "this will require adding a mass continuity equation that is advected and switching the projections to a variable - coefficient form ( since @xmath35 now enters ) .",
    "pyro  provides the building blocks that together make up a modern astrophysical simulation code . by providing simple solvers in a python environment ,",
    "students are encouraged to experiment , helping them learn .",
    "we showed that the core solvers perform as expected and motivated some simple ( and some not - so - simple ) extensions for each of the solvers to help students learn .",
    "the core algorithms in pyro  are mature and provide a good basis for new students to learn the ins - and - outs of computational hydrodynamics",
    ". the code will continue to be maintained and keep up with new developments in python and software engineering , but we do not expect to add new intricacies to the existing solvers .",
    "the software engineering aspects built into pyro  provide a nice laboratory for learning about version control , regression and unit testing , and verification and validation .",
    "the code is freely available , and this paper together with the code , and the detailed derivations on the pyro  website provide the guidance for students .",
    "the code and online notes are written for students to learn on their own , or as part of a class .",
    "furthermore , a mailing list is provided to support users of the code .",
    "major changes in the future will focus on new systems of pdes .",
    "we envision solvers for mhd , radiation hydrodynamcs in the flux - limited diffusion approximation , and some examples of multiphysics ( like diffusion + reaction systems and the viscous burger s equation ) .",
    "these can be integrated into the same framework present now and will help introduce new ideas to the students .",
    "we thank ann almgren , john bell , alan calder , chris malone , and andy nonaka for many helpful discussions on hydrodynamics and/or this paper .",
    "pyro  was developed over many years as a tool to learn these methods for my own research before incorporating them into production codes .",
    "the original version of pyro  benefited greatly from the inviting environment at lulu carpenter s .",
    "some support along the way was provided by doe office of nuclear physics grant doe de - fg02 - 06er41448 and nsf grant ast-1211563 .",
    "+      , o. , moore , b. , stadel , j. , potter , d. , miniati , f. , read , j. , mayer , l. , gawryszczak , a. , kravtsov , a. , nordlund ,  . , pearce , f. , quilis , v. , rudd , d. , springel , v. , stone , j. , tasker , e. , teyssier , r. , wadsley , j. , walder , r. , sep .",
    "fundamental differences between sph and grid methods .",
    "monthly notices of the royal astronomical society 380 , 963978 .    , a.  s. , beckner , v.  e. , bell , j.  b. , day , m.  s. , howell , l.  h. , joggerst , c.  c. , lijewski , m.  j. , nonaka , a. , singer , m. , zingale , m. , jun . 2010 .",
    "castro : a new compressible astrophysical solver .",
    "i. hydrodynamics and self - gravity .",
    "astrophys j 715 , 12211238 .",
    "bell , j.  b. , colella , p. , howell , l.  h. , jun . 1991 .",
    "an efficient second - order projection method for viscous incompressible flow . in : proceedings of the tenth aiaa computational fluid dynamics conference .",
    "aiaa , pp .",
    "360367 , see also : https://seesar.lbl.gov/anag/publications/colella/a_2_10.pdf .                    , b. , olson , k. , ricker , p. , timmes , f.  x. , zingale , m. , lamb , d.  q. , macneice , p. , rosner , r. , truran , j.  w. , tufo , h. , nov .",
    "flash : an adaptive mesh hydrodynamics code for modeling astrophysical thermonuclear flashes .",
    "astrophysical journal supplement 131 , 273334 .    , d.  a. , falle , s.  a.  e.  g. , goodwin , s.  p. , jun",
    "convergence of amr and sph simulations - i. hydrodynamical resolution and convergence tests . monthly notices of the royal astronomical society 432 , 711727",
    ".              nonaka , a. , almgren , a.  s. , bell , j.  b. , lijewski , m.  j. , malone , c.  m. , zingale , m.  . ,",
    "maestro : an adaptive low mach number hydrodynamics algorithm for stellar flows .",
    "astrophysical journal supplement 188 , 358383 .                    , g. , aruliah , d.  a. , titus brown , c. , chue hong , n.  p. , davis , m. , guy , r.  t. , haddock , s.  h.  d. , huff , k. , mitchell , i.  m. , plumbley , m. , waugh , b. , white , e.  p. , wilson , p. , sep .",
    "best practices for scientific computing .",
    "arxiv e - prints .",
    ", m. , dursi , l.  j. , zuhone , j. , calder , a.  c. , fryxell , b. , plewa , t. , truran , j.  w. , caceres , a. , olson , k. , ricker , p.  m. , riley , k. , rosner , r. , siegel , a. , timmes , f.  x. , vladimirova , n. , dec . 2002 .",
    "mapping initial hydrostatic models in godunov codes .",
    "astrophys j suppl s 143 , 539565 ."
  ],
  "abstract_text": [
    "<S> we describe pyro : a simple , freely - available code to aid students in learning the computational hydrodynamics methods widely used in astrophysics . </S>",
    "<S> pyro  is written with simplicity and learning in mind and intended to allow students to experiment with various methods popular in the field , including those for advection , compressible and incompressible hydrodynamics , multigrid , and diffusion in a finite - volume framework . </S>",
    "<S> we show some of the test problems from pyro , describe its design philosophy , and suggest extensions for students to build their understanding of these methods .    </S>",
    "<S> hydrodynamics , methods : numerical </S>"
  ]
}