{
  "article_text": [
    "representing and reasoning about preferences is an area of increasing interest in theoretical and applied ai . in many real life problems",
    ", we have both hard and soft constraints , as well as qualitative conditional preferences . for example , in a product configuration problem , the producer may have hard and soft constraints , while the user has a set of conditional preferences . until now",
    ", there has been no single formalism which allows all these different kinds of information to be specified efficiently and reasoned with effectively .",
    "for example , soft constraint solvers @xcite are most suited for reasoning about the hard and soft constraints , while cp - nets  @xcite are most suited for representing qualitative conditional preference statements . in this paper , we exploit a connection between these two approaches , and define a framework based on both cp - nets and soft constraints which can efficiently handle both constraints and preferences .    soft constraints @xcite are one of the main methods for dealing with preferences in constraint optimization .",
    "each assignment to the variables of a constraint is annotated with a level of its desirability , and the desirability of a complete assignment is computed by a combination operator applied to the `` local '' preference values .",
    "whilst soft constraints are very expressive , and have a powerful computational machinery , they are not good at modeling and solving the sort of conditional preference statements that occur in the real world . moreover , soft constraints are based on _ quantitative _ measures of preference , which tends to make preference elicitation more difficult .",
    "qualitative user preferences have been widely studied in decision - theoretic ai  @xcite .",
    "of particular interest are cp - nets  @xcite .",
    "these model statements of qualitative and conditional preference such as  i prefer a red dress to a yellow dress \" , or `` if the car is convertible , i prefer a soft top to a hard top '' .",
    "these are interpreted under the _ ceteris paribus _ ( that is , `` all else being equal '' ) assumption .",
    "preference elicitation in such a framework is intuitive , independent of the problem constraints , and suitable for naive users .",
    "however , the achilles heel of cp - nets and other sophisticated qualitative preference models  @xcite is the complexity of reasoning with them  @xcite .",
    "motivated by a product configuration application  @xcite , we have developed a framework to reason simultaneously about qualitative conditional preference statements and hard and soft constraints . in product configuration ,",
    "the producer has hard ( e.g. , component compatibility ) and soft ( e.g. , supply time ) constraints , while the customer has preferences over the product features .",
    "we first investigate the complexity of reasoning about qualitative preference statements , addressing in particular preferential consistency . to tackle the complexity of preference reasoning ,",
    "we then introduce two approximation schemes based on soft constraints .    to the best of our knowledge",
    ", this work provides the first connection between the cp - nets and soft constraints machinery .",
    "in addition , for product configuration problems or any problem with both hard and soft quantitative constraints as well as qualitative conditional preferences , this framework lets us treat the three kinds of information in a unifying environment .",
    "finally , we compare the two approximations in terms of both expressivity and complexity .",
    "there are many formalisms for describing _",
    "soft constraints_. we use the c - semi - ring formalism @xcite , which is equivalent to the valued - csp formalism when total orders are used @xcite , as this generalizes many of the others . in brief , a soft constraint associates each instantiation of its variables with a value from a partially ordered set .",
    "we also supply operations for combining ( @xmath0 ) and comparing ( + ) values .",
    "a semi - ring is a tuple @xmath1 such that : @xmath2 is a set and @xmath3 ; @xmath4 is commutative , associative and @xmath5 is its unit element ; @xmath0 is associative , distributes over @xmath4 , @xmath6 is its unit element and @xmath5 is its absorbing element . a _ c - semi - ring _ is a semi - ring @xmath7 in which @xmath4 is idempotent , @xmath6 is its absorbing element and @xmath0 is commutative .",
    "let us consider the relation @xmath8 over @xmath2 such that @xmath9 iff @xmath10 .",
    "then @xmath8 is a partial order , @xmath4 and @xmath0 are monotone on @xmath8 , @xmath5 is its minimum and @xmath6 its maximum , @xmath11 is a complete lattice and , for all @xmath12 , @xmath13 . moreover , if @xmath0 is idempotent : @xmath4 distributes over @xmath0 ; @xmath11 is a complete distributive lattice and @xmath0 its glb .",
    "informally , the relation @xmath8 compares semi - ring values and constraints .",
    "when @xmath9 , we say that _ b is better than a_. given a semi - ring @xmath14 , a finite set @xmath15 ( variable domains ) and an ordered set of variables @xmath16 , a _ constraint _ is a pair @xmath17 where @xmath18 and @xmath19 .",
    "a constraint specifies a set of variables , and assigns to each tuple of values of these variables an element of the semi - ring .    a _ soft constraint satisfaction problem _ ( scsp ) is given by a set of soft constraints . for example",
    ", a classical csp is an scsp with the c - semi - ring @xmath20 , a fuzzy csp  @xcite is an scsp with the c - semi - ring @xmath21 ,   max , min , 0 , 1 \\rangle$ ] , and probabilistic and weighted csps are scsps with the c - semi - rings @xmath22 , max , \\times , 0 , 1 \\rangle$ ] and @xmath23 , respectively .",
    "a solution to an scsp is a complete assignment to its variables .",
    "the preference value associated with a solution is obtained by multiplying the preference values of the projections of the solution to each constraint .",
    "one solution is better than another if its preference value is higher in the partial order .",
    "finding an optimal solution for an scsp is an np - complete problem . on the other hand , given two solutions , checking whether one is preferable is easy : we compute the semi - ring values of the two solutions and compare the resulting values .",
    "soft constraints are the main tool for representing and reasoning about preferences in constraint satisfaction problems . however , they require the choice of a semi - ring value for each variable assignment in each constraint .",
    "they are therefore a _ quantitative _ method for expressing preferences . in many applications , it is more natural for users to express preferences via generic qualitative ( usually partial ) preference relations over variable assignments .",
    "for example , it is often more intuitive for the user to say `` i prefer red wine to white wine '' , rather than `` red wine has preference 0.7 and white wine has preference 0.4 '' .",
    "of course , the former statement provides less information , but it does not require careful selection of preference values to maintain consistency . moreover , soft constraints do not naturally represent conditional preferences , as in `` if they serve meat , then i prefer red wine to white wine '' .",
    "it is easy to see that both qualitative statements and conditions are essential ingredients in many applications .",
    "cp - nets  @xcite are a graphical model for compactly representing conditional and qualitative preference relations .",
    "they exploit conditional preferential independence by structuring a user s preferences under the _ ceteris paribus _ assumption . informally , cp - nets are sets of _ conditional ceteris paribus ( cp ) _ preference statements .",
    "for instance , the statement _",
    "`` i prefer red wine to white wine if meat is served . ''",
    "_ asserts that , given two meals that differ _ only _ in the kind of wine served _ and _ both containing meat , the meal with a red wine is preferable to the meal with a white wine .",
    "many philosophers ( see  @xcite for an overview ) and ai researchers  @xcite , have argued that most of our preferences are of this type .",
    "cp - nets bear some similarity to bayesian networks , as both utilize directed acyclic graphs where each node stands for a domain variable , and assume a set of features @xmath24 with finite , discrete domains @xmath25 ( these play the same role as variables in soft constraints ) . during preference elicitation , for each feature @xmath26 ,",
    "the user is asked to specify a set of _ parent _ features @xmath27 that can affect her preferences over the values of @xmath26 .",
    "this information is used to create the graph of the cp - net in which each node @xmath26 has @xmath27 as its immediate predecessors .",
    "given this structural information , the user is asked to explicitly specify her preference over the values of @xmath26 for _ each complete assignment _ on @xmath27 , and this preference is assumed to take the form of total  @xcite or partial  @xcite order over @xmath28 .",
    "these conditional preferences over the values of @xmath26 are annotated with the node @xmath26 in the cp - net .",
    "for example , consider a cp - net with the graph given in figure  [ cpnet ] , and with the preference statements as follows : @xmath29 , @xmath30 , @xmath31 , @xmath32 , @xmath33 , @xmath34 . here",
    ", statement @xmath35 represents the unconditional preference of the user for @xmath36 over @xmath37 , while statement @xmath33 represents that the user prefers @xmath38 to @xmath39 , given that @xmath40 .",
    "several types of queries can be asked about cp - nets .",
    "first , given a cp - net @xmath41 , one might be interested in finding an optimal assignment to the features of @xmath41 . for acyclic cp - nets ,",
    "such a query is answerable in linear time  @xcite .",
    "second , given a cp - net @xmath41 and a pair of complete assignments @xmath42 and @xmath43 , one might be interested in determining whether @xmath44 , i.e.  @xmath42 is preferred to @xmath43 .",
    "unfortunately , this query is np - hard even for acyclic cp - nets  @xcite though some tractable special cases do exist .",
    "given a set of preference statements @xmath45 extracted from a user , we might be interested in testing _",
    "consistency _ of the induced preference relation . in general",
    ", there is no single notion of preferential consistency  @xcite . in  @xcite ,",
    "a cp - net @xmath41 was considered consistent iff the partial ordering @xmath46 induced by @xmath41 is _ asymmetric _ , i.e.  there exist at least one total ordering of the outcomes consistent with @xmath46 . however , in many situations , we can ignore cycles in the preference relation , as long as these do not prevent a rational choice , i.e.  there exist an outcome that is not dominated by any other outcome . in what follows , we refer to this as _",
    "satisfiability_. it is easy to see that satisfiability is strictly weaker than asymmetry , and that asymmetry implies satisfiability .",
    "we will consider two cases : when the set @xmath47 of preference statements induces a cp - net and , more generally , when preferences can take any form ( and may not induce a cp - net ) .",
    "when @xmath45 defines an acyclic cp - net , the partial order induced by @xmath45 is asymmetric  @xcite .",
    "however , for cyclic cp - nets , asymmetry is not guaranteed . in the more general case",
    ", we are given a set @xmath45 of conditional preference statements without any guarantee that they define a cp - net .",
    "let the _ dependence graph _ of @xmath45 be defined similarly to the graphs of cp - nets : the nodes stand for problem features , and a directed arc goes from @xmath48 to @xmath49 iff @xmath45 contains a statement expressing preference on the values of @xmath49 conditioned on the value of @xmath48 .",
    "for example , the set @xmath50 does not induce a cp - net ( the two conditionals are not mutually exclusive ) , and the preference relation induced by @xmath45 is not asymmetric , despite the fact that the dependence graph of @xmath45 is acyclic . note that while asymmetry implies satisfiability , the reverse does not hold in general .",
    "for example , the set @xmath45 above is not asymmetric , but it is satisfiable ( the assignment @xmath51 is undominated ) . given such a satisfiable set of statements , we can prompt the user with one of the undominated assignments without further refinement of its preference relation .",
    "theorem  [ t : hard ] shows that , in general , determining satisfiability of a set of statements is np - complete . on the other hand , even for cp - nets , determining asymmetry is not known to be in np  @xcite .",
    "[ t : hard ] satisfiability of a set of conditional preference statements @xmath45 is np - complete .",
    "* proof : * membership in np is straightforward , as an assignment is a polynomial - size witness that can be checked for non - dominance in time linear in the size of @xmath45 . to show hardness , we reduce 3-sat to our problem : given a 3-cnf formula @xmath52 , for each clause @xmath53 we construct the conditional preference statement : @xmath54 .",
    "this set of conditional preferences is satisfiable iff the original original formula @xmath52 is satisfiable .",
    "@xmath55    while testing satisfiability is hard in general , theorem  [ t : acyclic ] presents a wide class of statement sets that can be tested for satisfiability in polynomial time .",
    "[ t : acyclic ] a set of conditional preference statements @xmath45 , whose dependency graph is acyclic and has bounded node in - degree can be tested for satisfiability in polynomial time .",
    "* proof : * the proof is constructive , and the algorithm is as follows : first , for each feature @xmath56 , we construct a table @xmath57 with an entry for each assignment @xmath58 , where each entry @xmath59 $ ] contains all the values of @xmath60 that are not dominated given @xmath45 and @xmath61 .",
    "subsequently , we remove all the empty entries . for example , let @xmath2 , @xmath62 and @xmath63 be a set of boolean problem features , and let @xmath64 .",
    "the corresponding table will be as follows :    [ cols=\"^,^,^\",options=\"header \" , ]     note that the slo model both preserves information and ensures the cp - condition .",
    "the proof of this is straightforward and is omitted due to lack of space .",
    "the slo model , like the weighted model , is very useful to answer dominance queries as it inherits the linear complexity from its semi - ring structure .",
    "in addition , the sequences of integers show directly the `` goodness '' of an assignment , i.e. where it actually satisfies the preference and where it violates it .      given an acyclic cp - net @xmath41 , let @xmath65 and @xmath66 stand for the corresponding min+ and slo based sc - nets respectively . from the results in the previous section",
    ", we can see that pairs of outcomes ordered by @xmath41 remain ordered the same way by both @xmath65 and @xmath66 . on the other hand ,",
    "pairs of outcomes incomparable in @xmath41 are distributed among the three possibilities ( equal or ordered in one the two ways ) in @xmath65 , while being strictly ordered by @xmath66 .",
    "therefore , the ( total ) preference relation induced by @xmath65 is a less brutal linearization of the partial preference relation induced by @xmath41 , compared to that induced by @xmath66 .",
    "mapping incomparability onto equality might seem more reasonable than mapping it onto an arbitrary strict ordering , since the choice is still left to the user .",
    "we might conclude that the min+ model is to be preferred to the slo model , as far as approximation is concerned .",
    "however , maximizing the minimum reward , as in any fuzzy framework @xcite , has proved its usefulness in problem representation .",
    "the user may therefore need to balance the linearization of the order and the suitability of the representation provided .",
    "we plan to use our approach in a preference elicitation system in which we guarantee the consistency of the user preferences , and guide the user to a consistent scenario .",
    "morover , we also plan to exploit the use of partially ordered preferences , as allowed in soft constraints , to better approximate cp nets .",
    "finally , we intend to use machine learning techniques to learn conditional preferences from comparisons of complete assignments ."
  ],
  "abstract_text": [
    "<S> many real life optimization problems contain both hard and soft constraints , as well as qualitative conditional preferences . </S>",
    "<S> however , there is no single formalism to specify all three kinds of information . </S>",
    "<S> we therefore propose a framework , based on both cp - nets and soft constraints , that handles both hard and soft constraints as well as conditional preferences efficiently and uniformly . </S>",
    "<S> we study the complexity of testing the consistency of preference statements , and show how soft constraints can faithfully approximate the semantics of conditional preference statements whilst improving the computational complexity . </S>"
  ]
}