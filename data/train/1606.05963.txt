{
  "article_text": [
    "so - called cloud computing infrastructures are designed to organize servers , networking devices and storage systems into a virtual resource pool , hoping to simplify system operation .",
    "openstack  @xcite is a very popular open source cloud management system .",
    "however , even after several years of development , there are still many issues with openstack , making the system itself challenging to operate .    beyond the commonly discussed code quality control issues in the openstack developer community , we believe systems like openstack are fundamentally hard to debug and operate due to the way they are designed .",
    "openstack integrates many open source or proprietary software systems to perform different tasks , and the management system itself also has a number of asynchronously connected modules .",
    "there are six major components in openstack , namely nova ( compute ) , neutron ( networking ) , cinder ( block storage ) , swift ( object storage ) , glance ( images ) and keystone ( authentication ) , as well as a number of optional components to provide layer-3 routing , accounting etc . each module maintains its own database , and communicates through a persistent queue service  @xcite .",
    "many of the modules provide extensible interfaces , allowing different backends for actual implementation .",
    "for example , in our configuration , nova uses _ libvirt _  @xcite to control a _ kvm _  @xcite hypervisor to provide server virtualization , and",
    "neutron uses _ open vswitch ( ovs ) _",
    "@xcite to provide virtual networks . to make things even more complicated , it is common to use ceph  @xcite as the storage backend , introducing another complex distributed system .",
    "openstack and many similar systems are hard to operate mainly because of the following reasons .",
    "\\1 ) the system states are distributed over the entire system and exist in many levels of abstraction , with considerable amount of duplications .",
    "for example , the relevant states of a virtual machine ( vm ) exist in nova , libvirt / kvm , neutron , open vswitch , the routing agent , as well as the storage service . for the vm to work",
    ", two conditions must hold : 1 ) all these components work , and 2 ) their states are consistent . unfortunately ,",
    "neither of the two always holds in openstack .",
    "\\2 ) development benefits from the modularity in openstack design , but maintaining it requires the operator to understand all modules , an impossible task .",
    "each module has its own set of tools for state monitoring and other operations , and these components are located at different machines .",
    "even experienced operators may spend lots of time looking into the piles of manuals and running many commands to answer a simple query like _ should i shut down physical machine a , which vms would be affected ? _ the question is harder than just listing the vms on the machine , as the operator also needs to know what other services run on the machine .",
    "e.g. , there might be a routing service or a disk block on the server that other vms are actively using .",
    "\\3 ) existing automated debugging tools , both log - based  @xcite and code analysis based  @xcite , only work on a single code base with consistent identifiers , there is no system - wide i d in openstack , especially crossing different layers and integrating with ceph .",
    "in addition , the state updates are asynchronous and hard to track .    in this paper",
    ", we propose a novel approach to capture the knowledge about the system runtime states in a graph , which we call system operation state graph ( sosg ) .",
    "sosgis designed to solve problems for operators .",
    "we show that with a simple procedure , we can automatically construct the graph , which reveals many hidden links among different system modules .",
    "sosgis designed to be general .",
    "we do not assume much knowledge about the target system , but only need the log file locations and a list of commands to extract states from different modules .",
    "specifically , we do not need to understand the semantics of these data . also , all required raw data are at a component level rather than the system - level , and thus easy to provide by module developers .    specifically , sosgcaptures _ entities _ in the entire openstack system at different layers .",
    "there are many different types of entities .",
    "vm , network and storage blocks are all entities . for an entity , we also capture its _ states _ , such as nova database record and libvirt states for a vm .",
    "we not only keep the current state , but also previous states .",
    "we also capture the _ events _ ( e.g. log messages ) related to the entity , which are useful in debugging .",
    "sosgautomatically discovers the links among different entities , even cross multiple modules , using a syntactic string matching on automatically discovered identifiers in events and states .",
    "e.g. based on common strings in file / directory names and unique ids in logs , we can infer the relationship between a vm and a ceph data block it uses .",
    "we present two applications of sosg .",
    "1 ) we turn ad hoc system state queries into graph traversals , simplifying these queries , especially those spanning multiple modules ; 2 ) we perform automatic anomaly detection to find vms that behave differently , which might indicate problems .",
    "we implement sosgboth on neo4j  @xcite and graphx  @xcite and evaluate it using real data from a professionally operated , production - quality 125-node openstack - ceph cluster with over 100 active users .",
    "we process 40 gb raw data into a 43-million - vertex , 57-million - edge graph , on which we perform traversals and anomaly detections using a graphx cluster . we successfully detect and diagnose many hidden or user - visible failures such as resource reclaim issues , state inconsistencies , and vm migration failures .    in summary ,",
    "our contributions in this paper include :    \\1 ) we propose an approach that organizes information about system states and events into a single graph representation , sosg , with which we can solve many complicated state queries with a common graph traversal .",
    "\\2 ) we design an anomaly detection algorithm that automatically analyzes the state graph and find many problems based on the graph structure .",
    "\\3 ) we provide two scalable implementations of the sosg .",
    "preliminary evaluations using real operation data from a production openstack cluster show promising results .",
    "the remaining of the paper is organized as follows : we review related work in section 2 .",
    "we show how to process the raw system operation data into a state graph in section 3 , and present the applications of the state graph in section 4 .",
    "we report the results of several case studies in section 5 . and finally , we discuss the future work and conclude in section 6 .",
    "* automatic system diagnostics . * bugs are inevitable in systems , and people have designed many approaches to automatically detect systems bugs , using both static analysis of the source code and runtime data such as logs .",
    "the authors of  @xcite detect problems using common identifiers in text logs .",
    "it is important to combine multiple data sources .",
    "california fault lines  @xcite combines router configurations , syslogs with email logs to recover from failures of an email service .",
    "sherlog  @xcite is an example of using powerful static code analysis to help improving logging .",
    "and  @xcite finds similar code patterns to build actionable alert prediction model .",
    "all these methods are limited to a single code base , which we do not have .",
    "debugging multiple frameworks is a new topic .",
    "pivot tracing  @xcite monitors multiple frameworks in distributed systems using dynamic instrumentation , and supports relational operator to process the collected data on the fly .",
    "paper  @xcite diagnoses distributed system performance changes by tracing request flows end - to - end across components . adding the traces creates common identifiers in a heterogeneous system .",
    "we only use existing information in systems without extra instrumentations , and thus easier to deploy .",
    "anomaly detection has been widely used in system problem detection  @xcite .",
    "@xcite takes advantage of spark to perform large scale anomaly detection , and use it to detect vm performance problems .",
    "@xcite uses anomaly detection to find faults in a multi - tier web system with redundancy .",
    "these projects use a small number of homogeneous data source , while we mainly focus on analyzing states cross different system components",
    ".    * anomaly detection methods .",
    "* there are many anomaly detection methods for different types of data .",
    "@xcite provide techniques to simplify data from heterogeneous sources to improve anomaly detection result .",
    "distance - based anomaly detection @xcite are special techniques allowing the anomaly to be described by a probability model .",
    "graph anomaly detection is also a well studied topic  @xcite .",
    "* scalable graph computation .",
    "* the recent development of efficient graph computation frameworks , such as pregel  @xcite , power - graph @xcite , graphx and apache giraph @xcite , enables our approach .",
    "specifically , we use graphx to process the giant state graph efficiently .",
    "* knowledge base and knowledge graphs .",
    "* the property graph is a special case of the knowledge base ( kb ) , a well - studied topic in data mining .",
    "there are many popular knowledge base systems , such as knowledge vaults @xcite , yago  @xcite , dbpedia @xcite , freebase @xcite , and nell @xcite . and also many efforts are devoted to build these kbs @xcite @xcite .",
    "our state graph is similar to the knowledge graph , but it specifically targets machine generated system states , and thus can be built automatically .",
    "in this section , we introduce our core data structure , the system operation state graph , and show how we construct the graph from a number of heterogeneous raw text files . in the next section ,",
    "we introduce two applications we developed on the graph , the graph - traversal based state queries and automatic anomaly detection .",
    "our core data structure is the state graph .",
    "it is a special version of the property graph @xcite automatically constructed from raw operation data .",
    "the property graph is a directed multigraph  @xcite allowing user defined properties attached to any vertex or edge .",
    "the multigraph supports parallel edges to capture multiple relationships between the same vertex pairs .",
    ".data sources and their corresponding types [ cols=\"<,<\",options=\"header \" , ]     table  [ tbl_operation_data ] summarizes the different data sources we use to generate the state graph . for each",
    "_ record _ in any data source , there is a corresponding vertex in the state graph .",
    "we use the data source to determine the _ data type _ of the vertex , as table  [ tbl_operation_data ] shows .",
    "the vertex contains a list of key - value pairs ( e.g. host : n005 ) as properties .",
    "* vertices . * in a state graph , there are three categories of vertices : _ entities _ , _ states _ and _ events_. figure  [ fig : entity - state - event ] shows an example of a state graph with all these categories of vertices .    _",
    "entity vertices _ are the centeral pieces in the state graph , as they represent instances of components or resources in the system , e.g , a vm , a disk block or a physical server .",
    "specifically , we do not distinguish the _ identifier of an entity _ from the _ entity _ itself .",
    "that is , we treat an _",
    "ip address _ the same as _ the server with the ip address _ , or the _ uuid of a vm _ the same as the _",
    "vm_. this choice is due to the limitations of the textual raw data , and the lack of need for distinction .",
    "vertex 3 and 6 in figure  [ fig : entity - state - event ] are examples of entity vertices .",
    "however , the raw data do not directly contain entities .",
    "instead , they contain _ states _ of an entity at a specific time ( e.g. a vm is running / stopped / paused in libvirt ) , or _ events _ involving certain entities ( e.g. a log message saying that a vm starts to shut down ) . as we detail in section  [ sec : graph_construction ] , we extract all entity vertices from the state and event vertices in the graph . for example , vertex 1 , 2 are both event vertices and vertex 4 , 5 are both state vertices in figure  [ fig : entity - state - event ] .    * edges .",
    "* there are two types of edges in the state graph : _ spatial edges _ and _ temporal edges_. _ spatial edges _ capture the relationship between an entity and its states ( entity - state ) , as well as its associated events ( entity - event ) .",
    "note that in our current representation , we do not have entity - entity edges .",
    "instead , we represent an entity - entity relationship using a path of ( entity1 @xmath0 state / event @xmath0 entity2 ) .",
    "note that a state or event vertex acts as the `` bridge '' between two entities . in figure",
    "[ fig : entity - state - event ] , edges a , b , c , d , e , f are all spatial edges .",
    "there is an edge between vertex 1 and 3 because the event contains the entity .",
    "from the figure we can infer the relationship between entity vertices 3 ( xxx - xx1 ) and 6 ( 10.1.0.12 ) by following the path ( 3 @xmath0 d @xmath0 5 @xmath0 f @xmath0 6 ) .",
    "_ temporal edges _ represent the time order of states and events that connect to the same entity .",
    "the temporal edges make it easy to traverse events or state changes in time .",
    "the edge always points to the increasing time direction .",
    "edge g and h in figure  [ fig : entity - state - event ] are both temporal edges .",
    "our goal is to construct the state graph from the raw data sources in table  [ tbl_operation_data ] , without using any semantic information .",
    "here we outline our construction algorithm .    * step 1 : parse raw text data to generate event and state vertices .",
    "* the raw data are heterogeneous , including free texts , semi - structured texts and structured records .",
    "they are encoded in different formats such as json , csv or mysql dump files .",
    "we provide a set of parsers for each data format to extract the information from text into key - value pairs .",
    "record _ ( as defined by the parser ) from the data source is turned into a vertex , with the data source encoded as the data type of the vertex .",
    "then we add the key - value pairs to the vertex as its properties . in figure",
    "[ fig : entity - state - event ] , vertices 1 , 2 , 4 and 5 are generated in this step .",
    "* step 2 : discover and generate entity vertices . * note that not every single property of the state and event vertices represents an entity .",
    "we need to discover the property values that might be an identifier for some entity . while manually labeling them",
    "is feasible in a small system , we decide to automatically discover them based on statistical properties , following the identifier discovery method in  @xcite .",
    "simply speaking , we find the properties with many distinct values and each value appears at multiple places , and use them as identifiers . in openstack , this method works quite well .",
    "we take these identifiers and generate an entity vertex for each distinct value . in figure  [ fig : entity - state - event ]",
    ", vertices 3 and 6 are generated in this step .",
    "* step 3 : add spatial edges . *",
    "we generate an edge connecting a state or event vertex with an entity vertex , _ iff _ the state or event contains the entity .",
    "note that for efficiency reasons , in a real implementation , we combine this step with step 2 , with some careful bookkeeping when computing of the distinct values .",
    "we omit the details here due to space constraints . in figure",
    "[ fig : entity - state - event ] , we add edges a , b , c , d , e and f.    * step 4 : add temporal edges . * to create the temporal edges , firstly we group the state and event vertices by the entity they are associated with ( a many - to - many association ) . for all events / states associated with an entity , we sort them by time , and create temporal edges according to ascending time order .",
    "this step adds the edge g and h in figure  [ fig : entity - state - event ] .",
    "* summary .",
    "* after the four steps above , we have a complete state graph capturing both temporal and spatial information .",
    "the procedure has two advantages : 1 ) it is fully syntax driven , using only textual and simple statistical features , without any external semantic information or human labeling ; 2 ) every step in the procedure contains many independent operations , and thus trivial to parallelize with a graph computation framework . currently we generate the graph from scratch , and we are working on algorithms to incrementally update the graph to support online monitoring applications .",
    "while there are many potential applications of the state graph , we present two of them in this preliminary paper .      the direct application of the state graph is answering system state queries , so that the system operators can find all state information in a homogeneous data structure with a single method - graph traversal , instead of memorizing tons of different commands .",
    "queries only involving a single entity is straightforward .",
    "we only need to find the _ most recent _ state / event vertex connected to the entity vertex , and look up its properties .",
    "it is trickier to discover states involving multiple entities , such as the physical location of _ a specific data block in a volume of a vm_. in this case , we need to traverse the graph through a ( entity @xmath0 state / event @xmath0 entity @xmath0 state / event @xmath0  ) path .",
    "we can use breadth - first - search ( bfs ) to find the path , and can use data type information to reduce the search space for bfs .",
    "we omit the details of the optimization due to space constraints , and instead provide a concrete example in section  [ graph_traversal ] .",
    "we implement the graph traversal on both neo4j @xcite and graphx , and we provide a number of convenient functions for common tasks , such as ` listcephfilesforvm ` , or ` listvmsinsubnet ` .",
    "note that these functions are based on a common underlying graph traversal mechanism , showing that our core techniques are general .",
    "while the graph traversal can find answers to specific queries from operators , however , there are millions of states in the system , and many issues remain hidden for a long time without being noticed . for example",
    ", we have a number of resource release failures , hidden for months in our public system ( detail in section  [ sec : anomaly_case ] ) .",
    "we would like to automatically analyze the entire graph to find these hidden problems .    as a preliminary attempt , we use graph - based anomaly detection .",
    "we choose anomaly detection because it is an unsupervised algorithm , and does not require manually labeled failure samples .",
    "the basic assumption of anomaly detection is that most of the events and entities are normal , and any deviation from the normal case indicates problems .",
    "this is true in our production openstack , where most vms have a common set of states .",
    "thus , our goal is to find vms whose states are different from their peers .    * feature extraction : subgraph of a vm . * the first task is to extract the _ features _ of a vm .",
    "the feature captures the state of a vm . as the normal operation of a vm depends on all components the vm uses , such as network , disk and security groups , we need to find the subgraph that roots at the vm entity vertex and also includes all its dependencies .",
    "we can naively perform a bfs starting from the vm entity to find related entities .",
    "one practical difficulty is that many entities , such as a subnet , are shared among different vms .",
    "naive bfs will expand the subgraph through this shared subnet vertex into the resources of other vms .",
    "thus , we introduce an algorithm augmenting the naive bfs with a _ collaborative pruning _",
    "methodology to discover shared vertices , and prevent the bfs search from passing through the shared vertices .",
    "intuitively , the algorithm works as follows .",
    "we start bfs traversal from every single vm vertex . then on every vertex along the path",
    ", we remember a list of bfs traversals that have reached it before . during a traversal ,",
    "if we reach a vertex that has been reached by another bfs , the later bfs stops there . in this way , we not only find subgraphs rooted at each vm , but also the information about shared resources .",
    "* distance - based anomaly detection . * we define a distance metric between two subgraphs to capture whether the two subgraphs are similar to each other .",
    "the goal of the distance metric is to tell a problematic vm from normal ones .",
    "we try to capture the structure information of the subgraphs in the distance metric .",
    "specifically , we capture the information about _ triplets _  @xcite .",
    "a triplet is two vertices along with the edge .",
    "we encode a triplet information such as the data type of the source / destination vertex , and its location in the subgraph ( i.e. the depth of the bfs traversal ) .",
    "then we define the distance between the two subgraphs using a generalized jaccard distance @xcite .",
    "finally , we apply distance - based anomaly detection to find the object with fewer than @xmath1 neighbors within a radius of @xmath2 . the parameters @xmath1 and @xmath2 directly affect our detection results .",
    "as a first attempt , we determine them empirically . as a future work",
    ", we are investigating more powerful anomaly detection techniques with more intuitive parameters .",
    "we will discuss some case studies in our preliminary evaluation in this section .",
    "our evaluation is based on real operation data from a 125-node production cluster that runs openstack ( icehouse ) and ceph .",
    "there are 5 openstack controller nodes , 120 compute nodes , 40 of which also doubles as ceph storage nodes .",
    "each node has 12 xeon cores , 128 gb of ram and 10 ge network",
    ". this cluster offers computation and storage services for about 100 active users .",
    "* raw data collection.*we periodically snapshot the state of libvirt ( every 60 sec ) , ovs ( every 60 sec ) , ceph image ( every 600 sec ) and ceph block file ( every 3600 sec , with duplicates removed ) . to capture the database states , we first dump the entire openstack db right at the beginning of the experiments , and create triggers to log all database updates . we also collect log files from all openstack and ceph components .",
    "the average collected operation data is 600 mb per hour from all 125 servers .",
    "the ovs state snapshot represents about half of the data as the collector does not remove the duplicate records .",
    "logs account for about 24% of the data .",
    "cephfile and libvirt occupies 15 % and 9% respectively .",
    "we use a spark @xcite cluster running inside the vms in the same openstack cluster to analyze these data .",
    "we evaluate the performance of constructing state graph from the raw data as discussed above .",
    "we build the graph using a 3-day operation data that consist of a number of text files with total 40 gb .",
    "we construct the graph following the procedure discussed in section  [ sec : graph_construction ] .",
    "we use a 15-node spark cluster to accelerate the process .",
    "it takes 5 minutes to parse the text files and construct the event and state vertices , and 8 minutes to expand these vertices to discover entity vertices .",
    "then it takes 12 minutes to add all remaining edges .",
    "the total processing time for the 3-day worth of data takes 25 minutes , which is an acceptable cost considering the convenience this graph brings to operators .",
    "the resulting graph contains about 43.3 million vertices and 56.6 million edges .",
    "most of the vertices are events ( log entries ) .",
    "we provide a concrete query example .",
    "consider the query _ if physical server a encounters a hard disk failure , which vms are affected ? _ to answer it in a traditional way , the operator needs to look up many information , including which blocks are stored on the disk , which ceph image the block belongs to , where the image is used .",
    "each of the questions requires one or more system specific commands .",
    "figure  [ fig : vm - ceph - pm ] shows one of the paths that our graph traversal algorithm automatically discovers .",
    "the path starts from a physical server and ends with a vm , acrossing the ceph states , like ( ` property ` @xmath3 ` cephfile ` @xmath3 ` objectid ` @xmath3 ` cephimage ` @xmath3 ` uuid ` @xmath3 ` db ` @xmath3 ` uuid ` ) .",
    "the query is fast too , and only takes 35 seconds in our setup .          while we are still going through the manual process evaluating the false positive rates , we present three interesting anomalies as case studies .",
    "the first two are both cases of hidden problems .",
    "the third one represents a complicated failure that confuses users .",
    "open vswitch ports not deleted on vm deletion . *",
    "it is hard to see a resource deletion failure behind the openstack ui .",
    "the anomaly detection algorithm captures a subgraph , with relevant portion shown in figure  [ fig : ovs - resource - error ] .",
    "it is abnormal because the entity vertex is connected to many ovs state vertices , whereas the normal case ( figure [ fig : normal - case ] ) does not .",
    "as we try to confirm the graph structure - based detection is semantically valid , we inspect the properties of each vertex .",
    "we find that the vm instance has been deleted months ago , but still has many active ovs states associated with it .",
    "this anomaly indicates that the virtual ports of the vm are not deleted , resulting a resource leak .",
    "note that it is not a common problem ( otherwise it will not be an anomaly ) .    * case 2 .",
    "database record does not match physical states .",
    "* it is common to see disagreement of the openstack database record and the actual physical state .",
    "figure [ fig : db - mismatch - error1 ] shows a case .",
    "the subgraph is picked out by anomaly detection mainly because there are thousands of db state vertices directly connect to the vm entity vertex .",
    "looking for the semantic reason , we find that the vm has been in ` deleted ` state for months , but the libvirt , cephimage and ovs states still remain .",
    "again , looking into the state vertices connected to the vm vertex , we can see the possible reason : ` nova.instance_faults ` shows @xmath4 failures in @xmath5 of ` nova.instance_actions ` .",
    "this finding not only indicates an inconsistency case , but also suggests some serious bugs in openstack s retrying / recovery mechanism .",
    "* case 3 . failed vm migration .",
    "lastly , we present a more complex and user visible failure during the vm migration .",
    "the user reported the issue as a freezing migration process .",
    "the user has nothing to do but delete the vm .",
    "anomaly detection algorithm picks out the abnormal subgraph too , as figure  [ fig : migration - error ] shows .",
    "the subgraph is abnormal in that the migrating vm is missing libvirt state , both from the source host and the destination host .",
    "a closer manual inspection shows that during this migration from node-118 to node-38 exception happened , and two database state vertices ` nova.instance_faults ` connected to the vm show that ` can not remove config /etc",
    "/ libvirt / qemu / instance-0000155e.xml : read - only file system ` on the source and ` error removing image ` on the destination . as a result , the storage ( virtual disk ) of the vm migrated but the computation did not , causing a failed migration .",
    "in addition , the missing libvirt state vertices on both node-118 and node-38 serve as another evidence of the unsuccessful migration",
    ".    an even deeper inspection at the logs and events associated with this vm vertex indicates that the vm encountered a migration problem : there are 653 repeated ` instance not resizing , skipping migration ` records out of all 1653 log lines .",
    "this repeated skipping of a small - instance ( 2 vcpu , 4 gb ram ) migration also suggests some bugs in openstack s resource management .",
    "we will focus on the following important directions as our future work .    * root cause analysis with events and state history . *",
    "as we indicate ( with manual analysis ) in section  [ sec : anomaly_case ] , event sequences ( logs ) are an indication _ why _ the system ends up in an inconsistent state .",
    "we would like to have a model that maps logs to the corresponding anomalous state .",
    "the model might help predict the failure before it actually happens .",
    "* including other data sources . *",
    "the state graph is a great way to automatically discover links among different information about a system , both runtime and static .",
    "we want to incorporate other static data sources , such as the source code , bug reports and documentations into the graph , and hope to provide more insights into how to _ fix _ the bugs discovered .    * applying sosgto other systems . *",
    "though we have only presented sosgas a tool for debugging openstack , we believe the approach is general .",
    "we would like to apply it to detect problems in other distributed systems , such as big data frameworks and general web services organized in a service oriented architecture ( soa ) .",
    "* conclusion .",
    "* as both researchers and system operation practitioners , we keep wondering _  what is the core set of knowledge in system operation ? \" _",
    "most of the times , we believe it is the experience of knowing about all dependencies , or links , among different system components , and the knowledge about different tools to inspect and change the states of these components . many of the knowledge is too trivial to remember , impossible to transfer to a new system , and hard to teach to another person .",
    "all of these problems make system operation hard .",
    "the above is our motivation to build sosg , which captures the runtime information , including both states and events , and discover the hidden links among these pieces of information . by leveraging modern graph computation capacity",
    ", we can process a vast amount of redundant data and automatically construct the graph . with the graph",
    ", we turn the typical task such as ad hoc probing of different system components into an intuitive graph traversal problem , making the exploration of heterogeneous systems easier .",
    "we also develop a subgraph - based anomaly detection method to automatically analyze system states to find hidden problems .",
    "we evaluate sosgwith data from our production openstack cluster with tens of components , and demonstrate its effectiveness .",
    "yuan , ding , et al .",
    "`` sherlog : error diagnosis by connecting clues from run - time logs . ''",
    "acm sigarch computer architecture news .",
    "1 . acm , 2010 .",
    "ranking i a a. finding patterns in static analysis alerts[j ] .",
    "gonzalez , joseph e. , et al .",
    "`` graphx : graph processing in a distributed dataflow framework . ''",
    "11th usenix symposium on operating systems design and implementation ( osdi 14 ) . 2014 .",
    "turner d , levchenko k , snoeren a c , et al .",
    "california fault lines : understanding the causes and impact of network failures[j ] .",
    "acm sigcomm computer communication review , 2011 , 41(4 ) : 315 - 326",
    ". mace , jonathan , ryan roelke , and rodrigo fonseca .",
    "`` pivot tracing : dynamic causal monitoring for distributed systems . ''",
    "proceedings of the 25th symposium on operating systems principles .",
    "acm , 2015 .",
    "sambasivan r r , zheng a x , de rosa m , et al . diagnosing performance changes by comparing request flows[c]//nsdi .",
    "wang c , viswanathan k , choudur l , et al .",
    "statistical techniques for online anomaly detection in data centers[c]//integrated network management ( i m ) , 2011 ifip / ieee international symposium on .",
    "ieee , 2011 : 385 - 392 .",
    "solaimani m , iftekhar m , khan l , et al .",
    "statistical technique for online anomaly detection using spark over heterogeneous data from multi - source vmware performance data[c]//big data ( big data ) , 2014 ieee international conference on .",
    "ieee , 2014 : 1086 - 1094 .",
    "id t , kashima h. eigenspace - based anomaly detection in computer systems[c]//proceedings of the tenth acm sigkdd international conference on knowledge discovery and data mining .",
    "acm , 2004 : 440 - 449 .",
    "zhao y , zheng z , wen h. bayesian statistical inference in machine learning anomaly detection[c]//communications and intelligence information security ( icciis ) , 2010 international conference on .",
    "ieee , 2010 : 113 - 116 .",
    "dasgupta d , majumdar n s. anomaly detection in multidimensional data using negative selection algorithm[c]//wcci .",
    "ieee , 2002 : 1039 - 1044 .",
    "knorr e m , ng r t , tucakov v. distance - based outliers : algorithms and applications[j ] . the vldb journal?the international journal on very large data bases , 2000 , 8(3 - 4 ) : 237 - 253 .",
    "xie m , han s , tian b. highly efficient distance - based anomaly detection through univariate with pca in wireless sensor networks[c]//trust , security and privacy in computing and communications ( trustcom ) , 2011 ieee 10th international conference on .",
    "ieee , 2011 : 564 - 571 .",
    "khoa n l d , babaie t , chawla s , et al .",
    "network anomaly detection using a commute distance based approach[c]//data mining workshops ( icdmw ) , 2010 ieee international conference on .",
    "ieee , 2010 : 943 - 950 .",
    "noble , caleb c. , and diane j. cook . `` graph - based anomaly detection . ''",
    "proceedings of the ninth acm sigkdd international conference on knowledge discovery and data mining .",
    "acm , 2003 .",
    "malewicz , grzegorz , et al .",
    "`` pregel : a system for large - scale graph processing . ''",
    "proceedings of the 2010 acm sigmod international conference on management of data .",
    "acm , 2010 .",
    "low , yucheng , et al .",
    "`` distributed graphlab : a framework for machine learning and data mining in the cloud .",
    "'' proceedings of the vldb endowment 5.8 ( 2012 ) : 716 - 727 .",
    "avery , ching .",
    "`` giraph : large - scale graph processing infrastructure on hadoop . ''",
    "proceedings of the hadoop summit .",
    "santa clara ( 2011 ) .",
    "dong , xin , et al .",
    "`` knowledge vault : a web - scale approach to probabilistic knowledge fusion . ''",
    "proceedings of the 20th acm sigkdd international conference on knowledge discovery and data mining .",
    "acm , 2014 .",
    "suchanek , fabian m. , gjergji kasneci , and gerhard weikum .",
    "`` yago : a core of semantic knowledge . ''",
    "proceedings of the 16th international conference on world wide web .",
    "acm , 2007 .",
    "hoffart , johannes , et al .",
    "`` yago2 : a spatially and temporally enhanced knowledge base from wikipedia . ''",
    "artificial intelligence 194 ( 2013 ) : 28 - 61 .",
    "mahdisoltani , farzaneh , joanna biega , and fabian suchanek .",
    "`` yago3 : a knowledge base from multilingual wikipedias . ''",
    "7th biennial conference on innovative data systems research .",
    "cidr conference , 2014 .",
    "auer , sren , et al .",
    "dbpedia : a nucleus for a web of open data .",
    "springer berlin heidelberg , 2007 .",
    "bollacker , kurt , et al .",
    "`` freebase : a collaboratively created graph database for structuring human knowledge . ''",
    "proceedings of the 2008 acm sigmod international conference on management of data .",
    "acm , 2008 .",
    "carlson , andrew , et al .",
    "`` toward an architecture for never - ending language learning . '' aaai .",
    "weikum , gerhard , and martin theobald .",
    "`` from information to knowledge : harvesting entities and relationships from web sources . '' proceedings of the twenty - ninth acm sigmod - sigact - sigart symposium on principles of database systems .",
    "acm , 2010 .",
    "craven , mark , et al .",
    "`` learning to construct knowledge bases from the world wide web . ''",
    "artificial intelligence 118.1 ( 2000 ) : 69 - 113 .",
    "i. robinson , j. webber , and e. eifrem .",
    "graph databases .",
    "oreilly media , incorporated , 2013    zaharia , matei , et al .",
    "`` resilient distributed datasets : a fault - tolerant abstraction for in - memory cluster computing . ''",
    "proceedings of the 9th usenix conference on networked systems design and implementation .",
    "usenix association , 2012 ."
  ],
  "abstract_text": [
    "<S> it is hard to operate and debug systems like openstack that integrate many independently developed modules with multiple levels of abstractions . a major challenge is to navigate through the complex dependencies and relationships of the states in different modules or subsystems , to ensure the correctness and consistency of these states . </S>",
    "<S> we present a system that captures the runtime states and events from the entire openstack - ceph stack , and automatically organizes these data into a graph that we call _ system operation state graph _ ( sosg ) . </S>",
    "<S> with sosgwe can use intuitive graph traversal techniques to solve problems like reasoning about the state of a virtual machine . </S>",
    "<S> also , using graph - based anomaly detection , we can automatically discover hidden problems in openstack . </S>",
    "<S> we have a scalable implementation of sosg , and evaluate the approach on a 125-node production openstack cluster , finding a number of interesting problems . </S>"
  ]
}