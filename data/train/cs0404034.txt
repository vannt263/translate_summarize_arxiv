{
  "article_text": [
    "the following attributes all make an optimization problem more difficult : having an objective function with an unknown and possibly large number of local minima , being constrained , having nonlinear constraints , having inequality constraints , having both discrete and continuous variables .",
    "unfortunately , faithfully modeling an application tends to introduce many of these attributes . as a result",
    ", optimization problems are usually linearized , discretized , relaxed , or otherwise modified to make them feasible according to conventional methods .",
    "one of the most exciting prospects of constraint programming is that such difficult optimization problems can be solved without these possibly invalidating modifications .",
    "moreover , constraint programming solutions are of known quality : they yield intervals guaranteed to contain all solutions .",
    "equally important , constraint programming can prove the absence of solutions .    in this paper we only consider the core of the constraint programming approach to optimization , which is to solve a system of nonlinear inequalities :    @xmath0",
    "it is understood that it may happen that @xmath1 for some pairs @xmath2 and @xmath3 , so that equalities are a special case .",
    "if this occurs , then certain obvious optimizations are possible in the methods described here .",
    "the ability to solve systems such as ( [ nonlinsys ] ) supports optimization in more ways than one . in the first place",
    ", these systems occur as conditions in some constrained optimized problems .",
    "moreover , one of @xmath4 could be defined as @xmath5 , where @xmath6 is the objective function and where @xmath7 is a constant . by repeatedly solving such a system for suitably chosen @xmath7 , one can find the greatest value of @xmath7 for which ( [ nonlinsys ] ) is found to have no solution .",
    "that value is a lower bound for the global minimum @xcite .",
    "this approach handles nonlinear inequalities with real variables .",
    "it also allows some or all variables to be integer by regarding integrality as a constraint on a real variable @xcite .",
    "all constraint programming work in this direction has been based on interval arithmetic .",
    "the earliest work @xcite used a generic propagation algorithm based directly on domain reduction operators for primitive arithmetic constraints .",
    "these constraints included @xmath8 defined as @xmath9 for all reals @xmath10 , @xmath11 , and @xmath12 .",
    "also included was @xmath13 defined as @xmath14 for all reals @xmath10 , @xmath11 , and @xmath12 .",
    "this was criticized in @xcite which advocated the use of composite arithmetic expression directly rather than reducing them to primitive arithmetic constraints . in @xcite",
    "it was acknowledged that the generic propagation algorithm is not satisfactory for csps that derive from composite arithmetic expressions .",
    "these papers describe propagation algorithms that exploit the structure of such expressions and thereby improve on what is attainable by evaluating such expressions in interval arithmetic .",
    "selective initialization was first described in @xcite .",
    "this was done under the tacit assumption that all default domains are @xmath15 $ ] . as a result",
    "some of the theorems in that paper are not as widely applicable as claimed .",
    "all of these researches are motivated by the severe difficulties experienced by conventional numerical analysis to solve practical optimization problems .",
    "they can be regarded as attempts to fully exploit the potential of interval arithmetic . in this paper",
    "we also take this point of view .",
    "we show that , though equation ( [ nonlinsys ] ) can contain arbitrarily large expressions , only a small modification of the generic propagation algorithm is needed to optimally exploit the structure of these expressions .",
    "this is made possible by a new canonical form for equation ( [ nonlinsys ] ) that we introduce in this paper .",
    "in addition to supporting our application of constraint processing to solving systems similar to equation ( [ nonlinsys ] ) , this canonical form exploits the potential for parallelism in such systems .",
    "in figure  [ softarch ] we propose a hierarchical software architecture for optimization problems . each layer",
    "is implemented in terms of the layer below .    in the introduction we briefly remarked on how layer",
    "4 can be reduced to layer 3 .",
    "more detail is given in @xcite .",
    "for the transition between layers 0 and 1 there is much material in the interval arithmetic literature .",
    "the part that is relevant to constraint processing can be found in @xcite . in the present paper",
    "we present a new method for implementing layer 3 in terms of layer 2 .",
    "but first we review the transition between layers 1 and 2 .",
    "in this section we provide background by reviewing some basic concepts . these reviews also serve to establish the terminology and notation used in this paper .",
    "the first few sections apply to all constraint satisfaction problems , not only to numerical ones .      a _ constraint satisfaction problem ( csp ) _ consists of a set of _",
    "constraints_. each of the variables in the constraint is associated with a _ domain _ , which is the set of values that are possible for the variable concerned .",
    "typically , not all sets of values can be domains .",
    "for example , sets of real values are restricted to intervals , as described later .",
    "a _ valuation _ is a tuple indexed by variables where the component indexed by @xmath16 is an element of the domain of @xmath16 .",
    "solution _ is a valuation such that each constraint is true if every variable in the constraint is substituted by the component of the valuation indexed by the variable .",
    "the set of solutions is a set of valuations ; hence a set of tuples ; hence a _",
    "relation_. we regard this relation as the relation defined by the csp . in this way",
    "the relation that is the meaning of a constraint in one csp can be defined by another .",
    "this gives csps an hierarchical structure .    with each constraint",
    ", there is an associated _ domain reduction operator _ ; dro for short .",
    "this operator may remove from the domains of each of the variables in the constraint certain values that do not satisfy the constraint , given that the other variables of the constraint are restricted to their associated domains .",
    "any dro is contracting , monotonic , and idempotent .",
    "when the dros of the constraints are applied in a `` fair '' order , the domains converge to a limit or one of the domains becomes empty .",
    "a sequence of dros activations is _ fair _ if every one of them occurs an infinite number of times .",
    "the resulting cartesian product of the domains becomes the greatest common fixpoint of the dros @xcite .",
    "if one of the domains becomes empty , it follows that no solutions exist within the initial domains .    in practice ,",
    "we are restricted to the domains that are representable in a computer . as there are only a finite number of these",
    ", any fair sequence of dro applications yields domains that remain constant from a certain point onwards .      according to the usual terminology in constraint programming ,",
    "a constraint states that a certain relation holds between its arguments .",
    "but in first - order predicate logic the same role is played by an _",
    "atomic formula_. in this paper we adopt the terminology of first - order predicate logic for the meaning of `` atomic formula '' and we reserve `` constraint '' for a special case .",
    "thus an atomic formula consists of a predicate symbol with terms as arguments .",
    "a _ term _ is a function symbol with terms as arguments .",
    "what makes an atomic formula first - order is that a predicate symbol can only occur as the outermost symbol in the formula .    at first sight , the inequalities in equation ( [ nonlinsys ] ) are atomic formulas .",
    "in fact , they follow the related , but different , usage that prevails in informal mathematics .",
    "the inequality    @xmath17    is an atomic formula where @xmath18 is the predicate symbol with two arguments , which are the terms @xmath19 and @xmath20 .",
    "a possible source of confusion is that in mathematics @xmath19 is not necessarily interpreted as a syntactically concrete term , but as an abstractly conceived function @xmath21 applied to the arguments @xmath22 .",
    "the function could be defined by means of a term that looks quite different ; such a term could be nested and contain several function symbols .",
    "for example , equation ( [ ineq ] ) could be @xmath23 with @xmath21 defined as @xmath24 for all @xmath10 and @xmath11 .",
    "accordingly , the atomic formula corresponding to equation ( [ ineq ] ) is @xmath25 taking advantage of infix and postfix notation this becomes @xmath26 .",
    "a _ constraint _ is an atomic formula without function symbols .",
    "an example of such an atomic formula is @xmath8 , which is a ternary constraint whose relation is defined by @xmath9 for all reals @xmath10 , @xmath11 , and @xmath12 .    in this paper",
    "we translate equation  ( [ ineqex ] ) to a csp with the set of constraints @xmath27    consider a constraint @xmath28 .",
    "the meaning of predicate symbol @xmath7 is a relation , say @xmath29 .",
    "for all @xmath30 , a value @xmath31 for variable @xmath32 is _ inconsistent _ with respect to @xmath29 and domains @xmath33 iff it is not the case that @xmath34 a dro for @xmath7 may replace one or more of the domains @xmath35 by a subset of it if the set difference between the old and the new domains contains inconsistent values only .",
    "a dro is _ optimal _ if every domain is replaced by the smallest domain containing all its consistent values .",
    "we call a constraint _ primitive _ if an optimal dro is available for it that is sufficiently efficiently computed .",
    "what is sufficient depends on the context .      to gain information about the solution set ,",
    "inconsistent values are removed as much as possible with modest computation effort .",
    "for example , dros can be applied as long as they remove inconsistent values .",
    "it is the task of a constraint propagation algorithm to reach as quickly as possible a set of domains that can not be reduced by any dro .",
    "many versions of this algorithm exist @xcite .",
    "they can be regarded as refinements of the algorithm in figure  [ lgpa ] , which we refer to as the _ generic propagation algorithm _ ; gpa for short .",
    "gpa maintains a pool of dros , called _",
    "active set_. no order is specified for applying these operators .",
    "notice that the active set @xmath36 is initialized to contain all constraints .    put all constraints into the active set @xmath36 + while ( @xmath37 ) @xmath38 +",
    "choose a constraint @xmath39 from @xmath36 + apply the dro associated with @xmath39 + if one of the domains has become empty , then stop + add to @xmath36 all constraints involving variables whose domains have changed , if any + remove @xmath39 from @xmath36 + @xmath40      a _ floating - point number _ is any element of @xmath41 , where @xmath42 is a finite set of reals .",
    "a _ floating - point interval _ is a closed connected set of reals , where the bounds , in so far as they exist , are floating - point numbers . when we write `` interval '' without qualification , we mean a floating - point interval . for every bounded non - empty interval @xmath43 , @xmath44 and @xmath45",
    "denote the least and the greatest element of @xmath43 respectively .",
    "they are referred to as the left and the right bound of @xmath43 . if @xmath43 is not bounded from below , then @xmath46 .",
    "similarly , if @xmath43 is not bounded from above , then @xmath47 .",
    "thus , @xmath48 $ ] is a convenient notation for all non - empty intervals , bounded or not .",
    "a _ box _ is a cartesian product of intervals .",
    "moore s idea of solving inequalities such as those in equation ( [ nonlinsys ] ) by means of interval arithmetic is at least as important as the subsequent applications of interval constraints to this problem .",
    "suppose we wish to investigate the presence of solutions of a single inequality in equation ( [ nonlinsys ] ) in a box @xmath49 .",
    "then one evaluates in interval arithmetic the expression in the left - hand side . as values for the variables",
    "@xmath50 one uses the intervals @xmath51 .",
    "suppose the result is the interval @xmath52 $ ] .",
    "we have exactly one of the following three cases . if @xmath53 for at least one @xmath2 , then there are no solutions .",
    "if @xmath54 for all @xmath2 , then all tuples in @xmath49 are solutions . if @xmath55 for at least one @xmath2 , then either of the above may be true .",
    "in this same case of @xmath55 , it may also be that some of the tuples in @xmath49 are solutions , while others are not .",
    "again , in the case where @xmath55 , it may be possible to split @xmath49 . in this way",
    ", a more informative outcome may be obtained for one or both of the results of splitting .",
    "such splits can be repeated as long as possible and necessary .",
    "problems in a wide variety of application areas can be expressed as csps .",
    "domains can be as different as booleans , integers , finite symbolic domains , and reals . in this paper",
    "we consider _ interval csps _",
    "( icsps ) , which are csps where all domains are intervals and all constraints are primitive .",
    "icsps are important because they encapsulate what can be efficiently computed ; they represent layer 2 in the software architecture of figure  [ softarch ] .",
    "the layer is distinct from layer 3 because in equation ( [ nonlinsys ] ) there typically occur atomic formulas that contain function symbols .    to emphasize the role of icsps as a layer of software architecture ,",
    "we view them as a _ virtual machine _ , with a function that is similar to those for prolog or java .",
    "just as a program in prolog or java is translated to virtual machine instructions , a system such as equation ( [ nonlinsys ] ) can be translated to an icsp , as described in a later section .",
    "the instructions of the icsp level are dros , one for each constraint . as an example of such an icsp virtual machine instruction , consider the dro for product constraint .",
    "it reduces the box @xmath56\\times [ c , d]\\times [ e , f]$ ] to the box that has the projections @xmath57 & \\cap & ( [ e , f]/[c , d ] ) ) \\nonumber\\\\ \\varphi([c , d ] & \\cap & ( [ e , f]/[a , b ] ) ) \\nonumber\\\\ \\varphi([e , f ] & \\cap & ( [ a , b]*[c , d ] ) ) \\nonumber\\end{aligned}\\ ] ] here @xmath58 is the function that yields the smallest interval containing its argument .",
    "of particular interest is the effect of the dro when all variables have @xmath15 $ ] as domain . for each argument",
    ", the domain after application of the dro is defined as the _ default domain _ of that argument .",
    "typically , default domains are @xmath15 $ ] .",
    "notable exceptions include the constraint @xmath59 ( defined as @xmath60 ) , where the default domain of @xmath11 is @xmath61 $ ] .",
    "another is @xmath62 ( defined as @xmath63 ) , where the default domain of @xmath11 is @xmath64 $ ] .",
    "a difference with other virtual machines is that a program for the icsp virtual machine is an unordered collection of dros .",
    "programs for other virtual machines are ordered sequences of instructions . in those other virtual machines",
    ", the typical instruction does not specify the successor instruction . by default this is taken to be the next one in textual order .",
    "execution of the successor is implemented by incrementing the instruction counter by one .",
    "the simplicity of the instruction sequencing in conventional virtual ( and actual ) machines is misleading .",
    "many instruction executions concern untypical instructions , where the next instruction is specified to be another than the default next instruction .",
    "examples of such untypical instructions are branches ( conditional or unconditional ) and subroutine jumps .    in the icsp virtual machine , the dros are the instructions , and they form an unordered set . instead of an instruction counter specifying the next instruction , there is the active set of gpa containing the set of possible next instructions . instead of an instruction or a default rule determining the next instruction to be executed",
    ", gpa selects in an unspecified way which of the dros in the active set to execute . in this way",
    ", programs can be declarative : instructions have only meaning in terms of _ what _ is to be computed . _ how _ it is done ( instruction sequencing ) ,",
    "is the exclusive task of the virtual machine .      equation ( [ nonlinsys ] ) may have multiple occurrences of variables in the same formula .",
    "as there are certain advantages in avoiding such occurrences , we rewrite without loss of generality the system in equation  ( [ nonlinsys ] ) to the canonical form shown in figure  [ singlesys ] .",
    "@xmath65    in figure  [ singlesys ] , the expressions for the functions @xmath66 have no multiple occurrences of variables . as a result",
    ", they have variables @xmath67 instead of @xmath22 , with @xmath68 as in equation  ( [ nonlinsys ] ) .",
    "this canonical form is obtained by associating with each of the variables @xmath69 in equation  ( [ nonlinsys ] ) an equivalence class of the variables in figure  [ singlesys ] .",
    "this is done by replacing in equation  ( [ nonlinsys ] ) each occurrence of a variable by a different element of the corresponding equivalence class .",
    "this is possible by ensuring that each equivalence class is as large as the largest number of multiple occurrences .",
    "the predicate @xmath70 is true if and only if all its real - valued arguments are equal .",
    "an advantage of this translation is that evaluation in interval arithmetic of each expression gives the best possible result , namely the range of the function values . at the same time",
    ", the @xmath70 constraint is easy to enforce by making all intervals of the variables in the constraint equal to their common intersection .",
    "this takes information into account from all @xmath71 inequalities .",
    "if the system in its original form as in equation  [ nonlinsys ] , with multiple occurrences , would be translated to a csp , then only multiple occurrences in a single expression would be exploited at one time .    in the coming sections and without loss of generality",
    ", we will only consider expressions without multiple occurrences of variables .",
    "icsps represent what we _ can _ solve .",
    "they consist of atomic formulas without function symbols that , moreover , have efficient dros .",
    "equation ( [ nonlinsys ] ) exemplifies what we _ want _ to solve : it consists of atomic formulas typically containing deeply nested terms .",
    "[ [ the - tree - form - of - a - formula ] ] the tree form of a formula + + + + + + + + + + + + + + + + + + + + + + + + + +    we regard a first - order atomic formula as a tree .",
    "the unique predicate symbol is the root .",
    "the terms that are the arguments of the formula are also trees and they are the subtrees of the root . if the term is a variable , then the tree only has a root , which is that variable .",
    "a term may also be a function symbol with one or more arguments , which are terms . in that case , the function symbol is the root with the argument terms as subtrees .    in the tree form of a formula",
    "the leaves are variables . in addition",
    ", we label every node that is a function symbol with a unique variable .",
    "any constants that may occur in the formula are replaced by unique variables .",
    "we ensure that the associated domains contain the constants and are as small as possible .",
    "[ [ translating - a - formula - to - an - icsp ] ] translating a formula to an icsp + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the tree form of a formula thus labeled is readily translated to an icsp .",
    "the translation has a set of constraints in which each element is obtained by translating an internal node of the tree .",
    "the root translates to @xmath72 where @xmath73 is the predicate symbol that is the root and @xmath74 are the variables labeling the children of the root .",
    "a non - root internal node of the form @xmath75 translates to @xmath76 , where    * @xmath11 is the variable labeling the node * @xmath74 are the variables labeling the child nodes * @xmath42 is the relation defined by @xmath77 iff @xmath78 for all @xmath79",
    ".      propagation may terminate with small intervals for all variables of interest .",
    "this is rare .",
    "more likely , propagation leaves a large box as containing all solutions , if any . to obtain more information about possibly existing solutions ,",
    "it is necessary to split an icsp into two icsps and to apply propagation to both .",
    "an icsp @xmath80 is a result of splitting an icsp @xmath81 if @xmath80 has the same constraints as @xmath81 and differs only in the domain for one variable , say , @xmath10 .",
    "the domain for @xmath10 in @xmath80 is the left or right half of the domain for @xmath10 in @xmath81 .",
    "a _ search strategy _ for an icsp is a binary tree representing the result of successive splits .",
    "search strategies can differ greatly in the effort required to carry them to completion .",
    "the most obvious search strategy is the _ greedy strategy _ : the one that ensures that all intervals become small enough by choosing a widest domain as the one to be split .",
    "this is a plausible strategy in the case where the icsp has a few point solutions . in general ,",
    "the set of solutions is a continuum : a line segment , a piece of a surface , or a variety in a higher dimensional space that has positive volume . in such cases",
    "we prefer the search to result in a single box containing all solutions .",
    "of course we also prefer such a box to be as small as possible .",
    "the greedy search strategy splits the continuum of solutions into an unmanageably large number of small boxes .",
    "it is not clear that the greedy strategy is preferable even in the case of a few well - isolated point solutions . in general",
    "we need a search strategy other than the greedy one .",
    "a more promising search strategy was first described in the ` absolve ` predicate of the bnr prolog system @xcite and by @xcite , where it is called _ box consistency_.    the box consistency search strategy selects a variable and a domain bound .",
    "box consistency uses binary search to determine a boundary interval that can be shown to contain no solutions .",
    "this boundary interval can then be removed from the domain , thus shrinking the domain .",
    "this is repeated until a boundary interval with width less than a certain tolerance is found that can not be shown to contain no solutions .",
    "when this is the case for both boundaries of all variables , the domains are said to be _ box consistent _ with respect to the tolerance used and with respect to the method for showing inconsistency .",
    "when this method is interval arithmetic , we obtain _ functional box consistency_. when it is propagation , then it is called _ relational box consistency _ @xcite .",
    "all we need to know about search in this paper is that greedy search and box consistency are both search strategies and that both can be based on propagation .",
    "box consistency is the more promising search strategy .",
    "thus we need to compare interval arithmetic and propagation as ways of showing that a nonlinear inequality has no solutions in a given box .",
    "this we do in section  [ psi ] .",
    "suppose we have a term that can be evaluated in interval arithmetic .",
    "let us compare the interval that is the result of such an evaluation with the effect of gpa on the icsp obtained by translating the term as described in section  [ translation ] .    to make the comparison possible we define evaluation of a term in interval arithmetic .",
    "the definition follows the recursive structure of the term : a term is either a variable or it is a function symbol with terms as arguments .",
    "if the term is an interval , then the result is that interval .",
    "if the argument is function @xmath6 applied to arguments , then the result is @xmath6 evaluated in interval arithmetic applied to the results of evaluating the arguments in interval arithmetic .",
    "this assumes that every function symbol denotes a function that is defined on reals as well as on intervals .",
    "the latter is called the _ interval extension _ of the former . for a full treatment of interval extensions , see @xcite .",
    "the following lemma appears substantially as theorem 2.6 in @xcite .",
    "[ basic ] let @xmath82 be a term that can be evaluated in interval arithmetic .",
    "let the variables of @xmath82 be @xmath83 .",
    "let @xmath11 be the variable associated with the root of the tree form of @xmath82 .",
    "let @xmath81 be the icsp that results from translating @xmath82 , where the domains of @xmath83 are @xmath84 and where the domains of the internal variables are @xmath15 $ ] .",
    "after termination of gpa applied to @xmath81 , the domain for @xmath11 is the interval that results from interval arithmetic evaluation of @xmath82 .",
    "suppose that a variable of a constraint has domain @xmath15 $ ] .",
    "after applying the dro for that constraint , this domain has become the result of the interval arithmetic operation that obtains the domain for this variable from the domains of the other variables of the constraint .",
    "+ according to @xcite , every fair sequence of dros converges to the same domains for the variables .",
    "these are also the domains on termination of gpa .",
    "let us consider a fair sequence that begins with a sequence @xmath85 of dros that mimics the evaluation of @xmath82 in interval arithmetic . at the end of this",
    ", @xmath11 has the value computed by interval arithmetic .",
    "this shows that gpa gives a result that is a subinterval of the result obtained by interval arithmetic .",
    "+ gpa terminates after activating the dros in @xmath85 .",
    "this is because in the interval arithmetic evaluation of @xmath82 an operation is only performed when its arguments have been evaluated .",
    "this means that the corresponding dro only changes one domain .",
    "this domain is the domain of a unique variable that occurs in only one constraint that is already in the active set .",
    "therefore none of the dro activations adds a constraint to the active set , which is empty after @xmath85 .",
    "gpa yields the same result whatever the way constraints are selected in the active set .",
    "therefore gpa always gives the result of interval arithmetic evaluation .",
    "however , gpa may obtain this result in an inefficient way by selecting constraints that have no effect .",
    "this suggests that the active set be structured in a way that reflects the structure of @xmath82 .",
    "this approach has been taken in @xcite .",
    "the proof shows that , if the active set had not contained any of the constraints only involving internal variables , these constraints would have been added to the active set by gpa .",
    "this is the main idea of selective initialization . by initializing and ordering the active set in a suitable way and leaving gpa otherwise unchanged",
    ", it will obtain the interval arithmetic result with no more operations than interval arithmetic .",
    "this assumes the optimization implied by the totality theorem in @xcite .",
    "a constraint is a _ seed constraint _",
    "iff at least one of its variables has a domain that differs from the default domain assigned to that variable .",
    "for example , the term @xmath86 translates to an icsp with constraints @xmath87 , @xmath88 , and @xmath89 . when the domains are @xmath15 $ ] for all variables , then the seed constraints are @xmath88 and @xmath89 .",
    "when the domains are @xmath15 $ ] for @xmath90 , @xmath91 , and @xmath11 ; @xmath61 $ ] for @xmath92 and @xmath16 , then @xmath87 is the one seed constraint .",
    "when the domains are @xmath15 $ ] for @xmath91 and @xmath11 ; @xmath61 $ ] for @xmath90 , @xmath92 and @xmath16 , then the seed constraints are @xmath87 and @xmath88 .",
    "let psi ( propagation with selective initialization ) be gpa except for the following modifications .",
    "+ ( a ) psi only applies to icsps generated by translation from an atomic formula .",
    "+ ( b ) the active set is a priority queue that is ordered according to the distance from the root of the node that generated the constraint .",
    "the greater that distance , the earlier the item is removed from the queue .",
    "+ ( c ) the active set contains all seed constraints and no other ones .",
    "lemma  [ basic ] says that gpa simulates interval arithmetic as far as the result is concerned .",
    "it does not say anything about the efficiency with which the result is obtained .",
    "theorem  [ simulate ] says that psi obtains the result as efficiently as it is done in interval arithmetic .",
    "this assumes the functionality optimization in the dros @xcite .",
    "[ simulate ] let @xmath81 be the icsp obtained by translating a term @xmath82 in variables @xmath93 , where these variables have domains @xmath35 . applying psi to s terminates after selecting no constraint more than once .",
    "moreover , the root variable ends up with @xmath94 as domain where @xmath94 is the interval resulting from evaluating @xmath82 with @xmath93 substituted by @xmath35 .",
    "suppose gpa is applied to @xmath81 in such a way that all non - seed constraints are selected first .",
    "the execution of the dro corresponding to these non - seed constraints does not change any domains .",
    "therefore these dro executions do not add any constraints . as a result",
    ", the effect of applying gpa is the same as when the active set would have been initialized with only the seed constraints .",
    "+ suppose the seed constraints are selected according to priority order .",
    "this ensures that no future constraint selection re - introduces a constraint previously selected .",
    "thus gpa terminates after activating every seed constraint exactly once .",
    "+ such an execution of gpa coincides step by step with that of psi .",
    "as gpa terminates with the correct result , so does psi .",
    "we briefly reviewed how interval arithmetic can solve systems of nonlinear inequalities .",
    "the fundamental capability turned out to be that of evaluating a term in interval arithmetic .",
    "we saw that this can also be done by applying propagation to icsps generated from arithmetic terms .",
    "we now investigate how to extend this to the use of icsps to solve nonlinear inequalities .",
    "suppose @xmath81 is the icsp resulting from translating @xmath95 let @xmath11 be the variable labeling the left child of the root ; that is , the variable representing the value of the left - hand side .",
    "let @xmath96 be the domains in @xmath81 of @xmath22 , respectively .",
    "now suppose that gpa is applied to @xmath81 .",
    "one possible initial sequence of dro activations is the equivalent of interval arithmetic evaluation of the left - hand side , leaving @xmath97 as the only constraint in the active set with the domain for @xmath11 equal to @xmath52 $ ] , the value in interval arithmetic of @xmath98 .    at this stage",
    "the dro for @xmath97 is executed . if @xmath53 , then failure occurs . if @xmath54 , then the domain for @xmath11 is unchanged .",
    "therefore , no constraint is added to the active set .",
    "termination occurs with nonfailure .",
    "there is no change in the domain of any of @xmath22 .",
    "the third possibility is that @xmath55 . in this case , the domain for @xmath11 shrinks : the upper bound decreases from @xmath99 to @xmath20 .",
    "this causes the constraints to be brought into the active set that correspond to nodes at the next lower level in the tree .",
    "this propagation may continue all the way down to the lowest level in the tree , resulting in shrinking of the domain of one or more of @xmath22 .",
    "let us compare this behaviour with the use of interval arithmetic to solve the same inequality .",
    "in all three cases , gpa gives the same outcome as interval arithmetic : failure or nonfailure .",
    "in the first two cases , gpa gives no more information than interval arithmetic .",
    "it also does no more work .    in the third case",
    ", gpa may give more information than interval arithmetic : in addition to the nonfailure outcome , it may shrink the domain of one or more of @xmath22 .",
    "this is beyond the capabilities of interval arithmetic , which is restricted to transmit information about arguments of a function to information about the value of the function .",
    "it can not transmit information in the reverse direction . to achieve this extra capability , gpa needs to do more work than the equivalent of interval arithmetic evaluation .    in the above",
    ", we have assumed that gpa magically avoids selecting constraints in a way that is not optimal .",
    "in such an execution of gpa we can recognize two phases : an initial phase that corresponds to evaluating the left - hand side in interval arithmetic , followed by a second phase that starts with the active set containing only the constraint @xmath97 .",
    "when we consider the nodes in the tree that correspond to the constraints that are selected , then it is natural to call the first phase bottom - up ( it starts at the leaves and ends at the root ) and the second phase top - down ( it starts at the root and may go down as far as to touch some of the leaves ) .",
    "the bottom - up phase can be performed automatically by the psi algorithm .",
    "the start of the top - down phase is similar to the situation that occurs in search . in both search and in the top - down",
    "phase a different form of selective initialization can be used , shown in the next section .    the bottom - up phase and the top - down phase",
    "are separated by a state in which the active set only contains @xmath97 . for reasons that become apparent in the next section",
    ", we prefer a separate treatment of this constraint : not to add it to the active set and to execute the shrinking of the domain for @xmath11 as an extraneous event .",
    "this is then a special case of termination of gpa , or its equivalent psi , followed by the extraneous event of shrinking one domain .",
    "the pseudo - code for psi algorithm is given in figure  [ psialg ] .",
    "let the active set @xmath36 be a priority queue in which the constraints are + @xmath100 ordered according to the level they occupy in the tree , + @xmath100 with those that are further away from the root placed nearer to the front of the queue + put only * seed * constraints into @xmath36 + while ( @xmath37 ) @xmath38 + choose a constraint @xmath39 from @xmath36 + apply the dro associated with @xmath39 + if one of the domains is empty , then stop + add to @xmath36 all constraints involving variables whose domains have changed , if any + remove @xmath39 from @xmath36 + @xmath40    the correctness of psi algorithm can be easily deduced from the following theorem .",
    "[ modeval ] consider the icsp @xmath101 obtained from the tree @xmath102 of the atomic formula @xmath103 .",
    "suppose we modify gpa so that the active set is initialized to contain instead of all constraints only seed constraints .",
    "suppose also that the active set is a priority queue in which the constraints are ordered according to the level they occupy in the tree @xmath102 , with those that are further away from the root placed nearer to the front of the queue .",
    "then gpa terminates with the same result as when the active set would have been initialized to contain all constraints .    as we did before , suppose that in gpa the active set @xmath36 is initialized with all constraints such that the seed constraints are at the end of the active set . applying any dro of a constraint that is",
    "not a seed constraint will not affect any domain .",
    "thus , the constraints that are not seed constraints can be removed from the active set without changing the result of gpa . since the gpa does not specify any order , @xmath36 can be ordered as desired . here",
    "we choose to order it in such a way we get an efficient gpa when used to evaluate an expression ( see previous section ) .",
    "often we find that after applying gpa to an icsp @xmath81 , the domain @xmath43 for one of the variables , say @xmath10 , is too wide .",
    "search is then necessary .",
    "this can take the form of splitting @xmath81 on the domain for @xmath10 .",
    "the results of such a split are two separate icsps @xmath104 and @xmath105 that are the same as @xmath81 except for the domain of @xmath10 . in @xmath104",
    ", @xmath10 has as domain the left half of @xmath43 ; in @xmath105 , it is the right half of @xmath43 .",
    "however , applying gpa to @xmath104 and @xmath105 entails duplicating work already done when gpa was applied to @xmath81 .",
    "when splitting on @xmath10 after termination of the application of gpa to @xmath81 , we have the same situation as at the beginning of the downward phase of applying gpa to an inequality : the active set is empty and an extraneous event changes the domain of one variable to a proper subset .",
    "the following theorem justifies a form of the psi algorithm where the active set is initialized with what is typically a small subset of all constraints .",
    "[ modsolvegeneral ] let @xmath102 be the tree obtained from the atomic formula @xmath103 .",
    "let @xmath101 be the icsp obtained from @xmath102 .",
    "let @xmath10 be a variable in @xmath101 .",
    "suppose we apply gpa to @xmath101 .",
    "after the termination of gpa , suppose the domain of @xmath10 is changed to an interval that is a proper subset of it .",
    "if we apply gpa to @xmath101 with an active set initialized with the constraints only involving @xmath10 , then gpa terminates with the same result as when the active set would have been initialized to contain all constraints .    to prove theorem  [ modsolvegeneral ]",
    ", we should show that initializing gpa with all constraints gives the same results as when it is initialized with only the constraints involving @xmath10 .    since no ordering is specified for the active set of gpa , we choose an order in which the constraints involving @xmath10 are at the end of the active set .",
    "because dros are idempotent , all constraints at the front of the active set , different from those involving @xmath10 , do not affect any domain . thus removing them from the active set in the initialization process does not change the fixpoint of the gpa .",
    "thus , theorem  [ modsolvegeneral ] is proved .",
    "we have only considered the application of selective initialization to solve a single inequality .",
    "a conjunction of inequalities such as equation  ( [ nonlinsys ] ) can be solved by solving each in turn .",
    "this has to be iterated because the solving of another inequality affects the domain of an inequality already solved .",
    "this suggests performing the solving of all inequalities in parallel .",
    "doing so avoids the waste of completing an iteration on the basis of unnecessarily wide intervals .",
    "it also promises speed - up because many of the dro activations only involve variables that are unique to the inequality . in the current version of the design of our algorithm",
    ", we combine this parallelization with a method of minimizing the complexity usually caused by multiple occurrences of variables .",
    "before interval methods it was not clear how to tackle numerically realistic optimization models . only with the advent of interval arithmetic in the 1960s @xcite one could for the first time at least say : `` if only we had so much memory and so much time , then we could solve this problem . ''",
    "interval arithmetic has been slow in developing . since the 1980s constraint programming has added fresh impetus to interval methods .",
    "conjunctions of nonlinear inequalities , the basis for optimization , can be solved both with interval arithmetic and with constraint programming . in this paper",
    "we relate these two approaches .",
    "it was known that constraint propagation subsumes interval arithmetic .",
    "it was also clear that using propagation for the special case of interval arithmetic evaluation is wasteful . in this paper",
    "we present an algorithm for propagation by selective initialization that ensures that propagation is as efficient in the special case of interval arithmetic evaluation .",
    "we also apply selective initialization for search and for solving inequalities .",
    "preliminary results on a parallel version of the methods presented here suggest that realistic optimization models will soon be within reach of modest computing resources .",
    "we acknowledge generous support by the university of victoria , the natural science and engineering research council nserc , the centrum voor wiskunde en informatica cwi , and the nederlandse organisatie voor wetenschappelijk onderzoek nwo .",
    "frdric benhamou , frdric goualard , laurent granvilliers , and jean - franois puget .",
    "revising hull and box consistency . in _ proceedings of the 16th international conference on logic programming _ , pages 230244 .",
    "mit press , 1999 .",
    "hickey , m.h .",
    "van emden , and h.  wu . a unified framework for interval constraints and interval arithmetic . in michael maher and jean - franois puget , editors , _ principles and practice of constraint programming  cp98 _ , pages 250  264 .",
    "springer - verlag , 1998 .",
    "lecture notes in computer science 1520 .",
    "van emden .",
    "computing functional and relational box consistency by structured propagation in atomic constraint systems . in _ proc .",
    "6th annual workshop of the ercim working group on constraints ; downloadable from corr _ , 2001 .",
    "van emden and b.  moa . using propagation for solving complex arithmetic constraints .",
    "technical report dcs - xxx - ir , department of computer science , university of victoria .",
    "paper cs.na/0309018 in computing research repository ( corr ) ,",
    "september 2003 ."
  ],
  "abstract_text": [
    "<S> numerical analysis has no satisfactory method for the more realistic optimization models . </S>",
    "<S> however , with constraint programming one can compute a cover for the solution set to arbitrarily close approximation . because the use of constraint propagation for composite arithmetic expressions is computationally expensive , </S>",
    "<S> consistency is computed with interval arithmetic . in this paper </S>",
    "<S> we present theorems that support , selective initialization , a simple modification of constraint propagation that allows composite arithmetic expressions to be handled efficiently . </S>"
  ]
}