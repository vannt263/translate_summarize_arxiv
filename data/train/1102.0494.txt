{
  "article_text": [
    "in this paper , we study the magnetic induction equation @xmath0 where the unknown @xmath1 describes the magnetic field of a plasma in three space dimensions with coordinate @xmath2 .",
    "the above equation models the evolution of the magnetic field in the plasma which is moving with a prescribed velocity field @xmath3 .",
    "these equations arise in a wide variety of applications in plasma physics , astrophysics and electrical engineering .",
    "one important application are the equations of magneto - hydro dynamics ( mhd ) .",
    "observe that , by taking divergence on both sides of ( [ eq : induction ] ) we get @xmath4 hence , if @xmath5 , also @xmath6 for @xmath7 .",
    "there are many forms of induction equations available in literature ( see @xcite ) . here",
    "we are going to work with the following `` conservative '' symmetric form , @xmath8 where the @xmath9 denotes the gradient of @xmath10 and the matrix @xmath11 is given by @xmath12 we are aware of some other results in the literature related to induction equation @xcite .",
    "but , boundary conditions were not considered either of the aforementioned papers . in @xcite , authors have described a high order accurate and stable finite difference schemes for the initial - boundary problem associated with the magnetic induction equations .",
    "the approach is based on a `` semi - discrete '' approximation where one discretizes the spatial variable , thereby reducing the equations to a system of ordinary differential equations .",
    "however , we stress that for numerical computations also this set of ordinary differential equations will have to be discretized in order to be solved . thus in order to have a completely satisfactory numerical method , one seeks a fully discrete scheme that reduces the actual computation to a solution of a finite set of algebraic equations .",
    "our aim in this paper is to design stable and high - order accurate `` fully - discrete '' schemes for initial - boundary value problems corresponding to the magnetic induction equations by discretizing the non - conservative symmetric form ( [ eq : induc1 ] ) .",
    "the spatial derivatives are approximated by second and fourth - order sbp ( summation - by - parts ) operators .",
    "the boundary conditions are weakly imposed by using a sat ( simultaneous approximation term ) and backward euler method used for temporal discretization .",
    "the sbp - sat framework has been used to obtain stable and accurate high order schemes for a wide variety of hyperbolic problems in recent years .",
    "see @xcite and the references therein for more details .",
    "the rest of this paper is organized as follows : in section  [ sec : cp ] , we state the energy estimate for the initial - boundary value problem corresponding to ( [ eq : induc1 ] . in section",
    "[ sec : scheme ] , we present the fully - discrete sbp - sat scheme and show stability .",
    "numerical experiments are presented in section  [ sec : numex ] and conclusions are drawn in section  [ sec : conc ] .",
    "for ease of notation , we shall restrict ourselves to two spatial dimensions in the remainder of this paper .",
    "extending the results to three dimensions is straightforward .    in two dimensions ,",
    "the non - conservative symmetric form ( [ eq : induc1 ] ) reads @xmath13 where @xmath14 with @xmath15 and @xmath16 denoting the magnetic and velocity fields respectively . in component form , ( [ eq : main ] ) becomes @xmath17 to begin with , we shall consider ( [ eq : main ] ) in the domain @xmath18 ^ 2 $ ] .    we augment ( [ eq : main ] ) with initial conditions , @xmath19 and dirichlet boundary conditions , @xmath20 where @xmath21 denotes the characteristic function of the set @xmath22 .",
    "note that we only impose boundary conditions on the set where the characteristics are entering the domain .",
    "we shall always assume that the initial and boundary data satisfy the compatibility conditions , i.e. , specific criteria that guarantee smoothness of the solution , see @xcite .",
    "[ theo : cp ] assume that @xmath23 , that @xmath24)$ ] for @xmath25 and that @xmath26 and @xmath27 are in @xmath28)$ ] .",
    "then there exists a function @xmath29,l^2(\\omega))\\cap l^\\infty([0,t];h^1(\\omega))$ ] which is the unique weak solution of ( [ eq : main ] ) with the initial and boundary conditions ( [ eq : initial ] ) and ( [ eq : boundary ] ) .",
    "furthermore , it satisfies the following stability estimate @xmath30 where @xmath31 is a positive constant .",
    "to simplify the treatment of the boundary terms we let the computational domain @xmath32 be the unit square .",
    "it is straightforward to generalize our results to other domains by coordinate transformations ( see @xcite ) , and to three dimensions .",
    "the sbp finite difference schemes for one - dimensional derivative approximations are as follows .",
    "let @xmath33 $ ] be the domain discretized with @xmath34 , @xmath35 .",
    "a scalar grid function is defined as @xmath36 . to approximate @xmath37 we use a summation - by - parts operator @xmath38 , where @xmath39 is a diagonal positive @xmath40 matrix , defining an inner product @xmath41 such that the associated norm @xmath42 is equivalent to the norm @xmath43 .",
    "furthermore , for @xmath44 to be a summation - by - parts operator we require that @xmath45 where @xmath46 and @xmath47 are the @xmath40 matrices : @xmath48 and @xmath49 respectively .",
    "similarly , we can define a summation - by - parts operator @xmath50 approximating @xmath51 .",
    "later we will also need the following lemma , proven in @xcite .",
    "[ lemma : variable ] let @xmath52 be a smooth grid function . then @xmath53 ) } { \\left\\|w\\right\\|}_{p_x }   \\end{aligned}\\ ] ] where @xmath54 .",
    "next , we move on to the two - dimensional case and discretize the unit square @xmath33 ^ 2 $ ] using @xmath55 uniformly distributed grid points @xmath56 for @xmath57 , and @xmath58 , such that @xmath59 .",
    "we order a scalar grid function @xmath60 as a column vector @xmath61    to obtain a compact notation for partial derivatives of a grid function , we use kronecker products .",
    "the kronecker product of an @xmath62 matrix @xmath22 and an @xmath63 matrix @xmath64 is defined as the @xmath65 matrix @xmath66 for appropriate matrices @xmath22 ,",
    "@xmath64 , @xmath67 and @xmath68 , the kronecker product obeys the following rules : @xmath69 using kronecker products , we can define 2-d difference operators .",
    "let @xmath70 denote the @xmath71 identity matrix , and define @xmath72 for a smooth function @xmath73 , @xmath74 and similarly @xmath75 .",
    "set @xmath76 , define @xmath77 and the corresponding norm @xmath78 .",
    "also define @xmath79 , @xmath80 , @xmath81 and @xmath82 .    for a vector valued grid function @xmath83 , we use the following notation @xmath84 and so on . in the same spirit",
    ", the @xmath85 inner product of vector valued grid functions is defined by @xmath86 .",
    "we also introduce ( a small ) time step @xmath87 , and use the notation @xmath88 for any function @xmath89 \\rightarrow { \\mathbb{r}}$ ] . write @xmath90 for @xmath91 .",
    "we will use the notation @xmath92 and so on .",
    "note that the kronecker products is just a tool to facilitate the notation . in the implementation of schemes using the operators in the kronecker products we can think of these as operating in their own dimension , i.e. , on a specific index .",
    "thus , to compute @xmath93 , we can view @xmath94 as a field with two indices , and the one - dimensional operator @xmath44 will operate on the first index since it appears in the first position in the kronecker product .",
    "the usefulness of summation by parts operators comes from this lemma .",
    "[ lem : byparts ] for any grid functions @xmath95 and @xmath94 , we have @xmath96 w\\\\         \\left(v,{\\mathfrak{d}}_yw\\right)_{{\\mathbf{p } } } + \\left({\\mathfrak{d}}_yv , w\\right)_{{\\mathbf{p } } } & =         v^t \\left[({\\mathcal{u}}- { \\mathcal{d}})(p_x \\otimes i_m)\\right ] w.      \\end{aligned}\\ ] ]    observe that this lemma is the discrete version of the equality @xmath97    we calculate @xmath98 the second equality is proved similarly .",
    "before we define our numerical schemes , we collect some useful results in a lemma .    [",
    "lem : kurlkurl ] if @xmath52 is a grid function , then @xmath99 \\left(u\\circ{\\mathbf{v}}\\right )        \\\\        & \\qquad +        \\frac{1}{2}\\left(u\\circ { \\mathfrak{d}}_x { \\mathbf{v}}- { \\mathfrak{d}}_x\\left(u\\circ { \\mathbf{v}}\\right ) ,          { \\mathbf{v}}\\right)_{{\\mathbf{p } } } ,        \\\\        \\left({\\mathbf{v}},u\\circ{\\mathfrak{d}}_y{\\mathbf{v}}\\right)_{{\\mathbf{p } } } & = \\frac{1}{2 } { \\mathbf{v}}^t        [ ( { \\mathcal{u}}-{\\mathcal{d}})(p_x\\otimes i_m ) ] \\left(u\\circ{\\mathbf{v}}\\right )        \\\\        & \\qquad +         \\frac{1}{2}\\left(u\\circ { \\mathfrak{d}}_y { \\mathbf{v}}- { \\mathfrak{d}}_y\\left(u\\circ { \\mathbf{v}}\\right ) ,          { \\mathbf{v}}\\right)_{{\\mathbf{p}}}.      \\end{aligned}\\ ] ]    to show , first note that since @xmath85 is diagonal , @xmath100 .",
    "we use lemma  [ lem : byparts ] to calculate @xmath101 this shows the first equation in , the second is proved similarly .",
    "now we are in a position to state our scheme(s ) . for @xmath102 or @xmath103 we will use the notation @xmath104 for both the grid function defined by the function @xmath105 and for the function itself .",
    "similarly , for the boundary values , we use the notation @xmath106 and @xmath107 for both discrete and continuously defined functions .",
    "hopefully , it will be apparent from the context what we refer to .",
    "the differential equation will be discretized in an obvious manner .",
    "we incorporate the boundary conditions by penalizing boundary values away from the desired ones with a @xmath108 term . to this end set @xmath109,\\ ] ] where @xmath110 , @xmath111 , @xmath112 and @xmath113 are diagonal matrices , with components @xmath114 ordered in the same way as in ( ) ( and similarly for the other penalty matrices ) , to be specified later .    with this notation",
    "the scheme for the differential equation reads @xmath115 while @xmath116 is given .",
    "here @xmath117 denotes the matrix @xmath118    [ thm : stab1 ] let @xmath119 be as solution to with @xmath120 . if the constants in @xmath121 is chosen as @xmath122 then @xmath123 where @xmath124 , @xmath125 , for @xmath126 .",
    "@xmath127 is a constant chosen in such a way that @xmath128 for sufficiently small @xmath129 , where @xmath130 is a constant depending on @xmath26 , @xmath27 , and their derivative approximations , but not on @xmath131 or @xmath132 .",
    "taking the @xmath85 inner product of and @xmath133 , we get @xmath134 using lemma  [ lem : kurlkurl ] we get @xmath135(u^{1,n+1}\\circ { \\mathbf{v}}^{n+1 } ) \\\\ & - { \\delta t}\\frac{1}{2 } \\b(v^{n+1})^t\\left [        ( { \\mathcal{u}}-{\\mathcal{d}})(p_x\\otimes i_m)\\right](u^{2,n+1}\\circ { \\mathbf{v}}^{n+1 } )      \\\\      & - { \\delta t}\\frac{1}{2}\\left(u^{1,n+1}\\circ { \\mathfrak{d}}_x { \\mathbf{v}}^{n+1 } - { \\mathfrak{d}}_x(u^{1,n+1}\\circ        { \\mathbf{v}}^{n+1}),{\\mathbf{v}}^{n+1}\\right)_{{\\mathbf{p } } } \\\\ & - { \\delta t}\\frac{1}{2}\\left(u^{2,n+1}\\circ { \\mathfrak{d}}_y { \\mathbf{v}}^{n+1 } -        { \\mathfrak{d}}_y(u^{2,n+1}\\circ { \\mathbf{v}}^{n+1}),{\\mathbf{v}}^{n+1}\\right)_{{\\mathbf{p } } }      \\\\      & \\qquad + { \\delta t}\\left({\\mathbf{v}}^{n+1},c{\\mathbf{v}}^{n+1}\\right)_{{\\mathbf{p } } } + { \\delta t}\\left({\\mathbf{v}}^{n+1 } , \\mathcal{b}{\\mathbf{v}}^{n+1}\\right)_{{\\mathbf{p}}}.    \\end{aligned}\\ ] ] note that by , @xmath136 for some constant @xmath130 depending on the first derivatives of @xmath26 and @xmath27 . using the conditions ( [ eq : primeconstants ] ) we arrive at @xmath137",
    "now we can use the fact that @xmath128 for sufficiently small @xmath129 .",
    "consequently this gives the required bound .",
    "we test the fully - discrete sbp - sat scheme of the previous section on a suite of numerical experiments in order to demonstrate the effectiveness of these schemes .",
    "we will use two different schemes : @xmath138 and @xmath139 scheme which are second - order ( first - order ) and fourth order ( second - order ) accurate in the interior ( boundary ) resulting in an overall second and third - order of accuracy .    in this experiment ,",
    "we consider ( [ eq : main ] ) with the divergence - free velocity field @xmath140 .",
    "the exact solution can be easily calculated by the method of characteristics and takes the form @xmath141 where @xmath142 is a rotation matrix with angle @xmath143 and represents rotation of the initial data about the origin .",
    "we consider the same test setup as in @xcite and @xcite by choosing the divergence free initial data , @xmath144 and the computational domain @xmath145 \\times [ -1,1]$ ] .",
    "since the exact solution is known in this case , one can in principle use this to specify the boundary data @xmath107 .",
    "instead , we decided to mimic a free space boundary ( artificial boundary ) by taking @xmath146 .",
    "( which is a good guess at a far - field boundary ) .",
    "we run this test case with @xmath138 and @xmath139 schemes and present different sets of results . in figure",
    "[ fig:1 ] , we plot @xmath147 at times @xmath148 ( half - rotation ) and @xmath149 ( one full rotation ) with the @xmath138 and @xmath139 schemes .",
    "+    [ fig:1 ]    as shown in this figure , @xmath138 and @xmath139 schemes resolve the solution quite well .",
    "in fact , @xmath139 is very accurate and keeps the hump intact throughout the rotation .",
    ".relative percentage errors in @xmath150 for @xmath151 at time @xmath152 and rates of convergence with @xmath138 and @xmath139 schemes . [",
    "cols=\"^,>,>,>,>\",options=\"header \" , ]     in table [ tab:1 ] , we present percentage relative errors in @xmath150 .",
    "the errors are computed at time @xmath153 ( one rotation ) on a sequence of meshes for both the @xmath138 and @xmath139 schemes .",
    "the results show that the errors are quite low , particularly for @xmath139 and the rate of convergence approaches the expected values of @xmath103 for @xmath138 and @xmath154 for @xmath139 .",
    "furthermore , the order of accuracy is unaffected at these resolutions by using zero dirichlet boundary data instead of the exact solution at the boundary .",
    "we have considered a fully - discrete scheme for the magnetic induction equations that arise as a submodel in the mhd equations of plasma physics . in future ,",
    "our plan is to extend the semi - discrete scheme given in @xcite to a semi - implicit fully - discrete scheme .",
    "we would like to show the stabilty of the aforementioned semi - implicit scheme in case of magnetic induction equations with resistivity ."
  ],
  "abstract_text": [
    "<S> we describe high order accurate and stable fully - discrete finite difference schemes for the initial - boundary value problem associated with the magnetic induction equations . </S>",
    "<S> these equations model the evolution of a magnetic field due to a given velocity field . </S>",
    "<S> the finite difference schemes are based on summation by parts ( sbp ) operators for spatial derivatives and a simultaneous approximation term ( sat ) technique for imposing boundary conditions . </S>",
    "<S> we present various numerical experiments that demonstrate both the stability as well as high order of accuracy of the schemes . </S>"
  ]
}