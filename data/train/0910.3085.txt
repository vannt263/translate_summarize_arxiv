{
  "article_text": [
    "guarded second - order logic ( @xmath1 ) is the variant of monadic second - order logic ( @xmath2 ) where one can not only quantify over sets of vertices but also over sets of edges .",
    "this modification results in a large increase of expressive power .",
    "statements that can be expressed in guarded second - order logic , but not in monadic second - order logic , include the existence of certain minors in a graph and the existence of hamiltonian paths .",
    "the high expressive power of guarded second - order logic means that most @xmath1-theories are quite complicated . in  @xcite seese",
    "has shown that every class of graphs with infinite tree width has an undecidable @xmath1-theory .",
    "this result immediately generalises to hypergraphs .",
    "it follows that all classes of hypergraphs with a decidable @xmath1-theory are _",
    "@xmath0-sparse , _ for some  @xmath0 , which roughly means that their members have few edges . for classes of countable @xmath0-sparse hypergraphs , courcelle  @xcite has shown that every @xmath1-formula is equivalent to an @xmath2-formula over such a class .",
    "it follows that over every class of countable hypergraphs with a decidable @xmath1-theory guarded second - order logic and monadic second - order logic have the same expressive power .",
    "unfortunately , the proof of theorem  1.4 in  @xcite contains an error . in the first part of the present article we give a new proof of this theorem .",
    "in addition , we extend the result from countable hypergraphs to hypergraphs of arbitrary cardinality .    when we look at the results of the first part we see that most of them concern the coding of sets of vertices by single vertices . in the abstract",
    ", this problem can be stated as follows.08em : given a set @xmath3 of finite sets of vertices , find a definable function @xmath4 that is injective . in our concrete case",
    ", @xmath5 is the set of edges . in the second part of the paper we consider more general instances of this problem where @xmath6  can be arbitrary .",
    "this generalisation is inspired by a result of colcombet and lding  @xcite on set interpretations .",
    "their main technical result is a method to transform a definable finite - to - one function @xmath7 into an injective one .",
    "colcombet and ldung consider as background structure only the infinite binary tree .",
    "below we show that using guarded second - order parameters , i.e. , sets of edges , we can extend some of their results to arbitrary graphs .",
    "the overview of the article is a follows .",
    "we start in section  [ sect : sparse orientations ] with basic definitions and a survey of results on definable orientations of sparse hypergraphs . in section  [",
    "sect : spanning tree ] we prove the general version of the one technical result of  @xcite whose proof does not extend to arbitrary cardinalities .",
    "in section  [ sect : gso and mso ] we summarise the consequences for the expressive power of guarded second - order logic on sparse hypergraphs .    section  [ sect : flow ] contains the second part of the article .",
    "we study network flow problems and we show how to use flows to transform definable finite - to - one maps into injective ones .",
    "let us fix our terminology regarding graphs and hypergraphs .",
    "when we say ` graph ' we will mean an undirected one .",
    "undirected graphs will always be simple and loop free , whereas directed graphs will be simple , but they may contain loops .",
    "when dealing with hypergraphs we will sometimes allow multiple edges .",
    "such a hypergraph is a two - sorted structure @xmath8 where @xmath9  is the set of vertices , @xmath10  the set of edges , and @xmath11 the incidence relation . using sloppy notation we will tacitly identify an edge @xmath12 of such a hypergraph with the set @xmath13 of its vertices and we write @xmath14 instead of @xmath15 .",
    "similarly , if @xmath16 is a set of edges then the union  @xmath17 consists of all vertices incident with at least one edge of  @xmath6",
    ". we will use this notation even if there are multiple edges .",
    "_ monadic second - order logic _ ( @xmath2 ) extends first - order logic by variables and quantifiers that range over sets of vertices .",
    "similarly , _ guarded second - order logic _ ( @xmath1 ) extends first - order logic by variables and quantifiers ranging over sets of vertices or sets of edges ( for detailed definitions see @xcite ) .",
    "we will also consider _ weak monadic second - order logic _ ( @xmath18 ) where quantification is restricted to _",
    "finite _ sets of vertices .",
    "let @xmath19 be a hypergraph .",
    "a.   we say that @xmath20  has _ rank _",
    "@xmath21 if every edge of  @xmath20 has at most  @xmath21 vertices .",
    "b.   a _ subhypergraph _ of  @xmath20 is a hypergraph @xmath22 with @xmath23 and @xmath24 .",
    "c.   let @xmath25 . the subhypergraph",
    "_ induced by  @xmath26 _ is @xmath27    in order to translate @xmath1-formulae into @xmath2-formulae , we have to encode sets of edges by sets of vertices . a simple way to do so consists in choosing an _ orientation _ of the hypergraph , i.e. , a function assigning to each edge one of its vertices .",
    "let @xmath19 be a hypergraph .",
    "a.   an _ _ orientation _ _ of  @xmath20 is a function @xmath28 with @xmath29 , for all @xmath12 .",
    "we say that a formula  @xmath30 _ defines _ an orientation  @xmath31 of  @xmath20 if we have @xmath32 b.   an orientation  @xmath31 is _ bounded by  @xmath0 _ if @xmath33 c.   we call  @xmath20 _ @xmath2-orientable _ if there exist an @xmath2-formula  @xmath34 with parameters @xmath35 defining an orientation of  @xmath20 .",
    "similarly , we say that @xmath20  is _",
    "@xmath1-orientable _ if there exist a @xmath1-formula  @xmath36 with parameters @xmath35 and @xmath37 defining an orientation of  @xmath20 .",
    "in this paper we are mainly interested in _ sparse _ hypergraphs , i.e. , hypergraphs with few edges .",
    "a hypergraph @xmath19 is _",
    "_ @xmath0-sparse__-sparse . _",
    "courcelle also introduces a notion of a _",
    "@xmath0-sparse _ graph . since",
    "uniform sparsity is the more robust notion , and the only one we will use in this paper , we have changed terminology for brevity .",
    "a related notion is the _ arboricity _ of a graph ( see , e.g. , section 2.4 of  @xcite ) . ]",
    "if @xmath38    let @xmath39 be a graph .    if the degree of  @xmath40 is at most  @xmath41 , then @xmath40  is @xmath0-sparse .",
    "if @xmath40  is planar , then it is @xmath42-sparse .",
    "if @xmath43 is a finite induced subgraph of  @xmath40 then @xmath44    this follows from the fact that every planar graph with @xmath45  vertices has at most @xmath46 edges ( see , e.g. , corollary  4.2.10 of  @xcite ) .    in the next section",
    "we will prove that every hypergraph of bounded rank is @xmath1-orientable . in the remainder of this section",
    "we show that @xmath0-sparse hypergraphs are even @xmath2-orientable . for countable hypergraphs",
    "these results are all due to courcelle  @xcite .",
    "the only thing new in the present section are two applications of the compactness theorem for first - order logic to extend the results to uncountable hypergraphs .",
    "the proofs in section  [ sect : spanning tree ] , on the other hand , are mostly new .",
    "[ lem : k - sparse hypergraphs and orientations ] a hypergraph @xmath19 ( possibly with multiple edges ) of finite rank is @xmath0-sparse if and only if there exists an orientation of  @xmath20 that is bounded by  @xmath0 .    for @xmath47 ,",
    "let @xmath48 be finite .",
    "then @xmath49 @xmath50 first , let us consider the case where @xmath20  is finite . if @xmath31  is an arbitrary orientation of  @xmath20 then @xmath51 hence , if there is some element @xmath52 with @xmath53 then there must be some other element @xmath54 with @xmath55 .",
    "let us define the _ weight _ of an orientation by @xmath56 we have to construct an orientation of weight  @xmath57 .",
    "to do so we transform an orientation  @xmath31 with @xmath58 into one with smaller weight .",
    "given  @xmath31 , fix an element @xmath52 with @xmath53 .",
    "let @xmath16 be the smallest subset of  @xmath10 such that @xmath59  belongs to the set @xmath60 and we have @xmath61 , for every element @xmath62 .",
    "the subhypergraph  @xmath63 induced by  @xmath64 is @xmath0-sparse .",
    "hence , there exists some element @xmath65 with @xmath55 . by choice of  @xmath6",
    "we can find a sequence of edges @xmath66 with @xmath67 we define a new orientation  @xmath68 by setting @xmath69 it follows that @xmath70 hence , @xmath71 .",
    "repeating this construction we obtain an orientation  @xmath31 with @xmath72 .    the general case where @xmath20  may be infinite can be proved using the compactness theorem for first - order logic .",
    "let @xmath73  be the elementary diagram of  @xmath20 ( i.e. , the set of all first - order formulae with parameters that hold in  @xmath20.08em ; see @xcite for details ) where we consider  @xmath20 as a two - sorted structure @xmath8 with a binary incidence relation  @xmath74 .",
    "we can write down a formula  @xmath75 stating that @xmath28 is a function such that    1 .",
    "@xmath76 , for all @xmath77 2 .",
    "@xmath78 , for all @xmath79    by assumption and the first part of the proof , every finite subset of @xmath80 is satisfiable .",
    "therefore , according to the compactness theorem , there exists a model @xmath81 of @xmath80 . by the diagram lemma ( see , e.g. , @xcite ) , we can find an elementary embedding @xmath82 ( i.e. , an embedding preserving every first - order formula ) .",
    "since every edge of  @xmath20 has only finitely many vertices it follows that @xmath83 hence , we can define the desired orientation of  @xmath20 by @xmath84 .",
    "it turns out that the orientation obtained via the preceding lemma is @xmath2-definable .",
    "the following sequence of lemmas shows how we can encode such an orientation by a finite set of unary predicates .",
    "let @xmath19 be a directed graph and @xmath40 an undirected one .",
    "every orientation  @xmath31 of  @xmath40 induces an directed graph  @xmath85 by orienting every edge  @xmath86 of  @xmath40 such that it points to the vertex  @xmath87 .",
    "an _ @xmath20-orientation _ of  @xmath40 consists of a pair @xmath88 where @xmath31  is an orientation of  @xmath40 and @xmath89  is a homomorphism @xmath90 .",
    "we say that an @xmath20-orientation @xmath88 is _ bounded by  @xmath0 _ if @xmath31  is bounded by  @xmath0 .",
    "we say that a family  @xmath91 of unary predicates _ encodes _ an @xmath20-orientation @xmath88 of  @xmath40 if @xmath92 , for all @xmath93 .",
    "[ lem : encoding of h - orientations definable ] for every finite graph  @xmath20 , there exists a first - order formula  @xmath94 such that @xmath95    let @xmath96 be an enumeration of the vertices of  @xmath20 .",
    "all @xmath94 has to say is that the  @xmath97 form a partition of the vertices ( some  @xmath97 may be empty ) and that there is no edge @xmath98 of  @xmath40 such that @xmath99 , @xmath100 and @xmath101 is _ not _ an edge of  @xmath20 .    for every @xmath102",
    ", there exists a finite loop - free directed graph  @xmath103 with antisymmetric edge relation that has the following property . for",
    "every finite directed graph  @xmath40 , with irreflexive and antisymetric edge relation and indegree at most  @xmath0 , there exists a homomorphism @xmath104 .",
    "[ cor : existence of bounded orientations ] every @xmath0-sparse undirected graph has a @xmath103-orientation which is bounded by  @xmath0 .    in lemma  [ lem : k - sparse hypergraphs and orientations ] , we have shown that such a graph @xmath39 has an orientation @xmath28 that is bounded by  @xmath0 .",
    "it follows that @xmath85  has indegree at most  @xmath0 . by the theorem",
    ", there exists a homomorphism @xmath105 .",
    "thus , @xmath88 is the desired @xmath103-orientation .",
    "[ lem : t - orientations definable ] for every @xmath102 , there exists a first - order formula  @xmath106 such that @xmath107    note that the homomorphism  @xmath89 of a @xmath103-orientation @xmath88 uniquely determines the orientation  @xmath31 since the edge relation of  @xmath103 is antisymmetric .",
    "in particular , the parameters  @xmath108 encoding @xmath88 tell us whether @xmath31  is bounded by  @xmath0 .",
    "hence , we can obtain  @xmath106 by adding a check for boundedness to the formula  @xmath109 of lemma  [ lem : encoding of h - orientations definable ] .",
    "the class of all @xmath0-sparse undirected graphs is finitely @xmath2-axiomatisable .    by lemma  [ lem",
    ": k - sparse hypergraphs and orientations ] and corollary  [ cor : existence of bounded orientations ] it follows that a graph  @xmath40 is @xmath0-sparse if and only if it has a @xmath103-orientation that is bounded by  @xmath0 .",
    "hence , we can use the formula @xmath110 where @xmath111  is the formula from lemma  [ lem : t - orientations definable ] .    in order",
    "to apply these results to hypergraphs we use the following construction associating a graph with every hypergraph .",
    "let @xmath19 be a hypergraph with orientation  @xmath31 .",
    "we define a directed graph @xmath112 with edge relation @xmath113    let @xmath19 be a @xmath0-sparse hypergraph of rank  @xmath21 where @xmath114 and @xmath115 .",
    "then @xmath20  has an orientation  @xmath31 that is bounded by  @xmath116 such that the edge relation of @xmath117 is antisymmetric .",
    "first , we consider the case that @xmath20  is finite .",
    "we call an element @xmath52 _ bad _ for an orientation  @xmath31 of  @xmath20 if there is some element  @xmath54 such that @xmath117 contains both edges @xmath118 and @xmath119 . note that this implies that the vertex  @xmath120 is also bad .",
    "we construct a sequence of orientations  @xmath121 such that @xmath122 and the number of bad elements decreases at every step .",
    "we start with an arbitrary orientation  @xmath123 bounded by  @xmath0 .",
    "given an orientation  @xmath124 with the above properties we construct a new orientation  @xmath125 with fewer bad elements as follows .",
    "let @xmath59  be a bad element , set @xmath126 , and let @xmath127 since @xmath59  is bad we have @xmath128 note that every element of the form @xmath129 with @xmath130 is also bad since , by definition of  @xmath131 , there is an edge @xmath132 with @xmath133 consequently , @xmath134 contains the edges @xmath119 ( since @xmath135 ) and @xmath118 ( since @xmath136 ) .",
    "it follows that @xmath137 we define the new orientation  @xmath125 by @xmath138 then we have @xmath139 in particular , @xmath125  is bounded by  @xmath116 . by construction ,",
    "the element  @xmath59 is not bad for  @xmath125 .",
    "furthermore , if @xmath140 is an edge in @xmath141 with @xmath142 then this edge is induced by an edge  @xmath86 in  @xmath20 with @xmath143 .",
    "hence , @xmath140 is also an edge of  @xmath134 .",
    "therefore , every element that is bad for @xmath125 is also bad for  @xmath124 .",
    "it remains to prove the claim for infinite hypergraphs  @xmath20 .",
    "let @xmath144  be the union of the elementary diagram of  @xmath20 and formulae stating that @xmath31  is an orientation of  @xmath20 that is bounded by  @xmath116 and that @xmath117 has an antisymmetric edge relation .",
    "if @xmath145  is a model of  @xmath144 then there exists an embedding @xmath146 and the desired orientation of  @xmath20 can be obtained via  @xmath89 from that of  @xmath145 .",
    "hence , it is sufficient to show that @xmath144  is satisfiable .",
    "note that every finite subset @xmath147 is satisfiable since every finite substructure of  @xmath20 has an orientation of the desired form . by the compactness theorem it follows that @xmath144  is satisfiable .",
    "while @xmath0-sparse hypergraphs are @xmath2-orientable there are hypergraphs without an @xmath2-definable orientation .",
    "for instance , the countably infinite clique is such a graph . in this section",
    "we will show that every hypergraph of bounded rank is at least @xmath1-orientable .",
    "a basic tool the proof below is based on is the notion of a spanning tree of a hypergraph . before presenting the rather involved definition for hypergraphs",
    "let us start with considering the simpler case of graphs .    for a countable undirected graph  @xmath40 we can define a _ depth - first spanning tree _ to be a spanning tree  @xmath148 of  @xmath40 where no edge of  @xmath40 connects disjoint subtrees of  @xmath148 ( see @xcite.08em ; in  @xcite such trees are called",
    "_ normal _ ) .",
    "to generalise this definition to uncountable graphs we have to admit trees of arbitrary ordinal height .",
    "such trees are necessarily _ order trees , _",
    "i.e. , partial orders @xmath149 where @xmath150  is a _ tree order , _ that is , a partial order such that any two elements have an infimum and , for every element  @xmath59 , the set of all elements below  @xmath59 is well - ordered .",
    "unfortunately , we can not in general hope to have a spanning subgraph that is an order tree , since the partial order  @xmath150 requires too many edges .",
    "therefore , we will use a hybrid between an ordinary tree and an order tree .",
    "the precise definition of a spanning tree  @xmath148 of a graph  @xmath40 is as follows . instead of requiring  @xmath148 to be a subgraph of  @xmath40 we consider trees  @xmath148 such that    1 .",
    "for every vertex  @xmath151 of  @xmath148 with immediate predecessor  @xmath152 , the edge @xmath153 belongs to  @xmath40 , and 2 .   for every vertex  @xmath151 of  @xmath148 without immediate predecessor , we can fix an increasing chain @xmath154 of predecessors of  @xmath151 with limit  @xmath151 and a family @xmath155 of paths from  @xmath151 to  @xmath156 .",
    "hence , every vertex  @xmath151 of  @xmath148 is attached to its predecessors via some auxiliary graph  @xmath157 that is either a single edge or a tree with root  @xmath151 whose leaves form an increasing sequence of predecessors of  @xmath151 with limit  @xmath151 .",
    "consider the complete graph @xmath158 , for an uncountable cardinal  @xmath159 .",
    "we can enumerate the vertices of  @xmath158 as @xmath160 where the index  @xmath161 ranges over all ordinals less than  @xmath159 . as depth - first spanning tree of this graph",
    "we can use a chain of length  @xmath159 as follows .",
    "we set @xmath162 where @xmath163 is the set of all vertices and @xmath164 the first part of  @xmath10 consists of the successor edges , whereas the second part contains the auxiliary graphs  @xmath165 attaching a limit vertex  @xmath166 to its predecessors .",
    "to generalise these ideas to hypergraphs we need a suitable replacement for the trees  @xmath157 .",
    "unfortunately , not every hypergraph has a spanning tree .",
    "a typical example is the hypergraph        instead , we will use certain tree - like hypergraphs called _ priority trees .",
    "_    let @xmath19 be a hypergraph .",
    "a _ hyperpath _ in  @xmath20 is a sequence @xmath167 of edges such that @xmath168",
    "if @xmath169 and @xmath170 then we say that the hyperpath _ connects @xmath171  and  @xmath152 .",
    "_    let @xmath19 be a hypergraph of rank at most  @xmath21 , @xmath172 be a subhypergraph of  @xmath20 with @xmath173 , and suppose that there are partitions @xmath174    ( a)suppose that @xmath175 with @xmath176 and @xmath177 .",
    "we define by induction when such a tuple  @xmath148 is a _ priority tree . _",
    "the element  @xmath152 is called the _ root _ of  @xmath148 and @xmath178  is its set of _ leaf edges .",
    "_    we start the induction with the case where @xmath6  consists of a single hyperpath @xmath167 with @xmath179 , we have @xmath180 , @xmath181 , and @xmath182 . then @xmath148  is a priority tree .",
    "we also call @xmath148  a priority tree if it can be obtained from a priority tree @xmath183 with the same root  @xmath152 by adding a hyperpath @xmath167 such that @xmath184 where @xmath0  is the minimal index such that @xmath185 . this is the successor case of the induction step .",
    "finally , we also have a limit case .",
    "suppose that @xmath186 is an increasing chain of priority trees .",
    "that is , the sequences @xmath187 , @xmath188 , @xmath189 , @xmath190 , and @xmath191 are all increasing , and all trees  @xmath192 have the same root  @xmath152 .",
    "then @xmath148  is a priority tree if it is the union of this chain , that is , if @xmath193    ( b)a _ branch _ of  @xmath148 is a hyperpath @xmath194 satisfying the following conditions.08em :    1 .",
    "@xmath195 contains the root  @xmath152 of  @xmath196 .",
    "2 .   let @xmath197  be the index such that @xmath198 .",
    "we have @xmath199 , for every @xmath200 . furthermore , if @xmath201 then @xmath202    ( c)with each priority tree  @xmath148 we associate two relations , an order  @xmath150 on  @xmath6 defined by @xmath203 and an equivalence relation  @xmath204 on  @xmath196 defined by @xmath205    consider the following priority tree with edges @xmath206 where we have labelled each vertex in  @xmath207 by the index  @xmath208 . the edge colours are given by @xmath209 , @xmath210 , @xmath211 .",
    "the ordering  @xmath150 is displayed to the right .",
    "recall that a _ tree order _ is a partial order such that any two elements have an infimum and , for every element  @xmath59 , the set of all elements below  @xmath59 is well - ordered .",
    "a  _ preorder _ is a reflexive and transitive relation . every preorder  @xmath212 induces an equivalence relation @xmath213 .",
    "the equivalence classes of this relation are called _ @xmath212-classes .",
    "_    let @xmath148  be a priority tree .",
    "the order  @xmath150 on the edges is a tree order .",
    "the proof consists of a straightforward but tedious induction following the construction of priority trees .",
    "[ lem : existence of priority trees ] let @xmath19 be a connected hypergraph of rank at most  @xmath21 .    for each vertex @xmath93 and every set @xmath214 of edges ,",
    "there exists a priority tree @xmath215 with root  @xmath152 such that @xmath216 and @xmath217 .    for every @xmath1-formula @xmath218 ( possibly with parameters )",
    ", there exists a @xmath1-formula @xmath219 ( with parameters ) such that , if @xmath220  defines a well - order on  @xmath221 and @xmath148  is a priority tree as in   then @xmath219  defines a linear order on  @xmath196 .",
    "( a)let @xmath222 be an enumeration of  @xmath221 .",
    "for every @xmath223 , we fix a hyperpath @xmath224 connecting  @xmath152 with @xmath225 .",
    "we construct  @xmath148 by induction on  @xmath208 .",
    "we start with the hyperpath  @xmath226 . at step @xmath227",
    "we determine the shortest suffix @xmath228 of the path  @xmath229 that meets the tree constructed so far and we add this suffix to the tree .",
    "( if @xmath230 we leave the tree unchanged . ) we choose the least index  @xmath0 with @xmath231 and we put the new edges into  @xmath232 and the new vertices into  @xmath233 .",
    "the limit of this construction is the desired priority tree .",
    "( b)the equivalence relation  @xmath204 associated with  @xmath148 is @xmath2-definable in  @xmath20 with the help of the parameters @xmath196 ,  @xmath6 , @xmath234 , and  @xmath207 .",
    "we denote the @xmath204-class of a vertex  @xmath171 by  @xmath235 $ ] .",
    "note that , by construction of  @xmath148 , @xmath235 $ ]  is a hyperpath and @xmath235 $ ]  contains a unique leaf edge which , furthermore , is one of the ends of the hyperpath .",
    "we denote by  @xmath236 the suffix of the hyperpath  @xmath235 $ ] that connects  @xmath171 to the leaf edge in  @xmath235 $ ] .    to define the desired order on  @xmath196 we first construct a preorder on  @xmath196 by setting @xmath237 if and only if one of the following conditions is satisfied.08em :    1 .   @xmath238 and @xmath239 , for @xmath240 .",
    "2 .   @xmath241 and the leaf edge in  @xmath242 $ ] is @xmath220-smaller than the leaf edge in  @xmath243 $ ] .",
    "@xmath241 , @xmath242 = [ y]$ ] , and @xmath244 .",
    "note that we have @xmath237 and @xmath245 if and only if @xmath246 . in this case @xmath247  and",
    "@xmath248 belong to the same edge @xmath249 . hence , every @xmath212-class has size at most  @xmath21 . adding @xmath21",
    "additional unary predicates @xmath250 such that each  @xmath251 contains at most one element of each @xmath212-class , we can define @xmath252 --    we have seen that every @xmath0-sparse graph has an @xmath2-definable orientation  @xmath31 that is bounded by  @xmath0 .",
    "if we want to encode sets of edges via sets of vertices we can try to encode each edge  @xmath86 by a pair @xmath253 consisting of the vertex @xmath254 and a number @xmath240 .",
    "this idea requires a way to linearly order the sets @xmath255 . in @xcite courcelle",
    "uses depth - first spanning trees to obtain such linear orders .",
    "as remarked above one needs to adapt the definition of a depth - first spanning tree when one tries to extend these results to uncountable hypergraphs .",
    "let @xmath19 be a hypergraph of rank  @xmath21 and suppose that @xmath256 is a structure where @xmath149 is a tree ( of ordinal height ) with @xmath257 and with every vertex @xmath177 we associate a set @xmath258 of edges .",
    "we assume that @xmath259 , for @xmath260 .",
    "( a)the set of _ auxiliary nodes _ associated to a vertex @xmath177 is @xmath261    ( b)for @xmath48 , we define @xmath262    ( c)@xmath148  is a _ depth - first spanning tree _ of  @xmath20 if it satisfies the following conditions.08em :    1 .   for all @xmath260 , @xmath263 and @xmath264 .",
    "2 .   for each edge @xmath12 the set @xmath265 is nonempty and linearly ordered by  @xmath150 .",
    "the vertices @xmath177 are partitioned into the following classes.08em : @xmath266 the root.08em ; @xmath267 a successor.08em ; @xmath268 a limit.08em ; where the successor and limit vertices are subdivided into @xmath21 subclasses .",
    "this partition satisfies the following conditions.08em : 1 .",
    "if @xmath152  has type  @xmath57 then it is the root of  @xmath196 and @xmath269 .",
    "if @xmath152  has type  @xmath270 then it is the ( immediate ) successor of some vertex @xmath271 .",
    "we have @xmath272 with @xmath14 .",
    "futhermore , @xmath152  is the only vertex in @xmath265 of type  @xmath270 and @xmath273 .",
    "if @xmath152  has type  @xmath274 then it is the limit of an increasing sequence @xmath275 of vertices @xmath276 .",
    "@xmath277  is ( the set of edges of ) a priority tree with root  @xmath152 .",
    "furthermore , @xmath278 is a cofinal subset of @xmath279 and @xmath152  is the only vertex in @xmath280 with type  @xmath274 .    every connected hypergraph  @xmath20 has a depth - first spanning tree .",
    "if in the definition of a depth - first spanning tree we drop the condition that @xmath281 , for every edge  @xmath86 , then we obtain a structure that we call a _ partial _ depth - first spanning tree . we construct an increasing sequence @xmath282 of such partial depth - first spanning trees with the property that , for every connected component  @xmath26 of @xmath283 , the set @xmath284 is linearly ordered by  @xmath150 .",
    "( a _ connected component _ of  @xmath285 is a maximal subset @xmath286 such that the subhypergraph  @xmath287 is connected . )",
    "the limit of this sequence will be the desired depth - first spanning tree of  @xmath20 .",
    "we start by choosing an arbitrary element @xmath93 and setting @xmath288 and @xmath289 . for limit ordinals  @xmath290",
    ", we define @xmath291 .",
    "for the successor step , suppose that we have already defined  @xmath292 .",
    "fix some connected component  @xmath26 of  @xmath285 . note that @xmath293 is nonempty since @xmath20  is connected .",
    "we distinguish two cases .    1 .",
    "if @xmath293 has a maximal element  @xmath171 then we choose some edge  @xmath86 with @xmath294 and @xmath295 , and we fix some vertex @xmath296 .",
    "we add  @xmath152 to  @xmath292 as immediate successor of  @xmath171 and we set @xmath297 .",
    "it follows that @xmath298 .",
    "since @xmath299 contains at most @xmath300 vertices there is some @xmath301 such that @xmath299 contains no vertex of type  @xmath270 .",
    "hence , in the new tree @xmath302 we can assign the type  @xmath270 to  @xmath152 .",
    "2 .   suppose that @xmath293 has no maximal element .",
    "we choose a sequence @xmath303 of edges with @xmath304 such that the sequence @xmath275 defined by @xmath305 is increasing and cofinal in @xmath293 . by taking a suitable subsequence",
    "we may assume that the set of types appearing in @xmath306 is the same for every @xmath307 .",
    "+ for each edge  @xmath308 , choose some edge @xmath309 with @xmath310 and set @xmath311 .",
    "we select a vertex @xmath312 and a priority tree @xmath313 such that @xmath314 .",
    "we define @xmath315 where @xmath152  is the limit of @xmath293 and we set @xmath316 .",
    "it follows that @xmath317 .",
    "it remains to show that the constructed tree @xmath302 is a partial depth - first tree where all sets @xmath318 are linearly ordered .",
    "we start by showing that each set @xmath319 with @xmath12 is linearly ordered . if @xmath320 then @xmath321 and we are done .",
    "otherwise , we have @xmath322 .",
    "note that @xmath323 implies @xmath295 .",
    "therefore , we have @xmath324 . since @xmath152  is larger than every element in @xmath293 the claim follows .",
    "let @xmath325  be a connected component of @xmath326 .",
    "we have to show that @xmath327 is linearly ordered .",
    "since @xmath328 there is some connected component  @xmath329 of  @xmath285 containing  @xmath325 .",
    "if @xmath330 then @xmath331 implies that @xmath332 and the set @xmath333 is linearly ordered . if , on the other hand , @xmath334 then we have @xmath335 and the latter set is linearly ordered since @xmath152  is greater than every element of @xmath293 .",
    "( a)if the hypergraph  @xmath20 is countable then we can actually obtain a depth - first spanning tree of height at most  @xmath336 as follows . in the above proof",
    ", if we are slightly more careful in choosing the vertex  @xmath152 that is added to the partial tree , then we can ensure that every vertex is chosen already after finitely many steps .",
    "( b)note that , strictly speaking , the above proposition is not a generalisation of theorem  1.4 of  @xcite since we use a different notion of a depth - first spanning tree .",
    "we use depth - first spanning trees to encode orientations of a hypergraph .",
    "first , we show that each depth - first spanning tree can be encoded by finitely many @xmath1-parameters .",
    "[ lem : d - f spanning trees definable ] for every @xmath337 we can construct @xmath2-formulae @xmath338 , @xmath339 , and @xmath340 such that , for every connected hypergraph  @xmath20 of rank at most  @xmath21 and each depth - first spanning tree @xmath341 of  @xmath20 , there are @xmath1-parameters  @xmath342 such that @xmath343    we will use the following parameters.08em :    1 .",
    "unary predicates @xmath344 , @xmath345 , @xmath346 , for @xmath301 , containing all vertices of the corresponding type .",
    "2 .   @xmath347 , for every type  @xmath348 .",
    "3 .   @xmath349 .",
    "@xmath350 , for every type  @xmath348 .",
    "if @xmath152  is of type  @xmath274 then the set  @xmath277 forms a priority tree .",
    "we use additional parameters @xmath351 and @xmath207 , for @xmath200 , encoding the corresponding partition @xmath352 hence , for every vertex  @xmath152 of type  @xmath274 we have a priority tree @xmath353    ( 1)first , we construct the formula  @xmath220 . to simplify our task we define separate formulae @xmath354 , for each type  @xmath348 , such that @xmath355 then we can set @xmath356 .",
    "if @xmath152  has type  @xmath57 then @xmath357 and we can set @xmath358 if the type of  @xmath152 is  @xmath270 then @xmath272 and @xmath359 , where @xmath86  is the unique edge in @xmath360 containing  @xmath152 .",
    "hence , we can define @xmath361\\,.\\end{aligned}\\ ] ] finally , if @xmath152  has type  @xmath274 then @xmath362 is the least subset of @xmath363 satisfying the following conditions.08em :    1 .",
    "@xmath364 2 .",
    "if @xmath365 and @xmath366 then @xmath367 .    hence , we can define @xmath368\\,.\\end{aligned}\\ ] ]    ( 2)next , we define a formula  @xmath369 such that @xmath370 the formula @xmath369 should state that @xmath371 using the formulae  @xmath372 we can write  @xmath161 as @xmath373\\,.\\end{aligned}\\ ] ]    ( 3)with the help of  @xmath161 we can write down the desired formulae @xmath75  and  @xmath374 .",
    "@xmath375\\ , , \\\\",
    "\\chi(x , y )   & : = \\forall x[\\varphi(x ) \\lso ( xy \\lso xx)]\\,.\\end{aligned}\\ ] ] --    [ lem : preorder on auxiliary sets ] we can construct @xmath1-formulae @xmath376 , for @xmath337 , such that , for every depth - first spanning tree @xmath341 of a connected hypergraph  @xmath20 of rank  @xmath21 , there are @xmath1-parameters  @xmath342 such that the formula @xmath377 defines a preorder  @xmath378 with the following properties.08em :    1 .",
    "the restriction of  @xmath378 to  @xmath196 coincides with  @xmath150 .",
    "2 .   @xmath378  linearly preorderes every set @xmath48 such that @xmath379 is linearly ordered by  @xmath150 .",
    "each @xmath378-class has at most  @xmath21 elements .",
    "let @xmath380  and  @xmath381 be the formulae of lemma  [ lem : d - f spanning trees definable ] .",
    "for each type  @xmath348 , we define a formula  @xmath382 linearly preordering each set  @xmath362 where @xmath152  is of type  @xmath348 .",
    "then the desired formula  @xmath383 states that either    1 .",
    "@xmath384 and @xmath385 for @xmath386 , or 2 .",
    "@xmath387 , for some  @xmath152 of type  @xmath348 , and @xmath382 holds .",
    "if @xmath152  is of type @xmath57  or  @xmath270 then @xmath362 contains at most  @xmath21 elements and we can set @xmath388 for vertices of type  @xmath274 we can use the formula from lemma  [ lem : existence of priority trees ] .    [ cor : order on auxiliary sets ] we can construct @xmath1-formulae @xmath376 , for @xmath337 , such that , for every depth - first spanning tree @xmath341 of a connected hypergraph  @xmath20 of rank  @xmath21 , there are @xmath1-parameters  @xmath342 such that the formula @xmath377 defines a partial order  @xmath212 with the following properties.08em :    1 .   the restriction of  @xmath212 to  @xmath196 coincides with  @xmath150 .",
    "2 .   @xmath212  linearly orderes every set @xmath48 such that @xmath379 is linearly ordered by  @xmath150 .",
    "let @xmath378  be the preorder from lemma  [ lem : preorder on auxiliary sets ] .",
    "since every @xmath378-class contains at most  @xmath21 elements we can add @xmath21  new unary predicates @xmath389 such that @xmath390 and we have @xmath391 , for each @xmath378-class  @xmath131 and all  @xmath208",
    ". then we can define @xmath392 --    we can construct @xmath1-formulae @xmath393 , for @xmath337 , such that for every hypergraph  @xmath20 of rank  @xmath21 , there are @xmath1-parameters  @xmath342 such that , the formula @xmath394 defines an orientation of  @xmath20 .",
    "suppose that @xmath20  has @xmath159  connected components  @xmath395 , @xmath396 .",
    "for each component  @xmath395 we fix a depth - first spanning tree @xmath397 .",
    "let @xmath398  be the parameters from lemma  [ lem : d - f spanning trees definable ] and lemma  [ lem : preorder on auxiliary sets ] . for every edge  @xmath12 , there exists a unique component  @xmath395 such that the intersection @xmath399 is finite and nonempty .",
    "furthermore , the set @xmath400 is linearly ordered by  @xmath150 . using the ordering  @xmath212 of corollary  [ cor : order on auxiliary sets ]",
    "we can write down a formula @xmath401 stating that @xmath152  is the @xmath212-least element of this set  @xmath131 .",
    "every hypergraph of rank @xmath337 is @xmath1-orientable .",
    "let us mention the following consequences of this result . for countable hypergraphs",
    "they are again due to courcelle  @xcite .",
    "a formula @xmath402 defines an _ edge ordering _ of a hypergraph @xmath19 if , for every edge @xmath12 , the formula @xmath403 defines a linear ordering on the vertices of  @xmath86 .",
    "a formula @xmath404 defines an _ neighbourhood ordering _ of a directed graph @xmath39 if , for every vertex @xmath93 , the formula @xmath405 defines a linear ordering on the set @xmath406 .",
    "[ lem : edge ordering ] there exist @xmath1-formulae @xmath407 , for @xmath337 , such that , for every hypergraph @xmath19 of rank  @xmath21 , there are @xmath1-parameters  @xmath342 such that the formula @xmath408 defines an edge ordering of  @xmath20 .",
    "[ lem : neighbourhood ordering ] there exist @xmath2-formulae @xmath409 , for @xmath337 , such that , for every directed graph  @xmath40 of indegree at most  @xmath21 , there are @xmath2-parameters  @xmath108 such that the formula @xmath410 defines a neighbourhood ordering of  @xmath40 .",
    "we can apply lemma  [ lem : edge ordering ] to the hypergraph @xmath411 where @xmath412 note that every subset @xmath413 can be encoded by the set @xmath414 hence , every @xmath1-formula over  @xmath20 can be translated into an @xmath2-formula over  @xmath40 .",
    "in @xcite courcelle has shown that we can translate every @xmath1-formula  @xmath75 into an @xmath2-formula  @xmath415 that is equivalent to  @xmath75 on all countable @xmath0-sparse hypergraphs . using the results of the previous sections we can lift the restriction to countable hypergraphs .",
    "the proof in  @xcite goes through unchanged since it relies only on the statements of lemma  [ lem : edge ordering ] and lemma  [ lem : neighbourhood ordering ] , and on local modifications of hypergraphs .    for all numbers @xmath416 ,",
    "there exists a monadic second - order interpretation ( with monadic parameters ) that maps a @xmath0-sparse hypergraph of rank  @xmath21 to its incidence structure .    for all @xmath416 and all formulae @xmath417 with first - order variables  @xmath418 , monadic variables  @xmath419 , and guarded second - order variables  @xmath420",
    ", there exists a formula @xmath421 with the following property.08em : for all @xmath0-sparse hypergraphs @xmath19 of rank  @xmath21 and all parameters @xmath422 , @xmath35 , @xmath423 , there exist parameters @xmath424 such that @xmath425",
    "the results so far concern ways to encode edges by vertices . in this last section we consider a more general problem .",
    "let @xmath39 be a graph .",
    "we denote by @xmath426 the set of all finite subsets of  @xmath9 .",
    "we would like to encode a given subset @xmath427 by a set of vertices , that is , we would like to find a definable function @xmath428 that is injective . for @xmath429",
    "this reduces to the problem considered in the preceding sections . for arbitrary  @xmath6 ,",
    "such a function  @xmath89 does not always exist .",
    "but we will show that sometimes we can transform a given function @xmath430 into an injective one .",
    "these results are inspired by work of colcombet and lding  @xcite on set interpretations .",
    "colcombet and lding consider a power set operation  @xmath431 on structures .",
    "one of their main results in a commutation theorem for interpretations and the power set operation .",
    "they show that , given a tree  @xmath148 and an @xmath432-interpretation  @xmath433 such that @xmath434 is of the form @xmath435 , for some structure  @xmath145 , then there exists a @xmath18-interpretation  @xmath436 such that @xmath437 . on ingredient in the proof of this result",
    "is a method to encode , in a definable way , finite subsets of the tree  @xmath148 by single vertices .",
    "suppose we are given a function @xmath430 that we want to transform into an injective function @xmath428 .",
    "let @xmath438 .",
    "the first step in the construction of  @xmath89 consists in finding a definable function @xmath439 such that @xmath440 , for all  @xmath152 .",
    "of course , this is not always possible .",
    "for instance , if the graph is finite and we have @xmath441 , for all vertices  @xmath152 . therefore , we consider only functions  @xmath290 that are _ sparse _ in the sense of the following definition .",
    "let @xmath39 be an undirected graph .",
    "the _ border _ of a subset @xmath442 is the set @xmath443 of all edges connecting a vertex in  @xmath444 with a vertex outside of  @xmath444 .",
    "a _ distribution _ of  @xmath40 is a map @xmath445 . for @xmath48 , we define the shorthand @xmath446    let @xmath447 be an arbitrary mapping .",
    "the distribution _ induced _ by  @xmath89 is the function @xmath445 with @xmath448    a distribution  @xmath290 is _",
    "@xmath0-sparse _ if @xmath449    given a @xmath0-sparse distribution  @xmath290 we will construct the desired function @xmath439 by solving a network flow problem .",
    "let @xmath39 be an undirected graph .",
    "a _ flow _ of  @xmath40 is a function @xmath450 such that , for all @xmath451 ,    1 .",
    "@xmath452 and 2 .",
    "@xmath453 implies @xmath454 .    a flow  @xmath31 is _ acyclic _ if there is no cycle @xmath455 of  @xmath40 such that @xmath456 and @xmath457 , for all @xmath200 .",
    "the _ defect _ of a flow  @xmath31 is the distribution @xmath458    a flow  @xmath31 is a _ @xmath290-flow _ if , for every @xmath93 , either @xmath459    a flow  @xmath31 is _ edge - bounded _ by  @xmath0 if @xmath460 , for all @xmath451 .",
    "we call  @xmath31 _ vertex - bounded _ by  @xmath0 if @xmath461    our aim is to show that , for every @xmath0-sparse distribution  @xmath290 there is a bounded @xmath290-flow  @xmath31 and a function @xmath439 inducing  @xmath290 . furthermore",
    ", if @xmath290  is definable then @xmath68  should also be definable .",
    "let @xmath178  be a logic .",
    "a distribution  @xmath290 is _",
    "@xmath178-definable _ if there exist formulae @xmath462 , @xmath240 , such that @xmath463    similarly",
    ", a flow  @xmath31 is _",
    "@xmath178-definable _ if there exist formulae @xmath464 such that @xmath465    note that every edge - bounded flow can be encoded with the help of the @xmath1-parameters @xmath466    for trees the problem of encoding sets by vertices has been solved by colcombet and lding  @xcite . in the general case proved below the function",
    "@xmath68 is only definable with the help of @xmath1-parameters , but for trees we can do without them .",
    "let @xmath467 be an infinite directed tree and @xmath290  a @xmath18-definable @xmath0-sparse distribution of  @xmath148 .",
    "there exists a @xmath18-definable flow  @xmath31 that is edge - bounded by  @xmath468 and satisfies @xmath469 , for all  @xmath152 .",
    "let @xmath467 be a directed tree and @xmath290  a @xmath18-definable @xmath0-sparse distribution of  @xmath148 such that @xmath470 .",
    "there exists @xmath18-definable function @xmath471 such that @xmath290  is the distribution induced by  @xmath68 .    to prove our generalisation of these results we start with a few lemmas about bounded flows",
    "the first two follow immediately from the definitions .",
    "every flow that is vertex - bounded by  @xmath0 is also edge - bounded by  @xmath0 .",
    "suppose that @xmath40  is a graph with maximal degree  @xmath472 .",
    "every flow of  @xmath40 that is edge - bounded by  @xmath0 is vertex - bounded by  @xmath473 .",
    "for every @xmath290-flow  @xmath31 there exists an acyclic @xmath290-flow  @xmath474 such that , if @xmath31  is edge - bounded by  @xmath0 or vertex - bounded by  @xmath0 then so is  @xmath474 .",
    "we repeat the following construction until the flow is acyclic .",
    "select a cycle @xmath455 such that @xmath475 we define @xmath474  by @xmath476 --    [ prop : existence of flows ] let @xmath39 be an undirected graph and @xmath290  a @xmath0-sparse distribution .",
    "then @xmath40  has a @xmath290-flow  @xmath31 that is edge - bounded by  @xmath0 .",
    "first , we assume that @xmath40  is finite . in this case",
    "we can reduce the task to a network flow problem .",
    "let @xmath20  be the graph obtained from  @xmath40 by adding two new vertices @xmath477  and  @xmath478 that are connected to every vertex of  @xmath40 .",
    "we define the capacity  @xmath479 of edges  @xmath86 of  @xmath20 as follows . for edges",
    "@xmath86 of  @xmath40 we set @xmath480 . if @xmath481 with @xmath93 we set @xmath482 .",
    "finally , if @xmath483 with @xmath93 we define @xmath484 let @xmath31  be a maximal flow from  @xmath477 to  @xmath478 with respect to  @xmath485 .",
    "we claim that its restriction to the edges of  @xmath40 is the desired flow .",
    "according to the max - flow min - cut theorem , there is a set  @xmath131 of vertices containing  @xmath477 but not  @xmath478 such that the maximal flow  @xmath21 from  @xmath477 to  @xmath478 equals @xmath486 let @xmath487 and @xmath488 . since @xmath489 we have @xmath490 on the other hand , for the set @xmath491 , we have @xmath492 consequently , the maximal flow  @xmath21 from  @xmath477 to  @xmath478 equals @xmath493 this implies that @xmath494 for each @xmath93 , we therefore have @xmath495 if @xmath496 this implies @xmath497 while , for @xmath498 , we have @xmath499 hence , either @xmath500 or @xmath501 .",
    "it remains to prove the lemma for infinite graphs .",
    "let @xmath502 consist of the elementary diagram of  @xmath40 together with first - order formulae stating that @xmath31  is a @xmath290-flow on  @xmath40 that is edge - bounded by  @xmath0 .",
    "we will use the compactness theorem to show that @xmath502 is satisfiable .",
    "let @xmath503 be finite .",
    "there exists a finite induced subgraph @xmath504 of  @xmath40 such that @xmath505 .",
    "let @xmath506 be an enumeration ( without repetitions ) of all edges @xmath507 with @xmath508 and @xmath509 .",
    "we construct a new graph @xmath510 by attaching to each vertex  @xmath156 a path  @xmath207 of length  @xmath0 .",
    "let @xmath511  be the distribution on  @xmath512 with @xmath513 , for @xmath514 , and @xmath515 , for @xmath516 .",
    "in order to show that @xmath517  is satisfiable it is sufficient to prove that @xmath512  has a flow of the desired form . consider an arbitrary set @xmath518 of vertices .",
    "let @xmath519 it follows that @xmath520 by the first part of the proof it follows that @xmath512  has a flow of the desired form .",
    "it remains to show how we can use the @xmath290-flow  @xmath31 we have just constructed to define the desired function @xmath439 .",
    "we start by selecting a certain family of definable paths .",
    "note that we allow paths of length  @xmath57 .",
    "such paths are uniquely determined by the vertex they start ( and end ) at .",
    "[ lem : paths coding a flow ] let @xmath40  be a countable undirected graph and @xmath31  an acyclic @xmath290-flow of  @xmath40 .",
    "there exists a set  @xmath431 of finite paths through  @xmath40 satisfying the following conditions.08em :    for every @xmath93 , there are exactly @xmath521 paths in  @xmath431 starting at  @xmath152 .    for every @xmath93",
    "there is at most one path in  @xmath431 ending at  @xmath152 .",
    "for every pair @xmath451 of vertices there are at most @xmath522 paths in  @xmath431 containing the edge @xmath523 ( in this direction ) .",
    "fix an enumeration @xmath524 of the set @xmath525 for @xmath526 , we construct paths  @xmath527 with the following properties.08em :    1 .",
    "@xmath527  starts at  @xmath528 .",
    "if @xmath529 then the endpoints of @xmath530  and  @xmath527 are different .",
    "3 .   for every edge @xmath523",
    "there are at most @xmath522 paths  @xmath527 containing the edge @xmath523 .",
    "by induction , suppose that we have already defined  @xmath229 , for @xmath531 .",
    "let    1 .",
    "@xmath532 be the number of paths  @xmath229 , @xmath531 , starting at  @xmath152 , 2 .",
    "@xmath533 the number of paths  @xmath229 , @xmath531 , ending at  @xmath152 , and 3 .",
    "@xmath534 the number of paths  @xmath229 , @xmath531 , containing the edge @xmath523 .",
    "we construct a path @xmath535 inductively starting with @xmath536 .",
    "for the induction step , suppose that we have already defined @xmath537 .",
    "if @xmath538 then we stop and set @xmath539 . otherwise , we claim that there is some neighbour  @xmath151 of  @xmath156 with @xmath540 .",
    "hence , we can set @xmath541 .",
    "to prove the claim , we distinguish two cases . if @xmath542 then @xmath543 implies that @xmath544 as desired .",
    "similarly , if @xmath227 then @xmath545 implies that @xmath546 note that the construction of  @xmath527 must terminate after at most @xmath547 steps since the flow  @xmath31 is acyclic and there are only  @xmath45 vertices  @xmath171 with @xmath548 .",
    "[ lem : encoding a set of paths ] there exist @xmath1-formulae @xmath549 , for @xmath337 , such that , for every graph  @xmath40 and each set  @xmath431 of finite paths",
    "such that every vertex and every edge of  @xmath40 is contained in at most  @xmath21 paths of  @xmath431 , there exists a tuple  @xmath342 of @xmath1-parameters such that @xmath550    for every edge @xmath523 of  @xmath40 we fix a bijection @xmath551 \\to \\calp_e$ ] where @xmath552 is the set of all paths containing the edge @xmath523 ( in either direction ) and @xmath553 .",
    "we assume that @xmath554 .",
    "let @xmath555  be the set of all edges of  @xmath40 contained in some path in  @xmath431 .",
    "by lemma  [ lem : neighbourhood ordering ] there exists an @xmath2-formula @xmath556 with parameters  @xmath557 such that , for every @xmath93 , the formula @xmath558 linearly orders the set of all vertices that are connected to  @xmath152 via an edge in  @xmath555 .",
    "finally , we define unary predicates  @xmath559 containing all vertices  @xmath152 such that there exists a path @xmath560 containing edges @xmath523 , @xmath561 where    1 .",
    "@xmath562 , @xmath563 , 2 .",
    "@xmath171  is the @xmath208-th neighbour of  @xmath152 ( in the order defined by  @xmath374 ) , 3 .",
    "@xmath151  is the @xmath564-th neighbour of  @xmath152 .",
    "it follows that a nonempty set @xmath565 of edges is a path in  @xmath431 if and only if @xmath566  is a minimal nonempty subset of  @xmath10 satisfying the following condition.08em :    1 .",
    "@xmath566  can be written as a union @xmath567 such that , for all vertices @xmath568 such that @xmath569 and @xmath171  and  @xmath151 are , respectively , the @xmath208-th and @xmath564-th neighbour of  @xmath152 , we have @xmath570 .",
    "this condition can be expressed in  @xmath1 .",
    "note that the set of empty paths in  @xmath431 is trivially definable with the help of the parameter @xmath571    using the family  @xmath431 we can construct a formula  @xmath75 defining the function  @xmath68 .    [",
    "prop : function from a flow ] there exist @xmath1-formulae @xmath572 , for @xmath337 , with the following property.08em : for every graph @xmath39 and each acyclic @xmath290-flow  @xmath31 of  @xmath40 that is vertex - bounded by  @xmath21 , there exist @xmath1-parameters  @xmath342 such that @xmath573 defines on  @xmath40 a partial function @xmath439 with @xmath574    let @xmath575  be the graph obtained from  @xmath40 by removing every edge @xmath523 with @xmath576 .",
    "note that @xmath31  is also a @xmath290-flow of  @xmath575 .",
    "since @xmath31  is vertex - bounded by  @xmath21",
    "it follows that every vertex of  @xmath575 has degree at most  @xmath337 .",
    "consequently , each connected component  @xmath577 of  @xmath40 is countable .",
    "let @xmath578  be the set of paths obtained by applying lemma  [ lem : paths coding a flow ] to the restriction of  @xmath31 to  @xmath577 , and let @xmath431  be the union of all these sets  @xmath578 corresponding to the connected components of  @xmath575 . by lemma  [ lem : encoding a set of paths ] , there exists a formula @xmath579 and a set  @xmath342 of guarded relations",
    "such that @xmath580 with the help of  @xmath415 we can define a partial function @xmath439 such that @xmath581 by construction of  @xmath431 we have @xmath440 , for every @xmath93 .",
    "let @xmath39 be a graph of finite degree and @xmath582 a @xmath1-formula that defines a partial function @xmath583 such that the distribution  @xmath290 induced by  @xmath89 is @xmath0-sparse .",
    "suppose that there exists a @xmath1-formula @xmath584 such that , for every vertex @xmath93 , @xmath585 linearly orders the set @xmath586 . then there exist @xmath2-definable partial functions @xmath587 and @xmath439 such that @xmath588 and @xmath589  is injective .    by proposition  [ prop : existence of flows ] there exists a @xmath290-flow  @xmath31 that is edge - bounded by  @xmath0 .",
    "since @xmath40  has finite degree it follows that @xmath31  is vertex - bounded by some constant @xmath337 .",
    "hence , we can use proposition  [ prop : function from a flow ] to find a definable function @xmath439 with @xmath590 .",
    "choose unary predicates @xmath591 such that we have @xmath592 whenever @xmath593 and @xmath594 are distinct vertices with @xmath595 . using these predicate we can define partial functions @xmath596 such that @xmath597  is the unique element of @xmath598 .",
    "we define @xmath587 by @xmath599 where the index  @xmath208 is chosen such that @xmath131  is the @xmath208-th element of @xmath600 ( in the order defined by  @xmath374 ) .",
    "it follows that @xmath601 and @xmath589  is injective .",
    "furthermore , the function  @xmath589 is clearly @xmath1-definable .",
    "since the graph  @xmath40 has degree at most  @xmath0 it is @xmath0-sparse .",
    "hence , every @xmath1-definable function is already @xmath2-definable .",
    "recall that @xmath426 denotes the set of all finite subsets of  @xmath9 . combining the preceding lemmas we obtain the main result of this section .",
    "[ thm : coding sets by vertices ]",
    "let @xmath39 be a graph of finite degree and @xmath582 a @xmath1-formula that defines a partial function @xmath602 such that the distribution  @xmath290 induced by  @xmath89 is @xmath0-sparse .",
    "then there exist @xmath2-definable partial functions @xmath603 and @xmath439 such that @xmath588 and @xmath589  is injective .    by the preceding lemma it is sufficient to construct a formua  @xmath584 ( with @xmath1-parameters ) such that @xmath585 linearly orders @xmath586 , for every @xmath93 .",
    "let @xmath604 be a spanning forest of  @xmath40 and let @xmath605 be a set containing exactly one element of each connected component . using the parameters @xmath566  and  @xmath344 we can define the tree ordering on  @xmath9 by @xmath606 let @xmath607 be the set obtained from  @xmath344 by orienting the edges according to this ordering . then @xmath196  is a directed forest .",
    "furthermore , since the degree of  @xmath40 is bounded we can use lemma  [ lem : neighbourhood ordering ] to linearly order the successors of every vertex in  @xmath196 .",
    "we use these two orderings to define the lexicographic ordering  @xmath608 on  @xmath196 .",
    "finally , we obtain the desired ordering on @xmath426 by setting @xmath609 each of these definitions can be expressed in  @xmath1 .",
    "we have presented several methods to encode sets of finite vertices as single vertices . in the first part",
    ", we used depth - first spanning trees to encode edges by vertices .",
    "as an application we were able to extend courcelle s result on the collapse of @xmath1 to @xmath2 on sparse hypergraphs from countable hypergraphs to hypergraphs of arbitrary cardinality . in the second part we used network flows to encode arbitrary finite sets by vertices .",
    "let us mention some open questions .",
    "considering the first part it would be interesting to find out whether sparse classes are the only examples where @xmath1 collapses to @xmath2 .",
    "is there a class  @xmath26 that is not @xmath0-sparse , for any  @xmath0 , such that over  @xmath26 every @xmath1-sentence is equivalent to an @xmath2-sentence.08em ?",
    "the results of the second part are much less complete .",
    "it is unlikely that they are the best possible .",
    "improve theorem  [ thm : coding sets by vertices ] by allowing    more general classes of graphs or hypergraphs.08em ;    more general classes of partial functions @xmath583 .",
    "our results were inspired by work of colcombet and lding  @xcite .",
    "the question arises of whether we can also generalise the remaining results of that article",
    ".    can we prove corollary  4.4 of   for other graphs than trees.08em ?",
    "i like to thank bruno courcelle for his many comments on earlier versions of this paper ."
  ],
  "abstract_text": [
    "<S> according to a theorem of courcelle monadic second - order logic and guarded second - order logic ( where one can also quantify over sets of edges ) have the same expressive power over the class of all countable @xmath0-sparse hypergraphs . in the first part of the present paper we extend this result to hypergraphs of arbitrary cardinality . in the second part , we present a generalisation dealing with methods to encode sets of vertices by single vertices . </S>"
  ]
}