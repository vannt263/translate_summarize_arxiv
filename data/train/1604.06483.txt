{
  "article_text": [
    "quantified boolean formulas ( qbfs ) generalize propositional formulas by admitting quantifications over propositional variables .",
    "qbfs can be viewed in two different ways , namely ( i ) as a generalization of propositional logic and ( ii ) as a restriction of first - order predicate logic ( where we interpret over a two element domain ) .",
    "a number of calculi are available for qbfs : the ones based on variants of resolution for qbfs @xcite , the ones based on instantiating universal variables with truth constants combined with propositional resolution and an additional instantiation rule @xcite , and different sequent systems @xcite .    in all these calculi ( except the latter ones from @xcite ) , the possibility to instantiate a given formula",
    "is limited . in purely resolution - based calculi , formulas ( or more precisely universal variables )",
    "are never instantiated . in instantiation - based calculi",
    ", instantiation is restricted to truth constants .",
    "in contrast , sequent systems possess flexible quantifier rules , and ( existential ) variables as well as ( propositional ) formulas can be used for instantiation with tremendous speed - ups in proof complexity .",
    "this motivates why we are interested in strengthening instantiation techniques for instantiation - based calculi .",
    "we allow to replace ( some ) universal variables @xmath0 not only by truth constants but by existential variables left of @xmath0 in the quantifier prefix .",
    "this approach mimics the effect of quantifier rules introducing atoms in sequent calculi from @xcite .",
    "we add a propositional extension principle ( known from extended resolution @xcite ) , which enables the introduction of propositional formulas for universal variables via extension variables ( or names for the formula ) .",
    "contrary to @xcite , where we proposed propositional extensions of the form @xmath1 which can be eliminated if the cut rule is available in the sequent calculus , such an elimination is not possible here for which reason we have to use ( classical ) extensions .",
    "_ contributions . _    1 .",
    "we consider different translations from qbfs to first - order logic @xcite and provide a proof - theoretical analysis of the translation in combination with first - order resolution ( @xmath2 ) .",
    "we exponentially separate two variants of the translation in theorem  [ thm : epr - notpsim - sk ] .",
    "we show that such combinations can polynomially simulate q - resolution with resolution over existential and universal variables ( @xcite , theorem  [ thm : r1-psim - qures ] ) , q - resolution ( @xcite , corollary  [ cor : rfo - psim - qres ] ) and the instantiation - based calculus @xmath3 @xcite ( theorem  [ rfo - psim - ircalc ] , corollary  [ cor : rfo - epr - psim - ircalc ] ) .",
    "the latter simulation provides a soundness proof for @xmath3 independent from strategy extraction .",
    "we show in theorem  [ thm : usual - calculi - npsim - rfo ] that neither nor , the long - distance q - resolution variants , , @xcite , different instantiation - based calculi @xcite nor @xcite can polynomially simulate @xmath2 with one of the considered translations .",
    "we generalize @xmath3 by the possibility to instantiate universal variables not only with truth constants but also with existential variables ( similar to the corresponding quantifier rule in @xcite ) .",
    "we show in proposition  [ prop : ircalcpm - npsim - ircalcpmsubst ] that this generalized calculus is actually stronger than the original one .",
    "we combine generalized @xmath3 by a propositional extension rule @xcite essentially enabling the introduction of boolean functions ( instead of atoms and truth constants ) for universal variables .",
    "_ structure .",
    "_ in sect .",
    "[ sec : prel ] we introduce necessary definitions and notations . in sect .",
    "[ sec : diff - trans ] different translations from qbfs to ( restrictions of ) first - order logic @xcite are reconsidered . in sect .",
    "[ sec : res - calculi ] different calculi based on ( variants of ) the resolution calculus are described . here",
    ", we introduce our calculi generalized from @xmath3 . in sect .",
    "[ sec : poly - sim ] we present our results on polynomial simulations between considered calculi and in sect .",
    "[ sec : exp - sep ] we provide exponential separations . in the last section",
    "we conclude and discuss future research possibilities .",
    "we assume familiarity with the syntax and semantics of propositional logic , qbfs and first - order logic ( see , e.g. , @xcite for an introduction ) .",
    "we recapitulate some notions and notations which are important for the rest of the paper .",
    "we consider a propositional language based on a set @xmath4 of boolean variables and truth constants @xmath5 ( true ) and @xmath6 ( false ) , both of which are not in @xmath4 . a variable or a truth constant",
    "is called _ atomic _ and connectives are from @xmath7 .",
    "a _ literal _ is a variable or its negation .",
    "a _ clause _ is a disjunction of literals , but sometimes we consider it as a set of literals .",
    "_ tautological clauses",
    "_ contain a variable and its negation and the _ empty clause _ is denoted by @xmath8 .",
    "propositional formulas are denoted by capital latin letters like @xmath9 possibly annotated with subscripts , superscripts or primes .",
    "we extend the propositional language by boolean quantifiers .",
    "universal ( @xmath10 ) and existential ( @xmath11 ) quantification is allowed within a qbf .",
    "the superscript @xmath12 is used to distinguish boolean quantifiers from first - order quantifiers introduced later .",
    "qbfs are denoted by greek letters .",
    "observe that we allow non - prenex formulas , i.e. , quantifiers may occur deeply in a qbf .",
    "an example for a non - prenex qbf is @xmath13 , where @xmath14 , @xmath15 , @xmath16 and @xmath17 are variables .",
    "moreover , free variables ( like @xmath17 ) are allowed , i.e. , there might be occurrences of variables in the formula for which we have no quantification . formulas without free variables are called _ closed _ ; otherwise they are called _",
    "open_. the _ universal _ ( _ existential _ ) closure of @xmath18 is @xmath19 ( @xmath20 ) , for which we often write @xmath21 ( @xmath22 ) if @xmath23 is the set of all free variables in @xmath18 .",
    "a formula in _ prenex conjunctive normal form _ ( pcnf ) has the form @xmath24 , where @xmath25 is the _ quantifier prefix _ , @xmath26 and @xmath27 is the ( propositional ) _ matrix _ which is in cnf .",
    "often we write a qbf as @xmath28 ( @xmath29 for all @xmath30 and the elements of @xmath31 are pairwise disjoint ) .",
    "we define the _ level of a literal @xmath32 _ , @xmath33 , as the index @xmath34 such that the variable of @xmath32 occurs in @xmath35 .",
    "the _ logical complexity _ of a formula @xmath36 , @xmath37 , is the number of occurrences of connectives and quantifiers .",
    "we use a first - order language consisting of ( objects ) _ variables _ , _ function symbols _",
    "( fss ) , _ predicate symbols _ ( pss ) , together with the truth constants and connectives mentioned above .",
    "quantifiers @xmath38 and @xmath39 bind object variables .",
    "_ terms _ and _ formulas _ are defined according to the usual formation rules .",
    "we identify @xmath40-ary pss with propositional atoms , and @xmath40-ary fss with _",
    "constants_. clauses , tautological clauses and the empty clause are defined as in the propositional case .",
    "let @xmath41 be the set of first - order variables and @xmath42 be the set of terms .",
    "substitution _ is a mapping @xmath43 of type @xmath44 such that @xmath45 only for finitely many variables @xmath46 .",
    "we represent @xmath43 by a finite set of the form @xmath47 .",
    "the _ domain _ of @xmath43 , @xmath48 , is the set @xmath49 .",
    "the _ range _ of @xmath43 , @xmath50 , is the set @xmath51 .",
    "we call @xmath43 a _ variable substitution _ if @xmath52 .",
    "the _ empty _",
    "substitution @xmath53 is denoted by @xmath54 .",
    "we often write substitutions post - fix , e.g. , we use @xmath55 instead of @xmath56 .",
    "algebraically , substitutions define a monoid with @xmath53 being the neutral element under the usual composition of substitutions .",
    "substitutions are extended to terms and formulas in the usual way , e.g. , @xmath57 , @xmath58 , and @xmath59 , where @xmath60 is an @xmath61-place fs , @xmath14 is an @xmath61-place ps , @xmath62 are terms , @xmath63 and @xmath64 are ( quantifier - free ) formulas and @xmath65 is a binary connective . for substitutions",
    "@xmath43 and @xmath66 , @xmath43 is _ more general than _",
    "@xmath66 if there is a substitution @xmath67 such that @xmath68",
    ". a substitution @xmath43 is called a _ permutation _ if @xmath43 is one - one and a variable substitution .",
    "a permutation @xmath43 is called a _ renaming _ ( substitution ) of an expression @xmath69 ( i.e. , @xmath69 is a term or a quantifier - free formula ) if @xmath70 , where @xmath71 is the set of all variables occurring in @xmath69 . for an expression @xmath64 , @xmath72 is a _ variant _ of @xmath64 provided @xmath43 is a renaming substitution .",
    "let @xmath73 be a non - empty set of expressions .",
    "a substitution @xmath43 is called a _ unifier of @xmath69 _ if @xmath74 .",
    "unifier @xmath43 is called _ most general unifier _ ( mgu ) , if for every unifier @xmath66 of @xmath69 , @xmath43 is more general than @xmath66 .",
    "let @xmath75 and @xmath76 be two proof systems .",
    "@xmath75 _ polynomially simulates _",
    "( p - simulates )",
    "@xmath76 if there is a polynomial @xmath14 such that , for every natural number @xmath61 and every formula @xmath36 , the following holds .",
    "if there is a proof of @xmath36 in @xmath76 of size @xmath61 , then there is a proof of @xmath36 ( or a suitable translation of it ) in @xmath75 whose size is less than @xmath77 .",
    "we introduce different translations of ( closed ) qbfs to ( closed ) formulas in ( restrictions of ) first - order logic .",
    "we start with the basic translation from @xcite in fig .",
    "[ fig : translation1 ] . obviously , the qbf @xmath36 and the first - order formula @xmath78 enjoy a very similar structure .",
    "especially the variable dependencies expressed by the quantifier prefix are exactly the same .",
    "let @xmath67 be a renaming substitution such that @xmath79 and @xmath80 are variable - disjoint .",
    "in order to construct the resolvent , we need the mgu @xmath81 of @xmath82 , which is @xmath83 .",
    "the unifier @xmath81 is a matcher ; it affects only variables from @xmath79 .",
    "the resolvent @xmath84 is then @xmath85 .",
    "we show that there exists a variable substitution @xmath43 such that @xmath86 .",
    "first observe that @xmath87 with @xmath88 .",
    "then with @xmath89 , we have @xmath90 . for all @xmath91",
    ", we have @xmath92 , @xmath93 and @xmath94",
    ". then @xmath95 where @xmath43 is obtained from @xmath96 by deleting all elements of the form @xmath97 .",
    "observe that @xmath98 and @xmath99 . therefore @xmath86 .",
    "the clause @xmath84 from both subcases is non - tautological by the same reason as in case  3 .",
    "case  5 : @xmath101 is a q - resolvent of @xmath102 and @xmath103 ( @xmath104 ) upon the universal variable @xmath105 .",
    "similar to subcase  4.1 .",
    "@xmath106    take @xmath107 and derive @xmath108 .",
    "the first clause is derived by a resolution step between @xmath109 and @xmath110 .",
    "then we derive @xmath111 from @xmath112 and @xmath113 and @xmath114 as follows .",
    "resolve @xmath112 and @xmath115 , obtain @xmath116 and factor it to get @xmath117 .",
    "next factor @xmath118 and get @xmath119 .",
    "resolve the latter with @xmath120 and factor the resolvent .",
    "we get @xmath121 each of the @xmath122 clauses has at most @xmath123 literals . for @xmath124",
    ", we have a similar deduction but with at most @xmath125 literals per clause .",
    "we obtain @xmath126 which can be resolved by the @xmath127 obtained from @xmath128 and @xmath129 . finally , it is easy to check that the refutation has tree structure and is of size polynomial in @xmath130 ."
  ],
  "abstract_text": [
    "<S> quantified boolean formulas ( qbfs ) generalize propositional formulas by admitting quantifications over propositional variables . </S>",
    "<S> qbfs can be viewed as ( restricted ) formulas of first - order predicate logic and easy translations of qbfs into first - order formulas exist . </S>",
    "<S> we analyze different translations and show that first - order resolution combined with such translations can polynomially simulate well - known deduction concepts for qbfs . </S>",
    "<S> furthermore , we extend qbf calculi by the possibility to instantiate a universal variable by an existential variable of smaller level . combining such an enhanced calculus with the propositional extension rule results in a calculus with a universal quantifier rule which essentially introduces propositional formulas for universal variables . in this way </S>",
    "<S> , one can mimic a very general quantifier rule known from sequent systems . </S>"
  ]
}