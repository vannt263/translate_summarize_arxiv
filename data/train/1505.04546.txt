{
  "article_text": [
    "self - organization in a swarm of mobile computing entities frequently called robots , agents or sensor nodes , has gained much attention as sensing and controlling devices are developed and become cheaper .",
    "it is expected that mobile robot systems perform patrolling , sensing , and exploring in a harsh environment such as disaster area , deep sea , and space without any human intervention .",
    "theoretical aspect of such mobile robot systems in the _ two dimensional _ euclidean space ( 2d - space or plane ) attracts much attention and distributed control of mobile robots with very weak capabilities has been investigated  @xcite .",
    "the robots are anonymous , oblivious ( memory - less ) , have neither access to the global coordinate system nor explicit communication medium . for robots moving in the _ three dimensional _ euclidean space ( 3d - space ) ,",
    "we first investigate the _ plane formation problem _",
    ", which is a fundamental self - organization problem that requires robots to occupy distinct positions on a common plane without making any multiplicity , mainly motivated by an obvious observation that robots on a plane would be easier to control than those moving in 3d - space",
    ".    in this paper , a robot is anonymous and is represented by a point in 3d - space .",
    "a robot repeats executing a `` look - compute - move '' cycle , during which , it observes , in a _",
    "look phase _ , the positions of all robots by taking a snapshot , which we call a _ local observation _ in this paper , computes the next position based on a given deterministic algorithm in a _ compute phase _ , and moves to the next position in a _",
    "phase_. this definition of look - compute - move cycle implies that it has _ full vision _",
    ", i.e. , the vision is unrestricted and the move is atomic , i.e. , each robot does not stop en route to the next position and we do not care which route it takes .",
    "a robot is _ oblivious _ if in a compute phase , it uses only the snapshot just taken in the preceding look phase , i.e. , the output of the algorithm depends neither on a snapshot nor computation of the past cycles .",
    "otherwise , a robot is _ non - oblivious_. a robot has no access to the global @xmath0-@xmath1-@xmath2 coordinate system and all actions are done in terms of its local @xmath0-@xmath1-@xmath2 coordinate system .",
    "we assume that all local coordinate systems are right - handed .",
    "configuration _ of such robot system is a set of points observed in the global coordinate system .",
    "each robot obtains a configuration translated with its local coordinate system in a look phase .",
    "the robots can see each other , but do not have direct communication capabilities ; communication among robots must take place solely by moving and observing robots positions with tolerating possible inconsistency among the local coordinate systems .",
    "the robots are _ anonymous _ ; they have no unique identifiers and are indistinguishable by their looks and execute the same algorithm . finally , they are fully synchronous ( fsync ) ; they all start the @xmath3-th look - compute - move cycle simultaneously and synchronously execute each of its look , compute , and move phases .",
    "the purpose of this paper is to show a necessary and sufficient condition for the robots to solve the plane formation problem .",
    "the _ line formation problem _ in 2d - space is the counterpart of the plane formation problem in 3d - space and is _ unsolvable _ from an initial configuration @xmath4 if @xmath4 is a regular polygon ( i.e. , the robots occupy the vertices of a regular polygon ) , intuitively because anonymous robots forming a regular polygon can not break symmetry among themselves and lines they propose are also symmetric , so that they can not agree on one line from them  @xcite .",
    "hence symmetry breaking among robots would play a crucial role in the plane formation problem .",
    "the _ pattern formation problem _ requires robots to form a target pattern from an initial configuration and our plane formation problem is a subproblem of the pattern formation problem in 3d - space .",
    "to investigate the pattern formation problem in 2d - space , which contains the line formation problem as a subproblem , suzuki and yamashita  @xcite used the concept of _ symmetricity _ to measure the degree of symmetry of a configuration in 2d - space .",
    "let @xmath4 be a configuration .",
    "then its symmetricity @xmath5 is the order of the cyclic group of @xmath4 , with the rotation center @xmath6 being the center of the smallest enclosing circle of @xmath4 , if @xmath7 .",
    "that is , @xmath5 is the number of angles such that rotating @xmath4 by @xmath8 ( @xmath9 ) around @xmath6 produces @xmath4 itself , which intuitively means that the @xmath5 robots forming a regular @xmath5-gon in @xmath4 may not be able to break symmetry among them .-",
    "gon with an arbitrary center and a set of two points as a regular @xmath10-gon with the center at the midpoint .",
    "] however , when @xmath11 , the symmetricity @xmath5 is defined to be @xmath12 independently of its rotational symmetry .",
    "this is the crucial difference between the cyclic group and the symmetricity that reflects the fact that the robot at @xmath6 _ can _ translate @xmath4 into another configuration @xmath13 with symmetricity @xmath12 by simply leaving @xmath6 .",
    "the following result has been obtained  @xcite : a target pattern @xmath14 is formable from an initial configuration @xmath4 , if and only if @xmath5 divides @xmath15 .    in this paper ,",
    "based on the results in 2d - space , we measure the symmetry among robots in 3d - space by rotation groups , each of which is defined by a set of rotation axes and their arrangement . in 3d - space",
    ", such rotation groups with finite order are classified into the cyclic groups , the dihedral groups , the tetrahedral group , the octahedral group , and the icosahedral group .",
    "we call the cyclic groups and the dihedral groups _ two - dimensional _",
    "( 2d ) rotation groups in the sense that the plane formation problem is obviously solvable from a configuration on which only a 2d rotation group acts , since there is a single rotation axis or a principal rotation axis and all robots can agree on a plane perpendicular to the axis and containing the center of the smallest enclosing ball of the robots .",
    "then the oblivious ( thus , non - oblivious ) fsync robots can easily solve the plane formation problem by moving onto the agreed plane .",
    "the other three rotation groups are recognized as the groups formed by the rotations on the corresponding regular polyhedra and they are also called polyhedral groups .",
    "a regular polyhedron consists of congruent regular polygons and all its vertices are congruent . a regular polyhedron has _",
    "vertex - transitivity _ , that is , there are rotations that replace any two vertices with keeping the polyhedron unchanged as a whole .",
    "for example , we can rotate a cube around any axis containing two opposite vertices , any axis containing the centers of opposite faces , and any axis containing the midpoints of opposite edges .",
    "for each regular polyhedron , the rotations applicable to it form a group and , in this way , the tetrahedral group , the octahedral group , and the icosahedral group are defined .",
    "we call them _ three - dimensional _ ( 3d ) rotation groups",
    ".    when a 3d rotation group acts on a configuration , the robots are not on one plane .",
    "in addition , the vertex - transitivity among the robots may allow some of them to have identical local observations .",
    "this may result in an infinite execution , where the robots keep symmetric movement in 3d - space and never agree on a plane .",
    "a vertex - transitive set of points is obtained by specifying a seed point and a set of symmetry operations , which consists of rotations around an axis , reflections for a mirror plane ( _ bilateral symmetry _ ) , reflections for a point ( _ central inversion _ ) , and _ rotation - reflections _",
    "however , it is sufficient to consider vertex - transitive sets of points obtained by transformations that preserve the center of the smallest enclosing ball of the robots and keep euclidean distance and handedness , in other words , direct congruent transformations , since otherwise , the robots can break the symmetry in a vertex - transitive set of points because all local coordinate systems are righthanded .",
    "such symmetry operations consist of rotations around some axes .",
    "( see @xcite for more detail . )",
    "we define the _ rotation group _ of a configuration in 3d - space as the rotation group that acts on the configuration , i.e. , a set of points .",
    "let @xmath4 and @xmath16 be a set of points in 3d - space and its rotation group , respectively .",
    "then the robots are partitioned into vertex - transitive subsets regarding @xmath16 , so that for each subset , the robots in it may have the same local observation .",
    "we call this decomposition _",
    "@xmath16-decomposition _ of @xmath4 .",
    "the goal of this paper is to show the following theorem :    [ theorem : main ] let @xmath4 and @xmath17 be an initial configuration and the @xmath16-decomposition of @xmath4 , respectively . then irrespective of obliviousness",
    ", fsync robots can form a plane from @xmath4 if and only if ( i ) @xmath16 is a 2d rotation group , or ( ii ) @xmath16 is a 3d rotation group and there exists a subset @xmath18 such that @xmath19 .",
    "we can rephrase this theorem as follows : fsync robots can not form a plane from an initial configuration @xmath4 if and only if @xmath16 is a 3d rotation group and @xmath20 for each @xmath18 .",
    "the impossibility proof is by a construction based on the @xmath16-decomposition of the robots .",
    "obviously @xmath21 , and @xmath22 are the cardinalities of the 3d rotation groups and when a vertex - transitive set has a cardinality in @xmath23 , the corresponding rotation group allows `` symmetric '' local coordinate systems of those robots that allows identical local observations of those robots .",
    "thus they move symmetrically regarding the rotation group that results in an infinite execution where the robots positions keep the 3d rotation group forever",
    ". local memory at robots does not improve the situation since there exists an initial configuration where the positions and local coordinate systems of robots are symmetric and the contents of local memory at robots are identical , e.g. , empty .",
    "hence we have the same impossibility result for non - oblivious fsync robots .",
    "theorem  [ theorem : main ] implies the following , which is somewhat counter - intuitive : the plane formation problem is _ solvable _ , even if the robots form a regular polyhedron except the regular icosahedron in an initial configuration @xmath4 , while it is _ unsolvable _ for the semi - regular polyhedra except an icosidodecahedron .    for the possibility proof",
    ", we present a plane formation algorithm for oblivious fsync robots , that non - oblivious fsync robots can execute by ignoring the content of their local memory .",
    "the proposed algorithm consists of a symmetry breaking algorithm and a landing algorithm .",
    "when the rotation group @xmath16 of an initial configuration @xmath4 is a 3d rotation group , the symmetry breaking algorithm translates @xmath4 into another configuration @xmath13 whose rotation group @xmath24 is a 2d rotation group . from the condition of theorem  [ theorem : main ] , the @xmath16-decomposition of @xmath4 contains one of the above five ( semi-)regular polyhedra , i.e. , a regular tetrahedron , a regular octahedron , a cube , a regular dodecahedron , and an icosidodecahedron . the symmetry breaking algorithm breaks the symmetry of these five polyhedra so that the resulting configuration @xmath13 as a whole has a 2d rotation group .",
    "then the robots can agree on a plane as described before for the 2d - rotation groups and the landing algorithm assigns distinct landing points on the agreed plane .",
    "the landing algorithm is quite simple but contains some technical subtleties .",
    "we describe the entire plane formation algorithm with its correctness proofs .    * related works .  *",
    "autonomous mobile robot systems in 2d - space has been extensively investigated and the main research interest has been the computational power of robots .",
    "many fundamental distributed tasks have been introduced , for example , _ gathering _ , _ pattern formation _ , _ partitioning _ , and _",
    "covering_. these problems brought us deep insights on the limit of computational power of autonomous mobile robot systems and revealed necessary assumptions of such systems to complete a given task .",
    "we survey the state of the art of autonomous mobile robot systems in 2d - space since there is few research on robots in 3d - space .",
    "the book by flocchini et al .",
    "@xcite contains almost all results on autonomous mobile robot systems up to year 2012 .",
    "asynchrony and movement of robots are considered to be subject to the _ adversary_. in other words , we consider the worst case scenario .",
    "besides fully synchronous ( fsync ) robots , there are two other types of robots , _ semi - synchronous _ ( ssync ) and _ asynchronous _",
    "( async ) robots .",
    "the robots are ssync if some robots do not start the @xmath3-th look - compute - move cycle for some @xmath3 , but all of those who have started the cycle synchronously execute their look , compute and move phases  @xcite .",
    "the robots are async if no assumptions are made on the execution of look - compute - move cycles  @xcite .",
    "the movement of a robot is _ non - rigid _ if in each move phase , the robot moves at least unknown minimum moving distance @xmath25 , but after moving @xmath25 it may stop on any arbitrary point on the track to the next position .",
    "if the length of the track to the next position is smaller than @xmath25 , it stops at the next position .",
    "if a robot reaches its next position in any move phase , its movement is _",
    "rigid_. most existing papers consider non - rigid movement of robots .",
    "another important assumption is whether the robots agree on the clockwise direction , i.e. , _",
    "chirality_. most existing literature assumes non - rigid movement and chirality .",
    "one of the most general form of formation tasks for autonomous mobile robot systems is the _ pattern formation problem _ that requires the robots to form a given target pattern .",
    "the pattern formation problem in 2d - space includes the line formation problem as a subproblem and yamashita et al . investigated its solvability for each of the fsync , ssync and async models  @xcite , that are summarized as follows : ( 1 ) for non - oblivious fsync robots ,",
    "a pattern @xmath14 is formable from an initial configuration @xmath4 if and only if @xmath5 divides @xmath15 .",
    "( 2 ) pattern @xmath14 is formable from @xmath4 by oblivious async robots if @xmath14 is formable from @xmath4 by non - oblivious fsync robots , except for @xmath14 being a point of multiplicity 2 .",
    "this exceptional case is called the rendezvous problem . indeed , it is trivial for two fsync robots , but is unsolvable for two oblivious ssync ( and hence async ) robots  @xcite . on the other hand , oblivious ssync ( and async )",
    "robots can converge to a point .",
    "therefore it is a bit surprising to observe that the point formation problem for more than two robots is solvable even for async robots .",
    "the result first appeared in @xcite for ssync robots and then is extended for async robots in @xcite .",
    "as a matter of fact , except the existence of the rendezvous problem , the point formation problem for more than two robots ( which is also called as the gathering problem ) is the easiest problem in that it is solvable from any initial configuration @xmath4 , since @xmath26 when @xmath14 is a point of multiplicity @xmath27 , and @xmath5 is always a divisor of @xmath27 by the definition of the symmetricity , where @xmath27 is the number of robots .",
    "the other easiest case is a regular @xmath27-gon ( frequently called the circle formation problem ) , since @xmath26 .",
    "a circle is formable from any initial configuration , like the point formation problem for more than two robots .",
    "recently the circle formation problem for @xmath27 oblivious async robots ( @xmath28 ) is solved without chirality  @xcite .",
    "das et al . considered formation of a sequence of patterns by oblivious ssync robots with rigid movement  @xcite .",
    "they showed that the symmetricity of each pattern of a formable sequence should be identical and a multiple of the symmetricity of an initial configuration . such sequence of patterns is a geometric global memory formed by oblivious robots .    to circumvent the symmetricity and enable arbitrary pattern formation ,",
    "yamauchi and yamashita proposed a randomized algorithm that allows the robots to probabilistically break the symmetricity of the initial configuration and showed that the oblivious async robots can form any target pattern with probability @xmath12  @xcite .",
    "the notion of _ compass _ was first introduced in  @xcite that assumes agreement of the direction and/or the orientation of @xmath0-@xmath1 local coordinate systems .",
    "flocchini et al",
    ". showed that if the oblivious async robots without chirality agree on the directions and orientations of @xmath0 and @xmath1 axes , they can form any arbitrary target pattern  @xcite .",
    "flocchini et al .",
    "showed that agreement of the directions and orientation of both axes of local coordinate systems allows oblivious async robots with _ limited visibility _ to solve the point formation problem  @xcite .",
    "a robot has limited visibility if it can observe other robots within unknown fixed distance from itself .",
    "agreement of the direction and the orientation of two axes can be replaced by agreement of direction and the orientation of one axis and chirality .",
    "souissi et al .",
    "investigate the effect of the deviation of one axis from the global coordinate system at robots with chirality on the point formation problem and first introduced unreliable compasses , called _ eventually consistent compass _",
    ", that is inaccurate for an arbitrary long time , i.e. , it has an arbitrary deviation and the deviation dynamically changes , but eventually stabilizes to accurate axes  @xcite .",
    "izumi et al . investigated the maximum static and dynamic deviation of compass for the point formation problem of two oblivious async robots  @xcite .",
    "robustness of autonomous mobile robot systems has been discussed against error in sensing , computation , control , and several kinds of faults .",
    "a system is _ self - stabilizing _ if it accomplishes its task from an arbitrary initial configuration .",
    "a self - stabilizing system can tolerate any finite number of transient faults by considering the configuration after the final fault as an arbitrary initial configuration  @xcite .",
    "suzuki and yamashita pointed out that any oblivious mobile robot system is self - stabilizing since it does not depend on previous cycles  @xcite .",
    "cohen and peleg considered error in sensing , computation , and control , and showed acceptable range of them for oblivious async robots to converge to a point  @xcite .",
    "two fundamental types of permanent faults in distributed computing are _ crash fault _ that stops the faulty entity and _ byzantine fault _ that allows arbitrary ( malicious ) behavior of faulty entity .",
    "cohen and peleg considered the effect of crash faults at robots on the convergence problem for oblivious async robots  @xcite .",
    "bouzid et al .",
    "considered the effect of byzantine faults at robots on the convergence problem in one - dimensional space ( i.e. , line ) for ssync and async robots  @xcite .",
    "agmon and peleg considered both crash faults and byzantine faults for the point formation problem  @xcite .",
    "efrima and peleg considered the _ partitioning problem _ that requires the robots to form teams of size @xmath29 that divides @xmath27  @xcite . without any compass , the partition problem is unsolvable from a symmetric initial configuration and they considered the availability of compass and asynchrony among robots .",
    "izumi et al . proposed an approximation algorithm for the _ set cover problem _ of ssync robots that requires that for a given set of target points , there is at least one robot in a unit distance from each target point  @xcite .",
    "in contrast to the pattern formation problem , these problems have no ( absolute ) predefined final positions .",
    "computational power of robots with limited visibility and without any additional assumption has been also discussed .",
    "yamauchi and yamashita showed that oblivious fsync ( thus ssync and async ) robots with limited visibility have substantially weaker formation power than the robots with unlimited visibility  @xcite .",
    "ando et al . proposed a convergence algorithm for oblivious ssync robots with limited visibility  @xcite while flocchini et al .",
    "assumed consistent compass for convergence of oblivious async robots with limited visibility  @xcite .",
    "peleg et al .",
    "first introduced the _ luminous robot model _ where each robot is equipped with externally and/or internally visible lights  @xcite .",
    "light is an abstraction of both local memory and communication medium .",
    "das et al .",
    "investigated the class of tasks that the luminous robots can accomplish  @xcite .",
    "they provided simulation algorithms for oblivious robots with constant number of externally visible bits to simulate robots without lights in stronger synchronization model .",
    "all these papers discuss autonomous mobile robot systems in 2d - space and little is known when the robots are placed in 3d - space .",
    "this paper first investigates autonomous mobile robot systems in 3d - space and give a characterization of the plane formation problem .",
    "* organization .  * in section  [ sec : prel ] , we first define the robot model and introduce the rotation group for points in 3d - space .",
    "then we briefly show our main idea for the symmetry breaking algorithm .",
    "we start with some properties imposed on the robots by their rotation group in section  [ sec:3dsym ] . in section",
    "[ sec : plf ] , we prove theorem  [ theorem : main ] by showing the impossibility of symmetry breaking and by presenting a plane formation algorithm for oblivious fsync robots for solvable instances . finally , section  [ sec : concl ] concludes this paper by giving some concluding remarks .",
    "let @xmath30 be a set of anonymous @xmath27 robots each of which is represented by a point in 3d - space .",
    "their indices are used just for description . without loss of generality , we assume @xmath31 , since all robots are already on a plane when @xmath32 . by @xmath33",
    "we denote the global @xmath0-@xmath1-@xmath2 coordinate system .",
    "let @xmath34 be the position of @xmath35 at time @xmath36 in @xmath33 , where @xmath37 is the set of real numbers .",
    "a _ configuration _ of @xmath38 at time @xmath36 is denoted by @xmath39 .",
    "we assume that the robots initially occupy distinct positions , i.e. , @xmath40 for all @xmath41 . in general , @xmath42 can be a multiset , but it is always a set throughout this paper since the proposed algorithm avoids any multiplicity . to a configuration with multiplicity when proving the impossibility result by reduction to the absurd . ]",
    "the robots have no access to @xmath33 .",
    "instead , each robot @xmath35 has a local @xmath0-@xmath1-@xmath2 coordinate system @xmath43 , where the origin is always its current location , while the direction of each positive axis and the magnitude of the unit distance are arbitrary but never change .",
    "we assume that @xmath33 and all @xmath43 are right - handed .",
    "thus @xmath43 is either a uniform scaling , transformation , rotation , or their combination of @xmath33 . by @xmath44",
    "we denote the coordinates of a point @xmath45 in @xmath43 .",
    "each robot repeat a _",
    "look - compute - move cycle_. we investigate fully synchronous ( fsync ) robots in this paper .",
    "they all start the @xmath36-th look - compute - move cycle simultaneously and synchronously execute each of its look , compute , and move phases .",
    "we specifically assume without loss of generality that the @xmath46-th look - compute - move cycle starts at time @xmath36 and finishes before time @xmath47 . at time @xmath36",
    ", each robot @xmath35 simultaneously looks and obtains a set changes whenever @xmath35 moves , notation @xmath48 is more rigid , but we omit parameter @xmath36 to simplify its notation . ] @xmath49 we call @xmath50 the _ local observation _ of @xmath35 at @xmath36 .",
    "next , @xmath35 computes its next position using an algorithm @xmath51 , which is common to all robots .",
    "if @xmath51 uses only @xmath50 , we say that @xmath35 is _",
    "oblivious_. thus @xmath51 is a total function from @xmath52 to @xmath53 , where @xmath54 is the set of all configurations .",
    "contains such configurations .",
    "however we do not assume multiplicity detection ability of robots .",
    "thus the input to an algorithm is a set of points .",
    "as we will show later , the proposed pattern formation algorithm makes no multiplicity during any execution thus the input to the algorithm is always a set of @xmath27 points . ] otherwise , we say @xmath35 is _ non - oblivious _ , i.e. , @xmath35 can use past local observations and past outputs of @xmath51 .",
    "we say that a non - oblivious robot is equipped with local memory .",
    "finally , @xmath35 moves to @xmath55 in @xmath43 before time @xmath47 .",
    "thus we assume rigid movement .",
    "an infinite sequence of configurations @xmath56 is called an _ execution _ from an _ initial configuration _ @xmath57 .",
    "observe that the execution @xmath58 is uniquely determined , once initial configuration @xmath57 , local coordinate systems at time @xmath59 , local memory contents ( for non - oblivious robots ) , and algorithm @xmath51 are fixed .",
    "we say that an algorithm @xmath51 _ forms a plane _ from an initial configuration @xmath57 , if , regardless of the choice of initial local coordinate systems of robots and their initial memory contents ( if any ) , for any execution @xmath60 , there exists finite @xmath61 such that @xmath42 satisfies the following three conditions :          in 2d - space , the symmetricity @xmath5 of a set of points @xmath4 is defined by the order of its cyclic group , where the rotation center @xmath6 is the center of the smallest enclosing circle of @xmath4 , if @xmath7 .",
    "otherwise , @xmath65 .",
    "then @xmath4 is decomposed into @xmath66 regular @xmath5-gons with @xmath6 being the common center , where @xmath67  @xcite .",
    "( see figure  [ fig:2dim - sym ] . ) since the robots in the same regular @xmath5-gon may have the same local observation , no matter which deterministic algorithm they obey , we can not exclude the possibility that they continue to keep a regular @xmath5-gon during the execution .",
    "this is the main reason that a target pattern @xmath14 is not formable from an initial configuration @xmath4 , if @xmath5 does not divide @xmath15  @xcite .    .",
    "eight robots and their local coordinate systems are symmetric with respect to the center of their smallest enclosing circle .",
    "there are two groups consisting of @xmath68 symmetric robots and the robots in each group can not break their symmetry .",
    ", width=113 ]    in 3d - space , we consider the smallest enclosing ball and the convex hull of the positions of robots , i.e. , robots are vertices of a convex polyhedron .",
    "typical symmetric polyhedra are regular polyhedra ( platonic solids ) and semi - regular polyhedra ( archimedean solids ) .",
    "a _ uniform polyhedron _ is a polyhedron consisting of regular polygons and all its vertices are congruent .",
    "any uniform polyhedron is _ vertex transitive _",
    ", i.e. , for any pair of vertices of the polyhedron , there exists a symmetry operation that moves one vertex to the other with keeping the polyhedron as a whole .",
    "intuitively , it makes sense to expect that all vertices ( robots ) in a uniform polyhedron may have identical local observations and might not break the symmetry in the worst case .",
    "the family of uniform polyhedra consists of @xmath69 regular polyhedra ( the regular tetrahedron , the cube , the regular octahedron , the regular dodecahedron , and the regular icosahedron ) , 13 semi - regular polyhedra , and other non - convex 57 polyhedra .. ] we do not care for non - convex uniform polyhedra .",
    "contrary to the intuition above , we will show that when robots form a regular tetrahedron , a regular octahedron , a cube , a regular dodecahedron , or an icosidodecahedron , they can break their symmetry and form a plane .    in general , symmetry operations on a polyhedron consists of rotations around an axis , reflections for a mirror plane ( _ bilateral symmetry _ ) , reflections for a point ( _ central inversion _ ) , and _ rotation - reflections _  @xcite .",
    "but as briefly argued in section  [ sec : intro ] .",
    "since all local coordinate systems are right - handed , it is sufficient to consider only direct congruent transformations and those keeping the center .",
    "they are rotations around some axes that contains the center .",
    "we thus concentrate on rotation groups with finite order .    in 3d - space , there are five kinds of rotation groups of finite order each of which is defined by the set of rotation axes and their arrangement  @xcite .",
    "we can recognize each of them as the group formed by rotation operations on some polyhedron .",
    "consider a regular pyramid that has a regular @xmath29-gon as its base ( figure  [ fig : axis - cyc ] ) .",
    "the rotation operations for this regular pyramid is rotation by @xmath70 for @xmath71 around an axis containing the apex and the center of the base .",
    "we call such an axis _",
    "@xmath29-fold axis_. let @xmath72 be the rotation by @xmath70 around this @xmath29-fold axis with @xmath73 where @xmath74 is the identity element .",
    "then , @xmath75 form a group , which is called the _ cyclic group _",
    ", denoted by @xmath76 .    a regular prism ( except a cube ) that has a regular @xmath77-gon as its base has two types of rotation axes , one is the @xmath77-fold axis containing the centers of its base and top , and the others are @xmath10-fold axes that exchange the base and the top ( figure  [ fig : axis - dih ] ) .",
    "we call this single @xmath77-fold axis _ principal axis _ and the remaining @xmath77 @xmath10-fold axes",
    "_ secondary axes_. these rotation operations on a regular prism form a group , which is called the _ dihedral group _ , denoted by @xmath78 .",
    "the order of @xmath78 is @xmath79 .",
    "when @xmath80 , we can define @xmath81 in the same way , but in the group theory we do not distinguish the principal axis from the secondary one .",
    "indeed , @xmath81 is isomorphic to the klein four - group , denoted by @xmath82 , which is an abelian group and is a normal subgroup of the alternating group of degree @xmath68 , denoted by @xmath83 .",
    "later we will show that we can recognize the principal axis of @xmath81 from the others because we consider rotations on a set of points .",
    "the rotation axes of a regular polyhedron are classified into three types : the axes that contain the centers of opposite faces ( type @xmath84 ) , the axes that contain opposite vertices ( type @xmath85 ) , and the axes that contain the midpoints of opposite edges ( type @xmath86 ) . for each regular polyhedron",
    ", the rotation operations also form a group and the following three groups are called the _",
    "polyhedral groups_.    the regular tetrahedron has four @xmath87-fold type @xmath84 ( and @xmath85 ) axes and three @xmath10-fold type @xmath86 axes ( figure  [ fig : axis - tetra ] ) .",
    "this rotation group is called the _ tetrahedral group _ denoted by @xmath88 .",
    "the tetrahedral group is isomorphic to @xmath83 and its order is @xmath89 .",
    "the regular octahedron has four @xmath87-fold type @xmath84 axes , three @xmath68-fold type @xmath85 axes , and six @xmath10-fold type @xmath86 axes ( figure  [ fig : axis - octa ] ) .",
    "this rotation group is called the _ octahedral group _ denoted by @xmath90 .",
    "the octahedral group is isomorphic to the symmetric group of degree @xmath68 denoted by @xmath91 and its order is @xmath92 .. each rotation permutes the diagonal lines of the cube . ]",
    "the regular icosahedron has ten @xmath87-fold type @xmath84 axes , six @xmath69-fold type @xmath85 axes , and fifteen @xmath10-fold type @xmath86 axes ( figure  [ fig : axis - icosa ] ) .",
    "this rotation group is called the _ icosahedral group _ , denoted by @xmath93 .",
    "the icosahedral group is isomorphic to the alternating group of degree @xmath69 denoted by @xmath94 and its order is @xmath22 .    for each regular polyhedron , consider the center of each face .",
    "these centers also form a regular polyhedron , which is called the _ dual _ of the original regular polyhedron .",
    "any dual polyhedron has the same rotation group as its original polyhedron .",
    "the regular tetrahedron is self - dual , the cube and the regular octahedron are dual each other , and so are the regular dodecahedron and the regular icosahedron . hence we have three polyhedral groups .",
    "we consider the positions of points of @xmath4 in the first octant , which defines the positions of points of @xmath4 in the third , sixth , and the eighth octant by the rotations of @xmath81 .",
    "the discussion also holds symmetrically in the second octant , that determines the positions of points in the fourth , fifth , and seventh octant .",
    "* @xmath45 is on the @xmath0-axis ( thus , the discussion follows for @xmath1-axis and @xmath2-axis , respectively ) .",
    "* @xmath45 is on the @xmath0-@xmath1 plane ( thus , the discussion follows for @xmath1-@xmath2 plane and @xmath2-@xmath0 plane , respectively ) .",
    "* @xmath45 is on the line @xmath97 .",
    "* other cases .      * case a :  * when @xmath96 is on the @xmath0-axis . because @xmath101 , we have a corresponding point on the negative @xmath0-axis ( figure  [ fig : rot3 - 1 ] ) .",
    "this allows us to recognize the @xmath0-axis from the @xmath1-axis and @xmath2-axis , hence @xmath4 should have corresponding points on @xmath1-axis and @xmath2-axis . in this case , we can rotate the corresponding six points around the four @xmath87-fold axes .",
    "* case b :  * when @xmath96 is on the @xmath0-@xmath1 plane .",
    "first consider the case where a point @xmath96 is on the line @xmath102 . because @xmath101 , we have four corresponding points on the @xmath0-@xmath1 plane that forms a square ( figure  [ fig : rot3 - 2 ] ) .",
    "this allows us to recognize the @xmath2-axis from the other two axes , hence @xmath1-@xmath2 plane and @xmath2-@xmath0 plane also have the corresponding squares .",
    "hence , the twelve points form a cuboctahedron , and we can rotate them around the four @xmath87-fold axes .    when @xmath45 is not on the line @xmath102 , because @xmath101 , we have four corresponding points on the @xmath0-@xmath1 plane that forms a rectangle ( figure  [ fig : rot3 - 3 ] ) .",
    "this allows us to recognize the principal axis . in the same way as the above case",
    ", there are two rectangles on the @xmath1-@xmath2 plane and @xmath2-@xmath0 plane .",
    "the obtained polyhedron consists of @xmath89 vertices and we can rotate it around the four @xmath87-fold axes .      because @xmath101 , we have four corresponding points in the third , sixth , and the eighth octant , that forms a regular tetrahedron ( figure  [ fig : rot3 - 4 ] ) . in this case",
    ", we can rotate the corresponding four points around the four @xmath87-fold axes .",
    "for a point @xmath96 in the first octant , because @xmath101 , we have corresponding four points in the third , sixth , and the eighth octant , that forms a sphenoid ( figure  [ fig : rot3 - 5 ] ) .",
    "this allows us to recognize the @xmath2-axis from the others , hence @xmath1-axis and @xmath0-axis also have the corresponding sphenoids .",
    "the obtained polyhedron consists of @xmath89 vertices and we can rotate it around the four @xmath87-fold axes ."
  ],
  "abstract_text": [
    "<S> creating a swarm of mobile computing entities frequently called robots , agents or sensor nodes , with self - organization ability is a contemporary challenge in distributed computing . motivated by this , we investigate the _ plane formation problem _ that requires a swarm of robots moving in the three dimensional euclidean space to land on a common plane . </S>",
    "<S> the robots are fully synchronous and endowed with visual perception . </S>",
    "<S> but they do not have identifiers , nor access to the global coordinate system , nor any means of explicit communication with each other . though there are plenty of results on the agreement problem for robots in the two dimensional plane , for example , the point formation problem , the pattern formation problem , and so on , this is the first result for robots in the _ three dimensional space_. this paper presents a necessary and sufficient condition for fully - synchronous robots to solve the plane formation problem that does not depend on obliviousness i.e. , the availability of local memory at robots . </S>",
    "<S> an implication of the result is somewhat counter - intuitive : the robots _ can not _ form a plane from most of the semi - regular polyhedra , while they _ can _ form a plane from every regular polyhedron ( except a regular icosahedron ) , whose symmetry is usually considered to be higher than any semi - regular polyhedrdon .    </S>",
    "<S> * keywords . * symmetry breaking , mobile robots , plane formation , rotation group . </S>"
  ]
}