{
  "article_text": [
    "we investigate the following problem : what is the best possible approximation ratio for integer programs where the constraint matrix is sparse ? to put this in context we recall a famous result of lenstra @xcite : integer programs with a constant number of variables or a constant number of constraints can be solved in polynomial time .",
    "our investigations analogously ask what is possible if each constraint involves at most @xmath2 variables , or if each variable appears in at most @xmath2 constraints .    rather than consider all integer programs , we consider only packing and covering problems .",
    "such programs have only positive quantities in their parameters .",
    "one reason for this is that _ every _ integer program can be rewritten ( possibly with additional variables ) in such a way that each constraint contains at most 3 variables and each variable appears in at most 3 constraints , if both positive and negative coefficients are allowed . aside from this , packing programs and covering programs capture a substantial number of combinatorial optimization problems and are interesting in their own right .    a _ covering _ ( resp .  _",
    "packing _ ) _ integer program _ , shorthanded as cip ( resp .",
    "pip ) henceforth , is an integer program of the form @xmath0 ( resp .",
    "@xmath15 ) with @xmath3 nonnegative and rational . note that cips are sometimes called _ multiset multicover _ when @xmath1 and @xmath16 are integral .",
    "we call constraints @xmath17 _ multiplicity constraints _ ( also known as _ capacity constraints _ ) .",
    "we allow for entries of @xmath18 to be infinite , and without loss of generality , all finite entries of @xmath18 are integral .",
    "an integer program with constraint matrix @xmath1 is _ @xmath2-row - sparse _ , or _",
    "@xmath2-rs _ , if each row of @xmath1 has at most @xmath2 entries ; we define _ @xmath2-column - sparse ( @xmath2-cs ) _ similarly . as a rule of thumb we ignore the case @xmath19 ,",
    "since such problems trivially admit fully polynomial - time approximation schemes ( fptas s ) or poly - time algorithms .",
    "the symbol @xmath20  denotes the all - zero vector , and similarly @xmath21  denotes the all - ones vector . for covering problems an _ @xmath22-approximation algorithm _ returns a feasible solution with objective value at most @xmath22 times optimal ; for packing , the algorithm returns a feasible solution with objective value is at least @xmath23 times optimal .",
    "we use @xmath24 to denote the number of variables and @xmath25 the number of constraints ( i.e.  the number of columns and rows of @xmath1 , respectively ) . throughout the paper , @xmath1 will be used as a matrix .",
    "we let @xmath26 denote the @xmath27th column of @xmath1 , and let @xmath28 denote the @xmath29th row of @xmath1 .",
    "the special case of 2-rs cip where @xmath3 are 0 - 1 is the same as min vertex cover , which is @xmath30-hard .",
    "more generally , 0 - 1 @xmath2-rs cip is the same as @xmath2-bounded hypergraph min vertex cover ( a.k.a",
    ".  set cover with maximum frequency @xmath2 ) which is not approximable to @xmath7 for any fixed @xmath5 unless @xmath31=@xmath32  @xcite ( @xmath8 under the unique games conjecture @xcite ) .",
    "this special case is known to admit a matching positive result : set cover with maximum frequency @xmath2 can be @xmath2-approximated by direct rounding of the naive lp  @xcite or local ratio / primal - dual methods @xcite .",
    "the following results are known for other special cases of @xmath2-rs cip with multiplicity constraints : hochbaum @xcite gave a @xmath2-approximation in the special case that @xmath1 is 0 - 1 ; hochbaum et al .",
    "@xcite and bar - yehuda & rawitz @xcite gave pseudopolynomial 2-approximation algorithms for the case that @xmath11 and @xmath18 is finite . for the special case @xmath33 , carr et al .",
    "@xcite gave a @xmath2-approximation , and fujito & yabuta @xcite gave a primal - dual @xmath2-approximation .",
    "moreover @xcite claim a @xmath2-approximation for general @xmath18 , however , the papers do not give a proof and we do not see a straightforward method of extending their techniques to the general @xmath18 case .",
    "our first main result , given in , is a simple proof of the same claim .    [ theorem : main1 ] there is a polynomial time @xmath2-approximation algorithm for @xmath2-rs cips with multiplicity constraints .",
    "our approach is to first consider the special case that there are no multiplicity constraints ( i.e.  @xmath34 for all @xmath27 ) ; we then extend to the case of finite @xmath18 via _ knapsack - cover inequalities _ , using linear programming ( lp ) techniques from carr et al .",
    "a @xmath35-approximation algorithm is relatively easy to obtain using lp rounding ; in order to get the tighter ratio @xmath2 , we replace constraints by other ",
    "@xmath36-equivalent \" constraints ( see ) with better rounding properties .",
    "the algorithm requires a polynomial - time linear programming subroutine .",
    "independent simultaneous work of koufogiannakis & young @xcite also gives a full and correct proof of .",
    "their approach works for a broad generalization of @xmath2-rs cips and runs in strongly polynomial time .",
    "our approach has the generic advantage of giving new ideas that can be used in conjunction with other lp - based methods , and the specific advantage of giving integrality gap bounds ( see ) .      before 2009 ,",
    "no constant - factor approximation was known for @xmath2-cs pips , except in special cases .",
    "if every entry of @xmath16 is @xmath37 then randomized rounding provides a constant - factor approximation .",
    "_ demand matching _ is the special case of 2-cs pip where ( i ) in each column of @xmath1 all nonzero values in that column are equal to one another and ( ii ) no two columns have their nonzeroes in the same two rows .",
    "shepherd & vetta  @xcite showed demand matching is @xmath30-hard but admits a @xmath38-approximation algorithm when @xmath33 ; their approach also gives a @xmath39-approximation for 2-cs pip instances satisfying ( i ) .",
    "results of chekuri et al .",
    "@xcite yield a @xmath40-approximation algorithm for @xmath2-cs pip instances satisfying ( i ) and such that the maximum entry of @xmath1 is less than the minimum entry of @xmath16 .",
    "the special case of @xmath2-cs pip where @xmath41 are 0 - 1 is the same as _ min - weight @xmath2-set packing _ , _ hypergraph matching with edges of size @xmath42 _ , and _ strong independent sets in hypergraphs with degree at most @xmath2_. the best approximation ratio known for this problem is @xmath43 @xcite for general weights , and @xmath44 when @xmath45  @xcite .",
    "the best lower bound is due to hazan et al .",
    "@xcite , who showed @xmath46-inapproximability unless @xmath31=@xmath32 , even for @xmath47 .",
    "our second main result , given in , is the following result .",
    "[ theorem : main2 ] there is a polynomial time @xmath10-approximation algorithm for @xmath2-cs pips with multiplicity constraints .",
    "we use the _ iterated lp relaxation _  @xcite technique to find an integral solution whose objective value is larger than the optimum , but violates some constraints .",
    "however the violation can be bounded",
    ". then we use a colouring argument to decompose the violating solution into @xmath48 feasible solutions giving us the @xmath48-factor algorithm .",
    "the original arxiv eprint and conference version  @xcite of this work gave a @xmath49-approximation for @xmath2-cs pip using iterated relaxation plus a randomized decomposition approach ; that was the first approximation algorithm for this problem with ratio that depends only on @xmath2 . subsequently in april 2009 , c.  chekuri , a.  ene and n.  korula ( personal communication ) obtained an @xmath50 algorithm using randomized rounding , and an @xmath48-approximation in may 2009 .",
    "the latter method was independently re - derived by the authors , which appears in this version .",
    "finally , bansal et al .",
    "@xcite , in august 2009 , gave a simple and elegant @xmath51-approximation algorithm based on randomized rounding with a careful alteration argument .",
    "srinivasan @xcite showed that @xmath2-cs cips admit a @xmath52-approximation .",
    "kolliopoulos and young @xcite extended this result to handle multiplicity constraints .",
    "there is a matching hardness result : it is @xmath32-hard to approximate @xmath2-set cover , which is the special case where @xmath53 are 0 - 1 , better than @xmath54 for any @xmath55  @xcite .",
    "hence for @xmath2-cs cip the best possible approximation ratio is @xmath56 .",
    "a @xmath57-approximation algorithm can be obtained by separately applying an approximation scheme to the knapsack problem corresponding to each constraint .",
    "although 0 - 1 2-cs cip is edge cover which lies in @xmath31 , general 2-cs cip is @xmath32-hard due to hochbaum @xcite , who also gave a bicriteria approximation algorithm . here , we give a stronger inapproximability result .",
    "[ theorem : main3 ] for every @xmath5 it is @xmath32-hard to approximate 2-cs cips of the form @xmath58 and @xmath59 within ratio @xmath60 even if the nonzeroes of every column of @xmath1 are equal and @xmath1 is of the block form @xmath61 $ ] where each @xmath62 is 1-cs .",
    "our proof modifies a construction of @xcite ; we also note a construction of @xcite can be modified to prove @xmath30-hardness for the problem .",
    "the special case of 2-rs pip where @xmath53 are 0 - 1 is the same as max independent set , which is not approximable within @xmath63 unless @xmath64 @xcite . on the other hand ,",
    "@xmath24-approximation of any packing problem is easy to accomplish by looking at the best singleton - support solution .",
    "a slightly better @xmath65-approximation , for any fixed @xmath66 , can be accomplished by exhaustively guessing the @xmath66 most profitable variables in the optimal solution , and then solving the resulting @xmath66-dimensional integer program to optimality via lenstra s result @xcite .",
    "a closely related problem is @xmath2-dimensional knapsack , which are pips or cips with at most @xmath2 constraints ( in addition to nonnegativity and multiplicity constraints ) . for fixed @xmath2",
    ", such problems admit a ptas and pseudo - polynomial time algorithms , but are weakly @xmath32-hard ; see @xcite and ( * ? ? ?",
    "9 ) for detailed references .",
    "[ sec : semimod ] when @xmath67 , a natural way to generalize cip / pips is to allow the objective function to be submodular ( rather than linear ) . for minimizing a submodular objective subject to @xmath2-row sparse covering constraints",
    ", the framework of koufogiannakis & young @xcite gives a @xmath2-approximation ; if also @xmath41 are 0 - 1 ( i.e.  submodular set cover ) iwata and nagano  @xcite give a @xmath2-approximation for all @xmath2 and goel et al .",
    "@xcite give a 2-approximation for @xmath11 .",
    "for maximizing a monotone submodular function subject to @xmath2-column sparse packing constraints , the algorithm of bansal et al .",
    "@xcite gives a @xmath51-approximation algorithm .",
    "we summarize our results and preceding ones in table  [ tab1 ] ; recall also the follow - up @xmath51 approximation for @xmath2-cs pips  @xcite .",
    "note that in all four cases , the strongest known lower bounds are obtained even in the special case that @xmath3 are 0 - 1 .",
    ".the landscape of approximability of sparse integer programs .",
    "our main results are in boldface . [ cols=\"^,^,^,^,^,^ \" , ]",
    "by scaling rows suitably and clipping coefficients that are too high ( i.e.  setting @xmath68 ) , we may make the following assumption without loss of generality .",
    "@xmath2-rs cip _ is an integer program @xmath69 where @xmath1 is @xmath2-rs and all entries of @xmath1 are at most 1 .    to begin with",
    ", we focus on the case @xmath34 for all @xmath27 , which we call the _",
    "unbounded @xmath2-rs cip _ , since it illustrates the essence of our new technique .",
    "let @xmath70 be a @xmath24-dimensional vector of variables and @xmath22 is a vector of real coefficients . throughout",
    ", we assume coefficients are nonnegative .",
    "when we apply @xmath71 to vectors we mean the component - wise floor .",
    "that is , the @xmath27th coordinate of @xmath72 is @xmath73 .",
    "a constraint @xmath74 is _",
    "@xmath75-roundable _ for some @xmath76 if for all nonnegative real @xmath77 @xmath78 implies @xmath79 .",
    "note that @xmath75-roundability implies @xmath80-roundability for @xmath81 .",
    "the relevance of this property is explained by the following proposition .",
    "[ prop : algable ] if every constraint in an unbounded covering integer program is @xmath75-roundable , then there is a @xmath75-approximation algorithm for the program .",
    "let @xmath82 be an optimal solution to the program s linear relaxation .",
    "then @xmath83 is a lower bound on the cost of any optimal solution .",
    "thus , @xmath84 is a feasible integral solution with cost at most @xmath75 times optimal .",
    "we make another simple observation .    [ prop : rowsum ] the constraint @xmath74 is @xmath85-roundable .",
    "let @xmath86 since @xmath87 for any @xmath66 , if @xmath74 for a nonnegative @xmath70 , then @xmath88 as needed",
    ".    now consider an unbounded @xmath2-rs cip .",
    "since each constraint has at most @xmath2 coefficients , each less than 1 , it follows from that every constraint in these programs is @xmath35-roundable , and so such programs admit a @xmath35-approximation algorithm by .",
    "it is also clear that we can tighten the approximation ratio to @xmath2 for programs where the sum of the coefficients in every constraint ( row ) is at most @xmath89 .",
    "we now show that rows with sum in @xmath90 $ ] can be replaced by other rows which are @xmath2-roundable .",
    "[ defn : zeq ] two constraints @xmath74 and @xmath91 are _ @xmath36-equivalent _ if for all nonnegative integral @xmath70 , @xmath92    in other words , replacing a constraint by an @xmath36-equivalent constraint does nt affect the value of the cip .",
    "[ prop : neato ] every constraint @xmath74 with at most @xmath2 nonzero coefficients is @xmath36-equivalent to a @xmath2-roundable constraint .    before proving ,",
    "let us illustrate its use .",
    "there is a polynomial time @xmath2-approximation algorithm for unbounded @xmath2-rs cips .",
    "using we replace each constraint with a @xmath36-equivalent @xmath2-roundable one .",
    "the resulting ip has the same set of feasible solutions and the same objective function",
    ". therefore , yields a @xmath2-approximately optimal solution .    with the framework set up , we begin the technical part : a lemma , then the proof of .",
    "[ lem : tech ] for any positive integers @xmath2 and @xmath93 , the constraint @xmath94 is @xmath2-roundable .",
    "let @xmath74 denote the constraint , i.e.  @xmath95 , @xmath96 for @xmath97 . if @xmath70 satisfies the constraint , then the maximum of @xmath98 , @xmath99 , ",
    ", @xmath100 and @xmath101 must be at least @xmath102 . if @xmath103 for some @xmath104 then @xmath105 and so @xmath106 as needed .",
    "otherwise @xmath107 must be at least @xmath108 and so @xmath109 which implies @xmath110 as needed .",
    "if the sum of coefficients in the constraint is @xmath89 or less , we are done by , hence we assume the sum is strictly greater than @xmath89 . without loss of generality ( by renaming ) such",
    "a constraint is of the form @xmath111 where @xmath112 , @xmath113 , and the @xmath114 s are nonincreasing in @xmath29 .",
    "define the _ support _ of @xmath70 to be @xmath115 .",
    "we claim that for any two distinct @xmath116 , @xmath117 .",
    "otherwise , the @xmath118 .",
    "thus , for any feasible integral @xmath70 with @xmath119 , we have @xmath120 . to express the set of _ all _ feasible integral solutions ,",
    "let @xmath66 be the maximum @xmath29 for which @xmath121 ( or @xmath122 if no such @xmath29 exists ) , let @xmath123 denote the @xmath29th unit basis vector , and let @xmath124 .",
    "then it is not hard to see that the nonnegative integral solution set to constraint is the disjoint union @xmath125 the special case @xmath126 ( i.e.  @xmath127 ) is already @xmath2-roundable by , so assume @xmath128 . consider the constraint @xmath129 every integral @xmath130 with @xmath131 satisfies constraint . by also considering the cases",
    "@xmath132 it is easy to check that constraint has precisely as its set of feasible solutions , i.e.  constraint is @xmath36-equivalent to @xmath133 . if @xmath134 , the sum of the coefficients of constraint is @xmath89 or less , so it is @xmath2-roundable by .",
    "if @xmath135 , constraint is @xmath2-roundable by .",
    "thus in either case we have what we wanted .",
    "we next obtain approximation guarantee @xmath2 even with multiplicity constraints @xmath136 for this we use _ knapsack - cover inequalities_. these inequalities represent residual covering problems when a set of variables is taken at maximum multiplicity .",
    "wolsey @xcite studied inequalities like this for 0 - 1 problems to get a primal - dual approximation algorithm for submodular set cover .",
    "the lp we use is similar to what appears in carr et al .",
    "@xcite and kolliopoulos & young @xcite , but we first replace each row with a @xmath2-roundable one .    specifically , given a cip @xmath137 with @xmath138 nonnegative , we now define the knapsack cover lp .",
    "note that we allow @xmath18 to contain some entries equal to @xmath139 ; if @xmath34 and some @xmath29 has @xmath140 our convention is that @xmath141 .",
    "recall , @xmath28 is the @xmath29th row of @xmath1 and @xmath142 denotes the set @xmath143 . for a subset @xmath144 of @xmath142 such that @xmath145 , define @xmath146 following @xcite we define the _ knapsack cover lp _ for our problem to be @xmath147    it is not too hard to check that any integral solution to the cip satisfies the constraints of kc - lp , and thus the solution to the latter is a lower bound on the value of the cip .",
    "there is a polynomial time @xmath2-approximation algorithm for @xmath2-rs cips .    using , we assume all rows of @xmath1 are @xmath2-roundable . let @xmath82 be the optimal solution to kc - lp .",
    "define @xmath148 where @xmath149 denotes the component - wise minimum .",
    "we claim that @xmath150 is a feasible solution to the cip , which will complete the proof since the objective value of @xmath150 is at most @xmath2 times the objective value of kc - lp . in other words , we want to show for each row @xmath29 that @xmath151",
    ".    fix any row @xmath29 and define @xmath152 i.e.  @xmath144 is those variables in the constraint that were rounded to their maximum multiplicity .",
    "if @xmath153 then , by the @xmath2-roundability of @xmath154 , we have that @xmath155 as needed .",
    "so assume @xmath156 .",
    "note that for @xmath157 , we have @xmath158 and for @xmath159 , we have @xmath160 .    if @xmath161 then the constraint @xmath151 is satisfied ; consider otherwise .",
    "since @xmath162 for @xmath163 , since @xmath82 satisfies the knapsack cover constraint for @xmath29 and @xmath144 , and since @xmath164 for each @xmath27 , we have @xmath165    since @xmath156 and @xmath166 , this gives @xmath167 rearranging , and using the fact @xmath168 , we deduce @xmath169 , as needed .",
    "+ for fixed @xmath2 , we may solve kc - lp explicitly , since it has polynomially many constraints .",
    "for general @xmath2 , no method is currently known to solve kc - lp in polynomial time .",
    "however , one can use the ellipsoid method to find a solution @xmath82 whose objective is lower than that of kc - lp , and which satisfies the knapsack - cover constraints corresponding to the set @xmath170 . note that this is all we need for the above analysis .",
    "details of how the ellipsoid method finds such a solution are given in @xcite .",
    "in discussing integrality gaps for @xmath2-rs cip problems , we say that the _ naive lp relaxation _ of @xmath171 is the lp obtained by removing the restriction of integrality .",
    "earlier , we made the assumption that @xmath172 for all @xmath173 ; let us call this the _ clipping assumption_. the clipping assumption is without loss of generality for the purposes of approximation guarantees , however , it affects the integrality gap of the naive lp for unbounded @xmath2-rs cip , as we now illustrate . without the clipping assumption ,",
    "the integrality gap of @xmath2-rs cip problems can be unbounded as a function of @xmath2 ; indeed for any integer @xmath174 the well - known covering problem @xmath175x_1 \\geq 1 , 0 \\leq x_1\\}$ ] has integrality gap @xmath176 . in instances with the clipping assumption and without multiplicity constraints , the previous methods in this section",
    "establish that the integrality gap of the naive lp is at most @xmath177 .    even under the clipping assumption ,",
    "it is well - known that @xmath2-rs cips with _ multiplicity constraints _ can have large integrality gaps  e.g.  @xmath178x \\geq m+1,~{\\ensuremath{\\mathbf{0}}}\\leq x,~x_1 \\leq 1\\}$ ] has integrality gap @xmath176 . for bounded instances ,",
    "the knapsack - cover inequalities represent a natural generalization of the clipping assumption , namely , we perform a sort of clipping even considering that any subset of the variables are chosen to their maximum extent .",
    "we have seen that kc - lp has integrality gap at most @xmath177 on @xmath2-rs cip instances .",
    "our methods also show that if we replace each row with a @xmath2-roundable one ( ) , then the corresponding kc - lp has integrality gap at most @xmath2 .",
    "we are actually unaware of any @xmath2-rs cip instance with @xmath179 where the integrality gap of kc - lp ( without applying ) is greater than @xmath2 ; resolving whether such an instance exists would be interesting .",
    "some special cases are understood , e.g. koufogiannakis and young @xcite give a primal - dual @xmath2-approximation for @xmath2-cs pip in the case @xmath1 is 0 - 1 , also known as hypergraph @xmath16-matching .",
    "[ sec : awesome ] in this section we give an approximation algorithm for @xmath2-column - sparse packing integer programs with approximation ratio @xmath180 .",
    "we better results for @xmath11 , and for programs with high width ( we defer the definition to a later subsection ) .",
    "the results hold even in the presence of multiplicity constraints @xmath136 broadly speaking , our approach is rooted in the demand matching algorithm of shepherd & vetta  @xcite ; their path - augmenting algorithm can be viewed as a restricted form of _ iterated relaxation _ , which is the main tool in our new approach .",
    "iterated relaxation yields a solution whose objective value is _ larger _ than the optimum , however , the solution violates some constraints .",
    "we then decompose this infeasible solution to a collection of feasible solutions while retaining at least a constant fraction of the objective value .    for",
    "a @xmath2-cs pip @xmath181  let @xmath182(@xmath181 ) denote its linear relaxation @xmath183 we use the set @xmath184 to index the constraints and @xmath185 to index the variables in our program .",
    "we note a simple assumption that is without loss of generality for the purposes of obtaining an approximation algorithm : @xmath186 for all @xmath187 . to see this , note that if @xmath188 , then every feasible solution has @xmath189 and we can simply delete @xmath190 from the instance .    now we give our iterated rounding method .",
    "let the term _ entry _ mean a pair @xmath191 such that @xmath192 .",
    "our iterated rounding algorithm computes a set @xmath193 of _ special _ entries ; for such a set we let @xmath194 denote the matrix obtained from @xmath1 by zeroing out the special entries .",
    "given a @xmath2-cs pip @xmath181 , we can , in polynomial time , find @xmath193 and nonnegative integral vectors @xmath195 with @xmath196 and @xmath197 such that    1 .",
    "@xmath198 2 .",
    "@xmath199 , we have @xmath200 3 .   @xmath201 .",
    "[ lem : addvio ]    in particular , since @xmath202 is 0 - 1 , @xmath203 is a solution such that for each row @xmath29 , we have @xmath204 .",
    "we now give the proof of the above lemma .",
    "first , we give a sketch .",
    "recall that @xmath26 denote the @xmath27th column of @xmath1 and @xmath28 denotes the @xmath29th row of @xmath1 .",
    "let @xmath205 , which has size at most @xmath2 , and similarly @xmath206 .",
    "let @xmath82 be an extreme optimal solution to @xmath207 .",
    "the crux of our approach is as follows : if @xmath82 has integral values we have made progress . if not , @xmath82 is a _ basic feasible solution _ so there is a set of @xmath208 linearly independent tight constraints for @xmath82 , so the total number of constraints @xmath209 satisfies @xmath210 . by double - counting",
    "there is some @xmath211 with @xmath212 , which is what permits iterated relaxation : we discard the constraint for @xmath29 and go back to the start .",
    "contains pseudocode for our iterated rounding algorithm , iteratedsolver .",
    "15 cm iteratedsolver@xmath213    let @xmath82 be an extreme optimum of @xmath214 let @xmath215 , @xmath216 .",
    "[ step : inite ] let @xmath82 be an extreme optimum of @xmath217^{j ' } ; ax^0 + a_{s \\to 0}(x+x^1 ) \\leq b\\}$ ] for each @xmath218 with @xmath219 , delete @xmath27 from @xmath220 for each @xmath218 with @xmath221 , set @xmath222 and delete @xmath27 from @xmath220 [ step : inito ] if @xmath223 , terminate and return @xmath224 [ step : forlo ] mark each entry @xmath225 special and add it in @xmath193 and delete @xmath29 from @xmath226    now we explain the pseudocode .",
    "the @xmath227 term can be thought of as a preprocessing step which effectively reduces the general case to the special case that @xmath33 .",
    "the term @xmath228 grows over time .",
    "the set @xmath220 represents all @xmath27 that could be added to @xmath202 in the future , but have not been added yet .",
    "the set @xmath226 keeps track of constraints that have not been dropped from the linear program so far .    since @xmath82 is a basic feasible solution we have @xmath229 in . being @xmath2-cs , each set @xmath230 for @xmath218 has size at most @xmath2 . by double - counting , @xmath231 and",
    "so some @xmath232 has @xmath233 .",
    "thus @xmath234 decreases in each iteration , and the algorithm has polynomial running time .",
    "( in fact , it is not hard to show that there are at most @xmath235 iterations . )",
    "the algorithm has the property that @xmath236 does not decrease from one iteration to the next , which implies property ( a ) .",
    "properties ( b ) and ( c ) can be seen immediately from the definition of the algorithm .",
    "now we give the proof of the main result in this section . here and later we abuse notation and identify vectors in @xmath237 with subsets of @xmath185 , with @xmath238 representing containment .",
    "that is , if we have two @xmath239 vectors @xmath240 and @xmath70 we let @xmath241 denote the fact that @xmath242 implies @xmath243 .",
    "there is a polynomial time @xmath10-approximation algorithm for @xmath2-cs pips with multiplicity constraints .",
    "we use lemma [ lem : addvio ] to obtain @xmath227 and @xmath202 . the main idea in",
    "the proof is to partition the set @xmath202 into @xmath244 sets which are all feasible ( i.e. , we get @xmath245 for 0 - 1 vectors @xmath246 each with @xmath247 ) .",
    "if we can establish the existence of such a partition , then we are done as follows : the total profit of the @xmath180 feasible solutions @xmath248 is @xmath249 , so the most profitable is a @xmath10-approximately optimal solution .    call @xmath250 _ in conflict at @xmath29 _ if @xmath251 and at least one of @xmath252 or @xmath253 is special .",
    "we claim that if @xmath254 and no two elements of @xmath240 are in conflict , then @xmath240 is feasible ; this follows from ( c ) together with the fact that @xmath186 for all @xmath187 .",
    "( explicitly , for each constraint we either just load it with a single special entry , or all non - special entries , both of which are feasible . ) in the remainder of the proof , we find a @xmath255-colouring of the set @xmath202 such that similarly - coloured items are never in conflict ; then the colour classes give the needed sets @xmath246 and we are done .    to find our desired colouring ,",
    "we create a _ conflict digraph _ which has node set @xmath202 and an arc ( directed edge ) from @xmath27 to @xmath256 whenever @xmath257 are in conflict at @xmath29 and @xmath252 is special .",
    "rewording , there is an arc @xmath258 iff some @xmath259 and @xmath260 .",
    "( if @xmath253 is also special , this also implies an arc @xmath261 . )",
    "the key observation is that each node @xmath262 has indegree bounded by @xmath263 , i.e.  there are at most @xmath263 choices of @xmath27 such that @xmath258 is an arc : to see this note @xmath264 , and each @xmath29 in this set has @xmath265 .",
    "now we use the following lemma , which completes the proof .",
    "[ lem : foonk ] a digraph with maximum indegree @xmath18 has a @xmath266-colouring .",
    "we use induction on the number of nodes in the graph , with the base case being the empty graph .",
    "now suppose the graph is nonempty .",
    "the average indegree is at most @xmath18 , and the average indegree equals the average outdegree .",
    "hence some node @xmath24 has outdegree at most the average , which is @xmath18 . in total",
    ", this node has at most @xmath267 neighbours . by induction",
    "there is a @xmath268-colouring when we delete @xmath24 , then we can extend it to the whole digraph by assigning @xmath24 any colour not used by its neighbours .",
    "( we remark that is tight , e.g.  arrange @xmath266 vertices on a circle and include an arc from each vertex to its @xmath18 clockwise - next neighbours ; this directed @xmath269 can not be @xmath267-coloured . )",
    "this ends the proof of .",
    "we give some small improvements for the case @xmath11 , using some insights due to shepherd & vetta  @xcite .",
    "a 2-cs pip is _ non - simple _ if there exist distinct @xmath257 with @xmath270 and @xmath271 . otherwise , it is simple .",
    "shepherd and vetta consider the case when all non - zero entries of a column are equal . under this assumption",
    ", they get a @xmath272 approximation for @xmath273-cs pips , and a @xmath274 approximation for such simple @xmath273-cs pips , when @xmath33 .",
    "we extend their theorem as follows .",
    "[ theorem : k2 ] there is a deterministic @xmath275-approximation algorithm for 2-cs pips .",
    "there is also a randomized @xmath276-approximation algorithm for simple 2-cs pips with @xmath33 .",
    "since we are dealing with a 2-cs pip , each @xmath277 is an edge or a loop on vertex set @xmath184 ; we abuse notation and directly associate @xmath27 with an edge / loop .",
    "consider the initial value of @xmath220 , i.e.  after executing .",
    "then we claim that the graph @xmath278 has at most one cycle per connected component ; to see this , note that any connected component with two cycles would have more edges than vertices , which contradicts the linear independence of the tight constraints for the initial basic solution @xmath82 .",
    "we modify iteratedsolver  slightly . immediately after ,",
    "let @xmath279 consist of one edge from each cycle in @xmath278 , and set @xmath280 .",
    "then @xmath176 is a matching ( hence a feasible 0 - 1 solution ) and the new @xmath220 is acyclic .",
    "modify the cardinality condition in to @xmath281 ( instead of @xmath282 ) ; since @xmath220 is acyclic , it is not hard to show the algorithm will still terminate , and @xmath199 , we have @xmath283 .    to get the first result , we use a colouring argument from ( * ? ? ? * thm .  4.1 ) which shows that @xmath202 can be decomposed into two feasible solutions @xmath284 .",
    "we find that the most profitable of @xmath285 is a 4-approximately optimal solution .    for the second result",
    ", we instead apply a probabilistic technique from @xcite .",
    "they define a distribution over subsets of the forest @xmath202 ; let @xmath286 be the random variable indicating the subset",
    ". let @xmath287 .",
    "say that an edge @xmath288 is _ compatible _ with @xmath286 if @xmath286 neither contains an edge with a special endpoint at @xmath29 , nor at @xmath289 .",
    "the distribution has the properties that @xmath286 is always feasible for the pip , @xmath290 = p$ ] for all @xmath262 , and @xmath291 \\geq p$ ] for all @xmath292 .",
    "( simplicity implies that @xmath227 and @xmath202 have no edge in common , except possibly loops , which is needed here . ) finally , let @xmath293 denote the subset of @xmath227 compatible with @xmath286 .",
    "then @xmath294 is a feasible solution , and @xmath295 \\geq pc(x^1+x^0)$ ] .",
    "hence the better solution of @xmath296 and @xmath176 is a @xmath297-approximately optimal solution .",
    "the _ width _ @xmath298 of an integer program is @xmath299 , taking the inner term to be @xmath300 when @xmath140 .",
    "note that without loss of generality , @xmath301 . from now on let us normalize each constraint so that @xmath302 ; then a program has width @xmath303 iff every entry of @xmath1 is at most @xmath304 .",
    "in many settings better approximation can be obtained as @xmath298 increases .",
    "for example in @xmath2-rs cips with @xmath305 , the sum of each row of @xmath1 is at most @xmath306 , so propositions [ prop : algable ] and [ prop : rowsum ] give a @xmath307-approximation algorithm .",
    "srinivasan @xcite gave a @xmath308-approximation algorithm for unbounded @xmath2-cs cips .",
    "using _ grouping and scaling _ techniques introduced by kolliopoulos and stein @xcite , chekuri et al .",
    "@xcite showed that no - bottleneck demand multicommodity flow in a tree , and certain other problems , admit approximation ratio @xmath309 .",
    "multicommodity flow in a tree ( without demands ) admits approximation ratio @xmath310  @xcite .",
    "motivated by these results , we will prove the following theorem .",
    "[ theorem : width ] there is a polynomial time @xmath311-approximation algorithm to solve @xmath2-column - sparse pips with @xmath312    for @xmath313 , implies a @xmath314-approximation . for fixed @xmath315 and large @xmath298",
    "this is asymptotically tight since @xmath316-approximation is @xmath32-hard , by results from @xcite on multicommodity flows in trees .",
    "after the initial publication of  @xcite , bansal et al .",
    "@xcite gave an algorithm with ratio @xmath317 , where @xmath318 .",
    "run iteratedsolver . from we",
    "see that @xmath319 and , using the width bound , @xmath320 define @xmath321 by @xmath322 , e.g.  the set of violated constraints in @xmath323 .",
    "we want to reduce @xmath203 so that no constraints are violated . in order to do this",
    "we employ a linear program .",
    "let @xmath324 denote the characteristic vector .",
    "our lp , which takes a parameter @xmath150 , is @xmath325 we can utilize this lp in an iterated rounding approach , described by the following pseudocode .    8 cm    let @xmath326 let @xmath82 be an extreme optimum of @xmath327 let @xmath150 = @xmath328    we claim that this algorithm terminates , and that the value of @xmath329 upon termination is at least @xmath330 once we show these facts , we are done , since the for the final @xmath150 , @xmath331 implies @xmath150 is feasible . as an initial remark , note that each coordinate of @xmath150 is monotonically nonincreasing , and so @xmath332 is also monotonically nonincreasing .",
    "observe that @xmath333 in the first iteration has @xmath334 as a feasible solution , by equation  .",
    "next , note that @xmath70 which is feasible for @xmath333 in one iteration is also feasible for  in the next iteration since @xmath332 is monotonically nonincreasing ; hence the value of @xmath83 does not decrease between iterations .    to show the algorithm terminates",
    ", we will show that @xmath332 becomes strictly smaller in each iteration .",
    "note first that if @xmath335 , the constraint @xmath336 is already implied by the constraint @xmath337 hence @xmath327 may be viewed as having only @xmath338 many constraints other than the box constraints @xmath339 .",
    "then @xmath70 , a basic feasible solution to @xmath327 , must have at most @xmath338 non - integral variables .",
    "in particular , using the fact that the program is @xmath2-cs , by double counting , there exists some @xmath340 such that @xmath341 .",
    "thus ( using the fact that all entries of @xmath1 are at most @xmath304 ) we have @xmath342 : so @xmath343 , and @xmath332 is strictly smaller in the next iteration , as needed .",
    "it is @xmath32-hard to approximate 2-cs cips of the form @xmath344 and @xmath345 within ratio @xmath60 even if the nonzeroes of every column of @xmath1 are equal and @xmath1 is of the block form @xmath61 $ ] where each @xmath62 is 1-cs .",
    "our proof is a modification of a hardness proof from @xcite for a budgeted allocation problem .",
    "we focus on the version where @xmath70 is 0 - 1 ; the other version follows similarly with only minor modifications to the proof .",
    "the specific problem described in the statement of the theorem is easily seen equivalent to the following problem , which we call _ demand edge cover in bipartite multigraphs _ : given a bipartite multigraph @xmath346 where each vertex @xmath93 has a demand @xmath347 and each edge @xmath348 has a cost @xmath349 and value @xmath350 , find a minimum - cost set @xmath351 of edges",
    "so that for each vertex @xmath93 its demand is satisfied , meaning that @xmath352 .",
    "our construction also has the property that @xmath353 for each edge  so from now on we denote both @xmath350 .",
    "the proof uses a reduction from max-3-lin(2 ) , which is the following optimization problem : given a collection @xmath354 of 0 - 1 variables and a family of three - variable modulo-2 equalities called _ clauses _",
    "( for example , @xmath355 ) , find an assignment of values to the variables which satisfies the maximum number of clauses .",
    "hstad @xcite showed that for any @xmath5 , it is @xmath32-hard to distinguish between the two cases that ( 1 ) a @xmath356 fraction of clauses can be satisfied and ( 2 ) at most a @xmath357 fraction of clauses can be satisfied .",
    "given an instance of max-3-lin(2 ) we construct an instance of demand edge cover as follows .",
    "for each variable @xmath358 there are three vertices  @xmath358 \" ,",
    " @xmath359 \" and  @xmath360 \" ; these vertices have @xmath16-value @xmath361 where @xmath362 denotes the number of clauses containing @xmath358 . for each clause",
    "there are four vertices labelled by the four assignments to its variables that do _ not _ satisfy it ; for example for the clause @xmath355 we would introduce four vertices , one of which would be named  @xmath363 .",
    "\" these vertices have @xmath16-value equal to 3 .",
    "each vertex  @xmath364 \" is connected to",
    " @xmath358 \" by an edge with @xmath18-value @xmath361 ; each vertex @xmath93 of the form  @xmath365 \" is incident to a total of nine edges each with @xmath18-value 1 : three of these edges go to  @xmath366 \" for each @xmath367 .",
    "the construction is illustrated in figure [ fig : construction ] .",
    "( -0.5,-0.5)(11.5,10 ) ( 0,6)(2,7 ) ( 0,6)(2,5 ) ( 0,6)(0,6 ) ( 2,7)(2,7 ) ( 2,5)(2,5 ) ( 6,1)(12,12 ) ( 6.2,1)(12.2,12 ) ( 5.8,1)(11.8,12 ) ( 6,1)(12,0 ) ( 6,1.2)(12,0.2 ) ( 6,0.8)(12,-0.2 ) ( 6,3)(12,8 ) ( 6.2,3)(12.2,8 ) ( 5.8,3)(11.8,8 ) ( 6,3)(12,4 ) ( 6,3.2)(12,4.2 ) ( 6,2.8)(12,3.8 ) ( 6,5)(12,4 ) ( 6,5.2)(12,4.2 ) ( 6,4.8)(12,3.8 ) ( 6,5)(12,12 ) ( 6.2,5)(12.2,12 ) ( 5.8,5)(11.8,12 ) ( 6,7)(12,8 ) ( 6,7.2)(12,8.2 ) ( 6,6.8)(12,7.8 ) ( 6,7)(12,0 ) ( 6.2,7)(12.2,0 ) ( 5.8,7)(11.8,0 ) ( 6,9)(12,12 ) ( 6,9.2)(12,12.2 ) ( 6,8.8)(12,11.8 ) ( 6,9)(12,8 ) ( 6,9.2)(12,8.2 ) ( 6,8.8)(12,7.8 ) ( 6,11)(12,4 ) ( 6.2,11)(12.2,4 ) ( 5.8,11)(11.8,4 ) ( 6,11)(12,0 ) ( 6.2,11)(12.2,0 ) ( 5.8,11)(11.8,0 ) ( 6,11)(6,11 ) ( 6,9)(6,9 ) ( 6,7)(6,7 ) ( 6,5)(6,5 ) ( 6,3)(6,3 ) ( 6,1)(6,1 ) ( 13,12)(13,12 ) ( 13,8)(13,8 ) ( 13,4)(13,4 ) ( 13,0)(13,0 )    let @xmath25 denote the total number of clauses ; so @xmath368 .",
    "we claim that the optimal solution to this demand edge cover instance has cost @xmath369 where @xmath66 is the least possible number of unsatisfied clauses for the underlying max-3-lin(2 ) instance .",
    "if we can show this then we are done since hstad s result shows we can not distinguish whether the optimal cost is @xmath370 or @xmath371 ; this gives an inapproximability ratio of @xmath372 for some @xmath373 such that @xmath374 as @xmath375 , which will complete the proof .",
    "let @xmath82 denote a solution to the max-3-lin(2 ) instance with @xmath66 unsatisfied clauses ; we show how to obtain a demand edge cover @xmath351 of cost @xmath376 .",
    "we include in @xmath351 the edge between  @xmath358 \" and  @xmath377 \" for each @xmath29 ; this has total cost @xmath378 . for each satisfied clause @xmath379 , we include in @xmath351 all three edges between  @xmath380 \" and  @xmath381 \" and similarly for @xmath382 , and one of each of the parallel triples incident to  @xmath383 \" ; this has cost 12 for that clause . for each unsatisfied clause @xmath379",
    ", we include in @xmath351 any three unit - cost edges incident to  @xmath384 , \" as well as twelve more unit - cost edges : namely in the six nodes consisting of  @xmath380 , \"  @xmath385 \" and their images under swapping @xmath29 with @xmath27 and @xmath2 , the induced subgraph is a 6-cycle of parallel triples , and we take two edges out of each triple .",
    "thus the chosen edges have total cost 15 for that clause .",
    "it is not hard to see that this solution is feasible  e.g.  vertices of the form ",
    "@xmath380 \" are covered by 4 edges for each clause containing them .",
    "the total cost is @xmath386 .",
    "to finish the proof we show the following .    given a feasible demand edge cover @xmath351 , we can find a solution @xmath82 such that @xmath66 , the number of unsatisfied clauses for @xmath82 , satisfies @xmath387 .",
    "first we claim it is without loss of generality that for each @xmath29 , @xmath351 contains exactly one of the edges incident to  @xmath358 \" .",
    "clearly at least one of these two edges lies in @xmath351 ; if both do , then remove one ( say , the edge between  @xmath358 \" and  @xmath359 \" ) and add to @xmath351 any subset of the other @xmath388 edges incident to  @xmath359 \" so that the total number of edges incident on  @xmath359 \" in @xmath351 becomes at least @xmath361 .",
    "the removed edge has @xmath18-value @xmath361 and all other incident edges have @xmath18-value 1 , so clearly the solution is still feasible and the cost has not increased .",
    "define @xmath82 so that for each @xmath29 , @xmath351 contains the edge between  @xmath358 \" and  @xmath389 .",
    "\" let @xmath390 denote the edges of @xmath351 incident on clause vertices ( i.e.  the edges of @xmath351 with unit @xmath18-value ) .",
    "for @xmath391 their _ left - contribution _ , denoted @xmath392 , is the number of them incident on vertices of the form  @xmath393 . \"",
    "note that @xmath394 for any @xmath144 .",
    "furthermore for each unsatisfied clause , all edges incident on its vertex ",
    "@xmath384 \" have zero left - contribution , but @xmath351 contains at least three of these edges .",
    "thus the edges of @xmath390 incident on that clause s vertices have @xmath395 .",
    "finally , consider @xmath396 .",
    "each edge of @xmath390 is in the gadget for a particular clause , and it follows that @xmath397 where @xmath66 is the number of unsatisfied clauses for @xmath82 .",
    "however , @xmath390 needs to have @xmath361 edges incident on each  @xmath393 \" so @xmath398 .",
    "thus @xmath399 and considering the edges incident on the vertices @xmath400 we see that @xmath401 .",
    "this completes the proof of the reduction .",
    "it is natural to conjecture that @xmath2-cs cip with a submodular objective admits an approximation ratio depending only on @xmath2 , perhaps @xmath402 matching the best ratio known for linear objectives .",
    "although 2-rs ips are very hard to optimize ( at least as hard as max independent set ) , the problem of finding a _ feasible _ solution to a 2-rs ip is still interesting .",
    "hochbaum et al .",
    "@xcite gave a pseudopolynomial - time 2-sat - based feasibility algorithm for 2-rs ips with finite upper and lower bounds on variables .",
    "they asked if there is a pseudopolynomial - time feasibility algorithm when the bounds are replaced by just the requirement of nonnegativity , which is still open as far as we know .",
    "it is strongly @xmath32-hard to determine if ips of the form @xmath403 are feasible when @xmath1 is 2-cs @xcite , e.g.  by a reduction from 3-partition ; but for ips where each variable appears at most twice _ including _ in upper / lower bounds , it appears all that is known is weak @xmath32-hardness ( for example , via the _ unbounded knapsack problem _",
    "@xcite ) .",
    "berman , p. : a @xmath18/2 approximation for maximum weight independent set in @xmath18-claw free graphs .",
    "nordic j. of computing * 7*(3 ) , 178184 ( 2000 ) .",
    "preliminary version in : proc .",
    "7th swat , pages 214219 , ( 2000 )        chekuri , c. , mydlarz , m. , shepherd , f.b .",
    ": multicommodity demand flow in a tree and packing integer programs .",
    "acm trans .",
    "algorithms * 3*(3 ) , 27 ( 2007 ) .",
    "preliminary version in : proc .",
    "30th icalp , pages 410425 , ( 2003 )    dinur , i. , guruswami , v. , khot , s. , regev , o. : a new multilayered pcp and the hardness of hypergraph vertex cover .",
    "siam j. comput . * 34*(5 ) , 11291146 ( 2005 ) .",
    "preliminary version in : proc .",
    "35th stoc , pages 595601 ( 2003 )      garg , n. , vazirani , v.v . ,",
    "yannakakis , m. : primal - dual approximation algorithms for integral flow and multicut in trees .",
    "algorithmica * 18*(1 ) , 320 ( 1997 ) .",
    "preliminary version in : proc .",
    "20th icalp , pages 6475 ( 1993 )          hazan , e. , safra , s. , schwartz , o. : on the complexity of approximating @xmath2-set packing .",
    ". complex .",
    "* 15*(1 ) , 2039 ( 2006 ) .",
    "preliminary versions in : proc .",
    "6th approx , pages 8397 ( 2003 ) and eccc - tr03 - 020 ( 2003 )          hurkens , c.a.j .",
    ", schrijver , a. : on the size of systems of sets every @xmath66 of which have an sdr , with an application to the worst - case ratio of heuristics for packing problems .",
    "siam j. discret",
    ". math . * 2*(1 ) , 6872 ( 1989 )                      koufogiannakis , c. , young , n.e . :",
    "greedy @xmath405-approximation algorithm for covering with arbitrary constraints and submodular cost . in : proc .",
    "36th icalp , pp .",
    "634652 ( 2009 ) .",
    "preliminary version at arxiv:0807.0644 ( 2008 ) ."
  ],
  "abstract_text": [
    "<S> the main focus of this paper is a pair of new approximation algorithms for certain integer programs . </S>",
    "<S> first , for covering integer programs @xmath0 where @xmath1 has at most @xmath2 nonzeroes per row , we give a @xmath2-approximation algorithm . </S>",
    "<S> ( we assume @xmath3 are nonnegative . ) for any @xmath4 and @xmath5 , if @xmath6 this ratio can not be improved to @xmath7 , and under the unique games conjecture this ratio can not be improved to @xmath8 . </S>",
    "<S> one key idea is to replace individual constraints by others that have better rounding properties but the same nonnegative integral solutions ; another critical ingredient is knapsack - cover inequalities . </S>",
    "<S> second , for packing integer programs @xmath9 where @xmath1 has at most @xmath2 nonzeroes per column , we give a @xmath10-approximation algorithm . </S>",
    "<S> our approach builds on the iterated lp relaxation framework . </S>",
    "<S> in addition , we obtain improved approximations for the second problem when @xmath11 , and for both problems when every @xmath12 is small compared to @xmath13 . finally , we demonstrate a @xmath14-inapproximability for covering integer programs with at most two nonzeroes per column . </S>"
  ]
}