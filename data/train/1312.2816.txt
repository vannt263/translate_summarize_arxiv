{
  "article_text": [
    "_ reconfiguration problems _ are combinatorial problems in which we are given a collection of configurations , together with some transformation rule(s ) that allows us to change one configuration to another .",
    "a classic example is the so - called ( see figure  [ fig:15puzzle ] ) : 15  tiles are arranged on a @xmath1 grid , with one empty square ; neighbouring tiles can be moved to the empty slot .",
    "the normal aim is , given an initial configuration , to move the tiles to the position with all numbers in order ( right - hand picture in figure  [ fig:15puzzle ] ) .",
    "readers of a certain age may remember rubik s cube and its relatives as examples of reconfiguration puzzles ( see figure  [ fig : rubik ] ) .",
    "more abstract kinds of reconfiguration problems abound in graph theory .",
    "for instance , suppose we are given a planar graph and two 4-colourings of that graph .",
    "is it possible to transform the first 4-colouring into the second one , by recolouring one vertex at a time , and never using more than 4 colours ?",
    "taking any two different 4-colourings of the complete graph  @xmath2 shows that the answer is not always yes .",
    "but what would happen if we allowed a fifth colour ? and whereas it is easy to see what the situation is with two 4-colourings of  @xmath2 , how hard is it to decide in general if two given 4-colourings of some planar graph can be transformed from one to the other by recolouring one vertex at a time ?    as a final ( class of ) example in this introduction we mention reconfiguration problems on satisfiability problems .",
    "given some boolean formula and two satisfying assignments of its variables , is it possible to transform one assignment into the other by changing the value of one variable at a time , but so that the formula remains true during the whole sequence of transformations ?",
    "in this survey we concentrate on _ complexity _ considerations of transformation problems . in other words , we are interested in knowing _ how hard _ it is computationally to decide if the answer to some problem involving transformation is yes or no . more specifically , we will look at two types of those complexity question , which very roughly can be described as follows :    a - to - b - path    description of a collection of feasible configurations ; + description of one or more transformations changing one configuration to another ; + description of two feasible configurations @xmath3 .",
    "is it possible to change configuration  @xmath4 into configuration  @xmath5 by a sequence of transformations in which each intermediate configuration is a feasible configuration as well ?",
    "path - between - all - pairs    description of a collection of feasible configurations ; + description of one or more transformations changing one configuration to another .",
    "is it possible for any two feasible configurations @xmath3 to change configuration  @xmath4 into configuration  @xmath5 by a sequence of transformations in which each intermediate configuration is a feasible configuration as well ?",
    "of course , there are many other questions that can be asked : how many steps does it take to go from one configuration to another ? which two configurations are furthest apart ?",
    "many of these questions have been considered for particular problems , and where opportune we shall mention some of this work .",
    "an alternative way to formulate this type of problem is by using the concept of a _ configuration graph_. this is the graph that has as vertex set the collection of all possible feasible configurations , while two configurations are connected by an edge if there is a transformation changing one to the other .",
    "note that nothing that we have said so far rules out the possibility that the transformation goes one way only , but in general we will assume that we can always go back and forth between configurations .",
    "this means the configuration graph can be taken to be an undirected graph .    using the language of configuration graphs",
    ", the two general decision problems above can be rephrased as follows .",
    "path - between - all - pairs : is the configuration graph connected ? a - to - b - path : given two vertices ( configurations ) in the configuration graph , are they in the same component ?",
    "in most of this survey we will use fairly informal language .",
    "so we may use `` step '' or `` move '' instead of `` transformation '' ( a one - step change ) . on the other hand , `` transform configuration  @xmath4 to configuration  @xmath5 '' , `` move from  @xmath4 to  @xmath5 '' or `` go from  @xmath4 to  @xmath5 '' usually indicate a sequence of transformations .",
    "this survey can not give a full definition of the complexity classes we will encounter , and we only give a general , intuitive , description of some of them .",
    "the interested reader can find all details in appropriate textbooks , such as garey  & johnson  @xcite and papadimitriou  @xcite .",
    "we assume the reader is familiar with the concept of decision problems ( problems that have as answer either `` yes '' or `` no '' ) and the complexity classes",
    "* p * , * np * and  * conp*. we will also regularly encounter the class * pspace*. a decision problem is in * pspace * , or _ can be solved in polynomial space _",
    ", if there exists an algorithm that solves the problem and that uses an amount of memory that is polynomial in the size of the input .",
    "the related non - deterministic complexity class * npspace * is similarly defined as the class of decision problems for which there exists a non - deterministic algorithm that can recognise `` yes''-instances of the problem using an amount of memory that is polynomial in the size of the input . for a non - deterministic algorithm we mean by _ recognising `` yes''-instances _ that for every `` yes''-instance ( but for none of the `` no''-instances ) there is a possible run of the algorithm that finishes in finite time with a `` yes '' answer .",
    "we obviously have @xmath6 and @xmath7 , and a little bit of thought should convince the reader that we also have @xmath8 .",
    "( trial and error of all possible solutions of a problem in  * np * or  * conp * can be done in polynomial space . ) for most of these inclusions it is unknown if they are proper inclusions or if the classes are in fact the same , leading to some of the most important problems in computer science ( settling whether or not @xmath9 is worth a million dollars  @xcite ) .",
    "the one exception is that we know that * pspace * and * npspace * are in fact the same by the celebrated theorem of savitch  @xcite .    within each complexity class",
    "we can define so - called _ complete _ problems .",
    "again , we refer to the appropriate textbooks for the precise definition ; for us it is enough intuitively to assume that these are the `` most difficult '' problems in their class .      in order to be able to ask sensible questions ( and obtain sensible answers ) about the complexity of reconfiguration problems",
    ", we will make some assumptions regarding their properties .",
    "in particular , when describing the possible configurations , we will assume that these are not given as a full set of all configurations , but by some compact description .",
    "otherwise , if the set of all possible configurations was part of the input , most decision problems about those configurations would trivially be possible in polynomial time because the input would be very large .",
    "more precisely , we assume that an instance of the input contains an algorithm to decide if a candidate configuration really is feasible or not .",
    "similarly , we are in general not interested in problems where the collection of possible transformations needs to be given ( in the form of a list of all pairs that are related by the transformation ) . instead",
    ", we assume that the input contains an algorithm to decide , given two configurations , whether or not we can get the second configuration from the first by a single transformation .",
    "regarding these algorithmic issues of the description of an instance of a configuration problem , we make the following assumptions :    deciding if a given possible configuration is a feasible configuration can be done in polynomial time .    given two feasible configurations , deciding if there is a transformation from the first to the second",
    "can be done in polynomial time .",
    "note that these assumptions guarantee that both of our general reconfiguration problems are in * npspace * ( hence in * pspace * by savitch s theorem ) .",
    "the following is a non - deterministic algorithm for a - to - b - path that would work in polynomial space , when required to decide if it is possible to have a sequence of transformations from configuration  @xmath4 to configuration  @xmath5 :    given the initial configuration  @xmath4 , `` guess '' a next configuration  @xmath10 .",
    "check that  @xmath10 is indeed a feasible configuration and that there is transformation from  @xmath4 to  @xmath10 .",
    "if  @xmath10 is a valid next configuration , `` forget '' the initial configuration  @xmath4 and replace it by  @xmath10 .",
    "repeat the step above until the target configuration  @xmath5 has been reached .",
    "if there is indeed a way to go from configuration  @xmath4 to configuration  @xmath5 , then a sequence of correct guesses in the algorithm above will indeed recognise that , using a polynomial amount of space ; while if there is no sequence of transformations from  @xmath4 to  @xmath5 , then the algorithm will never finish . to extend the algorithm to the path - between - all - pairs problem , we just need to repeat this task for all possible pairs .",
    "this means systematically generating all pairs of candidate configurations , and testing those . since each candidate configuration has a size that is polynomial in the size of the original input ( as it can be tested in polynomial time whether or not a candidate configuration is feasible )",
    ", this brute - force generation of all possible pairs of configurations and testing whether or not they are feasible and connected can be done in a polynomial amount of memory as well .",
    "the fact that all problems we consider are `` automatically '' in * pspace * means that we are in particular interested in determining if a particular variant is in a more restricted class ( * p * , * np * ) , or if it is in fact * pspace*-complete .",
    "a final property that all examples we look at will have is that the transformations are symmetric : if we can transform one configuration into another , then we can also go the other way round .",
    "there is no real reason why this symmetry should always be the case , it is just that most reconfiguration problems considered in the literature have this feature . in particular , the sliding token problems we look at in section  [ sec - tok ] could just as well be formulated for directed graphs , leading in general to directed reconfiguration problems .",
    "a collection of interesting results regarding the reconfiguration of solutions of a given boolean formula were obtained by gopalan et al .",
    "@xcite . they considered the following general set - up . given a boolean formula  @xmath11 with  @xmath12 boolean variables , the feasible configurations are those assignments from @xmath13 that satisfy  @xmath11 ( i.e. , for which  @xmath11 gives the value true ) ; the allowed transformation is changing the value of exactly one of the variables .",
    "the collection of all possible assignments , together with edges added between those pairs that differ in exactly one variable , gives us the structure of the ( graph of the ) @xmath12-dimensional hypercube .",
    "this means that the configuration graph for a boolean formula reconfiguration problem is the induced subgraph of the hypercube induced by the satisfying assignments .",
    "it is this additional structure that should give hope of a better understanding of this type of reconfiguration problem .",
    "the first to analyse the connectivity properties of the configuration graphs of this type of problem were gopalan et al .",
    "@xcite . to describe their results , we need a few more definitions .    a _ logical relation _",
    "@xmath14 is a subset of @xmath15 , where  @xmath0 is the _ arity _ of  @xmath14 .",
    "for instance , if @xmath16 , then @xmath17 is true if and only if exactly one of @xmath18 is  @xmath19 . for  @xmath20 a finite set of logical relations , a _",
    "cnf(@xmath20)-formula _ over a set of variables @xmath21 is a finite conjunction @xmath22 of clauses built using relations from  @xmath20 , variables from  @xmath23 , and the constants  @xmath19 and  @xmath24 .",
    "hence each  @xmath25 is an expression of the form @xmath26 , where  @xmath14 is a relation of arity  @xmath0 , and each  @xmath27 is a variable from  @xmath23 or one of the boolean constants @xmath28 . the satisfiability problem sat(@xmath20 ) associated with a finite set of logical relations  @xmath20 asks : given a cnf(@xmath20)-formula  @xmath11 , is it satisfiable ?    as an example , if we use the relation  @xmath29 as above , and set @xmath30 , then cnf(@xmath31 ) consists of boolean expressions of the form @xmath32 finally , such an expression  @xmath11 is true for some assignment from @xmath33 to the variables if and only if each clause @xmath34 has exactly one variable that is  @xmath19 . the satisfiability problem sat(@xmath35 )",
    "is known as positive-1-in-3-sat ; a decision problem that is * np*-complete  @xcite .",
    "another , better known , example is obtained by taking @xmath36 @xmath37 . here",
    "the relation @xmath38 indicates that @xmath39 is true when at least one of @xmath40 is  @xmath19 , hence it represents clauses of the form @xmath41 .",
    "similarly , @xmath42 represents clauses @xmath43 , and @xmath44 represents clauses @xmath45 .",
    "we see that cnf(@xmath46 ) is exactly the set of boolean expressions that can be formulated with clauses that are disjunctions of two literals .",
    "( a _ literal _ is one of  @xmath47 or  @xmath48 for a variable @xmath49 . )",
    "we call such a formula a _ 2-cnf - formula_.    similarly , the _ 3-cnf - formulas _ are exactly those formulas whose set of relations is @xmath50 , where @xmath51 note that this also means that sat(@xmath46 ) and sat(@xmath52 ) are equivalent to the well - known 2-sat and 3-sat decision problems , respectively .",
    "schaefer  @xcite proved a celebrated dichotomy theorem about the complexity of sat(@xmath20 ) : for certain sets  @xmath20 ( nowadays called _",
    "schaefer sets _ ) , sat(@xmath20 ) is solvable in polynomial time ; while for all other sets  @xmath20 the problem is * np*-complete .    in  @xcite ,",
    "the following two decision problems are considered for given  @xmath20 .",
    "st - conn(@xmath20 )    a cnf(@xmath20)-formula  @xmath11 , and two satisfying assignments  @xmath53 and  @xmath54 of  @xmath11 .",
    "is there a path between  @xmath53 and  @xmath54 in the configuration graph of solutions of  @xmath11 ?",
    "conn(@xmath20 )    a cnf(@xmath20)-formula  @xmath11 .    is the configuration graph of solutions of  @xmath11 connected ?",
    "the key concept for these problems appears to be that of a _",
    "tight _ set of relations  @xmath20  see  @xcite for a precise definition of this concept . here we only note that every schaefer set is tight .",
    "[ gk - th1 ] + let  @xmath20 be a finite set of logical relations .",
    "to10mm(a ) if  @xmath20 is tight , then st - conn(@xmath20 ) is in  * p * ; otherwise , st - conn(@xmath20 ) is * pspace*-complete .",
    "to10mm(b ) if  @xmath20 is tight , then conn(@xmath20 ) is in  * conp * ; if it is tight but not schaefer , then it is * conp*-complete ; otherwise , it is * pspace*-complete .",
    "to10mm(c ) if every relation  @xmath14 in  @xmath20 is the set of solutions of a 2-cnf - formula , then conn(@xmath20 ) is in  * p*.    major parts of the proof of theorem  [ gk - th1 ] in  @xcite follow a similar strategy to the proof of schaefer s theorem in  @xcite . given a set of relations  @xmath20 , a @xmath0-ary relation  @xmath14 is _ expressible from  @xmath55 _ if there is a cnf(@xmath20)-formula @xmath56 such that  @xmath14 coincides with the set of all assignments to @xmath57 that satisfy @xmath58 . then the essential part of the proof of schaefer s theorem is that if a set  @xmath20 of relations is not - schaefer , then every logical relation is expressible from  @xmath20 .",
    "the authors in  @xcite extend the concept of expressibility to _ structurally expressibility_. informally , a relation  @xmath14 is structurally expressible from a set of relations  @xmath20 , if  @xmath14 is expressible using some cnf(@xmath20)-formula @xmath56 and if the subgraph of the hypercube formed by the satisfying assignments of  @xmath11 has components that ` resemble ' the components formed by the subgraph of the hypercube of the relations in  @xmath14 .",
    "the crucial result is that if a set of relations  @xmath20 is not tight , then every logical relation is structurally expressible from  @xmath20 . although the outline of this ( part of the ) proof is very similar to the outline of the corresponding part of schaefer s theorem , the actual proof is considerably more involved .",
    "additionally , the following results on the structure of the configuration graphs of the solutions of different cnf(@xmath20)-formula are obtained in  @xcite .",
    "[ gk - th2 ] + let  @xmath20 be a finite set of logical relations .",
    "to10mm(a ) if  @xmath20 is tight , then for any cnf(@xmath20)-formula  @xmath11 with  @xmath12 variables ,",
    "if two satisfying assignments  @xmath53 and  @xmath54 of  @xmath11 are connected by a path , then the number of transformations needed to go from  @xmath53 to  @xmath54 is @xmath59 .",
    "to10mm(b ) if  @xmath20 is not tight , then there exists an exponential function  @xmath60 such that for every  @xmath61 there exists a cnf(@xmath20)-formula  @xmath11 with @xmath62 variables and two satisfying assignments  @xmath53 and  @xmath54 of  @xmath11 that are connected by a path , but where the number of transformations needed to go from  @xmath53 to  @xmath54 is at least  @xmath60 .    regarding the result in theorem  [ gk - th1](b ) , in their original paper  @xcite the authors in fact conjectured a trichotomy for the complexity of conn(@xmath20 ) , conjecturing that if  @xmath20 is schaefer , then conn(@xmath20 ) is actually in  @xmath63 .",
    "they showed this conjecture to be true for particular types of schaefer set ( see theorem  [ gk - th1](b ) for one example ) .",
    "the conjecture was disproved ( assuming @xmath64 ) by makino et al .",
    "@xcite , who found a set of schaefer relations for which conn(@xmath20 ) remains * conp*-complete . in the updated version",
    "@xcite , a modified trichotomy conjecture for the complexity of conn(@xmath20 ) is formulated .",
    "reconfiguration of different kinds of graph colourings is probably one of the best studied examples of reconfiguration problems .",
    "we will look at some particular variants .",
    "the required background in the basics of graph theory can be found in any textbook on graph theory , such as bondy  & murty  @xcite or diestel  @xcite .",
    "recall that a _ @xmath0-colouring _ of a graph",
    "@xmath65 is an assignment @xmath66 such that @xmath67 for every edge @xmath68 .",
    "a graph is _",
    "@xmath0-colourable _ if it has a @xmath0-colouring .",
    "we start by considering the case where we are allowed to recolour one vertex at a time , while always maintaining a valid @xmath0-colouring .",
    "we immediately get the following two reconfiguration problems , for a fixed positive integer  @xmath0 .",
    "@xmath0-colour - path    a graph  @xmath69 together with two @xmath0-colourings  @xmath70 and  @xmath71 .",
    "is it possible to transform the first colouring  @xmath70 into the second colouring  @xmath71 by recolouring one vertex at a time , while always maintaining a valid @xmath0-colouring ?",
    "@xmath0-colour - mixing    a graph  @xmath69 .",
    "is it possible , for any two @xmath0-colourings of  @xmath69 , to transform the first one into the second one by recolouring one vertex at a time , while always maintaining a valid @xmath0-colouring ?",
    "let us call a graph  @xmath69 _ @xmath0-mixing _ if the answer to the second decision problem is yes .",
    "the use of the work `` mixing '' in this context derives from its relation with work on rapid mixing of markov chains to sample combinatorial configurations ; we say more about this in the final section  [ sec - appl ] .",
    "a variant of graph colouring is _ list - colouring_. here we assume that each vertex  @xmath72 of a graph  @xmath69 has its own _ list _",
    "@xmath73 of colours .",
    "@xmath74-colouring _ of the vertices is an assignment @xmath75 such that @xmath76 for each vertex @xmath77 , and @xmath67 for every edge @xmath68 .",
    "we call such a colouring a _ @xmath0-list - colouring _ if each list  @xmath73 contains at most  @xmath0 colours .    regarding a transformation of a list - colouring",
    ", we use the obvious choice : recolour one vertex at a time , where the new colour must come from the list for that vertex list . with all this , we say that a graph  @xmath69 with list assignments  @xmath74 is _ @xmath74-list - mixing _ if for every two @xmath74-colourings  @xmath70 and  @xmath71 , we can transform  @xmath70 into  @xmath71 by recolouring one vertex at a time , while always maintaining a valid @xmath74-colouring .",
    "we also have two related decision problems .",
    "@xmath0-list - colour - path    a graph  @xmath69 , list assignments  @xmath73 with @xmath78 for each vertex @xmath77 , and two @xmath74-colourings  @xmath70 and  @xmath71 .",
    "is it possible to transform the first colouring  @xmath70 into the second colouring  @xmath71 by recolouring one vertex at a time , while always maintaining a valid @xmath74-colouring ?",
    "@xmath0-list - colour - mixing    a graph  @xmath69 and list assignments  @xmath73 with @xmath78 for each vertex @xmath77 .",
    "is  @xmath69 @xmath74-list - mixing ?    before we look in some detail at what is known about the decision problems defined in this subsection , we give some other results on ( list-)mixing .",
    "the following result has been obtained independently several times , but the first instance appears to be in ( preliminary versions ) of dyer et al .",
    "the _ degeneracy @xmath79 _ of a graph  @xmath69 is the minimum integer  @xmath80 so that every subgraph of  @xmath69 has a vertex of degree at most  @xmath80 . in other words , @xmath79 is the maximum , over all subgraphs  @xmath81 of  @xmath69 , of the minimum degree of  @xmath81 .",
    "[ df - th1 ] + for any graph  @xmath69 , if @xmath82 , then  @xmath69 is @xmath0-mixing .",
    "in fact , @xmath69 is @xmath74-list - mixing for any list assignment  @xmath74 such that @xmath83 for all @xmath77 .",
    "we only prove the @xmath0-mixing statement ; the proof of the list version is essentially the same .",
    "we use induction on the number of vertices of  @xmath69 .",
    "the result is obviously true for the graph with one vertex , so suppose  @xmath69 has at least two vertices .",
    "let  @xmath72 be a vertex with degree at most @xmath79 , and consider @xmath84 .",
    "note that @xmath85 , hence we also have @xmath86 , and by induction we can assume that  @xmath87 is @xmath0-mixing .",
    "take two @xmath0-colourings  @xmath70 and  @xmath71 of  @xmath69 , and let @xmath88 be the @xmath0-colourings of  @xmath87 induced by @xmath89 . since  @xmath87 is @xmath0-mixing , there exists a sequence @xmath90 of @xmath0-colourings of  @xmath87 so that two consecutive colourings @xmath91 , @xmath92 , differ in the colour of one vertex , say  @xmath93 .",
    "set @xmath94 , the colour of  @xmath93 after recolouring .",
    "we now try to take the same recolouring steps to recolour  @xmath69 , starting from  @xmath70 .",
    "if for some  @xmath95 it is not possible to recolour  @xmath93 , this must be because  @xmath93 is adjacent to  @xmath72 and  @xmath72 at that moment has colour  @xmath96 .",
    "but because  @xmath72 has degree at most @xmath97 , there is a colour @xmath98 that does not appear on any of the neighbours of  @xmath72 .",
    "hence we can first recolour  @xmath72 to  @xmath99 , then recolour  @xmath93 to  @xmath96 , and continue .    in this way we find a sequence of @xmath0-colourings of  @xmath69 ,",
    "starting at  @xmath70 , and ending in a colouring in which all the vertices except possibly  @xmath72 will have the same colour as in  @xmath71 .",
    "but then , if necessary , we can do a final recolouring of  @xmath72 to give it the colour from  @xmath71 , completing the proof .",
    "theorem  [ df - th1 ] is best possible , as can be seen , e.g. , by the complete graphs  @xmath100 and trees .",
    "( for a tree  @xmath19 we have @xmath101 , while it is trivial to check that a graph with at least one edge is never 2-mixing .",
    ") constructions of graphs that are @xmath0-mixing for specific values of  @xmath0 , and not for other values , can be found in cereceda et al .",
    "@xcite .",
    "since the degeneracy @xmath79 of a graph  @xmath81 is clearly at most the maximum degree  @xmath102 , theorem  [ df - th1 ] immediately means that for @xmath103 , @xmath69 is @xmath0-mixing , as already noted by jerrum  @xcite .",
    "an interesting result that is related to theorem  [ df - th1 ] was proved by choo  & macgillivray  @xcite .",
    "they proved that if @xmath104 , then the configuration graph ( formed by all @xmath0-colourings with edges between colourings that differ in the colour on one vertex ) is hamiltonian .",
    "in other words , for those  @xmath0 we can start at any @xmath0-colouring of  @xmath69 and then there is a sequence of single - vertex recolourings so that every other @xmath0-colouring appears exactly once , ending with the original starting colouring .",
    "when @xmath82 , the proof of theorem  [ df - th1 ] provides an algorithm to find a sequence of transformations between any two @xmath0-colourings of  @xmath69 .",
    "but the best upper bound on the number of steps that can be obtained from the proof is exponential in the number of vertices of  @xmath69 .",
    "no graph is known for which such an exponential number of steps is necessary .",
    "in fact the following is conjectured in cereceda  @xcite .",
    "[ ce - con1 ] + for a graph  @xmath69 on  @xmath12 vertices and integer @xmath82 , any two @xmath0-colourings of  @xmath69 can be transformed from one into the other using @xmath105 single - vertex recolouring steps .",
    "if true , the value @xmath105 in conjecture  [ ce - con1 ] would be best possible .",
    "some weaker versions of the conjecture were proved in  @xcite .",
    "[ ce - th1 ] + conjecture  [ ce - con1 ] is true under the stronger assumptions @xmath106 or @xmath103 .",
    "theorem  [ ce - th1 ] means that conjecture  [ ce - con1 ] is true if  @xmath69 is a tree ( then @xmath107 ) or if  @xmath69 is regular ( in which case @xmath108 ) .",
    "note that theorem  [ df - th1 ] has algorithmic consequences if we restrict the decision problems to classes of graph in which each graph has degeneracy at most some fixed upper bound .",
    "for instance , as planar graphs have degeneracy at most  5 , we obtain that 7-colour - mixing and 7-colour - path restricted to planar graphs are trivially in  * p * , as the answer is always `` yes '' .",
    "we now return to the recolouring complexity problems introduced earlier in this subsection .",
    "the following are some results that are known about those problems .",
    "[ col - th1 ]     to10mm(a ) if @xmath109 , then @xmath0-colour - path and @xmath0-colour - mixing are in  * p*.     to10mm(b ) if @xmath110 , then @xmath0-colour - path is in  * p * ; while @xmath0-colour - mixing is * conp*-complete ( cereceda et al .",
    "@xcite ) .",
    "to10mm(c ) for all @xmath111 , @xmath0-colour - path is * pspace*-complete ( bonsma and cereceda  @xcite ) .",
    "[ col - th2 ]     to10mm(a ) if @xmath109 , then @xmath0-list - colour - path and @xmath0-list - colour - mixing are in  * p*.     to10mm(b ) for all @xmath112 , @xmath0-list - colour - path is * pspace*-complete ( bonsma and cereceda  @xcite ) .",
    "we already noted that the claims in theorem  [ col - th1](a ) are trivial : if we have only two colours , then the end - vertices of any edge can never be recoloured .",
    "the results in theorem  [ col - th1](b ) are clearly the odd ones among the list of results above .",
    "the proof in  @xcite of the * conp*-completeness of 3-colour - mixing uses the concept of _ folding _ : given two non - adjacent vertices  @xmath113 and  @xmath72 that have a common neighbour , a _ fold on  @xmath113 and  @xmath72 _ is the identification of  @xmath113 and  @xmath72 ( together with removal of any double edges produced ) .",
    "we say a graph  @xmath69 is _ foldable _ to  @xmath81 if there exists a sequence of folds that transforms  @xmath69 to  @xmath81 .",
    "folding of graphs , and its relation to vertex colouring , has been studied before , see for instance  @xcite .",
    "combining observations from  @xcite for non - bipartite 3-colourable graphs , with the structural characterisation of bipartite graphs that are not 3-mixing in  @xcite , gives the following .",
    "[ th - fold ] + let  @xmath69 be a connected 3-colourable graph . then  @xmath69 is not 3-mixing if and only if  @xmath69 is foldable to the 3-cycle  @xmath114 or the 6-cycle  @xmath115 .",
    "it is easy to see that every non - bipartite 3-colourable connected graph can be folded to  @xmath114 , so the interesting part of this theorem is the characterisation of bipartite non-3-mixing graphs as being foldable to  @xmath115 . in a sense",
    ", the theorem shows that  @xmath114 and  @xmath115 are the ` minimal ' graphs that are not 3-mixing .",
    "theorem  [ col - th2](b ) is not explicitly given in bonsma and cereceda  @xcite , but follows from the proof of theorem  [ col - th1](c ) in that paper .",
    "the results that 2-list - colour - path and 2-list - colour - mixing can be done in polynomial time can be proved directly with some effort .",
    "but it is easy to see that in fact any 2-list - colouring problem can be reduced to a boolean 2-cnf - formula . for each vertex  @xmath72 and colour @xmath116 ,",
    "introduce a boolean variable  @xmath117 .",
    "then for each vertex  @xmath72 with @xmath118 we add a clause @xmath119 ; while for each edge  @xmath120 and colour @xmath121 we add a clause @xmath122 .",
    "we can now use the results that checking the connectivity of the solution space of a 2-cnf - formula is in  * p * , see theorem  [ gk - th1](c ) .    as well as the computational complexity of some of the recolouring problems , we also know something about the number of recolourings we might need .    [ col - th3 ]     to10mm(a ) for a graph  @xmath69 on  @xmath12 vertices , if two 3-colourings of  @xmath69 can be connected by a sequence of single - vertex recolourings , then this can be done in @xmath105 steps ( cereceda et al .",
    "@xcite ) .",
    "to10mm(b ) for any @xmath112 there exists an exponential function  @xmath60 such that for every  @xmath61 , there exists a graph  @xmath69 on @xmath62 vertices , an assignment  @xmath74 of lists of size  @xmath0 to the vertices of  @xmath69 , and two @xmath74-colourings  @xmath70 and  @xmath71 of  @xmath69 , such that we can transform  @xmath70 into  @xmath71 by recolouring one vertex at a time , but where the number of recolourings required is at least  @xmath60 ( bonsma and cereceda  @xcite ) .",
    "to10mm(c ) for any @xmath111 , the result in  ( b ) also holds for ordinary @xmath0-colouring recolourings .",
    "the bound @xmath105 in theorem  [ col - th3](a ) is best possible .",
    "two remaining questions are the complexity class of @xmath0-colour - mixing for @xmath111 and @xmath0-list - colour - mixing for @xmath112 . in view of the fact that @xmath0-colour - path and @xmath0-list - colour - path for those values of  @xmath0 are * pspace*-complete",
    ", one would expect the mixing variants to have a similar complexity .",
    "on the other hand , since the * conp*-completeness of 3-colour - mixing is obtained by a particular structure that needs to be present in a graph to fail to be 3-mixing , a similar graph - structural condition for mixing with more colours might well be possible .    in view of the results that many of the recolouring problems are not in  * p * ( assuming that @xmath64 ) , it is interesting to find restricted instances for which the recognition problems are in  * p*. a natural choice for a graph class where one expects this to happen is the class of bipartite graphs , since many colouring problems are trivial in that class .",
    "surprisingly , restricting the input of the decision problems to just bipartite graphs does not change any of the results in theorems [ col - th1][col - th3 ] . a restriction to planar graphs",
    "has more surprising results , as expressed in the final result of this subsection .",
    "[ col - th4 ]     to10mm(a ) when restricted to planar graphs , 3-colour - mixing becomes polynomial ( cereceda et al .",
    "@xcite ) .",
    "to10mm(b ) when restricted to planar graphs , @xmath0-colour - path for @xmath123 and @xmath0-list - colour - path for @xmath124 remain * pspace*-complete ( bonsma and cereceda  @xcite ) . +",
    "both decision problems are in  * p * for @xmath125 when restricted to planar graphs .",
    "to10mm(c ) when restricted to bipartite planar graphs , @xmath0-colour - path for @xmath126 and @xmath0-list - colour - path for @xmath127 remain * pspace*-complete ( bonsma and cereceda  @xcite ) . +",
    "both decision problems are in  * p * for @xmath128 when restricted to bipartite planar graphs .    the results that @xmath0-colour - path and @xmath0-list - colour - path are polynomial for planar or bipartite planar graphs and larger  @xmath0 , follows directly from upper bounds for the degeneracy for those graphs and theorem  [ df - th1 ] .      given a @xmath0-colouring  @xmath11 of a graph  @xmath69 , a _",
    "kempe chain _ is a connected component of the subgraph of  @xmath69 induced by the vertices coloured with one of two give colours . in other words ,",
    "if @xmath129 are two different colours , and @xmath130 is the collection of vertices coloured either  @xmath131 or  @xmath132 , then a kempe chain is a connected component of the induced subgraph of  @xmath69 with vertex set  @xmath133 . by a _",
    "kempe chain recolouring _ we mean switching the two colours on a kempe chain .",
    "kempe chains and kempe chain recolouring have been essential concepts in the proofs of many classical results on colouring , such as the four colour theorem from appel  & haken  @xcite and vizing s edge - colouring theorem  @xcite .",
    "notice that a kempe chain recolouring is a generalisation of the single - vertex recolouring transformation from the previous subsection , since such a recolouring corresponds to a kempe chain recolouring on a kempe chain consisting of just one vertex .",
    "let us call a graph  @xmath69 _ @xmath0-kempe - mixing _ if it is possible , for any two @xmath0-colourings of  @xmath69 , to transform the first one into the second one by a sequence of kempe chain recolourings .    from the observation above , we see that if a graph is @xmath0-mixing ,",
    "then it certainly is @xmath0-kempe - mixing .",
    "but the reverse need not be true . for instance , it has been observed many times that a bipartite graph is @xmath0-kempe - mixing for any @xmath134 @xcite , whereas for any @xmath134 there exist bipartite graphs that are not @xmath0-mixing  @xcite .",
    "furthermore , a simple modification of the proof of theorem  [ df - th1 ] shows that for any graph  @xmath69 , if @xmath135 , then  @xmath69 is @xmath0-kempe - mixing , as was already proved by las vergnas  & meyniel  @xcite .",
    "very little is known about the complexity of determining if a graph is @xmath0-kempe - mixing .",
    "the same holds for the ` path ' version of the problem ( determining if two given @xmath0-colourings can be transformed into one another by a sequence of kempe chain recolourings ) .",
    "intuitively , there appear to be at least two reasons why kempe chain recolouring is so much harder to analyse than single - vertex recolouring .",
    "firstly , for any @xmath0-colouring of a graph it is always possible to perform kempe chain recolourings .",
    "this is different from single - vertex recolouring , where it might not be possible to recolour any vertex at all ( if all vertices have all colours different from their own appearing on a neighbour ) .",
    "this kind of ` frozen ' colourings is essential in many of the analyses and results on single - vertex recolourings .",
    "secondly , whereas a single - vertex recolouring has only a ` local ' effect , a kempe chain can affect many vertices throughout the graph .",
    "the following are some results for planar graphs .",
    "[ ke - th1 ]     to10mm(a ) every planar graph is 5-kempe - mixing ( meyniel  @xcite ) .",
    "to10mm(b ) if  @xmath69 is a 3-colourable planar graph , then  @xmath69 is 4-kempe - mixing ( mohar  @xcite ) .",
    "the results in the theorem are best possible in the sense that the number of colours can not be reduced in either statement  @xcite .",
    "as we have observed earlier , for the single - vertex recolouring problem , the smallest graph that is not 3-mixing is the triangle  @xmath114 , while the smallest _ bipartite _ graph that is not 3-mixing is the 6-cycle  @xmath115 .",
    "these graphs are essential in the proof that 3-colour - mixing is * conp*-complete .",
    "the smallest graph that is not 3-kempe - mixing is the 3-prism @xmath136 ( see figure  [ fig : prism ] )",
    ".    1.25 mm    ( 44,38)(-4,-4 ) ( 0,0 ) ( 36,0 ) ( 18,30 ) ( 9,4.5 ) ( 27,4.5 ) ( 18,19.5 ) ( 0,0)(1,0)36 ( 18,30)(-3,-5)18 ( 18,30)(3,-5)18 ( 0,0)(2,1)9 ( 36,0)(-2,1)9 ( 18,30)(0,-1)10.5 ( 9,4.5)(1,0)18 ( 18,19.5)(-3,-5)9 ( 18,19.5)(3,-5)9 ( -3,-1.5)(0,0)1 ( 39,-1.5)(0,0)2 ( 18,33.5)(0,0)3 ( 12.5,6.25)(0,0)2 ( 23.5,6.25)(0,0)3 ( 18,15.75)(0,0)1    ( 44,38)(-4,-4 ) ( 0,0 ) ( 36,0 ) ( 18,30 ) ( 9,4.5 ) ( 27,4.5 ) ( 18,19.5 ) ( 0,0)(1,0)36 ( 18,30)(-3,-5)18 ( 18,30)(3,-5)18 ( 0,0)(2,1)9 ( 36,0)(-2,1)9 ( 18,30)(0,-1)10.5 ( 9,4.5)(1,0)18 ( 18,19.5)(-3,-5)9 ( 18,19.5)(3,-5)9 ( -3,-1.5)(0,0)1 ( 39,-1.5)(0,0)2 ( 18,33.5)(0,0)3 ( 12.5,6.25)(0,0)3 ( 23.5,6.25)(0,0)1 ( 18,15.75)(0,0)2    it is easy to check that any kempe chain recolouring in these two colourings will only result in renaming the two colours involved in the kempe chain , but never changes the structure .",
    "it is unknown if the 3-prism is in some way a ` minimal ' graph that is not 3-kempe mixing , or if it is the only one .",
    "neither is it obvious what subgraph relation we should use ( like ` foldable ' for the single - vertex recolouring problem ) when talking about ` minimal ' for kempe - mixing .",
    "kempe chains have also been used extensively in the analysis of edge - colourings of graphs . recall that a _ @xmath0-edge - colouring _ of a graph @xmath65 is an assignment @xmath137 such that @xmath138 for any two edges  @xmath139 that share a common end - vertex . similar to vertex - colourings , a kempe chain in an edge - coloured graph is a component of the subgraph formed by the edges coloured with one of two given colours . note that in this case every kempe chain is a path or an even length cycle , and a recolouring is again just switching the colours on the chain . call a graph  @xmath69 _ @xmath0-kempe - edge - mixing _ if it is possible for any two @xmath0-edge - colourings of  @xmath69 to transform the first one into the second one by a sequence of kempe chain recolourings .",
    "kempe chains on edge - colourings are instrumental in most ( if not all ) proofs of vizing s theorem  @xcite that a simple graph with maximum degree  @xmath140 has an edge - colouring using at most @xmath141 colours . hence it is not surprising that results on @xmath0-kempe - edge mixing are related to this constant as well .",
    "[ mo - th1 ]     to10mm(a ) if a simple graph  @xmath69 can be edge - coloured with  @xmath0 colours , then  @xmath69 is @xmath142-kempe - edge - mixing .",
    "to10mm(b ) if  @xmath69 is a simple bipartite graph with maximum degree  @xmath140 , then  @xmath69 is @xmath143-kempe - edge - mixing .",
    "it is unknown if theorem  [ mo - th1](a ) is best possible , nor if the condition that the graph be bipartite in part  ( b ) is necessary .",
    "a strongest possible result would be for any simple graph with maximum degree  @xmath140 to be @xmath143-kempe - edge - mixing .",
    "the 15-puzzle can be considered as a problem involving moving tokens around a given graph , where a token can be moved along an edge to an empty vertex .",
    "so the two configurations in figure  [ fig:15puzzle ] can also be drawn as in figure  [ fig:15graph ] .",
    ".6 mm    ( 68,68)(-4,-4 ) ( 0,0)(0,0)(0,0)15 ( 20,0)(20,0)(0,0)8 ( 40,0)(40,0)(0,0)7 ( 60,0)(60,0)(0,0)5 ( 0,20 ) ( 20,20)(20,20)(0,0)6 ( 40,20)(40,20)(0,0)4 ( 60,20)(60,20)(0,0)14 ( 0,40)(0,40)(0,0)9 ( 20,40)(20,40)(0,0)11 ( 40,40)(40,40)(0,0)1 ( 60,40)(60,40)(0,0)10 ( 0,60)(0,60)(0,0)13 ( 20,60)(20,60)(0,0)2 ( 40,60)(40,60)(0,0)3 ( 60,60)(60,60)(0,0)12 ( 4.5,0)(1,0)11.1 ( 24.5,0)(1,0)11.1 ( 44.5,0)(1,0)11.1 ( 0,20)(1,0)15.6 ( 24.5,20)(1,0)11.1 ( 44.5,20)(1,0)11.1 ( 4.5,40)(1,0)11.1 ( 24.5,40)(1,0)11.1 ( 44.5,40)(1,0)11.1 ( 4.5,60)(1,0)11.1 ( 24.5,60)(1,0)11.1 ( 44.5,60)(1,0)11.1 ( 0,4.5)(0,1)31.2 ( 20,4.5)(0,1)11.1 ( 40,4.5)(0,1)11.1 ( 60,4.5)(0,1)11.1 ( 20,24.5)(0,1)11.1 ( 40,24.5)(0,1)11.1 ( 60,24.5)(0,1)11.1 ( 0,44.5)(0,1)11.1 ( 20,44.5)(0,1)11.1 ( 40,44.5)(0,1)11.1 ( 60,44.5)(0,1)11.1    ( 68,68)(-4,-4 ) ( 0,0)(0,0)(0,0)13 ( 20,0)(20,0)(0,0)14 ( 40,0)(40,0)(0,0)15 ( 60,0 ) ( 0,20)(0,20)(0,0)9 ( 20,20)(20,20)(0,0)10 ( 40,20)(40,20)(0,0)11 ( 60,20)(60,20)(0,0)12 ( 0,40)(0,40)(0,0)5 ( 20,40)(20,40)(0,0)6 ( 40,40)(40,40)(0,0)7 ( 60,40)(60,40)(0,0)8 ( 0,60)(0,60)(0,0)1 ( 20,60)(20,60)(0,0)2 ( 40,60)(40,60)(0,0)3 ( 60,60)(60,60)(0,0)4 ( 4.5,0)(1,0)11.1 ( 24.5,0)(1,0)11.1 ( 44.5,0)(1,0)15.6 ( 4.5,20)(1,0)11.1 ( 24.5,20)(1,0)11.1 ( 44.5,20)(1,0)11.1 ( 4.5,40)(1,0)11.1 ( 24.5,40)(1,0)11.1 ( 44.5,40)(1,0)11.1 ( 4.5,60)(1,0)11.1 ( 24.5,60)(1,0)11.1 ( 44.5,60)(1,0)11.1 ( 0,4.5)(0,1)11.1 ( 20,4.5)(0,1)11.1 ( 40,4.5)(0,1)11.1 ( 60,0)(0,1)15.6 ( 0,24.5)(0,1)11.1 ( 20,24.5)(0,1)11.1 ( 40,24.5)(0,1)11.1 ( 60,24.5)(0,1)11.1 ( 0,44.5)(0,1)11.1 ( 20,44.5)(0,1)11.1 ( 40,44.5)(0,1)11.1 ( 60,44.5)(0,1)11.1    looking at the 15-puzzle in this way immediately suggests all kind of generalisations .",
    "an obvious generalisation is to play the game on different graphs .",
    "but we can also change the number of tokens , or the way the tokens are labelled . in this section",
    "we consider some of the variants that have been studied in the literature .",
    "there is an obvious generalisation of the 15-puzzle . for a given graph on  @xmath12 vertices , place",
    "@xmath144 tokens labelled 1 to @xmath144 on different vertices .",
    "the allowed moves are `` sliding '' a token along an edge onto the unoccupied vertex .",
    "the central question is if each of the @xmath145 possible token configurations can be obtained from one another by a sequence of token moves .",
    "a complete answer to this was given in wilson  @xcite .",
    "for a given graph  @xmath69 on  @xmath12 vertices , he defines the _ puzzle graph @xmath146 _ as the graph that has as vertex set all possible placements of the @xmath144 tokens on  @xmath69 , and two configurations are adjacent if they can be obtained from one another by a single move .",
    "[ wi - th1 ] + let  @xmath69 be a 2-connected graph on @xmath147 vertices",
    ". then @xmath146 is connected , except in the following cases :     to10mm(a ) @xmath69 is a cycle on @xmath148 vertices ( in which case @xmath146 has @xmath149 components ) ;     to10mm(b ) @xmath69 is a bipartite graph different from a cycle ( then @xmath146 has two components ) ;     to10mm(c ) @xmath69 is the graph  @xmath150 in figure  [ fig : th0 ] ( then @xmath146 has six components ) .    0.8 mm    ( 40,34)(-2,-2 ) ( 9,0 ) ( 27,0 ) ( 0,15 ) ( 18,15 ) ( 36,15 ) ( 9,30 ) ( 27,30 ) ( 9,0)(1,0)18 ( 9,0)(-3,5)9 ( 27,0)(3,5)9 ( 0,15)(1,0)36 ( 0,15)(3,5)9 ( 36,15)(-3,5)9 ( 9,30)(1,0)18    the condition in wilson s theorem that the graph  @xmath69 is 2-connected is necessary . it is obvious that for a non - connected graph  @xmath69 , @xmath146 is never connected ; while if  @xmath69 has a cut - vertex  @xmath72 , then a token can never be moved from one component of @xmath151 to another component .",
    "the proof of theorem  [ wi - th1 ] in  @xcite is quite algebraic in nature .",
    "this is not surprising , since each token configuration can be considered as a permutation of  @xmath12 labels ( with the unoccupied vertex having the label ` empty ' ) . within that context , a move is just a particular type of transposition involving two labels ( one of them always being the ` empty ' label ) .",
    "although wilson s theorem is not formulated in algorithmic terms , it is easy to derive from it a polynomial time algorithm to decide if @xmath146 is connected for a given input graph  @xmath69 .    since wilson s work ( and often independent of it ) ,",
    "many generalisations have been considered in the literature . to describe these in some detail",
    ", we need some further notation . instead of assuming that all tokens are different",
    ", we will assume that some tokens can be identical .",
    "so tokens come in certain _ types _ ( other authors use _ colours _ for this ) , where tokens of the same type are considered indistinguishable ( and hence swapping tokens of the same type will not lead to a different configuration ) .",
    "a collection of tokens can have  @xmath152 tokens of type  1 , @xmath153 tokens of type  2 , etc .",
    "we denote such a typed set by @xmath154 , so that @xmath155 is the total number of tokens .",
    "a repeated sequence of  @xmath156 ones can be denoted as  @xmath157 .",
    "given a graph  @xmath69 and token set @xmath158 , the _ puzzle graph @xmath159 _ is the graph that has as vertex set all possible token placements on  @xmath69 of  @xmath152 tokens of type  1 , @xmath153 tokens of type  2 , etc . , and two configurations are adjacent if they can be obtained from one another by a single move of a token to a neighbouring empty vertex .",
    "this means that if  @xmath69 is a graph on  @xmath12 vertices , then @xmath160 . we will always assume that if  @xmath69 has  @xmath12 vertices , then @xmath161 and @xmath162 .",
    "a first generalisation of wilson s work , in which there may be fewer than @xmath144 tokens , was considered by kornhauser et al .",
    "they showed that if  @xmath69 is a graph on  @xmath12 vertices , then for any two configurations from @xmath163 , it can be decided in polynomial time if these two configurations are in the same component , i.e. , if one configuration can be obtained from the other by a sequence of token moves .",
    "additionally , they showed that if such a transformation is possible , the number of moves required is at most @xmath164 , and the order of this bound is best possible .",
    "this work was further extended to token configurations with types as above ; first to trees by auletta et al .",
    "@xcite , and later to general graphs by goraly  & hassin  @xcite .",
    "their results prove that for any graph  @xmath69 and typed token set @xmath158 , given two configurations from @xmath165 , it can be decided in linear time if one configuration can be obtained from the other . notice that by the result for all tokens being different mentioned earlier , we immediately have that for a graph on  @xmath12 vertices , more than @xmath164 token moves are never needed between two configurations .",
    "the work mentioned in the previous paragraphs does not give an explicit characterisation of the puzzle graphs @xmath165 that are connected ( i.e. , where any two token configurations of the right type can be obtained from one another by a sequence of token moves ) . in order to describe such a characterisation , we need some further terminology regarding specific vertex - cut - sets in graphs . for a connected graph  @xmath69 ,",
    "a _ separating path of size one _ in  @xmath69 is a cut - vertex .",
    "a _ separating path of size two _ is a cut - edge @xmath166 so that both components of @xmath167 have at least two vertices .",
    "finally , for @xmath168 , a _ separating path of size  @xmath169 _ is a path @xmath170 in  @xmath69 , such that the vertices @xmath171 have degree two , @xmath172 has exactly two components , one containing  @xmath173 and one containing  @xmath174 , and where both components have at least two vertices .",
    "[ bvdhs - th1 ] + let  @xmath69 be a graph on @xmath147 vertices and @xmath158 be a token set , with @xmath161 and @xmath162 . then @xmath165 is disconnected if and only if at least one of the following cases holds :     to10mm(a ) @xmath69 is disconnected , and @xmath175 or @xmath176 ;     to10mm(b ) @xmath175 and @xmath177 ;     to10mm(c ) @xmath69 is a path and @xmath175 ;     to10mm(d ) @xmath69 is a cycle , @xmath178 and @xmath179 ; or  @xmath69 is a cycle and @xmath180 ;     to10mm(e ) @xmath69 is a 2-connected bipartite graph and the token set is @xmath181 ;     to10mm(f ) @xmath69 is the graph  @xmath150 in figure  [ fig : th0 ] and the token set is one of @xmath182 , @xmath183 , @xmath184 , @xmath185 ;     to10mm(g ) @xmath69 has connectivity one and contains a separating path of size at least @xmath186 .    note in particular that if  @xmath69 is a 2-connected graph on  @xmath12 vertices different from a cycle , and @xmath158 is a token set with @xmath187 , then @xmath165 is always connected .",
    "it is possible to extend this theorem to a full characterisation of any two token configurations from any puzzle graph @xmath165 that are in the same component ( hence extending the algorithmic results from goraly  & hassin  @xcite ) .",
    "this rather technical and long result can also be found in  @xcite .",
    "the results mentioned above mean that it is quite straightforward to check if one can go from any given token configuration to any other one .",
    "so a next natural question is to ask if it is possible to find the shortest path , i.e. , to find the minimum number of token moves required between two given token configurations in the same component of @xmath165 .",
    "this leads to the following decision problem .",
    "shortest - token - moves - sequence    a graph  @xmath69 , a token set @xmath158 , two token configurations  @xmath70 and  @xmath71 on  @xmath69 of type @xmath158 , and a positive integer  @xmath188 .",
    "is it possible to transform configuration  @xmath70 into configuration  @xmath71 using at most  @xmath188 token moves ?",
    "[ short - th1 ] + restricted to the case that the token sets are  @xmath189 ( i.e. , all tokens are the same ) , shortest - token - moves - sequence is in  * p*.    we can assume that the given graph  @xmath69 is connected .",
    "( since two configurations can be transformed into one another if and only if this can be done for the configurations restricted to the components of the graph . )",
    "given two token configurations  @xmath70 and  @xmath71 of  @xmath0 identical tokens on  @xmath69 , let @xmath190 be the set of vertices containing a token in  @xmath70 , and @xmath191 be the same for  @xmath71 .",
    "form a complete bipartite graph  @xmath192 with parts  @xmath193 and  @xmath23 . for each edge",
    "@xmath194 , define the weight  @xmath195 of  @xmath196 as the length of the shortest path from  @xmath197 to  @xmath198 in  @xmath69 ( and denote by  @xmath199 such a shortest path in  @xmath69 ) .",
    "it is well - known that a minimum weight perfect matching in a weighted balanced complete bipartite graph can be found in polynomial time ( for instance using the hungarian method , see , e.g. , schrijver  ( * ? ? ?",
    "* section  17.2 ) ) ; let  @xmath200 be such a minimum weight perfect matching .",
    "we can assume that @xmath201 .",
    "let  @xmath133 be the total weight in  @xmath200 , i.e. , the sum of the lengths of the paths  @xmath202 , @xmath203 .",
    "it is obvious that any way to move the tokens from  @xmath193 to  @xmath23 will use at least  @xmath133 steps .",
    "we will prove that in fact it is possible to do so using exactly  @xmath133 steps .",
    "we use induction on  @xmath133 , observing that if @xmath204 , then @xmath205 , so @xmath206 , and no tokens have to be moved .    if @xmath207 , then at least one element of  @xmath23 , say  @xmath173 , has no token on it in  @xmath70 .",
    "if @xmath208 , then we can just move the token from  @xmath209 along  @xmath210 to  @xmath173 , and are done by induction .",
    "so assume that  @xmath210 contains some other elements from  @xmath193 .",
    "take  @xmath197 to be the element from @xmath211 nearest to  @xmath173 on  @xmath210 .",
    "define new paths  @xmath212 and  @xmath213 as follows .",
    "let  @xmath212 be the path formed by going from  @xmath209 along  @xmath210 to  @xmath197 and then continue along  @xmath202 to  @xmath93 ; while  @xmath213 is just the path from  @xmath197 along  @xmath210 to  @xmath173 .",
    "it is clear that the sum of the lengths of  @xmath212 and  @xmath213 is the same as that sum for  @xmath210 and  @xmath202 , so we can replace  @xmath210 and  @xmath202 by  @xmath212 and  @xmath213 to get another set of paths from  @xmath193 to  @xmath23 of minimum total length .",
    "but in this new collection of paths , we can just move  @xmath197 along  @xmath213 to  @xmath173 , and then continue by induction .",
    "it was proved by goldreich  @xcite that shortest - token - moves - sequence is * np*-complete for the case wilson considered , i.e. , if all tokens are different .",
    "so somewhere between all tokens the same and all tokens different , the problem switches from being in  * p * to being * np*-complete .",
    "in fact , the change - over happens as soon as not all tokens are identical .",
    "[ short - th2 ] + restricted to the case that the token sets are  @xmath214 ( i.e. , there is one special token and all others are identical ) , shortest - token - moves - sequence is * np*-complete .",
    "it is possible to prove this using most of the ideas from the proof in papadimitriou et al .",
    "@xcite that ` graph - motion - planning - with - one - robot ' is * np*-complete .",
    "motion planning of robot(s ) on graphs is very closely related to transformations between token configurations on graphs . except now there are some special tokens , the ` robots ' , that have to be moved from an initial position to a specific final position , while all other tokens are just ` obstacles ' , and their final position is not relevant .",
    "the full details of the proof of theorem  [ short - th2 ] will appear in trakultraipruk  @xcite .",
    "if we consider the token problems in the previous subsection for the case that all tokens are identical , then there is very little to prove .",
    "the puzzle graph @xmath215 ( with @xmath216 ) is connected if and only if @xmath217 or  @xmath69 is connected .",
    "more specifically , two token configurations are in the same component of @xmath215 if and only if they have the same number of tokens on each component of  @xmath69 . even finding the minimum number of steps to go from one given configuration to another",
    "can be done in polynomial time .",
    "( of course , this does not mean that questions about other properties of this kind of reconfiguration graphs can not be interesting ; see for instance fabila - monroy et al .",
    "@xcite . )    but the situation changes drastically if only certain positions of tokens are allowed .",
    "the following problem was studied in hearn  & demaine  @xcite .",
    "recall that a _ stable set _ in a graph is a set of vertices so that no two in the set are adjacent .",
    "stable - sliding - token - configurations    a graph  @xmath69 , and two token configurations on  @xmath69 using identical tokens so that the set of occupied vertices for both configurations forms a stable set in  @xmath69 .",
    "is it possible to transform the first given configuration into the second one by a sequence of moves of one token along an edge , and such that in every intermediate configurations the set of occupied vertices is a stable set ?",
    "[ hd - th1 ] + the problem stable - sliding - token - configurations is * pspace*-complete , even when restricted to planar graphs with maximum degree three .",
    "the proof of this theorem in  @xcite ( and many other results in that paper ) rely on a powerful general type of problem that seems to be very suitable for complexity theoretical reductions .",
    "a _ non - deterministic constraint logic machine _ ( _ ncl machine _ ) consists of an undirected graph , together with assignments of non - negative integer weights to its edges and its vertices",
    ". a feasible configuration of an ncl machine is an orientation of the edges such that the sum of incoming edge - weights at each vertex is at least the weight of that vertex .",
    "a move is nothing other than reversing the orientation of one edge , guaranteeing that the resulting orientation is still a feasible configuration .",
    "the following is a natural reconfiguration question for ncl machines .",
    "ncl - configuration - to - edges    an ncl machine , a feasible configuration on that machine , and a specific edge of the underlying graph .",
    "is there a sequence of moves such that all intermediate configurations are feasible , and ending in a feasible configuration in which the specified edge has its orientation reversed ?",
    "[ hd - th2 ] + the problem ncl - configuration - to - edges is * pspace*-complete , even when restricted to ncl machines in which the underlying graph is planar , all vertices have degree three , all edge - weights are  1 or  2 , and all vertex weights are  2 .",
    "we return to moving tokens configuration problems .",
    "note that in the stable - sliding - token - configurations problem , the graph has a ` double ' role : it determines both the allowed configurations ( stable vertex sets ) and the allowed moves ( sliding along an edge )",
    ". a natural next question would be what happens when one of these constraints imposed by the graph is removed .",
    "we have already seen that if we remove the constraint that the configurations must be stable sets , then the problem becomes easy .",
    "but the situation is different if we remove the constraint that token movement must happen along an edge .",
    "stable - set - reconfiguration    a graph  @xmath69 , and two token configurations on  @xmath69 using identical tokens so that the set of occupied vertices for both configurations forms a stable set in  @xmath69 .",
    "is it possible to transform the first given configuration into the second one by a sequence of moves of one token at each step , where a token can move from any vertex to any other vacant one , and so that in every intermediate configuration the set of occupied vertices is a stable set ?    [ id - th1 ]",
    "+ the problem stable - set - reconfiguration is * pspace*-complete , even when restricted to planar graphs with maximum degree three .",
    "since independent set problems are easily reduced to problems about cliques , vertex covers , etc .",
    ", reconfiguration problems where the vertices occupied by a token form sets of this type are easily seen to be * pspace*-complete as well . see ito et al .",
    "@xcite for more details .    for some other types of sets formed by occupied vertices , the corresponding reconfiguration problems can become polynomial .",
    "a classical example of this is the following .",
    "[ cu - th1 ] + let  @xmath69 be a connected graph with positive weights on its edges . then any minimum spanning tree of  @xmath69 can be transformed into any other minimum spanning tree by exchanging one edge at a time , so that each intermediate configuration is a minimum spanning tree as well .",
    "note that the reconfiguration in theorem  [ cu - th1 ] can be seen as a token reconfiguration problem by playing on the line graph of  @xmath69 .",
    "similarly , the following problem is essentially stable - set - reconfiguration played on line graphs .    matching - reconfiguration    a graph  @xmath69 , and two matchings of  @xmath69 ( subgraphs of degree at most one ) .",
    "is it possible to transform the first matching into the second one by a sequence of moves of one edge at a time , so that in every intermediate configuration the set of chosen edges forms a matching as well ?    [ id - th2 ] + the problem matching - reconfiguration is in * p*.    comparing the reconfiguration problems in this subsection that are * pspace*-complete with those that are in  * p * , it is tempting to conjecture that if the related _ decision problem _ is * np*-complete , then the reconfiguration problem is * pspace*-complete ; whereas if the related decision problem is in  * p * , then so is the reconfiguration problem .",
    "such a connection is alluded to in ito et al .",
    "nevertheless , in earlier sections we have seen some examples that shows that such a direct connection is not true .",
    "for instance , it is * np*-complete to decide if a graph is 3-colourable , but the single - vertex recolouring reconfiguration problem is in  * p * , theorem  [ col - th1](b ) .",
    "we close this section with a simplified version of a question from ito et al .",
    "@xcite : is the hamilton - cycle - reconfiguration problem ( where two cycles are adjacent if they differ in two edges ) * pspace*-complete ?",
    "most reconfiguration problems are interesting enough for their own sake , and do not really need an application to justify their study . nevertheless , many reconfiguration problems have applications or are inspired by problems in related areas . in this section we look at some of those applications and connections .",
    "randomness plays an important role in many parts of combinatorics and theoretical computer science .",
    "indeed , results from probability theory have led to major developments in both fields .",
    "it is therefore unsurprising that researchers are often interested in obtaining random samples of particular combinatorial structures .",
    "for example , much attention has been devoted to the problem of sampling from an exponential number of structures ( exponential in the size of the object over which the structures are defined ) in time polynomial in this quantity",
    ". one of the reasons for this is that being able to sample almost uniformly from a set of combinatorial structures is enough to be able to approximately count such structures .",
    "see jerrum  @xcite for an example illustrating the method in the context of graph colourings , and jerrum  @xcite and jerrum et al .",
    "@xcite for full details .",
    "the question of when the configuration graph of a reconfiguration problem is connected is quite old .",
    "in particular the configuration graph of the single - vertex recolouring method has been looked at , as a subsidiary issue , by researchers in the statistical physics community studying the ` glauber dynamics of an anti - ferromagnetic potts model at zero temperature ' .",
    "( see sokal  @xcite for an introduction to the potts model and its many relations to graph theory . )",
    "associated with that research is the work on rapid mixing of markov chains used to obtain efficient algorithms for almost uniform sampling of @xmath0-colourings of a given graph .",
    "we give a brief description of the basic ideas involved in these areas of research .",
    "quite often , the sampling is done via the simulation of an appropriately defined markov chain . here",
    "the important point is that the markov chain should be rapidly mixing .",
    "this means , loosely speaking , that it should converge to a close approximation of the stationary distribution in time polynomial in the size of the problem instance . for a precise description of this concept and further details ; see  @xcite again .    in the context of the particular markov chain used for sampling @xmath0-colourings of a graph known as _ glauber dynamics _ ( originally defined for the _ anti - ferromagnetic potts model at zero temperature _ ) we have the following .",
    "for a particular graph  @xmath69 and value of  @xmath0 , let us denote the glauber dynamics for the @xmath0-colourings of  @xmath69 by @xmath218 .",
    "the state space of @xmath219 is the set of all @xmath0-colourings of  @xmath69 , the initial state  @xmath220 is an arbitrary colouring , and its transition probabilities are determined by the following procedure .    1 .   select a vertex  @xmath72 of  @xmath69 uniformly at random .",
    "2 .   select a colour @xmath221 uniformly at random .",
    "3 .   if recolouring vertex  @xmath72 with colour  @xmath99 yields a proper colouring , then set @xmath222 to be this new colouring ; otherwise , set @xmath223 .",
    "the relation between @xmath219 and the single - vertex recolouring transformations is immediate . in particular , to be sure that every @xmath0-colouring can appear as some state of the markov chain , we need that  @xmath69 is @xmath0-mixing .",
    "thus the fact that a graph is @xmath0-mixing is a necessary condition for its glauber dynamics markov chain to be rapidly mixing .",
    "( this explains the choice of terminology in section  [ sec - col ] . ) on the other hand , if a graph is @xmath0-mixing it does not mean that its glauber dynamics markov chain is rapidly mixing .",
    "an example showing this is given by the stars @xmath224 , which are @xmath0-mixing for any @xmath112 ( see theorem  [ df - th1 ] ) but whose glauber dynamics is not rapidly mixing for @xmath225 , for fixed @xmath226 ( uczak  & vigoda  @xcite ) .",
    "let us point out that much of the work on rapid mixing of the glauber dynamics markov chain ( as well as that on its many generalisations and variants ) has concentrated on specific graphs , or on values of  @xmath0 so large that @xmath0-mixing is guaranteed .",
    "many applications in theoretical physics related to the potts model are of particular interest for crystalline structures , leading to the many studies of the glauber dynamics and its generalisations on very regular and highly symmetric graphs such as integer grids .",
    "similar to the single - vertex recolouring method , the kempe chain recolouring method ( see subsection  [ subs - kc ] ) has also been used to define a markov chain on the set of all @xmath0-colourings of some graph .",
    "the corresponding approximate sampling algorithm is known as the _ wang - swendsen - koteck dynamics _ ; see @xcite .",
    "many reconfiguration problems we have considered so far can be used to define a markov chain similar to the ones for vertex - colouring defined above .",
    "again , for such a markov chain to be a useful tool for almost uniform sampling and approximate counting , it is necessary that the configuration graph is connected , leading to questions considered in this survey .",
    "we introduced the study of token configurations on graphs by looking at the classical 15-puzzle .",
    "but in fact , many puzzles and games can be described as reconfiguration problems . following demaine and hearn  @xcite we use the term _ ( combinatorial ) puzzle _ if there is only one player , and use _",
    "( combinatorial ) game _ if there are two players .",
    "( so we ignore games with more than two players , or with no players ( like conway s game of life ) . )",
    "the puzzles we are interested in are of the following type : `` given some initial configuration and a collection of allowed moves , can some prescribed final configuration ( or a final configuration from a prescribed set ) be reached in a finite number of moves ? '' for a game the situation is somewhat more difficult , and several different variants can be described .",
    "a quite general one is : `` given some initial configuration , a starting player , a collection of allowed moves which the two players have to play alternately , and a collection of winning configurations for player  1 , can player  1 force the game to always reach a winning configuration in a finite number of moves , no matter the moves player  2 chooses ? ''",
    "another way to describe this question is : `` given the setup of the game and the initial situation , is there a winning strategy for player  1 ? '' .    with these descriptions",
    "there is an obvious relation between the type of reconfiguration problem we considered and puzzles and games . for many puzzles and games , both existing and specially invented ,",
    "the complexity of answering the questions above have been considered . a good start to find the relevant results and literature in this area",
    "is the extensive survey of demaine and hearn  @xcite .",
    "some reconfiguration problems have more practical applications ( leaving aside if `` solving puzzles '' is really a practical application ) . in particular , graph recolouring problems can be seen as abstract versions of several real - life problems .",
    "one example of this is as a modelling tool for the assignment of frequencies in radio - communication networks .",
    "the basic aim of the _ frequency assignment problem ( fap ) _ is to assign frequencies to users of a wireless network , minimising the interference between them and taking care to use the smallest possible range of frequencies . because the radio spectrum is a naturally limited resource with a constantly growing demand for the services that rely on it , it has become increasingly important to use it as efficiently as possible . as a result , and because of the inherent difficulty of the problem",
    ", the subject is huge . for an introduction and survey of different approaches and results",
    "we refer the reader to leese  & hurley  @xcite .",
    "the fap was first defined as a graph colouring problem by hale  @xcite . in this",
    "setting , we think of the available frequencies ( discretised and appropriately spaced in the spectrum ) as colours , transmitters as vertices of a graph , and we add edges between transmitters that must be assigned different frequencies . in order to better capture the subtleties of the ` real - world ' problem , this basic model has been generalised in a multitude of different ways .",
    "typically this might involve taking into account the fact that radio waves decay with distance obeying an inverse - square law .",
    "for instance , numerical weights can be placed on the edges of the graph to indicate that frequencies assigned to the end - vertices of an edge must differ by at least the amount given by the particular edge - weight .",
    "one of the major factors contributing to the rise in demand for use of the radio spectrum has been the dramatic growth , both in number and in size , of mobile telecommunication systems . in such systems , where new transmitters are continually added to meet increases in demand , an optimal or near - optimal assignment of frequencies will in general not remain so for long .",
    "on the other hand , it might just be the case that , because of the difficulty of finding optimal assignments , a sub - optimal assignment is to be replaced with a recently - found better one .",
    "it thus becomes necessary to think of the assignment of frequencies as a dynamic process , where one assignment is to be replaced with another . in order to avoid interruptions to the running of the system ,",
    "it is desirable to avoid a complete re - setting of the frequencies used on the whole network . in a graph colouring framework",
    ", this leads naturally to the graph - recolouring problems we looked at in section  [ sec - col ] .",
    "not much attention seems yet to have been devoted to the problem of reassigning frequencies in a network .",
    "some first results can be found in @xcite .",
    "most of the work in that literature describes specific heuristic approaches to the problem , often accompanied by some computational simulations .    as hinted at already in section  [ sec - tok ] , moving - token puzzles",
    "are related to questions on movements of robots .",
    "a simple abstraction and discretisation is to assume that one or more robots move along the edges of a graph .",
    "there might be additional objects placed on the vertices , playing the role of ` obstacles ' .",
    "the robots have to move from an initial configuration to some target configuration . in order to pass vertices occupied by obstacles ,",
    "these obstacles have to be moved out of the way , along edges as well .",
    "in general it is not hard to decide whether or not the robots can actually move from their initial to their target configuration .",
    "but for practical applications , limiting the number of steps required is also important , leading to problems that are much harder to answer , see e.g.  papadimitriou et al .",
    "a multi - robot motion planning problem in which robots are partitioned in groups such that robots in the same group are interchangeable , comparable to the sliding token problem with different types of tokens , has recently been studied in solovey  & halperin  @xcite .",
    "the robot motion problem on graphs is closely related to certain puzzles as well .",
    "a well - known example of such a puzzle is _ sokoban _ , which is played on a square grid where certain squares contain immovable walls or other obstacles .",
    "there is also a single ` pusher ' who can move certain blocks from one square to a neighbouring one , but only in the direction the pusher can ` push ' .",
    "moreover , the pusher can only move along unoccupied squares .",
    "the goal of the game is to push the movable blocks to their prescribed final position .",
    "deciding if a given sokoban configuration can be solved is known to be * pspace*-complete , as was proved in culberson  @xcite .",
    "it would be easy to end this survey with a long list of open problems : what is the complexity of deciding the following reconfiguration problems :   ? but a more fundamental , and probably more interesting , problem is to try to find a connection between the complexity of reconfiguration problems and the complexity of the decision problem on the existence of configurations of a particular kind ( related to the reconfiguration problem under consideration ) .",
    "such connections are regularly alluded to in the literature .",
    "for instance , with regard to the complexity of satisfiability reconfiguration problems , gopalan et al .",
    "@xcite conjectured that if  @xmath20 is schaefer , then conn(@xmath20 ) is in  @xmath63 .",
    "( this has been disproved since then ; see section  [ sec - sat ] . ) similarly , ito et al .",
    "@xcite write `` there is a wealth of reconfiguration versions of np - complete problems which can be shown pspace - complete via extensions , often quite sophisticated , of the original np - completeness proofs ;  '' , as if there is a general connection between the complexity of these two types of decision problem .",
    "but the connection must be more subtle that just `` * * np**-completeness of decision problem implies * pspace*-completeness of corresponding reconfiguration problem '' .",
    "for instance , it is well known that deciding if a graph is @xmath0-colourable is * np*-complete for any fixed @xmath112 . but",
    "deciding if two given 3-colourings of a graph are connected via a sequence of single - vertex recolourings is in  * p * for @xmath110 and * pspace*-complete for @xmath111 ; see theorem  [ col - th1 ] .",
    "nevertheless , it might be possible to say more about the connection between the complexity of certain decision problems and the complexity of the corresponding reconfiguration problem .",
    "in particular for problems that involve labelling of certain objects under constraints ( such as satisfiability and graph colouring ) , and where the allowed transformation is the relabelling of a single object , such a connection might be identifiable .",
    "if this is indeed the case , it might give us a better understanding of both the original decision problem and the reconfiguration problem ."
  ],
  "abstract_text": [
    "<S> many combinatorial problems can be formulated as `` can i transform configuration  1 into configuration  2 , if certain transformations only are allowed ? '' . </S>",
    "<S> an example of such a question is : given two @xmath0-colourings of a graph , can i transform the first @xmath0-colouring into the second one , by recolouring one vertex at a time , and always maintaining a proper @xmath0-colouring ? </S>",
    "<S> another example is : given two solutions of a sat - instance , can i transform the first solution into the second one , by changing the truth value one variable at a time , and always maintaining a solution of the sat - instance ? </S>",
    "<S> other examples can be found in many classical puzzles , such as the 15-puzzle and rubik s cube .    in this survey </S>",
    "<S> we shall give an overview of some older and more recent work on this type of problem . </S>",
    "<S> the emphasis will be on the computational complexity of the problems : how hard is it to decide if a certain transformation is possible or not ? </S>"
  ]
}