{
  "article_text": [
    "complex software systems are among most sophisticated systems ever created by human .",
    "nevertheless , only little is known about the actual structure and quantitative properties of large software systems  @xcite .",
    "for instance , in the context of software engineering , one is interested in how good software looks like .",
    "commonly adopted approaches and techniques fail to give a comprehensive answer  @xcite , moreover , there is also a lack of a simple but yet rigorous framework for software analysis ( to our knowledge ) .",
    "the above dilemma was denoted _ software law",
    "_ problem  @xcite , which urges towards identifying ( physical ) laws obeyed by software systems that could be used in practical applications .",
    "networks possibly provide the most adequate framework for the analysis of the structure of complex systems like software projects .",
    "also , due to their simple and intelligible form , analysis of different networks has already provided several significant discoveries in the last decade  @xcite .",
    "note that the adoption of software networks is not novel  @xcite , however , network analysis is still only rarely used in software engineering .",
    "the main purpose of this study is thus to highlight different techniques developed in the field of network analysis , and to expose their use in software comprehension , development and engineering .",
    "we review most of the past work on different types of software networks , whereas we also include network analysis techniques proposed just recently  @xcite .",
    "( note that the main focus of the paper is merely a review , rather than a detailed comparison of network analysis techniques with other approaches . )",
    "the study in the paper analyses software networks on different levels of granularity .",
    "first , we address the macroscopic properties of software networks like scale - free and small - world phenomena  @xcite that are related to the structure and design of the entire project , or projects , represented by the network .",
    "second , we analyze the microscopic properties of individual nodes , with special emphasis on different dynamical processes occurring on software networks like bug propagation  @xcite .",
    "the above can be related to software quality , complexity , reusability , robustness , vulnerability and controllability .",
    "third , we also identify mesoscopic structural modules within software networks  @xcite and show their applicability in the context of software abstraction and refactoring .",
    "the paper thus exposes network analysis as a prominent set of techniques for software engineering .",
    "the rest of the paper is structured as follows .",
    "section  [ sec_nets ] introduces software networks used in the study .",
    "section  [ sec_ana ] analyzes different characteristics of adopted networks and discusses their use in software engineering .",
    "some applications of the presented techniques are given in  section  [ sec_appl ] , while section  [ sec_conc ] concludes the paper .",
    "[ cols=\"^ , < , > , > , > , > , > , > \" , ]      network module detection algorithms can also be applied for refactoring of software packages  @xcite .",
    "one can adopt a community detection algorithm to reveal highly modular structure ( figure  [ fig_ref ] ,  ( left ) ) or a functional module detection algorithm to identify the underlying functional structure ( figure  [ fig_ref ] ,  ( middle ) ) .",
    "general structural module detection algorithms partition software classes according to both modular and functional links that are present among the dependencies of the project ( figure  [ fig_ref ] ,  ( right ) ) .",
    "table  [ tbl_ca ]  shows classification accuracies for the prediction of software packages for the classes of different systems .",
    "let @xmath0 be a node corresponding to class @xmath1 .",
    "package of @xmath1 is then predicted to be the most likely package considering nodes within the same structural module as @xmath0 .",
    "the nodes are weighted according to jaccard similarity  @xcite , which is defined as @xmath2 , where @xmath3 is a similar node and @xmath4 is the neighborhood of node @xmath0 .",
    "structural modules are identified with the algorithm in  @xcite .    on average",
    ", one can predict software packages with @xmath5 probability for most classes of the systems considered , whereas complete package hierarchy can be precisely identified for over @xmath6 of the software classes ( table  [ tbl_ca ] ) .",
    "table  [ tbl_pind ] and table  [ tbl_cind ] show software project and class quality indicators identified in the study .",
    "indicators can be employed to assess project structure and design , code complexity and reusability , controllability and vulnerability , information flow , and other .",
    "due to space limitations , comparison with other approaches for measuring software quality is omitted ( e.g. , metrics of coupling and cohesion  @xcite ) .",
    "the paper conducts a comprehensive study of software networks constructed from java source code .",
    "first , we address macroscopic network properties that are related to structural design of the corresponding software project .",
    "next , we analyze the networks on a microscopic level of nodes , to highlight most influential and vulnerable software classes .",
    "last , we analyze mesoscopic network structural modules and expose their applicability in project refactoring . among other ,",
    "we show that software systems are highly vulnerable to processes like bug propagation , however , they are not easily controllable . on the other hand",
    ", java language can be controlled through merely @xmath7 of ` java ` namespace .",
    "we also identify several network - based quality indicators that can be employed to assess software project design , reusability , robustness , controllability and other .",
    "the study thus exposes network analysis as a prominent set of tools for software systems engineering .",
    "this work has been supported by the slovene research agency arrs within research program no .",
    "p2 - 0359 .",
    "g.  baxter , m.  frean , j.  noble , m.  rickerby , h.  smith , m.  visser , h.  melton , and e.  tempero .",
    "understanding the shape of java software . in _ proceedings of the acm international conference on object - oriented programming , systems , languages , and applications _ ,",
    "pages 397412 , 2006 .",
    "d.  hyland - wood , d.  carrington , and s.  kaplan .",
    "scale - free nature of java software package , class and method collaboration graphs . in _ proceedings of the international symposium on empirical software engineering _ , pages 110 , 2006 .",
    "g.  m. narayan , k.  gopinath , and v.  sridhar .",
    "structure and interpretation of computer programs . in",
    "_ proceedings of the ieee international symposium on theoretical aspects of software engineering _ , 2008 .",
    "l.  ubelj and m.  bajec .",
    "generalized network community detection . in _ proceedings of the ecml pkdd workshop on finding patterns of human behaviors in network and mobility data _ , pages 6684 , athens , greece , 2011 ."
  ],
  "abstract_text": [
    "<S> complex software systems are among most sophisticated human - made systems , yet only little is known about the actual structure of good software . </S>",
    "<S> we here study different software systems developed in java from the perspective of network science . </S>",
    "<S> the study reveals that network theory can provide a prominent set of techniques for the exploratory analysis of large complex software system . </S>",
    "<S> we further identify several applications in software engineering , and propose different network - based quality indicators that address software design , efficiency , reusability , vulnerability , controllability and other . </S>",
    "<S> we also highlight various interesting findings , e.g. , software systems are highly vulnerable to processes like bug propagation , however , they are not easily controllable .    [ complexity measures , performance measures , software science ] </S>"
  ]
}