{
  "article_text": [
    "an extractor is a deterministic procedure that extracts randomness from weak random sources .",
    "concerning finite strings there are two concepts of specifying this notion : statistical and algorithmical .",
    "the statistical one considers probability distributions on inputs and outputs of such procedure in terms of min - entropy . loosely speaking , to extract randomness means to produce a distribution with higher min - entropy than any input has .",
    "this notion was invented by nisan and zuckerman in early 90s and was deeply examined by many researchers through the last two decades .",
    "an introduction to the field is presented by shaltiel in  @xcite .",
    "an algorithmic counterpart , i.e. the notion of kolmogorov extractors , was invented in the last several years ( see  @xcite ,  @xcite and  @xcite ) .",
    "roughly speaking , a kolmogorov extractor is a function that receives two strings with sufficiently large kolmogorov complexity and sufficiently small dependency and outputs a sufficiently long string having complexity closer to its length than any input has .",
    "it was shown in  @xcite that there exists a deep connection between ordinary and kolmogorov extractors .",
    "namely , each ordinary extractor is a kolmogorov extractor with a bit worse parameters and vice versa . as shown in  @xcite and  @xcite",
    ", there also exist _",
    "strong _ kolmogorov extractors in a sense that the output is rather complex even being conditioned on any single input .",
    "the notion of kolmogorov extractors may be naturally expanded to space - bounded complexity , it was done already in the original paper  @xcite .",
    "the existence results of that paper hold both for common and space - bounded kolmogorov extractors . for the unbounded case these resuts were improved by zimand in  @xcite and  @xcite . in this paper we convert zimand s results to the space - bounded case and hence improve the respective results of fortnow et al .",
    "since zimand s construction is not efficient , this conversion can not be done straightforwardly .",
    "the technique we employ is the `` naive derandomization '' method introduced in  @xcite and  @xcite and later used in  @xcite and  @xcite .",
    "originally , zimand have characterized kolmogorov extractors by some combinatorial properties .",
    "the existence of an object with such properties was proven implicitly .",
    "we show that such an object may be found in the output of nisan - wigderson pseudo - random generator .",
    "that is , to find a required object one does not need to search through all possible objects but needs only to check all seeds of the generator .",
    "this crucially decreases the required space from exponential to polynomial .",
    "the rest of the paper is organized as follows . in sect .",
    "[ pre ] we give formal definitions of all involved objects and formulate necessary results . in sect .",
    "[ zimand ] we give formal definitions for space - bounded kolmogorov extractors , formulate our existence theorems , outline the proof idea and present detailed proofs .",
    "let @xmath0 be a two - argument turing machine .",
    "we refer to the first argument as to the `` program '' and to the second argument as to the `` argument '' .",
    "( plain ) kolmogorov complexity of a string @xmath1 conditioned on @xmath2 with respect to @xmath0 is the length of a minimal @xmath0-program @xmath3 that transforms @xmath2 to @xmath1 , i.e. @xmath4 there exists an optimal machine @xmath5 that gives the smallest complexity up to an additive term .",
    "specifically , @xmath6 .",
    "we employ such a machine @xmath5 , drop the subscript and formulate all theorems up to a constant additive term .",
    "the unconditional complexity @xmath7 is the complexity with empty condition @xmath8 , or the length of a shortest program _ producing _ @xmath1 .",
    "the next notion to be defined is resource - bounded kolmogorov complexity . loosely speaking , it is the length of a minimal program that transforms @xmath2 to @xmath1 efficiently . formally , kolmogorov complexity of a string @xmath1 conditioned on @xmath2 in time @xmath9 and space @xmath10 with respect to @xmath0 is the length of a shortest program @xmath3 such that @xmath11 outputs @xmath1 , works in @xmath9 steps and uses @xmath10 cells of memory .",
    "this complexity is denoted by @xmath12 . here",
    "the choice of @xmath0 alters not only complexity , but also time and space bounds .",
    "specifically , the following theorem holds :    there exist a machine @xmath5 such that for any machine @xmath0 there exists a constant @xmath13 such that for all @xmath1 , @xmath2 , @xmath10 and @xmath9 it is true that @xmath14 .    in our paper",
    "we deal only with space bounds , so we drop the time - bound superscript in all notations .",
    "a @xmath15-weak random source of length @xmath16 is a random variable distributed on @xmath17 that has min - entropy not less than @xmath15 , that is , any particular string occurs with probability not greater than @xmath18 .",
    "the statistical distance between two randomness distributions @xmath19 and @xmath20 on the same set @xmath21 is @xmath22 .    loosely speaking , a randomness extractor is a procedure that converts weak random sources to nearly uniform random sources .",
    "there are two common specifications of this notion : seeded extractor that gets a weak random source and a ( small ) truly random source and multi - source extractor that gets two weak random sources .",
    "the latter one is relevant to our paper , so we define it formally . a multi - source extractor with parameters (",
    "@xmath16 , @xmath23 , @xmath15 , @xmath24 ) is a function @xmath25 such that for any two independent @xmath15-weak random sources @xmath1 and @xmath2 the induced distribution @xmath26 is @xmath24-close to uniform .",
    "a multi - source extractor may be considered as a @xmath27 table with each cell coloured in one of @xmath28 colours .",
    "it may be proven that the extractor property is equivalent to the following : for any set of colours ( `` palette '' ) @xmath29 in any rectangle @xmath30 , where @xmath31 and @xmath32 the fraction of cells coloured in a colour from @xmath33 differs from @xmath34 by at most @xmath24 . yet another equivalent definition is the following : for any @xmath35 $ ] and any @xmath30 the fraction of cells coloured in @xmath36 most popular colours does not exceed @xmath37 .",
    "a balanced table is a combinatorial object considered by zimand in papers  @xcite ,  @xcite and  @xcite . in the last paper",
    "he has also introduced a slightly different object called rainbow balanced table . in some sense",
    "they are similar to multi - source extractors but use another notion of closeness of distributions . here we present alternative definitions that seem more comprehensive though equivalent to original ones .    a ( @xmath38,@xmath36)-balanced table is a function @xmath39 with the following property : in any rectangle @xmath30 , where @xmath31 and @xmath40 the fraction of cells coloured in @xmath36 most popular colours is less than @xmath41 . contrasting to multi - source extractors , this property is less restrictive for big palettes ( @xmath42 ) and more restrictive for small ones ( @xmath43 )",
    ".    in  @xcite zimand introduces a variation of the above - defined object named rainbow balanced table . here",
    "we present a bit different though equivalent definition of it .",
    "a ( @xmath38,@xmath36)-rainbow balanced table is a function @xmath44 with the following property .",
    "consider a rectangle @xmath30 where @xmath31 and @xmath40 .",
    "let us mark in each row all cells coloured in one of @xmath36 most popular colours of this row .",
    "call the table row - rainbow - balanced if the fraction of marked cells in any rectangle is less than @xmath41 .",
    "then do the same with columns and call the table column - rainbow - balaced if the fraction of marked cells is again less than @xmath41 . finally , call the table rainbow - balanced if it is both row- and column - rainbow - balaced .",
    "it was shown by the probabilistic argument that there exist balanced tables with @xmath45 and @xmath46 and rainbow balanced tables with @xmath47 and any @xmath36 .      the nisan - wigderson pseudo - random generator is a deterministic polynomal - time function that generates @xmath16 pseudo - random bits from @xmath48 truly random bits .",
    "the output of such generator can not be distinguished from truly random string by small circuits . specifically , we exploit the following theorem from  @xcite :    [ nw ] for any constant @xmath49 there exists a family of functions @xmath50 , where @xmath51 , such that two properties hold :    computability : : :    @xmath52 is computable in workspace    @xmath53 ( that is , any particular bit of    @xmath54 may be found in this space ) ; indistinguishability : : :    for any family of circuits @xmath55 of size    @xmath56 and depth @xmath49 for any    positive polynomial @xmath3 for all large enough    @xmath16 it holds that :    @xmath57    where @xmath1 is distributed uniformly in    @xmath58 and @xmath2   in    @xmath17 .    by rescaling parameters we get the following",
    "[ nw - modified ] for any constant @xmath49 there exists a family of functions @xmath59 , where @xmath60 and @xmath61 , such that two properties hold :    * @xmath52 is computable in polynomial workspace ; * for any family of circuits @xmath55 of size @xmath62 and depth @xmath49 , for any constant @xmath13 and for all large enough @xmath16 it holds that : @xmath63    the last corollary implies the following basic principle :    [ mainprinciple ] let @xmath64 be some set of combinatorial objects encoded by boolean strings of length @xmath65 .",
    "let @xmath66 be some property satisfied for fraction at least @xmath67 of objects in @xmath64 that can be tested by a family of circuits of size @xmath65 and constant depth .",
    "then for sufficiently large @xmath16 the property @xmath66 is satisfied for fraction at least @xmath68 of values of @xmath69 , where @xmath69 is the function from the previous corollary .",
    "it is well - known that constant - depth circuits can not compute the majority function .",
    "all the more they can not compute a general threshold function that equals @xmath70 if and only if the fraction of @xmath70 s in its input exceeds some threshold @xmath67 .",
    "nevertheless , one can build such circuits that compute threshold functions approximately .",
    "namely , the following theorem holds :    [ ajtai ] let @xmath71 .",
    "then for any ( constant ) @xmath24 there exists a constant - depth and polynomial - size circuit @xmath72 such that @xmath73 if the fraction of @xmath70 s in @xmath1 is less than @xmath74 and @xmath75 if the fraction of @xmath70 s in @xmath1 is greater than @xmath76 .    note",
    "that nothing is promised if the fraction of @xmath70 s is between @xmath74 and @xmath76 .",
    "so , the fact that @xmath77 guarantees only that the fraction of @xmath70 s is at most @xmath76 , and @xmath78   that it is at least @xmath74 .",
    "let us formally define a kolmogorov extractor .",
    "dependency between @xmath1 and @xmath2 is defined as @xmath79 .",
    "a computable function @xmath80 is a ( @xmath15 ,  @xmath81)-kolmogorov extractor if for any @xmath1 and @xmath2 of length @xmath16 if @xmath82 , @xmath83 and @xmath84 then @xmath85 .",
    "say that @xmath86 is a strong ( @xmath15 ,  @xmath81)-kolmogorov extractor if , moreover , @xmath87 and @xmath88 .",
    "let @xmath89 and @xmath90 be computable functions , such that @xmath91 and @xmath92 .",
    "then there exists a ( @xmath89 ,  @xmath90)-kolmogorov extractor for @xmath93 and a strong ( @xmath89 ,  @xmath90)-kolmogorov extractor for @xmath94 .",
    "we rewrite the definitions and the theorem in the case of space - bounded complexity .",
    "since the difference @xmath95 is not monotone in @xmath10 , we get rid of explicit usage of the term `` dependency '' .",
    "instead we say that a computable function @xmath86 is a ( @xmath15 ,  @xmath81)-kolmogorov extractor with a space bound @xmath96 if @xmath86 is computable in space @xmath97 and for some constant @xmath98 ( not dependent on @xmath1 , @xmath2 , @xmath15 , @xmath10 , but possibly dependent on @xmath86 ) if @xmath99 , @xmath100 , and @xmath101 then @xmath102 . if , moreover , @xmath103 and @xmath104 then the kolmogorov extractor is strong . and @xmath105 in our definition .",
    "] we increase the space limit from @xmath10 to @xmath105 in the definition of `` dependency '' since the space limit is determined up to a multiplicative constant dependent on the description method .",
    "we prove the following :    there exists a polynomial @xmath106 such that for any space - constructible function @xmath107 and any computable in space @xmath108 functions @xmath91 and @xmath92 there exists a ( @xmath89 ,  @xmath90)-kolmogorov extractor with space bound @xmath108 for @xmath93 and a strong ( @xmath89 ,  @xmath90)-kolmogorov extractor for @xmath94 .",
    "we show that a certain balanced table is in fact a kolmogorov extractor .",
    "the main idea is to obtain a contradiction between the hardness of @xmath109 and the simplicity of @xmath110 by employing the balancing property .",
    "let us come to more details .",
    "let @xmath111 , where @xmath13 is a constant to be determined later .",
    "take a ( @xmath112 , @xmath113)-balanced table @xmath114 .",
    "let @xmath115 , @xmath116 and @xmath117 .",
    "obviously , @xmath118 . by the balancing property ,",
    "the set @xmath119 contains less than @xmath120 cells coloured in a colour from @xmath33 , that is , in a colour with complexity less than @xmath121 .",
    "( if necessary , expand @xmath122 , @xmath123 and @xmath33 arbitrarily to obtain sets of required size and apply the balancing property ) .",
    "hence , @xmath109 may be described by the table @xmath21 , the sets @xmath122 , @xmath123 and @xmath33 , and the ordinal number of @xmath109 among cells in @xmath119 coloured in a colour from @xmath33 . by the balancing property",
    "the last number requires at most @xmath124 bits .",
    "the sets @xmath122 , @xmath123 and @xmath33 are described completely by @xmath16 , @xmath125 and @xmath126 and may be enumerated in space @xmath127 .",
    "if we obtain a table @xmath21 that has complexity @xmath128 and may be evaluated in space @xmath127 then we have @xmath129 that contradicts the assumption @xmath101 for @xmath130 and @xmath13 large enough .",
    "so , the crucial missing component is a simple and space - efficiently computable balanced table . without a space bound the existence of such table",
    "is proven by the probabilistic method and a simple table may be found by an exhaustive search : the first table in some canonical order has small complexity . having a space bound added the construction should be derandomized .    to get the strong kolmogorov extractor property",
    "we need to replace a balanced table by a rainbow balanced one with parameters ( @xmath112,@xmath131 ) where again @xmath111 .",
    "let @xmath132 be the set @xmath133 .",
    "obviously , @xmath134 .",
    "call a string @xmath135 _ bad _ if the fraction of cells in the row @xmath136 coloured in a colour from @xmath132 is greater than @xmath137 .",
    "the fraction of cells coloured in one of @xmath36 most popular colours is even greater , so there are less than @xmath38 bad rows , since otherwise the colouring of the rectangle @xmath138 contradicts the rainbow balancing property .",
    "if one could enumerate bad rows in space @xmath10 then all bad rows would have complexity at most @xmath15 and so @xmath2 would be a good row .",
    "if @xmath139 and @xmath2 is known then @xmath1 may be described by the table @xmath21 , sets @xmath122 and @xmath140 and the ordinal number of @xmath1 among all cells in the row @xmath2 coloured in a colour from @xmath140 .",
    "since @xmath2 is good the last number requires less than @xmath141 bits .",
    "the sets @xmath122 and @xmath140 are described completely by @xmath16 and @xmath125 and may be enumerated in space @xmath127 . finally ,",
    "if @xmath21 has complexity @xmath128 and may be evaluated in space @xmath127 then we obtain a contradiction similar to the previous one .",
    "the whole argument may be repeated symmetrically for the complexity conditioned on @xmath1 .",
    "as before , the crucial missing component is a simple and space - efficiently computable rainbow balanced table that also allows to enumerate space - efficiently `` bad '' rows and columns .",
    "we now turn to a high - level description of our derandomization method .      to derandomize the construction we use a `` naive '' idea of replacing a random construction by a pseudo - random one .",
    "this idea was originally presented in  @xcite and  @xcite .",
    "the essence of the idea is to replace a brute - force search among all possible objects by a brute - force search in the output of the nisan - wigderson pseudo - random generator . since the length of the seed is polylogarithmic in the size of the output the range of the search decreases crucially . to make the things work we should",
    ", firstly , prove that the necessary object exists among the output of the nw - generator and , secondly , prove that a good seed for the generator may be found efficiently . to prove the first thing we employ the basic principle  [ mainprinciple ] that involves a constant - depth circuit to test the balancing property .",
    "the original balancing properties seem to be too hard to be tested by such circuits , so we weaken them . specifically , for ordinary balanced tables we limit the balancing condition only to those rectangles and palettes being actually used in the proof . for rainbow balanced tables",
    "we go even further and directly specify the property used in the proof .",
    "details follow in the next several subsections . in sect .",
    "[ refinement ] we specify the weakening of the balancing property . in sect .",
    "[ existence ] we prove that a modified balanced table exists in the output of the nw - generator .",
    "next , in sect .",
    "[ searching ] we show how to find a good seed in limited space . finally , in sect .",
    "[ completion ] we put all things together and finish the proof .",
    "we do all steps simultaneously for balanced tables ( leading to kolmogorov extractors ) and rainbow balanced tables ( leading to strong kolmogorov extractors ) .",
    "recall that a table is a function @xmath114 .",
    "we refer to the first argument as to ` column ' , to the second one as to ` row ' and to the value as to ` colour ' .",
    "let @xmath142 be a positive number and @xmath143 and @xmath144 be some integers .",
    "let there be a system @xmath145 of pairs @xmath146 where @xmath147 is a subset of @xmath17 and @xmath148 $ ] such that for any pair the set @xmath147 contains less than @xmath149 elements and the whole system contains @xmath62 pairs .",
    "let there also be a system @xmath150 of subsets of @xmath151 ( i.e. , palettes ) such that any @xmath152 contains less than @xmath153 elements and the whole system contains @xmath62 sets .",
    "later we refer to sets in such systems as to _ relevant _ ones .",
    "say that a table @xmath21 is ( @xmath142 , @xmath150 , @xmath145)-balanced if for any @xmath154 and @xmath155 and for any @xmath152 the number of cells in @xmath30 coloured in a colour from @xmath36 is less than @xmath156 .",
    "if the sizes of @xmath157 and @xmath158 are maximal , @xmath36 is the set of @xmath153 most popular colours and @xmath159 then the bound matches the original one , i.e. the fraction of the popular colours is at most @xmath160 .",
    "the new parameter @xmath142 is introduced due to technical reasons and will be used in the next subsection .",
    "take in mind that @xmath161 .",
    "the definition of rainbow balanced tables is modified in a more complicated way : we again fix a number @xmath142 and a system @xmath145 . instead of a system @xmath150 of palettes we fix a system @xmath162 of tuples of palettes .",
    "here each palette contains less than @xmath153 elements , each tuple has length @xmath149 for some @xmath148 $ ] and the whole system contains @xmath62 tuples .",
    "take arbitrary sets @xmath157 and @xmath163 with corresponding @xmath164 and @xmath165 and a tuple @xmath166 .",
    "then for each @xmath167 $ ] mark those cells in @xmath168-th row of @xmath30 coloured in a colour from @xmath169 .",
    "say that a row is _ saturated _ if it contains more than @xmath170 marked cells .",
    "we say that a table @xmath21 is ( @xmath142 , @xmath162 , @xmath145)-row rainbow balanced if for any @xmath157 , @xmath158 and @xmath171 the total number of marked cells in saturated rows is less than @xmath172 .",
    "( in particular , there are less than @xmath112 saturated rows ) .",
    "we define a ( @xmath142 , @xmath162 , @xmath145)-column rainbow balanced table similarly and say that a table is ( @xmath142 , @xmath162 , @xmath145)-rainbow balanced if it is both ( @xmath142 , @xmath162 , @xmath145)-row and ( @xmath142 , @xmath162 , @xmath145)-column rainbow balanced .",
    "one may easily see that for @xmath173 our modifications actually do strictly weaken both balancing properties , so a random table satisfies a modified property with even greater probability than the original one .      to prove that a modified ( rainbow ) balanced table exists in the output of the nw - generator we employ the basic principle  [ mainprinciple ] .",
    "we present a constant - depth exponential circuit that tests the modified balancing property . by the basic principle ,",
    "since the generator fools such circuits and a random table satisfies the modified balancing property with positive probability , the same holds for a pseudo - random one .",
    "a construction of such a circuit follows .",
    "the modified balancing properties are tested rather straightforwardly .",
    "since we do not need to build a uniform circuit we just hardwire the lists of relevant sets into the circuit .",
    "that is , we construct a circuit for a particular tuple @xmath174 ( or @xmath175 ) , make @xmath62 copies of this circuit for different tuples and take a conjunction .",
    "the construction of such a circuit follows .",
    "it is rather easy to check whether a particular cell in @xmath30 is marked .",
    "indeed , we should check whether its colour coincides with one of those belonging to @xmath36 ( or @xmath169 ) and take the disjunction of all results .",
    "the difficult point is to count the number of marked cells and to compare this number to @xmath156 .",
    "( for rainbow balance we need to count marked cells in saturated rows and columns ) .",
    "this task can not be solved exactly by constant - depth circuits but may be solved approximately .",
    "fortunately , approximate solution is enough for our goal .",
    "we employ a circuit existing by theorem  [ ajtai ] .",
    "specifically , for ordinary balanced tables this curcuit has @xmath176 inputs , outputs 1 if there are less than @xmath177 ones among the inputs , outputs 0 if there are more than @xmath178 ones among the inputs and outputs any value otherwise . for rainbow balanced tables we use two such circuits",
    "firstly , we apply to every row a circuit with @xmath179 inputs that outputs 1 if there are less than @xmath180 ones among its inputs , outputs zero if there are more than @xmath181 ones and outputs any value otherwise . secondly , we count the number of ones in rows that produce one on the previous stage . to this end",
    ", we take conjunctions of the output of the previous circuit with the inpits and apply a circuit with @xmath176 inputs that returns 1 if it receives less than @xmath182 ones , returns 0 if it receives more than @xmath183 ones and returns any value otherwise .",
    "this construction is repeated for columns and a conjunction of two values is taken .",
    "the last subcircuit completes the description .",
    "let us sketch the structure of the whole circuit once more .",
    "the input specifies colours of all @xmath184 cells of the table .",
    "we also add constants for all possible colours from @xmath151 .",
    "the full circuit consists of @xmath62 identical blocks .",
    "each block has two groups of inputs .",
    "the left group specifies colours of all cells in a particular rectangle @xmath30 .",
    "the right group specifies a palette @xmath36 ( or a set of palettes @xmath171 ) .",
    "different blocks are hardwired to different inputs and constants .",
    "for ordinary balanced tables each block consists of two levels . on the first level",
    "a simple equivalence circuit is applied to every pair of a colour from the left and a colour from the right . on the second level",
    "an approximate counting circuit is applied to the outputs of the first level . for rainbow",
    "balanced tables each block consists of five levels . the first level is the same . on the second level",
    "an approximate counting circuit is applied to the outputs of the first level separately for each row and for each column . on the third a conjunction of the outputs of the first two levels",
    "is taken separately for each row and for each column . on the fourth level another approximate counting circuit",
    "is applied to the outputs of the third level , separately for rows and columns . on the fifth level a conjunction of two results of the fourth level",
    "finally , a conjunction is applied to outputs of all blocks .",
    "clearly , these circuits have exponential size and constant depth .",
    "it is also clear that these circuits return one on ( rainbow ) balanced tables .",
    "hence , they return one with positive probability on a random table . hence , they return one with positive probability on a pseudo - random table produced by the nw - generator . if the first ( resp .",
    ", second ) circuit returns one then the table is balanced ( resp . , rainbow balanced ) for parameter @xmath185 . in the next two subsections we specify the systems @xmath145 , @xmath150 and @xmath162 ,",
    "show how to find a good seed for the generator and how to use a @xmath186-balanced and @xmath186-rainbow balanced tables to obtain the result .",
    "until this point the construction was valid for any choice of the systems @xmath145 , @xmath150 and @xmath162 .",
    "the searching for a good seed can not be performed for arbitrary systems , so now we specify them .",
    "we take @xmath145 to be the system of all pairs @xmath187 for @xmath96 and @xmath148 $ ] .",
    "we take @xmath150 to be the system of all sets @xmath188 for @xmath96 and @xmath189 $ ] .",
    "finally , we take @xmath162 to be the system of all tuples @xmath190 where @xmath191 . clearly , the sizes of all sets , tuples and systems satisfy the requirements . since @xmath108 is space - constructible , the systems @xmath145 and @xmath150 are enumerable in space @xmath127 .",
    "it means that there exists an @xmath127-space algorithm that gets two numbers @xmath168 and @xmath192 and returns the @xmath168-th element of the @xmath192-th set in @xmath145 ( or @xmath150 ) .",
    "if one of the numbers is out of range the algorithm returns an error message .",
    "a similar statement holds for @xmath162 , here the enumerating algorithm gets three numbers : the number of the tuple , the number of the set in the tuple and the number of the element in the set .",
    "since we care only about space , the problem of searching a good seed is equivalent to the problem of checking whether a seed is good .",
    "the crucial property of nw - generator that makes such a check possible in small space is that any bit of the output may be computed in polynomial space independently from all other bits .",
    "that is , one need not store the whole exponential output to check some local property . a detailed description of such a check follows .",
    "after this point the constructions for ordinary and rainbow balanced tables are rather different .",
    "we start with the construction for ordinary tables .",
    "firstly , let us notice that a seed is good if and only if it is good for any tuple @xmath193 .",
    "so , it is sufficient to sequentially check that a seed is good for any such tuple .",
    "a tuple is determined by the ordinal numbers of @xmath154 and @xmath194 in the enumeration of @xmath145 and that of @xmath36 in the enumeration of @xmath150 .",
    "having these numbers fixed , we sequentially generate colours of all cells in @xmath30 and compare them to all colours in @xmath36 .",
    "count the number of successive comparisons .",
    "say that the tuple is good if this number is less than @xmath178 .",
    "since we are no more restricted to constant - depth circuits and may instead use any space - bounded computations the counting is made precisely . since @xmath145 and @xmath150 are enumerable in space @xmath127 , the generator uses another @xmath127 portion of space , only space @xmath195 is used for intermediate storage and @xmath10 is at least polynomial in @xmath16 , the total space requirement sums up to @xmath127 .",
    "for rainbow balanced tables we sequentially check that a seed is good for any tuple @xmath196 .",
    "the sets of palettes for row and column rainbow balanced properties are generated from @xmath157 and @xmath158 respectively : for each @xmath197 and @xmath198 we take @xmath199 and @xmath200 .",
    "the subsequent check is performed by direct counting , as in the previous algorithm .",
    "the difference is that the counting proceeds in two stages : for any row ( or column ) the number of marked cells is counted , then it is determined whether the row ( column ) is saturated and the numbers for saturated rows ( columns ) are summed up .",
    "the used space is again @xmath127 .",
    "firstly we check the kolmogorov extractor property .",
    "fix the extractor parameters @xmath201 , @xmath202 and @xmath96 .",
    "let @xmath111 where @xmath13 is a constant to be determined later and let @xmath203 .",
    "let @xmath3 be the seed found for parameters @xmath15 and @xmath204 in sect .  [ searching ] .",
    "we want to prove that @xmath205 is a ( @xmath15 , @xmath81)-kolmogorov extractor for space bound @xmath10 .",
    "firstly , note that it is computable in space @xmath127 : this space is enough both for finding @xmath3 and computing @xmath206 .",
    "secondly , let us prove the kolmogorov extractor property .",
    "take two strings @xmath1 and @xmath2 such that @xmath99 , @xmath100 and @xmath101 where @xmath130 does not depend on @xmath1 or @xmath2 and will be determined later . to obtain a contradiction",
    "assume that @xmath207 .",
    "denote @xmath208 and @xmath209 and consider the sets @xmath210 and @xmath211 .",
    "each of them is relevant by construction .",
    "denote @xmath212 .",
    "this set is also relevant . by the choice of @xmath3 the rectangle @xmath30 contains less than @xmath178 cells coloured in one of colours from @xmath36 . by the assumption and the definition of @xmath157 and @xmath158",
    ", the pair @xmath109 belongs to these cells . in this case",
    "@xmath109 may be described by @xmath16 , @xmath164 , @xmath165 , @xmath204 and the ordinal number of @xmath109 among these cells . indeed , having @xmath16 known we may find a good seed @xmath3 ; having @xmath164 , @xmath165 and @xmath204 known we may search through cells @xmath30 and check whether the current one has a colour from @xmath36 .",
    "the ordinal number specifies the needed cell .",
    "the total required space is @xmath127 .",
    "the total number of used bits is @xmath213 .",
    "so , we obtain @xmath214 that contradicts the condition @xmath215 for @xmath130 and @xmath13 taken large enough .    next , we check the strong kolmogorov extractor property .",
    "we again fix the extractor parameters @xmath15 , @xmath81 and @xmath10 . as before , let @xmath111 and @xmath203 .",
    "let @xmath3 be again the seed found for parameters @xmath15 and @xmath204 ( and the rainbow balancing property ) in sect .  [ searching ] .",
    "we want to prove that @xmath205 is a strong ( @xmath15 , @xmath81)-kolmogorov extractor for space bound @xmath10 .",
    "the computability in space @xmath127 is again easily obtained .",
    "prove the strong kolmogorov extractor property .",
    "take two strings @xmath1 and @xmath2 such that @xmath216 , @xmath217 and @xmath218 where @xmath130 does not depend on @xmath1 or @xmath2 and will be determined later . to obtain a contradiction",
    "assume that @xmath219 .",
    "thus , the cell @xmath109 is marked .",
    "consider two cases : there are more than @xmath220 strings @xmath221 such that @xmath222 and there are not more than @xmath220 such strings . in the first case the row @xmath2 contains more than @xmath181 marked cells and thus is saturated . by the @xmath186-rainbow balancing property",
    "the total number of marked cells in saturated rows is less than @xmath223 .",
    "then @xmath109 may be described in space @xmath127 by its ordinal number among marked cells in saturated rows and numbers @xmath16 , @xmath164 , @xmath165 , @xmath204 .",
    "thus for large enough @xmath130 and @xmath13 the complexity of @xmath109 is less than @xmath224 that contradicts the assumption . in the second case",
    "the pair @xmath109 may be described by a description of @xmath2 ( @xmath165 bits ) , the ordinal number of @xmath109 among marked cells ( @xmath225 bits ) and numbers @xmath16 , @xmath164 , @xmath165 , @xmath204 ( @xmath128 bits ) , totaling to @xmath213 bits .",
    "the required space is @xmath127 , so we obtain a similar contadiction to the assumption that @xmath218 for large enough @xmath130 and @xmath13 .",
    "this contradiction finishes the proof .",
    "i want to thank my colleagues and advisors andrei romashchenko , alexander shen and nikolay vereshchagin for stating the problem and many useful comments .",
    "i also want to thank two anonymous referees for careful reading and precise comments .",
    "i am grateful to participants of seminars in moscow state university for their attention and thoughtfulness .",
    "l. fortnow , j. hitchcock , a. pavan , n.v .",
    "vinodchandran , and f. wang .",
    "extracting kolmogorov complexity with applications to dimension zero - one laws . _ information and computation _ , 209(4):627636 , april 2011 .",
    "( preliminary version appeared in proceedings of the 33rd international colloquium on automata , languages , and programming .",
    ". 335345 .",
    "springer - verlag lecture notes in computer science , vol .",
    "4051 , berlin , 2006 )      d.  musatov , improving the space - bounded version of muchnik s conditional complexity theorem via `` naive '' derandomization , in : a.  kulikov , n.  vereshchagin ( eds . )",
    "lecture notes in computer science , vol . 6651 , pp .",
    "6476 ( 2011 )            m.  zimand .",
    "two sources are better than one for increasing the kolmogorov complexity of infinite sequences . in : hirsch ,",
    "e.a . , razborov , a.a . ,",
    "semenov , a.l . , slissenko , a. ( eds . )",
    "lecture notes in computer science , vol . 5010 , pp .",
    "326338 ( 2008 )          m.  zimand .",
    "symmetry of information and bounds on nonuniform randomness extraction via kolmogorov extractors , 26th ieee conference in computational complexity , pp .",
    "148156 , june 810 , 2011 , san jose , california ."
  ],
  "abstract_text": [
    "<S> an extractor is a function that receives some randomness and either `` improves '' it or produces `` new '' randomness . </S>",
    "<S> there are statistical and algorithmical specifications of this notion . </S>",
    "<S> we study an algorithmical one called kolmogorov extractors and modify it to resource - bounded version of kolmogorov complexity . </S>",
    "<S> following zimand we prove the existence of such objects with certain parameters . </S>",
    "<S> the utilized technique is `` naive '' derandomization : we replace random constructions employed by zimand by pseudo - random ones obtained by nisan - wigderson generator . </S>"
  ]
}