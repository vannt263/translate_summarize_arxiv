{
  "article_text": [
    "we introduce and study problems that are generically in @xmath0 , i.e. , decision problems that have partial errorless nondeterministic decision algorithms that solve the problem in polynomial time on `` most '' inputs .",
    "we define appropriate reductions in this class and show that there are some complete problems there , called _ strongly generically @xmath0-complete _ problems .",
    "in particular , the randomized bounded version of the halting problem is one of them .",
    "rigorous formulation of notions of generic algorithms and generic complexity appeared first in group theory @xcite as a response to several challenges that algorithmic algebra faced at that time .",
    "first , it was well understood that many hard , even undecidable , algorithmic problems in groups can be easily solved on most instances ( see @xcite for a thorough discussion ) .",
    "second , the study of random objects and generic properties of objects has become the mainstream of geometric group theory , following the lead of graph and number theory ( see @xcite ) .",
    "it turned out that `` random '' , `` typical '' objects have many nice properties that lead to simple and efficient algorithms .",
    "however a rigorous formalization of this approach was lagging behind .",
    "algorithmic algebra was still focusing mostly on the worst - case complexity with minor inroads into average case complexity .",
    "third , with the rapid development of algebraic cryptography the quest for natural algorithmic problems , which are hard on most inputs , became one of the main subjects in complexity theory ( see discussion in @xcite ) .",
    "it was realized that the average case complexity does not fit well here .",
    "indeed , by definition , one can not consider average case complexity of undecidable problems , which are in the majority in group theory ; the proofs of average case results are usually difficult and technical @xcite , and , most importantly , there are problems that are provably hard on average but easy on most inputs ( see @xcite for details ) .",
    "in fact , gurevich showed in @xcite that the average case complexity is not about `` most '' or `` typical '' instances , but that it grasps the notion of `` trade - off '' between the time of computation on hard inputs and how many of such hard instances are there . nowadays ,",
    "generic algorithms form an organic part of computational algebra and play an essential role in practical computations .    in a surprising twist generic algorithms and ideas of generic complexity",
    "were recently adopted in abstract computability ( recursion theory ) .",
    "there is interesting and active research there concerning absolutely undecidable problems , generic turing degrees , coarse computability , etc . , relating generic computation with deep structural properties of turing degrees @xcite .",
    "we decided to relativize these ideas to lower complexity classes . here",
    "we consider the class @xmath0 .",
    "motivation to study generically hardest problems in the class @xmath0 comes from several areas of mathematics and computer science .",
    "first , as we have mentioned above , average case complexity , even when it is high , does not give information on the hardness of the problem at hand on the typical or generic inputs .",
    "therefore , to study hardness of the problem on most inputs one needs to develop a theory of generically complete problems in the class @xmath0 .",
    "this is interesting in its own right , especially when much of activity in modern mathematics focuses on generic properties of mathematical objects and how to deal with them . on the other hand , in modern crypotography",
    ", there is a quest for cryptoprimitives which are computationally hard to break on most inputs",
    ". it would be interesting to analyze which @xmath0-problems are hard on most inputs , i.e. , which of them are generically @xmath0-complete .",
    "note , there are @xmath0-complete problems that are generically polynomial @xcite .",
    "all this requires a robust theory of generic @xmath0-completeness . as the first attempt to develop such a theory we study here the class of all generically @xmath0-problems , their reductions , and the complete problems in the class .",
    "most of the time , our exposition follows the seminal gurevich s paper @xcite on average complexity .",
    "we conclude with several open problems that seem to be important for the theory .    here",
    "we briefly describe the structure of the paper and mention the main results . in section [ se : preliminaries ] , we recall some notions and introduce notation from the classical decision problems . in section [",
    "se : generic ] , we discuss distributional decision problems ( when the set of instances of the problem comes equipped with some measure ) , then define the generic complexity and problems decidable generically ( strongly generically ) in polynomial time .",
    "in section [ se : reductions ] , we define generic polynomial time reductions . in section [ se : disthp ] , we show that the distributional bounded halting problem for turing machines is strongly generically @xmath0-complete .",
    "notice that though generic ptime randomized algorithms are usually much easy to come up with ( than say ptime on average algorithms ) , the reductions in the class of generic @xmath0-problems are still as technical as reductions in the class of @xmath0-problems on average .",
    "in fact , the reductions in both classes are similar . essentially , these are reductions among general randomized problems and the main technical , as well as theoretical , difficulty concerns the transfer of the measure when reducing one randomized problem to another one .",
    "it seems this difficulty is intrinsic to reductions in randomized computations and does not depend on whether we consider generic or average complexity . in section [",
    "se : problems ] we discuss some open problems that seem to be important for the development of the theory of generic @xmath0-completeness .",
    "in this section we introduce notation to follow throughout the paper .      informally , a _ decision problem _ is an arbitrary yes - or - no question for an ( infinite ) set of _ inputs _ ( or _ instances _ ) @xmath1 , i.e. , an unary predicate @xmath2 on @xmath1 .",
    "the problem is termed _ decidable _ if @xmath2 is computable , and the main classical question is whether a given problem is decidable or not . in complexity",
    "theory the predicate @xmath2 usually is given by its true set @xmath3 , so the decision problem appears as a pair @xmath4 .",
    "furthermore , it is assumed usually that every input @xmath5 admits a finite description in some finite alphabet @xmath6 in such a way that given a word @xmath7 one can effectively determine if @xmath8 or not .",
    "this allows one , without loss of generality , to assume simply that @xmath9 .",
    "some care is required when dealing with distributional problems and we discuss this issue in due course . from now on , unless said otherwise , we assume that decision problems are pairs @xmath10 , where @xmath11 . in this case",
    "@xmath6 is the _ alphabet _ of the problem @xmath12 and we denote it sometimes by @xmath13 ; @xmath14 is the set of _ inputs _ or the _ domain _ of @xmath12 ; the set @xmath15 is the _ yes _ or _ positive _ part of @xmath12 , denoted sometimes by @xmath16 or @xmath17 . in section [ subsec : restrictions ]",
    "we briefly consider problems of the type @xmath4 , where @xmath18 , not assuming that @xmath1 is a decidable subset of @xmath19 .",
    "it is natural now to define the _ size _ of @xmath20 to be its word length @xmath21 . as usual , we define the sphere @xmath22 of radius @xmath23 as the set of all strings ( words ) in @xmath19 of size @xmath24 , and @xmath25 . for a symbol @xmath26 and @xmath27 put @xmath28 to be the string of @xmath24 symbols @xmath29 .",
    "we assume that alphabet @xmath6 comes equipped with a fixed linear ordering .",
    "this allows one to introduce a _ shortlex _ ordering @xmath30 on the set @xmath19 as follows .",
    "we order , first , the words in @xmath19 with respect to their length ( size ) , and if two words have the same length then we compare them in the ( left ) lexicographical ordering .",
    "the successor of a word @xmath20 is denoted by @xmath31 .      in this section",
    "we recall the definition of a turing machine in order to establish terminology .",
    "a one - tape _ turing machine _ ( tm ) @xmath32 is a @xmath33-tuple @xmath34 where :    * @xmath35 is a finite set of _ states _ ; * @xmath36 is a finite set called the _ tape alphabet _ which contains at least @xmath37 symbols ; * @xmath38 is the _ initial state _ ; * @xmath39 is the _ final state _ ; * @xmath40 is the _ transition relation_.    additionally , @xmath32 uses a _ blank symbol _ @xmath41 different from the symbols @xmath6 to mark the parts of the infinite tape not in use .",
    "this is the only symbol allowed to occur on the tape infinitely often at any step during the computation .",
    "we say that a transition relation @xmath42 in the definition of a tm is _ deterministic _",
    "if for every pair @xmath43 there is a unique five - tuple @xmath44 in @xmath42 , i.e. , @xmath42 defines a function @xmath45 .",
    "we say that a tm @xmath32 is _ deterministic _ if its transition relation is .",
    "otherwise we say that @xmath32 is a nondeterministic machine ( ntm ) .",
    "each turing machine has a _ tape _ with @xmath46-symbols written on it , a _ head _ specifying a position on the tape , and a _ state register _ containing an element @xmath47 .",
    "we say that the head observes a symbol @xmath48 , if @xmath29 is written on the tape at the position specified by the head .",
    "if a tm @xmath32 is in the state @xmath49 and observes a symbol @xmath50 , then to perform a step of computations :    * @xmath32 chooses any element @xmath51 ; * puts @xmath52 into the state register ; * writes @xmath53 on the tape to the head position ; * moves the head to left or to the right depending on @xmath54 .",
    "if @xmath42 contains no tuple @xmath55 , then we say that @xmath32 _",
    "breaks_.    we can define the operation of a tm formally using the notion of a configuration that contains a complete description of the current state of computation .",
    "a _ configuration _ of @xmath32 is a triple @xmath56 where @xmath57 are @xmath6-strings and @xmath58 .",
    "* @xmath59 is a string to the left of the head ; * @xmath60 is the string to the right of the head , including the symbol scanned by the head ; * @xmath49 is the current state .",
    "we say that a configuration @xmath56 _ yields _ a configuration @xmath61 in one step , denoted by @xmath62 if a step of a machine from configuration @xmath56 results in configuration @xmath61 .",
    "note that if the machine is nondeterministic , then a configuration can yield more than one configuration . using the relation `` yields in one step ''",
    "one can define relations `` yields in @xmath63 steps '' , denoted by @xmath64 and `` yields '' , denoted by @xmath65    we say that @xmath32 _ halts _ on @xmath20 if the configuration @xmath66 yields a configuration @xmath67 for some @xmath6-strings @xmath59 and @xmath60 .",
    "the number of steps @xmath32 takes to stop on a @xmath6-string @xmath68 is denoted by @xmath69 .",
    "if @xmath32 does not halt on @xmath20 then we put @xmath70 .",
    "the _ halting problem _ for @xmath32 is an algorithmic question to determine whether @xmath32 halts or not on an input @xmath71 , i.e. , whether @xmath72 or not .",
    "we say that a tm @xmath32 _ solves _ or _ decides _ a decision problem @xmath12 over an alphabet @xmath6 if @xmath32 stops on every input @xmath20 with an answer :    * @xmath73 ( i.e. , at a configuration @xmath74 , where @xmath59 starts with @xmath75 ) if @xmath76 ; * @xmath77 ( i.e. , at configuration @xmath74 , where @xmath59 starts with @xmath78 ) otherwise .",
    "we say that @xmath32 _ partially decides _",
    "@xmath12 if it decides @xmath12 correctly on a subset @xmath79 of @xmath12 and on @xmath80 it either does not stop or stops with an answer @xmath81 ( i.e. , stops at configuration @xmath74 , where @xmath59 starts with @xmath82 ) . in the event when @xmath32 breaks or outputs @xmath81 the value of @xmath69 is @xmath83 .      for a function @xmath84 define @xmath85 [ @xmath86 resp . ]",
    "to be the class of all decision problems decidable by some deterministic [ nondeterministic resp .",
    "] turing machine within time @xmath87 .",
    "two of the most used classes of decision problems @xmath88 and @xmath89 are defined as follows : @xmath90 clearly @xmath91 . it is an old , open problem whether @xmath92 or not .    the classical _ polynomial time many - to - one _ or _ karp reductions _ provide a crucial tool to deal with problems in @xmath0 .",
    "we recall it in the following definition and refer to them simply as to ptime reductions .",
    "let @xmath93 and @xmath94 be decision problems .",
    "we say that a function @xmath95 is a _ ptime reduction _ , or @xmath96 _ ptime reduces _",
    "@xmath93 to @xmath94 , and write @xmath97 , if    * @xmath96 is polynomial time computable ; * @xmath98 if and only if @xmath99 .",
    "we say that a ptime reduction @xmath96 is _ size - invariant _ if @xmath100 notice , that many classical ptime reductions are size - invariant ( see @xcite ) .",
    "now , for a size - invariant reduction @xmath96 the function @xmath101 is well defined and strictly increasing .",
    "we refer to @xmath102 as the _ size growth _ of @xmath96 .    a problem @xmath103 is called _ @xmath0-complete _ if every problem @xmath104 is ptime reducible to @xmath12 .",
    "the following is a classic result in complexity theory ( see @xcite ) .",
    "[ th : np_compl ] the following holds .    1 .",
    "if @xmath96 is a ptime reduction from @xmath93 to @xmath94 and @xmath32 is an turing machine solving @xmath94 in polynomial time then @xmath105 solves @xmath93 in polynomial time . 2 .",
    "3sat is @xmath0-complete .    here , and below",
    ", by @xmath105 we denote the algorithm that is a composition of the tm @xmath32 and a tm that computes @xmath96 .",
    "let us first recall some basic definitions of probability theory that will be used in this section .",
    "a _ probability measure _ on @xmath19 is a function @xmath106 $ ] satisfying @xmath107 .",
    "ensemble of probability measures _ on @xmath19 is a collection of sets @xmath108 of @xmath19 ( not necessarily disjoint ) and a collection of probability measures @xmath109 satisfying @xmath110 and @xmath111 .",
    "spherical ensemble of probability measures _ on @xmath19 is an ensemble with @xmath112 . in particular ,",
    "a spherical ensemble of probability measures on @xmath19 is uniquely defined by a collection of measures @xmath113 satisfying @xmath114 .",
    "the average case complexity deals with `` expected '' running time of algorithms , while the generic case complexity deals with `` most typical '' or _",
    "generic _ inputs of a given problem @xmath115 . these require to measure or compare various subsets of inputs from @xmath19 .",
    "there are several standard ways to do so , for example , by introducing either a probability measure @xmath116 on @xmath19 ( as was done in @xcite ) , or an _ ensemble _ of probability measures defined on spheres or balls of @xmath19 ( see @xcite ) . in many cases ,",
    "all three approaches are equivalent and lead to similar results . following the current tradition in computer science ,",
    "we elect here to work with a _ spherical _ ensemble @xmath117 of probability measures @xmath118 defined on the spheres @xmath22 . in",
    "what follows , we always assume that @xmath6 is a finite alphabet and every measure @xmath118 from the ensemble @xmath116 is atomic , i.e. , it is given by a probability function ( which we denote again by @xmath118 ) @xmath119 so that @xmath120 for every subset @xmath121 .",
    "the pair @xmath122 is termed a _",
    "distributional space_. whether @xmath118 is a probability measure or the corresponding probability function will be always clear from the context , so no confusion should arise .",
    "we want to stress here that generic properties of a given decision problem depend on the chosen ensemble @xmath116 and @xmath116 is an essential part of the problem ( see @xcite for details ) .",
    "a _ distributional decision problem _ is a triple @xmath123 , where @xmath124 is a decision problem and @xmath122 a distributional space .",
    "usually we refer to a distributional problem @xmath123 as a pair @xmath125 , where @xmath124 .",
    "there are two important constructions on distributional spaces , introduced in @xcite .",
    "since we use here ensembles of distributions , unlike @xcite , where single measures were used , we give below precise definitions .",
    "notice , that we always assume that @xmath126 if @xmath127 .",
    "let @xmath6 and @xmath128 be finite alphabets , @xmath122 and @xmath129 distributional spaces , and @xmath130 a size - invariant function . then @xmath131 is the @xmath96-_transfer _ of @xmath116 ( or @xmath96 transfers @xmath116 to @xmath131 ) if for any @xmath132 the following equality holds @xmath133    [ induced ensembles ] let @xmath122 be a distributional space and @xmath134 .",
    "then an ensemble @xmath135 on @xmath19 is called @xmath136-induced by @xmath116 if for any @xmath71 the following equality holds @xmath137      let @xmath122 be a distributional space and @xmath138 .",
    "the function @xmath139 is called the _ density function _ of @xmath136 and its limit ( if exists ) @xmath140 is called the _ asymptotic density _ of @xmath136 in @xmath122 .",
    "a subset @xmath134 is called    * _ generic _ in @xmath19 if @xmath141 ; * _ strongly generic _ in @xmath19 if @xmath141 and @xmath142 converges to @xmath143 super polynomially fast , i.e. , @xmath144 for any @xmath145 ; * _ negligible _ in @xmath19 if @xmath146 ; * _ strongly negligible _ in @xmath19 if @xmath146 and @xmath142 converges to @xmath147 super polynomially fast , i.e. , @xmath148 for any @xmath145 .",
    "notice that we use the term `` generic '' in the sense of `` typical '' .",
    "the same term has also been used in complexity and set theory to refer to sets that are far from typical , that are constructed through cohen forcing .    [ de : generic_poly ] let @xmath149 be a distributional decision problem .    * we say that @xmath149 is _ decidable generically in polynomial time _ ( or _ gptime decidable _ ) if there exists a turing machine @xmath32 that partially decides @xmath12 within time @xmath69 and a polynomial @xmath150 such that @xmath151 in this case we say that @xmath32 is a generic polynomial time decision algorithm for @xmath12 and @xmath12 has _",
    "generic time complexity _ at most @xmath152 .",
    "* we say that @xmath149 is _ decidable strongly generically in polynomial time _ ( or _ sgptime decidable _ ) if there exists a turing machine @xmath32 that partially decides @xmath12 within time @xmath69 and a polynomial @xmath150 such that for any polynomial @xmath153 @xmath154 in this case , we say that @xmath32 is a strongly generic polynomial time decision algorithm for @xmath12 and @xmath12 has",
    "_ strong generic time complexity _ at most @xmath152 .",
    "we refer to the sequence @xmath155 as a _ control sequence _ of the algorithm @xmath32 relative to the complexity bound @xmath156 and denote it by @xmath157 .    in other words ,",
    "a problem @xmath149 is gptime ( sgptime ) decidable if there exists a polynomial time tm that partially decides @xmath12 and its halting set is generic ( strongly generic ) in @xmath158 .      in this section",
    "we recall the notion of a distributional @xmath0-problem , which is a distributional analog of the classical @xmath0-problems .",
    "[ ptime computable real - valued function ] a function @xmath159 $ ] is _ computable in polynomial time _ if there exists a polynomial time algorithm that for every @xmath71 and @xmath160 computes a binary fraction @xmath161 satisfying @xmath162    [ ptime computable ensembles of probability measures ] we say that a spherical ensemble of measures @xmath163 on @xmath19 is ptime computable if the function @xmath164 $ ] defined by @xmath165 is ptime computable .",
    "denote by @xmath166 the ensemble of probability _ distributions _ defined by @xmath167 as above , the ensemble @xmath168 is called ptime computable if the function @xmath169 is ptime computable .",
    "[ le : s - induced ] let @xmath122 be a distributional space .",
    "then the following hold :    * if @xmath168 is ptime computable then @xmath116 is ptime computable .",
    "* if @xmath136 is a subset of @xmath19 such that the function @xmath170 is ptime computable then the @xmath136-induced on @xmath19 ensemble of measures @xmath171 is ptime computable",
    ".    follows directly from definitions .",
    "@xmath172 is a class of distributional decision problems @xmath149 such that    * @xmath103 ; * @xmath173 is a ptime computable ensemble of probability distributions on @xmath14 .",
    "@xmath174 is the class of gptime decidable distributional decision problems ( not necessarily from @xmath172 ) .",
    "@xmath175 is the class of sgptime decidable distributional decision problems .",
    "we want to point out that classes @xmath174 and @xmath175 contain some exotic problems , e.g. , some undecidable problems . for more information see @xcite .",
    "in this section we introduce the notion of a _ generic polynomial reduction _ and describe two particular types of reductions , called size and measure reductions .",
    "observe first that the classical karp reductions do not work for generic complexity . indeed , the following example shows that a ptime reduction @xmath176 and a generic polynomial time decision algorithm for @xmath177 do not immediately provide a generic polynomial time decision algorithm for @xmath12 .",
    "[ ex : gen - red ] let @xmath178 be a binary alphabet and @xmath116 the spherical ensemble of uniform measures @xmath118 on @xmath22 . let @xmath179 be a monoid homomorphism defined by @xmath180 now , for a decision problem @xmath115 consider a decision problem @xmath181 .",
    "it follows from the construction that @xmath182 is a ptime reduction and @xmath183 , provided @xmath103 .",
    "furthermore , it is easy to check that the set @xmath184 , as well as @xmath185 , is strongly negligible in @xmath122 .",
    "this implies that a partial algorithm @xmath186 that on an each input from @xmath187 says `` no '' and does halt on @xmath184 , is a strongly generic polynomial time decision algorithm for @xmath188 .",
    "nevertheless , @xmath186 does not reveal any useful information on @xmath12 .",
    "let @xmath189 and @xmath190 a ptime size - invariant reduction .",
    "* we say that @xmath96 is a _ weak gptime reduction _ if there exists a tm @xmath32 , which gptime decides @xmath191 and @xmath192 gptime decides @xmath149 . *",
    "we say that @xmath96 is an _ gptime reduction _ if for every tm @xmath32 , which gptime decides @xmath191 the composition @xmath192 gptime decides @xmath149 . *",
    "we say that @xmath96 is an _ sgptime reduction _ if for every tm @xmath32 , which sgptime decides @xmath191 the composition @xmath192 sgptime decides @xmath149 .",
    "we give examples of sgptime reductions in the next two sections .",
    "one can introduce reductions @xmath190 of a more general type by allowing the function @xmath96 to be defined only on a generic ( strongly generic ) subset @xmath193 of @xmath14 with the polynomial time computable characteristic function @xmath194 .",
    "the classes of all gptime and sgptime reductions are closed under composition",
    ".    follows directly from the definitions .",
    "it is not known if the class of weak gptime reductions is transitive .",
    "let @xmath149 be a distributional decision problem .",
    "we say that    * @xmath149 is _ sgptime hard _ for @xmath172 if every @xmath172 problem sgptime reduces to @xmath149 . * @xmath149 is _ sgptime complete _ for @xmath172 if @xmath195 and @xmath149 is _ sgptime hard _ for @xmath172 .      in this section ,",
    "we introduce _ change of size _ ( cs ) reductions .",
    "[ de : cs ] let @xmath196 and @xmath190 a ptime size - invariant reduction of @xmath12 to @xmath177 . if @xmath131 is the @xmath96-transfer by @xmath116 ( see section [ subsec : dist ] ) then @xmath96 is called a _ cs - reduction_.     in this example @xmath191 is obtained from @xmath149 by increasing the sizes of elements . ]",
    "[ le : cs ] let @xmath196 and @xmath197 a cs - reduction . if @xmath102 is bounded by a polynomial , then @xmath96 is a gptime and sgptime reduction .",
    "let @xmath186 be an algorithm that generically decides @xmath191 within a polynomial time upper bound @xmath198 .",
    "then @xmath199 is a partial decision algorithm for @xmath149 .",
    "since @xmath131 is induced by @xmath116 , one has : @xmath200 observe , that @xmath201 is polynomially bounded , since @xmath102 and @xmath202 are polynomially bounded . clearly , the control sequence @xmath203 is at most @xmath204 .",
    "notice , that @xmath204 is an infinite subsequence of @xmath205 ( because @xmath102 is strictly increasing ) , hence it converges to @xmath147 , so @xmath206 is a generic upper bound for @xmath199 .",
    "this proves the first statement of the theorem .    to prove the second statement ,",
    "assume that @xmath191 is sgptime decidable by @xmath186 within a polynomial time @xmath156 .",
    "then for the control sequence @xmath205 one has @xmath207 for any positive integer @xmath63 . due to the inequalities above",
    ", the control sequence for @xmath208 with respect to the polynomial bound @xmath206 satisfies the following inequality @xmath209 hence @xmath210 is sgptime decidable by @xmath208 , as claimed .    by theorem [ le : cs ]",
    "a cs - reduction generally increases time complexity and improves control sequence .      in this section , we define _ change of measure _ ( cm ) reductions .    [ de : cm - red ] let @xmath196 and @xmath190 a ptime reduction such that    * @xmath211 for any @xmath212 ; * there exists a polynomial @xmath54 such that for each @xmath212 @xmath213    then",
    "@xmath96 is called a _ cm - reduction_.    figure [ fi : measure_reduction ] depicts the situation under consideration .",
    "scheme of a cm - reduction .",
    "a function @xmath96 maps a distributional decision problem @xmath149 into a distributional decision problem @xmath191 so that the @xmath214th sphere in @xmath12 is mapped exactly into the @xmath214th sphere in @xmath177 .",
    "the grey part of @xmath177 depicts the image of @xmath12 . ]",
    "[ le : cm ] let @xmath196 and @xmath215 a cm - reduction .",
    "then the following holds .    *",
    "if @xmath191 is decidable by a tm @xmath186 within a generic polynomial time bound @xmath156 and @xmath216 ( where @xmath217 is the function from definition [ de : cm - red ] ) then @xmath199 gptime decides @xmath149 .",
    "* @xmath96 is an sgptime reduction .",
    "\\(a ) let @xmath186 be an algorithm that generically decides @xmath191 within a polynomial time upper bound @xmath198 .",
    "then @xmath199 is a partial decision algorithm for @xmath149 .",
    "recall , that @xmath96 preserves the size .",
    "therefore , @xmath199 decides @xmath12 within the polynomial time bound @xmath218 everywhere , except , maybe , a subset @xmath219 to prove the statement it suffices to show that the set above is generic in @xmath220 .",
    "@xmath221 ( b ) if an algorithm @xmath186 sgptime decides @xmath191 then @xmath222 for any polynomial @xmath49 .",
    "therefore , by part 1 ) , @xmath223 for every polynomial @xmath49 . in particular",
    ", for @xmath224 one has @xmath225 for any polynomial @xmath226 , as required .      in this section",
    "we show that each @xmath172 problem over a finite alphabet @xmath6 can be reduced to a @xmath172 problem over a binary alphabet @xmath227 .",
    "[ th : bin_alph ] let @xmath149 be an @xmath172 problem over a finite alphabet @xmath6 . then there exists a @xmath172 problem @xmath191 over the binary alphabet @xmath227 and a cs - reduction @xmath190 with linear size function @xmath102 .",
    "suppose that @xmath228 is an one - letter alphabet .",
    "let @xmath229 be a monoid homomorphism defined by @xmath230 .",
    "put @xmath231 and @xmath232 .",
    "define a spherical ensemble of measures @xmath131 on @xmath233 to be @xmath234 clearly , @xmath235 and @xmath96 is a cs - reduction with linear size - growth function @xmath102 . by theorem [ le : cs ] , @xmath96 is an sgptime reduction .",
    "suppose that @xmath236 , where @xmath237 .",
    "define a function @xmath96 as follows .",
    "put @xmath238 and , if @xmath239 and @xmath68 is the @xmath63th element in @xmath22 ( in the lexicographical order ) , then @xmath96 maps @xmath68 into the @xmath63th element of @xmath240 .",
    "as above , we put @xmath231 .",
    "let @xmath131 be the @xmath96-transfer of @xmath116 .",
    "the problem @xmath191 belongs to @xmath172 because @xmath195 and @xmath96 is a ptime reduction .",
    "clearly , @xmath96 is a cs - reduction with a linear size - growth function @xmath241 . by theorem [ le : cs ]",
    ", @xmath96 is an sgptime reduction .",
    "let @xmath242 be a problem and @xmath243 . in this section",
    "we consider the restriction @xmath244 of @xmath12 to the subset @xmath136 .",
    "intuitively , @xmath244 is the same problem as @xmath12 , only the set of inputs is restricted to @xmath136 .",
    "the most natural formalization of @xmath244 would be @xmath245 , allowing the domain @xmath136 not equal to @xmath14 , contrary to our assumption on algorithmic problems . in this case",
    "one can stratify the domain @xmath1 as a union @xmath246 , where @xmath247 , and leave only those @xmath248 that are non - empty .",
    "then , one can obtain an ensemble of measures @xmath249 on @xmath1 relative to the stratification above , where @xmath250 is the measure on @xmath248 induced by @xmath118 .",
    "after that , the theory of distributional problems of this type can be developed similarly to the one already considered .",
    "however , it is a bit awkward and heavier in notation .",
    "we choose another way around this problem  we change the ensemble of measures , but do not change the input space .",
    "let @xmath149 be a distributional problem .",
    "for a subset @xmath251 consider the ensemble of probability measures @xmath171 on @xmath14 @xmath136-induced by @xmath116 ( see section [ subsec : dist ] ) .",
    "the distributional problem @xmath252 is called the _ restriction _ of the distributional problem @xmath149 to the subset @xmath136 .    [",
    "le : comp - induced ] let @xmath253 and @xmath243 .",
    "if the function @xmath254 is ptime computable then @xmath255",
    ".    follows immediately from lemma [ le : s - induced ] .",
    "[ le : gp - s - induced ] let @xmath195 , @xmath243 , and @xmath255 .",
    "if an algorithm @xmath186 gptime decides @xmath149 with a control sequence @xmath256 such that the sequence @xmath257 converges to @xmath147 , then @xmath186 gptime decides @xmath252 with the control sequence bounded from above by @xmath258 .",
    "let @xmath152 be a generic polynomial time upper bound of the algorithm @xmath186 and @xmath259 .",
    "set @xmath260 .",
    "then @xmath261 and for @xmath262 one has @xmath263 hence @xmath264 thus , the sequence @xmath265 converges to @xmath147 .",
    "[ co : restriction ] let @xmath195 , @xmath243 , and @xmath255 .",
    "if there exists a polynomial @xmath54 such that @xmath266 for @xmath267 then the identity function @xmath268 gives an sgptime reduction @xmath269    we would like to emphasize that the situation with restrictions of problems in @xmath174 is quite different from the `` average - case '' one , where almost any restriction preserves the property of being polynomial time computable on average .",
    "in this section we , following @xcite , define the distributional bounded halting problem and prove that it is sgptime complete in @xmath172 .",
    "let @xmath32 be a nondeterministic turing machine with the binary tape alphabet @xmath178 .",
    "intuitively , the bounded halting problem for @xmath32 is the following algorithmic question :    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ for a positive integer @xmath24 and a binary string @xmath59 such that @xmath270 decide if there is a halting computation for @xmath32 on @xmath59 in at most @xmath24 steps . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    by our definitions ( see section [ se : prelim ] ) instances of algorithmic problems are words ( not pairs of words ) in some alphabet , so to this end we encode a pair @xmath271 by the binary string @xmath272 such that @xmath273 .",
    "notice , that any binary string containing @xmath147 is the code @xmath274 for some @xmath275 .",
    "denote by @xmath276 the subset of all binary strings @xmath274 , where @xmath277 , such that @xmath32 halts on @xmath59 within @xmath24 steps . from now on we refer to the problem @xmath278 as the _ bounded halting problem_.    to turn @xmath279 into a distributional problem we introduce a spherical ensemble @xmath280 of probability measures as follows . for @xmath281 put @xmath282 the problem @xmath283 is the _ distributional _ halting problem for @xmath32 , we refer to it as @xmath284 .",
    "probability space for halting problem ( a finite part ) .",
    "dashed lines correspond to @xmath147 , solid lines correspond to @xmath143 .",
    "each dot is associated with the label of the path from the root to itself .",
    "grey dots have non - trivial measure . ]    a positive integer @xmath24 is called _ longevous _ for an input @xmath59 of an ntm @xmath32 if every halting computation of @xmath32 on @xmath59 has at most @xmath24 steps .",
    "a function @xmath285 is a _",
    "longevity guard _ for @xmath32 if for every input @xmath59 the number @xmath286 is longevous for @xmath59 .",
    "notice , that if @xmath287 is a longevity guard for @xmath32 , then any function @xmath288 is also a longevity guard for @xmath32 . in",
    "what follows , we always assume that a longevity guard satisfies the following conditions :    * @xmath289 ; * @xmath286 is strictly increasing .    [ re : longevity ] for every problem @xmath103 , there is an ntm @xmath12 that decides @xmath12 and has a polynomial longevity guard @xmath285 , satisfying the conditions ( 1 ) , ( 2 ) above .",
    "since @xmath32 halts on an input @xmath59 if and only if it halts on @xmath59 within @xmath286 steps , there is no much use to consider instances @xmath271 of the halting problem for @xmath32 with @xmath290 .",
    "a rigorous formalization of this observation is to restrict the problem @xmath284 to the subset of instances @xmath291    more generally , for a computable function @xmath285 , satisfying conditions ( 1 ) and ( 2 ) , consider the set @xmath292 as above and denote by @xmath293 the ensemble of measures for @xmath19 which is @xmath292-induced by @xmath131 .",
    "let @xmath294 be the restriction of the problem @xmath284 to @xmath292 .",
    "[ pr : restriction2bhmg ] let @xmath32 be an ntm and @xmath295 a polynomial function",
    ". then @xmath296 and the identity function @xmath297 gives an sgptime reduction @xmath298 .",
    "observe first that the function @xmath299 is ptime computable . indeed ,",
    "if @xmath300 , then @xmath301 , so @xmath302 is uniquely defined ( since @xmath287 is monotone ) . in this case , @xmath303 depends only on @xmath24 , hence @xmath304 therefore , @xmath305 since the function @xmath287 is polynomial it takes at most @xmath306 time to check if @xmath307 or not .",
    "now , by lemma [ le : comp - induced ] @xmath296 .",
    "equalities [ eq : nu - c(g ) ] and corollary [ co : restriction ] imply that @xmath298 is an sgptime reduction , as claimed .",
    "examples of restricted problems @xmath308 , where a ) @xmath309 and b ) @xmath310 . only grey dots have non - trivial probability . ]    in the proofs below , we use the following encoding of natural numbers and turing machines .",
    "let a string @xmath311 be a binary expansion for @xmath27 , i.e. , @xmath312 , @xmath313 , and @xmath314 . denote by @xmath315 the binary string @xmath316 obtained from @xmath317 by inserting @xmath143 in front of each symbol in @xmath317 .",
    "let @xmath318 be a polynomial time computable enumeration of ( nondeterministic ) turing machines , such that @xmath319 is a binary representation of a natural number and every natural number is equal to @xmath319 for some @xmath32 .",
    "denote by @xmath320 the string @xmath321 .",
    "[ th : red2bh ] for any @xmath195 there exists an ntm @xmath32 over the binary alphabet @xmath178 , a polynomial longevity guard @xmath287 for @xmath32 , and an sgptime reduction @xmath322 .",
    "fix @xmath195 .",
    "we divide the proof of the theorem into two parts .",
    "first , we construct a turing machine @xmath32 , a longevity guard @xmath287 for @xmath32 , and a ptime reduction @xmath96 from the original problem @xmath149 to @xmath308 .",
    "then we show that @xmath96 is a composition of cs and cm reductions defined in sections [ se : change_size ] and [ se : change_measure ] and , hence , @xmath96 is an sgptime reduction @xmath322 .    *",
    "part i. * by theorem [ th : bin_alph ] we may assume that the alphabet of @xmath12 is binary .",
    "now , since @xmath323 there exists an ntm @xmath324 such that :    * @xmath324 has a halting computation on an input @xmath59 if and only if @xmath325 ; * @xmath324 has a polynomially bounded longevity guard .    recall that @xmath168 is the ensemble of probability distributions @xmath326 since @xmath195 the ensemble @xmath327 is ptime computable . for @xmath328",
    "define a function @xmath329 where @xmath31 is the lexicographic successor of @xmath68 .",
    "for @xmath328 such that @xmath330 define @xmath331 to be the smallest ( in shortlex ordering ) binary string such that @xmath332 where @xmath333 is the binary expansion of a real number in the interval @xmath334 $ ] .",
    "one can describe @xmath335 as follows .",
    "assume first that @xmath336 .",
    "since @xmath330 the binary expansions of @xmath337 and @xmath338 differ within the first @xmath339 bits after `` . '' , i.e. , @xmath340 for some @xmath341 . in this case",
    "the case @xmath343 is similar .",
    "it follows that for every @xmath344 such that @xmath345 we have @xmath346 and @xmath347 hence , @xmath348 .",
    "define @xmath349 notice that for every @xmath344 , @xmath350 and @xmath351 .",
    "now we describe an ntm @xmath32 , a function @xmath287 , and a reduction @xmath352 . if @xmath32 is defined and @xmath287 is a polynomial longevity guard for @xmath32 , then the reduction @xmath96 is defined for @xmath20 by @xmath353 where @xmath354 .",
    "it is left to define @xmath32 and @xmath287 .    the machine @xmath32 on a binary input @xmath60 executes the following algorithm :    1 .   if @xmath60 is not in the form @xmath355 , where @xmath356 and @xmath7 , then loop forever .",
    "2 .   if @xmath357 then decode @xmath24 .",
    "3 .   if @xmath358 : 1 .",
    "if @xmath359 then loop forever ; 2 .   otherwise simulate @xmath324 on @xmath59 .",
    "4 .   if @xmath360 : 1 .",
    "find the lexicographic smallest @xmath361 satisfying @xmath362 using divide and conquer approach ; 2 .",
    "if @xmath363 or @xmath364 then loop forever ; 3 .",
    "otherwise simulate @xmath324 on @xmath68 .    by construction",
    ", @xmath32 has a halting computation on @xmath365 if and only if @xmath366 for some @xmath344 and @xmath367 .",
    "we claim that @xmath32 has a polynomial longevity guard @xmath287 .",
    "indeed , since @xmath323 it follows that an ntm @xmath324 has a polynomial longevity guard , and all steps in the algorithm above , except simulation of @xmath324 , can be performed by deterministic polynomial time algorithms .",
    "therefore , @xmath32 has a polynomial longevity guard @xmath287 , as claimed .",
    "in particular , @xmath368 is a ptime reduction , as claimed .    *",
    "* now we prove that @xmath96 is an sgptime reduction .",
    "we start with the following lemma .    [",
    "le : measure_decrease ] for every @xmath369 and @xmath328 the following inequality holds : @xmath370    for every @xmath328 there are two possibilities .",
    "if @xmath371 , then @xmath372 and its measure is : @xmath373 if @xmath330 , then @xmath374 and its measure is : @xmath375 since @xmath376 and @xmath348 . in each case",
    "the inequality ( [ eq : factor_rh_reduction ] ) holds .    by construction of @xmath287 , all elements of @xmath377 are mapped to elements of size @xmath285 , hence , @xmath96 is size - invariant .",
    "it follows that a function @xmath96 is a composition of a cs - reduction with the polynomial size - growth function @xmath378 and a cm - reduction with a polynomial density function @xmath379 .",
    "thus , @xmath96 is an sgptime reduction .",
    "let @xmath380 be a universal ntm such that :    * @xmath380 accepts inputs of the form @xmath381 , where @xmath320 is the encoding of an ntm @xmath32 over a binary alphabet and @xmath7 ; * @xmath380 simulates @xmath32 on @xmath59 , i.e. , @xmath32 halts on @xmath59 if and only @xmath380 halts on @xmath381 , in which case they both have the same answer ( the same final configurations ) ; * @xmath380 has a polynomial - time slow - down , i.e. , there exists a polynomial function @xmath382 such that @xmath383 .",
    "see , for example , @xcite on how such a deterministic turing machine @xmath380 can be constructed , a nondeterministic one can be constructed in a similar way .",
    "[ th : red2bhu ] for every ntm @xmath32 over a binary alphabet @xmath6 , there exists a ptime computable function @xmath384 and an sgptime reduction @xmath385 .",
    "let @xmath32 be an ntm over @xmath6 and @xmath287 a polynomial longevity guard for @xmath32 .",
    "define ( in the notation above ) a function @xmath386 by @xmath387 were @xmath388 is the polynomial from the description of the machine @xmath380 above .",
    "put @xmath389 .",
    "clearly , @xmath96 gives a ptime reduction @xmath390 . to show that @xmath96 is an sgptime reduction",
    ", one can argue as in the proof of theorem [ th : red2bh ] .",
    "to carry over the argument , one needs the following inequality for every @xmath369 and @xmath328 : @xmath391 which differs from the inequality ( [ eq : factor_rh_reduction ] ) by a polynomial factor @xmath392 in the denominator .",
    "the proof of this is similar to the one in lemma [ le : measure_decrease ] and we omit it .",
    "there exists an ntm @xmath380 such that @xmath393 is sgptime complete .    by theorem",
    "[ th : red2bh ] for any @xmath172 problem @xmath149 there exists an ntm @xmath32 over a binary alphabet @xmath6 , a polynomial longevity guard @xmath287 of @xmath32 , and an sgptime reduction of @xmath149 to @xmath394 . by proposition [ pr : restriction2bhmg ] , there is an sgptime reduction of @xmath394 to @xmath284 . by theorem",
    "[ th : red2bhu ] , there exists a ptime computable function @xmath395 and an sgptime reduction @xmath385 .",
    "now , again by proposition [ pr : restriction2bhmg ] , there is an sgptime reduction of @xmath396 to @xmath393 .",
    "hence , @xmath149 is sgptime reducible to @xmath393 , as claimed .",
    "in this section we discuss some open problems on generic complexity .          some of the well - known @xmath0-complete problems are in @xmath174 , or in @xmath175 , see @xcite for examples .",
    "however , there is no general approach to this problem at present .",
    "if the answer to one of the questions above ( in particular , the second one ) is affirmative , then it will imply that for all practical reasons @xmath0-complete problems are rather easy .",
    "otherwise , we will have an interesting partition of @xmath0-complete problems into several classes with respect to their generic behavior .",
    "it was shown in @xcite that the halting problem for one - end tape turing machines is in @xmath174 .",
    "it remains to be seen if a similar result holds for turing machines where the tape is infinite at both ends .",
    "it is known ( see @xcite ) that the classes of functions that are polynomial on average and generically polynomial are incompatible , i.e. , none of them is a subclass of the other .",
    "nonetheless , the relationship between @xmath175-complete and @xmath0-complete on average is still unclear . to this end , the following problem is of interest ."
  ],
  "abstract_text": [
    "<S> in this note we introduce a notion of a generically ( strongly generically ) @xmath0-complete problem and show that the randomized bounded version of the halting problem is strongly generically @xmath0-complete </S>",
    "<S> .    * keywords . * </S>",
    "<S> generic - case complexity , completeness , randomized problems , bounded halting problem .    * 2010 mathematics subject classification . </S>",
    "<S> * 68q17 . </S>"
  ]
}