{
  "article_text": [
    "atlas  @xcite is a multi - purpose high energy physics experiment planned for the large hadron collider  @xcite  ( lhc ) , which is scheduled for startup after 2007 .",
    "the data processing needs of atlas , its variety in subsystems , and its expected longevity pose a big challenge for the software that will be needed for extracting physics out of the future atlasdata .",
    "this challenge has attracted a large software community , with developers working today , still a few year before the experiment starts running , on every aspect of the system .",
    "most of the huge atlascode base , from the software that the end - user runs to the configuration of the infrastructure tools , is currently under heavy development .",
    "this has resulted in a state of flux , as a consequence of which all software usage becomes low - level , and all users end up fixing the same problems multiple times .",
    "the threshold for new users is high , and casual users are , time and again , forced to relearn most of what they thought they knew .    a large fraction of the atlassoftware runs within the athenaframework , and in order to alleviate several of the chores that developers and end - users alike have to perform in order to work with that system , the athena startup kit ( ask ) has been developed .",
    "its main features are :    * _ automation _ of end - user tasks , to save time . * _ integration _ of the framework , the releases , and the release tools to improve perceived coherency . * _ encapsulation _ of volatile wisdom ( from web - pages and peoples heads ) of known problems and their workarounds , to make it more accessible .",
    "there are several different categories of athenausers and askaddresses the needs of all of them .",
    "askperforms the steps needed to setup tools , locate resources , work around known problems , and execute the athenaprogram .",
    "in addition , askhas athenaspecific functionality : it can generate and update user code meant for athenaexecution ( `` algorithms '' ) , generate default job options scripts , and update the dependencies for different releases and compile modes .",
    "a simplistic implementation of askwould mean that its maintenance would turn into a full - time job , which is unacceptable .",
    "thus , askis coded in such a way that all expected changes are properly taken into account when they occur , that a solution that has been successfully applied before is applied again if the problem resurfaces , and that it has a `` plan b '' for most tasks .",
    "this paper describes in detail how this robustness is achieved .",
    "there are three main aspects to everything that askperforms : first , setup a clean - room to work in ; then , decompose the task at hand ; and finally , always be ready to handle failure .",
    "there is a whole score of problems related to improper configuration of the working environment by the end - user . in order to keep full control of the environment ,",
    "askdoes not require any actions outside its own process ( or any of its subprocesses ) .",
    "although the user needs to have full access to the environment in case all else fails , in general she is shielded .",
    "askaccomplishes this by executing a working shell in the background , to which it establishes open pipes for input and output , and it then works on this shell as if it was itself just another end - user .",
    "this shell is its `` clean - room , '' and askhas full control : all communication proceeds through an api , which allows askto verify and validate any commands , their progress , and their results .",
    "it is not uncommon to allow commands that may cause havoc , and simply correct settings afterwards .",
    "a shell that is started from the current process inherits the environment and configuration of the current process , which can be invalid to begin with .",
    "note however , that what may seem like an invalid configuration to askmay in fact be an experimental setup from an expert user , who really wants to have the environment setup this way in order to see what happens .",
    "therefore , askcan not simply override any existing configuration .",
    "instead , it accepts the settings from the user and only provides what appears to be missing .",
    "this is a very productive and pleasant way of working : as an expert user , you configure only that part of the system that you are interested in , and asktakes care of the rest .    in practice",
    ", it turns out that for beginning and casual users a different approach is needed : many of them have residual configuration in their login files .",
    "this usually does not cause any problems at first , but sooner or later these settings will go out of date , leaving the user puzzled when things start to mysteriously fail .",
    "the user will , typically , blame this on askand may decide to drop the tool in disappointment .",
    "consequently , askcomes in two modes : expert and non - expert ( the latter is the default ) . in non - expert mode , askremoves any known atlassoftware configuration from the environment before executing any of its own code . this way ,",
    "askwill operate as if it started from a clean environment and perform the whole setup and configuration itself .    regardless of whether the user or askhas done the configuration , every task is executed from a known state : askenters a base directory , from where the task can move into its working directory , and it locates the required resources and verifies their configuration , repairing the setup as needed ( taking guidelines from experts , overriding non - experts ) .",
    "each task can then be implemented in a straightforward way , since it will , by design , not get executed until it has a very good chance of succeeding .    if an environment setup is irreparably broken , or if a critical resource is unlocatable , askhas no choice but to stop . however , since such a problem occurs in very specific cases , it is often ( but not always ) possible to present a clear and concise error report to the user . see section  [ sec : error ] for a more detailed discussion of error handling by ask .",
    "many of the tasks performed by askuse the same tools and require similar resources .",
    "further , steps within individual tasks sometimes overlap and can consequently be shared .",
    "in fact , most tasks share the same initialization and finalization step .",
    "thus , it makes sense to implement the tasks in a layered execution model :    * * encapsulate tools * + each task has access to the execution shell , but only standard unixcommands are executed directly .",
    "tools that are part of atlassoftware , however , are normally used directly .",
    "instead , tools are encapsulated in modules , which enables askto locate tools and to verify their setup and possibly update or repair it , before any attempt is made to perform actions with the tool .",
    "this is the lowest layer . * * refactorize steps * + it is a good programming practice to minimize the amount of duplicate code and in askthis means that all steps that are shared between tasks are refactored .",
    "further , the order of execution of steps is also often the same . by design",
    "many actions need the same set of parameters , and it is therefore straightforward to use meta - programming to create templates that are parametrized on the core action of a task .",
    "this guarantees that the execution order is proper , which greatly simplifies the implementation of individual steps .",
    "this is the programmatic layer . * * construct recipes * + the end - user typically does not think about tasks in the same granularity as tool authors do .",
    "thus , recipes , that are end - user tasks , are constructed from the programmatic tasks . since",
    "programmatic tasks are supposed to be self - contained , they can be freely mixed and matched in the recipes : it is only the goal of the recipes that puts constraints on their order .",
    "this is the user layer .",
    "* * user interfaces * + the recipes typically take input and have output .",
    "the former needs to be collected from the user , and the latter needs to be presented back to the user .",
    "the user interfaces connect input / output elements with recipes to present the askfunctionality to the user .",
    "there is a graphical interface and a command line interface .",
    "this is the application layer .",
    "third party programs or scripts , can access askfunctionality at any layer , but do so most commonly at the programmatic and/or user layer .",
    "these programs are typically similar in setup as the user interfaces ( in effect , they are also located in the application layer ) .",
    "for example , the askdistribution includes a program that performs full atlassoftware builds and is targeted at software librarians .",
    "but in principle , it is just a batch version of the command line interface with a few different defaults and a few extended recipes .",
    "there are several different kinds of errors that askcan encounter :    * * random . * + errors due to ( temporarily ) missing resources such as disk access , kerberostokens , the tag collector , etc .",
    "these errors come and go and , unfortunately , the solution is usually `` come back later , and try again '' or requires some user intervention .",
    "reporting is often , but not always , straightforward .",
    "for example , if a kerberosticket is missing and askattempts to access a file in the code repository , it will be cvsthat fails and askwill only have an error from that tool to report , thus masking the real error .",
    "* * user actions . * + errors because of a file that does not compile , an executable that does not link , an option script that the user requested but that does not exist , etc . reporting these errors",
    "is simple : askneeds to retrieve the error code , stop the task , and report the error message from the tool that failed . *",
    "* broken system . * + errors as a result of misconfiguration of the atlassoftware distribution that is used .",
    "there is not much point in reporting this kind of error , unless the user is testing the distribution .",
    "instead , askattempts to work around the problem .",
    "if that fails , then the requested task can not be performed .",
    "it is the last item that is the most interesting , because in handling that category of errors there is the most to gain in terms of productivity for the end - user , especially if he or she is a novice or casual user . in order to deal with broken systems ,",
    "askhas several options .",
    "first of all , it may come prepared : for several releases and configurations , it comes with specific workarounds that are simply programmed into ask .",
    "that way , the problem will not appear in the first place , because the workaround is the default .",
    "it gets more interesting when a task does fail . in that case , askwill try a few more things that might work , such as locating an alternative resource , querying an alternative source , or simply accepting a default and hope for the best .",
    "the ticket here is that this is precisely how an end - user would attempt to tackle the problem herself , with the exception that askcan perform the trials much , much faster , and it has therefore a good chance of arriving at a solution with the end - user never knowing that there was a problem .    as a final resort ,",
    "asksometimes explicitly fixes a workspace .",
    "since this usually involves moving or replacing files and/or directories , this is done only when the case is very clear .",
    "note that as before , when all else fails , askdoes allow expert access at all levels , at any time .",
    "one of the stated goals of ask(see section  [ sec : intro ] ) is the integration of the framework , the releases , and the release tools .",
    "the natural choice is then to implement askin a scripting language , because that is the only way to effectively and productively integrate such a variety of tools and environments .",
    "the prevalent scripting language in atlassoftware is python  @xcite , which is e.g.  used for the scripting facilities of the athenaframework .",
    "pythonis often praised for its effective use as a `` glue '' language , because of its extending and embedding features , and the choice for pythonis therefore natural .",
    "pythonis portable , interpreted , and gives you a lot of functionality per line of code because of its extensive set of ready - to - use modules that come with every standard installation .",
    "that , and the fact that most ( if not all ) unixdistributions actually ship with a version of python , means that all the user needs to do to install ask , is to make sure that the scripts are located in a directory that is in included in their path environment variable . this is the case for all atlasaccounts at cern , because askhas been installed in the official scripts directory .",
    "consequently , all atlasusers have immediate access to askwithout the need of any further setup .",
    "this section describes how the askfunctionality is presented to the user .",
    "the details of the individual commands , buttons etc .  are explained in the manual  @xcite , which is included with the distribution , and are not further elaborated here .",
    "there are two user interfaces in ask : a graphical user interface ( gui ) and a command line interface ( cli ) .",
    "the former is meant for beginning and casual users , as well as for tutorials ; whereas the latter is more attuned to advanced users , developers , and librarians .",
    "historically , the first usage of askwas to generate an athenaskeleton package . in order to be able to capture all user - configurable parameters at once ,",
    "a small graphical interface interface was developed .",
    "this proved especially practical for package updates , since the current information could be displayed , ready for the user to modify . for educational purposes , a pseudo - shell , displaying the underlying commands that askexecutes ,",
    "was added to the gui .",
    "a sample view of the full gui is shown in figure  [ fig : askgui - full ] .",
    "on the left , the user can find all tasks , grouped by category in notebook tabs ; on the right is the pseudo - shell , where the user can see the commands that askexecutes and their the results . in principle , if the user s shell environment is clean , these commands can be repeated on a real login shell to achieve the same results as with ask .",
    "the categorization of tasks is chosen in such a way as to make sure that a user only rarely needs to leave the current screen .",
    "in fact , the screen selected on startup is different for an empty work directory ( where the user will most likely want to create or checkout a new package ) , than for a directory with existing packages ( where the user will most likely want to work with any of these packages ) .",
    "there are no dialog boxes in ask : all input , which is minimal and completely optional by design , is collected directly in the current screen , and all output messages are in a log window that is always visible .",
    "integration of interactive athenais via the pseudo - shell .",
    "the entry box on the lower right automatically activates when the athenaprompt is detected , and the user can enter input to athenathere .",
    "the feature set available through the cli is the same as the one available through the gui .",
    "but there are two main advantages , for proficient users , to the cli over the gui :    * the cli is really just the standard pythoninterpreter .",
    "thus , if the user is well versed in python , she can use any and all functionality available in python .",
    "furthermore , rather than typing all commands , sets of commands can be collected in a script which is subsequently executed in the interpreter . *",
    "access to underlying system internals , the shell environment , build and release tools , etc .",
    "is more natural than in the gui .",
    "one of the options available to the expert is starting a login shell as a subprocess of ask .",
    "this shell will inherit a properly setup environment , but otherwise acts the same as if askwasnt there .",
    "an additional advantage , for all users , is that the cli can be used over a poor network connection where the gui is prohibitively slow .",
    "finally , the cli includes a few `` ber - recipes , '' e.g. : +  mkdir  work ;  cd  work[lxplus ]  ask== >  :  welcome  to  athena  startup  kit  v1.1== >  note :  enter  `` help ( ) ''  to  receive  help > > >  run (  atlfastoptions.txt  )    will perform all steps necessary to run the atlasfast simulation from the latest official release ( for any other package , all the user needs to do is specify the appropriate , released options file ) .",
    "it absolutely does not get any easier than this !",
    "integration with interactive athenais natural as long as the user realizes that athenais run from a separate pythonprocess that does not share any functions or data with the askprocess : the user simply sees a prompt switch and can just continue typing .",
    "naturally , askis used by the author himself , both to run atlassoftware as well as when working on the development of the athenaframework .",
    "the typical askuser , however , is a beginning user , because of the exposure of askto the atlascollaborators through the software tutorials .",
    "the reconstruction tutorial  @xcite is used by many as their first starting point with atlassoftware : the tutorial shows how to roll your own athenaalgorithm and how to access reconstruction objects in the transient data store .",
    "that is the typical for how most end - users actually work , thus the reconstruction tutorial is popular .",
    "askhas been in use for some time for the builds of the atlassoftware release at lbnl .",
    "this use exploits the askerror handling in a creative way : when resources are missing ( which they by definition are , since the build has yet to take place ) , askwill fall back on cern , where the release has already been built , since no build is attempted at lbnl before that .",
    "thus , askcan fully automatically retrieve the latest settings , versions of tools , and targets from the cern release and apply them as appropriate when building the lbnl release .",
    "it is clear that askis currently the best way to get started with atlassoftware .",
    "getting something to run successfully , and being able to look at some output files with data in them , is a great motivator for users new to atlas .",
    "when its abundant documentation , its use in tutorials , and its ready availability are taken into account , then ask s value is obvious .    as atlassoftware stabilizes , and as parts of it get replaced by higher quality software , the number of needed workarounds can be trimmed : at some point this will render most of askobsolete .",
    "elements of it , however , will remain relevant : creating new packages , updating algorithm and requirements files , its tutorial aspect , etc .",
    ", all have a long life expectancy",
    ". it is foreseen , that these parts will be packaged as software components and transferred to the ganga  @xcite project , which has already benefitted from the design ideas from ask .    there will be no major additions of functionality to ask , because of this expected integration with ganga .",
    "for example , askdoes not currently have the capability to submit jobs to batch systems , even though it is relatively simple to add such a feature based on the generated standalone execution scripts . instead ,",
    "askwill be maintained to handle future distributions of the atlassoftware and to improve on its existent functionality .",
    "it will keep serving its current audience until it gets replaced by a version of gangathat has equivalent or better functionality ."
  ],
  "abstract_text": [
    "<S> the athena startup kit ( ask ) , is an interactive front - end to the atlassoftware framework ( athena ) . </S>",
    "<S> written in python , a very effective `` glue '' language , it is build on top of the , in principle unrelated , code repository , build , configuration , debug , binding , and analysis tools . </S>",
    "<S> askautomates many error - prone tasks that are otherwise left to the end - user , thereby pre - empting a whole category of potential problems . through the existing tools , which askwill setup for the user if and </S>",
    "<S> as needed , it locates available resources , maintains job coherency , manages the run - time environment , allows for interactivity and debugging , and provides standalone execution scripts . an end - user who wants to run her own analysis algorithms within the standard environment </S>",
    "<S> can let askgenerate the appropriate skeleton package , the needed dependencies and run - time , as well as a default job options script </S>",
    "<S> . for new and casual users , askcomes with a graphical user interface ; for advanced users , askhas a scriptable command line interface . </S>",
    "<S> both are built on top of the same set of libraries . </S>",
    "<S> askdoes not need to be , and is nt , experiment neutral . </S>",
    "<S> thus it has built - in workarounds for known gotcha s , that would otherwise be a major time - sink for each and every new user . </S>",
    "<S> askminimizes the overhead for those physicists in atlaswho just want to write and run their analysis code . </S>"
  ]
}