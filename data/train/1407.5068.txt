{
  "article_text": [
    "we deal with complete deterministic finite ( semi)automata @xmath0 , where @xmath1 is the set of states , @xmath2 is the input alphabet , and @xmath3 is the transition function defining the action of @xmath2 on @xmath1 .",
    "this action naturally extends to the action of @xmath4 words for any @xmath5 , @xmath6 .",
    "monotonic automata are those that admit a linear order of the states .",
    "the same qualification is applied to transformation semigroups .",
    "formally , an automaton @xmath7 is _ monotonic _ if there exists a linear order @xmath8 of @xmath1 such that if @xmath9 then @xmath10 , for all @xmath11 and @xmath12 .",
    "we call such an order @xmath8 an _ underlying linear order _ of @xmath7 .",
    "it is clear that if the actions of all letters preserve the order , then also the actions of all words do so .",
    "the class of monotonic automata is a subclass of aperiodic ones @xcite , which recognize precisely _ star - free _ languages , and form one of the fundamental classes in the theory of formal languages .",
    "an automaton is _ aperiodic _ if no transformation of any word has a nontrivial cycle .",
    "checking whether an automaton is aperiodic is known to be pspace - complete @xcite . on the other hand , checking whether an automaton is _ nonpermutational _ , where no transformation acts like a permutation of a nontrivial subset of @xmath1 , can be easily done in @xmath13 time @xcite .",
    "such results may be useful in improving algorithms recognizing star - free languages to work better in particular cases .",
    "the complexity problems for various subclasses of regular languages are widely studied ( see  @xcite for regognizing convex , and  @xcite for locally testable languages , and  @xcite for a survey ) .",
    "the languages of monotonic automata do not have bounded level in the _ dot - depth hierarchy _ of star - free languages @xcite .",
    "monotonic semigroups were studied by gomes and howie @xcite for their maximum size ( they use the term _ order - preserving _ ) .",
    "these semigroups play an important role as building - blocks in the constructions of the largest aperiodic semigroups known so far ( @xcite ) .",
    "monotonic automata have been considered , in particular , in connection with the problems of synchronizing automata .",
    "an automaton is said to be _ synchronizing _ if there is a word @xmath14 such that @xmath15 ; such a word is called a _ reset word_. the ern conjecture , which is considered one of the most longstanding open problem in automata theory , states that every synchronizing automaton has a reset word of length at most @xmath16 . ananichev and volkov @xcite have proved that a synchronizing monotonic automaton has a reset word of length at most @xmath17 .",
    "they have also proved the same bound for a larger class of _ generalized monotonic _",
    "automata @xcite .",
    "volkov have introduced a still larger class of _ weakly monotonic _",
    "automata @xcite , which contains all aperiodic ones , and proved that strongly connected automata in this class possess a synchronizing word of length @xmath18 .",
    "finally , grech and kisielewicz have generalized this to the class of automata _ respecting intervals of a directed graph _ , and they have proved that the ern conjecture holds for each automaton in this class , provided it holds for smaller _ quotient _ automata .",
    "these results could be also useful in computational verification of the conjecture for automata of limited size , provided we could efficiently recognize and skip from computations automata that belong to a class for which the conjecture has been proven @xcite .",
    "therefore it is important to consider computational complexity of the related problems .",
    "the term _ monotonic _ was also used by eppstein @xcite for automata whose states can be arranged in a _",
    "cyclic order _ that is preserved by the actions of the letters .",
    "following @xcite we call such automata _ oriented _ automata .",
    "they form a broader class , containing monotonic automata , which has certain applications in robotics ( _ part - orienters _",
    ", see natarajan @xcite ) .",
    "eppstein has established the tight upper bound for the length of the shortest reset words of an oriented automaton @xmath16 , and provided an algorithm working in @xmath13 time for finding such a word .",
    "however , this algorithm requires the cyclic order to be given .",
    "note that the problem of finding the shortest reset word is hard in general @xcite ( also for approximation @xcite and some restricted classes @xcite ) .",
    "but due to possible practical applications , there are many exponential algorithms that can deal with fairly large automata and polynomial heuristics ( e.g.  @xcite ) .",
    "also , hardness does not exclude a possibility of using a polynomial algorithm for some easily tractable classes ( cf .  slowly synchronizing @xcite ) .    here",
    "we prove that the problem of checking whether a given automaton is monotonic is np - complete , even under restriction to binary alphabets ( section  [ sec : monotonic ] ) .",
    "we also obtain that checking whether an automaton is oriented is np - complete under the same conditions ( section  [ sec : oriented ] ) .",
    "it follows that , unfortunately , they are hardly recognizable , and it is hard to find a preserved linear ( cyclic ) order of a monotonic ( oriented ) automaton . in particular , we can not efficiently apply the polynomial eppstein algorithm @xcite to compute a shortest reset word in the cases oriented automata , without knowing a cyclic order . on the other hand ,",
    "checking whether an automaton admits a nontrivial _ partial order _ is easy ( section  [ sec : discussion ] ) .",
    "the problem @xmath19 can be formulated as follows : given an automaton @xmath7 , decide if @xmath7 is monotonic .",
    "this is the unrestricted version , where the alphabet can be arbitrary large . for a given @xmath20 , the restricted problem to @xmath21-letter alphabets of the input automaton we call @xmath22 .",
    "we show that @xmath19 is np - complete , as well as @xmath22 for any @xmath23 .",
    "the problem is easy if the alphabet is unary .",
    "a unary automaton is monotonic if and only if the transformation of the single letter does not contain a cycle of length @xmath24 .",
    "@xmath25 can be solved in @xmath26 time , and a monotonic order can be found in @xmath26 time if it exists .",
    "we simply check if the transformation of the single letter of @xmath7 contains a cycle of length @xmath24 , that is @xmath27 for some distinct states @xmath28 .",
    "if so , then from @xmath29 ( or dually @xmath30 ) it follows that @xmath31a contradiction with that @xmath32 is an order .",
    "thus the automaton is not monotonic .",
    "otherwise we have an acyclic digraph of the transformation , and we can fix some order on the connected components ( sometimes called _ clusters _ ) .",
    "each such a component form a rooted tree .",
    "we can perform an inverse depth - first search ( dfs ) starting from the root .",
    "then @xmath9 if @xmath33 is in a component before that of @xmath34 , or they are in the same component but @xmath33 was visited later than @xmath34 during the inverse dfs in this component .",
    "so if @xmath9 from the same component , then @xmath35 was visited later than @xmath36 , or @xmath37 .",
    "thus the order is preserved .",
    "these operations can be done in @xmath26 time .",
    "clearly , @xmath19 is in np , as we can guess an underlying linear order and check if the action of each letter preserves it ( this can be done in @xmath38 time ) .",
    "@xmath19 is in np .",
    "we reduce @xmath39 to @xmath19 .",
    "@xmath40 ( @xmath41 ) is a variant of 3sat , where a clause is satisfied if it contains at least one true and one false literal .",
    "the variant @xmath39 additionally restricts instances so that every literal is a positive occurrence of a variable ( negations are not allowed ) . from schaefer s theorem @xcite , we have that @xmath40 is np - complete as well as @xmath39 .    as an instance @xmath42 of @xmath39",
    "we get a set of @xmath43 boolean variables @xmath44 , and a set of @xmath45 clauses @xmath46 , each one with exactly 3 literals . a literal",
    "is a positive occurrence of a variable @xmath47 .",
    "the problem is to decide if there exists a satisfying assignment @xmath48 for @xmath42 , that is , for each clause @xmath49 , @xmath50 contains at least one true literal ( @xmath51 with @xmath52 ) and at least one false literal ( @xmath51 with @xmath53 ) .",
    "we can assume that each variable occurs at least one time , and no variable appears more than once in a clause .",
    "note that the complement of a satisfying assignment for @xmath42 is also satisfying .",
    "we construct @xmath55 as follows . for each variable @xmath56",
    "we create a pair of states @xmath57 .",
    "we also add a unique state @xmath58 ( sink ) .    for a @xmath59-th clause @xmath60",
    "( we fix the order of variables in clauses ) , we create the _ clause gadget _ as follows .",
    "we add three states @xmath61 and three letters @xmath62 , which correspond to the three occurrences of the variables @xmath63 , respectively .",
    "the action of these letters is defined as follows :    * @xmath64 and @xmath65 ; * @xmath66 and @xmath67 ; * @xmath68 and @xmath69 ; * @xmath70 and @xmath71 , for @xmath72 ; * @xmath73 and @xmath74 , for @xmath75 ; * @xmath76 and @xmath77 , for @xmath78 ; * @xmath79 , for the other states @xmath80 and each @xmath81 .",
    "so the actions of letters @xmath82 , @xmath83 , @xmath84 send every state from @xmath85 either to itself or to @xmath58 .",
    "the clause gadget is presented in  figure  [ fig : clause_gadget ] .",
    "( 12,11)(0,0.5 ) ( x)(6,8)@xmath86 ( y)(4,4)@xmath87 ( z)(8,4)@xmath88 ( p_f)(2,10)@xmath89 ( q_f)(0,6)@xmath90 ( p_g)(4,0)@xmath91 ( q_g)(8,0)@xmath92 ( p_h)(12,6)@xmath93 ( q_h)(10,10)@xmath94 ( p_f , x)@xmath82 ( q_f , y)@xmath82 ( p_g , y)@xmath83 ( q_g , z)@xmath83 ( p_h , z)@xmath84 ( q_h , x)@xmath84    in  figure  [ fig : construction_of_a_i ] the construction of @xmath54 is presented , with the action of @xmath95 as an example , in the case when variable @xmath96 is the first literal in clause @xmath97 .",
    "( 32,13)(0,0.5 ) ( p_1)(0,8)@xmath98(q_1)(0,4)@xmath99 ( p_dots1)(3,8)@xmath100(q_dots1)(3,4)@xmath100 ( p_f)(6,8)@xmath89(q_f)(6,4)@xmath90 ( p_dots2)(9,8)@xmath100(q_dots2)(9,4)@xmath100 ( p_n)(12,8)@xmath101(q_n)(12,4)@xmath102    ( x_1)(16,12)@xmath103(y_1)(16,6)@xmath104(z_1)(16,0)@xmath105 ( x_dots1)(19,12)@xmath100(y_dots1)(19,6)@xmath100(z_dots1)(19,0)@xmath100 ( x_j)(22,12)@xmath86(y_j)(22,6)@xmath87(z_j)(22,0)@xmath88 ( x_dots2)(25,12)@xmath100(y_dots2)(25,6)@xmath100(z_dots2)(25,0)@xmath100 ( x_k)(28,12)@xmath106(y_k)(28,6)@xmath107(z_k)(28,0)@xmath108 ( s)(32,6)@xmath58    ( p_1)(q_1 ) ( p_f , x_j)(q_f , y_j ) ( p_n , s)(q_n , s ) ( x_1,s)(y_1,s)(z_1,s ) ( x_j , s)(y_j , s)(z_j , s ) ( x_k , s)(y_k , s)(z_k , s ) ( s )    in summary , we have @xmath109 states and @xmath110 letters .",
    "[ thm : monotonic_hard ] @xmath54 is monotonic if and only if @xmath42 has a satisfying assignment .",
    "suppose that @xmath54 is monotonic with the underlying linear order @xmath8 .",
    "we define an assignment @xmath111 for @xmath42 : @xmath112 if @xmath113 , and @xmath114 otherwise .",
    "we show that @xmath111 is satisfying for @xmath42 .",
    "assume for the contrary that there is a clause @xmath60 , where all the three variables evaluate to @xmath115 .",
    "this means that @xmath116 , @xmath117 , and @xmath118 . from that @xmath8",
    "is preserved , we have :    * @xmath119 ; * @xmath120 ; * @xmath121 .",
    "thus @xmath122 , a contradiction with that @xmath8 is an order .",
    "the argument holds in the dual way in the case with all the three variables evaluated to @xmath123 .",
    "hence , @xmath111 must be satisfying .    now , suppose that there is a satisfying assignment @xmath111 .",
    "we define a linear order @xmath8 and show that it is preserved . to do so , we define @xmath124 , which for states @xmath5 assigns pairwise distinct natural numbers that will determine @xmath8 .    first , for any @xmath125 let :    * @xmath126 and @xmath127 if @xmath128 ; * @xmath129 and @xmath130 if @xmath131 .    for @xmath132",
    "we define @xmath133 , depending on the assignment of the variables in @xmath60 .",
    "assignment @xmath111 uniquely determines the relation between @xmath61 in an underlying linear order .",
    "each of the six satisfying combinations of @xmath134 defines an acyclic relation between @xmath61 , which is enforced by the action of the letters @xmath62 .",
    "for instance , if @xmath135 , then @xmath116 , which implies @xmath119 .",
    "if @xmath136 then @xmath137 . then it must be @xmath138 and @xmath139 .",
    "if @xmath140 then @xmath141 , and we have either @xmath142 if @xmath143 , or @xmath144 otherwise .",
    "this is dual for @xmath145 .",
    "finally we define @xmath146 .",
    "hence , in our order @xmath8 , first there are states @xmath57 sorted increasingly by @xmath147 .",
    "the order between @xmath148 and @xmath149 depends on the assignment .",
    "next , there are states from clause gadgets @xmath61 sorted by @xmath59 .",
    "the exact order on particular @xmath61 depends on the assignment as described above .",
    "finally @xmath58 is the last state with @xmath150 for any @xmath151 .",
    "the order is shown in  figure  [ fig : construction_of_a_i ] ( from left to right ) .",
    "now we show that @xmath8 is indeed an underlying linear order .",
    "consider a letter @xmath82 for any @xmath152 , and let @xmath153 .",
    "we show that for every pair of distinct states the order @xmath8 is preserved .",
    "* for the pair @xmath154 , if @xmath116 then also @xmath119 , and if @xmath155 then @xmath156 , since we have chosen the order of @xmath61 to be consistent with @xmath111 , as described above . * for @xmath89 ( or @xmath90 ) and",
    "@xmath157 , if @xmath158 then @xmath159 . if @xmath160 then @xmath161 . the same holds for @xmath90 mapped to @xmath87 . * for distinct states @xmath162 with @xmath163 , if @xmath164 , then either @xmath165 or @xmath166 .",
    "if @xmath167 then also @xmath168 .",
    "the same arguments work for letters @xmath83 and @xmath84 .",
    "it follows that any letter preserves @xmath8 , so @xmath8 is an underlying linear order of @xmath54 .",
    "we can state our main    the problem of checking whether a given automaton is monotonic is np - complete .",
    "let @xmath170 be an automaton with @xmath171 and @xmath172 with @xmath173 .",
    "we construct a binary automaton @xmath174 such that @xmath7 is monotonic if and only if @xmath175 is monotonic .",
    "@xmath176 consists of @xmath177 states @xmath178 for @xmath179 , and a unique state @xmath58 ( sink ) .",
    "now we define the action of @xmath180 . for each state @xmath178 with @xmath181 and @xmath182",
    ", we define @xmath183 . for each @xmath184",
    "we define @xmath185 .",
    "finally @xmath186 .",
    "the action of @xmath187 in each set @xmath188 corresponds to the action of the @xmath147-th letter of @xmath2 on @xmath1 : for @xmath189 and @xmath182 , if @xmath190 then we define @xmath191 .",
    "finally @xmath192 .",
    "the construction of @xmath175 is shown in  figure  [ fig : construction_of_b ] .",
    "( 24,13)(0,0.5 ) ( q^1_1)(0,12)@xmath193 ( q^1_2)(0,8)@xmath194 ( q^1_dots)(0,4)@xmath100 ( q^1_n)(0,0)@xmath195 ( q^2_1)(6,12)@xmath196 ( q^2_2)(6,8)@xmath197 ( q^2_dots)(6,4)@xmath100 ( q^2_n)(6,0)@xmath198 ( dots1)(12,12)@xmath100 ( dots2)(12,8)@xmath100 ( dotsdots)(12,4)@xmath100 ( dotsn)(12,0)@xmath100 ( q^k_1)(18,12)@xmath199 ( q^k_2)(18,8)@xmath200 ( q^k_dots)(18,4)@xmath100 ( q^k_n)(18,0)@xmath201 ( s)(24,6)@xmath58 ( q^1_1,q^2_1)@xmath180 ( q^1_2,q^2_2)@xmath180 ( q^1_dots , q^2_dots)@xmath180 ( q^1_n , q^2_n)@xmath180 ( q^2_1,dots1)@xmath180 ( q^2_2,dots2)@xmath180 ( q^2_dots , dotsdots)@xmath180 ( q^2_n , dotsn)@xmath180 ( dots1,q^k_1)@xmath180 ( dots2,q^k_2)@xmath180 ( dotsdots , q^k_dots)@xmath180 ( dotsn , q^k_n)@xmath180 ( q^k_1,s)@xmath180 ( q^k_2,s)@xmath180 ( q^k_dots , s)@xmath180 ( q^k_n , s)@xmath180 ( s)@xmath180    [ thm : monotonic2_hard ] @xmath175 is monotonic if and only if @xmath7 is monotonic .",
    "suppose that @xmath7 is monotonic with the underlying linear order @xmath202 .",
    "we define the linear order @xmath203 on the states of @xmath175 . for @xmath204 and @xmath205 ,",
    "let @xmath206 if and only if @xmath72 , or @xmath207 and @xmath208 . also , let @xmath209 for each @xmath210 .",
    "the order @xmath203 is linear , since @xmath202 is linear .",
    "we show that @xmath203 is an underlying linear order of @xmath175 .",
    "clearly , the actions of both letters preserve @xmath203 on states @xmath178 and @xmath58 . consider a pair @xmath211 with @xmath206 .",
    "then @xmath212 by definition .",
    "consider the following cases :    * if @xmath72 , then @xmath213 , since @xmath214 is either @xmath215 or @xmath58",
    ". also , for some @xmath216 , @xmath217 , since @xmath72 . * if @xmath218 , then @xmath208 by definition . if @xmath219 then @xmath220 ; otherwise @xmath221 from @xmath208 .",
    "also , @xmath208 implies @xmath222 for some @xmath216 .",
    "so @xmath223 .",
    "thus @xmath203 is an underlying linear order of @xmath175 .    now , suppose that @xmath175 is monotonic with an underlying linear order @xmath203 .",
    "we define @xmath202 on the states of @xmath7 : for @xmath205 , @xmath208 if and only if @xmath224 .",
    "observe that for any @xmath225 , @xmath224 implies @xmath226 for each @xmath227 due to the action of @xmath180 .",
    "consider two states @xmath228 with @xmath229 and the @xmath147-th letter @xmath230 . by definition @xmath224 , and so @xmath226 .",
    "this implies @xmath223 for some @xmath216 , and it follows that @xmath231 .",
    "thus @xmath222 , and the order @xmath202 is an underlying linear order of @xmath7 .    as a corollary",
    "we obtain that @xmath169 is also np - complete .",
    "we can reduce an instance of @xmath39 with @xmath43 variables and @xmath45 clauses to a binary automaton with @xmath232 states .    the problem of checking whether a given binary automaton @xmath7 is monotonic is np - complete .",
    "the following definition of oriented automata is due to eppstein @xcite ( who used the term _ monotonic _ ) .",
    "an automaton is _ oriented _ if there is a cyclic order of the states preserved by the action of the letters .",
    "formally , there is a cyclic order @xmath233 such that for every @xmath12 , the sequence @xmath234 , after removal of possibly adjacent duplicate states ( the last is also adjacent with the first ) , is a subsequence of a cyclic permutation @xmath235 of the cyclic order , for some @xmath125 . note that if @xmath233 is a cyclic order then also @xmath235 is for every @xmath125 .",
    "figure  [ fig : cyclic_order ] presents a cyclic order of some unary oriented automaton .",
    "every monotonic automaton is oriented , since if a linear order is preserved , then it is also preserved as a cyclic order . but the converse does not necessarily hold .    ( 24,17)(0,0.5 ) ( v1)(4,14)@xmath236 ( v2)(10,16)@xmath96 ( v3)(21,14)@xmath237 ( v4)(19,12)@xmath238 ( v5)(17,10)@xmath239 ( v6)(14,7)@xmath240 ( v7)(12,0)@xmath241 ( v8)(8,2)@xmath242 ( v9)(6,7)@xmath243 ( v2,v6 ) ( v6,v9 ) ( v9,v2 ) ( v8,v2 ) ( v4,v8 ) ( v3,v8 ) ( v5,v9 ) ( v1,v4 ) ( v7,v1 )    let @xmath244 be the problem of deciding if a given automaton is oriented . as before , we consider @xmath245 with the restriction to @xmath21-letter alphabets .",
    "again , @xmath246 can be easily solved in @xmath247 time due to the following    [ pro : unary_oriented ] a unary automaton is oriented if and only if all cycles in the transformation of the single letter have the same length .",
    "there is an algorithm solving the problem @xmath246 and finding a cyclic order if it exists , and working in @xmath26 time .",
    "let @xmath180 be the single letter of the alphabet and @xmath248 .",
    "suppose that @xmath249 and @xmath250 are two cycles in the transformation of @xmath180 , with @xmath251 .",
    "then , the transformation of @xmath252 has the cycle @xmath253 of length @xmath45 , for some @xmath254 . on the other hand it has the fixed point @xmath255 .",
    "let @xmath256 be a cyclic order of the states of the automaton . since the transformation of @xmath252 has a cycle of length @xmath24 ( which does not involve @xmath255 ) , there are two states @xmath257 with @xmath258 , @xmath259 , and @xmath260 , such that @xmath261 .",
    "it follows that @xmath262 violates the cyclic order @xmath263 , since @xmath264 is not a subsequence of any cyclic permutation of the cyclic order  a contradiction .",
    "assume now that we have @xmath45 cycles of the same length @xmath21 : @xmath265 so @xmath266 is the @xmath147-th state of the @xmath59-th cycle , and @xmath267 .",
    "we can compute a cyclic order by breadth - first search ( bfs ) in the inverse digraph of the transformation of @xmath180 .",
    "the constructed cyclic order will have the form @xmath268 where @xmath269 are sequences of states that do not lie on a cycle .",
    "let @xmath270 ( _ level _ ) be the smallest integer @xmath147 such that @xmath271 is a state on a cycle . to simplify the notation ,",
    "let @xmath272 be @xmath273 .",
    "the algorithm starts from the list @xmath274 of all cycle states ; they are considered as visited in the @xmath115-th step in this order . in the @xmath147-th step ( @xmath275 )",
    ", the algorithm processes the list of visited states from the @xmath276-th step in the order in which they were visited . for each state",
    "@xmath33 from the list , the algorithm computes all states @xmath34 such that @xmath277 and @xmath34 is not a cycle state ; so it visits precisely all the states @xmath34 with @xmath278 . for every visited state @xmath34 , it appends @xmath34 to the end of the new list of visited states in the current step . for a visited @xmath34",
    ", we have the corresponding cycle state @xmath279 , from which @xmath34 was reached ( possibly indirectly ) .",
    "the algorithm appends @xmath34 to the beginning of @xmath280 with @xmath281 ; for example , if @xmath282 , then for @xmath283 we have @xmath284 , respectively .    to illustrate the algorithm , consider the automaton from  figure  [ fig : cyclic_order ] .",
    "we start from the list @xmath285 of the one cycle , and empty @xmath286 . in the first step , from state @xmath96",
    "we reach @xmath242 , from @xmath240 we do not reach any state , and from @xmath243 we reach @xmath239 . hence , @xmath287 as @xmath288 , and @xmath289 as @xmath290 . then , in the second step , from @xmath242 we reach @xmath238 and @xmath237 , and from @xmath239 we do not reach any state ; hence , we append @xmath238 and @xmath237 to the beginning of @xmath291 , obtaining @xmath292 . in the third step , from @xmath238",
    "we reach @xmath236 , so @xmath293 becomes @xmath294 .",
    "finally , in the last fourth step , from @xmath236 we reach @xmath241 , obtaining @xmath295 .",
    "the final order is so @xmath296    we can show that the resulted cyclic order is indeed preserved by the action of @xmath180 . observe that @xmath297 , and if @xmath298 then @xmath299 or @xmath300 .",
    "hence , the sequence @xmath301 is mapped into @xmath302 , and it remains to show that for each @xmath303 , the sequence @xmath304 is a subsequence of @xmath302 .",
    "consider @xmath32 as the order in these sequences , and let @xmath305 be two states from @xmath306 with @xmath163 .",
    "if @xmath307 then we have @xmath308 .",
    "if @xmath309 , @xmath310 then @xmath163 means that the algorithm appended @xmath80 after @xmath311 , so @xmath80 was visited after @xmath311 .",
    "they were directly reached from @xmath312 and @xmath313 , respectively . if @xmath314 then @xmath315 clearly holds , and if @xmath316 then also @xmath314 .",
    "otherwise , @xmath317 and it follows that @xmath312 was visited after @xmath313 by the algorithm , so @xmath318 . as usual breadth - first search , this procedure works in @xmath26 time .    to show hardness ,",
    "we reduce the np - complete problems @xmath19 and @xmath22 ( with @xmath23 ) to @xmath244 and @xmath245 , respectively .",
    "let @xmath319 be an automaton obtained from @xmath320 by adding a unique state @xmath58 with @xmath321 for every @xmath12 .",
    "then the following are equivalent :    * @xmath7 is monotonic ; * @xmath319 is monotonic ; * @xmath319 is oriented .",
    "clearly @xmath319 is monotonic if and only if @xmath7 is monotonic , and if @xmath319 is monotonic then it is also oriented .",
    "it remains to show that if @xmath319 is oriented then @xmath319 is monotonic .",
    "assume that @xmath319 is not monotonic but is oriented , and let @xmath322 be a preserved cyclic order of the states of @xmath7 . since no state is mapped to @xmath58 , except @xmath58 , and @xmath58 is mapped to itself under the action of every letter , @xmath233 is a preserved cyclic order of the states of @xmath7 . since @xmath7 is not monotonic , @xmath233 is not an underlying linear order of @xmath7 .",
    "so there are two states @xmath323 and @xmath12 , with @xmath324 , @xmath325 , and @xmath326 , such that @xmath261 .",
    "it follows that @xmath327 violates the cyclic order @xmath328 of the states of @xmath7 , since @xmath329 is not a subsequence of any cyclic permutation of the cyclic order .",
    "thus @xmath319 can not be oriented and not monotonic .",
    "the problem of checking whether a given automaton is oriented is np - complete , even under the restriction to binary alphabets .",
    "we have proved that checking whether an automaton is monotonic or oriented is np - complete",
    ". however , several related problems remain open . the complexity of determining whether an automaton is _ generalized monotonic _",
    "@xcite , and _ weakly monotonic _",
    "@xcite is not known . the class of generalized monotonic automata strictly contains the class of monotonic ones , and the class of weakly monotonic automata strictly contains the class of generalized monotonic ones .",
    "also , it remains open what is the complexity of checking whether an automaton _ respects intervals of a directed graph _ @xcite ; this is the widest of the classes containing the classes of generalized and weakly monotonic automata .    it can be observed that if the alphabet is unary then the classes of generalized and weakly monotonic automata are precisely the class of monotonic automata .",
    "however , it is not difficult to check that automata @xmath54 from the construction from subsection  [ subsec : monotonic_npc ] are generalized , and so weakly monotonic , regardless of the instance @xmath42 ; thus our proof of np - completeness of testing monotonicity does not work for these wider classes .    on the other hand , for the class of automata preserving a nontrivial _ partial order _ , the membership problem can be easily solved in polynomial time .",
    "an automaton preserves a partial order @xmath8 , if @xmath9 implies @xmath10 for every @xmath11 , @xmath12 .",
    "a partial order is nontrivial if at least one pair of states is comparable . in contrast to monotonic automata , not all pairs of states must be comparable , but at least one .",
    "this class contains monotonic , generalized monotonic , and weakly monotonic automata , but not oriented , and is a subclass of automata respecting intervals of a directed graph . from",
    "@xcite it follows that if the ern conjecture is true for all automata outside this class ( admitting only trivial partial orders ) , then it is true for all automata .      for each pair of distinct states",
    "@xmath11 , we try to construct a partial order @xmath32 with @xmath332 .",
    "so at the beginning of constructing , all states are incomparable and we order @xmath332 .",
    "when ordering a pair @xmath333 with @xmath334 , we take all the consequences @xmath335 for every @xmath12 with @xmath336 .",
    "of course , this also involves that @xmath337 for every @xmath338 and @xmath339 .",
    "for each newly ordered pair we repeat the procedure of taking consequences .",
    "if a contradiction is found , that is , if we need to order @xmath334 but they have been already ordered so that @xmath340 , the construction fails and we start from another pair @xmath341 . if for some pair @xmath341 all the consequences are taken without a contradiction , we have found a preserved partial order with @xmath332 .",
    "clearly , if the algorithm finds a partial order , then @xmath342 implies @xmath343 as it has taken all the consequences , so the order is preserved .",
    "conversely , if there exists a preserved nontrivial partial order @xmath8 , then @xmath332 for some pair of states , and the consequences can not lead to a contradiction .",
    "hence , the algorithm will find the minimal partial order with @xmath332 that is preserved and is contained in @xmath8 .",
    "concerning the complexity , we need to process @xmath331 pairs . the constructed partial order can be simply stored as a directed acyclic graph .",
    "for every @xmath341 , we start from the empty digraph with one edge @xmath344 . for each ordered pair",
    "@xmath345 we need to take or check @xmath346 consequences , and we order @xmath331 pairs .",
    "taking a consequence and updating the constructed partial order takes @xmath331 time , due to the possibly quadratic size of @xmath347 .",
    "these together yield in @xmath330 time , and the need of storing digraphs yields in @xmath331 space .",
    "the algorithm from  proposition  [ pro : partial_order ] may be modified for finding an underlying linear order of the given automaton .",
    "to do so , after finding a partial order that is not yet linear , we need to order another pair that is not yet comparable , say @xmath345 . here",
    "we must consider both possibilities @xmath334 and @xmath340 to check if one of them finally leads to a linear order .",
    "hence , this results in super - exponential worst case running time .",
    "however , based on some of our experimental evidence , this algorithm is practically much more efficient than the naive checking of all linear orderings : in most cases of not monotonic automata we can find a contradiction quickly , without the need to enumerate directly all orderings ."
  ],
  "abstract_text": [
    "<S> an automaton is monotonic if its states can be arranged in a linear order that is preserved by the action of every letter . </S>",
    "<S> we prove that the problem of deciding whether a given automaton is monotonic is np - complete . </S>",
    "<S> the same result is obtained for oriented automata , whose states can be arranged in a cyclic order </S>",
    "<S> . moreover , both problems remain hard under the restriction to binary input alphabets .    </S>",
    "<S> * keywords : * automaton , monotonic , oriented , complexity , np - complete , linear order , cyclic order , partial order , order - preserving , transition semigroup </S>"
  ]
}