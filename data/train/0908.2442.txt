{
  "article_text": [
    "the focus of this study is on the detection of regular structure in point sets .",
    "our motivation comes from observations that have been published concerning extraordinary symmetries in the placements of ancient towns , temples and other important locations .",
    "for instance , the oracle of delphi has been measured to be the apex of isosceles triangles with at least seven pairs of ancient greek cities .",
    "the same is true for the oracle at dodoni , while the small island of delos is the apex of at least thirteen isosceles triangles .",
    "all three of the central locations were considered to be among the most important of places , and in fact delphi was considered to be the navel of the world . in general , one may find seemingly countless cases of collinearity , reflective symmetry , partial @xmath0-gons and networks of isosceles triangles when looking at the graph of cities in the ancient world , from the british isles to the middle east .",
    "we will not concern ourselves further questioning whether such structures were carefully constructed or instead an expected result on large complete geometric graphs .",
    "however , the topic generates other interesting questions .",
    "if one chooses a particular location as a temple , it is not difficult to construct cities ( at least on paper ) so that the temple becomes the center of several symmetries .",
    "what about the opposite ? given a set of existing cities , where should one decide to place a temple ? or , to ask differently , where should one look for a hidden temple ?",
    "-gons in this figure ?",
    "solution is in figure  [ jf2 ] . ]",
    "given a set of @xmath0 points , we wish to find the maximum subset which satisfies a specific symmetry or structure .",
    "the algorithm by bra @xcite , for finding maximum symmetric subsets in point sets , is capable of handling reflective lines , translations , rotational symmetries and repeated sets .",
    "the time complexity is @xmath8 for every positive @xmath6 .",
    "the bound of bra depends on the maximum number of isosceles triangles formed by a set of points in the plane .",
    "pach and agarwal @xcite bound this value by @xmath9 .",
    "this was improved by pach and tardos @xcite to @xmath10 .",
    "bra noted that another result of his algorithm was to find all regular polygons contained in the set .",
    "we improve the time complexity for detecting regular polygons in point sets , although unlike the algorithm by bra , our algorithm is randomized .",
    "our bound is @xmath11 , where @xmath12 .",
    "notice that @xmath1 , the fractional component in the exponent of @xmath0 , is half of the equivalent component in  @xcite .",
    "this is no coincidence .",
    "our algorithm is designed to reduce this fraction by a factor of 2 .",
    "thus , any improvement of the result of pach and tardos in  @xcite will be directly reflected in our algorithm .",
    "we assume that all coordinates and other values are stored in a format that allows constant time equality testing and hashing .",
    "as hashing is only used to speed up one dimensional searches , it can be substituted with a comparison - based structure .",
    "this increases the computational complexity by a logarithmic factor , which is absorbed into the @xmath6 .",
    "furthermore , as exact computation methods are typically not used , comparison based structures can be used to substitute equality tests with proximity tests for suitably small proximity values .",
    "this will compensate for any small discrepancies in the computation .",
    "note that we frequently use the variable @xmath6 inside asymptotic notation .",
    "such claims hold for any constant @xmath13 , and the asymptotic notation may hide constants that depend on @xmath6 . thus , for example , @xmath14 if and only if @xmath15 .    -gons in the point set illustrated in figure  [ jf1 ] . ]",
    "we state our main theorem immediately .",
    "there is an algorithm which , with high probability , finds all polygons in a set of @xmath0 points , in expected time @xmath11 .",
    "we obtain our result by considering small and large @xmath16-gons separately , obtaining the same bound in both cases .",
    "thus we have two separate proofs given in this section . for @xmath17 ,",
    "we give a sweep - line algorithm in section  [ subsec : small ] ( lemma  [ l1 ] ) .",
    "larger polygons are found by the method given in section  [ subsec : big ] ( theorem  [ big - gons ] ) .",
    "let regular polygons of size greater than @xmath18 be denoted as @xmath19-gons .",
    "smaller polygons are denoted as @xmath20-gons .",
    "[ l1 ] for any @xmath1 , we can find all  @xmath21-gons formed by @xmath0 points , in @xmath22 time .",
    "let @xmath23 be the given set of @xmath0 points .",
    "we compute all line segments defined by pairs of points in @xmath23 , and we view this as an embedded graph . for each vertex",
    ", we construct a hash table containing incident edges , stored by key value and length .",
    "let @xmath24 , and let @xmath25 be the set of all angles formed by three adjacent vertices in a regular @xmath26-gon .",
    "let @xmath27 be an edge in the embedded graph .",
    "we will show how to determine if any neighboring edge of @xmath28 might be in the same @xmath21-gon as @xmath28 , in @xmath4 time . to do this",
    ", we use @xmath29 and the hash tables of @xmath30 and @xmath31 .",
    "the algorithm uses a simple left - to - right line sweep ( see figure  [ smallgons ] ) .",
    "as we sweep , we propagate two types of messages along edges : `` possible @xmath16-gon above / below '' . edges may carry several messages at the same time . during the sweep , we stop at each vertex @xmath32 and process the following types of events :    * origination event .",
    "this occurs when @xmath32 might be the leftmost vertex of a @xmath16-gon .",
    "if two edges of the same length are to the right of @xmath32 and are at angle @xmath33 , then we give a `` possible @xmath16-gon below '' signal to the upper edge and a ",
    "possible @xmath16-gon above \" signal to the lower edge . * propagation event .",
    "this event confirms or rejects a scenario in which @xmath32 is a possible vertex of a @xmath16-gon ( not the leftmost or rightmost ) .",
    "the event is triggered when a `` possible @xmath16-gon above / below '' signal is received from an edge @xmath28 incident and to the left of @xmath32 . if there is a right - facing edge @xmath34 , of the same length and forming an angle @xmath35 with @xmath28 , the signal is propagated to @xmath34 . naturally , the orientation of the angle must match the type of signal ( above or below ) .",
    "if there is no such right - facing edge , the signal ( and candidate @xmath16-gon ) is discarded .",
    "* termination event .",
    "this event detects the rightmost vertex of a @xmath16-gon .",
    "this happens if @xmath32 receives a `` possible @xmath16-gon above '' and a `` possible @xmath16-gon '' below signal from two left - facing edges of the same length , angle @xmath35 , and in the proper relative orientation .",
    "we output the description of the @xmath16-gon ( the center , rotation , and value @xmath16 can be easily determined from the information at hand ) , and we do not propagate the two incoming signals .    -gons . left : propagation ; right : termination.,title=\"fig : \" ] -gons . left : propagation ; right : termination.,title=\"fig : \" ]    the sweep exhaustively scans every possible @xmath20-gon .",
    "if such a polygon exists , the origination event will identify its leftmost vertex .",
    "propagation will verify that the correct angles and edge lengths exist throughout the polygon , and termination will match the top and bottom chains of the polygon .",
    "it takes @xmath36 time to perform a line sweep .",
    "( the astute reader will realize that a topological sweep  @xcite could be used instead , at a cost of @xmath37 , but as all logarithmic factors get absorbed in the @xmath6 , this is not critical ) .",
    "there are at most @xmath38 possible signal types , two for each polygon size .",
    "if all signal types were to appear on each of the @xmath37 edges , the total number of signals over the entire sweep would be @xmath39 . propagation and termination events are done with table lookup and take constant time for each event .",
    "generating all origination events takes @xmath4 table lookups for each incident edge to the right , as all angles in @xmath29 are searched .",
    "thus , the total runtime is @xmath39 .      in this section",
    "we show how to identify all @xmath19-gons in @xmath23 with high probability .",
    "each such polygon will be quickly identified by its own _ special _ triangle .",
    "in fact we show that each polygon is associated with several triangles that could uniquely identify it .",
    "we sample triples of points in such a way that , with high probability , at least one special triangle will be chosen for each existing @xmath16-gon .",
    "our algorithm can be summarized by the following :    * randomly select  enough \" isosceles triangles from the point set .",
    "* for each isosceles triangle , determine if it is such that it could uniquely identify a @xmath16-gon ( i.e. if it is special ) .",
    "* for every special triangle , test if the vertices of its unique matching @xmath16-gon exist .    in the remainder of this section ,",
    "we describe how to select random isosceles triangles ( see  [ random ] ) , we describe special triangles and their properties ( see  [ special ] ) , and we explain how to test for all @xmath16-gons given a sufficient set of special triangles ( [ testing ] ) . finally , we piece these elements together and describe the entire process that gives our result ( [ alltogether ] ) .",
    "we start by explaining how to select a random apex of an isosceles triangle from the set of all apices of isosceles triangles formed by a point set .",
    "note that we wish to do this without explicitly constructing all isosceles triangles .",
    "[ lem : random ] let @xmath23 be a set of @xmath0 points .",
    "three ordered points @xmath40 form an _",
    "isosceles triple _ if @xmath41 . with",
    "@xmath37 preprocessing , an isosceles triple can be selected uniformly at random from the set of all isosceles triples , in constant time .",
    "let @xmath42 be the complete geometric graph on @xmath23 .",
    "let @xmath43 be the set of segments of length @xmath44 , incident to @xmath45 : @xmath46 .",
    "let @xmath47 .",
    "let @xmath48 be the set of all isosceles triples .",
    "note that @xmath49 .",
    "+ using bucketing , we can compute @xmath43 ( and @xmath50 ) for all @xmath45 and @xmath44 in @xmath37 time .",
    "this can be done as follows . for each @xmath51 , add the edge @xmath52 to the bucket with label @xmath53 , creating the bucket if it does not exist .",
    "the set @xmath54 , of at most @xmath55 buckets , is obtained by deleting all buckets with only one edge .",
    "then , for each bucket @xmath56 assign a weight of @xmath57 . note that @xmath58 .",
    "+ now , by selecting a random bucket @xmath59 , as well as two different random edges @xmath60 , we obtain a random isosceles triple @xmath61 .",
    "this can be done with three random choices in time @xmath62 .",
    "the two edges @xmath52 and @xmath63 both have length @xmath44 by virtue of being in @xmath43 .",
    "thus @xmath61 is guaranteed to be an isosceles triple .    given an isosceles triple @xmath61 , @xmath52 and @xmath63 will appear in exactly one bucket @xmath64 and the probability of picking this triple will be    @xmath65    since @xmath66 is the number of isosceles triples this method chooses each triple uniformly at random .",
    "our claim follows , since every isosceles apex corresponds to exactly two ordered triples .",
    "any special triangle @xmath67 is particular type of isosceles triangle with vertices belonging to @xmath23 .",
    "what makes @xmath67 special is that its vertices belong to a ( potentially incomplete ) regular @xmath16-gon of @xmath23 , and furthermore the number of @xmath16-gon vertex positions skipped by the non - base sides of @xmath67 is relatively prime to @xmath16 ( see figure  [ fig : special ] ) . in this section we give bounds on the probability that a triangle is special .",
    "we also explain how a special triangle is uniquely associated to one regular @xmath16-gon .",
    "is special , since it fits in the pentagon on the left , and satisfies the requirement of being relatively prime ( the ratio is @xmath68 ) .",
    "the same triangle does not satisfy this requirement in the 15-gon in the middle ( ratio : @xmath69 ) .",
    "on the right we illustrate the special triangles for the 15-gon ( 1,2,4,7 / 15).,title=\"fig : \" ]   is special , since it fits in the pentagon on the left , and satisfies the requirement of being relatively prime ( the ratio is @xmath68 ) .",
    "the same triangle does not satisfy this requirement in the 15-gon in the middle ( ratio : @xmath69 ) . on the right",
    "we illustrate the special triangles for the 15-gon ( 1,2,4,7 / 15).,title=\"fig : \" ]   is special , since it fits in the pentagon on the left , and satisfies the requirement of being relatively prime ( the ratio is @xmath68 ) .",
    "the same triangle does not satisfy this requirement in the 15-gon in the middle ( ratio : @xmath69 ) . on the right",
    "we illustrate the special triangles for the 15-gon ( 1,2,4,7 / 15).,title=\"fig : \" ]    let @xmath70 denote the probability that @xmath16 is relatively prime to @xmath71 .",
    "[ relativelyprimelemma ] let @xmath16 be an integer satisfying @xmath72 , and let @xmath71 be an integer chosen uniformly at random in the interval @xmath73 $ ] .",
    "then @xmath74 .    we know from the _ prime number theorem _",
    "( gauss , 1792 ; see  @xcite ) that the number of primes smaller than any given integer @xmath75 is @xmath76 .",
    "thus there are @xmath77 primes in the range @xmath78 .",
    "any such prime @xmath71 satisfies @xmath79 .",
    "the probability that some @xmath71 is chosen uniformly at random is @xmath80p(x y)@xmath81y@xmath82[1 , -2 ] @xmath83 .",
    "lemma  [ relativelyprimelemma ] tells us that in a regular @xmath16-gon , among all isosceles triangles with a given apex , the probability of randomly choosing a special triangle is @xmath84 .",
    "the following lemma confirms that we can quickly associate a given special triangle to its unique @xmath16-gon .",
    "[ lem : unique ] if a regular @xmath16-gon has a special triangle @xmath67 , then @xmath67 is not special for any other regular @xmath85-gon .",
    "suppose that each non - apex side of @xmath67 skips @xmath86 vertices of the @xmath16-gon .",
    "let @xmath87 be the apex angle of @xmath67 .",
    "this angle can be viewed as a function of @xmath88 .",
    "if @xmath67 can be embedded on some other @xmath85-gon , where @xmath89 vertices are skipped , the ratio @xmath90 must also equal @xmath87 . since @xmath67 is special for the @xmath16-gon , we know that @xmath91 . therefore for any other regular @xmath85-gon",
    ", we have @xmath92 , where @xmath93 .",
    "this means that @xmath67 does not satisfy the property of being relatively prime for other regular polygons .",
    "[ lem : table ] let @xmath67 be chosen uniformly at random from the set of all isosceles triangles formed by points of a regular @xmath16-gon , where @xmath16 is not given as input .",
    "after @xmath37 preprocessing , we can determine the value @xmath16 in @xmath62 time with probability @xmath94 .",
    "in @xmath37 time , we can construct a table containing the angle of every special triangle for every regular @xmath16-gon , for @xmath95 .",
    "this is done as follows . for an isosceles triangle present in a @xmath16-gon ,",
    "isosceles ratio _ be the side length of the triangle divided by @xmath16 .",
    "for every @xmath16-gon , we can construct a list of all isosceles ratios , in @xmath96 time .",
    "the total time is quadratic over all values of @xmath97 .",
    "then , we eliminate items with the same ratio , except for the one created by an irreducible fraction .",
    "+ by lemma  [ lem : unique ] , the elements of the list are unique .",
    "thus , if we are given a special triangle , we can use binary search ( or hashing for @xmath62-time ) to locate the @xmath16-gon for which the triangle is special .",
    "now suppose that each non - apex side of @xmath67 skips @xmath86 vertices of the @xmath16-gon .",
    "clearly @xmath86 is in the range @xmath98 $ ] . by lemma  [ relativelyprimelemma ] , @xmath99 .",
    "[ big - gon - many - iso ] for any @xmath100-gon @xmath42 , at least @xmath101 of the isosceles triangles formed by vertices of @xmath23 are in @xmath42 .",
    "according to  @xcite , the number of isosceles triangles among @xmath0 points in the plane is @xmath2 .",
    "any @xmath102-gon @xmath42 defines @xmath103 isosceles triangles .",
    "thus , at least @xmath104 of the isosceles triangles from @xmath23 have all three points in @xmath42 .",
    "lemmas  [ relativelyprimelemma ] and  [ big - gon - many - iso ] directly imply the following .",
    "[ c4 ] for any @xmath100-gon @xmath42 , @xmath105 of the isosceles triangles are special triangles of @xmath23 associated with @xmath42 .      we have already established that a special triangle is associated to a unique @xmath16-gon , but this does not mean that the @xmath16-gon actually exists in @xmath23 . in this section we show that the total cost of such verifications is expected to be on the order of the total complexity of @xmath16-gons in a set .",
    "in other words , false verifications do not cost too much .",
    "[ l2 ] the sum of complexities of all @xmath100-gons is at most @xmath106 .",
    "let @xmath107 be the number of @xmath108-gons in a fixed set @xmath23 of @xmath0 points .",
    "the sum of the complexities of all @xmath100-gons is @xmath109 .",
    "any @xmath16-gon generates at most @xmath110 isosceles triangles of which at most @xmath111 are special .",
    "thus there are at most @xmath112 special triangles . we know from @xcite that there are at most @xmath2 distinct isosceles triangles",
    ". since special triangles are distinct ,    @xmath113    which since @xmath114 gives    @xmath115    and dividing and absorbing the @xmath116 into the @xmath6 gives    @xmath117    this last equation is exactly the statement of the lemma .",
    "if a @xmath16-gon has at least @xmath118 vertices in @xmath23 , then it is _ more - than - half - full_. otherwise it is _ less - than - half - full_.    [ c2 ] the sum of complexities of all more - than - half - full @xmath100-gons in a set @xmath23 of @xmath0 points is at most @xmath106 .",
    "this is an easy variant of lemma  [ l2 ] , as the more - than - half - full condition only affects constants in the asymptotic notation .",
    "[ l3 ] let @xmath67 be a special triangle , associated to a @xmath16-gon @xmath119 .",
    "we can decide if @xmath119 is less - than - half - full in @xmath23 in @xmath62 expected time . otherwise if it is more - than - half - full , we decide if it is completely full in @xmath96-time .",
    "the center of @xmath119 is found from the circumcenter of @xmath67 in constant time .",
    "given @xmath67 , the center of the polygon , and the value of @xmath16 determined by lemma  [ lem : table ] , we can compute the location of any vertex of @xmath119 in constant time .",
    "we begin checking the @xmath120 unconfirmed vertices in random order , without replacement .",
    "if any vertex is not present we terminate the procedure .",
    "otherwise we output the candidate @xmath16-gon .",
    "checking an entire @xmath16-gon takes @xmath96 time , so if @xmath119 is more - than - half - full , our claim trivially holds .",
    "if @xmath119 is less - than - half - full , over half of the @xmath120 tests will fail .",
    "since the tests are ordered randomly , the expected number of tests is at most @xmath121 .",
    "thus we expect to spend only @xmath62 time in this case .",
    "so far , we have shown that we can identify every large regular polygon in a point set , if we manage to find a special triangle belonging to each such polygon .",
    "we have hinted that these special triangles will be found by selecting ",
    "enough \" random isosceles triangles .",
    "the following theorem addresses this issue and states our main result for large regular polygons .    [ big - gons ] with high probability , we can find all @xmath19-gons in a set @xmath23 of @xmath0 points in the plane in expected time @xmath11 .",
    "the _ coupon collector problem _ tells us that if we randomly select items out of a set of @xmath0 elements , with replacement , we should expect to have observed all @xmath0 items after @xmath122 selections .",
    "this also means that if we have @xmath0 disjoint sets of elements , and the probability of selecting something from each set is equal ( i.e. @xmath123 ) , then we expect to have obtained a sample from each set in @xmath122 time .",
    "more generally , if the minimum probability of sampling from one of the disjoint sets is @xmath124 , then we expect to have sampled from all sets in @xmath125 time .    by corollary",
    "[ c4 ] , @xmath126 of all isosceles triangles in @xmath23 are special , for each @xmath19-gon .",
    "so we set this as @xmath127 to conclude that we expect to have sampled a special triangle for each such polygon in @xmath128 time .",
    "we select @xmath129 random isosceles triangles formed from the vertices of @xmath23 .",
    "so , with constant probability we will obtain at least one special triangle for every @xmath102-gon . with quadratic pre - processing time",
    ", we can select each random isosceles triangle in constant time ( lemma  [ lem : random ] ) .    by lemma  [ lem : table ] , in constant time we can determine if one of our random isosceles triangles is special , and if so we can determine the position of its unique candidate @xmath16-gon .",
    "lemma  [ l3 ] explains how we perform a verification for each special triangle ( or , in other words , for each potential @xmath16-gon ) .",
    "we expect to spend @xmath62 time for each less - than - half - full @xmath16-gon , which means @xmath130 time for all such cases .",
    "the cost of verification for more - than - half - full @xmath16-gons is proportional to their size .",
    "we can avoid verifying the same @xmath16-gon twice by constructing a hash table , using the center and top vertex coordinate as keys .",
    "corollary  [ c2 ] states that the total size of all more - than - half - full @xmath100-gons is @xmath5 .",
    "a purely combinatorial question is the following : what is the maximum complexity of all of the regular polygons in a set of @xmath0 points in the plane .",
    "lemma  [ l2 ] bounds the complexity with respect to regular @xmath19-gons to be @xmath131 .",
    "trivially , the complexity of all regular @xmath132-gons is @xmath133 , for any @xmath134 .",
    "thus , the total complexity of all regular polygons is @xmath131 .",
    "this bound is highly dependent on the number of isosceles triangles , but perhaps a tighter bound is possible by using more properties of regular polygons , instead of simply treating them as generators of isosceles triangles .",
    "we note that an improvement of the bound of the total complexity of regular polygons from @xmath131 to @xmath135 would give a corresponding speedup in our algorithm ( by increasing the number of random triangles and reducing the cutoff between small and large polygons ) .",
    "this is because the current bottleneck in our algorithm is the last step , the successful verification for special triangles .",
    "bra observed that one can construct a set of points with @xmath136 regular @xmath16-gons , for any constant @xmath16 , which gives a lower bound @xmath137 for the number of regular polygons in a point set .",
    "an upper bound on the number of regular polygons is @xmath36 .",
    "every pair of points defines at most two @xmath16-gons , thus there are at most @xmath138 @xmath16-gons .",
    "the total number of regular polygons is therefore at most @xmath139 .",
    "while the gap between the lower and upper bounds is much larger for the complexity of polygons rather than the number of regular polygons , it remains unknown if these two quantities differ asymptotically .",
    "we would like to thank boris aronov , jean chapelle and erik demaine for interesting discussions about chords , polygons , and euclid in general ."
  ],
  "abstract_text": [
    "<S> in this paper , we analyze the time complexity of finding regular polygons in a set of @xmath0 points . </S>",
    "<S> we combine two different approaches to find regular polygons , depending on their number of edges . </S>",
    "<S> our result depends on the parameter @xmath1 , which has been used to bound the maximum number of isosceles triangles that can be formed by @xmath0 points . </S>",
    "<S> this bound has been expressed as @xmath2 , and the current best value for alpha is @xmath3 .    </S>",
    "<S> our algorithm finds polygons with @xmath4 edges by sweeping a line through the set of points , while larger polygons are found by random sampling . </S>",
    "<S> we can find all regular polygons with high probability in @xmath5 expected time for every positive @xmath6 . </S>",
    "<S> this compares well to the @xmath7 deterministic algorithm of bra  @xcite . </S>"
  ]
}