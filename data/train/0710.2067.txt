{
  "article_text": [
    "in spite of the numerous phenomenological achievements of the standard model , there are still theoretical motivations which impel particle physicists to believe in new physics beyond the standard model . among these motivations",
    ", one can name in particular the hierarchy problem or dark matter / energy problems . as an attempt to solve these problems , supersymmetry ( susy ) appears as a highly motivated and studied model during the past decades .",
    "+   + we consider here the minimal supersymmetric extention of the standard model ( mssm ) , with minimal flavor violation .",
    "since no supersymmetric partner has been discovered , supersymmetry has to be a broken symmetry .",
    "a large effort has been done to understand the nature of supersymmetry breaking , and the most successful mechanisms are believed to be the gravity mediated ( sugra ) in which the susy breaking sector communicates with the mssm sector via only gravitational interactions , anomaly mediated ( amsb ) in which susy breaking sector is transmitted to the observable sector through the super - weyl anomaly , and gauge mediated ( gmsb ) which is mediated by gauge interactions .",
    "the boundary conditions at high scales in the mentioned scenarios reduce the number of free parameters of the mssm , allowing feasible phenomenological studies .",
    "+   + during the past few years , rare b decays , and in particular those associated to @xmath1 transitions have been extensively used in order to constrain susy parameter space .",
    "the observable commonly used for this purpose is the inclusive branching ratio corresponding to this transition . in @xcite we have introduced a new observable , the isospin asymmetry , and showed that this observable can produce complementary information to the branching ratio , and in some regions of the parameter spaces , even more restrictive constraints . +   + we introduce here ` superiso ` as a tool to calculate the isospin symmetry breaking for the three main susy breaking scenarios , _ i.e. _ msugra , amsb and gmsb . the program is modular so that the user can insert its own model ( as long as it produces the susy mass spectra and couplings according to the susy les houches accord conventions ) .",
    "the code allows also to calculate the inclusive branching ratio , so that comparison between the two observables is possible . +   +",
    "the paper is organized as follows .",
    "the relevent equations for the calculation of the isospin asymmetry are summarized in section [ calculation ] . in section [ content ]",
    "the ` superiso ` package is described , and the installation and compilation instructions can be found in section [ compilation ] . in section [ sample ]",
    "we explain how to use ` superiso ` , with input and output samples . finally some results are presented in section [ result ] .",
    "the isospin asymmetry @xmath2 can be written to leading order @xcite : @xmath3 where the spectator - dependent coefficients @xmath4 reads : @xmath5 the functions @xmath6 and @xmath7 can be written in function of the wilson coefficients @xmath8 at scale @xmath9 and @xmath10 , therefore @xmath11 and @xmath12 are inverted here compared to @xcite . ] : @xmath13 + r_1 \\right\\}\\nonumber \\;\\;,\\\\",
    "\\nonumber\\\\ k_{2q } & = & \\frac{v_{us}^ * v_{ub}}{v_{cs}^ * v_{cb}}\\left ( c_1(\\mu_b ) + \\frac{c_2(\\mu_b)}{n } \\right ) \\delta_{qu } + \\left ( c_4(\\mu_b ) + \\frac{c_3(\\mu_b)}{n } \\right ) \\\\ & & + \\frac{c_f}{n}\\,\\frac{\\alpha_s(\\mu_b)}{4\\pi } \\left\\ { c_1(\\mu_b)\\left ( \\frac43\\ln\\frac{m_b}{\\mu_b } + \\frac23 - h_\\perp(x_{cb } ) \\right ) + r_2 \\right\\ } \\;\\;,\\nonumber\\end{aligned}\\ ] ] where @xmath14 and @xmath15 are color factors , and : @xmath16 f_\\perp \\ln\\frac{\\mu_b}{\\mu_0 } + \\dots \\ , , \\nonumber\\\\ r_2 & = & \\left [ -\\frac{44}{3}\\,c_3(\\mu_b ) - \\frac43\\,n_f(c_4(\\mu_b)+c_6(\\mu_b ) ) \\right]\\ln\\frac{\\mu_b}{\\mu_0 } + \\dots \\;\\;.\\end{aligned}\\ ] ] here the number of flavors @xmath17 , and @xmath18 is an arbitrary normalization scale .",
    "the details of the calculation of wilson coefficients is given in @xcite .",
    "@xmath19 , @xmath20 , @xmath21 and @xmath22 are convolution integrals of hard - scattering kernels with the meson distribution amplitudes , and their values are summarized in table [ tab : param ] . in this table",
    "also appears the parameter @xmath23 , which parametrizes the logarithmically divergent integral @xmath24 . @xmath25 and the phase @xmath26 are arbitrary .",
    "@xmath27 gev is a typical hadronic scale .",
    "+   +    160mm@|c|c|c|c|c| + @xmath28 & @xmath29   & @xmath30   & @xmath31   & @xmath32   +  0.22   & @xmath33 & @xmath34 & @xmath35 & 5.28 gev   +     +    160mm@|c|c|c|c|c| + @xmath36 & @xmath37   & @xmath38   & @xmath39   & @xmath40 + @xmath41 mev & @xmath42 mev   & @xmath43   & @xmath44   & @xmath45 +     +    160mm@|c|c|c|c|c| + @xmath46 & @xmath47   & @xmath48   & @xmath49   & @xmath50   +  @xmath51   & @xmath52 mev   & 892 mev   & @xmath53 mev   & @xmath54   +     +    160mm@|c|c|c|c| + @xmath19 & @xmath20 & @xmath21   & @xmath22   +  @xmath55   & @xmath56 & @xmath57 & @xmath58 +     +    160mm@|c|c|c|c|c| + @xmath59 & @xmath60   & @xmath61   & @xmath62   & @xmath63   + @xmath64 gev & @xmath65 gev & @xmath66 gev & @xmath67 gev & 80.4 gev +    the coefficient @xmath68 reads @xcite : @xmath69 where @xmath70 is the spectator scale , and @xmath71 we have @xmath72 x\\\\ & & { } + \\frac{2}{9 } \\bigg [ 18 + 2\\pi^2 -2i\\pi^3 + \\left ( 12 - 6\\pi^2 \\right)\\ln x + 6i\\pi\\ln^2\\",
    "! x+\\ln^3\\ ! x\\bigg ] x^2\\nonumber \\\\ & & { } + \\frac{1}{27 } \\bigg [ -9 + 112 i\\pi-14\\pi^2+\\left(182 - 48i\\pi\\right)\\ln x-126\\ln^2\\ ! x\\bigg ]",
    "x^3 \\nonumber\\\\ & & -\\frac{833}{162}-\\frac{20i\\pi}{27 } + \\frac{8\\pi^2}{9 } x^{3/2}\\;\\ ; ,   \\nonumber\\end{aligned}\\ ] ] where @xmath73 and @xmath74 .",
    "we also need : @xmath75 where @xmath76 is the hard - scattering function : @xmath77-\\frac{2}{u } \\;\\;,\\ ] ] and where @xmath78 is the usual dilogarithm function @xmath79 .",
    "+ @xmath80 is the light - cone wave function with transverse polarization and @xmath81 is a distribution amplitude of the @xmath82 meson involved in the leading - twist projection .",
    "we have also : @xmath83 the first negative moment of @xmath81 can be parametrized by a quantity @xmath37 such as @xmath84 following @xcite , and defining @xmath85 we can write @xmath86 where @xmath87 , and @xmath88 the numerical values of all the needed parameters can be found in table  [ tab : param ] . +   + using the equations mentioned in this section , ` superiso ` is able to calculate the isospin asymmetry of @xmath0 . for the computation of the inclusive branching ratio , we used the relations of @xcite .",
    "` superiso ` is a c program respecting the c99 standard ( through the use of the ` complex.h ` library ) , whose main purpose is to calculate the isospin symmetry breaking of @xmath0 decays in the mssm with minimal flavor violation . in this package ,",
    "five main programs are provided , but the users are also invited to write their own main programs . ` main_example.c ` is intended as an example for writing new programs , and ` slha.c ` can scan files written following the susy les houches accord ( slha ) @xcite , and calculates the corresponding isospin asymmetry . the main programs ` msugra.c ` , ` amsb.c ` and ` gmsb.c ` have to be linked to the ` isasugra / isajet ` @xcite and/or the ` softsusy ` @xcite packages , in order to compute mass spectra and couplings within the minimal supergravity scenario ( msugra ) , the minimal anomaly mediated susy breaking scenario ( amsb ) or the minimal gauge mediated susy breaking scenario ( gmsb ) .",
    "+ the calculation of isospin asymmetry requires the following steps :    * generation of a slha file with ` isajet ` or ` softsusy ` , or the slha file provided by the user , * scan of the slha file , * computation of the required wilson coefficients , * calculation of the isospin asymmetry .    `",
    "superiso ` also computes the inclusive branching ratio of @xmath1 , and the code is modular enough so that routines calculating other observables , such as the branching ratio of @xmath89 or the anomalous magnetic moment of the muon , can be easily added .",
    "for this purpose , a procedure has to be added in ` src/ ` which can also benefit from the functions already implemented in the program ( for example for the calculation of the wilson coefficients and the scan of the slha files . ) +   + the code includes the definition of a structure in ` src / include.h ` :    .... typedef struct parameters {      int model ; / * msugra = 1 , gmsb = 2 , amsb = 3 * /      int generator ; / * isajet = 1 , softsusy = 2 * /      float q ; / * qmax ; default = m_ewsb = sqrt(m_stop1*mstop2 ) * /      float m0,m1_2,tan_beta , sign_mu , a0,mass_w ; / * msugra parameters * /      float lambda , mmess , n5,cgrav , m3_2 ; / * amsb , gmsb parameters * /      float mass_z , mass_b , mass_top_pole , mass_tau_pole ; / * sm parameters * /      float inv_alpha_em , alpha_s_mz , alpha , gfermi , gauge_q ; / * sm parameters * /      float charg_umix[3][3],charg_vmix[3][3],stop_mix[3][3],sbot_mix[3][3 ] , stau_mix[3][3],neut_mix[5][5],mass_neut[5 ] ; / * mass mixing matrices * /      float min , m1_min , m2_min , m3_min , at_min , ab_min , atau_min , m2h1_min , m2h2_min , mu_min , m2a_min , tb_min , ma_min ; / * optional input parameters at scale min * /      float mel_min , mmul_min , mtaul_min , mer_min , mmur_min , mtaur_min ; / * optional input parameters at scale min * /      float mql1_min , mql2_min , mql3_min , mur_min , mcr_min , mtr_min , mdr_min , msr_min , mbr_min ; / * optional input parameters at scale min * /      float n51,n52,n53,m2h1_q , m2h2_q ; / * optional input   parameters ( n51 ... 3 : gmsb ) * /      float mass_d , mass_u , mass_s , mass_c , mass_t , mass_e , mass_nue , mass_mu , mass_num , mass_tau , mass_nut ; / * sm masses * /      float mass_gluon , mass_photon , mass_z0 ; / * sm masses * /      float mass_h0,mass_ch0,mass_a0,mass_h , mass_dnl , mass_upl , mass_stl , mass_chl , mass_b1,mass_t1 ; / * higgs & superparticle masses * /      float mass_el , mass_nuel , mass_mul , mass_numl , mass_tau1,mass_nutl , mass_gluino , mass_cha1,mass_cha2 ; / * higgs & superparticle masses * /      float mass_dnr , mass_upr , mass_str , mass_chr , mass_b2,mass_t2,mass_er , mass_mur , mass_tau2 ; / * superparticle masses * /      float mass_nuer , mass_numr , mass_nutr , mass_graviton , mass_gravitino ; / * superparticle masses * /      float gp , g2,g3,yu_q , yut , yd_q , yub , ye_q , yutau ; / * yukawa couplings * /      float hmix_q , mu_q , tanb_gut , higgs_vev , ma2_q , msoft_q , m1_q , m2_q , m3_q ; / * parameters at scale q * /      float mel_q , mmul_q , mtaul_q , mer_q , mmur_q , mtaur_q , mql1_q , mql2_q , mql3_q , mur_q , mcr_q , mtr_q , mdr_q , msr_q , mbr_q ; / * masses at scale q * /      float au_q , a_u , a_c , a_t , ad_q , a_d , a_s , a_b , ae_q , a_e , a_mu , a_tau ;   / * trilinear couplings * / } parameters ; ....    this structure contains all the important parameters and is called by several functions in the program .",
    "we can now review the important routines of the code .    * ` void init_param(struct parameters * param ) ` +   + this function initializes the ` param ` structure , setting the parameters at 0 , apart for the sm masses and the value of the strong coupling constant at the @xmath90-boson mass , which receive the values given in @xcite .",
    "moreover , ` model ` is set to -1 as an indicator for a wrong reading of the slha file .",
    "after the reading step , a value remaining -1 indicates a problem with the slha file . + * ` int les_houches_reader(char name [ ] , struct parameters * param ) ` +   + this routine is able to read a slha file whose name is contained in ` name ` , and put all the read parameters in the structure ` param ` . this function has been written based on @xcite .",
    "it can be reused independently from ` superiso ` , provided ` struct parameters ` is defined . + * ` int softsusy_sugra(float m0 , float m12 , float tanb , float a0 , ` + ` float sgnmu , float mtop , float mbot , float alphas_mz , char name [ ] ) ` * ` int isajet_sugra(float m0 , float m12 , float tanb , float a0 , ` + ` float sgnmu , float mtop , char name [ ] ) ` * ` int softsusy_gmsb(float lambda , float mmess , float tanb , int n5 , ` + ` float cgrav , float sgnmu , float mtop , float mbot , float alphas_mz , ` + ` char name [ ] ) ` * ` int softsusy_amsb(float m0 , float m32 , float tanb , float sgnmu , ` + ` float mtop , float mbot , float alphas_mz , char name [ ] ) ` +   + the above four routines call ` softsusy ` or ` isajet ` to compute the mass spectrum corresponding to the input parameters .",
    "the input parameters are described in the next section .",
    "these routines return a slha file whose name has to be specified in the string ` name ` .",
    "+ * ` float alpha_s_running(float q , float mtop , float mbot , ` + ` float alphas_mz , float mz ) ` + this function computes the strong coupling constant at the energy scale ` q ` , provided the top quark mass ` mtop ` , bottom quark mass ` mbot ` , @xmath90-boson mass ( @xmath91 ) ` mz ` and @xmath92 ` alphas_mz ` are given , so that the matching can be made between the scales corresponding to different flavor numbers . the main formula for calculating @xmath93",
    "is based on @xcite . + * ` float running_mass(float quark_mass , float qinit , float qfin , ` + ` float mtop , float mbot , float alphas_mz , float mz ) ` +   + this function calculates the running quark mass at the scale ` qfin ` , for a quark of mass ` quark_mass ` at the scale ` qinit ` , knowing the top quark mass ` mtop ` , bottom quark mass ` mbot ` , @xmath90-boson mass ( @xmath91 ) ` mz ` and @xmath92 ` alphas_mz ` , based on @xcite .",
    "+ * ` void c_calculator(float c0 [ ] , float c1[],float mu , ` + ` struct parameters * param ) ` +   + this procedure computes the lo contributions to the wilson coefficients @xmath94 ` c0 [ ] ` as well as the nlo contributions ` c1 [ ] ` at the energy scale ` mu ` , using the parameters of ` param ` , and based on @xcite . + * ` float delta0m(float c0[],float c0_spec[],float c1 [ ] , ` + ` float c1_spec[],struct parameters * param , float mub , float muspec , ` + ` float lambda_h ) ` +   + this function computes the isospin asymmetry as described in the precedent section , using both the lo and nlo parts of the wilson coefficients at scale ` mub ` ( ` c0 [ ] ` and ` c1 [ ] ` ) , and at the spectator scale ` muspec ` ( ` c0_spec [ ] ` and ` c1_spec [ ] ` ) , with the additional input @xmath95 ` lambda_h ` , in gev .",
    "it uses the ` complex.h ` library which is available in c compilers respecting the c99 standard .",
    "+   + * ` float delta0_calculator(char name [ ] ) ` +   + this function is somehow a `` container '' function whose argument is the name of the slha file , and which calls first ` init_param ` and ` les_houches_reader ` , then calculates the wilson coefficients with ` c_calculator ` , and finally returns the results of ` delta0 m ` . `",
    "main_example.c ` provides an example of computing the isospin asymmetry without calling this function , but by calling ` delta0 m ` directly .",
    "this is useful if the user wants to provide his / her own wilson coefficients as input .",
    "+   + * ` float brbsgamma_calculator(char name [ ] ) ` +   + this function , similar to the precedent one , computes the inclusive branching ratio of @xmath1 ( based on @xcite ) .",
    "it has to call two additional functions , ` cem_calculator ` and ` br_bsgamma ` .",
    "+   + * ` int charged_lsp_calculator(char name [ ] ) ` + this routine , whose argument is the name of the slha file , checks whether the lightest supersymmetric particle ( lsp ) is charged , and if so returns 0 , and if not returns 1 ( getting -1 means that a problem occurred ) .",
    "note that if gravitino is the lsp , then this routine verifies the charge of the nlsp .",
    "+   + * ` int excluded_mass_calculator(char name [ ] ) ` + + .lower bounds on the particle masses in gev @xcite . [ cols=\"^,^,^,^,^,^,^,^,^,^,^\",options=\"header \" , ]    + this routine , whose argument is the name of the slha file , checks whether the parameter space point is excluded by the collider constraints on the particle masses summarized in table  [ tab : masses ] , and if so returns 1 , otherwise returns 0 ( getting -1 means that a problem occurred ) .",
    "the constraints in table  [ tab : masses ] can be easily updated by modifying ` src / masses.c ` .",
    "the ` superiso ` package can be downloaded at + http://www3.tsl.uu.se/@xmath96nazila/superiso/ + after unpacking the package , the main directory , + ` superiso_vx.x ` + is created .",
    "it contains the ` src/ ` directory , in which all the source files can be found .",
    "the main directory contains also a ` makefile ` , a ` readme ` , five sample main programs ( ` main_example.c ` , ` msugra.c ` , ` amsb.c ` , ` gmsb.c ` and ` slha.c ` ) and one example of input file in the susy les houches accord format ( ` example.lha ` ) . the compiler options should be defined in the ` makefile ` , as well as the path to the isajet ` isasugra.x ` and softsusy ` softpoint.x ` executable files , when needed . this package has been written for a c compiler respecting the c99 standard .",
    "in particular , it has been tested successfully with the gnu c compiler and the intel c compiler on linux 32-bits or 64-bits machines , and with ` softsusy ` 2.0.14 and ` isajet ` 7.75 .",
    "additional information can be found in the ` readme ` file .",
    "+ to compile the library , type + ` make ` + this creates the ` libisospin.a ` in ` src/ ` .",
    "then , to compile one of the five programs provided in the main directory , type : ` make name ` + where ` name ` can be ` main_example ` , ` msugra ` , ` amsb ` , ` gmsb ` or ` slha ` .",
    "this creates an executable with the ` .x ` extension .",
    "note that ` slha ` does not need ` isajet ` or ` softsusy ` programs , but ` msugra ` , ` amsb ` and ` gmsb ` need at least one of them . beside , ` main_example ` is somehow a test  program in which ` isajet ` and ` softsusy ` have been disabled by default , but their use can be restored by uncommenting ` # define use_isajet ` and ` # define use_softsusy ` at the beginning of the program .",
    "+   + ` main_example.x ` has to be run without any argument , and performs the calculation of test  points using the main routines of the library .",
    "it can be used as a basis for writting the user s own main program .",
    "+   + ` slha.x ` calculates the isospin asymmetry and the inclusive branching ratio using the parameters contained in the slha file whose name has to be passed as input parameter .",
    "+   + ` amsb.x ` , ` gmsb.x ` and ` msugra.x ` also calculate the isospin asymmetry and the inclusive branching ratio , starting first by calculating the mass spectrum and couplings thanks to ` isajet ` ( for ` msugra.x ` only ) and/or ` softsusy ` within respectively the amsb , gmsb and msugra parameter spaces .",
    "for all these programs , arguments referring to the usual input parameters have to be passed to the program .",
    "if not , a message will describe which parameters have to be specified .",
    "+   + a more detailled presentation of the input and output of these modules is given in the next section .",
    "the inputs and outputs of the five provided main programs are described in the following . however",
    ", a 0-value for the calculation of isospin asymmetry or branching ratio corresponds to a problem in reading the slha file , which either has not been generated by ` isajet ` or ` softsusy ` for any reason , or is not conformed to the slha format .    * ` main_example.x ` + this program is an example demonstrating the capabilities of ` superiso ` .",
    "no input argument is needed as the calls to the procedure are hardcoded .",
    "if + ` # define use_isajet ` + ` # define use_softsusy ` + is uncommented at the beginning of the program , it will call first the functions ` isajet_sugra ` , ` softsusy_sugra ` , ` softsusy_amsb ` and ` softsusy_gmsb ` , with an adequate set of input parameters and calculate the isospin asymmetry and branching ratio thanks to the routines ` delta0_calculator ` and ` brbsgamma_calculator ` .",
    "it will then calculate the isospin asymmetry and branching ratio corresponding to the parameters of the ` example.lha ` file .",
    "finally , input parameters ( _ i.e. _ the wilson coefficients , the masses of strange , charm , bottom and top quarks , the @xmath90-boson mass @xmath91 and @xmath92 ) corresponding to the standard model case are given directly in the program , and the isospin asymmetry is calculated using the ` delta0 m ` function .",
    "this last calculation is provided as an example of calculations of isospin asymmetry without a slha file or without ` isajet ` or ` softsusy ` .",
    "if the ` # define ` s are uncommented , the output is for example + + .... delta0_isajet_sugra=0.101417 br_isajet_sugra=0.000257    delta0_softsusy_sugra=0.100604 br_softsusy_sugra=0.000260    delta0_softsusy_amsb=0.096156 br_softsusy_amsb=0.000286    delta0_softsusy_gmsb=0.079418 br_softsusy_gmsb=0.000393    delta0_example_slha=0.100568 br_example_slha=0.000261    delta0_direct_sm=0.086136 .... * ` slha.x ` + this program calculates the isospin asymmetry and inclusive branching ratio while reading the needed parameters in slha files .",
    "it also checks whether the susy parameter space point is excluded by the experimental mass limits .",
    "for example , the command + + .... ./slha.x",
    "example.lha    .... + returns + + .... delta0=0.100568 br=0.000261 excluded_mass=0 .... * ` msugra.x ` + this program generates the isospin asymmetry and inclusive branching ratio corresponding to the msugra parameters generated by ` isajet ` and/or ` softsusy `",
    ". it also checks whether the susy parameter space point is excluded by the experimental mass limits , or whether the lsp is charged .",
    "if only one of these generators is available the corresponding ` # define ` has to be commented .",
    "the necessary arguments to this program are : + * * @xmath97 : universal scalar mass at gut scale , * * @xmath98 : universal gaugino mass at gut scale , * * @xmath99 : trilinear soft breaking parameter at gut scale , * * @xmath100 : ratio of the two higgs vacuum expectation values . + + optional arguments can also be given : + * * @xmath101 : sign of higgsino mass term , positive by default * * @xmath102 : top quark pole mass , by default 172.5 gev , * * @xmath103 : scale independent b - quark mass , by default 4.2 gev ( option only available for ` softsusy ` ) , * * @xmath92 : strong coupling constant at the @xmath90-boson mass , by default 0.1172 ( option only available for ` softsusy ` ) .",
    "+ + with ` softsusy ` 2.0.14 and ` isajet ` 7.75 , running the program with : + + .... ./msugra.x 500 500 0 50 .... + returns + + .... delta0_softsusy=0.100604 br_softsusy=0.000260 charged_lsp_softsusy=0 excluded_masses_softsusy=0    delta0_isajet=0.101457",
    "br_isajet=0.000257 charged_lsp_isajet=0 excluded_masses_isajet=0 .... * ` amsb.x ` + this program generates the isospin asymmetry and inclusive branching ratio corresponding to the amsb parameters generated by ` softsusy `",
    ". it also checks whether the susy parameter space point is excluded by the experimental mass limits .",
    "the necessary arguments to this program are : + * * @xmath97 : universal scalar mass at gut scale , * * @xmath104 : gravitino mass at gut scale , * * @xmath100 : ratio of the two higgs vacuum expectation values .",
    "+ + optional arguments are the same as for the msugra case . with ` softsusy ` 2.0.14 , running the program with : + + .... ./amsb.x 400 10000 30 -1 .... + returns + + .... delta0=0.110040 br=0.000224 excluded_mass=1 .... * ` gmsb.x ` + this program generates the isospin asymmetry and inclusive branching ratio corresponding to the gmsb parameters generated by ` softsusy ` .",
    "the necessary arguments to this program are : + * * @xmath105 : scale of the susy breaking in gev ( usually 10,000  100,000 gev ) , * * @xmath106 : messenger mass scale ( @xmath107 ) , * * @xmath108 : equivalent number of @xmath109 messenger fields , * * @xmath100 : ratio of the two higgs vacuum expectation values .",
    "+ + optional arguments are the same as for the msugra case , with an additional one : + * * @xmath110 ( @xmath111 ) : ratio of the gravitino mass , to its value for a breaking scale of @xmath105 , 1 by default .",
    "+ + with ` softsusy ` 2.0.14 , running the program with : + + .... ./gmsb.x 60000 80000 5 50 .... + returns + + ....",
    "delta0=0.079901 br=0.000390 excluded_mass=0 ....",
    "the ` superiso ` code has been extensively tested , and compared to the calculation of the isospin asymmetry available in the literature for the standard model @xcite , and with the wilson coefficients and inclusive branching ratios calculated for example by micromegas @xcite , and they globally show a good agreement . +   + figure  [ fig ] shows the dependence of the isospin asymmetry in function of the parameters of the msugra and amsb parameter spaces , and reveals that isospin symmetry breaking can strongly constrain the supersymmetric parameters space , especially for high @xmath112 value .",
    "+ a more complete study of the constraints by isospin asymmetry in different supersymmetric parameter spaces is presented in @xcite .     in the msugra parameter space ( in the top ) and of @xmath104 in the amsb parameter space ( in the bottom ) , for several values of @xmath100 .",
    "the dashed violet horizontal line corresponds to the experimental limit of @xcite.,title=\"fig:\",width=377 ] +   in the msugra parameter space ( in the top ) and of @xmath104 in the amsb parameter space ( in the bottom ) , for several values of @xmath100 .",
    "the dashed violet horizontal line corresponds to the experimental limit of @xcite.,title=\"fig:\",width=377 ]",
    "the ` superiso ` package allows to calculate the isospin asymmetry of @xmath0 in the mssm with minimal flavor violation , for any file in the slha format .",
    "it can also call ` isajet ` or ` softsusy ` to generate a slha parameter file in the msugra , amsb or gmsb supersymmetric parameter space .",
    "the package also provides a routine to calculate the inclusive branching ratio of @xmath113 to enable a comparison between the constraints on the supersymmetric parameters from the branching ratio and from the isospin asymmetry .",
    "the ` superiso ` program has largely benefited from the help of alexandre arbey .",
    "thanks also to the members of the thep group at uppsala university for the useful discussions ."
  ],
  "abstract_text": [
    "<S> we present a program for calculating the isospin symmetry breaking of the @xmath0 decay in the mssm with minimal flavor violation . this program calculates the nlo supersymmetric contributions to the isospin asymmetry , using the effective hamiltonian approach and within the qcd factorization method . </S>",
    "<S> we show that isospin symmetry breaking proves to be a very restrictive observable , in particular in the msugra parameter space . </S>",
    "<S> the program also calculates the inclusive branching ratio associated to @xmath1 transition , as a comparison reference . </S>",
    "<S> +   + pacs numbers : 11.30.pb , 12.15.mm , 12.60.jv , 13.20.he    * superiso : a program for calculating the + isospin asymmetry of @xmath0 in the mssm *    f. mahmoudinazila/ ] + _ high energy physics , uppsala university , box 535 , 75121 uppsala , sweden _ </S>"
  ]
}