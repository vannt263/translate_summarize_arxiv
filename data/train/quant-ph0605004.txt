{
  "article_text": [
    "in this paper , we give a description of a recent quantum algorithm created by aharonov , jones , and landau @xcite for approximating the values of the jones polynomial at roots of unity of the form @xmath0 , for @xmath1 a positive integer .",
    "we do so with two objectives in mind .",
    "the first is to describe the algorithm in such a way as to make explicit the underlying and inherent control structure .",
    "the second is to make this algorithm accessible to a larger audience .    to avoid cluttering this exposition , we focus solely on the version of this quantum algorithm based on the markov trace closure of a braid .",
    "the alternative platt closure version is left as an exercise for the reader .",
    "readers already familiar with knot theory may want to skip to section 7 .",
    "in its most general form , knot theory is the study of the fundamental problem of placement :    * the placement problem . *",
    "_ when are two placements of a space _ @xmath2 _ in a space _ @xmath3 _ the same or different ?",
    "_    fig01.eps + * figure 1 .  the placement problem . *    in its most renowned form ,",
    "knot theory is the study of the placement of a 1-sphere @xmath4(or a disjoint union of 1-spheres ) in real 3-space @xmath5 ( or the 3-sphere @xmath6 ) , called the * ambient space*.  in this case , `` placement '' usually means a smooth ( or piecewise linear ) embedding , i.e. , a smooth homeomorphism into the ambient space .",
    "such a placement is called a * knot * if a single 1-sphere is embedded ( or a * link * , if a disjoint union of many 1-spheres is embedded . )    two knots ( or links ) are said to be the same , i.e. , of the * same knot type * , if there exists an orientation preserving autohomeomorphism of the ambient space carrying one knot into the other .",
    "otherwise , they are said to be different , i.e. , of * different knot type*.  such knots are frequently represented by a knot diagram , i.e. , a planar 4-valent graph with vertices appropriately labelled as undercrossings / overcrossings , as shown in figure 2 .",
    "fig02.eps + * figure 2 .  a knot diagram . *    the fundamental problem of knot theory can now be stated as :    * the fundamental problem of knot theory .",
    "*  _ when are two knots of the same or of different knot type ?",
    "_    a useful knot theoretic research tool is reidemeister s theorem , which makes use of the reidemeister moves as defined in figure 3 . :    [ * reidemeister*]two knot diagrams represent the same knot type if and only if it is possible to transform one into the other by applying a finite sequence of reidemeister moves .",
    "the standard approach to attacking the fundamental problem of knot theory is to create knot invariants for distinquishing knots .  by a * knot invariant * @xmath7 we mean a map from knots to a specified mathematical domain which maps knots ( or links ) of the same type to the same mathematical object .",
    "_ thus , if an invariant is found to be different on two knots ( or links ) , then the two knots ( or links ) can not be of the same knot type _ !    the jones polynomial is one such invariant , and indeed a very significant one .",
    "the jones polynomial maps each knot ( or link ) to a laurent polynomial with integer coefficients , i.e. , an invariant with domain the laurent ring @xmath8   $ ] .",
    "if two knots ( or links ) have different jones polynomials then they must be different .",
    "a definition of this famous knot invariant is given in section 6 of this paper .",
    "but before we define the jones polynomial we will need to look at a group invented by emil artin , i.e. , the braid group , which is now beginning to have an impact on quantum computing .",
    "the @xmath10**-stranded braid group * * @xmath9 is is the group generated by the symbols @xmath11 subject to the defining relations @xmath12{ll}% b_{i}b_{i+1}b_{i}=b_{i+1}b_{i}b_{i+1 } & \\text{for \\ } 1\\leq i < n\\\\ & \\\\ b_{i}b_{j}=b_{j}b_{i } & \\text{for \\ }",
    "\\left\\vert i - j\\right\\vert \\geq2 \\end{array } \\right.\\ ] ]    the braid group @xmath9 is easily understood in terms of diagrammatics , as shown in figures 4 to 13 .    as illustrated in figure 4",
    ", an element of the braid group @xmath13 can be thought of as a hatbox with the three points at the top connected to the three points at the bottom by smooth nonintersecting curves , called * strands*.  as illustrated in figures 5 and 6 , two such elements of @xmath9 are equal if it is possible to continuously move within the hatbox the strands of one braid into the strands of the other without cutting or breaking the strands and without letting the strands pass through one another .",
    "figure 5 shows two equal braids , and figure 6 shows two braids that can not be equal .  as illustrated in figure 7 ,",
    "the enclosing hatbox is usually omitted , but understood to be there .",
    "the product of two elements of @xmath9 is defined , as illustrated in figure 8 , by simply stacking one hatbox on top of the other .  under this definition of multiplication",
    ", it can be shown that every braid has a multiplicative inverse .",
    "an example is given in figure 9 of the inverse of a braid .",
    "the braid group actually has a finite set of generators , as shown in figure 10 .  a complete set of defining relations among these generators",
    "are shown in figures 11 and 12 .",
    "why are braids of importance in knot theory ?    the answer to this questions begins by observing that every braid @xmath14 can be converted into a knot ( or link ) by forming the closure ( a.k.a . ,",
    "trace ) @xmath15 as shown in figure 13 .",
    "then , of course , there is the famous markov theorem telling us when two braids produce the same knot ( or link ) :    [ markov]two braids @xmath16 and @xmath17 produce the same knot ( or link ) under braid closure if and only if there exists a finite sequence of markov moves that transforms one braid into the other .    the two markov moves @xmath18 and @xmath19 are are shown in figures 14 and 15 .",
    "most amazingly , the process of transforming a braid into a knot ( or link ) can be reversed , as stated by alexander s theorem :    [ alexander]every knot ( or link ) is the closure of a braid .    returning to our original highly algebraic definition of the braid group @xmath9 , we should mention that each braid @xmath14 in @xmath9 can be expressed as a product of the generators @xmath11 and their inverses @xmath20 .",
    "thus , each braid @xmath14 can be written in the form@xmath21 where @xmath22 for @xmath23 .",
    "we will call such a product in the generators @xmath11 and their inverses @xmath20 a * word * defining the braid @xmath14 .",
    "two words define the same braid @xmath14 if and only if it is possible transform one into the other by applying a finite sequence of tieze transformations .  for a definition of tieze transformations , we refer the reader to crowell and fox@xcite .",
    "finally , we define the * writhe * of a braid @xmath14 , written @xmath24 , as the sum of the exponents in any word defining the braid .",
    "our next stepping stone to the definition of the jones polynomial is an algebra , called the temperley - lieb algebra .",
    "let @xmath26 be an indeterminate complex number .",
    "then for each positive integer @xmath10 , the * temperley - lieb algebra * @xmath25 is defined as the algebra with identity @xmath27 generated by the identity @xmath27 and the symbols @xmath28 subject to the defining relations@xmath12{ll}% e_{i}e_{j}=e_{j}e_{i } & \\text{for \\ } \\left\\vert i - j\\right\\vert \\geq2\\\\ & \\\\ e_{i}e_{i\\pm1}e_{i}=e_{i } & \\text{for \\ }",
    "1\\leq i < n\\\\ & \\\\ e_{i}^{2}=de_{i } & \\text{for \\ } 1\\leq i < n \\end{array } \\right.\\ ] ]    the temperley - lieb algebra @xmath25 is easily understood in terms of diagrammatics@xcite@xmath29@xcite ] , as illustrated in figures 4 through 13 .     as shown in figure 13 , an element of the temperley - lieb algebra @xmath30 can be thought of as the algebra consisting of all linear combinations of rectangles , each rectangle with @xmath31 points at the top and @xmath31 points at the bottom connected by smooth non - intersecting curves , called * strands*.  as shown in figures 17 and 18 , two such elements of @xmath25 are equal if it is possible to continuously move the strands of one into the strands of the other without cutting or breaking the strands and without letting the strands pass through each other .",
    "figure 17 shows two equal elements , and figure 18 shows two non - equal elements .  as shown in figure 19 ,",
    "the enclosing rectangle is usually omitted , but understood to be there .",
    "the product of two elements of @xmath25 is defined , as shown in figure 20 , i.e. , by stacking one rectangle on top of the other .  as illustrated in figure 21 ,",
    "if a circle should happen to arise as a result of the product , then it is simply replaced by the indeterminate @xmath26 times the resulting rectangle with the circle omitted .",
    "the generators of the temperley - lieb algebra are shown in figure 22 .",
    "we leave , as an amusing exercise for the reader , the task of translating the complete set of defining relations for the temperley - leib algebra given above into diagrammatics .     we would be amiss if we did not mention that there is a map @xmath32 from the temperley - lieb algebra @xmath25 to the complex numbers @xmath33 , called the * markov trace * , satisfying the following three conditions :    * @xmath34 * @xmath35 for all @xmath2 and @xmath3 in @xmath25 * if @xmath36 , then @xmath37    a diagrammatic definition of the markov trace is shown in figure 23 .",
    "we will later need the following theorem :    the above three conditions uniquely determine the markov trace , i.e. , any map @xmath38 satisfying the above three conditions must be the same as that defined by figure 23 .",
    "let @xmath26 be an indeterminate complex number , and let @xmath39 also be an indeterminant complex number such that @xmath40 .",
    "let @xmath41 be the corresponding temperley - lieb algebra , and let @xmath9 denote the @xmath10-stranded braid group .",
    "then the * jones representation * @xmath42 is the group representation defined by @xmath12{lll}% b_{i } & \\longmapsto & ae_{i}+a^{-1}1\\\\ &   & \\\\ b_{i}^{-1 } & \\longmapsto & a^{-1}e_{i}+a1 \\end{array } \\right.\\ ] ] where @xmath11 denote the generators of the braid group @xmath9 , and where @xmath43 denote the generators of the temperley - lieb algebra @xmath25 .",
    "we leave for the reader s amusement the exercise of verifying that the images under @xmath44 of the generators @xmath11 satisfy the defining relations of the braid group .",
    "we are now finally in a position to define the jones polynomial .",
    "let @xmath14 be an element of the @xmath10-stranded braid group @xmath9 , and let @xmath45 denote the knot ( or link ) constructed from the closure of the braid @xmath14 .",
    "then the * jones polynomial * @xmath46 of the knot ( or link ) @xmath45 is the laurent polynomial in the polynomial ring @xmath8   $ ] over the integers @xmath47 given by @xmath48 where @xmath49 , where @xmath50 denotes the writhe of the braid @xmath14 , and where @xmath51 denotes the markov trace of the value of the jones representation @xmath44 on the braid @xmath14 .",
    "our objective is to describe the polytime quantum algorithm in ajl@xcite for approximating values of the jones polynomial @xmath53 at the primitive @xmath1-th roots of unity @xmath54 for positive integers @xmath1 .  to this end , we begin by constructing a representation of the temperley - lieb algebra @xmath41 which carries the image of the jones representation @xmath55 onto a group of unitary transformations .",
    "let @xmath56 denote the graph of @xmath57 vertices and @xmath58 edges given in figure 24 .    fig24.eps + * figure 24 .",
    "the graph * @xmath56 * of * @xmath57 * vertices and * @xmath58 * edges . *    the adjacency matrix @xmath59 of the graph @xmath56",
    "is easily seen to be @xmath60{rrrrrr}% 0 & 1 & 0 & \\cdots & 0 & 0\\\\ 1 & 0 & 1 &   & 0 & 0\\\\ 0 & 1 & 0 &   &   & \\\\ & \\vdots &   & \\ddots &   & \\\\ 0 & 0 & 0 &   & 0 & 1\\\\ 0 & 0 & 0 & \\cdots & 1 & 0 \\end{array } \\right)\\ ] ] moreover , @xmath61 can be shown to be an eigenvalue of @xmath59 corresponding to the eigenvector @xmath62    we can now construct our representation as follows :    let@xmath63 denote the set of paths in the graph @xmath56 of * length * @xmath10 starting at the vertex @xmath27 , and let @xmath64 denote the hilbert space with orthonormal basis @xmath65 with basis elements labelled by the paths @xmath66 in @xmath63 .    interpreting @xmath67 as `` to the left '' and @xmath27 as `` to the right",
    ", '' we identify each length @xmath10 path @xmath66 with a binary string of length @xmath10 .     for each path @xmath66 ,",
    "let @xmath68 be the subpath corresponding to the first @xmath69 bits of @xmath66 , let @xmath70 denote the subpath corresponding to bits @xmath71 up to and including bit @xmath72 of @xmath66 , and finally let @xmath73 denote the subpath of @xmath66 corresponding to bits @xmath74 up to and including the last @xmath10-th bit .",
    "let @xmath75 be the endpoint of the subpath @xmath68 .",
    "hence , @xmath76 .",
    "select @xmath61 .  since @xmath39 is related to @xmath26 via the formula @xmath40 , we choose among the first four possible choices @xmath77 for @xmath39 the value @xmath78    we are now ready to define a representation@xmath79 of the temperley - lieb algebra @xmath25 into the group ring @xmath80 of the group @xmath81 of unitary transformations on the hilbert space @xmath64 by specifying the images @xmath82 of each of the generators @xmath83 of the temperley - lieb algebra @xmath41 , taking great care to make sure that the @xmath84 s satisfy the same defining relations as the @xmath83 s .",
    "we define @xmath84 as : @xmath85{ll}% 0 & \\text{if \\ } p^{\\left\\lfloor i\\cdots i+1\\right\\rfloor } = 00\\\\ & \\\\ \\frac{\\lambda_{e_{i}\\left (   p\\right )   -1}}{\\lambda_{e_{i}\\left (   p\\right )   } % } \\left\\vert p\\right\\rangle + \\frac{\\sqrt{\\lambda_{e_{i}\\left (   p\\right ) -1}\\lambda_{e_{i}\\left",
    "(   p\\right )   + 1}}}{\\lambda_{e_{i}\\left (   p\\right )   } % } \\left\\vert p^{\\left .",
    "i-1\\right\\rfloor } 10p^{\\left\\lfloor i+2\\right . } \\right\\rangle   & \\text{if \\ } p^{\\left\\lfloor i\\cdots i+1\\right\\rfloor } = 01\\\\ & \\\\ \\frac{\\sqrt{\\lambda_{e_{i}\\left (   p\\right )   -1}\\lambda_{e_{i}\\left (   p\\right ) + 1}}}{\\lambda_{e_{i}\\left (   p\\right )   } } \\left\\vert p^{\\left .",
    "i-1\\right\\rfloor } 01p^{\\left\\lfloor i+2\\right .   } \\right\\rangle + \\frac{\\lambda_{e_{i}\\left ( p\\right )   + 1}}{\\lambda_{e_{i}\\left (   p\\right )   } } \\left\\vert p\\right\\rangle   & \\text{if \\ } p^{\\left\\lfloor i\\cdots i+1\\right\\rfloor } = 10\\\\ & \\\\ 0 & \\text{if \\ } p^{\\left\\lfloor i\\cdots i+1\\right\\rfloor } = 11 \\end{array } \\right.\\ ] ] we leave for the reader the exercise of showing that the transformations @xmath84 satisfy the defining identities of the @xmath83 s , i.e. , the identities @xmath12{ll}% \\phi_{i}\\phi_{j}=\\phi_{j}\\phi_{i } & \\text{for \\ }",
    "\\left\\vert i - j\\right\\vert \\geq2\\\\ & \\\\ \\phi_{i}\\phi_{i\\pm1}\\phi_{i}=\\phi_{i } & \\text{for \\ } 1\\leq i < n\\\\ & \\\\ \\phi_{i}^{2}=d\\phi_{i } & \\text{for \\ }",
    "1\\leq i < n \\end{array } \\right.\\ ] ] and hence that @xmath86 is a legitimate representation of the temperley - leib algebra @xmath25 .",
    "we next need to construct a trace @xmath87 on the image of the representation @xmath89 which is compatible with the markov trace @xmath90 , i.e. , a trace @xmath87 such that the following diagram is commutative@xmath91{lcl}% tl_{n}\\left (   d\\right )   & \\quad\\overset{\\phi}{\\longrightarrow}\\quad & \\operatorname{im}\\left (   \\phi\\right )   \\subset\\mathbb{c}u\\left (   \\mathcal{h}% _ { n , k}\\right ) \\\\ & tr_{n}\\searrow\\quad & \\quad\\downarrow\\widetilde{tr}\\\\ &   & \\quad\\ \\mathbb{c}% \\end{array}\\ ] ] for this construction , we need the following lemma :    the representation @xmath52 maps each ket @xmath92 to a linear combination of kets each labeled by a path of the same length as the path @xmath66 , and each having the same endpoint as @xmath93    an immediate corollary is :    let @xmath94 be the subset of @xmath63 of all paths @xmath66 in @xmath56 of length @xmath10 that start at the vertex @xmath27 and end at the vertex @xmath95 , where @xmath96 , and let @xmath97 be the hilbert subspace of @xmath64 defined by the orthonormal basis @xmath98 .",
    "then the representation @xmath89 splits into the direct sum of representations @xmath99 where @xmath100 is the representation arising from the projection @xmath101 .",
    "hence , the image @xmath102 of the representation @xmath103 lies in the direct sum of the algebras @xmath104 , @xmath96 , i.e. , @xmath105    the above corollary gives us the latitude of searching for a compatible trace from among all the traces @xmath106 which are constructed by taking any linear combination of the * standard traces * @xmath107 .",
    "of these traces , the desired compatible trace is found to be the one given in the following theorem :    let @xmath108 be the components of the eigenvector @xmath109 given in section 6 , and let @xmath110 .",
    "then the trace @xmath111 defined by@xmath112 is compatible with the markov trace , i.e. , @xmath87 is a trace such that the diagram @xmath91{lcl}% tl_{n}\\left (   d\\right )   & \\quad\\overset{\\phi}{\\longrightarrow}\\quad & \\operatorname{im}\\left (   \\phi\\right )   \\subseteq% % tcimacro{\\dbigoplus \\limits_{\\ell=1}^{k-1}}% % beginexpansion { \\displaystyle\\bigoplus\\limits_{\\ell=1}^{k-1 } } % endexpansion \\mathbb{c}u\\left (   \\mathcal{h}_{n , k,\\ell}\\right )   \\subset\\mathbb{c}u\\left ( \\mathcal{h}_{n , k}\\right ) \\\\ & tr_{n}\\searrow\\quad & \\qquad\\quad\\quad\\ \\ \\downarrow\\widetilde{tr}\\\\ &   & \\qquad\\quad\\quad\\ \\ \\mathbb{c}% \\end{array}\\ ] ] is commutative .  in other words",
    ", @xmath87 is a trace such that @xmath113 .",
    "since the markov trace @xmath114 is the unique trace satisfying the following three conditions    * @xmath34 * @xmath35 for all @xmath2 and @xmath3 in @xmath25 * if @xmath36 , then @xmath37    the proof of the above theorem consists simply in verifying that @xmath115 satisfies each of these conditions .",
    "but where are we in regard to our objective of creating a quantum algorithm for approximating the value of the jones polynomial at a root of unity of the form @xmath0 , where @xmath1 is an arbitrary positive integer ?    for a knot ( or link ) given by the closure @xmath45 of an @xmath10-stranded braid @xmath14 , we have seen that the jones polynomial is given by the expression @xmath116 where @xmath26 and @xmath39 are indeterminate complex numbers related by the equation @xmath40 , and where @xmath49 .",
    "setting @xmath117 ( which implies @xmath61 and @xmath54 ) , we have the value of the jones polynomial at @xmath118 is given by @xmath119 since @xmath120 is easily computed , the task of determining @xmath121 reduces to that of evaluating the trace @xmath122    but from the previous two sections , we have @xmath123 = \\widetilde{tr}_{n}\\left [   \\left ( % tcimacro{\\dbigoplus \\limits_{m=1}^{k-1}}% % beginexpansion { \\displaystyle\\bigoplus\\limits_{m=1}^{k-1 } } % endexpansion \\phi^{(m)}\\circ\\rho_{a}\\right )   \\left (   \\beta\\right )   \\right ]   = \\frac{1}{n}% % tcimacro{\\dsum \\limits_{m=1}^{k-1}}% % beginexpansion { \\displaystyle\\sum\\limits_{m=1}^{k-1 } } % endexpansion \\lambda_{m}tr\\left [   \\left (   \\phi^{(m)}\\circ\\rho_{a}\\right )   \\left ( \\beta\\right )   \\right ]   \\text { , } % \\ ] ] where @xmath124 denotes the standard trace , where @xmath125 , and where @xmath126 .  thus , our objective reduces to finding the trace of each of the following @xmath57 unitary transformations ( called * global gates * ) @xmath127    if the knot ( or link ) is given by the closure of a braid @xmath14 defined by the word @xmath128 where @xmath11 are the generators of the braid group @xmath9 , and where @xmath22 for @xmath129 , then each unitary transformation @xmath130 is given by @xmath131 where @xmath132 denotes the unitary transformation ( called an * intermediate gate*)@xmath133 thus , the trace @xmath134 we seek to approximate is given by the following expression @xmath135   = \\frac{1}{n}% % tcimacro{\\dsum \\limits_{m=1}^{k-1}}% % beginexpansion { \\displaystyle\\sum\\limits_{m=1}^{k-1 } } % endexpansion \\lambda_{m}tr\\left [ % tcimacro{\\dprod \\limits_{\\ell=1}^{l}}% % beginexpansion { \\displaystyle\\prod\\limits_{\\ell=1}^{l } } % endexpansion \\left (   u_{j\\left (   \\ell\\right )   } ^{(m)}\\right )   ^{\\epsilon\\left ( \\ell\\right )   } \\right ]   \\text { \\ .}%\\ ] ]    we are finally in a position to describe the quantum algorithm found in @xcite for approximating the jones polynomial @xmath46 at @xmath54 as a quantum algorithm consisting of the completion of two sequences of steps , called * phases*.  the first is a preliminary phase called the * compilation phase*.  after completion , the compilation phase is immediately followed by a second phase , called the * execution phase*.",
    "the compilation phase is illustrated in figure  25 .",
    "fig25.eps + * figure 25 .  the compilation phase . *",
    "it consists of the following steps :    * software compilation . * on receiving a regular diagram of a knot ( or link ) @xmath136 as input , the algorithm described by alexander s theorem is executed to produce a regular diagram of a braid @xmath14 whose closure gives the knot ( or link ) @xmath136 .",
    "( see birman@xcite . )",
    "an algorithm , called * braid combing * , is then applied to the planar diagram of the braid @xmath137 producing as output a word @xmath138 describing the braid , and also as a side effect , producing as output the integer @xmath10 giving the number of strands in @xmath14 .",
    "( once again , see birman@xcite . )  _ this word can be thought of as a computer program which will later be compiled into hardware .",
    "_     * first hardware compilation .",
    "*  upon receiving as input the integers @xmath1 and @xmath10 , use the kitaev - solovay@xcite,@xcite theorem to implement ( translate into hardware ) good approximations of each intermediate gate @xmath132 , @xmath139 , @xmath96 as a product of polynomially many elementary gates .",
    "* second hardware compilation .",
    "*  use the braid word @xmath140 to implement ( i.e. , to physically construct ) the global gates @xmath141 @xmath142 from the intermediate gates @xmath132 .",
    "in other words , construct @xmath141 using the formula @xmath143    * third hardware compilation . *  for each @xmath95 ( @xmath96 ) , construct from the global gate @xmath141 two quantum subroutines @xmath144 and @xmath145 , which upon input @xmath146  ( @xmath147 ) , output at random a ` 0 ' or a ` 1 ' according to the following probability distributions @xmath91{l}% qre_{m}\\left (   \\left\\vert p\\right\\rangle \\right )   = \\left\\ { \\begin{array } [ c]{ll}% 0 & \\text{with probability } prob\\left (   0\\right )   = \\frac{1}{2}+\\frac{1}% { 2}\\operatorname{re}\\left\\langle p|u^{(m)}|p\\right\\rangle \\\\ & \\\\ 1 & \\text{with probability } prob\\left (   1\\right )   = \\frac{1}{2}-\\frac{1}% { 2}\\operatorname{re}\\left\\langle p|u^{(m)}|p\\right\\rangle \\end{array } \\right . \\\\",
    "\\\\ qim_{m}\\left (   \\left\\vert p\\right\\rangle \\right )   = \\left\\ { \\begin{array } [ c]{ll}% 0 & \\text{with probability } prob\\left (   0\\right )   = \\frac{1}{2}-\\frac{1}% { 2}\\operatorname{im}\\left\\langle p|u^{(m)}|p\\right\\rangle \\\\ & \\\\ 1 & \\text{with probability } prob\\left (   1\\right )   = \\frac{1}{2}+\\frac{1}% { 2}\\operatorname{im}\\left\\langle p|u^{(m)}|p\\right\\rangle \\end{array } \\right .",
    "\\end{array}\\ ] ] where @xmath148 and @xmath149 denote respectively the real and the imaginary parts of the bracket @xmath150 and @xmath151 are repeated executed , then we obtain respectively approximations of the real and imaginary parts of the bracket @xmath152 , as displayed below : @xmath12{rr}%",
    "\\left (   \\#0^{\\prime}s-\\#1^{\\prime}s\\right )   /\\left",
    "(   \\#0^{\\prime}% s+\\#1^{\\prime}s\\right )   \\approx\\operatorname{re}\\left\\langle p|u^{(m)}%",
    "\\right ) \\\\ & \\\\ \\left (   \\#1^{\\prime}s-\\#0^{\\prime}s\\right )   /\\left",
    "(   \\#0^{\\prime}% s+\\#1^{\\prime}s\\right )   \\approx\\operatorname{im}\\left\\langle p|u^{(m)}%    \\right ) \\end{array } \\right.\\ ] ]    these two quantum subroutines @xmath144 and @xmath145 can be implemented using what has now come to be known as the * hadamard test*.  a wiring diagram defining the quantum subroutine @xmath153 is given in figure 26 .",
    "input to @xmath144 consists of the state @xmath146 and an ancillary qubit in state @xmath154 .",
    "after execution of the the wiring diagram , measurement of the ancillary qubit with respect to the standard basis will produce the desired probability distribution .",
    "similarly , figure 27 defines the quantum subroutine @xmath145",
    ".    fig26.eps + * figure 26 .  a wiring diagram describing the quantum subroutine * @xmath155**. input consists of the state * * @xmath92 * and an ancillarary qubit in state * @xmath156**.  the hadamard gate",
    "is denoted by * * @xmath157 . * after execution of the first hadard gate , the ancillary qubit is used to control the global gate * @xmath141**. measurement of the ancillary qubit after the execution of the second hadamard gate produces the desired probability distribution . *",
    "*    fig27.eps + * figure 27 .  a wiring diagram describing the quantum subroutine",
    "* @xmath158**. this subroutine is the same as the quantum subroutine * * @xmath155 * except for the additional single qubit phase gate * @xmath159{rr}% 1 & 0\\\\ 0 & i \\end{array }",
    "\\right )   $ ] * * . * *",
    "the compilation phase is then followed by the execution phase as described by the pseudocode given below : @xmath160{l}\\hline\\hline \\hspace{0.75in}\\textbf{execution phase for estimating } $ \\mathbf{v}_{\\beta ^{tr}}\\left (   e^{2\\pi i / k}\\right )   $ \\\\\\hline\\hline \\\\",
    "\\textsc{algorithm } $ ajk\\left (   n , k\\right )   $ \\\\ \\quad$trace=0$\\\\ \\quad\\textsc{loop } \\ $ m=1\\ldots k-1$\\\\ \\quad\\quad$trace_{m}=0$\\textsc { \\ and \\",
    "\\ } $ \\lambda_{m}=\\sin\\left (   \\pi",
    "m / k\\right )   $ \\\\ \\quad\\quad\\textsc{loop } \\",
    "$ p\\in\\mathcal{p}_{n , k , m}$\\\\ \\quad\\quad\\quad$re=0$\\textsc { \\ and \\ } $ im=0$\\\\ \\quad\\quad\\quad\\textsc{loop } \\ $ iteration=1\\ldots numberofiterations$\\\\ \\quad\\quad\\quad\\quad$realbit = qre_{m}\\left (   p\\right )   $ \\textsc { \\ and \\",
    "\\ } $ imgbit = qim_{m}\\left (   p\\right )   $ \\\\ \\quad\\quad\\quad\\quad$re = re+\\left (   -1\\right )   ^{realbit}$\\textsc { \\ \\ and \\ \\ } $ im = im-\\left (   -1\\right )   ^{imgbit}$\\\\ \\quad\\quad\\quad\\textsc{end } \\ $ iteration$\\textsc{-loop}\\\\ \\quad\\quad\\quad$trace_{m}=trace_{m}+\\left (   re+i\\ast im\\right ) /numberofiterations$\\\\ \\quad\\quad\\textsc{end } $ p$\\textsc{-loop}\\\\ \\quad\\quad$trace = trace+\\lambda_{m}\\ast trace_{m}$\\\\ \\quad\\textsc{end } $ m$\\textsc{-loop}\\\\ \\quad\\textsc{output } $ trace$\\\\ \\textsc{end algorithm } $ ajk$%",
    "\\end{tabular } } % \\ ] ]    this phase consists of three nested loops .",
    "the innermost loop calls the quantum subroutines @xmath144 and @xmath145 .",
    "the parameter @xmath161 is chosen according to the chernoof - hoeffding bound to provide the desired accuracy for the approximation .",
    "if resources are available , the outermost iteration loop can be replaced by a parallel implementation .",
    "indeed , much more could be said about the ajl quantum algorithm for the jones polynomial .",
    "but , for the time being , we will leave that task to one of our future forthcoming papers on this subject .",
    "this work is partially supported by the defense advanced research projects agency ( darpa ) and air force research laboratory , air force materiel command , usaf , under agreement number f30602 - 01 - 2 - 0522 .",
    "government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright annotation thereon .  this work also partially supported by the institute for scientific interchange ( isi ) , torino , the national institute of standards and technology ( nist ) , the mathematical sciences research institute ( msri ) , the isaac newton institute for mathematical sciences , and the l - o - o - p fund .",
    "ewing , b. and k.c .",
    "millett , * a load balanced algorithm for the calculation of the polynomial knot and link invariants * in * `` the mathematical heritage of c. f. gauss , '' * 225266 , world sci .",
    "publishing , river edge , nj , ( 1991 ) .",
    "freedman , m. , a.kitaev , m. larsen , and z. wang , * topological quantum computation * in * `` mathematical challenges of the 21st century ( los angeles , ca , 2000 ) , '' * bull .",
    "soc . , 40 , no",
    ". 1 , ( 2003 ) , 3138                                              welsh , d.j.a . , * the computational complexity of some classical problems from statistical physics * , in * `` disorder in physical systems , '' * g.r . grimmett and d.j.a .",
    "welsh , eds . , clarendon press , oxford , ( 1990 ) , 307 - 321 ."
  ],
  "abstract_text": [
    "<S> in this paper , we give a description of a recent quantum algorithm created by aharonov , jones , and landau for approximating the values of the jones polynomial at roots of unity of the form @xmath0 . </S>",
    "<S> this description is given with two objectives in mind . </S>",
    "<S> the first is to describe the algorithm in such a way as to make explicit the underlying and inherent control structure . </S>",
    "<S> the second is to make this algorithm accessible to a larger audience . </S>"
  ]
}