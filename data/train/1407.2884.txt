{
  "article_text": [
    "this paper is about the problem of controlling linear systems from a small number of inputs .",
    "our motivation comes from recent interest in the control of systems which are large - scale in the sense of being modeled with a very large number of variables .",
    "we mention the power grid as one example @xcite and biological networks within the human body as another @xcite .",
    "since these systems contain a very large number of interacting parts , it does not appear to be sensible to design control strategies for them which are able to affect most ( or even many ) of these parts .",
    "consequently we study here the general possibility of controlling systems from only a few inputs .    given a linear system , @xmath6 where @xmath7 is given",
    ", we consider whether it is possible to choose an input matrix @xmath8 such that the resulting system with input , @xmath9 is controllable , and the matrix @xmath10 has the smallest possible number of rows with a nonzero entry .",
    "note that each row of @xmath10 with a nonzero entry corresponds to a variable of the system of eq .",
    "( [ withoutinput ] ) affected with an input .",
    "in addition , we assume that we are also given a set @xmath11 consisting of variables which can not be affected with an input ; this means that the corresponding rows of @xmath10 have to consist entirely of zero entries .",
    "intuitively , some variables of the system may be out of reach of any actuator or control strategy we design and should not be considered as possible input locations .",
    "unfortunately , it was recently observed that this problem is np - hard even in the case when @xmath12 @xcite .",
    "we are therefore forced to consider possible relaxations of the problem which may be solvable in polynomial time .",
    "one approach , studied in @xcite , is to study approximation algorithms , i.e. , to try to find a @xmath10 in polynomial time which does not have too many nonzero rows compared to the optimal matrix . in this paper",
    "we consider a different relaxation of the problem , pioneered by the recent papers @xcite and @xcite : we would like eq .",
    "( [ withinput ] ) to be structurally controllable rather than controllable .",
    "a formal definition of structural controllability is given in section [ background ] , but loosely speaking this means we are considering controllability for arbitrarily small perturbations of the nonzero entries of the matrix @xmath1 .",
    "in many cases , the nonzero entries of the matrix @xmath1 are not precisely known and little is lost by instead considering system controllability after an arbitrary small perturbation of them .",
    "we will refer to this ( i.e. , to the problem of finding @xmath10 with fewest nonzero rows making eq .",
    "( [ withinput ] ) structurally controllable ) as the minimum structural controllability problem .",
    "similar questions have recently been considered in the recent works of @xcite and @xcite in the setting when @xmath13 , i.e. , there are no forbidden variables . in @xcite ,",
    "the question of finding a @xmath10 with the smallest number of columns with a nonzero entry was considered .",
    "the number of columns of @xmath10 with a nonzero enry corresponds to the number of components of the vector @xmath14 in eq .",
    "( [ withinput ] ) which end up affecting the system ; intuitively , this is a measure of the number of independent signals which are needed to control the network . in the language of @xcite ,",
    "each such entry of @xmath14 corresponds to a `` driver node . ''",
    "it was shown in @xcite that if @xmath1 has with @xmath3 nonzero entries , then a matrix @xmath10 rendering eq .",
    "( [ withinput ] ) structurally controllable with fewest number of columns with a nonzero entry can be found in @xmath5 operations .",
    "there is a close connection between structural controllability and the problem of finding maximum matchings in a graph , as pointed out by @xcite and as we reprise in section [ sec : combinatorial ] in this paper .",
    "the significance of the running time @xmath15 achieved by @xcite is that it is the same as the best currently known deterministic complexity for finding a maximum cardinality matching in a bipartite graphth row containing an enumeration of the neighbors of @xmath16 , the best known deterministic complexity of finding a maximum matching is @xmath5 using the hopcroft - karp algorithm @xcite . ] .",
    "although at first glance the problem of finding a @xmath10 with fewest number of columns with a nonzero entry appears extremely similar to the minimum structural controllability problem , the two problems are quite different .",
    "intuitively , there is no reason why the number of independent signals needed to control a network should have a close relationship with the number of variables of the system which needs to be affected .    to illustrate this ,",
    "consider the case when @xmath1 is diagonal with every diagonal entry nonzero .",
    "it is immediate that the system is structurally controllable with a @xmath10 with only a single column with nonzero entries , i.e. , we may take the first column of @xmath10 to be the all - ones vector and set the remaining entries of @xmath10 to zero can be perturbed to be distinct and then the controllability matrix contains an invertible vandermonde matrix as a submatrix .",
    "alternatively , this also follows immediately from @xcite or the classic results of @xcite . ] . on the other hand , the smallest number of rows with nonzero entries in a @xmath10 making such a system structurally controllable is @xmath17 : since there is no coupling between variables , it is immediate that every variable needs to be affected .    to our knowledge ,",
    "the first papers considering the minimum structural controllability problem were the recent works @xcite and @xcite .",
    "in @xcite graph theoretic conditions and bounds were given for several variations of the minimal structural controllability problem , ultimately bounding the number of additional inputs needed in terms of critical connection components and rank defects in corresponding graphs .",
    "an explicit characterization of the solution of the minimal structural controllability problem with a single input was given in @xcite .",
    "in @xcite , an algorithm for the minimal structural controllability problem was proposed .",
    "although formally this paper considered the problem of finding a matrix @xmath10 with fewest nonzero entries in total , it is not hard to see this is equivalent to the minimum structural controllability problem ( see section [ background ] for a discussion of this ) .",
    "this algorithm took @xmath18 operations to produce a solution .",
    "the paper @xcite then provided an @xmath19 algorithm for this problem .",
    "our contribution in this paper is to provide an algorithm for the minimum structural controllability problem ( additionally with an arbitrary set of forbidden variables @xmath11 ) which runs faster , namely in @xmath20 operations .",
    "this is always faster by a factor of @xmath21 compared to the previously best running times in @xcite and is better by a factor of @xmath17 when the graph corresponding to @xmath1 is sparse , i.e. , if @xmath22 .",
    "more importantly , our finding is that it is possible to solve the minimum structural controllability problem as fast as the currently - best complexity of deterministically finding a maximum matching in a bipartite graph .",
    "the concept of structural controllability was introduced in the groundbreaking paper of lin @xcite , which provided a combinatorial necessary and sufficient condition for a system with given matrices @xmath23 to be structurally controllable .",
    "lin s work was elaborated upon in a number of now - classic works in the 1970s and 1980s .",
    "we mention specifically @xcite which refined lin s work in a number of ways .",
    "shortly after lin s paper , shields and pearson @xcite generalized lin s result to the case when @xmath10 is a matrix ( lin had only studied the case when @xmath10 belongs to @xmath24 ) ; alternative , shorter , proofs of lin s main results were provided by glover and silverman @xcite as well as by hosoe and matsumoto @xcite ; corfmat and morse considered the case when the @xmath1 and @xmath10 were parametrized @xcite ; stronger notions of structural controllability was proposed by mayeda and yamada @xcite and willems @xcite ; and the related notion of structurally fixed modes was studied by sezer and siljak @xcite as well as papadimitriou and tsitsiklis @xcite .",
    "we are not able to survey the entire classic literature on the subject and instead point the reader to the relatively recent survey @xcite .",
    "there has been considerable contemporary interest in structural controllability as well as minimum controllability problems as a result of the recent nature paper of liu , slotine , and barabasi@xcite .",
    "we mention @xcite by the same authors which studied the applications of this framework to the observability of biological networks , as well as @xcite by the same research group which examined the effects of network statistics on controllability .",
    "we have already described the recent works of commault and dion @xcite and pequito , kar , and aguiar @xcite which are the most closely related papers to this work .",
    "the earliest reference on such problems we are aware of is the work of simon and mitter from 1960 s @xcite which considers synthesizing observers which take as few as possible measurements of the state .",
    "we also mention @xcite which studies whether ( non - structural ) minimum controllability problems are np - complete as well as @xcite which studies application of controllability problems to model checking .",
    "finally , structural controllability over finite fields was investigated by sundaram and hadjicostis @xcite .",
    "there has also been much interest in input selection for strong structural controllability problems ( introduced in the 1970s by mayeda and yamada @xcite ) wherein the requirements to be satisfied are more stringent , namely that the system has to be controllable for arbitrary perturbations to its nonzero entries .",
    "unfortunately , it turns out that in the setting of strong structural controllability , input selection problems tend to be np - hard ; two recent references establishing such results are @xcite and @xcite ( although @xcite demonstrates that some variations of minimal strong structural controllability problems are nevertheless polynomial time ) .    a closely related strand of work studies input selection for minimum - energy control",
    "; we refer the reader to @xcite . for multi - agent systems with nearest - neighbor interactions ,",
    "controllability was investigated nearly a decade ago by tanner @xcite and ji , muhammed , and egerstedt @xcite with recent work in @xcite .",
    "we remark that minimal controllability problems such as the one we consider here are closely related to the recent literature on network controllability which seeks to relate graph - theoretic properties of network to controllability .",
    "the development of easily optimizable necessary and sufficient conditions for controllability properties of networks would have immediate consequences for the input selection problems of the kind we consider .",
    "however , in the non - structural case , such conditions appear to be challenging to obtain , though much can be said in some particular cases .",
    "we refer the reader to @xcite as well as the recent survey @xcite which provides an overview of the area .",
    "we now give a formal statement of the problem we will be considering as well as of our main result .",
    "we begin with a brief introduction to the notion of structural controllability .",
    "we define the zero pattern of a matrix @xmath25 , denoted by @xmath26 , to be the set of entries @xmath27 such that @xmath28 . given two matrices @xmath29 the linear system of eq .",
    "( [ withinput ] ) is called structurally controllable if there exist matrices @xmath30 with the same dimensions as @xmath23 , which satisfy @xmath31 such that the linear system @xmath32 is controllable .",
    "the concept of structrual controllability was introduced in the pioneering work of lin @xcite , and it was shown in @xcite that if eq .",
    "( [ withinput ] ) is structurally controllable , then in fact the linear system of eq .",
    "( [ perturb ] ) is controllable for allmost all pairs of matrices @xmath30 whose zero sets contain the zero sets of @xmath1 and @xmath10 . in particular , if eq .",
    "( [ withinput ] ) is structurally controllable , then it is possible to perturb the nonzero entries of @xmath1 and @xmath10 by an arbitrarily small amount and obtain a controllable system .    here",
    "we will be concerned with what we call the `` minimum structural controllability problem , '' which we describe now ( actually , we describe a particular version of the problem which we will see is equivalent to the general case ) . given a matrix @xmath7 and set of forbidden variables",
    "@xmath11 we seek to find a set @xmath33 of minimum cardinality such that @xmath34 and @xmath35 is structurally controllable , where @xmath36 is some diagonal matrix satisfying @xmath37 observe that each nonzero diagonal entry of @xmath36 corresponds to a variable of the linear system @xmath38 affected with an input , while each zero diagonal entry corresponds to a variable unaffected .",
    "note that the minimum structural controllability problem may not have a solution , for example if @xmath39 .",
    "when a solution does exist , we will adopt the convention of saying the minimum structural controllability problem is solvable .",
    "furthermore , note that the actual nonzero diagonal values of @xmath36 do not matter , i.e. , if eq .",
    "( [ sys - input ] ) is structurally controllable with one diagonal @xmath36 satisfying eq .",
    "( [ bcond ] ) then it is structurally controllable with all such @xmath36 , the actual values of those entries never matter . ] .",
    "we remark that this is equivalent to the problem of finding @xmath10 having the fewest number of rows with a nonzero entry such that eq .",
    "( [ withinput ] ) is structurally controllable .",
    "indeed , given any @xmath10 making eq .",
    "( [ withinput ] ) structurally controllable , we can simply set @xmath40 to be the set of rows of @xmath10 with a nonzero entry , and then any matrix @xmath36 satisfying eq .",
    "( [ bcond ] ) renders eq .",
    "( [ withinput ] ) structurally controllable .",
    "thus nothing is lost by searching for diagonal matrices @xmath10 .",
    "furthermore , the minimum structural controllability problem is also equivalent to the problem of finding @xmath10 having fewest nonzero entries making eq .",
    "( [ withinput ] ) structurally controllable .",
    "the reasoning is the same as in the previous paragraph : given @xmath10 , define @xmath40 once again to be the set of rows of @xmath10 with a nonzero entry , and we then we have that @xmath36 can not have more nonzero entries than @xmath10 .",
    "this paper analyzes the complexity of solving the minimum structural controllability problem in terms of the problem parameters , which are @xmath17 and @xmath3 ( recall these are , respectively , the dimension of @xmath1 and the number of nonzero entries in @xmath1 ) .",
    "we assume that @xmath1 is given to us in the form of a list of of all the entries @xmath27 such that @xmath41 ; and the set @xmath4 of forbidden nodes is given to us as a list of entries in @xmath42 .",
    "we will use the standard unit - cost ram model of computation . for convenience ,",
    "we define the graph @xmath43 to be the directed graph with the vertex set @xmath44 and edge set @xmath45 .",
    "we will refer to @xmath43 as the adjacency graph of the matrix @xmath1 .",
    "as previously mentioned , our main result is an algorithm which finds a set @xmath40 asked for by the minimum structural controllability problem , or declares that no such set exists , in @xmath15 operations .",
    "this will be done under an assumption which we now describe and which carries no loss of generality .",
    "_ we will make the assumption in the remainder of the paper that no node in @xmath43 is isolated ( a node is isolated if it has no incoming or outgoing edges , which means the corresponding row and column of @xmath1 is identically zero ) .",
    "_ this can indeed be done without loss of generality since all variables corresponding to isolated nodes clearly need to be affected by inputs , and since all isolated nodes can be enumerated straightforwardly in @xmath46 operations .",
    "we now describe the structure of the remainder of the paper . in the following section [ sec : combinatorial ]",
    "we describe a combinatorial reformulation of the minimal structural controllability problem .",
    "it is this combinatorial reformulation which we then proceed to solve in the following section [ sec : main ] .",
    "note that our final result , namely a running time of @xmath15 operations , is a combination of a series of reductions made throughout the paper .",
    "more precisely , this running time follows from putting together proposition [ reformulation ] on the combinatorial reformulation of the problem , proposition [ prop : allexists ] and the discussion at the end of section [ sec : hk ] on the running time of the hopcroft - karp algorithm , and proposition [ prop : opcount ] & theorem [ thm ] which bound the running time of our main algorithm in section [ sec : main ] .",
    "since the values of the nonzero entries of the matrices @xmath23 do not appear in the definition of structural controllability , it is usually convenient to restate questions about structural controllability in terms of graphs corresponding to these matrices .",
    "here we describe such a combinatorial reformulation of the minimum structural controllability problem which will be the basis for the remainder of this paper .",
    "we do not claim any novelty for this reformulation as it is a trivial modification of theorem 8 from @xcite and theorem 10 from @xcite .",
    "we define a _ partitioned directed graph _ to be an ordinary directed graph @xmath47 equipped with a partition of the set of vertices @xmath48 such that the edge set @xmath49 contains no edges whose destination is in @xmath50 .",
    "given the linear system of eq .",
    "( [ withinput ] ) where @xmath1 has dimensions @xmath2 while @xmath10 has dimensions @xmath51 , we will associate a partitioned directed graph by setting @xmath52 and defining the edge set @xmath49 to consist of all the edges @xmath27 with @xmath53 and @xmath54 with @xmath55 .",
    "some examples are drawn in figures [ ex1 ] and [ ex2 ] .",
    "( a1 ) at ( -10,0 ) [ circle , draw ] @xmath56 ; ( a2 ) at ( -7.5,0 ) [ circle , draw ] @xmath57 ;    ( b1 ) at ( -4,0 ) [ circle , draw ] @xmath58 ; ( b2 ) at ( -1.5,0 ) [ circle , draw ] @xmath56 ; ( b3 ) at ( 1,0 ) [ circle , draw ] @xmath57 ;    ( b3 ) edge ( b2 ) ( b2 ) edge ( b1 ) ( b1 ) edge [ out = 115 , in = 55 , looseness = 4 ] ( b1 ) ;    ( a2 ) edge ( a1 ) ;    ( a1 ) at ( -10,0 ) [ circle , draw ] @xmath56 ; ( a2 ) at ( -7.5,0 ) [ circle , draw ] @xmath57 ; ( a3 ) at ( -10,2.5 ) [ circle , draw ] @xmath58 ;    ( u1 ) at ( 1,0 ) [ circle , draw ] @xmath57 ; ( u2 ) at ( 1,2.5 ) [ circle , draw ] @xmath59 ;    ( v1 ) at ( -4,0 ) [ circle , draw ] @xmath56 ; ( v2 ) at ( -4,2 ) [ circle , draw ] @xmath58 ; ( v3 ) at ( -4,4 ) [ circle , draw ] @xmath60 ;    ( u1 ) edge ( v1 ) ( u1 ) edge ( v2 ) ( u1 ) edge ( v3 ) ( u2 ) edge ( v1 ) ( u2 ) edge ( v2 ) ( u2 ) edge ( v3 ) ;    ( a2 ) edge ( a1 ) ( a2 ) edge ( a3 ) ( a3 ) edge [ out=115 , in = 55 , looseness=4 ] ( a3 ) ;    for any directed graph ( ordinary or partitioned ) , we will use the following notation : given a subset of the vertices @xmath61 , we will use @xmath62 to refer to the set of in - neighbors of @xmath61 and @xmath63 will refer to the set of out - neighbors of @xmath61 . a subset of the vertices @xmath61 is called contracting if @xmath64 .",
    "[ sp - theorem ] the linear system of eq .",
    "( [ withinput ] ) is structurally controllable if and only if the associated partitioned graph @xmath65 satisfies the following two conditions :    1 .",
    "any node in @xmath66 is reachable by a path starting from some node in @xmath50 .",
    "2 .   no subset of @xmath66 is contracting .    in a slight abuse of notation",
    ", we will now say that a partitioned graph is structurally controllable if it satisfies both of these conditions .",
    "for example , both graphs in figure [ ex1 ] are structurally controllable , as is the graph on the left in figure [ ex2 ] ; however , the graph on the right in figure [ ex2 ] is not structurally controllable .",
    "we define a matching @xmath67 in a directed graph to be a subset of the edges such that no two edges in @xmath67 have a common source or a common destination .",
    "we will say that a vertex @xmath68 is unmatched with respect to a matching @xmath67 if there is no edge in @xmath67 which has @xmath68 as its destination . we will use @xmath69",
    "will denote the set of unmatched nodes in the matching @xmath67 .",
    "a matching @xmath67 in a directed graph is said to be perfect @xmath70 , i.e. , if no node is unmatched .",
    "we extend this definition to partitioned graphs as follows .",
    "note that in a partitioned graph @xmath71 , no node of @xmath50 has any incoming edges ; consequently , we will say that a matching @xmath67 in a partitioned graph @xmath72 is perfect if @xmath73 , i.e. , if no node in @xmath66 is unmatched .    with these definitions in place",
    ", it was observed in @xcite observed that condition ( 2 ) of theorem [ sp - theorem ] may be restated more conveniently in terms of matchings .",
    "[ slotine - theorem ] condition ( 2 ) of theorem [ sp - theorem ] holds if and only if there exists a perfect matching in the partitioned graph @xmath65 .    as a consequence of theorem [ sp - theorem ] and theorem [ slotine - theorem ]",
    ", we can reformulate the minimum structural controllability problem in combinatorial terms .",
    "this will require several more definitions .",
    "given a matrix @xmath7 , we can define the graph @xmath43 to be the directed graph with the vertex set @xmath44 and edge set @xmath45 .",
    "we will refer to @xmath43 as the adjacency graph of @xmath1 .",
    "given a directed graph @xmath72 and the set of forbidden vertices @xmath4 , a matching @xmath67 in @xmath72 is called an allowed matching if @xmath74 , i.e. , if no node in @xmath4 is unmatched .",
    "f we define the condensation of any graph to be the directed acyclic graph obtained by collapsing together the strongly connected components ; the condensation of @xmath43 will be denoted by @xmath75 . in any directed graph",
    ", we will say that a vertex is a source vertex if it has no incoming edges .",
    "we will say that a connected component of @xmath43 is a source connected component if it collapses to a source vertex in @xmath75 .",
    "finally , given a matching @xmath67 in a directed graph @xmath72 , we define the cost of the matching to be the number of unmatched vertices plus the number of source strongly connected components without an unmatched node .",
    "we can now state the combinatorial reformulation of the minimum structural controllability problem .",
    "we mention once again that we claim no novelty for this reformulation as it is an immediate consequence of theorem 8 from @xcite as well as theorem 10 from @xcite .",
    "[ reformulation ] the minimum structural controllability problem is solvable if and only if    1 .",
    "@xmath43 has an allowed matching .",
    "every source connected component of @xmath43 has a node in @xmath76 .",
    "furthermore , the optimal set @xmath40 asked by the minimum structural controllability problem can be recovered in @xmath77 operations from the minimum cost allowed matching in @xmath43 .",
    "we first observe that due to item ( 1 ) of theorem [ sp - theorem ] , if some source strongly connected component of @xmath43 does not have a node in @xmath76 , then the minimum structural controllability problem is not solvable . since a listing of the source strongly connected components of a directed graph may be obtained in @xmath77 time using , for example , kosaraju s algorithm @xcite operations , but we have assumed that no node in @xmath43 is isolated so that @xmath78 . ] and further checking that any source connected component has an entry in @xmath76 can be done in @xmath79 additional time , the conclusion that `` the minimum structural controllability problem is not solvable '' can always be read off in @xmath77 operations in this case .",
    "we therefore only need to consider the case when each source strongly connected component of @xmath1 has a vertex in @xmath76 , _ which we do for the remainder of this proof_. let @xmath80 be the smallest possible cardinality of the sought - after set @xmath40 in the minimum structural controllability problem and let @xmath81 be the smallest cost of any allowed matching in @xmath43 .",
    "if the minimum structural controllability problem is not solvable , we say @xmath82 ; and if no allowed matching exists , we will say @xmath83 . we next argue that @xmath84 .",
    "we first argue that @xmath85 .",
    "indeed , let @xmath40 be a set of indices such that @xmath34 and such that eq .",
    "( [ withinput ] ) is structurally controllable with some diagonal matrix @xmath36 satisfying @xmath86 if and only if @xmath87 .",
    "consider the associated partitioned directed graph . by item ( 2 ) of theorem [ sp - theorem ] and theorem [ slotine - theorem ] we have that there is a perfect matching in this partitioned graph . by considering the edges of this matching which have both source and destination in @xmath66",
    ", we obtain a matching in @xmath43 .",
    "call this matching @xmath67 .",
    "since after we add to @xmath67 some edges going from @xmath50 to @xmath66 we get a perfect matching , it follows that every unmatched vertex in @xmath67 has an incoming edge from @xmath50 , and consequently belongs to @xmath76 .",
    "thus @xmath67 is an allowed matching .",
    "moreover , by item ( 1 ) of theorem [ sp - theorem ] , we have that every source connected component of @xmath43 without an unmatched node in @xmath67 has an incoming link from @xmath50 . since @xmath36 is a diagonal matrix",
    ", we have that the cardinality of @xmath40 exactly equals the number of nodes in @xmath66 with an incoming link from @xmath50 .",
    "it follows that the cost of @xmath67 is at most the cardinality of @xmath40 .",
    "this proves that @xmath85 .",
    "we next argue that @xmath88 . indeed , suppose @xmath67 is an allowed matching in @xmath43 .",
    "we can construct a set @xmath89 by first putting into it every variable corresponding to a vertex in @xmath69 and then adding an arbitrary node in @xmath76 from each strongly connected component without an unmatched node . since @xmath67 is an allowed matching , we have @xmath90 .",
    "now take any diagonal matrix @xmath91 .",
    "in the associated partitioned directed graph , we have that item ( 1 ) of theorem [ sp - theorem ] is satisfied since we have ensured there is an outgoing link from @xmath50 to each source strongly connected component of @xmath43 .",
    "we finally argue that item ( 2 ) of theorem [ sp - theorem ] is satisfied as well .",
    "indeed , by construction , each node in @xmath69 has an incoming ede from @xmath50 ; therefore we can construct a perfect matching in the partitioned graph by taking together the edges in @xmath67 with all the edges from @xmath50 incoming on nodes in @xmath69 .",
    "appealing to theorem [ slotine - theorem ] , we conclude that item ( 2 ) of theorem [ sp - theorem ] holds , and consequently the set @xmath89 makes eq .",
    "( [ withinput ] ) structurally controllable .",
    "observing that the cardinality of @xmath89 is exactly the cost of @xmath67 , we conclude the proof that @xmath88 .    we have thus shown that @xmath92 .",
    "in particular , under the condition that every source connected component of @xmath43 has a node in @xmath76 , we have that @xmath81 is finite if and only if @xmath80 is finite .",
    "this proves the first equivalence of this proposition . finally , to argue that the optimal set @xmath80 can be read off",
    "the minimum cost allowed matching @xmath93 in @xmath77 operations , observe that the previous paragraph has described exactly how to construct @xmath80 from the minimum cost matching @xmath93 : all we need to do is list all the unmatched vertices in @xmath93 as well as all the vertices lying in the intersections between each source strongly connected components without an unmatched node in @xmath93 and @xmath76 .",
    "this can be straightforwardly done in @xmath77 operations once a listing of the strongly connected component is available , which as we already remarked takes @xmath77 operations to compute using kosaraju s algorithm .",
    "thus in the end it takes @xmath77 operations to find the optimal set @xmath80 once the minimum cost allowed matching has been found .",
    "having proved proposition [ reformulation ] , we need only concern ourselves with a purely combinatorial question : given a directed graph @xmath72 and a set of forbidden vertices @xmath4 , how do we find an allowed matching of minimum cost ( or declare that no allowed matching exists ) ? in this section , we describe how to solve this problem in @xmath94 operations . coupled with proposition [ reformulation ]",
    ", this immediately implies our main result , namely that the minimum structural controllability problem is solvable in @xmath5 operations ( note that the additional factor of @xmath17 comes from making sure the graph @xmath43 has no isolated nodes ; we assumed this in the previous section , but ensuring this requires @xmath95 operations as we previously noted ) .",
    "our algorithm has two parts .",
    "first , we will describe how to find an allowed matching ( or declare none exists ) in @xmath94 operations .",
    "this is done in section [ sec : hk ] and is basically an immediate application of the well - known hopcroft - karp algorithm for maximum bipartite matchings .",
    "next , we describe an augmentation process which , starting from an allowed matching , produces a minimum cost allowed matching in @xmath96 additional operations .",
    "this is described in section [ sec : augment ] .",
    "putting together the results of these two sections immediately gives that the minimum cost allowed matching problem can be solved in @xmath94 operations .",
    "in this section we address the question of finding an allowed matching in a graph .",
    "it could very well be that , for some directed graph @xmath72 and set of forbidden vertices @xmath4 , no allowed matching exists ; for example , if two nodes in @xmath4 have have in - degree one with the same in - neighbor , at least one of them is bound to be unmatched .    here",
    "we reformulate this problem as a a bipartite matching problem which can then be solved using the hopcroft - karp algorithm in @xmath94 operations . along the way",
    ", we introduce some definitions which will be useful to us .",
    "given a directed graph @xmath72 , the splitting of @xmath72 is defined to be the directed bipartite graph obtained as follows : for every node @xmath14 , we create two nodes @xmath97 and @xmath98 , and for every edge @xmath99 in the original graph we put the edge @xmath100 .",
    "we will refer to all the nodes @xmath97 as `` source nodes '' and to the nodes @xmath101 as `` destination nodes . ''",
    "we will say the edge @xmath99 in @xmath72 and the edge @xmath100 `` correspond to each other . ''",
    "see figure [ fig - split ] for an example of a graph and its splitting .",
    "\\(a ) edge [ bend left ] ( b ) ( b ) edge ( c ) ( c ) edge ( d ) ( a ) edge [ out=115 , in = 55 , looseness=4 ] ( a ) ( b ) edge [ bend left ] ( a ) ( b ) edge [ out=115 , in = 55 , looseness=4 ] ( b ) ( as ) edge ( ad ) ( as ) edge ( bd ) ( bs ) edge ( bd ) ( bs ) edge ( ad ) ( bs ) edge ( cd ) ( cs ) edge ( dd ) ;    given a directed graph @xmath47 and a set @xmath114,we will say that the _ subgraph determined by @xmath115 _ is the graph with vertex set @xmath116 and edge set @xmath117 such that at least one of @xmath118 belongs to @xmath115 .",
    "we then have the following fact .",
    "let @xmath119 be the graph obtained by taking the subgraph of the splitting of @xmath72 determined by the destination vertices of @xmath4 and viewing it as an undirected graph by ignoring the orientations of the edges .",
    "then an allowed matching in @xmath72 exists if and only if the maximum cardinality matching in @xmath119 is of size @xmath120 .",
    "[ prop : allexists ]        turning to the proof , suppose @xmath72 has an allowed matching @xmath67 . define @xmath125 to be the collection of edges @xmath100 in the splitting of @xmath72 such that @xmath126 .",
    "then because @xmath67 was a matching in @xmath72 , it immediately follows that @xmath125 is a matching in @xmath119 .",
    "furthermore , because @xmath67 is an allowed matching in @xmath72 we have that every node in @xmath124 ( i.e. , every destination node ) is matched in @xmath125 .",
    "consequently , the size of @xmath125 is @xmath127 .",
    "conversely , given a matching @xmath125 in @xmath119 of cardinality @xmath120 , observe that since @xmath119 is bipartite and @xmath128 , we have that every node in @xmath124 is matched .",
    "we then define @xmath67 to be the collection of edges @xmath99 in @xmath72 such that @xmath100 or @xmath129 is in @xmath119 ( recall that @xmath119 is undirected ) .",
    "then because @xmath125 is a matching in @xmath119 we obtain that @xmath67 is a matching in @xmath72 .",
    "moreover , since every node in @xmath124 is matched in @xmath125 , we get that @xmath67 is an allowed matching .",
    "finally , the last paragraph also tells us how to recover an allowed matching from a matching in @xmath119 of size @xmath120 : for each node in @xmath4 , we simply look at the vertex that it is matched to in @xmath119 and add that as the destination of a matching in @xmath72 .",
    "this process takes @xmath79 operations .",
    "an immediate consequence of this proposition is that we may find an allowed matching ( or declare that none exists ) in @xmath94 operations : first @xmath77 operations to construct the list of edges in @xmath119 , then @xmath94 operations to run hopcroft - karp with this list of edges as an input to find a maximum matching in @xmath119 and then @xmath79 additional operations to write down an allowed matching in @xmath72 ( or declare that no allowed matching exists if the size of the maximum matching in @xmath119 is less than @xmath120 ) .",
    "[ [ the - augmentation - procedure - for - minimum - cost - allowed - matchingssecaugment ] ] the augmentation procedure for minimum cost allowed matchings[sec : augment ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    let us recap our progress thus far .",
    "we began in section [ sec : combinatorial ] by pointing out that we can spend @xmath95 operations to ensure our graph @xmath43 has no isolated nodes , which allows us to assume throughout the remainder of the paper that @xmath78 . in proposition",
    "[ reformulation ] , we showed that a solution to the minimum structural controllability problem can be recovered from a minimum cost allowed matching in a certain graph , and the construction of this graph and the recovery of this solution will take @xmath77 operations .",
    "subsequently , in proposition [ prop : allexists ] we observed that an allowed matching in the same graph can be found using the hopcroft - karp algorithm in @xmath96 additional operations .    in this section",
    ", we further describe an `` augmentation procedure '' which , starting from an allowed matching , finds a minimum cost allowed matching in @xmath94 operations .",
    "putting all these results together implies our main finding , which is that the complexity of the minimum structural controllability problem is @xmath15 .    before jumping into the algorithm and the proof ,",
    "we briefly summarize the intution behind our approach .",
    "it is natural to reformulate the problem of finding a minimum cost allowed matching in terms of flows and explore a hopcroft - karp approach of repeatedly augmenting flows along maximal collections of shortest paths ( we refer the reader to the original paper @xcite for a detailed explanation of this in the context of finding a maximum cardinality bipartite matching ) .",
    "this approach immediately runs into two difficulties .",
    "first , one can reduce the cost of a matching without changing how many nodes are unmatched , but rather by shifting the set of unmatched nodes ; this means that considerable care is needed the correspondence between flows and matchings , i.e. , the usual approach of having all unmatched nodes simply become sink nodes for flow will not work .",
    "secondly , for such a flow - augmentation algorithm to succeed we must ensure that the flow augmentation procedure we develop does not produce flows corresponding to matchings which are not allowed .",
    "our main finding in this section is that a very careful modification of the usual hopcroft - karp approach can bypass these difficulties .",
    "we will refer to the two matchings in @xmath72 and the splitting of @xmath72 which can be obtained from one another by replacing @xmath99 by @xmath100 and vice versa as _ twin matchings .",
    "_ see figure [ fig - twin ] and figure [ fig - twin2 ] for two examples .              given a directed graph @xmath72",
    ", we adopt the convention of using @xmath130 to denote the number of _ source _ strongly connected components of @xmath72 .",
    "the source connected components themselves will be denoted by @xmath131 .    for example , in the graph on the left - hand side of figure [ fig - split ] , the only source connected component is @xmath132 , hence @xmath133 .",
    "the other two connected components , @xmath134 and @xmath135 are not source .    given a directed graph @xmath72 and a matching @xmath67 , we will use @xmath136 to denote those source strongly connected components among @xmath131 which do not have an unmatched node and @xmath137 to denote those which have a single unmatched node . naturally , @xmath138 . we stress that whether a source connected component gets classified as @xmath139 or as @xmath140 ( or neither ) depends on the matching @xmath67 .",
    "moreover , we will use @xmath141 to denote a listing of those among @xmath142 which have two or more unmatched nodes * and * all strongly connected components which are not source .",
    "thus @xmath143 is the total number of strongly connected components of @xmath72 .",
    "for example consider the matching shown on the left of figure [ fig - twin ] .",
    "there is only one source strongly connected component , namely @xmath132 .",
    "it does not have any unmatched nodes , so @xmath144 .",
    "there are no other soure strongly connected component , so we do not have any @xmath145 . finally , @xmath146 .",
    "on the other hand , consider the matching on left of figure [ fig - twin2 ] .",
    "the only source strongly connected component , namely @xmath132 , has a single unmatched node .",
    "thus @xmath147 .",
    "there are no variables @xmath139 .",
    "as in the previous paragraph , @xmath148 and @xmath149 .",
    "recall that we have previously defined @xmath69 to denote the set of unmatched nodes of the matching @xmath67 .",
    "we now define @xmath150 to denote those unmatched nodes which do not lie in some @xmath145 . in other words",
    "@xmath150 is the set of unmatched nodes which do not lie in a strongly connected component with only one unmatched node .    for the graph on the left - hand side of figure [ fig - twin ] , again letting @xmath67",
    "be the matching consisting of the blue edges , we have that @xmath151 . on the other hand , for the blue matching on the left - hand side of figure [ fig - twin2 ]",
    ", we have that @xmath152 but since @xmath105 lies in @xmath153 , we have that @xmath150 is empty .",
    "given a directed graph @xmath72 and a subset @xmath1 of vertices of @xmath72 , we will use @xmath154_{\\rm dst}$ ] to denote the set of nodes in the splitting of @xmath72 which are the destination nodes of vertices in @xmath1 .",
    "for example , in figure [ fig - split ] , @xmath155_{\\rm dst } = \\{a_{\\rm dst } , b_{\\rm dst}\\}$ ] .    the cost of a matching @xmath67 in the splitting of @xmath72 is defined to be the number of unmatched destination nodes plus the number of @xmath156_d , [ s_2]_d , \\ldots , [ s_l]_d$ ] without an unmatched node .",
    "note that this is exactly equal to the ( previously defined ) cost of the twin matching of @xmath67 in @xmath72 . for any matching @xmath67 ( either in the splitting or in the original graph )",
    "we will use @xmath157 to denote the cost of @xmath67 .",
    "for example , in figure [ fig - twin ] , the matching on the left has cost @xmath58 : one for the unmatched node @xmath134 and one for the source connected component @xmath132 without an unmatched node .",
    "the matching on the right has cost @xmath58 as well : one for unmatched @xmath107 and one for @xmath158 , which is the set of destination nodes of a source connected component without an unmatched node .",
    "we note that in any matching @xmath67 in the splitting of @xmath72 , all the source nodes are always unmatched .",
    "the cost , however , depends on the number of unmatched destination nodes and may depend on exactly which destination nodes are matched . since a matching and its twin matching uniquely determine each other , we will sometimes find it convenient use them interchangeably .",
    "for example given a matching @xmath67 in the splitting of @xmath72 and its twin matching @xmath125 in @xmath72 , we will sometimes say that a node @xmath68 in @xmath72 is unmatched under @xmath67 ; what is meant is that the node is unmatched under the twin of @xmath67 , i.e. , under @xmath125 .",
    "conversely , we might say that the node @xmath101 is unmatched under @xmath125 ; what is meant is that @xmath101 is unmatched under the twin of @xmath125 , i.e. , under @xmath67",
    ".    we will refer to a matching in the splitting of @xmath72 as _ allowed _ if every node in @xmath160_d$ ] is matched .",
    "naturally , a matching in @xmath72 is an allowed matching if and only if its twin matching in the splitting of @xmath72 is .      first , given a directed graph @xmath72 and a matching @xmath67 in @xmath72 , we define its matched splitting , denoted by @xmath161 , as follows : first we take the splitting of @xmath72 and reverse the orientation of every edge in @xmath67 s twin matching ; then for each @xmath162 , we add edges going from the single unmatched node in @xmath163_d$ ] to all nodes in @xmath163_d \\cap f^c$ ]",
    ". see figure [ fig - match - split ] for an illustration .",
    "now , given a directed graph @xmath72 and a matching @xmath67 in @xmath72 , we define the flow graph @xmath164 as follows .",
    "we take @xmath161 and add vertices @xmath165 ( recall @xmath166 is the number of connected components of @xmath72 without an unmatched node in @xmath67 ) .",
    "we add an edge going from @xmath167 to each source node without an outgoing edge in the twin matching of @xmath67 ; from @xmath167 to each @xmath168 ; from each @xmath168 to every vertex in @xmath169_d \\cap f^c$ ] .",
    "we add links going from every @xmath150 which does not lie in a source connected component to @xmath170 .",
    "finally , we go through all the source connected components @xmath131 , and letting @xmath171 be the number of unmatched nodes in @xmath172 , we create nodes @xmath173 . in other words , we create extra nodes @xmath174 whose number is equal to one less than the number of unmatched nodes in @xmath172 .",
    "finally , for each @xmath175 , we put an edge from each unmatched node in @xmath176_d$ ] to all the nodes @xmath174 and from all the nodes @xmath174 to @xmath170 .",
    "see figure [ fig - flow-1 ] , figure [ fig - flow-2 ] , and figures [ fig - flow-3 ] & [ fig - flow-4 ] for illustrations .",
    "\\(e ) at ( -15,0 ) [ circle , draw ] @xmath178 ; ( d ) at ( -12.5,0 ) [ circle , draw ] @xmath102 ; ( c ) at ( -10,0 ) [ circle , draw ] @xmath103 ; ( b ) at ( -7.5,0 ) [ circle , draw ] @xmath104 ; ( a ) at ( -5,0 ) [ circle , draw ] @xmath105 ;            ( ed ) at ( 1,-4 ) [ circle , draw ] @xmath181 ; ( dd ) at ( 1,-2 ) [ circle , draw ] @xmath106 ; ( cd ) at ( 1,0 ) [ circle , draw ] @xmath107 ; ( bd ) at ( 1,2 ) [ circle , draw ] @xmath108 ; ( ad ) at ( 1,4 ) [ circle , draw ] @xmath109 ;    ( es ) at ( -3,-4 ) [ circle , draw ] @xmath182 ; ( ds ) at ( -3,-2 ) [ circle , draw ] @xmath110 ; ( cs ) at ( -3,0 ) [ circle , draw ] @xmath111 ; ( bs ) at ( -3,2 ) [ circle , draw ] @xmath112 ; ( as ) at ( -3,4 ) [ circle , draw ] @xmath113 ;    ( as ) edge ( bd ) ( ad ) edge ( bs ) ( cd ) edge ( bs ) ( cs ) edge ( dd ) ( ds ) edge ( ed ) ( ds ) edge ( cd ) ( es ) edge ( dd ) ( n1 ) edge ( t ) ( n2 ) edge ( t ) ( cd ) edge ( n1 ) ( cd ) edge ( n2 ) ( dd ) edge ( n1 ) ( dd ) edge ( n2 ) ( ed ) edge ( n1 ) ( ed ) edge ( n2 ) ( s ) edge [ bend right ] ( as ) ;      since a matching uniquely determines its twin matching , we will also use the notation @xmath164 also for matchings @xmath67 in the splitting of @xmath72 . given a directed graph @xmath72 and a matching @xmath67 , we will refer to all edges in @xmath161 that go from a source to a destination node or vice versa as _ core edges_. by construction , the only edges in @xmath161 which are not core edges are those that go from the single unmatched vertex in each @xmath163_d$ ] to the nodes in @xmath163_d \\cap f^c$ ] .",
    "we will refer to core edges in @xmath161 also as core edges in @xmath164 .",
    "note that the set of non - core edges in @xmath164 additionally includes all edges incident upon @xmath183 , and one of the @xmath168 or @xmath174 .",
    "finally , we will refer to any source or destination node in @xmath164 as _ core nodes_. note that @xmath183 and the nodes @xmath184 are the only nodes in @xmath185 which are not core nodes .",
    "the augmentation of @xmath67 on @xmath186 is the collection of edges @xmath125 defined as follows : we remove from @xmath67 the reverse of every edge in @xmath186 that goes from a destination node to a source node had their direction reversed in the matched splitting @xmath161 , and consequently appear reversed in @xmath164 . ] and adding every edge in @xmath186 that goes from a source node to a destination node .",
    "if @xmath187 is a collection of vertex - disjoint paths ( satisfying item ( 2 ) above ) and cycles in @xmath185 , then the augmentation of @xmath67 on @xmath187 is obtained by sequentially augmenting on each path and cycle in @xmath186 , in arbitrary order .    for example , consider the flow graph of figure [ fig - flow-1 ] .",
    "consider the twin matching of the matching in blue ; this is the matching shown on the right in figure [ fig - twin2 ] .",
    "consider performing the augmentation with the cycle @xmath188 in the graph @xmath185 .",
    "the only core edges in this length - three cycle are @xmath189 and @xmath190 . performing the augmentation procedure",
    "therefore removes the edge @xmath191 from the matching and adds instead the edge @xmath192 .",
    "note that the result is a matching in which @xmath109 has become matched and @xmath108 has become unmatched .",
    "[ [ the - algorithm - for - finding - a - minimum - cost - allowed - matchingsecalg ] ] the algorithm for finding a minimum cost allowed matching[sec : alg ] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    having introduced the definition of the graph @xmath164 and described the augmentation procedure , we now turn to the description of our algorithm for finding minimum cost allowed matchings .",
    "we assume that the algorithm is initialized at some allowed matching @xmath67 in @xmath72 .",
    "we first need to define the notion of a _",
    "maximal vertex - disjoint collection of shortest paths in a directed graph _",
    "( which is actually more - or - less self explanatory ) .",
    "a collection @xmath193 of paths from @xmath105 to @xmath104 in some directed graph is a maximal vertex - disjoint collection of shortest paths from @xmath105 to @xmath104 if ( i ) each path in @xmath193 is a shortest path from @xmath105 to @xmath104 ( ii ) any two paths in @xmath193 have only the nodes @xmath105 and @xmath104 in common ( iii ) it is not possible to add another path to @xmath193 and still satisfy ( i ) and ( ii ) . with this in mind ,",
    "our algorithm is as follows ; we will refer to it as _ the augmentation algorithm_.    1 .",
    "construct @xmath164 .",
    "2 .   find a maximal collection of vertex - disjoint shortest paths from @xmath167 to @xmath170 in @xmath164 .",
    "call this collection @xmath187 .",
    "3 .   if @xmath187 is empty ( i.e. , if there is no path from @xmath167 to @xmath170 in @xmath185 ) then terminate .",
    "+ else replace @xmath67 with the augmentation of @xmath67 on @xmath187 .",
    "proposition [ prop : opcount ] is easy to show and we will launch into its proof shortly . by contrast ,",
    "theorem [ thm ] will require considerable exertions on our part and will only be proved at the end of section [ sec : analysis ] .",
    "we remark that theorem [ thm ] is the main technical result of this paper and seems to be considerably more difficult to show than the analogous statement shown by hopcroft and karp @xcite in the context of bipartite matchings .",
    "first , we argue that the graph @xmath164 takes @xmath77 operations to construct . indeed , adding edges between source and destination nodes clearly takes @xmath77 time .",
    "as we have previously described , we can use kosaraju s algorithm to compute the strongly connected components of @xmath72 in @xmath77 time , and the remainder of the graph can be constructed in @xmath77 time by inspection .",
    "the only issue is that we can have as many as @xmath195 edges going between destination nodes and various nodes @xmath174 .",
    "we bypass this by never writing down these edges directly in memory but rather just maintaining a table of unmatched destination nodes and their corresponding nodes @xmath174 , if any .",
    "the fact that a maximal collection of vertex - disjoint shortest paths in a directed graph can be found in @xmath196 time is standard , see for example the exposition in section viii.4 of @xcite .",
    "we briefly summarize .",
    "we first find all the edges which are on a shortest path from @xmath167 to @xmath170 . these form a directed acyclic graph , and we keep track of the in - degree of each node in this graph .",
    "we then trace back a path from @xmath170 to @xmath167 , delete the vertices on this path , adjust the in - degrees , and recursively delete all the nodes whose in - degree becomes zero as a result .",
    "we then trace back another path from @xmath170 to @xmath167 and so forth .",
    "we want to further argue this can be implemented in @xmath77 time on @xmath164 , even though @xmath164 can have @xmath195 edges going from destination nodes to nodes @xmath174 .",
    "but indeed , we never need to write down these edges explicitly . at each stage of the above algorithm",
    ", we can simply maintain a list of the destination nodes in each @xmath197_d$ ] which are on a shortest path and have not been deleted and likewise of all the @xmath174 corresponding to @xmath198 which are on the shortest path and have not been deleted , with the understanding that there is a outgoing link from each such node in @xmath197_d$ ] to each such @xmath174 .    finally , augmenting on @xmath187 ( which has at most @xmath77 edges in it ) requires going through each edge in @xmath187 and either deleting or adding it to the matching , and takes @xmath77 operations as well .",
    "* @xmath125 is a matching in the splitting of @xmath72 . *",
    "if @xmath186 is a path from @xmath167 to @xmath170 , then @xmath125 has strictly lower cost than @xmath67 . *",
    "if @xmath186 is a cycle , then @xmath125 has the same cost as @xmath67 . *",
    "if @xmath67 is an allowed matching and @xmath186 is a cycle or a path which does not begin from a node in @xmath160_d$ ] , then @xmath125 is an allowed matching as well .",
    "we first argue that no two edges in @xmath125 leave the same node .",
    "indeed , observe that if the augmentation procedure adds @xmath199 to @xmath125 then @xmath103 must be a source node while @xmath102 must be a destination node ; and moreover , one of the following conditions holds :    1 .",
    "@xmath186 is a path and @xmath103 is its first core node .",
    "then @xmath103 has no outgoing link in @xmath67 .",
    "either @xmath186 is not a path , or @xmath186 is a path but @xmath103 is not its first core node .",
    "then @xmath103 is matched in @xmath67 and the augmentation on @xmath186 has previously removed the edge @xmath200 from the matching for some @xmath178 .      to see that no two edges are incoming on the same node in @xmath125 , suppose the augmentation adds @xmath199 to the matching . if @xmath102 is unmatched in @xmath67 ,",
    "there is no problem ; and if @xmath102 is matched but @xmath186 is a cycle , this means we have previously removed some edge @xmath201 from @xmath67 so that , once again , there is no problem .",
    "finally if @xmath102 is matched in @xmath67 and @xmath186 is a path , by assumption we have that @xmath102 is not the last node of the path @xmath186 ( since the augmentation procedure is only performed on paths which do not end at matched destination nodes ) .",
    "furthermore , by construction of @xmath185 , we can further conclude that the next edge in @xmath186 is a core edge ; indeed , non - core edges go out only from unmatched destination nodes .",
    "thus once again we know that we have previously removed the edge @xmath201 from the matching for some @xmath202 .",
    "we conclude that no two edges in @xmath125 are incoming on the same node .",
    "thus @xmath125 is a matching .",
    "now suppose @xmath186 is a path from @xmath167 to @xmath170 and let us consider how the set of matched destination nodes changes after performing the augmentation procedure . there are two possibilities .",
    "first , let us consider the case when the first edge in @xmath186 leads to an unmatched source node .",
    "now each time the path takes the edge @xmath203 , we have that @xmath109 goes from unmatched - to - matched after the augmentation while @xmath108 goes from unmatched - to - matched .",
    "no other destination nodes besides all such @xmath108 become unmatched as a result of the augmentation procedure , and the last core ( destination ) node on the path becomes matched .",
    "since @xmath109 and @xmath108 belong to the same @xmath163_d$ ] , we have that the cost strictly decreases by one .    second ,",
    "suppose the first edge in @xmath186 leads to some @xmath168 , and the second edge in @xmath186 then leads to a matched destination node .",
    "this destination node goes from being matched in @xmath67 to unmatched in @xmath125 ; and the destination node which is the _",
    "last _ destination node goes from unmatched in @xmath67 to matched in @xmath125 .",
    "moreover , each time the non - core edge @xmath203 appears in @xmath186 we again have that @xmath109 goes from being unmatched in @xmath67 to matched in @xmath125 , while @xmath108 goes from being matched in @xmath67 to being unmatched in @xmath125 .",
    "again in this case both @xmath105 and @xmath104 belong to the same @xmath163_d$ ] .",
    "consequently , after performing the augmentation on the path @xmath186 under consideration , @xmath163_d$ ] still has a single unmatched node .",
    "now recall that , by construction of @xmath185 , the first destination node on the path must lie in some @xmath169_d$ ] while the last destination node on the path lies in @xmath204_d$ ] . thus performing the augmentation on a path @xmath186 results in : ( i ) the set @xmath169_d$ ] in which the first destination node of @xmath186 lies goes from having no unmatched node to a single unmatched node ( ii ) the set of unmatched nodes in any @xmath163_d$ ] is unaffected ( iii ) the set of unmatched node in some @xmath205_d$ ] decreases by one .",
    "it immediately follows that doing the augmentation procedure on @xmath186 decreases cost by one .",
    "the proof that augmenting on a cycle does not reduce cost is essentially identical to the proof we have just given for paths : it is an immediate corollary of the observation that the only change in the set of matched nodes comes as a result of the edges @xmath203 , which has the consequence of changing which node within some @xmath206_d$ ] is matched with no effect on cost .",
    "we omit the details .    finally , supposing that @xmath67 was an allowed matching , let us show that the matching @xmath125 we get after the augmentation procedure is also an allowed matching , under the assumption that @xmath186 is a cycle or a path that does not begin at a node in @xmath160_d$ ] .",
    "indeed , let us consider all the ways in which the augmentation procedure can lead to a node becoming unmatched .",
    "as we have remarked earlier , when the augmentation procedure goes through @xmath203 then @xmath108 goes from matched - to - unmatched .",
    "also , if @xmath107 is the first core node on a path , then @xmath107 goes from matched - to - unmatched . in no other case",
    "is a destination node made unmatched by the augmentation procedure . since by construction , nodes @xmath108 such that the edge @xmath203 appears in @xmath186 are not in @xmath4 , and by assumption nodes @xmath107",
    "which are the first nodes of any path are also not in @xmath4 , we have that @xmath125 is an allowed matching .",
    "suppose @xmath67 is a matching and let @xmath125 be the result of performing an iteration of the augmentation algorithm ( i.e. , of performing the augmentation procedure on a maximal collection of vertex - disjoint shortest paths in @xmath164 ) .",
    "then :    1 .",
    "if @xmath113 has an outgoing edge in @xmath67 , it has an outgoing edge in @xmath125 .",
    "if some source connected component has a single unmatched node or no unmatched nodes in @xmath67 ( i.e. , if it is some @xmath139 or some @xmath145 ) then it has at most one unmatched node in @xmath125 .",
    "no source connected component goes from having at least one unmatched node in @xmath67 to having no unmatched nodes in @xmath125 .",
    "let @xmath187 be a maximal collection of vertex - disjoint shortest paths from @xmath167 to @xmath170 in @xmath164 .",
    "item ( 1 ) follows because the augmentation on @xmath187 always adds an outgoing edge from each @xmath113 whose outgoing edge it removes .",
    "item ( 2 ) follows because augmenting on @xmath187 does not change the number of unmatched nodes in any @xmath163_d$ ] and can increase the number of unmatched nodes in any @xmath169_d$ ] by at most @xmath56 .",
    "finally , item ( 3 ) follows because , due to the presence of the nodes @xmath174 , if the source connected component @xmath172 has @xmath171 unmatched nodes , then at most @xmath207 paths in @xmath187 have destination nodes in @xmath176_d$ ] as their last core nodes .",
    "consequently , @xmath172 retains at least one unmatched node after augmenting on @xmath187 .",
    "we now need to define some new notions to proceed .",
    "suppose @xmath67 and @xmath125 are matchings in the splitting of @xmath72 ; the graph @xmath208 is a subgraph of the splitting @xmath161 obtained the by taking the symmetric diference of @xmath67 and @xmath125 and then reversing the orientation of every edge of @xmath67 .",
    "we then have the following lemma .",
    "if @xmath67 and @xmath125 are matchings , then each weakly connected component of @xmath208 is either a path or a cycle .",
    "furthermore , no weakly connected component of @xmath209 which is a path can begin at a source node which has an outgoing link in @xmath67 or end at a destination node which is matched in @xmath67 .",
    "[ lemma : deltastructure ]      indeed , suppose @xmath105 is a source node with two ( or more ) out - going edges ; then both outgoing edges would have to lie in @xmath125 , since all outgoing edges from source nodes in @xmath208 come from @xmath125 .",
    "this would contradict the fact that @xmath125 is a matching .",
    "if @xmath105 is a source node with two incoming edges , both of them would have to come from @xmath67 , which contradicts the fact that @xmath67 is a matching .",
    "the case when @xmath105 is a destination node is similar .",
    "this proves that each weakly connected component of @xmath208 is a path or a cycle .    to prove the second part ,",
    "suppose that @xmath186 is a path weakly connected component of @xmath208 which begins at source node @xmath105 .",
    "if @xmath105 has an outgoing link in @xmath67 , then because no incoming edges on @xmath105 are in @xmath186 , we can conclude that the outgoing edge from @xmath105 was the same in @xmath67 and @xmath125 .",
    "but this means that @xmath105 has no incoming or outgoing edges in @xmath208 and thus can not be the start of a path .",
    "a similar argument shows the last node of a path can not be a matched destination node .",
    "since all the weakly connected components of @xmath208 are by definition vertex - disjoint , the previous lemma implies we can perform the augmentation procedure on them .",
    "we then immediately have the following corollary .",
    "suppose otherwise : there is some @xmath210 such that @xmath208 has a path beginning at @xmath211 .",
    "this means @xmath211 has no incoming edge in @xmath208 .",
    "this implies that either of the the following two possibilities holds : ( i ) @xmath211 has no incoming edge in @xmath125 ( ii ) @xmath211 has an incoming edge in @xmath125 , and it is the same edge as its incoming edge in @xmath67 .",
    "each of these two possibilities leads to a contradiction : ( i ) contracts @xmath125 being an allowed matching and ( ii ) implies that @xmath211 has no outgoing edges in @xmath208 and thus can not be the start of a path .",
    "we are now ready to complete a key step in the in the proof of theorem [ thm ] .",
    "the rather involved construction of @xmath185 as well as all the previous definitions have been written in order that the following lemma is holds .",
    "let @xmath67 be an allowed matching in @xmath72 . recall that @xmath157 denotes the cost of @xmath67 and",
    "let @xmath81 be the minimum cost of any allowed matching in @xmath72 . we then have that there exist @xmath212 vertex - disjoint paths from @xmath167 to @xmath170 in @xmath164 .",
    "[ lemma : pathscount ]    let @xmath93 be an allowed matching in @xmath72 of cost @xmath81 and let @xmath213 be a listing of the paths in @xmath214 .",
    "let us greedily `` clump '' these paths as follows : if some path @xmath215 has a last node @xmath109 in some @xmath163_d$ ] and another path @xmath216 has a first node @xmath108 in the same @xmath163_d$ ] , we merge them into the same path by inserting the non - core edge @xmath203 .",
    "note that this edge @xmath217 exists since , first by lemma [ lemma : deltastructure ] , the node @xmath109 is unmatched ; and by lemma [ lemma : fsymmdiff ] we have that @xmath218 ; and finally , by construction , @xmath164 has edges leading from the single unmatched node in each @xmath163_d$ ] to all nodes in @xmath163_d \\cap f^c$ ] .    we continue greedily clumping these paths in this way until we can not clump any more .",
    "let us call the result @xmath219 observe that performing the augmentation procedure on @xmath220 is the same as performing the augmentation procedure on @xmath221 since the augmentation procedure automatically ignores the extra non - core edges we inserted .",
    "let us observe several key properties of the paths @xmath220 .",
    "first , they are naturally vertex disjoint .",
    "secondly , if some @xmath222 has a final node in some @xmath206_d$ ] , no other @xmath222 has a starting node in the same @xmath206_d$ ] ( because else they would have been clumped together ) . similarly ,",
    "if some @xmath222 begins in some @xmath206_d$ ] , then no other @xmath222 has last node in the same @xmath206_d$ ] .",
    "now since augmenting on a cycle does not change the cost of a matching ( by lemma [ lemma : allowed ] ) , we have by corollary [ cor : ma ] that the augmentation procedure on @xmath220 decreases the cost of the matching by @xmath212 . order @xmath220 arbitrarily and let @xmath223 be a listing of all the @xmath222 which result in cost decreases when doing the augmenting procedure on them sequentially .",
    "since augmenting on any path can decrease cost by at most @xmath56 , we have that there are at least @xmath212 paths @xmath224 in this list .",
    "we next argue that at least half of these paths @xmath224 can be extended to a path from @xmath167 to @xmath170 by appending at the beginning of the path either the edge @xmath225 for some source node @xmath113 or the edges @xmath226 for some @xmath227 and some @xmath228 belonging to some @xmath169_d$ ] ; and appending an edge either going directly to @xmath170 or going to some @xmath229 and then to @xmath170 at the end of the path .",
    "furthermore , we will argue that appending these edges keeps the paths @xmath224 vertex disjoint .",
    "once these claims are shown , the proof of the current lemma will be complete .    indeed , by lemma [ lemma : deltastructure ] the paths @xmath224 must begin at a source node with no outgoing links in @xmath67 or a matched destination node in @xmath67 . in the first case , we can append a link going from @xmath167 to the first node of the path . in the second case",
    ", we further have that first node of the path belongs to some @xmath230_d$ ] - else , augmenting on the path would not result in a cost decrease . in this case",
    ", we can append a link going from @xmath167 to @xmath168 , and @xmath168 to the matched destination node which is the first on the path ; this is possible because lemma [ lemma : fsymmdiff ] implies that the first node on the path is in @xmath76 , and by construction @xmath168 has outgoing links to every node in @xmath230_d \\cap f^c$ ] .",
    "furthermore , we argue that this addition of initial edges to all the @xmath224 keeps them vertex disjoint .",
    "indeed , this is immediate in the case when the first node of @xmath224 is a source node . in the case when the first node of @xmath224 is a matched destination node , we observe that we can not have two of the paths @xmath231 beginning at matched destination nodes in the same @xmath230_d$ ] , since augmenting on one of them after having augmented on the other could not decrease cost .",
    "consequently , adding the links @xmath232 and from @xmath168 to the first node of the path @xmath224 keeps the paths vertex disjoint .    as to the end of these paths ,",
    "recall that by lemma [ lemma : deltastructure ] each path @xmath224 must end at either a source node or an unmatched destination node in @xmath67 .",
    "since augmentation on any path ending at a source node can not decrease cost , it must be the latter .",
    "consider the last node of the path , which we will call @xmath233 .",
    "we argue it does not lie in some @xmath206_d$ ] .",
    "indeed , after we have augmented on @xmath234 , we trivially have that @xmath233 does not lie in a source connected component with one unmatched destination node because the augmentation on @xmath224 decreases cost .",
    "we need to argue this holds initially , before the augmentations on @xmath234 are done .    indeed ,",
    "if @xmath233 did lie in some @xmath206_d$ ] , we claim that the destination nodes comprising @xmath206_d$ ] would have remained with a single unmatched destination node after we have augmented on @xmath234 .",
    "this is because the node @xmath233 was initially unmatched and we know that there have been no paths in @xmath234 whose starting points were in @xmath206_d$ ] : any such path would have been clumped with @xmath224 .",
    "thus , under the assumption that @xmath233 lies in some @xmath206_d$ ] , we have that no node in @xmath206_d$ ] has become unmatched after augmentation on @xmath234 , while the only unmatched node has remained unmatched .",
    "this proves that if @xmath233 lies in some @xmath206_d$ ] initially , then it still lies in a source strongly connected component with a single unmatched node by the time we augment on @xmath234 .",
    "since we know that augmenting on @xmath224 reduces cost , we therefore have that @xmath233 lies in some @xmath235_d$ ] .    now if @xmath233 does not belong to the set of destination nodes of a source connected component , we append the edge @xmath236 and we are done .",
    "if @xmath233 does lie in a source connected component , then we append a link going from @xmath233 to any @xmath229 out - neighbor which does not already have an incoming link from doing the appending to @xmath234 .",
    "we finally need argue such a neighbor @xmath229 will always be available . indeed ,",
    "if a source connected component @xmath237 has @xmath238 unmatched nodes , then there will be at most @xmath239 paths @xmath224 with a destination node in @xmath240_d$ ] : otherwise augmenting on the @xmath238th such @xmath224 would not result in a cost decrease .",
    "since there are @xmath239 nodes @xmath229 with incoming links from this connected component , one will always be available .    as mentioned , the previous lemma is a key step in the proof of theorem [ thm ] .",
    "it tells us that , as long as we are not at the minimal cost allowed matching , we will be able to perform the augmentation procedure on a path from @xmath167 to @xmath170 in @xmath185 .",
    "note that since the augmentation procedure decreases cost by @xmath56 , and since the cost of any allowed matching is @xmath79 , then the previous lemma immediately implies that the minimum cost allowed matching will be found after @xmath79 rounds of the augmentation procedure . by proposition [ prop : opcount ] and proposition [ prop : allexists ]",
    ", this immediately implies the minimum cost allowed matching can be found in @xmath241 operations ( provided the graph has no isolated nodes ; recall that we did @xmath95 pre - processing to ensure this ) .",
    "our goal in the remainder of the paper is improve this to @xmath94 .",
    "this is possible because lemma [ lemma : pathscount ] tells us that the number of shortest paths from @xmath167 to @xmath170 in @xmath164 is an upper bound on the distance to optimality @xmath212 . if we can argue that the number of paths from @xmath167 to @xmath170 decreases fast as a result of the augmentation procedure , improved bounds will be obtained .",
    "our strategy , inspired , of course , by the hopcroft - karp algorithm , will be to argue that the distance from @xmath167 to @xmath170 increases as a result of the augmentation procedure",
    ". since all the paths from @xmath167 to @xmath170 are vertex disjoint , lower bounds on the distance from @xmath167 to @xmath170 immediately imply upper bounds on the number of shortest paths from @xmath167 to @xmath170 .",
    "note that , due to the way of @xmath185 is constructed , performing the augmentation procedure on a collection of paths is the same as reversing the direction of all the core edges in these paths ( as then making the necessary modifications to links involving @xmath183 and the @xmath184 stemming from the changes in which nodes are matched ) .",
    "consequently , we begin with a sequence of lemmas about the effect of reversing edges on distances in directed graphs .",
    "recall that a source node in a directed graph is a graph with no incoming links while a sink node in a directed graph is a graph with no outgoing links .",
    "since we will need to compare distances in different graphs , we adopt the notation @xmath242 to denote the distance from node @xmath105 to node @xmath104 in the directed graph @xmath72 . given a directed graph @xmath72 and nodes @xmath183 , we define @xmath243 to denote the set of arcs which lie on a shortest paths from @xmath167 to @xmath170 in @xmath72 .",
    "consider a directed graph @xmath244 , let @xmath245 be any subset of @xmath246 and suppose we reverse the orientation of every arc in @xmath245 .",
    "call the resulting graph @xmath247 . then , for any node @xmath248 we have that @xmath249 .",
    "[ lemma : rev : nonincr ]    we argue by induction on @xmath250 .",
    "indeed , nodes @xmath248 which have @xmath251 must have a link from @xmath167 to @xmath248 in @xmath247 .",
    "this link must be in @xmath244 , since no link incoming to @xmath167 was reversed since no link incoming to @xmath167 could be on a shortest path starting at @xmath167 .",
    "thus we have @xmath252 .",
    "suppose now we have established the proposition for all nodes @xmath248 with @xmath253 .",
    "consider a node @xmath254 with @xmath255 .",
    "let @xmath186 be the predecessor of @xmath254 on any shortest path from @xmath167 to @xmath254 in @xmath247 .",
    "we have @xmath256 and consequently by the inductive hypothesis , we know that @xmath257 .",
    "we now consider two cases .      in the second case",
    ", we have that the link @xmath258 is not present in @xmath244 .",
    "this means the link @xmath260 was present in @xmath244 and was reversed by the procedure in the lemma .",
    "thus @xmath260 is on a shortest path starting from @xmath167 in @xmath244 .",
    "this means @xmath261 , and we are finished .",
    "the previous lemma says that reversing edge directions on a collection of shortest paths can not decrease distance .",
    "the next lemma uses this to strengthen the conclusion further , namely that this procedure will strictly increase distances for some nodes .",
    "the proof is essentially a more careful examination of the proof of lemma [ lemma : rev : nonincr ] just given .",
    "note that @xmath264 where we used lemma [ lemma : rev : nonincr ] for the last inequality .",
    "now since @xmath265 was on a shortest path from @xmath167 to @xmath170 in @xmath244 , we have @xmath266 so putting the last two inequalities together , @xmath267    as a consequence of these two lemmas , we can conclude that the distance from @xmath167 to @xmath170 strictly increases if we reverse enough arcs .",
    "this is formally proved in the following lemma .",
    "we will say that a set @xmath268 is _ saturating _ if every shortest path from @xmath167 to @xmath170 in @xmath72 has at least one arc in @xmath245 .    consider a directed graph @xmath244 ,",
    "let @xmath245 be a saturating subset of @xmath246 and suppose we reverse the orientation of every arc in @xmath245 .",
    "call the resulting graph @xmath247 . then @xmath269 .",
    "[ lemma : mainincr ]    we know from lemma [ lemma : rev : nonincr ] that @xmath270 .",
    "suppose it was true that @xmath271 .",
    "consider a shortest path from @xmath167 to @xmath170 in @xmath247 and observe that by definition this path must have an arc in @xmath245 .",
    "suppose the edge @xmath272 is the last arc on this path in @xmath245 .",
    "by lemma [ lemma : rev : firstincr ] , we have that @xmath273 . since the shortest path from @xmath104 to @xmath170 does not involve any reversed edges , this proves the lemma .",
    "we now shift back to the study of the augmentation procedure . as a consequence of the lemma we have just proved",
    ", we will show that each round of the augmentation procedure increases the distance from @xmath167 to @xmath170 in the graph @xmath185 .",
    "let @xmath67 be an allowed matching and let @xmath125 be the matching obtained by performing one iteration of the augmentation algorithm ( i.e. , by performing the augmentation procedure along a maximal collection of vertex - disjoint shortest paths from @xmath167 to @xmath170 in @xmath164 ) .",
    "then @xmath274 [ lemma : stincr ]    let @xmath275 be the set of edges @xmath203 on the maximal vertex - disjoint collection of shortest paths in @xmath164 from @xmath167 to @xmath170 on which the augmentation is made .",
    "we claim that @xmath276 may be directly constructed from @xmath164 via a sequence of steps , each of which can be described as follows :",
    "1 .   add edges from each @xmath108 such that @xmath203 belongs to @xmath275 for some @xmath109 to every other node in the @xmath206_d$ ] containing @xmath108 which belongs to @xmath76 .",
    "2 .   reverse all edges along a saturating collection of shortest paths from @xmath167 to @xmath170 .",
    "3 .   deletes some of the nodes @xmath168 and all their incoming and outgoing edges . 4 .",
    "delete the links from @xmath167 to some of the source nods .",
    "5 .   decrease the number of nodes @xmath174 corresponding to each source strongly connected component remove some of the edges going to these to account for changes in the set of matched nodes . 6 .",
    "delete all edges @xmath277 where @xmath203 belongs to @xmath275 for some @xmath108 .",
    "indeed , with the exception of the addition of the adjective _ saturating _ in step ( 2 ) , this is simply a recitation of all the ways in which @xmath276 differs from @xmath164 .",
    "let us describe the changes made in the augmentation procedure and note how they correspond to the above list .",
    "consider the edges @xmath203 taken in some source connected component @xmath206_d$ ] .",
    "then this source connected component still has a single unmatched node after the augmentation procedure .",
    "since the new unmatched node is @xmath108 , we need to add edges going from it to every other node in @xmath206_d \\cap f^c$ ] - this is done in step ( 1 ) .",
    "we also need to remove edges which are going from @xmath109 to nodes in @xmath206_d \\cap f^c$ ] - this is done in step 6 . moreover , some components which had no unmatched nodes now have unmatched nodes , and the corresponding vertices @xmath168 need to be deleted . this is step ( 3 ) furthermore , some source nodes which were unmatched become matched and we need to delete links going to them from @xmath167 - this is step 4 .",
    "when a source connected component changes the number of its unmatched nodes , the number of nodes @xmath174 needs to be adjusted - this is step 5 .",
    "note that destination nodes outside of @xmath169_d$ ] can only go from unmatched - to - matched as a result of the augmentation procedure , so the number of @xmath174 can only decrease , and edges going from destination nodes to nodes @xmath174 can only need to be deleted .",
    "* by lemma [ lemma : donot ] , item ( 1 ) we do not need to add any edges going from @xmath167 to any source nodes . * by lemma [ lemma : donot ] ,",
    "item ( 2 ) no new nodes @xmath174 need to be introduced .",
    "* by lemma [ lemma : donot ] , item ( 3 ) we do not need to add any nodes @xmath168 . * since no destination nodes outside of some @xmath169_d$ ] goes from matched to unmatched as a result of the augmentation procedure , we do not need to add edges going from newly unmatched destination nodes to @xmath170 .    to summarize , it is only the correspondence of item ( 2 ) to the augmentation procedure which is nontrivial . while it is immediate that augmentation on a collection of paths has the effect of reversing all the core edges on those paths , two things need to be shown .",
    "first , we need to show that the maximal collection of vertex - disjoint shortest paths in the augmentation procedure is _ still _ a maximal collection of vertex - disjoint shortest paths from @xmath167 to @xmath170 once we ve added extra edges in step ( 1 ) .",
    "secondly , we need to argue that reversing the edges in this maximal _ vertex - disjoint _ collections of shortest paths from @xmath167 to @xmath170 can be thought of as reversing the edges in a _ saturating _ collection of shortest paths from @xmath167 to @xmath170 .",
    "indeed , that the shortest path collection used by the augmentation procedure is still a maximal collection of vertex - disjoint shortest paths after extra edges are added in step ( 1 ) , simply observe that none of the extra edges can be on a shortest path from @xmath167 to @xmath170 since they go from @xmath108 to @xmath107 where @xmath277 already existed and @xmath109 had a shorter distance from @xmath167 than @xmath108 since the edge @xmath278 was on a shortest path from @xmath167 to @xmath170 in @xmath164 .    as for saturating",
    ", it is strictly speaking not true that the maximal vertex - disjoint paths reversed by the augmentation procedure will be saturating .",
    "hence we will use the following trick : in step ( 2 ) let us reverse more edges than just done by the augmentation procedure . specifically ,",
    "if the augmentation procedure reversed the edge @xmath279 , then we reverse * all * links going out from @xmath181 .",
    "note that @xmath181 is unmatched in this case and all of its outgoing links go to some nodes @xmath280 , so that this additional reversal of edges makes no difference : the extra edges we reverse will get deleted in step ( 5 ) anyway as we account for @xmath181 becoming matched .",
    "we define @xmath281 to be the set of edges reversed in this way .",
    "we argue that @xmath281 is indeed saturating . indeed , suppose there is another shortest path @xmath282 from @xmath167 to @xmath170 which is edge disjoint from the set of edges @xmath281 . since @xmath281 contains the maximal collection of vertex - disjoint paths from @xmath167 to @xmath170 found by the augmentation procedure , we have that @xmath282 shares a vertex with some arc in @xmath281 .",
    "this vertex can not be some @xmath168 or some @xmath174 , since the former has only one incoming edge while the latter has only one outgoing edge , and edge disjointness of @xmath282 from @xmath281 is immediately contradicted .",
    "thus it must be a core edge that @xmath282 has in common with some path in @xmath281 .",
    "could it be a matched destination node ?",
    "no , because the only outgoing link from a matched destination node @xmath101 lead to the source node @xmath97 such that @xmath100 is in the twin matching of @xmath67 , so that edge - disjointness from @xmath281 is immediately contradicted .",
    "could it be an unmatched destination node @xmath98 ?",
    "no , because the only outgoing links from such a node lead only to @xmath170 or to one or more @xmath174 . in the first case , edge - disjointness is immediately contradicted . in the second case ,",
    "observe that all outgoing links from such a @xmath98 to some @xmath174 are in @xmath281 by the definition of @xmath281 , so that edge disjointness is again contradicted .",
    "could it be a source vertex ?",
    "no , because source vertices have exactly one incoming arc in @xmath185 ( source vertices without outgoing links in @xmath67 have an incoming arc from @xmath167 while source vertices with outgoing links in @xmath67 have a single incoming arc from a destination vertex ) .",
    "this proves that the action of the augmentation procedure may be thought of as reversing all edges along a saturating collection of arcs .    having shown that indeed @xmath276",
    "can be constructed from @xmath164 via steps ( 1)-(6 ) , we now argue that performing these six steps increases distance from @xmath167 to @xmath170 . indeed , it is immediate that steps ( 3),(4),(6 ) can not decrease the distance from @xmath167 to @xmath170 .",
    "step ( 5 ) can not decrease distance from @xmath167 to @xmath170 because by lemma [ lemma : donot ] , item ( 2 ) no new nodes @xmath174 need to be added for source strongly connected components which did not previously have them .",
    "now step ( 2 ) increases the distance from @xmath167 to @xmath170 by one as a consequence of lemma [ lemma : stincr ] . as for step ( 1 )",
    ", it can not decrease the distance from @xmath167 to @xmath170 because the added edges can not lie on any shortest path from @xmath167 to @xmath170 due to the fact that since , once again , @xmath203 lies on a shortest path from @xmath167 to @xmath170 in @xmath164 .",
    "this concludes the proof .      by lemma [ lemma : pathscount ] , once we can not find a shortest path from @xmath167 to @xmath170 in @xmath185 to do the augmentation procedure , we have found the minimum cost allowed matching . by lemma [ lemma : stincr ] , after @xmath21 iterations of the algorithm , we have that the distance from @xmath167 to @xmath170 in @xmath185 is at least @xmath21 .",
    "since the total number of nodes in @xmath185 is at most @xmath283 , this means the number of vertex disjoint shortest paths from @xmath167 to @xmath170 is at most @xmath284 after @xmath21 augmentations . by lemma [ lemma : pathscount ] , this means the matching at this point of the algorithm is at most @xmath284 more costly than the optimal , which means the optimal matching is found after @xmath284 more iterations of the augmentation algorithm .",
    "thus the total number of iterations taken by the augmentation algorithm is bounded by @xmath285 .",
    "m. egerstedt , s. martini , m. cao , k. camlibel , a. bicchi , `` interacting with networks : how does structure relate to controllability in single - leader consensus networks ? '' _ ieee control systems _ , vol .",
    "66 - 73 , 2012 .",
    "s. pequito , n. popli , s. kar , m. d. ilic , a. p. aguiar , `` a framework for actuator placement in large scale power systems : minimal strong structural controllability , '' _ proceedings of the international workshop on computational advances in multi - sensor adaptive processing _ , 2013 .",
    "a. rahmani , m. ji , m. mesbahi , m. egerstedt , `` controllability of multi - agent systems from a graph - theoretic perspective , '' _ siam journal on conrol and optimization _ ,",
    "162 - 186 , 2009 .",
    "g. ramos , s. pequito , a.p .",
    "aguilar , j. ramos , s. kar , `` a model checking framework for linear time invariant switching systems using structural systems analysis , '' _ proceedings of the allerton conference on communication , control , and computing _",
    ", 2013 .",
    "s. sundaram , c. hadjicostis , `` structural controllability and observability of linear systems over finite fields with applications to multi - agent systems , '' _ ieee transactions on automatic control _ , vol .",
    "60 - 73 , 2013 ."
  ],
  "abstract_text": [
    "<S> given a linear system @xmath0 , where @xmath1 is an @xmath2 matrix with @xmath3 nonzero entries , we consider the problem of finding the smallest set of state variables to affect with an input so that the resulting system is structurally controllable . </S>",
    "<S> we further assume we are given a set of `` forbidden state variables '' @xmath4 which can not be affected with an input and which we have to avoid in our selection . </S>",
    "<S> our main result is that this problem can be solved deterministically in @xmath5 operations . </S>"
  ]
}