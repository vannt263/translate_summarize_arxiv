{
  "article_text": [
    "nowadays , the advantages of java over c++ seem overwhelming .",
    "being the most popular open - source programing language , java retains the c++ syntax , but significantly simplifies the language .",
    "this is ( incomplete ) list of advantages of java over c++ : 1 ) java is multiplatform with the philosophy of  write once , run anywhere `` ; 2 ) better structured , clean , efficient , simpler ( no pointers ) ; 3 ) stable , robust and well supported : java programs written ( or compiled ) many years from now can be compiled ( or executed ) without modifications even today .",
    "this is true even for java source code with graphic widgets .",
    "in contrast , c++ programs always require continues time - consuming maintenance in order to follow the development of c++ compilers and graphic desktop environment ; 4 ) java has reflection technology , which is not present in c++ .",
    "the reflection allows an application to discover information about created objects , thus a program can design itself at runtime . in particular , this is considered to be essential for building ' ' intelligent \" programs making decisions at runtime ; 5 ) free intelligent ides , which are absolutely necessary for large software projects ; 6 ) automatic garbage collection , i.e. a programmer does not need to perform memory management ; 7 ) extensive compile - time and run - time checking ; 8) programs written in java can be embedded to the web .",
    "this is important for distributed analysis environment ( java webstart , plugins , applets ) , especially when hep data analysis tools are not localized in one single laboratory but scattered over the web .",
    "the importance of java in hep data analysis has been recognized since establishing the freehep java library and producing a first version of jas ( java analysis studio )  @xcite . presently , many elements of the grid software are written in java . at lhc",
    ", java is used for event displays and several other areas .",
    "while c++ language is remaining to be the main programming language at lhc , it lacks many features existing in java , which makes the entire lhc software environment tremendously complicated and difficult to handle by the end users .",
    "the lack of robustness and backward compatibility of c++ free compilers leads to various hep - supported `` scientific '' flavors of linux , with different architecture ( 32 bit or 64 ) , which are all tightened to particular libraries and hardware .",
    "for example , the main computational platform for atlas is scientific linux 4.6 .",
    "it will be used for future data taking , however , even now it is several generations behind the main - stream linux modern distributions ( fedora , ubuntu , suse etc ) and can not be easily installed on modern laptops .",
    "currently , the hep community is required to support the entire computing chain , from hardware and operating systems , to the end - user programs , rather than concentrating on hep - specific computational tasks .",
    "this is a significant difference from the initial concept , when hep software could be run essentially on any platform and a vendor - supported operating system .",
    "it should be pointed out that c+ has been chosen as the main programming language at lhc at the time when java was still behind c++ , lacking just - in - time ( jit ) compilers to convert parts of the bytecode to native code in order to improve execution time . at that time ,",
    "python  @xcite , another portable programming language , also did not have enough power to be widely used in hep .",
    "as java , python has also become increasingly popular programming language in science and engineering  @xcite , since it is interactive , object - oriented , high - level , dynamic and portable .",
    "it has simple and easy to learn syntax which reduces the cost of program maintenance .",
    "while being portable , python implemented in c ( cpython ) requires user - specific c / c++ libraries for high - performance computing , thus it can not be considered a basis for a multiplatform data - analysis environment .",
    "jython  @xcite is an implementation of python in java and , as any java application , is truly multiplatform .",
    "in contrast to cpython , jython is fully integrated with the java platform , thus jython programs can make full use of extensive built - in and third - party java libraries .",
    "therefore , jython programs have even more power than the standard python implemented in c. finally , the jython interpreter is freely available for both commercial and non - commercial use .",
    "jhepwork  @xcite is a full - featured object - oriented data analysis framework for scientists that takes advantage of the jython language and java .",
    "jython macros are used for data manipulation , data visualization ( plotting 1d and 2d histograms ) , statistical analysis , fits , etc .",
    "data structures and data manipulation methods integrated with java and jaida freehep libraries  @xcite combine remarkable power with a very clear syntax .",
    "jhepwork java libraries can also be used to develop programs using the standard java , without jython macros",
    ".    programs written using jhepwork are usually rather short due the simple python syntax and high - level constructs implemented in the core jhepwork libraries . as a front - end data - analysis environment , jhepwork helps to concentrate on interactive experimentation , debugging , rapid script development and finally on workflow of scientific tasks , rather than on low - level programming .",
    "jhepwork is an open source product which is implemented 100 percent in java .",
    "since it is fully multiplatform , it does not require installation and can be run on any platform where java is installed .",
    "it can be used to develop a range of data - analysis applications focusing on analysis of complicated data sets , histograms , statistical analysis of data , fitting .",
    "it offers a full - featured , extensible multiplatform ide implemented in java .",
    "jhepwork is seamlessly integrated with java - based linear collider detector ( lcd ) software concept and it has the core based using freehep libraries and other gnu - licensed packages .",
    "while jhepwork is mainly designed to be used in high - energy physics , it can also be used in any field , since all methods and classes are rather common in science and engineering .    below",
    "we will discuss only the key features of jhepwork , without the coverage of all available methods , which can easily be found using an extensive help system and the code completion feature of jhepwork .",
    "the main web page of jhepwork  @xcite contains the package itself , user manuals and about 50 examples with various macros .",
    "jhepwork consists of two major libraries : jehep ( jhepwork ide ) and jhplot ( jhepwork data - analysis library ) .",
    "both are licensed by the gnu general public license ( gpl ) .",
    "below we will compare jhepwork with two popular object - oriented packages currently used in high - energy physics : 1 ) jas package @xcite , based on java and freehep libraries @xcite and 2 ) c++ root package  @xcite .",
    "* has a full - featured integrated development environment ( ide ) with syntax highlighting , syntax checker , code completion , code analyser , an jython shell and a file manager .",
    "* contains powerful libraries to display data ( including 3d plots ) with a large choice for interactive labels and text attributes ( subscripts , superscripts , overlines , arrows , greek symbols etc . ) .",
    "jhepwork plots are more interactive than those written using freehep jaida libraries linked with jas .",
    "the plotting part is based on the jhplot library developed for the jhepwork project and jaxodraw java application @xcite .",
    "the latter can be used to draw feynman diagrams in addition to standard plots ; * is designed to write short programs due to several enhancements and simpler class names .",
    "the classes written for jhepwork were designed keeping in mind simplicity of numerous high - level constructs enabling the user to write programs that are significantly shorter than programs written using jas ; * includes high - level constructions for data manipulations , data presentations in form of tables , data input and output , calculations of systematical errors and visualization ( plots , tables , spreadsheet , neural networks ) which have no analogy in jas ; * includes an advanced help system with the code completion .",
    "for the core jhplot package , the code completion feature is complimented with a detailed api information on each method associated with certain class .",
    "* is seamlessly integrated with java - based linear collider detector ( lcd ) software concept ; * is a java - based program , thus it is fully multiplatform and does not require installation .",
    "this is especially useful for plugins distributed via the internet in form of bytecode jar libraries ; * java is very robust .",
    "java source codes developed many years from now can easily be compiled without any changes even today .",
    "even class libraries compiled many years from now can run on modern java virtual machines .",
    "therefore , the maintenance of jhepwork package is much less serious issue compared to root ; * since jhepwork is 100% java , it has automatic garbage collection , which is significant advantage over root c++/c ; * has a full - featured ide with syntax highlighting , syntax checker , code completion and analyser ; * can be integrated with the web in form of applets , thus it is better suited for distributed analysis environment via the internet .",
    "this is essential feature for modern large collaborations in high - energy physics and in other scientific fields ; * calculations based on jython / python scripts are typically 4 - 5 times shorter than equivalent root / c++ programs .",
    "several examples are discussed in ref .",
    "@xcite ; * calculations based on jython scripts can be compiled to java bytecode files and packed to jar class libraries without modifications of jython scripts .",
    "in contrast , root / cint scripts have to be written using a proper c++ syntax , without cint shortcuts , if they will be compiled into shared libraries ; * can access high - level python and java data structures ; * includes an advanced help system with a code completion based on the java reflection technology . with increasingly large number of classes and methods in root ,",
    "it is difficult to understand which method belongs to which particular class . using the jhepwork ide , it is possible to access the full description of all classes and methods during editing jython scripts ; * automatic updates which does not depend on particular platform . for root",
    ", every new version has to be compiled from scratch ; * powerful and intelligent external ides ( eclipse , netbean etc ) can be used productivity in developing hep analysis .",
    "jython scripts are about 4 - 8 times slower than equivalent java programs and about a factor five slower than the equivalent root / cint codes for operations on primitive data types ( remember , all jython data types are objects ) .",
    "this means that cpu extensive tasks should be moved to java jar libraries .",
    "jhepwork was designed for a data analysis in which program speed is not essential , as it is assumed that jhepwork scripts are used for operations with data and objects ( like histograms ) which have alredy been created by c++ , fortran or java code . for such front - end data analysis , the bottleneck is mainly user input speed , interaction with a graphical object using mouse or network latency .    in practice , final results obtained with jython programs can be obtained much faster than those designed in c++/java , because development is so much easier in jhepwork that a user often winds up with a much better algorithm based on jython syntax and jhepwork high - level objects than he / she would in c++ or java . in case of cpu extensive tasks , like large loops over primitive data types , reading files etc .",
    "one should use high - level structures of jython and jhepwork or user - specific libraries which can be developed using the jhepwork ide .",
    "many examples are discussed in the jhepwork manual  @xcite .",
    "i would like to thanks many people for support , ideas and debugging of the current jhepwork version .",
    "this work supported in part by the u.s .",
    "department of energy , division of high energy physics , under contract de - ac02 - 06ch11357 ."
  ],
  "abstract_text": [
    "<S> a role of java in high - energy physics ( hep ) and recent progress in development of a platform - independent data - analysis framework , jhepwork , is discussed . </S>",
    "<S> the framework produces professional graphics and has many libraries for data manipulation . </S>"
  ]
}