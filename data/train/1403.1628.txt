{
  "article_text": [
    "disimplicial arcs are important when gaussian elimination is performed on a sparse matrix , as they correspond to the entries that preserve zeros when chosen as pivots .",
    "let @xmath5 be an @xmath6 matrix and @xmath7 be the digraph that has a vertex @xmath8 for each row of @xmath5 and a vertex @xmath9 for each column of @xmath5 , where @xmath10 is an arc of @xmath7 if and only if @xmath11 . the _ fill - in _ of @xmath12 is the number of zero entries of @xmath5 that change into a non - zero value when @xmath12 is the next pivot . to reduce the extra space required to represent @xmath5 ,",
    "the idea is to pivot with an entry of minimum fill - in .",
    "the extreme case in which @xmath12 has zero fill - in happens when @xmath13 for every @xmath14 such that @xmath15 and @xmath16 .",
    "translated to @xmath7 , the arc @xmath10 has `` zero fill - in '' if and only if @xmath17 is an arc of @xmath7 for every @xmath14 such that @xmath18 and @xmath19 are arcs of @xmath7 . in graph",
    "theoretical terms , the arcs with `` zero fill - in '' are the _ disimplicial _ arcs of @xmath7 , i.e. , the arcs that belong to a unique diclique of @xmath7 .    the discussion above is usually described in terms of bisimplicial edges of bipartite graphs , and not in terms of the disimplicial arcs of digraphs .",
    "we emphasize that these concepts are equivalent for @xmath7 .",
    "say that a digraph is a _ source - sink ( st ) graph _ when every vertex is either a source or a sink .",
    "clearly , there are two st graphs for every bipartite graph @xmath20 , depending on whether the edges are oriented from @xmath21 to @xmath22 or from @xmath22 to @xmath21 .",
    "moreover , there is a one - to - one correspondence between the bisimplicial edges of @xmath23 and the disimplicial arcs of its orientations .",
    "thus , it is unimportant whether @xmath7 is oriented or non - oriented .",
    "there is a reason why we work with digraphs in this manuscript that has to do with the fact that we relate the disimplicial arcs of st graphs with the vertices of transitive digraphs .",
    "so , in this way we need not describe how the edges of a non - oriented graph should be oriented .",
    "finding the disimplicial arcs of a digraph @xmath24 is an interesting and somehow unexplored problem .",
    "it is rather simple to determine if an arc is disimplicial in @xmath25 time , thus all the disimplicial arcs can be obtained in @xmath26 time and @xmath25 space .",
    "( we use @xmath27 and @xmath28 to denote the number of vertices and arcs of @xmath24 . also , and we assume @xmath24 connected , hence @xmath29 . ) as we shall see in section  [ sec : disimplicial vs transitive ] , this problem can be reduced to that of finding the disimplicial arcs of an st graph @xmath23 . as it was noted by bomhoff and manthey in  @xcite",
    ", the twin reduction @xmath30 of @xmath23 can have at most @xmath31 disimplicial arcs , where @xmath32 is the number of _ thin arcs _ of @xmath30 .",
    "this yields an @xmath33 time and @xmath25 space algorithm to find all the disimplicial arcs of @xmath23 .",
    "bomhoff and manthey also show that certain random graphs have a constant number of thin arcs , in which case the algorithm takes linear time .",
    "fast matrix multiplication can also be used to obtain the disimplicial arcs in @xmath34 time , but at the expense of @xmath35 space .",
    "this algorithm is , therefore , not convenient for @xmath23 sparse .    in the process of gaussian",
    "elimination not only the next pivot is important ; the whole sequence of pivots is of matter .",
    "ideally , we would like to use no extra space throughout the algorithm to represent the input matrix @xmath5 .",
    "thus , no zero entry of @xmath5 should be changed into a non - zero entry in the entire elimination process . in  @xcite , golumbic  and  goss observed that this problem corresponds to finding a perfect elimination scheme of @xmath7 .",
    "an _ elimination scheme _ of a digraph @xmath23 is a sequence of arcs @xmath36 such that @xmath37 is disimplicial in @xmath38 , for every @xmath39 .",
    "the sequence @xmath40 is _ maximal _ when @xmath41 has no disimplicial arcs , while it is _ perfect _ when @xmath41 has no edges at all .",
    "not every digraph admits a perfect elimination scheme ; those that do admit it are said to be",
    "_ perfect elimination_. in  @xcite it is proven that every maximal elimination scheme of @xmath23 is perfect when @xmath23 is a perfect elimination st graph .",
    "the first algorithm to compute a maximal elimination scheme of an st graph was given by golumbic and goss in the aforementioned article .",
    "the algorithm works by iteratively removing the endpoints of a disimplicial arc until no more disimplicial arcs remain .",
    "the complexity of their algorithm is not explicit in  @xcite ; if the disimplicial arcs are searched for as in  @xcite , then @xmath42 time and @xmath25 space is required .",
    "goh and rotem  @xcite propose an @xmath43 time and @xmath44 space algorithm , which was later improved by bomhoff so as to run in @xmath45 time  @xcite .",
    "for the densest cases , the algorithm by spinrad  @xcite runs in @xmath46 time and @xmath44 space . in  @xcite",
    ", bomhoff shows the most efficient algorithm for the sparse case up to this date , requiring @xmath26 time while consuming @xmath25 space .",
    "a common restriction of the zero fill - in problem is to ask all the pivots to belong to the diagonal of @xmath5 .",
    "this problem is equivalent to that of finding a perfect elimination scheme whose arcs all belong to some input matching @xmath47 of @xmath7 .",
    "the matching @xmath47 represents the arcs that correspond to the diagonal entries of @xmath5 .",
    "again , this problem can be solved by finding an elimination scheme @xmath48 such that no arc of @xmath49 is disimplicial in @xmath50  @xcite",
    ". rose and tarjan  @xcite devise two algorithms for finding such an elimination scheme of an st graph , one runs in @xmath45 time and space , and the the other requires @xmath51 time but consumes only @xmath25 space .",
    "the @xmath26 time algorithm by bomhoff for finding an unrestricted scheme works in @xmath45 time and @xmath25 space for this case .    in this manuscript",
    "we consider two classes related to perfect elimination digraphs , namely diclique irreducible and weakly diclique irreducible graphs .",
    "as far as our knowledge extends , these graph classes were not studied previously .",
    "the motivating question is when does an st graph @xmath23 admit a perfect matching @xmath47 of disimplicial arcs . for such graphs ,",
    "any permutation of @xmath47 is a perfect elimination scheme , thus the pivots of the matrix associated to @xmath23 can be taken in any order from @xmath47 with zero fill - in . how to answer this question efficiently is already known , as it reduces to establishing if the thin arcs form a perfect matching of disimplicial arcs ( see  @xcite and section  [ sec : disimplicial vs transitive ] ) . nevertheless , the class defined by these graphs has some interesting properties .",
    "note that , by definition , the arc set of @xmath23 can be partitioned into a family of dicliques , all of which contain a disimplicial arc .",
    "this resembles the definition of _ weakly clique irreducible _ graphs  @xcite , in which every edge should belong to a clique that contains a simplicial edge .",
    "for this reason is that we say a digraph @xmath23 is _ weakly diclique irreducible ( wdi ) _ when every arc of @xmath23 belongs to a diclique that contains a disimplicial arc .",
    "the word `` weakly '' in the definition of weakly clique irreducible graphs comes from the fact that this is a superclass of the clique irreducible graphs .",
    "a graph is _ clique irreducible _ when every maximal clique has a simplicial edge  @xcite . by analogy",
    ", we define the _ diclique irreducible ( di ) _ digraphs as those digraphs in which every maximal diclique has a disimplicial arc .",
    "we are mainly interesting on the above problems restricted to sparse digraphs , where sparseness is well distributed . by this , we mean that we expect each subdigraph to be sparse as well .",
    "the _ arboricity _",
    "@xmath52 of a digraph correctly measures this kind of density , as it is the maximum value @xmath53 for a subdigraph with @xmath54 arcs and @xmath55 vertices  @xcite .",
    "so , rephrasing , we are mainly interest in the case in which @xmath56 . sometimes , however , our algorithms are most efficient when the input digraph is sparse in a stronger sense , as it must have low @xmath57-index or low maxdegree .",
    "@xmath57-index _ is the maximum @xmath58 such that the graph has @xmath58 vertices with degree at least @xmath58 , while the _ maxdegree _",
    "@xmath59 is the maximum among the degrees of the vertices ; it is well known that @xmath60 ( see e.g.  @xcite ) .    the article is organized as follows . in section  [ sec : preliminaries ]",
    "we introduce the terminology used . in section  [ sec : disimplicial vs transitive ] we show two simple operators that transform disimplicial arcs into transitive vertices and back . as a consequence , finding the disimplicial arcs and finding the transitive vertices are equally hard problems .",
    "in particular , an @xmath61 time and @xmath25 space algorithm for a digraph with @xmath31 thin arcs is obtained , improving over the algorithm in  @xcite .",
    "this algorithm is optimal unless an @xmath62 time algorithm for finding the transitive vertices of a sparse graph is obtained , which is an open problem  @xcite . in section  [ sec : disimplicial elimination ]",
    "we study the problem of generating maximal elimination schemes . for the general case",
    "we show an algorithm that runs in @xmath63 time and @xmath25 space .",
    "the improvement with respect to the algorithm in  @xcite is significant for graphs with @xmath64 . for the case in which all the arcs of the elimination scheme must belong to an input matching",
    ", we develop an @xmath65 time and @xmath25 space ; which is a major improvement for sparse graphs .",
    "the classes of wdi and di graphs are studied in section  [ sec : wdi and di ] .",
    "we show that the operators of section  [ sec : disimplicial vs transitive ] provide a bijection @xmath66 between a subfamily of wdi digraphs and finite posets . when di digraphs are considered , the range of @xmath66 are precisely the dedekind complete finite posets , i.e. , the finite posets that satisfy the least upper bound property . with respect to the recognition problems , it can be solved in @xmath65 time for wdi digraphs and in @xmath45 time for di digraphs .",
    "finally , in section  [ sec : further remarks ] we translate all the results to bipartite graphs while we provide further remarks .",
    "a _ digraph _ is a pair @xmath67 where @xmath68 is finite and @xmath69 ; @xmath68 and @xmath70 are the _ vertex set _ and _ arc set _ of @xmath24 , respectively .",
    "we write @xmath1 to denote the arc with _ endpoints _ @xmath71 and @xmath72 that _ leaves _ @xmath71 and _ enters _ @xmath72 , regardless of whether @xmath73 or not . note that our definition allows @xmath24 to have an arc @xmath74 for any @xmath75 ; in such case , @xmath71 is a _ reflexive _ vertex and @xmath74 is a _",
    "loop_. for @xmath76 , we write @xmath77 $ ] to denote the subdigraph of @xmath24 _ induced _ by @xmath21 , and @xmath78 to denote @xmath79 $ ] .    for @xmath75 ,",
    "define @xmath80 , @xmath81 , and @xmath82 .",
    "sets @xmath83 , @xmath84 , and @xmath85 are respectively the _ out - neighborhood _ , _ in - neighborhood _ , and _ neighborhood _ of @xmath71 in @xmath24 , while the members of @xmath83 , @xmath84 , and @xmath85 are the _ out - neighbors _ , _ in - neighbors _ , and _ neighbors _ of @xmath71 , respectively .",
    "the _ out - degree _ , _ in - degree _ , and _ degree _ of @xmath71 are the values @xmath86 , @xmath87 , and @xmath88 , respectively .",
    "we omit the subscript from @xmath89 and @xmath90 whenever @xmath24 is clear from context .    for @xmath75",
    ", we say that @xmath71 is a _ source _ when @xmath91 , @xmath71 is a _ sink _",
    "when @xmath92 , and @xmath71 is _ transitive _ when @xmath93 for every @xmath94 and @xmath95 .",
    "a digraph is a _ source - sink ( st ) graph _ when it contains only source and sink vertices , while it is _ transitive _ when it contains only transitive vertices .",
    "a digraph is _ simple _ when it has no loops , while it is _ reflexive _ when every vertex is reflexive .",
    "the _ reflexive closure _ of @xmath24 is the digraph obtained by adding all the missing loops to @xmath24 so as to make each vertex reflexive , i.e. , the reflexive closure of @xmath24 is @xmath96 .",
    "an _ oriented graph _ is a digraph such that @xmath97 and @xmath98 only if @xmath99 .",
    "order graph _ is an oriented graph that is simultaneously reflexive and transitive .",
    "let @xmath100 be the relation on @xmath68 such that @xmath101 if and only if @xmath102 .",
    "note that @xmath100 is reflexive ( resp .",
    "antisymmetric , transitive ) precisely when @xmath24 is reflexive ( resp",
    ".  oriented , transitive ) .",
    "thus , @xmath24 is an order graph if and only if @xmath103 is a finite poset .    for @xmath75 ,",
    "we write @xmath104 and @xmath105 . in other words",
    ", @xmath106 has the out - neighbors of @xmath71 whose in - degree is greater than or equal to the out - degree of @xmath71 , while @xmath107 has the out - neighbors of @xmath71 with in - degree at least @xmath108 .",
    "note that either @xmath109 or @xmath110 for every arc @xmath97 , thus all the arcs of @xmath24 get visited when all the @xmath111 sets are traversed .",
    "the values @xmath112 , @xmath113 are denoted by @xmath114 and @xmath115 , while @xmath116 .",
    "again , we omit the subscript @xmath24 when no ambiguities arise .",
    "we write @xmath117 , @xmath118 , and @xmath119 to denote the values @xmath120 , @xmath121 , and @xmath122 , respectively .",
    "the arboricity and @xmath57-index are values that measure how dense is a digraph .",
    "we use a non - standard definition of arboricity given by the equivalence in  @xcite , i.e. , the _ arboricity _ @xmath123 of @xmath24 is the maximum @xmath53 such that @xmath24 has a subdigraph with @xmath54 arcs and @xmath55 vertices .",
    "@xmath57-index _ is the value @xmath124 such that @xmath24 has @xmath124 vertices with degree at least @xmath124 .",
    "it is well known that @xmath125 , while @xmath126 for every @xmath75  @xcite .",
    "the time required to multiply two @xmath6 matrices is denoted by @xmath34 ; up to this date @xmath127  @xcite . as before , we omit the subscripts @xmath24 whenever possible . also , we assume @xmath128 for all the problems considered with no loss of generality .",
    "two arcs of @xmath24 are _ independent _ when they have no common endpoints .",
    "a _ matching _ is a set @xmath5 of pairwise independent arcs",
    ". sometimes we deal with @xmath5 as if it were the subgraph of @xmath24 with vertex set @xmath129 and arc set @xmath5 .",
    "thus , we write @xmath130 to denote the set of vertices entering or leaving an arc of @xmath5 , or we talk about the unique neighbor of @xmath71 in @xmath5 , etc .",
    "a matching is _ perfect _ when @xmath131 .",
    "a _ diclique _ of @xmath24 is an ordered pair @xmath132 such that @xmath97 for every @xmath2 and @xmath3 ( note that every vertex in @xmath133 is reflexive ) . for the sake of notation",
    ", we write @xmath0 to refer to @xmath134 , regardless of whether @xmath134 is a diclique of not .",
    "the term _ diclique _ is also used to denote the subdigraph @xmath135 of @xmath24 with vertex set @xmath136 and arc set @xmath137 ; note that @xmath135 needs not be an induced subdigraph of @xmath24 .",
    "thus , for instance , we can talk about the arcs of the diclique @xmath135 .",
    "a diclique @xmath0 of @xmath24 is _ maximal _ when @xmath24 has no diclique @xmath138 for @xmath139 .",
    "an arc @xmath140 is _ disimplicial _ when @xmath141 is a diclique of @xmath24 ; note that @xmath135 is the unique maximal diclique of @xmath24 that contains @xmath1 . in such case , the diclique @xmath135 is said to be _ reduced _ , i.e. , @xmath135 is _ reduced _ when it is maximal and it contains a disimplicial arc .",
    "by definition , a reflexive vertex @xmath71 is transitive if and only if @xmath74 is a disimplicial arc .",
    "hence , we can find out if a digraph @xmath24 is transitive by looking if all the loops of its reflexive closure @xmath142 are disimplicial .",
    "this result can be easily strengthen so as to make @xmath142 an st graph .    for any digraph @xmath24 , define @xmath143 to be the digraph @xmath23 that has a vertex @xmath144 for each non - sink vertex @xmath71 , and a vertex @xmath145 for each non - source vertex @xmath72 , where @xmath146 if and only if @xmath97 , for every @xmath147 ( see figure  [ fig : split+join ] ) .",
    "clearly , @xmath144 and @xmath145 are source and sink vertices , resepctively , hence @xmath23 is an st graph .",
    "moreover , the dicliques of @xmath24 are `` preserved '' into @xmath23 as in the next proposition .     and",
    "@xmath148 for @xmath149 . for the sake of exposition",
    ", we write @xmath150 and @xmath151 to denote the vertices @xmath152 and @xmath153 of @xmath143 , respectively .",
    "note that @xmath154 is an arc of @xmath143 if only if @xmath71 is reflexive , while @xmath155 is reflexive in @xmath148 if and only if either @xmath156 or @xmath99 is reflexive in @xmath23 . ]     and @xmath148 for @xmath149 .",
    "for the sake of exposition , we write @xmath150 and @xmath151 to denote the vertices @xmath152 and @xmath153 of @xmath143 , respectively .",
    "note that @xmath154 is an arc of @xmath143 if only if @xmath71 is reflexive , while @xmath155 is reflexive in @xmath148 if and only if either @xmath156 or @xmath99 is reflexive in @xmath23 . ]",
    "[ prop : split dicliques ] let @xmath24 be a digraph .",
    "then , @xmath0 is a diclique of @xmath24 if and only if @xmath157 is a diclique of @xmath143 , where @xmath158 and @xmath159 .",
    "[ cor : split disimplicials ]",
    "let @xmath24 be a digraph .",
    "then , @xmath1 is a disimplicial arc of @xmath24 if and only if @xmath160 is a disimplicial arc of @xmath143 .",
    "so , as anticipated , we can find out whether @xmath24 is transitive or not by computing the disimplicial arcs of @xmath161 .",
    "since @xmath161 can be computed in linear time when @xmath24 is provided as input , we conclude that finding the disimplicial arcs of an st graph is harder than testing if a digraph is transitive .",
    "[ thm : transitive is disimplicial ] a digraph @xmath24 is transitive if and only if all the arcs in the matching @xmath162 of @xmath161 are disimplicial , where @xmath142 is the reflexive closure of @xmath24 .",
    "for the rest of this section , we discuss how to find disimplicial arcs by computing transitive vertices .",
    "the idea is to revert , as much as possible , the effects of @xmath163 . for any matching @xmath5 of a digraph @xmath23 , define @xmath164 to be the digraph @xmath24 that has a vertex @xmath165 for each @xmath166 , and a vertex @xmath167 for each @xmath156 , where @xmath168 if and only if @xmath169 ( see figure  [ fig : split+join ] ) . the restricted duality between the @xmath163 and @xmath170 operators is given in the next lemmas .",
    "[ lem : bip then join ] if @xmath24 is a reflexive digraph , then @xmath24 is isomorphic to @xmath171 .",
    "note that @xmath172 is a matching of @xmath24 because @xmath24 is reflexive , hence @xmath173 is well defined for @xmath174 .",
    "let @xmath175 be the function such that @xmath176 ( see figure  [ fig : bip then join ] ) .",
    "by definition of @xmath163 , @xmath97 if and only if @xmath146 , for every @xmath147 . similarly , by the definition of @xmath170 , @xmath146 if and only if @xmath177 .",
    "that is , @xmath97 if and only if @xmath178 .    , @xmath174 , and @xmath173 for @xmath179 .",
    "again , we write @xmath150 and @xmath151 to denote the vertices @xmath152 and @xmath153 of @xmath23 , respectively . note that the function @xmath66 of lemma  [ lem : bip then join ] is an isomorphism between @xmath24 and @xmath111 .",
    "]    [ lem : join then bip ] if @xmath5 is a perfect matching of an st graph @xmath23 , then @xmath23 is isomorphic to @xmath180 .",
    "the proof is analogous to that of lemma  [ lem : bip then join ] .",
    "this time , take @xmath181 and @xmath182 be the neighbor of @xmath71 in @xmath5 , and observe that @xmath183 is an isomorphism when @xmath184 for every sink vertex @xmath71 and @xmath185 for every source vertex @xmath71 .",
    "despite lemma  [ lem : join then bip ] requires an st graph @xmath23 with a perfect matching @xmath5 , the @xmath170 operator can be applied to any digraph and any matching .",
    "the final result is always the same , though ; the disimplicial arcs of @xmath5 get transformed into transitive vertices .    [ thm : disimplicial is transitive ] let @xmath5 be a matching of a digraph @xmath23 , and @xmath156 .",
    "then , @xmath1 is disimplicial in @xmath23 if and only if @xmath167 is a transitive vertex of @xmath148 .",
    "let @xmath186 and observe that @xmath187 .",
    "by definition , @xmath188 if and only if @xmath189 , for every @xmath190",
    ". then , @xmath188 for every pair @xmath191 such that @xmath192 and @xmath168 if and only if @xmath189 for every pair @xmath193 such that @xmath194 and @xmath169 .",
    "that is , @xmath167 is transitive in @xmath24 if and only if @xmath1 is disimplicial in @xmath23 .",
    "theorem  [ thm : disimplicial is transitive ] gives us a method for testing if an arc @xmath1 is disimplicial : check if @xmath167 is transitive in @xmath195 . since @xmath24 can be computed in @xmath196 time when @xmath23 and @xmath1 are given as input ,",
    "we conclude that querying if an arc is disimplicial is equally hard as determining if a vertex is transitive .",
    "we remark that testing if @xmath187 is transitive and checking if @xmath197 is disimplicial are both solvable in @xmath25 time .",
    "theorem  [ thm : disimplicial is transitive ] can also be used to find all the disimplicial arcs of @xmath23 when an adequate matching is provided . for the sake of simplicity ,",
    "we restrict ourselves to st graphs , by proposition  [ prop : split dicliques ] .",
    "moreover , we find it convenient to eliminate twin vertices .",
    "two vertices @xmath198 of an st graph @xmath23 are _ twins _ when @xmath199 , while @xmath23 is _ twin - free _ when it contains no pair of twins .",
    "twin block _ is a maximal set of twin vertices ; note that @xmath200 admits a unique partition into twin blocks .",
    "we assume the existence of a function @xmath201 that , given a block @xmath135 , returns a vertex of @xmath135 , and we write @xmath202 for every @xmath203 .",
    "for the sake of notation , we omit the subscript @xmath23 from @xmath204 when no ambiguities arise .",
    "the _ twin reduction _ of @xmath23 is the subdigraph @xmath205 of @xmath23 induced by @xmath206 .",
    "the twin reduction of @xmath23 contains all the information about the disimplicial arcs of @xmath23 , as in the next proposition .",
    "[ prop : twin reduction ] an arc @xmath1 of an st graph @xmath23 is disimplicial if and only if @xmath207 is disimplicial in @xmath205 .",
    "we are now ready to state what an adequate matching looks like .",
    "for each @xmath208 , define the _ thin neighbor _",
    "@xmath209 of @xmath71 to be the ( unique ) vertex @xmath210 such that @xmath211 for every @xmath212 ; if such a vertex does not exist , then @xmath209 is some undefined vertex .",
    "say that @xmath1 is a _ thin _",
    "arc when @xmath213 and @xmath214 .",
    "for the sake of notation , we write @xmath215 to denote @xmath148 where @xmath5 is the set of thin arcs of @xmath23 ; note that @xmath215 is well defined because @xmath5 is a matching .",
    "the following easy - to - prove lemma is as fundamental for us as it is for the algorithm in  @xcite .",
    "[ lem : disimplicial is thin ] all the disimplicial arcs of a twin - free st graph are thin .",
    "the algorithm to compute the disimplicial arcs of an st graph works in two phases .",
    "in the first phase , all the disimplicial arcs of @xmath216 are obtained by querying which of the vertices of @xmath217 are transitive . in the second phase ,",
    "each @xmath197 is tested to be disimplicial by querying if @xmath207 is disimplicial in @xmath111 .",
    "the algorithm is correct by theorem  [ thm : disimplicial is transitive ] , proposition  [ prop : twin reduction ] , and lemma  [ lem : disimplicial is thin ] .",
    "[ thm : disimplicial algorithm ] an arc @xmath1 of a digraph @xmath23 is disimplicial if and only if @xmath218 is transitive in @xmath219 .    since @xmath163 , @xmath170 , and @xmath220 can be computed in linear time , we conclude that listing the disimplicial arcs and finding the transitive vertices are equally hard problems . up to these date , the best algorithms for computing the transitive vertices of @xmath221 take @xmath222 time and @xmath223 space or @xmath224 time and @xmath225 space . since @xmath226 , @xmath227 , and @xmath228 , we conclude that the disimplicial arcs of a digraph @xmath23 can be obtained in either @xmath229 time and @xmath230 space or @xmath231 time and @xmath232 space .",
    "the present section is devoted to the problems of finding disimplicial elimination sequences . before doing so , we review the @xmath57-digraph structure as it is required by our algorithms .",
    "@xmath57-graph structure _ was introduced in  @xcite with dynamic algorithms in mind .",
    "it proved to be well suited for some vertex elimination problems , particularly those in which the conditions for removing a vertex are local to its neighborhood .",
    "@xmath57-digraph structure _ is the cousin of @xmath57-graphs for digraphs , and it was superficially described in  @xcite .",
    "let @xmath24 be a digraph and @xmath233 . in short ,",
    "the @xmath57-digraph structure maintains @xmath234 values for @xmath235 and each @xmath75 , namely @xmath236 , @xmath237 , and @xmath238 , where @xmath239 is an ordered list of the nonempty sets",
    "@xmath240 = @xmath241 with @xmath242 .",
    "recall that @xmath243 .",
    "the data structure also keeps track of several pointers that allow efficient access to the different incarnations of a vertex in the structure ( see  @xcite ) .",
    "at all , no more than @xmath25 bits are consumed .",
    "table  [ tab : h - operations ] describes the operations supported by the @xmath57-digraph structure that are of interest for our purposes . all of them , but minn , where described in  @xcite for graphs , though their translation to digraphs is direct . for the implementation of minn ,",
    "two cases are considered to obtain the desired output @xmath244 .",
    "if @xmath245 , then @xmath246 for every @xmath247 , thus @xmath248 ; otherwise , @xmath244 is equal to the first set in @xmath237 . the time required for this operation is , therefore , @xmath249 .",
    ".some operations supported by the @xmath57-digraph data structure .",
    "the complexity column `` one '' indicates the time required by one invocation of the operation , while the complexity column `` all '' indicates the time required when the operation is applied @xmath250 times to all the vertices in the digraph .",
    "here @xmath251 , @xmath252 , @xmath253 and @xmath254 , @xmath235 must belong to @xmath255 , and @xmath256 is the opposite of @xmath235 .",
    "[ cols=\"<,<,^,^ \" , ]      a sequence of arcs @xmath257 is a _ disimplicial elimination _ of a digraph @xmath23 when @xmath37 is disimplicial in @xmath38 for every @xmath39 ; @xmath40 is _ maximal _ when @xmath258 has no disimplicial arcs . for convenience ,",
    "we write @xmath259 to denote the set of vertices of @xmath40 .",
    "the algorithm to compute a maximal disimplicial elimination works in an iterative manner from an input digraph @xmath260 . at iteration @xmath261",
    ", the algorithm finds a disimplicial elimination @xmath262 of @xmath263 by taking any maximal matching of disimplicial arcs of @xmath264 . by maximal ,",
    "we mean that either @xmath265 or @xmath266 for every disimplicial arc @xmath1 of @xmath264 . then , the algorithm updates @xmath263 into @xmath267 for the iteration @xmath268 .",
    "the algorithm stops with output @xmath269 when @xmath270 .",
    "for the sake of notation , in the rest of this section we write @xmath271 to denote each parameter @xmath272 on @xmath264 instead of using @xmath273 ; thus , we write @xmath274 to denote @xmath275 , @xmath276 to denote @xmath277 , and so on .",
    "when no subscript is wrote , the parameter on @xmath23 should be understood ; e.g. , @xmath278 , @xmath279 , etc .",
    "the main idea of the algorithm is to compute @xmath262 , for @xmath280 , by looking only at the arcs leaving or entering @xmath281 . of all such arcs , we are interested in those with `` low degree '' , which are the analogous of thin arcs for those digraphs that can contain twins ( see proposition  [ prop : disimplicial in l ] below ) .",
    "let @xmath282 and @xmath283 , i.e. , @xmath284 and @xmath285 are the set of vertices of @xmath264 that have an out and in neighbor that was removed from @xmath286 , respectively . for each @xmath287 ( resp .",
    "@xmath285 ) , let @xmath288 be the set of out - neighbors ( resp .  in - neighbors ) of @xmath71 with minimum in - degree ( resp .",
    "out - degree ) in @xmath264 . to compute @xmath262 ,",
    "the algorithm first initializes @xmath289 and then it traverses each vertex @xmath290 . for @xmath287 ( resp .",
    "@xmath291 ) , the algorithm evaluates whether @xmath292 ( resp .",
    "@xmath293 ) is disimplicial for any @xmath294 . if affirmative and @xmath295 , then @xmath1 ( resp .",
    "@xmath296 ) is inserted into @xmath262 for any @xmath297 .",
    "( note that @xmath72 needs not be equal to @xmath298 ; this happens when @xmath299 or @xmath300 was previously inserted into @xmath262 for some @xmath301 . )",
    "if negative or @xmath302 , then @xmath71 is ignored .",
    "by invariant , @xmath262 is a matching of @xmath264 .",
    "moreover @xmath262 contains only disimplicial arcs , as it follows from the following generalization of lemma  [ lem : disimplicial is thin ] .    [ prop : disimplicial in l ] let @xmath290 be an endpoint of some disimplicial arc of @xmath264 .",
    "then , @xmath1 ( resp .",
    "@xmath296 ) is disimplicial in @xmath264 if and only if @xmath303 .",
    "the next proposition shows that , as required , @xmath262 is indeed maximal .",
    "that is , the algorithm to compute @xmath262 is correct .    if @xmath1 is a disimplicial arc of @xmath264 , then either @xmath265 or @xmath266 .",
    "observe that @xmath1 is not disimplicial in @xmath286 , since otherwise either @xmath71 or @xmath72 would have been removed in the update from @xmath286 to @xmath264 , by the maximality of @xmath304 .",
    "hence , there exist @xmath305 such that @xmath95 , @xmath306 and @xmath307 .",
    "since @xmath308 is disimplicial in @xmath263 , then either @xmath309 or @xmath310 does not belong to @xmath264 . in the former case @xmath311 and @xmath312 , while in the latter case @xmath313 and @xmath287 .",
    "both cases are analogous , so suppose @xmath287 . by proposition  [ prop : disimplicial in l ] , @xmath303 , while @xmath292 is disimplicial for every @xmath294 .",
    "consequently , @xmath71 is ignored by the algorithm ( i.e. , @xmath314 ) only if @xmath315 .",
    "each time an arc @xmath1 is evaluated to be disimplicial , the algorithm works as follows .",
    "first , the vertices in @xmath316 are marked , and a variable @xmath54 is initialized to @xmath317 .",
    "the purpose of @xmath54 is to count the number of arcs that leave a vertex in @xmath318 to enter a vertex in @xmath319 . to compute @xmath54 ,",
    "each @xmath320 is traversed , for every @xmath321 . if @xmath309 is marked , then @xmath322 and @xmath321 , thus @xmath54 is increased by @xmath323",
    "; otherwise @xmath324 , thus @xmath54 remains unchanged .",
    "the arc @xmath93 is also marked so as to avoid counting it again .",
    "when the execution for @xmath319 is done , the algorithm proceeds to traverse each @xmath325 , for every @xmath322 , increasing @xmath54 by @xmath323 when @xmath310 is marked and @xmath93 is not . at the end , all the marks are cleared .",
    "clearly , @xmath54 counts the number of arcs of @xmath264 leaving @xmath318 and entering @xmath319 as each arc @xmath93 with @xmath322 and @xmath321 is traversed at least once .",
    "thus @xmath1 is disimplicial if and only if @xmath326 .",
    "the algorithm implements @xmath264 with the @xmath57-digraph structure . to compute @xmath262 , the vertices in @xmath327 need to be traversed ; recall that , by definition , @xmath328 .",
    "for each traversed @xmath2 , a vertex @xmath294 needs to be located ; this costs @xmath329 time if the first vertex given by ` minn ` is taken .",
    "following , @xmath292 ( or @xmath293 ) is queried to be disimplicial . for this , the vertices in @xmath330 are first marked in @xmath331 , and then @xmath54 is computed in @xmath332 time . moreover , note that every arc is traversed @xmath250 times ,",
    "thus @xmath333 in actually spent to check if @xmath292 is disimplicial . when @xmath292 ( or @xmath293 ) is disimplicial , ` minn ` is invoked to obtain @xmath288 , which is then traversed so as to locate the arc @xmath1 ( or @xmath296 ) to be inserted into @xmath262 .",
    "note that every vertex @xmath334 that is traversed while looking for @xmath72 belongs to @xmath335 at the end of step @xmath261 .",
    "also , @xmath336 will be evaluated no more than @xmath337 times , once for each @xmath338 such that @xmath288 is considered .",
    "thus , all the required traversals to the sets @xmath339 consume @xmath340 time . summing up",
    ", the time required to compute @xmath262 is @xmath341    before the algorithm starts , @xmath342 is initialized with an invocation to ` initialize ` at the cost of @xmath65 time .",
    "similarly , after each iteration , @xmath335 is removed from @xmath264 using the operation ` remove ` .",
    "note that each vertex is removed exactly once , hence @xmath65 time is totally consumed .",
    "let @xmath343 be the number of iterations required by the algorithm and @xmath40 be the output disimplicial elimination .",
    "since @xmath344 can be computed in @xmath65 time and @xmath345 is a matching , we obtain that the total time required by the algorithm is @xmath346 since the @xmath57-digraph structure uses @xmath25 bits , the space complexity is linear .",
    "we now consider the restricted problem of finding a maximal disimplicial @xmath5-elimination of a digraph @xmath23 , when an input matching @xmath5 is given .",
    "disimplicial @xmath5-elimination _ is just a disimplicial elimination @xmath40 of @xmath23 included in @xmath5 ; @xmath40 is _ maximal _ when no arc of @xmath347 is disimplicial in @xmath348 .",
    "this time , the idea is to take advantage of the relation between disimplicial arcs and transitive vertices .",
    "say that a sequence @xmath349 is a _",
    "transitive @xmath21-elimination _ of a digraph @xmath24 , for @xmath76 , when @xmath350 is transitive in @xmath351 , for every @xmath39 .",
    "suppose @xmath352 and let @xmath353 and @xmath354 . for @xmath39 , define    * @xmath355 , * @xmath356 , * @xmath357 , * @xmath358 , * @xmath359 , and * @xmath360    by definition , @xmath361 has a vertex @xmath167 for each @xmath362 and a vertex @xmath165 for each @xmath363 where @xmath364 is an arc of @xmath361 if and only if @xmath365 .",
    "it is not hard to see , then , that @xmath366 .",
    "moreover , by theorem  [ thm : disimplicial is transitive ] , @xmath367 is transitive in @xmath361 if and only if @xmath37 is disimplicial in @xmath263 .",
    "hence , by induction , @xmath368 is a disimplicial @xmath5-elimination of @xmath23 if and only if @xmath369 is a transitive @xmath21-elimination of @xmath24 for @xmath370 and @xmath371 .",
    "moreover , @xmath40 is maximal if and only if @xmath369 is maximal .",
    "this discussion is summarized in the following theorem .",
    "[ thm : transitive elimination ] let @xmath5 be a matching of a digraph @xmath23 , @xmath257 be a sequence of arcs of @xmath23 , @xmath186 , and @xmath372 .",
    "then , @xmath40 is a maximal disimplicial @xmath5-elimination of @xmath23 if and only if @xmath373 is a maximal transitive @xmath21-elimination of @xmath24 .    in view of theorem  [ thm : transitive elimination ] , we discuss how to obtain a maximal transitive @xmath21-elimination of a digraph @xmath374 .",
    "the algorithm works in an iterative manner from @xmath374 . at each step",
    "@xmath261 , a transitive vertex @xmath375 is removed from @xmath361 so as to obtain @xmath376 ; if no such vertex exists , then the algorithm halts with output @xmath377 . to be able to find @xmath350 efficiently ,",
    "the following data is maintained by the algorithm prior to the execution of iteration @xmath261 :    * @xmath361 , implemented with the @xmath57-digraph structure , * the set of transitive vertices @xmath378 of @xmath361 , * the number @xmath379 of arcs leaving @xmath380 and entering @xmath381 in @xmath361 , for @xmath382 .    with the above information ,",
    "any vertex of @xmath378 is taken by the algorithm to play the role of @xmath350 .",
    "once @xmath350 is selected , the algorithm has to update its data structure for the next iteration .",
    "the update of @xmath361 into @xmath383 is handled by the ` remove ` operation of the @xmath57-digraph structure .",
    "the update of @xmath384 into @xmath385 is done in two phases .",
    "the first phase decrements @xmath386 by @xmath323 for each arc @xmath387 such that @xmath388 , while the second phase decrements @xmath386 by @xmath323 for each arc @xmath389 such that @xmath390",
    ". the ` n ` operation of the @xmath57-digraph structure is employed for this step .",
    "finally , observe that @xmath391 if and only if either @xmath392 or @xmath393 and @xmath394 .",
    "thus , the update of @xmath378 into @xmath395 takes @xmath396 time .",
    "before the first step can take place , @xmath397 is initialized with an invocation to ` initialize ` .",
    "note that ` remove ` and ` n ` are called @xmath250 times for each vertex of @xmath24 , thus @xmath65 total time is consumed by the algorithm . as for the space , @xmath361 requires @xmath25 space while the remaining variables consume @xmath398 bits .",
    "since @xmath186 can be computed in linear time , @xmath399 , and @xmath400 we conclude that a maximal disimplicial @xmath5-elimination can be computed in @xmath229 time and linear space .",
    "by definition , a reflexive vertex @xmath71 is transitive if and only if @xmath74 is disimplicial .",
    "hence , if @xmath24 is an order graph , then @xmath70 can be partitioned into a family of dicliques , all of which are reduced . moreover , by proposition  [ prop : split dicliques ] , @xmath174 is an st graph and @xmath401 can also be partitioned into a family of dicliques , all of which are reduced .",
    "the purpose of this section is to study two graph classes that admit this kind of partition .",
    "say that a digraph is _ weakly diclique irreducible ( wdi ) _ when all its arcs belong to a reduced diclique .",
    "by propositions [ prop : split dicliques ]  and  [ prop : twin reduction ] , @xmath23 is wdi if and only both @xmath402 and @xmath205 are wdi ; for this reason , we consider only st graphs with no twins for this section .",
    "the next theorem , combined with lemma  [ lem : bip then join ] , shows that there is a one - to - one correspondence between the class of twin - free st graphs that admit a perfect matching of disimplicial arcs and the class of order graphs .",
    "a direct consequence of this theorem is that the recognition of wdi digraphs is harder than the recognition of order graphs .",
    "a reflexive oriented graph @xmath24 is transitive if and only if @xmath174 is wdi .",
    "furthermore , if @xmath23 is wdi , then the perfect matching @xmath172 is the set of disimplicial arc of @xmath23 .",
    "if @xmath24 is a reflexive oriented graph , then ( i ) @xmath5 is a perfect matching of @xmath23 , and ( ii ) @xmath403 and @xmath404 are both arcs of @xmath23 if only if @xmath99 .",
    "then , @xmath154 belongs to a reduced diclique if and only if it is disimplicial .",
    "since every arc @xmath146 belongs to the diclique @xmath405 of @xmath23 , we conclude that @xmath23 is wdi if and only if all the arcs of @xmath5 are disimplicial .",
    "therefore , by theorem  [ thm : transitive is disimplicial ] , @xmath23 is wdi if and only if @xmath24 is transitive .",
    "moreover , since @xmath23 is twin - free by ( ii ) , and the set of thin arcs is a matching containing @xmath5 by lemma  [ lem : disimplicial is thin ] , we conclude that no arc of @xmath406 is disimplicial .",
    "the following theorem shows that the recognition of wdi digraphs is simpler than the problem of listing the _ acyclic triangles _",
    "@xmath407 , @xmath408 , @xmath409 of a digraph .",
    "all such triangles can be found in either @xmath65 time and @xmath25 space or @xmath34 time and @xmath35 space  @xcite . we conclude then that , unless it is proved that recognizing order graphs is strictly easier than listing triangles , the recognition of wdi digraphs is well solved .",
    "[ thm : wdi characterization ] an st graph @xmath23 with no twins is wdi if and only if :    * @xmath410 is transitive , and * for every arc @xmath407 of @xmath24 there exists a vertex @xmath411 of @xmath24 such that @xmath408 and @xmath409 are also arcs of @xmath24 .",
    "suppose @xmath23 is wdi . by definition ,",
    "every vertex @xmath155 of @xmath24 that is neither a source nor a sink corresponds to a thin arc @xmath1 of @xmath23 .",
    "since @xmath23 is wdi , we know that @xmath1 belongs to a diclique @xmath412 for some disimplicial arc @xmath93 , thus @xmath413 and @xmath414 . moreover , taking into account that @xmath1 is thin , it follows that @xmath415 and @xmath416 , thus @xmath417 and @xmath418 .",
    "therefore , @xmath1 is disimplicial in @xmath23 and , by theorem  [ thm : disimplicial is transitive ] , @xmath167 is transitive in @xmath24 ; in other words @xmath24 is transitive .",
    "now , consider any arc @xmath419 of @xmath24 . by definition , @xmath1 is an arc of @xmath23 that belongs to some reduced diclique @xmath412 . by lemma  [ lem :",
    "disimplicial is thin ] , @xmath93 is a thin arc and , since @xmath365 and @xmath420 , it follows that @xmath421 and @xmath422 are arcs of @xmath24 .    for the converse , let @xmath1 be any arc of @xmath23 and @xmath423 and @xmath424 be the vertices of @xmath24 that correspond to @xmath71 and @xmath72 ( possibly @xmath425 ) . by definition",
    ", @xmath426 is an arc of @xmath24 , thus , there exists a vertex @xmath427 of @xmath111 such that @xmath428 and @xmath429 are arcs of @xmath24 ( possibly @xmath430 or @xmath431 ) . since @xmath432 is neither a source nor a sink of @xmath24 , then it follows that @xmath432 is transitive in @xmath24 and @xmath93 is a thin arc of @xmath23 .",
    "so , by theorem  [ thm : disimplicial is transitive ] , @xmath93 is a disimplicial arc of @xmath23 which means that @xmath412 is a reduced diclique . now , taking into account that @xmath428 and @xmath429 are arcs of @xmath24 , it follows that @xmath433 and @xmath434 , i.e. , @xmath1 belongs to a reduced diclique . in other words , @xmath23 is wdi .      in the remaining of this section we work with a subclass of wdi graphs , namely the diclique irreducible digraphs .",
    "a digraph @xmath23 is _ diclique irreducible ( di ) _ when all its maximal dicliques are reduced .",
    "again , @xmath23 is di if and only if both @xmath402 and @xmath205 are di , thus we restrict our attention to st graphs with no twins . by theorem  [ thm : wdi characterization ] , we know that @xmath215 is a transitive oriented graph ; the following lemma proves that @xmath215 must also be reflexive .",
    "if an st graph with no twins is di , then its set of thin arcs is a perfect matching .",
    "let @xmath23 be an st graph that is di and has no twins , @xmath71 be a source vertex of @xmath23 , and @xmath435 be minimum among the neighbors of @xmath71 .",
    "since @xmath23 is di , it follows that @xmath1 belongs to some diclique @xmath412 for a disimplicial arc @xmath93 .",
    "then @xmath418 which implies that @xmath436 as @xmath23 is twin - free .",
    "consequently , the thin neighbor of @xmath71 is @xmath437 .",
    "moreover , as @xmath438 is disimplicial , it follows that the thin neighbor of @xmath72 is @xmath439 .",
    "suppose , to obtain a contradiction , that @xmath440 .",
    "then , since @xmath441 , we conclude that there exists @xmath442 .",
    "thus , @xmath443 is a diclique that must be contained in @xmath444 for some disimplicial arc @xmath407 .",
    "the same arguments used before allow us to conclude that @xmath445 and @xmath446 .",
    "this is clearly a contradiction because @xmath447 does not belong to @xmath135 as it is not adjacent to @xmath336 .",
    "we conclude , therefore , that @xmath448 .",
    "analogously , @xmath449 for every sink vertex @xmath72 , thus every vertex belongs to a thin arc .",
    "that is , the set of thin arcs is a perfect matching of @xmath23 .",
    "if an st graph with no twins is di , then @xmath215 is an order graph .",
    "recall that order graphs are the graph theoretical equivalents of finite posets .",
    "when @xmath23 is di , the poset defined by @xmath215 turns out to be what in order theory is known under the name of _ dedekind complete_. we do not define what a dedekind complete poset is ; in turn , we translate this concept in graph theoretic terms .",
    "let @xmath24 be a digraph .",
    "say that @xmath450 ( resp .",
    "@xmath451 ) is an _ upper bound _ ( resp .",
    "a _ lower bound _ ) of @xmath76 when @xmath452 ( resp .",
    "@xmath293 ) for every @xmath2 .",
    "we write @xmath453 and @xmath454 to denote the sets of upper and lower bounds of @xmath21 , respectively . when @xmath453 ( resp .",
    "@xmath454 ) is nonempty , the set @xmath21 is said to be _ bounded from above ( resp .",
    "below)_. every lower bound of @xmath453 that belongs to @xmath453 is a _ supremum _ of @xmath21 , while every upper bound of @xmath454 that belongs to @xmath454 is an _ infimum of @xmath21_. note that @xmath21 has at most one supremum ( resp .",
    "infimum ) when @xmath24 is an oriented graph .",
    "dedekind graph _ is an order graph @xmath24 such that every @xmath455 that is bounded from above has a supremum .",
    "it is well known that an order graph @xmath24 is dedekind if and only if every @xmath455 that is bounded from below has an infimum .",
    "the reason why dedekind graphs come into play in the characterization of di graphs has to do with the way @xmath215 encodes the dicliques and disimplicial arcs of @xmath23 .",
    "roughly speaking , a disimplicial arc @xmath1 of @xmath23 is a transitive vertex @xmath167 of @xmath215 where @xmath456 and @xmath457 corresponds to the lower and upper bounds @xmath458 of @xmath459 , respectively .",
    "moreover , @xmath167 is both the infimum and supremum of @xmath460 and @xmath244 , respectively .",
    "this somehow explains why dedekind graphs appear when every diclique has a disimplicial arc .",
    "the complete proof is given in the next theorem .",
    "[ lem : dicliques in join ] let @xmath23 be a digraph , @xmath461 be nonempty subsets of @xmath200 , @xmath410 , and @xmath462 and @xmath463 .",
    "then , @xmath0 is a diclique of @xmath23 if and only if @xmath464 and @xmath465 .",
    "furthermore , @xmath0 is a maximal diclique exactly when @xmath466 and @xmath467 .    just observe that , by definition , @xmath197 for every @xmath2 and @xmath3 if and only if @xmath468 for every @xmath469 and @xmath470 .",
    "that is , @xmath0 is a diclique of @xmath23 if and only if @xmath464 and @xmath465 .",
    "moreover , using the same argument , the maximality of @xmath0 occurs precisely when @xmath466 and @xmath467 .",
    "[ thm : di characterization ] let @xmath23 be an st graph with no twins",
    ". then @xmath23 is di if and only if @xmath215 is dedekind .",
    "suppose @xmath23 is di , let @xmath410 , and consider any nonempty @xmath471 bounded from above .",
    "let ( a ) @xmath472 and ( b ) @xmath466 , and observe that ( c ) @xmath467 . by definition , @xmath462 and @xmath463 for some @xmath473 . by lemma  [ lem : dicliques in join ]",
    ", @xmath0 is a maximal diclique of @xmath23 , thus it contains some disimplicial arc @xmath1 . by lemma  [ lem :",
    "disimplicial is thin ] , @xmath1 is a thin arc , thus @xmath167 is a vertex of @xmath24 .",
    "moreover , @xmath474 because @xmath2 and @xmath3 .",
    "then , by ( b ) and ( c ) , it follows that @xmath167 is the supremum of @xmath244 and the infimum of @xmath460 , while by ( a ) , @xmath167 is a supremum of @xmath5 as well .",
    "for the converse , suppose @xmath0 is a maximal diclique of @xmath23 and let ( a ) @xmath462 and ( b ) @xmath463 . by lemma  [ lem : dicliques in join ] ,",
    "@xmath466 and @xmath467 , hence , since @xmath24 is dedekind , it follows that @xmath475 contains some vertex @xmath167 such that ( c ) @xmath476 and ( d ) @xmath477 . by ( a ) and",
    "( c ) , and considering how @xmath170 works , we conclude that @xmath478 , while @xmath479 by ( a ) and ( d ) . in other words , @xmath1 is a disimplicial arc of @xmath0 .",
    "[ cor : dedekind characterization ] a digraph @xmath24 is dedekind if and only if @xmath143 is di .    by lemma  [ lem : bip then join ] , @xmath410 for @xmath174 , while , by theorem  [ thm : di characterization ] , @xmath24 is dedekind if and only if @xmath23 is di .    by theorem  [ thm :",
    "di characterization ] and corollary  [ cor : dedekind characterization ] , di and dedekind graphs are equally hard to recognize , and the recognition can be done in polynomial time rather easily . just observe that a di graph has at most @xmath28 maximal dicliques , one for each disimplicial arc .",
    "then , a recognition algorithm needs to traverse at most @xmath480 maximal dicliques before finding one that is not reduced . to test",
    "if a diclique is reduced , it is enough to check that it contains a precomputed disimplicial arc . since the disimplicial arcs can be found in @xmath65 time , and the @xmath480 dicliques of can be traversed in @xmath481 time  @xcite , an @xmath481 time algorithm is obtained .",
    "we now describe an @xmath45 time and @xmath25 space algorithm that exploits the definition of dedekind graphs .",
    "the following simple lemma is the key of the algorithm .",
    "an order graph @xmath24 is dedekind if and only if for every @xmath482 with @xmath483 there exists @xmath484 such that @xmath485",
    ".    suppose @xmath24 is dedekind and let @xmath486 be the supremum of @xmath487 , for @xmath488 bounded from above . by definition , @xmath489 and @xmath490 , thus @xmath491 because @xmath486 is transitive . also by definition , @xmath492 for every @xmath493 ,",
    "thus @xmath494 . therefore , @xmath495 .    for the converse ,",
    "observe again that @xmath491 for every @xmath496 , because @xmath486 is transitive .",
    "so , if @xmath496 has degree @xmath497 , then @xmath498 , which means that @xmath487 has a supremum .",
    "that is , @xmath487 has a supremum for every @xmath488 bounded from above .",
    "it is well known ( taking into account that dedekind graphs correspond to dedekind complete finite posets ) that , in this case , @xmath24 is dedekind .    the algorithm to determine",
    "if an order digraph @xmath24 is dedekind traverses @xmath499 , for each pair of vertices @xmath482 , searching for a vertex @xmath486 with @xmath500 . for the implementation , an outer loop traverses each @xmath208 and an inner loop traverses each @xmath501 . before the inner loop begins ,",
    "all the vertices in @xmath381 are marked in @xmath502 time .",
    "then , in the inner loop , @xmath499 is obtained in @xmath503 time by filtering those vertices of @xmath504 that are marked .",
    "the degree of all the vertices in @xmath499 is the evaluated in @xmath503 time as well .",
    "the total time required by the algorithm is , therefore , @xmath505 while the space complexity is @xmath25 bits .",
    "since order graphs can be recognized in @xmath65 time and @xmath25 space , we conclude that the recognition di and dedekind graphs takes @xmath45 time and @xmath25 space .",
    "a _ bipartite graph _ is a triple @xmath20 where an unordered pair @xmath506 belongs to @xmath47 only if @xmath2 and @xmath3 .",
    "an edge @xmath506 is _ bisimplicial _ when every vertex in @xmath456 is adjacent to all the vertices in @xmath457 . by replacing each @xmath506 by an arc @xmath1",
    ", an st graph @xmath507 is obtained .",
    "moreover , an edge @xmath506 of @xmath23 is bisimplicial precisely when @xmath1 is disimplicial in @xmath507 .",
    "so , the algorithms in this article can be applied directly to bipartite graphs so as to solve the corresponding problems . in this section",
    "we summarize the results for bipartite graphs while we provide further remarks .    in section  [ sec : disimplicial vs transitive ] we proved that listing the bisimplicial edges of a bipartite graph and finding the transitive vertices of a digraph are equally hard problems .",
    "the good news is that the bisimplicial edges of a bipartite graph can be found in @xmath65 time , improving over the previous @xmath45 time algorithm ; the bad news is that we can not improve this algorithm further using only @xmath25 space , unless an @xmath62 time algorithm to find the transitive vertices of a digraph is provided .    in section  [ sec : disimplicial elimination ]",
    "we describe an @xmath508 time and @xmath25 space algorithm to compute a maximal disimplicial elimination of @xmath507 . when applied to bipartite graphs , a maximal elimination scheme @xmath40",
    "is obtained .",
    "since @xmath509 , our algorithm improves the worst - case time bound of  @xcite for all the bipartite graphs with @xmath510 .",
    "golumbic and goss  @xcite proved that @xmath40 is perfect whenever @xmath23 admits a perfect elimination scheme , thus the algorithm can be used to recognize if a sparse graph is perfect elimination bipartite .",
    "the concept of perfect elimination graphs can be generalized to digraphs and disimplicial eliminations .",
    "just say that a digraph @xmath24 is _ perfect disimplicial elimination _ whenever it admits a disimplicial elimination @xmath40 such that @xmath348 has no arcs .",
    "unfortunately , finding a maximal disimplicial elimination is not enough to determine if @xmath24 is perfect , as it is shown in figure  [ fig : maximal not perfect ] .",
    "so , the recognition of perfect disimplicial elimination remains open .      in section  [ sec : disimplicial elimination ]",
    "we also consider the problem of computing a maximal disimplicial @xmath5-elimination , for an input matching @xmath5 , for which we provide an @xmath65 time and @xmath25 space algorithm . rose and tarjan  @xcite proved that this problem is harder than determining if a given digraph is transitive . up to this date , the best algorithm to determine if a sparse graph is transitive costs @xmath65 time and @xmath25 space .",
    "so , the problem is well solved , without using more than @xmath25 space , unless better algorithms for recognizing transitive digraphs are found .",
    "recall one of the motivations for finding a maximal disimplicial elimination is to be able to perform some iterations of the gaussian elimination process on a sparse matrix @xmath5 with the guaranty that no zero entry will change into a non - zero value .",
    "being @xmath5 sparse , we expect @xmath512 and @xmath513 for @xmath514 . if so , then finding the disimplicial elimination and applying the corresponding iterations of the gaussian elimination require linear time .",
    "that is , our algorithm can be used to preprocess @xmath5 , say before solving the system @xmath515 . in the worst case",
    "no zero fill - in entry is found and thus @xmath5 remains the same .",
    "yet , the extra time paid for this examination is low .    in section",
    "[ sec : wdi and di ] we deal with the classes of wdi and di digraphs . we noted that every order graph @xmath24 is uniquely associated with a twin - free st graph @xmath23 that is wdi , namely @xmath174 . in fact , each @xmath75 gets transformed into the disimplicial arc @xmath154 of @xmath23 , thus @xmath23 has a perfect matching of disimplicial arcs .",
    "the converse is also true , any st graph that has a perfect matching of disimplicial arcs must be isomorphic to @xmath143 for some order graph @xmath24 .",
    "we remark that the order relation @xmath516 of @xmath24 is somehow preserved in @xmath23 .",
    "indeed , note that @xmath97 only if @xmath517 , thus @xmath146 while @xmath518 . hence , by transitivity , @xmath97 if and only if @xmath519 and @xmath520 . in this section",
    "we also proved that @xmath23 is also di whenever @xmath24 is a dedekind graph .",
    "moreover , each @xmath521 with supremum @xmath486 is associated with a reduced biclique @xmath0 such that @xmath522 and @xmath523 .",
    "note that , in particular , @xmath524 is the disimplicial arc of @xmath0 .",
    "m.  bomhoff . recognizing sparse perfect elimination bipartite graphs . in _",
    "computer science  theory and applications _",
    "6651 of _ lecture notes in comput .",
    "_ , pp . 443455 .",
    "springer , heidelberg , 2011 .",
    "doi : 10.1007/978 - 3 - 642 - 20712 - 9_35 .",
    "wang . on characterizing weakly maximal clique irreducible graphs . in _ proceedings of the thirty - fourth southeastern international conference on combinatorics , graph theory and computing _ , vol .",
    "163 , pp . 177188 , 2003 .",
    "v.  v. williams . multiplying matrices faster than coppersmith - winograd [ extended abstract ] . in _",
    "stoc12proceedings of the 2012 acm symposium on theory of computing _ , pp . 887898 .",
    "acm , new york , 2012 .",
    "doi : 10.1145/2213977.2214056 ."
  ],
  "abstract_text": [
    "<S> in this article we deal with the problems of finding the disimplicial arcs of a digraph and recognizing some interesting graph classes defined by their existence . a _ </S>",
    "<S> diclique _ of a digraph is a pair @xmath0 of sets of vertices such that @xmath1 is an arc for every @xmath2 and @xmath3 . </S>",
    "<S> an arc @xmath1 is _ disimplicial _ when @xmath4 is a diclique . </S>",
    "<S> we show that the problem of finding the disimplicial arcs is equivalent , in terms of time and space complexity , to that of locating the transitive vertices . as a result , </S>",
    "<S> an efficient algorithm to find the bisimplicial edges of bipartite graphs is obtained . </S>",
    "<S> then , we develop simple algorithms to build disimplicial elimination schemes , which can be used to generate bisimplicial elimination schemes for bipartite graphs . finally , we study two classes related to perfect disimplicial elimination digraphs , namely weakly diclique irreducible digraphs and diclique irreducible digraphs . the former class is associated to finite posets , while the latter corresponds to dedekind complete finite posets .    </S>",
    "<S> disimplicial arcs , bisimplicial edges of bipartite graphs , disimplicial elimination schemes , bisimplicial elimination schemes , diclique irreducible digraphs , transitive digraphs , dedekind digraphs . </S>"
  ]
}