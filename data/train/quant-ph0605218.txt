{
  "article_text": [
    "one of the most striking advances in quantum computing was made by shor @xcite in 1994 . by exploring the power of quantum parallelism , he discovered a polynomial - time algorithm on quantum computers for prime factorization of which the best known algorithm on classical computers is exponential . in 1996 , grover @xcite offered another apt killer of quantum computation , and he found a quantum algorithm for searching a single item in an unsorted database in square root of the time it would take on a classical computer . since both prime factorization and database search are central problems in computer science and the quantum algorithms for them are highly faster than the classical ones , shor and grover s discoveries indicated that quantum computation offers a way to accomplish certain computational tasks much more efficiently than classical computation and thus stimulated an intensive investigation on quantum computation .",
    "after that , quantum computation has been an extremely exciting and rapidly growing field of research . in particular",
    ", a substantial effort has been made to find new quantum algorithms and to exploit the techniques needed in building functional quantum computers .",
    "currently , quantum algorithms are expressed mainly in the very low level of quantum circuits . in the history of classical computation , however , it was realized long time ago that programming languages provide a technique which allows us to think about a problem intended to solve in a high - level , conceptual way , rather than the details of implementation .",
    "recently , in order to offer a similar technique in quantum computation , some authors begun to study the design and semantics of quantum programming languages . in the pool of imperative languages , the earliest proposal for quantum programming language",
    "was made by knill in  @xcite , where a set of basic principles for writing quantum pseudo - code was outlined and an imperative pseudo - code suitable for implementation on a quantum random access machine was defined .",
    "the first real quantum programming language , qcl , was proposed and a simulator for this language was implemented by mer  @xcite . a quantum programming language in the style of dijkstra s guarded - command language , qgcl ,",
    "is designed by sanders and zuliani in  @xcite .",
    "a probabilistic predicate transformer semantics of qgcl was given , a refinement calculus for it was introduced , and a compiler from qgcl to a simple quantum architecture was defined .",
    "a quantum extension of c++ was also proposed by bettelli et al  @xcite , and it was implemented in the form of a c++ library . in the functional programming style , the first quantum language , qfc , was defined by selinger  @xcite based on the idea of classical control and quantum data .",
    "programs in the language qfc are represented via a functional version of flow charts , and qfc has a denotational semantics in terms of complete partial orders of super - operators .",
    "in addition , quantum process calculus cqp ( communicating quantum processes ) was introduced by gay and nagarajan  @xcite , and qpalg ( quantum process algebra ) was proposed by jorrand and lalire  @xcite in order to support the formal specification and verification of quantum cryptographic protocols . also , feng et al @xcite defined a model qccs of quantum processes , which is a natural quantum extension of classical value - passing ccs with the input and output of quantum states , and unitary transformations and measurements on quantum systems .",
    "semantic techniques for quantum computation have also been investigated in some abstract , language - independent ways .",
    "for example , a notion of quantum weakest precondition is introduced and a stone - type duality between the state transition semantics and the predicate transformer semantics for quantum programs is established by dhondt and panangaden @xcite , and proof rules for probabilistic programs were generalized by feng et al  @xcite to purely quantum programs .",
    "there are already two excellent surveys on quantum programming languages and related researches  @xcite    loop is a powerful program construct in classical computation @xcite . in the area of quantum computation , looping technique has also attracted a few authors attention .",
    "for example , bernstein and vazirani  @xcite introduced some programming primitives including looping in the context of quantum turing machines ; some high - level control features such as loop and recursion are provided in selinger s functional quantum programming language qfc .",
    "however , the full power of quantum loop programs is still to be exploited .",
    "the exploitation of such power definitely requires a deep understanding of the mechanism of quantum loops .",
    "the purpose of this paper is to examine thoroughly mechanism of quantum loops in a language - independent way , and to give some convenient criteria for deciding termination of a general quantum loop on a given input .",
    "this paper is organized as follows .",
    "section 2 is a preliminary section in which some basic notions from quantum mechanics needed in this paper are reviewed . in section 3 , a general scheme of quantum loop programs",
    "is introduced , the computational process of a quantum loop is described , and the essential difference between quantum loops and classical loops is analyzed .",
    "in addition , we introduce the notions of termination and almost termination of a quantum loop .",
    "the function computed by a quantum loop is also defined .",
    "quantum walks are considered to show the expressive power of quantum loops . in section 4",
    ", we find a necessary and sufficient condition under which a quantum loop program terminates on a given mixed input state ( theorem  [ prop : 5.1 ] ) . in section 5",
    ", a similar condition is given for almost termination ( theorem  [ thm : 2 ] ) .",
    "furthermore , we prove that a quantum loop is almost terminating if and only if it is uniformly almost terminating ( theorem  [ thm : teralter ] ) , and a small disturbance either on the unitary transformation in the loop body ( theorem  [ thm : disturbu ] ) or on the measurement in the loop guard ( theorem  [ thm : disturbm ] ) can make any quantum loop ( almost ) terminating . in section 6 ,",
    "a representation of the function computed by a quantum loop is presented in terms of finite summations of complex matrices ( theorem  [ prop : 6.4 ] ) .",
    "to illustrate the notions and results presented in the previous sections , sections 7 is devoted to some examples which observe the computational behavior of two simplest classes of quantum loops : one qubit loops , and two qubit loops defined by controlled operations .",
    "section 8 is the concluding section in which we draw the conclusion and point out some problems for further studies .",
    "for convenience of the reader we briefly recall some basic notions from quantum theory and fix the notations needed in the sequel .",
    "we refer to @xcite for more details .",
    "an isolated physical system is associated with a hilbert space which is called the state space of the system .",
    "we only need to consider finite dimensional hilbert space in quantum computation .",
    "an @xmath0dimensional hilbert space is an @xmath0dimensional complex vector space @xmath1 together with an inner product which is a mapping @xmath2 satisfying the following properties :    1 .",
    "@xmath3 with equality if and only if @xmath4 ; 2 .   @xmath5 ; 3 .",
    "@xmath6 ,    where @xmath7 is the set of complex numbers , and @xmath8 stands for the conjugate of @xmath9 for each complex number @xmath10 . for any vector @xmath11 in @xmath1 ,",
    "its length @xmath12 is defined to be @xmath13 .",
    "let @xmath14 be a set of vectors in a hilbert space @xmath1 .",
    "then @xmath15 is defined to be the subspace of @xmath1 spanned by @xmath14 , that is , it consists of all linear combinations of vectors in @xmath14 .",
    "an orthonormal basis of a hilbert space @xmath1 is a basis @xmath16 with @xmath17 then the trace of a linear operator @xmath18 on @xmath1 is defined to be @xmath19    a pure state of a quantum system is a unit vector in its state space , that is , a vector @xmath11 with @xmath20 , and a mixed state is represented by a density operator .",
    "a density operator in a hilbert space @xmath1 is a linear operator @xmath21 on it fulfilling the following conditions :    1 .",
    "@xmath21 is positive in the sense that @xmath22 for all @xmath11 ; 2 .",
    "@xmath23 .",
    "an equivalent concept of density operator is ensemble of pure states .",
    "an ensemble is a set of the form @xmath24 such that @xmath25 and @xmath26 is a pure state for each @xmath27 , and @xmath28 .",
    "then @xmath29 is a density operator , and conversely each density operator can be generated by an ensemble of pure states in this way .",
    "the set of density operators on @xmath1 is denoted @xmath30 .",
    "a positive operator @xmath18 is called a partial density operator if @xmath31 .",
    "we write @xmath32 for the set of partial density operators on @xmath1 .",
    "obviously , @xmath33 .",
    "the evolution of a closed quantum system is described by a unitary operator on its state space .",
    "a linear operator @xmath34 on a hilbert space @xmath1 is said to be unitary if @xmath35 , where @xmath36 is the identity operator on @xmath1 , and @xmath37 is the adjoint of @xmath34 . if the states of the system at times @xmath38 and @xmath39 are @xmath40 and @xmath41 , respectively , then @xmath42 for some unitary operator @xmath34 which depends only on @xmath38 and @xmath39 .",
    "in particular , if @xmath40 and @xmath41 are pure states @xmath43 and @xmath44 , respectively , that is , @xmath45 and @xmath46 , then we have @xmath47 .",
    "a quantum measurement is described by a collection @xmath48 of measurement operators , where the indexes @xmath49 refer to the measurement outcomes .",
    "it is required that the measurement operators satisfy the completeness equation @xmath50 .",
    "if the system is in state @xmath21 , then the probability that measurement result @xmath49 occurs is given by @xmath51 , and the state of the system after the measurement is @xmath52 for the case that @xmath21 is a pure state @xmath11 , that is , @xmath53 , we have @xmath54 , and the post - measurement state is @xmath55 . in particular , a projective measurement is described by an observable which is represented by a hermitian operator . a hermitian operator is a linear operator @xmath56 with @xmath57 .",
    "an eigenvector of a linear operator @xmath18 is a nonzero vector @xmath58 such that @xmath59 for some @xmath10 , where @xmath9 is called the eigenvalue of @xmath18 corresponding to @xmath58 .",
    "we write @xmath60 for the set of eigenvalues of @xmath18 which is called the spectrum of @xmath18 .",
    "it is well known that all eigenvalues of a hermitian operator @xmath56 are reals .",
    "let @xmath61 be the spectral decomposition of @xmath56 where for each @xmath62 , @xmath63 is the projector to its corresponding eigenspace .",
    "obviously , these projectors form a quantum measurement @xmath64 .",
    "if the state of a quantum system is @xmath21 , then the probability that result @xmath49 occurs when measuring @xmath56 on the system is @xmath65 and the post - measurement state of the system is @xmath66    the state space of a composite system is the tensor product of the state spaces of its components .",
    "let @xmath67 and @xmath68 be two hilbert spaces .",
    "then their tensor product @xmath69 consists of linear combinations of vectors @xmath70 with @xmath71 and @xmath72 . for any linear operator @xmath73 on @xmath67 and @xmath74 on @xmath68 , @xmath75 is an operator on @xmath69 and it is defined by @xmath76 for each @xmath77 and @xmath78 . since density operators are special linear operators , their tensor product is then well - defined .",
    "if component system @xmath27 is in state @xmath79 for each @xmath27 , then the state of the composite system is @xmath80 .",
    "we first give a general and formal formulation of quantum loop programs .",
    "suppose that we have @xmath81 quantum registers @xmath82 , and their state spaces are @xmath83 , respectively .",
    "we further assume that @xmath34 is a unitary operator on the tensor product space @xmath84 let @xmath85 be a projective measurement on @xmath1 .",
    "then for any @xmath86 , the quantum loop program defined by @xmath34 , @xmath56 and @xmath87 may be written as follows : @xmath88 where @xmath89 is used to denote the sequence @xmath82 of quantum registers .",
    "let @xmath90 and @xmath91 where @xmath36 is the unit operator on @xmath1 .",
    "then the guard @xmath92of loop  ( [ eq : lp1 ] ) means that the projective measurement @xmath93 is applied to @xmath89 , and the outcome corresponding to @xmath94 is observed .",
    "the body of the loop is the assignment @xmath95 , that is , a command of performing unitary transformation @xmath34 on the state of the sequence @xmath89 of quantum registers .",
    "this loop can be visualized by fig.1 .",
    "it is worth noting that the projective measurement we perform to check the guard condition of loop  ( [ eq : lp1 ] ) is @xmath93 rather than @xmath56 itself , because we need only tell whether or not the measurement outcome belongs to @xmath87 .",
    "any further information about the exact outcome is useless , and will bring unnecessary disturbance to the system we measured .    ) ]    we now examine the computational process of the above loop program . for any input state @xmath96 , the behavior of the above quantum loop can be described in the following unwound way ( see fig.2 ) :    ) ]    1 .",
    "this is the initial step .",
    "the loop program performs the projective measurement @xmath93 on the input state @xmath21 . if the outcome corresponding to @xmath94",
    "is observed , then the program performs the given unitary operation @xmath34 on the post - measurement state .",
    "otherwise the program terminates .",
    "formally , the loop will terminate with probability @xmath97 and it will continue with probability @xmath98 in the case of termination , the output of the loop is @xmath99 and in the case of nontermination , the state of @xmath89 system after the measurement is @xmath100 furthermore , @xmath101 will be fed to the unitary operation @xmath34 and then the state @xmath102 is returned , which will be used as the input state in the next step .",
    "this is the induction step .",
    "suppose that the loop has performed @xmath81 steps , and it did not terminate at the @xmath81th step , that is , @xmath103 . if @xmath104 is the state of @xmath89 system returned at the @xmath81th step , then in the @xmath105th step , the termination probability is @xmath106 and the output is @xmath107 the loop continues to perform the unitary operation @xmath34 on the post - measurement state @xmath108 with probability @xmath109 and the state @xmath110 will be returned .",
    "note that not only a pure quantum state but also a mixed state is allowed to feed into a quantum loop .",
    "in fact , quantum programming with mixed states has already been considered in the previous literature ; for example , see  @xcite .",
    "there is an essential difference between the computing process of quantum loops and that of classical loops . in a classical loop the states of variables",
    "do not change during verification of the loop condition .",
    "however , in a quantum loop it is impossible to check the loop condition directly .",
    "instead , the loop program needs to extract information about the registers @xmath82 by performing a measurement @xmath56 and thus their states will be changed .    to demonstrate the expressive power of quantum loops ,",
    "let us consider an interesting example .",
    "quantum walk is a natural quantum extension of classical random walk , which in turn has proved to be a fundamental tool in computer science , especially in the designing of algorithms @xcite . in this example",
    ", we consider a discrete coined quantum walk on an @xmath81-cycle with an absorbing boundary at position 1 , and express this kind of quantum walk in our language of quantum loops . for more details about quantum walk on a cycle , or more generally ,",
    "on any graph , we refer to @xcite .",
    "the following example shows that a quantum walk can be described very well in the language of quantum loops .",
    "[ exam ] let @xmath111 be a 2-dimensional ` coin ' space with orthonomal basis states @xmath112 and @xmath113 , and @xmath114 be the @xmath81-dimensional principle space spanned by the position vectors @xmath115 .",
    "then each step of the quantum walk we are concerned with consists of three sub - steps :    1 .   a ` coin - tossing operator ' @xmath116 is applied to the coin space , where @xmath117 and @xmath118 .",
    "2 .   a shift operator @xmath119 is performed on the space @xmath120 , which makes the quantum walk one step left or right according to the coin state . here",
    "@xmath121 and @xmath122 denote subtraction and addition modulo @xmath81 , respectively .",
    "3 .   measure the principle system to see if the current position of the walk is @xmath123 .",
    "if the answer is ` yes ' then terminate the walk , otherwise the walk continues .",
    "formally , we can formulate the walk described above by a quantum loop : @xmath124 where @xmath125 , @xmath126 , and @xmath89 is a quantum register in @xmath120 . for simplicity ,",
    "we write @xmath127 in the loop guard to denote @xmath128 for @xmath129 .",
    "one of the most important problems concerning the behavior of a loop program is its termination .",
    "[ defn : 1 ]    1 .",
    "if @xmath130 for some positive integer @xmath81 , then it is said that the loop with input @xmath21 terminates .",
    "2 .   the nonterminating probability of the loop with input @xmath21 is defined to be @xmath131 where ( and in the sequel )",
    "@xmath132 denotes the probability that the loop does not terminate after @xmath81 steps .",
    "we say that the loop with input @xmath21 almost terminate whenever @xmath133 .",
    "if @xmath134 , then we say that the loop with input @xmath21 does not terminate .    intuitively , a quantum loop almost terminates if for any @xmath135 , there exists a big enough positive integer @xmath136 such that the probability that the loop terminates at the @xmath136th step is greater than @xmath137 .",
    "obviously , if a quantum loop terminates on a given input state , then it also almost terminates on the same input .",
    "a classical loop may terminate or not , but a quantum loop has an additional possibility of almost termination .",
    "clearly , this is caused by the probabilistic nature of quantum mechanics .",
    "[ defn : 2 ]    1 .",
    "a quantum loop program is said to be terminating ( resp . almost terminating ) if it terminates ( resp .",
    "almost terminates ) with all input @xmath138 .",
    "a quantum loop is uniformly almost terminating if for any @xmath135 there exists a positive integer @xmath136 such that @xmath139 holds for all input @xmath140 whenever @xmath141 .",
    "it is clear that uniformly almost terminating quantum loops are almost terminating .",
    "note that the case of @xmath142 or @xmath143 is trivial .",
    "in fact , the loop  ( [ eq : lp1 ] ) is equivalent to @xmath144 when @xmath142 , and it is equivalent to @xmath145 when @xmath146 .",
    "the former terminates immediately and does nothing , and the latter will loop forever . in what follows",
    "we always assume that @xmath147 .    in the computational process of a loop program ,",
    "a density operator is input , and a density operator is outputted with a certain probability at each step .",
    "thus , we have to synthesize these density operators returned at all steps according to the respective probabilities into a single one as the overall output .",
    "note that sometimes the loop does not terminate with a nonzero probability .",
    "the synthesized output may not be a density operator but only a partial density operator .",
    "then a loop defines a function from density operators to partial density operators on @xmath1 .",
    "[ defn : 3 ] the loop  ( [ eq : lp1 ] ) defines a function @xmath148 in the following way : @xmath149 for each @xmath150 the function @xmath151 is called the function computed by the loop  ( [ eq : lp1 ] ) .",
    "it should be noted that in the defining equation of @xmath152 the quantity @xmath153 is the probability that the loop does not terminate at steps from @xmath123 to @xmath154 but it terminates at the @xmath81th step .    for the case that @xmath21 is a pure state , that is",
    ", @xmath155 for some pure state @xmath11 , we will write @xmath156 in place of @xmath152 for simplicity .    in the remainder of this section",
    ", we are going to present some basic properties of quantum loops . for any operator @xmath18 on @xmath1 , we write @xmath157 , that is , @xmath158 is the restriction of @xmath18 on the subspace of @xmath1 corresponding to the projector @xmath94 .",
    "first , the computational process of quantum loop  ( [ eq : lp1 ] ) can be summarized as :    [ lem : 1 ] let @xmath21 be the input state to the loop  ( [ eq : lp1 ] ) . then for any positive integer @xmath81",
    ", we have : @xmath159 and @xmath160    _ proof .",
    "_ first , it is easy to check by induction on @xmath81 that @xmath161 @xmath162 and @xmath163 then eq .  ( [ eqn : pn ] ) follows from eq .",
    "( [ eqn : nt ] ) , and eq .  ( [ eqn : frho ] ) comes from eqs .",
    "( [ eqn : pn ] ) , ( [ eqn : t ] ) , and ( [ eqn : out ] ) . @xmath164    it should be pointed out here that convergence of the infinite series in definition  [ defn : 3 ] and eq .",
    "( [ eqn : frho ] ) is guaranteed by the facts that the set @xmath165 is a directed complete poset under the lwner order and the sequence @xmath166 is non - decreasing in this order .",
    "for the details , we refer to @xcite . on the other hand , from eq .",
    "( [ eqn : frho ] ) and kraus representation theorem ( @xcite , theorem 8.1 ) we notice that the function @xmath151 computed by loop ( [ eq : lp1 ] ) is a super - operator ( also called quantum operation ) .",
    "let @xmath167 be the subspace of @xmath1 with projector @xmath94 , and @xmath168 the subspace with projector @xmath169 .",
    "the following proposition clarifies the range of the function @xmath151 computed by the loop  ( [ eq : lp1 ] ) .",
    "[ prop : 1 ] for each @xmath138 , we have :    1 .",
    "@xmath170 if @xmath171 or @xmath172 ; 2",
    ".   @xmath173 .",
    "thus , @xmath174 if and only if the loop  ( [ eq : lp1 ] ) with input state @xmath21 almost terminates",
    ".    _ proof .",
    "_ 1 . by definition we know that @xmath175",
    ". then it follows immediately from lemma  [ lem : 1 ] .",
    "\\2 . by induction on @xmath176",
    "it may be shown that @xmath177 then we have : @xmath178 the conclusion follows immediately .",
    "@xmath164    from proposition  [ prop : 1].1 we see that @xmath151 is indeed a function from @xmath30 into @xmath179",
    ".    @xmath180    @xmath181",
    "the aim of this section is to give a necessary and sufficient condition under which the loop  ( [ eq : lp1 ] ) terminates on a given input state .",
    "we first give a lemma which allows us to decompose an input density matrix into a sequence of simpler input density matrices when examining termination of a quantum loop .",
    "[ prop : 6.3 ] let @xmath182 where @xmath183 and @xmath184 for each @xmath27 , and @xmath28 .",
    "then the loop  ( [ eq : lp1 ] ) with input @xmath21 terminates if and only if it terminates with input @xmath79 for all @xmath27 .",
    "_ for each @xmath27 , if the loop  ( [ eq : lp1 ] ) with input @xmath79 terminates , then there exists a positive integer @xmath185 such that @xmath186 .",
    "let @xmath187 .",
    "then @xmath188 for all @xmath27 , and this yields @xmath189    conversely , if the loop  ( [ eq : lp1 ] ) with input @xmath21 terminates , then there exists a positive integer @xmath190 such that @xmath191 .",
    "this implies that for each @xmath27 , @xmath188 because @xmath192 for each @xmath27 .",
    "@xmath164    if @xmath24 is an ensemble with @xmath183 for all @xmath27 , and @xmath193 then the above lemma asserts that the loop  ( [ eq : lp1 ] ) terminates on input mixed state @xmath21 if and only if it terminates on input pure state @xmath26 for all @xmath27 .",
    "in particular , we have :    [ cor : 6.1 ] a quantum loop is terminating if and only if it terminates with all pure input states .",
    "second , the termination problem of a quantum loop may be reduced to a corresponding problem of a classical loop in the field of complex numbers .",
    "let @xmath194 be an orthonormal basis of @xmath1 such that @xmath195 where @xmath196 . without any loss of generality ,",
    "we assume in the sequel that the matrix representations of @xmath197 ( denoted also by @xmath197 respectively for simplicity ) are taken according to this basis . in particular ,",
    "for each pure state @xmath198 we write @xmath199 for the vector representation of @xmath200 under this basis .    [",
    "prop : 6.2 ] the quantum loop  ( [ eq : lp1 ] ) terminates with input @xmath138 if and only if @xmath201 for some nonnegative integer @xmath202 , where @xmath203 is the @xmath204-zero matrix .",
    "in particular , it terminates with pure input state @xmath11 if and only if @xmath205 for some nonnegative integer @xmath202 , where @xmath206 is the zero vector of length @xmath176 .",
    "_ this result follows from eq .",
    "( [ eqn : pn ] ) and the fact that @xmath207 if and only if @xmath208 when @xmath18 is positive semi - definite .",
    "@xmath164    third , we show certain invariance of termination of a classical loop under a nonsingular transformation .",
    "[ lem : 6.1 ] let @xmath209 be a nonsingular @xmath210complex matrix .",
    "then the ( classical ) loop : @xmath211 terminates on input @xmath212 if and only if the following loop : @xmath213 terminates on input @xmath214 .",
    "_ note that @xmath215 if and only if @xmath216 because @xmath209 is nonsingular .",
    "then the conclusion follows from a simple calculation .",
    "@xmath164    furthermore , we shall need the famous jordan normal form theorem in the proof of the main result in this section .",
    "[ lem : 6.2 ] ( jordan normal form ; @xcite ) for any @xmath217complex matrix @xmath18 , there is a nonsingular @xmath217complex matrix @xmath209 such that @xmath218 , where @xmath219 is the jordan normal form of @xmath18 , @xmath220 , and @xmath221is a @xmath222-jordan block for each @xmath223 .",
    "furthermore , if the jordan blocks corresponding to each distinct eigenvalue are presented in decreasing order of the block size , then the jordan normal form is uniquely determined once the ordering of the eigenvalues is given .",
    "the following technical lemma is also needed .",
    "[ lem : 6.3 ] let @xmath224 be a @xmath225jordan block , and @xmath226 .",
    "then @xmath227 for some nonnegative integer @xmath202 if and only if @xmath228 or @xmath229 , where @xmath206 is the zero vector of length @xmath230 .",
    "_ the ifpart is clear .",
    "we now prove the only ifpart . by a routine calculation",
    "we obtain the matrix @xmath231 as in eq .",
    "( [ eq : 8 ] ) .",
    "notice that @xmath231 is an upper triangular matrix with the diagonal entries being @xmath232 .",
    "so if @xmath233 then @xmath231 is nonsingular , and then @xmath234 implies @xmath229 .",
    "@xmath164    now we are able to present the main result of this section .",
    "[ prop : 5.1 ] suppose the jordan decomposition of @xmath235 is @xmath236 , where @xmath237 let @xmath238 be divided into @xmath239 sub - vectors @xmath240 such that the length of @xmath241 is @xmath242 . then the loop  ( [ eq : lp1 ] ) terminates on input @xmath11 if and only if for each @xmath223 , @xmath243 or @xmath244 , where @xmath206 is the zero vector of length @xmath242 .",
    "_ using lemmas  [ prop : 6.2 ] and  [ lem : 6.1 ] we know that the loop  ( [ eq : lp1 ] ) terminates on input @xmath11 if and",
    "only if @xmath245 for some nonnegative integer @xmath202 . a simple calculation yields @xmath246 therefore , @xmath245 for some nonnegative integer @xmath202 if and only if for each @xmath223 , there exists a nonnegative integer @xmath247 such that @xmath248 then we complete the proof by using lemma  [ lem : 6.3 ] . @xmath164    loop ( [ eq : lp1 ] ) is terminating if and only if @xmath235 has only zero eigenvalues .",
    "theorem  [ prop : 5.1 ] gives a necessary and sufficient condition for termination of loop ( [ eq : lp1 ] ) on an input pure state .",
    "obviously , we can decide whether the loop  ( [ eq : lp1 ] ) terminates on any given mixed state as input by combining lemma  [ prop : 6.3 ] and theorem  [ prop : 5.1 ] .",
    "the condition for termination of loop ( [ eq : lp1 ] ) can be considerably simplified in the special case when @xmath235 is normal , that is , @xmath249 in this case , @xmath235 has the following simple spectrum decomposition : @xmath250 then from eq .",
    "( [ eqn : pn ] ) we have for any @xmath251 : @xmath252 this implies immediately the following :    suppose @xmath235 is normal and its spectrum decomposition is given by eq .",
    "( [ eq : sdecom ] ) .",
    "then we have :    1 .",
    "loop  ( [ eq : lp1 ] ) terminates on input state @xmath21 if and only if for any @xmath253 , @xmath254 implies @xmath255 , or equivalently , @xmath256 2 .",
    "loop  ( [ eq : lp1 ] ) is terminating if and only if @xmath257 .",
    "in this section we are going to present a necessary and sufficient condition under which the loop  ( [ eq : lp1 ] ) almost terminates on any given input state .",
    "we first give a lemma similar to lemma  [ prop : 6.3 ] so that a mixed input state can be reduced to a family of pure input states .",
    "[ prop : alpure ] let @xmath258 where @xmath183 and @xmath184 for each @xmath27 , and @xmath28 . then the loop  ( [ eq : lp1 ] ) with input @xmath21 almost terminates if and only if it almost terminates with input @xmath79 for all @xmath27 .",
    "_ notice that @xmath259 from eq .",
    "( [ eqn : pn ] ) .",
    "the result follows by taking limits about @xmath81 in both sides of the above equation .",
    "@xmath164    [ cor : 6.1 ] a quantum loop is almost terminating if and only if it almost terminates on all pure input states .",
    "the following lemma is a key step in the proof of our main result in this section .",
    "[ lem : alpure ] the loop  ( [ eq : lp1 ] ) almost terminates on the pure input state @xmath11 if and only if @xmath260    _ proof .",
    "_ from eq .",
    "( [ eqn : pn ] ) we have @xmath261 .",
    "so @xmath262 if and only @xmath263 .",
    "@xmath164    the following theorem gives a necessary and sufficient condition for almost termination of a quantum loop on a pure input state .",
    "[ thm : 2 ] suppose that @xmath235 , @xmath209 , @xmath264 , @xmath265 and @xmath241 @xmath266 are given as in theorem  [ prop : 5.1 ] .",
    "then the loop  ( [ eq : lp1 ] ) almost terminates on input @xmath11 if and only if for each @xmath223 , @xmath267 or @xmath244 , where @xmath206 is the zero vector of length @xmath242 .",
    "_ first , for any nonnegative integer @xmath81 , we have @xmath268 then @xmath263 if and only if @xmath269 since @xmath209 is nonsingular . using lemma  [ lem : alpure ] we know that the loop  ( [ eq : lp1 ] ) almost terminates if and only if eq .",
    "( [ eq : 11 ] ) holds . note that @xmath270 then eq .  ( [ eq : 11 ] ) holds if and only if @xmath271 for all @xmath223 .",
    "furthermore , for each @xmath223 , from eq .",
    "( [ eq : 9 ] ) we see that eq .",
    "( [ eq : 12 ] ) holds if and only if the following @xmath242 equations are valid : @xmath272=0,\\\\ \\lim_{n\\rightarrow\\infty}\\lambda_i^{n}v_{ik}=0,\\end{cases}\\ ] ] where it is assumed that @xmath273 .    if @xmath267 , then @xmath274 for any @xmath275 , and all of the above equations in eq .",
    "( [ eq : case ] ) follow . on the other hand , if @xmath276 then from the last equation in eq .",
    "( [ eq : case ] ) we know that @xmath277 .",
    "putting @xmath277 into the second equation from bottom in eq .",
    "( [ eq : case ] ) we obtain @xmath278 .",
    "we can further move from bottom to top in eq  ( [ eq : case ] ) in this way , and finally we get @xmath279 .",
    "this completes the proof .",
    "@xmath164    [ cor : normlessthan1 ] loop ( [ eq : lp1 ] ) is almost terminating if and only if all the eigenvalues of @xmath235 have norms less than 1 .    in the case",
    "when @xmath235 is normal , we have the following corollary which is also easy to prove directly from eq .",
    "( [ eqn : normalpnt ] ) .",
    "suppose @xmath235 is normal and eq .",
    "( [ eq : sdecom ] ) is its spectrum decomposition",
    ". then    1 .",
    "loop  ( [ eq : lp1 ] ) with input @xmath21 almost terminates if and only if for any @xmath253 , @xmath280 implies @xmath255 , i.e. , the set @xmath281 is empty .",
    "the nonterminating probability is @xmath282    now we are able to show that the quantum walk  ( [ lp : qwalk ] ) in example  [ exam ] is almost terminating .",
    "it is direct to calculate that @xmath283 and @xmath284 it suffices to prove that each eigenvector of @xmath235 has its norm strictly less that 1 . by contradiction ,",
    "suppose @xmath235 has an eigenvalue @xmath9 with unit norm , and one of the corresponding normalized eigenvector is @xmath285 .",
    "then we have @xmath286 comparing eqs .",
    "( [ eq : psi ] ) and ( [ eq : lambdapsi ] ) , we derive further that @xmath287 and @xmath288 on the other hand , since @xmath289 , we know from eq .",
    "( [ eq : lambdapsi ] ) that @xmath290 so we have : @xmath291 taking eq .",
    "( [ eq : ab0 ] ) back into eqs .",
    "( [ eq : ab+ ] ) and ( [ eq : ab- ] ) we can deduce that @xmath292 for any @xmath27 .",
    "this is a contradiction .    to conclude this section , we observe some further properties of almost terminating quantum loops",
    "the following theorem indicates that the notion of uniformly almost terminating loop coincides with almost terminating loop .",
    "[ thm : teralter ] the quantum loop  ( [ eq : lp1 ] ) is almost terminating if and only if it is uniformly almost terminating .    _ proof . _",
    "if loop  ( [ eq : lp1 ] ) is almost terminating , then we have @xmath267 for any @xmath293 from corollary [ cor : normlessthan1 ] .",
    "let @xmath236 be the jordan decomposition of @xmath235 . then from eq .",
    "( [ eqn : pn ] ) we have : @xmath294 by using the properties of matrix norm , we derive that @xmath295 since @xmath296 , from eq .",
    "( [ eq : 8 ] ) we can check easily that @xmath297 when @xmath298 .",
    "so for any @xmath135 , we can take @xmath136 large enough such that @xmath299 then we have @xmath139 for all @xmath21 whenever @xmath300 . thus loop  ( [ eq : lp1 ] ) is uniformly almost terminating .",
    "@xmath164    the next two theorems show that the notion of almost terminating loop is sensitive .",
    "more explicitly , a small disturbance either on the unitary transformation in the loop body or on the measurement in the loop guard can make any quantum loop almost terminating .",
    "we first need to prove a technical lemma .",
    "[ lem : alsoeigen ] suppose @xmath301 is an eigenvector of @xmath235 and its corresponding eigenvalue @xmath302 has unit norm .",
    "then :    1 .",
    "@xmath303 , and it is also an eigenvector of @xmath34 with an eigenvalue of unit norm ; 2 .   @xmath304 .",
    "_ assume that @xmath305 and @xmath289 .",
    "first , we see that @xmath306 for @xmath1 which contains @xmath301 .",
    "we assume that @xmath307 and @xmath308 .",
    "then it holds that @xmath309 this implies that @xmath310 for all @xmath311 , and @xmath312 . finally , @xmath313",
    "@xmath164    [ thm : disturbu ] for any @xmath56 , @xmath314 and @xmath34 in loop ( [ eq : lp1 ] ) , and for any @xmath135 , there exists a unitary operator @xmath315 such that @xmath316 and the following loop is almost terminating : @xmath317    _ proof .",
    "_ by using corollary  [ cor : normlessthan1 ] , we only need to find a unitary operator @xmath318 such that @xmath316 and all eigenvalues of @xmath319 have norms less than 1 . on the other hand",
    ", lemma  [ lem : alsoeigen ] implies that a necessary condition for @xmath319 to have an eigenvalue with unit norm is that @xmath318 has an eigenvector lying in the space @xmath167 . here",
    "@xmath167 is the subspace with projector @xmath94 .",
    "so we need only to show that we can take @xmath318 such that @xmath316 and at the same time none of the eigenvectors of @xmath318 lies in @xmath167 . to achieve this , we first write out the spectrum decomposition of @xmath34 as @xmath320 for some @xmath321 . from @xmath314",
    "there exists @xmath322 such that @xmath323 .",
    "let @xmath324 @xmath325 and @xmath326 for @xmath327 .",
    "here @xmath328 is a very small but positive real number which will be determined later .",
    "it is obvious that the set @xmath329 are also orthonormal , and @xmath330 .",
    "let @xmath331 .",
    "then the number of eigenvectors of @xmath332 which lie in @xmath167 is strictly less than that of @xmath34 . repeating the above steps we can finally find a sequence of unitary matrices @xmath333 , @xmath334 , such that all the eigenvectors of @xmath335 does not lie in @xmath167 .",
    "take @xmath336 and notice that we can take @xmath328 small enough at each step such that @xmath337 .",
    "it then follows that @xmath338 . @xmath164    [ thm : disturbm ] for any @xmath56 , @xmath314 and @xmath34 in loop ( [ eq : lp1 ] ) , and for any @xmath135 , there exists an observable @xmath339 with @xmath340 such that @xmath341 and the following loop is almost terminating : @xmath342    _ proof . _ similar to the proof of theorem  [ thm : disturbu ] , it suffices to find @xmath343 such that @xmath340 , @xmath344 , and none of the eigenvectors of @xmath34 lies in @xmath345 , where @xmath345 is the eigenspace of @xmath343 with eigenvalues in @xmath87 .",
    "let @xmath346 be an orthonormal basis of @xmath1 such that @xmath347 .",
    "since @xmath314 , we have @xmath348 .",
    "let @xmath349 be the spectrum decomposition of @xmath34 .",
    "if all @xmath350 then we have done .",
    "otherwise assume @xmath351 .",
    "then there exists @xmath352 such that @xmath353 .",
    "we take some @xmath354 and put @xmath355 @xmath356 where it is required that @xmath357 and @xmath358 for @xmath359 .",
    "it is easy to check that the set @xmath360 is also an orthonormal basis of @xmath1 .",
    "we write @xmath361 .",
    "let @xmath362 be the subspace of @xmath1 with projector @xmath363 . then @xmath364 because @xmath365 furthermore , we can choose @xmath328 carefully such that the eigenvectors of @xmath34 in @xmath362 is strictly less than that in @xmath167 .",
    "indeed , if @xmath350 but @xmath366 then it must hold that @xmath367 thus , there are only finitely many @xmath328 which does not meet our requirement .    repeating",
    "the above steps we can finally find a sequence of orthonormal bases @xmath368 with @xmath369 such that @xmath370 for each @xmath371 , and all the eigenvectors of @xmath34 do not lie in @xmath372 , the subspace of @xmath1 with projector @xmath373 .",
    "let @xmath374 notice that we can take @xmath328 small enough at each step such that @xmath375 it then follows that @xmath376 the function computed by a quantum loop ---------------------------------------    in this section , we are going to give a representation of the function computed by the loop  ( [ eq : lp1 ] ) .",
    "first of all , we consider the simple case that @xmath235 is normal .    [ prop : normalf ] suppose @xmath235 is normal and its spectrum decomposition is given by eq .",
    "( [ eq : sdecom ] ) . then the function computed by loop  ( [ eq : lp1 ] ) is as follows : @xmath377 where @xmath378 .    _",
    "_ for any @xmath379 , we have from eq .",
    "( [ eq : sdecom ] ) that @xmath380 where the second equality is due to lemma  [ lem : alsoeigen].2 . taking this equation into eq .",
    "( [ eqn : frho ] ) we have : @xmath381 then the result follows by using lemma [ lem : alsoeigen].1 .",
    "@xmath164    we now turn to consider the general case where @xmath235 is not necessary to be normal . to this end , the following lemmas are needed .",
    "( schur s unitary triangularization ; @xcite ) given @xmath204-complex matrix @xmath18 with eigenvalues @xmath382 in any prescribed order , there exists a @xmath204 unitary matrix @xmath14 such that @xmath383 , where @xmath384 is upper triangular with diagonal entries @xmath385 , @xmath253 .    [",
    "lem : equal0 ] let @xmath386 be the schur s triangularization of @xmath235 . then for any @xmath387 ,",
    "if @xmath388 then @xmath389 for all @xmath311 .    _ proof . _",
    "to prove this lemma , we need only to notice @xmath390 , and so for any @xmath27 , the euclidean norms of the @xmath27-th row and the @xmath27-th column of @xmath384 must be less than or equal to @xmath123",
    ". @xmath164    [ lem : size1 ] for each jordan block @xmath224 in the jordan normal form of @xmath235 , if @xmath289 , then @xmath391 .",
    "that is , each jordan block corresponding to unit norm eigenvalues has size 1 .    _",
    "_ suppose @xmath386 is the schur s triangularization of @xmath235 , and the diagonal entries of @xmath384 have been arranged in decreasing order of their norms , i.e. , @xmath392 for some @xmath393 .",
    "then from lemma  [ lem : equal0 ] , @xmath384 must have the form @xmath394 where @xmath395 is @xmath396dimensional and none of its eigenvalues has unit norm .",
    "let @xmath397 be the jordan decomposition of @xmath395 , and let @xmath398 it is easy to check that @xmath399 is the jordan decomposition of @xmath235 .",
    "then the result holds from the uniqueness of jordan normal form in the sense presented in lemma  [ lem : 6.2 ] .",
    "@xmath164    [ lem : jrn ] let @xmath224 be a @xmath225jordan block , @xmath400 , and @xmath401 .",
    "then @xmath402 where @xmath403    _ proof .",
    "_ for any @xmath404 , we can see from eqs .",
    "( [ eq : 8 ] ) and ( [ eq : 9 ] ) that the @xmath405component of vector @xmath406 is @xmath407 the convergence of the above series is guaranteed by the assumption that @xmath400 .",
    "@xmath164    now we are able to present the main result of this section .",
    "[ prop : 6.4 ] suppose that @xmath209 , @xmath264 , @xmath265 and @xmath241 @xmath266 are given as in theorem  [ prop : 5.1 ] . without loss of generality , we assume that the jordan blocks of @xmath264 have been arranged in the decreasing order of @xmath408 ,",
    "i.e. @xmath409 . then the output @xmath410 of the loop  ( [ eq : lp1 ] ) with input @xmath198 is a @xmath411-dimensional vector lying in the subspace @xmath168 : @xmath412 where @xmath413 is a @xmath414-dimensional vector . here",
    "the former and the latter zero vectors have dimensions @xmath393 and @xmath415 , respectively , and for @xmath416 , @xmath417 is given in eq .",
    "( [ eq : limjrn ] ) .    _ proof .",
    "_ under the assumption of the theorem , we have @xmath418 by using lemma  [ lem : size1 ] . then for any @xmath419 , @xmath420 or in other words",
    ", @xmath421 is an eigenvector of @xmath235 with its corresponding eigenvalue having unit norm .",
    "so we have @xmath422 from lemma [ lem : alsoeigen ] 2 .    on the other hand , from eq .",
    "( [ eqn : frho ] ) we have @xmath423 here @xmath424 and the zero vector @xmath206 has dimension @xmath393",
    ". then the result holds by using lemma  [ lem : jrn ] and rewriting eq .",
    "( [ eq : fpsi ] ) into vector form . @xmath164    although we only consider pure input states in theorems  [ prop : normalf ] and [ prop : 6.4 ] , they may be used to calculate the outputted state @xmath152 of loop  ( [ eq : lp1 ] ) for any mixed input state @xmath21 by noting that @xmath425 , where @xmath426 is the spectrum decomposition of @xmath21 .",
    "to illustrate further the notions introduced and the results obtained in this paper , we consider two simplest classes of quantum loops .",
    "let @xmath56 be an observable in the @xmath427dimensional hilbert space @xmath68 .",
    "then we have @xmath428 where @xmath429 are the eigenvalues of @xmath56 , and @xmath430 is the eigenvector of @xmath56 corresponding to @xmath431 @xmath432 . a single qubit loop can be written as follows : @xmath433 where @xmath34 is a unitary operation on a single qubit , and @xmath434 . without any loss of generality we may assume that @xmath435 and @xmath436 .    note that the function @xmath151 defined by the loop  ( [ eq : lp2 ] ) is from @xmath437 to @xmath438 .",
    "since @xmath439 is the one - dimensional hilbert space , @xmath438 can be identified with the unit interval @xmath440 $ ] .",
    "thus , the function @xmath151 computed by the loop  ( [ eq : lp2 ] ) is a mapping from @xmath437 into @xmath440 $ ] . a simple application of theorems  [ prop : 5.1 ] , [ thm : 2 ] and  [ prop : 6.4 ] leads to the following :    [ lem : 4.1 ] let @xmath441 be the input state to the single qubit loop program  ( [ eq : lp2 ] ) . then :    1 .",
    "if @xmath442 or @xmath443 , then the loop  ( [ eq : lp2 ] ) terminates , and @xmath444 ; 2 .   if @xmath445 , then the loop  ( [ eq : lp2 ] ) almost terminates , and @xmath444 ; 3 .   if @xmath446 and @xmath447 , then the loop  ( [ eq : lp2 ] ) does not terminate , and @xmath448",
    ".    now we further consider the special case that the input is a pure state . to this end",
    ", we shall need the following :    [ lem : 4.2 ] ( @xcite ) each unitary operation on a single qubit can be written in the form of @xmath449 where @xmath450 , @xmath451 , @xmath452 and @xmath328 are real numbers , @xmath453 and @xmath454 are the rotation operators about @xmath455 and @xmath456 axes , respectively .    to simplify the presentation",
    ", we further suppose that the measurement is performed on the computational basis .",
    "combining lemmas  [ lem : 4.1 ] and  [ lem : 4.2 ] we obtain :    [ prop : 4.1 ] suppose that @xmath457 is the input to the single qubit loop program : @xmath458 where the loop condition @xmath459 means that the outcome of a measurement on the computational basis @xmath460 is @xmath461 , and the unitary operator @xmath34 is given as in lemma [ lem : 4.2 ] . then    1 .   if @xmath462 or @xmath463 for some integer @xmath81 , then the loop  ( [ eq : lp3 ] ) terminates ; 2 .",
    "if @xmath464 and @xmath465 for some integer @xmath81 , then the loop  ( [ eq : lp3 ] ) does not terminate ; 3 .   if @xmath466 for any integer @xmath81 , then the loop  ( [ eq : lp3 ] ) almost terminates .",
    "a similar conclusion holds if the guard condition @xmath459 in the loop  ( [ eq : lp3 ] ) is replaced by @xmath467 , which means that the result @xmath123 occurs when performing a measurement on the computational basis @xmath460 .",
    "it is interesting to note from the above proposition that termination of the loop  ( [ eq : lp3 ] ) depends only upon the parameter @xmath452 , and it is irrelevant to the other parameters @xmath468 and @xmath328 .",
    "moreover , we see that the loop  ( [ eq : lp3 ] ) is terminating if @xmath463 for some integer @xmath81 , and it is ( uniformly ) almost terminating if @xmath469 for any integer @xmath81 .    from lemma",
    "[ lem : 4.1 ] , it is easy to see that in proposition  [ prop : 4.1 ] for the cases 1 and 2 , we have @xmath470 , and for the case 3 , @xmath471 .",
    "the most frequently used single qubit gates are the four pauli matrices : @xmath472 @xmath473 the hadamard gate : @xmath474 the phase gate : @xmath475 and the @xmath476 gate : @xmath477 applying proposition  [ prop : 4.1 ] to these gates , we obtain :    for a single qubit input state @xmath478 , the loop  ( [ eq : lp3 ] ) always terminates when @xmath479 or @xmath480 , it almost terminates when @xmath481 , and it does not terminate when @xmath482 or @xmath384 provided @xmath483 .      as the second example we consider a typical class of two qubit gates , namely , controlled operations .",
    "suppose that @xmath34 is a single qubit unitary operation .",
    "then the controlled-@xmath34 gate is defined by the following @xmath484 matrix : @xmath485 where @xmath486 is the @xmath487 unit matrix .",
    "for a two qubit system , the measurement @xmath56 on the computational basis @xmath488 and @xmath489 has four possible outcomes @xmath490 , @xmath491 , @xmath492 and @xmath493 , where we use @xmath494 to indicate the measurement result @xmath495 and @xmath496 for any @xmath497 .",
    "thus , the two qubit quantum loop defined by controlled operation @xmath498 may be written as follows : @xmath499 where @xmath500 .",
    "the following proposition carefully examines the behavior of this loop for various choices of @xmath87 except the trivial cases @xmath142 or @xmath501 .",
    "let pure state @xmath502 be the input of the loop program  ( [ eq : lp4 ] ) .",
    "suppose that @xmath503 is the matrix representation of @xmath34 according to the basis @xmath504 , that is , @xmath505 for any @xmath506 .    1 .",
    "if @xmath507 , then @xmath508 , @xmath509 , the loop  ( [ eq : lp4 ] ) terminates if @xmath510 , and it does not terminates if @xmath511 .",
    "2 .   if @xmath512 , then @xmath513 , @xmath514 , the loop  ( [ eq : lp4 ] ) terminates if @xmath515 , and it does not terminates if @xmath516 .",
    "3 .   let @xmath517 . if @xmath518 or @xmath519 , then the loop  ( [ eq : lp4 ] ) terminates .",
    "if @xmath518 or @xmath520 , then it almost terminates , and @xmath521 , then it does not terminate , and @xmath522 .",
    "4 .   let @xmath523 . if @xmath524 or @xmath525 , then the loop  ( [ eq : lp4 ] ) terminates .",
    "if @xmath524 or @xmath526 , then it almost terminates , and @xmath527 if @xmath528 and @xmath529 , then it does not terminate , and @xmath530 .",
    "5 .   if @xmath531 , then @xmath532 , @xmath533 the loop  ( [ eq : lp4 ] ) terminates if @xmath534 , and it does not terminate if @xmath511 or @xmath516 .",
    "6 .   if @xmath535 , then @xmath536 , @xmath537 , the loop  ( [ eq : lp4 ] ) terminates if @xmath538 , and it does not terminate if @xmath539 or @xmath528 .",
    "let @xmath540 .",
    "then we have : @xmath541 @xmath542 is given as follows : for the case of @xmath543 , @xmath544 , and for the case of @xmath520 , @xmath545 if @xmath510 , and @xmath518 or @xmath519 , then the loop  ( [ eq : lp4 ] ) terminates , if @xmath510 , and @xmath518 or @xmath520 , then it almost terminates , and if @xmath511 , or @xmath539 and @xmath543 , then it does not terminate . 8 .",
    "let @xmath546 .",
    "then we have : @xmath547 is given as follows : for the case of @xmath548 , @xmath549 , and for the case of @xmath526 , @xmath550 if @xmath510 , and @xmath524 or @xmath525 , the the loop  ( [ eq : lp4 ] ) terminates , if @xmath510 and @xmath526 , or @xmath510 and @xmath524 , then it almost terminates , and if @xmath551 or @xmath528 and @xmath548 , then it does not terminate . 9 .",
    "let @xmath552 .",
    "then we have : @xmath553 is given as follows : for the case of @xmath543 , @xmath554 , and for the case of @xmath520 , @xmath555 if @xmath515 , and @xmath518 or @xmath519 , the the loop  ( [ eq : lp4 ] ) terminates , if @xmath515 , and @xmath520 or @xmath518 , then it almost terminates , and if @xmath556 or @xmath539 and @xmath543 , then it does not terminate . 10",
    "let @xmath557 .",
    "then we have : @xmath558 is given as follows : for the case of @xmath548 , @xmath559 , and for the case of @xmath526 , @xmath560 if @xmath515 , and @xmath524 or @xmath525 , the the loop  ( [ eq : lp4 ] ) terminates , if @xmath515 , and @xmath526 or @xmath524 , then it almost terminates , and if @xmath556 or @xmath528 and @xmath548 , then it does not terminate . 11",
    "let @xmath561 .",
    "then we have : @xmath562 and @xmath563 $ ] is given by @xmath564 if @xmath534 , and @xmath518 or @xmath519 , then the loop  ( [ eq : lp4 ] ) terminates , if @xmath534 , and @xmath520 or @xmath518 , then it almost terminates , and if @xmath511 , or @xmath516 , or @xmath539 and @xmath543 , then it does not terminate . 12 .",
    "let @xmath565 .",
    "then we have : @xmath566 and @xmath567 $ ] is given by @xmath568 if @xmath534 , and @xmath524 or @xmath525 , then the loop  ( [ eq : lp4 ] ) terminates , if @xmath534 , and @xmath526 or @xmath524 , then it almost terminates , and if @xmath511 , or @xmath516 , or @xmath528 and @xmath548 , then it does not terminate . 13 .",
    "let @xmath569 .",
    "then @xmath570 and @xmath571 $ ] . if @xmath572 , then the loop  ( [ eq : lp4 ] ) terminates , otherwise it does not terminate . 14 . let @xmath573 .",
    "then @xmath574 and @xmath575 $ ] .",
    "if @xmath576 , then the loop  ( [ eq : lp4 ] ) terminates , otherwise it does not terminate .",
    "note that termination of the loop  ( [ eq : lp4 ] ) is irrelevant to the unitary operator @xmath34 , and it only depends on the input state @xmath11 when @xmath577 or @xmath578 . for the other cases , termination of the loop defined by the cnot gate",
    "is summarized in the following :    [ cor : 4.1]suppose that @xmath498 is the cnot gate @xmath579 , where @xmath580 is the second pauli gate .    1 .",
    "let @xmath517 or @xmath581 .",
    "then the loop  ( [ eq : lp4 ] ) always terminates .",
    "2 .   let @xmath540 or @xmath582 .",
    "then the loop  ( [ eq : lp4 ] ) terminates if @xmath510 , otherwise it does not terminate .",
    "3 .   let @xmath552 or @xmath583 .",
    "then the loop  ( [ eq : lp4 ] ) terminates if @xmath515 , otherwise it does not terminate .",
    "4 .   let @xmath561 or @xmath584 .",
    "then the loop  ( [ eq : lp4 ] ) terminates if @xmath534 , otherwise it does not terminate .",
    "exploitation of the full power of loop construct in quantum computation requires a deep understanding of the computational mechanism of quantum loop programs . in this paper , we introduced a general scheme of quantum loop programs , the behaviors of quantum loops are carefully analyzed , including termination , almost termination , and sensitivity , and a matrix - summation representation of the function computed by a quantum loop is found .",
    "this paper is merely an initial step toward a thorough understanding of quantum loop programs , and many important problems remain open .",
    "first , the bodies of quantum loops that we considered are unitary transformations .",
    "if a quantum loop is allowed to be embedded into another quantum loop , then as was observed in section 3 , the body of the latter loop is not a unitary operator but a super - operator in general .",
    "therefore , it is an interesting topic for further studies to find conditions for termination and almost termination of quantum loops in which the loop bodies are super - operators .",
    "second , we demonstrated the expressive power of quantum loops by presenting a loop description of quantum walks .",
    "it would be very interesting to find more computational problems that can not be expressed or solved without quantum loops .",
    "in general , the study of loop programs is a very important area of computer programming methodology .",
    "reconsideration of some fundamental problems from this area , say loop invariants and proof rules , in the quantum setting is a great challenge .",
    "the authors would like to thank mr .",
    "zhengfeng ji who suggested to describe quantum walks as quantum loop programs .",
    "the first draft of this paper was prepared when the first author was visiting center of logic and computation , department of mathematics , instituto superior tcnico , technical university of lisboa , portugal .",
    "he is very grateful to professors amlcar sernadas , cristina sernadas and paulo mateus for their stimulating discussions and for providing the excellent working environment .",
    "altenkirch , t. and grattage , j. a functional quantum programming language , in : _ proceedings of the 20th annual ieee symposium on logic in computer science ( lics ) _ , ieee computer society , 2005 . also arxiv : quant - ph/0409065 .",
    "lalire , m. and jorrand , p. a process algebraic approach to concurrent and distributed quantum computation : operational semantics , in : _ proceedings of the 2nd international workshop on quantum programming languages _",
    ", july 12 - 13 , 2004 , turku , finland .",
    "selinger , p. a brief survey of quantum programming languages , in : _ proceedings of the 7th international symposium on functional and logic programming , nara , japan _ , lncs 2998 ,",
    "pages 1 - 6 , springer , berlin , 2004 .",
    "shor , p. w. algorithms for quantum computation : discrete logarithms and factoring , in : _ proceedings ,",
    "35th annual symposium on foundations of computer science _",
    ", pages 124 - 134 , ieee press , los alamitos , ca , 1994 ."
  ],
  "abstract_text": [
    "<S> loop is a powerful program construct in classical computation , but its power is still not exploited fully in quantum computation . </S>",
    "<S> the exploitation of such power definitely requires a deep understanding of the mechanism of quantum loop programs . in this paper </S>",
    "<S> , we introduce a general scheme of quantum loops and describe its computational process . </S>",
    "<S> the notions of termination and almost termination are proposed for quantum loops , and the function computed by a quantum loop is defined . to show their expressive power , </S>",
    "<S> quantum loops are applied in describing quantum walks . </S>",
    "<S> necessary and sufficient conditions for termination and almost termination of a general quantum loop on any mixed input state are presented . </S>",
    "<S> a quantum loop is said to be ( almost ) terminating if it ( almost ) terminates on any input state . </S>",
    "<S> we show that a quantum loop is almost terminating if and only if it is uniformly almost terminating . </S>",
    "<S> it is observed that a small disturbance either on the unitary transformation in the loop body or on the measurement in the loop guard can make any quantum loop ( almost ) terminating . </S>",
    "<S> moreover , a representation of the function computed by a quantum loop is given in terms of finite summations of matrices . </S>",
    "<S> to illustrate the notions and results obtained in this paper , two simplest classes of quantum loop programs , one qubit quantum loops , and two qubit quantum loops defined by controlled gates , are carefully examined . </S>"
  ]
}