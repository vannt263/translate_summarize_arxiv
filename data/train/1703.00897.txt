{
  "article_text": [
    "checkpoint - restart is now a mature technology with a variety of robust packages  @xcite .",
    "this work concentrates on the dmtcp ( distributed multithreaded checkpointing ) package and its sophisticated plugin model that enables process virtualization  @xcite .",
    "this plugin model has been used recently to demonstrate checkpointing of 32,752 mpi processes on a supercomputer at tacc ( texas advanced computing center )  @xcite .",
    "dmtcp itself is free and open source .",
    "the dmtcp publications page  @xcite lists approximately 50  refereed publications by external groups that have used dmtcp in their work .",
    "this work concentrates on the recent advances in the dmtcp programming model that were motivated by work with intel corporation .",
    "while intel works with multiple vendors of hardware emulators , this work reflects the three - way collaboration between the dmtcp team , intel , and mentor graphics , a vendor of hardware emulators for eda .",
    "further information specific to eda ( electronic design automation ) is contained in  @xcite . in particular ,",
    "the ability to save the state of a simulation _ including the state of a back - end hardware emulator _ is a key to using checkpoint - restart in eda .    for background on how dmtcp is used generally at intel ,",
    "see  @xcite .",
    "the focuses of the ongoing work at intel is best described by their statement of future work`` within intel it , we will focus on the development and enhancement of the dmtcp technology for use with graphical eda tools , with strong network dependencies .",
    "@xmath0 there is also additional engagement with third - party vendors to include native dmtcp support in their tools , as well as engagement with super - computing development teams on enabling dmtcp for the xeon phi family of products . ''",
a hardware emulator may entail a thousand - fold slowdown , as compared to direct execution in silicon .",
    "there are two natural use cases of checkpointing in the context of eda . in both cases ,",
    "the natural strategy is to run until reaching the region of logic of interest . then checkpoint .",
    "later , one can repeatedly restart and test the logic , without worrying about the long initialization times under a hardware emulator .",
    "restarting under dmtcp is extremely fast , especially when the fast - restart flag is used that takes advantage of mmap ( ) to load pages into memory on - demand at runtime ( after the initial restart ) .",
    "the two use cases follow .",
    "run until reaching the logic to be tested ; then repeatedly restart and follow different logic branches ; and    run until reaching the logic to be tested ; then repeatedly restart , inject faults in the emulated ( or simulated ) silicon model and run along a pre - determined logic branch to determine the level of fault tolerance for that silicon design .    for this work ,",
    "the second case is of greater interest .",
    "this requires running arbitrary code either immediately at the point of restart by injecting faults in the logic design , or by interposing on later logic functions of the simulator / emulator so as to inject transient faults .",
    "the first use case above has been extensively studied using dmtcp in domains as varied as architecture simulation  @xcite , formal verification of embedded control systems  @xcite , network simulation  @xcite , and software model checking  @xcite .",
    "while the two use cases are closely related , this work highlights the second use case , by including the possibility of interposing at runtime .",
    "section  [ sec : processvirtualization ] presents the tools for such interposition , including the creation of global barriers at an arbitrary point in the program .",
    "section  [ sec : casestudies ] presents three particular extensions of checkpointing that were added to the dmtcp plugin model specifically motivated by the concerns observed in our general collaboration on eda .",
    "the dmtcp plugin model is critical in this latter application .",
    "one must stop a computation at a pre - defined location in the simulation , save additional state information ( such as the state of a hardware emulator being used  @xcite ) , and then inject additional code ( such as fault injection ) at restart time .",
    "a contribution of the dmtcp plugin model is the ability to virtualize multiple aspects of the computation .",
    "these include : pathnames ( for example , the subdirectory corresponding to the current `` run slot '' of the emulator ) ; environment variables ( for example , modification of the display environment variable , or other environment variables intrinsic to the running of the simulation ) ; interposition of the simulation by a third - party plugin ( for example , for purposes of measuring timings since restart at multiple levels of granularity , or programmatically creating additional checkpoints for analysis of interesting states leading to logic errors ) ; and third - party programmable barriers across all processes ( enabling the acceleration of simulations through the use of parallel processes and even distributed processes within a single computation ) .",
    "the dmtcp plugin model is an example of _ process virtualization _ : virtualization of external abstractions from within a process .",
    "it is argued here that the dmtcp plugin model sets it apart from other checkpointing approaches . to this end , a brief survey of existing checkpointing approaches and process virtualization is provided at the end .    in the rest of this paper , section  [ sec : processvirtualization ]",
    "motivates the need for a model of process virtualization with a simple example concerning process ids .",
    "it also reviews the dmtcp plugin model .",
    "section  [ sec : casestudies ] presents a series of micro - case studies in which dmtcp was extended to support the applications at intel , along with third - party dmtcp plugins developed by mentor graphics for use by intel and other customers ..",
    "section  [ sec : relatedwork ] the provides a survey of dmtcp and some other related approaches to checkpointing and process virtualization .",
    "section  [ sec : conclusion ] then presents the conclusions .",
    "application - specific checkpointing and system - level transparent checkpointing are two well - known options for checkpointing .",
    "unfortunately , neither one fits the requirements for the proposed use case for simulating fault injection in silicon logic .",
    "application - specific checkpointing is error - prone and difficult to maintain .",
    "system - level transparent checkpointing generally does not provide enough control at runtime to dynamically adjust the type of fault injection .",
    "in particular , it is often necessary to capture control of the target application dynamically at runtime in order to inject faults .",
    "here we show how that can be incorporated in a modular dmtcp plugin , rather than incorporated directly into the simulator / emulator .    for a more thorough introduction to the dmtcp plugin model ,",
    "see either  @xcite or the dmtcp documentation  @xcite .",
    "this section highlights those aspects most likely to assist in adding fault injection through a dmtcp plugin .",
    "the primary features of the model of interest for fault injection are :    1 .",
    "interposition on function / library calls , and their use in virtualization ; 2 .",
    "programmatically defined barriers across all processes on a computer ; and 3 .",
    "programmatically defined choices of when to checkpoint and when to avoid checkpointing .",
    "figure  [ fig : pid - virt ] succintly describes the philosophy of process virtualization .",
    "some invariant ( in this case the pid ( process  i d ) of a process may have a different name prior to checkpoint and after restart .",
    "a virtualized process will interact only with virtual process ids in the base code .",
    "a dmtcp plugin retains a translation table between the virtualized pid known to the base code and the real pid known to the kernel .",
    "since the base code and the kernel interact primarily through system calls , the dmtcp plugin defines a wrapper function around that system call .",
    "the wrapper function translates between virtual and real pids both for arguments to the system call and for the return value .",
    "this is illustrated both in figure  [ fig : pid - virt ] and in the example code of listing  [ lst : pidwrapperexample ] .",
    ".... wrapper int kill(pid_t pid , int sig ) {    disable_ckpt ( ) ;    real_pid = virt_to_real(pid ) ;    int ret = real_@@kill(real_pid , sig ) ;    enable_ckpt ( ) ;    return ret ; } ....    additionally , pid s may be passed as part of the proc filesystem , and through other limited means . to solve this , dmtcp implements virtualization of filenames as well as pid names , and",
    "so the `` open '' system call will also be interposed upon to detect names such as ` /proc",
    "/ pid / maps ` .    in this way",
    ", a collection of wrapper functions can be collected together within a dmtcp plugin library .",
    "such a library implements a virtualization layer .",
    "the elf library standard implements a library search order such that symbols are searched in order as follows :    executable @xmath1 lib1 @xmath1 lib2 ... libc @xmath1 kernel    where the symbol is finally replaced by a direct kernel call .",
    "this sequence can also be viewed as a sequence of layers , consistent with the common operating system implementation through layers .",
    "a dmtcp plugin for pids then presents a virtualization layer in which all higher layers see only virtual pids , and all lower layers see only real pids .",
    "this is analogous to an operating system design in which a higher layer sees the disk as a filesystem , and a lower layer sees the disk as a collection of disk blocks . in a similar way",
    ", dmtcp provides layers to virtualize filenames , environment variables and myriad other names .    in this way",
    ", an end user can implement a fault injection plugin layer such that all code below that layer sees injected faults , while higher layers do not see the injected faults .",
    "additionally , such a layer can be instrumented to gather information such as the cumulative number of faults .",
    "dmtcp also provides an api for the application or a plugin to either request a checkpoint or to avoid a checkpoint . upon checkpoint ,",
    "each plugin is notified of a checkpoint barrier , and similarly upon restart .",
    "thus , it is feasible to create successive checkpoints available for restart or available as a snaphot for later forensics on the cause of a later error .",
    "optimizations such as forked checkpointing ( fork a child and continue in the parent ) are available in order to take advantage of the kernel s copy - on - write in order to make checkpointing / snapshotting extremely fast .",
    "checkpointing in a distributed application context requires coordination between multiple processes at different virtualization layers .",
    "the use of programmable barriers enables this coordination .",
    "in addition to the checkpoint and restart events , each plugin ( or virtualization layer ) can define its own set barriers and a callback to execute at a barrier .",
    "a centralized dmtcp coordinator forces the application processes to execute the barriers in sequence .",
    "further , a hardware resource , for example , the interface to a hardware emulator , might be shared among multiple processes that share parent - child relationships . to get a semantically equivalent state on restart",
    ", the barriers can be used to elect a leader to save and restore the connection to the hardware emulator on restart .",
    "this section describes three specific real - world use cases where dmtcp was extended to support hardware emulation and simulation software .",
    "the examples are motivated by our work with various hardware and eda tool vendors .",
    "gui - based simulation software presents a unique challenge in checkpointing .",
    "the front - end software communicates with an x server via a socket .",
    "the x server runs in a privileged mode and outside of checkpoint control .",
    "while the connection could be blacklisted for the checkpointing , application s gui context and state is part of the x server and can not be checkpointed .",
    "the context does not exist at restart time and needs to be restored .",
    "dmtcp was extended to transparently support checkpointing of vnc  @xcite and xpra  @xcite .",
    "the two tools allow x command forwarding to a local x server that can be run under checkpoint control .",
    "@xcite presents an alternate record - prune - replay based approach using dmtcp to checkpoint gui - based applications .",
    "authentication and license services is an important issue for protecting the intellectual property of all the parties . often , the authentication protocols and software are proprietary and specific to a vendor .",
    "further , the licensing services are not run under checkpoint control , which makes it difficult to get a `` complete '' checkpoint of the software .",
    "extensions were added to dmtcp to allow a vendor to hook into the checkpoint and restart events and mark certain connections as `` external '' to the computation . at checkpoint time , the connections marked external are ignored by dmtcp and instead the responsibility of restoring these connections is delegated to the vendor - specific extension .",
    "the vendor - specific plugin also allows the application to check back with the licensing service at restart time in order to not violate a licensing agreement that restricts the number of simultaneous `` seats '' .",
    "the ability to migrate a process among the available resources is critical for efficient utilization of hardware emulator resources .",
    "however , the environment variables , the file paths , and the files that are saved as part of a checkpoint image make such migrations challenging",
    ". we added dmtcp extensions ( plugins ) to virtualize the environment and the file paths .",
    "this allows a process to be restarted on a different system by changing the values and the paths .",
    "another extension that we added to dmtcp allows a user to explicitly control the checkpointing of files used by their application at the granularity of a single file .",
    "hardware emulators communicate with the host software via high - speed interfaces .",
    "any in - flight transactions at checkpoint time can result in the data being lost and inconsistent state on restart .",
    "thus , it is important to bring the system to a quiescent state and drain the in - flight data on the buses before saving the state .",
    "further , checkpointing while the software is in a critical state ( like holding a lock on a bus ) can lead to complications on restart . to help mitigate such issues ,",
    "dmtcp was extended to allow fine - grained programmatic control over checkpointing .",
    "this enables the hardware / eda tool vendor to tailor the checkpointing for their specific requirements .",
    "in particular , it allows a user to invoke checkpointing from within their code , disable checkpointing for critical sections , or delay the resuming of user threads until the system reaches a well - behaved state .",
    "the software toolchain used for simulation and emulation is often put together by integrating various third - party components .",
    "the components may be closed - source and may use proprietary protocols for interfacing with each other and the system .",
    "for example , many software toolchains rely on legacy 32-bit code that s difficult to port to 64-bits , and so , support for mixed 32-/64-  bit processes was an important consideration .",
    "checkpointing while holding locks was another interesting issue .",
    "while the locks and their states are a part of the user - space memory ( and hence , a part of the checkpoint image ) , an application can also choose to use an error - checking lock that disallows unlocking by a different thread than the one that acquired it .",
    "on restart , when new thread ids would be assigned by the system , the locks would become invalid and the unlock call would fail .",
    "we extended dmtcp by adding wrapper functions for lock acquisition and release functions to keep track of the state of locks . at restart time , a lock s state is patched with the newer thread ids .    more generally , the problem described above is about the state that s preserved when a resource is allocated at checkpoint time and needs to be deallocated at restart time .",
    "while the restarted process inherits its state from the checkpoint image , its environment ( thread ids , in the above case ) might have changed on restart .",
    "an application author with domain expertise can extend the dmtcp checkpointing framework to recognize and virtualize these resources .",
    "the state could be a part of the locks that are acquired by a custom thread - safe malloc library , or the guard regions created by a library to guard against buffer overflows , or the libraries that are loaded temporarily .",
    "high performance computing ( hpc ) is the traditional domain in which checkpoint - restart is heavily used .",
    "it is used for the sake of fault tolerance during a long computation , for example of days . for a survey of checkpoint - restart implementations in the context of high performance computing ,",
    "see egwutuoha  @xcite . in the context of hpc , dmtcp and blcr  @xcite",
    "are the most widely used examples of transparent , system - level checkpoint - restart parallel computing .",
    "( a transparent checkpointing package is one that does not modify the target application . )",
    "dmtcp ( distributed multithreaded checkpointing ) is a purely user - space implementation .",
    "in addition to being transparent , it also does not require any kernel modules and its installation and execution does not require root privilege or the use of special linux capabilities .",
    "it achieves its robustness by trying to stay as close to the posix standard as possible in its api with the linux kernel .    the first version of dmtcp was later described in  @xcite .",
    "that version did not provide the plugin model for process virtualization .",
    "for example , virtualization of network addresses did not exist , as well as a series of other constructs , such as timers , session ids , system  v shared memory , and other features .",
    "these features were added later due to the requirements of high performance computing . eventually , the current procedure for virtualizing process ids ( see section  [ sec : pidvirtexample ] was developed . to the best of our knowledge ,",
    "dmtcp is unique in its approach toward process i d virtualization .",
    "eventually , the plugin model was developed , initially for transparent support of the infiniband network fabric  @xcite .",
    "the current extension of that plugin model is described in  @xcite .    still later , the requirements for robust support of eda in collaboration with intel led to the development of reduction of runtime overhead graphic support using xpra , path virtualization ( for virtualization of the runtime slot and associated directory of a run using a hardware emulator , including different mount points on the restart computer ) , virtualization of environment variables including the x - windows display variable ( for similar reasons ) , robustness across a variety of older and newer linux kernels and gnu libc versions , mixed multi - architecture ( 32- and 64-bit ) processes within a single computation , low - overhead support for malloc - intensive programs , re - connection of a socket to a license server on restart , and whitelist and blacklist of special temporary files that many or may not be present on the restart computer .",
    "blcr supports only single - node standalone checkpointing .",
    "in particular , it does not support checkpointing of tcp sockets , infiniband connections , open files , or sysv shared memory objects .",
    "blcr is often used in hpc clusters , where one has full control over the choice of linux kernel and other systems software .",
    "typically , a linux kernel is chosen that is compatible with blcr , a blcr kernel module is installed , and when it is time to checkpoint , it is the responsibility of an mpi checkpoint - restart service to temporarily disconnected the mpi network layer , then checkpoint locally on each node , and finally re - connect the mpi network layer .",
    "note that blcr is limited in what features it supports , notably including a lack of support for sockets and system  v shared memory . quoting from the blcr user s guide`` however , certain applications are not supported because they use resources not restored by blcr : @xmath0 applications which use sockets ( regardless of address family ) .",
    "@xmath0 ; applications which use character or block devices ( e.g. serial ports or raw partitions ) .",
    "@xmath0 ; applications which use system  v ipc mechanisms including shared memory , semaphores and message queues . ''",
    "@xcitethe lack of blcr support for shared memory also prevents its use in openshmem  @xcite .      zapc and cruz represent two other checkpointing approaches that are not currently widely used .",
    "zapc  @xcite and cruz  @xcite were earlier efforts to support distributed checkpointing , by modifying the kernel to inserting hooks into the network stack using netfilter to translate source and destination addresses .",
    "zapc and cruz are no longer in active use .",
    "they were designed to virtualize primarily two resources : process ids and ip network addresses .",
    "they did not support ssh , infiniband , system  v ipc , or posix timers , all of which are commonly used in modern software implementation .",
    "criu  @xcite leverages linux namespaces for transparently checkpointing on a single host ( often within a linux container ) , but lacks support for distributed computations . instead of directly virtualizing the process",
    "i d , criu relies on extending the kernel api through a much larger proc filesystem and a greatly extended `` prctl '' system call .",
    "for example , the `` pr_set_mm '' has 13  additional parameters that can be set ( e.g. , beginning end end of text , data , and stack ) . in another example",
    ", criu relies on the `` config_checkpoint_restore '' kernel configuration to allow a process to directly modify the kernel s choice of pid for the next process to be created  @xcite . in a general context",
    ", there is a danger that the desired pid to be restored may already be occupied by another process , but criu is also often used within a container where this restriction can be avoided .    finally , criu has a more specialized plugin facility  @xcite .",
    "some examples are : ability to save and restore the contents of particular files ; and the means to save and restore pointers to external sockets , external links , and mount points that are outside the filesystem namespace of an lxc ( linux container ) .",
    "recall that criu does not try to support distributed computations .",
    "perhaps it is for this reason that criu did not have the same pressure to develop a broader plugin system capable of supporting generic external devices such as hardware emulators .",
    "the term _ process virtualization _ was used in  @xcite . that work discusses kernel - level support for such process virtualization , while the current work emphasizes an entirely user - space approach within unprivileged processes .",
    "related to process virtualization is the concept of a library  os , exemplified by the drawbridge library  os  @xcite and exokernel  @xcite .",
    "however , such systems are concerned with providing _ extended or modified _ system services that are not natively present in the underlying operating system kernel .",
    "both process - level virtualization and the library  os approach employ a user - space approach ( ideally with no modification to the application executable , and no additional privileges required ) .",
    "however , a library  os is concerned with providing _ extended or modified _ system services that are not natively present in the underlying operating system kernel .",
    "process virtualization is concerned with providing a semantically equivalent system object using the _ same _ system service .",
    "this need arises when restarting from a checkpoint image , or when carrying out a live process migration from one computer to another .",
    "the target computer host is assumed to provide the same system services as were available on the original host .",
    "although process - level virtualization and a library  os both operate in user space without special privileges , the goal of a library  os is quite different .",
    "a library  os modifies or extends the system services provided by the operating system kernel .",
    "for example , drawbridge  @xcite presents a windows  7 personality , so as to run windows  7 applications under newer versions of windows .",
    "similarly , the original exokernel operating system  @xcite provided additional operating system services beyond those of a small underlying operating system kernel , and this was argued to often be more efficient that a larger kernel directly providing those services .    -12pt",
    "in order to develop a successful plugin model for checkpointing in the context of eda , one required modularity that enabled the dmtcp team , intel , and mentor graphics to each write their own modular code .",
    "further , the intel and mentor graphics dmtcp - based plugins and other code were of necessity proprietary .",
    "this work has shown how the dmtcp plugin model can be used to provide a flexible model enabling full cooperation , while avoiding the more extreme roadmaps of either fully application - specific code or transparent , system - level checkpointing with no knowledge of the proprietary aspects of the mentor graphics hardware emulator .",
    "j.  ansel , k.  arya , and g.  cooperman , `` dmtcp : transparent checkpointing for cluster computations and the desktop , '' in _ ieee int .",
    "symp . on parallel and",
    "distributed processing ( ipdps)_.1em plus 0.5em minus 0.4em ieee press , 2009 , pp .",
    "112 .",
    "k.  arya , r.  garg , a.  y. polyakov , and g.  cooperman , `` design and implementation for checkpointing of distributed resources using process - level virtualization , '' in _ ieee int .",
    "conf . on cluster computing ( cluster16)_.1em plus 0.5em minus 0.4emieee press , 2016 , pp .",
    "402412 .",
    "j.  cao , k.  arya , r.  garg , s.  matott , d.  k. panda , h.  subramoni , j.  vienne , and g.  cooperman , `` system - level scalable checkpoint - restart for petascale computing , '' in _",
    "22nd ieee int . conf . on parallel and distributed systems ( icpads16)_.1em plus 0.5em minus 0.4emieee press , 2016 , also , technical report available as : arxiv preprint arxiv:1607.07995 .",
    "g.  cooperman , j.  evans , a.  garg , r.  garg , n.  a. rosenberg , and k.  suresh , `` transparently checkpointing software test benches to improve productivity of soc verification in an emulation environment , '' 2017 , ( submitted ) .",
    "i.  ljubuncic , r.  giri , a.  rozenfeld , and a.  goldis , `` be kind , rewind  checkpoint & restore capability for improving reliability of large - scale semiconductor design , '' in _ 2014 ieee high performance extreme computing conference ( hpec-2014 ) _ , 2014 .",
    "[ online ] .",
    "available : http://www.ieee-hpec.org/2014/cd/index_htm_files/finalpapers/34.pdf    a.  shina , k.  ootsu , t.  ohkawa , t.  yokota , and t.  baba , `` proposal of incremental software simulation for reduction of evaluation time , '' in _ 2012 third international conference on networking and computing ( icnc ) _ , dec 2012 , pp . 311315 .",
    "s.  resmerita and w.  pree , `` verification of embedded control systems by simulation and program execution control , '' in _ 2012 american control conference ( acc)_.1em plus 0.5em minus 0.4emieee , 2012 , pp .",
    "35813586 .",
    "w.  leungwattanakit , c.  artho , m.  hagiya , y.  tanabe , m.  yamamoto , and k.  takahashi , `` modular software model checking for distributed systems , '' _ ieee trans . on software engineering _ ,",
    "40 , no .  5 ,",
    "483501 , may 2014 .",
    "j.  cao , g.  kerr , k.  arya , and g.  cooperman , `` transparent checkpoint - restart over infiniband , '' in _ proc . of the 23rd int",
    ". symp . on high - performance parallel and",
    "distributed computing_.1em plus 0.5em minus 0.4emacm press , 2014 , pp .",
    "1324 .",
    "g.  janakiraman , j.  santos , d.  subhraveti , and y.  turner , `` cruz : application - transparent distributed checkpoint - restart on standard operating systems , '' in _ international conference on dependable systems and networks , 2005 .",
    "dsn 2005 . proceedings _ , jun .",
    "2005 , pp . 260269 .",
    "g.  vallee , r.  lottiaux , d.  margery , and c.  morin , `` ghost process : a sound basis to implement process duplication , migration and checkpoint / restart in linux clusters , '' in _ proc .",
    "of the the 4th int .",
    "symp . on parallel and",
    "distributed computing _ , ser .",
    "ispdc 05 , 2005 , pp .",
    "97104 .",
    "d.  e. porter , s.  boyd - wickizer , j.  howell , r.  olinsky , and g.  c. hunt , `` rethinking the library os from the top down , '' in _ proc . of the sixteenth international conference on architectural support for programming languages and operating systems",
    "asplos xvi.1em plus 0.5em minus 0.4emnew york , ny , usa : acm , 2011 , pp . 291304 .",
    "d.  r. engler , m.  f. kaashoek , and j.  otoole , jr .",
    ", `` exokernel : an operating system architecture for application - level resource management , '' in _ proc . of 15th acm symp .",
    "on operating systems principles _ , ser .",
    "sosp 95.1em plus 0.5em minus 0.4emacm , 1995 , pp . 251266 ."
  ],
  "abstract_text": [
    "<S> checkpoint - restart is now a mature technology . </S>",
    "<S> it allows a user to save and later restore the state of a running process . </S>",
    "<S> the new plugin model for the upcoming version  3.0 of dmtcp ( distributed multithreaded checkpointing ) is described here . </S>",
    "<S> this plugin model allows a target application to disconnect from the hardware emulator at checkpoint time and then re - connect to a possibly different hardware emulator at the time of restart . </S>",
    "<S> the dmtcp plugin model is important in allowing three distinct parties to seamlessly inter - operate . </S>",
    "<S> the three parties are : the eda designer , who is concerned with formal verification of a circuit design ; the dmtcp developers , who are concerned with providing transparent checkpointing during the circuit emulation ; and the hardware emulator vendor , who provides a plugin library that responds to checkpoint , restart , and other events .    </S>",
    "<S> the new plugin model is an example of process - level virtualization : virtualization of external abstractions from within a process . </S>",
    "<S> this capability is motivated by scenarios for testing circuit models with the help of a hardware emulator . </S>",
    "<S> the plugin model enables a three - way collaboration : allowing a circuit designer and emulator vendor to each contribute separate proprietary plugins while sharing an open source software framework from the dmtcp developers . </S>",
    "<S> this provides a more flexible platform , where different fault injection models based on plugins can be designed within the dmtcp checkpointing framework . </S>",
    "<S> after initialization , one restarts from a checkpointed state under the control of the desired plugin . </S>",
    "<S> this restart saves the time spent in simulating the initialization phase , while enabling fault injection exactly at the region of interest . upon restart </S>",
    "<S> , one can inject faults or otherwise modify the remainder of the simulation . </S>",
    "<S> the work concludes with a brief survey of the existing approaches to checkpointing and to process - level virtualization . </S>"
  ]
}