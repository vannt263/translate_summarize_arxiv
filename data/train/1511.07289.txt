{
  "article_text": [
    "currently the most popular activation function for neural networks is the rectified linear unit ( relu ) , which was first proposed for restricted boltzmann machines @xcite and then successfully used for neural networks @xcite .",
    "the relu activation function is the identity for positive arguments and zero otherwise .",
    "besides producing sparse codes , the main advantage of relus is that they alleviate the vanishing gradient problem @xcite since the derivative of 1 for positive values is not contractive @xcite .",
    "however relus are non - negative and , therefore , have a mean activation larger than zero .",
    "units that have a non - zero mean activation act as bias for the next layer .",
    "if such units do not cancel each other out , learning causes a _ bias shift _ for units in next layer .",
    "the more the units are correlated , the higher their bias shift .",
    "we will see that fisher optimal learning , i.e. , the natural gradient @xcite , would correct for the bias shift by adjusting the weight updates . thus",
    ", less bias shift brings the standard gradient closer to the natural gradient and speeds up learning .",
    "we aim at activation functions that push activation means closer to zero to decrease the bias shift effect",
    ".    centering the activations at zero has been proposed in order to keep the off - diagonal entries of the fisher information matrix small @xcite . for neural network",
    "it is known that centering the activations speeds up learning @xcite .",
    "`` batch normalization '' also centers activations with the goal to counter the internal covariate shift @xcite .",
    "also the projected natural gradient descent algorithm ( prong ) centers the activations by implicitly whitening them @xcite .",
    "an alternative to centering is to push the mean activation toward zero by an appropriate activation function .",
    "therefore @xmath0 has been preferred over logistic functions @xcite .",
    "recently `` leaky relus '' ( lrelus ) that replace the negative part of the relu with a linear function have been shown to be superior to relus @xcite .",
    "parametric rectified linear units ( prelus ) generalize lrelus by learning the slope of the negative part which yielded improved learning behavior on large image benchmark data sets @xcite .",
    "another variant are randomized leaky rectified linear units ( rrelus ) which randomly sample the slope of the negative part which raised the performance on image benchmark datasets and convolutional networks @xcite .",
    "in contrast to relus , activation functions like lrelus , prelus , and rrelus do not ensure a noise - robust deactivation state .",
    "we propose an activation function that has negative values to allow for mean activations close to zero , but which saturates to a negative value with smaller arguments .",
    "the saturation decreases the variation of the units if deactivated , so the precise deactivation argument is less relevant .",
    "such an activation function can code the degree of presence of particular phenomena in the input , but does not quantitatively model the degree of their absence .",
    "therefore , such an activation function is more robust to noise .",
    "consequently , dependencies between coding units are much easier to model and much easier to interpret since only activated code units carry much information .",
    "furthermore , distinct concepts are much less likely to interfere with such activation functions since the deactivation state is non - informative , i.e.  variance decreasing .",
    "to derive and analyze the bias shift effect mentioned in the introduction , we utilize the natural gradient .",
    "the natural gradient corrects the gradient direction with the inverse fisher information matrix and , thereby , enables fisher optimal learning , which ensures the steepest descent in the riemannian parameter manifold and fisher efficiency for online learning @xcite . the recently introduced hessian - free optimization technique @xcite and the krylov subspace descent methods @xcite",
    "use an extended gauss - newton approximation of the hessian , therefore they can be interpreted as versions of natural gradient descent @xcite . since for neural networks the fisher information matrix is typically too expensive to compute , different approximations of the natural gradient have been proposed .",
    "topmoumoute online natural gradient algorithm ( tonga ) @xcite uses a low - rank approximation of natural gradient descent .",
    "factorized natural gradient ( fang ) @xcite estimates the natural gradient via an approximation of the fisher information matrix by a gaussian graphical model .",
    "the fisher information matrix can be approximated by a block - diagonal matrix , where unit or quasi - diagonal natural gradients are used @xcite .",
    "unit natural gradients or `` unitwise fisher s scoring '' @xcite are based on natural gradients for perceptrons @xcite .",
    "we will base our analysis on the unit natural gradient .",
    "we assume a parameterized probabilistic model @xmath1 with parameter vector @xmath2 and data @xmath3 .",
    "the training data are @xmath4 with @xmath5 , where @xmath6 is the input for example @xmath7 and @xmath8 is its label .",
    "@xmath9 is the loss of example @xmath10 using model @xmath11 .",
    "the average loss on the training data @xmath12 is the empirical risk @xmath13 .",
    "gradient descent updates the weight vector @xmath2 by @xmath14 where @xmath15 is the learning rate .",
    "the _ natural gradient _ is the inverse fisher information matrix @xmath16 multiplied by the gradient of the empirical risk : @xmath17 . for a multi - layer perceptron @xmath18 is the unit activation vector and @xmath19 is the bias unit activation .",
    "we consider the ingoing weights to unit @xmath20 , therefore we drop the index @xmath20 : @xmath21 for the weight from unit @xmath22 to unit @xmath20 , @xmath23 for the activation , and @xmath24 for the bias weight of unit @xmath20 .",
    "the activation function @xmath25 maps the net input @xmath26 of unit @xmath20 to its activation @xmath27 . for computing the fisher information matrix , the derivative of the log - output probability @xmath28 is required .",
    "therefore we define the @xmath29 at unit @xmath20 as @xmath30 , which can be computed via backpropagation , but using the log - output probability instead of the conventional loss function .",
    "the derivative is @xmath31 .",
    "we restrict the fisher information matrix to weights leading to unit @xmath20 which is the _ unit fisher information matrix _ @xmath32 .",
    "@xmath32 captures only the interactions of weights to unit @xmath20 .",
    "consequently , the unit natural gradient only corrects the interactions of weights to unit @xmath20 , i.e.  considers the riemannian parameter manifold only in a subspace .",
    "the unit fisher information matrix is @xmath33_{kj } \\ = \\   { \\mathbf{\\mathrm{e}}}_{p({\\bm{z}};{\\bm{w } } ) } \\ !",
    "\\left (   \\frac{\\partial \\ln p({\\bm{z}};{\\bm{w } } ) } { \\partial w_{k } } \\ \\frac{\\partial \\ln p({\\bm{z}};{\\bm{w } } ) } { \\partial w_{j } } \\right )   \\ = \\ { \\mathbf{\\mathrm{e}}}_{p({\\bm{z}};{\\bm{w } } ) } ( \\delta^2 \\ a_k \\ a_j )   \\ .\\end{aligned}\\ ] ] weighting the activations by @xmath34 is equivalent to adjusting the probability of drawing inputs @xmath35 .",
    "inputs @xmath35 with large @xmath34 are drawn with higher probability . since @xmath36 , we can define a distribution @xmath37 : @xmath38 using @xmath37 , the entries of @xmath32 can be expressed as second moments : @xmath39_{kj } \\ & = \\ { \\mathbf{\\mathrm{e}}}_{p({\\bm{z } } ) } (    \\delta^2   \\ a_k \\ a_j ) \\ = \\   \\int   \\delta^2   \\ a_k \\ a_j \\ p({\\bm{z } } ) \\",
    "d{\\bm{z}}\\ = \\   { \\mathbf{\\mathrm{e}}}_{p({\\bm{z } } ) } ( \\delta^2 ) \\ { \\mathbf{\\mathrm{e}}}_{q({\\bm{z } } ) } ( a_k \\ a_j ) \\ .\\end{aligned}\\ ] ]    if the bias unit is @xmath19 with weight @xmath40 then the weight vector can be divided into a bias part @xmath40 and the rest @xmath2 : @xmath41 . for the row @xmath42_{0}$ ] that corresponds to the bias weight , we have : @xmath43 the next theorem  [ th : th1 ] gives the correction of the standard gradient by the unit natural gradient where the bias weight is treated separately ( see also @xcite ) .",
    "[ th : th1 ] the unit natural gradient corrects the weight update @xmath44 to a unit @xmath20 by following affine transformation of the gradient @xmath45 : @xmath46 where @xmath47_{\\neg 0,\\neg 0 } = { \\mathbf{\\mathrm{e}}}_{p({\\bm{z } } ) } ( \\delta^2 )   { \\mathbf{\\mathrm{e}}}_{q({\\bm{z}})}({\\bm{a}}{\\bm{a}}^t)$ ] is the unit fisher information matrix without row 0 and column 0 corresponding to the bias weight .",
    "the vector @xmath48_{0}$ ] is the zeroth column of @xmath32 corresponding to the bias weight , and the positive scalar @xmath49 is @xmath50 where @xmath18 is the vector of activations of units with weights to unit @xmath20 and @xmath51 .",
    "multiplying the inverse fisher matrix @xmath52 with the separated gradient @xmath53 gives the weight update @xmath44 : @xmath54 where @xmath55_{0 } \\quad , \\quad c   \\",
    "\\left[{\\bm{f}}({\\bm{w}})\\right]_{00 } \\quad , \\quad { \\bm{u}}\\ = \\ - \\   s \\ { \\bm{a}}^{-1 } \\",
    "{ \\bm{b}}\\quad , \\quad s \\ = \\ \\left ( c \\ - \\ { \\bm{b}}^t{\\bm{a}}^{-1 } { \\bm{b}}\\right)^{-1 } \\ .\\end{aligned}\\ ] ]    the previous formula is derived in lemma  [ th : lemma1 ] in the appendix .",
    "using @xmath56 in the update gives @xmath57 the right hand side is obtained by inserting @xmath58 in the left hand side update . since @xmath59 , @xmath60 , and @xmath61 , we obtain @xmath62 applying lemma  [ th : lemma2 ] in the appendix gives the formula for @xmath49 .    the _ bias shift _ ( mean shift ) of unit @xmath20",
    "is the change of unit @xmath20 s mean value due to the weight update .",
    "bias shifts of unit @xmath20 lead to oscillations and impede learning . see section  4.4 in @xcite for demonstrating this effect at the inputs and in @xcite for explaining this effect using the input covariance matrix . such bias shifts are mitigated or even prevented by the unit natural gradient .",
    "the _ bias shift correction _ of the unit natural gradient is the effect on the bias shift due to @xmath63 which captures the interaction between the bias unit and the incoming units . without bias shift correction ,",
    "i.e. , @xmath64 and @xmath65 , the weight updates are @xmath66 and @xmath67 .",
    "as only the activations depend on the input , the bias shift can be computed by multiplying the weight update by the mean of the activation vector @xmath18 .",
    "thus we obtain the bias shift @xmath68 .",
    "the bias shift strongly depends on the correlation of the incoming units which is captured by @xmath69 .",
    "next , theorem  [ th : th2 ] states that the bias shift correction by the unit natural gradient can be considered to correct the incoming mean @xmath70 proportional to @xmath71 toward zero .",
    "[ th : th2 ] the bias shift correction by the unit natural gradient is equivalent to an additive correction of the incoming mean by @xmath72 and a multiplicative correction of the bias unit by @xmath73 , where @xmath74    using @xmath75 , the bias shift is : @xmath76    the mean correction term , indicated by an underbrace in previous formula , is @xmath77 the expression eq",
    ".   for @xmath73 follows from lemma  [ th : lemma2 ] in the appendix .",
    "the bias unit correction term is @xmath78 .    in theorem",
    "[ th : th2 ] we can reformulate @xmath79 .",
    "therefore @xmath73 increases with the length of @xmath80 for given variances and covariances .",
    "consequently the bias shift correction through the unit natural gradient is governed by the length of @xmath80 .",
    "the bias shift correction is zero for @xmath81 since @xmath82 does not correct the bias unit multiplicatively . using eq .  , @xmath80 is split into an offset and an information containing term : @xmath83 in general , _ smaller positive @xmath70 lead to smaller positive @xmath80 , therefore to smaller corrections . _",
    "the reason is that in general the largest absolute components of @xmath84 are positive , since activated inputs will activate the unit @xmath20 which in turn will have large impact on the output .    to summarize ,",
    "the unit natural gradient corrects the bias shift of unit @xmath20 via the interactions of incoming units with the bias unit to ensure efficient learning .",
    "this correction is equivalent to shifting the mean activations of the incoming units toward zero and scaling up the bias unit . to reduce the undesired bias shift effect without the natural gradient , either the ( i ) activation of incoming units",
    "can be centered at zero or ( ii ) activation functions with negative values can be used .",
    "we introduce a new activation function with negative values while keeping the identity for positive arguments where it is not contradicting .",
    "the _ exponential linear unit _ ( elu ) with @xmath85 is @xmath86 the elu hyperparameter @xmath87 controls the value to which an elu saturates for negative net inputs ( see fig .  [ fig : activationfunction ] ) .",
    "elus diminish the vanishing gradient effect as rectified linear units ( relus ) and leaky relus ( lrelus ) do .",
    "the vanishing gradient problem is alleviated because the positive part of these functions is the identity , therefore their derivative is one and not contractive .",
    "in contrast , @xmath88 and sigmoid activation functions are contractive almost everywhere .    r0.45        in contrast to relus , elus have negative values which pushes the mean of the activations closer to zero .",
    "mean activations that are closer to zero enable faster learning as they bring the gradient closer to the natural gradient ( see theorem  [ th : th2 ] and text thereafter ) .",
    "elus saturate to a negative value when the argument gets smaller .",
    "saturation means a small derivative which decreases the variation and the information that is propagated to the next layer .",
    "therefore the representation is both noise - robust and low - complex @xcite .",
    "elus code the degree of presence of input concepts , while they neither quantify the degree of their absence nor distinguish the causes of their absence .",
    "this property of non - informative deactivation states is also present at relus and allowed to detect biclusters corresponding to biological modules in gene expression datasets @xcite and to identify toxicophores in toxicity prediction @xcite .",
    "the enabling features for these interpretations is that activation can be clearly distinguished from deactivation and that only active units carry relevant information and can crosstalk .",
    "in this section , we assess the performance of exponential linear units ( elus ) if used for unsupervised and supervised learning of deep autoencoders and deep convolutional networks .",
    "elus with @xmath89 are compared to ( i ) rectified linear units ( relus ) with activation @xmath90 , ( ii ) leaky relus ( lrelus ) with activation @xmath91 ( @xmath92 ) , and ( iii ) shifted relus ( srelus ) with activation @xmath93 .",
    "comparisons are done with and without batch normalization .",
    "the following benchmark datasets are used : ( i ) _ mnist _ ( gray images in 10 classes , 60k train and 10k test ) , ( ii ) _ cifar-10 _",
    "( color images in 10 classes , 50k train and 10k test ) , ( iii ) _ cifar-100 _",
    "( color images in 100 classes , 50k train and 10k test ) , and ( iv ) _ imagenet _ ( color images in 1,000 classes , 1.3 m train and 100k tests ) .        we first want to verify that elus keep the mean activations closer to zero than other units . fully connected deep neural networks with elus ( @xmath89 ) , relus , and lrelus ( @xmath94 )",
    "were trained on the mnist digit classification dataset while each hidden unit s activation was tracked .",
    "each network had eight hidden layers of 128 units each , and was trained for 300 epochs by stochastic gradient descent with learning rate @xmath95 and mini - batches of size 64 .",
    "the weights have been initialized according to @xcite . after each epoch we calculated the units average activations on a fixed subset of the training data .",
    "[ fig : mnistplots ] shows the median over all units along learning .",
    "elus stay have smaller median throughout the training process .",
    "the training error of elu networks decreases much more rapidly than for the other networks .",
    "section  [ sec : variancemean ] in the appendix compares the variance of median activation in relu and elu networks .",
    "the median varies much more in relu networks .",
    "this indicates that relu networks continuously try to correct the bias shift introduced by previous weight updates while this effect is much less prominent in elu networks .      to evaluate elu networks at unsupervised settings",
    ", we followed @xcite and @xcite and trained a deep autoencoder on the mnist dataset .",
    "the encoder part consisted of four fully connected hidden layers with sizes 1000 , 500 , 250 and 30 , respectively .",
    "the decoder part was symmetrical to the encoder . for learning we applied stochastic gradient descent with mini - batches of 64 samples for 500 epochs using the fixed learning rates ( @xmath96 ) .",
    "[ fig : mnistauto ] shows , that elus outperform the competing activation functions in terms of training / test set reconstruction error for all learning rates . as already noted by @xcite , higher learning rates seem to perform better .      in this subsection we show that elus indeed possess a superior learning behavior compared to other activation functions as postulated in section  [ sec : elu ] .",
    "furthermore we show that elu networks perform better than relu networks with batch normalization .",
    "we use as benchmark dataset cifar-100 and use a relatively simple convolutional neural network ( cnn ) architecture to keep the computational complexity reasonable for comparisons .",
    "+   +     +    the cnn for these cifar-100 experiments consists of 11 convolutional layers arranged in stacks of ( @xmath97 , [ 1\\times192\\times1 , 1\\times240\\times3 ] , [ 1\\times240\\times1 , 1\\times260\\times2 ] , [ 1\\times260\\times1,1\\times280\\times2 ] , [ 1\\times280\\times1,1\\times300\\times2 ] , [ 1\\times300\\times1 ] , [ 1\\times100\\times1]$ ] ) layers @xmath98 units @xmath98 receptive fields .",
    "2@xmath982 max - pooling with a stride of 2 was applied after each stack . for network regularization we used the following drop - out rate for the last layer of each stack ( @xmath99 ) .",
    "the @xmath100-weight decay regularization term was set to @xmath101 .",
    "the following learning rate schedule was applied ( @xmath102 , 35k-85k [ 0.005 ] , 85k-135k [ 0.0005 ] , 135k-165k [ 0.00005]$ ] ) ( iterations [ learning rate ] ) . for fair comparisons",
    ", we used this learning rate schedule for all networks . during previous experiments ,",
    "this schedule was optimized for relu networks , however as elus converge faster they would benefit from an adjusted schedule .",
    "the momentum term learning rate was fixed to 0.9 .",
    "the dataset was preprocessed as described in @xcite with global contrast normalization and zca whitening .",
    "additionally , the images were padded with four zero pixels at all borders .",
    "the model was trained on @xmath103 random crops with random horizontal flipping . besides that , we no further augmented the dataset during training .",
    "each network was run 10 times with different weight initialization . across networks with different activation functions the same run number had the same initial weights .",
    "mean test error results of networks with different activation functions are compared in fig .",
    "[ fig : rescifar100 ] , which also shows the standard deviation .",
    "elus yield on average a test error of 28.75(@xmath1040.24)% , while srelus , relus and lrelus yield 29.35(@xmath1040.29)% , 31.56(@xmath1040.37)% and 30.59(@xmath1040.29)% , respectively .",
    "elus achieve both lower training loss and lower test error than relus , lrelus , and srelus .",
    "both the elu training and test performance is significantly better than for other activation functions ( wilcoxon signed - rank test with @xmath105-value@xmath1060.001 ) .",
    "batch normalization improved relu and lrelu networks , but did not improve elu and srelu networks ( see fig .",
    "[ fig : rescifar100_bn ] ) .",
    "elu networks significantly outperform relu networks with batch normalization ( wilcoxon signed - rank test with @xmath105-value@xmath1060.001 ) .",
    "the following experiments should highlight the generalization capabilities of elu networks .",
    "the cnn architecture is more sophisticated than in the previous subsection and consists of 18 convolutional layers arranged in stacks of ( @xmath107 , [ 1\\times384\\times1 , 1\\times384\\times2,2\\times640\\times2 ] , [ 1\\times640\\times1,3\\times768\\times2 ] , [ 1\\times768\\times1,2\\times896\\times2 ] , [ 1\\times896\\times3,2\\times1024\\times2 ] , [ 1\\times1024\\times1,1\\times1152\\times2 ] , [ 1\\times1152\\times1 ] , [ 1\\times100\\times1]$ ] ) .",
    "initial drop - out rate , max - pooling after each stack , @xmath100-weight decay , momentum term , data preprocessing , padding , and cropping were as in previous section .",
    "the initial learning rate was set to 0.01 and decreased by a factor of 10 after 35k iterations .",
    "the mini - batch size was 100 .",
    "for the final 50k iterations fine - tuning we increased the drop - out rate for _ all _ layers in a stack to ( @xmath108 ) , thereafter increased the drop - out rate by a factor of 1.5 for 40k additional iterations .",
    "* 1>p8em*2>p11.5em*1>p4.25em * network & * cifar-10 ( test error % ) & * cifar-100 ( test error % ) & * augmented + alexnet & 18.04 & 45.80 & + dsn & 7.97 & 34.57 & @xmath109 + nin & 8.81 & 35.68 & @xmath109 + maxout & 9.38 & 38.57 & @xmath109 + all - cnn & 7.25 & 33.71 & @xmath109 + highway network & 7.60 & 32.24 & @xmath109 + fract .",
    "max - pooling & * 4.50 & 27.62 & @xmath109 + elu - network & 6.55 & * 24.28 & + * * * * * *    elu networks are compared to following recent successful cnn architectures : alexnet @xcite , dsn @xcite , nin @xcite , maxout @xcite , all - cnn @xcite , highway network @xcite and fractional max - pooling @xcite .",
    "the test error in percent misclassification are given in tab .",
    "[ tab : tab_res1 ] .",
    "elu - networks are the second best on cifar-10 with a test error of 6.55% but still they are among the top 10 best results reported for cifar-10 .",
    "elu networks performed best on cifar-100 with a test error of 24.28% .",
    "this is the best published result on cifar-100 , without even resorting to multi - view evaluation or model averaging .      finally , we evaluated elu - networks on the 1000-class imagenet dataset .",
    "it contains about 1.3 m training color images as well as additional 50k images and 100k images for validation and testing , respectively . for this task",
    ", we designed a 15 layer cnn , which was arranged in stacks of ( @xmath110 ) layers @xmath98 units @xmath98 receptive fields or fully - connected ( fc ) .",
    "2@xmath982 max - pooling with a stride of 2 was applied after each stack and spatial pyramid pooling ( spp ) with 3 levels before the first fc layer @xcite . for network regularization we set the @xmath100-weight decay term to @xmath101 and used 50% drop - out in the two penultimate fc layers .",
    "images were re - sized to 256@xmath98256 pixels and per - pixel mean subtracted . trained was on @xmath111 random crops with random horizontal flipping .",
    "besides that , we did not augment the dataset during training .",
    "[ fig : resimagenet ] shows the learning behavior of elu vs.  relu networks .",
    "panel ( b ) shows that elus start reducing the error earlier .",
    "the elu - network already reaches the 20% top-5 error after 160k iterations , while the relu network needs 200k iterations to reach the same error rate .",
    "the single - model performance was evaluated on the single center crop with no further augmentation and yielded a top-5 validation error below 10% .",
    "currently elu nets are 5% slower on imagenet than relu nets .",
    "the difference is small because activation functions generally have only minor influence on the overall training time @xcite . in terms of wall clock time ,",
    "elus require 12.15h vs.  relus with 11.48h for 10k iterations .",
    "we expect that elu implementations can be improved , e.g.  by faster exponential functions @xcite .",
    "we have introduced the _ exponential linear units _ ( elus ) for faster and more precise learning in deep neural networks .",
    "elus have negative values , which allows the network to push the mean activations closer to zero .",
    "therefore elus decrease the gap between the normal gradient and the unit natural gradient and , thereby speed up learning .",
    "we believe that this property is also the reason for the success of activation functions like lrelus and prelus and of batch normalization .",
    "in contrast to lrelus and prelus , elus have a clear saturation plateau in its negative regime , allowing them to learn a more robust and stable representation .",
    "experimental results show that elus significantly outperform other activation functions on different vision datasets .",
    "further elu networks perform significantly better than relu networks trained with batch normalization .",
    "elu networks achieved one of the top 10 best reported results on cifar-10 and set a new state of the art in cifar-100 without the need for multi - view test evaluation or model averaging .",
    "furthermore , elu networks produced competitive results on the imagenet in much fewer epochs than a corresponding relu network .",
    "given their outstanding performance , we expect elu networks to become a real time saver in convolutional networks , which are notably time - intensive to train from scratch otherwise .    [ [ acknowledgment . ] ] acknowledgment .",
    "+ + + + + + + + + + + + + + +    we thank the nvidia corporation for supporting this research with several titan x gpus and roland vollgraf and martin heusel for helpful discussions and comments on this work .",
    "[ th : lemma1 ] the positive definite matrix @xmath112 is in block format with matrix @xmath113 , vector @xmath63 , and scalar @xmath114 .",
    "the inverse of @xmath112 is @xmath115 where @xmath116    for block matrices the inverse is @xmath117 where the matrices on the right hand side are : @xmath118 further if follows that @xmath119    we now use this formula for @xmath120 being a vector and @xmath121 a scalar .",
    "we obtain @xmath122 where the right hand side matrices , vectors , and the scalar @xmath49 are : @xmath123 again it follows that @xmath124    a reformulation using @xmath125 gives @xmath126",
    "[ th : lemma2 ] for a random variable @xmath18 holds @xmath127 and @xmath128 furthermore holds @xmath129    the sherman - morrison theorem states @xmath130 therefore we have @xmath131    using the identity @xmath132 for the second moment and eq .  , we get @xmath133 the last inequality follows from the fact that @xmath134 is positive definite . from last equation , we obtain further @xmath135    for the mixed quadratic form we get from eq .",
    "@xmath136 from this equation follows @xmath137    therefore we get @xmath129",
    "to compare the variance of median activation in relu and elu networks , we trained a neural network with 5 hidden layers of 256 hidden units for 200 epochs using a learning rate of 0.01 , once using relu and once using elu activation functions on the mnist dataset .",
    "after each epoch , we calculated the median activation of each hidden unit on the whole training set .",
    "we then calculated the variance of these changes , which is depicted in figure  [ fig : varianceofchanges ] .",
    "the median varies much more in relu networks .",
    "this indicates that relu networks continuously try to correct the bias shift introduced by previous weight updates while this effect is much less prominent in elu networks ."
  ],
  "abstract_text": [
    "<S> we introduce the `` exponential linear unit '' ( elu ) which speeds up learning in deep neural networks and leads to higher classification accuracies . like rectified linear units </S>",
    "<S> ( relus ) , leaky relus ( lrelus ) and parametrized relus ( prelus ) , elus alleviate the vanishing gradient problem via the identity for positive values . </S>",
    "<S> however elus have improved learning characteristics compared to the units with other activation functions . </S>",
    "<S> in contrast to relus , elus have negative values which allows them to push mean unit activations closer to zero like batch normalization but with lower computational complexity . </S>",
    "<S> mean shifts toward zero speed up learning by bringing the normal gradient closer to the unit natural gradient because of a reduced bias shift effect . </S>",
    "<S> while lrelus and prelus have negative values , too , they do not ensure a noise - robust deactivation state . </S>",
    "<S> elus saturate to a negative value with smaller inputs and thereby decrease the forward propagated variation and information . </S>",
    "<S> therefore elus code the degree of presence of particular phenomena in the input , while they do not quantitatively model the degree of their absence .    in experiments , </S>",
    "<S> elus lead not only to faster learning , but also to significantly better generalization performance than relus and lrelus on networks with more than 5 layers . on cifar-100 elus networks </S>",
    "<S> significantly outperform relu networks with batch normalization while batch normalization does not improve elu networks . </S>",
    "<S> elu networks are among the top 10 reported cifar-10 results and yield the best published result on cifar-100 , without resorting to multi - view evaluation or model averaging . on imagenet , elu networks considerably speed up learning compared to a relu network with the same architecture , obtaining less than 10% classification error for a single crop , single model network . </S>"
  ]
}