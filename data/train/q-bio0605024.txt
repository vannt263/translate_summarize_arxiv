{
  "article_text": [
    "the computational problem of inferring biologically - meaningful haplotype data from the genotype data of a population continues to generate considerable interest at the interface of biology and computer science / mathematics .",
    "a popular underlying abstraction for this model ( in the context of diploid organisms ) represents a genotype as a string over a @xmath3 alphabet , and a haplotype as a string over @xmath4 .",
    "the exact goal depends on the biological model being applied but a common , minimal algorithmic requirement is that , given a set of genotypes , a set of haplotypes must be produced which resolves the genotypes .    to be precise , we are given a _",
    "genotype matrix _",
    "@xmath5 with elements in @xmath3 , the rows of which correspond to genotypes , while its columns correspond to sites on the genome , called snp s .",
    "haplotype matrix _ has elements from @xmath4 , and rows corresponding to haplotypes .",
    "haplotype matrix @xmath6 _ resolves _ genotype matrix @xmath5 if for each row @xmath7 of @xmath5 , containing at least one @xmath8 , there are two rows @xmath9 and @xmath10 of @xmath6 , such that @xmath11 for all @xmath12 with @xmath13 and @xmath14 otherwise , in which case we say that @xmath9 and @xmath10 resolve @xmath7 , we write @xmath15 , and we call @xmath9 the _ complement _ of @xmath10 with respect to @xmath7 , and vice versa .",
    "a row @xmath7 without 2 s is itself a haplotype and is uniquely resolved by this haplotype , which thus has to be contained in @xmath6 .",
    "we define the first of the two problems that we study in this paper .",
    "* problem : * parsimony haplotyping ( @xmath0 ) + * input : * a genotype matrix @xmath5 . + * output : * a haplotype matrix @xmath6 with a minimum number of rows that resolves @xmath5 .",
    "= -2 there is a rich literature in this area , of which recent papers such as @xcite give a good overview .",
    "the problem is apx - hard @xcite@xcite and , in terms of approximation algorithms with performance _",
    ", existing methods remain rather unsatisfactory , as will be shortly explained .",
    "this has led many authors to consider methods based on integer linear programming ( ilp ) @xcite@xcite@xcite@xcite .",
    "a different response to the hardness is to search for `` islands of tractability '' amongst special , restricted cases of the problem , exploring the frontier between hardness and polynomial - time solvability . in the literature available in this direction @xcite@xcite@xcite@xcite ,",
    "this investigation has specified classes of @xmath2-_bounded instances _ : in a @xmath2-_bounded instance _ the input genotype matrix @xmath5 has at most @xmath16 @xmath8 s per row and at most @xmath17 @xmath8 s per column ( cf .",
    "@xcite ) . if @xmath16 or @xmath17 is a `` @xmath18 '' we mean instances that are bounded only by the number of @xmath8 s per column or per row , respectively . in this paper",
    "we supplement this `` tractability '' literature with mainly positive results , and in doing so almost complete the bounded instance complexity landscape .",
    "next to the @xmath0 problem we study the _ minimum perfect phylogeny haplotyping _ ( @xmath1 ) model @xcite . again a minimum - size set of resolving haplotypes is required but this time under the additional , biologically - motivated restriction that the produced haplotypes permit a _ perfect phylogeny _ ,",
    "i.e. , they can be placed at the leaves of an evolutionary tree within which each site mutates at most once .",
    "haplotype matrices admitting a perfect phylogeny are completely characterised @xcite@xcite by the absence of the forbidden submatrix + @xmath19 + * problem : * minimum perfect phylogeny haplotyping ( @xmath1 ) + * input : * a genotype matrix @xmath5 . + * output : * a haplotype matrix @xmath6 with a minimum number of rows that resolves @xmath5 and admits a perfect phylogeny .",
    "the feasibility question ( @xmath20 ) - given a genotype matrix @xmath5 , find any haplotype matrix @xmath6 that resolves @xmath5 and admits a perfect phylogeny , or state that no such @xmath6 exists - is solvable in linear - time @xcite@xcite .",
    "researchers in this area are now moving on to explore the @xmath20 question on phylogenetic _ networks",
    "_ @xcite .",
    "the @xmath1 problem , however , has so far hardly been studied beyond an np - hardness result @xcite and occasional comments within @xmath0 and @xmath20 literature @xcite@xcite@xcite . in this paper",
    "we thus provide what is one of the first attempts to analyse the parsimony optimisation criteria within a well - defined and widely applicable biological framework .",
    "we seek namely to map the @xmath1 complexity landscape in the same way as the @xmath0 complexity landscape : using the concept of @xmath2-boundedness .",
    "we write @xmath21 and @xmath22 for these problems restricted to @xmath2-bounded instances .",
    "+ * previous work and our contribution *    in @xcite it was shown that @xmath23 is apx - hard .",
    "in @xcite@xcite it was shown that @xmath24 is polynomial - time solvable . recently , in @xcite , it was shown ( amongst other results ) that @xmath25 is apx - hard .",
    "in @xcite it was also proven that the restricted subcase of @xmath26 is polynomial - time solvable where the _ compatibility graph _ of the input genotype matrix is a clique .",
    "( informally , the compatibility graph shows for every pair of genotypes whether those two genotypes can use common haplotypes in their resolution . )    in this paper , we bring the boundaries between hard and easy classes closer by showing that @xmath27 is apx - hard and that @xmath28 is polynomial - time solvable .    as far as @xmath1 is concerned there have been , prior to this paper , no concrete results beyond the above mentioned np - hardness result .",
    "we show that @xmath29 is apx - hard and that , like their @xmath0 counterparts , @xmath30 and @xmath31 are polynomial - time solvable ( in both cases using a reduction to the @xmath0 counterpart ) .",
    "we also show that the clique result from @xcite holds in the case of @xmath32 as well . as with its @xmath0 counterpart",
    "the complexity of @xmath32 remains open .",
    "the fact that both @xmath0 and @xmath1 already become @xmath33-hard for @xmath34-bounded instances means that , in terms of deterministic approximation algorithms , the best that we can in general hope for is constant approximation ratios .",
    "lancia et al @xcite@xcite have given two separate approximation algorithms with approximation ratios of @xmath35 and @xmath36 respectively , where @xmath37 is the number of genotypes in the input , and @xmath16 is the maximum number of 2 s appearing in a row of the genotype matrix here because their algorithm runs in polynomial time even if @xmath16 is not a constant . ] .",
    "an @xmath38 approximation algorithm has been given in @xcite but this only runs in polynomial time if the set of all possible haplotypes that can participate in feasible solutions , can be enumerated in polynomial time .",
    "the obvious problem with the @xmath36 and the @xmath38 approximation algorithms is thus that either the accuracy decays exponentially ( as in the former case ) or the running time increases exponentially ( as in the latter case ) with an increasing number of 2 s per row .",
    "here we offer a simple , alternative approach which achieves ( in polynomial time ) approximation ratios linear in @xmath17 for @xmath39 and @xmath40 instances , and actually also achieves these ratios in polynomial time when @xmath17 is not constant .",
    "these ratios are shown in the table [ tab : ratios ] ; note how improved ratios can be obtained if every genotype is guaranteed to have at least one 2 .",
    ".approximation ratios achieved in this paper [ cols=\"^,^\",options=\"header \" , ]     we now prove the lemma for @xmath41 .",
    "note that in this case there exists a unique trivial haplotype @xmath42 consistent with all nontrivial genotypes .",
    "suppose , by way of contradiction , that @xmath43 is the size of the smallest instance @xmath44 for which the bound does not hold .",
    "let @xmath6 be an optimal solution for @xmath44 and let @xmath45 .",
    "observe firstly that @xmath46 ( mod @xmath47 , because if this is not true we have that @xmath48 and we can find a smaller instance for which the bound does not hold , simply by removing an arbitrary genotype from @xmath44 , contradicting the minimal choice of @xmath49 .",
    "similarly we argue that @xmath50 , since if @xmath51 we could remove an arbitrary genotype to yield a size @xmath52 instance and still have that @xmath53 .    we choose a specific resolution of @xmath44 using @xmath6 and represent it as a _ haplotype graph_. the vertices of this graph are the haplotypes in @xmath6 . for each nontrivial genotype @xmath54",
    "there is an edge between the two haplotypes that resolve it . for each trivial genotype @xmath54",
    "there is a loop on the corresponding haplotype .",
    "there are no edges between looped haplotypes because of the precondition that no nontrivial genotype is the sum of two trivial genotypes .    from lemma 5 of @xcite",
    "it follows that , with the exception of the possibly present trivial haplotype and disregarding loops , each haplotype in the graph has degree at most @xmath17 .",
    "in addition , if an unlooped haplotype has degree less than or equal to @xmath17 , or a looped haplotype has degree ( excluding its loop ) strictly smaller than @xmath17 , then deleting this haplotype and all its at most @xmath17 incident genotypes creates an instance @xmath55 containing at least @xmath56 genotypes that can be resolved using @xmath57 haplotypes , yielding a contradiction to the minimality of @xmath49 .",
    "( note that , because @xmath58 , it is not possible that the instance @xmath55 is empty or equal to a single trivial genotype . )",
    "the only case that remains is when , apart from the possibly present trivial haplotype , every haplotype in the haplotype graph is looped and has degree @xmath17 ( excluding its loop ) .",
    "however , there are no edges between looped vertices and they can therefore only be adjacent to the trivial haplotype , yielding a contradiction .",
    "+    [ lem : withgeneral ] let @xmath5 be an @xmath59 instance of @xmath39 , for some @xmath60 , where @xmath5 is not equal to a single trivial genotype , and no nontrivial genotype in @xmath5 is the sum of two trivial genotypes in @xmath5 . then at least @xmath61 haplotypes are needed to resolve @xmath5 .",
    "essentially the same inductive argument as used in lemma [ lem : boundmin ] works : it is always possible to disconnect the compatibility graph of @xmath5 into at least two components by removing at most @xmath17 nontrivial genotypes , and using cliques as the base of the induction .",
    "the presence of trivial genotypes in the input ( which we can actually simply exclude from the compatibility graph ) does not alter the analysis .",
    "the fact that ( in the inductive step ) at least two components are created , each of which contains at least one nontrivial genotype , ensures that the inductive argument is not harmed by the presence of single trivial genotypes ( for which the bound does not hold ) .",
    "+    [ cor : withfirstbound ] let @xmath5 be an @xmath59 instance of @xmath39 or @xmath40 , for some @xmath62 . any feasible solution for @xmath5 is within a ratio of @xmath63 from optimal .",
    "immediate because @xmath64 .",
    "( as before the algorithm from e.g. @xcite can be used to generate feasible solutions for @xmath1 , or to determine that they do not exist . ) +    the algorithm @xmath65 can easily be adapted to solve @xmath39 approximately .    *",
    "algorithm : * @xmath66 + * step 1 : * remove from @xmath5 all genotypes that are the sum of two trivial genotypes + * step 2 : * construct the compatibility graph @xmath67 of the leftover instance @xmath44 . + * step 3 : * find a maximal matching @xmath68 in @xmath67 . + * step 4 : * for every edge @xmath69 , resolve @xmath70 and @xmath71 by three haplotypes if @xmath70 and @xmath71 are both nontrivial and by two haplotypes if one of them is trivial . + * step 5 : * resolve each remaining nontrivial genotype by two haplotypes and each remaining trivial genotype by its corresponding haplotype .",
    "@xmath66 computes a solution to @xmath39 in polynomial time within an approximation ratio of @xmath72 , for every @xmath60 .    since constructing @xmath73 given @xmath5 takes @xmath74 time and finding a maximal matching in any graph takes linear time , @xmath74 running time follows directly .",
    "let @xmath75 be the size of the maximal matching , @xmath37 the number of genotypes after step 1 and @xmath76 the number of trivial genotypes in @xmath44 .",
    "then @xmath66 gives a solution with @xmath77 haplotypes .",
    "since the complement of the maximal matching is an independent set of size @xmath78 in @xmath67 , any solution must contain at least @xmath79 haplotypes to resolve the genotypes in this independent set .",
    "the theorem thus holds if @xmath80 .",
    "if @xmath81 , implying that @xmath82 , we use the lower bound of lemma [ lem : withgeneral ] and obtain @xmath83 the last equality follows directly since @xmath84 .",
    "there remain a number of open problems to be solved .",
    "the complexity of @xmath26 and @xmath32 is still unknown .",
    "an approach that might raise the necessary insight is to study the @xmath85 and @xmath86 variants of these problems ( i.e. where the compatibility graph is the sum of @xmath75 cliques ) for small @xmath75 .",
    "if a complexity result nevertheless continues to be elusive then it would be interesting to try and improve approximation ratios for @xmath26 and @xmath32 ; might it even be possible to find a ptas ( _ polynomial - time approximation scheme _ ) for each of these problems ?",
    "note also that the complexity of @xmath87 and @xmath88 remains open for constant @xmath89 .",
    "another intriguing open question concerns the relative complexity of @xmath0 and @xmath1 instances .",
    "has @xmath21 always the same complexity as @xmath22 , in terms of well - known complexity measurements ( polynomial - time solvability , np - hardness , apx - hardness ) ?",
    "for hard instances , do approximability ratios differ ?",
    "a related question is whether it is possible to directly encode @xmath0 instances as @xmath1 instances , and/or vice - versa , and if so whether / how this affects the bounds on the number of 2 s in columns and rows .    for hard @xmath21 instances it would also be interesting to see if those approximation algorithms that yield approximation ratios as functions of @xmath16 , can be intelligently combined with the approximation algorithms in this paper ( having approximation ratios determined by @xmath17 ) , perhaps with superior approximation ratios as a consequence . in terms of approximation algorithms for @xmath1",
    "there is a lot of work to be done because the approximation algorithms presented in this paper actually do little more than return an arbitrary feasible solution .",
    "it is also not clear if the @xmath36-approximation algorithms for @xmath90 can be attained ( or improved ) for @xmath1 .",
    "more generally , it seems likely that big improvements in approximation ratios ( for both @xmath0 and @xmath1 ) will require more sophisticated , input - sensitive lower bounds and algorithms .",
    "what are the limits of approximability for these problems , and how far will algorithms with formal performance - guarantees ( such as in this paper ) have to improve to make them competitive with dominant ilp - based methods ?    finally , with respect to @xmath1 , it could be good to explore how parsimonious the solutions are that are produced by the various @xmath20 feasibility algorithms , and whether searching through the entire space of @xmath20 solutions ( as proposed in @xcite ) yields practical algorithms for solving @xmath1 .",
    "all authors contributed equally to this paper and were supported by the dutch bsik / bricks project . a preliminary version of this paper appeared in _ proceedings of the 6th international workshop on algorithms in bioinformatics _ ( wabi 2006 ) @xcite .",
    "cilibrasi , r. , iersel , l.j.j .",
    "van , kelk , s.m . ,",
    "tromp , j. , on the complexity of several haplotyping problems , proceedings of the 5th international workshop on algorithms in bioinformatics ( wabi 2005 ) , lnbi 3692 , springer verlag , berlin , pp .",
    "128 - 139 ( 2005 )            halldrsson , b.v . ,",
    "bafna , v. , edwards , n. , lippert , r. , yooseph , s. , istrail , s. , a survey of computational methods for determining haplotypes , proc .",
    "dimacs / recomb satellite workshop : computational methods for snps and haplotype inference , pp .",
    "26 - 47 ( 2004 )    iersel , l.j.j .",
    "van , keijsper , j. , kelk , s.m . , stougie , l. , beaches of islands of tractability : algorithms for parsimony and minimum perfect phylogeny haplotyping problems , proceedings of the 6th international workshop on algorithms in bioinformatics ( wabi 2006 ) , lncs 4175 , springer , pp .",
    "80 - 91 ( 2006 )              song , y.s .",
    ", wu , y. , gusfield , d. , algorithms for imperfect phylogeny haplotyping ( ipph ) with single haploplasy or recombination event , proceedings of the 5th international workshop on algorithms in bioinformatics ( wabi 2005 ) , lnbi 3692 , springer verlag , berlin , pp . 152 - 164 ( 2005 )          leo van iersel received in 2004 his master of science degree in applied mathematics from the universiteit twente in the netherlands .",
    "he is now working as a phd student at the technische universiteit eindhoven , also in the netherlands .",
    "his research is mainly concerned with the search for combinatorial algorithms for biological problems .",
    "judith keijsper received her master s and phd degrees in 1994 and 1998 respectively from the universiteit van amsterdam in the netherlands , where she worked with lex schrijver on combinatorial algorithms for graph problems .",
    "after working as a postdoc at leibniz - imag in grenoble , france , and as an assistant professor at the universiteit twente in the netherlands for short periods of time , she moved to the technische universiteit eindhoven in the netherlands in the year 2000 .",
    "she is an assistant professor there , and her current research focus is combinatorial algorithms for problems from computational biology .",
    "steven kelk received his phd in computer science in 2004 from the university of warwick , in england .",
    "he is now working as a postdoc at the centrum voor wiskunde en informatica ( cwi ) in amsterdam , the netherlands , where he is focussing on the combinatorial aspects of computational biology .",
    "leen stougie received his phd in 1985 from the erasmus universiteit of rotterdam , the netherlands .",
    "he is currently working at the centrum voor wiskunde en informatica ( cwi ) in amsterdam and at the technische universiteit eindhoven as an associate professor ."
  ],
  "abstract_text": [
    "<S> the problem _ parsimony haplotyping _ ( @xmath0 ) asks for the smallest set of haplotypes which can explain a given set of genotypes , and the problem _ minimum perfect phylogeny haplotyping _ </S>",
    "<S> ( @xmath1 ) asks for the smallest such set which also allows the haplotypes to be embedded in a _ perfect phylogeny _ , an evolutionary tree with biologically - motivated restrictions . for @xmath0 , </S>",
    "<S> we extend recent work by further mapping the interface between `` easy '' and `` hard '' instances , within the framework of @xmath2-_bounded instances _ where the number of 2 s per column and row of the input matrix is restricted . by exploring , in the same way </S>",
    "<S> , the tractability frontier of @xmath1 we provide the first concrete , positive results for this problem , and the algorithms underpinning these results offer new insights about how @xmath1 might be further tackled in the future . </S>",
    "<S> in addition , we construct for both @xmath0 and @xmath1 polynomial time approximation algorithms , based on properties of the columns of the input matrix . </S>",
    "<S> we conclude with an overview of intriguing open problems in @xmath0 and @xmath1 .    </S>",
    "<S> combinatorial algorithms , biology and genetics , complexity hierarchies </S>"
  ]
}