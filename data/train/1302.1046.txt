{
  "article_text": [
    "_ coalgebra _ is by now a well established general framework for the study of the behaviour of large classes of dynamical systems , including various kinds of automata ( deterministic , probabilistic etc . ) and infinite data types ( streams , trees and the like ) . for a functor @xmath2 ,",
    "an @xmath0-coalgebra is a pair @xmath3 , consisting of a set @xmath4 of states and a function @xmath5 defining the observations and transitions of the states .",
    "coalgebras generally come equipped with a standard notion of equivalence called _",
    "@xmath0-behavioural equivalence _ that is fully determined by their ( functor ) type @xmath0 .",
    "moreover , for most functors @xmath0 there exists a _ final _",
    "coalgebra into which any @xmath0-coalgebra is mapped by a unique homomorphism that identifies all @xmath0-equivalent states .    much of the coalgebraic approach can be nicely illustrated with deterministic automata ( da ) , which are coalgebras of the functor . in a da ,",
    "two states are @xmath6-equivalent precisely when they accept the same language .",
    "the set @xmath7 of all formal languages constitutes a final @xmath6-coalgebra , into which every da is mapped by a homomorphism that sends any state to the language it accepts .",
    "it is well - known that _ non - deterministic _ automata ( nda ) often provide more efficient ( smaller ) representations of formal languages than da s .",
    "language acceptance of nda s is typically defined by turning them into da s via the _ powerset construction_. coalgebraically this works as follows .",
    "nda s are coalgebras of the functor @xmath8 , where @xmath9 is the finite powerset . an @xmath10-coalgebra @xmath11 is _ determinized _ by transforming it into a @xmath6-coalgebra @xmath12 ( for details see section  [ sec : motiv ] ) .",
    "then , the language accepted by a state @xmath13 in the nda @xmath14 is defined as the language accepted by the state @xmath15 in the da @xmath16 .    for a second variation on da s",
    ", we look at _ partial automata _ ( pa ) : coalgebras of the functor @xmath17 , where for certain input letters transitions may be undefined . again",
    ", one is often interested in the da - behaviour ( i.e. , language acceptance ) of pa s .",
    "this can be obtained by turning them into da s using _",
    "coalgebraically , this amounts to the transformation of a @xmath18-coalgebra @xmath19 into a @xmath6-coalgebra @xmath20 .",
    "although the two examples above may seem very different , they are both instances of one and the same phenomenon , which it is the goal of the present paper to describe at a general level . both with nda s and pa s ,",
    "two things happen at the same time : ( i ) more ( or , more generally , different types of ) transitions are allowed , as a consequence of changing the functor type by replacing @xmath4 by @xmath21 and @xmath22 , respectively ; and ( ii ) the behaviour of nda s and pa s is still given in terms of the behaviour of the original da s ( language acceptance ) .    for a large family of @xmath0-coalgebras ,",
    "both ( i ) and ( ii ) can be captured simultaneously with the help of the categorical notion of _ monad _ , which generalizes the notion of algebraic theory .",
    "the structuring of the state space @xmath4 can be expressed as a change of functor type from @xmath23 to @xmath24 . in our examples above , both the functors @xmath25 and @xmath26 are monads , and nda s and pa s are obtained from da s by changing the original functor type @xmath27 into @xmath28 and @xmath29 . regarding ( ii ) ,",
    "one assigns @xmath0-semantics to an @xmath30-coalgebra @xmath14 by transforming it into an @xmath0-coalgebra @xmath31 , again using the monad @xmath32 . in our examples above , the determinization of nda s and the totalization of pa s consists of the transformation of @xmath10- and @xmath18-coalgebras @xmath14 into @xmath6-coalgebras @xmath33 and @xmath34 , respectively .",
    "we shall investigate general conditions on the functor types under which the above constructions can be applied : for one thing , one has to ensure that the @xmath30-coalgebra map @xmath35 induces a suitable @xmath0-coalgebra map @xmath36 .",
    "our results will lead to a uniform treatment of all kinds of existing and new variations of automata , that is , @xmath30-coalgebras , by an algebraic structuring of their state space through a monad @xmath32 .",
    "furthermore , we shall prove a number of general properties that hold in all situations similar to the ones above .",
    "for instance , there is the notion of @xmath10-behavioural equivalence with which nda s , being @xmath10-coalgebras , come equipped .",
    "it coincides with the well - known notion of park - milner bisimilarity from process algebra .",
    "a general observation is that if two states in an nda are @xmath10-equivalent then they are also @xmath6- ( that is , language- ) equivalent . for pa s , a similar statement holds",
    ". one further contribution of this paper is a proof of these statements , once and for all for all @xmath30-coalgebras under consideration .",
    "coalgebras of type @xmath30 were studied in  @xcite . in  @xcite the main concern was definitions by coinduction , whereas in  @xcite a proof principle was also presented .",
    "all in all , the present paper can be seen as the understanding of the aforementioned papers from a new perspective , presenting a uniform view on various automata constructions and equivalences .",
    "the structure of the paper is as follows .",
    "after preliminaries ( section  [ sec : prelim ] ) and the details of the motivating examples above ( section  [ sec : motiv ] ) , section  [ sec : general ] presents the general construction as well as many more examples , including the coalgebraic chracterisation of pushdown automata ( section  [ pda ] ) . in section  [ sec : bisim_implies_trace ] , a large family of automata ( technically : functors ) is characterised to which the constructions above can be applied .",
    "section  [ secbbat ] contains the application of the framework in order to recover several interesting equivalences stemming from the world of concurrency , such as failure and ready semantics .",
    "section  [ sec : discussion ] discusses related work and presents pointers to future work .",
    "this paper is an extended version of  @xcite .",
    "compared to the conference version , we include the proofs and more examples .",
    "more interestingly , the characterisation of pushdown automata coalgebraically ( section  [ pda ] ) and the material in section  [ secbbat ] are original .",
    "[ sec : prelim ] in this section we introduce the preliminaries on coalgebras and algebras .",
    "first , we fix some notation on sets",
    ". we will denote sets by capital letters @xmath37 and functions by lower case letters @xmath38 given sets @xmath4 and @xmath39 , @xmath40 is the cartesian product of @xmath4 and @xmath39 ( with the usual projection maps @xmath41 and @xmath42 ) , @xmath43 is the disjoint union ( with injection maps @xmath44 and @xmath45 ) and @xmath46 is the set of functions @xmath47 .",
    "the collection of finite subsets of @xmath4 is denoted by @xmath48 , while the collection of full - probability distributions with finite support is @xmath49 \\mid \\text{$f$ finite support and } \\sum_{x\\in x } f(x ) = 1\\}$ ] . for a set of letters @xmath50",
    ", @xmath51 denotes the set of all words over @xmath50 ; @xmath52 the empty word ; and @xmath53 ( and @xmath54 ) the concatenation of words @xmath55 .",
    "a coalgebra is a pair @xmath56 , where @xmath4 is a set of states and @xmath57 is a functor .",
    "the functor @xmath0 , together with the function @xmath58 , determines the _ transition structure _ ( or dynamics ) of the @xmath0-coalgebra  @xcite .",
    "an _ @xmath0-homomorphism _ from an @xmath0-coalgebra @xmath14 to an @xmath0-coalgebra @xmath59 is a function @xmath60 preserving the transition structure , _",
    "i.e. _ , @xmath61 .",
    "an @xmath0-coalgebra @xmath62 is said to be _ final _ if for any @xmath0-coalgebra @xmath14 there exists a unique @xmath0-homomorphism @xmath63\\!]}_x\\colon x\\to \\omega$ ] .",
    "all the functors considered in examples in this paper have a final coalgebra .",
    "let @xmath3 and @xmath59 be two @xmath0-coalgebras .",
    "we say that the states @xmath64 and @xmath65 are _ behaviourally equivalent _ , written @xmath66 , if and only if they are mapped into the same element in the final coalgebra , that is @xmath67\\!]}_x = { [ \\ !",
    "[ y ] \\!]}_y$ ] . for weak pullback preserving functors , behavioural equivalence coincides with the usual notion of bisimilarity  @xcite .",
    "monads can be thought of as a generalization of algebraic theories .",
    "@xmath68 is a triple consisting of an endofunctor @xmath32 on @xmath69 and two natural transformations : a _ unit _ @xmath70 and a _ multiplication _ @xmath71 .",
    "they satisfy the following commutative laws @xmath72 sometimes it is more convenient to represent a monad @xmath73 , equivalently , as a _ kleisli triple _",
    "@xmath74  @xcite , where @xmath32 assigns a set @xmath75 to each set @xmath4 , the unit @xmath76 assigns a function @xmath77 to each set @xmath4 , and the extension operation @xmath78 assigns to each @xmath79 a function @xmath80 , such that , @xmath81 for @xmath82 .",
    "monads are frequently referred to as _ computational types _",
    "we list now a few examples .",
    "in what follows , @xmath83 and @xmath84 .",
    "[ [ nondeterminism ] ] * nondeterminism * + + + + + + + + + + + + + + + +    @xmath85 ; @xmath86 is the singleton map @xmath87 ; @xmath88 .",
    "[ [ partiality ] ] * partiality * + + + + + + + + + + + +    @xmath89 where @xmath90 represents a terminating ( or diverging ) computation ; @xmath86 is the injection map @xmath91 ; @xmath92 and @xmath93 .    *",
    "further examples * of monads include : exceptions ( @xmath94 ) , side - effects ( @xmath95 ) , interactive output ( @xmath96 ) and full - probability ( @xmath97 ) .",
    "we will use all these monads in our examples and we will define @xmath86 and @xmath98 for each later in section  [ sec : examples ] .    a @xmath73__-algebra _ _ of a monad @xmath73 is a pair @xmath99 consisting of a set @xmath4 , called carrier , and a function @xmath100 such that @xmath101 and @xmath102 . a @xmath32-homomorphism between two @xmath73-algebras @xmath99 and @xmath103 is a function @xmath104 such that @xmath105 .",
    "@xmath73-algebras and their homomorphisms form the so - called _ eilenberg - moore category _ @xmath106 .",
    "there is a forgetful functor @xmath107 defined by @xmath108 the forgetful functor @xmath109 has left adjoint @xmath110 , mapping a set @xmath4 to its free @xmath73-algebra . if @xmath111 with @xmath112 a @xmath73-algebra , the unique @xmath73-homomorphism @xmath113 with @xmath114 is given by @xmath115^{tf } & t(y ) \\ar[r]^{h } & y \\ , . } \\ ] ] the function @xmath116 coincides with function extension for a kleisli triple . for the monad @xmath9 the associated eilenberg - moore category is the category of join semi - lattices , whereas for the monad",
    "@xmath117 is the category of pointed sets .",
    "[ sec : motiv ] in this section , we introduce two motivating examples .",
    "we will present two constructions , the determinization of a non - deterministic automaton and the totalization of a partial automaton , which we will later show to be an instance of the same , more general , construction .",
    "a deterministic automaton ( da ) over the input alphabet @xmath50 is a pair @xmath118 , where @xmath4 is a set of states and @xmath119 is a function with two components : @xmath120 , the output function , determines if a state @xmath121 is final ( @xmath122 ) or not ( @xmath123 ) ; and @xmath124 , the transition function , returns for each input letter @xmath125 the next state .",
    "da s are coalgebras for the functor @xmath126 .",
    "the final coalgebra of this functor is @xmath127 where @xmath7 is the set of languages over @xmath50 and @xmath128 , given a language @xmath129 , determines whether or not the empty word is in the language ( @xmath130 or @xmath131 , resp . ) and , for each input letter @xmath125 , returns the _ derivative _ of @xmath129 : @xmath132 . from any da",
    ", there is a unique map @xmath133 into @xmath7 which assigns to each state its behaviour ( that is , the language that the state recognizes ) .",
    "@xmath134^{l}\\ar[d]_{<o , t > } & 2^{a^*}\\ar[d]^{<\\epsilon , ( -)_a>}\\\\ 2\\times x^a\\ar@{-->}[r]_-{\\mathit{id}\\times l^a } & 2\\times ( 2^{a^*})^a } \\ ] ] a non - deterministic automaton ( nda ) is similar to a da but the transition function gives a set of next - states for each input letter instead of a single state .",
    "thus , an nda over the input alphabet @xmath50 is a pair @xmath135 , where @xmath4 is a set of states and @xmath136 is a pair of functions with @xmath120 as before and where @xmath137 determines for each input letter @xmath125 a set of possible next states . in order to compute the language recognized by a state @xmath121 of an nda @xmath138 , it is usual to first determinize it , constructing a da @xmath139 where the state space is @xmath21 , and then compute the language recognized by the state @xmath140 of @xmath139 .",
    "next , we describe in coalgebraic terms how to construct the automaton @xmath139 .    given an nda @xmath141",
    ", we construct @xmath142 , where , for all @xmath143 , @xmath144 , the functions @xmath145 and @xmath146 are @xmath147 ( observe that these definitions exploit the join - semilattice structures of @xmath148 and @xmath149 ) .",
    "the automaton @xmath139 is such that the language @xmath150 recognized by @xmath140 is the same as the one recognized by @xmath121 in the original nda @xmath138 ( more generally , the language recognized by state @xmath4 of @xmath139 is the union of the languages recognized by each state @xmath121 of @xmath138 ) .",
    "we summarize the situation above with the following commuting diagram : @xmath151_-{<o,\\delta>}\\ar@{->}[r]^-{\\{\\cdot\\ } } & \\pow(x)\\ar[dl]^-{<\\overline o , t>}\\ar@{-->}^{l}[r ] & 2^{a^*}\\ar[d]^{<\\epsilon , ( -)_a>}\\\\ 2\\times \\pow(x)^a\\ar@{-->}[rr]_-{\\mathit{id } \\times l^a } & & 2\\times ( 2^{a^*})^a } \\ ] ] we note that the language semantics of nda s , presented in the above diagram , can also be obtained as an instance of the abstract definition scheme of @xmath152-coinduction  @xcite .",
    "a partial automaton ( pa ) over the input alphabet @xmath50 is a pair @xmath153 consisting of a set of states @xmath4 and a pair of functions @xmath154 . here",
    "@xmath155 is the same as with da .",
    "the second function @xmath156 is a transition function that sends any state @xmath157 to a function @xmath158 , which for any input letter @xmath159 is either undefined ( no @xmath125-labelled transition takes place ) or specifies the next state that is reached .",
    "pa s are coalgebras for the functor @xmath160 . given a pa @xmath138",
    ", we can construct a total ( deterministic ) automaton @xmath161 by adding an extra _ sink _ state to the state space : every undefined @xmath125-transition from a state @xmath121 is then replaced by a @xmath125-labelled transition from @xmath121 to the sink state . more precisely , given a pa @xmath162 , we construct @xmath163 , where @xmath164 ( observe that these definitions exploit the pointed - set structures of @xmath148 and @xmath165 ) .",
    "the language @xmath166 recognized by a state @xmath121 will be precisely the language recognized by @xmath121 in the original partial automaton .",
    "moreover , the new sink state recognizes the empty language .",
    "again we summarize the situation above with the help of following commuting diagram , which illustrates the similarities between both constructions : @xmath151_-{<o,\\partial>}\\ar@{->}[r]^-{\\kappa_2 } & 1+x\\ar[dl]^-{<\\overline o,{t}>}\\ar@{-->}^{l}[r ] & 2^{a^*}\\ar[d]^{<\\epsilon , ( -)_a>}\\\\ 2\\times ( 1+x)^a\\ar@{-->}[rr]_-{\\mathit{id } \\times l^a }   & & 2\\times ( 2^{a^*})^a } \\ ] ]",
    "in this section we present a general framework where both motivating examples can be embedded and uniformly studied . we will consider coalgebras for which the functor type  @xmath30 can be decomposed into a transition type @xmath0 specifying the relevant dynamics of a system and a monad @xmath32 providing the state space with an algebraic structure .",
    "for simplicity , we fix our base category to be @xmath69 .",
    "we study coalgebras @xmath167 for a functor @xmath0 and a monad @xmath73 such that @xmath168 is a @xmath73-algebra , that is @xmath168 is the carrier of a @xmath73-algebra @xmath169 . in the motivating examples ,",
    "@xmath0 would be instantiated to @xmath170 ( in both ) and @xmath32 to @xmath9 , for ndas , and to @xmath117 for pas .",
    "the condition that @xmath168 is a @xmath73-algebra would amount to require that @xmath171 is a join - semilattice , for ndas , and that @xmath172 is a pointed set , for pas .",
    "this is indeed the case , since the set @xmath148 can be regarded both as a join - semilattice ( @xmath173 ) or as a pointed set ( @xmath174 ) and , moreover , products and exponentials preserve the algebra structure .    the inter - play between the transition type @xmath0 and the computational type @xmath73 ( more precisely , the fact that @xmath168 is a @xmath73-algebra ) allows each coalgebra @xmath175 to be extended uniquely to a @xmath32-algebra morphism @xmath176 which makes the following diagram commute .",
    "@xmath177_-{f}\\ar[r]^-{\\eta_x } & t(x)\\ar[dl]^-{f^\\sharp}\\\\ ft(x ) & } \\ \\ \\ \\ \\ \\ \\   f^\\sharp \\circ \\eta_x = f\\ ] ] intuitively , @xmath178 is the inclusion of the state space of the coalgebra @xmath179 into the structured state space @xmath75 , and @xmath180 is the extension of the coalgebra @xmath58 to @xmath75 .",
    "next , we study the behaviour of a given state or , more generally , we would like to say when two states @xmath181 and @xmath182 are equivalent . the obvious choice for an equivalence would be @xmath30-behavioural equivalence",
    ". however , this equivalence is not exactly what we are looking for . in the motivating example of non - deterministic automata we wanted two states to be equivalent if they recognize the same language .",
    "if we would take the equivalence arising from the functor @xmath183 we would be distinguishing states that recognize the same language but have difference branching types , as in the following example .",
    "@xmath184^{a } & & \\hspace{2 cm } & & \\bullet \\ar[dr]^{a}\\ar[dl]_{a}\\\\   & \\ar[dr]^{c}\\ar[dl]_{b } & & & \\ar[d]_{b}&&\\ar[d]^{c}\\\\   \\bullet & & \\bullet & & \\bullet&&\\bullet } \\ ] ] we now define a new equivalence , which _ absorbs _ the effect of the monad @xmath32 .",
    "we say that two elements @xmath181 and @xmath182 in @xmath4 are _ @xmath0-equivalent with respect to a monad _ @xmath73 , written @xmath185 , if and only if @xmath186 . the equivalence @xmath1 is just @xmath0-behavioural equivalence for the @xmath0-coalgebra @xmath187 .",
    "if the functor @xmath0 has a final coalgebra @xmath188 , we can capture the semantic equivalence above in the following commuting diagram @xmath189_{f}\\ar[r]^-{\\eta_x } & t(x)\\ar[dl]^-{f^\\sharp}\\ar@{-->}[r]^{{[\\ !",
    "[ - ] \\ ! ] } } & \\omega \\ar[d]^{\\omega}\\\\ ft(x)\\ar@{-->}[rr]_-{f{[\\ ! [ - ] \\ ! ] } }   & & f(\\omega ) } \\end{aligned}\\ ] ] returning to our first example , two states @xmath181 and @xmath182 of an nda ( in which @xmath32 is instantiated to @xmath9 and @xmath0 to @xmath190 ) would satisfy @xmath191 if and only if they recognize the same language ( recall that the final coalgebra of the functor @xmath190 is @xmath7 ) .",
    "it is also interesting to remark the difference between the two equivalences in the case of partial automata .",
    "the coalgebraic semantics of pas  @xcite is given in terms of pairs of prefix - closed languages @xmath192 where @xmath193 contains the words that are accepted ( that is , are the label of a path leading to a final state ) and @xmath194 contains all words that label any path ( that is all that are in @xmath193 plus the words labeling paths leading to non - final states ) .",
    "we describe @xmath193 and @xmath194 in the following two examples , for the states @xmath195 and @xmath196 : @xmath197_-b \\ar[rr]^-a \\ar@(l , u)^{c } & & * + + [ o][f=]{s_1 }   \\ar@(r , d)^{b } \\\\ & s_2 } & \\xymatrix@c=0.2cm@r=0.2cm{q_0 \\ar[rr]^-a \\ar@(l , u)^{c}&&*++[o][f=]{q_1}\\ar@(r , d)^{b } } & \\begin{array}{l } w = c^ * + c^*ab^*\\\\ v = c^*ab^ * \\end{array } \\end{array}\\ ] ] thus , the states @xmath195 and @xmath196 would be distinguished by @xmath30-equivalence ( for @xmath198 and @xmath199 ) but they are equivalent with respect to the monad @xmath117 , @xmath200 , since they accept the same language",
    ".    we will show in section  [ sec : bisim_implies_trace ] that the equivalence @xmath201 is always contained in @xmath202 .      in this section",
    "we show more examples of applications of the framework above .",
    "a partial mealy machine is a set of states @xmath4 together with a function @xmath203 , where @xmath50 is a set of inputs and @xmath204 is a set of output values .",
    "we assume that @xmath204 has a distinguished element @xmath205 . for each state",
    "@xmath121 and for each input @xmath125 the automaton produces an output value and either terminates or continues to a next state . applying the framework above",
    "we will be _ totalizing _ the automaton , similarly to what happened in the example of partial automata , by adding an extra state to the state space which will act as a sink state .",
    "the behaviour of the totalized automaton is given by the set of causal functions from @xmath206 ( infinite sequences of @xmath50 ) to @xmath207 , which we denote by @xmath208  @xcite .",
    "a function @xmath209 is causal if , for @xmath210 , the @xmath211-th value of the output stream @xmath212 depends only on the first @xmath211 values of the input stream @xmath213 . in the diagram below , we define the final map @xmath63\\ ! ] } \\colon 1+x   \\to \\gamma(a^\\omega , b^\\omega)$ ] : @xmath214_{t}\\ar@{->}[r]^-{\\kappa_2 } & 1+x\\ar[ddl]^-{t^\\sharp}\\ar@{-->}[rrr]^{{[\\ ! [ - ] \\ ! ] } } \\ar@{}[ddrrr]|{\\small\\begin{array}{l } { [ \\ ! [ \\kappa_1 ( * ) ] \\ ! ] } ( \\sigma ) = ( \\bot , \\bot , \\ldots ) \\\\ { [ \\ ! [ \\kappa_2(x ) ] \\ ! ] } ( a \\ , : \\ , \\tau ) =   b \\ , : \\ , ( { [ \\ ! [ z ] \\!]}(\\tau))\\\\ \\hspace{1 cm } \\text { where }",
    "t(x)(a ) = < b , z > \\end{array } } & & & \\gamma(a^\\omega , b^\\omega)\\ar[dd]\\\\\\\\ ( b\\times ( 1+x))^a\\ar@{-->}[rrrr ] & & & & ( b\\times \\gamma(a^\\omega , b^\\omega))^a } \\ ] ] here @xmath215 , @xmath157 , @xmath159 , @xmath216 , @xmath217 , @xmath218 , and @xmath219 denotes the prefixing of the stream @xmath220 with the element @xmath125 .      in the following examples we look at the functor @xmath221 for arbitrary sets @xmath50 and @xmath204 and an arbitrary monad @xmath222 .",
    "the coalgebras of @xmath0 represents moore automata with outputs in @xmath223 and inputs in @xmath50 . since @xmath223 is a @xmath73-algebra",
    ", @xmath224 is a @xmath73-algebra and the product of @xmath73-algebras is still a @xmath73-algebra , then @xmath168 is a @xmath73-algebra .",
    "for this reason , the ( pair of ) functions @xmath225 and @xmath226 lift to a ( pair of ) functions @xmath227 the final coalgebra of @xmath0 is @xmath228 . we can characterize the final map @xmath63\\ ! ] } \\colon t(x ) \\to t(b)^{a^*}$ ] , for all @xmath229 , @xmath159 and @xmath230 , by @xmath177_{<o , t>}\\ar[r]^{\\eta_x } & t(x)\\ar@{}[drrr]|{\\small\\begin{array}{l } { [ \\ !",
    "[ m   ] \\!]}(\\epsilon ) = o^\\sharp(m)\\\\ { [ \\ ! [ m ] \\!]}(a \\cdot w ) = { [ \\ ! [ t^\\sharp(m)(a ) ] \\!]}(w)\\\\ \\end{array }   } \\ar[dl]_-{<o^\\sharp , t^\\sharp>}\\ar@{-->}[rrr]^{{[\\ ! [ - ] \\ ! ] } } & & & t(b)^{a^ * } \\ar[d]^{<\\epsilon , ( -)_a>}\\\\ t(b ) \\times t(x)^a\\ar@{-->}[rrrr ] & & & & t(b)\\times ( t(b)^{a^*})^a } \\ ] ] below we shall look at various concrete instances of this scheme , for different choices of the monad @xmath32 .",
    "[ [ moore - automata - with - exceptions ] ] _ moore automata with exceptions _",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let @xmath231 be an arbitrary set , the elements of which we think of as exceptions .",
    "we consider the _ exception monad _",
    "@xmath232 which has the function @xmath233 as its unit .",
    "we define the lifting @xmath234 , for any function @xmath235 , by @xmath236 $ ] .",
    "an @xmath30-coalgebra @xmath237 will associate with every state @xmath121 an output value ( either in @xmath204 or an exception in @xmath231 ) and , for each input @xmath125 , a next state or an exception .",
    "the behaviour of a state @xmath121 , given by @xmath238\\!]}$ ] , will be a formal power series over @xmath50 with output values in @xmath239 ; that is , a function from @xmath51 to @xmath240 . the final map is defined as follows , for all @xmath241 , @xmath157 , @xmath159 , and @xmath230 : @xmath242_{<o , t>}\\ar@{->}[r]^-{\\kappa_2 } & e+x\\ar[ddl]_-{<o^\\sharp , t^\\sharp>}\\ar@{-->}[rrr]^{{[\\ ! [ - ] \\ ! ] } } \\ar@{}[ddrrr]|{\\small\\begin{array}{l } { [ \\ ! [ \\kappa_1(e ) ] \\ ! ] } ( w ) = \\kappa_1(e ) \\\\ { [ \\ ! [ \\kappa_2(x ) ] \\ ! ] } ( \\epsilon ) =    o(x)\\\\ { [ \\ ! [ \\kappa_2(x ) ] \\ ! ] } ( a \\cdot w ) = { [ \\ ! [ t(x)(a ) ] \\!]}(w ) \\\\",
    "\\end{array } } & & & ( e+b)^{a^*}\\ar[dd]\\\\\\\\ ( e+b)\\times ( e+x)^a\\ar@{-->}[rrrr ] & & & & ( e+b)\\times ( ( e+b)^{a^*})^a } \\ ] ]    [ [ moore - automata - with - side - effects ] ] _ moore automata with side effects _",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let @xmath243 be an arbitrary set of so - called _ side - effects_. we consider the monad @xmath244 , with unit @xmath76 defined , for all @xmath157 and @xmath245 , by @xmath246 .",
    "we define the lifting @xmath234 of a function @xmath235 by @xmath247 , for any @xmath248 and @xmath245 , and with @xmath249 .",
    "consider an @xmath30-coalgebra @xmath250 and let us explain the intuition behind this type of automaton type .",
    "the set @xmath251 can be interpreted as the configurations of the automaton , where @xmath243 contains information about the state of the system and @xmath4 about the control of the system . using the isomorphism @xmath252",
    ", we can think of @xmath253 as a function that for each configuration in @xmath251 provides an output in @xmath204 and the new state of the system in @xmath243 .",
    "the transition function @xmath254 gives a new configuration for each input letter and current configuration , using again the fact that @xmath255 . in all of this ,",
    "a concrete instance of the set of side - effects could be , for example , the set @xmath256 of functions associating memory locations to values .",
    "the behaviour of a state @xmath157 will be given by @xmath238\\!]}$ ] , where the final mapping is as follows .",
    "for all @xmath257 , @xmath258 , @xmath159 and @xmath230 , and with @xmath259 , we have @xmath242_{<o , t>}\\ar@{->}[r]^-{\\eta } & ( s\\times x)^s\\ar[ddl]_-{<o^\\sharp , t^\\sharp>}\\ar@{-->}[rrr]^{{[\\ !",
    "[ - ] \\ ! ] } } \\ar@{}[ddrrr]|{\\small\\begin{array}{l } { [ \\ ! [ g ] \\ ! ] } ( \\epsilon ) ( s ) = o(x)(s ' ) \\\\ { [ \\ ! [ g ] \\ ! ] } ( a \\cdot w ) = { [ \\ ! [ \\lambda s. t(x)(a)(s ' ) ] \\!]}(w ) \\\\ \\end{array } } & & & ( ( b\\times s)^s)^{a^*}\\ar[dd]\\\\\\\\ ( b\\times s)^s \\times ( ( s\\times x)^s)^a \\ar@{-->}[rrrr ] & & & & ( b\\times s)^s \\times ( ( ( b \\times s)^s)^{a^*})^a } \\ ] ]    [ [ moore - automata - with - interactive - output ] ] _ moore automata with interactive output _",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    let @xmath260 be an arbitrary set of _ outputs_. consider the interactive output monad defined by the functor @xmath261 together with the natural transformation @xmath262 , and",
    "for which the lifting @xmath263 of a function @xmath83 is given by @xmath264 .",
    "we consider @xmath30-coalgebras @xmath265 for @xmath266 , the above coalgebras coincide with _",
    "( total ) subsequential transducers _",
    "@xcite : @xmath267 is the final output function ; @xmath268 is the pairing of the output function and the next state - function .    the behaviour of a state @xmath121 will be given by @xmath238\\ ! ] } = { [ \\ !",
    "[ < \\epsilon , x > ] \\!]}$ ] , where , for every @xmath269 , @xmath270\\!]}\\colon a^ * \\to o^*$ ] , is given by @xmath271\\ ! ] } ( \\epsilon ) & = & w\\cdot o(x ) & { [ \\ ! [ < w , x > ] \\ ! ] } ( aw_1 ) & = & w \\cdot ( { [ \\ ! [ t(x)(a ) ] \\!]}(w_1 ) ) \\end{array}\\ ] ]    [ [ probabilistic - moore - automata ] ] _ probabilistic moore automata _ + +",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + +    consider the monad of probability distributions defined , for any set @xmath4 , by @xmath272 its unit is given by the dirac distribution , defined for @xmath273 by @xmath274 the lifting @xmath263 of a function @xmath83 is given , for any distribution @xmath275 and any @xmath276 , by @xmath277 we will consider @xmath30-coalgebras @xmath278 more specifically , we take @xmath279 which implies @xmath280 $ ] . for this choice of @xmath204 , the above @xmath30-coalgebras are precisely the _",
    "( rabin ) probabilistic automata _",
    "each state @xmath121 has an output value in @xmath281 $ ] and , for each input @xmath125 , @xmath282 is a probability distribution of next states .",
    "the behaviour of a state @xmath121 is given by @xmath238\\!]}\\colon a^ * \\to [ 0,1]$ ] , defined below .",
    "intuitively , one can think of @xmath238\\!]}$ ] as a probabilistic language : each word is associated with a value @xmath283 $ ] .",
    "the final mapping @xmath242_{<o , t>}\\ar@{->}[r]^-{\\eta } & \\mathcal d_\\omega(x ) \\ar[ddl]_-{<o^\\sharp , t^\\sharp>}\\ar@{-->}[rrr]^{{[\\ ! [ - ] \\ ! ] } } & & & [ 0,1]^{a^*}\\ar[dd]\\\\\\\\ [ 0,1 ] \\times \\mathcal d_\\omega(x)^a \\ar@{-->}[rrrr ] & & & & [ 0,1 ] \\times ( [ 0,1]^{a^*})^a } \\ ] ] is given , for any @xmath284 , @xmath64 , @xmath159 , and @xmath230 , by @xmath285\\ ! ] } ( \\epsilon ) & = & \\sum\\limits_{b\\in[0,1]}(\\sum\\limits_{o(x ) = b } d(x))\\times b\\\\ { [ \\ ! [ d ] \\ ! ] } ( aw ) & = & { [ \\ ! [ \\lambda x ' .",
    "\\sum\\limits_{c\\in \\mathcal d_\\omega(x ) } ( \\sum_{b = t(x)(a ) } d(x ) ) \\times   c(x ' ) ] \\ ! ] } ( w ) \\end{array}\\ ] ] it is worth noting that this exactly captures the semantics of @xcite , while the ordinary @xmath201 coincides with _ probabilistic bisimilarity _ of @xcite .",
    "moreover @xmath286 coincides with the trace semantics of probabilistic transition systems defined in @xcite ( see section 7.2 of @xcite ) .",
    "recursive functions in a computer program lead naturally to a stack of recursive function calls during the execution of the program . in this section ,",
    "we provide a coalgebraic model of automata equipped with a stack memory .",
    "pushdown machine _ is a tuple @xmath287 , where @xmath288 is set of control locations ( states ) , @xmath50 is a set of input symbols , @xmath204 is a set of stack symbols , and @xmath137 is finite subset of @xmath289 , called the set of transition rules .",
    "note that we do not insist on the sets @xmath288 , @xmath50 and @xmath204 to be finite and consider only _ realtime _ pushdown machines , i.e. without internal transitions ( also called @xmath52-transitions )  @xcite .",
    "a _ configuration _",
    "@xmath290 of a pushdown machine is a pair @xmath291 denoting the current control state @xmath292 and the current content of the stack @xmath293 . in denoting the stack as a string of stack symbols we assume that the topmost symbol is written first .",
    "there is a transition @xmath294 if @xmath295 .",
    "a convenient notation is to introduce for any string @xmath230 the transition relation on configurations as the least relation such that    1 .",
    "@xmath296 2 .",
    "@xmath297 if and only if @xmath298 and @xmath299 .    a _ pushdown automaton _ ( pda ) is a pushdown machine together with an initial configuration @xmath300 and a set @xmath301 of accepting configurations .",
    "the sets of accepting configurations usually considered are ( 1 ) the set @xmath302 , where @xmath303 is called the set of accepting states , or ( 2 ) @xmath304 , but also ( 3 ) @xmath305 for @xmath303 , or ( 4 ) @xmath306 for @xmath307 a subset of @xmath204 .",
    "a word @xmath230 is said to be accepted by a pda  @xmath308 if @xmath309 for some @xmath310 .",
    "a pda  with accepting configurations as in ( 1 ) is said to be with accepting states , whereas , when they are as in ( 2 ) then the pda  is said to be accepting by empty stack .",
    "they both accept exactly proper context free languages ( i.e. context free languages without the empty word )  @xcite .",
    "computations in a pushdown machine are generally non - deterministic and can cause a change in the control state of the automaton as well as in its stack . for this reason we will model the effects of the computations by means of the so - called _ non - deterministic side - effect _ monad  @xcite . for a set of states",
    "@xmath243 , let @xmath32 be the functor @xmath311 . it is a monad when equipped with the unit @xmath312 , defined by @xmath313 , and the multiplication @xmath314 given by @xmath315 note that , for a function @xmath316 , the extension @xmath317 is defined by @xmath318 examples of algebras for this monad are @xmath319 and @xmath320 .",
    "the latter can in fact be obtained as a quotient of the former by equating those functions @xmath321 such that for all @xmath258 , @xmath322 if and only if @xmath323 .",
    "every pushdown machine @xmath287 together with a set of accepting configurations @xmath301 induces a function @xmath324 where @xmath0 is the functor @xmath325 and @xmath32 is the monad defined above specialized for @xmath326 ( intuitively , side effects in a pushdown machine are changes in its stack ) . the functions @xmath327 and @xmath328 are defined as @xmath329 the transition function @xmath124 describes the steps between pda  configurations and it is specified in terms of the transition instructions @xmath137 of the original machine .    from the above is clear that not every function @xmath324 defines a pushdown machine with accepting configurations , as , for example , @xmath330 may depend on the whole stack @xmath331 and not just on the top element @xmath332 .",
    "therefore we restrict our attention to consider functions @xmath324 such that    1 .",
    "@xmath333 2 .",
    "@xmath334 ,    every @xmath335 satisfying ( 1 ) and ( 2 ) above defines the pushdown machine @xmath287 with @xmath336 and with accepting configuration @xmath337 .",
    "the first condition is asserting that a machine is in a deadlock configuration when the stack is empty , while the last condition ensures that transition steps depend only on the control state and the top element of the stack .",
    "for this reason we will write @xmath338 for @xmath339 indicating that the pushdown machine in the state @xmath340 by reading an input symbol @xmath125 and popping @xmath332 off the stack , can move to a control state @xmath341 pushing the string @xmath342 on the current stack ( here denoted by @xmath331 ) .    similarly to what we have shown in the examples of structured moore automata , for every function @xmath324 there is a unique @xmath0-coalgebra map @xmath63\\!]}\\colon t(q ) \\to 2^{{b^*}^{a^*}}$ ] , which is also a @xmath32-algebra homomorphism .",
    "it is defined for all @xmath343 and @xmath293 as @xmath344_{<o , t>}\\ar@{->}[r]^(0.36){\\eta } & \\pow(q \\times b^*)^{b^*}\\ar[ddl]^-{<o^\\sharp , t^\\sharp>}\\ar@{-->}[r]^(0.6){{[\\ !",
    "[ - ] \\ ! ] } } & { 2^{b^*}}^{a^*}\\ar[dd]\\\\\\\\ 2^{b^*}\\times { \\pow(q \\times b^*)^{b^*}}^a \\ar@{-->}[rr ] & & 2^{b^*}\\times { { 2^{b^*}}^{a^*}}^a } \\raisebox{-1cm}{$",
    "\\begin{array}{l } { [ \\ ! [ \\eta(q ) ] \\!]}(\\epsilon ) = o(q)\\\\ { [ \\ ! [ \\eta(q ) ] \\!]}(aw ) = { [ \\ ! [ \\lambda \\beta.t(q)(a)(\\beta ) ] \\!]}(w)\\\\ { [ \\ ! [ c ] \\!]}(\\beta)=\\bigcup\\limits_{<q,\\alpha > \\in c(\\beta ) } { [ \\ ! [ \\eta(q ) ] \\!]}(\\alpha)\\ , .",
    "\\end{array}$}\\ ] ] we then have that a word @xmath230 is _ accepted _ by the pda  @xmath308 with @xmath345 if and only if @xmath346\\!]}(w)(\\beta ) = 1 $ ] .",
    "the above definition implies that for a given word @xmath230 we can decide if it is accepted by @xmath324 from an initial configuration @xmath345 in exactly @xmath347 steps ( assuming there is a procedure to decide whether @xmath348 ) . as a consequence",
    ", we can not use structured moore automata to model turing machines , for which the halting problem is undecidable : in general terms , for turing machines , we would need internal transitions that do not consume input symbols .",
    "we conclude with an example of our construction using a pushdown machine with control states @xmath349 , over an input alphabet @xmath350 and using stack symbols @xmath351 .",
    "the transitions rules @xmath137 are given below :    @xmath352 ^ -{b , x|\\epsilon } & & q_1 \\ar@(r , u)_{b , x|\\epsilon } } \\ ] ]    we take @xmath353 , meaning that @xmath354 , @xmath355 and @xmath356 in all other cases . by considering @xmath357 as initial configuration , we then have @xmath358\\!]}(\\epsilon)(s ) = o(q_0)(s ) = 0\\ ] ] meaning that the empty word is not accepted by the pda  @xmath359 . however , the word @xmath360 is accepted : @xmath361\\!]}(ab)(s ) & = & { [ \\ ! [ \\lambda \\beta.t(q_0)(a)(\\beta ) ] \\!]}(b)(s)\\\\                        & = & \\bigcup\\limits_{<p,\\beta > \\in t(q_0)(a)(s ) } { [ \\ ! [ \\eta(p ) ] \\!]}(b)(\\beta)\\\\                        & = & { [ \\ ! [ \\eta(q_1 ) ] \\!]}(b)(x)\\\\                        & = &   { [ \\ ! [ \\lambda \\beta.t(q_1)(b)(\\beta ) ] \\!]}(\\epsilon)(x)\\\\                        & = &   \\bigcup\\limits_{<p,\\beta > \\in t(q_1)(b)(x ) } { [ \\ ! [ \\eta(p ) ] \\!]}(\\epsilon)(\\beta)\\\\                        & = &   { [ \\ ! [ \\eta(q_1 ) ] \\!]}(\\epsilon)(\\epsilon)\\\\                        & = &   o(q_1)(\\epsilon)\\\\                        & = &   1 \\ , .",
    "\\end{array}\\ ] ] in fact , the language accepted by the above pushdown automaton is @xmath362 .",
    "the structured states @xmath363 , their transitions and their outputs of ( part of ) the associated moore automaton are given in figure [ fig : pda1 ] .",
    "[ cols=\"<,^ , < \" , ]     the above characterization of context free languages over an alphabet @xmath50 is different and complementary to the coalgebraic account of context - free languages presented in  @xcite .",
    "the latter , in fact , uses the functor @xmath364 for deterministic automata ( instead of the moore automata with output in @xmath365 above , for @xmath204 a set of variables ) , and the idempotent semiring monad @xmath366 ( instead of our side effect monad ) to study different but equivalent ways to present context - free languages : using grammars , behavioural differential equations and generalized regular expressions in which the kleene star is replaced by a unique fixed point operator .",
    "in the previous section we presented a framework , parameterized by a functor @xmath0 and a monad @xmath73 , in which systems of type @xmath30 ( that is , @xmath30-coalgebras ) can be studied using a novel equivalence @xmath202 instead of the classical @xmath201 . the only requirement we imposed was that @xmath168 has to be a @xmath73-algebra .    in this section , we will present functors @xmath0 for which the requirement of @xmath168 being a @xmath73-algebra is guaranteed because they can be _ lifted _ to a functor @xmath367 on @xmath73-algebra . for these functors , the equivalence @xmath202 coincides with @xmath368 . in other words ,",
    "working on @xmath30-coalgebras in @xmath69 under the novel @xmath202 equivalence is the same as working on @xmath367-coalgebras on @xmath73-algebras under the ordinary @xmath368 equivalence .",
    "next , we will prove that for this class of functors and an arbitrary monad @xmath73 the equivalence @xmath201 is contained in @xmath202 .",
    "instantiating this result for our first motivating example of non - deterministic automata will yield the well known fact that bisimilarity implies trace equivalence .",
    "let @xmath73 be a monad .",
    "an endofunctor @xmath369 is said to be the @xmath73-_algebra lifting _ of a functor @xmath370 if the following square commutes  @xcite . ] : @xmath371_{u^\\t}\\ar[r]^{f^ * } & \\set^\\t \\ar[d]^{u^\\t}\\\\ \\set \\ar[r]_{f } & \\set } \\ ] ] if the functor @xmath0 has a @xmath73-algebra lifting @xmath367 then @xmath168 is the carrier of the algebra @xmath372 .",
    "functors that have a @xmath73-algebra lifting are given , for example , by those endofunctors on @xmath69 constructed inductively by the following grammar @xmath373 where @xmath50 is an arbitrary set , @xmath204 is the constant functor mapping every set @xmath4 to the carrier of a @xmath73-algebra @xmath374 , and @xmath375 is an arbitrary functor . since the forgetful functor @xmath376 creates and preserves limits , both @xmath377 and @xmath378 have a @xmath73-algebra lifting if @xmath0 , @xmath379 , and @xmath380 have .",
    "finally , @xmath381 has a @xmath73-algebra lifting for every endofunctor @xmath375 given by the assignment @xmath382 .",
    "note that we do not allow taking coproducts in the above grammar , because coproducts of @xmath73-algebras are not preserved in general by the forgetful functor @xmath109 .",
    "instead , one could resort to extending the grammar with the carrier of the coproduct taken directly in @xmath106 .",
    "for instance , if @xmath73 is the ( finite ) powerset monad , then we could extend the above grammar with the functor @xmath383 .",
    "all the functors of the examples in sections [ sec : motiv ] and [ sec : general ] , as well as those in section [ secbbat ] , can be generated by the above grammar and , therefore , they have a @xmath73-algebra lifting .",
    "now , let @xmath0 be a functor with a @xmath73-algebra lifting and for which a final coalgebra @xmath384 exists . if @xmath384 can be constructed as the limit of the final sequence ( for example assuming the functor accessible  @xcite ) , then , because the forgetful functor @xmath107 preserves and creates limits",
    ", @xmath384 is the carrier of a @xmath73-algebra , and it is the final coalgebra of the lifted functor @xmath367 .",
    "further , for any @xmath30-coalgebra @xmath167 , the unique @xmath0-coalgebra homomorphism @xmath63\\!]}$ ] as in diagram ( [ f - final ] ) is a @xmath32-algebra homomorphism between @xmath75 and @xmath384 .",
    "conversely , the carrier of the final @xmath367-coalgebra ( in @xmath106 ) is the final @xmath0-coalgebra ( in @xmath69 ) .",
    "intuitively , the above means that for an accessible functor @xmath0 with a @xmath73-algebra lifting @xmath367 , @xmath367-equivalence in @xmath106 coincides with @xmath0-equivalence with respect to @xmath73 in @xmath69 .",
    "the latter equivalence is coarser than the @xmath30-equivalence in @xmath69 , as stated in the following theorem .",
    "[ thm : main ] let @xmath73 be a monad . if @xmath0 is an endofunctor on @xmath69 for which a final coalgebra exists and with a @xmath73-algebra lifting , then @xmath201 implies @xmath286 .",
    "we first show that there exists a functor from the category of @xmath30-coalgebras to the category of @xmath0-coalgebras .",
    "this functor maps each @xmath30-coalgebra @xmath14 into the @xmath0-coalgebra @xmath385 and each @xmath30-homomorphism @xmath386 into the @xmath0-homomorphism @xmath387 . in order to prove that this is a functor we just have to show that @xmath388 is an @xmath0-homomorphism ( i.e. , the backward face of the following diagram commutes ) .",
    "@xmath389^{f^{\\sharp } } \\ar[dddl]|(0.36){\\hole } \\ar[rr]^{t(h ) } & & t(y ) \\ar[dddl]^{g^{\\sharp}}\\\\ x \\ar[rr]^(0.6)h \\ar[dd]_f \\ar[ur]^{\\eta_x } & & y \\ar[dd]^g \\ar[ur]^{\\eta_y } \\\\ \\\\",
    "ft(x ) \\ar[rr]_{ft(h ) } & & ft(y)}\\ ] ]    note that the front face of the above diagram commutes because @xmath390 is an @xmath30-homomorphism . also the top face commutes because @xmath76 is a natural transformation .",
    "thus @xmath391 and also @xmath392 since @xmath76 is the unit of the adjunction , then there exists a unique @xmath393 in @xmath394 such that @xmath395 . since both @xmath396 and @xmath397 are ( by construction )",
    "morphisms in @xmath394 , then @xmath398 .",
    "let @xmath3 and @xmath59 be two @xmath30-coalgebras and @xmath63\\!]}_x$ ] and @xmath63\\!]}_y$ ] their morphisms into the final @xmath30-coalgebra @xmath188 .",
    "let @xmath385 , @xmath399 and @xmath400 be the corresponding @xmath0-coalgebras and @xmath63\\!]}_{tx}$ ] , @xmath63\\!]}_{ty}$ ] and @xmath63\\!]}_{t\\omega}$ ] their morphisms into the final @xmath0-coalgebra @xmath401 . since @xmath402\\!]}_x ) \\colon ( t(x),f^{\\sharp } ) \\to ( t(\\omega ) , \\omega^{\\sharp})$ ] is an @xmath0-homomorphism , then by uniqueness , @xmath63\\!]}_{tx } = { [ \\ ! [ - ] \\!]}_{t\\omega } \\circ t({[\\ ! [ - ] \\!]}_x)$ ]",
    ".    @xmath403^{{[\\ ! [ - ] \\!]}_{tx } } \\ar@{}[dddl]^{f^{\\sharp } } \\ar[dddl]|(0.36){\\hole } \\ar[rr]^{t({[\\ ! [ - ] \\!]}_x ) } & & t(\\omega ) \\ar[dddl]^{\\omega^{\\sharp } } \\ar[rr]^{{[\\ ! [ - ] \\!]}_{t\\omega } } & & \\omega ' \\ar[dddl]^{\\omega ' } \\\\ x \\ar[rr]^(0.6){{[\\ ! [ - ] \\!]}_x } \\ar[dd]_f \\ar[ur]^{\\eta_x } & & \\omega \\ar[dd]^{\\omega } \\ar[ur]^{\\eta_{\\omega } } \\\\ \\\\",
    "ft(x ) \\ar[rr]_{ft({[\\ ! [ - ] \\!]}_x ) } \\ar@(dr , dl)[rrrr]_{f({[\\ ! [ - ] \\!]}_{tx } ) } & & ft(\\omega ) \\ar[rr]_{f({[\\ ! [ - ] \\!]}_{t\\omega } ) } & & f(\\omega ' ) } \\ ] ]    with the same proof , we obtain @xmath63\\!]}_{ty } = { [ \\ ! [ - ] \\!]}_{t\\omega } \\circ t({[\\ ! [ - ] \\!]}_y)$ ] .    recall that for all @xmath64 and @xmath65 , by definition , @xmath404 iff @xmath67\\!]}_x = { [ \\ ! [ y ] \\!]}_y$ ] and @xmath405 iff @xmath406\\!]}_{tx } = { [ \\ ! [ \\eta_y(y ) ] \\!]}_{ty}$ ] .",
    "suppose that @xmath67\\!]}_x = { [ \\ !",
    "[ y ] \\!]}_y$ ] .",
    "then , @xmath407\\!]}_x ) = \\eta_{\\omega } \\circ { [ \\ ! [ x ] \\!]}_x = \\eta_{\\omega } \\circ { [ \\ ! [ y ] \\!]}_y = t({[\\ ! [ \\eta_y ( y ) ] \\!]}_y)$ ] and , finally , @xmath406\\!]}_{tx } = { [ \\ ! [ - ] \\!]}_{t\\omega } \\circ t({[\\ ! [ \\eta_x(x ) ] \\!]}_x ) = { [ \\ ! [ - ] \\!]}_{t\\omega } \\circ t({[\\ ! [ \\eta_y(y ) ]",
    "\\!]}_y ) = { [ \\ ! [ \\eta_y(y ) ] \\!]}_{ty}$ ] .",
    "the above theorem instantiates to the well - known facts : for nda , where @xmath408 and @xmath409 , that bisimilarity implies language equivalence ; for partial automata , where @xmath408 and @xmath199 , that equivalence of pairs of languages , consisting of defined paths and accepted words , implies equivalence of accepted words ; for probabilistic automata , where @xmath410 \\times x^a$ ] and @xmath411 , that probabilistic bisimilarity implies probabilistic / weighted language equivalence .",
    "note that , in general , the above inclusion is strict .",
    "let @xmath14 be an @xmath30-coalgebra for a monad @xmath73 and a functor @xmath0 .",
    "if @xmath412 is pointwise injective , then @xmath201 on the @xmath30-coalgebra @xmath14 coincides with @xmath413 on the extended @xmath414-coalgebra @xmath415  @xcite .",
    "if moreover @xmath0 has a @xmath73-algebra lifting then , by the above theorem ( on the extended @xmath414-coalgebra ) , @xmath413 implies @xmath416 . combining the two implications",
    ", it follows that hat @xmath201 on the @xmath30-coalgebra @xmath14 implies @xmath416 on the extended @xmath414-coalgebra @xmath417 . finally , under the assumption that @xmath0 has a @xmath73-algebra lifting , we also have that @xmath286 the @xmath30-coalgebra @xmath14 implies @xmath416 on the extended @xmath414-coalgebra @xmath415",
    "this yields the following hierarchy of equivalences .",
    "@xmath418_\\supseteq\\\\ \\sim_{tft } \\ar@{-}[uur]^{\\subseteq } \\ar@{-}[rr]_{= } & & \\sim_{ft}\\ar@{-}[ur]_\\subseteq } \\ ] ]",
    "the operational semantics of interactive systems is usually specified by labeled transition systems ( lts s ) .",
    "the denotational semantics is given in terms of behavioural equivalences , which depend the amount of branching structure considered .",
    "bisimilarity ( full branching ) is sometimes considered too strict , while trace equivalence ( no branching ) is often considered too coarse .",
    "the _ linear time / branching time spectrum _",
    "@xcite shows a taxonomy of many interesting equivalences lying in between bisimilarity and traces .",
    "labeled transition system are coalgebras for the functor @xmath419 and the coalgebraic equivalence @xmath420 coincides with the standard notion of park - milner bisimilarity . in  @xcite",
    ", it is shown a coalgebraic characterization of traces semantics ( for lts s ) employing kleisli categories .",
    "more recently ,  @xcite have provided a characterization of trace , failure and ready semantics by mean of `` behaviour objects '' .",
    "another coalgebraic approach  @xcite relies on `` test - suite '' that , intuitively , are fragments of hennessy - milner logic . in this section , we show that ( finite ) trace equivalence  @xcite , complete trace equivalence  @xcite , failures  @xcite and ready semantics  @xcite can be seen as special cases of @xmath286 .    before introducing these semantics ,",
    "we fix some notations .",
    "a labeled transition system is a pair @xmath421 where @xmath4 is a set of states and @xmath422 is a function assigning to each state @xmath64 and to each label @xmath144 a finite set of possible successors states : @xmath423 means that @xmath424 . given a word @xmath230 , we write @xmath425 for @xmath426 and @xmath427 .",
    "when @xmath428 , @xmath429 iff @xmath430 .",
    "for a function @xmath431 , @xmath432 denotes the set of all labels `` enabled '' by @xmath433 , i.e. , @xmath434 , while @xmath435 denotes the set @xmath436 .",
    "let @xmath437 be a lts and @xmath64 be a state .",
    "a _ trace _ of @xmath121 is a word @xmath230 such that @xmath438 for some @xmath439 .",
    "a trace @xmath440 of @xmath121 is _ complete _ if @xmath425 and @xmath439 stops , i.e. , @xmath441 .",
    "a _ failure pair _ of @xmath121 is a pair @xmath442 such that @xmath425 and @xmath443 .",
    "ready pair _ of @xmath121 is a pair @xmath442 such that @xmath425 and @xmath444 .",
    "we use @xmath445 , @xmath446 , @xmath447 and @xmath448 to denote , respectively , the set of all traces , complete traces , failure pairs and ready pairs of @xmath121 . for @xmath449 ranging over @xmath450 and @xmath451 , two states @xmath121 and @xmath439 are @xmath449-equivalent iff @xmath452 .    for an example , consider the following transition systems labeled over @xmath453 .",
    "they are all trace equivalent because their traces are @xmath454 .",
    "the trace @xmath125 is also complete for @xmath455 , but not for the others . only @xmath456 and @xmath13 are failure equivalent , since @xmath457 is a failure pair only of @xmath455 , while @xmath458 and @xmath459 are failure pairs of @xmath455 , @xmath456 and @xmath13 , but not of @xmath340 .",
    "finally they are all ready different , since @xmath460 is a ready pair only of @xmath455 , @xmath461 is a ready pair of @xmath340 and @xmath13 but not of @xmath456 , and @xmath458 and @xmath459 are ready pairs only of @xmath456 and @xmath13 .",
    "@xmath462^{a } \\ar[dl]_{a } & & & q \\ar[d]^{a } & & & r \\ar[dr]^{a}\\ar[dl]_{a } & & & s \\ar[d]|a \\ar[dr]^{a}\\ar[dl]_{a } \\\\   & \\ar[dr]^{c}\\ar[dl]_{b } & & & \\ar[dr]^{c}\\ar[dl]_{b } & & \\ar[d]_{b } & & \\ar[d]^{c } &    \\ar[d]_b & \\ar[rd]_b\\ar[ld]^c & \\ar[d]^c\\\\   & &   & & & & &   & & & & } \\ ] ]    we can now show that these equivalences are instances of @xmath202 .",
    "we first show ready equivalence in details and then , briefly , the others .",
    "take @xmath409 and @xmath463 .",
    "for each set @xmath4 , consider the function @xmath464 defined for all @xmath465 by @xmath466 this function allows to transform each lts @xmath467 into the @xmath30-coalgebra @xmath468 .",
    "the latter has the same transitions of @xmath469 , but each state @xmath121 is `` decorated '' with the set @xmath470 .",
    "now , by employing the powerset construction , we transform @xmath471 into the @xmath0-coalgebra @xmath472 , where , for all @xmath473 , @xmath144 , the functions @xmath474 and @xmath475 are @xmath476    the final @xmath0-coalgebra is @xmath477 where @xmath128 is defined as usual .",
    "@xmath478_{\\delta}\\ar[r]^{\\{\\cdot\\ } } & \\pow(x)\\ar@{}[ddrrr]|{\\small\\begin{array}{l } { [ \\ ! [ y ] \\!]}(\\epsilon ) = o(y)\\\\ { [ \\ ! [ y ] \\!]}(aw ) = { [ \\ ! [ t(y)(a ) ] \\!]}(w)\\\\ \\end{array }   } \\ar[ddl]^-{<o , t>}\\ar@{-->}[rrr]^{{[\\ ! [ - ] \\ ! ] } } & & & \\pow(\\pow(a))^{a^ * } \\ar[dd]^{<\\epsilon , ( -)_a>}\\\\ ( \\pow(x))^a \\ar[d]_{\\pi^\\mathcal{r}_x } & & & \\\\",
    "\\pow(\\pow(a ) ) \\times ( \\pow(x))^a\\ar@{-->}[rrrr ] & & & & \\pow(\\pow(a))\\times ( \\pow(\\pow(\\pow(a))^{a^*}))^a } \\ ] ] summarizing , the final map @xmath63\\ ! ] } \\colon \\pow(x ) \\to \\pow(\\pow(a))^{a^*}$ ] maps each @xmath140 into a function assigning to each word @xmath440 , the set @xmath479 . in other terms , @xmath480\\!]}(w)$ ] iff @xmath481 .",
    "for the state @xmath13 depicted above , @xmath482\\!]}(\\epsilon)=\\{\\{a\\}\\}$ ] , @xmath482\\!]}(a)=\\{\\{b\\ } , \\{b , c\\ } , \\{c\\}\\}$ ] , @xmath482\\!]}(ab)={[\\ ! [ \\{s\\ } ] \\!]}(ac)=\\{\\emptyset\\}$ ] and for all the other words @xmath440 , @xmath482\\!]}(w)=\\emptyset$ ] .",
    "the other semantics can be characterized in the same way , by choosing different functors @xmath0 and different functions @xmath483 .    for failure semantics ,",
    "take the same functor as for the ready semantics , that is @xmath463 and a new function @xmath484 defined @xmath485 by @xmath486 the @xmath30-coalgebra @xmath487 has the same transitions of the lts @xmath469 , but each state @xmath121 is `` decorated '' with the set @xmath435 .",
    "for both trace and complete trace equivalence , take @xmath488 ( as for nda ) . for trace equivalence",
    ", @xmath489 maps @xmath465 into @xmath490 .",
    "intuitively , @xmath491 is an nda where all the states are accepting . for complete traces , @xmath492 maps @xmath433 in @xmath493 if @xmath494 ( and in @xmath495 otherwise ) .    by taking @xmath411 instead of @xmath496",
    ", we hope to be able to characterize probabilistic trace , complete trace , ready and failure as defined in @xcite .",
    "in this paper , we lifted the powerset construction on automata to the more general framework of @xmath30-coalgebras .",
    "our results lead to a uniform treatment of several kinds of existing and new variations of automata ( that is , @xmath30-coalgebras ) by an algebraic structuring of their state space through a monad @xmath32 .",
    "we showed as examples partial mealy machines , structured moore automata , nondeterministic , partial and probabilistic automata .",
    "furthermore , we have presented an interesting coalgebraic characterization of pushdown automata and showed how several behavioural equivalences stemming from concurrency theory can be retrieved from the general framework .",
    "it is worth mentioning that the framework instantiates to many other examples , among which are _ weighted automata _",
    "these are simply structured moore automata for @xmath266 and @xmath497 ( for a semiring @xmath498 )  @xcite .",
    "it is easy to see that @xmath201 coincides with weighted bisimilarity  @xcite , while @xmath202 coincides with weighted language equivalence  @xcite .",
    "some of the aforementioned examples can also be coalgebraically characterized in the framework of  @xcite .",
    "there , instead of considering @xmath30-coalgebras on @xmath69 and @xmath367-coalgebras on @xmath394 ( the eilenberg - moore category ) , @xmath381-coalgebras on @xmath69 and @xmath499-coalgebras on @xmath500 ( the _ kleisli _ category ) are studied .",
    "the main theorem of  @xcite states that under certain assumptions , the initial @xmath375-algebra is the final @xmath499-coalgebra that characterizes ( generalized ) trace equivalence .",
    "the exact relationship between these two approaches has been studied in  @xcite ( and , indirectly , it could be deduced from  @xcite and  @xcite ) .",
    "it is worth to remark that many of our examples do not fit the framework in  @xcite : for instance , the exception , the side effect , the full - probability and the interactive output monads do not fulfill their requirements ( the first three do not have a bottom element and the latter is not commutative ) .",
    "moreover , we also note that the example of partial mealy machines is not purely trace - like , as all the examples in  @xcite .",
    "the idea of using monads for modeling automata with non - determinism , probabilism or side - effects dates back to the `` @xmath152-machines '' of  @xcite that , rather than coalgebras , rely on algebras .",
    "more precisely , the dynamic of a @xmath152-machine is a morphism @xmath501 , where @xmath0 is a functor and @xmath32 is a monad ( for instance the transitions of @xmath32-structured moore automata are a function @xmath502 mapping a state and an input symbol into an element of @xmath503 ) .",
    "analogously to our approach , each @xmath152-machine induces an `` implicit @xmath152-machine '' having @xmath503 as state space .",
    "many examples of this paper ( like moore automata ) can be seen as @xmath152-machines , but those systems that are essentially coalgebraic ( like mealy machines ) do not fit the framework in  @xcite .",
    "there are several directions for future research . on the one hand",
    ", we will try to exploit _",
    "@xmath0-bisimulations up to @xmath32 _",
    "@xcite as a sound and complete proof technique for @xmath286 . on the other hand",
    ", we would like to lift many of those coalgebraic tools that have been developed for `` branching equivalences '' ( such as coalgebraic modal logic @xcite and ( axiomatization for ) regular expressions  @xcite ) to work with the `` linear equivalences '' induced by @xmath286 .",
    "we have pursued further the applications to decorated traces and the challenging modeling of the full linear - time spectrum in a separate paper  @xcite , work which we also plan to extend to probabilistic traces .",
    "autebert , j. berstel , and l. boasson .",
    "context - free languages and push - down automata . in g. rozenberg and a. salomaa ( eds . ) , _ handbook of formal languages _ , volume 1 , pages 111 - 174 .",
    "springer - verlag , 1997 .",
    "bonsangue , j.j.m.m .",
    "rutten , and a. silva . an algebra for kripke polynomial coalgebras . in _ proceedings of 24th annual ieee symposium on logic in computer science ( lics 2009 ) _ , pages 4958 .",
    "ieee computer society , 2009 .",
    "c. jou and s.a .",
    "equivalences , congruences , and complete axiomatizations for probabilistic processes . in j.",
    "baeten and j.w .",
    "klop ( eds ) , _ proceedings of concur 90 _ , volume 458 of _ lecture notes in computer science _ , pages 367383 , springer , 1990 .",
    ". a coalgebraic characterization of behaviours in the linear time - branching time spectrum . in _ proceedings of the 19th international workshop on recent trends in algebraic development techniques ( wadt 2008 ) _ , volume 5486 of _ lecture notes in computer science _ ,",
    "pages 128140 .",
    "springer , 2009 .",
    "a. silva , f. bonchi , m. bonsangue and j. rutten .",
    "generalizing the powerset construction , coalgebraically . in proceedings of _",
    "iarcs annual conference on foundations of software technology and theoretical computer science , ( fsttcs 2010 ) _ , volume 8 of _ lipics _ , pages 272  283 , schloss dagstuhl - leibniz - zentrum fuer informatik , 2010 .    j. winter , m.m .",
    "bonsangue , j.j.m.m .",
    "context - free languages , coalgebraically . in a.",
    "corradini , b. klin , and c. cirstea , ( eds . ) , _ proceedings of 4th int .",
    "conference on algebra and coalgebra in computer science ( calco 2011 ) _ , volume 6859 of _ lecture notes in computer science _",
    ", pages 359 - 376 , springer , 2011 ."
  ],
  "abstract_text": [
    "<S> the powerset construction is a standard method for converting a nondeterministic automaton into a deterministic one recognizing the same language . in this paper , we lift the powerset construction from automata to the more general framework of coalgebras with structured state spaces . </S>",
    "<S> coalgebra is an abstract framework for the uniform study of different kinds of dynamical systems . </S>",
    "<S> an endofunctor @xmath0 determines both the type of systems ( @xmath0-coalgebras ) and a notion of behavioural equivalence ( @xmath1 ) amongst them . </S>",
    "<S> many types of transition systems and their equivalences can be captured by a functor @xmath0 . </S>",
    "<S> for example , for deterministic automata the derived equivalence is language equivalence , while for non - deterministic automata it is ordinary bisimilarity .    </S>",
    "<S> we give several examples of applications of our generalized determinization construction , including partial mealy machines , ( structured ) moore automata , rabin probabilistic automata , and , somewhat surprisingly , even pushdown automata . to further witness the generality of the approach </S>",
    "<S> we show how to characterize coalgebraically several equivalences which have been object of interest in the concurrency community , such as failure or ready semantics . </S>"
  ]
}