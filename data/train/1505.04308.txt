{
  "article_text": [
    "* background .",
    "* leader election is one of the fundamental problems in distributed computing @xcite .",
    "it calls for all nodes of a network to agree on a single node , called the leader .",
    "this classic problem was first formulated in @xcite in the study of local area token ring networks , where , at all times , exactly one node ( the owner of a circulating token ) has the right to initiate communication .",
    "when the token is accidentally lost , a leader is elected as the initial owner of the token .",
    "if the nodes of the network have distinct labels , then agreeing on a single node means that all nodes have to output the label of the elected leader .",
    "however , in many applications , even if nodes have distinct identities , they may be reluctant to reveal them , e.g. , for privacy or security reasons .",
    "hence it is important to design leader election algorithms that do not depend on the knowledge of such labels and that can work in anonymous networks as well . under this scenario ,",
    "agreeing on a single node means that every node has to output a simple path ( coded as a sequence of port numbers ) to a common node .",
    "* model and problem description . *",
    "the network is modeled as an undirected connected graph with @xmath3 nodes and with diameter @xmath5 at most @xmath19 . in this paper , we restrict attention to tree networks , i.e. , connected networks without cycles .",
    "we denote by @xmath20 the diameter of tree @xmath2 .",
    "nodes do not have any identifiers . on the other hand , we assume that , at each node @xmath0 , each edge incident to @xmath0 has a distinct _ port number _ from @xmath21 , where @xmath22 is the degree of @xmath0 .",
    "hence each edge has two corresponding port numbers , one at each of its endpoints .",
    "port numbering is _ local _ to each node , i.e. , there is no relation between port numbers at the two endpoints of an edge .",
    "initially each node knows only its own degree .",
    "the task of leader election is formulated as follows .",
    "every node @xmath0 of the tree must output a sequence @xmath23 of nonnegative integers .",
    "for each node @xmath0 , let @xmath24 be the path starting at @xmath0 that results from taking the number @xmath25 from @xmath26 as the outgoing port at the @xmath27 node of the path .",
    "all paths @xmath24 must be simple paths in the tree that end at a common node , called the leader . in this paper , we consider deterministic leader election algorithms .",
    "note that , in the absence of port numbers , there would be no way to identify the elected leader by non - leaders , as all ports , and hence all neighbours , would be indistinguishable to a node .",
    "security and privacy reasons for not revealing node identifiers are irrelevant in the case of port numbers .",
    "we use the extensively studied @xmath28 communication model @xcite . in this model ,",
    "communication proceeds in synchronous rounds and all nodes start simultaneously . in each round",
    ", each node can exchange arbitrary messages with all of its neighbours and perform arbitrary local computations . for any tree @xmath2 , any @xmath29 and any node @xmath30 in @xmath2",
    ", we use @xmath31 to denote the _ view _ acquired in @xmath2 by @xmath30 within @xmath32 communication rounds .",
    "this is all the information that @xmath0 gets about the tree @xmath2 in @xmath32 rounds .",
    "thus , the view @xmath31 in @xmath2 consists of the subtree of @xmath2 induced by all nodes at distance at most @xmath32 from @xmath30 , together with all the port numbers at these nodes , and with the degrees of all nodes at distance exactly @xmath32 from @xmath30 .",
    "if no additional knowledge is provided _ a priori _ to the nodes , the decisions of @xmath30 in round @xmath32 in any deterministic algorithm are a function of @xmath31 . in most cases ,",
    "a node s view is considered in the underlying tree in which leader election is being solved , and then the subscript @xmath2 is omitted .",
    "the _ time _ of leader election is the minimum number of rounds sufficient to complete it by all nodes .",
    "it is well known that the synchronous process of the @xmath28 model can be simulated in an asynchronous network .",
    "this can be achieved by defining for each node separately its asynchronous round @xmath33 ; in this round , a node performs local computations , then sends messages stamped @xmath33 to all neighbours , and waits until it gets messages stamped @xmath33 from all neighbours . to make this work ,",
    "every node is required to send at least one ( possibly empty ) message with each stamp , until termination .",
    "all of our results can be translated for asynchronous networks by replacing `` time of completing a task '' by `` the maximum number of asynchronous rounds to complete it , taken over all nodes '' .    for anonymous trees ,",
    "the task of leader election is not always feasible , regardless of the allocated time .",
    "this is the case when the tree is _ symmetric _ ,",
    "i.e. , when there exists a non - trivial port - preserving automorphism of it .",
    "such an automorphism is defined as a bijection @xmath34 , where @xmath35 is the set of nodes , such that @xmath36 is an edge with port numbers @xmath37 at @xmath30 and @xmath38 at @xmath39 if and only if @xmath40 is an edge with port numbers @xmath37 at @xmath41 and @xmath38 at @xmath42 .",
    "it is easy to see that leader election is possible in a tree only if the tree is not symmetric .",
    "symmetric trees are easy to characterize .",
    "indeed , every tree has a _ centre _ which is either a node or an edge defined as follows .",
    "if the diameter @xmath5 is even , then the _ central node _ is the unique node in the middle of every simple path of length @xmath5 , and if the diameter @xmath5 is odd , then the _ central edge _ is the unique edge in the middle of every simple path of length @xmath5 .",
    "a tree is symmetric if and only if @xmath5 is odd , ports at the central edge are equal , and the two subtrees resulting from the deletion of the central edge are ( port - preserving ) isomorphic . for symmetric trees , the only non - trivial automorphism is the one switching the corresponding nodes of these subtrees , and this prevents leader election .",
    "moreover , even in non - symmetric trees , leader election may be impossible if the allocated time is too short .",
    "consider the line of length 6 with port numbers 0,0,1,1,0,0,1,1,0,1,0,0 ( from left to right ) . if the allocated time is 1 , then leader election is impossible even if nodes know _ a priori _ the entire map of the line . indeed ,",
    "neither of the two leaves knows whether it is the left or the right leaf and can not learn this fact in time 1 , and thus , leaves can not output correct simple paths to a common node ( the formal proof is slightly more complicated ) . hence , for any non - symmetric tree @xmath2 , it is important to introduce the parameter @xmath43 defined as the minimum time in which leader election is feasible , assuming that each node is given the entire map of @xmath2 with all port numbers faithfully mapped ( but without the position of the node marked in the map ) . for the line @xmath2 in the above example , @xmath44 .",
    "our aim is to establish tradeoffs between the allocated time and the amount of information that has to be given _ a priori _ to the nodes to enable them to perform leader election . following the framework of _ algorithms with advice _ ,",
    "see , e.g. , @xcite , this information ( a single binary string ) is provided to all nodes at the start by an oracle knowing the entire tree .",
    "the length of this string is called the _ size of advice_. of course , since the faithful map of the tree is the total information about it , asking about the minimum size of advice to solve leader election in time @xmath1 is meaningful only in the class of trees @xmath2 for which @xmath45 , because otherwise , no advice can help . in light of these remarks , we are able to precisely formulate the central problem of this paper .    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ for a given time @xmath1 , what is the minimum size of advice that permits leader election in time @xmath1 for all trees @xmath2 where @xmath45 ? _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    the paradigm of algorithms with advice has a far - reaching significance in the domain of network algorithms . establishing a tight bound on the minimum size of advice sufficient to accomplish a given task permits to rule out entire classes of algorithms and thus focus only on possible candidates .",
    "for example , if we prove that @xmath46 bits of advice are needed to perform a certain task in @xmath3-node trees , this rules out all potential algorithms that can work using only the diameter @xmath5 of the tree , as @xmath5 can be given to the nodes using @xmath47 bits , and the diameter can be , e.g. , logarithmic in the size of the tree .",
    "lower bounds on the size of advice give us impossibility results based strictly on the _ amount _ of initial knowledge outlined in a model s description .",
    "this more general approach should be contrasted with traditional results that focus on specific _ kinds _ of information available to nodes , such as the size , diameter , or maximum node degree .    * our results .",
    "* let @xmath2 be an @xmath3-node tree of diameter @xmath4 . for a given time @xmath1 allocated to leader election , we give upper and lower bounds on the minimum size of advice sufficient to perform leader election in time @xmath1 .",
    "an upper bound @xmath48 means that , for all trees @xmath2 with @xmath45 , leader election in time @xmath1 is possible given advice of size @xmath49 .",
    "we prove such a bound by constructing advice of size @xmath49 together with a leader election algorithm for all trees @xmath2 with @xmath45 that uses this advice and works in time @xmath1 .",
    "a lower bound @xmath50 means that there exist trees @xmath2 with @xmath45 for which leader election in time @xmath1 requires advice of size @xmath51 .",
    "proving such a bound means constructing a class consisting of trees @xmath2 with @xmath45 for which no leader election algorithm running in time @xmath1 with advice of size @xmath52 can succeed .",
    "for most values of @xmath1 , our upper and lower bounds are either tight up to multiplicative constants , or they differ only by a logarithmic factor . more precisely , these bounds are the following . while leader election in time @xmath5 can be performed without any advice , for time @xmath6 we give tight upper and lower bounds of @xmath7 . for time @xmath8 ,",
    "we give tight upper and lower bounds of @xmath7 for even values of @xmath5 and tight upper and lower bounds of @xmath9 for odd values of @xmath5 . moving to shorter time , in the interval @xmath10 $ ] for constant @xmath11 , we prove an upper bound of @xmath12 and a lower bound of @xmath13 , the latter valid whenever @xmath5 is odd or time is at most @xmath14 . hence , with the exception of the special case when @xmath5 is even and",
    "time is exactly @xmath15 , our bounds leave only a logarithmic gap in this time interval .",
    "( see section 7 for a discussion of this special case . ) finally , for time @xmath16 for any constant @xmath17 ( except for the case of very small diameters , namely for @xmath53 ) we again give tight upper and lower bounds , this time @xmath18 .",
    "the above results are summarized in figure [ results ] .",
    "@xmath54{9cm}{\\centering \\textbf{minimum size of advice}}\\\\    \\hline diam & 0 \\\\ \\hline \\parbox[m]{5cm}{\\centering $ diam-1 $ } & \\theta(\\log{d})\\\\ \\hline \\multirow{2}{*}{$diam-2 $ } & \\theta(\\log{d } ) \\textrm { for even $ diam$}\\\\   & \\theta(\\log{n } ) \\textrm { for odd $ diam$}\\\\ \\hline \\multirow{3}{*}{\\parbox[t][][t]{5cm}{\\centering $ \\beta",
    "\\cdot diam \\leq \\textrm{time } \\leq diam-3$\\\\ $ \\textrm{for constant } \\beta > \\frac{1}{2}$ } } & o(\\frac{n\\log{n}}{d } ) \\textrm { upper bound } \\\\   & \\omega(\\frac{n}{d } ) \\textrm { lower bound for odd $ diam$ or time $ \\leq diam-4$}\\\\   & \\textrm { ?",
    "lower bound for even $ diam$ and time $ = diam-3$}\\\\ \\hline \\multirow{3}{*}{\\parbox[t][][t]{5cm}{\\centering $ \\alpha \\cdot diam$ \\\\ \\textrm{for constant $ \\alpha < \\frac{1}{2}$ and $ diam \\in \\omega(\\log^2{n})$ } } } & \\ \\\\     & \\theta(n)\\\\   & \\ \\\\    \\hline \\end{array}\\ ] ]    our results show that the minimum size of advice sufficient to perform leader election is very sensitive to the amount of time allocated to this task , and that this sensitivity occurs at different time values depending on the relation between the diameter and the size of the tree .",
    "if @xmath5 is odd and small compared to @xmath3 , e.g. , @xmath55 , then a difference of one round ( between @xmath56 and @xmath57 ) causes an exponential jump of the size of information required for leader election , and _ another _ exponential jump occurs in this case between time @xmath57 and @xmath58 . by contrast , for larger diameter , e.g. , @xmath59 , the first exponential jump disappears but the second still holds . on the other hand ,",
    "perhaps surprisingly , an exponential jump occurs at fixed time @xmath57 when the diameter is small ( e.g. , logarithmic in @xmath3 ) , depending only on the parity of the diameter .",
    "* related work . *",
    "the leader election problem was introduced in @xcite .",
    "this problem was first extensively studied in the scenario where all nodes have distinct labels .",
    "initially , it was investigated for rings . a synchronous algorithm based on label comparisons and using @xmath60 messages",
    "was given in @xcite .",
    "in @xcite it was proved that this complexity is optimal for comparison - based algorithms .",
    "on the other hand , the authors showed an algorithm using a linear number of messages but requiring very large running time .",
    "an asynchronous algorithm using @xmath60 messages was given , e.g. , in @xcite , and the optimality of this message complexity was shown in @xcite .",
    "deterministic leader election in radio networks has been studied , e.g. , in @xcite , as well as randomized leader election , e.g. , in @xcite . in @xcite ,",
    "the leader election problem was approached in a model based on mobile agents for networks with labeled nodes .",
    "many authors @xcite studied leader election in anonymous networks . in particular , @xcite characterize message - passing networks in which leader election can be achieved when nodes are anonymous . in @xcite ,",
    "the authors study the problem of leader election in general networks under the assumption that node labels are not unique .",
    "they characterize networks in which this can be done and give an algorithm which performs election when it is feasible . in @xcite ,",
    "the authors study feasibility and message complexity of leader election in rings with possibly nonunique labels , while , in @xcite , the authors provide algorithms for a generalized leader election problem in rings with arbitrary labels , unknown ( and arbitrary ) size of the ring , and for both synchronous and asynchronous communication .",
    "memory needed for leader election in unlabeled networks was studied in @xcite . in @xcite ,",
    "the authors investigated the time of leader election in anonymous networks by characterizing this time in terms of the network size , the diameter of the network , and an additional parameter called the level of symmetry , which measures how deeply nodes have to inspect the network in order to notice differences in their views of it . in @xcite , the authors studied the feasibility of leader election among anonymous agents that navigate in a network in an asynchronous way .    providing nodes or agents with arbitrary kinds of information that can be used to perform network tasks more efficiently",
    "has previously been proposed in @xcite .",
    "this approach was referred to as _ algorithms with advice_. the advice is given either to the nodes of the network or to mobile agents performing some network task . in the first case , instead of advice , the term _ informative labeling schemes _ is sometimes used if ( unlike in our scenario ) different nodes can get different information .",
    "several authors studied the minimum size of advice required to solve network problems in an efficient way . in @xcite ,",
    "given a distributed representation of a solution for a problem , the authors investigated the number of bits of communication needed to verify the legality of the represented solution .",
    "in @xcite , the authors compared the minimum size of advice required to solve two information dissemination problems using a linear number of messages . in @xcite , it was shown that advice of constant size given to the nodes enables the distributed construction of a minimum spanning tree in logarithmic time . in @xcite , the advice paradigm was used for online problems . in @xcite , the authors established lower bounds on the size of advice needed to beat time @xmath61 for 3-coloring cycles and to achieve time @xmath61 for 3-coloring unoriented trees . in the case of @xcite ,",
    "the issue was not efficiency but feasibility : it was shown that @xmath62 is the minimum size of advice required to perform monotone connected graph clearing . in @xcite ,",
    "the authors studied radio networks for which it is possible to perform centralized broadcasting in constant time .",
    "they proved that constant time is achievable with @xmath63 bits of advice in such networks , while @xmath64 bits are not enough . in @xcite ,",
    "the authors studied the problem of topology recognition with advice given to the nodes . in @xcite , the task of drawing an isomorphic map by an agent in a graph",
    "was considered , and the problem was to determine the minimum advice that has to be given to the agent for the task to be feasible .",
    "to the best of our knowledge , the problem of leader election with advice has never been studied before for anonymous networks . in @xcite ,",
    "the authors investigated the minimum size of advice sufficient to find the largest - labelled node in a graph .",
    "the main difference between @xcite and the present paper is that we consider networks without node labels .",
    "this is not a small difference : from the methodological perspective , breaking symmetry in anonymous networks relies heavily on the structure of the graph , and , as far as results are concerned , much more advice is needed .",
    "in this paper we use the word _",
    "path _ to mean a simple path in the tree . for nodes",
    "@xmath65 and @xmath66 , we denote by @xmath67 the distance from @xmath65 to @xmath66 , and by @xmath68 the path @xmath69 .",
    "nodes @xmath65 and @xmath66 are called the _ endpoints _ of this path .",
    "let @xmath66 be a node in @xmath70 .",
    "we say that @xmath70 is the _ concatenation _ of @xmath68 and @xmath71 and we write @xmath72 .",
    "the length of a path @xmath73 , denoted by @xmath74 , is the number of edges in it .",
    "denote by @xmath75 the sequence of all ports encountered when moving from @xmath65 to @xmath66 on @xmath68 .",
    "odd - indexed terms in @xmath76 are called the _ outgoing ports _ of @xmath76 .",
    "we also use the operator @xmath77 to denote the usual concatenation of sequences of integers , e.g. , when concatenating two port sequences .",
    "let @xmath0 be a node of a tree @xmath2 and let @xmath32 be a non - negative integer .",
    "an _ endless path in @xmath78 _ is a simple path of length @xmath32 , with endpoints @xmath0 and @xmath79 , such that @xmath79 is not a leaf in @xmath2 .",
    "a _ terminated path in @xmath78 _ is a simple path of length at most @xmath32 , with endpoints @xmath0 and @xmath79 , such that @xmath79 is a leaf in @xmath2 .",
    "see figure [ paths ] for examples of terminated and endless paths .",
    "s view up to distance @xmath32 , i.e. @xmath78 . the path between @xmath0 and @xmath79 is a terminated path in @xmath78 , while the path between @xmath0 and @xmath80 is an endless path in @xmath78 .",
    "all endless paths in @xmath78 starting at @xmath0 pass through node @xmath80 . ]",
    "in this section , we show tight upper and lower bounds of @xmath7 on the minimum size of advice sufficient to perform leader election in time @xmath6 in trees of diameter @xmath4 .",
    "the upper bound @xmath81 is straightforward : given the value of @xmath5 , every node @xmath0 can reconstruct the entire tree from @xmath82 as follows . for each endless path with endpoints @xmath0 , @xmath79 , where @xmath79 has some degree @xmath83",
    ", node @xmath0 attaches @xmath84 leaves to @xmath79 . hence , by using any centralized algorithm on the entire tree , all nodes can perform leader election whenever the tree is not symmetric .",
    "( this also shows that every non - symmetric tree @xmath2 has @xmath85 . )",
    "the matching lower bound is given by the following theorem .",
    "[ diam -1 ] consider any algorithm @xmath86 such that , for every non - symmetric tree @xmath2 , algorithm @xmath86 solves election within @xmath87 rounds .",
    "for every integer @xmath88 , there exists a tree @xmath2 with diameter at most @xmath19 and @xmath89 , for which algorithm @xmath86 requires advice of size @xmath90 .",
    "fix any integer @xmath88 .",
    "we will show a stronger statement : at least @xmath91 different advice strings are needed in order to solve election within @xmath92 rounds for some trees @xmath2 with diameter at most @xmath19 and @xmath93 . to prove this statement",
    ", we first construct a class of trees @xmath94 , where tree @xmath95 is the path of length @xmath83 . for each @xmath96 , let @xmath97 and @xmath98 be the endpoints of @xmath95 , and label the ports of @xmath95 such that the port sequence @xmath99 is equal to @xmath100 .",
    "see figure [ logdpaths ] for an illustration of @xmath95 .",
    "we will denote by @xmath101 and @xmath102 the sequences of outgoing ports that are outputted by @xmath97 and @xmath98 , respectively , at the end of the execution of algorithm @xmath86 in tree @xmath95 . note that algorithm @xmath86 is correct only if , for every @xmath96 , there exists a node @xmath103 such that sequence @xmath101 corresponds to a simple path from @xmath97 to @xmath104 , and sequence @xmath102 corresponds to a simple path from @xmath98 to @xmath104 .",
    "hence , algorithm @xmath86 is correct only if @xmath105 for each @xmath96 .     constructed in theorem [ diam -1 ] , for @xmath106 . ]",
    "next , to obtain a contradiction , assume that @xmath107 different advice strings are sufficient to solve election within @xmath92 rounds for each tree @xmath2 in @xmath108 . by the pigeonhole principle , there exist @xmath109 with @xmath110 such that the same advice string is provided to the nodes of both @xmath111 and @xmath112 when they execute algorithm @xmath86 . when executed at node @xmath113 in @xmath111 , algorithm @xmath86 halts in some round @xmath114 and outputs some port sequence @xmath115 .",
    "similarly , when executed at node @xmath116 in @xmath111 , algorithm @xmath86 halts in some round @xmath117 and outputs some port sequence @xmath118 . as noted above , we have that @xmath119 .",
    "we show that , when executed at node @xmath120 in @xmath112 , algorithm @xmath86 also halts in round @xmath121 and outputs @xmath115 .",
    "indeed , the algorithm is provided with the same advice string for both @xmath111 and @xmath112 , and @xmath122 .",
    "similarly , when executed at node @xmath123 in @xmath112 , algorithm @xmath86 halts in round @xmath124 and outputs @xmath118 .",
    "however , this implies that , in the execution of @xmath86 in tree @xmath112 , we have @xmath125 , which contradicts the correctness of @xmath86 .",
    "we finally show that , for every @xmath96 , we have @xmath126 .",
    "first assume that @xmath127 .",
    "for every node @xmath0 of @xmath95 , at least one of the endpoints of @xmath95 is in @xmath128 .",
    "hence @xmath0 can identify its position in the map of @xmath95 and output the sequence of outgoing ports leading from @xmath0 to @xmath97 . for @xmath129 , both leaves output the sequence @xmath130 and the central node outputs the empty sequence .",
    "in this section , we show tight upper and lower bounds on the minimum size of advice sufficient to perform leader election in time @xmath8 , for trees of diameter @xmath4 .",
    "these bounds depend on the parity of @xmath5 .",
    "they are @xmath131 for even values of @xmath5 , and @xmath46 for odd values of @xmath5 .",
    "we consider these two cases separately .",
    "consider any tree @xmath2 with @xmath3 nodes and even diameter @xmath4 .",
    "the lower bound @xmath132 on the minimum size of advice sufficient to perform leader election in time @xmath8 can be proven exactly as theorem [ diam -1 ] .",
    "we now prove the matching upper bound by providing an algorithm evenelect that solves election in time @xmath8 using @xmath133 bits of advice .",
    "the algorithm works by having each node find and elect the central node of the tree , which we denote by @xmath134 .",
    "the advice provided to the algorithm is the value of @xmath5 .",
    "let @xmath135 .",
    "the _ gateway _",
    "@xmath136 of a node @xmath0 is defined as the node in @xmath137 furthest from @xmath0 such that every endless path in @xmath137 passes through @xmath136 .",
    "we now give the pseudo - code of the algorithm executed at an arbitrary node @xmath0 in tree @xmath2 using advice @xmath138 .",
    "@xmath139 @xmath140 diameter of @xmath2 , as provided in @xmath138 @xmath141 use @xmath8 rounds of communication to learn @xmath137 @xmath137 contains no endless paths starting at @xmath0 : @xmath142 central node of @xmath137 : @xmath143 the node @xmath144 in @xmath137 furthest from @xmath0 such that every endless path in @xmath137 passes through @xmath144 [ startcalc ] @xmath145 , or , @xmath137 contains a node @xmath144 such that @xmath146 : @xmath147 : @xmath148 [ endcalc ] @xmath142 the node on @xmath149 at distance @xmath150 from @xmath0 [ vc ] output the sequence of outgoing ports of @xmath151    [ nodeelect ]    [ even ] algorithm evenelect solves leader election in trees of size @xmath3 and even diameter @xmath4 in time @xmath8 using @xmath133 bits of advice .",
    "we begin by proving the correctness of the algorithm . in particular",
    ", we must show that each node @xmath0 correctly computes the central node @xmath134 . if @xmath137 contains no endless paths starting at @xmath0 , then @xmath137 consists of the entire tree . in this case",
    ", @xmath0 can find the central node by inspection .",
    "otherwise , it follows that @xmath152 .",
    "the following result shows that @xmath134 always lies on the path from @xmath0 to @xmath136 .",
    "[ nodeonpath ] if @xmath0 is a node such that @xmath152 , then @xmath134 is on @xmath149 .    to prove the claim ,",
    "let @xmath153 , and let @xmath154 be any path starting from @xmath134 of length @xmath155 such that @xmath154 and @xmath156 are edge - disjoint .",
    "let @xmath157 be the path @xmath158 .",
    "note that @xmath159 .",
    "in particular , in @xmath137 , @xmath157 is an endless path starting at @xmath0 .",
    "therefore , by the definition of @xmath136 , node @xmath136 is on path @xmath157 .",
    "if @xmath136 is in @xmath154 , then @xmath134 is on @xmath149 , and we are done .",
    "finally , we show that @xmath136 can not appear before @xmath134 in @xmath157 , by way of contradiction .",
    "assume it does .",
    "by the definition of @xmath136 , there must exist some endless path in @xmath137 that contains @xmath136 but not @xmath134 .",
    "in particular , there must be a path @xmath160 of length at least @xmath6 with @xmath0 as one endpoint that passes through @xmath136 but not through @xmath134 .",
    "let @xmath79 be the endpoint of @xmath160 not equal to @xmath0 , and let @xmath144 be the node in @xmath160 that is furthest from @xmath0 and on @xmath161 .",
    "we consider the length of the path @xmath162 .",
    "( see figure [ proofpathseven ] for an illustration of the paths defined above . ) since @xmath163 , it follows that @xmath164 . also , note that @xmath165 .",
    "so , @xmath166 .",
    "finally , since @xmath144 appears before @xmath134 in @xmath157 , we have @xmath167 .",
    "therefore , @xmath168 , a contradiction .",
    "this concludes the proof of claim [ nodeonpath ] .     as defined in the proof of claim [ nodeonpath ] . ]",
    "we now show that @xmath0 correctly computes @xmath169 ( which it stores in @xmath150 ) at lines [ startcalc]-[endcalc ] .",
    "[ case1 ] suppose that @xmath152 .",
    "if @xmath145 , or , @xmath137 contains a node @xmath144 such that @xmath146 , then @xmath170 .    to prove the claim",
    ", first suppose that @xmath145 .",
    "it follows from claim [ nodeonpath ] that @xmath171 , which implies that @xmath170 .",
    "next , suppose that @xmath137 contains a node @xmath144 such that @xmath146 .",
    "it follows from claim [ nodeonpath ] that @xmath172 , so @xmath173 .",
    "hence , @xmath174 .",
    "note that , by the definition of the central node , we have @xmath175 .",
    "so , we have shown that @xmath176 , which implies that @xmath170 .",
    "this completes the proof of the claim .",
    "[ case2 ] suppose that @xmath152 .",
    "lf @xmath177 , and , for all @xmath178 , @xmath179 , then @xmath180 .",
    "we prove the contrapositive of this claim .",
    "namely , we show that , if @xmath170 and , for all @xmath181 , @xmath179 , then @xmath182 .",
    "let @xmath183 be the first edge on the path from @xmath134 to @xmath0 .",
    "let @xmath184 be the subtree induced by all nodes reachable from @xmath134 via a path starting with edge @xmath183 . for each node @xmath185",
    ", we have @xmath186 since @xmath134 lies on the path from @xmath0 to @xmath136 .",
    "hence , @xmath187 , i.e. , every path from @xmath134 to a node in @xmath184 has length at most @xmath188 . by the definition of the central node ,",
    "there must exist two distinct edges incident to @xmath134 that belong to paths @xmath189 of length @xmath155 starting at @xmath134 .",
    "neither of these edges is equal to @xmath183 , since @xmath184 does not contain a path of length @xmath155 starting at @xmath134 .",
    "let @xmath190 be the leaves of paths @xmath189 , respectively .",
    "since @xmath191 , it follows that @xmath192 and @xmath193 are endless paths in @xmath194 .",
    "rewrite @xmath195 and @xmath196 , and recall that the first edge of @xmath197 is not equal to the first edge of @xmath198 . by the definition of @xmath136",
    ", it follows that @xmath199 .",
    "therefore , @xmath145 , which proves the claim .    by claim [ nodeonpath ]",
    ", @xmath134 is precisely the node at distance @xmath169 from @xmath0 on @xmath149 . by claims [ case1 ] and [ case2 ]",
    ", we see that the value of @xmath150 computed in the algorithm is equal to @xmath169 .",
    "it follows that @xmath0 correctly calculates @xmath134 at line [ vc ] .",
    "finally , note that the advice consists of the value of @xmath5 , so the size of advice is @xmath133 .",
    "theorem [ even ] implies that , for any tree @xmath2 of even diameter @xmath5 , we have @xmath200",
    ".      we now provide tight upper and lower bounds of @xmath201 on the minimum size of advice sufficient to perform leader election in time @xmath8 , when @xmath5 is odd .",
    "our lower bound is valid even for the class of trees with fixed diameter @xmath19 . for the upper bound",
    ", we can provide the value of the diameter as part of the advice .",
    "consider any tree @xmath2 with @xmath3 nodes and odd diameter @xmath19 .",
    "we prove our upper bound by providing an algorithm oddelect that solves election in time @xmath107 using @xmath202 bits of advice .    at a high level ,",
    "our algorithm works as follows . using @xmath107 communication rounds",
    ", each node calculates its simple path to the closest endpoint of the central edge . for each node @xmath0 , this closest endpoint will be called @xmath0 s _ candidate_. the main difficulty of the algorithm is breaking symmetry between the two candidates .",
    "the advice helps the nodes decide which of the two possible candidates should be elected as leader , and provides the port number which leads from the non - elected candidate to the leader . to do this with a small number of bits , the advice succinctly describes a path which exists starting at one of the two endpoints of the central edge but not the other .",
    "the nodes that see this path starting from their candidate will elect their candidate , and the nodes that can not see this path starting from their candidate will use the port number provided in the advice to elect the other candidate .",
    "we now provide the details of the advice and the algorithm .",
    "let @xmath203 be the central edge of the tree .",
    "for each node @xmath0 , denote by @xmath204 the node in @xmath203 that is closest to @xmath0 .",
    "let @xmath205 .",
    "note that , by the definition of the central edge , for each node @xmath0 , we have @xmath206 . recall that the gateway @xmath136 of a node @xmath0 is defined as the node in @xmath207 furthest from @xmath0 such that every endless path in @xmath207 passes through @xmath136 .",
    "we first construct the advice .",
    "the first part of the advice string is the exact value of @xmath19 , which can be used to calculate the value of @xmath155 .",
    "the goal of the rest of the advice construction is to succinctly describe a sequence of port numbers that distinguishes one of the two candidate nodes from the other .",
    "we divide the set of trees into two classes .",
    "we say that a tree is _ separated _ if , for each node @xmath0 , @xmath149 contains the central edge .",
    "one bit of the advice string , called the `` separated bit '' , has value 1 if and only if @xmath2 is separated .",
    "if @xmath2 is separated , we construct the remainder of the advice string as follows . for each of the two endpoints @xmath208 of the central edge",
    ", we define the list @xmath209 consisting of all port sequences that can be obtained by following simple paths starting at @xmath210 that do not contain the central edge .",
    "these port sequences consist of both the outgoing and incoming port numbers encountered , in order , on each path .",
    "each list @xmath209 is sorted in ascending lexicographic order .",
    "the following result shows that @xmath211 and @xmath212 must differ .",
    "[ diff ] for any separated tree @xmath2 , if @xmath213 , then @xmath2 is symmetric .",
    "to prove the claim , it suffices to note that , if @xmath214 , then the subtrees rooted at @xmath215 and @xmath216 and resulting from the removal of the central edge are ( port - preserving ) isomorphic .",
    "it follows that the port numbers at the two endpoints of the central edge must be equal .",
    "hence @xmath2 is symmetric , which proves the claim .    by claim [ diff ]",
    ", there exists a port sequence that appears in exactly one of @xmath211 or @xmath212 .",
    "formally , for some @xmath217 , there is an integer @xmath218 such that the @xmath219 sequence in @xmath209 does not appear in @xmath220 .",
    "the remainder of the advice string is a tuple @xmath221 where :    * @xmath83 is the largest integer such that the @xmath219 sequences in @xmath209 and @xmath220 have equal prefixes of length  @xmath83 , * @xmath222 is the integer equal to the @xmath223 port number of the @xmath219 sequence in @xmath209 , and , * @xmath37 is the port number that leads from @xmath224 to @xmath210 .",
    "we now describe the advice string in the case where @xmath2 is not separated .",
    "the construction is similar to the case where @xmath2 is separated , except for a change in the definition of the lists @xmath211 and @xmath212 .",
    "in particular , for each of the two endpoints @xmath208 of the central edge , we define list @xmath209 to be all port sequences of length at most @xmath225 that can be obtained by following simple paths starting at @xmath210 . as before ,",
    "these port sequences consist of both the outgoing and incoming port numbers encountered , in order , on each path .",
    "again , each list @xmath209 is sorted in ascending lexicographic order .",
    "the following result shows that , also in the case of non - separated trees , lists @xmath211 and @xmath212 must differ .",
    "[ diff2 ] for any tree @xmath2 that is not separated , if @xmath213 , then @xmath226 .",
    "our proof of the claim proceeds in three steps .",
    "first , we find two leaves @xmath227 such that @xmath228 s candidate node is @xmath215 , @xmath229 s candidate node is @xmath216 , and @xmath230 .",
    "we then show that @xmath231 .",
    "finally , we show that this implies that @xmath226 . in what follows , for any sequence @xmath232",
    ", we will denote by @xmath233 the reverse of sequence @xmath232 .",
    "* finding @xmath228 and @xmath229 . *",
    "we first note that , since @xmath2 is not separated , there must be at least two nodes , say @xmath234 , such that @xmath235 does not use the central edge and has length @xmath236 .",
    "it follows that @xmath237 and @xmath238 have the same candidate node , which , without loss of generality , we assume is @xmath215 .",
    "further , it follows that @xmath239 , and that the last port numbers in @xmath240 and @xmath241 are different .",
    "let @xmath242 be the port number at @xmath216 corresponding to the central edge .",
    "let @xmath228 be a node in @xmath243 such that the last port number in @xmath244 is not equal to @xmath242 .",
    "we now set out to find a node @xmath229 such that @xmath245 and @xmath246 .",
    "since @xmath247 , it follows that @xmath228 is a leaf , so @xmath248 is a sequence of length @xmath236 with last port number equal to 0 .",
    "let @xmath249 be the prefix of length @xmath225 of @xmath248 .",
    "since @xmath249 is a sequence of length @xmath225 that can be obtained by following a simple path starting at @xmath215 , we know that @xmath249 appears in @xmath211 . since @xmath214 , it follows that @xmath249 also appears in @xmath212 .",
    "let @xmath229 be the node that is reached by following the outgoing ports of @xmath249 starting at @xmath216 . by our choice of @xmath228 , the first port number in @xmath249",
    "is not equal to @xmath242 , so @xmath250 does not use the central edge .",
    "it follows that @xmath245 .",
    "also , since @xmath228 and @xmath229 are leaves , it follows that @xmath251 .",
    "this completes the first step of the proof .    in what follows ,",
    "let @xmath252 be the first edge on the path from @xmath215 to @xmath228 , and let @xmath253 be the first edge on the path from @xmath216 to @xmath229 .",
    "let @xmath254 be the subtree induced by all nodes that can be reached by a simple path starting with edge @xmath252 , and let @xmath255 be the subtree induced by all nodes that can be reached by a simple path starting with edge @xmath253 . since all nodes in @xmath254 ( respectively , @xmath255 ) are at distance at most @xmath155 from @xmath215 ( respectively , @xmath216 ) , the fact that @xmath213 implies that there is a port - preserving isomorphism between @xmath254 and @xmath255 . since @xmath230",
    ", it follows that such an isomorphism maps @xmath228 to @xmath229 . * showing that @xmath256 * ( a symmetric argument proves the reverse inclusion . ) since @xmath257 , it suffices to show that each sequence @xmath258 of at most @xmath259 port numbers obtained by following a simple path @xmath260 starting at @xmath228 can also be obtained by following a simple path starting at @xmath229 .",
    "let @xmath258 be any such sequence .",
    "we consider two cases .",
    "first , suppose that @xmath260 does not contain @xmath215 .",
    "then @xmath260 lies entirely within @xmath254 . since there is a port - preserving isomorphism between @xmath254 and @xmath255 that maps @xmath228 to @xmath229 , the same path exists in @xmath255 starting at @xmath229 , as desired .",
    "next , suppose that @xmath260 does contain @xmath215 .",
    "we re - write @xmath261 for some port sequence @xmath262 .",
    "since @xmath230 and @xmath263 , it follows that the first @xmath236 ports of @xmath258 form @xmath264 .",
    "further , since @xmath265 , it follows that @xmath266 .",
    "since @xmath262 corresponds to a path starting at @xmath215 , the sequence @xmath262 appears in @xmath211 .",
    "since @xmath213 , we know that @xmath262 appears in @xmath212 , so @xmath262 is a sequence of port numbers that can be obtained by following a simple path starting at @xmath216 .",
    "hence , @xmath258 can be obtained by following a simple path starting at @xmath229 , as desired .",
    "this completes the second step of the proof .    *",
    "showing that @xmath231 implies that @xmath226 .",
    "* to obtain a contradiction , suppose that @xmath267 and assume that there is an algorithm that solves election in @xmath2 within @xmath107 rounds ( with any amount of advice ) .",
    "for any such algorithm , nodes @xmath228 and @xmath229 output the same value since @xmath231 . in particular , they both output outgoing port sequences of equal length , say @xmath150 .",
    "since @xmath228 and @xmath229 have different candidate nodes , and both @xmath228 and @xmath229 must elect the same node , it follows that at least one of the paths obtained by following their outputs must cross the central edge .",
    "hence , @xmath268",
    ". however , each of their outputs forms a path of length @xmath150 ending at the elected node .",
    "these two paths combine to form a simple path of length @xmath269 , a contradiction .",
    "this concludes the proof of the claim .    by claim [ diff2 ] , lists @xmath211 and @xmath212 must differ in the case that @xmath270 , i.e. , when leader election is possible in time @xmath107 .",
    "the remainder of the advice string consists of the tuple @xmath221 as defined in the case of separated trees .",
    "this concludes the description of the advice .",
    "we now give the pseudo - code of the algorithm executed at an arbitrary node @xmath0 in tree @xmath2 using advice @xmath138 .",
    "@xmath271 @xmath272 diameter of @xmath2 , as provided in @xmath138 @xmath273 use @xmath107 rounds of communication to learn @xmath207 //",
    "stage 1 : compute @xmath204 @xmath207 contains no endless paths starting at @xmath0 : @xmath274 central edge of @xmath207 @xmath275 endpoint of @xmath276 closest to @xmath0 : @xmath143 the node @xmath144 in @xmath207 furthest from @xmath0 such that every endless path in @xmath207 passes through @xmath144 @xmath207 contains a node @xmath144 such that @xmath146 : @xmath147 : @xmath148 @xmath275 the node on @xmath149 at distance @xmath150 from @xmath0 // stage 2 : determine whether or not @xmath204 should be elected as leader the `` separated bit '' in @xmath138 is 1 : @xmath277 : @xmath274 the edge incident to @xmath204 that lies on all endless paths starting at @xmath0 [ findcentral ] compute @xmath278 for each @xmath79 such that @xmath279 does not contain edge @xmath276 [ avoidcentral ] @xmath280 the lexicographically - ordered list of all such @xmath278[definel_v ] : compute every port sequence of length at most @xmath225 corresponding to paths starting at @xmath204 [ computepaths ] @xmath280 the lexicographically - ordered list of all such sequences retrieve @xmath281 from @xmath138 the @xmath223 port number of the @xmath219 sequence in @xmath282 is equal to @xmath222 : @xmath283 : @xmath284 //",
    "stage 3 : compute output @xmath285 : output the sequence of outgoing ports of @xmath286 : retrieve @xmath37 from @xmath138 output the sequence of outgoing ports of @xmath286 with @xmath37 appended to the end    [ edgeelect ]    [ ub - log ] algorithm oddelect solves leader election in trees @xmath2 with size @xmath3 , odd diameter @xmath19 and @xmath287 , in time @xmath107 using @xmath202 bits of advice .",
    "we begin by proving the correctness of each stage of the algorithm .",
    "* first stage .",
    "* we must show that each node @xmath0 correctly computes @xmath204 . if @xmath207 contains no endless paths starting at @xmath0 , then @xmath207 consists of the entire tree . in this case",
    ", @xmath0 can find the central edge by inspection and calculate @xmath204 as the closest endpoint of the central edge .",
    "otherwise , it follows that @xmath288 .",
    "the following result shows that @xmath204 always lies on the path from @xmath0 to @xmath136 .",
    "[ onpath ] if @xmath0 is a node such that @xmath288 , then @xmath204 is on @xmath149 .    to prove the claim , assume , without loss of generality , that @xmath289",
    "let @xmath290 , and let @xmath154 be any path starting from @xmath216 of length @xmath155 that does not use the central edge .",
    "let @xmath157 be the path @xmath291 .",
    "note that @xmath292 .",
    "in particular , in @xmath207 , @xmath157 is an endless path .",
    "therefore , by the definition of @xmath136 , node @xmath136 is on path @xmath157 .",
    "if @xmath293 is in @xmath294 , then @xmath215 is on @xmath149 , and we are done .",
    "finally , we show that @xmath136 can not appear before @xmath215 in @xmath157 , by way of contradiction .",
    "assume it does .",
    "by the definition of @xmath136 , there must exist some endless path in @xmath207 that contains @xmath136 but not @xmath215 .",
    "in particular , there must be a path @xmath160 of length at least @xmath91 with @xmath0 as one endpoint that passes through @xmath136 but not @xmath215 .",
    "let @xmath79 be the endpoint of @xmath160 not equal to @xmath0 , and let @xmath144 be the node in @xmath160 that is furthest from @xmath0 and on @xmath295 .",
    "we consider the length of the path @xmath296 .",
    "( see figure [ proofpathsodd ] for an illustration of the paths defined above . ) since @xmath297 , it follows that @xmath298 . also , note that @xmath299 .",
    "so , @xmath300 .",
    "finally , since @xmath144 appears before @xmath215 in @xmath157 , we have @xmath301 .",
    "therefore , @xmath302 , a contradiction .",
    "this concludes the proof of claim [ onpath ] .     as defined in the proof of claim [ onpath ] . ]",
    "we will use the following claim to show that each @xmath0 can determine its exact distance from @xmath204 .",
    "[ finddist ] consider any node @xmath0 such that @xmath288 .",
    "there exists a node @xmath144 in @xmath207 such that @xmath146 if and only if @xmath303 .",
    "we first prove the `` if '' direction .",
    "suppose that @xmath303 .",
    "let @xmath144 be a node such that @xmath304 and @xmath305 .",
    "the existence of @xmath144 is guaranteed by the definition of the central edge .",
    "thus , we have @xmath306 .",
    "further , we have @xmath307 , so @xmath144 is a node in @xmath207 . by claim [ onpath ] ,",
    "node @xmath204 is on @xmath149 , so @xmath308 , as required .",
    "next we prove the `` only if '' direction .",
    "suppose that @xmath309 .",
    "let @xmath144 be any node in @xmath207 .",
    "in particular , this means that @xmath310 .",
    "there are two cases to consider based on whether or not @xmath311",
    ", i.e. , whether or not @xmath0 and @xmath144 are on the same side of the central edge . in the first case ,",
    "suppose that @xmath311 .",
    "it follows that @xmath312 , so @xmath313 ( where the last equality follows from claim [ onpath ] ) .",
    "hence , @xmath314 , as required . in the second case ,",
    "suppose that @xmath315 .",
    "it follows that @xmath316 and @xmath317 intersect only at node @xmath204 since the shortest path from @xmath144 to @xmath204 passes through @xmath318 first . therefore , @xmath319 .",
    "since @xmath144 is in @xmath207 , it follows that @xmath310 , so @xmath320 .",
    "thus , @xmath321 ( where the last equality follows from claim [ onpath ] ) .",
    "hence , @xmath314 , as required .",
    "this concludes the proof of the claim .    by claim [ onpath ] ,",
    "@xmath204 is precisely the node at distance @xmath322 from @xmath0 on @xmath149 . by claim [ finddist ] , we see that the value of @xmath150 computed in the first stage of the algorithm is equal to @xmath322 .",
    "it follows that @xmath0 correctly calculates @xmath204 during stage 1 .",
    "* second stage . * to prove the correctness of this stage of the algorithm",
    ", we show that if @xmath323 for some @xmath217 , then @xmath324 ( as defined in the advice construction ) . in the case where @xmath2 is a separated tree",
    ", we see that the construction on lines [ avoidcentral ] and [ definel_v ] matches the definition of @xmath325 , as long as @xmath276 is the central edge .",
    "if the central edge was assigned to @xmath276 during stage 1 , then @xmath276 is still the central edge at line [ avoidcentral ] .",
    "otherwise , we must show that the central edge is assigned to @xmath276 at line [ findcentral ] .",
    "the following result confirms that this is the case .",
    "suppose that @xmath2 is separated and consider any node @xmath0 such that @xmath207 contains at least one endless path starting at @xmath0 .",
    "the central edge of @xmath2 is the edge incident to @xmath204 that lies on all endless paths starting at @xmath0 .    to prove the claim , recall that , since @xmath2 is separated , @xmath149 contains the central edge",
    "further , by the definition of @xmath136 , every endless path starting at @xmath0 passes through @xmath136 .",
    "it follows that every endless path starting at @xmath0 contains the central edge , which proves the claim .    in the case where @xmath2 is not a separated tree",
    ", it suffices to show that line [ computepaths ] is possible to carry out , i.e. , that each node @xmath0 can compute every port sequence of length at most @xmath225 corresponding to paths starting at @xmath204 . to see why this is the case , note that @xmath257 , so each node @xmath0 knows @xmath326 .",
    "since @xmath206 and @xmath0 has computed @xmath204 , it follows that @xmath0 also knows @xmath327 . from @xmath327",
    ", @xmath0 can compute all port sequences of length at most @xmath328 corresponding to paths of length @xmath188 starting at @xmath204 , and , using the degrees of nodes at distance @xmath188 from @xmath204 , @xmath0 can compute all port sequences of length at most @xmath225 corresponding to paths starting at @xmath204 .",
    "this matches the definition of @xmath209 in the case when the tree is not separated .",
    "therefore , regardless of whether @xmath2 is separated or not , the list @xmath282 is identical to the list @xmath209 corresponding to @xmath0 s candidate @xmath210 , as produced in the advice construction .",
    "* third stage .",
    "* to prove the correctness of this stage of the algorithm , we show that all nodes output a sequence of outgoing ports leading to the same node . without loss of generality , assume that , in the advice construction , the @xmath223 port of the @xmath219 sequence in @xmath211 is equal to @xmath222 , while the @xmath223 port of the @xmath219 sequence in @xmath212 is not equal to @xmath222 .",
    "hence , @xmath37 is defined as the port leading from @xmath216 to @xmath215 .",
    "we will show that the output of every node leads to node @xmath215 .",
    "we showed above that , in stage 2 of the algorithm , each node @xmath0 with @xmath289 sets @xmath282 to @xmath211 , so each such @xmath0 sets @xmath285 .",
    "moreover , each node @xmath0 with @xmath329 sets @xmath282 to @xmath212 , so each such @xmath0 sets @xmath330 .",
    "it follows that each node @xmath0 with @xmath289 outputs a sequence of outgoing ports leading to @xmath215 , while each node @xmath0 with @xmath329 outputs a sequence of outgoing ports leading to @xmath216 , with port @xmath37 appended .",
    "however , @xmath37 leads from @xmath216 to @xmath215 , so the output of each node @xmath0 with @xmath329 leads to @xmath215 .",
    "this concludes the proof of correctness .",
    "finally , note that the advice consists of 1 `` separated bit '' , the value of @xmath19 , and four integers whose values are each bounded above by @xmath3 .",
    "thus , the size of advice is @xmath202 .",
    "we finish this section by proving the matching lower bound of @xmath331 on the minimum size of advice sufficient to perform leader election in time @xmath8 , for odd values of @xmath5 . as a first step",
    ", we analyze the following abstract _",
    "pair breaking _",
    "problem with parameter @xmath332 , where @xmath332 is a positive integer .",
    "denote by @xmath35 the set of pairs @xmath333 , where @xmath334 and @xmath335 .",
    "the set @xmath35 is coloured with @xmath336 colours by a colouring function @xmath337 .",
    "knowing @xmath332 and @xmath338 , the goal is to find a function @xmath339 with the following property : @xmath340 , where @xmath341 .",
    "such functions will be called _",
    "symmetry breaking _ functions .",
    "what is the minimum integer @xmath336 for which there exists a colouring function @xmath337 such that this goal is attainable ?    we can interpret this problem as a game , in which for an instance @xmath333 players get each one part of the instance ( @xmath65 or @xmath66 ) , together with the colour of the instance , and each of them has to output `` i '' or `` you '' , in such a way that they agree on who is the winner .    in what follows",
    ", we will consider the number of colours used by a fixed colouring function @xmath338 on certain subsets of @xmath35 . to this end",
    ", we define the following notation . for any @xmath342 ,",
    "define @xmath343 , and define @xmath344 to be the number of different colours used by @xmath338 on the elements of @xmath345 .",
    "[ lbcs ] consider the pair breaking problem for parameter @xmath332 .",
    "suppose that there exists a colouring function @xmath346 for which there exists a symmetry breaking function @xmath347 .",
    "for any positive integer @xmath348 and any @xmath342 , if @xmath349 , then @xmath350 .",
    "we prove the result by induction on @xmath83 . in the base case , i.e. , when @xmath129 , suppose that @xmath351 , and , to obtain a contradiction , assume that @xmath352 .",
    "then , for any @xmath353 along with the single colour @xmath354 used to colour @xmath345 , we require all of the following :    1 .",
    "@xmath355 2 .",
    "@xmath356 3 .",
    "@xmath357    from ( 2 ) , we see that @xmath356 , so , by ( 3 ) , it follows that @xmath358 .",
    "this contradicts ( 1 ) , so our assumption that @xmath352 was incorrect .    as induction hypothesis ,",
    "assume that , for some @xmath348 , if @xmath349 , then @xmath350 .",
    "we now consider any set @xmath359 with @xmath360 , and prove that @xmath361 . to obtain a contradiction ,",
    "assume that @xmath362 .",
    "consider the subset of @xmath345 consisting of @xmath363 for all @xmath364 . by the pigeonhole principle ,",
    "at least @xmath365 of these pairs are assigned the same colour @xmath237 by @xmath338 .",
    "let @xmath366 and note that @xmath367 .",
    "we first show that @xmath368 , and then we will prove that this leads to a contradiction . from our assumption that @xmath362 , note that @xmath369 .",
    "further @xmath370 .",
    "it follows that @xmath371 .",
    "so , by the induction hypothesis , @xmath368 .",
    "finally , we show that @xmath368 contradicts our assumption that @xmath362 . to do this ,",
    "we first show that @xmath372 for every @xmath373 .",
    "consider an arbitrary @xmath373 , and let @xmath374 .",
    "note that @xmath375 , and , from the base case above , note that @xmath376 . since @xmath377",
    ", it follows that @xmath378 and @xmath379 are assigned @xmath237 by @xmath338 .",
    "therefore , the remaining element of @xmath380 , i.e. , @xmath333 , must be assigned a colour other than @xmath237 , as desired . however",
    ", this implies that @xmath381 .",
    "indeed , at least @xmath83 colours , all different from @xmath237 ( which @xmath338 uses to colour the pairs @xmath363 for each @xmath382 ) are used to colour @xmath383 ( see figure [ grid ] for an example . )",
    "this completes the induction .    .",
    "in this example , @xmath384 and @xmath345 is the section of the grid that lies above the dotted line .",
    "assume that @xmath338 has assigned an integer colour to every pair in @xmath345 , and that the entries along row @xmath385 are coloured as indicated .",
    "then , @xmath386 , and we have highlighted the corresponding rows and columns .",
    "the set @xmath383 consists of the entries where these rows and columns intersect , i.e. , the union of the patterned entries . as demonstrated in the proof , for every @xmath373 , entry @xmath333 is not coloured @xmath237 , since otherwise the three entries @xmath333 , @xmath387 , and @xmath388 would contradict the base case .",
    "therefore , the total number of colours needed to colour @xmath345 is at least one greater than the number needed to colour @xmath383 . ]",
    "[ lb - colour ] for any colouring function @xmath337 for which there exists a symmetry breaking function , we have @xmath389 .",
    "we apply lemma [ lbcs ] with @xmath390 , with @xmath391 .",
    "we set @xmath392 and find a lower bound for @xmath83 in terms of @xmath332 .",
    "clearly @xmath348 .",
    "note that @xmath393 , and that @xmath394 .",
    "hence , @xmath395 , so @xmath396 .",
    "therefore , @xmath397 , as required .",
    "we will now use the above result on the pair breaking problem to obtain a lower bound on the size of advice for leader election in time @xmath107 , for trees with odd diameter @xmath19 . to this end",
    ", we define the following class of trees of odd diameter @xmath19 , called _",
    "double brooms_. these trees will have size @xmath222 which satisfies @xmath398 for some integer @xmath399 .",
    "consider any such integers @xmath222 and @xmath399 .",
    "let @xmath400 be any ( computable ) bijection from positive integers to @xmath399-tuples of positive integers .",
    "we define the double broom @xmath401 of size @xmath222 , with positive integer parameters @xmath402 as follows .",
    "the _ handle _ of @xmath401 is a path of length @xmath403 , with endpoints @xmath404 and @xmath405 , such that the port sequence @xmath406 is a palindrome . to each endpoint of the handle ,",
    "attach the following tree of height 2 rooted at this endpoint .",
    "the first level of the tree @xmath407 attached to @xmath404 consists of @xmath408 nodes @xmath409 .",
    "the port at @xmath404 corresponding to the edge @xmath410 is @xmath33 and the port at @xmath411 corresponding to this edge is 0 .",
    "let @xmath412 and let @xmath413 .",
    "( the term @xmath414 is defined in this way to ensure that the entire double broom has size exactly @xmath222 . ) for each @xmath415 , attach @xmath113 leaves to node @xmath411 .",
    "the tree @xmath416 attached to the endpoint @xmath405 is defined analogously .",
    "this concludes the description of the double broom @xmath401 , see fig .",
    "[ doublebroom ] .    ]",
    "the following lemma gives a reduction from the pair breaking problem to leader election in time @xmath107 for double brooms .",
    "[ reduct ] suppose that there exists an algorithm @xmath86 solving leader election in time @xmath107 for the class of double brooms @xmath401 with odd diameter @xmath19 , fixed @xmath399 , and all positive integer parameters @xmath402 , which uses advice of size @xmath417 .",
    "then , for the pair breaking problem with parameter @xmath418 , there exists a colouring function that uses @xmath419 colours for which there exists a symmetry breaking function .",
    "we define a function @xmath420 which maps instances of the pair breaking problem to double brooms .",
    "more specifically , @xmath420 maps each pair @xmath333 to the double broom @xmath401 .",
    "let @xmath421 be the advice function for algorithm @xmath86 that maps double brooms @xmath401 to binary advice strings .",
    "let @xmath138 be the the range of @xmath421 , i.e. , the set of all advice strings needed by the algorithm .",
    "let @xmath422 be any bijection from binary strings to positive integers .    for the pair breaking problem with parameter @xmath332",
    ", we define the colouring function @xmath423 that takes each instance @xmath333 of the pair breaking problem and maps it to @xmath424 . intuitively , the colour of an instance @xmath333 is set to the advice given for the corresponding double broom .",
    "we now show that @xmath425 .",
    "since the size of advice for algorithm @xmath86 is @xmath417 , it follows that every advice string provided to the algorithm has size less than @xmath426 , for sufficiently large @xmath399 .",
    "it follows that the number of different advice strings needed by the algorithm is at most @xmath427 .",
    "therefore , the range of @xmath428 has size at most @xmath429 , as required .",
    "next , we show that there is a symmetry breaking function @xmath347 that uses this colouring function . for any integer @xmath430",
    ", we map @xmath431 to a double broom with one parameter equal to @xmath431 and the other parameter equal to the smallest positive integer not equal to @xmath431 .",
    "in particular , let @xmath432 be a function such that @xmath433 and @xmath434 for all @xmath435 . define the binary function @xmath347 as follows .",
    "it takes integer inputs @xmath436 , runs the elect algorithm on @xmath437 with advice @xmath438 , and outputs 0 if and only if the elected node is within distance @xmath439 from @xmath440 ( i.e. , closer to the endpoint of the handle to which @xmath441 is attached ) .",
    "we now prove that @xmath347 is indeed a symmetry breaking function .",
    "for any instance @xmath333 of the pair breaking problem , consider the values of @xmath442 and @xmath443 .",
    "first , note that @xmath444 is the advice string , say @xmath232 , that is provided to the @xmath86 algorithm for the tree @xmath401 .",
    "so , on the input pair @xmath445 , our function @xmath347 runs @xmath86 on @xmath446 with advice @xmath232 .",
    "note that , in the construction of both @xmath446 and @xmath401 , the same tree @xmath407 is attached to node @xmath404 . since the @xmath86 algorithm uses time @xmath107 , it follows that , for any leaf @xmath0 in @xmath407 , we have @xmath447 ( since the handle has length @xmath403 and @xmath407 has height 2 ) .",
    "hence , @xmath0 elects the same node in @xmath446 as it does when @xmath86 is executed on @xmath401 .",
    "similarly , on the input pair @xmath448 , the function @xmath347 runs @xmath86 on @xmath449 with advice @xmath232 , and elects the same node in @xmath449 as it does when @xmath86 is executed on @xmath401 .",
    "however , for any node @xmath144 in @xmath401 , exactly one of @xmath404 or @xmath405 is within distance @xmath439 from @xmath144 .",
    "therefore , @xmath450 , and hence @xmath451 is symmetry breaking , as required .",
    "corollary [ lb - colour ] and lemma [ reduct ] imply the following theorem .",
    "[ lb - log ] let @xmath452 be positive integers , where @xmath19 is odd",
    ". there exists a class @xmath453 of trees @xmath2 with size @xmath454 , diameter @xmath19 and @xmath270 , such that every leader election algorithm working in time @xmath107 on the class @xmath453 requires advice of size @xmath455 .",
    "choose integers @xmath222 and @xmath399 , such that @xmath398 and @xmath456 . hence @xmath457 .",
    "let @xmath453 be the class of double brooms @xmath401 , for all positive integers @xmath402 .",
    "corollary [ lb - colour ] and lemma [ reduct ] imply that the size of advice required by any leader election algorithm on this class is @xmath458 .",
    "for each node @xmath0 in any @xmath401 , the view @xmath459 includes both @xmath404 and @xmath405 , as well as at least one of the subtrees @xmath407 or @xmath416 .",
    "therefore , given the entire map of @xmath401 , node @xmath0 can locate itself on the map .",
    "further , node @xmath0 can compute values of @xmath65 and @xmath66 and output the sequence of outgoing ports of @xmath460 , where @xmath461 .",
    "hence @xmath270 .",
    "theorems [ ub - log ] and [ lb - log ] imply the following corollary .",
    "the minimum size of advice sufficient to do leader election in time @xmath107 in the class of @xmath454-node trees @xmath2 with odd diameter @xmath19 and @xmath270 is @xmath46 .",
    "for the time interval @xmath463 $ ] , for any constant @xmath11 , we provide upper and lower bounds on the minimum size of advice sufficient to perform leader election .",
    "our bounds are separated by a gap of only @xmath464 , except for the special case when @xmath5 is even and time is @xmath15 .      consider a tree @xmath2 with diameter @xmath465 , and let @xmath466 .",
    "let @xmath467 , and note that @xmath468 .    at a high level ,",
    "our algorithm first partitions the set of leaves into @xmath83 classes such that leaves in the same class belong to the same subtree of height @xmath469 .",
    "let @xmath470 be the roots of these subtrees of height @xmath471 .",
    "next , each node in @xmath2 chooses one of these @xmath472 as its _",
    "representative_. the advice provided to the algorithm consists of @xmath83 pieces , one piece for each @xmath473 .",
    "each piece instructs how to reach the leader starting at node @xmath472 .",
    "therefore , to solve leader election , each node @xmath0 can compute a path to the leader using the path to its representative , along with the advice .",
    "the main difficulty in designing the algorithm is to ensure that each node finds its representative and determines which piece of advice corresponds to it .    in what follows ,",
    "we will make use of an injective function @xmath420 that maps rooted trees with at most @xmath3 nodes to binary strings of fixed length in @xmath63 .",
    "( one example of such a function is discussed in section [ alphadiam ] . )",
    "we will apply this function to views of nodes in order to distinguish them . when @xmath420 is applied to a node s full view of the tree ( i.e. , to @xmath474 )",
    ", then the resulting binary string will be called the node s _ signature_. given two distinct nodes @xmath475 , we will say that _",
    "@xmath0 has a smaller signature than @xmath144 _ if @xmath476 is lexicographically smaller than @xmath477 .    to aid in the description and analysis of our algorithm",
    ", we carefully choose a node @xmath336 as the root of @xmath2 .",
    "this is the node that the algorithm will elect . in the case",
    "where @xmath19 is even , the central node of @xmath2 is chosen as the root . in the case where @xmath19 is odd ,",
    "the node on the central edge of @xmath2 that has the smaller signature is chosen as the root . in",
    "what follows , the depth of a node is defined as its distance from the root @xmath336 .",
    "[ [ the - representatives . ] ] the representatives .",
    "+ + + + + + + + + + + + + + + + + + + +    we define the _ representatives _ of an arbitrary tree @xmath478 using the following greedy subroutine that takes as input the map of @xmath478 and a designated root @xmath32 on the map .",
    "@xmath479 @xmath480 set of all leaves of @xmath478 that have depth at least @xmath471 @xmath481 @xmath482 @xmath483 deepest leaf in @xmath484 @xmath485 ancestor of @xmath486 at distance @xmath469 remove from @xmath484 any descendants of @xmath487 output @xmath488    [ computereps ]    since the size of @xmath484 decreases by at least one in every iteration of the while loop , there exists some positive integer @xmath83 such that the procedure terminates after @xmath83 iterations of the while loop .",
    "note that @xmath489 are @xmath83 disjoint paths , each containing @xmath490 nodes of @xmath478 .",
    "it follows that @xmath491 .",
    "[ [ the - advice . ] ] the advice .",
    "+ + + + + + + + + + +    we now describe the advice provided to the algorithm for tree @xmath2 .",
    "first , the oracle computes the representatives @xmath470 of @xmath2 by executing ` computereps`(@xmath492 ) .",
    "then , for each @xmath493 , the oracle computes a list @xmath209 consisting of the sequences @xmath494 for every @xmath144 at distance at most @xmath155 from @xmath472 .",
    "each @xmath209 is sorted lexicographically , and @xmath495 is defined to be the index of @xmath496 in this list . the purpose of the integers @xmath497 is to enable each @xmath472 ( and each node that has representative @xmath472 ) to compute the path from @xmath472 to @xmath336 .",
    "however , we can not assume that nodes know the index of their representative , i.e. , nodes may not know which @xmath495 should be used to compute the path from their representative to @xmath336 . to remedy this",
    ", the oracle includes in the advice a _ trie _",
    "@xcite that enables each node to determine which piece @xmath495 of advice is intended for it to use .",
    "more specifically , the oracle first computes a list @xmath498 consisting of @xmath499 for each @xmath493 .",
    "then , a trie is computed for @xmath498 using the following recursive procedure ` buildtrie ` .",
    "@xmath498 contains only one string @xmath500 for some @xmath493 : return a single node labeled @xmath495 : @xmath501 the largest index such that all strings in @xmath498 have the same prefix of length @xmath218 @xmath502 the list of strings in @xmath498 that have a 0 at index @xmath503 , each with prefix of length @xmath503 removed @xmath504 the list of strings in @xmath498 that have a 1 at index @xmath503 , each with prefix of length @xmath503 removed return a node labeled @xmath218 with left child equal to @xmath505 and with right child equal to @xmath506    [ buildtrie ]    the advice provided to the algorithm is the value of @xmath19 , the value of the allocated time @xmath1 , as well as the trie computed by ` buildtrie`(@xmath498 ) .",
    "it remains to show that the advice is well - defined , i.e. , that ` buildtrie`(@xmath498 ) terminates .",
    "this is the case if and only if the strings in @xmath498 are all distinct .",
    "so , the following lemma proves that ` buildtrie`(@xmath498 ) terminates for all trees in which leader election is solvable in time @xmath1 .",
    "if @xmath45 then , for all distinct @xmath507 , we have @xmath508 .",
    "suppose that there is an algorithm @xmath86 that solves leader election in time @xmath1 ( with any amount of advice ) . to obtain a contradiction ,",
    "assume that , for some distinct @xmath507 , we have @xmath509 .",
    "since @xmath420 is injective , it follows that @xmath510 .",
    "this implies that nodes @xmath472 and @xmath511 output the same value in the execution of @xmath86 on @xmath2 .",
    "let @xmath512 be the simple path in @xmath2 starting at @xmath472 that corresponds to @xmath472 s output , and let @xmath513 be the simple path in @xmath2 starting at @xmath511 that corresponds to @xmath511 s output .",
    "note that @xmath514 .",
    "since @xmath472 and @xmath511 must elect the same node , there exists a unique node @xmath0 such that the paths @xmath512 and @xmath513 first intersect at @xmath0 .",
    "since @xmath2 is a tree , we can re - write @xmath515 and @xmath516 for some ( possibly empty ) simple path @xmath157 . since @xmath514",
    ", it follows that @xmath517 .",
    "we now observe that @xmath518 and @xmath519 are bounded above by @xmath155 . indeed , if both paths had length greater than @xmath155 , then their union would be a simple path of length at least @xmath520 , a contradiction .",
    "so , @xmath521 and @xmath522 are edge disjoint paths of length at most @xmath155 .",
    "however , this means that the port at @xmath0 corresponding to the final edge of @xmath521 is different than the port at @xmath0 corresponding to the final edge of @xmath522 .",
    "it follows that @xmath523 .",
    "this implies that @xmath524 , and , since @xmath525 , it follows that @xmath526 , a contradiction .",
    "we also provide a retrieval procedure @xmath527 which takes as input a trie @xmath528 and a string @xmath232 .",
    "if @xmath232 belongs to the set @xmath498 used in the construction of the trie , then the procedure returns the value stored in the label of the leaf node corresponding to the string @xmath232 . in our case",
    ", each @xmath232 is some @xmath499 , and the value stored in the corresponding leaf is @xmath495 .",
    "@xmath529 root of @xmath528 @xmath528 consists of a single node : return label of @xmath530 : @xmath501 label of @xmath530 @xmath531 bit of @xmath232 is 0 : @xmath532 left subtree of @xmath530 : @xmath532 right subtree of @xmath530 @xmath533 string @xmath232 with prefix of length @xmath503 removed return ` retrieve`(@xmath534 )    [ retrieve ]    [ [ the - algorithm . ] ] the algorithm .",
    "+ + + + + + + + + + + + + +    we now define our leader election algorithm ` electwithtrie ` executed by each node @xmath0 in @xmath2 given an advice string @xmath138 .",
    "we start by defining a procedure ` findrep ` . for each node @xmath0 with sufficiently large depth , ` findrep ` computes the representative of @xmath0 given its view @xmath535 and the values of @xmath536 and @xmath19 .",
    "( nodes with small depth will not need representatives to perform election . ) at a high level , the procedure picks an ancestor @xmath144 of @xmath0 , finds the subtree rooted at @xmath144 consisting of all of @xmath144 s descendants , then executes ` computereps ` on this tree . of the representatives returned by ` computereps ` , @xmath0 picks one that is either its descendant or ancestor .",
    "@xmath537 the node in @xmath535 at distance @xmath471 from @xmath0 such that every endless path in @xmath535 starting at @xmath0 passes through @xmath144 [ definew ] @xmath538 the edge incident to @xmath144 s.t .",
    "every endless path starting at @xmath0 passing through @xmath144 uses @xmath539 @xmath540 subtree of @xmath535 induced by all nodes @xmath30 such that @xmath541 does not pass through @xmath539 @xmath542 [ vcomputereps ] @xmath543 any leaf in @xmath535 such that @xmath0 lies on @xmath544 [ defineleaf ] return any node @xmath32 in @xmath545 such that @xmath32 lies on @xmath544 [ definerep ]    [ findrep ]    below is the pseudocode of the algorithm ` electwithtrie ` that is executed by each node @xmath0 in @xmath2 .",
    "@xmath272 diameter of @xmath2 provided in @xmath138 @xmath546 @xmath547 the value of allowed time provided in @xmath138 use @xmath1 rounds to learn @xmath535 @xmath535 contains no endless paths starting at @xmath0 : [ smalldepth ] @xmath19 is even : @xmath548 the central node of @xmath535 : @xmath548 the node on the central edge of @xmath535 with smaller signature output sequence of outgoing ports in @xmath549 [ shallowelect ] : @xmath550 @xmath551 [ pickrep ] @xmath552 [ getsig ] @xmath553 the trie provided in @xmath138 @xmath554 [ definez ] @xmath555 lexicographically - ordered list of port sequences @xmath556 where @xmath557 [ definel ] @xmath558 path corresponding to @xmath559 sequence in @xmath50 [ getpath ] @xmath560 the walk in @xmath2 consisting of @xmath561 followed by @xmath73 @xmath562 simple path from @xmath0 to @xmath336 obtained from @xmath563 by removing any non - simple subwalk output sequence of outgoing ports obtained from @xmath157 s port sequence    [ electwithdt ]    [ ub - dt ] consider any fixed @xmath564 such that @xmath565 and @xmath566 . for @xmath567",
    "$ ] , algorithm electwithtrie solves leader election in trees @xmath2 with size @xmath3 , diameter @xmath19 and @xmath568 , in time @xmath1 using @xmath569 bits of advice .    for any node @xmath0 ,",
    "denote by @xmath570 the depth of @xmath0 with respect to @xmath336 . to prove the correctness of our algorithm",
    ", we show that every node elects @xmath336 .",
    "we first consider the nodes that have small depth .    for any node @xmath0 with depth less than @xmath490",
    ", @xmath0 elects @xmath336 at line [ shallowelect ] .    to prove the claim , note that @xmath571 .",
    "since the distance from @xmath336 to any node in @xmath2 is at most @xmath572 , it follows that the distance from @xmath0 to any node in @xmath2 is at most @xmath573 .",
    "therefore , @xmath535 is equal to @xmath2 .",
    "hence , @xmath535 contains no endless paths starting at @xmath0 , and , at line [ shallowelect ] , @xmath0 elects @xmath336 .",
    "this proves the claim .    in what follows",
    ", we consider the nodes with large depth , i.e. , nodes @xmath0 with @xmath574 .",
    "we first show that each such node picks one of the representatives @xmath470 at line [ pickrep ] .",
    "[ repsubset ] @xmath575 outputs a node in @xmath576 .",
    "to prove the claim , we show that the set @xmath545 computed at line [ vcomputereps ] of algorithm ` findrep ` is a subset of @xmath576 , i.e. , a subset of the output of ` computereps`@xmath577 .",
    "the proof proceeds in three steps .",
    "first , we prove that , in the execution of algorithm ` findrep`@xmath578 , @xmath144 is an ancestor of @xmath0 in @xmath2 such that @xmath144 has at least one descendant in @xmath2 at distance @xmath469 .",
    "next , we show that @xmath579 is induced by the descendants of @xmath144 .",
    "finally , we show that , for such @xmath144 and @xmath579 , we have @xmath580 .",
    "* showing that @xmath144 is an ancestor of @xmath0 and @xmath144 has at least one descendant in @xmath2 at distance @xmath469 .",
    "* we consider @xmath144 s definition at line [ definew ] of ` findrep ` .",
    "recall that @xmath0 has depth at least @xmath490 in @xmath2 , so @xmath0 has an ancestor @xmath65 at distance @xmath471 .",
    "at least one endless path in @xmath535 starting at @xmath0 passes through @xmath65 since there is at least one endless path starting at @xmath0 that passes through @xmath336 ( which is an ancestor of @xmath65 ) .",
    "hence , @xmath65 is a node that satisfies the definition on line [ definew ] .",
    "moreover , @xmath65 is the only such node , since we can show that every path in @xmath535 starting at @xmath0 that avoids @xmath65 is a terminated path .",
    "indeed , consider any path from @xmath0 to a leaf @xmath66 such that the path avoids @xmath65 .",
    "the distance from @xmath0 to the penultimate node on @xmath581 is @xmath582 and the distance from this node to any of its descendants is at most @xmath572 .",
    "therefore , @xmath583 .",
    "thus , we have shown that @xmath65 is the unique node that satisfies the definition of @xmath144 , so @xmath144 is an ancestor of @xmath0 .",
    "also , by definition , @xmath584 , so @xmath144 has at least one descendant in @xmath2 at distance @xmath469 .    *",
    "showing that @xmath579 is induced by the descendants of @xmath144 in @xmath2 .",
    "* we show that @xmath539 is the edge between @xmath144 and @xmath144 s parent . as we observed above",
    ", there is at least one endless path in @xmath535 starting at @xmath0 that passes through @xmath144 , so there is at least one edge that satisfies the definition of @xmath539 .",
    "moreover , since the distance from @xmath144 to any of its descendants @xmath66 is at most @xmath572 , and the distance from @xmath0 to @xmath144 is @xmath469 , it follows that @xmath585 , so no endless path starting at @xmath0 has descendants of @xmath144 as both of its endpoints .",
    "it follows that @xmath539 can not be an edge on a path from @xmath144 to a descendant of @xmath144 , and , that every descendant of @xmath144 is in @xmath535 .",
    "this implies that @xmath579 is induced by the descendants of @xmath144 in @xmath2 .    *",
    "showing that @xmath580 . *",
    "the proof is by contradiction .",
    "first note that , for any node @xmath30 in @xmath579 , @xmath586 is bounded above by @xmath587 .",
    "next , to obtain a contradiction , consider the first iteration @xmath218 of @xmath588 during which a node @xmath589 is chosen as one of the outputs and @xmath590 . by the specification of @xmath591 , @xmath589 was added to the output because it was the ancestor of the deepest node @xmath592 in @xmath484 , and , further , we have @xmath593 .",
    "note that @xmath594 , so @xmath595 .",
    "we now consider the execution of @xmath596 .",
    "since @xmath595 , it follows that @xmath592 is initially in @xmath484 .",
    "this means that , in some iteration of the while loop , @xmath592 is removed from @xmath484 as the descendant of some chosen @xmath597 . since @xmath597 and both @xmath589 and @xmath472 are ancestors of @xmath592 , it follows that either @xmath472 is an ancestor of @xmath589 or vice - versa .",
    "we now show that @xmath472 is not an ancestor of @xmath589 . if this were the case , then @xmath598",
    ". in particular , @xmath592 would be a leaf in @xmath2 such that @xmath592 s distance to @xmath472 is greater than @xmath469 , which contradicts the choice of @xmath472 as the ancestor at distance exactly @xmath469 from the deepest leaf @xmath486 in @xmath484 .",
    "so , we have that @xmath589 is an ancestor of @xmath472 .",
    "however , this means that @xmath599 , which we will use later to obtain the desired contradiction .",
    "we now reconsider the @xmath219 iteration of execution @xmath588 .",
    "note that @xmath472 was not added to the output before this iteration ( since , as @xmath472 is an ancestor of @xmath592 , this would imply that @xmath592 was already removed from @xmath484 , contradicting our choice of @xmath592 . ) by assumption , @xmath600 in all iterations @xmath601 , so it follows that @xmath486 is in @xmath484 at the start of iteration @xmath218 .",
    "but , recall that @xmath602 , so we have a leaf with depth greater than @xmath592 in @xmath484 at the start of iteration @xmath218 , which contradicts the definition of @xmath592 .",
    "this concludes the proof that @xmath580 , which completes the proof of the claim .",
    "let @xmath472 be the representative picked by @xmath0 .",
    "it remains to show that @xmath0 computes @xmath496 in lines [ getsig]-[getpath ] of ` electwithtrie ` .",
    "first , we show that @xmath0 is able to compute a sufficiently large part of @xmath472 s view .",
    "[ repview ] @xmath603    to prove the claim , we first show that @xmath0 is either a descendant of , an ancestor of , or equal to @xmath472 .",
    "this is the case since , by lines [ defineleaf ] and [ definerep ] of ` findrep ` , there is a leaf @xmath150 such that @xmath0 is an ancestor of @xmath150 , and @xmath472 lies on a path from @xmath150 to an ancestor of @xmath0 .",
    "next , we show that @xmath603 regardless of whether @xmath0 is a descendant or ancestor of @xmath472 .",
    "( the claim is obvious for @xmath604 . ) if @xmath0 is a descendant of @xmath472 , we note that , by the definition of @xmath472 in ` computereps ` , the distance from @xmath472 to any of its descendants is at most @xmath490 .",
    "it follows that @xmath605 , so @xmath535 contains @xmath606 , as desired .",
    "if @xmath0 is an ancestor of @xmath472 , we note that @xmath607 contains all descendants of @xmath0 .",
    "the only nodes in @xmath606 that are not descendants of @xmath0 are contained in @xmath608 , as desired .",
    "this completes the proof of the claim .",
    "we now prove that @xmath0 correctly computes the sequence of ports from its representative to @xmath336 .",
    "[ goodchoice ] at line [ getpath ] , the @xmath559 sequence in @xmath50 is equal to @xmath496 .    to prove the claim , note that , in the advice construction , the @xmath609 sequence in @xmath209 is equal to @xmath496 .",
    "we show that @xmath610 and @xmath611 .    to prove that @xmath610 , note that @xmath431 is assigned the output of @xmath612 , where @xmath500 is one of the strings in @xmath498 used to build @xmath528 .",
    "it follows that @xmath612 returns  @xmath495 .",
    "to prove that @xmath611 , note that , on line [ definel ] , @xmath50 is defined as the lexicographically - sorted list of sequences @xmath556 for all @xmath144 with @xmath557 . since @xmath613 , this matches the definition of @xmath209 .",
    "further , by claim [ repview ] , we have that @xmath603 , so the computation of @xmath50 can indeed be carried out by @xmath0 .",
    "this concludes the proof of the claim .    by claims [ repsubset ] and [ goodchoice ] every node with depth",
    "at least @xmath614 chooses a representative @xmath472 within its view and computes a path from @xmath472 to @xmath336 .",
    "hence it computes a path from itself to @xmath336 .",
    "this concludes the proof of correctness .",
    "finally , we consider the size of the advice . in the advice construction ,",
    "the list @xmath498 consists of @xmath83 strings ( one for each representative ) , and these strings have some fixed length , say @xmath615 , in @xmath63 ( by our choice of @xmath420 . )",
    "consider the trie @xmath528 constructed by ` buildtrie`@xmath616 , as described in algorithm [ buildtrie ] .",
    "[ boundleaves ] the number of leaves in @xmath528 is at most @xmath83 .    to prove the claim , we provide a one - to - one correspondence @xmath617 from the leaves of @xmath528 to the strings in @xmath498",
    "first , for each node @xmath618 , let @xmath619 be the list of strings that was provided as the parameter to ` buildtrie ` in the execution where @xmath144 was created .",
    "let @xmath620 be the label of node @xmath144 , and let @xmath621 be the common prefix of length @xmath620 of all strings in @xmath622 ( if @xmath622 contains only one string @xmath232 , then @xmath621 is defined to be @xmath232 . ) next , for an arbitrary leaf @xmath623 , let @xmath624 be the root - to - leaf path of vertices ending at @xmath30 ( i.e. , @xmath625 is the root of @xmath528 and @xmath626 . ) for every @xmath627 , we define @xmath628 to be 0 if @xmath629 is the left child of @xmath486 , and 1 if @xmath629 is the right child of @xmath486 . finally , we define @xmath630 , where @xmath77 is the string concatenation operator . to see why @xmath617 is one - to - one , consider any distinct leaves @xmath631 , and",
    "let @xmath632 be their deepest common ancestor",
    ". by the maximality of @xmath65 , leaves @xmath30 and @xmath39 are descendants of different children of @xmath431 , so we have @xmath633 .",
    "it follows that the bit at position @xmath634 in @xmath41 differs from the bit at the same position in @xmath42 , so @xmath635 .",
    "this concludes the proof of the claim .",
    "[ numnodes ] the number of nodes in @xmath528 is at most @xmath636 .    to prove the claim ,",
    "observe that every node in the trie is either a leaf or has two children .",
    "consider the mapping @xmath428 that maps each internal node @xmath144 to the rightmost leaf in @xmath144 s left subtree .",
    "since @xmath428 is one - to - one , we get that the number of internal nodes is bounded above by the number of leaves . therefore , by claim [ boundleaves ] , the number of nodes in @xmath528 is at most @xmath636 , which proves the claim .    [ labelsize ] the label of each node in @xmath528 has size @xmath202 .    to prove the claim , note that each internal node of @xmath528 is labeled with an integer corresponding to an index within a string of length at most @xmath637 .",
    "therefore , the size of each such label is @xmath202 .",
    "next , each leaf is labeled with an integer @xmath495 corresponding to an index within a list of sequences , all of which correspond to simple paths in @xmath2 originating at representative @xmath472 .",
    "since the number of such simple paths is bounded above by @xmath638 ( one for each node in @xmath2 other than @xmath472 ) it follows that @xmath639 .",
    "therefore , the size of @xmath495 is @xmath202 .",
    "this concludes the proof of the claim .    by claims",
    "[ numnodes ] and [ labelsize ] , the total number of bits needed to represent @xmath528 is @xmath640 .",
    "recall that @xmath641 , so @xmath528 can be represented using @xmath569 bits . since providing the diameter of @xmath2 and",
    "the value of @xmath1 require only @xmath202 additional bits , we are done .",
    "the lower bound holds even for a slightly larger time interval than we need , namely starting from @xmath642 .",
    "we split the argument into two cases : when the diameter is odd and when it is even .",
    "[ lb2odd ] let @xmath643 be positive integers , where @xmath19 is odd .",
    "fix any value @xmath644 .",
    "there exists a class @xmath453 of trees @xmath2 with size @xmath454 , diameter @xmath19 , and @xmath45 , such that every leader election algorithm working in time @xmath1 on the class @xmath453 requires advice of size @xmath645 .",
    "let @xmath646 and let @xmath647 .",
    "let @xmath648 .",
    "we define a class of trees @xmath2 with size @xmath457 , odd diameter @xmath19 , and @xmath649 such that the minimum size of advice needed by an arbitrary algorithm @xmath86 solving leader election in time @xmath1 for this class is @xmath645 .",
    "we start with a single tree @xmath432 of size @xmath222 , defined as follows .",
    "the edge @xmath203 is the central edge of @xmath432 , and the port numbers corresponding to this edge at @xmath215 and @xmath216 are both 0 .",
    "next , for each @xmath493 , there is a path @xmath512 of length @xmath650 with @xmath215 as one endpoint .",
    "the other endpoint of each of these paths will be denoted by @xmath25 .",
    "further , the port sequence @xmath651 is equal to @xmath652 .",
    "the same paths appear with @xmath216 as one endpoint , and , for each @xmath493 , we will refer to each of these paths , and their corresponding endpoint other than @xmath216 , as @xmath653 and @xmath654 , respectively .",
    "the subtree of @xmath432 described so far is denoted by @xmath655 .",
    "finally , for each @xmath493 , there is a tree @xmath656 with root @xmath25 , where @xmath656 is a path of length 2 .",
    "the port sequence from each @xmath25 to the other endpoint of @xmath656 is @xmath657 .",
    "further , for each @xmath493 , there is a tree @xmath658 of height 2 with @xmath654 as the root .",
    "more specifically , @xmath658 is a path of length 2 with an additional edge incident to the middle node .",
    "the port sequences from each @xmath654 to the leaves of @xmath658 are @xmath657 and @xmath659 .",
    "this completes the definition of @xmath432 .",
    "figure [ lbdiagodd ] illustrates tree @xmath432 .",
    "constructed in the proof of theorem [ lb2odd ] , with @xmath660 . ]",
    "next , for every subset @xmath249 of @xmath661 , we define a tree @xmath662 . at a high level",
    ", @xmath662 is obtained from @xmath432 by swapping the subtrees rooted at @xmath25 and @xmath654 , for each @xmath663 .",
    "more specifically , the definition of @xmath662 is similar to the definition of @xmath432 above , except that , for each @xmath663 , tree @xmath656 has @xmath654 as its root and tree @xmath658 has @xmath25 as its root .",
    "see figure [ swapped ] for an example of @xmath662 .",
    "note that @xmath664 .",
    "further , for any @xmath665 , we have @xmath666",
    ". however , note that for any @xmath249 , since the differences between @xmath432 and @xmath662 are only at the leaves or neighbours of leaves , we have that the subtree @xmath655 of @xmath432 is also a subtree of @xmath662 .",
    "the following result about @xmath655 follows from the symmetry of @xmath655 with respect to the central edge and from the fact that @xmath25 and @xmath654 are images of each other under this symmetry .",
    "constructed in the proof of theorem [ lb2odd ] , with @xmath660 and @xmath667 . ]",
    "[ sameviewh ] for any @xmath668 , the views @xmath669 and @xmath670 are identical .",
    "the class @xmath453 is defined as the class of trees @xmath662 for all subsets @xmath249 of @xmath661 .",
    "we now set out to prove a lower bound on the number of different advice strings needed to solve leader election for all trees in @xmath453 .    for any @xmath665 , the advice strings provided to algorithm @xmath86 for trees @xmath662 and @xmath671 must be different . .",
    "we prove the claim by contradiction .",
    "assume that the advice strings assigned to @xmath662 and @xmath671 are the same .",
    "since @xmath665 , without loss of generality , assume that there is an integer @xmath663 such that @xmath672 .",
    "consider a leaf @xmath0 of tree @xmath658 , which , in @xmath662 , is rooted at node @xmath25 .",
    "note that , @xmath673 . in @xmath671 , tree @xmath658",
    "is rooted at node @xmath654 , so @xmath674 .",
    "by fact [ sameviewh ] , it follows that @xmath675 .",
    "so , @xmath0 outputs the same sequence of outgoing ports after executing @xmath86 in both @xmath662 and @xmath671 .",
    "assume , without loss of generality , that in @xmath662 , the node elected by @xmath0 after executing @xmath86 is closer to @xmath215 than to @xmath216 .",
    "since the length of @xmath0 s output is the same for both @xmath662 and @xmath671 , the node elected by @xmath0 after executing @xmath86 in @xmath671 is closer to @xmath216 than to @xmath215 .",
    "however , in both @xmath662 and @xmath671 , tree @xmath676 is rooted at node @xmath25 , and the leaf @xmath79 of tree @xmath676 outputs the same sequence of outgoing ports .",
    "hence , @xmath79 elects the same node in both @xmath662 and @xmath671 .",
    "thus , in at least one of @xmath662 or @xmath671 , nodes @xmath0 and @xmath79 do not elect the same node , a contradiction .",
    "this concludes the proof of the claim .",
    "since there are @xmath677 different subsets of @xmath661 , the number of different advice strings is at least @xmath677 .",
    "it follows that the size of advice is @xmath678 .",
    "finally , for any @xmath249 , we prove that @xmath679 , which implies that @xmath680 .",
    "it is sufficient to show that , using @xmath155 rounds of communication , an arbitrary node @xmath0 given a map of @xmath662 can compute where it is located in the map .",
    "the distance from any node @xmath0 to a node on the central edge is at most @xmath155 .",
    "let @xmath681 be the endpoint of the central edge that is closest to @xmath0 .",
    "it follows that @xmath607 contains @xmath681 ( which can be identified by finding the closest node to @xmath0 that has degree @xmath682 ) .",
    "consider two cases .",
    "if @xmath683 , then the subtree of @xmath607 induced by the nodes that can be reached from @xmath0 via a path starting with port 1 can be used to uniquely identify whether @xmath684 or @xmath685 .",
    "indeed , @xmath676 is rooted at the node at distance @xmath650 from @xmath0 in this subtree if and only if @xmath684 . if @xmath686 , let @xmath33 be the final port number in the port sequence @xmath687 .",
    "the subtree of @xmath688 induced by the nodes that can be reached from @xmath681 via a path starting with port @xmath33 either has @xmath656 or @xmath658 rooted at the node at distance @xmath650 from @xmath681 . by identifying which of these two trees appears , @xmath0 can identify its position on a map of @xmath662 .      the lower bound argument for even diameter",
    "closely resembles that for odd diameter , as given in the previous theorem .",
    "however , in this case , it holds only for @xmath689 . at a high level",
    ", we construct trees of even diameter by increasing by 1 the diameter of trees constructed in the previous case . on the other hand",
    ", we decrease the time by 1 , so that the views of certain nodes do not change . rather than providing a list of small but numerous changes in the proof ,",
    "we give the entire modified construction and argument for the reader s convenience .",
    "[ lb2even ] let @xmath690 be positive integers , where @xmath19 is even .",
    "fix any value @xmath691 .",
    "there exists a class @xmath453 of trees @xmath2 with size @xmath454 , diameter @xmath19 , and @xmath45 , such that every leader election algorithm working in time @xmath1 on the class @xmath453 requires advice of size @xmath645 .",
    "let @xmath692 and let @xmath693 .",
    "let @xmath694 .",
    "we define a class of trees @xmath2 with size @xmath457 , even diameter @xmath19 , and @xmath695 such that the minimum size of advice needed by an arbitrary algorithm @xmath86 solving leader election in time @xmath1 for this class is @xmath645 .",
    "we start with a single tree @xmath432 of size @xmath222 , defined as follows .",
    "consider a single edge @xmath203 , and let the port numbers corresponding to this edge at @xmath215 and @xmath216 be both 0 .",
    "add a path @xmath696 of length @xmath155 with @xmath215 as one endpoint , and denote the other endpoint of this path by @xmath242 .",
    "add a path @xmath697 of length @xmath572 with @xmath216 as one endpoint , and denote the other endpoint of this path by @xmath698 .",
    "let the port sequences @xmath699 and @xmath700 be @xmath701 ( where the length of the latter sequence is two greater than the former . )    next , for each @xmath668 , add a path @xmath512 of length @xmath650 with @xmath215 as one endpoint .",
    "the other endpoint of each of these paths will be denoted by @xmath25 .",
    "further , let the port sequence @xmath651 is equal to @xmath652 .",
    "add the same paths with @xmath216 as one endpoint .",
    "for each @xmath668 , we will refer to each of these paths , and their corresponding endpoint other than @xmath216 , as @xmath653 and @xmath654 , respectively .",
    "the subtree of @xmath432 described so far is denoted by @xmath655 . finally ,",
    "for each @xmath668 , add a tree @xmath656 with root @xmath25 , where @xmath656 is a path of length 2 .",
    "let the port sequence from each @xmath25 to the other endpoint of @xmath656 be @xmath657 .",
    "further , for each @xmath668 , add a tree @xmath658 of height 2 with @xmath654 as the root .",
    "more specifically , @xmath658 is a path of length 2 with an additional edge incident to the middle node .",
    "let the port sequences from each @xmath654 to the leaves of @xmath658 be @xmath657 and @xmath659 .",
    "this completes the definition of @xmath432 .",
    "figure [ lbdiageven ] illustrates tree @xmath432 .",
    "constructed in the proof of theorem [ lb2even ] ]    next , for every subset @xmath249 of @xmath661 , we define a tree @xmath662 . at a high level",
    ", @xmath662 is obtained from @xmath432 by swapping the subtrees rooted at @xmath25 and @xmath654 , for each @xmath663 .",
    "more specifically , the definition of @xmath662 is similar to the definition of @xmath432 above , except that , for each @xmath663 , tree @xmath656 has @xmath654 as its root and tree @xmath658 has @xmath25 as its root .",
    "note that @xmath664 .",
    "further , for any @xmath665 , we have @xmath666",
    ". however , note that for any @xmath249 , since the differences between @xmath432 and @xmath662 are only at the leaves or neighbours of leaves , we have that the subtree @xmath655 of @xmath432 is also a subtree of @xmath662 .",
    "the following result about @xmath655 follows from : the symmetry of @xmath655 , with @xmath696 and @xmath697 removed , with respect to the central edge , the fact that , for @xmath668 , @xmath25 and @xmath654 are images of each other under this symmetry , and the fact that @xmath25 and @xmath654 can not deduce the lengths of @xmath696 and @xmath697 in time @xmath702 .",
    "[ sameviewheven ] for any @xmath668 , the views @xmath703 and @xmath704 are identical .",
    "the class @xmath453 is defined as the class of trees @xmath662 for all subsets @xmath249 of @xmath661 .",
    "we now set out to prove a lower bound on the number of different advice strings needed to solve leader election for all trees in @xmath453 .    for any @xmath665 , the advice strings provided to algorithm @xmath86 for trees @xmath662 and @xmath671 must be different .",
    "we prove the claim by contradiction .",
    "assume that the advice strings assigned to @xmath662 and @xmath671 are the same .",
    "since @xmath665 , without loss of generality , assume that there is an integer @xmath663 such that @xmath672 .",
    "consider a leaf @xmath0 of tree @xmath658 , which , in @xmath662 , is rooted at node @xmath25 .",
    "note that , in @xmath662 , @xmath705 . in @xmath671 , tree @xmath658 is rooted at node @xmath654 , so @xmath706 .",
    "by fact [ sameviewheven ] , it follows that @xmath707 .",
    "so , @xmath0 outputs the same sequence of outgoing ports after executing @xmath86 in both @xmath662 and @xmath671 .",
    "assume , without loss of generality , that in @xmath662 , the node elected by @xmath0 after executing @xmath86 is closer to @xmath215 than to @xmath216 .",
    "since the length of @xmath0 s output is the same for both @xmath662 and @xmath671 , the node elected by @xmath0 after executing @xmath86 in @xmath671 is closer to @xmath216 than to @xmath215 .",
    "however , in both @xmath662 and @xmath671 , tree @xmath676 is rooted at node @xmath25 , and the leaf @xmath79 of tree @xmath676 outputs the same sequence of outgoing ports .",
    "hence , @xmath79 elects the same node in both @xmath662 and @xmath671 .",
    "thus , in at least one of @xmath662 or @xmath671 , nodes @xmath0 and @xmath79 do not elect the same node , a contradiction .",
    "this concludes the proof of the claim .",
    "since there are @xmath677 different subsets of @xmath661 , the number of different advice strings is at least @xmath677 .",
    "it follows that the size of advice is @xmath678 .",
    "finally , for any @xmath249 , we prove that @xmath708 , which implies that @xmath680 .",
    "it is sufficient to show that , using @xmath572 rounds of communication , an arbitrary node @xmath0 given a map of @xmath662 can compute where it is located in the map .",
    "the distance from any node @xmath0 to a node on the edge @xmath203 is at most @xmath572 .",
    "let @xmath681 be the endpoint of the edge @xmath203 that is closest to @xmath0 .",
    "it follows that @xmath709 contains @xmath681 ( which can be identified by finding the closest node to @xmath0 that has degree @xmath682 ) .",
    "consider two cases .",
    "if @xmath683 or @xmath0 is in the the subtree @xmath255 of @xmath710 induced by the nodes that can be reached from @xmath0 via a path starting with port 1 , then @xmath711 can be used to identify @xmath0 s position on a map of @xmath662 .",
    "indeed , @xmath0 need only check the length of @xmath255 , since @xmath712 if and only if @xmath713 . in the second case ,",
    "let @xmath33 be the final port number in the port sequence @xmath687 .",
    "the subtree of @xmath710 induced by the nodes that can be reached from @xmath681 via a path starting with port @xmath714 has @xmath656 or @xmath658 rooted at the node at distance @xmath650 from @xmath681 . by identifying which of these two trees appears",
    ", @xmath0 can identify its position on a map of @xmath662 .",
    "in this section , we prove tight upper and lower bounds of @xmath454 on the minimum size of advice sufficient to perform leader election in time @xmath715 for constant @xmath17 in @xmath3-node trees @xmath2 with diameter @xmath716 and @xmath717 .",
    "the upper bound , which holds for all values of @xmath19 , is given by the following result .",
    "[ o(n ) ] leader election in every non symmetric @xmath3-node tree @xmath2 is possible in time @xmath43 , using @xmath63 bits of advice .",
    "we use the following observation of chierichetti @xcite .",
    "an @xmath3-node anonymous tree can be coded by an ordered pair of two sequences @xmath718 in such a way that trees that are not port - preserving isomorphic get different codes .",
    "starting from any node considered as a root , perform a dfs traversal of the tree , visiting children of any node in the increasing order of ports at this node .",
    "the binary sequence @xmath258 has length @xmath719 and is constructed as follows . whenever an edge is traversed down the tree ,",
    "write 0 , and whenever it is traversed up the tree , write 1 .",
    "the sequence @xmath720 has length @xmath638 : let @xmath721 be the sequence of nodes other than the root in the order of first visit in the traversal , and let the @xmath27 term of @xmath720 be the entry port number at the first visit of @xmath722 .",
    "there are at most @xmath723 possible sequences @xmath258 .",
    "the number of possible sequences @xmath720 for each @xmath258 is bounded above by the product of degrees of all nodes other than the root and the sum of these degrees is at most @xmath719 .",
    "hence the number of possible sequences @xmath720 for each @xmath258 is bounded above by @xmath724 .",
    "hence , there are at most @xmath725 possible codes .",
    "the code of a tree is the lexicographically smallest pair @xmath718 over all choices of the root .",
    "we solve leader election as follows .",
    "the advice is the code of the tree .",
    "it has size @xmath63 . using this code , all nodes construct a faithful map of the tree .",
    "using the map , they can perform leader election in time @xmath43 , by the definition of this parameter .",
    "the next result is a matching lower bound when the diameter is not too small compared to @xmath3 .",
    "[ omega(n ) ] let @xmath452 be positive integers , such that @xmath726 .",
    "let @xmath727 be a constant and let @xmath728 .",
    "there exist trees @xmath2 with size @xmath454 , diameter @xmath19 , and @xmath45 , for which any leader election algorithm working in time @xmath1 requires advice of size @xmath729 .",
    "we define a class @xmath108 of trees @xmath2 with size @xmath454 , diameter @xmath19 , and @xmath45 such that the minimum size of advice needed by an arbitrary algorithm @xmath86 solving leader election in time @xmath1 for this class is @xmath729 .",
    "we consider the case where @xmath19 is even ( the case where @xmath19 is odd is obtained by adding a single edge to the construction for diameter @xmath91 ) .",
    "we begin by constructing a `` template '' tree @xmath432 from which all trees in our class @xmath108 will be constructed .",
    "tree @xmath432 itself is not a valid instance for leader election since some of its port numbers are undefined , but each tree in our class is obtained from @xmath432 by filling in the missing port numbers .",
    "our construction of @xmath432 depends on a set @xmath730 of trees that we call _",
    "markers_. each marker is a tree of height 2 with fixed port numbers , and each marker appears in @xmath432 only once .",
    "the purpose of the markers is to guarantee @xmath45 by enabling each node to determine its location in a map of @xmath432 .",
    "later , we will specify how to define the markers so that we have as many of them as we need .",
    "let @xmath731 .",
    "our template @xmath432 consists of a central node @xmath336 , and , for each @xmath732 , a path @xmath512 of length @xmath733 with one endpoint equal to @xmath336 . for each @xmath732 , the other endpoint of @xmath512",
    "will be denoted by @xmath25 , and the first port number of the sequence @xmath734 is equal to @xmath33 .",
    "let @xmath617 be the integer in @xmath735 that has the same parity as @xmath733 .",
    "the integer @xmath617 is the number of nodes on each path @xmath512 ( without @xmath336 ) whose incident port numbers are fixed in @xmath432 .",
    "more specifically , the first @xmath736 port numbers of the sequence @xmath737 are @xmath738 . finally , for each @xmath732 , we place one marker rooted at distance 2 from @xmath25 , and , from this node , we place one marker rooted at every @xmath739 node on the path towards @xmath336 .",
    "we ensure that no two markers from @xmath730 are used twice in the construction .",
    "see figure [ lbomegan ] for an illustration of @xmath432 .     constructed in the proof of theorem [ omega(n ) ] , where @xmath740 , @xmath741 , @xmath742 are different markers from @xmath743 . ]",
    "we are now ready to construct the class @xmath108 .",
    "let @xmath744 . hence @xmath745 .",
    "we note that , on each path @xmath512 in @xmath432 , there are @xmath232 consecutive nodes ( starting at @xmath336 s neighbour on @xmath512 ) whose incident port numbers are not defined .",
    "call these nodes @xmath746 .",
    "since @xmath617 was chosen to have the same parity as @xmath747 , it follows that @xmath232 is even .",
    "for @xmath748 , let @xmath749 be the edge @xmath750 .",
    "we say that edge @xmath749 is _ set to 0 _ ( respectively , _ set to 1 _ ) if the two ports corresponding to edge @xmath749 are equal to 0 ( respectively , equal to 1 ) , and the ports at @xmath751 and @xmath752 not corresponding to edge @xmath749 are equal to 1 ( respectively , equal to 0 ) .",
    "we now demonstrate how to obtain a tree @xmath753 by defining a labeling function @xmath50 . in particular , a _ labeling function _",
    "@xmath754 maps pairs of integers @xmath755 to 0 or 1 .",
    "the tree @xmath756 is obtained from @xmath432 by setting each edge @xmath749 to @xmath757 .",
    "note that , for any labeling function @xmath50 , the port labeling of tree @xmath758 is valid .",
    "further , for any distinct labeling functions @xmath759 , the trees @xmath756 and @xmath760 are distinct .",
    "the class @xmath453 is defined as the class of trees @xmath758 for all labeling functions @xmath50 .",
    "the following result will help us compute the number of different advice strings required by algorithm @xmath86 for the class @xmath108 .",
    "[ ldifferent ] for any distinct labeling functions @xmath759 , the advice strings provided to algorithm @xmath86 for trees @xmath756 and @xmath760 must be different .",
    "we prove the claim by contradiction .",
    "assume that the advice strings assigned to @xmath756 and @xmath760 are the same .",
    "since @xmath50 and @xmath761 are distinct , there exists an @xmath732 and a @xmath748 such that @xmath762 . without loss of generality , assume that @xmath763 .",
    "choose an arbitrary @xmath764 .",
    "we consider the executions of algorithm @xmath86 by nodes @xmath765 and @xmath766 in both @xmath756 and @xmath760 .",
    "first , note that the first @xmath767 port numbers of @xmath768 and @xmath769 were fixed in @xmath432 .",
    "it follows that @xmath770 is the same in both @xmath756 and @xmath760 .",
    "similarly , @xmath771 is the same in both @xmath756 and @xmath760 .",
    "since @xmath758 and @xmath760 are assigned the same advice , it follows that @xmath25 outputs the same sequence of outgoing ports , say @xmath249 , after executing @xmath86 in @xmath758 as it does after executing @xmath86 in @xmath760 .",
    "similarly , @xmath766 outputs the same sequence of outgoing ports , say @xmath772 , in both executions .",
    "since the sequence outputted by @xmath25 is the same in both executions , corresponds to simple paths in both of them , and the port numbers at @xmath336 are fixed , @xmath25 elects the same node in @xmath758 and in @xmath773 .",
    "the same is true for @xmath766 .",
    "therefore , it must be the case that , for one of @xmath249 or @xmath772 , the corresponding path crosses edge @xmath749 using the same outgoing port number in the execution in @xmath758 as in the execution in @xmath760 .",
    "however , the two ports corresponding to @xmath749 are labeled 0 in @xmath758 and labeled 1 in @xmath760 , a contradiction .",
    "this proves the claim .    by claim [ ldifferent ] ,",
    "the number of different advice strings is equal to the number of distinct labeling functions , i.e. , @xmath774 . but",
    "@xmath775 , and @xmath776 , so the number of labeling functions is @xmath777 for some positive constant @xmath336 .",
    "it follows that the minimum number of bits sufficient to encode the advice strings is @xmath729 , as required .",
    "next , we show that , for each @xmath778 , we have @xmath45 . by construction , for each node @xmath0 in @xmath2 , at least one of the following must be true :    1 .",
    "@xmath0 is contained in a marker [ inmarker ] 2 .",
    "@xmath0 is located between two consecutive roots of markers [ betweentwo ] 3 .   for some @xmath732 , @xmath779 , or @xmath0",
    "is located between the root of a marker and @xmath25 , with no root of a marker between @xmath0 and @xmath25[atleaf ] 4 .",
    "@xmath780 , or , @xmath0 is located between the root of a marker and @xmath336 , with no root of a marker between @xmath0 and @xmath336 [ nearcentre ]    in case ( 1 ) , @xmath0 is at distance at most 2 from the root of the marker .",
    "since the markers are spaced distance @xmath781 apart , the distance from @xmath0 to a neighbouring marker is at most @xmath782 .",
    "therefore , @xmath535 contains the marker containing @xmath0 as well as at least one neighbouring marker . in case",
    "( 2 ) , since the markers are spaced distance @xmath781 apart and the height of each marker is 2 , it follows that @xmath535 contains the two markers closest to @xmath0 .",
    "in both cases , using these two markers , @xmath0 can determine where on a map of @xmath2 it is located . in case ( 3 ) , since we placed a marker rooted at distance at most 2 from each @xmath25 , it follows that @xmath535 contains the marker closest to @xmath0 . using this marker",
    ", @xmath0 can determine where on a map of @xmath2 it is located . in case ( 4 ) , by the construction of @xmath432 , the distance between @xmath0 and @xmath336 is at most @xmath783 , so @xmath336 is in @xmath535 .",
    "node @xmath336 is uniquely recognizable as the node of degree @xmath83 , as long as we ensure that no root of a marker has degree @xmath83 ( see the specification of the markers below ) .",
    "hence in all cases @xmath0 can locate itself in the map within time @xmath1 , so leader election can be done in this time given the map , thus proving @xmath45 .",
    "it remains to describe the set of markers .",
    "first , observe that the total number of markers needed to define the template @xmath432 is bounded above by @xmath784 .",
    "this is because , for each @xmath732 , path @xmath512 in @xmath432 contains @xmath747 nodes ( other than @xmath336 ) , and a marker is placed every @xmath781 nodes . so the number of markers needed is bounded above by @xmath785 .",
    "let @xmath786 .",
    "consider the family @xmath787 of all trees of height 2 with @xmath788 leaves and whose root has degree @xmath789 , for sufficiently large @xmath3 .",
    "for each of these trees , label the ports at the root node using @xmath790 ( the port numbers 0 and 1 are reserved to label the ports on path @xmath512 . ) for each node at the first level , the port leading towards the root node is labeled 0 . the number of trees in @xmath787 is equal to the number of ordered partitions of the set of leaves into @xmath30 parts ( a partition specifies the number of leaves adjacent to each of the @xmath30 nodes at the first level of the marker . )",
    "so the number of trees is equal to @xmath791 .",
    "we now show that @xmath792 .",
    "note that @xmath793 .",
    "it follows that @xmath794 .",
    "therefore , by taking an arbitrary subset @xmath743 of size at least @xmath795 of the family @xmath787 , we have a sufficiently large set of markers to define @xmath432 .",
    "note that , since the size of each marker is @xmath796 , the total number of nodes needed to define the markers in @xmath432 is at most @xmath797 . since @xmath798 , it follows that @xmath799 .",
    "hence , for sufficiently large @xmath3 , the number of nodes needed to define the markers is @xmath64 .",
    "thus , the size of @xmath432 ( and , therefore , of each tree in @xmath108 ) is in @xmath454 .",
    "proposition [ o(n ) ] and theorem [ omega(n ) ] imply the following corollary .",
    "let @xmath452 be positive integers , such that @xmath726 .",
    "let @xmath727 be a constant and let @xmath728 .",
    "let @xmath453 be the class of trees @xmath2 with size @xmath454 , diameter @xmath19 , and @xmath45 .",
    "the minimum size of advice to perform leader election in time @xmath1 for the class @xmath453 is @xmath454 .",
    "for time values @xmath56 and @xmath8 , we gave tight bounds ( up to constant factors ) on the minimum size of advice sufficient to perform leader election for trees of diameter @xmath5 .",
    "for time in the interval @xmath10 $ ] for constant @xmath11 , we gave bounds leaving a logarithmic gap , except for the special case when @xmath5 is even and time is exactly @xmath15 .",
    "this yields the first problem :      as a step in this direction , we prove the following lower bound which implies an exponential jump in the minimum size of advice between time @xmath57 and time @xmath58 when @xmath5 is even and constant .",
    "[ discussprop ] let @xmath3 be a positive integer and let @xmath19 be an even positive integer constant such that @xmath800 .",
    "there exists a class @xmath453 of trees @xmath2 with size @xmath454 , diameter @xmath19 , and @xmath801 , such that every leader election algorithm working in time @xmath802 on the class @xmath453 requires advice of size @xmath803 .",
    "let @xmath804 and let @xmath805 , where @xmath354 is a sufficiently large constant greater than 1 so that @xmath806 .",
    "we start by defining a tree @xmath432 from which we will derive the class @xmath807 . at a high level",
    ", trees in @xmath807 will be defined in such a way that , for some leaves @xmath0 , there are many nodes in the view @xmath808 such that @xmath0 can not be sure which of them is the central node .    to this end , in the construction of @xmath432 , we will use special subtrees , called _ confusion subtrees _ , as building blocks . for any @xmath809",
    ", a _ confusion subtree avoiding port @xmath33 _ , denoted by @xmath810 , is defined recursively with its height @xmath30 as parameter . for the base cases ,",
    "let @xmath811 consist of a single node with degree 0 , and let @xmath812 consist of a node @xmath411 with @xmath813 degree-1 neighbours , such that the ports at @xmath411 are labeled by integers from @xmath814 .",
    "for any @xmath815 , define @xmath810 as follows :    1 .",
    "let @xmath411 be the root node with degree @xmath813 2 .",
    "label one of @xmath411 s neighbours as @xmath816 .",
    "attach a path of length @xmath817 with @xmath816 as one endpoint , and let @xmath818 be the other endpoint of this path ( if @xmath819 , set @xmath820 . ) set the port sequence @xmath821 equal to @xmath822 .",
    "[ tiaddpath ] 3 .   for each @xmath823 , label one neighbour of @xmath411 as @xmath824 .",
    "set the two ports corresponding to edge @xmath825 equal to @xmath218 . for each @xmath826 , add a neighbour @xmath827 to @xmath824 .",
    "set the two ports corresponding to edge @xmath828 equal to @xmath83 . at each @xmath827 , attach a copy of @xmath829 by identifying the root of @xmath829 with @xmath827 .",
    "see figure [ confusion ] for an illustration of @xmath810 .",
    "finally , let @xmath432 consist of a root node @xmath336 of degree @xmath813 , with the roots of @xmath830 as its neighbours .",
    "for each @xmath809 , we denote by @xmath411 the root of @xmath831 , and we denote by @xmath654 the node @xmath818 defined at step [ tiaddpath ] in the construction of @xmath831 . for each @xmath809 ,",
    "the two ports corresponding to the edge @xmath832 are set to @xmath33 , and , @xmath833 leaves are added as neighbours of @xmath654 .",
    "see figure [ confusion ] for an illustration of @xmath432 .",
    "we can now define the class @xmath807 . for every permuation @xmath249 of the integers @xmath837",
    ", we obtain a tree @xmath838 from @xmath432 by applying @xmath249 to the subtrees rooted at @xmath839 .",
    "more specifically , for each @xmath840 , the number of neighbouring leaves of @xmath654 is changed to @xmath841 .",
    "it follows that , when @xmath249 is the identity permutation , @xmath842 .",
    "further , note that the only differences between two trees @xmath662 and @xmath671 are the degrees of some nodes among @xmath839 .",
    "the class @xmath807 is defined as the set of trees @xmath838 for all permutations @xmath249 of the integers @xmath837 . by counting the number of such permutations",
    ", it follows that @xmath843 .",
    "we now determine the number of different advice strings needed by any algorithm @xmath86 that solves leader election in time @xmath802 in trees from the class @xmath807 .",
    "the following result shows that the number of different advice strings needed by algorithm @xmath86 is @xmath844 .",
    "we prove the claim by contradiction .",
    "assume that , for some permutations @xmath665 , the advice strings assigned to @xmath662 and @xmath671 are the same",
    ". the proof proceeds by finding a leaf @xmath846 in @xmath662 and a leaf @xmath847 in @xmath671 such that the two leaves have the same view at distance @xmath802 in their respective trees . since the two trees are assigned the same advice",
    ", this implies that the executions of @xmath86 by these two leaves output the same port sequence to elect a leader in their respective trees .",
    "further , we show that @xmath848 outputs the same port sequence in the execution of @xmath86 in both @xmath662 and @xmath671 . finally , we show that @xmath86 fails in at least one of @xmath662 or @xmath671 , which gives the desired contradiction",
    ".    * definition of @xmath846 and @xmath847 .",
    "* let @xmath849 such that @xmath850 .",
    "let @xmath851 such that @xmath852 .",
    "let @xmath846 be the leaf adjacent to @xmath853 in @xmath662 such that the port at @xmath853 corresponding to the edge @xmath854 is 1 .",
    "similarly , let @xmath847 be the leaf adjacent to @xmath855 in @xmath671 such that the port at @xmath855 corresponding to the edge @xmath856 is 1 .",
    "* showing that @xmath846 and @xmath847 output the same port sequence . * since @xmath662 and @xmath671 are assigned the same advice , it is sufficient to show that @xmath857 .",
    "to prove this fact , note that , since @xmath858 , it follows that @xmath846 s neighbour @xmath853 in @xmath662 has the same degree as @xmath847 s neighbour @xmath855 in @xmath671 ( i.e. , both of these degrees are equal to @xmath859 . )",
    "it follows that @xmath860 .",
    "next , by the constructions of @xmath861 and @xmath862 , we have that @xmath863 in @xmath662 and that @xmath864 in @xmath671 . since @xmath865",
    ", we have so far shown that @xmath866 .",
    "next , the confusion trees were constructed specifically to satisfy the following property : for any port sequence of length @xmath867 starting at @xmath868 in @xmath662 that does not begin with port @xmath813 , the same sequence appears in @xmath671 starting at @xmath869 .",
    "it follows that @xmath870 . finally ,",
    "since @xmath871 is the only node at distance @xmath188 from @xmath846 in @xmath662 , we have @xmath872 .",
    "similarly , since @xmath869 is the only node at distance @xmath188 from @xmath847 in @xmath671 , we have @xmath873 .",
    "therefore , we have shown that @xmath857 , as desired .    * showing that @xmath848 outputs the same port sequence in the execution of @xmath86 in both @xmath662 and @xmath671 . * since @xmath662 and @xmath671 are assigned the same advice , it is sufficient to show that @xmath874 . to prove this fact ,",
    "note that , since @xmath875 for all @xmath876 , it follows that , for all @xmath840 , @xmath877 .",
    "in particular , this means that @xmath839 are neither contained in @xmath878 nor contained in @xmath879 .",
    "since the only differences between @xmath662 and @xmath671 are the degrees of some nodes among @xmath839 , it follows that @xmath878 and @xmath879 must be equal . *",
    "showing that @xmath86 fails in at least one of @xmath662 or @xmath671 .",
    "* to obtain a contradiction , we assume that @xmath86 correctly elects a leader in both @xmath662 and @xmath671 .",
    "first , suppose that @xmath846 elects a node in @xmath880 in @xmath662 , and @xmath847 elects a node in @xmath862 in @xmath671 .",
    "it follows that , in @xmath662 , node @xmath848 elects a node in @xmath861 by outputting some sequence @xmath881 whose @xmath882 term is @xmath218 .",
    "similarly , in @xmath671 , node @xmath848 elects a node in @xmath862 by outputting some sequence @xmath883 whose @xmath882 term is @xmath884 .",
    "however , this means that @xmath885 , which contradicts the fact that @xmath848 outputs the same port sequence in the execution of @xmath86 in both @xmath662 and @xmath671 .",
    "so , we have shown that it is not the case that both @xmath846 elects a node in @xmath880 in @xmath662 and @xmath847 elects a node in @xmath862 in @xmath671 .",
    "so , without loss of generality , we may assume that , in @xmath662 , node @xmath846 elects a node that is not in @xmath861 .",
    "in particular , this means that the @xmath882 term in the sequence @xmath232 outputted by @xmath846 must correspond to edge @xmath886 ( since , otherwise , the path corresponding to this sequence would not contain @xmath336 ) .",
    "hence , the @xmath882 term in sequence @xmath232 is equal to @xmath218 .",
    "we showed above that @xmath846 in @xmath662 and @xmath847 in @xmath671 output the same port sequence , so the @xmath882 term of @xmath847 s output is also equal to @xmath218 . since @xmath887",
    ", it follows that the @xmath882 edge on the path corresponding to @xmath847 s output does not correspond to edge @xmath888 .",
    "hence , in @xmath671 , node @xmath847 elects a node in @xmath862 .",
    "this elected node is at distance @xmath889 from @xmath869 since the first @xmath188 ports in @xmath232 correspond to the path from @xmath847 to @xmath869 .",
    "since @xmath890 , we have that , in @xmath671 , the length of @xmath848 s output is @xmath891 = |s|+1 $ ] . on the other hand , in @xmath662 ,",
    "the node elected by @xmath846 is not in @xmath861 , which means that the elected node is at distance @xmath892 from @xmath336 ( since the first @xmath155 ports in @xmath232 correspond to the path from @xmath846 to @xmath336 . )",
    "it follows that , in @xmath662 , the length of @xmath848 s output is at most @xmath893 = |s|-1 $ ] , i.e. , shorter than its output in @xmath671 .",
    "this contradicts the fact that @xmath848 outputs the same sequence in the execution of @xmath86 in both @xmath662 and @xmath671 .",
    "therefore , our assumption that @xmath86 correctly outputs a leader in both @xmath662 and @xmath671 was false , so @xmath86 fails on at least one tree in @xmath807 .            to prove the claim ,",
    "we show that every node can identify itself in a map of @xmath662 , and thus can elect the central node @xmath336 . first note that @xmath336 is at distance at most @xmath155 from every node in @xmath662 , so @xmath897 is equal to @xmath662 .",
    "therefore , in time @xmath802 , node @xmath336 can identify itself in a map of @xmath662 . for any @xmath898 in @xmath662 , node @xmath0",
    "is located in @xmath831 for some @xmath809 .",
    "since @xmath831 has height @xmath188 , the distance between any two nodes in @xmath831 is at most @xmath107 .",
    "it follows that @xmath899 contains every node in @xmath831 except possibly some leaves .",
    "in particular , @xmath899 contains the path between nodes @xmath411 and @xmath654 .",
    "this path is the only induced subtree of @xmath831 consisting of a path of length @xmath650 .",
    "it follows that @xmath0 can identify this path in @xmath899 .",
    "hence , it can identify its endpoints and it sees their degrees .",
    "therefore @xmath0 can identify @xmath654 , as it is the only node in @xmath662 of degree @xmath900 .",
    "it follows that @xmath0 can identify itself in a map of @xmath662 .",
    "this concludes the proof of the claim .      to prove the claim , note that the size of @xmath662 is equal to @xmath901 .",
    "we first prove that @xmath902 by induction on @xmath30 . in the base cases , @xmath903 and @xmath904 , so @xmath902 in these two cases . now",
    ", suppose that @xmath905 , and that , for all @xmath906 , we have @xmath907 . from the construction of @xmath810 , we observe that the size of @xmath810 is @xmath908 . by the induction hypothesis ,",
    "this is at most @xmath909 \\leq 1+\\delta + ( x-2 ) + 3\\delta^x - 3\\delta^{x-1}$ ] .",
    "since each of the first three terms is bounded above by @xmath910 , we have shown that @xmath810 has size at most @xmath911 .",
    "therefore , the size of @xmath662 is at most @xmath912 .",
    "this completes the proof of the claim .",
    "this last problem has an intriguing twist . at first glance",
    "it would seem that the answer to it , at least for diameter in @xmath917 , is @xmath454 .",
    "indeed , the upper bound @xmath63 on the size of advice holds in this case as well ( with the same proof as in section 6 ) , and the lower bound @xmath918 proved for time @xmath16 for any constant @xmath17 should be `` even more true '' : since decreasing the allocated time makes the task more difficult , the required amount of advice should not decrease .",
    "perhaps surprisingly , this argument overlooks the following subtlety .",
    "we should recall that , for a given time @xmath1 , we seek solutions of our minimum advice problem only for trees @xmath2 with @xmath45 because , for other trees , leader election is infeasible in time @xmath1 with any amount of advice . however , for small values of @xmath1 , the restriction @xmath45 could sometimes leave so few trees under consideration that more efficient advice than for larger values of @xmath1 is sufficient .",
    "is this really the case ?",
    "p. boldi , s. shammah , s. vigna , b. codenotti , p. gemmell , and j. simon , symmetry breaking in anonymous networks : characterizations .",
    "4th israel symposium on theory of computing and systems , ( istcs 1996 ) , 16 - 26 .",
    "p. fraigniaud , d. ilcinkas , a. pelc , communication algorithms with advice , journal of computer and system sciences 76 ( 2010 ) , 222232 .",
    "p. fraigniaud , d. ilcinkas , a. pelc , tree exploration with advice , information and computation 206 ( 2008 ) , 12761287 .",
    "p. fraigniaud , a. korman , e. lebhar , local mst computation with short advice , theory of computing systems 47 ( 2010 ) , 920933 .",
    "haddar , a.h .",
    "kacem , y. mtivier , m. mosbah , and m. jmaiel , electing a leader in the local computation model using mobile agents .",
    "6th acs / ieee international conference on computer systems and applications ( aiccsa 2008 ) , 473 - 480 ."
  ],
  "abstract_text": [
    "<S> leader election is one of the fundamental problems in distributed computing . </S>",
    "<S> it calls for all nodes of a network to agree on a single node , called the leader . </S>",
    "<S> if the nodes of the network have distinct labels , then agreeing on a single node means that all nodes have to output the label of the elected leader . </S>",
    "<S> if the nodes of the network are anonymous , the task of leader election is formulated as follows : every node @xmath0 of the network must output a simple path , which is coded as a sequence of port numbers , such that all these paths end at a common node , the leader . in this paper </S>",
    "<S> , we study deterministic leader election in anonymous trees .    </S>",
    "<S> our aim is to establish tradeoffs between the allocated time @xmath1 and the amount of information that has to be given _ a priori _ to the nodes to enable leader election in time @xmath1 in all trees for which leader election in this time is at all possible . following the framework of _ algorithms with advice _ , this information ( a single binary string ) </S>",
    "<S> is provided to all nodes at the start by an oracle knowing the entire tree . </S>",
    "<S> the length of this string is called the _ size of advice_. for a given time @xmath1 allocated to leader election , we give upper and lower bounds on the minimum size of advice sufficient to perform leader election in time @xmath1 .    </S>",
    "<S> for most values of @xmath1 , our upper and lower bounds are either tight up to multiplicative constants , or they differ only by a logarithmic factor . </S>",
    "<S> let @xmath2 be an @xmath3-node tree of diameter @xmath4 . </S>",
    "<S> while leader election in time @xmath5 can be performed without any advice , for time @xmath6 we give tight upper and lower bounds of @xmath7 . for time </S>",
    "<S> @xmath8 we give tight upper and lower bounds of @xmath7 for even values of @xmath5 , and tight upper and lower bounds of @xmath9 for odd values of @xmath5 . </S>",
    "<S> moving to shorter time , in the interval @xmath10 $ ] for constant @xmath11 , we prove an upper bound of @xmath12 and a lower bound of @xmath13 , the latter being valid whenever @xmath5 is odd or when the time is at most @xmath14 . hence , with the exception of the special case when @xmath5 is even and </S>",
    "<S> time is exactly @xmath15 , our bounds leave only a logarithmic gap in this time interval . finally , </S>",
    "<S> for time @xmath16 for any constant @xmath17 ( except for the case of very small diameters ) , we again give tight upper and lower bounds , this time @xmath18 .    </S>",
    "<S> * keywords : * leader election , tree , advice , deterministic distributed algorithm , time .    0.2 in 0.1 in 0.0 in </S>"
  ]
}