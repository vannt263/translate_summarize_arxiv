{
  "article_text": [
    "in recent years there have been several approaches to the automated analysis of the complexity of programs .",
    "mostly these approaches have been developed independently in different communities and use a variety of different , not easily comparable techniques . without hope for completeness , we mention work by albert et al .",
    "@xcite that underlies , an automated tool for the resource analysis of  programs .",
    "related work , targeting  programs , has been reported by alias et al .",
    "@xcite . in zuleger",
    "@xcite further approaches for the runtime complexity analysis of  programs is reported , incorporated into .",
    "noschinski et al .",
    "@xcite study runtime complexity analysis of rewrite systems , which has been incorporated in .",
    "finally , the  prototype  @xcite provides an automated potential - based resource analysis for various resource bounds of functional programs and  @xcite is one of the most powerful tools for complexity analysis of rewrite systems .    despite the abundance in the literature almost no comparison results",
    "are known that relate the sophisticated methods developed .",
    "indeed a precise comparison often proves difficult .",
    "for example , on the surface there is an obvious connection between the decomposition techniques established by gulwani and zuleger in  @xcite and recent advances on this topic in the complexity analysis of rewrite systems , cf .",
    "@xcite . however , when investigated in detail , precise comparison results are difficult to obtain .",
    "we exemplify the situation with a simple example that will also serve as running example throughout the paper .",
    "[ ex:1 ] consider the following term rewrite system ( trs for short ) @xmath1 , encoding a variant of an example by okasaki  ( * ? ? ?",
    "* section  5.2 ) .",
    "@xmath2 @xmath1 encodes an efficient implementation of a queue in functional programming .",
    "a queue is represented as a pair of two lists @xmath3 , encoding the initial part  @xmath4 and the reversal of the remainder  @xmath5 .",
    "invariant of the algorithm is that the first list never becomes empty , which is achieved by reversing @xmath5 if necessary .",
    "should the invariant ever be violated , an exception ( @xmath6 or @xmath7 ) is raised .",
    "we exemplify the physicist s method of amortised analysis  @xcite .",
    "we assign to every queue @xmath3 the length of @xmath5 as _",
    "potential_. then the amortised cost for each operation is constant , as the costly reversal operation is only executed if the potential can pay for the operation , compare  @xcite .",
    "thus , based on an amortised analysis , we deduce the optimal linear runtime complexity for @xmath0 .    on the other hand",
    "let us attempt an application of the interpretation method to this example .",
    "termination proofs by interpretations are well - established and can be traced back to work by turing  @xcite .",
    "we note that @xmath1 is polynomially terminating .",
    "moreover , it is rather straightforward to restrict so - called _ polynomial interpretations _",
    "@xcite suitably so that compatibility of a trs @xmath0 induces polynomial runtime complexity , cf .",
    "such polynomial interpretations are called _",
    "restricted_. however , it turns out that no restricted polynomial interpretation can exist that is compatible with @xmath1 .",
    "the reasoning is simple .",
    "the constraints induced by @xmath1 imply that the function @xmath8 has to be interpreted by a linear polynomial .",
    "thus an exponential interpretation is required for enqueuing ( @xmath9 ) .",
    "looking more closely at the different proofs , we observe the following . while in the amortised analysis",
    "the potential of a queue @xmath3 depends only on the remainder @xmath5 , the interpretation of @xmath10 has to be monotone in both arguments by definition .",
    "this difference induces that @xmath8 is assigned a strongly linear potential in the amortised analysis , while only a linear interpretation is possible for @xmath8 .",
    "still it is possible to precisely relate amortised analysis to polynomial interpretations if we base our investigation on many - sorted ( or typed ) trss and make suitable use of the concept of _ annotated types _ originally introduced in  @xcite .",
    "more precisely , we establish the following results .",
    "we establish a novel runtime complexity analysis for typed constructor rewrite systems .",
    "this complexity analysis is based on a potential - based amortised analysis incorporated into a type system . from the annotated type of a term its derivation height with respect to innermost",
    "rewriting can be read off ( see theorem  [ l:2 ] ) .",
    "the correctness proof of the obtained bound rests on a suitable big - step semantics for rewrite systems , decorated with counters for the derivation height of the evaluated terms .",
    "we complement this big - step semantics with a similar decorated small - step semantics and prove equivalence between these semantics .",
    "furthermore we strengthen our first result by a similar soundness result based on the small - step semantics ( see theorem  [ l:5 ] )",
    ". exploiting the small - step semantics we prove our main result that from the well - typing of a trs @xmath0 we can read off a typed polynomial interpretation that orients @xmath0 ( see theorem  [ l:8 ] ) .    while the type system exhibited is inspired by hoffmann et al .",
    "@xcite we generalise their use of annotated types to arbitrary ( data ) types .",
    "furthermore the introduced small - step semantics ( and our main result ) directly establish that any well - typed trs is terminating , thus circumventing the notion of partial big - step semantics introduced in  @xcite .",
    "our main result can be condensed into the following observations .",
    "the physicist s method of amortised analysis conceptually amounts to the interpretation method if we allow for the following changes :    * every term bears a potential , not only constructor terms . *",
    "polynomial interpretations are defined over annotated types . *",
    "the standard compatibility constraint is weakened to orientability , that is , all ground instances of a rule strictly decrease .",
    "our study is purely theoretic , and we have not ( yet ) attempted an implementation of the provided techniques .",
    "however , automation appears straightforward .",
    "furthermore we have restricted our study to typed ( constructor ) trss . in the conclusion we sketch application of the established results to innermost runtime complexity analysis of untyped trss .",
    "this paper is structured as follows . in the next section",
    "we cover some basics and introduce a big - step operational semantics for typed trss . in section  [ annotatedtypes ]",
    "we clarify our definition of annotated types and provide the mentioned type system .",
    "we also present our first soundness result . in section  [ smallstep ]",
    "we introduce a small - step operational semantics and prove our second soundness result .",
    "our main result will be stated and proved in section  [ typedpi ] .",
    "finally , we conclude in section  [ conclusion ] , where we also mention future work .",
    "let @xmath11 denote a finite , non - empty set of _ constructor symbols _ and @xmath12 a finite set of _ defined function symbols_. let @xmath13 be a finite set of ( data ) types .",
    "a family @xmath14 of sets is called",
    "_ @xmath13-typed _ and denotes as @xmath15 .",
    "let @xmath16 denote an @xmath13-typed set of _ variables _ , such that the @xmath17 are pairwise disjoint . in the following",
    ", variables will be denoted by @xmath18 , @xmath19 , @xmath20 ,  , possibly extended by subscripts .",
    "following  @xcite , a _ type declaration _ is of form @xmath21 , where @xmath22 and @xmath23 are types .",
    "type declarations serve as input - output specifications for function symbols .",
    "we write @xmath24 instead of @xmath25 .",
    "a _ signature _ @xmath26 ( with respect to the set of types @xmath13 ) is a mapping from @xmath27 to type declarations .",
    "we often write @xmath28 if @xmath29 and refer to a type _ declaration _ as a type , if no confusion can arise .",
    "we define the @xmath13-typed set of terms @xmath30 ( or @xmath31 for short ) : ( i ) for each @xmath32 : @xmath33 , ( ii ) for @xmath34 such that @xmath35 and @xmath36 , we have @xmath37 .",
    "type assertions are denoted @xmath38 .",
    "terms of type @xmath24 will sometimes be referred to as instances of @xmath24 : a term of list type , is simply called a list . if @xmath39 then @xmath40 is called a _ ground constructor term _ or a _",
    "value_. the set of values is denoted @xmath41 .",
    "the ( @xmath13-typed ) set of variables of a term @xmath40 is denoted @xmath42 .",
    "the root of @xmath40 is denoted @xmath43 and the size of @xmath40 , that is the number of symbols in @xmath40 , is denoted as @xmath44 . in the following , terms are denoted by @xmath45 , @xmath40 , @xmath46 ,  , possibly extended by subscripts .",
    "furthermore , we use @xmath47 ( possibly indexed ) to denote values .    a _ substitution _",
    "@xmath48 is a mapping from variables to terms that respects types .",
    "substitutions are denoted as sets of assignments : @xmath49 .",
    "we write @xmath50 ( @xmath51 ) to denote the domain ( range ) of @xmath48 ; @xmath52 .",
    "let @xmath48 be a substitution and @xmath53 be a set of variables ; @xmath54 denotes the restriction of the domain of @xmath48 to @xmath53 .",
    "the substitution @xmath48 is called a _ restriction _ of a substitution @xmath55 if @xmath56 .",
    "vice versa , @xmath55 is called _ extension _ of @xmath48 .",
    "let @xmath48 , @xmath55 be substitutions such that @xmath57",
    ". then we denote the ( disjoint ) union of @xmath48 and @xmath55 as @xmath58 .",
    "we call a substitution @xmath48 _ normalised _ if all terms in the range of @xmath48 are values . in the following ,",
    "all considered substitutions will be normalised .",
    "a _ typing context _ is a mapping from variables @xmath16 to types .",
    "type contexts are denoted by upper - case greek letters .",
    "let @xmath59 be a context and let @xmath40 be a term .",
    "the typing relation @xmath60 expresses that based on context @xmath59 , @xmath40 has type @xmath24 ( with respect to the signature @xmath26 ) .",
    "the typing rules that define the typing relation are given in figure  [ fig:2 ] , where we forget the annotations .",
    "in the sequel we sometimes make use of an abbreviated notation for sequences of types @xmath61 and terms @xmath62 .",
    "a typed rewrite rule is a pair @xmath63 of terms , such that ( i ) the type of @xmath64 and @xmath5 coincides , ( ii ) @xmath65 , and ( iii ) @xmath66 .",
    "an @xmath13-typed _ term rewrite system _ ( _ trs _ for short ) over the signature @xmath26 is a finite set of typed rewrite rules . we define the _ innermost rewrite relation _ @xmath67 for typed trss @xmath0 . for terms @xmath45 and @xmath40 , @xmath68 holds , if there exists a context @xmath23 , a normalised substitution @xmath48 and a rewrite rule @xmath69 such that @xmath70 $ ] , @xmath71 $ ] and @xmath45 , @xmath40 are well - typed . in the sequel we are only concerned with _ innermost _ rewriting .",
    "a trs is _ orthogonal _ if it is left - linear and non - overlapping  @xcite .",
    "a trs is _ completely defined _ if all ground normal - forms are values .",
    "these notions naturally extend to typed trs .",
    "in particular , note that an orthogonal typed trs is confluent .",
    "[ d : runtimecomplexity ] we define the _ runtime complexity _",
    "( with respect to @xmath0 ) as follows : @xmath72 where a term @xmath73 is called _ basic _ if @xmath4 is defined , and the terms @xmath74 are only built over constructors and variables .",
    "[ cols=\"^ \" , ]     note that the substitutions @xmath48 , @xmath75 , @xmath55 , and @xmath76 are normalised .",
    "the big - step semantics , the type system , and theorem  [ l:2 ] provide an amortised resource analysis for typed trss that yields polynomial bounds . however , theorem  [ l:2 ] is not directly applicable , if we want to link this analysis to the interpretation method .",
    "we recast the method and present a small - step semantics , which will be used in our second soundness results ( theorem  [ l:5 ] below ) , cf .  figure  [ fig:3 ] . as the big - step semantics ,",
    "the small - step semantics is decorated with counters for the derivation height of the evaluated terms .",
    "suppose @xmath77 holds for terms @xmath78 and substitutions @xmath79 .",
    "an inspection of the rules shows that @xmath75 is an extension of @xmath48 .",
    "moreover we have the following fact .",
    "[ l:9 ] let @xmath80 be terms , let @xmath48 be a normalised substitution such that @xmath81 and suppose @xmath77 .",
    "then @xmath75 extends @xmath48 and @xmath82 .",
    "the first assertion follows by induction on the relation @xmath77 .",
    "now suppose @xmath83",
    ". then @xmath84 .",
    "the transitive closure of the judgement @xmath85 is defined as follows :    1 .",
    "@xmath86 if @xmath85 2 .",
    "@xmath87 if @xmath88 and @xmath89 .",
    "the next lemma proves the equivalence of big - step and small - step semantics .",
    "[ l:3 ] let @xmath48 be a normalised substitution , let @xmath40 be a term , @xmath90 , and let @xmath47 be a value .",
    "then @xmath91 if and only if @xmath92 , where @xmath75 is an extension of @xmath48 .",
    "first we prove the direction from left to right .    1 .",
    "suppose @xmath93 has the form : @xmath94 such that @xmath95 and @xmath96 .",
    "hence we obtain @xmath97 .",
    "2 .   suppose @xmath93 has the form : @xmath98 such that @xmath99 and @xmath100 .",
    "again , we directly obtain @xmath101 .",
    "3 .   suppose the last rule in @xmath93 if of form : @xmath102 where @xmath103 . by hypothesis",
    "there exists an extension @xmath75 of @xmath58 such that @xmath104 .",
    "furthermore , we have @xmath105 .",
    "thus @xmath106 . by definition @xmath57 .",
    "hence @xmath75 is an extension of @xmath48 .",
    "4 .   finally , suppose the last rule in @xmath93 has the form @xmath107 where @xmath108 . by induction hypothesis",
    "( and repeated use of lemma  [ l:4 ] ) , we have for all @xmath109 : @xmath110 , where we set @xmath111 and note that all @xmath112 are extensions of @xmath48 .",
    "as @xmath113 we obtain : @xmath114 furthermore , by lemma  [ l:4 ] and the induction hypothesis there exists a substitution @xmath75 such that @xmath115 where @xmath75 extends @xmath116 ( and thus also @xmath48 as @xmath117 ) . from   and",
    "we obtain @xmath92 .",
    "this establishes the direction from left to right .",
    "now we consider the direction form right to left .",
    "the proof of the first reduction @xmath118 in @xmath119 is denoted as  @xmath120 .    1 .",
    "suppose @xmath120 has either of the following forms @xmath121 then the lemma follows trivially .",
    "2 .   suppose @xmath120 has the form @xmath122 we apply the induction hypothesis to conclude @xmath123 .",
    "moreover , we observe that @xmath124 holds for all @xmath109 .",
    "( this follows by a straightforward inductive argument . ) from this we derive @xmath125 as follows : @xmath126",
    "3 .   suppose @xmath120 has the form @xmath127 such that @xmath75 is an extension of @xmath58 .",
    "by induction hypothesis we conclude @xmath128 . in conjunction with an application of the rule",
    "@xmath129 we derive @xmath130 as required .",
    "4 .   suppose @xmath120 has the form @xmath131 such that @xmath75 is an extension of @xmath132 .",
    "then by induction hypothesis we obtain : @xmath133 .",
    "furthermore by induction hypothesis we have @xmath134 5 .",
    "suppose the initial sequence of @xmath119 is based on the following reductions , where @xmath135 .",
    "@xmath136       & \\smallstep{0}{f(v_1,t_2,\\dots , t_n)}{\\sigma_n}{f(x_1,\\dots , x_n)}{\\sigma_n \\dunion \\rho }      \\tpkt    \\end{aligned}\\ ] ] we apply induction hypothesis on @xmath137 and conclude : @xmath138 .",
    "again by induction hypothesis and inspection of the corresponding proofs , we obtain @xmath139 for all @xmath109 .",
    "( we set @xmath140 . ) due to lemma  [ l:9 ] we have @xmath141 .",
    "thus , for all @xmath142 , @xmath143 . note that @xmath117 .",
    "hence , from @xmath144 we obtain @xmath145 . thus @xmath91 follows .    we extend the notion of potential ( cf",
    "definition  [ d : potential ] ) to ground terms .",
    "[ d : potential2 ] let @xmath146 and let @xmath147 .",
    "then the _ potential _ of @xmath40 is defined as follows : @xmath148    note that by assumption the declaration in @xmath149 is unique .",
    "[ ex:6 ] recall the types of @xmath10 and @xmath150 .",
    "let @xmath151 be a queue .",
    "we obtain @xmath152 .",
    "[ l:6 ] let @xmath0 and @xmath48 be well - typed .",
    "suppose @xmath153 .",
    "then we have @xmath154 .",
    "let @xmath120 denote the proof of @xmath153 .    1 .",
    "let @xmath95 and thus wlog .",
    "@xmath120 is of form @xmath155 then @xmath156 , from which the lemma follows .",
    "2 .   let @xmath157 where @xmath34 .",
    "thus wlog .",
    "@xmath120 is of form @xmath158 hence we obtain @xmath159 and the lemma follows .",
    "3 .   suppose @xmath108 , such that @xmath160 and @xmath34 .",
    "thus @xmath120 is of form @xmath161 where @xmath162 .",
    "then by induction hypothesis we have @xmath163 for all @xmath109 .",
    "hence @xmath164 .",
    "let @xmath165 .",
    "again by induction hypothesis we have @xmath166 . note that @xmath167 and @xmath168 by construction .",
    "we obtain @xmath169 4 .",
    "suppose @xmath120 is of form : @xmath170 by induction hypothesis , we have @xmath154 .",
    "then the lemma follows from the assumption @xmath171 .",
    "suppose @xmath120 ends with one of the following structural rules @xmath172}{c } } } {       \\tjudge{\\gamma , \\typed{x}{a_1 } , \\typed{y}{a_2}}{p}{\\typed{t[x , y]}{c } }       &         \\share{a}{a_1,a_2 }        } \\ ] ] we only consider the second rule , as the first alternatives follows trivially .",
    "let @xmath173 ; by induction hypothesis , we have @xmath174\\rho}{a})$ ] . by definition of @xmath76 and lemma  [ l:10 ] , we obtain @xmath175 hence @xmath176\\sigma}{a})$ ]",
    "follows from @xmath177\\rho = t[z , z]\\sigma$ ] .",
    "suppose @xmath120 ends either in a sub- or in a supertyping rule : @xmath178 consider the second rule .",
    "we have to show that @xmath179 .",
    "this follows from induction hypothesis , which yields @xmath180 as @xmath181 by definition of the subtyping relation .",
    "the argument for the first rule is similar .",
    "this concludes the inductive argument .",
    "we obtain our second soundness result .",
    "[ l:5 ] let @xmath0 and @xmath48 be well - typed .",
    "suppose @xmath153 and @xmath182 . then @xmath183 . thus if for all ground basic terms @xmath40 and types @xmath24 : @xmath184 , where @xmath185 , then @xmath186 .",
    "let @xmath93 be the proof of the judgement @xmath182 and let @xmath120 denote the proof of @xmath153 .",
    "the proof proceeds by main - induction on the length of @xmath93 and by side - induction on the length of @xmath120 .",
    "we focus on some interesting cases .    1 .",
    "suppose @xmath93 has the form @xmath187 such that @xmath95 and @xmath188 .",
    "as @xmath48 is normalised @xmath46 is a value .",
    "we can assume that @xmath120 is of form @xmath189 .",
    "it suffices to show @xmath190 , which follows from lemma  [ l:6 ] as @xmath191 .",
    "suppose @xmath93 has the form @xmath192 such that @xmath99 and @xmath193 , which again is a value .",
    "further let @xmath120 end in the judgement : @xmath194 let @xmath195 ; by lemma  [ l:6 ] we have @xmath196 as @xmath197 .",
    "3 .   suppose @xmath93 has the form @xmath198 then @xmath199 is ground , as all @xmath200 are values . hence , we have @xmath201 the last equality follows as @xmath202 . by lemma  [ l:6 ] we have @xmath154",
    ". then the theorem follows as @xmath203 from above .",
    "4 .   suppose @xmath93 has the form @xmath204 then @xmath103 and @xmath205 .",
    "suppose @xmath206 and let @xmath207 for @xmath208 . as @xmath0 is left - linear we have @xmath209 .",
    "we set @xmath210 . by the assumption @xmath153 and well - typedness of @xmath0",
    "we obtain @xmath211 as in  .",
    "we have @xmath212 here the first equality follows by an inspection on the cases for the constructors and @xmath213 follows due to lemma  [ l:6 ] and  .",
    "furthermore note that @xmath214 , as @xmath57 .",
    "suppose the last rule in @xmath93 has the form @xmath215 wlog .",
    "the last rule in the type inference @xmath120 is of the following form , where we can assume that every variable occurs at most once in @xmath216 .",
    "@xmath217 by induction hypothesis on @xmath218 and @xmath219 we obtain ( i ) @xmath220 and @xmath221 applications of lemma  [ l:6 ] yield ( ii ) @xmath222 for all @xmath223 .",
    "we set @xmath224 .",
    "another application of lemma  [ l:6 ] on @xmath225 yields ( iii ) @xmath226 . finally , we observe @xmath227 .",
    "the theorem follows by combining the equations in ( i)(iii ) .",
    "suppose @xmath120 is of form : @xmath228 by side - induction on @xmath229 and @xmath182 we conclude that @xmath183 .",
    "then the theorem follows from the assumption @xmath171 .",
    "suppose @xmath120 is of form : @xmath230 we conclude by side - induction that @xmath231 .",
    "as @xmath232 the theorem follows . 8 .",
    "suppose @xmath120 is of form : @xmath233}{c } } } {       \\tjudge{\\gamma , \\typed{x}{a_1 } , \\typed{y}{a_2}}{p}{\\typed{t[x , y]}{c } }       &         \\share{a}{a_1,a_2 }        } \\ ] ] by assumption @xmath234}{\\sigma}{u}{\\sigma'}$ ] ; let @xmath173 . by side - induction on @xmath235}{c}}$ ] and",
    "@xmath236}{\\rho}{u}{\\sigma'}$ ] we conclude that for all @xmath237 . by definition of @xmath76 and lemma  [ l:10 ]",
    ", we obtain @xmath238 , from which the theorem follows .",
    "suppose @xmath120 ends either in a sub- or in a supertyping rule : @xmath178 consider the first rule . by assumption @xmath182 and by definition @xmath239 .",
    "thus the theorem follows by side - induction hypothesis .",
    "we adapt the concept of polynomial interpretation to typed trss . for",
    "that we suppose a mapping @xmath240 that assigns to every _ annotated _ type @xmath23 a subset of the natural numbers , whose elements are ordered with @xmath241 in the standard way . the set @xmath242 is called the _ interpretation _ of @xmath23 .",
    "[ d : interpretation ] an _ interpretation @xmath243 of function symbols _ is a mapping from function symbols and types to functions over @xmath244 . consider a function symbol @xmath4 and an annotated type @xmath23 such that @xmath245",
    ". then the interpretation @xmath246 of @xmath4 is defined as follows : @xmath247    note that by assumption the declaration in @xmath149 is unique and thus @xmath248 is unique .",
    "interpretations of function symbols naturally extend to interpretation on ground terms .",
    "@xmath249 let @xmath0 be a well - typed and let the interpretation @xmath243 of function symbols in @xmath26 be induced by the well - typing of @xmath0 . then by construction @xmath250 .",
    "[ ex:7 ] based on definition  [ d : interpretation ] we obtain the following definitions of the interpretation of function symbols @xmath243 .",
    "we start with the constructor symbols .",
    "@xmath251 where @xmath252 .",
    "similarly the definition of @xmath243 for defined symbols follows from the signature detailed in example  [ ex:5 ] .",
    "it is not difficult to see that for any rule @xmath253 and any substitution @xmath48 , we obtain @xmath254 .",
    "we show this for rule  1 .",
    "@xmath255 orientability of @xmath1 with the above given interpretation implies the optimal linear innermost runtime complexity .",
    "we lift the standard order @xmath241 on the interpretation domain @xmath244 to an order on terms as follows .",
    "let @xmath45 and @xmath40 be terms of type @xmath24 .",
    "then @xmath256 if for all well - typed substitutions @xmath48 we have @xmath257 .",
    "[ l:8 ] let @xmath0 be well - typed ,",
    "constructor trs over signature @xmath26 and let the interpretation of function symbols @xmath243 be induced by the type system .",
    "then @xmath258 for any rule @xmath69 .",
    "thus if for all ground basic terms @xmath40 and types @xmath24 : @xmath259 , where @xmath185 , then @xmath186 .    let @xmath260 and let @xmath261 be fresh variables .",
    "suppose further @xmath245 .",
    "as @xmath0 is well - typed we have @xmath262 for @xmath263 .",
    "now suppose that @xmath55 denotes any well - typed substitution for the rule @xmath63 .",
    "it is standard way , we extend @xmath55 to a well - typed substitution @xmath48 such that @xmath264 . by definition of the small - step semantics ,",
    "we obtain @xmath265 then by lemma  [ l:5 ] , @xmath266 and by definitions , we have : @xmath267 furthermore , observe that @xmath268 as @xmath57 . in sum",
    ", we obtain @xmath269 , from which we conclude @xmath270 .",
    "as @xmath55 was chosen arbitrarily , we obtain @xmath271 .",
    "we say that an interpretation _ orients _ a typed trs @xmath0 , if @xmath271 . as an immediate consequence of the theorem",
    ", we obtain the following corollary .",
    "[ c:1 ] let @xmath0 be a well - typed and constructor trs .",
    "then there exists a typed polynomial interpretation over @xmath244 that orients @xmath0 .    at the end of section  [ annotatedtypes ]",
    "we have remarked on the automatabilty of the obtained amortised analysis .",
    "observe that theorem  [ l:8 ] gives rise to a conceptually quite different implementation . instead of encoding the constraints of the typing rules in figure  [ fig:2 ] one directly encode the orientability constraints for each rule , cf .",
    "this paper is concerned with the connection between amortised resource analysis , originally introduced for functional programs , and polynomial interpretations , which are frequently used in complexity and termination analysis of rewrite systems .    in order to study this connection we established a novel resource analysis for typed term rewrite systems based on a potential - based type system .",
    "this type system gives rise to polynomial bounds for innermost runtime complexity .",
    "a key observation is that the classical notion of potential can be altered so that not only values but any term can be assigned a potential .",
    "the potential function @xmath272 is conceivable as an interpretation .",
    "based on this observation we have shown that well - typedness of a trss @xmath0 induces a typed polynomial interpretation orienting @xmath0 .    apart from clarifying the connection between amortised resource analysis and polynomial interpretation our results seems to induce two new methods for the innermost runtime complexity of typed trss as indicated above .",
    "we emphasise that these methods are not restricted to typed trss , as our cost model gives rise to a _ persistent _ property . here",
    "a property is persistent if , for any typed trs @xmath0 the property holds iff it holds for the corresponding untyped trs @xmath273 . while termination is in general not persistent  @xcite , it is not difficult to see that the runtime complexity is a persistent property .",
    "this is due to the restricted set of starting terms .",
    "thus it seems that the proposed techniques directly give rise to novel methods of automated innermost runtime complexity analysis .    in future work",
    "we will clarify whether the established results extend to the multivariate amortised resource analysis presented in  @xcite .",
    "furthermore , we will strive for automation to assess the viability of the established methods .        c.  alias , a.  darte , p.  feautrier , and l.  gonnord .",
    "multi - dimensional rankings , program termination , and complexity bounds of flowchart programs . in _ proc .",
    ", volume 6337 of _ lncs _ , pages 117133 , 2010 .",
    "f.  zuleger , s.  gulwani , m.  sinn , and h.  veith .",
    "bound analysis of imperative programs with the size - change abstraction . in _ proc .  of 18th international symposium on static analysis _ ,",
    "volume 6887 of _ lncs _ , pages 280297 .",
    "springer verlag , 2011 ."
  ],
  "abstract_text": [
    "<S> we introduce a novel resource analysis for typed term rewrite systems based on a potential - based type system . </S>",
    "<S> this type system gives rise to polynomial bounds on the innermost runtime complexity . </S>",
    "<S> we relate the thus obtained amortised resource analysis to polynomial interpretations and obtain the perhaps surprising result that whenever a rewrite system @xmath0 can be well - typed , then there exists a polynomial interpretation that orients @xmath0 . for this </S>",
    "<S> we adequately adapt the standard notion of polynomial interpretations to the typed setting .    </S>",
    "<S> _ key words _ : term rewriting , types , amortised resource analysis , complexity of rewriting , polynomial interpretations </S>"
  ]
}