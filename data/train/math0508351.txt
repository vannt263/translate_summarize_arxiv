{
  "article_text": [
    "in 1980 , david joyce introduced a new algebraic structure dubbed the _",
    "quandle_. quandles are tailor - made for defining invariants of knots since the quandle axioms are essentially the reidemeister moves written in algebra .",
    "associated to any knot diagram , there is a quandle called the _ knot quandle _ which is a complete invariant of knot type up to homeomorphism of topological pairs .",
    "the history of quandle theory is a story of rediscovery and reinvention .",
    "quandles and their generalization , racks , have been independently invented and studied by numerous authors ( @xcite , @xcite , @xcite , @xcite , etc . ) and classification results for various subcategories of quandles have been obtained by various authors ( @xcite , @xcite . ) in @xcite , the third listed author and a coauthor described a way of representing finite quandles as matrices and implemented algorithms for finding all finite quandles , removing isomorphic quandles from the list , and computing the automorphism group of each quandle .",
    "as we later learned , some of our work has duplicated the efforts of others ( @xcite , @xcite , @xcite . )",
    "this paper is intended to reduce future duplication of effort by describing the algorithms for computation with finite quandles implemented in @xcite and other recent projects , as well as an improved algorithm for finding quandle matrices .",
    "the c source for our implementation of this algorithm as well as _ maple _ implementations of algorithms for computing with finite quandles and the lists of quandle matrices of order 6 , 7 and 8 are available for download at ` http://www.esotericka.org/quandles ` .",
    "additional maple code corresponding to current and future projects will be made available at the same site , such as an algorithm for finding all alexander presentations of a quandle when such exist @xcite .",
    "axiom ( ii ) says that @xmath2 is right - invertible ; for every @xmath3 , the map @xmath4 defined by @xmath5 is a bijection ( indeed , a quandle automorphism ) .",
    "denote the inverse map @xmath6 .",
    "then @xmath7 is also a quandle , called the _ dual _ of @xmath8 ; not only is @xmath9 self - distributive , but it is an easy exercise to check that @xmath2 and @xmath9 distribute over each other .",
    "standard examples of quandles include groups , which are quandles under conjugation @xmath10 as well as @xmath0-fold conjugation @xmath11 , denoted @xmath12 and @xmath13 respectively , and alexander quandles , which are modules over the ring @xmath14 $ ] of laurent polynomials in one variable with integer coefficients , with quandle operation given by @xmath15    a finite quandle @xmath16 may be specified by giving its _ quandle matrix _ @xmath17 , which is the matrix obtained from the operation table of @xmath18 ( where the entry in row @xmath19 column @xmath20 is @xmath21 ) by dropping the @xmath22s and keeping only the subscripts . in @xcite it is noted that , unlike arbitrary binary operation tables or indeed even rack tables , quandle axiom ( i ) permits us to deduce the column and row labels from the elements along the diagonal of a quandle matrix .",
    "a map @xmath23 from a quandle @xmath24 to a quandle @xmath25 may be represented by a vector @xmath26 .",
    "such a vector @xmath27 then represents a homomorphism iff @xmath28 , that is , iff we have @xmath29=b[v[i],v[j]]\\ ] ] for all @xmath30 where @xmath31 , @xmath32 , and the notation @xmath33 $ ] indicates the entry of @xmath34 in row @xmath19 column @xmath20 .    in @xcite ,",
    "presentations of quandles by generators and relations are defined . in @xcite , it is observed that all finitely presented quandles may be written with a _ short form _ presentation in which every relation is of the form @xmath35 where @xmath36 . in particular",
    ", a knot quandle has a presentation with @xmath0 such short relations where @xmath0 is the number of crossings in the diagram .",
    "moreover , we may assume ( rewriting if necessary ) that every relation is written in the form @xmath37 and that no two relations of the form @xmath37 and @xmath38 are present , since if @xmath37 and @xmath38 are both present we can replace every instance of @xmath39 with @xmath40 and remove the generator @xmath39 without changing the presented quandle ; in particular , if our quandle is a knot quandle , reidemeister type i moves induce such a replacement .",
    "this matrix representation gives us a convenient way to do computations involving quandles , including the quandle counting invariant for knot quandles or other short form quandles with respect to a finite target quandle .",
    "the next section describes algorithms for doing computations with quandles and refers to implementations in _",
    "maple _ @xcite and c @xcite .",
    "the goal of the computations in @xcite was to find all quandles of a given finite order .",
    "originally , we wrote separate programs for each value of @xmath0 ; @xcite includes one example of such an implementation , ` quandleslist5 ` .",
    "we later wrote a more general program which works for arbitrary @xmath0 , though due to the large number of columns to be checked , for values of @xmath41 we decided to implement a stand - alone version suitable for distributed computing .",
    "the algorithm implemented in ` quandleslist ` takes a number @xmath0 and generates a list of all @xmath42 standard form quandle matrices .",
    "a matrix @xmath43 is a quandle matrix in standard form iff it satisfies the following three conditions :            to guarantee that conditions ( i ) and ( ii ) are satisfied , we start by getting a list of all permutations of @xmath46 .",
    "the program ` listperms ` takes a number @xmath0 and produces a list of all permutations @xmath49 , represented as vectors @xmath50 $ ] , in the dictionary order .",
    "the @xmath19th column in a standard form quandle matrix has entry @xmath19 in the @xmath19th position .",
    "the program ` listpermsi ` takes a pair of positive integers @xmath51 and outputs a list of all permutations of @xmath52 @xmath49 which fix the element @xmath19 .    to test quandle axiom ( iii ) , we note that the first time any triple @xmath53 fails to satisfy the axiom , we can exit the program and report that the matrix is not a quandle .",
    "this is implemented in ` q3test ` .    for a fixed value of @xmath0",
    ", we can then simply run over a series of nested loops , testing each resulting matrix for quandle axiom ( iii ) , since by construction axioms ( i ) and ( ii ) are already satisfied .",
    "the program ` quandleslist5 ` is an example of this .",
    "the program ` quandleslist ` finds a list of all quandle matrices of a given size @xmath0 . to find all @xmath42 quandle matrices for arbitrary @xmath0 , `",
    "quandleslist ` finds all control vectors @xmath54 $ ] with @xmath0 entries using ` listmaps ` , a program which takes two inputs @xmath40 and @xmath55 and outputs a list of all @xmath40-component vectors with entries in @xmath56 .",
    "each entry in the control vector corresponds to a column in the output matrix ; for each such control vector , an @xmath42 matrix @xmath33 $ ] is produced whose @xmath19th column is @xmath57[v[i]]$ ] , where @xmath57 $ ] is the output of ` listpermsi(n , i ) ` .",
    "these matrices are then tested for quandle axiom ( iii ) using ` q3test ` . for completeness",
    ", we include a program which tests a matrix for all three quandle axioms , ` qtest ` .",
    "since every @xmath0-component vector with entries in @xmath58 can be interpreted as a map from @xmath46 to @xmath58 , we can use ` listmaps ` to compute the set of all homomorphisms from one finite quandle to another .",
    "let @xmath59 be an @xmath42 quandle matrix and @xmath60 an @xmath61 quandle matrix .",
    "then the vector @xmath62 , @xmath63\\le m$ ] represents a quandle homomorphism @xmath64 iff @xmath29=v(i\\tr j ) = v(i)\\tr v(j)=b[v[i],v[j]],\\ ] ] as noted in section [ sec2 ] .",
    "the program ` homtest ` takes two quandle matrices and a vector and reports whether the vector represents a quandle homomorphism or not .",
    "the program ` homtest ` handles the case where @xmath65 is either a finite quandle matrix or a presentation matrix for a finitely presented quandle ; in the former case , the program simply tests whether the assignment of generators @xmath46 in the quandle with presentation matrix @xmath65 to elements @xmath58 in the finite quandle @xmath66 satisfy the relations defining @xmath65 by ignoring any zero entries in @xmath65 .",
    "we make use of ` nextmap ` , a procedure which takes as input a vector @xmath27 and number @xmath0 and returns the next @xmath67-component vector with entries in @xmath68 in the dictionary order , to get a list of all homomorphisms from the quandle with matrix @xmath65 to the quandle with matrix @xmath66 in the program ` homlist ` .",
    "the program ` homcount ` counts the number of homomorphisms from one finite quandle to another .",
    "if @xmath65 is a knot quandle presentation matrix , then ` homcount ` computes the quandle counting invariant , i.e. , the number of quandle colorings of the knot diagram defining @xmath65 by the finite quandle @xmath66 .",
    "alternate methods of computing the quandle counting invariant for finite alexander quandles are described in @xcite .",
    "after the first version of this paper was completed , we implemented a much faster algorithm for finding quandle homomorphisms , ` homlist2 ` .",
    "this program uses a @xmath69-component vector with entries in @xmath70 as a template for a homomorphism , with 0 entries acting as blanks to be filled in .",
    "the program keeps a working list of such templates , systematically filling in zero values and propagating the value through the template using ` homfill ` .",
    "the procedure ` homfill ` takes as input a quandle matrix @xmath66 , a quandle presentation matrix @xmath65 and a template vector @xmath27 and systematically checks every pair of entries for the quandle homomorphism condition @xmath71=b[v[i],v[j]]$ ] , filling in zeroes where possible and reporting `` false '' if a contradiction is found .",
    "since an isomorphism is a bijective homomorphism , and a bijective map is represented by a permutation @xmath72 , we can test whether two quandles given by matrices are isomorphic by running through the list of permutations of order @xmath0 and testing to see whether any are homomorphisms .",
    "the program ` isotest ` returns `` true '' the first time it finds an isomorphism and `` false '' if it gets through all @xmath73 permutations without finding an isomorphism .      in @xcite , a slightly different method of determining the automorphism group of a quandle was used .",
    "specifically , permuting the entries of a quandle matrix @xmath65 by a permutation @xmath75 applies an isomorphism to the defined quandle , but the new matrix now has its rows and columns out of order . to restore the order",
    ", we conjugate by the matrix of the permutation ; the resulting matrix was called @xmath76 in @xcite . in particular ,",
    "a permutation @xmath75 is an automorphism of @xmath65 iff @xmath77 . to compute @xmath78 in @xcite , we ran a loop over the list of permutations given by ` listperms ` and noted which ones preserved the original matrix @xmath65 . here , we include a program ` stndiso ` which computes the standard form matrix @xmath76 given a quandle matrix @xmath65 and a vector @xmath27 representing the permutation @xmath75 .",
    "finally , once we have a list of quandle matrices of order @xmath0 , we want to choose a single representative from each isomorphism class .",
    "the program ` reducelist ` takes a list of quandle matrices and compares them pairwise with ` isotest ` , removing isomorphic copies and outputting a trimmed list .",
    "the program ` reducelist ` works for short lists ; an improved algorithm , implemented as ` reducelist2 ` , is better for longer lists , but neither is sufficient to reduce the rather lengthy lists of quandles of order 7 and 8 in a reasonable amount of time .",
    "we note that several of these programs , notably ` homtest ` , ` homlist ` , ` homlist2 ` , ` homcount ` , ` isotest ` , ` autlist ` , and ` reducelist ` are not quandle - specific but apply as written to any binary operation defined using a matrix as operation table .",
    "these facts are exploited in @xcite , in which the authors give a program which determines all alexander structures on a quandle , if there are any , using matrices to represent the cayley table of an abelian group .      in our initial version of the stand - alone program",
    ", several instances of the program could be run in parallel on networked machines using a control file to ensure that separate instances do not repeat the same computations .",
    "however , sufficient improvements were made to the algorithm by pruning the search space that the current version can handle the @xmath79 case on a single processor , though the @xmath80 case is still out of reach even with a large network .",
    "the first improvement was to introduce a partial test versus axiom ( iii ) after generation of each column .",
    "in many cases we can find entries that violate the axiom well before the entire matrix is generated , which allows vast portions of the search space to be pruned .",
    "the second improvement was to notice when all of the interior coordinate values as well as the left - hand side value of the axiom ( iii ) equality have been computed , but the right - hand side value has not . in this case",
    "we can constrain a row of a future column to be equal to the left - hand side value .",
    "this reduces the number of rows that must be permuted when searching that column , which further prunes the search space .",
    "the pruning effect is magnified the earlier these constraints are added .",
    "for example , with n=7 and all else held equal , adding a single constraint to column 3 saves @xmath81 or @xmath82 tests , whereas adding a constraint to column 7 saves only @xmath83 or 600 tests .",
    "the effect of the two improvements can be seen in the following tables .",
    "it is interesting to note that although there is nothing in the program to prevent it ( and reasonable amount of code to encourage it ) , we never add constraints to column 2 , nor do we ever add more than one constraint per column , nor do we detect addition of conflicting constraints .",
    "00 brieskorn , e. _ automorphic sets and braids and singularities .",
    "_ contemp .",
    "78 ( 1988 ) 45 - 115 .",
    "carter , s. ; kamada , s. ; saito , m. _ surfaces in 4-space .",
    "_ encyclopaedia of mathematical sciences , 142 .",
    "low - dimensional topology , iii .",
    "springer - verlag , berlin , 2004 .",
    "fenn , r. ; rourke , c. _ racks and links in codimension two .",
    "_ j. knot theory ramifications 1 ( 1992 ) , 343 - 406 .",
    "graa , m. _ indecomposable racks of order @xmath84 .",
    "_ beitrge algebra geom . 45",
    "( 2004 ) 665 - 676 .",
    "henderson , r. ` http://www.esotericka.org/quandle5.c ` . ho , b. ; nelson , s. _ matrices and finite quandles_. homotopy , homology and applications 7 ( 2005 ) 197 - 208 .",
    "joyce , d. _ a classifying invariant of knots , the knot quandle_. j. pure appl .",
    "algebra 23 ( 1982 ) 37 - 65 .",
    "lopes , pedro and roseman , dennis . _ on finite racks and quandles . _",
    "math.gt/0412487 . mateev , s. v. _ distributive groupoids in knot theory .",
    "( 1982 ) , 78 - 88 .",
    "murillo , g. ; nelson , s. ; thompson , a. _ matrices and finite alexander quandles_. arxiv.org : math.gt/0509365 nelson , s. ` http://www.esotericka.org/quandles ` .",
    "nelson , s. _ classification of finite alexander quandles_. topology proceedings 27 ( 2003 ) 245 - 258 .",
    "nelson , s. _ signed ordered knotlike quandle presentations_. algebraic & geometric topology 5 ( 2005 ) 443 - 462 .",
    "nelson , s. and wong , c - y .",
    "_ on the orbit decomposition of finite quandles .",
    "_ arxiv.org : math.gt/0508247 ryder , h. _ the structure of racks _ , ph.d .",
    "thesis , u. warwick ."
  ],
  "abstract_text": [
    "<S> algorithms are described and _ maple _ implementations are provided for finding all quandles of order @xmath0 , as well as computing all homomorphisms between two finite quandles or from a finitely presented quandle ( e.g. , a knot quandle ) to a finite quandle , computing the automorphism group of a finite quandle , etc . </S>",
    "<S> several of these programs work for arbitrary binary operation tables and hence algebraic structures other than quandles . </S>",
    "<S> we also include a stand - alone c program which finds quandles of order @xmath0 and provide urls for files containing the results for @xmath1 7 and 8 .    </S>",
    "<S> keywords : finite quandles , symbolic computation    2000 msc : 57m27 , 57 - 04 </S>"
  ]
}