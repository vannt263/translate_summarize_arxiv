{
  "article_text": [
    "the heavy computational demands of high - fidelity computational fluid dynamics ( cfd ) simulations , caused by fine grid resolutions and time step sizes in addition to complex physical models , are the primary bottleneck preventing most industrial and academic researchers from performing and using such studies .",
    "reactive - flow simulations considering detailed chemistry in particular pose prohibitive computational demands due to ( 1 ) chemical stiffness , caused by rapidly depleting species and/or fast reversible reactions , and ( 2 ) the large and ever - increasing size of detailed reaction mechanisms . while reaction mechanisms for fuels relevant to hypersonic engines , such as hydrogen or ethylene , may contain 1070 species  @xcite , a recent surrogate mechanism for gasoline consists of about species and reactions  @xcite ; a surrogate mechanism for biodiesel contains almost species and over reactions  @xcite . strategies for incorporating such large , realistic reaction mechanisms in reactive - flow simulations are beyond the scope of this paper ; for example , lu and law  @xcite recently reviewed strategies for mechanism reduction .",
    "even compact mechanisms pose challenges due to stiffness . in the presence of stiffness , explicit integration algorithms generally require time step sizes on the same order as the fastest chemical time scales , which can be many orders of magnitude smaller than the flow time scale  @xcite . due to the resulting computational inefficiency ,",
    "most reactive - flow simulations rely on specialized integration algorithms such as high - order implicit solvers based on backward differentiation formulas ( bdfs )  @xcite .",
    "however , these implicit solvers involve expensive linear algebra operations , so techniques for removing stiffness via reduced chemistry have also been developed  @xcite .",
    "exploiting graphics processing unit ( gpu ) acceleration offers another avenue for enabling the use of accurate , detailed reaction mechanisms in high - fidelity reactive - flow simulations .",
    "most reactive - flow codes rely on the operator - splitting or fractional - step method  @xcite , where the large system of governing partial differential equations ( pdes ) is separated such that different physical processes are evaluated separately . for the chemistry  typically the most time - consuming portion of the simulation , accounting for 90% or more of the total simulation time in some cases  this results in a system of independent ordinary differential equations ( odes ) for the conservation of species mass in each spatial location ( i.e. , at each grid point or volume ) .    due to the independent nature of the integration for the systems of odes governing chemistry in all locations",
    ", the entire set can be integrated simultaneously .",
    "one option is to parallelize the chemistry integration on multiple central processing unit ( cpu ) cores or processors using the message passing interface ( mpi )  @xcite or openmp  @xcite , but the massive parallelism and increasing performance of gpus  as well as the potential to reduce capital costs through improved energy efficiency  make them an attractive option for accelerating reactive - flow codes .",
    "general cfd applications also benefit from gpu acceleration due to the inherent data parallelism of most calculations for both finite difference and finite volume methods .",
    "vanka et al .",
    "@xcite surveyed some of the literature on using gpus to accelerate general cfd simulations ; more recently , niemeyer and sung  @xcite comprehensively reviewed advances in this area for both nonreactive and reactive flows . in the following , we will summarize important results related to gpu - based reactive - flow simulations .",
    "the first effort in this area came from spafford et al .",
    "@xcite , who accelerated the species rate evaluations in the direct numerical simulation ( dns ) code s3d  @xcite on the gpu . in their approach ,",
    "the cpu handles the time integration of the chemical source terms using an explicit fourth - order runge  kutta method .",
    "each integration step requires four species rate evaluations , and for each evaluation the cpu invokes the gpu to evaluate the species rates of change for all grid points simultaneously . using an ethylene reaction mechanism with 22 species , spafford et al .",
    "@xcite achieved performance speedups of around 15@xmath0 and 9@xmath0 for single- and double - precision calculations , respectively .",
    "most recent efforts follow the spatially - independent acceleration paradigm introduced by spafford et al .",
    "@xcite , beginning with niemeyer et al .",
    "@xcite , who developed a gpu - based explicit integration algorithm for nonstiff chemistry . using a compact hydrogen mechanism with 9 species and 38 irreversible reactions  @xcite , niemeyer et al .",
    "@xcite demonstrated a computational speedup of up to 75@xmath0 compared to a single - core cpu over a wide range of independent ode systems .",
    "shi et al .",
    "@xcite presented a hybrid cpu / gpu chemistry integration strategy where the gpu simultaneously integrates nonstiff chemistry in grid cells using an explicit algorithm and the cpu handles spatial locations with stiff chemistry using a standard implicit integrator .",
    "this combined approach , paired with a reactive - flow code , achieved an overall performance speedup of 1146@xmath0 over the algorithms executed on a single cpu core .",
    "le et al .",
    "@xcite developed the first reactive - flow solver where the gpu evaluates both the fluid transport and chemical kinetics terms .",
    "as with most other approaches , they used operator splitting to decouple and independently solve the fluid transport and chemistry terms .",
    "they handled the stiff chemical kinetics terms in parallel on the gpu using a first - order implicit method ( the backward euler method ) , employing a direct gaussian elimination to solve the resulting linear system of equations .",
    "compared against an equivalent cpu version executed on a single processor core , their combined gpu solver performed up to 40 times faster using a reaction mechanism for methane with 36 species and reversible 308 reactions , on a grid with greater than cells .",
    "however , the low order of the chemistry solver  first order  should be noted .",
    "stone et al .",
    "@xcite implemented two chemistry integrators on the gpu : ( 1 ) a fourth - order adaptive runge  kutta  fehlberg ( rkf45 ) method and ( 2 ) the standard fifth - order accurate implicit cvode method .",
    "applied to a reduced mechanism for ethylene with 19 species and 15 global reaction steps  @xcite and compared against equivalent single - core cpu versions over a range of ode numbers , the rkf45 and cvode methods achieved up to 28.6@xmath0 and 7.7@xmath0 speedup , respectively .",
    "the gpu - based rkf45 method performed @xmath1 faster than the cpu - based dvode solver operating on a single core .",
    "it should be noted that the reduced mechanism used by stone et al .",
    "@xcite may not exhibit much stiffness , since it was developed by applying the quasi - steady - state approximation to certain radical species and eliminating fast elementary reactions  @xcite .",
    "alternative approaches for gpu acceleration of chemical kinetics have also been presented that exploit other areas of data independence .",
    "shi et al .",
    "@xcite used the gpu to ( 1 ) simultaneously calculate all the reaction rates for a single kinetic system ( i.e. , a single computational volume / grid point ) and ( 2 ) accelerate the matrix inversion step of the implicit time integration using a commercial gpu linear algebra library , cula  @xcite .",
    "they found this approach beneficial for large reaction mechanisms ( e.g. , more than species ) , accelerating homogenous autoignition simulations up to 22@xmath0 , but for moderate - size mechanisms ( e.g. , less than 100 species ) their gpu - based implementation performed slower than the original cpu version .",
    "more recently , sankaran  @xcite presented a new approach for accelerating the chemistry in turbulent combustion simulations where the gpu solves the unsteady laminar flamelet equations ; the controlling cpu handles the main flow solver .",
    "this method involves three levels of concurrency on the gpu : ( 1 ) the solution of species reaction rates , thermochemical properties , and molecular transport rates ; ( 2 ) the solution of the discretized flamelet equations in an regular grid in the mixture fraction space ; and ( 3 ) the solution of multiple flamelets .    here",
    ", we demonstrate new strategies for accelerating chemical kinetics with moderate levels of stiffness using gpu - based explicit integration algorithms . building upon our earlier work using the standard fourth - order runge ",
    "kutta algorithm  @xcite , we demonstrate the potential performance improvement using a related explicit fifth - order adaptive method for nonstiff chemical kinetics .",
    "in addition , we introduce a stabilized explicit runge  kutta method that can handle moderate stiffness , and show that it can be used on gpus to achieve significant computational speedup .    the rest of the paper is structured as follows .",
    "first , we discuss some topics related to gpu computing in section  [ s : gpu ] .",
    "next , in section  [ s : gov - eq ] we provide the governing equations for chemical kinetics in reactive - flow simulations , then in sections  [ s : rkck ] and [ s : rkc ] we describe the explicit integration algorithms used in this study . in section  [",
    "s : results ] we demonstrate the performance of the gpu - accelerated integration algorithms using four reaction mechanisms with increasing levels of stiffness and discuss these results .",
    "finally , we summarize our work in section  [ s : conclusions ] and outline future research directions .",
    "while an in - depth discussion about gpu computing is beyond the scope of this work , we will briefly introduce important concepts .",
    "interested readers should see the textbooks , e.g. , by kirk and hwu  @xcite and sanders and kandrot  @xcite .",
    "the current generation of application programming interfaces , such as cuda  @xcite and opencl  @xcite , enables a c - like programming experience while exposing the massively parallel architecture of graphics processors .",
    "this avoids programming in the graphics pipeline directly .",
    "our efforts are based in cuda , a programming platform created and supported by nvidia , but the programming model of opencl , an open - source framework , is similar .",
    "in addition , recently a new avenue for gpu parallelization has been introduced : openacc  @xcite , which uses compiler directives ( e.g. , ` # pragma ` statements ) placed in fortran , c , and codes to identify sections of code to be run in parallel on gpus .",
    "this approach is similar to openmp  @xcite for parallelizing work across multiple cpus or cpu cores that share memory .",
    "gpus operate on the `` single instruction , multiple thread '' ( simt ) parallelization paradigm , similar to vector computing , where a large number of processing units independently and simultaneously execute the same instructions on different data elements .",
    "a parallel gpu function is a kernel , which  in the cuda programming model  consists of a grid of thread blocks .",
    "each block is made up by threads , the fundamental cuda processing unit .",
    "physically , gpus consist of a number of streaming multiprocessors ( e.g. , 14 ) , which can each execute 32 operations simultaneously .",
    "thread blocks are subdivided into warps consisting of 32 threads ; the streaming multiprocessors execute instructions for threads in a particular warp simultaneously . for optimal performance ,",
    "all 32 threads within a warp should follow the same instruction pathway .",
    "if threads in a warp encounter different instructions ( e.g. , through a conditional branch ) , the warp diverges and significant loss in performance may result  in the worst case , by a factor of 32 , if each thread follows a different instruction pathway .",
    "given a vector of state variables @xmath2 , the governing equations for scalars in a general reactive - flow simulation are @xmath3 where * a * and * d * represent the advective and diffusive fluxes , respectively , and _",
    "r _ represents the change due to chemical reactions . solving this stiff , coupled system for",
    "a large number of grid points / volumes is challenging , so many reactive - flow modeling approaches rely on operator splitting ( also known as the fractional step method )  @xcite .",
    "this technique separates the integration of the stiff reaction terms from the spatially discretized transport terms , resulting in a large number of independent systems of odes ",
    "one for each spatial location  to solve .",
    "when the reaction terms are separated from physical transport , the species equations are @xmath4 where @xmath5 denotes the mass fraction of the _ _ i__th chemical species , @xmath6 and @xmath7 are the numbers of species and reactions , respectively , @xmath8 is the mixture density , @xmath9 is the molecular weight of the _ _",
    "i__th species , @xmath10 is the rate of progress of reaction _ j _ , and @xmath11 and @xmath12 are the reverse and forward stoichiometric coefficients for the _ _",
    "i__th species in reaction _ j_. the rate of progress of an irreversible reaction without pressure dependence is given by @xmath13 where @xmath14 is the concentration of species _ k_.",
    "third - body and pressure - dependent reactions were also considered , depending on the formulation given for the particular reaction ; see , for example , law  @xcite , or the chemkin manual  @xcite , for details .",
    "the reaction rate coefficient @xmath15 follows the arrhenius formulation @xmath16 where @xmath17 is the universal gas constant , @xmath18 is the pre - exponential factor , @xmath19 is the temperature exponent , and @xmath20 is the activation energy for reaction _",
    "j_. in general , reactions may be reversible ; those without explicitly defined arrhenius reverse rate parameters ( i.e. , _ a _ , @xmath21 , and @xmath22 ) require evaluation of the equilibrium constant to obtain their reverse rate coefficients . to avoid the conditional statements that may cause thread divergence on gpus ( as will be discussed in section  [ s : results ] ) required by this evaluation , we converted all such reversible reactions into two irreversible reactions for each following the procedure given in [ a : irrev ] .",
    "in addition to the species equations , we consider a constant - pressure energy equation @xmath23 where @xmath24 is the mass - averaged constant - pressure specific heat and @xmath25 is the specific enthalpy of the _ _",
    "i__th species .",
    "together , the coupled mass and energy equations model the time - dependent behavior of an adiabatic , homogenous gas mixture in a closed system .",
    "the number of unknowns is equal to the number of species plus one ( temperature ) , @xmath26 , and the vector of dependent variables consists of temperature and the species mass fractions , @xmath27 .",
    "typically , reactive - flow simulation codes use bdf - based implicit algorithms to solve eqs .   and .",
    "while explicit algorithms tend to offer greater general efficiency and lower startup costs  important in operator - split formulations where the transport terms modify the thermochemical conditions and invalidate any saved information , such as the jacobian matrix , between reaction integration steps  stiffness - induced instabilities force the use of extremely small time step sizes .",
    "implicit algorithms offer greater stability and therefore allow larger time step sizes in the presence of stiffness , resulting in better performance overall .",
    "however , implicit methods involve complex control algorithms and linear algebra subroutines , with logical tests for convergence and controlling error . as such",
    ", these implicit methods may not be suitable for operating on gpus , where the complex control flow in such operations could cause threads in a warp to diverge due to slightly different conditions .",
    "stone et al .",
    "@xcite ported the implicit cvode solver to gpu operation , and found that it performed only slightly better than a multi - core cpu version would .",
    "explicit algorithms , on the other hand , involve simpler logical flow , and may be better - suited for gpu operation , especially with little - to - moderate stiffness in the chemical kinetics .",
    "when the chemical kinetics exhibits little to no stiffness , we can solve the system of equations given by eqs .   and using an explicit integration method such as the fifth - order runge ",
    "kutta method developed by cash and karp  @xcite , namely , the rkck method .",
    "this approach uses an embedded fourth - order method to determine the truncation error and adaptively select the step size ; our methodology is taken from press et al .",
    "@xcite .",
    ".coefficients for the fifth - order runge  kutta  cash ",
    "karp method , adopted from press et al .",
    "@xcite . [ cols=\"^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     if @xmath28 is the approximation to the exact solution @xmath29 at @xmath30 , and @xmath31 is the current step size , then the rkck formulas , which also apply to any general fifth - order runge ",
    "kutta method , are @xmath32 where @xmath33 is the fifth - order solution and @xmath34 is the solution of the embedded fourth - order method .",
    "the vector @xmath35 represents the evaluation of the right - hand side of eqs .   and .",
    "the rkck coefficients are given in table  [ t : rkck ] .",
    "the fourth- and fifth - order solutions are used to estimate the error of the step @xmath36 , @xmath37 this error is then compared against a desired accuracy , @xmath38 , defined by @xmath39 where @xmath40 is a tolerance level and @xmath41 represents a small value ( e.g. , ) . if the estimated error of the current step is larger than the desired accuracy ( @xmath42 ) , the step is rejected and a smaller step size is calculated ; if the error is smaller than the desired accuracy ( @xmath43 ) , the step is accepted and the step size for the next step is calculated .",
    "the following is used to calculate a new step size based on error and the current step size : @xmath44 here , _",
    "i _ represents the _",
    "_ i__th element of the related vector and _ s _ denotes a safety factor slightly smaller than unity ( e.g. , 0.9 ) .",
    "is used to calculate the next time step size for an accepted step and a new , smaller step size when the error is too large ( and therefore the step is rejected ) . in practice ,",
    "step size decreases and increases are limited to factors of ten and five , respectively .      for stiff problems , standard explicit integration methods",
    "become unsuitable due to stability issues , requiring unreasonably small time step sizes  @xcite .",
    "traditionally , implicit integration algorithms such as those based on bdfs have been used to handle stiff problems , but these require expensive linear algebra operations on the jacobian matrix .",
    "in addition , the complex logical flow would result in highly divergent instructions across different initial conditions , making implicit algorithms unsuitable for operation on gpus .",
    "one alternative to implicit algorithms for problems with moderate levels of stiffness is a stabilized explicit scheme such as the runge ",
    "kutta  chebyshev ( rkc ) method  @xcite .",
    "while the rkc method is explicit , it is capable of handling stiffness through additional stages  past the first two required for second - order accuracy  that extend its stability domain along the negative real axis .",
    "our rkc implementation is taken from sommeijer et al .",
    "@xcite and verwer et al .",
    "following the same terminology as in the description of the rkck method in section  [ s : rkck ] , where @xmath28 is the approximation to the exact solution @xmath29 at @xmath30 and @xmath31 is the current step size , the formulas for the second - order rkc are    rcl _ 0 & = & _ n , [ e : rkc0 ] + _ 1 & = & _ 0 + _ 1 t _ 0 , [ e : rkc1 ] + _ j & = & ( 1 - _ j - _ j ) _ 0 + _ j _ j - 1 + & & + _ j _ j - 2 + _ j t _ j - 1 + _ j t _ 0 , j = 2 , , s , [ e : rkcj ] + _ n + 1 & = & _ s , [ e : rkcs ]    where _ s _ is the total number of stages .",
    "the @xmath45 are internal vectors for the stages , and @xmath46 are evaluations of the right - hand - side function of the governing equations at each stage , where @xmath47 .",
    "note the recursive nature of @xmath45 , which requires only five arrays for storage .",
    "the coefficients used in eqs .   and",
    "are available analytically for any @xmath48 : @xmath49 where @xmath50 is the damping parameter ( we used @xmath51  @xcite ) .",
    "@xmath52 are the chebyshev polynomials of the first kind , defined recursively as @xmath53 where @xmath54 , @xmath55 , and @xmath56 and @xmath57 are the first and second derivatives of @xmath58 , respectively .",
    "the @xmath59 used in the function evaluations are @xmath60    the rkc method can also be used with an adaptive time stepping method for error control , as given by sommeijer et al .  @xcite .",
    "after taking the step @xmath61 and calculating @xmath33 , the error in the calculation at the current step is estimated using @xmath62 these error estimates are used with absolute and relative tolerances to define the weighted rms norm of error : @xmath63 where _ n _ represents the number of unknown variables ( here , @xmath26 as defined previously ) , @xmath64 is the vector of absolute tolerances , and _",
    "r _ is the relative tolerance .",
    "the norm @xmath65 indicates the euclidean or @xmath66 norm .",
    "the step is accepted if @xmath67 ; otherwise , it is rejected and redone using a smaller step size .",
    "the weighted rms norm of error for the current and prior steps , and the associated step sizes , are then used to predict the new step size , using @xmath68 where _ p _ is the order of the algorithm  two , in this case .",
    "when a step is rejected , we use a similar equation to calculate a new step size : @xmath69    in order to determine the initial time step size , we first use a tentative step size calculated as the inverse of the spectral radius @xmath70the magnitude of the largest eigenvalue  of the jacobian . after predicting the error associated with this tentative step",
    ", we then set the initial step size as one - tenth of the step size that would satisfy error control based on the tentative step : @xmath71 where @xmath72 is evaluated in the same manner as @xmath73 using eq .  .",
    "after selecting the optimal time step size to control local error , the algorithm then determines the optimal number of rkc stages in order to remain stable . due to stiffness",
    ", too few stages would lead to instability .",
    "the local stiffness is determined using the spectral radius and time step size .",
    "the number of stages are determined by @xmath74 as suggested by sommeijer et al .",
    "@xcite , where the value 1.54 is related to the stability boundary of the algorithm .",
    "note that _ s _ may vary between time steps due to a changing spectral radius and time step size . in our rkc implementation , we used a nonlinear power method  @xcite to calculate the spectral radius ; this choice costs an additional vector to store the computed eigenvector , but avoids storing or calculating the jacobian matrix . depending on the problem type",
    ", alternative methods such as the gershgorin circle theorem  @xcite could be used to obtain an upper - bound estimate for the spectral radius . in our experience , however , the circle theorem tended to overestimate the spectral radius , resulting in unnecessarily large numbers of stages  this induced greater computational expense compared to using the power method . following sommeijer et al .",
    "@xcite , in our rkc implementation the spectral radius is estimated every 25 ( internal ) steps or after a step rejection .",
    "in addition , the computed eigenvector is saved to be used as the initial guess in the next evaluation .",
    "in order to study the performance of the gpu - based rkck and rkc solvers ( termed rkck - gpu and rkc - gpu , respectively ) , we tested their performance with four reaction mechanisms , representing different levels of stiffness .",
    "we varied the problem size , meaning number of chemical kinetics odes , over a wide range from to , representing a wide range of grid resolutions in an operator - split reactive - flow code .",
    "first , we studied the performance of rkck - gpu using a nonstiff hydrogen mechanism .",
    "next , we considered ( separately ) mechanisms for hydrogen / carbon monoxide and methane with moderate levels of stiffness and use these to study the performance of rkc - gpu .",
    "finally , we examined the performance of rkc - gpu in a case where stiffness is more severe , using an ethylene mechanism . in all four cases , we compared the performance of the gpu algorithm against an equivalent cpu version . in the presence of stiffness",
    ", we also compared the performance of rkc - gpu against an implicit cpu - based code , vode_f90  @xcite , a fortran 90 version of the well - known vode solver .    in both the cpu and gpu algorithms used here",
    ", we generated the subroutines needed for chemical kinetics source terms ( e.g. , species rates , reaction rates , thermodynamic properties ) using an open - source python tool that we created  @xcite , which takes chemkin - format reaction mechanisms as input .",
    "further , we converted all reversible reactions in the reaction mechanisms used here into two irreversible reactions for each in order to avoid the computation of equilibrium constants , as described in [ a : irrev ] .",
    "we developed an additional python tool implementing this procedure that is also available online  @xcite .",
    "we paired vode with chemkin - iii  @xcite to evaluate the chemical kinetics and species thermodynamic properties .",
    "all calculations were performed in double precision and at constant pressure  although the generated subroutines are also capable of constant volume conditions .",
    "all calculations reported here were performed using a single gpu and single cpu ; we measured the serial cpu performance using a single core as well as parallelized cpu performance  via openmp  @xcite  on six cores .",
    "the gpu calculations were performed using an nvidia tesla c2075 gpu with of global memory .",
    "an intel xeon x5650 cpu , running at with of l2 cache memory per core and of l3 cache memory , served as the host processor for the gpu calculations and ran the cpu single- and six - core openmp calculations .",
    "we used the gnu compiler collection ( gcc ) version 4.6.2 ( with the compiler options `` ` -o3 -ffast - math -std = c99 -m64 ` '' ) to compile the cpu programs and the cuda 5.0 compiler nvcc version 0.2.1221 ( `` ` -o3 -arch = sm_20 -m64 ` '' ) to compile the gpu versions .",
    "the function ` cudasetdevice ( ) ` was used to hide any device initialization delay in the cuda implementations prior to the timing .    imposing identical initial conditions for all odes would not represent the situation in a reactive - flow simulation where conditions vary across space ,",
    "so we generated initial conditions for the odes by sampling the solutions obtained from constant pressure homogeneous ignition simulations .",
    "for all four fuels studied , we used starting conditions of , , and an equivalence ratio of one .",
    "this resulted in a set of initial conditions covering a wide range of temperatures and species mass fractions .",
    "for example , some data points came from the pre - ignition induction period , some from the transient regime when temperature increases rapidly , and some from the post - ignition stage where conditions approach equilibrium .",
    "we distributed the resulting initial conditions in two ways .",
    "first , we assigned initial conditions sequentially to odes , where consecutive data points  taken from consecutive time steps  contain similar conditions .",
    "this emulated adjacent spatial locations with similar but not identical conditions .",
    "further , this procedure represents a more realistic performance measure compared to the previous work of niemeyer et al .",
    "@xcite , where identical initial conditions and a constant time step size were used . for the gpu - based algorithms , similar  but not identical  initial conditions will result in threads within warps that may follow divergent pathways , due to varying time step sizes , for example . in order to further explore the impact of divergence on performance",
    ", we also assigned initial conditions to threads in a second manner : randomly shuffling the order .",
    "compared to using similar conditions , randomly selected initial conditions represent a worst - case potential for divergence .",
    "other potential sources of thread divergence could be conditional statements in the source terms , because , e.g. , thermodynamic properties are typically fitted as polynomials across different temperature ranges , certain reaction pressure - dependence formulations are described in different pressure ranges .",
    "we attempted to minimize the occurrence of such conditional statements by converting each reversible reaction in the reaction mechanisms into a pair of irreversible reactions ( as described above ) .",
    "this avoided the temperature conditional statement required for evaluating the gibbs function polynomial , in turn needed for the equilibrium constants .",
    "regarding the conditional statements required to evaluate the species thermodynamic properties for the energy equation or reaction rates for particular pressure - dependence formulations , in the current work , neither of these contributed to thread divergence because ( 1 ) all temperatures experienced by threads fell within the same polynomial fitting range and ( 2 ) none of the pressure - dependent reactions considered in the reaction mechanisms were formulated using multiple pressure ranges .",
    "however , in general cases , conditional statements on temperature or pressure could cause additional thread divergence .",
    "the integration algorithms take as input initial conditions and a global time step , performing internal sub - stepping as necessary . the computational times , or wall - clock times , reported represent the average over ten global time steps . for the gpu implementations ,",
    "the reported computational time per global time step included the overhead required for transmitting data between the cpu and gpu before and after each integration step .",
    "the integrator restarts at each global time step , not storing any data from the previous step  although any sub - stepping performed by the algorithm within these larger steps does benefit from retained information from prior sub - steps .",
    "this is done to emulate a true operator - split code , where the transport integration step would update the thermochemical conditions independently from the chemistry and therefore invalidate any retained information between global steps .",
    "this reduces the efficiency somewhat , by forcing the integrator to take initially large test steps , but the startup costs of the explicit integration algorithms considered here pale in comparison to those of implicit integrators such as vode , where the jacobian matrix must be re - evaluated .    in the gpu - based algorithms , threads",
    "independently integrated each chemical kinetics ode .",
    "the total number of threads then equaled the number of odes ; blocks consisted of 64 threads each . for problem sizes of or larger , where a block size of 64 threads would exceed the maximum limit on number of blocks per grid ( ) in one dimension",
    ", we used a block size of @xmath75 , where @xmath76 is the total number of threads .",
    "we kept the block size as a multiple of 32 to ensure blocks contained whole thread warps .",
    "first , we considered a case where stiffness in the chemical kinetics does not pose a challenge , using the hydrogen oxidation mechanism of yetter et al .",
    "@xcite with 9 species and 38 irreversible reactions .",
    "we employed the explicit rkck method , with a tolerance level @xmath40 of , and performed 10 global integration steps of ( or ) each .",
    "the average time needed per step is reported .",
    "this application is relevant particularly for dns and studies of high - speed flows , which use extremely short time step sizes in order to resolve the kolmogorov scales and capture the short time scales due to high flow velocity , respectively .",
    "adjacent odes used similar initial conditions as described in the previous section .",
    "the lack of stiffness in this case was due to both the particular chemistry considered and the short global time step sizes used .",
    "quantifying stiffness is somewhat difficult  @xcite , but in general explicit methods are more efficient for nonstiff problems than implicit or other stiff integrators ( e.g. , stabilized explicit methods like rkc ) . in terms of computational time ,",
    "rkck - gpu performed nearly 2.3@xmath0 and 2.6@xmath0 faster than rkc - gpu for problem sizes of and independent odes , respectively , so we consider this case nonstiff .    figure  [ f : h2-rkck ] shows the performance results of the cpu- and gpu - based rkck algorithms for problem sizes ranging from 64 to .",
    "rkck - gpu performed faster than the single - core rkck - cpu for problem sizes of 128 odes and larger , and faster than the six - core cpu version when the number of odes is 512 or larger .",
    "note that the speedup of the gpu implementation increased with growing problem size .",
    "for the largest problem sizes , rkck - gpu ran up to 126@xmath0 and 25@xmath0 faster than the single- and six - core rkck - cpu versions . on six cores",
    "rkck - cpu ran between five and six times faster than on a single core , due to the data independent nature of the problem .",
    "we also studied the effect of different initial conditions on the performance of rkck - gpu , by randomly shuffling the data points used for this purpose such that neighboring threads no longer contained similar data .",
    "this resulted in thread divergence , since different threads in each warp will require different inner time step sizes  therefore some threads will require a greater number of steps , while others will finish sooner .",
    "figure  [ f : h2-rkck - random ] shows the comparison of performance for rkck - gpu between threads with similar initial conditions and threads where initial conditions were randomly selected ( and are therefore different ) .",
    "the divergence caused by randomized initial conditions reduced performance by up to a factor of 2.3 , with a greater reduction at larger problem sizes .",
    "we note that some divergence was also present for threads with similar  but not identical  initial conditions .            in order to quantify this divergence",
    ", we introduce a measure for the divergence in a thread warp , _ d _ , proposed by stone  @xcite and sankaran  @xcite , defined by @xmath77 where @xmath78 denotes the number of right - hand function ( i.e. , derivative ) evaluations in the _ _",
    "i__th thread over a certain number of global time steps .",
    "we used this to represent the cost of integration per global step for each thread within a warp .",
    "values of _ d _ approaching one represent a warp with completely converged threads , while values approaching zero represent a situation where a small number of threads perform significantly more work than other threads .",
    "however , it should be noted that _",
    "d _ is not a perfect measure of divergence in general applications , where threads may follow different instructions but perform similar amounts of work .",
    "figure  [ f : h2-rkck - diverge ] shows the distribution of _ d _ for odes , corresponding to thread warps , where the sum of the derivative evaluations over ten global time steps was used to evaluate _",
    "d_. for similar initial conditions , the divergence remained low as measured by _",
    "d _ , while with randomized initial conditions the divergence was greater , with _",
    "d _ ranging between 0.30.8 and showing peaks around 0.4 and 0.65 .",
    "this divergence likely caused the reduced performance of rkck - gpu with randomly chosen initial conditions compared to similar initial conditions .",
    "next , we studied a kinetic system with moderate stiffness , using the hydrogen / carbon monoxide reaction mechanism of burke et al .",
    "@xcite , which consists of 13 species and 27 reversible ( converted to 54 irreversible ) reactions . here , we chose a global time step size of and reported the average computational time for ten steps .",
    "this value represents step sizes used in large - eddy simulations of reactive flows  @xcite .",
    "we consider this problem to be `` moderately '' stiff because rkc - gpu performed more than three times faster than rkck - gpu .",
    "for rkc , we used a relative tolerance of and an absolute tolerance of .",
    "adjacent odes used similar initial conditions .",
    "figure  [ f : h2-co - rkc ] shows the performance comparison between the single- and six - core rkc - cpu and rkc - gpu for problem sizes ranging from 64 to . as with the rkck algorithm , at smaller problem sizes rkc - gpu compared less favorably against rkc - cpu , but the speedup increased with increasing problem size .",
    "rkc - gpu outperformed rkc - cpu on a single cpu core for the entire range of ode numbers considered here , while it performed faster than the six - core version for problem sizes of 512 odes and larger .",
    "while the exact speedup varied , for ode numbers of and higher rkc - gpu demonstrated performance speedups of 59@xmath0 and 10@xmath0 compared to rkc - cpu on one and six cpu cores , respectively .",
    "similar to our analysis of divergence for rkck - gpu , we also studied the effect of randomized initial conditions on the performance of rkc - gpu . in this case , there are now three potential sources of thread divergence : ( 1 ) varying numbers of iterations for the nonlinear power method used to estimate the spectral radius , ( 2 ) varying numbers of stages due to different spectral radii , and ( 3 ) varying numbers of steps due to different time step sizes",
    ". figure  [ f : h2-rkc - random ] shows the performance comparison for rkc - gpu between threads with similar and randomized initial conditions .",
    "thread divergence caused by random initial conditions reduced the performance of rkc - gpu by up to a factor of 3.3 .",
    "as expected , rkc - gpu exhibited a greater performance loss than rkck - gpu , where the major source of thread divergence was varying numbers of time steps .",
    "the greater divergence of rkc - gpu is also demonstrated in fig .",
    "[ f : h2-rkc - diverge ] , where the number of occurrences of _ d _ is counted for odes ( warps ) . in this case , even similar initial conditions caused some divergence .",
    "this was likely the reason for the reduced performance speedup of rkc - gpu compared to that of rkck - gpu relative to their respective cpu versions . with randomly distributed initial conditions , _",
    "d _ is distributed normally around @xmath790.55 .",
    "compared to the distribution of _ d _ for rkck , rkc shows a higher incidence of low values , likely the cause behind the greater reduction in performance for the randomized initial condition case with rkc .",
    "next , we analyzed the performance of the cpu and gpu versions of rkc in another case with moderate stiffness , using the gri - mech 3.0  @xcite mechanism for methane oxidation , which consists of 53 species and 325 reaction steps ( converted to 634 irreversible reactions ) .",
    "as in the previous section , we chose a global time step size of and reported the average computational time for ten steps .",
    "adjacent odes used similar initial conditions . in this case ,",
    "rkc - gpu performed nearly eight times faster than rkck - gpu in terms of computational time , suggesting more significant stiffness compared to section  [ s : h2-co ] .",
    "consequently , we also compared the performance of rkc - gpu with the cpu - based implicit solver vode .",
    "in both rkc and vode , we selected a relative tolerance of and an absolute tolerance of .",
    "figure  [ f : ch4-rkc ] shows the performance comparison between the single- and six - core rkc - cpu and rkc - gpu for problem sizes ranging from 64 to . as before ,",
    "rkc - gpu performed better at larger problem sizes .",
    "similar to the hydrogen / carbon monoxide mechanism results , rkc - gpu outperformed rkc - cpu using a single cpu core for all ode numbers considered here and faster than the six - core version for problem sizes of 512 and larger . at larger problem sizes , rkc - gpu compared slightly more favorably than in the previous section , performing up to 69@xmath0 and 13@xmath0 faster than rkc - cpu on one and six cpu cores , respectively .",
    "the jump in computational time between 512 and odes corresponded to the addition of initial conditions with greater stiffness .",
    "since this problem exhibited greater stiffness compared to the previous case , we also studied the performance of vode on the cpu compared against rkc - gpu .",
    "figure  [ f : ch4-rkc - vode ] shows the computational time for vode on six cpu cores and rkc - gpu for problem sizes ranging from 64 to . at all numbers of odes considered ,",
    "rkc - gpu performed faster than vode , demonstrating a speedup of up to 57@xmath0 .",
    "though it is not shown here , we also note that rkc - cpu outperformed vode  both on six cpu cores  by a factor of three to six",
    ".        figure  [ f : ch4-rkc - random ] shows the performance of rkc - gpu for methane kinetics when the initial conditions in neighboring threads were similar and randomized .",
    "the behavior demonstrated here was similar to that in the previous section , with increasing disparity in performance for larger numbers of odes . in this case , with randomly selected initial conditions rkc - gpu performed up to nearly four times slower than when threads contained similar initial conditions .",
    "this drop in performance can also be seen in the distribution of _ d _ for odes ( warps ) in fig .",
    "[ f : ch4-diverge ] .",
    "the divergence , as measured by _",
    "d _ , showed similar behavior to that of hydrogen / carbon monoxide in fig .",
    "[ f : h2-rkc - diverge ] . here , for similar conditions , _",
    "d _ is clustered near one , and for randomized initial conditions normally distributed around 0.45slightly lower than with the hydrogen / carbon monoxide mechanism .",
    "this likely explains the slightly greater drop in performance for randomly ordered initial conditions , compared to the previous section .",
    "finally , we studied the performance of rkc - gpu in a case where stiffness is more severe : ethylene oxidation using the usc mech version ii mechanism  @xcite , which consists of 111 species and 784 reactions ( converted to irreversible reactions ) . in both rkc and vode , we selected a relative tolerance of and an absolute tolerance of .",
    "adjacent odes used similar initial conditions .",
    "figure  [ f : c2h4-rkc - vode ] shows the computational time for rkc - cpu , rkc - gpu , and vode for numbers of odes ranging from 64 to . as before , we chose a global time step size of and reported the average computational time for ten steps .",
    "both cpu - based algorithms were executed on six cpu cores . here ,",
    "we omit the single - core rkc - cpu results ; the performance ratio between the single- and six - core version showed similar scaling ( 46@xmath0 ) to that shown in the previous sections . at problem",
    "sizes smaller than 256 odes , both rkc - cpu and vode performed faster than rkc - gpu .",
    "rkc - gpu and vode showed nearly indistinguishable performance for and odes . for numbers of odes greater than",
    ", rkc - gpu performed 1218@xmath0 faster than rkc - cpu and 2.54.5@xmath0 faster than vode .",
    "next , we increased the global time step size to to further increase the severity of stiffness .",
    "figure  [ f : c2h4 - 1e-4 ] shows the performance of rkc - gpu and six - core vode for numbers of odes ranging from 64 to . for all problem sizes here ,",
    "rkc - gpu is slower than vode . at best , rkc - gpu ran 2.5@xmath0 slower than vode for odes .          the results shown above demonstrate that gpus may be used to significantly reduce the cost of incorporating detailed chemistry in reactive - flow simulations .",
    "when stiffness is low due to the chemistry or small time step sizes used  such as those used in high - speed flow or dns studies ",
    "explicit algorithms such as rkck offer significantly higher performance on cpus than implicit methods . implementing rkck on the gpu compounds this performance benefit over an order of magnitude , performing up to factor of 25 faster than the equivalent six - core cpu version in this study . as such ,",
    "gpu - accelerated explicit methods are an attractive choice for nonstiff problems .",
    "however , many chemical kinetics problems exhibit stiffness and therefore implicit algorithms are typically chosen to integrate the chemistry terms .",
    "as shown here , though , stabilized explicit methods such as rkc offer another option when stiffness is moderate .",
    "demonstrated with methane kinetics , the rkc - gpu solver performed up to nearly 60@xmath0 faster than the implicit vode solver on six cpu cores .",
    "in fact , even the cpu implementation of rkc outperformed vode . based on these results",
    ", we suggest that a gpu - accelerated stabilized explicit method like rkc should be used in place of the standard implicit solvers in reactive - flow simulations  when stiffness is moderate .",
    "typically , high - fidelity simulations use mechanisms with less than around 100 species  the size of those used in this study ",
    "so applying the gpu - based rkc integrator could significantly reduce the cost of chemistry in such studies .",
    "in addition , it could allow the use of larger , more complex mechanisms .    in the presence of more severe stiffness , as with the ethylene oxidation mechanism here , the gpu - accelerated rkc still showed significant speedup over the cpu version .",
    "unfortunately , the comparison between vode ( on six cpu cores ) and rkc - gpu became less favorable , with the speedup dropping to a factor of 4.5 for a global time step size of .",
    "the performance of rkc - gpu compared to vode dropped further when the global time step size was increased  due to the greater stiffness this induced .",
    "for example , a time step size of may be used for engine simulations ; in this case , rkc - gpu performed at best 2.5@xmath0 slower than vode ( on six cpu cores ) . as stone",
    "@xcite demonstrated , porting vode to the gpu may not yield much benefit over a multi - core cpu implementation .",
    "therefore , for problems with severe stiffness , an integration algorithm appropriate for gpu acceleration needs to be developed .    in all cases shown here ,",
    "the speedup of the gpu - based algorithm compared to the equivalent cpu - based algorithm improved with increasing numbers of odes ; at the smallest numbers , the six - core cpu - based algorithms performed better .",
    "this trend agrees with that observed in previous efforts using various integration algorithms  @xcite . at smaller problem sizes , the overhead due to memory transfer between the gpu and controlling cpu dominates , while at larger problem sizes the time required for actual computation comprises most of the total wall - clock time .",
    "further , we observed a general trend of increasing rkc - gpu to rkc - cpu speedup with increasing mechanism size . for mechanisms with 13 , 53 , and 111 species , rkc - gpu performed up to 10@xmath0 , 13@xmath0 , and 18@xmath0 faster , respectively , than the six - core rkc - cpu for a global time step size of .",
    "we also found that the the performance of both rkck - gpu and rkc - gpu dropped by factors of up to 2.5 and 4.0 , respectively , when adjacent threads ( corresponding to spatial locations ) used randomly shuffled  rather than similar ",
    "initial conditions .",
    "this was due to divergence from threads following different instruction pathways , since different conditions will result in varying inner time step sizes .",
    "rkc - gpu exhibited greater thread divergence due to additional sources from the spectral radius estimation and varying number of stages , and correspondingly with randomized initial conditions this method displayed a larger reduction in performance compared to rkck - gpu relative to the respective cpu versions .",
    "in general , we consider the case of threads with similar initial conditions more realistic , since in reactive - flow simulations  particularly with structured grids ",
    "neighboring volumes / grid points will contain similar thermochemical states . however , a reduction in performance due to divergence could result in some cases , such as with unstructured grids , where neighboring locations may not be stored consecutively in memory .",
    "in the present work we demonstrated new strategies for accelerating reactive - flow simulations using graphics processing units ( gpus ) .",
    "most approaches for such simulations rely on the operator - splitting technique , which separates the chemistry and transport terms in each time step for separate evaluation .",
    "this results in a large number of ordinary differential equations ( odes ) governing the evolution of the species mass fractions for each discretized spatial location ( i.e. , grid point or volume ) that need to be solved each time step . here",
    ", we demonstrated that explicit algorithms used to integrate the chemistry odes in parallel on gpus can perform significantly faster than equivalent cpu versions .",
    "we employed the explicit fifth - order runge ",
    "kutta  cash",
    " karp ( rkck ) and second - order runge  kutta",
    " chebyshev ( rkc ) methods for nonstiff and moderately stiff kinetics , respectively .",
    "we studied the performance of the rkck algorithm using a nonstiff hydrogen mechanism with with 9 species and 38 irreversible reactions  @xcite , and the performance of the rkc algorithm using three mechanisms with increasing sizes and levels of stiffness : ( 1 ) hydrogen / carbon monoxide with 13 species and 54 irreversible reactions  @xcite , ( 2 ) methane with 53 species and 634 irreversible reactions  @xcite , and ( 3 ) ethylene with 111 species and irreversible reactions  @xcite . by comparing the performance of the cpu and gpu versions of rkck and rkc , as well as the cpu - based implicit vode solver ,",
    "over a wide range of problem sizes ( i.e. , number of chemistry odes ) , we drew the following conclusions :    * for cases without stiffness , the gpu - based rkck outperformed the six - core cpu version by a factor of 25 at best . * for cases with moderate levels of stiffness , the gpu - based rkc performed faster than the six - core rkc - cpu by , at best , factors of 10 with a hydrogen / carbon monoxide mechanism , 13 with a methane mechanism , and 18 with an ethylene mechanism .",
    "* in the presence of moderate stiffness in the methane mechanism , rkc - gpu outperformed the implicit vode solver  on six cpu cores  by a maximum factor of 57 .",
    "* for cases with moderate stiffness , even the cpu - based rkc outperformed vode . * with increased stiffness in the case of the ethylene mechanism , rkc - gpu performed only 4.5@xmath0 faster at best than vode on six cpu cores . * when stiffness became more severe due to a larger time step size used with the ethylene mechanism , rkc - gpu became less efficient than six - core vode , performing at best 2.5@xmath0 slower .",
    "* at small problem sizes ( less than 512 odes ) , the six - core rkc - cpu was more efficient , but rkc - gpu outperformed the serial ( single - core ) cpu version in all cases considered here . * due to thread divergence , the performance of the gpu solvers degraded with randomized ( and therefore different ) initial conditions in adjacent memory locations , by up to a factor of four slower compared to using similar initial conditions .",
    "finally , we note that while we used a second - order accurate rkc algorithm here , higher order rkc methods exist .",
    "for example , abdulle  @xcite developed a fourth - order rkc with similar traits to the current method .",
    "our future work will involve implementing these higher order algorithms where such accuracy is needed , as well as developing a gpu - based stiff integrator that can handle severe stiffness .",
    "this work was supported by the national science foundation under grant number 0932559 , the us department of defense through the national defense science and engineering graduate fellowship program , the national science foundation graduate research fellowship under grant number dge-0951783 , and the combustion energy frontier research center  an energy frontier research center funded by the us department of energy , office of science , office of basic energy sciences under award number de - sc0001198 .",
    "62 natexlab#1#1[1]`#1 ` [ 2]#2 [ 1]#1 [ 1]http://dx.doi.org/#1 [ ] [ 1]pmid:#1 [ ] [ 2]#2 , , , , , , ( ) .",
    ", , , , , , , ( ) . , , , , , ( ) . , , , , ( ) .",
    ", , , ( ) .",
    ", , , ( ) . , ,",
    ", springer series in computational mathematics , ed .",
    ", , , , ( ) . , , , ( ) . , , ( ) . , , , ed . , , . , , , , ( ) . , , , ( ) . , , , ( ) . , , , . , , , ( ) . , , , , , , , , , . , , , . , , , , ( ) . , , , , . , , , , , , , in : , , , , pp . . , , , , , ( ) . , , , , , , , , , , , , , , ( ) . , , , , , in : , , . , , , , ( ) . , , , , , ( ) . , , , , ( ) . , , , , in : , , . , , , ( ) . , , , , , ( ) . , , , , , , in : ( ed",
    "volume , , p. . .",
    ", , in : , , .",
    ", , , , , .",
    ", , ed . , .",
    ", , , , , in : , , pp . . , , , , .",
    ", , , , , , sandia national laboratories , . , , , ( ) . , , , , , ed .",
    ", , , ( ) . , , , , ( ) .",
    ", , , , ( ) . , , , , ( ) .",
    ", , . , , .",
    ", , , ( ) . , , , , ( ) .",
    ", , , , , , , , , , , , , , .",
    ", , , , , , , , , .",
    "in order to avoid the conditional statements associated with the equilibrium constants required to calculate reverse reaction rate coefficients during a simulation , we can calculate reverse arrhenius parameters ( @xmath80 , @xmath81 , @xmath82 ) a priori .",
    "our procedure is similar to that of turnyi  @xcite . evaluating the reverse rate coefficients via the forward rates and equilibrium constants at three temperatures ( @xmath83 , @xmath84 , @xmath85 ) results in three equations to solve for the three unknown reverse arrhenius parameters : @xmath86 let @xmath87 , @xmath88 , and @xmath89 .",
    "then , dividing by _ a _ and taking the natural logarithm of each side , @xmath90 subtracting eq .   from eq .   and eq .   from eq",
    "gives @xmath91 then , solving eq .",
    "for @xmath92 , @xmath93 inserting eq .   into eq .   for @xmath92 , and letting",
    "@xmath94 , @xmath95 , and @xmath96 , leads to : @xmath97 then , solving for @xmath81 , @xmath98 @xmath92 is then @xmath99    to solve for @xmath80 , substitute the expressions for @xmath81 and @xmath92 into eq .  , @xmath100 we wrote a python tool implementing the above conversion for chemkin - format reaction mechanisms .",
    "this software is freely available online  @xcite ."
  ],
  "abstract_text": [
    "<S> the chemical kinetics odes arising from operator - split reactive - flow simulations were solved on gpus using explicit integration algorithms . </S>",
    "<S> nonstiff chemical kinetics of a hydrogen oxidation mechanism ( 9 species and 38 irreversible reactions ) were computed using the explicit fifth - order runge  kutta  cash  </S>",
    "<S> karp method , and the gpu - accelerated version performed faster than single- and six - core cpu versions by factors of 126 and 25 , respectively , for odes . </S>",
    "<S> moderately stiff kinetics , represented with mechanisms for hydrogen / carbon - monoxide ( 13 species and 54 irreversible reactions ) and methane ( 53 species and 634 irreversible reactions ) oxidation , were computed using the stabilized explicit second - order runge  kutta  </S>",
    "<S> chebyshev ( rkc ) algorithm . </S>",
    "<S> the gpu - based rkc implementation demonstrated an increase in performance of nearly 59 and 10 times , for problem sizes consisting of odes and larger , than the single- and six - core cpu - based rkc algorithms using the hydrogen / carbon - monoxide mechanism . with the methane mechanism , </S>",
    "<S> rkc - gpu performed more than 65 and 11 times faster , for problem sizes consisting of odes and larger , than the single- and six - core rkc - cpu versions , and up to 57 times faster than the six - core cpu - based implicit vode algorithm on odes . in the presence of more severe stiffness , such as ethylene oxidation ( 111 species and irreversible reactions ) , rkc - gpu performed more than 17 times faster than rkc - cpu on six cores for odes and larger , and at best 4.5 times faster than vode on six cpu cores for odes . with a larger time </S>",
    "<S> step size , rkc - gpu performed at best 2.5 times slower than six - core vode for odes and larger . </S>",
    "<S> therefore , the need for developing new strategies for integrating stiff chemistry on gpus was discussed .    </S>",
    "<S> = 1    reactive - flow modeling , gpu , chemical kinetics , stiff chemistry , cuda </S>"
  ]
}