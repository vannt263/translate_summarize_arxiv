{
  "article_text": [
    "the first paper about a universal cellular automaton in the pentagrid , the tessellation @xmath0 of the hyperbolic plane , was @xcite .",
    "this cellular automaton was also rotation invariant , at each step of the computation , the set of non quiescent states had infinitely many cycles : we shall say that it is a truly planar cellular automaton .",
    "but , the neighbourhood was _  la von neumann _ and it had 22  states .",
    "this result was improved by a cellular automaton with 9  states in  @xcite .",
    "recently , i improved this result with 5  states , see  @xcite .",
    "a bit later , i proved that in the heptagrid , the tessellation @xmath1 of the hyperbolic plane , there is a weakly universal cellular automaton with three states which is rotation invariant and which is truly planar , @xcite . in a paper under printing , see  @xcite , i proved that there is such a cellular automaton in the tessellation @xmath2 of the hyperbolic plane .    in the heptagrid and in the tessellation @xmath2 , there is no difference between a von neumann neighbourhood and a moore neighbourhood . in both case , a cell has 7  immediate neighbours in the heptagrid and 11  of them in the tessellation @xmath2 : a neighbour which shares a vertex also shares an edge .",
    "the reason lies in the interior angle of the basic polygons : it is @xmath3 in both cases . in the pentagrid ,",
    "the situation is different because the interior angle is a right angle . in the pentagrid ,",
    "a cell has five neighbours which share an edge with it , and it also have five new neighbours which only share a vertex with it . in the euclidean plane , there is a difference between cellular automaton with von neumann or moore neighbourhoods .",
    "remember that the game of life cellular automaton requires moore neighbourhoods .",
    "and so the question was , to which point is it possible to reduce the number of states for a weakly universal , rotation invariant and truly planar cellular automaton in the pentagrid if we allow moore neighbourhoods ?",
    "this time we have ten neighbours , more than the seven neighbours in the heptagrid , but less than the eleven ones in the tessellation @xmath2 .",
    "but we have the inconvenience of the right angle and we also have a slight advantage : we have ten neighbours but only five admissible rotations . indeed , rotating the sides induces a similar rotation on the vertices and conversely .",
    "in fact , i could prove the following result , which is stated in the abstract :    [ letheo ] there is a weakly universal cellular automaton on the pentagrid with moore neighbourhoods which is rotation invariant , truly planar and which has three states .",
    "the paper is devoted to the proof of the theorem . the minimal introduction to hyperbolic geometry needed to understand",
    "the paper can be found in  @xcite . in order to understand the constructions of the paper , it is important to remember that in the pentagrid , there are lines of the hyperbolic plane that we call * lines of the pentagrid * because they support the sides of infinitely many pentagons which pairwise share a side which is orthogonal to that line .",
    "such a situation is trivial in the euclidean plane with a grid made of squares .",
    "the difference , here is that two lines of the pentagrid may be both perpendicular to the same side of a pentagon , but they are not parallel at all : they go in different directions , on both sides of the considered edge .",
    "we shall use the fact that the tiling is generated by a tree , see  @xcite , without further explanation .    in section  [ hyprailway ] ,",
    "we sketchily remind the reader the model which is simulated by our cellular automaton . in section  [ scenar ] , we describe how we implement the model on order to observe the constraints of the three states . in section  [ rules ] , we give the rules of the automaton , together with the figures illustrating the motion of the device performing the computation of the automaton .",
    "that section will complete the proof of theorem  [ letheo ] .",
    "as the weakly universal cellular automata in the pentagrid described in the papers  @xcite , the automaton which proves theorem  [ letheo ] simulates the same model of computation .",
    "we describe this model in sub - section  [ railway ] and we consider its implementation in the pentagrid in  [ implement ] .",
    "the railway model was introduced by ian stewart in  @xcite .",
    "it was initially devised to simulate a turing machine , but i used it to simulate a register machine . for technical reasons , that latter model is easier to simulate as it is known that two registers are enough to simulate any turing machine on @xmath4 , see  @xcite .",
    "the model consists of a railway circuit on which a single locomotive is running .",
    "the circuit contains crosses and switches and the state of all switches of the circuit considered at a given top of the clock constitutes the configuration of the circuit at that time .",
    "the circuit consists of tracks which are represented by assembling segments of straight lines , either horizontal or vertical ones and quarters of a circle .",
    "it contains crosses which allows tracks to intersect .",
    "it also contain switches in order to make suitable figures , in particular cycles .",
    "there are three kinds of switches illustrated by figure  [ switches ] . from left to right in the figure",
    ", we can see the * fixed switch * , the * flip - flop * and the * memory switch*. we can see that a switch realizes the intersection of three tracks , we shall denote them by  @xmath5 , @xmath6 and  @xmath7 .",
    "say that  @xmath5 is the single track which arrives at the switch and that @xmath6 and  @xmath7 are those from which the locomotive may leave the switch , either through  @xmath6 or through  @xmath7 .",
    "the track taken by the locomotive to leave the switch is called the * selected track*. when the locomotive arrives to the track through  @xmath5 and leaves it through the selected track , we say that it is an * active * crossing .",
    "if the locomotive arrives through  @xmath6 or through  @xmath7 , leaving the switch through  @xmath5 , we say that it is a * passive * crossing . in the figure , each kind of switch is represented in two forms . both of them will be used in our further illustrations .    in the fixed switch",
    ", the selected track is determined once and for all . the switch can be crossed both actively or passively .",
    "the flip - flop may be crossed actively only .",
    "when it leaves the switch , the selected track changes : the previous non - selected track becomes selected and the previously selected becomes non - selected .",
    "the memory switch can also be crossed either actively or passively .",
    "the selected track is determined by the last passive crossing .",
    "these switches are exactly those defined in  @xcite .",
    "we also take from paper  @xcite the configuration illustrated by figure  [ basicelem ] which contains one bit of information .",
    "this configuration , called the * basic element * , is used as follows .",
    "if the locomotive arrives through  @xmath8 , it goes either through track  0 or through track  1 .",
    "if the locomotive goes through the track  @xmath9 with @xmath10 , it leaves the configuration through  @xmath11 .",
    "we say that the locomotive * has read  @xmath9*. if the locomotive arrives through  @xmath12 , it goes through track  0 or  1 .",
    "now , if it arrives through the track  @xmath9 , it passively crosses  @xmath8 through the track  @xmath13 , with @xmath14 and .",
    "eventually , the locomotive leaves the element through  @xmath15 .",
    "now , as the locomotive crossed  @xmath12 , the selected track at  @xmath12 is now  @xmath13 .",
    "consequently , we can say that the selected tracks at  @xmath8 and  @xmath12 are always the same when the locomotive is arriving at the configuration and also when it leaves it .",
    "accordingly , the locomotive may read  0 or  1 and also it may rewrite  @xmath9 into  @xmath13 .",
    "figure  [ unitreg ] illustrates how basic elements can be assembled in order to constitute a unit for registers , say a * register unit*. each unit consists of two basic elements which contain the same value , see figure  [ unitreg ] .",
    "the leftmost element is read by an instruction which perform the incrementation of the register , the other is read by an instruction performing the decrementing on it .",
    "we leave the reader to check on figure  [ unitreg ] that a locomotive arriving from the left through the track  @xmath16 reads the left - hand side basic element : if it reads  1 , it goes back to  @xmath16 a bit further in order to read the next register unit .",
    "when it reads  0 , it is sent to the @xmath12-entry of the basic element in order to rewrite  0 to  1 , it is sent to the second element in order to set it to  1 too .",
    "the number of units set to  1 has been increased by  1 .",
    "from there it is sent to the track  @xmath17 which leads the locomotive out of the register .",
    "the reader can also check that if the locomotive arrives through the track  @xmath18 , it reads the second basic element of the register unit .",
    "if it reads  1 , as previously , it goes further , again through  @xmath17 .",
    "if it reads  0 , it goes back to the previous register unit through the track  @xmath19 or through the track  @xmath20 .",
    "if this happens with the first unit of the register , this means that the register contains  0 and the locomotive goes back from the register through  @xmath19 .",
    "if this happens on a further register unit , the locomotive goes back to the previous register unit , through  @xmath19 or through  @xmath20  : it is sent to the first basic element , so that there it rewrites  1 to  0 and it performs the same for the second basic element of the unit .",
    "the number of units set to  1 has been lowered by  1 .",
    "the locomotive is send outs side the register through the track  @xmath17 .",
    "when the locomotive comes back from the register where it performed the required operation , an appropriate structure allows it go back to the instruction which follows that which had sent it to the register , or to jump to the next one in the program if the decrementing could not be performed .",
    "the details of the structures allowing the locomotive to perform these tasks can be found in  @xcite .    as explained in  @xcite , using the basic unit illustrated by figure  [ basicelem ] and crossing with switches as in figure  [ switches ] , it is possible to build a circuit which simulates the working of a register machine . figure  [ toyexample ] illustrates how such a construction can be performed by implementing in this setting a small program of a register machine involving three registers .",
    "the program performs the action denoted by the instruction of many programming languages . at any time , a configuration of the computation consists in the position of all the switches of the circuit .",
    "however , note that at each time , only finitely many of them are changed so that at each time , the computation can be described with a finite word , despite the fact that the initial configuration is infinite .",
    "the model of computation described in sub - section  [ railway ] is described in  @xcite as a circuit lying in the euclidean plane .",
    "it can not been transported into the hyperbolic plane without detailed explanations .",
    "there are two steps in this translation .",
    "first , we need to have a global view of how to implement the circuitry which will simulate the computation .",
    "this is what is discussed in sub - section  [ global ] .",
    "once this question is solved , we can look at the details which is the purpose of sub - section  [ basics ] .      in order to fix things ,",
    "we consider the poincar s disc model as the frame of our investigation .",
    "we take this model for two reasons .",
    "the first one is that it preserves angles , which allow us to see something .",
    "the second reason is that the model gives us a global view on the hyperbolic plane .",
    "however , we must be aware of two big restrictions .",
    "the first restriction is that the model imposes a distortion on distances : when we are close to the centre of the disc , the distances are small and the closer we go to the border , the bigger are the distances .",
    "also , second restriction , there is no similarity in the hyperbolic geometry .",
    "there , distances are absolute .",
    "this means that if we change our unit to measure distances by another one , the new distances are not simply multiplied by a simple factor .",
    "a good image is the following one .",
    "we have to see poincar s disc as a window over the hyperbolic plane , as if we were flying over that plane in some spacecraft .",
    "accordingly , the centre of poincar s disc is not the centre of the hyperbolic plane : that plane has no centre .",
    "the centre of the disc is the centre of our window in the spacecraft : it is the point of the plane on which our attention is focusing .",
    "but what is close to the border is not affected by changing the point at which we are looking .",
    "if we change of unit , this amounts to change our altitude over the hyperbolic plane in our image .",
    "we shall have a larger view close to the centre but what is close to the border still remains out of our view .",
    "figure  [ uhcaglobal ] shows how to implement the toy - example given in figure  [ toyexample ] .",
    "the vertical lines of figure  [ toyexample ] are replaced by rays issued from the centre of the disc and horizontal lines of that figure are replaced by arcs of circles centred at the centre of poincar s disc .",
    "in a similar way , we can implement the basic element on which all the other structures are built , see figure  [ hca54elem ] .",
    "however , our implementation is not directly performed in the hyperbolic plane , but in a tiling of this plane , more precisely the * pentagrid * , the tessellation @xmath0 of the hyperbolic plane which is illustrated by the left - hand side part of figure  [ penta ] .",
    "it is important to know that the tiling can be generated by a tree . from the tree",
    ", we can get a numbering of the tiles which is illustrated by figure  [ penta ] , on its right - hand side part . on figure  [ penta ]",
    ", we can see the * lines of the pentagrid * : they are the lines constituted by sides of tiles which lie on them , taking into account that , in poincar s disc model , lines are represented by traces in the disc of diameters or circles which are orthogonal to the border of the disc .",
    "a particular tree plays a key role .",
    "it generates the tiles which are inscribed in a quarter of the hyperbolic plane .",
    "there are five such quarters around the central tile of figures  [ penta ] .",
    "such a quarter can be seen on the right - hand part of the figure : it is defined by two lines of the pentagrid which meet at a vertex of tile  1 and which contain sides of tile  2 and of tile  4 .",
    "we shall use the tiles which are along such lines as , for instance tiles  1 , 2 , 5 and  13 or tiles  2 , 7 and  20 . such sequences of tiles will be our verticals for the implementation of the railway model we consider in the paper .",
    "the analog of circles lie on tiles which are at the same distance from the central tile . in sub - section  [ trackrules ]",
    "we have a detailed look at this problem .      among the details we have now to look at",
    ", the first task in the implementation is that of the tracks .",
    "the main reason is that without tracks , our locomotive can go nowhere , so that there can not be any simulation .",
    "the second reason is that it may happen that we can construct the switches of the circuit with say @xmath21  states but that we need a @xmath21 + 1@xmath22 one to build the tracks .",
    "subsection  [ tracks ] is devoted to that problem .",
    "once this problem is temporarily solved , we shall see the main features of the crossings and of each kind of switches in sub - sections  [ roundabout ] , [ fix ] , [ doublesel ] and  [ forcontrol ] .",
    "what we said about the tracks tells us that we should define them as simple as possible , _",
    "i.e. _ with a single state outside the quiescent one which we called white , as already mentioned . as in  @xcite",
    ", we implement the tracks with * milestones * which are cells in a non - quiescent state , the locomotive going through the white cells delimited by the milestones .",
    "we shall call * blue * the state we use in order to mark the tracks .",
    "contrarily to what is done in  @xcite , here we can construct the tracks with a single element which is illustrated by figure  [ elemtrack ] .",
    "assuming that the milestones are touching the cell of the track through its sides  2 and  5 in figure  [ elemtrack ] , the locomotive crosses the element by visiting the cells  3 , 0 , 1 or  4 , 0 , 1 in this order exactly .",
    "the cells 0 , 1 , 3 and  4 are given light colours in figure  [ elemtrack ] in order to easily identify them .",
    "the mauve colour is that of the exit .",
    "the side of the exit is the single side which belongs to the cell  0 and which touches both milestones .",
    "later , in sub - section  [ trackrules ] , we shall assemble copies of the element illustrated by figure  [ elemtrack ] in order to define the verticals and the horizontal required by our implementation of the model .",
    "with only three states at my disposal , i do not know how to directly implement switches where the needed sensors and controls are immediate neighbours of the cell where the tree tracks arriving at the switch meet .",
    "the simplest solution for that purpose is to devote a state for the tracks , different from the blank and then to give a series of states for each type of switch and for each step required for the crossing of the switch by the locomotive .",
    "this may require more states than the 22 states of the automaton in  @xcite .",
    "we go on the idea of the previous sub - section where tracks are blank cells marked by appropriate milestones .",
    "we even go further , following the new way opened in  @xcite .",
    "the analysis of previous implementations showed me that the crossing is the most expensive structure .",
    "this is why in  @xcite crossings are replaced by a new structure , the round - about , see sub - section  [ roundabout ] .",
    "later , in  @xcite , we decomposed two switches in simpler structures , extending that new implementation to the passive memory switch in  @xcite , see sub - section  [ forcontrol ] .",
    "the round - about replaces the crossing , a railway structure , by a structure inspired by road traffic . at a round - bout where two roads are crossing , if you want to keep the direction arriving at the round - about , you need to leave the round - about at the second road .",
    "figure  [ roundaboutfig ] illustrates this features .",
    "now , this strategy requires the cellular automaton knows how to count up to two .",
    "we already assigned the blank for the space itself and the cells where the locomotive runs .",
    "we assigned the blue to the milestones delimiting the tracks .",
    "it will also be used to delimit other structure .",
    "i needed a third state , the red , to mark the locomotive itself which is reduced to a single cell .",
    "this is the main reason why the tracks are one - way : by itself , the locomotive can not distinguish between its front and its rear . as we have no additional state and as i could not handle a blue locomotive , counting to two",
    "requires that two contiguous locomotives travel together . in the sequel",
    ", we shall say * simple locomotive * when the locomotive consists of a single red cell .",
    "we shall say * double locomotive * when it consists of two contiguous red cells . to manage these features , we need the three auxiliary structures which are represented in figure  [ roundaboutfig ] by a rhombus , a small circle and a bit larger ones .",
    "these auxiliary structures are  : the fixed switch , see sub - subsection  [ fix ] , the doubler and the selector , see sub - subsectiondoublesel .",
    "when the locomotive arrives close to the round - about , it first meet the doubler : it transforms the simple locomotive a double one .",
    "then , the locomotive may arrive at the fixed switch , depending on whether it arrived from  * a * or from**b**. then , the double locomotive arrives at the first selector : the structure recognizes a double locomotive .",
    "it kills one red cell and the surviving simple locomotive is sent further on the round - about .",
    "when it meets the second selector , the structure recognizes a simple locomotive .",
    "accordingly , it send it on the track which leaves the round - about at that point .",
    "as the tracks are one - way and as an active fixed switch always sends the locomotive in the same direction , there is no need of the other direction : there is no active fixed switch .",
    "now , passive fixed switch are still needed as just seen in the previous paragraph .",
    "figure  [ stabfix ] illustrates the passive fixed switch when there is no locomotive around",
    ". we can see that it consists of elements of the tracks which are simply assembled in the appropriate way in order to drive the locomotive to the bottom direction in the picture , whatever upper side the locomotive arrived at the switch . from our description of the working of the round - about , a passive fixed switch must be crossed by a double locomotive as well as a simple one .",
    "later , in section  [ fixedswitch ] , we shall check that the structure illustrated by figure  [ stabfix ] allows these crossings .",
    "the doubler is illustrated by figure  [ stab_doublsel ] .",
    "its structure again consists of blue milestones only .",
    "however , the neighbourhood of the central cell  @xmath23 of the picture is not that of an ordinary element of the tracks . in order to understand the difference ,",
    "we number the neighbours of a cell as follows : the sides are numbered from  1 to  5 while counter - clockwise turning around the cell and the vertices are also numbered while counter - clockwise turning around the cell , vertex  6 being shared by sides  1 and  5 . the neighbours sharing a side are numbered after that side .",
    "the neighbours sharing a vertex only are also numbered after that vertex .",
    "we also called these neighbours as * vertex - neighbours*. in the figure , the neighbours  2 , 4 and  5 of  @xmath23 are blue , which is enough to fix the numbering for  @xmath23 .",
    "now , @xmath23 has an additional blue milestone , its 10@xmath22 neighbour and its second neighbour has an additional neighbour which is not a milestone of the tracks .",
    "this allows the second neighbour to have a particular behaviour : that will produce the second cell which transforms the simple locomotive into a double one .    in the right - hand side of figure  [ stab_doublsel ]",
    ", we have an illustration of the selector .",
    "the locomotive , a simple or double one , arrives through the neighbour  3 of  @xmath23 , again the central cell of that figure .",
    "it is plain that the neighbours  8 and  9 of  @xmath23 can see whether the locomotive is simple or double when a red cell arrives at  @xmath23 when it is white .",
    "note that these neighbours are not ordinary milestones of the tracks : they have an additional red neighbour as well as an additional blue one .",
    "when it is a simple locomotive , the neighbour  8 of  @xmath23 becomes red and the neighbour  9 remains blue .",
    "this prevents a locomotive from entering the neighbour  2 of  @xmath23 and the simple locomotive enters the neighbour  4 of  @xmath23 . when it is a double locomotive , the neighbour  8 of  @xmath23 remains blue and the neighbour  9 becomes red .",
    "now , the red cell in  @xmath23 goes to its neighbour  2 , going on the way which leads to the second selector , and the red neighbour  9 prevents the red cell in  @xmath23 to enter its neighbour  4 .      in this sub - section ,",
    "we look at the decomposition of two active switches : the flip - flop and the active part of the memory switch . in both cases ,",
    "we can split the working of the switch by separating at two different stages , the bifurcation and the fact that the passage in one direction is forbidden .",
    "it is not mandatory that both acts should happen simultaneously , as might be suggested by the definition of sub - section  [ railway ] .",
    "a fork may dispatch two simple locomotives and , later , on one track , a controller let the locomotive go on its way on the track and , on the other track , another controller stops the locomotive and destroys it .",
    "the difference between the switches is the way in which the change of selection is performed .",
    "figure  [ activswitches ] illustrates how to assemble forks and controllers in order to obtain either a flip - flop , left - hand side of the figure , or an active memory switch , right - hand side of the picture .",
    "the difference is important : the flip - flop immediately changes the selection once it was crossed by the locomotive .",
    "the active memory switch changes the selection if and only if the passive switch ordered it to to do so through a signal sent to the active switch .",
    "this is realized in figure  [ activswitches ] .",
    "indeed , in the active memory switch , when the simple locomotive arrives at the fork  @xmath24 , it is duplicated into two simple locomotives , each one following its own path .",
    "one of these locomotives goes on its way to the controller , and the other is now a third locomotive which is sent to a second fork , labelled with  @xmath25 in the figure .",
    "when it is crossed by that locomotive , @xmath25  sends two locomotives  : one to the other controller and one to a third fork  @xmath26 .",
    "the controllers are blue and red .",
    "the blue one let the locomotive go its way .",
    "the red controller stops the locomotive , which kills it .",
    "the locomotives sent by  @xmath26 go both to a controller , one to the blue controller , the other to the blue one .",
    "now , when a locomotive sent by  @xmath26 arrives at a controller , it changes the blue one into a red one and the red one into a blue one , so that what should be performed by a flip - flop is indeed performed .",
    "it is enough to manage things in such a way that the locomotives arriving to the controllers from  @xmath26 arrive later than those sent by  @xmath24 and by  @xmath25 .    in the case of an active memory switch ,",
    "the situation is simpler , as shown by the right - hand side of figure  [ activswitches ] . from the for  @xmath26 , the locomotives each locomotive directly goes to the controller .",
    "but the change of signal in the controllers is performed by a new locomotives sent by  @xmath26 which is triggered by a locomotive sent from the passive memory switch . in this sense ,",
    "the passive memory switch is active while the active one is passive .",
    "figure  [ stab_forkctrl ] illustrates the configurations which implement the fork and the controller . the first picture represents the fork whose milestones are all blue .",
    "the second picture is a blue controller while the third picture is a red one .",
    "the fork is implemented as a mere appropriate assembling of elements of the tracks .",
    "note the red neighbours of the first neighbour of the central cell : they characterize the switch .",
    "the track goes horizontally from right to left on these pictures of the controller .",
    "the signal for changing the colour of the control arrives from above .",
    "figure  [ memopass ] illustrates the construction of the passive memory switch with the help of forks and controllers .",
    "however , the controllers of figure  [ memopass ] are not the same as those of figure  [ activswitches ] .",
    "the difference lies in the different role of the controllers in this case .",
    "as the switch is passive , even if the locomotive passes through the non - selected track , it should not be stopped by the controller .",
    "the controller should let it go but , afterwards , it should change its colour from red to blue and it should send a message to the active memory switch in order that switch should also change the selected track . the switch should also send a message to its other controller which would change from  blue to  red .",
    "this is performed by the scheme depicted by figure  [ memopass ] .",
    "when a simple locomotive arrives through the selected track , on the left - hand side in the figure , it crosses a blue controller and then passively crosses the fixed switch  @xmath27 and nothing happens .",
    "when a simple locomotive arrives through the non - selected track , it first crosses a red controller .",
    "the controller becomes blue and it sends a locomotive to the fork  @xmath28 .",
    "the fork sends two simple locomotives , one to the fixed switch @xmath29 and then to the active memory switch and the second locomotive to the blue controller which after this visit by a locomotive changes from blue to red .",
    "note that here , when the locomotive sent from  @xmath28 arrives to the blue controller , the locomotive which crossed  @xmath8 arrived to  @xmath27 .",
    "of course , a similar sequence of actions is performed when the non - selected track is on the left - hand side .",
    "figure  [ stab_ctrlsgn ] illustrates the controller of the passive memory switch .",
    "it is presented when no locomotive is around and it presents the structure in its two basic configurations : when it is blue and when it is red .",
    "the difference is shown by the colour of the second neighbour of the central cell of the figure .",
    "the track of the circuit is a horizontal line from right to left , in the upper part of the disc .",
    "the signal arrives close to the second neighbour of the central cell from the left - had side lower part of the disc .",
    "the figures of section  [ scenar ] help us to establish the rules .",
    "the rules and the figures were established with the help of a computer program which checked the rotation invariance of the rules and which wrote the postscript files of the pictures from the computation of the application of the rules to the configurations of the various type of parts of the circuit .",
    "the computer program also established the traces of execution which allow the reader to check the application of the rules .",
    "we have to keep in mind that there are two types of rules .",
    "those which keep the structure invariant when the locomotive is far from them , we call this type of rules * conservative * , and those which control the motion of the locomotive . these latter rules , which we call * motion rules * , are the rules applied to the cells of the tracks as well as their milestones and , sometimes to the cells of the structures which may be affected by the passage of the locomotive .    before establishing the rules",
    ", we indicate their format .",
    "a rule has the form , where is the state of the cell  @xmath7 , is the state of the neighbour  @xmath16 of  @xmath7 and is the new state of  @xmath7 once the rule has been applied . as the rules must be rotation invariant ,",
    "the only constraint we set on the numbering is to be increasing when counter - clockwise turning around the cell .",
    "however , in many cases we shall consider that neighbour  1 is that we indicated in figure  [ stab_doublsel ] for the central cell and , for the others , neighbour  1 is the side turned to the father of the cell in the tree to which it belongs . in the sequel , we shall also consider the word which we call the * neighbourhood * of the rule .    in comments of the figures ,",
    "the central tile is denoted by  0(0 ) .",
    "the cells which are neighbours of  0(0 ) by sharing an edge with that cell are numbered 1(@xmath16 ) , with , increasingly while counter - clockwise turning around 0(0 ) . the cell 1(1 )",
    "is upwards and to left .",
    "the vertex - neighbours of  0(0 ) are numbered 2(@xmath16 ) , again with and also increasingly while counter - clockwise turning around 0(0 ) . the cell 2(1 )",
    "is a neighbour of both 1(1 ) and 1(5 ) , see figure  [ penta ] .",
    "figure  [ penta ] clearly shows how to number the cells up to  12 . for further numbers ,",
    "the reader is invited to look at  @xcite .",
    "table  [ consrules ] provides us with rules which concern the white cells which are not on the track and who have a single or two non white neighbours .",
    "it also concerns blue or red cells which have a single or two non white neighbours",
    ". a few other conservative rules of the same kind also appear in further tables .",
    "# 1 # 2 # 3 # 4 -4pt      as explained in section  [ scenar ] , the construction of the tracks is very important . as mentioned in section  [ scenar ] , the figures we shall consider give only a local view",
    "nonetheless , they allow us to define the rules for the motion of the locomotive . indeed",
    ", three consecutive elements are enough for that purpose and the window on the hyperbolic plane given by the poincar s disc offers this possibility .",
    "as indicated in section  [ scenar ] , we mainly use verticals and horizontals in order to construct the tracks .",
    "we can choose the branches on which the vertical are built in such a way that a big section of them goes along a line of the pentagrid .",
    "figures  [ voievertd ] and  [ voievertm ] illustrate the construction of the tracks which use a single element as indicated in section  [ scenar ] .",
    "= 21.5pt # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8 # 9    # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8    # 1 # 2 # 3 # 4 # 5 # 6 # 7    # 1 # 2 # 3 # 4 # 5 # 6    # 1 # 2 # 3 # 4 # 5    # 1 # 2 # 3 # 4    # 1 # 2 # 3    figure  [ voievertd ] shows us a track which _ goes down _ along a line , while figure  [ voievertm ] shows us a track which _ goes up _ along the same line .",
    "these figures consists in assembling basic elements only .",
    "the reader may notice that for each element , one milestone touches the same line of the pentagrid , say @xmath30 , while the second milestone is on the same side of  @xmath30 for all elements of this part of the tracks .",
    "what happens if the second milestone is on the other side of  @xmath30 for all elements of the tracks ?",
    "in fact , the motion in the opposite direction given in the figures answers the question .",
    "indeed , denote by  @xmath31 the central tile in figures  [ voievertd ] and  [ voievertm ] .",
    "then , note that @xmath32 has a side on  @xmath30 , and that @xmath32 belongs to the track along  @xmath30 .",
    "apply to  @xmath30 a reflection in the center of  @xmath32 and let  @xmath33 be its image . then , by a suitable rotation , @xmath33 can be mapped onto a line  @xmath34 of the pentagrid which passes along another side of  @xmath32 , so that @xmath34 and  @xmath30 have a common perpendicular which passes through another side  @xmath35 of  @xmath32",
    ". then the shift along  @xmath32 maps  @xmath34 onto  @xmath30 and , in this transformation , the track which is along  @xmath30 is mapped onto the track along @xmath30 which lies on the side which is opposite to that of  @xmath32 .",
    "and so we got a going down track which is supported by  @xmath30 but which is on the other side with respect to the one we can see on figure  [ voievertd ] .",
    "this is why the rules of tables  [ verttracktab ] and  [ mounttracktab ] also apply to tracks which are displayed on another side compared to that of the figures  [ voievertd ] and  [ voievertm ] .",
    "table  [ exvertd ] shows which rules where applied to the following cells : 1(1 ) , 0(0 ) and  1(3 ) for the tracks and 1(2 ) and  1(4 ) for the milestones when a locomotive goes down a vertical as illustrated in figure  [ voievertd ] .",
    "the basic rules are rules  17 , 18 , 20 and  32 for a single locomotive as shown in table  [ exvertd ] , rule  17 being the conservative rule . for a double locomotive , rules  37 and  39",
    "are applied instead of rule  20 as when the first locomotive is in the cell it can see the second one at the entrance of the locomotive and when the second one is in the cell , it can see the first locomotive at the exit of the cell .",
    "if we compare the neighbourhood of rule  17 with that of rule  18 in which we replace the state   by the state  , it may seem that the neighbourhoods are very different .",
    "now , moving the neighbourhood of rule  17 by two steps to the right we obtain that of rule  18 .",
    "accordingly , these neighbourhoods are rotated forms of the same one .    in table",
    "[ mounttracktab ] , we have the rules for going down .",
    "table  [ exvertm ] shows the rules which where applied in a motion illustrated by figure  [ voievertm ] , where the locomotives are going up .",
    "this time , rules  47 , 50 , 51 and  53 allow a single locomotive to run along the tracks , see table  [ exvertm ] , rule  47 being the conservative rule . when the locomotive is double , rules  57 and  58 replace rule  51 .",
    "the reasons are the same as previously .    before looking at other tables ,",
    "remark that the other rules for tables  [ verttracktab ] and  [ mounttracktab ] deal either with cells which are not changed by the motion of the locomotive but simply witness that the locomotive is going by them .",
    "for instance , rule  24 usually governs the cell 13(2 ) which is a milestone of the track .",
    "when the locomotive is by the cell , rules  28 or  34 are applied to the cell .",
    "however , rules for verticals on both sides of a line of the pentagrid are not enough .",
    "we need also rules for turning around a cell or around several of them .",
    "tables  [ round1stab ] , [ round1dtab ] and  [ round3htab ] gives us rules for the locomotive turning around 1 , 2 or 3 contiguous cells . figures  [ rond1h ] , [ rond1ah ] , [ rond2h ] , [ rond2ah ] , [ rond3h ] and  [ rond3ah ] illustrate these motions , clockwise and counter - clockwise , with a single locomotive and with a double one .",
    "the trick consists in placing basic elements in such a way that for some of them , the exit occurs through a cell which , in a vertical tracks would work as an entry .",
    "this is typically the case of the cell 2(1 ) in figures  [ rond1h ] and  [ rond1ah ] , with a simple or a double locomotive clockwise or counter - clockwise turning around a single cell .",
    "the figures illustrate how a simple and a double locomotive runs around several cells , whatever the direction .",
    "tables  [ round1stab ] and  [ round1dtab ] give the rules for the locomotive turning around a single cell in both orientations .",
    "table  [ round3htab ] completes these rules when the locomotive turns around two or three contiguous cells .",
    "tables  [ exrond1h ] and  [ exrond1ah ] show the execution of the rules on a small part of such a circuit when the locomotive turns around a single cell .",
    "note that the cells involved are different in each table : this is due to the structure of the computer program which checked the rules and computed both the figures and the execution tables .",
    "the difference is induced by the opposite orientations which also is taken into account for defining the time interval which is represented in the tables . in each table , the rules are given first for a simple locomotive and then for a double one .",
    "note that the rules applied around the cell  0(0 ) are periodic : the neighbourhood is the same in each sector around  0(0 ) and the front of the locomotive alternates in appearing sometimes through a side - neighbour , sometimes in a vertex - neighbour .",
    "also note that the sequences of rules are the same , but with a delay , for 1(5 ) and  1(4 ) and also for 2(5 ) and  2(4 ) in table  [ exrond1h ] .",
    "similar remarks can be made for table  [ rond1ah ] too . due to the opposite orientations , the order of the lines for the tracks and then for the milestones in table  [ exrond1ah ] are the reverse with respect to table  [ exrond1h ] .",
    "the execution tables show that the rules for turning around a single cell are not enough in order to show that the simple or double locomotive can run along a horizontal line .",
    "table  [ round3htab ] give additional rules which are needed for that purpose and also for allowing the locomotive the connection connection between vertical lines with a horizontal : whichever end of the vertical and of the horizontal , whichever direction of the locomotive , whether simple or double the locomotive is .",
    "note that tables  [ exrond2hs ] , [ exrond2hd ] , [ exrond2ahs ] and  [ exrond2ahd ] show the application of the rules of  [ round3htab ] also to the case of a locomotive running around two consecutive cells . for three consecutive cells , tables  [ exrond3ahs ] and  [ exrond3ahd ]",
    "show the application of the rules of table  [ round3htab ] .",
    "it was checked by the computer program that the execution traces for a clockwise motion corresponding to figures  [ rond3h ] involve exactly the same rules as those indicated by tables  [ exrond2hs ] and  [ exrond2hd ] .",
    "the rules , the executions and the corresponding figures allow us to establish two properties : the rules allow the locomotive , either a simple or a double one , to run along a horizontal .",
    "it can perform such a motion , whichever the direction .",
    "the second property is the connection of a vertical with a horizontal as already mentioned .",
    "1=0    1=0      figures  [ fixeg ] and  [ fixed ] illustrate how the locomotive passively crosses a fixed switch .",
    "both figures illustrate the case when the locomotive comes from the left - hand side and when it comes from the right - hand side .",
    "note that the switch is passive and that it is the same , whether the locomotive comes from the left or from the right .",
    "the fixed switch makes use the property of the basic element to accept an entering locomotive from any one of its two consecutive white neighbours through a side .",
    "the other parts of the switch consists of basic elements only .",
    "they are assembled in an appropriate way .",
    "again , these figures are enough to establish the rules , both for a simple and a double locomotive .",
    "table  [ fixtab ] gives the rules for the motion of the locomotive through the switch together with those for the milestones involved in this structure .",
    "tables  [ exfixs ] and  [ exfixd ] shows traces of execution of the rules displayed by table  [ fixtab ] .",
    "these traces deal with the cells 1(1 ) , 1(5 ) , 0(0 ) and  1(3 ) for the tracks and 1(2 ) together with 1(4 ) for the particular milestones which are not in the situation of milestones in a vertical track or around a set of cells .    in table",
    "[ exfixs ] , we can see that rule  17 applies to  1(1 ) .",
    "note that the neighbourhood which is given in table  [ verttracktab ] is that to cell  0(0 ) for which it is also the conservative rule . in table",
    "[ exfixs ] , the cells 1(1 ) and  1(3 ) are applied the same rules with a delay of two ticks of the clock .",
    "note that in table  [ exfixd ] , 1(1 ) and  1(3 ) are also applied the same rules with a delay when the locomotive comes from the left .",
    "this is no more the case when it comes from the right .",
    "also note that the rules applied to  1(3 ) are the same whenever the locomotive comes from the left or from the right .",
    "note that in both tables , we can see rules of table  [ verttracktab ] as well as rules of table  [ fixtab ] .      in section  [ scenar ] , we have seen the idle configurations of the other pieces of the round - about : the doubler , see sub - subsection  [ subsdoubler ] and the selector , see sub - subsection  [ subssel ] .",
    "figure  [ doubleur ] illustrates the motion of the locomotive through the doubler .",
    "the locomotive arrives in the form of a simple one .",
    "it enters the central cell of the doubler , the cell  @xmath32 in the figure , after passing through the cell 1(1 ) .",
    "when the locomotive is in  @xmath32 , the milestone at the cell 1(2 ) becomes white .",
    "this makes the cell  0(0 ) to remain red .",
    "now , the cell  1(3 ) also becomes red by the simple application of the rules on the white cell of a basic element .",
    "now we have two consecutive red cells which have a common side .",
    "now , when the cell  @xmath32 is red and when it can see a red neighbour through its side  3 and a white one through its side  2 , it becomes white . from this moment",
    "a double locomotive goes on its way along the tracks .",
    "table  [ doubltab ] gives the rule which are involved by the doubler .",
    "we remind the reader that the rules of previous tables may also apply to this situation , particularly the rules of table  [ consrules ] and those for the motion of the locomotive on the tracks : tables  [ verttracktab ] , [ mounttracktab ] , [ round1stab ] , [ round1dtab ] and  [ round3htab ] , as these tables contain rules for the milestones which witness the motion of the locomotive .",
    "rules  143 , 153 , 157 , 162 , 169 and 173 apply to the central cell  @xmath36 of the doubler , rule  143 being the conservative rule .",
    "the arriving locomotive is detected by rule  153 through a vertex - neighbour .",
    "when side  1 can see the locomotive , rule  157 makes it becomes red .",
    "rule  162 keeps the locomotive which arrived to  @xmath36 which , accordingly , remains red .",
    "now , rule  169 can see the locomotive in the neighbour  3 of  @xmath36 and it also noticed that the neighbour  2 became white .",
    "rule  173 witnesses that the second cell of the double locomotive is in neighbour  3 and that neighbour  2 returned to blue . as neighbour  2 , _",
    "i.e. _ the cell 1(2 ) plays an important role .",
    "table  [ exdoubl ] also lists the rules concerning that cell : rules  146 , 160 , 165 , 170 and  175 , rule  146 begin conservative .",
    "note the occurrence of a blue neighbour  9 .",
    "the cell can see the arriving locomotive through a vertex as shown by the neighbourhood of rule  160 and rule  165 makes the cell 1(2 ) become white as the locomotive is seen from its neighbour  1 .",
    "rule  170 restores the blue colour of the milestone and rule  175 can see through a vertex that the second red cell of the double locomotive is leaving .",
    "we leave the checking of the other rules to the reader : table  [ doubltab ] , figure  [ doubleur ] and table  [ exdoubl ] are enough for that purpose .",
    "table  [ exdoubl ] gives the traces of execution of the rules given in table  [ doubltab ] .",
    "figure  [ select ] illustrates the working of the selector of the round - about .",
    "the case of a single locomotive is illustrated by the first row of the figure while the case of a double locomotive is illustrate by the second row .",
    "tables  [ selectstab ] and  [ selectdtab ] give the rules for the locomotive and for the cells of the selector .",
    "tables  [ exsels ] and  [ exseld ] list the rules used at a few cells of the selector : cells 0(0 ) , 1(2 ) , 1(3 ) and 1(4 ) for the tracks and cells 2(3 ) and  2(4 ) for the working of the selector .",
    "for each cell we distinguish at most four consecutive times outside the long period in which the single conservative rule of the cell is applied to it . in the tables ,",
    "the conservative rule lies in the column headed by  0 .",
    "note that cells 1(3 ) , 0(0 ) , 1(2 ) , and  1(4 ) are cells of the track , but each one has a neighbourhood which is not obtained from that of an element of the tracks by rotation of the neighbours . note that the first two times for cell  1(3 ) are applied rules of the vertical tracks .",
    "remember that the cells 2(3 ) and  2(4 ) are milestones of the cell 1(3 ) .",
    "these cells are not permanently blue and they determine whether the locomotive is simple or double as they can see both the cell  0(0 ) and the cell  1(3 ) .",
    "note that the neighbourhood of the cells 2(3 ) and  2(4 ) is not that of a milestone of an element of the tracks .",
    "usually , for a milestone of the track , there are five times when a simple locomotive passes : time  1 , the locomotive is seen from a vertex - neighbour ; time  2 , it is seen from the side shared with the cell of the track where the locomotive is ; time  3 , it is again seen from another vertex - neighbour .",
    "when a double locomotive passes , there is one more time when the locomotive leaves the window on the track seen by the cell .    for the cells  2(3 ) and  2(4 ) , it can be seen that , due to the configuration illustrated by figure  [ select ] , the cell  2(3 ) can see that the locomotive is simple or double one time before the cell 2(4 ) can see the same thing .",
    "however , the cells 2(3 ) and 2(4 ) both turn to red at time  2 , when time  1 is the first one when they can see the approaching locomotive .",
    "note that the conservative rule applies at time  5 for the cell  2(3 ) when the locomotive is double , while the conservative rule applies at time  4 for the cell 2(4 ) when the locomotive is simple .",
    "1=0    denote by  @xmath37 the central cell in figure  [ select ] .",
    "rule  190 is its conservative rule when no locomotive is around .",
    "note the red neighbour  6 : the first case of a red milestone .",
    "we shall look the rules for  @xmath37 and also for its neighbours  @xmath38 and  ( 4 ) , the cells 1(2 ) and  1(4 ) respectively and also for its neighbours  8 and  9 , the cells 2(3 ) and 2(4 ) respectively . as vertex neighbours of  @xmath37",
    ", the cells 2(3 ) and  2(4 ) can also see which state is in the neighbour  3 of  @xmath37 , the cell 1(3 ) .",
    "indeed , 2(3 ) and 2(4 ) are the neighbours  2 and  5 respectively of the cell  1(3 ) .",
    "accordingly , the cells 2(3 ) and 2(4 ) can both check whether the locomotive which just arrived at  @xmath37 is simple or double .",
    "first , consider the case of a single locomotive .",
    "rules  206 , 212 , 222 and 227 apply to  @xmath37 .",
    "rule  206 can see the locomotive in the neighbour  3 of  @xmath37 , so that the cell becomes red .",
    "rule  212 makes @xmath37 becomes white again witnesses that its neighbour  9 became red , preventing the locomotive to enter cell  1(2 ) .",
    "rule  222 witnesses that the locomotive is now in the cell  1(4 ) , the neighbour  4 of  @xmath37 .",
    "rule  227 can see the locomotive going out through a vertex - neighbour .",
    "cell 2(3 ) is applied rules  195 , 204 , 208 and 217 .",
    "rule  195 is the conservative rule .",
    "the vertex - neighbourhood is a characteristic of this cell .",
    "rule 204 witness that a locomotive is in its vertex - neighbour  6 .",
    "rule 208 makes the cell turning to red in order to block the entrance of the locomotive into  1(2 ) as the cell detected that the locomotive is simple : it is in 1(3 ) and cell 3(3 ) is white . both cells 1(3 ) and  3(3 ) can be seen from  2(3 ) .",
    "rule 217 turns the cell back to blue .    cell 2(4 ) is applied rules  199 , 210 , 220 and  224 , rule  199 is conservative .",
    "its vertex - neighbourhood is a characteristic of this cell .",
    "rule 210 can see the locomotive when it is in cell  1(3 ) .",
    "it can not see it before and at this moment , the cell can not know whether the locomotive is simple or not . accordingly , the cell remains blue .",
    "rule 220 can see the locomotive when it is in  @xmath37 as its vertex - neighbour  7 . as the cell can see that cell 1(3 ) is white , which means that the locomotive is simple , it remains blue in order the locomotive enters the cell 1(4 ) .",
    "cell 1(2 ) is applied rules 194 , 207 and 215 .",
    "rule 194 is conservative and it can be noticed that its neighbourhood is not that of an element of the tracks . rule 207 can see the approaching locomotive through the neighbour  6 of the cell .",
    "rule  215 can see the locomotive in  @xmath37 and it can also see that the cell 2(3 ) is now red . from that , the cell knows that it must remains white , which is performed by rule  215 . after that , the cell 2(3 )",
    "returns to blue and the locomotive , a simple one , is no more visible .",
    "cell  1(4 ) is applied rules  143 , 145 , 146 , 150 and  154 .",
    "rule  143 is conservative .",
    "rule  145 can see an approaching locomotive through its neighbour  7 .",
    "rule  146 can see the locomotive in  @xmath37 .",
    "it can also see that the locomotive is simple , so that the cell turns to red .",
    "rule  150 turns the cell back to white and rule  154 can see the locomotive as left the cell as it is in its neighbour  5 .    -10pt",
    "1=0    consider the case of a double locomotive .",
    "cell 0(0 ) is applied rules  190 and  206 as in the case of a simple one : @xmath37 does not know yet that the locomotive is double",
    ". then it is applied rules  234 and  240 before again rule  190 , the conservative one .",
    "rule  234 turns the locomotive to white : it transforms the locomotive into a simple one .",
    "rule  240 witnesses that the locomotive is in the cell  1(2 ) .    cell 2(3 )    cell 2(4 )    cell 1(2 )    cell 1(4 )    tables  [ exsels ] and  [ exseld ] show us which rules apply to the cells of the selector .",
    "we can see that when the locomotive is double , rule 227 makes the cell become red , preventing the locomotive to enter the cell  1(4 ) , see rule  226 . at this moment , the cell  2(3 ) remains blue , see rule  220 , which allows the locomotive to enter the cell  1(2 ) .",
    "when the locomotive is simple , the cell  2(4 ) remains blue , rule  198 , so that the locomotive enters the cell  1(4 ) and the cell  2(3 ) turns to red , rule  196 , preventing the locomotive to enter the cell  1(2 ) , rule  203 .",
    "the fork is a structure which , in some sense , is the exact reverse of the passive fixed switch .",
    "the difference is that the fork produces two simple locomotives , each one going in a different direction , see figure  [ fourche ] , while a single simple or double locomotive enters the passive fixed switch .",
    "table  [ forktab ] gives the rules for the fork .",
    "we can note that a few of them were already used by the cell  1(4 ) in the selector when it is crossed by a simple locomotive .",
    "table  [ forktab ] shows the rules for the cells of the fork  : 0(0 ) , 1(3 ) , 1(1 ) and  1(4 ) .",
    "the cells involved in this situation are those of the tracks , but they are assembled in a slightly unusual way .",
    "they use the trick we already used for the rules allowing a locomotive to run around a single cell or a few of them , pairwise sharing a common side .    in the first three times , the rules applied to cell  1(1 ) are those of the motion on a vertical track .",
    "this is also the case for the conservative rule .",
    "but when the cell turns to white , the locomotive is leaving the neighbourhood of the cell , it makes use of a rule for the fixed switch , for the cell 1(5 ) , when a simple locomotive arrives to the centre .",
    "for the cell  1(1 ) , the rules are those of a vertical track . for the cell  1(4 )",
    ", the neighbourhood is a bit unusual : it is due to the right - angle turn in the path of the locomotive .",
    "for this reason , the locomotive is seen from an unusual neighbour , whence rule  252 .",
    "of course , a simpler implementation was possible , but the one illustrated by figures  [ control ] and  [ controls ] show that the rules allow to apply to any path for the tracks .",
    "table  [ exfork ] gives the traces of execution for the rules of table  [ forktab ] .",
    "the rules apply to the cells 1(3 ) , 0(0 ) , 1(1 ) , 1(4 ) and 2(5 ) for the tracks and to the cell 1(5 ) for the milestones .",
    "note that rule  47 is the conservative rule for 1(3 ) , 0(0 ) and  1(1 ) : they are standard elements of the track assembled as in a vertical track .",
    "the cell  1(4 ) is a bit different : it has three milestones only , all of them blue ones , and one of them is a vertex - neighbour .",
    "this is why the conservative rule is a new one : rule  241 .      in section  [ scenar ]",
    "we have seen that we can implement both a flip - flop and the active memory switch by using the same basic devices provided that they are suitable arranged .",
    "figure  [ control ] shows how the controller is working , depending on the state of its cell  1(1 ) which we call the * colour * of the controller .",
    "figure  [ controls ] shows how the colour of controller is changed by the arrival of the appropriate signal : we remind the reader that the signal has the form of a simple locomotive .",
    "table  [ controltab ] gives the rules corresponding to the illustration given by figure  [ control ] while table  [ controlstab ] does the same thing for figure  [ controls ] .",
    "also , table  [ excontrol ] gives the traces of executions of the rules applied to significant cells when the locomotive arrives to the controller while table  [ excontrols ] gives similar traces when the signal arrives to the controller in order to change its colour .    in figure  [ control",
    "] , the locomotive , always a simple one , crosses the cells 8(4 ) , 3(4 ) , 1(4 ) , 0(0 ) , 1(2 ) , 3(2 ) and 8(2 ) in this order , where 0(0 ) is the central tile of the picture . from this figure and from table",
    "[ excontrol ] , we can see that when the cell  1(1 ) is blue , the locomotive can pass : cell  0(0 ) looks like an element of the tracks .",
    "when the cell  1(1 ) is red , the neighbourhood of  0(0 ) is no more that of an element of the tracks : the cell 0(0 ) remains white and from the rules of the track applied to 1(4 ) , the locomotive vanishes .",
    "table  [ excontrol ] gives the traces of execution for the rules which apply to the cells 1(4 ) , 0(0 ) and 1(2 ) for the tracks , the cells 2(2 ) and 1(1 ) for milestones and the cell 2(1 ) for a witness of transformations induced by the passage of the locomotive .",
    "# 1 # 2 # 3 # 4 to 25pt#1 to 25pt#2 to 25pt#3 to 25pt#4    when the colour of the controller is blue , the rules 253 , 264 and 268 apply to the cell  1(1 ) .",
    "the rule 253 is conservative , the rule 264 can see the locomotive through its side  1 and the rule  268 can see it through its vertex - neighbour  6 as the locomotive is leaving the central cell of the controller .",
    "when the controller is red , the conservative rule is 272 and no other rule applies to the cell as the locomotive vanishes before being noticed by the cell .",
    "# 1 # 2 # 3 # 4 to 25pt#1 to 25pt#2 to 25pt#3 to 25pt#4    figure  [ controls ] and table  [ excontrols ] illustrate the action of a signal .",
    "the figure illustrates the fact that the signal operates like a second simple locomotive arriving to the controller .",
    "this new locomotive comes from another path and can be seen by cell  1(1 ) trough its neighbour  2 while the ordinary locomotive is seen from its neighbours  1 and one time later by its neighbour  6 , when the locomotive leaves the controller which was blue .",
    "the cells involved in table  [ excontrols ] are the cells 6(1 ) and 2(1 ) for the track of the signal , the cells 1(1 ) and 2(2 ) as milestones and the cell 1(5 ) as a witness of the changes : the cell 1(5 ) can see 1(1 ) through it vertex - neighbour  6 and the cell 2(2 ) from its neighbour  5 .",
    "accordingly , rule  286 witnesses that the signal arrived close to  1(1 ) which is still blue and rule  280 that 1(1 ) changed to red and that the signal vanished .",
    "rule 280 is also the conservative rule of  1(5 ) when the cell is red .",
    "it witnesses the arrival of the signal with rule  294 and it witnesses that 1(1 ) turned to blue by the rule 262 which is also the conservative rule of 1(5 ) when the controller is blue .      as we said in section  [ scenar ] , the controller of the passive memory switch works in a different way than that of the active switches . for this reason",
    ", we call it the * controller - sensor * as it does not stop the locomotive when it runs through the non - selected track . as in the case of the active switches , this controller is characterized by the state of a cell , here the cell  1(2 ) , see figure  [ controlsign ] . here , the cell 1(2 )",
    "is called the * sensor * as its role is to detect a passage , not to stop it .",
    "the tracks goes along the cells 6(1 ) , 2(1 ) , 1(1 ) , 4(1 ) and 11(1 ) , followed in this order by the simple locomotive when it is present . as in the case of the active switch",
    ", we say that the controller is blue or red according to the state of the cell 1(2 ) . also as in the case of the active switches , this colour is changed by the arrival of a signal in the form of a simple locomotive too . in the figure ,",
    "the way of this signal passes through the cells 13(3 ) , 5(3 ) and 2(5 ) .",
    "when the signal arrived in the cell 2(5 ) , the cell 1(2 ) changes its colour as illustrated by figure  [ controlsign ] .",
    "note that this change occurs when the controller is blue only .",
    "when it is red , the change is triggered by the passage of the simple locomotive on its ordinary way as illustrated by figure  [ controlsign ] too .",
    "table  [ passmemotab1 ] gives the rules involved by the passage of the locomotive through the controller - sensor while table  [ passmemotab2 ] gives those which are connected with the change of the sensor from blue to red .",
    "table  [ exctrlblue ] gives traces of execution for the rules applied to the cells concerned when the sensor is blue while table  [ exctrlred ] does the same for the case when the sensor is red .    in the left - hand side sub - table of table",
    "[ exctrlblue ] , the involved cells are 6(1 ) , 2(1 ) , 1(1 ) and 4(1 ) for the tracks and 2(2 ) as milestone . in the right - hand side sub - table ,",
    "the involved cells are 5(3 ) and 2(3 ) for the path which conveys the signal , the cell 1(2 ) as milestone and the cell 1(3 ) as witness of the changes .",
    "the cells of the tracks involve cells which we already noticed in other parts of the circuit .",
    "the cell 2(2 )  is a witness of the passage of the locomotive : rule  332 is conservative , rule  335 can see two red cells : one is always present as vertex - neighbour  6 .",
    "it is a marker for the sensor .",
    "the other red cell noticed by rule  335 as neighbour  2 is the locomotive .",
    "rule  336 can see the locomotive in vertex - neighbour  8 , going further on its tracks .    in the right - hand side sub - table of table",
    "[ exctrlblue ] , the cells which convey the signal involve rules that we already seen .",
    "the cell  1(3 ) is a simple witness of the change in the cells 1(2 ) , its vertex - neighbour  6 , and in the cell 2(3 ) , its neighbour  2 .",
    "rule  305 can see that the cell 1(2 ) is now red . in 1(2 ) , rule  41 is conservative : this rule is also used when two locomotives go down a vertical track .",
    "rule 342 can see the approaching signal through its vertex - neighbour  10 .",
    "rule  345 can see it through its neighbour  5 which makes it turn to red .",
    "rule  347 is the conservative rule for a red sensor as shown in table  [ exctrlred ] .    in table",
    "[ exctrlred ] , we can see the rules applied to the cells of the tracks , the same as in table  [ exctrlred ] but we can also see the rules applied to the cells 2(2 ) and 6(2 ) .",
    "the cell 2(2 ) is a blue milestone , but when it becomes red , rule  313 , it plays the role of a locomotive seen by the cell 6(2 ) to which rule  323 applies , making the locomotive enter the cell 6(2 ) . rule  319",
    "makes the cell 2(2 ) return to blue and it can also see the locomotive of the tracks through its vertex - neighbour  8 , when the locomotive goes on its way on the tracks .",
    "rule  326 can see the signal - locomotive in the cell 6(2 ) which is the neighbour  4 of the cell 2(2 ) .",
    "the cell 6(2 ) is applied the rule  302 , a conservative rule .",
    "rule  323 makes it turn to red , as already seen .",
    "rule  329 makes it turn back to white .",
    "rule  351 witnesses that the signal - locomotive is in neighbour  3 of the cell 6(2 ) , going further on its path to the other controller - sensor .",
    "the tables of this section completes the proof of theorem  [ letheo ] .",
    "there are several questions raised by this result .",
    "is it possible to reduce the number of states to two of them in this context ?",
    "if it is possible , is it impossible to do so in the pentagrid with _  la _ von neumann neighbourhood , _",
    "i.e. _ with considering as neighbours the cells which share an edge only ?",
    "still hard work ahead .",
    "nobody will complain at that ...",
    "m. margenstern , _ cellular automata in hyperbolic spaces , vol .",
    "@xmath39 , theory _ , collection : _ advances in unconventional computing and cellular automata _ ,",
    "editor : andrew adamatzky , old city publishing , philadelphia , ( 2007 ) , 422p ."
  ],
  "abstract_text": [
    "<S> in this paper , we prove that there is a weakly universal cellular automaton on the pentagrid with three states which is rotation invariant and which uses _  la moore _ neighbourhood . moreover , at each step of the computation , the set of non quiescent states has always infinitely many cycles . </S>"
  ]
}