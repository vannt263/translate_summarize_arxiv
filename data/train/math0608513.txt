{
  "article_text": [
    "let @xmath4 be an undirected graph with @xmath5 and @xmath6 .",
    "we say that a vertex labeling @xmath7 together with an edge labeling @xmath8 are a _ graceful labeling _ of @xmath9",
    "if :    * @xmath10 and @xmath11 is one - to - one ( injective ) * @xmath12 * @xmath13 for every two vertices @xmath14 such , that @xmath15    graceful labelings of graphs have received a lot of attention ; see @xcite for an extensive survey . in this paper",
    "we concentrate on the single case when @xmath16 is the @xmath0-vertex path .",
    "note , that in this case @xmath17 , thus the vertex labels are in bijection with the set @xmath18 .",
    "this justifies the following definition :    a permutation @xmath19 $ ] of the set @xmath20 is a _ graceful @xmath0-permutation _ if @xmath21    for instance , @xmath22 $ ] is a graceful @xmath23-permutation .",
    "the values of a graceful @xmath0-permutation can be identified with the vertex labels in some graceful labeling of @xmath1 and vice versa .",
    "we shall use these notions interchangeably .",
    "denote by @xmath24 the number of graceful @xmath0-permutations .",
    "the sequence @xmath24 is not well known , not even asymptotically .",
    "it has number a006967 in the sloane s on - line encyclopedia of integer sequences ( @xcite ) where the first 20 terms are listed .",
    "its growth is exponential as shown in @xcite and @xcite . in the latter",
    "the best known estimate , @xmath25 is proved . here",
    "we shall improve this result by proving the following :    [ theo1 ] @xmath26    this paper is organized as follows . in the next section we introduce a recursive algorithm for the computation of @xmath24 .",
    "next we observe how its efficiency can be vastly improved using some knowledge of the structure of graceful permutations . in section 4",
    "we use the computational data to prove theorem [ theo1 ] .",
    "some closing remarks are included in section 5 .",
    "we shall generate ( and count ) graceful @xmath0-permutations by the following recursive search ( think of path labelings for now ) : the edge label @xmath27 can only appear as @xmath28 , therefore the vertices with labels @xmath29 and @xmath27 must be neighbours . moving along ,",
    "the next free edge label @xmath30 can be induced as @xmath31 or @xmath32 , so either @xmath29 and @xmath30 or @xmath33 and @xmath27 must be connected .",
    "this obvious procedure continues with further edge labels down to @xmath33 .",
    "of course we can only test adding a certain edge if it does not conflict with the path structure of the created graph , i.e. if what has been constructed so far is a collection of paths .",
    "figure 1 shows half of the _ search tree @xmath34 _ obtained for @xmath35 .",
    "the nodes of the tree will be referred to as _ partial permutations_. the _ level _ , indicated in the left column , is the edge label just added .",
    "the vertex labels inducing that edge label are underlined in each node .",
    "the @xmath36 nodes on level @xmath33 give rise to @xmath37 graceful @xmath23-permutations ( each can be read in the given order or backwards ) , therefore @xmath38 ( because the other half of the tree looks just the same ) .",
    ", scaledwidth=90.0% ]    now we describe how the partial permutations are represented , so that the expansion from a node on level @xmath39 to the nodes on level @xmath40 can be done quickly .",
    "each node holds two arrays :    * ` free[0 ..",
    "n-1 ] `  for each @xmath41 the number ` free[u ] ` is the number of , , free slots  of a vertex labeled @xmath41 .",
    "initially ` free[u]:=2 ` for all @xmath41 , and the value drops down by one each time @xmath41 is chosen an endpoint of some edge . a vertex label with ` free[u]=0 `",
    "must no longer be used , * ` forb[0 .. n-1 ] `  ( forbidden ) : for every vertex label @xmath41 , which is an endpoint of some partial path in the partial permutation ` forb[u ] ` is the label of the other end of this path .",
    "these two vertices can not be connected by an edge , since a cycle would appear .",
    "initially ` forb[u]:=u ` .",
    "note that with this representation we do not know the actual order of the labels in the permutation .",
    "however , they fall into three classes : yet unused ( with ` forb[u]=2 ` ) , endpoints of partial paths ( ` forb[u]=1 ` ) and no longer available labels inside the paths ( ` free[u]=0 ` ) . as for the endpoints their pairing",
    "is completely described by ` forb ` .",
    "note that ` forb[forb[u]]=u ` at all times .",
    "expansion is now easy : a new edge can be added between two labels iff they both have at least one free slot and are not paired by ` forb ` . to update the ` forb ` array after a new edge addition note , that an edge can be added in three ways : between two yet unused labels , between an unused label and a path endpoint or between two endpoints of different paths .",
    "supposing that the labels being connected are @xmath41 and @xmath42 the following simultaneous assignment :    ` ( forb[forb[u ] ] , forb[forb[v ] ] ) : = ( forb[v ] , forb[u ] ) `    is valid in each case , which is an easy check to verify .",
    "a straightforward recursive tree search procedure that counts graceful @xmath0-permutations is an obvious outcome of the above considerations .",
    "now we shall work on efficiency .",
    "in figure 1 half of the search tree was omitted because it resembles the first half .",
    "more precisely , if @xmath43 and @xmath44 is a graceful labeling of a graph @xmath4 with @xmath45 edges then the _ complementary labeling _ given by : @xmath46 is again graceful .",
    "the omitted half of the tree was , in this sense , complementary to the first half so it yielded equally many graceful permutations .",
    "now we shall generalize this , and define an equivalence relation between the nodes on one level in the search tree .",
    "let ( @xmath47 , @xmath48 ) and ( @xmath49 , @xmath50 ) be the arrays ` free ` and ` forb ` in two partial permutations @xmath51 and @xmath52 on the same level of the search tree @xmath34 .",
    "we say the nodes @xmath51 and @xmath52 are _ equivalent _ if either @xmath53 = free_2[u ] \\textrm { and } \\forall_{u}\\ ( free_1[u]=1 \\rightarrow forb_1[u]=forb_2[u])\\ ] ] or @xmath53 = free_2[n-1-u ] \\textrm { and } \\forall_{u}\\ ( free_1[u]=1 \\rightarrow forb_1[u]=n-1-forb_2[n-1-u])\\ ] ]    less formally it says that @xmath51 and @xmath52 are equivalent if they have the same ` forb`-pairing of endpoints and the same set of used labels , possibly after taking the complementary labeling in one of the nodes .",
    "this is an equivalence relation with the following additional property :    if @xmath51 and @xmath52 are equivalent then the number of graceful permutations they expand to ( i.e. number of leaves on level @xmath33 in the subtrees of @xmath34 rooted in @xmath51 and @xmath52 respectively ) are equal .",
    "* this follows from the remark in the previous section , that only the ` forb`-pairing and the set of free labels influence the expansion algorithm ( exact location of inside - path labels does not matter ) . on the other hand complementary nodes yield symmetrical ( complementary ) subtrees . in either case equivalent partial permutations expand to isomorphic rooted subtrees of @xmath34 .",
    "this observation leads to a breadth - first search of the search tree . with each node",
    "we keep its _ multiplicity _  the number of nodes in its equivalence class .",
    "we only keep one representative of each class .",
    "after expansion from level @xmath39 to @xmath40 we group the new nodes into equivalence classes again and sum up multiplicities accordingly .",
    "the final answer @xmath24 is the sum of multiplicities of all nodes on level @xmath33 .",
    "note , that comparing two nodes with respect to equivalence takes @xmath54 time , thus full comparison of new nodes during the expansion from level @xmath39 to @xmath40 would be expensive . to speed this up a hash table was used to keep new nodes .",
    "observe , that the choice of the hash function is not completely arbitrary  it must not distinguish equivalent nodes .",
    "here are some sample numbers to indicate the power of the optimization thus achieved : @xmath55 is the number of nodes at level @xmath33 in @xmath56 .",
    "hovewer , there are less than @xmath57 distinct equivalence classes of partial permutations at each level , therefore at most this many partial permutations must be kept in memory and expanded at a time .",
    "to get a lower bound on @xmath24 we follow precisely the method of @xcite and @xcite .",
    "first , extend the notation @xmath24 to :    * @xmath58  the number of graceful @xmath0-permutations with left endpoint @xmath59 , let us call them graceful @xmath60-permutations * @xmath61  the number of graceful @xmath0-permutations with endpoints @xmath62 ( @xmath63 ) , let us call them graceful @xmath64-permutations    ( @xcite , @xcite ) [ lemma ] for any numbers @xmath65 , @xmath66 we have the inequality : @xmath67    * proof ( sketch ) . *",
    "first prove that a graceful @xmath68-permutation is in fact _",
    "graceful  all edges connect large ( greater or equal @xmath45 ) vertex labels with small ones . then add @xmath69 to all large vertex labels in a @xmath68-permutation , add @xmath45 to all vertex labels in a @xmath70-permutation and glue these two by adding an edge between @xmath71 and @xmath72 .",
    "this yields a @xmath73-permutation .    by iterating the last inequality @xmath39 times we get : @xmath74",
    "hence , for fixed @xmath75 we have an estimate ( @xmath0 is the variable ) : @xmath76 it remains to find @xmath75 , that make @xmath77 possibly large .",
    "observations show , that for a fixed @xmath45 @xmath78 is the biggest for @xmath79 and that the sequence @xmath80 is increasing .",
    "hence it is desirable to compute @xmath80 form as big @xmath45 as possible , which is equivalent to computing @xmath81 .",
    "the results so far were :    * in @xcite : @xmath82 , hence @xmath83 * in @xcite : @xmath84 , hence @xmath85    with slight easy modifications the algorithm described in the previous section can be used to enumerate also graceful @xmath64-permutations .",
    "it was efficient enough to compute :    @xmath86    which in turn yields @xmath87 .",
    "eventually we get :    @xmath88    this completes the proof of theorem [ theo1 ] .",
    "additionally the values of @xmath24 have been computed for @xmath89 ( they have been submitted to @xcite ) .",
    "the quotients @xmath90 tend to gather between @xmath91 and @xmath92 , suggesting that the lower bound @xmath93 is poor .",
    "this is no surprise , because we have in fact estimated the size of only a small part of all graceful @xmath0-permutations , namely the bipartite graceful @xmath94-permutations .",
    "it also remains an open question to find an exponential upper bound on @xmath24 ."
  ],
  "abstract_text": [
    "<S> a graceful @xmath0-permutation is a graceful labeling of an @xmath0-vertex path @xmath1 . in this paper </S>",
    "<S> we improve the asymptotic lower bound on the number of such permutations from @xmath2 to @xmath3 . </S>",
    "<S> this is a computer - assisted proof based on an effective algorithm that enumerates graceful @xmath0-permutations . </S>",
    "<S> our algorithm is also presented in detail .     </S>",
    "<S> warsaw university , email : aszek@mimuw.edu.pl ] </S>"
  ]
}