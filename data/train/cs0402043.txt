{
  "article_text": [
    "there were several motivations to develop the uplnc language .",
    "one of them was to make a programming language which suits better one s personal tastes , and allows experimenting with ideas .",
    "also , developing of the compiler was an amusing process for the author , who hopes that this work will be instructive to the reader . from a certain point",
    ", one could view such a work as a work of art , like a poet would write a beautiful poem .",
    "another reason behind this language would be the beginning of a much larger project- building an alternative do - it - yourself ( diy ) platform , including programming language , developer tools , operating system kernel written in that language , full set of system and application utilities .",
    "if some day such a project becomes implemented , it is the author s hope that it will remain free , as free speech , without being threatened by claims of exclusive rights to use , modify and distribute .",
    "that s why the source code in the present work is released under the gnu general public license .",
    "this language is already quite developed- the compiler does support unlimited level of indirection , multiple dimensional arrays , structures , methods of structures , and most of the control statements inherent of c. on the other hand , there are some more or less essential things which would be desirable to be implemented , e.g. floating point support , initializers and optimization phase before the code generation .    an open question is whether this language will evolve as a general - purpose one like c and c++ , or will have some more sophisticated features as combinatoric control statements(ccs ) .",
    "an lyrical diversion which gives some notion of ccs is a calculation of the form r=_1i_1i_2  i_knf(i_1,i_2,  ,i_k ) .",
    "when @xmath0 ( the number of indices ) is not known , the simplest way is to write some recursive or iterative algorithm which cycles the @xmath0 indices in the appropriate way .",
    "this can be done also with a standard library function / template .",
    "a non - trivial way to deal with this situation is post - compile code generation : the program can generate machine code corresponding to something like    .... for(i[k-1]=1;i[k-1]<=n;++i[k-1 ] )   for(i[k-2]=1;i[k-2]<=i[k-1];++i[k-2 ] )    for(i[k-3]=1;i[k-3]<=i[k-2];++i[k-3 ] )     ...       r+=f(i ) ; ....    and run that machine code , or it can output the source code to a file , invoke an external compiler which would produce a shared object , which then would be loaded and run .      in part , this work was inspired by small c compiler @xcite and its variant ratc @xcite .",
    "when the author encountered ratc around one decade ago , he made a rough implementation(or translation ) of it in turbo pascal .",
    "that project was ultimately abandoned , mainly because it was a compiler written in a quite high - level language , translating(by design ) a rather primitive language , so a bootstrap procedure was not possible .",
    "its source code is probably lost .",
    "much later , when i saw several other implementations of small c , decided that it would be better , instead of making subsets and dialects , which will probably never be as good as the complete language , to make one s own language , referred to as uplnc , which will allow more choices of its design .",
    "still , i decided to use small c as the first language to implement the uplnc compiler to that end i ported a version of small c to ` i386-linux ` @xcite .",
    "those preliminary versions of the compiler were pretty much constrained by the paradigms of the small c compiler no use of structures at all , so that tables were implemented by means of several arrays , corresponding to the different fields of the missing structures . even in the present version",
    "one can find similarities of the syntax parser of uplnc to the one of small c , as well as artefacts of code borrowed from the small c compiler .",
    "nevertheless , the author wanted to escape the constraints of small c , that s why , when the compiler was already able to produce correct code , the author wrote a utility for translating small c to uplnc ( one can see its traces by some truncated identifiers like ` expressi ` ) .",
    "the result was a compiler for uplnc , written in the same language , so it could compile itself .",
    "a next step was to replace the implementation of the tables as arrays of scalar types with arrays or lists of structures .",
    "the processing of expressions was completely rewritten .",
    "the old small c - style approach of code generation being done while parsing , was replaced by a three - stage process : parsing and building a tree , generating from that three an intermediate representation of the program code , producing of assembly code .",
    "it is possible in the future to include an optimization stage after the second stage of this process .",
    "later , methods of structures were introduced in the language , much similar to the methods in c++ : the method has a default parameter which points to the instance of the structure , and within the method the members of the structure are visible .",
    "it is possible to declare variables in different styles :    .... var a , b , c:[3]*char ; var [ 3]*char : d , e , f ; var extern a1,a2:int ; var extern int : a3 ; var int extern : a4 ; var a5:extern int ; var a6:int extern ; var extern a7:extern int extern ; var extern * * int extern : extern a8 ; ....    currently , the only supported target of the compiler is linux on -compatible processors .",
    "the code generated is link - compatible with c , that s why it is possible to link programs with the gnu c library , which is used by the compiler itself .",
    "it is plausible that with small modifications the compiler could support other operating systems running on -compatible microprocessors . in order to support other architectures ,",
    "it is possible to rewrite the code generating part of the compiler .",
    "this was the main reason behind separating the code generation in a different stage and even in the different module ` codegen.e ` .",
    "= 0.99    a feature introduced in the compiler was the possibility of redefining certain syntax elements .",
    "an illustrative , albeit not quite readable example is this program for calculating of primes :    .... % % takeoff lcomp \" < font > \" ; % % takeoff rcomp \" < /font > \" ; % % takeoff tfunc \" < p > \" ; % % takeoff larg \" < arg > \" ; % % takeoff rarg \" $ < /arg > \" ;    # define maxnum 1000 # define tabsz   1001    var tab:[tabsz]int;/*factorizes?*/    < p > doprimes < arg>$</arg > < font >    var int : i , k ;    printf < arg>\"calculating the primes>=3 ...",
    "\\n\"$</arg > ;    for < arg > i=2;i < tabsz;i++$</arg >      tab[i]=0 ;    for < arg > i=3;i < tabsz;i = i+2$</arg >      < font >        if < arg >",
    "tab[i]$</arg >          continue ;        printf < arg>\"%d\\n\",i$</arg > ;        for < arg > k = i;k < tabsz;k = k+i$</arg >          < font >            tab[k]=1 ;          <",
    "/font >      < /font",
    "> < /font > < p > main",
    "< arg>$</arg > < font >    doprimes < arg>$</arg > ; < /font > ....    = 0.99    another feature which was implemented lately was the code graphing , namely producing a ` gnuplot ` @xcite input file containing a graphical scheme of the referrals between global symbol names in a particular module .",
    "for example , the scheme produced for some of the modules in the compiler are shown in fig.[lfig1 ] and fig.[lfig2 ] .",
    "the compiler driver was written in perl @xcite .",
    "it runs the preprocessor ` lpp1 ` and redirects its output as input of the compiler ` langc ` . linking is done by using the driver of ` gcc ` @xcite .",
    "in this section a full source code listing of the compiler is presented .",
    "an archive of previous versions is in @xcite ."
  ],
  "abstract_text": [
    "<S> the implementation of the compiler of the uplnc language is presented with a full source code listing .    * </S>",
    "<S> the uplnc compiler : design and implementation + *    evgueniy vitchev   +   + department of physics and astronomy , rutgers university + piscataway , nj 08855 - 0849 , usa </S>"
  ]
}