{
  "article_text": [
    "in this paper we consider the activated random walk ( arw ) model on a vertex - transitive graph @xmath9 .",
    "this is a continuous - time interacting particle system with conserved number of particles , where each particle can be in one of two states : a ( active ) or s ( inactive , sleeping ) .",
    "initially , the number of particles at each vertex of @xmath10 is an independent bernoulli random variable of parameter @xmath11 $ ] , usually called the _ particle density _ , and all particles are of type a. each a - particle performs an independent , continuous time random walk on @xmath10 with jump rate @xmath12 , and with each jump being to a uniformly random neighbor .",
    "moreover , every a - particle has a poisson clock of rate @xmath13 ( called the _ sleeping rate _ ) .",
    "when the clock of a particle rings , if the particle does not share the site with other particles , the transition @xmath14 occurs ( that is , the particle becomes of type s ) ; otherwise nothing happens .",
    "each s - particle does not move and remains sleeping until another particle jumps into its location . at such an instant ,",
    "the s - particle turns into type a , giving the transition a+s @xmath15 2a .    for any given @xmath16",
    ", it is expected that arw undergoes a phase transition as @xmath17 varies .",
    "for example , if @xmath17 is very small , there is a lot of empty space between particles , which allows each particle to eventually fall asleep ( that is , turn into type @xmath18 ) and never become active again .",
    "when this happens , we say that _ arw fixates_. when this does not happen , we say that _ arw is active_. this case is expected to occur when @xmath17 is large , since active particles will repetitively jump on top of other particles , `` waking up '' the ones that had turned into type @xmath18 .    in a seminal paper , rolla and sidoravicius",
    "@xcite showed that this process satisfies a 0 - 1 law ( i.e. , the process is either active or fixated with probability 1 ) and is monotone with respect to @xmath17 .",
    "this gives the existence of a critical value @xmath19 such that arw is active almost surely for all @xmath20 , and fixates almost surely for all @xmath21 .",
    "though  @xcite , as well as almost all existing works , are restricted to the case of @xmath10 being @xmath2 , the above properties hold for any vertex - transitive graph . throughout this paper",
    "we always consider that @xmath10 is an infinite graph that is locally finite and vertex transitive , which ensures the existence of @xmath0 .",
    "our definition above implies that @xmath22 since particles are initially distributed as bernoulli random variables .",
    "however , even if we replace this with any product measure of density @xmath23 , it is intuitive that @xmath22 , since at most one particle can fall asleep at any given vertex .",
    "this has been established for a large class of graphs  @xcite . a fundamental and very important problem in activated random walks",
    "@xcite is whether @xmath24 this problem is widely open , and both sides of the above question ( i.e. , whether @xmath1 or @xmath4 ) turned out to be very challenging .",
    "in fact , even showing that @xmath4 for _ some _ @xmath13 is already quite difficult , and is only known to hold on @xmath5 , thanks to a very recent paper by basu , ganguly and hoffman  @xcite .",
    "our first theorem establishes this result in all _ transient _ graphs , which includes @xmath2 , @xmath25 .",
    "[ theo : transient_graphs ] for any vertex - transitive , transient graph , it holds that @xmath26 in particular , we have that @xmath27 .    regarding the question of whether @xmath4 for _ all _ @xmath13 , this has until now not been established for any single graph . a positive answer to this question",
    "has only been given for a variant of arw where particles move according to _ biased _ random walks on @xmath2 ; see taggi  @xcite .",
    "rolla and tournier  @xcite further extended this result by proving that , for biased arw on @xmath2 , we have @xmath28 as @xmath7 . in our second theorem",
    "we give a positive answer to this question for the original , unbiased model , and for all graphs where simple random walk has positive speed .",
    "if @xmath29 is a random walk on @xmath10 starting from a vertex @xmath30 , and @xmath31 denotes the distance between @xmath32 and @xmath30 , we say that a random walk on @xmath10 has _ positive speed _ if @xmath33 almost surely .",
    "this includes , for example , all non - amenable graphs that are vertex transitive .",
    "[ theo : activity_non_amenable ] for any vertex - transitive graph such that a random walk on it has positive speed @xmath34 , it holds that @xmath35 in particular , we obtain that @xmath36 , where @xmath37 is the probability that a random walk does not return to the origin .",
    "we prove the theorem above by providing general sufficient conditions for arw to be active , which as a consequence establishes an upper bound on @xmath0 .",
    "we believe this result is of independent interest and state it in theorem  [ theo : suffcondnonamenable ] . for the other side of   ( i.e. , whether @xmath1 ) , there has been a bit more progress .",
    "it has been settled when @xmath10 is @xmath2 thanks to the seminal work of rolla and sidoravicius  @xcite for @xmath38 , and an elaborate proof of sidoravicius and teixeira  @xcite for @xmath39 .",
    "our next theorem establishes that @xmath1 in any _ amenable _ graph , which includes @xmath2 , @xmath40 .",
    "we remark that not only our result generalizes the ones in  @xcite , but also provides the additional information that @xmath41 as @xmath42 .",
    "in addition , our proof is quite short in comparison to  @xcite .",
    "[ theo : mu_c_positive_amenable ] for any vertex - transitive , amenable graph , we have @xmath43 in particular , we have @xmath44 .",
    "our lower bound is sharp , in the sense that there are no better lower bounds for @xmath0 which are just a function of @xmath16 and hold for any amenable graph and any jump distribution .",
    "indeed , @xmath0 is known to be equal to @xmath45 on @xmath5 with totally asymmetric jumps @xcite .",
    "our theorems  [ theo : transient_graphs ] and  [ theo : mu_c_positive_amenable ] hold in more generality , for any distribution of the initial location of the particles and for any jump distribution ( biased or unbiased ) which is translation invariant and has finite support .",
    "note that theorems  [ theo : activity_non_amenable ] and  [ theo : mu_c_positive_amenable ] provide a final answer to   in graphs that are amenable but for which a random walk has positive speed ; for example , the so - called lamplighter graphs . in our final result , we also establish   for the case of regular trees .",
    "[ theo : tree ] when @xmath10 is a regular tree , we have @xmath46 in addition , we have @xmath6 as @xmath7 .",
    "we now give a brief description of our proof techniques .",
    "the traditional strategy to establish bounds on @xmath0 is to consider a ball @xmath47 of some large radius @xmath48 , centered at a given vertex @xmath49 , and _ stabilize _ arw inside this ball .",
    "this consists of letting the process run ( i.e. , particles move and fall asleep ) inside @xmath50 , deleting every particle that exits @xmath50 .",
    "this procedure will eventually end . at this point , each vertex of @xmath50 will either contain a sleeping particle or contain no particle ; such a vertex is usually called _ stable_.",
    "it was shown in  @xcite that , roughly speaking , arw is active if and only if the number of times particles visit @xmath30 during the stabilization of @xmath50 goes to infinity with @xmath48 . in this paper",
    ", we introduce a new point of view on such stabilization procedure by focusing on some vertex @xmath51 , and carrying out what we call a _ weak stabilization of @xmath50 with respect to @xmath52_. intuitively , in the weak stabilization we perform the steps of a stabilization procedure until each vertex of @xmath53 is stable while @xmath52 is allowed to be either stable or host exactly one active particle .",
    "this strategy allows us to estimate the probability that , at the end of a stabilization procedure , @xmath52 contains a sleeping particle . in principle",
    ", the density of sleeping particles should correspond to @xmath0 , and it is by controling such probability that we obtain estimates on @xmath0 .",
    "we believe that our weak stabilization procedure and our point of view of estimating the density of sleeping particles have the potential to foster even more substantial progress in this model .",
    "in particular , we believe our estimate on the probability that a sleeping particle ends at some vertex is of independent interest , and we state it in theorem  [ theo : boundsq ] .",
    "the remaining of the paper is organized as follows . in section  [ sec : diaconis ] , we describe the so - called diaconis - fulton representation of arw and its properties , which we employ in all of our proofs .",
    "then , in section  [ sec : weak_stabilization ] , we introduce the weak stabilization procedure and estimate the probability of having a sleeping particle at a given vertex ( theorem  [ theo : boundsq ] ) .",
    "next we turn to the proofs of our main results : we prove theorem  [ theo : transient_graphs ] in section  [ sec : proof_of_theorem_transient_graphs ] , theorem  [ theo : activity_non_amenable ] in section  [ sec : proof_of_theorem_activity_non_amenable ] , theorem [ theo : mu_c_positive_amenable ] in section [ sec : proof_of_theorem_mu_c_positive_amenable ] , and theorem  [ theo : tree ] in section  [ sec : proof_of_theo_tree ] .",
    "in this section we describe the diaconis - fulton graphical representation for the dynamics of arw , following  @xcite . for a graph @xmath9 , the state of configurations is @xmath54 , where a vertex being in state @xmath55 denotes that the vertex has one sleeping particle",
    ", while being in state @xmath56 denotes that the vertex contains @xmath57 active particles .",
    "we employ the following order on the states of a vertex : @xmath58 . in a configuration @xmath59 , a site @xmath60",
    "is called _ stable _ if @xmath61 , and it is called _ unstable _ if @xmath62 .",
    "we fix an array of _ instructions _",
    "@xmath63 , where @xmath64 can either be of the form @xmath65 or @xmath66 .",
    "we let @xmath65 with @xmath67 denote the instruction that a particle from @xmath30 jumps to vertex @xmath52 , and @xmath66 denote the instruction that a particle from @xmath30 falls asleep .",
    "henceforth we call @xmath65 a _ jump instruction _ and @xmath66 a _ sleep instruction_. therefore , given any configuration @xmath68 , performing the instruction @xmath65 in @xmath68 yields another configuration @xmath69 such that @xmath70 for all @xmath71 , @xmath72 , and @xmath73 .",
    "we use the convention that @xmath74 . similarly , performing the instruction @xmath66 to @xmath68 yields a configuration @xmath69 such that @xmath70 for all @xmath75 , and if @xmath76 we have @xmath77 , otherwise @xmath78 .    let @xmath79 count the number of instructions used at each site .",
    "we say that we _ use _ an instruction at @xmath30 ( or that we _",
    "@xmath30 ) when we act on the current particle configuration @xmath68 through the operator @xmath80 , which is defined as , @xmath81 the operation @xmath80 is _ legal _ for @xmath68 if @xmath30 is unstable in @xmath68 , in which case we set @xmath82 , otherwise it is _ illegal _ and we set @xmath83 .    _",
    "* properties . *",
    "_ we now describe the properties of this representation .",
    "later we discuss how they are related to the the stochastic dynamics of arw . for a sequence of vertices",
    "@xmath84 , we write @xmath85 and we say that @xmath86 is _ legal _ for @xmath68 if @xmath87 is legal for @xmath88 for all @xmath89 .",
    "let @xmath90 be given by , @xmath91 the number of times the site @xmath30 appears in @xmath34 .",
    "we write @xmath92 if @xmath93 .",
    "analogously we write @xmath94 if @xmath95 for all @xmath60 .",
    "we also write @xmath96 if @xmath97 and @xmath98 .",
    "let @xmath99 be two configurations , @xmath30 be a vertex in @xmath100 and @xmath101 be a realization of the array of instructions .",
    "let @xmath102 be a finite subset of @xmath100 .",
    "a configuration @xmath68 is said to be _ stable _ in @xmath102 if all the sites @xmath103 are stable .",
    "we say that @xmath34 is contained in @xmath102 if all its elements are in @xmath102 , and we say that @xmath34 _ stabilizes _ @xmath68 in @xmath102 if every @xmath103 is stable in @xmath104 .",
    "the following lemmas give fundamental properties of the diaconis - fulton representation .",
    "for the proof , please refer to @xcite .",
    "[ prop : lemma2 ] given any @xmath105 , if @xmath34 and @xmath106 are both legal sequences for @xmath68 that are contained in @xmath102 and stabilize @xmath68 in @xmath102 , then @xmath107 .",
    "in particular , @xmath108 .    for any subset @xmath105 , any @xmath109 , any particle configuration @xmath68 , and any array of instructions @xmath101 , we denote by @xmath110 the number of times that @xmath30 is toppled in the stabilization of @xmath102 starting from configuration @xmath68 and using the instructions in @xmath101 . note that by lemma  [ prop : lemma2 ] , we have that @xmath111 is well defined .    [",
    "prop : lemma3 ] if @xmath112 and @xmath113 , then @xmath114 .    by monotonicity , given any growing sequence of subsets @xmath115 such that @xmath116 , the limit @xmath117 exists and does not depend on the particular sequence @xmath118 .",
    "we now introduce a probability measure on the space of instructions and of particle configurations .",
    "we denote by @xmath119 the probability measure according to which , for any @xmath60 and any @xmath120 , @xmath121 and @xmath122 for any @xmath123 neighboring @xmath30 , where @xmath124 is the degree of each vertex of @xmath10 and the @xmath64 are independent across diffent values of @xmath30 or @xmath125 .",
    "finally we denote by @xmath126 the joint law of @xmath68 and @xmath101 , where @xmath127 is a distribution on @xmath128 giving the law of @xmath68 .",
    "let @xmath129 denotes the probability measure induced by the arw process when the initial distribution of particles is given by @xmath127 .",
    "we shall often omit the dependence on @xmath127 by writing @xmath130 and @xmath131 instead of @xmath132 and @xmath129 .",
    "the following lemma relates the dynamics of arw to the stability property of the representation .",
    "[ prop : lemma4 ] let @xmath127 be a translation - invariant , ergodic distribution with finite density .",
    "let @xmath49 be any given vertex of @xmath10",
    ". then @xmath133 .    roughly speaking",
    ", the next lemma gives that removing an instruction sleep , can not decrease the number of instructions used at a given vertex for stabilization . in order to state the lemma , consider an additional instruction @xmath134 besides @xmath65 and @xmath66 .",
    "the effect of @xmath134 is to leave the configuration unchanged ; i.e. , @xmath135 .",
    "then given two arrays @xmath136 and @xmath137 , we write @xmath138 if for every @xmath60 and @xmath120 , we either have @xmath139 or we have @xmath140 and @xmath141 .    [ prop : lemma5 ] let @xmath101 and @xmath142 be two arrays of instructions such that @xmath138 . then , for any finite subset @xmath143 and configuration @xmath144 , we have @xmath145    when we average over @xmath68 and @xmath101 using the measure @xmath130 , we will simply write @xmath146 instead of @xmath147 .",
    "in this section we introduce our method of weak stabilization and use it to derive upper and lower bounds on the probability that a given vertex contains an @xmath18-particle at the end of the stabilization of some set .",
    "this is the content of theorem [ theo : boundsq ] below , which will play a fundamental role in the proofs of our main results . for any finite set @xmath148 and any vertex @xmath60 , let @xmath149 be the probability that there is one @xmath18-particle at @xmath30 at the end of the stabilization of @xmath150 .",
    "[ theo : boundsq ] consider arw on a vertex - transitive graph @xmath151 .",
    "then , for any @xmath152 and any @xmath153 , we have @xmath154 moreover , if @xmath10 is a transient graph , then @xmath155 where @xmath156 is the expected number of times a simple random walk on @xmath10 starting from @xmath30 visits @xmath30 .    in the proof of the theorem above we will employ the notion of _ weakly stable configurations _ and _ weak stabilization_.    [ def : wstable ] we say that a configuration @xmath68 is _ weakly stable _ in a subset @xmath152 with respect to a vertex @xmath153 if @xmath157 and @xmath158 for all @xmath159 . in words",
    ", this means that all vertices in @xmath160 are stable , and @xmath30 is either stable or hosts at most one active particle . for conciseness , we just write that @xmath68 is weakly stable for @xmath161 .    given a subset @xmath152 and a vertex @xmath153 , the _ weak stabilization _ of @xmath162 is a sequence of topplings of unstable sites of @xmath163 and of topplings of @xmath30 whenever @xmath30 has at least two active particles , until a weakly stable configuration for @xmath162 is obtained .",
    "the order of the topplings of a weak stabilization can be arbitrary .",
    "the main idea of the proof of theorem  [ theo : boundsq ] is to perform a certain sequence of topplings to stabilize @xmath150 that will allow us to control whether there is a sleeping particle at @xmath30 . from the abelian property ( lemma  [ prop : lemma2 ] ) , in order to stabilize @xmath150 we can perform the topplings in any order we want .",
    "we will stabilize @xmath150 by first weakly stabilizing @xmath162 , which gives a weakly stable configuration @xmath164 for @xmath162 .",
    "then either @xmath164 is stable for @xmath150 , in which case we finish the stabilization procedure , or @xmath165 . in the latter case",
    ", we topple @xmath30 and weakly stabilize @xmath162 again , obtaining a configuration @xmath166 .",
    "we repeat the above procedure until we obtain a stable configuration for @xmath150 , concluding the stabilization",
    ". we will refer to this stabilization procedure as a _ stabilization via weak stabilization_.      note that , in a stabilization via weak stabilization , after each weakly stable configuration @xmath167 we obtain , if @xmath167 is not stable , then with probability @xmath168 we encounter an instruction sleep at @xmath30 , transforming @xmath167 into a stable configuration . with this",
    "we can derive the lower bound   in theorem  [ theo : boundsq ] .",
    "we apply the stabilization of @xmath150 via weak stabilizations of @xmath162 .",
    "let @xmath164 be the first weakly stable configuration for @xmath162 that is obtained in this procedure . as discussed above ,",
    "if @xmath164 is not stable for @xmath150 , then we obtain a stable configuration for @xmath150 if the next instruction at @xmath30 is sleep .",
    "hence , @xmath169 the proof is concluded by noting that the event that @xmath164 is not stable for @xmath150 is equivalent to the event that @xmath30 is toppled at least once .",
    "this is true because of the following .",
    "if @xmath164 is not stable for @xmath150 , then @xmath165 which implies that @xmath30 will be toppled at least once . in the other direction ,",
    "if @xmath30 is toppled at least once , then this happens either before @xmath164 is obtained or because @xmath165 .",
    "but if @xmath30 was toppled before @xmath164 was obtained , this must have happened at a time when @xmath30 had at least two particles . from this time",
    "onwards , @xmath30 will have at least one active particle until @xmath164 is obtained .",
    "hence , @xmath164 is not stable .",
    "our proof of the upper bound   for @xmath170 is a bit longer than the proof of the lower bound .",
    "we will perform the stabilization of @xmath150 via weak stabilization as described above .",
    "the idea is to estimate the probability that , for any @xmath171 , we obtain a stable configuration for @xmath150 after the @xmath57th weak stabilization of @xmath162 .",
    "we do this by relating this probability to the probability that a random walk starting from @xmath30 never returns to @xmath30 .",
    "it is at this step that we use that @xmath10 is transient .",
    "after the @xmath57th time we perform the weak stabilization of @xmath162 , we let @xmath172 be the number of instructions that have been used at @xmath173 up to this time , and denote by @xmath167 the configuration we then obtained . also , let @xmath174 denote the number of weak stabilizations of @xmath162 we perform until a stable configuration in @xmath150 is obtained .",
    "note that @xmath175 is either a stable configuration , which implies that @xmath176 , or @xmath175 is weakly stable for @xmath162 with @xmath177 and the next instruction used at @xmath30 was a sleep instruction , thereby concluding the stabilization of @xmath150 . for consistency , for any @xmath178 , let @xmath167 be the stable configuration obtained after stabilizing @xmath150 and , for any @xmath173 , define @xmath179 , which is the total number of instructions used at @xmath52 for the complete stabilization of @xmath150 . by the abelian property ,",
    "the quantities @xmath174 and @xmath180 are all well defined .",
    "below we state a lemma , and then show how this lemma implies the upper bound on @xmath170 .",
    "[ lem : expt ] given any vertex - transitive , transient graph @xmath9 , any subset @xmath152 and any vertex @xmath153 , and letting @xmath156 be the expected number of visits to @xmath30 of a random walk on @xmath10 starting from @xmath30 , we have @xmath181 \\leq c_g ( 1 + \\lambda)+1,\\ ] ] where the expectation is with respect to the measure @xmath130 .    for simplicity , write @xmath182 for the configuration obtained after complete stabilization of @xmath150",
    ". then the following expression holds , as the sum is over disjoint events , @xmath183 now observe that @xmath184 the previous inequality follows from independence of instructions : the event in the left - hand side implies that after each weak stabilization we have an active particle at @xmath30 , and moreover we encounter a jump instruction at @xmath30 after each of the first @xmath185 weak stabilizations , and a sleep instruction at @xmath30 after the last weak stabilization .",
    "hence , for any @xmath186 we can write @xmath187}{h } ,      \\end{aligned}\\ ] ] where in the last step we used markov s inequality . from lemma  [ lem : expt ]",
    ", we obtain @xmath188 setting @xmath189 , which optimizes the above bound , we get @xmath190 note that the calculations above rely on the value of @xmath191 being at least @xmath12 . on the other hand , when our choice of @xmath191 is smaller than @xmath12 , which implies that @xmath192 , the right - hand side above is at least @xmath193 , where in the last step we use that @xmath156 is at least @xmath12 . so our bound for @xmath170 is anyway correct .      in this section",
    "we establish the upper bound on @xmath194 $ ] from lemma  [ lem : expt ] .",
    "let @xmath49 be a given vertex .",
    "let @xmath195 denote the expectation @xmath196 conditioned on the initial particle configuration having one active particle at @xmath30 , and @xmath197 denote the expectation conditioned on the initial particle configuration having no particle at @xmath30 .",
    "[ lem : m ] for any subset @xmath152 and vertex @xmath153 we have @xmath198           \\leq   e^x[m_{(x , k)}^1(x)].\\ ] ]    consider an initial particle configuration @xmath68 having no particle at @xmath30 , and the particle configuration @xmath199 obtained from @xmath68 by adding an active particle at @xmath30 .",
    "we will show a stronger result saying that , by using the same instruction array for both @xmath68 and @xmath199 , @xmath200 starting from @xmath68 is at most @xmath201 starting from @xmath199 .",
    "we stabilize @xmath150 starting from @xmath68 via weak stabilization of @xmath162 , and do the same topplings for @xmath199 .",
    "since @xmath68 and @xmath199 differ only at @xmath30 , until the first weak stabilization of @xmath68 is concluded , the same topplings can be carried out in @xmath199 as well . at this point , if there is a particle at @xmath30 in @xmath68 , there are two particles at @xmath30 in @xmath199",
    ". then if the next instruction at @xmath30 is a jump instruction , we can perform the same toppling in @xmath68 and @xmath199 , and we repeat this procedure until another weakly stable configuration is obtained in @xmath68 . on the other hand , if the next instruction at @xmath30 is a sleep instruction , then the stabilization of @xmath68 is concluded , but the weak stabilization of @xmath199 continues . finally , if there is no particle at @xmath30 at the end of a weak stabilization of @xmath68 , then the stabilization of @xmath68 and the weak stabilization of @xmath199 are concluded .",
    "therefore , under this coupling , the weak stabilization of @xmath68 concludes no later than that of @xmath199 , concluding the proof .",
    "the crucial observation is the following .",
    "assume that @xmath202 .",
    "after each of the first @xmath203 weak stabilizations of @xmath162 , we must perform at least one toppling at @xmath30 , and this toppling happens after the first weak stabilization of @xmath162 , so it is not counted in @xmath204 .",
    "this gives that @xmath205 the above bound also holds when @xmath206 since @xmath207 .",
    "then the lemma follows by claiming that @xmath208           \\leq   e[m_{(x , k)}^1(x ) ] + c_g ( 1 + \\lambda ) .",
    "\\end{aligned}\\ ] ] first we prove   with @xmath196 replaced with @xmath195 .",
    "denote the particle that starts at @xmath30 by @xmath209 . from lemma  [ prop : lemma5 ]",
    ", we have that if we ignore some sleep instructions during the stabilization of @xmath150 ( i.e. , we replace some sleep instructions in the instruction array @xmath101 with neutral instructions @xmath134 ) , the value of @xmath200 can only increase .",
    "therefore , we can bound @xmath200 from above by carrying out a two - step stabilization procedure . in the first step ,",
    "we move @xmath209 ignoring any instruction sleep seen until @xmath209 exits @xmath150 .",
    "then , in the second step , we stabilize @xmath150 in an arbitrary manner .",
    "the expected number of topplings at @xmath30 in the first step is @xmath210 , as every time the particle visits @xmath30 , we find a geometrically distributed number of sleep instructions ( which are replaced by instructions @xmath134 ) before the particle jumps out of @xmath30 .",
    "the expected number of sleep instructions found at @xmath30 after every visit is @xmath211 . with this",
    "we obtain @xmath212           \\leq   c_g ( 1 + \\lambda ) + e_x[m_{k}(x ) ]          \\leq   c_g ( 1 + \\lambda ) + e^x[m_{(x , k)}^1(x)],\\ ] ] where the last step follows from lemma  [ lem : m ] .",
    "now we establish   with @xmath196 replaced with @xmath197 . using lemma  [ lem : m ] , we have @xmath198           \\leq   e^x[m^1_{(x , k)}(x)].\\ ] ] now for the term @xmath213 $ ] , let @xmath209 be the particle that starts at @xmath30 .",
    "we carry out the weak stabilization of @xmath162 until either it ends or @xmath30 becomes with two active particles .",
    "if the end of the weak stabilization of @xmath162 happens first , the same topplings would make the weak stabilization of @xmath162 under @xmath197 end .",
    "this would give that , under this event , @xmath213 $ ] and @xmath214 $ ] are equal . if @xmath30 ever becomes with two active particles , then at this moment we only topple the sites containing @xmath209 , ignoring all sleep instructions and moving @xmath209 until it exits @xmath150 .",
    "after that we carry out all topplings necessary to conclude the weak stabilization of @xmath162 .",
    "note that , with the exception of all topplings carried out to move @xmath209 out of @xmath150 , all the other topplings are valid and would weakly stabilize @xmath162 under @xmath197 .",
    "therefore , we have @xmath213\\leq c_g ( 1 + \\lambda ) + e_x[m^1_{(x , k)}(x)]$ ] since @xmath210 is the number of topplings at @xmath30 performed during the motion of @xmath209 .",
    "let @xmath48 be a positive integer , and let @xmath49 be a fixed vertex .",
    "let @xmath50 be the ball of radius @xmath48 centered at @xmath30 .",
    "for any @xmath215 , let @xmath216 be the probability that a random walk starting from @xmath52 visits @xmath30 before exiting @xmath50 .",
    "[ lem : psuminfty ] for any vertex - transitive , transient graph , we have @xmath217    by symmetry , @xmath216 is equal to the probability that a random walk starting from @xmath30 visits @xmath52 before returning to @xmath30 and before exiting @xmath50 .",
    "therefore , @xmath218 is the expected number of vertices visited by a random walk starting from @xmath30 before returning to @xmath30 and before exiting @xmath50 . in a transient graph",
    ", this random walk has a positive probability of never returning to @xmath30 , in which case it visits at least @xmath48 vertices .",
    "this establishes the lemma",
    ".    we will stabilize @xmath50 and show that , for any fixed @xmath23 there exists a fixed @xmath13 small enough such that the number of topplings at @xmath30 goes to infinity with @xmath48 .",
    "this implies that @xmath6 as @xmath7 .",
    "let @xmath68 be the initial particle configuration inside @xmath50 and let @xmath219 be the particle configuration inside @xmath50 obtained after stabilization of @xmath50 .",
    "then @xmath219 only contains sleeping particles . for each particle of @xmath219",
    ", we start a so - called _ ghost particle _ which performs independent simple random walk steps until exiting @xmath50 .",
    "let @xmath220 be the number of visits to @xmath30 by particles or ghosts , and let @xmath221 be the number of times that @xmath30 was visited by ghosts .",
    "so @xmath222 is the number of topplings at @xmath30 during the stabilization of @xmath50 .",
    "let @xmath223 be the number of visits to @xmath30 of a random walk that starts from @xmath30 and is killed upon exiting @xmath50 . for simplicity ,",
    "let @xmath224 , the upper bound in the second part of theorem  [ theo : boundsq ] . hence , @xmath225         = \\sum\\nolimits_{y\\in b_l}{\\left(\\mu - q(y , b_l)\\right)}p_y{e}[n_0 ]         \\geq { \\left(\\mu - q\\right)}{e}[n_0]\\sum\\nolimits_{y\\in b_l}p_y .",
    "\\label{eq : wr2nd}\\ ] ] note that @xmath223 is a geometric random variable and , for any transient graph , it holds that @xmath226 < \\infty$ ] as @xmath227 .",
    "also , lemma  [ lem : psuminfty ] gives that for any @xmath228 , @xmath229\\to\\infty$ ] as @xmath227 .",
    "we want to show that @xmath230}{3}\\right ) } \\leq c<1 ,         \\label{eq : goal}\\ ] ] for some constant @xmath231 independent of @xmath48 .",
    "this implies that @xmath232 . by the 0 - 1 law",
    ", we then obtain that @xmath233 goes to infinity almost surely , concluding the proof .    in order to establish  , note that @xmath234}{3}\\right)}\\nonumber\\\\        & = { p}{\\left ( w_l   - e [ { w}_l]+\\frac{e [ { w}_l - { r}_l]}{3}\\leq { r}_l - e [ { r}_l ] -\\frac{e [ { w}_l - { r}_l]}{3}\\right ) } \\nonumber\\\\        & \\leq { p}{\\left(\\left| w_l   - e [ { w}_l]\\right|\\geq \\frac{e [ { w}_l - { r}_l]}{3}\\right)}+ { p}{\\left(\\left|{r}_l - e [ { r}_l]\\right| \\geq \\frac{e [ { w}_l - { r}_l]}{3}\\right)}.      \\end{aligned}\\ ] ] we now use chebyshev s inequality , which gives @xmath235}{3}\\right ) } \\ , & \\leq           9 \\frac{\\mathrm{var}({w}_l)}{e^2[{w}_l-{r}_l ] } + 9   \\frac{\\mathrm{var}(r_l)}{e^2[{w}_l-{r}_l]}.         \\end{split}\\ ] ] we claim that @xmath236}=0 ,        \\label{eq : wlim}\\ ] ] and that for any @xmath23 and any @xmath237 , there exists @xmath16 small enough such that @xmath238}\\leq\\frac{q}{(\\mu - q)^2}.        \\label{eq : rlim}\\ ] ] note that the above bound goes to @xmath239 as @xmath240 .",
    "putting   and   into establishes , which concludes the proof of the theorem .",
    "it remains to establish   and  . for",
    "any @xmath241 independent random variables @xmath242 note that @xmath243{e}[b^2]{e}[c^2 ] - { e}^2 [ a]{e}^2[b]{e}^2[c ] .",
    "\\label{eq : var}\\ ] ] then using independence we can write @xmath244 , where @xmath245 is the indicator that a random walk starting from @xmath52 visits @xmath30 before exiting @xmath50 ; hence , @xmath246 $ ] . now applying  , we obtain @xmath247 - \\mu^2 p_y^2 { e}^2[n_0]\\right)}\\\\        & = \\mu { e}[n_0 ^ 2]\\sum_{y\\in b_l}p_y{\\left(1 - \\mu p_y\\frac{e^2[n_0]}{e[n_0 ^ 2]}\\right ) }        \\leq \\mu{e}[n_0 ^ 2]\\sum_{y\\in b_l}p_y .",
    "\\end{aligned}\\ ] ] therefore , using  , @xmath248}{(\\mu - q)^2{e}^2[n_0]\\sum_{y\\in b_l}p_y }        \\to 0,\\ ] ] since @xmath249 by lemma  [ lem : psuminfty ] , while all the other terms are bounded away from both infinity and zero .",
    "now we turn to  . for @xmath215 ,",
    "write @xmath250=q(y , b_l ) ,",
    "\\quad\\text{and}\\quad        s_{x , y } = { e}[s_xs_y].\\ ] ] using this notation , we have @xmath251 . since @xmath252 - { e}^2[r_l]$ ] ,",
    "we write @xmath253 } + \\sum_{y , z \\in b_l , y\\neq z } { e}{\\left(s_ys_zi_yi_z n_0 n_0'\\right)},\\ ] ] where @xmath254 are independent and identically distributed",
    ". using independence , we have @xmath255 + \\sum_{y , z \\in b_l , y\\neq z } s_{y , z } p_y p_z { e}^2[n_0].\\ ] ] hence , @xmath256 + \\sum_{y , z \\in b_l , y\\neq z } s_{y , z } p_y p_z { e}^2[n_0 ] - { \\left(\\sum_{y\\in b_l}s_yp_y { e}[n_0]\\right)}^2\\\\        & = \\sum_{y\\in b_l } { \\left(s_y p_y{e}[n_0 ^ 2 ] -s_y^2p_y^2{e}^2[n_0]\\right)}+ \\sum_{y , z \\in b_l , y\\neq z } ( s_{y , z}-s_ys_z ) p_y p_z { e}^2[n_0]\\\\        & \\leq \\sum_{y\\in b_l } s_y p_y{e}[n_0 ^ 2]+ \\sum_{y , z \\in b_l , y\\neq z } ( s_{y}-s_ys_z ) p_y p_z { e}^2[n_0]\\\\        & \\leq q{e}[n_0 ^ 2]\\sum_{y\\in b_l } p_y+ q { e}^2[n_0]\\sum_{y , z \\in b_l , y\\neq z }   p_y p_z .",
    "\\end{aligned}\\ ] ] finally , we obtain @xmath257\\sum_{y\\in b_l } p_y+ q{e}^2[n_0]\\sum_{y , z \\in",
    "b_l , y\\neq z }   p_y p_z}{(\\mu - q)^2{e}^2[n_0 ] { \\left(\\sum_{y\\in b_l } p_y\\right)}^2}\\\\        & \\leq \\frac{q{e}[n_0 ^ 2]}{(\\mu - q)^2{e}^2[n_0 ] \\sum_{y\\in b_l } p_y }           + \\frac{q}{(\\mu - q)^2}.     \\end{aligned}\\ ] ] note that for any fixed @xmath13 the first fraction goes to @xmath239 with @xmath48 since @xmath258 and all the other terms are bounded away from zero and infinity .",
    "the second term can be made arbitrarily small since @xmath259 as @xmath7 .",
    "in particular , if @xmath260 , the second term is smaller than @xmath12 , so arw is active almost surely .",
    "this establishes  .",
    "we prove theorem  [ theo : activity_non_amenable ] by first establishing general sufficient conditions that give @xmath4 ( theorem  [ theo : suffcondnonamenable ] below ) , and then showing that graphs of positive speed for random walks satisfy those conditions .",
    "let @xmath49 be a fixed vertex of @xmath10 , which we refer to as the _ origin_. let @xmath261 denote a simple random walk on @xmath10 starting from the origin , and let @xmath262 be independent random variables such that , for any @xmath263 , we have @xmath264 with probability @xmath265 and @xmath266 with probability @xmath168 .",
    "let @xmath50 be the ball of radius @xmath48 centered at @xmath30 , and let @xmath267 be the vertices at distance @xmath48 from @xmath30 . for any set @xmath105 ,",
    "let @xmath268 be the first hitting time of the random walk to @xmath102 and @xmath269 be the first return time of the random walk to @xmath102 .",
    "finally , let @xmath270 we can interpret the above quantity by considering that the random walk is `` killed '' outside @xmath102 at times @xmath271 when @xmath266 ; using this , @xmath272 gives the time the random walk is killed .",
    "here we consider that the initial particle configuration , denoted by @xmath68 , is given by any product measure on @xmath273 with density @xmath274=\\mu$ ] .",
    "let @xmath275 .",
    "[ theo : suffcondnonamenable ] given positive integers @xmath276 , set @xmath277 and let @xmath278 be the number of visits of @xmath279 to @xmath280 before @xmath279 enters @xmath281 or returns to the origin .",
    "let @xmath282 be the number of visits of @xmath279 to @xmath280 before @xmath279 enters @xmath281 , returns to the origin or is `` killed '' outside @xmath283 .",
    "let also @xmath284 and @xmath285 .",
    "if given @xmath17 and @xmath16 we have @xmath286}{e[m_l ] } > \\frac{\\nu_0(\\mu)}{\\mu+\\nu_0(\\mu ) }        \\quad\\text{and}\\quad        \\lim\\limits_{l \\rightarrow \\infty }    e \\ , [ \\tilde{m}_l ] = \\infty ,         \\label{eq : suffcond}\\ ] ] then arw is active almost surely .",
    "we will define a stabilization procedure for @xmath287 and show that the number of topplings at the origin goes to infinity with @xmath48 .",
    "we will do the stabilization by moving particles in levels , starting from @xmath288 until @xmath289 . at level @xmath290",
    ", we move each particle that is currently located in @xmath280 until one of the following events occur :    1 .",
    "the particle reaches the origin , 2 .",
    "the particle reaches an empty site in @xmath283 , 3 .",
    "[ it : sleep ] the particle `` uses '' an instruction `` sleep '' in @xmath291 , 4 .",
    "the particle reaches @xmath281 .    after moving all particles at level @xmath290",
    ", we repeat the procedure above for particles located at level @xmath292 .",
    "note that at level @xmath292 we may find particles that were moved at level @xmath293 but which stopped at some empty vertex @xmath294 with @xmath295 .",
    "let @xmath296 be the total number of particles that stop at the origin , and note that @xmath297 stochastically dominates @xmath296 .",
    "our goal is to prove that there exists a constant @xmath237 independent of @xmath48 such that @xmath298 with positive probability , which implies that arw is active by the 0 - 1 law .    in order to estimate @xmath296",
    ", we introduce ghost particles as in section  [ sec : proof_of_theorem_transient_graphs ] . at level",
    "n , we create a ghost particle every time we move a particle currently at some vertex @xmath299 for which @xmath295 and which stops at some @xmath300 because of the event  [ it : sleep ] . the ghost particle is then created at @xmath52 and , from this moment onwards , performs independent simple random walk steps until reaching @xmath301 , when it then stops .",
    "let @xmath220 be the number of particles and ghosts visiting the origin , and let @xmath221 be the number of ghosts visiting the origin .",
    "then , @xmath302 we now estimate the terms @xmath220 and @xmath221 separately . for any @xmath120 and @xmath303 , let @xmath304 be an independent random walk on @xmath100 starting from @xmath209 and @xmath305",
    "be an infinite sequence of i.i.d .",
    "random variables such that @xmath306 with probability @xmath307 and @xmath308 with probability @xmath309 .",
    "let @xmath310 be the first time the random walk @xmath311 visits the set @xmath312 and let us write simply @xmath313 if @xmath314 .",
    "then , @xmath315 where @xmath316 , @xmath317 for any @xmath318 such that @xmath319 , and @xmath320 denotes the distance between @xmath209 and @xmath30 .",
    "the crucial observation for the estimation of @xmath221 is that particles produce ghosts only when they are moved from sites that are empty with respect to @xmath68 , and each such site can be associated to the creation of at most one ghost .",
    "hence , if from every site @xmath321 with @xmath295 we start a _ sleeping random walk _",
    "@xmath322 and we count @xmath323 , the number of them which hit the origin before entering @xmath281 and such that @xmath266 somewhere in @xmath324 , we conclude that @xmath325 hence , we write , @xmath326 where for clarity we denote by @xmath327 for some @xmath328 such that @xmath329 the complement of @xmath330 . as the initial particle configuration is distributed according to a product measure , from ( [ eq : wl ] ) and ( [ eq : rl ] ) it follows that , @xmath331 - e[\\tilde{r}_l ]   & =         \\sum\\limits_{{n = 1 } } ^l    \\sum\\limits_{\\ , z \\in a_n \\ ,   }     { \\left [ \\mu\\ , \\cdot \\ ,   p\\left ( \\mathcal{a}^{(z,0 ) } \\cap { \\mathcal{b}}^{(z,0 ) }        \\right ) \\ , - \\ ,   \\nu_0(\\mu ) \\ , \\cdot \\ ,   p \\left ( \\mathcal{a}^{(z,0 ) } \\cap \\overline{\\mathcal{b}}^{(z,0 ) } \\right)\\right ] } \\\\        & = \\sum\\limits_{{n = 1 } } ^l    \\sum\\limits_{\\ , z \\in",
    "a_n \\ ,   }     { \\left [   ( \\mu+\\nu_0(\\mu))p\\left ( \\mathcal{a}^{(z,0 ) } \\cap { \\mathcal{b}}^{(z,0 ) }        \\right ) \\ , - \\ ,   \\nu_0(\\mu ) \\ , \\cdot \\ ,   p \\left ( \\mathcal{a}^{(z,0 ) } \\right)\\right]}.        \\end{split}\\ ] ] to simplify the notation , we will henceforth drop the @xmath239 s from the superscript in the terms above .",
    "when analyzing the term @xmath332 , consider the last time @xmath271 that the random walk starting from @xmath299 visits @xmath280 before reaching the origin .",
    "we will denote by @xmath52 the vertex of @xmath280 where the random walk is in its last visit to @xmath280 .",
    "hence , decomposing in @xmath52 and @xmath271 , we have @xmath333 where @xmath334 , @xmath335 for any @xmath336 such that @xmath337 , @xmath338 , @xmath339 is the first return time of the random walk starting from @xmath209 to the set @xmath312 . now",
    "since graph is transitive , any path of a random walk from a vertex @xmath340 to @xmath341 occurs with the same probability as the reversed path for a random walk going from @xmath341 to @xmath340 .",
    "this gives that , for @xmath342 , @xmath343 that is , the event @xmath344 is equivalent to the event that a random walk starting from @xmath30 visits @xmath280 before returning to @xmath30 , and visits @xmath280 for the first time at @xmath52 .",
    "also , for @xmath342 and @xmath345 , @xmath346 now plug ( [ symm1 ] ) and ( [ symm2 ] ) into ( [ eq : pabsplit ] ) , and plug the result into  . summing over @xmath347 first and then over @xmath52 and @xmath271 , and using the markov property for the random walk , we conclude that @xmath348 \\ , \\cdot \\ , p ( \\ { x^x ( \\tau_{a_n}^x ) = y \\ } \\cap \\ { \\tau^x_{a_n } < \\tau^x_{x,+ } \\ } ) ]   =     e [ \\ , \\ ,   \\tilde{n}_n^l \\ , \\ ,    ] .",
    "\\end{gathered}\\ ] ] similarly to ( [ eq : derivedab ] ) , we obtain @xmath349.\\ ] ] hence , plugging ( [ eq : derivedab ] ) and ( [ eq : deriveda ] ) into ( [ eq : expwlrl ] ) , we have @xmath350-e[\\tilde{r}_l ]         & = { \\left(\\sum\\limits_{n=0}^{l } ( \\mu+\\nu_0(\\mu))e[\\tilde n_n^l]-\\nu_0(\\mu ) e[n_n^l]\\right ) } \\nonumber\\\\        & = ( \\mu+\\nu_0(\\mu))e [ \\tilde m_l ] - \\nu_0(\\mu)e [ m_l ] .     \\end{aligned}\\ ] ] thus , if the conditions in ( [ eq : suffcond ] ) are satisfied , the lower bound above diverges with @xmath48 .",
    "it remains to prove that this implies that @xmath351 with @xmath48 with positive probability , which in turn implies that arw is active almost surely by the 0 - 1 law ( lemma  [ prop : lemma4 ] ) . for this , we use the same derivation as in   and  , which gives that @xmath352}{3}\\right ) }        & \\leq 9 \\frac{{\\mathrm{var}}(\\tilde{w}_l)}{{e}^2[\\tilde{w}_l-\\tilde{r}_l ] } + 9   \\frac{{\\mathrm{var}}(\\tilde{r_l})}{{e}^2[\\tilde{w}_l-\\tilde{r}_l]}\\nonumber\\\\        & \\leq 9 \\frac{{e}[\\tilde{w}_l]}{{e}^2[\\tilde{w}_l-\\tilde{r}_l ] } + 9   \\frac{{e}[\\tilde{r_l}]}{{e}^2[\\tilde{w}_l-\\tilde{r}_l ] } ,        \\label{eq : boundvar }     \\end{aligned}\\ ] ] where in the last step we use that @xmath353 $ ] and @xmath354 $ ] since @xmath355 and @xmath356 are defined as a sum of independent bernoulli random variables .",
    "note that   and   imply that @xmath357         & > k \\ , { e}[m_l ] \\quad\\text{for some constant $ k>0 $ and all large enough $ l$}.        \\label{eq : k }     \\end{aligned}\\ ] ] hence we obtain that @xmath358\\geq { e}[\\tilde r_l ] $ ] for all large enough @xmath48 .",
    "in addition , from the derivation of   and   we have @xmath359\\leq ( \\mu+\\nu_0(\\mu ) ) { e}[\\tilde m_l ] . \\ ] ] using these facts , we obtain @xmath360         \\leq 2{e}[\\tilde w_l ]         \\leq 2(\\mu+\\nu_0(\\mu ) ) { e}[\\tilde m_l ] .",
    "\\end{aligned}\\ ] ] plugging this into  , and using  , we get @xmath361}{3}\\right ) }           \\leq \\frac{18(\\mu+\\nu_0(\\mu)){e}[\\tilde { m}_l ] } { k^2 { e}^2[m_l ] }          \\leq \\frac{18(\\mu+\\nu_0(\\mu))}{k^2 { e}[m_l]}.     \\end{aligned}\\ ] ] by , the last term converges to @xmath239 with @xmath48 .",
    "hence , @xmath362}{3}$ ] with positive probability for all large @xmath48 , concluding the proof .",
    "we show that for any @xmath13 and @xmath363 the conditions in are satisfied .",
    "observe that , conditioning on the non - return of the random walk to the origin , @xmath364 is stochastically larger than a random variable which takes value @xmath12 with probability @xmath309 and @xmath239 with probability @xmath307 , as the random walk hits @xmath280 at least one time .",
    "hence , @xmath365",
    "\\geq \\frac{\\delta}{1 + \\lambda }     \\quad\\text{and , consequently,}\\quad      { e } [ \\tilde{m}_l \\ , ]     \\geq \\frac{\\delta}{1 + \\lambda } l.\\ ] ] we use that the random walk has a positive speed @xmath34 ; that is , @xmath366 this gives that , for any positive @xmath367 and all @xmath271 large enough , @xmath368 almost surely .",
    "then if @xmath48 is large enough , for any @xmath369 we have @xmath370 almost surely , which gives that @xmath371 \\leq \\frac{l}{\\alpha-\\epsilon}.        \\label{eq : deriveda2}\\ ] ] hence , we conclude that @xmath372}{{e}[m_l ] }       \\geq \\frac{\\delta ( \\alpha-\\epsilon)}{1+\\lambda}.     \\end{aligned}\\ ] ] thus , the conditions in are satisfied when @xmath373 as long as @xmath363 .",
    "since @xmath10 is amenable and vertex transitive , we can take a sequence of subsets @xmath374 of @xmath100 such that @xmath375 as @xmath376 , there exists a vertex @xmath377 , and @xmath378 where @xmath379 denotes the external boundary of @xmath380 ; that is , the set of vertices in @xmath381 that have an edge incident to @xmath380 .",
    "let @xmath382 be the ball of radius @xmath150 centered at @xmath30 , and recall that @xmath383 is the number of instructions used at @xmath30 to stabilize @xmath382 .",
    "if we assume that @xmath384 , then the 0 - 1 law ( lemma  [ prop : lemma4 ] ) implies that @xmath385 as @xmath386 . by monotonicity of this probability , for any fixed @xmath387 , we can find @xmath388 large enough such that @xmath389    for any set @xmath390 , let @xmath391 be the set obtained by taking the union of balls of radius @xmath150 centered at each vertex of @xmath380 . hence @xmath392 .",
    "let @xmath393 be the number of particles inside @xmath391 prior to the stabilization of @xmath391 and let @xmath394 be the number of sleeping particles in @xmath391 after the stabilization of @xmath391 .",
    "clearly , @xmath395 almost surely .",
    "let @xmath124 denotes the degree of each vertex of @xmath10 ; so @xmath382 has at most @xmath396 vertices .",
    "note that @xmath397          = |v_n^k| \\mu         \\leq { \\left(|v_n| + d^k |\\partial v_n|\\right)}\\mu         = { \\left(1 + d^k \\frac{|\\partial v_n|}{|v_n|}\\right ) } |v_n| \\mu.\\ ] ] also , from in theorem  [ theo : boundsq ] , we have @xmath398         \\geq \\sum_{y \\in v_n } q(y , v_n^k )         \\geq { \\left(\\frac{\\lambda}{1+\\lambda}\\right)}\\sum_{y \\in v_n } \\pr{\\left(m_{v_n^k}(y)\\geq 1\\right)}.\\ ] ] since @xmath399 contains a ball of radius @xmath150 centered at @xmath52 , by monotonicity and transitivity we obtain @xmath398         \\geq |v_n|{\\left(\\frac{\\lambda}{1+\\lambda}\\right)}\\sum_{y \\in v_n } \\pr{\\left(m_{b_k}(x)\\geq 1\\right ) }         \\geq |v_n| { \\left(\\frac{\\lambda}{1+\\lambda}\\right)}{\\left(1-\\epsilon\\right)}.\\ ] ] since @xmath400 \\geq { e}[n_{n , k}^s]$ ] , placing the two inequalities together yields @xmath401 now set @xmath402 large enough such that @xmath403 .",
    "therefore , assuming that @xmath384 implies that @xmath403 , which completes the proof since @xmath387 is arbitrary .",
    "we start with a simple , well - known lemma regarding random walks on regular trees .",
    "[ lem : pl ] for any @xmath404 , let @xmath405 be the probability that a random walk starting at distance @xmath404 from the origin ever visits the origin . then",
    ", for a @xmath124-regular tree we have @xmath406    the lemma follows by checking that if we set @xmath407 for some @xmath408 , then @xmath409 is the only solution in @xmath410 of the recursion @xmath411 .    since a simple random walk in a @xmath124-regular tree has positive speed , theorem  [ theo : activity_non_amenable ] gives that @xmath4 for any @xmath13",
    "also , when @xmath10 is a @xmath124-regular tree , for any given @xmath23 , the conditions in theorem  [ theo : suffcondnonamenable ] are satisfied by setting @xmath13 small enough .",
    "this implies that @xmath412 .",
    "it remains to show that @xmath1 for any @xmath13 .",
    "we assume that the initial distribution of particles is given by independent poisson random variables of mean @xmath17 . then since any bernoulli random variable of mean @xmath413 is stochastically dominated by a poisson random variable of mean @xmath414 , and using monotonicity of arw ( cf .",
    "lemma  [ prop : lemma3 ] ) , we have that if for a given @xmath23 arw almost surely fixates starting from a poisson field of particles of density @xmath17 , then arw almost surely fixates starting from a bernoulli field of particles of density @xmath415 .",
    "this establishes that @xmath1",
    ".    we will employ a beautiful stabilization procedure developed by rolla and sidoravicius  @xcite for the one - dimensional lattice @xmath5 .",
    "we will need to carry out a much more delicate analysis for the case of a @xmath124-regular tree .",
    "let @xmath416 be the particles ordered according to their distance to the origin , with @xmath417 being the closest particle to the origin .",
    "let @xmath48 be an arbitrarily large integer , and consider the finite system inside @xmath50 , the ball of radius @xmath48 around the origin .",
    "our goal is to show that with positive probability we stabilize @xmath50 without any particle visiting the origin .",
    "now we describe the stabilization procedure of rolla and sidoravicius .",
    "let @xmath418 be only the origin .",
    "we move @xmath417 repetitively , ignoring all sleep instructions , until it either reaches @xmath419 or @xmath418 .",
    "if it reaches @xmath420 , then let @xmath421 .",
    "otherwise , let @xmath422 be the vertices visited by @xmath417 , and define @xmath101 to be the largest integer so that @xmath417 ignored a instruction _ sleep _ at @xmath423 ; if @xmath417 never ignored a instruction sleep and visit the origin we will stop and declare that the procedure failed .",
    "set @xmath424 .",
    "we see @xmath425 as a set of corrupted vertices after @xmath417 has moved .",
    "the idea is that we have corrupted the array of instructions at the vertices inside @xmath425 since we have looked at these instructions after the moment at which we stopped @xmath417 .",
    "for this reason , we can not use instructions at these vertices as we proceed to move other particles .",
    "we then repeat the procedure above . for each @xmath426 , let @xmath427 be the event that @xmath428 sees at least one instruction sleep before visiting @xmath429 .",
    "we define @xmath430 as @xmath429 plus the vertices visited by @xmath428 since the last time @xmath428 sees a sleep instruction .",
    "our goal is to show that there exists a positive constant @xmath231 so that , for all @xmath431 , we have @xmath432 where @xmath433 is the number of particles initially inside @xmath50 .",
    "when   holds we have that arw fixates almost surely .    in order to establish  , we will define a branching process on @xmath434 . to avoid ambiguity we refer to the particles of the branching process as _",
    "tokens_. at step @xmath125 , the branching process will have as many tokens as connected components of the graph obtained from @xmath10 by removing all vertices in @xmath435 .",
    "we will denote this graph by @xmath436 .",
    "for each connected component and each time , the position of the token of that component will give the distance between the corrupted vertices and the closest particle of that component .",
    "therefore , since initially @xmath437 has @xmath124 connected components , we start the branching process with @xmath124 tokens , all located at position 1 since we are yet to check whether there are particles at distance @xmath12 from the origin .    for each @xmath438 ,",
    "let @xmath439 be the set of particles at distance @xmath404 from the origin .",
    "for each connected component of @xmath437 , if @xmath440 or all particles in @xmath441 do not reach the origin , then we move the token corresponding to that component one position forward in @xmath434 .",
    "initially , we expect to move the token forward many times since @xmath17 is small .",
    "if after moving all particles in @xmath442 we have that none of them reached the origin , we obtain that the branching process contains @xmath124 tokens at position @xmath443 .",
    "suppose now that , when considering the particles in @xmath444 , we find a particle @xmath445 that reaches the origin .",
    "let @xmath446 be the token corresponding to the connected component of @xmath447 containing @xmath445 .",
    "let @xmath448 be the set of corrupted sites created by @xmath445 ; so @xmath449 .",
    "we take token @xmath446 and replace it by the number of connected components created by @xmath448 ; i.e. , the number of tokens we add is equal to the difference between the number of connected components of @xmath436 and @xmath447 .",
    "note that @xmath436 has at most @xmath450 connected components more than @xmath451 , so we have added at most @xmath452 tokens in this step .",
    "the position of the tokens is determined by the distance between @xmath435 and @xmath443 .",
    "figure  [ fig : branch ] illustrates one example for @xmath453 and @xmath454 . in this example , the particle @xmath445 is moved and sees an instruction sleep for the last time in its first visit to vertex @xmath455 . here",
    "@xmath448 is the set of blue vertices , @xmath435 comprises the blue and red vertices , and @xmath446 was replaced by 3 tokens , one at position @xmath456 and two at position @xmath457 .",
    "so tokens move forward when particles do not reach the set of corrupted vertices , otherwise they branch and move backwards .",
    "we need to show that no token reaches @xmath239 .    .",
    "gray arrows indicate the path traversed by @xmath445 , where the last time @xmath445 sees an instruction sleep is in its first visit to @xmath455 .",
    "the red vertex represents the origin , while blue vertices represent the set of corrupted sites after the move of @xmath445 .",
    "( b ) the branching process before the move of @xmath445 , where the black circle represents the token of the component containing @xmath445 .",
    "note that for all the other components , all particles at distance 4 from the origin where already moved , so their corresponding tokens are already in position 5 .",
    "( c ) the branching process after the move of @xmath445.,title=\"fig : \" ] .",
    "gray arrows indicate the path traversed by @xmath445 , where the last time @xmath445 sees an instruction sleep is in its first visit to @xmath455 .",
    "the red vertex represents the origin , while blue vertices represent the set of corrupted sites after the move of @xmath445 .",
    "( b ) the branching process before the move of @xmath445 , where the black circle represents the token of the component containing @xmath445 .",
    "note that for all the other components , all particles at distance 4 from the origin where already moved , so their corresponding tokens are already in position 5 .",
    "( c ) the branching process after the move of @xmath445.,title=\"fig : \" ] .",
    "gray arrows indicate the path traversed by @xmath445 , where the last time @xmath445 sees an instruction sleep is in its first visit to @xmath455 .",
    "the red vertex represents the origin , while blue vertices represent the set of corrupted sites after the move of @xmath445 .",
    "( b ) the branching process before the move of @xmath445 , where the black circle represents the token of the component containing @xmath445 .",
    "note that for all the other components , all particles at distance 4 from the origin where already moved , so their corresponding tokens are already in position 5 .",
    "( c ) the branching process after the move of @xmath445.,title=\"fig : \" ]    we show this via a lyapunov function , which we will update in steps .",
    "recall that we move the particles in order of their distance to the origin . when moving the particles at distance @xmath443",
    ", we will update the function at each time that we find a particle that reaches the corrupted vertices or when we have moved all the particles inside the same connected component that is at distance @xmath443 from the origin .",
    "when either of these situations happen , we declare that a step of the analysis has ended and update the lyapunov function",
    ". we will now denote by @xmath458 the set of corrupted sites at the end of step @xmath271 ; recall that @xmath418 contains only the origin .",
    "let @xmath459 .",
    "given the end of a step @xmath271 , and letting @xmath460 be the positions of the tokens , define the function @xmath461 we assume that all vertices in the ball @xmath462 have initially no particle , where @xmath463 is chosen large enough such that @xmath464 .",
    "this event occurs with positive probability depending on @xmath463 .",
    "we observe that if any token reaches position @xmath239 then we have @xmath465 .",
    "we show that with positive probability @xmath466 for all @xmath263 . for this",
    "it suffices to show that @xmath467 is a supermartingale , provided @xmath17 is small enough .",
    "let @xmath468 denote the filtration given by the position of the tokens at steps @xmath469 , together with the information regarding each particle that was moved in each of these steps .",
    "assume that at step @xmath470 , we need to move particles from a given connected component of @xmath471 whose token is at position @xmath472 .",
    "in other words , we will move all particles from that component that are at distance @xmath472 from @xmath458 .",
    "note that the number of those particles that ever visit the origin is a poisson random variable @xmath473 of mean @xmath474 where @xmath475 is defined in lemma  [ lem : pl ]",
    ". then if @xmath476 , which happens with probability @xmath477 , the token advances one position and the function @xmath467 changes to @xmath478 if @xmath479 , we will consider one of the particles that visits the origin .",
    "we need to compute the number of vertices that end up being corrupted by this particle .",
    "this is the number of vertices visited by the particle from the last time the particle sees an instruction sleep until it reaches the corrupted vertices .",
    "since at each step the particle does not see an instruction sleep with probability @xmath480 , independently of everything else , we have that the number of vertices corrupted by the particle is stochastically dominated by a geometric random variable of parameter @xmath481 . when this number is equal to @xmath57 , note that the number of connected components that are created by the newly corrupted vertices is at most @xmath482 .",
    "therefore , the token is split into at most @xmath483 tokens , all of them at distance at least @xmath484 .",
    "the expected change of @xmath467 is then at most @xmath485 at this moment we end the step and update the lyapunov function .",
    "if @xmath486 , we will look at the other particles in the next step .",
    "we will simply repeat the steps above , using the fact that a poisson random variable of mean @xmath487 is stochastically dominated by a geometric random variable whose probability of being at least @xmath488 is @xmath489 .    using the above strategy",
    ", we obtain that @xmath490 is at most @xmath491 since we set @xmath34 such that @xmath492 , then the sum above converges to @xmath493 .",
    "then @xmath494 therefore we can set @xmath17 small enough , so that we guarantee that the right - hand side above is smaller than @xmath467 for any @xmath495 , establishing that @xmath467 is a supermartingale .",
    "we are thankful to gbor pete , artem sapozhnikov and laurent tournier for useful discussions .",
    "lorenzo taggi is grateful to volker betz for giving him the possibility to work on this project ."
  ],
  "abstract_text": [
    "<S> we consider the activated random walk model on general vertex - transitive graphs . </S>",
    "<S> a central question in this model is whether the critical density @xmath0 for sustained activity is strictly between 0 and 1 . </S>",
    "<S> it was known that @xmath1 on @xmath2 , @xmath3 , and that @xmath4 on @xmath5 for small enough sleeping rate . </S>",
    "<S> we show that @xmath6 as @xmath7 in all transient graphs , implying that @xmath4 for small enough sleeping rate . </S>",
    "<S> we also show that @xmath4 for any sleeping rate in any graph in which simple random walk has positive speed . </S>",
    "<S> furthermore , we prove that @xmath1 in any amenable graph , and that @xmath8 for any sleeping rate on regular trees . </S>"
  ]
}