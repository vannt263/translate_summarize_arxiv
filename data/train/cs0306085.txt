{
  "article_text": [
    "the atlas  @xcite and lhcb  @xcite collaborations will perform physics studies at the high - energy , high - luminosity , large hadron collider  ( lhc )  @xcite , scheduled to start operation at cern in 2007 .",
    "the data volumes produced by each experiment are in the petabyte range , and will be processed with computing resources that are distributed over national centers , regional centers , and individual institutes . to fully exploit these distributed facilities , and to allow the participating physicists to share resources in a coordinated manner , use will be made of gridservices .",
    "the gaudi / athena  @xcite software framework used by lhcband atlas , is designed to support all event - processing applications , including simulation , reconstruction , and physics analysis .",
    "a joint project has been set up to develop a front - end that will aid in the handling of framework - based jobs , and performs the tasks necessary to run these jobs either locally or on the grid .",
    "this front - end is the gaudi / athenaand gridalliance , or ganga  @xcite .",
    "gangacovers all phases of a job s life cycle : creation , configuration , splitting and recollection , script generation , file transfer to and from worker nodes , submission , run - time setup , monitoring , and reporting . in the specific case of gaudijobs ,",
    "the job configuration also includes selection of the algorithms to be run , definition of algorithm properties , and specification of inputs and outputs .",
    "gangarelies on middleware from other projects , such as globus  @xcite and edg  @xcite , to perform grid - based operations , but makes use of the middleware functionality transparent to the gangauser .    in this paper , we present the gangadesign and the choices made for its implementation",
    ". we report on the work done in developing the software bus that is a key feature of the design , and we describe the functionality of the current gangarelease .",
    "gangais being implemented in python  @xcite , an interpreted scripting language , using an object - oriented approach , and following a component architecture .",
    "the pythonprogramming language is simple to use , supports object - oriented programming , and is portable . by virtue of the possibilities it allows for extending and embedding features , pythonis also effective as a software `` glue . ''",
    "a standard pythoninstallation comes with an interactive interpreter , an integrated development environment ( ide ) , and a large set of ready - to - use modules .",
    "the implementation of the component architecture underlying the gangadesign benefits greatly from python s support for modular software development .",
    "the components of gangainteract with one another through , and are managed by , a so - called `` software bus ''  @xcite , of which a prototype implementation is described in section  [ sec : pybus ] .",
    "this interplay is displayed graphically in fig.@xmath0  [ fig : architecture ] .",
    "as considered here , a component is a unit of software that can be connected to , or detached from , the overall system , and brings with it a discrete , well - defined , and circumscribed functionality . in practical terms",
    ", it is a pythonmodule ( either written in pythonor embedded ) that follows a few non - intrusive conventions .",
    "the component - based approach has the advantages that it allows two or more developers to work in parallel on well - separated tasks , and that it allows reuse of components from other systems that have a similar architecture .",
    "the initial functionality of the software bus is provided by the pythoninterpreter itself . in particular",
    ", the interpreter allows for the dynamic loading of modules , after which the bus can use introspection to bind method calls dynamically , and to manage components throughout their life cycle .",
    "the functionality of the gangacomponents can be accessed through a command - line interface ( cli ) , and through a graphical user interface ( gui ) , built on a common application - programmer interface ( api ) .",
    "all actions performed by the user through the gui can be invoked through the cli , allowing capture of a gui session in an editable cli script .",
    "the components can be divided among three categories : general , application specific , and external .",
    "further developments will add components as needed .",
    "with reference to fig.@xmath0  [ fig : architecture ] , they are discussed below .",
    "although the first priority is to deal with gaudijobs , gangahas a set of core components suitable for job - handling tasks in a wide range of application areas .",
    "these core components provide implementations for the job definition , the editing of job options , the splitting of jobs based on user provided configuration and job templates , and the output collection . in fig.@xmath0",
    "[ fig : architecture ] , these components are shown on the right side of the software bus .    the job definition characterizes a gangajob in terms of the following :    * the name chosen as the job s identifier . *",
    "the workflow ( see below ) indicating the operations to be performed when the job is run . * the computing resources required for the job to run to completion .",
    "* the job status ( in preparation , submitted , running , completed ) .",
    "a job workflow is represented as a sequence of elements ( executables , parameters , input / output files , and so on ) , with the action to be performed by , and on , each element implicitly defined .",
    "resources required to run a job , for example minimum cpu time or minimum memory size , are specified as a list of attribute - value pairs , using a syntax not tied to any particular computing system .",
    "the job - definition component implements a job class , and classes corresponding to various workflow elements .",
    "other gangacomponents of general applicability performing operations on , for , or using job objects :    * a job - registry component allows for the storage and recovery of information for job objects , and allows for job objects to be serialized . * a script - generation component translates a job s workflow into the set of ( python ) instructions to be executed when the job is run . * a job - submission component takes care of submitting the workflow script to a destination indicated by the user , creating job description language ( jdl ) files where necessary , and translating the resource requests into the format expected by the target system ( european datagrid ( edg ) , gridpp grid , us - atlas testbed , local pbs queue , and so on ) .",
    "* a file - transfer component handles transfers between sites of job input and output files , this usually involving the addition of appropriate commands to the workflow script at the time of job submission . *",
    "a job monitoring component keeps track of job status , and allows for user - initiated and scheduled status queries .",
    "gangacan be optimized for a given user group , through the addition of application - specific components . for the current user groups , atlasand lhcb ,",
    "specialized components exist that incorporate knowledge of the gaudiframework :    * a component for gaudijob definition adds classes for workflow elements not dealt with by the general - purpose job definition component .",
    "for example , applications based on gaudiare packaged using a configuration management tool ( cmt )  @xcite , which requires its own workflow elements . also , this component provides workflow templates covering a variety of common tasks , such as simulating events and running an analysis on some dataset . *",
    "a component for gaudijob - options editing allows selection of the algorithms to be run and modification of algorithm properties . * a component for gaudijob splitting allows for large jobs to be broken down into smaller sub - jobs , for example by examining the list of input data files and creating jobs for subsets of these files .",
    "* a component for gaudioutput collection merges outputs from sub - jobs where this is possible , for example when the output files contain data sets like histograms and/or ntuples",
    ".    specialized components for other application areas are readily added .",
    "the subdivision into general and specialized components , and the grouping together of specialized components dedicated to a particular problem domain , allows new user groups to identify quickly the components that match their needs , and will improve gangastability .",
    "the functionality of the components developed specifically for gangais supplemented by the functionality of external components .",
    "these include all modules of the pythonstandard library , and also non - pythoncomponents for which an appropriate interface has been written .",
    "two components of note in the latter category , both interfaced using boost  @xcite , allow access to the services of the gaudiframework itself , and to the full functionality of the rootanalysis framework  @xcite .",
    "to first order , the software bus functionality required by gangais provided by the pythoninterpreter itself . the main features not offered by the interpreter , but nevertheless desirable are :    * * symbolic component names * + pythonmodules are loaded on the basis of their names , which are mapped one - to - one onto names in the file system , sometimes including ( part of ) the directory structure .",
    "components should , instead , be loaded on the basis of the functionality that they promise . * * replacing a connected component * + this is different from the standard reload functionality , which loads a new version of a current module and does nt rebind any outstanding references . a component , however , may need to be completely replaced by another component , meaning that the latter must be reloaded deep , and references into the old component must be replaced by equivalent references into the new component , wherever possible . * * disconnecting components * + a standard pythonmodule does not get unloaded until all outstanding references disappear .",
    "this is common behavior in many off - the - shelf component architectures .",
    "however , it should be possible to propagate the unloading of a component through the whole system , allowing for more natural interactive use . * * configuration and dependencies * + since pythonmodules simply execute pythoncode , their configuration and dependencies are usually resolved locally .",
    "components should be able to advertise their configurable parameters and their dependencies , such that it is also possible to manage the configuration externally and/or globally .    the software bus should also support a user interface presentation layer ( uipl ) , through which the configuration , input and output parameters , and functionality of components can be connected to user interface elements .",
    "the bus inspects the component for presentable elements , including ( if applicable ) their type , range , name , and documentation .",
    "it subsequently requests the user interface to supply elements that are capable of providing a display of and/or interaction with each of the parameters , based on their type , range , etc.both the interface element and the component should then be hooked through the uipl .",
    "for example , assume that a configuration parameter of a component is of a boolean type .",
    "this parameter can then map onto e.g.  a checkbox in a gui .",
    "the bus requests the gui to provide a display of the boolean value , gets a checkbox in return , and it subscribes the checkbox to a value holder in the uipl .",
    "it also subscribes itself to the value holder .",
    "changes by the checkbox , changes the value in the value holder , which in turn causes a notification to the bus , which sets the value in the component .",
    "mapping through an uipl has the advantages that simple user interfaces can be created automatically , and more sophisticated user interfaces can be relatively easily peeled off and replaced , since they never access the actual underlying component directly .      a prototype of a software bus ( pybus ) has been written to explore the possibilities for implementing the above features in a user - level pythonmodule , rather than in a framework .",
    "that is , pybusis a client of the pythoninterpreter and does not have any privileges over other modules .",
    "this means that components written for pybuswill act as components when used in conjunction with the bus , or as pythonmodules when used without .",
    "conversely , pythonmodules that were not written as pybuscomponents can still be loaded and managed by the software bus , assuming that they adhere to standard pythonconventions concerning privacy and dependencies .    when a user connects a component to pybusin order to make it available to the system , he or she can load it using the logical , functional , or actual name .",
    "components that are available to pybusmust be registered under logical names , optionally advertising under functional names the public contracts that they fulfill ( their `` interfaces , '' but note that pythondoes not explicitly support interfaces in the sense of java or c++ ) .",
    "if a component is not registered , it can only be connected using its actual name , which is the name that would be used in the standard way of identifying a pythonmodule . unlike the actual name , which has to be unique , the logical name and functional names may be claimed by more than one component .",
    "pybuswill choose among the available components on the basis of its own configuration , a priority scheme , or a direct action from the user .    in the process of connecting a module , pybuswill",
    "look for any conventional parameters ( starting with `` pybus _ '' ) in the dictionary of the module that contains the component .",
    "these parameters may describe dependencies , new components to be registered , post - connect or pre - disconnect configuration , and so on .",
    "it is purely optional for a module to provide any of these parameters and pybuswill use some heuristics if they are absent .",
    "for example , all public identifiers are considered part of the interface , so that any module can be connected as if it were a component .",
    "the user can decide the name under which the module should be connected , which can be any alias that stands in for the name to be used in the user code , following the ` as ' option for standard pythonimports . if no alias is provided , the logical name is used .",
    "pybuskeeps track of these aliases .",
    "pybusallows components to be replaced . in order to do this , it uses the garbage collection and reference - counting information of the pythoninterpreter to track down any outstanding references , and acts accordingly .",
    "some references , for example those to variables or instances , are rebound , whereas others , for example object instances , are destroyed . disconnecting a component is rather similar to replacing it , with the only exception that no references are rebound : all are destroyed .    pythonallows user modules to intercept the importing of other modules , by replacing the import hook .",
    "this mechanism allows the pybusimplementation to bookmark those modules that are imported during the process of connecting a component , and thus manage component dependencies . when disconnecting a component , the modules that it loaded are not automatically removed , since the interpreter itself holds on to a reference to them ,",
    "even after all user - level modules are unloaded .",
    "there is no real reason to force the unloading of standard modules , but if the modules are components that are connected to pybus , their unloading is mandatory .",
    "when a new component is loaded , which in turn loads other components , then pybusneeds to resolve the lookup of those components anew : these dependent components may have changed , or different components may be chosen this time around , for a variety of reasons .",
    "the implementation of the prototype of a software bus has been mostly successful .",
    "the are a few issues left for embedded components , but for pure pythoncomponents it has been shown that it is possible to implement the component architecture features missing in the pythoninterpreter with a user - level pythonmodule .",
    "the gangadesign , including possibilities for creating , saving , modifying , submitting and monitoring jobs , has been partly implemented and released .",
    "the tools implemented should be suitable for a wide range of tasks , but we have initially focused on running one type of job for atlasand one type of job for lhcb , focusing on the atlfast  @xcite fast simulation in the case of the former , and the davinci  @xcite analysis in the case of the latter .",
    "optimization for other types of applications essentially means creating more templates , which is a straightforward procedure .",
    "the current release allows jobs to be submitted to the european datagrid , and to local pbs and lsf queues .",
    "communication between components in the prototype is via the pythoninterpreter , with the sophistication of pybusto be added later .",
    "the first release does not yet fulfill all requirements , but it already helps the user to perform a number of tasks that otherwise would have to be done manually .",
    "for example , the creation of jdl files necessary for job submission to the edg testbed , and the generation of scripts to submit jobs to other batch systems , has been automated .",
    "most parameters relevant for gaudi - based jobs have reasonable default values , so that a user only has to supply minimal information to create and configure a new job .",
    "existing jobs can easily be copied , renamed , and deleted .",
    "when a job is created , it is presented as a template that can be edited by the user . after making the proper modifications",
    ", the user can submit the job for execution with a single command .",
    "if the generated scripts and job - options files need to be verified before submission , the user can perform the job set up with the configure command .",
    "job splitting is achieved through loading and executing a splitter script , with support for both default and user scripts .",
    "when a job is submitted , gangastarts to monitor the job state by periodically querying the appropriate computing system .",
    "this process can be stopped or started manually at any time .",
    "when a job is running , it can be killed , if so desired . on job completion ,",
    "the output is automatically transferred to a dedicated output directory or to any other location described in the job output files .",
    "below , we give details of the ganga s current job - handling capabilities and the main graphics features : the gui and the job - options editor .          the job registry ( described in [ sec : generalcomponents ] ) keeps records , in the form of metadata , about all user jobs .",
    "it also allows operations on jobs , such as job creation , configuration , submission , termination , and provides the job monitoring service . for job serialization ,",
    "the registry uses a job catalogue , which in turn maintains the information about all saved jobs etc .",
    "each user job is represented by an instance , which contains information about the job state , and references to the requirements , application and handler objects .",
    "the specific steps required for job configuration , submission , and monitoring , which differ for each computing system , are delegated to a job handler .    in order to complete a step",
    ", the handler uses the requirements , which are common by design , and it adds its own attributes that are relevant for the particular computing system .",
    "examples of common requirements are minimal size of physical memory or minimal size of available disk space , examples of specific attributes are queue time limits and bookkeeping accounts . for job monitoring ,",
    "the handler provides information about the job state that is system dependent .",
    "gangacurrently has components containing job handlers to work with the local computer , a local pbs or lsf batch system , or the edg .    in the gangadesign",
    ", a distinction is made between `` jobs '' and `` applications , '' in order to have the possibility to run the same application on different computing systems .",
    "an application in gangaterminology represents a computer program that the user wants to execute ( the executable ) , together with any necessary configuration parameters , required input , and expected output files .",
    "the executable is specified by image location , name , and version .",
    "application parameters , which may be files , include a type description with the actual value .",
    "the input and output files are described by their name and ( desired ) locations .",
    "methods are available to get them from their storage location , and to transfer files to and from worker nodes , tailored to each of the supported computing systems . in gangathere",
    "is currently support for the local system copy command , the gridftp transfer protocol , and the edg sandboxes mechanism .",
    "the transfer method is set up automatically by the job handler during the configuration of a job .",
    "an interface to the edg replica catalogue to translate logical file names is also implemented , and future gangareleases will contain more advanced data management tools to work with the grid .    like jobs , applications plug into the appropriate application handlers based on the type of application .",
    "currently , gangaoffers a generic application handler , which can be used with types of application , but with the disadvantage that it provides little help with configuration ; a gaudihandler , for use with general applications written for the gaudiframework ; and two handlers specific to davinciand atlfast .",
    "the gui , like the rest of ganga , is implemented in python , and makes use of wxpython , the extension module that embeds the wxwindowsplatform independent application framework .",
    "wxwindowsis implemented in c++ , and is a layer on top of the native operating and windowing system .",
    "the design of the gui is based on a mapping of major gangacore classes  jobs , applications , files , and so on  onto the corresponding gui classes .",
    "these classes ( gui handlers ) add the hooks necessary to provide interaction with the graphical elements of the interface , on the top of the functionality of the underlying core classes .",
    "the gui component also includes some gangaspecific extensions of standard wxwindowswidgets ( dialogues , panels , list and tree controls ) .",
    "the basic display of the gangagui is shown in fig.@xmath0  [ fig : gui ] .",
    "the layout of the window consists of three main parts : there is a tree control on the left that displays job folders , which themselves may be folders , in their respective states .",
    "there is a multi - purpose panel on the right , which facilitates many displays ( see also fig.@xmath0  [ fig : joe ] ) , and which in fig.@xmath0  [ fig : gui ] consists of a list control .",
    "finally , there is an embedded pythonshell ( pycrust , itself designed for use with wxpython ) .    with the advanced ( expert ) view option on , the job folders , in the tree of job states ,",
    "display a hierarchy of all job - related values and parameters .",
    "the most important values are brought to the top of the tree , less important ones are hidden in the branches .",
    "the normal ( user ) view stops at the level of jobs and gives access to the most important parameters only .",
    "the user can also choose to hide the tree control completely .",
    "the list control displays the content of the selected folder in the job tree . with a double mouse",
    "click it is possible to edit most of the values shown in this control list .",
    "the lower part of the frame is reserved for the pythonshell , which doubles as a log window .",
    "the shell does not only allow the execution of any pythoncommand , but it also permits access to , and modification of , any gui widget .",
    "the shell , too , can be hidden if desired .",
    "actions on jobs can be performed through a menu , using a toolbar , or via pop - up menus called by a right click in various locations .    when the monitoring service is switched on ,",
    "jobs move automatically from one folder to another as their states evolve . to avoid delays in the program response to the user input , the monitoring service runs on its own thread .",
    "it posts customized events whenever the state of a job changes and the display is to be updated . for gui updates not related to job monitoring , gangahandles the standard update events posted by the wxwindowsframework .",
    "the job - options editor ( joe ) has been developed in the context of the work on atlfast , and allows the user to customize atlfastjobs from within the gangaenvironment .",
    "the main features of joeare summarized as follows :    * joe , through its gui ( fig.@xmath0  [ fig : joe ] ) , assists the user in customizing atlfastjob options from within ganga .",
    "this helps to eliminate human errors arising from incorrectly spelt options / values and incorrect syntax .",
    "+ the user can define sequences / lists ( e.g.  topsequence , generator.members , applicationmgr.dlls , etc . ) by enabling / disabling entries and arranging them in any desired sequence . currently , there are no restrictions placed on these user - defined sequences for them to be meaningful .",
    "+ joeincorporates an option - type aware user interface presentation selector that essentially chooses the correct presentation format at run - time ( e.g.  drop - down menus for discrete choice options , arbitrary value entry for simple choice options , value appending for list - type options , etc . ) for individual job options based on their attributes / characteristics .",
    "* job option settings for commonly performed jobs may be saved and reused .",
    "this saves the user the work of re - entering option values for subsequent jobs , especially if only minor modifications are needed . with default values for options built - in ,",
    "the user is able to revert to the default settings when required .",
    "* once all the options have been set , the preview function allows the user to check that the created script is as required . * in accordance with the basic gangarequirements , all functionality of the editor is available on the pythoncommand line without the gui ( not without a certain degree of visual inconvenience of course ) .",
    "users and developers alike can make use of this api .",
    "since the current version of joeis very basic , improvements are in the pipeline :    * the editor is to be decoupled from the atlfastapplication handler and made available to be used in a generic gaudienvironment .",
    "a generic editor can be used to perform job - option customization of full simulation , reconstruction and analysis jobs . to make this possible",
    ", the editor s dependence on hard - coded pythondata structures must be removed and replaced with a database that can be queried .",
    "* option attributes that enable joeto dynamically choose appropriate presentation formats for individual job options are currently hard - coded into the data structure referred to above .",
    "future versions will attempt to make deductions about job option attributes at run - time .",
    "* with the foreseen decline in the use of text - based options files , the editor will support the creation of pythonscripts instead . * editable previews of options files , to allow the user to make last minute changes . *",
    "the move from atlfastto full simulation and reconstruction will see at least a tenfold increase in the number of configurable job options",
    ". it will not be useful to display all options indiscriminately ; some form of information hiding is required . +",
    "the `` favorite - options first '' feature will further speed up the user s task of job - options modifications by placing frequently used options at the top of the list and perhaps hide the not so frequently used ones . *",
    "although rudimentary option - value checks are performed , the more important range checking is not yet available .",
    "this feature requires permitted ranges ( i.e.  sensible values ) of individual options to be attributes of individual options .",
    "joeshowcases the extensibility of the gangauser interface .",
    "future extensions can be developed and incorporated in the same way .",
    "the first release of the gangapackage has been made available , and user feedback is being collected from both atlasand lhcbcollaborators . the development schedule laid out for the remainder of calendar year 2003 is targeted at providing a product to satisfy requirements for the atlasand lhcbdata challenges . cooperation and integration with existing projects ( ask  @xcite , atcom  @xcite , dirac  @xcite , dial  @xcite ) is foreseen in order to meet in time these requirements",
    ". the gangaproject will then continue to keep pace with and adapt to the ever - evolving gridmiddleware services ."
  ],
  "abstract_text": [
    "<S> the gaudi / athenaand gridalliance  ( ganga ) is a front - end for the configuration , submission , monitoring , bookkeeping , output collection , and reporting of computing jobs run on a local batch system or on the grid . in particular , gangahandles jobs that use applications written for the gaudisoftware framework shared by the atlasand lhcbexperiments . </S>",
    "<S> gangaexploits the commonality of gaudi - based computing jobs , while insulating against grid- , batch- and framework - specific technicalities , to maximize end - user productivity in defining , configuring , and executing jobs . designed for a python - based component architecture , </S>",
    "<S> gangahas a modular underpinning and is therefore well placed for contributing to , and benefiting from , work in related projects . </S>",
    "<S> its functionality is accessible both from a scriptable command - line interface , for expert users and automated tasks , and through a graphical interface , which simplifies the interaction with gangafor beginning and casual users .    </S>",
    "<S> this paper presents the gangadesign and implementation , the development of the underlying software bus architecture , and the functionality of the first public gangarelease . </S>"
  ]
}