{
  "article_text": [
    "in addition to the rapid increase of available computing power , the rise of the use of n - body simulations in astrophysics has been driven by the development of more efficient algorithms for evaluating the gravitational potential .",
    "efficient algorithms with better scaling than @xmath5 take two general forms .",
    "first , one can introduce a rectilinear spatial grid and , taking advantage of fast fourier transforms , solve poisson s equation on this grid in fourier space the well - known particle  mesh ( pm ) method , which , while very fast , limits the spatial resolution to the grid spacing . to gain finer resolution",
    "one can introduce smaller subgrids ( e.g. the art code of @xcite ; see also @xcite ) ; alternatively one can compute the short - range interactions directly ( the particle  particle  particle  mesh , or p@xmath3 m method ( @xcite ; @xcite ) ) .",
    "one widely used code ( ap@xmath3 m ) combines both of these refinements ( @xcite ; @xcite ) .",
    "the second general approach is to approximate long - range interactions which are less important to an accurate determination of the force , by grouping together distant particles .",
    "these are known as tree methods since a tree data structure is used to hold the moments of the mass distribution in nested subvolumes ( @xcite ; @xcite ) . art and ap@xmath3 m are discussed in more detail by by @xcite ; for a review of the field see @xcite .",
    "all of these algorithms are more difficult to implement on parallel computers with distributed memory than on single processor machines .",
    "gravity acts over long scales and gravitational collapse creates highly inhomogeneous spatial distributions , yet with parallel computers one needs to limit the amount of communication and give different processors roughly equal computing loads .",
    "the problem is one of domain decomposition locating spatially compact regions and deciding which data is needed to find the potential within that region .",
    "@xcite introduced a new n - body gravity solver which deals with this problem in a natural way . the tree  particle ",
    "mesh ( tpm ) approach is similar to the p@xmath3 m method , in that the the long - range force is handled by a pm code and the short - range force is handled by a different method in this case using a tree code , with the key difference that the tree code is used in adaptively determined regions of arbitrary geometry . in this paper",
    "we describe several improvements to the tpm code , and compare the results with those obtained by the p@xmath3 m method .",
    "our goal was to improve and to test the new algorithm while designing an implementation that could be parallelized efficiently and was optimal for use as a coarse grained method suitable for distributed computational architectures , including those having large latency .",
    "section 2 describes the method , section 3 the basis ( density threshold ) for domain decomposition , section 4 the parallelism of the implemented algorithm ( using message passing ) , and section 5 tests and compares with the well calibrated p@xmath3 m algorithm .",
    "the implementation presented in this paper is oriented towards a specific cosmological problem the formation of large clusters and we will be discussing it in that setting .",
    "however , this algorithm could be used for many particle simulation applications , both in astrophysics and other fields ; it should be beneficial in situations where the density distribution allows one to divide the particles into many isolated groups .",
    "thus we will conclude this section with a brief summary of the specific cosmological context for those unfamiliar with it .",
    "a large cubical volume is simulated with periodic boundary conditions .",
    "the simulation begins in the linear regime ; particles are displaced slightly from a uniform grid , giving gaussian perturbations to a nearly constant density field .",
    "the particles are followed as they move under their mutual gravitational attraction . over time , gravitational instability causes the initially small overdensities to collapse , forming highly dense halos ( with central densities a factor of @xmath6 higher than the average ) .",
    "these halos are distributed along filaments surrounding large , low - density voids .",
    "the tpm algorithm was developed to deal with this highly inhomogeneous structure .",
    "the basic idea behind the tpm algorithm is to identify dense regions and use a tree code to evolve them ; low density regions and all long  range interactions are handled by a pm code .",
    "a general outline of the algorithm is :    1 .   find the total density on a grid .",
    "2 .   based on the grid density , decompose the volume into a background pm volume and a large number of isolated high density regions .",
    "every particle is then assigned to either the pm background or a specific tree .",
    "3 .   integrate the motion of the pm particles ( those not in any tree ) using the pm gravitational potential computed on the grid .",
    "4 .   for each tree in turn integrate the motion of the particles , using a smaller time step if needed ; forces internal to the tree are found with a tree algorithm ( @xcite ) , added to the tidal forces from the external mass distribution taken from the pm grid .",
    "5 .   step global time forward , go back to step 1 .    in this section",
    "we will consider certain aspects of this process in detail , and conclude with a more complete outline of the algorithm .",
    "we wish to locate regions of interest which will be treated with greater resolution in both space and time ; for the purposes of cosmological structure formation this translates into regions of high density .",
    "it also is necessary that these regions remain physically distinct during the long pm time step ( determined by the courant condition ) so that the mesh - based code accurately handles interactions between two such regions .",
    "the process we use can be thought of as finding regions enclosed by an isodensity contour .",
    "if one imagines the isodensity contours through a typical simulation at some density threshold @xmath7 , space is divided into a large number of typically isolated regions with @xmath8 plus a multiply connected low density background filling most of the volume .    to locate isolated , dense regions we begin with the grid density , which has been calculated already by the pm part of the code . each grid cell which is above a given threshold density @xmath9",
    "is identified and given a unique positive integer key ( the choice of @xmath9 is discussed in section  [ secdenth ] ) .",
    "cells are then grouped by a ` friends - of - friends ' approach : for each cell with a nonzero key the 26 neighboring cells are examined and , if two adjacent cells are both above the threshold , they are grouped together by making their keys identical . the end result is isolated groups of cells , each separated from the other groups by at least one cell . if a wider separation between these regions is desired , one can examine a larger number of neighboring cells .",
    "the method is `` unstructured '' in the sense that the geometry of each region is not specified in advance , except insofar as it is singly connected .",
    "the shape of the region can be spheroidal , planar , or filamentary as needed .    to assign particles to trees ,",
    "the process used to find the density on the grid ( described in the next section ) is repeated .",
    "this involves locating the grid cell to which some portion of a particle s mass is to be added , so it is easy to check at the same time whether that cell has a nonzero key and , if it does , to add that particle to the appropriate tree .",
    "thus any particle that contributes mass to a cell with density above the threshold is put in a tree . because of the spatial separation of the active regions ( they are buffered by at least one non - tree cell ) a particle will only belong to one tree even though it contributes mass to more than one cell .",
    "an example of this in practice is shown in figure  [ figfind ] . in the bottom panel ,",
    "all particles in a small piece of a larger simulation are shown in projection .",
    "the grid and the location of active cells are shown in the top panel ; each isolated region is indicated by a unique numerical key . in a couple of cases it appears that different regions are in adjacent cells , but in fact they are separated in the third dimension the region shown is 10 cells thick . in the lower of the middle two panels , the particles assigned to trees are shown with different symbols indicating membership in different trees . in the other panel the residual pm particle positions are plotted , demonstrating their much lower density contrast as compared to those in trees .      as in @xcite",
    ", the force is decomposed into that which is internal to the tree and that due to all other mass : @xmath10 however , we do this in a different manner , described in this section , than was done in @xcite .",
    "the first step in obtaining the particle accelerations is to obtain the pm gravitational potential .",
    "the masses @xmath11 of the @xmath12 particles ( including those in trees ) are assigned to the grid cells using cic weighting :    [ eqncic ] @xmath13    where @xmath14 is a particle s @xmath15 coordinate in units where the grid spacing is unity .",
    "the potential @xmath16 , assuming periodic boundary conditions , is then found by solving poisson s equation using the standard fft technique ( hockney & eastwood 1981 ) .",
    "once a tree has been identified , we wish to know the forces from all the mass not included in that tree ; thus the contribution of the tree itself must be removed from the global potential .",
    "this step will have to be done for each tree in turn .",
    "the density is found exactly as before , except this time summing over only the particles in the tree : @xmath17 using this density , we solve poisson s equation again , except that non - periodic boundary conditions are used ( hockney & eastwood 1981 ) .",
    "the resulting potential @xmath18 is the contribution that the tree made to @xmath16 without counting the ghost images due to the periodic boundary conditions of the latter .",
    "the force on a tree particle exerted by all the mass not in the tree ( including the periodic copies of the tree ) is then @xmath19 thus tidal forces within a tree region are computed on the mesh scale in a consistent manner , with interpolation used as required to find the forces on individual particles .    calculating the non - periodic potential with ffts involves using a grid which is eight times larger in volume than that containing the actual mesh of interest , but since trees are compact and isolated regions , the volume of the larger grid which is non - zero is quite small .",
    "thus the fft which is computed for each tree can be done on a smaller grid as long as the grid spacing remains the same as for the larger periodic fft ; we do this by embedding the irregular tree region in a cubic subgrid , padding with empty cells as needed .",
    "the final step is to calculate the internal forces @xmath20 for each tree .",
    "we do this with the tree code of hernquist ( 1987 ) .",
    "since the periodic nature of the potential was taken into account in finding the external forces , no ewald summation is needed .",
    "time stepping is handled in the same manner as @xcite .",
    "that is , the pm potential is determined at the center of the large pm timestep , and each tree has its own , possibly smaller , timestep .",
    "there are a couple of slight differences : in equation 15 of @xcite we use the parameter @xmath21 , and we decrease @xmath22 so that 97.5% of the tree particles satisfy @xmath23 .      to sum up this section",
    "we give a more detailed outline of the code .",
    "all particles begin with the same time step @xmath24 ; the velocities are given at time @xmath25 and the positions at time @xmath26 ( as described in xu 1995 ) .    1 .   using the density from the previous step ,",
    "we identify all particles belonging to trees , and to which tree ( if any ) each particle belongs ( section  [ sectreeass ] ) .",
    "the time step for each tree is computed , and particle positions are adjusted if @xmath27 has changed for that particle ( hernquist & katz 1989 ) .",
    "this can occur if a particle joins or leaves a tree , of if the tree time step has changed .",
    "3 .   the total density due to all particles at time @xmath28 is found on a grid using equation  [ eqncic ] .",
    "the potential @xmath16 is found from this density , and the pm acceleration at mid - step is found for each particle .",
    "4 .   each tree",
    "is then dealt with in turn .",
    "first , the tree contribution to the pm acceleration is removed , as described in section  [ secforce ] .",
    "next the tree is stepped forward with a smaller time step using the tree code of hernquist ( 1987 ) , with the external forces included .",
    "all particles not in trees are stepped forward using the pm acceleration . the global time and",
    "cosmological parameters are updated , completing the step .",
    "in section  [ sectreeass ] the threshold density @xmath9 was introduced to demarcate dense regions which would be followed with higher resolution .",
    "the best choice of this parameter depends on a number of considerations .",
    "one could set @xmath9 to be such a low value that nearly all particles are in trees , or that only one large tree exists , thereby destroying the efficiency that the tpm algorithm is designed to give . on the other hand",
    ", too high a value would leave many interesting regions computed at the low resolution of the pm code . when modeling gravitational instability , one must also keep in mind that the density evolves from having only small overdensities initially to a state where there are a few regions of very large overdensity ;",
    "thus the ideal threshold will evolve with time . with these considerations in mind , we base @xmath9 on the grid density as : @xmath29 where @xmath30 is the mean density in a cell , and @xmath31 is the standard deviation of the cell densities . with this equation , the first two moments of the density distribution are used to fix @xmath9 in an adaptive manner . the coefficient @xmath32 is set to prevent the selection of too many or too large trees when @xmath31 is small ; its value will be near unity .",
    "the choice of @xmath33 will determine what fraction of particles will be placed in trees when @xmath31 is large .",
    "this choice depends on the parameters of the simulation such as the cosmological model ( including the choice of @xmath34 ) and the size of a grid cell .",
    "we choose a value of @xmath33 which will place @xmath35 of the particles in trees at the end of the simulation .",
    "figure  [ fighaloh ] shows how tree properties vary over the course of a large lcdm simulation , using @xmath36 and @xmath37 in equation  [ eqnrhothr ] .",
    "the value of @xmath31 begins at 0.1 , so at high redshift @xmath38 .",
    "this leads to a large number of trees which are low in mass and diffuse . as time goes on",
    ", these slight overdensities collapse and merge together , resulting in denser concentrations of mass .",
    "also , @xmath31 becomes larger ( increasing to 4.1 by the end of the simulation ) , so a larger concentration of mass is needed before a region is identified as a tree .",
    "thus the original distribution of trees evolves into one with fewer trees , but at higher masses ( though at any given time the masses of trees roughly follow a power law distribution ) .",
    "the typical volume within tree regions also increases with time , but the total volume covered by trees ( measured by the number of cells above @xmath9 ) decreases . given the roughly log  normal distribution of density resulting from gravitational instability , the total volume in tree regions is less than one percent even when they contain @xmath39% of the mass . the rise in @xmath9 means that the size of the smallest tree found also rises from 4 to 40 particles over the course of this run .",
    "this raises an issue that must be noted when understanding the results of a tpm run : the choice of @xmath9 introduces a minimum size below which the results are no better than in a pm code .",
    "this is discussed in more detail in section 5 .",
    "one of the strengths of the tpm algorithm is that after the pm step , each tree presents a self - contained problem : given the particle positions , velocities , and tidal forces , the tree stepping can be completed without the need to access any other data , since the effect of the outside universe is summarized by the tidal forces in the small tree region .",
    "this makes the tree part of the code intrinsically parallel .",
    "what makes such a separation possible is that during the multiple timesteps required to integrate particle orbits within a dense tree region the tidal forces may be deemed constant ; the code is self - consistent in that the density on the pm grid is only determined on the courant timescale for that particle distribution .",
    "our parallel implementation of the tpm method uses a distributed memory model and the mpi message passing library , in order to maximize the portability of the code .",
    "the pm portion of the code is made parallel in a manner similar to that described in @xcite .",
    "this scales well , and takes a small fraction of the total time as compared to the tree portion of the code .",
    "two steps are made to ensure load balancing the tree part of the code .",
    "first , trees are distributed among processors in a manner intended to equalize the amount of work done .",
    "the time it takes for a particular tree to be computed depends on the size of the tree , the cost of computing the force scaling roughly as @xmath40 .",
    "as trees are assigned to processors , a running tally is kept of the amount of work given to each node , and the largest unassigned tree is assigned to the processor given the least amount of work .",
    "the tree particles are then distributed among the processors , and each processor deals with its assigned trees , moving from the largest to the smallest .",
    "there is also a dynamic component to the load balancing : when a node has completed all of its assigned trees , it queries another process to see if that one is also finished .",
    "if that process still has an uncomputed tree remaining in its own list , it sends all the necessary tree data to the querying node .",
    "that node then evolves the tree and sends the final state back to the node that had the tree originally .",
    "thus nodes that finish earlier than expected do not remain idle .",
    "the scaling of the code is shown for two different size problems in figure  [ figtiming ] ; the times shown are for when the underlying lcdm model is at low redshift ( z=0.5 ) , meaning that clustering is significant and calculating tree forces dominates the cpu time . at",
    "higher redshift , when the trees are less massive and more diffuse , the timing would be more like that of a pm code ( this can be seen from table  [ tbl-1 ] ) .",
    "these timing tests were run on an sgi origin 2000 with 250 mhz chips ; the scaling on a pc cluster with a fast interconnect was found to be quite similar .",
    "the @xmath41 model is the one shown in figure  [ fighaloh ] ; it scales reasonably well up to the largest @xmath42 we attempted ; compared to @xmath43 , the efficiency is better than 90% at @xmath44 , and 80% at @xmath45 .",
    "when using 32 nodes the code required 512 mbyte per node , so we did not try any smaller runs .",
    "the @xmath46 times are for the same lcdm model except with a smaller box size ( 150 mpc/@xmath47 ) and @xmath48 .",
    "since the largest nonlinear scale is a larger fraction of the box size , a greater fraction of particles ( 37% ) are placed in trees and the largest tree contains a greater proportion of the mass .",
    "this @xmath46 model scales extremely well from 4 to 16 processors , but drops to 70% efficiency at 32 nodes , and beyond 64 nodes does not speed up at all .",
    "the reason for this is that the largest tree in this simulation contains one percent of all particles , which means this one tree takes a few percent of the entire cpu time devoted to trees . as @xmath42 is increased , the time it takes to complete this one tree becomes the major part of the total time .",
    "the solution to this problem is to allow more than one processor to work on the same tree , which is quite possible ( e.g. dav et al .",
    "1997 and the references therein ; see also xu 1995 ) .",
    "the division of the total time between different components of the code is shown in table  [ tbl-1 ] for both low and high redshift . at low redshift",
    "the tree calculations dominate the total time ( as long as this part of the code is load balanced the rise in overhead for the @xmath46 model when @xmath49 is due to imbalance , as discussed above ) . at high",
    "redshift the trees are smaller , so the overhead related to domain decomposition takes a large fraction of the total time ; the main difference between the two redshifts is the rising cost of the tree calculations as trees become more massive and require more timesteps .",
    "comparison with the the p@xmath3 m code of ferrell & bertschinger ( 1994 ) ( made parallel by @xcite ) shows that tpm ( with 30% of the particles in trees ) takes slightly less time than p@xmath3 m if all the trees keep to the pm time step .",
    "allowing trees to have individual time steps speeds up the tpm code by a factor of three to four . in the present implementation ,",
    "particles within the same tree all use the same timestep ; implementing multiple time steps within trees could further save a significant amount of computer time ( roughly another factor of three ) without loss of accuracy .",
    "the memory per process used by our current implementation is @xmath50 reals when there is one cell per particle .",
    "this includes for each particle @xmath51 , and three integer quantities ( a particle i d number , a tree membership key , and the number of steps per pm step ) .",
    "the remaining space is used by the mesh part of the code , and reused as temporary storage during the tree stepping . because the grid density from the previous step is saved , the memory used",
    "could be reduced to @xmath52 at the cost of computing the density twice per step .",
    "the @xmath53 point shown in figure  [ figtiming ] is for the same cosmological model and box size as the @xmath41 run , but with eight times as many particles .",
    "this run shows the great potential of the tpm algorithm . at lower redshifts over 80% of the computational time",
    "is spent finding tree forces precisely that portion of the code which involves no communication ; thus a run of this size would be able to efficiently utilize even more processors .",
    "this does not necessarily mean using a larger supercomputer ; rather , one could use networked pc s or workstations .",
    "these distributed resources could be used to receive a single tree or small group of trees , do the required time stepping in isolation , and send back the final state .",
    "the time required to evolve a single tree varies from less than a second to a couple minutes , so even in situations with a high network latency the cost of message passing need not be prohibitive .",
    "to test how the code performs in a standard cosmological simulation we ran both tpm and the p@xmath3 m code of ferrell & bertschinger ( 1994 ) with the same initial conditions .",
    "the test case contains @xmath54 particles in a 150 mpc/@xmath47 box , with a flat lcdm cosmological model close to that proposed by @xcite : @xmath55 , @xmath56 , @xmath57 km / s / mpc , @xmath58 , and tilt @xmath59 .",
    "the softening length of the particles is @xmath60 kpc/@xmath47 .",
    "the number of mesh points in the pm grid was @xmath46 for the p@xmath3 m run and @xmath54 for tpm .",
    "the tpm threshold density was @xmath61 , so a third of the particles were contained in trees by @xmath62 . in the tree code an opening angle of @xmath63 was used .",
    "figure  [ figsnaps ] shows projected particle positions at the final redshift @xmath62 for a portion of the volume around the largest halo that had formed . one important difference between the two codes can be seen by examining this figure .",
    "it is clear that the largest structures are quite similar in both cases ; but notice that a number of small halos can be identified in the p@xmath3 m snapshot that are not present in tpm . to verify this visual appearance in a more quantitative manner ,",
    "bound halos were identified with denmax ( @xcite ) .",
    "the resulting mass functions for the two codes are shown in figure  [ figcnofm ] .",
    "the agreement is good for trees with more than 100 particles , but the tpm model has fewer small halos with less than 100 particles , confirming the visual impression .",
    "the cause of this difference arises from the choice of @xmath9 .",
    "those objects that collapse early , which through merger and accretion will end up having higher masses , are identified when only slightly overdense and thus are followed at higher resolution throughout their formation . as @xmath9 rises , a halo must reach a higher overdensity before being followed with the tree code , so objects which collapse at late times are simulated at lower resolution . in this test case",
    ", the smallest tree at @xmath62 contains 66 particles , so it is unsurprising that tpm has fewer halos near and below this size .",
    "this effect is shown in a different way in figure  [ figcorrel ] , where the two - point correlation function @xmath64 is shown for the two test runs . for separations",
    "@xmath65mpc there is no discernible difference between the p@xmath3 m and tpm particle correlations .",
    "however , when all particles are included in calculating @xmath66 , the p@xmath3 m code yields a greater correlation at smaller separations .",
    "we also selected from each simulation the particles contained in the 1000 largest halos found by denmax , and redid the calculation with only those particles . in this case , the tpm correlation function is the same as the p@xmath3 m , and in fact is higher for @xmath67 .",
    "this demonstrates clearly that the lower tpm correlation function in the former case is an effect of the higher force resolution of p@xmath3 m in small halos and other regions where @xmath68 . within tpm halos followed as trees ,",
    "the resolution is as good as ( or better than ) in p@xmath3 m ; the difference in @xmath66 computed for halo particles only is most likely due to differences in softening ( the tree code uses a spline kernel while p@xmath3 m uses a plummer law ) and in the time stepping .",
    "the distribution of velocities is also sensitive to resolution effects . to examine this ,",
    "particle pairs were divided into 30 logarithmically spaced bins , with bin centers between 50 kpc and 20 mpc ; for each pair the line - of - sight velocity difference @xmath69 was computed .",
    "histograms showing the distribution of @xmath69 in selected radial bins are shown in figure  [ figvhist ] .",
    "if only particles in the 100 largest halos are considered , the two codes are indistinguishable . but",
    "again , a difference becomes noticeable as more particles are included  the p@xmath3 m halos begin to show more pairs with a small velocity difference ( @xmath70km / s ) .",
    "since the p@xmath3 m code is following smaller halos with higher resolution , these halos have smaller cores and a cooler velocity distribution than tpm halos with the same mass .    in order to compare the properties of individual collapsed objects , we selected a group of halos as follows . first , we chose those denmax halos without a more massive neighbor within 2 mpc/@xmath47 .",
    "the spherically averaged density profile @xmath71 was found for each halo , and a fit to the nfw profile ( navarro , frenk & white 1997 ) was computed by a @xmath72 minimization ; those with less than 99.5% likelihood were excluded from further analysis .",
    "this fitting procedure repositioned the centers onto the densest region of the halo ; we removed those halos where the positions found in the two models differed by more than @xmath73 , in order to be sure that it is the same halo being examined in both cases . figure  [ fighaloprof ] shows the @xmath71 for a few halos selected in this manner ; the agreement is quite good , and within statistically expected fluctuations . if the tpm code had a lower resolution then a broader halo profile with a lower density peak would result , but this is not seen",
    ".    comparisons of other derived properties are shown in figure  [ fighalocomp ] . in each case",
    "we plot the fractional difference of the two models : [ f(tpm)-f(p@xmath3m)]/0.5[f(tpm)+f(p@xmath3 m ) ] .",
    "the top panel shows the number of particles within 1.5 mpc/@xmath47 of the center , and the second panel shows the velocity dispersion .",
    "the agreement in both cases is good the dispersion is 7% and 9% respectively , with no systematic offset or discernible trend with halo mass .",
    "the third panel compares @xmath74 from the nfw fits , which also agrees quite well , the dispersion being 5% . at the low mass end",
    "there are some tpm halos with sizes more than 20% larger , but these are also the ones with the smallest @xmath74 .",
    "the final panel compares the core radius @xmath75 resulting from the nfw profile fits , which shows the most variation between codes .",
    "there are a number of tpm halos with substantially larger cores ( particularly at low mass ) , but the average tpm core size is smaller by 10% than that in p@xmath3 m .",
    "it appears that most tpm cores have in general been followed with the same or higher resolution than obtained with the p@xmath3 m code , but a few have not .",
    "examination of those halos with largest differences often show substructure or high ellipticity , but this is not always the case .",
    "in the current environment , those wishing to carry out high resolution simulations must tailor their approach to exploit parallel and distributed computing architectures . in this paper",
    "we have presented an algorithm for evolving cosmological structure formation which is well suited to such machines . by suitable domain decomposition",
    ", one large volume is broken up into a large number of smaller regions , each of which can be solved in isolation .",
    "this simplifies balancing the load between different processes , and makes it possible to use machines with high latency ( e.g. a large number of physically distributed workstations ) efficiently .",
    "furthermore , it ensures that higher resolution in both space and time is applied in only those regions which require it .",
    "an important parameter in the tpm code is the density threshold . by tying this parameter to the first and second moments of the density distribution , it is possible to follow initially small overdensities as they collapse and thus simulate halo evolution with as high resolution as the more common p@xmath3 m code .",
    "however , it is best to consider only those halos which contain twice as many particles as the smallest tree .",
    "recently @xcite introduced a different method of combining gridded and tree codes called treepm .",
    "this algorithm computes both a pm and a tree force for every particle , which has the advantage of uniform resolution for all particles .",
    "the performance of tpm in lower density regions can always be improved by lowering the density threshold , though this may lead to unacceptably large trees .",
    "another possibility which we intend to investigate , is to create a `` tp@xmath3 m '' , which uses p@xmath3 m rather than pm in the non - tree volume",
    ". this could be quite practicable , since the particle - particle interactions are not expensive to compute when the density is low .",
    "however , it may be that increased force resolution in low density regions is not a true improvement . @xcite and @xcite showed that discreteness and two - body scattering effects become problematic when the force resolution outstrips the corresponding mass resolution .",
    "this led to a recent investigation by @xcite , who concluded that strong two - body scattering can lead to numerical effects , particularly when the local interparticle separation is large or the time step is too long ; slowly moving pairs of particles may suffer interactions which do not conserve energy .",
    "the tpm code will be less prone to such effects because low density regions use lower force resolution ; only as the local mass resolution increases does the force resolution become higher , and simultaneously the time step will tend to become smaller .",
    "this research was supported by nsf grants ast-9318185 and ast-9803137 ( under subgrant 99 - 184 ) , and the ncsa grand challenge computation cosmology partnership under nsf cooperative agreement aci-9619019 , paci subaward 766 .",
    "many thanks to to ed bertschinger for use of his p@xmath3 m code , and lars hernquist for supplying a copy of his tree code .",
    "dum bagla , j.s . 1999 , preprint ( astro - ph/9911025 ) barnes , j. & hut , p. 1986 , nature , 324 , 446 bode , p. , xu , g. & cen , r. 1996 , supercomputing 96 : proceedings of the 1996 acm / ieee supercomputing conference , pittsburgh : ieee computer society ( http://www.supercomp.org/sc96/ ) couchman , h.m.p .",
    "1991 , apj , 368 , l23 couchman , h.m.p .",
    "1997 , in computational astrophysics , ed .",
    "clarke & m.j .",
    "west , ( san francisco : asp ) , 340 dav , r. , dubinski , j. & hernquist , l. 1997 , newa 2 , 277 efstathiou g. , davis , m. , frenk , c. & s. white 1985 , apjs , 57 , 241 ferrell , r. & bertschinger , e. 1994 , int . j. mod .",
    "c , 5 , 933 frederic , j.j .",
    "1997 , ph.d .",
    "thesis , mit gelb , j.m . & bertschinger , e. 1994 , apj , 436 , 467 hernquist , l. 1987 , apjs , 64 , 715 hernquist , l. & katz , n. 1989 , apjs , 70 , 419 hockney , r.w . &",
    "eastwood , j.w .",
    "1981 , computer simulation using particles ( new york : mcgraw hill ) knebe , a. , kravtsov , a.v . , gottlber , s. & klypin , a.a .",
    "2000 , preprint ( astro - ph/9912257 ) kravtsov , a.v . , klypin , a.a . , & khokhlov , a.m. 1997 , apjs , 111 , 73 navarro , j.f . ,",
    "frenk , c.s . &",
    "white , s.d.m .",
    "1997 , apj , 490 , 493 melott , a.l . , splinter , r.j .",
    ", shandarin , s.f . & suto , y. 1997 , apj 479 , l79 norman , m.l . & bryan , g.l .",
    "1999 , in numerical astrophysics , ed .",
    "s. miyama , k. tomisaka & t. hanawa , ( dordrecht : kluwer academic ) , 19 ostriker , j.p . & steinhardt , p.j .",
    "1995 , nature , 377 , 600 pearce , f.r .",
    "& couchman , h.m.p .",
    "1997 , newa 2 , 411 splinter , r.j . ,",
    "melott , a.l . ,",
    "shandarin , s.f . &",
    "suto , y. 1998 , apj , 497 , 38 xu , g. 1995 , apjs , 98 , 355      @xmath46 & 4 & 21.9 & 70.8 & 13.8 & & 19.3 & 117.1 & 2695.0 + @xmath46 & 8 & 11.1 & 35.8 & 7.0 & & 9.7 & 68.8 & 1350.0 + @xmath46 & 16 & 5.6 & 18.6 & 3.8 & & 5.5 & 37.8 & 700.0 + @xmath46 & 32 & 2.9 & 10.0 & 2.0 & & 3.4 & 160.1 & 339.5 + @xmath46 & 64 & 2.0 & 6.8 & 1.0 & & 2.4 & 140.1 & 175.5 + @xmath46 & 128 & 1.4 & 5.7 & 0.5 & & 2.0 & 234.0 & 84.5 + @xmath46 & 256 & 1.6 & 11.7 & 0.2 & & 3.1 & 252.6 & 38.2 +   + @xmath41 & 32 & 27.0 & 80.2 & 8.4 & & 24.5 & 133.5 & 1085.0 + @xmath41 & 64 & 13.8 & 48.5 & 4.2 & & 14.4 & 67.2 & 545.0 + @xmath41 & 128 & 7.6 & 33.4 & 2.1 & & 9.9 & 44.7 & 275.5 + @xmath41 & 256 & 13.6 & 38.4 & 1.1 & & 12.9 & 38.8 & 144.5 +   + @xmath53 & 256 & 69.17 & 136.9 & 9.5 & & 87.1 & 200.8 & 1433.0 +"
  ],
  "abstract_text": [
    "<S> the tree - particle - mesh ( tpm ) n - body algorithm couples the tree algorithm for directly computing forces on particles in an hierarchical grouping scheme with the extremely efficient mesh based pm structured approach . the combined tpm algorithm takes advantage of the fact that gravitational forces are linear functions of the density field . </S>",
    "<S> this allows the use of domain decomposition to break down the density field into many isolated high density regions containing a significant fraction of the mass but residing in a very small volume . at low redshift , @xmath0 of the particles in a typical large cosmological simulation </S>",
    "<S> can be assigned to @xmath1 separate groups occupying @xmath2 of the total volume . in each of these high density regions </S>",
    "<S> the gravitational potential is computed via the tree algorithm supplemented by tidal forces from the external density distribution . for the bulk of the volume , </S>",
    "<S> forces are computed via the pm algorithm ; timesteps in this pm component are large compared to individually determined timesteps in the tree regions . since each tree region can be treated independently , the algorithm lends itself to very efficient parallelization using message passing . </S>",
    "<S> we have tested the new tpm algorithm ( a refinement of that originated by xu 1995 ) by comparison with results from ferrell & bertschinger s p@xmath3 m code and find that , except in small clusters , the tpm results are at least as accurate as those obtained with the well - established p@xmath3 m algorithm , while taking significantly less computing time . </S>",
    "<S> production runs of @xmath4 particles indicate that the new code has great scientific potential when used with distributed computing resources . </S>"
  ]
}