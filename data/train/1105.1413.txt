{
  "article_text": [
    "physical scenarios involving fluids are studied using different numerical methods .",
    "one of these standard methods is the smoothed particle hydrodynamics ( sph ) .",
    "different implementations for newtonian and relativistic euler s equations in three spatial dimension using sph have been studied for many years @xcite .",
    "the idea is to write the evolution equations in cartesian coordinates and using a lagrangian scheme we follow the evolution of the elements of the fluid during the simulation . when the physical problem has spherical symmetry , the standard approach is to rewrite the evolution equations in spherical coordinates , try to find the best way to adjust the parameters of the discretization and then evolve the system under that symmetry @xcite .    in this article",
    "we use the ideas introduced in @xcite ( in the context of numerical evolutions of black holes ) in order to evolve the system of equations written in cartesian coordinates without rewriting the system of equations , only using the symmetries of the problem .",
    "this `` cartoon sph '' technique , can easily be generalized to systems with axial symmetry .",
    "it is very helpful and straightforward task if a standard sph code is already working , providing a simple way to obtain high resolution to evolve the systems with symmetries and obtain accurate results .",
    "the structure of the paper is the following : in section [ sec : standard_sph ] we describe the standard sph .",
    "in section [ sec : hyd_rel_equa ] we describe relativistic euler s equations .",
    "then , in section [ sec : cartoon_sph ] we describe the idea and the implementation of the cartoon sph . in section [ sec : tests ] we present tests for the cartoon sph implementation and finally , in section [ sec : conclusions ] we conclude",
    "the smoothed particle hydrodynamics is a method used to solve numerically hydrodynamical equations .",
    "it is a mesh free method , also called a lagrangian method , because we are not dealing with a fixed grid , instead we use several nodes called particles distributed on the volume of the fluid that we are studying .",
    "the discretization of the functions and their derivatives in the sph method , is carried out in two steps @xcite :    1 .",
    "integral representation of a function : let @xmath0 be a real valued function from @xmath1 .",
    "we use the following identity : + @xmath2 + where the delta function has been approximated by the function @xmath3 called the kernel and @xmath4 -called the smoothing length of the kernel- defines the region where the kernel is different from zero , i.e. @xmath5 . the kernel is a smooth function over @xmath6 specifically over @xmath7 and it is normalized to the unity according to @xmath8 .",
    "@xmath3 is assumed to be symmetric , i.e. it only depends on the norm of the vector @xmath9 .",
    "particle approximation : we change the integration by a sum over discrete volume elements @xmath10 where @xmath11 is the number density , subdividing the fluid in @xmath12 parts we get + @xmath13 + where we use the convention that for any real valued function @xmath14 , with @xmath15 .",
    "the derivatives of any real valued function are obtained using the compact support    @xmath16    the integral over the boundary of the volume @xmath17 is zero because of the compact support of the kernel",
    ". then    @xmath18    following the same procedure we obtain the approximation for the divergence of a vector :    @xmath19",
    "if we want to study the behavior of a fluid in a curved space time we need to use the laws of thermodynamics in curved - space - times , i.e. , local baryon conservation , the first and second laws of thermodynamics plus the local law of energy - momentum conservation @xcite :    @xmath20    choosing a coordinate basis @xmath21 , we express equation ( [ eq : local_em_conservation ] ) as @xmath22 .",
    "now , we assume the fluid can be approximated by a perfect fluid represented by the following stress - energy tensor : @xmath23 . here",
    "@xmath24 is the rest mass - energy density , @xmath25 is the relativistic specific enthalpy , @xmath26 is specific internal energy , @xmath27 is the hydrodynamic pressure and @xmath28 is a quantity known as the artificial viscosity @xcite .    in order to evolve the system for a lagrangian formulation of relativistic hydrodynamic equations we need to do a @xmath29 splitting of the space - time .",
    "the standard way to do this is using the adm formalism , where the space - time is decomposed into an infinite foliation of spatial hyper - surfaces @xmath30 of constant @xmath31 coordinate .",
    "the line element is given by @xmath32 where @xmath33 is the lapse function , @xmath34 the shift vector , and @xmath35 the induced 3-metric on @xmath30 @xcite .",
    "greek indices run from @xmath36 to @xmath37 and latin indices from @xmath38 to @xmath37 .",
    "we can express the quantities either in the coordinate basis @xmath39 or in the basis formed by the eulerian observer @xmath40velocity @xmath41 and the spatial vector basis @xmath42 , @xmath43 ( with @xmath41 and @xmath42 orthogonal ) .",
    "for example , we can express the 4-velocity of a fluid in these two basis : @xmath44 or @xmath45 where @xmath46 and @xmath47 is the lorentz factor .    in order to obtain the lagrangian equations of relativistic hydrodynamics we define the lagrangian derivative as @xmath48 and we write the equations of motion in terms of this derivative .",
    "the local conservation of baryon number is given by @xmath49 where @xmath50 is the relativistic rest mass density , and @xmath51 is the determinant of the induced @xmath52metric .",
    "with the spatial part ( @xmath53 ) of equation ( [ eq : local_em_conservation ] ) we obtain the relativistic momentum equation @xmath54 - \\frac{\\sqrt{-g}}{2}t^{\\alpha\\beta}\\partial_i g_{\\alpha\\beta}\\right ] \\enspace , \\ ] ] with the relativistic specific momentum @xmath55 defined by @xmath56 notice that equation ( [ lagmomentum ] ) contains spatial derivatives of the metric of the space - time . for simplicity , we assume that the fluid interacts very weakly with the space - time , and we are going to use a fixed background .",
    "this means that the metric is given during all our simulation and we can compute the spatial ( and also the temporal ) derivatives either analytically or numerically .",
    "the temporal part ( @xmath57 ) of equation ( [ eq : local_em_conservation ] ) give us the relativistic energy equation :    @xmath58 + \\frac{\\sqrt{-g}}{2}t^{\\alpha\\beta}\\partial_tg_{\\alpha\\beta}\\right ] \\enspace , \\ ] ]    with @xmath59 and @xmath60 is the total relativistic specific energy    @xmath61    finally the system of equations must be closed with an equation of state @xmath62 , we are going to use an ideal gas equation of state    @xmath63      using the ideas and equations introduced in section [ sec : standard_sph ] , the equation of the relativistic momentum can be written as :    @xmath64 \\enspace , \\end{aligned}\\ ] ]    where @xmath65 , and the metric gradients @xmath66 and @xmath67 can be calculated from the given metric .",
    "the relativistic energy equation is @xmath68 \\enspace .\\end{aligned}\\ ] ]    finally , there are two possible ways to obtain the density : the first one is recovering the density by summation , using equation ( [ eq : particle_approx ] ) @xmath69 where we have used @xmath70 .",
    "the second one is integrating the density using equation ( [ eq : baryon_number_conservation ] )    @xmath71    it can be proved that keeping @xmath4 constant , these two equations are equivalent .      in order to handle the shocks that appear evolving euler equations",
    ", we use the extra term @xmath28 as we mentioned before .",
    "this term is the artificial viscosity and it is inspired in the standard artificial viscosity used in @xcite .    in our simulations , we have used the following artificial viscous pressure @xmath72 where @xmath73 & \\mbox{if}\\enspace { \\left ( \\mbox{\\boldmath$\\nabla\\cdot v$ } \\right)}_a < 0 \\\\ 0 & \\mbox{otherwise}\\end{array}\\right .. \\ ] ] the divergence of the velocity for the a@xmath74 particle is @xmath75 where @xmath76 is the relativistic sound velocity measured in the rest frame of the fluid , @xmath77 , @xmath78 and @xmath79 are numerical parameters , @xmath80 , @xmath81 were define as the differences @xmath82 , @xmath83 , and @xmath84 is the mean value of the smoothing lengths of particles @xmath85 and @xmath86 .",
    "this version of artificial viscosity @xcite is equivalent to the invented by monaghan et .",
    "al in @xcite .",
    "it is also possible to use other methods that offer to solve numerically the discontinuities using a solution of the riemman problem for the fluid motion equation @xcite .",
    "that kind of analysis will be part of future works .      at the initial time @xmath87 we have the initial data of our physical problem @xmath88 . with this information , we reconstruct the initial relativistic variables @xmath89,@xmath90 using equations ( [ eq : restmassdensity ] , [ momentumvar ] , [ energyvar ] ) .",
    "we can now integrate the evolution equations to obtain the relativistic variables at the new time @xmath91 .",
    "the next step is to recover the physical variables .",
    "this can be accomplished solving numerically an algebraic equation for @xmath47    @xmath92    where @xmath93 and @xmath94    once the value of @xmath47 is known , it can be calculated the rest - mass density @xmath24 using equation ( [ eq : restmassdensity ] ) , then the thermodynamic pressure @xmath27 from the equation @xmath95 ( @xmath96 ) and the equation of state ( [ eq : eos ] ) , also we can obtain the specific internal energy @xmath26 from @xmath97 and finally the velocity @xmath98 from equation ( [ momentumvar ] ) using @xmath99 .",
    "now we are going to describe how the symmetry of the problem can be used to improve the numerical calculations .",
    "we are going to describe the method using spherical symmetry .",
    "the generalization to cylindrical symmetry is straightforward .    using the cartesian and the spherical coordinate vector basis @xmath100 and @xmath101 respectively",
    ", we identify the axis @xmath102 with the radial direction @xmath103 .",
    "then , we subdivide the sphere in @xmath104 shells .",
    "we impose that each shell has the same mass with the following relation :    @xmath105    with @xmath106 the total mass of the configuration and @xmath107 the inner boundary position of shell @xmath108 ( @xmath109 ) . to assign the position of the _ real particles _ or nodes we use    @xmath110    where @xmath107 is the position of the @xmath108-th real particle .",
    "the third step consists in generate a set of new particles around each real particle .",
    "this can be accomplished building an sphere of radius @xmath111 ( _ smoothing length _ ) and subdividing it in @xmath112 _ virtual particles_. in order to use the 3d sph code we need to assign values of the physical quantities for each virtual particle . by construction we know the position and volume of the virtual particles , then , the physical values required @xmath113 can be assigned interpolating the values of the real particles .",
    "we can compute the mass of each one of the virtual particles using the simple relation @xmath114 .",
    "finally , we can obtain the auxiliar variables @xmath115 and use the 3d sph equations of motion to evolve the @xmath104 particles using for each one @xmath112 virtual particles .      given a physical particle located at @xmath116 , we construct a sphere of radius @xmath111 containing @xmath117 physical particles inside of it .",
    "we use spherical coordinates and split the @xmath118 and @xmath119 angles in @xmath120 and @xmath121 parts respectively .",
    "the radial coordinate is subdivided in @xmath122 parts .",
    "the additional subdivision of the radial coordinate corresponds to the central physical particle .",
    "the positions of the boundaries of the volume elements with respect to the position of the physical particle , are obtained in the following way :    * the radius @xmath111 is subdivided in @xmath122 shells , so the first division is @xmath123 the rest are obtained demanding that all the shells have the same volume , using the recurrence relation @xmath124 \\,\\,\\,\\ , { \\rm with } \\,\\,\\,\\ , \\alpha=1,\\dots , n_r\\ ] ] * @xmath118 is subdivided in @xmath120 equal parts + @xmath125 * @xmath119 is subdivided in @xmath121 equal parts + @xmath126    we identify the position of the virtual particles with the geometrical centers of these volume elements : @xmath127    the first radius is @xmath128 because the central particle has radius @xmath129 and its volume is    @xmath130    with @xmath131 .",
    "the volume of each element constructed can be calculated by an analytical expression    @xmath132      now we must assign physical values to each one of the virtual particles in order to evolve the system with the sph algorithm in cartesian coordinates .    the virtual sphere has been subdivided entirely in @xmath133 volume elements with a virtual particle at the center . lets assign to each one of them a physical value related with the physical quantities .    instead of interpolating for the @xmath112 virtual particles",
    ", we use a subset of @xmath134 auxiliary particles lying on @xmath135-plane ( @xmath136 ) .",
    "-plane ( @xmath136 ) .",
    "we call this set of points the _ fan_. given the radius @xmath137 we interpolate using the real particles .",
    "we show how to assign values to the virtual particles copying the values of the particles in the fan , due to the one to one relation between the particles in the fan and the particles at each @xmath138.,title=\"fig:\",width=264 ] -plane ( @xmath136 ) .",
    "we call this set of points the _ fan_. given the radius @xmath137 we interpolate using the real particles .",
    "we show how to assign values to the virtual particles copying the values of the particles in the fan , due to the one to one relation between the particles in the fan and the particles at each @xmath138.,title=\"fig:\",width=264 ]    the coordinates assigned to each one of the particles in the _ fan _ are given by    @xmath139    the central particle coincides with the physical particle : @xmath140    and we assign physical values to the virtual particles , interpolating the values of the real particles using the radial distance to the origin .",
    "once the fan has been filled , we can copy for all the virtual particles in the sphere rotating around the @xmath141-axis , i.e. , for all the @xmath138 , see figure [ fig : cartoon2 ] .",
    "for the velocity , we interpolate the radial velocity @xmath142 , then we reconstruct the cartesian components of the velocity such that we can introduce them in the sph 3d algorithm .",
    "we use the unitary vector pointing from the origin to the particle @xmath143 with @xmath144 and @xmath145    we identify each @xmath146 with a virtual particle and the implementation in the 3d code is straightforward .      before presenting the simulations obtained using the cartoon sph we verify that the construction of the virtual particles was made in a consistent way",
    ". we present four convergence tests and we present the results in figure [ fig : convergence_virtual ]    * volume approximation : + we check that the volume of the virtual particles and the positions assigned to them are correct .",
    "we compare for a given sphere of radius @xmath4 its analytical volume @xmath147 and the approximated value of the volume using the volumes of the virtual particles ( [ eq : v_v ] ) + @xmath148 + where @xmath149 is the volume of each one of the @xmath112 particles .",
    "figure [ fig : convergence_virtual](a ) shows the behavior of the relative error ( @xmath150 ) as function of the smoothing length .",
    "we can observe that the relative error is always close to the round - off error of the computer . *",
    "normalization of the kernel : + we verify that the relation @xmath151 is properly satisfied .",
    "for the i@xmath74 physical particle we have @xmath152 + then , we compute the error @xmath153 increasing the number of virtual particles .",
    "we present the behavior in figure [ fig : convergence_virtual](b ) .",
    "* derivative of the kernel : + we verify that the approximation for the derivative @xmath154 is satisfied .",
    "the discretization of this equation is @xmath155 we compute the relative error @xmath156 and obtain proper convergence for all the components of the derivative .",
    "we show the error of the derivative in the @xmath141 direction in figure ( [ fig : convergence_virtual](c ) ) .",
    "* density + the last convergence test compares the numerical approximation of a discontinuous profile of density with an initial profile ( @xmath157 ) in a given region of the space : @xmath158 where the subindex @xmath108 labels the position @xmath159 .",
    "again , the relative error is @xmath160 , and the results are presented in the figure ( [ fig : convergence_virtual](d ) ) .",
    "it is important to notice that if we choose a fixed number of particles and change the value of the smoothing length , the relative error remains constant .",
    "now we can proceed to present the main simulations used to test the cartoon implementation .",
    "( defined in the main text ) as a function of the smoothing length .",
    "each line is obtained with a different numbers of virtual particles .",
    "the parameters used for this analysis are @xmath161 , where @xmath162 , @xmath163 and @xmath164 , and @xmath165 .",
    "panel ( b ) shows the error @xmath166 for the kernel approximation using the same number of virtual particles ( @xmath112 ) as before .",
    "it is clear the convergence of the error to zero .",
    "panel ( c ) shows the error @xmath167 of the derivative of the kernel in the @xmath141 direction .",
    "we observe the same behavior as in panel ( b ) .",
    "panel ( d ) presents the error @xmath168 from a discontinuous initial value of the density profile . comparing the exact and the approximated profiles ,",
    "we notice that near the discontinuity , the relative error does not converge to zero , but in all the other regions it has a clear convergence for different numbers of virtual particles.,width=566 ]",
    "we are going to consider a spherical fluid distribution with two regions : the first one @xmath169 $ ] with @xmath170 and the second one @xmath171 $ ] with @xmath172 , here @xmath173 and @xmath174 . we are using units where @xmath175 .",
    "we assume a flat spacetime properly described by the minkowsky metric @xmath176 .",
    "it is clear that the lapse function is @xmath177 and the shift vector @xmath178 , @xmath179 .",
    "the @xmath180 induced on the hyper surface of constant time @xmath31 , @xmath30 , is @xmath181 ( the kronecker - delta ) .",
    "the parameters for the artificial viscosity are @xmath182 , @xmath183 and @xmath184 .    to find the initial distribution of the real particles we use equation ( [ eq : find_shells_t ] )    @xmath185    with @xmath186 the mass contained in the inner and outer regions . in region",
    "@xmath187 the index @xmath108 takes the values @xmath188 and in region @xmath189 , @xmath190 .",
    "we consider @xmath191 as the origin and @xmath192 the radius of the complete sphere .",
    "then we can get easily the recurrence equation    * * region i : * @xmath193 + where @xmath188 . * * region ii : * @xmath194 + where @xmath195 .",
    "the implementation of equation ( [ eq : find_shells ] ) is straightforward @xmath196 in this test we have used @xmath197 and @xmath198 .",
    "we present in the figure ( [ fig : evolution ] ) the physical quantities for the blast wave configuration , with the parameters mentioned above .",
    "the figure contains three different columns corresponding to three different times @xmath199 and @xmath200 . in this panels",
    "we can appreciate the behavior of the physical quantities where the velocities of the particles are very small compared with the speed of light @xmath201 @xcite .",
    "we observe ( from left to right in figure [ fig : evolution ] ) the existence of the _ head _ , _ rarefaction wave _ , _ tail _ , _ contact discontinuity _ and _ shock _ waves .",
    "the behavior of the simulation is similar to the shock tube with some differences in the profile of the velocity between the regions of rarefaction and shock .",
    "the boundaries of the rarefaction zone are called the _",
    "head _ and the _ tail _ , @xcite .",
    "the pressure is continuos in the zone between the tail and shock point ( in the classical problem this is supported by the rankine - hugoniot conditions ) .    in the specific internal energy we notice a difference between the shock tube and the blast wave , in the region after the rarefaction and the contact discontinuity .",
    "all these deformations are result of the spherical symmetry of the problem .    ,",
    "the second to time @xmath202 and the third to time @xmath200 .",
    "the rows are such that the first one is the density profile , the second is the specific internal energy , the third is the thermodynamical pressure and the fourth one is the velocity in the @xmath141 direction , which corresponds to the radial velocity .",
    "all the physical quantities present the same structure as in the shock tube ( the order of the head , tail , contact discontinuity and shock point ) , but with differences in the profile.,height=415 ]    it is clear that all the evolutions have oscillations in the area of the contact discontinuity .",
    "this is the result of the implementation of the artificial viscosity .",
    "it is important to mention that if we increase the number of real particles in the tests this oscillations decrease as we present in figure ( [ fig : oscillations ] ) and it is because the linear interpolation is better with more subdivision in the radial direction .",
    "we used three different values of @xmath203 .",
    "it is also possible to used better interpolations to decrease the oscillations .    .",
    "panel ( b ) we can see how the numerical solution approximate the step function better if the number of particles increase as above.,width=529 ]",
    "the implementation introduced in this article is a successful method that can be used to deal with problems in spherical symmetry with 3 dimensional codes instead of rewriting the equations in that symmetry .",
    "this implementation is simple and can be also applied to problems with axial symmetry . in the same way",
    ", it can also be implemented for the newtonian euler equations @xcite .",
    "the tests we presented here , give a clear idea of the behavior of the cartoon and can be used to perform further analysis and studies of physical and astrophysical scenarios .",
    "[ sec : conclusions ]",
    "this work is supported by grants cic - umsnh-4.23 , promep umich - ca-22 , umich - ptc-210 and conacyt 79601 .",
    "m. alcubierre , s. brandt , b. bruegmann , d. holz , e. seidel , r. takahashi , j. thornburg , symmetry without symmetry : numerical simulation of axisymmetric systems using cartesian grids ."
  ],
  "abstract_text": [
    "<S> we introduce a technique to solve numerically the relativistic euler s equations in scenarios with spherical symmetry using the standard smoothed particles hydrodynamics method in cartesian coordinates . </S>",
    "<S> this implementation allow us to increase the resolution of the simulations in order to obtain accurate results . </S>",
    "<S> we test our implementation studying the evolution of a perfect fluid in a blast wave configuration in a fixed space - time . </S>",
    "<S> the technique can be easily generalized to axial symmetric problems .    </S>",
    "<S> hydrodynamics , sph , numerical implementation </S>"
  ]
}