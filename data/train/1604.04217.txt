{
  "article_text": [
    "consider a pair of mobile robots in an environment represented by a circular disk of unit radius .",
    "the goal of the robots is to find an _ exit _ ,",
    "i.e.  a point at an unknown location on the boundary of the disk , and both move to this exit . the exit is only recognized when a robot visits it .",
    "the robots aim is to accomplish this task as quickly as possible .",
    "this problem is referred to as the _ evacuation problem_. the robots start at the center of the disk and can move with a speed not exceeding their maximum velocity ( which may be different from one another ) .",
    "they can coordinate their actions in any manner they like , and can communicate wirelessly ( instantaneously ) .",
    "evacuation belongs to the realm of distributed search problems , which have a long history in mathematics , computer science , and operations research , see , e.g.  @xcite .",
    "salient features in search problems include the _ environment _ ( e.g.  a geometric one or graph - based ) , _ mobility _ of the robots ( how they are allowed to move ) , _ perception _ of and _ interaction _ with the environment , and their _ computational _ and _ communication abilities_. typical tasks include exploring and mapping an unknown environment , finding a ( mobile or immobile ) target ( e.g.  cops and robbers games  @xcite and pursuit - evasion games  @xcite ; the `` lost at sea '' problem  @xcite ; the cow - path problem and plane - searching problem  @xcite ) , rendezvous or gathering of mobile agents  @xcite , and evacuation  @xcite .",
    "( note that we distinguish between the distributed version of evacuation problems involving a search for an unknown exit , and centralized versions , typically modeled as ( dynamic ) capacitated flow problems on graphs , where the exit is known . ) a general survey of search and rendezvous problems can be found in  @xcite .",
    "also related is the task of patrolling or monitoring , i.e.  the periodic ( re)visitation of ( part of ) the environment  @xcite .    in most all of these settings ,",
    "the typical cost is the time required to finish the task ( in a synchronous environment ) , or the total distance moved by the robots to finish it ( in an asynchronous setting ) .",
    "( patrolling has a different `` cost '' , that being the time between consecutive visits to any point in the region , the so - called `` idle time '' . )",
    "a little explored feature of the robots is their _",
    "speed_. most past work has focused on the case where the robots all share the same ( maximal ) speed .",
    "notable exceptions of which the authors are aware include  @xcite which considers the evacuation problem on the infinite line with robots with distinct maximal speeds , and @xcite where the authors show a non - intuitive ring patrolling strategy using three robots with distinct maximal speeds .",
    "it is this feature , robots with different maximal speeds , that we explore in this paper .",
    "the most relevant previous work is  @xcite , which explores the evacuation problem in the unit disk with two robots with identical speeds ( @xmath6 ) .",
    "we consider the evacuation problem in the unit disk using two robots with distinct maximal speeds ( one with speed @xmath0 , the second with speed @xmath1 ) .",
    "the robots share a common clock and can communicate instantaneously when they have found the exit ( wireless communication ) and so can synchronize their behavior in the evacuation procedure .",
    "we assume that the robots can measure distances to an arbitrary precision ( equivalently , they can measure time to an arbitrary precision ) , and can vary their speeds as they desire , up to their maximum speed .    we show that even in the case of two robots , the analysis involved in finding ( time ) optimal evacuation strategies can become intricate , with strategies that depend on the ( ratio of ) the fast robot s maximal speed . for large @xmath7",
    ", we introduce an efficient search strategy , called the half - chord strategy ( figure  [ fig : chord ] ) .",
    "we generalize a strategy from  @xcite for small @xmath7 , the `` both - to - the - same - point strategy '' ( bsp ) , where the two robots move to the same point on the boundary and then separately explore the boundary in clockwise and counterclockwise directions to find the exit ( figure  [ fig : bsp ] ) .",
    "for values of @xmath8 ( with @xmath9 ) , we show bsp is not optimal by demonstrating that the half - chord strategy is superior to it .",
    "moreover , we improve on this with the fast - chord strategy ( figure  [ fig : fast - chord ] ) , which outperforms half - chord for @xmath10 .",
    "we obtain optimality for all @xmath2 , in the wireless setting , as we demonstrate matching upper and lower bounds on the evacuation time . on the other hand , for @xmath11 we provide lower bounds on the evacuation time that do not match the bounds provided by the respective search strategies ( bsp for @xmath12 , fast - chord for @xmath13 and half - chord for @xmath14 ) .",
    "section  [ sec : definition ] contains a more formal definition of the problem we consider .",
    "section  [ sec : upper ] contains our upper bounds on the evacuation time , while section  [ sec : lower ] has our lower bounds . in the interests of space ,",
    "parts of the proofs are omitted from this version , and we trust the reader to rely upon the supplied diagrams for the intuition of our results .",
    "in this section , we formally define the problem in question .",
    "furthermore , we provide a partition of the strategy space and some observations , which will be useful in the bounds to follow .    given a unit disk and two robots atarting at its center ( the former with maximum speed @xmath15 and the latter with maximum speed @xmath0 ) ,",
    "provide an algorithm such that _ both _ robots reach an unknown exit lying on a boundary point of the disk .",
    "the two robots , namely _ fast _ and _ slow _ , are allowed to move within the entire unit disk , can only identify the exit when they stand on it , and can communicate wirelessly at any time .",
    "an `` evacuation strategy '' is an algorithm on how each robot moves such that both robots have evacuated the disk at the end of its execution .",
    "the following remark is a direct consequence of the geometric environment in which this fast evacuation scenario takes place .    in any evacuation strategy , when either robot discovers the exit , the optimal strategy of the other one immediately reduces to following a beeline to the exit .",
    "we now proceed with identifying key aspects of potential strategies .",
    "a `` both - explore '' strategy is a strategy for both robots to evacuate the disk , where ( in the worst - case ) both of them explore at least two distinct points on the boundary .",
    "we define the set of all both - explore strategies as @xmath16 .",
    "a `` fast - explores '' strategy is a strategy where _ only fast _ explores the boundary searching for the exit .",
    "slow , eventually , only reaches the exit point and at any time it reaches no other point on the boundary of the disk .",
    "we define the set of all fast - explores strategies as @xmath17 .",
    "a `` slow - explores '' strategy is a strategy where _ only slow _ explores the boundary searching for the exit .",
    "fast , eventually , only reaches the exit point and at any time it reaches no other point on the boundary of the disk .",
    "we define the set of all fast - explores strategies as @xmath18 .",
    "notice that for @xmath6 , if only one robot explores the boundary , we randomly assign such a strategy to @xmath17 or @xmath18 .",
    "below , let @xmath19 stand for the set of all evacuating strategies .",
    "@xmath20 forms a partition of @xmath19 .",
    "@xmath21 , since only fast or only slow or both explore the boundary .",
    "@xmath22 , since for any possible strategy at least one robot explores the boundary .",
    "we remark that , when considering @xmath18 and @xmath17 strategies , it can become a burden to forcefully keep the non - exploring robot away from the boundary .",
    "e.g.  if we only want slow to explore in an @xmath18 strategy , the optimal behavior of fast would be to mimic the behavior of slow .",
    "for @xmath17 strategies with @xmath23 , it also proves to be most natural to allow slow to move on the boundary , but to ignore it when slow finds the exit first .",
    "for this reason we use @xmath17 and @xmath18 strategies in this sense .",
    "alternatively , one could also let the non - exploring robot to move @xmath24-close to the boundary .",
    "we do not consider @xmath18 strategies in our analysis .",
    "an optimal @xmath18 strategy is obviously to go to the boundary and explore the boundary clockwise or counterclockwise .",
    "the worst case time is @xmath25 .",
    "the idea for this strategy stems from the proof of the @xmath17 lower bound to follow .",
    "the worst - case analysis is performed for @xmath26 . for the strategy details below",
    ", please refer to .",
    "fast s trajectory is given in blue , while slow s in red .",
    "all arcs are considered in counterclockwise order .",
    "[ [ the - strategy . ] ] * the strategy . * + + + + + + + + + + + + + + +    _ fast _ moves as follows until the exit is found :    * for @xmath27 $ ] : moves toward @xmath28 and * for @xmath29 $ ] : traverses the boundary counterclockwise .",
    "_ slow _ moves as follows until the exit is found :    * : for @xmath30 $ ] moves toward @xmath31 , * : for @xmath32 $ ] moves toward @xmath33 via @xmath34 on disk @xmath35 , * : for @xmath36 $ ] moves toward @xmath28 via the _ mb _ segment .    in , we shortly outline some core measurements on the emerging shape , e.g.  angles and lengths , which will be useful in the proofs to follow .",
    "we now continue with some useful propositions .",
    ".measurements for half - chord strategy [ cols=\"<,<\",options=\"header \" , ]     fast reaches @xmath37 exactly when slow reaches @xmath33 .",
    "fast reaches @xmath37 after @xmath38 time , since it takes @xmath39 time for it to traverse _ ob _ and @xmath40 time to traverse @xmath41 .",
    "slow reaches @xmath31 after time @xmath42 .",
    "then , it traverses @xmath34 for another @xmath43 time for a total of @xmath38 .",
    "fast explores the whole boundary before slow reaches @xmath28 .",
    "slow reaches @xmath33 after @xmath38 time and then has to traverse @xmath44 for another @xmath45 . meanwhile , after @xmath38 time , fast lies on @xmath37 and then has to traverse @xmath46 for another @xmath47 .",
    "it s adequate to see that @xmath48 for any @xmath49 .    the aforementioned proposition , together with the fact that it takes @xmath50 time for fast to explore the whole boundary , provides us with the endtime for phase iii and the strategy in general .    the main result of this section follows from the combination of the upper bounds proved for phase i , ii , and iii in the following subsections .    [ thm : fes_ub ] for any @xmath49 ,",
    "the worst - case evacuation time of the half - chord strategy is at most @xmath51 .    ) ]      [ thm : i ] the half - chord evacuation strategy takes at most @xmath51 evacuation time , if the exit is found during phase i.    we need only care about the time @xmath52 $ ] , since for less time slow has not yet reached the boundary .",
    "imagine that the exit is discovered after @xmath53 time ( for @xmath54 $ ] ) .",
    "for a visualization , the reader can refer to .",
    "slow has covered @xmath53 distance on the _ oc _ segment , while fast has explored an @xmath55 part of @xmath41 .",
    "slow now takes a segment from its current position ( namely @xmath56 ) to the exit @xmath57 . to compute @xmath58 we use the law of cosines in @xmath59",
    "let @xmath60 . in case @xmath61 ,",
    "@xmath62 , and more accurately @xmath63 . in case @xmath64 ,",
    "@xmath65 , and more accurately @xmath66 . since @xmath67 , we can consider the two cases together .",
    "we compute , @xmath68 .",
    "overall , the worst - case evacuation time is given by @xmath69 } \\left\\{\\frac{1+a}{s } + \\sqrt{1 + \\frac{(1+a)^2}{s^2 } + 2\\frac{1+a}{s}\\cos(1/2 - a)}\\right\\ } $ ] . to conclude the proof , it suffices to observe that @xmath70 is an upper bound to the above quantity , since @xmath71 and @xmath72 .",
    "finally , @xmath73 for any @xmath74 .",
    ".45 ) , title=\"fig : \" ] [ fig : phasei ]    .45 ) , title=\"fig : \" ] [ fig : phaseii ]      [ thm : ii ] the half - chord evacuation strategy takes at most @xmath51 evacuation time , if the exit is found during phase ii .",
    "we prove that the worst - case placement for the exit is point @xmath37 .",
    "suppose the exit @xmath57 is found at the time when slow lies on point @xmath75 and has not yet covered a @xmath76 part of @xmath34 .",
    "the corresponding central angle is @xmath77 , since @xmath34 is an arc on @xmath78 .",
    "at the same time , fast has not yet explored an @xmath79 part of @xmath41 with a corresponding central angle of size @xmath79 .",
    "then , slow can move backwards on the boundary of @xmath78 for another @xmath76 distance to point @xmath56 .",
    "now , the central angle from @xmath56 to @xmath33 is @xmath80 and matches the central angle between @xmath57 and @xmath37 .",
    "thence , due to shifting by the same central angle , we get @xmath81 . moreover , since @xmath82 and @xmath83 , triangles @xmath84 and @xmath85 are congruent meaning that @xmath86 . to sum up ,",
    "if the exit is discovered @xmath76 time before slow reaches @xmath33 , it takes at most another @xmath87 time for it to reach it .",
    "at the same time , it would take @xmath87 for it to reach @xmath37 .",
    "hence , exiting through @xmath37 is the worst - case scenario and yields a total time of @xmath51 .",
    "[ thm : iii ] the half - chord evacuation strategy takes at most @xmath51 evacuation time , if the exit is found during phase iii .    since @xmath88 time",
    "has already passed at the beginning of phase iii , it suffices to show that at most @xmath45 time goes by when the exit is discovered within @xmath46 .",
    "suppose that the exit is discovered @xmath76 time units after the beginning of phase iii .",
    "then , slow lies at @xmath31 ( ) , @xmath76 distance away from @xmath33 on the @xmath44 segment . on the other hand , fast lies on @xmath57 , an @xmath79 distance away from @xmath37 on @xmath46 .    consider a disk with center @xmath31 and radius @xmath89 .",
    "one can notice that @xmath90 intersects @xmath91 at two points : one of them is @xmath28 and the other one is @xmath56 , where @xmath56 is included in @xmath46 , since @xmath92 for any choice of @xmath93 .",
    "moreover , we draw the chord @xmath94 and its middle point , say @xmath95 . now , notice that @xmath96 is perpendicular to @xmath94 , since @xmath94 is a chord of @xmath91 and also that @xmath96 passes through @xmath31 , since @xmath94 is also a chord of @xmath90 . to conclude",
    ", we exhibit that @xmath57 is included in @xmath97 .",
    "equivalently , that @xmath98 .",
    "we look into two cases .    first , that @xmath99 . in this case",
    ", we compute @xmath100 , since @xmath101 and @xmath102 from the fact that @xmath103 ( @xmath96 ) bisects @xmath104 ( @xmath94 ) .",
    "moreover , @xmath105 .",
    "we compute @xmath106 by the right triangle @xmath107 .",
    "finally , @xmath108 , since @xmath109 for @xmath110 .    for the second case , @xmath111 .",
    "then , @xmath112 , again by using the equalities deriving from bisecting the chords .",
    "the rest of the proof follows as before .",
    ".45 ; the exit @xmath57 lies at the end of the blue arrow),title=\"fig : \" ] [ fig : iiii ]    .45 ; the exit @xmath57 lies at the end of the blue arrow),title=\"fig : \" ] [ fig : iiiii ]      we first observe that , for @xmath114 , the name `` half - chord '' is slightly misleading , as the points @xmath37 , @xmath28 , and @xmath33 coincide .",
    "the time needed for @xmath115 is , as shown in theorem [ thm : fes_ub ] , @xmath50 .",
    "note also that the half - chord strategy is a bes strategy for @xmath114 .    for @xmath116 ,",
    "slow can simply move even slower , namely with speed @xmath117 . using the same paths as for @xmath114 ,",
    "this provides the same upper bound of @xmath50 .    for @xmath113",
    ", the ( generalized ) half - chord strategy leads to a @xmath50 evacuation time .",
    "this @xmath16 strategy follows the same key idea presented in @xcite where proven to be optimal for @xmath118 .    the strategy .",
    "in the _ both - to - the - same - point strategy _ ( shortly _ bsp _ strategy ) , initially both robots set out toward the same boundary point moving in a beeline .",
    "once they arrive there , they move to opposite directions along the boundary . without loss of generality , fast moves counterclockwise along the boundary , while slow moves clockwise .",
    "this goes on , until the exit has been found by either robot or the robots meet each other on the boundary .",
    "for a visualization of the strategy , see .",
    "fast s trajectory is given in blue , while slow s in red .",
    ".45     strategy and an evacuation example ]    [ fig : bsp ]    .45     strategy and an evacuation example ]    [ fig : cos ]    below , we restrict the analysis of the bsp strategy only for @xmath119 $ ] , since for @xmath120 the strategy presented in the previous section yields a stronger upper bound .",
    "the rest of the section is devoted to proving the main theorem .",
    "[ thm : bsp ] the bsp strategy requires evacuation time at most @xmath121 when @xmath122 $ ] .",
    "[ thm : bsp1 ] it takes at most @xmath123 time ( where @xmath119 $ ] ) for both robots to evacuate in the @xmath124 strategy , when the exit is found before the slow robot has reached the boundary .",
    "let @xmath55 stand for the distance fast has explored on the boundary before finding the exit .",
    "notice that @xmath125 , since @xmath55 stands for a covered distance before slow reaches the boundary . the total evacuation time is the time needed for fast to find the exit and then for slow to reach it .",
    "let @xmath126 stand for the latter .",
    "then , the worst - case evacuation time is @xmath127 , where @xmath128 by the cosine law in the formed triangle ( @xmath129 in with @xmath130 , @xmath131 and @xmath132 ) .",
    "let @xmath133 .",
    "then , @xmath134 for any @xmath135 .",
    "consequently , @xmath136 is a non - decreasing function of @xmath55 in this interval meaning that the maximum is attained on @xmath137 .",
    "this results to a worst - case time of @xmath123 .",
    "[ thm : bsp2 ] in the @xmath124 strategy ( where @xmath119 $ ] ) , when the exit is found after slow has explored some part of the boundary , the evacuation time is at most    * @xmath138 , when the angle between the two robots is less or equal to @xmath139 and * @xmath140 when the angle is between @xmath139 and @xmath141 .",
    "let @xmath142 stand for the distance fast has covered on the boundary to find the exit counted only after slow has started exploring . using this notation ,",
    "the explored part of the boundary is a function of @xmath143 , namely @xmath144 , since slow explores distance @xmath145 , while fast explores distance @xmath142 , and an @xmath146 part has already been covered .",
    "the name @xmath147 is chosen , since the quantity also represents the angle between the robots from the center of the unit disk .",
    "we break the analysis into two cases :    * @xmath148 : + in this case , @xmath149 , which results to @xmath150 .",
    "notice that the bound is @xmath151 for @xmath152 $ ] .",
    "the worst - case evacuation time is given by computing the function @xmath153 , where the last addend accounts for the chord length needed to be covered by slow .",
    "we denote @xmath154 the function to be maximized . similarly to before",
    ", we can see that @xmath155 for any choice of @xmath119 $ ] and any @xmath156 $ ] .",
    "hence , the maximum is attained at @xmath157 for a worst - case time of @xmath138 . *",
    "@xmath158 : + in this case , @xmath159 .",
    "the function to be maximized is again @xmath154 .",
    "the maximum is attained for @xmath160 yielding an upper bound of @xmath140 for @xmath161 .",
    "finally , notice that we need not care about the case where slow finds the exit , since the time taken for fast to traverse the same chord will be less than the worst - case examined .      in the half - chord strategy for @xmath114 , we observe that the final point reached after phase i , that is point @xmath31 , lies on the disk boundary .",
    "thence , after that , slow explores @xmath162 , but so does fast ( since by its strategy it explores the whole boundary ) .",
    "this seems like an unnecessary double - exploring of this part of the boundary .",
    "thus , we propose a new strategy , where fast reaches @xmath31 as usual , but then traverses the @xmath163 chord , instead of @xmath162 .",
    "furthermore , we could variate the position of @xmath31 , in order for fast to reach @xmath28 ( for the second time ) exactly when slow reaches @xmath56 ( a point before @xmath28 ) and so get fast to explore some part of the boundary in clockwise fashion as well . in this case ,",
    "slow does not traverse the whole @xmath162 .",
    "let us now describe more formally this _ fast - chord _ family of strategies .",
    "all arcs are considered in _",
    "fashion unless otherwise stated . in the description below , let @xmath164 , @xmath165 , @xmath166 , @xmath167 and @xmath168 . for a pictorial representation",
    ", the reader can refer to .",
    "the strategy .",
    "_ fast _ moves as follows until the exit is found :    * for @xmath27 $ ] moves toward @xmath28 , * : for @xmath169 $ ] traverses @xmath41 , * : for @xmath170 $ ] traverses @xmath171 , * : for @xmath172 $ ] traverses @xmath163 and * : for @xmath173 $ ] moves toward @xmath56 ( clockwise ) till it meets slow .",
    "_ slow _ moves as follows until the exit is found :    * for @xmath174 $ ] moves toward @xmath31 , * for @xmath175 $ ] traverses @xmath176 , * for @xmath177 $ ] traverses @xmath97 till it meets fast .",
    "the following system of equations describes the relationship between the variable distances :    @xmath178    equation ( i ) suggests how the disk boundary is partitioned .",
    "equation ( ii ) suggests that @xmath179 is the chord of an arc with length @xmath180 . equation ( iii )",
    "suggests that fast traverses @xmath181 and @xmath179 at the same time as slow traverses @xmath182 .",
    "that is , since fast lies on @xmath37 exactly when slow lies on @xmath31 , then fast arrives at @xmath28 ( for the second time ) exactly when slow arrives at @xmath56 .",
    "the latter happens at time @xmath183 .",
    "the remaining @xmath184 part of the boundary can be explored in time @xmath185 , since both robots explore it concurrently until they meet .",
    "hence , within @xmath185 time , they can explore a distance equal to @xmath186 .",
    "all variables are non - negative , since they represent distance .",
    "the idea behind this paradigm is to try different values for @xmath184 and then solve the above system to extract @xmath187 and @xmath182 . nonetheless , due to the @xmath188 function in equation ( ii ) , a symbolic solution is not possible to obtain .",
    "thence , we hereby provide bounds computed _",
    "numerically_. for any value of @xmath7 , we iterate over all possible @xmath184 values and then solve the above system numerically . for each @xmath184 value and for each exploration phase",
    ", we use a small time step and compute the worst - case evacuation time .",
    "then , we can select the @xmath184 value which minimizes this worst - case time .",
    "all this numerical work is implemented in matlab .",
    "we iterate over @xmath184 with a step of @xmath189 in the interval @xmath190 $ ] .",
    "the upper bound for @xmath184 stems from the case @xmath191 .",
    "indeed , notice that for @xmath118 , fast - chord is exactly @xmath124 , when we set @xmath191 .",
    "for the time parameter , namely @xmath192 , we again use a step of @xmath189 in the interval @xmath193 $ ] .",
    "we use a parametric representation of the disk ( where the center @xmath194 lies on coordinates @xmath195 ) to calculate the _ euclidean distance _ between the two robots .",
    "below , let @xmath196 and @xmath197 stand for the @xmath198 coordinates of fast s position and similarly @xmath199 and @xmath200 for slow .",
    "the distances between the two robots at any given time are as follows :    phase i. at time @xmath169 $ ] , fast has covered an @xmath201 part of @xmath41 ( until point @xmath202 ) , while slow has covered a @xmath192 part of @xmath203 ( until point @xmath204 ) ; see .",
    "their distance is given by applying the cosine law in @xmath205 .",
    "we compute the _ in - triangle _",
    "angle @xmath206 . in case that @xmath207 ( case i ) , then @xmath208",
    "otherwise , if @xmath209 ( case ii ) , then @xmath210 . in either case , @xmath211 , since @xmath212 for any @xmath213 .",
    ".45        [ fig : fcii ]    .45        [ fig : fciii ]    phase iia . at time",
    "@xmath214 $ ] , both robots are traversing their respective arcs in counterclockwise fashion .",
    "their positions are the following :    @xmath215 @xmath216    taking into account the initial timestep when they begin traversing their corresponding arcs and the starting position of slow s arc .",
    "their distance is given by @xmath217 .",
    "phase iib . while slow continues on the same arc and",
    "so its coordinates remain the same as in phase iia , fast is now traversing the @xmath163 chord .",
    "its corresponding position is @xmath218 where we take into account the direction from @xmath31 to @xmath28 , the starting point @xmath31 , the speed and the initial time step .",
    "the normalization factor @xmath179 provides us with an actual distance instead of a percentage .",
    "the above results to @xmath219 being @xmath220    phase iic .",
    "again , slow is always on the same motion and its corresponding parametric equations do not need to change . fast , on the other hand , commences a clockwise traversal on @xmath221 and so @xmath222 where fast commences from position @xmath141 on the boundary and moves clockwise with speed @xmath7 after time step @xmath223 .    by studying the numerical bounds we obtain via the fast - chord method , we state the following result , in comparison to the other two strategies researched in this paper .",
    "fast - chord performs better than ( generalized ) half - chord for @xmath224 . it also performs better than both - to - the - same - point for @xmath225 .",
    "the main tool behind our lower bounds is the following lemma from @xcite .    [ 5 ] consider a boundary of a disk whose subset of total length @xmath226 has not been explored for some @xmath227 and @xmath228 .",
    "then there exist two unexplored boundary points between which the distance along the boundary is at least @xmath229 .",
    "[ thm : fes_lb ] any @xmath17-strategy takes at least    * @xmath50 time for any @xmath119 $ ] and * @xmath51 time for any @xmath49 .    to start with , any @xmath17 strategy takes at least @xmath230 time ( for @xmath231 ) , since an adversary may choose to place the exit at a point just before the time when fast finishes exploring the whole boundary .",
    "this yields a lower bound of @xmath232 for any @xmath15 .",
    "we now show a better bound for @xmath49 . at time @xmath53 ( where @xmath233 ) ,",
    "fast has explored at most an @xmath55 part of the boundary .",
    "then , if we consider the time @xmath234 ( where @xmath231 ) , a @xmath235 subset of the boundary has not yet been explored .",
    "we bound @xmath236 such that @xmath237 holds .",
    "we now apply lemma [ 5 ] with @xmath238 and @xmath239 .",
    "thence , there exist two unexplored boundary points between which the distance along the boundary is at least @xmath229 .",
    "let us now consider the perpendicular bisector of the chord connecting these two points .",
    "depending on which side of the bisector slow lies , an adversary may place the exit on the boundary point lying at the opposite side .",
    "the best case for slow is to lie exactly on the point of the bisection .",
    "that is , slow will have to cover a distance of at least @xmath240 , where @xmath241 is the chord length . in this case , the overall evacuation time is equal to @xmath242 and for the best lower bound we compute @xmath243 .",
    "the rest of the proof reduces to computing the maximum of this function with respect to @xmath55 .",
    "finally , notice that the latter bound is equal to @xmath244 for @xmath115 and greater than @xmath244 for @xmath120 .",
    "[ thm : bes ] any @xmath16-strategy takes at least    * @xmath245 time for @xmath246 , * @xmath247 for @xmath248 $ ] ( where @xmath249 ) and * @xmath250 time for @xmath251 .    at time @xmath0 , fast has explored at most @xmath146 distance on the boundary , since it needs @xmath39 time to reach the boundary and in the remaining @xmath252 time it can traverse @xmath253 distance . at time @xmath254 , where @xmath255 is a variable , fast has explored at most an @xmath256 part of the boundary and slow has explored at most a @xmath182 part of the boundary .",
    "we derive an upper bound for the variable @xmath182 by noticing that the whole explored part can be strictly less than @xmath141 ( otherwise the exit has already been found ) : @xmath257 .",
    "then , the unexplored part is strictly greater than @xmath258 .",
    "notice that we need @xmath259 , otherwise we get @xmath260 which contradicts the @xmath255 initial statement .",
    "we let @xmath261 , where @xmath229 is the quantity from lemma [ 5 ] .",
    "we apply the restriction that @xmath262 , which holds for @xmath263 .",
    "moreover , @xmath264 holds for any @xmath15 given that @xmath265 .",
    "now , let us apply lemma [ 5 ] : there exist two unexplored points with arc distance @xmath266 , which implies that the chord between them has length at least @xmath267 .",
    "an adversary can put the exit on any of the two endpoints .",
    "if slow reaches an endpoint first ( case i ) , then the exit is placed on the other side , such that slow has to traverse the chord .",
    "if fast reaches an endpoint first , then the exit is placed either on the other side ( case ii ) , meaning that fast has to traverse the chord , or on the endpoint that lies the farthest from slow current position ( case iii ) , meaning that slow has to traverse at least half the chord .",
    "we assume that both the robots and the adversary behave optimally .",
    "hence , the robots will always avoid case i. then , the adversary will apply case ii , for @xmath246 , and iii for @xmath49 .",
    "let @xmath268 and @xmath269 . totally , the worst - case evacuation time is given by    * @xmath270 , when in case ii and * @xmath271 , when in case iii .",
    "the rest of the proof reduces to computing the maximum of these functions , with respect to @xmath182 .",
    "one may observe that the above lower bound , although it is quite strong for small values of @xmath7 , loses its value as @xmath7 grows .",
    "this happens due to the fact that in the proof we consider only a specific moment of a both - explore strategy , where both robots have already explored some part of the boundary .",
    "thus , there is a need to capture a lower bound for the case where slow has not explored any part of the boundary yet .",
    "this is possible , since we can apply a similar fast - explores lower bound idea also to the both - explore strategies when @xmath7 is big enough .",
    "[ thm : antipodal ] any @xmath16-strategy takes at least    * @xmath250 time for @xmath272 , where @xmath273 , and * @xmath51 time for @xmath274 .",
    "one need only notice that , for @xmath275 , at time @xmath276 , a @xmath277 part of the boundary is yet unexplored , where @xmath278 . moreover , slow has not reached the boundary yet .",
    "hence , we can view this as a fast - explores subcase .",
    "then , we can compute @xmath279 } \\left\\{\\frac{1+a}{s } + \\sin\\left(\\frac{a}{2}\\right)\\right\\}$ ] . due to the upper bound change for @xmath55 ,",
    "the analysis provides a @xmath250 lower bound for @xmath280 $ ] and the already visited @xmath51 for @xmath274 .",
    "we now obtain numerical values for a stronger @xmath16 lower bound by performing a more complex analysis on the _ original @xmath16 _ lower bound proof given in lemma [ thm : bes ] .",
    "the main idea behind the improvement is to provide a better bound for case iii of the proof , i.e. when the adversary places the exit on the farthest endpoint from slow s current position .",
    "apparently , the best play for slow is to lie exactly on the midpoint of the chord with the unexplored endpoints .",
    "nevertheless , in order for slow to be there , it needs to spend some of its time , originally destined for exploration , within the disk interior .",
    "we hereby examine the best possible scenario for slow in terms of its distance from the midpoint following the above reasoning .",
    "let us refer to this lower bound as _ improved _ @xmath16 .",
    "[ thm : besnew ] improved @xmath16 is greater or equal to original @xmath16 for any @xmath15 .    at time @xmath254 , where @xmath255 is a variable , fast has explored at most an @xmath256 part of the boundary and slow has explored at most a @xmath182 part of the boundary .",
    "now , in extension to the previous lower bound , suppose that slow has spent @xmath281 time , where @xmath282 $ ] , _ not exploring _ the boundary , i.e. moving within the disk interior .",
    "notice that it takes @xmath283 time for the whole perimeter to be explored , when both robots are exploring after timestep @xmath0 ( a subcase of @xmath124 bounds ) .",
    "thence , we upper - bound @xmath284 . to lower - bound @xmath182",
    ", we restrict the unexplored part @xmath285 .",
    "that is , we get @xmath286 .",
    "moreover , @xmath287 is already covered by the aforementioned upper bound .",
    "now , we are ready to apply lemma [ 5 ] : there exist two unexplored points ( say @xmath288 ) with arc distance @xmath289 , which implies that the chord between them has length at least @xmath290 .",
    "an adversary could place the exit on any of the two endpoints .",
    "if slow reaches an endpoint first ( case i ) , then the exit is placed on the other side , such that slow has to traverse the chord .",
    "if fast reaches an endpoint first , then the exit is placed either on the other side ( case ii ) , meaning that fast has to traverse the chord , or on the endpoint that lies the farthest from slow s current position ( case iii ) , meaning that slow has to traverse at least half the chord .",
    "we assume that both the robots and the adversary behave optimally .",
    "hence , the robots will always avoid case i.    let us now examine more carefully what happens in case iii .",
    "for a depiction of the proof , see .",
    "the ideal location for slow is to lie exactly on the chord midpoint , say @xmath33 .",
    "nevertheless , this may not be possible due to it only spending @xmath281 time within the disk interior .",
    "let us consider the minimum distance from the chord midpoint to the boundary .",
    "this is exactly @xmath291 , where @xmath292 is the distance from the midpoint to the center of the disk .",
    "notice that @xmath103 intesects @xmath104 _ perpendicularly _ , since @xmath33 is the midpoint of chord @xmath104 . using the pythagorean theorem in @xmath293 , we get @xmath294 .",
    "if we consider the case when @xmath295 , then the ideal position for slow is to lie @xmath281 distance away from the boundary and on the extension of @xmath103 ( i.e. on point @xmath296 ) .",
    "from there , slow can take a beeline to the exit yielding a @xmath297 distance again by the pythagorean theorem , now in @xmath298 .    to conclude , slow will try to minimize this beeline distance over @xmath281 , while the adversary will select a case between ii and iii that maximizes the total distance .",
    "overall , the optimization problem reduces to computing :    @xmath299}\\frac{2}{s}\\sin\\left(\\frac{s -1 + ( s+1)y - k}{2}\\right ) , \\\\     \\min\\limits_{k \\in [ 0 , y ] } \\sqrt{\\sin^2\\left(\\frac{s - 1 + ( s+1)y - k}{2}\\right ) + \\max\\left\\{1 - \\lambda - k , 0\\right\\}^2 } \\\\    \\end{array }    \\right\\ } \\right\\}\\ ] ]    note that the above bound matches the original one for the cases where @xmath300 .",
    "last but not least , we need also consider the case where the adversary chooses to place the exit on the last boundary point to be explored . in the current setting",
    ", it takes at least @xmath301 extra time for both robots to explore the rest of the boundary , since fast explores @xmath302 while slow explores @xmath303 for a total distance of @xmath229 .",
    "overall , we are looking to compute :    @xmath304 } \\left\\{1+y+\\frac{2\\pi - s + 1 - ( s+1)y + k}{s+1 } \\right\\ } =     \\max\\limits_{y \\in \\left[y_{min } , y_{max}\\right ) }   \\left\\{1+y+\\frac{2\\pi - s + 1 - ( s+1)y}{s+1 } \\right\\}\\ ] ]    due to the inherent complexity of the optimization problem in ( 1 ) , we compute _ numerical _ bounds .",
    "the expressions ( 1 ) and ( 2 ) are computed and the maximum of them is chosen as the best - play scenario for an adversary . the computational work is done in matlab .",
    "we iterate over feasible values of variables @xmath182 and @xmath281 with a step of @xmath305 . for fast s speed @xmath7 , we iterate with a step of @xmath306 .",
    "the resulting experimental bounds show that , for all @xmath307 , this lower bound is greater or equal to the lower bound given in lemma [ thm : bes ] .",
    "the numerical results we get from the above proof demonstrate the two robots _ always _",
    "choose @xmath308 as the value of their minimizer .",
    "that is , it appears that spending any of their `` exploration time '' off the boundary should not provide any assistance to the robots .    ]",
    "for each value of @xmath7 we select the minimum ( weakest ) lower bound between the ( maximum ) @xmath16 and @xmath17 ones as our overall lower bound ; see .",
    "we see that improved @xmath16 is stronger than original @xmath16 one for any @xmath309 .",
    "moreover , improved @xmath16 is stronger than the @xmath17 lower bound for @xmath310 .",
    "we notice that half - chord outperforms bsp for any @xmath311 .",
    "besides , fast - chord outperforms bsp for any @xmath309 .",
    "finally , fast - chord outperforms half - chord for any @xmath312 . that is , the introduction of fast - chord yields a better upper bound for any @xmath313 $ ] .          by comparing upper and lower bounds",
    ", we see that half - chord is optimal for @xmath314 , since the matching @xmath17 lower bound is the weakest in this interval . on the other hand , for @xmath315",
    "the ratio between the bounds is at most @xmath4 ( maximized when @xmath316 ) , where the strategy changes from bsp to fast - chord .",
    "the best strategy to use is @xmath124 when @xmath12 , fast - chord when @xmath317 and half - chord for @xmath318 .",
    "optimality for the case @xmath319 remains open .",
    "regarding further work on this topic , one could consider extending these results to a more - than - two - robots evacuation scenario .",
    "moreover , the non - wireless case for two - robots fast evacuation seems to be a quite challenging open problem given the fact that exact optimality appears to be complex to obtain even for @xmath118 ( @xcite ) .",
    "h.  li and k p.  chong .",
    "search on lines and graphs .",
    "48th ieee conference on decision and control , 2009 held jointly with the 2009 28th chinese control conference .",
    "( cdc / ccc 2009 ) _ * 109(11 ) * , pp ."
  ],
  "abstract_text": [
    "<S> in the fast evacuation problem , we study the path planning problem for two robots who want to minimize the worst - case evacuation time on the unit disk . </S>",
    "<S> the robots are initially placed at the center of the disk . in order to evacuate , they need to reach an unknown point , the exit , on the boundary of the disk . </S>",
    "<S> once one of the robots finds the exit , it will instantaneously notify the other agent , who will make a beeline to it .    </S>",
    "<S> the problem has been studied for robots with the same speed  @xcite . </S>",
    "<S> we study a more general case where one robot has speed @xmath0 and the other has speed @xmath1 . </S>",
    "<S> we provide optimal evacuation strategies in the case that @xmath2 by showing matching upper and lower bounds on the worst - case evacuation time . for @xmath3 , </S>",
    "<S> we show ( non - matching ) upper and lower bounds on the evacuation time with a ratio less than @xmath4 . </S>",
    "<S> moreover , we demonstrate that a generalization of the two - robot search strategy from  @xcite is outperformed by our proposed strategies for any @xmath5 . </S>"
  ]
}