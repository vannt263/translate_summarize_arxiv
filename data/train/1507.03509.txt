{
  "article_text": [
    "_ beacon attraction _ has come to the attention of the community recently as a model of greedy geographical routing in dense sensor networks . in this application",
    ", each node of the network has a location , and each communication packet knows the location of its destination .",
    "nodes having a packet to deliver forward the packet to their neighbor that is the closest ( using euclidean distance ) to the packet s destination @xcite .    in the abstract geometric setting , the destination point is called a beacon , and the message is considered to be a point ( or robot ) that greedily moves towards the beacon .",
    "the robot , under this motion , may or may not reach the beacon  if it does reach the beacon , we say that the beacon _ attracts _ the robot s starting point .",
    "the attraction relation between points has the flavor of a visibility - type relation , with the interesting twist that it is asymmetric : if point @xmath0 attracts point @xmath1 , then it does not follow that point @xmath1 attracts @xmath0 . in a series of publications , biro , gao ,",
    "iwerks , kostitsyna , and mitchell have studied various visibility - type questions for beacon attraction , such as computing attraction ( and inverse - attraction ) regions for points , computing attraction kernels , guarding , and routing @xcite . in a recent paper , bae , shin , and vigneron studied guarding via attraction in orthogonal polygons @xcite .    in beacon - based routing ,",
    "the goal is to route from a source @xmath0 to a destination @xmath1 through a series of intemediate points @xmath8 where @xmath3 attracts @xmath1 , @xmath10 attracts @xmath3 , @xmath11 attracts @xmath10 , etc .",
    ", and finally @xmath1 attracts @xmath5 .",
    "the idea is that we activate the beacons @xmath8 individually in turn , and then activate a beacon at @xmath1 , and we will have attracted @xmath0 all of the way to @xmath1 . in the application setting , this corresponds to using greedy geographical routing for each hop in a multi - hop routing for the packet ; beacons correspond to _ landmark _ or _ backbone _ nodes of the network @xcite .",
    "ad - hoc networks ( and to some extent , sensor networks ) expect to see messages from many different @xmath0 s to many different @xmath1 s .",
    "thus it is natural to ask whether we can find some set @xmath6 of backbone nodes ( beacons ) such that one can route from _ any _ @xmath0 to _ any _ @xmath1 using only backbone nodes chosen from @xmath6 .",
    "we ll call such a set @xmath6 a _ routing set of beacons_. biro et al.@xcite studied the problem of finding minimum - cardinality routing sets of beacons in simple polygons .",
    "they established that it is np - hard to find such a minimum - cardinality @xmath6 , and that such a @xmath6 can be as large as , but never exceed , @xmath12 .",
    "biro also conjectured @xcite that , in orthogonal polygons , such a @xmath6 could be as large as , but never exceed , @xmath13 . in this paper",
    ", we disprove this conjecture , pinning this maximum minimum size at @xmath9 instead .",
    "we organize the remainder of this paper as follows . in section 2 , we define some more terminology and study the decomposition we use . in section 3 , we investigate the main technical obstacle to using direct induction on the problem , which we call _ trapped paths_. we also show there how to overcome this obstacle . in section 4 , we prove the upper bound ( over all orthogonal polygons ) on the maximum size of a minimum - sized routing beacon set . in section 5 ,",
    "we show a construction for arbitrarily large polygons where the minimum size of the routing beacon set for the polygon matches the upper bound .",
    "we give concluding remarks in section 6 .",
    "and @xmath14 under the influence of a beacon at @xmath1 . ]",
    "we first restrict our attention to polygons .",
    "let @xmath0 be a robot ( a mobile point ) in a polygon @xmath15 , and @xmath16 be a stationary beacon .",
    "we consider the motion of @xmath0 under the influence of @xmath1 , which we call the _ attraction path _ of @xmath0 given beacon @xmath1 ( refer to figure [ fig : attraction ] ) .",
    "whenever @xmath0 can move in a straight line towards @xmath1 inside @xmath15 , then it follows that straight line until it either reaches @xmath1 or the boundary of @xmath15 .",
    "whenever @xmath0 can not move in a straight line towards @xmath1 inside @xmath15 , then it is on the boundary . in this case",
    ", it will move along the boundary in the direction that decreases its distance to @xmath1 , if such a direction exists .",
    "the path that @xmath0 follows may alternate between boundary and straight - toward-@xmath1 sections .",
    "the figure shows the attraction paths of @xmath17 and @xmath14 in thick lines , with construction lines from @xmath1 shown in thin lines .",
    "if the attraction path of @xmath0 given beacon @xmath1 reaches @xmath1 , then we will say that @xmath1 _ attracts _ @xmath0 ; in the figure , @xmath1 attracts @xmath18 .",
    "an attraction path may not reach @xmath1 for three different reasons .",
    "first , it can become stuck on an edge at a point where the edge is perpendicular to the line to @xmath1 , as is the case with @xmath19 becoming stuck at @xmath20 in the figure .",
    "second , it can become stuck at a convex vertex with both edges heading away from @xmath1 , as is the case with @xmath21 becoming stuck at @xmath22 in the figure .",
    "last , a point may start at , or be attracted to , a reflex vertex with both edges leading _ towards _",
    "@xmath1 , as is the case with @xmath14 in the figure . here",
    "the point is not truly stuck , as it may go either direction along the boundary . in order to resolve the ambiguity here ,",
    "previous authors have adopted a convention that the path always turns to one side or the other ( say , right ) at such reflex vertices @xcite . here we adopt a more conservative approach , saying that the path is _ indeterminate _ when this happens .",
    "we will thus be placing our beacons so as to avoid this situation .",
    "if @xmath1 attracts @xmath0 , it does not follow that @xmath0 attracts @xmath1 ; for example , @xmath18 does not attract @xmath1 in the figure .",
    "this asymmetry of attraction sets it apart from other visibility - type relations , which are typically symmetric .",
    "however , attraction can be placed relative to two known visibility types .",
    "firstly , it is a superset of the usual visibility relation : if @xmath0 and @xmath1 are visible , then @xmath1 attracts @xmath0 ( and @xmath0 attracts @xmath1 ) .",
    "secondly , in orthogonal polygons ( the domain studied here ) , attraction is a subset of the _ staircase visibility _ relation : if @xmath1 attracts @xmath0 , then @xmath1 and @xmath0 are staircase visible .",
    "( two points are staircase visible in an orthogonal polygon if there is a path @xmath23 between them in the polygon , composed entirely of horizontal and vertical segments , where @xmath23 is both x - monotone and y - monotone . )",
    "staircase visibility is typically not used outside of orthogonal polygons and hence the restriction to orthogonal polygons is not onerous .    to see this relation between attraction and staircase visibility , first note that attraction paths in orthogonal polygons are always x - monotone and y - monotone . then consider replacing pieces of the attraction path with staircases as suggested in figure [ fig : staircase] the diagonal segments become small - step staircases , staying near the attraction segment and therefore in the polygon , and the horizontal and vertical segments of the attraction path are left intact in the staircase path .     to @xmath1 and a corresponding staircase path . ]      if @xmath0 and @xmath1 are points in a polygon with a beacon routing from @xmath0 to @xmath1 , then by a _ routing segment _ we mean any maximal section of the beacon - routing path during which a point travelling the path is attracted by a single beacon ( or by the destination point @xmath1 ) .",
    "if the beacon routing from @xmath0 to @xmath1 starts at @xmath0 , proceeds to beacon @xmath3 , then to beacon @xmath10 , then to @xmath1 , then the routing segments are the part from @xmath0 to @xmath3 , the part from @xmath3 to @xmath10 , and the part from @xmath10 to @xmath1 .",
    "we will call a routing segment _ local _ if it is contained in ( at most ) three rectangles of the decomposition ; see figure [ fig : local ] . we will similarly call a routing path local if all of its segments are local , and a routing beacon set local if it supports a local routing path between every pair of points in the polygon .",
    "our upper bound proof for routing sets of beacons constructs a local routing beacon set .",
    "let @xmath15 be an orthogonal polygon of @xmath24 vertices in general position , by which we mean that @xmath15 has no co - vertical or co - horizontal edges .",
    "one can convert special - position instances to general - position ones with the usual perturbation technique , perturbing each edge a symbolic amount _ into _ the polygon . moving edges into the polygon avoids creating new pairs",
    "@xmath7 in the attraction relation .    construct the _ vertical decomposition _",
    "( also known as the _ trapezoidation _",
    "@xcite ) of @xmath15 by creating a vertical chord from every reflex vertex ( see figure [ fig : dualtree ] ) . we will call these chords the _ verticals _ of the polygon .    because of our restriction to general position , there are @xmath25 verticals , decomposing the polygon into @xmath26 axis - aligned rectangles .",
    "each such rectangle has between one and four neighboring rectangles .",
    "if we form a graph of the neighbor relation on the rectangles , then we have the _ dual tree _ ( or _ weak dual _ ) of the decomposition , as shown in figure [ fig : dualtree ] .",
    "we classify the different types of neighbors of a rectangle @xmath27 in 3 primary ways : _ left _ vs.   _ right _ , depending on the side of @xmath27 they are on ; _ top _",
    "vs.   _ bottom _ , depending on whether the neighbor and @xmath27 have the same polygon edge along their tops or bottoms ; and _ short _ vs.   _ tall _ , depending on whether the neighbor covers a smaller or a larger interval of y - coordinates than @xmath27 does .",
    "we combine these classifications : for instance , in figure [ fig : dualtree ] , @xmath28 is a short bottom left neighbor of @xmath6 , and @xmath29 is a tall top right neighbor of @xmath23 .",
    "if a rectangle @xmath30 is a is a tall left ( or right ) neighbor of rectangle @xmath27 , then it is the _ only _ left ( or right , respectively ) neighbor of @xmath27 .",
    "if a rectangle @xmath30 is a short left ( or right ) neighbor of rectangle @xmath27 , then it is either the _ only _ left ( or right , respectively ) neighbor of @xmath27 , or there is one other short left ( or right , respectively ) neighbor of @xmath27 .",
    "if a short neighbor is the only neighbor on a side ( left or right ) of a rectangle , then we call it a _ solo _ neighbor .",
    "if there is another short neighbor on the same side , we call it a _ paired _ neighbor .",
    "we generally divide the different cases of a neighboring rectangle s type into into tall , solo , and paired .",
    "figure [ fig : topright ] shows these three types of neighbors .     of a rectangle @xmath27 : ( a ) tall , ( b ) solo , ( c ) paired . ]",
    "if a point @xmath0 in a polygon attracts a point @xmath1 , and @xmath1 attracts @xmath0 , then we say that @xmath0 _ covers _ @xmath1 .",
    "covering amongst points is thus the symmetric subset of the attraction relation .",
    "using covering allows us to use the same beacon for routing to and from a particular point .",
    "if @xmath0 and @xmath1 are visible , then @xmath0 covers @xmath1 , but the converse is not necessarily true .    if @xmath0 covers every point in some region @xmath31 , then we say that @xmath0 _ covers _ @xmath31 . and",
    "if there is a set of points @xmath6 in the polygon such that for every point @xmath1 in region @xmath31 , there is a @xmath19 in @xmath6 that attracts @xmath1 , and a @xmath20 in @xmath6 that @xmath1 attracts , then we say that @xmath6 _ covers _ @xmath31 .",
    "typically , the point set @xmath6 will be our set of beacons , and @xmath31 will be our polygon , or a subpolygon of it .",
    "note that this last notion of coverage is _ not _ ``  there is a @xmath19 in @xmath6 such that @xmath19 covers @xmath1 '' ; our notion is more permissive .",
    "we will need this permissivity in our proof when we repair trapped paths .",
    "we add the adverb _ locally _ to either type of coverage if that coverage uses only local path segments .",
    "to build a routing set of beacons we will mainly use individual beacons to cover different regions ; the regions are rectangles and their unions .",
    "so , we start with an investigation of which rectangles of the decomposition a beacon covers .",
    "[ obs : contained ] a beacon @xmath19 locally covers any rectangle of the decomposition it is in .",
    "note that if @xmath19 is on a vertical then it will be in two such rectangles .",
    "let the _ rectangular hull _ of a pointset @xmath28 , denoted _ _",
    "rh__@xmath32 , be the smallest axis - aligned rectangle that is a superset of @xmath28 .",
    "[ obs : hullcontained ] let @xmath15 be a polygon containing beacon @xmath19 and rectangle @xmath27 .",
    "rh__@xmath33   is a subset of @xmath15 , then @xmath19 covers @xmath27 in @xmath15 .",
    "the lemmas in the remainder of this section establish some beacon placements that cover rectangles other than their containing rectangles .",
    "for the first lemma , we need some definitions .",
    "when @xmath30 is a short neighbor of @xmath27 , we call the vertex of @xmath30 horizontally adjacent to the shared reflex vertex ( of @xmath27 and @xmath30 ) the _ curl vertex of @xmath30 with respect to @xmath27 _ , and denote this vertex @xmath34 .",
    "( see figure [ fig : soloattraction]c , where @xmath1 is the curl vertex of @xmath30 with respect to @xmath27 ) .",
    "we shorten this phrase if @xmath27 and/or @xmath30 is clear or implied .",
    "if a curl vertex of a rectangle is reflex ( see figure [ fig : soloattraction]c ) , then it does not necessarily have routing paths similar to other points in its neighborhood in @xmath30 .",
    "therefore , when dealing with @xmath30 , we will sometimes need to not include the curl vertex with it .",
    "we thus define @xmath35    finally , if @xmath27 is a rectangle of the vertical decomposition , and @xmath30 is a side of @xmath27 , then we refer to the intersection of @xmath30 with the boundary of the polygon as a _",
    "wall_.    we are now ready to state the first lemma .",
    "[ lem : solocovered ] if rectangle @xmath30 is a solo neighbor of rectangle @xmath27 in the decomposition of a polygon , then any point of @xmath27 locally covers @xmath36 , and any point of @xmath36 locally covers @xmath27 .",
    "is attracted into the left wall of @xmath27 .",
    "( b ) @xmath1 is attracted into the bottom wall of @xmath30 .",
    "( c ) @xmath37 is reflex ; some @xmath0 will give indeterminate results . ]",
    "let @xmath0 and @xmath1 be arbitrary points in @xmath27 and @xmath30 , respectively , and without loss of generality , let @xmath30 be an upper - left neighbor of @xmath27 .",
    "if @xmath0 and @xmath1 are visible , then they mutually attract along their line of visibility .    if @xmath0 and @xmath1 are not visible , consider trying to attract @xmath0 to @xmath1 by activating a beacon at @xmath1 .",
    "the point will be pulled into the left wall of @xmath27 , and then up along it ; once it reaches the reflex vertex , it procedes directly to @xmath1 .",
    "this is illustrated in figure [ fig : soloattraction]a .",
    "now consider trying to attract @xmath1 to @xmath0 by activating the beacon at @xmath0 .",
    "if @xmath1 is not the curl vertex , then either it will be pulled into the bottom wall of @xmath30 to the right of the curl vertex ( figure [ fig : soloattraction]b ) , or it starts on the bottom wall of @xmath30 right of the curl vertex .",
    "thereafter it is pulled rightward on that bottom wall until it reaches the reflex vertex , where it procedes directly to @xmath0 .",
    "if @xmath1 is the curl vertex then there is the possibility that the vector from @xmath1 to @xmath0 points outside of the polygon ( see figure [ fig : soloattraction]c ) .",
    "now , @xmath1 is on one or two edges of the polygon . if @xmath1 is on one edge , it is the edge on the bottom of @xmath30 , and @xmath30 s left neighbor is a bottom neighbor . if @xmath1 is on two edges , forming a convex vertex , then a beacon at @xmath0 unambiguously pulls @xmath1 along the bottom of @xmath30 . in either of these cases , the path from @xmath1 proceeds rightward to the reflex vertex and directly to @xmath0 from there , as was the case with all of the other points of @xmath30 .",
    "however , if @xmath1 is on two edges which form a reflex vertex , then the path of attraction is indeterminate ; the point could be pulled horizontally or vertically . in this situation , then , @xmath1 does not cover @xmath27 .",
    "the lemma follows .",
    "we will call a six - sided orthogonal polygon ( such as @xmath38 in the previous lemma ) an _ l - shaped _ polygon . note that the proof above depends only on two edges of the l - shaped polygon being polygon boundary : the two edges incident on the reflex vertex .    [",
    "lem : sololeafcovered ] let @xmath30 be a leaf rectangle that is a solo neighbor of rectangle @xmath27 in the decomposition of a polygon @xmath15 , and @xmath19 be a beacon such that @xmath39 .",
    "then @xmath19 covers @xmath30 in @xmath15 .",
    "the requirement that @xmath30 is a leaf removes the need for using @xmath36 rather than @xmath30 , as leaves do not have reflex curl vertices .",
    "otherwise the situation is the same as in the proof of lemma [ lem : solocovered ] , with @xmath40 playing the role of @xmath27 in that proof . because the reflex vertex of the l - shaped polygon @xmath41 has both incident edges contained in the boundary of @xmath15 , that proof applies .",
    "[ lem : tallleafcovered ] let @xmath30 be a leaf rectangle that is a tall neighbor of rectangle @xmath27 in the decomposition of a polygon @xmath15 , and @xmath19 be a beacon such that @xmath39 . if the two edges of @xmath42 incident to its reflex vertex are contained in the boundary of @xmath15 , then @xmath19 covers @xmath30 in @xmath15 .",
    "same as the previous lemma , except that a reflex - incident edge can extend past @xmath27 towards @xmath19 , so the condition on these edges must be made explicit .",
    "next we look at a rectangle with paired neighbors .",
    "let @xmath27 have paired neighbors on the left ; we define the _ left center _ of @xmath27 as the closed rectangle that is the full width of @xmath27 and has the vertical span of the polygon edge on the left of @xmath27 ( as illustrated in figure [ fig : pairedattraction]a ) .",
    "we furthermore let the _ modified left center _ of @xmath27 be the left center with its two left corners removed .",
    "we similarly define the _ right center _ and _ modified right center _ of @xmath27 , if @xmath27 has paired neighbors on the right .",
    "is shown shaded .",
    "( b ) if @xmath0 is attracted to the left side of @xmath27 at or above @xmath43 , it proceeds into @xmath44 ( and directly to @xmath1 ) .",
    "if @xmath0 is attracted to the left wall of @xmath27 between @xmath45 and @xmath43 , it is pulled up the wall and at @xmath43 will enter @xmath44 and then will reach @xmath1 . if @xmath0 is attracted to the left wall at the point @xmath45 , the behavior is indeterminate .",
    "if @xmath0 is attracted to the left side below @xmath45 , it proceeds into @xmath46 and does not reach @xmath1 . ]",
    "[ lem : pairedcovered ] if rectangles @xmath44 and @xmath46 are paired left ( or right ) neighbors of rectangle @xmath27 in the decomposition , then any point in the modified left ( right ) center of @xmath27 locally covers @xmath47 and @xmath48 .    without loss of generality ,",
    "let @xmath44 be an upper - left neighbor and @xmath46 be a lower - left neighbor of @xmath27 .",
    "let @xmath0 be an arbitrary point in the modified left center of @xmath27 .    by symmetry",
    ", we need only show that @xmath0 covers @xmath47 . letting @xmath1 be an arbitrary point in @xmath47 , we arrive at a situation quite similar to that in the proof of lemma [ lem : solocovered ] .",
    "the proof here is the same , except that we need to note that when @xmath0 is pulled towards @xmath1 , if it hits a wall , it hits the wall that is on the left boundary of @xmath27 _ above the bottom reflex vertex @xmath45 _ , and therefore is pulled upwards ( see figure [ fig : pairedattraction]b ) . in other words , the last two cases of figure [ fig : pairedattraction]b do not occur .",
    "we note that @xmath45 is removed from the center as a symmetric counterpart to @xmath49 in the argument above , and @xmath43 as a counterpart to @xmath50 .",
    "we will mostly be applying lemma [ lem : pairedcovered ] with the point in the modified center of @xmath27 being either @xmath51 or @xmath52 .",
    "we make use of a small quantity @xmath53 , which can be considered infinitesimal .",
    "we could also define it concretely by first taking the the line arrangement formed by the lines through every pair of vertices in @xmath15 .",
    "then we let @xmath53 be half of the minimum distance between intersections of this arrangement .",
    "let @xmath54 and @xmath55 be unit vectors in the x- and y - directions , respectively .",
    "we will often use @xmath56 or @xmath57 as offsets from vertices or other important points in our polygon ; figure [ fig : epsilon ] shows a few of these .",
    "( in this and in all later figures , the size of @xmath53 is exaggerated . )    , @xmath58 , and @xmath59 .",
    "@xmath53 is not shown to scale ; in general it would be much smaller . ]",
    "we will prove the theorem by induction on the size of the dual tree of the vertical decomposition .",
    "we first root the dual tree at an arbitrary leaf . at each step",
    ", we will examine the structure of the vertical decomposition in the vicinity of a deepest node in the rooted tree .",
    "we will place some beacons and remove some rectangles / dual tree nodes ; we will place at most two beacons per every three rectangles removed .",
    "we stop and consider basis cases when the depth of the dual tree reaches 0 , 1 , or 2 .",
    "we start with a tree @xmath60 that is the entire dual tree of the polygon @xmath15 ( which we also denote by @xmath61 ) .",
    "after step @xmath62 , we will have a tree @xmath63 which is a subgraph of @xmath60 , with the rectangles corresponding to its vertices forming a single polygon @xmath64 which is a subpolygon of @xmath15 .",
    "we call each induction step from @xmath63 and @xmath64 to @xmath65 and @xmath66 a _ reduction_.    in a reduction from @xmath64 to @xmath66 , we will let @xmath67 denote the _ cut - off region _ , which is the closure of @xmath68 , and use @xmath23 rather than @xmath67 when the subscript is clear from context",
    ". each @xmath69 will be the union of some rectangles in the decomposition .",
    "typically ( but not always ) @xmath67 will be connected , and the intersection of @xmath67 and @xmath66 will then be a vertical @xmath70 . in @xmath66 ,",
    "the vertical @xmath70 is part of the polygon boundary , but in @xmath64 it is not .",
    "if @xmath67 is not connected , then the intersection of @xmath67 and @xmath66 will be a set of verticals @xmath71 .",
    "again , these verticals are part of the boundary of @xmath66 but not of @xmath72 .",
    "to form a beacon set @xmath73 for @xmath64 , we would like to take the beacon set @xmath74 for @xmath66 ( which inductively exists ) and add a few beacons to it",
    ". we could use @xmath74 for routing between pairs of points in @xmath66 ( as a subset of @xmath64 ) , and then just worry about routing the points of @xmath67 ( to each other , and into and out of @xmath64 ) .",
    "however , this simple strategy does not work , because in @xmath64 , the beacons @xmath74 may not be a routing set for the region @xmath66 .",
    "this happens because , in rebuilding @xmath72 by adding @xmath67 to @xmath66 , the points of @xmath70 ( or @xmath75 , or @xmath76 ) have changed status :    * one end of @xmath70 changed from a vertex in @xmath66 to a point in the middle of a horizontal edge in @xmath64 , * the other end of @xmath70 changed from a convex vertex or point on a vertical edge to a reflex vertex , and * the remainder changed from boundary to non - boundary .",
    "this is important because attraction paths use the boundary in their definition .",
    "when @xmath67 is connected , we will call the rectangle of @xmath67 containing @xmath70 the _ detachment rectangle _ , and the rectangle of @xmath66 containing @xmath70 the corresponding _",
    "attachment rectangle_. when @xmath67 is not connected , there will be multiple detachment rectangles , but they will all have the same attachment rectangle .",
    "we consider the cases of a detachment rectangle @xmath77 being taller or shorter than the corresponding attachment rectangle @xmath27 .     is taller than @xmath27 .",
    "( b ) paths to and from @xmath70 are preserved , except possibly those from @xmath21 .",
    "( c ) @xmath78 is shorter than , and a solo neighbor of , @xmath27 . ]    without loss of generality , we assume that @xmath78 is an upper - left neighbor of @xmath27 . consider the case where @xmath78 is taller than @xmath27 ; this is illustrated in figure [ fig : repairtallshort]a . in @xmath66 ,",
    "the ( relative ) interior of @xmath70 was boundary , but in @xmath64 it is not .",
    "we therefore examine all paths in @xmath66 s routing that are incident on @xmath70 .    in any beacon attraction path",
    ", the path can go through the interior of the polygon and along some edges .",
    "unless a path is entirely collinear with an edge , in order to successfully reach the beacon , the only edges along which the path may travel are those that have a reflex vertex at the end of the edge it is moving toward . since @xmath70 neither is in the interior of @xmath66 nor has a reflex vertex on an end in @xmath66 , aside from those paths contained entirely in @xmath70 , no path segments of @xmath66 s beacon routing pass _ through _ a point of @xmath70 .",
    "in other words , paths that are incident on @xmath70 must originate or terminate on @xmath70 .",
    "for all points of @xmath70 other than the bottom vertex @xmath21 ( reflex in @xmath64 ) , these paths that are present in @xmath66 are also present in @xmath64 ( see figure [ fig : repairtallshort]b ) . for @xmath21 , however , destinations to the right and below in @xmath66 would attract along the horizontal edge , but in @xmath64 the path can not choose between the horizontal and vertical edges to start ( @xmath21 is similar to , but a generalization of , a reflex curl vertex as in figure [ fig : soloattraction]c ) .",
    "this problem is easily solved , however , by considering @xmath21 to be part of @xmath78 during the inductive step , obviating the need for it to have inductively - generated paths .",
    "the beacon that covers @xmath78 in the new beacon set will also cover @xmath21 .    now consider the case where @xmath78 is shorter than @xmath27 .",
    "if @xmath27 has no other left neighbor , as in figure [ fig : repairtallshort]c , then the edge through @xmath70 does nt have a reflex vertex at either end in @xmath66 , and thus all paths in @xmath66 incident on @xmath70 either originate or terminate there ( or both ) .",
    "furthermore , all of these paths are with beacons or points lying at or to the right of @xmath70 , so these paths are undisturbed by the inductive step .",
    "if @xmath27 has another left neighbor , then the situation is different .",
    "the beacons of @xmath66 may have routings dependent on @xmath70 being boundary : a routing path section may hit the wall of @xmath66 at a point on @xmath70 ( or start on @xmath70 ) , and then be pulled along that wall until it leaves the wall at some reflex vertex ( see figure [ fig : trap]a ) . in @xmath64 , this same section , upon hitting @xmath70",
    ", would continue into @xmath78 and become trapped , not reaching the beacon , as shown in figure [ fig : trap]b .    .",
    "( b ) the path continues into @xmath23 in @xmath64 .",
    "( c ) repairing a section between @xmath79 and @xmath80 with @xmath22 . ]    to fix this problem , we will use a new beacon to _ repair _ such trapped path sections , as suggested in figure [ fig : trap]c .",
    "let @xmath81 be a trapped path section of the inductively - generated routing beacon set @xmath74 ; either or both of the ends of the section may be arbitrary points in @xmath66 , and a beacon has been activated at @xmath79 . by symmetry , without loss of generality assume that the section starts on or hits a _ left _",
    "wall on a rectangle @xmath27 and is then pulled _ down _ the wall and into another rectangle @xmath30 , as in the figure .",
    "attraction paths in orthogonal polygons are always both x - monotone and y - monotone .",
    "thus @xmath80 is at or right of @xmath70 , and @xmath79 is left of @xmath70 .",
    "the beacon @xmath79 can not be colinear with @xmath70 , as then either the path would be vertical ( and not trapped ) or it would hit the left side of @xmath27 at @xmath79 , not some point on @xmath70 .",
    "furthermore , @xmath80 is either the bottom point @xmath43 of @xmath70 , or above this point , and @xmath79 is at or below the reflex vertex @xmath45 on the left of @xmath30 .",
    "these allowable regions for @xmath79 and @xmath80 are shown in figure [ fig : allowable ] .     and @xmath80 .",
    "]    since @xmath27 has a neighbor @xmath30 in @xmath66 , and another neighbor @xmath78 is connected to it along @xmath70 , which is on the same side as @xmath30 , the rectangle @xmath27 has paired neighbors in @xmath64 .",
    "so we can observe that paths can be trapped only when we reduce @xmath64 to @xmath66 by cutting between a rectangle and one of a set of its paired neighbors .    to establish a way to repair trapped paths",
    ", we will assume that the inductive routing beacon set is local .",
    "this allows us to contain the path section that needs repair in three rectangles : @xmath82 and one other .",
    "this other rectangle is either a left neighbor of @xmath30 or a right neighbor of @xmath27 .",
    "[ lem : repair ] let @xmath74 be a local routing set of beacons in @xmath66 .",
    "if a left ( or right ) paired neighbor @xmath78 has been cut from rectangle @xmath27 in @xmath64 as part of forming @xmath66 , we can add the point @xmath83 ( or @xmath84 ) to @xmath74 to obtain a beacon set that supports local routing between any pair of points in the subpolygon @xmath66 of @xmath64 , where @xmath21 is the reflex vertex of @xmath72 common to @xmath78 and @xmath27 .    by symmetry , we need only prove the version where a left paired neighbor is cut off .",
    "let @xmath30 be the left neighbor of @xmath27 other than @xmath78 .",
    "let @xmath22 be @xmath83 and @xmath85 be @xmath86 .",
    "let @xmath87 be a trapped section of any path of the routing on @xmath74 in @xmath64 . we will replace this section with a pair of ( local ) sections @xmath88 and @xmath89 when using @xmath85 .",
    "we must only establish that these path sections are attractive ( @xmath22 attracts @xmath80 and @xmath79 attracts @xmath22 ) and local .",
    "the section @xmath87 in @xmath66 contains points in the relative interior of @xmath30 , as this section proceeds from the left side of @xmath27 _ into _ @xmath30 , as detailed above in connection with figure [ fig : trap]c .",
    "it also contains points in the relative interior of @xmath27 , as the points on the left side of @xmath27 above the reflex vertex are relative interior .",
    "therefore , being local , @xmath87 contains points in the relative interior of at most one more rectangle .",
    "we can conclude that @xmath80 is in @xmath27 or a right neighbor of @xmath27 , and @xmath79 is in @xmath30 or a left neighbor of @xmath30 ( the only right neighbor of @xmath30 is @xmath27 ) .",
    "recall that for @xmath87 to be trapped , @xmath80 must be @xmath21 itself , or above @xmath21 ( in which case it is also above @xmath22 ) .",
    "consider what happens when @xmath80 is attracted by a beacon placed at @xmath22 in @xmath64 .",
    "we aim to show that this attraction path is local and reaches @xmath22 .",
    "if @xmath80 is in @xmath27 , then it is attracted in a straight line to @xmath22 ; this is a local section .",
    "if @xmath80 is in a right neighbor @xmath28 of @xmath27 , we consider four cases",
    ".     is a tall top neighbor of @xmath27 .",
    "( b ) and ( c ) @xmath28 is a tall bottom neighbor of @xmath27 .",
    "( d ) @xmath28 is a short top neighbor of @xmath27 .",
    "( e ) @xmath28 is a short bottom neighbor of @xmath27 . ]",
    "@xmath28 is a tall top neighbor of @xmath27 .",
    ": :    any @xmath80 above @xmath22 is visible ( and    therefore attracted in a straight line ) to @xmath22 ( see    figure [ fig : attracttoprime]a ) .",
    "@xmath28 is a tall bottom neighbor of @xmath27 .",
    ": :    refer to figure [ fig : attracttoprime]b and c. let @xmath90 be    the reflex vertex shared between @xmath28 and @xmath27 .",
    "+    @xmath79 attracts @xmath80 downwards and left ,    owing to the restrictions on their locations ( see figure    [ fig : allowable ] ) .",
    "let @xmath91 be the point where this    attraction path first encounters the left side of @xmath28 .    +    if @xmath91 is above @xmath90 , then the situation is    as illustrated in figure [ fig : attracttoprime]b . here",
    "@xmath79    attracts @xmath80 to @xmath91 , then down the left    side of @xmath28 to @xmath90 , and from there to some    point @xmath92 on @xmath70 .",
    "@xmath22 will    attract @xmath80 to some point @xmath93 on the    left side of @xmath28 . if this point is below    @xmath90 , then @xmath22 and @xmath80 are    visible and we are done .",
    "if @xmath93 is above    @xmath90 , then @xmath22 will attract the point from    @xmath93 down the left side of @xmath28 to    @xmath90 , and from there directly to @xmath22 .",
    "+    the point @xmath93 is below @xmath91 , because    @xmath22 must be below @xmath87 .",
    "this implies    that the segment @xmath94 is contained in    @xmath28 .",
    "it also implies that @xmath95 is a    subsegment of @xmath96 . since @xmath96 was    boundary in @xmath66 , @xmath95 was also    boundary in @xmath66",
    ". none of our reductions can trap    paths across two verticals , so ( with @xmath70 being the    vertical involved in the trapping here ) @xmath96 and    @xmath95 must also be boundary in @xmath64 .",
    "finally , the segment @xmath97 is contained in    @xmath27 , and thus the path @xmath98 is an    attraction path in @xmath64 .    +    if @xmath91 is below @xmath90 , then the situation is    as in figure [ fig : attracttoprime]c . here",
    "@xmath79 attracts    @xmath80 directly into @xmath70 at some point    @xmath92 .",
    "the line segment @xmath99 is above    @xmath22 , as @xmath92 is at or above and    @xmath80 is strictly above @xmath22 .",
    "thus the    line segment @xmath100 is below @xmath99    and hence contained in @xmath101 , making it a local path    segment in @xmath72 .",
    "@xmath28 is a short top neighbor of @xmath27 .",
    ": :    refer to figure [ fig : attracttoprime]d .",
    "either @xmath80 is    visible to @xmath22 or @xmath22 attracts    @xmath80 into the bottom wall of @xmath28 at some    point @xmath91 ; this path continues left to the reflex vertex    @xmath102 shared between @xmath28 and @xmath27 ,    and then is attracted straight to @xmath22 .",
    "again the path is    contained within @xmath101 and therefore local .",
    "@xmath28 is a short bottom neighbor of @xmath27 .",
    ": :    refer to figure [ fig : attracttoprime]e .",
    "@xmath28 s top must be    above @xmath22 in order for it to contain the start of a    trapped path section . in this case ,",
    "@xmath80 and    @xmath22 are visible .    in each case",
    ", we have shown that any @xmath80 that starts a trapped section has a local path section to @xmath22 .",
    "we now do a similar analysis to show that @xmath22 has a local path section to any @xmath79 that ends a trapped path section .",
    "as argued above , @xmath79 must be either in @xmath30 or in a left neighbor @xmath103 of @xmath30 .",
    "if @xmath79 is in @xmath30 , then it attracts @xmath22 by lemma [ lem : pairedcovered ] .",
    "furthermore , the path of this attraction stays within @xmath38 , so it is local .",
    "if @xmath79 is in @xmath103 , then let @xmath104 be the lower - left corner of @xmath30 , as in figure [ fig : attractfromprime]a .",
    "consider the relative placement of @xmath22 and @xmath79 .",
    "@xmath22 is strictly above and to the right of @xmath79 ( recall that @xmath79 must be at the level of , or lower than , the reflex vertex @xmath105 common to @xmath27 and @xmath30 ) .",
    "thus , a beacon at @xmath79 will pull a point at @xmath22 along a vector that is both downwards and leftwards .",
    "since some small neighborhood of @xmath22 does not contain any boundary of the polygon , it is free to travel along that vector , and it thus will not encounter polygon boundary until it is strictly below @xmath22 ( and strictly left of it ) .",
    "when it does reach polygon boundary , it is either on the left side of @xmath27 between @xmath106 and @xmath105 , or on the bottom of @xmath30 or @xmath27 ( if the vector is downwards enough ) .",
    "we have chosen @xmath53 to be small enough that if the line @xmath107 hits the line through the bottom of @xmath27 , it hits it either in @xmath30 or @xmath27 , and not to the left of @xmath30 .",
    "equivalently , @xmath53 is small enough that @xmath22 is above the line @xmath108 .",
    "we now examine two cases , based on where @xmath79 is relative to the line @xmath107 .",
    "is above the line @xmath109 .",
    "( b ) @xmath79 attracts @xmath22 to @xmath91 . from then on",
    ", it follows @xmath66 s path from @xmath80 to @xmath79 .",
    "( c ) @xmath79 attracts @xmath22 to @xmath110 , then leftwards .",
    "it soon encounters @xmath66 s path from @xmath80 to @xmath79 . ]",
    "@xmath79 lies on or above the line @xmath107 .",
    ": :    refer to figure [ fig : attractfromprime]b . in this case ,",
    "a beacon at    @xmath79 attracts @xmath22 into a point    @xmath91 on the left side of @xmath27 strictly between    @xmath43 and @xmath45 .",
    "we note that the routing path    segment from @xmath80 to @xmath111 in    @xmath66 includes the point @xmath91 , as it    traverses the entire length of the segment @xmath43 to    @xmath45 .",
    "once the point coming from @xmath22 hits    @xmath91 , it will follow the rest of the path from the    @xmath87 section .",
    "this part of the path is not    trapped , being entirely below @xmath70 .",
    "thus , there is a valid    path segment from @xmath22 to @xmath79 in    @xmath64 , and this path segment is local , contained in    @xmath112 .",
    "@xmath79 lies below the line @xmath107 .",
    ": :    refer to figure [ fig : attractfromprime]c . in this case ,",
    "the routing    path from @xmath80 to @xmath79 in    @xmath66 , after travelling down the left of    @xmath27 to @xmath105 , leaves @xmath105 at an    angle below @xmath113 and therefore next encounters the    bottom of @xmath30 at some point @xmath110 .",
    "it is then    pulled leftwards to @xmath104 , which must be a reflex vertex    shared by @xmath30 and @xmath103 , and from there it    proceeds directly to @xmath79 .",
    "+    a attraction path starting at @xmath22 in @xmath64    will either be pulled into the bottom of @xmath27 or    @xmath30 .",
    "it is next pulled leftwards to @xmath104 . at    this point , or earlier ( at @xmath110 )",
    ", we again start following    the old routing path from @xmath80 to @xmath79 ,    so this path also eventually reaches @xmath79 .",
    "again , it is    contained in @xmath114 , and is therefore local .",
    "now we have shown @xmath22 is attracted to any @xmath111 that ends a trapped section by a local attraction path .",
    "thus , the two sections @xmath88 followed by @xmath115 are a valid replacement for any trapped section @xmath87 .",
    "we use the term _ repair position _ to refer to the placement of the new beacon ( point ) in the previous lemma .",
    "note that when we repair a path from @xmath80 to @xmath111 by inserting @xmath22 , we do not change the `` reverse '' path from @xmath111 to @xmath80 .",
    "this means that even though our later case analysis will deal only with regions _ covered _ by single beacons , by repair we may end up with regions where the symmetry of covering is broken , and routing to a region uses a different beacon than routing out of the region does",
    ".      the conditions in the following lemma are sufficient ( but not necessary ) to form a local beacon routing set by inductively cutting off a region @xmath67 from @xmath64 to yield @xmath66 .",
    "let @xmath116 be the attraction relation ( digraph ) on the points of @xmath6 in @xmath72 .",
    "[ lem : routingset ] if the following conditions hold , then @xmath117 is a routing beacon set for @xmath64 .    1 .",
    "the beacons given ( @xmath85 ) locally cover the region @xmath118 .",
    "each strongly connected component of @xmath119 contains at least one point in @xmath66 .",
    "if a detachment rectangle of @xmath67 is one of a set of paired neighbors of the corresponding attachment rectangle , and the other neighbor of the pair is not also a detachment rectangle , then a beacon of @xmath85 is in repair position .",
    "the only condition under which inductively - generated paths get trapped is that exactly one of a paired set of neighbors of an attachment rectangle is in @xmath67 .",
    "thus , if there is a possibility of trapped paths , by the third condition we have a beacon of @xmath85 placed so that we can repair the inductive paths as per lemma [ lem : repair ] .",
    "we ll use the term `` repaired induction '' to refer to performing a recursive step followed by repair of the paths , if necessary .",
    "if @xmath120 is a point in @xmath23 , then let @xmath121 be a beacon of @xmath85 that covers @xmath120 .",
    "@xmath121 exists by the first condition . and",
    "if @xmath19 is a beacon in @xmath85 , then let @xmath122 be a point of @xmath123 that is strongly connected to it in @xmath119 .",
    "@xmath122 exists by the second condition .",
    "consider routing from an arbitrary point @xmath0 to another arbitrary point @xmath1 in @xmath64 . depending on whether each of @xmath0 and @xmath1 is in @xmath67 or not , there are four possibilities .",
    "@xmath0 and @xmath1 are both in @xmath66 . : :    by repaired induction , there is a local beacon path between    @xmath0 and @xmath1 using @xmath73 ( plus    possibly the beacon in repair position ) .",
    "@xmath0 is in @xmath67 and @xmath1 is in @xmath66 .",
    ": :    we can route from @xmath0 directly to @xmath124 .",
    "from there , we can route to the beacon @xmath125 in    @xmath126 , by the second condition . by the third    condition",
    ", we can then route from @xmath20 to @xmath1    by repaired induction .",
    "@xmath0 is in @xmath66 and @xmath1 is in @xmath23 .",
    ": :    we can `` reverse '' the previous routing , routing from @xmath0    to @xmath127 by repaired induction , from there to    @xmath128 by the second condition , and then directly to    @xmath1 .",
    "both @xmath0 and @xmath1 are in @xmath23 . :",
    ":    we route from @xmath0 to @xmath124 , and then to    @xmath129 , to @xmath127 , to    @xmath128 , and finally to @xmath1 .",
    "the lemma follows .",
    "assume we are after step @xmath62 , having tree @xmath63 and polygon @xmath64 remaining .",
    "@xmath63 is rooted at a leaf .",
    "if @xmath63 is of depth 0 , 1 , or 2 , we stop .",
    "otherwise , let @xmath130 be a deepest node in the dual tree , let @xmath131 be its direct ancestor ( parent ) , and in general let @xmath132 be the direct ancestor of @xmath133 .",
    "the grandparent @xmath134 of @xmath130 exists , because @xmath63 has depth at least 3 . in general",
    ", we will start by trying to reduce the size of @xmath63 by removing the dual tree nodes of @xmath131 s subtree ; this corresponds to cutting the polygon on the vertical chord between @xmath131 and @xmath134 .",
    "later we will consider cases that require us to examine @xmath134 and its subtree .",
    "we let @xmath135 be synonymous with @xmath130 , and denote the reflex vertex shared between @xmath136 and @xmath131 as @xmath137 , and the reflex vertex shared between @xmath131 and @xmath134 as @xmath138 , etc .",
    "other leaves in the vicinity will be denoted @xmath139 , @xmath140 , etc . and",
    "the reflex vertex shared between @xmath139 and @xmath131 will be @xmath141 , etc .    throughout this section ,",
    "all coverage is local and for conciseness we omit the adverb , writing _ covers _ rather than _ locally covers_.    we assume without loss of generality ( by symmetry ) that @xmath134 is an upper right neighbor of @xmath131 . with respect to @xmath131 ,",
    "the neighbor @xmath134 is either tall , solo , or paired .",
    "we first examine the case when @xmath134 is taller than @xmath131 .      in this case",
    ", @xmath131 must have at least one child ( the deepest leaf @xmath130 ) and can have at most two children .",
    "all of @xmath131 s children are left children .",
    "[ lem : twotalltwokids ] if @xmath134 is a tall upper right neighbor of @xmath131 , and @xmath131 has two children , then @xmath64 can be reduced by 3 rectangles at a cost of 2 beacons .",
    "is a tall neighbor of @xmath131 .",
    "( a ) @xmath131 has two children @xmath142 and @xmath143 .",
    "( b ) @xmath131 has a solo lower - left child .",
    "( c ) @xmath131 has a tall lower - left child . ]",
    "the two children @xmath142 and @xmath143 must be left paired children , as shown in figure [ fig : twotall]a .",
    "this figure also introduces some visual conventions : first , the figure shows the typical local area in @xmath64 .",
    "second , parts of the boundary of @xmath64 that are _ known _ to be boundary of @xmath15 are shown with thick black lines .",
    "parts of the boundary of @xmath64 without thick black lines ( such as the lower left side of @xmath134 in the figure ) may or may not be boundary of @xmath15 .",
    "third , the beacon placements are shown as green dots .",
    "beacons placed horizontal to and near a reflex vertex ( such as both @xmath3 and @xmath10 in the figure ) are considered to be placed @xmath144 away from them .",
    "finally , the choice of which rectangles to remove in the reduction are shown as shaded rectangles .",
    "in this situation , we have removed 3 rectangles ( @xmath142 , @xmath143 , and @xmath131 ) at a cost of placing 2 beacons ( @xmath3 and @xmath10 ) .",
    "now we show that , if @xmath66 has a set @xmath74 of beacons that allows a routing , then @xmath64 has a set of beacons @xmath145 that allows a routing .",
    "let @xmath146 , i.e. @xmath23 is the union of the rectangles @xmath142 , @xmath143 , and @xmath131 . also let @xmath147 .",
    "now the conditions of lemma [ lem : routingset ]  are seen to be satisfied : @xmath3 covers the cut - off rectangles @xmath148 and @xmath131 ( by lemma [ lem : pairedcovered ] ) ; @xmath3 and @xmath10 are visible , so @xmath85 is strongly connected in the attraction graph , and @xmath10 is in repair position in @xmath66 .    in case 1 , where @xmath134 is taller than @xmath131 , it remains to examine the cases where @xmath131 has one child .",
    "we first consider the situation where the one child is a lower neighbor .",
    "[ lem : lowerleft ] if @xmath134 is a tall upper right neighbor of @xmath131 , and @xmath131 has one lower - left child , then @xmath64 can be reduced by 2 rectangles at a cost of 1 beacon .",
    "the child @xmath130 is either a short neighbor or a tall neighbor of @xmath131 .",
    "these two cases are shown in figure [ fig : twotall]b and [ fig : twotall]c , respectively .",
    "also shown are the cut - off regions @xmath149 and the placement of a beacon @xmath3 to complete the reduction .    by observation [ obs : hullcontained ] , @xmath3 covers @xmath131 . by lemma [ lem : sololeafcovered ] or [ lem : tallleafcovered ] , @xmath3 covers @xmath142 .",
    "@xmath3 is itself ( trivially ) a strongly - connected graph , and it is in @xmath66 .",
    "furthermore , it is in repair position .",
    "thus by lemma lemma [ lem : routingset ] , the set of beacons @xmath150 is a routing set .",
    "now we consider the situation where the one child is an upper - left neighbor .",
    "we will handle the case of a short upper - left child here , and defer the case of a tall upper - left child to section [ sec : deferred ] .",
    "[ lem : upperleft ] if @xmath134 is a tall upper right neighbor of @xmath131 , and @xmath131 has one short upper - left child , then @xmath64 can be reduced by 2 rectangles at a cost of 1 beacon .",
    "this situation is shown in figure [ fig : twotallupper]a , along with the rectangles to remove ( @xmath149 ) , and the placement of a beacon @xmath3 to complete the reduction .",
    "as in the previous proof , @xmath3 covers @xmath131 and @xmath142 .",
    "@xmath3 is a strongly - connected graph , it is in @xmath66 , and is in repair position .",
    "thus by lemma [ lem : routingset ] the set of beacons @xmath151 is a routing set .",
    "figure [ fig : twotallupper]b shows the situation when @xmath142 is a tall upper - left child of @xmath131 .",
    "this situation fails the condition in lemma [ lem : tallleafcovered ] . here",
    "a beacon at @xmath3 would not suffice , as any point of @xmath142 below @xmath3 would not attract @xmath3 .",
    "is a tall neighbor of @xmath131 .",
    "( a ) @xmath131 has a short upper - left child @xmath142 .",
    "( b ) @xmath131 has a tall upper - left child @xmath142 ; the point @xmath3 is not attracted by the point in @xmath142 .",
    "here we have exaggerated @xmath53 to make the diagram clear . ]    the technique we use to handle this case involves examining the structure of @xmath134 s subtree .",
    "we defer that analysis until section [ sec : deferred ] .      as in the previous case",
    ", @xmath131 must have at least one child , can have at most two children , and all of its children are left children .",
    "we again start with the case of when @xmath131 has two children .",
    "[ lem : twosolotwo ] if @xmath134 is a solo upper right neighbor of @xmath131 , and @xmath131 has two children , then @xmath64 can be reduced by 3 rectangles at a cost of 2 beacons .    because they are both left children , @xmath131 s children must be short children ; this situation is shown in figure [ fig : twosolo]a , along with the rectangles to remove ( @xmath152 ) , and the placement of beacons @xmath3 at @xmath51 and @xmath10 at @xmath153 to complete the reduction .",
    "( @xmath43 is the reflex vertex shared between @xmath142 and @xmath131 , and @xmath1 is the reflex vertex shared between @xmath131 and @xmath134 . )    by lemma [ lem : pairedcovered ] , the beacon @xmath3 covers all of @xmath23 , and beacon @xmath10 is used only to connect @xmath3 to the beacons of @xmath66 .",
    "the attraction graph on @xmath3 and @xmath10 is strongly - connected , as they are visible .",
    "the beacon @xmath10 is in @xmath66 , and there are no trapped paths to repair .",
    "thus , by lemma [ lem : routingset ] , the set of beacons @xmath154 is a routing set .     is a solo neighbor of @xmath131 .",
    "( a ) @xmath131 has two children @xmath142 and @xmath143 .",
    "( b ) @xmath131 has a solo lower - left child .",
    "( c ) @xmath131 has a tall lower - left child .",
    "( d ) @xmath131 has a solo upper - left child .",
    "( e ) @xmath131 has a tall upper - left child . ]    since all of the cases when @xmath131 has one child are similar , we handle them in one lemma .",
    "[ lem : twosoloone ] if @xmath134 is a solo upper right neighbor of @xmath131 , and @xmath131 has one child , then @xmath64 can be reduced by 2 rectangles at a cost of 1 beacon .",
    "we consider the four possibilities for @xmath131 s child @xmath142 : either @xmath142 is a lower - left solo neighbor of @xmath131 , a lower - left tall neighbor , an upper - left solo neighbor , or an upper - left tall neighbor .",
    "these possibilities are shown in figure [ fig : twosolo]b  e .",
    "in each , the beacon @xmath3 is placed at @xmath155 , where @xmath1 is the reflex vertex shared between @xmath131 and @xmath134 .    in the various cases , @xmath142 is either a solo neighbor or a tall neighbor of @xmath131 , and lemma [ lem : sololeafcovered ]  or lemma [ lem : tallleafcovered ] applies to establish that @xmath3 covers @xmath142 . by observation [ obs : contained ]",
    ", @xmath3 also covers @xmath131 . since @xmath3 is in @xmath134 , and is itself a trivial strongly connected graph , the conditions of lemma [ lem : routingset ] are satisfied and this lemma follows .",
    "the rectangle paired with @xmath134 as a right neighbor of @xmath131 must be a leaf @xmath142 .",
    "@xmath131 must have at least one child ; it can have up to three .",
    "[ lem : twopairedthree ] if @xmath134 is a paired upper right neighbor of @xmath131 , and @xmath131 has three children , then @xmath64 can be reduced by 4 rectangles at a cost of 2 beacons .",
    "all of @xmath131 s neighbors must be short , as shown in figure [ fig : twopaired]a .",
    "we place two beacons : @xmath3 at @xmath156 , where @xmath157 is the lower - left corner of @xmath131 , and @xmath10 at @xmath158 , where @xmath159 is the upper - right corner of @xmath131 .",
    "the beacon @xmath3 covers @xmath142 by observation [ obs : hullcontained ] ; it also covers @xmath160 , by observation [ obs : contained ] .",
    "the beacon @xmath10 covers @xmath143 by observation [ obs : hullcontained ] , and it is also a part of @xmath66 . @xmath3 and @xmath10 are visible , and thus strongly connected in the attraction graph .",
    "the reattachment of @xmath131 to @xmath134 causes no paths in @xmath66 to become trapped . by lemma [ lem : routingset ] ,",
    "the result follows .",
    "is a paired neighbor of @xmath131 .",
    "( a ) @xmath131 has three children . if @xmath131 has two short children , @xmath143 or @xmath161 can be removed .",
    "( b ) @xmath131 one short and one tall child .",
    "( c ) @xmath131 has one short child . ]",
    "[ lem : twopairedtwo ] if @xmath134 is a paired upper right neighbor of @xmath131 , and @xmath131 has two children , then @xmath64 can be reduced by 3 rectangles at a cost of 2 beacons .",
    "if @xmath131 has two short children , then the situation must be as shown in figure [ fig : twopaired]a , with either @xmath143 or @xmath161 removed .",
    "we can use the same beacon placement and proof as in lemma [ lem : twopairedthree ] , but remove only 3 rectangles instead of 4 .",
    "if one of @xmath131 s children is tall , then the situation is as shown in figure [ fig : twopaired]b if it is a tall top neighbor , or a similar situation if it is a tall bottom neighbor . in either case",
    ", we place @xmath3 at @xmath156 , where @xmath157 is the lower - left corner of @xmath131 , and @xmath10 at @xmath158 , where @xmath159 is the upper - right corner of @xmath131 .",
    "the beacon @xmath3 covers @xmath152 , and beacon @xmath10 is used only to connect @xmath3 to the beacons of @xmath66 .",
    "the beacons @xmath3 and @xmath10 are visible , and thus strongly connected in the attraction graph .",
    "the reattachment of @xmath131 to @xmath134 causes no paths in @xmath66 to become trapped .",
    "thus , by lemma [ lem : routingset ] , the result follows .",
    "if @xmath131 has only one child , then it must be the short child @xmath142 that is paired with @xmath134 , as shown in figure [ fig : twopaired]c .",
    "we would like to use a beacon in the same place as @xmath10 in the two- and three - child cases , but this beacon ( @xmath3 in the figure ) is not attracted by all of the points of @xmath142 .",
    "thus we must do something different",
    ".    we will handle this case by examining one level farther up the dual tree , considering @xmath134 s children .",
    "this , along with handling our previously deferred case , is done in the next section .",
    "consider @xmath134 , the grandparent of some deepest @xmath130 node in the dual tree .",
    "if any of the cases handled by lemmas [ lem : twotalltwokids ] through [ lem : twopairedtwo ] is present on any of its children , then perform the corresponding reduction .",
    "if one can not do this , then every height - two subtree of @xmath134 can be pictured like the rectangles @xmath162 in either figure [ fig : threeleveltypes]a ( deferred from section [ sec : atwotall ] ) or figure [ fig : threeleveltypes]b ( deferred from section [ sec : atwopaired ] ) .",
    "it is also possible that @xmath134 has one or two height - one subtrees , as shown in figure [ fig : threeleveltypes]c .    .",
    "( b ) type ii subtree of @xmath134 .",
    "( c ) types iii and iv subtrees of @xmath134 . ]",
    "we call these subtrees types i to iv . in type i , @xmath142 and @xmath134 are tall neighbors of @xmath131 , and they all share a horizontal edge . in type ii ,",
    "@xmath142 and @xmath134 are paired neighbors of @xmath131 . in type iii",
    ", the subtree of @xmath134 is a short leaf . in type iv",
    ", the subtree of @xmath134 is a tall leaf .",
    "we call type ii and type iv subtrees _ tall _ , because they include a tall neighbor of @xmath134 .",
    "we similarly call type i and type iii subtrees _ short_. note that _ tall _ and _ short _ do not refer to the depth of the subtrees ( types i and ii have depth 2 , and types iii and iv have depth 1 ) .",
    "we now remove our assumption that @xmath134 is an upper - right neighbor of @xmath131 in order to assume ( without loss of generality ) that @xmath163 is an upper - right neighbor of @xmath134 .",
    "note that @xmath163 does exist because we have assumed that the depth of the dual tree is at least 3 .",
    "[ lem : typeii ] if @xmath134 has a type ii subtree , then @xmath64 can be reduced by 3 rectangles at a cost of 2 beacons or 5 rectangles at a cost of 3 beacons .    if @xmath134 has a type ii subtree , then that subtree is on the left of @xmath134 , because it is tall and @xmath163 is on the right . also because it is tall , there is no other type ii or type iv subtree present .",
    "we consider cases based on what the lower right neighbor of @xmath134 is : it can be a type i subtree , a type iii subtree , or it can be absent .",
    "if it is absent , then we further break down the situation based on whether @xmath163 is taller than or shorter than @xmath134 .",
    "case 1 : @xmath134 has no lower left neighbor and @xmath163 is shorter than @xmath134 .",
    ": :    this situation is as depicted in figure [ fig : typetwo]a .",
    "the rectangle    @xmath131 of the type ii subtree is either a tall bottom left    neighbor of @xmath134 ( as depicted ) or a tall top left    neighbor of @xmath134 ( as suggested by the dashed lines ) . in    any case",
    ", we put a beacon @xmath3 at    @xmath164 and a beacon    @xmath10 at @xmath158 , where    @xmath138 is the reflex vertex shared by @xmath131    and @xmath134 , and @xmath159 is the upper - right corner    of @xmath134 .",
    "( the red point @xmath165 on the figure    shows where @xmath3 would be if @xmath131 extends    below @xmath134 . )",
    "+    here we have no trapped paths to repair , because @xmath134 is    taller than @xmath163 .",
    "the beacon @xmath3 covers    @xmath166 , by lemma [ lem : pairedcovered ] .",
    "the    two beacons are visible , thus strongly connected , and    @xmath10 is in @xmath66 .",
    "+     has a type ii left neighbor .",
    "( a )    @xmath163 is a solo neighbor of @xmath134 .",
    "( b )    @xmath163 is a tall neighbor of @xmath134 .",
    "( c )    @xmath163 is paired with a type i subtree .",
    "( d )    @xmath163 is paired with a type iii subtree . ]",
    "case 2 : @xmath134 has no lower left neighbor and @xmath163 is taller than @xmath167 .",
    ": :    this situation is as depicted in figure [ fig : typetwo]b .",
    "again ,    @xmath131 is either a top or a bottom neighbor , and we depict    the first while only suggesting the second .",
    "we put a beacon    @xmath3 at @xmath164 and a    beacon @xmath10 at @xmath168 ,    where @xmath138 is the reflex vertex shared by    @xmath131 and @xmath134 , and @xmath169 is    the reflex vertex shared by @xmath134 and @xmath163 .",
    "+    here we may have trapped paths going through @xmath163 , but we    have placed @xmath10 in repair position .",
    "the beacons cover    the removed rectangles @xmath170 and @xmath130 ,    and by observation [ obs : hullcontained ] , the beacons see one another .",
    "case 3 : the lower left neighbor of @xmath134 is type i. : :    let @xmath139 be the leaf of the lower left subtree , and    @xmath171 be its other rectangle .",
    "this situation is as    depicted in figure [ fig : typetwo]c .",
    "here we put a beacon    @xmath3 at @xmath164 , a    beacon @xmath10 at @xmath158 , and    a beacon @xmath11 at @xmath172 , where    @xmath3 is the reflex vertex shared by @xmath131 and    @xmath134 , @xmath159 is the upper - right corner of    @xmath134 , and @xmath172 is the reflex vertex    shared by @xmath171 and @xmath134 .",
    "+    here @xmath3 covers @xmath131 and @xmath130 ,    @xmath11 covers @xmath171 and @xmath139 , and    @xmath10 covers @xmath134 .",
    "the beacons are all    visible to one another , so they are strongly connected in the    attraction graph .",
    "there are no trapped paths , as @xmath163 is    shorter than @xmath134 .",
    "we remove the five rectangles    @xmath173 and @xmath134 .",
    "case 4 : the lower left neighbor of @xmath134 is type iii .",
    ": :    let @xmath139 be the leaf rectangle that is the sole rectangle    in the type iii subtree to the lower left of @xmath134 .",
    "the    situation is as depicted in figure [ fig : typetwo]d . here",
    "we use the    technique of removing _ two _ subtrees of the dual tree : the type ii    subtree @xmath174 and the type iii subtree    @xmath139 .",
    "+    we place beacons @xmath3 at    @xmath164 , and @xmath10 at    @xmath175 .",
    "these beacons are visible    to one another and @xmath10 is in @xmath66 .",
    "detaching @xmath131 from @xmath134 , and then    reattaching it , can not create trapped paths because @xmath131    is taller than @xmath134 . on the other hand , detaching and    reattaching @xmath139 from @xmath134 will cause some    paths to become trapped , as @xmath139 is a short paired    neighbor of @xmath134 .",
    "however , we have placed    @xmath10 in repair position for this eventuality .",
    "the beacon    @xmath3 covers @xmath130 and @xmath131 , and    @xmath10 covers @xmath139 .    in every case , we have reduced the polygon by either 3 rectangles at a cost of 2 beacons , or 5 rectangles at a cost of 3 beacons .",
    "next we handle the case when @xmath134 has a type iv subtree . in what follows , we will use the phrase `` on the vertical '' to mean `` on the relative interior of the vertical''i.e .",
    "we do not include the vertical s endpoints as allowable positions .",
    "[ lem : typeiv ] if @xmath134 has a type iv subtree , then @xmath64 can be reduced by 4 rectangles at a cost of 2 beacons .",
    "has a type iv neighbor .",
    "( b ) all children of @xmath134 are type i. ]    if @xmath134 has a type iv subtree , then that subtree is on the left of @xmath134 , because it is tall and @xmath163 is on the right .",
    "also because it is tall , there is no other type ii or type iv subtree present .",
    "@xmath134 is some deepest leaf s grandparent , so @xmath134 must have at least one grandchild .",
    "since the type iv subtree is simply a child of @xmath134 , the lower right neighbor of @xmath134 must be of type i. this situation is illustrated in figure [ fig : typefour]a .",
    "we place beacons @xmath3 , on the vertical between @xmath131 and @xmath134 , and @xmath10 , on the vertical between @xmath134 and @xmath163 .",
    "beacon @xmath3 covers @xmath131 and @xmath130 ( the type i subtree ) and beacon @xmath10 covers @xmath139 ( the type iv subtree ) and @xmath134 .",
    "the beacons see one another , thus are strongly connected in the attraction graph , and @xmath10 is in the polygon @xmath66 remaining after the reduction . by lemma [ lem : routingset ] , then , the current lemma follows .",
    "we have now shown how to reduce the polygon whenever @xmath134 has a tall subtree .",
    "it remains for us to examine the cases where all of @xmath134 s subtrees are short .",
    "[ lem : all - typei ] if @xmath134 s subtrees are all type i , then @xmath64 can be reduced by 3 rectangles at a cost of 2 beacons , 5 rectangles at a cost of 3 beacons , or 7 rectangles at a cost of 4 beacons .",
    "we place one beacon @xmath10 on the vertical between @xmath134 and @xmath163 , and one beacon for each subtree of @xmath134 , on the vertical between @xmath134 and its subtree .",
    "figure [ fig : typefour]b shows the situation when @xmath134 has three subtrees .",
    "there are 7 rectangles removed and 4 beacons placed .",
    "when @xmath134 has two or one subtree , the situation will be as in the figure , but with one or two of the subtrees , and the corresponding beacons , removed .",
    "also , with one or two subtrees removed , there is a possibility that @xmath163 is a tall neighbor of @xmath134 ; this is of no concern as we still place @xmath10 on the vertical between @xmath134 and @xmath163 .",
    "so if @xmath134 has two subtrees , then there are 5 rectangles removed and 3 beacons placed",
    ". if @xmath134 has one subtree , then there are 3 rectangles removed and 2 beacons placed .",
    "all beacons are in @xmath134 and therefore cover @xmath134 and see one another .",
    "this means they are strongly connected .",
    "the beacon @xmath19 ( or @xmath20 or @xmath176 ) corresponding to each subtree covers the rectangles @xmath131 and @xmath130 of that subtree .",
    "the beacon @xmath10 is in the polygon @xmath66 remaining after the reduction .",
    "we now need to consider only cases where there is at least one type iii subtree present .",
    "since @xmath134 has a grandchild , there must also be a type i subtree .",
    "we consider the alternatives for the third subtree of @xmath134 : it is either absent , type i , or type iii .",
    "if @xmath134 has two type i subtrees , and one type iii subtree , then @xmath64 can be reduced by 6 rectangles at a cost of 4 beacons .",
    "the situation is as depicted in figure [ fig : typefour]b , except that one of the leaf rectangles @xmath130 , @xmath139 , or @xmath140 is missing .",
    "this is handled in the same manner as lemma [ lem : all - typei ] , placing a beacon on the vertical between @xmath134 and each of its neighbors .",
    "[ lem : onethree ] if @xmath134 has exactly one type i subtree , and exactly one type iii subtree , then @xmath64 can be reduced by 3 or 4 rectangles at a cost of 2 beacons",
    ".     has one type i subtree and one type iii subtree .",
    "( a ) both subtrees are on the left of @xmath134 .",
    "( b ) the type iii subtree is on the right .",
    "( c ) the type i subtreee is on the right , and the type iii subtree is on the left . ]    let the type i subtree have rectangles @xmath130 and @xmath131 , and the type iii subtree have rectangle @xmath139 .",
    "we consider the three possibilities : both subtrees are on the left of @xmath134 , the type iii subtree is on the lower right of @xmath134 , and the type i subtree is on the lower right of @xmath134 .    in the first case ,",
    "we place a beacon @xmath3 at @xmath177 , and a beacon @xmath10 at @xmath155 , where @xmath1 and @xmath110 are the lower - left and upper - left corners of @xmath134 , respectively .",
    "we remove @xmath130 , @xmath131 , and @xmath139 .",
    "this is shown in figure [ fig : typeonethree]a when @xmath131 is an upper - left neighbor of @xmath134 ; the case when @xmath131 is a lower - left neighbor is similar and not shown . here",
    ", @xmath163 may be a short ( solo ) neighbor of @xmath134 , as pictured , or it may be a tall neighbor .",
    "in the second case , we place a beacon @xmath3 on the vertical between @xmath131 and @xmath134 , and a beacon @xmath10 at @xmath178 , where @xmath21 is the reflex vertex shared by @xmath134 and @xmath139 .",
    "this is repair position for any paths that get trapped in this reduction .",
    "we remove @xmath130 , @xmath131 , and @xmath139 .",
    "this is shown in figure [ fig : typeonethree]b for @xmath131 in the upper left ; @xmath131 in the lower left is as suggested by the dashed boundary and red beacon placement .    in the third case ,",
    "we place beacons @xmath3 at @xmath156 and @xmath10 at @xmath158 , where @xmath157 and @xmath159 are the lower right and upper right corners of @xmath134 .",
    "we remove the four rectangles @xmath134 , @xmath131 , @xmath130 , and @xmath139 .",
    "if @xmath139 is an upper - left neighbor of @xmath134 , then the situation is as depicted in figure [ fig : typeonethree ] , and @xmath10 covers @xmath139 . if @xmath139 is instead a lower - left neighbor of @xmath134 , then the situation is suggested with the dashed boundary in the figure , and @xmath3 covers @xmath139 .    in all cases in this lemma , @xmath3 and @xmath10",
    "are both in @xmath134 , so they see one another . also , @xmath10 is always in @xmath66 .",
    "the beacon @xmath3 always covers @xmath134 , @xmath131 , and @xmath130 . in all but the last case",
    ", @xmath10 covers @xmath139 ; in the last case , @xmath3 or @xmath10 covers @xmath139 . in the one case that trapped paths could occur , @xmath10 was in repair position . by lemma",
    "[ lem : routingset ] , the current lemma follows .",
    "[ lem : onethreethree ] if @xmath134 has one type i subtree , and two type iii subtrees , then @xmath64 can be reduced by 3 or 5 rectangles at a cost of 2 beacons",
    ".     has one type i subtree and two type iii subtrees .",
    "( a ) the type i subtree is on the left .",
    "( b ) the type i subtree is on the right . ]",
    "if the type i subtree is on the upper left , then the situation is as in figure [ fig : onethreethree]a , we may apply the same reduction used in the first case of lemma [ lem : onethree ] .",
    "the case when the type i subtree is on the lower left is similar .",
    "if the type i subtree is on the right , then the situation is as shown in figure [ fig : onethreethree]b . here",
    "we apply the same reduction used in the last case of lemma [ lem : onethree ] , placing beacons @xmath3 at @xmath156 and @xmath10 at @xmath158 , where @xmath157 and @xmath159 are the lower right and upper right corners of @xmath134 .",
    "here , @xmath3 covers all removed rectangles except the upper - left neighbor of @xmath140 , which @xmath10 covers . @xmath3 and",
    "@xmath10 see each other , and there is no possibility of trapped paths .",
    "we now summarize the last four sections .",
    "[ thm : casesummary ] if @xmath63 has depth at least 3 , then @xmath64 can be reduced by 2 rectangles at a cost of 1 beacon ; 3 , 4 , or 5 rectangles at a cost of 2 beacons ; 5 rectangles at a cost of 3 beacons ; or 6 or 7 rectangles at a cost of 4 beacons .",
    "the reduction removes at most three layers from the dual tree .",
    "start at a deepest leaf @xmath130 of @xmath63 , and label its parent and ancestors @xmath131 , @xmath134 , @xmath163 , etc .",
    "if there is a reduction from sections [ sec : atwotall ] to [ sec : atwopaired ] at any child of @xmath134 , we are done ( the number of rectangles and beacons for the reduction is listed here in the theorem statement ) .",
    "these reductions remove at most two layers from the dual tree .",
    "otherwise , all children of @xmath134 are one of the four types in figure [ fig : threeleveltypes ] . if any of these subtrees are tall , then lemma [ lem : typeii ] or [ lem : typeiv ] applies , and if they are all short , then one of lemmas [ lem : all - typei][lem : onethreethree ] applies .",
    "again , the number of rectangles and beacons in the reduction is listed here ; these reductions remove at most three layers from the dual tree .",
    "[ cor : casescondensed ] if @xmath63 has depth at least 3 , then @xmath64 can be reduced by some @xmath110 rectangles at a cost of @xmath19 beacons , where @xmath179 .",
    "the reduction removes at most three layers from the dual tree .",
    "the basis for our induction is when @xmath63 has depth 2 or smaller .",
    "the basis cases are when there are only one or two levels in the dual tree .",
    "if it has depth 0 , the tree is simply a node , and the polygon is a rectangle .",
    "if it has depth 1 , since we rooted it at a leaf , then the tree has only two nodes , and the polygon is a 6-vertex `` l '' shape . in both of these cases ,",
    "every point in the polygon attracts every other point in the polygon ( see lemma [ lem : solocovered ] ) .",
    "thus , there are no intermediate beacons required and the smallest beacon routing set is of size 0",
    ".     has one child on the right .",
    "( b ) @xmath131 has one child , on the left and short .",
    "( c ) @xmath131 has one child , on the left and tall .",
    "( d ) @xmath131 has two or three children . ]",
    "the depth-2 situation is a little more involved .",
    "@xmath134 s only child is @xmath131 , but @xmath131 has one to three children .",
    "this gives a total of 3 to 5 rectangles , or @xmath180 to @xmath181 .",
    "as above , we assume that @xmath134 is an upper right neighbor of @xmath131 .",
    "if @xmath131 has one child , then there are three rectangles and @xmath180 .",
    "if the neighbors of @xmath131 are both right neighbors , then the situation is as depicted in figure [ fig : basis]a , and we cover the polygon with one beacon in the modified right center of @xmath131 , by lemma [ lem : pairedcovered ] .",
    "if there is one left neighbor @xmath130 and one right neighbor @xmath134 , then we cover them with a beacon @xmath3 on the vertical between @xmath131 and @xmath134 .",
    "if the left neighbor is short , as shown in figure [ fig : basis]b for a lower - left neighbor , the beacon @xmath3 covers @xmath130 by lemma [ lem : sololeafcovered ] . if instead the left neighbor is tall , as shown in figure [ fig : basis]c for an upper - left neighbor , the beacon @xmath3 covers @xmath130 by lemma [ lem : tallleafcovered ] .",
    "( the cases of a short upper - left neighbor and of a tall lower - left neighbor are similar . ) since @xmath182 , we have covered the polygon with a correct number of beacons .",
    "if @xmath131 has two children , and one of its neighbors is tall , then the situation is as depicted in figure [ fig : basis]d ( or symmetric to it ) .",
    "here we cover the polygon with one beacon placed in the modified right center of @xmath131 .    otherwise , if @xmath131 has two or three children , and all of its neighbors are short , then there are three or four rectangles , giving @xmath183 or @xmath181 .",
    "@xmath184 , so we have two beacons with which to cover the polygon .",
    "the situation is as depicted in figure [ fig : basis]e , although one of @xmath130 , @xmath139 , or @xmath140 may be missing .",
    "@xmath131 must have at least one lower neighbor , say @xmath130 , on either the left or the right .",
    "we place beacon @xmath3 at @xmath158 and @xmath10 at @xmath185 , where @xmath159 is the upper - right corner of @xmath131 , and @xmath104 is the lower shared corner of @xmath130 and @xmath131 .",
    "the top beacon @xmath3 covers @xmath131 and @xmath131 s top neighbors , and the bottom beacon @xmath10 covers @xmath131 s bottom neighbors .",
    "the beacons are visible to each other , so they form a routing beacon set .    we have thus shown the following :    [ lem : basis ] if the dual tree has depth two or smaller , then the polygon has a beacon routing set of @xmath186 beacons .",
    "any orthogonal polygon of @xmath24 vertices has a local beacon routing set of at most @xmath186 beacons .",
    "let @xmath21   be the number of rectangles in the vertical decomposition of the polygon .",
    "since @xmath187 the floor in the theorem is equivalent to @xmath188 we proceed to prove that there is a beacon set no larger than this , by induction on @xmath21 .",
    "first , we root the dual tree at a leaf .",
    "we stop the induction when the dual tree has depth two or smaller , measured from this root .",
    "lemma [ lem : basis ] establishes these polygons as satisfying the theorem .    for our inductive step ,",
    "the depth of the dual tree is at least 3 .",
    "thus theorem [ thm : casesummary ] applies , and gives us a reduction of @xmath110 rectangles for @xmath19 beacons , where @xmath189 .",
    "we reduce @xmath15 by @xmath110 rectangles to construct a @xmath190 with @xmath191 rectangles . we know that @xmath192 since the dual tree has depth at least three ( i.e. , at least four levels ) and the reductions remove at most three levels from that .",
    "so by induction @xmath190 has a local beacon routing set of at most @xmath193 beacons . to construct the beacon set for @xmath15 , we add @xmath19 beacons to that , and so we have at most @xmath194 beacons .",
    "in this section we exhibit an infinite class of orthogonal polygons that require @xmath195  beacons to route between any pair of points .",
    "the examples are geometrically simple , being orthogonal spiral polygons with a corridor width of @xmath196 .    our polygons will spiral outwards clockwise as one moves through the reflex chain when walking counterclockwise around the polygon ( i.e. left hand on interior ) .",
    "call the reflex vertices of the polygon @xmath197 in this counterclockwise order , and let @xmath198 and @xmath199 denote the convex vertices adjacent to @xmath43 and @xmath200 , respectively .",
    "let @xmath201 be the convex vertex just outside of ( and closest to ) @xmath202 ( refer to figure [ fig : spiraldefinitions ] ) .",
    "let @xmath203 be the edge from @xmath202 to @xmath204 , and @xmath205 be the length of @xmath203 .",
    "now let @xmath206 be the `` corner '' @xmath196 by @xmath196 square in @xmath15 with vertices @xmath202 and @xmath201 , and @xmath207 be the `` hallway '' rectangle ( with dimensions @xmath196 by @xmath205 ) between @xmath208 and @xmath209 .",
    "if @xmath210   is the midpoint of @xmath211 and @xmath202 , and @xmath212   is the midpoint of @xmath213 and @xmath201 , we can partition the `` hallway '' @xmath207 into two halves @xmath214  and @xmath215   by splitting with its bisector @xmath210@xmath212 .",
    "let @xmath214  be the half adjoining @xmath206 , and let that half ( and not @xmath215 ) contain the points on the segment @xmath210@xmath212 .",
    "we will construct polygons for @xmath216 for some @xmath21 ; these polygons are specified simply by giving the lengths @xmath217 of the @xmath218 `` hallway '' rectangles .",
    "provided we have @xmath219 for all @xmath220 , the polygon will spiral outward and not self - intersect .",
    "we specify @xmath21 sections @xmath221 of the polygon , by letting @xmath222 be the union of @xmath223 and @xmath224 ( see figure [ fig : spiralsection ] ) .",
    "note that no point of @xmath15 is contained in more than one section , and there are points at either end of the spiral ( in @xmath225 and @xmath226 ) that are in no section .",
    "now consider a set of beacons @xmath6 that can route in such a polygon @xmath15 .",
    "we claim that @xmath227 .",
    "if this were not the case , then by the pigeonhole principle some section @xmath222 would contain less than two beacons .",
    "if @xmath222 is removed from @xmath15 , then there are two nonempty subpolygons left : the part _ before _ @xmath222 , which contains at least @xmath228 , and the part _ after _",
    "@xmath222 , which contains at least @xmath229 .",
    "since @xmath6 is a routing set of beacons , one must be able to route between a point in the part before @xmath222 to a point in the part after @xmath222 using only the beacons of @xmath6 . in order for a robot to get from a point before @xmath222 to a point after , it must at some point pass from @xmath230  to @xmath231 at some point on the ( closed ) vertical between @xmath232 and @xmath230 ( refer to figure [ fig : spiralsection ] ) for a beacon to cause this to happen , the beacon must be on or left of the line @xmath233 in one of the three local regions @xmath234 and @xmath232 .",
    "( if it is not in one of these three local regions , the robot will become stuck without reaching the beacon . )    to summarize , some @xmath222 has fewer than two beacons , but to route from a point before @xmath222 to a point after @xmath222 , there must be a beacon in @xmath234 or @xmath232 . thus , the no - beacon option is eliminated , and this @xmath222 has one beacon .",
    "thus , the single beacon @xmath19 in @xmath222 lies in @xmath237 .",
    "consider again routing from some point before @xmath222 to some point after .",
    "after activating @xmath19 and attracting the robot there , another beacon must activate and attract the robot along the next stage of its routing .",
    "since there are no other beacons in @xmath222 , and since we can only use @xmath19 once , the next beacon must be somewhere after @xmath222 . for a beacon to successfully attract a robot from @xmath237 to somewhere after @xmath222",
    ", the beacon must be in either @xmath229  or @xmath238 .",
    "since the hallways @xmath239 and @xmath240 are ( considerably ) longer than they are wide , a robot in @xmath237 attracted towards a beacon @xmath241  in @xmath229 or @xmath238 will either hit @xmath242   ( as shown in red in figure [ fig : attractcorner ] ) , hit @xmath243   ( as shown in green in the figure ) , or hit the reflex vertex @xmath244 itself .",
    "if the robot hits @xmath242   it will eventually get stuck , but if it hits @xmath243   it will continue along this wall , eventually reaching @xmath241 .",
    "if the robot is below ( with reference to figure [ fig : attractcorner ] ) the line @xmath241@xmath244 , then it will hit @xmath242  and get stuck .",
    "thus , the robot ( and hence the single beacon in @xmath222 ) must be located on or above @xmath241@xmath244 in @xmath237 . since this need be true only for a single beacon @xmath241  in @xmath229  or @xmath238 , we can assume the most permissive case of @xmath245 , and derive that the beacon in @xmath222 must be located on or above @xmath246@xmath244 in @xmath237 ( the green - striped region in figure [ fig : aboveline ] ) . that is , any robot below this line would be attracted into @xmath242  by any beacon in @xmath229  or @xmath238 .      by a symmetric argument ,",
    "considering a routing from some point before @xmath222 to some point after @xmath222 , we get that the beacon in @xmath222 must be located on or below @xmath247@xmath244 .",
    "the effect of this constraint combined with the previous one is illustrated in figure [ fig : betweenlines ] .",
    "however , figure [ fig : betweenlines ] is not the only geometric situation possible : if the ratio of @xmath248 to @xmath249 is greater than the ratio of @xmath250 to @xmath251 , then there are no points of @xmath237 other than @xmath244 that satisfy both constraints ; this is illustrated in figure [ fig : crossinglines ] .",
    "thus far we have shown that , if @xmath222 contains less than two beacons , and it satisfies the length inequality , then @xmath222 contains exactly one beacon at @xmath244 .",
    "in this situation , consider a before - to - after-@xmath222 routing of a robot , and an after - to - before-@xmath222 routing .",
    "the next beacon on either of these routings ( being in either @xmath255 or @xmath256 ) would pull a robot at @xmath244 locally towards the exterior of the polygon . if the beacon - attraction model specifies either a fixed choice ( along the clockwise edge , or along the clockwise edge ) or an arbitrary choice ( one ca nt tell ahead of time which of the edges the robot will choose to move along ) for a robot pulled towards the exterior of a reflex vertex , then in at least some instances on one of the before - to - after and after - to - before routings , the robot goes along the wrong edge and gets stuck . thus , even @xmath244 is not a valid choice for a single beacon in @xmath222 in a valid routing set of beacons @xmath6 when the length inequality holds .",
    "given the length inequality , we have now eliminated all possibilites for @xmath222 to contain fewer than two beacons , so @xmath222 contains at least two beacons , and the polygon therefore contains at least @xmath257 beacons ; since @xmath216 , we can rewrite the number of beacons as at least @xmath258 .",
    "we will enforce the length inequality for each @xmath205 ( where @xmath261 ) as the left - hand side , rather than simply for those @xmath62 that are equivalent to @xmath196 modulo @xmath262 : @xmath263 and we will replace this with the stronger requirement @xmath264 by requiring that every @xmath265 .    by letting @xmath266",
    ", we get the recurrence @xmath267 which has the solution @xmath268 as one can verify by substitution .",
    "( if we change the inequality to an equality and solve the recurrence exactly , we still get a function in @xmath269 . )",
    "so if we choose @xmath270 , then the length inequality is everywhere satisfied .",
    "it is also simple to verify our requirement @xmath265 is always satsified .",
    "m.  biro , j.  gao , j.  iwerks , i.  kostitsyna , and j.  s. mitchell .",
    "combinatorics of beacon routing and coverage . in _ proceedings of the 25th canadian conference on computational geometry _ , waterloo , ontario , 2013 .",
    "m.  biro , j.  iwerks , i.  kostitsyna , and j.  s. mitchell .",
    "beacon - based algorithms for geometric routing . in f.",
    "dehne , r.  solis - oba , and j .-",
    "r . sack , editors , _ algorithms and data structures _ , pages 158169 .",
    "springer , 2013 .",
    "b.  karp and h.  t. kung .",
    "gpsr : greedy perimeter stateless routing for wireless networks . in _ proceedings of the 6th annual international conference on mobile computing and networking _ , mobicom 00 , pages 243254 , new york , ny , usa , 2000 .",
    "a.  nguyen , n.  milosavljevic , q.  fang , j.  gao , and l.  guibas .",
    "landmark selection and greedy landmark - descent routing for sensor networks . in _",
    "infocom 2007 .",
    "26th ieee international conference on computer communications .",
    "ieee _ , pages 661669 , may 2007 ."
  ],
  "abstract_text": [
    "<S> _ beacon attraction _ is a movement system whereby a robot ( modeled as a point in 2d ) moves in a free space so as to always locally minimize its euclidean distance to an activated beacon ( which is also a point ) . </S>",
    "<S> this results in the robot moving directly towards the beacon when it can , and otherwise sliding along the edge of an obstacle . </S>",
    "<S> when a robot can reach the activated beacon by this method , we say that the beacon _ attracts _ the robot . </S>",
    "<S> a _ beacon routing _ from @xmath0 to @xmath1 is a sequence @xmath2 of beacons such that activating the beacons in order will attract a robot from @xmath0 to @xmath3 to @xmath4 to @xmath5 to @xmath1 , where @xmath1 is considered to be a beacon . </S>",
    "<S> a _ routing set of beacons _ is a set @xmath6 of beacons such that any two points @xmath7 in the free space have a beacon routing with the intermediate beacons @xmath8 all chosen from @xmath6 . </S>",
    "<S> here we address the question of `` how large must such a @xmath6 be ? '' in orthogonal polygons , and show that the answer is `` sometimes as large as @xmath9 , but never larger . '' </S>"
  ]
}