{
  "article_text": [
    "today , some of the most efficient techniques for probabilistic inference employ reductions to weighted model counting  ( wmc ) both for propositional and for relational probabilistic models  @xcite . on the other hand ,",
    "it is well - known that probabilistic inference as well as many other tasks can be generalized to a sum of products computation over models with suitable operators from a semiring structure .",
    "this has led to common inference algorithms for a variety of different inference problems in a variety of different fields , see for instance  @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite and @xcite .",
    "the work presented here builds on these two lines of work .    as our first contribution",
    ", we introduce the task of _ algebraic model counting ( amc)_. amc generalizes weighted model counting to the semiring setting and supports various types of labels , including numerical ones as used in wmc , but also sets , polynomials , boolean formulae , and many more .",
    "it thereby also generalizes many different tasks from a variety of different fields . as our second contribution",
    ", we investigate how to solve amc problems using knowledge compilation . as amc",
    "is defined in terms of the set of models of a propositional logic theory , we can exploit the succinctness results of the knowledge compilation map of  @xcite .",
    "we show that amc can in general be evaluated using sd - dnnf  circuits , which are more succinct than a direct representation of the set of models .",
    "furthermore , we identify a number of characteristics of amc tasks that allow for using even more succinct types of circuits .",
    "our results generalize well - known results for satisfiability and model counting in circuits to broad classes of amc tasks and extend the task classification in algebraic prolog  @xcite to more succinct types of circuits . as our third contribution , we provide conditions under which amc generalizes semiring sums of products defined over derivations , that is , sequences of possibly repeated variables , instead of over models .",
    "this paper is organized as follows .",
    "we introduce algebraic model counting in section  [ sec : amc ] .",
    "section  [ sec : amc - kc ] provides task characteristics that allow for sound evaluation on specific classes of circuits and shows how these generalize previous results .",
    "we discuss future work and conclude in section  [ sec : fw ] .",
    "we first define the task of algebraic model counting , provide some example instances , and briefly discuss its relationships to existing frameworks .",
    "the underlying mathematical structure is that of a commutative semiring .    a _ semiring _ is a structure@xmath0 , where _ addition _",
    "@xmath1 and _ multiplication _  @xmath2 are associative binary operations over the set  @xmath3 , @xmath1  is commutative , @xmath2  distributes over  @xmath1 , @xmath4 is the neutral element of  @xmath1 , @xmath5 that of  @xmath2 , and for all @xmath6 , @xmath7 . in a _ commutative semiring _ , @xmath2  is commutative as well .",
    "algebraic model counting is now defined as follows :    given    * a _ propositional logic theory _ @xmath8 over a set of variables @xmath9 , * a _ commutative semiring _",
    "@xmath10 , and * a _ labeling function _ @xmath11 , mapping literals @xmath12 of the variables in @xmath9 to elements of the semiring set @xmath3 ,    compute @xmath13 where @xmath14 denotes the set of models of  @xmath8 .",
    "@xmath15 & @xmath16 & @xmath1 & @xmath2 & @xmath17 & @xmath18 & ref + sat & @xmath19 & @xmath20 & @xmath21 & @xmath22 & @xmath23 & @xmath21 & @xmath21 & b , bt , g , gk , k , l , m + # sat & @xmath24 & @xmath25 & @xmath26 & @xmath27 & @xmath28 & @xmath29 & @xmath26 & b , g , gk , k , l + wmc & @xmath30 & @xmath25 & @xmath26 & @xmath27 & @xmath28 & @xmath31 & @xmath32 & + prob & @xmath30 & @xmath25 & @xmath26 & @xmath27 & @xmath28 & @xmath33 $ ] & @xmath34 & b , bt , e , g , k + sens & @xmath35 $ ] & @xmath25 & @xmath26 & @xmath27 & @xmath28 & @xmath36 or @xmath33 $ ] & @xmath34 & k + grad & @xmath37 & @xmath38 & @xmath39 & eq .   &",
    "eq .   & eq .   & eq .   & e , k + mpe & @xmath30 & @xmath25 & @xmath26 & @xmath40 & @xmath28 & @xmath33 $ ] & @xmath34 & b , bt , g , k , l , m + s - path & @xmath41 & @xmath42 & @xmath25 & @xmath43 & @xmath27 & @xmath44 & @xmath25 & bt , gk , k + w - path & @xmath41 & @xmath25 & @xmath42 & @xmath45 & @xmath43 & @xmath44 & @xmath42 & bt + fuzzy & @xmath46 $ ] & @xmath25 & @xmath26 & @xmath45 & @xmath43 & @xmath47 $ ] & @xmath26 & gk , m + @xmath48weight & @xmath49 & @xmath48 & @xmath25 & @xmath43 & @xmath50 & @xmath51 & @xmath52 & m + obdd@xmath53 & obdd@xmath53(@xmath9 ) & obdd@xmath53(@xmath25 ) & obdd@xmath53(@xmath26 ) & @xmath22 & @xmath23 & obdd@xmath53(@xmath54 ) & @xmath55obdd@xmath53(@xmath54 ) & k + why & @xmath56 & @xmath57 & @xmath57 & @xmath58 & @xmath58 & @xmath59 & n / a & gk + @xmath60 & @xmath61 $ ] & @xmath25 & @xmath26 & @xmath27 & @xmath28 & @xmath62 & n / a & gk +    [ th : instances ] amc generalizes satisfiability ( * sat * ) , model counting ( * # sat * ) , weighted model counting ( * wmc * ) , probabilistic inference ( * prob * ) , sensitivity analysis ( * sens * ) , gradient ( * grad * ) , probability of most likely states ( * mpe * ) , shortest ( * s - path * ) and widest ( * w - path * ) paths , fuzzy ( * fuzzy * ) and @xmath48-weighted ( * @xmath48weight * ) constraints , and obdd@xmath53construction .    by verification of the definitions in  table  [ tab : ex ] .",
    "* sat * , * # sat * , * wmc * and * prob * are well - known tasks that appear in many fields .",
    "* sens * and * grad * allow one to investigate the effect of parameter changes and to learn parameters in a probabilistic setting , respectively . in * grad",
    "* , labels are tuples @xmath63 with @xmath64 $ ] the probability of @xmath65 and @xmath66 the gradient with respect to the @xmath48th variable : @xmath67 if the second element of the label denotes a cost , the * grad * semiring calculates expected costs . *",
    "mpe * , * s - path * , * w - path * , * fuzzy * and * @xmath48weight * ( with bounded addition  @xmath50 ) are examples of optimization tasks .",
    "finally , amc can also be used to construct a canonical representation of the set of models in the form of an obdd@xmath53  circuit , a popular data structure in many fields of computer science .",
    "the last two tasks in the table originate from probabilistic databases under the positive relational algebra  @xmath60 and are not easily extended to negative literals .",
    "why - provenance ( * why * ) collects the set of identifiers of all tuples an answer depends on , whereas @xmath60-provenance constructs polynomials that also take into account the number of times the tuples are used . while all tasks listed in table  [ tab : ex ] are representative examples from the literature , cf .",
    "the references given in the table , this is by no means an exhaustive list of semirings and labeling functions that can be used for amc .    as these examples illustrate , the amc task shares its basic structure with a number of other tasks .",
    "the class of sum - of - products problems generalizes factor graphs to the algebraic setting , but uses discrete valued variables or factors as basic building blocks  @xcite . in this context , affine algebraic decision diagrams  @xcite and and/or multi - valued decision diagrams  @xcite",
    "have been used for inference with real - valued semirings .",
    "the restriction to two - valued variables allows us to directly compile amc tasks to propositional circuits without adding constraints on legal variable assignments to the theory . in soft constraint programming ,",
    "additional constraints are imposed on the semiring , which ensure that addition optimizes the degree of constraint satisfaction  @xcite .",
    "@xcite provides an algorithm that compiles semiring - based systems into semiring - labelled decision diagrams , which are closely related to unordered binary decision diagrams , to compute valuations .",
    "semiring - induced propositional logic labels clauses with semiring elements with a weight associated to their falsification and is restricted to semirings whose induced pre - order is partial  @xcite . in algebraic prolog ( aproblog ) , a semiring - labeled logic program is reduced to amc for inference  @xcite .    while amc sums over models , other tasks sum over sequences of possibly repeated variables .",
    "examples include algebraic path problems  @xcite , semiring parsing  @xcite , provenance semirings for positive relational algebra queries in databases  @xcite , and semiring - weighted dynamic programs  @xcite .",
    "we will discuss the difference between such derivation - based settings and amc in more detail in section  [ sec : amcapp ] .",
    "in their knowledge compilation map , @xcite provide an overview of succinctness relationships between various types of propositional circuits .",
    "furthermore , they show which reasoning tasks in propositional logic , such as ( weighted ) model counting ( * # sat / wmc * ) or satisfiability checking ( * sat * ) , are evaluated on which circuits in time polynomial in the size of the circuit .",
    "propositional circuits are often used as a representation language in weighted model counting and similar tasks , including for instance probability calculation and sensitivity analysis in probabilistic databases  @xcite and inference in algebraic prolog  @xcite . in the following , we extend this approach to amc .",
    "we first repeat the relevant knowledge compilation concepts , closely following  @xcite .    a sentence in _ negation normal form _ ( nnf ) over a set of propositional variables @xmath9 is a rooted , directed acyclic graph where each leaf node is labeled with true ( @xmath68 ) , false ( @xmath69 ) , or a literal of a variable in  @xmath9 , and each internal node with disjunction ( @xmath22 ) or conjunction ( @xmath23 ) .",
    "an nnf  is _ decomposable _ if for each conjunction node  @xmath70 , no two children  @xmath71 and  @xmath72 share any variable .",
    "an nnf  is _ deterministic _ if for each disjunction node  @xmath73 , each pair of different children  @xmath71 and  @xmath72 is logically inconsistent .",
    "an nnf  is _ smooth _ if for each disjunction",
    "node @xmath73 , each child  @xmath71 mentions the same set of variables .",
    "dnnf , d - nnf , s - nnf , sd - nnf , d - dnnf , s - dnnf , and sd - dnnf  are the subsets of nnf  satisfying ( combinations of ) these properties , where ` d ` stands for decomposable , ` d ` for deterministic , and ` s ` for smooth .    for instance , the circuit in figure  [ fig : circuits : left ] is in sd - dnnf , while the one in figure  [ fig : circuits : right ] has none of the three properties .",
    "the algebraic model count  @xmath74 is defined as a summation over the set of models  @xmath14 of a propositional theory  @xmath8 , which corresponds to the mods  language in the knowledge compilation map .",
    "however , as this mods  language is exponentially less succinct than any other representation of  @xmath8 included in the map , converting to mods  in order to evaluate equation   directly is undesirable . in the following ,",
    "we therefore establish a connection between characteristics of amc tasks and properties of the nnf  circuits they can be evaluated on , resulting in the classification scheme summarized in table  [ tab : eval ] .",
    ".semiring characteristics and corresponding circuits that allow for sound amc evaluation . [ cols=\"^,^,^,^,^ \" , ]     table  [ tab : eval ] uses the same characteristics of semiring operators and labeling function , but does not assume a dnf  as starting point and thus also does not rely on properties of such a dnf .",
    "its left half generalizes the aproblog scheme to more succinct superclasses , namely ( ` s-`)dnnf  instead of ( ` s-`)dnf , and ( ` s`)d - dnnf  instead of ( ` s`)d - dnf  or ( ` s-`)obdd .",
    "third , we observe that while there are interesting inference tasks that allow for sound evaluation on the more succinct class of dnnfinstead of the general sd - dnnf  evaluation , the conditions for sound evaluation on non - decomposable circuits are too strict in most practical cases .",
    "this is in line with the knowledge compilation map , which excludes non - decomposable circuits ( with the exception of the most general class nnf ) as they do not support any of the studied tasks in polytime  @xcite .",
    "while amc is a sum over models , many other semiring - based tasks require a sum over derivations , that is , sequences of possibly repeated variables .",
    "examples include algebraic path problems  @xcite , semiring parsing  @xcite , provenance semirings for positive relational algebra queries in databases  @xcite , and semiring - weighted dynamic programs  @xcite .",
    "we refer to this type of task as _ algebraic derivation counting _",
    "while amc and adc appear very similar , they can not easily be exchanged , as we illustrate next .",
    "we restrict the discussion to finite adc .    where amc is based on a mods  representation , that is , a smooth , deterministic dnf , adc is based on a type of nnf  that is not included in the knowledge compilation map : a disjunction of conjunctions of possibly repeated variables . because of the repeated variables , this is not a dnf  in general .",
    "figure  [ fig : adc ] shows two examples of such circuits .",
    "the nnf  in figure  [ fig : adc : left ] encodes the two paths between nodes @xmath75 and @xmath76 in a graph with three edges @xmath77 , @xmath78 and @xmath79 .",
    "it is decomposable , as the conjunction does not repeat variables , but neither smooth nor deterministic and thus a dnnf .",
    "the nnf  in figure  [ fig : adc : right ] encodes the two derivations of @xmath80 in a context - free grammar with rules @xmath81 and @xmath82 .",
    "variable @xmath83 denotes an application of the @xmath84th production rule for a non - terminal  @xmath85 , that is , the right conjunction in the circuit encodes the derivation @xmath86 .",
    "the circuit is neither decomposable nor smooth , and also not deterministic , even though the derivations in the underlying grammar setting are mutually exclusive ( cf .",
    "below ) .    in order to represent an adc task as an amc task",
    ", the labeling function  @xmath87 needs to be extended to negative literals .",
    "together with the semiring , such an extension determines one of the settings of table  [ tab : eval ] .",
    "if the adc s nnf  belongs to the class of circuits corresponding to this setting , the adc and amc tasks coincide .",
    "clearly , this is always the case for commutative semirings and labeling functions with idempotent , consistency - preserving @xmath88 and idempotent , neutral @xmath89 such as for instance obdd@xmath53 .",
    "however , as noted above , such tasks are rare .    for an adc instance with idempotent addition defined on a dnnf ,",
    "that is , without repeated variables in conjunctions , an equivalent amc instance can be constructed if @xmath87 can be extended such that @xmath89 is neutral .",
    "for instance , consider the circuit in figure  [ fig : adc : left ] in a shortest path setting . by setting @xmath90 for all variables @xmath54",
    ", the * s - path * semiring in table  [ tab : ex ] provides an equivalent amc task .",
    "as the nnf  circuits of adc do not contain negation , they are not deterministic .",
    "however , the underlying tasks often impose additional constraints on their variables .",
    "for instance , in the grammar example in figure  [ fig : adc : right ] , the leftmost children @xmath91 and @xmath92 of the two conjunction nodes are in fact mutually exclusive , as only one of the right hand sides for @xmath93 can be chosen as first step in a derivation .",
    "such an @xmath94-ary variable can be encoded using @xmath94 binary variables by adding corresponding constraints to the theory that restrict legal value assignments .",
    "for some semirings , for instance * prob * , it is sufficient to adapt the labels of these variables without adding constraints .",
    "it is an open question under which general conditions such label transformations are possible .",
    "conversely , every amc task can be trivially represented as an adc task by introducing a derivation for each model .",
    "however , this is clearly not desirable from a complexity point of view . @xcite",
    "provide an adc encoding of network reliability under probabilistic edge failure , that is , the * prob * amc task for a positive propositional formula .",
    "they essentially modify multiplication to filter repeated literals , and addition to subtract shared models of its operands , which drastically increases complexity of these operations .",
    "again , it is an open question under which general conditions such transformations are possible .",
    "we have introduced the task of algebraic model counting , which generalizes weighted model counting to a semiring setting and thus to various types of labels , including numerical ones as used in wmc , but also sets , polynomials , or boolean formulae .",
    "we have shown that evaluating amc is sound on sd - dnnf  circuits , which are known to be more succinct than the mods  language used in its definition .",
    "furthermore , we have provided characteristics of amc tasks that guarantee sound evaluation on more succinct classes of circuits . this classification not only provides a means of directly choosing a circuit type that allows for efficient inference given a new amc task , but also generalizes a number of known results and provides a framework to map restricted types of algebraic derivation counts onto amc tasks .    given the results presented here ,",
    "it is worth investigating which other algebraic representations can be reduced to algebraic model counting .",
    "another line of future work concerns the introduction of additional operators that would make it possible to express additional tasks , for instance , partial map , which requires a maximization operator in addition to summation and multiplication .",
    "eisner , j. ( 2002 ) .",
    "parameter estimation for probabilistic finite - state transducers . in _ proceedings of the 40th annual meeting of the association for computational linguistics ( acl ) _ , pages 18 , philadelphia .",
    "eisner , j. , goldlust , e. , and smith , n. ( 2005 ) . compiling comp ling : weighted dynamic programming and the dyna language . in _ proceedings of the human language technology conference and conference on empirical methods in natural language processing ( hlt / emnlp ) _ , pages 281290 .",
    "fierens , d. , van  den broeck , g. , thon , i. , gutmann , b. , and de  raedt , l. ( 2011 ) .",
    "inference in probabilistic logic programs using weighted cnf s . in _ proceedings of the 27th conference on uncertainty in artificial intelligence ( uai ) _ , pages 211220 .",
    "jha , a.  k. and suciu , d. ( 2011 ) .",
    "knowledge compilation meets database theory : compiling queries to decision diagrams . in",
    "_ proceedings of the 14th international conference on database theory ( icdt ) _ , pages 162173 .",
    "kanagal , b. , li , j. , and deshpande , a. ( 2011 ) .",
    "sensitivity analysis and explanations for robust query evaluation in probabilistic databases . in _ proceedings of the acm sigmod international conference on management of data ( sigmod ) _ , pages 841852 .",
    "kimmig , a. , van  den broeck , g. , and de  raedt , l. ( 2011 ) .",
    "an algebraic prolog for reasoning about possible worlds . in _ proceedings of the 25th aaai conference on artificial intelligence ( aaai ) _ , pages 209214 .",
    "larrosa , j. , oliveras , a. , and rodrguez - carbonell , e. ( 2010 ) .",
    "semiring - induced propositional logic : definition and basic algorithms . in clarke , e.  m. and voronkov , a. , editors ,",
    "_ revised selected papers of the 16th international conference on logic for programming , artificial intelligence , and reasoning ( lpar ) _ , volume 6355 of _ lecture notes in computer science _ ,",
    "pages 332347 .",
    "springer .",
    "sanner , s. and mcallester , d.  a. ( 2005 ) .",
    "affine algebraic decision diagrams ( aadds ) and their application to structured probabilistic inference . in _ proceedings of the 19th international joint conference on artificial intelligence ( ijcai ) _ , pages 13841390 ."
  ],
  "abstract_text": [
    "<S> weighted model counting ( wmc ) is a well - known inference task on knowledge bases , used for probabilistic inference in graphical models . </S>",
    "<S> we introduce algebraic model counting ( amc ) , a generalization of wmc to a semiring structure . </S>",
    "<S> we show that amc generalizes many well - known tasks in a variety of domains such as probabilistic inference , soft constraints and network and database analysis . </S>",
    "<S> furthermore , we investigate amc from a knowledge compilation perspective and show that all amc tasks can be evaluated using sd - dnnf  circuits . we identify further characteristics of amc instances that allow for the use of even more succinct circuits .    </S>",
    "<S> = 1 </S>"
  ]
}