{
  "article_text": [
    "traditionally , a string is a sequence of letters taken from some alphabet @xmath4 .",
    "since we discuss  indeterminate strings \" in this paper , we begin by generalizing the definition as follows :    [ defn - string ] a with base alphabet @xmath4 is either empty or else a sequence of nonempty subsets of @xmath4 . a 1-element subset of @xmath4",
    "is called a letter ; otherwise it is .",
    "similarly , a nonempty string consisting only of regular letters is , otherwise .",
    "the empty string is regular .",
    "all alphabets and all strings discussed in this paper are finite .",
    "we denote by @xmath7 the set of all nonempty subsets of @xmath4 , with @xmath8 and @xmath9 . on a given alphabet @xmath4 , there are altogether @xmath10 distinct nonempty strings of length @xmath11 , of which @xmath12 are regular .",
    "indeterminate strings were first introduced in a famous paper by fischer & paterson @xcite , then later studied by abrahamson @xcite . in the last ten years or so , much work has been done by blanchet - sadri and her associates ( for example , @xcite ) on `` strings with holes ''  that is , strings on an alphabet @xmath4 augmented by a single letter consisting of the @xmath5-element subset of @xmath4 .",
    "the monograph @xcite summarizes much of the pioneering work in this area . for indeterminate strings in their full generality ,",
    "the third and fourth authors of this paper have collaborated on several papers , especially in the contexts of pattern - matching @xcite and extensions to periodicity @xcite .",
    "[ defn - match ] two elements @xmath13 of @xmath7 are said to ( written @xmath14 ) if they have nonempty intersection .",
    "two strings , ( @xmath15 ) if they have the same length and all corresponding letters match .",
    "thus two regular letters match if and only if they are equal .",
    "but note that for indeterminate letters @xmath16 , it may be that @xmath14 and @xmath17 , while @xmath18 : think @xmath19 .",
    "[ defn - border ] if a string can be written @xmath20 and @xmath21 for nonempty strings , , where @xmath22 , then is said to have a of length @xmath23 .",
    "note that choosing @xmath24 yields the empty border of length @xmath25 .",
    "the of a string @xmath26 $ ] is an integer array @xmath27 $ ] such that @xmath28 $ ] is the length of the longest border of @xmath29 $ ] . for regular strings , the border array has the desirable property , used in pattern - matching algorithms for more than 40 years @xcite , that any border of a border of is also a border of  thus actually specifies every border of every prefix of . for indeterminate strings , however , due to the intransitivity of the match operation ,",
    "this is not true @xcite ; for example , @xmath30 has a border of length 2 ( @xmath31 ) , and both borders @xmath32 and @xmath33 have a border of length 1 ( @xmath34 and @xmath35 , respectively ) , but has no border of length 1 . to make sense of such situations ,",
    "the `` prefix array '' becomes important :    [ defn - prefix ] the of a string @xmath26 $ ] is the integer array @xmath0 $ ] such that for every @xmath36 , @xmath37 $ ] is the length of the longest prefix of @xmath38 $ ] that matches a prefix of @xmath39 .",
    "thus for every prefix array , @xmath1 = n$ ] .    apparently the first algorithm for computing the prefix array occurred as a routine in the repetitions algorithm of main & lorentz @xcite ; see also @xcite .",
    "a slightly improved algorithm is given in ( * ? ? ?",
    "* section 8.4 ) , and two algorithms for computing a `` compressed '' prefix array are described in @xcite .    for regular strings the border array and the prefix array are equivalent : it is claimed in @xcite , and not difficult to verify , that there are @xmath40-time algorithms to compute one from the other . on the other hand , as shown in @xcite , for indeterminate strings the prefix array actually allows all borders of every prefix to be specified , while the border array does not @xcite .",
    "thus the prefix array provides a more compact and more general mechanism for identifying borders , hence for describing periodicity , in indeterminate strings . in the above example ( [ noborder ] ) ,",
    "the prefix array of is @xmath41 , telling us that @xmath42 \\match \\s{u}[1 .. 2]$ ] ( has a border of length 2 ) , hence that @xmath43 \\match \\s{u}[1]$ ] ( prefix @xmath44 $ ] has a border of length 1 ) and @xmath45 \\match \\s{u}[2]$ ] ( suffix @xmath42 $ ] has a border of length 1 ) , but , since @xmath46 = 0 $ ] , also that has no border of length 1 .",
    "@xcite describes an algorithm that computes the prefix array of any indeterminate string ; in this paper we consider the `` reverse engineering '' problem of computing a string corresponding to a given `` feasible '' array  that is , any array that could conceivably be a prefix array :    [ defn - feasible ] an integer array @xmath0 $ ] such that @xmath1 = n$ ] and , for every @xmath2 , @xmath47 \\le n\\+ 1\\- i,\\ ] ] is said to be . a feasible array that is a prefix array of a regular string is said to be .",
    "we will often use the condition @xmath48",
    "\\le n\\+ 1 $ ] , equivalent to ( [ condition - feasible ] ) .",
    "note that there are @xmath49 distinct feasible arrays of length @xmath11 .",
    "recalling that there are @xmath50 distinct strings of length @xmath11 for a fixed alphabet size @xmath5 , and applying stirling s inequality @xcite @xmath51 where @xmath52 is the base of the natural logarithm , we see that ( for fixed @xmath5 ) the number of feasible arrays exceeds the number of strings whenever @xmath11 is large enough that @xmath53    the first reverse engineering problem was introduced in @xcite , where a linear - time algorithm was described to compute a lexicographically least string whose border array was a given integer array  or to return the result that no such string exists .",
    "there have been many such results published since ; for example , @xcite . in @xcite",
    "an @xmath54 time algorithm is described to solve the reverse engineering problem for a given feasible array @xmath0 $ ] ; that is , whenever is regular , computing a lexicographically least regular string corresponding to ; and , whenever is not regular , reporting failure .    in section  [ sect - indet ] , notwithstanding ( [ asymp ] ) , we prove the surprising result that every feasible array is in fact a prefix array of some string ( on some alphabet ) ; further , we characterize the minimum alphabet size of a regular string corresponding to a given prefix array in terms of the largest clique in the negative `` prefix '' graph @xmath55 .",
    "we go on to give necessary and sufficient conditions that a given prefix array is regular .",
    "section  [ sect - graphs ] establishes the duality between strings ( whether regular or indeterminate ) and labelled undirected graphs ; also it provides a characterization of the minimum alphabet size of an indeterminate string in terms of the number of `` independent '' maximal cliques in the  associated graph \" @xmath6 .",
    "section  [ sect - conc ] outlines future work .",
    "we begin with an immediate consequence of definition  [ defn - prefix ] :    [ lemm - easy ] let @xmath26 $ ] be a string .",
    "an integer array @xmath0 $ ] is the prefix array of @xmath39 if and only if for each position @xmath36 , the following two conditions hold :    * @xmath56\\big ] \\match \\s{x}\\big[i .. i+ \\s{y}[i]-1\\big]$ ] ; * if @xmath57 \\le n$ ] , then @xmath58 + 1\\big ] \\not\\match \\s{x}\\big[i + \\s{y}[i]\\big]$ ] .",
    "we now prove the main result of this section .",
    "[ lemm - feas ] every feasible array is the prefix array of some string .",
    "consider an undirected graph @xmath59 whose vertex set @xmath60 is the set of positions @xmath61 in a given feasible array @xmath62 .",
    "the edge set @xmath63 consists of the 2-element subsets @xmath64 such that @xmath65 ; \\ k = i+h-1\\ ] ] for every @xmath2 .",
    "we then define as follows : for each non - isolated vertex @xmath66 , let @xmath67 $ ] be the set of edges incident with @xmath66 ; for each isolated vertex @xmath66 , let @xmath67 $ ] be the loop @xmath68 .",
    "let @xmath69 where @xmath70 is the set of loops .",
    "we claim that @xmath62 is the prefix array of @xmath26 $ ] .    to see this , note that for an index @xmath66 such that @xmath37>0 $ ] , lemma [ lemm - easy](a ) is satisfied by construction .",
    "then suppose that for some @xmath37 > 0 $ ] and @xmath71 \\le n$ ] , @xmath58\\+ 1\\big ]",
    "\\match \\s{x}\\big[i\\+ \\s{y}[i]\\big]$ ] .",
    "but this contradicts lemma  [ lemm - easy](b ) , and so @xmath72\\+ 1\\big ] \\not\\match \\s{x}\\big[i\\+ \\s{y}[i]\\big].\\ ] ]    in case @xmath37 = 0 $ ] , lemma [ lemm - easy](a ) is satisfied vacuously .",
    "moreover , @xmath66 is isolated and thus @xmath67 = \\{i , i\\}$ ] , which does not match @xmath73 $ ] ; consequently , lemma [ lemm - easy](b ) is again satisfied .",
    "therefore , @xmath62 coincides with the prefix array of @xmath39 , which is a string over the set @xmath7 of subsets of @xmath4 .",
    "+    the construction described in this proof yields a string whose prefix array is , but is only one string among many .",
    "for example , given the feasible array @xmath74 , this construction yields ( temporarily simplifying the notation ) edges @xmath75 and loops @xmath76 .",
    "relabelling these seven edges / loops as @xmath77 respectively , we construct as described in the proof of lemma  [ lemm - feas ] : @xmath78 an indeterminate string , when in fact is also the prefix array of the regular string @xmath79 ( and so , by definition  [ defn - feasible ] , itself regular ) .",
    "[ defn - g ] let @xmath80 be a labelled graph with vertex set @xmath81 consisting of positions in a given feasible array @xmath82 in @xmath83 we define , for @xmath2 , two kinds of edge ( compare lemma  [ lemm - easy ] ) :    * for every @xmath84 $ ] , @xmath85 is called a ; * @xmath86,i\\+ \\s{y}[i])$ ] is called a , provided @xmath71 \\le n.$ ]    @xmath87 and @xmath88 denote the sets of positive and negative edges , respectively .",
    "we write @xmath89 , @xmath90 , @xmath91 , and we call @xmath83 the of @xmath62 .",
    "if @xmath39 is a string having @xmath62 as its prefix array , then we also refer to @xmath83 as the prefix graph of @xmath39 .",
    "+     +    figures [ graph - ex-1-p][graph - ex-2-n ] show the prefix graphs for @xmath92    from definition  [ defn - g ] it is clear that    [ rem - py ] for every feasible array , there exists one and only one prefix graph @xmath83 , which therefore may be written @xmath93 ; moreover , @xmath94 if and only if @xmath95 .",
    "recall that a graph @xmath96 is said to be if every pair of vertices in @xmath60 is joined by a path in @xmath63 .",
    "a ( or , for short ) of @xmath97 is a subgraph @xmath98 formed on a largest subset @xmath99 such that every pair of vertices @xmath100 is joined by a path formed from edges @xmath101 .",
    "the graph @xmath102 of figure  [ graph - ex-1-p ] has two disjoint connected components , while that of figure  [ graph - ex-2-p ] has only one .",
    "the basic properties of the prefix graph @xmath93 of a feasible array @xmath0 $ ] are as follows :    [ lemm - g ] let @xmath103 be the prefix graph corresponding to a given feasible array .",
    "* @xmath87 and @xmath104 are disjoint and @xmath105 where @xmath106 is the number of indices @xmath36 for which @xmath71 = n+1.$ ] for every @xmath2 , either @xmath107 or @xmath108 . * if @xmath109 , where @xmath110 , then @xmath111 = i\\- 1 $ ] , and for every @xmath112 , @xmath113 .",
    "* @xmath62 is regular if and only if every edge of @xmath55 joins two vertices in disjoint connected components of @xmath114 .",
    "* first fix @xmath66 and consider edges @xmath64 , where @xmath115 . if @xmath116 is such an edge , then the edges in @xmath87 must satisfy @xmath117 and therefore are distinct from @xmath118 .",
    "this shows that @xmath87 and @xmath104 are disjoint .",
    "secondly , @xmath105 since there is exactly one negative edge for each of the possible values of @xmath66 , except those for which @xmath71 = n\\+ 1 $ ] .",
    "finally , it is easily seen from definition [ defn - g ] that @xmath119 is a positive edge if @xmath37 $ ] is positive , whereas @xmath119 is a negative edge if @xmath37=0 $ ] .",
    "* the first statement follows from rewriting definition  [ defn - g](b ) with @xmath120 $ ] , the second directly from definition  [ defn - g](a ) . *",
    "suppose that every negative edge joins two vertices in disjoint connected components of @xmath114 .",
    "form a regular string @xmath39 as follows : for each component @xmath121 of @xmath114 , assign a unique identical letter , say @xmath122 , to all positions @xmath67 $ ] for which @xmath123 .",
    "we show that @xmath62 is the prefix array of @xmath124 $ ] and therefore that @xmath62 is regular .",
    "fix a value @xmath2 . for any @xmath125 such that @xmath126 $ ]",
    ", @xmath127 is a positive edge .",
    "thus @xmath125 and @xmath128 are in the same component of @xmath114 , and hence @xmath129 = \\s{x}[j+i-1]$ ] .",
    "we also note that @xmath130 + 1 , \\s{y}[i]+i)$ ] is a negative edge ( provided @xmath37\\+ i \\le n$ ] ) .",
    "if so , then by hypothesis @xmath37 + 1 $ ] and @xmath37+i$ ] lie in disjoint components of @xmath114 , so that , by the uniqueness of @xmath122 , @xmath131 + 1\\big ] \\not\\match \\s{x}\\big[\\s{y}[i]+i\\big]$ ] .",
    "this is precisely what we need in order to conclude that @xmath62 is the prefix array of @xmath124 $ ] .",
    "since is regular , so is , as required . +",
    "* suppose that is regular , therefore the prefix array of a regular string @xmath39 .",
    "now consider any negative edge @xmath132 of the prefix graph @xmath83 of , so that by lemma  [ lemm - easy](b ) @xmath133 \\not\\approx \\s{x}[q]$ ] .",
    "if @xmath134 and @xmath135 were in the same component of @xmath114 , we would have by lemma  [ lemm - easy](a ) a path in @xmath114 joining @xmath134 to @xmath135 consisting of edges @xmath64 such that @xmath136 \\match \\s{x}[k]$ ] . by the regularity of",
    ", this requires @xmath136 = \\s{x}[k]$ ] , so that @xmath133 = \\s{x}[q]$ ] , a contradiction .    from definition [ defn - g ]",
    ", we see that @xmath137 can be as small as @xmath25 ( for example , when @xmath138 ) or as large as @xmath139 ( when @xmath140 ) . from lemma  [ lemm - g](b )",
    "we see that many of the edges in @xmath87 can be deduced from those in @xmath104 .",
    "in fact , if we add an extra node @xmath141 and also , in the cases @xmath142 for which @xmath71 = n\\+ 1 $ ]  that is , whenever @xmath39 has a border of length @xmath37 = n\\+ 1\\- i$ ]  , add the edges @xmath143 , n+1)$ ] to @xmath104 , then all of @xmath87 can be deduced from @xmath104 .",
    "let us call this graph with the additional node and edges the and denote it by @xmath144 with corresponding edge sets @xmath145 and @xmath146 .",
    "by lemma  [ lemm - g](a ) , @xmath146 consists of exactly @xmath147 edges , which together determine @xmath148 edges in @xmath87 .",
    "of course the converse is also true : @xmath87 determines @xmath146 .",
    "hence , from remark  [ rem - py ] , either @xmath114 or @xmath149 is sufficient to determine a corresponding prefix array .",
    "however , a bit more can be said . from lemma  [ lemm - g](b )",
    "we see that every edge @xmath150 determines the value @xmath111 $ ] of a position @xmath151 in .",
    "thus a simple scan of can identify all positions @xmath152 that are _ not _ determined by @xmath104 ; for all such @xmath152 , it must be true that @xmath153 = n\\- h\\+ 1 $ ] .",
    "in other words @xmath104 determines @xmath146 .",
    "writing @xmath154 to mean that @xmath155 can be computed from @xmath156 , and _ vice versa _",
    ", we may summarize this discussion as follows :    [ remk - equiv ] @xmath157 : the prefix array and the negative prefix graph provide the same information and so determine the same set of @xmath158not necessarily regular@xmath159 strings .",
    "recall @xcite that a in a graph @xmath97 is a complete subgraph @xmath160 of @xmath97 on @xmath161 vertices , while the @xmath162 is the order @xmath161 of the largest clique .",
    "we say that a @xmath161-clique is if it is not a subclique of any @xmath163-clique .",
    "note that , since every isolated vertex is a complete subgraph , @xmath164 .",
    "[ defn - regular - g ] if @xmath62 is a regular feasible array , then its prefix graph @xmath93 is also said to be .",
    "we use these ideas to characterize the minimum alphabet size of any regular string with a given prefix graph @xmath83 . consider the edges @xmath165 , of regular @xmath55 , in ascending order of @xmath125 .",
    "suppose without loss of generality that is defined on the alphabet @xmath4 of consecutive positive integers ( so that the ordering of is with respect to @xmath4 ) .",
    "figure  [ alg - greedy ] describes an on - line algorithm assign that , from the sorted list of edges in @xmath55 , computes a lexicographically least string on @xmath166 letters whose prefix graph is @xmath83 .",
    "= 0.5in;=3000 assign @xmath167 radix sort the edges @xmath168 , @xmath169 , of @xmath55 by @xmath125 .",
    "@xmath170 \\la 0 $ ] @xmath171 @xmath11 @xmath172 @xmath173",
    "@xmath129 \\la 1 $ ] @xmath174 @xmath175 @xmath176\\big ] \\la 1 $ ] @xmath177 @xmath178 @xmath179 = 1 $ ] @xmath180 @xmath181 @xmath182 \\la 0 $ ]",
    "@xmath174 @xmath175 @xmath176\\big ] \\la 0 $ ] @xmath129 \\la \\ell$ ]    algorithm assign maintains a bit vector @xmath183 that , for each @xmath125 , specifies the letters @xmath67 $ ] that have occurred at positions @xmath150  that is , @xmath184\\big ] = 1 $ ] .",
    "observe that a new letter @xmath185 is added if and only if vertex @xmath125 has an edge to vertices representing _ all _ previous letters @xmath186 .",
    "this is true for every @xmath187 .",
    "thus letter @xmath185 is introduced if and only if there are already @xmath161 vertices that form a clique in @xmath55 .",
    "consequently the number of letters used by the algorithm to form is exactly @xmath166 .",
    "note also that the letter assigned at each position @xmath125 is least with respect to the preceding letters , whether the letter is a new one in the string or not .",
    "since the letters are introduced from left to right and never changed , must therefore be lexicographically least with respect to @xmath55 .",
    "note further that , since position @xmath125 in the lexicographically least is determined for @xmath188 based solely on preceding positions @xmath169 , it suffices to use @xmath55 rather than the augmented @xmath149 , in accordance with remark  [ remk - equiv ] .",
    "next consider the time requirement of algorithm assign .",
    "since we know from lemma  [ lemm - g](a ) that @xmath55 has at most @xmath147 edges , it follows that the radix sort can be performed in @xmath54 time .",
    "for the same reason , within the loop , formation of the set @xmath189 also has an overall @xmath54 time requirement . the processing that updates the bit vector @xmath183 , in order to determine the least letter @xmath190 to be assigned to @xmath129 $ ] , requires @xmath191 time , where @xmath175 is the size of @xmath189 , in order to set both @xmath176\\big ] \\la 1 $ ] and @xmath176\\big ] \\la 0 $ ] ; in addition the loop requires @xmath192 time in the worst case . since @xmath193",
    ", it follows that the sum of all @xmath194 is @xmath54 , and so the overall time requirement of this processing is @xmath54 .",
    "[ lemm - alg ] for a regular prefix graph @xmath83 on @xmath11 vertices , algorithm assign computes in @xmath54 time a lexicographically least string on @xmath166 letters whose prefix graph is @xmath83 .",
    "we need to show that the string computed by the algorithm is indeed consistent with @xmath83 ( that is , by remark  [ remk - equiv ] , the corresponding prefix array ) .",
    "observe that @xmath189 is always empty for @xmath195 , so that therefore the initial assignment @xmath73 \\la 1 $ ] is consistent with the subgraph @xmath196 on a single vertex .",
    "suppose then that @xmath197 $ ] has been computed by assign for some @xmath198 so as to be consistent with with the subgraph @xmath199 on vertices @xmath200 .",
    "for the addition of vertex ( position ) @xmath125 , there are three possibilities :    @xmath201 . : :    in this case , @xmath129 \\la 1 $ ] , the least letter , so that    @xmath129 = \\s{x}[1]$ ] , and therefore    @xmath202 $ ] remains consistent with    @xmath203 .",
    "* @xmath189 gives rise to @xmath161 distinct letters .",
    "* : :    here @xmath129 \\la t\\+ 1 $ ] , a new letter . since this is the    first occurrence of @xmath185 in , and since there is no    alternative , therefore @xmath202 $ ] is again consistent    with @xmath204 and has only the empty border .",
    "* @xmath189 gives rise to @xmath205 distinct letters .",
    "* : :    from the set @xmath189 we know that    @xmath197 $ ] has exactly @xmath175 borders not    continued to @xmath202 $ ] .",
    "the longest of these borders    is @xmath206 $ ] .",
    "there may be a border of    @xmath197 $ ] that is on the other hand actually    continued to @xmath202 $ ] . if not , then the assignment    @xmath129 \\la \\ell$ ] is consistent with    @xmath204 , where @xmath190 is the least    letter not precluded by @xmath189 .",
    "suppose then that there    exists a border @xmath29 = \\s{x}[j\\- i\\+ 1 .. j]$ ] ,    @xmath207 .",
    "note that while there may be more than one such    border , @xmath67 $ ] must be the same for each one , since we    suppose that is regular .",
    "furthermore , @xmath67 $ ] was    chosen by the algorithm to be a minimum letter @xmath208    with respect to the prefix @xmath209 $ ] ; since    @xmath210 = \\s{x}[1 .. i\\- 1]$ ] , the choice of    a minimum letter with respect to @xmath197 $ ] must    yield @xmath211 , hence also consistent with    @xmath204 .",
    "therefore by induction the lexicographically least string @xmath202 $ ] is consistent with @xmath204 .",
    "we have argued above that is lexicographically least , also that the time requirement of the algorithm is @xmath54 .",
    "thus the lemma is proved .",
    "notice that the alphabet size determined by assign is least possible , given @xmath83 . instead of assigning letters to positions in",
    ", we could just as well have labelled vertices of @xmath83 with these letters ; thus we have    [ cor - clique ] the class of regular negative prefix graphs @xmath55 has the property that the chromatic number @xmath158minimum alphabet size@xmath159 @xmath212 for every graph in the class .",
    "this property does not hold in general ; in @xcite , for example , it is shown that there exist triangle - free graphs @xmath97 ( @xmath213 ) with arbitrarily large chromatic number .    to get a sense of the labelling , consider the following regular prefix array @xmath214",
    "whose corresponding @xmath215 has edges ( sorted as in algorithm assign ) @xmath216 @xmath215 has a single maximal clique , @xmath217 , on four vertices , and the corresponding lexicographically least string is @xmath218 note that @xmath219 contains in addition the edge @xmath220 not required for the lexicographically least .",
    "now consider @xmath161-cliques @xmath221 ( not necessarily maximal ) in regular prefix arrays @xmath55 for which @xmath222 , together with regular strings whose prefix graph is @xmath83",
    ". a 1-clique corresponds to a prefix @xmath223 of , where @xmath224 is some ( say , smallest ) letter . then for every 2-clique @xmath225 in @xmath55",
    ", there must exist a corresponding prefix of such that @xmath226 where @xmath227 .",
    "similarly , for every 3-clique @xmath228 in @xmath55 , there exists a corresponding prefix of such that @xmath229 where @xmath230 are identical but for distinct rightmost letters @xmath231 and @xmath232 , respectively . in general , for every @xmath161-clique @xmath233 in @xmath55 , there exists a corresponding prefix of such that @xmath234 where @xmath235 are prefixes identical but for rightmost letters @xmath236 and @xmath237 , respectively .",
    "thus every @xmath161-clique in regular @xmath55 corresponds to a prefix of the corresponding string that has @xmath238 borders of lengths @xmath239 .",
    "the length of this prefix can be minimized by choosing every @xmath240 , @xmath241 , to be empty , so that the strings @xmath242 double in length at each step : hence there exists a prefix graph on @xmath243 vertices ( or , equivalently , a feasible array of length @xmath243 ) whose corresponding strings can not be implemented on less than @xmath161 letters .",
    "thus we are able to verify a result given in ( * ? ? ?",
    "* proposition 8) :    [ lemm - log ] for a given regular feasible array @xmath0 $ ] , a regular string whose prefix array is @xmath62 can be constructed using at most @xmath244 letters .",
    "@xcite describes a lemma more complex than algorithm assign , but that does not require a regular prefix array as input : a nonregular feasible array is rejected at the first position detected .",
    "we conclude this section with two equivalent necessary and sufficient conditions for to be regular .",
    "a string is said to be ( indet , for short ) if and only if its prefix array is not regular .",
    "recall from definition  [ defn - feasible ] that a feasible array is regular if and only if it is a prefix array of a regular string .",
    "thus , for example , the string ( [ reg ] ) , although certainly indeterminate , is not indet because it is consistent with the feasible array @xmath74 that is a prefix array of the regular string @xmath79 .",
    "if on the other hand is not regular , then as we have seen ( lemma  [ lemm - g](c ) ) there must exist a position @xmath66 such that @xmath67 \\match \\s{x}[r]$ ] and @xmath67 \\match \\s{x}[s]$ ] , while @xmath245 \\not\\match \\s{x}[s]$ ] , for some positions @xmath175 and @xmath106 ; in such a case we say that @xmath67 $ ] is .",
    "( in terms of the prefix graph @xmath83 , @xmath246 . )",
    "we state two versions of what is essentially the same lemma ; we prove the second .",
    "[ lemm - indet ] suppose that @xmath26 $ ] is a nonempty string with prefix array @xmath62 .",
    "then for @xmath36 , @xmath67 $ ] is indet ( and so therefore also ) if and only if there exist positions @xmath175 and @xmath247 such that @xmath248 = r\\- 1 $ ] and one of the following holds :    * @xmath249 \\ge i,\\ \\s{y}[s\\- i\\+ 1 ] \\ge i$ ] @xmath250 ; * @xmath251 \\ge r,\\ \\s{y}[s\\- i\\+ 1 ] \\ge i$ ] @xmath252 ; * @xmath251 \\ge r,\\ \\s{y}[i\\- s\\+ 1 ] \\ge s$ ] @xmath253 .",
    "+   +   +    [ lemm - indeta ] suppose that @xmath26 $ ] is a nonempty string with prefix array @xmath62 .",
    "then for @xmath36 , @xmath67 $ ] is indet ( and so therefore also ) if and only if there exist positions @xmath175 and @xmath106 such that one of the following holds :    * @xmath254 \\ge i,\\ \\s{y}[s ] \\ge i,\\ \\s{y}[s\\- r\\+ 1 ] = i\\+ r\\- 2 $ ] ; * @xmath255 > i,\\ \\s{y}[s ] \\ge i,\\ \\s{y}[s\\+ r\\- 1 ] = i\\- r$ ] ; * @xmath255 >",
    "i,\\ s\\+ \\s{y}[s ] >",
    "i,\\ \\s{y}[s\\- r\\+ 1 ] = i\\- s$ ] .",
    "if @xmath67 $ ] is indet , then there must exist positions @xmath256 and @xmath257 such that @xmath67 \\match \\s{x}[r'],\\ \\s{x}[i ] \\match \\s{x}[s'],\\ \\s{x}[r ' ] \\not\\match \\s{x}[s']$ ] .",
    "conversely , if such @xmath256 and @xmath257 exist , then @xmath67 $ ] is indet . without loss of generality ,",
    "suppose that @xmath258 .",
    "then three cases arise depending on the relative values of the distinct integers @xmath259 ( see figure  [ fig-3cases ] ) :    * @xmath260 since @xmath67 \\match \\s{x}[r']$ ] and @xmath261 , it follows that @xmath29 \\match \\s{x}[r'\\- i\\+ 1 .. r']$ ] , hence that @xmath262 \\ge i$ ] ; similarly , @xmath263 \\ge i$ ] . since @xmath264 \\not\\match \\s{x}[s']$ ] and @xmath265 , therefore @xmath266 = r'\\- 1 $ ] . setting @xmath267 yields the desired result .",
    "* @xmath268 since @xmath67 \\match \\s{x}[r']$ ] and @xmath269 , therefore @xmath270",
    "\\match \\s{x}[i\\- r'\\+ 1 .. i]$ ] , and so @xmath271 \\ge r'$ ] ; as in ( a ) , @xmath263 \\ge i$ ] . also as in ( a ) , @xmath266 = r'\\- 1 $ ] . setting @xmath272 yields the result .",
    "* @xmath273 as in ( b ) , @xmath271 \\ge r'$ ] ; similarly , @xmath274 \\ge s'$ ] . as in ( a ) and ( b ) , @xmath266 = r'\\- 1 $ ] .",
    "setting @xmath275 yields the result .",
    "here we extend the ideas of section  [ sect - indet ] to establish a remarkable connection between labelled graphs and indeterminate strings . recall that a graph is if and only if it is undirected and contains neither loops nor multiple edges .",
    "we define the , @xmath276 , of a string to be the simple graph whose vertices are positions @xmath277 in @xmath39 and whose edges are the pairs @xmath278 such that @xmath67 \\approx \\s{x}[j]$ ] .",
    "thus @xmath279 identifies _ all _ the matching positions in , not only those determined by the prefix array . on the other hand , we may think of each pair @xmath280 as a edge , @xmath67 \\not\\approx \\s{x}[j]$ ] .",
    "thus @xmath281 determines all the pairs of positions in that match or do not match each other .",
    "it should be noted here that while @xmath6 determines the matchings of positions in , it does not uniquely determine the alphabet of .",
    "for example , @xmath282 describes @xmath283 as well as @xmath284    thus a given simple graph @xmath285 with @xmath11 vertices can be the associated graph of distinct strings .",
    "another way to generate additional strings is by permuting the vertex labels . given any _",
    "un_labelled @xmath97 , we can generate strings @xmath26 $ ] by labelling the @xmath11 vertices @xmath60 of @xmath97 with integers @xmath61 , and forming a string @xmath39 of which @xmath97 , with this labelling , is the associated graph .",
    "thus an unlabelled graph @xmath97 corresponds to a set of strings determined by the @xmath49 possible labellings of @xmath60 .",
    "for instance , given the graph    ( 100,20)(0,0 ) ( 25,10)(30,10)(1,0)30(65,10 ) ( 85,10 )    there are six possible labellings , three of which , for example    ( 280,20)(0,0 ) ( 0,10)(5,10)(1,0)30(40,10 ) ( 60,10 ) ( -2.5,7)1(37.5,7)2(57.5,7)3 ( 100,10)(105,10)(1,0)30(140,10 ) ( 160,10 ) ( 97.5,7)2(137.5,7)3(157.5,7)1 ( 200,10)(205,10)(1,0)30(240,10 ) ( 260,10 ) ( 197.5,7)3(237.5,7)1(257.5,7)2    can be chosen to lead to distinguishable regular strings @xmath286 , respectively . in this case",
    "the other three labellings determine the same three strings .",
    "consider a given string .",
    "suppose that for some position @xmath287 , @xmath288 $ ] matches @xmath289 , \\s{x}[i_2 ] , \\ldots , \\s{x}[i_k]$ ] for some @xmath290 , and matches no other elements of .",
    "we say that position @xmath291 is if and only if the entries in positions @xmath292 match each other pairwise .",
    "if every position in is essentially regular , we say that itself is .",
    "for example , it is easy to verify that @xmath293 though indeterminate , is essentially regular with prefix array @xmath74 . on the other hand , string",
    "( [ reg ] ) , @xmath294 also with prefix array , is not essentially regular .",
    "we have    [ lemm - union ] a string is essentially regular if and only if the associated graph @xmath6 of is a disjoint union of cliques .",
    "thus combinatorics on ( regular , essentially regular ) words is the study of labelled collections of cliques .",
    "for example , for @xmath140 , the associated graph @xmath6 is simply the complete graph @xmath295 ; while for such that @xmath67 \\match \\s{x}[j]\\ \\rightarrow i = j$ ] , @xmath6 is @xmath11 copies of @xmath296 .",
    "more generally , for essentially regular , the number of disjoint cliques in @xmath6 is just the number of distinct letters in a regular string having the same associated graph as , and the order of each clique is the number of times the corresponding letter occurs . recall that a ( sometimes abbreviated mc ) @xmath160 in a graph @xmath96 is a clique that is not a subgraph of any other clique in @xmath97 .",
    "thus if @xmath160 is maximal , then for every vertex @xmath125 not in @xmath160 , there exists some vertex @xmath66 of @xmath160 such that @xmath297 .",
    "note that every vertex of @xmath97 must belong to at least one maximal clique .",
    "[ defn - uid ] let @xmath96 be a finite simple graph , let @xmath189 be the set of all mc in @xmath97 , and let @xmath298 be a smallest subset of @xmath299 such that every edge of @xmath63 occurs at least once in @xmath298 .",
    "then the mc in @xmath298 are said to be ( i ) , those in @xmath300 ( d ) .",
    "we say that an edge of @xmath97 is a if it belongs to exactly one mc .",
    "then every mc that contains a free edge is independent .",
    "+     +    we will see that for the associated graph @xmath301 of a string , the independent mc are closely related to alphabet size .",
    "consider for example @xmath302 @xmath6 ( see figure  [ graph - ex - gx-1 ] ) has four mc @xmath303 of which , by definition  [ defn - uid ] , @xmath304 are independent , since each contains at least one free edge ( @xmath305 , respectively )",
    ". however , @xmath306 is dependent , since its adjacencies all occur elsewhere ( @xmath307 is a subclique of @xmath308 , @xmath309 a subclique of @xmath310 , @xmath311 an edge of @xmath312 , and so every edge of @xmath306 occurs in at least one of the other three cliques ) . thus exactly three of the mc are independent , and we see that ( [ 3lett ] ) has a minimum alphabet of three letters .",
    "on the other hand , if @xmath313 ( see figure  [ graph - ex - gx-2 ] ) has mc @xmath314 all four of them are independent ( in @xmath315 the edge @xmath311 no longer occurs elsewhere ) , and we claim that no corresponding string can be constructed on fewer than four letters , while @xmath316 achieves the lower bound .",
    "[ lemm - minsig ] suppose that a graph @xmath97 has exactly @xmath5 independent maximal cliques .",
    "then there exists a string on a base alphabet of size @xmath5 whose associated graph @xmath317 , and on no smaller alphabet .",
    "let @xmath318 be the set of independent mc .",
    "suppose that initially every @xmath67,\\ i = 1,2,\\ldots , n$ ] , is empty ; then for @xmath319 , form @xmath320 \\la \\s{x}[i ] \\cup \\lambda_s\\ ] ] if and only if vertex @xmath66 occurs in @xmath321 , where @xmath322 is a unique regular letter associated with @xmath321 .",
    "this ensures that @xmath289 \\approx \\s{x}[i_2]$ ] if and only if @xmath323 is an edge in one of the independent mc of @xmath97 .",
    "since by definition  [ defn - uid ] this includes all the edges , it follows that @xmath301 is the associated graph of , a string on a base alphabet of size @xmath5 .",
    "suppose that there exists a string on a base alphabet of size @xmath324 , where @xmath325 .",
    "but then , since the regular letters in collectively determine all the edges and exactly @xmath326 independent mc in @xmath313 , this means that there exists a set of independent mc in @xmath97 of cardinality @xmath324 , contradicting the condition of definition  [ defn - uid ] that @xmath298 is the smallest such subset .",
    "this completes the proof .",
    "lemma  [ lemm - minsig ] has an easy corollary :    [ lemm - easier ] suppose that @xmath327 is the associated graph of a string with @xmath5 independent maximal cliques @xmath318 .    *",
    "if a vertex @xmath328 belongs to exactly @xmath329 of the maximal cliques in @xmath298 , then @xmath330| \\ge s$ ] . *",
    "if an edge @xmath331 belongs to exactly @xmath329 of the maximal cliques in @xmath298 , then @xmath330 \\cap \\s{x}[j]| \\ge s$ ] .    the following simple algorithm might be a candidate to compute a set of independent maximal cliques :    * label i every mc that has a free edge ; * alternate steps ( a ) and ( b ) until no new labellings occur : * * label d each unlabelled mc with at least one edge in an mc labelled i ; * * label i each unlabelled mc with at least one edge in an mc labelled d.    however , suppose that some subgraph @xmath332 of @xmath97 remains unlabelled after the termination of step 2 of the algorithm .",
    "then every edge @xmath333 of @xmath332 must belong to at least two mc of @xmath332 , since otherwise it would have been labelled in step 1 .",
    "moreover , any mc containing @xmath333 can not be labelled either i or d , and so @xmath332 can only be a subgraph sharing no edges with the rest of @xmath97 and also containing no free edges .",
    "+     +    to show that such a subgraph can exist , consider the triangulated graph @xmath97 on six vertices @xmath334 , where the only pairs @xmath168 that are _ not _ edges are @xmath335 and @xmath336 , as shown in figure  [ graph - ex - gx-4 ] .",
    "there are eight mc @xmath337 of which either the first four or the last four can be chosen to be independent , thus by lemma  [ lemm - minsig ] yielding a corresponding string on four regular letters .",
    "note that every edge occurs in exactly two mc , so that by lemma  [ lemm - easier](b ) every position in the corresponding string contains at least two regular letters ; for example , @xmath338    a more complex example is the graph @xmath97 on vertices @xmath339 with maximal cliques @xmath340 , @xmath341 , and 14 others , as shown in figure  [ graph - ex - gx-3 ] .",
    "the only pairs @xmath168 that are _ not _ edges are @xmath342 and @xmath343 . in this case",
    "it turns out that there are six independent mc , for example @xmath344 and so by lemma  [ lemm - minsig ] a corresponding string can be constructed using six regular letters ( one letter per mc ) : @xmath345     +    these examples show that whenever graphs or subgraphs without free edges exist , the identification of independent mc becomes more difficult . in such cases we know of no algorithm to compute them apart from exhaustive search .",
    "thus , while it is straightforward , given , to determine @xmath6 , it is nontrivial , given @xmath97 , to determine a string on a smallest alphabet such that @xmath301 .    from lemma  [ lemm - union ]",
    "it follows that the maximum alphabet size required for an essentially regular string is @xmath11 ; thus to compute from a feasible array is potentially an @xmath54 algorithm and , as shown in @xcite , is actually @xmath54 .",
    "however , for indeterminate strings , lemma  [ lemm - minsig ] shows that the minimum alphabet size is the number @xmath5 of independent maximal cliques in @xmath6 .",
    "a classical result from graph theory @xcite shows that the number of maximal cliques may be as much as @xmath346 , and so an indeterminate string potentially could require an alphabet of exponential size .",
    "for example , for @xmath347 , consider the graph @xmath6 on six vertices @xmath348 with nine edges ( @xmath349 ) @xmath350 as shown in figure  [ graph - ex - gx-5 ] .",
    "each of these edges is a maximal independent 2-clique , and so by lemma  [ lemm - minsig ] a corresponding string is @xmath351 defined on an alphabet of nine regular letters with prefix array @xmath352 .",
    "note here that information is lost in the transformation from to .",
    "the prefix graph @xmath114 corresponding to @xmath353 has the same nine edges @xmath279 , but @xmath55 contains , instead of the six negative edges @xmath354 implied by @xmath279 , just two : @xmath355 .",
    "thus by reverse engineering we get the much simpler ( but still necessarily indeterminate ) string @xmath356 whose associated graph @xmath313 has , in addition to the nine edges of @xmath279 , also the four ( now positive ) edges @xmath357 .",
    "thus in @xmath313 there are only two maximal cliques , on the vertices 23456 and 1246 , independent of each other , and so by lemma  [ lemm - minsig ] can be constructed using @xmath358 regular letters .    the fastest known algorithm to compute all maximal cliques",
    "is described in @xcite , but of course it must be exponential in the worst case ( @xmath346 maximal cliques ) ; it is not known how many independent maximal cliques can exist in a graph constructed from a prefix array .",
    "the graph @xmath114 corresponding to @xmath359 contains seven independent maximal cliques @xmath360 .",
    "thus , regarding this graph as an associated graph @xmath6 of some string tells us by lemma  [ lemm - minsig ] that seven regular letters would be needed to represent it .",
    "in this paper we have explored connections among indeterminate strings , prefix arrays , and undirected graphs , some of them quite unexpected ( by us , at least ) .",
    "we believe that many other connections exist that may yield combinatorial insights and thus more efficient algorithms . for example :    1 .",
    "how many independent maximal cliques can exist in the associated graph @xmath6 of a string computed ( on a minimum alphabet ) from a given prefix array ? 2 .",
    "find an efficient algorithm to compute a string on a minimum alphabet corresponding to a given nonregular prefix array .",
    "what classes of graphs @xmath97 exist that , as associated graphs @xmath301 of some string , have fewer than exponential independent maximal cliques , and so therefore may give rise to efficient algorithms for the determination of on a minimum alphabet",
    "? put another way : characterize graphs that have an exponential number of independent maximal cliques .",
    "can we recognize strings with associated graphs @xmath6 that have an exponential number of independent maximal cliques ?",
    "5 .   can known results from graph theory be used to design efficient algorithms for computing patterns in indeterminate strings ?",
    "we are grateful to jean - pierre duval and arnaud lefebvre of the universit de rouen for useful discussions .",
    "karl abrahamson , * generalized string matching * , _ 166 _",
    "( 1987 ) 10391051 .",
    "h.  bannai , s.  inenaga , a.  shinohara & m.  takeda , * inferring strings from graphs and arrays * , _ mathematical foundations of computer science _ ,",
    "springer lecture notes in computer science lncs 2747 , b.  rovan & p.  vojts ( eds . ) ( 2003 ) 208217 .",
    "francine blanchet - sadri , _ algorithmic combinatorics on partial words _ , chapman & hall / crc ( 2008 ) 385 pp .",
    "francine blanchet - sadri & robert a.  hegstrom , * partial words and a theorem of fine and wilf revisited * , _ 2701/2 _ ( 2002 ) 401409 .",
    "j.  a.  bondy & u.  s.  r.  murty , _ graph theory _ , springer ( 2008 ) 651 pp .",
    "julien clment , maxime crochemore & giuseppina rindone , * reverse engineering prefix tables * , _ proc .",
    "26th _ , susanne albers & jean - yves marion ( eds . ) ( 2009 ) 289300 . c.  bron & j.  kerbosch , * algorithm 457 : finding all cliques of an undirected graph * , _ communications of the acm 169 _ ( 1973 ) 575577 .",
    "maxime crochemore , christophe hancart & thierry lecroq , _ algorithmique du texte _ , vuibert ( 2001 ) 347 pp .",
    "maxime crochemore , christophe hancart & thierry lecroq , _ algorithms on strings _ , cambridge university press ( 2007 ) 392 pp .",
    "jean - pierre duval , thierry lecroq & arnaud lefebvre , * border array on a bounded alphabet * , _ 101 _",
    "( 2005 ) 5160 .",
    "michael j.  fischer & michael s.  paterson , * string - matching and other products * , _ complexity of computation , proc .",
    "siam - ams 7 _ ( 1974 ) 113 - 125 .",
    "frantisek franek , weilin lu , p.  j.  ryan , w.  f.  smyth , yu sun & lu yang , * verifying a border array in linear time * ( preliminary version ) , _ proc .",
    "10th _ , school of computing , curtin university of technology ( 1999 ) 2633 .",
    "frantisek franek , shudi gao , weilin lu , p.  j.  ryan , w.  f.  smyth , yu sun & lu yang , * verifying a border array in linear time * , _ 42 _ ( 2002 ) 223 - 236 .",
    "frantisek franek & w.  f.  smyth , * reconstructing a suffix array * , _ 176 _ ( 2006 ) 12811295 .",
    "jan holub & w.  f.  smyth , * algorithms on indeterminate strings * , _ proc .",
    "14th _ ( 2003 ) 3645 .",
    "jan holub , w.  f.  smyth & shu wang , * hybrid pattern - matching algorithms on indeterminate strings * , _ london algorithmics and stringology 2006 _ , j. daykin , m. mohamed & k. steinhoefel ( eds . ) , king s college london series _ texts in algorithmics _ ( 2006 ) 115133 .",
    "jan holub , w.  f.  smyth & shu wang , * fast pattern - matching on indeterminate strings * , _ 61 _ ( 2008 ) 3750 .",
    "costas s.  iliopoulos , manal mohamed , laurent mouchard , katerina g. perdikuri , w.  f.  smyth & athanasios k.  tsakalidis , * string regularities with do nt cares * , _ 101 _ ( 2003 ) 4051 .",
    "joseph w.  kitchen jr . , _ calculus of one variable _ , addison - wesley ( 1968 ) .",
    "m.  lothaire , _ applied combinatorics on words _ , cambridge university press ( 2005 ) 610 pp .",
    "michael g.  main & richard j.  lorentz , * an @xmath361 algorithm for finding all repetitions in a string * , _ 5 _ ( 1984 ) 422432 .",
    "j.  w.  moon & l.  moser , * on cliques in graphs * , _ israel j.  math",
    ".  3 _ ( 1965 ) 2328 .",
    "dennis moore , w.  f.  smyth & dianne miller , * counting distinct strings * , _ algorithmica 131 _ ( 1999 ) 113 .",
    "james h.  morris & vaughan r.  pratt , _ a linear pattern - matching algorithm _ , tech",
    ".  rep .",
    "40 , university of california , berkeley ( 1970 ) .",
    "j.  mycielski , * sur le colorage des graphes * , _ colloq .  math .  3 _ ( 1955 ) 161162",
    ". bill smyth , _ computing patterns in strings _ , pearson addison - wesley ( 2003 ) 423 pp",
    ". w.  f.  smyth & shu wang , * new perspectives on the prefix array * , _ proc .",
    "15th _ , springer lecture notes in computer science lncs 5280 ( 2008 ) 133143 .",
    "w.  f.  smyth & shu wang , * a new approach to the periodicity lemma on strings with holes * , _ 41043 _ ( 2009 ) 42954302 .",
    "w.  f.  smyth & shu wang , * an adaptive hybrid pattern - matching algorithm on indeterminate strings * , _ 206 _ ( 2009 ) 9851004 ."
  ],
  "abstract_text": [
    "<S> an integer array @xmath0 $ ] is said to be if and only if @xmath1 = n$ ] and , for every @xmath2 , @xmath3 \\le n\\+ 1 $ ] . </S>",
    "<S> a string is said to be if and only if at least one of its elements is a subset of cardinality greater than one of a given alphabet @xmath4 ; otherwise it is said to be . </S>",
    "<S> a feasible array is said to be if and only if it is the prefix array of some regular string . </S>",
    "<S> we show using a graph model that every feasible array of integers is a prefix array of some ( indeterminate or regular ) string , and for regular strings corresponding to , we use the model to provide a lower bound on the alphabet size . </S>",
    "<S> we show further that there is a 11 correspondence between labelled simple graphs and indeterminate strings , and we show how to determine the minimum alphabet size @xmath5 of an indeterminate string based on its @xmath6 . </S>",
    "<S> thus , in this sense , indeterminate strings are a more natural object of combinatorial interest than the strings on elements of @xmath4 that have traditionally been studied .    * keywords . * indeterminate string ; regular string ; prefix array ; feasible array ; undirected graph ; minimum alphabet size ; lexicographical order . </S>"
  ]
}