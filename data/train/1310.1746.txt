{
  "article_text": [
    "crowd - sourcing using smart phones is a new idea that has gained widespread interest @xcite .",
    "smart phones these days are equipped with multiple sensors that can be used to monitor key features of the surrounding environment that help in improving the user experience or simplifying human effort . collectively using data derived from multiple smart phones ( called _ crowd - sourcing _ )",
    "helps in improving the social welfare , e.g. helps public utility companies to track potholes locations , electricity failure , emergency relief operations , traffic congestion etc .",
    "several commercial applications using smart phone crowd - sourcing are already in place , such as sensorly @xcite , nericell @xcite , google voice recognition and apple s siri also use data from users spread across many different locations to improve their services . in some applications ,",
    "users volunteer to share their data since that also helps in improving their own _",
    "utility_. this is , however , not true in general , and necessitates an incentive mechanism design , where users are externally incentivized in the form of payments for the data / tasks they are willing to share / perform .    in this paper , we consider the incentive mechanism design problem for smart phone crowd - sourcing , where we model it as a _ reverse auction_. the platform announces a set of tasks that it wants to accomplish , and each user submits the list of tasks it is ready to provide and its corresponding bid .",
    "the platform has a utility function associated with its set of tasks , and the problem is to find the set of users and their corresponding payments that maximizes its utility .",
    "one of the main challenges in designing such incentive mechanism design is to ensure _ truthfulness _",
    ", i.e. no user should not have any incentive to bid more than its true valuation .",
    "since users expend some resources to accomplish tasks , it is natural to assume that they will seek to maximize the profit they intend to make from the platform .",
    "one of the ways to ensure truthful auction is the vcg mechanism @xcite . in a forward auction ,",
    "the vcg mechanism charges each individual the harm it causes to other bidders in terms of the social welfare utility , while in a reverse auction , it pays each user an amount equal to the value contributed by the user to the auction @xcite . however , finding the winning set of users in a vcg mechanism is combinatorial and has exponential complexity .",
    "there also some technical difficulties with the vcg mechanism @xcite .",
    "so for a computationally feasible operation such as smart - phone crowd - sourcing , one can not directly use the vcg mechanism .",
    "several variations of vcg mechanism can be found in @xcite .",
    "there are two basic paradigms for smart - phone crowd - sourcing , _ offline _ and _ online_. in offline case , all users are present / active simultaneously , and send their profiles to the platform at the same time . in the online case , users arrive sequentially one at a time and submit their profiles , and the platform must decide immediately whether to accept or reject the user and how much to pay the user .",
    "a decision once made , is irrevocable .",
    "for example , the offline scenario is applicable for current traffic congestion monitoring , while the online case is more suited for potholes tracking type of applications that are localized , where users pass over potholes in a given area sequentially .",
    "the online scenario is more general than the offline case , since all potentially participating users may not be active at the same time .    for both the offline and online scenarios ,",
    "the platform s objective is to select the set of users and their payments to maximize its utility , subject to the following four requirements @xcite : _ computational efficiency _ - the algorithm implemented by the platform has polynomial run time complexity , _ individual rationality _ - the selfish utilities of all users involved are non - negative , _ profitability_- the platform utility is non - negative after the auction concludes , and _ truthfulness _ - no user has any incentive to bid different from its true valuation .    in prior work , an incentive design mechanism called",
    "_ m - sensing _ satisfying all the four properties for the offline case has been derived in @xcite .",
    "m - sensing uses a greedy algorithm that at each step adds the user with maximum incremental utility .",
    "it pays each user in the selected set , the maximum value which that user can bid and still be selected at some possible position in the greedy selection phase .",
    "more recently in @xcite , both offline and online algorithms for sensing time schedules have been proposed for the crowd - sourcing problem .",
    "the proposed algorithms are shown to be truthful , and more importantly , analytical performance guarantees have been found on the performance of both offline and online algorithms in @xcite .",
    "however , @xcite only considers a linear utility function .    in this paper , we first propose an algorithm for the offline case motivated from the vcg mechanism design and the greedy approach of the m - sensing algorithm .",
    "our algorithm called smart , first greedily finds a screening set that is identical to the m - sensing winner set .",
    "thereafter , inspired by the vcg mechanism , the screened set is refined further to keep only those users that have positive marginal utility , and the payment to each user is equal to the marginal utility increase compared to the next best user plus the bid of the next best user . we show that smart satisfies all the four properties required for efficient mechanism design . in addition , we show that the platform utility of smart is always greater than or equal to that of m - sensing , while with incurring identical complexity .",
    "another important advantage of smart algorithm is that it can be adapted easily for the online case , while still satisfying the four properties . for the online case , we take motivation from the online @xmath0-secretary problem @xcite . in the online @xmath0-secretary problem ,",
    "@xmath1 secretaries with arbitrary ranks arrive in a uniformly random order and the problem is to select the @xmath0 best ranked secretaries in an online manner .",
    "the best known algorithms for solving the online @xmath0-secretary problem reject the first @xmath2 secretaries , and generating a threshold set from the first @xmath3 secretaries , which is then used to select the @xmath0 best secretaries among the remaining @xmath4 secretaries . for the online smart - phone crowd - sourcing problem",
    ", we reject the first few users and run the offline smart algorithm on their profiles .",
    "the output of the offline smart algorithm is then used to select the users from the remaining users and to decide their payments , such that the four properties are satisfied .",
    "typically , the online and offline solutions are compared through the competitive ratio @xcite , which is defined to be the ratio of the utility obtained by the online algorithm to that obtained by the offline algorithm . ideally , we would like the competitive ratio to be as close to unity as possible . for the @xmath0-secretary problem ,",
    "the competitive ratio has been shown to be @xmath5 if @xmath6 . in the crowd - sourcing problem , as shown in @xcite , if you pay each selected user its own bid , the mechanism is not truthful .",
    "this key point complicates the computation of the competitive ratio for the crowd - sourcing problem .",
    "users selected in the offline and online case are actually paid differently to ensure truthfulness .",
    "so there is no easy analytical way to compare the utility of the offline and the online algorithms , unlike the @xmath0-secretary problem .",
    "we thus resort to extensive simulation to find the competitive ratio that depends of @xmath3 , the number of users rejected and used for running the offline smart algorithm , and find that most often @xmath7 , where @xmath8 is the total number of users .",
    "the problem of smart - phone crowd - sourcing is modeled as a reverse auction .",
    "the platform declares a set of tasks to be performed , of which each task has some value to the platform .",
    "the users submit their profiles to the platform , where each profile contains a list of tasks they will complete and their corresponding bid .",
    "the users expect to be paid an amount at least equal to their bid if they perform their tasks . in the offline case",
    ", the platform receives the profiles of all users simultaneously .",
    "the platform must decide which users to select and how much to pay each selected user .",
    "the offline problem can therefore be described as follows .",
    "given a set @xmath9 of users , select a set @xmath10 , so that the platform utility of @xmath11 is maximized over all possible subsets of @xmath9 . in the online case ,",
    "users arrive one at a time and submit their profiles to the platform .",
    "the platform must decide immediately whether to accept or reject the user and how much to pay the user .",
    "a decision once made , is irrevocable .",
    "similar to the offline case , the objective in this case too is to maximize the platform utility of a set @xmath10 , however , with causal user profiles .",
    "let the platform declare the set of tasks @xmath12 , where the value of a task @xmath13 , is given by @xmath14 , which for the sake of brevity will be written as @xmath15 .",
    "further , the function @xmath16 is extended for any set of tasks @xmath17 , @xmath18 , where it could be linear @xmath19 or any other arbitrary combinatorial function .",
    ".notation used [ cols=\"^,<\",options=\"header \" , ]      the online - smart algorithm , motivated by the @xmath0-secretary problem , consists of two phases , the _ observation phase _ and the _ winner selection phase_. in the observation phase , it rejects the first @xmath20 ( c is a constant chosen by the platform ) users on their arrival .",
    "it then runs smart on the bidding profiles of @xmath21 $ ] and stores the output set of winning users as a reference set @xmath22 .",
    "since the number of tasks is @xmath3 , the cardinality of @xmath22 is less than or equal to @xmath3 .",
    "the algorithm uses this set @xmath22 as a reference for selection of users among the remaining @xmath23 users , @xmath24 $ ] . in the beginning of the selection phase ,",
    "the final winners set @xmath11 is set to @xmath25 and users are processed as they arrive .    on the arrival of a user",
    "@xmath26 $ ] , if the cardinality of @xmath22 is less than @xmath3 then the algorithm does the following . if @xmath27 , that is the difference in marginal value and bid with respect to @xmath22 is positive , then the algorithm adds user @xmath28 to both @xmath22 and @xmath11 and makes a payment @xmath29 . if @xmath30 then the algorithm calls the try to replace function",
    "the try to replace function determines if it is profitable to replace a user @xmath31 with user @xmath28 ( if @xmath32 ) . if so the algorithm replaces user @xmath33 with user @xmath28 .",
    "it makes a payment to user @xmath28 , @xmath34 . if no user @xmath31 can be replaced profitably , user @xmath28 is rejected and the algorithm moves on to the next user .",
    "if the cardinality of @xmath22 is equal to @xmath3 then there can be no further addition of users to @xmath22 without decreasing the marginal utility of @xmath22 .",
    "this is because the presence of @xmath3 users implies the completion of at least @xmath3 tasks which leaves no more new tasks to be done .",
    "therefore , the algorithm calls the try to replace function to find if any user @xmath31 can be replaced by the current user , whose execution has been explained before .",
    "if no user can be replaced profitably , user @xmath28 is rejected and the algorithm moves on to the next user .    between the arrivals of two users in the selection phase the algorithm iterates through @xmath35 and removes any user @xmath28 having @xmath36 .",
    "this ensures that all users in @xmath22 have a positive difference in marginal value and bid , and consequently form a `` good '' reference for the incoming users .",
    "the algorithm terminates when either all users in @xmath9 have arrived or when @xmath37 becomes equal to @xmath3 .",
    "online - smart is computationally efficient .    in the observation phase",
    ", the platform runs the smart algorithm on the set of the first @xmath0 users . therefore , from lemma [ computational_efficiency_smart ]",
    "the complexity associated with observation phase is @xmath38 ( since @xmath39 ) . in the selection phase , the main routine runs @xmath23 times . within the main routine",
    "there are two functions , one each for the try to replace and the remove bad reference users .",
    "both of these functions have a complexity of @xmath40 .",
    "consequently , the selection phase takes @xmath41 time .",
    "therefore the computational complexity associated with online - smart is @xmath38 . hence , online - smart is computationally efficient .",
    "online - smart is individually rational .    to prove that online - smart is individually rational , it is sufficient to prove that @xmath42 @xmath43 . in the selection phase of online - smart , a user enters the final winner s set @xmath11 through either the add user function or the try to replace function .",
    "the add user function is called when the incoming user @xmath28 has @xmath44 . since the add user function pays user @xmath28 , @xmath45 , @xmath46 .",
    "an incoming user @xmath28 replaces an existing user @xmath47 through the try to replace function if and only if @xmath48 . since the payment made in the try to replace function to such a selected user @xmath28 is @xmath49 , therefore @xmath46 .",
    "online - smart is profitable .",
    "an incoming user @xmath26 $ ] enters @xmath11 through either the add user function or the try to replace function .",
    "let user @xmath28 enter @xmath11 through the add user function .",
    "at any point in the algorithm the set of winning users ( @xmath11 ) is always a subset of the reference set ( @xmath22 ) , that is @xmath50 .",
    "this implies that for a user @xmath51 , the marginal tasks with respect to @xmath22 are always a subset of the marginal tasks with respect to @xmath11 , i.e. @xmath52 .",
    "therefore , @xmath53 .",
    "the payment made to user @xmath28 is @xmath54 .",
    "hence , @xmath55 .",
    "the platform utility of @xmath56 is @xmath57 .",
    "therefore @xmath58 , i.e. the incremental utility change is always non - negative .",
    "let user @xmath28 enter @xmath11 through the try to replace function .",
    "the payment made to user @xmath28 is @xmath59 the increase in the utility of the platform is @xmath60 , where @xmath61 @xmath62 since user @xmath47 , @xmath63 .",
    "therefore , @xmath64 .",
    "further the remove bad reference users function ensures that for any @xmath31 , @xmath65 .",
    "therefore @xmath66 .",
    "since at the start of the selection phase @xmath67 and the addition of a user @xmath28 to @xmath11 through the add user function or the replace user function yields @xmath66 , online - smart is profitable .",
    "online - smart is truthful .    from theorem [ myerson_theorem ] ,",
    "online - smart is truthful if its selection rule is monotone and the payment it makes is critical .",
    "let us assume that user @xmath28 enters the final winners set @xmath11 with bid @xmath68 .",
    "let user @xmath28 change its bid to @xmath69 with @xmath70 .",
    "if user @xmath28 entered @xmath11 through the add user function , then @xmath27 .",
    "since @xmath71 user @xmath28 enters @xmath11 . if user @xmath28 entered @xmath11 through the try to replace function then for some @xmath47 , @xmath48 .",
    "further user @xmath28 replaces user @xmath33 in @xmath22 .",
    "since @xmath48 , user @xmath28 still replaces user @xmath33 in @xmath22 and enters @xmath11 .",
    "hence the selection rule of online - smart is monotone .",
    "let user @xmath28 change its bid to @xmath69 with @xmath72 . if user @xmath28 entered @xmath11 through the add user function then @xmath45 . since @xmath73 , @xmath74 and user @xmath28 no longer enters @xmath11 .",
    "if user @xmath28 entered @xmath11 through the try to replace function , then it replaces some @xmath47 and is paid @xmath49 . since @xmath75 , user @xmath28 no longer replaces user @xmath33 in @xmath22 and consequently it does not enter @xmath11 .",
    "hence the payment made by online - smart is critical .",
    "online - smart is a @xmath0-secretary algorithm equivalent of the smart algorithm .",
    "it works by initially rejecting a few users , whose profiles are used by the offline smart algorithm to generate a reference set that is used to select / reject future users and to decide their respective payments .",
    "the reference set allows the platform to select users with positive marginal utility . also , since in the online scenario we assumed that each user does not know when it arrives in relation to other users , the payment strategy with online - smart that ensures truthfulness is simpler than the smart .    in general , the `` goodness '' of any online algorithm",
    "is measured by its competitive ratio , i.e. the ratio of the utility of the online algorithm with the utility of the offline algorithm . for the @xmath0-secretary problem ,",
    "the competitive ratio has been shown to be around @xmath5 , where the first @xmath76 users are rejected , assuming that users arrive uniformly randomly .",
    "finding the competitive ratio of the online - smart is , however , very challenging , since one can compare the users that are selected with online - smart and smart , but not their payments since there is no direct relation between them .",
    "the latter fact does not allow any tractable analytical solution for finding the competitive ratio of the online - smart , and to understand its behavior with respect to the smart , we turn to extensive numerical simulations .",
    "not surprisingly , it turns out it is optimal to approximately reject the first @xmath77 users ( similar to @xmath0-secretary problem ) , to get the best competitive ratio .",
    "in this section , we evaluate the performance of smart and online - smart using numerical simulations and compare it with m - sensing @xcite . fig . [",
    "fig : utilityvsusers ] plots platform utility with respect to the number of users . for fig .",
    "[ fig : utilityvsusers ] , the number of tasks were kept constant while varying the number of users .",
    "we used @xmath78 tasks with values of tasks generated uniformly randomly between @xmath79 and @xmath80 .",
    "each user was assumed to bid for @xmath81% of the tasks randomly and each bid was generated uniformly randomly between @xmath82 and @xmath80 .",
    "[ fig : utilityvsusers ] clearly shows that smart outperforms m - sensing by roughly @xmath83% .        in fig .",
    "[ fig : utilityvstasks ] , we plot the platform utility with respect to the number of tasks @xmath3 .",
    "we keep the number of users fixed to @xmath84 .",
    "again , each user was assumed to bid for @xmath81% of the tasks randomly and each bid was generated uniformly randomly between @xmath82 and @xmath80 .",
    "tasks were generated with values ranging uniformly between @xmath85 and @xmath86 .",
    "once again fig .",
    "[ fig : utilityvstasks ] shows that smart has larger utility compared to m - sensing , however , the margin is smaller compared to fig . [",
    "fig : utilityvsusers ] .",
    "further , it is interesting to note that the performance of smart improves compared to m - sensing as number of tasks @xmath3 increases .",
    "[ fig : utilityvsmeantaskcompletion ] plots the platform utility with respect to the mean fraction of tasks that a user completes .",
    "the number of users and the number of tasks were kept constant , while the fraction of total tasks that any user completes on average were varied .",
    "we used @xmath87 users and @xmath88 tasks , where each user bids uniformly randomly between @xmath82 and @xmath80 , and each task had values uniformly randomly between @xmath85 and @xmath86 . from fig .",
    "[ fig : utilityvsmeantaskcompletion ] , we can see that smart performs better than m - sensing for all values of fractions of mean task completion .",
    "further , smart provides a healthy improvement in platform utility over m - sensing when each user bids to complete about @xmath86% to @xmath89% of the tasks .",
    "next , we move on to to quantify the performance of the online - smart in comparison to smart to understand the competitive ratio . in fig .",
    "[ fig : competitiveratio ] , we plot the competitive ratio of the online - smart as a function of @xmath0 .",
    "we used @xmath84 users , and each user was assumed to bid for @xmath81% of the tasks randomly and each bid was generated uniformly randomly between @xmath82 and @xmath80 .",
    "the number of tasks @xmath90 with values uniformly random between @xmath85 and @xmath91 . fig .",
    "[ fig : competitiveratio ] indicates that observing @xmath92% ( around one - third ) of the total number of users and using their profiles to form a reference set maximizes the competitive ratio of online - smart .",
    "competitive ratio of online - smart depends on the fraction of total tasks that each user completes on average .",
    "larger the fraction , larger is the overlap in the tasks completed by different users .",
    "consequently , users arriving in observation phase have a lot of common tasks with the users arriving in selection phase , thereby allowing online - smart to make `` good '' user selections .",
    "thus , it is reasonable to expect that the competitive ratio would increase as the average number of tasks that each user completes increases .",
    "this notion is confirmed through simulation in fig .",
    "[ fig : competitiveratiomeanfractiontasks ] , where the competitive ratio was plotted as a function of the total tasks completed by any user between @xmath93% to @xmath94% . at each step ,",
    "the best competitive ratio was plotted using the best value of @xmath0 for that particular fraction of total tasks completed by each user .",
    "one interesting question remains : given that we know that each user completes a certain fraction of tasks on average , what fraction of users should online - smart observe in order to produce the maximum competitive ratio with respect to smart ?",
    "this is answered in fig .",
    "[ fig : bestfractionmeanfractiontasks ] , which is a plot of the fraction of users observed by online - smart while producing the competitive ratios depicted in fig .",
    "[ fig : competitiveratiomeanfractiontasks ] .",
    "we can observe that the fraction of users that need to be observed by online - smart has its maximum when each user completes @xmath79% of the total tasks on average .",
    "this behavior is quite intuitive since , while choosing a certain fraction of users to observe , there is a tradeoff between the quality of the reference set and the number of users left for selection . if the fraction of users observed is low , the reference set formed in observation phase will be of low quality and hence , the selection of winning users based on the reference set by online - smart will be poor .",
    "if the fraction of users observed is high , the reference set formed in the observation phase will be of high quality , however , there will be very few users left for selection .",
    "in this paper , we proposed truthful algorithms for mobile crowd - sourcing applications for both the offline and online scenarios .",
    "both the algorithms are inspired by the well - known vcg mechanism that is known to be truthful , with polynomial complexity compared to exponential / combinatorial complexity of the vcg mechanism .",
    "the online version of the algorithm follows the solutions to the @xmath0-secretary problem , where first some users are just observed , and whose profiles are then used to select users among the remaining ones .",
    "even though we have been able to show that the proposed algorithm have all the four useful properties of any auction design , one question that has not been answered is how much penalty our offline algorithm pay with respect to the optimal offline algorithm , and what is the competitive ratio of our online algorithm . both of these questions are important in deriving efficient mobile crowd - sourcing auction design .",
    "j.  eriksson , l.  girod , b.  hull , r.  newton , s.  madden , and h.  balakrishnan , `` the pothole patrol : using a mobile sensor network for road surface monitoring , '' in _ proceedings of the 6th international conference on mobile systems , applications , and services_.1em plus 0.5em minus 0.4em2008 , pp .",
    "r.  k. rana , c.  t. chou , s.  s. kanhere , n.  bulusu , and w.  hu , `` ear - phone : an end - to - end participatory urban noise mapping system , '' in _ proceedings of the 9th acm / ieee international conference on information processing in sensor networks_.1em plus 0.5em minus 0.4em2010 , pp .",
    "105116 .",
    "t.  yan , m.  marzilli , r.  holmes , d.  ganesan , and m.  corner , `` mcrowd : a platform for mobile crowdsourcing , '' in _ proceedings of the 7th acm conference on embedded networked sensor systems_.1em plus 0.5em minus 0.4em 2009 , pp .",
    "347348 .",
    "l.  duan , t.  kubo , k.  sugiyama , j.  huang , t.  hasegawa , and j.  walrand , `` incentive mechanisms for smartphone collaboration in data acquisition and distributed computing , '' in _ proceedings of ieee infocom , 2012_.1em plus 0.5em minus 0.4em2012 , pp .",
    "17011709 .",
    "d.  yang , g.  xue , x.  fang , and j.  tang , `` crowdsourcing to smartphones : incentive mechanism design for mobile phone sensing , '' in _ proceedings of the 18th acm annual international conference on mobile computing and networking_.1em plus 0.5em minus 0.4em2012 , pp .",
    "173184 .",
    "w.  vickrey , `` counterspeculation , auctions , and competitive sealed tenders , '' _ the journal of finance _ , vol .",
    "16 , no .  1 ,",
    "pp . 837 , 1961 .",
    "[ online ] .",
    "available : http://dx.doi.org/10.1111/j.1540-6261.1961.tb02789.x    v.  conitzer and t.  sandholm , `` failures of the vcg mechanism in combinatorial auctions and exchanges , '' in _ proceedings of the fifth international joint conference on autonomous agents and multiagent systems_.1em plus 0.5em minus 0.4em2006 , pp . 521528 .        d.  garg , y.  narahari , and s.  gujar , `` foundations of mechanism design : a tutorial part 1-key concepts and classical results , '' in _ sadhana ( academy proceedings in engineering sciences ) _ , vol .  33 , no .  2.1em plus 0.5em minus 0.4emindian academy of sciences , 2008 , pp . 83130",
    ".        r.  kleinberg , `` a multiple - choice secretary algorithm with applications to online auctions , '' in _ proceedings of the sixteenth annual acm - siam symposium on discrete algorithms_.1em plus 0.5em minus 0.4em society for industrial and applied mathematics , 2005 , pp .",
    "630631 .",
    "m.  babaioff , n.  immorlica , d.  kempe , and r.  kleinberg , `` a knapsack secretary problem with applications , '' _ approximation , randomization , and combinatorial optimization .",
    "algorithms and techniques _",
    ", pp . 1628 , 2007 ."
  ],
  "abstract_text": [
    "<S> in this paper , we consider the problem of incentive mechanism design for smart - phone crowd - sourcing . </S>",
    "<S> each user participating in crowd - sourcing submits a set of tasks it can accomplish and its corresponding bid . </S>",
    "<S> the platform then selects the users and their payments to maximize its utility while ensuring truthfulness , individual rationality , profitability , and polynomial algorithm complexity . </S>",
    "<S> both the offline and the online scenarios are considered , where in the offline case , all users submit their profiles simultaneously , while in the online case they do it sequentially , and the decision whether to accept or reject each user is done instantaneously with no revocation . </S>",
    "<S> the proposed algorithms for both the offline and the online case are shown to satisfy all the four desired properties of an _ efficient _ auction . through extensive simulation , the performance of the offline and the online algorithm </S>",
    "<S> is also compared . </S>"
  ]
}