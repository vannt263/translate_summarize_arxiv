{
  "article_text": [
    "counting the number of solutions for constraint satisfaction problem , denoted by # csp , is a very important problem in artificial intelligence ( ai ) . in theory ,",
    "# csp is a # p - complete problem even if the constraints are binary , which has played a key role in complexity theory . in practice ,",
    "effective counters have opened up a range of applications , involving various probabilistic inferences , approximate reasoning , diagnosis , and belief revision .    in recent years , many attentions have been focused on counting a specific case of # csp , called # sat . by counting components , bayardo and pehoushek presented an exact counter for sat , called relsat [ 1 ] . by combining component",
    "caching with clause learning together , sang et al .",
    "created an exact counter cachet [ 2 ] .",
    "based on converting the given cnf formula into d - dnnf form , which makes the counting easily , darwiche introduced an exact counter c2d [ 3 ] . by introducing an entirely new approach of coding components",
    ", thurley addressed an exact counter sharpsat [ 4 ] . by using more reasoning , davies and bacchus addressed an exact counter # 2clseq [ 5 ] .",
    "besides the emerging exact # sat solvers , wei and selman presented an approximate counter approxcount for sat by using markov chain monte carlo ( mcmc ) sampling [ 6 ] .",
    "building upon approxcount , gomes et al . used sampling with a modified strategy and proposed an approximate counter samplecount [ 7 ] .",
    "relying on the properties of random xor constraints , an approximate counter mbound was introduced in [ 8 ] . using sampling of the backtrack - free search space of systematic",
    "sat solver , sampleminisat was addressed in [ 9 ] .",
    "building on the framework of samplecount , kroc et al . exploited the belief propagation method and presented an approximate counter bpcount [ 10 ] . by performing multiple runs of",
    "the minisat sat solver , kroc et al .",
    "introduced an approximate counter , called minicount [ 10 ] .",
    "recently , more efforts have been made on the general # csp problems .",
    "for example , angelsmark et al . presented upper bounds of the # csp problems [ 11 ] .",
    "bulatov and dalmau discussed the dichotomy theorem for the counting csp [ 12 ] .",
    "pesant exploited the structure of the csp models and addressed an algorithm for solving # csp [ 13 ] .",
    "dyer et al . considered the trichotomy theorem for the complexity of approximately counting the number of satisfying assignments of a boolean csp [ 14 ] .",
    "yamakami studied the dichotomy theorem of approximate counting for complex - weighted boolean csp [ 15 ] .",
    "though great many studies had been made on the algorithms for the # csp problems , only a few of them related to the # csp solvers .",
    "gomes et al .",
    "proposed a new generic counting technique for csps building upon on the xor constraint [ 16 ] . by adapting backtracking with tree - decomposition , favier et al .",
    "introduced an exact # csp solver , called # btd [ 17 ] .",
    "in addition , by relaxing the original csp problems , they presented an approximate method approx # btd [ 17 ] .    in this paper",
    ", we propose a new type of method for solving # csp problems .",
    "the method derives from the partition function based on introducing the free energy and capturing the relationship of probabilities of variables and constraints .",
    "when computing the number of the solutions of a given csp formula according to the partition function , we require the marginal probabilities of each variable and each constraint to plug into the partition function . in order to obtain the marginal probabilities , we employ the belief propagation ( bp ) because it can organize a computation that makes the marginal probabilities computing tractable and eventually returns the marginal probabilities .",
    "in addition , unlike the counter bpcount using the belief propagation method for obtaining the information deduced from solution samples in samplecount , we employ the belief propagation method for acquiring information for partition function .",
    "this leads to two differences between bpcount and our counter .",
    "the first one is the counter bpcount requires to iteratively perform the belief propagation method and repeatedly obtain the marginal probabilities of each variable on the simplified sat formulae ; while our counter carries out the belief propagation method only once , which spends less cost .",
    "the second one is that the two counters obtaining the exact number of solutions depending on different circumstances .",
    "the counter bpcount needs the corresponding factor graphs of the simplified sat formulae all have no cycles ; while our counter only needs the factor graph of the given csp formula has no cycle , which meets easily .",
    "our experiments reveal that our counter for csp , called pfcount , works quite well .",
    "we consider various hard instances , including the random instances and the structural instances .",
    "for the random instances , we consider the instances based on the model rb close to the phase transition point , which has been proved the existence of satisfiability phase transition and identified the phase transition points exactly .",
    "with regard to the random instances , our counter pfcount improves the efficiency tremendously especially for instances with more variables .",
    "moreover , pfcount presents a good estimate to the number of solutions for instances based on model rb , even if the instances scales are relatively large .",
    "therefore , the effectiveness of pfcount is much more evident especially for random instances . for the structural instances , we focus on the counting problem based on graph coloring .",
    "the performance of pfcount for solving structural instances is in general comparing with the random instances because pfcount sometimes ca nt converge .",
    "however , once pfcount can converge , it can estimate the number of the solutions of instances efficiently . as a whole , pfcount is a quite competitive # csp solver .",
    "a constraint satisfaction problem ( csp ) @xmath0 is defined as a pair @xmath1 , where @xmath2 is a set of variables and @xmath3 is a set of constraints defined on _",
    "v_. for each variable @xmath4 in _ v _ , the domain @xmath5 of @xmath4 is a set with @xmath6 values ; the variable @xmath4 can be only assigned a value from @xmath5 . a constraint _",
    "c _ , called a _ k_-ary constraint , consists of _ k _ variables @xmath7 and a relation @xmath8 , where @xmath9 , @xmath10 , ... , @xmath11 are distinct .",
    "the relation @xmath12 specifies all the allowed tuples of values for the variables @xmath7 which are compatible with each other .",
    "the variable configuration of a csp @xmath0 is @xmath13 that assigns each variable a value from its domain .",
    "a solution to a constraint @xmath14 is a variable configuration @xmath15 that sets values to each variable in the constraint @xmath14 such that @xmath16 .",
    "we also say that the variable configuration @xmath17 satisfies the constraint @xmath14 .",
    "a solution to a csp @xmath0 is a variable configuration such that all the constraints in _ c _ are satisfied . given a csp @xmath0 ,",
    "the decision problem is to determine whether the csp @xmath0 has a solution .",
    "the corresponding counting problem ( # csp ) is to determine how many solutions the csp @xmath0 has .",
    "a csp @xmath0 can be expressed as a bipartite graph called factor graph ( see fig .",
    "1 ) . the factor graph has two kinds of nodes , one is variable node ( which we draw as circles ) representing the variables , and the other is function node ( which we draw as squares ) representing the constraints .",
    "a function node is connected to a variable node by an edge if and only if the variable appeares in the constraint . in the rest of this paper",
    ", we will always index variable nodes with letters starting with _",
    "i _ , and factor nodes with letters starting with @xmath14 .",
    "in addition , for every variable node _ i _ , we will use _ v_(_i _ ) to denote the set of function nodes which it connects to , and _",
    "v_(_i_)@xmath18 to denote the set _",
    "v_(_i _ ) without function node @xmath14 . similarly ,",
    "for each function node @xmath14 , we will use _",
    "v_(@xmath14 ) to denote the set of variable nodes which it connects to , and _",
    "i _ to denote the set _",
    "v_(@xmath14 ) without variable node _ i_.    .",
    "the csp @xmath0 is encoded as @xmath20 , where _",
    "v_(@xmath9 ) = \\{1 , 2 , 3 } , _",
    "v_(@xmath10 ) = \\{1 , 4 , 5 , 6 } , _",
    "v_(@xmath21 ) = \\{1 , 7 , 8}. ]",
    "in this section , we present a new approximate approach , called pfcount , for counting the number of solutions for constraint satisfaction problem .",
    "the approach derives from the partition function based on introducing the free energy and capturing the relationship of probabilities of variables and constraints . in the following , we will describe the partition function in details .      in this subsection",
    ", we present a partition function for counting the number of solutions for csp .",
    "the partition function is an important quantity in statistical physics , which describes the statistical properties of a system .",
    "most of the aggregate thermodynamic variables of the system , such as the total energy , free energy , entropy , and pressure , can be expressed in terms of the partition function . to facilitate the understanding ,",
    "we first describe the notion of the partition function . given a system of _ n _ particles , each of which can be in one of a discrete number of states , i.e. , @xmath22 , and a state of the system _ x _ denoted by @xmath13 , i.e.",
    "i__th particle @xmath4 is in the state @xmath23 , the partition function in statistical physics is defined as    @xmath24    where _",
    "t _ is the temperature , _ e_(_x _ ) is the energy of the state _ x _ , and _ p_(_x",
    "_ ) is the probability of the state _",
    "x_. in this paper , we focus on the partition function that the temperature _ t _ is assigned to 1 .    since the partition function is also used in probability theory , in the following we will learn the partition function from the probability theory .",
    "given a csp @xmath0 and a variable configuration @xmath13 of @xmath0 , the partition function in probability theory is defined in equation ( 2 ) .",
    "@xmath25    where _",
    "p_(_x _ ) is the the joint probability distribution , function @xmath26 is a boolean function range \\{0 , 1 } , which evaluates to 1 if and only if the constraint @xmath14 is satisfied , evaluates to 0 otherwise ; and _ m _ is the number of constraints .",
    "based on equation ( 2 ) , the joint probability distribution _ p_(_x _ ) over the _",
    "n _ variables can be expressed as the follows .",
    "@xmath27    because the construction of the joint probability distribution is uniform over all variable configurations , _ z _ is the number of solutions of the given csp @xmath0 .",
    "therefore , # csp can be solved by computing a partition function . in the following",
    ", we will propose the derivation of the partition function .    in order to present a calculation method to compute the partition function",
    ", we introduce the variational free energy defined by    @xmath28    where _",
    "e_(_x _ ) is the energy of the state _ x _ and _ b_(_x _ ) is a trial probability distribution . simplifying the equation ( 4 ) , we draw up the following equation .",
    "@xmath29    by setting _ t _ to 1 in equation ( 1 ) , we can obtain :    @xmath30    then we take the equation ( 6 ) into ( 5 ) and acquire :    @xmath31    since _",
    "b_(_x _ ) is a trial probability distribution , the sum of the probability distribution should be 1 , i.e. @xmath32 . then the equation ( 7 ) can be expressed as the follows .",
    "@xmath33    by analyzing the equation ( 8) , we know that the second term is equal to zero if",
    "_ b_(_x _ )",
    "is equal to _ p_(_x _ ) .",
    "b_(_x _ ) is equal to _ p_(_x _ ) , the partition function can be written as    @xmath34    then by taking the equation ( 4 ) into the above equation , we obtain    @xmath35    for a factor graph with no cycles , _ p_(_x _ ) can be easily expressed in terms of the marginal probabilities of variables and constraints as the follows .",
    "@xmath36    where @xmath37 is the number of times that the variable @xmath38 occurs in the constraints , _ m _ and _",
    "n _ are the number of constraints and variables respectively , @xmath39 and @xmath40 are the marginal probabilities of constraints and variables respectively .    in addition , by analyzing the two partition functions presented in equations ( 1 ) and ( 2 ) , we can see that _",
    "p_(_x _ ) and _ z _ are equal when _",
    "t _ is set to 1 .",
    "thus , we can obtain the following equation from equation ( 1 ) and equation ( 2 ) on account of the equivalents _ z _ and _ p_(_x _ ) .",
    "@xmath41    then the partition function can be expressed as the follows by plugging the equation ( 11 ) and equation ( 12 ) into equation ( 10 ) .",
    "@xmath42    in equation ( 13 ) , when the variable configuration _ x _ is a solution to a csp @xmath0 , the function @xmath43 is assigned 1 , which means that the term @xmath44 evaluates to 0 .",
    "on the other hand , when the variable configuration _ x _ is not a solution to a csp @xmath0 , the term @xmath45 evaluates to 0 .",
    "therefore , whether or not the variable configuration _ x _ is a solution to a csp @xmath0 , the first term in the exponential function must evaluate to 0 . then equation ( 13 )",
    "can be expressed as the follows .",
    "@xmath46    from the above equation , we can learn that the number of solutions of a given csp @xmath0 can be calculated according to the partition function if the marginal probability of variable @xmath47 and the marginal probability of constraint @xmath39 can be obtained . in the following",
    ", we will present an approach to compute the marginal probabilities .      in this subsection",
    ", we address a method bp to calculate the marginal probabilities . the belief propagation , bp for short ,",
    "is a message passing procedure , which is a method for computing marginal probabilities [ 18 ] .",
    "the bp procedure obtains exact marginal probabilities if the factor graph of the given csp @xmath0 has no cycles , and it can still empirically provide good approximate results even when the corresponding factor graph does have cycles .        to describe the bp procedure , we first introduce messages between function nodes and their neighboring variable nodes and vice versa .",
    "the message @xmath48 passed from a function node @xmath14 to one of its neighboring variable nodes _ i _ can be interpreted as the probability of constraint @xmath14 being satisfied if the variable @xmath4 takes the value @xmath49 ; while the message @xmath50 passed from a variable node _",
    "i _ to one of its neighboring function nodes @xmath14 can be interpreted as the probability that the variable @xmath4 takes the special value @xmath49 in the absence of constraint @xmath14 .",
    "next we concentrate on presenting the details of the bp procedure ( see fig .",
    "at first , the message @xmath51 $ ] is initialized for every edge ( @xmath14 , _ i _ ) and every value @xmath49 .",
    "then the messages are updated with the following equations .",
    "@xmath52    @xmath53    where @xmath54 is a normalization constant ensuring that @xmath50 is a probability , and @xmath43 is a characteristic function taking the value 1 if the variable configuration @xmath17 satisfies the constraint @xmath14 , taking the value 0 otherwise .",
    "the bp procedure runs the equations ( 15 ) and ( 16 ) iteratively until the message @xmath48 converges for every edge ( @xmath14 , _ i _ ) and every value @xmath49 .",
    "when they have converged , we can then calculate the marginal probabilities of each variable and each constraint in the following equations .",
    "@xmath55    @xmath56    where _ c_ and _ c ` \" ` _ are normalization constants ensuring that @xmath57 and @xmath39 are probabilities , and @xmath43 is a characteristic function taking the value 1 if the variable configuration @xmath17 satisfies the constraint @xmath14 , taking the value 0 otherwise .    as a whole",
    ", the bp procedure organizes a computation that makes the marginal probabilities computing tractable and eventually returns the marginal probabilities of each variable and each constraint which can be used in the partition function . as we know , the bp procedure can present exact marginal probabilities if the factor graph of the given csp @xmath0 has no cycle . and from the whole derivation of the partition function , we understand that all equations address exact results if the factor graph is a tree .",
    "thus , we obtain the following theorem .",
    "the method pfcount provides an exact number of solutions for a csp @xmath0 if the factor graph of the given csp @xmath0 has no cycle .",
    "the above theorem illustrates that pfcount can present an exact number of solutions if the corresponding factor graph of the given csp @xmath0 has no cycle . in addition , even when the factor graph does have cycles , our method still empirically presents good approximate number of solutions for csp .",
    "in this section , we perform two experiments on a cluster of 2.4 ghz intel xeon machines with 2 gb memory running linux centos 5.4 .",
    "the purpose of the first experiment is to demonstrate the performance of our method on random instances ; the second experiment is to compare our method with two other methods on structural instances .",
    "our # csp solver is implemented in c++ , which we also call pfcount . for each instance , the run - time is in seconds and the timeout limit is 7200s .      in this subsection , we conduct experiments on csp benchmarks of model rb , which can provide a framework for generating asymptotically hard instances so as to give a challenge for experimental evaluation of the # csp solvers [ 19 ] .",
    "the benchmarks of model rb is determined by parameters ( _ k _ , _ n _ , @xmath58 , _ r _ , _ p _ ) , where _ k _ denotes the arity of each constraint ; _ n _ denotes the number of variables ; @xmath58 determines the domain size @xmath59 of each variable ; _ r _ determines the number @xmath60 of constraints ; _ p _ determines the number @xmath61 of disallowed tuples of each relation .",
    "table 1 illustrates the comparison of pfcount with state - of - the - art exact # sat solvers sharpsat , c2d , cachet , and approximate solvers approxcount , bpcount on csp benchmarks of model rb close to the phase transition point . in the experiment",
    ", we choose random instances @xmath62 ( 2 , _",
    "n _ , 0.8 , 3 , _ p _ ) with _ n",
    "_ @xmath63 \\{10 , 20 , 30 , 40}. moreover , since the theoretical phase transition point @xmath64 0.23 for _ k _ = 2 , @xmath58 = 0.8 , _ r _ = 3 , _",
    "@xmath63 \\{10 , 20 , 30 , 40 } , we set _ p _ = 0.20 . in table 1",
    ", the instance frb__a__-_b_-_c _ represents the instance containing _ a _ variables , owning a domain with _",
    "b _ values for each variable , and indexing _ c _ ; _ exacts _ represents the exact number of solutions of each instance ; _ apps _ represents the approximate number of solutions of each instance .",
    "note that the exact number of solutions of each instance is obtained by the exact # sat solvers and the csp instances solved by these # sat solvers are translated into sat instances using the direct encoding method .",
    "the results reported in table 1 suggest that the effectiveness of pfcount is much more evident especially for larger instances .",
    "for example , the efficiency of solving instances with 30 variables has been raised at least 74 times ( instance frb30 - 15 - 1 ) . and the instances with 40 variables can be solved by pfcount in a few seconds . furthermore , pfcount presents a good estimate to the number of solutions for csp benchmarks of model rb .",
    "even if the instances scales are relatively large , the estimates are found to be over 63.129% correct except the instance frb20 - 11 - 3 . therefore , this experiment shows that pfcount is quite competitive compared with the other counters .",
    "table 2 presents the performance of our counter pfcount on hard instances based on model rb .",
    "these instances provide a challenge for experimental evaluation of the csp solvers . in the 1st international csp solver competition in 2005 ,",
    "these instances ca nt be solved by all the participating csp solvers in 10 minutes . in the recent csp solver competition",
    ", only one solver can solve the instances frb50 - 23 - 1 , frb50 - 23 - 4 , frb50 - 23 - 5 , frb53 - 24 - 5 , frb56 - 25 - 5 , and frb59 - 26 - 5 ; only two solvers can solve the instance frb53 - 24 - 3 ; four solvers can solve the instance frb53 - 24 - 1 ; and the rest of instances still ca nt be solved in 10 minutes . in table 2 , _ apps _ represents the approximate number of solutions of each instance ; _ expecteds _ represents the expected number of solutions of each instance , which can be calculated as the following according to the definition of model rb [ 19 ] .",
    "@xmath65    where _",
    "n _ denotes the number of variables ; @xmath58 determines the domain size @xmath66 of each variable ; _ r _ determines the number @xmath67 of constraints ; _ p _ determines the number @xmath61 of disallowed tuples of each relation . when _",
    "n _ tends to infinite , _ expecteds _ is the number of solutions of the instances based on model rb . empirically ,",
    "when _ n _ is not very large , _ expecteds _ and the exact number of solutions are in the same order of magnitude .",
    "therefore , _ expecteds _",
    "precisely estimates the number of solutions of the instances based on model rb . by analyzing the results in table 2 , we can see that pfcount efficiently estimates the number of solutions of these hard csp instances .",
    "it should be pointed out that our pfcount is only capable of estimating the numbers of solutions rather enumerating the solutions .      in this subsection",
    ", we carry out experiments on graph coloring instances from the dimacs benchmark set .",
    "the # csp solvers compared with pfcount are ilog solver 6.3 [ 20 ] and csp+xors .",
    "table 3 illustrates the results of the comparison of the # csp solvers on graph coloring instances . in this table , _ apps _ is the approximate number of solutions of each instance ; _ exacts _ is the exact number of solutions of each instance calculated by the exact counters .",
    "note that the results presented by the ilog solver and csp+xors are based on [ 16 ] for lack of the binary codes . as can be seen from table 3",
    ", pfcount does nt give good estimate on these structural instances in contrast with the random instances .",
    "however , the run - time of pfcount clearly outperforms other # csp solvers greatly .",
    "this paper addresses a new approximate method for counting the number of solutions for constraint satisfaction problem .",
    "it first obtains the marginal probabilities of each variable and constraint by the belief propagation approach , and then computes the number of the solutions of a given csp formula according to a partition function , which obtained by introducing the free energy and capturing the relationship between the probabilities of the variables and the constraints .",
    "the experimental results also show that the effectiveness of our method is much more evident especially for larger instances close to the phase transition point .",
    "sang , t. , bacchus , f. , beame , p. , kautz , h. a. , and pitassi , t. : combining component caching and clause learning for effective model counting.in : 7th theory and applications of satisfiability testing .",
    "springer , heidelberg ( 2004 )            gomes , c. p. , hoffmann , j. , sabharwal , a. , and selman , b. : from sampling to model counting . in : 20th international joint conference on artificial intelligence , pp .",
    "springer , heidelberg ( 2007 )        kroc , l. , sabharwal , a. , and selman , b. : leveraging belief propagation , backtrack search , and statistics for model counting . in : 5th integration of ai and or techniques in contraint programming for combinatorial optimzation problems , pp",
    ". 127141 .",
    "springer , heidelberg ( 2008 )    angelsmark , o. , jonsson , p. , linusson , s. , and thapper j. : determining the number of solutions to binary csp instances . in : 8th principles and practice of constraint programming , pp .",
    "springer , heidelberg ( 2002 )    bulatov , a. , dalmau , v. : towards a dichotomy theorem for the counting constraint satisfaction problem . in : 44th annual ieee symposium on foundations of computer science , pp .",
    "ieee computer society , los alamitos , ca ( 2003 )          gomes , c. p. , hoeve , w. j. , sabharwal , a. , and selman , b. : counting csp solutions using generalized xor constraints . in : national conference on artificial intelligence , pp .",
    "aaai press , u.s ."
  ],
  "abstract_text": [
    "<S> we propose a new approximate method for counting the number of the solutions for constraint satisfaction problem ( csp ) . </S>",
    "<S> the method derives from the partition function based on introducing the free energy and capturing the relationship of probabilities of variables and constraints , which requires the marginal probabilities . </S>",
    "<S> it firstly obtains the marginal probabilities using the belief propagation , and then computes the number of solutions according to the partition function . </S>",
    "<S> this allows us to directly plug the marginal probabilities into the partition function and efficiently count the number of solutions for csp . </S>",
    "<S> the experimental results show that our method can solve both random problems and structural problems efficiently .    </S>",
    "<S> function ; # csp ; belief propagation ; marginal probability . </S>"
  ]
}