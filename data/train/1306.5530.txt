{
  "article_text": [
    "web service ( ws ) is a new distributed component which emerged about ten years ago , which uses wsdl@xcite as its interface description language , soap@xcite as its communication protocol and uddi@xcite as its directory service . because ws uses the web as its provision platform , it is suitable to be used to develop cross - organizational business integrations .",
    "cross - organizational business processes are usual forms in e - commerce that orchestrate some business activities into a workflow .",
    "ws orchestration ( wso ) provides a solution for such business process based on ws technologies , hereby representing a business process where business activities are modeled as component wses .    from a ws viewpoint",
    ", wso provides a workflow - like pattern to orchestrate existing wses to create a new composite ws , and embodies the added values of ws .",
    "in particular , we use the term wso , rather than another term ",
    "ws composition , because there are also other ws composition patterns , such as ws choreography ( wsc ) @xcite .",
    "however , about wsc and the relationship of wso and wsc@xcite , we do not explain more , because it is not the focus of this paper .    in this paper , we focus on wso , exactly , the qos - aware wso engine ( runtime of wso ) and its formal model .",
    "a qos - aware wso enables the customers to be satisfied with not only their functional requirements , but also their qos requirements , such as performance requirements , reliability requirements , security requirements , etc . a single execution of a wso is called a wso instance .",
    "a qos - aware wso engine provides runtime supports for wsos with assurance of qos implementations .",
    "these runtime supports include lifetime operation on a wso instance , queue processing for request from the customers and incoming message delivery to a wso instance .",
    "ws and wso are with a continuously changing and evolving environment .",
    "the customers , the requirements of the customers , and the component wses are all changing dynamically . to assure safe adaptation to dynamically changing and evolving requirements , it is important to have a rigorous semantic model of the system : the component wses , the wso engine that provides wso instance management and invocation of the component wses , the customer accesses , and the interactions among these elements .",
    "using such a model , designs can be analyzed to clarify assumptions that must be met for correct operation .",
    "we design a typical qos - aware wso engine , called qos - wsoe in this paper .",
    "an architecture of qos - wsoe is given , and more importantly , a formal model of qos - wsoe is established based on actor systems theory@xcite@xcite@xcite . in the formal model ,",
    "we introduce the notion of * qos - aware wso service * , * qos - aware wso system * , and * qos - aware wso behavior*. and we draw conclusions that : ( 1 ) if a qos - aware wso engine is a * qos - aware wso system * , then it provides * qos - aware wso service * for customers ; ( 2 ) if a qos - aware engine has * qos - aware wso behavior * , then it is a * qos - aware wso system * and further provides * qos - aware wso service*.    this paper is organized as follows . in section 2 ,",
    "we introduce the related works .",
    "the actor computational model and the three layered pyramidal architecture are introduced in section 3 .",
    "we illustrate a ws composition example called buyingbooks in section 4 .",
    "we design qos - wsoe in section 5 . and in section 6 , formal model of qos - wsoe",
    "is established .",
    "finally , we conclude our works and point out future works .",
    "the main efforts on wso of the industry are trying to establish a uniform wso description language specification , such as the early wsfl@xcite , xlang@xcite , and lately converged ws - bpel@xcite .",
    "such wso description languages based on different mathematical models have constructs to model invocation of wses , manipulate information transferred between wses , control execution flows of these activities and inner transaction processing mechanisms .",
    "the wso description language can be used to define various wsos under different requirements and acts as a so - called meta language .",
    "wsos described by such meta languages actually are pure texts and must be enabled by the meta language interpreter called wso engine , such as the famous open source activebpel@xcite , respect tuple centres based ws - bpel engine@xcite , a multi - agent system based ws - bpel engine@xcite and event - driven architecture based ws - bpel engine@xcite .    in industry , there are many research works to give the meta languages correctness verifications based on different theoretical tools@xcite .",
    "@xcite formalizes ws - bpel@xcite with petri - net .",
    "@xcite uses process algebra to give ws - bpel a theoretical foundation .",
    "@xcite establishes a calculus to verify correctness of ws - bpel .",
    "semantics and verifications of ws - bpel are researched in @xcite .",
    "@xcite uses a kind of formal specification to orchestrate wses . unlike these formalizations",
    ", our formal model focuses on the correctness of the wso engine , that is , correctness of a runtime system of wso , but not correctness of the meta languages .",
    "qos - aware wso engine can process not only the functional requirements modeled by the wso description language , but also the qos requirements of the customers .",
    "for example , a wso must complete within three hours and the cost running some wso must be under twenty dollars .",
    "a qos - aware wso translates the qos requirements of the customers into qos requirements of component wses .",
    "such a translation is accomplished by the implementation of the so - called qos - aware service selection algorithm ( qssa ) .",
    "there are many kind of such service selection algorithms , such as @xcite , which uses the so - called local service selection approach and the global allocation approach based on integer programming , and another one in @xcite , which models the service selection problem ( ssp ) in two ways : one defines ssp as a multi - dimensional multi - choice 0 - 1 knapsack problem ( mmkp ) based on combinatorial model and the other captures ssp as a multi - constraint optimal path problem ( mcop ) based on graph model , and gives heuristic algorithms of the two ways .",
    "we do not research ssp itself , but use the implementation of a qssa above as a component of our wso engine qos - wsoe .",
    "note that qos - aware wso implies that the wses involved in this wso also must be qos - aware . in this paper , we assume that the wses are all qos - aware .",
    "about qos of ws , the readers please refer to @xcite and @xcite .",
    "@xcite also involves implementations of qos - aware wses .",
    "actor@xcite@xcite is a basic concurrent computing model and can be used in reasoning about open distributed systems@xcite . in @xcite and @xcite , actors are used to reason about middleware of resource management in distributed computing and even qos - aware middleware .",
    "our works follow the works above , especially @xcite .",
    "that is , in this paper , we adopt the way for formalization of open distributed systems in @xcite which uses a pyramidal refinement to capture the concepts of customer requirements , system requirements , system behaviors and their relationships .",
    "our works focus on qos - aware wso engine , a software system different to the multimedia resource management middleware in @xcite with respect to different qos aspects and qos management , different system functions and architecture , different system components and behaviors .",
    "that is , the formal model in this paper is a different one from that in @xcite .",
    "an actor@xcite@xcite is a basic concurrent computation unit which encapsulates a set of local states , a control thread and a set of local computations .",
    "it has a unique mail address and maintains a mail box to receive messages sent by other actors . through processing the messages stored in the main box sequentially",
    ", an actor computes locally and blocks when its mail box is empty .    during processing a message from its mail box ,",
    "an actor may perform three candidate actions : ( 1)(*send * ) sending messages asynchronously to other actors ; ( 2)(*create * ) creating new actors with new behaviors ; ( 3)(*ready * ) becoming ready again to process the next message from the mail box or block if the mail box is empty .",
    "note that synchronization@xcite can also be achieved among actors .",
    "also there are many works to abstract at a high - level from aspects of distributed computing , such as policy management@xcite , interaction policies@xcite , resource management@xcite , communication and coordination of agents@xcite , worldwide computing@xcite , etc .",
    "the actor computational model can be used to reason about the behavior of a computer system , especially the behavior of a distributed system@xcite .",
    "@xcite uses actors to reason about the behavior of qos - aware distributed middleware and presents a so - called pyramidal structure to capture the concepts of customer requirements , system requirements , system behavior and their relationships .",
    "our works are greatly inspired by this pyramidal structure and are with the similar goal but different system .",
    "that is , our qos - aware wso engine called qos - wsoe has similar requirements , but different behavior , with the qos - aware distributed middleware in @xcite , just because they are different systems in nature .",
    "in this section , we give a so - called buyingbooks example for the scenario of cross - organizational business process integration and use a so - called bookstore wso to illustrate some related concepts , such as wso , activity , etc .",
    "and we use the bookstore wso to explain the formal model we established in the following .",
    "a further example is buyingbooks as fig.[fig.buyingbooksexample ] shows .",
    "we use this buyingbooks example throughout this paper to illustrate concepts and mechanisms in ws composition .        in fig.[fig.buyingbooksexample ] , there are four organizations : buyeragent , bookstore , railwaycorp , and airlinecorp . and",
    "each organization has one business process .",
    "exactly , there are two business processes , the business processes in railwaycorp and airlinecorp are simplified as just wses for simpleness without loss of generality .",
    "we introduce the business process of bookstore as follows , and the process of buyeragent can be understood as contrasts .    1 .   the bookstore receives request of list of books from the buyer through buyeragent .",
    "2 .   it sends the list of books to the buyer via buyeragent .",
    "3 .   it receives the selected book list by the buyer via buyeragent .",
    "4 .   it calculates the price of the selected books .",
    "it sends the price of the selected books to the buyer via buyeragent .",
    "it gets pays for the books from the buyer via buyeragent .",
    "if the pays are greater than 100 $ , then the bookstore calls the shipment service of airlinecorp for the shipment of books . 8 .",
    "otherwise , the bookstore calls the shipment service of railwaycorp for the shipment of book .",
    "then the process is ended .",
    "each business process is implemented by a wso , for example , the bookstore wso and buyeragent wso implement bookstore process and buyeragent process respectively .",
    "each wso invokes external wses through its activities directly . and",
    "each wso is published as a ws to receive the incoming messages .",
    "the bookstore wso described by ws - bpel is given as follows .    ",
    "@xmath0process name=``bookstore ''    targetnamespace=\"http://example.wscs.com    /2011/ws - bp / bookstore\" ... @xmath1    @xmath0partnerlinks@xmath1    @xmath0partnerlink name=``bsandba '' ... /@xmath1    @xmath0partnerlink name=``bsandrc '' ... /@xmath1    @xmath0partnerlink name=``bsandac '' ... /@xmath1    @xmath0/partnerlinks@xmath1    @xmath0variables@xmath1    @xmath0variable name=``requestlistofbooks ''    messagetype=``lns : requestlistofbooks''/@xmath1    @xmath0variable name=``requestlistofbooksresponse ''    messagetype=``lns : requestlistofbooksresponse''/@xmath1    @xmath0variable name=``listofbooks ''    messagetype=``lns : listofbooks''/@xmath1    @xmath0variable name=``listofbooksresponse ''    messagetype=``lns : listofbooksresponse''/@xmath1    @xmath0variable name=``selectlistofbooks ''    messagetype=``lns : selectlistofbooks''/@xmath1    @xmath0variable name=``selectlistofbooksresponse ''    messagetype=``lns : selectlistofbooksresponse''/@xmath1    @xmath0variable name=``price ''    messagetype=``lns : price''/@xmath1    @xmath0variable name=``priceresponse ''    messagetype=``lns : priceresponse''/@xmath1    @xmath0variable name=``pays ''    messagetype=``lns : pays''/@xmath1    @xmath0variable name=``paysresponse ''    messagetype=``lns : paysresponse''/@xmath1    @xmath0variable name=``shipmentbytrain ''    messagetype=``lns : shipmentbytrain''/@xmath1    @xmath0variable name=``shipmentbytrainresponse ''    messagetype=``lns : shipmentbytrainresponse''/@xmath1    @xmath0variable name=``shipmentbyair ''    messagetype=``lns : shipmentbyair''/@xmath1    @xmath0variable name=``shipmentbyairresponse ''    messagetype=``lns : shipmentbyairresponse''/@xmath1    @xmath0/variables@xmath1    @xmath0sequence@xmath1    @xmath0receive    partnerlink=``bsandba ''    porttype=\"lns : bookstore4buyeragent-    interface \"    operation=``oprequestlistofbooks ''    variable=``requestlistofbooks ''    createinstance=``yes''@xmath1    @xmath0/receive@xmath1    @xmath0invoke    partnerlink=``bsandba ''    porttype=\"bns : buyagent4bookstore-    interface \"    operation=``opreceivelistofbooks ''    inputvariable=``listofbooks ''    outputvariable=``listofbooksresponse''@xmath1    @xmath0/invoke@xmath1    @xmath0receive    partnerlink=``bsandba ''    porttype=\"lns : bookstore4buyeragent-    interface \"    operation=``opselectlistofbooks ''    variable=``selectlistofbooks''@xmath1    @xmath0/receive@xmath1    @xmath0reply    partnerlink=``bsandba ''    porttype=\"lns : bookstore4buyeragent-    interface \"    operation=``opselectlistofbooks ''    variable=``selectlistofbooksresponse''@xmath1    @xmath0/reply@xmath1    @xmath0!inner activity : calculate the price    of selected books@xmath1    @xmath0invoke    partnerlink=``bsandba ''    porttype=\"bns : buyagent4bookstore-    interface \"    operation=``opreceiveprice ''    inputvariable=``price ''    outputvariable=``priceresponse''@xmath1    @xmath0receive    partnerlink=``bsandba ''    porttype=\"lns : bookstore4buyeragent-    interface \"    operation=``oppays '' variable=``pays''@xmath1    @xmath0/receive@xmath1    @xmath0reply    partnerlink=``bsandba ''    porttype=\"lns : bookstore4buyeragent-    interface \"    operation=``oppays ''    variable=``paysresponse''@xmath1    @xmath0if@xmath1@xmath0condition@xmath1 getvariable(price )    @xmath0 100 @xmath0/condition@xmath1    @xmath0invoke    partnerlink=``bsandac ''    porttype=\"ans : airlinecorp4bookstore-    interface \"    operation=``opshipmentbyair ''    inputvariable=``shipmentbyair ''    outputvariable=``shipmentbyairresponse''@xmath1    @xmath0else@xmath1    @xmath0invoke    partnerlink=``bsandrc ''    porttype=\"rns : railwaycorp4bookstore-    interface \"    operation=``opshipmentbytrain ''    inputvariable=``shipmentbytrain ''    outputvariable=\"shipmentbytrain-    response\"@xmath1    @xmath0/else@xmath1@xmath0/if@xmath1    @xmath0/sequence@xmath1    @xmath0/process@xmath1        there are several receive - reply activity pairs and several invoke activities in the bookstore wso .",
    "the qos requirements are not included in the ws - bpel description , because these need an extension of ws - bpel and are out of the scope of this paper . in the request message from the buyeragent wso , the qos requirements , such as the whole execution time threshold and the additional charges , can also be attached , not only the functional parameters .",
    "another related specification is the wsdl description of the interface ws for buyingbooks wso .",
    "because we focus on ws composition , this wsdl specification is omitted .",
    "in this section , we firstly analyze the requirements of a wso engine .",
    "and then we discuss problems about qos management of ws and define the qos aspects used in this paper .",
    "finally , we give the architecture of qos - wsoe and discuss the state transition of a wso instance .",
    "as the introduction above says , a wso description language , such as ws - bpel , has :    * basic constructs called atomic activities to model invocation to an external ws , receiving invocation from an external ws and reply to that ws , and other inner basic functions ; * information and variables exchanged between wses ; * control flows called structural activities to orchestrate activities ; * other inner transaction processing mechanisms , such as exception definitions and throwing mechanisms , event definitions and response mechanisms .",
    "therefore , a wso described by ws - bpel is a program with wses as its basic function units and must be enabled by a wso engine .",
    "an execution of a wso is called an instance of that wso .",
    "the wso engine can create a new wso instance according to information included in a request of a customer via the interface ws ( note that a wso is encapsulated as a ws also . ) of the wso .",
    "once a wso is created , it has a thread of control to execute independently according to its definition described by a kind of description language , such as ws - bpel . during its execution",
    ", it may create activities to interact with wses outside and also may do inner processings , such as local variable assignments .",
    "when it ends execution , it replies to the customer with its execution outcomes .    in order to provide the adaptability of a wso , the bindings between its activities and wses outside are not direct and static",
    "that is , wses are classified according to ontologies of specific domains and the wses belonging to the same ontology have same functions and interfaces , and different access points and different qos . to make this possible , from a system viewpoint , a name and directory service ",
    "uddi@xcite is necessary .",
    "all wses with access information and qos information are registered into a uddi which classifies wses by their ontologies to be discovered and invoked in future .",
    "uddi should provide multi interfaces to search wses registered in for its users , for example , a user can get information of specific set of wses by providing a service ontology and specific qos requirements via an interface of the uddi .    the above mechanisms make qos - aware service selection possible . in a qos - aware wso engine , after a new wso instance is created , the new wso instance firstly selects its component wses according to the qos requirements provided by the customer and ontologies of component wses defined in the description file of the wso by ws - bpel .    about qos of a ws@xcite@xcite , there are various qos aspects , such as performance qos , security qos , reliability qos , availability qos , and so on . in this paper",
    ", we use a cost - effective qos approach .",
    "that is , cost qos is used to measure the costs of one invocation of a ws while response time qos is used to capture effectiveness of one invocation of a ws . in the following ,",
    "we assume all wses are aware of cost - effective qos .",
    "according to the requirements of a wso engine discussed above , the architecture of qos - wsoe is given as fig.[fig.1 ] shows .        in the architecture of qos - wsoe , there are external components , such as client , ws of a wso , uddi and component wses , and inner components , including wso instance manager , wso instances , activities , and service selector . among them , ws of a wso , uddi , wso instance manager and service selector are permanent components and client , component wses , wso instances , activities are transient components .",
    "component wses are transient components since they are determined after a service selection process is executed by service selector .    through a typical requirement process",
    ", we illustrate the functions and relationships of these components .    1",
    ".   a client submits its requests including the wso ontology , input parameters and qos requirements to the ws of a wso through soap protocol .",
    "2 .   the ws transmits the requirements from a soap message sent by the client to the wso instance manager using private communication mechanisms .",
    "3 .   the wso instance manager creates a new wso instance including its activities and transmits the input parameters and the qos requirements to the new instance .",
    "the instance transmits ontologies of its component wses and the qos requirements to the service selector to perform a service selection process via interactions with a uddi .",
    "if the qos requirements can not be satisfied , the instance replies to the client to deny this time service .",
    "if the qos requirements can be satisfied , each activity in the wso instance is bound to an external ws .",
    "the wso instance transmits input parameters to each activity for an invocation to its binding ws .",
    "after the wso instance ends its execution , that is , every invocation to its component wses by activities in the wso instance is returned , the wso instance returns the execution outcomes to the client .",
    "an execution of a wso is called a wso instance ( wsoi ) .",
    "a wsoi is created when the wso instance manager receive a new request ( including the functional parameters and the qos requirements )",
    ".        as fig.[fig.wsoi ] shows , once a wsoi is created , the wsoi is in the _ waiting _ state .",
    "then the wso instance manager requires the service selector to perform a service selection process to select suitable component services .",
    "if the qos requirements can not be satisfied , the wsoi transmits to _ denied _ state , otherwise , the wsoi transmits to the _ granted _ state .",
    "when the wsoi starts to execute , that is , the first activity is executed , the wsoi is in the state of _ servicing _ and executes according to the definition of the wso .",
    "finally , the wsoi ends to execute , that is , every activity of the wsoi is completed , the wsoi is with the state of _",
    "completed_.        every instance of an activity ( we do not distinguish the uses of an activity and an activity instance )",
    "is included in a wsoi . when a wsoi is granted , all activities are in the state of _",
    "preparing_. in addition , an activity is with the state of _ invoking _ when it is the executing turn of this activity .",
    "once this activity is completed , that is , it gets the outcomes of the invocation to the external ws , it is in the _ returned _ state .",
    "the state transitions is illustrated in fig.[fig.aa ] .",
    "based on the state transitions of a wsoi and an activity as shown in fig.[fig.wsoi ] and fig.[fig.aa ] , we can get the state transitions of a bookstore wsoi as fig.[fig.bookstore ] illustrates when the qos requirements of the request are satisfied .",
    "components in fig.[fig.1 ] are all implemented as actors .",
    "some of these actors used in the following are client actor ( ca ) , wso instance manager actor ( wsoim ) , wso instance actor ( wsoi ) , activity actor ( aa ) , service selector actor ( ss ) , component ws actor ( ws ) .",
    "we follow the symbol convention in @xcite and @xcite .",
    "some are following , and others are introduced when we need .",
    "@xmath2 denotes a system configuration .",
    "@xmath3 denotes the set of names of actors existing in @xmath2 .",
    "@xmath4 denotes the state of actor @xmath5 in @xmath2 .",
    "@xmath6 gets the value of tag @xmath7 of actor @xmath5 in @xmath2 .",
    "@xmath8 sets the value of tag @xmath7 of actor @xmath5 in @xmath2 with a value @xmath9 .",
    "@xmath10 denotes an actor with a name @xmath5 and a state @xmath11 .",
    "@xmath12 denotes a message with a type @xmath13 sent from actor @xmath5 to actor @xmath14 with optional parameters @xmath15 .",
    "@xmath16\\xrightarrow[effect]{trigger}\\langle a : s'\\rangle , mc \\quad if \\quad condition$ ] denotes a transition rule , where @xmath10 is an actor with name @xmath5 and state @xmath11 , @xmath17 is a message to actor @xmath5 with content @xmath18 , @xmath19 is the new state of actor @xmath5 , @xmath20 is the event triggering this rule , @xmath21 is the effect of this rule such as @xmath8 , @xmath22 is the set of ( possible empty ) messages sent in this rule , @xmath23 is the condition of occurrence of this rule .",
    "@xmath24 denotes a transition , @xmath25 is the source configuration , @xmath26 is the target configuration , and @xmath27 is the label of the transition rule applied .    @xmath28 $ ] denotes a computation path , which is a possibly infinite sequence of transitions .",
    "@xmath29 is called @xmath30th transition of @xmath31 or @xmath30th stage of @xmath31 .",
    "in this section , we will introduce the formal model of qos - wsoe .",
    "firstly , we introduce actors and the symbols used in this section .",
    "then we establish a pyramidal formal structure of qos - wsoe , including * qos - aware wso service * to model the requirements of the customers , * qos - aware wso system * to capture the properties of qos - aware wso engine , and * qos - aware wso behavior * to capture the behaviors of qos - aware wso engine .",
    "let us use a wso ontology @xmath32 range over the set of wso ontologies @xmath33 , and let a request from the customer @xmath34 range over the set of requests @xmath35 .    * definition 4.1 .",
    "( wso request ) * a wso request actor @xmath34 is defined as a 4-tuples @xmath36 @xmath37 @xmath38 @xmath39 , where @xmath40 is the client i d , @xmath32 is the wso ontology requested , @xmath41 is the input parameters of the wso ontology , and @xmath42 is the qos requirements .    * * definition 4.2 .",
    "( wso request functions)**to manipulate a wso request @xmath34 , we define the following functions :    ( 1)@xmath43 denotes the function to get the client i d ;    ( 2)@xmath44 denotes the function to get the wso ontology ;    ( 3)@xmath45 denotes the function to get the input parameters ;    ( 4)@xmath46 denotes the function to get the qos requirements ;    ( 5)@xmath47 denotes the function to get a wso request with a client i d @xmath40 from a configuration @xmath2 .",
    "* * definition 4.3 .",
    "( qos - aware wso service)**a system @xmath48 provides a qos - aware wso service over @xmath33 and @xmath35 iff for every configuration @xmath2 of @xmath48 , if there is an undelivered request @xmath34 in @xmath2 , then along any path @xmath31 of @xmath2 , exactly one of the following properties holds :    ( 1)there is a unique transition @xmath49 in @xmath31 where @xmath34 is accepted for service and the qos requirements @xmath42 of @xmath34 can be satisfied ;    ( 2)or there is a unique transition @xmath49 in @xmath31 where @xmath34 is rejected , only because the qos requirements @xmath42 of @xmath34 can not be satisfied when @xmath34 arrives .",
    "when a @xmath34 message is sent to the wsoim , the wsoim creates a new wsoi .",
    "now we give the definition of wsoi .",
    "* * definition 4.4 .",
    "( wsoi)**a wsoi is defined as a 4-tuples @xmath50 , where @xmath34 is the wso request , @xmath51 is the state of the wsoi , @xmath52 denotes the output parameters of the wsoi , and @xmath53 is activity actors included in the wsoi .",
    "@xmath51 ranges over the set @xmath54 , where @xmath55 denotes that a wsoi is created and is waiting for further processing , @xmath56 denotes that a wsoi is accepted and the qos requirements can be satisfied , @xmath57 denotes that a wso is rejected because the qos requirements can not be satisfied , @xmath58 denotes that a wsoi is under running , and @xmath59 denotes that a wsoi is completed in running and the qos requirements are satisfied .    * * definition 4.5 .",
    "( wsoi functions)**to manipulate a wsoi , the following functions are defined :    ( 1)@xmath60 denotes the function to get the wso request contained in the wso instance @xmath61 ;    ( 2)@xmath62 denotes the function to get the state of the wso instance @xmath61 ;    ( 3)@xmath63 denotes the function to get the set of activity actors contained in the wso instance @xmath61 ;    ( 4)@xmath64 denotes the function to get the output parameters of the wso instance @xmath61 ;    ( 5)@xmath65 creates a new aa name ;    ( 6)@xmath66 denotes the function to get a wso instance @xmath61 with a client i d @xmath40 from the configuration @xmath2 , since a wso instance and a wso request are with 1:1 relation .",
    "we define aa as follows .",
    "* * definition 4.6 .",
    "( aa)**an aa is defined as a 7-tuples @xmath67 , where @xmath68 is the name of the aa , @xmath40 denotes the i d of a wso instance , @xmath69 is the qos requirements of the aa , @xmath70 is the input parameters of the aa , @xmath71 is the output parameters of the aa , @xmath72 is the state of the aa , and @xmath73 is the ws bound after a service selection process .",
    "@xmath72 ranges over @xmath74 , where @xmath75 denotes that an aa is created by a wsoi and is waiting for invoking a ws , @xmath76 denotes that an aa is now invoking a ws , and @xmath77 denotes that the invocation from an aa to a ws is completed .    *",
    "* definition 4.7 .",
    "( aa functions)**to manipulate an aa , we define the following functions :    ( 1)@xmath78 denotes the function to get an activity actor @xmath79 with a name @xmath68 contained in the wso instance @xmath61 ;    ( 2)@xmath80 denotes the function to get an activity actor @xmath79 with a name @xmath68 contained in the wso instance @xmath40 from a configuration @xmath2 ;    ( 3)@xmath81 denotes the function to get the qos requirements of an aa @xmath79 ;    ( 4)@xmath82 denotes the function to get the input parameters of an aa @xmath79 ;    ( 5)@xmath83 denotes the function to get the output parameters of an aa @xmath79 ;    ( 6)@xmath84 denotes the function to get the state of an aa @xmath79 ;    ( 7)@xmath85 denotes the function to get the name of an aa @xmath79 ;    ( 8)@xmath86 denotes the function to get the wsoi i d of an aa @xmath79 ;    ( 9)@xmath87 denotes a function to get the ws bound to an aa @xmath79 .",
    "ws is defined as follows .    *",
    "* definition 4.8 .",
    "( ws)**a ws is determined by a pair @xmath88 , where @xmath40 denotes the i d the a wsoi , and @xmath68 denotes the name @xmath68 of aa that the ws bound . since a ws is out of the management domain of the wsoi , we assume that a ws is always able to process the invocation of its customers , such as an aa .    * * definition 4.9 . (",
    "ws functions)**to manipulate a ws , we define the following functions :    ( 1)@xmath87 denotes the function to get the ws bound of an aa @xmath79 ;    ( 2)@xmath89 denotes the function to get wses included in a wsoi @xmath61 ;    ( 3)@xmath90 denotes the function to get the ws bound to the aa with a name @xmath68 contained in the wso instance @xmath61 .",
    "( 4)@xmath91 denotes the function to get a ws @xmath73 bound to an aa with a name @xmath68 contained in the wso instance @xmath40 from a configuration @xmath2 ;    * * definition 4.10 .",
    "( qos requirements of ws and wsoi)**we use a cost - effectiveness couple @xmath92 to capture the qos requirements of ws and wsoi .",
    "if a wsoi has @xmath93 wses : @xmath94 , then there is the following relation between the wsoi and its wses :    @xmath95 ,    @xmath96 .",
    "since all aas included in a wsoi are executed in parallel by default , we can get the above equations if we ignore the causalities of messages sending among the aas .    *",
    "* definition 4.11 .",
    "( qos - allocate function)**the qos - allocate function translates the qos requirements of a wsoi into the qos requirements of its wses implemented by some kind of qssa , such as in @xcite and @xcite , with an effect of binding aas in the wsoi to wses selected .",
    "the qos - allocate function is defined as follows :    @xmath97    @xmath98 where @xmath61 has @xmath93 wses and @xmath99 .    * * definition 4.12 .",
    "( aa - inputparametersgenerate function)**the aa - inputparametersgenerate function maps the input parameters of a wsoi to those of aas . the aa - inputparametersgenerate is defined as follows :    @xmath100 where @xmath61 has @xmath93 wses and @xmath99 .    *",
    "* definition 4.13 .",
    "( wsoi - outputparametersgenerate function)**the wsoi - outputparametersgenerate function maps the output parameters of aas to those of wsoi .",
    "the wsoi - outputparametersgenerate is defined as follows :    @xmath101 where @xmath61 has @xmath93 wses and @xmath99 .",
    "* * definition 4.14 .",
    "( wsoi constraints @xmath102)**the wsoi constraints @xmath102 includes :    ( 1)a system @xmath48 satisfies @xmath102,@xmath103 , just if for every computation @xmath31 of @xmath48 , @xmath104 holds .",
    "( 2)@xmath104holds , just if for every transition @xmath49 of @xmath31 , @xmath105 holds , and    ( 2-a)a wsoi in some configuration @xmath2 with the state @xmath55 will eventually be granted or be denied .",
    "@xmath106    ( 2-b)a wsoi in some configuration @xmath2 with the state @xmath56 will eventually be in servicing and be completed .",
    "@xmath107    ( 3)@xmath105 holds for @xmath108 , just if    ( 3-a)for a wsoreq in some configuration @xmath2 , once the corresponding wsoi is created , then the wsoreq and all aas in the wsoi are constant .",
    "@xmath109    ( 3-b)for any wsoreq in some configuration @xmath2 , if the state of the corresponding wsoi is @xmath55 , then the wsoi may be in a state @xmath55 , or @xmath56 , or @xmath57 ; if the state of the corresponding wsoi is @xmath57 , then the wsoi will keep in the state @xmath57 ; if the corresponding wsoi is in a state @xmath56 , the it will still be in a state @xmath56 or in a new state @xmath58 ; if the corresponding wsoi is still in the state @xmath58 , the it will still be in a state @xmath58 or in a new state @xmath59 ; if the state of the corresponding wsoi is @xmath59 , then the wsoi will keep in the state @xmath59 .",
    "@xmath110    @xmath111 ,    and    @xmath112 ,    and    @xmath113 ,    and    @xmath114 ,    and    @xmath115 .",
    "( 3-c)if the corresponding wsoi of any wsoreq in some configuration @xmath2 is denied , then the wses included in the wsoi will always be @xmath116 , that is , after a service selection process executed for this wsoi , the qos requirements of the wsoreq can not be satisfied .",
    "@xmath117    * * definition 4.15 .",
    "( wsoi - ws constraints @xmath118)**a system @xmath48 satisfies @xmath118,@xmath119 , just if for every computation @xmath31 of @xmath48 , @xmath120 holds , iff for any ws included in the corresponding wso of any wsoreq in some configuration @xmath2 is not @xmath116 , then the wsoi will in a state @xmath56 , or @xmath58 , or @xmath59 , that is ,    @xmath121    * * definition 4.16 .",
    "( qos - aware wso system)**a system @xmath48 is a qos - aware wso system , with respect to request @xmath34 in @xmath35 , the above functions including qos - allocate function , aa - inputparametersgenerate function , wsoi - outputparametersgenerate function , wso request functions , wsoi functions , aa functions and ws functions , iff ( 1)@xmath48 satisfies @xmath103 and @xmath119 ; ( 2)for @xmath122 , if there is an undelivered request @xmath34 with parameters @xmath123 , then along any path @xmath31 of @xmath2 there is a unique stage @xmath30 transition : @xmath124 to process @xmath34 , and there is a newly created wso instance @xmath125 , with parameters :    * @xmath60 ; * @xmath126 ; * @xmath127 ; * for @xmath128 , * * @xmath129 ; * * @xmath130 ; * * @xmath131 ; * * @xmath132 ; * * @xmath86 ; * * @xmath133 ; * * @xmath134 .    * * theorem 4.1 .",
    "( service2system)**if a system @xmath48 is a qos - aware wso system as definition 4.16 shows , then this system @xmath48 provides qos - aware wso service as defined in definition 4.3 .",
    "we firstly see that if there is an undelivered request @xmath34 for any @xmath2 in @xmath48 , according to definition 4.16 , a new wso instance @xmath61 is created and @xmath135 .",
    "then @xmath136 or @xmath137 according to definition 4.14 , if in @xmath138 , a reply is sent to the customer to reject the request ; if in @xmath139 , then @xmath140 and @xmath141 .",
    "thus , @xmath34 is assured to be just accepted or just rejected .",
    "qos - allocate function , @xmath102 , @xmath118 and definition 4.8 guarantee that the qos requirements are satisfied in case that @xmath34 is accepted .      in this section",
    ", we will specify the behavior of actors in fig.[fig.1 ] , including their states , messages exchanged among them and their transition rules .",
    "then we define the concept of qos - aware wso behavior and draw two conclusions .",
    "wsoi , aa and ws are defined in the above section including their states .",
    "now we will explain wsoim and ss .",
    "the functions of wsoim are creating wsois when incoming requests from ca arrive .",
    "we assume that wsoim are always ready for servicing .",
    "and the functions of ss are providing qos - aware service selection processing for wsois and ss is also always ready for servicing .",
    "we define the messages exchanged among these actors as table.[table.1 ] illustrates .",
    "[ cols=\"<,<\",options=\"header \" , ]     [ table.1 ]    the followings are the transition rules for wsoim and wsoi .",
    "( 1)rule for wsoim creating new wsoi : when the wsoim receives a incoming request message , then a new wsoi is created and a service selection processing message will be sent from the new wsoi to the ss .",
    "@xmath142 { } \\langle wsoim : wsoimstate'\\rangle,\\\\ ss\\lhd select(qos , wso)@wsoi\\nonumber $ ] .",
    "where @xmath143 , and    @xmath144    ( 2)rules for wsoi processing reply from ss : after a service selection process is executed by the ss , a reply message from the ss to the wsoi is sent .",
    "if the qos requirements can not be satisfied , then the wsoi is in a new state @xmath57 and a _ denied _ reply message is sent from the wsoi to the customer .",
    "if the qos requirements can be satisfied , then the wsoi is in a new state @xmath56 and a _ granted _ reply message is sent from the wsoi to the customer and a _ invoke _ message will be sent to any aa included in the wsoi from the wsoi .",
    "@xmath145)@ss\\\\ \\rightarrow \\langle wsoi : denied\\rangle,\\\\ ca\\lhd denied(wso , qos)@wsoi $ ] .",
    "@xmath146)@ss\\\\ \\xrightarrow[effect_{grantedwsoi } ] { } \\langle wsoi : granted\\rangle , \\\\",
    "ca\\lhd granted(wso , qos)@wsoi,\\\\ ( \\forall aa\\in { getaas(wsoi ) } ) aa\\lhd invoke()@wsoi $ ] .    where @xmath147 , and    @xmath148 ,    where @xmath149 denotes the requirements after a service selection processing by ss , @xmath150 denotes input parameters generation of aa from the wsoi , and @xmath151 denotes the ws bound to the aa after a service selection processing by ss .",
    "( 3)rule for wsoi processing reply from aa : when a wsoi in a state @xmath56 or @xmath58 receives a reply message _ invokeack _ from an aa , then it will be in a new state @xmath58 .",
    "@xmath152 .",
    "( 4)rules for wsoi processing notification from aa : when a wsoi in a state @xmath58 receives a notification message from an aa , if all aas included in the wsoi are in state @xmath77 , then the wsoi will be in a new state @xmath59 and a _ completed _ reply message will be sent from the wsoi to the customer .",
    "@xmath153)@aa\\nonumber\\\\ \\xrightarrow[effect_{completedwsoi } ] { } \\langle wsoi : completed\\rangle , \\\\",
    "ca\\lhd completed(wso , qos , ops)@wsoi $ ] .",
    "where @xmath154 and @xmath155 , and    @xmath156 ,    where @xmath157 denotes the results after a ws invocation , @xmath158 denotes output parameters generation of wsoi from the aas .",
    "when a wsoi in a state @xmath58 receives a notification message from an aa , if there is an aa included in the wsoi is not in state @xmath77 , then the wsoi will keep the state @xmath58 .",
    "@xmath159)@aa\\nonumber\\\\ \\rightarrow \\langle wsoi : servicing\\rangle $ ] .    where @xmath160 .",
    "the following is the transition rule for ss to process request from wsoi : when the ss receives a",
    "request message from a wsoi , then a reply message _ selectreply _ will be sent to the wsoi for denying the request or granting the request .",
    "@xmath161)@ss\\\\ \\quad or wsoi\\lhd selectreply\\\\\\quad(wsoi=[state = granted])@ss ) $ ] .",
    "the followings are the transition rules for aa .",
    "( 1)rule for aa to process request from wsoi : an aa in a state @xmath75 receives a request message _ invoke _ from its wsoi , then it will be in a new state @xmath76 , send an _ invokeack _ reply message to the wsoi , and send an _ invoke _ request message to its binding ws .",
    "@xmath162 .",
    "( 2)rule for aa to process reply from ws : when an aa in a state @xmath76 receives an _ invokereply _ reply message from its binding ws , it will be in a new state @xmath77 and send a _",
    "notify _ notification message to its wsoi .",
    "@xmath163 { } \\langle aa : returned\\rangle , \\\\ wsoi\\lhd notify(aa=[state = returned])@aa\\nonumber $ ] .    where @xmath164 , and    @xmath165 ,    where @xmath157 denotes the results after a ws invocation .",
    "the following is the transition rule for ws to accept an invocation from an aa : when a ws receives an _ invoke _ request message from its binding aa , it will do some inner computations and send an _ invokereply _ reply message to its binding aa .",
    "@xmath166 .    * * definition 4.17 .",
    "( qos - aware wso behavior)**a system @xmath48 has qos - aware wso behavior , with respect to architecture as fig.[fig.1 ] shows and actors wsoim , wsoi , aas , wses , ss , if ( 1)for @xmath2 in @xmath48 , states of actors in @xmath2 are just in accordance with definitions of states of actors ; ( 2)for @xmath2 in @xmath48 , messages in @xmath2 are just as table.[table.1 ] define ; ( 3)for every computation @xmath31 in @xmath48 , @xmath31 obeys the transition rules defined above .    * * theorem 4.2 .",
    "( system2behavior)**if a system @xmath48 has qos - aware wso behavior as definition 4.17 defines , then @xmath48 is a qos - aware wso system as definition 4.16 defines .    by the states definition of actors",
    "wsoim , wsoi , aas , wses , ss , message definitions as table.[table.1 ] defined and the transition rule definitions above , we can see that(1)@xmath103 and @xmath119 hold ; ( 2)for @xmath122 , if there is an undelivered request @xmath34 , a new wso instance @xmath61 is assured to be created .    * * theorem 4.3 .",
    "( service2behavior)**if a system @xmath48 has qos - aware wso behavior as definition 4.17 defines , then @xmath48 provides qos - aware wso service as defined in definition 4.3 .    by theorem 4.1 and theorem 4.2 .",
    "the behavior of qos - aware bookstore wso is embodied by the following transition rules .",
    "( 1 )    @xmath142 { } \\langle wsoim : wsoimstate'\\rangle,\\\\ ss\\lhd select(qos , wso)@wsoi\\nonumber $ ] .",
    "@xmath61 is a bookstore wsoi , and    ( 2 )    @xmath161)@ss ) $ ] .",
    "@xmath61 is the bookstore wsoi , and    ( 3 )    @xmath145)@ss\\\\ \\rightarrow \\langle wsoi : denied\\rangle,\\\\ ca\\lhd denied(wso , qos)@wsoi $ ] .",
    "@xmath61 is the bookstore wsoi .    or ,    ( 1 )    @xmath142 { } \\langle wsoim : wsoimstate'\\rangle,\\\\ ss\\lhd select(qos , wso)@wsoi\\nonumber $ ] .",
    "@xmath61 is the bookstore wsoi , and    ( 2 )    @xmath167)@ss ) $ ] .",
    "@xmath61 is the bookstore wsoi , and    ( 3 )    @xmath146)@ss\\\\ \\xrightarrow[effect_{grantedwsoi } ] { } \\langle wsoi : granted\\rangle , \\\\",
    "ca\\lhd granted(wso , qos)@wsoi,\\\\ ( \\forall aa\\in { getaas(wsoi ) } ) aa\\lhd invoke()@wsoi $ ] .",
    "@xmath61 is the bookstore wsoi , @xmath168 , and    ( 4 )    @xmath162 .",
    "@xmath61 is the bookstore wsoi , @xmath168 , @xmath169 , and    ( 5 )    @xmath166 .",
    "@xmath168 , @xmath169 , and    ( 6 )    @xmath163 { } \\langle aa : returned\\rangle , \\\\",
    "wsoi\\lhd notify(aa=[state = returned])@aa\\nonumber $ ] .",
    "@xmath61 is the bookstore wsoi ,    @xmath168 , @xmath169 , and    ( 7 )    @xmath152 .",
    "@xmath61 is the bookstore wsoi , @xmath168 , and    ( 8)    @xmath153)@aa\\nonumber\\\\ \\xrightarrow[effect_{completedwsoi } ] { } \\langle wsoi : completed\\rangle , \\\\",
    "ca\\lhd completed(wso , qos , ops)@wsoi $ ] .",
    "@xmath61 is the bookstore wsoi , @xmath168 .",
    "naturally , qos - aware bookstore wso has qos - aware wso behavior , and further provides qos - aware wso service according to theorem 4.3 .",
    "in this paper , we have discussed issues on qos - aware wso and design a typical qos - aware wso engine called qos - wsoe . mainly ,",
    "a formal model of qos - wsoe based on actor systems theory is established . in the formal model",
    ", a three - layered pyramidal structure is adopted to capture the requirements of the customers with a concept named qos - aware wso service , characteristics of qos - wsoe with a concept named qos - aware wso system , and behaviors of qos - wsoe with a concept named qos - aware wso behavior and a fine relationship among these three layers is established .",
    "i hope this paper can be a guidance for implementing a real qos - aware wso engine with correctness assurance .",
    "m. coabano , e. denti , a. ricci , m. viroli , _ designing a bpel orchestration engine based on respect tuple centres _ , proceedings of the 4th international workshop on the foundations of coordination languages and software architectures ( foclasa 2005 ) , 139158 .",
    "m. viroli , e. denti , a. ricci , _ engineering a bpel orchestration engine as a multi - agent system _ , special issue on the 4th international workshop on foundations of coordination languages and software architectures ( foclasa 2005 ) , 226245 .",
    "g. agha , t. prasanna and z. reza , _ actors : a model for reasoning about open distributed systems _",
    ", formal methods for distributed processing : a survey of object - oriented approaches , cambridge university press , 2001 .",
    "m. c. astley , _ customization and composition of distributed objects : policy management in distributed software architectures _ , ph.d .",
    "dissertation , university of illinois , urbana - champaign . for computer science , 1999 .                                      c. a. varela , _ worldwide computing with universal actors : linguistic abstractions for naming , migration , and coordination _ , ph.d .",
    "dissertation , university of illinois , urbana - champaign . for computer science , 2001 ."
  ],
  "abstract_text": [
    "<S> qos - aware applications can satisfy not only the functional requirements of the customers , but also the qos requirements . </S>",
    "<S> qos - aware web service orchestration translates the qos requirements of the customers into those of its component web services . in a system viewpoint , we discuss issues on qos - aware web service orchestration and design a typical qos - aware web service orchestration engine called qos - wsoe . </S>",
    "<S> more importantly , we establish a formal model of qos - wsoe based on actor systems theory . within the formal model </S>",
    "<S> , we use a three - layered pyramidal structure to capture the requirements of the customers with a concept named qos - aware wso service , characteristics of qos - wsoe with a concept named qos - aware wso system , and structures and behaviors of qos - wsoe with a concept named qos - aware wso behavior . </S>",
    "<S> conclusions showing that a system with qos - aware wso behavior is a qos - aware wso system and further can provide qos - aware wso service are drawn .    </S>",
    "<S> [ firstpage ]    web services ; web service orchestration ; web service orchestration engine ; actor systems ; qos ; formal model </S>"
  ]
}